URL: ftp://ftp.cs.columbia.edu/reports/reports-1990/cucs-064-90b.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1990.html
Root-URL: http://www.cs.columbia.edu
Note: 1.0 Introduction  
Abstract: Many objects in both the man-made world and nature exhibit some degree of symmetry. Formally, an object exhibits symmetry whenever it can be divided into two or more parts which can be permuted by the application of certain isometries which leave the original object unchanged [17]. Two symmetry operations for planar figures are reflection and rotation. The letter M is a reflexive symmetry while the letter S is a rotational symmetry. The letter H is both laterally (reflexive) and rotationally symmetric. If a planar figure is arbitrarily rotated in three dimensions and projected orthographically onto the image plane, the projected figure is generally no longer reflexive symmetric. Under orthographics projection, a right angle can project onto a right, acute, or obtuse angle in the image plane. Consequently, the reflexive symmetric contour in figure 1a projects onto the skew symmetric contour shown in figure 1b, where skew symmetry is defined in [15] as a symmetry not necessarily perpendicular to the axis, but at a fixed angle to it. A skewed symmetry defines two directions, a skewed-symmetry axis and a skewed-transverse axis, as shown in figure 1b. In the real world, skewed contours occur frequently. Figure 2a is an edge image of a PUMA robot arm from the Columbia Vision/Robotics Lab, while figure 2b is a skewed contour hand-segmented from the same image with recovered skew axes shown (using the moment-based method described in section 3). Similarly, figure 3a shows a SUN4 SPARC station in the lab, figure 3b shows a hand-segmented skewed contour from the figure and figure 3c shows the deskewed contour with recovered axes of skew. This paper concerns itself with finding the axes of skew symmetry given a contour that is the orthographic projection of a reflective symmetric planar curve. Often the solution will not be unique and several such solutions will exist, in which case an algorithm finding all such solutions is desired. This paper does not consider other classes of symmetry axes that have been defined in the context of ribbons (see [26]) and generalized cylinders (see [25]). An algorithm that finds axes of skewed symmetry is highly desirable since it is an important step in recovering the coordinate system of the projected figure. If the planar figure is part of an object having a 3D orthogonal coordinate system, as shown in figure 4, then a skewed axis pair make up 2 of the 3 projected axes of the object-centered coordinate system. If the 3rd image axis can be recovered, as in the case of straight homogeneous generalized cylinders [22], the transformation between viewer-and object- centered coordinate systems can be computed (up to a sign factor) [1]. Thus, determining the orientation of skewed axes is important to the shape recovery process. The term skew symmetry was first defined by Kanade in [15]. That paper was primarily concerned with the problem of gradient ambiguity, that is, given the skew symmetric projection of a planar reflexive symmetry, what is the gradient value of the plane in which the symmetric figure lies? In that paper, Kanade shows that there is a hyperbola in the gradient space on which that gradient must lie. Various heuristics have been proposed to uniquely determine the gradient value [3],[13],[15]. In addition to gradient ambiguity, there is generally a second class of amiguity in the skewed figure. This ambiguity is called skew ambiguity since it is the ambiguity involved in determining which of several pairs of skew axes is the correct one. This paper does not discuss methods for resolving gradient ambiguity as this problem is highly context-sensitive and, in general, cannot be solved uniquely from a single skewed contour. Although heuristic methods (a.k.a., constraints) have been used in the past to solve this problem, the necessary constraints are often readily available from the image itself by considering adjacent contours. Constraining the gradient ambiguity by percolating constraints from adjacent contours is discussed in [28]. The context-sensitive nature of resolving gradient ambiguity for skew-symmetric axes is studied in [10]. This paper is concerned with the problem of finding axes of skew. This problem usually has a very finite set of solutions so our interest is in recovering all valid pairs of skew axes, rather than in finding a unique solution to the problem. Determining a unique skew pair solution from this set of solutions usually involves considering constraints from adjacent contours, a topic beyond the scope of this paper. Section 2 of this paper discusses the motivation for detecting skew symmetric axes, some preliminaries relating image skew to orthographic projection, and previous related work. Next, a global moment-based method is presented. A motivation for the method is provided, and examples of the method under noise and occlusion are given. The problem of bias can be quite extreme when computing with higher order moments and this is also studied (section 3). In section 4, a local method is presented for recovering the skew axes that provides a tangential constraint between corresponding skew pairs. Results are shown for both synthetic and real images. Detecting skew contours is a prerequisite for finding the axes of skew. A method for detecting skew contours using a projective quasi-invariant is discussed in section 5. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Barnard, S., </author> <title> Choosing a basis for perceptual space, </title> <booktitle> IEEE Workshop on Computer Vision: Representation and Control, </booktitle> <year> 1984. </year>
Reference-contexts: m03*m03; m04_2 = m04*m04; m13_2 = m13*m13; - 19 - /* equations for cubic equation : F = ax3 + bx2 + cx + d = 0 */ a = (m11_2+m20_2)*m03_2+((-2*m11*m12+2*m30*m11-4*m20*m21)*m02-2*m20*m11*m12+2*m21* 6*m21*m11-4*m20*m30)*m12-2*m21*m30*m11+4*m20*m21_2)*m02+ (m11_2+4*m20_2)*m12_2+(2*m30*m11_2 b = -m20_2*m03_2+((4*m20*m21-2*m30*m11)*m02+2*m20*m11*m12-2*m21*m11_2-4*m20* m20*m30)*m12+4*m21*m30*m11-8*m20*m21_2)*m02+(-m11_2-8*m20_2)*m12_2+(12*m20*m21*m11-4* c = (2*m20*m30*m11-2*m20_2*m21)*m03+m30_2*m02_2+(-4*m20*m30*m12-2*m21*m30*m11+4* *m20*m21*m30*m11+3*m20_2*m21_2; coef [3] = a; coef [2] = b; coef <ref> [1] </ref> = c; coef [0] = d; /* solving this equation yields 3 solutions for cos2 (alpha), where alpha is rotation component of skew transformation */ - A.2 Code for Function G void quartic (moms, coef) double moms [MOM_DEG][MOM_DEG]; float coef []; - double m10, m01, m20, m02, m11, m30, m03, <p> m13*m13; /* equations for quartic equation : ax4 + bx3 + cx2 + dx + e == 0 */ a = (m11*m11+m20*m20)*m04*m04+((-2*m11*m13+6*m31*m11+2*m20*m40-6*m20*m22)*m02-2*m20*m11 m11*m11+6*m20*m31*m11-6*m20_2*m22)*m04+(m13_2-6*m31*m13+m40_2-6*m22*m40+9*m31_2+9*m22_2)* *m22*m40+6*m20*m31_2+18*m20*m22_2)*m02+(4*m11_2+9*m20_2)*m13_2+(8*m31*m11_2+(6*m20*m40-12 - 20 - +m20_2*m31_2+9*m20_2*m22_2; m20*m31*m11+12*m20_2*m22)*m04+(6*m31*m13-3*m40_2+12*m22*m40-18*m31_2-9*m22_2)* *m11+18*m20*m22*m40-18*m20*m31_2-36*m20*m22_2)*m02+(-4*m11_2-18*m20_2)*m13_2+ *m11_2+(8*m20*m31*m40+36*m20*m22*m31)*m11-4*m20_2*m31_2-27*m20_2*m22_2; *m02_2+((6*m40*m11-20*m20*m31)*m13+(-6*m31*m40-12*m22*m31)*m11-18*m20*m22*m40+18*m20* m20_2*m31)*m13+(6*m40_2+12*m31_2)*m11_2+(-12*m20*m31*m40-36*m20*m22*m31)*m11+6*m20_2* d = -m40_2*m02_2+(2*m31*m40*m11+6*m20*m22*m40-6*m20*m31_2)*m02+(6*m20_2*m31-6*m20* *m31_2-9*m20_2*m22_2; coef [4] = a; coef [3] = b; coef [2] = c; coef <ref> [1] </ref> = d; coef [0] = e; - Appendix B Code for bias elimination function K void pol (degree, theta, m) int degree; float *theta; double m [MOM_DEG][MOM_DEG]; - double func_err_4 (), func_err_3 (); bit = 0; ang = *(theta); m11 = m [1][1]; m02 = m [0][2]; m21 = m
Reference: [2] <author> Brady, J.M., and Asada, H., </author> <title> Smoothed local symmetries and their implementation, </title> <journal> International Journal of Robotics Research 3, </journal> <volume> No. 3, </volume> <year> 1984. </year>
Reference-contexts: = m21*m21; m03_2 = m03*m03; m04_2 = m04*m04; m13_2 = m13*m13; - 19 - /* equations for cubic equation : F = ax3 + bx2 + cx + d = 0 */ a = (m11_2+m20_2)*m03_2+((-2*m11*m12+2*m30*m11-4*m20*m21)*m02-2*m20*m11*m12+2*m21* 6*m21*m11-4*m20*m30)*m12-2*m21*m30*m11+4*m20*m21_2)*m02+ (m11_2+4*m20_2)*m12_2+(2*m30*m11_2 b = -m20_2*m03_2+((4*m20*m21-2*m30*m11)*m02+2*m20*m11*m12-2*m21*m11_2-4*m20* m20*m30)*m12+4*m21*m30*m11-8*m20*m21_2)*m02+(-m11_2-8*m20_2)*m12_2+(12*m20*m21*m11-4* c = (2*m20*m30*m11-2*m20_2*m21)*m03+m30_2*m02_2+(-4*m20*m30*m12-2*m21*m30*m11+4* *m20*m21*m30*m11+3*m20_2*m21_2; coef [3] = a; coef <ref> [2] </ref> = b; coef [1] = c; coef [0] = d; /* solving this equation yields 3 solutions for cos2 (alpha), where alpha is rotation component of skew transformation */ - A.2 Code for Function G void quartic (moms, coef) double moms [MOM_DEG][MOM_DEG]; float coef []; - double m10, m01, m20, <p> = m04*m04; m13_2 = m13*m13; /* equations for quartic equation : ax4 + bx3 + cx2 + dx + e == 0 */ a = (m11*m11+m20*m20)*m04*m04+((-2*m11*m13+6*m31*m11+2*m20*m40-6*m20*m22)*m02-2*m20*m11 m11*m11+6*m20*m31*m11-6*m20_2*m22)*m04+(m13_2-6*m31*m13+m40_2-6*m22*m40+9*m31_2+9*m22_2)* *m22*m40+6*m20*m31_2+18*m20*m22_2)*m02+(4*m11_2+9*m20_2)*m13_2+(8*m31*m11_2+(6*m20*m40-12 - 20 - +m20_2*m31_2+9*m20_2*m22_2; m20*m31*m11+12*m20_2*m22)*m04+(6*m31*m13-3*m40_2+12*m22*m40-18*m31_2-9*m22_2)* *m11+18*m20*m22*m40-18*m20*m31_2-36*m20*m22_2)*m02+(-4*m11_2-18*m20_2)*m13_2+ *m11_2+(8*m20*m31*m40+36*m20*m22*m31)*m11-4*m20_2*m31_2-27*m20_2*m22_2; *m02_2+((6*m40*m11-20*m20*m31)*m13+(-6*m31*m40-12*m22*m31)*m11-18*m20*m22*m40+18*m20* m20_2*m31)*m13+(6*m40_2+12*m31_2)*m11_2+(-12*m20*m31*m40-36*m20*m22*m31)*m11+6*m20_2* d = -m40_2*m02_2+(2*m31*m40*m11+6*m20*m22*m40-6*m20*m31_2)*m02+(6*m20_2*m31-6*m20* *m31_2-9*m20_2*m22_2; coef [4] = a; coef [3] = b; coef <ref> [2] </ref> = c; coef [1] = d; coef [0] = e; - Appendix B Code for bias elimination function K void pol (degree, theta, m) int degree; float *theta; double m [MOM_DEG][MOM_DEG]; - double func_err_4 (), func_err_3 (); bit = 0; ang = *(theta); m11 = m [1][1]; m02 = m
Reference: [3] <author> Brady, J.M., and Yuille, A., </author> <title> An extremum principle for shape from contour, </title> <publisher> MIT, </publisher> <address> AI Lab., MIT-AIM 711, </address> <year> 1983. </year>
Reference-contexts: m02_2 = m02*m02; m21_2 = m21*m21; m03_2 = m03*m03; m04_2 = m04*m04; m13_2 = m13*m13; - 19 - /* equations for cubic equation : F = ax3 + bx2 + cx + d = 0 */ a = (m11_2+m20_2)*m03_2+((-2*m11*m12+2*m30*m11-4*m20*m21)*m02-2*m20*m11*m12+2*m21* 6*m21*m11-4*m20*m30)*m12-2*m21*m30*m11+4*m20*m21_2)*m02+ (m11_2+4*m20_2)*m12_2+(2*m30*m11_2 b = -m20_2*m03_2+((4*m20*m21-2*m30*m11)*m02+2*m20*m11*m12-2*m21*m11_2-4*m20* m20*m30)*m12+4*m21*m30*m11-8*m20*m21_2)*m02+(-m11_2-8*m20_2)*m12_2+(12*m20*m21*m11-4* c = (2*m20*m30*m11-2*m20_2*m21)*m03+m30_2*m02_2+(-4*m20*m30*m12-2*m21*m30*m11+4* *m20*m21*m30*m11+3*m20_2*m21_2; coef <ref> [3] </ref> = a; coef [2] = b; coef [1] = c; coef [0] = d; /* solving this equation yields 3 solutions for cos2 (alpha), where alpha is rotation component of skew transformation */ - A.2 Code for Function G void quartic (moms, coef) double moms [MOM_DEG][MOM_DEG]; float coef []; - <p> m03_2 = m03*m03; m04_2 = m04*m04; m13_2 = m13*m13; /* equations for quartic equation : ax4 + bx3 + cx2 + dx + e == 0 */ a = (m11*m11+m20*m20)*m04*m04+((-2*m11*m13+6*m31*m11+2*m20*m40-6*m20*m22)*m02-2*m20*m11 m11*m11+6*m20*m31*m11-6*m20_2*m22)*m04+(m13_2-6*m31*m13+m40_2-6*m22*m40+9*m31_2+9*m22_2)* *m22*m40+6*m20*m31_2+18*m20*m22_2)*m02+(4*m11_2+9*m20_2)*m13_2+(8*m31*m11_2+(6*m20*m40-12 - 20 - +m20_2*m31_2+9*m20_2*m22_2; m20*m31*m11+12*m20_2*m22)*m04+(6*m31*m13-3*m40_2+12*m22*m40-18*m31_2-9*m22_2)* *m11+18*m20*m22*m40-18*m20*m31_2-36*m20*m22_2)*m02+(-4*m11_2-18*m20_2)*m13_2+ *m11_2+(8*m20*m31*m40+36*m20*m22*m31)*m11-4*m20_2*m31_2-27*m20_2*m22_2; *m02_2+((6*m40*m11-20*m20*m31)*m13+(-6*m31*m40-12*m22*m31)*m11-18*m20*m22*m40+18*m20* m20_2*m31)*m13+(6*m40_2+12*m31_2)*m11_2+(-12*m20*m31*m40-36*m20*m22*m31)*m11+6*m20_2* d = -m40_2*m02_2+(2*m31*m40*m11+6*m20*m22*m40-6*m20*m31_2)*m02+(6*m20_2*m31-6*m20* *m31_2-9*m20_2*m22_2; coef [4] = a; coef <ref> [3] </ref> = b; coef [2] = c; coef [1] = d; coef [0] = e; - Appendix B Code for bias elimination function K void pol (degree, theta, m) int degree; float *theta; double m [MOM_DEG][MOM_DEG]; - double func_err_4 (), func_err_3 (); bit = 0; ang = *(theta); m11 = m
Reference: [4] <author> Brooks, R. A., </author> <title> Symbolic reasoning among 3-D models and 2-D images, </title> <booktitle> Artificial Intelligence 17, </booktitle> <pages> 285-348, </pages> <year> 1981. </year>
Reference-contexts: There have been very few papers dealing with this topic. Clearly, any system that wants to analyze skew symmetric contours must first be able to find them. Nevatia [19] pairs symmetric contours by considering the nearest symmetries. Brooks <ref> [4] </ref> used prediction models and constrained viewpoint assumptions to help in ribbon detection. Rao [25] generalized the work in [19] to images with marking and broken contours. A survey of such detection methods and some of their deficiencies is given in Mohan [16]. <p> m02*m02; m21_2 = m21*m21; m03_2 = m03*m03; m04_2 = m04*m04; m13_2 = m13*m13; /* equations for quartic equation : ax4 + bx3 + cx2 + dx + e == 0 */ a = (m11*m11+m20*m20)*m04*m04+((-2*m11*m13+6*m31*m11+2*m20*m40-6*m20*m22)*m02-2*m20*m11 m11*m11+6*m20*m31*m11-6*m20_2*m22)*m04+(m13_2-6*m31*m13+m40_2-6*m22*m40+9*m31_2+9*m22_2)* *m22*m40+6*m20*m31_2+18*m20*m22_2)*m02+(4*m11_2+9*m20_2)*m13_2+(8*m31*m11_2+(6*m20*m40-12 - 20 - +m20_2*m31_2+9*m20_2*m22_2; m20*m31*m11+12*m20_2*m22)*m04+(6*m31*m13-3*m40_2+12*m22*m40-18*m31_2-9*m22_2)* *m11+18*m20*m22*m40-18*m20*m31_2-36*m20*m22_2)*m02+(-4*m11_2-18*m20_2)*m13_2+ *m11_2+(8*m20*m31*m40+36*m20*m22*m31)*m11-4*m20_2*m31_2-27*m20_2*m22_2; *m02_2+((6*m40*m11-20*m20*m31)*m13+(-6*m31*m40-12*m22*m31)*m11-18*m20*m22*m40+18*m20* m20_2*m31)*m13+(6*m40_2+12*m31_2)*m11_2+(-12*m20*m31*m40-36*m20*m22*m31)*m11+6*m20_2* d = -m40_2*m02_2+(2*m31*m40*m11+6*m20*m22*m40-6*m20*m31_2)*m02+(6*m20_2*m31-6*m20* *m31_2-9*m20_2*m22_2; coef <ref> [4] </ref> = a; coef [3] = b; coef [2] = c; coef [1] = d; coef [0] = e; - Appendix B Code for bias elimination function K void pol (degree, theta, m) int degree; float *theta; double m [MOM_DEG][MOM_DEG]; - double func_err_4 (), func_err_3 (); bit = 0; ang =
Reference: [5] <author> Buchberger, B., </author> <title> Applications of Grobner bases in non-linear computational geometry. </title> <editor> In R. Janssen, editor, </editor> <booktitle> Trends in computer algebra: international symposium, </booktitle> <pages> pages 52-80. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference: [6] <editor> Buchberger, B., Collins, G.E., and Loos, R., editors, </editor> <booktitle> Computer Algebra: Symbolic and Algebraic Computation, </booktitle> <publisher> Springer-Verlag, </publisher> <address> 1983, New York. </address>
Reference: [7] <author> Burt, P.J., </author> <title> Moment images, polynomial fit filters, and the problem of surface interpolation, </title> <booktitle> in the Proceedings of the 1988 Conference on Computer Vision and Pattern Recognition, </booktitle> <address> Ann Arbor, Michigan, </address> <month> June 5-9, </month> <pages> pages 144-152. </pages>
Reference: [8] <author> Cyganski, D., Orr, J.A., and Pinjo, Z., </author> <title> A tensor operator method for identifying the affine transformation relating image pairs, </title> <booktitle> in Proc. IEEE-CS Conference on Computer Vision and Pattern Recognition, </booktitle> <address> Montreal, Quebec, </address> <year> 1983, </year> <pages> pages 361-363. - 23 </pages> - 
Reference: [9] <author> Freidberg, S.A., </author> <title> Finding Axes of Skewed Symmetry, </title> <booktitle> in Computer Vision, Graphics, and Image Processing, </booktitle> <volume> 34, </volume> <pages> 138-155, </pages> <year> 1986. </year>
Reference: [10] <author> Gross, </author> <title> A.D., Shape from a Symmetric Universe, </title> <type> Technical Report CUCS-065-90, </type> <institution> Department of Computer Science, Columbia University. </institution>
Reference-contexts: It is the job of a symmetry analyzer to find such axes of skew. Whether a particular axis of skew corresponds to the actual symmetry axis is usually a context-sensitive decision that cannot be decided at the contour level <ref> [10] </ref>. Adjacent contours, each with a set of plausible skew symmetric axes, can be used to find a unique solution. Image ellipses provide axes of symmetry that do not correspond, under an assumption of general viewpoint, to the axes of the underlying scene ellipse. <p> such pairs of skew axes, it makes sense not to try and resolve the skew ambiguity on this level, but rather to pass it on to a higher level that is more context-sensitive and can probably arrive at a unique set of skew axes using constraints from adjacent contours (see <ref> [10] </ref>). Realizing that moments are fast but subject to bias, SYMAN has a bias correcting module. Given a solution, which it assumes is close to being correct, it polishes the solution to greater accuracy using a measure that is more insensitive to noise and discretization effects. <p> This bias-correcting module substantially improves the accuracy of recovered solutions (see section 3.5). SYMAN is intended as a module in a larger shape recovery system that tries to recover shape from monocular intensity images by assuming an underlying model of a regular, symmetric universe (see <ref> [10] </ref>). 7. Conclusions and Future Work This paper presented two new techniques for finding axes of skew. The first was a analytic approach that solved for the axes of skew from computed image moments. This global-based method is very fast.
Reference: [11] <author> Gross, A.D., and Boult, T.E., </author> <title> Error of fit measures for recovering parametric solids, </title> <booktitle> in Proceedings of the 2nd International Conference on Computer Vision, </booktitle> <pages> pages 690-694, </pages> <address> Tampa, Fl., </address> <month> December </month> <year> 1988. </year>
Reference: [12] <author> Gross, A.D., Boult, T.E., </author> <title> Skew symmetry detection: Evaluating the state of the art, </title> <type> Technical Report, </type> <institution> Department of Computer Science, Columbia University. </institution>
Reference-contexts: There are several local methods, discussed in section 2, for finding axes of skew. The motivation for yet another such method is because the other two local methods tried by the authors (see <ref> [12] </ref>) had various drawbacks that this method does not. The local method in Ponce [21] works well if curvature can be reliably computed from the image contour. Since computing curvature involves taking second derivatives, it is sensitive to noise and discretization error. <p> As such, outliers do not pose a problem in recovering the correct solution. The line-based method in [27], i.e., selecting the projection angle yielding the straightest - 13 - axis of skew symmetry, is very sensitive to outliers. In <ref> [12] </ref>, where a version of the algorithm described in [27] is implemented, we attempt to deal with the problem by using median filtering, discarding points with absolute deviation larger than the median, and recomputing the line parameters. <p> In the next section, we show some experimental results on real and synthetic images. The performance of the algorithm is also compared to some existing methods. A much more thorough comparison of exisitng skew finding techniques can be found in <ref> [12] </ref>. 4.2 Experimental Results of section 3. Using the tangent-based method described in the previous section, where the contour is generated synthetically and the tangent at a point is computed by taking finite differences in a local neighbor hood around the point, all correct solutions of skew axes are found. <p> It is easier to see this by viewing a scatter plot of the matched contour points, as illustrated in <ref> [12] </ref>. In any event, false matches are a problem with any local method such as [21] and [27], and are more prevalent for complex, non-convex contours. The problem of point mismatching for local skew-finding algorithms is discussed in greater detail in [12]. <p> plot of the matched contour points, as illustrated in <ref> [12] </ref>. In any event, false matches are a problem with any local method such as [21] and [27], and are more prevalent for complex, non-convex contours. The problem of point mismatching for local skew-finding algorithms is discussed in greater detail in [12]. This is one of the advantages that a global, moment-based method has over the local methods; no pointwise correspondence is required so there is no problem of pointwise mismatches.
Reference: [13] <author> Horaud, R., and Brady, J.M., </author> <title> On the geometric interpretation of image contours, </title> <booktitle> in Proc. First Int'l Conference on Computer Vision, </booktitle> <address> London, U.K., </address> <month> June </month> <year> 1987. </year>
Reference: [14] <author> Ibrahim, H.A.H., </author> <title> Image understanding algorithms on fine-grained tree-structured SIMD machines, </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Columbia University, </institution> <year> 1984. </year>
Reference: [15] <author> Kanade, T., </author> <title> Recovery of the 3D shape of an object from a single view, </title> <journal> Artificial Intelligence, </journal> <volume> vol. 17, </volume> <pages> pages. 409-460, </pages> <year> 1981. </year>
Reference: [16] <author> Mohan, R., </author> <title> Perceptual organization for computer vision, </title> <type> PhD thesis, </type> <institution> School of Engineering, University of Southern California, </institution> <month> August, </month> <year> 1989. </year>
Reference-contexts: Brooks [4] used prediction models and constrained viewpoint assumptions to help in ribbon detection. Rao [25] generalized the work in [19] to images with marking and broken contours. A survey of such detection methods and some of their deficiencies is given in Mohan <ref> [16] </ref>. In [16], a new symmetry axis is defined. His symmetry axis is curve-based, rather than being point (edge) based, and is thus much easier to compute. <p> Brooks [4] used prediction models and constrained viewpoint assumptions to help in ribbon detection. Rao [25] generalized the work in [19] to images with marking and broken contours. A survey of such detection methods and some of their deficiencies is given in Mohan <ref> [16] </ref>. In [16], a new symmetry axis is defined. His symmetry axis is curve-based, rather than being point (edge) based, and is thus much easier to compute. <p> It would seem that a robust symmetry detector should also be able to exclude certain pairs of curves from being grouped as a (skew) symmetric con tour pair. Among the deficiencies mentioned in <ref> [16] </ref> with existing methods are : 1. Only pure symmetries, and not skew symmetries, are detected. 2. In the projected scene, the orientation of the image axis may be a function a viewpoint and may not correspond to the projected axes of the object. - 16 - 3. <p> In this section, a method is described to efficiently detect skew symmetric contours. We will specifically address how the method deals with the deficiencies listed in <ref> [16] </ref> and cited above. As noted in section 2, many symmetric shapes in the real world are not simply symmetric, but rather they are doubly symmetric; that is, the x and y axes both serve as axes of symmetry (see section 2.2).
Reference: [17] <author> Nalwa, </author> <title> Vic, Line-drawing interpretation: Bilateral symmetry, </title> <booktitle> in Proceedings of the Image Understanding Workshop, </booktitle> <volume> vol. 2, </volume> <month> Feb., </month> <year> 1987, </year> <pages> pp. 956-967. </pages>
Reference: [18] <author> Nalwa, </author> <title> Vic, Line-drawing interpretation: </title> <booktitle> Straight-lines and conic-sections, in Proceedings of the Image Understanding Workshop, </booktitle> <volume> vol. 2, </volume> <month> Feb., </month> <year> 1987, </year> <pages> pp. 942-955. </pages>
Reference: [19] <author> Nevatia, R., </author> <title> Computer analysis of scenes of 3-d curved objects, </title> <address> Birkhauser-Verlag, Basel, Switzerland, </address> <year> 1976. </year>
Reference-contexts: There have been very few papers dealing with this topic. Clearly, any system that wants to analyze skew symmetric contours must first be able to find them. Nevatia <ref> [19] </ref> pairs symmetric contours by considering the nearest symmetries. Brooks [4] used prediction models and constrained viewpoint assumptions to help in ribbon detection. Rao [25] generalized the work in [19] to images with marking and broken contours. <p> Clearly, any system that wants to analyze skew symmetric contours must first be able to find them. Nevatia <ref> [19] </ref> pairs symmetric contours by considering the nearest symmetries. Brooks [4] used prediction models and constrained viewpoint assumptions to help in ribbon detection. Rao [25] generalized the work in [19] to images with marking and broken contours. A survey of such detection methods and some of their deficiencies is given in Mohan [16]. In [16], a new symmetry axis is defined. His symmetry axis is curve-based, rather than being point (edge) based, and is thus much easier to compute.
Reference: [20] <author> Nevatia, R., and Binford, </author> <title> T.O., Description and recognition of complex curved objects, </title> <booktitle> Artificial Intelligence 8, </booktitle> <pages> 77-98, </pages> <year> 1977. </year>
Reference-contexts: The projection angle a that yields the narrowest distribution (smallest s) with respect to the skew angle b is selected as the rotation angle, with the peak of its b distribution selected as the corresponding angle of skew. This is equivalent to the method of projections described in <ref> [20] </ref> and also used in the skew finding algorithm described in [21]. The algorithm, in pseudo-code form, is given below. The input consists of a list of points, given as (x,y) values, together with the computed tangent value at each point. 1.
Reference: [21] <author> Ponce, J., </author> <title> On characterizing ribbons and finding skewed symmetries, accepted for publication in Computer Vision, Graphics, </title> <booktitle> and Image Processing, </booktitle> <month> Fall </month> <year> 1990. </year>
Reference-contexts: There are several local methods, discussed in section 2, for finding axes of skew. The motivation for yet another such method is because the other two local methods tried by the authors (see [12]) had various drawbacks that this method does not. The local method in Ponce <ref> [21] </ref> works well if curvature can be reliably computed from the image contour. Since computing curvature involves taking second derivatives, it is sensitive to noise and discretization error. In addition, the algorithm described in [21] will not work on linear contours (k = 0), which occur frequently in real images. <p> The local method in Ponce <ref> [21] </ref> works well if curvature can be reliably computed from the image contour. Since computing curvature involves taking second derivatives, it is sensitive to noise and discretization error. In addition, the algorithm described in [21] will not work on linear contours (k = 0), which occur frequently in real images. The method described in [27] does not require computing any derivatives on the image contour, as opposed to our tangent method that requires computing a first derivative or Ponce's that involves second derivatives. <p> This is to be compared with the stronger necessary constraint among skew symmetric pairs of points found in Ponce <ref> [21] </ref>. Ponce has a necessary condition between a skew symmetric pair given by k - R Q sin q + hhhhhh H P , (4.4) where q- are as defined above, and k is the curvature at the point (before skewing) (- x , y ). <p> This is equivalent to the method of projections described in [20] and also used in the skew finding algorithm described in <ref> [21] </ref>. The algorithm, in pseudo-code form, is given below. The input consists of a list of points, given as (x,y) values, together with the computed tangent value at each point. 1. <p> It is easier to see this by viewing a scatter plot of the matched contour points, as illustrated in [12]. In any event, false matches are a problem with any local method such as <ref> [21] </ref> and [27], and are more prevalent for complex, non-convex contours. The problem of point mismatching for local skew-finding algorithms is discussed in greater detail in [12]. <p> His symmetry axis is curve-based, rather than being point (edge) based, and is thus much easier to compute. The defintion for Mohan's symmetry axis is very general, i.e., any two curves can be paired together, so that there is no strongly attached necessary condition (as in <ref> [21] </ref> or the tangent criterion of section 4). It would seem that a robust symmetry detector should also be able to exclude certain pairs of curves from being grouped as a (skew) symmetric con tour pair. Among the deficiencies mentioned in [16] with existing methods are : 1. <p> SYMAN consists of of different components. In particular, it is capable of running 4 different algorithms that recover axes of skew. Two of these algorithms were described in this paper. The other two are described in <ref> [21] </ref> and [27]. The reason for wanting to implement all of these methods is because each of the methods appears to have certain strengths and the trick seems to be in knowing when to use each technique. <p> For example, the moment-based method does not work well under occlusion or when the degree of skew symmetry is greater than 4. The method of <ref> [21] </ref> does not work well when curvature values are unreliable or the contour is discontinuous. The line-based method of [27] is very sensitive to outliers. By having several methods to choose from, and knowing when to use them, SYMAN can be made more robust.
Reference: [22] <author> Ponce, J., Chelberg, D., and Mann, W., </author> <title> Invariant properties of straight homogeneous Generalized Cylinders and their Contours, </title> <journal> in IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> vol. II, No. 9, </volume> <month> September </month> <year> 1989. </year>
Reference: [23] <author> Ponce, J., and Kriegman, </author> <title> D.J., On recognizing and positioning curved 3D objects from image contours, </title> <booktitle> in IEEE Proceedings of the Workshop on 3D Interpretation of Scenes, </booktitle> <pages> pages 116-123, </pages> <month> Nov. </month> <pages> 27-29, </pages> <address> 1989, Austin, TX. </address>
Reference: [24] <author> Press, </author> <title> W.H., Flannery, B.P., Teukolsky, S.A., Vetterling, W.T., Numerical Recipes in C: </title> <booktitle> The Art of Scientific Computing, </booktitle> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <year> 1989. </year>
Reference: [25] <author> Rao, K., </author> <title> Shape description from sparse and imperfect data, </title> <type> Technical Report IRIS-250, </type> <institution> Institute for Robotics and Intelligent Systems, USC, </institution> <month> December </month> <year> 1988. </year> <type> Ph.D. Thesis. </type>
Reference-contexts: Clearly, any system that wants to analyze skew symmetric contours must first be able to find them. Nevatia [19] pairs symmetric contours by considering the nearest symmetries. Brooks [4] used prediction models and constrained viewpoint assumptions to help in ribbon detection. Rao <ref> [25] </ref> generalized the work in [19] to images with marking and broken contours. A survey of such detection methods and some of their deficiencies is given in Mohan [16]. In [16], a new symmetry axis is defined.
Reference: [26] <author> Rosenfeld, A., </author> <title> Axial representation of shape, </title> <journal> Journal of Computer Vision, Graphics, and Image Processing, </journal> (33):156-173, 1986. 
Reference: [27] <author> Saint-Marc, P., and Medinoni, G., </author> <title> B-spline contour representation and symmetry detection, </title> <type> technical report, </type> <institution> Institute for Robotics and Intelligent Systems, University of Southern Califor-nia, </institution> <address> Los Angeles, CA, </address> <month> Feb 20, </month> <year> 1990. </year>
Reference-contexts: Since computing curvature involves taking second derivatives, it is sensitive to noise and discretization error. In addition, the algorithm described in [21] will not work on linear contours (k = 0), which occur frequently in real images. The method described in <ref> [27] </ref> does not require computing any derivatives on the image contour, as opposed to our tangent method that requires computing a first derivative or Ponce's that involves second derivatives. The problem is that it is very sensitive to outliers, namely, mismatched pairs of points. <p> In our method, as in ponce's, every pair of points at a given projection votes for a solution. As such, outliers do not pose a problem in recovering the correct solution. The line-based method in <ref> [27] </ref>, i.e., selecting the projection angle yielding the straightest - 13 - axis of skew symmetry, is very sensitive to outliers. In [12], where a version of the algorithm described in [27] is implemented, we attempt to deal with the problem by using median filtering, discarding points with absolute deviation larger <p> As such, outliers do not pose a problem in recovering the correct solution. The line-based method in <ref> [27] </ref>, i.e., selecting the projection angle yielding the straightest - 13 - axis of skew symmetry, is very sensitive to outliers. In [12], where a version of the algorithm described in [27] is implemented, we attempt to deal with the problem by using median filtering, discarding points with absolute deviation larger than the median, and recomputing the line parameters. This robust statistics approach helps mitigate the effects of outliers, but does not completely solve the problem. <p> This condition, however, requires knowledge of second derivative information at each point, i.e., curvature. On the other hand, the method described in <ref> [27] </ref> can be considered a necessary condition among triples of skew symmetric pairs, namely, the midpoints of these three pairs of points must lie on a straight line. This method requires no derivative computation at points on the contour. <p> It is easier to see this by viewing a scatter plot of the matched contour points, as illustrated in [12]. In any event, false matches are a problem with any local method such as [21] and <ref> [27] </ref>, and are more prevalent for complex, non-convex contours. The problem of point mismatching for local skew-finding algorithms is discussed in greater detail in [12]. <p> SYMAN consists of of different components. In particular, it is capable of running 4 different algorithms that recover axes of skew. Two of these algorithms were described in this paper. The other two are described in [21] and <ref> [27] </ref>. The reason for wanting to implement all of these methods is because each of the methods appears to have certain strengths and the trick seems to be in knowing when to use each technique. <p> For example, the moment-based method does not work well under occlusion or when the degree of skew symmetry is greater than 4. The method of [21] does not work well when curvature values are unreliable or the contour is discontinuous. The line-based method of <ref> [27] </ref> is very sensitive to outliers. By having several methods to choose from, and knowing when to use them, SYMAN can be made more robust. Aside from being able to recover axes of skew, SYMAN also tries to understand the contour.
Reference: [28] <author> Stevens, K.A., </author> <title> The visual interpretation of surface contours, </title> <booktitle> Artificial Intelligence17, </booktitle> <pages> 47-73, </pages> <year> 1981. </year>
Reference: [29] <author> Tsukune, H., and Goto, K., </author> <title> Extracting elliptical figures from an edge vector field, </title> <booktitle> in Proc IEEE Conf. on Computer Vision and Pattern Recognition, </booktitle> <address> WA, USA (1983), </address> <pages> pp. 138-141. </pages> <note> IEEE Tran - 24 </note> - 
Reference: [30] <author> Ulupinar, F., and Nevatia, R., </author> <title> Using symmetries for analysis of shape from contour, </title> <booktitle> in Proceedings of the Second International Computer Vision Conference, </booktitle> <pages> 414-426, </pages> <month> Dec. </month> <pages> 5-8, </pages> <year> 1988. </year>
Reference: [31] <author> Yuen, H.K., Illingwirth, J., Kittler, J., </author> <title> Detecting partially occluded ellipses using the Hough transform, </title> <booktitle> in Image and Vision Computing, </booktitle> <volume> vol. 7, no. 1, </volume> <month> Feb, </month> <year> 1989. </year>
Reference: [32] <author> Yuen, S.Y.K., </author> <title> Shape from contour using symmetries, </title> <type> techincal report, </type> <institution> School of Cognitive Sciences, University of Sussex, </institution> <address> Falmer, Brighton, BN1 9QN, </address> <year> 1989. </year>
References-found: 32

