URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS97-12.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Efficient Dynamic Range Searching using Data Replication  
Author: K. V. Ravi Kanth and Ambuj K. Singh 
Address: Santa Barbara, CA 93106  
Affiliation: Computer Science Department University of California at Santa Barbara  
Abstract: Given the lower bound of (n (d1)=d ) for range query time complexity on n d-dimensional point data, we investigate whether little replication can improve the query and update times significantly. We propose linear-space index structures that minimize the query and update times; the query time we achieve is O(n * ) for any * &gt; 0, and, the update time is O(log n). 
Abstract-found: 1
Intro-found: 1
Reference: [Beckman et al. 1990] <author> Beckmann, N., Kreigel, H., Schneider, R., and Seeger. B. </author> <title> The R*-tree: An efficient and robust access method for points and rectangles, Porc. </title> <booktitle> of the ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pp 322-331, </pages> <year> 1990. </year>
Reference-contexts: For large databases, structures that have nonlinear storage requirements may not acceptable. Consequently, several linear-space structures such as the R-trees <ref> [Beckman et al. 1990, Guttman 1984] </ref>, Bang files [Freeston 1987] have been proposed in the database literature. These structures achieve low storage costs by storing each data point exactly once. <p> This corresponds to a replication of O (l d1 ) for each data point. For large databases, almost all index structures including R fl -trees <ref> [Beckman et al. 1990, Guttman 1984] </ref> and Bang files [Freeston 1987] are maintained in secondary memory even when there is no such replication. <p> Applying theorem 2, the weak insertion/deletion times can be transformed into worst-case bounds. 2 15 5 Conclusions In this paper we considered the problem of dynamic range searching using linear space structures. Since current structures such as the R-trees <ref> [Beckman et al. 1990, Guttman 1984] </ref> and Bang files [Freeston 1987] have high query time complexity (O (n) for n points [Ravi and Ambuj 1997]), we focussed on alternate means to improve query performance in dynamic environments. <p> The resulting structure has O (n * ) query time for any * &gt; 0 and O (log n) insertion/deletion times. In the future, we would like to compare the performance of the l-level range structure with the performance of conventional structures such as the R fl -tree <ref> [Beckman et al. 1990, Berchtold et al. 1996] </ref> and the BV-tree [Freeston 1995] by conducting several experiments on real spatial and image data from the Alexandria Digital Library. An important point to note is that the l-level range structure does not form overlapping index regions as the R fl -tree.
Reference: [Bentley 1977] <author> Bentley, J. L. </author> <title> Multidimensional binary search trees used for associative searching, </title> <journal> Communications of the ACM, </journal> <volume> 18, </volume> <pages> pp. 509-517, </pages> <year> 1977. </year>
Reference-contexts: This type of searching in multiple dimensions is fundamental to geographic information systems, image databases and computer graphics. Several efficient data structures using linear and nonlinear space (measured in terms of the number of data points) have been proposed in the literature <ref> [Bentley 1977, Bentley 1980, Guttman 1984] </ref>. For large databases, structures that have nonlinear storage requirements may not acceptable. Consequently, several linear-space structures such as the R-trees [Beckman et al. 1990, Guttman 1984], Bang files [Freeston 1987] have been proposed in the database literature.
Reference: [Bentley 1980] <author> Bentley J. L. and Maurer, H.A. </author> <title> Efficient worst-case data structures for range searching, </title> <journal> Acta Infor-matica 13, </journal> <pages> pp. 155-168, </pages> <year> 1980. </year>
Reference-contexts: This type of searching in multiple dimensions is fundamental to geographic information systems, image databases and computer graphics. Several efficient data structures using linear and nonlinear space (measured in terms of the number of data points) have been proposed in the literature <ref> [Bentley 1977, Bentley 1980, Guttman 1984] </ref>. For large databases, structures that have nonlinear storage requirements may not acceptable. Consequently, several linear-space structures such as the R-trees [Beckman et al. 1990, Guttman 1984], Bang files [Freeston 1987] have been proposed in the database literature. <p> This complexity can, however, be improved by allowing for replication of data. Using fl Work supported in part by a research grant from NSF/ARPA/NASA IRI9411330 and NSF instrumentation grant CDA-9421978. 1 such replication (but still using linear storage), Bentley's nonoverlapping k-level d-range structure <ref> [Bentley 1980] </ref> achieves a query time complexity of O (n (d1)=k log n) [Bentley 1980]. By choosing k as a function of d and *, we can achieve a query time of O (n * ) for any * &gt; 0. <p> Using fl Work supported in part by a research grant from NSF/ARPA/NASA IRI9411330 and NSF instrumentation grant CDA-9421978. 1 such replication (but still using linear storage), Bentley's nonoverlapping k-level d-range structure <ref> [Bentley 1980] </ref> achieves a query time complexity of O (n (d1)=k log n) [Bentley 1980]. By choosing k as a function of d and *, we can achieve a query time of O (n * ) for any * &gt; 0. Note that the storage requirements increase by a constant factor only. However, this structure needs preprocessing of data before being constructed. <p> Consequently, on-line insertion/deletion of data may require the reconstruction of the entire structure, which takes O (n log n) time. This insertion/deletion time complexity can be reduced to O (log 2 n) using the static-to-dynamic transformations of Bentley and Saxe <ref> [Bentley 1980] </ref>, or Willard [Willard 1986]. In this paper, we show that much lower insertion/deletion times can be achieved. We first show that insertions and deletions can be accomplished in O (log n) amortized time. <p> We observed that Bentley's non-overlapping range structure <ref> [Bentley 1980] </ref> achieves O (n * ) query time for any * &gt; 0. However, this structure is static in nature. We demonstrated that the same query performance can be achieved in dynamic environments by applying the dynamization techniques of Overmars [Overmars 1983].
Reference: [Bentley 1980] <author> Bentley, J. L., Saxe, J. B. </author> <title> Decomposable searching problems 1: Static-to-dynamic transformation, </title> <journal> Journal of Algorithms 1, </journal> <pages> pp. 301-358, </pages> <year> 1980. </year> <month> 16 </month>
Reference-contexts: This type of searching in multiple dimensions is fundamental to geographic information systems, image databases and computer graphics. Several efficient data structures using linear and nonlinear space (measured in terms of the number of data points) have been proposed in the literature <ref> [Bentley 1977, Bentley 1980, Guttman 1984] </ref>. For large databases, structures that have nonlinear storage requirements may not acceptable. Consequently, several linear-space structures such as the R-trees [Beckman et al. 1990, Guttman 1984], Bang files [Freeston 1987] have been proposed in the database literature. <p> This complexity can, however, be improved by allowing for replication of data. Using fl Work supported in part by a research grant from NSF/ARPA/NASA IRI9411330 and NSF instrumentation grant CDA-9421978. 1 such replication (but still using linear storage), Bentley's nonoverlapping k-level d-range structure <ref> [Bentley 1980] </ref> achieves a query time complexity of O (n (d1)=k log n) [Bentley 1980]. By choosing k as a function of d and *, we can achieve a query time of O (n * ) for any * &gt; 0. <p> Using fl Work supported in part by a research grant from NSF/ARPA/NASA IRI9411330 and NSF instrumentation grant CDA-9421978. 1 such replication (but still using linear storage), Bentley's nonoverlapping k-level d-range structure <ref> [Bentley 1980] </ref> achieves a query time complexity of O (n (d1)=k log n) [Bentley 1980]. By choosing k as a function of d and *, we can achieve a query time of O (n * ) for any * &gt; 0. Note that the storage requirements increase by a constant factor only. However, this structure needs preprocessing of data before being constructed. <p> Consequently, on-line insertion/deletion of data may require the reconstruction of the entire structure, which takes O (n log n) time. This insertion/deletion time complexity can be reduced to O (log 2 n) using the static-to-dynamic transformations of Bentley and Saxe <ref> [Bentley 1980] </ref>, or Willard [Willard 1986]. In this paper, we show that much lower insertion/deletion times can be achieved. We first show that insertions and deletions can be accomplished in O (log n) amortized time. <p> We observed that Bentley's non-overlapping range structure <ref> [Bentley 1980] </ref> achieves O (n * ) query time for any * &gt; 0. However, this structure is static in nature. We demonstrated that the same query performance can be achieved in dynamic environments by applying the dynamization techniques of Overmars [Overmars 1983].
Reference: [Berchtold et al. 1996] <author> Berchtold, S., Keim, D.A., and Kreigel, </author> <title> H.P. The X-tree: An index structure for high dimen-sional data, </title> <booktitle> Proc. of the Conf. on Very Large Data bases, </booktitle> <address> Bombay, India, </address> <year> 1996. </year>
Reference-contexts: The resulting structure has O (n * ) query time for any * &gt; 0 and O (log n) insertion/deletion times. In the future, we would like to compare the performance of the l-level range structure with the performance of conventional structures such as the R fl -tree <ref> [Beckman et al. 1990, Berchtold et al. 1996] </ref> and the BV-tree [Freeston 1995] by conducting several experiments on real spatial and image data from the Alexandria Digital Library. An important point to note is that the l-level range structure does not form overlapping index regions as the R fl -tree.
Reference: [Freeston 1987] <author> Freeston, M. </author> <title> The Bang file: A new kind of grid file, </title> <booktitle> Proc. of the ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pp 260-269, </pages> <year> 1987. </year>
Reference-contexts: For large databases, structures that have nonlinear storage requirements may not acceptable. Consequently, several linear-space structures such as the R-trees [Beckman et al. 1990, Guttman 1984], Bang files <ref> [Freeston 1987] </ref> have been proposed in the database literature. These structures achieve low storage costs by storing each data point exactly once. However, such simple structures have high query time complexity, which is bounded below by (n (d1)=d ) for n d-dimensional data [Ravi and Ambuj 1997]. <p> This corresponds to a replication of O (l d1 ) for each data point. For large databases, almost all index structures including R fl -trees [Beckman et al. 1990, Guttman 1984] and Bang files <ref> [Freeston 1987] </ref> are maintained in secondary memory even when there is no such replication. <p> Applying theorem 2, the weak insertion/deletion times can be transformed into worst-case bounds. 2 15 5 Conclusions In this paper we considered the problem of dynamic range searching using linear space structures. Since current structures such as the R-trees [Beckman et al. 1990, Guttman 1984] and Bang files <ref> [Freeston 1987] </ref> have high query time complexity (O (n) for n points [Ravi and Ambuj 1997]), we focussed on alternate means to improve query performance in dynamic environments. We observed that Bentley's non-overlapping range structure [Bentley 1980] achieves O (n * ) query time for any * &gt; 0.
Reference: [Freeston 1995] <author> Freeston, M. </author> <title> A general solution to the n-dimensional B-tree problem, </title> <booktitle> Proc. of the ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <address> San Jose, CA, USA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: In the future, we would like to compare the performance of the l-level range structure with the performance of conventional structures such as the R fl -tree [Beckman et al. 1990, Berchtold et al. 1996] and the BV-tree <ref> [Freeston 1995] </ref> by conducting several experiments on real spatial and image data from the Alexandria Digital Library. An important point to note is that the l-level range structure does not form overlapping index regions as the R fl -tree.
Reference: [Guttman 1984] <author> Guttman, A. </author> <title> R-trees : A dynamic index structure for spatial searching, </title> <booktitle> Proceedings of the ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <pages> pp. 47-57, </pages> <year> 1984. </year>
Reference-contexts: This type of searching in multiple dimensions is fundamental to geographic information systems, image databases and computer graphics. Several efficient data structures using linear and nonlinear space (measured in terms of the number of data points) have been proposed in the literature <ref> [Bentley 1977, Bentley 1980, Guttman 1984] </ref>. For large databases, structures that have nonlinear storage requirements may not acceptable. Consequently, several linear-space structures such as the R-trees [Beckman et al. 1990, Guttman 1984], Bang files [Freeston 1987] have been proposed in the database literature. <p> For large databases, structures that have nonlinear storage requirements may not acceptable. Consequently, several linear-space structures such as the R-trees <ref> [Beckman et al. 1990, Guttman 1984] </ref>, Bang files [Freeston 1987] have been proposed in the database literature. These structures achieve low storage costs by storing each data point exactly once. <p> This corresponds to a replication of O (l d1 ) for each data point. For large databases, almost all index structures including R fl -trees <ref> [Beckman et al. 1990, Guttman 1984] </ref> and Bang files [Freeston 1987] are maintained in secondary memory even when there is no such replication. <p> Applying theorem 2, the weak insertion/deletion times can be transformed into worst-case bounds. 2 15 5 Conclusions In this paper we considered the problem of dynamic range searching using linear space structures. Since current structures such as the R-trees <ref> [Beckman et al. 1990, Guttman 1984] </ref> and Bang files [Freeston 1987] have high query time complexity (O (n) for n points [Ravi and Ambuj 1997]), we focussed on alternate means to improve query performance in dynamic environments.
Reference: [Overmars and Leeuwen 1982] <author> Overmars, M. H. and Leeuwen, J. </author> <title> Dynamic multidimensional data structures based on quad and k-d trees, </title> <journal> Acta Informatica, </journal> <volume> 17, </volume> <pages> pp. 267-283, </pages> <year> 1982. </year>
Reference-contexts: This technique for supporting insertions and deletions is called partial rebuilding [Overmars 1983] and is used in several dynamic structures including the divided k-d tree [van Kreveld and Overmars 1991], and the pseudo quad and k-d tree <ref> [Overmars and Leeuwen 1982] </ref>. n what follows, we describe this insertion/deletion strategy for the l-level range structure in more detail. Insertion or deletion of a point p is accomplished in an l-level range structure T (n; l; ) as follows.
Reference: [Overmars and Leeuwen 1981] <author> Overmars, M. H., and Leeuwen, J. </author> <title> Worst-case optimal insertion and deletion methods for decomposable searching problems, </title> <journal> Information Processing Letters, </journal> <volume> Vol. 12, no. 4, </volume> <pages> pp. 168-172, </pages> <month> August </month> <year> 1981. </year>
Reference-contexts: In this paper, we show that much lower insertion/deletion times can be achieved. We first show that insertions and deletions can be accomplished in O (log n) amortized time. We then transform these amortized times to worst-case times using the global rebuilding technique of Overmars and van Leeuwen <ref> [Overmars and Leeuwen 1981] </ref>. These transformations do not alter the query time complexity and only increase the storage requirements by a constant factor. Consequently, our linear-space structure has worst-case times of O (n * ) for queries (for any * &gt; 0) and O (log n) for insertions and deletions.
Reference: [Overmars 1983] <author> Overmars, M. H. </author> <title> The design of dynamic data structures, </title> <address> LNC S 156, </address> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: Since an insertion/deletion can affect a constant number, l, of these structures, the total amortized time is O (log n). This technique for supporting insertions and deletions is called partial rebuilding <ref> [Overmars 1983] </ref> and is used in several dynamic structures including the divided k-d tree [van Kreveld and Overmars 1991], and the pseudo quad and k-d tree [Overmars and Leeuwen 1982]. n what follows, we describe this insertion/deletion strategy for the l-level range structure in more detail. <p> We ensure that this happens by choosing the fractions ff 1 ; : : : ; ff l so that they satisfy the following inequalities. ff l &lt; 1 p : Note that, unlike the divided k-d tree <ref> [Overmars 1983] </ref> which has specific values for these fractions, we obtain a range of values for each of them. It can be shown that these values can also be applied to the divided k-d tree. <p> Insertions and deletions have an amortized time complexity of O (log n). Worst-case bounds The amortized insertion and deletion time bounds of Theorem 1 can be changed into worst-case bounds with the general technique of global rebuilding, described in <ref> [Overmars 1983] </ref>. Next, we describe the central idea of of this technique. More details can be found in [Overmars 1983]. Consider a structure S that supports weak insertions and weak deletions. <p> Worst-case bounds The amortized insertion and deletion time bounds of Theorem 1 can be changed into worst-case bounds with the general technique of global rebuilding, described in <ref> [Overmars 1983] </ref>. Next, we describe the central idea of of this technique. More details can be found in [Overmars 1983]. Consider a structure S that supports weak insertions and weak deletions. Insertions and deletions on a structure of n points are weak, if after ffn insertions and/or deletions, with 0 &lt; ff &lt; 1, all time and storage bounds of the structure have not increased asymptotically. <p> By ensuring that the number of such buffered updates is less than ffn 1 =2, we have at most one structure under construction at all times. This technique is called global rebuilding and is explained in more detail in <ref> [Overmars 1983] </ref>. The following theorem summarizes this technique. <p> We observed that Bentley's non-overlapping range structure [Bentley 1980] achieves O (n * ) query time for any * &gt; 0. However, this structure is static in nature. We demonstrated that the same query performance can be achieved in dynamic environments by applying the dynamization techniques of Overmars <ref> [Overmars 1983] </ref>. The resulting structure has O (n * ) query time for any * &gt; 0 and O (log n) insertion/deletion times.
Reference: [Ravi and Ambuj 1997] <author> Ravi Kanth, K. V. and Ambuj K. </author> <title> Singh Optimal dynamic range searching in non-replicating index structures, </title> <type> Technical Report TRCS97-13, </type> <institution> Department of Computer Science, University of California, Santa Barbara, </institution> <month> July </month> <year> 1997. </year> <editor> [van Kreveld and Overmars 1991] van Kreveld, M. and Overmars, M. H. </editor> <title> The divided k-d tree, </title> <journal> Algorithmica, </journal> <volume> No. 6, </volume> <pages> pp. 840-858, </pages> <year> 1991. </year>
Reference-contexts: These structures achieve low storage costs by storing each data point exactly once. However, such simple structures have high query time complexity, which is bounded below by (n (d1)=d ) for n d-dimensional data <ref> [Ravi and Ambuj 1997] </ref>. This complexity can, however, be improved by allowing for replication of data. <p> Since current structures such as the R-trees [Beckman et al. 1990, Guttman 1984] and Bang files [Freeston 1987] have high query time complexity (O (n) for n points <ref> [Ravi and Ambuj 1997] </ref>), we focussed on alternate means to improve query performance in dynamic environments. We observed that Bentley's non-overlapping range structure [Bentley 1980] achieves O (n * ) query time for any * &gt; 0. However, this structure is static in nature.
Reference: [Willard 1986] <author> Willard, D. E. </author> <title> On the application of sheared retrieval to orthogonal range queries, </title> <booktitle> ACM Symposium on Computational Geometry, </booktitle> <pages> pp. 80-89, </pages> <year> 1986. </year> <month> 17 </month>
Reference-contexts: Consequently, on-line insertion/deletion of data may require the reconstruction of the entire structure, which takes O (n log n) time. This insertion/deletion time complexity can be reduced to O (log 2 n) using the static-to-dynamic transformations of Bentley and Saxe [Bentley 1980], or Willard <ref> [Willard 1986] </ref>. In this paper, we show that much lower insertion/deletion times can be achieved. We first show that insertions and deletions can be accomplished in O (log n) amortized time.
References-found: 13

