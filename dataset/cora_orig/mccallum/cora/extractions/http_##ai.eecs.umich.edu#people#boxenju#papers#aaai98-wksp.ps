URL: http://ai.eecs.umich.edu/people/boxenju/papers/aaai98-wksp.ps
Refering-URL: http://ai.eecs.umich.edu/people/boxenju/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: -compuman, boxenju, aarora, durfee-@umich.edu  dlk@umich.edu  
Title: A Case Study on the Evolution of Software Tools Selection and Development in a Large-scale
Author: Eric Glover Sunju Park Anil Arora Daniel L. Kiskis Edmund H. Durfee 
Address: Ann Arbor, Michigan 48109-2110, USA  Ann Arbor, Michigan 48109-1205, USA  
Affiliation: Artificial Intelligence Laboratory, University of Michigan  School of Information, University of Michigan  
Abstract: The University of Michigan Digital Library (UMDL) is an open, evolving multiagent system, currently consisting of over a dozen different types of agents, that serves as a production system to real users and as a testbed for research ideas. Our open, evolving system requires a development environment that is also open and evolving. This paper explores the coevolution of our system and the underlying tools. We divide the agent development environment into two evolving layersa layer that is supported by the UMDL system developers, called agentware, and a layer that is the set of tools used by agent designers, which falls outside the agentware, called otherware. The agentware layer facilitates the ease of agent design and integration by providing an agent shell, support for agent communication, and other useful libraries and classes. The otherware layer achieves diverse agent capabilities by allowing individual agent designers to use a variety of existing and newly developed tools. Furthermore, the division between the two layers is continually evolving as new types of agents are created in the UMDL. This division balances design flexibility and integration: agent designers can make local decisions to use whatever tools are available, and have a means to easily integrate new agents and services into a larger society of agents. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Atkins, D.E., Birmingham, W.P., Durfee, E.H., Glover, E.J., Mullen, T., Rundensteiner, E.A., Soloway, E., Vidal, J.M., and Wellman, </author> <title> M.P., 1996. Toward Inquiry-Based Education Through Interacting Software Agents. </title> <booktitle> IEEE Computer 29(5) </booktitle> <pages> 69-76. </pages>
Reference-contexts: The University of Michigan Digital Library (UMDL) falls at this latter end of the spectrum. The UMDL is a large-scale multiagent system where agents represent a wide-variety of users, information sources, and services <ref> [1, 4, 13] </ref>. One of our goals when building the UMDL is to support diversity in terms of both the capabilities of agents and the technologies used to implement them. <p> Finally, we conclude with a summary of the lessons we have learned. The UMDL System and Agent Architecture In this section, we briefly describe the UMDL system and its agent architecture <ref> [1, 4, 10] </ref>. The UMDL is designed to provide digital library services in a distributed, heterogeneous information environment. It is structured as a collection of agents that collectively provide these services by dynamically configuring their interactions as needed.
Reference: [2] <author> Brill, D., </author> <year> 1993. </year> <note> Loom Reference Manual, Version 2.0, </note> <institution> University of Southern California. </institution>
Reference-contexts: It is this software that we refer to as otherware. A number of different software packages have been used in UMDL agents. We mentioned UM-PRS as one. Another example is Loom <ref> [2] </ref>, a description logic classification system used in the Service Classification Agent (SCA) [15]. Additional otherware includes client libraries for Sybase, Z39.50 [8], and the FTL (Full Text Lexicographer) [6] search engine. Developing an Agent As an example, we examine how the SCA was developed.
Reference: [3] <editor> The Common Object Request Broker: </editor> <title> Architecture and Specification, Revision 1.1. </title> <type> Framingham, </type> <institution> Massachusettes, USA: Object Management Group. </institution>
Reference-contexts: Agents are implemented as Unix processes that communicate using common network protocols (i.e., TCP/IP). We choose distributed-object technology as the basis for agent communication; we use the CORBA (Common Object Request Brokerage Architecture) distributed-object standard <ref> [3] </ref>, and in particular, Xeroxs ILU (Inter-Language Unification) implementation of it [9]. The CORBA standard provides us with the basic mechanisms we need, and ILU is freely available, allowing us to take advantage of CORBA with little investment.
Reference: [4] <author> Durfee, </author> <type> E.H., </type> <institution> Kiskis, D.L., and Birmingham, W.P., </institution> <year> 1997. </year> <title> The Agent Architecture of the University of Michigan Digital Library. </title> <booktitle> IEE British Computer Society Proceedings on Software Engineering 144(1). </booktitle>
Reference-contexts: The University of Michigan Digital Library (UMDL) falls at this latter end of the spectrum. The UMDL is a large-scale multiagent system where agents represent a wide-variety of users, information sources, and services <ref> [1, 4, 13] </ref>. One of our goals when building the UMDL is to support diversity in terms of both the capabilities of agents and the technologies used to implement them. <p> Finally, we conclude with a summary of the lessons we have learned. The UMDL System and Agent Architecture In this section, we briefly describe the UMDL system and its agent architecture <ref> [1, 4, 10] </ref>. The UMDL is designed to provide digital library services in a distributed, heterogeneous information environment. It is structured as a collection of agents that collectively provide these services by dynamically configuring their interactions as needed.
Reference: [5] <author> Finin, T., Fritzson, R., McKay, D., and McEntire, R., </author> <year> 1994. </year> <title> KQML - An Information and Knowledge Exchange Protocol. In Knowledge Building and Knowledge Sharing, </title>
Reference-contexts: Agent communication tools define for each agent a communication interface, embodied as an ILU object that handles communication with other agents communication objects. The interface exported by the communication objects implements KQML (Knowledge Query and Manipulation Language) performatives and their (possibly nested) argument lists <ref> [5] </ref>. KQML, being neutral to details of the content argument that varies with agents and services, makes it well suited for supporting the diverse uses of the UMDL. To facilitate the agent design, we provide an agent shella C++ Agent class. The Agent class encapsulates the communication mechanisms.
Reference: [6] <institution> Full Text Lexicographer Homepage. </institution> <note> http://kalex.engin.umich.edu/ftl/ </note> . 
Reference-contexts: We mentioned UM-PRS as one. Another example is Loom [2], a description logic classification system used in the Service Classification Agent (SCA) [15]. Additional otherware includes client libraries for Sybase, Z39.50 [8], and the FTL (Full Text Lexicographer) <ref> [6] </ref> search engine. Developing an Agent As an example, we examine how the SCA was developed. The SCA maintains a dynamic ontology of agent capabilities that allows for automatic classification of services within the UMDL.
Reference: [7] <author> Huber, M.J., Lee, J., Kenny, P.G., and Durfee, E.H., </author> <year> 1994. </year> <title> UM-PRS V3.0 Programmer and Reference Guide, </title> <institution> University of Michigan, Artificial Intelligence Laboratory. </institution>
Reference-contexts: The Testing Client provides agent developers with a way to verify the interoperability with other agents at the development phase. The agentware also contains code that provides integration with the otherware. One example is the code that integrates the University of Michigan Procedural Reasoning System (UM-PRS) <ref> [7, 11] </ref> with the Agent class. This integration code was incorporated into the agentware so that other developers could take advantage of UM-PRS without rewriting that integration code.
Reference: [8] <author> Information Retrieval (Z39.50): </author> <title> Application Service Definition and Protocol Specification, </title> <booktitle> ANSI/NISO, Z39.50 - 1995, Library of Congress. </booktitle> <address> http://lcweb.loc.gov/z3950/agency </address> . 
Reference-contexts: A number of different software packages have been used in UMDL agents. We mentioned UM-PRS as one. Another example is Loom [2], a description logic classification system used in the Service Classification Agent (SCA) [15]. Additional otherware includes client libraries for Sybase, Z39.50 <ref> [8] </ref>, and the FTL (Full Text Lexicographer) [6] search engine. Developing an Agent As an example, we examine how the SCA was developed. The SCA maintains a dynamic ontology of agent capabilities that allows for automatic classification of services within the UMDL.
Reference: [9] <institution> Inter-Language Unification Homepage. </institution> <note> ftp://ftp.parc.xerox.com/pub/ilu/ilu .html </note> . 
Reference-contexts: Agents are implemented as Unix processes that communicate using common network protocols (i.e., TCP/IP). We choose distributed-object technology as the basis for agent communication; we use the CORBA (Common Object Request Brokerage Architecture) distributed-object standard [3], and in particular, Xeroxs ILU (Inter-Language Unification) implementation of it <ref> [9] </ref>. The CORBA standard provides us with the basic mechanisms we need, and ILU is freely available, allowing us to take advantage of CORBA with little investment. Agent communication tools define for each agent a communication interface, embodied as an ILU object that handles communication with other agents communication objects.
Reference: [10] <author> Kiskis, D., </author> <year> 1995. </year> <title> UMDL Architecture Requirements Analysis, </title> <type> Internal Report, </type> <institution> School of Information and Library Studies, University of Michigan. </institution>
Reference-contexts: Finally, we conclude with a summary of the lessons we have learned. The UMDL System and Agent Architecture In this section, we briefly describe the UMDL system and its agent architecture <ref> [1, 4, 10] </ref>. The UMDL is designed to provide digital library services in a distributed, heterogeneous information environment. It is structured as a collection of agents that collectively provide these services by dynamically configuring their interactions as needed.
Reference: [11] <author> Lee, J., Huber, M.J., Durfee, E.H., and Kenny, P.G., </author> <year> 1994. </year> <title> UM-PRS: An Implementation of the Procedural Reasoning System for Multirobot Applications. </title> <booktitle> Proceedings of the AIAA/NASA Conference on Intelligent Robotics in Field, Factory, and Space </booktitle> . 
Reference-contexts: The Testing Client provides agent developers with a way to verify the interoperability with other agents at the development phase. The agentware also contains code that provides integration with the otherware. One example is the code that integrates the University of Michigan Procedural Reasoning System (UM-PRS) <ref> [7, 11] </ref> with the Agent class. This integration code was incorporated into the agentware so that other developers could take advantage of UM-PRS without rewriting that integration code.
Reference: [12] <editor> Tools.h++ Homepage. </editor> <address> http://www.roguewave.com/products/to ols/tools.html </address> . 
Reference-contexts: One such tool is C++, our primary programming language. We take advantage of C++s objectoriented features to build the agent classes, as discussed in the next subsection. We also use the RogueWave Tools.h++ library <ref> [12] </ref>. The Tools.h++ library provides useful C++ classes such as a string class, container classes (e.g. vectors, hash tables) in both generic (Smalltalk-like) and template forms. Agentware The agentware is a collection of various component libraries and tools that are supported as a base for UMDL agents.
Reference: [13] <institution> University of Michigan Digital Library Homepage. </institution> <note> http://www.si.umich.edu/UMDL/ </note> . 
Reference-contexts: The University of Michigan Digital Library (UMDL) falls at this latter end of the spectrum. The UMDL is a large-scale multiagent system where agents represent a wide-variety of users, information sources, and services <ref> [1, 4, 13] </ref>. One of our goals when building the UMDL is to support diversity in terms of both the capabilities of agents and the technologies used to implement them.
Reference: [14] <author> Vidal, J.M., and Durfee, E.H., </author> <year> 1995. </year> <title> Task Planning Agents in the UMDL. </title> <booktitle> Proceedings of the Fourth International Conference on Information and Knowledge Management (CIKM) Workshop on Intelligent Information Agents. </booktitle>
Reference-contexts: The TPA is a mediator agent designed to act as a middleman between the User Interface Agent (UIA) and the registry by accepting queries and returning lists of relevant Collection Interface Agents ( CIAs) <ref> [14] </ref>. In the earliest stages of the project, there were four types of agents, CIAs, UIAs, TPAs, and a registry. The TPA simply passed requests from the UIA to the registry with no additional processing.
Reference: [15] <author> Weinstein, P. and Birmingham, W.P., </author> <year> 1997. </year> <title> Runtime Classification of Agent Services. </title> <booktitle> Proceedings of theAAAI-97 Spring Symposium on Ontological Engineering. </booktitle>
Reference-contexts: It is this software that we refer to as otherware. A number of different software packages have been used in UMDL agents. We mentioned UM-PRS as one. Another example is Loom [2], a description logic classification system used in the Service Classification Agent (SCA) <ref> [15] </ref>. Additional otherware includes client libraries for Sybase, Z39.50 [8], and the FTL (Full Text Lexicographer) [6] search engine. Developing an Agent As an example, we examine how the SCA was developed.
References-found: 15

