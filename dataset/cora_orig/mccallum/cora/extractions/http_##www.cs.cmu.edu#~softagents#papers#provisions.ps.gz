URL: http://www.cs.cmu.edu/~softagents/papers/provisions.ps.gz
Refering-URL: http://www.cs.cmu.edu/~softagents/publications_old.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: (mikew,decker,sycara)@cs.cmu.edu  
Title: Unified Information and Control Flow in Hierarchical Task Networks  
Author: Mike Williamson and Keith Decker and Katia Sycara 
Date: March 20, 1996  
Address: 5000 Forbes Ave., Pittsburgh, PA 15213  
Affiliation: The Robotics Institute, Carnegie-Mellon University  
Abstract: Much recent planning research has focused on two related issues. First, there has been a strong interest in information-gathering (or "sensing", or "knowledge-producing") actions. Second, has been an investigation of plans with sophisticated control structures, such as conditional branches and loops. But the combination of these two lines of research poses a representational problem: plans with information-gathering actions that can be executed more than once can have complex information-flow and control-flow relationships. In this paper, we present a framework for the representation and execution of hierarchical plans with information producing actions, conditional branches, periodic actions, and loops. Our framework subsumes several techniques found in the recent literature.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J Ambros-Ingerson and S. Steel. </author> <title> Integrating planning, execution, and monitoring. </title> <booktitle> In Proc. 7th Nat. Conf. on A.I., </booktitle> <pages> pages 735-740, </pages> <year> 1988. </year>
Reference-contexts: A Blocksworld Stack action, for example, needs to be informed of which block to stack, and where to stack it; this information is provided by the planner binding the action's variable parameters to specific values. Several planning formalisms <ref> [1, 5, 10] </ref> extend the concept of variable parameters to include "runtime variables." Runtime variables appearing in the effects of an action are bound to some particular value when that action is executed, and may be used in the preconditions of subsequent actions.
Reference: [2] <author> K.S. Decker, V.R. Lesser, M.V. Nagendra Prasad, and T. Wagner. MACRON: </author> <title> an architecture for multi-agent cooperative information gathering. </title> <booktitle> In Proceedings of the CIKM-95 Workshop on Intelligent Information Agents, </booktitle> <address> Baltimore, MD, </address> <year> 1995. </year>
Reference-contexts: The internal structure of our agents is similar to the decaf architecture <ref> [2] </ref>. An agent comprises concurrent planning, scheduling, and execution processes operating on a 2 shared task agenda (Figure 2). The planner evaluates the agent's objectives, formulates top-level tasks (goals), and elaborates hierarchical task networks for each top-level task.
Reference: [3] <author> D. Draper, S. Hanks, and D. Weld. </author> <title> Probabilistic planning with information gathering and contingent execution. </title> <booktitle> In Proc. 2nd Intl. Conf. on A.I. Planning Systems, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: This definition of plans has been widely accepted in both the generative and the hierarchical task network (HTN) planning paradigms. Recently, though, there has been a strong interest in plan representations that support sophisticated control flow, such as parallel execution [9], conditional branching <ref> [15, 3] </ref> and loops [17, 11, 14, 8]. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions [12, 5]. <p> At any point, a plan may bifurcate 4 into two branches depending on whether or not a runtime variable takes on a particular value. The conditional planners cnlp [15] and c-buridan <ref> [3] </ref> use a somewhat different method to control execution flow based on gathered information. In these systems, the execution of an action leads to one of a number of prespecified outcomes ("consequences" in c-buridan's parlance).
Reference: [4] <author> K. Erol, J. Hendler, and D. Nau. UMCP: </author> <title> A sound and complete procedure for hierarchical task-network planning. </title> <booktitle> In Proc. 2nd Intl. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 249-254, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Unlike some recent formalizations of HTN planning <ref> [4] </ref>, we do not replace the reduced task with its subtasks, but instead represent the task network as a tree-like structure. The definition of a reduction specifies how the provisions and outcomes of the new subtasks relate to each other, and to their parent task.
Reference: [5] <author> O. Etzioni, S. Hanks, D. Weld, D. Draper, N. Lesh, and M. Williamson. </author> <title> An Approach to Planning with Incomplete Information. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <address> San Francisco, CA, </address> <month> October </month> <year> 1992. </year> <note> Morgan Kaufmann. Available via FTP from pub/ai/ at ftp.cs.washington.edu. </note>
Reference-contexts: Recently, though, there has been a strong interest in plan representations that support sophisticated control flow, such as parallel execution [9], conditional branching [15, 3] and loops [17, 11, 14, 8]. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions <ref> [12, 5] </ref>. The two developments are closely interrelated, since contingencies in a plan are only meaningful if new information becomes available, and conversely, sensing the world is most useful when doing so can have some impact on one's course of action. 1 1. <p> A Blocksworld Stack action, for example, needs to be informed of which block to stack, and where to stack it; this information is provided by the planner binding the action's variable parameters to specific values. Several planning formalisms <ref> [1, 5, 10] </ref> extend the concept of variable parameters to include "runtime variables." Runtime variables appearing in the effects of an action are bound to some particular value when that action is executed, and may be used in the preconditions of subsequent actions. <p> Thus, runtime variables are an explicit representation of the information flow relationship between producers and consumers (Figure 5). uwl <ref> [5] </ref> also uses runtime variables to control the flow of execution within a plan. At any point, a plan may bifurcate 4 into two branches depending on whether or not a runtime variable takes on a particular value.
Reference: [6] <author> T. Finin, R. Fritzson, D. McKay, and R. McEntire. </author> <title> KQML as an agent communication language. </title> <booktitle> In Proceedings of the Third International Conference on Information and Knowledge Management CIKM'94. </booktitle> <publisher> ACM Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: In our system, the most common such event is the arrival of a message from another agent. Our architecture has a mechanism for dynamically routing incoming messages to the provisions of specific actions in the task network. Our agents communicate using KQML <ref> [6] </ref>, and the incoming messages are routed according to the value of their IN-REPLY-TO field. Such a routing can be established as part of a reduction schema.
Reference: [7] <author> R.J. Firby. </author> <title> Task networks for controlling continuous processes. </title> <booktitle> In Proc. 2nd Intl. Conf. on A.I. Planning Systems, </booktitle> <year> 1994. </year>
Reference-contexts: An action is executed only if its context is consistent with the outcome labels produced by all previously executed actions. The outcome/context mechanism thus provides an explicit representation of the control-flow relationships in a plan. Reactive task network architectures, such as TCA [16] and RAPS <ref> [7] </ref>, provide similar models of control flow Runtime variables and outcomes/contexts are sufficient to capture the information-flow and control-flow relationships in a conditional sequential plan, where each action is executed at most once.
Reference: [8] <author> R. Goodwin. </author> <title> Using loops in decision-theoretic refinement planners. </title> <booktitle> In Proc. 3rd Intl. Conf. on A.I. Planning Systems, </booktitle> <year> 1996. </year>
Reference-contexts: This definition of plans has been widely accepted in both the generative and the hierarchical task network (HTN) planning paradigms. Recently, though, there has been a strong interest in plan representations that support sophisticated control flow, such as parallel execution [9], conditional branching [15, 3] and loops <ref> [17, 11, 14, 8] </ref>. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions [12, 5].
Reference: [9] <author> C. Knoblock. </author> <title> Generating parallel execution plans with a partial-order planner. </title> <booktitle> In Proc. 2nd Intl. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 98-103, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: This definition of plans has been widely accepted in both the generative and the hierarchical task network (HTN) planning paradigms. Recently, though, there has been a strong interest in plan representations that support sophisticated control flow, such as parallel execution <ref> [9] </ref>, conditional branching [15, 3] and loops [17, 11, 14, 8]. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions [12, 5].
Reference: [10] <author> C. Knoblock. </author> <title> Planning, executing, </title> <booktitle> sensing, and replanning for information gathering. In Proc. 15th Int. Joint Conf. on A.I., </booktitle> <pages> pages 1686-1693, </pages> <year> 1995. </year>
Reference-contexts: A Blocksworld Stack action, for example, needs to be informed of which block to stack, and where to stack it; this information is provided by the planner binding the action's variable parameters to specific values. Several planning formalisms <ref> [1, 5, 10] </ref> extend the concept of variable parameters to include "runtime variables." Runtime variables appearing in the effects of an action are bound to some particular value when that action is executed, and may be used in the preconditions of subsequent actions.
Reference: [11] <author> S. Lin and T. Dean. </author> <title> Generating optimal policies for markov decision processes formulated as plans with conditional branches and loops. </title> <booktitle> In Proc. 2nd European Planning Workshop, </booktitle> <year> 1995. </year>
Reference-contexts: This definition of plans has been widely accepted in both the generative and the hierarchical task network (HTN) planning paradigms. Recently, though, there has been a strong interest in plan representations that support sophisticated control flow, such as parallel execution [9], conditional branching [15, 3] and loops <ref> [17, 11, 14, 8] </ref>. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions [12, 5].
Reference: [12] <author> R. Moore. </author> <title> A Formal Theory of Knowledge and Action. </title> <editor> In J. Hobbs and R. Moore, editors, </editor> <title> Formal Theories of the Commonsense World. </title> <publisher> Ablex, </publisher> <address> Norwood, NJ, </address> <year> 1985. </year>
Reference-contexts: Recently, though, there has been a strong interest in plan representations that support sophisticated control flow, such as parallel execution [9], conditional branching [15, 3] and loops [17, 11, 14, 8]. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions <ref> [12, 5] </ref>. The two developments are closely interrelated, since contingencies in a plan are only meaningful if new information becomes available, and conversely, sensing the world is most useful when doing so can have some impact on one's course of action. 1 1. <p> Regarding the formal representation of actions themselves, an action's information requirements have sometimes been framed in terms of preconditions on the state of an agent's knowledge, while the information produced by an action is similarly described in terms of its effects on that knowledge <ref> [12, 13] </ref>. Thus, information flow in a plan is indirect, taking place through an agent's corpus of beliefs about the world. (See Figure 3.) This work has been primarily theoretical in nature, and does not address practical issues that arise during the execution of plans containing such actions.
Reference: [13] <author> L. Morgenstern. </author> <title> Knowledge preconditions for actions and plans. </title> <booktitle> In Proceedings of IJCAI-87, </booktitle> <pages> pages 867-874, </pages> <year> 1987. </year>
Reference-contexts: Regarding the formal representation of actions themselves, an action's information requirements have sometimes been framed in terms of preconditions on the state of an agent's knowledge, while the information produced by an action is similarly described in terms of its effects on that knowledge <ref> [12, 13] </ref>. Thus, information flow in a plan is indirect, taking place through an agent's corpus of beliefs about the world. (See Figure 3.) This work has been primarily theoretical in nature, and does not address practical issues that arise during the execution of plans containing such actions.
Reference: [14] <author> L. Ngo and P. Haddawy. </author> <title> Representing iterative loops for decision-theoretic planning. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Extending Theories of Action, </booktitle> <year> 1995. </year> <month> 11 </month>
Reference-contexts: This definition of plans has been widely accepted in both the generative and the hierarchical task network (HTN) planning paradigms. Recently, though, there has been a strong interest in plan representations that support sophisticated control flow, such as parallel execution [9], conditional branching [15, 3] and loops <ref> [17, 11, 14, 8] </ref>. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions [12, 5].
Reference: [15] <author> M. Peot and D. Smith. </author> <title> Conditional Nonlinear Planning. </title> <booktitle> In Proc. 1st Intl. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 189-197, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: This definition of plans has been widely accepted in both the generative and the hierarchical task network (HTN) planning paradigms. Recently, though, there has been a strong interest in plan representations that support sophisticated control flow, such as parallel execution [9], conditional branching <ref> [15, 3] </ref> and loops [17, 11, 14, 8]. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions [12, 5]. <p> At any point, a plan may bifurcate 4 into two branches depending on whether or not a runtime variable takes on a particular value. The conditional planners cnlp <ref> [15] </ref> and c-buridan [3] use a somewhat different method to control execution flow based on gathered information. In these systems, the execution of an action leads to one of a number of prespecified outcomes ("consequences" in c-buridan's parlance).
Reference: [16] <author> R. Simmons. </author> <title> Structured control for autonomous robots. </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> 10(1), </volume> <month> February </month> <year> 1994. </year>
Reference-contexts: An action is executed only if its context is consistent with the outcome labels produced by all previously executed actions. The outcome/context mechanism thus provides an explicit representation of the control-flow relationships in a plan. Reactive task network architectures, such as TCA <ref> [16] </ref> and RAPS [7], provide similar models of control flow Runtime variables and outcomes/contexts are sufficient to capture the information-flow and control-flow relationships in a conditional sequential plan, where each action is executed at most once.
Reference: [17] <author> D. Smith and M. Williamson. </author> <title> Representation and evaluation of plans with loops. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Extended Theories of Action: Formal Theory and Practical Applications, </booktitle> <address> Stanford, CA, </address> <year> 1995. </year> <month> 12 </month>
Reference-contexts: This definition of plans has been widely accepted in both the generative and the hierarchical task network (HTN) planning paradigms. Recently, though, there has been a strong interest in plan representations that support sophisticated control flow, such as parallel execution [9], conditional branching [15, 3] and loops <ref> [17, 11, 14, 8] </ref>. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions [12, 5]. <p> Reactive task network architectures, such as TCA [16] and RAPS [7], provide similar models of control flow Runtime variables and outcomes/contexts are sufficient to capture the information-flow and control-flow relationships in a conditional sequential plan, where each action is executed at most once. Smith and Williamson <ref> [17] </ref> extended the outcome/context mechanism to support control flow in plans with loops, but did not address information flow.
References-found: 17

