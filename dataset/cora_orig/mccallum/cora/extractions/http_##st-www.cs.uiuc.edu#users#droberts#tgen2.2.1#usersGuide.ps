URL: http://st-www.cs.uiuc.edu/users/droberts/tgen2.2.1/usersGuide.ps
Refering-URL: http://st-www.cs.uiuc.edu/users/droberts/tgen2.2.1/
Root-URL: http://www.cs.uiuc.edu
Title: T-gen User's Guide  
Author: Justin O. Graver 
Affiliation: University of Florida  
Abstract: T-gen is a general-purpose object-oriented tool for the automatic generation of string-to-object translators. It is written in Smalltalk and lives in the Smalltalk programming environment. T-gen supports the generation of both top-down (LL) and bottom-up (LR) parsers, which will automatically generate derivation trees, abstract syntax trees, or arbitrary Smalltalk objects. The simple specification syntax and graphical user interface enhance the learning, comprehension, and usefulness of T-gen.
Abstract-found: 1
Intro-found: 1
Reference: [ASU86] <author> Alfred C. Aho, Ravi Seth, and Jeffrey D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1986. </year>
Reference-contexts: The grammar transformations currently applied in this process are removal of left-recursion and left-factoring of common prefixes <ref> [ASU86, FL88] </ref>. If an LR (1) parser is desired, T-gen applies, in increasing order or complexity, three slightly different parser construction techniques: SLR (1), LALR (1), and LR (1).
Reference: [FL88] <author> Charles N. Fischer and Richard J. LeBlanc, Jr. </author> <title> Crafting a Compiler. </title> <address> Benjamin/Cummings, </address> <year> 1988. </year>
Reference-contexts: The grammar transformations currently applied in this process are removal of left-recursion and left-factoring of common prefixes <ref> [ASU86, FL88] </ref>. If an LR (1) parser is desired, T-gen applies, in increasing order or complexity, three slightly different parser construction techniques: SLR (1), LALR (1), and LR (1).
Reference: [Joh75] <author> Stephen C. Johnson. </author> <title> YACC| yet another compiler compiler. </title> <type> CSTR 32, </type> <institution> Bell Laboratories, </institution> <address> Murray Hill, NJ, </address> <year> 1975. </year>
Reference-contexts: It extracts literal tokens from the accompanying grammar specification and treats each literal token as if it belongs to its own singleton (i.e. one-element) token class. 4 Grammar Specifications A T-gen grammar specification is a sequence of grammar rule specifications similar to those used by YACC <ref> [Joh75] </ref> and ANTLR [PDC90]. A grammar rule specification consists of a nonterminal, followed by a colon (:), one or more right-hand-side specifications separated by vertical bars (|), and is terminated with a semicolon (;).
Reference: [LaL77] <author> Wilf R. LaLonde. </author> <title> Regular right part grammars and their parsers. </title> <journal> Communications of the ACM, </journal> 20(10) 731-741, October 1977. 
Reference-contexts: While CFGs provide an excellent specification mechanism for machine-generated parsers, they are not always the most effective means for communicating grammatical structure to humans. A flexible and more human-readable extension of CFGs is provided by regular right-part grammars (RRPGs) <ref> [LaL77] </ref>. The right-hand-sides of a regular right-part grammar are nondeterministic finite state machines whose transition tokens are the terminals and nonterminals of the grammar. RRPG right-hand-sides can be equivalently specified using either Pascal-style syntax diagrams (a graphical representation) or regular expressions (a textual representation). <p> RRPG right-hand-sides can be equivalently specified using either Pascal-style syntax diagrams (a graphical representation) or regular expressions (a textual representation). The extended language of regular expressions defined in <ref> [LaL77] </ref> for RRPGs is composed of * the atomic base expressions: ; the empty set * the language consisting of the empty string a the language consisting of the terminal or nonterminal symbol a * the traditional regular expressions operators, given the regular expressions p and q: 2 pjq alternation pq
Reference: [Les75] <author> M. E. Lesk. </author> <title> LEX | a lexical analyzer generator. </title> <type> CSTR 39, </type> <institution> Bell Laboratories, </institution> <address> Murray Hill, NJ, </address> <year> 1975. </year>
Reference-contexts: Aa T-gen specification for token class specifications is given in Appendix D. Contemporary lexical analyzer generators, like LEX <ref> [Les75] </ref> and DLG [PDC90], attach significance to the order in which token class definitions rules are given. Typically, rule ordering is used as an ad hoc technique for classifying tokens that belong to two or more overlapping token classes. Keywords are also difficult to detect and handle correctly.
Reference: [LP90] <author> Wilf R. LaLonde and John R. Pugh. </author> <title> Inside Smalltalk, volume 1. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: introduction to both of these can be found in Inside Smalltalk <ref> [LP90] </ref>. Author's address: Computer and Information Sciences, University of Florida, E301 CSE, Gainesville, FL 32611. Telephone: (904) 392-1507; e-mail: graver@ufl.edu. 1 2 Background A translation scheme may involve both syntactic and semantic processing of the source text before the final (target) representation is obtained.
Reference: [PDC90] <author> Terence Parr, Hank Dietz, and Will Cohen. </author> <title> Purdue compiler-construction tool set. </title> <type> Technical Report TR-EE 90-14, </type> <institution> Purdue University, </institution> <month> February </month> <year> 1990. </year> <note> 17 Appendices </note>
Reference-contexts: The shorthand forms have the same precedence as closure. Notice that all CFGs are RRPGs (i.e. the right-hand-sides of CFGs are simply alternations of concatenations of terminals and nonterminals). T-gen, like its contemporary parser generator ANTLR <ref> [PDC90] </ref>, accepts RRPGs (the details are discussed in Section 4). <p> Aa T-gen specification for token class specifications is given in Appendix D. Contemporary lexical analyzer generators, like LEX [Les75] and DLG <ref> [PDC90] </ref>, attach significance to the order in which token class definitions rules are given. Typically, rule ordering is used as an ad hoc technique for classifying tokens that belong to two or more overlapping token classes. Keywords are also difficult to detect and handle correctly. <p> It extracts literal tokens from the accompanying grammar specification and treats each literal token as if it belongs to its own singleton (i.e. one-element) token class. 4 Grammar Specifications A T-gen grammar specification is a sequence of grammar rule specifications similar to those used by YACC [Joh75] and ANTLR <ref> [PDC90] </ref>. A grammar rule specification consists of a nonterminal, followed by a colon (:), one or more right-hand-side specifications separated by vertical bars (|), and is terminated with a semicolon (;). A right-hand-side specification is a regular expression (as defined in Section 2) optionally followed by a parse-tree-builder (PTB) directive.
References-found: 7

