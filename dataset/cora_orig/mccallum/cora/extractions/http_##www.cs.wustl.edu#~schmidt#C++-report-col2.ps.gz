URL: http://www.cs.wustl.edu/~schmidt/C++-report-col2.ps.gz
Refering-URL: http://www.acl.lanl.gov/CORBA/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: schmidt@cs.wustl.edu vinoski@ch.hp.com  
Title: Object Interconnections Modeling Distributed Object Applications (Column 2)  
Author: Douglas C. Schmidt Steve Vinoski 
Note: This column appeared in the February 1995 issue of the SIGS C++ Report magazine.  
Address: St. Louis, MO 63130 Chelmsford, MA 01824  
Affiliation: Department of Computer Science Hewlett-Packard Company Washington University,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> G. Booch, </author> <title> Object Oriented Analysis and Design with Applications (2 nd Edition). </title> <address> Redwood City, California: Ben-jamin/Cummings, </address> <year> 1993. </year>
Reference-contexts: A significant portion of this complexity is due to the fact that developers must consider new design alternatives and must acquire many new skills. Realizing the potential benefits of DOC requires both strategic and tactical skills <ref> [1] </ref>. Strategic skills involve mastering design patterns [2] and architectural techniques that exist in the domain of distributed computing. This month's column focuses on the strategic issues underlying the distributed computing requirements and environment of our stock trading application.
Reference: [2] <author> E. Gamma, R. Helm, R. Johnson, and J. Vlissides, </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: A significant portion of this complexity is due to the fact that developers must consider new design alternatives and must acquire many new skills. Realizing the potential benefits of DOC requires both strategic and tactical skills [1]. Strategic skills involve mastering design patterns <ref> [2] </ref> and architectural techniques that exist in the domain of distributed computing. This month's column focuses on the strategic issues underlying the distributed computing requirements and environment of our stock trading application.
Reference: [3] <author> Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, </title> <editor> 2.0 (draft) ed., </editor> <month> May </month> <year> 1995. </year>
Reference-contexts: Tactical skills involve mastering tools such as OO programming languages like C++ and OO DOC frameworks (such as CORBA, OODCE, and Network OLE). CORBA is an emerging standard for distributed object computing sponsored by the OMG <ref> [3] </ref>, OODCE is a C++ framework for the OSF Distributed Computing Environment (DCE) [4], and Network OLE is Microsoft's technology for integrating distributed objects [5]. <p> OODCE is particularly strong in this area since it was designed to run over many protocol stacks. First-generation CORBA and Network OLE implementations, in contrast, have not addressed protocol stack transparency as vigorously. The CORBA 2.0 specification <ref> [3] </ref> requires exactly-once semantics for operations that return normally, at-most-once semantics for operations throwing an exception, and best-effort for oneway messages. However, the CORBA 2.0 specifici-ation does not define what an ORB is supposed to do when confronted with temporary lack of network/host resources indicated by transport layer flow control.
Reference: [4] <author> J. Dilley, OODCE: </author> <title> A C++ Framework for the OSF Distributed Computing Environment, </title> <booktitle> in Proceedings of the Winter Usenix Conference, USENIX Association, </booktitle> <month> January </month> <year> 1995. </year>
Reference-contexts: Tactical skills involve mastering tools such as OO programming languages like C++ and OO DOC frameworks (such as CORBA, OODCE, and Network OLE). CORBA is an emerging standard for distributed object computing sponsored by the OMG [3], OODCE is a C++ framework for the OSF Distributed Computing Environment (DCE) <ref> [4] </ref>, and Network OLE is Microsoft's technology for integrating distributed objects [5].
Reference: [5] <institution> Microsoft Press, Redmond, WA, </institution> <note> Object Linking and Embedding Version 2 (OLE2) Programmer's Reference, Volumes 1 and 2, </note> <year> 1993. </year>
Reference-contexts: CORBA is an emerging standard for distributed object computing sponsored by the OMG [3], OODCE is a C++ framework for the OSF Distributed Computing Environment (DCE) [4], and Network OLE is Microsoft's technology for integrating distributed objects <ref> [5] </ref>.
Reference: [6] <author> W. R. Stevens, </author> <title> UNIX Network Programming. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: All these protocol families support end-to-end communication. However, they have subtly different characteristics and constraints that complicate software portability and interoperability. For example, TCP/IP is a bytestream transport protocol that ignores application message boundaries, whereas IPX/SPX maintains message boundaries <ref> [6] </ref>. Writing applications that operate transparently across different protocol stacks is often tedious and error-prone. Ideally, a DOC framework should shield applications from knowledge of these types of communication protocol-level details. OODCE is particularly strong in this area since it was designed to run over many protocol stacks. <p> In contrast, distributed applications require more elaborate mechanisms for naming and locating their remote services. A traditional scheme for addressing remote services involves Internet (IP) host addresses and communication port numbers <ref> [6] </ref>. However, this mechanism is generally inadequate for large-scale distributed systems since it is difficult to administer in a portable and unambiguous manner. For example, port 5000 does not necessarily refer to the same service on separate host machines configured by different vendors or by network administrators. <p> A conforming CORBA ORB is required to activate certain types of objects when requests arrive for them, if the objects are not already up and running. Likewise, DCE provides a similar service via its DCE daemon (dced), which is modeled after the Internet superserver inetd <ref> [6] </ref>. Windows 4 NT and Network OLE provide a service control manage-ment facility that initiates and controls network services on a Windows NT endsystem [13]. Binary Data Exchange: The stock trading application passes binary data between little- and big-endian machines.
Reference: [7] <author> H. Custer, </author> <title> Inside Windows NT. </title> <address> Redmond, Washington: </address> <publisher> Mi-crosoft Press, </publisher> <year> 1993. </year>
Reference-contexts: However, other OS features (such as text file I/O, shared memory, and graphics) are often not standardized by DOC frameworks. Network OLE addresses OS heterogeneity by the focusing primarily on a relatively homogeneous OS platform (i.e., the Win32 family of APIs <ref> [7] </ref>). CORBA does not attempt to define a standard set of interfaces to OS features, ostensibly to give users the freedom to select their favorite OS tools. They may, however, define a standard set of interfaces for accessing DOC framework features, such as CORBA's Dynamic Invocation Interface (DII).
Reference: [8] <author> Object Management Group, </author> <title> Common Object Services Specification, Volume 1, </title> <editor> 94-1-1 ed., </editor> <year> 1994. </year>
Reference-contexts: In practice, our stock trading application would undoubtedly use some type of transaction service to ensure reliability. The OMG recently standardized on a Transaction Object Service <ref> [8] </ref>, but few if any ORB vendors have yet to offer an implementation of it with their ORB products. Network OLE does not provide support for distributed transaction monitoring Developing services that are resilient to independent host and network failures is also difficult.
Reference: [9] <institution> Isis Distributed Systems, Inc., </institution> <month> Marlboro, </month> <title> MA, Isis Users's Guide: Reliable Distributed Objects for C++, </title> <month> April </month> <year> 1994. </year>
Reference-contexts: For instance, distributed applications are designed to tolerate some amount of variation in network transmission delay. Thus, a client may not detect an abnormal server termination until after valuable information is lost. Likewise, server responses may get lost in the network, causing clients to retransmit duplicate requests. Isis RDO <ref> [9] </ref> (and the follow on Orbix+Isis) is a DOC framework that supports reliable distributed object computing. It provides fail-stop semantics that ensure applications can distinguish reliably between request delays due to network congestion and lost messages due to host or network failures [10].
Reference: [10] <author> K. Birman and R. van Renesse, </author> <title> Reliable Distributed Computing with the Isis Toolkit. </title> <publisher> Los Alamitos: IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: Isis RDO [9] (and the follow on Orbix+Isis) is a DOC framework that supports reliable distributed object computing. It provides fail-stop semantics that ensure applications can distinguish reliably between request delays due to network congestion and lost messages due to host or network failures <ref> [10] </ref>. High Availability: Brokers earn their living by buying and selling stocks. Any time they are unable to access current stock prices or place trades their business suffers. Since loss of revenue due to downtime is generally unacceptable, it is essential that the stock trading system operate with high availability.
Reference: [11] <author> C. Horn, </author> <title> The Orbix Architecture, </title> <type> tech. rep., </type> <institution> IONA Technologies, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: Another technique for improving availability is to invoke applications under the control of a heartbeat monitor. This service detects and automatically reinvokes an application if it terminates unexpectedly. The Orbix+Isis ORB <ref> [11] </ref> supports transparent replication and reinvocation of CORBA objects. Object Location and Selection: Traditional stand-alone applications generally identify their constituent services via memory addresses that point to objects and subroutines. In contrast, distributed applications require more elaborate mechanisms for naming and locating their remote services. <p> OODCE and Network OLE both have provisions for multi-threading (OODCE via DCE pthreads and Network OLE via Win32 threads). The OMG CORBA standard, on the other hand, considers threading to be outside of its scope. Certain CORBA ORBs (such as Orbix <ref> [11] </ref>) provide hooks that integrate threading into an application in a relatively transparent and portable manner. Deferred Activation: Deferred activation is a technique that activates only those objects that are actually requested to perform services on the behalf of clients.
Reference: [12] <author> D. C. Schmidt and T. Suda, </author> <title> An Object-Oriented Framework for Dynamically Configuring Extensible Distributed Communication Systems, </title> <journal> IEE/BCS Distributed Systems Engineering Journal (Special Issue on Configurable Distributed Systems), </journal> <volume> vol. 2, </volume> <pages> pp. 280-293, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: These techniques are supported by flexible distributed OS mechanisms that migrate services to other host machines either statically at installation-time or dynamically during run-time. Fully automated dynamic load balancing is still primarily a research topic <ref> [12] </ref>, and few commercial DOC frameworks support it. Security: Distributed applications are generally more vulnerable to security breaches than are stand-alone applications since there are more access points for an intruder to attack.
Reference: [13] <institution> Microsoft Press, Redmond, WA, Microsoft Win32 Programmer's Reference, </institution> <year> 1993. </year> <month> 5 </month>
Reference-contexts: Likewise, DCE provides a similar service via its DCE daemon (dced), which is modeled after the Internet superserver inetd [6]. Windows 4 NT and Network OLE provide a service control manage-ment facility that initiates and controls network services on a Windows NT endsystem <ref> [13] </ref>. Binary Data Exchange: The stock trading application passes binary data between little- and big-endian machines. Therefore, marshaling and unmarshaling must be performed for requests and responses with fields that contain binary values. As described in Section 2.1, all DOC frameworks perform these tasks reasonably well.
References-found: 13

