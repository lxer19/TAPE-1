URL: ftp://theory.lcs.mit.edu/pub/people/oded/gsv.ps
Refering-URL: http://theory.lcs.mit.edu/~oded/complexity.html
Root-URL: 
Title: Honest-Verifier Statistical Zero-Knowledge Equals General Statistical Zero-Knowledge  
Author: Oded Goldreich Amit Sahai Salil Vadhan 
Abstract: We show how to transform any interactive proof system which is statistical zero-knowledge with respect to the honest-verifier, into a proof system which is statistical zero-knowledgewith respect to any verifier. This is done by limiting the behavior of potentially cheating verifiers, without using computational assumptions or even referring to the complexity of such verifier strategies. (Previous transformations have either relied on computational assumptions or were applicable only to constant-round public-coin proof systems.) Our transformation also applies to public-coin (aka Arthur-Merlin) computational zero-knowledge proofs: We transform any Arthur-Merlin proof system which is computational zero-knowledge with respect to the honest-verifier, into an Arthur-Merlin proof system which is computational zero-knowledge with respect to any probabilistic polynomial-time verifier. A crucial ingredient in our analysis is a new lemma regarding 2-universal hashing functions. 
Abstract-found: 1
Intro-found: 1
Reference: [AH87] <author> William Aiello and Johan Hastad. </author> <title> Perfect zero-knowledgelan guages can be recognized in two rounds. </title> <booktitle> In Proceedings of the Twenty Eighth Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 439-448, </pages> <year> 1987. </year>
Reference-contexts: Negative for SZK: HVS ZK AM " coAM <ref> [For89, AH87] </ref>. Inside HVSZK: A key result regarding SZK is that any honest verifier statistical zero-knowledge proof can be transformed into one using only public-coins [Oka96]. That is, HVSZK = HVS ZKj am . It is also known that HVSZ K is closed under complement [Oka96, SV97].
Reference: [BGG + 88] <author> Michael Ben-Or, Oded Goldreich, Shafi Goldwasser, Johan Hastad, Joe Kilian, Silvio Micali, and Phillip Rogaway. </author> <title> Everything provable is provable in zero-knowledge. </title> <editor> In S. Gold-wasser, editor, </editor> <booktitle> Advances in CryptologyCRYPTO '88, volume 403 of Lecture Notes in Computer Science, </booktitle> <pages> pages 37-56. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990, </year> <month> 21-25 August </month> <year> 1988. </year>
Reference-contexts: The situation with respect to computational ZK is as follows. Positive for CZK: Assuming the existence of one-way functions, CZKj am = IP (cf., <ref> [GMW91, IY87, BGG + 88, HILL, Nao91] </ref>), and so under this assumption the status of all computational zero-knowledge classes is resolved. Negative for CZK: If one-way functions do not exist then only easy on the average languages have honest-verifier (com-putational) zero-knowledge proofs [OW93].
Reference: [BMO90] <author> Mihir Bellare, Silvio Micali, and Rafail Ostrovsky. </author> <title> The (true) complexity of statistical zero-knowledge. </title> <booktitle> In Proceedings of the Twenty Second Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 494-502, </pages> <year> 1990. </year>
Reference-contexts: We fully resolve the problem in this case Theorem 2 Every language having an Honest-Verifier Statistical Zero-Knowledge proof system, also has a general (public-coin) Statistical Zero-Knowledge proof. Results of similar nature were previously achieved under intractability assumptions (cf., <ref> [BMO90, OVY93, Oka96] </ref>). A weaker unconditional result was claimed in [DOY97]. All these are discussed in detail below. But first we need to be somewhat more precise about the notions and issues discussed above. 1.1 Formal Setting The basic notions of interactive proofs [GMR89] are recalled in Appendix A. <p> K = SZ K hold? Recall, this paper resolves this open problem, showing that HVSZK = SZK (and in fact HVSZK = S ZKj am ). 1.2.2 Previous transformation of honest-verifier to gen eral ZK Conditional results for SZK: The problem of relating HVSZK to SZK was first studied in <ref> [BMO90] </ref>. They showed that the two classes coincide, provided that the Discrete Logarithm Problem is hard. At the time, it seemed puzzling that computational assumptions can be used in the supposedly information theoretic context of statistical zero-knowledge.
Reference: [Dam94] <author> Ivan Damgard. </author> <title> Interactive hashing can simplify zero knowledge protocol design. </title> <booktitle> In Proceedings of Crypto `95, Lecture Notes in Computer Science, </booktitle> <volume> volume 403, </volume> <pages> pages 100-109. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Unconditional results for constant-round ZK: The only unconditional transformations of honest-verifier SZK (resp., CZK) known before, referred to the class of constant-round public-coin proof systems (cf., <ref> [Dam94, DGW94] </ref>). It was shown that if L has a HVSZK (resp., HVCZK) public-coin proof system of a constant number of rounds then L 2 SZ Kj am (resp., L 2 CZKj am ).
Reference: [DGOW95] <author> Ivan Damgard, Oded Goldreich, Tatsuaki Okamoto, and Avi Wigderson. </author> <title> Honest verifier vs. dishonest verifier in public coin zero-knowledge proofs. </title> <booktitle> In Proceedings of Crypto `95, Lecture Notes in Computer Science, </booktitle> <volume> volume 403. </volume> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: However, a careful examination reveals that the standard class S ZK does refer to computational limitations: It is required to simulate only all probabilistic polynomial-time verifiers. The computational assumption is thus used to restrict the behavior of cheating verifiers. This approach was carried to its climax in [Oka96] (cf., <ref> [DGOW95, Part 2] </ref>): Using any bit commitment scheme (and thus any one-way function [HILL, Nao91]) it was shown that HVSZKj am = S ZKj am .
Reference: [DGW94] <author> Ivan Damgard, Oded Goldreich, and Avi Wigderson. </author> <title> Hashing functions can simplify zero-knowledge protocol design (too). </title> <type> Technical Report RS-94-39, BRICS, </type> <month> November </month> <year> 1994. </year> <note> See Part 1 of [DGOW95]. </note>
Reference-contexts: Unconditional results for constant-round ZK: The only unconditional transformations of honest-verifier SZK (resp., CZK) known before, referred to the class of constant-round public-coin proof systems (cf., <ref> [Dam94, DGW94] </ref>). It was shown that if L has a HVSZK (resp., HVCZK) public-coin proof system of a constant number of rounds then L 2 SZ Kj am (resp., L 2 CZKj am ). <p> And lastly, applying Theorem 3, we use its item 6. 1.4 Techniques Theorem 3 is proven by modifying the transformation presented in <ref> [DGW94] </ref>. Whereas the proof systems resulting from that transformation could be simulated only for a constant number of rounds, our modified transformation can be simulated for any (polynomial) number of rounds. Both transformations apply to honest-verifier Arthur-Merlin zero-knowledge proofs (both statistical and computational). In the transformation of [DGW94], each `-bit long <p> transformation presented in <ref> [DGW94] </ref>. Whereas the proof systems resulting from that transformation could be simulated only for a constant number of rounds, our modified transformation can be simulated for any (polynomial) number of rounds. Both transformations apply to honest-verifier Arthur-Merlin zero-knowledge proofs (both statistical and computational). In the transformation of [DGW94], each `-bit long (random) message sent by Arthur is replaced by an invocation of a 2-round Random Selection protocol, for generating strings in f0; 1g ` . For any fixed positive polynomial p, a Random Selection protocol with the following two properties was presented [DGW94]: 1. <p> In the transformation of <ref> [DGW94] </ref>, each `-bit long (random) message sent by Arthur is replaced by an invocation of a 2-round Random Selection protocol, for generating strings in f0; 1g ` . For any fixed positive polynomial p, a Random Selection protocol with the following two properties was presented [DGW94]: 1. As long as Arthur plays according to the protocol, Merlin may cause the outcome to deviate from uniform distribution over f0; 1g by at most 1=p (`). (That is, the variation distance is at most 1=p (`).) 2. <p> In particular, when Arthur applies a deterministic cheating strategy, the outcome of the protocol is uniformly distributed over some set of 2 ` p (`) 4 strings. The proof system resulting from the above transformation is simulated in <ref> [DGW94] </ref> by running the honest-verifier simulator, and hoping that all Arthur-messages included in the transcript fall in the sets mentioned in Item (2) above. <p> In this section, we describe an Arthur-Merlin protocol RS q;` (n) = (M RS ; A RS )(n) for randomly selecting a string in f0; 1g `(n) . The protocol employs the Random selection protocol DGW q;` (n) = (M D ; A D ) of <ref> [DGW94] </ref> as a subprotocol, and the following presentation is adapted from that paper. For notational convenience, we will write q to mean q (n) and ` to mean `(n). <p> for a uniformly chosen f 2 F , the random variables f (h 1 ); : : : ; f (h s ) are independently and uniformly distributed in f0; 1g t . (This property is used only for the proof of the soundness condition of the protocol, found in <ref> [DGW94] </ref>.) 7 Any 2-universal family for which the required computations are feasible can be used; we use this particular family for simplicity and ease of presentation. An explicit construction of such a family is given in [DGW94]. <p> used only for the proof of the soundness condition of the protocol, found in <ref> [DGW94] </ref>.) 7 Any 2-universal family for which the required computations are feasible can be used; we use this particular family for simplicity and ease of presentation. An explicit construction of such a family is given in [DGW94]. We can view each f 2 F as defining a partition of f0; 1g s into 2 t cells of the form f 1 (y), each of size poly (n). For notational convenience, we will sometimes write cell y to refer to the cell f 1 (y). <p> For notational convenience, we will sometimes write cell y to refer to the cell f 1 (y). We now describe the protocol of <ref> [DGW94] </ref>: The DGW Random Selection Protocol DGW q;` = (M D ; A D )(n): 1. A D selects f 2 R F , and sends it to M D (i.e., A D selects a random partition). 2. <p> A D uniformly selects an ele ment of the cell). 4. Output h. If, at any step, A D or M D do not select an object from the appropriate set, whatever message they send is interpreted as a canonical element of that set. In <ref> [DGW94] </ref>, it was shown that the above protocol has the following properties (roughly speaking): 1. (Soundness) For any Merlin strategy M fl D , the output distribution on H = f0; 1g s of (M fl D ; A D ) deviates from uniform by at most 1=q (in statistical difference). <p> The main hindrance in applying the protocol as used by <ref> [DGW94] </ref> is that the simulator is only guaranteed to work for a 1=poly (n) fraction of the h's. <p> Now, for h chosen uniformly from H (instead of by the protocol), the probability that h (0) contains an element of S is at most X Pr [h (ff) = 0] = 2 `n : In our protocol, h is chosen using the DGW protocol. It shown in <ref> [DGW94, Prop. 1] </ref> that a cheating Merlin can cause at most a 1=q statistical difference from the uniform distribution on H, and so the Soundness property follows. We now describe the simulator which will be used to establish Strong Simulability.
Reference: [DOY97] <author> Giovanni Di Crescenzo, Tatsuaki Okamoto, and Moti Yung. </author> <title> Keeping the SZK-verifier honest unconditionally. </title> <editor> In Burton S. Kaliski Jr., editor, </editor> <booktitle> Advances in CryptologyCRYPTO '97, volume 1294 of Lecture Notes in Computer Science, </booktitle> <pages> pages 31-45. </pages> <publisher> Springer-Verlag, </publisher> <month> 17-21 August </month> <year> 1997. </year>
Reference-contexts: We fully resolve the problem in this case Theorem 2 Every language having an Honest-Verifier Statistical Zero-Knowledge proof system, also has a general (public-coin) Statistical Zero-Knowledge proof. Results of similar nature were previously achieved under intractability assumptions (cf., [BMO90, OVY93, Oka96]). A weaker unconditional result was claimed in <ref> [DOY97] </ref>. All these are discussed in detail below. But first we need to be somewhat more precise about the notions and issues discussed above. 1.1 Formal Setting The basic notions of interactive proofs [GMR89] are recalled in Appendix A. <p> It was shown that if L has a HVSZK (resp., HVCZK) public-coin proof system of a constant number of rounds then L 2 SZ Kj am (resp., L 2 CZKj am ). Weak SZK: In <ref> [DOY97] </ref> it is claimed that any language in HVS ZK has an interactive proof, (P; V ), with the following non-standard statistical zero-knowledge property: For every positive polynomial p, and every probabilistic polynomial-time verifier V fl , there exists a probabilistic polynomial-time simulator S fl p (with running-time depending on p) <p> The completeness error of the resulting proof system is expo nentially vanishing. In case the original proof system has perfect completeness, so does the resulting one. 3 The first author was unable to verify the claims and arguments given in <ref> [DOY97] </ref>. 4. The soundness error of the resulting proof system is bounded above by 1=p (jxj), where p is an arbitrary polynomial determined by the transformation. 5. The resulting proof system has a black-box zero-knowledge simulator. 6.
Reference: [FGM + 89] <author> Martin Furer, Oded Goldreich, Yishay Mansour, Michael Sipser, and Stathis Zachos. </author> <title> On completeness and soundness in interactive proof systems. </title> <editor> In Silvio Micali, editor, </editor> <booktitle> Advances in Computing Research, </booktitle> <volume> volume 5, </volume> <pages> pages 429-442. </pages> <publisher> JAC Press, Inc., </publisher> <year> 1989. </year>
Reference-contexts: proofs with constant number of rounds and negligible error probability [GK96]. 4 Completeness error: By first applying the transformation of [FGM + we may eliminate completeness error altogether (at the cost of at most one additional round and not preserving the complexity of the prover). (Recall that the transformation of <ref> [FGM + 89] </ref> increases the simulation error by at most an exponentially vanishing amount.) Corollaries: Many known results regarding the class HVSZ K translate to the class SZ K (and respectively results for HVCZKj am translate to CZ Kj am ).
Reference: [For89] <author> Lance Fortnow. </author> <title> The complexity of perfect zero-knowledge. </title> <editor> In Silvio Micali, editor, </editor> <booktitle> Advances in Computing Research, </booktitle> <volume> volume 5, </volume> <pages> pages 327-343. </pages> <publisher> JAC Press, Inc., </publisher> <year> 1989. </year>
Reference-contexts: The key parameter is the interpretation of similarity. Three notions have been commonly considered in the literature (cf., <ref> [GMR89, For89] </ref>). Perfect Zero-Knowledge (PZK) requires that the two distributions be identical. Statistical Zero-Knowledge (SZK) requires that these distributions be statistically close (i.e., the variation distance between them is negligible). Finally, Computational Zero-Knowledge (CZK) refers to the case that these distributions are computationally indistinguishable (cf., [GM84, Yao82]). <p> Negative for SZK: HVS ZK AM " coAM <ref> [For89, AH87] </ref>. Inside HVSZK: A key result regarding SZK is that any honest verifier statistical zero-knowledge proof can be transformed into one using only public-coins [Oka96]. That is, HVSZK = HVS ZKj am . It is also known that HVSZ K is closed under complement [Oka96, SV97].
Reference: [GG98] <author> Oded Goldreich and Shafi Goldwasser. </author> <title> On the limits of non approximability of lattice problems. </title> <booktitle> These proceedings, </booktitle> <year> 1998. </year>
Reference-contexts: for statistical ZK we have Positive for SZK: Several computational problems, believed to be hard, are known to have statistical zero-knowledge proof systems; for example, Quadratic Residuosity [GMR89], Graph Isomorphism [GMW91], a problem equivalent to the Discrete Logarithm Problem [GK93], Statistical Difference [SV97], and a gap promise problem for lattices <ref> [GG98] </ref>. Negative for SZK: HVS ZK AM " coAM [For89, AH87]. Inside HVSZK: A key result regarding SZK is that any honest verifier statistical zero-knowledge proof can be transformed into one using only public-coins [Oka96]. That is, HVSZK = HVS ZKj am .
Reference: [GK93] <author> Oded Goldreich and Eyal Kushilevitz. </author> <title> A perfect zero knowledge proof system for a problem equivalent to the discrete logarithm. </title> <journal> Journal of Cryptology, </journal> <volume> 6 </volume> <pages> 97-116, </pages> <year> 1993. </year>
Reference-contexts: As for statistical ZK we have Positive for SZK: Several computational problems, believed to be hard, are known to have statistical zero-knowledge proof systems; for example, Quadratic Residuosity [GMR89], Graph Isomorphism [GMW91], a problem equivalent to the Discrete Logarithm Problem <ref> [GK93] </ref>, Statistical Difference [SV97], and a gap promise problem for lattices [GG98]. Negative for SZK: HVS ZK AM " coAM [For89, AH87]. Inside HVSZK: A key result regarding SZK is that any honest verifier statistical zero-knowledge proof can be transformed into one using only public-coins [Oka96].
Reference: [GK96] <author> Oded Goldreich and Hugo Krawczyk. </author> <title> On the composition of zero-knowledge proof systems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 25(1) </volume> <pages> 169-192, </pages> <year> 1996. </year>
Reference-contexts: The latter is a probabilistic polynomial-time oracle machine which is given oracle access to the verifier strategy. 2 We comment that the notion of black-box simulation was considered before for other reasons (cf., <ref> [GO94, GK96] </ref>). <p> In particular, to achieve negligible soundness error it suffices to use !(1) sequential repetitions. This is unavoidable, unless N P BPP, since only BPP languages may have black-box simulation zero-knowledge public-coin proofs with constant number of rounds and negligible error probability <ref> [GK96] </ref>. 4 Completeness error: By first applying the transformation of [FGM + we may eliminate completeness error altogether (at the cost of at most one additional round and not preserving the complexity of the prover). (Recall that the transformation of [FGM + 89] increases the simulation error by at most an
Reference: [GM84] <author> Shafi Goldwasser and Silvio Micali. </author> <title> Probabilistic encryp tion. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 28(2) </volume> <pages> 270-299, </pages> <year> 1984. </year>
Reference-contexts: Perfect Zero-Knowledge (PZK) requires that the two distributions be identical. Statistical Zero-Knowledge (SZK) requires that these distributions be statistically close (i.e., the variation distance between them is negligible). Finally, Computational Zero-Knowledge (CZK) refers to the case that these distributions are computationally indistinguishable (cf., <ref> [GM84, Yao82] </ref>). Assuming the existence of one-way functions, any language which has an interactive proof, has also a Computational Zero-Knowledge one (cf., [GMW91, IY87, BGG 88]). <p> then proceeding as above. x 2 Lg, where S V fl (x) denotes the output distribution of S on input x and oracle access to V fl When defining computational zero-knowledge (with respect to a class of verifiers), one instead requires that the two distributions above are computationally indistinguishable (cf., <ref> [GM84, Yao82] </ref>).
Reference: [GMR89] <author> Shafi Goldwasser, Silvio Micali, and Charles Rackoff. </author> <title> The knowledge complexity of interactive proof systems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(1) </volume> <pages> 186-208, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Zero-Knowledge proofs, introduced by Goldwasser, Micali and Rack-off <ref> [GMR89] </ref>, are fascinating and extremely useful constructs. Their fascinating nature is due to their seemingly contradictory nature; they are both convincing and yet yield nothing beyond the validity of the assertion being proven. <p> The key parameter is the interpretation of similarity. Three notions have been commonly considered in the literature (cf., <ref> [GMR89, For89] </ref>). Perfect Zero-Knowledge (PZK) requires that the two distributions be identical. Statistical Zero-Knowledge (SZK) requires that these distributions be statistically close (i.e., the variation distance between them is negligible). Finally, Computational Zero-Knowledge (CZK) refers to the case that these distributions are computationally indistinguishable (cf., [GM84, Yao82]). <p> A weaker unconditional result was claimed in [DOY97]. All these are discussed in detail below. But first we need to be somewhat more precise about the notions and issues discussed above. 1.1 Formal Setting The basic notions of interactive proofs <ref> [GMR89] </ref> are recalled in Appendix A. <p> As for statistical ZK we have Positive for SZK: Several computational problems, believed to be hard, are known to have statistical zero-knowledge proof systems; for example, Quadratic Residuosity <ref> [GMR89] </ref>, Graph Isomorphism [GMW91], a problem equivalent to the Discrete Logarithm Problem [GK93], Statistical Difference [SV97], and a gap promise problem for lattices [GG98]. Negative for SZK: HVS ZK AM " coAM [For89, AH87].
Reference: [GMW91] <author> Oded Goldreich, Silvio Micali, and Avi Wigderson. </author> <title> Proofs that yield nothing but their validity or all languages in NP have zero-knowledge proof systems. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 38(1) </volume> <pages> 691-729, </pages> <year> 1991. </year>
Reference-contexts: Finally, Computational Zero-Knowledge (CZK) refers to the case that these distributions are computationally indistinguishable (cf., [GM84, Yao82]). Assuming the existence of one-way functions, any language which has an interactive proof, has also a Computational Zero-Knowledge one (cf., <ref> [GMW91, IY87, BGG 88] </ref>). Thus, assuming the existence of one-way functions, the above problem (i.e., of honest-verifier ZK versus general ZK) is long resolved for the case of Computational Zero-Knowledge. <p> The situation with respect to computational ZK is as follows. Positive for CZK: Assuming the existence of one-way functions, CZKj am = IP (cf., <ref> [GMW91, IY87, BGG + 88, HILL, Nao91] </ref>), and so under this assumption the status of all computational zero-knowledge classes is resolved. Negative for CZK: If one-way functions do not exist then only easy on the average languages have honest-verifier (com-putational) zero-knowledge proofs [OW93]. <p> As for statistical ZK we have Positive for SZK: Several computational problems, believed to be hard, are known to have statistical zero-knowledge proof systems; for example, Quadratic Residuosity [GMR89], Graph Isomorphism <ref> [GMW91] </ref>, a problem equivalent to the Discrete Logarithm Problem [GK93], Statistical Difference [SV97], and a gap promise problem for lattices [GG98]. Negative for SZK: HVS ZK AM " coAM [For89, AH87]. <p> We 4 Recall that if one-way functions exist then N P has constant-round public-coin proofs with negligible soundness error which are honest-verifier computational zero-knowledge <ref> [GMW91] </ref>.
Reference: [GO94] <author> Oded Goldreich and Yair Oren. </author> <title> Definitions and properties of zero-knowledge proof systems. </title> <journal> Journal of Cryptology, </journal> <volume> 7(1) </volume> <pages> 1-32, </pages> <month> Winter </month> <year> 1994. </year>
Reference-contexts: The latter is a probabilistic polynomial-time oracle machine which is given oracle access to the verifier strategy. 2 We comment that the notion of black-box simulation was considered before for other reasons (cf., <ref> [GO94, GK96] </ref>).
Reference: [Gol95] <author> Oded Goldreich. </author> <title> Foundations of Cryptography (Fragments of a Book). </title> <institution> Weizmann Institute of Science, </institution> <month> February </month> <year> 1995. </year> <note> Available from http://www.eccc.uni-trier.de/eccc/. </note>
Reference-contexts: every probabilistic polynomial-time algorithm, D, the following quantity is negligible (i.e., is eventually smaller than 1=p (jxj) for every polynomial p): jPr (D ((P; V )(x)) = 1) Pr (D (S (x)) = 1)j In our definitions of zero-knowledge, we require that the simulators run in strict polynomial-time, as in <ref> [Gol95] </ref>. Notations: Let HVS ZK (resp., SZ K) denote the class of languages having interactive proofs which are statistical zero-knowledge with respect to the honest-verifier (resp., with respect to any probabilistic polynomial-time verifier). The classes HVCZK and CZ K are defined analogously for computational zero-knowledge. Public-coin (or Arthur-Merlin) proof systems.
Reference: [GSV98] <author> Oded Goldreich, Amit Sahai, and Salil Vadhan. </author> <title> Honest verifier statistical zero-knowledge equals general statistical zero-knowledge. </title> <booktitle> Electronic Colloquium on Computational Complexity, </booktitle> <year> 1998. </year> <note> http://www.eccc.uni-trier/ eccc/. </note>
Reference-contexts: The additive error term of 1=2nr also accumulates to give an additional additive factor of 1=2n to the soundness error over r rounds, yielding a total soundness error less than 1=n. A more detailed proof of soundness will be given in the full version of the paper <ref> [GSV98] </ref>. The proof of zero-knowledgeness (Properties 5 and 6) is the major technical undertaking of the paper, and it too reduces to properties of our Random Selection protocol. We will demonstrate that no matter what strategy the verifier follows, the ff i 's will be distributed statistically close to uniform. <p> The proof of Claim 6.1 can be found in the full version of the paper <ref> [GSV98] </ref>. Now we deduce Lemma 4.1, Parts 5 and 6, from Claim 6.1. Statistical Zero-Knowledge. Using the output of S instead of a true sample from (M; A) can increase the simulator deviation by at most kS (x)(M; A)(x)k, which is exactly the simulator deviation for the protocol (M; A).
Reference: [HILL] <author> Johan Hastad, Russell Impagliazzo, Leonid Levin, and Michael Luby. </author> <title> Construction of pseudorandom generator from any one-way function. </title> <note> To appear in SICOMP. Preliminary versions by Impagliazzo et. al. in 21st STOC (1989) and Hastad in 22nd STOC (1990). </note>
Reference-contexts: The situation with respect to computational ZK is as follows. Positive for CZK: Assuming the existence of one-way functions, CZKj am = IP (cf., <ref> [GMW91, IY87, BGG + 88, HILL, Nao91] </ref>), and so under this assumption the status of all computational zero-knowledge classes is resolved. Negative for CZK: If one-way functions do not exist then only easy on the average languages have honest-verifier (com-putational) zero-knowledge proofs [OW93]. <p> The computational assumption is thus used to restrict the behavior of cheating verifiers. This approach was carried to its climax in [Oka96] (cf., [DGOW95, Part 2]): Using any bit commitment scheme (and thus any one-way function <ref> [HILL, Nao91] </ref>) it was shown that HVSZKj am = S ZKj am . Combined with the HVSZK = HVS ZKj am result cited above, one gets that the existence of one-way functions implies HVS ZK = SZ K (and in fact HVSZK = S ZKj am ).
Reference: [IY87] <author> Russell Impagliazzo and Moti Yung. </author> <title> Direct minimum knowledge computations (extended abstract). </title> <editor> In Carl Pomer-ance, editor, </editor> <booktitle> Advances in CryptologyCRYPTO '87, volume 293 of Lecture Notes in Computer Science, </booktitle> <pages> pages 40-51. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988, </year> <month> 16-20 August </month> <year> 1987. </year>
Reference-contexts: Finally, Computational Zero-Knowledge (CZK) refers to the case that these distributions are computationally indistinguishable (cf., [GM84, Yao82]). Assuming the existence of one-way functions, any language which has an interactive proof, has also a Computational Zero-Knowledge one (cf., <ref> [GMW91, IY87, BGG 88] </ref>). Thus, assuming the existence of one-way functions, the above problem (i.e., of honest-verifier ZK versus general ZK) is long resolved for the case of Computational Zero-Knowledge. <p> The situation with respect to computational ZK is as follows. Positive for CZK: Assuming the existence of one-way functions, CZKj am = IP (cf., <ref> [GMW91, IY87, BGG + 88, HILL, Nao91] </ref>), and so under this assumption the status of all computational zero-knowledge classes is resolved. Negative for CZK: If one-way functions do not exist then only easy on the average languages have honest-verifier (com-putational) zero-knowledge proofs [OW93].
Reference: [Nao91] <author> Moni Naor. </author> <title> Bit commitment using pseudorandomness. </title> <journal> Jour nal of Cryptology, </journal> <volume> 4(2) </volume> <pages> 151-158, </pages> <year> 1991. </year>
Reference-contexts: The situation with respect to computational ZK is as follows. Positive for CZK: Assuming the existence of one-way functions, CZKj am = IP (cf., <ref> [GMW91, IY87, BGG + 88, HILL, Nao91] </ref>), and so under this assumption the status of all computational zero-knowledge classes is resolved. Negative for CZK: If one-way functions do not exist then only easy on the average languages have honest-verifier (com-putational) zero-knowledge proofs [OW93]. <p> The computational assumption is thus used to restrict the behavior of cheating verifiers. This approach was carried to its climax in [Oka96] (cf., [DGOW95, Part 2]): Using any bit commitment scheme (and thus any one-way function <ref> [HILL, Nao91] </ref>) it was shown that HVSZKj am = S ZKj am . Combined with the HVSZK = HVS ZKj am result cited above, one gets that the existence of one-way functions implies HVS ZK = SZ K (and in fact HVSZK = S ZKj am ).
Reference: [Oka96] <author> Tatsuaki Okamoto. </author> <title> On relationships between statistical zero knowledge proofs. </title> <booktitle> In Proceedings of the Twenty Eighth Annual ACM Symposium on the Theory of Computing, </booktitle> <year> 1996. </year> <note> See also preprint of full version, </note> <month> Aug. </month> <year> 1997. </year>
Reference-contexts: We fully resolve the problem in this case Theorem 2 Every language having an Honest-Verifier Statistical Zero-Knowledge proof system, also has a general (public-coin) Statistical Zero-Knowledge proof. Results of similar nature were previously achieved under intractability assumptions (cf., <ref> [BMO90, OVY93, Oka96] </ref>). A weaker unconditional result was claimed in [DOY97]. All these are discussed in detail below. But first we need to be somewhat more precise about the notions and issues discussed above. 1.1 Formal Setting The basic notions of interactive proofs [GMR89] are recalled in Appendix A. <p> Negative for SZK: HVS ZK AM " coAM [For89, AH87]. Inside HVSZK: A key result regarding SZK is that any honest verifier statistical zero-knowledge proof can be transformed into one using only public-coins <ref> [Oka96] </ref>. That is, HVSZK = HVS ZKj am . It is also known that HVSZ K is closed under complement [Oka96, SV97]. <p> Inside HVSZK: A key result regarding SZK is that any honest verifier statistical zero-knowledge proof can be transformed into one using only public-coins [Oka96]. That is, HVSZK = HVS ZKj am . It is also known that HVSZ K is closed under complement <ref> [Oka96, SV97] </ref>. <p> However, a careful examination reveals that the standard class S ZK does refer to computational limitations: It is required to simulate only all probabilistic polynomial-time verifiers. The computational assumption is thus used to restrict the behavior of cheating verifiers. This approach was carried to its climax in <ref> [Oka96] </ref> (cf., [DGOW95, Part 2]): Using any bit commitment scheme (and thus any one-way function [HILL, Nao91]) it was shown that HVSZKj am = S ZKj am . <p> Theorems 1 and 2 follow, where in case of Statistical Zero-Knowledge we use Okamoto's result by which HVS ZK = HVSZKj am <ref> [Oka96, Thm. 1] </ref>. We stress that, in contrast to the previously mentioned conditional results, our result for (unbounded) statistical zero-knowledge is unconditional and guarantees (black-box) simulation of all possible verifier strategies (not only polynomial-time ones). <p> So, if Theorem3 were to preserve all its features while resulting in a proof system with negligible soundness error then N P BPP would follow (assuming that one-way functions exist). also use a careful analysis of the HVS ZK to HVS ZKj am transformation of <ref> [Oka96] </ref> by which this transformation increases the simulation error by at most an exponentially vanishing amount. And lastly, applying Theorem 3, we use its item 6. 1.4 Techniques Theorem 3 is proven by modifying the transformation presented in [DGW94].
Reference: [OVY93] <author> Rafail Ostrovsky, Ramarathnam Venkatesan, and Moti Yung. </author> <title> Interactive hashing simplifies zero-knowledge protocol design. </title> <booktitle> In Proceedings of Eurocrypt `93, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: We fully resolve the problem in this case Theorem 2 Every language having an Honest-Verifier Statistical Zero-Knowledge proof system, also has a general (public-coin) Statistical Zero-Knowledge proof. Results of similar nature were previously achieved under intractability assumptions (cf., <ref> [BMO90, OVY93, Oka96] </ref>). A weaker unconditional result was claimed in [DOY97]. All these are discussed in detail below. But first we need to be somewhat more precise about the notions and issues discussed above. 1.1 Formal Setting The basic notions of interactive proofs [GMR89] are recalled in Appendix A.
Reference: [OW93] <author> Rafail Ostrovsky and Avi Wigderson. </author> <title> One-way functions are essential for non-trivial zero-knowledge. </title> <booktitle> In Proceedings of the Second Israel Symposium on Theory of Computing and Systems, </booktitle> <year> 1993. </year>
Reference-contexts: We note that it is known that the existence of honest-verifier CZK for languages outside BPP yields a weak form of one-way functions <ref> [OW93] </ref>. However, this weak form of one-way functions does NOT seem to suffice for constructing general CZK proofs for the same language (in general). The main focus of this paper is the honest-verifier versus general verifier problem for Statistical Zero-Knowledge. <p> Negative for CZK: If one-way functions do not exist then only easy on the average languages have honest-verifier (com-putational) zero-knowledge proofs <ref> [OW93] </ref>. This result almost complements the positive result above.
Reference: [SV97] <author> Amit Sahai and Salil Vadhan. </author> <title> A complete promise problem for statistical zero-knowledge. </title> <booktitle> In Proceedings of the Thirty Eighth Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 448-457, </pages> <year> 1997. </year>
Reference-contexts: As for statistical ZK we have Positive for SZK: Several computational problems, believed to be hard, are known to have statistical zero-knowledge proof systems; for example, Quadratic Residuosity [GMR89], Graph Isomorphism [GMW91], a problem equivalent to the Discrete Logarithm Problem [GK93], Statistical Difference <ref> [SV97] </ref>, and a gap promise problem for lattices [GG98]. Negative for SZK: HVS ZK AM " coAM [For89, AH87]. Inside HVSZK: A key result regarding SZK is that any honest verifier statistical zero-knowledge proof can be transformed into one using only public-coins [Oka96]. <p> Inside HVSZK: A key result regarding SZK is that any honest verifier statistical zero-knowledge proof can be transformed into one using only public-coins [Oka96]. That is, HVSZK = HVS ZKj am . It is also known that HVSZ K is closed under complement <ref> [Oka96, SV97] </ref>. <p> Given Theorem 3 (and the discussion above), the only non-obvious part in Corollary 4 is the claim about the simulation error. Here we rely on the result of <ref> [SV97] </ref> by which every language in HVSZ K has a 1-round interactive proof system for which the honest-verifier can be simulated with exponentially vanishing simulation error.
Reference: [Yao82] <author> Andrew C. Yao. </author> <title> Theory and application of trapdoor func tions. </title> <booktitle> In Proceedings of the Twenty Third Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 80-91, </pages> <year> 1982. </year>
Reference-contexts: Perfect Zero-Knowledge (PZK) requires that the two distributions be identical. Statistical Zero-Knowledge (SZK) requires that these distributions be statistically close (i.e., the variation distance between them is negligible). Finally, Computational Zero-Knowledge (CZK) refers to the case that these distributions are computationally indistinguishable (cf., <ref> [GM84, Yao82] </ref>). Assuming the existence of one-way functions, any language which has an interactive proof, has also a Computational Zero-Knowledge one (cf., [GMW91, IY87, BGG 88]). <p> then proceeding as above. x 2 Lg, where S V fl (x) denotes the output distribution of S on input x and oracle access to V fl When defining computational zero-knowledge (with respect to a class of verifiers), one instead requires that the two distributions above are computationally indistinguishable (cf., <ref> [GM84, Yao82] </ref>).
References-found: 26

