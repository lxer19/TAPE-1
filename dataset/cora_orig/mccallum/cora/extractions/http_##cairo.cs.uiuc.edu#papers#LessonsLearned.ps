URL: http://cairo.cs.uiuc.edu/papers/LessonsLearned.ps
Refering-URL: http://cairo.cs.uiuc.edu/papers.html
Root-URL: http://www.cs.uiuc.edu
Title: End-to-End QoS Guarantees: Lessons Learned from OMEGA lessons are obvious, some are connected directly to
Author: Klara Nahrstedt Jonathan M. Smith 
Note: Some of these  
Affiliation: Computer Science Department CIS Department University of Illinois University of Pennsylvania  
Abstract: With audio-visual and other sensory information in distributed multimedia applications, end-to-end quality of service guarantees are a major acceptance factor for these applications. We designed and implemented an end-point architecture, called OMEGA, for provision of end-to-end QoS guarantees. This architecture relies on a distributed QoS management entity, called the QoS Broker, to translate, negotiate/renegotiate, and admit end-to-end QoS as a contract. It uses end-to-end real-time protocols for transport. We tested our architecture on a telerobotics application. This paper presents various lessons learned from implementation of the OMEGA architecture. Performance figures show that the design of OMEGA was correct; we can provide end-to-end QoS guarantees. However, the results also show that shortcomings of the implementation platform, its system software support, and our own implementation decisions, coupled with the inherent conservatism of resource reservations, severely limited the applications. 
Abstract-found: 1
Intro-found: 1
Reference: [And93] <author> D. P. Anderson. </author> <title> Meta-Scheduling for Distributed Continuous Media. </title> <journal> ACM Transaction 19 on Computer Systems, </journal> <volume> 11(3), </volume> <month> August </month> <year> 1993. </year>
Reference-contexts: Section 5 focuses on implementation issues, and Section 6 concludes the paper. 2 Brief Overview of QoS Broker/OMEGA Architecture To provide application-to-application guarantees, we need guaranteed services both in the network and at the end-points <ref> [And93] </ref>. We assume that our communication architecture resides on top of guaranteed network services, as many results illustrating methods to provide such services are now mature. We concentrate our research efforts on providing end-to-end QoS guarantees which rely on the end-to-end resource management.
Reference: [BCW88] <author> K. B. B Becker, J.M. Chambers, and A.R. Wilks. </author> <title> The S Language. </title> <publisher> Wadsworth & Brooks, </publisher> <address> California, </address> <year> 1988. </year>
Reference-contexts: Points outside of these ranges are shown individually. Details of box-plot presentation can be found in <ref> [BCW88] </ref>. We use them because of the ability to visualize jitter from the height of the box. 11 The establishment of a resource contract for a unidirectional QoS call/connection, takes on average 60 milliseconds. The measurement was taken at the broker-buyer side when no previous connection was established.
Reference: [BM91] <author> A. Banerjea and B. Mah. </author> <title> The Real-Time Channel Administration Protocol. </title> <booktitle> In Proceedings of 2nd International Workshop on NOSSDAV, </booktitle> <address> Heidelberg, Germany, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: The broker assumes different roles (seller and buyer) to distinguish between the participating communication partners. The role assignment allows the distributed system to support sender-initiated negotiation (e.g., with underlying RCAP protocol <ref> [BM91] </ref>) as well as receiver-oriented negotiation (e.g., with underlying RSVP protocol [ZBE + 93]).
Reference: [Cor91] <author> IBM Corporation. </author> <title> AIX Version 3.1: RISC System/6000 as a Real-Time System. </title> <institution> IBM International Technical Support Center, Austin, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: These tasks are scheduled by the joint scheduler. Such simple tasks are more easily scheduled with respect to QoS guarantees. Further subtasking could be used if finer-grained scheduling or more complex protocol functions were needed. The OMEGA software implementation utilizes the real-time services in AIX Version 3.2. These include <ref> [Cor91] </ref> real-time (RT) priorities, fast context switching, fixed priority scheduling for RT processes, fine granularity timer services (The RS/6000 Model 530 has a clock speed of 25 MHz and timer resolution 400 ns. The Model 360 is slightly faster.), and code and data pinning.
Reference: [CSZ92] <author> D.D. Clark, S. Shenker, and L. Zhang. </author> <title> Supporting Real-Time Applications in an Integrated Services Packet Network: Architecture and Mechanism. </title> <booktitle> In SIGCOMM'92, </booktitle> <pages> pages 14-22, </pages> <address> Baltimore, MD, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: The QoS Broker concept is general enough to be useful across many implementation technologies. It can incorporate, for example, the integrated layering approach <ref> [CSZ92] </ref> in the control-management plane. Furthermore, the broker has interaction mechanisms in it to make `contracts' with an OS as well as with network resource management. When operating systems and network subsystems for which contract protocols exist are available, the broker uses them.
Reference: [CT90] <author> D.D. Clark and D.L. Tennenhouse. </author> <title> Architectural Considerations for a New Generation of Protocols. </title> <booktitle> In ACM SIGCOMM'90, </booktitle> <pages> pages 200-208, </pages> <address> Philadelphia, PA, </address> <month> September 2 </month> <year> 1990. </year>
Reference-contexts: The obvious gain comes from the sharing of data in a single address space; which reduces or eliminates the need for copying data between layers. Thus, the implementation exploits many of the features of the "Integrated Layer Processing" ideas of Clark and Tennenhouse <ref> [CT90] </ref>, and some performance gain from this would not be surprising. The outstanding question was the ability of the OMEGA implementation to meet the guarantees required by the telerobotics application.
Reference: [Dav93] <author> B. S. Davie. </author> <title> The Architecture and Implementation of a High-Speed Host Interface. </title> <journal> IEEE JSAC, </journal> <volume> 11(2) </volume> <pages> 228-239, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Unless the adapter is capable of multiplexing several DMAs at a time, this problem is fundamental. One means of addressing this problem is to perform DMA in smaller units, such an ATM cell-size, as was done by Davie <ref> [Dav93] </ref>. Even in this case, the algorithms em 16 ployed to manage the manipulation of packets or cells must be architected to reflect the timing requirements of the end-to-end system if timing criteria are not to be violated. 2.
Reference: [DSP93] <author> V. Desikachar, M. Stein, and R. Paul. </author> <title> Wide Bandwidth, Distributed Digital Teleoperation. </title> <type> Technical Report MS-CIS-93-65, </type> <institution> University of Pennsylvania, </institution> <address> Philadelphia, PA, </address> <year> 1993. </year>
Reference-contexts: The outstanding question was the ability of the OMEGA implementation to meet the guarantees required by the telerobotics application. The experimental results for Scenario 1 are compared to a similar telerobotics experiment <ref> [DSP93] </ref> performed on a conventional architecture, using TCP/IP and no real-time support. Both environments are shown in Figure 1. Telerobotics Result with TCP/IP/Ethernet for Scenario 1 The end-to-end delay of 1.22 second reported in [DSP93] is based on the following experimental setup: The application subsystem and TCP/IP/Ethernet at the master side <p> The experimental results for Scenario 1 are compared to a similar telerobotics experiment <ref> [DSP93] </ref> performed on a conventional architecture, using TCP/IP and no real-time support. Both environments are shown in Figure 1. Telerobotics Result with TCP/IP/Ethernet for Scenario 1 The end-to-end delay of 1.22 second reported in [DSP93] is based on the following experimental setup: The application subsystem and TCP/IP/Ethernet at the master side reside at an SGI IRIS workstation. The application subsystem and TCP/IP/Ethernet at the slave side use SUN 4 station.
Reference: [IBM94] <author> IBM Corporation. </author> <title> Ultimedia Services 2.1. for AIX, Guide and Reference, </title> <year> 1994. </year>
Reference-contexts: The RISC System/6000 workstations are connected to the individual robot control stations via cards from BIT3 Corporation which provide an S-Bus-to-MCA connection. OMEGA treats access to the BIT3 cards as a robot device access. The RISC System/6000 Model 360 includes an IBM Ultimedia video card <ref> [IBM94] </ref>, which can capture images at the rate of 30 frames/second. In using the broker for setting up an end-to-end guaranteed multimedia call, several issues are application-specific. 8 1.
Reference: [Nah95] <author> K. Nahrstedt. </author> <title> An Architecture for End-to-End Quality of Service Provision and its Experimental Validation. </title> <type> PhD thesis, </type> <institution> University of Pennsylvania, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: The main emphasis is on measured end-to-end (processing) delays between the sources and sinks at the master and slave side. Complete measurements, i.e. the mean values (mean) and mean deviation values (m:d) as well as ratios between mean and mean deviation in percentages (m:d:=mean), are in <ref> [Nah95] </ref>. We show the results for some selected cases in a box-plot 1 to illustrate the relative end-to-end delays and the mean deviation in these delays. <p> In Scenario 2 we displayed approximately 20 frames/second with EED of 52 ms. For Scenario 3 and 4, both scenarios were rejected by the admission service because of several bottlenecks in our experimental platform and implementation <ref> [Nah95] </ref>. When we examined Scenario 3, we decided to study this scenario more carefully. Therefore, we lowered the image display and receiving datagram times in the system QoS profile in order to manipulate the broker call 14 establishment, and interesting results occurred. <p> allocation (slowing down) of the faster machine (RS/6000 360) in order to comply with the processing capabilities of the slower machine (RS/6000 530) and achieve end-to-end guarantees. 5.2 Lessons Learned from OMEGA Implementation There are several limitations due to our implementation choices. * The major limitation is the scheduler structure <ref> [Nah95] </ref>. The problem is that when we support media streams with very different QoS such as video stream and robotics stream, the number of intervals (intervals hold different task schedules within a second) in the circular buffer of our scheduler dramatically increases. Currently we can support only 10 intervals.
Reference: [NS95] <author> K. Nahrstedt and J. M. Smith. </author> <title> The QoS Broker. </title> <journal> IEEE Multimedia, </journal> <volume> 2(1) </volume> <pages> 53-67, </pages> <month> Spring </month> <year> 1995. </year>
Reference-contexts: The QoS management is performed by the QoS Broker <ref> [NS95] </ref>. The broker utilizes negotiation, admission and other management services to provide resources for a connection with end-to-end resource guarantees. We tested the architecture on a telerobotics application and the measured performance of the system revealed many valuable lessons about QoS architecture. <p> Both subsystems must provide guarantees useful to a scheduler for the calls/connections they service end-to-end. Hence, an important part of the new architecture is the resource management protocol, as represented by the QoS Broker <ref> [NS95] </ref>. The QoS Broker is a new end-point design for resource orchestration, drawing on successful models for human negotiations. The design provides a specialized manager to establish resource guarantees, using detailed databases and negotiation among managers of required resources. <p> We parameterize the requirements on end-point resources through deterministic Quality of Service (QoS) parameters maintained in small databases <ref> [NS95] </ref>. The resources in each domain (application, OS, network) maintain domain-specific representations. This, of course, gives rise to multiple views of QoS. Application requirements for multimedia devices are specified through application QoS parameters. <p> These multiple QoS views must map to a common set of resources to be coordinated for management, so they are translated among each other. This is done by services included in the QoS Broker. For example, the translation between application and network QoS is done by the QoS Translator <ref> [NS95] </ref>. 3 Lessons Learned from Design 3.1 QoS Broker Concept Treating the system components (e.g., the end-stations and the network infrastructure) as peers has implications which may prove useful in many future systems.
Reference: [TS93] <author> C. B. S. Traw and J. M. Smith. </author> <title> Hardware/Software Organization of a High-Performance ATM Host Interface. </title> <journal> IEEE JSAC, </journal> <volume> 11(2) </volume> <pages> 240-253, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: The robot control software and hardware resides in two other machines: the JIFFE real-time processor on the master side and a SUN 4 workstation with real-time OS support for UNIX. The two RISC System/6000 workstations are connected with ATM host interfaces <ref> [TS93] </ref> using a 155 Mbps SONET OC-3c equivalent G-LINK physical interface. The RISC System/6000 workstations are connected to the individual robot control stations via cards from BIT3 Corporation which provide an S-Bus-to-MCA connection. OMEGA treats access to the BIT3 cards as a robot device access.
Reference: [ZBE + 93] <author> L. Zhang, B. Braden, D. Estrin, S. Herzog, and S. Jamin. RSVP: </author> <title> A new Resource ReSerVation Protocol. </title> <journal> IEEE Network, </journal> <pages> pages 8-18, </pages> <month> September </month> <year> 1993. </year> <month> 20 </month>
Reference-contexts: The broker assumes different roles (seller and buyer) to distinguish between the participating communication partners. The role assignment allows the distributed system to support sender-initiated negotiation (e.g., with underlying RCAP protocol [BM91]) as well as receiver-oriented negotiation (e.g., with underlying RSVP protocol <ref> [ZBE + 93] </ref>). To ensure that the application subsystem and transport subsystem functions were under sched-uler control (and hence included in the QoS Broker's set of guaranteed services) we designed and implemented prototypes of the Real-Time Application Protocol (RTAP) and Real-Time Network Protocol (RTNP) functions.
References-found: 13

