URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1996/TR29.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Title: Hardware Assisted Volume Rendering of Unstructured Grids by Incremental Slicing  
Author: Roni Yagel, David M. Reed, Asish Law, Po-Wen Shih, and Naeem Shareef 
Affiliation: Department of Computer and Information Science The Ohio State University  
Abstract: Some of the more important research results in computational science rely on the use of simulation methods that operate on unstructured grids. However, these grids, composed of a set of convex polyhedra, introduce exceptional problems with respect to data visualization. Volume rendering techniques, originally developed to handle rectangular grids, show significant promise for general use with unstructured grids as well. The main disadvantage of this approach, compared to isosurfaces, particles or other visualization tools is its non-interactive performance. We describe an efficient method for rendering unstructured grids that is based on incremental slicing and hardware polygon rendering. For a given view direction, the grid vertices are transformed to image space using available graphics hardware. We then incrementally compute the 2D polygon-meshes that result from letting a set of equidistant planes, parallel to the screen plane, intersect (slice) the transformed grid. Finally, we use the graphics hardware to render (interpolate-fill) the polygon-meshes and composite them in a front-to-back order. We show that, in addition to being much faster than existing methods, our approach also provides adap tive control and progressive image generation.
Abstract-found: 1
Intro-found: 1
Reference: 2. <author> Feichtinger H. G. and K. Grchenig, </author> <title> Theory and Practice of Irregular Sampling, </title> <editor> In Benedetto J. and Frazier M., editors, </editor> <title> Wave lets: </title> <booktitle> Mathematics and Applications, </booktitle> <pages> pp. 305-363. </pages> <publisher> CRC Press, </publisher> <year> 1993. </year>
Reference-contexts: When resampling regular grids, one can rely on the Shannon sampling theorem for the development of theoretically sound procedures [8]. While the corresponding theory for irregular data is being investigated <ref> [2] </ref>, several practical solutions have been developed. One way of resampling is to send rays and store the samples in a 3D buffer. Another possibility is to intersect the irregular grid with the boxes that comprise the regular grid.
Reference: 3. <author> Frhauf T. </author> <title> Raycasting a Nonregularly Structured Volume Data, </title> <journal> Eurographics94, </journal> <volume> Vol. 13, No. 3, </volume> <year> (1994), </year> <pages> pp. 294-303. </pages>
Reference-contexts: In each box, compute the size of the volumes (partially) residing inside the box, and compose a weighted sum of their contribution. Finally, it is also possible, in structured grids, to trace the rays in the computational space and map the sample locations into the physical grid <ref> [3] </ref>. These variations on the resampling approach have several difficulties. First, the resampling process has to be performed 2 very carefully in order to maintain data integrity and quality. <p> Another difficulty stems from the fact that cells may vastly vary in their size; maintaining the resolution of the smallest cells may require an impractical resolution for the regular grid. Finally, this approach (except as described in <ref> [3] </ref>) calls for two resampling operations, once when mapping into the regular grid and once when the regular grid is rendered. The alternative is to directly render the irregular volume. Existing direct methods can be classified into object (voxel) order and image (pixel) order methods.
Reference: 4. <author> Hung C.M. and P.G. Buning, </author> <title> Simulation of Blunt-Fin Induced Shock Wave and Turbulent Boundary Layer Separation, AIAA Paper 84-0457, </title> <booktitle> AIAA Aerospace Sciences Conference, </booktitle> <address> Reno, NV, </address> <month> January </month> <year> 1984. </year>
Reference-contexts: The smallest dataset is the Wing dataset from the SGI Explorer package (See Figure 5). It has 27,720 data points that form 122,850 tetrahedra. The second, is the Bluntfin data showing airow over a at plate with a blunt fin rising from the plate <ref> [4] </ref> (See Figure 7). This (40,960 points) grid is converted into a tetrahedral grid with 187,395 tetrahedra. The third dataset shows Liquid Oxygen (incompressible) ow across a at plate with a cylindrical post rising perpendicular to the plate.
Reference: 5. <author> Garrity M., </author> <title> Ray Tracing Irregular Grids, </title> <journal> Computer Graphics, </journal> <volume> Vol. 24, No. 5, </volume> <month> December </month> <year> 1990. </year>
Reference-contexts: In this paper we present a voxel-space approach that overcomes these difficulties. (a) (b) (c) FIGURE 1. (a) cartesian grid, (b) regular grid, (c) general rectilinear grid, (d) structured grid, (e) unstructured grid, (f) unstructured tetrahedral grid. 3 1.2 Pixel-space methods Pixel-space method are also called backward-feed methods or ray-casting <ref> [5] </ref>. The algorithm casts ray (s) from the eye through each screen-pixel. For each ray the algorithm performs the following: 1. Find the first cell the ray intersects. 2. Searches between the cell neighbors for the exit point. 3. <p> First, the calculation of step 1 as well as the determination if a cell is last (step 4) in the case of non-convex grid can be very difficult and time consuming. A possible solution is to embed the boundary cells in a regular space-subdivision grid <ref> [5] </ref>. Another major difficulty is that, in order to perform step 2 efficiently, neighborhood information is required. For unstructured grids, the algorithm must be preceded, therefore, by a process that finds and stores, within each cell, a list of all its neighbors.
Reference: 6. <author> Giertsen C., </author> <title> Volume Visualization of Sparse Irregular Meshes, </title> <journal> IEEE Computer Graphics & Applications, </journal> <volume> Vol. 12, No. 2, </volume> <month> March </month> <year> 1992, </year> <pages> pp. 40-48. </pages>
Reference-contexts: Finally, pixel-space rendering is expected to be slow, especially when step 2 involves sampling in arbitrarily shaped voxels. 1.3 Hybrid methods A hybrid method has also been investigated for regular grids [13] and was extended to irregular grids <ref> [6] </ref>. In these methods, the volume is traversed in object order while the contribution of each voxel to the image is computed in image order. Each transformed cell is intersected by the planes defined by all the screen scan-lines. <p> Each transformed cell is intersected by the planes defined by all the screen scan-lines. The resulting polygon is divided into spans in which integration takes place. As in <ref> [6] </ref>, our approach is also based on incremental slicing; however, our method can employ available rendering hardware to achieve interactive rendering, is not sensitive to image resolution, and supports adaptive and progressive rendering. In the following section, we describe two variations of our slice-based approach.
Reference: 7. <author> Max N., Hanrahan P., and Crawfis R. </author> <title> Area and Volume Coherence for Efficient Visualization of 3D Scalar Functions, </title> <journal> Computer Graphics, </journal> <volume> Vol. 24, No. 5, </volume> <month> December </month> <year> 1990, </year> <pages> pp. 27-33. </pages>
Reference-contexts: Structured grids can very easily be converted into tetrahedral grids where each hexahedral cell yields five tetrahedra [10]. Unstructured grids can also be converted into tetrahedral grids by applying a tetrahedration algorithm to the set of grid points. (e.g., a Delaunay triangulation) <ref> [7] </ref>. Our approach can be used to render any polyhedral grid and does not assume any specific cell type or connectivity. Our current implementation, however, assumes tetrahedral grids. <p> In general, it is not always possible to sort a collection of polyhedral cells and certainly not arbitrary (possibly concave) polyhedra. Only acyclic meshes and polyhedral meshes generated by Delaunay triangulation can be depth sorted. Max et al <ref> [7] </ref> have presented a topological sort for acyclic grids composed of convex polyhedra with planar faces. A similar algorithm was described in great detail in [15]. Step 3 can also be implemented in various ways. <p> Alternatively, front and back faces of the polyhedra are rendered separately and the value is integrated between the far and near points <ref> [7] </ref>. Finally, hardware assisted splatting can be employed where up to four polygons are rendered per polyhedral cell with non-zero opacity at the common vertex. Variations and approximations of this approach are described in [14][16].
Reference: 8. <author> Oppenheim A.V. and Schafer R.W., </author> <title> Digital Signal Processing, </title> <publisher> Prentice Hall Inc., </publisher> <address> Englewoods Cliffs, NJ, </address> <year> 1975. </year>
Reference-contexts: The most obvious way to render an irregular grid is to resample it into a regular grid and then render it with available methods. When resampling regular grids, one can rely on the Shannon sampling theorem for the development of theoretically sound procedures <ref> [8] </ref>. While the corresponding theory for irregular data is being investigated [2], several practical solutions have been developed. One way of resampling is to send rays and store the samples in a 3D buffer. Another possibility is to intersect the irregular grid with the boxes that comprise the regular grid.
Reference: 9. <author> Rogers S. E., D. Kwak, U. Kau, </author> <title> A Numerical Study of Three-Dimensional Incompressible Flow Around Multiple Posts, AIAA Paper 86-0353, </title> <booktitle> AIAA Aerospace Sciences Conference, </booktitle> <address> Reno, Nevada, </address> <year> 1986. </year>
Reference-contexts: The third dataset shows Liquid Oxygen (incompressible) ow across a at plate with a cylindrical post rising perpendicular to the plate. Interesting features of the ow are velocity changes just upstream of the post, and two counter-rotating vortices downstream of the post, where the greatest mixing occurs <ref> [9] </ref> (See Figure 8). This grid with 109,744 vertices is represented by 513,375 tetrahedra. The last and largest dataset shows ow past a very simplified geometry representing a delta wing aircraft, at a moderately high angle of attack. Features of interest are vortices and vortex breakdowns [1] (See Figure 9).
Reference: 10. <author> Shirley P. and Tuchman A. </author> <title> A Polygonal Approximation to Direct Scalar Volume Rendering, </title> <journal> Computer Graphics, </journal> <volume> Vol. 24, No. 5, </volume> <month> December </month> <year> 1990, </year> <pages> pp. 63-70. </pages>
Reference-contexts: Another major advantage of a tetrahedral grid is that other types of grids can be converted to it. Structured grids can very easily be converted into tetrahedral grids where each hexahedral cell yields five tetrahedra <ref> [10] </ref>. Unstructured grids can also be converted into tetrahedral grids by applying a tetrahedration algorithm to the set of grid points. (e.g., a Delaunay triangulation) [7]. Our approach can be used to render any polyhedral grid and does not assume any specific cell type or connectivity. <p> Assume NumSlices=50, Z min =10, Z max =110 and Dz=2. Then, edge number 10, having endpoints with Z coordinates at 12 and 44 will be inserted into buckets 1 and 17. 0 17 47 23 15 231015 EdgeBuckets 7 converting each cell into five tetrahedra as in <ref> [10] </ref>. This restriction implies, though, that more memory and time will be spent to render the tetrahedral grid, compared to directly rendering the polyhedral grid. 3.4 Rendering After the slicing, the graphics hardware is used to render the slices.
Reference: 11. <author> Speray D. and Kennon S. </author> <title> Volume Probes: Interactive Data Exploration on Arbitrary Grids:, </title> <booktitle> Proceedings of San Diego Workshop on Volume Visualization, Computer Graphics, </booktitle> <volume> Vol. 24, No. 5, </volume> <month> December </month> <year> 1990, </year> <pages> pp. 5-12. </pages>
Reference-contexts: In this paper we assume that the grid is composed of cells that are bounded by a set of general simple polygons (i.e., non-intersecting, without holes, potentially concave, and possibly non-planar). We distinguish between rectilinear, structured, and unstructured grids <ref> [11] </ref>. Rectilinear grids are composed of a set of connected cells of rectangular prism (brick) shape. The set of voxels completely tessellates a rectangular cartesian sub-space (Figure 1 (a-c)).
Reference: 12. <author> Swan E. and Yagel R., </author> <title> Slice-Based Volume Rendering, OSU-ACCAD-1/93-TR1, The Advanced Computing Center for the Arts and Design, </title> <institution> The Ohio State University, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: This is expected to further improve both our time and space consumption requirements. Acknowledgments This project was started at NASA Lewis in Fall 1992 and some preliminary results were reported for regular grids <ref> [12] </ref> and irregular grids [18]. We thank NASA Lewis, and Maureen Cain in particular, for their assistance. We thank Steve May and Ferdi Scheepers for the matrix inversion code and The Advanced Computing Center for the Arts and Design (ACCAD) for the use of the SGI Crimson machine.
Reference: 13. <author> Upson V. and Keeler, M., V-Buffer: </author> <title> Visible Volume Rendering, </title> <journal> Computer Graphics, </journal> <volume> Vol. 22, No. 4, </volume> <month> August </month> <year> 1988, </year> <pages> pp. 59-64. </pages>
Reference-contexts: Finally, pixel-space rendering is expected to be slow, especially when step 2 involves sampling in arbitrarily shaped voxels. 1.3 Hybrid methods A hybrid method has also been investigated for regular grids <ref> [13] </ref> and was extended to irregular grids [6]. In these methods, the volume is traversed in object order while the contribution of each voxel to the image is computed in image order. Each transformed cell is intersected by the planes defined by all the screen scan-lines.
Reference: 14. <author> Wilhelms J. and A. van Gelder, </author> <title> A Coherent Projection Approach for Direct Volume Rendering, </title> <journal> Computer Graphics, </journal> <volume> Vol. 25, No. 4, </volume> <month> July </month> <year> 1991, </year> <pages> pp. 275-284. </pages>
Reference: 15. <author> Williams P.L., </author> <title> Visibility Ordering Meshed Polyhedra, </title> <journal> ACM Transactions on Graphics, </journal> <volume> Vol. 11, No. 2, </volume> <month> April </month> <year> 1992, </year> <pages> pp. 103-126. </pages>
Reference-contexts: The task of figuring out how to render the few types of possible tetrahedra is an order of magnitude easier than figuring out all configurations of even hexahedral cells <ref> [15] </ref>, not to mention arbitrary polyhedra. Another major advantage of a tetrahedral grid is that other types of grids can be converted to it. Structured grids can very easily be converted into tetrahedral grids where each hexahedral cell yields five tetrahedra [10]. <p> Only acyclic meshes and polyhedral meshes generated by Delaunay triangulation can be depth sorted. Max et al [7] have presented a topological sort for acyclic grids composed of convex polyhedra with planar faces. A similar algorithm was described in great detail in <ref> [15] </ref>. Step 3 can also be implemented in various ways. One way is to render only the front faces of the polyhedra, assigning each vertex the value resulting from integrating the data from that vertex to the back of the polyhedra [16].
Reference: 16. <author> Williams P.L., </author> <title> Interactive Splatting of Nonrectilinear Volumes, </title> <booktitle> Proceedings of Visualization92, </booktitle> <address> Boston, MA, </address> <month> October </month> <year> 1992, </year> <pages> pp. 37-44. </pages>
Reference-contexts: Step 3 can also be implemented in various ways. One way is to render only the front faces of the polyhedra, assigning each vertex the value resulting from integrating the data from that vertex to the back of the polyhedra <ref> [16] </ref>. Alternatively, front and back faces of the polyhedra are rendered separately and the value is integrated between the far and near points [7]. Finally, hardware assisted splatting can be employed where up to four polygons are rendered per polyhedral cell with non-zero opacity at the common vertex.
Reference: 17. <author> Williams P.L. and Shirley P., </author> <title> Visibility Ordering Meshed Polyhedra, </title> <type> Technical Report 1097, </type> <institution> Center for Supercomputing Research and Development, University of Illinois at Urbana-Champaign, </institution> <month> April </month> <year> 1991. </year>
Reference: 18. <author> Yagel R., </author> <title> Volume Rendering Polyhedral Grids by Incremental Slicing, </title> <institution> OSU-CISRC-10/93-TR35, Department of Computer and Information Science, The Ohio State University, </institution> <month> October </month> <year> 1993. </year> <title> FIGURE 8. The Liquid Oxygen post dataset. The image shows the x-momentum (parallel to the plate) of the liquid oxygen. FIGURE 9. </title> <booktitle> The y-momentum of the Deltawing dataset </booktitle>
Reference-contexts: This is expected to further improve both our time and space consumption requirements. Acknowledgments This project was started at NASA Lewis in Fall 1992 and some preliminary results were reported for regular grids [12] and irregular grids <ref> [18] </ref>. We thank NASA Lewis, and Maureen Cain in particular, for their assistance. We thank Steve May and Ferdi Scheepers for the matrix inversion code and The Advanced Computing Center for the Arts and Design (ACCAD) for the use of the SGI Crimson machine.
References-found: 17

