URL: http://www.cse.psu.edu/~catuscia/papers/pi_calc/popl.ps
Refering-URL: http://www.cse.psu.edu/~catuscia/teaching/cg520/98Fall/references.html
Root-URL: http://www.cse.psu.edu
Email: catuscia@disi.unige.it  
Title: Comparing the Expressive Power of the Synchronous and the Asynchronous -calculus  
Author: Catuscia Palamidessi 
Address: Genova, via Dodecaneso, 35, 16146 Genova, Italy  
Affiliation: DISI, Universita di  
Abstract: The Asynchronous -calculus, as recently proposed by Boudol and, independently, by Honda and Tokoro, is a subset of the -calculus which contains no explicit operators for choice and output-prefixing. The communication mechanism of this calculus, however, is powerful enough to simulate output-prefixing, as shown by Boudol, and input-guarded choice, as shown recently by Nestmann and Pierce. A natural question arises, then, whether or not it is possible to embed in it the full -calculus. We show that this is not possible, i.e. there does not exist any uniform, parallel-preserving, translation from the -calculus into the asynchronous - calculus, up to any "reasonable" notion of equivalence. This result is based on the incapablity of the asynchronous -calculus of breaking certain symmetries possibly present in the initial communication graph. By similar arguments, we prove a separation result between the - calculus and CCS. 
Abstract-found: 1
Intro-found: 1
Reference: [ACS96] <author> R. Amadio, I. Castellani, and D. Sangiorgi. </author> <title> On bisimulations for the asynchronous - calculus. </title> <editor> In U. Montanari, editor, </editor> <booktitle> CONCUR 96, volume 1119 of Lecture Notes in Computer Science, </booktitle> <pages> pages 147-162. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference: [BKT85] <author> J.A. Bergstra, J.W. Klop, and J.V. Tucker. </author> <title> Process algebra with asynchronous communication mechanisms. In S.D. </title> <editor> Brookes, A.W. Roscoe, and G. Winskel, editors, </editor> <booktitle> Proc. Seminar on Concurrency, volume 197 of Lecture Notes in Computer Science, </booktitle> <pages> pages 76-95. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference: [Bou88] <author> L. Bouge. </author> <title> On the existence of symmetric algorithms to find leaders in networks of communicating sequential processes. </title> <journal> Acta In-formatica, </journal> <volume> 25 </volume> <pages> 179-201, </pages> <year> 1988. </year>
Reference-contexts: For a more extended and technical discussion about the relation with <ref> [Bou88] </ref> see the last section of this paper. Another problem we consider is the question to what extent the -calculus is more powerful than its "ancestor" CCS ([Mil89]). <p> It is possible to show that the orbits generated by oe constitute a partition of N . 3 Electoral and Symmetric systems In this section we adapt to the -calculus (a simplified version of) the notions of electoral system and symmet ric network as given by Bouge in <ref> [Bou88] </ref>. 3.1 Election of a leader in a network We first need to define the concepts of network computation and its projection over a component of the network. A network is a system of parallel process P = P 1 jP 2 j : : : jP k . <p> We have defined the electoral system in that way only to remain closer to the notion in literature. In <ref> [Bou88] </ref> a more permissive notion of symmetry is considered for proving negative results. Namely, the automorphism oe can have more orbits, provided that they all have the same cardinality. An automorphism with this property is called well-balanced. In the framework of [Bou88] this is a significant generalization, because the language considered <p> In <ref> [Bou88] </ref> a more permissive notion of symmetry is considered for proving negative results. Namely, the automorphism oe can have more orbits, provided that they all have the same cardinality. An automorphism with this property is called well-balanced. In the framework of [Bou88] this is a significant generalization, because the language considered there, CSP in , can have the parallel operator only at the top level. Hence the condition of a single orbit, there, would impose that all the parallel processes present in the network have the same code (modulo renaming). <p> In this way, the limit of the sequence is a fair computation. Our Theorems 4.2 and 5.2 correspond to Theorems 3.2.1 and 4.2.1 in <ref> [Bou88] </ref>, for CSP in and CSP respectively. The main difference with those results is that here we are dealing with much richer languages. <p> In particular, both the a -calculus and CCS admit the parallel operator inside every process, and not just at the top-level as it is the case for CSP in and CSP (at least, for the versions considered in <ref> [Bou88] </ref>: all processes in a network are strictly sequential). This leads to an essential difference. <p> Another difference is that in the -calculus the network can evolve dynamically. This is the reason why Theorem 4.2.1 in <ref> [Bou88] </ref> does not hold for the -calculus (as shown by 9 our Theorem 5.1). This feature complicates the proof of Theorems 4.2 since we have to take into account a corresponding evolution of the automorphism. <p> The use of the parallel operator as a free constructor usually enhances significatively the expressive power of a language. It is for instance essential for implementing choice (at least in a restricted form). In fact, Bouge has shown in <ref> [Bou88] </ref> that it is not possible to encode CSP in into CSP no (the sublanguage of CSP with neither input nor output guards in the choice), while Nestmann and Pierce have shown in [NP96] that the a -calculus can be embedded into its subset with no choice.
Reference: [Bou92] <author> G. Boudol. </author> <title> Asynchrony and the -calculus. </title> <type> Technical Report 1702, </type> <institution> INRIA, Sophia-Antipolis, </institution> <year> 1992. </year>
Reference-contexts: In recent years the interest in this asynchronous fragment has grown, in particular concerning the question of its expressiveness. Boudol has shown in <ref> [Bou92] </ref> that the lazy lambda calculus can still be encoded into it (as it is the case for the -calculus). Honda and Tokoro, and independently Boudol, have shown that output prefix can be simulated ([HT91, Bou92]). Concerning choice, the local (or internal) kind can be easily encoded ([HT92]). <p> this congruence to satisfy the following: (i) P j Q if Q can be obtained from P by alpha renaming, notation P j ff Q, (ii) P jQ j QjP , (iv) (xP )jQ j x (P jQ) if x 62 fv (Q). 2.2 The asynchronous -calculus In accordance with <ref> [HT91, Bou92] </ref>, we consider the following definition of the asynchronous -calculus ( a - calculus for short). <p> The rule for the output-action process is described in Table 2, where 0 stands again for inaction (see <ref> [Bou92] </ref> for the encoding of inaction into the a -calculus.) All the rules for the other operators are like in Table 1. Note that the a -calculus is a proper subset of the - calculus. <p> Another way to interpret them is by saying that the "real", i.e. simultaneous, synchronous communication cannot be implemented in the asynchronous one. In this sense, the translation of <ref> [Bou92] </ref> would not be acceptable since the randez-vous discipline introduces a delay. In this view of things, it is not the choice that is the hard operator: mixed choice would be easy to realize if real synchronous communication would be available.
Reference: [BS96] <author> M. Boreale and D. Sangiorgi. </author> <title> Some congruence properties for -calculus bisimilarities. </title> <type> Technical report, </type> <institution> INRIA, Sophia-Antipolis, </institution> <year> 1996. </year>
Reference-contexts: Here we basically follow the presentation given in <ref> [BS96, San95] </ref>. The main difference with the original version ([MPW92]) is the absence of the matching operator, and a construct for guarded choice instead of free choice. Let N be a countable set of names, x; y; : : :.
Reference: [FR80] <author> N. Francez and M. Rodeh. </author> <title> A distributed abstract data type implemented by a probabilistic communication scheme. </title> <booktitle> In Proc. of the 21st Annual Symp. on Formal Aspects of Computing, </booktitle> <pages> pages 373-379, </pages> <year> 1980. </year>
Reference-contexts: This seems to reinforce the impression that the mixed choice is a really difficult mechanism to implement. So far, the only really distributed, but approximated solutions we are aware of are the probabilistic methods based on randomization (see for instance <ref> [FR80] </ref>). Another way to interpret them is by saying that the "real", i.e. simultaneous, synchronous communication cannot be implemented in the asynchronous one. In this sense, the translation of [Bou92] would not be acceptable since the randez-vous discipline introduces a delay.
Reference: [Hoa78] <author> C.A.R. Hoare. </author> <title> Communicating sequential processes. </title> <journal> Communications of the ACM, </journal> <volume> 21(8) </volume> <pages> 666-677, </pages> <year> 1978. </year>
Reference: [HT91] <author> K. Honda and M. Tokoro. </author> <title> An object calculus for asynchronous communication. </title> <editor> In P. America, editor, </editor> <booktitle> ECOOP 91, volume 512 of Lecture Notes in Computer Science, </booktitle> <pages> pages 133-147. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: this congruence to satisfy the following: (i) P j Q if Q can be obtained from P by alpha renaming, notation P j ff Q, (ii) P jQ j QjP , (iv) (xP )jQ j x (P jQ) if x 62 fv (Q). 2.2 The asynchronous -calculus In accordance with <ref> [HT91, Bou92] </ref>, we consider the following definition of the asynchronous -calculus ( a - calculus for short).
Reference: [HT92] <author> K. Honda and M. Tokoro. </author> <title> On asynchronous communication semantics. </title> <editor> In M. Tokoro, O. Nierstrasz, and P. Wegner, editors, </editor> <booktitle> Object-Based Concurrent Computing, volume 612 of Lecture Notes in Computer Science, </booktitle> <pages> pages 21-51. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference: [JJH90] <author> He Jifeng, </author> <title> M.B. Josephs, and C.A.R. Hoare. A theory of synchrony and asynchrony. </title> <booktitle> In Proc. of IFIP Working Conference on Programming Concepts and Methods, </booktitle> <pages> pages 459-478, </pages> <year> 1990. </year>
Reference-contexts: Actually, one direction is clear: asynchronous communication can be simulated by inserting between each pair of communicating agents a "queue" process (see for instance <ref> [JJH90] </ref>). The other direction, on the contrary, is not clear and researchers in the field seem to have radically different opinions about it. The motivation for this work arises from the attempt of solving, or at least clarifying, this question.
Reference: [Mil89] <author> R. Milner. </author> <title> Communication and Concur-rency. </title> <publisher> Prentice Hall International, </publisher> <year> 1989. </year>
Reference-contexts: The mechanisms of name-passing and scope extrusion, which makes it possible in the -calculus to extend dynamically the communication structure of the network, are essential for the above result. In fact, such result would not hold for the "static subset" of the - calculus i.e. CCS <ref> [Mil89] </ref>, as shown by the following: Theorem 5.2 Let P = P 1 jP 2 j : : : jP k be a CCS network and let the associated hypergraph H (P ) = hN; X; ti admit a well-balanced automorphism oe such that P is symmetric wrt oe and, for
Reference: [MPW92] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A calculus of mobile processes, Part I/II. </title> <journal> Information and Computation, </journal> <volume> 100(1) </volume> <pages> 1-77, </pages> <year> 1992. </year>
Reference: [NP96] <author> U. Nestmann and B.C. Pierce. </author> <title> Decoding choice encodings. </title> <editor> In U. Montanari, editor, </editor> <booktitle> CONCUR 96, volume 1119 of Lecture Notes in Computer Science, </booktitle> <pages> pages 179-194. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: In fact, Bouge has shown in [Bou88] that it is not possible to encode CSP in into CSP no (the sublanguage of CSP with neither input nor output guards in the choice), while Nestmann and Pierce have shown in <ref> [NP96] </ref> that the a -calculus can be embedded into its subset with no choice. The crucial point is that the parallel operator allows to represent the main characteristic of the choice, namely the simultaneous availability of its guards.
Reference: [San95] <author> D. Sangiorgi. </author> <title> -calculus, internal mobility, and agent-passing calculi. </title> <booktitle> Theoretical Computer Science, </booktitle> <year> 1995. </year> <note> To appear. 10 </note>
Reference-contexts: Here we basically follow the presentation given in <ref> [BS96, San95] </ref>. The main difference with the original version ([MPW92]) is the absence of the matching operator, and a construct for guarded choice instead of free choice. Let N be a countable set of names, x; y; : : :.
References-found: 14

