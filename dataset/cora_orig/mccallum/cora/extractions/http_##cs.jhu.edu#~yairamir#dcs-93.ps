URL: http://cs.jhu.edu/~yairamir/dcs-93.ps
Refering-URL: http://cs.jhu.edu/~yairamir/
Root-URL: http://www.cs.jhu.edu
Title: Fast Message Ordering and Membership Using a Logical Token-Passing Ring  
Author: Y. Amir, L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, P. Ciarfella 
Address: Santa Barbara, CA 93106  
Affiliation: Department of Electrical and Computer Engineering University of California,  
Abstract: Many protocols exist to support the maintenance of consistency of data in fault-tolerant distributed systems; these protocols are quite expensive and thus have not been widely adopted. The Totem protocol supports consistent concurrent operations by placing a total order on broadcast messages. This total order is achieved by including a sequence number in a token circulated around a logical ring that is imposed on a set of processors in a broadcast domain. A membership algorithm handles reconfiguration, including restarting of a failed processor and remerging of a partitioned network. Effective flow-control allows the protocol to achieve message ordering rates two to three times higher than the best prior protocols. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. A. Agarwal, P. M. Melliar-Smith, and L. E. Moser. Totem: </author> <title> A protocol for message ordering in a wide-area network. </title> <booktitle> In Proceedings of the First ISMM International Conference on Computer Communications and Networks, </booktitle> <pages> pages 1-5, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: This work is based on prior experience with the Trans and Total protocols [13, 15, 16], which were effective but computationally expensive and led to the design of the Totem protocol <ref> [1, 12] </ref>. Ideas from the Trans protocol also influenced the development of the Transis system [2, 3].
Reference: [2] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> a communication sub-system for high availability. </title> <booktitle> In Proceedings of the 22nd Annual International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 76-84, </pages> <address> Boston, MA, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: This work is based on prior experience with the Trans and Total protocols [13, 15, 16], which were effective but computationally expensive and led to the design of the Totem protocol [1, 12]. Ideas from the Trans protocol also influenced the development of the Transis system <ref> [2, 3] </ref>. <p> Many systems provide some of these levels of ser-vice. In particular, the ISIS system [5] provides CB-CAST and ABCAST service, corresponding approximately to causal and agreed service, respectively. ISIS also provides an all-stable service, corresponding approximately to safe service. The Transis system <ref> [2] </ref> provides causal, agreed and safe levels of service. The use of one of the lower levels of service, i.e. basic, fifo or causal rather than agreed, has been justified for other protocols by the earlier delivery achieved.
Reference: [3] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. </author> <title> Membership algorithms in broadcast domains. </title> <booktitle> In Proceedings of the 6th International Workshop on Distributed Algorithms, Lecture Notes in Computer Science 647, </booktitle> <pages> pages 292-312, </pages> <address> Haifa, Israel, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: This work is based on prior experience with the Trans and Total protocols [13, 15, 16], which were effective but computationally expensive and led to the design of the Totem protocol [1, 12]. Ideas from the Trans protocol also influenced the development of the Transis system <ref> [2, 3] </ref>.
Reference: [4] <author> K. P. Birman and T. A. Joseph. </author> <title> Reliable communication in the presence of failures. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(1) </volume> <pages> 47-76, </pages> <month> Febru-ary </month> <year> 1987. </year>
Reference-contexts: TPM addresses network partitioning, but delivers more messages than are allowed by causal delivery and virtual synchrony. The ISIS system of Birman and Joseph <ref> [4] </ref> is based on the idea of ordering messages multicast to process groups. Recent versions [5] have adopted a token-passing protocol, similar to that of Chang and Maxem-chuck, for total ordering.
Reference: [5] <author> K. P. Birman, A. Schiper, and P. Stephen-son. </author> <title> Lightweight causal and atomic group multi-cast. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: These problems are difficult when asynchro-nism, fault-tolerance and performance must be taken into account. Protocols exist that address these problems in fault-tolerant asynchronous distributed systems. These protocols are, however, quite expensive in the number of messages broadcast and/or the computation required. Recent designs for fault-tolerant distributed systems <ref> [5, 13, 17] </ref> employ the idea of placing a partial order or a total order on broadcast messages. This approach simplifies the design of the application but depends heavily on efficient fault-tolerant protocols to keep the overhead reasonable. <p> TPM addresses network partitioning, but delivers more messages than are allowed by causal delivery and virtual synchrony. The ISIS system of Birman and Joseph [4] is based on the idea of ordering messages multicast to process groups. Recent versions <ref> [5] </ref> have adopted a token-passing protocol, similar to that of Chang and Maxem-chuck, for total ordering. <p> It is easy to see that safe service is also agreed service, that agreed service is also causal service, that causal service is also fifo service and that fifo service is also basic service. Many systems provide some of these levels of ser-vice. In particular, the ISIS system <ref> [5] </ref> provides CB-CAST and ABCAST service, corresponding approximately to causal and agreed service, respectively. ISIS also provides an all-stable service, corresponding approximately to safe service. The Transis system [2] provides causal, agreed and safe levels of service. <p> Such a message is regarded as the terminal message of an existing configuration and the initial message of a new configuration. The configuration change messages define a partial order on the configurations. These messages support our implementation of virtual synchrony, a concept introduced by Birman <ref> [5] </ref>. We define virtual synchrony as follows: Definition. Virtual synchrony requires that if processors p and q are both members of consecutive configurations C and D, then p and q determine exactly the same agreed order of messages in C.
Reference: [6] <author> J. M. Chang and N. F. Maxemchuk. </author> <title> Reliable broadcast protocols. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 251-273, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: presented here extends the membership algorithm of Transis to handle ring formation and token generation and combines that algorithm with the single-ring total ordering algorithm of Totem to obtain a highly efficient fault-tolerant total ordering protocol. 2 Related Work An early reliable broadcast and ordering protocol by Chang and Maxemchuk <ref> [6] </ref> uses a token-passing strategy. In their protocol the processor that holds the token acknowledges messages, whereas in Totem the processor that holds the token broadcasts messages. Chang and Maxemchuk have also provided a membership and token recovery algorithm.
Reference: [7] <author> F. Cristian. </author> <title> Reaching agreement on processor group membership in synchronous distributed systems. </title> <journal> Distributed Computing, </journal> <volume> 4(4) </volume> <pages> 175-187, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: An early use of synchronous behavior in the communication system to support fault-tolerant distributed applications was the work of Cristian, Aghili, Strong and Dolev [8]. They fabricated an atomic broadcast from unreliable message communication using loosely synchronized clocks and timeouts with an upper bound on message transit time. Cristian <ref> [7] </ref> has also developed a membership algorithm using a strategy similar to that used for atomic broadcast. The Totem protocol likewise uses a timeout mechanism to detect token loss and processor failure.
Reference: [8] <author> F. Cristian, H. Aghili, R. Strong, and D. Dolev. </author> <title> Atomic broadcast: From simple message diffusion to byzantine agreement. </title> <booktitle> In Proceedings of the IEEE Symposium on Fault Tolerant Computing, </booktitle> <pages> pages 200-206, </pages> <address> Ann Arbor, Michigan, </address> <month> June </month> <year> 1985. </year>
Reference-contexts: Mishra, Peterson and Schlichting [14] have developed a membership algorithm based on the partial order of Psync. An early use of synchronous behavior in the communication system to support fault-tolerant distributed applications was the work of Cristian, Aghili, Strong and Dolev <ref> [8] </ref>. They fabricated an atomic broadcast from unreliable message communication using loosely synchronized clocks and timeouts with an upper bound on message transit time. Cristian [7] has also developed a membership algorithm using a strategy similar to that used for atomic broadcast.
Reference: [9] <author> H. Kopetz, A. Damm, C. Koza, M. Mulazzani, W. Schwabl, C. Senft, and R. Zainlinger. </author> <title> Distributed fault-tolerant real-time systems: The Mars approach. </title> <booktitle> IEEE Micro, </booktitle> <pages> pages 25-40, </pages> <month> Febru-ary </month> <year> 1989. </year>
Reference-contexts: Cristian [7] has also developed a membership algorithm using a strategy similar to that used for atomic broadcast. The Totem protocol likewise uses a timeout mechanism to detect token loss and processor failure. The approach of Kopetz et al <ref> [9] </ref> is even more synchronous than that of Cristian, being specifically directed towards real-time applications. The result is higher performance and less flexibility. Kopetz [10] has used this synchronous approach to provide membership services in addition to reliable ordered message delivery.
Reference: [10] <author> H. Kopetz, G. Grunsteidl, and J. Reisinger. </author> <title> Fault-tolerant membership service in a synchronous distributed real-time system. </title> <booktitle> In Proceedings of the International Working Conference on Dependable Computing for Critical Applications, </booktitle> <pages> pages 167-174, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: The Totem protocol likewise uses a timeout mechanism to detect token loss and processor failure. The approach of Kopetz et al [9] is even more synchronous than that of Cristian, being specifically directed towards real-time applications. The result is higher performance and less flexibility. Kopetz <ref> [10] </ref> has used this synchronous approach to provide membership services in addition to reliable ordered message delivery. The Totem protocol provides equally high performance with greater flexibility. Related to our flow-control strategy are the sliding-window strategy and the token rotation time limit of FDDI.
Reference: [11] <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <pages> pages 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: The fifo level of service ensures that messages originated by a given processor are delivered in the order in which they were originated. However, messages from different processors can be arbitrarily interleaved. The causal level of service, which is taken from Lamport <ref> [11] </ref>, is the reflexive transitive closure of the relation: * Message m precedes message m 0 if processor p delivers m before p sends m 0 . * Message m precedes message m 0 if processor p sends m before p sends m 0 .
Reference: [12] <author> P. M. Melliar-Smith, L. E. Moser, and D. A. Agarwal. </author> <title> Ring-based ordering protocols. </title> <booktitle> In Proceedings of the International Conference on Information Engineering, </booktitle> <pages> pages 882-891, </pages> <address> Singapore, </address> <month> December 2-5 </month> <year> 1991. </year>
Reference-contexts: This work is based on prior experience with the Trans and Total protocols [13, 15, 16], which were effective but computationally expensive and led to the design of the Totem protocol <ref> [1, 12] </ref>. Ideas from the Trans protocol also influenced the development of the Transis system [2, 3].
Reference: [13] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast protocols for distributed systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(1) </volume> <pages> 17-25, </pages> <year> 1990. </year>
Reference-contexts: These problems are difficult when asynchro-nism, fault-tolerance and performance must be taken into account. Protocols exist that address these problems in fault-tolerant asynchronous distributed systems. These protocols are, however, quite expensive in the number of messages broadcast and/or the computation required. Recent designs for fault-tolerant distributed systems <ref> [5, 13, 17] </ref> employ the idea of placing a partial order or a total order on broadcast messages. This approach simplifies the design of the application but depends heavily on efficient fault-tolerant protocols to keep the overhead reasonable. <p> Also important are the provisions for virtual synchrony and extended virtual synchrony which ensure that messages are not lost or incorrectly ordered as a result of reconfiguration. This work is based on prior experience with the Trans and Total protocols <ref> [13, 15, 16] </ref>, which were effective but computationally expensive and led to the design of the Totem protocol [1, 12]. Ideas from the Trans protocol also influenced the development of the Transis system [2, 3].
Reference: [14] <author> S. Mishra, L. L. Peterson, and R. D. Schlicht-ing. </author> <title> A membership protocol based on partial order. </title> <booktitle> In Proceedings of the International Working Conference on Dependable Computing for Critical Applications, Dependable Computing and Fault-Tolerant Systems 6, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pages 309-331, </pages> <address> Tucson, AZ, </address> <month> February </month> <year> 1991. </year>
Reference-contexts: Peterson, Buchholz and Schlichting [17] have devised the Psync protocol, which constructs a partial order on messages that can be converted into a total order. In contrast, the Totem protocol constructs a total order on messages directly without constructing a partial order first. Mishra, Peterson and Schlichting <ref> [14] </ref> have developed a membership algorithm based on the partial order of Psync. An early use of synchronous behavior in the communication system to support fault-tolerant distributed applications was the work of Cristian, Aghili, Strong and Dolev [8].
Reference: [15] <author> L. E. Moser, P. M. Melliar-Smith, and V. Agrawala. </author> <title> Membership algorithms for asynchronous distributed systems. </title> <booktitle> In Proceedings of the IEEE 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 480-488, </pages> <address> Ar-lington, TX, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Also important are the provisions for virtual synchrony and extended virtual synchrony which ensure that messages are not lost or incorrectly ordered as a result of reconfiguration. This work is based on prior experience with the Trans and Total protocols <ref> [13, 15, 16] </ref>, which were effective but computationally expensive and led to the design of the Totem protocol [1, 12]. Ideas from the Trans protocol also influenced the development of the Transis system [2, 3].
Reference: [16] <author> L. E. Moser, P. M. Melliar-Smith, and V. Agrawala. </author> <title> Asynchronous fault-tolerant total ordering algorithms. </title> <note> To appear in SIAM Journal of Computing. </note>
Reference-contexts: Also important are the provisions for virtual synchrony and extended virtual synchrony which ensure that messages are not lost or incorrectly ordered as a result of reconfiguration. This work is based on prior experience with the Trans and Total protocols <ref> [13, 15, 16] </ref>, which were effective but computationally expensive and led to the design of the Totem protocol [1, 12]. Ideas from the Trans protocol also influenced the development of the Transis system [2, 3].
Reference: [17] <author> L. L. Peterson, N. C. Buchholz, and R. D. Schlichting. </author> <title> Preserving and using context information in interprocess communication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: These problems are difficult when asynchro-nism, fault-tolerance and performance must be taken into account. Protocols exist that address these problems in fault-tolerant asynchronous distributed systems. These protocols are, however, quite expensive in the number of messages broadcast and/or the computation required. Recent designs for fault-tolerant distributed systems <ref> [5, 13, 17] </ref> employ the idea of placing a partial order or a total order on broadcast messages. This approach simplifies the design of the application but depends heavily on efficient fault-tolerant protocols to keep the overhead reasonable. <p> ISIS has also established the idea of virtual synchrony as important to maintaining consistency in fault-tolerant distributed systems. Peterson, Buchholz and Schlichting <ref> [17] </ref> have devised the Psync protocol, which constructs a partial order on messages that can be converted into a total order. In contrast, the Totem protocol constructs a total order on messages directly without constructing a partial order first.
Reference: [18] <author> B. Rajagopalan and P. K. McKinley. </author> <title> A token-based protocol for reliable, ordered multicast communication. </title> <booktitle> In Proceedings of the 8th IEEE Symposium on Reliable Distributed Systems, </booktitle> <pages> pages 84-93, </pages> <address> Seattle, WA, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: While the latency is reasonable at low loads, it increases at high loads and in the presence of a failed processor. More closely related to Totem is the TPM protocol of Rajagopalan and McKinley <ref> [18] </ref>. Like Totem, TPM uses a token on a logical ring for broadcasting and retransmission of messages. They have also provided a membership and token regeneration protocol.
References-found: 18

