URL: http://www.ri.cmu.edu/afs/cs/project/amulet-pane/NatProg/www/projectoverviewTR.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/amulet-pane/NatProg/www/index.html
Root-URL: 
Email: bam@cs.cmu.edu  
Title: Natural Programming: Project Overview and Proposal  
Author: Brad A. Myers 
Note: Copyright 1998  
Web: http://www.cs.cmu.edu/~NatProg  
Address: Pittsburgh, PA 15213  
Affiliation: Human-Computer Interaction Institute School of Computer Science Carnegie Mellon University  Carnegie Mellon University  
Date: January, 1998  CMU-HCII- 98-100  
Pubnum: CMU-CS-98-101  
Abstract: End-users must write programs to control many different kinds of applications. Examples include multimedia authoring, controlling robots, defining manufacturing processes, setting up simulations, programming agents, scripting, etc. The languages used today for these tasks are usually difficult to learn and are based on professional programming languages. This is in spite of years of research highlighting the problems with these languages for novice programmers. The Natural Programming Project is developing general principles, methods, and programming language designs that will significantly reduce the amount of learning and effort needed to write programs for people who are not professional programmers. These principles are based on a thorough analysis of previous empirical studies of programmers, as well as new studies designed to discover the most natural programming paradigms. Our proposed research is to extend these results, and apply them to different domains. The result will be new programming languages and environments that are demonstrably superior for users. 
Abstract-found: 1
Intro-found: 1
Reference: [Baecker 1986] <author> Ronald Baecker. </author> <title> Design Principles for the Enhanced Presentation of Computer Program Source Text. </title> <booktitle> Proceedings of CHI86 Conference on Human Factors in Computing Systems. </booktitle> <editor> M. Mantei and P. Orbeton. </editor> <address> 1986: Boston, </address> <publisher> ACM. </publisher> <pages> pp. 51-58. </pages>
Reference-contexts: A more natural programming language is also expected to make the programming process faster and more efficient, since the language will be better suited to the tasks. The code should also be more readable and understandable, since we will apply the lessons learned from studies of program comprehension <ref> [Fitter 1979; Baecker 1986] </ref>. Since any useful program is going to be too large for the author to remember all of, going back and rereading (and understanding) existing parts is an important part of program generation and modification.
Reference: [Billingsley 1995] <author> Pat Billingsley. </author> <title> Hard Test for Soft Products, </title> <journal> SIGCHI Bulletin. </journal> <note> 1995. 27(1). p. 10. </note>
Reference-contexts: We believe that the need for programming by the general computer user will only increase. Workers today deal mainly with digital information. An estimated 80% of all salaried workers will work with computers by the year 2000, including almost all office workers <ref> [Billingsley 1995] </ref>. People whose jobs consist mainly of manipulating Natural Programming Project - 22 information on computers are well-motivated to create custom programs to help them with the processing, because it will make them more productive. Teachers are another group of people who will need to use computers more extensively.
Reference: [Calder 1993] <author> R. B. Calder, J. E. Smith, A. J. Courtemanche, J. M. F. Mar and A. Z. Ceranowicz. </author> <title> ModSAF Behavior Simulation and Control, </title> <booktitle> Proceedings of the Third Conference on Computer Generated Forces and Behavioral Representational, </booktitle> <address> Orlando, FLA, </address> <year> 1993. </year> <pages> pp. 347-356. </pages>
Reference-contexts: Having a more usable and learnable language for processing this input would empower a wider range of people to construct dynamically generated pages. Simulation setup: Interactive tools like ModSAF <ref> [Calder 1993] </ref> allow some parts of a simulation to be specified using maps and dialog boxes, but other parts still need to be specified by writing programs. This applies to military simulations as well as simulations of physical processes.
Reference: [Dertouzos 1992] <author> Mike Dertouzos and et al. </author> <title> ISAT Summer Study: Gentle Slope Systems; Making Computers Easier to Use. </title>
Reference-contexts: Gentle Slope Systems The proposed research is closely aligned with the concept of Gentle Slope Systems <ref> [Dertouzos 1992] </ref> [Myers 1992b] which are systems where for each incremental increase in the level of customizability, the user only needs to learn an incremental amount.
Reference: [DiGiano 1995] <author> Chris DiGiano and Michael Eisenberg. </author> <title> Self-Disclosing Design Tools: </title>
Reference-contexts: However, this gives no clue about how to write code to perform these actions at run time in a program. Our system will be self-disclosing <ref> [DiGiano 1995] </ref> so that every time the user performs some action by direct manipulation or by demonstration, the system will show some example code that will perform the same action.
References-found: 5

