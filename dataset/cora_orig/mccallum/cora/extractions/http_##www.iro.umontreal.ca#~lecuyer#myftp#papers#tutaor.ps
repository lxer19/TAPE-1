URL: http://www.iro.umontreal.ca/~lecuyer/myftp/papers/tutaor.ps
Refering-URL: http://www.iro.umontreal.ca/~lecuyer/papers.html
Root-URL: http://www.iro.umontreal.ca
Title: UNIFORM RANDOM NUMBER GENERATION  
Author: Pierre L'ECUYER 
Keyword: Simulation, random number generation, pseudorandom, uniform random numbers, linear congruential, lattice structure, discrepancy, nonlinear generators, combined generators  
Address: Montreal, C.P. 6128, Succ.A, Montreal, H3C 3J7, Canada  
Affiliation: Departement d'IRO, Universite de  
Date: Fall 1993  
Note: To appear in the Annals of Operations Research (1994) Version:  
Abstract: In typical stochastic simulations, randomness is produced by generating a sequence of independent uniform variates (usually real-valued between 0 and 1, or integer-valued in some interval) and transforming them in an appropriate way. In this paper, we examine practical ways of generating (deterministic approximations to) such uniform variates on a computer. We compare them in terms of ease of implementation, efficiency, theoretical support, and statistical robustness. We look in particular at several classes of generators, such as linear congruential, multiple recursive, digital multistep, Tausworthe, lagged-Fibonacci, generalized feedback shift register, matrix, linear congruential over fields of formal series, and combined generators, and show how all of them can be analyzed in terms of their lattice structure. We also mention other classes of generators, like non-linear generators, discuss other kinds of theoretical and empirical statistical tests, and give a bibliographic survey of the most recent papers on the subject. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. A*erbach, </author> <title> The Sub-Lattice Structure of Linear Congruential Random Number Generators, </title> <journal> Manuscripta Math. </journal> <month> 55 </month> <year> (1986) </year> <month> 455-465. </month>
Reference-contexts: In most cases, however, the available theoretical results are valid only for the entire period. For example, we might know that in a given dimension t, the t-tuples of successive output values, over the entire period, are very evenly distributed in the t-dimensional unit hypercube <ref> [0; 1] </ref> t . But in practice, we should use only a tiny fraction of the generator's period. Good equidistribution over the whole period might improve our confidence in good statistical behavior over the fraction of the period that we use, but provides no proof of such good behavior. <p> If the points of P are not well distributed in the hypercube <ref> [0; 1] </ref> t , then it is likely that the points of P 0 will not look random. But if the points of P are very evenly distributed in [0; 1] t and P 0 contains only a "negligible" fraction of those points, then the points of P 0 are likely <p> If the points of P are not well distributed in the hypercube <ref> [0; 1] </ref> t , then it is likely that the points of P 0 will not look random. But if the points of P are very evenly distributed in [0; 1] t and P 0 contains only a "negligible" fraction of those points, then the points of P 0 are likely to look random, as long as they behave somewhat like a random sample from P . <p> Suppose that the output function is defined as a composition of the form G = G 1 ffi G 2 , where G 1 : IF m k ! IF m is a linear form over IF m k , and G 2 : IF m ! <ref> [0; 1] </ref>. This is the usual form of the output function in practice. Then, if x n = G 1 (s n ) 2 IF m , one has x n = a 1 x n1 + + a k x nk (3) in IF m . <p> Let a = a 1 = ff 2 ZZ fl m = ZZ m n f0g. Then (3) becomes x n = ax n1 mod m: (4) If G : ZZ m ! <ref> [0; 1] </ref> is defined by G (x) = x=m, this gives the classical multiplicative linear congruential generator (MLCG), which has been deeply analyzed, scrutinized, and often criticized, over the past 30 years or so [10, 33, 34, 44, 49, 77, 81]. <p> 1 x n1 + + a k x nk ) mod m: (5) The generator's state at step n is the vector s n = (x n ; : : : ; x n+k1 ) 2 ZZ k m , which could be transformed into a value u n 2 <ref> [0; 1] </ref> by u n = G (s n ) = x n =m. This kind of higher-order linear congruential generator is known as a multiple recursive generator (MRG) [38, 49, 51, 77]. The special case where k = 1 gives the usual MLCG with prime modulus. <p> The structure can be analyzed in the same way, since it does not really depend on the additive constant except for shifting. When T t is replaced by the set of non-overlapping t-tuples, L t does not form a lattice in general <ref> [1] </ref>. The AWC/SWB generators described in x3.9 are equivalent to linear congruential generators, and therefore have a lattice structure. In [14, 93], it is shown that this structure is always bad: in all dimensions t &gt; k, one has d t 1= p 3.
Reference: [2] <author> L. A*erbach and H. Grothe, </author> <title> Calculation of Minkowski-Reduced Lattice Bases. </title> <note> Computing 35 (1985) 269-276. </note>
Reference-contexts: All the edges connected to a given vertex of a unit cell form a set of linearly independent vectors which form a lattice basis. Such a basis is called Minkowski-reduced (MRLB) when the basis vectors are in some sense most orthogonal <ref> [2] </ref>. The Beyer quotient q t is the ratio of the length of the shortest vector over the length of the longest vector in a MRLB. <p> However, q t is much more costly to compute than d t . An algorithm to compute a MRLB and the Beyer quotient is given in A*erbach and Grothe <ref> [2] </ref>. See also [38, 53]. L'Ecuyer, Blouin, and Couture [51] suggest specific MRGs, after a search based on the criterion Q 20 , for orders k up to 7 and prime moduli up to near 2 63 .
Reference: [3] <author> L. A*erbach and H. Grothe, </author> <title> The Lattice Structure of Pseudo-Random Vectors Generated by Matrix Generators. </title> <journal> J. of Computational and Applied Math. </journal> <month> 23 </month> <year> (1988) </year> <month> 127-131. </month>
Reference-contexts: This kind of matrix generator has been studied by Grothe [37, 38] and A*erbach and Grothe <ref> [3] </ref>. We call it the matrix MLCG. It may prove useful for implementing parallel generators on parallel processors. <p> The matrix MLCG, which uses all the components of X n at each iteration, has a similar lattice structure and can be analyzed in a similar way <ref> [3, 38] </ref>. When the MLCG is not multiplicative, the lattice is shifted by a constant vector, becoming a grid. The structure can be analyzed in the same way, since it does not really depend on the additive constant except for shifting.
Reference: [4] <author> L. A*erbach and R. Weilbacher, </author> <title> The Exact Determination of Rectangle Discrepancy for Linear Congruential Pseudorandom Numbers, </title> <journal> Math. </journal> <note> of Computation 53, 187 (1989) 343-354. </note>
Reference-contexts: Discrepancy bounds for part of the period are given in [72, 73]. One major difficulty with discrepancy is that it can be computed exactly only for a few very special cases (e.g., for a LCG, for t = 2 <ref> [4] </ref>). Otherwise, only bounds on D (t) N , or orders of magnitude, are available [77]. Typically, these orders of magnitude are for N equal to the period length, or are averages over a whole class of generators.
Reference: [5] <author> D. L. Andre, G. L. Mullen, and H. Niederreiter, </author> <title> Figures of Merit for Digital Multistep Pseudorandom Numbers, </title> <journal> Math. </journal> <note> of Computation 54 (1990) 737-748. </note>
Reference-contexts: Therefore, for t &gt; m + 1, one must have r (t) k 1. Unfortunately, finding generators with large r (t) for large k and t appears difficult for the moment, from the computational point of view. Steps in that direction have been made by Andre, Mullen, and Niederreiter <ref> [5] </ref>. For m = 2, they have computed a list of primitive polynomials of degree k 32 for which r (2) k 1 and r (t) is large for all t 5. <p> Tezuka and Fushimi [94] extended those results to a list of polynomials for which r (2) = k and r (t) is large for t 6. Their associated sequences can also be generated more quickly than those of <ref> [5] </ref>, with the GFSR implementation. 23 6. Discrepancy and Other Theoretical Measures The notion of discrepancy has been the subject of many papers and is well treated in the excellent book of Niederreiter [77], who is undoubtedly the "grand master" of the subject.
Reference: [6] <author> S. L. Anderson, </author> <title> Random Number Generators on Vector Supercomputers and Other Advanced Architectures, </title> <note> SIAM Review 32 (1990) 221-251. 37 </note>
Reference-contexts: This could speed up some simulation applications, but for the majority of applications, the savings will be negligible, while having to manage such a vector could be somewhat bothersome, especially to programmers who seek simplicity and elegance in their code. Anderson <ref> [6] </ref> gives FORTRAN codes to generate vectors of random numbers on vector computers. 27 8. <p> Leapfrogging and Generating Numbers on Parallel Processors There are two major situations which ask for generating (independent) multiple streams of random numbers in parallel: (a) To perform a simulation on parallel processors, where each processor must generate its own random number stream <ref> [6] </ref>; (b) To assign different random number streams to different components of the model, for example to implement some variance reduction techniques, when performing a simulation on a single processor [10, 52]. Of course, these two situations can also be combined.
Reference: [7] <author> A. C. Atkinson, </author> <title> Tests of Pseudo-Random Numbers, </title> <booktitle> Applied Statistics 29 (1980) 164--171. </booktitle>
Reference-contexts: One important example is an MLCG for which m is a power of two, a mod 8 = 5, and x 0 is odd. In that case, as observed by Hoaglin and King [40] and Atkinson <ref> [7] </ref>, the t-dimensional vectors of successive values form a subgrid of L t containing one-fourth of the points. Another important case is when m is a product of J distinct primes m = m 1 m J (see [55] and x9).
Reference: [8] <author> L. Blum, M. Blum, and M. Shub, </author> <title> A Simple Unpredictable Pseudo-Random Number Generator, </title> <journal> SIAM J. Comput. </journal> <volume> 15, </volume> <month> 2 </month> <year> (1986) </year> <month> 364-383. </month>
Reference-contexts: So, by taking k large enough, one has a safe generator which would pass all the statistical tests that can be run in reasonable time. For further details on these notions, see <ref> [8, 49, 54] </ref> and the references given there. The idea of PT-perfect generators was introduced by cryptologists, for which "unpredictability" is a crucial property. All of this looks nice, but the bad news are that no generator (family) has been proven PT-perfect to date. <p> The points produced by that generator turn out to lie on a union of grids, which can be determined explicitly [23]. Bounds on D (t) m are given in [77]. 10.4. OTHER NONLINEAR GENERATORS Some nonlinear generators have also been proposed by people from the field of cryptology <ref> [8, 54, 85] </ref>. Blum, Blum, and Shub [8] proposed the following class, known as BBS generators. Let m = pq be a Blum integer , i.e., such that p; q are two distinct primes both congruent to 3 modulo 4. <p> Bounds on D (t) m are given in [77]. 10.4. OTHER NONLINEAR GENERATORS Some nonlinear generators have also been proposed by people from the field of cryptology [8, 54, 85]. Blum, Blum, and Shub <ref> [8] </ref> proposed the following class, known as BBS generators. Let m = pq be a Blum integer , i.e., such that p; q are two distinct primes both congruent to 3 modulo 4. <p> This means that for large enough k, the generator should behave very nicely from a statistical point of view. See <ref> [8, 54] </ref> for further details. However, L'Ecuyer and Proulx [54] show that a software implementation of the BBS generator is much too slow for practical use in simulation applications. More efficient generators with the same kind of polynomial-time statistical "perfectness" have been proposed recently [85].
Reference: [9] <author> J. Boyar, </author> <title> Inferring Sequences Produced by a Linear Congruential Generator Missing Low-Order Bits, </title> <note> Journal of Cryptology 1 (1989) 177-184. </note>
Reference-contexts: For cryptology, most available generators are dangerous because there are efficient ways of predicting the next value, given the sequence of values already produced by the generator <ref> [9, 42, 45] </ref>. 1.2. BAD AND DANGEROUS GENERATORS There is a well developed body of theory concerning the construction and analysis of (pseudo)random number generators. Good introductory references and survey papers include [6, 10, 16, 41, 44, 47, 49, 50, 75, 76, 77, 82]. <p> However, they are still too slow for practical simulation use. The generators mostly used in simulation (linear congruential, multiple recursive, GFSR, : : : ) are known not to be PT-perfect. "Efficient" algorithms have been designed to infer their sequence by looking at the first few numbers <ref> [9, 45] </ref>. But in practice, they remain quite useful for simulation, mainly because of their speed. When their parameters are well chosen and only a small fraction of their period is used, they show good statistical behavior with respect to most reasonable empirical tests. <p> But even this is not easy to achieve with efficient generators. If the generator is a MLCG, for example, there exist efficient algorithms which can find out the modulus and multiplier only from the output values, and guess the next values <ref> [9, 45] </ref>. From that, it is easy to design a test that the MLCG will fail. Perhaps asking a generator to pass all such tests is asking too much ? Well, that depends on the application.
Reference: [10] <author> P. Bratley, B. L. Fox, and L. E. </author> <title> Schrage, A Guide to Simulation, second edition. </title> <publisher> Springer-Verlag, </publisher> <address> New York (1987). </address>
Reference-contexts: 1. Introduction Simulating stochastic models requires a source of randomness. Modelers and programmers normally assume that random variables from different probability distributions, like normal, exponential, Bernouilli, Poisson, and so on, are available. The methods that have been designed to generate those random variables (see, e.g., Bratley, Fox, and Schrage <ref> [10] </ref>, Devroye [19], or Law and Kelton [47]) assume in turn the availability of a source of i.i.d. U (0; 1), i.e., continuous random variables distributed uniformly over the real interval (0; 1), or sometimes discrete random variables distributed uniformly over some finite set of integers (like, e.g., random bits). <p> This is not very practical for computer simulation, especially when millions of random numbers are required, as is often the case. Using truly random numbers for simulation and other Monte Carlo methods has been tried for a while, a few decades ago, but practically abandoned for various reasons <ref> [10, 49] </ref>. On modern computers, pseudorandom numbers are generated by completely deterministic algorithms. We want these numbers to look, from the outside, as if they where truly random. <p> The question of empirical statistical testing is treated in x11. 2. What is a Good generator ? We summarize in this section the major requirements for a good random number generator, for general purpose simulation. These requirements are also discussed in <ref> [10, 41, 79, 84] </ref>, and we do not always share the views of all these authors. 2.1. <p> Further, in many simulation applications, the generator's sequence is "split" into a large number of (disjoint) substreams, which should behave themselves as virtual generators (see <ref> [10, 52] </ref> and x8). Then, the period must be orders of magnitude longer. Families of fast-speed low-memory generators, with period lengths well over 2 200 , have been proposed and analyzed recently and will be discussed in this paper. 6 2.4. <p> Being able to reproduce the same sequence of random numbers on a given computer (called repeatability) is important for program verification and for variance reduction purposes <ref> [10, 47, 84] </ref>. Reproducing the same sequence on different computers is also important, for example for program verification across computers [41]. Repeatability is a major advantage of pseudorandom sequences with respect to sequences generated by physical devices. <p> (3) becomes x n = ax n1 mod m: (4) If G : ZZ m ! [0; 1] is defined by G (x) = x=m, this gives the classical multiplicative linear congruential generator (MLCG), which has been deeply analyzed, scrutinized, and often criticized, over the past 30 years or so <ref> [10, 33, 34, 44, 49, 77, 81] </ref>. Despite well founded critics, this kind of generator is still largely used in practice [10, 47]. One can also use (4) with a non-prime modulus m. Then, ZZ m is not a field, but we still call the generator a MLCG. <p> Despite well founded critics, this kind of generator is still largely used in practice <ref> [10, 47] </ref>. One can also use (4) with a non-prime modulus m. Then, ZZ m is not a field, but we still call the generator a MLCG. For example, m can be a large power of two. <p> Another important reason is that for small p, the low order bits do not look random at all. For p = 2 and k = 1, the i-th least significant bit of x n has period equal to max (1; 2 i2 ) <ref> [10, 18] </ref>. If the period of such a generator is split into 2 d equal segments, then all segments are identical except for their d most significant bits [18, 21]. <p> If m is representable as a standard integer on the target computer, there is a reasonably efficient and portable 25 way of computing ax mod m for 0 &lt; x &lt; m provided that a (m mod a) &lt; m: (29) See <ref> [10, 48, 49, 79] </ref> for the details. In fact, all the multipliers a satisfying this condition turn out to be of the form a = i or a = bm=ic for i &lt; p m. <p> Tezuka and L'Ecuyer [91] give an example in the C language. A FORTRAN code implementing a different algorithm, for the case k = s (for which algorithm 1 does not work) is given in <ref> [10, p.216] </ref>. 7.3. COMPLICATED CHARACTERISTIC POLYNOMIALS OR LARGE MODULI Linear recurrences whose characteristic polynomials are a trinomial appear to allow much faster implementations than those based on polynomials with many non-zero coefficients, at least from what we saw so far. <p> in parallel: (a) To perform a simulation on parallel processors, where each processor must generate its own random number stream [6]; (b) To assign different random number streams to different components of the model, for example to implement some variance reduction techniques, when performing a simulation on a single processor <ref> [10, 52] </ref>. Of course, these two situations can also be combined. <p> G9. MRG with m = 2 31 1, k = 5 and a 1 = 107374182; a 5 = 104480; a 2 = a 3 = a 4 = 0 Generators G1 and G2 are used in various software packages <ref> [10, 47] </ref> and recommended by some authors [79, 47]. Fishman and Moore [33] recommend G3. G7 is proposed by Matsumoto and Kurita [66], while G8 is proposed by Marsaglia and Zaman [62] and further recommended by James [41].
Reference: [11] <author> M. Brown and H. Solomon, </author> <title> On Combining Pseudorandom Number Generators, </title> <journal> Annals of Statistics 1 (1979) 691-695. </journal>
Reference-contexts: The structure of the hybrid generator thus obtained is often not well understood. Then, as pointed out by Ripley [83], using such generators may be a bit like playing ostrich. Theoretical results in <ref> [60, 11] </ref> appear to support the view (at first glance) that combined generators should have better statistical behavior in general than their individual components. However, as explained in [49], applying those theoretical results to "deterministic" generators is a somewhat shaky reasoning. Combination can conceivably worsen things.
Reference: [12] <author> B. J. Collings, </author> <title> Compound Random Number Generators, </title> <journal> J. of the American Statistical Association 82, </journal> <month> 398 </month> <year> (1987) </year> <month> 525-527. </month>
Reference-contexts: Similar packages could also be implemented rather easily using other (perhaps longer-period) generators. 9. Combined Generators To increase the period, improve the statistical properties, and perhaps try to get rid of the lattice structure, different kinds of combined generators have been proposed. See <ref> [12, 41, 44, 49, 55, 60, 63, 64, 91, 97, 98] </ref> and other references given there. The structure of the hybrid generator thus obtained is often not well understood. Then, as pointed out by Ripley [83], using such generators may be a bit like playing ostrich.
Reference: [13] <author> A. Compagner, </author> <title> The Hierarchy of Correlations in Random Binary Sequences, </title> <journal> Journal of Statistical Physics 63 (1991) 883-896. </journal>
Reference-contexts: However, recurrences based on polynomials with few non-zero coefficients have important statistical defects <ref> [13, 59, 65, 66] </ref>. One way of getting around this problem is to combine two or more trinomial-based generators. Some classes of combined generators are in fact just efficient ways of implementing a recurrence whose characteristic polynomial has a large degree and many non-zero coefficients. <p> Combination can conceivably worsen things. Nevertheless, empirical results strongly support combination [60, 50]. Most of the fast and simple generators (e.g., Tausworthe or MRGs based on primitive trinomials) happen to have statistical defects <ref> [13, 50, 59, 65] </ref>. Combining such fast generators could yield an efficient generator with much better statistical properties. Recently some combined generators have been analyzed successfully and turn out to be equivalent, or approximately equivalent, to MLCGs with large (non-prime) moduli or to Tausworthe generators with large-degree (reducible) characteristic polynomials. <p> In other words, this combination approach can be viewed as an efficient way of implementing Tausworthe generators with "good" characteristic polynomials. Compagner <ref> [13] </ref> and Wang and Compagner [97] also suggest the same kind of combination, and give supporting arguments. They show that the correlation structure of AM-sequences behaves very nicely in general.
Reference: [14] <author> R. Couture, P. L'Ecuyer, and S. Tezuka, </author> <title> On the Distribution of k-Dimensional Vectors for Simple and Combined Tausworthe Sequences, </title> <note> Mathematics of Computation 60 (1993) To appear. </note>
Reference-contexts: So, we have just recovered the digital multistep sequence by following a different development. This alternative view was first suggested by Tezuka and turns out to be quite useful for analyzing some of the structural properties of the sequence when m is small (e.g., m = 2) <ref> [14, 89, 90, 91] </ref>. The Tausworthe, MRG, and MLCG generators are special cases of this. In [91], for m = 2, the generator defined by (10-11) is called an LS2 generator. 11 3.6. <p> When T t is replaced by the set of non-overlapping t-tuples, L t does not form a lattice in general [1]. The AWC/SWB generators described in x3.9 are equivalent to linear congruential generators, and therefore have a lattice structure. In <ref> [14, 93] </ref>, it is shown that this structure is always bad: in all dimensions t &gt; k, one has d t 1= p 3. It is also shown that combining an AWC/SWB generator with a LCG still yield an unfavorable lattice structure in large dimensions. <p> Then, it can be shown <ref> [14] </ref> that B is a basis for ~ L t , and it is called a reduced basis. <p> Define ` j = log m k ~ V j k and for each integer ` &gt; 0, let d (`) = j=1 Now, assume that (8) has full period ae = m k 1. For the case where P (z) is irreducible, Couture, L'Ecuyer, and Tezuka <ref> [14] </ref> have shown that in the (t; `)-equidissection in base m, m kd (`) cells contain m d (`) points of P t each, while m t` m kd (`) cells contain no point of P t . <p> Therefore, P t is (t; `)-equidistributed if and only if d (`) = k t`. (The proofs in <ref> [14] </ref> are given for m = 2, but their generalization to any prime m is straightforward.) If one considers only the main cycle of the generator, i.e., discards the zero formal series (as done in [14]), then the cell with one corner at the origin contains one point less. <p> is (t; `)-equidistributed if and only if d (`) = k t`. (The proofs in <ref> [14] </ref> are given for m = 2, but their generalization to any prime m is straightforward.) If one considers only the main cycle of the generator, i.e., discards the zero formal series (as done in [14]), then the cell with one corner at the origin contains one point less. <p> So, ` t and ` 1 ` t act as respective analogues of the distance d t between hyperplanes and the Beyer quotient q t defined in x5.1. For the case where P (z) is reducible with J factors, Couture, L'Ecuyer, and Tezuka <ref> [14] </ref> have obtained general results giving a precise description of how the points of P t are distributed into the cells of the (t; `)-equidissection. <p> They show how to construct bases for those lattices. From that, generators can be found which are "approximately" (t; ` t )- equidistributed <ref> [14] </ref>. 22 As we saw in x3.7, there is an equivalence between Tausworthe generators and GFSR generators with appropriate parameters and initial states. Therefore, the lattice structure of such GFSR generators can be analyzed in the same way as for Tausworthe generators. <p> As shown in [91, 97], the combined generator is equivalent to a Taus-worthe generator with (reducible) characteristic polynomial P (z) = P 1 (z) P J (z). The lattice structure and equidistribution properties of such combined generators are analyzed in <ref> [14, 91] </ref>. Tezuka and L'Ecuyer [91] suggest three specific combined generators, and give computer codes. TGFSRs can also be combined in a similar way and this is the subject of ongoing research.
Reference: [15] <author> R. Couture and P. L'Ecuyer, </author> <title> On the Lattice Structure of Certain Linear Congruential Sequences Related to AWC/SWB Generators, </title> <journal> Mathematics of Computation, </journal> <note> To appear. </note>
Reference-contexts: L'Ecuyer [48] gives examples of such implementations and explains how to do it in general. Other efficient ways of implementing MLCGs with large moduli are through the AWC and SWB generators discussed in x3.9. However, the latter generators always have a bad structure and must be avoided <ref> [15, 93] </ref>. 7.4. RETURNING VECTORS OF RANDOM NUMBERS James [41] observes that for fast generators, when the generator (procedure) returns one random number per call, the procedure call itself accounts for a large part of the time for generating the random number. <p> This is perhaps an interesting "scrambling" heuristic, but little theoretical analysis is available for such combinations. In [63, 64], he and his co-workers propose two specific combined generators of that sort. However, the generator of [63] has an important defect; as shown in <ref> [15] </ref>, it has a lattice structure with distance d t between hyperplanes of at least 1= p 10. Nonlinear Generators Linear generators tend to have a too regular structure, and for that reason, many believe that the way to go is nonlinear [28, 29, 76, 77].
Reference: [16] <author> J. Dagpunar, </author> <title> Principles of Random Variate Generation, </title> <publisher> Oxford University Press, </publisher> <year> 1988. </year>
Reference: [17] <author> J. W. Dalle Molle, M. J. Hinich, and D. J. Morrice, </author> <title> Higher-Order Cumulant Spectral Based Statistical Tests of Pseudo Random Variate Generators, </title> <booktitle> Proceedings of the 1992 Winter Simulation Conference, </booktitle> <publisher> IEEE Press (1992) 618-625. </publisher>
Reference-contexts: Marsaglia argued that for such classes of applications, simple generators (e.g., LCG, Tausworthe, GFSR, etc.) were not good enough, and advocated combined generators. Other statistical tests for random number generators are proposed or discussed in <ref> [17, 31, 43, 50, 66, 68, 87] </ref> and the references given there. For many interesting statistical tests, the theoretical distribution of the associated statistic is unfortunately unknown, at least in practically usable form [50, 60].
Reference: [18] <author> A. De Matteis and S. Pagnutti, </author> <title> Parallelization of Random Number Generators and Long-Range Correlations, </title> <note> Numerische Mathematik 53 (1988) 595-608. </note>
Reference-contexts: Another important reason is that for small p, the low order bits do not look random at all. For p = 2 and k = 1, the i-th least significant bit of x n has period equal to max (1; 2 i2 ) <ref> [10, 18] </ref>. If the period of such a generator is split into 2 d equal segments, then all segments are identical except for their d most significant bits [18, 21]. <p> If the period of such a generator is split into 2 d equal segments, then all segments are identical except for their d most significant bits <ref> [18, 21] </ref>. For i = 2 ed2 &gt; 0, all points (x n ; x n+i ) lie on at most max (2; 2 d1 ) parallel lines [18]. <p> For i = 2 ed2 &gt; 0, all points (x n ; x n+i ) lie on at most max (2; 2 d1 ) parallel lines <ref> [18] </ref>. For k &gt; 1 (still with p = 2), the maximal period for the d-th least significant bit is (2 k 1)2 d1 . 4.3. <p> For example, if m = 2 e , the period of the i-th least significant bit of x n is at most 2 i and the pairs (x n ; x n+i ), for i = 2 ed , lie in at most max (2; 2 d1 ) parallel lines <ref> [18] </ref>. One can also add a constant term c to the MRG recurrence (5) or a constant matrix C to the matrix MLCG (13). <p> Extremely bad correlations occur, for example, when and the modulus m are both powers of two. This is why Durst [21] prefers random seeds. For further discussion on this and related topics, see <ref> [18, 21, 26, 49] </ref>. Niederreiter [76, 77] proposes different classes of nonlinear vector generators for use on parallel processors. Those generators appear interesting (at least theoretically), although specific (well tested) parameter values and efficient implementations are not given.
Reference: [19] <author> L. Devroye, </author> <title> Non-Uniform Random Variate Generation, </title> <publisher> Springer-Verlag, </publisher> <address> New York (1986). </address>
Reference-contexts: Modelers and programmers normally assume that random variables from different probability distributions, like normal, exponential, Bernouilli, Poisson, and so on, are available. The methods that have been designed to generate those random variables (see, e.g., Bratley, Fox, and Schrage [10], Devroye <ref> [19] </ref>, or Law and Kelton [47]) assume in turn the availability of a source of i.i.d. U (0; 1), i.e., continuous random variables distributed uniformly over the real interval (0; 1), or sometimes discrete random variables distributed uniformly over some finite set of integers (like, e.g., random bits).
Reference: [20] <author> E. J. Dudewicz and T. G. Ralley, </author> <title> The Handbook of Random Number Generation and Testing with TESTRAND Computer Code, </title> <publisher> American Sciences Press, </publisher> <address> Columbus, Ohio (1981). </address>
Reference-contexts: So, seeking PT-perfect generators for simulation might be too demanding and we are back to a weaker definition of "reasonable statistical test". Current practice sets up standard batteries of tests and apply them to the generators <ref> [20, 48, 50, 60] </ref>. Ideally, the tests should be selected in relation with the target application. But this is not always (easily) feasible, especially for "general purpose" generators which are to be provided in software packages or libraries. The question of statistical testing is further discussed in x11. 2.2.
Reference: [21] <author> M. J. Durst, </author> <title> Using linear congruential generators for parallel random number generation, </title> <booktitle> Proceedings of the 1989 Winter Simulation Conference, </booktitle> <publisher> IEEE Press (1989) 462-466. </publisher> <pages> 38 </pages>
Reference-contexts: random number generator might be insignificant in some cases [41], but (i) this will usually not be the case if the generator is slow or requires a lot of memory and (ii) there are cases where the time and space used by even the most efficient generators cannot be neglected <ref> [21, 43, 84] </ref>. Memory frugality becomes especially important when many "virtual" generators (i.e., many substreams) are maintained in parallel on a single computer (see x8). 2.5. REPEATABILITY, PORTABILITY, JUMPING AHEAD, AND EASE OF IMPLE MENTATION A generator must be easy to implement efficiently in a standard high-level language. <p> If the period of such a generator is split into 2 d equal segments, then all segments are identical except for their d most significant bits <ref> [18, 21] </ref>. For i = 2 ed2 &gt; 0, all points (x n ; x n+i ) lie on at most max (2; 2 d1 ) parallel lines [18]. <p> This tends to support approach (iii). Finding millions of good generators is not really a problem for some classes of generators like the LCG or MRG <ref> [21, 51] </ref>, but not necessarily for all classes of generators. For example, for the two-component 32-bit combined Tausworthe generators proposed in [91], there is a limited number of good parameter sets. <p> For the case of linear generators, the matrix approach (13) can be viewed as a way of formulating (iii). But in terms of speed, it is generally better to implement the corresponding MRG and run many copies of it in parallel. Durst <ref> [21] </ref> suggests using (iii) with random seeds. Another approach is to select (deterministically) individual seeds that are far apart in the basic sequence. <p> The major concern is that of long range correlations, e.g., between X n and X n+ , X n and X n+2 , and so on. Extremely bad correlations occur, for example, when and the modulus m are both powers of two. This is why Durst <ref> [21] </ref> prefers random seeds. For further discussion on this and related topics, see [18, 21, 26, 49]. Niederreiter [76, 77] proposes different classes of nonlinear vector generators for use on parallel processors. <p> Extremely bad correlations occur, for example, when and the modulus m are both powers of two. This is why Durst [21] prefers random seeds. For further discussion on this and related topics, see <ref> [18, 21, 26, 49] </ref>. Niederreiter [76, 77] proposes different classes of nonlinear vector generators for use on parallel processors. Those generators appear interesting (at least theoretically), although specific (well tested) parameter values and efficient implementations are not given.
Reference: [22] <author> J. Eichenauer and J. Lehn, </author> <title> A Nonlinear Congruential Pseudorandom Number Genera--tor, </title> <address> Statistische Hefte 27 (1986) 315-326. </address>
Reference-contexts: It has been shown [76, 77] that for 2 t k, D (t) m 2 O (km 1=2 (log m) t ). For k close to m, this is the right order of magnitude. 10.2. INVERSIVE CONGRUENTIAL GENERATORS Eichenauer et al. <ref> [22, 24, 25] </ref> introduced a class of nonlinear inversive generators which can be defined as the application of a supplementary step when transforming the x n produced by an MRG into a value between 0 and 1 (and skipping the x n 's which are zero). <p> Both methods to compute the inverse take time in O (log m) and have similar performance in practice. They are rather slow when implemented in software, which might make the generator unacceptably slow for certain applications. Fast hardware implementations are possible, though <ref> [22] </ref>. For prime m, the maximal possible period for fz n g is m k1 . Sufficient conditions for it to be attained are given in [24, 28, 77]. Maximal period generators are easy to find.
Reference: [23] <author> J. Eichenauer and J. Lehn, </author> <title> On the Structure of Quadratic Congruential Sequences, </title> <journal> Manuscripta Math. </journal> <month> 58 </month> <year> (1987) </year> <month> 129-140. </month>
Reference-contexts: The points produced by that generator turn out to lie on a union of grids, which can be determined explicitly <ref> [23] </ref>. Bounds on D (t) m are given in [77]. 10.4. OTHER NONLINEAR GENERATORS Some nonlinear generators have also been proposed by people from the field of cryptology [8, 54, 85]. Blum, Blum, and Shub [8] proposed the following class, known as BBS generators.
Reference: [24] <author> J. Eichenauer, H. Grothe, J. Lehn, and A. Topuzoglu, </author> <title> A Multiple Recursive Nonlinear Congruential Pseudorandom Number Generator, </title> <journal> Manuscripta Math. </journal> <month> 59 </month> <year> (1987) </year> <month> 331-346. </month>
Reference-contexts: It has been shown [76, 77] that for 2 t k, D (t) m 2 O (km 1=2 (log m) t ). For k close to m, this is the right order of magnitude. 10.2. INVERSIVE CONGRUENTIAL GENERATORS Eichenauer et al. <ref> [22, 24, 25] </ref> introduced a class of nonlinear inversive generators which can be defined as the application of a supplementary step when transforming the x n produced by an MRG into a value between 0 and 1 (and skipping the x n 's which are zero). <p> Fast hardware implementations are possible, though [22]. For prime m, the maximal possible period for fz n g is m k1 . Sufficient conditions for it to be attained are given in <ref> [24, 28, 77] </ref>. Maximal period generators are easy to find. A nice property of inversive congruential generators with prime moduli is that their discrepancy is in the same order of magnitude as that of truly random numbers [28, 77].
Reference: [25] <author> J. Eichenauer, J. Lehn, and A. Topuzoglu, </author> <title> A Nonlinear Congruential Pseudorandom Number Generator with Power of Two Modulus, </title> <journal> Math. </journal> <note> of Computation 51, 184 (1988) 757-759. </note>
Reference-contexts: It has been shown [76, 77] that for 2 t k, D (t) m 2 O (km 1=2 (log m) t ). For k close to m, this is the right order of magnitude. 10.2. INVERSIVE CONGRUENTIAL GENERATORS Eichenauer et al. <ref> [22, 24, 25] </ref> introduced a class of nonlinear inversive generators which can be defined as the application of a supplementary step when transforming the x n produced by an MRG into a value between 0 and 1 (and skipping the x n 's which are zero). <p> Niederreiter [76, 78] also shows that every hyperplane in IR t contains at most t points from the set fu 0 ; : : : ; u m1 g, and obtains discrepancy bounds. Inversive congruential generators with power-of-two moduli have also been studied <ref> [25, 28, 29] </ref>. For these generators, non-trivial upper bounds on the discrepancy are available only in dimension 2. Further, the generated points have some regular structures [28]. Therefore, prime moduli appear preferable. Inversive congruential generators have been the subject of many papers in the last five years or so.
Reference: [26] <author> J. Eichenauer-Herrmann, </author> <title> A Remark on Long-Range Correlations in Multiplicative Con-gruential Pseudo Random Number Generators, </title> <note> Numerische Mathematik 56 (1989) 609-611. </note>
Reference-contexts: Extremely bad correlations occur, for example, when and the modulus m are both powers of two. This is why Durst [21] prefers random seeds. For further discussion on this and related topics, see <ref> [18, 21, 26, 49] </ref>. Niederreiter [76, 77] proposes different classes of nonlinear vector generators for use on parallel processors. Those generators appear interesting (at least theoretically), although specific (well tested) parameter values and efficient implementations are not given.
Reference: [27] <author> J. Eichenauer-Herrmann, </author> <title> Statistical Independence of a New Class of Inversive Congru-ential Pseudorandom Numbers, </title> <note> Mathematics of Computation 60 (1993) 375-384. </note>
Reference-contexts: In that case, a sufficient condition for maximal period is that P (z) = z 2 a 1 z a 2 is a primitive polynomial over IF m . 32 A slightly different variant is the explicit inversive congruential method, introduced by Eichenauer-Herrmann <ref> [27] </ref>. Here, x n = an + c, for n 0, where a 6= 0 and c are in ZZ m , z n = x 1 n = (an + c) m2 mod m, and u n = z n =m.
Reference: [28] <author> J. Eichenauer-Herrmann, </author> <title> Inversive Congruential Pseudorandom Numbers: a Tutorial, </title> <note> International Statistical Reviews 60 (1992) 167-176. </note>
Reference-contexts: Nonlinear Generators Linear generators tend to have a too regular structure, and for that reason, many believe that the way to go is nonlinear <ref> [28, 29, 76, 77] </ref>. <p> Fast hardware implementations are possible, though [22]. For prime m, the maximal possible period for fz n g is m k1 . Sufficient conditions for it to be attained are given in <ref> [24, 28, 77] </ref>. Maximal period generators are easy to find. A nice property of inversive congruential generators with prime moduli is that their discrepancy is in the same order of magnitude as that of truly random numbers [28, 77]. <p> Sufficient conditions for it to be attained are given in [24, 28, 77]. Maximal period generators are easy to find. A nice property of inversive congruential generators with prime moduli is that their discrepancy is in the same order of magnitude as that of truly random numbers <ref> [28, 77] </ref>. For k = 2 or 3, one can also write a recursion directly for z n . For k = 2, it is z n = (a 1 + a 2 z 1 a 1 if z n1 = 0. <p> Niederreiter [76, 78] also shows that every hyperplane in IR t contains at most t points from the set fu 0 ; : : : ; u m1 g, and obtains discrepancy bounds. Inversive congruential generators with power-of-two moduli have also been studied <ref> [25, 28, 29] </ref>. For these generators, non-trivial upper bounds on the discrepancy are available only in dimension 2. Further, the generated points have some regular structures [28]. Therefore, prime moduli appear preferable. Inversive congruential generators have been the subject of many papers in the last five years or so. <p> Inversive congruential generators with power-of-two moduli have also been studied [25, 28, 29]. For these generators, non-trivial upper bounds on the discrepancy are available only in dimension 2. Further, the generated points have some regular structures <ref> [28] </ref>. Therefore, prime moduli appear preferable. Inversive congruential generators have been the subject of many papers in the last five years or so. Eichenauer-Herrmann [28] gives a survey, as well as a few suggested parameters. These generators would perhaps deserve a more extensive coverage than what is done here. <p> For these generators, non-trivial upper bounds on the discrepancy are available only in dimension 2. Further, the generated points have some regular structures <ref> [28] </ref>. Therefore, prime moduli appear preferable. Inversive congruential generators have been the subject of many papers in the last five years or so. Eichenauer-Herrmann [28] gives a survey, as well as a few suggested parameters. These generators would perhaps deserve a more extensive coverage than what is done here. The present coverage reflects the relative lack of practical experience of the author with their use. They certainly deserve further investigation. 10.3.
Reference: [29] <author> J. Eichenauer-Herrmann and H. Grothe, </author> <title> A New Inversive Congruential Pseudorandom Number Generator with Power of Two Modulus, </title> <booktitle> ACM Transactions of Modeling and Computer Simulation 2, </booktitle> <month> 1 </month> <year> (1992) </year> <month> 1-11. </month>
Reference-contexts: Nonlinear Generators Linear generators tend to have a too regular structure, and for that reason, many believe that the way to go is nonlinear <ref> [28, 29, 76, 77] </ref>. <p> Niederreiter [76, 78] also shows that every hyperplane in IR t contains at most t points from the set fu 0 ; : : : ; u m1 g, and obtains discrepancy bounds. Inversive congruential generators with power-of-two moduli have also been studied <ref> [25, 28, 29] </ref>. For these generators, non-trivial upper bounds on the discrepancy are available only in dimension 2. Further, the generated points have some regular structures [28]. Therefore, prime moduli appear preferable. Inversive congruential generators have been the subject of many papers in the last five years or so.
Reference: [30] <author> J. Eichenauer-Herrmann, H. Grothe, and J. Lehn, </author> <title> On the Period Length of Pseudorandom Vector Sequences Generated by Matrix Generators, </title> <journal> Math. </journal> <note> of Computation 52, 185 (1989) 145-148. </note>
Reference-contexts: For m = p e , p prime and e 1, the upper bound is (p k 1)p e1 , except for p = 2 and k = 1, where it is 2 e2 <ref> [30, 44] </ref>. Eichenauer-Herrmann, Grothe, and Lehn [30] show how to construct generators whose period reach that upper bound. For p = 2 and k = 1, see [44]. <p> For m = p e , p prime and e 1, the upper bound is (p k 1)p e1 , except for p = 2 and k = 1, where it is 2 e2 [30, 44]. Eichenauer-Herrmann, Grothe, and Lehn <ref> [30] </ref> show how to construct generators whose period reach that upper bound. For p = 2 and k = 1, see [44]. The case p = 2 is interesting in terms of efficiency, because the modulo operation can be implemented by just "chopping-off" the higher-order bits.
Reference: [31] <author> E. D. Erdmann, </author> <title> Empirical Tests of Binary Keystreams. </title> <type> Master's thesis, </type> <institution> Department of Mathematics, Royal Holloway and Bedford New College, University of London, </institution> <year> 1992. </year>
Reference-contexts: Marsaglia argued that for such classes of applications, simple generators (e.g., LCG, Tausworthe, GFSR, etc.) were not good enough, and advocated combined generators. Other statistical tests for random number generators are proposed or discussed in <ref> [17, 31, 43, 50, 66, 68, 87] </ref> and the references given there. For many interesting statistical tests, the theoretical distribution of the associated statistic is unfortunately unknown, at least in practically usable form [50, 60].
Reference: [32] <author> A. M. Ferrenberg, D. P. Landau, and Y. J. Wong, </author> <title> Monte Carlo Simulations: Hidden Errors from "Good" Random Number Generators, </title> <journal> Physical Review Letters 69, </journal> <month> 23 </month> <year> (1992) </year> <month> 3382-3384. </month>
Reference-contexts: It is also shown that combining an AWC/SWB generator with a LCG still yield an unfavorable lattice structure in large dimensions. That could explain the statistical anomalies observed empirically in <ref> [32, 50] </ref>. 5.2. EQUIDISTRIBUTION WITH FINITE RESOLUTION AND LATTICE STRUC TURE IN THE SPACE OF FORMAL SERIES Tausworthe and GFSR generators also have a lattice structure, which stems from the fact that they can be expressed as MLCGs over a space of formal series (see Equation (10)).
Reference: [33] <author> G. S. Fishman and L. S. Moore III, </author> <title> An Exhaustive Analysis of Multiplicative Congru-ential Random Number Generators with Modulus 2 31 1, </title> <journal> SIAM J. on Scientific and Statistical Computing 7, </journal> <month> 1 </month> <year> (1986) </year> <month> 24-45. </month>
Reference-contexts: (3) becomes x n = ax n1 mod m: (4) If G : ZZ m ! [0; 1] is defined by G (x) = x=m, this gives the classical multiplicative linear congruential generator (MLCG), which has been deeply analyzed, scrutinized, and often criticized, over the past 30 years or so <ref> [10, 33, 34, 44, 49, 77, 81] </ref>. Despite well founded critics, this kind of generator is still largely used in practice [10, 47]. One can also use (4) with a non-prime modulus m. Then, ZZ m is not a field, but we still call the generator a MLCG. <p> If m is prime, the period is m 1 if and only if the multiplier a is a primitive root modulo m and x 0 6= 0. Specific moduli and multipliers are analyzed in <ref> [33, 34, 43, 44, 48, 79] </ref>. 3.3. THE MULTIPLE RECURSIVE GENERATOR Let k 1 and m prime. Again, identify IF m with ZZ m . <p> Fishman and Moore <ref> [33] </ref> recommend G3. G7 is proposed by Matsumoto and Kurita [66], while G8 is proposed by Marsaglia and Zaman [62] and further recommended by James [41]. The results were that besides G5, G6, and G9, all other generators failed spectacularly at least one of the tests.
Reference: [34] <author> G. S. Fishman, </author> <title> Multiplicative Congruential Random Number Generators with Modulus 2 fi : An Exhaustive Analysis for fi = 32 and a Partial Analysis for fi = 48, </title> <booktitle> Mathematics of Computation 54, </booktitle> <month> 189 (Jan </month> <year> 1990) </year> <month> 331-344. </month>
Reference-contexts: (3) becomes x n = ax n1 mod m: (4) If G : ZZ m ! [0; 1] is defined by G (x) = x=m, this gives the classical multiplicative linear congruential generator (MLCG), which has been deeply analyzed, scrutinized, and often criticized, over the past 30 years or so <ref> [10, 33, 34, 44, 49, 77, 81] </ref>. Despite well founded critics, this kind of generator is still largely used in practice [10, 47]. One can also use (4) with a non-prime modulus m. Then, ZZ m is not a field, but we still call the generator a MLCG. <p> If m is prime, the period is m 1 if and only if the multiplier a is a primitive root modulo m and x 0 6= 0. Specific moduli and multipliers are analyzed in <ref> [33, 34, 43, 44, 48, 79] </ref>. 3.3. THE MULTIPLE RECURSIVE GENERATOR Let k 1 and m prime. Again, identify IF m with ZZ m . <p> A grid in IR t is a shifted lattice, i.e., a set of the form V 0 + L where V 0 2 IR t and L is a lattice. One should then analyze the appropriate sublattice or subgrid instead of analyzing L t (see also <ref> [34, 44] </ref>). One important example is an MLCG for which m is a power of two, a mod 8 = 5, and x 0 is odd.
Reference: [35] <author> M. Fushimi, </author> <title> An Equivalence Relation between Tausworthe and GFSR Sequences and Applications, </title> <journal> Applied Math. </journal> <note> Letters 2, 2 (1989) 135-137. 39 </note>
Reference-contexts: This approach is from Fushimi <ref> [35] </ref>. Tootill, Robinson, and Eagle [96] first suggested the GFSR implementation of Tausworthe sequences. Observe that a GFSR generator (with parallel MRG implementation) can also be viewed as a "bigger" MLCG as follows. <p> Fushimi <ref> [35] </ref> gives a nice initialization procedure for GFSR generators to satisfy that condition, based on the use of an equivalent Tausworthe generator. Besides being slow and cumbersome, the GFSR initialization procedures previously available merely insured (1; L)-equidistribution.
Reference: [36] <author> M. Fushimi and S. Tezuka, </author> <title> The k-Distribution of Generalized Feedback Shift Register Pseudorandom Numbers, </title> <journal> Communications of the ACM 26, </journal> <month> 7 </month> <year> (1983) </year> <month> 516-523. </month>
Reference-contexts: LAGGED-FIBONACCI AND GFSR GENERATORS An important special case of the digital matrix MLCG is when m = 2 and the generator is implemented using (14): this gives the well know Generalized Feedback Shift Register (GFSR) generator <ref> [36, 57, 77] </ref>. In that case, in (14), each X n is a vector of bits and is obtained by making a bitwise exclusive-or of the X nj 's for which a j 6= 0. <p> If the initial state is badly chosen, one might not even have (1; 2)-equidistribution: for example, just take d 1 = d 2 = 0. Fushimi and Tezuka <ref> [36] </ref> gave a necessary and sufficient condition on the initial state for the GFSR generator to be (t; L)- equidistributed for t = bk=Lc.
Reference: [37] <author> H. Grothe, </author> <title> Matrix Generators for Pseudo-Random Vectors Generation, </title> <journal> Statist. </journal> <note> Hefte 28 (1987) 233-238. </note>
Reference-contexts: Consider the recurrence X n = AX n1 ; (13) where each X n is a k-dimensional column vector of elements of IF m and the arithmetic is in IF m . Then, it can be shown (see <ref> [37, 38, 71, 77] </ref>) that fX n g follows the recurrence X n = a 1 X n1 + : : : + a k X nk : (14) In other words, each component of the vector X n evolves according to (3), which means that we just have k copies <p> This kind of matrix generator has been studied by Grothe <ref> [37, 38] </ref> and A*erbach and Grothe [3]. We call it the matrix MLCG. It may prove useful for implementing parallel generators on parallel processors.
Reference: [38] <author> H. Grothe, </author> <title> Matrixgeneratoren zur Erzeugung gleichverteilter Pseudozufallsvektoren (in german), </title> <type> Dissertation (thesis), Tech. </type> <institution> Hochschule Darmstadt, Germany, </institution> <year> 1988. </year>
Reference-contexts: This kind of higher-order linear congruential generator is known as a multiple recursive generator (MRG) <ref> [38, 49, 51, 77] </ref>. The special case where k = 1 gives the usual MLCG with prime modulus. For k &gt; 1, for P (z) to be primitive, it is necessary that a k and at least another a j be non-zero. <p> Consider the recurrence X n = AX n1 ; (13) where each X n is a k-dimensional column vector of elements of IF m and the arithmetic is in IF m . Then, it can be shown (see <ref> [37, 38, 71, 77] </ref>) that fX n g follows the recurrence X n = a 1 X n1 + : : : + a k X nk : (14) In other words, each component of the vector X n evolves according to (3), which means that we just have k copies <p> This kind of matrix generator has been studied by Grothe <ref> [37, 38] </ref> and A*erbach and Grothe [3]. We call it the matrix MLCG. It may prove useful for implementing parallel generators on parallel processors. <p> All of these reasons argue against the use of power of two moduli. 5. Lattice Structure 5.1. THE LATTICE STRUCTURE OF MRG'S IN IR t It is well known that the vectors of successive values produced by a MLCG or MRG, in any given dimension, have a lattice structure <ref> [38, 44, 49, 81] </ref>. More precisely, consider the MRG (5). <p> The lattice L t is usually t-dimensional (otherwise, all the points of T t are contained in one hyperplane). A basis for L t , as well as for its dual lattice, can be constructed as explained in [44] for k = 1 and in <ref> [38, 53] </ref> for k 1. <p> However, q t is much more costly to compute than d t . An algorithm to compute a MRLB and the Beyer quotient is given in A*erbach and Grothe [2]. See also <ref> [38, 53] </ref>. L'Ecuyer, Blouin, and Couture [51] suggest specific MRGs, after a search based on the criterion Q 20 , for orders k up to 7 and prime moduli up to near 2 63 . <p> The matrix MLCG, which uses all the components of X n at each iteration, has a similar lattice structure and can be analyzed in a similar way <ref> [3, 38] </ref>. When the MLCG is not multiplicative, the lattice is shifted by a constant vector, becoming a grid. The structure can be analyzed in the same way, since it does not really depend on the additive constant except for shifting.
Reference: [39] <author> J. R. Heringa, H. W. J. Blote, and A. Compagner, </author> <title> New Primitive Trinomials of Mersenne-Exponent Degrees for Random-Number Generation, </title> <journal> International Journal of Modern Physics C 3, </journal> <month> 3 </month> <year> (1992) </year> <month> 561-564. </month>
Reference-contexts: Lists of primitive polynomials over IF 2 can be found in <ref> [39, 46, 58] </ref> and the references given there. 4.2. COMPOSITE MODULUS When m is not prime, the maximal possible period for the linear recurring sequence (5) typically falls way short of m k 1.
Reference: [40] <author> D. C. Hoaglin and M. L. King, </author> <title> A Remark on Algorithm AS 98: The Spectral Test for the Evaluation of Congruential Pseudo-random Generators, </title> <booktitle> Applied Statistics 27 (1978) 375-377. </booktitle>
Reference-contexts: One important example is an MLCG for which m is a power of two, a mod 8 = 5, and x 0 is odd. In that case, as observed by Hoaglin and King <ref> [40] </ref> and Atkinson [7], the t-dimensional vectors of successive values form a subgrid of L t containing one-fourth of the points. Another important case is when m is a product of J distinct primes m = m 1 m J (see [55] and x9).
Reference: [41] <author> F. James, </author> <title> A review of pseudorandom number generators, </title> <journal> Computer Physics Communications, </journal> <month> 60 </month> <year> (1990) </year> <month> 329-344. </month>
Reference-contexts: One of my favorite exercises for students when I teach a simulation course is to have them test a bad generator recently proposed in a journal or available on a popular computer. For more on bad generators, see <ref> [41, 50, 79, 83] </ref>. As Ripley [84] said: "Random number generation seems to be one of the most misunderstood subjects in computer science". On the surface, it looks easy and attractive. <p> The question of empirical statistical testing is treated in x11. 2. What is a Good generator ? We summarize in this section the major requirements for a good random number generator, for general purpose simulation. These requirements are also discussed in <ref> [10, 41, 79, 84] </ref>, and we do not always share the views of all these authors. 2.1. <p> EFFICIENCY Despite the dramatic increases in computing power, speed and memory usage are still major concerns regarding generators. The time and memory space used by the random number generator might be insignificant in some cases <ref> [41] </ref>, but (i) this will usually not be the case if the generator is slow or requires a lot of memory and (ii) there are cases where the time and space used by even the most efficient generators cannot be neglected [21, 43, 84]. <p> Being able to reproduce the same sequence of random numbers on a given computer (called repeatability) is important for program verification and for variance reduction purposes [10, 47, 84]. Reproducing the same sequence on different computers is also important, for example for program verification across computers <ref> [41] </ref>. Repeatability is a major advantage of pseudorandom sequences with respect to sequences generated by physical devices. Of course, for the latter, one could store an extremely long sequence on a large disk or tape, and reuse it as needed thereafter. <p> Other efficient ways of implementing MLCGs with large moduli are through the AWC and SWB generators discussed in x3.9. However, the latter generators always have a bad structure and must be avoided [15, 93]. 7.4. RETURNING VECTORS OF RANDOM NUMBERS James <ref> [41] </ref> observes that for fast generators, when the generator (procedure) returns one random number per call, the procedure call itself accounts for a large part of the time for generating the random number. He then recommends that each procedure call returns a vector of random numbers. <p> Similar packages could also be implemented rather easily using other (perhaps longer-period) generators. 9. Combined Generators To increase the period, improve the statistical properties, and perhaps try to get rid of the lattice structure, different kinds of combined generators have been proposed. See <ref> [12, 41, 44, 49, 55, 60, 63, 64, 91, 97, 98] </ref> and other references given there. The structure of the hybrid generator thus obtained is often not well understood. Then, as pointed out by Ripley [83], using such generators may be a bit like playing ostrich. <p> Fishman and Moore [33] recommend G3. G7 is proposed by Matsumoto and Kurita [66], while G8 is proposed by Marsaglia and Zaman [62] and further recommended by James <ref> [41] </ref>. The results were that besides G5, G6, and G9, all other generators failed spectacularly at least one of the tests. Moreover, each of G1 to G4 failed spectacularly at least 6 tests out of 10.
Reference: [42] <author> R. Kannan, A. K. Lenstra, and L. Lovasz, </author> <title> Polynomial Factorization and Nonrandomness of Bits of Algebraic and Some Transcendental Numbers, </title> <journal> Math. of Computation, </journal> <volume> 50, </volume> <month> 181 </month> <year> (1988) </year> <month> 235-250. </month>
Reference-contexts: For cryptology, most available generators are dangerous because there are efficient ways of predicting the next value, given the sequence of values already produced by the generator <ref> [9, 42, 45] </ref>. 1.2. BAD AND DANGEROUS GENERATORS There is a well developed body of theory concerning the construction and analysis of (pseudo)random number generators. Good introductory references and survey papers include [6, 10, 16, 41, 44, 47, 49, 50, 75, 76, 77, 82]. <p> Binary (or m-ary) expansions of algebraic numbers (roots of polynomials with integral coefficients) or of some transcendental numbers (including ) do not define PT-perfect generators either. Kannan et al. <ref> [42] </ref> give efficient algorithms to compute further digits given a long enough initial segment of the expansion. So, seeking PT-perfect generators for simulation might be too demanding and we are back to a weaker definition of "reasonable statistical test".
Reference: [43] <author> Z. A. Karian and E. J. Dudewicz, </author> <title> Modern Statistical, Systems, and GPSS Simulation: The First Course, </title> <publisher> Computer Science Press, Freeman, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: random number generator might be insignificant in some cases [41], but (i) this will usually not be the case if the generator is slow or requires a lot of memory and (ii) there are cases where the time and space used by even the most efficient generators cannot be neglected <ref> [21, 43, 84] </ref>. Memory frugality becomes especially important when many "virtual" generators (i.e., many substreams) are maintained in parallel on a single computer (see x8). 2.5. REPEATABILITY, PORTABILITY, JUMPING AHEAD, AND EASE OF IMPLE MENTATION A generator must be easy to implement efficiently in a standard high-level language. <p> If m is prime, the period is m 1 if and only if the multiplier a is a primitive root modulo m and x 0 6= 0. Specific moduli and multipliers are analyzed in <ref> [33, 34, 43, 44, 48, 79] </ref>. 3.3. THE MULTIPLE RECURSIVE GENERATOR Let k 1 and m prime. Again, identify IF m with ZZ m . <p> Marsaglia argued that for such classes of applications, simple generators (e.g., LCG, Tausworthe, GFSR, etc.) were not good enough, and advocated combined generators. Other statistical tests for random number generators are proposed or discussed in <ref> [17, 31, 43, 50, 66, 68, 87] </ref> and the references given there. For many interesting statistical tests, the theoretical distribution of the associated statistic is unfortunately unknown, at least in practically usable form [50, 60]. <p> Tausworthe and GFSR generators with good equidistribution properties are likely to fail such tests (see [89]). Other examples of tests that certain classes of generators are bound to fail are given in [59, 67]. Results of extensive statistical tests can also be found in <ref> [43, 48, 60] </ref>. In [43], the authors have applied a battery of tests to 35 generators proposed in the literature, and recommend three generators on the basis of their speed and their performance in those tests. <p> Tausworthe and GFSR generators with good equidistribution properties are likely to fail such tests (see [89]). Other examples of tests that certain classes of generators are bound to fail are given in [59, 67]. Results of extensive statistical tests can also be found in [43, 48, 60]. In <ref> [43] </ref>, the authors have applied a battery of tests to 35 generators proposed in the literature, and recommend three generators on the basis of their speed and their performance in those tests.
Reference: [44] <author> D. E. Knuth, </author> <booktitle> The Art of Computer Programming : Seminumerical Algorithms, </booktitle> <volume> vol. 2, </volume> <booktitle> second edition. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1981. </year>
Reference-contexts: This is probably why so many new generators are proposed by people from so many different fields (mathematics, computer science, physics, electrical engineering, management science, etc.). But building good generators is not so easy and requires a good understanding of the theory. As Knuth <ref> [44, page 5] </ref> said: "Random numbers should not be generated with a method chosen at random". 1.3. A DEFINITION OF A GENERATOR Today's practical random number generators are computer programs which produce a deterministic, periodic sequence of numbers. The following definition is a slight variation from L'Ecuyer [49]. DEFINITION 1. <p> But what does the word "behave" mean exactly here, and how can we verify whether the sequence behaves satisfactorily ? Various definitions of "random" sequence are given in Knuth <ref> [44] </ref>. These definitions apply to infinite, non-periodic, sequences, whereas the practical generators produce periodic sequences. From a pragmatic point of view, we can say that the generator should pass statistical tests for uniformity and independence. But after more careful thinking, we find out that this is a meaningless requirement. <p> (3) becomes x n = ax n1 mod m: (4) If G : ZZ m ! [0; 1] is defined by G (x) = x=m, this gives the classical multiplicative linear congruential generator (MLCG), which has been deeply analyzed, scrutinized, and often criticized, over the past 30 years or so <ref> [10, 33, 34, 44, 49, 77, 81] </ref>. Despite well founded critics, this kind of generator is still largely used in practice [10, 47]. One can also use (4) with a non-prime modulus m. Then, ZZ m is not a field, but we still call the generator a MLCG. <p> If m is prime, the period is m 1 if and only if the multiplier a is a primitive root modulo m and x 0 6= 0. Specific moduli and multipliers are analyzed in <ref> [33, 34, 43, 44, 48, 79] </ref>. 3.3. THE MULTIPLE RECURSIVE GENERATOR Let k 1 and m prime. Again, identify IF m with ZZ m . <p> This was introduced by Tausworthe [88] and is known as a Tausworthe generator <ref> [44, 77, 90, 91] </ref>. (Sometimes, the Tausworthe generator is defined slightly differently, by filling up the bits of u n from the least significant to the most significant one, instead of from most to least significant as in (7). See [88, 90]. <p> If the GFSR has period m k 1 for k &gt; 1, that cannot be implemented in the form of (13). A "generalization" of the GFSR is the so-called lagged-Fibonacci generator, for which can be replaced by any arithmetic or logical operation. One example is the additive generator <ref> [44] </ref>, given by X n = (X nr + X nk ) mod m; where m = 2 L . This is a special case of the MRG, but with a power-of-two modulus. <p> So, a first step in building a generator based on such a sequence is to find an appropriate primitive polynomial. How can we do that ? The following are necessary and sufficient conditions for P (z) to be primitive over IF m (see Knuth <ref> [44] </ref>). <p> = (m k 1)(1 1=q 1 ) (1 1=q h )=k vectors (a 1 ; : : : ; a k ) 2 IF k m that satisfy the conditions, where q 1 ; : : : ; q h are the distinct prime factors of m k 1 (see <ref> [44] </ref>). <p> For m = p e , p prime and e 1, the upper bound is (p k 1)p e1 , except for p = 2 and k = 1, where it is 2 e2 <ref> [30, 44] </ref>. Eichenauer-Herrmann, Grothe, and Lehn [30] show how to construct generators whose period reach that upper bound. For p = 2 and k = 1, see [44]. <p> Eichenauer-Herrmann, Grothe, and Lehn [30] show how to construct generators whose period reach that upper bound. For p = 2 and k = 1, see <ref> [44] </ref>. The case p = 2 is interesting in terms of efficiency, because the modulo operation can be implemented by just "chopping-off" the higher-order bits. However, it is costly in terms of period length. <p> NON-MULTIPLICATIVE LCG'S The MLCG is usually presented in the slightly more general form: x n = (ax n1 + c) mod m; (24) where c is a constant. Adding such a constant permits one to reach a period length of m. Conditions for that are given in Knuth <ref> [44] </ref>. If m is prime, this has no real interest. Indeed, this just increases the maximal period by one, and otherwise gives no further significant improvement [44]. However, if m is not prime, e.g., if it is a power of two, then this more general form really becomes attractive. <p> Adding such a constant permits one to reach a period length of m. Conditions for that are given in Knuth <ref> [44] </ref>. If m is prime, this has no real interest. Indeed, this just increases the maximal period by one, and otherwise gives no further significant improvement [44]. However, if m is not prime, e.g., if it is a power of two, then this more general form really becomes attractive. But it also has many drawbacks. <p> All of these reasons argue against the use of power of two moduli. 5. Lattice Structure 5.1. THE LATTICE STRUCTURE OF MRG'S IN IR t It is well known that the vectors of successive values produced by a MLCG or MRG, in any given dimension, have a lattice structure <ref> [38, 44, 49, 81] </ref>. More precisely, consider the MRG (5). <p> The lattice L t is usually t-dimensional (otherwise, all the points of T t are contained in one hyperplane). A basis for L t , as well as for its dual lattice, can be constructed as explained in <ref> [44] </ref> for k = 1 and in [38, 53] for k 1. <p> A grid in IR t is a shifted lattice, i.e., a set of the form V 0 + L where V 0 2 IR t and L is a lattice. One should then analyze the appropriate sublattice or subgrid instead of analyzing L t (see also <ref> [34, 44] </ref>). One important example is an MLCG for which m is a power of two, a mod 8 = 5, and x 0 is odd. <p> It is evident that (t; `)-equidistribution implies (t 0 ; ` 0 )-equidistribution for all t 0 t and ` 0 `. Furthermore, (t; `)-equidistribution in base m is equivalent to (t; 1)-equidistribution in base m ` . Knuth <ref> [44, p.144] </ref> has a related definition: when the latter holds, he says that the m ` -ary sequence is t-distributed. <p> U (0; 1) random variables). There are other "statistical measures" which we did not discuss here and which can be computed exactly (or bounds for them can be computed) for specific classes of generators. That includes computing bounds on the serial correlation <ref> [44] </ref>, computing the results of the "run" test applied over the whole sequence of a Tausworthe generator [95], computing the nearest pair of points over the whole period, or the minimal number of hyperplanes that cover all the points, etc.. See [44] for further details. 7. <p> That includes computing bounds on the serial correlation <ref> [44] </ref>, computing the results of the "run" test applied over the whole sequence of a Tausworthe generator [95], computing the nearest pair of points over the whole period, or the minimal number of hyperplanes that cover all the points, etc.. See [44] for further details. 7. Implementation and Efficiency Considerations 7.1. LINEAR CONGRUENTIAL AND MRG GENERATORS Implementing (5) in a portable way, in high level language, for a large prime modulus m, is tricky in general because of the possible overflow in the products. <p> Similar packages could also be implemented rather easily using other (perhaps longer-period) generators. 9. Combined Generators To increase the period, improve the statistical properties, and perhaps try to get rid of the lattice structure, different kinds of combined generators have been proposed. See <ref> [12, 41, 44, 49, 55, 60, 63, 64, 91, 97, 98] </ref> and other references given there. The structure of the hybrid generator thus obtained is often not well understood. Then, as pointed out by Ripley [83], using such generators may be a bit like playing ostrich. <p> The inverse ~x 1 n can be computed via a version of Euclid's algorithm <ref> [44] </ref> or via ~x 1 n = x m2 n mod m. Both methods to compute the inverse take time in O (log m) and have similar performance in practice. They are rather slow when implemented in software, which might make the generator unacceptably slow for certain applications. <p> They certainly deserve further investigation. 10.3. QUADRATIC CONGRUENTIAL GENERATORS A special case which has received some attention is the quadratic case, for which f in (32) has the quadratic form f (x) = ax 2 + bx + c, with a; b; c 2 ZZ m <ref> [44, 77] </ref>. If m is a power of two, then the generator has full period (ae = m) if and only if a is even, (b a) mod 4 = 1, and c is odd [44]. <p> If m is a power of two, then the generator has full period (ae = m) if and only if a is even, (b a) mod 4 = 1, and c is odd <ref> [44] </ref>. The points produced by that generator turn out to lie on a union of grids, which can be determined explicitly [23]. Bounds on D (t) m are given in [77]. 10.4. <p> On the other hand, uniformity tests over disjoint shorter subsequences will give terribly bad adjustments. So, one-level tests are not always appropriate, and two-level tests seem to offer a good compromise. 11.2. STANDARD AND MORE STRINGENT TESTS Knuth <ref> [44] </ref> describes a set of tests which have been considered for a while as "the standard tests" for testing random number generators.
Reference: [45] <author> H. Krawczyk, </author> <title> How to Predict Congruential Generators, </title> <booktitle> in Lecture Notes in Computer Science 435; Advances in Cryptology: Proceedings of Crypto'89 , G. </booktitle> <editor> Brassard, Ed., </editor> <publisher> Springer-Verlag, </publisher> <address> Berlin (1990) 138-153. </address>
Reference-contexts: For cryptology, most available generators are dangerous because there are efficient ways of predicting the next value, given the sequence of values already produced by the generator <ref> [9, 42, 45] </ref>. 1.2. BAD AND DANGEROUS GENERATORS There is a well developed body of theory concerning the construction and analysis of (pseudo)random number generators. Good introductory references and survey papers include [6, 10, 16, 41, 44, 47, 49, 50, 75, 76, 77, 82]. <p> However, they are still too slow for practical simulation use. The generators mostly used in simulation (linear congruential, multiple recursive, GFSR, : : : ) are known not to be PT-perfect. "Efficient" algorithms have been designed to infer their sequence by looking at the first few numbers <ref> [9, 45] </ref>. But in practice, they remain quite useful for simulation, mainly because of their speed. When their parameters are well chosen and only a small fraction of their period is used, they show good statistical behavior with respect to most reasonable empirical tests. <p> But even this is not easy to achieve with efficient generators. If the generator is a MLCG, for example, there exist efficient algorithms which can find out the modulus and multiplier only from the output values, and guess the next values <ref> [9, 45] </ref>. From that, it is easy to design a test that the MLCG will fail. Perhaps asking a generator to pass all such tests is asking too much ? Well, that depends on the application.
Reference: [46] <author> Y. Kurita and M. Matsumoto, </author> <title> Primitive t-nomials (t = 3; 5) over GF (2) whose Degree is a Mersenne Exponent 44497, </title> <booktitle> Mathematics of Computation 56, </booktitle> <month> 194 </month> <year> (1991) </year> <month> 817-821. </month>
Reference-contexts: Lists of primitive polynomials over IF 2 can be found in <ref> [39, 46, 58] </ref> and the references given there. 4.2. COMPOSITE MODULUS When m is not prime, the maximal possible period for the linear recurring sequence (5) typically falls way short of m k 1.
Reference: [47] <author> A. M. Law and W. D. </author> <title> Kelton, Simulation Modeling and Analysis, Second edition, </title> <publisher> McGraw-Hill (1991). </publisher>
Reference-contexts: Modelers and programmers normally assume that random variables from different probability distributions, like normal, exponential, Bernouilli, Poisson, and so on, are available. The methods that have been designed to generate those random variables (see, e.g., Bratley, Fox, and Schrage [10], Devroye [19], or Law and Kelton <ref> [47] </ref>) assume in turn the availability of a source of i.i.d. U (0; 1), i.e., continuous random variables distributed uniformly over the real interval (0; 1), or sometimes discrete random variables distributed uniformly over some finite set of integers (like, e.g., random bits). <p> Being able to reproduce the same sequence of random numbers on a given computer (called repeatability) is important for program verification and for variance reduction purposes <ref> [10, 47, 84] </ref>. Reproducing the same sequence on different computers is also important, for example for program verification across computers [41]. Repeatability is a major advantage of pseudorandom sequences with respect to sequences generated by physical devices. <p> Despite well founded critics, this kind of generator is still largely used in practice <ref> [10, 47] </ref>. One can also use (4) with a non-prime modulus m. Then, ZZ m is not a field, but we still call the generator a MLCG. For example, m can be a large power of two. <p> G9. MRG with m = 2 31 1, k = 5 and a 1 = 107374182; a 5 = 104480; a 2 = a 3 = a 4 = 0 Generators G1 and G2 are used in various software packages <ref> [10, 47] </ref> and recommended by some authors [79, 47]. Fishman and Moore [33] recommend G3. G7 is proposed by Matsumoto and Kurita [66], while G8 is proposed by Marsaglia and Zaman [62] and further recommended by James [41]. <p> G9. MRG with m = 2 31 1, k = 5 and a 1 = 107374182; a 5 = 104480; a 2 = a 3 = a 4 = 0 Generators G1 and G2 are used in various software packages [10, 47] and recommended by some authors <ref> [79, 47] </ref>. Fishman and Moore [33] recommend G3. G7 is proposed by Matsumoto and Kurita [66], while G8 is proposed by Marsaglia and Zaman [62] and further recommended by James [41].
Reference: [48] <author> P. L'Ecuyer, </author> <title> Efficient and Portable Combined Random Number Generators. </title> <journal> Communications of the ACM 31, </journal> <note> 6 (1988) 742-749 and 774. See also the correspondence in the same journal, 32, 8 (1989) 1019-1024. </note>
Reference-contexts: So, seeking PT-perfect generators for simulation might be too demanding and we are back to a weaker definition of "reasonable statistical test". Current practice sets up standard batteries of tests and apply them to the generators <ref> [20, 48, 50, 60] </ref>. Ideally, the tests should be selected in relation with the target application. But this is not always (easily) feasible, especially for "general purpose" generators which are to be provided in software packages or libraries. The question of statistical testing is further discussed in x11. 2.2. <p> If m is prime, the period is m 1 if and only if the multiplier a is a primitive root modulo m and x 0 6= 0. Specific moduli and multipliers are analyzed in <ref> [33, 34, 43, 44, 48, 79] </ref>. 3.3. THE MULTIPLE RECURSIVE GENERATOR Let k 1 and m prime. Again, identify IF m with ZZ m . <p> If m is representable as a standard integer on the target computer, there is a reasonably efficient and portable 25 way of computing ax mod m for 0 &lt; x &lt; m provided that a (m mod a) &lt; m: (29) See <ref> [10, 48, 49, 79] </ref> for the details. In fact, all the multipliers a satisfying this condition turn out to be of the form a = i or a = bm=ic for i &lt; p m. <p> For small a, another approach which is often faster is to perform the computations in double-precision floating-point <ref> [48] </ref>. Techniques for computing ax mod m in a high-level language for the more general case are studied by L'Ecuyer and Cote [52], who also give portable codes. A portable implementation of an MRG based on a characteristic trinomial with coefficients satisfying (29) is given in [51]. <p> Such combined generators are also recommended and studied in Wang and Compagner [97]. In a similar way, some MLCGs with very large moduli can be implemented efficiently via the combination of easily implementable MLCGs with small moduli. See x9 for further details. L'Ecuyer <ref> [48] </ref> gives examples of such implementations and explains how to do it in general. Other efficient ways of implementing MLCGs with large moduli are through the AWC and SWB generators discussed in x3.9. However, the latter generators always have a bad structure and must be avoided [15, 93]. 7.4. <p> Even when many good parameter sets are available, implementation considerations must be taken into account when selecting a generator. Often, the implementation of the selected generator is artfully crafted for speed and portability and some constants depending on the selected parameters must be precomputed for that purpose <ref> [48, 51, 91] </ref>. This tends to support approach (iii). Finding millions of good generators is not really a problem for some classes of generators like the LCG or MRG [21, 51], but not necessarily for all classes of generators. <p> Those generators appear interesting (at least theoretically), although specific (well tested) parameter values and efficient implementations are not given. L'Ecuyer and Cote [52] have developed a random number package with two-level (imbedded) splitting facilities. It is based on the combined generator proposed in L'Ecuyer <ref> [48] </ref>. It provides for multiple generators running simultaneously, and each generator has its sequence of numbers partitioned into many long disjoint substreams. Simple procedure calls allow the user to make any generator jump ahead or backwards over those substreams. <p> Other classes of combined generators (like shu*ing) are not (yet) well understood theoretically. See L'Ecuyer [49] and the references given there. We will now discuss two classes of combined generators which have been recently analyzed. L'Ecuyer <ref> [48] </ref> proposed a combination method for MLCGs with distinct prime moduli 29 m 1 ; : : : ; m J . If x jn denotes the state of generator j at step n, define the combination: Z n = @ j=1 1 for some fixed integers ffi j . <p> If x jn denotes the state of generator j at step n, define the combination: Z n = @ j=1 1 for some fixed integers ffi j . In <ref> [48] </ref>, ffi j = (1) j1 and a specific generator are suggested. <p> Numerical and graphical illustrations are given in [55]. These combinations methods can also be generalized to the combination of MRGs with distinct prime moduli. For the generator of L'Ecuyer <ref> [48] </ref>, the lattice approximation is quite good in dimensions t 3. As shown in [55], components with bad lattice structure can give rise to good combined generators, and the reverse is also true. <p> As shown in [55], components with bad lattice structure can give rise to good combined generators, and the reverse is also true. Therefore, the selection of a combined generator should not be made just by selecting components with good lattice structure, as was done in <ref> [48] </ref>, but by analyzing the lattice structure of the combined generator itself. Based on that criterion, better combined generators than the one proposed in [48] can be found [55]. Press and Teukolsky [80] propose a generator which adds a shu*e to the combined generator of [48]. <p> Therefore, the selection of a combined generator should not be made just by selecting components with good lattice structure, as was done in <ref> [48] </ref>, but by analyzing the lattice structure of the combined generator itself. Based on that criterion, better combined generators than the one proposed in [48] can be found [55]. Press and Teukolsky [80] propose a generator which adds a shu*e to the combined generator of [48]. That destroys the lattice structure. Tezuka and L'Ecuyer [91] combine Tausworthe generators as follows. <p> structure, as was done in <ref> [48] </ref>, but by analyzing the lattice structure of the combined generator itself. Based on that criterion, better combined generators than the one proposed in [48] can be found [55]. Press and Teukolsky [80] propose a generator which adds a shu*e to the combined generator of [48]. That destroys the lattice structure. Tezuka and L'Ecuyer [91] combine Tausworthe generators as follows. <p> G2. MLCG with m = 2 31 1 and a = 630360016. G3. MLCG with m = 2 31 1 and a = 742938285. G4. CSD generator of Sherif and Dear [86]. G5. Combined generator in Fig. 3 of L'Ecuyer <ref> [48] </ref>. G6. Combined Tausworthe generator G1 of Tezuka and L'Ecuyer [91]. G7. Twisted GFSR with (r; s; p) = (25; 7; 32). G8. Subtract-with-borrow generator with (b; r; s; L) = (2 32 5; 43; 22; 1). G9. <p> Tausworthe and GFSR generators with good equidistribution properties are likely to fail such tests (see [89]). Other examples of tests that certain classes of generators are bound to fail are given in [59, 67]. Results of extensive statistical tests can also be found in <ref> [43, 48, 60] </ref>. In [43], the authors have applied a battery of tests to 35 generators proposed in the literature, and recommend three generators on the basis of their speed and their performance in those tests.
Reference: [49] <author> P. L'Ecuyer, </author> <title> Random Numbers for Simulation, </title> <journal> Communications of the ACM 33, </journal> <month> 10 </month> <year> (1990) </year> <month> 85-97. </month>
Reference-contexts: This is not very practical for computer simulation, especially when millions of random numbers are required, as is often the case. Using truly random numbers for simulation and other Monte Carlo methods has been tried for a while, a few decades ago, but practically abandoned for various reasons <ref> [10, 49] </ref>. On modern computers, pseudorandom numbers are generated by completely deterministic algorithms. We want these numbers to look, from the outside, as if they where truly random. <p> As Knuth [44, page 5] said: "Random numbers should not be generated with a method chosen at random". 1.3. A DEFINITION OF A GENERATOR Today's practical random number generators are computer programs which produce a deterministic, periodic sequence of numbers. The following definition is a slight variation from L'Ecuyer <ref> [49] </ref>. DEFINITION 1. <p> So, by taking k large enough, one has a safe generator which would pass all the statistical tests that can be run in reasonable time. For further details on these notions, see <ref> [8, 49, 54] </ref> and the references given there. The idea of PT-perfect generators was introduced by cryptologists, for which "unpredictability" is a crucial property. All of this looks nice, but the bad news are that no generator (family) has been proven PT-perfect to date. <p> (3) becomes x n = ax n1 mod m: (4) If G : ZZ m ! [0; 1] is defined by G (x) = x=m, this gives the classical multiplicative linear congruential generator (MLCG), which has been deeply analyzed, scrutinized, and often criticized, over the past 30 years or so <ref> [10, 33, 34, 44, 49, 77, 81] </ref>. Despite well founded critics, this kind of generator is still largely used in practice [10, 47]. One can also use (4) with a non-prime modulus m. Then, ZZ m is not a field, but we still call the generator a MLCG. <p> This kind of higher-order linear congruential generator is known as a multiple recursive generator (MRG) <ref> [38, 49, 51, 77] </ref>. The special case where k = 1 gives the usual MLCG with prime modulus. For k &gt; 1, for P (z) to be primitive, it is necessary that a k and at least another a j be non-zero. <p> One can also add a constant term c to the MRG recurrence (5) or a constant matrix C to the matrix MLCG (13). However, it can be shown <ref> [49] </ref> that any k-th order recurrence with such a constant term is equivalent to some (k + 1)-th order MRG with no constant term. Therefore, a general upper bound on the period length if m = p e is (p k+1 1)p e1 . <p> All of these reasons argue against the use of power of two moduli. 5. Lattice Structure 5.1. THE LATTICE STRUCTURE OF MRG'S IN IR t It is well known that the vectors of successive values produced by a MLCG or MRG, in any given dimension, have a lattice structure <ref> [38, 44, 49, 81] </ref>. More precisely, consider the MRG (5). <p> See also [38, 53]. L'Ecuyer, Blouin, and Couture [51] suggest specific MRGs, after a search based on the criterion Q 20 , for orders k up to 7 and prime moduli up to near 2 63 . As observed by L'Ecuyer <ref> [49] </ref>, comparing Beyer quotients makes sense only for generators having the same number of lattice points in the unit hypercube. A full period MRG has m k such points, i.e., unit cells of volume m k , in all dimensions. <p> If m is representable as a standard integer on the target computer, there is a reasonably efficient and portable 25 way of computing ax mod m for 0 &lt; x &lt; m provided that a (m mod a) &lt; m: (29) See <ref> [10, 48, 49, 79] </ref> for the details. In fact, all the multipliers a satisfying this condition turn out to be of the form a = i or a = bm=ic for i &lt; p m. <p> If X n is the current seed, then X n+ , for very large , can be computed directly as X n+ = (A mod m)X n mod m: The matrix A mod m can be precomputed efficiently by a standard divide-to-conquer al-gorithm <ref> [49] </ref>. At first sight, splitting looks safer than generating seeds randomly. But one should be careful: it is a mined ground. The major concern is that of long range correlations, e.g., between X n and X n+ , X n and X n+2 , and so on. <p> Extremely bad correlations occur, for example, when and the modulus m are both powers of two. This is why Durst [21] prefers random seeds. For further discussion on this and related topics, see <ref> [18, 21, 26, 49] </ref>. Niederreiter [76, 77] proposes different classes of nonlinear vector generators for use on parallel processors. Those generators appear interesting (at least theoretically), although specific (well tested) parameter values and efficient implementations are not given. <p> Similar packages could also be implemented rather easily using other (perhaps longer-period) generators. 9. Combined Generators To increase the period, improve the statistical properties, and perhaps try to get rid of the lattice structure, different kinds of combined generators have been proposed. See <ref> [12, 41, 44, 49, 55, 60, 63, 64, 91, 97, 98] </ref> and other references given there. The structure of the hybrid generator thus obtained is often not well understood. Then, as pointed out by Ripley [83], using such generators may be a bit like playing ostrich. <p> Then, as pointed out by Ripley [83], using such generators may be a bit like playing ostrich. Theoretical results in [60, 11] appear to support the view (at first glance) that combined generators should have better statistical behavior in general than their individual components. However, as explained in <ref> [49] </ref>, applying those theoretical results to "deterministic" generators is a somewhat shaky reasoning. Combination can conceivably worsen things. Nevertheless, empirical results strongly support combination [60, 50]. Most of the fast and simple generators (e.g., Tausworthe or MRGs based on primitive trinomials) happen to have statistical defects [13, 50, 59, 65]. <p> Recently some combined generators have been analyzed successfully and turn out to be equivalent, or approximately equivalent, to MLCGs with large (non-prime) moduli or to Tausworthe generators with large-degree (reducible) characteristic polynomials. Other classes of combined generators (like shu*ing) are not (yet) well understood theoretically. See L'Ecuyer <ref> [49] </ref> and the references given there. We will now discuss two classes of combined generators which have been recently analyzed. L'Ecuyer [48] proposed a combination method for MLCGs with distinct prime moduli 29 m 1 ; : : : ; m J . <p> is a bit slower because it requires more divisions: U n = @ j=1 1 If each individual MLCG has full period m j 1, then the period of the latter is always equal to the least common multiple of m 1 1; : : : ; m J 1 <ref> [49] </ref>. In practice, if the m j 's are distinct primes slightly smaller than 2 31 and if the multipliers satisfy (29), then the generator is easy to implement on a 32-bit computer and can reach a very large period.
Reference: [50] <author> P. L'Ecuyer, </author> <title> Testing Random Number Generators, </title> <booktitle> Proceedings of the 1992 Winter Sim--ulation Conference, </booktitle> <publisher> IEEE Press (1992), </publisher> <pages> 305-313. </pages>
Reference-contexts: For example, for applications dealing with the geometrical behavior of random vectors in high dimensions, many generators must be avoided because of the bad geometrical structure of the vectors of successive points that they produce <ref> [50] </ref>. For cryptology, most available generators are dangerous because there are efficient ways of predicting the next value, given the sequence of values already produced by the generator [9, 42, 45]. 1.2. <p> One of my favorite exercises for students when I teach a simulation course is to have them test a bad generator recently proposed in a journal or available on a popular computer. For more on bad generators, see <ref> [41, 50, 79, 83] </ref>. As Ripley [84] said: "Random number generation seems to be one of the most misunderstood subjects in computer science". On the surface, it looks easy and attractive. <p> So, seeking PT-perfect generators for simulation might be too demanding and we are back to a weaker definition of "reasonable statistical test". Current practice sets up standard batteries of tests and apply them to the generators <ref> [20, 48, 50, 60] </ref>. Ideally, the tests should be selected in relation with the target application. But this is not always (easily) feasible, especially for "general purpose" generators which are to be provided in software packages or libraries. The question of statistical testing is further discussed in x11. 2.2. <p> It is also shown that combining an AWC/SWB generator with a LCG still yield an unfavorable lattice structure in large dimensions. That could explain the statistical anomalies observed empirically in <ref> [32, 50] </ref>. 5.2. EQUIDISTRIBUTION WITH FINITE RESOLUTION AND LATTICE STRUC TURE IN THE SPACE OF FORMAL SERIES Tausworthe and GFSR generators also have a lattice structure, which stems from the fact that they can be expressed as MLCGs over a space of formal series (see Equation (10)). <p> However, as explained in [49], applying those theoretical results to "deterministic" generators is a somewhat shaky reasoning. Combination can conceivably worsen things. Nevertheless, empirical results strongly support combination <ref> [60, 50] </ref>. Most of the fast and simple generators (e.g., Tausworthe or MRGs based on primitive trinomials) happen to have statistical defects [13, 50, 59, 65]. Combining such fast generators could yield an efficient generator with much better statistical properties. <p> Combination can conceivably worsen things. Nevertheless, empirical results strongly support combination [60, 50]. Most of the fast and simple generators (e.g., Tausworthe or MRGs based on primitive trinomials) happen to have statistical defects <ref> [13, 50, 59, 65] </ref>. Combining such fast generators could yield an efficient generator with much better statistical properties. Recently some combined generators have been analyzed successfully and turn out to be equivalent, or approximately equivalent, to MLCGs with large (non-prime) moduli or to Tausworthe generators with large-degree (reducible) characteristic polynomials. <p> Marsaglia argued that for such classes of applications, simple generators (e.g., LCG, Tausworthe, GFSR, etc.) were not good enough, and advocated combined generators. Other statistical tests for random number generators are proposed or discussed in <ref> [17, 31, 43, 50, 66, 68, 87] </ref> and the references given there. For many interesting statistical tests, the theoretical distribution of the associated statistic is unfortunately unknown, at least in practically usable form [50, 60]. <p> Other statistical tests for random number generators are proposed or discussed in [17, 31, 43, 50, 66, 68, 87] and the references given there. For many interesting statistical tests, the theoretical distribution of the associated statistic is unfortunately unknown, at least in practically usable form <ref> [50, 60] </ref>. In such situations, Marsaglia [60] suggests comparing the empirical distribution of a generator to be tested with that of a "good" generator. <p> In practice, though, estimating the theoretical distribution with many different types of (supposedly good) random number generators could be a reasonable (heuristic) compromise. If the results agree, it will certainly improve our confidence that this is the right distribution. 11.3. EXAMPLES OF TESTS RESULTS L'Ecuyer <ref> [50] </ref> has applied 10 (two-level) statistical tests to 8 popular or recently proposed random number generators. The tests included the poker test, the runs-up test, the birthday spacings test, OPSO (with four different sets of parameters), and the nearest pair test (in dimensions 4, 6, and 9). See [50] for more <p> RESULTS L'Ecuyer <ref> [50] </ref> has applied 10 (two-level) statistical tests to 8 popular or recently proposed random number generators. The tests included the poker test, the runs-up test, the birthday spacings test, OPSO (with four different sets of parameters), and the nearest pair test (in dimensions 4, 6, and 9). See [50] for more details. The generators were the first 8 listed in Table 1. <p> Two of those generators are LCGs with modulus 2 32 , while the third one is a combined generator. The two recommended LCGs would certainly fail some of the 10 tests applied in <ref> [50] </ref>, for the reasons explained above. 11.4. WHICH TESTS ARE THE GOOD ONES ? Statistical tests are far from being clean-cut testing tools. Because any generator has finite period, almost any good test, if run long enough, will eventually detect regularity and reject the generator.
Reference: [51] <author> P. L'Ecuyer, F. Blouin, and R. Couture, </author> <title> A Search for Good Multiple Recursive Random Number Generators, </title> <booktitle> ACM Transactions on Modeling and Computer Simulation 3, </booktitle> <month> 2 </month> <year> (1993) </year> <month> 87-98. </month>
Reference-contexts: This kind of higher-order linear congruential generator is known as a multiple recursive generator (MRG) <ref> [38, 49, 51, 77] </ref>. The special case where k = 1 gives the usual MLCG with prime modulus. For k &gt; 1, for P (z) to be primitive, it is necessary that a k and at least another a j be non-zero. <p> For that reason, and since testing primality is much easier than factoring, it is a good idea to choose m and k such that r is prime. For that, k must be odd. L'Ecuyer, Blouin, and Couture <ref> [51] </ref> discuss that topic and give some useful factorizations and primitive polynomials, for m near 2 31 , 2 47 , and 2 63 . Given m, k, and the factorizations of m 1 and r, it is relatively easy to find primitive polynomials simply by random search. <p> However, q t is much more costly to compute than d t . An algorithm to compute a MRLB and the Beyer quotient is given in A*erbach and Grothe [2]. See also [38, 53]. L'Ecuyer, Blouin, and Couture <ref> [51] </ref> suggest specific MRGs, after a search based on the criterion Q 20 , for orders k up to 7 and prime moduli up to near 2 63 . <p> Techniques for computing ax mod m in a high-level language for the more general case are studied by L'Ecuyer and Cote [52], who also give portable codes. A portable implementation of an MRG based on a characteristic trinomial with coefficients satisfying (29) is given in <ref> [51] </ref>. If m = 2 e where e is the number of bits on the computer word, and if one can use unsigned integers without overflow checking, the products modulo m are easy to compute: just discard the overflow. <p> Even when many good parameter sets are available, implementation considerations must be taken into account when selecting a generator. Often, the implementation of the selected generator is artfully crafted for speed and portability and some constants depending on the selected parameters must be precomputed for that purpose <ref> [48, 51, 91] </ref>. This tends to support approach (iii). Finding millions of good generators is not really a problem for some classes of generators like the LCG or MRG [21, 51], but not necessarily for all classes of generators. <p> This tends to support approach (iii). Finding millions of good generators is not really a problem for some classes of generators like the LCG or MRG <ref> [21, 51] </ref>, but not necessarily for all classes of generators. For example, for the two-component 32-bit combined Tausworthe generators proposed in [91], there is a limited number of good parameter sets. <p> The generators were the first 8 listed in Table 1. The author also applied the same tests to the MRG defined by 35 x n = (107374182x n1 + 104480x n5 ) mod m; u n = x n =m, with m = 2 31 1, taken from <ref> [51] </ref> (G9 in the table). Table 1: The generators tested. G1. MLCG with m = 2 31 1 and a = 16807. G2. MLCG with m = 2 31 1 and a = 630360016. G3. MLCG with m = 2 31 1 and a = 742938285. G4.
Reference: [52] <author> P. L'Ecuyer and S. Cote, </author> <title> Implementing A random number package with splitting facilities, </title> <journal> ACM Trans. on Math. </journal> <note> Software 17 (1991) 98-111. </note>
Reference-contexts: Further, in many simulation applications, the generator's sequence is "split" into a large number of (disjoint) substreams, which should behave themselves as virtual generators (see <ref> [10, 52] </ref> and x8). Then, the period must be orders of magnitude longer. Families of fast-speed low-memory generators, with period lengths well over 2 200 , have been proposed and analyzed recently and will be discussed in this paper. 6 2.4. <p> For small a, another approach which is often faster is to perform the computations in double-precision floating-point [48]. Techniques for computing ax mod m in a high-level language for the more general case are studied by L'Ecuyer and Cote <ref> [52] </ref>, who also give portable codes. A portable implementation of an MRG based on a characteristic trinomial with coefficients satisfying (29) is given in [51]. <p> in parallel: (a) To perform a simulation on parallel processors, where each processor must generate its own random number stream [6]; (b) To assign different random number streams to different components of the model, for example to implement some variance reduction techniques, when performing a simulation on a single processor <ref> [10, 52] </ref>. Of course, these two situations can also be combined. <p> Typically, those seeds are evenly spaced and split the period of the generator into disjoint pieces, called sub-streams, long enough so that none of them could be exhausted in reasonable time. This is called splitting <ref> [52] </ref>. To generate the (far apart) seeds, for the case of a linear generator, just use the matrix formulation of the generator, with matrix multiplier A and modulus m. <p> Niederreiter [76, 77] proposes different classes of nonlinear vector generators for use on parallel processors. Those generators appear interesting (at least theoretically), although specific (well tested) parameter values and efficient implementations are not given. L'Ecuyer and Cote <ref> [52] </ref> have developed a random number package with two-level (imbedded) splitting facilities. It is based on the combined generator proposed in L'Ecuyer [48]. It provides for multiple generators running simultaneously, and each generator has its sequence of numbers partitioned into many long disjoint substreams.
Reference: [53] <author> P. L'Ecuyer and R. Couture, </author> <title> An Implementation of the Lattice and Spectral Tests for Linear Congruential and Multiple Recursive Generators, </title> <note> In preparation. </note>
Reference-contexts: The lattice L t is usually t-dimensional (otherwise, all the points of T t are contained in one hyperplane). A basis for L t , as well as for its dual lattice, can be constructed as explained in [44] for k = 1 and in <ref> [38, 53] </ref> for k 1. <p> The shorter the distance d t between those hyperplanes, the better, because this means thinner empty (without points) slices of space. Computer programs now exist for computing d t in reasonably large dimensions, up to around 40 or more <ref> [53] </ref>. A slightly different way of measuring the "quality" of the lattice is by the Beyer quotient, defined as follows. <p> However, q t is much more costly to compute than d t . An algorithm to compute a MRLB and the Beyer quotient is given in A*erbach and Grothe [2]. See also <ref> [38, 53] </ref>. L'Ecuyer, Blouin, and Couture [51] suggest specific MRGs, after a search based on the criterion Q 20 , for orders k up to 7 and prime moduli up to near 2 63 .
Reference: [54] <author> P. L'Ecuyer and R. Proulx, </author> <title> About Polynomial-Time "Unpredictable" Generators. </title> <booktitle> Proceedings of the 1989 Winter Simulation Conference, </booktitle> <publisher> IEEE Press (1989) 467-476. </publisher>
Reference-contexts: In other words, we might feel happy if the generator passes all (or almost all) the tests which can be run in "reasonable" time. This can be made more precise by using the ideas of computational complexity. The following definition is from L'Ecuyer and Proulx <ref> [54] </ref>. Consider a family fG k ; k 1g of generators, where k represents the size (e.g., the number of bits to represent the state). <p> So, by taking k large enough, one has a safe generator which would pass all the statistical tests that can be run in reasonable time. For further details on these notions, see <ref> [8, 49, 54] </ref> and the references given there. The idea of PT-perfect generators was introduced by cryptologists, for which "unpredictability" is a crucial property. All of this looks nice, but the bad news are that no generator (family) has been proven PT-perfect to date. <p> The points produced by that generator turn out to lie on a union of grids, which can be determined explicitly [23]. Bounds on D (t) m are given in [77]. 10.4. OTHER NONLINEAR GENERATORS Some nonlinear generators have also been proposed by people from the field of cryptology <ref> [8, 54, 85] </ref>. Blum, Blum, and Shub [8] proposed the following class, known as BBS generators. Let m = pq be a Blum integer , i.e., such that p; q are two distinct primes both congruent to 3 modulo 4. <p> This means that for large enough k, the generator should behave very nicely from a statistical point of view. See <ref> [8, 54] </ref> for further details. However, L'Ecuyer and Proulx [54] show that a software implementation of the BBS generator is much too slow for practical use in simulation applications. More efficient generators with the same kind of polynomial-time statistical "perfectness" have been proposed recently [85]. <p> This means that for large enough k, the generator should behave very nicely from a statistical point of view. See [8, 54] for further details. However, L'Ecuyer and Proulx <ref> [54] </ref> show that a software implementation of the BBS generator is much too slow for practical use in simulation applications. More efficient generators with the same kind of polynomial-time statistical "perfectness" have been proposed recently [85]. Further investigation is required 33 before assessing their practical competitivity for simulation. 11.
Reference: [55] <author> P. L'Ecuyer and S. Tezuka, </author> <title> Structural Properties for Two Classes of Combined Random Number Generators, </title> <booktitle> Mathematics of Computation 57, </booktitle> <month> 196 </month> <year> (1991) </year> <month> 735-746. </month>
Reference-contexts: Another important case is when m is a product of J distinct primes m = m 1 m J (see <ref> [55] </ref> and x9). <p> Similar packages could also be implemented rather easily using other (perhaps longer-period) generators. 9. Combined Generators To increase the period, improve the statistical properties, and perhaps try to get rid of the lattice structure, different kinds of combined generators have been proposed. See <ref> [12, 41, 44, 49, 55, 60, 63, 64, 91, 97, 98] </ref> and other references given there. The structure of the hybrid generator thus obtained is often not well understood. Then, as pointed out by Ripley [83], using such generators may be a bit like playing ostrich. <p> In practice, if the m j 's are distinct primes slightly smaller than 2 31 and if the multipliers satisfy (29), then the generator is easy to implement on a 32-bit computer and can reach a very large period. L'Ecuyer and Tezuka <ref> [55] </ref> have shown that there exists a MLCG with modulus m = j=1 m j whose lattice structure approximates quite well the behavior of (30) in higher dimensions, and which is exactly equivalent to (31). This MLCG does not depend on the ffi j 's. <p> This MLCG does not depend on the ffi j 's. The equivalence of the Wichmann and Hill generator to a MLCG was already pointed out by Zeisel [98]. The results of <ref> [55] </ref> mean that (30) and (31) are almost equivalent. Such structural properties imply that the combined generators can be viewed as efficient ways of implementing MLCGs with very large moduli (with added "noise", in the case of (30)), which can be analyzed with the Beyer and spectral tests. <p> Such structural properties imply that the combined generators can be viewed as efficient ways of implementing MLCGs with very large moduli (with added "noise", in the case of (30)), which can be analyzed with the Beyer and spectral tests. Numerical and graphical illustrations are given in <ref> [55] </ref>. These combinations methods can also be generalized to the combination of MRGs with distinct prime moduli. For the generator of L'Ecuyer [48], the lattice approximation is quite good in dimensions t 3. As shown in [55], components with bad lattice structure can give rise to good combined generators, and the <p> Numerical and graphical illustrations are given in <ref> [55] </ref>. These combinations methods can also be generalized to the combination of MRGs with distinct prime moduli. For the generator of L'Ecuyer [48], the lattice approximation is quite good in dimensions t 3. As shown in [55], components with bad lattice structure can give rise to good combined generators, and the reverse is also true. <p> Based on that criterion, better combined generators than the one proposed in [48] can be found <ref> [55] </ref>. Press and Teukolsky [80] propose a generator which adds a shu*e to the combined generator of [48]. That destroys the lattice structure. Tezuka and L'Ecuyer [91] combine Tausworthe generators as follows.
Reference: [56] <author> A. K. Lenstra, </author> <title> Factoring Multivariate Polynomials over Finite Fields, </title> <institution> J. Comput. Syst. </institution> <note> Science 30 (1985) 235-248. </note>
Reference-contexts: So, the lattice can be expressed as ~ L t = &lt; t X g j ~ V j j g j 2 IF m [z] = : Reduced bases can be computed via Lenstra's algorithm <ref> [56] </ref>. The values k ~ V 1 k; : : : ; k ~ V t k are called the successive minima of ~ L t .
Reference: [57] <author> T. G. Lewis and W. H. Payne, </author> <title> Generalized Feedback Shift Register Pseudorandom Number Algorithm, </title> <editor> J. </editor> <booktitle> of the ACM 20, </booktitle> <month> 3 </month> <year> (1973) </year> <month> 456-468. </month>
Reference-contexts: LAGGED-FIBONACCI AND GFSR GENERATORS An important special case of the digital matrix MLCG is when m = 2 and the generator is implemented using (14): this gives the well know Generalized Feedback Shift Register (GFSR) generator <ref> [36, 57, 77] </ref>. In that case, in (14), each X n is a vector of bits and is obtained by making a bitwise exclusive-or of the X nj 's for which a j 6= 0.
Reference: [58] <author> R. Lidl and H. Niederreiter, </author> <title> Introduction to Finite Fields and Their Applications, </title> <publisher> Cam-bridge University Press, </publisher> <address> Cambridge (1986). </address>
Reference-contexts: The state space S can also be viewed as the k-dimensional vector space IF k m (space of k-dimensional vectors with elements in IF m ). A good reference on finite fields and related topics is Lidl and Niederreiter <ref> [58] </ref>. In what follows, unless otherwise indicated, we will assume that m is prime and that ff 2 S = IF m k . <p> Lists of primitive polynomials over IF 2 can be found in <ref> [39, 46, 58] </ref> and the references given there. 4.2. COMPOSITE MODULUS When m is not prime, the maximal possible period for the linear recurring sequence (5) typically falls way short of m k 1.
Reference: [59] <author> J. H. Lindholm, </author> <title> An Analysis of the Pseudo-Randomness Properties of Subsequences of Long m-Sequences, </title> <journal> IEEE Transactions on Information Theory IT-14, </journal> <month> 4 </month> <year> (1968) </year> <month> 569-576. </month>
Reference-contexts: However, recurrences based on polynomials with few non-zero coefficients have important statistical defects <ref> [13, 59, 65, 66] </ref>. One way of getting around this problem is to combine two or more trinomial-based generators. Some classes of combined generators are in fact just efficient ways of implementing a recurrence whose characteristic polynomial has a large degree and many non-zero coefficients. <p> Combination can conceivably worsen things. Nevertheless, empirical results strongly support combination [60, 50]. Most of the fast and simple generators (e.g., Tausworthe or MRGs based on primitive trinomials) happen to have statistical defects <ref> [13, 50, 59, 65] </ref>. Combining such fast generators could yield an efficient generator with much better statistical properties. Recently some combined generators have been analyzed successfully and turn out to be equivalent, or approximately equivalent, to MLCGs with large (non-prime) moduli or to Tausworthe generators with large-degree (reducible) characteristic polynomials. <p> Tausworthe and GFSR generators with good equidistribution properties are likely to fail such tests (see [89]). Other examples of tests that certain classes of generators are bound to fail are given in <ref> [59, 67] </ref>. Results of extensive statistical tests can also be found in [43, 48, 60]. In [43], the authors have applied a battery of tests to 35 generators proposed in the literature, and recommend three generators on the basis of their speed and their performance in those tests.
Reference: [60] <author> G. Marsaglia, </author> <title> A Current View of Random Number Generation, </title> <booktitle> Computer Science and Statistics, Proceedings of the Sixteenth Symposium on the Interface, </booktitle> <publisher> Elsevier Science Publ. (North-Holland) (1985) 3-10. </publisher>
Reference-contexts: So, seeking PT-perfect generators for simulation might be too demanding and we are back to a weaker definition of "reasonable statistical test". Current practice sets up standard batteries of tests and apply them to the generators <ref> [20, 48, 50, 60] </ref>. Ideally, the tests should be selected in relation with the target application. But this is not always (easily) feasible, especially for "general purpose" generators which are to be provided in software packages or libraries. The question of statistical testing is further discussed in x11. 2.2. <p> Its period length is only 2 k 1. One could then argue that the GFSR is a waste of memory <ref> [60, 61] </ref>. Ideally, a generator using kL bits of memory should have a period near 2 kL . <p> Its maximal period length, for suitable choices of r and k, is (2 k 1)2 L1 2 k+L1 , which is 2 L1 times larger than that of a GFSR with the same values of L and k, but falls way short of 2 kL . See <ref> [60, 61] </ref> for more details and specific examples with the operators +, , and fi, in arithmetic modulo 2 L . 3.8. <p> Similar packages could also be implemented rather easily using other (perhaps longer-period) generators. 9. Combined Generators To increase the period, improve the statistical properties, and perhaps try to get rid of the lattice structure, different kinds of combined generators have been proposed. See <ref> [12, 41, 44, 49, 55, 60, 63, 64, 91, 97, 98] </ref> and other references given there. The structure of the hybrid generator thus obtained is often not well understood. Then, as pointed out by Ripley [83], using such generators may be a bit like playing ostrich. <p> The structure of the hybrid generator thus obtained is often not well understood. Then, as pointed out by Ripley [83], using such generators may be a bit like playing ostrich. Theoretical results in <ref> [60, 11] </ref> appear to support the view (at first glance) that combined generators should have better statistical behavior in general than their individual components. However, as explained in [49], applying those theoretical results to "deterministic" generators is a somewhat shaky reasoning. Combination can conceivably worsen things. <p> However, as explained in [49], applying those theoretical results to "deterministic" generators is a somewhat shaky reasoning. Combination can conceivably worsen things. Nevertheless, empirical results strongly support combination <ref> [60, 50] </ref>. Most of the fast and simple generators (e.g., Tausworthe or MRGs based on primitive trinomials) happen to have statistical defects [13, 50, 59, 65]. Combining such fast generators could yield an efficient generator with much better statistical properties. <p> They show that the correlation structure of AM-sequences behaves very nicely in general. Their empirical investigation also suggests that when the number of non-zero coefficients in P (z) is reasonably large, then the figure of merit r (t) defined in x5.3 is (usually) also large. Marsaglia <ref> [60] </ref> recommends combining generators of different algebraic structures instead of combining generators within the same class. This is perhaps an interesting "scrambling" heuristic, but little theoretical analysis is available for such combinations. In [63, 64], he and his co-workers propose two specific combined generators of that sort. <p> STANDARD AND MORE STRINGENT TESTS Knuth [44] describes a set of tests which have been considered for a while as "the standard tests" for testing random number generators. Arguing that those so-called standard tests were not sufficiently discriminatory, i.e., that many "bad" generators passed most of the tests, Marsaglia <ref> [60] </ref> proposed a new set of more stringent tests. Indeed, sophisticated applications like probabilistic computational geometry, probabilistic combinatorial algorithms, design of statistical tests, and so on, often require generators with excellent high-dimensional structures. <p> Other statistical tests for random number generators are proposed or discussed in [17, 31, 43, 50, 66, 68, 87] and the references given there. For many interesting statistical tests, the theoretical distribution of the associated statistic is unfortunately unknown, at least in practically usable form <ref> [50, 60] </ref>. In such situations, Marsaglia [60] suggests comparing the empirical distribution of a generator to be tested with that of a "good" generator. <p> For many interesting statistical tests, the theoretical distribution of the associated statistic is unfortunately unknown, at least in practically usable form [50, 60]. In such situations, Marsaglia <ref> [60] </ref> suggests comparing the empirical distribution of a generator to be tested with that of a "good" generator. <p> Tausworthe and GFSR generators with good equidistribution properties are likely to fail such tests (see [89]). Other examples of tests that certain classes of generators are bound to fail are given in [59, 67]. Results of extensive statistical tests can also be found in <ref> [43, 48, 60] </ref>. In [43], the authors have applied a battery of tests to 35 generators proposed in the literature, and recommend three generators on the basis of their speed and their performance in those tests.
Reference: [61] <author> G. Marsaglia and L.-H. Tsay, </author> <title> Matrices and the Structure of Random Number Sequences, </title> <note> Linear Algebra and its Applications 67 (1985) 147-156. </note>
Reference-contexts: Its period length is only 2 k 1. One could then argue that the GFSR is a waste of memory <ref> [60, 61] </ref>. Ideally, a generator using kL bits of memory should have a period near 2 kL . <p> Its maximal period length, for suitable choices of r and k, is (2 k 1)2 L1 2 k+L1 , which is 2 L1 times larger than that of a GFSR with the same values of L and k, but falls way short of 2 kL . See <ref> [60, 61] </ref> for more details and specific examples with the operators +, , and fi, in arithmetic modulo 2 L . 3.8.
Reference: [62] <author> G. Marsaglia and A. Zaman, </author> <title> A New Class of Random Number Generators, </title> <note> The Annals of Applied Probability 1 (1991) 462-480. </note>
Reference-contexts: However, there is a compromise to be made in terms of implementation speed. If the B j 's do not have a special structure that can be exploited, the generator will be too slow. 3.9. ADD-WITH-CARRY AND SUBTRACT-WITH-BORROW GENERATORS Marsaglia and Zaman <ref> [62] </ref> propose two types of random number generators, called add-with-carry (AWC) and subtract-with-borrow (SWB), which are slight modifications of the lagged-Fibonacci generators with the + and operations, respectively. <p> Fishman and Moore [33] recommend G3. G7 is proposed by Matsumoto and Kurita [66], while G8 is proposed by Marsaglia and Zaman <ref> [62] </ref> and further recommended by James [41]. The results were that besides G5, G6, and G9, all other generators failed spectacularly at least one of the tests. Moreover, each of G1 to G4 failed spectacularly at least 6 tests out of 10.
Reference: [63] <author> G. Marsaglia, B. Narasimhan, and A. Zaman, </author> <title> A Random Number Generator for PC's, </title> <journal> Computer Physics Communications 60 (1990) 345-349. </journal>
Reference-contexts: Similar packages could also be implemented rather easily using other (perhaps longer-period) generators. 9. Combined Generators To increase the period, improve the statistical properties, and perhaps try to get rid of the lattice structure, different kinds of combined generators have been proposed. See <ref> [12, 41, 44, 49, 55, 60, 63, 64, 91, 97, 98] </ref> and other references given there. The structure of the hybrid generator thus obtained is often not well understood. Then, as pointed out by Ripley [83], using such generators may be a bit like playing ostrich. <p> Marsaglia [60] recommends combining generators of different algebraic structures instead of combining generators within the same class. This is perhaps an interesting "scrambling" heuristic, but little theoretical analysis is available for such combinations. In <ref> [63, 64] </ref>, he and his co-workers propose two specific combined generators of that sort. However, the generator of [63] has an important defect; as shown in [15], it has a lattice structure with distance d t between hyperplanes of at least 1= p 10. <p> This is perhaps an interesting "scrambling" heuristic, but little theoretical analysis is available for such combinations. In [63, 64], he and his co-workers propose two specific combined generators of that sort. However, the generator of <ref> [63] </ref> has an important defect; as shown in [15], it has a lattice structure with distance d t between hyperplanes of at least 1= p 10.
Reference: [64] <author> G. Marsaglia, A., Zaman, and W. W. Tsang, </author> <title> Towards a Universal Random Number Generator, </title> <journal> Stat. and Prob. </journal> <note> Letters 8 (1990) 35-39. 41 </note>
Reference-contexts: Similar packages could also be implemented rather easily using other (perhaps longer-period) generators. 9. Combined Generators To increase the period, improve the statistical properties, and perhaps try to get rid of the lattice structure, different kinds of combined generators have been proposed. See <ref> [12, 41, 44, 49, 55, 60, 63, 64, 91, 97, 98] </ref> and other references given there. The structure of the hybrid generator thus obtained is often not well understood. Then, as pointed out by Ripley [83], using such generators may be a bit like playing ostrich. <p> Marsaglia [60] recommends combining generators of different algebraic structures instead of combining generators within the same class. This is perhaps an interesting "scrambling" heuristic, but little theoretical analysis is available for such combinations. In <ref> [63, 64] </ref>, he and his co-workers propose two specific combined generators of that sort. However, the generator of [63] has an important defect; as shown in [15], it has a lattice structure with distance d t between hyperplanes of at least 1= p 10.
Reference: [65] <author> M. Matsumoto and Y. Kurita, </author> <title> The Fixed Point of an m-sequence and Local Non--Randomness, </title> <type> technical report 88-027, </type> <institution> Department of Information Science, University of Tokyo (1988). </institution>
Reference-contexts: However, recurrences based on polynomials with few non-zero coefficients have important statistical defects <ref> [13, 59, 65, 66] </ref>. One way of getting around this problem is to combine two or more trinomial-based generators. Some classes of combined generators are in fact just efficient ways of implementing a recurrence whose characteristic polynomial has a large degree and many non-zero coefficients. <p> Combination can conceivably worsen things. Nevertheless, empirical results strongly support combination [60, 50]. Most of the fast and simple generators (e.g., Tausworthe or MRGs based on primitive trinomials) happen to have statistical defects <ref> [13, 50, 59, 65] </ref>. Combining such fast generators could yield an efficient generator with much better statistical properties. Recently some combined generators have been analyzed successfully and turn out to be equivalent, or approximately equivalent, to MLCGs with large (non-prime) moduli or to Tausworthe generators with large-degree (reducible) characteristic polynomials.
Reference: [66] <author> M. Matsumoto and Y. Kurita, </author> <title> Twisted GFSR Generators, </title> <booktitle> ACM Transactions on Modeling and Computer Simulation 2, </booktitle> <month> 3 </month> <year> (1992) </year> <month> 179-194. </month>
Reference-contexts: See [60, 61] for more details and specific examples with the operators +, , and fi, in arithmetic modulo 2 L . 3.8. TWISTED GFSR AND LARGE MATRIX GENERATORS Matsumoto and Kurita <ref> [66] </ref> have proposed replacing a k I in the matrix A of the GFSR in expanded matrix form by an L fi L matrix B of the form B = B B 0 1 : : : 0 . . . . . . b L b L1 : : : <p> But wasting that much memory could become a problem, especially when many parallel generators are required or helpful (see x8). Further, even if a GFSR is an acceptable option, one is probably better off with a TGFSR anyway. See Matsumoto and Kurita <ref> [66, 67] </ref> for how to implement the TGFSR. Consider now a Tausworthe generator based on the characteristic trinomial P (z) = z k z kr 1, and which satisfies 2r &gt; k and 0 &lt; s r &lt; k. Define q = k r. <p> However, recurrences based on polynomials with few non-zero coefficients have important statistical defects <ref> [13, 59, 65, 66] </ref>. One way of getting around this problem is to combine two or more trinomial-based generators. Some classes of combined generators are in fact just efficient ways of implementing a recurrence whose characteristic polynomial has a large degree and many non-zero coefficients. <p> Marsaglia argued that for such classes of applications, simple generators (e.g., LCG, Tausworthe, GFSR, etc.) were not good enough, and advocated combined generators. Other statistical tests for random number generators are proposed or discussed in <ref> [17, 31, 43, 50, 66, 68, 87] </ref> and the references given there. For many interesting statistical tests, the theoretical distribution of the associated statistic is unfortunately unknown, at least in practically usable form [50, 60]. <p> Fishman and Moore [33] recommend G3. G7 is proposed by Matsumoto and Kurita <ref> [66] </ref>, while G8 is proposed by Marsaglia and Zaman [62] and further recommended by James [41]. The results were that besides G5, G6, and G9, all other generators failed spectacularly at least one of the tests.
Reference: [67] <author> M. Matsumoto and Y. Kurita, </author> <note> Well-Tempered TGFSR Generators, Manuscript (1992). </note>
Reference-contexts: Matsumoto and Kurita explain how to find polynomials satisfying those conditions and call the resulting generators twisted GFSR, or TGFSR. In <ref> [67] </ref>, they develop an improved variant of TGFSR generators (in terms of statistical behavior), which amounts to replacing B by P BP 1 for some well chosen regular matrix P . These TGFSR variants are fast, practically as fast as GFSR generators, and have extremely long period. <p> But wasting that much memory could become a problem, especially when many parallel generators are required or helpful (see x8). Further, even if a GFSR is an acceptable option, one is probably better off with a TGFSR anyway. See Matsumoto and Kurita <ref> [66, 67] </ref> for how to implement the TGFSR. Consider now a Tausworthe generator based on the characteristic trinomial P (z) = z k z kr 1, and which satisfies 2r &gt; k and 0 &lt; s r &lt; k. Define q = k r. <p> Tausworthe and GFSR generators with good equidistribution properties are likely to fail such tests (see [89]). Other examples of tests that certain classes of generators are bound to fail are given in <ref> [59, 67] </ref>. Results of extensive statistical tests can also be found in [43, 48, 60]. In [43], the authors have applied a battery of tests to 35 generators proposed in the literature, and recommend three generators on the basis of their speed and their performance in those tests.
Reference: [68] <author> U. M. Maurer, </author> <title> A Universal Statistical Test for Random Bit Generators, </title> <note> Journal of Cryptology 5 (1992) 89-105. </note>
Reference-contexts: Marsaglia argued that for such classes of applications, simple generators (e.g., LCG, Tausworthe, GFSR, etc.) were not good enough, and advocated combined generators. Other statistical tests for random number generators are proposed or discussed in <ref> [17, 31, 43, 50, 66, 68, 87] </ref> and the references given there. For many interesting statistical tests, the theoretical distribution of the associated statistic is unfortunately unknown, at least in practically usable form [50, 60].
Reference: [69] <author> H. Niederreiter, </author> <title> Quasi-Monte Carlo Methods and Pseudorandom Numbers, </title> <journal> Bull. Amer. Math. Soc. </journal> <volume> 84, </volume> <month> 6 </month> <year> (1978) </year> <month> 957-1041. </month>
Reference-contexts: Here, we just give it a quick look. For more details, see the many references given in Niederreiter <ref> [69, 75, 77] </ref>. Suppose we generate N t-dimensional points u n = (u n ; : : : ; u n+t1 ), 0 n N 1, formed by (overlapping) vectors of t successive values produced by the generator.
Reference: [70] <author> H. Niederreiter, </author> <title> The Serial Test for Pseudorandom Numbers Generated by the Linear Congruential Method, </title> <journal> Numer. Math. </journal> <volume> 46 (1985), </volume> <pages> 51-68. </pages>
Reference-contexts: However, as explained in x2.2, super-uniformity over the entire period is reassuring and intuitively good when we use only a tiny fraction of the period. Bounds on the discrepancy also exist for part of the period <ref> [70] </ref> and the discrepancy is then better behaved. Of course, using only a small fraction of the period is not necessarily foolproof, but at least the argument of the wrong order of magnitude of the discrepancy no longer stands in that case. Consider now the digital multistep method (7).
Reference: [71] <author> H. Niederreiter, </author> <title> A Pseudorandom Vector Generator Based on Finite Field Arithmetic, </title> <journal> Math. </journal> <note> Japonica 31 (1986) 759-774. </note>
Reference-contexts: Consider the recurrence X n = AX n1 ; (13) where each X n is a k-dimensional column vector of elements of IF m and the arithmetic is in IF m . Then, it can be shown (see <ref> [37, 38, 71, 77] </ref>) that fX n g follows the recurrence X n = a 1 X n1 + : : : + a k X nk : (14) In other words, each component of the vector X n evolves according to (3), which means that we just have k copies
Reference: [72] <author> H. Niederreiter, </author> <title> A Statistical Analysis of Generalized Feedback Shift Register Pseudorandom Number Generators, </title> <note> SIAM J. </note> <institution> Sci. Stat. Comput. </institution> <month> 8 </month> <year> (1987) </year> <month> 1035-1051. </month>
Reference-contexts: This is the subject of the next subsection. What we just said concerning GFSR generators also holds more generally for digital matrix generators over IF m instead of over IF 2 , for m prime. Some authors <ref> [72, 77, 90] </ref> use the expression GFSR sequence for the recurrence (15), whatever its implementation and (prime) value of m. <p> We view the latter fraction of points somewhat like a random sample from the whole set. Discrepancy bounds for part of the period are given in <ref> [72, 73] </ref>. One major difficulty with discrepancy is that it can be computed exactly only for a few very special cases (e.g., for a LCG, for t = 2 [4]). Otherwise, only bounds on D (t) N , or orders of magnitude, are available [77].
Reference: [73] <author> H. Niederreiter, </author> <title> The Serial Test for Digital k-Step Pseudorandom Numbers, </title> <note> Mathematical Journal of Okayama University 30 (1988) 93-119. </note>
Reference-contexts: We view the latter fraction of points somewhat like a random sample from the whole set. Discrepancy bounds for part of the period are given in <ref> [72, 73] </ref>. One major difficulty with discrepancy is that it can be computed exactly only for a few very special cases (e.g., for a LCG, for t = 2 [4]). Otherwise, only bounds on D (t) N , or orders of magnitude, are available [77].
Reference: [74] <author> H. Niederreiter, </author> <title> Statistical Independence Properties of Pseudorandom Vectors Produced by Matrix Generators, </title> <journal> J. Comput. Appl. Math. </journal> <month> 31 </month> <year> (1990) </year> <month> 139-151. </month>
Reference: [75] <author> H. Niederreiter, </author> <title> Recent Trends in Random Number and Random Vector Generation, </title> <note> Annals of Operations Research 31 (1991) 323-345. </note>
Reference-contexts: Using a digital expansion in base m as in (7) yields a better resolution for the output values (for L &gt; 1) than when u n is just x n =m. The output sequence fu n g obtained from such a generator is called a digital multistep sequence <ref> [75, 77] </ref> (Niederreiter [75, 77] imposes the additional constraints L = s k, so our definition is more general). If (5) has full period ae = m k 1 and s is coprime ae, then the digital multistep 9 sequence (7) also has period ae = m k 1. <p> The output sequence fu n g obtained from such a generator is called a digital multistep sequence <ref> [75, 77] </ref> (Niederreiter [75, 77] imposes the additional constraints L = s k, so our definition is more general). If (5) has full period ae = m k 1 and s is coprime ae, then the digital multistep 9 sequence (7) also has period ae = m k 1. <p> Here, we just give it a quick look. For more details, see the many references given in Niederreiter <ref> [69, 75, 77] </ref>. Suppose we generate N t-dimensional points u n = (u n ; : : : ; u n+t1 ), 0 n N 1, formed by (overlapping) vectors of t successive values produced by the generator.
Reference: [76] <author> H. Niederreiter, </author> <title> New Methods for Pseudorandom Number and Pseudorandom Vector Generation, </title> <booktitle> Proceedings of the 1992 Winter Simulation Conference, </booktitle> <publisher> IEEE Press (1992) 264-269. </publisher>
Reference-contexts: A well behaved generator should have its discrepancy in the same order (for large N ) as that of a truly random sequence, which lies between O (N 1=2 ) and O (N 1=2 (log log N ) 1=2 ), according to the law of the iterated logarithm <ref> [76, 77] </ref>. <p> For large m, this is too small, meaning too much regularity. Niederreiter <ref> [76, 77] </ref> concludes that for that reason, MLCGs should be discarded altogether. A somewhat different interpretation (or conclusion) could be that in practice, one should never use more than a tiny fraction of the period of the MLCG. <p> Extremely bad correlations occur, for example, when and the modulus m are both powers of two. This is why Durst [21] prefers random seeds. For further discussion on this and related topics, see [18, 21, 26, 49]. Niederreiter <ref> [76, 77] </ref> proposes different classes of nonlinear vector generators for use on parallel processors. Those generators appear interesting (at least theoretically), although specific (well tested) parameter values and efficient implementations are not given. L'Ecuyer and Cote [52] have developed a random number package with two-level (imbedded) splitting facilities. <p> Nonlinear Generators Linear generators tend to have a too regular structure, and for that reason, many believe that the way to go is nonlinear <ref> [28, 29, 76, 77] </ref>. <p> Then, there exists a (unique) permutation polynomial P , of degree k m 2, such that P (n) = x n for all n 2 ZZ m <ref> [76, 77] </ref>. Further, for all t k, the "smallest" lattice which contains all the t-dimensional vectors of successive values u n = (u n ; : : : ; u n+t1 ) produced by the generator is the "complete" lattice ZZ t =m. <p> So, the larger is k, the better. We must emphasize, however, that passing the lattice test does not mean at all that the generator has good statistical properties. The degree k of the polynomial P here also has to do with the discrepancy. It has been shown <ref> [76, 77] </ref> that for 2 t k, D (t) m 2 O (km 1=2 (log m) t ). For k close to m, this is the right order of magnitude. 10.2. <p> The period is ae = m and the permutation polynomial P associated with this generator has degree k = m 2. So, the generator "passes the lattice test" in all dimensions t m 2. Niederreiter <ref> [76, 78] </ref> also shows that every hyperplane in IR t contains at most t points from the set fu 0 ; : : : ; u m1 g, and obtains discrepancy bounds. Inversive congruential generators with power-of-two moduli have also been studied [25, 28, 29].
Reference: [77] <author> H. Niederreiter, </author> <title> Random Number Generation and Quasi-Monte Carlo Methods, </title> <booktitle> SIAM CBMS-NSF Regional Conference Series in Applied Mathematics, </booktitle> <volume> vol. 63, </volume> <publisher> SIAM, </publisher> <address> Philadelphia (1992). </address>
Reference-contexts: Then, one looks for quasi-random sequences with the lowest possible discrepancy (or, in practice, with the lowest upper bound on their discrepancy, since the discrepancy can rarely be computed exactly). Niederreiter <ref> [77] </ref> is an excellent (high-level) introduction to quasi-Monte Carlo methods. In this paper, we will not enter further into that subject. Our interest will be in pseudorandom sequences. 1.6. <p> For most linear-type generators, the discrepancy of the vectors of successive values over the entire period is much too small compared with the discrepancy of truly random sequences (see x6 and <ref> [77] </ref>). Therefore, at most a small fraction of the period should be used. This gives further motivation for very long period generators. <p> (3) becomes x n = ax n1 mod m: (4) If G : ZZ m ! [0; 1] is defined by G (x) = x=m, this gives the classical multiplicative linear congruential generator (MLCG), which has been deeply analyzed, scrutinized, and often criticized, over the past 30 years or so <ref> [10, 33, 34, 44, 49, 77, 81] </ref>. Despite well founded critics, this kind of generator is still largely used in practice [10, 47]. One can also use (4) with a non-prime modulus m. Then, ZZ m is not a field, but we still call the generator a MLCG. <p> This kind of higher-order linear congruential generator is known as a multiple recursive generator (MRG) <ref> [38, 49, 51, 77] </ref>. The special case where k = 1 gives the usual MLCG with prime modulus. For k &gt; 1, for P (z) to be primitive, it is necessary that a k and at least another a j be non-zero. <p> Using a digital expansion in base m as in (7) yields a better resolution for the output values (for L &gt; 1) than when u n is just x n =m. The output sequence fu n g obtained from such a generator is called a digital multistep sequence <ref> [75, 77] </ref> (Niederreiter [75, 77] imposes the additional constraints L = s k, so our definition is more general). If (5) has full period ae = m k 1 and s is coprime ae, then the digital multistep 9 sequence (7) also has period ae = m k 1. <p> The output sequence fu n g obtained from such a generator is called a digital multistep sequence <ref> [75, 77] </ref> (Niederreiter [75, 77] imposes the additional constraints L = s k, so our definition is more general). If (5) has full period ae = m k 1 and s is coprime ae, then the digital multistep 9 sequence (7) also has period ae = m k 1. <p> This was introduced by Tausworthe [88] and is known as a Tausworthe generator <ref> [44, 77, 90, 91] </ref>. (Sometimes, the Tausworthe generator is defined slightly differently, by filling up the bits of u n from the least significant to the most significant one, instead of from most to least significant as in (7). See [88, 90]. <p> Consider the recurrence X n = AX n1 ; (13) where each X n is a k-dimensional column vector of elements of IF m and the arithmetic is in IF m . Then, it can be shown (see <ref> [37, 38, 71, 77] </ref>) that fX n g follows the recurrence X n = a 1 X n1 + : : : + a k X nk : (14) In other words, each component of the vector X n evolves according to (3), which means that we just have k copies <p> LAGGED-FIBONACCI AND GFSR GENERATORS An important special case of the digital matrix MLCG is when m = 2 and the generator is implemented using (14): this gives the well know Generalized Feedback Shift Register (GFSR) generator <ref> [36, 57, 77] </ref>. In that case, in (14), each X n is a vector of bits and is obtained by making a bitwise exclusive-or of the X nj 's for which a j 6= 0. <p> This is the subject of the next subsection. What we just said concerning GFSR generators also holds more generally for digital matrix generators over IF m instead of over IF 2 , for m prime. Some authors <ref> [72, 77, 90] </ref> use the expression GFSR sequence for the recurrence (15), whatever its implementation and (prime) value of m. <p> More general GFSR generators (with unevenly spaced shifts d i ) and twisted GFSR generators also have a lattice structure. See Tezuka [89, 90]. 5.3. NETS AND NIEDERREITER'S FIGURE OF MERIT A stronger notion than that of (t; `)-equidistribution is the notion of net, introduced by Sobol' (see <ref> [77] </ref>). <p> Niederreiter <ref> [77] </ref> defines the figure of merit r (t) = min (L; ` fl ) and proves that for t &gt; bk=Lc, the m k points of T t form a (q; k; t)-net in base m with q = k r (t) . <p> In the best case, one has r (t) = k, i.e., q = 0, and each elementary interval of the (0; k; t)-net contains exactly one point. According to Corollary 4.21 of <ref> [77] </ref>, a (0; k; t)-net can only exist for t m + 1. Therefore, for t &gt; m + 1, one must have r (t) k 1. Unfortunately, finding generators with large r (t) for large k and t appears difficult for the moment, from the computational point of view. <p> Their associated sequences can also be generated more quickly than those of [5], with the GFSR implementation. 23 6. Discrepancy and Other Theoretical Measures The notion of discrepancy has been the subject of many papers and is well treated in the excellent book of Niederreiter <ref> [77] </ref>, who is undoubtedly the "grand master" of the subject. Here, we just give it a quick look. For more details, see the many references given in Niederreiter [69, 75, 77]. <p> Here, we just give it a quick look. For more details, see the many references given in Niederreiter <ref> [69, 75, 77] </ref>. Suppose we generate N t-dimensional points u n = (u n ; : : : ; u n+t1 ), 0 n N 1, formed by (overlapping) vectors of t successive values produced by the generator. <p> A well behaved generator should have its discrepancy in the same order (for large N ) as that of a truly random sequence, which lies between O (N 1=2 ) and O (N 1=2 (log log N ) 1=2 ), according to the law of the iterated logarithm <ref> [76, 77] </ref>. <p> This holds for both the star and extreme discrepancies. (Here, O (f (n)) denotes the set of functions g such that for some constant c &gt; 0, g (n) cf (n) for all n.) Niederreiter <ref> [77] </ref> shows that for a full period MLCG (with period ae = m1), for an average multiplier a (average over the set of multipliers which are primitive modulo m), the discrepancy D (t) m1 over the full period is in O (m 1 (log m) t log log (m+1)). <p> For large m, this is too small, meaning too much regularity. Niederreiter <ref> [76, 77] </ref> concludes that for that reason, MLCGs should be discarded altogether. A somewhat different interpretation (or conclusion) could be that in practice, one should never use more than a tiny fraction of the period of the MLCG. <p> Consider now the digital multistep method (7). The resolution here is m L , which means that all u n 's are rational with denominator m L . From that, it is easily seen <ref> [77] </ref> that D N m L for all t 1 and N 1. Further, for t k=s and L = s = k, Niederreiter [77] shows that D fl (t) N = 1 (1 m L ) t for N = ae (the period). <p> From that, it is easily seen <ref> [77] </ref> that D N m L for all t 1 and N 1. Further, for t k=s and L = s = k, Niederreiter [77] shows that D fl (t) N = 1 (1 m L ) t for N = ae (the period). <p> For L = s = k and t &gt; k=s, one has D N 2 O (r t1 m r ), where r = r (t) is the figure of merit of the generator defined in x6.3 (see <ref> [77] </ref>). So, a larger figure of merit suggests a lower discrepancy. This also holds for digital matrix generators. <p> One major difficulty with discrepancy is that it can be computed exactly only for a few very special cases (e.g., for a LCG, for t = 2 [4]). Otherwise, only bounds on D (t) N , or orders of magnitude, are available <ref> [77] </ref>. Typically, these orders of magnitude are for N equal to the period length, or are averages over a whole class of generators. Estimating the discrepancy empirically, e.g., from a fine grid, does not seem possible for moderate t (say, t 4) and reasonably large N . <p> Extremely bad correlations occur, for example, when and the modulus m are both powers of two. This is why Durst [21] prefers random seeds. For further discussion on this and related topics, see [18, 21, 26, 49]. Niederreiter <ref> [76, 77] </ref> proposes different classes of nonlinear vector generators for use on parallel processors. Those generators appear interesting (at least theoretically), although specific (well tested) parameter values and efficient implementations are not given. L'Ecuyer and Cote [52] have developed a random number package with two-level (imbedded) splitting facilities. <p> Nonlinear Generators Linear generators tend to have a too regular structure, and for that reason, many believe that the way to go is nonlinear <ref> [28, 29, 76, 77] </ref>. <p> A common property of those nonlinear generators is that they do not produce a lattice structure like the linear ones. Their structure is highly nonlinear: typically, any t-dimensional hyperplane contains at most t overlapping t-tuples of successive values. Niederreiter <ref> [77] </ref> shows that they behave very much like truly random generators with respect to discrepancy. Therefore, their theoretical properties look quite good. However, specific well-tested parameter values with fast implementations are currently not available. 31 10.1. <p> Then, there exists a (unique) permutation polynomial P , of degree k m 2, such that P (n) = x n for all n 2 ZZ m <ref> [76, 77] </ref>. Further, for all t k, the "smallest" lattice which contains all the t-dimensional vectors of successive values u n = (u n ; : : : ; u n+t1 ) produced by the generator is the "complete" lattice ZZ t =m. <p> In that case, i.e., when the vectors fu n g span ZZ t =m (over ZZ), some authors say that the generator passes the t-dimensional lattice test <ref> [77] </ref>. Passing this test means that the points really do not have a lattice structure. This could be viewed as a desirable feature. So, the larger is k, the better. <p> So, the larger is k, the better. We must emphasize, however, that passing the lattice test does not mean at all that the generator has good statistical properties. The degree k of the polynomial P here also has to do with the discrepancy. It has been shown <ref> [76, 77] </ref> that for 2 t k, D (t) m 2 O (km 1=2 (log m) t ). For k close to m, this is the right order of magnitude. 10.2. <p> Fast hardware implementations are possible, though [22]. For prime m, the maximal possible period for fz n g is m k1 . Sufficient conditions for it to be attained are given in <ref> [24, 28, 77] </ref>. Maximal period generators are easy to find. A nice property of inversive congruential generators with prime moduli is that their discrepancy is in the same order of magnitude as that of truly random numbers [28, 77]. <p> Sufficient conditions for it to be attained are given in [24, 28, 77]. Maximal period generators are easy to find. A nice property of inversive congruential generators with prime moduli is that their discrepancy is in the same order of magnitude as that of truly random numbers <ref> [28, 77] </ref>. For k = 2 or 3, one can also write a recursion directly for z n . For k = 2, it is z n = (a 1 + a 2 z 1 a 1 if z n1 = 0. <p> They certainly deserve further investigation. 10.3. QUADRATIC CONGRUENTIAL GENERATORS A special case which has received some attention is the quadratic case, for which f in (32) has the quadratic form f (x) = ax 2 + bx + c, with a; b; c 2 ZZ m <ref> [44, 77] </ref>. If m is a power of two, then the generator has full period (ae = m) if and only if a is even, (b a) mod 4 = 1, and c is odd [44]. <p> The points produced by that generator turn out to lie on a union of grids, which can be determined explicitly [23]. Bounds on D (t) m are given in <ref> [77] </ref>. 10.4. OTHER NONLINEAR GENERATORS Some nonlinear generators have also been proposed by people from the field of cryptology [8, 54, 85]. Blum, Blum, and Shub [8] proposed the following class, known as BBS generators.
Reference: [78] <author> H. Niederreiter, </author> <title> On a New Class of Pseudorandom Numbers for Simulation Methods, </title> <journal> J. of Computational and Applied Math., </journal> <note> To appear. </note>
Reference-contexts: The period is ae = m and the permutation polynomial P associated with this generator has degree k = m 2. So, the generator "passes the lattice test" in all dimensions t m 2. Niederreiter <ref> [76, 78] </ref> also shows that every hyperplane in IR t contains at most t points from the set fu 0 ; : : : ; u m1 g, and obtains discrepancy bounds. Inversive congruential generators with power-of-two moduli have also been studied [25, 28, 29].
Reference: [79] <author> S. K. Park and K. W. Miller, </author> <title> Random Number Generators: Good Ones Are Hard to Find, </title> <journal> Communications of the ACM 31, </journal> <volume> 10 (1988) 1192-1201. </volume> <pages> 42 </pages>
Reference-contexts: One of my favorite exercises for students when I teach a simulation course is to have them test a bad generator recently proposed in a journal or available on a popular computer. For more on bad generators, see <ref> [41, 50, 79, 83] </ref>. As Ripley [84] said: "Random number generation seems to be one of the most misunderstood subjects in computer science". On the surface, it looks easy and attractive. <p> The question of empirical statistical testing is treated in x11. 2. What is a Good generator ? We summarize in this section the major requirements for a good random number generator, for general purpose simulation. These requirements are also discussed in <ref> [10, 41, 79, 84] </ref>, and we do not always share the views of all these authors. 2.1. <p> If m is prime, the period is m 1 if and only if the multiplier a is a primitive root modulo m and x 0 6= 0. Specific moduli and multipliers are analyzed in <ref> [33, 34, 43, 44, 48, 79] </ref>. 3.3. THE MULTIPLE RECURSIVE GENERATOR Let k 1 and m prime. Again, identify IF m with ZZ m . <p> If m is representable as a standard integer on the target computer, there is a reasonably efficient and portable 25 way of computing ax mod m for 0 &lt; x &lt; m provided that a (m mod a) &lt; m: (29) See <ref> [10, 48, 49, 79] </ref> for the details. In fact, all the multipliers a satisfying this condition turn out to be of the form a = i or a = bm=ic for i &lt; p m. <p> G9. MRG with m = 2 31 1, k = 5 and a 1 = 107374182; a 5 = 104480; a 2 = a 3 = a 4 = 0 Generators G1 and G2 are used in various software packages [10, 47] and recommended by some authors <ref> [79, 47] </ref>. Fishman and Moore [33] recommend G3. G7 is proposed by Matsumoto and Kurita [66], while G8 is proposed by Marsaglia and Zaman [62] and further recommended by James [41].
Reference: [80] <author> W. H. Press and S. A. Teukolsky, </author> <title> Portable Random Number Generators, </title> <booktitle> Computers in Physics 6, </booktitle> <month> 5 </month> <year> (1992) </year> <month> 522-524. </month>
Reference-contexts: Based on that criterion, better combined generators than the one proposed in [48] can be found [55]. Press and Teukolsky <ref> [80] </ref> propose a generator which adds a shu*e to the combined generator of [48]. That destroys the lattice structure. Tezuka and L'Ecuyer [91] combine Tausworthe generators as follows.
Reference: [81] <author> B. D. Ripley, </author> <title> The Lattice Structure of Pseudo-random Number Generators, </title> <journal> Proc. Roy. Soc. London, </journal> <note> Series A 389 (1983) 197-204. </note>
Reference-contexts: (3) becomes x n = ax n1 mod m: (4) If G : ZZ m ! [0; 1] is defined by G (x) = x=m, this gives the classical multiplicative linear congruential generator (MLCG), which has been deeply analyzed, scrutinized, and often criticized, over the past 30 years or so <ref> [10, 33, 34, 44, 49, 77, 81] </ref>. Despite well founded critics, this kind of generator is still largely used in practice [10, 47]. One can also use (4) with a non-prime modulus m. Then, ZZ m is not a field, but we still call the generator a MLCG. <p> All of these reasons argue against the use of power of two moduli. 5. Lattice Structure 5.1. THE LATTICE STRUCTURE OF MRG'S IN IR t It is well known that the vectors of successive values produced by a MLCG or MRG, in any given dimension, have a lattice structure <ref> [38, 44, 49, 81] </ref>. More precisely, consider the MRG (5). <p> Clearly, these results should be shocking to many simulation practitioners. Some of the test results could be explained by looking at the structure of the generator. For example, as pointed out by Ripley <ref> [81, 82] </ref>, the MLCGs are bound to fail the nearest-pair test because of their regular lattice structure: the length of the shortest vector in the Minkowski reduced basis is a lower bound on the distance between points, so that the nearest pair in a large set of points cannot be as
Reference: [82] <author> B. D. Ripley, </author> <title> Stochastic Simulation, </title> <publisher> Wiley, </publisher> <address> New York (1987). </address>
Reference-contexts: Therefore, at most a small fraction of the period should be used. This gives further motivation for very long period generators. Based on a "nearest pair" argument, Ripley <ref> [82, p. 26] </ref> suggests that for linear congruential generators, the period (and the modulus) should always be at least an order of magnitude larger than the square of the number of values we use. <p> Clearly, these results should be shocking to many simulation practitioners. Some of the test results could be explained by looking at the structure of the generator. For example, as pointed out by Ripley <ref> [81, 82] </ref>, the MLCGs are bound to fail the nearest-pair test because of their regular lattice structure: the length of the shortest vector in the Minkowski reduced basis is a lower bound on the distance between points, so that the nearest pair in a large set of points cannot be as
Reference: [83] <author> B. D. Ripley, </author> <title> Uses and Abuses of Statistical Simulation, </title> <note> Mathematical Programming 42 (1988) 53-68. </note>
Reference-contexts: One of my favorite exercises for students when I teach a simulation course is to have them test a bad generator recently proposed in a journal or available on a popular computer. For more on bad generators, see <ref> [41, 50, 79, 83] </ref>. As Ripley [84] said: "Random number generation seems to be one of the most misunderstood subjects in computer science". On the surface, it looks easy and attractive. <p> See [12, 41, 44, 49, 55, 60, 63, 64, 91, 97, 98] and other references given there. The structure of the hybrid generator thus obtained is often not well understood. Then, as pointed out by Ripley <ref> [83] </ref>, using such generators may be a bit like playing ostrich. Theoretical results in [60, 11] appear to support the view (at first glance) that combined generators should have better statistical behavior in general than their individual components.
Reference: [84] <author> B. D. Ripley, </author> <title> Thoughts on Pseudorandom Number Generators, </title> <journal> J. </journal> <note> of Computational and Applied Mathematics 31 (1990) 153-163. </note>
Reference-contexts: One of my favorite exercises for students when I teach a simulation course is to have them test a bad generator recently proposed in a journal or available on a popular computer. For more on bad generators, see [41, 50, 79, 83]. As Ripley <ref> [84] </ref> said: "Random number generation seems to be one of the most misunderstood subjects in computer science". On the surface, it looks easy and attractive. <p> The question of empirical statistical testing is treated in x11. 2. What is a Good generator ? We summarize in this section the major requirements for a good random number generator, for general purpose simulation. These requirements are also discussed in <ref> [10, 41, 79, 84] </ref>, and we do not always share the views of all these authors. 2.1. <p> random number generator might be insignificant in some cases [41], but (i) this will usually not be the case if the generator is slow or requires a lot of memory and (ii) there are cases where the time and space used by even the most efficient generators cannot be neglected <ref> [21, 43, 84] </ref>. Memory frugality becomes especially important when many "virtual" generators (i.e., many substreams) are maintained in parallel on a single computer (see x8). 2.5. REPEATABILITY, PORTABILITY, JUMPING AHEAD, AND EASE OF IMPLE MENTATION A generator must be easy to implement efficiently in a standard high-level language. <p> Being able to reproduce the same sequence of random numbers on a given computer (called repeatability) is important for program verification and for variance reduction purposes <ref> [10, 47, 84] </ref>. Reproducing the same sequence on different computers is also important, for example for program verification across computers [41]. Repeatability is a major advantage of pseudorandom sequences with respect to sequences generated by physical devices.
Reference: [85] <author> A. W. Schrift and A. Shamir, </author> <title> The Discrete Log is Very Discreet, </title> <booktitle> Proceedings of STOC'90 , ACM Publications (1990) 405-415. </booktitle>
Reference-contexts: The points produced by that generator turn out to lie on a union of grids, which can be determined explicitly [23]. Bounds on D (t) m are given in [77]. 10.4. OTHER NONLINEAR GENERATORS Some nonlinear generators have also been proposed by people from the field of cryptology <ref> [8, 54, 85] </ref>. Blum, Blum, and Shub [8] proposed the following class, known as BBS generators. Let m = pq be a Blum integer , i.e., such that p; q are two distinct primes both congruent to 3 modulo 4. <p> See [8, 54] for further details. However, L'Ecuyer and Proulx [54] show that a software implementation of the BBS generator is much too slow for practical use in simulation applications. More efficient generators with the same kind of polynomial-time statistical "perfectness" have been proposed recently <ref> [85] </ref>. Further investigation is required 33 before assessing their practical competitivity for simulation. 11. Empirical Statistical Testing An unlimited number of empirical tests can be designed for random number generators. The null hypothesis is H 0 : "The sequence is a sample of i.i.d.
Reference: [86] <author> Y. S. Sherif and R. G. Dear, </author> <title> Development of a New Composite Pseudo-Random Number Generator, </title> <note> Microelectronics and Reliability 30 (1990) 545-553. </note>
Reference-contexts: Table 1: The generators tested. G1. MLCG with m = 2 31 1 and a = 16807. G2. MLCG with m = 2 31 1 and a = 630360016. G3. MLCG with m = 2 31 1 and a = 742938285. G4. CSD generator of Sherif and Dear <ref> [86] </ref>. G5. Combined generator in Fig. 3 of L'Ecuyer [48]. G6. Combined Tausworthe generator G1 of Tezuka and L'Ecuyer [91]. G7. Twisted GFSR with (r; s; p) = (25; 7; 32). G8. Subtract-with-borrow generator with (b; r; s; L) = (2 32 5; 43; 22; 1). G9.
Reference: [87] <author> M. S. Stephens, </author> <title> Tests for the Uniform Distribution, in Goodness-of-Fit Techniques, Edited by R. </title> <editor> B. D'Agostino and M. S. Stephens, </editor> <publisher> Marcel Dekker (1986) 331-366. </publisher>
Reference-contexts: The empirical distribution of those N values can then be compared to the theoretical distribution of T under H 0 , via standard univariate goodness-of-fit tests, like Kolmogorov-Smirnov (KS), Anderson-Darling, or Cramer-von Mises <ref> [87] </ref>. We call this a two-level test. <p> A uniformity test over the whole sequence will give a perfect adjustment. In fact, the adjustment will be too good, giving what is called super-uniformity <ref> [87] </ref>. On the other hand, uniformity tests over disjoint shorter subsequences will give terribly bad adjustments. So, one-level tests are not always appropriate, and two-level tests seem to offer a good compromise. 11.2. <p> Marsaglia argued that for such classes of applications, simple generators (e.g., LCG, Tausworthe, GFSR, etc.) were not good enough, and advocated combined generators. Other statistical tests for random number generators are proposed or discussed in <ref> [17, 31, 43, 50, 66, 68, 87] </ref> and the references given there. For many interesting statistical tests, the theoretical distribution of the associated statistic is unfortunately unknown, at least in practically usable form [50, 60].
Reference: [88] <author> R. C. </author> <title> Tausworthe, Random Numbers Generated by Linear Recurrence Modulo Two, </title> <journal> Math. </journal> <note> of Computation 19 (1965) 201-209. </note>
Reference-contexts: Another important special case is when m = p = 2: the output values u n are then constructed by taking blocks of L successive bits from the binary sequence (5) with spacings of s L 0 bits between the blocks. This was introduced by Tausworthe <ref> [88] </ref> and is known as a Tausworthe generator [44, 77, 90, 91]. (Sometimes, the Tausworthe generator is defined slightly differently, by filling up the bits of u n from the least significant to the most significant one, instead of from most to least significant as in (7). See [88, 90]. <p> See <ref> [88, 90] </ref>. This corresponds to generating the sequence (5) in reverse order.) 3.5. <p> Some authors also call such a sequence asymptotically random [90, 96]. Full period digital multistep generators (7) are all (1; k)-equidistributed (for L = k), because each possible vector s n (except zero) occurs once and only once over the full period. Tausworthe <ref> [88] </ref> also showed that they are (bk=sc; s)-equidistributed. Tootill, Robinson, and Eagle [96] found the following maximally equidistributed Tausworthe generator: P (z) = z 607 z 273 1, s = 512, and L = 23.
Reference: [89] <author> S. Tezuka, </author> <title> Lattice Structure of Pseudorandom Sequences From Shift-Register Generators, </title> <booktitle> Proceedings of the 1990 Winter Simulation Conference, </booktitle> <publisher> IEEE Press (1990) 266-269. </publisher>
Reference-contexts: So, we have just recovered the digital multistep sequence by following a different development. This alternative view was first suggested by Tezuka and turns out to be quite useful for analyzing some of the structural properties of the sequence when m is small (e.g., m = 2) <ref> [14, 89, 90, 91] </ref>. The Tausworthe, MRG, and MLCG generators are special cases of this. In [91], for m = 2, the generator defined by (10-11) is called an LS2 generator. 11 3.6. <p> Therefore, the lattice structure of such GFSR generators can be analyzed in the same way as for Tausworthe generators. More general GFSR generators (with unevenly spaced shifts d i ) and twisted GFSR generators also have a lattice structure. See Tezuka <ref> [89, 90] </ref>. 5.3. NETS AND NIEDERREITER'S FIGURE OF MERIT A stronger notion than that of (t; `)-equidistribution is the notion of net, introduced by Sobol' (see [77]). <p> A nearest-pair test can also be constructed using the norm on the space of formal series defined in x5.2. Tausworthe and GFSR generators with good equidistribution properties are likely to fail such tests (see <ref> [89] </ref>). Other examples of tests that certain classes of generators are bound to fail are given in [59, 67]. Results of extensive statistical tests can also be found in [43, 48, 60].
Reference: [90] <author> S. Tezuka, </author> <title> A Unified View of Long-Period Random Number Generators, </title> <note> Submitted for publication (1992). </note>
Reference-contexts: This was introduced by Tausworthe [88] and is known as a Tausworthe generator <ref> [44, 77, 90, 91] </ref>. (Sometimes, the Tausworthe generator is defined slightly differently, by filling up the bits of u n from the least significant to the most significant one, instead of from most to least significant as in (7). See [88, 90]. <p> See <ref> [88, 90] </ref>. This corresponds to generating the sequence (5) in reverse order.) 3.5. <p> So, we have just recovered the digital multistep sequence by following a different development. This alternative view was first suggested by Tezuka and turns out to be quite useful for analyzing some of the structural properties of the sequence when m is small (e.g., m = 2) <ref> [14, 89, 90, 91] </ref>. The Tausworthe, MRG, and MLCG generators are special cases of this. In [91], for m = 2, the generator defined by (10-11) is called an LS2 generator. 11 3.6. <p> This is the subject of the next subsection. What we just said concerning GFSR generators also holds more generally for digital matrix generators over IF m instead of over IF 2 , for m prime. Some authors <ref> [72, 77, 90] </ref> use the expression GFSR sequence for the recurrence (15), whatever its implementation and (prime) value of m. <p> When the sequence is (t; bk=tc)-equidistributed for t = 1; : : : ; k, we say that it is maximally equidistributed . Some authors also call such a sequence asymptotically random <ref> [90, 96] </ref>. Full period digital multistep generators (7) are all (1; k)-equidistributed (for L = k), because each possible vector s n (except zero) occurs once and only once over the full period. Tausworthe [88] also showed that they are (bk=sc; s)-equidistributed. <p> Therefore, the lattice structure of such GFSR generators can be analyzed in the same way as for Tausworthe generators. More general GFSR generators (with unevenly spaced shifts d i ) and twisted GFSR generators also have a lattice structure. See Tezuka <ref> [89, 90] </ref>. 5.3. NETS AND NIEDERREITER'S FIGURE OF MERIT A stronger notion than that of (t; `)-equidistribution is the notion of net, introduced by Sobol' (see [77]). <p> This is the basic idea of the combined Tausworthe generators proposed in Tezuka and L'Ecuyer [91]. Their implementation turns out to be pretty fast, roughly as fast as that of a simple MLCG with prime modulus (depending on the computers and compilers), according to Tezuka <ref> [90] </ref>. Such combined generators are also recommended and studied in Wang and Compagner [97]. In a similar way, some MLCGs with very large moduli can be implemented efficiently via the combination of easily implementable MLCGs with small moduli. See x9 for further details.
Reference: [91] <author> S. Tezuka and P. L'Ecuyer, </author> <title> Efficient and Portable Combined Tausworthe Random Number Generators. </title> <booktitle> ACM Transactions on Modeling and Computer Simulation 1 (1991) 99-112. </booktitle>
Reference-contexts: This was introduced by Tausworthe [88] and is known as a Tausworthe generator <ref> [44, 77, 90, 91] </ref>. (Sometimes, the Tausworthe generator is defined slightly differently, by filling up the bits of u n from the least significant to the most significant one, instead of from most to least significant as in (7). See [88, 90]. <p> So, we have just recovered the digital multistep sequence by following a different development. This alternative view was first suggested by Tezuka and turns out to be quite useful for analyzing some of the structural properties of the sequence when m is small (e.g., m = 2) <ref> [14, 89, 90, 91] </ref>. The Tausworthe, MRG, and MLCG generators are special cases of this. In [91], for m = 2, the generator defined by (10-11) is called an LS2 generator. 11 3.6. <p> This alternative view was first suggested by Tezuka and turns out to be quite useful for analyzing some of the structural properties of the sequence when m is small (e.g., m = 2) [14, 89, 90, 91]. The Tausworthe, MRG, and MLCG generators are special cases of this. In <ref> [91] </ref>, for m = 2, the generator defined by (10-11) is called an LS2 generator. 11 3.6. <p> If k is not larger than the computer's word size, this algorithm is fast and easy to program in any computer language which supports shifting and bitwise exclusive-or operations. Tezuka and L'Ecuyer <ref> [91] </ref> give an example in the C language. A FORTRAN code implementing a different algorithm, for the case k = s (for which algorithm 1 does not work) is given in [10, p.216]. 7.3. <p> Some classes of combined generators are in fact just efficient ways of implementing a recurrence whose characteristic polynomial has a large degree and many non-zero coefficients. This is the basic idea of the combined Tausworthe generators proposed in Tezuka and L'Ecuyer <ref> [91] </ref>. Their implementation turns out to be pretty fast, roughly as fast as that of a simple MLCG with prime modulus (depending on the computers and compilers), according to Tezuka [90]. Such combined generators are also recommended and studied in Wang and Compagner [97]. <p> Even when many good parameter sets are available, implementation considerations must be taken into account when selecting a generator. Often, the implementation of the selected generator is artfully crafted for speed and portability and some constants depending on the selected parameters must be precomputed for that purpose <ref> [48, 51, 91] </ref>. This tends to support approach (iii). Finding millions of good generators is not really a problem for some classes of generators like the LCG or MRG [21, 51], but not necessarily for all classes of generators. <p> This tends to support approach (iii). Finding millions of good generators is not really a problem for some classes of generators like the LCG or MRG [21, 51], but not necessarily for all classes of generators. For example, for the two-component 32-bit combined Tausworthe generators proposed in <ref> [91] </ref>, there is a limited number of good parameter sets. If many good parameter sets are available, one can conceivably maintain a large list of such good parameters to implement method (ii). <p> Similar packages could also be implemented rather easily using other (perhaps longer-period) generators. 9. Combined Generators To increase the period, improve the statistical properties, and perhaps try to get rid of the lattice structure, different kinds of combined generators have been proposed. See <ref> [12, 41, 44, 49, 55, 60, 63, 64, 91, 97, 98] </ref> and other references given there. The structure of the hybrid generator thus obtained is often not well understood. Then, as pointed out by Ripley [83], using such generators may be a bit like playing ostrich. <p> Based on that criterion, better combined generators than the one proposed in [48] can be found [55]. Press and Teukolsky [80] propose a generator which adds a shu*e to the combined generator of [48]. That destroys the lattice structure. Tezuka and L'Ecuyer <ref> [91] </ref> combine Tausworthe generators as follows. <p> If the polynomials P j (z) are pairwise relatively prime, then the period of the combined gener ator is the least common multiple of the individual periods, i.e., ae = lcm (2 k 1 1; : : : ; 2 k J 1) 30 (see <ref> [91] </ref>). Clearly, one should take distinct k j 's and the period ae could then be the prod-uct of the individual periods. In that case, Wang and Compagner [97] call the sequence fx n = x 1;n x J;n ; n 0g an AM-sequence, where AM stands for "approximate maximum-length". <p> In that case, Wang and Compagner [97] call the sequence fx n = x 1;n x J;n ; n 0g an AM-sequence, where AM stands for "approximate maximum-length". As shown in <ref> [91, 97] </ref>, the combined generator is equivalent to a Taus-worthe generator with (reducible) characteristic polynomial P (z) = P 1 (z) P J (z). The lattice structure and equidistribution properties of such combined generators are analyzed in [14, 91]. <p> As shown in [91, 97], the combined generator is equivalent to a Taus-worthe generator with (reducible) characteristic polynomial P (z) = P 1 (z) P J (z). The lattice structure and equidistribution properties of such combined generators are analyzed in <ref> [14, 91] </ref>. Tezuka and L'Ecuyer [91] suggest three specific combined generators, and give computer codes. TGFSRs can also be combined in a similar way and this is the subject of ongoing research. <p> As shown in [91, 97], the combined generator is equivalent to a Taus-worthe generator with (reducible) characteristic polynomial P (z) = P 1 (z) P J (z). The lattice structure and equidistribution properties of such combined generators are analyzed in [14, 91]. Tezuka and L'Ecuyer <ref> [91] </ref> suggest three specific combined generators, and give computer codes. TGFSRs can also be combined in a similar way and this is the subject of ongoing research. <p> MLCG with m = 2 31 1 and a = 630360016. G3. MLCG with m = 2 31 1 and a = 742938285. G4. CSD generator of Sherif and Dear [86]. G5. Combined generator in Fig. 3 of L'Ecuyer [48]. G6. Combined Tausworthe generator G1 of Tezuka and L'Ecuyer <ref> [91] </ref>. G7. Twisted GFSR with (r; s; p) = (25; 7; 32). G8. Subtract-with-borrow generator with (b; r; s; L) = (2 32 5; 43; 22; 1). G9.
Reference: [92] <author> S. Tezuka and P. L'Ecuyer, </author> <title> Analysis of Add-with-Carry and Subtract-with-Borrow Generators, </title> <booktitle> Proceedings of the 1992 Winter Simulation Conference, </booktitle> <publisher> IEEE Press (1992) 443-447. </publisher>
Reference-contexts: Tezuka and L'Ecuyer <ref> [92] </ref> have shown that AWC and SWB generators are essentially equivalent to MLCGs in the following sense. Let m = b k +b r 1 for AWC, and m = b k b r 1 (depending on the variant) for SWB.
Reference: [93] <author> S. Tezuka, P. L'Ecuyer, and R. Couture, </author> <title> On the Lattice Structure of the Add-with-Carry and Subtract-with-Borrow Random Number Generators, </title> <journal> ACM Transactions of Modeling and Computer Simulation, </journal> <note> To appear. </note>
Reference-contexts: When T t is replaced by the set of non-overlapping t-tuples, L t does not form a lattice in general [1]. The AWC/SWB generators described in x3.9 are equivalent to linear congruential generators, and therefore have a lattice structure. In <ref> [14, 93] </ref>, it is shown that this structure is always bad: in all dimensions t &gt; k, one has d t 1= p 3. It is also shown that combining an AWC/SWB generator with a LCG still yield an unfavorable lattice structure in large dimensions. <p> L'Ecuyer [48] gives examples of such implementations and explains how to do it in general. Other efficient ways of implementing MLCGs with large moduli are through the AWC and SWB generators discussed in x3.9. However, the latter generators always have a bad structure and must be avoided <ref> [15, 93] </ref>. 7.4. RETURNING VECTORS OF RANDOM NUMBERS James [41] observes that for fast generators, when the generator (procedure) returns one random number per call, the procedure call itself accounts for a large part of the time for generating the random number.
Reference: [94] <author> S. Tezuka and M. Fushimi, </author> <title> Calculation of Fibonacci Polynomials for GFSR Sequences with Low Discrepancies, </title> <note> Mathematics of Computation 60 (1993) To appear. 43 </note>
Reference-contexts: Steps in that direction have been made by Andre, Mullen, and Niederreiter [5]. For m = 2, they have computed a list of primitive polynomials of degree k 32 for which r (2) k 1 and r (t) is large for all t 5. Tezuka and Fushimi <ref> [94] </ref> extended those results to a list of polynomials for which r (2) = k and r (t) is large for t 6. Their associated sequences can also be generated more quickly than those of [5], with the GFSR implementation. 23 6.
Reference: [95] <author> J. P. R. Tootill, W. D. Robinson, and A. G. Adams, </author> <title> The Runs up-and-down Performance of Tausworthe Pseudo-Random Number Generators, </title> <journal> J. </journal> <note> of the ACM 18 (1971) 381-399. </note>
Reference-contexts: That includes computing bounds on the serial correlation [44], computing the results of the "run" test applied over the whole sequence of a Tausworthe generator <ref> [95] </ref>, computing the nearest pair of points over the whole period, or the minimal number of hyperplanes that cover all the points, etc.. See [44] for further details. 7. Implementation and Efficiency Considerations 7.1.
Reference: [96] <author> J. P. R. Tootill, W. D. Robinson, and D. J. Eagle, </author> <title> An Asymptotically Random Taus-worthe Sequence, </title> <journal> J. </journal> <note> of the ACM 20 (1973) 469-481. </note>
Reference-contexts: This approach is from Fushimi [35]. Tootill, Robinson, and Eagle <ref> [96] </ref> first suggested the GFSR implementation of Tausworthe sequences. Observe that a GFSR generator (with parallel MRG implementation) can also be viewed as a "bigger" MLCG as follows. <p> When the sequence is (t; bk=tc)-equidistributed for t = 1; : : : ; k, we say that it is maximally equidistributed . Some authors also call such a sequence asymptotically random <ref> [90, 96] </ref>. Full period digital multistep generators (7) are all (1; k)-equidistributed (for L = k), because each possible vector s n (except zero) occurs once and only once over the full period. Tausworthe [88] also showed that they are (bk=sc; s)-equidistributed. <p> Full period digital multistep generators (7) are all (1; k)-equidistributed (for L = k), because each possible vector s n (except zero) occurs once and only once over the full period. Tausworthe [88] also showed that they are (bk=sc; s)-equidistributed. Tootill, Robinson, and Eagle <ref> [96] </ref> found the following maximally equidistributed Tausworthe generator: P (z) = z 607 z 273 1, s = 512, and L = 23. In a similar vein, all GFSRs based on primitive polynomials are (k; 1)-equidistributed, because their first bit evolves according to a full period MRG of order k.
Reference: [97] <author> D. Wang and A. Compagner, </author> <title> On the Use of Reducible Polynomials as Random Number Generators, </title> <booktitle> Mathematics of Computation, </booktitle> <month> 60 </month> <year> (1993) </year> <month> 363-374. </month>
Reference-contexts: Their implementation turns out to be pretty fast, roughly as fast as that of a simple MLCG with prime modulus (depending on the computers and compilers), according to Tezuka [90]. Such combined generators are also recommended and studied in Wang and Compagner <ref> [97] </ref>. In a similar way, some MLCGs with very large moduli can be implemented efficiently via the combination of easily implementable MLCGs with small moduli. See x9 for further details. L'Ecuyer [48] gives examples of such implementations and explains how to do it in general. <p> Similar packages could also be implemented rather easily using other (perhaps longer-period) generators. 9. Combined Generators To increase the period, improve the statistical properties, and perhaps try to get rid of the lattice structure, different kinds of combined generators have been proposed. See <ref> [12, 41, 44, 49, 55, 60, 63, 64, 91, 97, 98] </ref> and other references given there. The structure of the hybrid generator thus obtained is often not well understood. Then, as pointed out by Ripley [83], using such generators may be a bit like playing ostrich. <p> Clearly, one should take distinct k j 's and the period ae could then be the prod-uct of the individual periods. In that case, Wang and Compagner <ref> [97] </ref> call the sequence fx n = x 1;n x J;n ; n 0g an AM-sequence, where AM stands for "approximate maximum-length". As shown in [91, 97], the combined generator is equivalent to a Taus-worthe generator with (reducible) characteristic polynomial P (z) = P 1 (z) P J (z). <p> In that case, Wang and Compagner [97] call the sequence fx n = x 1;n x J;n ; n 0g an AM-sequence, where AM stands for "approximate maximum-length". As shown in <ref> [91, 97] </ref>, the combined generator is equivalent to a Taus-worthe generator with (reducible) characteristic polynomial P (z) = P 1 (z) P J (z). The lattice structure and equidistribution properties of such combined generators are analyzed in [14, 91]. <p> In other words, this combination approach can be viewed as an efficient way of implementing Tausworthe generators with "good" characteristic polynomials. Compagner [13] and Wang and Compagner <ref> [97] </ref> also suggest the same kind of combination, and give supporting arguments. They show that the correlation structure of AM-sequences behaves very nicely in general.
Reference: [98] <author> B. A. Wichmann and I. D. Hill, </author> <title> An Efficient and Portable Pseudo-random Number Generator. </title> <note> Applied Statistics 31 (1982) 188-190. See also corrections and remarks in the same journal by Wichmann and Hill 33 (1984) 123; McLeod 34 (1985) 198-200; Zeisel 35 (1986) 89. 44 </note>
Reference-contexts: Similar packages could also be implemented rather easily using other (perhaps longer-period) generators. 9. Combined Generators To increase the period, improve the statistical properties, and perhaps try to get rid of the lattice structure, different kinds of combined generators have been proposed. See <ref> [12, 41, 44, 49, 55, 60, 63, 64, 91, 97, 98] </ref> and other references given there. The structure of the hybrid generator thus obtained is often not well understood. Then, as pointed out by Ripley [83], using such generators may be a bit like playing ostrich. <p> If x jn denotes the state of generator j at step n, define the combination: Z n = @ j=1 1 for some fixed integers ffi j . In [48], ffi j = (1) j1 and a specific generator are suggested. Wichmann and Hill <ref> [98] </ref> proposed a slightly different combination approach, which is a bit slower because it requires more divisions: U n = @ j=1 1 If each individual MLCG has full period m j 1, then the period of the latter is always equal to the least common multiple of m 1 1; <p> This MLCG does not depend on the ffi j 's. The equivalence of the Wichmann and Hill generator to a MLCG was already pointed out by Zeisel <ref> [98] </ref>. The results of [55] mean that (30) and (31) are almost equivalent.
References-found: 98

