URL: http://www.cse.ogi.edu/~barga/papers/hpts97_rsb.ps
Refering-URL: http://www.cse.ogi.edu/~barga/
Root-URL: http://www.cse.ogi.edu
Email: email: fbarga,caltong@cse.ogi.edu  
Title: Evolving Applications and Extended Transaction Processing How Can Conventional Transaction Processing Systems Catch Up?  
Author: Roger Barga and Calton Pu 
Address: P.O. Box 91000 Portland, OR 97291-1000  
Affiliation: Department of Computer Science and Engineering Oregon Graduate Institute of Science Technology  
Abstract-found: 0
Intro-found: 1
Reference: [BDG + 94] <author> A. Biliris, S. Dar, N. Gehani, H.V. Jagadish, and K. Ramamritham. </author> <title> Asset: A system for supporting extended transactions. </title> <booktitle> In Proceedings of 1994 ACM SIGMOD Conference, </booktitle> <pages> pages 44-53, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The techniques used by the extensions in transaction adapters are not novel. Indeed, other systems such as ASSET <ref> [BDG + 94] </ref>, DOMS [GHKM94] and the ACTA meta model [CR90] have proposed similar ideas.
Reference: [BP95] <author> Roger S. Barga and Calton Pu. </author> <title> A practical and modular method to implement extended transaction models. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: The extensions implemented by transaction adapters leverage, to the extent possible, transaction functionality already provided by the underlying TP monitor. The additional functionality that adapters provide supply the necessary building blocks for constructing a wide range of extended transactions <ref> [BP95, BP97] </ref>. Examples of this extended transaction functionality include structured relationships between transactions, dynamic transaction restructuring, recording and tracking inter-transaction dependencies, delegation of resources between transactions, specification of transaction management events and constraints on event occurrences, and relaxed notions of resource conflicts. <p> All interactions between the Reflective Transaction Framework and the TP monitor are within the boundaries carefully defined by protocols. To date, we have used the open implementation provided by the Reflective Trans action Framework to implement advanced transaction models <ref> [BP95] </ref> and semantics-based concurrency control protocols [BP97, BPZH95] on a conventional TP monitor. The contribution of the Reflective Transaction Framework, then, is a practical method to systematically extend the functionality of a conventional TP monitor to implement new extended transactions.
Reference: [BP96] <author> Roger S. Barga and Calton Pu. </author> <title> Reflecting on a legacy transaction processing monitor. </title> <booktitle> In Proceedings of the ACM Reflections '96 Conference, </booktitle> <address> Palo Alto, CA, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: Depending on the transaction extensions one wishes to implement, additional aspects of the underlying transaction system may need to be reified. As described in a companion paper <ref> [BP96] </ref>, we followed a systematic method to identify those aspects required to implement Page 2 advanced transaction models and semantics-based con--currency control. However, to ensure flexibility the Reflective Transaction Framework is designed to be incrementally extensible.
Reference: [BP97] <author> Roger S. Barga and Calton Pu. </author> <title> A reflective framework for implementing extended transactions. </title> <editor> In S. Jajodia and L. Kerschberg, editors, </editor> <title> Advances in Transaction Models and Mechanisms. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1997. </year>
Reference-contexts: The extensions implemented by transaction adapters leverage, to the extent possible, transaction functionality already provided by the underlying TP monitor. The additional functionality that adapters provide supply the necessary building blocks for constructing a wide range of extended transactions <ref> [BP95, BP97] </ref>. Examples of this extended transaction functionality include structured relationships between transactions, dynamic transaction restructuring, recording and tracking inter-transaction dependencies, delegation of resources between transactions, specification of transaction management events and constraints on event occurrences, and relaxed notions of resource conflicts. <p> All interactions between the Reflective Transaction Framework and the TP monitor are within the boundaries carefully defined by protocols. To date, we have used the open implementation provided by the Reflective Trans action Framework to implement advanced transaction models [BP95] and semantics-based concurrency control protocols <ref> [BP97, BPZH95] </ref> on a conventional TP monitor. The contribution of the Reflective Transaction Framework, then, is a practical method to systematically extend the functionality of a conventional TP monitor to implement new extended transactions. There are legitimate concerns about this approach of opening the implementation of a transaction processing system.
Reference: [BPZH95] <author> R.S. Barga, C. Pu, T. Zhou, </author> <title> and W.W. Hseush. A practical method for implementing semantics-based concurrency control. </title> <type> Technical Report OGI-CSE-95, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: All interactions between the Reflective Transaction Framework and the TP monitor are within the boundaries carefully defined by protocols. To date, we have used the open implementation provided by the Reflective Trans action Framework to implement advanced transaction models [BP95] and semantics-based concurrency control protocols <ref> [BP97, BPZH95] </ref> on a conventional TP monitor. The contribution of the Reflective Transaction Framework, then, is a practical method to systematically extend the functionality of a conventional TP monitor to implement new extended transactions. There are legitimate concerns about this approach of opening the implementation of a transaction processing system.
Reference: [CR90] <author> P.K. Chrysanthis and K. Ramamritham. </author> <title> ACTA: A framework for specifying and reasoning about transaction structure and behavior. </title> <booktitle> In Proceedings of the ACM SIGMOD Conference, </booktitle> <pages> pages 194-203, </pages> <year> 1990. </year> <pages> Page 6 </pages>
Reference-contexts: The techniques used by the extensions in transaction adapters are not novel. Indeed, other systems such as ASSET [BDG + 94], DOMS [GHKM94] and the ACTA meta model <ref> [CR90] </ref> have proposed similar ideas.
Reference: [GHKM94] <author> D. Georgakopoulos, M. Hornick, P. Krychniak, and F. Manola. </author> <title> Specification and management of extended transactions in a programmable transaction environment. </title> <booktitle> In Proceedings of the 1994 IEEE Conference on Data Engineering, </booktitle> <pages> pages 462-473, </pages> <month> Feb </month> <year> 1994. </year>
Reference-contexts: The techniques used by the extensions in transaction adapters are not novel. Indeed, other systems such as ASSET [BDG + 94], DOMS <ref> [GHKM94] </ref> and the ACTA meta model [CR90] have proposed similar ideas.
Reference: [Kic92] <author> Gregor Kiczales. </author> <title> Towards a new model of abstraction in software engineering. </title> <booktitle> In Proceedings of the IMSA'92 Workshop on Reflection and Meta-level Architectures, </booktitle> <year> 1992. </year> <note> See http://www.xerox.com/PARC/spl/eca/oi.html for updates. </note>
Reference-contexts: Instead, we propose a framework that carefully opens or exposes various aspects of a transaction processing system's functionality and allows programmers to reach in adjust selected system functionality to tailor the transaction services to the needs of their particular application. This is called an open implementation <ref> [Kic92] </ref>. While many would agree that the inflexibility of contemporary transaction processing systems does present serious problems in the implementation and deployment of extended transaction processing for advanced applications, the thought of an open implementation raises legitimate concerns.
Reference: [Moh94] <author> C. Mohan. </author> <title> Trends in transaction processing. </title> <booktitle> Keynote Speech at the 6th International Conference on the Management of Data, </booktitle> <year> 1994. </year>
Reference-contexts: This list is growing. Further, the ability of transactions to hide the effects of con-currency and failures makes them appropriate building blocks for structuring advanced distributed systems. Industry is embracing transactions in a big way, with a near explosion occurring in usage, requirements and sophistication of transaction processing <ref> [Moh94, SSU96] </ref>. Unfortunately, these new advanced applications present service demands which are poorly matched by the interfaces and functionality of contemporary transaction processing systems. Further, changing application requirements, as well as changes in hardware platforms, result in transaction processing requirements that are constantly evolving.
Reference: [PKH88] <author> C. Pu, G.E. Kaiser, and N. Hutchinson. </author> <title> Split-transactions for open-ended activities. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 27-36, </pages> <address> Los Angeles, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: However, the techniques are applied in a unique way to the problem of carefully extending the existing functionality of a conventional TP monitor. functions required to implement extended transactions A Simple Example The split/join transaction model was proposed for open-ended activities such as computer-aided design and manufacturing (CAD/CAM) <ref> [PKH88] </ref>. Open-ended activities are characterized by uncertain duration, uncertain developments and interaction with other concurrent activities. Due to these characteristics, sometimes it is desirable to release earlier modified data of a transaction to other transactions. The split/join transaction model provides two operations to dynamically restructure transactions, namely split and join.
Reference: [SSU96] <author> Avi Silbershatz, Mike Stonebraker, and Jeff Ull-man. </author> <title> Database research: Achievements and opportunities into the 21st century. </title> <journal> ACM SIGMOD Record, </journal> <volume> 25(1) </volume> <pages> 52-63, </pages> <month> March </month> <year> 1996. </year> <booktitle> Report of the NSF Workshop on the Future of Database Systems Research. </booktitle> <pages> Page 7 </pages>
Reference-contexts: This list is growing. Further, the ability of transactions to hide the effects of con-currency and failures makes them appropriate building blocks for structuring advanced distributed systems. Industry is embracing transactions in a big way, with a near explosion occurring in usage, requirements and sophistication of transaction processing <ref> [Moh94, SSU96] </ref>. Unfortunately, these new advanced applications present service demands which are poorly matched by the interfaces and functionality of contemporary transaction processing systems. Further, changing application requirements, as well as changes in hardware platforms, result in transaction processing requirements that are constantly evolving.
References-found: 11

