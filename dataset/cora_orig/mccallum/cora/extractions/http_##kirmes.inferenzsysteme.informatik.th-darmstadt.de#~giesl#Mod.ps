URL: http://kirmes.inferenzsysteme.informatik.th-darmstadt.de/~giesl/Mod.ps
Refering-URL: http://www.inferenzsysteme.informatik.tu-darmstadt.de/~giesl/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: thomas@cslab.ericsson.se  E-mail: giesl@informatik.tu-darmstadt.de  
Phone: 2  
Title: Modularity of Termination Using Dependency Pairs  
Author: Thomas Arts and Jurgen Giesl 
Address: AB, 126 25 Stockholm, Sweden,  64283 Darmstadt, Germany,  
Affiliation: 1 Computer Science Laboratory, Ericsson Telecom  FB Informatik, Darmstadt University of Technology, Alexanderstr. 10,  
Abstract: The framework of dependency pairs allows automated termination and innermost termination proofs for many TRSs where such proofs were not possible before. In this paper we present a refinement of this framework in order to prove termination in a modular way. Our modularity results significantly increase the class of term rewriting systems where termination resp. innermost termination can be proved automatically. Moreover, the modular approach to dependency pairs yields new modularity criteria which extend previous results in this area. In particular, existing results for modularity of innermost termination can easily be obtained as direct consequences of our new criteria. 
Abstract-found: 1
Intro-found: 1
Reference: [AG96] <author> T. Arts & J. Giesl, </author> <title> Termination of constructor systems. </title> <booktitle> In Proc. RTA-96, </booktitle> <volume> LNCS 1103, </volume> <pages> pp. 63-77, </pages> <address> New Brunswick, NJ, </address> <year> 1996. </year>
Reference-contexts: However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class. For that reason we developed the framework of dependency pairs <ref> [Art96, AG96, AG97a, AG97b, Art97] </ref> which allows to apply standard methods for termination proofs to such TRSs where they failed up to now. In this way, termination of many (also non-simply terminating) systems could be proved automatically.
Reference: [AG97a] <author> T. Arts & J. Giesl, </author> <title> Automatically proving termination where simplification orderings fail. </title> <booktitle> TAPSOFT '97, </booktitle> <volume> LNCS 1214, </volume> <pages> pp. 261-273, </pages> <address> Lille, France, </address> <year> 1997. </year>
Reference-contexts: However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class. For that reason we developed the framework of dependency pairs <ref> [Art96, AG96, AG97a, AG97b, Art97] </ref> which allows to apply standard methods for termination proofs to such TRSs where they failed up to now. In this way, termination of many (also non-simply terminating) systems could be proved automatically. <p> See [AG97c] for a collection of examples to demonstrate the power of these results. In Sect. 5 we give a comparison with related work and we conclude in Sect. 6. 2 Modular Termination with Dependency Pairs In <ref> [AG97a] </ref> we introduced the dependency pair technique to prove termination automatically. In this section we briefly recapitulate its basic concepts and present a new modular approach for automated termination proofs. In the following, the root of a term f (: : :) is the leading function symbol f . <p> In fact any finite sequence of the dependency pair (2) is a chain. As proved in <ref> [AG97a] </ref>, absence of infinite chains is a sufficient and necessary criterion for termination. Theorem 3 (Termination Criterion). A TRS R is terminating if and only if there exists no infinite R-chain. <p> Hence, (1) can never follow itself in a chain, because F (x 1 ; s (z 1 )) does not unify with F (x; c (y)). To estimate which dependency pairs may occur consecutive, the estimated dependency graph has been introduced, cf. <ref> [AG97a] </ref>. Definition 4 (Estimated Dependency Graph). The estimated dependency graph of a TRS R is the directed graph whose nodes are the dependency pairs and there is an arc from hs; ti to hv; wi if ren (cap (t)) and v are unifiable. <p> Hence, before synthesizing a suitable ordering some of the arguments of function symbols may be eliminated, cf. <ref> [AG97a] </ref>. For instance, in the inequalities (4) - (6) one may eliminate the second argument of the function symbol f. Then every term f (s; t) in the inequalities is replaced by f 0 (s) (where f 0 is a new unary function symbol).
Reference: [AG97b] <author> T. Arts & J. Giesl, </author> <title> Proving innermost normalisation automatically. </title> <booktitle> In Proc. RTA-97, </booktitle> <volume> LNCS 1232, </volume> <pages> pp. 157-172, </pages> <address> Sitges, Spain, </address> <year> 1997. </year>
Reference-contexts: However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class. For that reason we developed the framework of dependency pairs <ref> [Art96, AG96, AG97a, AG97b, Art97] </ref> which allows to apply standard methods for termination proofs to such TRSs where they failed up to now. In this way, termination of many (also non-simply terminating) systems could be proved automatically. <p> In our example this is essential, because there exists no quasi-simplification ordering satisfying all inequalities (4) - (9) (not even after elimination of arguments). Hence, without our modularity result, an automated termination proof with the dependency pair approach fails. 3 Modular Innermost Termination with Dependency Pairs In <ref> [AG97b] </ref> we showed that the dependency pair approach can also be modified in order to verify innermost termination. <p> In <ref> [AG97b] </ref> we proved that absence of infinite innermost chains is a sufficient and necessary criterion for innermost termination. Theorem 8 (Innermost Termination Criterion). A TRS R is innermost terminating if and only if there exists no infinite innermost R-chain. <p> is innermost terminating if for each cycle P in the estimated innermost dependency graph there exists a well-founded weakly monotonic quasi-ordering P where both P and &gt; P are closed under substitution, such that 2 Additional refinements for the automated checking of our innermost termination criterion can be found in <ref> [AG97b] </ref>. 8 * l P r for all rules l ! r in U R (P), * s P t for all dependency pairs from P, and * s &gt; P t for at least one dependency pair from P.
Reference: [AG97c] <author> T. Arts & J. Giesl, </author> <title> Modularity of termination using dependency pairs. </title> <type> Tech. Rep. </type> <institution> IBN 97/45, TU Darmstadt, </institution> <year> 1997. </year> <note> http://www.inferenzsysteme. informatik.tu-darmstadt.de/~reports/notes/ibn-97-45.ps </note>
Reference-contexts: Similarly, in Sect. 3 we present a modular approach for innermost termination proofs using dependency pairs. As shown in Sect. 4, these results imply new modularity criteria (which can also be used independently from the dependency pair technique). See <ref> [AG97c] </ref> for a collection of examples to demonstrate the power of these results. In Sect. 5 we give a comparison with related work and we conclude in Sect. 6. 2 Modular Termination with Dependency Pairs In [AG97a] we introduced the dependency pair technique to prove termination automatically. <p> This refinement allows automated termination and innermost termination proofs for many TRSs where such proofs were not possible before, cf. <ref> [AG97c] </ref>. We showed that our new modularity results extend previous results for modularity of innermost termination. Due to the framework of dependency pairs, we also obtain easy proofs for existing modularity theorems.
Reference: [Art96] <author> T. </author> <title> Arts, Termination by absence of infinite chains of dependency pairs. </title> <booktitle> In Proc. CAAP '96, </booktitle> <volume> LNCS 1059, </volume> <pages> pp. 196-210, </pages> <address> Linkoping, Sweden, </address> <year> 1996. </year>
Reference-contexts: However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class. For that reason we developed the framework of dependency pairs <ref> [Art96, AG96, AG97a, AG97b, Art97] </ref> which allows to apply standard methods for termination proofs to such TRSs where they failed up to now. In this way, termination of many (also non-simply terminating) systems could be proved automatically.
Reference: [Art97] <author> T. </author> <title> Arts, Automatically proving termination and innermost normalisation of term rewriting systems. </title> <type> PhD Thesis, </type> <institution> Utrecht Univ., </institution> <address> The Netherlands, </address> <year> 1997. </year>
Reference-contexts: However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class. For that reason we developed the framework of dependency pairs <ref> [Art96, AG96, AG97a, AG97b, Art97] </ref> which allows to apply standard methods for termination proofs to such TRSs where they failed up to now. In this way, termination of many (also non-simply terminating) systems could be proved automatically.
Reference: [Der87] <author> N. Dershowitz, </author> <title> Termination of rewriting. </title> <journal> JSC, </journal> <volume> 3 </volume> <pages> 69-116, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction Termination is one of the most important properties of a term rewriting system (TRS). While in general this problem is undecidable [HL78], several methods for proving termination have been developed (for surveys see e.g. <ref> [Der87, Ste95, DH95] </ref>). However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class. <p> For example consider the following TRS with the constructors s and c and the defined symbol f. f (x; c (y)) ! f (x; s (f (y; y))) Most methods for automated termination proofs are restricted to simplification orderings <ref> [Der87, Ste95] </ref>.
Reference: [Der94] <author> N. Dershowitz, </author> <title> Hierarchical Termination. </title> <booktitle> In Proc. CTRS-94, </booktitle> <volume> LNCS 968, </volume> <pages> pp. 89-105, </pages> <address> Jerusalem, Israel, </address> <year> 1994. </year>
Reference-contexts: For example, many systems are hierarchical combinations of TRSs that do not only share constructors, but where one subsystem contains defined symbols of the other subsystem. Termination is only proved modular for hierarchical combinations of several restricted forms <ref> [Der94, FJ95] </ref>. The modularity results for innermost termination are less restrictive than those for termination. Innermost termination is modular for direct sums and for TRSs with shared constructors [Gra95], for composable constructor systems [MT93], for composable TRSs [Ohl95], and for proper extensions [KR95], which are special hierarchical combinations. <p> Such systems occur frequently in practice. Hence, our results significantly extend the class of TRSs where innermost termination can be proved in a modular way. Another modularity criterion for hierarchical combinations is due to Der-showitz <ref> [Der94] </ref>. Here, occurrences of D 0 -symbols in recursive calls of D 1 -symbols are allowed, but only if R 1 is oblivious of the R 0 -rules, i.e. termination of R 1 must not depend on the R 0 -rules.
Reference: [DH95] <author> N. Dershowitz & C. Hoot, </author> <title> Natural termination. </title> <journal> TCS, </journal> <volume> 142(2) </volume> <pages> 179-207, </pages> <year> 1995. </year> <month> 14 </month>
Reference-contexts: 1 Introduction Termination is one of the most important properties of a term rewriting system (TRS). While in general this problem is undecidable [HL78], several methods for proving termination have been developed (for surveys see e.g. <ref> [Der87, Ste95, DH95] </ref>). However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class.
Reference: [Dro89] <author> K. Drosten, </author> <title> Termersetzungssysteme. </title> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: The aim of this paper is to refine the dependency pair approach in order to allow modular termination proofs using dependency pairs. Although in general, termination is not modular for the direct sum <ref> [Toy87, Dro89, TKB95] </ref>, i.e. the partition of a TRS into subsystems with disjoint signatures, this modularity property holds for TRSs of a special form [Rus87, Mid89, Gra94, TKB95, SMP95].
Reference: [FJ95] <author> M. Fernandez & J.-P. Jouannaud, </author> <title> Modular termination of term rewriting systems revisited. </title> <booktitle> In Proc. 10th Workshop on Specification of Abstract Data Types, </booktitle> <volume> LNCS 906, </volume> <pages> pp. 255-273, </pages> <address> S. Margherita, Italy, </address> <year> 1995. </year>
Reference-contexts: For example, many systems are hierarchical combinations of TRSs that do not only share constructors, but where one subsystem contains defined symbols of the other subsystem. Termination is only proved modular for hierarchical combinations of several restricted forms <ref> [Der94, FJ95] </ref>. The modularity results for innermost termination are less restrictive than those for termination. Innermost termination is modular for direct sums and for TRSs with shared constructors [Gra95], for composable constructor systems [MT93], for composable TRSs [Ohl95], and for proper extensions [KR95], which are special hierarchical combinations. <p> However, this criterion is not applicable for the sum and weight-example, because termination of the weight-rules in fact depends on the result of sum (n*m*x; 0*x). An alternative modularity result for hierarchical combinations was presented by Fernandez and Jouannaud <ref> [FJ95] </ref>. However, their result is restricted to systems where the arguments of recursive calls in R 1 decrease w.r.t. the subterm relation (compared as multisets or lexicographically).
Reference: [Gie95] <author> J. Giesl, </author> <title> Generating polynomial orderings for termination proofs. </title> <booktitle> In Proc. RTA-95, </booktitle> <volume> LNCS 914, </volume> <pages> pp. 426-431, </pages> <address> Kaiserslautern, Germany, </address> <year> 1995. </year>
Reference-contexts: For the first system one can use a polynomial interpretation mapping f (x; y; z) to x+y+z and c (x) to 5x+1 [Lan79]. Methods for the automated generation of polynomial orderings have for instance been developed in <ref> [Ste94, Gie95] </ref>. For the second system one can use the lpo with the precedence f . s and f . c.
Reference: [Gra94] <author> B. Gramlich, </author> <title> Generalized sufficient conditions for modular termination of rewriting. </title> <journal> Appl. Algebra in Engineering, Comm. & Comp., </journal> <volume> 5 </volume> <pages> 131-158, </pages> <year> 1994. </year>
Reference-contexts: Although in general, termination is not modular for the direct sum [Toy87, Dro89, TKB95], i.e. the partition of a TRS into subsystems with disjoint signatures, this modularity property holds for TRSs of a special form <ref> [Rus87, Mid89, Gra94, TKB95, SMP95] </ref>. For a survey see e.g. [Mid90, Ohl94, Gra96a]. ? Appeared in the Proceedings of the 9th International Conference on Rewriting Techniques and Applications (RTA-98), Tsukuba, Japan, LNCS 1379, 1998. This work was partially supported by the Deutsche Forschungsgemeinschaft under grants no.
Reference: [Gra95] <author> B. Gramlich, </author> <title> Abstract relations between restricted termination and confluence properties of rewrite systems. </title> <journal> Fundamenta Informaticae, </journal> <volume> 24 </volume> <pages> 3-23, </pages> <year> 1995. </year>
Reference-contexts: This work was partially supported by the Deutsche Forschungsgemeinschaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'. However, a TRS often cannot be split into subsystems with disjoint signa-tures. Therefore, partitions into subsystems which may at least have constructors in common have also been considered <ref> [KO92, MT93, Gra95, MZ97] </ref>. Nevertheless, in practice these results often cannot be applied for automated termination proofs, either. For example, many systems are hierarchical combinations of TRSs that do not only share constructors, but where one subsystem contains defined symbols of the other subsystem. <p> Termination is only proved modular for hierarchical combinations of several restricted forms [Der94, FJ95]. The modularity results for innermost termination are less restrictive than those for termination. Innermost termination is modular for direct sums and for TRSs with shared constructors <ref> [Gra95] </ref>, for composable constructor systems [MT93], for composable TRSs [Ohl95], and for proper extensions [KR95], which are special hierarchical combinations. As innermost termination implies termination for several classes of TRSs [Gra95, Gra96b], these results can also be used for termination proofs of such systems. <p> Innermost termination is modular for direct sums and for TRSs with shared constructors [Gra95], for composable constructor systems [MT93], for composable TRSs [Ohl95], and for proper extensions [KR95], which are special hierarchical combinations. As innermost termination implies termination for several classes of TRSs <ref> [Gra95, Gra96b] </ref>, these results can also be used for termination proofs of such systems. For example, this holds for locally confluent overlay systems (and in particular for non-overlapping TRSs). <p> Sect. 5.2 gives a comparison with results on hierarchical combinations. 5.1 Shared Constructors and Composable TRSs By the framework of the previous sections we can easily prove that innermost termination is modular for composable TRSs [Ohl95] and hence also for TRSs with disjoint sets of defined symbols and shared constructors <ref> [Gra95] </ref>.
Reference: [Gra96a] <author> B. Gramlich, </author> <title> Termination and confluence properties of structured rewrite systems. </title> <type> PhD Thesis, </type> <institution> Universitat Kaiserslautern, Germany, </institution> <year> 1996. </year>
Reference-contexts: Although in general, termination is not modular for the direct sum [Toy87, Dro89, TKB95], i.e. the partition of a TRS into subsystems with disjoint signatures, this modularity property holds for TRSs of a special form [Rus87, Mid89, Gra94, TKB95, SMP95]. For a survey see e.g. <ref> [Mid90, Ohl94, Gra96a] </ref>. ? Appeared in the Proceedings of the 9th International Conference on Rewriting Techniques and Applications (RTA-98), Tsukuba, Japan, LNCS 1379, 1998. This work was partially supported by the Deutsche Forschungsgemeinschaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'.
Reference: [Gra96b] <author> B. Gramlich, </author> <title> On proving termination by innermost termination. </title> <booktitle> In Proc. RTA-96, </booktitle> <volume> LNCS 1103, </volume> <pages> pp. 93-107, </pages> <address> New Brunswick, NJ, </address> <year> 1996. </year>
Reference-contexts: Innermost termination is modular for direct sums and for TRSs with shared constructors [Gra95], for composable constructor systems [MT93], for composable TRSs [Ohl95], and for proper extensions [KR95], which are special hierarchical combinations. As innermost termination implies termination for several classes of TRSs <ref> [Gra95, Gra96b] </ref>, these results can also be used for termination proofs of such systems. For example, this holds for locally confluent overlay systems (and in particular for non-overlapping TRSs).
Reference: [HL78] <author> G. Huet & D. Lankford, </author> <title> On the uniform halting problem for term rewriting systems. </title> <type> Technical Report 283, </type> <institution> INRIA, Le Chesnay, France, </institution> <year> 1978. </year>
Reference-contexts: 1 Introduction Termination is one of the most important properties of a term rewriting system (TRS). While in general this problem is undecidable <ref> [HL78] </ref>, several methods for proving termination have been developed (for surveys see e.g. [Der87, Ste95, DH95]). However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class.
Reference: [KL80] <author> S. Kamin & J.-J. Levy, </author> <title> Two generalizations of the recursive path ordering. </title> <institution> Department of Computer Science, University of Illinois, IL, </institution> <year> 1980. </year>
Reference-contexts: Now the inequalities resulting from (4) - (6) are satisfied by the lexicographic path ordering (lpo) where subterms are compared right-to-left <ref> [KL80] </ref>. For the inequalities (7) - (9) we again delete the second argument of f. Then these inequalities are also satisfied by the lpo (with the precedence F . s; F . c), but this time subterms are compared left-to-right.
Reference: [KR95] <author> M. R. K. Krishna Rao, </author> <title> Modular proofs for completeness of hierarchical term rewriting systems. </title> <journal> TCS, </journal> <volume> 151 </volume> <pages> 487-512, </pages> <year> 1995. </year>
Reference-contexts: The modularity results for innermost termination are less restrictive than those for termination. Innermost termination is modular for direct sums and for TRSs with shared constructors [Gra95], for composable constructor systems [MT93], for composable TRSs [Ohl95], and for proper extensions <ref> [KR95] </ref>, which are special hierarchical combinations. As innermost termination implies termination for several classes of TRSs [Gra95, Gra96b], these results can also be used for termination proofs of such systems. For example, this holds for locally confluent overlay systems (and in particular for non-overlapping TRSs). <p> proof serves to illustrate the connections between our criteria and existing modularity results. 12 Note that our results extend modularity to a much larger class of TRSs, e.g. they also allow a splitting into non-composable subsystems which share defined symbols as demonstrated in Sect. 4.2. 5.2 Proper Extensions Krishna Rao <ref> [KR95] </ref> proved that innermost termination is modular for a certain form of hierarchical combinations, viz. so-called proper extensions. In this section we show that for finite TRSs this is also a direct consequence of our results. <p> each rewrite rule l ! r 2 R 1 satisfies the following condition: For every subterm t of r, if root (t) 2 D 0 1 and root (t) -d root (l), then t contains no symbols from D 0 [ D 0 1 except at the root position, cf. <ref> [KR95] </ref>. For instance, in the sum and weight-example from Sect. 4.1 we have D 0 = fsumg, D 0 1 = fweightg (because weight depends on the definition of sum), and D 1 1 = ;. <p> Thus, in a proper extension functions depending on R 0 are never called within a recursive call of R 1 -functions. Cor. 13 and 14 imply the following result of <ref> [KR95] </ref> Theorem 16 (Modularity for Proper Extensions). Let R 1 (D 1 ; C 1 ; R 1 ) be a proper extension of R 0 (D 0 ; C 0 ; R 0 ).
Reference: [KO92] <author> M. Kurihara & A. Ohuchi, </author> <title> Modularity of simple termination of term rewriting systems with shared constructors. </title> <journal> TCS, </journal> <volume> 103 </volume> <pages> 273-282, </pages> <year> 1992. </year>
Reference-contexts: This work was partially supported by the Deutsche Forschungsgemeinschaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'. However, a TRS often cannot be split into subsystems with disjoint signa-tures. Therefore, partitions into subsystems which may at least have constructors in common have also been considered <ref> [KO92, MT93, Gra95, MZ97] </ref>. Nevertheless, in practice these results often cannot be applied for automated termination proofs, either. For example, many systems are hierarchical combinations of TRSs that do not only share constructors, but where one subsystem contains defined symbols of the other subsystem.
Reference: [Lan79] <author> D. S. Lankford, </author> <title> On proving term rewriting systems are noetherian. </title> <type> Technical Report Memo MTP-3, </type> <institution> Louisiana Tech. University, Ruston, LA, </institution> <year> 1979. </year>
Reference-contexts: In fact, both subsystems are even terminating as can easily be proved automatically. For the first system one can use a polynomial interpretation mapping f (x; y; z) to x+y+z and c (x) to 5x+1 <ref> [Lan79] </ref>. Methods for the automated generation of polynomial orderings have for instance been developed in [Ste94, Gie95]. For the second system one can use the lpo with the precedence f . s and f . c.
Reference: [Mid89] <author> A. Middeldorp, </author> <title> A sufficient condition for the termination of the direct sum of term rewriting systems. </title> <booktitle> LICS '89, </booktitle> <pages> pp. 396-401, </pages> <address> Pacific Grove, CA, </address> <year> 1989. </year>
Reference-contexts: Although in general, termination is not modular for the direct sum [Toy87, Dro89, TKB95], i.e. the partition of a TRS into subsystems with disjoint signatures, this modularity property holds for TRSs of a special form <ref> [Rus87, Mid89, Gra94, TKB95, SMP95] </ref>. For a survey see e.g. [Mid90, Ohl94, Gra96a]. ? Appeared in the Proceedings of the 9th International Conference on Rewriting Techniques and Applications (RTA-98), Tsukuba, Japan, LNCS 1379, 1998. This work was partially supported by the Deutsche Forschungsgemeinschaft under grants no.
Reference: [Mid90] <author> A. Middeldorp, </author> <title> Modular properties of term rewriting systems. </title> <type> PhD Thesis, </type> <institution> Free University Amsterdam, </institution> <address> The Netherlands, </address> <year> 1990. </year>
Reference-contexts: Although in general, termination is not modular for the direct sum [Toy87, Dro89, TKB95], i.e. the partition of a TRS into subsystems with disjoint signatures, this modularity property holds for TRSs of a special form [Rus87, Mid89, Gra94, TKB95, SMP95]. For a survey see e.g. <ref> [Mid90, Ohl94, Gra96a] </ref>. ? Appeared in the Proceedings of the 9th International Conference on Rewriting Techniques and Applications (RTA-98), Tsukuba, Japan, LNCS 1379, 1998. This work was partially supported by the Deutsche Forschungsgemeinschaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'.
Reference: [MT93] <author> A. Middeldorp & Y. Toyama, </author> <title> Completeness of combinations of constructor systems. </title> <journal> JSC, </journal> <volume> 15 </volume> <pages> 331-348, </pages> <year> 1993. </year>
Reference-contexts: This work was partially supported by the Deutsche Forschungsgemeinschaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'. However, a TRS often cannot be split into subsystems with disjoint signa-tures. Therefore, partitions into subsystems which may at least have constructors in common have also been considered <ref> [KO92, MT93, Gra95, MZ97] </ref>. Nevertheless, in practice these results often cannot be applied for automated termination proofs, either. For example, many systems are hierarchical combinations of TRSs that do not only share constructors, but where one subsystem contains defined symbols of the other subsystem. <p> Termination is only proved modular for hierarchical combinations of several restricted forms [Der94, FJ95]. The modularity results for innermost termination are less restrictive than those for termination. Innermost termination is modular for direct sums and for TRSs with shared constructors [Gra95], for composable constructor systems <ref> [MT93] </ref>, for composable TRSs [Ohl95], and for proper extensions [KR95], which are special hierarchical combinations. As innermost termination implies termination for several classes of TRSs [Gra95, Gra96b], these results can also be used for termination proofs of such systems.
Reference: [MZ97] <author> A. Middeldorp & H. Zantema, </author> <title> Simple termination of rewrite systems. </title> <journal> TCS, </journal> <volume> 175 </volume> <pages> 127-158, </pages> <year> 1997. </year>
Reference-contexts: This work was partially supported by the Deutsche Forschungsgemeinschaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'. However, a TRS often cannot be split into subsystems with disjoint signa-tures. Therefore, partitions into subsystems which may at least have constructors in common have also been considered <ref> [KO92, MT93, Gra95, MZ97] </ref>. Nevertheless, in practice these results often cannot be applied for automated termination proofs, either. For example, many systems are hierarchical combinations of TRSs that do not only share constructors, but where one subsystem contains defined symbols of the other subsystem.
Reference: [Ohl94] <author> E. Ohlebusch, </author> <title> On the modularity of termination of term rewriting systems. </title> <journal> TCS, </journal> <volume> 136 </volume> <pages> 333-360, </pages> <year> 1994. </year>
Reference-contexts: Although in general, termination is not modular for the direct sum [Toy87, Dro89, TKB95], i.e. the partition of a TRS into subsystems with disjoint signatures, this modularity property holds for TRSs of a special form [Rus87, Mid89, Gra94, TKB95, SMP95]. For a survey see e.g. <ref> [Mid90, Ohl94, Gra96a] </ref>. ? Appeared in the Proceedings of the 9th International Conference on Rewriting Techniques and Applications (RTA-98), Tsukuba, Japan, LNCS 1379, 1998. This work was partially supported by the Deutsche Forschungsgemeinschaft under grants no. Wa 652/7-1,2 as part of the focus program `Deduktion'.
Reference: [Ohl95] <author> E. Ohlebusch, </author> <title> Modular properties of composable term rewriting systems. </title> <journal> JSC, </journal> <volume> 1 </volume> <pages> 1-42, </pages> <year> 1995. </year>
Reference-contexts: Termination is only proved modular for hierarchical combinations of several restricted forms [Der94, FJ95]. The modularity results for innermost termination are less restrictive than those for termination. Innermost termination is modular for direct sums and for TRSs with shared constructors [Gra95], for composable constructor systems [MT93], for composable TRSs <ref> [Ohl95] </ref>, and for proper extensions [KR95], which are special hierarchical combinations. As innermost termination implies termination for several classes of TRSs [Gra95, Gra96b], these results can also be used for termination proofs of such systems. For example, this holds for locally confluent overlay systems (and in particular for non-overlapping TRSs). <p> Sect. 5.1 focuses on composable TRSs and Sect. 5.2 gives a comparison with results on hierarchical combinations. 5.1 Shared Constructors and Composable TRSs By the framework of the previous sections we can easily prove that innermost termination is modular for composable TRSs <ref> [Ohl95] </ref> and hence also for TRSs with disjoint sets of defined symbols and shared constructors [Gra95]. <p> ; and if both systems contain all rewrite rules that define a defined symbol whenever that symbol is shared, i.e. fl ! r j root (l) 2 D 0 " D 1 g R 0 " R 1 : Now Cor. 14 immediately implies 5 the following result of Ohlebusch <ref> [Ohl95] </ref>. Theorem 15 (Modularity for Composable TRSs). Let R 0 (D 0 ; C 0 ; R 0 ) and R 1 (D 1 ; C 1 ; R 1 ) be composable TRSs.
Reference: [Rus87] <author> M. Rusinowitch, </author> <title> On termination of the direct sum of term-rewriting systems. </title> <journal> Information Processing Letters, </journal> <volume> 26 </volume> <pages> 65-70, </pages> <year> 1987. </year>
Reference-contexts: Although in general, termination is not modular for the direct sum [Toy87, Dro89, TKB95], i.e. the partition of a TRS into subsystems with disjoint signatures, this modularity property holds for TRSs of a special form <ref> [Rus87, Mid89, Gra94, TKB95, SMP95] </ref>. For a survey see e.g. [Mid90, Ohl94, Gra96a]. ? Appeared in the Proceedings of the 9th International Conference on Rewriting Techniques and Applications (RTA-98), Tsukuba, Japan, LNCS 1379, 1998. This work was partially supported by the Deutsche Forschungsgemeinschaft under grants no.
Reference: [SMP95] <author> M. Schmidt-Schau, M. Marchiori, & S. E. Panitz, </author> <title> Modular termination of r-consistent and left-linear term rewriting systems. </title> <journal> TCS, </journal> <volume> 149 </volume> <pages> 361-374, </pages> <year> 1995. </year>
Reference-contexts: Although in general, termination is not modular for the direct sum [Toy87, Dro89, TKB95], i.e. the partition of a TRS into subsystems with disjoint signatures, this modularity property holds for TRSs of a special form <ref> [Rus87, Mid89, Gra94, TKB95, SMP95] </ref>. For a survey see e.g. [Mid90, Ohl94, Gra96a]. ? Appeared in the Proceedings of the 9th International Conference on Rewriting Techniques and Applications (RTA-98), Tsukuba, Japan, LNCS 1379, 1998. This work was partially supported by the Deutsche Forschungsgemeinschaft under grants no.
Reference: [Ste94] <author> J. Steinbach, </author> <title> Generating polynomial orderings. </title> <journal> Information Processing Letters, </journal> <volume> 49 </volume> <pages> 85-93, </pages> <year> 1994. </year>
Reference-contexts: For the first system one can use a polynomial interpretation mapping f (x; y; z) to x+y+z and c (x) to 5x+1 [Lan79]. Methods for the automated generation of polynomial orderings have for instance been developed in <ref> [Ste94, Gie95] </ref>. For the second system one can use the lpo with the precedence f . s and f . c.
Reference: [Ste95] <author> J. Steinbach, </author> <title> Simplification orderings: history of results. </title> <journal> Fundamenta Infor-maticae, </journal> <volume> 24 </volume> <pages> 47-87, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction Termination is one of the most important properties of a term rewriting system (TRS). While in general this problem is undecidable [HL78], several methods for proving termination have been developed (for surveys see e.g. <ref> [Der87, Ste95, DH95] </ref>). However, most methods that are amenable to automation are restricted to the generation of simplification orderings and there exist numerous important TRSs whose termination cannot be proved by orderings of this restricted class. <p> For example consider the following TRS with the constructors s and c and the defined symbol f. f (x; c (y)) ! f (x; s (f (y; y))) Most methods for automated termination proofs are restricted to simplification orderings <ref> [Der87, Ste95] </ref>.
Reference: [Toy87] <author> Y. Toyama, </author> <title> Counterexamples to the termination for the direct sum of term rewriting systems. </title> <journal> Information Processing Letters, </journal> <volume> 25 </volume> <pages> 141-143, </pages> <year> 1987. </year>
Reference-contexts: The aim of this paper is to refine the dependency pair approach in order to allow modular termination proofs using dependency pairs. Although in general, termination is not modular for the direct sum <ref> [Toy87, Dro89, TKB95] </ref>, i.e. the partition of a TRS into subsystems with disjoint signatures, this modularity property holds for TRSs of a special form [Rus87, Mid89, Gra94, TKB95, SMP95].
Reference: [TKB95] <author> Y. Toyama, J. W. Klop, & H. P. Barendregt, </author> <title> Termination for direct sums of left-linear complete term rewriting systems. </title> <journal> J. ACM, </journal> <volume> 42 </volume> <pages> 1275-1304, </pages> <year> 1995. </year> <month> 15 </month>
Reference-contexts: The aim of this paper is to refine the dependency pair approach in order to allow modular termination proofs using dependency pairs. Although in general, termination is not modular for the direct sum <ref> [Toy87, Dro89, TKB95] </ref>, i.e. the partition of a TRS into subsystems with disjoint signatures, this modularity property holds for TRSs of a special form [Rus87, Mid89, Gra94, TKB95, SMP95]. <p> Although in general, termination is not modular for the direct sum [Toy87, Dro89, TKB95], i.e. the partition of a TRS into subsystems with disjoint signatures, this modularity property holds for TRSs of a special form <ref> [Rus87, Mid89, Gra94, TKB95, SMP95] </ref>. For a survey see e.g. [Mid90, Ohl94, Gra96a]. ? Appeared in the Proceedings of the 9th International Conference on Rewriting Techniques and Applications (RTA-98), Tsukuba, Japan, LNCS 1379, 1998. This work was partially supported by the Deutsche Forschungsgemeinschaft under grants no.
References-found: 33

