URL: http://www.graphics.stanford.edu/projects/flashg/studies/scenes/triangles.ps
Refering-URL: http://www.graphics.stanford.edu/projects/flashg/studies/scenes/
Root-URL: http://www.cs.stanford.edu
Email: e-mail address: michael.deering@Eng.Sun.COM  
Title: Data Complexity for Virtual Reality: Where do all the Triangles Go?  
Author: Michael F. Deering 
Note: 1.0 INTRODUCTION 2.0 WHY TRIANGLES?  
Address: 2550 Garcia Avenue, Mountain View, CA 94043  
Affiliation: Sun Microsystems Computer Corporation  
Abstract: Screen space rendering statistics were gathered from 150 3D objects, each modeled by between 2K and 40K triangles. While there is wide variance by individual object, the overall trend is that the distribution of triangles by screen size is roughly exponential in the direction of small triangles. From a subjective esthetics point of view, tessellations required 10K visible triangles per quarter million pixels covered for acceptable results. The ability of modern computers to simulate the interaction of human senses with the physical world is the technology that makes Virtual Reality possible. It falls to the technology of 3D computer graphics to attend to the needs of the most important of these senses: vision. Everything we see in virtual space must be created by computer graphics rendering techniques. Limitations of computer graphics technology thus limit the visuals that can be used in Virtual Reality applications. Most current 3D graphics rendering hardware requires the virtual world to be represented at some level as collections of 3D triangles. Both the basic shape and fine detail of virtual objects are captured by these triangles. Beyond mere esthetics, some minimum quantity of triangles must be used to make objects both recognizable and functional. The brutally minimalistic triangulations of most present Virtual Reality systems are at best 3D icons; industrial Virtual Reality applications will require more detail. To gain a better understanding of this representation complexity, a study was made of the rendering characteristics of 150 objects, ranging from 2K through 40K triangles in size. Combined with theoretical analysis, estimates of realistic display requirements for Virtual Reality applications can be made. Models of current and future hardware triangle rendering throughput, along with estimates of useful rendering frame rates, yields an envelope of feasible scene triangle budgets, which can be contrasted with the application needs. It is beyond the scope of this paper to exhaustively document every alternative rendering primitive to the triangle, and describe why in many cases triangles require less computation. The point is not that triangles are the best rendering primitives; for example both NURBS and texture mapping are qualitatively superior; but that most such techniques achieve higher quality at very high computational costs. This section will briey discuss some of the alternatives to triangles, and the trade-offs involved. What about the lowly line? Most industrial 3D graphics used in the world today is still done with 3D lines, and modern antialiasing line rendering techniques can achieve very high quality results. The problem with lines is that for Virtual Reality they dont do a very good job of mimicking real 
Abstract-found: 1
Intro-found: 0
Reference: [Abi-Ezzi91] <author> Abi-Ezzi, Salim and L. Shirman. </author> <title> Tessellation of Curved Surfaces under Highly Varying Transformations. </title> <booktitle> Proc. Eurographics '91 (Vienna, </booktitle> <address> Austria, </address> <month> September </month> <year> 1991), </year> <pages> 385-397. </pages> <note> tigerH tigerM tigerL 85skylark 86taurus 80deloreanH duneM This 1 2 4 8 16 32 64 128 256 2 8 32 128 Stereo Frames per second K Triangles per scene Triangles per second implied rendering rate 32K 128K 512K 2M 8M 32M That 1 2 4 8 16 32 64 128 256 2 8 32 128 Stereo frames K Triangles per scene Triangles per second implied rendering rate 32K 128K 512K 2M 8M 32M per second </note>
Reference-contexts: For rendering, NURBS allow a compact representation that can be diced up to dif ferent degrees of fineness depending on the needs of a particular frame of rendering <ref> [Abi-Ezzi91] </ref>. Most NURBS implementations at some level eventually decompose the NURBS into triangles. However , the potential savings in the number of triangles dynamically generated historically have been eaten up by the overhead of evaluating the NURBS and their trimming curves.
References-found: 1

