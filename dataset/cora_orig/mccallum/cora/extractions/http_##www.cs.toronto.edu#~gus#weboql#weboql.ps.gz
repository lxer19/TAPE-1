URL: http://www.cs.toronto.edu/~gus/weboql/weboql.ps.gz
Refering-URL: http://www.cs.toronto.edu/~gus/weboql/moreinfo.html
Root-URL: 
Abstract: Copyright 1998 Institute of Electrical and Electronics Engineers. Reprinted, with permission from Proc. of ICDE98, February 1998, Orlando, Florida. This material is posted here with permission of the IEEE. Internal or personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution must be obtained from the IEEE by sending a blank email message to info.pub.permission@ieee.org. By choosing to view this document, you agree to all provisions of the copyright laws protecting it. Abstract The widespread use of the Web has originated several new data management problems, such as extracting data from Web pages and making databases accessible from Web browsers, and has renewed the interest in problems that had appeared before in other contexts, such as querying graphs, semistructured data and structured documents. Several systems and languages have been proposed for solving each of these Web-data management problems, but none of these systems addresses all the problems from a unified perspective. Many of these problems essentially amount to data restructuring: we have information represented according to certain structure and we want to construct another representation of (part of) it using a different structure. We present the WebOQL system, which supports a general class of data restructuring operations in the context of the Web. WebOQL synthesizes ideas from query languages for the Web, for semistructured data and for website restructuring. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul, S. Cluet, V . Christophides, T. Milo, G. Moerkotte, J. Simeon, </author> <title> Querying Documents in Object Databases, </title> <note> in Journal of Digital Libraries 1(1)5-19, </note> <year> 1997. </year>
Reference-contexts: Problems that have been revisited due to the popularity of the Web include: querying structured documents <ref> [1, 12, 14] </ref>, querying semistructured data [3, 8] and querying graphs [19]. Many systems and languages have been proposed for solving each of these Web-data management problems, but none of these systems provides a framework for approaching the problems from a unified perspective. <p> The usual approach to querying structured documents is to use custom-tailored wrapper programs that map documents to instances of some data model <ref> [1, 7, 12, 14, 15] </ref>; the main disadvantage of this approach is that a wrapper program must be built for each new document (or set of documents with similar structure), usually using either a parser generator or a Perl-like filtering language. <p> In WebOQL, URLs are just strings. As we will see, this approach is very flexible and simpler. Queries can generate URLs just by catenating other strings. Structured Documents. The idea of querying structured documents has been previously investigated in [14], in the context of office information systems, and in <ref> [1] </ref>, in the context of the integration of SGML with databases. Although largely different from one another, both approaches are strongly typed. In [1], documents are mapped to an instance of an object oriented database by means of semantic actions attached to a grammar. <p> Structured Documents. The idea of querying structured documents has been previously investigated in [14], in the context of office information systems, and in <ref> [1] </ref>, in the context of the integration of SGML with databases. Although largely different from one another, both approaches are strongly typed. In [1], documents are mapped to an instance of an object oriented database by means of semantic actions attached to a grammar. Then the database representation can be queried using the query language of the database.
Reference: [2] <author> S. Abiteboul, P. Kanellakis, </author> <title> Object identity as a query language primitive, </title> <booktitle> in Proc. of ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 159-173, </pages> <year> 1989. </year>
Reference-contexts: WebOQL can compute transitive closure, but the characterization of its expressive power is not fully precise yet. Both Araneus and Strudel handle URLs similarly to oids in OODBMSs: they provide facilities for creating URLs using Skolem functions <ref> [2] </ref>, and for assigning URLs to documents. In WebOQL, URLs are just strings. As we will see, this approach is very flexible and simpler. Queries can generate URLs just by catenating other strings. Structured Documents.
Reference: [3] <author> S. Abiteboul, D. Quass, J. McHugh, J. Widom, J.L. Wiener, </author> <title> The Lorel Query Language for Semistructured Data, </title> <note> in Journal of Digital Libraries 1(1)68-88, </note> <year> 1997. </year>
Reference-contexts: Problems that have been revisited due to the popularity of the Web include: querying structured documents [1, 12, 14], querying semistructured data <ref> [3, 8] </ref> and querying graphs [19]. Many systems and languages have been proposed for solving each of these Web-data management problems, but none of these systems provides a framework for approaching the problems from a unified perspective. <p> WebOQLs architecture is based on the common middleware approach to data integration used in several other projects <ref> [3, 13] </ref>, that is, the use of a flexible common data model and wrappers that map data represented in terms of the sources models to the common model. <p> The problem of querying data whose structure is unknown or irregular has been addressed, although not in the context of the Web, by the so-called query languages for semi-structured data Lorel <ref> [3] </ref> and UnQL [8]. These systems use a very low-level representation of data, based on graphs. UnQLs data model was influential in our design. A problem with semistructured data models so far is that they provide very few modeling abstractions (essentially, only labeled graphs).
Reference: [4] <author> G. Arocena, WebOQL: </author> <title> Exploiting Document Structure in Web Queries, </title> <type> Masters Thesis, </type> <institution> University of Toronto, </institution> <year> 1997. </year>
Reference-contexts: A Hypertree Containing a Publications Database 1.2 The Rest of the Paper In Section 2 we introduce WebOQLs data model and most aspects of the query language by means of a comprehensive list of examples. Although we have defined a formal semantics for the model <ref> [4] </ref>, space limitations prevent us from presenting it in this paper. Rather, we will try to convey the intuition behind the model, and thus we will focus on the pragmatic aspects. In Section 3 we introduce webs and show how they can be used. <p> Both hypertrees and webs can be manipulated using WebOQL. In the next subsections we introduce the main features of the language by example. See <ref> [4] </ref> for a formal presentation of the data model and the query language, and see [5] for an on-line demo with live examples. Simple Trees, Subtrees and Tails. Let us now define some terms we will use quite frequently in the sequel.
Reference: [5] <author> G. Arocena, </author> <note> The WebOQL Home Page, http://www.db. toronto.edu/~weboql/. </note>
Reference-contexts: Both hypertrees and webs can be manipulated using WebOQL. In the next subsections we introduce the main features of the language by example. See [4] for a formal presentation of the data model and the query language, and see <ref> [5] </ref> for an on-line demo with live examples. Simple Trees, Subtrees and Tails. Let us now define some terms we will use quite frequently in the sequel. <p> Both the data model and the query language are flexible enough for accommodating lack of knowledge of the structure of the data to be queried and potential irregularities, or even lack of explicit structure in this data, which are common issues in the context of the Web. See <ref> [5] </ref> for an on-line demo containing live examples ranging from document restructuring to integration of information extracted from several on-line news sources. We have implemented WebOQL and the document pattern translator in Java.
Reference: [6] <author> G. Arocena, A. Mendelzon, G. Mihaila, </author> <title> Applications of a Web Query Language, </title> <booktitle> in Proc. of 6th. Int. WWW Conference, </booktitle> <address> Santa Clara, California, </address> <month> April </month> <year> 1997. </year>
Reference-contexts: This facilitates the integration of information from other sources, like databases and file systems. 1.1 Related Work As mentioned above, WebOQL synthesizes ideas from diverse research areas. Below is an overview of similarities and differences with several systems. Web Queries. With Web query languages, such as WebSQL <ref> [6, 18] </ref>, W3QS [16] and WebLog [17], we share the idea of viewing the Web as a database that can be queried using a declarative language. But these languages suffer from a common limitation: lack of support for exploiting document structure.
Reference: [7] <author> P. Atzeni, G. Mecca, P. Merialdo, </author> <title> Semistructured and Structured Data in the Web: Going back and Forth, </title> <booktitle> in Proc. of the Workshop on Semi-structured Data, </booktitle> <address> Tucson, Arizona, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: Web querying [16, 17, 18] (i.e., declaratively expressing how to navigate one or more portions of the Web to find documents with certain features), Web-data warehousing [15] (i.e., extracting data from Web pages to populate a database, possibly for integrating the data with data from other sources) and website restructuring <ref> [7, 13] </ref> (i.e., exploiting the knowledge about the organization of highly structured websites for defining alternative views over their content). Problems that have been revisited due to the popularity of the Web include: querying structured documents [1, 12, 14], querying semistructured data [3, 8] and querying graphs [19]. <p> The usual approach to querying structured documents is to use custom-tailored wrapper programs that map documents to instances of some data model <ref> [1, 7, 12, 14, 15] </ref>; the main disadvantage of this approach is that a wrapper program must be built for each new document (or set of documents with similar structure), usually using either a parser generator or a Perl-like filtering language. <p> Such facility is present in website restructuring systems like Araneus <ref> [7] </ref> and Strudel [13]. These systems exploit the knowledge of a websites structure for defining alternative views over its content.
Reference: [8] <author> P. Buneman, S. Davidson, G. Hillebrand, D. Suciu, </author> <title> A query language and optimization techniques for unstructured data, </title> <booktitle> in Proc. of ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <address> Montreal, Canada, </address> <pages> pp. 505-516, </pages> <year> 1996. </year>
Reference-contexts: Problems that have been revisited due to the popularity of the Web include: querying structured documents [1, 12, 14], querying semistructured data <ref> [3, 8] </ref> and querying graphs [19]. Many systems and languages have been proposed for solving each of these Web-data management problems, but none of these systems provides a framework for approaching the problems from a unified perspective. <p> The problem of querying data whose structure is unknown or irregular has been addressed, although not in the context of the Web, by the so-called query languages for semi-structured data Lorel [3] and UnQL <ref> [8] </ref>. These systems use a very low-level representation of data, based on graphs. UnQLs data model was influential in our design. A problem with semistructured data models so far is that they provide very few modeling abstractions (essentially, only labeled graphs). Notably, they do not support ordered collections. <p> Finally, the possibility of defining webs adds a new dimension to expressive power. For instance, it allows us to compute transitive closure on an arbitrary binary relation, something that, according to <ref> [8] </ref>, seems not to be expressible by means of structural recursion. Acknowledgement: this project was supported by the Information Technology Research Centre of Ontario and the Natural Sciences and Engineering Research Council of Canada.
Reference: [9] <author> P. Buneman, S. Davidson, D. Suciu, </author> <title> Programming Constructs for Unstructured Data, </title> <booktitle> in Proc. of 5th Int. Workshop on DBPL, </booktitle> <address> Gubbio, </address> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: The presence of order, web creation and regular expressions makes this problem particularly challenging. The most appropriate formalism for analyzing WebOQLs expressive power seems to be structural recursion <ref> [9, 10] </ref>. Structural recursion forms are recursive definitions of systematic traversals of structured objects. Different forms of structural recursion yield query languages with different expressive power.
Reference: [10] <author> P. Buneman, S. Naqvi, V. Tannen and L. Wong, </author> <title> Principles of Programming with Complex Objects and Collection Types, </title> <booktitle> in Theoretical Computer Science 149, </booktitle> <pages> pp. 3-48, </pages> <year> 1995. </year>
Reference-contexts: The presence of order, web creation and regular expressions makes this problem particularly challenging. The most appropriate formalism for analyzing WebOQLs expressive power seems to be structural recursion <ref> [9, 10] </ref>. Structural recursion forms are recursive definitions of systematic traversals of structured objects. Different forms of structural recursion yield query languages with different expressive power. <p> Structural recursion forms are recursive definitions of systematic traversals of structured objects. Different forms of structural recursion yield query languages with different expressive power. If we ignore web creation and tail variables, the expressive power of WebOQL lies between the EXT and VEXT forms of structural recursion proposed in <ref> [10] </ref>. For instance, the query extract all anchors from the tree corresponding to an HTML document cannot be expressed in EXT, whereas it can be expressed in WebOQL with NPs. <p> Tail variables are not captured by any of the structural recursion forms presented in <ref> [10] </ref>, but a new form can be easily defined that captures them. Finally, the possibility of defining webs adds a new dimension to expressive power.
Reference: [11] <author> R. Cattell (Ed.), </author> <title> The Object database standard, ODMG-93, </title> <publisher> Morgan Kaufmann Publishers, </publisher> <address> San Francisco, Calif., </address> <year> 1996. </year>
Reference-contexts: The sfw construct can be seen as a generalization of the map second order function found in functional programming languages. Manipulating Trees. Queries need not involve the sfw construct. Like OQL <ref> [11] </ref>, WebOQL is a purely functional language. In addition to the Prime, Peek and Hang operators introduced above, WebOQL provides three more tree operators. We introduce them in the next examples. Concatenate, illustrated in Query 2, allows us to juxtapose two trees (q1 denotes the result of Query 1).
Reference: [12] <author> V . Christophides, S. Abiteboul, S. Cluet and M. Scholl, </author> <title> From structured documents to novel query facilities, </title> <booktitle> in Proc. of ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pp. 313-324, </pages> <year> 1994. </year>
Reference-contexts: Problems that have been revisited due to the popularity of the Web include: querying structured documents <ref> [1, 12, 14] </ref>, querying semistructured data [3, 8] and querying graphs [19]. Many systems and languages have been proposed for solving each of these Web-data management problems, but none of these systems provides a framework for approaching the problems from a unified perspective. <p> The usual approach to querying structured documents is to use custom-tailored wrapper programs that map documents to instances of some data model <ref> [1, 7, 12, 14, 15] </ref>; the main disadvantage of this approach is that a wrapper program must be built for each new document (or set of documents with similar structure), usually using either a parser generator or a Perl-like filtering language.
Reference: [13] <author> M. Fernandez, D. Florescu, A. Levy, D. Suciu, </author> <title> A Query Language and Processor for a Web-Site Management System, </title> <booktitle> in Proc. of the Workshop on Semi-structured Data, </booktitle> <address> Tucson, Arizona, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: Web querying [16, 17, 18] (i.e., declaratively expressing how to navigate one or more portions of the Web to find documents with certain features), Web-data warehousing [15] (i.e., extracting data from Web pages to populate a database, possibly for integrating the data with data from other sources) and website restructuring <ref> [7, 13] </ref> (i.e., exploiting the knowledge about the organization of highly structured websites for defining alternative views over their content). Problems that have been revisited due to the popularity of the Web include: querying structured documents [1, 12, 14], querying semistructured data [3, 8] and querying graphs [19]. <p> WebOQLs architecture is based on the common middleware approach to data integration used in several other projects <ref> [3, 13] </ref>, that is, the use of a flexible common data model and wrappers that map data represented in terms of the sources models to the common model. <p> Such facility is present in website restructuring systems like Araneus [7] and Strudel <ref> [13] </ref>. These systems exploit the knowledge of a websites structure for defining alternative views over its content.
Reference: [14] <author> R. Gting, R. Zicari, D. Choy, </author> <title> An algebra for structured office documents, </title> <booktitle> in ACM TOIS 7(2), </booktitle> <pages> pp. 123-157, </pages> <year> 1989. </year>
Reference-contexts: Problems that have been revisited due to the popularity of the Web include: querying structured documents <ref> [1, 12, 14] </ref>, querying semistructured data [3, 8] and querying graphs [19]. Many systems and languages have been proposed for solving each of these Web-data management problems, but none of these systems provides a framework for approaching the problems from a unified perspective. <p> The usual approach to querying structured documents is to use custom-tailored wrapper programs that map documents to instances of some data model <ref> [1, 7, 12, 14, 15] </ref>; the main disadvantage of this approach is that a wrapper program must be built for each new document (or set of documents with similar structure), usually using either a parser generator or a Perl-like filtering language. <p> In WebOQL, URLs are just strings. As we will see, this approach is very flexible and simpler. Queries can generate URLs just by catenating other strings. Structured Documents. The idea of querying structured documents has been previously investigated in <ref> [14] </ref>, in the context of office information systems, and in [1], in the context of the integration of SGML with databases. Although largely different from one another, both approaches are strongly typed. <p> Then the database representation can be queried using the query language of the database. A novel aspect of this approach is the possibility of querying the structure by means of path variables. In <ref> [14] </ref>, documents are modeled using nested ordered relations. This model is similar to WebOQLs, except that it is strongly typed.
Reference: [15] <author> J. Hammer, H. Garcia-Molina, J. Cho, R. Aranha, A. Crespo, </author> <title> Extracting semistructured information from the Web, </title> <booktitle> in Proceedings of the Workshop on Semi-structured Data, </booktitle> <address> Tucson, Arizona, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: Among the new problems we can mention: Web querying [16, 17, 18] (i.e., declaratively expressing how to navigate one or more portions of the Web to find documents with certain features), Web-data warehousing <ref> [15] </ref> (i.e., extracting data from Web pages to populate a database, possibly for integrating the data with data from other sources) and website restructuring [7, 13] (i.e., exploiting the knowledge about the organization of highly structured websites for defining alternative views over their content). <p> The usual approach to querying structured documents is to use custom-tailored wrapper programs that map documents to instances of some data model <ref> [1, 7, 12, 14, 15] </ref>; the main disadvantage of this approach is that a wrapper program must be built for each new document (or set of documents with similar structure), usually using either a parser generator or a Perl-like filtering language.
Reference: [16] <author> D. Konopnicki, O. Shmueli, W3QS: </author> <title> A query system for the World Wide Web, </title> <booktitle> in Proceedings of the 21th Int. Conf. on Very Large Databases, </booktitle> <address> Zurich, </address> <pages> pp. 54-65, </pages> <year> 1996. </year>
Reference-contexts: 1 Introduction The widespread use of the Web has originated many new data management problems and has renewed the interest in problems that had been addressed before in other contexts. Among the new problems we can mention: Web querying <ref> [16, 17, 18] </ref> (i.e., declaratively expressing how to navigate one or more portions of the Web to find documents with certain features), Web-data warehousing [15] (i.e., extracting data from Web pages to populate a database, possibly for integrating the data with data from other sources) and website restructuring [7, 13] (i.e., <p> Below is an overview of similarities and differences with several systems. Web Queries. With Web query languages, such as WebSQL [6, 18], W3QS <ref> [16] </ref> and WebLog [17], we share the idea of viewing the Web as a database that can be queried using a declarative language. But these languages suffer from a common limitation: lack of support for exploiting document structure.
Reference: [17] <author> L. Lakshmanan, F. Sadri, I. Subramanian, </author> <title> A declarative language for querying and restructuring the Web, </title> <booktitle> in Proceedings of the 6th Int. Workshop on Research Issues in Data Engineering, </booktitle> <address> New Orleans, </address> <year> 1996. </year>
Reference-contexts: 1 Introduction The widespread use of the Web has originated many new data management problems and has renewed the interest in problems that had been addressed before in other contexts. Among the new problems we can mention: Web querying <ref> [16, 17, 18] </ref> (i.e., declaratively expressing how to navigate one or more portions of the Web to find documents with certain features), Web-data warehousing [15] (i.e., extracting data from Web pages to populate a database, possibly for integrating the data with data from other sources) and website restructuring [7, 13] (i.e., <p> Below is an overview of similarities and differences with several systems. Web Queries. With Web query languages, such as WebSQL [6, 18], W3QS [16] and WebLog <ref> [17] </ref>, we share the idea of viewing the Web as a database that can be queried using a declarative language. But these languages suffer from a common limitation: lack of support for exploiting document structure.
Reference: [18] <author> A. Mendelzon, G. Mihaila, T. Milo, </author> <title> Querying the World Wide Web, </title> <note> in Journal of Digital Libraries 1(1)54-67, </note> <year> 1997. </year>
Reference-contexts: 1 Introduction The widespread use of the Web has originated many new data management problems and has renewed the interest in problems that had been addressed before in other contexts. Among the new problems we can mention: Web querying <ref> [16, 17, 18] </ref> (i.e., declaratively expressing how to navigate one or more portions of the Web to find documents with certain features), Web-data warehousing [15] (i.e., extracting data from Web pages to populate a database, possibly for integrating the data with data from other sources) and website restructuring [7, 13] (i.e., <p> This facilitates the integration of information from other sources, like databases and file systems. 1.1 Related Work As mentioned above, WebOQL synthesizes ideas from diverse research areas. Below is an overview of similarities and differences with several systems. Web Queries. With Web query languages, such as WebSQL <ref> [6, 18] </ref>, W3QS [16] and WebLog [17], we share the idea of viewing the Web as a database that can be queried using a declarative language. But these languages suffer from a common limitation: lack of support for exploiting document structure.
Reference: [19] <author> A. Mendelzon, P. Wood, </author> <title> Finding regular simple paths in graph databases, </title> <journal> SIAM J. Comp. </journal> <volume> 24:6, </volume> <pages> pp 1235-1258, </pages> <year> 1995. </year>
Reference-contexts: Problems that have been revisited due to the popularity of the Web include: querying structured documents [1, 12, 14], querying semistructured data [3, 8] and querying graphs <ref> [19] </ref>. Many systems and languages have been proposed for solving each of these Web-data management problems, but none of these systems provides a framework for approaching the problems from a unified perspective. <p> This is easy to see for all operations (and compositions thereof) except sfw operations containing NPs and/or several as clauses. Finding all nodes reachable through paths that match a NP (starting from a given tree) has polynomial cost <ref> [19] </ref>, and a query can create a number of documents which is polynomial in the size of the input. Thus the composition of queries that contain NPs and/or several as clauses is also polynomial. WebOQL can simulate all nested relational algebra operators.
Reference: [20] <author> Y. Papakonstantinou, H. Garcia Molina, J. Widom, </author> <title> Object exchange across heterogeneous information sources, </title> <booktitle> in Proceedings of the 11th Int. Conf. on Data Engineering, Taipei, </booktitle> <pages> pp. 251-260, </pages> <year> 1995. </year>
Reference-contexts: The goal of the query language is, in general, to be able to navigate, query and restructure graphs of trees. 2.1 A Tree-based Data Model The level of abstraction in WebOQLs data model is not as light-weight as OEM <ref> [20] </ref> or similar models and not as heavy-weight as the more traditional schema-based models.
References-found: 20

