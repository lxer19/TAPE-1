URL: http://www.cs.man.ac.uk/~kung-kiu/pub/iscis97.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~kung-kiu/pub/
Root-URL: http://www.cs.man.ac.uk
Email: merritt@pacevm.dac.pace.edu kkl@cs.man.ac.uk  
Title: A LOGICAL INVERTED TAXONOMY OF SORTING ALGORITHMS  
Author: S.M. Merritt K.K. Lau 
Address: 1 Martine Avenue Oxford Road White Plains, NY 10606 Manchester M13 9PL USA UK  
Affiliation: School of Computer Science and Information Systems Department of Computer Science Pace University University of Manchester  
Abstract: More recent work in logic-based program synthesis by Lau has produced a logical taxonomy of sorting algorithms. This provides a logical basis for the inverted taxonomy and expands it into a logical inverted taxonomy to include distributive sorting algorithms which can be derived along with comparison-based algorithms. The inclusion of distributive algorithms into a unified conceptual framework is new and significant for a comprehensive perspective on sorting algorithms. In this paper, we describe both the inverted and the logical taxonomies and show how the latter strengthens the latter and expands it into a logical inverted taxonomy of sorting algorithms, a high-level, top-down, symmetrical paradigm for all sorting algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Aho, A.V., Hopcroft, J.E. and Ullman, J.D., </author> <year> (1974), </year> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: Bucket sort <ref> (Aho et al 1974) </ref> is a distribution sort that is not binary. For example, decimal numbers can be sorted with ten buckets; items are distributed to buckets without compares, and then collected from left to right. <p> Multi-digit decimal numbers can be sorted by a first pass that distributes items based upon the least significant digit, and subsequent passes that distribute on the next most significant digits <ref> (Aho et al 1974) </ref>. Address calculation sorting (Knuth 1973) might be understood as a bucket sort in which buckets are intervals of some range of distribution of elements.
Reference: <author> Barstow, D.R., </author> <year> (1980), </year> <title> Remarks on A Synthesis of Several Sorting Algorithms by John Darlington, </title> <journal> Acta Informatica, </journal> <volume> Vol. 13, </volume> <pages> pp. 225227. </pages>
Reference-contexts: Quicksort by exchange optimize optimize by selection Selection SortInsertion Sort by insertion Shell Sort Heapsort Merge 2 The Inverted Taxonomy of Sorting Algorithms The alternative taxonomy proposed in (Merritt 1985) was inspired by the work in program synthesis in (Clark and Darlington 1980), (Darlington 1978), (Green and Barstow 1978), and <ref> (Barstow 1980) </ref>. The basis of this classification is to recognize sorting as a `split' and `join' procedure: given a set of things to sort, split the set into two parts; recursively sort each part; and finally join the two parts into a sorted set. <p> Although it is natural to think about a `split' in terms of equal-size parts, it is easy to see that if merge sort splits off a singleton, it collapses into insertion sort. Similarly, quicksort collapses into selection sort if it splits off a singleton. Moreover, sinking sort <ref> (Barstow 1980) </ref> and bubble sort can be understood as in-place versions of insertion sort and selection sort respectively. These observations lead to the inverted taxonomy shown in Figure 3. Since their publication in (Merritt 1985), these observations have been incorporated into at least one elementary textbook (Schneider and Bruell 1987).
Reference: <author> Clark, K.L. and Darlington, J., </author> <year> (1980), </year> <title> Algorithm Classification through Synthesis, </title> <journal> The Computer Jour--nal Vol. </journal> <volume> 23, No. 1, </volume> <pages> pp. 6165. </pages>
Reference-contexts: Exchange Sort optimize SORT Quicksort by exchange optimize optimize by selection Selection SortInsertion Sort by insertion Shell Sort Heapsort Merge 2 The Inverted Taxonomy of Sorting Algorithms The alternative taxonomy proposed in (Merritt 1985) was inspired by the work in program synthesis in <ref> (Clark and Darlington 1980) </ref>, (Darlington 1978), (Green and Barstow 1978), and (Barstow 1980).
Reference: <author> Darlington, J., </author> <year> (1978), </year> <title> A Synthesis of Several Sorting Algorithms, </title> <journal> Acta Informatica, </journal> <volume> Vol. 11, </volume> <pages> pp. 130. </pages>
Reference-contexts: Exchange Sort optimize SORT Quicksort by exchange optimize optimize by selection Selection SortInsertion Sort by insertion Shell Sort Heapsort Merge 2 The Inverted Taxonomy of Sorting Algorithms The alternative taxonomy proposed in (Merritt 1985) was inspired by the work in program synthesis in (Clark and Darlington 1980), <ref> (Darlington 1978) </ref>, (Green and Barstow 1978), and (Barstow 1980).
Reference: <author> Dobosiewicz, W., </author> <year> (1978), </year> <title> Sorting by Distributive Partitioning, </title> <journal> Information Processing Letters, </journal> <volume> Vol. 7, No. 1, </volume> <pages> pp. 16. </pages>
Reference-contexts: It is interesting to note that hybrid algorithms have been developed that are basically distributive (in order to achieve linear expected time), but that invoke a comparison sort as a second phase (in order to insure O (nlogn) worst case time). One such algorithm, distributive partitioning <ref> (Dobosiewicz 1978) </ref> uses quicksort as the second-phase sort. A variation on distributive partitioning, sometimes called distributive merging (Van der Nat 1980), uses merge sort. The hybrids can be placed easily in the logical inverted taxonomy and are shown in Figure 7.
Reference: <author> Dromey, R.G., </author> <year> (1987), </year> <title> Derivation of Sorting Algorithms from a Specification, </title> <journal> The Computer Journal, </journal> <volume> Vol. 30, No. 6, </volume> <pages> pp. 512518. </pages>
Reference: <author> Green, C. and Barstow, D., </author> <year> (1978), </year> <title> On Program Synthesis Knowledge, </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 10, </volume> <pages> pp. 241279. </pages>
Reference-contexts: Exchange Sort optimize SORT Quicksort by exchange optimize optimize by selection Selection SortInsertion Sort by insertion Shell Sort Heapsort Merge 2 The Inverted Taxonomy of Sorting Algorithms The alternative taxonomy proposed in (Merritt 1985) was inspired by the work in program synthesis in (Clark and Darlington 1980), (Darlington 1978), <ref> (Green and Barstow 1978) </ref>, and (Barstow 1980). The basis of this classification is to recognize sorting as a `split' and `join' procedure: given a set of things to sort, split the set into two parts; recursively sort each part; and finally join the two parts into a sorted set.
Reference: <author> Knuth, D.E., </author> <year> (1973), </year> <booktitle> The Art of Computer Programming, </booktitle> <volume> Vol. </volume> <month> 3: </month> <title> Sorting and Searching, </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: 1 Introduction The traditional taxonomy of sorting algorithms, which follows that presented in <ref> (Knuth 1973) </ref>, divides sorting algorithms into three categories: insertion, selection and exchange, according to their main operational characteristics. Naturally, the canonical examples of these categories are: insertion sort, exchange sort and selection sort respectively. <p> section we will show that the second difference can be eliminated by expanding the inverted taxonomy naturally to include the new category. 5 A Logical Inverted Taxonomy The logical taxonomy inspires an extension of the generalized split/join paradigm that includes distributive sorting algorithms such as distribution sort and radix sort <ref> (Knuth 1973) </ref>. The extension divides sorting algorithms into three categories (instead of two); to easysplit/hardjoin and hardsplit/easyjoin we add easysplit/easyjoin. <p> Each bucket is then sorted recursively in the next bit. If the distribution is made on the least significant bit, the algorithm is binary distribution sort <ref> (Knuth 1973) </ref>. If the distribution is made on the most significant bit, the algorithm is radix exchange sort [8]. <p> Multi-digit decimal numbers can be sorted by a first pass that distributes items based upon the least significant digit, and subsequent passes that distribute on the next most significant digits (Aho et al 1974). Address calculation sorting <ref> (Knuth 1973) </ref> might be understood as a bucket sort in which buckets are intervals of some range of distribution of elements. <p> In such cases the expected running time is O (n). However, the worst case time for these algorithms is proportional to n 2 <ref> (Knuth 1973) </ref>. It is interesting to note that hybrid algorithms have been developed that are basically distributive (in order to achieve linear expected time), but that invoke a comparison sort as a second phase (in order to insure O (nlogn) worst case time).
Reference: <author> Lau, K.K., </author> <year> (1989), </year> <title> A Note on Synthesis and Classification of Sorting Algorithms, </title> <journal> Acta Informatica, </journal> <volume> Vol. 27, </volume> <pages> pp. 7380. </pages>
Reference-contexts: SORT by easysplit/hardjoin by hardsplit/easyjoin Merge Sort Quicksort (split a singleton) Sinking Sort Bubble Sort Selection SortInsertion Sort (in-place) 3 A Logical Basis for the Inverted Taxonomy A new top-down synthesis of sorting algorithms by Lau <ref> (Lau 1989 and 1992) </ref>, that is logic-based, strengthens the inverted taxonomy by deriving comparison-based sorting algorithms that indeed fall into the two categories of hardsplit/easyjoin and easysplit/hardjoin. Moreover, it expands the taxonomy by deriving distributive algorithms in a symmetric way.
Reference: <author> Lau, K.K. and Prestwich, S.D., </author> <year> (1990), </year> <title> Top-down Synthesis of Recursive Logic Procedures from First-order Logic Specifications, </title> <editor> in D.H.D. Warren and P. Szeredi, editors, </editor> <booktitle> Proc. 7th Int. Conf. on Logic Programming, </booktitle> <pages> pp. 667684, </pages> <publisher> MIT Press. </publisher>
Reference-contexts: From this given set of definition formulas, the method can derive different sets of logic clauses, i.e. different sorting algorithms, by logical deduction. The derivation is performed on a logic programming system <ref> (Lau and Prestwich 1990) </ref> under user-guidance. For each derivation, the user can specify the form of the resulting clauses, in particular the form (s) of the recursive call (s).
Reference: <author> Lau, K.K., </author> <year> (1992), </year> <title> Top-down Synthesis of Sorting Algorithms, </title> <journal> The Computer Journal, </journal> <volume> Vol. 35, </volume> <pages> pp. </pages> <address> A001 A007. </address>
Reference: <author> Merritt, S.M., </author> <year> (1982), </year> <title> The Role of High Level Specification in Programming by Transformation: Specification and Transformation by Parts, </title> <type> Ph.D. dissertation, </type> <institution> Dept of Computer Science, New York University. </institution>
Reference: <author> Merritt, S.M., </author> <year> (1985), </year> <title> An Inverted Taxonomy of Sorting Algorithms, </title> <journal> Comm. ACM, </journal> <volume> Vol. 28, No. 1, </volume> <pages> pp. 9699. </pages>
Reference-contexts: Figure 1 illustrates the traditional taxonomy. Although this description of sorting is low-level and bottom-up, it is still widely accepted as standard even though we have become much more serious about top-down design, structured programming, high-level programming languages, algorithm design techniques and software engineering. In <ref> (Merritt 1985) </ref>, Merritt noted the irony that sorting, a classic problem in computer science (and in programming in particular) continues to be understood and presented in such a bottom-up manner. <p> We call the expanded taxonomy the logical inverted taxonomy. Exchange Sort optimize SORT Quicksort by exchange optimize optimize by selection Selection SortInsertion Sort by insertion Shell Sort Heapsort Merge 2 The Inverted Taxonomy of Sorting Algorithms The alternative taxonomy proposed in <ref> (Merritt 1985) </ref> was inspired by the work in program synthesis in (Clark and Darlington 1980), (Darlington 1978), (Green and Barstow 1978), and (Barstow 1980). <p> Similarly, quicksort collapses into selection sort if it splits off a singleton. Moreover, sinking sort (Barstow 1980) and bubble sort can be understood as in-place versions of insertion sort and selection sort respectively. These observations lead to the inverted taxonomy shown in Figure 3. Since their publication in <ref> (Merritt 1985) </ref>, these observations have been incorporated into at least one elementary textbook (Schneider and Bruell 1987). Also, since then, new work in deriving sorting algorithms in a top-down manner by logical deduction has provided the inverted taxonomy with a logical basis and expanded it. <p> Work in transformational programming, and automatic program synthesis provided the insight that led to Merritt's inverted taxonomy of sorting algorithms, a high level, top-down, conceptually simple and symmetric categorization of sorting algorithms <ref> (Merritt 1985) </ref>. More recent work in logic-based program synthesis by Lau has produced a logical taxonomy of sorting algorithms. The logical taxonomy provides a logical basis for the inverted taxonomy, and expands it to include a third category, distributive sorting algorithms, which can be derived along with comparison-based algorithms.
Reference: <author> Merritt, S.M., </author> <year> (1994), </year> <title> An Expanded Taxonomy of Sorting Algorithms, </title> <booktitle> Computer Science Education, </booktitle> <volume> Vol. 5, </volume> <pages> pp. 103110. </pages>
Reference-contexts: In particular, the logical inverted taxonomy unifies comparison-based and distributive sorting. This is an important result for educators and practitioners for understanding and teaching about sorting <ref> (Merritt 1994) </ref>.
Reference: <author> Schneider, G.M. and Bruell, S.C., </author> <year> (1987), </year> <title> Advanced Programming and Problem Solving with Pascal, </title> <publisher> John Wiley & Sons. </publisher>
Reference-contexts: Moreover, sinking sort (Barstow 1980) and bubble sort can be understood as in-place versions of insertion sort and selection sort respectively. These observations lead to the inverted taxonomy shown in Figure 3. Since their publication in (Merritt 1985), these observations have been incorporated into at least one elementary textbook <ref> (Schneider and Bruell 1987) </ref>. Also, since then, new work in deriving sorting algorithms in a top-down manner by logical deduction has provided the inverted taxonomy with a logical basis and expanded it.
Reference: <author> Smith, D.R., </author> <year> (1985), </year> <title> Top-down Synthesis of Divide-and-conquer Algorithms, </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 27, </volume> <pages> pp. 4396. </pages>
Reference: <author> Smith, D.R., </author> <year> (1985), </year> <title> The Design of Divide-and-conquer Algorithms, </title> <booktitle> Science of Computer Programming, </booktitle> <volume> Vol. 5, </volume> <pages> pp. 3758. </pages>
Reference: <author> Van der Nat, M., </author> <year> (1980), </year> <title> Fast Sorting Algorithm, a Hybrid of Distributive and Merging Sort, </title> <journal> Information Processing Letters, </journal> <volume> Vol. 10, No. 3, </volume> <pages> pp. 163167. </pages>
Reference-contexts: One such algorithm, distributive partitioning (Dobosiewicz 1978) uses quicksort as the second-phase sort. A variation on distributive partitioning, sometimes called distributive merging <ref> (Van der Nat 1980) </ref>, uses merge sort. The hybrids can be placed easily in the logical inverted taxonomy and are shown in Figure 7.
References-found: 18

