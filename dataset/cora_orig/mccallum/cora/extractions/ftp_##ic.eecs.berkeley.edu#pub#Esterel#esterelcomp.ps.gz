URL: ftp://ic.eecs.berkeley.edu/pub/Esterel/esterelcomp.ps.gz
Refering-URL: http://www-cad.eecs.berkeley.edu:80/Software/software.html
Root-URL: 
Email: email: sedwards@alumni.caltech.edu  
Phone: 1  
Title: An Esterel Compiler for a Synchronous/Reactive Development System  
Author: Stephen Edwards 
Web: 94-DC-008  
Note: 0 This material is based upon work supported under a National Science Founda- tion Graduate Research Fellowship. Additional support provided by Interval Research Corporation, Digital Equipment Corporation, and the Semiconductor Research Cor poration under grant number  
Date: June 16, 1994  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Aho, R. Sethi, and J. Ullman. </author> <booktitle> Compilers, principles, techniques, and tools. Addison-Wesley series in Computer Science. </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: The result of balancing these sometimes conflicting requirements is presented below. The intermediate representation chosen is very close to the three-address code used in modern optimizing compilers <ref> [1] </ref>. All but one of the instructions are "simple" in some sense|they translate into only a few assembly-language instructions. The remaining instruction, try, is responsible for parallel execution and preemption and is really the workhorse of the language.
Reference: [2] <author> W. Baker. </author> <title> An application of a synchronous reactive semantics to the VHDL language. </title> <type> Technical Report UCB/ERL M93/10, </type> <institution> Unversity of California, Berkeley, </institution> <year> 1993. </year>
Reference-contexts: This scheme avoids the problems of rapidly-growing object code size and compilation times in the Esterel V3 compiler supported by CISI Ingenierie [8]. of California, Berkeley. Baker <ref> [2] </ref> uses a similar intermediate format to define a synchronous, reactive subset of the VHDL language, which is compiled into Esterel and run with the Esterel V3 compiler. <p> For example, the mock-up of the digital watch presented in Appendix C could be used to evaluate the user interface of the watch. However, since this is a reactive system, the utility of a simulator would drop rapidly if the simulation was too slow. The path used in <ref> [2] </ref> (S-VHDL ! NDAM ! Esterel) facilitates such simulation, but the Esterel compiler used in that study can have prohibitively long compilation times and large executables. The compiler presented here compiles quickly and produces a fast, small executable. <p> Chapter 2 presents the Esterel language in some detail. Chap- ter 3 contains a description of the representation used as an intermediate be <p>- 4 Esterel Intermediate Representation Executable Assembly Code Synchronous Subset of VHDL Esterel Synchronous Verification VHDL Finite State Machines Model Checking or Language Containment Described in <ref> [2] </ref> This Report Described in [3] 5 tween Esterel source and assembly code. Chapter 4 discusses the issues in the run-time system. Chapter 5 discusses the important notion of causality in Es- terel. Finally, Chapter 6 presents some experimental results and raises some questions about the language. <p> Finally, a slight variant of the intermediate representation used here has been used to compile a synchronous, reactive subset of VHDL (see <ref> [2, 3] </ref>). This suggests that a more general synchronous-reactive compiler could be built by adding additional front ends which use the same intermediate representation. 10 A A A B D F E As in Figure 1.2, the input events are shown above the time line. <p> In particular, it must support the parallel execution and preemption semantics of Esterel. * Generality|A similar representation has been used in a compilation scheme for a synchronous subset of VHDL <ref> [2, 3] </ref>. Mimicking this work ensures that this intermediate representation could be used in other situations, allowing the reuse of the code generator. * Simplicity|Keeping the intermediate representation as simple as possible simplifies the final code generation phase and makes optimization much easier. <p> A hope for this work is for it to be used for other tasks. For example, it appears that the scheme presented here for producing assembly code from the intermediate representation could also be used to produce code from a synchronous subset of the VHDL language <ref> [2, 3] </ref>. The intermediate format also lends itself to taking event derivatives and forming an FSM. While this has shown to be potentially explosive, there may be a way of effectively partitioning a program.
Reference: [3] <author> W. Baker. </author> <title> On interfacing existing hardware description languages to statespace exploration-based verification. </title> <type> unpublished, </type> <month> June </month> <year> 1993. </year>
Reference-contexts: Baker [2] uses a similar intermediate format to define a synchronous, reactive subset of the VHDL language, which is compiled into Esterel and run with the Esterel V3 compiler. In addition, Baker <ref> [3] </ref> has also shown that the intermediate representation can be compiled into finite state machines which can then be forwarded to a model checking or language containment verification system for further analysis. In all development systems, the ability to simulate the system under development is important. <p> Chap- ter 3 contains a description of the representation used as an intermediate be <p>- 4 Esterel Intermediate Representation Executable Assembly Code Synchronous Subset of VHDL Esterel Synchronous Verification VHDL Finite State Machines Model Checking or Language Containment Described in [2] This Report Described in <ref> [3] </ref> 5 tween Esterel source and assembly code. Chapter 4 discusses the issues in the run-time system. Chapter 5 discusses the important notion of causality in Es- terel. Finally, Chapter 6 presents some experimental results and raises some questions about the language. <p> Finally, a slight variant of the intermediate representation used here has been used to compile a synchronous, reactive subset of VHDL (see <ref> [2, 3] </ref>). This suggests that a more general synchronous-reactive compiler could be built by adding additional front ends which use the same intermediate representation. 10 A A A B D F E As in Figure 1.2, the input events are shown above the time line. <p> In particular, it must support the parallel execution and preemption semantics of Esterel. * Generality|A similar representation has been used in a compilation scheme for a synchronous subset of VHDL <ref> [2, 3] </ref>. Mimicking this work ensures that this intermediate representation could be used in other situations, allowing the reuse of the code generator. * Simplicity|Keeping the intermediate representation as simple as possible simplifies the final code generation phase and makes optimization much easier. <p> A hope for this work is for it to be used for other tasks. For example, it appears that the scheme presented here for producing assembly code from the intermediate representation could also be used to produce code from a synchronous subset of the VHDL language <ref> [2, 3] </ref>. The intermediate format also lends itself to taking event derivatives and forming an FSM. While this has shown to be potentially explosive, there may be a way of effectively partitioning a program.
Reference: [4] <author> G. Berry. </author> <title> A hardware implementation of pure esterel. </title> <booktitle> In 1991 International Workshop on Formal Methods in VLSI Design. ACM SIG DA, </booktitle> <month> January </month> <year> 1991. </year>
Reference: [5] <author> G. Berry, P. Couronne, and G. Gonthier. </author> <title> Synchronous programming of reactive systems. </title> <booktitle> In France-Japan Artificial Intelligence and Computer Science Symposium, </booktitle> <year> 1986. </year>
Reference: [6] <author> Gerard Berry and Laurent Cosserat. </author> <title> The ESTEREL synchronous program-ming language and its mathematical semantics. </title> <editor> In S. D. Brooks, A. W. Roscoe, and G. Winskel, editors, </editor> <booktitle> Seminar on Concurrency, </booktitle> <pages> pages 389-448. </pages> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: Introduction The synchronous, reactive programming language Esterel was devised by Berry and Cosserat <ref> [6] </ref> to describe controllers for real-time systems. Esterel resembles many high-level languages, but incorporates a model of time. This document describes a compiler that translates Esterel into an intermediate form which is an assembly language for an ideal synchronous, reactive machine, and then translates this into SPARC assembly code. <p> For example, in an elevator controller, there might be a pure signal DOORCLOSED indicating that the door has closed, and a valued signal called FLOOR indicating on which floor the car has just arrived. 1.4 Previous Work Berry and Cosserat, the designers of Esterel, write <ref> [6] </ref> The goal of the ESTEREL project is to develop a real-time language based on a rigorous formal model, and actually to develop simultaneously the language, its semantics and its implementation. They give the semantics [6] through a set of rewrite rules. <p> car has just arrived. 1.4 Previous Work Berry and Cosserat, the designers of Esterel, write <ref> [6] </ref> The goal of the ESTEREL project is to develop a real-time language based on a rigorous formal model, and actually to develop simultaneously the language, its semantics and its implementation. They give the semantics [6] through a set of rewrite rules.
Reference: [7] <author> J. A. Brzozowski. </author> <title> Derivatives of regular expressions. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 11(4) </volume> <pages> 481-494, </pages> <month> October </month> <year> 1964. </year>
Reference-contexts: When this process is completed, the state labels can be discarded. At each step, in 8 effect, the derivative of the state machine with respect to some input symbols is taken <ref> [7] </ref>. To keep the number of states within reason, all data-dependent actions are treated separately. When a transition (the execution of a program in an instant) affects memory, perhaps by evaluating an expression, the transition is labeled with that expression.
Reference: [8] <author> CISI INGENIERIE. </author> <title> The Esterel V3 Language Reference Manual, </title> <year> 1988. </year>
Reference-contexts: This scheme avoids the problems of rapidly-growing object code size and compilation times in the Esterel V3 compiler supported by CISI Ingenierie <ref> [8] </ref>. of California, Berkeley. Baker [2] uses a similar intermediate format to define a synchronous, reactive subset of the VHDL language, which is compiled into Esterel and run with the Esterel V3 compiler. <p> At run-time, the if condition is tested and the appropriate branch is taken. Each if statement can, at worst, double the size of the state machine. This compilation scheme was used in an earlier Esterel compiler. The latest, the Esterel V3 compiler currently supported by CISI INGENIERIE <ref> [8] </ref> takes a similar approach: it translates the pure Esterel source into an intermediate representation (called ic) which is then used to form an FSM (represented in the oc file format) which captures all behavior of the program. This approach has nice theoretical properties, but has a few shortcomings. <p> For comparison, it was also tested with the production Esterel V3 compiler supported by CISI INGENIERIE <ref> [8] </ref>. These results are shown in Tables 6.1 and 6.2 on pages 47 and 47.
Reference: [9] <author> Nicolas Halbwachs. </author> <title> Synchronous Programming of Reactive Systems. </title> <publisher> Kluwer, </publisher> <year> 1993. </year>
Reference: [10] <author> J. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year> <month> 83 </month>
Reference-contexts: ADJUST Time Adjust MODE (field change) ADJUST Alarm Adjust MODE (field change) ADJUST Dual Adjust MODE (field change) ADJUST Timer Adjust MODE (field change) MODE (other button pressed first) Figure C.1: The watch's modes. 57 C.1 Testing Scheme A mock-up of an actual watch was created using the Tcl/Tk system <ref> [10] </ref> for building user interfaces. A short ( 40 line) tcl script describes a window with four text items and five buttons. Four of these buttons call simple routines in a small C program ( 400 lines) when pressed, the other quits the program.
References-found: 10

