URL: http://www.eecs.umich.edu/techreports/cse/1996/CSE-TR-284-96.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse96.html
Root-URL: http://www.eecs.umich.edu
Email: email: fnelsonr,aprakashg@eecs.umich.edu  
Title: Tool Coordination and Media Integration on Asynchronously-Shared Computer-Supported Workspaces  
Author: Nelson R. Manohar and Atul Prakash 
Keyword: Multimedia architectures, collaborative multimedia, media integration, and multimedia authoring.  
Address: Ann Arbor, MI 48109-2122 USA.  
Affiliation: Department of Electrical Engineering and Computer Science University of Michigan,  
Abstract: This paper presents a novel and flexible architecture to support the collaboration paradigm for asynchronous sharing of computer-supported workspaces, or simply replayable workspaces. Such workspace, however, may be composed of multiple, interacting, tools. Through the capture, re-execution, and manipulation of a session with an interactive computer-supported workspace, it is possible to reuse the process of how a task was performed, (i.e., valuable collaborative information). Under our paradigm, a user session with a computer-supported workspace is encapsulated into a data artifact, referred to as a session object. The session object can be then manipulated through Vcr-like controls. The session object is an active object, composed of heterogeneous media streams that represent input sequences to various tools of the workspace. Our computer-supported workspace is made-up of modular components that provide transparent management of their heterogeneous media. Such media may have or lack time-variance, periodicity, and statefulness. The architecture provides fine-grained integration of such heterogeneous media, while providing flexible support for coordinating the various tools found in a computer-supported workspace. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H.M. Abdel-Wahab, S. Guan, and J. Nievergelt. </author> <title> Shared workspaces for group collaboration: An experiment using Internet and Unix inter-process communication. </title> <journal> IEEE Communications Magazine, </journal> <pages> pages 10-16, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: Consequently, the replay of such sessions reproduces only the external look of the display. Since interaction with the application's workspace is not possible, its suitability for asynchronous collaboration work is also reduced. Systems such as SharedX, Xtv <ref> [1] </ref>, and Ceced [9] represent another application-independent approach that can support session capture and replay. Capture of a session is done by intercepting events sent by an application to a collaboration-aware server [6].
Reference: [2] <author> D.P. Anderson and R. Kuivila. </author> <title> A system for music performance. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(1) </volume> <pages> 56-82, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: SET-SPEED (str; speed): The support of features such as browsing (e.g., fast forward) can be mapped to temporal transformations over the media integration logical time system (Lts) <ref> [2, 20] </ref>. The Set-Speed () command is used by the session manager to request an unconditional and absolute change of the scheduling rate of a stream controller to the value specified by the parameter speed.
Reference: [3] <author> R. Baker, A. Downing, K. Finn, E. Rennison, D.D. Kim, and Y.H. Lim. </author> <title> Multimedia processing model for a distributed multimedia I/O system. </title> <booktitle> In Proc. of the 3rd Int'l Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pages 164-175, </pages> <address> La Jolla, CA, USA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: However, our model does not fit this framework since in our approach media processing as distributed processes (in the same machine) as opposed to across the network. Finally, although continuous media servers, such as <ref> [3, 13, 20] </ref>, support efficient handling of media streams, such approaches have focused on systems-level extensions (such as predictive prefetching, disk layout, optimal buffering, etc.) as found in [11, 19, 20].
Reference: [4] <author> D.C.A. Bulterman, G. van Rossum, and R. van Liere. </author> <title> A structure for transportable, dynamic multimedia documents. </title> <booktitle> In Proc. of the Summer 1991 USENIX Conference, </booktitle> <pages> pages 137-154, </pages> <address> Nashville, TN, USA., </address> <month> June </month> <year> 1991. </year>
Reference-contexts: Issues in specification and presentation of multimedia documents with heterogeneous media segments or document parts have been addressed in the Firefly system [5], in Cmif <ref> [4] </ref>, and in ScriptX 12 . However, the focus of their research is on specification and enforcements of synchronization constraints among high-level heterogenous media segments of a multimedia document. On the other hand, synchronization at internal points among these heterogenous media segments is not addressed.
Reference: [5] <author> M. Cecelia-Buchanan and P.T. Zellweger. </author> <title> Scheduling multimedia documents using temporal constraints. </title> <booktitle> In Proc. of the 3rd Int'l Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pages 237-249, </pages> <address> La Jolla, CA, USA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Issues in specification and presentation of multimedia documents with heterogeneous media segments or document parts have been addressed in the Firefly system <ref> [5] </ref>, in Cmif [4], and in ScriptX 12 . However, the focus of their research is on specification and enforcements of synchronization constraints among high-level heterogenous media segments of a multimedia document. On the other hand, synchronization at internal points among these heterogenous media segments is not addressed.
Reference: [6] <author> G. Chung, K. Jeffay, and H. Adbel-Wahab. </author> <title> Accomodating latecommers in shared window systems. </title> <journal> IEEE Computer, </journal> <volume> 26(1) </volume> <pages> 72-74, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: Systems such as SharedX, Xtv [1], and Ceced [9] represent another application-independent approach that can support session capture and replay. Capture of a session is done by intercepting events sent by an application to a collaboration-aware server <ref> [6] </ref>. Although this approach, in principle, allows replay of unmodified applications, interacting with the application workspace is not possible. Furthermore, currently, these systems do not offer fine-grained audio synchronization support.
Reference: [7] <author> G. Chung, K. Jeffay, and H. Adbel-Wahab. </author> <title> Dynamic participation in computer-based conferencing system. </title> <journal> Journal of Computer Communications, </journal> <volume> 17(1) </volume> <pages> 7-16, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: Our modular architecture allows the replacement of this component by another window multiplexer such as Xtv <ref> [7] </ref>, provided that it too has also been extended to replay-awareness, through compliance to our interfaces.
Reference: [8] <author> C.R. Clauer, J.D. Kelly, T.J. Rosenberg, C.E. Rasmussen, P. Stauning, E. Friis-Christensen, R.J. Niciejewski, T.L. Killeen, S.B. Mende, Y. Zambre, T.E. Weymouth, A. Prakash, G.M. Olson S.E. McDaniel, T.A. Finholt, and D.E. Atkins. </author> <title> A new project to support scientific collaboration electronically. </title> <journal> EOS Transactions on American Geophysical Union, </journal> <volume> 75, </volume> <month> June 28 </month> <year> 1994. </year>
Reference-contexts: Our long term research focuses on the development of developer toolkits to support collaborative paradigms such as the asynchronous sharing of computer-supported workspaces. This research is partially motivated by the needs of two projects at the University of Michigan: the Upper Atmospheric Research Collaboratory (Uarc) <ref> [8] </ref> and the Medical Collab (Mdc).
Reference: [9] <author> E. Craighill, R. Lang, M. Fong, and K. Skinner. CECED: </author> <title> A system for informal multimedia collaboration. </title> <booktitle> In Proc. of ACM Multimedia '93, </booktitle> <pages> pages 436-446, </pages> <address> CA, USA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Consequently, the replay of such sessions reproduces only the external look of the display. Since interaction with the application's workspace is not possible, its suitability for asynchronous collaboration work is also reduced. Systems such as SharedX, Xtv [1], and Ceced <ref> [9] </ref> represent another application-independent approach that can support session capture and replay. Capture of a session is done by intercepting events sent by an application to a collaboration-aware server [6]. Although this approach, in principle, allows replay of unmodified applications, interacting with the application workspace is not possible.
Reference: [10] <author> R.B. Dannenberg, T. Neuendorffer, J.M. Newcomer, D. Rubine, and D.B. Anderson. Tactus: </author> <title> toolkit-level support for synchronized interactive multimedia. </title> <journal> Multimedia Systems, </journal> <volume> 1(1) </volume> <pages> 77-86, </pages> <year> 1993. </year>
Reference-contexts: On the other hand, synchronization at internal points among these heterogenous media segments is not addressed. In our work, the focus is on enforcing fine-grain synchronization at internal points among heterogeneous media segments. Continuous multimedia architectures such as Tactus <ref> [10] </ref> and Cmt [20] make use of a centralized synchronization server to provide fine-grained synchronization of pre-selected heterogeneous media stream types.
Reference: [11] <author> H.P. Katseff and B.S. Robinson. </author> <title> Predictive prefetch in the Nemesis multimedia information service. </title> <booktitle> In Proc. of ACM Multimedia '94, </booktitle> <pages> pages 201-210, </pages> <address> San Francisco, CA, USA, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Finally, although continuous media servers, such as [3, 13, 20], support efficient handling of media streams, such approaches have focused on systems-level extensions (such as predictive prefetching, disk layout, optimal buffering, etc.) as found in <ref> [11, 19, 20] </ref>. On the other hand, we are trying to provide dimension reuse and best-effort services at the application-level. 11 CONCLUSION In this paper, we presented detailed architectural issues on the support and collaborative use of replayable computer-supported workspaces.
Reference: [12] <author> T.D.C. Little. </author> <title> A framework for synchronous delivery of time-dependent multimedia systems. </title> <journal> Multimedia Systems, </journal> <volume> 1(1) </volume> <pages> 87-94, </pages> <year> 1993. </year>
Reference-contexts: Our approach removes the need for knowledge about the media stream types from the synchronization server | by delegating the media handling to the stream controllers. 11 | The Xmx application is available from http://www.cs.brown.edu/software/xmx/v1.html. 12 | refer to http://www.kaleida.com/reference/index.html 21 The framework found in <ref> [12] </ref> also addresses fine-grained synchronization for continuous media. However, our model does not fit this framework since in our approach media processing as distributed processes (in the same machine) as opposed to across the network.
Reference: [13] <author> P. Lougher and D. Shepherd. </author> <title> The design of storage servers for continuous multimedia. </title> <journal> The Computer Journal, </journal> <volume> 63(1) </volume> <pages> 69-91, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: However, our model does not fit this framework since in our approach media processing as distributed processes (in the same machine) as opposed to across the network. Finally, although continuous media servers, such as <ref> [3, 13, 20] </ref>, support efficient handling of media streams, such approaches have focused on systems-level extensions (such as predictive prefetching, disk layout, optimal buffering, etc.) as found in [11, 19, 20].
Reference: [14] <author> N.R. Manohar and A. Prakash. </author> <title> Replay by re-execution: a paradigm for asynchronous collaboration via record and replay of interactive multimedia streams. </title> <journal> ACM SIGOIS Bulletin, </journal> <volume> 15(2) </volume> <pages> 32-34, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: Both approaches are often inadequate for collaborative work due to (among other things) the potential loss of collaboration content. Our approach addresses the above problem by supporting the asynchronous sharing of interactive application workspaces through the use of session objects, introduced in <ref> [14, 16] </ref>. In this paper, however, we extend this support to computer-supported workspaces composed of multiple tools as opposed to a monolithic application workspace. Our session objects allow to replay and annotate the process of how a task was performed. Session objects are manipulated through Vcr-like controls.
Reference: [15] <author> N.R. Manohar and A. Prakash. </author> <title> Dealing with synchronization and timing variability in the playback of interactive session recordings. In to be published in: </title> <booktitle> Proc. of ACM Multimedia '95, </booktitle> <address> San Francisco, CA, USA, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: For example, the synchronization treatments supported by our architecture are summarized in Table I. The implementation of the various synchronization treatments is encapsulated in the session manager and (with the exception of the adaptive treatments) is transparent to the stream controllers. For example, previously in <ref> [15] </ref>, we introduced a statistical algorithm (P3) suited for our domain requirements. We reuse the P3 algorithm to empower the session manager to loose supervisory controls over its stream controllers.
Reference: [16] <author> N.R. Manohar and A. Prakash. </author> <title> The Session Capture and Replay Paradigm for Asynchronous Collaboration. </title> <booktitle> In Proc. of European Conference on Computer Supported Cooperative Work (ECSCW)'95, </booktitle> <pages> pages 161-177, </pages> <address> Stockholm, Sweden, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Both approaches are often inadequate for collaborative work due to (among other things) the potential loss of collaboration content. Our approach addresses the above problem by supporting the asynchronous sharing of interactive application workspaces through the use of session objects, introduced in <ref> [14, 16] </ref>. In this paper, however, we extend this support to computer-supported workspaces composed of multiple tools as opposed to a monolithic application workspace. Our session objects allow to replay and annotate the process of how a task was performed. Session objects are manipulated through Vcr-like controls. <p> We first overview background information about our first prototype <ref> [16] </ref>, which allowed the capture and replay of a session with an interactive application workspace. 2 Then, in the next section, we introduce our new architecture as a substantial refinement, that provides modular and flexible support for the capture and replay of sessions on computer-supported workspaces, referred herein to as replayable <p> Readers are encouraged to try the prototype of our first system, a replayable McDraw-like drawing application (available only for NeXT-workstations). Our first prototype can be obtained at: http: //www.eecs.umich.edu/~nelsonr/replaykit. 3 | except for the rewind operation (due to statefulness constraints) discussed in <ref> [16] </ref>. 3 the session management window provided by the replayable object class to an application, which provides a Vcr--like abstraction. The replayable object class also delivered transparent access to our infrastructure services. The infrastructure on our first prototyped provided low-level support for the handling of temporal media streams.
Reference: [17] <author> N.R. Manohar and A. Prakash. </author> <title> A flexible architecture for heterogeneous media integration on replayable workspaces. In to appear in: </title> <booktitle> Proc. Third IEEE Int'l Conf on Multimedia Computing and Systems, </booktitle> <address> Hiroshima, Japan, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: In this paper, we look into the architecture for replayable computer-supported workspaces. The key goals of our architecture, as overview in <ref> [17] </ref>, are: modularity: independence of players for application, audio, user-interface, etc. In principle, it should be possible to support a different audio record/playback module without affecting other workspace dimensions or modifying application's code. extensibility: support for multiple applications in the replayable workspace.
Reference: [18] <author> S. Ramanathan and P. Venkat Rangan. </author> <title> Continuous media synchronization in distributed multimedia systems. </title> <booktitle> In Proc. of the 3rd Int'l Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pages 328-335, </pages> <address> La Jolla, CA, USA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Dynamic browsing is best represented by fast-replay and fast-forward of session objects. Dynamic browsing is a typical and desirable feature on media players | usually implemented by manipulating the global presentation rate of the media's logical time system <ref> [18] </ref>. Thus, to fast-replay a session, the session manager broadcasts a SetSpeed () command to its stream controllers. After increasing the presentation rate of stream controllers, the session manager proceeds to replay the required time segment | although now, at the higher presentation rate.
Reference: [19] <author> P. Venkat Rangan and Harrick M. Vin. </author> <title> Designing file systems for digital video and audio. </title> <journal> ACM Transactions of Computer Systems, </journal> <volume> 18(2) </volume> <pages> 197-222, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Finally, although continuous media servers, such as [3, 13, 20], support efficient handling of media streams, such approaches have focused on systems-level extensions (such as predictive prefetching, disk layout, optimal buffering, etc.) as found in <ref> [11, 19, 20] </ref>. On the other hand, we are trying to provide dimension reuse and best-effort services at the application-level. 11 CONCLUSION In this paper, we presented detailed architectural issues on the support and collaborative use of replayable computer-supported workspaces.
Reference: [20] <author> L.A. Rowe and B.C. Smith. </author> <title> A Continuous Media Player. </title> <booktitle> In Proc. of the 3rd Int'l Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <pages> pages 376-386, </pages> <address> La Jolla, CA, USA, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: SET-SPEED (str; speed): The support of features such as browsing (e.g., fast forward) can be mapped to temporal transformations over the media integration logical time system (Lts) <ref> [2, 20] </ref>. The Set-Speed () command is used by the session manager to request an unconditional and absolute change of the scheduling rate of a stream controller to the value specified by the parameter speed. <p> On the other hand, synchronization at internal points among these heterogenous media segments is not addressed. In our work, the focus is on enforcing fine-grain synchronization at internal points among heterogeneous media segments. Continuous multimedia architectures such as Tactus [10] and Cmt <ref> [20] </ref> make use of a centralized synchronization server to provide fine-grained synchronization of pre-selected heterogeneous media stream types. <p> However, our model does not fit this framework since in our approach media processing as distributed processes (in the same machine) as opposed to across the network. Finally, although continuous media servers, such as <ref> [3, 13, 20] </ref>, support efficient handling of media streams, such approaches have focused on systems-level extensions (such as predictive prefetching, disk layout, optimal buffering, etc.) as found in [11, 19, 20]. <p> Finally, although continuous media servers, such as [3, 13, 20], support efficient handling of media streams, such approaches have focused on systems-level extensions (such as predictive prefetching, disk layout, optimal buffering, etc.) as found in <ref> [11, 19, 20] </ref>. On the other hand, we are trying to provide dimension reuse and best-effort services at the application-level. 11 CONCLUSION In this paper, we presented detailed architectural issues on the support and collaborative use of replayable computer-supported workspaces.
Reference: [21] <author> R. Steinmetz. </author> <title> Synchronization properties in multimedia systems. </title> <journal> IEEE Journal of Selected Areas of Communication, </journal> <volume> 8(3) </volume> <pages> 401-411, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: The media integration problem requires the session manager to provide fine-grained support for temporal synchronization constraints between the media streams of its stream controllers. Synchronization is based on the use of synchronization events, widely accepted in the synchronization literature <ref> [21] </ref>. The synchronization model follows a master/slave model. A synchronization event, s i (lhs rhs), preserves relative timing between lhs and rhs stream controllers involved in a synchronization relationship. In this notation, an rhs stream controller synchronizes to the lhs stream controller.
Reference: [22] <author> Ligier Y., Ratib O., Logean M., and Girard C. </author> <title> Osiris : A medical image manipulation system. M.D. </title> <journal> Computing Journal, </journal> <volume> 11(4) </volume> <pages> 212-218, </pages> <address> July-August 94. </address> <month> 23 </month>
Reference-contexts: In our new approach, both X and Y, will become modular tools of the replayable workspace. Audio and user-interface support will now be dimensions shared by the these workspace tools. For the purposes of demonstrating our replayable workspace, we have used the University Hospital of Geneva's Osiris II tool <ref> [22] </ref> 4 . Bear in mind that the snapshots shown next are indeed of the Osiris II's workspace. Our prototype 5 , on the other hand, represents the black box that extended temporal-awareness to the Osiris II session by providing coordinated replay of audio, video, and window streams.
References-found: 22

