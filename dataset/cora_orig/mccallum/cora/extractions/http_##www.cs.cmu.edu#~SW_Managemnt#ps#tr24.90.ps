URL: http://www.cs.cmu.edu/~SW_Managemnt/ps/tr24.90.ps
Refering-URL: http://www.cs.cmu.edu/~SW_Managemnt/html/bib.html
Root-URL: 
Title: Process Group Guide  
Author: Priscilla Fowler Stan Rifkin 
Date: September 1990  
Note: CMU/SEI-90-TR-24 Software Engineering  
Abstract: Technical Report 
Abstract-found: 1
Intro-found: 1
Reference: ) <institution> Military Standard, Defense System Software Development. </institution> <month> February 29, </month> <year> 1988 </year> <month> DOD-STD-2167A. </month>
Reference: [Ackerman83] <author> A. F. Ackerman, Priscilla J. Fowler, and Robert G. Ebenau. </author> <title> Software inspections and the industrial production of software. </title> <editor> In Hans-Ludwig Hausen (editor), </editor> <booktitle> Proceedings, Symposium on Software Validation, </booktitle> <pages> pages 13-40. </pages> <publisher> North-Holland, </publisher> <month> September 25-30, </month> <year> 1983. </year>
Reference: [ASD800-5] <author> Philip S. </author> <title> Babel. Software Development Capability/Capacity Review (SDCCR). </title> <type> Technical Report ASD Pamphlet 800-5, U.S. </type> <institution> Department of the Air Force, Headquarters Aeronautical Systems Division, Acquisition Management, Wright-Patterson AFB, OH, </institution> <month> September 10, </month> <year> 1987. </year>
Reference-contexts: Variants of this method include the SEI-assisted assessment and the SEI self-assessment procedure; organizations can use the latter to assess themselves. Another example is the Software Development Capability/Capacity Review <ref> [ASD800-5] </ref> of the Air Force Aeronautical Systems Division, also used as part of source selection. (See Chapter 3 for more information about assessing current practice.) Whether conducted by an outside agent or by an organization for their own purposes, assessment procedures such as these give organizations a systematic and thorough way <p> Formal assessment procedures based on questionnaires and interviews include the SEI Software Capability Evaluation [TR23], the Air Force Software Development Capability/Capacity Review <ref> [ASD800-5] </ref>, and the approach described in [Pressman88]. All three approaches call for a written report that describes strengths and weaknesses and includes recommendations for addressing weak areas. This information is input to an action plan for overall, long-term process improvement.
Reference: [Bayer89] <author> Judy Bayer and Nancy Melone. </author> <title> Adoption of Software Engineering Innovations in Organizations. </title> <type> Technical Report CMU/SEI-89-TR-17, </type> <institution> ADA211573, Software Engineering Institute, </institution> <month> April </month> <year> 1989. </year>
Reference: [Card89] <author> D.N. Card and R.A. Berg. </author> <title> An industrial engineering approach to software development. </title> <journal> J. of Syst. and Software 10(3) </journal> <pages> 159-168, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Because software practitioners are well-educated professionals who readily take independent action, a well-articulated and understood process is essential to the orderly and predictable operation of a software development organization. A well-defined and articulated description is prerequisite to process improvement. As Card and Berg <ref> [Card89] </ref> state, "periodic acquisition of improved methods and tools, by itself, does not ensure continual improvement. To be effective, technology must be integrated into an underlying process.
Reference: [Card90] <author> D.N. Card. </author> <title> Measuring Software Design Quality. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference: [Carlyle88] <author> Ralph Emmett Carlyle. </author> <title> Advanced technology groups. </title> <type> Datamation 34(21) </type> <pages> 18-24, </pages> <month> November 1, </month> <year> 1988. </year>
Reference: [Cho87] <author> Chin-Keui Cho. </author> <title> Quality Programming: Developing and Testing Software with Statistical Quality Control. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1987. </year>
Reference-contexts: The data may be used to develop rate and trend parameters for project planning. The ultimate goal of measuring the software process is to reach the point of statistically 9 verifiable control similar to that available in a manufacturing process. Control over a proc ess is obtained by: 9 <ref> [Cho87] </ref> explores this analogy at length, focusing primarily on product quality. CMU/SEI-90-TR-24 43 Characterizing the process and making it more visible. Using simple measures directly related to what needs to be improved. Measuring the process as well as the product. 5.1.1.
Reference: [Conner82] <author> Daryl R. Conner and Robert W. Patterson. </author> <title> Building commitment to organzational change. Training and Development Journal :18-30, </title> <month> April </month> <year> 1982. </year>
Reference-contexts: Information Transfer Mechanisms Information transfer mechanisms are those that serve to disseminate information or knowledge about a particular technology. These mechanisms, summarized in Figure 7-1, allow prospective users of a technology to proceed through the first four stages of commitment to organizational change <ref> [Conner82] </ref>: contact with new technology, awareness of its implications in general, understanding of how it might change an individual's particular environment, and positive perception of the possibility of using it. Typically, these information transfer mechanisms present a technology in a generic or unadapted state. <p> Mechanisms for Implementing Technological Change Mechanisms for implementing change are those that support the processes of adapting, installing, and routinely using a new technology. According to <ref> [Conner82] </ref>, the next four stages of commitment to change involve beginning and ongoing use of a new technology; he labels these installation, adoption, institutionalization, and internalization. Installation is self-explanatory. Although pilot efforts are not discussed per se, the definition of adoption does imply the need for a shakedown period.
Reference: [Crawford85] <author> S.G. Crawford and M.H. Fallah. </author> <title> Software development process audits - A general procedure. </title> <booktitle> In Proceedings, 8th International Conference on Software Engineering, </booktitle> <pages> pages 137-141. </pages> <month> August </month> <year> 1985. </year>
Reference: [Crosby79] <author> Philip B. Crosby. </author> <title> Quality is Free: the Art of Making Quality Certain. </title> <address> New American Library, </address> <year> 1979. </year> <note> CMU/SEI-90-TR-24 77 </note>
Reference-contexts: Example of an Assessment Method This section summarizes the SEI self-assessment approach, which is described in more detail in [TR7]. The approach uses a questionnaire developed at the SEI (see [TR23]) and based on the framework described in Appendix A as well as <ref> [Crosby79] </ref>. Figures 2-1 and 2-2 present the SEI process in some detail. Figure 2-3 shows sample questions. For comparison, Figure 2-4 lists some questions from [Pressman88], which describes a different approach along with related process improvement actions.
Reference: [Currit86] <author> P.A. Currit, M. Dyer, and H.D. Mills. </author> <title> Certifying the reliability of software. </title> <journal> IEEE Trans. Software Engineering 12(1) </journal> <pages> 3-11, </pages> <month> January </month> <year> 1986. </year>
Reference: [Deming82] <author> W. Edwards Deming. </author> <title> Quality, Productivity, and Competitive Position. </title> <publisher> MIT, </publisher> <year> 1982. </year>
Reference: [Deming86] <author> W. Edwards Deming. </author> <title> Out of the Crisis. </title> <publisher> MIT, </publisher> <year> 1986. </year>
Reference-contexts: The Process Improvement Cycle Software process improvement is a continuous cycle. The following steps are adapted from the well-known Shewart cycle <ref> [Deming86] </ref>. See also Figure B-2, page 95. 1. Set expectations. 2. Assess the current practice. 3. Analyze the variance between expectation and practice. 4. Propose changes that will reduce the variance and thereby improve the proc ess. 5. <p> Thus the process improvement approach leads systematically to reduction of the variance to an acceptable level. Appendix B provides an introduction to the subject and pointers to additional references. Excellent additional sources are [Harrington87] and [Humphrey89], both based on the pioneering work of <ref> [Deming86] </ref>. 4. Propose Improvements. Once areas needing improvement have been identified, an organization must determine what activities are appropriate. Alternatives are explored and decisions made. If a cost-estimation procedure needs to be developed, for example, requirements for it need to be analyzed and carefully specified.
Reference: [Ebenau83] <author> Robert G. Ebenau, A.S. Ackerman, M. S. Easterling, P. J. Fowler, P. Freeman, P. M. Mellema, and V. S. Whitis. </author> <title> Report of the group on training as a technology transfer vehicle. </title> <booktitle> In Proceedings, IEEE Computer Society Workshop on Software Engineering Technology Transfer, </booktitle> <pages> pages 6-8. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1983. </year>
Reference-contexts: Each area or level plays particular roles and performs certain functions with respect to owning quality. Each of several key areas is described below and discussed briefly. Further discussion of the roles of management and engineers in adopting new software engineering technology may be found in <ref> [Ebenau83] </ref>. Executive management. Executive or senior managers play a major role in setting and directing strategy for continuing process improvement across their organizations. They also provide sponsorship of improvement efforts by taking action in support of the strategy.
Reference: [Fagan76] <author> M. E. Fagan. </author> <title> Design and code inspections to reduce errors in program development. </title> <journal> IBM Systems J. </journal> <volume> 15(3) </volume> <pages> 182-211, </pages> <month> July </month> <year> 1976. </year>
Reference: [Feigenbaum83] <author> Armand V. Feigenbaum. </author> <title> Total Quality Control. </title> <publisher> McGraw-Hill, </publisher> <year> 1983. </year>
Reference-contexts: Based on the results of an assessment, managers may also refine their expectations and goals. 6 CMU/SEI-90-TR-24 Organizations with mature processes (maturity levels 4 and 5 in Appendix A) analyze the variance between expectation and practice using the tools of statistical process control <ref> [Feigenbaum83, Ishikawa85] </ref>. Such practices can simultaneously show the quality goals and the outcome of quality practice. Knowledge of software engineering process and technology, and experience in software development and management lead to the generation of viable alternatives to current practice.
Reference: [Felix83] <author> G.H. Felix and J.L. Riggs. </author> <title> Productivity measurement by objectives. </title> <institution> National Productivity Rev. </institution> , <month> Autumn </month> <year> 1983. </year>
Reference: [Flaherty85] <author> M.J. Flaherty. </author> <title> Programming process productivity measurement system for System/370. </title> <journal> IBM Systems J. </journal> <volume> 24(2) </volume> <pages> 168-175, </pages> <year> 1985. </year>
Reference-contexts: Measurement This section provides introductory material on establishing the measurement portion of a process database. Further guidance can be found in the following references, ordered from general to detailed: [Grady87], [Humphrey89], and <ref> [Flaherty85] </ref>. The measurement files of the process database contain quantitative information about how effective the process is. This information can be collected for a number of reasons and used in a number of ways. [Humphrey89] cites the following: Understanding.
Reference: [Fortuna88] <author> R.M. Fortuna. </author> <title> Beyond quality: taking SPC upstream. ASQC Quality Progress , June 1988. </title>
Reference: [Fowler86] <author> Priscilla J. </author> <title> Fowler. </title> <journal> In-process inspections of workproducts at AT&T. AT&T Technical J. </journal> <volume> 65(2) </volume> <pages> 102-112, </pages> <address> March-April, </address> <year> 1986. </year>
Reference: [Freeman87] <author> Peter Freeman. </author> <title> Software Perspectives: The System is the Message. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: Analyzing variance, proposing improvements, planning the integration of improvements, and implementing improvements are all aspects of the process group's job of implementing change. One useful model of this process comes from <ref> [Freeman87] </ref>: each new improvement, along with its planning and installation processes, can be treated as a project. Chapters 6 and 7 discuss this approach in more detail. 7. Perform the Process as Defined. <p> Auditable. It should be specificconcrete enough for an independent agency to use in making an objective, repeatable judgment about whether the defined process has been followed. Evolvable. The definition must include a provision for orderly change. There is a growing body of literature about process definition and process modeling. <ref> [Freeman87] </ref> treats these subjects extensively, under the name "system development system." An SEI curriculum module [Scacchi87] is dedicated to these topics. Readers should also examine DoD-STD-2167A [2167A] and the IEEE Standard for Software Life Cycle Processes [IEEE-SLCP89], now available for public review.
Reference: [Gale90] <author> J.L. Gale, J.R. Tirso, </author> <title> and C.A. Burchfield. Implementing the defect prevention process in the MVS interactive programming organization. </title> <journal> IBM Systems J. </journal> <volume> 29(1) </volume> <pages> 33-43, </pages> <year> 1990. </year>
Reference-contexts: Prior records of consensus on areas needing work may also be tapped. For example, many organizations routinely reassess themselves as part of strategic planning or project postmortems, and it is useful to review findings from these activities. Some life-cycle definitions include a lessons learned activity <ref> [SMAP4.3, Gale90, Mays90] </ref>. These techniques usually address specific areas of concern; and because they may be less structured or require less time, they can be used more frequently. Thus, they complement formal assessments. <p> This initiative includes industry, government, and academia. CMU/SEI-90-TR-24 45 5.3. Defect Prevention Several process information files are needed to support the defect prevention process de scribed by <ref> [Mays90, Gale90] </ref>. The defect file contains a record of each defect and information such as origi nator, description, resolution, disposition, and effort to repair. The action item file contains the action items that arise out of a causal analysis of the defects.
Reference: [Gardiner87] <author> J.S. Gardiner and D.C. Montgomery. </author> <title> Using statistical control charts for software quality control. </title> <booktitle> Quality and Reliability Engineering Intl. </booktitle> <address> :15-20, </address> <month> January </month> <year> 1987. </year> <note> 78 CMU/SEI-90-TR-24 </note>
Reference: [Gershon85] <author> Gary Gershon (ed.). </author> <title> Special issue on quality and producivity. </title> <journal> IBM Systems J. </journal> <volume> 24(2) </volume> <pages> 74-175, </pages> <year> 1985. </year>
Reference-contexts: adopting what the Japanese call kaizen, meaning [Kenkyusha54] "continuous improvement." Software development organizations are no exception to this: Hewlett Packard measures its progress through a company-wide program in software metrics [Grady87], and both AT&T Bell Laboratories and IBM have devoted entire issues of their technical journals to software quality technology <ref> [Myers86, Gershon85] </ref>.
Reference: [Gessner84] <author> Robert A. Gessner. </author> <title> Manufacturing Information Systems Implementation Planning. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1984. </year>
Reference: [Grady87] <author> Robert L. Grady and Deborah L. Caswell. </author> <title> Software Metrics: Establishing a Company-Wide Program. </title> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference-contexts: is Job 1" slogan to the DoD Total Quality Management program [TQM88], industry in the United States seems to be adopting what the Japanese call kaizen, meaning [Kenkyusha54] "continuous improvement." Software development organizations are no exception to this: Hewlett Packard measures its progress through a company-wide program in software metrics <ref> [Grady87] </ref>, and both AT&T Bell Laboratories and IBM have devoted entire issues of their technical journals to software quality technology [Myers86, Gershon85]. <p> Measurement This section provides introductory material on establishing the measurement portion of a process database. Further guidance can be found in the following references, ordered from general to detailed: <ref> [Grady87] </ref>, [Humphrey89], and [Flaherty85]. The measurement files of the process database contain quantitative information about how effective the process is. This information can be collected for a number of reasons and used in a number of ways. [Humphrey89] cites the following: Understanding. <p> Accordingly, the first task will be to "gain agreement on a set of software measurement criteria which managers feel are meaningful, 44 CMU/SEI-90-TR-24 reasonable to collect, and can be used to measure progress and predict results" 10 <ref> [Grady87] </ref>. 5.1.4. Suggestions Keep the data simple. Even very simple measures have been shown to be effective. <p> For example, it may be unnecessary to collect "hours worked" to any decimal points since variations of up to two times in effort rarely affect measures of the underlying process. (However, that variation might distort the numerical value of productivity.) Additional examples can be found in Chapter 9 of <ref> [Grady87] </ref>. There is an expense to collecting and validating data, but one of the factors that can offset the expense is turnaround that is quick enough to take advantage of the collected information.
Reference: [Harrington87] <author> H.J. Harrington. </author> <title> The Improvement Process: How America's Leading Companies Improve Quality. </title> <publisher> McGraw-Hill, </publisher> <year> 1987. </year>
Reference-contexts: Thus the process improvement approach leads systematically to reduction of the variance to an acceptable level. Appendix B provides an introduction to the subject and pointers to additional references. Excellent additional sources are <ref> [Harrington87] </ref> and [Humphrey89], both based on the pioneering work of [Deming86]. 4. Propose Improvements. Once areas needing improvement have been identified, an organization must determine what activities are appropriate. Alternatives are explored and decisions made.
Reference: [Humphrey88] <author> Watts Humphrey. </author> <title> Characterizing the software process: a maturity framework. </title> <journal> IEEE Software :73-79, </journal> <month> March </month> <year> 1988. </year>
Reference-contexts: The third section, Chapters 9-10, addresses organizational issues. These include staffing the process group and locating it effectively within the organization structure. The appendices contain supplementary material. The first appendix (a reprint of <ref> [Humphrey88] </ref>) describes the SEI software process maturity framework; readers not familiar with this framework should read the appendix before going on to Part I of this guide.
Reference: [Humphrey89] <author> Watts Humphrey. </author> <title> Managing the Software Process. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Thus the process improvement approach leads systematically to reduction of the variance to an acceptable level. Appendix B provides an introduction to the subject and pointers to additional references. Excellent additional sources are [Harrington87] and <ref> [Humphrey89] </ref>, both based on the pioneering work of [Deming86]. 4. Propose Improvements. Once areas needing improvement have been identified, an organization must determine what activities are appropriate. Alternatives are explored and decisions made. <p> Often these are costs that would be expended on similar activities in any case, but in a less organized and therefore less visible way. In organizations of a hundred or more software professionals, the recommended budget for a process group <ref> [Humphrey89] </ref> is normally 1% to 3% of the overall software development 4 budget of the organization it supports. Appendix G contains data gathered informally at the SEPG Workshop held by the SEI in 1989. <p> Technical Working Groups Humphrey recommends that organizations "...aim at full-time assignments to the SEPG of about 2 percent of the software professionals" <ref> [Humphrey89] </ref>. This level of staffing was rarely found either in the organizations interviewed or in those who sent participants to the SEI 1989 SEPG Workshop (see Appendix G). Moreover, process improvement is such a large task that process groups need to augment their permanent membership. <p> All software development organizations have a process in place for doing their work. This 7 For details see Appendix B. 8 Recommended reading for those beginning the task of describing or defining software process: <ref> [Humphrey89] </ref>, Ch. 13, "Defining the Software Process." CMU/SEI-90-TR-24 37 process is not always documented in adequate detail. <p> In addition, the international workshops on software process contain considerable material on definition; the latest proceedings is [SoftProcWork89]. Each of these references will mention others. As mentioned earlier, Chapter 13, "Defining the Software Process," in <ref> [Humphrey89] </ref> is recom 40 CMU/SEI-90-TR-24 mended for reading prior to beginning a description or definition of an organization's proc-ess. 4.3. <p> Measurement This section provides introductory material on establishing the measurement portion of a process database. Further guidance can be found in the following references, ordered from general to detailed: [Grady87], <ref> [Humphrey89] </ref>, and [Flaherty85]. The measurement files of the process database contain quantitative information about how effective the process is. This information can be collected for a number of reasons and used in a number of ways. [Humphrey89] cites the following: Understanding. <p> guidance can be found in the following references, ordered from general to detailed: [Grady87], <ref> [Humphrey89] </ref>, and [Flaherty85]. The measurement files of the process database contain quantitative information about how effective the process is. This information can be collected for a number of reasons and used in a number of ways. [Humphrey89] cites the following: Understanding. Data may be gathered as part of a study to learn about a par ticular item or process. Evaluation. The data may be used to determine if a process, product, or acti vity meets acceptance criteria. Control.
Reference: [IEEE-PMP88] <author> IEEE. </author> <title> Standard for Software Project Management Plans, </title> <institution> ANSI/IEEE Std. 1058.1-1987. Institute of Electrical and Electronics Engineers, </institution> <year> 1988. </year>
Reference: [IEEE-SLCP89] <author> IEEE. </author> <title> Draft Standard for Software Life Cycle Processes, </title> <institution> P1074/D4. Institute of Electrical and Electronics Engineers, </institution> <month> August 8, </month> <year> 1989. </year>
Reference-contexts: There is a growing body of literature about process definition and process modeling. [Freeman87] treats these subjects extensively, under the name "system development system." An SEI curriculum module [Scacchi87] is dedicated to these topics. Readers should also examine DoD-STD-2167A [2167A] and the IEEE Standard for Software Life Cycle Processes <ref> [IEEE-SLCP89] </ref>, now available for public review. In addition, the international workshops on software process contain considerable material on definition; the latest proceedings is [SoftProcWork89]. Each of these references will mention others.
Reference: [IEEE-SQ86] <author> IEEE. </author> <title> Guide for Software Quality Planning, </title> <booktitle> ANSI/IEEE Std. </booktitle> <pages> 983-1986. </pages> <institution> Institute of Electrical and Electronics Engineers, </institution> <year> 1986. </year>
Reference-contexts: Corporate or national standards that apply may be too abstract for use without further modification; for example, they may require, as in the case of <ref> [IEEE-SQ86] </ref>, several different types of reviews, but not provide checklists or agendas. A first step in process improvement, therefore, is to prepare a detailed written description of the process as it currently is practiced.
Reference: [Ishikawa85] <author> Kaoru Ishikawa. </author> <title> What is Total Quality Control? The Japanese Way. </title> <publisher> Prentice-Hall, </publisher> <year> 1985. </year>
Reference-contexts: Based on the results of an assessment, managers may also refine their expectations and goals. 6 CMU/SEI-90-TR-24 Organizations with mature processes (maturity levels 4 and 5 in Appendix A) analyze the variance between expectation and practice using the tools of statistical process control <ref> [Feigenbaum83, Ishikawa85] </ref>. Such practices can simultaneously show the quality goals and the outcome of quality practice. Knowledge of software engineering process and technology, and experience in software development and management lead to the generation of viable alternatives to current practice.
Reference: [Jacobson89] <author> John M. Jacobson. </author> <title> Value-based contracting. </title> <booktitle> In Proceedings, SOFTCON '89: Managing Software into the 90's ... Acquiring the Competitive Edge, </booktitle> <pages> pages 189-203. </pages> <publisher> American Defense Preparedness Association, </publisher> <year> 1989. </year>
Reference-contexts: of Lifecycle Cost Reduced O&M Cost Cumulative D&D Cost 10 20 30 40 50 60 70 80 90 100 O&M Phase Increased Productivity (or less rework) Could Lower These Costs Present Model Improved Quality Results in 20-30% Cost Reduction Cumulative Total Cost Percent of (Present) Life Cycle Elapsed Reprinted from <ref> [Jacobson89] </ref>. Another benefit is the improved prospect of winning and keeping contracts when the government includes software process maturity in its source selection and contract management criteria [Thomas88]. <p> Moreover, if certain contract incentives are inaugurated, developers would be paid an award fee of up to 15% based on software quality as assessed during the early post-deployment phase <ref> [Jacobson89] </ref>. A mature development process would make it more likely that the award fee would be earned. CMU/SEI-90-TR-24 15 An improved process also allows easier acquisition and adoption of new technology be-cause that technology can be acquired in direct support of defined processes.
Reference: [Janger79] <author> Allen R. Janger. </author> <title> Matrix Organization of Complex Businesses. </title> <booktitle> The Conference Board, </booktitle> <year> 1979. </year>
Reference-contexts: B Resource 4 Manager for Business B Resource 2 Manager for Business C Resource 3 Manager for Business C Resource 4 Manager for Business C Resource 2 Manager for Business D Resource 3 Manager for Business D Resource 4 Manager for Business D SEPG SEPG SEPG SEPG SEPG Adapted from <ref> [Janger79] </ref>. 70 CMU/SEI-90-TR-24 There is a special challenge in placing a process group where it will be of greatest value to the most people. <p> In the search for the proper place, we must also consider a function to which both program managers and resource managers reportthe common superior. Typically this function does not make decisions but is more judicial in character, arbitrating interactions among the competing needs of program and resource managers <ref> [Janger79] </ref>. Organizations often keep the "common boss" budget low. This assures that studies are done and decisions are made by those who have to live with the consequences, i.e., the operating units themselves.
Reference: [Juran81] <author> J.M. Juran. </author> <title> Product quality - a prescription for the West. </title> <journal> Management Rev. </journal> , <month> June </month> <year> 1981. </year> <note> CMU/SEI-90-TR-24 79 </note>
Reference: [Kanter83] <author> Rosabeth Moss Kanter. </author> <title> The Change Masters: Innovation for Productivity in the American Corporation. </title> <publisher> Simon and Schuster, </publisher> <year> 1983. </year>
Reference-contexts: In two of the companies interviewed, the steering committee that oversees the process group reports to a higher level steering group that has broader concerns. Software process improvement issues are thus connected to product quality issues on a corporate level. The steering committee provides additional organizational benefits. Kanter <ref> [Kanter83] </ref> discusses at length the need to foster open communication and "integrative approaches" that bridge interest groups. Open communication is important because it gives managers "crosscutting access" to information, resources, and support outside their immediate domain. <p> It is, in effect, a largely informal parallel organization [Stein80]; and like most informal organizational entities, it is at risk because it is outside direct product-producing activities. Recognizing the importance of groups to the competitiveness of the organizations they serve, Kanter <ref> [Kanter83] </ref> suggests the following solution: The idea behind having a second, or parallel, organization alongside routine operations only makes explicit what is already implicit in an integrative, innovating company: the capacity to work together cooperatively regardless of field or level to tackle the unknown, the uncertain.
Reference: [Kellner89] <author> Marc I. Kellner. </author> <title> Software process modeling: value and experience. </title> <journal> SEI Technical Review :23-54, </journal> <year> 1989. </year>
Reference-contexts: Any of a number of different methods may be used; one of the simplest, ETVX [Radice85], is described below. Another straightforward method with tool support is described in <ref> [Kellner89] </ref>. Whatever the method, describing the existing process should result in documentation of how software products are actually developed and maintained in a given organization. 4.1.1. Documenting the Process: One Approach One very accessible approach to writing a process description is presented in [Radice85].
Reference: [Kenkyusha54] <editor> Senkichiro Katsumata (editor). </editor> <address> Kenkyusha's New Japanese-English Dictionary. Kenkyusha, </address> <year> 1954. </year>
Reference-contexts: From Ford's "Quality is Job 1" slogan to the DoD Total Quality Management program [TQM88], industry in the United States seems to be adopting what the Japanese call kaizen, meaning <ref> [Kenkyusha54] </ref> "continuous improvement." Software development organizations are no exception to this: Hewlett Packard measures its progress through a company-wide program in software metrics [Grady87], and both AT&T Bell Laboratories and IBM have devoted entire issues of their technical journals to software quality technology [Myers86, Gershon85].
Reference: [Lawler85] <author> E.E. Lawler III and Susan A. Mohrman. </author> <title> Quality circles after the fad. </title> <publisher> Harvard Bus. </publisher> <address> Rev. :65-71, </address> <month> January </month> <year> 1985. </year>
Reference: [Leonard85] <author> Dorothy Leonard-Barton. </author> <title> Implementing new technology. </title> <publisher> Harvard Bus. </publisher> <address> Rev. :102-110, </address> <month> November-December </month> <year> 1985. </year>
Reference: [Leonard88] <author> Dorothy Leonard-Barton. </author> <title> Implementation as mutual adaptation of technology and organization. </title> <booktitle> Research Policy 17(5) </booktitle> <pages> 251-267, </pages> <month> October </month> <year> 1988. </year>
Reference: [Lorange84] <author> Peter Lorange and Declan Murphy. </author> <title> Considerations in implementing strategic control. </title> <journal> J. of Bus. </journal> <volume> Strategy 4(4) </volume> <pages> 27-35, </pages> <month> Spring </month> <year> 1984. </year>
Reference-contexts: Reviews of related technology that was screened or applied successfully, and informal working sessions for giving feedback to technical working groups. There is a considerable technology of action planning, so elaboration is beyond the scope of this guide. The interested reader is encouraged to start with (listed alphabetically) <ref> [Lorange84] </ref>, [Pinto88], [Quinn77], [Schultz87], and [Tichy83]. 3.3. Ownership The action plan represents a set of commitments to software process improvement, and spells out the responsibilities of each party involved. The process of creating the plan should include as many people as possible.
Reference: [Martin88] <author> Charles F. Martin. </author> <title> Second-generation CASE tools: a challenge to vendors. </title> <journal> IEEE Software :46-49, </journal> <month> March, </month> <year> 1988. </year>
Reference: [Mason81] <author> Richard O. Mason and Ian I. Mitroff. </author> <title> Challenging Strategic Planning Assumptions - Theory, Cases and Techniques. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1981. </year>
Reference: [Mays90] <author> R.G. Mays, C.L. Jones, G.J. Holloway, </author> <title> and D.P. Studinski. Experiences with defect prevention. </title> <journal> IBM Systems J. </journal> <volume> 29(1) </volume> <pages> 4-32, </pages> <year> 1990. </year>
Reference-contexts: Prior records of consensus on areas needing work may also be tapped. For example, many organizations routinely reassess themselves as part of strategic planning or project postmortems, and it is useful to review findings from these activities. Some life-cycle definitions include a lessons learned activity <ref> [SMAP4.3, Gale90, Mays90] </ref>. These techniques usually address specific areas of concern; and because they may be less structured or require less time, they can be used more frequently. Thus, they complement formal assessments. <p> This initiative includes industry, government, and academia. CMU/SEI-90-TR-24 45 5.3. Defect Prevention Several process information files are needed to support the defect prevention process de scribed by <ref> [Mays90, Gale90] </ref>. The defect file contains a record of each defect and information such as origi nator, description, resolution, disposition, and effort to repair. The action item file contains the action items that arise out of a causal analysis of the defects.
Reference: [Morton83] <editor> Richard Morton (editor). </editor> <booktitle> IEEE Computer Society Workshop on Software Engineering Technology Transfer. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1983. </year>
Reference-contexts: There are many variations on the mechanisms listed in Figure 7-3 and many additional mechanisms that can be used. Good sources of ideas are [Przybylinski88] and <ref> [Morton83] </ref>, both of which document the experience and thinking of engineers and consultants actively working on software engineering technology transfer issues. 7.3.
Reference: [Myers86] <author> Andrew B. Myers (ed.). </author> <title> Special issue on quality: </title> <journal> theory and practice. AT&T Technical J. </journal> <volume> 65(2) </volume> <pages> 4-118, </pages> <month> March/April </month> <year> 1986. </year>
Reference-contexts: adopting what the Japanese call kaizen, meaning [Kenkyusha54] "continuous improvement." Software development organizations are no exception to this: Hewlett Packard measures its progress through a company-wide program in software metrics [Grady87], and both AT&T Bell Laboratories and IBM have devoted entire issues of their technical journals to software quality technology <ref> [Myers86, Gershon85] </ref>.
Reference: [ONeill80] <author> D. O'Neill. </author> <title> The management of software engineering, Part II: Software engineering program. </title> <journal> IBM Systems J. </journal> <volume> 19(4) </volume> <pages> 421-431, </pages> <year> 1980. </year> <note> 80 CMU/SEI-90-TR-24 </note>
Reference-contexts: work, tutored us in organization change theory and practice, and introduced us to Marvin Weisbord's work and to ODR Inc.'s Managing Technological Change; Don O'Neill improved our understanding of some essential principles of software management, provided the architecture of process improvement, and encouraged us to freely adapt his work in <ref> [ONeill80] </ref>.
Reference: [Persico89] <author> J. Persico, Jr. </author> <title> Team up for quality improvement. </title> <booktitle> ASQC Quality Progress :33-37, </booktitle> <month> January </month> <year> 1989. </year>
Reference: [Pinto88] <author> Jeffrey Pinto and John Prescott. </author> <title> Variations in critical success factors over the stages in the project life cycle. </title> <editor> J. </editor> <booktitle> of Management 14(1) </booktitle> <pages> 5-18, </pages> <year> 1988. </year>
Reference-contexts: Reviews of related technology that was screened or applied successfully, and informal working sessions for giving feedback to technical working groups. There is a considerable technology of action planning, so elaboration is beyond the scope of this guide. The interested reader is encouraged to start with (listed alphabetically) [Lorange84], <ref> [Pinto88] </ref>, [Quinn77], [Schultz87], and [Tichy83]. 3.3. Ownership The action plan represents a set of commitments to software process improvement, and spells out the responsibilities of each party involved. The process of creating the plan should include as many people as possible.
Reference: [Pressman88] <author> Roger S. Pressman. </author> <title> Making Software Engineering Happen: A Guide for Instituting the Technology. </title> <publisher> Prentice-Hall, </publisher> <year> 1988. </year>
Reference-contexts: Formal assessment procedures based on questionnaires and interviews include the SEI Software Capability Evaluation [TR23], the Air Force Software Development Capability/Capacity Review [ASD800-5], and the approach described in <ref> [Pressman88] </ref>. All three approaches call for a written report that describes strengths and weaknesses and includes recommendations for addressing weak areas. This information is input to an action plan for overall, long-term process improvement. <p> The approach uses a questionnaire developed at the SEI (see [TR23]) and based on the framework described in Appendix A as well as [Crosby79]. Figures 2-1 and 2-2 present the SEI process in some detail. Figure 2-3 shows sample questions. For comparison, Figure 2-4 lists some questions from <ref> [Pressman88] </ref>, which describes a different approach along with related process improvement actions.
Reference: [Przybylinski88] <author> Stan Przybylinski and Priscilla Fowler (editors). </author> <title> Transferring Software Engineering Tool Technology. </title> <booktitle> The Computer Society of the IEEE, </booktitle> <year> 1988. </year>
Reference-contexts: There are many variations on the mechanisms listed in Figure 7-3 and many additional mechanisms that can be used. Good sources of ideas are <ref> [Przybylinski88] </ref> and [Morton83], both of which document the experience and thinking of engineers and consultants actively working on software engineering technology transfer issues. 7.3.
Reference: [Quinn77] <author> James Brian Quinn. </author> <title> Strategic goals: process and politics. </title> <journal> Sloan Mgmt. Rev. </journal> <volume> 19(1) </volume> <pages> 21-37, </pages> <month> Fall </month> <year> 1977. </year>
Reference-contexts: There is a considerable technology of action planning, so elaboration is beyond the scope of this guide. The interested reader is encouraged to start with (listed alphabetically) [Lorange84], [Pinto88], <ref> [Quinn77] </ref>, [Schultz87], and [Tichy83]. 3.3. Ownership The action plan represents a set of commitments to software process improvement, and spells out the responsibilities of each party involved. The process of creating the plan should include as many people as possible.
Reference: [Radice85] <author> R.A. Radice, N.K. Roth, A.C. O'Hara, Jr., </author> <title> and W.A. Ciarfella. A programming process architecture. </title> <journal> IBM Systems J. </journal> <volume> 24(2) </volume> <pages> 79-90, </pages> <year> 1985. </year>
Reference-contexts: The process group and the working groups first describe the existing processes and later define the desired processes, tune them as needed, and maintain the descriptions. Any of a number of different methods may be used; one of the simplest, ETVX <ref> [Radice85] </ref>, is described below. Another straightforward method with tool support is described in [Kellner89]. Whatever the method, describing the existing process should result in documentation of how software products are actually developed and maintained in a given organization. 4.1.1. <p> Whatever the method, describing the existing process should result in documentation of how software products are actually developed and maintained in a given organization. 4.1.1. Documenting the Process: One Approach One very accessible approach to writing a process description is presented in <ref> [Radice85] </ref>. Radice considers a process to be made up of software activities, which must be defined. <p> For example, the exit criteria for module design may not have been defined or may not match the entry criteria for the next activity. On the most abstract level, process definition is simply the determination of what stages and activities will be used by a given software organization. <ref> [Radice85] </ref> lists the following phases for a commercial product: Requirements and planning Product-level design Component-level design Module-level design Code Unit test Functional verification test Product verification test System verification test 38 CMU/SEI-90-TR-24 Package and release Early support program General availability E, T, V, and X must be defined for each activity.
Reference: [Rogers83] <author> Everett M. Rogers. </author> <title> Diffusion of Innovation. </title> <publisher> The Free Press, </publisher> <year> 1983. </year>
Reference: [Scacchi87] <author> Walt Scacchi. </author> <title> SEI Curriculum Module SEI-CM-10-1.0. Models of Software Evolution: Life Cycle and Process, </title> <institution> Software Engineering Institute, </institution> <month> October </month> <year> 1987. </year>
Reference-contexts: Evolvable. The definition must include a provision for orderly change. There is a growing body of literature about process definition and process modeling. [Freeman87] treats these subjects extensively, under the name "system development system." An SEI curriculum module <ref> [Scacchi87] </ref> is dedicated to these topics. Readers should also examine DoD-STD-2167A [2167A] and the IEEE Standard for Software Life Cycle Processes [IEEE-SLCP89], now available for public review. In addition, the international workshops on software process contain considerable material on definition; the latest proceedings is [SoftProcWork89].
Reference: [Schmidt87] <author> Terry Schmidt and Merlyn Kettering. </author> <title> Planning for Successful Project Implementation: Guidelines for the Project Team. </title> <type> Technical Report, </type> <institution> United States Department of Agriculture, </institution> <year> 1987. </year>
Reference: [Schultz87] <author> Randall Schultz, Dennis Slevin, and Jeffrey Pinto. </author> <title> Strategy and tactics in a process model of project implementation. </title> <booktitle> Interfaces 17(3) </booktitle> <pages> 34-46, </pages> <month> May-June </month> <year> 1987. </year>
Reference-contexts: There is a considerable technology of action planning, so elaboration is beyond the scope of this guide. The interested reader is encouraged to start with (listed alphabetically) [Lorange84], [Pinto88], [Quinn77], <ref> [Schultz87] </ref>, and [Tichy83]. 3.3. Ownership The action plan represents a set of commitments to software process improvement, and spells out the responsibilities of each party involved. The process of creating the plan should include as many people as possible.
Reference: [Skrabec89] <author> Q.R. Skrabec. </author> <title> The transition from 100% inspection to process control. </title> <booktitle> ASQC Quality Progress :35-36, </booktitle> <month> April </month> <year> 1989. </year>
Reference: [SMAP4.3] <institution> Management Control and Status Reports Documentation Standard and Data Item Descriptions. </institution> <note> Release 4.3 edition, </note> <institution> Office of Safety, Reliability, Maintainability, and Quality Assurance, Software Management and Assurance Program, National Aeronautics and Space Administration, </institution> <address> Washington, DC, </address> <month> February 28, </month> <year> 1989. </year> <note> CMU/SEI-90-TR-24 81 </note>
Reference-contexts: Prior records of consensus on areas needing work may also be tapped. For example, many organizations routinely reassess themselves as part of strategic planning or project postmortems, and it is useful to review findings from these activities. Some life-cycle definitions include a lessons learned activity <ref> [SMAP4.3, Gale90, Mays90] </ref>. These techniques usually address specific areas of concern; and because they may be less structured or require less time, they can be used more frequently. Thus, they complement formal assessments. <p> Records should include: an indication of what went well and what did not go well; a description of how problems were handled; and suggestions for improving performance on similar tasks in the future. Capturing and reviewing lessons learned can be a part of the development life cycle <ref> [SMAP4.3] </ref>. The challenge is to make this information available to those who need it, past the life of a project. The development of a useful measurement program and process database is a long-term process in itself.
Reference: [SoftProcWork89] <author> Colin Tully. </author> <title> Representing and enacting the software process. </title> <booktitle> In Proceedings of the 4th International Software Process Workshop held at Moretonhampstead, </booktitle> <address> Devon, UK, </address> <month> May 11-13, </month> <year> 1988. </year> <note> Also available as ACM Software Engineering Notes, </note> <month> June </month> <year> 1989. </year>
Reference-contexts: Readers should also examine DoD-STD-2167A [2167A] and the IEEE Standard for Software Life Cycle Processes [IEEE-SLCP89], now available for public review. In addition, the international workshops on software process contain considerable material on definition; the latest proceedings is <ref> [SoftProcWork89] </ref>. Each of these references will mention others. As mentioned earlier, Chapter 13, "Defining the Software Process," in [Humphrey89] is recom 40 CMU/SEI-90-TR-24 mended for reading prior to beginning a description or definition of an organization's proc-ess. 4.3.
Reference: [Stein80] <author> Barry A. Stein and Rosabeth Moss Kanter. </author> <title> Building the parallel organization: Toward mechanisms for permanent quality of work life. </title> <editor> J. </editor> <booktitle> Applied Behavioral Science (16):371-88, July 1980. [Thomas88] . Most companies fail software test. Advanced Military Computing 4(7), </booktitle> 1988. 
Reference-contexts: The process group, steering committee, and working groups are an organizational coalition for process improvement. Viewed in terms of ordinary organizational structures, however, this coalition is a collection of task forces, a management committee, and a relatively low-level staff group. It is, in effect, a largely informal parallel organization <ref> [Stein80] </ref>; and like most informal organizational entities, it is at risk because it is outside direct product-producing activities.
Reference: [Tichy83] <author> Noel Tichy. </author> <title> The essentials of strategic change management. </title> <journal> J. of Bus. </journal> <volume> Strategy 3(4) </volume> <pages> 55-67, </pages> <month> Spring </month> <year> 1983. </year>
Reference-contexts: There is a considerable technology of action planning, so elaboration is beyond the scope of this guide. The interested reader is encouraged to start with (listed alphabetically) [Lorange84], [Pinto88], [Quinn77], [Schultz87], and <ref> [Tichy83] </ref>. 3.3. Ownership The action plan represents a set of commitments to software process improvement, and spells out the responsibilities of each party involved. The process of creating the plan should include as many people as possible. Once the plan has been created, however, each piece must have one owner.
Reference: [Tornatzky90] <author> Louis G. Tornatzky and Mitchell Fleischer. </author> <title> The Processes of Technological Innovation. </title> <publisher> Lexington Books, </publisher> <year> 1990. </year>
Reference: [TQM88] <institution> Department of Defense. Total Quality Management Master Plan. </institution> <month> August </month> <year> 1988 </year>
Reference-contexts: And quality, most people would now agree, is not something added to the product during testing at the end of the development process; it is something everyone owns and is responsible for throughout that process. From Ford's "Quality is Job 1" slogan to the DoD Total Quality Management program <ref> [TQM88] </ref>, industry in the United States seems to be adopting what the Japanese call kaizen, meaning [Kenkyusha54] "continuous improvement." Software development organizations are no exception to this: Hewlett Packard measures its progress through a company-wide program in software metrics [Grady87], and both AT&T Bell Laboratories and IBM have devoted entire issues
Reference: [TR23] <institution> Watts Humphrey and William Sweet. </institution>
Reference-contexts: Appendix A presents general guidelines for objectives that are likely to be appropriate for software organizations at various stages in their evolution. 2. Assess the Current Practice. Assessing the current practice can be accomplished in a number of ways. One example is the SEI software capability evaluation method <ref> [TR23] </ref>, which is now being used as part of source selection and as a government contract management vehicle [Thomas88]. Variants of this method include the SEI-assisted assessment and the SEI self-assessment procedure; organizations can use the latter to assess themselves. <p> One of the forces prompting software process assessment is the DoD initiative to select software contractors based upon the quality of their development process as revealed by such an assessment (see, for example, [Thomas88]). Formal assessment procedures based on questionnaires and interviews include the SEI Software Capability Evaluation <ref> [TR23] </ref>, the Air Force Software Development Capability/Capacity Review [ASD800-5], and the approach described in [Pressman88]. All three approaches call for a written report that describes strengths and weaknesses and includes recommendations for addressing weak areas. This information is input to an action plan for overall, long-term process improvement. <p> A follow-up assessment in 18 to 24 months provides an opportunity to review progress. 2.1. Example of an Assessment Method This section summarizes the SEI self-assessment approach, which is described in more detail in [TR7]. The approach uses a questionnaire developed at the SEI (see <ref> [TR23] </ref>) and based on the framework described in Appendix A as well as [Crosby79]. Figures 2-1 and 2-2 present the SEI process in some detail. Figure 2-3 shows sample questions. For comparison, Figure 2-4 lists some questions from [Pressman88], which describes a different approach along with related process improvement actions.
References-found: 68

