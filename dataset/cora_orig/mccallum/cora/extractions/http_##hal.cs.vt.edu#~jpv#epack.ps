URL: http://hal.cs.vt.edu/~jpv/epack.ps
Refering-URL: http://hal.cs.vt.edu/~jpv/papers.html
Root-URL: http://www.cs.vt.edu
Title: EDGE-PACKING IN PLANAR GRAPHS  
Author: Lenwood S. Heath and John Paul C. Vergara 
Note: Submitted to Mathematical Systems Theory,  
Date: May 17, 1995  1995  
Address: 24061  
Affiliation: Department of Computer Science Virginia Polytechnic Institute and State University Blacksburg, Virginia  
Abstract: Maximum G Edge-Packing (EPack G ) is the problem of finding the maximum number of edge-disjoint isomorphic copies of a fixed guest graph G in a host graph H. This paper investigates the computational complexity of edge-packing for planar guests and planar hosts. Edge-packing is solvable in polynomial time when both G and H are trees. Edge-packing is solvable in linear time when H is outerplanar and G is either a 3-cycle or a k-star (graphs isomorphic to K 1;k ). Edge-packing is NP-complete when H is planar and G is either a cycle or a tree with 3 edges. A strategy for developing polynomial-time approximation algorithms for planar hosts is exemplified by a linear-time approximation algorithm that finds a k-star edge-packing of size at least 1=2 optimal.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Alon, </author> <title> A note on decomposition of graphs into isomorphic matchings, </title> <journal> Acta Math-ematica Hungaria, </journal> <volume> 42 (1983), </volume> <pages> pp. 221-223. </pages>
Reference-contexts: QUESTION: Can the edges of H be partitioned into copies of G? NP-completeness results for EP art G apply unchanged to EP ack G , since EP art G is a special case of EP ack G . Some results on EP art G have already been obtained <ref> [1, 6, 7, 12, 13, 22] </ref>. EP art G is NP-complete for connected guest graphs with at least three edges [12]. <p> Each V i contains 4n vertices u i [j], u i [j], v i [j] and v i [j], where 0 j n 1. The edges in V i are those contained in the cycle u i [0], u i [0], u i <ref> [1] </ref>, u i [1],: : : , u i [n 1], u i [n 1], plus two sets of spikes: positive spikes, the edges (u i [j], v i [j]), and negative spikes, the edges (u i [j], v i [j]), where 0 j n 1. <p> Each V i contains 4n vertices u i [j], u i [j], v i [j] and v i [j], where 0 j n 1. The edges in V i are those contained in the cycle u i [0], u i [0], u i <ref> [1] </ref>, u i [1],: : : , u i [n 1], u i [n 1], plus two sets of spikes: positive spikes, the edges (u i [j], v i [j]), and negative spikes, the edges (u i [j], v i [j]), where 0 j n 1. <p> Figure 3.9 shows what a variable gadget looks like if n = 3. For each clause c j , there is a clause gadget C j (1 j n). It contains 3 + jc j j vertices, all but two of which, c j [0] and c j <ref> [1] </ref>, are shared (identified) with vertices of the variable gadgets. The edges of C j are those of a (2 + jc j j)-star, the formation of which depend on the literals contained in the clause c j . <p> The edges for this variable gadget are those contained in the cycle (v i [0], v i [0], v i <ref> [1] </ref>, v i [1],: : : , v i [n 1], v i [n 1]), and those contained in the star formed by the edges (u i , v i [j]) and (u i , v i [j]), 0 j n 1. and false modes. <p> The edges for this variable gadget are those contained in the cycle (v i [0], v i [0], v i <ref> [1] </ref>, v i [1],: : : , v i [n 1], v i [n 1]), and those contained in the star formed by the edges (u i , v i [j]) and (u i , v i [j]), 0 j n 1. and false modes. <p> Taking the specific clause example that we have been using (c j = (v 1 + v 2 + v 3 )), the vertices are c j [0] (the center vertex), c j <ref> [1] </ref>, v 3 [j 3 ] (c j [2]), v 3 [j 3 + 1 (mod n)] (c j [3]), c j [4], v 2 [j 2 ] (c j [5]), v 2 [j 2 ] (c j [6]), c j [7]. v 1 [j 1 ] (c j [1]) (c <p> j <ref> [1] </ref>, v 3 [j 3 ] (c j [2]), v 3 [j 3 + 1 (mod n)] (c j [3]), c j [4], v 2 [j 2 ] (c j [5]), v 2 [j 2 ] (c j [6]), c j [7]. v 1 [j 1 ] (c j [1]) (c j [8]), and v 1 [j 1 ] (c j [9]), The shared vertices are connected by edges which are also cycle edges in the variable gadget.
Reference: [2] <author> B. S. Baker, </author> <title> Approximation algorithms for NP-complete problems on planar graphs, </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 41 (1994), </volume> <pages> pp. 153-180. </pages>
Reference-contexts: INPUT: A set of sets of subtrees A = fU 1 ; U 2 ; : : : ; U n g. OUTPUT: The size of a maximum set of copies of G that can be formed from A and a set of available subtrees. 1 (partition [1],partition <ref> [2] </ref>,: : : ,partition [a]) all partitions of f1; 2; :::; ng such that each part of the partition has size at most d; 2 fl there are a = O (n d1 ) such partitions 3 for i 1 to a do 4 fl obtain an edge-packing for each possible <p> Taking the specific clause example that we have been using (c j = (v 1 + v 2 + v 3 )), the vertices are c j [0] (the center vertex), c j [1], v 3 [j 3 ] (c j <ref> [2] </ref>), v 3 [j 3 + 1 (mod n)] (c j [3]), c j [4], v 2 [j 2 ] (c j [5]), v 2 [j 2 ] (c j [6]), c j [7]. v 1 [j 1 ] (c j [1]) (c j [8]), and v 1 [j 1 ] <p> Note that for jc j j = 1, we eliminate the edge (c j [5]; c j [6]) and (c j [8]; c j [9]) from the gadget, so that 4 copies may be packed only if the edge (c j <ref> [2] </ref>; c j [3]) is made available by the corresponding variable gadget. We eliminate the edge (c j [8]; c j [9]) when jc j j = 2 for 28 the same reason. <p> Conjecture 4.1 EP ack G (outerplanar), where G is a fixed outerplanar guest, is solvable in polynomial time. Many NP-complete graph problems that remain NP-complete if the graph involved is planar have been found to be solvable in polynomial time when the graph is outerplanar <ref> [2, 24] </ref>. In this section, we give linear time algorithms for edge-packing 3-cycles and k-stars into an outerplanar host. 4.1 EP ack 3cycle (outerplanar) We present an algorithm to solve EP ack G (outerplanar) where G is a triangle (3-cycle). <p> The technique may be seen as a special case of the work 41 of Baker <ref> [2] </ref>. The technique depends on processing a planar graph in levels, an approach employed by Heath [16], as well as others. <p> If G is a planar graph of diameter ffi, then each L i is induced by ffi + 1, rather than 1, consecutive levels of H 0 . One expects an approximation within a factor of 1=ffi, rather than 1=2. (For ffi &gt; 2, the full approach of Baker <ref> [2] </ref> promises a better approximation at the cost of a high time complexity for large ffi.) Efficiency depends on the existence of a fast, optimal algorithm for edge-packing G in a planar host of ffi + 1 levels.
Reference: [3] <author> F. Berman, D. Johnson, T. Leighton, P. W. Shor, and L. Snyder, </author> <title> Generalized planar matching, </title> <journal> Journal of Algorithms, </journal> <volume> 11 (1990), </volume> <pages> pp. 153-184. 44 </pages>
Reference-contexts: Hell and Kirkpatrick [19, 20, 21, 27, 26] have a number of complexity results. They [26] prove NP-completeness for this problem in general (reduction from 3-Dimensional Matching), while Berman, et al. <ref> [3] </ref> prove NP-completeness for planar hosts (reduction from PLANAR 3-SAT). In this paper, we show a number of results for edge-packing in planar hosts. When H is a tree, edge-packing is solvable in polynomial time for any G and in linear time for G a path or a star. <p> specific clause example that we have been using (c j = (v 1 + v 2 + v 3 )), the vertices are c j [0] (the center vertex), c j [1], v 3 [j 3 ] (c j [2]), v 3 [j 3 + 1 (mod n)] (c j <ref> [3] </ref>), c j [4], v 2 [j 2 ] (c j [5]), v 2 [j 2 ] (c j [6]), c j [7]. v 1 [j 1 ] (c j [1]) (c j [8]), and v 1 [j 1 ] (c j [9]), The shared vertices are connected by edges which <p> Note that for jc j j = 1, we eliminate the edge (c j [5]; c j [6]) and (c j [8]; c j [9]) from the gadget, so that 4 copies may be packed only if the edge (c j [2]; c j <ref> [3] </ref>) is made available by the corresponding variable gadget. We eliminate the edge (c j [8]; c j [9]) when jc j j = 2 for 28 the same reason.
Reference: [4] <author> Y. Caro, </author> <title> The decomposition of trees into subtrees, </title> <journal> Journal of Graph Theory, </journal> <volume> 8 (1984), </volume> <pages> pp. 471-479. </pages>
Reference-contexts: Edge-packing arises in a variety of other contexts <ref> [4, 5, 8, 9, 17, 25, 28, 32] </ref>. <p> that we have been using (c j = (v 1 + v 2 + v 3 )), the vertices are c j [0] (the center vertex), c j [1], v 3 [j 3 ] (c j [2]), v 3 [j 3 + 1 (mod n)] (c j [3]), c j <ref> [4] </ref>, v 2 [j 2 ] (c j [5]), v 2 [j 2 ] (c j [6]), c j [7]. v 1 [j 1 ] (c j [1]) (c j [8]), and v 1 [j 1 ] (c j [9]), The shared vertices are connected by edges which are also cycle
Reference: [5] <author> V. Chv atal and P. L. Hammer, </author> <title> Aggregation of inequalities in integer programming, </title> <journal> Discrete Mathematics, </journal> <volume> 1 (1977), </volume> <pages> pp. 145-162. </pages>
Reference-contexts: Edge-packing arises in a variety of other contexts <ref> [4, 5, 8, 9, 17, 25, 28, 32] </ref>. <p> (v 1 + v 2 + v 3 )), the vertices are c j [0] (the center vertex), c j [1], v 3 [j 3 ] (c j [2]), v 3 [j 3 + 1 (mod n)] (c j [3]), c j [4], v 2 [j 2 ] (c j <ref> [5] </ref>), v 2 [j 2 ] (c j [6]), c j [7]. v 1 [j 1 ] (c j [1]) (c j [8]), and v 1 [j 1 ] (c j [9]), The shared vertices are connected by edges which are also cycle edges in the variable gadget. <p> Note that for jc j j = 1, we eliminate the edge (c j <ref> [5] </ref>; c j [6]) and (c j [8]; c j [9]) from the gadget, so that 4 copies may be packed only if the edge (c j [2]; c j [3]) is made available by the corresponding variable gadget.
Reference: [6] <author> E. Cohen and M. Tarsi, </author> <title> NP-completeness of graph decomposition problems, </title> <journal> Journal of Complexity, </journal> <volume> 7 (1991), </volume> <pages> pp. 200-212. </pages>
Reference-contexts: QUESTION: Can the edges of H be partitioned into copies of G? NP-completeness results for EP art G apply unchanged to EP ack G , since EP art G is a special case of EP ack G . Some results on EP art G have already been obtained <ref> [1, 6, 7, 12, 13, 22] </ref>. EP art G is NP-complete for connected guest graphs with at least three edges [12]. <p> )), the vertices are c j [0] (the center vertex), c j [1], v 3 [j 3 ] (c j [2]), v 3 [j 3 + 1 (mod n)] (c j [3]), c j [4], v 2 [j 2 ] (c j [5]), v 2 [j 2 ] (c j <ref> [6] </ref>), c j [7]. v 1 [j 1 ] (c j [1]) (c j [8]), and v 1 [j 1 ] (c j [9]), The shared vertices are connected by edges which are also cycle edges in the variable gadget. <p> Note that for jc j j = 1, we eliminate the edge (c j [5]; c j <ref> [6] </ref>) and (c j [8]; c j [9]) from the gadget, so that 4 copies may be packed only if the edge (c j [2]; c j [3]) is made available by the corresponding variable gadget.
Reference: [7] <author> C. J. Colbourn, </author> <title> The complexity of completing partial Latin squares, </title> <journal> Discrete Applied Mathematics, </journal> <volume> 8 (1984), </volume> <pages> pp. </pages> <month> 25-30. </month> <title> [8] , The Combinatorics of Network Reliability, </title> <publisher> Oxford University Press, </publisher> <year> 1987. </year> <title> [9] , Edge-packings of graphs and network reliability, </title> <journal> Discrete Mathematics, </journal> <volume> 72 (1988), </volume> <pages> pp. 49-61. </pages>
Reference-contexts: QUESTION: Can the edges of H be partitioned into copies of G? NP-completeness results for EP art G apply unchanged to EP ack G , since EP art G is a special case of EP ack G . Some results on EP art G have already been obtained <ref> [1, 6, 7, 12, 13, 22] </ref>. EP art G is NP-complete for connected guest graphs with at least three edges [12]. <p> are c j [0] (the center vertex), c j [1], v 3 [j 3 ] (c j [2]), v 3 [j 3 + 1 (mod n)] (c j [3]), c j [4], v 2 [j 2 ] (c j [5]), v 2 [j 2 ] (c j [6]), c j <ref> [7] </ref>. v 1 [j 1 ] (c j [1]) (c j [8]), and v 1 [j 1 ] (c j [9]), The shared vertices are connected by edges which are also cycle edges in the variable gadget.
Reference: [10] <author> T. H. Cormen, C. E. Leiserson, and R. L. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> McGraw-Hill Book Company, </publisher> <year> 1990. </year>
Reference-contexts: paper, still runs in polynomial-time since G is fixed. 4.2 EP ack kstar (outerplanar) In this section, we present a linear-time dynamic programming algorithm to edge-pack a guest that is a k-star, k 3, in an arbitrary outerplanar host H (for more on dynamic 35 programming, see Cormen, Leiserson, Rivest <ref> [10] </ref>). To simplify the dynamic programming equations, transform the problem as follows. First, add sufficient edges to the host graph H to obtain a maximal (hence biconnected) outerplanar graph H 0 ; because it is biconnected, H 0 has a unique outerplanar embedding.
Reference: [11] <author> D. G. Corneil, S. Masuyama, and S. L. Hakimi, </author> <title> Edge-disjoint packings of graphs, </title> <journal> Discrete Applied Mathematics, </journal> <volume> 50 (1994), </volume> <pages> pp. 135-148. </pages>
Reference-contexts: Masuyama and Ibaraki [30] show that EP ack G is solvable in linear time when G is a path of length 2 and H is arbitrary. Corneil, Masuyama, and Hakimi <ref> [11] </ref> investigate EP ack G for arbitrary host graphs. They show that EP ack G is NP-complete when H is arbitrary and G is connected and has at least 3 edges. Their proofs involve reductions from Exact 3-Cover. <p> General cyclic graphs require more careful gadget constructions since we have to guarantee that only particular ways to pack copies are possible. Cascading these graphs in the 29 same straightforward manner we have used for cycles may introduce stray copies of G. Corneil, Masuyama and Ibaraki <ref> [11] </ref> and Dor and Tarsi [12] have investigated edge-packing by cyclic graphs but the hosts they consider are arbitrary (not necessarily planar) graphs. Their proofs involve classifying cyclic graphs in terms of their connectivity and then appropriately constructing the gadgets. <p> (P: polynomial-time solvable, NPC: NP-complete, P?: conjectured polynomial-time, (): results are incomplete). 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P [30, 31] P [30, 31] P [30, 31] P [30, 31] Star NPC [13] NPC P P Path NPC [13] NPC [13] P? P Tree NPC <ref> [11] </ref> NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC [11, 12] NPC [18] P? P EP ack G (planar) where G contains a cycle is addressed in a separate paper [18]. <p> 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P [30, 31] P [30, 31] P [30, 31] P [30, 31] Star NPC [13] NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC <ref> [11, 12] </ref> NPC [18] P? P EP ack G (planar) where G contains a cycle is addressed in a separate paper [18].
Reference: [12] <author> D. Dor and M. Tarsi, </author> <title> Graph decomposition is NPC | a complete proof of Holyer's conjecture, </title> <booktitle> in Proceedings of the 24th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1992, </year> <pages> pp. 252-263. </pages>
Reference-contexts: QUESTION: Can the edges of H be partitioned into copies of G? NP-completeness results for EP art G apply unchanged to EP ack G , since EP art G is a special case of EP ack G . Some results on EP art G have already been obtained <ref> [1, 6, 7, 12, 13, 22] </ref>. EP art G is NP-complete for connected guest graphs with at least three edges [12]. <p> Some results on EP art G have already been obtained [1, 6, 7, 12, 13, 22]. EP art G is NP-complete for connected guest graphs with at least three edges <ref> [12] </ref>. Dyer and Frieze [13] consider planar host graphs and find that the problem remains NP-complete for guests that are paths or 3-stars but is solvable in polynomial time for guests that are triangles. <p> Cascading these graphs in the 29 same straightforward manner we have used for cycles may introduce stray copies of G. Corneil, Masuyama and Ibaraki [11] and Dor and Tarsi <ref> [12] </ref> have investigated edge-packing by cyclic graphs but the hosts they consider are arbitrary (not necessarily planar) graphs. Their proofs involve classifying cyclic graphs in terms of their connectivity and then appropriately constructing the gadgets. <p> 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P [30, 31] P [30, 31] P [30, 31] P [30, 31] Star NPC [13] NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC <ref> [11, 12] </ref> NPC [18] P? P EP ack G (planar) where G contains a cycle is addressed in a separate paper [18].
Reference: [13] <author> M. E. Dyer and A. M. Frieze, </author> <title> On the complexity of partitioning graphs into connected subgraphs, </title> <journal> Discrete Applied Mathematics, </journal> <volume> 10 (1985), </volume> <pages> pp. 139-153. </pages>
Reference-contexts: QUESTION: Can the edges of H be partitioned into copies of G? NP-completeness results for EP art G apply unchanged to EP ack G , since EP art G is a special case of EP ack G . Some results on EP art G have already been obtained <ref> [1, 6, 7, 12, 13, 22] </ref>. EP art G is NP-complete for connected guest graphs with at least three edges [12]. <p> Some results on EP art G have already been obtained [1, 6, 7, 12, 13, 22]. EP art G is NP-complete for connected guest graphs with at least three edges [12]. Dyer and Frieze <ref> [13] </ref> consider planar host graphs and find that the problem remains NP-complete for guests that are paths or 3-stars but is solvable in polynomial time for guests that are triangles. <p> QUESTION: Is there a satisfying truth assignment for C? and c 3 = (v 1 + v 3 + v 4 ). We first investigate tree guests. Dyer and Frieze <ref> [13] </ref> prove NP-completeness for EP ack G (planar) where G is a path. In Section 3.1, we prove that EP ack kstar is NP-complete if k 3. In Section 3.2, we extend the proof to tree guests that are forks (trees that are neither stars nor paths). <p> Theorem 3.1 EP ack kstar (planar), where k 3, is NP-complete. Proof: We first consider the case of G a 3-star (Dyer and Frieze <ref> [13] </ref> have a proof for this case) and then explain how to extend the proof to k-stars in general. We transform a PLANAR 3-SAT instance to an EP ack G instance, a host graph H composed of gadgets. There are m variable gadgets V i , where 1 i m. <p> the computational complexity of EP ack G is summarized in the following table (P: polynomial-time solvable, NPC: NP-complete, P?: conjectured polynomial-time, (): results are incomplete). 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P [30, 31] P [30, 31] P [30, 31] P [30, 31] Star NPC <ref> [13] </ref> NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC [11, 12] NPC [18] P? P EP ack G (planar) where G contains a cycle is addressed in a separate paper [18]. <p> G is summarized in the following table (P: polynomial-time solvable, NPC: NP-complete, P?: conjectured polynomial-time, (): results are incomplete). 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P [30, 31] P [30, 31] P [30, 31] P [30, 31] Star NPC <ref> [13] </ref> NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC [11, 12] NPC [18] P? P EP ack G (planar) where G contains a cycle is addressed in a separate paper [18]. <p> summarized in the following table (P: polynomial-time solvable, NPC: NP-complete, P?: conjectured polynomial-time, (): results are incomplete). 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P [30, 31] P [30, 31] P [30, 31] P [30, 31] Star NPC <ref> [13] </ref> NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC [11, 12] NPC [18] P? P EP ack G (planar) where G contains a cycle is addressed in a separate paper [18].
Reference: [14] <author> H. J. Fleischner, D. P. Geller, and F. Harary, </author> <title> Outerplanar graphs and weak duals, </title> <journal> Journal of the Indian Mathematical Society, </journal> <volume> 38 (1974), </volume> <pages> pp. 215-219. 45 </pages>
Reference-contexts: We use the notion of the weak dual of an outerplanar graph (see Fleishchner, Geller, and Harary <ref> [14] </ref>). <p> Figure 4.27 is an example of an outerplanar graph and its weak dual. Fleischner, Geller, and Harary <ref> [14] </ref> observe that the weak dual of an outerplanar graph is a forest. Also, detecting a maximum set of edge-disjoint triangles in an outerplanar graph is equivalent to finding a maximum set of non-adjacent degree-3 vertices in the weak dual.
Reference: [15] <author> M. Hall, </author> <title> Combinatorial Theory, </title> <publisher> John Wiley and Sons, </publisher> <year> 1986. </year>
Reference-contexts: The number of possible partitions of a set of size n such that each part is at most some size k is equivalent to the number of partitions of the set into k parts <ref> [15] </ref>. There are O (n k1 ) such partitions. Therefore, there are O (jE H j d1 ) possible partitions at each call to Extract-trees.
Reference: [16] <author> L. S. Heath, </author> <title> Embedding planar graphs in seven pages, </title> <booktitle> in Proceedings of the 25th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1984, </year> <pages> pp. </pages> <month> 74-83. </month> <title> [17] , Edge coloring planar graphs with two outerplanar subgraphs, </title> <booktitle> in Proceedings of the Second Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1991, </year> <pages> pp. 195-202. </pages>
Reference-contexts: The technique may be seen as a special case of the work 41 of Baker [2]. The technique depends on processing a planar graph in levels, an approach employed by Heath <ref> [16] </ref>, as well as others. The first phase of the algorithm adds sufficient edges to a planar host H = (V H ; E H ) to obtain a maximal planar graph H 0 = (V H ; E H 0 ).
Reference: [18] <author> L. S. Heath and J. P. C. Vergara, </author> <title> Edge packing cyclic graphs in planar graphs. </title> <note> In preparation, </note> <year> 1995. </year>
Reference-contexts: Edge-packing is solvable in linear time when H is outerplanar and G is either a 3-cycle or a k-star. Edge-packing is NP-complete when H is planar and G is either a cycle or a tree with 3 edges. (In other work, we <ref> [18] </ref> provide NP-completeness proofs for edge-packing when H is planar and G is an arbitrary graph containing at least one cycle.) The approximability of EP ack G for planar hosts is considered. <p> Figure 3.26 illustrates how this is done a variable gadget for 5-cycle guests. 3.4 Arbitrary Guest Graphs There are still other planar guest graphs that have not been investigated: cyclic graphs in general (graphs containing cycles). NP-completeness results for these cases are currently in preparation <ref> [18] </ref>. With that, we have the following general theorem. Theorem 3.4 EP ack G (planar), where G is a fixed planar graph with 3 or more edges, is NP-complete. <p> Host Planar Host Outerplanar Host Tree Host 2-path P [30, 31] P [30, 31] P [30, 31] P [30, 31] Star NPC [13] NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC [11, 12] NPC <ref> [18] </ref> P? P EP ack G (planar) where G contains a cycle is addressed in a separate paper [18]. There also remains the problem of determining classes of host graphs between planar graphs and trees where EP ack G is solvable in polynomial time (given P 6= NP). <p> [30, 31] Star NPC [13] NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC [11, 12] NPC <ref> [18] </ref> P? P EP ack G (planar) where G contains a cycle is addressed in a separate paper [18]. There also remains the problem of determining classes of host graphs between planar graphs and trees where EP ack G is solvable in polynomial time (given P 6= NP). Outerplanar graphs are the most likely candidates.
Reference: [19] <author> P. Hell and D. G. Kirkpatrick, </author> <title> On generalized matching problems, </title> <journal> Information Processing Letters, </journal> <volume> 12 (1981), </volume> <pages> pp. </pages> <month> 33-35. </month> <title> [20] , Packings by cliques and by finite families of graphs, </title> <journal> Discrete Mathematics, </journal> <volume> 49 (1984), </volume> <pages> pp. </pages> <month> 45-59. </month> <title> [21] , Packings by complete bipartite graphs, </title> <journal> SIAM Journal on Algebraic and Discrete Methods, </journal> <volume> 7 (1986), </volume> <pages> pp. 199-209. </pages>
Reference-contexts: Another related problem is the vertex-disjoint counterpart of EP ack G , Maximum G Matching (finding the maximum number of vertex-disjoint copies of G in H), a problem that has been studied extensively. Hell and Kirkpatrick <ref> [19, 20, 21, 27, 26] </ref> have a number of complexity results. They [26] prove NP-completeness for this problem in general (reduction from 3-Dimensional Matching), while Berman, et al. [3] prove NP-completeness for planar hosts (reduction from PLANAR 3-SAT).
Reference: [22] <author> I. Holyer, </author> <title> The NP-completeness of some edge-partition problems, </title> <journal> SIAM Journal on Computing, </journal> <volume> 10 (1981), </volume> <pages> pp. 713-717. </pages>
Reference-contexts: QUESTION: Can the edges of H be partitioned into copies of G? NP-completeness results for EP art G apply unchanged to EP ack G , since EP art G is a special case of EP ack G . Some results on EP art G have already been obtained <ref> [1, 6, 7, 12, 13, 22] </ref>. EP art G is NP-complete for connected guest graphs with at least three edges [12]. <p> conjectured polynomial-time, (): results are incomplete). 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P [30, 31] P [30, 31] P [30, 31] P [30, 31] Star NPC [13] NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC <ref> [22] </ref> NPC (P,k=3) P Cyclic NPC [11, 12] NPC [18] P? P EP ack G (planar) where G contains a cycle is addressed in a separate paper [18].
Reference: [23] <author> D. S. Johnson, </author> <title> Approximation algorithms for combinatorial problems, </title> <journal> Journal of Computer and System Science, </journal> <volume> 9 (1974), </volume> <pages> pp. </pages> <month> 256-278. </month> <title> [24] , The NP-completeness column: an ongoing guide, </title> <journal> Journal of Algorithms, </journal> <volume> 6 (1985), </volume> <pages> pp. 434-451. </pages>
Reference-contexts: Vertices in the Independent Set instance correspond to copies of G in the EP ack G instance while edges correspond to the "neighbor" relation. In fact, Johnson <ref> [23] </ref> proposes an analogous algorithm for independent set and showed that there is no finite ratio R such that the result produced by the algorithm is R fl OP T (where OP T is the actual optimal solution), assuming no restrictions on the graph are made.
Reference: [25] <author> M. J unger, G. Reinelt, and W. R. Pulleyblank, </author> <title> On partitioning the edges of graphs into connected subgraphs, </title> <journal> Journal of Graph Theory, </journal> <volume> 9 (1985), </volume> <pages> pp. 539-549. 46 </pages>
Reference-contexts: Edge-packing arises in a variety of other contexts <ref> [4, 5, 8, 9, 17, 25, 28, 32] </ref>.
Reference: [26] <author> D. G. Kirkpatrick and P. Hell, </author> <title> On the completeness of a generalized matching problem, </title> <booktitle> in Proceedings of the 10th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1978, </year> <pages> pp. </pages> <month> 240-245. </month> <title> [27] , On the complexity of general graph factor problems, </title> <journal> SIAM Journal on Computing, </journal> <volume> 12 (1983), </volume> <pages> pp. 601-609. </pages>
Reference-contexts: Another related problem is the vertex-disjoint counterpart of EP ack G , Maximum G Matching (finding the maximum number of vertex-disjoint copies of G in H), a problem that has been studied extensively. Hell and Kirkpatrick <ref> [19, 20, 21, 27, 26] </ref> have a number of complexity results. They [26] prove NP-completeness for this problem in general (reduction from 3-Dimensional Matching), while Berman, et al. [3] prove NP-completeness for planar hosts (reduction from PLANAR 3-SAT). <p> Another related problem is the vertex-disjoint counterpart of EP ack G , Maximum G Matching (finding the maximum number of vertex-disjoint copies of G in H), a problem that has been studied extensively. Hell and Kirkpatrick [19, 20, 21, 27, 26] have a number of complexity results. They <ref> [26] </ref> prove NP-completeness for this problem in general (reduction from 3-Dimensional Matching), while Berman, et al. [3] prove NP-completeness for planar hosts (reduction from PLANAR 3-SAT). In this paper, we show a number of results for edge-packing in planar hosts.
Reference: [28] <author> P. Klein and C. Stein, </author> <title> A parallel algorithm for eliminating cycles in undirected graphs, </title> <journal> Information Processing Letters, </journal> <volume> 34 (1990), </volume> <pages> pp. 307-312. </pages>
Reference-contexts: Edge-packing arises in a variety of other contexts <ref> [4, 5, 8, 9, 17, 25, 28, 32] </ref>.
Reference: [29] <author> D. Lichtenstein, </author> <title> Planar formulae and their uses, </title> <journal> SIAM Journal on Computing, </journal> <volume> 11 (1982), </volume> <pages> pp. 329-343. </pages>
Reference-contexts: To verify that K subgraphs of G are isomorphic to a fixed graph G and are edge-disjoint is a polynomial-time task. Our proofs that EP ack G is NP-hard for the considered guests G are reductions from the known NP-complete problem PLANAR 3-SAT (Lichtenstein <ref> [29] </ref>). PLANAR 3-SAT is a variant of the problem 3-SAT (3-SATISFIABILITY) that involves boolean variables and clauses over the variables. A literal is a variable (positive literal) or the negation of a variable (negative literal). In a 3-SAT instance, a clause is a set containing at most three literals.
Reference: [30] <author> S. Masuyama and T. Ibaraki, </author> <title> Chain packing in graphs, </title> <journal> Algorithmica, </journal> <volume> 6 (1991), </volume> <pages> pp. 826-839. </pages>
Reference-contexts: Furthermore, we assume that G is connected. Under these assumptions, it suffices to consider only connected hosts. The host class of planar graphs as well as the subclasses of trees and outerplanar graphs are considered in this paper. Masuyama and Ibaraki <ref> [30] </ref> show that EP ack G is solvable in linear time when G is a path of length 2 and H is arbitrary. Corneil, Masuyama, and Hakimi [11] investigate EP ack G for arbitrary host graphs. <p> The degree of the polynomial depends on d. Masuyama 4 and Ibaraki <ref> [30] </ref> and, independently, Vergara and Heath [31] solve EP ack 2path (tree) in linear time and show that the problem extends to arbitrary hosts. <p> Since Pack-tree calls Extract-trees once per vertex, it is easy to verify that edge-packing in this case runs in O (jE H j) time. The following is a result previously obtained by Masuyama and Ibaraki <ref> [30] </ref>. Theorem 2.3 EP ack kpath (tree) is solvable in O (jE H j) time. Proof: In this case, the only relevant subtrees are paths themselves. Also, we take advantage of the fact that paths are subgraphs of longer paths. <p> The status of the computational complexity of EP ack G is summarized in the following table (P: polynomial-time solvable, NPC: NP-complete, P?: conjectured polynomial-time, (): results are incomplete). 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P <ref> [30, 31] </ref> P [30, 31] P [30, 31] P [30, 31] Star NPC [13] NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC [11, 12] NPC [18] P? P EP ack G (planar) where G contains <p> The status of the computational complexity of EP ack G is summarized in the following table (P: polynomial-time solvable, NPC: NP-complete, P?: conjectured polynomial-time, (): results are incomplete). 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P <ref> [30, 31] </ref> P [30, 31] P [30, 31] P [30, 31] Star NPC [13] NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC [11, 12] NPC [18] P? P EP ack G (planar) where G contains a cycle is <p> The status of the computational complexity of EP ack G is summarized in the following table (P: polynomial-time solvable, NPC: NP-complete, P?: conjectured polynomial-time, (): results are incomplete). 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P <ref> [30, 31] </ref> P [30, 31] P [30, 31] P [30, 31] Star NPC [13] NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC [11, 12] NPC [18] P? P EP ack G (planar) where G contains a cycle is addressed in a <p> The status of the computational complexity of EP ack G is summarized in the following table (P: polynomial-time solvable, NPC: NP-complete, P?: conjectured polynomial-time, (): results are incomplete). 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P <ref> [30, 31] </ref> P [30, 31] P [30, 31] P [30, 31] Star NPC [13] NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC [11, 12] NPC [18] P? P EP ack G (planar) where G contains a cycle is addressed in a separate paper [18].
Reference: [31] <author> J. P. C. Vergara and L. S. Heath, </author> <title> Edge-packing by isomorphic subgraphs, </title> <type> Tech. Rep. TR 91-3, </type> <institution> Department of Computer Science, Virginia Polytechnic Institute and State University, </institution> <year> 1991. </year>
Reference-contexts: The degree of the polynomial depends on d. Masuyama 4 and Ibaraki [30] and, independently, Vergara and Heath <ref> [31] </ref> solve EP ack 2path (tree) in linear time and show that the problem extends to arbitrary hosts. <p> The status of the computational complexity of EP ack G is summarized in the following table (P: polynomial-time solvable, NPC: NP-complete, P?: conjectured polynomial-time, (): results are incomplete). 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P <ref> [30, 31] </ref> P [30, 31] P [30, 31] P [30, 31] Star NPC [13] NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC [11, 12] NPC [18] P? P EP ack G (planar) where G contains <p> The status of the computational complexity of EP ack G is summarized in the following table (P: polynomial-time solvable, NPC: NP-complete, P?: conjectured polynomial-time, (): results are incomplete). 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P <ref> [30, 31] </ref> P [30, 31] P [30, 31] P [30, 31] Star NPC [13] NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC [11, 12] NPC [18] P? P EP ack G (planar) where G contains a cycle is <p> The status of the computational complexity of EP ack G is summarized in the following table (P: polynomial-time solvable, NPC: NP-complete, P?: conjectured polynomial-time, (): results are incomplete). 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P <ref> [30, 31] </ref> P [30, 31] P [30, 31] P [30, 31] Star NPC [13] NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC [11, 12] NPC [18] P? P EP ack G (planar) where G contains a cycle is addressed in a <p> The status of the computational complexity of EP ack G is summarized in the following table (P: polynomial-time solvable, NPC: NP-complete, P?: conjectured polynomial-time, (): results are incomplete). 43 Guest Arbitrary Host Planar Host Outerplanar Host Tree Host 2-path P <ref> [30, 31] </ref> P [30, 31] P [30, 31] P [30, 31] Star NPC [13] NPC P P Path NPC [13] NPC [13] P? P Tree NPC [11] NPC P? P Cycle NPC [22] NPC (P,k=3) P Cyclic NPC [11, 12] NPC [18] P? P EP ack G (planar) where G contains a cycle is addressed in a separate paper [18].
Reference: [32] <author> H. P. Yap, </author> <title> Packing of graphs|a survey, </title> <journal> Discrete Mathematics, </journal> <volume> 72 (1988), </volume> <pages> pp. 395-404. </pages>
Reference-contexts: Edge-packing arises in a variety of other contexts <ref> [4, 5, 8, 9, 17, 25, 28, 32] </ref>.
References-found: 25

