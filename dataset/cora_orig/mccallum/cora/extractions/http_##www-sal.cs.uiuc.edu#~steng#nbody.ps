URL: http://www-sal.cs.uiuc.edu/~steng/nbody.ps
Refering-URL: http://www-sal.cs.uiuc.edu/~steng/nbody.html
Root-URL: http://www.cs.uiuc.edu
Title: PROVABLY GOOD PARTITIONING AND LOAD BALANCING ALGORITHMS FOR PARALLEL ADAPTIVE N-BODY SIMULATION of nodes, respectively,
Author: SHANG-HUA TENG p 
Keyword: Key words. adaptive computing, the fast-multipole method, hierarchical methods, load-balancing, N-body simulation, partitioning, parallel processing, scientific computing, and tree-codes.  
Date: 000-000, 1995 (submitted) 000  
Note: SIAM J. SCIENT. COMP. c 1995 Society for Industrial and Applied Mathematics Vol. xx, No. pp.  n log n) and O(n 2=3 (log n) 1=3 number  AMS subject classifications. 05C50, 65F50, 68R10  
Abstract: We present an efficient and provably good partitioning and load balancing algorithm for parallel adaptive N-body simulation. The main ingredient of our method is a novel geometric characterization of a class of communication graphs that can be used to support hierarchical N-body methods such as the Fast Multipole Method (FMM) and the Barnes-Hut method (BH). We show that communication graphs of these methods have a good partition that can be found efficiently sequentially and in parallel. In particular, we show that an N-body communication graph (either for BH or for FMM) can be partitioned into two subgraphs with equal computation load by removing only O( and O(n 2=3 (log n) 4=3 ), respectively, for two and three dimensions. To the best of our knowledge, this is the first theoretical result on the quality of partitioning N-body communication graphs for non-uniformly distributed particles. Our results imply that parallel adaptive N-body simulation can be made as scalable as computation on regular grids, and as efficient as parallel N-body simulation on uniformly distributed particles. p
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. R. Anderson. </author> <title> An implementation of the fast multipole method without multipoles. </title> <journal> SIAM J. Sci. Stat. Comp., </journal> <volume> 13(4) </volume> <pages> 932-947, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The hierarchical methods include the O (n)-time algorithms of Greengard and Rokhlin [13], Anderson <ref> [1] </ref> and Zhao [33], and the O (n log n) time algorithms (with a smaller constant in the big-O) of Appel 1 [2] and Barnes and Hut [3]. <p> The algorithms of Appel [2] and Barnes and Hut [3] are readily extended to non-uniformly distributed particles. Carrier, Greengard, and Rokhlin [7] presented an adaptive version of Green-gard and Rohklin's FMM (see Procedure Interaction-Pair in Section 2.4). Similar extensions can be made to Anderson's <ref> [1] </ref> and Zhao's [33] algorithms. As particles move close to each other non-uniformly, the time complexity of these extensions becomes super-linear | even exceeding O (n log n) for some distributions. <p> Let p denote such a multipole expansion (for details see <ref> [1, 13, 33] </ref>). To (approximately) compute the potential at particles in A, we simply evaluate p B () at each particle in A. Suppose p B () has g (p; d) terms. Using multipole expansion, we reduce the number of operations to g (p; d)(jAj + jBj).
Reference: [2] <author> A. W. Appel. </author> <title> An efficient program for many-body simulation. </title> <journal> SIAM J. Sci. Stat. Comput., </journal> <volume> 6(1) </volume> <pages> 85-103, </pages> <year> 1985. </year>
Reference-contexts: The hierarchical methods include the O (n)-time algorithms of Greengard and Rokhlin [13], Anderson [1] and Zhao [33], and the O (n log n) time algorithms (with a smaller constant in the big-O) of Appel 1 <ref> [2] </ref> and Barnes and Hut [3]. These methods were originally designed for sequential machines and have been implemented on various parallel platforms by several group of researchers [5, 12, 15, 16, 17, 23, 24, 26, 28, fl Department of Computer Science, University of Minnesota, Minneapolis, MN 55455 steng@cs.umn.edu. <p> Several heuristics have been developed and evaluated experimentally [24, 28]. However to the best of our knowledge, no provably good bounds are known for these heuristics. The time complexity of the N-body algorithms mentioned above is valid only for "reasonably" uniform distributions of particles. The algorithms of Appel <ref> [2] </ref> and Barnes and Hut [3] are readily extended to non-uniformly distributed particles. Carrier, Greengard, and Rokhlin [7] presented an adaptive version of Green-gard and Rohklin's FMM (see Procedure Interaction-Pair in Section 2.4). Similar extensions can be made to Anderson's [1] and Zhao's [33] algorithms. <p> Hierarchical Methods for N-Body Simulation. The crux of hierarchical N-body methods is to decompose the potential at a point x, (x), into the sum of two potentials: N (x), the potential induced by "near-field" particles; and F (x), the potential due to "far-field" particles <ref> [2, 3, 13, 33] </ref>. In these methods, N (x) is computed exactly, while F (x) is computed approximately. 2.1. Well-Separated Clusters for Far-Field Approximation. The approximation is based on a notion of well-separated clusters [3, 13]. Suppose we have two clusters A and B, whose "centers" are distance r away.
Reference: [3] <author> J. Barnes and P. Hut. </author> <title> A hierarchical O(n log n) force calculation algorithm. </title> <journal> Nature, </journal> (324):446-449, 1986. 
Reference-contexts: The hierarchical methods include the O (n)-time algorithms of Greengard and Rokhlin [13], Anderson [1] and Zhao [33], and the O (n log n) time algorithms (with a smaller constant in the big-O) of Appel 1 [2] and Barnes and Hut <ref> [3] </ref>. These methods were originally designed for sequential machines and have been implemented on various parallel platforms by several group of researchers [5, 12, 15, 16, 17, 23, 24, 26, 28, fl Department of Computer Science, University of Minnesota, Minneapolis, MN 55455 steng@cs.umn.edu. <p> However to the best of our knowledge, no provably good bounds are known for these heuristics. The time complexity of the N-body algorithms mentioned above is valid only for "reasonably" uniform distributions of particles. The algorithms of Appel [2] and Barnes and Hut <ref> [3] </ref> are readily extended to non-uniformly distributed particles. Carrier, Greengard, and Rokhlin [7] presented an adaptive version of Green-gard and Rohklin's FMM (see Procedure Interaction-Pair in Section 2.4). Similar extensions can be made to Anderson's [1] and Zhao's [33] algorithms. <p> Hierarchical Methods for N-Body Simulation. The crux of hierarchical N-body methods is to decompose the potential at a point x, (x), into the sum of two potentials: N (x), the potential induced by "near-field" particles; and F (x), the potential due to "far-field" particles <ref> [2, 3, 13, 33] </ref>. In these methods, N (x) is computed exactly, while F (x) is computed approximately. 2.1. Well-Separated Clusters for Far-Field Approximation. The approximation is based on a notion of well-separated clusters [3, 13]. Suppose we have two clusters A and B, whose "centers" are distance r away. <p> In these methods, N (x) is computed exactly, while F (x) is computed approximately. 2.1. Well-Separated Clusters for Far-Field Approximation. The approximation is based on a notion of well-separated clusters <ref> [3, 13] </ref>. Suppose we have two clusters A and B, whose "centers" are distance r away. See Fig. 1. Fig. 1. Well-separated Clusters Direct potential calculation for all particles in A induced by particles in B (and 4 S.-H. TENG vice versa) requires O (jAjjBj) operations. <p> Lemma 3.3. Each particle is connected to at most O (log n + ) number of boxes. So the in-degree of BH fi S is bounded by O (log n + ). Proof: It directly follows from the analysis of BH for uniformly distributed particles <ref> [3] </ref>. 2 Notice, however, BH fi S is not suitable for parallel implementation. It has a large out-degree. This major drawback can be illustrated by the example of n uniformly distributed particles in two dimensions. Assume we have four processors. <p> By Lemma 4.7, k is bounded by a constant. Let b be a leaf-box. We now bound the number of boxes b 1 ; :::; b k such that (b; b i ) is a uni-directional interaction-pair from b i to b. It follows from the analysis of BH <ref> [3] </ref> that each particle is involved with at most O (log n + ) well-separation boxes. In our new definition of well-separation condition for the case when b is a leaf-box, box b i is well-separated from b only if b i is well-separated from all particles in b.
Reference: [4] <author> M. Bern, D. Eppstein, and S.-H. Teng. </author> <title> Parallel construction of quadtrees and quality triangulations. </title> <booktitle> In Workshop on Algorithms and Data Structures, </booktitle> <publisher> Springer LNCS 709, </publisher> <pages> pages 188-199, </pages> <year> 1993. </year>
Reference-contexts: Constructing N-body Computation Graphs in Parallel. The first step of N-body simulation is to construct the hierarchical tree. Theoretically, Bern, Epp-stein, and Teng <ref> [4] </ref> showed that the hierarchical tree can be computed from the set of particles in O (n=p) time using p processors. Several efficient parallel implementation have been developed [15, 16, 23, 24, 34]. In practice the hierarchical tree construction takes a very small fraction of the total simulation time.
Reference: [5] <author> J. A. Board, Z. S. Hakura, W. D. Elliott, and W. T. Ranklin. </author> <title> Scalable variants of multipole-based algorithms for molecular dynamic applications. </title> <booktitle> In Parallel Processing for Scientific Computing, </booktitle> <pages> pages 295-300. </pages> <publisher> SIAM, </publisher> <year> 1995. </year>
Reference: [6] <author> P. B. Callahan and S. R. Kosaraju. </author> <title> A decomposition of multidimensional point sets with applications to k-nearest-neighbors and n-body potential fields. </title> <journal> JACM 42: </journal> <pages> 67-90, </pages> <year> 1995. </year>
Reference-contexts: As particles move close to each other non-uniformly, the time complexity of these extensions becomes super-linear | even exceeding O (n log n) for some distributions. There is an elegant O (n log n) time algorithm given by Callahan and Kosaraju <ref> [6] </ref> which is independent of particle distributions. They obtained this complexity using the notion of well-separated-pair decomposition of particles. Some ideas of their construction, such as shrinking boxes, were originally proposed by Vaidya in the context of computing nearest neighbor graphs [35].
Reference: [7] <author> J. Carrier, L. Greengard and V. Rokhlin. </author> <title> A fast adaptive multipole algorithm for particle simulations. </title> <journal> SIAM J. Sci. Statist. Comput. </journal> <volume> 9 669-686, </volume> <year> 1988. </year> <title> 3 We are currently implementing this geometry-based partitioning algorithm for N-body simulation. Experimental results of this and related partitioning algorithms will appear in a subsequent paper [18]. </title> <type> 20 S.-H. TENG </type>
Reference-contexts: The time complexity of the N-body algorithms mentioned above is valid only for "reasonably" uniform distributions of particles. The algorithms of Appel [2] and Barnes and Hut [3] are readily extended to non-uniformly distributed particles. Carrier, Greengard, and Rokhlin <ref> [7] </ref> presented an adaptive version of Green-gard and Rohklin's FMM (see Procedure Interaction-Pair in Section 2.4). Similar extensions can be made to Anderson's [1] and Zhao's [33] algorithms. <p> It can be shown that such an approximation is second order. In this paper, we consider its general higher-order formulation. 6 S.-H. TENG We now describe the adaptive FMM for non-uniformly distributed particles due to Carrier, Greengard, and Rokhlin <ref> [7] </ref>. The method uses the box-box interaction. <p> We first describe a somewhat simpler algorithm than the original algorithm given in <ref> [7] </ref>. We will say more about their algorithm in Section 3.1 where we will give a refined adaptive algorithm. Let c 1 ; :::; c 2 d be the set of child-boxes of the root-box of the hierarchical tree. <p> Note that FMM for uniformly distributed particles has a much simpler description (see [13, 33]) than what we described above. In Carrier, Greengard, and Rokhlin <ref> [7] </ref> the set of intersection pairs is defined more directly. Furthermore, their set of intersection pairs is a subset of the one constructed by the procedure above, and hence their formulation requires fewer operations than the simple formulation that we give above. See Section 3.1 for more details. 3. <p> From the communication viewpoint, boxes A, B, and C have a large in-degree in the sense that each particle in these boxes needs to receive information from all n particles in D, making partitioning and load balancing harder. Carrier, Greengard, and Rokhlin <ref> [7] </ref>, from the computational viewpoint, presented an efficient way to handle this case when a large leaf-box is next to many small leaf-boxes. <p> Instead of assigning all small leaf-boxes (such as those in D) to be near-field boxes of the large leaf-box (e.g., C in our example), they only make those small leaf-boxes adjacent to the large box to be its near-field boxes. (See list 1, denoted by U , defined in <ref> [7] </ref>). Particle-box interactions similar to BH are then used to evaluate particles in the large box against the hierarchical structure built on other smaller leaf-boxes. This approach clearly reduces the number of operations. However, the degree of the large leaf-box in the near-field interaction can still be very large. <p> However, the degree of the large leaf-box in the near-field interaction can still be very large. In the example above, such contribution to the degree of D is about p We now show that the particle-box interaction idea of BH adopted in <ref> [7] </ref> can be used to further reduce the degree of the large box to O (log n). Notice that in BH most boxes of D are well-separated from particles in A, B, and C. <p> See Nabors, Korsmeyer, Leighton and White [22] for an example of exploiting these heuristics and the heuristics used in <ref> [7] </ref>. Moreover, almost all N-body codes have their own set of heuristics based on various intuitions.
Reference: [8] <author> K. Clarkson, D. Eppstein, G. L. Miller, C. Sturtivant, and S.-H. Teng. </author> <title> Approximating center points with and without linear programming. </title> <booktitle> In Proceedings of 9th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 91-98, </pages> <year> 1993. </year>
Reference: [9] <author> K. Esselink. </author> <title> The order of Appel's algorithm. </title> <journal> In Information Processing Letters, </journal> <volume> 41, </volume> <month> March, </month> <year> 1992, </year> <pages> 141-147. </pages>
Reference-contexts: Part of this work was done while the author was at Xerox Palo Alto Research Center, Palo Alto, CA and at the Department of Mathematics and the Lab. for Computer Science, MIT, Cambridge, MA. 1 The complexity of Appel's algorithm has been shown to be of O (N ) <ref> [9] </ref>. 1 2 S.-H. TENG 34]. In order to fully utilize a parallel machine with a distributed memory to solve a large problem, we need to efficiently (in parallel) decompose the problem into a given number of subproblems, each with roughly equal computational requirements, to balance the load.
Reference: [10] <author> A. M. Frieze, G. L. Miller, and S.-H. Teng. </author> <title> Separator based divide and conquer in computational geometry. </title> <booktitle> In Proceedings of the 1992 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 420-430, </pages> <year> 1992. </year>
Reference-contexts: The key is to compute such a communication graph without going through the comparison phase. In this section, we show that our partitioning algorithm and theorem enable us to use the separator-based geometric divide-and-conquer scheme of Frieze, Miller, and Teng <ref> [10] </ref> to construct F M fi and BH P efficiently in parallel. The basic idea is divide-and-conquer. <p> Merge G I and G E (by deleting multiple edges) to obtain the communication graph for the N-body simulation. 18 S.-H. TENG This class of divide-and-conquer schemes have been carefully proved and analyzed in <ref> [10, 21, 30] </ref>. We refer interested readers to them. We conclude this subsection with the following theorem which follows directly from the results of [10, 21, 30]. Theorem 6.1. Let P be a -non-uniform point set in IR d . <p> TENG This class of divide-and-conquer schemes have been carefully proved and analyzed in <ref> [10, 21, 30] </ref>. We refer interested readers to them. We conclude this subsection with the following theorem which follows directly from the results of [10, 21, 30]. Theorem 6.1. Let P be a -non-uniform point set in IR d . Given the hierarchical tree of P , F M fi and BH fi P can be constructed in random parallel O (n log p=p) time, using p processors. <p> Given the hierarchical tree of P , F M fi and BH fi P can be constructed in random parallel O (n log p=p) time, using p processors. Proof: A detailed proof of this class of separator-based divide-and-conquer algorithms can be found in <ref> [10] </ref> for a parallel implementation and [21, 30] for a sequential implementation. Here we just give a high level argument. Let T (N; Q) be the time used by the above algorithm to construct F M fi for N boxes using Q processors. <p> Then recursively, T (N; P ) O (N ) if Q = 1 T (flN + N 11=d ; flQ) + log Q Otherwise. (1) Because N 11=d *N t flN , as shown in <ref> [10, 21] </ref>, T (flN +N 11=d ; flQ)+log Q = O (T (flN; flQ) + log Q) = O (N log Q=Q). 2 Given F M fi , we can determine the set of all interaction-pairs and pattern for the combination technique.
Reference: [11] <author> J. R. Gilbert, G. L. Miller, and S.-H. Teng. </author> <title> Geometric mesh partitioning: Implementation and experiments. </title> <note> In SIAM J. Sci. Comput., to appear 1996. </note>
Reference-contexts: We include a high level description of the algorithm and theorems of Miller et al in Appendix A. More detailed algorithms can be found in [19]. Practical implementation (and a pointer to our Matlab tool-box) and experimental results can be found in <ref> [11] </ref>. Theorem 4.3. Let G be an ff-overlap graph over a k-ply box-system in IR d , then G can be partitioned into two equal sized subgraphs by removing at most O (ffk 1=d n 11=d ) vertices. <p> Our partitioning theorem can be extended to weighted N-body graphs. In the next section, we will use the non-weighted partitioning algorithm to efficiently compute the N-body communication graph in parallel. Putting these together, we develop an efficient load balancing scheme for parallel adaptive N-body simulation. Teng, Pramono, and Ruppert <ref> [32, 31, 11] </ref> showed that the partitioning theorem of Miller et al [20] (Theorem 4.3) can be naturally extended to the weighted case. Applying their weighted version result to our main partitioning theorem 4.1 we have the following weighted partitioning theorem: Theorem 5.1.
Reference: [12] <author> A. Y. Grama, V. Kumar, and A. Sameh. </author> <title> n-body simulation using message passing parallel computers. </title> <booktitle> In Parallel Processing for Scientific Computing, </booktitle> <pages> pages 355-360. </pages> <publisher> SIAM, </publisher> <year> 1995. </year>
Reference: [13] <author> L. Greengard and V. Rokhlin. </author> <title> A fast algorithm for particles simulations. </title> <journal> J. of Comput. Phy., </journal> <volume> 73 </volume> <pages> 325-348, </pages> <year> 1987. </year>
Reference-contexts: The hierarchical methods include the O (n)-time algorithms of Greengard and Rokhlin <ref> [13] </ref>, Anderson [1] and Zhao [33], and the O (n log n) time algorithms (with a smaller constant in the big-O) of Appel 1 [2] and Barnes and Hut [3]. <p> Hierarchical Methods for N-Body Simulation. The crux of hierarchical N-body methods is to decompose the potential at a point x, (x), into the sum of two potentials: N (x), the potential induced by "near-field" particles; and F (x), the potential due to "far-field" particles <ref> [2, 3, 13, 33] </ref>. In these methods, N (x) is computed exactly, while F (x) is computed approximately. 2.1. Well-Separated Clusters for Far-Field Approximation. The approximation is based on a notion of well-separated clusters [3, 13]. Suppose we have two clusters A and B, whose "centers" are distance r away. <p> In these methods, N (x) is computed exactly, while F (x) is computed approximately. 2.1. Well-Separated Clusters for Far-Field Approximation. The approximation is based on a notion of well-separated clusters <ref> [3, 13] </ref>. Suppose we have two clusters A and B, whose "centers" are distance r away. See Fig. 1. Fig. 1. Well-separated Clusters Direct potential calculation for all particles in A induced by particles in B (and 4 S.-H. TENG vice versa) requires O (jAjjBj) operations. <p> Let p denote such a multipole expansion (for details see <ref> [1, 13, 33] </ref>). To (approximately) compute the potential at particles in A, we simply evaluate p B () at each particle in A. Suppose p B () has g (p; d) terms. Using multipole expansion, we reduce the number of operations to g (p; d)(jAj + jBj). <p> The error of the multipole-expansion depends on p and the ratio max (r 1 ; r 2 )=r. We say A and B are fi-well-separated, for a fi &gt; 2, if max (r 1 ; r 2 )=r 1=fi. As shown in <ref> [13] </ref>, the error of the pth order multipole expansion is bounded by (1=(fi 1)) p . The above example illustrates the particle-cluster interaction between two well-separated clusters. Greengard and Rokhlin [13] showed that the cluster-cluster intersection among well-separated clusters can further improve the hierarchical method. <p> As shown in <ref> [13] </ref>, the error of the pth order multipole expansion is bounded by (1=(fi 1)) p . The above example illustrates the particle-cluster interaction between two well-separated clusters. Greengard and Rokhlin [13] showed that the cluster-cluster intersection among well-separated clusters can further improve the hierarchical method. Suppose we have k clusters B 1 , ..., B k that are well-separated from a cluster A. Let i () be the pth order multipole expansion of B i . <p> Similarly, flip p potential local expansion. Then traverse down the hierarchical tree in a pre-ordering, shift and add the potential local expansion of the parent box of a box to its own local expansion. Note that FMM for uniformly distributed particles has a much simpler description (see <ref> [13, 33] </ref>) than what we described above. In Carrier, Greengard, and Rokhlin [7] the set of intersection pairs is defined more directly. <p> The parent of b 2 is not well-separated from b 1 , and b 2 is not well-separated from the parent of b 1 . Proof: The lemma follows from the analysis of <ref> [13] </ref> and Refined Interaction-Pair: If b 1 and b 2 are not well-separated, then clearly they do not form an interaction-pair.
Reference: [14] <author> R. W. Hackney and J. W. Eastwood. </author> <title> Computer Simulation Using Particles. </title> <publisher> McGraw Hill, </publisher> <year> 1981. </year>
Reference-contexts: 1. Introduction. The most commonly used approaches for numerical simulation of complex physical problems are the mesh-based numerical approach (to solving partial differential equations) [29] and the particle simulation method <ref> [14] </ref>. In addition to its direct applications in astrophysics, molecular dynamics, plasma physics, and fluid dynamics, the particle methods, especially the recently developed N-body techniques, have been applied to boundary element methods and the eigensystem analysis of tridiagonal linear systems.
Reference: [15] <author> Y. Hu and S. L. Johnsson. </author> <title> A data parallel implementation of hierarchical N-body methods. </title> <type> Technical Report TR-26-94, </type> <institution> Harvard University, </institution> <year> 1994. </year>
Reference-contexts: The first step of N-body simulation is to construct the hierarchical tree. Theoretically, Bern, Epp-stein, and Teng [4] showed that the hierarchical tree can be computed from the set of particles in O (n=p) time using p processors. Several efficient parallel implementation have been developed <ref> [15, 16, 23, 24, 34] </ref>. In practice the hierarchical tree construction takes a very small fraction of the total simulation time.
Reference: [16] <author> P.-F. Liu. </author> <title> The parallel implementation of N-body algorithms. </title> <type> PhD thesis, </type> <institution> Yale University, </institution> <year> 1994. </year>
Reference-contexts: The first step of N-body simulation is to construct the hierarchical tree. Theoretically, Bern, Epp-stein, and Teng [4] showed that the hierarchical tree can be computed from the set of particles in O (n=p) time using p processors. Several efficient parallel implementation have been developed <ref> [15, 16, 23, 24, 34] </ref>. In practice the hierarchical tree construction takes a very small fraction of the total simulation time.
Reference: [17] <author> J. Makino and M. Taiji, T. Ebisuzaki, and D. Sugimoto. Grape-4: </author> <title> a special-purpose computer for gravitational N-body problems. </title> <booktitle> In Parallel Processing for Scientific Computing, </booktitle> <pages> pages 355-360. </pages> <publisher> SIAM, </publisher> <year> 1995. </year>
Reference: [18] <author> O. Meirhaeghe and S.-H. Teng. </author> <title> Random k-d trees for quality load balancing in parallel N-body simulation. in preparation, </title> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1996. </year>
Reference-contexts: Some extensions will be given in <ref> [18] </ref>. * Investigate new applications of our parallel N-body-communication-graph construction algorithm. * Theoretical investigation of the sequential BH fi S . We conjecture it does not have a sublinear sized partition.
Reference: [19] <author> G. L. Miller, S.-H. Teng, W. Thurston, and S. A. Vavasis. </author> <title> Automatic mesh partitioning. </title> <editor> In A. George, J. Gilbert, and J. Liu, editors, </editor> <title> Sparse Matrix Computations: Graph Theory Issues and Algorithms, IMA Volumes in Mathematics and its Applications. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: For example, the set of all leaf-boxes of a hierarchical tree forms a 1-ply box-system. The box-system is a variant of neighborhood system of Miller, Teng, Thurston, and Vavasis <ref> [19] </ref>, where a neighborhood system is a collection of Euclidean balls in IR . Miller et al used the neighborhood system to model unstructured finite-element LOAD BALANCING ADAPTIVE N-BODY SIMULATION 13 meshes. <p> We include a high level description of the algorithm and theorems of Miller et al in Appendix A. More detailed algorithms can be found in <ref> [19] </ref>. Practical implementation (and a pointer to our Matlab tool-box) and experimental results can be found in [11]. Theorem 4.3.
Reference: [20] <author> G. L. Miller, S.-H. Teng, W. Thurston, and S. A. Vavasis. </author> <title> Finite element meshes and geometric separators. </title> <note> SIAM J. Sci. Comput., to appear, </note> <year> 1996. </year>
Reference-contexts: Putting these together, we develop an efficient load balancing scheme for parallel adaptive N-body simulation. Teng, Pramono, and Ruppert [32, 31, 11] showed that the partitioning theorem of Miller et al <ref> [20] </ref> (Theorem 4.3) can be naturally extended to the weighted case. Applying their weighted version result to our main partitioning theorem 4.1 we have the following weighted partitioning theorem: Theorem 5.1.
Reference: [21] <author> G. L. Miller, S.-H. Teng, W. Thurston, and S. A. Vavasis. </author> <title> Separators for sphere-packings and nearest neighborhood graphs. </title> <journal> J. ACM, </journal> <note> to appear, </note> <year> 1996. </year>
Reference-contexts: Merge G I and G E (by deleting multiple edges) to obtain the communication graph for the N-body simulation. 18 S.-H. TENG This class of divide-and-conquer schemes have been carefully proved and analyzed in <ref> [10, 21, 30] </ref>. We refer interested readers to them. We conclude this subsection with the following theorem which follows directly from the results of [10, 21, 30]. Theorem 6.1. Let P be a -non-uniform point set in IR d . <p> TENG This class of divide-and-conquer schemes have been carefully proved and analyzed in <ref> [10, 21, 30] </ref>. We refer interested readers to them. We conclude this subsection with the following theorem which follows directly from the results of [10, 21, 30]. Theorem 6.1. Let P be a -non-uniform point set in IR d . Given the hierarchical tree of P , F M fi and BH fi P can be constructed in random parallel O (n log p=p) time, using p processors. <p> Given the hierarchical tree of P , F M fi and BH fi P can be constructed in random parallel O (n log p=p) time, using p processors. Proof: A detailed proof of this class of separator-based divide-and-conquer algorithms can be found in [10] for a parallel implementation and <ref> [21, 30] </ref> for a sequential implementation. Here we just give a high level argument. Let T (N; Q) be the time used by the above algorithm to construct F M fi for N boxes using Q processors. <p> Then recursively, T (N; P ) O (N ) if Q = 1 T (flN + N 11=d ; flQ) + log Q Otherwise. (1) Because N 11=d *N t flN , as shown in <ref> [10, 21] </ref>, T (flN +N 11=d ; flQ)+log Q = O (T (flN; flQ) + log Q) = O (N log Q=Q). 2 Given F M fi , we can determine the set of all interaction-pairs and pattern for the combination technique.
Reference: [22] <author> K. Nabors, F. T. Korsmeyer, F. T. Leighton and J. White. </author> <title> Preconditioned, adaptive, multipole-accelerated iterative methods for three-dimensional first-find integral equations of potential theory. </title> <journal> SIAM J. Sci. Comput., </journal> <pages> 15(3) pp 713-735, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: The commonly used ones include collapsing boxes when a box has only one non-empty child-box, and avoiding translation of particle expansion coefficients to multipole expansions and avoiding FLIPs whenever such operations are inefficient. See Nabors, Korsmeyer, Leighton and White <ref> [22] </ref> for an example of exploiting these heuristics and the heuristics used in [7]. Moreover, almost all N-body codes have their own set of heuristics based on various intuitions.
Reference: [23] <author> J. K. Salmon. </author> <title> Parallel Hierarchical N-body Methods. </title> <type> PhD thesis, </type> <institution> California Institute of Technology, </institution> <year> 1990. </year> <month> CRPR-90-14. </month>
Reference-contexts: The first step of N-body simulation is to construct the hierarchical tree. Theoretically, Bern, Epp-stein, and Teng [4] showed that the hierarchical tree can be computed from the set of particles in O (n=p) time using p processors. Several efficient parallel implementation have been developed <ref> [15, 16, 23, 24, 34] </ref>. In practice the hierarchical tree construction takes a very small fraction of the total simulation time.
Reference: [24] <author> J. K. Salmon, M. S. Warren, and G. S. Winckelmans. </author> <title> Fast parallel tree codes for gravitational and fluid dynamical N-body problems. </title> <journal> Int. J. Supercomputer Applications, </journal> <volume> 8(2) </volume> <pages> 129-142, </pages> <year> 1994. </year>
Reference-contexts: The load balancing and partitioning problems are much better understood for uniformly distributed particles, but are much harder for non-uniformly distributed particles, where adaptive hierarchical methods are required. Several heuristics have been developed and evaluated experimentally <ref> [24, 28] </ref>. However to the best of our knowledge, no provably good bounds are known for these heuristics. The time complexity of the N-body algorithms mentioned above is valid only for "reasonably" uniform distributions of particles. <p> The first step of N-body simulation is to construct the hierarchical tree. Theoretically, Bern, Epp-stein, and Teng [4] showed that the hierarchical tree can be computed from the set of particles in O (n=p) time using p processors. Several efficient parallel implementation have been developed <ref> [15, 16, 23, 24, 34] </ref>. In practice the hierarchical tree construction takes a very small fraction of the total simulation time.
Reference: [25] <author> H. Samet. </author> <title> The quadtree and related hierarchical data structures. </title> <journal> ACM Computing Surveys, </journal> <pages> pages 188-260, </pages> <year> 1984. </year>
Reference-contexts: Hier archical N-body methods use quadtree (for 2D) and octree (for 3D) to generate a canonical set of boxes to define clusters. The number of boxes is typically linear in the number of particles, i.e., O (n). Fig. 2. Quadtree A quadtree <ref> [25] </ref> is a recursive partition of a region of the plane into axis-aligned squares (see Fig. 2). One square, the root, covers the entire set of particles. It is often chosen to be the smallest (up to a constant factor) square that contains all particles.
Reference: [26] <author> K. E. Schmidt and M. A. Lee. </author> <title> Implementing the fast multipole method in three dimensions. </title> <journal> J. Stat. </journal> <volume> Phy., </volume> <pages> page 63, </pages> <year> 1991. </year>
Reference: [27] <author> H. D. Simon and S.-H. Teng. </author> <title> How good is recursive bisection? SIAM J. </title> <institution> Sci. Comput., </institution> <note> to appear, </note> <year> 1996. </year>
Reference-contexts: Recursively applying our partitioning theorem, we can analyze the quality of the recursive bisection scheme for p-way partitioning (See Simon and Teng <ref> [27] </ref> for unstructured meshes). Corollary 5.2. <p> Proof: By Lemma 4.1 of <ref> [27] </ref>, the total weight of removed edges of the recursive bisection scheme is log p1 X 2 i f (n=2 i ); where f (x) = x 11=d (log x + ) 2+1=d . <p> Summing up, we can bound the formula by O (p 1=d n 11=d (log n+) 2+1=d ). See Section 4 of <ref> [27] </ref> for the bound on general recursive bisection schemes. 2 Therefore, computation and total communication volume is equal to, respectively, O (n=p) and O (p 1=d n 11=d (log n+) 2+1=d ) for FMM, and respectively O (n log n=p) and O (p 1=d n 11=d (log n + ) 2+1=d
Reference: [28] <author> J. P. Singh, C. Holt, T. Ttsuka, A. Gupta, and J. L. Hennessey. </author> <title> Load balancing and data locality in hierarchical N-body methods. </title> <type> Technical Report CSL-TR-92-505, </type> <institution> Stanford, </institution> <year> 1992. </year>
Reference-contexts: The load balancing and partitioning problems are much better understood for uniformly distributed particles, but are much harder for non-uniformly distributed particles, where adaptive hierarchical methods are required. Several heuristics have been developed and evaluated experimentally <ref> [24, 28] </ref>. However to the best of our knowledge, no provably good bounds are known for these heuristics. The time complexity of the N-body algorithms mentioned above is valid only for "reasonably" uniform distributions of particles.
Reference: [29] <author> G. Strang and G. J. Fix. </author> <title> An Analysis of the Finite Element Method. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1973. </year>
Reference-contexts: 1. Introduction. The most commonly used approaches for numerical simulation of complex physical problems are the mesh-based numerical approach (to solving partial differential equations) <ref> [29] </ref> and the particle simulation method [14]. In addition to its direct applications in astrophysics, molecular dynamics, plasma physics, and fluid dynamics, the particle methods, especially the recently developed N-body techniques, have been applied to boundary element methods and the eigensystem analysis of tridiagonal linear systems.
Reference: [30] <author> S.-H. Teng. </author> <title> Points, Spheres, and Separators: a unified geometric approach to graph partitioning. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, School of Computer Science, </institution> <year> 1991. </year> <month> CMU-CS-91-184. </month>
Reference-contexts: As shown in the author's Ph.D. thesis <ref> [30] </ref>, the partitioning algorithm and theorem of Miller et al can be extended to overlap graphs on box-systems. We include a high level description of the algorithm and theorems of Miller et al in Appendix A. More detailed algorithms can be found in [19]. <p> Moreover, such a partitioning can be computed in linear time sequentially and in parallel O (n=p) time with p processors. Proof: See Theorem 7.1 of <ref> [30] </ref>. 2 4.2. Partitioning N-body Simulation Graphs. In this section, we show that if a set of n particles is -non-uniform, then its N-body communication graph is a subgraph of an ff-overlap of a (log 2 d n + )-ply box-system. <p> The basic idea to prove Theorem 4.6 is to show that the N-body communication graph has degree and edge weights bounded by O (log n+ ). We first give a geometric lemma whose proof can be found in <ref> [30] </ref>. Lemma 4.7. Let B = fb 1 ; :::; b n g be a set of (interiorly) disjoint boxes in IR d . Let b be a box in IR d and ff &gt; 1 and fi &gt; 0 be two constants. <p> Merge G I and G E (by deleting multiple edges) to obtain the communication graph for the N-body simulation. 18 S.-H. TENG This class of divide-and-conquer schemes have been carefully proved and analyzed in <ref> [10, 21, 30] </ref>. We refer interested readers to them. We conclude this subsection with the following theorem which follows directly from the results of [10, 21, 30]. Theorem 6.1. Let P be a -non-uniform point set in IR d . <p> TENG This class of divide-and-conquer schemes have been carefully proved and analyzed in <ref> [10, 21, 30] </ref>. We refer interested readers to them. We conclude this subsection with the following theorem which follows directly from the results of [10, 21, 30]. Theorem 6.1. Let P be a -non-uniform point set in IR d . Given the hierarchical tree of P , F M fi and BH fi P can be constructed in random parallel O (n log p=p) time, using p processors. <p> Given the hierarchical tree of P , F M fi and BH fi P can be constructed in random parallel O (n log p=p) time, using p processors. Proof: A detailed proof of this class of separator-based divide-and-conquer algorithms can be found in [10] for a parallel implementation and <ref> [21, 30] </ref> for a sequential implementation. Here we just give a high level argument. Let T (N; Q) be the time used by the above algorithm to construct F M fi for N boxes using Q processors.
Reference: [31] <author> S.-H. Teng. </author> <title> A Geometric Approach to Parallel Hierarchical and Adaptive Computing on Unstructured Meshes. </title> <booktitle> In Fifth SIAM Conference on Applied Linear Algebra, </booktitle> <pages> pp 51-57, </pages> <month> June </month> <year> 1994. </year> <title> LOAD BALANCING ADAPTIVE N-BODY SIMULATION 21 </title>
Reference-contexts: Our partitioning theorem can be extended to weighted N-body graphs. In the next section, we will use the non-weighted partitioning algorithm to efficiently compute the N-body communication graph in parallel. Putting these together, we develop an efficient load balancing scheme for parallel adaptive N-body simulation. Teng, Pramono, and Ruppert <ref> [32, 31, 11] </ref> showed that the partitioning theorem of Miller et al [20] (Theorem 4.3) can be naturally extended to the weighted case. Applying their weighted version result to our main partitioning theorem 4.1 we have the following weighted partitioning theorem: Theorem 5.1.
Reference: [32] <author> S.-H. Teng, E. Pramono, and J. Ruppert. </author> <title> Partitioning weighted meshes for parallel processing. </title> <type> Technical report, </type> <institution> NASA Ames., </institution> <year> 1994. </year>
Reference-contexts: Our partitioning theorem can be extended to weighted N-body graphs. In the next section, we will use the non-weighted partitioning algorithm to efficiently compute the N-body communication graph in parallel. Putting these together, we develop an efficient load balancing scheme for parallel adaptive N-body simulation. Teng, Pramono, and Ruppert <ref> [32, 31, 11] </ref> showed that the partitioning theorem of Miller et al [20] (Theorem 4.3) can be naturally extended to the weighted case. Applying their weighted version result to our main partitioning theorem 4.1 we have the following weighted partitioning theorem: Theorem 5.1.
Reference: [33] <author> F. Zhao. </author> <title> An O(n) algorithm for three-dimensional n-body simulation. </title> <type> Technical Report TR AI Memo 995, </type> <institution> MIT, AI Lab., </institution> <month> October </month> <year> 1987. </year>
Reference-contexts: The hierarchical methods include the O (n)-time algorithms of Greengard and Rokhlin [13], Anderson [1] and Zhao <ref> [33] </ref>, and the O (n log n) time algorithms (with a smaller constant in the big-O) of Appel 1 [2] and Barnes and Hut [3]. <p> The algorithms of Appel [2] and Barnes and Hut [3] are readily extended to non-uniformly distributed particles. Carrier, Greengard, and Rokhlin [7] presented an adaptive version of Green-gard and Rohklin's FMM (see Procedure Interaction-Pair in Section 2.4). Similar extensions can be made to Anderson's [1] and Zhao's <ref> [33] </ref> algorithms. As particles move close to each other non-uniformly, the time complexity of these extensions becomes super-linear | even exceeding O (n log n) for some distributions. There is an elegant O (n log n) time algorithm given by Callahan and Kosaraju [6] which is independent of particle distributions. <p> Hierarchical Methods for N-Body Simulation. The crux of hierarchical N-body methods is to decompose the potential at a point x, (x), into the sum of two potentials: N (x), the potential induced by "near-field" particles; and F (x), the potential due to "far-field" particles <ref> [2, 3, 13, 33] </ref>. In these methods, N (x) is computed exactly, while F (x) is computed approximately. 2.1. Well-Separated Clusters for Far-Field Approximation. The approximation is based on a notion of well-separated clusters [3, 13]. Suppose we have two clusters A and B, whose "centers" are distance r away. <p> Let p denote such a multipole expansion (for details see <ref> [1, 13, 33] </ref>). To (approximately) compute the potential at particles in A, we simply evaluate p B () at each particle in A. Suppose p B () has g (p; d) terms. Using multipole expansion, we reduce the number of operations to g (p; d)(jAj + jBj). <p> Similarly, flip p potential local expansion. Then traverse down the hierarchical tree in a pre-ordering, shift and add the potential local expansion of the parent box of a box to its own local expansion. Note that FMM for uniformly distributed particles has a much simpler description (see <ref> [13, 33] </ref>) than what we described above. In Carrier, Greengard, and Rokhlin [7] the set of intersection pairs is defined more directly.
Reference: [34] <author> F. Zhao and S. L. Johnsson. </author> <title> The parallel multipole method on the Connection Machines. </title> <journal> SIAM J. Stat. Sci. Comp., </journal> <volume> 12 </volume> <pages> 1420-1437, </pages> <year> 1991. </year>
Reference-contexts: The first step of N-body simulation is to construct the hierarchical tree. Theoretically, Bern, Epp-stein, and Teng [4] showed that the hierarchical tree can be computed from the set of particles in O (n=p) time using p processors. Several efficient parallel implementation have been developed <ref> [15, 16, 23, 24, 34] </ref>. In practice the hierarchical tree construction takes a very small fraction of the total simulation time.

References-found: 34

