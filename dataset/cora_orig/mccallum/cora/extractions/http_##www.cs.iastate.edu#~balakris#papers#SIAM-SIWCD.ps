URL: http://www.cs.iastate.edu/~balakris/papers/SIAM-SIWCD.ps
Refering-URL: http://www.cs.iastate.edu/~balakris/research.html
Root-URL: http://www.cs.iastate.edu
Title: Chapter 24 Generalized Neural Networks, Computational Differentiation, and Evolution  
Author: David W. Juedes Karthik Balakrishnan 
Keyword: Neural networks, genetic algorithms, evolution, ADOL-C.  
Abstract: Backpropagation is a powerful and widely used procedure for training multilayer, feedforward artificial neural networks. The procedure can be seen as a special case of the reverse mode of computational differentiation. This connection between backpropagation and computational differentiation leads us to envision a scenario wherein neural networks can be trained by using gradient descent methods and computational differentiation tools like ADOL-C. The primary advantage offered by such an approach is the possibility of training networks consisting of heterogeneous functional units|a notion we refer to as generalized neural networks. This approach, in conjunction with evolutionary algorithms, can be used to produce near-optimal designs. This paper presents this approach in more detail and demonstrates its usefulness through simulation results. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> 14 Juedes and Balakrishnan </institution>
Reference: [Balakrishnan1995a] <author> K. Balakrishnan and V. Honavar, </author> <title> Evolutionary design of neural architectures | a preliminary taxonomy and guide to literature, </title> <type> Tech. Report CS TR 95-01, </type> <institution> Department of Computer Science, Iowa State University, Ames, </institution> <address> IA 50011, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: Evolutionary approaches such as genetic algorithms (GAs), have been shown to produce near-optimal results in vast, complex, and multimodal search spaces [Holland1975a], [Goldberg1989a]. They are thus natural candidates for searching the space of network architectures <ref> [Balakrishnan1995a] </ref>. These algorithms are models of processes that appear to be at work in biological evolution.
Reference: [Cover1965a] <author> T. </author> <title> Cover, Geometrical and statistical properties of systems of linear inequalities with applications in pattern recognition, </title> <journal> IEEE Transactions on Electronic Computers, </journal> <volume> 14 (1965), </volume> <pages> pp. 326-334. </pages>
Reference-contexts: Many researchers have argued this point, and there is considerable reason to believe that higher order networks may help realize mappings more efficiently and compactly than conventional ANNs <ref> [Cover1965a] </ref>. In this paper, we examine neural networks that are inherently heterogeneous. These generalized neural networks differ from standard neural networks in the sense that they can incorporate a variety of activation functions. Here we show that these networks can compactly represent several well-studied problems. <p> This is a trivial example of the ability to produce compact networks by the wise choice of the activation function. It is well known in the neural network community that supplementing the inputs of an ANN with higher-order combinations of the inputs increases the capacity of the network <ref> [Cover1965a] </ref> and the ability to learn geometrically invariant properties [Giles1987a]. Product units [Durbin1989a], which compute a weighted product of their inputs rather than a weighted sum, fall into this category and have been shown to be of good use in a number of problems [Leerink1995a].
Reference: [Durbin1989a] <author> R. Durbin and D. Rumelhart, </author> <title> Product units: A computationally powerful and biologically plausible extension to backpropagation networks, </title> <booktitle> Neural Computation, 1 (1989), </booktitle> <pages> pp. 133-142. </pages>
Reference-contexts: It is well known in the neural network community that supplementing the inputs of an ANN with higher-order combinations of the inputs increases the capacity of the network [Cover1965a] and the ability to learn geometrically invariant properties [Giles1987a]. Product units <ref> [Durbin1989a] </ref>, which compute a weighted product of their inputs rather than a weighted sum, fall into this category and have been shown to be of good use in a number of problems [Leerink1995a]. With these in mind, we have been exploring ANNs that contain units incorporating (possibly) different activation functions.
Reference: [Giles1987a] <author> C. Giles and T. Maxwell, </author> <title> Learning, invariance, and generalization in high-order neural networks, </title> <journal> Applied Optics, </journal> <volume> 26 (1987), </volume> <pages> pp. 4972-4978. </pages>
Reference-contexts: It is well known in the neural network community that supplementing the inputs of an ANN with higher-order combinations of the inputs increases the capacity of the network [Cover1965a] and the ability to learn geometrically invariant properties <ref> [Giles1987a] </ref>. Product units [Durbin1989a], which compute a weighted product of their inputs rather than a weighted sum, fall into this category and have been shown to be of good use in a number of problems [Leerink1995a].
Reference: [Goldberg1989a] <author> D. E. Goldberg, </author> <title> Genetic Algorithms in Search, Optimization and Machine Learning, </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: For example, Saarinen et al. [Saarinen1991a] show that backpropagation is essentially the reverse mode of computational differentiation. In a related context, Yoshida [Yoshida1992a] uses computational differentiation and two-dimensional conjugate gradient search to train neural networks.) Finally, we address the issue of network architecture design by demonstrating how evolutionary algorithms <ref> [Goldberg1989a] </ref>, [Holland1975a] and computational differentiation can be used to build near-minimal networks. 2 ANN and BP Conventional ANNs are highly interconnected networks of relatively simple computing elements. In the accepted parlance, the computing elements are referred to as neurons or units, while the interconnections are typically called weights. <p> Thus, if the problem on hand is characterized by a large search space with sparsely populated solutions | the random searches become highly ineffective. Evolutionary approaches such as genetic algorithms (GAs), have been shown to produce near-optimal results in vast, complex, and multimodal search spaces [Holland1975a], <ref> [Goldberg1989a] </ref>. They are thus natural candidates for searching the space of network architectures [Balakrishnan1995a]. These algorithms are models of processes that appear to be at work in biological evolution.
Reference: [Griewank1996b] <author> A. Griewank, D. Juedes, and J. Utke, ADOL-C, </author> <title> a package for the automatic differentiation of algorithms written in C/C++, </title> <journal> ACM Trans. On Math. Software, </journal> <note> (1996, to appear). </note>
Reference-contexts: In place of BP, we propose the use of computational differentiation. In this section, we show how ADOL-C <ref> [Griewank1996b] </ref> can be used to train GNN. Consider an arbitrary GNN whose activation functions are composites of the standard functions like sigmoid, sine, cosine, and tanh. Such a network can be trained using ADOL-C by performing the following basic steps. (See [Griewank1996b] for more information and examples.) 1. <p> In this section, we show how ADOL-C <ref> [Griewank1996b] </ref> can be used to train GNN. Consider an arbitrary GNN whose activation functions are composites of the standard functions like sigmoid, sine, cosine, and tanh. Such a network can be trained using ADOL-C by performing the following basic steps. (See [Griewank1996b] for more information and examples.) 1. Design a standard C function that evaluates the network and computes the error on a given input/output pair. 2. Convert each float or double variable in the C function to variable of the class adouble as defined in adouble.h. 3.
Reference: [Hecht1990a] <author> R. Hecht-Nielsen, </author> <title> Neurocomputing, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction From pattern recognition to robotics, database retrieval to stock-market prediction, medical diagnosis to manufacturing and process control, artificial neural networks (ANNs) are finding widespread application <ref> [Hecht1990a] </ref>. Apart from their resemblance (though superficial) to the information-processing structures in the brain, their popularity can be attributed to a variety of factors|primarily their ability to elegantly capture input-output associations. Mathematically, ANNs perform a function, mapping the input space to the output space.
Reference: [Holland1975a] <author> J. Holland, </author> <title> Adaptation in Natural and Artificial Systems, </title> <publisher> University of Michigan Press, </publisher> <address> Ann Arbor, </address> <year> 1975. </year>
Reference-contexts: In a related context, Yoshida [Yoshida1992a] uses computational differentiation and two-dimensional conjugate gradient search to train neural networks.) Finally, we address the issue of network architecture design by demonstrating how evolutionary algorithms [Goldberg1989a], <ref> [Holland1975a] </ref> and computational differentiation can be used to build near-minimal networks. 2 ANN and BP Conventional ANNs are highly interconnected networks of relatively simple computing elements. In the accepted parlance, the computing elements are referred to as neurons or units, while the interconnections are typically called weights. <p> Thus, if the problem on hand is characterized by a large search space with sparsely populated solutions | the random searches become highly ineffective. Evolutionary approaches such as genetic algorithms (GAs), have been shown to produce near-optimal results in vast, complex, and multimodal search spaces <ref> [Holland1975a] </ref>, [Goldberg1989a]. They are thus natural candidates for searching the space of network architectures [Balakrishnan1995a]. These algorithms are models of processes that appear to be at work in biological evolution.
Reference: [Karmarkar1982a] <author> N. Karmarkar and R. Karp, </author> <title> The differencing method of set partitioning, </title> <type> Tech. Report UCB/CSD 82/113, </type> <institution> University of California - Berkeley, Computer Science Division,, </institution> <year> 1982. </year>
Reference-contexts: Such approaches use a procedure like simulated annealing (SA) or random restarts <ref> [Karmarkar1982a] </ref> to perform a global search for network architectures, which are then locally trained using BP. The effectiveness of the global searches in this context is bounded by the dimension of the search space and the density of the solution points.
Reference: [Leerink1995a] <author> L. Leerink, C. Giles, B. Horne, and M. Jabri, </author> <title> Learning with product units, </title> <booktitle> in Advances in Neural Information Processing Systems 7, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1995, </year> <pages> pp. 537-544. </pages>
Reference-contexts: Product units [Durbin1989a], which compute a weighted product of their inputs rather than a weighted sum, fall into this category and have been shown to be of good use in a number of problems <ref> [Leerink1995a] </ref>. With these in mind, we have been exploring ANNs that contain units incorporating (possibly) different activation functions. We label such networks generalized neural networks Generalized Neural Networks 5 (GNNs), more to differentiate them from conventional ANNs than to introduce any new nomenclature. <p> These biases need to be explored in more detail if the methods are to be used on real-world problems. (A systematic evaluation and comparison of these and other approaches is already underway [Parekh1995a].) As an alternative, Leerink et al., <ref> [Leerink1995a] </ref> and others have used combinations of global and local search techniques. Such approaches use a procedure like simulated annealing (SA) or random restarts [Karmarkar1982a] to perform a global search for network architectures, which are then locally trained using BP.
Reference: [McCulloch1943a] <author> W. S. McCulloch and W. Pitts, </author> <title> A logical calculus of ideas immanent in nervous activity, </title> <journal> Bulletin of Mathematical Biophysics, </journal> <volume> 5 (1943), </volume> <pages> pp. 115-133. </pages>
Reference-contexts: These networks are assumed to be simplistic, organized structures, with well-defined input (sensory), hidden (associative), and output (response) layers, as shown in Figure 1. The era of artificial neural computing began with the seminal work of McCulloch and Pitts <ref> [McCulloch1943a] </ref>, who observed that biological neurons behave in many ways like linear threshold units. Building on the work of McCulloch, Pitts, and others, Rosenblatt [Rosenblatt1958a], [Rosenblatt1960a], [Rosenblatt1962a] defined a very simple learning device consisting of a single linear threshold unit built on top of additional hardware.
Reference: [Minsky1969a] <author> M. Minsky and S. Papert, </author> <title> Perceptrons, </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1969. </year>
Reference-contexts: More precisely, Rosenblatt showed that if there is a setting of the weights and the threshold of the perceptron that solves a given problem, the learning rule is guaranteed to discover it. This is the famous perceptron convergence theorem <ref> [Minsky1969a] </ref>. Unfortunately, Minsky and Papert [Minsky1969a] showed that perceptrons are computationally limited and cannot compute nonlinearly separable functions. For example, a perceptron cannot compute the XOR function. <p> More precisely, Rosenblatt showed that if there is a setting of the weights and the threshold of the perceptron that solves a given problem, the learning rule is guaranteed to discover it. This is the famous perceptron convergence theorem <ref> [Minsky1969a] </ref>. Unfortunately, Minsky and Papert [Minsky1969a] showed that perceptrons are computationally limited and cannot compute nonlinearly separable functions. For example, a perceptron cannot compute the XOR function. <p> The following section describes some of the results of our simulations with GNN. 6 Simulation Results The ability of GNNs to represent mappings through compact networks is most easily illustrated in single-node networks. Consider, for example, the parity problem. 2 While it is well known <ref> [Minsky1969a] </ref> that a network of a single sigmoidal or threshold unit cannot represent the parity problem, it is straightforward to design single-node sine or cosine networks to solve parity. (See, for example, Figure 5.) Moreover, it is relatively straightforward to prove that a network of a single sine gate can solve
Reference: [Parekh1995a] <author> R. Parekh, J. Yang, and V. Honava, </author> <title> Constructive neural network learning algorithms for multi-category pattern classification, </title> <type> Tech. Rep ISU CS TR95-15a, </type> <institution> Iowa State University, Department of Computer Science, </institution> <year> 1995. </year>
Reference-contexts: However, the problem of determining good network architectures still remains an elusive issue. Some heuristic approaches in the literature allow one to incrementally construct networks by adding one or more units at a time. Popular examples of such constructive algorithms are tower, tiling, upstart, and cascade-correlation <ref> [Parekh1995a] </ref>. The first three algorithms typically are used for constructing multilayer perceptron networks, while cascade-correlation is used with networks of sigmoid units. <p> These biases need to be explored in more detail if the methods are to be used on real-world problems. (A systematic evaluation and comparison of these and other approaches is already underway <ref> [Parekh1995a] </ref>.) As an alternative, Leerink et al., [Leerink1995a] and others have used combinations of global and local search techniques. Such approaches use a procedure like simulated annealing (SA) or random restarts [Karmarkar1982a] to perform a global search for network architectures, which are then locally trained using BP.
Reference: [Rosenblatt1958a] <author> F. Rosenblatt, </author> <title> The perceptron: A probabilistic model for information storage and organization in the brain, </title> <journal> Psychological Review, </journal> <volume> 65 (1958), </volume> <pages> pp. </pages> <month> 386-408. </month> <title> [Rosenblatt1960a] , Perceptron simulation experiments, </title> <booktitle> in Proceedings of the IRE 48, </booktitle> <year> 1960, </year> <pages> pp. 301-309. </pages> <booktitle> [Rosenblatt1962a] , Principles of Neurodynamics, </booktitle> <publisher> Spartan, </publisher> <address> New York, </address> <year> 1962. </year>
Reference-contexts: The era of artificial neural computing began with the seminal work of McCulloch and Pitts [McCulloch1943a], who observed that biological neurons behave in many ways like linear threshold units. Building on the work of McCulloch, Pitts, and others, Rosenblatt <ref> [Rosenblatt1958a] </ref>, [Rosenblatt1960a], [Rosenblatt1962a] defined a very simple learning device consisting of a single linear threshold unit built on top of additional hardware. These simple networks, called perceptrons, could be trained via a simple learning rule that roughly corresponds to gradient descent.
Reference: [Rumelhart1986a] <author> D. E. Rumelhart, G. E. Hinton, and R. J. Williams, </author> <title> Learning internal representations by error-propagation, in Parallel Distributed Processing, </title> <editor> D. E. Rumelhart and R. J. McClelland, eds., </editor> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1986, </year> <note> ch. 8. </note>
Reference-contexts: For example, a perceptron cannot compute the XOR function. Although multilayer perceptrons can compute any Boolean function, there is no analogous training rule for such networks because the internal threshold units are not differentiable and thus not amenable to gradient descent. As noted by Rumelhart et al. <ref> [Rumelhart1986a] </ref>, the training problem for multilayer neural networks can be solved by replacing the nondifferentiable threshold function by a differentiable function that approximates the threshold in the limit, for example, the sigmoidal function|f (x) = 1 1+e kx . <p> Such networks can be trained via a gradient descent procedure by adjusting the weights of the interconnections based on their contribution to the total network error. Rumelhart et al. <ref> [Rumelhart1986a] </ref> give a simple and efficient technique known as backpropagation for computing the partial derivatives of total error in the network with respect to the interconnection weights. (Note: BP was independently discovered earlier by Werbos [Werbos1974a].) BP performs a gradient-descent in parameter space, minimizing an appropriate error function. <p> With a continuous model assumption, the weight-update rule that minimizes E can be easily derived (refer Rumelhart et al. <ref> [Rumelhart1986a] </ref> for details of the derivation) and can be shown to be w ij = ffi j o i : In this equation, ffi j refers to the instantaneous gradient given by the expression ffi j = (t j o j ):o 0 j if j is an output unit ( <p> Intuitively, large steps would help find a local minimum faster. However, if the steps are very large, the system could end up oscillating about a local minimum, maybe even never reaching the minimum. This is the step size problem. Rumelhart et al. <ref> [Rumelhart1986a] </ref> suggested a simple way out of this dilemma. They used a momentum term which factors in a fraction of the previous weight change into the current weight change. <p> hidden units rather than using a sigmoid function and one or more hidden units. 4 GNN and ADOL-C Training networks with arbitrary activation functions by using gradient descent methods presents a unique problem: How does one compute the partial derivatives in such a network? As formulated by Rumelhart et al. <ref> [Rumelhart1986a] </ref>, BP only applies to semi-linear functions 1 , and not arbitrary composite functions. In place of BP, we propose the use of computational differentiation. In this section, we show how ADOL-C [Griewank1996b] can be used to train GNN. <p> This network topology was chosen because it is easily generalizable and because it is straightforward to train via the BP algorithm as given in Rumelhart et al. <ref> [Rumelhart1986a] </ref>. Fig. 3. A generic test network topology. Since we expect both BP and ADOL-C to train these networks equally well, our simulation centered only on the time required to compute derivatives.
Reference: [Saarinen1991a] <author> S. Saarinen, R. Bramley, and G. Cybenko, </author> <title> Neural networks, backpropagation, and automatic differentiation, in Automatic Differentiation of Algorithms: Theory, Implementation, and Application, </title> <editor> A. Griewank and G. F. Corliss, eds., </editor> <publisher> SIAM, </publisher> <address> Philadelphia, Penn., </address> <year> 1991, </year> <pages> pp. 31-42. </pages>
Reference-contexts: Moreover, we build on the connection between backpropagation and the reverse mode of computational differentiation to show that these networks can be trained quickly. (Others have made the connection between computational differentiation and neural networks. For example, Saarinen et al. <ref> [Saarinen1991a] </ref> show that backpropagation is essentially the reverse mode of computational differentiation.
Reference: [Uhr1994a] <author> L. Uhr, </author> <title> Digital and analog microcircuit and sub-net structures for connectionist networks, in Artificial Intelligence and Neural Networks: Steps Toward Principled Integration, </title> <editor> V. Honavar and L. Uhr, eds., </editor> <publisher> Academic Press, </publisher> <address> Boston, </address> <year> 1994, </year> <pages> pp. 341-370. </pages>
Reference-contexts: Functions such as sigmoid, sine, cosine, tanh, and gaussian are suitable candidates for GNNs. GNNs can be expected to produce compact mappings by drawing on the relative strengths of the different activation functions made available to the units. This capability is in keeping with the thesis of Uhr in <ref> [Uhr1994a] </ref>, where a case is made for the development of subnetworks and specialized circuits, in order to build efficient ANNs.
Reference: [Werbos1974a] <author> P. Werbos, </author> <title> Beyond Regression: New Tools for Prediction and Analysis in the Behavioral Sciences, </title> <type> PhD thesis, </type> <institution> Committee on Appl. Math., Harvard Univ., </institution> <address> Cambridge, Mass., </address> <month> November </month> <year> 1974. </year>
Reference-contexts: Rumelhart et al. [Rumelhart1986a] give a simple and efficient technique known as backpropagation for computing the partial derivatives of total error in the network with respect to the interconnection weights. (Note: BP was independently discovered earlier by Werbos <ref> [Werbos1974a] </ref>.) BP performs a gradient-descent in parameter space, minimizing an appropriate error function. Typically, the parameters are the weights and thresholds in the network.
Reference: [Yoshida1992a] <author> T. Yoshida, </author> <title> Rapid learning method for multilayered neural networks using two dimensional conjugate gradient search, </title> <journal> Journal of Information Processing, </journal> <volume> 15 (1992), </volume> <pages> pp. 79-86. </pages>
Reference-contexts: For example, Saarinen et al. [Saarinen1991a] show that backpropagation is essentially the reverse mode of computational differentiation. In a related context, Yoshida <ref> [Yoshida1992a] </ref> uses computational differentiation and two-dimensional conjugate gradient search to train neural networks.) Finally, we address the issue of network architecture design by demonstrating how evolutionary algorithms [Goldberg1989a], [Holland1975a] and computational differentiation can be used to build near-minimal networks. 2 ANN and BP Conventional ANNs are highly interconnected networks of relatively
References-found: 20

