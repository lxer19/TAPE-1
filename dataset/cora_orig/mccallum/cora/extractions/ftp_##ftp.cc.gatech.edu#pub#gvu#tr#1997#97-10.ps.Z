URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1997/97-10.ps.Z
Refering-URL: http://www.cs.gatech.edu/fce/publications.html
Root-URL: 
Email: anind, abowd, mpinkert-@cc.gatech.edu  amw@cs.bham.ac.uk  
Phone: +1-404-894-7512  
Title: CyberDesk: A Framework for Providing Self-Integrating Ubiquitous Software Services  
Author: Anind K. Dey, Gregory Abowd, Mike Pinkerton Andrew Wood 
Keyword: Adaptive interfaces, automated integration, dynamic int e-gration, software components, context-aware computing, future computing environments, ubiquitous services  
Address: Atlanta, GA 30332-0280 USA  Edgbaston, Birmingham, B15 2TT UK  
Affiliation: Graphics, Visualization Usability Center Georgia Institute of Technology  School of Computer Science The University of Birmingham  
Abstract: Current software suites suffer from problems due to poor integration of their individual tools. They require the d e-signer to think of all possible integrating behaviours and leave little flexibility to the user. In this paper, we discuss CyberDesk, a component software framework that aut o-matically integrates desktop and network services, requi ring no integrating decisions to be made by the tool desig n-ers and giving total control to the user. We describe Cy-berDesks architecture in detail and show how CyberDesk components can be built. We give examples of extensions to CyberDesk such as chaining, combining, and using higher level context to obtain powerful integrating behav-iours. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <institution> Apple Computers. </institution> <note> OpenDoc homepage. Available at http://www.opendoc.apple.com. </note>
Reference-contexts: In response, software companies have been adopting the notion of component software : using small software mo d-ules as building blocks for a larger application. While there are many competing standards (OLE [11], Active X [10], Java Beans [6], OpenDoc <ref> [1] </ref>), the prevailing view is to provide a framework which programmers and sophist icated users can build upon to create desired application suites. Unfortunately, current component solutions do not entirely relieve the burden from the designer and end user. <p> For example, the Schedulers interface is: CameoProperty properties = new CameoProperty (lookupDate, Class.forName (cyberdesk.types.Date), Goto the date in the Scheduler); CameoInterface interfaces [0] = new CameoInterface (method, properties); CameoInterface interfaces <ref> [1] </ref> = new CameoInterface (select, null); The first interface declares that it can consume date sele c-tion events and the second interface declares that it can generate data selection events. The second section, where it implements the interfaces is slightly more complicated than with the network services. <p> n-tact Manager (see Figure 3), and it extends the ContactAp-plet class (the original application class). public class ContactManager extends ContactApplet implements CameoObject, Observer - The wrapper must declare its interfaces, CameoInterface [] interfaces = new CameoInterface [2]; interfaces [0] = new CameoInterface ("select", null); CameoProperty [] properties = new CameoProperty <ref> [1] </ref>; properties [ 0 ] = new CameoProperty ("lookup, Class.forName ("cyberdesk.types.Name "Lookup an entry for the name in the ContactManager" ); interfaces [1] = new CameoInterface ("method", properties); provide methods to execute any services it provides, /* method for invoking services supported by Contact Manager */ public void manipulate (CameoMessage msg) <p> Observer - The wrapper must declare its interfaces, CameoInterface [] interfaces = new CameoInterface [2]; interfaces [0] = new CameoInterface ("select", null); CameoProperty [] properties = new CameoProperty <ref> [1] </ref>; properties [ 0 ] = new CameoProperty ("lookup, Class.forName ("cyberdesk.types.Name "Lookup an entry for the name in the ContactManager" ); interfaces [1] = new CameoInterface ("method", properties); provide methods to execute any services it provides, /* method for invoking services supported by Contact Manager */ public void manipulate (CameoMessage msg) - if ( msg.getField (msg.PROPERTY).equals ("lookup")) - String name = ( (Name)msg.getField (msg.DATA)).getName (); /* call original ContactApplet method */ showMe (
Reference: 2. <institution> Apple Research Labs. Apple Data Detectors homepage. </institution> <note> Available at http://www.research.apple.com/research/tech/AppleDat aDetectors/. </note>
Reference-contexts: The example below is the wrapper for the Co n-tact Manager (see Figure 3), and it extends the ContactAp-plet class (the original application class). public class ContactManager extends ContactApplet implements CameoObject, Observer - The wrapper must declare its interfaces, CameoInterface [] interfaces = new CameoInterface <ref> [2] </ref>; interfaces [0] = new CameoInterface ("select", null); CameoProperty [] properties = new CameoProperty [1]; properties [ 0 ] = new CameoProperty ("lookup, Class.forName ("cyberdesk.types.Name "Lookup an entry for the name in the ContactManager" ); interfaces [1] = new CameoInterface ("method", properties); provide methods to execute any services it provides, /* <p> For applications that do not reveal the data selected to the agent, the user must copy the selected data to an application that will reveal it. It does not support any of the advanced features of CyberDesk, like chaining or combining. Apple Data Detectors <ref> [2] </ref> is another component architecture that supports automatic integration of tools. It works at the operating system level, using the selection mechanism that most Apple applications support. It allows the sele ction of a large area of text and recognizes all user-registered datatypes in that selection.
Reference: 3. <editor> Berwick, R. et al. </editor> <title> Research Priorities for the World Wide Web. </title> <booktitle> Report of the NSF Workshop Sponsored by the Information, Robotics, and Intelligent Systems D ivi-sion. </booktitle> <address> (Arlington, VA, </address> <month> October 31, </month> <year> 1994). </year>
Reference-contexts: We also chose Java for its promise of platform independence, its ability to execute within a web browser, and its object-oriented nature. The first two features support our goal of ubiquity, the second feature allows us to treat the browser as our desktop <ref> [3] </ref>, and the last feature made development easier. Also, most of the network services implemented are available via the web, so the natural access method was via a web browser.
Reference: 4. <editor> Bier, E.A. et al. ToolGlass and Magic Lenses: </editor> <booktitle> The See-Through Interface. Computer Graphics Procee dings, Annual Conference Series, 1993. ACM SI GGRAPH, </booktitle> <address> New York. </address> <pages> 73-80. </pages>
Reference-contexts: We are also looking at different presentation methods for the suggestions, including pop-up hierarchical menus and document lenses <ref> [4] </ref>. One of the problems weve found with chaining is that there is the potential for multiple services to generate a data type: a Name object, for example. Since the services are running independently, the Name objects that they generate could be different.
Reference: 5. <author> Cypher, A. EAGER: </author> <title> Programming repetitive tasks by example. </title> <booktitle> In Proceedings of CHI 91. </booktitle> <publisher> ACM Press. </publisher>
Reference-contexts: We are more interested in the fo l-lowing research areas: examining the use of chaining and combinin g searching for other advanced techniques, like chaining and combining investigating learning-by-example techniques <ref> [5] </ref> to allow the CyberDesk system to dynamically create chained suggestions based on a users r e peated actions incorporating rich data types into CyberDesk, other than time, position, and meta-types.
Reference: 6. <author> JavaSoft. </author> <title> JavaBeans homepage. </title> <note> Available at http://splash.javasoft.com/beans/. </note>
Reference-contexts: In response, software companies have been adopting the notion of component software : using small software mo d-ules as building blocks for a larger application. While there are many competing standards (OLE [11], Active X [10], Java Beans <ref> [6] </ref>, OpenDoc [1]), the prevailing view is to provide a framework which programmers and sophist icated users can build upon to create desired application suites. Unfortunately, current component solutions do not entirely relieve the burden from the designer and end user.
Reference: 7. <author> JavaSoft. </author> <title> AWT Data Transfer homepage. </title> <note> Available at http://www.javasoft.com/products/jdk/1.1/docs/guide/a wt/designspec/datatransfer.html. </note>
Reference-contexts: It was far less intrusive than the first method, and we had access to the original code, allo wing us to make changes. In the newest release of the Java Development Kit (version 1.1), support was added for transferring data between (Java and non-Java) applications via a clipboardstyle interface <ref> [7] </ref>. The use of this feature will allow us to avoid a l-tering any application code in future versions of CyberD-esk. The problem is much simpler for the "method" interface. Either the application contained a method for acting on the given data, or it didn't.
Reference: 8. <author> JavaSoft. </author> <title> Java Native Interface homepage. </title> <note> Available at http://www.javasoft.com/products/jdk/1.1/docs/guide/jn i/index.html. </note>
Reference-contexts: The wrapper must be a subclass of the original desktop application (slightly more difficult if the application is not written in Java, but is possible using the Java Native Inte r-face <ref> [8] </ref>).
Reference: 9. <editor> Long, S. et al. CyberGuide: </editor> <booktitle> Prototyping Context-Aware Mobile Applications. In Proceedings of CHI 96 (Vancouver, </booktitle> <address> Canada, March 1996), </address> <publisher> ACM Press. </publisher>
Reference: 10. <institution> Microsoft. </institution> <note> ActiveX homepage. Available at http://www.microsoft.com/activex/. </note>
Reference-contexts: In response, software companies have been adopting the notion of component software : using small software mo d-ules as building blocks for a larger application. While there are many competing standards (OLE [11], Active X <ref> [10] </ref>, Java Beans [6], OpenDoc [1]), the prevailing view is to provide a framework which programmers and sophist icated users can build upon to create desired application suites. Unfortunately, current component solutions do not entirely relieve the burden from the designer and end user.
Reference: 11. <author> Microsoft. </author> <title> OLE Development homepage. </title> <note> Available at http://www.microsoft.com/oledev/. </note>
Reference-contexts: In response, software companies have been adopting the notion of component software : using small software mo d-ules as building blocks for a larger application. While there are many competing standards (OLE <ref> [11] </ref>, Active X [10], Java Beans [6], OpenDoc [1]), the prevailing view is to provide a framework which programmers and sophist icated users can build upon to create desired application suites. Unfortunately, current component solutions do not entirely relieve the burden from the designer and end user.
Reference: 12. <author> Pandit, M. and Kalbag, S. </author> <title> The Selection Recognition Agent: Instant Access to Relevant Information and O p-erations. </title> <booktitle> In Proceedings of Intelligent User Interfaces </booktitle>
Reference-contexts: RELATED WORK Pandit and Kalbags Selection Recognition Agent <ref> [12] </ref> a t-tempts to address the same issues as CyberDesk. Unlike CyberDesk, it uses a fixed datatype-action pair, allowing for only one possible action for each datatype recognized. The actions performed by the agent are limited to launching an application.
Reference: 97. <institution> ACM Press. </institution>
Reference: 13. <author> Schilit, B. </author> <title> A Context-Aware System Architecture for Mobile Distributed Computing. </title> <type> Ph.D. Thesis, </type> <institution> C olum-bia University, </institution> <month> May </month> <year> 1995. </year>
Reference: 14. <author> Want, R. et al. </author> <title> An Overview of the PARCTAB Ubi q-uitous Computing Experiment. </title> <publisher> IEEE Personal Co m-munications 2 (6). </publisher> <year> 1995. </year> <pages> 28-43. </pages>
Reference: 15. <author> Wood, A. CAMEO: </author> <title> Supporting Observable APIs. P o-sition Paper for the WWW5 Programming the Web Workshop. </title> <address> (Paris, France, </address> <month> May, </month> <year> 1996). </year>
Reference-contexts: Also, most of the network services implemented are available via the web, so the natural access method was via a web browser. Intercomponent communication was performed using techniques based on the CAMEO toolkit <ref> [15] </ref>, a C++ too l-kit built previously by one of the authors to facilitate the integration of applicationsized components via the use of agent-like components. Components are able to invoke methods of other components directly via the use of a co m-ponent handle.
Reference: 16. <author> Wood, A., Dey, A., Abowd, G. CyberDesk: </author> <title> Automated Integration of Desktop and Network Services. </title> <booktitle> Techn i-cal Note In Proceedings of CHI 97 (Atlanta, </booktitle> <address> GA, March 1997), </address> <publisher> ACM Press. </publisher>
Reference-contexts: We end by showing how CyberDesk is being extended to provide more powe rful integration behaviour and by describing our future plans. WHAT IS CYBERDESK? CyberDesk is a component-based framework written in Java, that supports automatic integration of desktop and network services <ref> [16] </ref>. The framework is flexible, and can be easily customized and extended. The components in CyberDesk treat all data uniformly, regardless of whether the data came from a locally running application or from a service running on the World Wide Web (WWW).
References-found: 17

