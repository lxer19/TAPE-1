URL: http://www.cs.huji.ac.il/~noam/con15.ps
Refering-URL: http://www.cs.huji.ac.il/~noam/papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Undirected Connectivity in O(log 1:5 n) Space  
Author: Noam Nisan Endre Szemeredi Avi Wigderson 
Date: February 21, 1997  
Abstract: We present a deterministic algorithm for the connectivity problem on undirected graphs that runs in O(log 1:5 n) space. Thus, the recursive doubling technique of Savich which requires O(log 2 n) space is not optimal for this problem.
Abstract-found: 1
Intro-found: 1
Reference: [AKL*79] <author> R. Aleliunas, R.M. Karp, R.J. Lipton, L. Lovasz, and C. Rackoff. </author> <title> Random walks, universal sequences and the complexity of maze problems. </title> <booktitle> In 20 th Annual Symposium on Foundations of Computer Science, </booktitle> <address> San Juan, Puerto Rico, </address> <year> 1979. </year>
Reference-contexts: A special case of the connectivity problem which is of special interest is "undirected connectivity", i.e. the case where G is undirected. For this case a randomized Logspace algorithm was given in <ref> [AKL*79] </ref> (with a zero-error version in [BCD*89]). No deterministic algorithm that improved upon Sav-itch's space requirement was known, although improved time-space tradeoffs were given in [BR91, Nis91]. <p> One should thus view this outline as describing procedures, each one implemented using calls to the previous one. 3 2.3 Details of Procedure Shrink 2.3.1 Computing N (v) N (v) is computed by walking along a universal sequence. We will use universal sequences for 3-regular graphs as defined in <ref> [AKL*79] </ref>. Definition 1 A 3-regular graph G is called labeled if the three edges adjacent to each vertex are numbered by some permutation of 1; 2; 3. <p> We say that is an m-universal traversal sequence if for every connected 3-regular m-vertex graph G, every labeling of it and every vertex v, the walk on G starting from v following visits all vertices of G. In <ref> [AKL*79] </ref> it is shown that polynomial length universal sequences exist. The best explicit construction known is due to [Nis90]: Theorem 1 For every m there exists an m-universal sequence of length m O (log m) .
Reference: [BR91] <author> G. Barnes, and W.L. Ruzzo. </author> <title> Deterministic algorithms for undi-rected s t connectivity using polynomial time and sublinear space. </title> <booktitle> In Proceedings of the 23 st Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1991. </year>
Reference-contexts: For this case a randomized Logspace algorithm was given in [AKL*79] (with a zero-error version in [BCD*89]). No deterministic algorithm that improved upon Sav-itch's space requirement was known, although improved time-space tradeoffs were given in <ref> [BR91, Nis91] </ref>. It has also been a long standing open problem to improve upon Savitch's algorithm even for undirected graphs. 1 In this paper we present such an algorithm. Our algorithm solves the connectivity problem on undirected graphs and uses only O (log 1:5 n) space. <p> This allows procedure shrink to shrink the graph by a factor of n * and achieve only a constant recursion depth. This yields a polynomial-time O (n * )-space algorithm for connectivity. In fact this algorithm resembles that of <ref> [BR91] </ref>. * It is well known (see e.g. [KR90]) that LOGSPACE can be simulated by an EREW PRAM running in logarithmic time and polynomial number of processors.
Reference: [BCD*89] <author> A. Borodin, S.A. Cook, P.W. Dymond, W.L. Ruzzo, and M. Tompa. </author> <title> Two applications of inductive counting for complementation problems. </title> <journal> SIAM J. Comput., </journal> <volume> 18(3) </volume> <pages> 559-578, </pages> <year> 1989. </year>
Reference-contexts: A special case of the connectivity problem which is of special interest is "undirected connectivity", i.e. the case where G is undirected. For this case a randomized Logspace algorithm was given in [AKL*79] (with a zero-error version in <ref> [BCD*89] </ref>). No deterministic algorithm that improved upon Sav-itch's space requirement was known, although improved time-space tradeoffs were given in [BR91, Nis91]. It has also been a long standing open problem to improve upon Savitch's algorithm even for undirected graphs. 1 In this paper we present such an algorithm.
Reference: [BNS90] <author> L. Babai, N. Nisan, and M. Szegedy. </author> <title> Multiparty Protocols and Logspace-hard pseudorandom sequences. </title> <booktitle> In Proceedings of the 22 nd Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1990. </year> <month> 10 </month>
Reference: [CR80] <author> S. Cook and C. Rackoff. </author> <title> Space Lower Bounds for Maze Thread--ability on Restricted Machines. </title> <journal> In SIAM J. Comput., </journal> <volume> 9(3): </volume> <pages> 636-652, </pages> <year> 1980. </year>
Reference-contexts: In fact our algorithm may be seen to convert a wide variaty of algorithms for connectivity (e.g. JAG algorithms <ref> [CR80] </ref>) to faster ones. This is done by using the first algorithm to find the sets N (v).
Reference: [JM91] <author> D.B. Johnson, and P. Metaxas. </author> <title> Connected Components in O(log 3=2 jV j) parallel time for the CREW PRAM. </title> <booktitle> Proceedings of the 32 nd Annual Symposium on Foundations of Computer Science, </booktitle> <address> San Juan, Puerto Rico, </address> <year> 1991. </year>
Reference-contexts: An immediate application is a EREW parallel algorithm for undirected connectivity that runs in O (log 1:5 n) time and uses a polynomial number of processors. The same time bound was achieved in <ref> [JM91] </ref> in the weaker CREW model using only a linear number of processors. <p> Thus it is not difficult to convert our algorithm to a 9 parallel one that requires O (log 3=2 n) time on an EREW PRAM, and uses a polynomial number of processors. This matches the time bound of the recent algorithm of <ref> [JM91] </ref>, which works on the stronger CREW PRAM. We note, however, that they need only a linear number of processors, while in our algorithm the polynomial is quite hugh.
Reference: [KNP92] <author> D. Karger, N. Nisan, and M. Parnas. </author> <title> Fast Connected Components Algorithms for the EREW PRAM. </title> <note> To appear in SPAA, </note> <year> 1992. </year>
Reference-contexts: An immediate application is a EREW parallel algorithm for undirected connectivity that runs in O (log 1:5 n) time and uses a polynomial number of processors. The same time bound was achieved in [JM91] in the weaker CREW model using only a linear number of processors. Recently, <ref> [KNP92] </ref> show how a variant of our algorithm can be implemented on an EREW PRAM using a linear number of processors. 2 The Algorithm 2.1 Top Level The input to our algorithm is an undirected graph G over N vertices. <p> Procedure shrink can then be used to shrink the graph by a factor of (log n) fi (1) , getting a recursion depth of only log n= log log n. * It has been suggested by <ref> [KNP92] </ref> and by [RT92] that the usage of pair-wise independence can be eliminated. The following mechanism can be used to choose the set of representatives R instead: a vertex v is in R if N (v) does not intersect N (w) for all vertices w of lower rank. <p> This matches the time bound of the recent algorithm of [JM91], which works on the stronger CREW PRAM. We note, however, that they need only a linear number of processors, while in our algorithm the polynomial is quite hugh. In <ref> [KNP92] </ref> a linear-procesor variant of our EREW algorithm is obtained. * All the algorithms above can be easily converted so as to produce the connected components of the input graph, as well as a path between every connected pair of vertices. * Any improved construction of universal sequences may be plugged
Reference: [KR90] <author> R. M. Karp and V. Ramachandran. </author> <title> Parallel Algorithms for Shared-Memory Machines. </title> <booktitle> In Handbook of Theoretical Computer Science, Vol A, </booktitle> <editor> J. van Leeuwen Ed., </editor> <month> 869-932, </month> <year> 1990. </year>
Reference-contexts: This allows procedure shrink to shrink the graph by a factor of n * and achieve only a constant recursion depth. This yields a polynomial-time O (n * )-space algorithm for connectivity. In fact this algorithm resembles that of [BR91]. * It is well known (see e.g. <ref> [KR90] </ref>) that LOGSPACE can be simulated by an EREW PRAM running in logarithmic time and polynomial number of processors.
Reference: [Nis90] <author> N. Nisan. </author> <title> Pseudorandom generators for space-bounded computation. </title> <booktitle> In Proceedings of the 22 st Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1990. </year>
Reference-contexts: Our algorithm solves the connectivity problem on undirected graphs and uses only O (log 1:5 n) space. The algorithm uses the universal sequences obtained from the pseudorandom generators of <ref> [Nis90] </ref>, as well as pair-wise independent sampling. It is also possible to give a variant of our algorithm that does not rely on any pseudorandom generators and still beats Savitch's algorithm by requiring only O (log 2 n= log log n) space. <p> The first stage is implemented by walking in G, starting form v, along a universal sequence for graphs of size poly (f ). We use the universal sequences of Nisan <ref> [Nis90] </ref> which can be generated in space O (log 2 f). The second stage is implemented by using pair-wise independence, where each vertex decides at random to be in R with probability O (1=f ). <p> In [AKL*79] it is shown that polynomial length universal sequences exist. The best explicit construction known is due to <ref> [Nis90] </ref>: Theorem 1 For every m there exists an m-universal sequence of length m O (log m) . Each entry i of these sequences can be computed in O (log 2 m) space. Let 2 f1; 2; 3g fl .
Reference: [Nis91] <author> N. Nisan. </author> <title> RL SC. </title> <booktitle> Proceedings of the 24 th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1992. </year>
Reference-contexts: For this case a randomized Logspace algorithm was given in [AKL*79] (with a zero-error version in [BCD*89]). No deterministic algorithm that improved upon Sav-itch's space requirement was known, although improved time-space tradeoffs were given in <ref> [BR91, Nis91] </ref>. It has also been a long standing open problem to improve upon Savitch's algorithm even for undirected graphs. 1 In this paper we present such an algorithm. Our algorithm solves the connectivity problem on undirected graphs and uses only O (log 1:5 n) space.
Reference: [RT92] <author> V. Rakesh and M. Tompa. </author> <title> Private communication. </title>
Reference-contexts: Procedure shrink can then be used to shrink the graph by a factor of (log n) fi (1) , getting a recursion depth of only log n= log log n. * It has been suggested by [KNP92] and by <ref> [RT92] </ref> that the usage of pair-wise independence can be eliminated. The following mechanism can be used to choose the set of representatives R instead: a vertex v is in R if N (v) does not intersect N (w) for all vertices w of lower rank.
Reference: [Sav70] <author> W.J. Savitch. </author> <title> Relationships between nondeterministic and deterministic space complexities. </title> <journal> J. Comp. and Syst. Sci., </journal> <volume> 4(2) </volume> <pages> 177-192, </pages> <year> 1970. </year>
Reference-contexts: Several linear time algorithms are known for this problem; they all require linear space. The best space complexity known for this problem is O (log 2 n), which is achieved by Savitch's algorithm <ref> [Sav70] </ref>. It is a long standing open problem to find a smaller space algorithm for connectivity. As connectivity is complete for the complexity class N L, such an algorithm would imply improved deterministic simulation of nondeterministic space.
References-found: 12

