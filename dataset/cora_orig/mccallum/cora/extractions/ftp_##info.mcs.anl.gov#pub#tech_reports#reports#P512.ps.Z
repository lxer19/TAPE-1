URL: ftp://info.mcs.anl.gov/pub/tech_reports/reports/P512.ps.Z
Refering-URL: http://www.mcs.anl.gov/adic/
Root-URL: http://www.mcs.anl.gov
Title: Experiences with the Application of the ADIC Automatic Differentiation tool to the CSCMDO 3-D Volume
Author: Christian H. Bischof William T. Jones Andrew Mauer Jamshid Samareh-Abolhassani 
Note: To appear in Proceedings of the 34th AIAA Aerospace Sciences Meeting and Exhibit January 15-19, 1996, AIAA Paper 96-0716 Argonne Preprint MCS-P512-0595  
Abstract: Automatic differentiation (AD) is a methodology for developing reliable sensitivity-enhanced versions of arbitrary computer programs with little human effort. As such, it can vastly accelerate the use of advanced simulation codes in a multdisciplinary design optimization context, as the time for generating and verifying derivative codes is greatly reduced. In this paper, we report on the application of the recently developed ADIC automatic differentiation tool for ANSI C programs on the CSCMDO multiblock three-dimensional volume grid generator. The ADIC-generated code can easily be interfaced with FORTRAN derivative codes generated with the ADIFOR AD tool for FORTRAN 77 programs, thus providing efficient sensitivity-enhancement techniques for multilanguage, multidiscipline problems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Christian Bischof, Alan Carle, George Corliss, Andreas Griewank, and Paul Hov-land. ADIFOR: </author> <title> Generating derivative codes from Fortran programs. </title> <journal> Scientific Programming, </journal> <volume> 1(1) </volume> <pages> 11-29, </pages> <year> 1992. </year>
Reference-contexts: The codes employed continue to be developed and refined. In our experiments, we only concerned ourselves with computing the derivatives @ vlg @ sfg , employing the RAPID and CSCMDO codes. The ADIFOR tool <ref> [1, 2] </ref> was applied to RAPID and a file containing @ sfg @ gdv was written by the sensitivity-enhanced version of RAPID. We also mention that ADIFOR has also been successfully applied to the single-block version of TLNS3D, and the results are summmarized in [5].
Reference: [2] <author> Christian Bischof, Alan Carle, Peyvand Khademi, and Andrew Mauer. </author> <title> The ADIFOR 2.0 system for the automatic differentiation of Fortran 77 programs, 1994. </title> <type> Preprint MCS-P481-1194, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, and CRPC-TR94491, Center for Research on Parallel Computation, Rice University. </institution>
Reference-contexts: These modes are distinguished by how the chain rule is used to propagate derivatives through the computation. We briefly summarize the main points about these two approaches, a more detailed description can be found in <ref> [2] </ref> and the references therein. Let us assume that we have a function f that maps an n-vector x into an m-vector y. The forward mode propagates derivatives of intermediate variables with respect 4 to the independent variables and follows the control flow of the original program. <p> To propagate adjoints, one must be able to reverse the flow of the program, and remember or recompute any intermediate value that nonlinearly impacts the final result. This may not be easily achieved for general programs, and these issues are further discussed in <ref> [2] </ref>. In either case, AD computes derivatives accurate to machine precision [8] and is directly applicable to computer programs of arbitrary length containing branches, loops, and subroutines. <p> As we will see in the next section, this is of vital importance in the MDO context. We also mention that ADIC can transparently exploit sparsity in derivative computations through the use of the SparsLinC library <ref> [2, 3] </ref>, which, as a byproduct of the computation, will automatically compute the sparsity pattern of large sparse Ja-cobians. <p> The codes employed continue to be developed and refined. In our experiments, we only concerned ourselves with computing the derivatives @ vlg @ sfg , employing the RAPID and CSCMDO codes. The ADIFOR tool <ref> [1, 2] </ref> was applied to RAPID and a file containing @ sfg @ gdv was written by the sensitivity-enhanced version of RAPID. We also mention that ADIFOR has also been successfully applied to the single-block version of TLNS3D, and the results are summmarized in [5].
Reference: [3] <author> Christian Bischof and Andrew Mauer. </author> <title> ADIC A tool for the automatic differentiation of C programs. </title> <type> Preprint MCS-P499-0295, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1995. </year>
Reference-contexts: The code generated is portable ANSI C code that can easily be modified to print out sensitivities, say. The features and limitations of ADIC are discussed in detail in <ref> [3] </ref>, here we briefly summarize the main points. ADIC, like ADIFOR, employs a hybrid forward/reverse mode approach to generating derivatives. <p> As we will see in the next section, this is of vital importance in the MDO context. We also mention that ADIC can transparently exploit sparsity in derivative computations through the use of the SparsLinC library <ref> [2, 3] </ref>, which, as a byproduct of the computation, will automatically compute the sparsity pattern of large sparse Ja-cobians. <p> The line labelled "CSCMDO.AD (2)" refers to a somewhat more judicious use of CSCMDO, where derivatives are only propagated through the grid generation part, and not through the validation part. Note, however, that since ADIC intersperses derivatives and original program variables (see <ref> [3] </ref> for details), the validation part also had to be modified by ADIC to have data structures compatible with the sensitivity-enhanced grid generation part, but it did not include code for propagating derivatives.
Reference: [4] <author> Francois Bodin, Peter Beckman, Dennis Gannon, Jacob Goutwals, Srinivas Narayana, Suresh Srinivas, and Beata Winnicka. Sage++: </author> <title> an object-oriented toolkit and class library for building Fortran and C++ restructuring tools. </title> <booktitle> In Proceedings of the Second Annual Object-Oriented Numerics Conference. IEEE, </booktitle> <year> 1994. </year>
Reference-contexts: The ADOL-C tool [7] employs such an approach to compute derivatives of arbitrary order. 5 ADIC, in contrast, employs a source transformation approach to directly rewriting the source code to compute first-order derivatives. This approach requires considerable compiler infrastructure, and ADIC employs part of the Sage++ <ref> [4] </ref> source transformation infrastructure for C++ programs to transform ANSI C programs. With minor restrictions, the current ADIC prototype accepts arbitrary ANSI C programs and can handle, for example, subroutines, dynamic memory allocation, and pointers.
Reference: [5] <author> Alan Carle, Lawrence Green, Christian Bischof, and Perry Newman. </author> <title> Applications of automatic differentiation in CFD. </title> <booktitle> In Proceedings of the 25th AIAA Fluid Dynamics Conference, </booktitle> <institution> AIAA Paper 94-2197. American Institute of Aeronautics and Astronautics, </institution> <year> 1994. </year>
Reference-contexts: The ADIFOR tool [1, 2] was applied to RAPID and a file containing @ sfg @ gdv was written by the sensitivity-enhanced version of RAPID. We also mention that ADIFOR has also been successfully applied to the single-block version of TLNS3D, and the results are summmarized in <ref> [5] </ref>. The ADIC prototype was applied to CSCMDO. The fact that the ADIC interface allows for "derivative chaining" is essential in this context.
Reference: [6] <author> Andreas Griewank. </author> <title> On automatic differentiation. </title> <booktitle> In Mathematical Programming: Recent Developments and Applications, </booktitle> <pages> pages 83-108, </pages> <address> Amsterdam, 1989. </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference: [7] <author> Andreas Griewank, David Juedes, and Jay Srinivasan. ADOL-C, </author> <title> a package for the automatic differentiation of algorithms written in C/C++. </title> <type> Preprint MCS-P180-1190, </type> <institution> Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <year> 1990. </year>
Reference-contexts: The ADOL-C tool <ref> [7] </ref> employs such an approach to compute derivatives of arbitrary order. 5 ADIC, in contrast, employs a source transformation approach to directly rewriting the source code to compute first-order derivatives.
Reference: [8] <author> Andreas Griewank and Shawn Reese. </author> <title> On the calculation of Jacobian matrices by the Markowitz rule. </title> <editor> In Andreas Griewank and George F. Corliss, editors, </editor> <title> Automatic Differentiation of Algorithms: Theory, </title> <booktitle> Implementation, and Application, </booktitle> <pages> pages 126-135. </pages> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1991. </year> <month> 13 </month>
Reference-contexts: By applying the chain rule of derivative calculus over and over again to the composition of 2 those elementary operations, one can compute, in a completely mechanical fashion, derivatives of f that are correct up to machine precision <ref> [8] </ref>. In this paper, we report on the applicaton of the recently developed ADIC automatic differentiation tool for ANSI-C programs on the CSCMDO multi-block three-dimensional volume grid generator. CSCMDO (Coordinate and Sensitivity Calculator for Multidisciplinary Design Optimization) is a general purpose grid generator tay-lored specifically to MDO applications. <p> This may not be easily achieved for general programs, and these issues are further discussed in [2]. In either case, AD computes derivatives accurate to machine precision <ref> [8] </ref> and is directly applicable to computer programs of arbitrary length containing branches, loops, and subroutines.
Reference: [9] <author> William T. Jones and Jamshid Samareh-Abolhassani. </author> <title> A grid generation system for multidisciplinary design optimization. </title> <booktitle> In Proceedings of the Workshop on Surface Modeling, Grid Generation, and Related Issues in CFD Solutions, </booktitle> <pages> pages 11-21, </pages> <year> 1995. </year> <month> NASA-CP3291. </month>
Reference-contexts: The code is capable of modifying any of the six faces of a block to reflect changes in the optimized geometry as defined by an input surface (s). This section gives a brief overview of CSCMDO; a more detailed discussion can be found in <ref> [9] </ref>. With the code executing in a batch mode, it can be incorporated directly into the design loop as shown in Figure 1. As mentioned before, the "computational method" at the very least contains a CFD analysis.
Reference: [10] <author> Robert E. Smith, Malcolm G. I. Bloor, Michael Wilson, and Almuttil M. Thomas. </author> <title> Rapid Airplane Parametric Input Design (RAPID). </title> <booktitle> In Proceedings of the 12th AIAA Computational Fluid Dynamics Conference, </booktitle> <address> San Diego, </address> <institution> AIAA 95-1687. American Institute of Aeronautics and Astronautics, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: The Rapid Airplane Parametric Input Design (RAPID) code <ref> [10] </ref> is written in FORTRAN 77, and, given geometric design variables (gdv) (for example camber) produces a aircraft surface grid (sf g). From this output, CSCMDO builds a 3-D volume grid (vlg).
Reference: [11] <author> Jorge J. More and Stephen J. Wright. </author> <title> Optimization Software Guide. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1993. </year>
Reference-contexts: For system optimization, on the other hand, a wide suite of existing optimization algorithms is readily available (see, for example, <ref> [11] </ref>). An MDO problem of particular interest in the aerospace community is the design optimization of the high-speed civil transport. This problem, at the minimum, includes Computational Fluid Dynamics (CFD), and therefore numerical grid generation, as an integral part of the design process.
Reference: [12] <author> Louis B. Rall. </author> <title> Automatic Differentiation: Techniques and Applications, </title> <booktitle> volume 120 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, </address> <year> 1981. </year>
Reference: [13] <author> V. N. Vatsa, M. D. Sanetrik, and E. B. Parlette. </author> <title> Development of a flexible and efficient multigrid-based multiblock flow solver. </title> <booktitle> In Proceedings of the 31st AIAA Aerospace Sciences Meeting, </booktitle> <pages> AIAA 93-0677. </pages> <institution> American Institute of Aeronautics and Astronautics, </institution> <year> 1993. </year>
Reference-contexts: The Rapid Airplane Parametric Input Design (RAPID) code [10] is written in FORTRAN 77, and, given geometric design variables (gdv) (for example camber) produces a aircraft surface grid (sf g). From this output, CSCMDO builds a 3-D volume grid (vlg). TLNS3D, a 3-D Navier-Stokes solver for turbulent flow <ref> [14, 13] </ref> then uses the geometry information as well as the stream parameters (strm) to compute the flow (f lw) over the aircraft and from there, measures of performance such as lift or drag.
Reference: [14] <author> V. N. Vatsa and B. W. Wedan. </author> <title> Development of a multigrid code for 3-D Navier-Stokes equations and its application to a grid-refinement study. </title> <journal> Computers & Fluids, </journal> <volume> 18(4) </volume> <pages> 391-403, </pages> <year> 1990. </year> <month> 14 </month>
Reference-contexts: The Rapid Airplane Parametric Input Design (RAPID) code [10] is written in FORTRAN 77, and, given geometric design variables (gdv) (for example camber) produces a aircraft surface grid (sf g). From this output, CSCMDO builds a 3-D volume grid (vlg). TLNS3D, a 3-D Navier-Stokes solver for turbulent flow <ref> [14, 13] </ref> then uses the geometry information as well as the stream parameters (strm) to compute the flow (f lw) over the aircraft and from there, measures of performance such as lift or drag.
References-found: 14

