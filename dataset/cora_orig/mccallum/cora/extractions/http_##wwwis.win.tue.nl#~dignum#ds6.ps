URL: http://wwwis.win.tue.nl/~dignum/ds6.ps
Refering-URL: http://wwwis.win.tue.nl/~dignum/papers.html
Root-URL: http://www.win.tue.nl
Email: email: h.weigand@kub.nl,  email: egon@kub.nl  email: dignum@win.tue.nl  
Phone: fax: +3113663069  
Title: Integrated Semantics for Information and Communication Systems  
Author: Hans Weigand Egon Verharen Frank Dignum 
Keyword: data semantics, application architecture, communication model, lexicon, EDI.  
Address: P.O.box 90153, 5000 LE Tilburg, The Netherlands, tel.+31-13-662806,  P.O.box 90153, 5000 LE Tilburg, The Netherlands,  P.O.box 513, 5600 MB Eindhoven, The Netherlands, tel.+31-40-473705,  
Affiliation: Tilburg University, Infolab,  Tilburg University, Infolab,  Eindhoven University of Technology, Dept. of Mathematics and Computer Science,  
Date: February 10, 1995  
Abstract: Traditionally, Data Semantics dealt with the static and dynamic integrity rules of database systems. The database system was supposed to integrate different viewpoints on the Universe of Discourse of the organization. Nowadays, databases are often decentralized and its integrating function has been taken over by the network. To account for this evolution, we use the term Information and Communication System instead of Information System, and we argue that Data Semantics should move its focus to the semantics of communication. We present a formal language based on Dynamic Logic in which the semantics of objects, actions, but also speech acts can be described. In addition, we describe a lexicon in which the conceptual meaning of the terms of communication can be defined. Together, these models provide an integrated semantics for Information and Communication systems. These can be interorganizational, as in EDI applications, or intraorganizational, as in Workflow Management. 
Abstract-found: 1
Intro-found: 1
Reference: [Aus62] <author> J.L. </author> <title> Austin How to do things with words. </title> <publisher> Oxford: Clarendon Press, </publisher> <year> 1962. </year>
Reference: [BalB62] <author> T. Balmer, W. </author> <title> Brennenstuhl Speech Act Classification: A Study in the Lexical Analysis of English Speech Activity Verbs. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1981. </year>
Reference-contexts: A proposition is embedded in a message. The illocution of the message first of all defines the illocutionary type. The basic illocutionary types are ASSERT and DIRECT ([Aus62] [Sear69] [SeaV85] [LehL86] [DiWe94]), but many more can be distinguished (cf. <ref> [BalB62] </ref> [ChaW94]). The illocution also defines the Sender and Receiver of the message. An example of a message is: the assertion that a certain part has been delivered, or the request that a certain part be delivered (from agent A to agent B).
Reference: [ByS92] <author> R.A. </author> <title> de By, H.J. Steenhagen Interfacing Heterogeneous Systems through Functionally specified Transactions (extended abstract). </title> <booktitle> In: Proc. IFIP DS-5 Semantics of Interoperable Database Systems (D. </booktitle> <editor> Hsiao et al, eds) Lorne, Aus-tralia, </editor> <year> 1982. </year>
Reference-contexts: The models themselves are not very different from those found in other current approaches. In OO design, one usually has Object Models, Data Flow Diagrams (for the actions) and Functional Models (that overlap with the Communication Model). In <ref> [ByS92] </ref> a specification method is described for interoperable transactions that uses the language LOTOS (based on process algebra) for the communication between systems and TM (based on typed lambda calculus) for the description of the local database.
Reference: [ChaW94] <author> M.K. Chang, </author> <title> C.C. Woo A Speech-Act Based Negotiation Protocol: Design, Implementation, </title> <journal> and Test Use ACM Trans. on Inf. Systems, Vol.12, </journal> <volume> No4, </volume> <year> 1994, </year> <month> pp360-382. </month>
Reference-contexts: A proposition is embedded in a message. The illocution of the message first of all defines the illocutionary type. The basic illocutionary types are ASSERT and DIRECT ([Aus62] [Sear69] [SeaV85] [LehL86] [DiWe94]), but many more can be distinguished (cf. [BalB62] <ref> [ChaW94] </ref>). The illocution also defines the Sender and Receiver of the message. An example of a message is: the assertion that a certain part has been delivered, or the request that a certain part be delivered (from agent A to agent B).
Reference: [Date90] <author> C. </author> <title> Date An Introduction to Database Systems. </title> <booktitle> Volume 1, 5th Edition, </booktitle> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: In the traditional view, there is one company database accessed by many users (e.g. <ref> [Date90] </ref>). These users have different access rights, so some do provide data while others read them, or provide other data. The fact that the users do not communicate directly (by a workflow application e.g.), but indirectly through the database, asynchronously, does not take away that they do communicate.
Reference: [DieW92] <author> J.L.G. Dietz and G.A.M. </author> <title> Wiederhoven A comparison of the linguistic theories of Searle and Habermas as a basis for communication supporting systems. In: Linguistic Instruments in Knowledge Engineering (Riet, </title> <editor> R.P van de, and R.A. Meersman, eds) North-Holland, </editor> <year> 1992. </year>
Reference: [DiWe94] <author> F. Dignum, H. </author> <title> Weigand Communication and Deontic Logic. </title> <booktitle> In: Proc. ISCORE '94 Workshop (R. </booktitle> <editor> Wieringa, R. Feenstra, eds), </editor> <publisher> Vrije Universiteit, </publisher> <address> Amsterdam, </address> <year> 1994, </year> <month> pp.401-415. </month>
Reference-contexts: A proposition is embedded in a message. The illocution of the message first of all defines the illocutionary type. The basic illocutionary types are ASSERT and DIRECT ([Aus62] [Sear69] [SeaV85] [LehL86] <ref> [DiWe94] </ref>), but many more can be distinguished (cf. [BalB62] [ChaW94]). The illocution also defines the Sender and Receiver of the message. <p> Therefore messages can be organized in transactions [NguM94], and they can also be modelled as methods of the agents that support them (in the same way as objects support a number of methods). In this paper, we will not go into these Software Engineering issues (see [Wei93] <ref> [DiWe94] </ref>), since they do not influence the formal data semantics. An example of a message specification is given in fig.5. The bottom line of the semantic specification is the predicate. Predicates are used to name object types, attribute types, action types, and illocutionary types. <p> in the next section. 4.3 The illocutionary language L ill In order to model the communication between agents in a distributed system the language L dd has to be extended in a way so that it contains all the elements of illocutionary semantics as introduced in section 3 (cf. [Wei93] <ref> [DiWe94] </ref>). (1) We introduce a special class Ag of agents (cf. [Shoh93]. <p> E.g.: FOR (i,j,ff) == DIR (i,j,ff) i forbids j to do ff PER (i,j,ff) == DECL (i,j,P j;i (ff (j)) i permits j to do ff For a motivation of this set of basic speech acts, we refer to <ref> [DiWe94] </ref>. Declaratives can only be used for specific institutionalized speech acts, so the propositional content is usually rather restricted. In practice, a limited number of specific declaratives will be distinguished, such as the "authorization" action that we will introduce later. Speech acts can be grounded in different ways. <p> The effect is that he can have the authorization retracted whenever he wants. auth (j,ff) ^ auth (i,DIR a (i,j,RTR (j,i,ff))) An important question with respect to authorization is whether an authorization can be passed on. We refer to <ref> [DiWe94] </ref> for some preliminary remarks on delegation. 5 Conclusion In this paper, we have described an integrated semantics for modern Information and Communication Systems. We characterized several types of ICSs, all of which are used today in different application settings, such as Business Computing, EDI, Groupware and Workflow Management. <p> The Lexicon is not found in the other approaches. Secondly, our Communication Model highlights who is responsible for a certain database, and it also contains primitives for assigning and retracting authorizations dynamically. Although not worked out in this paper (but see <ref> [DiWe94] </ref>), our deontic language also allow the specification of deviating behaviour (failure handling, sanctions etc). In the other approaches, authorizations are not taken into account, and the communication is modelled as a mechanical process.
Reference: [Gua92] <author> N. </author> <title> Guarino Concepts, Attributes, and Arbitrary Relations: Some Linguistic and Ontological Criteria for Structuring Knowledge Bases. In: Linguistic Instruments in Knowledge Engineering (Riet, </title> <editor> R.P van de, and R.A. Meersman, eds) North-Holland, </editor> <year> 1992, </year> <month> pp.195-211. </month>
Reference-contexts: The collection of all Herbrand-Kripke structures of L is called L. If knowledge is expressed as closed statements about objects of a certain type, then we must be able to talk about types. We follow Sowa ([Sowa84]; see also <ref> [Gua92] </ref>) in using an explicit type predicate to declare the type of a term. Definition 4 (Typed Logic) Let T be a finite set of constants not occurring in L Stat . The elements of T are called type names and o is used as metavariable over T.
Reference: [ISO84] <institution> Concepts and Terminology for the Conceptual Schema and the Information Base. (J.J.van Griethuysen, ed.) ISO/TC97/SC21 N197, </institution> <year> 1984. </year>
Reference-contexts: Thus data semantics should include semantics of the communicative behavior. This is an extension of the "classical" semantics that was concerned with static and dynamic aspects only (e.g. <ref> [ISO84] </ref>). * In the traditional view, data semantics concentrated on the semantics of the data in the database; it could hardly be otherwise. In the communication perspective, however, the contents of the database are less interesting than the interfaces between different systems.
Reference: [Lee88] <author> R. </author> <title> Lee Bureaucracies as Deontic Systems. </title> <journal> Trans. on Office Information Systems Vol.6, </journal> <volume> No2, </volume> <year> 1988, </year> <month> pp87-108. </month>
Reference: [LehL86] <author> E. Lehtinen, K. </author> <title> Lyytinen Action Based Model of Information Systems. </title> <booktitle> Information Systems, </booktitle> <address> Vol.12, No3, </address> <year> 1986, </year> <month> pp299-317. </month>
Reference-contexts: A proposition is embedded in a message. The illocution of the message first of all defines the illocutionary type. The basic illocutionary types are ASSERT and DIRECT ([Aus62] [Sear69] [SeaV85] <ref> [LehL86] </ref> [DiWe94]), but many more can be distinguished (cf. [BalB62] [ChaW94]). The illocution also defines the Sender and Receiver of the message.
Reference: [Mey88] <author> J.-J.Ch. </author> <title> Meyer A different approach to deontic logic: deontic logic viewed as a variant of dynamic logic. </title> <journal> Notre Dame Journal of Formal Logic 29(1), </journal> <year> 1988, </year> <month> pp.109-136. </month>
Reference-contexts: The language L Stat is supposed to contain a special predicate V iolation. The intuitive meaning of [ff] is that after the execution of ff necessarily holds. The semantics of actions is that they are functions on PW L . A formal semantics is given in <ref> [Mey88] </ref>. B stands for "belief" and I for "intend"; these modalties are used below for the representation of the sincerity conditions of speech acts. <p> The deontic operators are defined by the following abbreviations (cf. <ref> [Mey88] </ref>; [WMW89]): Definition 9 (Deontic Modalities) O (ff)=[ff]V iolation " ff is obligatory" F (ff)=[ff]V iolation " ff is f orbidden" =O (ff) P (ff)=:[ff]V iolation " ff is permitted" =:F (ff) So, the action ff is obliged if not doing ff leads to a violation state, ff is forbidden if
Reference: [NguM94] <author> A. Ngu, R.A. Meersman, H. </author> <title> Weigand Specification and verification of communication for interoperable transactions. </title> <journal> Int. Journal of Intelligent and Cooperative Information Systems 3(1), </journal> <year> 1994, </year> <month> pp.47-65. </month>
Reference-contexts: It is a characteristic of messages that they seldom stand on their own. For example, a request is typically followed by an acknowledgement, commitment or refuse message. Therefore messages can be organized in transactions <ref> [NguM94] </ref>, and they can also be modelled as methods of the agents that support them (in the same way as objects support a number of methods). In this paper, we will not go into these Software Engineering issues (see [Wei93] [DiWe94]), since they do not influence the formal data semantics.
Reference: [Sear69] <author> J.R. </author> <title> Searle Speech Acts. </title> <publisher> Cambridge University Press. </publisher> <year> 1969. </year>
Reference-contexts: A proposition is embedded in a message. The illocution of the message first of all defines the illocutionary type. The basic illocutionary types are ASSERT and DIRECT ([Aus62] <ref> [Sear69] </ref> [SeaV85] [LehL86] [DiWe94]), but many more can be distinguished (cf. [BalB62] [ChaW94]). The illocution also defines the Sender and Receiver of the message.
Reference: [SeaV85] <author> J.R. Searle and D. </author> <booktitle> Vanderveken Foundations of illocutionary logic. </booktitle> <publisher> Cambridge University Press. </publisher> <year> 1985. </year>
Reference-contexts: A proposition is embedded in a message. The illocution of the message first of all defines the illocutionary type. The basic illocutionary types are ASSERT and DIRECT ([Aus62] [Sear69] <ref> [SeaV85] </ref> [LehL86] [DiWe94]), but many more can be distinguished (cf. [BalB62] [ChaW94]). The illocution also defines the Sender and Receiver of the message.
Reference: [Shoh93] <author> Y. </author> <title> Shoham Agent-oriented programming. </title> <booktitle> Artificial Intelligence 60 1993, </booktitle> <pages> pp. 51-92. </pages>
Reference-contexts: order to model the communication between agents in a distributed system the language L dd has to be extended in a way so that it contains all the elements of illocutionary semantics as introduced in section 3 (cf. [Wei93] [DiWe94]). (1) We introduce a special class Ag of agents (cf. <ref> [Shoh93] </ref>.
Reference: [Sowa84] <author> J.F. </author> <title> Sowa Conceptual Structures: </title> <booktitle> Information Processing in Mind. and Machine Addison-Wesley, </booktitle> <address> Reading, Mas. </address> <year> 1984. </year>
Reference: [VerW94] <author> E. Verharen, H. Weigand, and O. </author> <title> De Troyer Agent-oriented information system design. </title> <booktitle> In: Proc. ISCORE '94 Workshop (R. </booktitle> <editor> Wieringa, R. Feenstra, eds), </editor> <publisher> Vrije Universiteit, </publisher> <address> Amsterdam, </address> <year> 1994, </year> <month> pp.378-392. </month>
Reference-contexts: The best way to generalize over these and other uses of databases, is by starting from the communication structures in the domain. These communication structures can be modelled by communication models such as DEMO ([DieW92] <ref> [VerW94] </ref>). Such a model describes the communicating agents, also called subjects, and the communication lines between them. The communication lines are specified on a conceptual level only. They do not prescribe whether the communication is synchronous or not, and which technical intermediaries are used.
Reference: [Wei90] <author> H. </author> <title> Weigand Linguistically Motivated Principles of Knowledge Base Systems. </title> <publisher> Foris, </publisher> <address> Dordrecht, </address> <year> 1990. </year>
Reference-contexts: The bottom line of the semantic specification is the predicate. Predicates are used to name object types, attribute types, action types, and illocutionary types. In the traditional view of semantics, these predicates are arbitrary strings. However, as argued at length in <ref> [Wei90] </ref> the use of these predicates draws heavily on the lexical meaning associated with their natural language counterparts. This observation gains in importance in the communication-oriented view of data semantics. <p> Note that lexical definitions should not be considered as exhaustive characterizations of a concept. A definition is made relative to a certain context. Within the context, the definitions must differentiate different concepts, and provide a basis for mutual understanding. In <ref> [Wei90] </ref> a linguistic approach is presented in which the lexical definition as well as the lexical structures are based on linguistic primitives. In such a Lexicon, no formal distinction is made between entities, relationships, actions, attributes, identifiers, in so far all of them have a lexical entry.
Reference: [Wei91] <author> H. </author> <title> Weigand An object-oriented approach in a multimedia database project. In: DS-4 Object-Oriented Databases (R. </title> <editor> Meersman, W. Kent, S. Khosla, eds) North-Holland, </editor> <year> 1991, </year> <month> pp.393-413. </month>
Reference-contexts: The action can be "to deliver" and the object can be a certain "part". Action types can be specified by means of pre- and postconditions and triggers. An example of an action specification is given in fig.4; the format is based on <ref> [Wei91] </ref> and has been used in a large database project. In OO modelling, actions are assigned to objects in the form of methods. We support inheritance of actions, in the sense that any action specified for a certain object class applies also to its subclasses (perhaps in a refined form).
Reference: [Wei93] <author> H. </author> <title> Weigand Deontic aspects of communication. </title> <booktitle> In: Deontic Logic in Computer Science (J.-J.Ch. Meyer,R. Wieringa eds) Wiley Professional Computing, </booktitle> <year> 1993. </year>
Reference-contexts: Therefore messages can be organized in transactions [NguM94], and they can also be modelled as methods of the agents that support them (in the same way as objects support a number of methods). In this paper, we will not go into these Software Engineering issues (see <ref> [Wei93] </ref> [DiWe94]), since they do not influence the formal data semantics. An example of a message specification is given in fig.5. The bottom line of the semantic specification is the predicate. Predicates are used to name object types, attribute types, action types, and illocutionary types. <p> described in the next section. 4.3 The illocutionary language L ill In order to model the communication between agents in a distributed system the language L dd has to be extended in a way so that it contains all the elements of illocutionary semantics as introduced in section 3 (cf. <ref> [Wei93] </ref> [DiWe94]). (1) We introduce a special class Ag of agents (cf. [Shoh93].
Reference: [WMW89] <author> R.J. Wieringa, J.-J.Ch. Meyer and H. </author> <title> Weigand Specifying dynamic and deontic integrity constraint. </title> <booktitle> Data & Knowledge Engineering 4, </booktitle> <year> 1989, </year> <month> pp.157-189. </month>
Reference-contexts: We drop the index T L Stat from PW T L Stat when the language is clear or can be presupposed to be clear. 4.2 The dynamic deontic language L dd We start by defining a language of actions L act (cf. <ref> [WMW89] </ref>). Definition 6 (Actions) The language L act of actions is given by the following BNF: ff :: ajff 1 [ ff 2 jff 1 &ff 2 jffjanyjfail a stands for an atomic action. <p> The deontic operators are defined by the following abbreviations (cf. [Mey88]; <ref> [WMW89] </ref>): Definition 9 (Deontic Modalities) O (ff)=[ff]V iolation " ff is obligatory" F (ff)=[ff]V iolation " ff is f orbidden" =O (ff) P (ff)=:[ff]V iolation " ff is permitted" =:F (ff) So, the action ff is obliged if not doing ff leads to a violation state, ff is forbidden if doing <p> elements of L Sact . * If ff 2 L Sact then also IP (i; j; ff) 2 L Sact and IP (i; j; ff) 2 L Sact where IP 2 fDIR; COM g The following axioms hold for speech acts (for the inference relation on actions used here, see <ref> [WMW89] </ref>).
Reference: [WWMD91] <author> R.J. Wieringa, H. Weigand, J.-J.Ch. Meyer and F. </author> <title> Dignum The Inheritance of Dynamic and Deontic Integrity Constraints. </title> <journal> Annals of Mathematics and Artificial Intelligence, nr. </journal> <volume> 3, </volume> <month> pp.393-428. </month>
Reference-contexts: Objects and their relations can be described in L stat , the propositions describing actions (the contents of the messages) are expressed in L dd . In L ill we can express the messages themselves. 4.1 The static language L stat L Stat <ref> [WWMD91] </ref> is a simple first-order language with variables, constants, function symbols and predicate symbols. Two special predicates are the unary predicate E (existence) and the binary predicate = (equality). <p> However, it requires that we assume a kind of "closure" of these necessary constraints at "compile time" to get the sufficient preconditions that make the system run (see <ref> [WWMD91] </ref>). Preconditions for deontic modalities have the form 8x : o (P (ff (x)) ) OE (x)) ff is allowed to occur only if OE holds. 8x : o (OE (x) ) P (ff (x))) If OE holds, ff is allowed to occur.
References-found: 23

