URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/Papers/view-main.ps
Refering-URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/allpapers.html
Root-URL: http://www.research.digital.com
Title: A Logical View of Composition and Refinement  
Author: Martin Abadi Gordon D. Plotkin 
Abstract: We define two logics of safety specifications for reactive systems. The logics provide a setting for the study of composition and refinement rules, and a framework for the use of the modular specification methods that these rules underpin. The two logics arise naturally from extant specification approaches; one of the logics is intuitionistic, while the other one is linear. 
Abstract-found: 1
Intro-found: 1
Reference: [Abr79] <author> K. Abrahamson. </author> <title> Modal logic of concurrent nondeterministic programs. </title> <booktitle> In International Symposium on Semantics of Concurrent Computation, </booktitle> <address> Evian-les-Baines, </address> <month> July </month> <year> 1979. </year>
Reference-contexts: This work was completed while at Digital Equipment Corporation. 0 In the linear logic, a specification is a set of allowed processes, much as in the sense of Abraham-son <ref> [Abr79] </ref>. Composition rules and refinement rules typically apply to safety properties, and also, sometimes with significant complication, to certain liveness properties. Here we treat only safety properties. With this restriction, the logics provide a new understanding of some current specification methods, and suggest extensions.
Reference: [Abr89] <author> Samson Abramsky. </author> <title> Domain theory in logical form. </title> <journal> Annals of Pure and Applied Logic, </journal> <year> 1989. </year>
Reference-contexts: It reads: N ` M [g (y)=x] As we consider only safety properties, which are closed sets, we obtain an intuitionistic logic. In this we follow Hennessy and Plotkin [HP89] and, less directly, Abramsky with his proposal of a general logic of open sets <ref> [Abr89] </ref>. Parallel composition can be represented by conjunction, as in works of Lamport and Pnueli. Dam [Dam88] and Abramsky [Vic88] pointed out that in general parallelism will give extra, quantalic structure.
Reference: [AL88] <author> Martin Abadi and Leslie Lamport. </author> <title> The existence of refinement mappings. </title> <type> Research Report 29, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <year> 1988. </year> <note> To appear in Theoretical Computer Science. A preliminary version appeared in Proceedings of the Third Annual Symposium on Logic In Computer Science, pages 165-177, </note> <institution> IEEE Computer Society, Edinburgh, </institution> <address> Scotland, </address> <month> July </month> <year> 1988. </year>
Reference-contexts: The function g is known as a refinement mapping. For specifications of special forms, the basic refinement mappings have been complemented by the use of history and prophecy variables <ref> [AL88] </ref>, and they have been generalized to mul-tivalued mappings [LT87, Mer90]. In our logics, hiding is exactly existential quantification, and a simple refinement-mapping rule follows easily from the usual logical laws for quantifiers.
Reference: [AL90] <author> Martin Abadi and Leslie Lamport. </author> <title> Composing specifications. </title> <type> Research Report 66, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <year> 1990. </year> <note> A preliminary version appeared in [dBdRR90]. </note>
Reference-contexts: An assumption-guarantee specification states that a reactive system satisfies a specification M if it operates in an environment that satisfies an assumption E; this specification is sometimes written E ) M . A Composition Principle gives a way of combining assumption-guarantee specifications while discharging their assumptions <ref> [MC81, Pnu84, Sta85, AL90] </ref>. <p> Implication turns out to be a familiar and handy operation: E ! M is the set of all behaviors that satisfy M at least as long as they satisfy E. The connective ! has arisen in works on the Composition Principle (in <ref> [AL90] </ref>, and implicitly in [MC81] and [Pnu84]). Under reasonable hypotheses, the specifications E ) M and E ! M have the same implementations, and hence ) can be replaced with !. It is encouraging that the logical formulation naturally yields this connective. <p> and M 2 describe different processes. (The Principle is not sound otherwise, for example if M 1 and M 2 are the same.) Note how the logical approach obviates the need for explicit reference either to processes (as in [MC81, Pnu84]) or to the realizable parts of properties (as in <ref> [AL90] </ref>). Many variants of the Composition Principle can be treated in this framework; for example, we easily obtain: E ^ M 2 ` E 1 E ^ M 1 ` E 2 where M 1 / 1 , M 2 / 2 , and 1 and 2 are disjoint. <p> If E and M are facts, then E M = (E + " M ? ) ? and the expected Composition Principle follows. 3 Intuitionistic Logic The model that underlies the intuitionistic logic is a small variant of that in <ref> [AL90] </ref>; we refer the reader to this and previous works for additional motivation. We assume given a nonempty set of states, S, and a nonempty set of agents, A. These sets are disjoint. <p> The set of all behaviors is denoted by B. A safety property is a set of behaviors closed under prefixes. The set of all safety properties is denoted by S b . Safety properties, as we have defined them, are isomorphic to the safety properties of <ref> [AL90] </ref>, for example, with the caveat that we have not yet treated invariance under stuttering. It is quite natural, and desirable, to add a straightforward condition of in-variance under stuttering to our definitions, as first advocated by Lamport [Lam83b]. For simplicity, we do not do so at this point.
Reference: [AV90] <author> Samson Abramsky and Steve Vickers. Quantales, </author> <title> observational logic, and process semantics. </title> <type> Technical report, </type> <institution> Imperial College, </institution> <month> January </month> <year> 1990. </year>
Reference-contexts: This indeed happens when we take specifications to be sets of processes, and then the logic of specifications is linear. Our work may yield some evidence for the relevance of linear logic to concurrency. Other evidence can be found in work on Petri Nets (e.g., [MOM89]) and testing equivalence <ref> [AV90] </ref>. We introduce our logics in the following overview. Sections 3, 4, and 5 give formal definitions and develop the material further. The usual intuitionis-tic and linear logics need to be enriched in order to support the assumption-guarantee specification style.
Reference: [BKP84] <author> Howard Barringer, Ruurd Kuiper, and Amir Pnueli. </author> <title> Now you may compose temporal logic specifications. </title> <booktitle> In Sixteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 51-63. </pages> <publisher> ACM, </publisher> <month> April </month> <year> 1984. </year>
Reference-contexts: In this paper, we define and develop such a logic. In fact two logics arise naturally. One of the logics is an intuitionistic logic, while the other one is linear [Gir87]. In the intuitionistic logic, a specification is a set of allowed behaviors, as in <ref> [Lam83a, BKP84] </ref>. fl Digital Equipment Corporation, Systems Research Center, 130 Lytton Avenue, Palo Alto, California 94301, USA. y Dept. of Computer Science, University of Edinburgh, King's Buildings, Edinburgh EH9 3JZ, UK.
Reference: [Dam88] <author> Mads Dam. </author> <title> Relevance logic and concurrent computation. </title> <booktitle> In Proceedings of the Third Symposium on Logic in Computer Science, </booktitle> <pages> pages 178-185. </pages> <publisher> IEEE, </publisher> <month> July </month> <year> 1988. </year>
Reference-contexts: In this we follow Hennessy and Plotkin [HP89] and, less directly, Abramsky with his proposal of a general logic of open sets [Abr89]. Parallel composition can be represented by conjunction, as in works of Lamport and Pnueli. Dam <ref> [Dam88] </ref> and Abramsky [Vic88] pointed out that in general parallelism will give extra, quantalic structure. This indeed happens when we take specifications to be sets of processes, and then the logic of specifications is linear. Our work may yield some evidence for the relevance of linear logic to concurrency.
Reference: [dBdRR90] <editor> J. W. de Bakker, W.-P. de Roever, and G. Rozenberg, editors. </editor> <title> Stepwise Refinement of Distributed Systems: Models, Formalism, Correctness, </title> <booktitle> volume 430 of Lecture Notes in Computer Science, </booktitle> <address> Berlin, 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: 1 Introduction Modular, hierarchical methods for specifying reactive systems [HP85] include rules for composing and refining specifications (e.g., <ref> [dBdRR90] </ref>). The form of the rules suggests a possible specification logic. In it, the propositions would be system specifications; the notations for combining specifications would become logical connectives; and the rules for composition and refinement would be formulated as sound inference rules.
Reference: [Dun86] <author> J. Michael Dunn. </author> <title> Relevance logic and entailment. </title> <editor> In D. Gabbay and F. Guen-thner, editors, </editor> <booktitle> Handbook of Philosophical Logic, </booktitle> <volume> volume 3, </volume> <pages> pages 117-224. </pages> <address> D. </address> <publisher> Rei-del Publishing Co., </publisher> <year> 1986. </year>
Reference-contexts: These properties of the additives, together with proposition 6, are interestingly reminiscent of the set-theoretic models of relevance logic <ref> [Dun86] </ref>. This concludes the definition of a model of classical linear logic. Actually, the model can be viewed in two ways, as a quantale of safety properties or as a phase space of processes.
Reference: [Gir87] <author> J.-Y. Girard. </author> <title> Linear logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 50 </volume> <pages> 1-102, </pages> <year> 1987. </year>
Reference-contexts: It should also provide a framework for developing specifications and for verifying them using these rules. In this paper, we define and develop such a logic. In fact two logics arise naturally. One of the logics is an intuitionistic logic, while the other one is linear <ref> [Gir87] </ref>. In the intuitionistic logic, a specification is a set of allowed behaviors, as in [Lam83a, BKP84]. fl Digital Equipment Corporation, Systems Research Center, 130 Lytton Avenue, Palo Alto, California 94301, USA. y Dept. of Computer Science, University of Edinburgh, King's Buildings, Edinburgh EH9 3JZ, UK.
Reference: [HP85] <author> David Harel and Amir Pnueli. </author> <title> On the development of reactive systems. </title> <editor> In K. R. Apt, editor, </editor> <booktitle> Logics and models of concurrent systems, volume F13 of NATO ASI Series, </booktitle> <pages> pages 477-498. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: 1 Introduction Modular, hierarchical methods for specifying reactive systems <ref> [HP85] </ref> include rules for composing and refining specifications (e.g., [dBdRR90]). The form of the rules suggests a possible specification logic.
Reference: [HP89] <author> Matthew Hennessy and Gordon Plotkin. </author> <title> Finite conjunctive nondeterminism. </title> <booktitle> In Petri Festschrift, </booktitle> <year> 1989. </year> <pages> Page 9 </pages>
Reference-contexts: It reads: N ` M [g (y)=x] As we consider only safety properties, which are closed sets, we obtain an intuitionistic logic. In this we follow Hennessy and Plotkin <ref> [HP89] </ref> and, less directly, Abramsky with his proposal of a general logic of open sets [Abr89]. Parallel composition can be represented by conjunction, as in works of Lamport and Pnueli. Dam [Dam88] and Abramsky [Vic88] pointed out that in general parallelism will give extra, quantalic structure.
Reference: [Joh82] <author> P. T. Johnstone. </author> <title> Stone Spaces. </title> <publisher> Cam--bridge University Press, </publisher> <address> Cambridge, </address> <year> 1982. </year>
Reference-contexts: Since we are concerned only with safety properties, we restrict attention to finite behaviors. A safety property is then a prefix-closed set of behaviors. In the logic, the propositions denote safety properties, and ` simply stands for . The collection of safety properties forms a complete Heyting algebra <ref> [Joh82] </ref> Page 2 and so the intuitionistic logical operations ^, _, and ! are available. The first two are intersection and union. Conjunction serves its usual logical role: a process p satisfies M ^M 0 if and only if it satisfies both M and M 0 .
Reference: [Lam83a] <author> Leslie Lamport. </author> <title> Specifying concurrent program modules. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 5(2) </volume> <pages> 190-222, </pages> <month> April </month> <year> 1983. </year>
Reference-contexts: In this paper, we define and develop such a logic. In fact two logics arise naturally. One of the logics is an intuitionistic logic, while the other one is linear [Gir87]. In the intuitionistic logic, a specification is a set of allowed behaviors, as in <ref> [Lam83a, BKP84] </ref>. fl Digital Equipment Corporation, Systems Research Center, 130 Lytton Avenue, Palo Alto, California 94301, USA. y Dept. of Computer Science, University of Edinburgh, King's Buildings, Edinburgh EH9 3JZ, UK.
Reference: [Lam83b] <author> Leslie Lamport. </author> <title> What good is temporal logic? In R. </title> <editor> E. A. Mason, editor, </editor> <booktitle> Information Processing 83: Proceedings of the IFIP 9th World Congress, </booktitle> <address> Paris, </address> <month> September </month> <year> 1983. </year> <title> IFIP, </title> <publisher> North Holland. </publisher>
Reference-contexts: It is quite natural, and desirable, to add a straightforward condition of in-variance under stuttering to our definitions, as first advocated by Lamport <ref> [Lam83b] </ref>. For simplicity, we do not do so at this point. The length joej of a behavior oe is the number of agents that occur in oe.
Reference: [Lam89] <author> Leslie Lamport. </author> <title> A simple approach to specifying concurrent systems. </title> <journal> Communications of the ACM, </journal> <volume> 32(1) </volume> <pages> 32-45, </pages> <month> Jan-uary </month> <year> 1989. </year>
Reference-contexts: Here we treat only safety properties. With this restriction, the logics provide a new understanding of some current specification methods, and suggest extensions. They are intended as a basis for Lamport's transition-axiom method for reactive systems <ref> [Lam89] </ref>. A reactive system can be expected to operate correctly only when its environment operates correctly. For example, a concurrent program module can be expected to exhibit desirable behavior only when its inputs are of the proper types. <p> Unfortunately, hidden variables can complicate the proof that one specification implements another, weaker specification. Various refinement rules have been proposed for these proofs; they are all based on instantiating internal variables. Logically, hiding is represented by existential quantification (e.g., <ref> [Lam89] </ref>). In order to prove that 9y:N implements 9x:M , one gives an instantiation g (y) for the variable x, and then proves that N implements M under this instantiation. The function g is known as a refinement mapping. <p> We apply this in (4) and get: Then combining this with (3) we obtain a refine ment rule: N ` M [g (y)=x] (5) There is an evident generalization to multiple quan tifications. Page 5 Refinement principles in the literature deal with properties of special forms. For example, in <ref> [Lam89] </ref>, these properties are given by an initial condition and a next-state relation (and a progress property, which relates only to liveness).
Reference: [Lam90] <author> Leslie Lamport. </author> <title> A temporal logic of actions. </title> <type> Research Report 57, </type> <institution> Digital Equipment Corporation Systems Research Center, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: For example, certain temporal operators are expressible in the language, and it would be quite natural to add abbreviations for them. Similarly, state machines can be coded and some syntax for them might be useful. We treat the calculus of behaviors first. As in <ref> [Lam90] </ref>, we assume a fixed first-order signature and assume that there are two kinds of first-order variables, primed and unprimed, with a one-to-one correspondence x $ x 0 between the two; these serve for writing actions. The unprimed variables are those used in section 3.2 above to define states.
Reference: [LT87] <author> Nancy Lynch and Mark Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <booktitle> In Proceedings of the Sixth Symposium on the Principles of Distributed Computing, </booktitle> <pages> pages 137-151. </pages> <publisher> ACM, </publisher> <month> August </month> <year> 1987. </year>
Reference-contexts: The function g is known as a refinement mapping. For specifications of special forms, the basic refinement mappings have been complemented by the use of history and prophecy variables [AL88], and they have been generalized to mul-tivalued mappings <ref> [LT87, Mer90] </ref>. In our logics, hiding is exactly existential quantification, and a simple refinement-mapping rule follows easily from the usual logical laws for quantifiers. It reads: N ` M [g (y)=x] As we consider only safety properties, which are closed sets, we obtain an intuitionistic logic.
Reference: [MC81] <author> Jayadev Misra and K. Mani Chandy. </author> <title> Proofs of networks of processes. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-7(4):417-426, </volume> <month> July </month> <year> 1981. </year>
Reference-contexts: An assumption-guarantee specification states that a reactive system satisfies a specification M if it operates in an environment that satisfies an assumption E; this specification is sometimes written E ) M . A Composition Principle gives a way of combining assumption-guarantee specifications while discharging their assumptions <ref> [MC81, Pnu84, Sta85, AL90] </ref>. <p> Implication turns out to be a familiar and handy operation: E ! M is the set of all behaviors that satisfy M at least as long as they satisfy E. The connective ! has arisen in works on the Composition Principle (in [AL90], and implicitly in <ref> [MC81] </ref> and [Pnu84]). Under reasonable hypotheses, the specifications E ) M and E ! M have the same implementations, and hence ) can be replaced with !. It is encouraging that the logical formulation naturally yields this connective. <p> 2 are disjoint The proviso expresses the requirement that M 1 and M 2 describe different processes. (The Principle is not sound otherwise, for example if M 1 and M 2 are the same.) Note how the logical approach obviates the need for explicit reference either to processes (as in <ref> [MC81, Pnu84] </ref>) or to the realizable parts of properties (as in [AL90]).
Reference: [Mer90] <author> M. Merritt. </author> <title> Completeness theorems for automata. </title> <editor> In J. W. de Bakker, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Stepwise Refinement of Distributed Systems: Models, Formalism, Correctness, </title> <booktitle> volume 430 of Lecture Notes in Computer Science, </booktitle> <pages> pages 544-560. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: The function g is known as a refinement mapping. For specifications of special forms, the basic refinement mappings have been complemented by the use of history and prophecy variables [AL88], and they have been generalized to mul-tivalued mappings <ref> [LT87, Mer90] </ref>. In our logics, hiding is exactly existential quantification, and a simple refinement-mapping rule follows easily from the usual logical laws for quantifiers. It reads: N ` M [g (y)=x] As we consider only safety properties, which are closed sets, we obtain an intuitionistic logic.
Reference: [MOM89] <author> Narciso Marti-Oliet and Jose Meseguer. </author> <title> From Petri nets to linear logic. </title> <type> Technical Report SRI-CSL-89-4R2, </type> <institution> SRI International, </institution> <month> December </month> <year> 1989. </year>
Reference-contexts: This indeed happens when we take specifications to be sets of processes, and then the logic of specifications is linear. Our work may yield some evidence for the relevance of linear logic to concurrency. Other evidence can be found in work on Petri Nets (e.g., <ref> [MOM89] </ref>) and testing equivalence [AV90]. We introduce our logics in the following overview. Sections 3, 4, and 5 give formal definitions and develop the material further. The usual intuitionis-tic and linear logics need to be enriched in order to support the assumption-guarantee specification style.
Reference: [Pnu84] <author> Amir Pnueli. </author> <title> In transition from global to modular temporal reasoning about programs. </title> <editor> In Krzysztof R. Apt, editor, </editor> <booktitle> Logics and Models of Concurrent Systems, NATO ASI Series, </booktitle> <pages> pages 123-144, </pages> <address> Berlin, </address> <month> October </month> <year> 1984. </year> <note> Springer-Verlag. </note>
Reference-contexts: An assumption-guarantee specification states that a reactive system satisfies a specification M if it operates in an environment that satisfies an assumption E; this specification is sometimes written E ) M . A Composition Principle gives a way of combining assumption-guarantee specifications while discharging their assumptions <ref> [MC81, Pnu84, Sta85, AL90] </ref>. <p> Implication turns out to be a familiar and handy operation: E ! M is the set of all behaviors that satisfy M at least as long as they satisfy E. The connective ! has arisen in works on the Composition Principle (in [AL90], and implicitly in [MC81] and <ref> [Pnu84] </ref>). Under reasonable hypotheses, the specifications E ) M and E ! M have the same implementations, and hence ) can be replaced with !. It is encouraging that the logical formulation naturally yields this connective. <p> 2 are disjoint The proviso expresses the requirement that M 1 and M 2 describe different processes. (The Principle is not sound otherwise, for example if M 1 and M 2 are the same.) Note how the logical approach obviates the need for explicit reference either to processes (as in <ref> [MC81, Pnu84] </ref>) or to the realizable parts of properties (as in [AL90]).
Reference: [Sta85] <author> Eugene W. Stark. </author> <title> A proof technique for rely/guarantee properties. </title> <editor> In S. N. Maheshwari, editor, </editor> <booktitle> Foundations of Software Technology and Theoretical Computer Science, volume 206 of Lecture Notes in Computer Science, </booktitle> <pages> pages 369-391, </pages> <address> Berlin, 1985. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: An assumption-guarantee specification states that a reactive system satisfies a specification M if it operates in an environment that satisfies an assumption E; this specification is sometimes written E ) M . A Composition Principle gives a way of combining assumption-guarantee specifications while discharging their assumptions <ref> [MC81, Pnu84, Sta85, AL90] </ref>.
Reference: [Vic88] <author> Steve Vickers. </author> <title> Samson Abramsky on linear process logics. </title> <booktitle> Foundation Workshop Notes, </booktitle> <month> October-November </month> <year> 1988. </year>
Reference-contexts: In this we follow Hennessy and Plotkin [HP89] and, less directly, Abramsky with his proposal of a general logic of open sets [Abr89]. Parallel composition can be represented by conjunction, as in works of Lamport and Pnueli. Dam [Dam88] and Abramsky <ref> [Vic88] </ref> pointed out that in general parallelism will give extra, quantalic structure. This indeed happens when we take specifications to be sets of processes, and then the logic of specifications is linear. Our work may yield some evidence for the relevance of linear logic to concurrency. <p> A process p passes a test q if p jj q succeeds. Note that p passes q if and only if q passes p, and there is no formal distinction between tester and testee. Abramsky has suggested related but opposite definitions in a CCS framework <ref> [Vic88] </ref>. He proposed taking ? as the set of processes that fail. Our choice of ?, the processes that do not fail, is more appropriate for a calculus of safety properties; in our model, Abramsky's ? is not left-closed. A negation-like connective ( ) ? is habitually defined from ?.
Reference: [Yet90] <author> David N. Yetter. </author> <title> Quantales and (noncommutative) linear logic. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 55(1) </volume> <pages> 41-64, </pages> <month> March </month> <year> 1990. </year> <pages> Page 10 </pages>
Reference-contexts: Proposition 3 (S p ; S ; 1; ) is a commutative quan-tale, where 1 = f*g. The associated quantalic implication is then given by It follows immediately that the algebra of safety specifications provides a model of intuitionistic linear logic <ref> [Yet90] </ref>. Parallel composition is the multiplicative conjunction operation, while ^ and _ are the additives. The exponential ! can be treated too, but it is not interesting: !M = 1 for all M 6= 0, and !0 = 0.
References-found: 25

