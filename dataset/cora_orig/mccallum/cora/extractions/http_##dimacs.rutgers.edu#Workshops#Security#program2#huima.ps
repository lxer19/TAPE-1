URL: http://dimacs.rutgers.edu/Workshops/Security/program2/huima.ps
Refering-URL: http://dimacs.rutgers.edu/Workshops/Security/program2/program.html
Root-URL: http://www.cs.rutgers.edu
Email: (antti.huima@hut.fi)  (tuomas.aura@hut.fi)  
Title: Using a Multimodal Logic to Express Conflicting Interests in Security Protocols  
Author: Antti Huima Tuomas Aura 
Date: July 25, 1997  
Address: Finland  
Affiliation: Helsinki University of Technology,  
Abstract: A lot of cryptographic protocols are designed to work in situations where the participants of the protocols have different, or even conflicting, interests. These conflicts must be taken into account when the protocols are developed in order to avoid pitfalls. More generally, it must be ensured that the rights of the different parties can be protected. Usually, the rights and protecting them are included in the underlying goals of a protocol. However, no formal method of examining them do exist. In this paper we propose a formal method that can be used to analyse situations involving conflicting interests and rights to be protected. The method is based on a standard multimodal logic S4n. With the logic, we formalize and validate reasoning done in protocol design. As an example we analyse a secret election protocol appeared in the literature.
Abstract-found: 1
Intro-found: 1
Reference: [BAN90] <author> Michael Burrows, Martin Abadi, and Roger Needham. </author> <title> A logic of authentication. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 8(1) </volume> <pages> 18-36, </pages> <month> February </month> <year> 1990. </year>
Reference-contexts: It may be possible to use the logic here in conjunction with existing authentication logics such as BAN <ref> [BAN90] </ref>. This is an area that should be examined. More case studies are needed in order to weight the usefulness of the method. Making proofs by hand is currently very cumbersome. Lemmas and more intuitive notation for certain commonly occurring clauses should be developed.
Reference: [Boo93] <author> George Boolos. </author> <title> The Logic of Provability. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: Tableaux-based proof methods are quite complicated to systematize, but exist however. 1 We append the postfix "to a third party" in order to clearly distinguish the concept from that of "real" logics of provability, such as GL. See e.g. <ref> [Boo93] </ref>. 2 From and fl infer fl. 3 From infer P p (). 4 Moreover, we will not refer to a semantic interpretation of the logic at all.
Reference: [Che80] <author> B.F. Chellas. </author> <title> Modal Logic: an Introduction. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1980. </year>
Reference-contexts: For example, ideas such as "necessarily true", "possibly true" and "known to be true" appear in the applications of modal logics. [Fit93] is a well-written introduction to basic modal logics. More classic works include <ref> [Che80, HC84] </ref>. A more thorough treatise of the theoritical aspects is found for instance in [HM92]. A propositional modal logic with only one modality is obtained from standard propositional calculus by adding to the language a unary operator 2 (pronounced "box"); it is the modality operator.
Reference: [FHMV95] <author> Ronald Fagin, Joseph Y. Halpern, Yoram Moses, and Moshe Y. Vardi. </author> <title> Reasoning about Knowledge, chapter Logical Omniscience. </title> <publisher> The MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: The problem of logical omniscience. This wording is used to refer to a difficulty that appears inevitably in logics like the one we use due to the Necessitation rule, though originally it refers to logics of knowledge <ref> [FHMV95] </ref>. Namely, if X is always true (it is, for example, a tautology), then we get using Necessitation (8p 2 P)[P p (X)]. In essence, all participants must be able to prove all universally true clauses to a third party, despite of the possible complexity of the proofs.
Reference: [Fit93] <author> Melvin Fitting. </author> <title> Basic modal logic. </title> <booktitle> In Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> volume 1, </volume> <pages> pages 365-448. </pages> <publisher> Oxford Science Publications, </publisher> <year> 1993. </year>
Reference-contexts: For example, ideas such as "necessarily true", "possibly true" and "known to be true" appear in the applications of modal logics. <ref> [Fit93] </ref> is a well-written introduction to basic modal logics. More classic works include [Che80, HC84]. A more thorough treatise of the theoritical aspects is found for instance in [HM92]. <p> to let C choose the vote to use from the many votes sent by the party instead. 5.2.2 First-order Modal Logic At this point we will begin to use first-order modal logic, i.e. add predicates and quantifiers to the previously propositionally based logic we have used. (We use rigid designators <ref> [Fit93] </ref>.) Incorporating predicate calculus into modal logics contains some subtleties due to the amount of choices available regarding to the interpretation of the semantics of the quantifiers. 5.2.3 Model We will use the following sets: I is the set of possible identification numbers, S is the set of possible secret identifications,
Reference: [HC84] <author> G.E. Hughes and M.J. Cresswell. </author> <title> A Companion to Modal Logic. </title> <publisher> Methuen and Co., </publisher> <address> London, </address> <year> 1984. </year>
Reference-contexts: For example, ideas such as "necessarily true", "possibly true" and "known to be true" appear in the applications of modal logics. [Fit93] is a well-written introduction to basic modal logics. More classic works include <ref> [Che80, HC84] </ref>. A more thorough treatise of the theoritical aspects is found for instance in [HM92]. A propositional modal logic with only one modality is obtained from standard propositional calculus by adding to the language a unary operator 2 (pronounced "box"); it is the modality operator.
Reference: [HM92] <author> J.Y. Halpern and Y. Moses. </author> <title> A guide to completeness and complexity for modal logics of knowledge and belief. </title> <journal> Artificial Intelligence, </journal> <volume> 54 </volume> <pages> 319-379, </pages> <year> 1992. </year>
Reference-contexts: For example, ideas such as "necessarily true", "possibly true" and "known to be true" appear in the applications of modal logics. [Fit93] is a well-written introduction to basic modal logics. More classic works include [Che80, HC84]. A more thorough treatise of the theoritical aspects is found for instance in <ref> [HM92] </ref>. A propositional modal logic with only one modality is obtained from standard propositional calculus by adding to the language a unary operator 2 (pronounced "box"); it is the modality operator. Different axioms can be given. Often these axioms reflect the interpretation of the modality. <p> The example proofs in this paper will be Hilbert-style. We will use short hand markings in our proofs and use well-established deduction rules in addition to the two basic deduction rules, Modus Ponens 2 and Necessitation 3 . 4 S4n is shown to be decidable in <ref> [HM92] </ref>. Tableaux-based proof methods are quite complicated to systematize, but exist however. 1 We append the postfix "to a third party" in order to clearly distinguish the concept from that of "real" logics of provability, such as GL.
Reference: [NSS91] <author> Hannu Nurmi, Arto Salomaa, and Lila Santean. </author> <title> Secret ballot elections in computer networks. </title> <journal> Computers & Security, </journal> <volume> 10(6) </volume> <pages> 553-560, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: This is exactly the situation discussed in Sec. 4.8. 5.2 Analysing the Two-Agency Secret Election Protocol We analyse a modified version [Sal96, Sch96] of the Two-Agency Secret Election Protocol, proposed originally by Salomaa et al. <ref> [NSS91, Sal91] </ref>. 5.2.1 Presenting the Protocol The protocol goes as follows. There are two agencies: one for legitimizating the voters (L) and another for computing the votes (C). We have also a voter (A). Step 1: A asks L for an identification number. <p> In the following we assume that L works honestly and correctly. Of course, if L were cheating voters could, for instance, get many identification numbers. This would break the whole system immediately. (L can be replaced by running an all-or-nothing-disclosure-of-secrets protocol with C <ref> [NSS91] </ref>.) Our analysis will concentrate on the rights of A, an individual voter. We also make the following minor modification to the protocol. If somebody tries to vote multiple times with the same identification number the first vote sent is the one registered by C in Step 5.
Reference: [Sal91] <author> Arto Salomaa. </author> <title> Verifying and recasting secret ballots in computer networks. </title> <editor> In H. Maurer, editor, </editor> <booktitle> New Results and New Trends in Computer Science, </booktitle> <pages> pages 283-289. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year> <note> Lecture Notes in Computer Science No. 555. </note>
Reference-contexts: This is exactly the situation discussed in Sec. 4.8. 5.2 Analysing the Two-Agency Secret Election Protocol We analyse a modified version [Sal96, Sch96] of the Two-Agency Secret Election Protocol, proposed originally by Salomaa et al. <ref> [NSS91, Sal91] </ref>. 5.2.1 Presenting the Protocol The protocol goes as follows. There are two agencies: one for legitimizating the voters (L) and another for computing the votes (C). We have also a voter (A). Step 1: A asks L for an identification number.
Reference: [Sal96] <author> Arto Salomaa. </author> <title> Public-Key Cryptography. </title> <publisher> Springer-Verlag, </publisher> <address> 2nd edition, </address> <year> 1996. </year>
Reference-contexts: Otherwise all requests of charge will be declared void", and similarly for the customer's paid bills. This is exactly the situation discussed in Sec. 4.8. 5.2 Analysing the Two-Agency Secret Election Protocol We analyse a modified version <ref> [Sal96, Sch96] </ref> of the Two-Agency Secret Election Protocol, proposed originally by Salomaa et al. [NSS91, Sal91]. 5.2.1 Presenting the Protocol The protocol goes as follows. There are two agencies: one for legitimizating the voters (L) and another for computing the votes (C). We have also a voter (A).
Reference: [Sch96] <author> B. Schneier. </author> <title> Applied Cryptography: Protocols, Algorithms, and Source Code in C. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, 2nd edition, </address> <year> 1996. </year> <month> 16 </month>
Reference-contexts: Otherwise all requests of charge will be declared void", and similarly for the customer's paid bills. This is exactly the situation discussed in Sec. 4.8. 5.2 Analysing the Two-Agency Secret Election Protocol We analyse a modified version <ref> [Sal96, Sch96] </ref> of the Two-Agency Secret Election Protocol, proposed originally by Salomaa et al. [NSS91, Sal91]. 5.2.1 Presenting the Protocol The protocol goes as follows. There are two agencies: one for legitimizating the voters (L) and another for computing the votes (C). We have also a voter (A).
References-found: 11

