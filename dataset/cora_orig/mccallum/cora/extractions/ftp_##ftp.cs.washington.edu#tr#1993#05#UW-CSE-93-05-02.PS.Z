URL: ftp://ftp.cs.washington.edu/tr/1993/05/UW-CSE-93-05-02.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Email: callison@cs.washington.edu  
Title: A Periodic Object Model for Real-Time Systems  
Author: H. Rebecca Callison 
Address: FR-35 Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering University of Washington,  
Abstract: Technical Report 93-05-02 May 1993 Abstract We introduce time-sensitive objects (TSO's), a data-oriented model for real-time systems. The TSO model imposes time constraints on object values through validity intervals and object histories. Periodic objects, a class of objects within the TSO model, are described in detail and compared with more traditional periodic processes. We identify advantages of periodic objects including greater scheduling independence, more opportunity for concurrency, and tolerance of timing faults. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abbott, Robert, and Hector Garcia-Molina, </author> <title> "Scheduling Real-Time Transactions: A Performance Evaluation," </title> <booktitle> Proc. of the 14th Int. Conf. on Very Large Databases, </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Palo Alto, CA, </address> <year> 1988, </year> <pages> pp. 1-12. </pages>
Reference-contexts: Weaker consistency models are necessary to permit the application to trade off timely external consistency with strict internal consistency. Where much work in real-time transactions and databases focuses on maximizing the number and/or value of transactions which complete by deadline using traditional correctness criteria, for example <ref> [1, 8, 9, 11, 24] </ref>, time-sensitive objects provide a framework for considering alternative decision rules and correctness criteria. Distributed Memory. Periodic objects may be viewed alternatively as a shared memory model.
Reference: [2] <author> Bihari, Thomas, Prabha Gopinath, and Karsten Schwan, </author> <title> "Object-Oriented Design of Real-Time Software," </title> <booktitle> Proc. of the Real-Time Systems Symposium, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <year> 1989, </year> <pages> pp. 194-201. </pages>
Reference-contexts: Data models which include limited validity intervals for data values have been proposed for at least two research systems: MARS [14] and CHAOS <ref> [2] </ref>. The MARS model requires that all data values be included in messages which have fixed validity times. For fault tolerance, data values which must persist for multiple intervals are broadcast as a new message in each validity interval.
Reference: [3] <author> Callison, H. Rebecca, </author> <title> "Time-Sensitive Objects: A Data-Oriented Approach to Real-time Systems Design," </title> <type> TR 91-08-11, </type> <institution> Dept. of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA, </address> <month> August, </month> <year> 1991. </year>
Reference-contexts: research that resulted in the periodic object concept is motivated by problems for which database concepts provide traditional answers: what techniques can guarantee the recoverability of consistent data even in the presence of system failures? Our earlier examination of the relationship between transaction processing, real-time databases, and time-sensitive objects in <ref> [3] </ref> cites the following issues with respect to use of transaction processing in real-time: (1) The temporal unpredictability of traditional concurrency control protocols conflict with the timing constraints of real-time systems. And (2) serializability is often too strong a correctness criterion for consistency in real-time systems.
Reference: [4] <author> Callison, H. Rebecca, </author> <title> "A Semantics for the Ideal Behavior of Time Sensitive Objects," </title> <note> in preparation. </note>
Reference-contexts: A mutable non-real-time object is representable within this classification hierarchy as a sporadic object whose current value may persist for an unbounded time. A model for the description of systems composed of TSOs is detailed in <ref> [4] </ref>, and a semantics for the interaction of objects within this model is presented. The remainder of this paper is limited to a discussion of periodic objects as a basis for comparison with periodic process oriented designs.
Reference: [5] <author> Chodrow, S.E., F. Jahanian, and M. Donner, </author> <title> "Run-time monitoring of real-time systems," </title> <booktitle> Proc. of the Real-Time Systems Symposium, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <year> 1990, </year> <pages> pp 74-83. </pages>
Reference-contexts: Timing fault detection has been an active research issue in real-time systems. Mechanisms for the expression and monitoring of constraints on program execution time have been widely investigated, e.g., in <ref> [5, 12, 16, 17, 21, 23] </ref>. These mechanisms in isolation provide only for timing error detection, and this detection is localized to the erroneous process where a timing exception is typically raised. No inherent assistance is provided for damage assessment, recovery, or return to service.
Reference: [6] <author> Feeley, Michael J., and Henry M. Levy, </author> <title> "Distributed Shared Memory with Versioned Objects," </title> <journal> ACM SIGPLAN Notices, </journal> <volume> Vol. 27, No. </volume> <booktitle> 10 (Proceedings of OOPSLA '92, </booktitle> <month> Oct. </month> <year> 1992), </year> <pages> pp. 247-262. </pages>
Reference-contexts: Distributed Memory. Periodic objects may be viewed alternatively as a shared memory model. Feeley and Levy <ref> [6] </ref> have argued that versioned distributed object memory as a programming model for distributed systems provides the benefits of simplified interprocess synchronization, increased concurrency, and latency hiding. Time-sensitive objects extend these benefits to the real-time domain.
Reference: [7] <author> Gheith, Ahmed, and Karsten Schwan, </author> <title> "CHAOS art : Support for Real-Time Atomic Transactions," </title> <booktitle> Proc. of the Fault Tolerant Computing Symposium, </booktitle> <year> 1989, </year> <pages> pp. 462-469. </pages>
Reference-contexts: Determination of adequate quality is made by the operating system rather than the user of the data. Archival history exists conceptually in MARS but mechanisms for access to archival data by real-time applications have not been elaborated. CHAOS researchers <ref> [7] </ref> describe the need for multiple, time-constrained value assignments to ob 15 jects, but no mechanisms are published for maintaining or selecting among these versions. Real-time databases. Periodic objects constitute a multi-version, timestamp-based database.
Reference: [8] <author> Haritsa, Jayant R., Michael J. Carey, and Miron Livny, </author> <title> "Dynamic Real-Time Optimistic Concurrency Control," </title> <booktitle> Proc. of the Real-Time Systems Symposium, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <year> 1990, </year> <pages> pp. 94-103. </pages>
Reference-contexts: Weaker consistency models are necessary to permit the application to trade off timely external consistency with strict internal consistency. Where much work in real-time transactions and databases focuses on maximizing the number and/or value of transactions which complete by deadline using traditional correctness criteria, for example <ref> [1, 8, 9, 11, 24] </ref>, time-sensitive objects provide a framework for considering alternative decision rules and correctness criteria. Distributed Memory. Periodic objects may be viewed alternatively as a shared memory model.
Reference: [9] <author> Haritsa, J.R., M. Livny, and M.J. Carey, </author> <title> "Earliest Deadline Scheduling for Real-Time Database Systems," </title> <booktitle> Proc. of the Real-Time Systems Symp., IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <year> 1991, </year> <pages> pp. 232-242. </pages>
Reference-contexts: Weaker consistency models are necessary to permit the application to trade off timely external consistency with strict internal consistency. Where much work in real-time transactions and databases focuses on maximizing the number and/or value of transactions which complete by deadline using traditional correctness criteria, for example <ref> [1, 8, 9, 11, 24] </ref>, time-sensitive objects provide a framework for considering alternative decision rules and correctness criteria. Distributed Memory. Periodic objects may be viewed alternatively as a shared memory model.
Reference: [10] <author> Herlihy, Maurice P., and Jeannette M. Wing, </author> <title> "Linearizability: A Correctness Condition for Concurrent Objects," </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 12, No. </volume> <month> 3 (July </month> <year> 1990), </year> <pages> pp. 463-492. </pages>
Reference-contexts: To achieve predictable execution times, reads to current and historical data should never be delayed, implying that the use of locking protocols and/or critical sections is inappropriate for concurrency control. 4 Periodic objects are assumed to be non-blocking and linearizable <ref> [10] </ref>, guaranteeing that (1) some process makes progress in a finite number of steps and (2) that the result of each operation becomes visible atomically at some instant in time between its initiation and completion.
Reference: [11] <author> Huang, J., J.A. Stankovic, K. Ramaritham, and D. Towsley, </author> <title> "On Using Priority Inheritance in Real-Time Databases," </title> <booktitle> Proc. of the Real-Time Systems Symp., IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <year> 1991, </year> <pages> pp. 210-221. </pages>
Reference-contexts: Weaker consistency models are necessary to permit the application to trade off timely external consistency with strict internal consistency. Where much work in real-time transactions and databases focuses on maximizing the number and/or value of transactions which complete by deadline using traditional correctness criteria, for example <ref> [1, 8, 9, 11, 24] </ref>, time-sensitive objects provide a framework for considering alternative decision rules and correctness criteria. Distributed Memory. Periodic objects may be viewed alternatively as a shared memory model.
Reference: [12] <author> Ishikawa, Yutaka, Hideyuki Tokuda, and Clifford W. Mercer, </author> <title> "Object-Oriented Real-Time Language Design: Constructs for Timing Constraints," </title> <journal> SIGPLAN Notices, </journal> <volume> Vol. 25, No. </volume> <booktitle> 10 (Proc. of OOPSLA ECOOP '90, </booktitle> <month> Oct. </month> <year> 1990), </year> <pages> pp. 289-98. 18 </pages>
Reference-contexts: 1 Introduction Timing constraints for real-time systems are typically expressed with respect to processing, for example, period, release time, and deadline of a task, and delay <ref> [12, 16, 17] </ref>. These constraints are often applied in the context of designs based on periodic processing. Working with timing constraints only for processing, however, complicates some aspects of real-time system design. <p> Timing fault detection has been an active research issue in real-time systems. Mechanisms for the expression and monitoring of constraints on program execution time have been widely investigated, e.g., in <ref> [5, 12, 16, 17, 21, 23] </ref>. These mechanisms in isolation provide only for timing error detection, and this detection is localized to the erroneous process where a timing exception is typically raised. No inherent assistance is provided for damage assessment, recovery, or return to service.
Reference: [13] <author> Kenny, K.B., and K.-J. Lin, </author> <title> "Structuring large real-time systems with performance polymor--phism," </title> <booktitle> Proc. of the Real-Time Systems Symposium, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1990, </year> <pages> pp. 238-46. </pages>
Reference-contexts: The results of a lower quality computation are discarded and the computation abandoned rather than overwrite a higher quality result. Allowing multiple periodic updates provides a structure for implementing concepts like imprecise computation [18, 20] and performance polymorphism <ref> [13] </ref>. Because quality information is available to the object's clients, the application can decide if the value read is sufficiently accurate to be of use. The concurrency available from non-blocking objects can be further exploited by allowing asynchronous updates to execute concurrently with periodic updates.
Reference: [14] <author> Kopetz, Hermann, Andreas Damm, Christian Koza, Marco Mulazzani, Wolfgang Schwabl, Christoph Senft, and Ralph Zainlinger, </author> <title> "Distributed Fault-Tolerant Real-Time Systems: The Mars Approach," </title> <journal> IEEE Micro, </journal> <volume> Vol. 9, No. </volume> <month> 1 (February </month> <year> 1989), </year> <pages> pp. 25-40. </pages>
Reference-contexts: Data models which include limited validity intervals for data values have been proposed for at least two research systems: MARS <ref> [14] </ref> and CHAOS [2]. The MARS model requires that all data values be included in messages which have fixed validity times. For fault tolerance, data values which must persist for multiple intervals are broadcast as a new message in each validity interval.
Reference: [15] <author> Kuo, T.-W., and A.K. Mok, </author> <title> "Application Semantics and Concurrency Control of Real-Time Data-Intensive Applications," </title> <booktitle> Proc. of the Real-Time Systems Symposium, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <year> 1992, </year> <month> pp.35-45. </month>
Reference-contexts: We have recently developed correctness criteria for the concurrent execution of asynchronous and periodic updates in a system of time-sensitive objects. These correctness criteria build on the work of Pu and Leff on epsilon-serializability [22] and Kuo and Mok's application of this work to real-time systems <ref> [15] </ref>. A simulation of the model is being built in parallel with model development. The simulation system is intended as a testbed for evaluating the completeness and effectiveness of the model by demonstrating the capability to describe and simulate significant real-time systems.
Reference: [16] <author> Lee, Insup, and Vijay Gehlot, </author> <title> "Language Constructs for Distributed Real-Time Programming," </title> <booktitle> Proc. of the Real-Time Systems Symposium, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <year> 1985, </year> <pages> pp. 57-66. </pages>
Reference-contexts: 1 Introduction Timing constraints for real-time systems are typically expressed with respect to processing, for example, period, release time, and deadline of a task, and delay <ref> [12, 16, 17] </ref>. These constraints are often applied in the context of designs based on periodic processing. Working with timing constraints only for processing, however, complicates some aspects of real-time system design. <p> Timing fault detection has been an active research issue in real-time systems. Mechanisms for the expression and monitoring of constraints on program execution time have been widely investigated, e.g., in <ref> [5, 12, 16, 17, 21, 23] </ref>. These mechanisms in isolation provide only for timing error detection, and this detection is localized to the erroneous process where a timing exception is typically raised. No inherent assistance is provided for damage assessment, recovery, or return to service.
Reference: [17] <author> Lin, K.-J., and S. Natarajan, </author> <title> "Expressing and Maintaining Timing Constraints in Flex," </title> <booktitle> Proc. of the Real-Time Systems Symposium, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <year> 1988, </year> <pages> pp. 96-105. </pages>
Reference-contexts: 1 Introduction Timing constraints for real-time systems are typically expressed with respect to processing, for example, period, release time, and deadline of a task, and delay <ref> [12, 16, 17] </ref>. These constraints are often applied in the context of designs based on periodic processing. Working with timing constraints only for processing, however, complicates some aspects of real-time system design. <p> Timing fault detection has been an active research issue in real-time systems. Mechanisms for the expression and monitoring of constraints on program execution time have been widely investigated, e.g., in <ref> [5, 12, 16, 17, 21, 23] </ref>. These mechanisms in isolation provide only for timing error detection, and this detection is localized to the erroneous process where a timing exception is typically raised. No inherent assistance is provided for damage assessment, recovery, or return to service.
Reference: [18] <author> Lin, K.-J., S. Natarajan, and J.W.S. Liu, </author> <title> "Imprecise Results: Utilizing Partial Computations in Real-Time Systems," </title> <booktitle> Proc. of the Real-Time Systems Symposium, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <year> 1987, </year> <pages> pp. 210-217. </pages>
Reference-contexts: Including quality comparison in the validation step of a projection ensures this characteristic. The results of a lower quality computation are discarded and the computation abandoned rather than overwrite a higher quality result. Allowing multiple periodic updates provides a structure for implementing concepts like imprecise computation <ref> [18, 20] </ref> and performance polymorphism [13]. Because quality information is available to the object's clients, the application can decide if the value read is sufficiently accurate to be of use. The concurrency available from non-blocking objects can be further exploited by allowing asynchronous updates to execute concurrently with periodic updates.
Reference: [19] <author> Lin, Yi, and Sang H. Son, </author> <title> "Concurrency Control in Real-Time Databases by Dynamic Adjustment of Serialization Order," </title> <booktitle> Proc.of the Real-Time Systems Symposium, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <year> 1990, </year> <pages> pp. 104-112. </pages>
Reference: [20] <author> Liu, J.W.S., K.-J. Lin, W.-K. Shih, A. C.-S. Yu, J.-Y. Chung, and W. Zhao, </author> <title> "Algorithms for Scheduling Imprecise Computations," </title> <journal> IEEE Computer, </journal> <volume> Vol. 24, No. </volume> <month> 5 (May </month> <year> 1991), </year> <pages> pp. 58-68. </pages>
Reference-contexts: Including quality comparison in the validation step of a projection ensures this characteristic. The results of a lower quality computation are discarded and the computation abandoned rather than overwrite a higher quality result. Allowing multiple periodic updates provides a structure for implementing concepts like imprecise computation <ref> [18, 20] </ref> and performance polymorphism [13]. Because quality information is available to the object's clients, the application can decide if the value read is sufficiently accurate to be of use. The concurrency available from non-blocking objects can be further exploited by allowing asynchronous updates to execute concurrently with periodic updates.
Reference: [21] <author> Liu, L.Y., and R.K. Shyamasunder, </author> <title> "Exception Handling in RT-CDL," </title> <journal> Computer Languages, </journal> <volume> Vol. 15, No. 3 (1990), </volume> <pages> pp. 177-192 </pages>
Reference-contexts: Timing fault detection has been an active research issue in real-time systems. Mechanisms for the expression and monitoring of constraints on program execution time have been widely investigated, e.g., in <ref> [5, 12, 16, 17, 21, 23] </ref>. These mechanisms in isolation provide only for timing error detection, and this detection is localized to the erroneous process where a timing exception is typically raised. No inherent assistance is provided for damage assessment, recovery, or return to service.
Reference: [22] <author> Pu, C. and A. Leff, "Epsilon-Serializability," </author> <type> TR CUCS-054-90, </type> <institution> Dept. of Computer Science, Columbia University, </institution> <year> 1991. </year>
Reference-contexts: We have recently developed correctness criteria for the concurrent execution of asynchronous and periodic updates in a system of time-sensitive objects. These correctness criteria build on the work of Pu and Leff on epsilon-serializability <ref> [22] </ref> and Kuo and Mok's application of this work to real-time systems [15]. A simulation of the model is being built in parallel with model development.
Reference: [23] <author> Raju, S.C.V., R. Rajkumar, and F. Jahanian, </author> <title> "Monitoring Timing Constraints in Distributed Real-Time Systems, </title> <booktitle> Proc. of the Real-Time Systems Symposium, IEEE Comp. </booktitle> <publisher> Soc. Press, </publisher> <year> 1992, </year> <pages> 57-67. </pages>
Reference-contexts: Timing fault detection has been an active research issue in real-time systems. Mechanisms for the expression and monitoring of constraints on program execution time have been widely investigated, e.g., in <ref> [5, 12, 16, 17, 21, 23] </ref>. These mechanisms in isolation provide only for timing error detection, and this detection is localized to the erroneous process where a timing exception is typically raised. No inherent assistance is provided for damage assessment, recovery, or return to service.
Reference: [24] <author> Sha, Lui, Ragunathan Rajkumar, and John P. Lehoczky, </author> <title> "Concurrency Control for Distributed Real-Time Databases," </title> <booktitle> SIGMOD RECORD, </booktitle> <volume> Vol. 17, </volume> <month> No.1 (March </month> <year> 1988), </year> <pages> pp. 82-98. 19 </pages>
Reference-contexts: Weaker consistency models are necessary to permit the application to trade off timely external consistency with strict internal consistency. Where much work in real-time transactions and databases focuses on maximizing the number and/or value of transactions which complete by deadline using traditional correctness criteria, for example <ref> [1, 8, 9, 11, 24] </ref>, time-sensitive objects provide a framework for considering alternative decision rules and correctness criteria. Distributed Memory. Periodic objects may be viewed alternatively as a shared memory model.
References-found: 24

