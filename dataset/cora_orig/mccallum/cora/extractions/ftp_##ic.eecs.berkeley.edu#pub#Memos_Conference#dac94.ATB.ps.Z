URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/dac94.ATB.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/serdar/publications/index.html
Root-URL: 
Email: Email: fadnan,serdar,braytong@cs.berkeley.edu  
Title: BDD Variable Ordering for Interacting Finite State Machines  
Author: Adnan Aziz Serdar Ta~sran Robert K. Brayton 
Address: Berkeley, CA 94720, USA  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California,  
Abstract: We address the problem of obtaining good variable orderings for the BDD representation of a system of interacting finite state machines (FSMs). Orderings are derived from the communication structure of the system. Communication complexity arguments are used to prove upper bounds on the size of the BDD for the transition relation of the product machine in terms of the communication graph, and optimal orderings are exhibited for a variety of regular systems. Based on the bounds we formulate algorithms for variable ordering. We perform reached state analysis on a number of standard verification benchmarks to test the effectiveness of our ordering strategy; experimental results demonstrate the efficacy of our approach. The algorithms described in this paper have been implemented in HSIS, a hierarchical synthesis and verification tool currently under development at Berkeley. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Z. Manna and A. Pneuli, </author> <title> "Verification of Concurrent Programs: The Temporal Framework," in The Correctness Problem in Computer Science (R. </title> <editor> S. Boyer and J. S. Moore, eds.), </editor> <booktitle> Int. Lecture Series in Computer Science, </booktitle> <pages> pp. 215-273, </pages> <address> London: </address> <publisher> Academic Press, </publisher> <year> 1981. </year>
Reference-contexts: 1 Introduction Verification of a design is typically done by modelling it as a finite state machine. Properties to be verified can be specified in a temporal logic <ref> [1] </ref>, or by a task automaton [2]. Verification algorithms proceed by performing some form of traversal of the state transition graph [3]. Large designs arising in practice are invariably the product of small interacting finite state machines.
Reference: [2] <author> Z. Har'El and R. P. Kurshan, </author> <title> "Software for Analytical Development of Communication Protocols," </title> <journal> AT&T Technical Journal, </journal> <pages> pp. 45-59, </pages> <month> Jan. </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Verification of a design is typically done by modelling it as a finite state machine. Properties to be verified can be specified in a temporal logic [1], or by a task automaton <ref> [2] </ref>. Verification algorithms proceed by performing some form of traversal of the state transition graph [3]. Large designs arising in practice are invariably the product of small interacting finite state machines. Industrial experience indicates that the largest component machines rarely have more than a hundred states [4].
Reference: [3] <author> J. R. Burch, E. M. Clarke, K. L. McMillan, and D. L. Dill, </author> <title> "Symbolic Model Checking: 10 20 States and Beyond," </title> <journal> Information and Computation, </journal> <volume> vol. 98, no. 2, </volume> <pages> pp. 142-170, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Verification of a design is typically done by modelling it as a finite state machine. Properties to be verified can be specified in a temporal logic [1], or by a task automaton [2]. Verification algorithms proceed by performing some form of traversal of the state transition graph <ref> [3] </ref>. Large designs arising in practice are invariably the product of small interacting finite state machines. Industrial experience indicates that the largest component machines rarely have more than a hundred states [4]. <p> The quantification ordering problem arises in various contexts, including performing reached state analysis <ref> [3, 8] </ref> and composition of combinational relations [19], and is defined as follows: Given BDDs for a set of terms T 1 ; T 2 ; : : : ; T n and variables x 1 ; x 2 ; : : : ; x k , efficiently compute the following
Reference: [4] <author> G. </author> <title> York. </title> <type> Personal communication, </type> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: Verification algorithms proceed by performing some form of traversal of the state transition graph [3]. Large designs arising in practice are invariably the product of small interacting finite state machines. Industrial experience indicates that the largest component machines rarely have more than a hundred states <ref> [4] </ref>.
Reference: [5] <author> O. Gr umberg and D. E. </author> <title> Long, "Model Checking and Modular Verification," </title> <booktitle> in Proc. of CONCUR '91: 2nd Inter. Conf. on Concurrency Theory (J. </booktitle> <editor> C. M. Baeten and J. F. Groote, eds.), </editor> <volume> vol. </volume> <booktitle> 527 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: Large designs arising in practice are invariably the product of small interacting finite state machines. Industrial experience indicates that the largest component machines rarely have more than a hundred states [4]. However forming the product machine leads to the state explosion problem <ref> [5, 6] </ref>; given n Finite State Machines (FSMs) fM 1 ; M 2 ; : : : ; M n g, the number of states in the product machine is the product of the number of states in each individual machine.
Reference: [6] <author> A. Aziz and R. K. Brayton, </author> <title> "Verifying Interacting Finite State Machines," </title> <type> Tech. Rep. </type> <institution> UCB/ERL M93/52, Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: Large designs arising in practice are invariably the product of small interacting finite state machines. Industrial experience indicates that the largest component machines rarely have more than a hundred states [4]. However forming the product machine leads to the state explosion problem <ref> [5, 6] </ref>; given n Finite State Machines (FSMs) fM 1 ; M 2 ; : : : ; M n g, the number of states in the product machine is the product of the number of states in each individual machine.
Reference: [7] <author> R. Bryant, </author> <title> "Graph-based Algorithms for Boolean Function Manipulation," </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. C-35, </volume> <pages> pp. 677-691, </pages> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: As a result algorithms that explicitly operate on the state space of the product machine may have exponential time and space complexity. A Binary Decision Diagram (BDD) <ref> [7] </ref> is a graph based data structure used for representing logic functions. It can be used to represent the transition relation of a binary encoded sequential machine implicitly by forming the corresponding characteristic function [8, 9].
Reference: [8] <author> H. Touati, H. Savoj, B. Lin, R. K. Brayton, and A. L. Sangiovanni-Vincentelli, </author> <title> "Implicit State Enumeration of Finite State Machines using BDD's," </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 130-133, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: A Binary Decision Diagram (BDD) [7] is a graph based data structure used for representing logic functions. It can be used to represent the transition relation of a binary encoded sequential machine implicitly by forming the corresponding characteristic function <ref> [8, 9] </ref>. This representation can capture the regularity in the transition structure of the machine, and its canonicality makes it very useful in fixed point calculations. BDDs are now routinely used in formal verification [10, 11]. <p> However our experimental results indicate the orderings we obtain work well in reached state computations. Furthermore, dynamic variable reordering can be used if the BDDs for the reached state sets become unwieldy. Previous work in this area deals with ordering strategies for combinational [14] and sequential logic circuits <ref> [8, 15] </ref>. Touati [8] suggests deriving an ordering on the next state variables first using a heuristic based on minimizing the cumulative variable support of the latches. <p> Furthermore, dynamic variable reordering can be used if the BDDs for the reached state sets become unwieldy. Previous work in this area deals with ordering strategies for combinational [14] and sequential logic circuits [8, 15]. Touati <ref> [8] </ref> suggests deriving an ordering on the next state variables first using a heuristic based on minimizing the cumulative variable support of the latches. <p> We prove upper bounds on the BDD size in terms of communication graph parameters. We characterize a large variety of interconnect structures for which asymptotically optimum orderings are derived. We also discuss interleaved orderings, and compare our approach with that of <ref> [8] </ref>. In section 3, we propose various algorithms based on these bounds for the variable ordering problem. In section 4 we present some results based on these algorithms. <p> The quantification ordering problem arises in various contexts, including performing reached state analysis <ref> [3, 8] </ref> and composition of combinational relations [19], and is defined as follows: Given BDDs for a set of terms T 1 ; T 2 ; : : : ; T n and variables x 1 ; x 2 ; : : : ; x k , efficiently compute the following
Reference: [9] <author> O. Coudert and J. C. Madre, </author> <title> "A Unified Framework for the Formal Verification of Sequential Circuits," </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 126-129, </pages> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: A Binary Decision Diagram (BDD) [7] is a graph based data structure used for representing logic functions. It can be used to represent the transition relation of a binary encoded sequential machine implicitly by forming the corresponding characteristic function <ref> [8, 9] </ref>. This representation can capture the regularity in the transition structure of the machine, and its canonicality makes it very useful in fixed point calculations. BDDs are now routinely used in formal verification [10, 11].
Reference: [10] <author> K. L. McMillan, </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1993. </year>
Reference-contexts: This representation can capture the regularity in the transition structure of the machine, and its canonicality makes it very useful in fixed point calculations. BDDs are now routinely used in formal verification <ref> [10, 11] </ref>. The success of such algorithms depends critically on the size of the resulting BDD's which is very sensitive to the variable ordering chosen. <p> In this paper we address the variable ordering problem for building the transition relation of a set of interacting finite state machines. Using communication complexity [12], upper bounds on the size of the BDD for a specified ordering are derived. Similar results have been shown for combinational circuits in <ref> [13, 10] </ref> and our work was inspired by these. Indeed the transition relation for the product machine can be viewed as a logic circuit which takes the conjunction of the transition relations of the component machines, and the techniques of [10] yield upper bounds on the BDD size. <p> Similar results have been shown for combinational circuits in [13, 10] and our work was inspired by these. Indeed the transition relation for the product machine can be viewed as a logic circuit which takes the conjunction of the transition relations of the component machines, and the techniques of <ref> [10] </ref> yield upper bounds on the BDD size. We derive a stronger bound and our derivation differs significantly from that of [10]. <p> transition relation for the product machine can be viewed as a logic circuit which takes the conjunction of the transition relations of the component machines, and the techniques of <ref> [10] </ref> yield upper bounds on the BDD size. We derive a stronger bound and our derivation differs significantly from that of [10]. We stress that we obtain orderings that minimize the representation of the transition relation of the product machine, and as such may not be good for representations of the reached state sets, or equivalent state sets. <p> As shown in the original inspiration for our work <ref> [13, 10] </ref>, circuit structure can be used to bound the size of the BDDs for the outputs. As in the case of interacting FSMs, communication between gates can be analyzed to derive variable orderings that minimize the bound. We are investigating the correlation between the bound, and actual BDD size.
Reference: [11] <author> A. Aziz, F. Balarin, R. K. Brayton, S.-T. Cheng, R. Hojati, T. Kam, S. C. Krishnan, R. K. Ranjan, A. L. Sangiovanni-Vincentelli, T. R. Shiple, V. Singhal, S. Tasiran, and H.-Y. Wang, "HSIS: </author> <title> A BDD-Based Environment for Formal Verification," </title> <booktitle> in Proc. of the Design Automation Conf., </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: This representation can capture the regularity in the transition structure of the machine, and its canonicality makes it very useful in fixed point calculations. BDDs are now routinely used in formal verification <ref> [10, 11] </ref>. The success of such algorithms depends critically on the size of the resulting BDD's which is very sensitive to the variable ordering chosen.
Reference: [12] <author> J. E. Hopcroft and J. D. Ullman, </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison-Wesley, </publisher> <year> 1979. </year>
Reference-contexts: In this paper we address the variable ordering problem for building the transition relation of a set of interacting finite state machines. Using communication complexity <ref> [12] </ref>, upper bounds on the size of the BDD for a specified ordering are derived. Similar results have been shown for combinational circuits in [13, 10] and our work was inspired by these.
Reference: [13] <author> C. Berman, </author> <title> "Ordered Binary Decision Diagrams and Circuit Structure," </title> <booktitle> in Proc. Intl. Conf. on Computer Design, </booktitle> <month> Oct. </month> <year> 1989. </year>
Reference-contexts: In this paper we address the variable ordering problem for building the transition relation of a set of interacting finite state machines. Using communication complexity [12], upper bounds on the size of the BDD for a specified ordering are derived. Similar results have been shown for combinational circuits in <ref> [13, 10] </ref> and our work was inspired by these. Indeed the transition relation for the product machine can be viewed as a logic circuit which takes the conjunction of the transition relations of the component machines, and the techniques of [10] yield upper bounds on the BDD size. <p> As shown in the original inspiration for our work <ref> [13, 10] </ref>, circuit structure can be used to bound the size of the BDDs for the outputs. As in the case of interacting FSMs, communication between gates can be analyzed to derive variable orderings that minimize the bound. We are investigating the correlation between the bound, and actual BDD size.
Reference: [14] <author> S. Malik, A. R. Wang, R. K. Brayton, and A. Sangiovanni-Vincentelli, </author> <title> "Logic Verification using Binary Decision Diagrams in a Logic Synthesis Environment," </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 6-9, </pages> <month> Nov. </month> <year> 1988. </year>
Reference-contexts: However our experimental results indicate the orderings we obtain work well in reached state computations. Furthermore, dynamic variable reordering can be used if the BDDs for the reached state sets become unwieldy. Previous work in this area deals with ordering strategies for combinational <ref> [14] </ref> and sequential logic circuits [8, 15]. Touati [8] suggests deriving an ordering on the next state variables first using a heuristic based on minimizing the cumulative variable support of the latches. <p> The inputs and present state variables are interleaved with the next state variables; their ordering is derived by standard DFS ordering on the next state logic <ref> [14] </ref>. Jeong [15] gives efficient algorithms for finding BDD orderings based on the algebraic structure of the circuit. Another approach is based on dynamic ordering [16]. <p> Malik's heuristic <ref> [14] </ref> is used to order the supports of the f i ; supp (f i ) individually. Finally input and output variables are interleaved as follows: supp (f (1) ); y (1) ; : : : ; supp (f (n) S 1in1 supp (f (i) )); y (n) .
Reference: [15] <author> S.-W. Jeong, B. Plessier, G. D. Hachtel, and F. Somenzi, </author> <title> "Variable Ordering for FSM Traversal," </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <year> 1991. </year>
Reference-contexts: However our experimental results indicate the orderings we obtain work well in reached state computations. Furthermore, dynamic variable reordering can be used if the BDDs for the reached state sets become unwieldy. Previous work in this area deals with ordering strategies for combinational [14] and sequential logic circuits <ref> [8, 15] </ref>. Touati [8] suggests deriving an ordering on the next state variables first using a heuristic based on minimizing the cumulative variable support of the latches. <p> The inputs and present state variables are interleaved with the next state variables; their ordering is derived by standard DFS ordering on the next state logic [14]. Jeong <ref> [15] </ref> gives efficient algorithms for finding BDD orderings based on the algebraic structure of the circuit. Another approach is based on dynamic ordering [16].
Reference: [16] <author> R. Rudell, </author> <title> "Dynamic Variable Ordering for Binary Decision Diagrams," </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 42-47, </pages> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: Jeong [15] gives efficient algorithms for finding BDD orderings based on the algebraic structure of the circuit. Another approach is based on dynamic ordering <ref> [16] </ref>. In this the BDD package automatically invokes a reordering routine which seeks to minimize the total number of BDD nodes by permuting small sets of adjacent variables. All these approaches are largely heuristic and do not yield a priori bounds. <p> Our performance on reached state analysis for verification benchmarks further demonstrates the effectiveness of our approach. 6 Future Work The BDD variable ordering problem for combinational logic circuits still bears scope for further research: consider the recent results of <ref> [16, 18] </ref>. As shown in the original inspiration for our work [13, 10], circuit structure can be used to bound the size of the BDDs for the outputs. As in the case of interacting FSMs, communication between gates can be analyzed to derive variable orderings that minimize the bound.
Reference: [17] <author> A. Aziz, S. Tasiran, and R. K. Brayton, </author> <title> "BDD Variable Ordering for Interacting Finite State Machines," </title> <type> Tech. Rep. </type> <institution> UCB/ERL M93/71, Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: : : ; M (k) g to fM (k+1) ; : : : ; M (n) g r (k) = number of distinct bits communicated from fM (k+1) ; : : : ; M (n) g to fM (1) ; : : : ; M (k) g Proof: Refer to <ref> [17] </ref> for a detailed proof. <p> Details are available in <ref> [17] </ref>. 2.3 Interleaved Orderings Typically, communication within a machine is dense, ie each bit of the next state depends on all the present state bits, since otherwise the machine would have a trivial factorization. <p> All algorithms took only a few seconds to compute the ordering. The running time was negligible when compared to the time taken to read in the example and build the BDD. Note that Mesh20, which has high communication complexity (as shown in <ref> [17] </ref>) had a large BDD compared to Tree31 which has low communication complexity (as discussed in section 2.4). Also observe that Touati's heuristic does particularly badly on Tree31 and RT, corroborating the discussion of section 2.3.1. We also experimented with some interleaving, similar to that given by Touati's heuristic.
Reference: [18] <author> H. Fujii, G. Ootomo, and C. Hori, </author> <title> "Interleaving Variable Ordering Methods for Ordered Binary Decision Diagrams," </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pp. 38-41, </pages> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: Our performance on reached state analysis for verification benchmarks further demonstrates the effectiveness of our approach. 6 Future Work The BDD variable ordering problem for combinational logic circuits still bears scope for further research: consider the recent results of <ref> [16, 18] </ref>. As shown in the original inspiration for our work [13, 10], circuit structure can be used to bound the size of the BDDs for the outputs. As in the case of interacting FSMs, communication between gates can be analyzed to derive variable orderings that minimize the bound.
Reference: [19] <author> R. K. Brayton, M. Chiodo, R. Hojati, T. Kam, K. Kodandapani, R. P. Kurshan, S. Malik, A. L. Sangiovanni-Vincentelli, E. M. Sentovich, T. Shiple, K. J. Singh, and H.-Y. Wang, "BLIF-MV: </author> <title> An Interchange Format for Design Verification and Synthesis," </title> <type> Tech. Rep. </type> <institution> UCB/ERL M91/97, Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: The quantification ordering problem arises in various contexts, including performing reached state analysis [3, 8] and composition of combinational relations <ref> [19] </ref>, and is defined as follows: Given BDDs for a set of terms T 1 ; T 2 ; : : : ; T n and variables x 1 ; x 2 ; : : : ; x k , efficiently compute the following expression: T = 9x 1 ; x
References-found: 19

