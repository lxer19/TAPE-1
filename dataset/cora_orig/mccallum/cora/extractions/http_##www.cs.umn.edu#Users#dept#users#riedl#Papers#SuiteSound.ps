URL: http://www.cs.umn.edu/Users/dept/users/riedl/Papers/SuiteSound.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/riedl/Papers/
Root-URL: http://www.cs.umn.edu
Title: Continuous Media in Discrete Objects: Support for Collaborative Multimedia  
Author: John Riedl Vahid Mashayekhi 
Date: September 4, 1991  
Address: Minneapolis, MN  
Affiliation: Computer Science Department University of Minnesota  
Pubnum: (612)-624-7372  
Abstract: Keywords: Multimedia, Continuous Media, Digital Audio, Object-Oriented. fl We gratefully acknowledge the support of the National Science Foundation (grant number NSF=IRI 9015442) and the research funds of the Graduate School of the University of Minnesota. 
Abstract-found: 1
Intro-found: 1
Reference: [AEH88] <author> S.R. Ahuja, J. Ensor, and D. Horn. </author> <title> The Rapport multimedia conferencing system. </title> <booktitle> In Proceedings of Conference on Office Information Systems, </booktitle> <month> March </month> <year> 1988. </year>
Reference-contexts: There are many applications for multimedia flows in an object-oriented environment. Digital teleconferencing has already proven to be an effective way to hold meetings without traveling <ref> [Taz88, Sak90, AEH88] </ref>. Multimedia electronic mail systems, such as Diamond [FT82], ease communication between participants, especially those who are not used to using computers. At Lawrence Livermore Laboratories, researchers are building a collaborative notebook for physical scientists.
Reference: [BMRS89] <author> Bharat Bhargava, Enrique Mafla, John Riedl, and Bradley Sauder. </author> <title> Implementation and measurements of an efficient communication facility for distributed database systems. </title> <booktitle> In Proceedings of the 5th IEEE Data Engineering Conference, </booktitle> <address> Los Angeles, CA, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: Use a packet filter on a separate workstation attached to the same ethernet to measure the load caused by the sound packets. Computing requirements Measure the computing costs of live audio on modern workstations. In practice, much of the cost of communication is computation <ref> [BMRS89] </ref>. Since audio is most often used in support of other applications, it is important that it not put too much load on the system. Artificial delay Introduce artificial delay and see if the participants are able to follow the conversation after such a situation.
Reference: [BR89] <author> Bharat Bhargava and John Riedl. </author> <title> A model for adaptable systems for transaction processing. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <month> December </month> <year> 1989. </year>
Reference-contexts: We are working with Prasun Dewan and his research group at Purdue University to develop concurrency control techniques that support the entire range of collaborative activity, using adaptability techniques to change concurrency control techniques dynamically <ref> [BR89] </ref>. Part of that support is multimedia flows integrated with the objects in the system.
Reference: [Bro88] <author> Marc Brown. </author> <title> Groupware. </title> <booktitle> IEEE Computer, </booktitle> <month> May </month> <year> 1988. </year>
Reference-contexts: Distributed education is also possible, with students at remote sites seeing video images of the instructor, and participating in the class through sound transmitted back to the classroom. For instance, collaborative visualization tools will allow the students to interactively explore algorithms with their instructors <ref> [Bro88, TR91, HR91] </ref>. Digital audio will enable instructors to respond to questions verbally, rather than having to type replies. SuiteSound supports development of applications like these by integrating flexible, easy-to-use digital audio with a flexible, easy-to-use object-based system.
Reference: [Cla85] <author> D. Clark. </author> <title> The structuring of systems using upcalls. </title> <booktitle> In Proceedings of the 10th ACM symposium on operating systems principles, </booktitle> <month> December </month> <year> 1985. </year>
Reference-contexts: These method invocations from a sound object to an application filter are named callbacks because the method to be invoked is passed to another object, which "calls-back" the original object. Callbacks are similar to Swift's upcalls <ref> [Cla85] </ref> in that they are invocations from a lower layer of a protocol stack to a higher layer. Within an application, callbacks are used to pass the data from one filter to the next in the flow, until it arrives at the sink.
Reference: [CZ85] <author> David. R. Cheriton and W. Zwaenepoel. </author> <title> Distributed process groups in the V kernel. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(2) </volume> <pages> 77-107, </pages> <month> May </month> <year> 1985. </year>
Reference-contexts: To avoid this problem, our applications do not construct cyclic flows. For instance, the teleconf play and record objects are separate to avoid creating a false cycle. All of these problems would not exist in an operating system that supports multiple threads of control in each address space <ref> [CZ85, Ras86] </ref>. The fourth problem is that callback methods must be statically bound. For instance, when an object asks a SuiteSound record object to issue periodic callbacks, the name of the callback method is fixed at compile time. We work around this problem by using fixed names for callback procedures.
Reference: [DC91] <author> P. Dewan and R. Choudhary. </author> <title> Flexible user interface coupling in a collaborative system. </title> <booktitle> Proceedings of the ACM CHI's 91 Conference, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: Suite is a conventional object-based system with powerful tools for developing user interfaces that allow multiple users to manipulate distributed objects together <ref> [DV90, DC91] </ref>. This paper describes SuiteSound, a tool for manipulating multimedia flows, such as for digital audio, in Suite. Adding digital audio to Suite enhances distributed collaboration by helping participants work together more naturally. <p> Suite objects coexist with existing components of the operating system, 7 access conventional resources, and can be invoked by conventional processes <ref> [DC91] </ref>. Suite has an object compiler that takes object programs, scans and interprets the specification of an object module in the object program, and generates an interface file and RPC stubs.
Reference: [Dew90] <author> P. Dewan. </author> <title> A guide to Suite. </title> <type> Technical report, </type> <institution> SERC-TR-60-P, Software Engineering Research Center at Purdue Univesity, </institution> <month> February </month> <year> 1990. </year>
Reference-contexts: Therefore, before describing SuiteSound, Teleconf, and Annotator, we will give a brief overview of Suite. Suite is a software system designed and developed at Purdue University by Prasun De-wan and his research team <ref> [Dew90] </ref>. Suite supports remote procedure calls (RPC), active persistent data, and management of "direct manipulation" user interfaces.
Reference: [DMRT91] <author> J. Drake, V. Mashayekhi, J. Riedl, and W. Tsai. </author> <title> A Distributed Collaborative Software Inspection Tool: Design, Prototype, and Early Trial. </title> <type> Technical report, </type> <institution> TR-91-30, University of Minnesota, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: Adding digital audio to Suite enhances distributed collaboration by helping participants work together more naturally. Since SuiteSound is integrated with Suite, applications can use sound in the way that is most natural for them. For instance, Collaborative Software Inspection (CSI) <ref> [DMRT91] </ref> is a tool that supports distributed software inspections, using Suite for the software objects being inspected, and SuiteSound for audio ( section 4.3.). <p> We have designed and built a distributed collaborative software inspection, relaxing the requirement that all the participants be in the same room, providing automated support, and adding structure to the process. CSI allows geographically distributed participants to collaborate in the inspection and provides automated support for all inspection activities <ref> [DMRT91] </ref>. Participants communicate through CSI dialog managers, teleconf, and voice annotation. Teleconf tools. The asynchronous activities of software inspection include the distribution 18 19 of target material and the creation of reviewer's fault lists.
Reference: [DV90] <author> P. Dewan and E. Vasilik. </author> <title> An object model for conventional operating systems. </title> <booktitle> Usenix Computin Systems, </booktitle> <month> December </month> <year> 1990. </year>
Reference-contexts: Suite is a conventional object-based system with powerful tools for developing user interfaces that allow multiple users to manipulate distributed objects together <ref> [DV90, DC91] </ref>. This paper describes SuiteSound, a tool for manipulating multimedia flows, such as for digital audio, in Suite. Adding digital audio to Suite enhances distributed collaboration by helping participants work together more naturally. <p> Suite supports remote procedure calls (RPC), active persistent data, and management of "direct manipulation" user interfaces. A prototype of Suite has been implemented on top of UNIX, TCP/IP, NFS, and X <ref> [DV90] </ref>. 3.1.1 Object Model The Suite object model is an extension of UNIX allowing distributed, shared, protected, and persistent objects. Suite objects coexist with existing components of the operating system, 7 access conventional resources, and can be invoked by conventional processes [DC91].
Reference: [EG89] <author> C.A. Ellis and S.J. Gibbs. </author> <title> Concurrency control in groupware systems. </title> <booktitle> In Proceedings fo the ACM SIGMOD '89 Conference in Groupware systems, </booktitle> <month> May </month> <year> 1989. </year>
Reference-contexts: Floor control policies usually permit or deny access to all the objects in the collaboration simultaneously, conceptually controlling the entire "floor" at once. More general concurrency control policies separate the objects into domains that can be accessed individually <ref> [EG89] </ref>. There are three reasons to use floor control for on-line sound: listener overload, bandwidth, and more effective conferencing. Listener overload refers to the difficulty in understanding multiple sound sources simultaneously.
Reference: [EGR91] <author> C. Ellis, S. Gibbs, and G. Rein. </author> <title> Groupware. </title> <journal> Communications of the ACM, </journal> <month> January </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Computer Supported Collaborative Work (CSCW) is the study of methods for enhancing cooperation among computer users by providing tools that explicitly support interaction and the sharing of information <ref> [EGR91, Taz88] </ref>. Suite is a conventional object-based system with powerful tools for developing user interfaces that allow multiple users to manipulate distributed objects together [DV90, DC91]. This paper describes SuiteSound, a tool for manipulating multimedia flows, such as for digital audio, in Suite.
Reference: [FCB + 91] <author> J.W. Fickett, M.J. Cinkosky, C. Burks, P.E. Hempfner, D. Nelson, R.M. Pecherer, P. Sgro, D.M.Sorenson, R.D. Sutherland, and B.C. Yantis. </author> <title> Human Gnome Information Resource. </title> <type> Technical report, Obtained through personal communication, </type> <year> 1991. </year>
Reference-contexts: At Lawrence Livermore Laboratories, researchers are building a collaborative notebook for physical scientists. The scientists will be able to incorporate still images, live audio, and even live video in their notebooks, and readily share the notes with other researchers <ref> [FCB + 91] </ref>. Distributed education is also possible, with students at remote sites seeing video images of the instructor, and participating in the class through sound transmitted back to the classroom. For instance, collaborative visualization tools will allow the students to interactively explore algorithms with their instructors [Bro88, TR91, HR91].
Reference: [FT82] <author> H.C. Forsdick and R.H. Thomas. </author> <title> The design of Diamond: A distributed multimedia document system. </title> <type> Technical report, TR number 5402, </type> <institution> Bolt Beranek and Newman Inc., </institution> <month> October </month> <year> 1982. </year> <month> 24 </month>
Reference-contexts: There are many applications for multimedia flows in an object-oriented environment. Digital teleconferencing has already proven to be an effective way to hold meetings without traveling [Taz88, Sak90, AEH88]. Multimedia electronic mail systems, such as Diamond <ref> [FT82] </ref>, ease communication between participants, especially those who are not used to using computers. At Lawrence Livermore Laboratories, researchers are building a collaborative notebook for physical scientists. <p> The voice manager in the Etherphone system provides facilities for recording, editing, and playing stored voice [TS88]. The Diamond multimedia message system supports creating, editing, transmitting, printing, and managing multimedia documents. A document may contain various media such as text, graphics, images, and speech <ref> [FT82] </ref>. 1.2 Overview Our work extends previous research in four ways. First, SuiteSound provides an object-oriented interface for building applications that integrate multimedia with traditional objects. Second, our work supports multimedia flows with multiple sources and multiple sinks, and many different ways to merge or split the flows.
Reference: [HR91] <author> J.C. Hamlin and John Riedl. </author> <title> Visualize: Computer visualization of graph theory, </title> <month> March </month> <year> 1991. </year> <title> Undergraduate Research Opportunities Program, </title> <institution> University of Minnesota. </institution>
Reference-contexts: Distributed education is also possible, with students at remote sites seeing video images of the instructor, and participating in the class through sound transmitted back to the classroom. For instance, collaborative visualization tools will allow the students to interactively explore algorithms with their instructors <ref> [Bro88, TR91, HR91] </ref>. Digital audio will enable instructors to respond to questions verbally, rather than having to type replies. SuiteSound supports development of applications like these by integrating flexible, easy-to-use digital audio with a flexible, easy-to-use object-based system.
Reference: [NW90] <author> P. Nises and J. Wettby. Phonetalk. </author> <type> Technical report, </type> <institution> Royal Institue of Technology, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: PhoneTalk is a multiuser system that runs on Sun Sparc Stations. A daemon runs on each machine and informs 1 Prasun Dewan, Computer Sciences Department, Purdue University. pd@cs.purdue.edu. 2 John Riedl, Computer Science Department, University of Minnesota. riedl@cs.umn.edu. 3 receivers of the start of a session <ref> [NW90] </ref>. A similar system called Vtalk supports voice talk between two Sun Sparc Stations. PhoneTalk and Vtalk have demonstrated the feasibility of teleconferencing tools that support voice interaction for multi-user tasks. The MERMAID system is designed for decision-making with multiple remote participants [Sak90].
Reference: [Ras86] <author> Richard F. Rashid. </author> <title> Threads of a new system. </title> <journal> Unix Review, </journal> <volume> 4(8) </volume> <pages> 37-49, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: To avoid this problem, our applications do not construct cyclic flows. For instance, the teleconf play and record objects are separate to avoid creating a false cycle. All of these problems would not exist in an operating system that supports multiple threads of control in each address space <ref> [CZ85, Ras86] </ref>. The fourth problem is that callback methods must be statically bound. For instance, when an object asks a SuiteSound record object to issue periodic callbacks, the name of the callback method is fixed at compile time. We work around this problem by using fixed names for callback procedures.
Reference: [Sak90] <author> S. Sakata. </author> <title> Development and evaluation of an In-house multimedia desktop conef-erence. </title> <journal> IEEE journal on selected areas in communcations, </journal> <month> April </month> <year> 1990. </year>
Reference-contexts: There are many applications for multimedia flows in an object-oriented environment. Digital teleconferencing has already proven to be an effective way to hold meetings without traveling <ref> [Taz88, Sak90, AEH88] </ref>. Multimedia electronic mail systems, such as Diamond [FT82], ease communication between participants, especially those who are not used to using computers. At Lawrence Livermore Laboratories, researchers are building a collaborative notebook for physical scientists. <p> A similar system called Vtalk supports voice talk between two Sun Sparc Stations. PhoneTalk and Vtalk have demonstrated the feasibility of teleconferencing tools that support voice interaction for multi-user tasks. The MERMAID system is designed for decision-making with multiple remote participants <ref> [Sak90] </ref>. Data, voice, and video are transmitted using N-ISDN channels with 64Kpbs per channel. The voice and data use one B-channel and video the other. Users can talk freely, with voices mixed and transmitted to all users simultaneously. <p> However, Free mode puts considerable load on the machines and as the number of participants grows to more than three, the machines will be unable to keep up. We concur with other researchers that teleconferencing with no floor control is difficult with more than three participants <ref> [Sak90] </ref>. We are performing experiments to measure the load per user in free mode. We are also investigating extensions to free mode in which sound data representing relatively silent periods is not transmitted, reducing the load considerably.
Reference: [SFB + 87] <author> Mark Stefik, Gregg Foster, Daniel G. Bobrow, Kenneth Kahn, Stan Lanning, and Lucy Suchman. </author> <title> Beyond the chalkboard: Computer support for collaboration and problem solving in meetings. </title> <journal> Communications of the ACM, </journal> <volume> 30(1) </volume> <pages> 32-47, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: Having 5 open channels between all pairs of participants is very expensive in computing and network-ing resources. Floor control can reduce the requirements from n 2 open channels to n open channels. Finally, floor control can actively support more effective interaction. Systems such as Colab <ref> [SFB + 87] </ref> have demonstrated the benefits of explicit support for decision making systems. Floor control tactics can ensure that everyone gets a turn to speak, or can allow a meeting chair to directly control the meeting.
Reference: [Taz88] <author> J.M. Tazelaar. </author> <title> In depth groupware. </title> <journal> Byte magazine, </journal> <month> December </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Computer Supported Collaborative Work (CSCW) is the study of methods for enhancing cooperation among computer users by providing tools that explicitly support interaction and the sharing of information <ref> [EGR91, Taz88] </ref>. Suite is a conventional object-based system with powerful tools for developing user interfaces that allow multiple users to manipulate distributed objects together [DV90, DC91]. This paper describes SuiteSound, a tool for manipulating multimedia flows, such as for digital audio, in Suite. <p> There are many applications for multimedia flows in an object-oriented environment. Digital teleconferencing has already proven to be an effective way to hold meetings without traveling <ref> [Taz88, Sak90, AEH88] </ref>. Multimedia electronic mail systems, such as Diamond [FT82], ease communication between participants, especially those who are not used to using computers. At Lawrence Livermore Laboratories, researchers are building a collaborative notebook for physical scientists.
Reference: [TR91] <author> Jamie Thingelstaad and John Riedl. </author> <title> Collaborative physics instruction on the macintosh, </title> <month> March </month> <year> 1991. </year> <title> Undergraduate Research Opportunities Program, </title> <institution> University of Minnesota. </institution>
Reference-contexts: Distributed education is also possible, with students at remote sites seeing video images of the instructor, and participating in the class through sound transmitted back to the classroom. For instance, collaborative visualization tools will allow the students to interactively explore algorithms with their instructors <ref> [Bro88, TR91, HR91] </ref>. Digital audio will enable instructors to respond to questions verbally, rather than having to type replies. SuiteSound supports development of applications like these by integrating flexible, easy-to-use digital audio with a flexible, easy-to-use object-based system.
Reference: [TS88] <author> D.B. Terry and D.C. Swinehart. </author> <title> Managing stored voice in the Etherphone system. </title> <journal> ACM Transactions on Computer Systems, </journal> <month> February </month> <year> 1988. </year>
Reference-contexts: In the Etherpone system, each workstation is associated with an Etherphone that digitizes, packetizes, and encrypts the voice and transmits it over the Ethernet. The voice manager in the Etherphone system provides facilities for recording, editing, and playing stored voice <ref> [TS88] </ref>. The Diamond multimedia message system supports creating, editing, transmitting, printing, and managing multimedia documents. A document may contain various media such as text, graphics, images, and speech [FT82]. 1.2 Overview Our work extends previous research in four ways.
Reference: [Weg87] <author> Wegner. </author> <title> Dimensions of object-based language design. </title> <booktitle> In OOPSLA Proceedings, </booktitle> <month> October </month> <year> 1987. </year> <month> 25 </month>
Reference-contexts: Finally, section 5 summarizes our experience incorporating multimedia flows in a conventional operating system, discusses some of the lessons we have learned, and proposes future work. 2 Design Considerations 2.1 Continuous Media in Discrete Objects Object-based systems are being used for many tasks because of the benefits of improved encapsulation <ref> [Weg87] </ref>. However, objects are inherently discrete, conceptually containing the representation of the state of a system at a fixed point in space and time. Continuous media, such as voice and video, flow across time, with no convenient boundaries for object representation.
References-found: 23

