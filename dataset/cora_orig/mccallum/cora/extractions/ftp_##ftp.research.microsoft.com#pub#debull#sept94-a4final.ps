URL: ftp://ftp.research.microsoft.com/pub/debull/sept94-a4final.ps
Refering-URL: http://www.research.microsoft.com/research/db/debull/issues-list.htm
Root-URL: http://www.research.microsoft.com
Title: Special Issue on Data Placement for Parallelism Data Declustering in PADMA: A PArallel Database MAnager
Author: Jaideep Srivastava, Thomas M. Niccum, and Bhaskar Himatsingka 
Note: Bulletin of the Technical Committee on Data Engineering September, 1994 Vol. 17 No. 3 IEEE Computer Society Letters Letter from the Editor-in-Chief David Lomet 1 Letter from the Special Issue Editor Shahram Ghandeharizadeh 2  Notices Transactions on Knowledge and Data Engineering back cover  
Abstract: Leana Golubchik, and Richard R. Muntz 14 Disk Cooling in Parallel Disk Systems . . . . . . . . . . Peter Scheuermann, Gerhard Weikum, and Peter Zabback 29 Issues in Parallel Information Retrieval . . . . . . . . . . . . . . . . . . . . . . Anthony Tomasic, and Hector Garcia-Molina 41 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Boral and et al. </author> <title> Prototyping Bubba: A highly parallel database system. </title> <journal> IEEE Transactionson Knowledge and Data Engineering, </journal> <volume> 2(1), </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia [3, 7] and industry <ref> [1, 21] </ref> and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases.
Reference: [2] <author> D. J. DeWitt and J. Gray. </author> <title> Parallel database systems: The future of high performance database systems. </title> <journal> Communications of the ACM, </journal> <volume> 35(6) </volume> <pages> 85-98, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Parallel processing of database operations was first addressed by the database machine community, where the focus was on designing special-purpose hardware <ref> [2] </ref>. However, the cost of building special-purpose hardware is high, and most of the proposals were never realized [2]. <p> 1 Introduction Parallel processing of database operations was first addressed by the database machine community, where the focus was on designing special-purpose hardware <ref> [2] </ref>. However, the cost of building special-purpose hardware is high, and most of the proposals were never realized [2]. The eighties saw the emergence of very powerful and scalable commercial massively parallel processors (MPPs), with extremely attractive price/performance ratios, e.g. nCUBE, Intel's iPSC and Paragon, KSR-1, and Thinking Machines CM-2 and CM-5. Also, with very high speed communication switches becoming commercially available, e.g. <p> The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable <ref> [2] </ref>. A number of parallel database projects have been started in academia [3, 7] and industry [1, 21] and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases. <p> Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] [15] [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] <ref> [2] </ref>, where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes [10]. <p> Definition 4 [Point Query] A point query Q is a range query such that <ref> [(8i 2 f1; 2; :::; dg)(L i = U i )] </ref>. Definition 5 [Length of Query] Let Q = ([L 1 ; U 1 ); [L 2 ; L 3 ); ; [L d ; U d )) be a range query. <p> Shared-memory architectures suffer from scalability problems, and thus grew out of favor. An initial consensus was that shared-nothing architectures are the most promising <ref> [2, 25] </ref>, though recently support has been expressed for the shared-disk architecture [26]. We believe that as technology is progressing, the distinction between the latter two is becoming blurred. This is because the shared-disk parallel database architecture is most suited to MPPs, while shared-nothing architecture is most suited to NOWs.
Reference: [3] <author> D.J. Dewitt and et al. </author> <title> The Gamma database machine project. </title> <journal> IEEE Transactionson Knowledge and Data Engineering, </journal> <volume> 2(1), </volume> <month> March </month> <year> 1990. </year>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia <ref> [3, 7] </ref> and industry [1, 21] and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases. <p> A detailed description can be found in [24]. Figure 2 shows the architecture of the PADMA parallel database 1 Experience with I/O intensive applications has shown that CPU-controlled I/O is not a good idea, and a DMA or I/O processor is certainly needed <ref> [3] </ref>. Trends in architecture are similar, i.e. MPPs have dedicated I/O processors, while nodesin NOWs with I/O capability have DMAs.
Reference: [4] <author> H.C. Du and J.S. Sobolewski. </author> <title> Disk allocation for cartesian product files on multiple disk systems. </title> <journal> ACM Transactions on Database Systems, </journal> <pages> pages 82-101, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: These descriptions are only to recapitulate their salient points. Detailed descriptions exist in the respective papers. on each dimension, onto 4 disks. 1. Disk Modulo (DM) / Coordinate Modulo Declustering (CMD) The disk modulo method by Du and Sobolewski <ref> [4] </ref> and coordinate modulo declustering by Li et al [14] are similar approaches. <p> Variations of this method include the Generalized Disk Modulo allocation method <ref> [4] </ref>. 2. Field-wise Exclusive-or (FX) This allocation method was proposed by Kim and Pramanik [16] with efficient partial match retrieval in mind. The main idea behind this approach is the use of bitwise exclusive or operation () on the binary values of a bucket-id. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques <ref> [4] </ref> [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques <ref> [4] </ref> [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. <p> Lemma 3. If a declustering method is row optimal, then it is periodic. Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM <ref> [4] </ref>, GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> If a declustering method is row optimal, then it is periodic. Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM <ref> [4] </ref>, GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as [15] <ref> [4] </ref> [16] [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation.
Reference: [5] <author> C. Faloutsos and P. Bhagwat. </author> <title> Declustering using fractals. </title> <booktitle> Parallel and Distributed Information Systems, </booktitle> <pages> pages 18-25, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: We thus use the terms data declustering and disk allocation interchangeably. 2.1 Problem Definition We now define some terminology which is used through out this paper. These definitions are similar to those used by Faloutsos et al <ref> [5] </ref>. <p> Hilbert Curve Method (HCAM) A declustering method based on space filling curves was recently proposed by Faloutsos and Bhagwat <ref> [5] </ref>. Such a curve visits all points in a k -dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. The authors use such a curve, called the Hilbert Curve [5] to fill the k -dimensional grid and then assign the <p> space filling curves was recently proposed by Faloutsos and Bhagwat <ref> [5] </ref>. Such a curve visits all points in a k -dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. The authors use such a curve, called the Hilbert Curve [5] to fill the k -dimensional grid and then assign the disks to the buckets in a round robin fashion.
Reference: [6] <author> C. Faloutsos and D. Metaxas. </author> <title> Disk allocation methods using error correcting codes. </title> <journal> IEEE Transactions on Computers, </journal> <pages> pages 907-914, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace containing it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in <ref> [6] </ref> [15] [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] [2], where the most frequently queried attribute is used for declustering. <p> Since () is a boolean operation the values i 1 ; i 2 ; :::; i k must be encoded in binary. 3. Error Correcting Codes (ECC) A declustering approach based on using error correcting codes was proposed by Faloutsos et al <ref> [6] </ref>. It works for binary attributes or an attribute where the number of partitions on it, d i , is a power of 2. For the binary case the problem is reduced to grouping the 2 k binary strings on k bits in M groups of dissimilar strings. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] <ref> [6] </ref> [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15].
Reference: [7] <author> O. Frieder. </author> <title> Multiprocessor algorithms for relational-database operations on hypercube systems. </title> <booktitle> IEEE Computer, </booktitle> <month> November </month> <year> 1990. </year>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia <ref> [3, 7] </ref> and industry [1, 21] and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases.
Reference: [8] <author> T. Fujiwara, M. Ito, T. Kasami, M. Kataoka, and J. Okui. </author> <title> Performance analysis of disk allocation method using error correcting code. </title> <journal> IEEE Transactions on Information Theory, </journal> <pages> pages 379-384, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] [16] <ref> [8] </ref>. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15].
Reference: [9] <author> S. Ghanderharizadeh and D.J. DeWitt. </author> <title> A multiuser performance analysis of alternative declustering strategies. </title> <booktitle> Proceedingsof Data Engineering Conference, </booktitle> <month> Feb </month> <year> 1990. </year>
Reference-contexts: Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] [15] [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are <ref> [9] </ref> [2], where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes [10].
Reference: [10] <author> L. Harada, M. Nakano, M. Kitsuregawa, and M. Takagi. </author> <title> Query processing method for multi-attribute clustered relations. </title> <booktitle> Proceedings of International Conference on VLDB, </booktitle> <pages> pages 59-70, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: Examples are [9] [2], where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes <ref> [10] </ref>.
Reference: [11] <author> B. Himatsingka and J. Srivastava. </author> <title> Performance evaluation of grid based multi-attribute record declustering methods. </title> <booktitle> Proceedings of 10th International Conference on Data Engineering, </booktitle> <month> Feb </month> <year> 1994. </year>
Reference-contexts: Lemma 1. If M = ab is a composite integer and (9i; j)(d i a + 1; d j b + 1) then a strictly optimal declustering for range queries does not exist. Proof: Refer <ref> [11] </ref>. Lemma 2. If M is a prime integer and (9i; j)(d i 3; d j M ) then a strictly optimal declustering for range queries exists iff (1)M = 1; 2; 3; 5 and d = 2 or Proof: Refer [11]. Theorem 1. <p> Proof: Refer <ref> [11] </ref>. Lemma 2. If M is a prime integer and (9i; j)(d i 3; d j M ) then a strictly optimal declustering for range queries exists iff (1)M = 1; 2; 3; 5 and d = 2 or Proof: Refer [11]. Theorem 1. If d 3 then a strictly optimal declustering for range queries exists iff M = 1; 2; 3. Proof: This is a direct consequence of Lemmas 1 and 2. <p> We choose two declustering methods from the class LHMD, namely FX and CMD, and two others namely ECC and HCAM, for our experimental evaluation. The main results of the experiments <ref> [11] </ref> are as follows: (i) various declustering methods proposed in literature show a noticeable difference of performance (in relative terms though not much in absolute terms) for small queries, (ii) for large queries, Latin Hypercubes perform very well, (iii) the performance of declustering methods is quite sensitive to the query shape <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation <ref> [11] </ref>, (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [12] <author> B. Himatsingka, J. Srivastava, J. Li, and D. Rotem. </author> <title> Latin hypercubes: A class of multidimensional declustering techniques. </title> <type> Technical Report TR 94-05, </type> <institution> University of Minnesota, Minneapolis, Department of Computer Science, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace containing it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] [15] <ref> [12] </ref>. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] [2], where the most frequently queried attribute is used for declustering. <p> Lemma 3. If a declustering method is row optimal, then it is periodic. Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer <ref> [12] </ref>. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM [4], GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> All of these results are applicable to any declustering method which belongs to the class LHDM, e.g. CMD, FX, GDM, etc. The proofs to the the Lemmas and Theorems in this section can be found in <ref> [12] </ref>. Definition 14 [Interval Domain Space] Any query on the cartesian product file F will have to access all the data in the interval it intersects. <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques <ref> [14, 12] </ref> and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [13] <author> B. Himatsingka, J. Srivastava, and Thomas M. Niccum. </author> <title> Tradeoffs in parallel query processing and its implications for query optimization. </title> <type> Technical Report TR 94-09, </type> <institution> University of Minnesota, Minneapolis, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization <ref> [23, 13] </ref>.
Reference: [14] <author> Li Jianzhong, J. Srivastava, and D. Rotem. CMD: </author> <title> A multidimensional declustering method for parallel database systems. </title> <booktitle> Proceedings of International Conference on VLDB, </booktitle> <month> August </month> <year> 1992. </year>
Reference-contexts: These descriptions are only to recapitulate their salient points. Detailed descriptions exist in the respective papers. on each dimension, onto 4 disks. 1. Disk Modulo (DM) / Coordinate Modulo Declustering (CMD) The disk modulo method by Du and Sobolewski [4] and coordinate modulo declustering by Li et al <ref> [14] </ref> are similar approaches. A bucket &lt; i 1 ; i 2 ; :::; i k &gt; is assigned to the disk unit diskOf (i 1 ; i 2 ; :::; i k ) = (i 1 ; i 2 ; :::; i k ) mod M . <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as [15] [4] [16] <ref> [14] </ref> and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation. <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques <ref> [14, 12] </ref> and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [15] <author> A. S. Abdel-Ghaffar Khaled and Amr El Abbadi. </author> <title> Optimal disk allocation for partial match queries. </title> <journal> ACM Transactions on Database Systems, </journal> <pages> pages 132-156, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace containing it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] <ref> [15] </ref> [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] [2], where the most frequently queried attribute is used for declustering. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] <ref> [15] </ref>. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. The specific focus of [15] was on p -ary cartesian product files where (8i)(d <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] <ref> [15] </ref>. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. The specific focus of [15] was on p -ary cartesian product files where (8i)(d i = p). <p> can be achieved for partial match queries [4] [16] <ref> [15] </ref>. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. The specific focus of [15] was on p -ary cartesian product files where (8i)(d i = p). It was shown that there is no strictly optimal allocation for a p -ary cartesian product file if p (p 2 +p2)=2 M p d1 or p 2 M p np 2 p+2 1. <p> Thus dP=M e, the optimal number of disk accesses, is much greater than (M 1) d1 1 or (1 p)((M 1) d1 =2 d1 1). And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as <ref> [15] </ref> [4] [16] [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation.
Reference: [16] <author> M.H. Kim and S. Pramanik. </author> <title> Optimal file distribution for partial match queries. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 173-182, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Variations of this method include the Generalized Disk Modulo allocation method [4]. 2. Field-wise Exclusive-or (FX) This allocation method was proposed by Kim and Pramanik <ref> [16] </ref> with efficient partial match retrieval in mind. The main idea behind this approach is the use of bitwise exclusive or operation () on the binary values of a bucket-id. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] <ref> [16] </ref> [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] <ref> [16] </ref> [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. <p> Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM [4], GDM [4], FX <ref> [16] </ref>, and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as [15] [4] <ref> [16] </ref> [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation.
Reference: [17] <author> J. Li, D. Rotem, and J. Srivastava. </author> <title> Algorithms for loading parallel grid files. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Since we do not consider replication, this is equivalent to finding a mapping which maps each sub-space to a unique disk. Various deterministic methods have been studied <ref> [17] </ref> for creating a grid partitioning of the data space. However, these techniques are applicable only to small data files. Hence, statistical sampling based approaches become extremely important. <p> However, these techniques are applicable only to small data files. Hence, statistical sampling based approaches become extremely important. We have studied sampling based approaches for creating the grid partitions, and the techniques have been shown to have very good partitioning properties. Details of these techniques are provided in <ref> [17] </ref>. In the following sections, we assume that the grid partitioning has been created. We thus use the terms data declustering and disk allocation interchangeably. 2.1 Problem Definition We now define some terminology which is used through out this paper. <p> Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms <ref> [17] </ref>, and (iv) parallel query optimization [23, 13].
Reference: [18] <author> Thomas. M. Niccum, J. Srivastava and J. Li. </author> <title> Declustering Aware Parallel Join Algorithms. </title> <booktitle> Proceedings of the International Conference for Young Computer Scientists, </booktitle> <address> Beijing, </address> <year> 1993. </year>
Reference-contexts: One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms <ref> [18] </ref>, (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [19] <author> J. Nievergelt, H. Hinterberger, and K.C. Sevcik. </author> <title> The grid file: an adaptable, symmetric multikey file structure. </title> <journal> ACM Transactions on Database Systems, </journal> <pages> pages 38-71, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: Examples are [9] [2], where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file <ref> [19] </ref> type partitioning, or irregular shapes [10].
Reference: [20] <author> David A. Patterson. </author> <title> A quantitative case for networks of workstations (NOW). </title> <booktitle> Cray Distinguished Lecture Series, </booktitle> <month> April </month> <year> 1994. </year> <month> 12 </month>
Reference-contexts: Also, with very high speed communication switches becoming commercially available, e.g. ATM and Fiber Channel, and advancements in operating system technology to make communication cheaper, e.g. Active Messages [27], a network of workstations (NOWs) <ref> [20] </ref> can be configured to provide the performance and price/performance of scalable parallel machines. Thus, while special-purpose hardware design for databases did not succeed, use of MPPs or NOWs for building parallel databases is an extremely promising and active research area.
Reference: [21] <author> H. Pirahesh and et al. </author> <title> Parallelism in relational database systems: </title> <booktitle> Architectural issues and design approaches. Proceedings of 2nd International Symposium on Database in Parallel and Distributed Systems, </booktitle> <address> Dublin, Ireland, </address> <month> July </month> <year> 1990. </year>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia [3, 7] and industry <ref> [1, 21] </ref> and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases.
Reference: [22] <author> J. Srivastava. </author> <title> A parallel data management system for large-scale NASA datasets. </title> <booktitle> Proceedings of the 3rd NASA GSFC Conference on Mass Storage Systems and Technologies, </booktitle> <pages> pages 283-299, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: of the PADMA system. 11 Future work in the PADMA project includes (i) detailed performance evaluation of various techniques devel-oped, (ii) extension of the parallel techniques developed for points to handle intervals and regions, for temporal and spatial data, and (iii) development of example applications on top of the prototype <ref> [22] </ref>. PADMA represents the effort of various individuals over the last three years. We would like to acknowledge the contributions made by Prof. Jian-Zhong Li of Heilongjiang University, P.R.C., Dr.
Reference: [23] <author> J. Srivastava and G. Elsesser. </author> <title> Optimizing multi-join queries in parallel relational databases. </title> <booktitle> Proceedings of the 2nd International conference on Parallel and Distributed Information Systems, </booktitle> <pages> pages 84-92, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization <ref> [23, 13] </ref>.
Reference: [24] <author> J. Srivastava, T. M. Niccum and J. Srivastava. PADMA: </author> <title> A PArallel Database MAnager. </title> <type> Technical Report TR 94-47, </type> <institution> University of Minnesota, Minneapolis, Department of Computer Science, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: We believe that software architectures for parallel databases must keep in mind these trends in parallel hardware architecture. PADMA has been an ongoing project for the last three years. We provide a brief overview of the project here. A detailed description can be found in <ref> [24] </ref>. Figure 2 shows the architecture of the PADMA parallel database 1 Experience with I/O intensive applications has shown that CPU-controlled I/O is not a good idea, and a DMA or I/O processor is certainly needed [3]. Trends in architecture are similar, i.e. <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results <ref> [24] </ref> so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [25] <author> M. Stonebraker. </author> <title> The case for shared nothing. </title> <journal> Database Engineering, </journal> <volume> 9(1) </volume> <pages> 4-9, </pages> <year> 1986. </year>
Reference-contexts: skew and attribute correlation is present, and (iii) how can information about query sets be used in selecting a declustering method appropriate for a relation. 5 Project Architecture, Status & Future Directions In the last few years, three parallel database (software) architectures have been considered, namely shared-memory, shared-disk, and shared-nothing <ref> [25] </ref>. Shared-memory architectures suffer from scalability problems, and thus grew out of favor. An initial consensus was that shared-nothing architectures are the most promising [2, 25], though recently support has been expressed for the shared-disk architecture [26]. <p> Shared-memory architectures suffer from scalability problems, and thus grew out of favor. An initial consensus was that shared-nothing architectures are the most promising <ref> [2, 25] </ref>, though recently support has been expressed for the shared-disk architecture [26]. We believe that as technology is progressing, the distinction between the latter two is becoming blurred. This is because the shared-disk parallel database architecture is most suited to MPPs, while shared-nothing architecture is most suited to NOWs.
Reference: [26] <author> P. Valduriez. </author> <title> Parallel database systems: The case for shared something. </title> <booktitle> Proceedings of 9th International Conference on Data Engineering, </booktitle> <pages> pages 460-465, </pages> <year> 1993. </year>
Reference-contexts: Shared-memory architectures suffer from scalability problems, and thus grew out of favor. An initial consensus was that shared-nothing architectures are the most promising [2, 25], though recently support has been expressed for the shared-disk architecture <ref> [26] </ref>. We believe that as technology is progressing, the distinction between the latter two is becoming blurred. This is because the shared-disk parallel database architecture is most suited to MPPs, while shared-nothing architecture is most suited to NOWs.
Reference: [27] <author> Thorsten von Eicken, David E. Culler, Seth Copen Goldstein, and Klaus Erik Schauser. </author> <title> Active messages: a mechanism for integrated communication and computation. </title> <type> Technical Report TR CSD-92-675, </type> <institution> University of California, Berkeley, Computer Science Division, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: Also, with very high speed communication switches becoming commercially available, e.g. ATM and Fiber Channel, and advancements in operating system technology to make communication cheaper, e.g. Active Messages <ref> [27] </ref>, a network of workstations (NOWs) [20] can be configured to provide the performance and price/performance of scalable parallel machines. Thus, while special-purpose hardware design for databases did not succeed, use of MPPs or NOWs for building parallel databases is an extremely promising and active research area.

Reference: [1] <editor> Fault Tolerant Disk Drive Matrix, Patent 5,303,244, </editor> <address> Granted April 12, </address> <year> 1994. </year> <title> AT&T Global Information Solutions. </title>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia [3, 7] and industry <ref> [1, 21] </ref> and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases.
Reference: [2] <author> NonStop SQL, </author> <title> A Distributed, High-performance, High-reliablity Implementaion of SQL. </title> <type> Technical Report No. 82317, </type> <institution> Tandem Database Group, March,1987. </institution>
Reference-contexts: 1 Introduction Parallel processing of database operations was first addressed by the database machine community, where the focus was on designing special-purpose hardware <ref> [2] </ref>. However, the cost of building special-purpose hardware is high, and most of the proposals were never realized [2]. <p> 1 Introduction Parallel processing of database operations was first addressed by the database machine community, where the focus was on designing special-purpose hardware <ref> [2] </ref>. However, the cost of building special-purpose hardware is high, and most of the proposals were never realized [2]. The eighties saw the emergence of very powerful and scalable commercial massively parallel processors (MPPs), with extremely attractive price/performance ratios, e.g. nCUBE, Intel's iPSC and Paragon, KSR-1, and Thinking Machines CM-2 and CM-5. Also, with very high speed communication switches becoming commercially available, e.g. <p> The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable <ref> [2] </ref>. A number of parallel database projects have been started in academia [3, 7] and industry [1, 21] and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases. <p> Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] [15] [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] <ref> [2] </ref>, where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes [10]. <p> Definition 4 [Point Query] A point query Q is a range query such that <ref> [(8i 2 f1; 2; :::; dg)(L i = U i )] </ref>. Definition 5 [Length of Query] Let Q = ([L 1 ; U 1 ); [L 2 ; L 3 ); ; [L d ; U d )) be a range query. <p> Shared-memory architectures suffer from scalability problems, and thus grew out of favor. An initial consensus was that shared-nothing architectures are the most promising <ref> [2, 25] </ref>, though recently support has been expressed for the shared-disk architecture [26]. We believe that as technology is progressing, the distinction between the latter two is becoming blurred. This is because the shared-disk parallel database architecture is most suited to MPPs, while shared-nothing architecture is most suited to NOWs.
Reference: [3] <institution> DBC/1012 database computer system manual release 2.0. </institution> <type> Technical Report Document No. </type> <institution> C10-0001-02, Teradata Corporation, </institution> <month> Nov </month> <year> 1985. </year>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia <ref> [3, 7] </ref> and industry [1, 21] and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases. <p> A detailed description can be found in [24]. Figure 2 shows the architecture of the PADMA parallel database 1 Experience with I/O intensive applications has shown that CPU-controlled I/O is not a good idea, and a DMA or I/O processor is certainly needed <ref> [3] </ref>. Trends in architecture are similar, i.e. MPPs have dedicated I/O processors, while nodesin NOWs with I/O capability have DMAs.
Reference: [4] <author> D. Bitton. </author> <title> Arm scheduling in shadowed disks. </title> <booktitle> COMPCON, </booktitle> <pages> pages 132-136, </pages> <month> Spring </month> <year> 1989. </year>
Reference-contexts: These descriptions are only to recapitulate their salient points. Detailed descriptions exist in the respective papers. on each dimension, onto 4 disks. 1. Disk Modulo (DM) / Coordinate Modulo Declustering (CMD) The disk modulo method by Du and Sobolewski <ref> [4] </ref> and coordinate modulo declustering by Li et al [14] are similar approaches. <p> Variations of this method include the Generalized Disk Modulo allocation method <ref> [4] </ref>. 2. Field-wise Exclusive-or (FX) This allocation method was proposed by Kim and Pramanik [16] with efficient partial match retrieval in mind. The main idea behind this approach is the use of bitwise exclusive or operation () on the binary values of a bucket-id. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques <ref> [4] </ref> [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques <ref> [4] </ref> [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. <p> Lemma 3. If a declustering method is row optimal, then it is periodic. Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM <ref> [4] </ref>, GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> If a declustering method is row optimal, then it is periodic. Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM <ref> [4] </ref>, GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as [15] <ref> [4] </ref> [16] [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation.
Reference: [5] <author> D. Bitton and J. Gray. </author> <title> Disk shadowing. </title> <booktitle> VLDB, </booktitle> <pages> pages 331-338, </pages> <year> 1988. </year>
Reference-contexts: We thus use the terms data declustering and disk allocation interchangeably. 2.1 Problem Definition We now define some terminology which is used through out this paper. These definitions are similar to those used by Faloutsos et al <ref> [5] </ref>. <p> Hilbert Curve Method (HCAM) A declustering method based on space filling curves was recently proposed by Faloutsos and Bhagwat <ref> [5] </ref>. Such a curve visits all points in a k -dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. The authors use such a curve, called the Hilbert Curve [5] to fill the k -dimensional grid and then assign the <p> space filling curves was recently proposed by Faloutsos and Bhagwat <ref> [5] </ref>. Such a curve visits all points in a k -dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. The authors use such a curve, called the Hilbert Curve [5] to fill the k -dimensional grid and then assign the disks to the buckets in a round robin fashion.
Reference: [6] <author> P. Chen. </author> <title> An evaluation of redundant arrays of disks using an Amdahl 5890. </title> <type> Technical Report UCB/CSD 89/506, </type> <institution> UC Berkeley, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace containing it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in <ref> [6] </ref> [15] [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] [2], where the most frequently queried attribute is used for declustering. <p> Since () is a boolean operation the values i 1 ; i 2 ; :::; i k must be encoded in binary. 3. Error Correcting Codes (ECC) A declustering approach based on using error correcting codes was proposed by Faloutsos et al <ref> [6] </ref>. It works for binary attributes or an attribute where the number of partitions on it, d i , is a power of 2. For the binary case the problem is reduced to grouping the 2 k binary strings on k bits in M groups of dissimilar strings. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] <ref> [6] </ref> [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15].
Reference: [7] <author> P. Chen, G. A. Gibson, R. H. Katz, and D. A. Patterson. </author> <title> An evaluation of redundant arrays of disks using an Amdahl 5890. </title> <booktitle> ACM SIGMETRICS Conference, </booktitle> <pages> pages 74-85, </pages> <year> 1990. </year>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia <ref> [3, 7] </ref> and industry [1, 21] and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases.
Reference: [8] <author> Peter M. Chen and David A. Patterson. </author> <title> Maximizing Performance in a Striped Disk Array. </title> <publisher> ISCA, </publisher> <pages> pages 322-331, </pages> <year> 1990. </year>
Reference-contexts: Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] [16] <ref> [8] </ref>. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15].
Reference: [9] <author> S. Chen and D. Towsley. </author> <title> Performance of a mirrored disk in a real-time transaction system. </title> <booktitle> ACM Sigmetrics 1991, </booktitle> <pages> pages 198-207, </pages> <year> 1991. </year>
Reference-contexts: Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] [15] [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are <ref> [9] </ref> [2], where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes [10].
Reference: [10] <author> S. Chen and D. Towsley. </author> <title> The Design and Evaluation of RAID5 and Parity Striping Disk Array Architecture. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <pages> pages 58-74, </pages> <year> 1993. </year>
Reference-contexts: Examples are [9] [2], where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes <ref> [10] </ref>.
Reference: [11] <author> G. Copeland and T. Keller. </author> <title> A Comparison of High-Availability Media Recovery Techniques. </title> <booktitle> ACM SIGMOD Conference, </booktitle> <pages> pages 98-109, </pages> <year> 1989. </year>
Reference-contexts: Lemma 1. If M = ab is a composite integer and (9i; j)(d i a + 1; d j b + 1) then a strictly optimal declustering for range queries does not exist. Proof: Refer <ref> [11] </ref>. Lemma 2. If M is a prime integer and (9i; j)(d i 3; d j M ) then a strictly optimal declustering for range queries exists iff (1)M = 1; 2; 3; 5 and d = 2 or Proof: Refer [11]. Theorem 1. <p> Proof: Refer <ref> [11] </ref>. Lemma 2. If M is a prime integer and (9i; j)(d i 3; d j M ) then a strictly optimal declustering for range queries exists iff (1)M = 1; 2; 3; 5 and d = 2 or Proof: Refer [11]. Theorem 1. If d 3 then a strictly optimal declustering for range queries exists iff M = 1; 2; 3. Proof: This is a direct consequence of Lemmas 1 and 2. <p> We choose two declustering methods from the class LHMD, namely FX and CMD, and two others namely ECC and HCAM, for our experimental evaluation. The main results of the experiments <ref> [11] </ref> are as follows: (i) various declustering methods proposed in literature show a noticeable difference of performance (in relative terms though not much in absolute terms) for small queries, (ii) for large queries, Latin Hypercubes perform very well, (iii) the performance of declustering methods is quite sensitive to the query shape <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation <ref> [11] </ref>, (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [12] <author> David J. Dewitt, R. Gerber, G. Graefe, M. Heytens, K.Kumar, and M.Muralikrishna. </author> <title> Gamma : A high performance dataflow database machine. </title> <booktitle> VLDB Conference, </booktitle> <pages> pages 228-240, </pages> <year> 1986. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace containing it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] [15] <ref> [12] </ref>. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] [2], where the most frequently queried attribute is used for declustering. <p> Lemma 3. If a declustering method is row optimal, then it is periodic. Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer <ref> [12] </ref>. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM [4], GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> All of these results are applicable to any declustering method which belongs to the class LHDM, e.g. CMD, FX, GDM, etc. The proofs to the the Lemmas and Theorems in this section can be found in <ref> [12] </ref>. Definition 14 [Interval Domain Space] Any query on the cartesian product file F will have to access all the data in the interval it intersects. <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques <ref> [14, 12] </ref> and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [13] <author> S. Ghandeharizadeh and D. J. DeWitt. </author> <title> Hybrid-Range Partitioning Strategy: A New Declustering Strategy for Multiprocessor Database Machines. </title> <booktitle> VLDB, </booktitle> <pages> pages 481-492, </pages> <year> 1990. </year>
Reference-contexts: Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization <ref> [23, 13] </ref>.
Reference: [14] <author> Garth A. Gibson. </author> <title> Performance and Reliability in Redundant Arrays of Inexpensive Disks. </title> <booktitle> 1989 Computer Measurement Group (CMG) Annual Conference Proceedings, </booktitle> <month> December </month> <year> 1989. </year>
Reference-contexts: These descriptions are only to recapitulate their salient points. Detailed descriptions exist in the respective papers. on each dimension, onto 4 disks. 1. Disk Modulo (DM) / Coordinate Modulo Declustering (CMD) The disk modulo method by Du and Sobolewski [4] and coordinate modulo declustering by Li et al <ref> [14] </ref> are similar approaches. A bucket &lt; i 1 ; i 2 ; :::; i k &gt; is assigned to the disk unit diskOf (i 1 ; i 2 ; :::; i k ) = (i 1 ; i 2 ; :::; i k ) mod M . <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as [15] [4] [16] <ref> [14] </ref> and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation. <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques <ref> [14, 12] </ref> and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [15] <author> Leana Golubchik, John C.S. Lui, and Richard R. Muntz. </author> <title> Chained declustering: Load balancing and robustness to skew and failure. </title> <booktitle> RIDE-TQP Workshop, </booktitle> <month> February </month> <year> 1992. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace containing it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] <ref> [15] </ref> [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] [2], where the most frequently queried attribute is used for declustering. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] <ref> [15] </ref>. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. The specific focus of [15] was on p -ary cartesian product files where (8i)(d <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] <ref> [15] </ref>. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. The specific focus of [15] was on p -ary cartesian product files where (8i)(d i = p). <p> can be achieved for partial match queries [4] [16] <ref> [15] </ref>. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. The specific focus of [15] was on p -ary cartesian product files where (8i)(d i = p). It was shown that there is no strictly optimal allocation for a p -ary cartesian product file if p (p 2 +p2)=2 M p d1 or p 2 M p np 2 p+2 1. <p> Thus dP=M e, the optimal number of disk accesses, is much greater than (M 1) d1 1 or (1 p)((M 1) d1 =2 d1 1). And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as <ref> [15] </ref> [4] [16] [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation.
Reference: [16] <author> Jim Gray, Bob Horst, and Mark Walker. </author> <title> Parity striping of disk arrays: Low-cost reliable storage with acceptable throughput. </title> <booktitle> VLDB Conference, </booktitle> <pages> pages 148-172, </pages> <year> 1990. </year>
Reference-contexts: Variations of this method include the Generalized Disk Modulo allocation method [4]. 2. Field-wise Exclusive-or (FX) This allocation method was proposed by Kim and Pramanik <ref> [16] </ref> with efficient partial match retrieval in mind. The main idea behind this approach is the use of bitwise exclusive or operation () on the binary values of a bucket-id. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] <ref> [16] </ref> [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] <ref> [16] </ref> [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. <p> Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM [4], GDM [4], FX <ref> [16] </ref>, and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as [15] [4] <ref> [16] </ref> [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation.
Reference: [17] <author> M. Holland and G. A. Gibson. </author> <title> Parity Declustring for Continuous Operation in Redundant Disk Arrays. </title> <booktitle> In 5th Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <address> Boston, MA, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: Since we do not consider replication, this is equivalent to finding a mapping which maps each sub-space to a unique disk. Various deterministic methods have been studied <ref> [17] </ref> for creating a grid partitioning of the data space. However, these techniques are applicable only to small data files. Hence, statistical sampling based approaches become extremely important. <p> However, these techniques are applicable only to small data files. Hence, statistical sampling based approaches become extremely important. We have studied sampling based approaches for creating the grid partitions, and the techniques have been shown to have very good partitioning properties. Details of these techniques are provided in <ref> [17] </ref>. In the following sections, we assume that the grid partitioning has been created. We thus use the terms data declustering and disk allocation interchangeably. 2.1 Problem Definition We now define some terminology which is used through out this paper. <p> Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms <ref> [17] </ref>, and (iv) parallel query optimization [23, 13].
Reference: [18] <author> M. Holland, G. A. Gibson, and D. P. Siewiorek. </author> <title> Architectures and Algorithms for On-Line Failure Recovery in Redundant Disk Arrays. </title> <note> Submitted to the Journal of Distributed and Parallel Databases. </note>
Reference-contexts: One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms <ref> [18] </ref>, (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [19] <author> M. Holland, G. A. Gibson, and D. P. Siewiorek. </author> <title> Fast, On-Line Failure Recovery in Redundant Disk Arrays. </title> <booktitle> In 23rd Annual International Symposium on Fault-Tolerant Computing, </booktitle> <year> 1993. </year>
Reference-contexts: Examples are [9] [2], where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file <ref> [19] </ref> type partitioning, or irregular shapes [10].
Reference: [20] <author> H. Hsiao and D. J. DeWitt. </author> <title> Chained Declustering: A New Availability Strategy for Multiprocessor Database Machines. </title> <booktitle> Proc. of Data Engineering, </booktitle> <pages> pages 456-465, </pages> <year> 1990. </year>
Reference-contexts: Also, with very high speed communication switches becoming commercially available, e.g. ATM and Fiber Channel, and advancements in operating system technology to make communication cheaper, e.g. Active Messages [27], a network of workstations (NOWs) <ref> [20] </ref> can be configured to provide the performance and price/performance of scalable parallel machines. Thus, while special-purpose hardware design for databases did not succeed, use of MPPs or NOWs for building parallel databases is an extremely promising and active research area.
Reference: [21] <author> R. Katz, D. W. Gordon, and J. A. Tuttle. </author> <title> Storage System Metrics for Evaluating Disk Array Organization. </title>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia [3, 7] and industry <ref> [1, 21] </ref> and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases.
Reference: [22] <author> M. Y. Kim. </author> <title> Synchronized Disk Iterleaving. </title> <journal> IEEE Trans. on Computers, </journal> <pages> pages 978-988, </pages> <month> November </month> <year> 1986. </year>
Reference-contexts: of the PADMA system. 11 Future work in the PADMA project includes (i) detailed performance evaluation of various techniques devel-oped, (ii) extension of the parallel techniques developed for points to handle intervals and regions, for temporal and spatial data, and (iii) development of example applications on top of the prototype <ref> [22] </ref>. PADMA represents the effort of various individuals over the last three years. We would like to acknowledge the contributions made by Prof. Jian-Zhong Li of Heilongjiang University, P.R.C., Dr.
Reference: [23] <author> M. S. Lakshmi and P. S. Yu. </author> <title> Effect of skew on join performance in parallel architectures. </title> <booktitle> In Int. Symposium on Databases in Parallel and Distributed Systems, </booktitle> <pages> pages 107-120, </pages> <year> 1988. </year>
Reference-contexts: Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization <ref> [23, 13] </ref>.
Reference: [24] <author> E. Lee. </author> <title> Software and Performance Issues in the Implementation of a RAID Prototype. </title> <month> May </month> <year> 1990. </year> <month> 27 </month>
Reference-contexts: We believe that software architectures for parallel databases must keep in mind these trends in parallel hardware architecture. PADMA has been an ongoing project for the last three years. We provide a brief overview of the project here. A detailed description can be found in <ref> [24] </ref>. Figure 2 shows the architecture of the PADMA parallel database 1 Experience with I/O intensive applications has shown that CPU-controlled I/O is not a good idea, and a DMA or I/O processor is certainly needed [3]. Trends in architecture are similar, i.e. <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results <ref> [24] </ref> so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [25] <author> E. Lee and R. Katz. </author> <title> Performance Consequences of Parity Placement in Disk Arrays. </title> <address> pages 190-199, </address> <year> 1991. </year>
Reference-contexts: skew and attribute correlation is present, and (iii) how can information about query sets be used in selecting a declustering method appropriate for a relation. 5 Project Architecture, Status & Future Directions In the last few years, three parallel database (software) architectures have been considered, namely shared-memory, shared-disk, and shared-nothing <ref> [25] </ref>. Shared-memory architectures suffer from scalability problems, and thus grew out of favor. An initial consensus was that shared-nothing architectures are the most promising [2, 25], though recently support has been expressed for the shared-disk architecture [26]. <p> Shared-memory architectures suffer from scalability problems, and thus grew out of favor. An initial consensus was that shared-nothing architectures are the most promising <ref> [2, 25] </ref>, though recently support has been expressed for the shared-disk architecture [26]. We believe that as technology is progressing, the distinction between the latter two is becoming blurred. This is because the shared-disk parallel database architecture is most suited to MPPs, while shared-nothing architecture is most suited to NOWs.
Reference: [26] <author> J. Menon and J. Cortney. </author> <title> The Architecture of a Fault-Tolerant Cached RAID Controller. </title> <booktitle> In 20th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 76-86, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Shared-memory architectures suffer from scalability problems, and thus grew out of favor. An initial consensus was that shared-nothing architectures are the most promising [2, 25], though recently support has been expressed for the shared-disk architecture <ref> [26] </ref>. We believe that as technology is progressing, the distinction between the latter two is becoming blurred. This is because the shared-disk parallel database architecture is most suited to MPPs, while shared-nothing architecture is most suited to NOWs.
Reference: [27] <author> J. Menon and J. Kasson. </author> <title> Methods for Improved Update Performance of Disk Arrays. </title> <booktitle> Proceedings of the Hawaii International Conference on System Sciences, </booktitle> <pages> pages 74-83, </pages> <year> 1992. </year>
Reference-contexts: Also, with very high speed communication switches becoming commercially available, e.g. ATM and Fiber Channel, and advancements in operating system technology to make communication cheaper, e.g. Active Messages <ref> [27] </ref>, a network of workstations (NOWs) [20] can be configured to provide the performance and price/performance of scalable parallel machines. Thus, while special-purpose hardware design for databases did not succeed, use of MPPs or NOWs for building parallel databases is an extremely promising and active research area.
Reference: [28] <author> J. Menon and D. Mattson. </author> <title> Comparison of Sparing Alternatives for Disk Arrays. </title> <booktitle> Proceedings of the International Symposium on Computer Architecture, </booktitle> <year> 1992. </year>
Reference-contexts: is an integral multiple of M FX power of 2 None PM: Exactly one field unspecified Power of 2 PM: with an unspecified attribute s.t. d i M ECC power of 2 power of 2 None derived HCAM None None None derived 3 Latin Hypercube Declustering Methods (LHDM) Latin Squares <ref> [28] </ref> are two-dimensional structures which show very good properties, and have been widely used in experimental designs to ensure least redundancy and maximum coverage for the minimal experimental effort. We generalize Latin Squares into higher dimensions and define a class of declustering methods called Latin Hypercube Declustering Methods (LHDM). <p> Definition 9 [Latin Squares] A Latin Square of order n is an n fi n square composed of symbols from 0 to n 1 such that no symbol appears more than once in a row or column <ref> [28] </ref>. Zhou et al discuss some properties of declustering methods using Latin squares in [28]. <p> 9 [Latin Squares] A Latin Square of order n is an n fi n square composed of symbols from 0 to n 1 such that no symbol appears more than once in a row or column <ref> [28] </ref>. Zhou et al discuss some properties of declustering methods using Latin squares in [28]. Definition 10 [Latin Hypercubes] A Latin Hypercube of dimension d and order n is an nfinfi:::fin hypercube of dimension d composed of symbols from 0 to n 1 such that no symbol appears more than once in any row for all dimensions. <p> Lemma 3. If a declustering method is row optimal, then it is periodic. Proof: Refer <ref> [28] </ref>. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM [4], GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in <p> Proof: Refer <ref> [28] </ref>. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM [4], GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. Q.E.D. 3.1 Performance Analysis of LHDM In this section we analyze Latin Hypercube Declustering Methods and derive conditions under which optimal parallelism is achieved.
Reference: [29] <author> A. Merchant and P. S. Yu. </author> <title> Design and Modeling of Clustered RAID. </title> <booktitle> Proceedings of the International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 140-149, </pages> <year> 1992. </year>
Reference: [30] <author> Richard R. Muntz and John C.S. Lui. </author> <title> Performance analysis of disk arrays under failure. </title> <booktitle> VLDB Conference, </booktitle> <pages> pages 162-173, </pages> <year> 1990. </year>
Reference: [31] <author> David A. Patterson, Garth Gibson, and Randy H. Katz. </author> <title> A Case for Redundant Arrays of Inexpensive Disks (RAID). </title> <booktitle> ACM SIGMOD Conference, </booktitle> <pages> pages 109-116, </pages> <year> 1988. </year>
Reference: [32] <author> M. Schulze, G. Gibson, R. Katz, and D. Patterson. </author> <booktitle> How-Reliable is a RAID? COMPCON, </booktitle> <pages> pages 118-123, </pages> <year> 1989. </year>
Reference: [33] <author> D. Stodolsky, G. A. Gibson, and M. Holland. </author> <title> Parity Logging, Overcoming the Small Writes Problem in Redundant Disk Arrays. </title> <booktitle> In 20th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 64-75, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1993. </year>
Reference: [34] <author> M. Stonebraker. </author> <title> A Case for Shared Nothing. </title> <journal> Database Engineering, </journal> <volume> 9(1), </volume> <year> 1986. </year>
Reference: [35] <author> M. Stonebraker and G. A. Schloss. </author> <title> Distributed RAID ANew Multiple Copy Algorithm. </title> <booktitle> Sixth Int'l. Conf on Data Engineering, </booktitle> <pages> pages 430-437, </pages> <year> 1990. </year>
Reference: [36] <author> D. Towsley, S. Chen, and S. P. Yu. </author> <title> Performance analysis of a fault tolerant mirrored disk system. </title> <booktitle> Proceeding of Performance '90, </booktitle> <pages> pages 239-253, </pages> <year> 1990. </year>
Reference: [37] <author> Philip S. Yu and Asit Dan. </author> <title> Effect of system dynamics on coupling architectures for transaction processing. </title> <type> Technical Report RC 16606, </type> <institution> IBM T.J. Watson Research Division, </institution> <month> Feb </month> <year> 1991. </year>

Reference: [1] <author> Baker, M.G., Hartman, J.H., Kupfer, M.D., Shirriff, K.W., and Ousterhout, J.K., </author> <title> Measurements of a Distributed File System, </title> <booktitle> Proc. 13th ACM Symposium on Operating Systems Principles, </booktitle> <year> 1991. </year>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia [3, 7] and industry <ref> [1, 21] </ref> and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases.
Reference: [2] <author> Chiueh, T., and Katz, R., </author> <title> Multi-Resolution Video Representation for Parallel Disk Arrays, </title> <booktitle> Proc. ACM Multimedia Conf., </booktitle> <year> 1993. </year>
Reference-contexts: 1 Introduction Parallel processing of database operations was first addressed by the database machine community, where the focus was on designing special-purpose hardware <ref> [2] </ref>. However, the cost of building special-purpose hardware is high, and most of the proposals were never realized [2]. <p> 1 Introduction Parallel processing of database operations was first addressed by the database machine community, where the focus was on designing special-purpose hardware <ref> [2] </ref>. However, the cost of building special-purpose hardware is high, and most of the proposals were never realized [2]. The eighties saw the emergence of very powerful and scalable commercial massively parallel processors (MPPs), with extremely attractive price/performance ratios, e.g. nCUBE, Intel's iPSC and Paragon, KSR-1, and Thinking Machines CM-2 and CM-5. Also, with very high speed communication switches becoming commercially available, e.g. <p> The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable <ref> [2] </ref>. A number of parallel database projects have been started in academia [3, 7] and industry [1, 21] and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases. <p> Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] [15] [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] <ref> [2] </ref>, where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes [10]. <p> Definition 4 [Point Query] A point query Q is a range query such that <ref> [(8i 2 f1; 2; :::; dg)(L i = U i )] </ref>. Definition 5 [Length of Query] Let Q = ([L 1 ; U 1 ); [L 2 ; L 3 ); ; [L d ; U d )) be a range query. <p> Shared-memory architectures suffer from scalability problems, and thus grew out of favor. An initial consensus was that shared-nothing architectures are the most promising <ref> [2, 25] </ref>, though recently support has been expressed for the shared-disk architecture [26]. We believe that as technology is progressing, the distinction between the latter two is becoming blurred. This is because the shared-disk parallel database architecture is most suited to MPPs, while shared-nothing architecture is most suited to NOWs.
Reference: [3] <author> Chen, P.M. and Patterson, D.A., </author> <title> Maximizing Performance in a Striped Disk-Array, </title> <booktitle> Proc. 17th Int. Symposium on Computer Architecture, </booktitle> <year> 1990. </year>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia <ref> [3, 7] </ref> and industry [1, 21] and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases. <p> A detailed description can be found in [24]. Figure 2 shows the architecture of the PADMA parallel database 1 Experience with I/O intensive applications has shown that CPU-controlled I/O is not a good idea, and a DMA or I/O processor is certainly needed <ref> [3] </ref>. Trends in architecture are similar, i.e. MPPs have dedicated I/O processors, while nodesin NOWs with I/O capability have DMAs.
Reference: [4] <author> Chen, P.M., Lee, E.K., Gibson, G.A., Katz, R.H., and Patterson, D.A., </author> <title> RAID: High-Performance, Reliable Secondary Storage, </title> <type> Technical Report UCB/CSD-93-778, </type> <institution> Department of Computer Science, University of California at Berkeley, </institution> <year> 1993. </year>
Reference-contexts: These descriptions are only to recapitulate their salient points. Detailed descriptions exist in the respective papers. on each dimension, onto 4 disks. 1. Disk Modulo (DM) / Coordinate Modulo Declustering (CMD) The disk modulo method by Du and Sobolewski <ref> [4] </ref> and coordinate modulo declustering by Li et al [14] are similar approaches. <p> Variations of this method include the Generalized Disk Modulo allocation method <ref> [4] </ref>. 2. Field-wise Exclusive-or (FX) This allocation method was proposed by Kim and Pramanik [16] with efficient partial match retrieval in mind. The main idea behind this approach is the use of bitwise exclusive or operation () on the binary values of a bucket-id. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques <ref> [4] </ref> [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques <ref> [4] </ref> [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. <p> Lemma 3. If a declustering method is row optimal, then it is periodic. Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM <ref> [4] </ref>, GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> If a declustering method is row optimal, then it is periodic. Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM <ref> [4] </ref>, GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as [15] <ref> [4] </ref> [16] [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation.
Reference: [5] <author> Copeland, G., Alexander, W., Boughter, E., and Keller, T., </author> <title> Data Placement in Bubba, </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <year> 1988. </year>
Reference-contexts: We thus use the terms data declustering and disk allocation interchangeably. 2.1 Problem Definition We now define some terminology which is used through out this paper. These definitions are similar to those used by Faloutsos et al <ref> [5] </ref>. <p> Hilbert Curve Method (HCAM) A declustering method based on space filling curves was recently proposed by Faloutsos and Bhagwat <ref> [5] </ref>. Such a curve visits all points in a k -dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. The authors use such a curve, called the Hilbert Curve [5] to fill the k -dimensional grid and then assign the <p> space filling curves was recently proposed by Faloutsos and Bhagwat <ref> [5] </ref>. Such a curve visits all points in a k -dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. The authors use such a curve, called the Hilbert Curve [5] to fill the k -dimensional grid and then assign the disks to the buckets in a round robin fashion.
Reference: [6] <author> Gemmel, J., and Christodoulakis, S., </author> <title> Principles of Delay-Sensitive Multimedia Data Storage and Retrieval, </title> <journal> ACM Transactions on Information Systems, </journal> <volume> Vol. 10, No. 1, </volume> <year> 1992. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace containing it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in <ref> [6] </ref> [15] [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] [2], where the most frequently queried attribute is used for declustering. <p> Since () is a boolean operation the values i 1 ; i 2 ; :::; i k must be encoded in binary. 3. Error Correcting Codes (ECC) A declustering approach based on using error correcting codes was proposed by Faloutsos et al <ref> [6] </ref>. It works for binary attributes or an attribute where the number of partitions on it, d i , is a power of 2. For the binary case the problem is reduced to grouping the 2 k binary strings on k bits in M groups of dissimilar strings. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] <ref> [6] </ref> [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15].
Reference: [7] <author> Gray, J.N., Horst B., and Walker, M., </author> <title> Parity Striping of Disc Arrays: Low-Cost Reliable Storage with Acceptable Throughput, </title> <booktitle> Proc. 16th Int. Conf. on Very Large Data Bases, </booktitle> <year> 1990. </year>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia <ref> [3, 7] </ref> and industry [1, 21] and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases.
Reference: [8] <author> Gray, J., Sundaresan, P., Englert, S., Baclawski, K., and Weinberger, P.J., </author> <title> Quickly Generating Billion-Record Synthetic Databases, </title> <booktitle> Proc. ACM SIGMOD Int. Conf., </booktitle> <year> 1994. </year>
Reference-contexts: Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] [16] <ref> [8] </ref>. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15].
Reference: [9] <author> Ghandeharizadeh, S., and Ramos, L., </author> <title> Continuous Retrieval of Multimedia Data Using Parallelism, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 5, No. 4, </volume> <year> 1993. </year>
Reference-contexts: Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] [15] [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are <ref> [9] </ref> [2], where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes [10].
Reference: [10] <author> Kim, </author> <title> M.Y.,Synchronized Disk Interleaving, </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. C-35, No. 11, </volume> <year> 1986. </year>
Reference-contexts: Examples are [9] [2], where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes <ref> [10] </ref>.
Reference: [11] <author> Knuth, </author> <booktitle> D.E.,The Art of Computer Programming. </booktitle> <volume> Vol. </volume> <month> 3: </month> <title> Sorting and Searching, </title> <publisher> Addison-Wesley, </publisher> <year> 1973. </year>
Reference-contexts: Lemma 1. If M = ab is a composite integer and (9i; j)(d i a + 1; d j b + 1) then a strictly optimal declustering for range queries does not exist. Proof: Refer <ref> [11] </ref>. Lemma 2. If M is a prime integer and (9i; j)(d i 3; d j M ) then a strictly optimal declustering for range queries exists iff (1)M = 1; 2; 3; 5 and d = 2 or Proof: Refer [11]. Theorem 1. <p> Proof: Refer <ref> [11] </ref>. Lemma 2. If M is a prime integer and (9i; j)(d i 3; d j M ) then a strictly optimal declustering for range queries exists iff (1)M = 1; 2; 3; 5 and d = 2 or Proof: Refer [11]. Theorem 1. If d 3 then a strictly optimal declustering for range queries exists iff M = 1; 2; 3. Proof: This is a direct consequence of Lemmas 1 and 2. <p> We choose two declustering methods from the class LHMD, namely FX and CMD, and two others namely ECC and HCAM, for our experimental evaluation. The main results of the experiments <ref> [11] </ref> are as follows: (i) various declustering methods proposed in literature show a noticeable difference of performance (in relative terms though not much in absolute terms) for small queries, (ii) for large queries, Latin Hypercubes perform very well, (iii) the performance of declustering methods is quite sensitive to the query shape <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation <ref> [11] </ref>, (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [12] <author> Lee, E.K., and Katz, </author> <title> R.H., An Analytic Performance Model of Disk Arrays, </title> <booktitle> Proc. ACM SIGMETRICS Conf., </booktitle> <year> 1993. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace containing it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] [15] <ref> [12] </ref>. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] [2], where the most frequently queried attribute is used for declustering. <p> Lemma 3. If a declustering method is row optimal, then it is periodic. Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer <ref> [12] </ref>. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM [4], GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> All of these results are applicable to any declustering method which belongs to the class LHDM, e.g. CMD, FX, GDM, etc. The proofs to the the Lemmas and Theorems in this section can be found in <ref> [12] </ref>. Definition 14 [Interval Domain Space] Any query on the cartesian product file F will have to access all the data in the interval it intersects. <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques <ref> [14, 12] </ref> and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [13] <author> Livny, M., Khoshafian, S., and Boral, H., </author> <title> Multi-Disk Management Algorithms, </title> <booktitle> Proc. ACM SIGMETRICS Conf., </booktitle> <year> 1987. </year>
Reference-contexts: Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization <ref> [23, 13] </ref>.
Reference: [14] <author> Merchant, A. and Yu, </author> <title> P.S.,Performance Analysis of a Dual Striping Strategy for Replicated Disk Arrays, </title> <booktitle> Proc. 2nd Int. Conf. on Parallel and Distributed Information Systems, </booktitle> <year> 1993. </year>
Reference-contexts: These descriptions are only to recapitulate their salient points. Detailed descriptions exist in the respective papers. on each dimension, onto 4 disks. 1. Disk Modulo (DM) / Coordinate Modulo Declustering (CMD) The disk modulo method by Du and Sobolewski [4] and coordinate modulo declustering by Li et al <ref> [14] </ref> are similar approaches. A bucket &lt; i 1 ; i 2 ; :::; i k &gt; is assigned to the disk unit diskOf (i 1 ; i 2 ; :::; i k ) = (i 1 ; i 2 ; :::; i k ) mod M . <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as [15] [4] [16] <ref> [14] </ref> and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation. <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques <ref> [14, 12] </ref> and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [15] <author> Salem, K., and Garcia-Molina, </author> <title> H.,Disk Striping, </title> <booktitle> Proc. 2nd Int. Conf. on Data Engineering, </booktitle> <year> 1986. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace containing it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] <ref> [15] </ref> [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] [2], where the most frequently queried attribute is used for declustering. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] <ref> [15] </ref>. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. The specific focus of [15] was on p -ary cartesian product files where (8i)(d <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] <ref> [15] </ref>. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. The specific focus of [15] was on p -ary cartesian product files where (8i)(d i = p). <p> can be achieved for partial match queries [4] [16] <ref> [15] </ref>. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. The specific focus of [15] was on p -ary cartesian product files where (8i)(d i = p). It was shown that there is no strictly optimal allocation for a p -ary cartesian product file if p (p 2 +p2)=2 M p d1 or p 2 M p np 2 p+2 1. <p> Thus dP=M e, the optimal number of disk accesses, is much greater than (M 1) d1 1 or (1 p)((M 1) d1 =2 d1 1). And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as <ref> [15] </ref> [4] [16] [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation.
Reference: [16] <author> Scheuermann, P., Weikum, G., and Zabback, P., </author> <title> Adaptive Load Balancing in Disk Arrays, </title> <booktitle> Proc. 4th Int. Conf. on Foundations of Data Organization and Algorithms, Lecture Notes in Computer Science, </booktitle> <volume> No. 730, </volume> <year> 1993. </year>
Reference-contexts: Variations of this method include the Generalized Disk Modulo allocation method [4]. 2. Field-wise Exclusive-or (FX) This allocation method was proposed by Kim and Pramanik <ref> [16] </ref> with efficient partial match retrieval in mind. The main idea behind this approach is the use of bitwise exclusive or operation () on the binary values of a bucket-id. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] <ref> [16] </ref> [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] <ref> [16] </ref> [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. <p> Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM [4], GDM [4], FX <ref> [16] </ref>, and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as [15] [4] <ref> [16] </ref> [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation.
Reference: [17] <author> Scheuermann, P., Weikum, G., and Zabback, P., </author> <title> Data Partitioning and Load Balancing in Parallel Disk Systems, </title> <type> Technical Report 209, </type> <institution> Department of Computer Science, ETH Zurich, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: Since we do not consider replication, this is equivalent to finding a mapping which maps each sub-space to a unique disk. Various deterministic methods have been studied <ref> [17] </ref> for creating a grid partitioning of the data space. However, these techniques are applicable only to small data files. Hence, statistical sampling based approaches become extremely important. <p> However, these techniques are applicable only to small data files. Hence, statistical sampling based approaches become extremely important. We have studied sampling based approaches for creating the grid partitions, and the techniques have been shown to have very good partitioning properties. Details of these techniques are provided in <ref> [17] </ref>. In the following sections, we assume that the grid partitioning has been created. We thus use the terms data declustering and disk allocation interchangeably. 2.1 Problem Definition We now define some terminology which is used through out this paper. <p> Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms <ref> [17] </ref>, and (iv) parallel query optimization [23, 13].
Reference: [18] <author> Schwetman, H., </author> <title> CSIM Reference Manual (Revision 16), </title> <type> Technical Report ACA-ST-252-87, </type> <institution> MCC, </institution> <year> 1992. </year>
Reference-contexts: One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms <ref> [18] </ref>, (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [19] <author> Weikum, G., Zabback, P., and Scheuermann, P., </author> <title> Dynamic File Allocation in Disk Arrays, </title> <booktitle> Proc. ACM SIGMOD Int. Conf., </booktitle> <year> 1991. </year>
Reference-contexts: Examples are [9] [2], where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file <ref> [19] </ref> type partitioning, or irregular shapes [10].
Reference: [20] <author> Weikum, G., and Zabback, P., </author> <title> Tuning of Striping Units in Disk-Array-Based File Systems, </title> <booktitle> Proc. 2nd Int. Workshop on Research Issues on Data Engineering: Transaction and Query Processing (RIDE-TQP), </booktitle> <year> 1992. </year>
Reference-contexts: Also, with very high speed communication switches becoming commercially available, e.g. ATM and Fiber Channel, and advancements in operating system technology to make communication cheaper, e.g. Active Messages [27], a network of workstations (NOWs) <ref> [20] </ref> can be configured to provide the performance and price/performance of scalable parallel machines. Thus, while special-purpose hardware design for databases did not succeed, use of MPPs or NOWs for building parallel databases is an extremely promising and active research area.
Reference: [21] <author> Wolf, J., </author> <title> The Placement Optimization Program: A Practical Solution to the Disk File Assignment Problem, </title> <booktitle> Proc. ACM SIGMETRICS Conf., </booktitle> <year> 1989 </year>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia [3, 7] and industry <ref> [1, 21] </ref> and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases.

Reference: [1] <author> Ijsbrand Jan Aalbersberg and Frans Sijstermans. </author> <title> High-quality and high-performance full-text document retrieval: </title> <booktitle> the parallel infoguide system. In Proceedings of the First International Conference on Parallel and Distributed Information Systems, </booktitle> <pages> pages 151-158, </pages> <address> Miami Beach, Florida, </address> <year> 1991. </year>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia [3, 7] and industry <ref> [1, 21] </ref> and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases.
Reference: [2] <author> Forbes J. Burkowski. </author> <title> Retrieval performance of a distributed text database utilizing a parallel processor document server. </title> <booktitle> In Proceedings of the Second International Symposium on Databases in Parallel and Distributed Systems, </booktitle> <pages> pages 71-79, </pages> <address> Dublin, Ireland, </address> <year> 1990. </year>
Reference-contexts: 1 Introduction Parallel processing of database operations was first addressed by the database machine community, where the focus was on designing special-purpose hardware <ref> [2] </ref>. However, the cost of building special-purpose hardware is high, and most of the proposals were never realized [2]. <p> 1 Introduction Parallel processing of database operations was first addressed by the database machine community, where the focus was on designing special-purpose hardware <ref> [2] </ref>. However, the cost of building special-purpose hardware is high, and most of the proposals were never realized [2]. The eighties saw the emergence of very powerful and scalable commercial massively parallel processors (MPPs), with extremely attractive price/performance ratios, e.g. nCUBE, Intel's iPSC and Paragon, KSR-1, and Thinking Machines CM-2 and CM-5. Also, with very high speed communication switches becoming commercially available, e.g. <p> The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable <ref> [2] </ref>. A number of parallel database projects have been started in academia [3, 7] and industry [1, 21] and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases. <p> Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] [15] [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] <ref> [2] </ref>, where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes [10]. <p> Definition 4 [Point Query] A point query Q is a range query such that <ref> [(8i 2 f1; 2; :::; dg)(L i = U i )] </ref>. Definition 5 [Length of Query] Let Q = ([L 1 ; U 1 ); [L 2 ; L 3 ); ; [L d ; U d )) be a range query. <p> Shared-memory architectures suffer from scalability problems, and thus grew out of favor. An initial consensus was that shared-nothing architectures are the most promising <ref> [2, 25] </ref>, though recently support has been expressed for the shared-disk architecture [26]. We believe that as technology is progressing, the distinction between the latter two is becoming blurred. This is because the shared-disk parallel database architecture is most suited to MPPs, while shared-nothing architecture is most suited to NOWs.
Reference: [3] <author> Janey K. Cringean, Roger England, Gordon A. Manson, and Peter Willett. </author> <title> Parallel text searching in serial files using a processor farm. </title> <booktitle> In Proceedings of Special Interest Group on Information Retrieval (SIGIR), </booktitle> <pages> pages 429-453, </pages> <year> 1990. </year>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia <ref> [3, 7] </ref> and industry [1, 21] and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases. <p> A detailed description can be found in [24]. Figure 2 shows the architecture of the PADMA parallel database 1 Experience with I/O intensive applications has shown that CPU-controlled I/O is not a good idea, and a DMA or I/O processor is certainly needed <ref> [3] </ref>. Trends in architecture are similar, i.e. MPPs have dedicated I/O processors, while nodesin NOWs with I/O capability have DMAs.
Reference: [4] <author> Samuel DeFazio. </author> <title> Full-text document retrieval benchmark. </title> <editor> In Jim Gray, editor, </editor> <title> The Benchmark Handbook for Database and Transaction Processing Systems, chapter 8. </title> <publisher> Morgan Kaufmann, </publisher> <address> second edition, </address> <year> 1993. </year> <month> 48 </month>
Reference-contexts: These descriptions are only to recapitulate their salient points. Detailed descriptions exist in the respective papers. on each dimension, onto 4 disks. 1. Disk Modulo (DM) / Coordinate Modulo Declustering (CMD) The disk modulo method by Du and Sobolewski <ref> [4] </ref> and coordinate modulo declustering by Li et al [14] are similar approaches. <p> Variations of this method include the Generalized Disk Modulo allocation method <ref> [4] </ref>. 2. Field-wise Exclusive-or (FX) This allocation method was proposed by Kim and Pramanik [16] with efficient partial match retrieval in mind. The main idea behind this approach is the use of bitwise exclusive or operation () on the binary values of a bucket-id. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques <ref> [4] </ref> [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques <ref> [4] </ref> [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. <p> Lemma 3. If a declustering method is row optimal, then it is periodic. Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM <ref> [4] </ref>, GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> If a declustering method is row optimal, then it is periodic. Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM <ref> [4] </ref>, GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as [15] <ref> [4] </ref> [16] [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation.
Reference: [5] <author> Samuel DeFazio and Joe Hull. </author> <title> Toward servicing textual database transactions on symmetric shared memory multi-processors. </title> <booktitle> Proceedings of the Int'l Workshop on High Performance Transaction Systems, Asilomar, </booktitle> <year> 1991. </year>
Reference-contexts: We thus use the terms data declustering and disk allocation interchangeably. 2.1 Problem Definition We now define some terminology which is used through out this paper. These definitions are similar to those used by Faloutsos et al <ref> [5] </ref>. <p> Hilbert Curve Method (HCAM) A declustering method based on space filling curves was recently proposed by Faloutsos and Bhagwat <ref> [5] </ref>. Such a curve visits all points in a k -dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. The authors use such a curve, called the Hilbert Curve [5] to fill the k -dimensional grid and then assign the <p> space filling curves was recently proposed by Faloutsos and Bhagwat <ref> [5] </ref>. Such a curve visits all points in a k -dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. The authors use such a curve, called the Hilbert Curve [5] to fill the k -dimensional grid and then assign the disks to the buckets in a round robin fashion.
Reference: [6] <author> Perry Alan Emrath. </author> <title> Page Indexing for Textual Information Retrieval Systems. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> October </month> <year> 1983. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace containing it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in <ref> [6] </ref> [15] [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] [2], where the most frequently queried attribute is used for declustering. <p> Since () is a boolean operation the values i 1 ; i 2 ; :::; i k must be encoded in binary. 3. Error Correcting Codes (ECC) A declustering approach based on using error correcting codes was proposed by Faloutsos et al <ref> [6] </ref>. It works for binary attributes or an attribute where the number of partitions on it, d i , is a power of 2. For the binary case the problem is reduced to grouping the 2 k binary strings on k bits in M groups of dissimilar strings. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] <ref> [6] </ref> [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15].
Reference: [7] <author> Christos Faloutsos. </author> <title> Access methods for text. </title> <journal> ACM Computing Surveys, </journal> <volume> 17 </volume> <pages> 50-74, </pages> <year> 1985. </year>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia <ref> [3, 7] </ref> and industry [1, 21] and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases.
Reference: [8] <author> J. Fedorowicz. </author> <title> Database performance evaluation in an indexed file environment. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(1) </volume> <pages> 85-110, </pages> <year> 1987. </year>
Reference-contexts: Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] [16] <ref> [8] </ref>. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15].
Reference: [9] <author> William B. Frakes and Ricardo Baeza-Yates. </author> <title> Information Retrieval: Data Structures and Algorithms. </title> <publisher> Prentice-Hall, </publisher> <year> 1992. </year>
Reference-contexts: Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] [15] [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are <ref> [9] </ref> [2], where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes [10].
Reference: [10] <author> Gaston H. Gonnet, Ricardo A. Baeza-Yates, and Tim Snider. </author> <title> Lexicographical indices for text: Inverted files vs. PAT trees. </title> <type> Technical Report OED-91-01, </type> <institution> University of Waterloo Centre for the New Oxford English Dictionary and Text Research, Canada, </institution> <year> 1991. </year>
Reference-contexts: Examples are [9] [2], where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [19] type partitioning, or irregular shapes <ref> [10] </ref>.
Reference: [11] <author> Lee A. Hollaar. </author> <title> Implementations and evaluation of a parallel text searcher for very large text databases. </title> <booktitle> In Proceedings of the Twenty-Fifth Hawaii International Conference on System Sciences, </booktitle> <pages> pages 300-307. </pages> <publisher> IEEE Computer society Press, </publisher> <year> 1992. </year>
Reference-contexts: Lemma 1. If M = ab is a composite integer and (9i; j)(d i a + 1; d j b + 1) then a strictly optimal declustering for range queries does not exist. Proof: Refer <ref> [11] </ref>. Lemma 2. If M is a prime integer and (9i; j)(d i 3; d j M ) then a strictly optimal declustering for range queries exists iff (1)M = 1; 2; 3; 5 and d = 2 or Proof: Refer [11]. Theorem 1. <p> Proof: Refer <ref> [11] </ref>. Lemma 2. If M is a prime integer and (9i; j)(d i 3; d j M ) then a strictly optimal declustering for range queries exists iff (1)M = 1; 2; 3; 5 and d = 2 or Proof: Refer [11]. Theorem 1. If d 3 then a strictly optimal declustering for range queries exists iff M = 1; 2; 3. Proof: This is a direct consequence of Lemmas 1 and 2. <p> We choose two declustering methods from the class LHMD, namely FX and CMD, and two others namely ECC and HCAM, for our experimental evaluation. The main results of the experiments <ref> [11] </ref> are as follows: (i) various declustering methods proposed in literature show a noticeable difference of performance (in relative terms though not much in absolute terms) for small queries, (ii) for large queries, Latin Hypercubes perform very well, (iii) the performance of declustering methods is quite sensitive to the query shape <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation <ref> [11] </ref>, (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [12] <author> Byeong-Soo Jeong and Edward Omiecinski. </author> <title> Inverted file partitioningschemes for a shared-everything multiprocessor. </title> <type> Technical Report GIT-CC-92/39, </type> <institution> Georgia Institute of Technology, College of Computing, </institution> <year> 1992. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace containing it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] [15] <ref> [12] </ref>. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] [2], where the most frequently queried attribute is used for declustering. <p> Lemma 3. If a declustering method is row optimal, then it is periodic. Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer <ref> [12] </ref>. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM [4], GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> All of these results are applicable to any declustering method which belongs to the class LHDM, e.g. CMD, FX, GDM, etc. The proofs to the the Lemmas and Theorems in this section can be found in <ref> [12] </ref>. Definition 14 [Interval Domain Space] Any query on the cartesian product file F will have to access all the data in the interval it intersects. <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques <ref> [14, 12] </ref> and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [13] <author> Donald E. Knuth. </author> <booktitle> The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1973. </year>
Reference-contexts: Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization <ref> [23, 13] </ref>.
Reference: [14] <author> Zheng Lin. </author> <title> Cat: An execution model for concurrent full text search. </title> <booktitle> In Proceedings of the First International Conference on Parallel and Distributed Information Systems, </booktitle> <pages> pages 151-158, </pages> <address> Miami Beach, Florida, </address> <year> 1991. </year>
Reference-contexts: These descriptions are only to recapitulate their salient points. Detailed descriptions exist in the respective papers. on each dimension, onto 4 disks. 1. Disk Modulo (DM) / Coordinate Modulo Declustering (CMD) The disk modulo method by Du and Sobolewski [4] and coordinate modulo declustering by Li et al <ref> [14] </ref> are similar approaches. A bucket &lt; i 1 ; i 2 ; :::; i k &gt; is assigned to the disk unit diskOf (i 1 ; i 2 ; :::; i k ) = (i 1 ; i 2 ; :::; i k ) mod M . <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as [15] [4] [16] <ref> [14] </ref> and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation. <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques <ref> [14, 12] </ref> and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [15] <author> Patrick Martin, Ian A. Macleod, and Brent Nordin. </author> <title> A design of a distributed full text retrieval system. </title> <booktitle> In Proceedings of Special Interest Group on Information Retrieval (SIGIR), </booktitle> <pages> pages 131-137, </pages> <address> Pisa, Italy, </address> <month> September </month> <year> 1986. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace containing it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [6] <ref> [15] </ref> [12]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single attribute. Examples are [9] [2], where the most frequently queried attribute is used for declustering. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] <ref> [15] </ref>. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. The specific focus of [15] was on p -ary cartesian product files where (8i)(d <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] [16] [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] <ref> [15] </ref>. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. The specific focus of [15] was on p -ary cartesian product files where (8i)(d i = p). <p> can be achieved for partial match queries [4] [16] <ref> [15] </ref>. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. The specific focus of [15] was on p -ary cartesian product files where (8i)(d i = p). It was shown that there is no strictly optimal allocation for a p -ary cartesian product file if p (p 2 +p2)=2 M p d1 or p 2 M p np 2 p+2 1. <p> Thus dP=M e, the optimal number of disk accesses, is much greater than (M 1) d1 1 or (1 p)((M 1) d1 =2 d1 1). And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as <ref> [15] </ref> [4] [16] [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation.
Reference: [16] <author> Gerard Salton. </author> <title> Automatic Text Processing. </title> <publisher> Addison-Wesley, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: Variations of this method include the Generalized Disk Modulo allocation method [4]. 2. Field-wise Exclusive-or (FX) This allocation method was proposed by Kim and Pramanik <ref> [16] </ref> with efficient partial match retrieval in mind. The main idea behind this approach is the use of bitwise exclusive or operation () on the binary values of a bucket-id. <p> Given that a declustering method cannot be strictly optimal, it is thus desirable to have a declustering method that is strictly optimal for partial match and range queries. Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] <ref> [16] </ref> [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. <p> Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [4] [6] <ref> [16] </ref> [8]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [4] [16] [15]. Recent work [15] has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are less than the number of disks. <p> Proof: Refer [28]. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM [4], GDM [4], FX <ref> [16] </ref>, and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. <p> And hence, LHDM is expected to behave nearly optimally for most range queries. 4 Experimental Evaluation We believe that while theoretical studies such as [15] [4] <ref> [16] </ref> [14] and that presented in the previous section, provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed 9 experimental evaluation.
Reference: [17] <author> Bruce Raymond Schatz. </author> <title> Interactive retrieval in information spaces distributed across a wide-area network. </title> <type> Technical Report 90-35, </type> <institution> University of Arizona, </institution> <month> December </month> <year> 1990. </year>
Reference-contexts: Since we do not consider replication, this is equivalent to finding a mapping which maps each sub-space to a unique disk. Various deterministic methods have been studied <ref> [17] </ref> for creating a grid partitioning of the data space. However, these techniques are applicable only to small data files. Hence, statistical sampling based approaches become extremely important. <p> However, these techniques are applicable only to small data files. Hence, statistical sampling based approaches become extremely important. We have studied sampling based approaches for creating the grid partitions, and the techniques have been shown to have very good partitioning properties. Details of these techniques are provided in <ref> [17] </ref>. In the following sections, we assume that the grid partitioning has been created. We thus use the terms data declustering and disk allocation interchangeably. 2.1 Problem Definition We now define some terminology which is used through out this paper. <p> Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms <ref> [17] </ref>, and (iv) parallel query optimization [23, 13].
Reference: [18] <author> Kurt Shoens, Anthony Tomasic, and Hector Garcia-Molina. </author> <title> Synthetic workload performance analysis of incremental updates. </title> <booktitle> In Proceedings of Special Interest Group on Information Retrieval (SIGIR), </booktitle> <address> Dublin, Ireland, </address> <year> 1994. </year>
Reference-contexts: One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms <ref> [18] </ref>, (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [19] <author> Craig Stanfill. </author> <title> Partitioned posting files: A parallel inverted file structure for information retrieval. </title> <booktitle> In Proceedings of Special Interest Group on Information Retrieval (SIGIR), </booktitle> <year> 1990. </year>
Reference-contexts: Examples are [9] [2], where the most frequently queried attribute is used for declustering. Another classification of declustering methods can be based on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file <ref> [19] </ref> type partitioning, or irregular shapes [10].
Reference: [20] <author> Craig Stanfill and Brewster Kahle. </author> <title> Parallel free-text search on the connection machine system. </title> <journal> Communications of the ACM, </journal> <volume> 29 </volume> <pages> 1229-1239, </pages> <year> 1986. </year>
Reference-contexts: Also, with very high speed communication switches becoming commercially available, e.g. ATM and Fiber Channel, and advancements in operating system technology to make communication cheaper, e.g. Active Messages [27], a network of workstations (NOWs) <ref> [20] </ref> can be configured to provide the performance and price/performance of scalable parallel machines. Thus, while special-purpose hardware design for databases did not succeed, use of MPPs or NOWs for building parallel databases is an extremely promising and active research area.
Reference: [21] <author> Craig Stanfill, Robert Thau, and David Waltz. </author> <title> A parallel indexed algorithm for information retrieval. </title> <booktitle> In Proceedings of the Twelfth Annual International ACM/SIGIR Conference on Research and Development in Information Retrieval, </booktitle> <pages> pages 88-97, </pages> <address> Cambridge, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: The past few years have seen growing activity in the area of parallel databases. The relational data model, whose set-oriented non-procedural nature provides opportunities for massive parallelization, has been found especially suitable [2]. A number of parallel database projects have been started in academia [3, 7] and industry <ref> [1, 21] </ref> and products such as Parallel Oracle, Tandem Himalaya, Sybase Navigator, Teradata parallel database on NCR DBC/1012, etc. are available in the market. Applications targeted range from transaction processing to deductive databases.
Reference: [22] <author> Harold S. Stone. </author> <title> Parallel querying of large databases: A case study. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 11-21, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: of the PADMA system. 11 Future work in the PADMA project includes (i) detailed performance evaluation of various techniques devel-oped, (ii) extension of the parallel techniques developed for points to handle intervals and regions, for temporal and spatial data, and (iii) development of example applications on top of the prototype <ref> [22] </ref>. PADMA represents the effort of various individuals over the last three years. We would like to acknowledge the contributions made by Prof. Jian-Zhong Li of Heilongjiang University, P.R.C., Dr.
Reference: [23] <author> Anthony Tomasic and Hector Garcia-Molina. </author> <title> Caching and database scaling in distributed shared-nothing information retrieval systems. </title> <booktitle> In Proceedings of the Special Interest Group on Management of Data (SIGMOD), </booktitle> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Others are part of our ongoing and future investigations. The results [24] so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization <ref> [23, 13] </ref>.
Reference: [24] <author> Anthony Tomasic and Hector Garcia-Molina. </author> <title> Performance of inverted indices in shared-nothing distributed text document information retrieval systems. </title> <booktitle> In Proceedings of the Second International Conference On Parallel and Distributed Information Systems, </booktitle> <address> San Diego, </address> <year> 1993. </year>
Reference-contexts: We believe that software architectures for parallel databases must keep in mind these trends in parallel hardware architecture. PADMA has been an ongoing project for the last three years. We provide a brief overview of the project here. A detailed description can be found in <ref> [24] </ref>. Figure 2 shows the architecture of the PADMA parallel database 1 Experience with I/O intensive applications has shown that CPU-controlled I/O is not a good idea, and a DMA or I/O processor is certainly needed [3]. Trends in architecture are similar, i.e. <p> As of this reporting the experiment is not complete. One or more of the above hypotheses have been tested to varying degrees. Others are part of our ongoing and future investigations. The results <ref> [24] </ref> so far include (i) development of declustering techniques [14, 12] and their performance evaluation [11], (ii) declustering-aware query processing algorithms [18], (iii) parallel database loading algorithms [17], and (iv) parallel query optimization [23, 13].
Reference: [25] <author> Anthony Tomasic and Hector Garcia-Molina. </author> <title> Query processing and inverted indices in shared-nothing document information retrieval systems. </title> <journal> The VLDB Journal, </journal> <volume> 2(3) </volume> <pages> 243-271, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: skew and attribute correlation is present, and (iii) how can information about query sets be used in selecting a declustering method appropriate for a relation. 5 Project Architecture, Status & Future Directions In the last few years, three parallel database (software) architectures have been considered, namely shared-memory, shared-disk, and shared-nothing <ref> [25] </ref>. Shared-memory architectures suffer from scalability problems, and thus grew out of favor. An initial consensus was that shared-nothing architectures are the most promising [2, 25], though recently support has been expressed for the shared-disk architecture [26]. <p> Shared-memory architectures suffer from scalability problems, and thus grew out of favor. An initial consensus was that shared-nothing architectures are the most promising <ref> [2, 25] </ref>, though recently support has been expressed for the shared-disk architecture [26]. We believe that as technology is progressing, the distinction between the latter two is becoming blurred. This is because the shared-disk parallel database architecture is most suited to MPPs, while shared-nothing architecture is most suited to NOWs.
Reference: [26] <author> Anthony Tomasic, Hector Garcia-Molina, and Kurt Shoens. </author> <title> Incremental updates of inverted lists for text document retrieval. </title> <type> Technical Note STAN-CS-TN-93-1, </type> <institution> Stanford University, </institution> <year> 1993. </year> <note> Available via FTP db.stanford.edu:/pub/tomasic/stan.cs.tn.93.1.ps. </note>
Reference-contexts: Shared-memory architectures suffer from scalability problems, and thus grew out of favor. An initial consensus was that shared-nothing architectures are the most promising [2, 25], though recently support has been expressed for the shared-disk architecture <ref> [26] </ref>. We believe that as technology is progressing, the distinction between the latter two is becoming blurred. This is because the shared-disk parallel database architecture is most suited to MPPs, while shared-nothing architecture is most suited to NOWs.
Reference: [27] <author> Anthony Tomasic, Hector Garcia-Molina, and Kurt Shoens. </author> <title> Incremental updates of inverted lists for text document retrieval. </title> <booktitle> In Proceedings of 1994 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Minneapolis, MN, </address> <year> 1994. </year>
Reference-contexts: Also, with very high speed communication switches becoming commercially available, e.g. ATM and Fiber Channel, and advancements in operating system technology to make communication cheaper, e.g. Active Messages <ref> [27] </ref>, a network of workstations (NOWs) [20] can be configured to provide the performance and price/performance of scalable parallel machines. Thus, while special-purpose hardware design for databases did not succeed, use of MPPs or NOWs for building parallel databases is an extremely promising and active research area.
Reference: [28] <author> Howard R. Turtle and W. Bruce Croft. </author> <title> Uncertainty in information retrieval systems. </title> <editor> In Amihai Motro and Philippe Smets, editors, </editor> <booktitle> Proceedings of the Workshop on Uncertainty Management in Information Systems, </booktitle> <pages> pages 111-137, </pages> <address> Mallorca, Spain, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: is an integral multiple of M FX power of 2 None PM: Exactly one field unspecified Power of 2 PM: with an unspecified attribute s.t. d i M ECC power of 2 power of 2 None derived HCAM None None None derived 3 Latin Hypercube Declustering Methods (LHDM) Latin Squares <ref> [28] </ref> are two-dimensional structures which show very good properties, and have been widely used in experimental designs to ensure least redundancy and maximum coverage for the minimal experimental effort. We generalize Latin Squares into higher dimensions and define a class of declustering methods called Latin Hypercube Declustering Methods (LHDM). <p> Definition 9 [Latin Squares] A Latin Square of order n is an n fi n square composed of symbols from 0 to n 1 such that no symbol appears more than once in a row or column <ref> [28] </ref>. Zhou et al discuss some properties of declustering methods using Latin squares in [28]. <p> 9 [Latin Squares] A Latin Square of order n is an n fi n square composed of symbols from 0 to n 1 such that no symbol appears more than once in a row or column <ref> [28] </ref>. Zhou et al discuss some properties of declustering methods using Latin squares in [28]. Definition 10 [Latin Hypercubes] A Latin Hypercube of dimension d and order n is an nfinfi:::fin hypercube of dimension d composed of symbols from 0 to n 1 such that no symbol appears more than once in any row for all dimensions. <p> Lemma 3. If a declustering method is row optimal, then it is periodic. Proof: Refer <ref> [28] </ref>. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM [4], GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in <p> Proof: Refer <ref> [28] </ref>. Theorem 2 A declustering method belongs to the class LHDM iff it is row optimal. Proof: Refer [12]. 7 Corollary: DM/CMD, GDM, FX, and Latin Squares belong to class LHDM. Proof: DM [4], GDM [4], FX [16], and Latin Squares [28], each have been shown to be row optimal in the respective papers. Using Theorem 2, all these methods belong to the class LHDM. Q.E.D. 3.1 Performance Analysis of LHDM In this section we analyze Latin Hypercube Declustering Methods and derive conditions under which optimal parallelism is achieved.
Reference: [29] <author> Peter Weiss. </author> <title> Size Reduction of Inverted Files Using Data Compression and Data Structure Reorganization. </title> <type> PhD thesis, </type> <institution> George Washington University, </institution> <year> 1990. </year>
Reference: [30] <author> Justin Zobel, Alistair Moffat, and Ron Sacks-Davis. </author> <title> An efficient indexing technique for full-text database systems. </title> <booktitle> In Proceedings of 18th International Conference on Very Large Databases, Vancouver, 1992. 49 50 IEEE Computer Society 1730 Massachusetts Ave, </booktitle> <address> NW Washington, D.C. 20036-1903 Non-profit Org. U.S. Postage PAID Silver Spring, MD Permit 1398 </address>
References-found: 115

