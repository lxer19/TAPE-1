URL: http://www.cs.umn.edu/Users/dept/users/padma/declustering/de94.ps.Z
Refering-URL: http://www.cs.umn.edu/Users/dept/users/padma/declustering/
Root-URL: http://www.cs.umn.edu
Title: Performance Evaluation of Grid Based Multi-Attribute Record Declustering Methods  
Author: Bhaskar Himatsingka, Jaideep Srivastava 
Address: Minneapolis, MN55455  
Affiliation: Department of Computer Science University of Minnesota  
Abstract: I/O subsystem is widely accepted as one of the principal bottlenecks for high performance parallel databases systems. The emergence of parallel I/O architectures has made the problem of data declustering, i.e. fragmenting a file of records and allocating the pieces to different disks, one of prime importance. This is evident from the growing activity in this area. In this study we focus only on multi-attribute declustering methods which are based on some type of grid-based partitioning of the data space. While a number of such declustering methods exist, we believe a good performance evaluation of their relative merits is lacking. Almost all performance analyses so far have been theoretical, where exact conditions on number of disks, sizes of attribute domains, and query shapes and sizes have been derived, for which a certain declustering method is optimal. Also, most conditions exist for partial match queries. We believe that in practice putting restrictions on the size of attribute domains is debatable and on the shape and size of queries is unacceptable. Thus, to answer the question how do various declustering schemes perform under a wide range of query and database scenarios (both relative to each other and to the optimal)?, we have carried out a detailed performance evaluation. Parameters that are varied include shape and size of queries, database size and number of attributes, and the number of disks. The theoretical contribution of this paper is in showing that there exists no declustering methods that is strictly optimal for range queries if the number of disks is more than 5. Our findings are: (i) for large queries all methods perform almost the same and are close to optimal, (ii) there can be a substantial difference for small queries, (iii) performance of the methods is quite sensitive to query shape, and (iv) the relative difference between the methods' performance as well as their deviation from optimality decreases with the size and number of attributes in a query. Thus, we conclude that information about common queries on a relation ought to be used in deciding the declustering for it, and that this is especially crucial for small queries. Also, since there is no clear winner, parallel database systems must support a number of declustering methods. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gibson G A. </author> <title> Tutorial: Performance and reliability in disk arrays. </title> <booktitle> PDIS, </booktitle> <pages> pages 4-4, </pages> <month> Jan </month> <year> 1993. </year>
Reference-contexts: It is highly unlikely that the performance of individual disk units will improve significantly in the near future [2]. This has led to a growing interest in parallel I/O subsystems where a number of low bandwidth disks are organized in a parallel I/O architecture to achieve high aggregate bandwidth <ref> [1] </ref> [3] [6]. The introduction of database technology to data intensive applications such as scientific analysis, marketing survey and study, demographic studies, image analysis, etc., with their storage and bandwidth needs makes it necessary to use parallel I/O subsystems.
Reference: [2] <author> Patterson D A. </author> <title> Massive parallelism and massive storage: Trends and predictions for 1995-2000. </title> <booktitle> PDIS, </booktitle> <pages> pages 5-6, </pages> <month> Jan </month> <year> 1993. </year> <month> 25 </month>
Reference-contexts: 1 Introduction The fact that disk I/O is the main bottleneck in a database environment has been a consensus according to researchers [5]. The rapid increase in processor speeds in recent years [19] has made the problem acute, with a compounding effect being added by massively parallel architectures <ref> [2] </ref>. While the capacity of disks has increased dramatically, bandwidth increases have been marginal [2]. It is highly unlikely that the performance of individual disk units will improve significantly in the near future [2]. <p> The rapid increase in processor speeds in recent years [19] has made the problem acute, with a compounding effect being added by massively parallel architectures <ref> [2] </ref>. While the capacity of disks has increased dramatically, bandwidth increases have been marginal [2]. It is highly unlikely that the performance of individual disk units will improve significantly in the near future [2]. <p> years [19] has made the problem acute, with a compounding effect being added by massively parallel architectures <ref> [2] </ref>. While the capacity of disks has increased dramatically, bandwidth increases have been marginal [2]. It is highly unlikely that the performance of individual disk units will improve significantly in the near future [2]. This has led to a growing interest in parallel I/O subsystems where a number of low bandwidth disks are organized in a parallel I/O architecture to achieve high aggregate bandwidth [1] [3] [6]. <p> Definition 4 [Point Query] A point query Q is a range query s.t. <ref> [(8i 2 f1; 2; :::; kg)(l i = u i )] </ref>.
Reference: [3] <author> Solworth J A and Orji U C. </author> <title> Distorted mirrors. </title> <booktitle> PDIS, </booktitle> <pages> pages 10-17, </pages> <month> Dec </month> <year> 1991. </year>
Reference-contexts: This has led to a growing interest in parallel I/O subsystems where a number of low bandwidth disks are organized in a parallel I/O architecture to achieve high aggregate bandwidth [1] <ref> [3] </ref> [6]. The introduction of database technology to data intensive applications such as scientific analysis, marketing survey and study, demographic studies, image analysis, etc., with their storage and bandwidth needs makes it necessary to use parallel I/O subsystems.
Reference: [4] <author> Khaled A. S. Abdel-Ghaffar and Amr El Abbadi. </author> <title> Optimal disk allocation for partial match queries. </title> <booktitle> ACM Transcations on Database Systems, </booktitle> <pages> pages 132-156, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace which contains it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [17] [10] [21] [22] [11] <ref> [4] </ref>. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [21] [5], where the most frequently queried attribute is used for declustering. <p> Definitions of optimality as well as exact conditions under which the various schemes are optimal have been derived in the respective papers. A recent survey of these results is provided in Abdel-Ghaffar and El-Abbadi <ref> [4] </ref>. While a number of good theoretical analyses of query processing costs for various declustering methods exist, and provide valuable insight into their behaviour, we believe the picture is highly incomplete from a pragmatic performance evaluation perspective. <p> Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [9] [17] <ref> [4] </ref>. However, a number of theoretical issues still remain open for range queries. In this section we first summarize the main optimality results for partial match queries. <p> The ECC method provides reasonable performance even when the above conditions don't hold, and at the cost of optimality of queries, good average performance is achieved. Recent work <ref> [4] </ref> has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are greater than the number of disks. The specific focus of [4] was on p -ary cartesian product files where (8i)(d i = p). <p> Recent work <ref> [4] </ref> has derived sufficient and necessary conditions for optimality of a declustering technique with respect to partial match queries when the number of partitions on all attributes are greater than the number of disks. The specific focus of [4] was on p -ary cartesian product files where (8i)(d i = p). <p> As such the conditions under which strictly optimal declustering methods for range queries can exist will invariably be violated. Thus, in a sense "strict optimality" is too harsh a yard stick by which to measure the performance of declustering methods for range queries. Abdel-Ghaffer and El Abbadi <ref> [4] </ref> defined the metric of "optimality for response time" for partial match queries, where the number of partitions on all attributes is less than M , the number of disks.. We have taken an entirely different approach in our study. <p> We have taken an entirely different approach in our study. Since our aim is to examine the performance of various declustering methods on different kind of queries, we have chosen to carry out an experimental evaluation. We believe that while theoretical studies such as <ref> [4] </ref> [9] [8] [17] [18] provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed experimental evaluation.
Reference: [5] <author> DeWitt D and Gray J. </author> <title> Parallel database systems: The future of high performance database systems. </title> <journal> CACM, </journal> <pages> pages 85-98, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The fact that disk I/O is the main bottleneck in a database environment has been a consensus according to researchers <ref> [5] </ref>. The rapid increase in processor speeds in recent years [19] has made the problem acute, with a compounding effect being added by massively parallel architectures [2]. While the capacity of disks has increased dramatically, bandwidth increases have been marginal [2]. <p> Several declustering techniques have been proposed in the literature, and good surveys are provided in [17] [10] [21] [22] [11] [4]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [21] <ref> [5] </ref>, where the most frequently queried attribute is used for declustering. Discussion of single-attribute declustering methods is not the focus of this paper since these do not provide any benefit to query predicates not on the declustering attribute.
Reference: [6] <author> Kotz D. </author> <title> Multiprocessor file system interfaces. </title> <booktitle> PDIS, </booktitle> <pages> pages 194-201, </pages> <month> Jan </month> <year> 1993. </year>
Reference-contexts: This has led to a growing interest in parallel I/O subsystems where a number of low bandwidth disks are organized in a parallel I/O architecture to achieve high aggregate bandwidth [1] [3] <ref> [6] </ref>. The introduction of database technology to data intensive applications such as scientific analysis, marketing survey and study, demographic studies, image analysis, etc., with their storage and bandwidth needs makes it necessary to use parallel I/O subsystems.
Reference: [7] <author> G. Gibson D. A. Patterson and R. H. Katz. </author> <title> A case for redundant arrays of inexpensive disks(raid). </title> <booktitle> Proc ACM SIGMOD, </booktitle> <pages> pages 109-116, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Discussion of single-attribute declustering methods is not the focus of this paper since these do not provide any benefit to query predicates not on the declustering attribute. While assigning a data block to multiple disks in parallel I/O systems has been considered at the disk block level, for reliability <ref> [7] </ref> purposes, no corresponding data replication approaches have been proposed for data declustering. Thus, we do not consider techniques where a data subspace can be assigned to more than one disk.
Reference: [8] <author> H.C. Du. </author> <title> Disk allocation for binary cartesian product files. </title> <journal> B.I.T, </journal> <volume> 26 </volume> <pages> 138-147, </pages> <year> 1986. </year>
Reference-contexts: Variations of this method include the Generalized Disk Modulo allocation method and the Binary Disk Modulo method proposed by Du <ref> [8] </ref>. The GDM method has been shown to be strictly optimal with respect to partial match queries when the attribute domains satisfy certain conditions [9]. Li et al [18] have analyzed query properties and derived (sufficient) conditions on query shape which ensure optimality. <p> This method was shown to have good performance on square range queries of small size [11]. 3 Declustering and Optimality Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [9] <ref> [8] </ref> [10] [17] [23] [12]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [9] [17] [4]. However, a number of theoretical issues still remain open for range queries. <p> We have taken an entirely different approach in our study. Since our aim is to examine the performance of various declustering methods on different kind of queries, we have chosen to carry out an experimental evaluation. We believe that while theoretical studies such as [4] [9] <ref> [8] </ref> [17] [18] provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed experimental evaluation.
Reference: [9] <author> H.C. Du and J.S. Sobolewski. </author> <title> Disk allocation for cartesian product files on multiple disk systems. </title> <booktitle> ACM Transcations on Database Systems, </booktitle> <pages> pages 82-101, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: Another classification of declustering methods can be on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [15] type partitioning, or irregular shapes. While 2 most proposals have been in the first category <ref> [9] </ref> [17] [10] [18] [11], there have been some proposals in the second category [13]. While the question of whether regular or irregular partitions are better is by no means settled, the two approaches would require different types of directory structures and their performances cannot be directly compared. <p> The declustering problem as posed above is also referred to as the Cartesian Product file allocation problem. Since Du's disk modulo (DM) proposal <ref> [9] </ref> a decade ago, a number of techniques have have been proposed for this problem. Du generalized his original proposal to the generalized disk modulo (GDM) method. Both of these approaches are based on numbering the partitions on each dimension of the data space by integers. <p> These descriptions are only to recapitulate their salient points. Detailed descriptions exist in the respective papers. 6 2.2.1 Disk Modulo (DM) / Coordinate Modulo Declustering (CMD) The disk modulo method by Du and Sobolewski <ref> [9] </ref> and coordinate modulo declustering by Li et al [18] are similar approaches. <p> Variations of this method include the Generalized Disk Modulo allocation method and the Binary Disk Modulo method proposed by Du [8]. The GDM method has been shown to be strictly optimal with respect to partial match queries when the attribute domains satisfy certain conditions <ref> [9] </ref>. Li et al [18] have analyzed query properties and derived (sufficient) conditions on query shape which ensure optimality. <p> This method was shown to have good performance on square range queries of small size [11]. 3 Declustering and Optimality Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques <ref> [9] </ref> [8] [10] [17] [23] [12]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [9] [17] [4]. However, a number of theoretical issues still remain open for range queries. <p> [11]. 3 Declustering and Optimality Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques <ref> [9] </ref> [8] [10] [17] [23] [12]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [9] [17] [4]. However, a number of theoretical issues still remain open for range queries. In this section we first summarize the main optimality results for partial match queries. <p> an integral multiple of M FX power of 2 None None power of 2 PM: Exactly one field unspecified PM: with an unspecified attribute s.t. d i M ECC power of 2 power of 2 None HCAM None None None 3.1 Partial Match Queries and Optimality Disk Modulo (DM) schemes <ref> [9] </ref> and their variants, e.g. CMD [18], have been shown to be optimal for all partial match queries with only one unspecified attribute. They have also been shown to be optimal for all partial match queries with at least one unspecified attribute such that (9i)(d i mod M = 0). <p> We have taken an entirely different approach in our study. Since our aim is to examine the performance of various declustering methods on different kind of queries, we have chosen to carry out an experimental evaluation. We believe that while theoretical studies such as [4] <ref> [9] </ref> [8] [17] [18] provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed experimental evaluation.
Reference: [10] <author> C Faloutsos and D Metaxas. </author> <title> Disk allocation methods using error correcting codes. </title> <journal> IEEE Transcations on Computers, </journal> <pages> pages 907-914, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace which contains it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [17] <ref> [10] </ref> [21] [22] [11] [4]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [21] [5], where the most frequently queried attribute is used for declustering. <p> Another classification of declustering methods can be on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [15] type partitioning, or irregular shapes. While 2 most proposals have been in the first category [9] [17] <ref> [10] </ref> [18] [11], there have been some proposals in the second category [13]. While the question of whether regular or irregular partitions are better is by no means settled, the two approaches would require different types of directory structures and their performances cannot be directly compared. <p> A method based on representing partition co-ordinates in binary and taking their bit-wise exclusive-or (FX) was proposed by Kim et al [17]. Faloutsos et al proposed an approach based on error-correcting codes (ECC) in <ref> [10] </ref> and recently an approach based on space-filling Hilbert curves (HCAM) [11]. The co-ordinated modulo declustering (CMD) approach, based on the DM scheme has been recently proposed in [18] whose main contribution is a detailed theoretical analysis of the disk modulo methods. <p> This is based on the assumption that though the data file may not be static the data distribution tends to remain fairly stable and thus the allocation of buckets remains fixed over time. Faloutsos et al <ref> [10] </ref> give a survey of such declustering techniques. 2.1 Problem Definition Before we examine the merits of the various declustering techniques proposed, we define some terminology which has been used through out this paper. These definitions are similar to those used by Faloutsos et al [11]. <p> In this paper we consider FX when the number of partitions are greater than the number of disks and ExFX otherwise. 2.2.3 Error Correcting Codes (ECC) A declustering approach based on using error correcting codes was proposed by Faloutsos et al <ref> [10] </ref>. It works for binary attributes or an attribute where the number of partitions on it, d i , is a power of 2. <p> This method was shown to have good performance on square range queries of small size [11]. 3 Declustering and Optimality Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [9] [8] <ref> [10] </ref> [17] [23] [12]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [9] [17] [4]. However, a number of theoretical issues still remain open for range queries.
Reference: [11] <author> Christos Faloutsos and Pravin Bhagwat. </author> <title> Declustering using fractals. </title> <booktitle> PDIS, </booktitle> <pages> pages 18-25, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace which contains it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [17] [10] [21] [22] <ref> [11] </ref> [4]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [21] [5], where the most frequently queried attribute is used for declustering. <p> Another classification of declustering methods can be on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [15] type partitioning, or irregular shapes. While 2 most proposals have been in the first category [9] [17] [10] [18] <ref> [11] </ref>, there have been some proposals in the second category [13]. While the question of whether regular or irregular partitions are better is by no means settled, the two approaches would require different types of directory structures and their performances cannot be directly compared. <p> A method based on representing partition co-ordinates in binary and taking their bit-wise exclusive-or (FX) was proposed by Kim et al [17]. Faloutsos et al proposed an approach based on error-correcting codes (ECC) in [10] and recently an approach based on space-filling Hilbert curves (HCAM) <ref> [11] </ref>. The co-ordinated modulo declustering (CMD) approach, based on the DM scheme has been recently proposed in [18] whose main contribution is a detailed theoretical analysis of the disk modulo methods. <p> Recent efforts have reported results on a theoretical analysis of the disk modulo method for range queries [18] and an experimental evaluation of the HCAM method on queries of special shape (square) and size (small) <ref> [11] </ref>. <p> Faloutsos et al [10] give a survey of such declustering techniques. 2.1 Problem Definition Before we examine the merits of the various declustering techniques proposed, we define some terminology which has been used through out this paper. These definitions are similar to those used by Faloutsos et al <ref> [11] </ref>. <p> This method was shown to have good overall average performance for partial match queries. 2.2.4 Hilbert Curve Method (HCAM) A declustering method based on space filling curves was recently proposed by Faloutsos and Bhag-wat <ref> [11] </ref>. Such a curve visits all points in a k -dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. <p> The Hilbert Curve has been shown to have good clustering properties by Jagdish [16] and hence the intuition is that two buckets far away in the linear ordering would be far away in the k -dimensional grid too <ref> [11] </ref>. Thus, if H is the function which imposes the linear ordering generated by the Hilbert Curve on the grid points (buckets) then diskOf (i 1 ; i 2 ; :::; i k ) = H (&lt; i 1 ; i 2 ; :::; i k &gt;)modM . <p> This method was shown to have good performance on square range queries of small size <ref> [11] </ref>. 3 Declustering and Optimality Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [9] [8] [10] [17] [23] [12]. <p> The query size was varied from area = 1 to area = 1024. Experiment 2: Effect of Query Shape: Various theoretical analyses have posed specific conditions on the lengths of queries on attribute dimensions to derive optimality conditions. A recent study <ref> [11] </ref> has carried out an experimental evaluation of square queries. Since in general 16 queries can have any arbitrary shape, we decided to vary the full range from a square to a line by varying the aspect ratio from 1:1 to 1:M. <p> Experiment 3: The Effect of Increasing the Number of Attributes: Since in general queries can be on any number of attributes, we wanted to examine the effect of increasing the number of attributes. Since all our other experiments, as well as those reported in <ref> [11] </ref>, are on two attributes, for this experiment we considered 3 attributes. The intuition we wanted to test here was that as the number of dimensions is increased, the fraction of a query on which a declustering method is sub-optimal becomes almost negligibly small. <p> For small queries, the performance of ECC and HCAM is the best, followed by those of FX and CMD/DM, respectively. These observations are consistent with those reported in <ref> [11] </ref>. However, as we move to the large query region, the picture changes as the behaviour of all the methods becomes closer to each other. FX becomes the best scheme from size 12 onwards and remains so from then on.
Reference: [12] <author> Kasami T Fujiwara T, Ito M, Kataoka M, and Okui J. </author> <title> Performance analysis of disk allocation method using error correcting code. </title> <journal> IEEE Transcations on Information Theory, </journal> <pages> pages 379-384, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: This method was shown to have good performance on square range queries of small size [11]. 3 Declustering and Optimality Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [9] [8] [10] [17] [23] <ref> [12] </ref>. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [9] [17] [4]. However, a number of theoretical issues still remain open for range queries. In this section we first summarize the main optimality results for partial match queries.
Reference: [13] <author> Nakano M Harada L, Kitsuregawa M, and Takagi M. </author> <title> Query processing method for multi-attribute clustered relations. </title> <booktitle> VLDB, </booktitle> <pages> pages 59-70, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: While 2 most proposals have been in the first category [9] [17] [10] [18] [11], there have been some proposals in the second category <ref> [13] </ref>. While the question of whether regular or irregular partitions are better is by no means settled, the two approaches would require different types of directory structures and their performances cannot be directly compared.
Reference: [14] <author> DeWitt D J and Ghanderharizadeh S. </author> <title> Hybrid-range partitioning strategy: A new declustering strategy for multiprocessor database machine. </title> <booktitle> Proceedings of International Conference on VLDB, </booktitle> <pages> pages 481-492, </pages> <year> 1990. </year>
Reference: [15] <author> Nievergelt J, Hinterberger H, and Sevcik K C. </author> <title> The grid file: an adaptable, symmetric multikey file structure. </title> <journal> ACM Transactions on Database Systems, </journal> <pages> pages 38-71, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: Thus, we do not consider techniques where a data subspace can be assigned to more than one disk. Another classification of declustering methods can be on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file <ref> [15] </ref> type partitioning, or irregular shapes. While 2 most proposals have been in the first category [9] [17] [10] [18] [11], there have been some proposals in the second category [13].
Reference: [16] <author> H.V. </author> <title> Jagdish. Linear clustering of objects with multiple attributes. </title> <booktitle> Proceedings of ACM SIGMOD, </booktitle> <pages> pages 173-182, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Such a curve visits all points in a k -dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. The authors use such a curve, called the Hilbert Curve <ref> [16] </ref> to fill the k -dimensional grid and then assign the disks to the buckets in a round robin fashion. The Hilbert Curve has been shown to have good clustering properties by Jagdish [16] and hence the intuition is that two buckets far away in the linear ordering would be far <p> The authors use such a curve, called the Hilbert Curve <ref> [16] </ref> to fill the k -dimensional grid and then assign the disks to the buckets in a round robin fashion. The Hilbert Curve has been shown to have good clustering properties by Jagdish [16] and hence the intuition is that two buckets far away in the linear ordering would be far away in the k -dimensional grid too [11].
Reference: [17] <author> M H Kim and S Pramanik. </author> <title> Optimal file distribution for partial match queries. </title> <booktitle> Proc ACM SIGMOD, </booktitle> <pages> pages 173-182, </pages> <month> June </month> <year> 1988. </year> <month> 26 </month>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace which contains it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in <ref> [17] </ref> [10] [21] [22] [11] [4]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [21] [5], where the most frequently queried attribute is used for declustering. <p> Another classification of declustering methods can be on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [15] type partitioning, or irregular shapes. While 2 most proposals have been in the first category [9] <ref> [17] </ref> [10] [18] [11], there have been some proposals in the second category [13]. While the question of whether regular or irregular partitions are better is by no means settled, the two approaches would require different types of directory structures and their performances cannot be directly compared. <p> A method based on representing partition co-ordinates in binary and taking their bit-wise exclusive-or (FX) was proposed by Kim et al <ref> [17] </ref>. Faloutsos et al proposed an approach based on error-correcting codes (ECC) in [10] and recently an approach based on space-filling Hilbert curves (HCAM) [11]. <p> While the bound increases with the number of disks, it decreases rapidly with query size as well as the number of attributes. 2.2.2 Field-wise Exclusive-or (FX) This allocation method was proposed by Kim and Pramanik <ref> [17] </ref> with efficient partial match retrieval in mind. The main idea behind this approach is the use of bitwise exclusive or operation () on the binary values of a bucket-id. <p> This method was shown to have good performance on square range queries of small size [11]. 3 Declustering and Optimality Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [9] [8] [10] <ref> [17] </ref> [23] [12]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [9] [17] [4]. However, a number of theoretical issues still remain open for range queries. <p> 3 Declustering and Optimality Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [9] [8] [10] <ref> [17] </ref> [23] [12]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [9] [17] [4]. However, a number of theoretical issues still remain open for range queries. In this section we first summarize the main optimality results for partial match queries. <p> We have taken an entirely different approach in our study. Since our aim is to examine the performance of various declustering methods on different kind of queries, we have chosen to carry out an experimental evaluation. We believe that while theoretical studies such as [4] [9] [8] <ref> [17] </ref> [18] provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed experimental evaluation.
Reference: [18] <author> Jianzhong Li, Jaideep Srivastava, and Doron Rotem. Cmd: </author> <title> A multidimensional declustering method for parallel database systems. </title> <booktitle> VLDB, </booktitle> <month> August </month> <year> 1992. </year>
Reference-contexts: Another classification of declustering methods can be on whether the partitioning of the data space is done in terms of regular grids, e.g. grid-file [15] type partitioning, or irregular shapes. While 2 most proposals have been in the first category [9] [17] [10] <ref> [18] </ref> [11], there have been some proposals in the second category [13]. While the question of whether regular or irregular partitions are better is by no means settled, the two approaches would require different types of directory structures and their performances cannot be directly compared. <p> Faloutsos et al proposed an approach based on error-correcting codes (ECC) in [10] and recently an approach based on space-filling Hilbert curves (HCAM) [11]. The co-ordinated modulo declustering (CMD) approach, based on the DM scheme has been recently proposed in <ref> [18] </ref> whose main contribution is a detailed theoretical analysis of the disk modulo methods. <p> Since the most general query on a single relation is the range query, we therefore believe that the performance evaluation of various declustering methods should be carried out on range queries. Recent efforts have reported results on a theoretical analysis of the disk modulo method for range queries <ref> [18] </ref> and an experimental evaluation of the HCAM method on queries of special shape (square) and size (small) [11]. <p> Thus all database machines use some form of declustering to improve performance. A number of declustering methods have been proposed in the past, aimed at achieving good performance for partial match queries that refer to several attributes. Li et al <ref> [18] </ref> show the need for declustering techniques which also perform well for range queries. Almost all methods are based on cartesian product files. Most of them assume that the allocation of buckets to disks does not change over time. <p> These descriptions are only to recapitulate their salient points. Detailed descriptions exist in the respective papers. 6 2.2.1 Disk Modulo (DM) / Coordinate Modulo Declustering (CMD) The disk modulo method by Du and Sobolewski [9] and coordinate modulo declustering by Li et al <ref> [18] </ref> are similar approaches. A bucket &lt; i 1 ; i 2 ; :::; i k &gt; is assigned to the disk unit diskOf (i 1 ; i 2 ; :::; i k ) = (i 1 ; i 2 ; :::; i k ) mod M . <p> Variations of this method include the Generalized Disk Modulo allocation method and the Binary Disk Modulo method proposed by Du [8]. The GDM method has been shown to be strictly optimal with respect to partial match queries when the attribute domains satisfy certain conditions [9]. Li et al <ref> [18] </ref> have analyzed query properties and derived (sufficient) conditions on query shape which ensure optimality. <p> CMD <ref> [18] </ref>, have been shown to be optimal for all partial match queries with only one unspecified attribute. They have also been shown to be optimal for all partial match queries with at least one unspecified attribute such that (9i)(d i mod M = 0). <p> We have taken an entirely different approach in our study. Since our aim is to examine the performance of various declustering methods on different kind of queries, we have chosen to carry out an experimental evaluation. We believe that while theoretical studies such as [4] [9] [8] [17] <ref> [18] </ref> provide valuable insight into the properties of declustering methods, the picture is not complete without a detailed experimental evaluation. <p> Only in small regions is it bested by any other scheme, once by FX and another time by ECC. DM/CMD uniformly has the worst performance in this scenario, which is consistent with the results shown in <ref> [18] </ref> for small queries. For large queries, however, the picture changes completely. As shown in Figure 5 (b), DM/CMD and FX consistently out-perform HCAM. ECC becomes better than HCAM from about 14 disks onwards. From about 25 disks onwards ECC performs better than DM/CMD. FX is consistently the best performer.
Reference: [19] <author> Supnik R M. </author> <title> Digital's alpha project. </title> <journal> CACM, </journal> <pages> pages 30-81, </pages> <month> Feb </month> <year> 1993. </year>
Reference-contexts: 1 Introduction The fact that disk I/O is the main bottleneck in a database environment has been a consensus according to researchers [5]. The rapid increase in processor speeds in recent years <ref> [19] </ref> has made the problem acute, with a compounding effect being added by massively parallel architectures [2]. While the capacity of disks has increased dramatically, bandwidth increases have been marginal [2]. It is highly unlikely that the performance of individual disk units will improve significantly in the near future [2].
Reference: [20] <author> F. M. Reza. </author> <title> An Introduction to Information Theory. </title> <publisher> McGraw-Hill, </publisher> <year> 1961. </year>
Reference-contexts: Thus if each d i can be represented as a binary string of length m then we need to construct an ECC on km bits out of which log 2 M bits will be parity check bits while the rest will be information bits. Tables in Reza <ref> [20] </ref> give the appropriate parity check equations. These are of the form a 1 + a 2 + ::: = c i for 1 i log 2 M . Assign the solution strings (buckets) to disk 0.
Reference: [21] <author> Ghanderharizadeh S and DeWitt D J. </author> <title> A multiuser performance analysis of alternative declus-tering strategies. </title> <booktitle> Proceedings of Data Engineering Conference, </booktitle> <month> Feb </month> <year> 1990. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace which contains it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [17] [10] <ref> [21] </ref> [22] [11] [4]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [21] [5], where the most frequently queried attribute is used for declustering. <p> Several declustering techniques have been proposed in the literature, and good surveys are provided in [17] [10] <ref> [21] </ref> [22] [11] [4]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [21] [5], where the most frequently queried attribute is used for declustering. Discussion of single-attribute declustering methods is not the focus of this paper since these do not provide any benefit to query predicates not on the declustering attribute.
Reference: [22] <author> Ghanderharizadeh S and DeWitt D J. </author> <title> A performance analysis of alternative multi-attribute declustering strategies. </title> <booktitle> ACM SIGMOD, </booktitle> <pages> pages 29-38, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: A data point (record) is stored on the disk (s) to which the subspace which contains it is allocated. Several declustering techniques have been proposed in the literature, and good surveys are provided in [17] [10] [21] <ref> [22] </ref> [11] [4]. A major class is of single-attribute declustering methods, where the space partitioning is based on a single (preferably highly queried) attribute. Examples are [21] [5], where the most frequently queried attribute is used for declustering.
Reference: [23] <author> Y Y Sung. </author> <title> Performance anaylysis of disk modulo allocation method for cartesian product files. </title> <journal> IEEE Transcations on Softw Eng., </journal> <pages> pages 1018-1026, </pages> <month> Sept </month> <year> 1988. </year> <month> 27 </month>
Reference-contexts: This method was shown to have good performance on square range queries of small size [11]. 3 Declustering and Optimality Much work has been done in proving results about performance bounds of partial match queries for different declustering techniques [9] [8] [10] [17] <ref> [23] </ref> [12]. Some results also exist about the conditions under which a strictly optimal declustering can be achieved for partial match queries [9] [17] [4]. However, a number of theoretical issues still remain open for range queries.
References-found: 23

