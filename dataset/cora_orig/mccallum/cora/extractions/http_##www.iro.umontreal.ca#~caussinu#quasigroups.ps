URL: http://www.iro.umontreal.ca/~caussinu/quasigroups.ps
Refering-URL: http://www.iro.umontreal.ca/~caussinu/
Root-URL: http://www.iro.umontreal.ca
Title: The Complexity of Computing over  
Author: Quasigroups Herve Caussinus and Francois Lemieux 
Abstract: In [7] the notions of recognition by semigroups and by programs over semigroups were extended to groupoids. This led to a new characterization of the context-free languages and the class SAC 1 . In this paper, we investigate the classes of languages obtained when the groupoids are restricted to be quasigroups (i.e. the multiplication table forms a latin square). We prove that languages recognized by quasigroups are regular and that programs over quasigroups characterize NC 1 . We introduce the notions of linear recognition by groupoids and by programs over groupoids, and characterize the linear context-free languages and NL. Here again, when quasigroups are used, only regular languages and languages in NC 1 can be obtained. We also consider the problem of evaluating a well-parenthesized expression over a finite loop (a quasi-group with an identity). This problem is in NC 1 for any finite loop, and we give algebraic conditions for its completeness. In particular, we prove that it is sufficient that the loop be nonsolvable, extending a well-known theorem of Barrington ([3]). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.A. Albert, Quasigroups. </author> <title> I, </title> <journal> Trans. Amer. Math. Soc., </journal> <volume> Vol. </volume> <month> 54 </month> <year> (1943) </year> <month> pp.507-519. </month>
Reference-contexts: The conclusion follows from an iterated application of this argument. 6 Basic Theory of Loops In this section, we present some basic results in finite loop theory. For more details, the reader can consult <ref> [1, 2, 8, 9, 18] </ref>. Recall that a loop is a quasigroup with an identity. Given a loop L and a subset S L, we denote by hSi the subloop of L generated by S. <p> For any element a of a loop L we define two functions: R (a) : x ! xa and L (a) : x ! ax. In <ref> [1] </ref> Albert defines the multiplication group M (L) as the group generated by the set fR (a); L (a) j a 2 Lg under composition. (This can also be defined for any groupoids: with quasigroup we still get a group, but for arbitrary groupoid we obtain a semigroup called multiplication semigroup.)
Reference: [2] <author> A.A. Albert, Quasigroups. </author> <title> II, </title> <journal> Trans. Amer. Math. Soc., </journal> <volume> Vol. </volume> <month> 55 </month> <year> (1944) </year> <month> pp.401-419. </month>
Reference-contexts: The conclusion follows from an iterated application of this argument. 6 Basic Theory of Loops In this section, we present some basic results in finite loop theory. For more details, the reader can consult <ref> [1, 2, 8, 9, 18] </ref>. Recall that a loop is a quasigroup with an identity. Given a loop L and a subset S L, we denote by hSi the subloop of L generated by S. <p> Indeed, isotopy can be define for any groupoid but the above lemma applies only to groupoids with an identity. Isotopy plays no role in group theory since it can be shown (see <ref> [2] </ref>) that if two groups are isotopic (or even if a loop is isotopic to a group) then they are isomorphic as well. It appears naturally from application of loop theory in geometry and combinatoric (see [13] and [18]).
Reference: [3] <author> D.A. Barrington, </author> <title> Bounded-Width Polynomial-Size Branching Programs Recognize Exactly Those Languages in NC 1 , JCSS 38, </title> <booktitle> 1 (1989), </booktitle> <pages> pp. 150-164. </pages>
Reference-contexts: Then, Kleene's theorem says that the class of languages recognized by a finite semigroup corresponds precisely to the class of regular languages (see [14]). In <ref> [3] </ref> Barrington generalizes the above definition in order to characterize a larger class of languages. This is done by allowing h to be any projection from A fl to S fl and turns out to be equivalent to constant-width branching programs. <p> The length of (P n ) n0 is a function mapping n to the number of instructions in P n . Barrington <ref> [3] </ref> has shown that polynomial-length programs over a finite semigroup recognize exactly NC 1 , the class of languages recognized by a family of logarithmic-depth bounded fan-in Boolean circuits. Hence, semigroups can be associated with classes of languages in two different ways. <p> If C is the class of all finite groups then P C is equal to NC 1 , and the equality remains true if C contains only S 5 , the group of permutations on five points <ref> [3] </ref>. 1 By alphabetic morphism we mean a function h : A ! S extending to an homomorphism h : A fl ! S fl Example 1.2 A semigroup is said to be aperiodic if it contains no nontrivial group. <p> Theorem 7.4 If L is a simple loop that is not an abelian group then any function f : L n ! L can be represented over L. As a consequence, we have the following loop-analogue of Barrington's theorem <ref> [3] </ref>. Theorem 7.6 If G is a groupoid that contains a nonsolvable loop then, the problem of evaluating an expression over G is complete for NC 1 under AC 0 - reductions. <p> Then, any boolean formula of depth k log n can be represented by an expression over L of length at most t 3k log n , which is polynomial. We now state a generalization of a theorem of Barrington <ref> [3] </ref> saying that the word problem over any nonsolvable group is complete for NC 1 . 19 Theorem 7.6 If G is a groupoid that contains a nonsolvable loop then, the problem of evaluating an expression over G is complete for NC 1 under AC 0 - reductions. Proof. <p> If the multiplication semigroup M (G) contains a nonsolvable group, then the problem of evaluating an expression over G is complete for NC 1 under AC 0 -reductions. 21 Proof. If M = M (G) contains a nonsolvable group then M also contains a nonabelian simple group. In <ref> [3] </ref> it is shown that the problem of evaluating a program over any nonabelian simple group D is complete for NC 1 . Furthermore, we can suppose w.l.o.g. that on any input the program yields either the identity (and accepts) or some other fixed element (and rejects).
Reference: [4] <author> D.A. Barrington H. Straubing and D. Therien, </author> <title> Non-Uniform Automata Over Groups, </title> <booktitle> Information and Computation 89 (1990), </booktitle> <pages> pp. 109-132. </pages>
Reference-contexts: As a consequence, we have the following loop-analogue of Barrington's theorem [3]. Theorem 7.6 If G is a groupoid that contains a nonsolvable loop then, the problem of evaluating an expression over G is complete for NC 1 under AC 0 - reductions. In <ref> [4] </ref> Barrington, Straubing and Therien conjectured that the word problem over a solvable group is not complete for NC 1 . <p> Clearly, the reduction from f to v is a simple projection. 8 Solvable loops It is conjectured in <ref> [4] </ref> that the problem of evaluating a word over a solvable group is not complete for NC 1 . However, we can construct a solvable loop of order 10 for which the problem of evaluating an expression is complete for NC 1 .
Reference: [5] <author> D. Barrington and D. Therien, </author> <title> Finite Monoids and the Fine Structure of N C 1 , JACM 35, </title> <booktitle> 4 (1988), </booktitle> <pages> pp. 941-952. </pages>
Reference-contexts: On the other hand, P C is equal to AC 0 , the class of languages recognized by constant-depth polynomial-size Boolean circuits <ref> [11, 5] </ref>. Example 1.3 A semigroup is solvable if it contains only solvable groups (see Sect. 6). <p> On the other hand, P C corresponds to ACC 0 , the class of languages recognized by polynomial-size constant-depth Boolean circuits augmented with MOD q gates which output 1 if and only if the sum of their inputs is congruent to 0 modulo q <ref> [5] </ref> (ACC 0 is a class between AC 0 and NC 1 ). These examples illustrate how subclasses of semigroups can be related to subclasses of languages, giving new insight for understanding the inner structure of NC 1 .
Reference: [6] <author> M. Beaudry and P. McKenzie, </author> <title> Circuits, Matrices and Nonassociative Computation, </title> <booktitle> Proc. of the 7th Structure in Complexity Theory Conference, </booktitle> <year> (1992), </year> <pages> pp. 94-106. </pages>
Reference-contexts: This result is somewhat surprising since it says that, independently of the presence of associativity, it is sufficient for a finite groupoid to satisfy the cancellation laws for its word problem to belong to NC 1 . Few subclasses of groupoids have been studied until now (see <ref> [7, 6, 17] </ref>). The reason is that there exists no structural theory of groupoids that could help us to define natural subclasses. In [17] Muscholl defined the class of linear groupoids as those groupoids that contain an absorbing element 0 and that satisfy the identity (ab)(cd) = 0.
Reference: [7] <author> F. Bedard, F. Lemieux and P.McKenzie, </author> <title> Extensions to Barrington's M-program model, </title> <booktitle> TCS 107 (1993), </booktitle> <pages> pp. 31-61. </pages>
Reference-contexts: These examples illustrate how subclasses of semigroups can be related to subclasses of languages, giving new insight for understanding the inner structure of NC 1 . In order to capture larger classes of languages, we need to extend further these notions of recognition. A solution, introduced in <ref> [7] </ref>, resides in the addition of nondeterminism by means of the non-associative analogues of semigroups. A groupoid G is a set with a binary operation. In this paper, we consider only finite groupoids. The order of G is its number of elements. <p> A program P n over a groupoid G is defined as in the associative case except that P n accepts an input w 2 f0; 1g fl if and only if G (h 1 h 2 h m ) " F 6= ;. In <ref> [7] </ref> it is proved that the class of languages recognized by finite groupoids corresponds exactly to the context-free languages. Moreover, polynomial-length programs over finite groupoids define the class SAC 1 of those languages recognized by polynomial-size logarithmic-depth Boolean circuits where only the AND gates have a bounded fan-in. <p> This result is somewhat surprising since it says that, independently of the presence of associativity, it is sufficient for a finite groupoid to satisfy the cancellation laws for its word problem to belong to NC 1 . Few subclasses of groupoids have been studied until now (see <ref> [7, 6, 17] </ref>). The reason is that there exists no structural theory of groupoids that could help us to define natural subclasses. In [17] Muscholl defined the class of linear groupoids as those groupoids that contain an absorbing element 0 and that satisfy the identity (ab)(cd) = 0. <p> Theorem 4.1 A language is linear if and only if it is linearly recognized by a finite groupoid. Proof. It is shown in [17] (see also <ref> [7] </ref>) that any linear language L can be recognized (in the general sense) by a finite linear groupoid G having the 11 property that any tree T 2 T fl evaluates to a non-accepting element of G. This implies that L is linearly recognized by G. <p> Clearly, M is a linear grammar generating the language L. Theorem 4.2 A language is in NL if and only if it is linearly recognized by polynomial-length programs over a finite groupoid. Proof. In [17] (see also <ref> [7] </ref>), a linear groupoid G 0 is constructed such that any language in NL is recognized by polynomial-length programs over G 0 . This shows that any language in NL is linearly recognized by a (linear) groupoid. The other direction is immediate since any linear language belongs to NL. <p> The length of the resulting program will be increased only by a constant factor. This new program over M can be transformed into a parenthesized program over G (for a formal definition see <ref> [7] </ref>, where this is called deterministic program). This can be done recursively as follows. Single instruction programs of the form hi; R (a); R (b)i and hi; L (a); L (b)i are respectively transformed into (h1; c; cihi; a; bi) and (hi; a; bih1; c; ci). <p> The resulting parenthesized program accepts if it evaluates to cU and rejects if it evaluates to cV . 9 Conclusion We have not treated the case where the quasigroup, instead of being fixed, is given with the input. We know from <ref> [7] </ref> that the word problem for polynomially growing groupoids is still in SAC 1 . Furthermore, it is not difficult to see that the linear restriction of this problem is in NL.
Reference: [8] <author> R.H. Bruck, </author> <title> Contributions to the Theory of Loops, </title> <journal> Trans. AMS, </journal> <note> (60) 1946 pp.245-354. </note>
Reference-contexts: The conclusion follows from an iterated application of this argument. 6 Basic Theory of Loops In this section, we present some basic results in finite loop theory. For more details, the reader can consult <ref> [1, 2, 8, 9, 18] </ref>. Recall that a loop is a quasigroup with an identity. Given a loop L and a subset S L, we denote by hSi the subloop of L generated by S. <p> with quasigroup we still get a group, but for arbitrary groupoid we obtain a semigroup called multiplication semigroup.) The inner mapping group is defined as the subgroup J M (L) generated by all ff 2 M (L) such that 1ff = 1, where 1 is the identity of L (see <ref> [8] </ref>). The following proposition is proved in [9] (p.63). 15 Proposition 6.1 For any subset S of a loop L, the subloop hSJ i is the small-est normal subloop of L that contains S. We say that hSJ i is the normal subloop generated by S.
Reference: [9] <author> R.H. Bruck, </author> <title> A Survey of Binary Systems, </title> <publisher> Springer-Verlag, </publisher> <year> 1966. </year>
Reference-contexts: The conclusion follows from an iterated application of this argument. 6 Basic Theory of Loops In this section, we present some basic results in finite loop theory. For more details, the reader can consult <ref> [1, 2, 8, 9, 18] </ref>. Recall that a loop is a quasigroup with an identity. Given a loop L and a subset S L, we denote by hSi the subloop of L generated by S. <p> The commutator-associator subloop L 0 is the subloop of L generated by all commutators and associators. It is proved in <ref> [9] </ref> that for any loop L, L 0 is a normal subloop of L. <p> The following proposition is proved in <ref> [9] </ref> (p.63). 15 Proposition 6.1 For any subset S of a loop L, the subloop hSJ i is the small-est normal subloop of L that contains S. We say that hSJ i is the normal subloop generated by S.
Reference: [10] <author> S.R. Buss, </author> <title> The Boolean Formula Value Problem is in ALOGTIME, </title> <booktitle> Proc. of the 19th ACM Symp. on the Theory of Computing (1987), </booktitle> <pages> pp. 123-131. </pages>
Reference-contexts: Proof. The problem of evaluating an expression over any fixed finite groupoid G is in NC 1 . This is because the set of expressions over any finite groupoid, that evaluate to some given element, forms a parenthesis language, and therefore, belongs to NC 1 (see <ref> [10] </ref>). It remains to show that any function in NC 1 can be reduced to this problem when G contains a nonsolvable loop. If L is a nonsolvable loop of G, then there exists a morphism ' : L ! S, where S is a nonabelian simple loop.
Reference: [11] <author> A.K. Chandra, S. Fortune and R. Lipton, </author> <title> Unbounded Fan-in Circuits and Associative Functions, </title> <booktitle> Proc. of the 15th ACM Symp. on the Theory of Computing (1983), </booktitle> <pages> pp. 52-60. </pages>
Reference-contexts: On the other hand, P C is equal to AC 0 , the class of languages recognized by constant-depth polynomial-size Boolean circuits <ref> [11, 5] </ref>. Example 1.3 A semigroup is solvable if it contains only solvable groups (see Sect. 6).
Reference: [12] <author> S.A. Cook, </author> <title> A Taxonomy of Problems with Fast Parallel Algorithms, </title> <booktitle> Information and Control 64 (1985), </booktitle> <pages> pp. 2-22. </pages>
Reference-contexts: The class SAC 1 can also be defined as the class of languages logspace-reducible to a context-free language [22], and it contains many important subclasses such as NC 1 , L and NL (see <ref> [12] </ref>). As we have just seen, subclasses of the regular languages and of NC 1 can be naturally expressed in terms of 3 subclasses of semigroups.
Reference: [13] <editor> J. Denes and A.D. Keedwell, </editor> <title> Latin Squares and their Applications, </title> <publisher> English University Press, </publisher> <year> 1974. </year> <month> 23 </month>
Reference-contexts: A quasigroup is not necessarily associative but, like a group, the multiplication table of a finite quasigroup forms a latin square. A loop is a quasigroup with an identity element. The study of quasigroups has a long history (see <ref> [13] </ref>). The combinatorial properties of latin squares were investigated as early as the eighteenth century, and quasigroups were intensively studied between 1930 and 1950. In particular, a theory of loops has been developed which closely follows that of groups. <p> Isotopy plays no role in group theory since it can be shown (see [2]) that if two groups are isotopic (or even if a loop is isotopic to a group) then they are isomorphic as well. It appears naturally from application of loop theory in geometry and combinatoric (see <ref> [13] </ref> and [18]). With any loop (L; ) we associate two loops (L; =) and (L; n), respectively called right and left division of (L; ). Their products are defined as follows.
Reference: [14] <author> S. Eilenberg, </author> <title> Automata, Languages, and Machines, </title> <publisher> Academic Press, Vol. A, </publisher> <year> 1974. </year>
Reference-contexts: Then, Kleene's theorem says that the class of languages recognized by a finite semigroup corresponds precisely to the class of regular languages (see <ref> [14] </ref>). In [3] Barrington generalizes the above definition in order to characterize a larger class of languages. This is done by allowing h to be any projection from A fl to S fl and turns out to be equivalent to constant-width branching programs.
Reference: [15] <author> W.D. Maurer and J. Rhodes, </author> <title> A Property of Finite Simple Non-abelian Groups, </title> <booktitle> Proc. AMS 16 (1965), </booktitle> <pages> 552-554. </pages>
Reference-contexts: While the above results use only the cancellation laws, next ones rely on some elements of loop theory that will be presented in Section 6. The main 5 result proved in Section 7 is a generalization of a theorem of Maurer and Rhodes <ref> [15] </ref> saying that any function f : G n ! G can be represented over a simple nonabelian group G. Theorem 7.4 If L is a simple loop that is not an abelian group then any function f : L n ! L can be represented over L. <p> Proof. Clearly a=b = aR 1 (b) and anb = bL 1 (a). Since k is the exponent of M, then R 1 (b) = R k1 (b) and L 1 (b) = L k1 (b), proving the lemma. 16 7 Representing functions with expressions In <ref> [15] </ref> Maurer and Rhodes proved that if G is a simple nonabelian group then any function G n ! G can be represented by a word over G. In this section, we extend this theorem to the case of loops.
Reference: [16] <author> G.L. Miller, </author> <title> On the n log n Isomorphic Technique, </title> <booktitle> Proc. of the 10th ACM Symp. on the Theory of Computing (1978), </booktitle> <pages> pp. 51-58. </pages>
Reference-contexts: In particular, a theory of loops has been developed which closely follows that of groups. Quasigroups have also been considered from the point of view of computational complexity. In <ref> [16] </ref> some subproblems of the graph isomor-phism problem were investigated and graphs constructed from combinatorial structures were considered. In particular, the isomorphism problem for latin square graphs was proved to be in DTIME (n log n ).
Reference: [17] <author> A. Muscholl, </author> <title> Characterizations of LOG, LOGDCFL and NP based on groupoid programs, </title> <type> Manuscript, </type> <year> 1992. </year>
Reference-contexts: This result is somewhat surprising since it says that, independently of the presence of associativity, it is sufficient for a finite groupoid to satisfy the cancellation laws for its word problem to belong to NC 1 . Few subclasses of groupoids have been studied until now (see <ref> [7, 6, 17] </ref>). The reason is that there exists no structural theory of groupoids that could help us to define natural subclasses. In [17] Muscholl defined the class of linear groupoids as those groupoids that contain an absorbing element 0 and that satisfy the identity (ab)(cd) = 0. <p> Few subclasses of groupoids have been studied until now (see [7, 6, 17]). The reason is that there exists no structural theory of groupoids that could help us to define natural subclasses. In <ref> [17] </ref> Muscholl defined the class of linear groupoids as those groupoids that contain an absorbing element 0 and that satisfy the identity (ab)(cd) = 0. <p> Furthermore, let fl (X) be the set of all linear trees marked with X, and M LIN the set of linear marked trees in M. Theorem 4.1 A language is linear if and only if it is linearly recognized by a finite groupoid. Proof. It is shown in <ref> [17] </ref> (see also [7]) that any linear language L can be recognized (in the general sense) by a finite linear groupoid G having the 11 property that any tree T 2 T fl evaluates to a non-accepting element of G. This implies that L is linearly recognized by G. <p> Finally, we define the production S ! Z for all Z 2 F . Clearly, M is a linear grammar generating the language L. Theorem 4.2 A language is in NL if and only if it is linearly recognized by polynomial-length programs over a finite groupoid. Proof. In <ref> [17] </ref> (see also [7]), a linear groupoid G 0 is constructed such that any language in NL is recognized by polynomial-length programs over G 0 . This shows that any language in NL is linearly recognized by a (linear) groupoid.
Reference: [18] <author> H.O. Pfugfelder, </author> <title> Quasigroups and Loops: Introduction, </title> <publisher> Heldermann Verlag, </publisher> <year> 1990. </year>
Reference-contexts: The conclusion follows from an iterated application of this argument. 6 Basic Theory of Loops In this section, we present some basic results in finite loop theory. For more details, the reader can consult <ref> [1, 2, 8, 9, 18] </ref>. Recall that a loop is a quasigroup with an identity. Given a loop L and a subset S L, we denote by hSi the subloop of L generated by S. <p> It appears naturally from application of loop theory in geometry and combinatoric (see [13] and <ref> [18] </ref>). With any loop (L; ) we associate two loops (L; =) and (L; n), respectively called right and left division of (L; ). Their products are defined as follows.
Reference: [19] <author> M.P. Schutzenberger, </author> <title> On Finite Monoids having only trivial subgroups, </title> <booktitle> Information and Control 8 (1965), </booktitle> <pages> pp. 190-194. </pages>
Reference-contexts: If C is the class of all finite aperiodic semigroups, then H C is the class of regular languages that can be defined from the letters of the alphabet using Boolean operations and concatenation <ref> [19] </ref>. On the other hand, P C is equal to AC 0 , the class of languages recognized by constant-depth polynomial-size Boolean circuits [11, 5]. Example 1.3 A semigroup is solvable if it contains only solvable groups (see Sect. 6).
Reference: [20] <author> H. Straubing, </author> <title> Representing Functions by Words over Finite Semigroups, Uni-versite de Montreal, </title> <type> Technical Report #838, </type> <year> 1992. </year>
Reference-contexts: The above lemma cannot be generalized to quasigroup. To see this, consider Z 4 , the cyclic group of order four. It is well know that the AN D function of two bits cannot be represented over any abelian group (e.g. see <ref> [20] </ref>). But we can find a quasigroup, isotopic to Z 4 , on which the AN D can be represented. <p> The conclusion follows from Lemma 7.1. 17 We can now prove our generalization of the Maurer-Rhodes theorem. The proof is a straightforward adaptation for loops of a version due to Howard Straubing <ref> [20] </ref>. Theorem 7.4 If L is a finite simple loop that is not an abelian group then every function f : L n ! L can be represented over L. Proof. Let g 1 2 Lnf1g, where 1 is the identity of L, and let g 2 2 L.
Reference: [21] <author> D. Therien, </author> <title> Classification of Finite Monoids: The Language Approach, </title> <booktitle> TCS 14 (1981), </booktitle> <pages> pp. 195-208. </pages>
Reference-contexts: If C is the class of all solvable semigroups, then H C is the class of regular languages that can be defined from the letters of the alphabet using Boolean operations, concatenation and a type of modular concatenation (see <ref> [21] </ref>).
Reference: [22] <author> H. Venkateswaran, </author> <title> Properties that Characterize LOGCFL, </title> <booktitle> Proc. of the 19th ACM Symp. on the Theory of Computing (1987), </booktitle> <pages> pp. 141-150. </pages>
Reference-contexts: Moreover, polynomial-length programs over finite groupoids define the class SAC 1 of those languages recognized by polynomial-size logarithmic-depth Boolean circuits where only the AND gates have a bounded fan-in. The class SAC 1 can also be defined as the class of languages logspace-reducible to a context-free language <ref> [22] </ref>, and it contains many important subclasses such as NC 1 , L and NL (see [12]). As we have just seen, subclasses of the regular languages and of NC 1 can be naturally expressed in terms of 3 subclasses of semigroups.
Reference: [23] <author> M.J. Wolf, </author> <title> Nondeterministic Circuits, Space Complexity and Quasigroups, </title> <booktitle> TCS 125 (1994), </booktitle> <pages> pp. 295-314. </pages>
Reference-contexts: In particular, the isomorphism problem for latin square graphs was proved to be in DTIME (n log n ). Miller also showed that the isomorphism problem for quasigroups is in DTIME (n log n ) and, recently, Wolf <ref> [23] </ref> proved that these problems are in DSPACE (log 2 (n)). In Section 3, we shows that quasigroups are no more powerful than semi-groups. Theorem 3.2 Any language recognized by a finite quasigroup is regular.
References-found: 23

