URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1995/tr-95-052.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1995.html
Root-URL: http://www.icsi.berkeley.edu
Title: Reactive Local Search for the Maximum Clique Problem  
Author: R. Battiti M. Protasi 
Note: Work partially done while visiting the International  
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  Trento, Via Sommarive 14, 38050 Povo (Trento) Italy,  "Tor Vergata", Via della ricerca scientifica, 00133 Roma Italy,  Berkeley, Ca  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  Dipartimento di Matematica, Universita' di  Dipartimento di Matematica, Universita' di Roma  Computer Science Institute,  
Pubnum: TR-95-052  
Email: battiti@science.unitn.it  protasi@mat.utovrm.it  
Phone: (510) 643-9153 FAX (510) 643-7684  
Date: September 1995  
Abstract: A new Reactive Local Search (RLS ) algorithm is proposed for the solution of the Maximum-Clique problem. RLS is based on local search complemented by a feedback (memory-based) scheme to determine the amount of diversification. The reaction acts on the single parameter that decides the temporary prohibition of selected moves in the neighborhood, in a manner inspired by Tabu Search. The performance obtained in computational tests appears to be significantly better with respect to all algorithms tested at the the second DIMACS implementation challenge. The worst-case complexity per iteration of the algorithm is O(maxfn; mg) where n and m are the number of nodes and edges of the graph. In practice, when a vertex is moved, the number of operations tends to be proportional to its number of missing edges and therefore the iterations are particularly fast in dense graphs. Key words: maximum clique problem, heuristic algorithms, tabu search, reactive search. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Ausiello, P. Crescenzi, and M. Protasi, </author> <title> Approximate Solution of NP Optimization Problems, </title> <note> Theoretical Computer Science, to appear. </note>
Reference-contexts: The Maximum Clique (MC) problem asks for a clique of maximum cardinality. MC is an NP-hard problem, furthermore strong negative results have been shown about its approximation properties (for a survey on the approximability of NP-hard problems see <ref> [1] </ref>). In particular, if P 6= N P , no polynomial time algorithm can approximate the Maximum Clique problem within a factor n 1 4 , where n is the number of nodes of the graph [8].
Reference: [2] <author> T. Back and H. P. Schwefel, </author> <title> An Overview of Evolutionary Algorithms for Parameter Optimization, </title> <booktitle> Evolutionary Computation, 1(1) (1993), </booktitle> <pages> 1-23. </pages>
Reference-contexts: As an example, Genetic Algorithms <ref> [14, 2] </ref> and advanced Simulated Annealing [16] versions with about five free parameters are not unusual, and one finds versions in the literature with up to about ten parameters.
Reference: [3] <author> E. Balas and C.S. Yu, </author> <title> Finding a Maximum Clique in an Arbitrary Graph, </title> <journal> SIAM J. Computing, </journal> <volume> 14(4) (1986), </volume> <pages> 1054-1068. </pages>
Reference-contexts: In addition, heuristics are crucial instrument to diminish the size of the search tree in exact branch and bound algorithms (as an example, coloring heuristics are used in the seminal work of Balas and Yu <ref> [3] </ref>). Here the scope is limited to methods based on local search with prohibition-based diversification techniques. In particular, in the Tabu Search (TS) framework, diversification 2 is obtained through the temporary prohibition of some moves.
Reference: [4] <author> R. S. Barr, B. L. Golden, J. P. Kelly, M. G. C. Resende, and W. Stewart, </author> <title> Designing and Reporting on Computational Experiments with Heuristic Methods, </title> <type> Technical Report, </type> <institution> CS&E Dept., Southern Methodist University, Dallas, TX, </institution> <year> 1995. </year>
Reference-contexts: Although powerful, some algorithmic schemes based on TS are complex and contain many possible choices and parameters, whose appropriate setting is a problem shared by many heuristic techniques <ref> [4] </ref>. In some cases the parameters are tuned through a feedback loop that includes the user as a crucial learning component: depending on preliminary tests, some values are changed and different options are tested until acceptable results are obtained. <p> Additional diversification strategies are considered in [20] and used in [21]. 3 Reactive search: the framework One of the frequently raised criticisms about heuristic techniques is that it is difficult to judge about the intrinsic quality of schemes that contain many possible choices and free parameters <ref> [4] </ref>. As an example, Genetic Algorithms [14, 2] and advanced Simulated Annealing [16] versions with about five free parameters are not unusual, and one finds versions in the literature with up to about ten parameters.
Reference: [5] <author> R. Battiti and G. Tecchiolli, </author> <title> The reactive tabu search, </title> <journal> ORSA Journal on Computing, </journal> <volume> 6(2) (1994), </volume> <pages> 126-140. </pages>
Reference-contexts: Reactive schemes are therefore based on memory: information about past events is collected and used in the future part of the search algorithm. A TS-based reactive scheme (RTS ) has been introduced in <ref> [5] </ref>. RLS adopts a reactive strategy that is appropriate for the neighborhood structure of MC: the feedback acts on a single parameter (the prohibition period) that regulates the search diversification and an explicit memory-influenced restart is activated periodically. The quality of the experimental results obtained by RLS is very satisfactory. <p> The basic Tabu Search cannot guarantee the absence of cycles and depends on an appropriate choice of T for its success. Reactive Tabu Search (RTS ) <ref> [5] </ref> adapts T during the search so that its value is appropriate to the local structure of the problem, and uses a second long-term reactive mechanism to deal with confinements of the search trajectory that are not avoided by the use of temporary prohibitions: if too many configurations are repeated too <p> If the entire clique is stored with the digital tree method <ref> [5] </ref> the worst case complexity is of O (n). In the maximum clique problem the complexity is dominated by the neighborhood evaluation.
Reference: [6] <author> R. Battiti and G. Tecchiolli, </author> <title> Simulated annealing and tabu search in the long run: a comparison on QAP tasks, Computer and Mathematics with Applications, </title> <booktitle> 28(6) (1994), </booktitle> <pages> 1-8. </pages>
Reference-contexts: Hashing is used for the memory look-up and insertion operations. In the computational tests RTS generally outperforms non-reactive versions of TS and competitive algorithms like Simulated Annealing, Genetic Algorithms, Neural Networks <ref> [6, 7] </ref>. 4 Reactive Local Search for Max-Clique The RLS algorithm modifies RTS by taking into account the particular neighborhood structure of MC.
Reference: [7] <author> R. Battiti and G. Tecchiolli, </author> <title> Local search with memory: Benchmarking RTS. </title> <journal> Opera--tions Research Spectrum, </journal> <note> 1995, to appear. </note>
Reference-contexts: Hashing is used for the memory look-up and insertion operations. In the computational tests RTS generally outperforms non-reactive versions of TS and competitive algorithms like Simulated Annealing, Genetic Algorithms, Neural Networks <ref> [6, 7] </ref>. 4 Reactive Local Search for Max-Clique The RLS algorithm modifies RTS by taking into account the particular neighborhood structure of MC. <p> In the assumption that the above requirement is valid and that only allowed moves are executed, the relationship between T and the diversification <ref> [7] </ref> is as follows: * The Hamming distance H between a starting point and successive point along the trajectory is strictly increasing for T + 1 steps. <p> On the other hand, large T values reduce the search freedom (in particular one has the requirement T (n 2), see <ref> [7] </ref>): therefore, T is reduced as soon as frequent repetitions disappear. The Memory-Reaction algorithm is illustrated in Fig. 4. The current clique X is searched in memory. If X is found, a reference Z is returned to a data structure containing the last visit time (line 2). <p> The current clique X is searched in memory. If X is found, a reference Z is returned to a data structure containing the last visit time (line 2). If the repetition interval R is sufficiently short (only short cycles can be avoided through the prohibition mechanism <ref> [7] </ref>), cycles are discouraged by increasing T (lines 7-9). 8 If X is not found, it is stored in memory with the time t when it was encountered (line 12). If T remained constant for a number of iterations greater than B, it is decreased (lines 14-15).
Reference: [8] <author> M. Bellare, O. Goldreich, and M. Sudan, </author> <title> Free bits, PCPs and non-approximability. Toward tight results, </title> <booktitle> Proc. 36-th Ann. Symp. on Foundations of Computer Science, </booktitle> <year> 1995, </year> <note> to appear. </note>
Reference-contexts: In particular, if P 6= N P , no polynomial time algorithm can approximate the Maximum Clique problem within a factor n 1 4 , where n is the number of nodes of the graph <ref> [8] </ref>. These theoretical results stimulated a research effort to design efficient heuristics for this problem. Consequently, computational experiments have been executed to show that the optimal values or close approximate values can be efficiently obtained for significant families of graphs related to practical situations [17, 19].
Reference: [9] <author> C. Friden, A. Hertz, and D. de Werra, STABULUS: </author> <title> A Technique for Finding Stable Sets in Large Graphs with Tabu Search, </title> <journal> Computing, </journal> <volume> 42 (1989), </volume> <pages> 35-4. </pages>
Reference-contexts: Tabu Search has been used in Frieden et al. <ref> [9] </ref> for finding large stable sets (STABULUS). The size s b of the independent set to search for is fixed, and the algorithm tries to minimize the number of edges contained in the current subset of s b nodes (while aiming at reducing this number to zero).
Reference: [10] <author> F. Glover, </author> <title> Tabu search part I, </title> <journal> ORSA Journal on Computing, </journal> <volume> 1(3) (1989), </volume> <pages> 190-260. </pages>
Reference-contexts: On the other hand, local search can be trapped in local optima and be unable to reach a global optimum or even good approximate solutions. Many improvements have been proposed, in particular F. Glover's Tabu Search <ref> [10] </ref> (TS for short) has been successfully applied to a growing number of problems, including MC [20, 21]. TS is based on prohibitions: some local moves are temporarily prohibited in order to avoid cycles in the search trajectory and to explore new parts of the total search space. <p> Here the scope is limited to methods based on local search with prohibition-based diversification techniques. In particular, in the Tabu Search (TS) framework, diversification 2 is obtained through the temporary prohibition of some moves. Based on ideas developed independently by Glover <ref> [10] </ref> and Hansen and Jaumard [13], TS aims at maximizing a function f by using an iterative modified local search. At each step of the iterative process, the selected move is the one that produces the highest f value in the neighborhood. <p> Nonetheless, the fact that comparable results were obtained in most tasks, implies that the use of G (S) degrees in the move choice is crucial only for a limited subset of the considered benchmark tasks. 7.2 RLS with aspiration An important element of traditional Tabu Search <ref> [10] </ref> is the incorporation of an aspiration level criterion.
Reference: [11] <author> F. Glover, </author> <title> Tabu Search: Improved Solution Alternatives, </title> <booktitle> in Mathematical Programming, State of the Art 1994, </booktitle> <editor> (J. R. Birge and K. G. Murty, eds.), </editor> <publisher> The Univ. of Michigan Press, </publisher> <year> 1994, </year> <pages> pp. 64-92. </pages>
Reference-contexts: Tabu Search is not an exception: in the last years many versions with widely different characteristics have been studied and used <ref> [11] </ref>. In some cases parameters are tuned through a feedback loop that includes the user as a crucial learning component: depending on preliminary tests, some values are changed and 3 different options are tested until acceptable results on a set of instances are obtained.
Reference: [12] <author> A. Gendreau, L. Salvail, and P. Soriano, </author> <title> Solving the Maximum Clique Problem Using a Tabu Search Approach, </title> <journal> Annals of Operations Research, </journal> <volume> 41 (1993), </volume> <pages> 385-403. </pages>
Reference-contexts: The size s b of the independent set to search for is fixed, and the algorithm tries to minimize the number of edges contained in the current subset of s b nodes (while aiming at reducing this number to zero). Gendreau et al. <ref> [12] </ref> consider a different framework: the search space consists of legal cliques, whose size has to be maximized. Three different versions of TS are introduced and successfully compared with an iterated version of STABULUS. <p> It is therefore crucial to consider incremental algorithms, in an effort to reduce the complexity below that required by a naive calculation "from scratch" of jN (X)j different function values. As an example, an incremental evaluation is used to update S during successive add moves in <ref> [12] </ref>, while S is recomputed from scratch after a drop move, with a worst-case complexity of O (n 2 ).
Reference: [13] <author> P. Hansen and B. Jaumard, </author> <title> Algorithms for the maximum satisfiability problem, </title> <journal> Computing, </journal> <volume> 44 (1990), </volume> <pages> 279-303. </pages>
Reference-contexts: Here the scope is limited to methods based on local search with prohibition-based diversification techniques. In particular, in the Tabu Search (TS) framework, diversification 2 is obtained through the temporary prohibition of some moves. Based on ideas developed independently by Glover [10] and Hansen and Jaumard <ref> [13] </ref>, TS aims at maximizing a function f by using an iterative modified local search. At each step of the iterative process, the selected move is the one that produces the highest f value in the neighborhood.
Reference: [14] <author> J. Holland, </author> <title> Adaptation in Natural and Artificial Systems. </title> <publisher> University of Michigan Press, </publisher> <address> Ann Arbor, MI, </address> <year> 1975. </year>
Reference-contexts: As an example, Genetic Algorithms <ref> [14, 2] </ref> and advanced Simulated Annealing [16] versions with about five free parameters are not unusual, and one finds versions in the literature with up to about ten parameters.
Reference: [15] <author> D.S. Johnson, </author> <title> Approximation Algorithms for Combinatorial Problems, </title> <journal> J. Comput. and System Sciences, </journal> <volume> 9 (1974), </volume> <pages> 256-278. </pages>
Reference-contexts: Ties among allowed vertices that can be added are broken by preferring the ones with the largest degree <ref> [15, 21] </ref> in the subgraph G (S (t) ) induced by the set S (t) .
Reference: [16] <author> D.S. Johnson, C. R. Aragon, L. A. McGeoch, and C. Schevon, </author> <title> Optimization by Simulated Annealing: An Experimental Evaluation; Part II, Graph Coloring and Number Partitioning, </title> <journal> Operations Research, </journal> <volume> 39 (1991), </volume> <pages> 378-406. </pages>
Reference-contexts: As an example, Genetic Algorithms [14, 2] and advanced Simulated Annealing <ref> [16] </ref> versions with about five free parameters are not unusual, and one finds versions in the literature with up to about ten parameters. Tabu Search is not an exception: in the last years many versions with widely different characteristics have been studied and used [11].
Reference: [17] <editor> D. Johnson and M. Trick (Eds.), </editor> <title> Cliques, Coloring, and Satisfiability: Second DIMACS Implementation Challenge, </title> <booktitle> DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <publisher> in press. </publisher>
Reference-contexts: These theoretical results stimulated a research effort to design efficient heuristics for this problem. Consequently, computational experiments have been executed to show that the optimal values or close approximate values can be efficiently obtained for significant families of graphs related to practical situations <ref> [17, 19] </ref>. In this paper a new reactive heuristic is proposed for the Maximum Clique problem: Reactive Local Search (RLS ). RLS complements local-neighborhood-search with prohibition-based diversification techniques, where the amount of diversification is determined in an automated way through a feedback scheme. <p> Thirtyseven significant MC instances have been selected by the organizers to provide a "snapshot" of the algorithm's effectiveness (see Table 1), and the results obtained by the participants on a benchmark containing a wide spectrum of graphs have been presented at a DIMACS workshop <ref> [17] </ref>. The results obtained by RLS on these instances are as follows: if one considers the best among all values found by the fifteen heuristic algorithms presented at the DIMACS workshop, RLS reaches the same value or a better one in 34 out of 37 cases. <p> The realization of RLS with data structures with minimal computational complexity is studied in Sec. 5. Then the experimental results obtained on a series of tasks recently proposed in the DI-MACS challenge <ref> [17] </ref> are presented and discussed in Sec. 6. Two variants studied during the development of RLS are discussed in Sec. 7. <p> In particular, we present the results obtained on the benchmark defined as part of the international challenge organized by DIMACS <ref> [17] </ref>. 6.1 DIMACS challenge An international Implementation Challenge organized by the Center for Discrete Mathematics and Theoretical Computer Science (DIMACS) has taken place in 1993. The purpose was to find effective optimization and approximation algorithms for Maximum Clique, Graph Coloring, and Satisfiability. <p> The purpose was to find effective optimization and approximation algorithms for Maximum Clique, Graph Coloring, and Satisfiability. The results obtained by the participants have been presented at a DIMACS workshop in Fall of 1993, with proceedings published by the AMS <ref> [17] </ref>. A small number of instances have been selected to provide a "snapshot" of the algorithm's effectiveness. Some benchmark graphs stress or test the limits of the various algorithms, and constitute an important base point to evaluate new heuristics in this area. <p> Some benchmark graphs stress or test the limits of the various algorithms, and constitute an important base point to evaluate new heuristics in this area. The selected max-clique instances are listed in Table 1. The 37 tasks contains the following graphs (see <ref> [17] </ref> for additional details and references). * Random Graphs. Cx.y and DSJCx.y, of size x and density 0.y. * Steiner Triple Graphs. <p> x. * Sanchis graphs. genx p0.9 z and genx p0.9 z. of size x. * Hamming graphs. hamming8-4 and hamming10-4. with 256 and 1024 nodes, respec tively. * Keller Graphs. keller4, keller5, keller6. * P-hat Graphs. p hatx-z, of size x. 16 Standard timing routines for MC have been provided <ref> [17] </ref>, the user times in seconds obtained by our workstation are listed in Table 2. In order to assess the statistical variation, 10 runs have been performed for each task, with different sequences of pseudo-random numbers (used to break ties and during restarts). <p> It is of interest to compare the performance of RLS with those obtained by the following fifteen heuristic algorithms presented at the DIMACS workshop <ref> [17] </ref>: 1) AtA (Grossman), 2) SA plus greedy (Homer and Peinado), 3) VHP (Gibbons, Pardalos, Hearn), 4) SM1 (Brockington and Culberson), 5) CLIQUEMERGE (Balas and Niehaus), 6) ST (Soriano and Gendreau), 7) DT (Soriano and Gendreau), 8) PT (Soriano and Gendreau), 9) GSD (;) (Jagota, San-chis, Ganesan), 10) SSD (;) (Jagota, <p> The computational complexity per iteration of RLS has been analyzed in the worst case and extensive computational tests have been executed. In particular, when the experimental results are compared with those obtained by competing heuristics on the second DIMACS implementation challenge (at least, those presented at the 1994 workshop <ref> [17] </ref>), RLS appears to provide a significantly better performance, considering both the obtained clique sizes and the CPU times utilized. Acknowledgments We thank C. Mannino and A. Sassano for making available their C code for MC, P. Soriano and M. Gendreau for sending their Pascal code implementing Tabu Search.
Reference: [18] <author> S. Kirkpatrick, C. D. Gelatt, and M. P. Vecchi, </author> <title> Optimization by simulated annealing, </title> <booktitle> Science, 220 (1983), </booktitle> <pages> 671-680. </pages>
Reference-contexts: As a final remark, it is useful to contrast reactive memory-based schemes with algorithms based on Markov (i.e., memory-less) processes like Simulated Annealing <ref> [18] </ref>, where the next configuration during the search is chosen with a probability that depends only on the current configuration. Tabu Search has been used in Frieden et al. [9] for finding large stable sets (STABULUS).
Reference: [19] <author> P.M. Pardalos and J. Xue, </author> <title> The maximum clique problem, </title> <journal> Journal of Global Optimization, </journal> <volume> 4 (1994), </volume> <pages> 301-328. </pages>
Reference-contexts: 1 Introduction Maximum Clique (MC for short) is a paradigmatic combinatorial optimization problem with relevant applications and, because of its computational intractability, it has been extensively studied in the last years <ref> [19] </ref>. <p> These theoretical results stimulated a research effort to design efficient heuristics for this problem. Consequently, computational experiments have been executed to show that the optimal values or close approximate values can be efficiently obtained for significant families of graphs related to practical situations <ref> [17, 19] </ref>. In this paper a new reactive heuristic is proposed for the Maximum Clique problem: Reactive Local Search (RLS ). RLS complements local-neighborhood-search with prohibition-based diversification techniques, where the amount of diversification is determined in an automated way through a feedback scheme. <p> Two variants studied during the development of RLS are discussed in Sec. 7. A final discussion concludes the paper (Sec. 8). 2 Tabu Search heuristics for Max-Clique As a recent bibliography about max-clique is present in <ref> [19] </ref>, let us only mention some examples and results that are needed in the following discussion.
Reference: [20] <author> P. Soriano and M. Gendreau, </author> <title> Diversification Strategies in Tabu Search Algorithms for the Maximum Clique Problem, </title> <type> Technical Report CRT-940, </type> <institution> CRT - Universite de Montreal, Canada, </institution> <year> 1993. </year>
Reference-contexts: Many improvements have been proposed, in particular F. Glover's Tabu Search [10] (TS for short) has been successfully applied to a growing number of problems, including MC <ref> [20, 21] </ref>. TS is based on prohibitions: some local moves are temporarily prohibited in order to avoid cycles in the search trajectory and to explore new parts of the total search space. <p> Additional diversification strategies are considered in <ref> [20] </ref> and used in [21]. 3 Reactive search: the framework One of the frequently raised criticisms about heuristic techniques is that it is difficult to judge about the intrinsic quality of schemes that contain many possible choices and free parameters [4].
Reference: [21] <author> P. Soriano and M. Gendreau, </author> <title> Tabu Search Algoritms for the Maximum Clique Problem, </title> <type> Technical Report CRT-968, </type> <institution> CRT - Universite de Montreal, Canada, </institution> <year> 1994. </year> <month> 27 </month>
Reference-contexts: Many improvements have been proposed, in particular F. Glover's Tabu Search [10] (TS for short) has been successfully applied to a growing number of problems, including MC <ref> [20, 21] </ref>. TS is based on prohibitions: some local moves are temporarily prohibited in order to avoid cycles in the search trajectory and to explore new parts of the total search space. <p> Additional diversification strategies are considered in [20] and used in <ref> [21] </ref>. 3 Reactive search: the framework One of the frequently raised criticisms about heuristic techniques is that it is difficult to judge about the intrinsic quality of schemes that contain many possible choices and free parameters [4]. <p> The same neighborhood is exploited by many branch and bound algorithms and is used in the TS application in <ref> [21] </ref>. At a given iteration t of the search, the neighborhood set N (X) is partitioned into the set of prohibited neighbors and the set allowed neighbors. The same terms prohibited and allowed are used for the corresponding add-drop moves. <p> Ties among allowed vertices that can be added are broken by preferring the ones with the largest degree <ref> [15, 21] </ref> in the subgraph G (S (t) ) induced by the set S (t) . <p> Restarts are activated every A = 10 B = 100 k b iterations, a period that permits a non-trivial dynamics of T with more possible increases and decreases (i.e., many B periods). The routine Restart is adapted from <ref> [21] </ref>. Firts the prohibition parameter T is reset and the hashing memory structure is cleared (lines 1-2). <p> In order to assess the statistical variation, 10 runs have been performed for each task, with different sequences of pseudo-random numbers (used to break ties and during restarts). The maximum allotted time for each instance is the same that was used in <ref> [21] </ref>, a competitive application of TS to MC. The computational results are shown in Table 3. The CPU times include those for initializing the problems, while the number of iterations per second are calculated by subtracting the initialization times. <p> BR is the best result of all DIMACS workshop participants (* if optimality is proved). 19 The results obtained on the DIMACS instances not included in the "snapshot" suite are listed in Table 4. For these instances we have only the results obtained by Soriano and Gendreau <ref> [21] </ref> by using three different versions of Tabu Search. The range of results obtained by their algorithms is listed in the column labeled "SG." 20 Time to Best Cique Size Name Avg (S.Dev.) Avg Iter. Iter./Sec.
References-found: 21

