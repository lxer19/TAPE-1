URL: http://www.isi.edu/acal/tech-reports/1994/tr-94-11.ps.Z
Refering-URL: http://www.isi.edu/acal/tech-reports/index.html
Root-URL: http://www.isi.edu
Title: Keywords: Low Power, Memory Addressing, Gray Code, Instruction Scheduling.  
Author: Su, Chi-Ying Tsui, and Alvin M. Despain 
Keyword: mance Microprocessors  
Date: December, 1994  December, 1994  
Affiliation: University of Southern California  
Note: Ching-Long  IEEE Design Test of Computers,  
Abstract: Low power embedded processors become more important for portable applications. For CMOS circuits, power is consumed during the charging and discharging of the capacitances. Reducing switching activities would significantly reduce power consumption of an embedded processor. In this paper, we address the problem of how to reduce switching activities at the control path of an embedded processor. We study the effects of using Gray code as the addressing scheme to reduce the switching activities. Gray codes have an advantage over the conventional binary code in that consecutive memory addresses have only one-bit different. Due to locality of program execution, Gray code addressing can significantly reduce the amount of switching on the instruction address bits. Also an instruction scheduling technique called cold scheduling, is developed to reorder the instruction sequence to reduce the switching activities. Reducing Power Consumption at the Control Path of High Perfor
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Bernstein, and M. Rodeh. </author> <title> Global Instruction Scheduling for Superscalar Machines, </title> <booktitle> Proc. of the ACM SIGPLAN 91 Conf. on Programming Language Design and Implementation, </booktitle> <pages> page. </pages> <month> 241-255,June </month> <year> 1991. </year>
Reference: [2] <author> A.P. Chandrakasan, S. Sheng and R.W. Brodersen, </author> <title> Low-power CMOS digital design, </title> <journal> IEEE J. Solid-State Circuits, </journal> <volume> Vol. 27, No4, </volume> <pages> page 473-483, </pages> <month> April, </month> <year> 1992. </year>
Reference: [3] <author> A.P. Chandrakasan, M. Potkonjak, J.M. Rabaey, and R.W. Brodersen, HYPER-LP: </author> <title> A System for 20 Power Minimization Using Architecture Transformations, </title> <booktitle> Proc. Intl Conf. Computer-Aided Design, </booktitle> <publisher> IEEE CS Press, page. 300-303,1992. </publisher>
Reference-contexts: Many researchers have been studying low power/low voltage design techniques. For example, research is being conducted in low power memory design [18]. Aggressive supply voltage scaling and process optimization were proposed for power consumption reduction for active logic 3 circuits [2,10]. Also Chandrakasan et al. <ref> [3] </ref> presented a high-level synthesis system, HYPER-LP, which minimize power consumption in application specific datapath intensive CMOS circuits using a variety of architectural and computational transformations.
Reference: [4] <author> A. Chatterjee, R.K. Roy, </author> <title> Synthesis of Low Power DSP Circuits Based On Activity Metrics, </title> <booktitle> Proc. Intl Conf. on VLSI Design, </booktitle> <address> India, page 265-271,January, </address> <year> 1994. </year>
Reference-contexts: This method is orthogonal to supply voltage reduction and process optimization and thus can be used to further reduce power consumption once the supply voltage and process of the processor are chosen. At the behavioral level, Chatterjee el at. <ref> [4] </ref> proposed a technique to design low-power DSP hardware-shared architectures. Specifically, node activity is reduced during the scheduling and allocation of operations in a DSP data ow graph which is constrained by a given set of hardware resources.
Reference: [5] <author> J.A. Fisher. </author> <title> Trace Scheduling: A Technique for Global Microcode Compaction, </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 30, No. 7, </volume> <pages> page. 478-490, </pages> <year> 1981. </year>
Reference: [6] <author> R. Haygood, </author> <title> A Prolog Benchmark Suite for Aquarius, </title> <type> Technical Report, </type> <institution> Computer Science Department, University of California, </institution> <address> UCB/CSD 89/509, </address> <year> 1989. </year>
Reference-contexts: Benchmark programs used in this paper are shown in Table 1. The benchmarks are ranging from less than 1,000 cycles to larger than 10,000,000 cycles. These benchmark programs are selected from the Aquarius benchmark suite <ref> [6] </ref>. Applications of these benchmark programs include list manipula tion, data base query, theorem prover, and computer language parser. Benchmark programs are first compiled through the Aquarius Prolog compiler [14,16] into an intermediate code (BAM code), which is target machine independent.
Reference: [7] <author> J.P. Hayes, </author> <title> Computer Architecture And Organization, </title> <publisher> McGraw-Hill Int. Editions, </publisher> <year> 1988. </year>
Reference-contexts: A formal definition of a Gray code sequence is described as follows <ref> [7] </ref>, 1. G 1 = 0, 1. 2. Let G k = g 0 , g 1 ,..., g 2 k -2, g 2 k -1 .
Reference: [8] <author> B. Holmer, B. Sano, M. Carlton, P. Van Roy, R. Haygood, W. Bush, and A. Despain. </author> <title> Fast Prolog with an Extended General Purpose Architecture, </title> <booktitle> Proc. of the 17th Annual International Symposium on Computer Architecture, </booktitle> <month> May </month> <year> 1990. </year>
Reference-contexts: To better understand the impact of instruction sequence on the switching activities in embedded processors, we select a RISC-like pipelined processor, the VLSI-BAM <ref> [8] </ref>, as an experimental architecture. This processor is pipelined with data stational control. There are five pipeline stages: Instruction Fetch (IF), Instruction Decode (ID), Instruction Execution (IE), Memory access (M), and Write Back (WB). <p> DRAM controller such that the access of a sequence of memory words in a Gray code addressing system can be as efficient as that in a binary code addressing system. 3.6 Results To validate the advantage of Gray code addressing, we implement a Gray code addressing scheme on the VLSI-BAM <ref> [8] </ref>. We measure the performance of address coding scheme by the number of bit switches per executed instruction, denoted as BPI. Figure 6 shows the BPI of instruction addresses in binary code and Gray code for different benchmark programs.
Reference: [9] <author> S.M. Krishnamurthy, </author> <title> A Brief Survey of Papers on Scheduling for Pipelined Processors, </title> <journal> SIGPLAN NOTICES Vol. </journal> <volume> 25, No. 7, </volume> <pages> page 97-106, </pages> <month> July </month> <year> 1990. </year>
Reference: [10] <author> D. Liu, and C. Svensson, </author> <title> Trading Speed for Low Power by Choice of Supply and Threshold Voltages, </title> <journal> IEEE J. of Solid State Circuits, </journal> <volume> Vol. 28, No. 1, </volume> <pages> page 10-17, </pages> <month> January, </month> <year> 1993. </year>
Reference: [11] <institution> MIPS language programmers guide, MIPS Computer Systems, Inc., </institution> <year> 1986 </year>
Reference-contexts: This processor is pipelined with data stational control. There are five pipeline stages: Instruction Fetch (IF), Instruction Decode (ID), Instruction Execution (IE), Memory access (M), and Write Back (WB). The instruction set of the VLSI-BAM is similar to the MIPS-2000 <ref> [11] </ref> with some extensions for symbolic computation. Figure 3 shows the pipeline stages and the control path of the VLSI-BAM processor. For each pipeline stage, there is an instruction register, a PLA, and a latch for control signals.
Reference: [12] <author> A. Nicolau, J.A. Fisher, </author> <title> Measuring the Parallelism Available for Very Long Instruction Word Architectures, </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 33, No. 11, </volume> <year> 1984. </year>
Reference: [13] <author> S. Prasad and K. Roy, </author> <title> Circuit activity driven multilevel logic optimization for low power reliable operation, </title> <booktitle> Proc. of the EDAC, </booktitle> <pages> page 368-372, </pages> <month> February, </month> <year> 1993. </year>
Reference-contexts: At the logic level, algorithms to synthesize circuits with minimum switching activity were developed. Shen et al, [15] presented algorithms for reducing power consumption during the technology independent phase of logic synthesis. Prasad et al. <ref> [13] </ref> tackled the low power kerneliza-tion problem in multi-level logic minimization. During the factorization process, common sub-expressions which result in maximum reduction in switching activity are extracted.
Reference: [14] <author> K. Roy and S. Prasad, SYSLOP: </author> <title> Synthesis of CMOS logic for low power application, </title> <booktitle> Proc. the Intl Conf. on Computer Design, </booktitle> <month> October, </month> <year> 1992. </year>
Reference: [15] <author> A. Shen, A. Ghosh and S. Devadas, </author> <title> On Average Power Dissipation and Random Pattern Testability of CMOS Combinational Logic Networks, </title> <booktitle> Proc. IEEE ICCAD, </booktitle> <month> Nov, </month> <year> 1993. </year>
Reference-contexts: Specifically, node activity is reduced during the scheduling and allocation of operations in a DSP data ow graph which is constrained by a given set of hardware resources. At the logic level, algorithms to synthesize circuits with minimum switching activity were developed. Shen et al, <ref> [15] </ref> presented algorithms for reducing power consumption during the technology independent phase of logic synthesis. Prasad et al. [13] tackled the low power kerneliza-tion problem in multi-level logic minimization. During the factorization process, common sub-expressions which result in maximum reduction in switching activity are extracted.
Reference: [16] <author> C-L Su, </author> <title> An instruction Scheduler and Register Allocator for Prolog Parallel Microprocessors, </title> <booktitle> International Computer Symposium, </booktitle> <year> 1992. </year>
Reference: [17] <author> C-L Su, C-Y Tsui, A.M. Despain, </author> <title> Low Power Architecture Design and Compilation Techniques for High Performance Processor, </title> <booktitle> Proc. IEEE COMPCON, </booktitle> <month> February </month> <year> 1994. </year>
Reference-contexts: Also Chandrakasan et al. [3] presented a high-level synthesis system, HYPER-LP, which minimize power consumption in application specific datapath intensive CMOS circuits using a variety of architectural and computational transformations. Other researchers are exploring instruction set architectures and compilation techniques for low energy consumption <ref> [17] </ref>, processor design using self-clocking, static and dynamic power management strategies, etc. Recently researchers has begun to investigate minimizing the switching activity of the circuit in order to minimize power.
Reference: [18] <author> D. Takashima, S. Watanabe, T. Fuse, K. Sunouchi and T. Hara, </author> <title> Low Power On-chip Supply Voltage Conversion Scheme for Ultrahigh-Density DRAMs, </title> <journal> IEEE Journal of Solid-State Circuits, </journal> <volume> Vol. 28, No. 4, </volume> <pages> page 504-509, </pages> <month> April, </month> <year> 1993. </year>
Reference-contexts: To minimize power consumption, we can reduce f d , C L or V dd . Many researchers have been studying low power/low voltage design techniques. For example, research is being conducted in low power memory design <ref> [18] </ref>. Aggressive supply voltage scaling and process optimization were proposed for power consumption reduction for active logic 3 circuits [2,10]. Also Chandrakasan et al. [3] presented a high-level synthesis system, HYPER-LP, which minimize power consumption in application specific datapath intensive CMOS circuits using a variety of architectural and computational transformations.
Reference: [19] <author> C.Y. Tsui, M. Pedram, and A.M. Despain, </author> <title> Technology Decomposition and Mapping Targeting Low Power Dissipation, </title> <booktitle> Proc. the 30th DAC, </booktitle> <pages> page 68-73, </pages> <month> June, </month> <year> 1993. </year>
Reference: [20] <author> H. Vaishnav and M. Pedram, Pcube: </author> <title> A Performance driven placement algorithm for low power designs, </title> <booktitle> Proc. </booktitle> <address> EURO-DAC, September,1993. </address>
Reference-contexts: Tsui et. al.[19] minimized the weighted switching activity and hence the power consumption during the technology decomposition and mapping phase of logic synthesis. In layout domain, Vaishnav et al. <ref> [20] </ref> proposed a low power performance driven placement procedure which minimizes the length, hence the capacitance loading, of the high switching nets and at the same time satisfies the delay constraints. 4 1.2 Our approach In this work, we tackle the problem of minimizing circuit switching activity at the architectural level.
Reference: [21] <author> P. Van Roy and A. M. Despain, </author> <title> High-Performance Logic Programming with the Aquarius Prolog Compiler, </title> <booktitle> Computer, </booktitle> <month> January </month> <year> 1992. </year>
References-found: 21

