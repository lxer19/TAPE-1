URL: http://cobar.cs.umass.edu/pubfiles/UM-CS-1991-013.ps
Refering-URL: http://cobar.cs.umass.edu/pubfiles/
Root-URL: 
Title: Comparison of Distributed Concurrency Control Protocols on a Distributed Database Testbed  
Author: Chia-Shiang Shih and Asit Dan Walter H. Kohler John A. Stankovic and Don Towsley 
Note: This work was supported by the National Science Foundation, grant number SDB-8418216 and by a grant from Digital Equipment Corporation. Walter H. Kohler is manager of High Performance Transaction Processing System group at Digital Equipment Corporation.  
Address: Amherst, MA 01003  200 Forest Street, MRO1-1/A65 Marlboro, MA 01752-9101  Amherst, MA 01003  
Affiliation: ECE Department, University of Massachusetts  Digital Equipment Corporation  COINS Department, University of Massachusetts  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Agrawal, M. J. Carey, and M. Livny, </author> <title> "Concurrency Control Performance Modeling: Alterna tives and Implications," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 12, No. 4, </volume> <pages> pp. 609-654, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: 1 Introduction During the past decade, numerous studies have been made comparing the throughput of various concurrency control protocols in both centralized and distributed database systems <ref> [1, 4, 6, 7, 9, 10, 15, 17, 18] </ref>. All of these works are based on simulation or analytical modeling. In general these studies either ignore the effect of protocol overhead or assume equal overhead for all protocols.
Reference: [2] <author> K. M. Chandy, J. Misra, and L. M. Hass, </author> <title> "Distributed Deadlock Detection," </title> <journal> ACM Transac tions on Computer Systems, </journal> <volume> Vol. 1, No. 2, </volume> <pages> pp. 144-156, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: Both local deadlocks and global deadlocks are resolved by detection. Local deadlocks are detected by searching cycles in the Transaction-Wait-For-Graph that is encoded in a two dimensional array. Distributed deadlock detection is currently implemented with probe algorithm developed by Chandy and Misra <ref> [3, 2] </ref> based on probes. A complete description of the distributed deadlock detection implementation in CARAT can be found in [11] and [12]. 3.2 Optimistic Protocol with Backward Validation Optimistic protocols using backward validation were first proposed by Kung and Robinson [13].
Reference: [3] <author> K. M. Chandy and J. Misra, </author> <title> "A Distributed Algorithm for Detecting Resource Deadlocks in Distributed Systems," </title> <booktitle> In Proc. 1st ACM SIGACT-SIGOPS Symp. on the Principles of Distributed Computing, </booktitle> <pages> pp. 157-164, </pages> <address> Ottawa, </address> <month> August </month> <year> 1982. </year>
Reference-contexts: Both local deadlocks and global deadlocks are resolved by detection. Local deadlocks are detected by searching cycles in the Transaction-Wait-For-Graph that is encoded in a two dimensional array. Distributed deadlock detection is currently implemented with probe algorithm developed by Chandy and Misra <ref> [3, 2] </ref> based on probes. A complete description of the distributed deadlock detection implementation in CARAT can be found in [11] and [12]. 3.2 Optimistic Protocol with Backward Validation Optimistic protocols using backward validation were first proposed by Kung and Robinson [13].
Reference: [4] <author> A. Dan, W. H. Kohler, and D. Towsley, </author> <title> "Modeling the Effects of Data and Resource Contention on the Performance of Optimistic Concurrency Control Protocols," </title> <booktitle> In Fourth International Conference on Data Engineering, </booktitle> <pages> pp. 418-425, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: 1 Introduction During the past decade, numerous studies have been made comparing the throughput of various concurrency control protocols in both centralized and distributed database systems <ref> [1, 4, 6, 7, 9, 10, 15, 17, 18] </ref>. All of these works are based on simulation or analytical modeling. In general these studies either ignore the effect of protocol overhead or assume equal overhead for all protocols. <p> We study the effect of implementation overhead on the throughput under various distributed concurrency control protocols including two-phase locking [5], four variations of optimistic approaches with backward validation [13], and an optimistic approach with forward validation <ref> [4] </ref>. To minimize the non-essential variations in implementation, we use a common implementation of hash table both for the lock table as well as validation table. <p> For all OCC protocols, the abort ratio increased with the number of users, but the rate of increase leveled off for large numbers of users. This result follows the theoretical predictions of <ref> [4] </ref>. 16 The abort probability depends on the database update rate. The abort ratio becomes less sensitive to high multi-programming level since the throughput does not increase with multi-programming level. The OCC-N protocol suffered the highest abort ratio and it was high even for two users.
Reference: [5] <author> K. P. Eswaren, J. N. Gray, R. A. Lorie, and I. L. Traiger, </author> <title> "The Notions of Consistency and Predicate Locks in a Database System," </title> <journal> Communications of the ACM, </journal> <volume> Vol. 19, No. 11, </volume> <month> November </month> <year> 1976. </year>
Reference-contexts: We study the effect of implementation overhead on the throughput under various distributed concurrency control protocols including two-phase locking <ref> [5] </ref>, four variations of optimistic approaches with backward validation [13], and an optimistic approach with forward validation [4]. To minimize the non-essential variations in implementation, we use a common implementation of hash table both for the lock table as well as validation table. <p> We note that these protocols rely only on the information about the read-sets and write-sets of a transaction. Optimization based on semantic information, such as the database and transaction structure, is not covered in this paper. 3.1 Two-Phase Locking with Distributed Deadlock Detection Two-phase locking <ref> [5] </ref> protocols consist of two phases: a growing phase where locks are acquired, followed by a shrinking phase where locks are released.
Reference: [6] <author> B. I. Galler and L. Bos, </author> <title> "A Model of Transaction Blocking in Databases," </title> <booktitle> Performance Eval uation, </booktitle> <volume> Vol. 3, </volume> <pages> pp. 95-122, </pages> <year> 1983. </year>
Reference-contexts: 1 Introduction During the past decade, numerous studies have been made comparing the throughput of various concurrency control protocols in both centralized and distributed database systems <ref> [1, 4, 6, 7, 9, 10, 15, 17, 18] </ref>. All of these works are based on simulation or analytical modeling. In general these studies either ignore the effect of protocol overhead or assume equal overhead for all protocols.
Reference: [7] <author> J. Gray, P. Homan, R. Obermack, and H. Korth, </author> <title> A Straw Man Analysis of Probability of Waiting and Deadlock, </title> <type> Research Report RJ 3066, </type> <institution> IBM Reserach Laboratory, </institution> <address> San Jose, CA, </address> <month> February </month> <year> 1981. </year>
Reference-contexts: 1 Introduction During the past decade, numerous studies have been made comparing the throughput of various concurrency control protocols in both centralized and distributed database systems <ref> [1, 4, 6, 7, 9, 10, 15, 17, 18] </ref>. All of these works are based on simulation or analytical modeling. In general these studies either ignore the effect of protocol overhead or assume equal overhead for all protocols.
Reference: [8] <author> J. N. Gray, </author> <title> "Notes on Database Operating Systems," </title> <editor> In R. Bayer, R. M. Graham, and G. Seeg muller, editors, </editor> <booktitle> Operating Systems: An Advanced Course, </booktitle> <pages> pp. 393-481, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1978. </year>
Reference-contexts: The basic technique for implementing durable transactions in presence of failures is the use of logs. A log contains information for undoing or redoing all operations performed by transactions. The two-phase commit protocol <ref> [8, 14] </ref>, the simplest and most popular one of its kind, is adopted in the CARAT implementations. The journalling (log) mechanisms currently implemented in CARAT are based on the log write-ahead protocol. Two journalling mechanisms are implemented: before-image journalling and afterimage journalling.
Reference: [9] <author> N. Griffeth and J. A. Miller, </author> <title> "Performance Modeling of Database Recovery Protocols," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. SE-11, No. 6, </volume> <pages> pp. 564-572, </pages> <month> June </month> <year> 1985. </year>
Reference-contexts: 1 Introduction During the past decade, numerous studies have been made comparing the throughput of various concurrency control protocols in both centralized and distributed database systems <ref> [1, 4, 6, 7, 9, 10, 15, 17, 18] </ref>. All of these works are based on simulation or analytical modeling. In general these studies either ignore the effect of protocol overhead or assume equal overhead for all protocols.
Reference: [10] <author> K. B. Irani and H. Lin, </author> <title> "Queueing Network Models for Concurrent Transaction Processing in a Database System," </title> <booktitle> In Proc. of ACM SIGMOD Int'l Conf. on Management of Data, </booktitle> <pages> pp. 134-142, </pages> <address> Boston, MA, </address> <month> May </month> <year> 1979. </year>
Reference-contexts: 1 Introduction During the past decade, numerous studies have been made comparing the throughput of various concurrency control protocols in both centralized and distributed database systems <ref> [1, 4, 6, 7, 9, 10, 15, 17, 18] </ref>. All of these works are based on simulation or analytical modeling. In general these studies either ignore the effect of protocol overhead or assume equal overhead for all protocols.
Reference: [11] <author> B. P. Jenq, </author> <title> Performance Measurement, Modelling, and Evaluation of Integrated Concurrency Control and Recovery Algorithms in Distributed Database Systems, </title> <type> PhD thesis, </type> <institution> University of Massachusetts, Amherst, </institution> <month> February </month> <year> 1986. </year>
Reference-contexts: Distributed deadlock detection is currently implemented with probe algorithm developed by Chandy and Misra [3, 2] based on probes. A complete description of the distributed deadlock detection implementation in CARAT can be found in <ref> [11] </ref> and [12]. 3.2 Optimistic Protocol with Backward Validation Optimistic protocols using backward validation were first proposed by Kung and Robinson [13]. Here, transactions are executed in three phases, read, validation, and write.
Reference: [12] <author> W. Kohler and B. P. Jenq, "CARAT: </author> <title> A Testbed for the Performance Evaluation of Distributed Database Systyems," </title> <booktitle> In Proc. of the Fall Joint Computer Conference, </booktitle> <pages> pp. 1169-1178, </pages> <publisher> IEEE Computer Society and ACM, </publisher> <address> Dallas, Texas, </address> <month> November </month> <year> 1986. </year>
Reference-contexts: Finally, we summarize the paper in Section 6. 2 Description of the CARAT Testbed CARAT (Concurrency And Recovery Algorithm Testbed) is a distributed database testbed developed at the University of Massachusetts to study the performance of various concurrency and recovery algorithms through direct measurement <ref> [12] </ref>. It is implemented as a set of cooperating server processes which communicate via a uniform message passing mechanism. Figure 1 illustrates the processes and message structure of CARAT for any two nodes of the system. <p> The motivation behind this message passing architecture as well as the details of this architecture can be found in <ref> [12] </ref>. The TR process also sends TBEGIN and TEND messages to the TM process to mark the beginning and the end of a transaction. Depending on the concurrency control protocol, TM and DM processes take various actions to ensure transaction serializibility. <p> Distributed deadlock detection is currently implemented with probe algorithm developed by Chandy and Misra [3, 2] based on probes. A complete description of the distributed deadlock detection implementation in CARAT can be found in [11] and <ref> [12] </ref>. 3.2 Optimistic Protocol with Backward Validation Optimistic protocols using backward validation were first proposed by Kung and Robinson [13]. Here, transactions are executed in three phases, read, validation, and write.
Reference: [13] <author> H. T. Kung and J. T. Robinson, </author> <title> "On Optimistic Methods for Concurrency Control," </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 6, No. 2, </volume> <pages> pp. 213-226, </pages> <month> June </month> <year> 1981. </year>
Reference-contexts: We study the effect of implementation overhead on the throughput under various distributed concurrency control protocols including two-phase locking [5], four variations of optimistic approaches with backward validation <ref> [13] </ref>, and an optimistic approach with forward validation [4]. To minimize the non-essential variations in implementation, we use a common implementation of hash table both for the lock table as well as validation table. <p> A complete description of the distributed deadlock detection implementation in CARAT can be found in [11] and [12]. 3.2 Optimistic Protocol with Backward Validation Optimistic protocols using backward validation were first proposed by Kung and Robinson <ref> [13] </ref>. Here, transactions are executed in three phases, read, validation, and write. During the read phase, a transaction reads from the database and any updates are done on local copies of the data.
Reference: [14] <author> B. G. Lindsay et al., </author> <title> Notes on Distributed Databases, </title> <type> Research Report RJ 2571, </type> <institution> IBM Reserach Laboratory, </institution> <address> San Jose, </address> <month> July </month> <year> 1979. </year> <month> 20 </month>
Reference-contexts: The basic technique for implementing durable transactions in presence of failures is the use of logs. A log contains information for undoing or redoing all operations performed by transactions. The two-phase commit protocol <ref> [8, 14] </ref>, the simplest and most popular one of its kind, is adopted in the CARAT implementations. The journalling (log) mechanisms currently implemented in CARAT are based on the log write-ahead protocol. Two journalling mechanisms are implemented: before-image journalling and afterimage journalling.
Reference: [15] <author> D. Potier and P. Leblanc, </author> <title> "Analysis of Locking Policies in Database Management Systems," </title> <journal> Communications of the ACM, </journal> <volume> Vol. 23, No. 10, </volume> <pages> pp. 584-593, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: 1 Introduction During the past decade, numerous studies have been made comparing the throughput of various concurrency control protocols in both centralized and distributed database systems <ref> [1, 4, 6, 7, 9, 10, 15, 17, 18] </ref>. All of these works are based on simulation or analytical modeling. In general these studies either ignore the effect of protocol overhead or assume equal overhead for all protocols.
Reference: [16] <author> C. Shih, </author> <title> Performance Measurement and Evaluation of Concurrency Control Algorithms in a Distributed Database Testbed System, </title> <type> Master's thesis, </type> <institution> University of Massachusetts, Amherst, </institution> <month> February </month> <year> 1989. </year>
Reference-contexts: If there are no entries in the hash table, the validating subtransaction skips conflict checking, irrespective of the protocol used. More detailed descriptions of these implementations can be found in <ref> [16] </ref>. 3.3 Optimistic Concurrency Control with Forward Validation Under the forward validation approach, a transaction also consists of three phases, namely, read, validation and write. <p> A transaction can avoid checking conflict under OCC-BV protocol by detecting such a special case. (Details of some other special optimizations implemented by maintaining various counters for low update rate can be found in <ref> [16] </ref>.) This experiment was designed to compare the performance under a various mix of read and write (query and update) transactions. The number of users was fixed at 8, and the mix of R/W users was varied as 8/0, 7/1,..., 1/7, 0/8.
Reference: [17] <author> A. W. Shum and P. G. Spirakis, </author> <title> "Performance Analysis of Concurrency Control Methods in Database Systems," </title> <editor> In F. J. Kylstra, editor, </editor> <booktitle> Performance 81, </booktitle> <pages> pp. 1-19, </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1981. </year>
Reference-contexts: 1 Introduction During the past decade, numerous studies have been made comparing the throughput of various concurrency control protocols in both centralized and distributed database systems <ref> [1, 4, 6, 7, 9, 10, 15, 17, 18] </ref>. All of these works are based on simulation or analytical modeling. In general these studies either ignore the effect of protocol overhead or assume equal overhead for all protocols.

References-found: 17

