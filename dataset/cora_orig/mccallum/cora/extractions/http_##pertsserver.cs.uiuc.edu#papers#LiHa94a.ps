URL: http://pertsserver.cs.uiuc.edu/papers/LiHa94a.ps
Refering-URL: http://pertsserver.cs.uiuc.edu/papers/
Root-URL: http://www.cs.uiuc.edu
Title: Efficient Methods for Validating Timing Constraints in Multiprocessor and Distributed Systems  
Author: Jane W. S. Liu and Rhan Ha 
Address: 1304 West Springfield Avenue Urbana, Illinois 61801  
Affiliation: Department of Computer Science University of Illinois  
Note: Appeared in the Proceedings of 4th Systems Reengineering Technology Workshop, 1994.  
Abstract: This paper discusses the difficulties in validating timing constraints of dynamic multiprocessor and distributed systems. Some worst-case bounds and efficient algorithms now exist for the special case where jobs are independent. These results are summarized. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Salasin and D. Waugh. </author> <title> An approach to analyzing non-functional aspects during system definition. </title> <booktitle> Proceedings of July 1993, DSSA Meeting. </booktitle>
Reference-contexts: N00014-89-J-1181 and N000-92-J-1815 and NASA Grant No. NAG 1-1613. they are critical to the system's ultimate success." This statement by Salasin and Waugh <ref> [1] </ref> is especially true for real-time systems. Traditionally, when building or reengineering a real-time system, one first focuses on its functional requirements.
Reference: [2] <author> C. L. Liu and J. W. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard-real-time environment. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 20(1) </volume> <pages> 46-61, </pages> <month> January </month> <year> 1973. </year>
Reference: [3] <author> J. Leung and J. Whitehead. </author> <title> On the complexity of fixed-priority scheduling of periodic, real-time tasks. Performance Evaluation, </title> <booktitle> 2 </booktitle> <pages> 237-250, </pages> <year> 1982. </year>
Reference: [4] <author> B. Sprunt, L. Sha, and J. P. Lehoczky. </author> <title> Aperiodic task scheduling for hard-real-time systems. </title> <journal> The Journal of Real-Time Systems, </journal> <volume> 1 </volume> <pages> 27-60, </pages> <year> 1989. </year>
Reference-contexts: Some tasks are (periodic) servers <ref> [4] </ref>. A periodic server is created to handle the execution of a stream of jobs whose release times and execution times are random variables. Jobs handled by each server are placed in a priority queue.
Reference: [5] <author> J. P. Lehoczky, L. Sha, and Y. Ding. </author> <title> The rate monotone scheduling algorithm: Exact characterization and average case behavior. </title> <booktitle> In Proceedings of IEEE 10th Real-Time Systems Symposium, </booktitle> <pages> pages 166-171, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: An algorithm that makes use of the known parameters p i and e + i can give a more accurate prediction of the worst-case response times. Such algorithms are used in PERTS [8]. They are based on a more exact characterization <ref> [5] </ref> of the rate-monotonically scheduled periodic tasks.
Reference: [6] <author> L. Sha, R. Rajkumar, and J. P. Lehoczky. </author> <title> Priority inheritance protocols: An approach to real-time synchronization. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(9) </volume> <pages> 1175-1185, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: In this way, we can ignore precedence constraints and treat all jobs as if they are independent. In our notation, most of the jobs are P/N/J jobs; they are scheduled preemptively (and are not migrated). Their resource accesses are controlled by a protocol (such as the ones in <ref> [6, 7] </ref>) that ensures the blocking time of every job in T i due to resource conflicts with all jobs in the system is never more than b i . <p> When there is only one processor and tasks are scheduled on the rate-monotonic basis (that is, the shorter the period, the higher the priority) and synchronized according to the priority-ceiling protocol <ref> [6] </ref>, all jobs in T i with ffi i = p i always complete by their deadlines as long as (1) is satisfied.
Reference: [7] <author> T. P. Baker. </author> <title> A stack-based allocation policy for real-time processes. </title> <booktitle> In Proceedings of IEEE 11th Real-Time Systems Symposium, </booktitle> <pages> pages 191-200, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: In this way, we can ignore precedence constraints and treat all jobs as if they are independent. In our notation, most of the jobs are P/N/J jobs; they are scheduled preemptively (and are not migrated). Their resource accesses are controlled by a protocol (such as the ones in <ref> [6, 7] </ref>) that ensures the blocking time of every job in T i due to resource conflicts with all jobs in the system is never more than b i . <p> Bounds also exist for the earliest-deadline-first algorithm, when there is only one processor and a pro-tocol such as the stack-based protocol <ref> [7] </ref> is used. It is straightforward to generalize the conditions to account for the effects of nonpreemption if some jobs are not preemptable.
Reference: [8] <author> J. W. S. Liu, J. Redondo, Z. Deng, T. Tia, R. Bettati, A. Silberman, M. Storch, R. Ha, and W. Shih. PERTS: </author> <title> A prototyping environment for real-time systems. </title> <type> Technical Report UIUCDCS-R-93-1802, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1993. </year>
Reference-contexts: Jobs on each processor are scheduled according to a uniprocessor scheduling algorithm. A new generation of analysis and validation tools built on these recent theoretical advances are now beginning to emerge. (An example is PERTS <ref> [8] </ref>.) In contrast, efficient methods for validating dy-namic multiprocessor and distributed systems are not yet available. In a dynamic system, jobs ready for execution are placed in a common queue and are dispatched and scheduled on available processors in an event-driven manner. <p> An algorithm that makes use of the known parameters p i and e + i can give a more accurate prediction of the worst-case response times. Such algorithms are used in PERTS <ref> [8] </ref>. They are based on a more exact characterization [5] of the rate-monotonically scheduled periodic tasks.
Reference: [9] <author> R. L. Graham. </author> <title> Bounds on multiprocessing timing anomalies. </title> <journal> SIAM J. Appl. Math., </journal> <volume> 17(2) </volume> <pages> 416-429, </pages> <month> March </month> <year> 1969. </year>
Reference-contexts: Section 5 discusses the work that remains to be done in order to build a comprehensive strategy for validating dynamic systems. 2 Validation Problem It is well-known that a system in which jobs are scheduled in a priority-driven manner may exhibit scheduling anomalies. Graham <ref> [9] </ref> has shown that the completion time of a set of jobs can be later when more processors are used to execute them and when jobs have shorter execution times and fewer dependencies.
Reference: [10] <author> R. Bettati. </author> <title> End-to-End Scheduling to Meet Deadlines. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1994. </year>
Reference-contexts: It is also straightforward to use these conditions to bound the worst-case completion times of jobs in periodic job-shops and flow-shops where each job consists of subjobs which execute in turn on two or more processors and have end-to-end deadlines <ref> [10] </ref>. The known sufficient conditions, such as (1), are particularly robust. Specifically, the values of the periods and worst-case execution times of jobs in tasks T 1 ; T 2 ; ; T i do not appear in the left-handed side of (1), only their utilizations.
Reference: [11] <author> J. W. S. Liu and R. Ha. </author> <title> Theoretical foundations of efficient methods for validating real-time constraints. to appear in Principles of Real-Time Systems, edited by S. </title> <publisher> Son, Prentice Hall. </publisher>
Reference-contexts: Specifically, the performance bounds and algorithms presented are for jobs that are independent and do not share any resources. Proofs of theorems in this section and examples to illustrate them can be found in <ref> [11] </ref>. Conditions f or P redictable Execution It is easy to find the worst-case and best-case completion times of independent P/M/F jobs. In particular, the following theorem and corollary allow us to conclude that the execution of independent P/M/F jobs is predictable. <p> Let B i denote the set of jobs in N i which start before J i in P n . It has been shown <ref> [11] </ref> that any job J l not in B i cannot start before J i in the actual schedule A n .
Reference: [12] <author> R. Ha and J. W. S. Liu. </author> <title> Validating timing constraints in multiprocessor and distributed real-time systems. </title> <type> Technical Report UIUCDCS-R-93-1833, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1993. </year>
Reference-contexts: In the actual schedule, a job may be preempted by a different job from the one in the maximal schedule, even though all the starting sequences are same. Examples illustrating these facts can be found in <ref> [12] </ref>. These examples lead us to believe that it is unlikely for us to find tighter bounds than the one given by Theorem 5 when there is pre emption in the maximal schedule.
References-found: 12

