URL: http://insect.sd.monash.edu.au/research/publications/1995/TR95-39.ps
Refering-URL: http://www.progsoc.uts.edu.au/~geldridg/cpp/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: jona@insect.sd.monash.edu.au  
Phone: Phone: +61-3-9032787 Fax: +61-3-9032745  
Title: Eliminating Left Recursion from the Eiffel 3 Grammar  
Author: Jon Avotins 
Address: Caulfield Campus PO Box 197, Caulfield East, Australia 3145  
Affiliation: Department of Software Development Monash University,  
Abstract: Various research projects at Monash University required an Eiffel parser in order to fulfill their requirements. The Eiffel Parse library was deemed to be the best approach to develop a parser for various reasons. Nevertheless, the ISE Eiffel Parse library can only operate usefully with non left recursive grammars. The Eiffel 3 grammar as presented in Meyer (1992) is left recursive. Therefore, in order to develop an Eiffel 3 parser using the ISE Eiffel Parse library, it was mandatory that we transformed the left recursive Eiffel 3 grammar into its non left recursive equivalent. We apply the common algorithm for eliminating left recursion to the Eiffel 3 grammar, subsequently producing its non left recursive equivalent. Applying Y o o C C (Yes! An OO Compiler Compiler) to the non left recursive Eiffel 3 grammar, and implementing the appropriate changes to the generated language framework has resulted in T r o o peR (The Reusable OO Parser for Eiffel Re-engineering), an Eiffel 3 parser implemented using the ISE Eiffel Parse library. It is concluded that the ISE Eiffel Parse library should be extended to include a feature for automatically eliminating left recursion from left recursive grammars. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Aho, A., R. Sethi, and J. </author> <title> Ullman (1986). </title> <booktitle> Compilers: Principles, Techniques and Tools. </booktitle> <publisher> Addison Wesley. </publisher>
Reference: <author> Avotins, J. </author> <year> (1996, </year> <month> March). </month> <title> An Automated Approach to OO Design Metric Derivation and Validation. </title>
Reference-contexts: There are also a wide variety of new tools which can also be developed just for Eiffel class texts, which are currently under construction by researchers at Monash University in Australia. These include: 1 1. OO architectural restructuring (Maughan 1996). 2. Metrics collection and analysis tools <ref> (Avotins 1996) </ref>. 3. Testing class interfaces (Fletcher 1995). 4. T r o o peR (Truly Reusable OO Parser for Eiffel Reengineering) (Avotins, Maughan, and Mingins 1995). 5.
Reference: <author> Ph. D. </author> <type> thesis, </type> <institution> Monash University, </institution> <address> Melbourne, Australia. </address> <booktitle> Work in progress. </booktitle>
Reference: <author> Avotins, J., G. Maughan, and C. </author> <month> Mingins </month> <year> (1995). </year> <title> Language Processor Generation: The Case for YOOCC and TROOPER. TOOLS USA. </title> <publisher> Prentice Hall. </publisher>
Reference-contexts: 1 Research Motivation The Eiffel Parse library takes an object-centred approach. Among its advantages are the ability to <ref> (Avotins, Mingins, and Schmidt 1995) </ref>: 1. Naturally interface parsing tasks with the rest of an object-oriented system. 2. Apply object-oriented concepts as fully as possible to all aspects of a system. 3. <p> These include: 1 1. OO architectural restructuring (Maughan 1996). 2. Metrics collection and analysis tools (Avotins 1996). 3. Testing class interfaces (Fletcher 1995). 4. T r o o peR (Truly Reusable OO Parser for Eiffel Reengineering) <ref> (Avotins, Maughan, and Mingins 1995) </ref>. 5. Y o o C C (Yes! An OO Compiler Compiler) (Avotins, Mingins, and Schmidt 1995) The separation of syntax and semantics implies that the development of a new tool for a common syntax, commences at semantic design | where it should. <p> OO architectural restructuring (Maughan 1996). 2. Metrics collection and analysis tools (Avotins 1996). 3. Testing class interfaces (Fletcher 1995). 4. T r o o peR (Truly Reusable OO Parser for Eiffel Reengineering) (Avotins, Maughan, and Mingins 1995). 5. Y o o C C (Yes! An OO Compiler Compiler) <ref> (Avotins, Mingins, and Schmidt 1995) </ref> The separation of syntax and semantics implies that the development of a new tool for a common syntax, commences at semantic design | where it should. The advantages of developing an Eiffel 3 parser using the ISE Eiffel Parse libraries is apparent.
Reference: <author> Avotins, J., C. Mingins, and H. Schmidt (1995). YOOCC: </author> <title> Yes! An OO Compiler Compiler. </title> <booktitle> TOOLS USA 1995. </booktitle> <publisher> Prentice-Hall. </publisher>
Reference-contexts: 1 Research Motivation The Eiffel Parse library takes an object-centred approach. Among its advantages are the ability to <ref> (Avotins, Mingins, and Schmidt 1995) </ref>: 1. Naturally interface parsing tasks with the rest of an object-oriented system. 2. Apply object-oriented concepts as fully as possible to all aspects of a system. 3. <p> These include: 1 1. OO architectural restructuring (Maughan 1996). 2. Metrics collection and analysis tools (Avotins 1996). 3. Testing class interfaces (Fletcher 1995). 4. T r o o peR (Truly Reusable OO Parser for Eiffel Reengineering) <ref> (Avotins, Maughan, and Mingins 1995) </ref>. 5. Y o o C C (Yes! An OO Compiler Compiler) (Avotins, Mingins, and Schmidt 1995) The separation of syntax and semantics implies that the development of a new tool for a common syntax, commences at semantic design | where it should. <p> OO architectural restructuring (Maughan 1996). 2. Metrics collection and analysis tools (Avotins 1996). 3. Testing class interfaces (Fletcher 1995). 4. T r o o peR (Truly Reusable OO Parser for Eiffel Reengineering) (Avotins, Maughan, and Mingins 1995). 5. Y o o C C (Yes! An OO Compiler Compiler) <ref> (Avotins, Mingins, and Schmidt 1995) </ref> The separation of syntax and semantics implies that the development of a new tool for a common syntax, commences at semantic design | where it should. The advantages of developing an Eiffel 3 parser using the ISE Eiffel Parse libraries is apparent.
Reference: <author> Fletcher, R. </author> <year> (1995, </year> <month> March). </month> <title> Testing of Object-Oriented Software Based on Formal Specifications. </title> <type> Master's thesis, </type> <institution> Monash University, </institution> <address> Melbourne, Australia. </address>
Reference-contexts: These include: 1 1. OO architectural restructuring (Maughan 1996). 2. Metrics collection and analysis tools (Avotins 1996). 3. Testing class interfaces <ref> (Fletcher 1995) </ref>. 4. T r o o peR (Truly Reusable OO Parser for Eiffel Reengineering) (Avotins, Maughan, and Mingins 1995). 5.
Reference: <author> Maughan, G. </author> <year> (1996, </year> <month> March). </month> <title> Object-Oriented Architectural Re-Structuring through Abstraction and Re-Implementation. </title> <type> Ph. D. thesis, </type> <institution> Monash University, </institution> <address> Melbourne, Australia. </address> <booktitle> Work in progress. </booktitle>
Reference-contexts: There are also a wide variety of new tools which can also be developed just for Eiffel class texts, which are currently under construction by researchers at Monash University in Australia. These include: 1 1. OO architectural restructuring <ref> (Maughan 1996) </ref>. 2. Metrics collection and analysis tools (Avotins 1996). 3. Testing class interfaces (Fletcher 1995). 4. T r o o peR (Truly Reusable OO Parser for Eiffel Reengineering) (Avotins, Maughan, and Mingins 1995). 5.
Reference: <author> Meyer, B. </author> <year> (1992). </year> <title> Eiffel the Language. </title> <publisher> Prentice-Hall. </publisher>
Reference: <author> Pyster, A. </author> <year> (1980). </year> <title> Compiler Design and Construction. </title> <publisher> Van Nostrand Reinhold. </publisher>
Reference: <author> Waite, W. and G. </author> <title> Goos (1984). Compiler Construction. </title> <publisher> Springer-Verlag. </publisher>
References-found: 10

