URL: http://sctest.cse.ucsc.edu/imthurn/DelayGraphs/Papers/224Report.ps
Refering-URL: http://sctest.cse.ucsc.edu/imthurn/DelayGraphs/Papers/
Root-URL: http://www.cse.ucsc.edu
Title: Delay Fault Diagnosis Using Single Stuck-at Information  
Author: Paul Imthurn 
Date: December 10, 1996  
Abstract: Previous work has shown that it is possible to diagnosis bridging faults using stuck-at fault dictionaries and a composite stuck-at fault signature for the bridging fault [9, 4]. This paper proposes a similar method for diagnosing delay faults.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> RSIM: </author> <title> an event-driven switch simulator for CMOS circuits. In UNIX man page for rsim. </title>
Reference-contexts: The question is whether this is accurate enough for our purposes. We saw above that this model can find problems with our composite signature behavioral containment, but it clearly is not as realistic as other simulators. We are currently exploring the possiblilty of using the rsim or irsim simulators <ref> [1] </ref>. These are event-driven switch simulators for nMOS and cMOS circuits. They will allow us to give each gate a more realistic delay and allow for multiple faults with arbitrary delay values.
Reference: [2] <author> M. Abramovici, M. A. Breuer, and A. D. Friedman. </author> <title> Digital Systems Testing and testable design, chapter Logic Level Diagnosis. </title> <publisher> IEEE Press, </publisher> <address> Piscataway, NJ, </address> <year> 1990. </year>
Reference-contexts: The purpose of fault diagnosis is to guide in locating the fault by providing a (hopefully) short list of nodes that could cause the observed faulty behavior <ref> [2] </ref>. There are many fault types; among the most difficult to diagnose are delay faults. Whereas other faults affect the logic functionality of the circuit, delay faults affect circuit timing.
Reference: [3] <author> R. C. Aitken and P. C. Maxwell. </author> <title> Better models or better algorithms? on techniques to improve fault diagnosis. </title> <journal> In Hewlett-Packard Journal, </journal> <pages> pages 110-116, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: The middle column lists the stuck-at nodes each vector detects, and the last column lists the output (s) where the faulty behavior appears. and a simple matching algorithm <ref> [3] </ref>, but has the same problem as the previous method. What is needed is a procedure that uses easily obtainable information, such as a SSA fault dictionary, to diagnose realistic faults. Millman, et al. devised such a procedure [10].
Reference: [4] <author> B. Chess, D. B. Lavo, F.J. Ferguson, and T. Larrabee. </author> <title> Diagnosis of realistic bridging faults with single stuck-at information. </title> <booktitle> In Proceedings of ICCAD, </booktitle> <pages> pages 185-192, </pages> <year> 1995. </year>
Reference-contexts: If a candidates' composite signature did not completely contain the observed behavior, then that candidate was removed from the list. Unfortunately, the candidate list was too long to make this approach practical. Lavo, et al. modified the procedure in two ways <ref> [9, 4] </ref>. First, they identified vectors from the composite signature that could not possibly detect a bridging fault; these restricted vectors were removed from the signature. They also tagged some vectors that should detect the fault as required vectors.
Reference: [5] <author> K. De and A. Gunda. </author> <title> Failure analysis for full-scan circuits. </title> <booktitle> In Proceedings of ITC, </booktitle> <pages> pages 636-645, </pages> <year> 1995. </year>
Reference-contexts: The first approach uses a simple fault model to create the dictionary and a sophisticated matching algorithm to find the candidate faults <ref> [5] </ref> The model used is nearly always the single stuck-at (SSA) fault model, since it can be easily simulated, and the number of possible SSA faults is limited to the number of nodes in the circuit.
Reference: [6] <author> C. T. Glover and M. R. Mercer. </author> <title> A method of delay fault test generation. </title> <booktitle> In Proceedings of the Design Automation Conference, </booktitle> <pages> pages 90-95, </pages> <year> 1988. </year>
Reference-contexts: Create the original test set with delay faults in mind. Many papers discuss ATPG for delay faults <ref> [7, 11, 14, 12, 6] </ref>. 4.5 Ranking Algorithm Perhaps the most interesting issue involves the algorithm used to rank the candidate faults.
Reference: [7] <author> V. S. Iyengar, B. K. Rosen, and I. Spillinger. </author> <title> Delay test generation i and ii. </title> <booktitle> In Proceedings of ITC, </booktitle> <pages> pages 857-876, </pages> <year> 1988. </year>
Reference-contexts: Create the original test set with delay faults in mind. Many papers discuss ATPG for delay faults <ref> [7, 11, 14, 12, 6] </ref>. 4.5 Ranking Algorithm Perhaps the most interesting issue involves the algorithm used to rank the candidate faults.
Reference: [8] <author> D. Lavo. </author> <title> Diagnosing realistic bridging faults with single stuck-at information. </title> <institution> In Masters Thesis at UC Santa Cruz, </institution> <year> 1996. </year>
Reference-contexts: It is possible, given the differences between bridging faults and delay faults, that the best algorithm for ranking delay fault candidates uses a different lexicographic order, or is non-lexicographic. Lavo gives one possibility for a non-lexicographic algorithm <ref> [8] </ref>. He suggests using some measure of deviance from an expected value as a ranking criterion. The smallest deviance results in the highest ranking. However, it is difficult to determine this expected value a priori. Each circuit will have a different expected value for maximizing the effectiveness of the algorithm.
Reference: [9] <author> D. B. Lavo, T. Larrabee, and B. </author> <title> Chess. Beyond Byzantine Generals: Unexpected behavior and bridging-fault diagnosis. </title> <booktitle> In Proceedings of ITC, </booktitle> <pages> pages 611-619, </pages> <year> 1996. </year>
Reference-contexts: If a candidates' composite signature did not completely contain the observed behavior, then that candidate was removed from the list. Unfortunately, the candidate list was too long to make this approach practical. Lavo, et al. modified the procedure in two ways <ref> [9, 4] </ref>. First, they identified vectors from the composite signature that could not possibly detect a bridging fault; these restricted vectors were removed from the signature. They also tagged some vectors that should detect the fault as required vectors. <p> Therefore, this behavior belongs to the non-predicted set. The composite signature for a bridging fault contains all bridging fault behavior until analog effects are taken into account <ref> [10, 9] </ref>. We have a more fundamental problem because the same is not true for delay faults: the observed behavior is not contained even before we consider analog effects. <p> Lavo, et al., employ a lexicographical ranking algorithm, weighting the intersection between the composite signature of a candidate fault and the observed behavior the most, then the amount of required behavior contained in the observed behavior, and finally the amount of misprediction in the candidate fault signature <ref> [9] </ref>. It is possible, given the differences between bridging faults and delay faults, that the best algorithm for ranking delay fault candidates uses a different lexicographic order, or is non-lexicographic. Lavo gives one possibility for a non-lexicographic algorithm [8].
Reference: [10] <author> S. D. Millman, E. J. McCluskey, and J. M. Acken. </author> <title> Diagnosing CMOS bridging faults with stuck-at fault dictionaries. </title> <booktitle> In Proceedings of ITC, </booktitle> <pages> pages 860-870, </pages> <year> 1990. </year>
Reference-contexts: What is needed is a procedure that uses easily obtainable information, such as a SSA fault dictionary, to diagnose realistic faults. Millman, et al. devised such a procedure <ref> [10] </ref>. They used a SSA dictionary to create a composite signature for bridging faults, and then matched the faulty bits predicted by these signatures with the observed faulty behavior to decide which candidates should remain on the fault list. <p> Therefore, this behavior belongs to the non-predicted set. The composite signature for a bridging fault contains all bridging fault behavior until analog effects are taken into account <ref> [10, 9] </ref>. We have a more fundamental problem because the same is not true for delay faults: the observed behavior is not contained even before we consider analog effects.
Reference: [11] <author> E. S. Park and M. R. Mercer. </author> <title> Robust and nonrobust tests for path delay faults in a combinational circuit. </title> <booktitle> In Proceedings of ITC, </booktitle> <pages> pages 1027-1034, </pages> <year> 1987. </year>
Reference-contexts: Create the original test set with delay faults in mind. Many papers discuss ATPG for delay faults <ref> [7, 11, 14, 12, 6] </ref>. 4.5 Ranking Algorithm Perhaps the most interesting issue involves the algorithm used to rank the candidate faults.
Reference: [12] <author> S. Patil and S. M. Reddy. </author> <title> A test generation system for path delay faults. </title> <booktitle> In International Conference on Computer Design: VLSI in Computers and Processors, </booktitle> <pages> pages 40-43, </pages> <year> 1989. </year> <month> 7 </month>
Reference-contexts: Create the original test set with delay faults in mind. Many papers discuss ATPG for delay faults <ref> [7, 11, 14, 12, 6] </ref>. 4.5 Ranking Algorithm Perhaps the most interesting issue involves the algorithm used to rank the candidate faults.
Reference: [13] <author> A. K. Pramanick and S. M. Reddy. </author> <title> On the detection of delay faults. </title> <booktitle> In Proceedings of ITC, </booktitle> <pages> pages 845-856, </pages> <year> 1988. </year>
Reference-contexts: for a delay fault; a test pattern P consists of an initial vector, v i , that places a logic value on the presumed faulty node, and a final vector, v f , that places the opposite value on the node and propagates the result to the circuit's primary outputs <ref> [13] </ref>. Since the tests are done at-speed, if the node has a delay fault, then, theoretically, the voltage on the faulty node will not have enough time to make the transition, and the tester will see this discrepancy. We make some simplifying assumptions in this study.
Reference: [14] <author> M. H. Schulz, K. Fuchs, and F. Fink. </author> <title> Advanced automatic test pattern generation techniques for path delay faults. </title> <booktitle> In International Syposium on Fault-Tolerant Computing, </booktitle> <pages> pages 44-51, </pages> <year> 1989. </year>
Reference-contexts: Create the original test set with delay faults in mind. Many papers discuss ATPG for delay faults <ref> [7, 11, 14, 12, 6] </ref>. 4.5 Ranking Algorithm Perhaps the most interesting issue involves the algorithm used to rank the candidate faults.
References-found: 14

