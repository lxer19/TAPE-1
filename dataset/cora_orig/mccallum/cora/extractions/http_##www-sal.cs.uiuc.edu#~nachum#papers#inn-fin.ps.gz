URL: http://www-sal.cs.uiuc.edu/~nachum/papers/inn-fin.ps.gz
Refering-URL: http://sal.cs.uiuc.edu/~nachum/papers/
Root-URL: http://www.cs.uiuc.edu
Email: nachum@uiuc.edu  
Title: Innocuous Constructor-Sharing Combinations  
Author: Nachum Dershowitz 
Address: Givat Ram Jerusalem 91904 Israel  
Affiliation: Department of Computer Science Hebrew University,  
Abstract: We investigate conditions under which confluence and/or termination are preserved for constructor-sharing and hierarchical combinations of rewrite systems, one of which is left-linear and convergent.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Y. Akama. </author> <title> On Mints' reductions for ccc-calculus. </title> <booktitle> In Proceedings of the International Conference on Typed Lambda Calculi and Applications, volume 664 of Lecture Notes in Computer Science, </booktitle> <pages> pages 1-12, </pages> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: It is well-known that: Fact 2. CR (R) ^ CR (S ) ^ WN (S ) ^ Q (R; R ; S ! ) ) CR (R [ S ) (See, for example, <ref> [1] </ref>.) The square property here looks like: Proof. If s ! S t, then S (s) = S (t), since normal forms are unique. If s ! R t, then the given square property means that S (s) $ fl R S (t).
Reference: 2. <author> Leo Bachmair and Nachum Dershowitz. </author> <title> Commutation, transformation, and termination. </title> <editor> In J. H. Siekmann, editor, </editor> <booktitle> Proceedings of the Eighth International Conference on Automated Deduction (Oxford, England), volume 230 of Lecture Notes in Computer Science, </booktitle> <pages> pages 5-20, </pages> <address> Berlin, July 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In other words, Fact 25. SN (R) ^ SN (S ) ^ S T ^ CR (T ) ^ Q (R; R + ; T ! ) ) SN (R [ S ) (Cf. <ref> [2, Theorem 4] </ref>.) For example, let S be a symbolic interpretation (as defined in [2]), that is, S consists of a rule f (x 1 ; : : : ; x n ) ! r such that all x i , but not f , appear in r. <p> In other words, Fact 25. SN (R) ^ SN (S ) ^ S T ^ CR (T ) ^ Q (R; R + ; T ! ) ) SN (R [ S ) (Cf. [2, Theorem 4].) For example, let S be a symbolic interpretation (as defined in <ref> [2] </ref>), that is, S consists of a rule f (x 1 ; : : : ; x n ) ! r such that all x i , but not f , appear in r. <p> In particular: Corollary 27 <ref> [2] </ref>. The union of a terminating (non-erasing) symbolic interpretation S and a terminating system R that does not contain the interpretation's defined symbols is terminating.
Reference: 3. <author> Fran~coise Bellegarde and Pierre Lescanne. </author> <title> Termination by completion. </title> <journal> Applied Algebra on Engineering, Communication and Computer Science, </journal> <volume> 1(2) </volume> <pages> 79-96, </pages> <year> 1990. </year>
Reference-contexts: It would also be nice to have counterexamples for the necessity of each condition. Finally, we should mention that critical pair conditions for the pentagon property could be formulated, along the lines of the work in <ref> [12, 3, 23] </ref>. Appendix This section contains diagrammatic proofs of several key lemmas. We use dashed arrows for steps in R and solid for S. Proof of Lemma 7.
Reference: 4. <author> Michel Bidoit. </author> <title> Une methode de presentation de types abstraits: Applications. </title> <type> PhD thesis, </type> <institution> Universite de Paris-Sud, Orsay, France, </institution> <month> June </month> <year> 1981. </year> <note> Rapport 3045. </note>
Reference-contexts: We mainly address the case where S is terminating and confluent, but R is not necessarily left-linear. The issue of modularity of rewrite systems was first raised by Bidoit <ref> [4] </ref>. An early work dealing with combining terminating systems was [5]; confluence of disjoint systems was considered in [28]; many other properties were dealt with in [17]. Definitions and notation are as in [7] and [13]. See Table 1.
Reference: 5. <author> Nachum Dershowitz. </author> <title> Termination of linear rewriting systems. </title> <booktitle> In Proceedings of the Eighth International Colloquium on Automata, Languages and Programming (Acre, Israel), volume 115 of Lecture Notes in Computer Science, </booktitle> <pages> pages 448-458, </pages> <address> Berlin, </address> <month> July </month> <year> 1981. </year> <booktitle> European Association of Theoretical Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: We mainly address the case where S is terminating and confluent, but R is not necessarily left-linear. The issue of modularity of rewrite systems was first raised by Bidoit [4]. An early work dealing with combining terminating systems was <ref> [5] </ref>; confluence of disjoint systems was considered in [28]; many other properties were dealt with in [17]. Definitions and notation are as in [7] and [13]. See Table 1. <p> CR (R) R is Church-Rosser, or confluent; this is equivalent to SC (R fl ). Table 1. Definitions and Notations. g (x; x) ! 0 a ! c (a) The following constructor-sharing system (cf. <ref> [5] </ref>) is not terminating, though its components are: a ! 0 f (0; 1; x) ! f (x; x; x) In the following similarly nonterminating combination, the first system is conflu ent and (left- and right-) linear (the second is not, however): g (2) ! 0 f (0; 1; x) !
Reference: 6. <author> Nachum Dershowitz. </author> <title> Hierarchical termination. </title> <editor> In N. Dershowitz and N. Lindenstrauss, editors, </editor> <booktitle> Proceedings of the Fourth International Workshop on Conditional and Typed Rewriting Systems (Jerusalem, </booktitle> <address> Israel, </address> <month> July </month> <year> 1994), </year> <booktitle> volume 968 of Lecture Notes in Computer Science, </booktitle> <pages> pages 89-105, </pages> <address> Berlin, 1995. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Q (R; S; T fl ) ^ PNF (S ; T ) ^ WN (T ) ) Q (R; S ; T ! ) Preservation of normal forms is also used to such ends in <ref> [6] </ref> and [8]. Define the pentagon property P (R; S; T ) as the inclusion S R T RT . (This property is similar to coherence, as explored in [12].) Figuratively, that is: Obviously: Fact 5. <p> There are few such: for constructor-based systems in [19]; for right-linear and non-duplicating S in [21] (for the disjoint case, it conjectured by [25] and proved in [16]). Some results for the hierarchical case are contained in <ref> [6] </ref> and [14]. <p> be infinitely many R steps on top, leading to infinitely many strict decreases T (t i 0 ) ! + R T (t i 1 ) ! + This applies to the system mapf (*) ! * mapf (x : y) ! f (x) : mapf (y) (J) conjectured in <ref> [6] </ref> to be terminating in conjunction with arbitrary rewrite system R (* and : are constructors). If R is inconsistent, however, as for example f (0) ! 1 f (x) ! g (a; a; x) a ! * (K) then the union need not be terminating.
Reference: 7. <author> Nachum Dershowitz and Jean-Pierre Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Methods and Semantics, chapter 6, </booktitle> <pages> pages 243-320. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: The issue of modularity of rewrite systems was first raised by Bidoit [4]. An early work dealing with combining terminating systems was [5]; confluence of disjoint systems was considered in [28]; many other properties were dealt with in [17]. Definitions and notation are as in <ref> [7] </ref> and [13]. See Table 1. We will use R and ! R interchangeably for relation R and indicate composition of relations by their juxtaposition. 2 Counterexamples The following examples R S serve to demonstrate the necessity of various conditions we impose on the two systems.
Reference: 8. <author> Roberto di Cosmo. </author> <title> On the power of simple diagrams. </title> <booktitle> In Proceedings of the Seventh International Conference on Rewriting Techniques and Applications (New Brunswick, NJ), volume 1103 of Lecture Notes in Computer Science, </booktitle> <pages> pages 200-214. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1996. </year>
Reference-contexts: Q (R; S; T fl ) ^ PNF (S ; T ) ^ WN (T ) ) Q (R; S ; T ! ) Preservation of normal forms is also used to such ends in [6] and <ref> [8] </ref>. Define the pentagon property P (R; S; T ) as the inclusion S R T RT . (This property is similar to coherence, as explored in [12].) Figuratively, that is: Obviously: Fact 5.
Reference: 9. <author> K. Drosten. Termersetzungssysteme. </author> <type> PhD thesis, </type> <institution> Universitat Passau, </institution> <address> Berlin, Germany, 1989. Informatik Fachberichte 210, </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: a combination of non-left-linear confluent systems that share no symbols, one of which is non-overlapping (has no critical pairs) and the other has only a trivial overlap: g (x; x; y) ! y f (x; y; x; y; z) ! f (a; b; z; z; z) b ! 0 Drosten <ref> [9] </ref> composed the following nonterminating combination of confluent sys tems, only one of which is not left-linear: g (x; x; y) ! y f (a; b; x) ! f (x; x; x) a ! 0 (G) Ohlebusch [20] has shown that termination is also not preserved for confluent non-erasing systems. (An
Reference: 10. <author> Bernhard Gramlich. </author> <title> Relating innermost, weak, uniform and modular termination of term rewriting systems. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> Proceedings of the Conference on Logic Programming and Automated Reasoning (St. Petersburg, Russia), volume 624 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 285-296, </pages> <address> Berlin, July 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: This relation T is normalizing by innermost rewriting, as is the case for constructor--sharing systems, in general. Furthermore, T is locally confluent, since the conditions on R prevent it from introducing new critical pairs. It is, therefore, terminating (since it is overlaying; see <ref> [10] </ref>) and confluent. So T gives unique normal forms and T ! is well-defined.
Reference: 11. <author> Gerard Huet. </author> <title> Confluent reductions: Abstract properties and applications to term rewriting systems. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 27(4) </volume> <pages> 797-821, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: See Table 1. We will use R and ! R interchangeably for relation R and indicate composition of relations by their juxtaposition. 2 Counterexamples The following examples R S serve to demonstrate the necessity of various conditions we impose on the two systems. The first <ref> [11] </ref> is not confluent though its constructor-sharing components are (see [15]): R The inverse of R, also denoted R . R = The reflexive closure of R. R + The transitive closure of R. R fl The reflexive-transitive closure of R. R The symmetric-reflexive-transitive closure of R.
Reference: 12. <author> Jean-Pierre Jouannaud and Helene Kirchner. </author> <title> Completion of a set of rules modulo a set of equations. </title> <journal> SIAM J. on Computing, </journal> <volume> 15 </volume> <pages> 1155-1194, </pages> <month> November </month> <year> 1986. </year>
Reference-contexts: Define the pentagon property P (R; S; T ) as the inclusion S R T RT . (This property is similar to coherence, as explored in <ref> [12] </ref>.) Figuratively, that is: Obviously: Fact 5. Q (R; R; S ! ) ^ WN (S ) ) P (R; S fl ; S ! ) Fact 6. <p> It would also be nice to have counterexamples for the necessity of each condition. Finally, we should mention that critical pair conditions for the pentagon property could be formulated, along the lines of the work in <ref> [12, 3, 23] </ref>. Appendix This section contains diagrammatic proofs of several key lemmas. We use dashed arrows for steps in R and solid for S. Proof of Lemma 7.
Reference: 13. <author> Jan Willem Klop. </author> <title> Term rewriting systems. </title> <editor> In S. Abramsky, D. M. Gabbay, and T. S. E. Maibaum, editors, </editor> <booktitle> Handbook of Logic in Computer Science, </booktitle> <volume> volume 2, chapter 1, </volume> <pages> pages 1-117. </pages> <publisher> Oxford University Press, Oxford, </publisher> <year> 1992. </year>
Reference-contexts: The issue of modularity of rewrite systems was first raised by Bidoit [4]. An early work dealing with combining terminating systems was [5]; confluence of disjoint systems was considered in [28]; many other properties were dealt with in [17]. Definitions and notation are as in [7] and <ref> [13] </ref>. See Table 1. We will use R and ! R interchangeably for relation R and indicate composition of relations by their juxtaposition. 2 Counterexamples The following examples R S serve to demonstrate the necessity of various conditions we impose on the two systems.
Reference: 14. <author> M. R. K. Krishna Rao. </author> <title> Modular proofs for completeness of hierarchical term rewriting systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 151 </volume> <pages> 487-512, </pages> <year> 1995. </year>
Reference-contexts: There are few such: for constructor-based systems in [19]; for right-linear and non-duplicating S in [21] (for the disjoint case, it conjectured by [25] and proved in [16]). Some results for the hierarchical case are contained in [6] and <ref> [14] </ref>.
Reference: 15. <author> M. Kurihara and A. Ohuchi. </author> <title> Modularity of simple termination of term rewriting systems with shared constructors. </title> <journal> Theoretical Computer Science, </journal> <volume> 103 </volume> <pages> 273-282, </pages> <year> 1992. </year>
Reference-contexts: The first [11] is not confluent though its constructor-sharing components are (see <ref> [15] </ref>): R The inverse of R, also denoted R . R = The reflexive closure of R. R + The transitive closure of R. R fl The reflexive-transitive closure of R. R The symmetric-reflexive-transitive closure of R. Also $ fl R .
Reference: 16. <author> Aart Middeldorp. </author> <title> A sufficient condition for the termination of the direct sum of term rewriting systems. </title> <booktitle> In Proceedings of the Fourth Symposium on Logic in Computer Science, </booktitle> <pages> pages 396-401, </pages> <address> Pacific Grove, CA, 1989. </address> <publisher> IEEE. </publisher>
Reference-contexts: There are few such: for constructor-based systems in [19]; for right-linear and non-duplicating S in [21] (for the disjoint case, it conjectured by [25] and proved in <ref> [16] </ref>). Some results for the hierarchical case are contained in [6] and [14].
Reference: 17. <author> Aart Middeldorp. </author> <title> Modular Properties of Term Rewriting Systems. </title> <type> PhD thesis, </type> <institution> Vrije Universiteit, </institution> <address> Amsterdam, The Netherlands, </address> <year> 1990. </year>
Reference-contexts: The issue of modularity of rewrite systems was first raised by Bidoit [4]. An early work dealing with combining terminating systems was [5]; confluence of disjoint systems was considered in [28]; many other properties were dealt with in <ref> [17] </ref>. Definitions and notation are as in [7] and [13]. See Table 1.
Reference: 18. <author> Aart Middeldorp, Hitoshi Ohsaki, and Hans Zantema. </author> <title> Transforming termination by self-labelling. </title> <editor> In M. A. Robbie and J. K. Slaney, editors, </editor> <booktitle> Proceedings of the Thirteenth International Conference on Automated Deduction, volume 1104 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 373-387, </pages> <address> Berlin, July/August 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: System (E) shows that one cannot have more than one rule per f . The above theorem can be trivially iterated to allow any number of such rules in S for different f , yielding a new proof of: Corollary 29 <ref> [18] </ref>. The union of a terminating recursive program scheme S and a terminating system R that does not contain the scheme's defined symbols is terminating. Systems (B,E) show what happens if one has constructor terms rather than variables in a scheme for f.
Reference: 19. <author> Aart Middeldorp and Yoshihito Toyama. </author> <title> Completeness of combinations of constructor systems. </title> <editor> In R. Book, editor, </editor> <booktitle> Proceedings of the Fourth International Conference on Rewriting Techniques and Applications (Como, Italy), volume 488 of Lecture Notes in Computer Science, </booktitle> <pages> pages 174-187, </pages> <address> Berlin, April 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: We are primarily interested in the shared constructor case and in results that impose minimal restrictions on R (other than termination, of course). There are few such: for constructor-based systems in <ref> [19] </ref>; for right-linear and non-duplicating S in [21] (for the disjoint case, it conjectured by [25] and proved in [16]). Some results for the hierarchical case are contained in [6] and [14].
Reference: 20. <author> Enno Ohlebusch. </author> <title> Termination is not modular for confluent variable-preserving term rewriting systems. </title>
Reference-contexts: y; z) ! f (a; b; z; z; z) b ! 0 Drosten [9] composed the following nonterminating combination of confluent sys tems, only one of which is not left-linear: g (x; x; y) ! y f (a; b; x) ! f (x; x; x) a ! 0 (G) Ohlebusch <ref> [20] </ref> has shown that termination is also not preserved for confluent non-erasing systems. (An erasing system has variables on the left that do not appear on the right.) 3 The Pentagon Property Before turning to rewrite relations, we look at some abstract properties relating two binary relations R and S.
Reference: 21. <author> Enno Ohlebusch. </author> <title> On the modularity of termination of term rewriting systems. </title> <type> Report 11, </type> <institution> Abteilung Informationstechnik, Universitat Bielefeld, Bielefeld, Germany, </institution> <year> 1993. </year>
Reference-contexts: We are primarily interested in the shared constructor case and in results that impose minimal restrictions on R (other than termination, of course). There are few such: for constructor-based systems in [19]; for right-linear and non-duplicating S in <ref> [21] </ref> (for the disjoint case, it conjectured by [25] and proved in [16]). Some results for the hierarchical case are contained in [6] and [14].
Reference: 22. <author> Enno Ohlebusch. </author> <title> On the modularity of confluence of constructor-sharing term rewriting systems. </title> <booktitle> In Proceedings of the Colloquium on Trees in Algebra and Programming, volume 787 of Lecture Notes in Computer Science, </booktitle> <pages> pages 261-275, </pages> <address> Berlin, 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: System (A) shows that such a union need not be confluent; one result for the constructor sharing case is that unique-normalization is preserved <ref> [22] </ref>; a hierarchical combination need not be confluent, even if the union is normalizing [G.
Reference: 23. <author> Christian Prehofer. </author> <title> On modularity in term rewriting and narrowing. </title> <editor> In J.-P. Jouan-naud, editor, </editor> <booktitle> Proceedings of the First International Conference on Constraints in Computational Logics, volume 845 of Lecture Notes in Computer Science, </booktitle> <pages> pages 253-268, </pages> <address> Berlin, 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: It would also be nice to have counterexamples for the necessity of each condition. Finally, we should mention that critical pair conditions for the pentagon property could be formulated, along the lines of the work in <ref> [12, 3, 23] </ref>. Appendix This section contains diagrammatic proofs of several key lemmas. We use dashed arrows for steps in R and solid for S. Proof of Lemma 7.
Reference: 24. <author> Jean-Claude Raoult and Jean Vuillemin. </author> <title> Operational and semantic equivalence be-tween recursive programs. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 27(4) </volume> <pages> 772-796, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: LL (S ) ^ R l ?S l ) P (R k ; S ; S fl ) Clearly, the union of two orthogonal systems is orthogonal, hence, confluent. This has been weakened to allow critical pairs within each system: Theorem 19 <ref> [24] </ref>. LL (R) ^ LL (S ) ^ CR (R) ^ CR (S ) ^ R l ?S l ) CR (R [ S ) System (A) demonstrates the need for left linearity. We can allow non-collapsing R to be non-left-linear, by imposing termination on S. Specifically: Theorem 20.
Reference: 25. <author> Michael Rusinowitch. </author> <title> On termination of the direct sum of term-rewriting systems. </title> <journal> Information Processing Letters, </journal> <volume> 26 </volume> <pages> 65-70, </pages> <year> 1987. </year>
Reference-contexts: We are primarily interested in the shared constructor case and in results that impose minimal restrictions on R (other than termination, of course). There are few such: for constructor-based systems in [19]; for right-linear and non-duplicating S in [21] (for the disjoint case, it conjectured by <ref> [25] </ref> and proved in [16]). Some results for the hierarchical case are contained in [6] and [14].
Reference: 26. <author> Karl Stroetmann. </author> <title> The union of rewrite systems. </title> <note> Cited in [23]. </note>
Reference-contexts: We will use PNF (R; S ) to denote this property. It should be obvious that normal forms are preserved if S quasi-commutes over R: Fact 3 <ref> [26] </ref>. RS SR fl ) PNF (R; S ) It is also not hard to see that preservation of normal forms allows one to extend the square property from T fl to T ! (when T ! is defined): Lemma 4. <p> This implies Q (R k ; R k ; S ! ) and, by Fact 2, yields confluence. The following should be clear: Fact 21 <ref> [26] </ref>. LL (S ) ^ R r ?S l ) PNF (R; S ) Indeed, it is virtually imperative that S be left-linear (or else, every redex of a non-left-linear rule in S must be reducible by some other rule in S). Hence: Corollary 22.
Reference: 27. <author> Yoshihito Toyama. </author> <title> Counterexamples to termination for the direct sum for the direct sum of term rewriting systems. </title> <journal> Information Processing Letters, </journal> <volume> 25 </volume> <pages> 141-143, </pages> <year> 1987. </year>
Reference-contexts: g (2) ! 0 f (0; 1; x) ! f (x; x; x) a ! 3 The following nonterminating example (from [30]) has shared constructors on the right only, but is not left-linear: a ! 0 f (x; y; x; y; z) ! f (0; 1; z; z; z) Toyama <ref> [27] </ref> devised an example with no shared symbols at all: g (x; y) ! x f (0; 1; x) ! f (x; x; x) The following is a combination of non-left-linear confluent systems that share no symbols, one of which is non-overlapping (has no critical pairs) and the other has only
Reference: 28. <author> Yoshihito Toyama. </author> <title> On the Church-Rosser property for the direct sum of term rewriting systems. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 34(1) </volume> <pages> 128-143, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: We mainly address the case where S is terminating and confluent, but R is not necessarily left-linear. The issue of modularity of rewrite systems was first raised by Bidoit [4]. An early work dealing with combining terminating systems was [5]; confluence of disjoint systems was considered in <ref> [28] </ref>; many other properties were dealt with in [17]. Definitions and notation are as in [7] and [13]. See Table 1. <p> The difficulty is that preservation of normal forms is hard to achieve for practical systems, since constructor-topped right sides of R can easily overlap constructor patterns of left-sides of S. Toyama <ref> [28] </ref> proved that the union of two confluent systems that share no symbols is confluent (for example, System G), but we are interested in systems that at least share constructor symbols.
Reference: 29. <author> Yoshihito Toyama, Jan Willem Klop, and Hendrik Pieter Barendregt. </author> <title> Termination for direct sums of left-linear complete term rewriting systems. </title> <journal> J. of the Association for Computing Machinery, </journal> <volume> 42(6) </volume> <pages> 1275-1304, </pages> <month> November </month> <year> 1995. </year>
Reference-contexts: When R preserves S-normal forms, we have in fact that u is an S-normal form (of t). Hence, S (s) rewrites to S (t) in zero or more R steps. These conditions hold, for example, in the case considered in <ref> [29, Appendix B] </ref>, where R and S share no symbols, S is left-linear, confluent and terminating, and R is non-collapsing.
Reference: 30. <author> Xubo Zhang. </author> <title> Overlap closures do not suffice for termination of general term rewriting systems. </title> <journal> Information Processing Letters, </journal> <volume> 37(1) </volume> <pages> 9-11, </pages> <year> 1991. </year>
Reference-contexts: 1; x) ! f (x; x; x) In the following similarly nonterminating combination, the first system is conflu ent and (left- and right-) linear (the second is not, however): g (2) ! 0 f (0; 1; x) ! f (x; x; x) a ! 3 The following nonterminating example (from <ref> [30] </ref>) has shared constructors on the right only, but is not left-linear: a ! 0 f (x; y; x; y; z) ! f (0; 1; z; z; z) Toyama [27] devised an example with no shared symbols at all: g (x; y) ! x f (0; 1; x) ! f (x;
References-found: 30

