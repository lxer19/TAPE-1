URL: http://www.cs.uoregon.edu/~cbusche/thesis/thesis.ps.gz
Refering-URL: http://www.cs.uoregon.edu/~cbusche/thesis/
Root-URL: http://www.cs.uoregon.edu
Title: Data Reactive Graph Visualization  
Author: Chad E. Busche 
Degree: Undergraduate Thesis  
Note: Table of Contents  
Address: Or 97403  
Affiliation: Department of Computer and Information Science University of Oregon, Eugene  
Abstract: Data reactive graph visualization is the process by which a connected graph, consisting of vertices and edges, remains connected as the orientation and position of its vertices change. A problem being addressed in 3D visualization is maintaining the illusion of connectedness as a visualization is dynamically changing. The data reactive graph achieves this illusion through the use of reactive graphical objects. Reactive graphical objects keep the graphs edges connected to the vertices during graph updates. The data reactive graph is composed entirely of a base object abstraction called a glyph. A glyph object allows the vertices and edges of the data reactive graph to be of any geometric size, shape, orientation, or color. The glyph object also provides a common interface between different geometric objects. This provides a simple way of connecting reactive objects to geometric objects of different type. Several applications are presented that highlight the functionality and power of the data reactive graph. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Hersey, S. Hackstadt, L. Hansen, and A. Malony, Viz: </author> <title> A Visualization programming System. </title> <institution> University of Oregon, Eugene, </institution> <address> 11 Or, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: The programming benefit is to completely eliminate any need for routines to explicitly "fix" the graph visualization after an alteration has been made. The data reactive graph allows the programmer to simply change any part of the graph through the use of a base object abstraction. In the Viz <ref> [1] </ref> system (see section 2.3), this base object is called a glyph. Glyphs make it possible for the vertices and edges to be any geometric shape, size, color, or orientation. <p> As a vertex is dragged in real time the edges associated with that vertex will follow, maintaining the graphs structure. The graph object fully supports these operations. 2.3. Implementation The data reactive graph model was implemented in a visualization programming environment called Viz <ref> [1] </ref>. Viz is an object-oriented Scheme system that embeds the powerful 3D graphics library (Open Inventor)[2], and a graphical user interface construction kit (XForms)[3]. Viz also supports the data reactive model for constraints, controlled data flow, and animation. Viz is designed to rapidly prototype visualizations in an interactive programming environment.
Reference: [2] <author> J. Wernecke, </author> <title> The Inventor Mentor, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference: [3] <author> T. Zhao and M. Overmars, </author> <title> Forms Library A Graphical User Interface Toolkit for X, </title> <month> April, </month> <year> 1996. </year>
Reference: [4] <author> J. Callaway, M. Cummings, B. Deroski, P. Esposito, A. Forman, P. Langdon, M. Libeson, J. McCarthy, J. Sikora, D. Xue; and especially E. Abola, F. Bernstein, N. Manning, R. Shea, D. Stampf, and J. Sussman, </author> <title> Protein Data Bank Contents Guide: Atomic Coordinate Entry Format Description, </title> <month> October, </month> <year> 1996. </year>
Reference-contexts: A visual representation also aids in the understanding of which atoms compose a molecule. By building a visual representation of a molecule it is much easier to understand some of the basics about molecules. In Image 7, a caffeine molecule is modeled from a Protein Database <ref> [4] </ref> file, using the reactive graph. The protein data base file gives the 3 dimensional positions of the atoms, the bonds are found by computing the covalent radius of the atoms.
Reference: [5] <editor> IEEE Standard 1178-1990. </editor> <title> Standard for the Scheme Programming Language, </title> <publisher> IEEE, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: To create the scene, Inventor traverses the scene graph applying materials and transformations to the geometric objects in the scene, creating a 3D shaded representation of the scene graph that is displayed on the screen. Scheme <ref> [5] </ref> is the programming language by which interaction with Inventor takes place. Scheme is a high-level, dynamically typed, interactive language, that has advanced memory management techniques. The advantage of Scheme lies in the ability to write small, easy to interpret, powerful programs in a purely functional language. 3.
References-found: 5

