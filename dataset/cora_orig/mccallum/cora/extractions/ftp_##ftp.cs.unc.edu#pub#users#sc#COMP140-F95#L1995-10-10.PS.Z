URL: ftp://ftp.cs.unc.edu/pub/users/sc/COMP140-F95/L1995-10-10.PS.Z
Refering-URL: http://www.cs.unc.edu/~sc/teaching/COMP140-F1995/lectures.html
Root-URL: http://www.cs.unc.edu
Title: COMP 140: Introduction to Translator Systems Run-Time Environments (Lecture 1 of 2) storage location 100
Author: Siddhartha Chatterjee 
Note: Example 1 Consider the following declarations in ANSI C. int a 1; Suppose that the environment associates  Finally, perform this assignment.  
Date: 10 October 1995  
Abstract: The construction of the AST and the performance of semantic checks on it complete the analysis phase of translation. We are now ready for the synthesis phase, either in the form of interpreting the AST or in the form of generating machine code. Before we do that however, we make a short digression to discuss run-time environments. By this term, we mean the issues related to the management of processor and memory resources that arise when the program runs and the techniques for handling these issues. We will do this both in the context of Turing-- as well as in the context of languages like C that allow dynamic memory allocation. Going from the name of a program variable to its value is a two-step process. First, we need a function mapping variable names to storage locations; this function is called the environment. Then, we need a function mapping storage locations to the values they contain; this function is called the state. If you have taken COMP 144, you may have used the terms L-value and R-value. The environment maps names to L-values, and the state maps L-values to R-values. The storage location s associated with the name x is called the binding for x. The binding of names is a dynamic notion; its static counterpart is the declaration of names. New bindings can be introduced when a declaration is executed or when dynamic memory allocation is performed. An assignment to a variable changes the state but not the environment. Neither of these assignments change the environment. However, the value at location 100 (associated with a) is now 3, and the value at location 200 (associated with p) is now 100, the storage location associated with a. (The ANSI C operator & applied to a variable gives its L-value, i.e., the storage location to which the environment maps the variable.) 
Abstract-found: 1
Intro-found: 1
References-found: 0

