URL: http://drl.cs.uiuc.edu/pubs/ifip92.ps
Refering-URL: http://drl.cs.uiuc.edu/security/pubs.html
Root-URL: http://www.cs.uiuc.edu
Email: Email: ksmith@cs.uiuc.edu, winslett@cs.uiuc.edu  
Phone: Phone: (217) 244-1263  
Title: Multilevel Secure Rules: Integrating the Multilevel Secure and Active Data Models  
Author: Kenneth Smith and Marianne Winslett 
Keyword: Keyword Codes: H.2.4; I.2.4; K.6.5 Keywords: Database Management Systems; Knowledge Representation Formalisms and Methods; Security and Protection  
Address: 1304 West Springfield Avenue Urbana, IL 61801 USA  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign  
Abstract: Traditional database security is made more complex by the addition of rules to the data model. The security policy must control access privileges and accessibility for rule descriptions, executing rules, and database transitions (events). In this paper we extend the multilevel secure relational model to capture the functionality required of an active database, i. e. a database with production rules, able to respond to events. Database rules and events are given explicit security classifications by introducing multilevel secure relations for each. Database rule descriptions are treated as MLS objects. All new user-definable active components (rule actions, trigger detection daemons) conform to mandatory security constraints for subjects. An execution algorithm is given which employs cascading transactions to hide secure rule processing. Implications for implementing the new active functionality in an MLS relational database are also discussed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Thomas A. Berson and Teresa F. Lunt. </author> <title> Multilevel Security for Knowledge-Based Systems. </title> <booktitle> In Proceedings: 1987 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 235-242, </pages> <address> Oakland, CA, </address> <month> April </month> <year> 1987. </year>
Reference-contexts: A few previous works have discussed security in systems incorporating various types of rules. Matthew Morgenstern [7] considers the problem of covert inference channels in deductive (expert and database) systems subject to mandatory security. Thomas Berson and Teresa Lunt <ref> [1] </ref> discuss some research problems to be solved in bringing production rule systems under mandatory security requirements. In [5] Teresa Lunt describes an MLS object-oriented database model with constraints, including a brief description of backward chaining rules.
Reference: [2] <author> Thomas D. Garvey and Teresa F. Lunt. </author> <title> Multilevel Security for Knowledge-Based Systems. </title> <booktitle> In Proceedings: 6th Computer Security Applications Conference, </booktitle> <pages> pages 148-159, </pages> <address> Tucson, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: Thomas Berson and Teresa Lunt [1] discuss some research problems to be solved in bringing production rule systems under mandatory security requirements. In [5] Teresa Lunt describes an MLS object-oriented database model with constraints, including a brief description of backward chaining rules. Thomas Garvey and Teresa Lunt <ref> [2] </ref> extend this work by defining a mandatory security policy for a production rule (or knowledge based) system based on an MLS object-oriented database. Our work differs from that of [2] because we are concerned with active database rules instead of expert system (artificial intelligence) rules. <p> Thomas Garvey and Teresa Lunt <ref> [2] </ref> extend this work by defining a mandatory security policy for a production rule (or knowledge based) system based on an MLS object-oriented database. Our work differs from that of [2] because we are concerned with active database rules instead of expert system (artificial intelligence) rules. Specifically, our rules execute in the context of atomic transactions (although they can apply globally). <p> Efficiency of rule execution is vital not only to retain ordinary database functionality, but also to minimize opportunity for new covert timing channels. Set orientation (as described in [14]) makes our rules compatible with the database environment, and also improves efficiency. Additionally, our work differs from that of <ref> [2] </ref> because we base our view of an MLS database on the semantics described in [11]. In Section 2 we extend the security model of [11] to incorporate rules. Specifically, we describe rule descriptions and their representation as MLS data objects in an MLS rules relation.
Reference: [3] <author> L. Haas, W. Chang, G. Lohman, J. McPherson, P. Wilms, G. Lapis, B. Lindsay, H. Pirahesh, M. Carey, and E. Shekita. </author> <title> Starburst Mid-flight: as the Dust Clears. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 2(1) </volume> <pages> 143-160, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Production rule systems are rapidly being incorporated into database systems, producing active databases [12] <ref> [3] </ref> [6] [8] [9]. Rules extend traditional passive databases with a responsive capability, enabling enforcement of user-defined constraints, propagation of the effects of updates, and notification of concerned users about changes deemed relevant.
Reference: [4] <author> Teresa F. Lunt. </author> <title> Security in Database Systems: A Researcher's View. </title> <booktitle> In Proceedings: Second German Conference on Computer Security, </booktitle> <month> June </month> <year> 1991. </year>
Reference-contexts: We give an example of a policy concerning the MLS relational model described in [11]. In our example, we consider the need to automatically coalesce two MLS entities due to attribute polyinstantiation <ref> [4] </ref>. Under some circumstances, a user will decide two MLS entities in fact represent the same real world entity, and wish to coalesce them into a single MLS entity. <p> The U level inserted the Enterprise U because information about the Enterprise S became available via a channel external to the database. For example, some 8 Called entity polyinstantiation in <ref> [4] </ref>. information about the existence of a starship named Enterprise (the Enterprise S) was released to a newspaper and read by a U subject. <p> For example, if S and U level subjects read the same newspaper stories, then the S subjects may infer that Enterprise 9 Called attribute polyinstantiation in <ref> [4] </ref>. 10 In practice, to maintain referential integrity, when entities are coalesced then the relationships these entities participate in also need updating. U and Enterprise S are in fact the same entity. Inferences can also be made from the state of the database itself.
Reference: [5] <author> Teresa F. Lunt and Jonathan K. Millen. </author> <title> Secure Knowledge-Based Systems. </title> <type> Technical Report SRI-CSL-90-04, </type> <institution> SRI International, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: Matthew Morgenstern [7] considers the problem of covert inference channels in deductive (expert and database) systems subject to mandatory security. Thomas Berson and Teresa Lunt [1] discuss some research problems to be solved in bringing production rule systems under mandatory security requirements. In <ref> [5] </ref> Teresa Lunt describes an MLS object-oriented database model with constraints, including a brief description of backward chaining rules. Thomas Garvey and Teresa Lunt [2] extend this work by defining a mandatory security policy for a production rule (or knowledge based) system based on an MLS object-oriented database.
Reference: [6] <author> Dennis R. McCarthy and Umeshwar Dayal. </author> <title> The Architecture of an Active Data Base Management System. </title> <booktitle> In Proceedings: ACM SIGMOD, </booktitle> <pages> pages 215-224, </pages> <address> Portland, Oregon, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Production rule systems are rapidly being incorporated into database systems, producing active databases [12] [3] <ref> [6] </ref> [8] [9]. Rules extend traditional passive databases with a responsive capability, enabling enforcement of user-defined constraints, propagation of the effects of updates, and notification of concerned users about changes deemed relevant. <p> We extend this model with active rules, which we call multilevel secure database rules, or simply MLS rules, achieving active database functionality without violating mandatory security. MLS rules follow the general event-condition-action (ECA) rule model <ref> [6] </ref>. Rules are triggered by an event, a condition predicate then is evaluated, and, if the condition evaluates to true, an action is performed. <p> Operation Block. The operation block is a non-empty sequence of MLS-SQL commands 1 , comprising a transition. Arbitrary actions are used in some active models <ref> [6] </ref>, and are permissible in ours as long as mandatory security can be ensured. For example, notifying other users can be modeled as insertion to the user's Mail relation, which ensures mandatory security. Transition tables may be referenced by actions.
Reference: [7] <author> Matthew Morgenstern. </author> <title> Security and Inference in Multilevel Database and Knowledge-Base Systems. </title> <booktitle> In Proceedings: ACM SIGMOD, </booktitle> <pages> pages 357-373, </pages> <address> San Francisco, CA, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: A few previous works have discussed security in systems incorporating various types of rules. Matthew Morgenstern <ref> [7] </ref> considers the problem of covert inference channels in deductive (expert and database) systems subject to mandatory security. Thomas Berson and Teresa Lunt [1] discuss some research problems to be solved in bringing production rule systems under mandatory security requirements.
Reference: [8] <author> Tore Risch. </author> <title> Monitoring Database Objects. </title> <booktitle> In Proceedings: 15th VLDB Conference, </booktitle> <pages> pages 445-453, </pages> <address> Amsterdam, Holland, </address> <year> 1989. </year>
Reference-contexts: 1 Introduction Production rule systems are rapidly being incorporated into database systems, producing active databases [12] [3] [6] <ref> [8] </ref> [9]. Rules extend traditional passive databases with a responsive capability, enabling enforcement of user-defined constraints, propagation of the effects of updates, and notification of concerned users about changes deemed relevant.
Reference: [9] <author> Ulf Schreier, Hamid Pirahesh, Rakesh Agrawal, and C. Mohan. Alert: </author> <title> An Architec--ture for Transforming a Passive DBMS into an Active DBMS. </title> <booktitle> In Proceedings: 17th VLDB Conference, </booktitle> <address> Barcelona, Spain, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction Production rule systems are rapidly being incorporated into database systems, producing active databases [12] [3] [6] [8] <ref> [9] </ref>. Rules extend traditional passive databases with a responsive capability, enabling enforcement of user-defined constraints, propagation of the effects of updates, and notification of concerned users about changes deemed relevant.
Reference: [10] <author> Ken Smith and Larry Jones. </author> <title> Efficient Propagation of Updates Using Join Numbers. </title> <type> Technical Report UIUCDCS-R-91-1663, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: The Rules relation also provides a succinct description of the active nature of the database. Such a description is valuable for human and automated reasoning about the characteristics of particular database rule sets [14] <ref> [10] </ref>. For example, the Rules relation has sufficient information to support a algorithm to detect rule cycles. 3 MLS Rule Execution In this section we present further extensions to the MLS relational model which enable the activated rules to execute.
Reference: [11] <author> Ken Smith and Marianne Winslett. </author> <title> Entity Modeling in the MLS Relational Model. </title> <booktitle> In Proceedings: 18th VLDB, </booktitle> <pages> pages 199-210, </pages> <address> Vancouver, British Columbia, Canada, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: Each of these requirements must be met and integrated into a single and comprehensible security framework. In this paper, we use the multilevel secure relational database model developed in a previous paper <ref> [11] </ref> as a framework for active database rules. We extend this model with active rules, which we call multilevel secure database rules, or simply MLS rules, achieving active database functionality without violating mandatory security. MLS rules follow the general event-condition-action (ECA) rule model [6]. <p> Set orientation (as described in [14]) makes our rules compatible with the database environment, and also improves efficiency. Additionally, our work differs from that of [2] because we base our view of an MLS database on the semantics described in <ref> [11] </ref>. In Section 2 we extend the security model of [11] to incorporate rules. Specifically, we describe rule descriptions and their representation as MLS data objects in an MLS rules relation. We also describe how rules are activated, deactivated, and represented to the user. <p> Additionally, our work differs from that of [2] because we base our view of an MLS database on the semantics described in <ref> [11] </ref>. In Section 2 we extend the security model of [11] to incorporate rules. Specifically, we describe rule descriptions and their representation as MLS data objects in an MLS rules relation. We also describe how rules are activated, deactivated, and represented to the user. <p> In Section 4, we discuss how rules can be used to augment the MLS model itself through examples. In the final section we summarize and describe our future work. 2 Extending the MLS model to Incorporate Rules In this section we show how the MLS relational model presented in <ref> [11] </ref> is extended to permit the definition and representation of MLS rules. <p> An SQL-like syntax is used in MLS rules because it is set-oriented, and is compatible with many database systems. The events, conditions and actions of rules pertain to sets of items described by MLS-SQL <ref> [11] </ref> constructs which are used to express rules. Set-oriented rules are vital for efficiency in databases which deal with large amounts of data via set structures such as tables in the relational model and collections in the object-oriented model. <p> These tables are modeled as main memory MLS relations, which exist from the beginning of a transition until all rules triggered during that transition have executed. The MLS-SQL SELECT statement is defined in <ref> [11] </ref>. Specifically, the SELECT may contain a BELIEVED BY clause if needed, and is evaluated over the part of the database visible to the rule executing it under mandatory security restrictions. Operation Block. The operation block is a non-empty sequence of MLS-SQL commands 1 , comprising a transition. <p> U Federation Exploration Earth 3.0 Venus U Enterprise U Federation Security Earth 3.0 Venus S Falcon U Romulan Mining Jupiter 0.5 Neptune U Falcon U Romulan Combat null 0.5 Neptune S Nighthawk S Romulan Combat null null Neptune S 2.3 Multilevel Rules MLS rules are MLS entities, as defined in <ref> [11] </ref>. As an MLS entity, an MLS rule can exist in multiple security levels simultaneously (share the same entity identifier). <p> The descriptive state permits the representation of nonexecuting rules, thus permitting an intermediate stage of rule development, similar to the stage of uncompiled source code in software development. All operations on the Rules relation follow those described in <ref> [11] </ref>, with the following constraints. Insertion is mediated by a rule parser interface, to translate textual rules into proper Rules relation tuples, and to ensure the values for each field are within their domains. <p> The need to know constraints of discretionary security and the archival procedures for old data can be expressed as case by case responsive policies. We give an example of a policy concerning the MLS relational model described in <ref> [11] </ref>. In our example, we consider the need to automatically coalesce two MLS entities due to attribute polyinstantiation [4]. Under some circumstances, a user will decide two MLS entities in fact represent the same real world entity, and wish to coalesce them into a single MLS entity.
Reference: [12] <author> Michael Stonebraker, Eric N. Hanson, and Spyros Potamianos. </author> <title> The POSTGRES Rule Manager. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 14(7) </volume> <pages> 897-907, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Production rule systems are rapidly being incorporated into database systems, producing active databases <ref> [12] </ref> [3] [6] [8] [9]. Rules extend traditional passive databases with a responsive capability, enabling enforcement of user-defined constraints, propagation of the effects of updates, and notification of concerned users about changes deemed relevant.
Reference: [13] <author> Jennifer Widom, R. Cochrane, and Bruce Lindsay. </author> <title> Implementing Set-Oriented Production Rules as an Extension to Starburst. </title> <booktitle> In Proceedings: 17th VLDB, </booktitle> <pages> pages 275-285, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: We define MLS rules sufficiently to give an example illustrating their use, and to introduce our representation for MLS rules, the rules relation. 2.1 A Syntax for MLS Rules Our MLS rule model borrows heavily from the database rules of Starburst [14] <ref> [13] </ref>. The following MLS rule syntax is nearly identical to that for Starburst active database rules, except as noted. An SQL-like syntax is used in MLS rules because it is set-oriented, and is compatible with many database systems. <p> It operates as an MLS subject with a security level equal to T C. We follow the Starburst rule implementation model <ref> [13] </ref>, in that installing a rule in the database runtime system involves setting up or modifying a daemon called an attachment procedure to watch for events of interest to the rule, and to trigger it at the appropriate times. <p> DEACTIVATE WHERE P ; DEACTIVATE selects a set of active rules at the level of the issuer, removes them from the DBMS runtime system, and sets their State field to `D'. ACTIVATE and DEACTIVATE are MLS-SQL commands, subject to two integrity conditions (following <ref> [13] </ref>): * If a transaction enacts an event (update, delete, insert) on a table, it cannot sub- sequently activate or deactivate rules triggering on that table. * If transaction T1 precedes T2 in commit order, rule activations and deactivations by T1 must be visible in T2, and those performed by T2 <p> Our rule execution model is very closely related to the Starburst rule execution model described in <ref> [13] </ref>. 3.1 Rule Execution Under MLS Constraints MLS rule activations execute within the context of traditional database transactions, according to the Starburst rule execution model: As the transaction executes, events occur which trigger rules.
Reference: [14] <author> Jennifer Widom and Sheldon J. Finkelstein. </author> <title> A Syntax and Semantics for Set-Oriented Production Rules in Relational Database Systems. </title> <booktitle> In Proceedings: ACM SIGMOD, </booktitle> <pages> pages 259-270, </pages> <address> Atlantic City, N. J., </address> <month> May </month> <year> 1990. </year>
Reference-contexts: Active database rules both read and alter data, without user intervention, in response to database state transitions (events) and predicates about the database state. Rules can be set-oriented, as in <ref> [14] </ref>, and are thereby able to affect large subsets of the database in one execution. Rules can trigger other rules, initiating long chains of rule executions. Incorporating rules into the database greatly increases the power of users to act upon the database. <p> Rules are triggered by an event, a condition predicate then is evaluated, and, if the condition evaluates to true, an action is performed. As described in Section 2.1, MLS rules are both set-oriented and SQL-based, as are the rules of the Starburst DBMS <ref> [14] </ref>, in contrast to general production rule systems found in expert systems. <p> Efficiency of rule execution is vital not only to retain ordinary database functionality, but also to minimize opportunity for new covert timing channels. Set orientation (as described in <ref> [14] </ref>) makes our rules compatible with the database environment, and also improves efficiency. Additionally, our work differs from that of [2] because we base our view of an MLS database on the semantics described in [11]. In Section 2 we extend the security model of [11] to incorporate rules. <p> We define MLS rules sufficiently to give an example illustrating their use, and to introduce our representation for MLS rules, the rules relation. 2.1 A Syntax for MLS Rules Our MLS rule model borrows heavily from the database rules of Starburst <ref> [14] </ref> [13]. The following MLS rule syntax is nearly identical to that for Starburst active database rules, except as noted. An SQL-like syntax is used in MLS rules because it is set-oriented, and is compatible with many database systems. <p> The Rules relation also provides a succinct description of the active nature of the database. Such a description is valuable for human and automated reasoning about the characteristics of particular database rule sets <ref> [14] </ref> [10]. For example, the Rules relation has sufficient information to support a algorithm to detect rule cycles. 3 MLS Rule Execution In this section we present further extensions to the MLS relational model which enable the activated rules to execute.
Reference: [15] <author> Marianne Winslett, Xiaolei Qian, and Ken Smith. </author> <title> A Foundation for the MLS Relational Data Model. (In Preparation for TODS), </title> <year> 1992. </year>
Reference-contexts: Cross-level joins are not defined in this paper, but have been defined in subsequent work <ref> [15] </ref>. 5 Conclusions In this paper we have presented a model for multilevel secure rules modeled as MLS entities, in a single coherent security framework. We have shown how to extend an MLS relational database to incorporate active rules by introducing the special MLS Rules relation.
References-found: 15

