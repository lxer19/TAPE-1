URL: http://www.cs.umn.edu/Users/dept/users/kumar/mlevel_mpi.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/kumar/
Root-URL: http://www.cs.umn.edu
Email: fkarypis, kumarg@cs.umn.edu  
Title: Coarse-Grain Parallel Formulation of Multilevel k -way Graph Partitioning Algorithm  
Author: George Karypis and Vipin Kumar 
Address: Science/AHPCRC, Minneapolis, MN 55455  
Affiliation: University of Minnesota, Department of Computer  
Note: Appears in the Eighth SIAM Conference on Parallel Processing for Scientific Computing A  
Abstract: The serial algorithms described in this paper are implemented by the `METIS: Unstructured Graph Partitioning and Sparse Matrix Ordering System'. METIS is available on WWW at URL: http://www.cs.umn.edu/karypis/metis/metis.html Abstract In this paper we present a parallel formulation of a multilevel k-way graph partitioning algorithm, that is particularly suited for high latency message-passing libraries. The multilevel k-way partitioning algorithm reduces the size of the graph by collapsing vertices and edges (coarsening phase), finds a k-way partitioning of the smaller graph, and then it constructs a k-way partitioning for the original graph by projecting and refining the partition to successively finer graphs (uncoarsening phase). Our algorithm is able to achieve a high degree of concurrency, while maintaining the high quality partitions produced by the serial algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Stephen T. Barnard. Pmrsb: </author> <title> Parallel multilevel recursive spectral bisection. </title> <booktitle> In Supercomputing 1995, </booktitle> <year> 1995. </year>
Reference-contexts: These schemes provide significantly better partitions than those provided by spectral partitioning techniques [22], and are generally at least an order of magnitude faster than even the state-of-the art implementation of spectral techniques [3]. Developing parallel graph partitioning algorithms has received a lot of attention <ref> [11, 23, 6, 13, 2, 1, 17] </ref> due to its extensive applications in many areas. However, most of this work was concentrated on algorithms based on geometric graph partitioning [11, 6], or algorithms that have very high computational requirements, such as spectral bisection [2, 1, 13]. <p> However, most of this work was concentrated on algorithms based on geometric graph partitioning [11, 6], or algorithms that have very high computational requirements, such as spectral bisection <ref> [2, 1, 13] </ref>. Geometric graph partitioning algorithms tend to be inherently parallel, but often produce significantly worse partitions compared with the multilevel algorithms. <p> Development of formulations of multilevel graph partitioning schemes is quite challenging. Coarsening requires that nodes connected via edges be merged together. Since the graph is distributed randomly across the processors, parallel coarsening schemes can require a lot of communication <ref> [23, 1, 17] </ref>. The Kernighan-Lin refinement heuristic and its variant, that are used during the uncoarsening phase, appear serial in nature [8], and previous attempts to parallelize them have had mixed success [8, 6, 17]. Recently, we developed [18] a parallel formulation for the multilevel k-way partitioning algorithm [16].
Reference: [2] <author> Stephen T. Barnard and Horst Simon. </author> <title> A parallel implementation of multilevel recursive spectral bisection for application to adaptive unstructured meshes. </title> <booktitle> In Proceedings of the seventh SIAM conference on Parallel Processing for Scientific Computing, </booktitle> <pages> pages 627-632, </pages> <year> 1995. </year>
Reference-contexts: These schemes provide significantly better partitions than those provided by spectral partitioning techniques [22], and are generally at least an order of magnitude faster than even the state-of-the art implementation of spectral techniques [3]. Developing parallel graph partitioning algorithms has received a lot of attention <ref> [11, 23, 6, 13, 2, 1, 17] </ref> due to its extensive applications in many areas. However, most of this work was concentrated on algorithms based on geometric graph partitioning [11, 6], or algorithms that have very high computational requirements, such as spectral bisection [2, 1, 13]. <p> However, most of this work was concentrated on algorithms based on geometric graph partitioning [11, 6], or algorithms that have very high computational requirements, such as spectral bisection <ref> [2, 1, 13] </ref>. Geometric graph partitioning algorithms tend to be inherently parallel, but often produce significantly worse partitions compared with the multilevel algorithms.
Reference: [3] <author> Stephen T. Barnard and Horst D. Simon. </author> <title> A fast multilevel implementation of recursive spectral bisection for partitioning unstructured problems. </title> <booktitle> In Proceedings of the sixth SIAM conference on Parallel Processing for Scientific Computing, </booktitle> <pages> pages 711-718, </pages> <year> 1993. </year> <month> 7 </month>
Reference-contexts: These schemes provide significantly better partitions than those provided by spectral partitioning techniques [22], and are generally at least an order of magnitude faster than even the state-of-the art implementation of spectral techniques <ref> [3] </ref>. Developing parallel graph partitioning algorithms has received a lot of attention [11, 23, 6, 13, 2, 1, 17] due to its extensive applications in many areas. <p> The experiments presented in [16] show that this algorithm produces partitions that are of comparable or better quality than those produced by the multilevel recursive bisection algorithm [15] and significantly better than those produced by the state-of-the art multilevel spectral bisection algorithm <ref> [3] </ref>. Furthermore, this multilevel k-way partitioning algorithm is up to 5 times faster than the multilevel recursive bisection, and up to 150 times faster than multilevel spectral bisection. The reader should refer to [16] for further details about the serial algorithm.
Reference: [4] <author> T. Bui and C. Jones. </author> <title> A heuristic for reducing fill in sparse matrix factorization. </title> <booktitle> In 6th SIAM Conf. Parallel Processing for Scientific Computing, </booktitle> <pages> pages 445-452, </pages> <year> 1993. </year>
Reference-contexts: The graph partitioning problem is NP-complete. However, many algorithms have been developed that find a reasonably good partition. Recently, a number of researchers have investigated a class of algorithms that are based on multilevel graph partitioning that have moderate computational complexity <ref> [4, 5, 9, 10, 12, 7, 21, 15, 14] </ref>. <p> Some of these multilevel schemes <ref> [4, 12, 15, 14, 16] </ref> provide excellent partitions for a wide variety of graphs. These schemes provide significantly better partitions than those provided by spectral partitioning techniques [22], and are generally at least an order of magnitude faster than even the state-of-the art implementation of spectral techniques [3].
Reference: [5] <author> Chung-Kuan Cheng and Yen-Chuen A. Wei. </author> <title> An improved two-way partitioning algorithm with stable performance. </title> <journal> IEEE Transactions on Computer Aided Design, </journal> <volume> 10(12) </volume> <pages> 1502-1511, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: The graph partitioning problem is NP-complete. However, many algorithms have been developed that find a reasonably good partition. Recently, a number of researchers have investigated a class of algorithms that are based on multilevel graph partitioning that have moderate computational complexity <ref> [4, 5, 9, 10, 12, 7, 21, 15, 14] </ref>.
Reference: [6] <author> Pedro Diniz, Steve Plimpton, Bruce Hendrickson, and Robert Leland. </author> <title> Parallel algorithms for dynamically partitioning unstructured grids. </title> <booktitle> In Proceedings of the seventh SIAM conference on Parallel Processing for Scientific Computing, </booktitle> <pages> pages 615-620, </pages> <year> 1995. </year>
Reference-contexts: These schemes provide significantly better partitions than those provided by spectral partitioning techniques [22], and are generally at least an order of magnitude faster than even the state-of-the art implementation of spectral techniques [3]. Developing parallel graph partitioning algorithms has received a lot of attention <ref> [11, 23, 6, 13, 2, 1, 17] </ref> due to its extensive applications in many areas. However, most of this work was concentrated on algorithms based on geometric graph partitioning [11, 6], or algorithms that have very high computational requirements, such as spectral bisection [2, 1, 13]. <p> Developing parallel graph partitioning algorithms has received a lot of attention [11, 23, 6, 13, 2, 1, 17] due to its extensive applications in many areas. However, most of this work was concentrated on algorithms based on geometric graph partitioning <ref> [11, 6] </ref>, or algorithms that have very high computational requirements, such as spectral bisection [2, 1, 13]. Geometric graph partitioning algorithms tend to be inherently parallel, but often produce significantly worse partitions compared with the multilevel algorithms. <p> The Kernighan-Lin refinement heuristic and its variant, that are used during the uncoarsening phase, appear serial in nature [8], and previous attempts to parallelize them have had mixed success <ref> [8, 6, 17] </ref>. Recently, we developed [18] a parallel formulation for the multilevel k-way partitioning algorithm [16]. Our algorithm is able to achieve high degree of concurrency while it maintains the high quality of the partitions produced by the serial multilevel partitioning algorithm.
Reference: [7] <author> J. Garbers, H. J. Promel, and A. Steger. </author> <title> Finding clusters in VLSI circuits. </title> <booktitle> In Proceedings of IEEE International Conference on Computer Aided Design, </booktitle> <pages> pages 520-523, </pages> <year> 1990. </year>
Reference-contexts: The graph partitioning problem is NP-complete. However, many algorithms have been developed that find a reasonably good partition. Recently, a number of researchers have investigated a class of algorithms that are based on multilevel graph partitioning that have moderate computational complexity <ref> [4, 5, 9, 10, 12, 7, 21, 15, 14] </ref>.
Reference: [8] <author> J. R. Gilbert and E. Zmijewski. </author> <title> A parallel graph partitioning algorithm for a message-passing multiprocessor. </title> <journal> Internation Journal of Parallel Programming, </journal> (16):498-513, 1987. 
Reference-contexts: Coarsening requires that nodes connected via edges be merged together. Since the graph is distributed randomly across the processors, parallel coarsening schemes can require a lot of communication [23, 1, 17]. The Kernighan-Lin refinement heuristic and its variant, that are used during the uncoarsening phase, appear serial in nature <ref> [8] </ref>, and previous attempts to parallelize them have had mixed success [8, 6, 17]. Recently, we developed [18] a parallel formulation for the multilevel k-way partitioning algorithm [16]. <p> The Kernighan-Lin refinement heuristic and its variant, that are used during the uncoarsening phase, appear serial in nature [8], and previous attempts to parallelize them have had mixed success <ref> [8, 6, 17] </ref>. Recently, we developed [18] a parallel formulation for the multilevel k-way partitioning algorithm [16]. Our algorithm is able to achieve high degree of concurrency while it maintains the high quality of the partitions produced by the serial multilevel partitioning algorithm.
Reference: [9] <author> Lars Hagen and Andrew Kahng. </author> <title> Fast spectral methods for ratio cut partitioning and clustering. </title> <booktitle> In Proceedings of IEEE International Conference on Computer Aided Design, </booktitle> <pages> pages 10-13, </pages> <year> 1991. </year>
Reference-contexts: The graph partitioning problem is NP-complete. However, many algorithms have been developed that find a reasonably good partition. Recently, a number of researchers have investigated a class of algorithms that are based on multilevel graph partitioning that have moderate computational complexity <ref> [4, 5, 9, 10, 12, 7, 21, 15, 14] </ref>.
Reference: [10] <author> Lars Hagen and Andrew Kahng. </author> <title> A new approach to effective circuit clustering. </title> <booktitle> In Proceedings of IEEE International Conference on Computer Aided Design, </booktitle> <pages> pages 422-427, </pages> <year> 1992. </year>
Reference-contexts: The graph partitioning problem is NP-complete. However, many algorithms have been developed that find a reasonably good partition. Recently, a number of researchers have investigated a class of algorithms that are based on multilevel graph partitioning that have moderate computational complexity <ref> [4, 5, 9, 10, 12, 7, 21, 15, 14] </ref>.
Reference: [11] <author> M. T. Heath and Padma Raghavan. </author> <title> A Cartesian parallel nested dissection algorithm. </title> <journal> SIAM Journal of Matrix Analysis and Applications, </journal> <volume> 16(1) </volume> <pages> 235-253, </pages> <year> 1995. </year>
Reference-contexts: These schemes provide significantly better partitions than those provided by spectral partitioning techniques [22], and are generally at least an order of magnitude faster than even the state-of-the art implementation of spectral techniques [3]. Developing parallel graph partitioning algorithms has received a lot of attention <ref> [11, 23, 6, 13, 2, 1, 17] </ref> due to its extensive applications in many areas. However, most of this work was concentrated on algorithms based on geometric graph partitioning [11, 6], or algorithms that have very high computational requirements, such as spectral bisection [2, 1, 13]. <p> Developing parallel graph partitioning algorithms has received a lot of attention [11, 23, 6, 13, 2, 1, 17] due to its extensive applications in many areas. However, most of this work was concentrated on algorithms based on geometric graph partitioning <ref> [11, 6] </ref>, or algorithms that have very high computational requirements, such as spectral bisection [2, 1, 13]. Geometric graph partitioning algorithms tend to be inherently parallel, but often produce significantly worse partitions compared with the multilevel algorithms.
Reference: [12] <author> Bruce Hendrickson and Robert Leland. </author> <title> A multilevel algorithm for partitioning graphs. </title> <type> Technical Report SAND93-1301, </type> <institution> Sandia National Laboratories, </institution> <year> 1993. </year>
Reference-contexts: The graph partitioning problem is NP-complete. However, many algorithms have been developed that find a reasonably good partition. Recently, a number of researchers have investigated a class of algorithms that are based on multilevel graph partitioning that have moderate computational complexity <ref> [4, 5, 9, 10, 12, 7, 21, 15, 14] </ref>. <p> Some of these multilevel schemes <ref> [4, 12, 15, 14, 16] </ref> provide excellent partitions for a wide variety of graphs. These schemes provide significantly better partitions than those provided by spectral partitioning techniques [22], and are generally at least an order of magnitude faster than even the state-of-the art implementation of spectral techniques [3].
Reference: [13] <author> Zdenek Johan, Kapil K. Mathur, S. Lennart Johnsson, and Thomas J. R. Hughes. </author> <title> Finite element methods on the connection machine cm-5 system. </title> <type> Technical report, </type> <institution> Thinking Machines Corporation, </institution> <year> 1993. </year>
Reference-contexts: These schemes provide significantly better partitions than those provided by spectral partitioning techniques [22], and are generally at least an order of magnitude faster than even the state-of-the art implementation of spectral techniques [3]. Developing parallel graph partitioning algorithms has received a lot of attention <ref> [11, 23, 6, 13, 2, 1, 17] </ref> due to its extensive applications in many areas. However, most of this work was concentrated on algorithms based on geometric graph partitioning [11, 6], or algorithms that have very high computational requirements, such as spectral bisection [2, 1, 13]. <p> However, most of this work was concentrated on algorithms based on geometric graph partitioning [11, 6], or algorithms that have very high computational requirements, such as spectral bisection <ref> [2, 1, 13] </ref>. Geometric graph partitioning algorithms tend to be inherently parallel, but often produce significantly worse partitions compared with the multilevel algorithms.
Reference: [14] <author> G. Karypis and V. Kumar. </author> <title> Analysis of multilevel graph partitioning. </title> <type> Technical Report TR 95-037, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1995. </year> <note> Also available on WWW at URL http://www.cs.umn.edu/karypis/papers/mlevel analysis.ps. A short version appears in Supercomputing 95. </note>
Reference-contexts: The graph partitioning problem is NP-complete. However, many algorithms have been developed that find a reasonably good partition. Recently, a number of researchers have investigated a class of algorithms that are based on multilevel graph partitioning that have moderate computational complexity <ref> [4, 5, 9, 10, 12, 7, 21, 15, 14] </ref>. <p> Some of these multilevel schemes <ref> [4, 12, 15, 14, 16] </ref> provide excellent partitions for a wide variety of graphs. These schemes provide significantly better partitions than those provided by spectral partitioning techniques [22], and are generally at least an order of magnitude faster than even the state-of-the art implementation of spectral techniques [3].
Reference: [15] <author> G. Karypis and V. Kumar. </author> <title> A fast and high quality multilevel scheme for partitioning irregular graphs. </title> <type> Technical Report TR 95-035, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1995. </year> <note> Also available on WWW at URL http://www.cs.umn.edu/karypis/papers/mlevel serial.ps. A short version appears in Intl. Conf. on Parallel Processing 1995. </note>
Reference-contexts: The graph partitioning problem is NP-complete. However, many algorithms have been developed that find a reasonably good partition. Recently, a number of researchers have investigated a class of algorithms that are based on multilevel graph partitioning that have moderate computational complexity <ref> [4, 5, 9, 10, 12, 7, 21, 15, 14] </ref>. <p> Some of these multilevel schemes <ref> [4, 12, 15, 14, 16] </ref> provide excellent partitions for a wide variety of graphs. These schemes provide significantly better partitions than those provided by spectral partitioning techniques [22], and are generally at least an order of magnitude faster than even the state-of-the art implementation of spectral techniques [3]. <p> During the initial partitioning phase, a k-way partition of G m is computed (using multilevel recursive bisection <ref> [15] </ref>). Finally, during the uncoarsening phase, this partition is projected to successively finer graphs G i for i D m 1; m 2; : : : ; 0, and it is further refined using a greedy algorithm. <p> The experiments presented in [16] show that this algorithm produces partitions that are of comparable or better quality than those produced by the multilevel recursive bisection algorithm <ref> [15] </ref> and significantly better than those produced by the state-of-the art multilevel spectral bisection algorithm [3]. Furthermore, this multilevel k-way partitioning algorithm is up to 5 times faster than the multilevel recursive bisection, and up to 150 times faster than multilevel spectral bisection. <p> The matching is constructed in an iterative fashion. During the c th iteration, each processor scans the locally unmatched vertices, and for each vertex color c, it matches it with another unmatched neighbor (if such a neighbor exists) using the heavy-edge heuristic <ref> [15] </ref>. If this neighbor is stored locally, then the matching is granted right away; otherwise, a match request is sent to the processor that stores this vertex. Next, all processors proceed to service the match requests that they received.
Reference: [16] <author> G. Karypis and V. Kumar. </author> <title> Multilevel k-way partitioning scheme for irregular graphs. </title> <type> Technical Report TR 95-064, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1995. </year> <note> Also available on WWW at URL http://www.cs.umn.edu/karypis/papers/mlevel kway.ps. </note>
Reference-contexts: Some of these multilevel schemes <ref> [4, 12, 15, 14, 16] </ref> provide excellent partitions for a wide variety of graphs. These schemes provide significantly better partitions than those provided by spectral partitioning techniques [22], and are generally at least an order of magnitude faster than even the state-of-the art implementation of spectral techniques [3]. <p> The Kernighan-Lin refinement heuristic and its variant, that are used during the uncoarsening phase, appear serial in nature [8], and previous attempts to parallelize them have had mixed success [8, 6, 17]. Recently, we developed [18] a parallel formulation for the multilevel k-way partitioning algorithm <ref> [16] </ref>. Our algorithm is able to achieve high degree of concurrency while it maintains the high quality of the partitions produced by the serial multilevel partitioning algorithm. <p> new parallel partitioning algorithm is up to 50% faster than the MPI-based implementation of the algorithm presented in [18], while it produces comparable quality partitionings. 2 Parallel Multilevel k-way Graph Partitioning In [18] we presented a parallel graph partitioning algorithm that is based on the multilevel k-way graph partitioning algorithm <ref> [16] </ref>. This multilevel k-way partitioning algorithm has a complexity linear to the number of vertices in the graph and has been found to produce high quality partitionings. The basic structure of a multilevel algorithm is illustrated in Figure 1. <p> This algorithm randomly visits the vertices of the graph and moves a vertex to a different partition if such a move leads to a reduction in the edge-cut. The experiments presented in <ref> [16] </ref> show that this algorithm produces partitions that are of comparable or better quality than those produced by the multilevel recursive bisection algorithm [15] and significantly better than those produced by the state-of-the art multilevel spectral bisection algorithm [3]. <p> Furthermore, this multilevel k-way partitioning algorithm is up to 5 times faster than the multilevel recursive bisection, and up to 150 times faster than multilevel spectral bisection. The reader should refer to <ref> [16] </ref> for further details about the serial algorithm. Our parallel formulation of this multilevel k-way partitioning algorithm [18] relies extensively on computing a coloring of the vertices at each successive coarse graph G i D .V i ; E i /.
Reference: [17] <author> G. Karypis and V. Kumar. </author> <title> A parallel algorithms for multilevel graph partitioning and sparse matrix ordering. </title> <type> Technical Report TR 95-036, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1995. </year> <note> Also available on WWW at URL http://www.cs.umn.edu/karypis/papers/mlevel parallel.ps. A short version appears in Intl. Parallel Processing Symposium 1996. </note>
Reference-contexts: These schemes provide significantly better partitions than those provided by spectral partitioning techniques [22], and are generally at least an order of magnitude faster than even the state-of-the art implementation of spectral techniques [3]. Developing parallel graph partitioning algorithms has received a lot of attention <ref> [11, 23, 6, 13, 2, 1, 17] </ref> due to its extensive applications in many areas. However, most of this work was concentrated on algorithms based on geometric graph partitioning [11, 6], or algorithms that have very high computational requirements, such as spectral bisection [2, 1, 13]. <p> Development of formulations of multilevel graph partitioning schemes is quite challenging. Coarsening requires that nodes connected via edges be merged together. Since the graph is distributed randomly across the processors, parallel coarsening schemes can require a lot of communication <ref> [23, 1, 17] </ref>. The Kernighan-Lin refinement heuristic and its variant, that are used during the uncoarsening phase, appear serial in nature [8], and previous attempts to parallelize them have had mixed success [8, 6, 17]. Recently, we developed [18] a parallel formulation for the multilevel k-way partitioning algorithm [16]. <p> The Kernighan-Lin refinement heuristic and its variant, that are used during the uncoarsening phase, appear serial in nature [8], and previous attempts to parallelize them have had mixed success <ref> [8, 6, 17] </ref>. Recently, we developed [18] a parallel formulation for the multilevel k-way partitioning algorithm [16]. Our algorithm is able to achieve high degree of concurrency while it maintains the high quality of the partitions produced by the serial multilevel partitioning algorithm. <p> In fact, the reduction in the edge-cut obtained by concurrently moving connected vertices from the same partition, is at least as high as the sum of the edge-cut reductions of each individual move. This is illustrated by the example in Figure 2 (d) <ref> [17] </ref>. Thus, the coloring-based refinement algorithm was in essence too restrictive while selecting vertices for movement. However, by using the new refinement scheme, there are certain type of moves that may potentially lead to thrashing.
Reference: [18] <author> G. Karypis and V. Kumar. </author> <title> Parallel multilevel k-way partitioning scheme for irregular graphs. </title> <type> Technical Report TR 96-036, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1996. </year> <note> Also available on WWW at URL http://www.cs.umn.edu/karypis/papers/mlevel kparallel.ps. A short version appears in Supercomputing 96. </note>
Reference-contexts: The Kernighan-Lin refinement heuristic and its variant, that are used during the uncoarsening phase, appear serial in nature [8], and previous attempts to parallelize them have had mixed success [8, 6, 17]. Recently, we developed <ref> [18] </ref> a parallel formulation for the multilevel k-way partitioning algorithm [16]. Our algorithm is able to achieve high degree of concurrency while it maintains the high quality of the partitions produced by the serial multilevel partitioning algorithm. <p> This new formulation performs far fewer communication steps, making it suitable for message-passing libraries (and architectures) that have high message startup overhead. Our MPI-based implementation of the new parallel partitioning algorithm is up to 50% faster than the MPI-based implementation of the algorithm presented in <ref> [18] </ref>, while it produces comparable quality partitionings. 2 Parallel Multilevel k-way Graph Partitioning In [18] we presented a parallel graph partitioning algorithm that is based on the multilevel k-way graph partitioning algorithm [16]. <p> Our MPI-based implementation of the new parallel partitioning algorithm is up to 50% faster than the MPI-based implementation of the algorithm presented in <ref> [18] </ref>, while it produces comparable quality partitionings. 2 Parallel Multilevel k-way Graph Partitioning In [18] we presented a parallel graph partitioning algorithm that is based on the multilevel k-way graph partitioning algorithm [16]. This multilevel k-way partitioning algorithm has a complexity linear to the number of vertices in the graph and has been found to produce high quality partitionings. <p> Furthermore, this multilevel k-way partitioning algorithm is up to 5 times faster than the multilevel recursive bisection, and up to 150 times faster than multilevel spectral bisection. The reader should refer to [16] for further details about the serial algorithm. Our parallel formulation of this multilevel k-way partitioning algorithm <ref> [18] </ref> relies extensively on computing a coloring of the vertices at each successive coarse graph G i D .V i ; E i /. This coloring is computed using Luby's [20] algorithm, adapted for distributed memory parallel computers. Consider the graph G i D .V i ; E i /. <p> Given these parameters, the parallel multilevel k-way partitioning algorithm will perform a total of 700 all-to-all personalized communication operations. On 128 processors, these operations will incur a total of 89600t s overhead due to message startup time. In <ref> [18] </ref> we presented results of the implementation of our parallel multilevel k-way partitioning algorithm on Cray T3D. This implementation was done using the one-sided communication primitives available on Cray T3D as part of the SHMEM communication library. This library has a very small message startup overhead of about 2 microseconds. <p> Thus, the number of all-to-all personalized communications are reduced from two times the number of colors to only eight. However, performing refinement without using coloring is somewhat more difficult. Recall from Section 2 (and from <ref> [18] </ref>) that by moving a group of vertices of a single color at a time, we were able to ensure that no thrashing occurs during refinement. <p> The coarse-grained parallel multilevel k-way partitioning algorithm has a number of enhancements over the parallel algorithm presented in <ref> [18] </ref> that both improve its performance as well as extend its functionality. As the the size of the successively coarser graphs decreases, the amount of time required to generate the next level coarser graphs is dominated by the communication overheads.
Reference: [19] <author> Vipin Kumar, Ananth Grama, Anshul Gupta, and George Karypis. </author> <title> Introduction to Parallel Computing: Design and Analysis of Algorithms. </title> <publisher> Benjamin/Cummings Publishing Company, </publisher> <address> Redwood City, CA, </address> <year> 1994. </year>
Reference-contexts: In our algorithm we parallelize this phase by using a parallel algorithm that parallelizes the recursive nature of the algorithm. This is done as follows: The various pieces of the coarse graph are gathered to all the processors using an all-to-all broadcast operation <ref> [19] </ref>. At this point the processors perform multilevel recursive bisection. However, each processor explores only a single path of the recursive bisection tree. <p> Hence, each processor needs to exchange data with O.n= p 2 / vertices of each processor. Alternatively, each processor needs to send information for about O.n= p 2 / locally stored vertices to each other processor. This can be accomplished by using the all-to-all personalized 3 communication operation <ref> [19] </ref>. As the size of the coarser graphs successively decreases, the amount of data that needs to be exchanged also decreases. However, each processor still needs to send and receive data from almost all other processors.
Reference: [20] <author> Michael Luby. </author> <title> A simple parallel algorithm for the maximal independent set problem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(4) </volume> <pages> 1036-1053, </pages> <year> 1986. </year>
Reference-contexts: Our parallel formulation of this multilevel k-way partitioning algorithm [18] relies extensively on computing a coloring of the vertices at each successive coarse graph G i D .V i ; E i /. This coloring is computed using Luby's <ref> [20] </ref> algorithm, adapted for distributed memory parallel computers. Consider the graph G i D .V i ; E i /. The matching is constructed in an iterative fashion.
Reference: [21] <author> R. Ponnusamy, N. Mansour, A. Choudhary, and G. C. Fox. </author> <title> Graph contraction and physical optimization methods: a quality-cost tradeoff for mapping data on parallel computers. </title> <booktitle> In International Conference of Supercomputing, </booktitle> <year> 1993. </year>
Reference-contexts: The graph partitioning problem is NP-complete. However, many algorithms have been developed that find a reasonably good partition. Recently, a number of researchers have investigated a class of algorithms that are based on multilevel graph partitioning that have moderate computational complexity <ref> [4, 5, 9, 10, 12, 7, 21, 15, 14] </ref>.
Reference: [22] <author> Alex Pothen, Horst D. Simon, and Kang-Pu Liou. </author> <title> Partitioning sparse matrices with eigenvectors of graphs. </title> <journal> SIAM Journal of Matrix Analysis and Applications, </journal> <volume> 11(3) </volume> <pages> 430-452, </pages> <year> 1990. </year>
Reference-contexts: Some of these multilevel schemes [4, 12, 15, 14, 16] provide excellent partitions for a wide variety of graphs. These schemes provide significantly better partitions than those provided by spectral partitioning techniques <ref> [22] </ref>, and are generally at least an order of magnitude faster than even the state-of-the art implementation of spectral techniques [3]. Developing parallel graph partitioning algorithms has received a lot of attention [11, 23, 6, 13, 2, 1, 17] due to its extensive applications in many areas.
Reference: [23] <author> Padma Raghavan. </author> <title> Parallel ordering using edge contraction. </title> <type> Technical Report CS-95-293, </type> <institution> Department of Computer Science, University of Tennessee, </institution> <year> 1995. </year> <month> 8 </month>
Reference-contexts: These schemes provide significantly better partitions than those provided by spectral partitioning techniques [22], and are generally at least an order of magnitude faster than even the state-of-the art implementation of spectral techniques [3]. Developing parallel graph partitioning algorithms has received a lot of attention <ref> [11, 23, 6, 13, 2, 1, 17] </ref> due to its extensive applications in many areas. However, most of this work was concentrated on algorithms based on geometric graph partitioning [11, 6], or algorithms that have very high computational requirements, such as spectral bisection [2, 1, 13]. <p> Development of formulations of multilevel graph partitioning schemes is quite challenging. Coarsening requires that nodes connected via edges be merged together. Since the graph is distributed randomly across the processors, parallel coarsening schemes can require a lot of communication <ref> [23, 1, 17] </ref>. The Kernighan-Lin refinement heuristic and its variant, that are used during the uncoarsening phase, appear serial in nature [8], and previous attempts to parallelize them have had mixed success [8, 6, 17]. Recently, we developed [18] a parallel formulation for the multilevel k-way partitioning algorithm [16].
References-found: 23

