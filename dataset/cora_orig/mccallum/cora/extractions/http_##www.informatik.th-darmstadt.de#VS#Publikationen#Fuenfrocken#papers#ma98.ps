URL: http://www.informatik.th-darmstadt.de/VS/Publikationen/Fuenfrocken/papers/ma98.ps
Refering-URL: http://www.informatik.th-darmstadt.de/~fuenf/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: fuenf@informatik.tu-darmstadt.de  
Title: Transparent Migration of Java-based Mobile Agents Capturing and Reestablishing the State of Java Programs  
Author: Stefan Funfrocken 
Address: Alexanderstr. 6, D 64283 Darmstadt, Germany  
Affiliation: Department of Computer Science, Darmstadt University of Technology,  
Abstract: In this paper we describe a way to save and restore the state of a running Java program. We achieve this on the language level, without modifying the Java virtual machine, by instrumenting the programmer's original code with a preprocessor. The automatically inserted code saves the runtime information when the program requests state saving and reestablishes the program's runtime state on restart. The current preprocessor prototype is used in a mobile agent scenario to offer transparent agent migration for Java based mobile agents, but could generally be used to save and reestablish the execution state of any Java program.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Baumann J., Hohl F., Rothermel K., Straer M., </author> <title> Mole Concepts of a Mobile Agent System, </title> <note> to appear in: WWW Journal, Special issue on Applications and Techniques of Web Agents, </note> <year> 1998 </year>
Reference-contexts: At the target destination the agent program is restarted. Ideally, the moved agent (or program) can be restarted in exactly the same state and at the same code position as it was before migration. If migration exhibits this property, it is called transparent or characterized as strong migration <ref> [1] </ref>. If the program has to prepare its migration by explicitly storing its state in some variables and is started again at the new location, and if the programmer has to provide explicit code to read and reestablish the stored state, migration is called non-transparent or characterized as weak migration. <p> One aspect is the problem of references into the local environment such as file handles. In general, hiding the differences of environments from the program is difficult and hard (if ever) to achieve, and this is why transparent migration is often considered expensive <ref> [1] </ref>. For files this would require a distributed system layer that allows to open a file, disconnect temporarily from the file, and reconnect to the open file some time later from some other place. This might be possible for appropriate filesystems (cf.
Reference: 2. <author> Douglis F., Ousterhout J., </author> <title> Transparent Process Migration: Design Alternatives and the Sprite Implementation, </title> <journal> Software Practice and Experience (SPE), </journal> <volume> Volume 21, Number 8, </volume> <month> August </month> <year> 1991, </year> <pages> pp 757-785 </pages>
Reference-contexts: Transparent migration was implemented inside the Telescript interpreter (called engine), which did all the state saving, and did not provide migration of multiple (agent) threads (called processes). Unfortunately, General Magic stopped the development of Telescript. Concerning state saving of programs or processes in general, there are a several systems <ref> [2, 6] </ref> that use state saving mechanisms to provide for example transparent process migration or persistence.
Reference: 3. <author> Funfrocken S., </author> <title> How to Integrate Mobile Agents into Web Servers, </title> <booktitle> Proceedings of the WETICE'97 Workshop on Collaborative Agents in Distributed Web Applications, </booktitle> <address> Boston, MA, </address> <month> June 18-20, </month> <year> 1997, </year> <pages> pp 94-99 </pages>
Reference-contexts: The current preprocessor prototype is used in the WASP project <ref> [3] </ref> to allow transparent migration for mobile agents written in Java.
Reference: 4. <author> Gray R., AgentTcl: </author> <title> A Transportable Agent System., </title> <booktitle> Proc. CIKM'95 Workshop of Intelligent Information Agents, </booktitle> <year> 1995 </year>
Reference-contexts: Because of this, transparent migration of processes or mobile agents is not possible in Java so far. There are systems <ref> [7, 8, 4] </ref> that provide the required state capturing of Java programs. However, they modified the Java VM. In contrast to this, we aim at a solution that does not require the modification of the VM or any underlying component. <p> Also, one should compare the instrumented code with code written for non-transparent migration providing the same functionality. 3.4 Related Work To our knowledge, providing transparent migration or save and restart possibility for Java is done in a few other projects only <ref> [4, 7, 8] </ref>, and providing it on the language level (i.e., without modifying the Java VM), is done in our project only. Concerning transparent agent migration, one should mention Telescript [11], an interpreted, object oriented programming language that was designed for mobile agents by General Magic.
Reference: 5. <author> Java Compiler Compiler, </author> <note> http://www.suntest.com/JavaCC/ </note>
Reference-contexts: We do this instrumentation by parsing the original program code using a Java based parser generated with the JavaCC-tool <ref> [5] </ref> from a Java 1.1 grammar. Our preprocessor uses and modifies the parse tree from which the new code is generated.
Reference: 6. <author> Mira da Silva M., </author> <title> Mobility and Persistence, Chapter in Mobile Object Systems. </title> <publisher> LNCS 1222, Springer-Verlag, </publisher> <year> 1997, </year> <pages> pp 157-175 </pages>
Reference-contexts: The receiving host creates a local process that has exactly the same state as the process whose state was captured. State capturing can also be used to provide fault tolerance or persistence <ref> [6] </ref> in a distributed system. The state of programs or processes is captured at regular intervals and is written to stable secondary storage. When the system restarts after a crash or regular system shutdown, the saved information is used to reestablish the processes and continue operation. <p> Transparent migration was implemented inside the Telescript interpreter (called engine), which did all the state saving, and did not provide migration of multiple (agent) threads (called processes). Unfortunately, General Magic stopped the development of Telescript. Concerning state saving of programs or processes in general, there are a several systems <ref> [2, 6] </ref> that use state saving mechanisms to provide for example transparent process migration or persistence.
Reference: 7. <author> Peine H., Stolpmann T., </author> <title> The Architecture of the Ara Platform for Mobile Agents, </title> <editor> In: Rothermel K., Popescu-Zeletin R. (Eds.), </editor> <booktitle> Mobile Agents, Proc. of MA'97, </booktitle> <publisher> Springer Verlag, </publisher> <address> Berlin, April 7-8, </address> <publisher> LNCS 1219, </publisher> <pages> pp 50-61 </pages>
Reference-contexts: Because of this, transparent migration of processes or mobile agents is not possible in Java so far. There are systems <ref> [7, 8, 4] </ref> that provide the required state capturing of Java programs. However, they modified the Java VM. In contrast to this, we aim at a solution that does not require the modification of the VM or any underlying component. <p> Also, one should compare the instrumented code with code written for non-transparent migration providing the same functionality. 3.4 Related Work To our knowledge, providing transparent migration or save and restart possibility for Java is done in a few other projects only <ref> [4, 7, 8] </ref>, and providing it on the language level (i.e., without modifying the Java VM), is done in our project only. Concerning transparent agent migration, one should mention Telescript [11], an interpreted, object oriented programming language that was designed for mobile agents by General Magic.
Reference: 8. <author> Ranganathan M., Acharya A., Sharma S., Saltz J., </author> <title> Network-aware Mobile Programs, </title> <booktitle> Proceedings of Usenix'97, </booktitle> <address> Anaheim, CA, </address> <year> 1997 </year>
Reference-contexts: Because of this, transparent migration of processes or mobile agents is not possible in Java so far. There are systems <ref> [7, 8, 4] </ref> that provide the required state capturing of Java programs. However, they modified the Java VM. In contrast to this, we aim at a solution that does not require the modification of the VM or any underlying component. <p> Also, one should compare the instrumented code with code written for non-transparent migration providing the same functionality. 3.4 Related Work To our knowledge, providing transparent migration or save and restart possibility for Java is done in a few other projects only <ref> [4, 7, 8] </ref>, and providing it on the language level (i.e., without modifying the Java VM), is done in our project only. Concerning transparent agent migration, one should mention Telescript [11], an interpreted, object oriented programming language that was designed for mobile agents by General Magic.
Reference: 9. <author> Smith J.M., </author> <title> A Survey of Process Migration Mechanisms, </title> <journal> Operating System Review, </journal> <volume> Volume 22, Number 3, </volume> <month> July </month> <year> 1988, </year> <pages> pp 28-40 </pages>
Reference-contexts: Both mechanisms require the capturing of state information and the reestablishment of the saved state during restart. Capturing and reestablishing the state of a running program is a well-known issue in different areas of computer science <ref> [9] </ref>. For example, it is used in distributed operating systems to provide load balancing functionality. In such a scenario, the state of a program in execution (i.e., the process state) is captured and sent to some other host with low load.
Reference: 10. <author> Sun Microsystems, </author> <title> Object Serialization Specification, JDK Online Documentation 'docs/guide/serialization/spec', </title> <year> 1996, 1997 </year>
Reference-contexts: It would be sufficient to have access to the information inside the VM to capture the state of a Java program. Currently the Java VM only supports the capturing of all object states, known as serialization <ref> [10] </ref>, but it does not support the capturing of the method call stack which includes all local variable values of methods or the capturing of the program counter. Because of this, transparent migration of processes or mobile agents is not possible in Java so far.
Reference: 11. <author> White J.E., </author> <title> Telescript Technology: The Foundation for the Electronic Marketplace, Whitepaper by General Magic, </title> <publisher> Inc, </publisher> <address> Sunnyvale, CA, USA </address>
Reference-contexts: Concerning transparent agent migration, one should mention Telescript <ref> [11] </ref>, an interpreted, object oriented programming language that was designed for mobile agents by General Magic. Because the design of Telescript was tailored especially for mobile agents, the language had a lot of agent specific features (e.g., object ownership, read only object references) including transparent migration of agents.
References-found: 11

