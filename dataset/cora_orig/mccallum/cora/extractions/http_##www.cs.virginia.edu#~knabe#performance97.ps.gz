URL: http://www.cs.virginia.edu/~knabe/performance97.ps.gz
Refering-URL: http://www.cs.virginia.edu/~knabe/papers.html
Root-URL: http://www.cs.virginia.edu
Title: Performance-Oriented Implementation Strategies for a Mobile Agent Language  
Author: Frederick Knabe P. 
Address: Chile, Casilla 306, Santiago 22, Chile  
Affiliation: Universidad Catolica de  
Abstract: The use of larger and more complex mobile agents in distributed applications has created a need for agent programming systems that deliver better performance. The implementation of Extended Facile, a mobile agent language, uses several strategies to boost performance. We review four main techniques: allowing agents to use different transmissible representations, optimistically transmitting machine code with agents, stripping agents of data and code that can be found at their recipients before transmitting them, and performing agent compilation lazily. Quantitative measurements show that these methods can boost absolute and relative performance.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Andrew W. Appel. </author> <title> Compiling with Continuations. </title> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: The other two representations are different forms of continuation-passing style, or CPS. Middle CPS is higher-level than final CPS, which includes more worst-case assumptions about the number of registers on the target architecture. More complete descriptions of CPS and lambda language may be found in <ref> [1] </ref>. 3 Closure Trimming and Dynamic Linking An agent in Extended Facile is simply a function, which in turn is implemented as a closure. A closure is a tuple that consists of the code for a function and the values it uses from its lexical environment.
Reference: 2. <author> G. Attardi, A. Baldi, U. Boni, F. Carignani, G. Cozzi, A. Pelligrini, E. Durocher, I. Filotti, Wang Qing, M. Hunter, J. Marks, C. Richardson, and A. Watson. </author> <title> Techniques for dynamic software migration. </title> <booktitle> In ESPRIT '88: Proceedings of the 5th Annual ESPRIT Conference, </booktitle> <volume> volume 1, </volume> <pages> pages 475491, </pages> <address> Brussels, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: Omniware compiles a RISC-like virtual machine representation to native code; the generality of the virtual machine allows any language to be targeted to it. Run-time compilation of virtual machine code has also been investigated for heterogeneous process migration <ref> [2, 19] </ref>. Currently there is work on Java to support run-time compilation, which will allow it to use either compilation or interpretation. Otherwise, Extended Facile's capability to handle multiple transmissible representations via compilation and interpretation and its support for optimistic transmission are unique.
Reference: 3. <author> Nathaniel S. Borenstein. </author> <title> Email with a mind of its own: The Safe-Tcl language for enabled mail. </title> <booktitle> In Proceedings of the 1994 IFIP WG6.5 Conference on Upper Layer Protocols, Architectures, and Applications, </booktitle> <address> Barcelona, May 1994. </address> <publisher> North-Holland. </publisher>
Reference-contexts: Almost every system addresses the problem of heterogeneous machine architectures. The more experimental of these simply transmit code in source form. Those systems based on Lisp or Scheme (e.g., Avalon/Common Lisp [7], Messenger Scheme [10]) use the eval primitive to compile or interpret code, while other systems (e.g., Safe-Tcl <ref> [3] </ref>, Tps [15]) use directly interpreted source code. More sophisticated systems usually use an interpreted intermediate representation. Obliq [5] and a derivative, Phantom [9], use abstract syntax trees for the transmissible representations. Compact byte-coded representations are used in Telescript [22] and Java [13].
Reference: 4. <author> P. J. Brown. </author> <title> Throw-away compiling. </title> <journal> SoftwarePractice and Experience, </journal> <volume> 6(3):423434, </volume> <year> 1976. </year>
Reference-contexts: Parsers are therefore generated lazily; when part of the parser is needed that does not exist, the parser generator creates it. Another feature of their system is incremental generation: After a syntax change, as much of the previously generated parser is retained as possible. Brown <ref> [4] </ref> developed a lazy compiler for BASIC to solve the problem of an entire program not fitting into memory. Statements are compiled as they are encountered, and when memory is filled, all object code generated so far is discarded. This approach required several innovative addressing methods.
Reference: 5. <author> Luca Cardelli. Obliq: </author> <title> A Language with Distributed Scope. </title> <institution> DEC Systems Research Center, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Those systems based on Lisp or Scheme (e.g., Avalon/Common Lisp [7], Messenger Scheme [10]) use the eval primitive to compile or interpret code, while other systems (e.g., Safe-Tcl [3], Tps [15]) use directly interpreted source code. More sophisticated systems usually use an interpreted intermediate representation. Obliq <ref> [5] </ref> and a derivative, Phantom [9], use abstract syntax trees for the transmissible representations. Compact byte-coded representations are used in Telescript [22] and Java [13]. Run-time compilation is relatively rare, in part due to the complexity of its implementation and the greater difficulty in making ports.
Reference: 6. <author> Craig Chambers and David Ungar. </author> <title> Making pure object-oriented languages practical. </title> <booktitle> In Conference on Object-Oriented Programming Systems, Languages, and Applications (OOP-SLA), </booktitle> <pages> pages 115, </pages> <address> Phoenix, Arizona, 1991. </address> <publisher> ACM. </publisher>
Reference-contexts: Statements are compiled as they are encountered, and when memory is filled, all object code generated so far is discarded. This approach required several innovative addressing methods. Chambers and Ungar <ref> [6] </ref> introduced lazy compilation into SELF, a pure object-oriented language (i.e., every type, including primitive ones such as integers, is implemented as an object). SELF provides an interactive loop where programs can be compiled, executed, and then changed. However, compilation times were unacceptably long.
Reference: 7. <author> Stewart M. Clamen, Linda D. Leibengood, Scott M. Nettles, and Jeannette M. Wing. </author> <title> Reliable distributed computing with Avalon/Common Lisp. </title> <booktitle> In International Conference on Computer Languages, </booktitle> <pages> pages 169179. </pages> <publisher> IEEE, </publisher> <month> March </month> <year> 1990. </year>
Reference-contexts: Almost every system addresses the problem of heterogeneous machine architectures. The more experimental of these simply transmit code in source form. Those systems based on Lisp or Scheme (e.g., Avalon/Common Lisp <ref> [7] </ref>, Messenger Scheme [10]) use the eval primitive to compile or interpret code, while other systems (e.g., Safe-Tcl [3], Tps [15]) use directly interpreted source code. More sophisticated systems usually use an interpreted intermediate representation. Obliq [5] and a derivative, Phantom [9], use abstract syntax trees for the transmissible representations.
Reference: 8. <author> Omniware: </author> <title> A universal substrate for mobile code. </title> <note> Colusa Software white paper, 1995. Available at http://www.colusa.com/. </note>
Reference-contexts: Compact byte-coded representations are used in Telescript [22] and Java [13]. Run-time compilation is relatively rare, in part due to the complexity of its implementation and the greater difficulty in making ports. Though it is not an agent programming system per se, Omniware <ref> [8] </ref> provides the necessary infrastructure to receive, compile, and execute code at run time. Omniware compiles a RISC-like virtual machine representation to native code; the generality of the virtual machine allows any language to be targeted to it.
Reference: 9. <author> Antony Courtney. Phantom: </author> <title> An interpreted language for distributed programming. </title> <booktitle> In USENIX Conference on Object-Oriented Technologies (COOTS), </booktitle> <address> Monterey, CA, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: More sophisticated systems usually use an interpreted intermediate representation. Obliq [5] and a derivative, Phantom <ref> [9] </ref>, use abstract syntax trees for the transmissible representations. Compact byte-coded representations are used in Telescript [22] and Java [13]. Run-time compilation is relatively rare, in part due to the complexity of its implementation and the greater difficulty in making ports.
Reference: 10. <author> Giovanna Di Marzo, Murhimanya Muhugusa, Christian Tschudin, and Jurgen Harms. </author> <title> The messenger paradigm and its implication on distributed systems. </title> <booktitle> In Workshop on Intelligent Computer Communication (ICC), </booktitle> <year> 1995. </year> <note> Also available at http://cuiwww.unige.ch/tios/msgr/msgr.html. 15 </note>
Reference-contexts: Almost every system addresses the problem of heterogeneous machine architectures. The more experimental of these simply transmit code in source form. Those systems based on Lisp or Scheme (e.g., Avalon/Common Lisp [7], Messenger Scheme <ref> [10] </ref>) use the eval primitive to compile or interpret code, while other systems (e.g., Safe-Tcl [3], Tps [15]) use directly interpreted source code. More sophisticated systems usually use an interpreted intermediate representation. Obliq [5] and a derivative, Phantom [9], use abstract syntax trees for the transmissible representations.
Reference: 11. <author> F. Brent Dubach, Robert M. Rutherford, and Charles M. Shub. </author> <title> Process-originated migration in a heterogeneous environment. </title> <booktitle> In Seventeenth Annual ACM Computer Science Conference, </booktitle> <pages> pages 98102, </pages> <address> Louisville, KY, USA, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: The appropriate machine code for the recipient's architecture can be selected and transmitted at run time, an approach taken in Emerald [18], or all the machine code representations can be transmitted <ref> [11, 17] </ref>, allowing later retransmission.
Reference: 12. <author> Alessandro Giacalone, Prateek Mishra, and Sanjiva Prasad. </author> <title> Facile: A symmetric integration of concurrent and functional programming. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 18(2):121160, </volume> <month> April </month> <year> 1989. </year>
Reference-contexts: Finally, the agent system must execute the agent. Naturally the execution should be as fast as possible. I have implemented an agent programming system that uses several implementation strategies and techniques to reduce these costs. The system is an extension of Facile <ref> [12, 20] </ref>, a higher-order, mostly functional programming language that integrates support for concurrency and distribution. Extended Facile [16] defines agents simply ? Author's permanent e-mail address: knabe@acm.org. 2 as functions and thus takes advantage of the easy way in which functions can be manipulated in a functional language.
Reference: 13. <author> James Gosling and Henry McGilton. </author> <title> The Java language environment. </title> <type> White paper, </type> <month> May </month> <year> 1995. </year> <title> Sun Microsystems, </title> <type> 2550 Garcia Avenue, </type> <institution> Mountain View, </institution> <address> CA 94043, USA. </address> <note> Available at http://java.sun.com/. </note>
Reference-contexts: More sophisticated systems usually use an interpreted intermediate representation. Obliq [5] and a derivative, Phantom [9], use abstract syntax trees for the transmissible representations. Compact byte-coded representations are used in Telescript [22] and Java <ref> [13] </ref>. Run-time compilation is relatively rare, in part due to the complexity of its implementation and the greater difficulty in making ports. Though it is not an agent programming system per se, Omniware [8] provides the necessary infrastructure to receive, compile, and execute code at run time.
Reference: 14. <author> J. Heering, P. Klint, and J. Rekers. </author> <title> Lazy and incremental program generation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(3):10101023, </volume> <month> May </month> <year> 1994. </year>
Reference-contexts: Otherwise, Extended Facile's capability to handle multiple transmissible representations via compilation and interpretation and its support for optimistic transmission are unique. Lazy compilation for transmitted agents is another unique feature. However, the general technique of lazy program generation has been investigated in other contexts. Heering et al. <ref> [14] </ref> developed a syntax-oriented editor where the user is permitted to 13 change the syntax interactively. Changes to the syntax require the generation of new parsers, but this operation takes too long for interactive performance.
Reference: 15. <author> Dennis Heimbigner. </author> <note> The Tps reference manual Version 2.1a. Arcadia Technical Report CU-ARCADIA-104-95, </note> <institution> Department of Computer Science, University of Colorado, Boulder, Colorado 80309, USA, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: The more experimental of these simply transmit code in source form. Those systems based on Lisp or Scheme (e.g., Avalon/Common Lisp [7], Messenger Scheme [10]) use the eval primitive to compile or interpret code, while other systems (e.g., Safe-Tcl [3], Tps <ref> [15] </ref>) use directly interpreted source code. More sophisticated systems usually use an interpreted intermediate representation. Obliq [5] and a derivative, Phantom [9], use abstract syntax trees for the transmissible representations. Compact byte-coded representations are used in Telescript [22] and Java [13].
Reference: 16. <author> Frederick C. Knabe. </author> <title> Language Support for Mobile Agents. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, Pittsburgh, Pennsylvania 15213, </institution> <month> December </month> <year> 1995. </year> <note> Technical report CMU-CS-95-223. </note>
Reference-contexts: I have implemented an agent programming system that uses several implementation strategies and techniques to reduce these costs. The system is an extension of Facile [12, 20], a higher-order, mostly functional programming language that integrates support for concurrency and distribution. Extended Facile <ref> [16] </ref> defines agents simply ? Author's permanent e-mail address: knabe@acm.org. 2 as functions and thus takes advantage of the easy way in which functions can be manipulated in a functional language. <p> On further calls to the closure, the target function will be executed directly; the triggers have been overwritten. Further subtleties are involved when compiling nested functions and are described fully in <ref> [16] </ref>. 5 Performance Results To quantify the effect of the preceding implementation strategies for Extended Facile, I measured the performance of the system on several micro-benchmarks and a suite of small agent applications using a Sparc Classic with 32 MB of memory.
Reference: 17. <author> Charles M. Shub. </author> <title> Native code process-originated migration in a heterogeneous environment. </title> <booktitle> In 1990 ACM Eighteenth Annual Computer Science Conference Proceedings, </booktitle> <pages> pages 266 270, </pages> <address> Washington, DC, USA, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: The appropriate machine code for the recipient's architecture can be selected and transmitted at run time, an approach taken in Emerald [18], or all the machine code representations can be transmitted <ref> [11, 17] </ref>, allowing later retransmission.
Reference: 18. <author> Bjarne Steensgaard and Eric Jul. </author> <title> Object and native code thread mobility among heterogeneous computers. </title> <booktitle> In 15th ACM Symposium on Operating Systems Principles (SOSP), </booktitle> <address> Copper Mountain Resort, Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: The appropriate machine code for the recipient's architecture can be selected and transmitted at run time, an approach taken in Emerald <ref> [18] </ref>, or all the machine code representations can be transmitted [11, 17], allowing later retransmission.
Reference: 19. <author> Marvin M. Theimer and Barry Hayes. </author> <title> Heterogeneous process migration by recompilation. </title> <booktitle> In 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 1825, </pages> <address> Arlington, TX, USA, </address> <month> May </month> <year> 1991. </year> <note> IEEE. </note>
Reference-contexts: Omniware compiles a RISC-like virtual machine representation to native code; the generality of the virtual machine allows any language to be targeted to it. Run-time compilation of virtual machine code has also been investigated for heterogeneous process migration <ref> [2, 19] </ref>. Currently there is work on Java to support run-time compilation, which will allow it to use either compilation or interpretation. Otherwise, Extended Facile's capability to handle multiple transmissible representations via compilation and interpretation and its support for optimistic transmission are unique.
Reference: 20. <author> Bent Thomsen, Lone Leth, Sanjiva Prasad, Tsung-Min Kuo, Andre Kramer, Fritz Knabe, and Alessandro Giacalone. </author> <title> Facile Antigua Release programming guide. </title> <type> Technical Report ECRC-93-20, </type> <institution> European Computer-Industry Research Centre, </institution> <address> Arabellastr. 17, 81925 Mu-nich, Germany, </address> <month> December </month> <year> 1993. </year> <note> Available at http://www.ecrc.de/. </note>
Reference-contexts: Finally, the agent system must execute the agent. Naturally the execution should be as fast as possible. I have implemented an agent programming system that uses several implementation strategies and techniques to reduce these costs. The system is an extension of Facile <ref> [12, 20] </ref>, a higher-order, mostly functional programming language that integrates support for concurrency and distribution. Extended Facile [16] defines agents simply ? Author's permanent e-mail address: knabe@acm.org. 2 as functions and thus takes advantage of the easy way in which functions can be manipulated in a functional language.
Reference: 21. <author> Jim Waldo, Geoff Wyant, Ann Wollrath, and Sam Kendall. </author> <title> A note on distributed computing. </title> <type> Technical Report SMLI TR-94-29, </type> <institution> Sun Microsystems Laboratories, </institution> <address> 2550 Garcia Avenue, Mountain View, California 94043, USA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: Implicit callbacks are normally used to hide the distributed nature of applications, the argument being that hiding distribution simplifies programming. The problem is that distributed dependencies and the costs of network access are also hidden, leaving programs fragile and prone to serious flaws <ref> [21] </ref>. In general, callbacks should only be programmed explicitly, leaving the programmer to evaluate their appropriateness. Even without callbacks, we can still reduce the size of transmissions. Of the values that are in an agent's closure when we prepare it for transmission, some may be ubiquitous.
Reference: 22. <author> James E. White. </author> <title> Telescript technology: The foundation for the electronic marketplace. General Magic white paper, </title> <type> 2465 Latham Street, </type> <institution> Mountain View, </institution> <address> CA 94040, </address> <year> 1994. </year>
Reference-contexts: More sophisticated systems usually use an interpreted intermediate representation. Obliq [5] and a derivative, Phantom [9], use abstract syntax trees for the transmissible representations. Compact byte-coded representations are used in Telescript <ref> [22] </ref> and Java [13]. Run-time compilation is relatively rare, in part due to the complexity of its implementation and the greater difficulty in making ports. Though it is not an agent programming system per se, Omniware [8] provides the necessary infrastructure to receive, compile, and execute code at run time.
References-found: 22

