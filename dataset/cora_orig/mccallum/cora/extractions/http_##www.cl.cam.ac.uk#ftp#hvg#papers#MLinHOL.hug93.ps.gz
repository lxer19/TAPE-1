URL: http://www.cl.cam.ac.uk/ftp/hvg/papers/MLinHOL.hug93.ps.gz
Refering-URL: http://www.cl.cam.ac.uk/Research/HVG/FTP/FTP.html
Root-URL: 
Email: E-Mail: donald@cs.anu.edu.au  
Title: Reasoning with the Formal Definition of Standard ML in HOL  
Author: Donald Syme 
Date: May 1, 1993  
Address: G.P.O. Box 4, Canberra, ACT, 2601, Australia  
Affiliation: Department of Computer Science The Australian National University  
Abstract: This paper describes the results of a project to embed the Formal Definition of the Standard ML Core language into the HOL mechanized reasoning system. HOL theories of the Core syntax and dynamic semantics are presented, including a purely definitional representation of the semantic inference rules. The correctness of the representation is demonstrated by the derivation of several important language properties, including determinacy. A symbolic evaluator to assist in proving properties of Standard ML program fragments is also described. Some sample applications of the theory in the area of program verification are given. A recurring theme in the work is the need for logical precision in all aspects of a HOL representation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Richard Bird and Philip Wadler. </author> <title> Introduction to Functional Programming. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference: [2] <author> Robert S. Boyer and J Strother Moore. </author> <title> A Computational Logic. </title> <booktitle> ACM Monograph Series. </booktitle> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: As well demonstrated by Boyer and Moore <ref> [2] </ref>, evaluation is a natural technique for reasoning about the properties of functional programs. The usefulness of evaluation is increased when it is conducted symbolically. In this way an evaluator can be used to prove properties of infinite families of computations.
Reference: [3] <author> A. Cant and M.A. Ozols. </author> <title> A verification environment for ML. </title> <booktitle> In Proceedings of the ACM SIGPLAN Workshop on ML and its Applications, </booktitle> <pages> pages 151-155, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: A similar approach has been used in other verification environments based on the Formal Definition of Standard ML <ref> [3] </ref>. However, it soon becomes obvious within such schemes that important properties cannot be proven. The axioms do not fully capture the fact that a sentence is inferable if and only if it can be inferred via one of the inference rules.
Reference: [4] <author> Michael J. C. Gordon. </author> <title> Mechanizing programming languages in Higher Order Logic. HOL System Documentation, </title> <year> 1988. </year>
Reference: [5] <editor> Michael J. C. Gordon et al. </editor> <title> The HOL System Description, </title> <month> December </month> <year> 1989. </year>
Reference: [6] <institution> HOL Users Group. HOL-INFO mailing list archives, </institution> <year> 1992. </year>
Reference-contexts: A proper solution to this latter problem involves type theory beyond the scope of this project and in the end a reasonable axiomatization of the recursive properties of the types was used. This axiomatization was based on small examples derived by other HOL users <ref> [6] </ref>. Significant steps were made toward justifying this axiomatization via a fully definitional approach. For both the syntactic and semantic types a full pretty printer and parser were constructed, both of which were invaluable in later work.
Reference: [7] <author> Matthew Hutchins. </author> <title> Machine assisted reasoning about Standard ML using HOL. </title> <type> Honours Thesis, </type> <month> November </month> <year> 1990. </year> <institution> Australian National University. </institution>
Reference-contexts: Some details have been omitted, and a full description of the work can be found in [16]. That subthesis was based in part on work performed by Matthew Hutchins for his Hon-ours project in 1990, also at the Australian National University <ref> [7] </ref>. 2 Embedding the Types in HOL The first task to be faced in embedding the semantics of the Core into HOL is to construct a representation of the syntactic and semantic types that are used in the Core semantics. 2.1 Representing the Syntactic Types A small subset of the Standard <p> A first attempt at creating a theory capturing these constructs was made by Matthew Hutchins at the Australian National University in 1990 <ref> [7] </ref>. He used an axiomatic approach to model the logical properties of the inference rules of the semantics. Initially each inference rule was asserted as an implicative axiom.
Reference: [8] <author> Tom Melham. </author> <title> A package for inductive relation definitions in HOL. </title> <booktitle> Proceedings of the 1991 HOL Workshop, </booktitle> <year> 1991. </year>
Reference-contexts: and points to the inherent dangers in using axiom based approaches. 3.2 A Correct Representation Full tools are now becoming widely used for inductively defining relationships in HOL, and it has been demonstrated that it is possible to use this method to define relationships derived from a Natural Semantics definition <ref> [8, 12] </ref>. However, in this project a different, definitional approach was used to construct a correct representation of the semantics, based on the notion of inference trees.
Reference: [9] <author> Robin Milner. </author> <booktitle> Lecture notes on language semantics. </booktitle> <institution> Computer Science 3, University of Edinburgh. </institution> <month> 10 </month>
Reference-contexts: Core Modules Programs Syntax fi fi fi Statics fi fi fi Dynamics * fi fi The semantics of the Core language are described in the Formal Definition using Natural Semantics <ref> [14, 11, 9] </ref>. The basic constructs in the semantics are sentences of the form A ` phrase ) R. A sentence A ` phrase ) R denotes that in some background A the execution of phrase will give the result R.
Reference: [10] <author> Robin Milner. </author> <title> The Standard ML Core lan-guage. </title> <journal> Polymorphism, </journal> <volume> 2(2), </volume> <year> 1985. </year>
Reference: [11] <author> Robin Milner and Mads Tofte. </author> <title> Commentary on Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: Core Modules Programs Syntax fi fi fi Statics fi fi fi Dynamics * fi fi The semantics of the Core language are described in the Formal Definition using Natural Semantics <ref> [14, 11, 9] </ref>. The basic constructs in the semantics are sentences of the form A ` phrase ) R. A sentence A ` phrase ) R denotes that in some background A the execution of phrase will give the result R. <p> As noted in the Commentary on the Formal Definition of Standard ML, successive applications of the inference rules may be thought of as constructing an inference tree for a sentence <ref> [11] </ref>. The children of each node in an inference tree are the sub-evaluations that contribute to the evaluation of the phrase at the node. Thus an inference tree is a tree labeled with sentences where each sentence is directly deducible via inference rules from its children. <p> the inferability of sentences to be proven, and they form the basis of the symbolic evaluator described in the following section. 4.3 The Pattern Matching Theorem We now proceed to outline two properties of the Standard ML language, both of which are described in the Commentary on the Formal Definition <ref> [11] </ref>. These are the Pattern Matching theorem and the Determinacy theorem. Both of these properties have been proven in HOL using the theories constructed in Section 2 and 3. As with many functional languages, pattern matching lies at the heart of function application in Standard ML.
Reference: [12] <author> Rachel Onate-Ruxos. </author> <title> Mutually recursive inductive relation definitions in HOL. </title> <booktitle> HOL 1993 Workshop, </booktitle> <year> 1993. </year> <note> Preprint of submitted paper. </note>
Reference-contexts: and points to the inherent dangers in using axiom based approaches. 3.2 A Correct Representation Full tools are now becoming widely used for inductively defining relationships in HOL, and it has been demonstrated that it is possible to use this method to define relationships derived from a Natural Semantics definition <ref> [8, 12] </ref>. However, in this project a different, definitional approach was used to construct a correct representation of the semantics, based on the notion of inference trees.
Reference: [13] <author> Chris Reade. </author> <title> Elements of Functional Programming. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference: [14] <author> Robin Milner Robert Harper and Mads Tofte. </author> <title> The Definition Of Standard ML, Version 2. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction The Formal Definition of Standard ML was completed by Milner, Tofte and Harper in 1990 <ref> [14] </ref>. The aim of the definition was to give a rigorous and complete mathematical description of all aspects of the language, from its syntax to the semantics of interactive operation. The Definition describes the language on three levels the Core language, the Module system and Programs. <p> Core Modules Programs Syntax fi fi fi Statics fi fi fi Dynamics * fi fi The semantics of the Core language are described in the Formal Definition using Natural Semantics <ref> [14, 11, 9] </ref>. The basic constructs in the semantics are sentences of the form A ` phrase ) R. A sentence A ` phrase ) R denotes that in some background A the execution of phrase will give the result R.
Reference: [15] <author> Claudio V. Russo. </author> <title> Automating mutually recursive type definitions in HOL. </title> <type> Honours Thesis, </type> <month> June </month> <year> 1992. </year> <institution> University Of Edinburgh. </institution>
Reference-contexts: The Standard ML syntax, however, poses one substantial problem it is a mutually recursive syntax, and no automated tools are built into HOL for the definition of recursive grammars. A package written in HOL90 by Claudio Russo of Edinburgh <ref> [15] </ref> was ported to HOL88 and used to define both the types themselves and various mutually recursive functions over the types.
Reference: [16] <author> Donald Syme. </author> <title> Reasoning with the formal definition of Standard ML in HOL. </title> <type> Honours Thesis, </type> <month> November </month> <year> 1992. </year> <institution> Australian National University. </institution> <month> 11 </month>
Reference-contexts: This paper is a summary of subthesis completed by Donald Syme in partial fulfillment of the requirements of an Honours degree at the Australian National University in 1992. Some details have been omitted, and a full description of the work can be found in <ref> [16] </ref>.
References-found: 16

