URL: ftp://olympos.cs.umd.edu/pub/TechReports/pdis93.ps.Z
Refering-URL: http://www.cs.umd.edu/~christos/cpub.html
Root-URL: 
Title: Declustering Using Fractals  
Author: Christos Faloutsos Pravin Bhagwat 
Keyword: Categories and Subject Descriptors: E.1 [Data Structures]; E.5 [Files]; H.2.2 [Data Base Management]: Physical Design Access Methods; H.2.6 [Data Base Management]: Database Machines; Index terms: declustering, disk allocation, error correcting codes, fractals, Hilbert curve.  
Address: College Park  
Affiliation: Institute for Advanced Computer Studies Dept. of Computer Science, University of Maryland at  
Abstract: We propose a method to achieve declustering for cartesian product files on M units. The focus is on range queries, as opposed to partial match queries that older declustering methods have examined. Our method uses a distance-preserving mapping, namely, the Hilbert curve, to impose a linear ordering on the multidimensional points (buckets); then, it traverses the buckets according to this ordering, assigning buckets to disks in a round-robin fashion. Thanks to the good distance-preserving properties of the Hilbert curve, the end result is that each disk contains buckets that are far away in the linear ordering, and, most probably, far away in the k-d address space. This is exactly the goal of declustering. Experiments show that these intuitive arguments lead indeed to good performance: the proposed method performs at least as well or better than older declustering schemes. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A.V. Aho and J.D. Ullman. </author> <title> Optimal partial match retrieval when fields are independently specified. </title> <journal> ACM TODS, </journal> <volume> 4(2) </volume> <pages> 168-179, </pages> <month> June </month> <year> 1979. </year>
Reference-contexts: Crosses correspond to records; the dashed lines define the borders of the buckets. Many secondary key access methods map a real file on a cartesian product file, for example, multiattribute hashing [19] <ref> [1] </ref>, or the grid file [16] and its derivatives [12]. All these methods are used to answer efficiently partial match or range queries, or to perform fast joins (e.g., the superjoin algorithm [21] for disk-resident, deductive databases).
Reference: [2] <author> T. Bially. </author> <title> Space-filling curves: Their generation and their application to bandwidth reduction. </title> <journal> IEEE Trans. on Information Theory, </journal> <volume> IT-15(6):658-664, </volume> <month> November </month> <year> 1969. </year>
Reference-contexts: The Hilbert curve can be generalized for higher dimensionalities. Algorithms to draw the two-dimensional curve of a given order, can be found in [11], [13]. An algorithm for higher dimen-sionalities is in <ref> [2] </ref>. The path of a space filling curve imposes a linear ordering, which may be calculated by starting at one end of the curve and following the path to the other end. Figure 5 shows one such ordering for grid size of 4 fi 4 (see curve H 2 ).
Reference: [3] <author> C.C. Chang and C.Y. Chen. </author> <title> Performance of two-disk partition data allocations. </title> <journal> BIT, </journal> <volume> 27(3) </volume> <pages> 306-314, </pages> <year> 1987. </year>
Reference-contexts: Thus, relation R consists of 64 buckets. Figure 2 shows how Disk Modulo Method would allocate these buckets to M =4 disks. Derivatives of the Disk Modulo method include the Generalized Disk Modulo allocation method and the Binary Disk Modulo method [7]; a similar approach is followed in <ref> [3] </ref>. <p> The values i 1 ; i 2 ; : : : ; i k are assumed to be encoded in binary. For example, if we have M =4 disks, the bucket with bucket-id <ref> [3, 7] </ref> gives 3 7 = (011) 2 (111) 2 = (100) 2 and eventually will be stored in disk T 4 (100) 2 = (100) 2 mod 4 = (00) 2 = 0 As a larger example, Figure 3 shows how the relation R of the previous example would be
Reference: [4] <author> G. Copeland, W. Alexander, E. Boughter, and T. Keller. </author> <title> Data placement in bubba. </title> <booktitle> Proc. of ACM SIGMOD, </booktitle> <pages> pages 99-109, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: A file is defined as a collection of records; a unit can be a disk unit in a multidisk system, or a node of a multiprocessor etc.. Good declustering can improve performance in many situations, including * database machines [5], <ref> [4] </ref> where a relation may be distributed over several nodes, * multiprocessor systems [20] when they are used to search large databases, * in multiple-disk systems [17] etc.
Reference: [5] <author> D. DeWitt, R.H. Gerber, G. Graefe, </author> <title> M.L. Heytens, K.B. </title> <editor> Kumar, and M. </editor> <title> Muralikrishna. Gamma a high performance dataflow database machine. </title> <booktitle> In Proc. 12th International Conference on VLDB, </booktitle> <pages> pages 228-237, </pages> <address> Kyoto, Japan, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: A file is defined as a collection of records; a unit can be a disk unit in a multidisk system, or a node of a multiprocessor etc.. Good declustering can improve performance in many situations, including * database machines <ref> [5] </ref>, [4] where a relation may be distributed over several nodes, * multiprocessor systems [20] when they are used to search large databases, * in multiple-disk systems [17] etc. <p> All database machines, therefore, use some form of declustering to improve performance. Several methods have been proposed to achieve declustering when the queries are on a single attribute e.g., the algorithms in GAMMA <ref> [5] </ref>, the hybrid partitioning [6] etc.. All these methods try to distribute the load across processors, assuming that the queries or the joins involve only one attribute.
Reference: [6] <author> D. J. DeWitt and S. Ghandeharizadeh. </author> <title> Hybrid-range partitioning strategy: A new declustering strategy for multiprocessor database machine. </title> <booktitle> Proc. 16th International Conference on VLDB, </booktitle> <pages> pages 481-492, </pages> <year> 1990. </year> <month> 16 </month>
Reference-contexts: All database machines, therefore, use some form of declustering to improve performance. Several methods have been proposed to achieve declustering when the queries are on a single attribute e.g., the algorithms in GAMMA [5], the hybrid partitioning <ref> [6] </ref> etc.. All these methods try to distribute the load across processors, assuming that the queries or the joins involve only one attribute. A large number of methods have been proposed in the past, aiming to achieve good declustering for partial match queries, that refer to several attributes.
Reference: [7] <author> H.C. Du. </author> <title> Disk allocation methods for binary cartesian product files. </title> <journal> BIT, </journal> <volume> 26 </volume> <pages> 138-147, </pages> <year> 1986. </year>
Reference-contexts: M number of disks k number of attributes D i domain of i-th attribute d i number of ranges of i-th domain diskOf () function that maps bucket-ids to disks Table 1: Symbols and Definitions Notice that there need not exist a strictly optimal allocation method for a given file <ref> [7] </ref>. Table 1 contains a list of mathematical symbols and their definitions. <p> Thus, relation R consists of 64 buckets. Figure 2 shows how Disk Modulo Method would allocate these buckets to M =4 disks. Derivatives of the Disk Modulo method include the Generalized Disk Modulo allocation method and the Binary Disk Modulo method <ref> [7] </ref>; a similar approach is followed in [3]. <p> The values i 1 ; i 2 ; : : : ; i k are assumed to be encoded in binary. For example, if we have M =4 disks, the bucket with bucket-id <ref> [3, 7] </ref> gives 3 7 = (011) 2 (111) 2 = (100) 2 and eventually will be stored in disk T 4 (100) 2 = (100) 2 mod 4 = (00) 2 = 0 As a larger example, Figure 3 shows how the relation R of the previous example would be
Reference: [8] <author> H.C. Du and J.S. Sobolewski. </author> <title> Disk allocation for cartesian product files on multiple disk systems. </title> <journal> ACM Trans. Database Systems (TODS), </journal> <volume> 7(1) </volume> <pages> 82-101, </pages> <month> March </month> <year> 1982. </year>
Reference-contexts: A large number of methods have been proposed in the past, aiming to achieve good declustering for partial match queries, that refer to several attributes. Almost all these methods focus on Cartesian Product Files <ref> [8] </ref>. Among the few exceptions is the work in [22], where records are dynamically relocated, to avoid "hot spots". All the rest of the declustering methods assume that the allocation of buckets to disks does not change over time. A survey of such declustering methods can be found in [9]. <p> Next we describe briefly the major representatives of some older declustering methods. 2.1 Disk Modulo Allocation Method (DM) In the Disk Modulo allocation method <ref> [8] </ref>, each bucket [i 1 ; i 2 ; : : : ; i k ] is assigned to disk unit diskOf (i 1 ; i 2 ; : : : ; i k ) = (i 1 + i 2 + : : : + i k ) mod M
Reference: [9] <author> C. Faloutsos and D. Metaxas. </author> <title> Disk allocation methods using error correcting codes. </title> <journal> IEEE Trans. on Computers, </journal> <volume> 40(8) </volume> <pages> 907-914, </pages> <month> August </month> <year> 1991. </year> <note> early version available as UMIACS-TR-88-91 and CS-TR-2157. </note>
Reference-contexts: Among the few exceptions is the work in [22], where records are dynamically relocated, to avoid "hot spots". All the rest of the declustering methods assume that the allocation of buckets to disks does not change over time. A survey of such declustering methods can be found in <ref> [9] </ref>. <p> has been proved in [14] that when the number of devices and the size of each field are powers of two, the set of partial match queries which are optimal under F X distribution is a superset of those for the DM distribution. 2.3 Error correcting codes (ECC) This method <ref> [9] </ref> works for binary attributes, or attributes where every d i is a power of 2. For the binary case, the problem is reduced into grouping the 2 k binary strings on k bits in M groups of 5 unsimilar strings. <p> For example, the bucket (0,1)=(000, 001) gives the string 000001, which obeys the parity check for c 1 , but not for c 2 , and is thus assigned to disk 1. More details and more examples can be found in <ref> [9] </ref>. 3 PROPOSED METHOD: HILBERT CURVE ALLOCATION METHOD (HCAM) All the previous methods are geared towards partial match queries. Moreover, the most efficient among them, FX and ECC, have several restrictions on the cardinalities of the attributes and/or the number of available disks M .
Reference: [10] <author> C. Faloutsos and S. Roseman. </author> <title> Fractals for secondary key retrieval. </title> <booktitle> Eighth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems (PODS), </booktitle> <pages> pages 247-252, </pages> <month> March </month> <year> 1989. </year> <note> also available as UMIACS-TR-89-47 and CS-TR-2242. </note>
Reference-contexts: In this work we opt for a declustering method that will work well for range queries, for an arbitrary number of disks and without restrictions on the cardinalities of the attribute domains. We propose a new declustering method based on the Hilbert Space Filling Curve <ref> [10] </ref> and we show experimentally that it outperforms older methods. The outline of this paper is as follows: Section 2 presents a brief survey of existing declustering methods. Section 3 describes the proposed method. Section 4 gives the experiments and discusses the results. <p> In this section we propose a method of declustering that is based on the idea of space filling 7 curves <ref> [10] </ref>. A space filling curve visits all points in a k-dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. In [10], it was shown experimentally that the Hilbert curve achieves better clustering than other comparable methods. <p> this section we propose a method of declustering that is based on the idea of space filling 7 curves <ref> [10] </ref>. A space filling curve visits all points in a k-dimensional grid exactly once and never crosses itself. Thus, it can be used to linearize the points of a grid. In [10], it was shown experimentally that the Hilbert curve achieves better clustering than other comparable methods.
Reference: [11] <author> J.G. Griffiths. </author> <title> An algorithm for displaying a class of space-filling curves. </title> <journal> Software-Practice and Experience, </journal> <volume> 16(5) </volume> <pages> 403-411, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: When the order of the curve tends to infinity, the resulting curve is a fractal, with a fractal dimension of 2 [15]. The Hilbert curve can be generalized for higher dimensionalities. Algorithms to draw the two-dimensional curve of a given order, can be found in <ref> [11] </ref>, [13]. An algorithm for higher dimen-sionalities is in [2]. The path of a space filling curve imposes a linear ordering, which may be calculated by starting at one end of the curve and following the path to the other end.
Reference: [12] <author> A. Hutflesz, H.-W. Six, and P. Widmayer. </author> <title> Twin grid files: Space optimizing access schemes. </title> <booktitle> Proc. of ACM SIGMOD, </booktitle> <pages> pages 183-190, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Crosses correspond to records; the dashed lines define the borders of the buckets. Many secondary key access methods map a real file on a cartesian product file, for example, multiattribute hashing [19] [1], or the grid file [16] and its derivatives <ref> [12] </ref>. All these methods are used to answer efficiently partial match or range queries, or to perform fast joins (e.g., the superjoin algorithm [21] for disk-resident, deductive databases). In a cartesian product file, let d i be the number of ranges that domain D i is divided into.
Reference: [13] <author> H.V. Jagadish. </author> <title> Linear clustering of objects with multiple attributes. </title> <booktitle> ACM SIGMOD Conf., </booktitle> <pages> pages 332-342, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: When the order of the curve tends to infinity, the resulting curve is a fractal, with a fractal dimension of 2 [15]. The Hilbert curve can be generalized for higher dimensionalities. Algorithms to draw the two-dimensional curve of a given order, can be found in [11], <ref> [13] </ref>. An algorithm for higher dimen-sionalities is in [2]. The path of a space filling curve imposes a linear ordering, which may be calculated by starting at one end of the curve and following the path to the other end.
Reference: [14] <author> M.H. Kim and S. Pramanik. </author> <title> Optimal file distribution for partial match retrieval. </title> <booktitle> Proc. ACM SIGMOD Conf., </booktitle> <pages> pages 173-182, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: For the rest of this paper we shall use the Disk Modulo method, because it is simpler than the rest of the Modulo allocation methods and because it requires no restrictions on the number of disks or the cardinalities of the attributes. 2.2 Field-wise Exclusive-or Distribution (FX) Kim and Pramanik <ref> [14] </ref> proposed the F X (Fieldwise eXclusive-or) distribution method which gives better performance for a wider range of parameter values than older methods. The main idea 4 behind the FX distribution is the use of bitwise exclusive-or operation () on the binary values of a bucket-id. <p> In general, for partial match queries, the F X distribution gives better probability of strict optimality than DM. It has been proved in <ref> [14] </ref> that when the number of devices and the size of each field are powers of two, the set of partial match queries which are optimal under F X distribution is a superset of those for the DM distribution. 2.3 Error correcting codes (ECC) This method [9] works for binary attributes,
Reference: [15] <author> B. Mandelbrot. </author> <title> Fractal Geometry of Nature. W.H. </title> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: Figure 5 also shows the the Hilbert curves of order 2 and 3. When the order of the curve tends to infinity, the resulting curve is a fractal, with a fractal dimension of 2 <ref> [15] </ref>. The Hilbert curve can be generalized for higher dimensionalities. Algorithms to draw the two-dimensional curve of a given order, can be found in [11], [13]. An algorithm for higher dimen-sionalities is in [2].
Reference: [16] <author> J. Nievergelt, H. Hinterberger, and K.C. Sevcik. </author> <title> The grid file: an adaptable, symmetric multikey file structure. </title> <journal> ACM TODS, </journal> <volume> 9(1) </volume> <pages> 38-71, </pages> <month> March </month> <year> 1984. </year>
Reference-contexts: Crosses correspond to records; the dashed lines define the borders of the buckets. Many secondary key access methods map a real file on a cartesian product file, for example, multiattribute hashing [19] [1], or the grid file <ref> [16] </ref> and its derivatives [12]. All these methods are used to answer efficiently partial match or range queries, or to perform fast joins (e.g., the superjoin algorithm [21] for disk-resident, deductive databases).
Reference: [17] <author> D.A. Patterson, G. Gibson, and R.H. Katz. </author> <title> A case for redundant arrays of inexpensive disks (raid). </title> <booktitle> Proc. of ACM SIGMOD, </booktitle> <pages> pages 109-116, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Good declustering can improve performance in many situations, including * database machines [5], [4] where a relation may be distributed over several nodes, * multiprocessor systems [20] when they are used to search large databases, * in multiple-disk systems <ref> [17] </ref> etc. We examine cartesian product files, ie., files which are divided into buckets (= disk pages = disk blocks), such that each bucket contains records with attributes in a given range.
Reference: [18] <author> F.M. Reza. </author> <title> An Introduction to Information Theory. </title> <publisher> McGraw-Hill, </publisher> <year> 1961. </year>
Reference-contexts: Since there are M = 2 m =4 disks, we have to use an error-correcting code with 6 bits, out of which m=2 bits will be parity-check bits and the rest 4 will be information bits. Tables in <ref> [18] </ref> give the appropriate parity check equations.
Reference: [19] <author> J.B. Rothnie and T. Lozano. </author> <title> Attribute based file organization in a paged memory environment. </title> <journal> CACM, </journal> <volume> 17(2) </volume> <pages> 63-69, </pages> <month> February </month> <year> 1974. </year>
Reference-contexts: Crosses correspond to records; the dashed lines define the borders of the buckets. Many secondary key access methods map a real file on a cartesian product file, for example, multiattribute hashing <ref> [19] </ref> [1], or the grid file [16] and its derivatives [12]. All these methods are used to answer efficiently partial match or range queries, or to perform fast joins (e.g., the superjoin algorithm [21] for disk-resident, deductive databases).
Reference: [20] <author> C. Stanfill and B. Kahle. </author> <title> Parallel free-text search on the connection machine system. </title> <journal> CACM, </journal> <volume> 29(12) </volume> <pages> 1229-1239, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: Good declustering can improve performance in many situations, including * database machines [5], [4] where a relation may be distributed over several nodes, * multiprocessor systems <ref> [20] </ref> when they are used to search large databases, * in multiple-disk systems [17] etc. We examine cartesian product files, ie., files which are divided into buckets (= disk pages = disk blocks), such that each bucket contains records with attributes in a given range.
Reference: [21] <author> J.A. Thom, K. Ramamohanarao, and L. Naish. </author> <title> A superjoin algorithm for deductive databases. </title> <booktitle> In Proc. 12th International Conference on VLDB, </booktitle> <pages> pages 189-196, </pages> <address> Kyoto, Japan, </address> <month> August </month> <year> 1986. </year>
Reference-contexts: All these methods are used to answer efficiently partial match or range queries, or to perform fast joins (e.g., the superjoin algorithm <ref> [21] </ref> for disk-resident, deductive databases). In a cartesian product file, let d i be the number of ranges that domain D i is divided into.
Reference: [22] <author> Gerhard Weikum, Peter Zabback, and Peter Scheuermann. </author> <title> Dynamic file allocation in disk arrays. </title> <booktitle> Proc. ACM SIGMOD, </booktitle> <pages> pages 406-415, </pages> <month> May </month> <year> 1991. </year> <month> 17 </month>
Reference-contexts: A large number of methods have been proposed in the past, aiming to achieve good declustering for partial match queries, that refer to several attributes. Almost all these methods focus on Cartesian Product Files [8]. Among the few exceptions is the work in <ref> [22] </ref>, where records are dynamically relocated, to avoid "hot spots". All the rest of the declustering methods assume that the allocation of buckets to disks does not change over time. A survey of such declustering methods can be found in [9].
References-found: 22

