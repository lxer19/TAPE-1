URL: ftp://coast.cs.purdue.edu/pub/COAST/papers/bryn-dole/dole-lodin-spaf-kerberos.ps
Refering-URL: http://www.cs.purdue.edu/coast/coast-library.html
Root-URL: http://www.cs.purdue.edu
Email: info.pub.permission@ieee.org.  
Note: Copyright c fl1997 Institute of Electrical and Electronics Engineers. Reprinted from The Proceedings of the 1997 Symposium on Network and Distributed Systems Security. This material is posted here with permission of the IEEE. Internal or personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution must be obtained from the IEEE by sending a blank email message to  By choosing to view this document, you agree to all provisions of the copyright laws protecting it.  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> T. Anderson. </author> <title> random key(). </title> <address> http://www.mit.edu: 8008/menelaus.mit.edu/kerberos/487, </address> <month> Sept. </month> <year> 1988. </year>
Reference-contexts: The cause is purely a social engineering failure. The bug was known to the developers but somehow never got fixed in the end product. 13.1. What Went Wrong In 1988 Ted Anderson noticed that there was an alarmingly high collision rate with keys generated by the Kerberos RNG <ref> [1] </ref>. What he noticed was that after generating a table of 170 thousand unique keys, every key generated after that had approximately a one in five chance of already being in the table. <p> Timeline of Events The following is a reconstruction of the timeline of events surrounding the Kerberos Version 4 RNG problems. * Sept 1988, Ted Anderson points out the problems in the random key () routine <ref> [1] </ref> * Jan 1989, John Kohl checks in the new RNG code to the Kerberos source tree, but is never used. * Mar 1991, Ted Ts'o encourages users of Kerberos to review the source code [24]: We encourage people to at least look over the source code of what they FTP
Reference: [2] <author> S. M. Bellovin and M. Merritt. </author> <title> Limitations of the Kerberos authentication system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 253-267, </pages> <address> Dallas, TX, </address> <booktitle> Winter 1991. USENIX. </booktitle>
Reference-contexts: There are no formal methods for analyzing the entropy of key data. For example, Bellovin and Merritt examined several problems in the Kerberos protocol in Limitations of the Kerberos Authentication System <ref> [2] </ref>. These weaknesses in the protocol included replay attacks, secure time services, password-guessing attacks, and login spoofing. However, they did not address issues of protocol implementation, such as key randomness in their work. This excellent analysis of the protocol, demonstrates the community's focus on the theoretical vulnerability of systems. 3.
Reference: [3] <author> M. Blaze, W. Diffie, R. L. Rivest, B. Schneier, T. Shimomura, E. Thompson, and M. Wiener. </author> <title> Minimal key lengths for symmetric ciphers to provide adequate commercial security. </title> <year> 1996. </year>
Reference-contexts: For example, it is estimated that 56-bit keys could be broken in an average of 3.5 hours with $1 million of special hardware <ref> [3] </ref>. Kerberos uses DES for authentication and encrypting its tickets and session traffic. Someone with enough computing resources, as stated above, could brute force session keys in about 3.5 hours, which is within the lifetime of these keys, and use them.
Reference: [4] <author> F. P. Brooks Jr. </author> <title> The Mythical Man-Month, chapter Why Did the Tower of Babel Fail? Addison-Wesley, </title> <address> Menlo Park, CA, anniversary edition edition, </address> <year> 1995. </year>
Reference-contexts: Lessons Learned The important lesson to be learned here is that software engineering is important. If code reviews had been more strictly enforced or regression testing had been performed, this bug would have died back in 1989. Communication and social skills are also important to the success of projects <ref> [4] </ref>. Perhaps if the communication between the writer of the new random number generator and the rest of the development team had been better, his code would have been reviewed more carefully and installed properly.
Reference: [5] <author> L. Demailly. </author> <title> Netscape security (problems). </title> <address> http:// hplyot.obspm.fr/dl/netscapesec/, </address> <year> 1995. </year>
Reference-contexts: The Netscape vulnerability was very similar in nature to the weakness in Kerberos Version 4. Netscape used known, deterministic components to seed the random number generator. The Netscape SSL random number guessing attack as described by Goldberg and Wagner [10]. More information is available on the World Wide Web <ref> [5] </ref>. 10.2. X11 MIT-MAGIC-COOKIE-1 Random Num ber Attack The MIT-MAGIC-COOKIE-1 random number generation vulnerability was originally discovered by Chris Hall [11] and was discussed in the Best-of-Security mailing list [25]. This is another instance of a poorly implemented random number generation routine used for security purposes.
Reference: [6] <author> R. A. DeMillo, R. J. Lipton, and A. J. Perlis. </author> <title> Social processes and the proofs of theorems and programs. </title> <journal> Commun. ACM, </journal> <volume> 22(5) </volume> <pages> 271-280, </pages> <month> May </month> <year> 1979. </year>
Reference-contexts: Merely making source code available does not, by itself, add any confidence in the underlying correctness of the code. As noted in <ref> [6] </ref>, even formal proofs of correctness require critical review over time to gain any validity. Unfortunately, having code available for public scrutiny has often resulted in a false sense of security in that code by its users.
Reference: [7] <author> D. E. R. Denning. </author> <title> Cryptographyand Data Security. </title> <publisher> Addison Wesley, </publisher> <year> 1982. </year>
Reference-contexts: To develop a strong sense of trust in the underlying systems, we must establish trust in the supporting software. One of the key principles of deploying trustable software is the concept of open design. (see the principles described in [21] as reprinted in <ref> [7] </ref>, and the comments about no security through obscurity in [9].) This principle states that code and especially security-critical code should not depend on the secrecy of the code or algorithm.
Reference: [8] <author> D. Eastlake, S. Crocker, and J. Schiller. </author> <title> Randomness recommendations for security. Request for Comments (Informational) RFC 1750, </title> <institution> Internet Engineering Task Force, </institution> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: These functions produce random number sequences for statistical purposes, like random events in computer simulations. They were never intended to generate cryptographically secure random numbers. Examples of how to develop secure random-sequence numbers are available in RFC 1750 <ref> [8] </ref>, Knuth [13], Schneier [22, pages 421-428] and Garfinkel and Spafford [9, pages 726-731]. 2.1. Key Entropy Entropy, in the cryptographic sense, is the amount of information that a message contains [22, page 233]. <p> Little effort has been expended to make good random number generators available to implementors of cryptographic protocols. There is no standard mechanism in operating systems (OS), hardware, or applications for generating satisfactory, cryptographically strong random numbers. While RFC 1750 <ref> [8] </ref> provides excellent advice on where random information might reside on a computer, little practical information is given. In fact, nearly all of the suggested sources of good random entropy are impossible to collect on modern OSs. <p> The Java Platform [15] provides yet another difficulty, this defines the minimal Java API that can be safely assumed to exist on any Java machine. The existence of hard drives, or other hardware that could be a source of randomness cannot be presumed. As suggested in RFC 1750 <ref> [8] </ref> the user is a good source of randomness. People rarely exhibit deterministic behavior and thus provide a good source of entropy. However, people sleep even if their computers do not.
Reference: [9] <author> S. Garfinkel and G. Spafford. </author> <title> Practical UNIX & Internet Security. </title> <publisher> O'Reilly & Associates, Inc, </publisher> <address> Sebastopol, CA, USA, 2nd edition, </address> <year> 1996. </year>
Reference-contexts: One of the key principles of deploying trustable software is the concept of open design. (see the principles described in [21] as reprinted in [7], and the comments about no security through obscurity in <ref> [9] </ref>.) This principle states that code and especially security-critical code should not depend on the secrecy of the code or algorithm. Code and algorithms can be accidentally disclosed or reverse-engineered, so any security implied by keeping that secret is transitory at best. <p> These functions produce random number sequences for statistical purposes, like random events in computer simulations. They were never intended to generate cryptographically secure random numbers. Examples of how to develop secure random-sequence numbers are available in RFC 1750 [8], Knuth [13], Schneier [22, pages 421-428] and Garfinkel and Spafford <ref> [9, pages 726-731] </ref>. 2.1. Key Entropy Entropy, in the cryptographic sense, is the amount of information that a message contains [22, page 233]. The entropy of a random key is the number of bits required to represent all possible keys.
Reference: [10] <author> I. Goldberg and D. Wagner. </author> <title> Randomness and the netscape browser. </title> <journal> Dr. Dobb's Journal, </journal> <month> Jan. </month> <year> 1995. </year>
Reference-contexts: The Netscape vulnerability was very similar in nature to the weakness in Kerberos Version 4. Netscape used known, deterministic components to seed the random number generator. The Netscape SSL random number guessing attack as described by Goldberg and Wagner <ref> [10] </ref>. More information is available on the World Wide Web [5]. 10.2. X11 MIT-MAGIC-COOKIE-1 Random Num ber Attack The MIT-MAGIC-COOKIE-1 random number generation vulnerability was originally discovered by Chris Hall [11] and was discussed in the Best-of-Security mailing list [25].
Reference: [11] <author> C. Hall. </author> <title> MIT-MAGIC-COOKIE-1 random number generator problems. E-mail correspondence, </title> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: The Netscape SSL random number guessing attack as described by Goldberg and Wagner [10]. More information is available on the World Wide Web [5]. 10.2. X11 MIT-MAGIC-COOKIE-1 Random Num ber Attack The MIT-MAGIC-COOKIE-1 random number generation vulnerability was originally discovered by Chris Hall <ref> [11] </ref> and was discussed in the Best-of-Security mailing list [25]. This is another instance of a poorly implemented random number generation routine used for security purposes. In this case, the random number generator is seeded with the time of day and the process id of the xdm client.
Reference: [12] <institution> Hewlett-Packard. Security Bulletin: </institution> <address> HPSBUX9602-030. http://us.external.hp.com/search/ bin/wwwsdoc.pl?DOCID=HPSBUX9602-030, </address> <month> Feb. </month> <year> 1996. </year> <title> Security Vulnerability DCE Security Service session key generationn. </title>
Reference-contexts: More information is available from their Web site at http://www.cygnus.com. HP has released a patch for their DCE product based on Kerberos Version 5. This information is available in the Hewlett-Packard Security Bulletin HPSBUX9602-030 <ref> [12] </ref>. There are several solutions to the vulnerability we have described. The most basic solution is to install the patch for Version 4 and to make sure that all random keys generated with the flawed random number generator are destroyed.
Reference: [13] <author> D. Knuth. </author> <title> The Art of Computer Programming, Vol. II: Seminumerical Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1973. </year>
Reference-contexts: These functions produce random number sequences for statistical purposes, like random events in computer simulations. They were never intended to generate cryptographically secure random numbers. Examples of how to develop secure random-sequence numbers are available in RFC 1750 [8], Knuth <ref> [13] </ref>, Schneier [22, pages 421-428] and Garfinkel and Spafford [9, pages 726-731]. 2.1. Key Entropy Entropy, in the cryptographic sense, is the amount of information that a message contains [22, page 233]. The entropy of a random key is the number of bits required to represent all possible keys.
Reference: [14] <author> J. Kohl and B. C. Neuman. </author> <title> The Kerberos Network Authentication Service (V5). Request for Comments (Proposed Standard) RFC 1510, </title> <institution> Internet Engineering Task Force, </institution> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: This yields the same upper bound of 2 32 possible values for the seed and resulting key. However, SESAME documentation available on the Web indicates that some of the SESAME components are accessible through the Kerberos V5 protocol (as specified in RFC 1510), and would use Kerberos data structures <ref> [14] </ref>. The architects of SESAME explained that Schneier's criticisms were based on exportable versions of the code using XOR, not the real code which uses DES encryption [16]. The random number generation code in SESAME V4, recently released to the public, is more secure than as described in Schneier's book.
Reference: [15] <author> D. Kramer. </author> <title> The Java Platform. </title> <type> White Paper, </type> <institution> Sun Microsys-tems, Mountain View, </institution> <address> CA, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: For example, the Java OS [17], takes abstraction to the extreme. There is no way to access memory locations directly, all input/output is only done through drivers written in Java, and there is no way to get direct access to system statistics. The Java Platform <ref> [15] </ref> provides yet another difficulty, this defines the minimal Java API that can be safely assumed to exist on any Java machine. The existence of hard drives, or other hardware that could be a source of randomness cannot be presumed.
Reference: [16] <author> J. Lebastard. </author> <title> Sesame security issues. E-mail correspondence, </title> <month> Jan. </month> <year> 1996. </year>
Reference-contexts: The architects of SESAME explained that Schneier's criticisms were based on exportable versions of the code using XOR, not the real code which uses DES encryption <ref> [16] </ref>. The random number generation code in SESAME V4, recently released to the public, is more secure than as described in Schneier's book.
Reference: [17] <author> P. W. Madany. </author> <title> JavaOS: A Standalone Java Environment. </title> <type> White Paper, </type> <institution> Sun Microsystems, Mountain View, </institution> <address> CA, </address> <month> May </month> <year> 1996. </year>
Reference-contexts: Everything that is a potential source of randomness is insulated by abstraction and high level interfaces. For some operating sustems this is more of a problem than others. For example, the Java OS <ref> [17] </ref>, takes abstraction to the extreme. There is no way to access memory locations directly, all input/output is only done through drivers written in Java, and there is no way to get direct access to system statistics.
Reference: [18] <author> R. M. Needham and M. D. Schroeder. </author> <title> Using encryption for authentication in large networks of computers. </title> <journal> Communications of the ACM, </journal> <volume> 21(12) </volume> <pages> 993-999, </pages> <month> Dec. </month> <year> 1978. </year>
Reference-contexts: This excellent analysis of the protocol, demonstrates the community's focus on the theoretical vulnerability of systems. 3. Introduction to Kerberos Kerberos is a secret key network authentication protocol [20] designed at MIT for Project Athena. It is based on the Needham-Schroeder <ref> [18] </ref> authentication protocol. The goals of Kerberos are authentication, authorization, and accounting.
Reference: [19] <author> B. C. Neuman and G. Medvinsky. </author> <title> Requirements for Network Payment: </title> <booktitle> The Netcheque Perspective. In Proceedings of IEEE COMPCON'95. IEEE, </booktitle> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: CyberSafe sells primarily Kerberos Version 5, but they also sell products based on Kerberos Version 4. CyberSafe claims they fixed the problem with Version 4 more than a year ago. Another product built on the Kerberos Version 5 authentication protocol is NetCheque <ref> [19] </ref>. It is being developed at the University of Southern California Information Sciences Institute. One of the primary developers is B. Clifford Neuman who was also one of the primary developers of Kerberos.
Reference: [20] <author> B. C. Neuman and T. Ts'o. </author> <title> Kerberos: An authentication service for computer networks. </title> <journal> IEEE Communications Magazine, </journal> <volume> 32(9) </volume> <pages> 33-38, </pages> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: However, they did not address issues of protocol implementation, such as key randomness in their work. This excellent analysis of the protocol, demonstrates the community's focus on the theoretical vulnerability of systems. 3. Introduction to Kerberos Kerberos is a secret key network authentication protocol <ref> [20] </ref> designed at MIT for Project Athena. It is based on the Needham-Schroeder [18] authentication protocol. The goals of Kerberos are authentication, authorization, and accounting.
Reference: [21] <author> J. H. Saltzer and M. D. Schroeder. </author> <title> The protection of information in computer systems. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 63(9) </volume> <pages> 1278-1308, </pages> <month> Sept. </month> <year> 1975. </year>
Reference-contexts: To develop a strong sense of trust in the underlying systems, we must establish trust in the supporting software. One of the key principles of deploying trustable software is the concept of open design. (see the principles described in <ref> [21] </ref> as reprinted in [7], and the comments about no security through obscurity in [9].) This principle states that code and especially security-critical code should not depend on the secrecy of the code or algorithm.
Reference: [22] <author> B. Schneier. </author> <title> Applied Cryptography: Protocols, Algorithms, and Source Code in C. </title> <publisher> John Wiley & Sons, Inc, </publisher> <address> New York, NY, USA, 2nd edition, </address> <year> 1996. </year>
Reference-contexts: These functions produce random number sequences for statistical purposes, like random events in computer simulations. They were never intended to generate cryptographically secure random numbers. Examples of how to develop secure random-sequence numbers are available in RFC 1750 [8], Knuth [13], Schneier <ref> [22, pages 421-428] </ref> and Garfinkel and Spafford [9, pages 726-731]. 2.1. Key Entropy Entropy, in the cryptographic sense, is the amount of information that a message contains [22, page 233]. The entropy of a random key is the number of bits required to represent all possible keys. <p> Examples of how to develop secure random-sequence numbers are available in RFC 1750 [8], Knuth [13], Schneier [22, pages 421-428] and Garfinkel and Spafford [9, pages 726-731]. 2.1. Key Entropy Entropy, in the cryptographic sense, is the amount of information that a message contains <ref> [22, page 233] </ref>. The entropy of a random key is the number of bits required to represent all possible keys. Ideally, the entropy of a key is equal to its length. In other words, every single bit is completely random and independent of every other bit in the key. <p> It also includes the ability to use encryption for message authentication and message secrecy. 4. Kerberos Authentication Protocol Kerberos is a trusted authentication protocol designed for TCP/IP networks. The protocol is described in Kerberos: An Authentication Service for Open Network Systems [23] and Applied Cryptography <ref> [22, pages 566-571] </ref>. In the descriptions below, the principal and the client denoted by C are the user. The Kerberos server is also called the Key Distribution Center and is denoted by KDC. The Ticket Granting Server which grants tickets to service principals is denoted by TGS. <p> This is not a problem though because the new RNG is used. 11.2. SESAME SESAME is a European Community security project that implements authentication and key exchange. It uses the Needham-Schroeder protocol like Kerberos along with public-key cryptography. According to Schneier <ref> [22, page 572] </ref>, the SESAME key generation algorithm consists of two calls to the UNIX rand function, similar to the Kerberos Version 4 algorithm. This yields the same upper bound of 2 32 possible values for the seed and resulting key.
Reference: [23] <author> J. G. Steiner, B. C. Neuman, and J. I. Schiller. </author> <title> Kerberos: An authentication service for open network systems. </title> <booktitle> In Winter 1988 USENIX Conference, </booktitle> <pages> pages 191-201, </pages> <address> Dallas, TX, 1988. </address> <publisher> USENIX Association. </publisher>
Reference-contexts: It also includes the ability to use encryption for message authentication and message secrecy. 4. Kerberos Authentication Protocol Kerberos is a trusted authentication protocol designed for TCP/IP networks. The protocol is described in Kerberos: An Authentication Service for Open Network Systems <ref> [23] </ref> and Applied Cryptography [22, pages 566-571]. In the descriptions below, the principal and the client denoted by C are the user. The Kerberos server is also called the Key Distribution Center and is denoted by KDC.
Reference: [24] <author> T. Ts'o. Re: </author> <title> Integrity of MIT source. </title> <address> http://www.mit. edu:8008/menelaus.mit.edu/kerberos/1293, </address> <month> Mar. </month> <year> 1991. </year>
Reference-contexts: * Sept 1988, Ted Anderson points out the problems in the random key () routine [1] * Jan 1989, John Kohl checks in the new RNG code to the Kerberos source tree, but is never used. * Mar 1991, Ted Ts'o encourages users of Kerberos to review the source code <ref> [24] </ref>: We encourage people to at least look over the source code of what they FTP over; and if they want to, they're perfectly welcome to perform a security audit over the code. * Jun 1991, Kerberos Version 5 public beta is announced. * 1992, Ted Ts'o makes the first reference
Reference: [25] <author> Unknown. </author> <title> X11 mit-magic-cookie-1 random number weakness. E-mail correspondence to the Best-of-Security mailing list, 1995. Documents the X11 MIT-MAGIC-COOKIE-1 random number generator weakness. </title>
Reference-contexts: More information is available on the World Wide Web [5]. 10.2. X11 MIT-MAGIC-COOKIE-1 Random Num ber Attack The MIT-MAGIC-COOKIE-1 random number generation vulnerability was originally discovered by Chris Hall [11] and was discussed in the Best-of-Security mailing list <ref> [25] </ref>. This is another instance of a poorly implemented random number generation routine used for security purposes. In this case, the random number generator is seeded with the time of day and the process id of the xdm client.
References-found: 25

