URL: http://www.cs.jhu.edu/~cowen/podc-j.ps
Refering-URL: http://www.cs.jhu.edu/~cowen/
Root-URL: http://www.cs.jhu.edu
Title: Fast Distributed Network Decompositions and Covers construction leads to improved distributed preprocessing time for a
Author: Baruch Awerbuch Bonnie Berger Lenore Cowen David Peleg 
Address: Cambridge, MA  Baltimore, MD  
Affiliation: Lab. for Computer Science, MIT,  Dept. of Mathematics and Lab. for Computer Science, MIT.  Institute. Dept. of Math Sciences, Johns Hopkins University,  
Note: latter  02139. Supported by Air Force Contract AFOSR F49620-92-J-0125, NSF contract 9114440-CCR, DARPA contracts N00014-91-J-1698 and N00014-J-92-1799, and a special grant from IBM.  Supported in part by an NSF Postdoctoral Research Fellowship and an ONR grant provided to the Radcliffe Bunting  21218. This work was done while the author was a grad student in the Dept. of Mathematics at MIT and Supported in part by Air Force Contract OSR-89-02171, Army Contract DAAL-03-86-K-0171 and DARPA Contract N00014-91-J-1698  
Date: September 14, 1995  
Abstract: This paper presents deterministic sublinear-time distributed algorithms for network fl A preliminary version of this paper appeared in the Proceedings of the Eleventh Annual ACM Symposium on the Principles of Distributed Computing. Department of Applied Mathematics and Computer Science, The Weizmann Institute, Rehovot 76100, Israel. Supported in part by an Allon Fellowship, by a Bantrell Fellowship, by a Walter and Elise Haas Career Development Award and by the Israel Basic Research Foundation. decomposition and for constructing a sparse neighborhood cover of a network. The
Abstract-found: 1
Intro-found: 1
Reference: [AAG87] <author> Yehuda Afek, Baruch Awerbuch, and Eli Gafni. </author> <title> Applying static network protocols to dynamic networks. </title> <booktitle> In Proc. 28th IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 358-370, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: Our results are presented in terms of Linial's model for static synchronous networks (see Section 3.4), but can be adapted to a more realistic dynamic asynchronous environment using the existing transformer techniques of <ref> [AAG87, AP90b, APPS92] </ref>. 3 2 Notions of network decomposition In this section we survey the different formulations of network decomposition, and discuss their relations. <p> For ideas on how one might go about adapting the algorithms in this paper to deal with some of the above concerns, the reader is referred to the transformer techniques in <ref> [AAG87, AP90b, APPS92] </ref>. 4 Sparse neighborhood covers 4.1 Outline We now turn to algorithms for generating sparse neighborhood covers. We introduce an algorithm Sparse, which takes as input parameters k and t, and outputs a (k; t; kn 1=k )- neighborhood cover for a given network G.
Reference: [ABCP92] <author> Baruch Awerbuch, Bonnie Berger, Lenore Cowen, and David Peleg. </author> <title> Low-diameter graph decomposition is in NC. </title> <booktitle> In Proc. 3'rd Scandinavian Workshop on Algorithm Theory, </booktitle> <pages> pages 83-93, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The main difference between the two notions is that sparse neighborhood covers, as used in [Pel93, AP90b, AP90a, BFR92, AKP92, AKP91], consist of clusters that capture the expected definition of local neighborhood (see Section 2), while network decomposition as utilized in <ref> [AGLP89, LS91, PS92, ABCP92] </ref> employs only a weak notion of neighborhood. In fact, the way network decomposition is defined in [AGLP89], the clusters might not even be internally connected. For many applications in distributed computing, the stronger notion of sparse covers is essential. <p> Clearly, any strong network decomposition is also a weak decomposition, but the converse is not necessarily true. All the results in <ref> [AGLP89, LS91, PS92, ABCP92] </ref> are stated in terms of weak network decomposition, but some can be extended to strong network decomposition (See [Cow93] for a survey.). We now present the definition for sparse neighborhood covers. Notice that this is a strong diameter definition.
Reference: [ABCP93] <author> Baruch Awerbuch, Bonnie Berger, Lenore Cowen, and David Peleg. </author> <title> Near-linear cost constructions of neighborhood covers in sequential and distributed environments and their applications. </title> <booktitle> In Proc. 34rd IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 638-647. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1993. </year>
Reference-contexts: balancing [AKP92], broadcast and multicast [ABP91], routing with small tables [AP92], deadlock prevention [AKP91], bandwidth management in high-speed networks [ACG + 90], and database management [BFR92]), as well as for classical problems in sequential computing (such as finding small edge cuts in planar graphs [Rao92] and approximate all-pairs shortest paths <ref> [ABCP93, Coh93] </ref>). In most of these applications, sparse neighborhood covers yield a polylogarithmic-overhead solution to the problem.
Reference: [ABP91] <author> Baruch Awerbuch, Alan Baratz, and David Peleg. </author> <title> Efficient broadcast and lightweight spanners. </title> <type> Unpublished manuscript, </type> <month> November </month> <year> 1991. </year>
Reference-contexts: Using this method as a basic building block leads to significant performance improvements for several fundamental network control problems (such as shortest paths [AR91], job scheduling and load balancing [AKP92], broadcast and multicast <ref> [ABP91] </ref>, routing with small tables [AP92], deadlock prevention [AKP91], bandwidth management in high-speed networks [ACG + 90], and database management [BFR92]), as well as for classical problems in sequential computing (such as finding small edge cuts in planar graphs [Rao92] and approximate all-pairs shortest paths [ABCP93, Coh93]).
Reference: [ACG + 90] <author> Baruch Awerbuch, Israel Cidon, Inder Gopal, Marc Kaplan, and Shay Kutten. </author> <title> Distributed control for PARIS. </title> <booktitle> In Proc. 9th ACM Symp. on Principles of Distrib. Computing, </booktitle> <pages> pages 145-160, </pages> <year> 1990. </year>
Reference-contexts: Using this method as a basic building block leads to significant performance improvements for several fundamental network control problems (such as shortest paths [AR91], job scheduling and load balancing [AKP92], broadcast and multicast [ABP91], routing with small tables [AP92], deadlock prevention [AKP91], bandwidth management in high-speed networks <ref> [ACG + 90] </ref>, and database management [BFR92]), as well as for classical problems in sequential computing (such as finding small edge cuts in planar graphs [Rao92] and approximate all-pairs shortest paths [ABCP93, Coh93]). In most of these applications, sparse neighborhood covers yield a polylogarithmic-overhead solution to the problem.
Reference: [AGLP89] <author> Baruch Awerbuch, Andrew Goldberg, Michael Luby, and Serge Plotkin. </author> <title> Network decomposition and locality in distributed computation. </title> <booktitle> In Proc. 30th IEEE Symp. on Found. of Comp. Science, </booktitle> <month> May </month> <year> 1989. </year>
Reference-contexts: In parallel to the introduction of sparse neighborhood covers in [Pel89], the strongly related, yet distinct, notion of network decomposition was introduced in <ref> [AGLP89] </ref>. <p> The main difference between the two notions is that sparse neighborhood covers, as used in [Pel93, AP90b, AP90a, BFR92, AKP92, AKP91], consist of clusters that capture the expected definition of local neighborhood (see Section 2), while network decomposition as utilized in <ref> [AGLP89, LS91, PS92, ABCP92] </ref> employs only a weak notion of neighborhood. In fact, the way network decomposition is defined in [AGLP89], the clusters might not even be internally connected. For many applications in distributed computing, the stronger notion of sparse covers is essential. <p> In fact, the way network decomposition is defined in <ref> [AGLP89] </ref>, the clusters might not even be internally connected. For many applications in distributed computing, the stronger notion of sparse covers is essential. For example, decompositions based on the network decomposition 1 structure introduced in [AGLP89] are not sufficient to support local routing, where the path between two vertices in the <p> In fact, the way network decomposition is defined in <ref> [AGLP89] </ref>, the clusters might not even be internally connected. For many applications in distributed computing, the stronger notion of sparse covers is essential. For example, decompositions based on the network decomposition 1 structure introduced in [AGLP89] are not sufficient to support local routing, where the path between two vertices in the same cluster should consist entirely of vertices within that cluster. <p> Notable exceptions for which such a decomposition suffices are those applications based on "symmetry-breaking"; i.e., such a decomposition can be used to construct a maximal independent set or a ( + 1) coloring (where is the maximum vertex degree in the graph) fast in the distributed domain <ref> [AGLP89, LS91, PS92] </ref>. The goal of this paper is fast distributed algorithms for both high-quality network decomposition, and sparse neighborhood covers. 1.2 Previous work Previous work on the construction of neighborhood covers and decompositions can be classified into three main groups, to be discussed next. <p> The goal of this paper is fast distributed algorithms for both high-quality network decomposition, and sparse neighborhood covers. 1.2 Previous work Previous work on the construction of neighborhood covers and decompositions can be classified into three main groups, to be discussed next. First, a fast algorithm is given in <ref> [AGLP89] </ref> for obtaining a network decomposition with O (n * )-diameter clusters, for * = O ( log log n= log n). This algorithm requires O (n * ) time in the distributed setting, and O (nE) sequential operations. Unfortunately, not only are the constructions of [AGLP89] restricted to network decompositions <p> algorithm is given in <ref> [AGLP89] </ref> for obtaining a network decomposition with O (n * )-diameter clusters, for * = O ( log log n= log n). This algorithm requires O (n * ) time in the distributed setting, and O (nE) sequential operations. Unfortunately, not only are the constructions of [AGLP89] restricted to network decompositions (rather than the stronger construct of neighborhood covers), but they are also inefficient in terms of the quality of the decomposition (measured, as discussed earlier, by the maximum diameter-overlap tradeoff). <p> Roughly speaking, the inefficiency factor is O (n * ), and this factor carries over to all but some of the graph-theoretic applications, rendering the decompositions of <ref> [AGLP89] </ref> expensive in a number of practical contexts. These constructions are, nonetheless, sufficient for the two main applications mentioned above, namely, the maximal independent set problem and ( + 1) coloring. We have already remarked that a network decomposition suffices for these applications. <p> The reduction from time O (n * ) for * = O ( p p * = O (1= log n) is achieved directly from the corresponding speedup for the <ref> [AGLP89] </ref> construction due to [PS92]. In addition we present a randomized algorithm that constructs all notions of high-quality network decomposition in polylogarithmic expected time, including the useful sparse neighborhood covers. <p> First, we give the weak diameter definition, which is equivalent to the definitions in <ref> [AGLP89, LS91, PS92] </ref>. <p> Clearly, any strong network decomposition is also a weak decomposition, but the converse is not necessarily true. All the results in <ref> [AGLP89, LS91, PS92, ABCP92] </ref> are stated in terms of weak network decomposition, but some can be extended to strong network decomposition (See [Cow93] for a survey.). We now present the definition for sparse neighborhood covers. Notice that this is a strong diameter definition. <p> Independently, and at the same time as we introduced the above algorithm, Panconesi and Srinivasan [PS92] obtained a slightly better asymptotic running time for a low-quality weak network decomposition than that achieved by Awerbuch et. al. <ref> [AGLP89] </ref>. As they remark, using a version of our transformer algorithm (see the next section), gives the same improvement in running time for the construction of a high-quality weak network decomposition. We thus obtain the following corollary: .
Reference: [AKP91] <author> Baruch Awerbuch, Shay Kutten, and David Peleg. </author> <title> On buffer-economical store-and-forward deadlock prevention. </title> <booktitle> In Proc. of the 1991 INFOCOM, </booktitle> <year> 1991. </year>
Reference-contexts: Using this method as a basic building block leads to significant performance improvements for several fundamental network control problems (such as shortest paths [AR91], job scheduling and load balancing [AKP92], broadcast and multicast [ABP91], routing with small tables [AP92], deadlock prevention <ref> [AKP91] </ref>, bandwidth management in high-speed networks [ACG + 90], and database management [BFR92]), as well as for classical problems in sequential computing (such as finding small edge cuts in planar graphs [Rao92] and approximate all-pairs shortest paths [ABCP93, Coh93]). <p> In parallel to the introduction of sparse neighborhood covers in [Pel89], the strongly related, yet distinct, notion of network decomposition was introduced in [AGLP89]. The main difference between the two notions is that sparse neighborhood covers, as used in <ref> [Pel93, AP90b, AP90a, BFR92, AKP92, AKP91] </ref>, consist of clusters that capture the expected definition of local neighborhood (see Section 2), while network decomposition as utilized in [AGLP89, LS91, PS92, ABCP92] employs only a weak notion of neighborhood.
Reference: [AKP92] <author> Baruch Awerbuch, Shay Kutten, and David Peleg. </author> <title> Online load balancing in a distributed network. </title> <booktitle> In Proc. 24th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 571-580, </pages> <year> 1992. </year>
Reference-contexts: Using this method as a basic building block leads to significant performance improvements for several fundamental network control problems (such as shortest paths [AR91], job scheduling and load balancing <ref> [AKP92] </ref>, broadcast and multicast [ABP91], routing with small tables [AP92], deadlock prevention [AKP91], bandwidth management in high-speed networks [ACG + 90], and database management [BFR92]), as well as for classical problems in sequential computing (such as finding small edge cuts in planar graphs [Rao92] and approximate all-pairs shortest paths [ABCP93, Coh93]). <p> In parallel to the introduction of sparse neighborhood covers in [Pel89], the strongly related, yet distinct, notion of network decomposition was introduced in [AGLP89]. The main difference between the two notions is that sparse neighborhood covers, as used in <ref> [Pel93, AP90b, AP90a, BFR92, AKP92, AKP91] </ref>, consist of clusters that capture the expected definition of local neighborhood (see Section 2), while network decomposition as utilized in [AGLP89, LS91, PS92, ABCP92] employs only a weak notion of neighborhood.
Reference: [AP90a] <author> Baruch Awerbuch and David Peleg. </author> <title> Network synchronization with polylogarith-mic overhead. </title> <booktitle> In Proc. 31st IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 514-522, </pages> <year> 1990. </year>
Reference-contexts: Such a cover efficiently represents the local neighborhoods in a graph. In fact, the method of representing networks by sparse neighborhood covers, introduced in [Pel89], has recently been identified as a key to the modular design of efficient network algorithms <ref> [Pel93, AP90b, AP90a, AR91, BFR92] </ref>. <p> In parallel to the introduction of sparse neighborhood covers in [Pel89], the strongly related, yet distinct, notion of network decomposition was introduced in [AGLP89]. The main difference between the two notions is that sparse neighborhood covers, as used in <ref> [Pel93, AP90b, AP90a, BFR92, AKP92, AKP91] </ref>, consist of clusters that capture the expected definition of local neighborhood (see Section 2), while network decomposition as utilized in [AGLP89, LS91, PS92, ABCP92] employs only a weak notion of neighborhood.
Reference: [AP90b] <author> Baruch Awerbuch and David Peleg. </author> <title> Sparse partitions. </title> <booktitle> In Proc. 31st IEEE Symp. on Found. of Comp. Science, </booktitle> <pages> pages 503-513, </pages> <year> 1990. </year> <month> 20 </month>
Reference-contexts: Such a cover efficiently represents the local neighborhoods in a graph. In fact, the method of representing networks by sparse neighborhood covers, introduced in [Pel89], has recently been identified as a key to the modular design of efficient network algorithms <ref> [Pel93, AP90b, AP90a, AR91, BFR92] </ref>. <p> In parallel to the introduction of sparse neighborhood covers in [Pel89], the strongly related, yet distinct, notion of network decomposition was introduced in [AGLP89]. The main difference between the two notions is that sparse neighborhood covers, as used in <ref> [Pel93, AP90b, AP90a, BFR92, AKP92, AKP91] </ref>, consist of clusters that capture the expected definition of local neighborhood (see Section 2), while network decomposition as utilized in [AGLP89, LS91, PS92, ABCP92] employs only a weak notion of neighborhood. <p> Therefore, a higher-quality decomposition is needed to avoid a large blowup in the running time for these latter applications. A second group of constructions consists of (sequential) greedy algorithms for the construction of sparse neighborhood covers <ref> [Pel89, AP90b, LS91] </ref>. These algorithms yield the desired optimal tradeoff, and their bounds apply to all alternate notions of network decom position or sparse neighborhood covers. (In fact, the algorithm of [AP90b] is more general. <p> A second group of constructions consists of (sequential) greedy algorithms for the construction of sparse neighborhood covers [Pel89, AP90b, LS91]. These algorithms yield the desired optimal tradeoff, and their bounds apply to all alternate notions of network decom position or sparse neighborhood covers. (In fact, the algorithm of <ref> [AP90b] </ref> is more general. It can create a subsuming cover for an arbitrary initial collection of clusters, and not necessarily 2 to the collection of 1-neighborhoods. <p> Our results are presented in terms of Linial's model for static synchronous networks (see Section 3.4), but can be adapted to a more realistic dynamic asynchronous environment using the existing transformer techniques of <ref> [AAG87, AP90b, APPS92] </ref>. 3 2 Notions of network decomposition In this section we survey the different formulations of network decomposition, and discuss their relations. <p> Let us comment that it might possibly happen that the set P becomes empty earlier than that, in which case all subsequent iterations will do nothing. In the sequential algorithms for decomposition or cover construction, such as that of <ref> [AP90b] </ref> for instance, this problem is bypassed by using a conditional loop, repeated only until all vertices are colored. Unfortunately, this condition is not easy to detect in a distributed fashion, so a distributed algorithm must do without it. 3.2.3 Algorithm Color We finally present the entire recursive algorithm Color. <p> For ideas on how one might go about adapting the algorithms in this paper to deal with some of the above concerns, the reader is referred to the transformer techniques in <ref> [AAG87, AP90b, APPS92] </ref>. 4 Sparse neighborhood covers 4.1 Outline We now turn to algorithms for generating sparse neighborhood covers. We introduce an algorithm Sparse, which takes as input parameters k and t, and outputs a (k; t; kn 1=k )- neighborhood cover for a given network G. <p> Algorithm Sparse invokes two procedures, named Cover and Decomp. Procedure Cover is a modification of the sequential sparse cover procedure of Awerbuch and Peleg <ref> [AP90b] </ref>. Procedure Decomp can be any existing procedure which given a graph G = (V; E), finds a weak ( old ; d old ; 1)-decomposition of G. Lemma 4.1 [AP90b] There exists a procedure Cover (R) that given a graph G = (V; E), jV j = n, a collection <p> Procedure Cover is a modification of the sequential sparse cover procedure of Awerbuch and Peleg <ref> [AP90b] </ref>. Procedure Decomp can be any existing procedure which given a graph G = (V; E), finds a weak ( old ; d old ; 1)-decomposition of G. Lemma 4.1 [AP90b] There exists a procedure Cover (R) that given a graph G = (V; E), jV j = n, a collection of vertices R and an integer k, constructs a set of vertices DR and a collection of clusters DU , satisfying the following properties: (1) For every v 2 DR, <p> = ; for every Y; Y 0 2 DU , 15 (3) jDRj jRj 11=k , and (4) The (strong) diameter of DU clusters satisfies max T 2DU Diam (T ) (2k 1) 2t. (Let us remark that it is possible to introduce slight modifications to Procedure Cover (R) of <ref> [AP90b] </ref>, that will result in improving the constant factor occuring in the exponent of the expression for the time complexity of our algorithm by a factor of 2. <p> We remark that since sparse neighborhood cover algorithms can be translated into strong network decompositions of comparable parameters (cf. <ref> [AP90b, Cow93] </ref>), all complexity bounds hold for the constructions of strong network decompositions as well. Acknowledgment Thanks to Tom Leighton for helpful discussions. 19
Reference: [AP92] <author> B. Awerbuch and D. Peleg. </author> <title> Routing with polynomial communication-space trade-off. </title> <journal> SIAM J. Disc. Math, </journal> <volume> 5(2) </volume> <pages> 151-162, </pages> <year> 1992. </year>
Reference-contexts: Using this method as a basic building block leads to significant performance improvements for several fundamental network control problems (such as shortest paths [AR91], job scheduling and load balancing [AKP92], broadcast and multicast [ABP91], routing with small tables <ref> [AP92] </ref>, deadlock prevention [AKP91], bandwidth management in high-speed networks [ACG + 90], and database management [BFR92]), as well as for classical problems in sequential computing (such as finding small edge cuts in planar graphs [Rao92] and approximate all-pairs shortest paths [ABCP93, Coh93]). <p> It invokes the procedure Compress, which, in turn, runs the procedure Greedy Color, which is a modified version of the greedy algorithm of <ref> [AP92] </ref> on separate clusters. Note that all distances in the discussion below, including those in the same cluster, are assumed to be weak distances (i.e., distances in the graph G). Color is implicitly taking higher and higher powers of the graph. <p> Procedure Greedy Color is a weak-diameter variant of the (sequential) procedure used in the greedy algorithm of <ref> [AP92] </ref> for determining, in each iteration, what vertices will be colored in that iteration. The procedure receives a vertex set R. It then constructs a set DR of vertices in the graph with the following properties. First, DR R. <p> Output: A (; 2k + 1; 1)-decomposition of G, : V 7! f1; : : : ; g, for = kn 1=k . 1. Compute G 2k+1 . 2. If G has less than x vertices, then run the simple greedy algorithm of <ref> [AP92, LS91] </ref> to generate a (kn 1=k ; 2k + 1; 1)-decomposition for G, and return. 3. Partition the vertices of G into x subsets, V 1 ; : : : ; V x (based on the last log x bits of vertex IDs, which are then discarded). 10 4.
Reference: [APPS92] <author> Baruch Awerbuch, Boaz Patt, David Peleg, and Mike Saks. </author> <title> Adapting to asynchronous dynamic networks with polylogarithmic overhead. </title> <booktitle> In Proc. 24th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 557-570, </pages> <year> 1992. </year>
Reference-contexts: Our results are presented in terms of Linial's model for static synchronous networks (see Section 3.4), but can be adapted to a more realistic dynamic asynchronous environment using the existing transformer techniques of <ref> [AAG87, AP90b, APPS92] </ref>. 3 2 Notions of network decomposition In this section we survey the different formulations of network decomposition, and discuss their relations. <p> For ideas on how one might go about adapting the algorithms in this paper to deal with some of the above concerns, the reader is referred to the transformer techniques in <ref> [AAG87, AP90b, APPS92] </ref>. 4 Sparse neighborhood covers 4.1 Outline We now turn to algorithms for generating sparse neighborhood covers. We introduce an algorithm Sparse, which takes as input parameters k and t, and outputs a (k; t; kn 1=k )- neighborhood cover for a given network G.
Reference: [AR91] <author> Y. Afek and M. Riklin. Sparser: </author> <title> A paradigm for running distributed algorithms. </title> <editor> J. </editor> <booktitle> of Algorithms, </booktitle> <year> 1991. </year> <note> Accepted for publication. </note>
Reference-contexts: Such a cover efficiently represents the local neighborhoods in a graph. In fact, the method of representing networks by sparse neighborhood covers, introduced in [Pel89], has recently been identified as a key to the modular design of efficient network algorithms <ref> [Pel93, AP90b, AP90a, AR91, BFR92] </ref>. <p> Using this method as a basic building block leads to significant performance improvements for several fundamental network control problems (such as shortest paths <ref> [AR91] </ref>, job scheduling and load balancing [AKP92], broadcast and multicast [ABP91], routing with small tables [AP92], deadlock prevention [AKP91], bandwidth management in high-speed networks [ACG + 90], and database management [BFR92]), as well as for classical problems in sequential computing (such as finding small edge cuts in planar graphs [Rao92] and
Reference: [BFR92] <author> Yair Bartal, Amos Fiat, and Yuval Rabani. </author> <title> Competitive algorithms for distributed data management. </title> <booktitle> In Proc. 24th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 39-50, </pages> <year> 1992. </year>
Reference-contexts: Such a cover efficiently represents the local neighborhoods in a graph. In fact, the method of representing networks by sparse neighborhood covers, introduced in [Pel89], has recently been identified as a key to the modular design of efficient network algorithms <ref> [Pel93, AP90b, AP90a, AR91, BFR92] </ref>. <p> as a basic building block leads to significant performance improvements for several fundamental network control problems (such as shortest paths [AR91], job scheduling and load balancing [AKP92], broadcast and multicast [ABP91], routing with small tables [AP92], deadlock prevention [AKP91], bandwidth management in high-speed networks [ACG + 90], and database management <ref> [BFR92] </ref>), as well as for classical problems in sequential computing (such as finding small edge cuts in planar graphs [Rao92] and approximate all-pairs shortest paths [ABCP93, Coh93]). In most of these applications, sparse neighborhood covers yield a polylogarithmic-overhead solution to the problem. <p> In parallel to the introduction of sparse neighborhood covers in [Pel89], the strongly related, yet distinct, notion of network decomposition was introduced in [AGLP89]. The main difference between the two notions is that sparse neighborhood covers, as used in <ref> [Pel93, AP90b, AP90a, BFR92, AKP92, AKP91] </ref>, consist of clusters that capture the expected definition of local neighborhood (see Section 2), while network decomposition as utilized in [AGLP89, LS91, PS92, ABCP92] employs only a weak notion of neighborhood.
Reference: [Coh93] <author> Edith Cohen. </author> <title> Fast algorithms for constructing t-spanners and paths with stretch t. </title> <booktitle> In Proc. 34rd IEEE Symp. on Found. of Comp. Science. IEEE, </booktitle> <month> November </month> <year> 1993. </year> <note> to appear. </note>
Reference-contexts: balancing [AKP92], broadcast and multicast [ABP91], routing with small tables [AP92], deadlock prevention [AKP91], bandwidth management in high-speed networks [ACG + 90], and database management [BFR92]), as well as for classical problems in sequential computing (such as finding small edge cuts in planar graphs [Rao92] and approximate all-pairs shortest paths <ref> [ABCP93, Coh93] </ref>). In most of these applications, sparse neighborhood covers yield a polylogarithmic-overhead solution to the problem.
Reference: [Cow93] <author> Lenore Cowen. </author> <title> On Local Representation of Graphs and Networks. </title> <type> PhD thesis, </type> <institution> MIT, Lab. for Comp. Science, </institution> <year> 1993. </year>
Reference-contexts: Clearly, any strong network decomposition is also a weak decomposition, but the converse is not necessarily true. All the results in [AGLP89, LS91, PS92, ABCP92] are stated in terms of weak network decomposition, but some can be extended to strong network decomposition (See <ref> [Cow93] </ref> for a survey.). We now present the definition for sparse neighborhood covers. Notice that this is a strong diameter definition. Definition 2.4 A (k; t; )-neighborhood cover is a collection of clusters S 1 ; : : : ; S r , with the following properties: 1. <p> The modification involves keeping track of old-colored clusters, and their neighborhoods separately (see <ref> [Cow93] </ref> for details.) The second component used in Algorithm Sparse, namely, Procedures Decomp, will be bound to one of the two algorithms of [PS92, LS91]. <p> We remark that since sparse neighborhood cover algorithms can be translated into strong network decompositions of comparable parameters (cf. <ref> [AP90b, Cow93] </ref>), all complexity bounds hold for the constructions of strong network decompositions as well. Acknowledgment Thanks to Tom Leighton for helpful discussions. 19
Reference: [Lin87] <author> Nathan Linial. </author> <title> Locality as an obstacle to distributed computing. </title> <booktitle> In 27 th Annual Symposium on Foundations of Computer Science. IEEE, </booktitle> <month> October </month> <year> 1987. </year>
Reference-contexts: The distributed model of computing we will be concerned with, hereafter referred to as the free model, is due to Linial <ref> [Lin87] </ref>. Much as PRAM algorithms in parallel computing gives a good indication of parallelism, the free model gives a good indication of locality and distributed time.
Reference: [LS91] <author> N. Linial and M. Saks. </author> <title> Decomposing graphs into regions of small diameter. </title> <booktitle> In Proc. 2nd ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <pages> pages 320-330. </pages> <address> ACM/SIAM, </address> <month> January </month> <year> 1991. </year>
Reference-contexts: The main difference between the two notions is that sparse neighborhood covers, as used in [Pel93, AP90b, AP90a, BFR92, AKP92, AKP91], consist of clusters that capture the expected definition of local neighborhood (see Section 2), while network decomposition as utilized in <ref> [AGLP89, LS91, PS92, ABCP92] </ref> employs only a weak notion of neighborhood. In fact, the way network decomposition is defined in [AGLP89], the clusters might not even be internally connected. For many applications in distributed computing, the stronger notion of sparse covers is essential. <p> Notable exceptions for which such a decomposition suffices are those applications based on "symmetry-breaking"; i.e., such a decomposition can be used to construct a maximal independent set or a ( + 1) coloring (where is the maximum vertex degree in the graph) fast in the distributed domain <ref> [AGLP89, LS91, PS92] </ref>. The goal of this paper is fast distributed algorithms for both high-quality network decomposition, and sparse neighborhood covers. 1.2 Previous work Previous work on the construction of neighborhood covers and decompositions can be classified into three main groups, to be discussed next. <p> Therefore, a higher-quality decomposition is needed to avoid a large blowup in the running time for these latter applications. A second group of constructions consists of (sequential) greedy algorithms for the construction of sparse neighborhood covers <ref> [Pel89, AP90b, LS91] </ref>. These algorithms yield the desired optimal tradeoff, and their bounds apply to all alternate notions of network decom position or sparse neighborhood covers. (In fact, the algorithm of [AP90b] is more general. <p> In addition, it applies also to the weighted case, with the corresponding weighted notions of distance and diameter.) However, these algorithms are inherently sequential, and their distributed implementation requires O (n log n) time. The third group consists of randomized distributed algorithms. The algorithm of <ref> [LS91] </ref> achieves a high-quality network decomposition with high probability by introducing randomization, and is very efficient. However, the algorithm does not yield a sparse neighborhood cover. <p> First, we give the weak diameter definition, which is equivalent to the definitions in <ref> [AGLP89, LS91, PS92] </ref>. <p> The quality of the decomposition is measured by the tradeoffs between the parameters d, and . It is known that there are graphs for which must be (kn 1=k ) to achieve a weak decomposition into clusters of diameter bounded by O (k) and separation <ref> [LS91] </ref>. Consequently, a weak (; d; )-decomposition is said to be high-quality if it achieves the optimal tradeoff; namely, when d = O (k), and the coloring number is at most kn 1=k , for some k 1. <p> Clearly, any strong network decomposition is also a weak decomposition, but the converse is not necessarily true. All the results in <ref> [AGLP89, LS91, PS92, ABCP92] </ref> are stated in terms of weak network decomposition, but some can be extended to strong network decomposition (See [Cow93] for a survey.). We now present the definition for sparse neighborhood covers. Notice that this is a strong diameter definition. <p> in at most c log n clusters, for constant c &gt; 0: We remark that this bound is tight to within a constant factor; there exist graphs for which any (log n; t; )-neighborhood cover has = (log n), i.e., it places some vertex in at least (log n) sets <ref> [LS91] </ref>. When k = log n, we find that sparse neighborhood covers form a useful data structure to locally represent the t-neighborhoods of a graph. <p> Output: A (; 2k + 1; 1)-decomposition of G, : V 7! f1; : : : ; g, for = kn 1=k . 1. Compute G 2k+1 . 2. If G has less than x vertices, then run the simple greedy algorithm of <ref> [AP92, LS91] </ref> to generate a (kn 1=k ; 2k + 1; 1)-decomposition for G, and return. 3. Partition the vertices of G into x subsets, V 1 ; : : : ; V x (based on the last log x bits of vertex IDs, which are then discarded). 10 4. <p> The modification involves keeping track of old-colored clusters, and their neighborhoods separately (see [Cow93] for details.) The second component used in Algorithm Sparse, namely, Procedures Decomp, will be bound to one of the two algorithms of <ref> [PS92, LS91] </ref>. Again, we will only state the main relevant properties of these algorithms here, and refer the interested reader to the appropriate source for more details on their structure and operation. The claims we will rely on are the following. <p> Lemma 4.2 [PS92] There exists an algorithm Decomp [P S] that given a graph G = (V; E), jV j = n, constructs a weak (2 p p log n ; 1)-decomposition for G in 2 c p log n time for some constant c &gt; 0. Lemma 4.3 <ref> [LS91] </ref> There exists a randomized algorithm Decomp [LS] that given a graph G = (V; E), jV j = n, constructs a weak (log n; log n; 1)-decomposition for G in O (log 2 n) expected time. 4.1.1 Algorithm Sparse Algorithm Sparse operates as follows. <p> Calling algorithm Sparse with Decomp bound to the randomized network decomposition algorithm Decomp [LS] of <ref> [LS91] </ref> gives the following theorem, relying on Lemma 4.3: Theorem 4.9 There is a randomized distributed algorithm that given a graph G = (V; E), jV j = n, and integers k; t 1, constructs a (k; t; kn 1=k )-neighborhood cover of G in tO (k 2 log 2 n
Reference: [Pel89] <author> David Peleg. </author> <title> Distance-preserving distributed directories and efficient routing schemes. </title> <type> unpublished manuscript, </type> <year> 1989. </year>
Reference-contexts: Such a cover efficiently represents the local neighborhoods in a graph. In fact, the method of representing networks by sparse neighborhood covers, introduced in <ref> [Pel89] </ref>, has recently been identified as a key to the modular design of efficient network algorithms [Pel93, AP90b, AP90a, AR91, BFR92]. <p> Thus, in a sense, the impact of efficient sparse neighborhood cover algorithms on distributed network algorithms is analogous to the impact of efficient data structures (like balanced search trees or 2-3 trees) on sequential computation. In parallel to the introduction of sparse neighborhood covers in <ref> [Pel89] </ref>, the strongly related, yet distinct, notion of network decomposition was introduced in [AGLP89]. <p> Therefore, a higher-quality decomposition is needed to avoid a large blowup in the running time for these latter applications. A second group of constructions consists of (sequential) greedy algorithms for the construction of sparse neighborhood covers <ref> [Pel89, AP90b, LS91] </ref>. These algorithms yield the desired optimal tradeoff, and their bounds apply to all alternate notions of network decom position or sparse neighborhood covers. (In fact, the algorithm of [AP90b] is more general.
Reference: [Pel93] <author> D. Peleg. </author> <title> Distance-dependent distributed directories. </title> <journal> Info. and Computation, </journal> <note> 1993. Also in Tech. Report CS89-10, </note> <institution> The Weizmann Institute, </institution> <month> May 89. </month>
Reference-contexts: Such a cover efficiently represents the local neighborhoods in a graph. In fact, the method of representing networks by sparse neighborhood covers, introduced in [Pel89], has recently been identified as a key to the modular design of efficient network algorithms <ref> [Pel93, AP90b, AP90a, AR91, BFR92] </ref>. <p> In parallel to the introduction of sparse neighborhood covers in [Pel89], the strongly related, yet distinct, notion of network decomposition was introduced in [AGLP89]. The main difference between the two notions is that sparse neighborhood covers, as used in <ref> [Pel93, AP90b, AP90a, BFR92, AKP92, AKP91] </ref>, consist of clusters that capture the expected definition of local neighborhood (see Section 2), while network decomposition as utilized in [AGLP89, LS91, PS92, ABCP92] employs only a weak notion of neighborhood.
Reference: [PS92] <author> Alessandro Panconesi and Aravind Srinivasan. </author> <title> Improved distributed algorithms for coloring and network decomposition problems. </title> <booktitle> In Proc. 24th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 581-592, </pages> <year> 1992. </year>
Reference-contexts: The main difference between the two notions is that sparse neighborhood covers, as used in [Pel93, AP90b, AP90a, BFR92, AKP92, AKP91], consist of clusters that capture the expected definition of local neighborhood (see Section 2), while network decomposition as utilized in <ref> [AGLP89, LS91, PS92, ABCP92] </ref> employs only a weak notion of neighborhood. In fact, the way network decomposition is defined in [AGLP89], the clusters might not even be internally connected. For many applications in distributed computing, the stronger notion of sparse covers is essential. <p> Notable exceptions for which such a decomposition suffices are those applications based on "symmetry-breaking"; i.e., such a decomposition can be used to construct a maximal independent set or a ( + 1) coloring (where is the maximum vertex degree in the graph) fast in the distributed domain <ref> [AGLP89, LS91, PS92] </ref>. The goal of this paper is fast distributed algorithms for both high-quality network decomposition, and sparse neighborhood covers. 1.2 Previous work Previous work on the construction of neighborhood covers and decompositions can be classified into three main groups, to be discussed next. <p> The reduction from time O (n * ) for * = O ( p p * = O (1= log n) is achieved directly from the corresponding speedup for the [AGLP89] construction due to <ref> [PS92] </ref>. In addition we present a randomized algorithm that constructs all notions of high-quality network decomposition in polylogarithmic expected time, including the useful sparse neighborhood covers. <p> First, we give the weak diameter definition, which is equivalent to the definitions in <ref> [AGLP89, LS91, PS92] </ref>. <p> Clearly, any strong network decomposition is also a weak decomposition, but the converse is not necessarily true. All the results in <ref> [AGLP89, LS91, PS92, ABCP92] </ref> are stated in terms of weak network decomposition, but some can be extended to strong network decomposition (See [Cow93] for a survey.). We now present the definition for sparse neighborhood covers. Notice that this is a strong diameter definition. <p> Independently, and at the same time as we introduced the above algorithm, Panconesi and Srinivasan <ref> [PS92] </ref> obtained a slightly better asymptotic running time for a low-quality weak network decomposition than that achieved by Awerbuch et. al. [AGLP89]. <p> The modification involves keeping track of old-colored clusters, and their neighborhoods separately (see [Cow93] for details.) The second component used in Algorithm Sparse, namely, Procedures Decomp, will be bound to one of the two algorithms of <ref> [PS92, LS91] </ref>. Again, we will only state the main relevant properties of these algorithms here, and refer the interested reader to the appropriate source for more details on their structure and operation. The claims we will rely on are the following. <p> Again, we will only state the main relevant properties of these algorithms here, and refer the interested reader to the appropriate source for more details on their structure and operation. The claims we will rely on are the following. Lemma 4.2 <ref> [PS92] </ref> There exists an algorithm Decomp [P S] that given a graph G = (V; E), jV j = n, constructs a weak (2 p p log n ; 1)-decomposition for G in 2 c p log n time for some constant c &gt; 0. <p> (ktt + td old old k 2 n 1=k ). (Recall that, for the applications, we typically set k = log n, yielding time O (tt log n + td old old log 2 n).) Calling algorithm Sparse with Decomp bound to the network decomposition algorithm Decomp [P S] of <ref> [PS92] </ref> gives the following theorem, relying on Lemma 4.2: Theorem 4.7 There is a deterministic distributed algorithm that given a graph G = (V; E), jV j = n, and integers k; t 1, constructs a (k; t; kn 1=k )-neighborhood cover of G in t2 c p 18 t2 4
Reference: [Rao92] <author> Satish Rao. </author> <title> Finding small edge cuts in planar graphs. </title> <booktitle> In Proc. 24th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 229-240, </pages> <year> 1992. </year> <month> 21 </month>
Reference-contexts: paths [AR91], job scheduling and load balancing [AKP92], broadcast and multicast [ABP91], routing with small tables [AP92], deadlock prevention [AKP91], bandwidth management in high-speed networks [ACG + 90], and database management [BFR92]), as well as for classical problems in sequential computing (such as finding small edge cuts in planar graphs <ref> [Rao92] </ref> and approximate all-pairs shortest paths [ABCP93, Coh93]). In most of these applications, sparse neighborhood covers yield a polylogarithmic-overhead solution to the problem.
References-found: 22

