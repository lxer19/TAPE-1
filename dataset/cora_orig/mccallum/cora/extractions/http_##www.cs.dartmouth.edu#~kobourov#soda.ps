URL: http://www.cs.dartmouth.edu/~kobourov/soda.ps
Refering-URL: http://www.cs.dartmouth.edu/~kobourov/
Root-URL: http://www.cs.dartmouth.edu
Email: duncan@jhu.edu  goodrich@jhu.edu  kobourov@cs.jhu.edu  
Title: Balanced Aspect Ratio Trees: Combining the Advantages of k-d Trees and Octrees  
Author: Christian A. Duncan Michael T. Goodrich Stephen Kobourov 
Affiliation: Center for Geometric Computing The Johns Hopkins University  Center for Geometric Computing The Johns Hopkins University  Center for Geometric Computing The Johns Hopkins University  
Abstract: Given a set S of n points in IR d , we show, for fixed d, how to construct in O(n log n) time a data structure we call the Balanced Aspect Ratio (BAR) tree. A BAR tree is a binary space partition tree on S that has O(log n) depth and in which every region is convex and "fat" (that is, has a bounded aspect ratio). While previous hierarchical data structures, such as k-d trees, quadtrees, octrees, fair-split trees, and balanced box decompositions can guarantee some of these properties, we know of no previous data structure that combines all of these properties simultaneously. The BAR tree data structure has numerous applications ranging from solving several geometric searching problems in fixed dimensional space to aiding in the visualization of graphs and three-dimensional worlds.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Agarwal, M. Katz, and M. Sharir. </author> <title> Computing depth orders for fat objects and related problems. </title> <journal> Comput. Geom. Theory Appl., </journal> <volume> 5 </volume> <pages> 187-206, </pages> <year> 1995. </year>
Reference-contexts: They are also used in information retrieval for finding nearest neighbors, farthest neighbors, and performing range queries. The performance bounds of a BSP tree T for answering such queries for a point set S are directly related to the depth of T and the "fatness" <ref> [1, 14, 20] </ref> (that is, the boundedness of the aspect ratios) of the regions associated with T 's vertices. <p> Typically, we use one of the standard L p metrics to define aspect ratios, as these are all within a polynomial factor of d from each other. In keeping with current custom <ref> [1, 14, 20] </ref>, we use the terms fat and skinny to refer to regions which have respectively balanced and unbalanced aspect ratios. This definition states that a region R has a minimum width associated with its diameter.
Reference: [2] <author> P. K. Agarwal, E. F. Grove, T. M. Murali, and J. S. Vitter. </author> <title> Binary space partitions for fat rectangles. </title> <booktitle> In Proc. 37th Annu. IEEE Sympos. Found. Comput. Sci., </booktitle> <pages> pages 482-491, </pages> <month> Oct. </month> <year> 1996. </year>
Reference-contexts: Such trees have excellent depth properties, in that their depth is always O (log n). Unfortunately, since the objects in S are points, which are not themselves fat (as with the sets of objects studied in <ref> [2, 12, 21] </ref>), the regions associated with vertices in a k-d tree can have arbitrarily large aspect ratios. This unbounded aspect ratio property of k-d trees results in worst-case running times for most searching problems, such as nearest-neighbor searching, that are (n) even for approximation versions.
Reference: [3] <author> W. G. Aref and H. Samet. </author> <title> Perspective viewing of objects represented by octrees. Comput. Graph. </title> <journal> Forum, </journal> <volume> 14(1) </volume> <pages> 59-66, </pages> <month> Mar. </month> <year> 1995. </year> <institution> also University of Maryland Computer Science TR-2757. </institution>
Reference-contexts: This unbounded aspect ratio property of k-d trees results in worst-case running times for most searching problems, such as nearest-neighbor searching, that are (n) even for approximation versions. Another well-known class of search structures, known as quadtrees [15, 25, 27] and octrees <ref> [3, 10, 18, 26] </ref>, are based on the alternate approach of using axis-parallel hyperplanes to divide region volumes equally. These structures produce space partitioning trees with regions having good aspect ratios, but their depths can be quite large, which again results in poor worst-case search times.
Reference: [4] <author> S. Arya and D. M. Mount. </author> <title> Approximate range searching. </title> <booktitle> In Proc. 11th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 172-181, </pages> <year> 1995. </year>
Reference-contexts: This poor worst-case performance of the BSP approaches found in k-d trees and octrees has motivated some researchers to abandon the BSP tree framework altogether in search of alternate structures with good depth and aspect-ratio bounds. In particular, the balanced box-decomposition (BBD) tree structure of Arya et al. <ref> [5, 4] </ref>, which is based on the fair-split tree of Callahan and Kosaraju [8, 9], provides a space partitioning tree that has O (log n) depth while also achieving vertex-associated regions with bounded aspect ratios. <p> We will more formally describe some of these applications shortly. Arya et al. <ref> [4, 5] </ref> propose a technique to solve the approximate nearest-neighbor and range query problems by constructing a balanced box-decomposition tree. Similar to our BAR trees, these trees maintain an ff-balanced aspect ratio but only by introducing non-convex hole cuts.
Reference: [5] <author> S. Arya, D. M. Mount, N. S. Netanyahu, R. Silverman, and A. Wu. </author> <title> An optimal algorithm for approximate nearest neighbor searching. </title> <booktitle> In Proc. 5th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 573-582, </pages> <year> 1994. </year>
Reference-contexts: This poor worst-case performance of the BSP approaches found in k-d trees and octrees has motivated some researchers to abandon the BSP tree framework altogether in search of alternate structures with good depth and aspect-ratio bounds. In particular, the balanced box-decomposition (BBD) tree structure of Arya et al. <ref> [5, 4] </ref>, which is based on the fair-split tree of Callahan and Kosaraju [8, 9], provides a space partitioning tree that has O (log n) depth while also achieving vertex-associated regions with bounded aspect ratios. <p> In keeping with current custom [1, 14, 20], we use the terms fat and skinny to refer to regions which have respectively balanced and unbalanced aspect ratios. This definition states that a region R has a minimum width associated with its diameter. As in Arya et al. <ref> [5] </ref>, we use this property to show worst-case bounds on some geometric approximation problems. <p> We will more formally describe some of these applications shortly. Arya et al. <ref> [4, 5] </ref> propose a technique to solve the approximate nearest-neighbor and range query problems by constructing a balanced box-decomposition tree. Similar to our BAR trees, these trees maintain an ff-balanced aspect ratio but only by introducing non-convex hole cuts. <p> Also, every leaf node visited, u, which contained a point, p 0 , had to have ffi (p 0 ; q) ffi (p; q) by the fact that p was the farthest point found. Thus, similar to the method of Arya et al. <ref> [5] </ref>, we know that every node containing a point visited by the algorithm must completely pierce the annulus of radii ffi (p; q) and ffi (p; q) + *D, i.e. lie on both sides of this annulus.
Reference: [6] <author> J. L. Bentley. </author> <title> Multidimensional binary search trees used for associative searching. </title> <journal> Commun. ACM, </journal> <volume> 18(9) </volume> <pages> 509-517, </pages> <year> 1975. </year>
Reference-contexts: One well-known class of BSP trees, known as k-d trees <ref> [6, 7, 17, 22] </ref>, uses axis-parallel cutting hyperplanes that are placed so as to divide the set of points associated with a node more-or-less in half. Such trees have excellent depth properties, in that their depth is always O (log n).
Reference: [7] <author> J. L. Bentley. </author> <title> K-d trees for semidynamic point sets. </title> <booktitle> In Proc. 6th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 187-197, </pages> <year> 1990. </year>
Reference-contexts: One well-known class of BSP trees, known as k-d trees <ref> [6, 7, 17, 22] </ref>, uses axis-parallel cutting hyperplanes that are placed so as to divide the set of points associated with a node more-or-less in half. Such trees have excellent depth properties, in that their depth is always O (log n).
Reference: [8] <author> P. B. Callahan and S. R. Kosaraju. </author> <title> Algorithms for dynamic closest-pair and n-body potential fields. </title> <booktitle> In Proc. 6th ACM-SIAM Sympos. Discrete Algorithms, </booktitle> <pages> pages 263-272, </pages> <year> 1995. </year>
Reference-contexts: In particular, the balanced box-decomposition (BBD) tree structure of Arya et al. [5, 4], which is based on the fair-split tree of Callahan and Kosaraju <ref> [8, 9] </ref>, provides a space partitioning tree that has O (log n) depth while also achieving vertex-associated regions with bounded aspect ratios.
Reference: [9] <author> P. B. Callahan and S. R. Kosaraju. </author> <title> A decomposition of multidimensional point sets with applications to k-nearest-neighbors and n-body potential fields. </title> <journal> J. ACM, </journal> <volume> 42 </volume> <pages> 67-90, </pages> <year> 1995. </year>
Reference-contexts: In particular, the balanced box-decomposition (BBD) tree structure of Arya et al. [5, 4], which is based on the fair-split tree of Callahan and Kosaraju <ref> [8, 9] </ref>, provides a space partitioning tree that has O (log n) depth while also achieving vertex-associated regions with bounded aspect ratios.
Reference: [10] <author> H. H. Chen and T. S. Huang. </author> <title> A survey of construction and manipulation of octrees. Comput. Vision Graph. </title> <journal> Image Process., </journal> <volume> 43 </volume> <pages> 409-431, </pages> <year> 1988. </year>
Reference-contexts: This unbounded aspect ratio property of k-d trees results in worst-case running times for most searching problems, such as nearest-neighbor searching, that are (n) even for approximation versions. Another well-known class of search structures, known as quadtrees [15, 25, 27] and octrees <ref> [3, 10, 18, 26] </ref>, are based on the alternate approach of using axis-parallel hyperplanes to divide region volumes equally. These structures produce space partitioning trees with regions having good aspect ratios, but their depths can be quite large, which again results in poor worst-case search times.
Reference: [11] <author> N. Chin and S. Feiner. </author> <title> Near real-time shadow generation using BSP trees. </title> <booktitle> In Proc. SIGGRAPH '89, </booktitle> <pages> pages 99-106, </pages> <address> New York, </address> <month> Aug. </month> <year> 1989. </year> <note> ACM SIGGRAPH. </note>
Reference-contexts: by ARO under grant DAAH04-96-1-0013. y This research partially supported by NSF under Grant CCR-9625289, and ARO under grant DAAH04-96-1-0013. z This research partially supported by ARO under grant DAAH04-96-1-0013. 1 We will view d as a constant relative to n throughout this paper. to solve problems in computer graphics <ref> [11, 23, 24, 28] </ref>, such as global illumination, shadow generation, ray casting, and visibility. They are also used in information retrieval for finding nearest neighbors, farthest neighbors, and performing range queries.
Reference: [12] <author> M. de Berg. </author> <title> Linear size binary space partitions for fat objects. </title> <booktitle> In Proc. 3rd Annu. European Sympos. Algorithms, volume 979 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 252-263. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Such trees have excellent depth properties, in that their depth is always O (log n). Unfortunately, since the objects in S are points, which are not themselves fat (as with the sets of objects studied in <ref> [2, 12, 21] </ref>), the regions associated with vertices in a k-d tree can have arbitrarily large aspect ratios. This unbounded aspect ratio property of k-d trees results in worst-case running times for most searching problems, such as nearest-neighbor searching, that are (n) even for approximation versions.
Reference: [13] <author> C. A. Duncan, M. T. Goodrich, and S. G. Koboruov. </author> <title> Balanced aspect ratio trees and their use for drawing very large graphs. In Sixth Symposium on Graph Drawing, </title> <note> to be published in 1998. </note>
Reference-contexts: This sacrifice makes the BBD tree inappropriate for several applications in computer graphics and graph drawing, where convexity of the partitioned regions is desirable (e.g., see [19]). 1.2 Our Results Building on earlier work of the authors for a two-dimensional balanced space partition data structure <ref> [13] </ref>, useful in the context of graph drawing, we introduce in this paper a multi-dimensional space partition tree data structure, which we call the balanced aspect ratio (BAR) tree, that is defined for any set S of n points in IR d .
Reference: [14] <author> A. Efrat and M. Sharir. </author> <title> On the complexity of the union of fat objects in the plane. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 104-112, </pages> <year> 1997. </year>
Reference-contexts: They are also used in information retrieval for finding nearest neighbors, farthest neighbors, and performing range queries. The performance bounds of a BSP tree T for answering such queries for a point set S are directly related to the depth of T and the "fatness" <ref> [1, 14, 20] </ref> (that is, the boundedness of the aspect ratios) of the regions associated with T 's vertices. <p> Typically, we use one of the standard L p metrics to define aspect ratios, as these are all within a polynomial factor of d from each other. In keeping with current custom <ref> [1, 14, 20] </ref>, we use the terms fat and skinny to refer to regions which have respectively balanced and unbalanced aspect ratios. This definition states that a region R has a minimum width associated with its diameter.
Reference: [15] <author> R. A. Finkel and J. L. Bentley. </author> <title> Quad trees: a data structure for retrieval on composite keys. </title> <journal> Acta Inform., </journal> <volume> 4 </volume> <pages> 1-9, </pages> <year> 1974. </year>
Reference-contexts: This unbounded aspect ratio property of k-d trees results in worst-case running times for most searching problems, such as nearest-neighbor searching, that are (n) even for approximation versions. Another well-known class of search structures, known as quadtrees <ref> [15, 25, 27] </ref> and octrees [3, 10, 18, 26], are based on the alternate approach of using axis-parallel hyperplanes to divide region volumes equally.
Reference: [16] <author> H. Fuchs, Z. M. Kedem, and B. Naylor. </author> <title> On visible surface generation by a priori tree structures. </title> <journal> Comput. Graph., </journal> <volume> 14(3) </volume> <pages> 124-133, </pages> <year> 1980. </year> <note> Proc. SIGGRAPH '80. </note>
Reference-contexts: Many previous data structures for performing geometric searching for a multi-dimensional point set S are instances of a general class of structures known as binary space partition (BSP) trees <ref> [16] </ref> (see also [27]). Each node in a BSP tree T represents both a convex region in space and all of the points of S lying inside this region. Each leaf node in T represents a region with a constant number of points of S inside it.
Reference: [17] <author> A. Henrich. </author> <title> Improving the performance of multi-dimensional access structures based on kd-trees. </title> <booktitle> In Proc. 12th IEEE Intl. Conf. on Data Engineering, </booktitle> <pages> pages 68-74, </pages> <year> 1996. </year>
Reference-contexts: One well-known class of BSP trees, known as k-d trees <ref> [6, 7, 17, 22] </ref>, uses axis-parallel cutting hyperplanes that are placed so as to divide the set of points associated with a node more-or-less in half. Such trees have excellent depth properties, in that their depth is always O (log n).
Reference: [18] <author> C. Jackins and S. L. Tanimoto. </author> <title> Oct-trees and their use in representing 3-d objects. Comput. Graph. </title> <journal> Image Process., </journal> <volume> 14 </volume> <pages> 249-270, </pages> <year> 1980. </year>
Reference-contexts: This unbounded aspect ratio property of k-d trees results in worst-case running times for most searching problems, such as nearest-neighbor searching, that are (n) even for approximation versions. Another well-known class of search structures, known as quadtrees [15, 25, 27] and octrees <ref> [3, 10, 18, 26] </ref>, are based on the alternate approach of using axis-parallel hyperplanes to divide region volumes equally. These structures produce space partitioning trees with regions having good aspect ratios, but their depths can be quite large, which again results in poor worst-case search times.
Reference: [19] <author> M. J. Katz. </author> <title> 3-D vertical ray shooting and 2-D point enclosure, range searching, and arc shooting amidst convex fat objects. </title> <journal> Comput. Geom. Theory Appl. </journal> <note> to appear. </note>
Reference-contexts: This sacrifice makes the BBD tree inappropriate for several applications in computer graphics and graph drawing, where convexity of the partitioned regions is desirable (e.g., see <ref> [19] </ref>). 1.2 Our Results Building on earlier work of the authors for a two-dimensional balanced space partition data structure [13], useful in the context of graph drawing, we introduce in this paper a multi-dimensional space partition tree data structure, which we call the balanced aspect ratio (BAR) tree, that is defined
Reference: [20] <author> J. Matousek, J. Pach, M. Sharir, S. Sifrony, and E. Welzl. </author> <title> Fat triangles determine linearly many holes. </title> <journal> SIAM J. Comput., </journal> <volume> 23 </volume> <pages> 154-169, </pages> <year> 1994. </year>
Reference-contexts: They are also used in information retrieval for finding nearest neighbors, farthest neighbors, and performing range queries. The performance bounds of a BSP tree T for answering such queries for a point set S are directly related to the depth of T and the "fatness" <ref> [1, 14, 20] </ref> (that is, the boundedness of the aspect ratios) of the regions associated with T 's vertices. <p> Typically, we use one of the standard L p metrics to define aspect ratios, as these are all within a polynomial factor of d from each other. In keeping with current custom <ref> [1, 14, 20] </ref>, we use the terms fat and skinny to refer to regions which have respectively balanced and unbalanced aspect ratios. This definition states that a region R has a minimum width associated with its diameter.
Reference: [21] <author> M. H. Overmars and A. F. van der Stappen. </author> <title> Range searching and point location among fat objects. </title> <journal> J. Algorithms, </journal> <volume> 21 </volume> <pages> 629-656, </pages> <year> 1996. </year>
Reference-contexts: Such trees have excellent depth properties, in that their depth is always O (log n). Unfortunately, since the objects in S are points, which are not themselves fat (as with the sets of objects studied in <ref> [2, 12, 21] </ref>), the regions associated with vertices in a k-d tree can have arbitrarily large aspect ratios. This unbounded aspect ratio property of k-d trees results in worst-case running times for most searching problems, such as nearest-neighbor searching, that are (n) even for approximation versions.
Reference: [22] <author> M. H. Overmars and J. van Leeuwen. </author> <title> Dynamic multi-dimensional data structures based on quad- and k-d trees. </title> <journal> Acta Inform., </journal> <volume> 17 </volume> <pages> 267-285, </pages> <year> 1982. </year>
Reference-contexts: One well-known class of BSP trees, known as k-d trees <ref> [6, 7, 17, 22] </ref>, uses axis-parallel cutting hyperplanes that are placed so as to divide the set of points associated with a node more-or-less in half. Such trees have excellent depth properties, in that their depth is always O (log n).
Reference: [23] <author> M. S. Paterson and F. F. Yao. </author> <title> Efficient binary space partitions for hidden-surface removal and solid modeling. </title> <journal> Discrete Comput. Geom., </journal> <volume> 5 </volume> <pages> 485-503, </pages> <year> 1990. </year>
Reference-contexts: by ARO under grant DAAH04-96-1-0013. y This research partially supported by NSF under Grant CCR-9625289, and ARO under grant DAAH04-96-1-0013. z This research partially supported by ARO under grant DAAH04-96-1-0013. 1 We will view d as a constant relative to n throughout this paper. to solve problems in computer graphics <ref> [11, 23, 24, 28] </ref>, such as global illumination, shadow generation, ray casting, and visibility. They are also used in information retrieval for finding nearest neighbors, farthest neighbors, and performing range queries.
Reference: [24] <author> M. S. Paterson and F. F. Yao. </author> <title> Optimal binary space partitions for orthogonal objects. </title> <journal> J. Algorithms, </journal> <volume> 13 </volume> <pages> 99-113, </pages> <year> 1992. </year>
Reference-contexts: by ARO under grant DAAH04-96-1-0013. y This research partially supported by NSF under Grant CCR-9625289, and ARO under grant DAAH04-96-1-0013. z This research partially supported by ARO under grant DAAH04-96-1-0013. 1 We will view d as a constant relative to n throughout this paper. to solve problems in computer graphics <ref> [11, 23, 24, 28] </ref>, such as global illumination, shadow generation, ray casting, and visibility. They are also used in information retrieval for finding nearest neighbors, farthest neighbors, and performing range queries.
Reference: [25] <author> H. Samet. </author> <title> The quadtree and related hierarchical data structures. </title> <journal> ACM Comput. Surv., </journal> <volume> 16(2), </volume> <month> June </month> <year> 1984. </year>
Reference-contexts: This unbounded aspect ratio property of k-d trees results in worst-case running times for most searching problems, such as nearest-neighbor searching, that are (n) even for approximation versions. Another well-known class of search structures, known as quadtrees <ref> [15, 25, 27] </ref> and octrees [3, 10, 18, 26], are based on the alternate approach of using axis-parallel hyperplanes to divide region volumes equally.
Reference: [26] <author> H. Samet. </author> <title> An overview of quadtrees, octrees, and related hierarchical data structures. </title> <editor> In R. A. Earnshaw, editor, </editor> <booktitle> Theoretical Foundations of Computer Graphics and CAD, volume 40 of NATO ASI Series F, </booktitle> <pages> pages 51-68. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, West Germany, </address> <year> 1988. </year>
Reference-contexts: This unbounded aspect ratio property of k-d trees results in worst-case running times for most searching problems, such as nearest-neighbor searching, that are (n) even for approximation versions. Another well-known class of search structures, known as quadtrees [15, 25, 27] and octrees <ref> [3, 10, 18, 26] </ref>, are based on the alternate approach of using axis-parallel hyperplanes to divide region volumes equally. These structures produce space partitioning trees with regions having good aspect ratios, but their depths can be quite large, which again results in poor worst-case search times.
Reference: [27] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: Many previous data structures for performing geometric searching for a multi-dimensional point set S are instances of a general class of structures known as binary space partition (BSP) trees [16] (see also <ref> [27] </ref>). Each node in a BSP tree T represents both a convex region in space and all of the points of S lying inside this region. Each leaf node in T represents a region with a constant number of points of S inside it. <p> This unbounded aspect ratio property of k-d trees results in worst-case running times for most searching problems, such as nearest-neighbor searching, that are (n) even for approximation versions. Another well-known class of search structures, known as quadtrees <ref> [15, 25, 27] </ref> and octrees [3, 10, 18, 26], are based on the alternate approach of using axis-parallel hyperplanes to divide region volumes equally.
Reference: [28] <author> E. Torres. </author> <title> Optimization of the binary space partition algorithm (BSP) for the visualization of dynamic scenes. </title> <booktitle> In Eurographics '90, </booktitle> <pages> pages 507-518. </pages> <publisher> North-Holland, </publisher> <year> 1990. </year> <month> R-1 </month>
Reference-contexts: by ARO under grant DAAH04-96-1-0013. y This research partially supported by NSF under Grant CCR-9625289, and ARO under grant DAAH04-96-1-0013. z This research partially supported by ARO under grant DAAH04-96-1-0013. 1 We will view d as a constant relative to n throughout this paper. to solve problems in computer graphics <ref> [11, 23, 24, 28] </ref>, such as global illumination, shadow generation, ray casting, and visibility. They are also used in information retrieval for finding nearest neighbors, farthest neighbors, and performing range queries.
References-found: 28

