URL: http://ftp.cs.yale.edu/pub/ghosh/spaa96_conf_procs.ps.gz
Refering-URL: http://ftp.cs.yale.edu/pub/ghosh/
Root-URL: http://www.cs.yale.edu
Title: First and second order diffusive methods for rapid, coarse, distributed load balancing (Extended Abstract)  
Author: Bhaskar Ghosh S. Muthukrishnan Martin H. Schultz 
Address: Drive, Bldg. 4600 Menlo Park, CA  
Note: ghosh@informix.com, Informix Software, Inc. 4100 Bohan-non  94025. Major part of this work was done when the author was at the  with support from ONR under grant number 4-91-J-1576 and a Yale/IBM joint study. muthu@dcs.warwick.ac.uk; Supported by ALCOM-IT. Work partly done at DIMACS (Center for Discrete Mathematics and Theoretical Computer Science), a National Science Foundation Science and Technology Center under NSF contract STC-8809648. schultz@cs.yale.edu; Supported by ONR under grant number 4-91-J-1576 and a Yale/IBM joint study.  
Affiliation: Informix Software Inc. U. Warwick Yale U.  Department of Computer Science, Yale University  
Abstract: We consider the following general problem modeling load balancing in a variety of distributed settings. Given an arbitrary undirected connected graph G = (V; E) and a weight distribution w 0 on the nodes, determine a schedule to move weights in each step across edges so as to (approximately) balance the weights on the nodes. We focus on diffusive schedules for this problem. All previously studied diffusive schedules can be modeled as w t+1 = M w t where w t is the weight distribution after the tth step and M is a doubly stochastic matrix. We call these the first order schedules. First order schedules, although widely used in practice, have a serious drawback that they are very slow. In this paper, we introduce a new direction in diffusive schedules by considering schedules that are modeled as: w 1 = M w 0 ; w t+1 = fiM w t +(1fi)w t1 for some appropriate fi; we call these the second order schedules. In the idealized setting of weights being real numbers, we adopt known results to show that fi can be chosen so that the second order schedule is significantly (an order of magnitude) faster than the first order method. In the realistic setting when the weights are positive integers, we simulate the idealized schedules by maintaining I Owe You units on the edges. Extensive experiments with simulated data and real-life data from JOSTLE, a mesh partitioning software, show that the resultant realistic schedule is close to the idealized schedule, and is again significantly faster than the first order schedules. The outcome is, therefore, an algorithm that performs coarse load balancing rapidly and can be as such used in a number of applications. 
Abstract-found: 1
Intro-found: 1
Reference: [A94] <author> O. Axelsson. </author> <title> Iterative Solution Methods. </title> <publisher> Cambridge University Press, </publisher> <year> 1994. </year>
Reference: [AA+93] <author> W. Aiello, B. Awerbuch, B. Maggs, and S. Rao. </author> <title> Approximate Load Balancing on Dynamic and Asynchronous Networks. </title> <booktitle> Proc. of 25th ACM Symp on Theory of Comput--ing, </booktitle> <pages> 632-641, </pages> <year> 1993. </year>
Reference: [BB+93] <author> R. Barrett, M. Berry, T. Chan, J. Demmel, J. Donato, J. Dongarra, V. Eijkhout, R. Pozo, C. Romine, H. van der Vorst. </author> <title> Templates for the solution of linear systems: Building blocks for iterative methods, </title> <publisher> SIAM, </publisher> <address> Philadelphia, Penn, </address> <year> 1993. </year> <note> http://netlib2.cs.utk.edu /linalg/html templates/Templates.html. </note>
Reference-contexts: We omit all the details involved deriving the above from the well known Chebyshev iterative methods <ref> [BB+93, HY81, Var62] </ref>. These methods are known to be "equivalent" to keeping all weight vectors preceding the current iteration in memory and mini-max opti mization of a residual norm based on all that memory.
Reference: [Boi90] <author> J. E. Boillat. </author> <title> Load balancing and poisson equation in a graph. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 2(4) </volume> <pages> 289-313, </pages> <year> 1990. </year>
Reference: [Bo+91] <author> J. Boillat, F. Bruge and P. Kropf. </author> <title> A dynamic load balancing algorithm for molecular dynamics simulation on multiprocessor systems J. </title> <journal> Comp. Physics, </journal> <volume> 96:1, </volume> <pages> 1-14, </pages> <year> 1991. </year>
Reference: [Cyb89] <author> G. Cybenko. </author> <title> Dynamic Load Balancing for Distributed Memory Multiprocessors. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 7(2) </volume> <pages> 279-301, </pages> <year> 1989. </year>
Reference: [FLD93] <author> R. Ferraro, P. Liewer and V. Decyk. </author> <title> Dynamic Load Balancing for a 2D Concurrent Plasma PIC Code. </title> <journal> Journal of Comp. Physics, </journal> <volume> 109:2, </volume> <pages> 329-340, </pages> <year> 1993. </year>
Reference: [GH89] <author> B. Goldberg and P. Hudak. </author> <title> Implementing Functional Programs on a Hypercube Multiprocessor. </title> <booktitle> Proc of the 4th Conf. on Hypercubes, Concurrent Computers, and Applications, </booktitle> <volume> Vol 1, </volume> <pages> 489-503, </pages> <year> 1989. </year>
Reference: [Hei95] <author> A. Heirich. </author> <title> Load Balancing and Mapping by Diffusion. </title> <type> Technical Report, </type> <institution> Center for Advanced Computing Research, Caltech, </institution> <year> 1995. </year> <note> http://www.cs.caltech.edu / ~ heirich/heirich.html. </note>
Reference: [GLM + 95] <author> B. Ghosh, F. T. Leighton, B. M. Maggs, S. Muthukr-ishnan, C. G. Plaxton, R. Rajaraman, A. Richa, R. E. Tar-jan, and D. Zuckerman. </author> <title> Tight analyses of two local load balancing algorithms. </title> <booktitle> Proc. of the 27th Ann. ACM Symp. on the Theory of Computing, </booktitle> <pages> 548-558, </pages> <year> 1995. </year>
Reference: [GM94] <author> B. Ghosh and S. Muthukrishnan. </author> <title> Dynamic Load Balancing on Parallel and Distributed Networks by Random Match-ings. </title> <booktitle> Proc. of 6th Ann. ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <pages> 226-235, </pages> <year> 1994. </year>
Reference: [Gol88] <author> B. Goldberg. </author> <title> Multiprocessor Execution of Functional Programs. </title> <type> PhD thesis, </type> <institution> Dept of Computer Science, Yale University, </institution> <year> 1988. </year>
Reference: [GV61] <author> G. H. Golub and R. Varga. </author> <title> Chebyshev semi-iterative methods, successive overrelaxation iterative methods and second order Richardson iterative methods, part I. </title> <journal> Nu-merische Mathematik, </journal> <volume> 3 </volume> <pages> 147-156, </pages> <year> 1961. </year>
Reference: [H94] <author> A Heirich. </author> <title> Scalable load balancing by diffusion. </title> <type> Technical Report Caltech-CS-TR-94-04, </type> <month> Feb </month> <year> 1994. </year>
Reference: [HL + 90] <author> S.H. Hosseini, B. Litow, M. Malkawi, J. McPherson, and K. Vairavan. </author> <title> Analysis of a graph coloring based distributed load balancing algorithm. </title> <journal> J. of Parallel and Distributed Computing, </journal> <volume> 10 </volume> <pages> 160-166, </pages> <year> 1990. </year>
Reference: [Hor93] <author> G. Horton. </author> <title> A multi-level diffusion method for dynamic load balancing. </title> <journal> Parallel Computing, </journal> <volume> 19 </volume> <pages> 209-218, </pages> <year> 1993. </year>
Reference: [HT93] <author> A Heirich and S Taylor. </author> <title> A parabolic theory of load balancing. </title> <type> Technical Report Caltech-CS-TR-93-25, </type> <year> 1995. </year>
Reference: [HY81] <author> L. A. Hageman and D. M. Young. </author> <title> Applied Iterative Methods. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1981. </year>
Reference-contexts: We omit all the details involved deriving the above from the well known Chebyshev iterative methods <ref> [BB+93, HY81, Var62] </ref>. These methods are known to be "equivalent" to keeping all weight vectors preceding the current iteration in memory and mini-max opti mization of a residual norm based on all that memory.
Reference: [Kal88] <author> L. Kale. </author> <title> Comparing the performance of two dynamic load distribution methods. </title> <booktitle> Proc. of ICCP, </booktitle> <month> August </month> <year> 1988. </year>
Reference-contexts: Here we describe our experiments and some of our observations. Various FOSs have already been studied in detail experimentally <ref> [Kal88, LMR91, Wil91, XML95] </ref> although, here too, we have been able to make a novel observation. Input sets. We used data from real life applications as well as synthetic data.
Reference: [LK87] <author> F. C. H. Lin and R. M. Keller. </author> <title> The gradient model load balancing method. </title> <journal> IEEE Trans. on Software Engg, </journal> <volume> 13(1) </volume> <pages> 32-38, </pages> <year> 1987. </year>

Reference: [JOS95] <author> JOSTLE: </author> <title> A mesh partitioning software. </title> <note> See http://www.gre.ac.uk/~c.walshaw/jostle. </note>
Reference: [Sch94] <author> J. R. Schewchuk. </author> <title> An Introduction to the Conjugate Gradient Method Without Agonizing Pain. </title> <type> Technical Report, </type> <address> CMU, Pittsburgh, </address> <year> 1994. </year>
Reference: [SKS92] <author> N. G.Shivaratri, P. Krueger, and M. Singhal. </author> <title> Load distributing for locally distributed systems. </title> <journal> IEEE Computer, </journal> <volume> 12(25) </volume> <pages> 33-44, </pages> <year> 1992. </year>
Reference: [So94] <author> J. Song. </author> <title> A Partially Asynchronous and Iterative Algorithm for Distributed Load Balancing. </title> <journal> Parallel Computing, </journal> <volume> 20 </volume> <pages> 853-868, </pages> <year> 1994. </year>
Reference: [Var62] <author> R. Varga. </author> <title> Matrix Iterative Analysis. </title> <publisher> Prentice-Hall, </publisher> <address> En-glewood Cliffs, NJ, </address> <year> 1962. </year>
Reference-contexts: We omit all the details involved deriving the above from the well known Chebyshev iterative methods <ref> [BB+93, HY81, Var62] </ref>. These methods are known to be "equivalent" to keeping all weight vectors preceding the current iteration in memory and mini-max opti mization of a residual norm based on all that memory.
Reference: [Wal95] <author> Chris Walshaw. </author> <type> Personal email communication, </type> <month> May </month> <year> 1995. </year>
Reference: [WCE95] <author> C. Walshaw, M. Cross, and M. Everett. </author> <title> A parallelis-able algorithm for optimizing unstructured mesh partitions. </title> <type> Tech. Rep. </type> <institution> 95/IM/03, Univ. of Greenwich, UK, </institution> <year> 1995. </year>
Reference-contexts: Synthetic data consisted of Random (0; a) (random integer between 0 and a) or Spike (a; 0) (one node has weight a and others have 0's) on standard topolgies like arrays, 2D meshes and hy-percubes. Real inputs were generated by the JOSTLE mesh partitioning package <ref> [WCE95] </ref> running on public-domain finite-element meshes for computational fluid dynamics.
Reference: [Wil91] <author> R. D. Williams. </author> <title> Performance of dynamic load balancing algorithms for unstructured mesh calculations. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 3(5) </volume> <pages> 457-481, </pages> <year> 1991. </year>
Reference-contexts: Here we describe our experiments and some of our observations. Various FOSs have already been studied in detail experimentally <ref> [Kal88, LMR91, Wil91, XML95] </ref> although, here too, we have been able to make a novel observation. Input sets. We used data from real life applications as well as synthetic data.

References-found: 28

