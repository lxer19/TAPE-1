URL: http://sctest.cse.ucsc.edu/papers/1997/itc97.ps
Refering-URL: http://www.cse.ucsc.edu/~larrabee/publications.html
Root-URL: http://www.cse.ucsc.edu
Title: Bridging Fault Diagnosis in the Absence of Physical Information  
Author: David B. Lavo Brian Chess Tracy Larrabee F. Joel Ferguson Jayashree Saxena Kenneth M. Butler 
Address: Santa Cruz, CA 95064  Palo Alto, CA 94306 Texas Instruments Inc. P.O. Box 660199 MS 8645 Dallas, TX 75266-0199  
Affiliation: Computer Engineering University of California  Hewlett-Packard Corp. Integrated Circuit Business Div.  
Abstract: number of bridging faults to a handful of candidates. A preliminary step can reduce the O(n 2 ) candidates to a manageable O(n) candidates by using layout information to eliminate those bridging faults that are very unlikely to be shorted together. This step removes from consideration those faults that match the fault signature but are physically impossible. However, sometimes|perhaps due to issues of intellectual property or because the degree of information stored about a circuit changes over its lifecycle|the physical design of the circuit is not available, and the number of nodes is too large to explicitly consider all pairs. In this paper we present two ways to provide successful diagnoses without access to physical information. The second method produces optimal diagnoses under our ranking criteria. Either technique can be used in conjunction with information extracted from the physical design to allow for diagnoses of much larger circuits than previously possible. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. M. Acken and S. D. Millman. </author> <title> Fault model evolution for diagnosis: Accuracy vs precision. </title> <booktitle> Proceedings of the Custom Integrated Circuits Conference, </booktitle> <pages> pages 13.4.1-13.4.4, </pages> <year> 1992. </year> <month> 6 </month>
Reference-contexts: These trials simulated and diagnosed the top 10% of realistic bridging faults (from 160 for the C432 to 5379 for the C7552). Carafe [12] identified the most likely bridging faults, and our fault simulator, Nemesis, simulated them (taking into account the Byzantine Generals Problem for bridging faults <ref> [1] </ref>). We then ran these simulated bridging fault behaviors through a standard stuck-at fault diagnosis procedure. Different weightings of misprediction and nonprediction penalties were used; Table 1 reports the results from the most successful|equal weight-ings.
Reference: [2] <author> R. C. Aitken and P. C. Maxwell. </author> <title> Better models or better algorithms? on techniques to improve fault diagnosis. </title> <journal> Hewlett-Packard Journal, </journal> <pages> pages 110-116, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: The second approach uses the physical design of the circuit to eliminate bridging faults between lines that are extremely unlikely to be shorted together due to the physical location of the nodes comprising the bridging fault <ref> [2, 8] </ref>. If the two nodes are never closer than some minimum distance, or if there is another node separating them that would also be involved in the bridge, then that bridging fault is not consid ered [12].
Reference: [3] <author> C. C. Beh, K.H. Arya, C. E. Radke, and K. E. Torku. </author> <booktitle> Do stuck fault models reflect manufacturing defects? In Proceedings of International Test Conference, </booktitle> <pages> pages 35-42. </pages> <publisher> IEEE, </publisher> <year> 1982. </year>
Reference-contexts: However, it has been shown repeatedly that the stuck-at fault model does not accurately reflect the behavior of current-generation silicon defects <ref> [3, 9-11, 14-17] </ref>. While a more realistic fault model provides better diagnoses, a bridging fault diagnosis algorithm that uses the stuck-at fault model as a foun dation does not require a sacrifice of performance or a change in existing design flows.
Reference: [4] <author> F. Brglez and H. Fujiwara. </author> <title> A neutral netlist of 10 combinational benchmark circuits and a target translator in fortran. </title> <booktitle> In Proceedings of the IEEE International Symposium on Circuits and Systems, </booktitle> <year> 1985. </year>
Reference-contexts: Knowing one involved node in a bridging fault reduces the search space: given a set of d candidates for the first node, only dn candidates need be considered. We ran a set of experiments on the ISCAS-85 <ref> [4] </ref> circuits to verify the efficacy of stuck-at diagnosis in identifying one of a pair of bridged nodes. These trials simulated and diagnosed the top 10% of realistic bridging faults (from 160 for the C432 to 5379 for the C7552).
Reference: [5] <author> S. Chakravarty and Y. Gong. </author> <title> An algorithm for diagnosing two-line bridging faults in combinational circuits. </title> <booktitle> Proceedings of Design Automation Conference, </booktitle> <pages> pages 520-524, </pages> <year> 1993. </year>
Reference-contexts: Building an n -sized fault dictionary is prohibitively expensive, so this line of research has focused on algorithms that continuously eliminate large portions of the candidate space based on the observed fault signature (without building a dictionary) <ref> [5, 6] </ref>. Once a bridging fault is removed from the candidate space it is no longer considered. A major weakness of this approach is that if the bridging fault's behavior is not well-characterized, it is likely to be removed from the diagnosis. <p> While a more realistic fault model provides better diagnoses, a bridging fault diagnosis algorithm that uses the stuck-at fault model as a foun dation does not require a sacrifice of performance or a change in existing design flows. The use of stuck-at fault information to perform bridging fault diagnosis <ref> [5, 8, 13, 14] </ref> is based on a somewhat simplified view of bridging fault behavior: In order for a bridging fault to be detected, the two bridged nodes must have opposite values in the fault-free circuit, but in the presence of the fault both bridged nodes will have the same value
Reference: [6] <author> S. Chakravarty and M. Liu. </author> <title> Algorithms for IDDQ measurement based diagnosis of bridging faults. </title> <journal> Journal of Electronic Testing: Theory and Applications, </journal> <volume> 3(4) </volume> <pages> 377-386, </pages> <month> December </month> <year> 1992. </year>
Reference-contexts: Building an n -sized fault dictionary is prohibitively expensive, so this line of research has focused on algorithms that continuously eliminate large portions of the candidate space based on the observed fault signature (without building a dictionary) <ref> [5, 6] </ref>. Once a bridging fault is removed from the candidate space it is no longer considered. A major weakness of this approach is that if the bridging fault's behavior is not well-characterized, it is likely to be removed from the diagnosis.
Reference: [7] <author> S. Chakravarty and P. J. Thadikaran. </author> <title> Which set of bridging faults should test compilers target? Technical report, </title> <institution> Department of Computer Science, SUNY Buffalo, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: A cir cuit with n nodes has n possible bridging faults; explicit consideration of all such faults is infeasible. There have been two approaches to this candidate-space problem: the first approach assumes that all n possible bridging faults for a circuit need to be con sidered <ref> [7] </ref>. Building an n -sized fault dictionary is prohibitively expensive, so this line of research has focused on algorithms that continuously eliminate large portions of the candidate space based on the observed fault signature (without building a dictionary) [5, 6].
Reference: [8] <author> B. Chess, D. B. Lavo, F. J. Ferguson, and T. Larrabee. </author> <title> Diagnosis of realistic bridging faults with single stuck-at information. </title> <booktitle> In Proceedings of International Conference on Computer-Aided Design, </booktitle> <pages> pages 185-192. </pages> <publisher> IEEE, </publisher> <year> 1995. </year>
Reference-contexts: The second approach uses the physical design of the circuit to eliminate bridging faults between lines that are extremely unlikely to be shorted together due to the physical location of the nodes comprising the bridging fault <ref> [2, 8] </ref>. If the two nodes are never closer than some minimum distance, or if there is another node separating them that would also be involved in the bridge, then that bridging fault is not consid ered [12]. <p> While a more realistic fault model provides better diagnoses, a bridging fault diagnosis algorithm that uses the stuck-at fault model as a foun dation does not require a sacrifice of performance or a change in existing design flows. The use of stuck-at fault information to perform bridging fault diagnosis <ref> [5, 8, 13, 14] </ref> is based on a somewhat simplified view of bridging fault behavior: In order for a bridging fault to be detected, the two bridged nodes must have opposite values in the fault-free circuit, but in the presence of the fault both bridged nodes will have the same value <p> This means that any vector that detects a bridging fault will detect one of the four stuck-at faults associated with the two nodes. Stanford [14] and UCSC <ref> [8] </ref> have produced bridging fault diagnosis methods where the signatures for all four associated stuck-at faults are concatenated: the bridging fault signature must be included in the resulting composite signature. Figure 1 shows how a candidate fault behavior is compared against an observed faulty behavior. <p> It then compares the composite bridging fault signature created for each pair to 1 It is interesting to note that the second node in the bridg ing fault is rarely included in the diagnosis <ref> [8] </ref>. 2 Circuit % Success C432 98.1 C880 98.8 C1908 92.1 C3540 99.5 C6288 88.4 Table 1: Stuck-at diagnosis on bridging fault behaviors (d=10): percentage of diagnoses where at least one of the nodes is in the diagnosis. the observed behavior, and the top-scoring D bridging fault candidates make up the <p> Since only the top d nodes are paired, bridging faults that do not involve one of these nodes will not be consid ered. Table 2 first reports the result of running our diagnosis software <ref> [8, 13] </ref> using a realistic fault list: it gives the number of realistic bridging faults in the candidate fault list, and the percentage of successful diagnoses of size 10 using the realistic candidate list.
Reference: [9] <author> F. J. Ferguson and J. P. Shen. </author> <title> Extraction and simulation of realistic CMOS faults with inductive fault analysis. </title> <booktitle> In Proceedings of International Test Conference, </booktitle> <pages> pages 475-484. </pages> <publisher> IEEE, </publisher> <year> 1988. </year>
Reference-contexts: The expense of manual search makes it crucial for automated diagnosis tools to pinpoint the location of a defect to only a few locations. Because bridging faults are believed to be a common defect type <ref> [9, 16] </ref>, bridging fault diagnosis is crucial to manufacturing diagnosis and debug. A cir cuit with n nodes has n possible bridging faults; explicit consideration of all such faults is infeasible.
Reference: [10] <author> J. Galiay, Y. Crouzet, and M. Vergniault. </author> <title> Physical versus logical fault models in MOS LSI circuits: Impact on their testability. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-29(6):527-531, </volume> <month> June </month> <year> 1980. </year>
Reference: [11] <author> C. F. Hawkins, J. M. Doen, A. W. Righter, and F. J. Ferguson. </author> <title> Defect classes|an overdue paradigm for CMOS IC testing. </title> <booktitle> In Proceedings of International Test Conference, </booktitle> <pages> pages 413-425. </pages> <publisher> IEEE, </publisher> <year> 1994. </year>
Reference: [12] <author> A. Jee and F. J. Ferguson. Carafe: </author> <title> An inductive fault analysis tool for CMOS VLSI circuits. </title> <booktitle> In Proceedings of the IEEE VLSI Test Symposium, </booktitle> <pages> pages 92-98, </pages> <year> 1993. </year>
Reference-contexts: If the two nodes are never closer than some minimum distance, or if there is another node separating them that would also be involved in the bridge, then that bridging fault is not consid ered <ref> [12] </ref>. Errors in understanding and predicting the bridging fault behavior are tolerated by finding the best match to the observed signature. An opportunity arose for the UCSC physical design-based diagnosis software to be tested on Texas Instruments chips. <p> These trials simulated and diagnosed the top 10% of realistic bridging faults (from 160 for the C432 to 5379 for the C7552). Carafe <ref> [12] </ref> identified the most likely bridging faults, and our fault simulator, Nemesis, simulated them (taking into account the Byzantine Generals Problem for bridging faults [1]). We then ran these simulated bridging fault behaviors through a standard stuck-at fault diagnosis procedure.
Reference: [13] <author> D. B. Lavo, T. Larrabee, and B. </author> <title> Chess. Beyond the Byzantine Generals: Unexpected behavior and bridging fault diagnosis. </title> <booktitle> In Proceedings of International Test Conference, </booktitle> <pages> pages 611-619. </pages> <publisher> IEEE, </publisher> <year> 1996. </year>
Reference-contexts: While a more realistic fault model provides better diagnoses, a bridging fault diagnosis algorithm that uses the stuck-at fault model as a foun dation does not require a sacrifice of performance or a change in existing design flows. The use of stuck-at fault information to perform bridging fault diagnosis <ref> [5, 8, 13, 14] </ref> is based on a somewhat simplified view of bridging fault behavior: In order for a bridging fault to be detected, the two bridged nodes must have opposite values in the fault-free circuit, but in the presence of the fault both bridged nodes will have the same value <p> Since only the top d nodes are paired, bridging faults that do not involve one of these nodes will not be consid ered. Table 2 first reports the result of running our diagnosis software <ref> [8, 13] </ref> using a realistic fault list: it gives the number of realistic bridging faults in the candidate fault list, and the percentage of successful diagnoses of size 10 using the realistic candidate list. <p> Because we know that composite bridging fault signatures are constructed with deliberate over-prediction, we consider containment, or intersection with the observed behavior, to be the primary indicator of candidate goodness; the best candidate is the one with the greatest intersection <ref> [13] </ref>. In the case of intersection ties, we consider the number of required vectors matched and the amount of misprediction, in that order.
Reference: [14] <author> S. D. Millman, E. J. McCluskey, and J. M. Acken. </author> <title> Diagnosing CMOS bridging faults with stuck-at fault dictionaries. </title> <booktitle> In Proceedings of International Test Conference, </booktitle> <pages> pages 860-870. </pages> <publisher> IEEE, </publisher> <year> 1990. </year>
Reference-contexts: While a more realistic fault model provides better diagnoses, a bridging fault diagnosis algorithm that uses the stuck-at fault model as a foun dation does not require a sacrifice of performance or a change in existing design flows. The use of stuck-at fault information to perform bridging fault diagnosis <ref> [5, 8, 13, 14] </ref> is based on a somewhat simplified view of bridging fault behavior: In order for a bridging fault to be detected, the two bridged nodes must have opposite values in the fault-free circuit, but in the presence of the fault both bridged nodes will have the same value <p> This means that any vector that detects a bridging fault will detect one of the four stuck-at faults associated with the two nodes. Stanford <ref> [14] </ref> and UCSC [8] have produced bridging fault diagnosis methods where the signatures for all four associated stuck-at faults are concatenated: the bridging fault signature must be included in the resulting composite signature. Figure 1 shows how a candidate fault behavior is compared against an observed faulty behavior.
Reference: [15] <author> V. V. Nickel. </author> <title> VLSI|the inadequacy of the stuck at fault model. </title> <booktitle> In Proceedings of International Test Conference, </booktitle> <pages> pages 527-531. </pages> <publisher> IEEE, </publisher> <year> 1980. </year>
Reference: [16] <author> J. P. Shen, W. Maly, and F. J. Ferguson. </author> <title> Inductive fault analysis of MOS integrated circuits. </title> <journal> IEEE Design and Test of Computers, </journal> <volume> 2(6) </volume> <pages> 13-26, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: The expense of manual search makes it crucial for automated diagnosis tools to pinpoint the location of a defect to only a few locations. Because bridging faults are believed to be a common defect type <ref> [9, 16] </ref>, bridging fault diagnosis is crucial to manufacturing diagnosis and debug. A cir cuit with n nodes has n possible bridging faults; explicit consideration of all such faults is infeasible.
Reference: [17] <author> R. L. Wadsack. </author> <title> Fault modeling and logic simulation of CMOS and MOS integrated circuits. </title> <journal> Bell System Technical Journal, </journal> <volume> 57(5) </volume> <pages> 1449-1474, </pages> <month> May-June </month> <year> 1978. </year> <month> 7 </month>
References-found: 17

