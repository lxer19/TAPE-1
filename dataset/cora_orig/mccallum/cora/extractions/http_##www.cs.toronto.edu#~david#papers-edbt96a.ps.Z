URL: http://www.cs.toronto.edu/~david/papers-edbt96a.ps.Z
Refering-URL: http://www.cs.toronto.edu/~david/papers.html
Root-URL: 
Title: First-Order Queries over Temporal Databases Inexpressible in Temporal Logic  
Author: David Toman and Damian Niwinski 
Address: Toronto, Ontario M5S 1A4, Canada  Banacha 2, 00-950 Warsaw, Poland  
Affiliation: Department of Computer Science, University of Toronto  Institute of Informatics, Warsaw University  
Abstract: Queries over temporal databases involve references to time. We study differences between two approaches of including such references into a first-order query language (e.g., relational calculus): explicit (using typed variables and quantifiers) vs. implicit (using a finite set of modal connectives). We also show that though the latter approach|a first-order query language with implicit references to time|is appealing by its simplicity and ease of use, it cannot express all queries expressible using the first one in general. This result also settles a longstanding open problem about the expressive power of first-order temporal logic. A consequence of this result is that there is no first-order complete query language subquery-closed with respect to a uniform database schema, and thus we cannot use temporal relational algebra over uniform relations to evaluate all first-order definable queries.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Abiteboul, S., Herr, L., Van den Bussche, J. </author> <title> Temporal Connectives versus Explicit Timestamps in Temporal Query Languages. </title> <type> (unpublished manuscript). </type>
Reference-contexts: Definition 2.8). The semantics is also defined in the same way as in Definition 2.10 with a small "fix" to the base case: Embed (r i (x 1 ; : : : ; x v i )) = R i (t 0 <ref> [1] </ref>; x 1 ; : : : ; x v i ): The game for k-dimensional temporal logic is similar to the game for FOTL. The only difference is that for every temporal move we always pick k-tuples of elements of sort T instead of a single element. <p> Such sets cannot be represented over the data domain (as the theory of equality can finitely encode only finite and cofinite sets. A recent result <ref> [1] </ref> that separates FOTL with the since and until connectives from 2-FOL in the case of finite (sufficiently large) linear orders supports our conjecture. However [1] uses a counting argument in the proof and thus it does not generalize to arbitrary linear orders. <p> A recent result <ref> [1] </ref> that separates FOTL with the since and until connectives from 2-FOL in the case of finite (sufficiently large) linear orders supports our conjecture. However [1] uses a counting argument in the proof and thus it does not generalize to arbitrary linear orders. Also, the relationship between this work and various sets of temporal connectives defined in [13] is not clear.
Reference: 2. <author> Chomicki J. </author> <title> Temporal Query Languages: a Survey. </title> <booktitle> Proc. International Conference on Temporal Logic, </booktitle> <address> July 1994, Bonn, Germany, </address> <publisher> Springer-Verlag (LNAI 827), </publisher> <pages> pp. 506-534. </pages>
Reference-contexts: This model can be naturally extended to a temporal relational database model by augmenting every relation symbol in the database schema by an additional attribute that holds the time instant at which the original tuple is true. This extension is formally introduced in <ref> [2] </ref> and can serve as a unifying platform for various alternative approaches to the definition of temporal databases [7]. Similarly to the standard relational case such temporal databases can be treated as model-theoretic structures, in this case two-sorted.
Reference: 3. <author> Chomicki J. </author> <title> Efficient Checking of Temporal Integrity Constraints Using Bounded History Encoding. </title> <journal> In ACM Transactions on Database Systems, </journal> <volume> (20) 2, </volume> <pages> pp. 149-186. </pages> <year> 1995. </year>
Reference-contexts: Despite this drawback, FOTL was used as a basis of temporal query languages [23] or for specification of temporal integrity constraints <ref> [3, 4, 5, 17] </ref>. The main reason for this choice is a simpler and more efficient implementation that does not generalize to full FOTL.
Reference: 4. <author> Chomicki, J.,N iwinski, D. </author> <title> On the Feasibility of Checking Temporal Integrity Constraints. </title> <booktitle> Proc. 12th ACM Symposium on Principles of Database Systems, </booktitle> <pages> pp 202-213, </pages> <year> 1993. </year> <title> (full version to appear in JCSS). 3 Note that all the databases used in our proofs are finitely representable. 4 I.e., its complement is infinite. </title>
Reference-contexts: Despite this drawback, FOTL was used as a basis of temporal query languages [23] or for specification of temporal integrity constraints <ref> [3, 4, 5, 17] </ref>. The main reason for this choice is a simpler and more efficient implementation that does not generalize to full FOTL.
Reference: 5. <author> Chomicki, J., Toman, D. </author> <title> Implementing Temporal Integrity Constraints Using an Active DBMS. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, Special section on Temporal and Real-time Databases, </journal> <volume> Vol. 7, No. 4, </volume> <year> 1995. </year>
Reference-contexts: Despite this drawback, FOTL was used as a basis of temporal query languages [23] or for specification of temporal integrity constraints <ref> [3, 4, 5, 17] </ref>. The main reason for this choice is a simpler and more efficient implementation that does not generalize to full FOTL.
Reference: 6. <author> Clifford J., Croker A. </author> <title> The Historical Relational Data Model (HRDM) and Algebra based on Lifespans. </title> <booktitle> In Proceedings of the International Conference on Data Engineering, </booktitle> <pages> pages 528-537, </pages> <address> Los Angeles, CA, </address> <month> February </month> <year> 1987. </year>
Reference-contexts: The first-order query languages can be divided into two main categories: 1. query languages based on a two-sorted version of relational calculus, e.g., TSQL2 [20] or TQUEL [19], and 2. query languages based on an extension of the relational calculus or algebra by temporal operators, e.g, HRDM's historical relational algebra <ref> [6] </ref>, temporal relational algebra [23], etc. These two approaches have been often considered equivalent in expressive power, e.g., in [23], where the temporal relational algebra based on an extension of the relational calculus by temporal operators has been proposed as a basis for first-order completeness of temporal query languages.
Reference: 7. <author> Clifford J., Croker A., Tuzhilin A. </author> <title> On Completeness of Historical Relational Query Languages. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 19, No. 1, </volume> <pages> pp. 64-116, </pages> <year> 1994. </year>
Reference-contexts: This extension is formally introduced in [2] and can serve as a unifying platform for various alternative approaches to the definition of temporal databases <ref> [7] </ref>. Similarly to the standard relational case such temporal databases can be treated as model-theoretic structures, in this case two-sorted.
Reference: 8. <author> Ehrenfeucht, A. </author> <title> An application of games to the completeness problem for formalized theories. </title> <journal> Fund. Math., </journal> <volume> 49 </volume> <pages> 129-141, </pages> <year> 1961. </year>
Reference-contexts: This is very natural as the restrictions are connected solely with the sort T . The following definitions give a precise definition of a combinatorial game, that captures the expressive power of FOTL (similarly to the game for First-order logic in <ref> [8, 9] </ref>): Definition 3.2 (Game for Temporal Logic) Let A and B be two t -structures, a = (a 1 ; : : : ; a k ) and b = (b 1 ; : : : ; b k ) sequences of A-elements and B-elements (respectively), and n 2 N
Reference: 9. <author> Fraisse, R. </author> <title> Sur les classifications des systemes de relations. </title> <type> Publ. </type> <institution> Sci. Univ. Alger , 1:1, </institution> <year> 1954. </year>
Reference-contexts: This is very natural as the restrictions are connected solely with the sort T . The following definitions give a precise definition of a combinatorial game, that captures the expressive power of FOTL (similarly to the game for First-order logic in <ref> [8, 9] </ref>): Definition 3.2 (Game for Temporal Logic) Let A and B be two t -structures, a = (a 1 ; : : : ; a k ) and b = (b 1 ; : : : ; b k ) sequences of A-elements and B-elements (respectively), and n 2 N
Reference: 10. <author> Gabbay D. </author> <title> Expressive Functional Completeness in Tense Logic. </title> <editor> In Monnich U. </editor> <booktitle> Aspects of Philosophical Logic, </booktitle> <pages> 91-117, </pages> <year> 1981. </year>
Reference-contexts: This result has been established by Kamp [15] for complete linear orders, later extended by Stavi [22] for all linear orders, and reproven several times using various proof techniques, e.g, <ref> [10, 14] </ref>. In this paper we show that this correspondence does not generalize to the relationship between the First-order Temporal Logic (FOTL) and the Two-sorted First-order Logic (2-FOL). <p> The definition of the temporal connectives is purely syntactical and depends only on the chosen temporal domain. The semantics of the connectives is defined by a translation to 2-FOL (cf. Definition 2.10). This approach differs from the usual definition of such connectives given in <ref> [10] </ref> or [11], that is based on the intended semantics and uses truth tables. <p> We show that for a standard choice of the data domain being the set of uninterpreted constants with equality and a standard choice of a linearly ordered temporal domain: the propositional temporal logic has an expressively complete set of temporal connectives <ref> [10, 14, 15, 22] </ref>, but there is no finite set of temporal connectives expressively complete in the first-order case.
Reference: 11. <author> Gabbay D. </author> <title> The Declarative Past and Imperative Future: Executable Temporal Logic for Interactive Systems. </title> <editor> In Banieqbal B., et al. (ed.) </editor> <booktitle> Temporal Logic in Specification, </booktitle> <volume> vol. 398, </volume> <publisher> pp.409-448, Springer Verlag, LNCS 398, </publisher> <year> 1989. </year>
Reference-contexts: The definition of the temporal connectives is purely syntactical and depends only on the chosen temporal domain. The semantics of the connectives is defined by a translation to 2-FOL (cf. Definition 2.10). This approach differs from the usual definition of such connectives given in [10] or <ref> [11] </ref>, that is based on the intended semantics and uses truth tables.
Reference: 12. <author> Gabbay D., Pnueli A., Shelah S., Stavi J. </author> <title> On the Temporal Analysis of Fairness. </title> <booktitle> Proc. ACM Symposium on Principles of Programming Languages, </booktitle> <year> 1980. </year>
Reference-contexts: In addition to the separation of FOTL from 2-FOL we show several other results, especially: 1. Expressive equivalence of the future temporal logic and the full temporal logic, i.e., with both future and past temporal connectives <ref> [12] </ref> does not generalize to the first-order case. 2. Expressive completeness cannot be achieved using more general temporal logic, e.g., the many-dimensional first-order temporal logic [13]. Note also that we restrict our attention solely to the first-order languages. <p> These two logics are expressively equivalent in the propositional case <ref> [12] </ref>. Lemma 5.1 Let (Q + ; &lt;; 0) be a dense linear order with a left endpoint (0). Let J Q + be a non-trivial open interval and f I m;n : I ! S m n [ f;g be dense over S m n .
Reference: 13. <author> Gabbay D., Hodkinson I., Reynolds M. </author> <title> Temporal Logic. </title> <journal> Mathematical Foundations and Computational Aspects. </journal> <volume> Vol. 1. </volume> <booktitle> Oxford Logic Guides 28, </booktitle> <publisher> Oxford Science Publications, </publisher> <year> 1994. </year>
Reference-contexts: Expressive equivalence of the future temporal logic and the full temporal logic, i.e., with both future and past temporal connectives [12] does not generalize to the first-order case. 2. Expressive completeness cannot be achieved using more general temporal logic, e.g., the many-dimensional first-order temporal logic <ref> [13] </ref>. Note also that we restrict our attention solely to the first-order languages. <p> Definition 2.6 If every quantification in a temporal connective ! 2 (fl) is of the form 9t i :((t 0 ; t i ) ^ O) then ! is a -restricted temporal connective. Example 2.7 We can express the usual temporal connectives given in <ref> [13] </ref> in the temporal signature h&lt;i of linear orders as follows: X 1 until X 2 4 2X 1 = 9t 1 :t 0 &lt; t 1 ^ X 1 4 Similarly we can express the past temporal connectives since, 3, and 1. <p> Fig. 2. A round of the game and the scopes of the temporal moves. logic formula still has one free variable of sort T that represents the initial temporal context (cf. the semantic definition of the temporal logic in section 2 or <ref> [13] </ref>). Besides the rules of the game itself we need to define the winning condition for the game for temporal logic. <p> Section 4). This is due to the limitation on the number of temporal contexts passed to the individual subformulas of a FOTL formula. In <ref> [13] </ref> many-dimensional propositional temporal logics are studied. These logics can be easily modified to many-dimensional first-order temporal logics (k-FOTL, where k is the dimension of the logic). The main idea behind this approach is to allow k temporal contexts in all the temporal (sub-)formulas. <p> However [1] uses a counting argument in the proof and thus it does not generalize to arbitrary linear orders. Also, the relationship between this work and various sets of temporal connectives defined in <ref> [13] </ref> is not clear.
Reference: 14. <author> Immerman N., Kozen D. </author> <title> Definability with Bounded Number of Variables. </title> <booktitle> Information and Computation 83, </booktitle> <address> pp.121-139, </address> <year> 1989. </year>
Reference-contexts: This result has been established by Kamp [15] for complete linear orders, later extended by Stavi [22] for all linear orders, and reproven several times using various proof techniques, e.g, <ref> [10, 14] </ref>. In this paper we show that this correspondence does not generalize to the relationship between the First-order Temporal Logic (FOTL) and the Two-sorted First-order Logic (2-FOL). <p> We show that for a standard choice of the data domain being the set of uninterpreted constants with equality and a standard choice of a linearly ordered temporal domain: the propositional temporal logic has an expressively complete set of temporal connectives <ref> [10, 14, 15, 22] </ref>, but there is no finite set of temporal connectives expressively complete in the first-order case. <p> Are there other (nontrivial) restrictions (especially on the temporal domain) that also guarantee both the closure and completeness? 7 Related Work The separation is proven using a modification of the Ehrenfeucht-Frasse Games to capture the properties of Temporal Logic. In <ref> [14] </ref> pebble games have been used to show expressivity results for the monadic logic over linear orders. However, our results and techniques are different, as we are interested in the first-order temporal logics (and the corresponding 2-FOL). The method introduced in [14] is no longer sufficient as it cannot handle unrestricted <p> In <ref> [14] </ref> pebble games have been used to show expressivity results for the monadic logic over linear orders. However, our results and techniques are different, as we are interested in the first-order temporal logics (and the corresponding 2-FOL). The method introduced in [14] is no longer sufficient as it cannot handle unrestricted quantification over the data sort. In [16] a restricted version of 2-FOTL was presented introducing the now connective that allows one to reset the temporal context of a subformula to the original evaluation point.
Reference: 15. <author> Kamp J.A.W. </author> <title> Tense Logic and the Theory of Linear Order. </title> <type> PhD thesis, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <year> 1968. </year>
Reference-contexts: Proposition 1.1 (Kamp's Theorem) Propositional temporal logic has an ex-pressively complete set of temporal connectives over linear orders. This means that the propositional temporal logic has the same expressive power as the monadic first-order logic over linear orders. This result has been established by Kamp <ref> [15] </ref> for complete linear orders, later extended by Stavi [22] for all linear orders, and reproven several times using various proof techniques, e.g, [10, 14]. <p> We show that for a standard choice of the data domain being the set of uninterpreted constants with equality and a standard choice of a linearly ordered temporal domain: the propositional temporal logic has an expressively complete set of temporal connectives <ref> [10, 14, 15, 22] </ref>, but there is no finite set of temporal connectives expressively complete in the first-order case.
Reference: 16. <author> Kamp J.A.W. </author> <title> On the Formal Properties of `now'. </title> <type> Theoria 37 </type> <pages> 227-273, </pages> <year> 1971. </year>
Reference-contexts: Also, from the previous results and <ref> [16] </ref>, we know that Future-FOTL ( FOTL ( FOTL (now) 2-FOTL On the other hand, the hierarchy of k-FOTL approximates 2-FOL: Theorem 5.4 Let be a 2-FOL formula. <p> However, our results and techniques are different, as we are interested in the first-order temporal logics (and the corresponding 2-FOL). The method introduced in [14] is no longer sufficient as it cannot handle unrestricted quantification over the data sort. In <ref> [16] </ref> a restricted version of 2-FOTL was presented introducing the now connective that allows one to reset the temporal context of a subformula to the original evaluation point. This logic was also shown to be strictly stronger than FOTL. However, the technique used in [16] does not apply to temporal databases|the <p> In <ref> [16] </ref> a restricted version of 2-FOTL was presented introducing the now connective that allows one to reset the temporal context of a subformula to the original evaluation point. This logic was also shown to be strictly stronger than FOTL. However, the technique used in [16] does not apply to temporal databases|the proof of the fact is carried out over first-order structures that cannot be finitely encoded as the contents of the database relation (s) is an infinite and coinfinite 4 at every time instant.
Reference: 17. <author> Lipeck U.W., Saake, G. </author> <title> Monitoring Dynamic Integrity Constraints Based on Temporal Logic. </title> <journal> Information Systems, </journal> <volume> 12(2) </volume> <pages> 255-269, </pages> <year> 1987. </year>
Reference-contexts: Despite this drawback, FOTL was used as a basis of temporal query languages [23] or for specification of temporal integrity constraints <ref> [3, 4, 5, 17] </ref>. The main reason for this choice is a simpler and more efficient implementation that does not generalize to full FOTL.
Reference: 18. <author> Rosenstein J.G. </author> <title> Linear Orderings. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1982. </year>
Reference-contexts: Theorem 3.10). Except for the additional rules, the game for temporal logic is the same as the Ehrenfeucht-Frasse game for first-order logic <ref> [18] </ref>. The first rule enforces the sort compatibility of the individual moves in the game|this is a natural requirement for the many-sorted structures (we can assume that the relations are empty if the arguments do not match the required sorts).
Reference: 19. <author> Snodgrass R. T. </author> <title> The Temporal Query Language TQuel. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 12(2) </volume> <pages> 247-298, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: 1 Introduction In the last several years, various languages for querying temporal databases have been proposed in the literature. The first-order query languages can be divided into two main categories: 1. query languages based on a two-sorted version of relational calculus, e.g., TSQL2 [20] or TQUEL <ref> [19] </ref>, and 2. query languages based on an extension of the relational calculus or algebra by temporal operators, e.g, HRDM's historical relational algebra [6], temporal relational algebra [23], etc.
Reference: 20. <author> Snodgrass R.T., </author> <title> editor. The TSQL2 Temporal Query Language. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> 674+xxiv pages, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction In the last several years, various languages for querying temporal databases have been proposed in the literature. The first-order query languages can be divided into two main categories: 1. query languages based on a two-sorted version of relational calculus, e.g., TSQL2 <ref> [20] </ref> or TQUEL [19], and 2. query languages based on an extension of the relational calculus or algebra by temporal operators, e.g, HRDM's historical relational algebra [6], temporal relational algebra [23], etc.
Reference: 21. <author> Tansel A., Clifford J., Gadia S., Jajodia S., Segev A., Snodgrass R. </author> <title> Temporal Databases. Theory, Design, and Implementation. </title> <publisher> Benjamin Cummings 1993. </publisher>
Reference-contexts: The main reason for this choice is a simpler and more efficient implementation that does not generalize to full FOTL. The design of an expressively complete Temporal Relational Algebra requires an unbounded number of temporal attributes in the relations to guarantee completeness and preserve closure of products <ref> [21] </ref>. However, such solution does not allow to store the intermediate results needed to evaluate the query in a uniform temporal database as auxiliary relations. In addition to the separation of FOTL from 2-FOL we show several other results, especially: 1. <p> This is a natural restriction imposed on virtually all practical temporal databases <ref> [21] </ref>, e.g., on the timestamp relations in TSQL2 or TQUEL. The rest of the paper is organized as follows: Section 2 introduces the formal definition of the temporal database and first-order temporal query languages over such databases.
Reference: 22. <author> Stavi J. </author> <title> Functional Completeness over Rationals. </title> <type> Unpublished, </type> <institution> Bar-Ilan University, Ramat-Gan, Israel, </institution> <year> 1979. </year>
Reference-contexts: This means that the propositional temporal logic has the same expressive power as the monadic first-order logic over linear orders. This result has been established by Kamp [15] for complete linear orders, later extended by Stavi <ref> [22] </ref> for all linear orders, and reproven several times using various proof techniques, e.g, [10, 14]. In this paper we show that this correspondence does not generalize to the relationship between the First-order Temporal Logic (FOTL) and the Two-sorted First-order Logic (2-FOL). <p> We show that for a standard choice of the data domain being the set of uninterpreted constants with equality and a standard choice of a linearly ordered temporal domain: the propositional temporal logic has an expressively complete set of temporal connectives <ref> [10, 14, 15, 22] </ref>, but there is no finite set of temporal connectives expressively complete in the first-order case.
Reference: 23. <author> Tuzhilin A., Clifford J. </author> <title> A Temporal Relational Algebra as a Basis for Temporal Completeness. </title> <booktitle> Proc. International Conference on VLDB, </booktitle> <year> 1990. </year>
Reference-contexts: can be divided into two main categories: 1. query languages based on a two-sorted version of relational calculus, e.g., TSQL2 [20] or TQUEL [19], and 2. query languages based on an extension of the relational calculus or algebra by temporal operators, e.g, HRDM's historical relational algebra [6], temporal relational algebra <ref> [23] </ref>, etc. These two approaches have been often considered equivalent in expressive power, e.g., in [23], where the temporal relational algebra based on an extension of the relational calculus by temporal operators has been proposed as a basis for first-order completeness of temporal query languages. <p> of relational calculus, e.g., TSQL2 [20] or TQUEL [19], and 2. query languages based on an extension of the relational calculus or algebra by temporal operators, e.g, HRDM's historical relational algebra [6], temporal relational algebra <ref> [23] </ref>, etc. These two approaches have been often considered equivalent in expressive power, e.g., in [23], where the temporal relational algebra based on an extension of the relational calculus by temporal operators has been proposed as a basis for first-order completeness of temporal query languages. <p> Despite this drawback, FOTL was used as a basis of temporal query languages <ref> [23] </ref> or for specification of temporal integrity constraints [3, 4, 5, 17]. The main reason for this choice is a simpler and more efficient implementation that does not generalize to full FOTL.
Reference: 24. <author> Ullman J. D. </author> <title> Principles of Database and Knowledge-base Systems, </title> <booktitle> Vol. 1,2. Computer Science Systems, </booktitle> <year> 1989. </year>
Reference-contexts: The definition of the first language is a straightforward extension of the definition of standard Relational Calculus <ref> [24] </ref>. Let t i be variables of sort T and x i be variables of sort D. Definition 2.3 Let fl be the signature of the temporal domain and ffi the signature of the data domain.
Reference: 25. <author> Vardi M.Y. </author> <title> A Temporal Fixpoint Calculus. </title> <booktitle> In ACM Symposium on Principles of Programming Languages, </booktitle> <year> 1988. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: Expressive completeness cannot be achieved using more general temporal logic, e.g., the many-dimensional first-order temporal logic [13]. Note also that we restrict our attention solely to the first-order languages. Thus any higher-order properties (e.g., the even cardinality property of relations given in <ref> [25] </ref>) are not expressible in either 2-FOL or FOTL. 1 Assuming closure with respect to the database schema, where all the temporal relations, including derived ones, have exactly one temporal attribute or, in general, a bounded number of such attributes.
References-found: 25

