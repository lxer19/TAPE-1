URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/r-95-1.ps
Refering-URL: ftp://ftp.eecs.umich.edu/people/rundenst/papers/INDEX.html
Root-URL: http://www.cs.umich.edu
Phone: 3  
Title: Visualization and Database Tools for YAC and Cosmid Contig Construction  
Author: S. W. Thomas , E. A. Rundensteiner and A. J. Lee 
Address: Ann Arbor, MI 48109  
Affiliation: Electrical Engineering and Computer Science, University of Michigan,  
Web: MCIT,  
Note: 1 Human Genome Center, 2  
Abstract: Recently, construction of physical maps based on YAC and cosmid contigs has become increasingly common, since these maps serve as a finescale ordering basis for gene searches. We describe a combination of visualization and database tools that address this problem. The YAC-Cosmid contig tool is a map visualization and editing tool designed for large data sets. The Physical Map Assembler (PMA) uses a rule-based interval-ordering approach to infer ordering from experimental data. It is implemented as an active objectoriented database. The PMA visualizer displays interval orderings in a comprehensible fashion, and thus helps the scientist resolve conflicts and ambiguities identified by PMA. Both visualization tools let the user query the database to see the details behind the picture. We have found that a tight integration of visualization and analysis tools with the database enhances their usability, and speeds the dual tasks of analyzing and understanding the experimental data. The use of our tools is illustrated by examples from a gene search at the University of Michigan Genome Center. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Allen, J. F., </author> <title> Maintaining Knowledge About Temporal Intervals, </title> <journal> CACM, </journal> <volume> 26(11): </volume> <pages> 832-843, </pages> <year> 1983. </year>
Reference-contexts: While some concepts from previous work on temporal ordering <ref> [1] </ref> can apply to DNA fragment ordering, several significantly different characteristics of the genomic domain drove the development of our overlap refinement model. Determining the equality of endpoints between DNA fragments is generally costly. Instead, we determine as much as possible about the interval relationships, without necessarily pinpointing endpoint relationships.
Reference: [2] <author> Anwar, E., Maugis, L., and Chakravarthy, S., </author> <title> A New Perspective on Rule Support for ObjectOriented Databases, </title> <booktitle> SIGMOD, </booktitle> <year> 1993, </year> <pages> 99-108. </pages>
Reference-contexts: Our active OODB system is called Crystal. Crystal currently supports classical Condition-Action (CA) rules, which are sufficient for the rules in the PMA model. Crystal treats rules as objects <ref> [2] </ref>, which allows them to exist independently of other objects. Therefore, in Crystal, rules can be created, modified, and deleted at runtime like any other object. Furthermore a rule can monitor instances belonging to multiple classes.
Reference: [3] <author> Brant, D.A., Grose, T., Lofaso, B. and Miranker, </author> <title> D.P., Effects of Database Size on Rule System Performance: Five Case Studies. </title> <booktitle> Proc of VLDB, </booktitle> <year> 1991, </year> <pages> 287-296. </pages>
Reference-contexts: These mechanisms allow for efficient rule processing over large databases, when the number of simultaneous, relevant database updates are small, as in the map construction task. <ref> [3] </ref> In Crystal, we also adopt an incremental rule evaluation approach, similar to TREAT [15], to reduce the time spent on reevaluating predicates. We store IDs of the objects that partially satisfy each predicate.
Reference: [4] <author> Carrano, A. V. et al., </author> <title> Constructing Chromosome And RegionSpecific Cosmid Maps Of The Human Genome, </title> <journal> Genome, </journal> <volume> 31: </volume> <pages> 1059-1065, </pages> <year> 1989. </year>
Reference-contexts: 1. Introduction Construction of physical maps based on YAC and cosmid contigs is an increasingly common task in many research labs <ref> [4, 16] </ref>. Such maps serve as a finescale ordering basis for gene searches, and can provide genomic material for such searches and for large-scale sequencing efforts.
Reference: [5] <author> French, J. C. Jones, A. K., and Pfaltz, J. L., </author> <title> Scientific Database Management, </title> <institution> University of Virginia, </institution> <type> Technical Report 90-21, </type> <institution> Dept. of Computer Science, </institution> <month> Aug. </month> <year> 1990. </year>
Reference-contexts: Activities can be represented directly in a declarative format in the database by treating rules as objects. Given that the database is in control of both rule and data management, it can effectively optimize rule processing. This is an increasingly critical issue given the expected size of genomic databases <ref> [5] </ref>. A detailed design and implementation description is given in our technical report [11]. We summarize here some of the key concepts. We have chosen GemStone 1 as implementation platform for this purpose, since it is a mature OODB product and since it has been adopted by other genome researchers.
Reference: [6] <author> Green, P., SEGMAP, </author> <type> personal communication. </type>
Reference-contexts: The toolset includes a matrix-like visualization tool. There appears to be no way to override the computed ordering when it is in conflict with a priori ordering data from other sources such as genetic markers and FISH analysis. SEGMAP <ref> [6] </ref> is a computer tool for automatically ordering clone maps based on STS content. It does not handle hybridization based screening methods. It, too, works from data stored in ASCII files, and so suffers from the disadvantages listed above.
Reference: [7] <author> Guidi, J. N. and T. H. Roderick, </author> <title> Inference of Order in Genetic Systems, The First Internal. </title> <booktitle> Conf. on Intelligent Systems for Molecular Biology, </booktitle> <year> 1993. </year>
Reference-contexts: Furthermore, it complements our YC tool by nicely handling cosmid-cosmid hybridization data, which are not well visualized by YC. 6. Related Work Letovsky and Berlyn [13] describe a rule-based system for inferring order among genetic markers, including the concept of local orientation. Guidi, et al <ref> [7] </ref>, present a discussion of issues in inference of ordering in genetic systems, including a review of previous work. Mott and Grigoriev [16] describe a set of tools for ordering and visualizing contig map data. The automated ordering tools are based on distance-minimization heuristics. They use a flat-file database.
Reference: [8] <author> Hagiya, M., </author> <title> A Deductive Method for Construction and Visualization of Contigs in the STS Strategy, </title> <booktitle> Genome Informatics Workshop IV, </booktitle> <year> 1993, </year> <pages> pp 65-72. </pages>
Reference-contexts: It is based on a logic-programming language. Ordering results returned by the graph-based queries are not entered into a database, so manual intervention is not facilitated. They focus on STS-based orderings. ContigMaker <ref> [8, 22] </ref> is a logic-based system for inferring clone overlap and partial ordering from STS content mapping. It incorporates the local orientation frame concept and rules for interval relationships. They also discuss visualization methods. 7.
Reference: [9] <author> Harley and A. </author> <title> Bonner Genome Map Assembly Using the Hy+ Visualization System, </title> <booktitle> Int. Conf. on Intelligent Systems in Molecular Biology, </booktitle> <year> 1994. </year>
Reference-contexts: While it incorporates a notion of overlap of intervals, it does not provide any automated ordering method. We have found it to be good for making publication-quality drawings of maps. We adopted a variation on SIGMAs ambiguity bars in the PMA visualizer. The Hy-Graph system <ref> [9] </ref> uses a graph-based visual interface to describe and implement ordering inference rules as graph-pattern queries. It is based on a logic-programming language. Ordering results returned by the graph-based queries are not entered into a database, so manual intervention is not facilitated. They focus on STS-based orderings.
Reference: [10] <author> Lee, A. J., Rundensteiner, E. A., Thomas, S. W., and Lafortune S., </author> <title> An Information Model for Genome Map Representation and Assembly. </title> <booktitle> ACM 2nd Int. Conf. on Information and Knowledge Management , Nov. </booktitle> <year> 1993. </year>
Reference-contexts: The first tool, YC, works well with large YAC-cosmid hybridization and STS content data sets. It allows the user to dynamically drag the probes and target clones, rearranging their order to quickly produce a rough map. The second tool, PMA, incorporates a rule-based interval-ordering approach <ref> [10] </ref> to automatically infer ordering based on experimental overlap data. PMA is implemented using an active objectoriented database [12, 13]. The PMA visualizer displays interval ordering in an easily comprehensible fashion, and thus lets the scientist resolve conflicts and ambiguities discovered by PMA. <p> The model is designed to handle ordering information from experiments, from external sources, or that is derived by the system. We describe the ordering model briefly, for a detailed discussion see <ref> [10] </ref>. A B B A B A NC&gt;(A,B) NC&lt;(A,B) A A level: 0 level: 1 level: 2 level: 3 not-disjoint 1 not-contained&gt; not-contained&lt; not-contained2 not-disjoint&lt; A ND&gt;(A,B) not-disjoint&gt; B C (B,A) contains A C (A,B) contains O (A,B) overlaps disjoint : fuzzy ending A. <p> The third goal achieved by relationship refinement and transitivity rules, that derive new relationships from existing ones. As an illustration, we present an example of a relationship refinement rule, see <ref> [10] </ref> for more detail. Relationship refinement rules are used to infer more precise ordering information about a pair of intervals in a single LOF. Each rule considers two relationships in the same LOF with the same pair of arguments. <p> We first translate each interval relationship into endpoint relations (see <ref> [10] </ref>). For example, not-disjoint&lt;(A,B) is translated to start (A)&lt;start (B) and start (A)&lt;end (B) and end (A)&gt;start (B). The resulting set of endpoint relations induces a partial ordering on the endpoints. A topological sort [20] gives a consistent endpoint ordering, when one exists. <p> A topological sort [20] gives a consistent endpoint ordering, when one exists. It can be used to draw a visualization of the results, as illustrated in p1 p3 p5 y2 y4 y6 y8 This figure shows the results of ordering the walkthrough data from <ref> [10] </ref>. Simulated STS-YAC content mapping data were used as input. The heavy black lines show plausible placements of each of the STS probes (p1p5) and YAC clones (y1-y8). The endpoint positions of the solid lines are derived directly from the ordinal position of each endpoint in their sorted ordering. <p> Selection of a minimal contig for a given set of all potential orderings can also be automated by PMA. A simple algorithm using graph traversal to reduce the set of clones in a contig is given in <ref> [10] </ref>. 5.3. Implementation The PMA visualizer prototype, with a command-based interface, has been implemented in 700 lines of Tcl/Tk. We anticipate that adding a GUI and additional database query functions will bring it to about the same size as the YC tool; i.e., close to 1500 lines. 5.4.
Reference: [11] <author> Lee, A. J, Rundensteiner, E. A., Thomas, S. W., </author> <title> An Active OODB System for Genome Physical Map Assembly, </title> <institution> Electrical Engineering and Computer Science Dept., University of Michigan, Ann Arbor, </institution> <type> Tech. Rep. </type> <institution> CSE-TR-214-94, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: Given that the database is in control of both rule and data management, it can effectively optimize rule processing. This is an increasingly critical issue given the expected size of genomic databases [5]. A detailed design and implementation description is given in our technical report <ref> [11] </ref>. We summarize here some of the key concepts. We have chosen GemStone 1 as implementation platform for this purpose, since it is a mature OODB product and since it has been adopted by other genome researchers. Our active OODB system is called Crystal.
Reference: [12] <author> Lee, A.J., Rundensteiner, E.A., Thomas, </author> <title> S.W., PMA: Active OODB System for Genome Map Assembly, </title> <booktitle> Conf on Statistic and Scientific Databases, </booktitle> <month> Sept, </month> <year> 1994. </year>
Reference-contexts: It allows the user to dynamically drag the probes and target clones, rearranging their order to quickly produce a rough map. The second tool, PMA, incorporates a rule-based interval-ordering approach [10] to automatically infer ordering based on experimental overlap data. PMA is implemented using an active objectoriented database <ref> [12, 13] </ref>. The PMA visualizer displays interval ordering in an easily comprehensible fashion, and thus lets the scientist resolve conflicts and ambiguities discovered by PMA. Both visualization tools also let the user easily query the database to see the details behind the picture.
Reference: [13] <author> Letovsky, S. and Berlyn, M. B., CPROP: </author> <title> A Rule-Based Program For Constructing Genetic Maps, </title> <booktitle> Genomics 12: </booktitle> <pages> 435-446, </pages> <year> 1992. </year>
Reference-contexts: It allows the user to dynamically drag the probes and target clones, rearranging their order to quickly produce a rough map. The second tool, PMA, incorporates a rule-based interval-ordering approach [10] to automatically infer ordering based on experimental overlap data. PMA is implemented using an active objectoriented database <ref> [12, 13] </ref>. The PMA visualizer displays interval ordering in an easily comprehensible fashion, and thus lets the scientist resolve conflicts and ambiguities discovered by PMA. Both visualization tools also let the user easily query the database to see the details behind the picture. <p> The PMA visualizer is thus a valuable addition to our PMA system, helping to simplify the process of contig assembly. Furthermore, it complements our YC tool by nicely handling cosmid-cosmid hybridization data, which are not well visualized by YC. 6. Related Work Letovsky and Berlyn <ref> [13] </ref> describe a rule-based system for inferring order among genetic markers, including the concept of local orientation. Guidi, et al [7], present a discussion of issues in inference of ordering in genetic systems, including a review of previous work.
Reference: [14] <author> Marr, T., </author> <type> personal communication. </type>
Reference: [15] <author> Miranker, D. P., </author> <title> TREAT: A New And Efficient Match Algorithm For AI Production Systems, </title> <publisher> Pitman Publishing, </publisher> <pages> pp 13-47. </pages>
Reference-contexts: These mechanisms allow for efficient rule processing over large databases, when the number of simultaneous, relevant database updates are small, as in the map construction task. [3] In Crystal, we also adopt an incremental rule evaluation approach, similar to TREAT <ref> [15] </ref>, to reduce the time spent on reevaluating predicates. We store IDs of the objects that partially satisfy each predicate. This is used to incrementally update the status of the rules to determine when a rule is ready to be fired. 1 GemStone is a registered trademark of Servio Corporation. <p> Future directions It would be desirable to persistently maintain the contigs constructed through visualizations as alternative map proposals, without overriding existing ordering relationships stored in the database. We thus plan to experiment with the integration of workspace concepts into our system, as found, for example, in the Genome Topographer <ref> [15] </ref>. Furthermore, visualization of numerous alternative maps is also a challenging research issue, since of course each decision made while constructing and reordering a contig through a visualization leads to another map.
Reference: [16] <author> Mott, R., Grigoriev, A., et al, </author> <title> Algorithms and Software Tools for Ordering Clone Libraries: Application to the Mapping of the Genome of Schizosaccharomyces Pombe, </title> <journal> Nucleic Acids Research, </journal> <volume> 21(8): </volume> <pages> 1965-1974, </pages> <year> 1993. </year>
Reference-contexts: 1. Introduction Construction of physical maps based on YAC and cosmid contigs is an increasingly common task in many research labs <ref> [4, 16] </ref>. Such maps serve as a finescale ordering basis for gene searches, and can provide genomic material for such searches and for large-scale sequencing efforts. <p> The data shown in Figure 2 is a typically noisy data set, in a plausible ordering. This sort of data is highly resistant to automated ordering methods, without some sort of human intervention to clean it up. For example, the Mott and Grigoriev tools <ref> [16] </ref> computed orderings that we knew were incorrect from genetic and FISH marker data. Automated methods can be used to generate a rough ordering, which is then interactively edited with our tool. The human user, applying intuition and experience, can make judgments that would be difficult to program. <p> Related Work Letovsky and Berlyn [13] describe a rule-based system for inferring order among genetic markers, including the concept of local orientation. Guidi, et al [7], present a discussion of issues in inference of ordering in genetic systems, including a review of previous work. Mott and Grigoriev <ref> [16] </ref> describe a set of tools for ordering and visualizing contig map data. The automated ordering tools are based on distance-minimization heuristics. They use a flat-file database. This enhances the tools portability, but loses the generalized query and selection capabilities of a true database.
Reference: [17] <author> Ousterhout, J. K., </author> <title> Tcl: An Embeddable Command Language, </title> <booktitle> Proc. 1990 Winter USENIX Conference, USENIX Association, </booktitle> <year> 1990. </year>
Reference-contexts: In short, a combination of automated ordering and visualization with manual editing represents the most powerful mix for generating good maps. 3.4. YC Implementation YC is implemented in about 1500 lines of Tcl/Tk code <ref> [17, 18] </ref>. Tcl/Tk is a freeware programming system, developed at the University of California at Berkeley, and is a good environment for prototyping and developing interactive graphical programs. 3.5. Project Walkthrough The YC tool was used in a local gene search effort.
Reference: [18] <author> Ousterhout, J. K., </author> <title> An X11 Toolkit Based on the Tcl Language, </title> <booktitle> Proc. 1991 Winter USENIX Conference, USENIX Assoc., </booktitle> <year> 1991. </year>
Reference-contexts: In short, a combination of automated ordering and visualization with manual editing represents the most powerful mix for generating good maps. 3.4. YC Implementation YC is implemented in about 1500 lines of Tcl/Tk code <ref> [17, 18] </ref>. Tcl/Tk is a freeware programming system, developed at the University of California at Berkeley, and is a good environment for prototyping and developing interactive graphical programs. 3.5. Project Walkthrough The YC tool was used in a local gene search effort.
Reference: [19] <author> Pecherer, R., </author> <title> Contig Graph Tool: A Graphical Interface For Contig Physical Map Assembly, </title> <booktitle> Hawaii Int. Conf. on System Sciences, </booktitle> <volume> Vol. I, </volume> <pages> pp. 544-553, </pages> <year> 1993. </year>
Reference-contexts: It, too, works from data stored in ASCII files, and so suffers from the disadvantages listed above. As far as we know, it has not been described in the literature. Pecherer describes a graph-based visualization tool for investigating fingerprint-overlap data for contig construction <ref> [19] </ref>. It automatically identifies graph features resulting from conflicting data, such loops and 3-way branches, and includes a heuristic ordering algorithm for drawing the overlap graph.
Reference: [20] <author> Sedgewick, R., </author> <title> Algorithms, </title> <publisher> Addison-Wesley, </publisher> <year> 1982. </year>
Reference-contexts: We first translate each interval relationship into endpoint relations (see [10]). For example, not-disjoint&lt;(A,B) is translated to start (A)&lt;start (B) and start (A)&lt;end (B) and end (A)&gt;start (B). The resulting set of endpoint relations induces a partial ordering on the endpoints. A topological sort <ref> [20] </ref> gives a consistent endpoint ordering, when one exists. It can be used to draw a visualization of the results, as illustrated in p1 p3 p5 y2 y4 y6 y8 This figure shows the results of ordering the walkthrough data from [10].
Reference: [21] <institution> SIGMA System for Integrated Genome Map Assembly, </institution> <note> Version 0.70 User Manual, </note> <institution> Theoretical Biology and Biophysics Group, Center for Human Genome Studies, Los Alamos National Laboratory, </institution> <year> 1992. </year>
Reference-contexts: The visualization becomes cumbersome as the number of clones in a contig grows beyond a few dozen. SIGMA <ref> [21] </ref> is a tool for graphically arranging and presenting integrated maps, developed at LANL. While it incorporates a notion of overlap of intervals, it does not provide any automated ordering method. We have found it to be good for making publication-quality drawings of maps.
Reference: [22] <editor> Suyama, A., Hagiya, M., et al, ContigMaker: </editor> <title> Software Tool for Contig Map Construction, </title> <booktitle> Genome Informatics Workshop IV, </booktitle> <year> 1993, </year> <pages> pp. 376-384. </pages>
Reference-contexts: It is based on a logic-programming language. Ordering results returned by the graph-based queries are not entered into a database, so manual intervention is not facilitated. They focus on STS-based orderings. ContigMaker <ref> [8, 22] </ref> is a logic-based system for inferring clone overlap and partial ordering from STS content mapping. It incorporates the local orientation frame concept and rules for interval relationships. They also discuss visualization methods. 7.
References-found: 22

