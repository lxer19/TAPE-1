URL: http://seclab.cs.ucdavis.edu/~samorodi/papers/threads/sun-usenix/warlock.ps
Refering-URL: http://seclab.cs.ucdavis.edu/~samorodi/papers/threads/sun-usenix/
Root-URL: http://www.cs.ucdavis.edu
Title: ability to detect potential deadlocks will probably be added to warlock at some point, since
Author: McDowell, C. E., and Helmbold, D. P. . Taylor, R. N. . Taylor, R. N., and Osterweil, L. J. . Young, M., and Taylor, R. N. . Powell, M. L., Kleiman, S. R., Barton, S., Shah, D., Stein, D., and Weeks, M. S., Smaalders, B., Stein, D., and Shah, D. 
Date: 21, 4 (December), 593-622.  3 (May), 265-278.  14, 10 (October), 1499-1510.  February, 187-192.  
Note: Future work 7.0 Future work The  8.0 References [POSIX] POSIX P1003.4a Draft 5, IEEE. [MH89]  Debugging Concurrent Programs. ACM Computing Surveys  [Tay83]  CACM 26, 5, 362-376. [TO80]  IEEE Trans. Softw. Eng. SE-6,  [YT88]  IEEE Trans. Softw. Eng.  [Pow91]  1991. SunOS Multi-thread Architecture. USENIX Conference Proceedings, January, 65-79. [Kle92] Kleiman,  1992. Writing Multithreaded Code in Solaris. IEEE CompCon Proceedings,  
Abstract: 12 of 12 WARLOCK A Static Data Race Analysis Tool It is somewhat surprising that no errors of this type have been found to date. Perhaps this is simply due to the fact that there is run-time checking to ag a second call to mutex_lock() by a given thread as an error, so such errors would tend to be caught quickly. By contrast, code which suffers from data races can execute correctly for years before a problem manifests, and when it does manifest there may be little to indicate the source of the problem. Near-term efforts for the project involve utilizing the annotation capability in system header files and writing warlock versions of common libraries. It is time to provide an environment, using the functionality currently available, in which the work in common is already done. An immediate goal is to provide an environment in which drivers can be analyzed with minimal effort, since there are many drivers which could be analyzed if a set of header files and libraries were prepared. Warlock shows good potential for finding many but not all data races in multithreaded code written for Solaris. There is substantial opportunity to improve warlocks ability to understand code through the implementation of limited forms of data analysis. This will further improve the results of warlocks analysis, and reduce the need for conditional compilation. 
Abstract-found: 1
Intro-found: 0
Reference: [POSIX] <institution> POSIX P1003.4a Draft 5, IEEE. </institution>
Reference: [MH89] <author> McDowell, C. E., and Helmbold, D. P. </author> <year> 1989. </year> <title> Debugging Concurrent Programs. </title> <journal> ACM Computing Surveys 21, </journal> <volume> 4 (December), </volume> <pages> 593-622. </pages>
Reference: [Tay83] <author> Taylor, R. N. </author> <year> 1983. </year> <title> A General-Purpose Algorithm for Analyzing Concurrent Programs. </title> <journal> CACM 26, </journal> <volume> 5, </volume> <pages> 362-376. </pages>
Reference: [TO80] <author> Taylor, R. N., and Osterweil, L. J. </author> <year> 1980. </year> <title> Anomaly Detection in Concurrent Software by Static Data Flow Analysis. </title> <journal> IEEE Trans. Softw. Eng. SE-6, </journal> <volume> 3 (May), </volume> <pages> 265-278. </pages>
Reference: [YT88] <author> Young, M., and Taylor, R. N. </author> <year> 1988. </year> <title> Combining Static Concurrency Analysis with Symbolic Execution. </title> <journal> IEEE Trans. Softw. Eng. </journal> <volume> 14, </volume> <month> 10 (October), </month> <pages> 1499-1510. </pages>
Reference: [Pow91] <author> Powell, M. L., Kleiman, S. R., Barton, S., Shah, D., Stein, D., and Weeks, M. </author> <year> 1991. </year> <title> SunOS Multi-thread Architecture. </title> <booktitle> USENIX Conference Proceedings, </booktitle> <month> January, </month> <pages> 65-79. </pages>

References-found: 6

