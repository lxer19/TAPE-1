URL: http://www.cs.brown.edu/courses/cs227/papers/b0/equiv.ps
Refering-URL: http://www.cs.brown.edu/software/cokokola/
Root-URL: http://www.cs.brown.edu
Title: OBJECT-ORIENTED QUERIES: EQUIVALENCE AND OPTIMIZATION  
Author: Gail M. Shaw and Stanley B. Zdonik 
Address: Providence, R.I. 02912  
Affiliation: Department of Computer Science Brown University  
Abstract: We are interested in efficiently accessing data in an object-oriented database. We have developed a query algebra which fully supports object identity and abstract data types, and have identified a variety of algebraic query transformations. The equivalence of two queries is complicated by the presence of object identity. In this paper we define a hierarchy of notions of equivalence for queries, and present examples of equivalent query transformations for each level of the hierarchy.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Shaw, G. M. and Zdonik, S. B., </author> <title> "A Query Algebra for Object-Oriented Databases," </title> <booktitle> to appear in Proc. 6th International Conference on Data Engineering, IEEE, </booktitle> <year> 1990. </year>
Reference-contexts: 1. INTRODUCTION A major issue in the development of query algebras is the potential for optimization. We have developed a query algebra that synthesizes relational query concepts with object-oriented databases <ref> [1] </ref>. The algebra supports an object-oriented model with abstract data types, encapsulation, type inheritance, and object identity.
Reference: [2] <editor> Bancilhon, F. et al., </editor> <title> "FAD, a Powerful and Simple Database Language," </title> <booktitle> in Proceedings of the 13th VLDB Conference, </booktitle> <pages> pp. 97-105, </pages> <year> 1987. </year>
Reference-contexts: We have developed a query algebra that synthesizes relational query concepts with object-oriented databases [1]. The algebra supports an object-oriented model with abstract data types, encapsulation, type inheritance, and object identity. Unlike other languages proposed for object-oriented databases <ref> [2, 3, 4, 5, 6, 7] </ref> our algebra fully supports these object-oriented concepts and still provides full associative access to the database, including a join capability that respects the discipline of data abstraction. <p> The similarities between the structure of our algebra and the relational algebra lead us to believe that relational optimization results will prove useful in object-oriented query optimization. Query algebras can support optimization through syntactic transformations (e.g., <ref> [2, 7] </ref>) and we have found our algebra to be conducive to such transformations. However, in order to identify transformations producing equivalent results it is necessary to define the requirements for equivalence. An object-oriented query creates new objects in which to store the results of the query.
Reference: [3] <author> Maier, D. and Stein, J., </author> <title> "Development and Implementation of an Object-Oriented DBMS," </title> <booktitle> in Research Directions in Object-Oriented Programming (B. </booktitle> <editor> Shriver and P. Wegner, </editor> <booktitle> eds.), </booktitle> <pages> pp. 355-392, </pages> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <year> 1987. </year>
Reference-contexts: We have developed a query algebra that synthesizes relational query concepts with object-oriented databases [1]. The algebra supports an object-oriented model with abstract data types, encapsulation, type inheritance, and object identity. Unlike other languages proposed for object-oriented databases <ref> [2, 3, 4, 5, 6, 7] </ref> our algebra fully supports these object-oriented concepts and still provides full associative access to the database, including a join capability that respects the discipline of data abstraction.
Reference: [4] <author> Banerjee, J., Kim, W., and Kim, K.-C., </author> <title> "Queries in Object-Oriented Databases," </title> <booktitle> in Proceedings 4th Intl. Conf. on Data Engineering, </booktitle> <pages> pp. 31-38, </pages> <publisher> IEEE, </publisher> <month> February </month> <year> 1988. </year>
Reference-contexts: We have developed a query algebra that synthesizes relational query concepts with object-oriented databases [1]. The algebra supports an object-oriented model with abstract data types, encapsulation, type inheritance, and object identity. Unlike other languages proposed for object-oriented databases <ref> [2, 3, 4, 5, 6, 7] </ref> our algebra fully supports these object-oriented concepts and still provides full associative access to the database, including a join capability that respects the discipline of data abstraction.
Reference: [5] <author> Carey, M. J., DeWitt, D. J., and Vandenberg, S. L., </author> <title> "A Data Model and Query Language for EXODUS," </title> <booktitle> in SIGMOD Proceedings, </booktitle> <pages> pp. 413-423, </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1988. </year>
Reference-contexts: We have developed a query algebra that synthesizes relational query concepts with object-oriented databases [1]. The algebra supports an object-oriented model with abstract data types, encapsulation, type inheritance, and object identity. Unlike other languages proposed for object-oriented databases <ref> [2, 3, 4, 5, 6, 7] </ref> our algebra fully supports these object-oriented concepts and still provides full associative access to the database, including a join capability that respects the discipline of data abstraction.
Reference: [6] <author> Kim, W., </author> <title> "A Model of Queries for Object-Oriented Databases," </title> <type> Tech. Rep. </type> <institution> ACA-ST-365-88, MCC, </institution> <year> 1988. </year>
Reference-contexts: We have developed a query algebra that synthesizes relational query concepts with object-oriented databases [1]. The algebra supports an object-oriented model with abstract data types, encapsulation, type inheritance, and object identity. Unlike other languages proposed for object-oriented databases <ref> [2, 3, 4, 5, 6, 7] </ref> our algebra fully supports these object-oriented concepts and still provides full associative access to the database, including a join capability that respects the discipline of data abstraction.
Reference: [7] <author> Osborn, S. L., </author> <title> "Identity, Equality and Query Optimization," </title> <booktitle> in Advances in Object-Oriented Database Systems, </booktitle> <pages> pp. 346-351, </pages> <booktitle> 2nd International Workshop on Object-Oriented Database Systems, </booktitle> <month> September </month> <year> 1988. </year>
Reference-contexts: We have developed a query algebra that synthesizes relational query concepts with object-oriented databases [1]. The algebra supports an object-oriented model with abstract data types, encapsulation, type inheritance, and object identity. Unlike other languages proposed for object-oriented databases <ref> [2, 3, 4, 5, 6, 7] </ref> our algebra fully supports these object-oriented concepts and still provides full associative access to the database, including a join capability that respects the discipline of data abstraction. <p> The similarities between the structure of our algebra and the relational algebra lead us to believe that relational optimization results will prove useful in object-oriented query optimization. Query algebras can support optimization through syntactic transformations (e.g., <ref> [2, 7] </ref>) and we have found our algebra to be conducive to such transformations. However, in order to identify transformations producing equivalent results it is necessary to define the requirements for equivalence. An object-oriented query creates new objects in which to store the results of the query.
Reference: [8] <author> Zdonik, S. B. and Wegner, P., </author> <title> "Language and Methodology for Object-Oriented Database Environments," </title> <booktitle> in Proceedings of the Hawaii International Conference on System Sciences, </booktitle> <month> January </month> <year> 1986. </year>
Reference-contexts: In section 3 the notion of equivalence of object-oriented queries is defined. We discuss query optimization in section 4 and present a variety of transformations satisfying our different definitions of equivalence. 2. THE ENCORE QUERY ALGEBRA Our query algebra is based on the ENCORE object-oriented data model <ref> [8, 9, 10] </ref>. The model includes abstract data types, type inheritance, typed collections of typed objects, and objects with identity. We query over collections of objects using the type of objects in the collection as a scheme for the collection.
Reference: [9] <author> Shaw, G. M. and Zdonik, S. B., </author> <title> "An Object-Oriented Query Algebra," </title> <booktitle> in Proceedings of the 2nd International Workshop on Database Programming Languages, </booktitle> <month> June </month> <year> 1989. </year> <note> Reprinted in IEEE Database Engineering, </note> <month> September </month> <year> 1989. </year>
Reference-contexts: In section 3 the notion of equivalence of object-oriented queries is defined. We discuss query optimization in section 4 and present a variety of transformations satisfying our different definitions of equivalence. 2. THE ENCORE QUERY ALGEBRA Our query algebra is based on the ENCORE object-oriented data model <ref> [8, 9, 10] </ref>. The model includes abstract data types, type inheritance, typed collections of typed objects, and objects with identity. We query over collections of objects using the type of objects in the collection as a scheme for the collection.
Reference: [10] <author> Elmore, P., Shaw, G. M. and Zdonik, S. B., </author> <title> "The ENCORE Object-Oriented Data Model," </title> <type> tech. rep. </type> <note> in preparation, </note> <institution> Brown University, </institution> <month> November </month> <year> 1989. </year>
Reference-contexts: In section 3 the notion of equivalence of object-oriented queries is defined. We discuss query optimization in section 4 and present a variety of transformations satisfying our different definitions of equivalence. 2. THE ENCORE QUERY ALGEBRA Our query algebra is based on the ENCORE object-oriented data model <ref> [8, 9, 10] </ref>. The model includes abstract data types, type inheritance, typed collections of typed objects, and objects with identity. We query over collections of objects using the type of objects in the collection as a scheme for the collection.
Reference: [11] <author> Khoshafian, S. N. and Copeland, G. P., </author> <title> "Object Identity," </title> <booktitle> in Proceedings of the Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pp. 406-416, </pages> <publisher> ACM, </publisher> <month> September </month> <year> 1986. </year>
Reference-contexts: All types are subtypes of type Object, thus all instances of types are objects in the database. Type Object defines a family of operations for equality we call i-equality (an extended version of deep-equality from Khoshafian and Copeland <ref> [11] </ref>). Atomic objects are identical if they have the same values (i.e. they are equal as defined by their type) and non-atomic objects are identical when they are the same object (i.e. an object can only be identical to itself). <p> Objects can be represented graphically, where nodes are objects or atomic values, arcs connect collection type objects to all objects that are members of the collection, and arcs connect non-collection type objects to the values of all properties of that object (similarly to <ref> [11] </ref> for example). Nodes representing atomic values are leaves and are labelled with the atomic value. Nodes representing non-atomic objects are labelled with an (artificial) object identifier as well as the object type.
Reference: [12] <author> Jaeschke, G. and Schek, H. J., </author> <title> "Remarks on the Algebra of Non First Normal Form Relations," </title> <booktitle> in Proceedings of the Symposium on Principles of Database Systems, </booktitle> <pages> pp. 124-138, </pages> <publisher> ACM, </publisher> <month> March </month> <year> 1982. </year>
Reference-contexts: Operation Flatten takes a set of sets of objects (type Set [Set [T]]) and returns a set of objects (Set [T]). Nest and UnNest extend the same operators for non-first normal form relations (see <ref> [12] </ref>) to sets of objects with identity. Sets of tuples can be unnested on a single set-valued attribute, or nested to create a set-valued attribute.
Reference: [13] <author> Graefe, G., </author> <title> Rule-Based Query Optimization in Extensible Database Systems. </title> <type> PhD thesis, </type> <institution> Univ. of Wisconsin-Madison, </institution> <month> November </month> <year> 1987. </year>
Reference-contexts: If an Ojoin predicate contains a conjunct involving only one of the operand collections, that conjunct can be extracted from the Ojoin predicate to form a Select predicate on the appropriate operand. 4.2. Using Weaker Equivalences in Query Transformation A rule-based query optimizer (e.g. <ref> [13] </ref>) can use transformations like the ones illustrated here to assist in determining efficient methods for processing a query. We expect id-equivalent transformations to be particularly useful in optimization, but transformations that are less than structurally equivalent can also be useful when an optimizer tries to generate new transformations.
References-found: 13

