URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-93-41.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Certification Of Reusable Software Parts  
Author: Michael F. Dunn John C. Knight 
Date: August 31, 1992  
Abstract-found: 0
Intro-found: 1
Reference: [And81] <author> Andrews, D.M. and J.P. Benson, </author> <title> An Automated Program Testing Methodology and Its Implementation, </title> <booktitle> Proceedings of the Fifth International Conference on Software Engineering, </booktitle> <address> San Diego, CA, </address> <month> March </month> <year> 1981. </year>
Reference-contexts: Unfortunately, in general, this is probably not a practical approach to the problem at this point in the present embryonic state of reuse technology. A promising first approach to dealing with many of the issues, at least partially, is the instrumentation of reusable components with executable assertions <ref> [And81, Luc85, Mey87] </ref>. In fact, Anna [Luc85] is described as a notation for specification although it does not have the completeness characteristics of a rigorous approach such as VDM [Jon86]. However, Anna does provide a rich notation for writing executable assertions.
Reference: [DuK91] <author> Dunn, M.F., and J.C. Knight, </author> <title> Software Reuse In An Industrial Setting: A Case Study, </title> <booktitle> Proceedings of the Thirteenth International Conference on Software Engineering, </booktitle> <address> Austin, TX, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Certification Of Reusable Software Parts Case Studies 1992 University Of Virginia. All rights reserved. 60 A.1 Example Application Domain A.1.1 Application Overview The application domain of interest is that of nautical navigation for ships <ref> [DuK91] </ref>. Computers are being used increasingly to help navigators plot their ships course, monitor their progress, track voyage history, and so on.
Reference: [Fag86] <author> Fagan, </author> <title> M.E., Advances in Software Inspections, </title> <journal> IEEE Transactions On Software Engineering, </journal> <volume> Vol. SE-12, No. 7, </volume> <month> July </month> <year> 1986. </year>
Reference: [Gar87] <author> Gargaro, A. </author> <title> and T.L. Pappas, Reusability Issues and Ada, </title> <journal> IEEE Software, </journal> <month> July </month> <year> 1987. </year>
Reference-contexts: Where informal specification techniques are used for components in reuse libraries and reliance is placed on human insight for component selection and matching, it will be difficult to ensure that a selected component does precisely what is required and that the component is being used correctly <ref> [Gar87, Mey87, Ric89] </ref>. Component revision. As with any software, a reuse library will be the subject of revision. Components will be enhanced to improve their performance in some way yet maintain their existing interface. Systems built with such components are then faced with a dilemma. <p> No mechanism is provided in existing production programming systems to permit such restrictions to be checked. Ada does provide static expressions thereby permitting extensive computation to be performed at compile time. Gargaro and Pappas present an example of checking this way in Ada <ref> [Gar87] </ref>. However, checking restrictions is not the intent of such static expressions, they do not provide the complete range of facilities needed, and there is no mechanism to permit signaling a violation other than forcing a contrived, compile-time exception.
Reference: [HeI88] <author> Hekmatpour, S and D. Ince, </author> <title> Software Prototyping, Formal Methods, and VDM, </title> <publisher> Addison Wesley, </publisher> <year> 1988. </year>
Reference-contexts: All rights reserved. 33 more of an art than a science. Although testing is used primarily in the verification of source code, it can be used to demonstrate properties of specifications or designs if they are expressed in executable notations, such as VDM <ref> [HeI88] </ref>. Testing can be applied to any reusable component that is executable. Its use is complicated by the fact that so many different types of testing are needed, and all have a place in a certification scheme. Formal Verification.
Reference: [Hen80] <author> Heninger, K.L., </author> <title> Specifying Software Requirements for Complex Systems: New Techniques and Their Application, </title> <journal> IEEE Transactions On Software Engineering, </journal> <volume> Vol. SE-6, No. 1, </volume> <month> January </month> <year> 1980, </year> <pages> pp. 2-13. </pages>
Reference-contexts: All rights reserved. 12 3.2.5 Choice of Language For Specifications Various notations for capturing requirements specifications exist, ranging from informal natural language to semi-formal methods such the A-7E technique <ref> [Hen80] </ref>, to formal methods such as Z [Spi89].
Reference: [How91] <author> Howell, C., and D. Mularz, </author> <title> Exception Handling in Large Ada Systems, </title> <type> Technical Report, </type> <institution> MITRE Corporation, </institution> <address> McLean, VA, </address> <year> 1991. </year>
Reference-contexts: If one exists, it is executed and the unit is completed, but otherwise the exception is raised again in the caller at the point of the call in a process called propagation. This approach associates handlers for exceptions with program scope dynamically, and leads to a variety of problems <ref> [How91] </ref>. For example, an exception might be propagated an arbitrary distance up the stack of active subprogram calls thereby terminating all of the active subprograms in which a handler was not located.
Reference: [Jon86] <author> Jones, C.B., </author> <title> Systematic Software Development Using VDM, </title> <publisher> Prentice Hall International, </publisher> <year> 1986. </year>
Reference-contexts: In fact, Anna [Luc85] is described as a notation for specification although it does not have the completeness characteristics of a rigorous approach such as VDM <ref> [Jon86] </ref>. However, Anna does provide a rich notation for writing executable assertions. The role of instrumentation using assertions is to include design information with the component, in particular to permit design assumptions to be documented in a machine-processable way.
Reference: [KnM91] <author> Knight, J.C., and E.A. Myers, </author> <title> Phased Inspections, </title> <booktitle> ACM SIGSOFT, </booktitle> <volume> Vol. 16, No. 3, </volume> <month> July </month> <year> 1991, </year> <pages> pp. 29-35. </pages>
Reference-contexts: Properties that can be checked by inspection include consistency of specifications, correctness of designs, and completeness of test plans. The term Formal Inspections was introduced by Fagan [Fag76] and refinements of Fagans original idea have been suggested by Parnas and Weiss [PaW85] and by Knight and Myers <ref> [KnM91] </ref>. Inspection can be applied to reusable components immediately and can be used to establish a wide range of properties. Because formal inspection involves human insight, it is the most general quality assurance technique. Testing.
Reference: [Lev87] <author> Leveson, N.G., S.S. Cha, T.J. Shimeall, and J.C. Knight, </author> <title> The Use Of Self Checks And Voting In Software Error Detection: An Empirical Study, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 16, No. 4, </volume> <month> April </month> <year> 1990. </year> <title> Certification Of Reusable Software Parts References 1992 University Of Virginia. All rights reserved. </title> <type> 72 </type>
Reference-contexts: The effects of arbitrary changes cannot be checked with any degree of certainty in this way. However, there is some empirical evidence that executable assertions provide a useful degree of error detection when properly installed <ref> [Lev87] </ref>. Executable assertions can be used therefore as part of a system for checking components subjected to unanticipated adaptation. 6.4 Examples Of Domain Properties In this section, some specific examples of the use of component properties to establish, at least in part, significant domain properties in developed systems are presented.
Reference: [Luc85] <author> Luckham, </author> <title> D.C. and F.W. von Henke, An Overview of Anna, a Specification Language For Ada, </title> <booktitle> IEEE Computer, </booktitle> <month> March, </month> <year> 1985. </year>
Reference-contexts: However, it is not possible, in general, to check that a subprogram supplied as a generic parameter complies with required functional constraints. Checking beyond that inherent in most programming languages is possible using some form of supplementary notation. For example, Anna <ref> [Luc85] </ref> is a notation designed to permit specifications to be added to Ada source programs. Anna, however, is not designed Certification Of Reusable Software Parts Establishing Properties Of Systems 1992 University Of Virginia. <p> Unfortunately, in general, this is probably not a practical approach to the problem at this point in the present embryonic state of reuse technology. A promising first approach to dealing with many of the issues, at least partially, is the instrumentation of reusable components with executable assertions <ref> [And81, Luc85, Mey87] </ref>. In fact, Anna [Luc85] is described as a notation for specification although it does not have the completeness characteristics of a rigorous approach such as VDM [Jon86]. However, Anna does provide a rich notation for writing executable assertions. <p> A promising first approach to dealing with many of the issues, at least partially, is the instrumentation of reusable components with executable assertions [And81, Luc85, Mey87]. In fact, Anna <ref> [Luc85] </ref> is described as a notation for specification although it does not have the completeness characteristics of a rigorous approach such as VDM [Jon86]. However, Anna does provide a rich notation for writing executable assertions.
Reference: [Mey88] <author> Meyer, B., </author> <title> EIFFEL: Reusability and Reliability, in Software Reuse: Emerging Technology, Tracz, </title> <editor> W., (editor), </editor> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference: [PaW85] <author> Parnas, D.L. and D.M. Weiss. </author> <title> Active Design Reviews: </title> <booktitle> Principles and Practices, Proceedings of the Eighth International Conference on Software Engineering, </booktitle> <address> London, England, </address> <month> August </month> <year> 1985. </year>
Reference-contexts: Properties that can be checked by inspection include consistency of specifications, correctness of designs, and completeness of test plans. The term Formal Inspections was introduced by Fagan [Fag76] and refinements of Fagans original idea have been suggested by Parnas and Weiss <ref> [PaW85] </ref> and by Knight and Myers [KnM91]. Inspection can be applied to reusable components immediately and can be used to establish a wide range of properties. Because formal inspection involves human insight, it is the most general quality assurance technique. Testing.
Reference: [Pri90] <author> Prieto-Diaz, R., </author> <title> Domain Analysis: An Introduction, </title> <booktitle> ACM SIGSOFT, </booktitle> <volume> Vol. 15, No. 2, </volume> <month> April </month> <year> 1990, </year> <pages> pp. 47-54. </pages>
Reference-contexts: Thus a certification instance is developed from the characteristics desired of work products built from the associated library, and the determination of these characteristics is part of domain analysis <ref> [Pri90] </ref>. The sequence of events, therefore, is to determine the desired domain properties and then from these determine the properties required of reusable parts. These become the certification instance.
Reference: [Ric89] <author> Rice, J. and H. Schwetman, </author> <title> Interface Issues In A Software Parts Technology, in Software Reusability, edited by Biggerstaff and Perlis, </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Where informal specification techniques are used for components in reuse libraries and reliance is placed on human insight for component selection and matching, it will be difficult to ensure that a selected component does precisely what is required and that the component is being used correctly <ref> [Gar87, Mey87, Ric89] </ref>. Component revision. As with any software, a reuse library will be the subject of revision. Components will be enhanced to improve their performance in some way yet maintain their existing interface. Systems built with such components are then faced with a dilemma.
Reference: [Rus87] <author> Russell, G., </author> <title> Experiences Using A Reusable Data Structure Taxonomy, </title> <booktitle> Proceedings of the Fifth Annual Joint Conference On Ada Technology and Washington Ada Symposium, </booktitle> <month> April </month> <year> 1987. </year>
Reference-contexts: The general issues affecting the quality-assurance process for reusable components are: Component Use. By definition, a component that is entered into a reuse library is being offered for use by others and has to be prepared for every possible use (or more accurately reuse) <ref> [Rus87] </ref>. This is very different from the normal development situation in which an artifact is intended for a single use and its quality is usually assessed with that in mind. Quality assurance under such circumstances must be undertaken with a higher degree of generality than is normally encountered.
Reference: [SPC89] <author> Software Productivity Consortium, </author> <title> Ada Quality And Style: Guidelines for Professional Programmers, </title> <publisher> Van Nostrand Reinhold, </publisher> <year> 1989. </year>
Reference-contexts: The properties included in a specific instance of certification can be anything relevant to the organization expecting to use the certified parts. The following are examples of properties that might be used for source-code parts: Compliance with a detailed set of programming guidelines such as those prepared for Ada <ref> [SPC89] </ref>. Subjected to a rigorous but informal correctness argument. Tested to some standard such as achieving a certain level of a coverage metric. Compliance with certain performance standards such as efficient processor and memory utilization or achieving some level of numeric accuracy.
Reference: [SPC90] <institution> Software Productivity Consortium, </institution> <note> Introduction to Synthesis, TR INTRO_SYNTHESIS-90019-N, </note> <month> June </month> <year> 1990. </year>
Reference-contexts: It includes elements of traditional component reuse and application generation technology. A basic description of the process can be found in the SPCs Synthesis documentation <ref> [SPC90] </ref>. There are two main aspects to Synthesis: Certified Reuse Libraries ALL PART TYPES Spec. Design Code Verif Domain Analysis. Part Certification Process Parts Part Properties Domain Properties Quality Assurance Certification Of Reusable Software Parts Reuse-Oriented Development 1992 University Of Virginia.
Reference: [SPC92] <author> Software Productivity Consortium, </author> <title> Introducing Systematic Reuse To The Command and Control Systems Division of Rockwell International, </title> <type> TR SPC-92020-N, </type> <month> May </month> <year> 1992. </year>
Reference-contexts: All rights reserved. 23 traditional proofreading and checking work (work that is tedious and error prone) can either be eliminated or reduced because of the quality of the reused components. A good example of this approach is presented in a case study of the SPC Synthesis process <ref> [SPC92] </ref>. As an example in a completely different work product (source code), if we know the execution speed of a set of components and we have a single-thread system composed entirely of those components, then we can deterministically show the execution bounds on the entire system.
Reference: [Spi89] <author> Spivey, J.M., </author> <title> The Z Notation: A Reference Manual, </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: All rights reserved. 12 3.2.5 Choice of Language For Specifications Various notations for capturing requirements specifications exist, ranging from informal natural language to semi-formal methods such the A-7E technique [Hen80], to formal methods such as Z <ref> [Spi89] </ref>.
References-found: 20

