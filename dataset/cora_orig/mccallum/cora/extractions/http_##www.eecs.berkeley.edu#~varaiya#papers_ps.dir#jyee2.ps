URL: http://www.eecs.berkeley.edu/~varaiya/papers_ps.dir/jyee2.ps
Refering-URL: http://www.eecs.berkeley.edu/~varaiya/
Root-URL: 
Title: Models and Performance of Real-Time Disk Access Policies  
Author: James C. Yee and Pravin Varaiya 
Keyword: Multimedia, Real-Time, Disk Access  
Address: Berkeley, CA, 94720, USA  
Affiliation: Electrical Engineering and Computer Sciences Department, University of California at Berkeley,  
Abstract: Previous work on real-time disk scheduling is largely based on simulation or on combinatorial optimization results applicable to a limited class of scheduling policies. This paper presents new models for analyzing access policies of a single disk system, and numerical and simulation results to illustrate and validate the analysis. Our approach to synchronizing disk allocation uses fluid approximations and analytical techniques from manufacturing system scheduling problems and the theory of dynamical systems. The approach allows us to examine both the steady state and transient (in terms of stability and convergence rate) behavior of the system under a variety of policies. Some results can also be extended to the study of disk array systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Steinmetz, </author> <title> "Data Compression in Multimedia Computing Principles and Techniques," </title> <journal> Multimedia Systems, </journal> <volume> vol. 1, </volume> <month> Feb. </month> <year> 1994. </year>
Reference-contexts: Some amount of jitter is allowed in the presentation rates, depending on the application and user preference. For example, delay jitter of between 50-150ms/frame can be expected for video. Media Type Presentation Rate <ref> [1, 2, 3] </ref> CD audio (stereo) 176.4KB/s NTSC (digitized) 129Mbps CCITT H.261 px64Kbps JPEG (variable) 2-10MB/s MPEG-1 (variable) 1.2-1.9Mbps MPEG-2 (variable) 2-80Mbps Table 1: Media Types and Presentation Rates The storage system is one such system. <p> By sampling the state space at the switching epochs, a N = 3 closed SAS can be reduced to a 1-D problem, as an iterative <ref> [0; 1] </ref> 7! [0; 1] map. Such maps have been studied in the theory of ergodicity [26], and it is possible to calculate the stationary density of the state distribution. In [19], Chase extended the analysis to higher dimension closed SAS under the same clearing policy. <p> By sampling the state space at the switching epochs, a N = 3 closed SAS can be reduced to a 1-D problem, as an iterative <ref> [0; 1] </ref> 7! [0; 1] map. Such maps have been studied in the theory of ergodicity [26], and it is possible to calculate the stationary density of the state distribution. In [19], Chase extended the analysis to higher dimension closed SAS under the same clearing policy.
Reference: [2] <author> R. Steinmetz, </author> <title> "Data Compression in Multimedia Computing Standard and Systems," </title> <journal> Multimedia Systems, </journal> <volume> vol. 1, </volume> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: Some amount of jitter is allowed in the presentation rates, depending on the application and user preference. For example, delay jitter of between 50-150ms/frame can be expected for video. Media Type Presentation Rate <ref> [1, 2, 3] </ref> CD audio (stereo) 176.4KB/s NTSC (digitized) 129Mbps CCITT H.261 px64Kbps JPEG (variable) 2-10MB/s MPEG-1 (variable) 1.2-1.9Mbps MPEG-2 (variable) 2-80Mbps Table 1: Media Types and Presentation Rates The storage system is one such system.
Reference: [3] <author> A. N. Netravali and B. G. </author> <title> Haskell, Digital Pictures Representation and Compression. </title> <publisher> Plenum Press, </publisher> <year> 1988. </year>
Reference-contexts: Some amount of jitter is allowed in the presentation rates, depending on the application and user preference. For example, delay jitter of between 50-150ms/frame can be expected for video. Media Type Presentation Rate <ref> [1, 2, 3] </ref> CD audio (stereo) 176.4KB/s NTSC (digitized) 129Mbps CCITT H.261 px64Kbps JPEG (variable) 2-10MB/s MPEG-1 (variable) 1.2-1.9Mbps MPEG-2 (variable) 2-80Mbps Table 1: Media Types and Presentation Rates The storage system is one such system.
Reference: [4] <author> H. M. Sierra, </author> <title> An Introduction to Direct Access Storage Devices. </title> <publisher> Academic Press, Inc., </publisher> <year> 1990. </year>
Reference-contexts: Not considered here are the possible variations in storage density (zones), multiple heads, head switching delays, start-up delays, thermal recalibration delays, etc. See <ref> [4] </ref> for details on how a disk operates.
Reference: [5] <institution> American National Standard for Information Systems, "ANSI X3.131-1994 American National Standard for Information Systems Small Computer System Interface 2 (SCSI-2)," </institution> <type> tech. rep., </type> <institution> ANSI, </institution> <month> Jan. </month> <year> 1994. </year>
Reference-contexts: The performance of a disk storage system is often expressed in terms of max/avg seek delay and min/sustained/max throughput. Table 3 lists typical disk seek times and throughput for disk reads. Data is communicated between the server and the disk using a device interface protocol such as SCSI-2 <ref> [5] </ref>. Available interface throughput is usually higher than that of the disk (e.g., 20-40MBps with fast-wide SCSI-2), so we treat the interface as trans parent in the analysis. Given such characteristics, it is necessary to pre-fetch data to make data immediately available while the disk is busy seeking.
Reference: [6] <author> M. Seltzer, P. Chen, and J. Ousterhout, </author> <title> "Disk Scheduling Revisited," </title> <booktitle> in Proceedings of the Winter 1990 USENIX Technical Conference, </booktitle> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: This results in fairer service, but often lowers utilization. Hybrid and prioritized versions of these policies have been shown to perform well by Seltzer et al in <ref> [6] </ref>. The polling system shown in Figure 4 has been used to study the performance of the SCAN policy [7].
Reference: [7] <author> H. Takagi, </author> <title> Analysis of Polling Systems. </title> <publisher> The MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: This results in fairer service, but often lowers utilization. Hybrid and prioritized versions of these policies have been shown to perform well by Seltzer et al in [6]. The polling system shown in Figure 4 has been used to study the performance of the SCAN policy <ref> [7] </ref>. With each b i modeling the queue for jobs for track i, the server goes from buffer b 1 to b N in ascending order, then back to b 1 in descending order. <p> Most results in the study of polling systems pertain to systems with fixed cyclic polling order (i.e., round-robin). A comprehensive survey of polling system results is available in <ref> [7] </ref>. By allowing dynamic service order, Browne and Yechiali in [21] considered the optimization of polling systems and analyzed the performance of a polling system with pseudo-periodic service order and switching delay.
Reference: [8] <author> H. Levy and M. Sidi, </author> <title> "Polling Systems: Application, Modeling, </title> <journal> and Optimization," IEEE Trans. on Communications, </journal> <volume> vol. 38, </volume> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: The service time is usually uniformly distributed, and the service order exhaustive, i.e., each scheduled buffer is served until it empties. In <ref> [8] </ref>, Levy et al provide a good summary of polling system applications. 3.1 Real-Time Disk Scheduling Real-time disk scheduling can be modeled as a scheduling problem where each sector access is a task with a deadline.
Reference: [9] <author> S. Chen, J. A. Stankovic, J. F. Kurose, and D. Towsley, </author> <title> "Performance Evaluation of Two New Disk Scheduling Algorithms for Real-Time Systems," </title> <journal> Journal of Real-Time Systems, </journal> <volume> vol. 3, </volume> <pages> pp. 307-336, </pages> <year> 1991. </year>
Reference-contexts: Nevertheless, the non real-time results discussed above have been extended by several researchers to heuristic policies based on the ED result. Much existing work stems from the combinatorial optimization approach, but such formulations lead to complex analysis. Kurose et al in <ref> [9] </ref> evaluated in a testbed the performance of SSEDO (Shortest Seek Earliest Deadline by Ordering) and SSEDV (Shortest Seek Earliest Deadline by Value). Both policies sort requests by deadline, but SSEDO uses also a weighted seek distance and SSEDV checks whether deadlines are feasible prior to service.
Reference: [10] <author> P. S. Yu, M.-S. Chen, and D. D. Kandlur, </author> <title> "Design and Analysis of a Group Sweeping Scheme for Multimedia Storage Management," </title> <booktitle> in Proceedings of the 3rd International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <publisher> Springer-Verlag, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: Both policies sort requests by deadline, but SSEDO uses also a weighted seek distance and SSEDV checks whether deadlines are feasible prior to service. They were found to perform much better than the SSF and SCAN policies. In <ref> [10] </ref>, Yu et al studied the performance of variations of the SCAN policy which provide fairness by servicing only a subset of streams per sweep. <p> But this result is not applicable for cor related departures, as in the deterministic rate case. 6.2 Remarks By dropping the periodic requirement, the policies in this section differ fundamentally from previously studied policies <ref> [11, 10, 12, 13, 14] </ref>. We see in x 6.1.1 that periodic behavior and predictable resource requirements can be achieved without explicitly enforcing a periodic trace. This also means the PPF is more robust than the PF in the face of perturbations, which we illustrate in the simulations of x9.3.2.
Reference: [11] <author> D. P. Anderson, Y. Osawa, and R. Govindan, </author> <title> "Real-Time Disk Storage and Retrieval of Digital Audio/Video Data," </title> <type> tech. rep., </type> <institution> U.C. Berke-ley, EECS Dept., </institution> <note> Report No. UCB/CSD 91/646, </note> <month> August </month> <year> 1991. </year>
Reference-contexts: Recognizing the need for simpler policies and the fact that data may be placed to bound seek delays, several deterministic models have been proposed to study periodic policies and associated data placement. With periodic policies, data streams are accessed in a periodic order. In <ref> [11] </ref>, Anderson et al proposed an iterative algorithm for calculating the minimum period and approximate buffer requirement for accessing multiple fixed rate streams on a block by block basis. Simulation results on the buffer requirements for certain classes of open loop and closed loop periodic policies were obtained. <p> Shown in Figure 12a) is the total buffer required using the open-loop periodic policy for accessing multiple files of the same rate ( i = 1:4M bps) as calculated using Eq. 5. These values closely match those obtained by simulation for periodic policies by Anderson et al in <ref> [11] </ref>, shown in seek delay in the analytical model and quantization effects from the block oriented disk access simulation. We observe that the buffer requirements are not linear with N , which is clear from Eq. 5, since we have B = Nffi 1N . <p> But this result is not applicable for cor related departures, as in the deterministic rate case. 6.2 Remarks By dropping the periodic requirement, the policies in this section differ fundamentally from previously studied policies <ref> [11, 10, 12, 13, 14] </ref>. We see in x 6.1.1 that periodic behavior and predictable resource requirements can be achieved without explicitly enforcing a periodic trace. This also means the PPF is more robust than the PF in the face of perturbations, which we illustrate in the simulations of x9.3.2. <p> The disk system simulation adapted code used in <ref> [11] </ref> by An-derson, with parameters in Table 4. We also simulate the SAS model with added random perturbations to the deterministic fluid traffic model or the seek delay. The seek delays are calculated based on the current block location, and the distance to the block (s) to be accessed.
Reference: [12] <author> J. Gemmell and S. Christodoulakis, </author> <title> "Principles of Delay-Sensitive Multimedia Data Storage and Retrieval," </title> <journal> ACM Transactions on Information Systems, </journal> <month> January </month> <year> 1992. </year>
Reference-contexts: Simulation results on the buffer requirements for certain classes of open loop and closed loop periodic policies were obtained. In <ref> [12] </ref>, Gemmell et al computed bounds on initial delay, seek delay, block size, or buffer utilization for periodic policies and identical fixed-rate streams. <p> But this result is not applicable for cor related departures, as in the deterministic rate case. 6.2 Remarks By dropping the periodic requirement, the policies in this section differ fundamentally from previously studied policies <ref> [11, 10, 12, 13, 14] </ref>. We see in x 6.1.1 that periodic behavior and predictable resource requirements can be achieved without explicitly enforcing a periodic trace. This also means the PPF is more robust than the PF in the face of perturbations, which we illustrate in the simulations of x9.3.2.
Reference: [13] <author> P. V. Rangan and H. M. Vin, </author> <title> "Designing File Systems for Digital Video and Audio," </title> <booktitle> in Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <month> October 13-15 </month> <year> 1991. </year>
Reference-contexts: Bounds on the block size, inter-block seek delay, and the number of fixed rate streams that can be accessed are determined for specific periodic policies by Ran-gan et al in <ref> [13, 14] </ref>, where deterministic seek delay bounds are associated with each accessed sector. 4 Our Approach We also subscribe to the principle that disk scheduling policies should be simple, and control over data placement should be exerted to bound seek delays. <p> But this result is not applicable for cor related departures, as in the deterministic rate case. 6.2 Remarks By dropping the periodic requirement, the policies in this section differ fundamentally from previously studied policies <ref> [11, 10, 12, 13, 14] </ref>. We see in x 6.1.1 that periodic behavior and predictable resource requirements can be achieved without explicitly enforcing a periodic trace. This also means the PPF is more robust than the PF in the face of perturbations, which we illustrate in the simulations of x9.3.2.
Reference: [14] <author> P. V. Rangan and H. M. Vin, </author> <title> "Designing a MultiUser HDTV Storage Server," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: Bounds on the block size, inter-block seek delay, and the number of fixed rate streams that can be accessed are determined for specific periodic policies by Ran-gan et al in <ref> [13, 14] </ref>, where deterministic seek delay bounds are associated with each accessed sector. 4 Our Approach We also subscribe to the principle that disk scheduling policies should be simple, and control over data placement should be exerted to bound seek delays. <p> But this result is not applicable for cor related departures, as in the deterministic rate case. 6.2 Remarks By dropping the periodic requirement, the policies in this section differ fundamentally from previously studied policies <ref> [11, 10, 12, 13, 14] </ref>. We see in x 6.1.1 that periodic behavior and predictable resource requirements can be achieved without explicitly enforcing a periodic trace. This also means the PPF is more robust than the PF in the face of perturbations, which we illustrate in the simulations of x9.3.2.
Reference: [15] <author> J. Gruber and L. Strawczynski, </author> <title> "Subjective Effects of Variable Delay and Speech Loss in Dynamically Managed Voice Systems," </title> <booktitle> in Proceedings of GLOBECOM, </booktitle> <year> 1982. </year> <pages> pp. </pages> <month> F7.3.1-F7.3.5. </month>
Reference-contexts: Therefore, fast convergence to a stable region in system behavior is not crucial. On the other hand, since the human ear is sensitive even to occasional dead air and other discontinuities <ref> [15] </ref>, when accessing audio data it is best to localize in time any errors and require fast convergence in the system behavior. We take a deterministic fluid approach recently developed to model manufacturing systems.
Reference: [16] <author> J. R. Perkins and P. Kumar, </author> <title> "Stable, Distributed, Real-Time Scheduling of Flexible Manufacturing/Assembly/Disassembly Systems," </title> <journal> IEEE Trans. on Automatic Control, </journal> <month> February </month> <year> 1989. </year>
Reference-contexts: We take a deterministic fluid approach recently developed to model manufacturing systems. Inspired by the work of Perkins and Kumar <ref> [16] </ref> in the area of Flexible Manufacturing Systems (FMS) 3 , Chase, Serrano, and Ramadge in [17] defined the Switched Server System (SSS) of Figure 5 and the Switched Arrival System (SAS) of Figure 6. <p> The FAF is derived from the Clear-A-Fraction (CAF) policy for open SSS (see Figure 5) examined by Perkins and Kumar in <ref> [16] </ref>. (A system is open if &lt; 1; ffi &gt; 0. <p> That is, each FAF trajectory component x i is equivalent to the CAF trajectory component under the constraint x i = dB i z i e + . Results from <ref> [16] </ref> on the performance of the CAF include: * All CAF policies are stable, i.e., z (t) &lt; 1; 8t; * An explicit upper bound B on lim sup z (t) under CAF; * An explicit lower bound C for x (0) such that If z (0) &gt; C then z <p> Similarly, we have: Proposition 6 If 2 F AF and 0 &lt; B i &lt; 1, then is complete. Analogous to Theorem 1 of <ref> [16] </ref>, which gives upper bounds on lim sup of buffer utilization as well as upper bounds on x (0) for achieving the bound for all t, we have the following bounds on the total buffer requirement for FAF policies. Theorem 4 For any 2 F AF : 1. <p> The main implication of the above bounds is that the policies can be implemented with finite buffers while guaranteeing bounded starvation. However, simulation results indicate these bounds are not very tight and do not tell us much about the system dynamics. Theorem 2 in <ref> [16] </ref> showed that a lower bound for the lim inf of average x (t) for all stable policies exists. This means no stable policy exists for which the buffer level is less than a certain lower bound.
Reference: [17] <author> C. J. Chase, J. Serrano, and P. Ramadge, </author> <title> "Interesting Examples of Supervised Continuous Variable Systems," </title> <booktitle> in Proceedings of the Conference on Decision and Control, </booktitle> <month> December </month> <year> 1990. </year> <month> pg. </month> <pages> 3410-3417. </pages>
Reference-contexts: We take a deterministic fluid approach recently developed to model manufacturing systems. Inspired by the work of Perkins and Kumar [16] in the area of Flexible Manufacturing Systems (FMS) 3 , Chase, Serrano, and Ramadge in <ref> [17] </ref> defined the Switched Server System (SSS) of Figure 5 and the Switched Arrival System (SAS) of Figure 6. Both systems provide insights into the disk system behavior and, as shown in the next section, the SAS is directly applicable to modeling the disk.
Reference: [18] <author> C. J. Chase and P. Ramadge, </author> <title> "Periodicity and Chaos from Switched Flow Systems: Contrasting Examples of Discretely Controlled Continuous Systems," </title> <journal> IEEE Trans. on Automatic Control, </journal> <month> January </month> <year> 1993. </year>
Reference-contexts: Both systems provide insights into the disk system behavior and, as shown in the next section, the SAS is directly applicable to modeling the disk. Under specific policies, the behavior of the SSS and SAS systems are found to be quite different by Chase and Ramadge in <ref> [18, 19] </ref>. Whereas the SAS appears "chaotic" with dense unstable periodic points and sensitivity to initial conditions, the SSS has been shown to be eventually periodic. <p> We see though the trajectories differ visibly, they exhibit very similar limit cycles and replicating patterns. 7.3 FAF Probabilistic Properties Such chaotic behavior in a deterministic system is best characterized statistically, as in the case of the closed SAS under a clearing policy studied in <ref> [18, 19] </ref>. By sampling the state space at the switching epochs, a N = 3 closed SAS can be reduced to a 1-D problem, as an iterative [0; 1] 7! [0; 1] map.
Reference: [19] <author> C. J. Chase, </author> <title> Analysis of Dynamics in Continuous Variable Systems with a Scheduled Controller. </title> <type> PhD thesis, </type> <institution> Princeton University, </institution> <year> 1992. </year>
Reference-contexts: Both systems provide insights into the disk system behavior and, as shown in the next section, the SAS is directly applicable to modeling the disk. Under specific policies, the behavior of the SSS and SAS systems are found to be quite different by Chase and Ramadge in <ref> [18, 19] </ref>. Whereas the SAS appears "chaotic" with dense unstable periodic points and sensitivity to initial conditions, the SSS has been shown to be eventually periodic. <p> Roughly speaking, more frequent switching decreases x (t), and less frequent switching increases x (t). We define: Definition 1 u (t) = the utilization of during [0; t). In addition to loss, fairness is an important performance measure. We use the completeness definition from <ref> [19] </ref>. Definition 2 Given : is complete if for every initial condition x (0), 9n &gt; 0 s.t. [k;k+n1] contains every element of for 8k 1. <p> Like the FAF, the clearing policy examined by Shar-ifnia et al in [20] for open SSS also has the trajectory constrained to a compact region. In our case, the compact region is defined by a set of hyperplanes. 7.2.1 Steady State Properties In <ref> [19] </ref>, Chase showed different types of limiting behavior for closed SAS, and completeness of the CAF policy for open SSS. Similarly, we have: Proposition 6 If 2 F AF and 0 &lt; B i &lt; 1, then is complete. <p> We see though the trajectories differ visibly, they exhibit very similar limit cycles and replicating patterns. 7.3 FAF Probabilistic Properties Such chaotic behavior in a deterministic system is best characterized statistically, as in the case of the closed SAS under a clearing policy studied in <ref> [18, 19] </ref>. By sampling the state space at the switching epochs, a N = 3 closed SAS can be reduced to a 1-D problem, as an iterative [0; 1] 7! [0; 1] map. <p> Such maps have been studied in the theory of ergodicity [26], and it is possible to calculate the stationary density of the state distribution. In <ref> [19] </ref>, Chase extended the analysis to higher dimension closed SAS under the same clearing policy. To illustrate the approach, we examine a closed (ffi = 0) FAF system with N = 3.
Reference: [20] <author> A. Sharifnia, M. Caramanis, and S. B. Gersh-win, </author> <title> "Dynamic Setup Scheduling and flow control in Manufacturing Systems," Journal of Discrete Event Dynamic Systems, </title> <booktitle> pg. </booktitle> <pages> 149-175, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Under specific policies, the behavior of the SSS and SAS systems are found to be quite different by Chase and Ramadge in [18, 19]. Whereas the SAS appears "chaotic" with dense unstable periodic points and sensitivity to initial conditions, the SSS has been shown to be eventually periodic. In <ref> [20] </ref>, Sharifnia et al identified an embedded discrete time linear system in the SSS under a specific policy, and demonstrated its stability and limiting behavior. Results on polling systems [21, 22] are also applicable to the analysis of the SAS. <p> The two types of periodic policies discussed in this section, open loop and periodic fill, were analyzed in [23]. The approach is similar to that in <ref> [20] </ref>. We analyze the time-sampled trajectory using linear system theory with non-negative matrices [24]. <p> Like the FAF, the clearing policy examined by Shar-ifnia et al in <ref> [20] </ref> for open SSS also has the trajectory constrained to a compact region.
Reference: [21] <author> S. Browne and U. Yechiali, </author> <title> "Dynamic Priority Rules for Cyclic-Type Queues," </title> <booktitle> Advances in Applied Probability, </booktitle> <volume> vol. 21, </volume> <pages> pp. 432-450, </pages> <year> 1989. </year>
Reference-contexts: In [20], Sharifnia et al identified an embedded discrete time linear system in the SSS under a specific policy, and demonstrated its stability and limiting behavior. Results on polling systems <ref> [21, 22] </ref> are also applicable to the analysis of the SAS. We next describe the application of the SAS model in detail. 4.1 System Model N files with rate requirement i &gt; 0 are stored on a disk. <p> Most results in the study of polling systems pertain to systems with fixed cyclic polling order (i.e., round-robin). A comprehensive survey of polling system results is available in [7]. By allowing dynamic service order, Browne and Yechiali in <ref> [21] </ref> considered the optimization of polling systems and analyzed the performance of a polling system with pseudo-periodic service order and switching delay. For a system with Poisson arrivals and switching delays, it was shown in [21] that the cycle length for a pseudo-periodic policy can be minimized and maximized by two <p> By allowing dynamic service order, Browne and Yechiali in <ref> [21] </ref> considered the optimization of polling systems and analyzed the performance of a polling system with pseudo-periodic service order and switching delay. For a system with Poisson arrivals and switching delays, it was shown in [21] that the cycle length for a pseudo-periodic policy can be minimized and maximized by two index-driven policies with indexes dependent on the amount of work ( P in the buffers.
Reference: [22] <author> O. Fabian and H. Levy, </author> <title> "Pseudo-Cyclic Policies for Multi-Queue Single Server Systems," </title> <type> tech. rep., </type> <institution> Tel Aviv University, Dept. of Computer Sciences, School of Mathematics, </institution> <month> October </month> <year> 1992. </year> <type> preprint. </type>
Reference-contexts: In [20], Sharifnia et al identified an embedded discrete time linear system in the SSS under a specific policy, and demonstrated its stability and limiting behavior. Results on polling systems <ref> [21, 22] </ref> are also applicable to the analysis of the SAS. We next describe the application of the SAS model in detail. 4.1 System Model N files with rate requirement i &gt; 0 are stored on a disk. <p> On the basis of these results, in <ref> [22] </ref> Fabian and Levy showed that the cycle maximizing and minimizing policies bound from below and above, respectively, the expected waiting time of a symmetric system with generally distributed independent arrivals and non-zero switching delays. By symmetric we mean identical arrival and service statistics at all stations. Simulation results in [22] <p> <ref> [22] </ref> Fabian and Levy showed that the cycle maximizing and minimizing policies bound from below and above, respectively, the expected waiting time of a symmetric system with generally distributed independent arrivals and non-zero switching delays. By symmetric we mean identical arrival and service statistics at all stations. Simulation results in [22] support the validity of the bounds for asymmetric systems. <p> Using such B i , we know the state trajectory converges to a bounded loss limit cycle. From x 5.1.1, we also see that dec requires less buffer than inc to achieve zero starvation. In <ref> [22] </ref>, assuming GI (general independent) arrivals and infinite capacity, polling system scheduling policies analogous to dec and inc were shown to minimize and maximize, respectively, the workload in a symmetric system.
Reference: [23] <author> J. C. Yee and P. Varaiya, </author> <title> "An Analytical Model for Real-Time Multimedia Disk Scheduling," </title> <booktitle> in Proceedings of the 3rd International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <publisher> Springer-Verlag, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: The two types of periodic policies discussed in this section, open loop and periodic fill, were analyzed in <ref> [23] </ref>. The approach is similar to that in [20]. We analyze the time-sampled trajectory using linear system theory with non-negative matrices [24]. <p> For notational simplicity and without loss of generality, most of the analysis below is for round-robin periodic policies with i = i; i = 1; : : :; N . 5.1 Open Loop Periodic Policy As described in <ref> [23] </ref>, with an open loop periodic policy that serves each b i for duration l i , we can obtain a discrete time system model by sampling the continuous state variable x (t) at appropriate time in stants during cycle j.
Reference: [24] <author> R. Varga, </author> <title> Matrix Iterative Analysis. </title> <publisher> Prentice-Hall, </publisher> <year> 1962. </year>
Reference-contexts: The two types of periodic policies discussed in this section, open loop and periodic fill, were analyzed in [23]. The approach is similar to that in [20]. We analyze the time-sampled trajectory using linear system theory with non-negative matrices <ref> [24] </ref>.
Reference: [25] <author> D. G. Luenberger, </author> <title> Linear and Non-linear Programming, 2nd Edition. </title> <publisher> Addison-Wesley, </publisher> <year> 1984. </year>
Reference-contexts: The corresponding dual problem is: maximize: fi T b s.t.: fi T A c T Because A 1 is strictly positive, the solution to the dual problem, fi fl , is also strictly positive. From this observation and sensitivity results from linear pro gramming (see chapter 4 of <ref> [25] </ref>), we have: b changed to b + b ) c T l fl changed to c T l fl + fi T fl b This shows how buffer requirements are affected by perturbations in seek delay, the vector b. 5.2 Periodic Fill Policy Now consider the class of periodic fill
Reference: [26] <author> A. Lasota and M. Mackey, </author> <title> Probabilistic Properties of Deterministic Systems. </title> <publisher> Cambridge University Press, </publisher> <year> 1985. </year>
Reference-contexts: By sampling the state space at the switching epochs, a N = 3 closed SAS can be reduced to a 1-D problem, as an iterative [0; 1] 7! [0; 1] map. Such maps have been studied in the theory of ergodicity <ref> [26] </ref>, and it is possible to calculate the stationary density of the state distribution. In [19], Chase extended the analysis to higher dimension closed SAS under the same clearing policy. To illustrate the approach, we examine a closed (ffi = 0) FAF system with N = 3.
Reference: [27] <author> E. K. Lee and R. H. Katz, </author> <title> "An Analytical Performance Model of Disk Arrays," </title> <booktitle> in Proceedings of SIGMETRICS '93, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: The use of disk arrays is one way to alleviate this fundamental problem; higher throughput is achieved by storing data in multiple disks and accessing multiple disks simultaneously. Most performance modeling and analysis of disk arrays are for non real-time access. For example, in <ref> [27] </ref> the steady state utilization of non real-time disk array access was examined. However, such results do not extend to the real-time case. Let us look at the real-time access of N files at rates i from a disk array with L disks.
Reference: [28] <author> E. K. Lee and R. H. Katz, </author> <title> "The Performance of Parity Placement in Disk Arrays," </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 42, </volume> <month> June </month> <year> 1993. </year>
Reference-contexts: Various mechanisms such as adding parity blocks and redundancy have been devised to counter this effect, but we do not study these issues here because it has been shown by simulation <ref> [28] </ref> that good performance can still be obtained with both contiguous striping and parity blocks in place. policy for each disk.
Reference: [29] <author> P. S. Yu, M.-S. Chen, and D. D. Kandlur, </author> <title> "Grouped Sweeping Scheduling for DASD-based Multimedia Storage Management," </title> <journal> Multimedia Systems, </journal> <volume> vol. 1, no. 3, </volume> <year> 1993. </year>
Reference-contexts: Intuitively, the minimum p i is p min i := minfnjnR &gt; i g, and any larger p i will demand more disk throughput than necessary, resulting in buffering of the excess data. However, most existing work on real-time disk array access assume full-striping <ref> [29] </ref> regardless of the individual file access requirements, sometimes in addition to high load [30] assumptions. The full-striping assumption simplifies analysis by reducing the behavior of the array close to that of a single disk, but at the expense of using additional buffer and bandwidth.
Reference: [30] <author> F. A. Tobagi, J. Pang, R. Baird, and M. Gang, </author> <title> "Streaming raid a disk array management system for video files," </title> <booktitle> in First ACM International Conference on Multimedia, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: However, most existing work on real-time disk array access assume full-striping [29] regardless of the individual file access requirements, sometimes in addition to high load <ref> [30] </ref> assumptions. The full-striping assumption simplifies analysis by reducing the behavior of the array close to that of a single disk, but at the expense of using additional buffer and bandwidth.
Reference: [31] <author> P. Chen and D. Patterson, </author> <title> "Maximizing Performance in a Striped Disk Array," </title> <booktitle> in Proceedings of SIGARCH, </booktitle> <year> 1990. </year>
Reference-contexts: We conjecture that the general trend is as pictured in Figure 19c). Given the same A, a larger S increases both u and c. In Figure 19d) we see how stripe size p varies with S, for fixed A. In <ref> [31] </ref> it was found for non real-time access that the choice of S depends primarily on c and is relatively insensitive to A.
Reference: [32] <institution> Jade Simulations International, Inc, Sim++, Release 3.8. </institution> <year> 1992. </year>
Reference: [33] <author> K. M. Nichols, </author> <title> "Performance Studies of Digital Video in a Client/Server Environment," </title> <booktitle> in Proceedings of the 3rd International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <publisher> Springer-Verlag, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: The packet delay is protocol dependent, and the initial delay can be set to prevent all clients from starting their requests at the same time. The simulation was extended from a client-server video system simulation by Nichols <ref> [33] </ref>. 9.3 Disk Simulation Results The simulation results are presented mostly in the form of trajectory and loss plots, with buffer size and loss in units of bytes.
Reference: [34] <author> J. C. Yee, </author> <title> Real-Time Scheduling Policies for Multimedia Storage Systems. </title> <type> PhD thesis, </type> <institution> UC Berke-ley, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: For array systems, we described some general proper-ties in their operations and extended simple periodic single disk policies. Simulation results demonstrated the tradeoffs between predictability and robustness, and validate the approximations made in the analysis. See <ref> [34] </ref> for details of the results presented here. In the future, more simulation work is needed to quantify the relative merits of the policies.
Reference: [35] <author> J. C. Yee and K. Nichols, </author> <title> "Server and Buffer Allocation in a Client-Server Multimedia System," </title> <booktitle> in Proceedings of the Singapore International Conference on Networks/International Conference on Information Engineering, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: Though the results here are presented in the context of real-time disk scheduling, the techniques employed can be applied to other resource allocation problems in multimedia systems. For example, in <ref> [35] </ref> the same approach was applied to analyzing the performance of network protocols in a video-on-demand system. Acknowledgements Partial support was provided by a grant from Pacific Bell and Apple Computer. This work was done while the first author was at U.C. Berkeley.
References-found: 35

