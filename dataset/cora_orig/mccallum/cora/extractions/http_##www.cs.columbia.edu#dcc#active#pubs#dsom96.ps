URL: http://www.cs.columbia.edu/dcc/active/pubs/dsom96.ps
Refering-URL: 
Root-URL: 
Email: yemini-@cs.columbia.edu  
Title: TOWARDS PROGRAMMABLE NETWORKS  
Author: Yechiam Yemini Sushil da Silva 
Date: April 15, 1996  
Address: -dasilva,  
Affiliation: Department of Computer Science Columbia University  
Abstract: Intermediate nodes (e.g., routers, switches) of current networks, in contrast with end nodes (e.g., PCs workstations), are vertically integrated closed systems. Their functions, mostly implemented by embedded software, are rigidly built-in by intermediate nodes vendors. Vendors must follow designs dictated by slow and intractable standard committees rather than pursue rapid introduction of innovative cost-effective technologies. There is thus a need for new technologies that would enable programming intermediate nodes with the same simplicity of programming end-nodes. This paper describes the NetScript project, pursuing agent-based middleware for programming functions of intermediate network nodes. Delegated agents are used to deploy functions in intermediate nodes. The NetScript programming language provides means to script processing of packet streams; it is particularly suitable to program routing, packet analyzers or signalling functions. This paper describes an architecture for programmable network nodes; middleware for agent-based programming of these nodes; the NetScript language to program node functions and applications of these technologies to create programmable SNMP agents, protocol analyzers, signalling and routing protocols and firewalls. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> SMARTS, </author> <title> SMARTS Operational Server Manual, . 1994, System Management Arts. </title>
Reference-contexts: The Agent Services layer provides a portable multi-threaded execution environment to support delegation, execution and control of agent programs. It supports, additionally, message communication services among agents. The Agent Services layer uses the SMARTS Operations Server (SOS) implementation <ref> [1] </ref> of the management by delegation agents [2]. It provides a library that enables NetScript programs to delegate, execute and control agents at VNEs. 4 The NVN Connectivity Services module is responsible to interact with the underlying physical environment to allocate and maintain VLs to neighboring VNEs.
Reference: [2] <author> Yemini, Y., G. Goldszmidt, and S. Yemini. </author> <title> Network Management by Delegation. </title> <booktitle> in The Second International Symposium on International Network Management. 1991. </booktitle> <address> Washington DC. </address> <note> [3] daSilva, </note> <author> S. and Y. Yemini, </author> <title> NetScript Language Tutorial and Reference, . 1996, </title> <institution> Columbia University Computer Science Department: </institution> <address> New York. </address>
Reference-contexts: The Agent Services layer provides a portable multi-threaded execution environment to support delegation, execution and control of agent programs. It supports, additionally, message communication services among agents. The Agent Services layer uses the SMARTS Operations Server (SOS) implementation [1] of the management by delegation agents <ref> [2] </ref>. It provides a library that enables NetScript programs to delegate, execute and control agents at VNEs. 4 The NVN Connectivity Services module is responsible to interact with the underlying physical environment to allocate and maintain VLs to neighboring VNEs.
Reference: [4] <author> Tennenhouse, </author> <title> D.L. and D.J. Wetherall, Towards Active Networks, . 1996, </title> <institution> MIT Laboratory for Computer Science. </institution>
Reference-contexts: These agents parse, interpret, and forward incoming private or standard signalling cells set up and tear down circuits in the network. 5. RELATED WORK NetScript shares similar goals with the Active Networks <ref> [4] </ref> initiative at MIT and the Switch-Ware [5] effort at the University of Pennsylvania and Bellcore. Like NetScript, these projects seek to make the network programmable. The Active Network extends the concept of a packet from a passive data object to one that might contain a fully-functional active program.
Reference: [5] <author> Smith, J.M., et al., SwitchWare: </author> <title> Accellerating Network Evolution (White Paper), . 1996, </title> <institution> University of Pennsylvania Computer Science Department. </institution>
Reference-contexts: These agents parse, interpret, and forward incoming private or standard signalling cells set up and tear down circuits in the network. 5. RELATED WORK NetScript shares similar goals with the Active Networks [4] initiative at MIT and the Switch-Ware <ref> [5] </ref> effort at the University of Pennsylvania and Bellcore. Like NetScript, these projects seek to make the network programmable. The Active Network extends the concept of a packet from a passive data object to one that might contain a fully-functional active program.
Reference: [6] <author> Borenstein, N. </author> <title> Email with a Mind of its Own: The Safe-Tcl Language for Enabled Mail. </title> <booktitle> in IFIP International Conference. 1994. </booktitle> <address> Barcelona, Spain. </address>
Reference-contexts: The central difference between our work and Active Net or SoftSwitch is our focus on the programmability of networks. NetScript uses a single, universal language, specifically designed for protocol implementation in a programmable network; the Active Network project currently uses Safe-Tcl <ref> [6] </ref> while SoftSwitch uses Java [7]. We believe that a single language based on the right model can greatly simplify protocol construction, can be more effectively optimized for efficient performance, is easier to secure, and will allow us maximum flexibility in experimenting with appropriate programming features.
Reference: [7] <author> Gosling, J. and H. McGilton, </author> <title> The Java Language Environment: A White Paper, . 1995, Sun Microsystems. </title>
Reference-contexts: The central difference between our work and Active Net or SoftSwitch is our focus on the programmability of networks. NetScript uses a single, universal language, specifically designed for protocol implementation in a programmable network; the Active Network project currently uses Safe-Tcl [6] while SoftSwitch uses Java <ref> [7] </ref>. We believe that a single language based on the right model can greatly simplify protocol construction, can be more effectively optimized for efficient performance, is easier to secure, and will allow us maximum flexibility in experimenting with appropriate programming features.
Reference: [8] <author> White, </author> <title> J.E., Telescript Technology: The Foundation for the Electronic Marketplace, . 1994, General Magic. </title>
Reference-contexts: Another difference is that NetScript treats the network as a single programmable abstraction (the NVN) rather than an heterogeneous collection of programmable routers, switches and end-nodes. We believe that this approach will enable programming of massive Internet-sized networks. Java and Telescript <ref> [8] </ref> are programming languages also intended for networked applications. Java is targeted as a language for programming user-interface functionality in Web browsers. TeleScript is an agent-based language for Internet commerce. Both languages provide abstractions to support their respective domains.
References-found: 7

