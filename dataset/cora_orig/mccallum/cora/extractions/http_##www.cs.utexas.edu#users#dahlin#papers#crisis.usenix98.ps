URL: http://www.cs.utexas.edu/users/dahlin/papers/crisis.usenix98.ps
Refering-URL: http://www.cs.utexas.edu/users/dahlin/papers.html
Root-URL: 
Title: The CRISIS Wide Area Security Architecture  
Author: Eshwar Belani Amin Vahdat Thomas Anderson Michael Dahlin 
Abstract: This paper presents the design and implementation of a new authentication and access control system, called CRISIS. A goal of CRISIS is to explore the systematic application of a number of design principles to building highly secure systems, including: redundancy to eliminate single points of attack, caching to improve performance and availability over slow and unreliable wide area networks, fine-grained capabilities and roles to enable lightweight control of privilege, and complete local logging of all evidence used to make each access control decision. Measurements of a prototype CRISIS-enabled wide area file system show that in the common case CRISIS adds only marginal overhead relative to unprotected wide area accesses. 
Abstract-found: 1
Intro-found: 1
Reference: [Birrell et al. 1986] <author> A. Birrell, B. Lampson, R. Needham, and M.Schroeder. </author> <title> Global authentication without global trust. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, Cali-fornia, </address> <month> May </month> <year> 1986. </year>
Reference-contexts: Each local domain is also responsible for determining the level of trust placed in any given remote domain. A design relying on deference to a global, centralized authority is not only less flexible, but less likely to be widely adopted <ref> [Birrell et al. 1986] </ref>. * Simplicity: Simple designs are easier to understand and implement. In the context of security, simplicity is especially important to minimize the probability of an security hole resulting from an implementation error. <p> The hierarchical arrangement of CA's builds on our model of implementing roles, where principals act as CA's in creating roles with the locally trusted CA acting as the principal's parent in a global hierarchy. The manner in which the hierarchy is traversed is based on the theory presented in <ref> [Birrell et al. 1986] </ref>. In this model, a CA cannot speak for a principal who belongs to a descendant's domain, allowing separate administrative path of trust is established through the principals' least common ancestor. domains to maintain local autonomy.
Reference: [Con 1989] <author> Consultation Committee, </author> <title> International Telephone and Telegraph, International Telecommunications Union. The DirectoryAuthentication Framework, 1989. CCITT Recommendation X.509. </title>
Reference-contexts: SSL supports a wide variety of cryptographic algorithms and is being deployed into wide area applications. Finally, as will be described in the next section, we use the X.509 syntax <ref> [Con 1989] </ref> to encode all certificates in CRISIS. The ITU-T Recommendation X.509 specifies the authentication service for X.500 directories, as well as the X.509 certificate syntax. <p> Since we are building a public key system, the certificate's author need not be aware of the certificate's destination when it is created. Any principal with access to the certificate can determine the statement's author. Our certificates use the X.509 <ref> [Con 1989] </ref> standard format. CRISIS employs two basic types of certificates: * Identity Certificates: An identity certificate associates a public key with a principal for a certain period of time.
Reference: [Crispo & Lomas 1996] <author> B. Crispo and M. Lomas. </author> <title> A Certification Scheme for Electronic Commerce. </title> <booktitle> In Security Protocols International Workshop, </booktitle> <pages> pp. 19 32, </pages> <address> Cambridge UK, </address> <month> April </month> <year> 1996. </year> <note> Springer-Verlag LNCS series vol. 1189. </note>
Reference: [Dean et al. 1996] <author> D. Dean, E. Felten, and D. Wallach. </author> <title> Java Security: From HotJava to Netscape and Beyond. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <year> 1996. </year>
Reference-contexts: Similarly, Internet browsers purport to be able to safely execute Java applets, supposedly rendering traditional operating system security irrelevant. The ongoing discovery of security holes in Java verifier implementations <ref> [Dean et al. 1996, Sirer et al. 1997] </ref>, however, has led us to run remotely executing programs in a restricted environment [Goldberg et al. 1996], in addition to us ing a verifier. * Caching: CRISIS caches certificates to improve both performance and availability in the presence of wide area communication failures;
Reference: [Dig 1995] <institution> Digital Equipment Corporation. Alta Vista, </institution> <year> 1995. </year> <note> http://www.altavista.digital. com/. </note>
Reference-contexts: Today, only the most popular sites can afford to be geographically distributed; for example, Alta Vista <ref> [Dig 1995] </ref> has mirror sites on every major continent, but these mirrors are physically administered by DEC, manually kept up to date, and visible to the end user.
Reference: [Fiat & Shamir 1987] <author> A. Fiat and A. Shamir. </author> <title> How to prove yourself: Practical solutions to identification and signature problems. </title> <booktitle> In Advances in Cryptology - Crypto '86, </booktitle> <pages> pp. 186194. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: Thus, if remote login is locally authorized, the home domain may disallow the login as a matter of policy. For example, login to a competitor's machine may be disallowed to prevent spoofing attacks. 2 We present one simple scheme; other zero-knowledge algorithms such as Fiat-Shamir <ref> [Fiat & Shamir 1987] </ref> could also be utilized. a global file system. crypt a locally stored (but encrypted) private key file for the role. The private key is used to decrypt the number, which is then transmitted back to the home domain.
Reference: [Goldberg et al. 1996] <author> I. Goldberg, D. Wagner, R. Thomas, and E. Brewer. </author> <title> A Secure Environment for Untrusted Helper Applications. </title> <booktitle> In Proceedings of the Sixth USENIX Security Symposium, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: The ongoing discovery of security holes in Java verifier implementations [Dean et al. 1996, Sirer et al. 1997], however, has led us to run remotely executing programs in a restricted environment <ref> [Goldberg et al. 1996] </ref>, in addition to us ing a verifier. * Caching: CRISIS caches certificates to improve both performance and availability in the presence of wide area communication failures; while all certificates are revocable, they are given a revalidation timeout to hide short-term unavailability of the revocation authority due to <p> Second, system performance is improved by removing a communication step to a third party behind a potentially slow link. In addition to public key encryption, we employ a number of other technologies to assist in development and to reduce the chance of introducing security flaws. We use Janus <ref> [Goldberg et al. 1996] </ref> to sandbox locally running applications that are not fully trusted. Janus runs at user-level, employing the UNIX System V proc file system to intercept potentially dangerous system calls and to disallow accesses outside of each process's de fined sandbox. <p> We plan to build an interface that allows users to run jobs locally to identify the minimal set of privileges that should be transferred to the job when it is run remotely. Once a job execution request is authorized, CRISIS uses Janus <ref> [Goldberg et al. 1996] </ref> to set up a virtual machine to execute the process on the target machine, reducing the risk of violating system integrity.
Reference: [Hickman & Elgamal 1995] <author> K. Hickman and T. Elgamal. </author> <title> The SSL Protocol. In Internet RFC Draft, </title> <year> 1995. </year>
Reference: [Howard et al. 1988] <author> J. Howard, M. Kazar, S. Menees, D. Nichols, M. Satyanarayanan, R. Sidebotham, and M. West. </author> <title> Scale and Performance in a Distributed File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1):5182, </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: We have built a global file system, WebFS [Vahdat et al. 1997] that allows read/write access to files stored across the wide area. WebFS is implemented at the vnode level [Kleiman 1986], similar to other distributed file systems such as NFS [Walsh et al. 1985] or AFS <ref> [Howard et al. 1988] </ref>. To illustrate the protocol for secure file access, we consider the scenario where a process running on Node A attempts access to a file located on Node B. The example is described in Figure 5, with the individuals steps detailed below: 1.
Reference: [Jaeger & Prakash 1995] <author> T. Jaeger and A. Prakash. </author> <title> Implementation of a Discretionary Access Control Model for Script-based Systems. </title> <booktitle> In Proc. of the 8th IEEE Computer Security Foundations Workshop, </booktitle> <pages> pp. 7084, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: For example, if P 1 transfers rights to P 2 , and P 2 further transfers rights to P 3 , the trusted third party only passes on P 1 transferring rights to P 3 to any end reference monitors. Jaeger and Prakash <ref> [Jaeger & Prakash 1995] </ref> present a model for discretionary access control in a wide area environment. In their work, principals specify the subset of their privileges that are to be transferred to a script written by a potentially untrusted third party.
Reference: [Kistler & Satyanarayanan 1992] <author> J. J. Kistler and M. Satya-narayanan. </author> <title> Disconnected Operation in the Coda File System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(1):325, </volume> <month> February </month> <year> 1992. </year>
Reference-contexts: This principle was inspired by research in mobile file systems which argued that caching can improve availability, e.g., for disconnected opera tion <ref> [Kistler & Satyanarayanan 1992] </ref>. * Least Privilege: Users should have fine-grained control over the rights they delegate to programs running on their behalf, whether local or remote; to be useful, this control must be easy to specify.
Reference: [Kleiman 1986] <author> S. R. Kleiman. Vnodes: </author> <title> An Architecture For Multiple File System Types in SUN UNIX. </title> <booktitle> In Proceedings of the 1986 USENIX Summer Technical Conference, </booktitle> <pages> pp. 238247, </pages> <year> 1986. </year>
Reference-contexts: While our techniques are general, we restrict our discussion to our specific implementation environment. We have built a global file system, WebFS [Vahdat et al. 1997] that allows read/write access to files stored across the wide area. WebFS is implemented at the vnode level <ref> [Kleiman 1986] </ref>, similar to other distributed file systems such as NFS [Walsh et al. 1985] or AFS [Howard et al. 1988]. To illustrate the protocol for secure file access, we consider the scenario where a process running on Node A attempts access to a file located on Node B.
Reference: [Lampson et al. 1991] <author> B. Lampson, M. Abadi, M. Burrows, and E. Wobber. </author> <title> Authentication in Distributed Systems: Theory and Practice. </title> <booktitle> In The 13th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 165182, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: A provably secure but highly complex system architecture is unlikely to be either properly implemented by system designers or properly understood by end users (for example, leading to er rors in setting up access control lists). CRISIS is loosely based on the DEC SRC security model <ref> [Lampson et al. 1991] </ref>. Relative to their work, one of our contributions is to simplify the model by using transfer certificates as the basis of fine-grained rights transfer across the wide area. <p> Authentication allows for the identity of the principal at the opposite end of a communication link to be securely identified. We choose public key over secret key (though one can be simulated with the other <ref> [Lampson et al. 1991] </ref>) because of the synchronous communication usually required by secret key systems. Secret key systems require a trusted third party that shares a secret with every potential communication endpoint. <p> Servers provide these certificates to reference monitors when making requests on behalf of a user (as opposed to certificates describing their own rights), reducing the chance of the server being granted access on its own behalf when acting on a user's behalf. Relative to the SRC system <ref> [Lampson et al. 1991] </ref>, where reference monitors use a pull model to search for proof that a principal should be granted access, CRISIS transfer certificates reduce complexity and hence the chance that an implementation error will lead to unauthorized accesses. 4.2 Processes and Roles 4.2.1 Security Domains Given the abilities to <p> The principal also stores each role's private key encrypted by a password unique to the role in the file system. CRISIS roles are more lightweight than the roles described in other security systems (e.g., <ref> [Lampson et al. 1991] </ref>). First, they can be created by the user without requiring intervention from a centralized authority, allowing the CA to remain off-line. Next, while ACLs can be modified to describe a particular role's privileges, roles can also act as persistent lightweight capabilities. <p> However, the common case read access to a cached file stays entirely in the kernel and provides performance comparable to a file system such as NFS. 7 Related Work The conceptual framework of our security architecture is largely based on the theory presented in <ref> [Lampson et al. 1991] </ref>. In the introduction, we discussed the relationship between the DEC security work and our own. In this section, we describe a number of other efforts related to CRISIS. <p> The actual rights transferred are negotiated between the application writer and the user. In their system implementation in Taos [Wobber et al. 1993] (a secure OS based on <ref> [Lampson et al. 1991] </ref>), they add dynamic principals for running programs with some subset of a principal's privileges, observing the difficulty of creating temporary principals and updating all necessary ACLs with the new principal name. Their dynamic principals are similar to one of the applications of CRISIS transfer certificates.
Reference: [Neuman 1993] <author> B. C. Neuman. </author> <title> Proxy-Based Authorization and Accounting for Distributed Systems. </title> <booktitle> In Proceedings of the 13th International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Traditionally, both Access Control Lists (ACLs) and capabilities have been used to describe the set of principals authorized to access a particular object. Since both ACLs and capabilities have advantages in different situations, we use a hybrid model similar to that proposed in <ref> [Neuman 1993] </ref>. The targets of CRISIS ACLs are service-specific. Cur--rently, file ACLs contain lists of principal's authorized for read, write, or execute access to a particular file. Process execution ACLs are a simple list describing all principals permitted to run jobs on a given node. <p> Our work, however, is the largely orthogonal task of defining how such a framework can be used to provide redundant, high performance, and available security mechanisms for applications requiring secure remote control of wide area resources. Neuman <ref> [Neuman 1993] </ref> discusses distributed mechanisms for authorization and accounting. Neuman's work has much the same vision as our own, namely limited capabilities in addition to ACL's. His work proposes a more general capability model. However, the capabilities are not auditable because proxies do not carry a chain of transfers.
Reference: [Rivest & Lampson 1996] <author> R. L. Rivest and B. Lampson. </author> <title> SDSIA Simple Distributed Security Infrastructure. </title> <address> http://theory.lcs.mit.edu/ cis/sdsi.html, </address> <year> 1996. </year>
Reference-contexts: In the introduction, we discussed the relationship between the DEC security work and our own. In this section, we describe a number of other efforts related to CRISIS. SDSI <ref> [Rivest & Lampson 1996] </ref> is a distributed security infrastructure based on public keys with goals similar to our own. Their emphasis is on defining a standard format for certificates, rights transfer, and name spaces to provide a general security framework for Internet applications.
Reference: [Sirer et al. 1997] <author> E. G. Sirer, S. McDirmid, B. Pandey, and B. N. Bershad. Kimera: </author> <title> A Java System Architecture. </title> <address> http://kimera.cs. washington.edu/, </address> <year> 1997. </year>
Reference-contexts: Similarly, Internet browsers purport to be able to safely execute Java applets, supposedly rendering traditional operating system security irrelevant. The ongoing discovery of security holes in Java verifier implementations <ref> [Dean et al. 1996, Sirer et al. 1997] </ref>, however, has led us to run remotely executing programs in a restricted environment [Goldberg et al. 1996], in addition to us ing a verifier. * Caching: CRISIS caches certificates to improve both performance and availability in the presence of wide area communication failures;
Reference: [Steiner et al. 1988] <author> J. G. Steiner, B. C. Neuman, and J. I. Schiller. </author> <title> Kerberos: an authentication service for open network systems. </title> <booktitle> In Usenix Conference Proceedings, </booktitle> <address> Dallas, Texas, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: Another approach for supporting secure wide area applications is to add fine-grained rights transfer to an existing authentication system, such as Kerberos <ref> [Steiner et al. 1988] </ref>. However, while Kerberos has proven quite successful for local area networks in a single adminis trative domain, it faces a number of challenges when extended to the wide area.
Reference: [Tennenhouse & Wetherall 1996] <author> D. Tennenhouse and D. Wetherall. </author> <title> Towards an Active Network Architecture. </title> <booktitle> In ACM SIGCOMM Computer Communication Review, </booktitle> <pages> pp. 518, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: A special key would be created to encrypt the data rather than using the key of a particular principal; this key would then only be distributed to authorized users. One path to implementing such an application would be the use of Active Networks <ref> [Tennenhouse & Wetherall 1996] </ref> where intelligent routers can be utilized to perform the caching. * Large Scale Remote Execution: Principals should be able to exploit global resources to run large scale computations.
Reference: [Vahdat et al. 1997] <author> A. Vahdat, P. Eastham, C. Yoshikawa, E. Belani, T. Anderson, D. Culler, and M. Dahlin. WebOS: </author> <title> Operating System Services For Wide Area Applications. </title> <type> UCB Technical Report CSD-97-938, </type> <month> December </month> <year> 1997. </year>
Reference-contexts: As a final example, we have built Rent-A-Server <ref> [Vahdat et al. 1997] </ref>, a system to dynamically replicate and migrate Internet services, to gracefully handle bursty request patterns, and to exploit geographic locality to reduce latency and congestion. <p> We evaluate the performance of our implementation in Section 6, and discuss related work in Section 7. We summarize our results in Section 8. 2 Motivation CRISIS is the security subsystem for WebOS <ref> [Vahdat et al. 1997] </ref>. The goal of WebOS is to provide operating system primitives for wide area applications now available only for a single machine or on a local area network. Such abstractions include authentication, authorization, a global file system, naming, resource allocation, and an architecture for remote process execution. <p> While our techniques are general, we restrict our discussion to our specific implementation environment. We have built a global file system, WebFS <ref> [Vahdat et al. 1997] </ref> that allows read/write access to files stored across the wide area. WebFS is implemented at the vnode level [Kleiman 1986], similar to other distributed file systems such as NFS [Walsh et al. 1985] or AFS [Howard et al. 1988].
Reference: [Walsh et al. 1985] <author> D. Walsh, B. Lyon, G. Sager, J. M. Chang, D. Goldberg, S. Kleiman, T. Lyon, R. Sandberg, and P. Weiss. </author> <title> Overview of the Sun Network File System. </title> <booktitle> In Proceedings of the 1985 USENIX Winter Conference, </booktitle> <pages> pp. 117124, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: We have built a global file system, WebFS [Vahdat et al. 1997] that allows read/write access to files stored across the wide area. WebFS is implemented at the vnode level [Kleiman 1986], similar to other distributed file systems such as NFS <ref> [Walsh et al. 1985] </ref> or AFS [Howard et al. 1988]. To illustrate the protocol for secure file access, we consider the scenario where a process running on Node A attempts access to a file located on Node B.
Reference: [Wobber et al. 1993] <author> E. Wobber, M. Abadi, M. Burrows, and B. Lampson. </author> <title> Authentication in the Taos Operating System. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pp. 256269, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: In their work, principals specify the subset of their privileges that are to be transferred to a script written by a potentially untrusted third party. The actual rights transferred are negotiated between the application writer and the user. In their system implementation in Taos <ref> [Wobber et al. 1993] </ref> (a secure OS based on [Lampson et al. 1991]), they add dynamic principals for running programs with some subset of a principal's privileges, observing the difficulty of creating temporary principals and updating all necessary ACLs with the new principal name.
Reference: [Wulf et al. 1995] <author> W. A. Wulf, C. Wang, and D. Kienzle. </author> <title> A New Model of Security for Distributed Systems. </title> <institution> University of Virginia CS Technical Report CS-95-34, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Their dynamic principals are similar to one of the applications of CRISIS transfer certificates. The goals of the Legion <ref> [Wulf et al. 1995] </ref> project are similar to our own in WebOS. In Legion, distributed computation takes place in the context of a distributed object system. Their approach to security is orthogonal to our own, with their primary goal being flexibility.
References-found: 22

