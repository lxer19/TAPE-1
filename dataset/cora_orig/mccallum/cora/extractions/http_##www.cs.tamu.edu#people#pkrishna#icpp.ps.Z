URL: http://www.cs.tamu.edu/people/pkrishna/icpp.ps.Z
Refering-URL: http://www.cs.tamu.edu/people/pkrishna/publications.html
Root-URL: http://www.cs.tamu.edu
Title: Recovery in Multicomputers with Finite Error Detection Latency  
Author: P. Krishna N. H. Vaidya D. K. Pradhan 
Address: College Station, TX 77843-3112  
Affiliation: Computer Science Department Texas A&M University  
Abstract: In most research on checkpointing and recovery, it has been assumed that the processor halts immediately in response to any internal failure (fail-stop model). This paper presents a recovery scheme (independent checkpoint-ing and message logging) for a multicomputer system consisting of processors having a nonzero error detection latency. Our scheme tolerates bounded error detection latencies, thus, achieving a higher fault coverage. The simulation results show that for typical detection latency values, the recovery overhead is almost independent of the detection latency. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Kai Li, J. F. Naughton and J. S. Plank, </author> <title> "An efficient checkpointing method for multicomputers with wormhole routing," </title> <journal> Intl. Journal of Parallel Programming, </journal> <volume> Vol. 20, No. 3, </volume> <pages> pp. 159-180, </pages> <month> June, </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Numerous approaches to checkpointing and rollback recovery have been proposed in the literature for fail-stop processors (e.g., <ref> [1] </ref>). While the notion of a fail-stop processor is a useful abstraction, it is expensive to implement [7]. In real systems, many error detection mechanisms have non-zero detection latency [2, 3, 4].
Reference: [2] <author> L. M. Silva and J. G. Silva, </author> <title> "Global checkpointing for distributed programs," </title> <booktitle> IEEE Symp. on Reliable Distributed Systems, </booktitle> <pages> pp. 155-162, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Numerous approaches to checkpointing and rollback recovery have been proposed in the literature for fail-stop processors (e.g., [1]). While the notion of a fail-stop processor is a useful abstraction, it is expensive to implement [7]. In real systems, many error detection mechanisms have non-zero detection latency <ref> [2, 3, 4] </ref>. In this paper, we deal with a multicom-puter consisting of processors whose built-in error detection mechanism can detect errors within a bounded error detection latency. These processors are named as fail-slow processors. <p> This paper presents an independent checkpointing and message logging technique taking the detection latency into consideration. A coordinated checkpointing scheme that tolerates bounded error detection latency is presented by Silva and Silva <ref> [2] </ref>. In this scheme, a processor's clock is used to estimate when an error could have occurred. However, during the detection latency period, the processor is in a spurious state, and a corrupt clock might lead to an incorrect recovery. Therefore, the scheme in [2] works only if a faulty processor's <p> is presented by Silva and Silva <ref> [2] </ref>. In this scheme, a processor's clock is used to estimate when an error could have occurred. However, during the detection latency period, the processor is in a spurious state, and a corrupt clock might lead to an incorrect recovery. Therefore, the scheme in [2] works only if a faulty processor's clock is always fault-free and a faulty processor timestamps messages fl Research reported is supported in part by AFOSR under grant F49620-92-J-0383. correctly. Our approach does not depend on the processor clock for determining when an error could have occurred.
Reference: [3] <author> G. A. Kanawati, N. A. Kanawati, and J. A. Abra-ham, "FERRARI: </author> <title> A tool for the validation of system dependability properties,"Proc. </title> <booktitle> 23rd Int'l Symp. on Fault Tolerant Computing, </booktitle> <pages> pp. 336-344, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Numerous approaches to checkpointing and rollback recovery have been proposed in the literature for fail-stop processors (e.g., [1]). While the notion of a fail-stop processor is a useful abstraction, it is expensive to implement [7]. In real systems, many error detection mechanisms have non-zero detection latency <ref> [2, 3, 4] </ref>. In this paper, we deal with a multicom-puter consisting of processors whose built-in error detection mechanism can detect errors within a bounded error detection latency. These processors are named as fail-slow processors. <p> For simplicity, the proposed recovery scheme is designed to tolerate only a single process failure. During recovery, the system must assess the damage caused by the error. The detection latency of the existent error detection mechanisms can be measured by fault-injection tools (e.g., FERRARI <ref> [3] </ref>, RIFLE [4]). After a failure has occurred, during the detection latency period, a processor may behave arbitrarily. Messages sent by the faulty process during the latency period could be contaminated and thus cause the error to be propagated to other processes. <p> Zero detection latency corresponds to a fail-stop processor [7]. Typical latencies are less than 1 sec <ref> [3] </ref>. The average and maximum recovery overheads were computed for different latency values. Kb. As seen, there is an increase in the average recovery overhead as the latency increases. This is because, as the latency increases, the probability of unsafe messages being sent is high.
Reference: [4] <author> J. Arlat et. al., </author> <title> "Fault injection for dependability validation: A methodology and some applications," </title> <journal> IEEE Transactions on Software Engg., </journal> <volume> Vol. </volume> <pages> 16-2, pp. 166-182, </pages> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Numerous approaches to checkpointing and rollback recovery have been proposed in the literature for fail-stop processors (e.g., [1]). While the notion of a fail-stop processor is a useful abstraction, it is expensive to implement [7]. In real systems, many error detection mechanisms have non-zero detection latency <ref> [2, 3, 4] </ref>. In this paper, we deal with a multicom-puter consisting of processors whose built-in error detection mechanism can detect errors within a bounded error detection latency. These processors are named as fail-slow processors. <p> For simplicity, the proposed recovery scheme is designed to tolerate only a single process failure. During recovery, the system must assess the damage caused by the error. The detection latency of the existent error detection mechanisms can be measured by fault-injection tools (e.g., FERRARI [3], RIFLE <ref> [4] </ref>). After a failure has occurred, during the detection latency period, a processor may behave arbitrarily. Messages sent by the faulty process during the latency period could be contaminated and thus cause the error to be propagated to other processes.
Reference: [5] <author> P. Cao et. al., </author> <title> "The TickerTAIP parallel RAID architecture," </title> <booktitle> Intl. Symp. on Computer Architecture, </booktitle> <pages> pp. 52-63, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Comm. latency (4) 1 ms Disk transfer rate <ref> [5] </ref> 12.5 Mbytes/sec Disk seek time [6] 12.5 ms Disk rotate time [6] 13.9 ms computation lost (rollback distance) due to the failure.
Reference: [6] <author> D. Stodolsky et. al., </author> <title> "Parity Logging overcoming the small write problem in redundant disk arrays," </title> <journal> pp. </journal> <pages> 64-75, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Comm. latency (4) 1 ms Disk transfer rate [5] 12.5 Mbytes/sec Disk seek time <ref> [6] </ref> 12.5 ms Disk rotate time [6] 13.9 ms computation lost (rollback distance) due to the failure. <p> Comm. latency (4) 1 ms Disk transfer rate [5] 12.5 Mbytes/sec Disk seek time <ref> [6] </ref> 12.5 ms Disk rotate time [6] 13.9 ms computation lost (rollback distance) due to the failure. Maximum recovery overhead and average recovery overhead are computed as the maximum and average of recovery overheads of all the processes, respectively. 6.1 Results The detection latency (ffi) was varied from 0 to 1 sec.
Reference: [7] <author> R. D. Schlichting and F. B. Schneider, </author> <title> "Fail-stop processors : An approach to designing fault-tolerant distributed computing systems," </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> Vol. 1, No. 3, </volume> <pages> pp. 222-238, </pages> <month> Aug. </month> <year> 1983. </year>
Reference-contexts: 1 Introduction Numerous approaches to checkpointing and rollback recovery have been proposed in the literature for fail-stop processors (e.g., [1]). While the notion of a fail-stop processor is a useful abstraction, it is expensive to implement <ref> [7] </ref>. In real systems, many error detection mechanisms have non-zero detection latency [2, 3, 4]. In this paper, we deal with a multicom-puter consisting of processors whose built-in error detection mechanism can detect errors within a bounded error detection latency. These processors are named as fail-slow processors. <p> Maximum recovery overhead and average recovery overhead are computed as the maximum and average of recovery overheads of all the processes, respectively. 6.1 Results The detection latency (ffi) was varied from 0 to 1 sec. Zero detection latency corresponds to a fail-stop processor <ref> [7] </ref>. Typical latencies are less than 1 sec [3]. The average and maximum recovery overheads were computed for different latency values. Kb. As seen, there is an increase in the average recovery overhead as the latency increases.
Reference: [8] <author> P. Krishna et. al., </author> <title> "An Optimistic Recovery Scheme for Message-Passing Multicomputer Systems with Finite Detection Latency," </title> <type> Tech. </type> <institution> Rept. 94-030, Dept. of Computer Science, Texas A&M University. </institution>
Reference-contexts: The stable storage also has the capability to timestamp received log entries using its local clock. We assume that there is an upper bound 4 on the message transmission time between any two processors <ref> [8] </ref>. Figure 1 illustrates opera tion of a fail-slow processor. A failure occurs at time t F , and gets detected by the detection mechanism at time t D after a latency period. <p> Case III : In this case, both unsafe messages and unsafe checkpoints are present. The recovery scheme is a combination of the recovery schemes for cases I and II. The details of the algorithm are presented in <ref> [8] </ref>. 6 Simulations Simulations were performed to evaluate the effects of detection latency on recovery. Each process communicates with others by passing messages. The time at which a process sends a message is assumed to follow an exponential distribution with mean of t m .
References-found: 8

