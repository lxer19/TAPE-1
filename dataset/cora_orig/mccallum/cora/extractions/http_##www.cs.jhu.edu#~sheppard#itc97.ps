URL: http://www.cs.jhu.edu/~sheppard/itc97.ps
Refering-URL: http://www.cs.jhu.edu/~sheppard/pubs.html
Root-URL: 
Email: jsheppar@arinc.com leslie.orlidge@alliedsignal.com  
Title: Artificial Intelligence Exchange and Service Tie to All Test Environments (AI-ESTATE)A New Standard for System Diagnostics  
Author: John W. Sheppard Leslie A. Orlidge 
Address: 2551 Riva Road Guidance  MD 21401 Teterboro, NJ 07608  
Affiliation: ARINC AlliedSignal Aerospace  and Control Systems Annapolis,  
Abstract: We describe a recently approved IEEE standard for exchanging diagnostic information and embedding diagnostic reasoners in any test environment. We describe the defined formats and services, an example application, and current industry acceptance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> IEEE Std 1232-1995. </institution> <year> 1995. </year> <title> Trial Use Standard for Artificial Intelligence and Expert System Tie to Automatic Test Equipment (AI-ESTATE): Overview and Architecture, </title> <address> Piscataway, New Jersey: </address> <publisher> IEEE Standards Press. </publisher>
Reference-contexts: The AI-ESTATE subcommittee designed the P1232 standards to abstract specific test and product details out of the diagnostic models and tie these models to domainspecific models as needed to complete the test system. In this paper, we describe the AI-ESTATE architecture <ref> [1] </ref> and two component standards of the AI-ESTATE family of standards. We discuss a neutral exchange format for diagnostic models standardized in IEEE Std 1232.1-1997 [2]. 1 Previously, Artificial Intelligence and Expert System Tie to Automatic Test Equipment.
Reference: [2] <author> IEEE Std 1232.1-1997. </author> <year> 1997. </year> <title> Trial Use Standard for Artificial Intelligence and Exchange and Service Tie to All Test Environments (AI-ESTATE): Data and Knowledge Specification, </title> <address> Piscataway, New Jersey: </address> <publisher> IEEE Standards Press. </publisher>
Reference-contexts: In this paper, we describe the AI-ESTATE architecture [1] and two component standards of the AI-ESTATE family of standards. We discuss a neutral exchange format for diagnostic models standardized in IEEE Std 1232.1-1997 <ref> [2] </ref>. 1 Previously, Artificial Intelligence and Expert System Tie to Automatic Test Equipment. We also discuss several software services to be provided by an AI-ESTATE conformant diagnostic system standardized in IEEE Std P1232.2 [3]. <p> Obviously, for this to be possible, the reasoner must have the ability to generate a hypothesis. The current belief is that a service such as get_current_hypothesis might be reasoner-specific; however, all of the models currently specified in 1232.1 <ref> [2] </ref> provide the ability to compute a hypothesis. Further, it is possible the service, get_most_likely_diagnoses could be used to generate a hypothesis.
Reference: [3] <author> IEEE P1232.2. </author> <year> 1996. </year> <title> Trial Use Standard for Artificial Intelligence Exchange and Service Tie to All Test Environments (AI-ESTATE): Service Specification, </title> <note> Draft 2.2. </note>
Reference-contexts: We discuss a neutral exchange format for diagnostic models standardized in IEEE Std 1232.1-1997 [2]. 1 Previously, Artificial Intelligence and Expert System Tie to Automatic Test Equipment. We also discuss several software services to be provided by an AI-ESTATE conformant diagnostic system standardized in IEEE Std P1232.2 <ref> [3] </ref>. In addition, we describe example application scenarios using these standards and suggest alternative uses of the standards in various test environments. Finally, we discuss industry involvement and acceptance of the standards and provide directions for future work on AI-ESTATE. 2. <p> The first thing to note is that there are two states in 1232.2 <ref> [3] </ref>. In 1232.2, the reasoner is assumed to be in one of three states: NULL , INACTIVE , or ACTIVE . In Figure 6, STANDBY would correspond to NULL , and READY would cover both INACTIVE and ACTIVE .
Reference: [4] <author> IEEE Std-1149.1-1990. </author> <year> 1990. </year> <title> Standard Test Access Port and Boundary Scan Architecture, </title> <publisher> Piscataway, New Jersey IEEE Standards Press. </publisher>
Reference: [5] <author> IEEE P1450. </author> <year> 1996. </year> <title> Standard Test Interface Language (STIL), </title> <note> Draft 0.23. </note>
Reference: [6] <author> IEEE P1252. </author> <year> 1993. </year> <title> Standard for a Frame Based Knowledge Representation, </title> <note> Draft 2.1. </note>
Reference-contexts: Current test standards (e.g., Boundary Scan and STIL) [4,5] provide no guidance for using AI technology in test applications. Proposed AI standards (e.g., KIF) do not specifically address the concerns of the test community <ref> [6] </ref>. Thus, no standard exists, currently, addressing the use of AI systems in test environments. The AI-ESTATE standards are intended to fill this void.
Reference: [7] <author> ISO 10303-11:1994. </author> <year> 1994. </year> <title> Industrial Automation Systems and IntegrationProduct Data Representation and ExchangePart 11: EXPRESS Language Reference Manual, </title> <address> Geneva: </address> <publisher> ISO Press. </publisher>
Reference-contexts: Models for Diagnosis The current version of IEEE Std 1232.1 defines three models for use in diagnostic systemsa common element model, a fault tree model, and an enhanced diagnostic inference model. All of the models were defined using ISO 10303-11, EXPRESS <ref> [7] </ref>. EXPRESS is a language for defining information models and has received widespread acceptance in the international standards communities of ISO and IEC. For example, EDIF 3 0 0 and EDIF 4 0 0 were defined using EXPRESS. <p> A graphical view of the common element model is shown in Figure 2. The cost model associated with the common element model is shown in Figure 3. These models are shown graphically in EXPRESS-G <ref> [7] </ref>. Entity relationships are shown with lines terminated by circles. For example, from Figure 2, we see that diagnostic_model is composed of sets of model_anomaly , model_test , model_resource , and model_diagnosis . Dashed lines indicate the associated relationships are optional, and dashed boxes indicate defined types.
Reference: [8] <author> Simpson, W. R. and J. W. Sheppard. </author> <year> 1993. </year> <title> Fault Isolation in an Integrated Diagnostic Environment, IEEE Design and Test of Computers, </title> <publisher> 10(1):5266. </publisher>
Reference-contexts: The remaining two models represent knowledge that may be used by specific types of diagnostic systems. The fault tree model defines a decision tree based on outcomes from tests performed by the test system <ref> [8] </ref>. Each node of the tree corresponds to a test with some set of outcomes. The outcomes of the tests are branches extending from the test node to other tests or to diagnostic conclusions (such as No Fault).
Reference: [9] <author> Simpson, W. R. and H. S. Balaban. </author> <year> 1982. </year> <title> The ARINC System Testability and Maintenance Program (STAMP), </title> <booktitle> Proceedings of AUTOTESTCON 82, </booktitle> <address> Dayton, Ohio. </address>
Reference-contexts: The enhanced diagnostic inference model (EDIM) is based on the dependency model. Historically, test engineers used the dependency model to map relationships between functional entities in a system under test and tests that determine whether or not these functions are being performed correctly <ref> [9] </ref>. In the past, the model characterized the connectivity of the system under test from a functional perspective using observation points (or test points) as the junctions joining the functional entities together.
Reference: [10] <author> Peng, Y. and J. A. Reggia. </author> <year> 1990. </year> <title> Abductive Inference Models for Diagnostic ProblemSolving, </title> <address> New York: </address> <publisher> Springer-Verlag. </publisher>
Reference: [11] <author> Pearl, J. </author> <year> 1988. </year> <title> Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference, </title> <address> San Mateo, California: </address> <publisher> Morgan-Kaufmann Publishers. </publisher>
Reference: [12] <author> Simpson, W. R. and J. W. Sheppard. </author> <year> 1994. </year> <title> System Test and Diagnosis, </title> <publisher> Norwell, </publisher> <address> Massachusetts: </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: They found that the focus of the model should be on the tests and the faults those tests detect rather than on functions of the system <ref> [12] </ref>. In particular, the focus of the model shifted to the inferences drawable from real tests and their outcomes, resulting in a new kind of model called the diagnostic inference model.
Reference: [13] <author> ISO 10303-21:1994. </author> <year> 1994. </year> <title> Industrial Automation Systems and IntegrationProduct Data Representation and ExchangePart 21: Clear Text Encoding of the Exchange Structure, </title> <address> Geneva: </address> <publisher> ISO Press. </publisher>
Reference-contexts: EXPRESS-I is an instance language defined to facilitate developing example instances of information models and to facilitate developing test cases for these models. As an alternative, the ISO STEP community has defined a standard physical file format derived from EXPRESS models <ref> [13] </ref>. Unfortunately, the STEP physical file format is very difficult for a human to read but very easy for a computer to process. The AI-ESTATE subcommittee found added benefit in EXPRESS-I over the STEP physical file format in that the language is both computer-processable and human-readable.
Reference: [14] <author> Sheppard, J. W. and W. R. Simpson. </author> <year> 1996. </year> <title> A Systems View of Test Standardization, </title> <booktitle> Proceedings of AUTOTESTCON 96, </booktitle> <address> Dayton, </address> <publisher> Ohio, </publisher> <pages> pp. 384389. </pages>
Reference-contexts: Therefore, we envision AI-ESTATE being applied in a wide variety of test contexts. To capture this expanded role of a diagnostic system in test, we developed a model of the test process. This model is described in detail in <ref> [14] </ref> and is reproduced here in Figure 7. In interpreting this model, note that we have not applied any of the standard object [15,16], activity [17], or information modeling [18] techniques commonly in use today.
Reference: [15] <author> Booch, G. </author> <year> 1994. </year> <title> ObjectOriented Analysis And Design With Applications, 2nd Ed. </title> <publisher> Benjamin Cummings. </publisher>
Reference: [16] <author> Schlaer, S., and Mellor, S. L. </author> <year> 1992. </year> <title> Object Lifecycles: </title> <booktitle> Modeling the World in States, </booktitle> <address> Englewood Cliffs, New Jersey: </address> <publisher> Yourdon Press. </publisher>
Reference: [17] <author> FIPS-183. </author> <year> 1993. </year> <title> Integrated Definition for Function Modeling (IDEF0). </title> <institution> National Institute of Standards and Technology. </institution>
Reference-contexts: This model is described in detail in [14] and is reproduced here in Figure 7. In interpreting this model, note that we have not applied any of the standard object [15,16], activity <ref> [17] </ref>, or information modeling [18] techniques commonly in use today. To read this model, each of the blocks represents entities or objects within the test environment. The relationships between the entities provide processes or constraints that one entity performs or imposes on another.
Reference: [18] <author> Schenk, D. A. and P. R. Wilson. </author> <year> 1994. </year> <title> Information Modeling: The EXPRESS Way, </title> <address> New York: </address> <publisher> Oxford University Press. </publisher>
Reference-contexts: This model is described in detail in [14] and is reproduced here in Figure 7. In interpreting this model, note that we have not applied any of the standard object [15,16], activity [17], or information modeling <ref> [18] </ref> techniques commonly in use today. To read this model, each of the blocks represents entities or objects within the test environment. The relationships between the entities provide processes or constraints that one entity performs or imposes on another.
Reference: [19] <author> Sheppard, J. W. and W. R. Simpson. </author> <year> 1996. </year> <title> Improving the Accuracy of Diagnostics Provided by Fault Dictionaries, </title> <booktitle> Proceedings of the 14th IEEE VLSI Test Symposium, </booktitle> <address> Los Alamitos, California: </address> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 180185. </pages>
Reference-contexts: The role AI-ESTATE plays in this environment is twofold. First, a model conforming to the EDIM defined by 1232.1 can be used to capture the diagnostic knowledge resident in the fault dictionary <ref> [19] </ref>. This means that the diagnostic knowledge inherent in fault dictionaries can be exchanged in a standard way between test systems by using IEEE Std 1232.1.
Reference: [20] <author> Akman, V. and M. Surav. </author> <year> 1996. </year> <title> Steps Toward Formalizing Context, </title> <journal> AI Magazine, 17(3):5572. </journal>
Reference-contexts: As a result, we are beginning to develop a model of context for diagnosis. Recent work in non-monotonic reasoning and categorical reasoning offer promise in formalizing context for this problem <ref> [20] </ref>. 9. Conclusion Reasoning system technology has progressed to the point where electronic systems are employing artificial intelligence as a primary component in meeting system test and verification requirements. This is giving rise to a proliferation of AI-based design, test, and diagnostic tools.
References-found: 20

