URL: http://www.cs.ucl.ac.uk/staff/L.Braine/vl97.ps
Refering-URL: http://www.cs.ucl.ac.uk/staff/L.Braine/researchdocs.html
Root-URL: http://www.cs.ucl.ac.uk
Title: Object-Flow  
Author: Lee Braine and Chris Clack 
Address: Gower Street, London, WC1E 6BT, UK  
Affiliation: Department of Computer Science, University College London,  
Abstract: The use of visual programming (VP) to assist either functional programming (FP) or object-oriented programming (OOP) has been extensively researched. However, the use of VP to assist the integration of FP and OOP has been largely neglected. This paper presents the key aspects of object-flow, a new visual notation that facilitates visual object-oriented functional programming (VOOFP). 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Agha, C. Hewitt, </author> <title> "Actors: A Conceptual Foundation for Concurrent Object-Oriented Programming," </title> <editor> in B. Shriver, P. Wegner (Eds.), </editor> <booktitle> Research Directions in Object-Oriented Programming, </booktitle> <publisher> MIT Press, </publisher> <pages> pp. 47-74, </pages> <year> 1987. </year>
Reference-contexts: In object-flow, each arc carries a single atomic object or message, not a stream of objects or messages. This benefits abstraction, formal analyses and provides clean object-oriented semantics. We thus adopt the Actor model <ref> [1] </ref> view of sequences of behaviours rather than state changes.
Reference: [2] <author> G. Booch, </author> <title> Object-Oriented Analysis and Design with Applications, 2nd Edition, </title> <publisher> Benjamin Cummings, </publisher> <year> 1994. </year>
Reference-contexts: CLOVER is intended for application development, particularly the creation of executable specifications [8]. 3 Object-Flow The object-oriented message send o.f (x) can be represented visually using an object diagram <ref> [2] </ref>, as in Figure 1 (a).
Reference: [3] <author> L. Braine, C. Clack, </author> <title> "Introducing CLOVER: an Object-Oriented Functional Language," </title> <booktitle> Proc. 8th International Workshop on Implementation of Functional Programming Languages, </booktitle> <pages> pp. 21-38, </pages> <year> 1996. </year> <note> Also to appear in Springer-Verlag LNCS. </note>
Reference-contexts: 1 Introduction There have been many attempts to integrate OOP with FP <ref> [3] </ref>, VP with OOP [4], and VP with FP [6]. However, to date we know of no language that integrates OOP and FP with VP, and yet retains the key features of both the functional and object-oriented paradigms. <p> The key contributions of this paper include: 1. an application of VP to the integration of OOP and FP, giving a visual representation for OOFP; 2. a visual representation of type-safe curried higher-order method sending. 2 Overview of CLOVER We recently introduced CLOVER <ref> [3] </ref>, an object-oriented functional language that is 100% functional and 99% object-oriented. CLOVER provides the FP features of referential transparency, single-assignment attributes, higher-order functions, curried partial applications, lazy evaluation and complete type safety.
Reference: [4] <author> M. Burnett, A. Goldberg, T. Lewis (Eds.), </author> <title> Visual Object-Oriented Programming: Concepts and Environments, </title> <publisher> Manning Publications, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction There have been many attempts to integrate OOP with FP [3], VP with OOP <ref> [4] </ref>, and VP with FP [6]. However, to date we know of no language that integrates OOP and FP with VP, and yet retains the key features of both the functional and object-oriented paradigms. Existing attempts, such as object-oriented dataflow [7], typically sacrifice important features from either OOP or FP.
Reference: [5] <author> A. Davis, R. Keller, </author> <title> "DataFlow Program Graph," </title> <journal> IEEE Computer, </journal> <volume> 15(2), </volume> <pages> pp. 26-41, </pages> <year> 1982. </year>
Reference-contexts: The functional definition a = f (x,y) fl During the course of this work, Lee Braine was supported by an EPSRC research studentship and a CASE award from Andersen Consulting. can be represented visually using a dataflow graph <ref> [5] </ref>, as in Figure 1 (b). (a) Object diagram (b) Dataflow graph Our goal is to provide a visual notation that integrates the semantics of both the object-oriented and functional representations, despite their apparently-conflicting requirements.
Reference: [6] <author> D. Hils, </author> <title> "Visual Languages and Computing Survey: Data Flow Visual Programming Languages," </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 3(1), </volume> <pages> pp. 69-101, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction There have been many attempts to integrate OOP with FP [3], VP with OOP [4], and VP with FP <ref> [6] </ref>. However, to date we know of no language that integrates OOP and FP with VP, and yet retains the key features of both the functional and object-oriented paradigms. Existing attempts, such as object-oriented dataflow [7], typically sacrifice important features from either OOP or FP.
Reference: [7] <author> T. Kimura, </author> <title> "Object-Oriented Dataflow," </title> <booktitle> Proc. 11th IEEE Symposium on Visual Languages (VL'95), </booktitle> <pages> pp. 180-186, </pages> <year> 1995. </year>
Reference-contexts: However, to date we know of no language that integrates OOP and FP with VP, and yet retains the key features of both the functional and object-oriented paradigms. Existing attempts, such as object-oriented dataflow <ref> [7] </ref>, typically sacrifice important features from either OOP or FP. In this paper, we present the novel visual aspects of object-flow, a VOOFP notation that is 100% functional and 99% object-oriented.
Reference: [8] <author> D. Turner, </author> <title> "Functional Programs as Executable Specifications," </title> <editor> in C. Hoare, J. Shepherdson (Eds.), </editor> <booktitle> Mathematical Logic and Programming Languages, </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference-contexts: It also provides the traditional OOP features of a class hierarchy with inheritance and pure encapsulation, subsumption, subtyping, method overloading, method overriding and dynamic method despatch. CLOVER is intended for application development, particularly the creation of executable specifications <ref> [8] </ref>. 3 Object-Flow The object-oriented message send o.f (x) can be represented visually using an object diagram [2], as in Figure 1 (a).
References-found: 8

