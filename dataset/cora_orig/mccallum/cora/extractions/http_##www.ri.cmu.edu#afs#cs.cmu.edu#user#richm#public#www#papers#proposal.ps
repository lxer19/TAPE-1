URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/richm/public/www/papers/proposal.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/richm/public/www/whois-richm.html
Root-URL: 
Title: Improving Programming-by-Demonstration With Better Semantic Expression use a new deck-of-playing-cards metaphor to express concepts such
Author: Richard McDaniel 
Degree: Thesis Proposal  
Note: Second, Gamut will  By combining these  
Date: November 14, 1995  
Abstract: The domain of applications that can be created with programming-by-demonstration (PBD) can be extended by improving the developers ability to communicate with the system. The techniques provided in this thesis will allow nonprogrammers to create a new variety of complete, interactive applications including many board games and educational software using PBD. A PBD software tool uses inferencing to induce programs by watching the developer demonstrate examples that show how the application should behave. Current systems reduce their scope or resort to having the developer program because they do not provide sufficient ways to express behaviors and the factors that affect them. Therefore, the goal of this thesis is to develop understandable forms of annotated expression and manipulation that help a system infer a broader range of behavior. To test these ideas, this proposal introduces a new system called Gamut that will present the techniques in a unified software tool. The first technique replaces the macro recorder method for demonstrating behavior used in other PBD systems with a technique called nudges. The developer demonstrates by correcting the system at important points during program execution and also using two nudge commands to communicate important situations. First, the Do Something! nudge causes the system to reconsider past learned behavior and try to generalize its knowledge to fit the current situation. Using the Stop That! nudge will point out improper behavior and generate negative examples. Third, Gamut will improve communication about behaviors by making them more manipulable than in previous systems. Behaviors will be represented as small icons near the objects they affect. Using the familiar cut, copy, and paste commands, the developer can transfer behavior between objects. Determining how to make a behavior operate in the new context will be inferred automatically. An objects state from the recent past will be represented as temporal ghosts in which objects become dimmed, translucent images. Many sorts of behavior refer to prior states such as a previous position or an old property value. The ghost objects will allow the developer to make explicit connections. Finally, to reduce the number of options the system must explore, the developer will be able to give hints by highlighting important objects and properties. A new inferencing algorithm will be created that will take advantage of the hints. 
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> Bill Budge. </author> <title> Pinball Construction Set. </title> <journal> Exidy Software. </journal>
Reference-contexts: The best tools make software development so simple that the author forgets about the tool and just builds things. Excellent examples of these kinds of tools are game builders such as Pinball Construction Set <ref> [1] </ref>. Game builders present games as an object-oriented set of components that can be assembled directly onto the playing area. The rules for a given class of game are encoded into a set of choices and selected with dialog boxes and menus. <p> Though the behaviors provided in prototyping tools can be useful, they are too limited to specify behaviors used in most interactive software. 4.1.3 Application Builders An application builder is tailored toward building a specific kind of application usually without programming. For example, Pinball Construction Set <ref> [1] </ref> lets the author draw the parts of a pinball game in a window. Components such as ball and levers have behavior built-in and other connections are made using menus. A game built with this tool can be executed immediately and with little effort.
Reference: [2] <author> Allen Cypher and David Canfield Smith. KIDSIM: </author> <title> End User Programming of Simulations. </title> <booktitle> Proceeding CHI95: Human Factors in Computing Systems, </booktitle> <month> May 7-11, </month> <year> 1995, </year> <pages> pp 27-34. </pages>
Reference-contexts: Currently, the most successful PBD tools in research have been applied to rather limited domains. 3 Tools to make interactive software like Marquise [30], Demo II [5], and KidSim <ref> [2] </ref> are just emerging and still have deficiencies that prevent an author from creating complete and useful applications. <p> Even monster behaviors like the kind found in PacMan will be expressible. Building some applications will require true experts. For instance, it should be possible to build an application as complicated as KidSim <ref> [2] </ref> in Gamut. To do so, one would need to demonstrate how to demonstrate things in the KidSim way. Likewise, representing KidSim-like data in Gamuts framework requires much forethought. No one would expect uninitiated people to be able to build KidSim in Gamut without considerable time and motivation. <p> The benefit of providing a direct way to express modal behavior is mostly a matter of convenience. The alternative to manipulating modes is to distribute a condition to each behavior and object as required in Marquise [30] and KidSim <ref> [2] </ref>. <p> Macromedia Director [21] uses a score sheet technique where the author lays out actions in time. Cyphers KIDSIM <ref> [2] </ref> uses a clock metaphor which the author starts and stops to run the simulation and can be used to reverse time. Gamut will use a timeline to provide feedback to the author. A behavior is displayed in the timeline when it is executed.
Reference: [3] <author> Allen Cypher. Eager: </author> <title> Programming Repetitive Tasks by Example. </title> <booktitle> Proceeding CHI91: Human Factors in Computing Systems, </booktitle> <address> New Orleans, </address> <year> 1991, </year> <pages> pp 33-39. </pages>
Reference: [4] <author> Donkey Kong, Nintendo, </author> <year> 1981. </year>
Reference-contexts: The board may be composed of pieces as well as tiles. In a video game, some of the background objects move or can be manipulated. The hammer object in Donkey Kong <ref> [4] </ref>, may be a piece or it could be considered part of the board.
Reference: [5] <author> Gene L. Fisher, Dale E. Busse, David A. Wolber. </author> <title> Adding Rule-Based Reasoning to a Demonstrational Interface Builder. </title> <booktitle> Proceedings of UIST92, </booktitle> <pages> pp 89-97. </pages>
Reference-contexts: One aspect of a commercial product that comes close to PBD are macro builders such as found in Microsofts word processor, Word [24]. Currently, the most successful PBD tools in research have been applied to rather limited domains. 3 Tools to make interactive software like Marquise [30], Demo II <ref> [5] </ref>, and KidSim [2] are just emerging and still have deficiencies that prevent an author from creating complete and useful applications. <p> Marquise did provide a set of ghost cursors to record where the mouse was used in the recent past; Gamut will extend this idea further. The Stimulus/Response demonstration style was first used by Wolber in the Demo [47] system and its successor Demo II <ref> [5] </ref>. These systems are able to infer linear constraints between graphical properties. Interaction in the Demo series is limited to the transformations provided in the graphics editor such as clicking on or resizing an object. Demo does not permit the author to demonstrate whole new interaction styles. <p> The author, however, does see the object when the application is edited and can manipulate it directly. Gamut will use five kinds of annotation objects: playing cards, mode switches, guide objects, behavior icons, and temporal ghosts. The guide objects are borrowed from the guidewire objects in Demo II <ref> [5] </ref> and MetaMouse [22]. The others are new and will be tested in Gamut for the first time. The constraint objects as well as playing cards and mode switches will be objects the author must create and assemble to use in a game.
Reference: [6] <author> Martin Frank. </author> <title> Model-Based User Interface Design by Demonstration and by Interview. </title> <type> Ph.D. thesis. </type> <institution> Graphics, Visualization & Usability Center, Georgia Institute of Technology, Atlanta, Georgia. </institution>
Reference-contexts: Since dragging involves processing more than just a single event, most of todays PBD systems either require significant preparation to be performed on objects that can be dragged before the drag is demonstrated <ref> [6] </ref>, or severely limit the kinds of dragging permitted. 3.1.2 Conditional and Modal Behavior In a board game, a single action can have different effects under different circumstances. In Monopoly, moving a piece to different kinds of squares makes the game do different things.
Reference: [7] <author> Laura Gould and William Finzer. </author> <title> Programming by Rehearsal. </title> <institution> Palo Alto Research Center, Xerox Corporation, </institution> <year> 1984. </year>
Reference-contexts: Though easier to program, these tools still lack the ability to specify behavior without programming. By making widgets more powerful, one can use them to specify some behavior as was found in Gould and Finzers Rehearsal World <ref> [7] </ref>. Rehearsal World based its widgets on an acting metaphor: widgets were called actors and events and behavior were called cues. By connecting cues to actors attributes, one can generate programs.
Reference: [8] <author> Leslie Grimm, Dennis Caswell, and Lynn Kirkpatrick. Playroom. </author> <booktitle> Broderbund Software, </booktitle> <address> 500 Redwood Blvd., Novato, CA 94948-6121, </address> <year> 1992. </year>
Reference-contexts: Both of these styles will be realizable with Gamut. In general, the difficulty of building a game is expected to increase as the complexity of the rules increase. Gamut will be able to produce many kinds of video games. Games designed for younger children, such as Playroom <ref> [8] </ref> and Treehouse [9], where the player is presented with a scene of clickable objects will be easy to assemble since the behavior in these games is notably simple. Other video games include puzzle games and two dimensional arcade-like games.
Reference: [9] <author> Leslie Grimm and Lynn Kirkpatrick. Treehouse. </author> <booktitle> Broderbund Software, </booktitle> <address> 500 Redwood Blvd., Novato, CA 94948-6121, </address> <year> 1993. </year>
Reference-contexts: In general, the difficulty of building a game is expected to increase as the complexity of the rules increase. Gamut will be able to produce many kinds of video games. Games designed for younger children, such as Playroom [8] and Treehouse <ref> [9] </ref>, where the player is presented with a scene of clickable objects will be easy to assemble since the behavior in these games is notably simple. Other video games include puzzle games and two dimensional arcade-like games.
Reference: [10] <author> D. C. Halbert. </author> <title> Programming by Example. </title> <type> Ph.D. thesis, </type> <institution> Computer Science Division, EECS Department, University of California, Berkeley, </institution> <address> CA, </address> <year> 1984. </year>
Reference-contexts: This is one of the major challenges for Gamut as the board game domain heightens the needs for more sophisticated kinds of language constructs than needed in any previous PBD system. The language can be divided into two layers, as on Halberts SmallStar system <ref> [10] </ref>. The top level, called the structural layer, contains constructs that relate the conditions, loops, and actions of the behavior. If the author moves an object, then a move action will become part of the structure. <p> Multi-step data descriptions have normally been considered too difficult for a PBD system to infer, so previous systems have forced the author to build data descriptions directly through dialog boxes <ref> [10] </ref>, or have simplified the data descriptions so as only to include a single step. 9 3.2.2.2 Inferencing Algorithm The inferencing algorithm is the intelligent part of a PBD system.
Reference: [11] <author> Richard Hamblen, </author> <title> Magic Realm. The Avalon Hill Game Company, </title> <address> Baltimore, MD 21214, </address> <year> 1986. </year>
Reference-contexts: What an object is called is likely to have little to do with how it acts. Games routinely use objects in roles that are held by other objects in other games. In Magic Realm <ref> [11] </ref>, the board is composed of tiles that are first shuf-ed and dealt out to the players just like cards; hence, cards can be thought of as tiles or vice versa. The board may be composed of pieces as well as tiles.
Reference: [12] <author> Scott Huffman. </author> <title> Instructible Autonomous Agents. </title> <type> Ph.D. thesis. </type> <institution> Computer Science and Engineering Division, University of Michigan. </institution> <year> 1994. </year>
Reference-contexts: Since Gamut will use this style of highlighting for its own hint annotation, it will provide an example implementation and a rationale behind its use. Other hint annotations have been used in Artificial Intelligence. For instance, Instructo-SOAR <ref> [12] </ref> provides a language for the user to instruct the progress of a AI search engine. The techniques used in AI to provide hints have been oriented toward programming languages.
Reference: [13] <institution> HyperCard. Apple Computer Inc., Cupertino, </institution> <address> CA, </address> <year> 1993. </year>
Reference-contexts: Another branch of software tools makes the task of programming easier but does not eliminate it. Tools like Visual Basic [44] and HyperCard <ref> [13] </ref> provide palettes that allow the author to place interface components directly into windows. Properties like the name of a button or the color of the background can be set directly through menus. Some tools even allow the author to directly specify a few simple behaviors. <p> When the intended behavior becomes too complex to be specified directly in the proto-typing system, the developer is forced to program in a scripting language. The use of scripting languages makes pro-totyping tools much like a higher-level programming environments. HyperCard <ref> [13] </ref> uses an index card metaphor where cards represent windows and transitions between system states is handled by having HyperCard go to the right card. HyperCards index card metaphor is not the same as Gamuts playing-card metaphor. A deck of playing cards is an entity separate from any given window.
Reference: [14] <author> Daniel H.H. Ingalls, </author> <title> The Smalltalk-76 Programming System: </title> <booktitle> Design and Implementation, Conference Record of the Fifth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <month> January, </month> <year> 1978. </year>
Reference-contexts: Languages like SmallTalk <ref> [14] </ref> and Visual Basic [44] have graphical primitives built-in to make interface specification easier. Though easier to program, these tools still lack the ability to specify behavior without programming.
Reference: [15] <author> David Kosbie. KATIE: </author> <title> Architectural Support for Programming by Demonstration. </title> <type> Ph.D. Thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, not completed. </institution>
Reference-contexts: Gamuts data descriptions and internal structure should be more accommodating towards hint-giving. Gamut should show that hints can be very powerful when they are thoughtfully applied. Kosbie mentions in his thesis the use of highlighting to point out important objects calling them focus events <ref> [15] </ref>. No mention is made in the thesis, though, about how to implement, categorize, or use these sorts of hints. Since Gamut will use this style of highlighting for its own hint annotation, it will provide an example implementation and a rationale behind its use.
Reference: [16] <author> David Kurlander and Steven Feiner. </author> <title> Editable Graphical Histories. </title> <booktitle> IEEE Workshop on Visual Languages, </booktitle> <pages> pages 127-134, </pages> <address> Pittsburgh, PA, </address> <month> October </month> <year> 1988. </year>
Reference-contexts: Most previous systems presented the internal representation in code form [7][3][19][6][47]. Mudugno has shown in her work that users understand picture representations best [26]. Her system as well as Kurlanders Chimera <ref> [16] </ref> use a comic book metaphor for displaying the systems actions. Other systems like Marquise [30] compromise between picture and text and present manipulable English-like sentences. 4.0 Related Work This research draws inspiration from at least three fields: graphical software tools, programming-by-demonstration, and machine learning.
Reference: [17] <author> Jill H. Larkin, Ruth W. Chabay, eds. </author> <title> Computer-Assisted Instruction and Intelligent Tutoring Systems: Shared Goals and Complementary Approaches. </title> <publisher> Lawrence Erlebaum Associates, Publishers, </publisher> <address> Hillsdale, New Jersey, </address> <year> 1992. </year>
Reference-contexts: Board games are also a good domain since there are many useful things that can be accomplished with board games. Many of the applications described in the Computer-Assisted Instruction literature <ref> [17] </ref> can be easily likened to a board game. There are countless possibilities for building games with educational merit. One problem preventing these ideas from being implemented is the difficulty of programming.
Reference: [18] <institution> Lemmings. Psychosis, Ltd., South Harrington Building, </institution> <address> Softon Street, Liverpool 134BQ, UK, </address> <year> 1992. </year>
Reference-contexts: Other video games include puzzle games and two dimensional arcade-like games. A puzzle game like Lemmings <ref> [18] </ref> is very much like a board game in which the pieces (the Lemmings) are assigned behaviors that change the state of the board. It will also be possible to build maze games such as PacMan and Number Munchers with Gamut.
Reference: [19] <author> Henry Lieberman. Mondrian: </author> <title> A Teachable Graphical Editor. Visible Language Workshop, </title> <publisher> MIT Media Laboratory, </publisher> <month> November </month> <year> 1991. </year>
Reference: [20] <author> Rudi K. Lutz. </author> <title> Towards an Intelligent Debugging System for Pascal Programs: On the Theory and Algorithms of Plan Recognition in Richs Plan Calculus. </title> <type> Ph.D. Thesis, </type> <institution> The Open University, Milton Keynes, </institution> <address> England, </address> <year> 1993. </year>
Reference-contexts: This same show work principle can be applied to Gamut and has a direct correlation with the annotations and techniques with which an author will demonstrate the rules of a board game. Lutzs Pascal tutoring system, PROUST <ref> [20] </ref>, uses plan recognition to help the student debug a program by examining the incorrect Pascal program and determining what is missing or mistaken. Lutzs system could disassemble a program into a network of control structures whose nodes represent the conditions that determine which path is followed.
Reference: [21] <author> Macromedia Director, </author> <note> Version 4.0. </note>
Reference-contexts: A deck of playing cards is an entity separate from any given window. The graphics on a given card need not even be shown to the player. Furthermore, one does not go to a playing card; playing cards are shufed, dealt, and played. Macromedia Director <ref> [21] </ref> uses a score sheet abstraction to lay out events. This allows the designer to build a movie-like simulation of an interface. <p> The other display is the counting sheet which is like a spreadsheet which automatically knows how to count various properties in the game. 5.1.2.1 Timeline A timeline feature has been provided in several other tools. Macromedia Director <ref> [21] </ref> uses a score sheet technique where the author lays out actions in time. Cyphers KIDSIM [2] uses a clock metaphor which the author starts and stops to run the simulation and can be used to reverse time. Gamut will use a timeline to provide feedback to the author.
Reference: [22] <author> David L. Maulsby, Ian H. Witten, and Kenneth A. Kittlitz. Metamouse: </author> <title> Specifying Graphical Procedures by Example. </title> <journal> ACM Computer Graphics, </journal> <volume> Volume 23, Number 3, </volume> <month> July </month> <year> 1989, </year> <pages> pp 127-136. 25 </pages>
Reference-contexts: Most prior PBD systems provided absolutely no forms of annotation ability instead relying on plain unannotated examples, but some system did provide some annotation. Demo II provided guidewire objects borrowed from Maulsbys Metamouse <ref> [22] </ref>. Demo II and Metamouse used geometric graphics such as lines and rectangles to connect and show relationships between other objects. Other systems like NeXTStep [32] used objects to space out widgets and constrain how objects react to window resizing. <p> Gamut will use five kinds of annotation objects: playing cards, mode switches, guide objects, behavior icons, and temporal ghosts. The guide objects are borrowed from the guidewire objects in Demo II [5] and MetaMouse <ref> [22] </ref>. The others are new and will be tested in Gamut for the first time. The constraint objects as well as playing cards and mode switches will be objects the author must create and assemble to use in a game.
Reference: [23] <author> David Maulsby. </author> <title> Instructible Agents. </title> <type> Ph.D. thesis. </type> <institution> Department of Computer Science, University of Calgary, Calgary, Alberta, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Rehearsal World made use of this technique calling these objects off-stage actors. Maulsby applied hint-giving ability to his PBD text editing systems Turvy, Moctec, and Cima <ref> [23] </ref>. Turvy and Moctec were not working systems but instead were Wizard of Oz experiments to see how users reacted to PBD including how they express hints. <p> When the author shows work, all of the annotation objects are presented to the system as well as the normal objects and the system must infer the relationships between all the objects. In Maulsbys work with Turvy <ref> [23] </ref>, we see that although some authors are quite expressive when they give hints and point out annotation objects, others are quiet and do not give hints unless prompted.
Reference: [24] <institution> Microsoft Word 6.0a. Microsoft Corp., </institution> <address> Redmond, WA, </address> <year> 1994. </year>
Reference-contexts: For instance, there are still no widely accepted PBD tools sold commercially. One aspect of a commercial product that comes close to PBD are macro builders such as found in Microsofts word processor, Word <ref> [24] </ref>. Currently, the most successful PBD tools in research have been applied to rather limited domains. 3 Tools to make interactive software like Marquise [30], Demo II [5], and KidSim [2] are just emerging and still have deficiencies that prevent an author from creating complete and useful applications.
Reference: [25] <author> Tom M. Mitchell. </author> <title> Generalization as Search. </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 18, </volume> <year> 1982, </year> <pages> pp 203-226. </pages>
Reference-contexts: The goal is to predict what symbol is correct for a given set of predicates. Many approaches have been taken to solve this problem. The algorithm ID3 [36] builds a decision tree using the predicates as choice points. Another solution to the problem was Mitchells concept space algorithm <ref> [25] </ref>. A concept space represents the set of all solutions as a graph and each positive and negative example cuts off portions of the graph until one is left with a single concept in the space. Classifier algorithms have tended to use only examples devoid of annotation.
Reference: [26] <author> Francesmary Mudugno, T.R.G. Green, Brad A. Myers. </author> <title> Visual Programming in a Visual Domain: A Case Study of Cognitive Dimension. </title> <booktitle> Proceedings Human-Computer Interaction94, People and Computers, </booktitle> <address> Glas-gow, </address> <month> August, </month> <year> 1994. </year>
Reference-contexts: That would not only would violate the nonprogramming requirement, but would also make possible syntax errors and other kinds of problems. Most previous systems presented the internal representation in code form [7][3][19][6][47]. Mudugno has shown in her work that users understand picture representations best <ref> [26] </ref>. Her system as well as Kurlanders Chimera [16] use a comic book metaphor for displaying the systems actions. <p> To manipulate behavior beyond aggregate buffer commands, Gamut will use English-like sentence dialogs similar to the interface found in Marquise [30]. In the future, we would prefer to see a better, more pictographic representation used because studies have shown that users understand diagrammatic representations better than text <ref> [26] </ref>. Since this is not the thrust of our research, though, the text method should prove sufficient. 5.2.4 Using Amulet Amulet provides several conveniences that make tools like Gamut easier to build.
Reference: [27] <author> Brad A. Myers. </author> <title> Creating User Interfaces by Demonstration. </title> <publisher> Academic Press, </publisher> <address> San Diego, </address> <year> 1988. </year>
Reference-contexts: Therefore, the PBD systems Gamut most resembles are those that are used to build interfaces or small programs. Also, since the research is concerned with communication between author and system, we examine other systems that use hints and annotations. 4.2.1 Building Things with PBD Peridot <ref> [27] </ref> was the first attempt to apply PBD to the task of building user interfaces. Peridot could be used to program widgets like buttons, scrollbars, and menus. Peridots inference engine was rule-based.
Reference: [28] <author> Brad A. Myers, Dario Giuse, et al. Garnet: </author> <title> Comprehensive Support for Graphical, Highly-Interactive User Interfaces. </title> <journal> IEEE Computer, </journal> <volume> Vol. 23, No. 11, </volume> <month> November, </month> <year> 1990. </year>
Reference-contexts: Amulet provides a retained graphics model so that all drawing is handled by the system. The executable form for the rules should be straightforward to represent in Amulet. Amulets object system should be sufficient to use directly as Gamuts object system. Behaviors correspond to interactors <ref> [28] </ref>, and the actions correspond to command objects [29]. Using command objects, a new abstraction specific to Amulet, may also be a simple way to implement Gamuts timeline. Data descriptions do not exist in Amulet so they will have to be designed and implemented.
Reference: [29] <author> Brad A. Myers and David Kosbie. </author> <title> Reusable Hierarchical Command objects. </title> <note> Submitted to CHI96, </note> <year> 1995. </year>
Reference-contexts: The executable form for the rules should be straightforward to represent in Amulet. Amulets object system should be sufficient to use directly as Gamuts object system. Behaviors correspond to interactors [28], and the actions correspond to command objects <ref> [29] </ref>. Using command objects, a new abstraction specific to Amulet, may also be a simple way to implement Gamuts timeline. Data descriptions do not exist in Amulet so they will have to be designed and implemented.
Reference: [30] <author> Brad A. Myers, Richard G. McDaniel, and David S. Kosbie. Marquise: </author> <title> Creating Complete User Interfaces by Demonstration. </title> <booktitle> Proceeding of INTERCHI93: Human Factors in Computing Systems, </booktitle> <year> 1993, </year> <pages> pp 293-300. </pages>
Reference-contexts: One aspect of a commercial product that comes close to PBD are macro builders such as found in Microsofts word processor, Word [24]. Currently, the most successful PBD tools in research have been applied to rather limited domains. 3 Tools to make interactive software like Marquise <ref> [30] </ref>, Demo II [5], and KidSim [2] are just emerging and still have deficiencies that prevent an author from creating complete and useful applications. <p> The benefit of providing a direct way to express modal behavior is mostly a matter of convenience. The alternative to manipulating modes is to distribute a condition to each behavior and object as required in Marquise <ref> [30] </ref> and KidSim [2]. <p> The author can make connections more easily if the recent past is made accessible. 7 Prior systems like Marquise <ref> [30] </ref> have just touched on the benefit of making the recent past accessible. Marquise uses special cursors to indicate the positions where the mouse was clicked down, moved, and lifted. <p> Most previous systems presented the internal representation in code form [7][3][19][6][47]. Mudugno has shown in her work that users understand picture representations best [26]. Her system as well as Kurlanders Chimera [16] use a comic book metaphor for displaying the systems actions. Other systems like Marquise <ref> [30] </ref> compromise between picture and text and present manipulable English-like sentences. 4.0 Related Work This research draws inspiration from at least three fields: graphical software tools, programming-by-demonstration, and machine learning. PBD is, of course, the strongest inuence. <p> Likewise, users were annoyed by the constant barrage of rule confirmations. Gamut rules will be able to be composed so that novel behaviors will be more likely to be recognized; plus, the means for correcting behavior will not require constant, yes/no confirmations. Gamut most resembles Marquise <ref> [30] </ref>, a previous system the author built. Just as Gamut, Marquises task was to develop whole applications, but Marquise focused on the graphical editor domain. Marquise provided a set of built-in tools for distinguishing common graphical editor characteristics. <p> Potentially, the author can save a great deal of time by taking a behavior, making a copy of it, and pasting it onto another object. To manipulate behavior beyond aggregate buffer commands, Gamut will use English-like sentence dialogs similar to the interface found in Marquise <ref> [30] </ref>. In the future, we would prefer to see a better, more pictographic representation used because studies have shown that users understand diagrammatic representations better than text [26].
Reference: [31] <editor> Newstrack. </editor> <booktitle> Communications of the ACM, </booktitle> <month> May </month> <year> 1995, </year> <journal> Volume. </journal> <volume> 38, No. 5, p 9. </volume>
Reference-contexts: Making it easier to build applications enables more people to be creative using the computer as their medium. Computers are now a common household item. About 37% of American households own a personal computer today <ref> [31] </ref> and the percentage is likely to rise. Certainly most computer owners will simply buy much of their needed software, but companies cannot possibly know the needs of every person.
Reference: [32] <institution> NeXTStep and the NeXT Interface Builder. NeXT, Inc., </institution> <address> Redwood City, CA, </address> <year> 1991. </year>
Reference-contexts: Last are application builders which are tools tailored to a specific domain. 4.1.1 User Interface Builders A user interface builder is essentially a direct manipulation drawing tool that uses interface widgets like menus and scrollbars instead of graphics like rectangles and circles. UI builders like NeXTStep <ref> [32] </ref> and the one included in Visual C++ [45] allow the interface designer to arrange widgets on a prototype window, choose colors and styles, and experiment with different configurations. When the designer finds the interface acceptable, the layout is converted into code. <p> Demo II provided guidewire objects borrowed from Maulsbys Metamouse [22]. Demo II and Metamouse used geometric graphics such as lines and rectangles to connect and show relationships between other objects. Other systems like NeXTStep <ref> [32] </ref> used objects to space out widgets and constrain how objects react to window resizing. Off-screen objects are put into an application but not within a visible window and serve to represent data like variables that have no graphical representation.
Reference: [33] <author> Robert P. Nix. </author> <title> Editing by Example. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Volume 7, Number 4, </volume> <month> October </month> <year> 1985, </year> <pages> pp 600-621. </pages>
Reference: [34] <institution> Number Munchers. </institution> <address> Mecc, 6160 Summit Drive North, Minneapolis, MN 55430-4033, </address> <year> 1990. </year>
Reference-contexts: Other games are more abstract like chess, maze games, and card games like Klondike and Spades. Since the applications are implemented on a computer which can provide automation and animation, the domain also includes video games like Reader Rabbit [37] or Number Munchers <ref> [34] </ref>. 2.1 Why Board Games? Building whole board games requires a level of sophistication that has not previously been provided in a tool that does not require using a programming language. <p> A research system like Amulet is much preferable as its source code is available and relatively easy to extend and modify. 19 6.0 Scenario As a sample demonstration, we will show how to build a simplified version of the game, Number Munchers <ref> [34] </ref>. Number Munchers is a commercial educational game that teaches young children basic arithmetic and properties of numbers. In the game, the player controls a PacMan-like creature, but instead of eating dots, the creature eats numbers.
Reference: [35] <author> PacMan, Namco, </author> <title> distributed by Midway, </title> <year> 1980. </year>
Reference-contexts: For instance, in Parcheesi and Backgammon, two pieces in the same location mean the path is blocked. A single piece in the same location can be captured by the opponent. Another example where proximity matters is when the PacMan <ref> [35] </ref> runs into a monster, then the PacMan dies. Also, the paths between objects can have as much meaning as the objects themselves. In chess, each piece is constrained to follow a limited number of paths.
Reference: [36] <author> J.R. Quinlan. </author> <title> Induction of Decision Trees. Machine Learning, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <note> Vol. 1, </note> <year> 1986, </year> <pages> pp 81-106. </pages>
Reference-contexts: The goal is to predict what symbol is correct for a given set of predicates. Many approaches have been taken to solve this problem. The algorithm ID3 <ref> [36] </ref> builds a decision tree using the predicates as choice points. Another solution to the problem was Mitchells concept space algorithm [25].
Reference: [37] <author> Reader Rabbit. </author> <title> The Learning Company, </title> <year> 1987. </year>
Reference-contexts: Other games are more abstract like chess, maze games, and card games like Klondike and Spades. Since the applications are implemented on a computer which can provide automation and animation, the domain also includes video games like Reader Rabbit <ref> [37] </ref> or Number Munchers [34]. 2.1 Why Board Games? Building whole board games requires a level of sophistication that has not previously been provided in a tool that does not require using a programming language.
Reference: [38] <author> Randall B. Smith. </author> <title> Experiences with the Alternate Reality Kit: An example of the Tension Between Literalism and Magic. </title> <journal> IEEE Computer Graphics and Applications. </journal> <volume> Volume 7, Number 9, </volume> <month> September </month> <year> 1987, </year> <pages> pp. 42-50. </pages>
Reference-contexts: Expressions requiring anything beyond linear arithmetic will require the author to type in the expression by hand. Complicated expressions that require special solving techniques like differential equations will not be expressible at all. This makes games that simulate true physics like Smiths ARKkit <ref> [38] </ref> inexpressible in Gamut. Some of these deficiencies can be circumvented by adding special interfaces for expressing these complicated sorts of interactions. 3.0 Requirements and Challenges A game author desires to express the design completely and efficiently.
Reference: [39] <author> Elliot Soloway and James C. Spohrere eds. </author> <title> Learning Programming Concepts. Studying the Novice Programmer, section III, </title> <publisher> Lawrence Erlbaum Associates, </publisher> <address> Hillsdale, New Jersey, </address> <year> 1989, </year> <pages> pp 125-180. </pages>
Reference-contexts: It is well known that programming is a difficult task for people to learn, and most people are not able programmers. In fact, there are studies that show that programming using a symbolic language is a significantly difficult task <ref> [39] </ref>. Rather than make programming a matter of literacy, the tools for building software should require no programming knowledge at all. There are people with the ability to draw or write music and some of them would like to be able to incorporate their skills into software.
Reference: [40] <author> Starblade, Namco, </author> <year> 1991 </year>
Reference-contexts: No one would expect uninitiated people to be able to build KidSim in Gamut without considerable time and motivation. Of course, there are countless games that are simply outside of Gamuts domain. Some examples are three dimensional games like Starblade <ref> [40] </ref>, or applications that require an external database such as a large dictionary. Gamut will have a limited ability to infer arithmetic expressions implicitly. Expressions requiring anything beyond linear arithmetic will require the author to type in the expression by hand.
Reference: [41] <author> F. G. Tresham and Harland Trefoil Ltd. Civilization. </author> <title> The Avalon Hill Game Company, </title> <address> Baltimore, MD 21214, </address> <year> 1981. </year>
Reference-contexts: The number of certain kinds of pieces or tiles can determine important factors in a game. In Civilization <ref> [41] </ref>, the number of city pieces owned by a player determines whether the players game can proceed to the next phase. Often, the players final score is determined by counting the pieces the player owns and applying the number to a simple formula.
Reference: [42] <author> Francis Tresham. </author> <title> 1830. The Avalon Hill Game Company, </title> <address> Baltimore, MD 21214, </address> <year> 1986. </year>
Reference-contexts: One problem preventing these ideas from being implemented is the difficulty of programming. With a tool like Gamut these kinds of educational games can be made more easily by people who are not normally considered to be computer users. The game 1830 <ref> [42] </ref> is a railroad game which consists of players buying and selling stocks for several railroad companies; players also build railroad routes to establish the value of their companies.
Reference: [43] <author> Kurt VanLehn. </author> <title> Learning One Subprocedure per Lesson. </title> <journal> Artificial Intelligence, </journal> <volume> Vol. 31, </volume> <year> 1987, </year> <pages> pp 1-40. </pages>
Reference-contexts: These systems tend to be specialized to their domain to such a high degree as to be relatively useless to apply any of their techniques to Gamut. On the other hand, simpler systems such as Van Lehns SIERRA <ref> [43] </ref> which models how a student learns how to perform subtraction can be quite useful. Van Lehn argues that a student learns multiplication by learning and using the special annotations that show where work is performed. <p> The author is given opportunity to help the system as much as desired, but does not require the author to specify every detail. We allow the author to give help because machine learning literature shows that pure inductive learning algorithms cannot be taught complicated lessons <ref> [43] </ref>. Our task requires inferring, among other things, iteration, conditions, and connections between objects. This implies that pure inductive methods are going to fail if applied to our domain. In order for learning to go smoothly, the author must do two things.
Reference: [44] <institution> Visual Basic. Microsoft Corp., </institution> <address> Redmond, WA, </address> <year> 1993. </year>
Reference-contexts: It would be unlikely that one could make an math tutor using Pinball Construction Set, or for that matter, write an pinball game using a form builder. Another branch of software tools makes the task of programming easier but does not eliminate it. Tools like Visual Basic <ref> [44] </ref> and HyperCard [13] provide palettes that allow the author to place interface components directly into windows. Properties like the name of a button or the color of the background can be set directly through menus. Some tools even allow the author to directly specify a few simple behaviors. <p> Languages like SmallTalk [14] and Visual Basic <ref> [44] </ref> have graphical primitives built-in to make interface specification easier. Though easier to program, these tools still lack the ability to specify behavior without programming. By making widgets more powerful, one can use them to specify some behavior as was found in Gould and Finzers Rehearsal World [7].
Reference: [45] <institution> Visual C/C++. Microsoft Corp., </institution> <address> Redmond, WA, </address> <year> 1993. </year>
Reference-contexts: UI builders like NeXTStep [32] and the one included in Visual C++ <ref> [45] </ref> allow the interface designer to arrange widgets on a prototype window, choose colors and styles, and experiment with different configurations. When the designer finds the interface acceptable, the layout is converted into code.
Reference: [46] <author> Patrick Henry Winston. </author> <title> Learning Class Descriptions From Samples. </title> <booktitle> Artificial Intelligence, Chapter 11, </booktitle> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1984, </year> <pages> pp 385-408 </pages>
Reference-contexts: The results of the system can later be used to apply the concepts to some task. There are many variations to inductive 12 learning. Winstons classic system that learned to recognize the properties of arches was one of the first inductive systems <ref> [46] </ref>. The differences between techniques depend both on the kinds of examples the system can use and the kind of language the system produces to describe the examples. Annotated examples provide clues that explain why the example is important. <p> No previous PBD system has placed this great an emphasis on search and code reuse. Other systems have been content to relearn knowledge and treat each example as though it were a brand new concept to be learned. 5.2.2 Inferencing Algorithm Winston categorized the spectrum of learning environments <ref> [46] </ref>. The first end is learning by pure examples. In this category, the author makes no attempt to explain and only provides a set of positive and negative examples. This is called pure inductive learning, learning by watching, or programming by example.
Reference: [47] <author> David Wolber. </author> <title> Developing User Interfaces By Stimulus Response Demonstration. </title> <type> Ph.D. Thesis, </type> <institution> Computer Science Department, University of California, Davis, </institution> <year> 1992. </year>
Reference-contexts: The other set of distinctions the author must switch between are demonstrating the cause for a behavior, demonstrating the effects of a behavior, and just manipulating the interface to set up the next demonstration. Only two of these modes have been traditionally given names in the literature <ref> [47] </ref>, specifically Stimulus mode for showing causes and Response mode for showing effects. These modes arise from the nature of behavior. A behavior not only has actions, but in order to be interactive, must have a set of events that cause those actions to occur. <p> Marquise did provide a set of ghost cursors to record where the mouse was used in the recent past; Gamut will extend this idea further. The Stimulus/Response demonstration style was first used by Wolber in the Demo <ref> [47] </ref> system and its successor Demo II [5]. These systems are able to infer linear constraints between graphical properties. Interaction in the Demo series is limited to the transformations provided in the graphics editor such as clicking on or resizing an object.
References-found: 47

