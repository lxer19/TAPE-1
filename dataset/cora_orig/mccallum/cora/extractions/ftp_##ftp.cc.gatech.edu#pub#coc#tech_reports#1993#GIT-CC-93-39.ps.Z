URL: ftp://ftp.cc.gatech.edu/pub/coc/tech_reports/1993/GIT-CC-93-39.ps.Z
Refering-URL: http://www.cs.gatech.edu/tech_reports/index.93.html
Root-URL: 
Title: Dynamic Scheduling for Obstacle Avoidance in Mobile Robots GIT-CC-93/39  
Author: Tucker Balch Harold Forbes Karsten Schwan 
Date: June 30, 1993  
Abstract: In robotics applications the speed at which a task may be completed is often limited by computation rather than actuator or sensor throughput. This research concerns the efficient threads-based implementation of motor schema-based reactive navigation for mobile robots. One result of this implementation is the insight that best effort scheduling offers significant performance advantages on uni- and multiprocessor architectures over static priority or round-robin scheduling. However, robot safety requires guaranteed rather than best effort scheduling. Furthermore, low scheduling latency is important, to allow the robot to respond quickly to the real world. This paper presents the design and initial implementation results of a distributed, real-time, multiprocessor, dynamic scheduler offering both good quality scheduling decisions as well as low scheduling latency for individual tasks. Lastly, based on our results, we present a design for schema-based robot control when higher-level planning tasks 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Albus, H. McCain, and R Lumia. </author> <title> Nbs standard reference model for telerobot control system architecture (nasrem). NBS Technical Note, </title> <address> Washington, D.C., </address> <year> 1987. </year>
Reference-contexts: Current approaches to this problem may be categorized as symbolic vs. reactive. Symbolic methods utilize explicit internal representations of the world which are deliberated upon for path planning <ref> [1, 8] </ref>. Sensors and actuators are separated by a hierarchy of modules responsible for maintaining the symbolic representation and acting upon it. In contrast, reactive systems are characterized by tight sensor to motor couplings.
Reference: [2] <author> R.C. Arkin. </author> <title> Motor schema-based mobile robot navigation. </title> <journal> International Journal of Robotics Research, </journal> <volume> 8(4) </volume> <pages> 92-112, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Motor schemas are the basic unit of behavioral control in AuRA. Several schemas may be active as the robot navigates. Such schemas are independent processes that combine to generate an overall navigational behavior. Many motor schemas have been developed <ref> [2] </ref> but only a few are necessary for basic navigation: * Avoid-static-obstacle: A repulsion is generated by a detected barrier to mo tion: 0 for d &gt; S V magnitude = Sd SR fl G f or R &lt; d S where: S = Sphere of influence (radial extent of force <p> obstacle V direction = away from the obstacle along a line to the robot * Move-to-goal: Move towards a perceptually discernible goal: V magnitude = fixed gain value V direction = directly towards the goal. * Noise: a random vector used to circumvent certain problems associated with potential fields methods <ref> [2, 6] </ref>. 5 V magnitude = fixed gain value V direction = random direction for a given time persistence These output vectors are summed, then normalized. The result is transmitted to the robot (or simulated robot) for execution. The motor schemas utilize perceptual schemas as input.
Reference: [3] <author> R.C. Arkin. </author> <title> The impact of cybernetics on the design of a mobile robot system: A case study. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 20(6) </volume> <pages> 1245-1257, </pages> <month> Nov/Dec </month> <year> 1990. </year>
Reference-contexts: Since these reactions are usually independent, they may be produced by concurrently executable threads of computation. 2.2 AuRA The Autonomous Robot Architecture Many reactive robotic systems have been developed (e.g., [5, 7, 9]). The system implemented in this research is based on the Autonomous Robot Architecture (AuRA) <ref> [3] </ref>. AuRA is a hybrid architecture integrating both deliberative and reactive control. Among other things, the deliberative component selects way-points, or intermediate goals the robot must approach. Once a goal has been selected, the reactive exceution component is responsible for moving the robot to that location. <p> Such perceptual strategies provide only the sensory information that is necessary for the particular behavior being supported. For example, Avoid-static-obstacle need only know the range and direction to an object, not its color or composition. This is referred to as action-oriented perception <ref> [3] </ref>. 2.3 Threaded Reactive Navigation A threaded reactive system was implemented for a sample instance of a robot navigation problem. A simulated robot travels from a start position to a goal across a two dimensional virtual world with intervening obstacles.
Reference: [4] <author> Ben Blake. </author> <title> A Fast, Effective Scheduling Framework for Parallel Computing Systems. </title> <type> PhD thesis, </type> <institution> Ohio State University, </institution> <year> 1990. </year>
Reference-contexts: The scheduler uses Zhou's slot list algorithm [13] to perform uniprocessor schedulability analysis, and it employs offers <ref> [4] </ref> to allocate tasks to processors. Furthermore, scheduling latency is decreased by having multiple processors concurrently perform schedulability analysis for dynamically arriving tasks. Since such concurrent schedulability analysis must be performed without increases in uniprocessor task scheduling latency, the multiprocessor scheduler must have some basic characteristics: 1.
Reference: [5] <author> R. Brooks. </author> <title> A robust layered control system for a mobile robot. </title> <journal> IEEE Jour. of Robotics and Auto., </journal> <volume> RA-2(1):14, </volume> <year> 1986. </year>
Reference-contexts: Basic "reactions" to stimuli are combined to generate a resultant behavior. Since these reactions are usually independent, they may be produced by concurrently executable threads of computation. 2.2 AuRA The Autonomous Robot Architecture Many reactive robotic systems have been developed (e.g., <ref> [5, 7, 9] </ref>). The system implemented in this research is based on the Autonomous Robot Architecture (AuRA) [3]. AuRA is a hybrid architecture integrating both deliberative and reactive control. Among other things, the deliberative component selects way-points, or intermediate goals the robot must approach.
Reference: [6] <author> R.J. Clark, R.C. Arkin, and A. Ram. </author> <title> Learning momentum: On-line performance enhancement for reactive systems. </title> <booktitle> In IEEE Conf. on Robotics and Automation, </booktitle> <pages> pages 111-116. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1992. </year> <institution> Nice, France. </institution>
Reference-contexts: obstacle V direction = away from the obstacle along a line to the robot * Move-to-goal: Move towards a perceptually discernible goal: V magnitude = fixed gain value V direction = directly towards the goal. * Noise: a random vector used to circumvent certain problems associated with potential fields methods <ref> [2, 6] </ref>. 5 V magnitude = fixed gain value V direction = random direction for a given time persistence These output vectors are summed, then normalized. The result is transmitted to the robot (or simulated robot) for execution. The motor schemas utilize perceptual schemas as input.
Reference: [7] <author> L. Kaelbling and S. Rosenschein. </author> <title> Action and planning in embedded agents. </title> <editor> In P. Maes, editor, </editor> <title> Designing Autonomous Agents, page 35. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: Basic "reactions" to stimuli are combined to generate a resultant behavior. Since these reactions are usually independent, they may be produced by concurrently executable threads of computation. 2.2 AuRA The Autonomous Robot Architecture Many reactive robotic systems have been developed (e.g., <ref> [5, 7, 9] </ref>). The system implemented in this research is based on the Autonomous Robot Architecture (AuRA) [3]. AuRA is a hybrid architecture integrating both deliberative and reactive control. Among other things, the deliberative component selects way-points, or intermediate goals the robot must approach.
Reference: [8] <author> N. Nilsson. </author> <title> Shakey the robot. </title> <note> SRI International Tech. Note 323, </note> <year> 1984. </year>
Reference-contexts: Current approaches to this problem may be categorized as symbolic vs. reactive. Symbolic methods utilize explicit internal representations of the world which are deliberated upon for path planning <ref> [1, 8] </ref>. Sensors and actuators are separated by a hierarchy of modules responsible for maintaining the symbolic representation and acting upon it. In contrast, reactive systems are characterized by tight sensor to motor couplings.
Reference: [9] <author> D. Payton. </author> <title> Internalized plans: A representation for action resources. </title> <editor> In P. Maes, editor, </editor> <title> Designing Autonomous Agents. </title> <publisher> MIT Press, </publisher> <year> 1991. </year>
Reference-contexts: Basic "reactions" to stimuli are combined to generate a resultant behavior. Since these reactions are usually independent, they may be produced by concurrently executable threads of computation. 2.2 AuRA The Autonomous Robot Architecture Many reactive robotic systems have been developed (e.g., <ref> [5, 7, 9] </ref>). The system implemented in this research is based on the Autonomous Robot Architecture (AuRA) [3]. AuRA is a hybrid architecture integrating both deliberative and reactive control. Among other things, the deliberative component selects way-points, or intermediate goals the robot must approach.
Reference: [10] <author> K. Ramamritham and J. A. Stankovic. </author> <title> Dynamic task scheduling in distributed hard real-time systems. </title> <journal> IEEE Software, </journal> <volume> 1(3), </volume> <pages> 84. </pages>
Reference-contexts: A bid is similar in concept to a bid in <ref> [10] </ref> in that it represents the ability of a particular processor to execute a particular task.
Reference: [11] <author> Karsten Schwan, Tom Bihari, Bruce W. Weide, and Gregor Taulbe e. </author> <title> High-performance operating system primitives for robotics and real- time control systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(3) </volume> <pages> 189-231, </pages> <month> August </month> <year> 1987. </year> <month> 21 </month>
Reference-contexts: 1 Introduction Autonomous robot applications potentially require significant computational power. Fortunately, since robot applications often consist of a number of relatively independent computational tasks, overall robot performance can be improved by executing these tasks concurrently on a multiprocessor <ref> [11] </ref>. Further improvements in performance can be obtained from tasks that are repetitive, but do not have fixed periods. Namely, the time between successive executions of the same task can be increased or decreased to accommodate the robot's current external environment or execution mode.
Reference: [12] <author> Karsten Schwan, Harold Forbes, Ahmed Gheith, Bodhisattwa Mukherjee, and Yiannis Samiotakis. </author> <title> A c thread library for multiprocessors. </title> <type> Technical Report TR-91/02, </type> <institution> Georgia Institute of Technology, </institution> <address> Atlanta, GA 30332-0280, </address> <month> January </month> <year> 1991. </year>
Reference-contexts: A simulated robot travels from a start position to a goal across a two dimensional virtual world with intervening obstacles. The system is implemented on a BBN Butterfly using the Cthreads library for parallel programming <ref> [12] </ref>. Since AuRA was intended for parallel execution, decomposition of the application into multiple threads is straightforward. The various motor and perceptual schemas are separated into individual threads which communicate using shared memory. A block diagram of the system is shown in Figure 1.
Reference: [13] <author> Hongyi Zhou. </author> <title> Task Scheduling and Synchronization for Multiprocessor Real-Time Systems. </title> <type> PhD thesis, </type> <institution> Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: Rather than having to consider the possible implications of all other tasks running in the system, the programmer can build a behavior in relative isolation, as is intended by by the schema concept. In <ref> [13] </ref>, Zhou describes a fast (O (n log n)) dynamic scheduler able to make hard scheduling guarantees. However, her initial multiprocessor implementation only allows 12 a single scheduler to be active at a time. <p> The design and implementation of a concurrent scheduler is described next. 5 A Scalable Real-Time Multiprocessor Sched uler Below, we describe the design and implementation of the mechanisms and controls that permit multiple distributed schedulers to cooperatively decide task allocation and scheduling. The scheduler uses Zhou's slot list algorithm <ref> [13] </ref> to perform uniprocessor schedulability analysis, and it employs offers [4] to allocate tasks to processors. Furthermore, scheduling latency is decreased by having multiple processors concurrently perform schedulability analysis for dynamically arriving tasks.
Reference: [14] <author> Hongyi Zhou, Karsten Schwan, and Ian Akyildiz. </author> <title> Performance effects of information sharing in a distributed multiprocessor real-time scheduler. </title> <type> Technical report, </type> <institution> College of Computing, Georgia Tech, GIT-CC-91/40, </institution> <month> Sept. </month> <year> 1991. </year> <note> Abbreviated version in 1992 IEEE Real-Time Systems Symposium, Phoenix. 22 </note>
Reference-contexts: Specifically schedulability analysis must be performed by multiple schedulers such that they do not typically access the same slot list, earliest deadline list, or offer at the same time. 13 Furthermore, issues regarding scalability vs. the desired degree of completeness of such shared information are addressed elsewhere <ref> [14] </ref>. Offer Queue A shared queue of offers waiting to be scheduled. Each offer describes the execution time characteristics of the offered task. Each offer contains a bid for each processor on which schedulability analysis of the offer succeeds.
References-found: 14

