URL: http://www.eecis.udel.edu/~decker/pubs/jiis97.ps.gz
Refering-URL: http://www.eecis.udel.edu/~decker/cv.html
Root-URL: http://www.eecis.udel.edu
Email: decker@cis.udel.edu  KATIA SYCARA sycara@cs.cmu.edu  
Title: Intelligent Adaptive Information Agents  
Author: KEITH S. DECKER Editor: Ibrahim Imam and Larry Kerschberg 
Keyword: Multi-Agent Systems, Intelligent Agents, Distributed AI, Agent Architectures, Information Gathering  
Address: 19716  Pittsburgh, PA 15213  
Affiliation: Department of Computer and Information Sciences, University of Delaware, Newark, DE  The Robotics Institute, Carnegie-Mellon University,  
Note: 1-24 c Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  
Abstract: Adaptation in open, multi-agent information gathering systems is important for several reasons. These reasons include the inability to accurately predict future problem-solving workloads, future changes in existing information requests, future failures and additions of agents and data supply resources, and other future task environment characteristic changes that require system reorganization. We have developed a multi-agent distributed system infrastructure, Retsina (REusable Task Structure-based Intelligent Network Agents) that handles adaptation in an open Internet environment. Adaptation occurs both at the individual agent level as well as at the overall agent organization level. The Retsina system has three types of agents. Interface agents interact with the user receiving user specifications and delivering results. They acquire, model, and utilize user preferences to guide system coordination in support of the user's tasks. Task agents help users perform tasks by formulating problem solving plans and carrying out these plans through querying and exchanging information with other software agents. Information agents provide intelligent access to a heterogeneous collection of information sources. In this paper, we concentrate on the adaptive architecture of the information agents. We use as the domain of application Warren, a multi-agent financial portfolio management system that we have implemented within the Retsina framework. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> P. R. Cohen and H. J. Levesque. </author> <title> Intention=choice + commitment. </title> <booktitle> In Proceedings of AAAI-87, </booktitle> <pages> pages 410-415, </pages> <address> Seattle, WA., </address> <year> 1987. </year> <note> AAAI. 22 </note>
Reference-contexts: 1. Introduction Due to the current nature of the World Wide Web, information is becoming increasingly difficult for a person or machine system to collect, filter, evaluate, and use in problem solving. The notion of Intelligent Software Agents (e.g., <ref> [1, 55, 32, 49, 35, 36, 18] </ref>), has been proposed to address this challenge.
Reference: 2. <author> Paul Cohen, Michael Greenberg, David Hart, and Adele Howe. </author> <title> Trial by fire: Understanding the design requirements for agents in complex environments. </title> <journal> AI Magazine, </journal> <volume> 10(3) </volume> <pages> 33-48, </pages> <month> Fall </month> <year> 1989. </year> <note> Also COINS-TR-89-61. </note>
Reference-contexts: Execution Adaptation Within similar architectures, previous execution-time adaptation has focussed on monitoring actions, or trying to determine if things are going badly before it is too late to correct the problem <ref> [21, 2] </ref>. In Retsina, we have begun looking at adaptive load-balancing/rebalancing behaviors such as agent cloning. Cloning is one of an information agent's possible responses to overloaded conditions.
Reference: 3. <author> Philip R. Cohen and Hector J. Levesque. </author> <title> Intention is choice with commitment. </title> <journal> Artificial Intelligence, </journal> <volume> 42(3) </volume> <pages> 213-261, </pages> <year> 1990. </year>
Reference-contexts: In the Retsina approach, an agent's control architecture consists of the following modules: communicator, planner, scheduler and execution monitor. The architecture presented here is consistent with BDI-style agent theory <ref> [3, 42] </ref>. These generic software components are common to all classes of agents, not just information agents. This differentiates our approach from approaches such as SIMS [28] that are focused on providing only multi-source information agent behaviors. <p> The most important constraint that the planning/plan retrieval algorithm needs to meet (as part of the agent's overall properties) is to guarantee at least one task for every goal until the goal is accomplished, removed, or believed to be unachievable <ref> [3] </ref>. For information agents, a common reason that a goal in unachievable is that its specification is malformed, in which case a task to respond with the appropriate KQML error message is instantiated. For more information on the structure of the planning module, see [54]. <p> Furthermore, an agent can have a mental state with respect to a particular specification of a preference or capability. An advertisement is a capability specification such that the agent creating the advertisement is committed <ref> [3, 25] </ref> to servicing any request that satisfies the advertisement's constraints. We have developed a standard basic advertising behavior that allows agents to encapsulate a model of their capabilities and send it to a "matchmaker" or "yellow-pages" middle agent [29].
Reference: 4. <author> P.R. Cohen and H.J. Levesque. </author> <title> Communicative actions for artificial agents. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 65-72, </pages> <address> San Francisco, June 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: The inner or content language is specified by the :language and :ontology and can thus be domain-specific. KQML currently only has informal semantics for most of its performatives and lacks com-missives <ref> [4] </ref>, however, these problems are being addressed [30, 47]. For example, a requestor agent makes information requests via ask to an information provider agent using the :reply-with parameter as a conversation marker. Eventually, it receives replies via reply or sorry messages with the a matching :in-reply-to parameter. <p> Plotted points are the measured idle percentages from exper imental data including cloning agents. 16 and commitments. This has two benefits: first, the semantics of requests and commitments are well-understood <ref> [19, 4] </ref>, and second, such a model allows us to build simpler agents that can work in a open environment. We say that a requester agent has preferences, and that a provider agent has capabilities.
Reference: 5. <author> C. Collet, M.N. Huhns, and W. Shen. </author> <title> Resource integration using a large knowledge base in Carnot. </title> <booktitle> Computer, </booktitle> <pages> pages 55-62, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: The work described here is focussing on WWW-based information where most of the information is unstructured and where an information agent does not have access to the contents of the whole information source at once but only through an external query interface. Projects such as Carnot <ref> [5] </ref> have shown that different types of traditional databases (e.g. relational, object-oriented) can be mapped via articulation axioms to a shared global context language (in Carnot's case, based on CYC).
Reference: 6. <author> R. Davis and R. G. Smith. </author> <title> Negotiation as a metaphor for distributed problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 20(1) </volume> <pages> 63-109, </pages> <month> January </month> <year> 1983. </year>
Reference: 7. <author> K. S. Decker, V.R. Lesser, M.V. Nagendra Prasad, and T. Wagner. MACRON: </author> <title> an architecture for multi-agent cooperative information gathering. </title> <booktitle> In Proccedings of the CIKM-95 Workshop on Intelligent Information Agents, </booktitle> <address> Baltimore, MD, </address> <year> 1995. </year>
Reference-contexts: Our current agent architecture is part of the Retsina (REusable, Task Structure-based Intelligent Network Agents) approach [48], partly based on earlier work on the DECAF architecture <ref> [7, 40] </ref>. In the Retsina approach, an agent's control architecture consists of the following modules: communicator, planner, scheduler and execution monitor. The architecture presented here is consistent with BDI-style agent theory [3, 42]. These generic software components are common to all classes of agents, not just information agents.
Reference: 8. <author> K. S. Decker, K. Sycara, and M. Williamson. </author> <title> Middle-agents for the internet. </title> <booktitle> In Proceedings of the Fifteenth International Joint Conference on Artificial Intelligence, </booktitle> <address> Nagoya, Japan, </address> <month> August </month> <year> 1997. </year>
Reference-contexts: Elsewhere, the authors have analyzed and developed an analytical model of what happens in an open system to the maximum service time when providers come and go <ref> [8] </ref>. We have also verified these results empirically using the Warren system, where the agents experience real communication and processor latencies, etc. while running on multiple serial processors. 5.2.
Reference: 9. <author> K. S. Decker, M. Williamson, and K. Sycara. </author> <title> Modeling information agents: Advertisements, organizational roles, and dynamic behavior. </title> <booktitle> In Proceedings of the AAAI-96 Workshop on Agent Modeling, </booktitle> <year> 1996. </year> <note> AAAI Report WS-96-02. </note>
Reference-contexts: We have developed a standard basic advertising behavior that allows agents to encapsulate a model of their capabilities and send it to a "matchmaker" or "yellow-pages" middle agent [29]. Such a matchmaker agent can then be used by a multi-agent system to form several different organizational structures <ref> [9] </ref>: Uncoordinated Team: agents use a basic shared behavior for asking questions that first queries the matchmaker as to who might answer the query, and then chooses an agent randomly for the target query.
Reference: 10. <author> Keith S. Decker. </author> <title> Task environment centered simulation. </title> <editor> In M. Prietula, K. Carley, and L. Gasser, editors, </editor> <title> Simulating Organizations: Computational Models of Institutions and Groups. </title> <publisher> AAAI Press/MIT Press, </publisher> <year> 1997. </year> <month> Forthcoming. </month>
Reference-contexts: This is not an exhaustive list. Our general architecture has supported other explo rations into understanding the effects of organizational structures <ref> [11, 12, 10] </ref>. 17 5.1. Example: Matchmaking and Brokering As an example of organizational adaptation, let us compare the failure recovery characteristics of matchmade and bureaucratic manager ("brokered") information organizations.
Reference: 11. <author> Keith S. Decker and Victor R. Lesser. </author> <title> An approach to analyzing the need for meta-level communication. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 360-366, </pages> <address> Chambery, France, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: This is not an exhaustive list. Our general architecture has supported other explo rations into understanding the effects of organizational structures <ref> [11, 12, 10] </ref>. 17 5.1. Example: Matchmaking and Brokering As an example of organizational adaptation, let us compare the failure recovery characteristics of matchmade and bureaucratic manager ("brokered") information organizations.
Reference: 12. <author> Keith S. Decker and Victor R. Lesser. </author> <title> A one-shot dynamic coordination algorithm for distributed sensor networks. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 210-216, </pages> <address> Washington, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: This is not an exhaustive list. Our general architecture has supported other explo rations into understanding the effects of organizational structures <ref> [11, 12, 10] </ref>. 17 5.1. Example: Matchmaking and Brokering As an example of organizational adaptation, let us compare the failure recovery characteristics of matchmade and bureaucratic manager ("brokered") information organizations.
Reference: 13. <author> Keith S. Decker and Victor R. Lesser. </author> <title> Quantitative modeling of complex computational task environments. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 217-224, </pages> <address> Washington, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: We have been working towards an integrated representation for information and control flow in hierarchical task structures <ref> [13, 54, 53] </ref>. Some types of adaptation expressed by an agent at this level include: Adapting to failures: At any time, any agent in the system might be unavailable or might go off-line (even if you are in the middle of a long term monitoring situation with that agent).
Reference: 14. <author> Keith S. Decker and Victor R. Lesser. </author> <title> Designing a family of coordination algorithms. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 73-80, </pages> <address> San Francisco, </address> <month> June </month> <year> 1995. </year> <note> AAAI Press. Longer version available as UMass CS-TR 94-14. </note>
Reference-contexts: The task structure representation we use here has features derived from earlier hierarchical task network planning work, as well as task structure representations such as TCA/TCX [45] and TAEMS <ref> [14] </ref>. 2.1. Agent Control Components The control process for information agents includes steps for communicating agent goals or objectives, planning to achieve local or non-local objectives, scheduling the actions within these plans, and actually carrying out these actions (see Figure 1).
Reference: 15. <author> D. Draper, S. Hanks, and D. Weld. </author> <title> Probabilistic planning with information gathering and contingent execution. </title> <booktitle> In Proc. 2nd Intl. Conf. on A.I. Planning Systems, </booktitle> <month> June </month> <year> 1994. </year>
Reference-contexts: Recently there has been a strong interest in new plan representations that support sophisticated control flow, such as parallel execution [27], conditional branching <ref> [41, 15] </ref> and loops [46, 34, 39, 23]. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions [37, 16].
Reference: 16. <author> O. Etzioni, S. Hanks, D. Weld, D. Draper, N. Lesh, and M. Williamson. </author> <title> An Approach to Planning with Incomplete Information. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <address> San Francisco, CA, </address> <month> October </month> <year> 1992. </year> <note> Morgan Kaufmann. Available via FTP from pub/ai/ at ftp.cs.washington.edu. </note>
Reference-contexts: Recently there has been a strong interest in new plan representations that support sophisticated control flow, such as parallel execution [27], conditional branching [41, 15] and loops [46, 34, 39, 23]. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions <ref> [37, 16] </ref>. The two developments are closely interrelated, since adaptive contingencies in a plan are only meaningful if new information from the changing outside world is made available to the planner.
Reference: 17. <author> Oren Etzioni, Neal Lesh, and Richard Segal. </author> <title> Building softbots for unix (preliminary report). </title> <type> Technical Report softbots-tr.ps, </type> <institution> University of Washington, </institution> <year> 1992. </year>
Reference-contexts: Notes 1. While SIMS agents do not have most of these capabilities, it is interesting to note that Et-zioni's softbots provide for some of them|periodic and externally enabled actions|by adding a programming language layer above the planner <ref> [17] </ref>, rather than by adding a seperate local scheduling component. 2. Here, the term periodic refers to to the fact that the task must be repeated at intervals that cannot be any longer than the specified period, i.e., "max invocation separation constrained" [38]. 3.
Reference: 18. <author> Oren Etzioni and Daniel Weld. </author> <title> A softbot-based interface to the internet. </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: 1. Introduction Due to the current nature of the World Wide Web, information is becoming increasingly difficult for a person or machine system to collect, filter, evaluate, and use in problem solving. The notion of Intelligent Software Agents (e.g., <ref> [1, 55, 32, 49, 35, 36, 18] </ref>), has been proposed to address this challenge.
Reference: 19. <author> T. Finin, R. Fritzson, D. McKay, and R. McEntire. </author> <title> KQML as an agent communication language. </title> <booktitle> In Proceedings of the Third International Conference on Information and Knowledge Management CIKM'94. </booktitle> <publisher> ACM Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: Moreover, information agents not only perform information gathering in response to queries but also can carry out long-term interactions that involve monitoring the Infosphere for particular conditions, as well as information updating. The agents communicate through message passing using the KQML <ref> [19] </ref> communication language. Since Retsina is an open agent society where agents may join (e.g. new agents are put on the Internet every day), or leave (e.g. agents fail intermittently) at any time, the agents utilize middle agents, e.g. matchmakers and brokers to find each other. <p> Communication An agent communicates with others through messages using KQML (Knowledge Query and Manipulation Language) <ref> [19, 31] </ref>. KQML is an emerging agent communication language standard that focuses on an extensible set of "performatives", based on speech acts [44], such as tell, ask, and advertise. <p> Plotted points are the measured idle percentages from exper imental data including cloning agents. 16 and commitments. This has two benefits: first, the semantics of requests and commitments are well-understood <ref> [19, 4] </ref>, and second, such a model allows us to build simpler agents that can work in a open environment. We say that a requester agent has preferences, and that a provider agent has capabilities. <p> Agents can dynamically adjust their organization as often as necessary, limited by transaction costs. Potentially such organizations provide efficient load balancing and the ability to provide truly expensive services (expensive in terms of the resources required). Federations: (e.g., <ref> [52, 22, 19] </ref>) Agents give up individual autonomy over choosing who they will do business with to a locally centralized "facilitator" (an extension of the matchmaker concept) that brokers requests. Centralization of message traffic potentially allows greater load balancing and the provision of automatic translation and mediation services. <p> Since the potential second agent would, if it existed, be totally idle from 1 &lt; n &lt; 6, the idle curve differs there in the cloning case. 6. All communications here are done via the appropriate KQML performatives or extensions <ref> [19] </ref>. 7. This effect could be reduced if requesters make an effort at active load balancing.
Reference: 20. <author> Alan Garvey, Marty Humphrey, and Victor Lesser. </author> <title> Task interdependencies in design-to-time real-time scheduling. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 580-585, </pages> <address> Washington, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: When a periodic task is chosen for execution, it is reinserted into the schedule with a deadline equal to the current time plus the action's period. The architecture can support more complex scheduling <ref> [20, 50] </ref>. 8 2.5. Execution Monitoring Since the Retsina agents operate in a dynamic environment, the results of their actions cannot be predicted with certainty. Therefore, the agent architecture includes an execution monitoring module. <p> Note that the task structure emphasizes the representation of information flows in a plan. The planner fleshes out these more basic relationships; the agent's scheduler then uses this information to produce a schedule (or schedules in a dynamic multi-criteria decision-making situation <ref> [20] </ref>) that selects, orders, and locates in time specific instantiated actions in a specific context. <p> Our task reduction planner, which focuses on indicating the underlying information flows between tasks, rather than directly indicating task ordering, was described. Current work includes the integration of a highly adaptive scheduling component (e.g., <ref> [20, 50] </ref>). 20 Time (sec) Request fulfillment Number of servers Number of Servers Predicted Elapsed T ime (sec) 0 200 400 600 1 3 0 200 400 600 Time (sec) Request fulfillment Number of servers Number of Servers Predicted 1 3 Elapsed T ime (sec) 21 This paper also discussed a
Reference: 21. <author> Alan Garvey and Victor Lesser. </author> <title> Representing and scheduling satisficing tasks. In Swami-nathan Natarajan, editor, </title> <journal> Imprecise and Approximate Computation, </journal> <pages> pages 23-34. </pages> <publisher> Kluwer Academic Publishers, Norwell, </publisher> <address> MA, </address> <year> 1995. </year>
Reference-contexts: Sophisticated schedulers will report such failures (or probable failures) before they occur by reasoning about action durations (and possibly commitments from other agents) <ref> [21] </ref>. * The scheduler attempts to maximize some predefined utility function defined on the set of task structures. For the information agents, we use a very simple notion of utility|every action needs to be executed in order to achieve a task, and every task has an equal utility value. <p> Execution Adaptation Within similar architectures, previous execution-time adaptation has focussed on monitoring actions, or trying to determine if things are going badly before it is too late to correct the problem <ref> [21, 2] </ref>. In Retsina, we have begun looking at adaptive load-balancing/rebalancing behaviors such as agent cloning. Cloning is one of an information agent's possible responses to overloaded conditions.
Reference: 22. <author> M.R. Genesereth and S.P. Ketchpel. </author> <title> Software agents. </title> <journal> Communications of the ACM, </journal> <volume> 37(7) 48-53,147, </volume> <year> 1994. </year> <month> 23 </month>
Reference-contexts: Agents can dynamically adjust their organization as often as necessary, limited by transaction costs. Potentially such organizations provide efficient load balancing and the ability to provide truly expensive services (expensive in terms of the resources required). Federations: (e.g., <ref> [52, 22, 19] </ref>) Agents give up individual autonomy over choosing who they will do business with to a locally centralized "facilitator" (an extension of the matchmaker concept) that brokers requests. Centralization of message traffic potentially allows greater load balancing and the provision of automatic translation and mediation services.
Reference: 23. <author> R. Goodwin. </author> <title> Using loops in decision-theoretic refinement planners. </title> <booktitle> In Proc. 3rd Intl. Conf. on A.I. Planning Systems, </booktitle> <year> 1996. </year>
Reference-contexts: Recently there has been a strong interest in new plan representations that support sophisticated control flow, such as parallel execution [27], conditional branching [41, 15] and loops <ref> [46, 34, 39, 23] </ref>. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions [37, 16].
Reference: 24. <author> T.R. Gruber. </author> <title> Toward principles for the design of ontologies used for knowledge sharing. </title> <type> Technical Report KSL-93-4, </type> <institution> Knowledge Systems Laboratory, Stanford University, </institution> <year> 1993. </year>
Reference-contexts: Such an approach is compatible with ours and can be used to add traditional structured database external sources to 4 our basic information agents. The ontological mismatch problem (e.g. <ref> [24] </ref>) is still a difficult one and is outside the scope of this paper.
Reference: 25. <author> N. R. Jennings. </author> <title> Commitments and conventions: The foundation of coordination in multi-agent systems. </title> <journal> The Knowledge Engineering Review, </journal> <volume> 8(3) </volume> <pages> 223-250, </pages> <year> 1993. </year>
Reference-contexts: Furthermore, an agent can have a mental state with respect to a particular specification of a preference or capability. An advertisement is a capability specification such that the agent creating the advertisement is committed <ref> [3, 25] </ref> to servicing any request that satisfies the advertisement's constraints. We have developed a standard basic advertising behavior that allows agents to encapsulate a model of their capabilities and send it to a "matchmaker" or "yellow-pages" middle agent [29].
Reference: 26. <author> W. Kim and J. Seo. </author> <title> Classifying schematic and data heterogeneity in multidatabase systems. </title> <booktitle> Computer, </booktitle> <pages> pages 12-18, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: A large amount of previous work has concentrated on how to access and integrate information from heterogeneous databases (e.g. relational databases) containing structured information. Many problems arise due to semantic schema conflicts and ontological mismatches <ref> [26] </ref>. The work described here is focussing on WWW-based information where most of the information is unstructured and where an information agent does not have access to the contents of the whole information source at once but only through an external query interface.
Reference: 27. <author> C. Knoblock. </author> <title> Generating parallel execution plans with a partial-order planner. </title> <booktitle> In Proc. 2nd Intl. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 98-103, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: Recently there has been a strong interest in new plan representations that support sophisticated control flow, such as parallel execution <ref> [27] </ref>, conditional branching [41, 15] and loops [46, 34, 39, 23]. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions [37, 16].
Reference: 28. <author> C.A. Knoblock, Y. Arens, and C. Hsu. </author> <title> Cooperating agents for information retrieval. </title> <booktitle> In Proc. 2nd Intl. Conf. on Cooperative Information Systems. </booktitle> <institution> Univ. of Toronto Press, </institution> <year> 1994. </year>
Reference-contexts: The architecture presented here is consistent with BDI-style agent theory [3, 42]. These generic software components are common to all classes of agents, not just information agents. This differentiates our approach from approaches such as SIMS <ref> [28] </ref> that are focused on providing only multi-source information agent behaviors.
Reference: 29. <author> D. Kuokka and L. Harada. </author> <title> On using KQML for matchmaking. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 239-245, </pages> <address> San Francisco, June 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: We have developed a standard basic advertising behavior that allows agents to encapsulate a model of their capabilities and send it to a "matchmaker" or "yellow-pages" middle agent <ref> [29] </ref>.
Reference: 30. <author> Y. Labrou and T. Finin. </author> <title> A semantics approach for KQML. </title> <booktitle> In Proceedings of the Third International Conference on Information and Knowledge Management CIKM'94. </booktitle> <publisher> ACM Press, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: The inner or content language is specified by the :language and :ontology and can thus be domain-specific. KQML currently only has informal semantics for most of its performatives and lacks com-missives [4], however, these problems are being addressed <ref> [30, 47] </ref>. For example, a requestor agent makes information requests via ask to an information provider agent using the :reply-with parameter as a conversation marker. Eventually, it receives replies via reply or sorry messages with the a matching :in-reply-to parameter.
Reference: 31. <author> Y. Labrou and T. Finin. </author> <title> A proposal for a new kqml specification. </title> <type> CSEE Technical Report TR CS-97-03, </type> <institution> University of Maryland Baltimore County, </institution> <month> August </month> <year> 1997. </year>
Reference-contexts: Communication An agent communicates with others through messages using KQML (Knowledge Query and Manipulation Language) <ref> [19, 31] </ref>. KQML is an emerging agent communication language standard that focuses on an extensible set of "performatives", based on speech acts [44], such as tell, ask, and advertise.
Reference: 32. <author> Kan Lang. Newsweeder: </author> <title> Learning to filter netnews. </title> <booktitle> In Proceedings of Machine Learning Conference, </booktitle> <year> 1995. </year>
Reference-contexts: 1. Introduction Due to the current nature of the World Wide Web, information is becoming increasingly difficult for a person or machine system to collect, filter, evaluate, and use in problem solving. The notion of Intelligent Software Agents (e.g., <ref> [1, 55, 32, 49, 35, 36, 18] </ref>), has been proposed to address this challenge.
Reference: 33. <author> Paul Lawrence and Jay Lorsch. </author> <title> Organization and Environment. </title> <publisher> Harvard University Press, </publisher> <address> Cambridge, MA, </address> <year> 1967. </year>
Reference-contexts: Organizational Adaptation The previous two sections have discussed adaptation within an agent, this section deals with adaptation at the multi-agent, organizational level. It has been clear to organizational theorists since at least the 60's that there is no one good organizational structure for human organizations <ref> [33] </ref>. Organizations must instead be chosen and adapted to the task environment at hand.
Reference: 34. <author> S. Lin and T. Dean. </author> <title> Generating optimal policies for markov decision processes formulated as plans with conditional branches and loops. </title> <booktitle> In Proc. 2nd European Planning Workshop, </booktitle> <year> 1995. </year>
Reference-contexts: Recently there has been a strong interest in new plan representations that support sophisticated control flow, such as parallel execution [27], conditional branching [41, 15] and loops <ref> [46, 34, 39, 23] </ref>. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions [37, 16].
Reference: 35. <editor> Pattie Maes. </editor> <title> Agents that reduce work and information overload. </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: 1. Introduction Due to the current nature of the World Wide Web, information is becoming increasingly difficult for a person or machine system to collect, filter, evaluate, and use in problem solving. The notion of Intelligent Software Agents (e.g., <ref> [1, 55, 32, 49, 35, 36, 18] </ref>), has been proposed to address this challenge.
Reference: 36. <author> Tom Mitchell, Rich Caruana, Dayne Freitag, John McDermott, and David Zabowski. </author> <title> Experience with a learning personal assistant. </title> <journal> Communications of the ACM, </journal> <volume> 37(7), </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: 1. Introduction Due to the current nature of the World Wide Web, information is becoming increasingly difficult for a person or machine system to collect, filter, evaluate, and use in problem solving. The notion of Intelligent Software Agents (e.g., <ref> [1, 55, 32, 49, 35, 36, 18] </ref>), has been proposed to address this challenge.
Reference: 37. <author> R. Moore. </author> <title> A Formal Theory of Knowledge and Action. </title> <editor> In J. Hobbs and R. Moore, editors, </editor> <title> Formal Theories of the Commonsense World. </title> <publisher> Ablex, </publisher> <address> Norwood, NJ, </address> <year> 1985. </year>
Reference-contexts: Recently there has been a strong interest in new plan representations that support sophisticated control flow, such as parallel execution [27], conditional branching [41, 15] and loops [46, 34, 39, 23]. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions <ref> [37, 16] </ref>. The two developments are closely interrelated, since adaptive contingencies in a plan are only meaningful if new information from the changing outside world is made available to the planner.
Reference: 38. <author> D. J. Musliner. </author> <title> Scheduling issues arising from automated real-time system design. </title> <type> Technical Report CS-TR-3364, </type> <institution> UMIACS-TR-94-118, Department of Computer Science, University of Maryland, </institution> <year> 1994. </year>
Reference-contexts: Here, the term periodic refers to to the fact that the task must be repeated at intervals that cannot be any longer than the specified period, i.e., "max invocation separation constrained" <ref> [38] </ref>. 3. Another way to recoup this time is to run the blocking external query in a separate process, breaking run-query into two parts.
Reference: 39. <author> L. Ngo and P. Haddawy. </author> <title> Representing iterative loops for decision-theoretic planning. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Extending Theories of Action, </booktitle> <year> 1995. </year>
Reference-contexts: Recently there has been a strong interest in new plan representations that support sophisticated control flow, such as parallel execution [27], conditional branching [41, 15] and loops <ref> [46, 34, 39, 23] </ref>. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions [37, 16].
Reference: 40. <author> Tim Oates, M. V. Nagendra Prasad, Victor R. Lesser, and Keith S. Decker. </author> <title> A distributed problem solving approach to cooperative information gathering. </title> <booktitle> In AAAI Spring Symposium on Information Gathering in Distributed Environments, </booktitle> <institution> Stanford University, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Our current agent architecture is part of the Retsina (REusable, Task Structure-based Intelligent Network Agents) approach [48], partly based on earlier work on the DECAF architecture <ref> [7, 40] </ref>. In the Retsina approach, an agent's control architecture consists of the following modules: communicator, planner, scheduler and execution monitor. The architecture presented here is consistent with BDI-style agent theory [3, 42]. These generic software components are common to all classes of agents, not just information agents.
Reference: 41. <author> M. Peot and D. Smith. </author> <title> Conditional Nonlinear Planning. </title> <booktitle> In Proc. 1st Intl. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 189-197, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Recently there has been a strong interest in new plan representations that support sophisticated control flow, such as parallel execution [27], conditional branching <ref> [41, 15] </ref> and loops [46, 34, 39, 23]. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions [37, 16].
Reference: 42. <author> A.S. Rao and M.P. Georgeff. </author> <title> BDI agents: From theory to practice. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 312-319, </pages> <address> San Francisco, June 1995. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: In the Retsina approach, an agent's control architecture consists of the following modules: communicator, planner, scheduler and execution monitor. The architecture presented here is consistent with BDI-style agent theory <ref> [3, 42] </ref>. These generic software components are common to all classes of agents, not just information agents. This differentiates our approach from approaches such as SIMS [28] that are focused on providing only multi-source information agent behaviors.
Reference: 43. <author> W. Richard Scott. </author> <title> Organizations: Rational, Natural, and Open Systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1987. </year>
Reference-contexts: Most important are the different types and qualities of uncertainty present in the environment (e.g., uncertainty associated with inputs and output measurements, uncertainty associated with causal relationships in the environment, the time span of definitive feedback after making a decision <ref> [43] </ref>). In multi-agent information systems, one of the most important sources of uncertainty revolves around what information is available from whom (and at what cost). Our organizational model relies on three basic roles: that of the requester, the middle-agent, and the provider.
Reference: 44. <author> J. R. Searle. </author> <title> Speech Acts: An Essay in the Philosophy of Language. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1969. </year>
Reference-contexts: Communication An agent communicates with others through messages using KQML (Knowledge Query and Manipulation Language) [19, 31]. KQML is an emerging agent communication language standard that focuses on an extensible set of "performatives", based on speech acts <ref> [44] </ref>, such as tell, ask, and advertise. Each communicative act consists of an well-known outer language that includes the performative and several message "parameters" such as :sender, :receiver, :reply-with, :in-reply-to, :language, :ontology, and :content.
Reference: 45. <author> R. Simmons. </author> <title> Structured control for autonomous robots. </title> <journal> IEEE Trans. on Robotics and Automation, </journal> <volume> 10(1), </volume> <month> February </month> <year> 1994. </year>
Reference-contexts: The task structure representation we use here has features derived from earlier hierarchical task network planning work, as well as task structure representations such as TCA/TCX <ref> [45] </ref> and TAEMS [14]. 2.1. Agent Control Components The control process for information agents includes steps for communicating agent goals or objectives, planning to achieve local or non-local objectives, scheduling the actions within these plans, and actually carrying out these actions (see Figure 1).
Reference: 46. <author> D. Smith and M. Williamson. </author> <title> Representation and evaluation of plans with loops. </title> <booktitle> In Working Notes of the AAAI Spring Symposium on Extended Theories of Action: Formal Theory and Practical Applications, </booktitle> <address> Stanford, CA, </address> <year> 1995. </year> <month> 24 </month>
Reference-contexts: Recently there has been a strong interest in new plan representations that support sophisticated control flow, such as parallel execution [27], conditional branching [41, 15] and loops <ref> [46, 34, 39, 23] </ref>. These developments have gone hand-in-hand with the creation of models for informative (a.k.a. "sensing", "information-gathering") actions [37, 16].
Reference: 47. <author> I.A. Smith and P.R. Cohen. </author> <title> Toward a semantics for an agent communication language based on speech acts. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 24-31, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: The inner or content language is specified by the :language and :ontology and can thus be domain-specific. KQML currently only has informal semantics for most of its performatives and lacks com-missives [4], however, these problems are being addressed <ref> [30, 47] </ref>. For example, a requestor agent makes information requests via ask to an information provider agent using the :reply-with parameter as a conversation marker. Eventually, it receives replies via reply or sorry messages with the a matching :in-reply-to parameter.
Reference: 48. <author> K. Sycara, K. S. Decker, A. Pannu, M. Williamson, and D. Zeng. </author> <title> Distributed intelligent agents. </title> <journal> IEEE Expert, </journal> <volume> 11(6) </volume> <pages> 36-46, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: information from various on-line information sources, resolving inconsistencies in the retrieved information, filtering away irrelevant or unwanted information, integrating information from heterogeneous information sources and adapting over time to their human users' information needs and the shape of the Infosphere. 2 We have developed a multi-agent system infrastructure, called Retsina <ref> [48] </ref> where multi-agents compartmentalize specialized task knowledge and coordinate among themselves to gather and filter information in response to user-initiated problem solving. We have developed applications in different domains using the Retsina framework. Of particular interest for this paper is Warren, a multi-agent system for financial portfolio management. <p> The design of useful basic agent behaviors for all types of agents rests on a deeper specification of agents themselves, and is embodied in an agent architecture. Our current agent architecture is part of the Retsina (REusable, Task Structure-based Intelligent Network Agents) approach <ref> [48] </ref>, partly based on earlier work on the DECAF architecture [7, 40]. In the Retsina approach, an agent's control architecture consists of the following modules: communicator, planner, scheduler and execution monitor. The architecture presented here is consistent with BDI-style agent theory [3, 42].
Reference: 49. <author> Katia Sycara and Dajun Zeng. </author> <title> Towards an intelligent electronic secretary. </title> <booktitle> In Proceedings of the CIKM-94 (International Conference on Information and Knowledge Management) Workshop on Intelligent Information Agents, </booktitle> <institution> National Institute of Standards and Technology, Gaithersburg, Maryland, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: 1. Introduction Due to the current nature of the World Wide Web, information is becoming increasingly difficult for a person or machine system to collect, filter, evaluate, and use in problem solving. The notion of Intelligent Software Agents (e.g., <ref> [1, 55, 32, 49, 35, 36, 18] </ref>), has been proposed to address this challenge.
Reference: 50. <author> T. Wagner, A. Garvey, and V. Lesser. </author> <title> Complex goal criteria and its application in design-to-criteria scheduling. </title> <booktitle> In Proceedings of the Fourteenth National Conference on Artificial Intelligence, </booktitle> <address> Providence, </address> <month> July </month> <year> 1997. </year>
Reference-contexts: When a periodic task is chosen for execution, it is reinserted into the schedule with a deadline equal to the current time plus the action's period. The architecture can support more complex scheduling <ref> [20, 50] </ref>. 8 2.5. Execution Monitoring Since the Retsina agents operate in a dynamic environment, the results of their actions cannot be predicted with certainty. Therefore, the agent architecture includes an execution monitoring module. <p> Our task reduction planner, which focuses on indicating the underlying information flows between tasks, rather than directly indicating task ordering, was described. Current work includes the integration of a highly adaptive scheduling component (e.g., <ref> [20, 50] </ref>). 20 Time (sec) Request fulfillment Number of servers Number of Servers Predicted Elapsed T ime (sec) 0 200 400 600 1 3 0 200 400 600 Time (sec) Request fulfillment Number of servers Number of Servers Predicted 1 3 Elapsed T ime (sec) 21 This paper also discussed a
Reference: 51. <author> Michael Wellman. </author> <title> A market-oriented programming environment and its application to distributed multicommodity flow problems. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 1 </volume> <pages> 1-23, </pages> <year> 1993. </year>
Reference-contexts: Very low overhead, but potentially unbalanced loads, reliability limited by individual data sources, and problems linking queries across multiple ontologies. Economic Markets: (e.g., <ref> [51] </ref>) Agents use price, reliability, and other utility characteristics with which to choose another agent. The matchmaker can supply to each agent the appropriate updated pricing information as new agents enter and exit the system, or alter their advertisements.
Reference: 52. <author> G. Wiederhold, P. Wegner, and S. Cefi. </author> <title> Toward megaprogramming. </title> <journal> Communications of the ACM, </journal> <volume> 33(11) </volume> <pages> 89-99, </pages> <year> 1992. </year>
Reference-contexts: Agents can dynamically adjust their organization as often as necessary, limited by transaction costs. Potentially such organizations provide efficient load balancing and the ability to provide truly expensive services (expensive in terms of the resources required). Federations: (e.g., <ref> [52, 22, 19] </ref>) Agents give up individual autonomy over choosing who they will do business with to a locally centralized "facilitator" (an extension of the matchmaker concept) that brokers requests. Centralization of message traffic potentially allows greater load balancing and the provision of automatic translation and mediation services.
Reference: 53. <author> M. Williamson, K. S. Decker, and K. Sycara. </author> <title> Executing decision-theoretic plans in multi-agent environments. </title> <booktitle> In AAAI Fall Symposium on Plan Execution, </booktitle> <month> November </month> <year> 1996. </year> <note> AAAI Report FS-96-01. </note>
Reference-contexts: We have been working towards an integrated representation for information and control flow in hierarchical task structures <ref> [13, 54, 53] </ref>. Some types of adaptation expressed by an agent at this level include: Adapting to failures: At any time, any agent in the system might be unavailable or might go off-line (even if you are in the middle of a long term monitoring situation with that agent).
Reference: 54. <author> M. Williamson, K. S. Decker, and K. Sycara. </author> <title> Unified information and control flow in hierarchical task networks. </title> <booktitle> In Proceedings of the AAAI-96 workshop on Theories of Planning, Action, and Control, </booktitle> <year> 1996. </year>
Reference-contexts: For information agents, a common reason that a goal in unachievable is that its specification is malformed, in which case a task to respond with the appropriate KQML error message is instantiated. For more information on the structure of the planning module, see <ref> [54] </ref>. In section 3, we present planning adaptation. 2.4. Scheduling The agent scheduling process in general takes as input the agent's current set of task structures T , in particular, the set of all basic actions, and decides which basic action, if any, is to be executed next. <p> We have been working towards an integrated representation for information and control flow in hierarchical task structures <ref> [13, 54, 53] </ref>. Some types of adaptation expressed by an agent at this level include: Adapting to failures: At any time, any agent in the system might be unavailable or might go off-line (even if you are in the middle of a long term monitoring situation with that agent).
Reference: 55. <author> M. Wooldridge and N.R. Jennings. </author> <title> Intelligent agents: </title> <journal> Theory and practice. The Knowledge Engineering Review, </journal> <volume> 10(2) </volume> <pages> 115-152, </pages> <year> 1995. </year>
Reference-contexts: 1. Introduction Due to the current nature of the World Wide Web, information is becoming increasingly difficult for a person or machine system to collect, filter, evaluate, and use in problem solving. The notion of Intelligent Software Agents (e.g., <ref> [1, 55, 32, 49, 35, 36, 18] </ref>), has been proposed to address this challenge.
References-found: 55

