URL: http://www.cs.mtu.edu/~shene/edu/geo.ps.gz
Refering-URL: http://www.cs.mtu.edu/~shene/NSF-2/index.html
Root-URL: http://www.cs.mtu.edu
Email: Email: [john|shene]@mtu.edu  
Title: Computing with Geometry as an Undergraduate Course  
Author: John L. Lowther and Ching-Kuang Shene 
Address: Houghton, MI 49931-1295  
Affiliation: Department of Computer Science, Michigan Technological University,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Avner Friedman, James Glimm and John Lavery, </author> <booktitle> The Mathematical and Computational Science in Emerging Manufacturing Technologies and Management Practices, </booktitle> <publisher> SIAM, </publisher> <address> Philadelphia, PA, </address> <year> 1992. </year>
Reference-contexts: Moreover, computing with geometry is the foundation of new manufacturing technologies which will help this country to regain competitiveness in the global economy <ref> [1, 5] </ref>. Computer science curricula do have some basic elements of geometric computing scattered throughout many courses. It would be better to collect these scattered materials together into a coherent course. Such a course will serve other departments as well.
Reference: [2] <editor> Juris Hartmanis and Herbert Lin (editors), </editor> <booktitle> Computing in the Future: A Broader Agenda for Computer Science and Engineering, </booktitle> <publisher> National Academy Press, </publisher> <address> Washing, D.C., </address> <year> 1992. </year>
Reference-contexts: Due to the fact that computer science emphasizes discrete topics and that non-discrete topics have been gradually shifted to other disciplines, the Computer Science and Telecommunications Board and National Research Council suggested adding continuous mathematics back into computer science curricula <ref> [2] </ref>. Moreover, computing with geometry is the foundation of new manufacturing technologies which will help this country to regain competitiveness in the global economy [1, 5]. Computer science curricula do have some basic elements of geometric computing scattered throughout many courses.
Reference: [3] <author> Douglas Hofstadter, </author> <title> Godel, Escher, Bach, </title> <address> Vintage, New York, </address> <year> 1980. </year>
Reference-contexts: The concept of points and lines at infinity will also provide students with an intuitive classification of conics. Parametric surfaces, surface patches, and isoparamet-ric lines are also discussed in Week 4. 2 The GEB model was invented by Hofstadter in his book <ref> [3] </ref>, where G is for Godel, E for Escher and B for Bach. 2 4.5 Bezier, B-splines and NURBS Week 5 to Week 8 present important concepts of Bezier, B-spline and NURBS curves and surfaces, providing a basis for the course's software tools.
Reference: [4] <editor> John L. Lowther and Ching-Kuang Shene, </editor> <booktitle> Geometric Computing in the Undergraduate Computer Science Curricula, to appear in Fourth Annual Consortium for Computing in Small Colleges: Midwest Conference, </booktitle> <month> September 26-27, </month> <year> 1997. </year>
Reference-contexts: This paper suggests a possible remedy by designing an intermediate level interdisciplinary computing with geometry course. In the following, we only briefly present the rationales and goals in Section 2 and course design merit in Section 3. Details can be found in <ref> [4] </ref>. Section 4 and Section 5 cover the course content and software tools in some detail. Project evaluation and dissemination are presented in Section 6 and Section 7.
Reference: [5] <author> Chee Yap, </author> <title> Report on NSF Workshop on Manufacturing and Computational Geometry, </title> <institution> Department of Computer Science, </institution> <address> New York University, </address> <year> 1995. </year>
Reference-contexts: Moreover, computing with geometry is the foundation of new manufacturing technologies which will help this country to regain competitiveness in the global economy <ref> [1, 5] </ref>. Computer science curricula do have some basic elements of geometric computing scattered throughout many courses. It would be better to collect these scattered materials together into a coherent course. Such a course will serve other departments as well.
Reference: [6] <author> Yuan Zhao, John L. Lowther and Ching-Kuang Shene, </author> <title> A Tool for Teaching Curve Design, </title> <booktitle> The Proceedings of the Twenty-ninth SIGCSE Technical Symposium on Computer Science Education, </booktitle> <address> Febru-ary 25 March 1, 1998, Atlanta, George, </address> <year> 1998, </year> <pages> pp. 97-101. </pages>
Reference-contexts: Using a slide and a 2D locator, polyhedra may be created and placed. 3 5.3 Curve Design The first major component of our software system is the one for visualizing properties of Bezier, B-spline and NURBS curves <ref> [6] </ref>. For curves, students are provided with a drawing canvas with which they can design and modify one or more curve segments for composing complex shapes. Students can select, move and delete control points, show the control polygon and convex hull, and save and read curve data.
Reference: [7] <author> Yan Zhou, Yuan Zhao, John L. Lowther and Ching-Kuang Shene, </author> <title> Teaching Surface Design Made Easy, </title> <note> submitted for publication, 1998. 5 </note>
Reference-contexts: Figure 2 (a) shows several features of a NURBS curve. (a) (b) 5.4 Surface Design The second major component is our surface design system <ref> [7] </ref>. It supports Bezier, B-spline and NURBS surfaces. Students can create a set of control points, specify knot vectors and the degrees, and modify the shape of this surface with techniques similar to those for curves. For NURBS surfaces, students can also modify the weight assigned to a control point.
References-found: 7

