URL: ftp://ftp.cs.brown.edu/pub/techreports/93/cs93-35.ps.Z
Refering-URL: http://www.cs.brown.edu/publications/techreports/reports/CS-93-35.html
Root-URL: http://www.cs.brown.edu/
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Ahuja, K. Mehlhorn, J. Orlin, and R. E. Tarjan, </author> <title> "Faster algorithms for the shortest path problem," </title> <journal> Journal of the Association for Computing Machinery 37 (1990), </journal> <pages> 213-223. </pages>
Reference: [2] <author> N. Alon, P. Seymour, and R. Thomas, </author> <title> "A separator theorem for graphs with an excluded minor and its applications," </title> <booktitle> Proc. 22nd Annual ACM Symposium on Theory of Computing (1990), </booktitle> <pages> 293-299. </pages>
Reference-contexts: Several families of graphs have such separators of size O ( p where n is the number of nodes in the graph. Examples include planar graphs [23], bounded-genus graphs [10], two-dimensional overlap graphs [19], and graphs excluding a fixed graph as a minor <ref> [2] </ref>. Of these families, for all but the last there are polylog-time algorithms for finding such separators. If one is willing to settle for separators of size O ( p n polylog (n)), the algorithm of Gazit and Miller [9] for planar graphs requires only a linear number of processors.
Reference: [3] <author> B. S. Baker, </author> <title> "Approximation algorithms for NP-complete problems on planar graphs," </title> <booktitle> Proc. 24th Annual IEEE Symposium on Foundations of Computer Science (1983), </booktitle> <pages> 265-273. </pages>
Reference-contexts: Indeed, we use this in our algorithm. 1 Another application of parallel breadth-first search is in implementing in parallel a method due to Baker <ref> [3] </ref> for approximation schemes for a variety of problems in planar graphs. Her method involves doing a breadth-first search on a graph derived from the planar input graph. Since the graph still has small separators, our method applies.
Reference: [4] <author> E. Cohen, </author> <title> "Efficient parallel shortest-paths in digraphs with a separator decomposition," </title> <booktitle> Proc. 5th Annual Symposium on Parallel Algorithms and Architectures (1993), </booktitle> <pages> 57-67. </pages>
Reference-contexts: Cohen <ref> [4] </ref> has given an algorithm with similar bounds for the directed case. The previous bounds are no better for breadth-first search, the special case where every edge-length is one. Our shortest-path algorithm applied to planar graphs in particular has several further applications. <p> As Cohen observed <ref> [4] </ref>, a simple parallel variant of the Bellman-Ford algorithm then suffices to quickly find shortest paths in such a graph from any given source. To construct this graph, we use similar but denser graphs on the separators. <p> To construct this graph, we use similar but denser graphs on the separators. This idea was used by Lingas [22] in the context of breadth-first search and later by Cohen <ref> [4] </ref> for shortest-paths. However, in [4] the dense graphs on the separators were simply complete graphs where there was an direct edge uv representing the shortest path from u to v. <p> To construct this graph, we use similar but denser graphs on the separators. This idea was used by Lingas [22] in the context of breadth-first search and later by Cohen <ref> [4] </ref> for shortest-paths. However, in [4] the dense graphs on the separators were simply complete graphs where there was an direct edge uv representing the shortest path from u to v.
Reference: [5] <author> E. Cohen, </author> <title> "Parallel algorithms with improved work for shortest-paths from multiple sources," </title> <booktitle> Proc. 2nd Israel Symposium on Theory of Computing and Systems (1993), </booktitle> <pages> 57-67. </pages>
Reference: [6] <author> G.N. Frederickson, </author> <title> "Fast algorithms for shortest paths in planar graphs, with applications," </title> <journal> SIAM Journal on Computing 16 (1987), </journal> <pages> 1004-1022. </pages>
Reference-contexts: and Miller [9], which takes O (log 2 n) time and requires O (n 1+* ) processors (for any given constant * &gt; 0). 3 1 We use the ~ O () notation to elide polylog factors. 2 Use of separators in (sequentially) computing shortest paths was pioneered by Frederickson <ref> [6] </ref>. 3 Their algorithm can also be used to find separators of size O ( p n polylog (n)) using only O (n) processors.
Reference: [7] <author> M. L. Fredman and D. E. Willard, </author> <title> "Trans-dichotomous algorithms for minimum spanning trees and shortest paths," </title> <booktitle> Proc. 31st Annual IEEE Symposium on Foundations of Computer Science (1990), </booktitle> <pages> 719-725. </pages>
Reference: [8] <author> M.L. Fredman and R.E. Tarjan, </author> <title> "Fibonacci heaps and their uses in improved network optimization algorithms," </title> <journal> Journal of the Association for Computing Machinery 34 (1987), </journal> <pages> 596-615. </pages>
Reference: [9] <author> H. Gazit and G. L. Miller, </author> <title> "A parallel algorithm for finding a separator in planar graphs," </title> <booktitle> Proc. 28th Annual IEEE Symposium on Foundations of Computer Science (1987), </booktitle> <pages> 238-248. </pages>
Reference-contexts: Breadth-first search also has several applications. For example, using our algorithm in conjunction with the method of Miller [18], we obtain the first polylog-time, linear-processor algorithm for finding O ( n) separators in planar graphs. The best NC algorithm previously known was that of Gazit and Miller <ref> [9] </ref>, which takes O (log 2 n) time and requires O (n 1+* ) processors (for any given constant * &gt; 0). 3 1 We use the ~ O () notation to elide polylog factors. 2 Use of separators in (sequentially) computing shortest paths was pioneered by Frederickson [6]. 3 Their <p> Of these families, for all but the last there are polylog-time algorithms for finding such separators. If one is willing to settle for separators of size O ( p n polylog (n)), the algorithm of Gazit and Miller <ref> [9] </ref> for planar graphs requires only a linear number of processors. By iterated use of this algorithm, one 2 can find such a separator in constant-genus graphs (though the bound is not as good as that in [10]).
Reference: [10] <author> J. R. Gilbert, J. P. Hutchinson, and R. E. Tarjan, </author> <title> "A separation theorem for graphs of bounded genus," </title> <journal> Journal of Algorithms, </journal> <year> 1984. </year>
Reference-contexts: Several families of graphs have such separators of size O ( p where n is the number of nodes in the graph. Examples include planar graphs [23], bounded-genus graphs <ref> [10] </ref>, two-dimensional overlap graphs [19], and graphs excluding a fixed graph as a minor [2]. Of these families, for all but the last there are polylog-time algorithms for finding such separators. <p> By iterated use of this algorithm, one 2 can find such a separator in constant-genus graphs (though the bound is not as good as that in <ref> [10] </ref>). Separators of size O ( p n) can be found for overlap graphs by an algorithm using only a linear number of processors [19]. 2.1 Decomposition tree Let G be a constant-degree graph all of whose subgraphs belong to such a separator family.
Reference: [11] <author> S. Guattery and G. L. Miller, </author> <title> "A contraction procedure for planar directed graphs," </title> <booktitle> Proc. 4th Annual ACM Symposium on Parallel Algorithms and Architectures (1992), </booktitle> <pages> 431-441. </pages>
Reference-contexts: This stage can be done efficiently in parallel using the algorithm of Lagergren [20] Our method also provides an algorithm for multiple-source reachability in directed graphs with separators. This generalizes the result of Kao and Klein [17] on planar graphs (see also Guattery and Miller <ref> [11] </ref>). We can extend the algorithm presented here to handle negative lengths, as long as no negative-length edge appears in a directed cycle.
Reference: [12] <author> R. Hassin, </author> <title> "Maximum flow in (s; t) planar networks," </title> <note> Information Processing Letters 13 (1981), 107. </note>
Reference-contexts: In the case when s and t belong to the same face, we can also efficiently obtain a maximum s-t flow, using the algorithm of Hassin <ref> [12] </ref>. Best previously known parallel algorithms for these problems relied on the algorithm of Pan and Reif, and hence required ~ O (n 1:5 ) work. Breadth-first search also has several applications.
Reference: [13] <author> R. Hassin and D. B. Johnson, </author> <title> "An O(n log 2 n) algorithm for maximum flow in undirected planar networks," </title> <journal> SIAM Journal on Computing 14 (1985), </journal> <pages> 612-624. </pages>
Reference-contexts: We can extend the algorithm presented here to handle negative lengths, as long as no negative-length edge appears in a directed cycle. Using this algorithm, we can solve longest-path in a dag and, by using the technique of Hassin and Johnson <ref> [13] </ref>, we can find the maximum flow in an undirected network where s and t are not necessarily on the same face, both in polylog time using a linear number of processors. The top-level description of our shortest-path algorithm is as follows.
Reference: [14] <author> D.B. Johnson, </author> <title> "Efficient algorithms for shortest paths in sparse networks," </title> <journal> Journal of the Association for Computing Machinery 24 (1977), </journal> <pages> 1-13. 15 </pages>
Reference: [15] <author> D.B. Johnson, </author> <title> "Parallel algorithms for minimum cuts and maximum flows in planar networks," </title> <journal> Journal of the Association for Computing Machinery 34 (1987), </journal> <pages> 950-967. </pages>
Reference: [16] <author> D.B. Johnson and S. M. Venkatesan, </author> <title> "Parallel algorithms for minimum cuts and maximum flows in planar networks," </title> <booktitle> Proc. 23rd Annual IEEE Symposium on Foundations of Computer Science (1982), </booktitle> <pages> 244-254. </pages>
Reference: [17] <author> M. Kao and P. N. Klein, </author> <title> "Towards overcoming the transitive closure bottleneck: efficient parallel algorithms for planar digraphs," </title> <booktitle> Proc. 22nd Annual ACM Symposium on Theory of Computing (1990), </booktitle> <pages> 181-192. </pages>
Reference-contexts: This stage can be done efficiently in parallel using the algorithm of Lagergren [20] Our method also provides an algorithm for multiple-source reachability in directed graphs with separators. This generalizes the result of Kao and Klein <ref> [17] </ref> on planar graphs (see also Guattery and Miller [11]). We can extend the algorithm presented here to handle negative lengths, as long as no negative-length edge appears in a directed cycle.
Reference: [18] <author> G. L. Miller, </author> <title> "Finding small simple cycle separators for 2-connected planar graphs," </title> <journal> Journal of Computer and System Sciences 32 (1986), </journal> <pages> 265-279. </pages>
Reference-contexts: Best previously known parallel algorithms for these problems relied on the algorithm of Pan and Reif, and hence required ~ O (n 1:5 ) work. Breadth-first search also has several applications. For example, using our algorithm in conjunction with the method of Miller <ref> [18] </ref>, we obtain the first polylog-time, linear-processor algorithm for finding O ( n) separators in planar graphs.
Reference: [19] <author> G. L. Miller, S. Teng, and S. Vavasis, </author> <title> "A unified geometric approach to graph separators," </title> <booktitle> Proc. 31st Annual IEEE Symposium on Foundations of Computer Science (1991), </booktitle> <pages> 538-547. </pages>
Reference-contexts: Several families of graphs have such separators of size O ( p where n is the number of nodes in the graph. Examples include planar graphs [23], bounded-genus graphs [10], two-dimensional overlap graphs <ref> [19] </ref>, and graphs excluding a fixed graph as a minor [2]. Of these families, for all but the last there are polylog-time algorithms for finding such separators. <p> Separators of size O ( p n) can be found for overlap graphs by an algorithm using only a linear number of processors <ref> [19] </ref>. 2.1 Decomposition tree Let G be a constant-degree graph all of whose subgraphs belong to such a separator family. By repeatedly finding separators, one obtains a decomposition of G.
Reference: [20] <author> J. Lagergren, </author> <title> "Efficient parallel algorithms for tree-decomposition and related problems," </title> <booktitle> Proc. 30th Annual IEEE Symp. on Foundations of Computer Science (1990), </booktitle> <pages> 173-182. </pages>
Reference-contexts: Since the graph still has small separators, our method applies. The second stage of her method involves solving the problem exactly on k-outerplanar graphs. This stage can be done efficiently in parallel using the algorithm of Lagergren <ref> [20] </ref> Our method also provides an algorithm for multiple-source reachability in directed graphs with separators. This generalizes the result of Kao and Klein [17] on planar graphs (see also Guattery and Miller [11]).
Reference: [21] <author> F.T. Leighton, </author> <title> Complexity issues in VLSI: optimal layouts for the shu*e-exchange graph and other networks, </title> <publisher> MIT Press, </publisher> <year> 1983. </year>
Reference-contexts: If G is sparse but H is dense, it intuitively follows that many of the edges of H intersect. We use this idea in the lemmas below, which are the basis for our shortest-path approximation algorithm. The following lemma can be proved using an argument due to Leighton <ref> [21] </ref> for lower-bounding the crossing number of a graph. Lemma 5 Let H be a summary of a sparse graph G. Suppose the segment graph of H has m edges and n nodes and maximum edge-multiplicity 1, and m = (n). <p> The splitting property for the graphs G () implies that P goes through a node c of S (v). By applying property E6 to the a-c subpath and the c-b subpath, we obtain the lemma. 2 Acknowledgments We are especially grateful to Andrea Pietracaprina for bringing a result of <ref> [21] </ref> to our attention and to David Karger for pointing out the use of Gabow's scaling algorithm to reduce the running time's dependence on the magnitude of the lengths. Thanks also to Gary Miller, Cliff Stein, R. Ravi, and John Reif.
Reference: [22] <author> A. Lingas, </author> <title> "Fast parallel algorithms for planar directed graphs," </title> <booktitle> Proc. SIGAL International Symposium on Algorithms (1990), </booktitle> <pages> 447-457. </pages>
Reference-contexts: As Cohen observed [4], a simple parallel variant of the Bellman-Ford algorithm then suffices to quickly find shortest paths in such a graph from any given source. To construct this graph, we use similar but denser graphs on the separators. This idea was used by Lingas <ref> [22] </ref> in the context of breadth-first search and later by Cohen [4] for shortest-paths. However, in [4] the dense graphs on the separators were simply complete graphs where there was an direct edge uv representing the shortest path from u to v.
Reference: [23] <author> R.J. Lipton and R.E. Tarjan, </author> <title> "A separator theorem for planar graphs," </title> <journal> SIAM Journal of Applied Mathematics 36 (1979), </journal> <pages> 177-189. </pages>
Reference-contexts: Several families of graphs have such separators of size O ( p where n is the number of nodes in the graph. Examples include planar graphs <ref> [23] </ref>, bounded-genus graphs [10], two-dimensional overlap graphs [19], and graphs excluding a fixed graph as a minor [2]. Of these families, for all but the last there are polylog-time algorithms for finding such separators.
Reference: [24] <author> H. N. Gabow, </author> <title> "Scaling algorithms for network problems," </title> <journal> Journal of Computer and System Sciences 31 (1985), </journal> <pages> 148-168. </pages>
Reference-contexts: The top-level description of our shortest-path algorithm is as follows. We show that the exact shortest-paths problem can be quickly and efficiently reduced to a certain kind of approximate shortest-path problem. The reduction resembles a scaling algorithm due to Gabow <ref> [24] </ref> for shortest paths.
Reference: [25] <author> V. Pan and J. H. Reif, </author> <title> "Fast and efficient solution of path algebra problems," </title> <journal> Journal of Computer and System Sciences 38 (1989), </journal> <pages> 494-510. </pages>
Reference: [26] <author> V. Pan and J. H. Reif, </author> <title> "The parallel computation of minimum cost paths in graphs by stream contraction," </title> <booktitle> Information Processing Letters 40 (1991), </booktitle> <pages> 79-83. </pages>
Reference: [27] <author> J. H. Reif, </author> <title> "Minimum s-t cut of a planar undirected network in O(n log 2 n) time," </title> <journal> SIAM Journal on Computing 12 (1983), </journal> <pages> 71-81. </pages>
Reference: [28] <author> J. D. Ullman and M. Yannakakis, </author> <note> "High-probability parallel transitive-closure algorithms," SIAM Journal on Computing 20 (1991), 100-125. 16 </note>
Reference-contexts: Both these procedures are based on a random-sampling technique due to Ullman and Yannakakis <ref> [28] </ref>, combined with our procedure Abbreviate. Intuitively, the goal of Abbreviate is to search k-hop paths between n nodes in a summary H with m edges. Naively this would take work proportional to nm, where m is typically around n 2 . <p> This proves property (B4). The work bound follows from the fact that there are at most 2 log N calls to the procedure of lemma 7. 2 Now we introduce the random-selection technique of Ullman and Yannakakis <ref> [28] </ref>. Let H be a summary of G. For each pair of ordinary nodes u; v, let us designate a shortest u-to-v path P uv . For a summary H of G, suppose we randomly select a subset consisting of half the ordinary nodes of H.
References-found: 28

