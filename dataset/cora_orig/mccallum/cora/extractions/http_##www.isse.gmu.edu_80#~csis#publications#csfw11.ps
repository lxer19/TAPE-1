URL: http://www.isse.gmu.edu:80/~csis/publications/csfw11.ps
Refering-URL: http://www.isse.gmu.edu:80/~csis/publication.html
Root-URL: 
Email: -jllin,xywang,jajodia-@gmu.edu  
Title: Abstraction-Based Misuse Detection: High-Level Specifications and Adaptable Strategies  
Author: Jia-Ling Lin, X. Sean Wang, Sushil Jajodia 
Web: http://isse.gmu.edu/csis  
Address: Fairfax, VA 22030-4444  
Affiliation: Center for Secure Information Systems George Mason University,  
Abstract: A typical misuse detection system contains (1) a language for describing known techniques (called misuse signatures) used by attackers to penetrate the target system, and (2) monitoring programs for detecting the presence of an attack based on the given misuse signatures. In most of the systems appeared in the literature, however, the description of misuses is often in terms of a low-level language (i.e., in terms of audit records of the target system), that either has limited expressiveness or is difficult to use. Moreover, the monitoring algorithms are often fixed and do not adapt to a changing operating environment or to objectives of the site security officer. To overcome these limitations, this paper defines a high-level language for abstract misuse signatures (MuSigs). Due to the use of high-level concepts, a MuSig can represent misuses in a simple form and yet with high expressiveness. The paper also introduces a set of system directives provided by the system designer in support of high-level concepts. The paper then discusses ways to translate MuSigs into monitoring program with the help of the system directives. The adaptability of the system is obtained by the ability for the site security officer to add or delete system directives to change the behavior of the monitoring program. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Anderson, T. Frivold, and A. Valdes. </author> <title> Next-generation Intrusion Detection Expert System (NIDES):A Summary. </title> <type> Technical Report SRI-CSL-95-07, </type> <institution> SRI International, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: The NIDES core components include the user interface, the resolver, the statistical, the rule-based, the audit data collection, and the audit data generation components. The algorithm for the rule-based analysis component is unchanged from IDES, but the algorithms for the statistical analysis component are enhanced <ref> [1] </ref>. The rule-based system in IDES and NIDES can be seen as a misuse detection system. However, the rules must be written in a very low level language.
Reference: [2] <author> M. A. Covington, D. Nute, and A. Vellino. </author> <title> Prolog Programming in Depth. Scott, </title> <publisher> Foresman and Company, </publisher> <year> 1988. </year>
Reference-contexts: However, we stress the mixture of two strategies in one misuse signature for optimization. This is done in a declarative way by labeling the nodes as eager or lazy in a MuSig. In contract, in a logic programming system, the underlying evaluation model is usually fixed using backward chaining <ref> [2] </ref>. By carefully designing the program, one can mimic the forward chaining. Also, in a logic-based database system (e.g., Datalog), bottom-up evaluation (forward chaining) is used as the underlying evaluation model.
Reference: [3] <author> U. Dayal, E. N. Hanson, and J. Widom. </author> <title> Active Database Systems. </title> <editor> In W. Kim, editor, </editor> <title> Modern Database Systems: The Object Model, Interoperability, and Beyond. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The use of MuSigs results in greater expressiveness than a simple legal-flow matrix. A major component of a misuse detection system is to watch if the state of events satisfies a given condition (misuse signature). This is closely related to active database research <ref> [3] </ref>. However, much of the work in active databases is devoted to studying the effects of active rules on the database and on other rules [12]. Moreover, the condition in an ECA (event-condition-action) rule is usually simple; on-line and real-time condition satisfaction is not much of a concern.
Reference: [4] <author> D. E. Denning, D. L. Edwards, R. Jagannathan, T. F. Lunt, and P. G. Neumann. </author> <title> A Prototype IDES A Real-Time Intrusion Detection Expert System. </title> <type> Technical report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <year> 1987. </year>
Reference-contexts: There is usually a misuse detection component in an intrusion detection system because statistical techniques (anomaly intrusion detection) alone are not enough to detect all types of intrusions. A real-time intrusion-detection expert system (IDES) <ref> [5, 4, 19, 16, 17, 10, 20] </ref> has two components: a rule-based component and a statistical component, which operate in parallel. The IDES rule-based component is a rule-based, forward-chaining system using the Rete algorithm.
Reference: [5] <author> D. E. Denning and P. G. Neumann. </author> <title> Requirements and Model for IDES A Real-Time Intrusion Detection System. </title> <type> Technical report, </type> <institution> Computer Science Laboratory, SRI International, </institution> <month> Aug. </month> <year> 1985. </year>
Reference-contexts: An abstract view specifies abstract events derived from the events in the audit trails. Examples of abstract events include read/write to file objects, indirect read/write to file objects [23], number of times of failed login attempts from particular ports, and anomalous behavior of users during evening hours <ref> [5] </ref>. The designer of the misuse detection system is responsible for identifying these abstract views and providing programs to support the views. We call a program that provides an abstract view the system directive for that view. <p> There is usually a misuse detection component in an intrusion detection system because statistical techniques (anomaly intrusion detection) alone are not enough to detect all types of intrusions. A real-time intrusion-detection expert system (IDES) <ref> [5, 4, 19, 16, 17, 10, 20] </ref> has two components: a rule-based component and a statistical component, which operate in parallel. The IDES rule-based component is a rule-based, forward-chaining system using the Rete algorithm.
Reference: [6] <author> K. Ilgun. USTAT: </author> <title> A Real-Time Intrusion Detection System for UNIX. </title> <type> Master's thesis, </type> <institution> Computer Science Department, University of California, Santa Barbara, </institution> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: In USTAT <ref> [8, 6, 7] </ref>, the scenario in Figure 1 is used to describe the above misuse. <p> The system is not easy to use and unlike our design, the matching algorithm (forward chaining) is fixed. A state transition analysis tool for intrusion detection (STAT) [21, 22] and a real-time intrusion detection system for UNIX (USTAT) <ref> [8, 6, 7] </ref> are the examples of using state transition diagrams as a way of describing intrusion scenarios. Attack patterns can only specify a sequence of events; more complex ways of specifying events are not permitted.
Reference: [7] <author> K. Ilgun. USTAT: </author> <title> A Real-Time Intrusion Detection System for UNIX. </title> <booktitle> In Proceedings of the 1993 IEEE Symposium on Research in Security and Privacy, </booktitle> <address> Oakland, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: In USTAT <ref> [8, 6, 7] </ref>, the scenario in Figure 1 is used to describe the above misuse. <p> The system is not easy to use and unlike our design, the matching algorithm (forward chaining) is fixed. A state transition analysis tool for intrusion detection (STAT) [21, 22] and a real-time intrusion detection system for UNIX (USTAT) <ref> [8, 6, 7] </ref> are the examples of using state transition diagrams as a way of describing intrusion scenarios. Attack patterns can only specify a sequence of events; more complex ways of specifying events are not permitted.
Reference: [8] <author> K. Ilgun, R. A. Kemmerer, and P. A. Porras. </author> <title> State Transition Analysis: A Rule-based Intrusion Detection Approach. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(3):181 199, </volume> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: In USTAT <ref> [8, 6, 7] </ref>, the scenario in Figure 1 is used to describe the above misuse. <p> The system is not easy to use and unlike our design, the matching algorithm (forward chaining) is fixed. A state transition analysis tool for intrusion detection (STAT) [21, 22] and a real-time intrusion detection system for UNIX (USTAT) <ref> [8, 6, 7] </ref> are the examples of using state transition diagrams as a way of describing intrusion scenarios. Attack patterns can only specify a sequence of events; more complex ways of specifying events are not permitted.
Reference: [9] <author> R. Jagannathan, T. Lunt, D. Anderson, C. Dodd, F. Gilham, C. Jalali, H. Javitz, P. Neumann, A. Tamaru, and A. Valdes. </author> <title> System Design Document: Next-Generation Intrusion Detection Expert System (NIDES). </title> <type> Technical Report A007/A008/A009/A011/A012/A014, </type> <institution> SRI International, </institution> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: A real-time intrusion-detection expert system (IDES) [5, 4, 19, 16, 17, 10, 20] has two components: a rule-based component and a statistical component, which operate in parallel. The IDES rule-based component is a rule-based, forward-chaining system using the Rete algorithm. Next-generation intrusion detection expert system (NIDES) <ref> [9, 11] </ref> is a rearchitected version of the previous IDES prototype. The NIDES core components include the user interface, the resolver, the statistical, the rule-based, the audit data collection, and the audit data generation components.
Reference: [10] <author> H. S. Javitz and A. Valdes. </author> <title> The SRI IDES Statistical Anomaly Detector. </title> <booktitle> In IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 316326. </pages> <publisher> IEEE, </publisher> <year> 1991. </year>
Reference-contexts: There is usually a misuse detection component in an intrusion detection system because statistical techniques (anomaly intrusion detection) alone are not enough to detect all types of intrusions. A real-time intrusion-detection expert system (IDES) <ref> [5, 4, 19, 16, 17, 10, 20] </ref> has two components: a rule-based component and a statistical component, which operate in parallel. The IDES rule-based component is a rule-based, forward-chaining system using the Rete algorithm.
Reference: [11] <author> H. S. Javitz, A. Valdez, T. Lunt, and M. Tyson. </author> <title> Next Generation Intrusion Detection Expert System (NIDES): Rationales. </title> <type> Technical Report SRI Technical Report A016, </type> <institution> SRI International, </institution> <month> Mar. </month> <year> 1993. </year>
Reference-contexts: A real-time intrusion-detection expert system (IDES) [5, 4, 19, 16, 17, 10, 20] has two components: a rule-based component and a statistical component, which operate in parallel. The IDES rule-based component is a rule-based, forward-chaining system using the Rete algorithm. Next-generation intrusion detection expert system (NIDES) <ref> [9, 11] </ref> is a rearchitected version of the previous IDES prototype. The NIDES core components include the user interface, the resolver, the statistical, the rule-based, the audit data collection, and the audit data generation components.
Reference: [12] <author> S.-K. Kim and S. Chakravarthy. </author> <title> A Confluent Rule Execution Model for Active Databases. </title> <type> Technical Report ESD-TR-76-372, </type> <institution> University of Florida, Computer and Information Science and Engineering Department, </institution> <month> Oct. </month> <year> 1995. </year>
Reference-contexts: This is closely related to active database research [3]. However, much of the work in active databases is devoted to studying the effects of active rules on the database and on other rules <ref> [12] </ref>. Moreover, the condition in an ECA (event-condition-action) rule is usually simple; on-line and real-time condition satisfaction is not much of a concern. In comparison, our event condition is in more complex forms and real-time matching of certain misuse signatures is considered crucial.
Reference: [13] <author> S. Kumar. </author> <title> Classification and Detection of Computer Intrusions. </title> <type> PhD thesis, </type> <institution> Purdue University, Department of Computer Sciences, </institution> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: Attack patterns can only specify a sequence of events; more complex ways of specifying events are not permitted. Furthermore, there is no general purpose mechanism to prune partial matches of attacks other than through assertion primitives built into the model as mentioned in <ref> [13] </ref>. It turns out that not only is the matching algorithm fixed, but also it does not always exactly correspond to the semantics of the scenarios. In contrast, our approach provides a high-level abstraction-based language for describing misuse signatures in a more intrinsic manner. <p> Also, our approach provides system directives for adapting to changing requirements. In the Intrusion Detection In Our Time (IDIOT) project, Colored Petri Nets are being used for representing and matching intrusion signatures <ref> [13, 14, 15] </ref>. Like most misuse detection system, the signatures are in terms of low-level concepts and the matching algorithms are not easily adaptable. More recently, Shieh and Gligor [24, 23] propose a state transition model to detect misuse intrusion.
Reference: [14] <author> S. Kumar and E. Spafford. </author> <title> An Application of Pattern Matching in Intrusion Detection. </title> <type> Technical Report 94-013, </type> <institution> Purdue University, Department of Computer Sciences, </institution> <month> Mar. </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Typically, a misuse detection system contains two major components <ref> [14] </ref>: (1) a language for describing known techniques (called misuse signatures) used by attackers to penetrate the target system, and (2) monitoring programs for detecting the presence of an attack based on the given misuse signatures. <p> Also, our approach provides system directives for adapting to changing requirements. In the Intrusion Detection In Our Time (IDIOT) project, Colored Petri Nets are being used for representing and matching intrusion signatures <ref> [13, 14, 15] </ref>. Like most misuse detection system, the signatures are in terms of low-level concepts and the matching algorithms are not easily adaptable. More recently, Shieh and Gligor [24, 23] propose a state transition model to detect misuse intrusion.
Reference: [15] <author> S. Kumar and E. H. Spafford. </author> <title> A Pattern Matching Model for Misuse Intrusion Detection. </title> <booktitle> In Proceedings of the 17th National Computer Security Conference, </booktitle> <pages> pages 1121, </pages> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: Also, our approach provides system directives for adapting to changing requirements. In the Intrusion Detection In Our Time (IDIOT) project, Colored Petri Nets are being used for representing and matching intrusion signatures <ref> [13, 14, 15] </ref>. Like most misuse detection system, the signatures are in terms of low-level concepts and the matching algorithms are not easily adaptable. More recently, Shieh and Gligor [24, 23] propose a state transition model to detect misuse intrusion.
Reference: [16] <author> T. Lunt, A. Tamaru, F. Gilham, R. Jagannathan, P. Neuman, and C. Jalali. IDES: </author> <title> A Progress Report. </title> <booktitle> In Proceedings of the 6th Annual Computer Security Conference, </booktitle> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: There is usually a misuse detection component in an intrusion detection system because statistical techniques (anomaly intrusion detection) alone are not enough to detect all types of intrusions. A real-time intrusion-detection expert system (IDES) <ref> [5, 4, 19, 16, 17, 10, 20] </ref> has two components: a rule-based component and a statistical component, which operate in parallel. The IDES rule-based component is a rule-based, forward-chaining system using the Rete algorithm.
Reference: [17] <author> T. F. Lunt. IDES: </author> <title> An Intelligent System for Detecting Intruders. </title> <booktitle> In Proceedings of the symposium: Computer Security, Threat and Countermeasures, </booktitle> <address> Rome, Italy, </address> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: There is usually a misuse detection component in an intrusion detection system because statistical techniques (anomaly intrusion detection) alone are not enough to detect all types of intrusions. A real-time intrusion-detection expert system (IDES) <ref> [5, 4, 19, 16, 17, 10, 20] </ref> has two components: a rule-based component and a statistical component, which operate in parallel. The IDES rule-based component is a rule-based, forward-chaining system using the Rete algorithm.
Reference: [18] <author> T. F. Lunt. </author> <title> A Survey of Intrusion Detection Techniques. Computers & Security, </title> <address> 12(4):405418, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: However, the rules must be written in a very low level language. The expertise incorporated in the expert system is only as good as that of the security officer whose skills are modeled, which may not be comprehensive <ref> [18] </ref>. The system is not easy to use and unlike our design, the matching algorithm (forward chaining) is fixed.
Reference: [19] <author> T. F. Lunt, R. Jagannathan, R. Lee, S. Listgarten, D. L. Ed-wards, P. G. Neumann, H. S. Javitz, and A. Valdes. </author> <title> Development and Application of IDES: A Real-Time Intrusion-Detection Expert System. </title> <type> Technical report, </type> <institution> SRI International, </institution> <year> 1988. </year>
Reference-contexts: There is usually a misuse detection component in an intrusion detection system because statistical techniques (anomaly intrusion detection) alone are not enough to detect all types of intrusions. A real-time intrusion-detection expert system (IDES) <ref> [5, 4, 19, 16, 17, 10, 20] </ref> has two components: a rule-based component and a statistical component, which operate in parallel. The IDES rule-based component is a rule-based, forward-chaining system using the Rete algorithm.
Reference: [20] <author> T. F. Lunt, A. Tamaru, F. Gilham, R. Jagannathan, P. G. Neumann, H. S. Javitz, A. Valdes, and T. D. Garvey. </author> <title> A Real-Time Intrusion Detection Expert System (IDES) Final Technical Report. </title> <type> Technical report, </type> <institution> SRI Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: There is usually a misuse detection component in an intrusion detection system because statistical techniques (anomaly intrusion detection) alone are not enough to detect all types of intrusions. A real-time intrusion-detection expert system (IDES) <ref> [5, 4, 19, 16, 17, 10, 20] </ref> has two components: a rule-based component and a statistical component, which operate in parallel. The IDES rule-based component is a rule-based, forward-chaining system using the Rete algorithm.
Reference: [21] <author> P. A. Porras. </author> <title> STAT A State Transition Analysis Tool for Intrusion Detection. </title> <type> Master's thesis, </type> <institution> Computer Science Department, University of California, Santa Barbara, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: The system is not easy to use and unlike our design, the matching algorithm (forward chaining) is fixed. A state transition analysis tool for intrusion detection (STAT) <ref> [21, 22] </ref> and a real-time intrusion detection system for UNIX (USTAT) [8, 6, 7] are the examples of using state transition diagrams as a way of describing intrusion scenarios. Attack patterns can only specify a sequence of events; more complex ways of specifying events are not permitted.
Reference: [22] <author> P. A. Porras and R. A. Kemmerer. </author> <title> Penetration State Transition Analysis A Rule-based Intrusion Detection Approach. </title> <booktitle> In Eighth Annual Computer Security Applications Conference, </booktitle> <pages> pages 220229. </pages> <publisher> IEEE Computer Society press, IEEE Computer Society press, </publisher> <month> Nov. 30 Dec. 4 </month> <year> 1992. </year>
Reference-contexts: The system is not easy to use and unlike our design, the matching algorithm (forward chaining) is fixed. A state transition analysis tool for intrusion detection (STAT) <ref> [21, 22] </ref> and a real-time intrusion detection system for UNIX (USTAT) [8, 6, 7] are the examples of using state transition diagrams as a way of describing intrusion scenarios. Attack patterns can only specify a sequence of events; more complex ways of specifying events are not permitted.
Reference: [23] <author> S.-P. Shieh and V. D. Gligor. </author> <title> On a Pattern-Oriented Model for Intrusion Detection. </title> <journal> IEEE Trans. Knowledge and Data Engineering, </journal> <volume> 9(4):661667, </volume> <month> July/August </month> <year> 1997. </year>
Reference-contexts: To implement an intrusion detection system based on high-level concepts, we introduce the notion of abstract views over the audit trails. An abstract view specifies abstract events derived from the events in the audit trails. Examples of abstract events include read/write to file objects, indirect read/write to file objects <ref> [23] </ref>, number of times of failed login attempts from particular ports, and anomalous behavior of users during evening hours [5]. The designer of the misuse detection system is responsible for identifying these abstract views and providing programs to support the views. <p> Like most misuse detection system, the signatures are in terms of low-level concepts and the matching algorithms are not easily adaptable. More recently, Shieh and Gligor <ref> [24, 23] </ref> propose a state transition model to detect misuse intrusion. In their model, they use a two-dimensional matrix, called legal-flow matrix, to describe all allowed flows of information, and they use state transitions to derive all direct and indirect flows in order to capture intrusions arising from illegal flows.
Reference: [24] <author> S. W. Shieh and V. D. Gligor. </author> <title> A Pattern Oriented Intrusion Model and its Applications. </title> <booktitle> In Proceedings of the 1991 IEEE Computer Society Symposium on Research in Security and Privacy, </booktitle> <pages> pages 327342. </pages> <publisher> IEEE, IEEE Service Center, </publisher> <address> Piscataway, NJ, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Like most misuse detection system, the signatures are in terms of low-level concepts and the matching algorithms are not easily adaptable. More recently, Shieh and Gligor <ref> [24, 23] </ref> propose a state transition model to detect misuse intrusion. In their model, they use a two-dimensional matrix, called legal-flow matrix, to describe all allowed flows of information, and they use state transitions to derive all direct and indirect flows in order to capture intrusions arising from illegal flows.
Reference: [25] <author> A. P. Sistla and O. Wolfson. </author> <title> Temporal Triggers in Active Databases. </title> <journal> IEEE Trans. Knowledge and Data Engineering, </journal> <volume> 7(3):471486, </volume> <month> June </month> <year> 1995. </year>
Reference: [26] <author> J. D. Ullman. </author> <title> Principles of Database and Knowledge-Base Systems, volume II: The New Technologies. </title> <publisher> Computer Science Press, </publisher> <year> 1989. </year>
Reference-contexts: By carefully designing the program, one can mimic the forward chaining. Also, in a logic-based database system (e.g., Datalog), bottom-up evaluation (forward chaining) is used as the underlying evaluation model. The research in Magic-Sets is an effort to simulate top-down evaluation (backward chaining) by rewriting a given program <ref> [26] </ref>. 7 Conclusion In this paper, we formally defined a language for abstract misuse signatures (MuSigs). The abstraction allowed us to use a simple graphic notation to capture complex intrusions.
References-found: 26

