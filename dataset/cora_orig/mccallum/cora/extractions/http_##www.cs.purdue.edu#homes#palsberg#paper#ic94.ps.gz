URL: http://www.cs.purdue.edu/homes/palsberg/paper/ic94.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/palsberg/publications.html
Root-URL: http://www.cs.purdue.edu
Email: WILLIAM@AppleLink.Apple.COM  palsberg@daimi.aau.dk  
Title: A Denotational Semantics of Inheritance and its Correctness  
Author: William Cook Jens Palsberg 
Date: October 1989, pages  
Note: Information and Computation, 114(2):329-350, 1994. Also in Proc. Fourth ACM Conference on Object-Oriented Programming: Systems, Languages and Applications, New Orleans,  433-443.  
Address: 20525 Mariani Ave, 37 UP Cupertino, CA 95014  Ny Munkegade DK-8000 Aarhus C, Denmark  
Affiliation: Apple Computer  Computer Science Department Aarhus University  
Abstract: This paper presents a denotational model of inheritance. The model is based on an intuitive motivation of inheritance as a mechanism for deriving modified versions of recursive definitions. The correctness of the model is demonstrated by proving it equivalent to an operational semantics of inheritance based upon the method lookup algorithm of object-oriented languages. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Borning, A. H., and O'Shea, T. </author> <year> (1987), </year> <title> Deltatalk: An empirically and aesthetically motivated simplification of the Smalltalk-80 language, </title> <booktitle> in "European Conference on Object-Oriented Programming", </booktitle> <pages> pp. 1-10. </pages>
Reference: <author> Cardelli, L. </author> <year> (1984), </year> <title> A semantics of multiple inheritance, in "Semantics of Data Types", </title> <publisher> LNCS 173, Springer-Verlag, </publisher> <pages> pp. 51-68. </pages>
Reference: <author> Cardelli, L., and Wegner, P. </author> <year> (1985), </year> <title> On understanding types, data abstraction, and polymorphism, </title> <journal> Computing Surveys, </journal> <volume> 17(4), </volume> <pages> pp. 471-522. </pages>
Reference: <author> Cook, W. </author> <year> (1989), </year> <title> "A Denotational Semantics of Inheritance", </title> <type> PhD thesis, </type> <institution> Brown University. </institution>
Reference-contexts: QED proof of Theorem 2: Combine Propositions 1-3. QED 5 Conclusion A denotational semantics of inheritance was presented, using a general notation that is applicable to the analysis of different object-oriented languages <ref> (Cook, 1989) </ref>. The semantics was supported by an intuitive explanation of inheritance as a mechanism for incremental programming that derives modified versions of recursive structures. An explanation of the binding of self-and super-reference was given at this conceptual level.
Reference: <author> Dahl, O.-J., and Nygaard, K. </author> <year> (1970), </year> <title> "The SIMULA 67 Common Base Language". </title>
Reference-contexts: Despite its importance, there seems to be a lack of consensus on the proper way to describe inheritance. This is evident from the following review of various formalizations of inheritance that have been proposed. The concept of prefixing in Simula <ref> (Dahl and Nygaard, 1970) </ref>, which evolved into the modern concept of inheritance, was defined in terms of textual concatenation of program blocks. However, this definition was informal, and only partially accounted for more sophisticated aspects of prefixing like the pseudo-variable this and virtual operations.
Reference: <author> Goldberg, A., and Robson, D. </author> <year> (1983), </year> <title> "Smalltalk-80: the Language and Its Implementation", </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: The use of super allows a method to access methods defined in a superclass even if the methods have been overridden in the subclasses. <ref> (Goldberg and Robson, 1983, pp. 61-64) </ref> Unfortunately, such operational definitions do not necessarily foster intuitive understanding. As a result, insight into the proper use and purpose of inheritance is often gained only through an "Aha!" experience (Borning and O'Shea, 1987). <p> @ @ @ 1 P Pq 66 Class i Key ! Exp Instance parent - methods class - result of sending a message to the instance. 4.2 Method Lookup Semantics The method lookup semantics given in Figure 14 closely resembles the implementation of method lookup in object-oriented languages like Smalltalk <ref> (Goldberg and Robson, 1983) </ref>. It is given in a denotational style due to the abstract nature of method systems. A more traditional operational semantics is not needed because of the absence of updatable storage.
Reference: <author> Gordon, M. J. C. </author> <year> (1979), </year> <title> "The Denotational Description of Programming Languages", </title> <publisher> Springer-Verlag. </publisher>
Reference: <author> Kamin, S. </author> <year> (1988), </year> <title> Inheritance in Smalltalk-80: A denotational definition, </title> <booktitle> in "Proceedings, 15th Symposium on Principles of Programming Languages", </booktitle> <pages> pp. 80-87. </pages>
Reference: <author> Khoo, S. C., and Sundaresh, R. S. </author> <year> (1991), </year> <title> Compiling inheritance using partial evaluation, </title> <booktitle> in "Proceedings, ACM Symposium on Partial Evaluation and Semantics-Based Program Manipulation", </booktitle> <pages> pp. 211-222. </pages>
Reference: <author> McAllester, D., and Zabih, R. </author> <year> (1987), </year> <title> Boolean Classes, </title> <booktitle> in "Proceedings, ACM Conference on Object-Oriented Programming: Systems, Languages and Applications", </booktitle> <pages> pp. 417-423. </pages>
Reference: <author> Minsky, N., and Rozenshtein, D. </author> <year> (1987), </year> <title> A law-based approach to object-oriented programming, </title> <booktitle> in "Proceedings, ACM Conference on Object-Oriented Programming: Systems, Languages and Applications", </booktitle> <pages> pp. 482-493. </pages>
Reference: <author> Mosses, P. D., and Plotkin, G. D. </author> <year> (1987), </year> <title> On proving limiting completeness, </title> <journal> SIAM Journal of Computing, </journal> <volume> 16, </volume> <pages> pp. 179-194. </pages> <note> 22 Reddy, </note> <author> U. S. </author> <year> (1988), </year> <title> Objects as closures: Abstract semantics of object--oriented languages, </title> <booktitle> in "Proceedings, ACM Conference on Lisp and Functional Programming", </booktitle> <pages> pp. 289-297. </pages>
Reference: <author> Schmidt, D. A. </author> <year> (1986), </year> <title> "Denotational Semantics: A Methodology for Language Development", </title> <publisher> Allyn & Bacon. </publisher>
Reference: <author> Scott, D. A. </author> <year> (1976), </year> <title> Data types as lattices. </title> <journal> SIAM Journal, </journal> <volume> 5(3), </volume> <pages> pp. 522-586. </pages>
Reference: <author> Snyder, A. </author> <year> (1986), </year> <title> Encapsulation and inheritance in object-oriented programming languages, </title> <booktitle> in "Proceedings, ACM Conference on Object-Oriented Programming: Systems, Languages and Applications", </booktitle> <pages> pp. 38-45. </pages>
Reference-contexts: Thus this form of derivation does not violate encapsulation <ref> (Snyder, 1986) </ref>: the original structure can be replaced with an equivalent implementation and the derivation will have the same effect (text-editing is inherently unencapsulated).
Reference: <author> Stein, L. A. </author> <year> (1987), </year> <title> Delegation is inheritance, </title> <booktitle> in "Proceedings, ACM Conference on Object-Oriented Programming: Systems, Languages and Applications", </booktitle> <pages> pp. 138-146. </pages>
Reference: <author> Stoy, J. </author> <year> (1977), </year> <title> "Denotational Semantics: The Scott-Strachey Approach to Programming Language Semantics", </title> <publisher> MIT Press. </publisher> <pages> 23 </pages>
References-found: 17

