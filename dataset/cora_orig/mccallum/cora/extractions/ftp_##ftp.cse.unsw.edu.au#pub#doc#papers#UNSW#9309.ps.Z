URL: ftp://ftp.cse.unsw.edu.au/pub/doc/papers/UNSW/9309.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/research/tr.html
Root-URL: http://www.cse.unsw.edu.au
Title: a Timing Constrained Stop-and-Wait Protocol  
Author: John J. Zic 
Affiliation: SCHOOL OF COMPUTER SCIENCE AND ENGINEERING THE UNIVERSITY OF NEW SOUTH WALES  
Note: Using CSP+T to Describe  
Abstract: SCS&E Report 9309 July, 1993 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> ISO/TC 97/SC 16/ WG 6. </author> <title> Information Processing Systems Open Systems Interconnection Transport Service Definition - Connectionless mode transmission. Standard ISO-8072-1986-Addendum1, ISO, </title> <year> 1986. </year>
Reference-contexts: Both methods have enabling intervals that may be open, closed or half-open, with [0; 1) representing the least specified enabling period (for an event that can occur at any time). The first method uses an enabling interval of <ref> [1; 1] </ref> on each tick event. CLK = [1; 1]:tick ! CLK This means that a tick event occurs precisely one time unit after the immediately preceding tick provided that this process is isolated . <p> Both methods have enabling intervals that may be open, closed or half-open, with [0; 1) representing the least specified enabling period (for an event that can occur at any time). The first method uses an enabling interval of <ref> [1; 1] </ref> on each tick event. CLK = [1; 1]:tick ! CLK This means that a tick event occurs precisely one time unit after the immediately preceding tick provided that this process is isolated . <p> Applying a sequence flattening function squash to any arbitrary channel trace f 1, results in a totally ordered sequence of numbers from N 1 . squash (GetSeq fl (f 1)) <ref> [1; 2; 3; : : :] </ref>: Similarly, the sequence numbers on the reverse channel r 2 also form a totally ordered sequence of numbers from N 1 . squash (GetSeq fl (r 2)) [1; 2; 3; : : :]: Thirdly, the acknowledgment sequence numbers are 1-prefixes of those messages sent forward <p> results in a totally ordered sequence of numbers from N 1 . squash (GetSeq fl (f 1)) <ref> [1; 2; 3; : : :] </ref>: Similarly, the sequence numbers on the reverse channel r 2 also form a totally ordered sequence of numbers from N 1 . squash (GetSeq fl (r 2)) [1; 2; 3; : : :]: Thirdly, the acknowledgment sequence numbers are 1-prefixes of those messages sent forward on the f 1 channel (with repeats flattened once again). <p> For all tt timedtraces (TX ), MR-spec 4 timeof (hd tt) timeof (hd tl tt ) = 1=R: We adopt the latter definition (MR-Spec)for simplicity, even though the ISO has used the ensemble measure in its Quality of Service specification <ref> [1] </ref>. The timeout value is dependent upon two factors. First, the timeout must be set so to be greater than the maximum expected single return trip time if one assumes that there 13 is no message loss.
Reference: [2] <author> Ed. Brinksma. </author> <title> An Introduction to LOTOS. </title> <editor> In H. Rudin and C.H. West, editors, </editor> <title> Protocol Specification, Testing, and Verification, VII. </title> <publisher> Elsevier Science Publishers B.V., </publisher> <address> Amsterdam, </address> <month> May </month> <year> 1987. </year>
Reference-contexts: To achieve this rigour requires the use of some of the many types of Formal Description Techniques, such as LOTOS <ref> [2] </ref>, VDM [8], Z [20], Petri Nets [13], Estelle [7], the observational congruence model of CCS [11, 12] and the failures model of CSP [6]. <p> Applying a sequence flattening function squash to any arbitrary channel trace f 1, results in a totally ordered sequence of numbers from N 1 . squash (GetSeq fl (f 1)) <ref> [1; 2; 3; : : :] </ref>: Similarly, the sequence numbers on the reverse channel r 2 also form a totally ordered sequence of numbers from N 1 . squash (GetSeq fl (r 2)) [1; 2; 3; : : :]: Thirdly, the acknowledgment sequence numbers are 1-prefixes of those messages sent forward <p> results in a totally ordered sequence of numbers from N 1 . squash (GetSeq fl (f 1)) <ref> [1; 2; 3; : : :] </ref>: Similarly, the sequence numbers on the reverse channel r 2 also form a totally ordered sequence of numbers from N 1 . squash (GetSeq fl (r 2)) [1; 2; 3; : : :]: Thirdly, the acknowledgment sequence numbers are 1-prefixes of those messages sent forward on the f 1 channel (with repeats flattened once again).
Reference: [3] <author> Jim Davies and Steve Schneider. </author> <title> An Introduction to Timed CSP. </title> <type> Technical monograph PRG-75, </type> <institution> Oxford University Computing Laboratory, Programming Research Group, </institution> <address> 11 Keble Rd Oxford OX1 3QD England, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: More recently, the Z specification language has been extended to allow the use of continuous real functions to model timed histories [10], and Hoare's CSP has been extended (by several workers <ref> [15, 3, 17, 9] </ref>) to allow real-time system specifications. This paper presents another set of extensions to CSP, which allow succinct real-time specifications often displaying similar structures to the untimed specifications. <p> Applying a sequence flattening function squash to any arbitrary channel trace f 1, results in a totally ordered sequence of numbers from N 1 . squash (GetSeq fl (f 1)) <ref> [1; 2; 3; : : :] </ref>: Similarly, the sequence numbers on the reverse channel r 2 also form a totally ordered sequence of numbers from N 1 . squash (GetSeq fl (r 2)) [1; 2; 3; : : :]: Thirdly, the acknowledgment sequence numbers are 1-prefixes of those messages sent forward <p> results in a totally ordered sequence of numbers from N 1 . squash (GetSeq fl (f 1)) <ref> [1; 2; 3; : : :] </ref>: Similarly, the sequence numbers on the reverse channel r 2 also form a totally ordered sequence of numbers from N 1 . squash (GetSeq fl (r 2)) [1; 2; 3; : : :]: Thirdly, the acknowledgment sequence numbers are 1-prefixes of those messages sent forward on the f 1 channel (with repeats flattened once again).
Reference: [4] <author> Y.W. Han. </author> <title> Performance evaluation of a digital system using a Petri Net like approach. </title> <booktitle> In Proceedings of the National Electronics Conference, </booktitle> <volume> volume 32, </volume> <pages> pages 166-172, </pages> <month> Oct </month> <year> 1978. </year>
Reference-contexts: Specifying a system's temporal characteristics requires extensions to the above mentioned FDTs. Amongst the earliest proposed extensions were to the Petri Nets to develop the Timed Transition Petri Nets [14] and (less commonly) Timed Place Petri Nets <ref> [4, 19] </ref>. More recently, the Z specification language has been extended to allow the use of continuous real functions to model timed histories [10], and Hoare's CSP has been extended (by several workers [15, 3, 17, 9]) to allow real-time system specifications.
Reference: [5] <author> Hans A. Hansson. </author> <title> Time and Probability in Formal Design of Distributed Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Uppsala University, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: In addition to this probabilistic extension, the algebra may need to incorporate probabilistic choice. This was proposed informally by the author in [23]. Lowe [9] and Seidel [18] have developed two differing semantic models for a probabilistic CSP using such an operator. Hansson <ref> [5] </ref> also has defined a probabilistic choice operator in his Timed Probabilistic Calculus of Communicating Systems (TPCCS).
Reference: [6] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice-Hall International (UK) Ltd, </publisher> <address> 66 Wood Lane End, Hemel Hempstead, Hertfordshire HP2 4RG UK, </address> <year> 1985. </year>
Reference-contexts: To achieve this rigour requires the use of some of the many types of Formal Description Techniques, such as LOTOS [2], VDM [8], Z [20], Petri Nets [13], Estelle [7], the observational congruence model of CCS [11, 12] and the failures model of CSP <ref> [6] </ref>. Typically these Formal Description Techniques (or FDTs) specify system behaviour by using mathematical systems of Logic, Set Theory, or Process Algebras with rules enabling the correct construction of a system. Furthermore, a FDT also includes construction and reduction rules allowing the system to be broken into subcomponents. <p> A summary of this work is now presented which will serve as an introduction to the notation and concepts used in the example. 2.2 The Algebra The CSP+T syntax is a superset of the basic untimed deterministic CSP syntax presented by Hoare <ref> [6] </ref>. The syntactic extensions and a partial trace semantics are presented in the author's thesis, and will not be reproduced here. A computational semantics for the algebra is the subject of continuing research. <p> As such, a special process instantiation event denoted by "?" is introduced into both the algebra and the traces model. 2 * Only deterministic processes can be described in the algebra. Consider the following clock (presented in <ref> [6] </ref>): CLOCK = tick ! CLOCK This clock engages in a single event: tick , and it does so forever. However, this clock only gives us sequencing information. We cannot say anything about the temporal relationships between tick events.
Reference: [7] <author> ISO. </author> <title> Information Processing Systems Open Systems Interconnection - Estelle, a Formal Description Technique based on an Extended State Transition Model. Standard DIS 9074, ISO, </title> <address> Geneva, </address> <month> July </month> <year> 1987. </year>
Reference-contexts: To achieve this rigour requires the use of some of the many types of Formal Description Techniques, such as LOTOS [2], VDM [8], Z [20], Petri Nets [13], Estelle <ref> [7] </ref>, the observational congruence model of CCS [11, 12] and the failures model of CSP [6]. Typically these Formal Description Techniques (or FDTs) specify system behaviour by using mathematical systems of Logic, Set Theory, or Process Algebras with rules enabling the correct construction of a system.
Reference: [8] <author> Cliff B. Jones. </author> <title> Systematic Software Development Using VDM. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice-Hall International (UK) Ltd, </publisher> <address> 66 Wood Lane End, Hemel Hempstead, Hertfordshire HP2 4RG UK, </address> <year> 1986. </year>
Reference-contexts: To achieve this rigour requires the use of some of the many types of Formal Description Techniques, such as LOTOS [2], VDM <ref> [8] </ref>, Z [20], Petri Nets [13], Estelle [7], the observational congruence model of CCS [11, 12] and the failures model of CSP [6].
Reference: [9] <author> Gavin Lowe. </author> <title> Prioritized and probabilistic models of timed CSP. </title> <type> Technical Report PRG-TR-24-91, </type> <institution> Programming Research Group, Oxford University Computing Laboratory, </institution> <address> 11 Keble Rd Oxford 0x1 3QD, </address> <year> 1991. </year>
Reference-contexts: More recently, the Z specification language has been extended to allow the use of continuous real functions to model timed histories [10], and Hoare's CSP has been extended (by several workers <ref> [15, 3, 17, 9] </ref>) to allow real-time system specifications. This paper presents another set of extensions to CSP, which allow succinct real-time specifications often displaying similar structures to the untimed specifications. <p> In addition to this probabilistic extension, the algebra may need to incorporate probabilistic choice. This was proposed informally by the author in [23]. Lowe <ref> [9] </ref> and Seidel [18] have developed two differing semantic models for a probabilistic CSP using such an operator. Hansson [5] also has defined a probabilistic choice operator in his Timed Probabilistic Calculus of Communicating Systems (TPCCS).
Reference: [10] <author> Brendan Mahony and Ian Hayes. </author> <title> Using continous real functions to model timed histories. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Queensland 4072, </institution> <year> 1991. </year>
Reference-contexts: Amongst the earliest proposed extensions were to the Petri Nets to develop the Timed Transition Petri Nets [14] and (less commonly) Timed Place Petri Nets [4, 19]. More recently, the Z specification language has been extended to allow the use of continuous real functions to model timed histories <ref> [10] </ref>, and Hoare's CSP has been extended (by several workers [15, 3, 17, 9]) to allow real-time system specifications. This paper presents another set of extensions to CSP, which allow succinct real-time specifications often displaying similar structures to the untimed specifications.
Reference: [11] <author> R. Milner. </author> <title> A Calculus of Communicating Systems, </title> <booktitle> volume 92 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin-Heidelberg-New York, </address> <year> 1980. </year>
Reference-contexts: To achieve this rigour requires the use of some of the many types of Formal Description Techniques, such as LOTOS [2], VDM [8], Z [20], Petri Nets [13], Estelle [7], the observational congruence model of CCS <ref> [11, 12] </ref> and the failures model of CSP [6]. Typically these Formal Description Techniques (or FDTs) specify system behaviour by using mathematical systems of Logic, Set Theory, or Process Algebras with rules enabling the correct construction of a system.
Reference: [12] <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <booktitle> International Series in Computer Science. </booktitle> <publisher> Prentice-Hall International (UK) Ltd, </publisher> <address> 66 Wood Lane End, Hemel Hempstead, Hertfordshire HP2 4RG UK, </address> <year> 1989. </year> <month> 18 </month>
Reference-contexts: To achieve this rigour requires the use of some of the many types of Formal Description Techniques, such as LOTOS [2], VDM [8], Z [20], Petri Nets [13], Estelle [7], the observational congruence model of CCS <ref> [11, 12] </ref> and the failures model of CSP [6]. Typically these Formal Description Techniques (or FDTs) specify system behaviour by using mathematical systems of Logic, Set Theory, or Process Algebras with rules enabling the correct construction of a system.
Reference: [13] <author> J.L. Peterson. </author> <title> Petri Net Theory and the modelling of systems. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Eaglewood Cliffs, NJ 7632, </address> <year> 1981. </year>
Reference-contexts: To achieve this rigour requires the use of some of the many types of Formal Description Techniques, such as LOTOS [2], VDM [8], Z [20], Petri Nets <ref> [13] </ref>, Estelle [7], the observational congruence model of CCS [11, 12] and the failures model of CSP [6]. Typically these Formal Description Techniques (or FDTs) specify system behaviour by using mathematical systems of Logic, Set Theory, or Process Algebras with rules enabling the correct construction of a system.
Reference: [14] <author> C. Ramchandani. </author> <title> Analysis of asynchronous concurrent systems by Timed Petri Nets. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <month> September </month> <year> 1973. </year>
Reference-contexts: Specifying a system's temporal characteristics requires extensions to the above mentioned FDTs. Amongst the earliest proposed extensions were to the Petri Nets to develop the Timed Transition Petri Nets <ref> [14] </ref> and (less commonly) Timed Place Petri Nets [4, 19]. More recently, the Z specification language has been extended to allow the use of continuous real functions to model timed histories [10], and Hoare's CSP has been extended (by several workers [15, 3, 17, 9]) to allow real-time system specifications.
Reference: [15] <author> G.M. Reed and A.W. Roscoe. </author> <title> A Timed Model for Communicating Sequential Processes. </title> <booktitle> In Automata, Languages, and Programming , 13th Intl. Colloqium Proceedings, Lecture Notes in Computer Science, </booktitle> <address> Berlin-Heidelberg-New York, 1986. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: More recently, the Z specification language has been extended to allow the use of continuous real functions to model timed histories [10], and Hoare's CSP has been extended (by several workers <ref> [15, 3, 17, 9] </ref>) to allow real-time system specifications. This paper presents another set of extensions to CSP, which allow succinct real-time specifications often displaying similar structures to the untimed specifications. <p> Other than this difference, the semantic meaning 3 of these processes is similar to the Reed-Roscoe Timed CSP processes STOP , SKIP , and WAIT n , respectively. <ref> [15, 16, 17] </ref> Additionally, this paper denotes a process alphabet by Ev , and the set of interconnecting channels is denoted by Ch 2.3 The Traces Model The traces model is extended by associating a time stamp (drawn from the set of positive real numbers, R + ) with each event
Reference: [16] <author> A.W. Roscoe. </author> <title> Two papers on csp. </title> <type> Technical Monograph PRG-67, </type> <institution> Oxford University Computing Laboratory, Programming Research Group, </institution> <address> 8-11 Keble Rd Oxford OX1 3QD, </address> <month> July </month> <year> 1988. </year>
Reference-contexts: Other than this difference, the semantic meaning 3 of these processes is similar to the Reed-Roscoe Timed CSP processes STOP , SKIP , and WAIT n , respectively. <ref> [15, 16, 17] </ref> Additionally, this paper denotes a process alphabet by Ev , and the set of interconnecting channels is denoted by Ch 2.3 The Traces Model The traces model is extended by associating a time stamp (drawn from the set of positive real numbers, R + ) with each event
Reference: [17] <author> Steve Schneider. </author> <title> Correctness and Communication in Real-time Systems. </title> <type> Technical Monograph PRG-84, </type> <institution> Oxford University Computing Laboratory, Programming Research Group, </institution> <address> 8-11 Keble Rd Oxford OX1 3QD, </address> <month> March </month> <year> 1990. </year>
Reference-contexts: More recently, the Z specification language has been extended to allow the use of continuous real functions to model timed histories [10], and Hoare's CSP has been extended (by several workers <ref> [15, 3, 17, 9] </ref>) to allow real-time system specifications. This paper presents another set of extensions to CSP, which allow succinct real-time specifications often displaying similar structures to the untimed specifications. <p> Other than this difference, the semantic meaning 3 of these processes is similar to the Reed-Roscoe Timed CSP processes STOP , SKIP , and WAIT n , respectively. <ref> [15, 16, 17] </ref> Additionally, this paper denotes a process alphabet by Ev , and the set of interconnecting channels is denoted by Ch 2.3 The Traces Model The traces model is extended by associating a time stamp (drawn from the set of positive real numbers, R + ) with each event
Reference: [18] <author> Karen Seidel. </author> <title> Probabilistic Communicating Processes. </title> <type> PhD thesis, </type> <institution> Oxford University, </institution> <address> Oxford OX1 3QD, UK, </address> <year> 1992. </year>
Reference-contexts: In addition to this probabilistic extension, the algebra may need to incorporate probabilistic choice. This was proposed informally by the author in [23]. Lowe [9] and Seidel <ref> [18] </ref> have developed two differing semantic models for a probabilistic CSP using such an operator. Hansson [5] also has defined a probabilistic choice operator in his Timed Probabilistic Calculus of Communicating Systems (TPCCS).
Reference: [19] <author> J. Sifakis. </author> <title> Use of Petri Nets for performance evaluation. </title> <editor> In Beilner and Gelenbe, editors, </editor> <title> Measuring, Modelling and Evaluating Computer Systems. </title> <publisher> North Holland, </publisher> <year> 1977. </year>
Reference-contexts: Specifying a system's temporal characteristics requires extensions to the above mentioned FDTs. Amongst the earliest proposed extensions were to the Petri Nets to develop the Timed Transition Petri Nets [14] and (less commonly) Timed Place Petri Nets <ref> [4, 19] </ref>. More recently, the Z specification language has been extended to allow the use of continuous real functions to model timed histories [10], and Hoare's CSP has been extended (by several workers [15, 3, 17, 9]) to allow real-time system specifications.
Reference: [20] <author> J.M. Spivey. </author> <title> The Z notation: a reference manual. </title> <booktitle> Prenctice-Hall International, </booktitle> <year> 1989. </year>
Reference-contexts: To achieve this rigour requires the use of some of the many types of Formal Description Techniques, such as LOTOS [2], VDM [8], Z <ref> [20] </ref>, Petri Nets [13], Estelle [7], the observational congruence model of CCS [11, 12] and the failures model of CSP [6].
Reference: [21] <author> Lixia Zhang. </author> <title> Why TCP timers don't work well. </title> <booktitle> In SIGCOMM '86 Symposium Communications Architectures and Protocols, volume 16 of Computer Communication Review, </booktitle> <pages> pages 397-405, </pages> <address> 11 West 42nd St, New York NY10036, </address> <month> August </month> <year> 1986. </year> <title> SIGCOMM, </title> <publisher> ACM. </publisher>
Reference-contexts: Choosing a static range of values simplifies the model, however, if the network topology changes, these values need to be adjusted. A dynamic estimate of the round trip time may be possible in some networks, or, as pointed out by Zhang <ref> [21] </ref>, impossible in others where there is the possibility of message loss or reordering. The choice must be made on an engineering basis, and each network and service characterised separately.
Reference: [22] <author> John J. Zic. </author> <title> Exercises in real-time buffer specification. </title> <note> Submitted for publication to the ACM LOPLAS, </note> <month> Feb </month> <year> 1993. </year>
Reference-contexts: The motivation for these extensions was that it was found that other Timed CSP models could describe some simple systems only with difficulty, and the resulting process description seemed unnatural <ref> [22] </ref>. For example, a (multi-place) buffer which has differing input and output rates, and provides each message with a specific delay could not be easily expressed in any existing technique.
Reference: [23] <author> John J. Zic. </author> <title> Extensions to Communicating Sequential Processes to allow protocol performance specification. </title> <booktitle> In SIGCOMM '87 Workshop on Frontiers in Computer Communication Technology, volume 17 of Computer Communication Review, </booktitle> <address> 11 West 42nd St, New York NY10036, </address> <month> August </month> <year> 1987. </year> <title> SIGCOMM, </title> <publisher> ACM. </publisher>
Reference-contexts: For example, it may be necessary to specify that an event occurs with a specific probability distribution over a given time interval since some preceding event. In addition to this probabilistic extension, the algebra may need to incorporate probabilistic choice. This was proposed informally by the author in <ref> [23] </ref>. Lowe [9] and Seidel [18] have developed two differing semantic models for a probabilistic CSP using such an operator. Hansson [5] also has defined a probabilistic choice operator in his Timed Probabilistic Calculus of Communicating Systems (TPCCS).
Reference: [24] <author> John J. Zic. CSP+T: </author> <title> a formalism for describing real-time systems. </title> <type> PhD thesis, </type> <institution> Basser Department of Computer Science, University of Sydney, NSW 2006, </institution> <month> July </month> <year> 1991. </year> <month> 19 </month>
Reference-contexts: The basic premise of CSP is that it allows description of a process' behaviour in terms of the sets of sequences of observed events. Sequencing information on its own does not carry any timing information. The author in <ref> [24] </ref> proposed some extensions to both the algebra and the traces model which would allow the description of process timing properties.
References-found: 24

