URL: http://www.cs.wustl.edu/cs/techreports/1997/wucs-97-02.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: Expressing Code Mobility in Mobile UNITY  
Author: Gian Pietro Picco Gruia-Catalin Roman Peter J. McCann 
Address: Campus Box 1045 One Brookings Drive Saint Louis, MO 63130-4899  
Affiliation: Department of Computer Science Washington University  
Date: January 21, 1997  
Pubnum: WUCS-97-02  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Black, N. Hutchinson, E. Jul, and H. Levy. </author> <title> Fine-Grained Mobility in the Emerald System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1), </volume> <month> February </month> <year> 1988. </year>
Reference-contexts: Further information, including a proof logic that has been developed to match the new operational model, can be found in [13]. 4 Mobile Code Design Paradigms The idea behind code mobility is not new, as witnessed by the work by Stamos et al. [9] and by Black et al. <ref> [1] </ref>. Nevertheless, these technologies were conceived mostly to provide operating system support on a LAN, while MCLs explicitly target large scale distributed systems|like the Internet. On the Internet, client-server is the most used paradigm for the development of applications.
Reference: [2] <author> A. Carzaniga, G.P. Picco, and G. Vigna. </author> <title> Designing Distributed Applications with a Mobile Code Paradigm. </title> <editor> In A. Fuggetta and A. Wolf, editors, </editor> <booktitle> Proceedings of the 19th International Conference on Software Engineering (ICSE'97), </booktitle> <year> 1997. </year> <note> To appear. 14 </note>
Reference-contexts: Section 4 introduces basic concepts relevant to code mobility, provides some background information, and presents mobile code solutions to the distributed simulation problem that illustrate our strategies for modeling mobile code in Mobile UNITY. Mobile code solutions are modeled after the taxonomy of mobile code design paradigms found in <ref> [2] </ref>. <p> The essential features of the interaction patterns found in MCLs can be characterized by considering the kinds of pairwise interactions that are possible between two software design components located on different hosts. As shown in <ref> [2] </ref>, we can accomplish this without having to appeal to the details of any particular language. <p> In this section, we introduce the reader to three mobile code design paradigms and show how to use them and the conventional client-server paradigm to construct distributed solutions for the problem stated in Section 2. The mobile code design paradigms, defined in <ref> [2] </ref>, are called Remote Evaluation, Mobile Agent, and Code on Demand. A schematic view of all the paradigms appears in Figure 5.
Reference: [3] <author> K.M. Chandy and J. Misra. </author> <title> Distributed Simulation: A Case Study in Design and Verification of Distributed Programs. </title> <journal> IEEE Transaction on Software Engineering, </journal> <volume> 5(5) </volume> <pages> 440-452, </pages> <month> September </month> <year> 1979. </year>
Reference-contexts: The example is inspired by the work of Chandy and Misra who provided a formal characterization and solution for a distributed simulation problem <ref> [3] </ref>. The basic idea is to simulate the behavior of a physical system such as an electronic circuit on a network of computing nodes which communicate asynchronously and in the absence of global shared memory.
Reference: [4] <author> K.M. Chandy and J. Misra. </author> <title> Parallel Program Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: In the next section, we introduce the standard UNITY notation by describing a solution for this problem. 2.2 A Centralized Solution in UNITY In this section, we discuss a solution for the distributed simulation problem that uses the UNITY notation described in <ref> [4] </ref>. In the UNITY program shown in Figure 2, the declare section contains variable declarations. The arrays t and x contain, for each process i, the value of the local timer and a process variable relevant for the simulation.
Reference: [5] <author> G. Cugola, C. Ghezzi, G.P. Picco, and G. Vigna. </author> <title> Analyzing Mobile Code Languages. </title> <editor> In Jan Vitek and Christian Tschudin, editors, </editor> <booktitle> Mobile Object Systems. Lecture Notes on Computer Science, </booktitle> <year> 1996. </year> <note> To appear. </note>
Reference: [6] <author> H.C. Cunningham and G.-C. Roman. </author> <title> A UNITY-style Programming Logic for a Shared Dataspace Language. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(3) </volume> <pages> 365-376, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: This could have some negative implications on verification and, if not considered carefully, could interfere with the fairness assumption which are at the foundation of the proof logic. Another option involves building upon the experience with Swarm <ref> [17, 6] </ref>, a version of UNITY in which both data and statements are dynamically created and destroyed. The prospect of making changes to Mobile UNITY may also force us to re-examine the issue of what is an appropriate unit of mobility.
Reference: [7] <author> R. Gray, D. Kotz, S. Nog, D. Rus, and G. Cybenko. </author> <title> Mobile agents for mobile computing. </title> <type> Technical Report PCS-TR96-825, </type> <institution> Department of Computer Science, Darmouth College, </institution> <address> Hanover, </address> <month> May </month> <year> 1996. </year> <month> ftp://ftp.cs.dartmouth.edu/TR/TR96-285.ps.Z. </month>
Reference: [8] <author> Robert S. Gray. </author> <title> Agent Tcl: A transportable agent system. </title> <booktitle> In Proceedings of the CIKM'95 Workshop on Intelligent Information Agents. </booktitle>
Reference: [9] <author> J. W. Stamos and D. K. Gifford. </author> <title> Remote Evaluation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 537-565, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Further information, including a proof logic that has been developed to match the new operational model, can be found in [13]. 4 Mobile Code Design Paradigms The idea behind code mobility is not new, as witnessed by the work by Stamos et al. <ref> [9] </ref> and by Black et al. [1]. Nevertheless, these technologies were conceived mostly to provide operating system support on a LAN, while MCLs explicitly target large scale distributed systems|like the Internet. On the Internet, client-server is the most used paradigm for the development of applications. <p> Eventually, a result will be sent back to the client component via a message, like in a CS paradigm. Hence, the REV paradigm leverages off the flexibility provided by the server, instead of relying on a fixed functionality. The REV paradigm is inspired by work on the REV <ref> [9] </ref> system, which extends remote procedure call with one additional parameter containing the code to execute on the server. Among recent MCLs, the paradigm is supported natively in TACOMA, Agent Tcl, Facile, and M0. <p> If this variable sharing is established, the Server receives the new value from 2 Mobile code languages implement parameter passing either explicitly by referring to input parameters and code using RPC-like primitives, as in <ref> [9] </ref>, or implicitly by attaching to the procedure to be executed remotely the portion of data space needed for remote computation, as in [20].
Reference: [10] <author> Dag Johansen, Robbert van Renesse, and Fred B. Schneider. </author> <title> An Introduction to the TACOMA Distributed System Version 1.0. </title> <type> Technical Report 95-23, </type> <institution> University of Tromst and Cornell University, </institution> <month> June </month> <year> 1995. </year>
Reference: [11] <author> F.C. Knabe. </author> <title> Language Support for Mobile Agents. </title> <type> Technical Report ECRC-95-36, </type> <institution> European Computer-Industry Research Centre, Munich, Germany, </institution> <month> December </month> <year> 1995. </year>
Reference: [12] <author> General Magic. </author> <title> Telescript Language Reference. General Magic, </title> <month> October </month> <year> 1995. </year>
Reference: [13] <author> P.J. McCann and G-.C. Roman. </author> <title> Mobile UNITY: A Language and Logic for Concurrent Mobile Systems. </title> <type> Technical Report WUCS-97-01, </type> <institution> Department of Computer Science, Washington University in St.Louis, </institution> <month> December </month> <year> 1996. </year> <note> Submitted for publication. </note>
Reference-contexts: Each will be expressed in Mobile UNITY <ref> [13] </ref>, a modification of the standard UNITY notation presented in Section 2.2. Mobile UNITY offers novel abstractions designed to deal specifically with distributed systems that contain mobile components, as well as an associated proof logic for reasoning about the behavior of such systems. <p> The reader should keep in mind that transient sharing is really a shorthand notation for a set of reactive statements. Further information, including a proof logic that has been developed to match the new operational model, can be found in <ref> [13] </ref>. 4 Mobile Code Design Paradigms The idea behind code mobility is not new, as witnessed by the work by Stamos et al. [9] and by Black et al. [1].
Reference: [14] <author> P.J. McCann and G-.C. Roman. </author> <title> Mobile UNITY Coordination Constructs Applied to Packet Forwarding for Mobile Hosts. </title> <type> Technical Report WUCS-96-15, </type> <institution> Department of Computer Science, Washington University in St.Louis, </institution> <month> May </month> <year> 1996. </year>
Reference-contexts: Restricted forms of these proposed interaction constructs appear to have efficient implementations and more abstract and powerful interaction constructs can be built from the basic forms. In addition, the proof logic has been tentatively evaluated in the verification of the Mobile IP protocol <ref> [14] </ref>.
Reference: [15] <institution> Object Management Group. CORBA: Architecture and Specification, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Notably, each interaction between the client and the server must exploit the communication infrastructure through message passing or some higher level mechanism like remote procedure call (RPC). Mechanisms that actually hide the location of components from the application programmer are also being considered, e.g., CORBA <ref> [15] </ref>. By contrast, in MCLs component locations are not hidden. Location is explicitly handled by the programmer who is able to specify where the computation of a given code fragment must take place.
Reference: [16] <author> J. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference: [17] <author> G.-C. Roman and H.C. Cunningham. </author> <title> Mixed Programming Metaphors in a Shared Dataspace Model of Con-currency. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(12) </volume> <pages> 1361-1373, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: This could have some negative implications on verification and, if not considered carefully, could interfere with the fairness assumption which are at the foundation of the proof logic. Another option involves building upon the experience with Swarm <ref> [17, 6] </ref>, a version of UNITY in which both data and statements are dynamically created and destroyed. The prospect of making changes to Mobile UNITY may also force us to re-examine the issue of what is an appropriate unit of mobility.
Reference: [18] <author> G-.C. Roman, P.J. McCann, and J.Y. Plun. </author> <title> Assertional Reasoning about Pairwise Transient Interactions in Mobile Computing. </title> <booktitle> In Proceedings of the 18th International Conference on Software Engineering, </booktitle> <pages> pages 155-164. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1996. </year>
Reference: [19] <author> Sun Microsystems. </author> <title> The Java Language Specification, </title> <month> October </month> <year> 1995. </year>
Reference: [20] <author> B. Thomsen. </author> <title> Facile Antigua Release Programming Guide. </title> <type> Technical Report ECRC-93-20, </type> <institution> European Computer-Industry Research Centre, Munich, Germany, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Server receives the new value from 2 Mobile code languages implement parameter passing either explicitly by referring to input parameters and code using RPC-like primitives, as in [9], or implicitly by attaching to the procedure to be executed remotely the portion of data space needed for remote computation, as in <ref> [20] </ref>. We chose the second alternative, in order to illustrate how to dynamically establish and remove bindings among variables in Mobile UNITY. 10 P (i) that was stored in Min (i).
Reference: [21] <author> C. F. Tschudin. </author> <title> An Introduction to the M0 Messenger Language. </title> <institution> University of Geneva, Switzerland, </institution> <year> 1994. </year>
Reference: [22] <editor> J. Vitek and C. Tschudin, editors. </editor> <booktitle> Mobile Object Systems. Lecture Notes on Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1997. </year> <note> Special issue, to appear. </note>
Reference: [23] <author> J.E. White. </author> <title> Mobile Agents. </title> <editor> In Jeffrey Bradshaw, editor, </editor> <booktitle> Software Agents. </booktitle> <publisher> MIT Press, </publisher> <year> 1996. </year> <month> 15 </month>
References-found: 23

