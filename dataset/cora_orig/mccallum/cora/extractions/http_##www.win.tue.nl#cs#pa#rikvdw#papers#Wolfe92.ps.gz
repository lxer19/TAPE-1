URL: http://www.win.tue.nl/cs/pa/rikvdw/papers/Wolfe92.ps.gz
Refering-URL: http://www.win.tue.nl/cs/pa/rikvdw/bibl.html
Root-URL: http://www.win.tue.nl
Title: Executing Compressed Programs on An Embedded RISC Architecture  
Author: Andrew Wolfe and Alex Chanin 
Affiliation: Department of Electrical Engineering Princeton University  
Date: December 1992  
Note: Appears in Proceedings of 25th Annual International Symposuim on Microarchitecture  
Abstract: The difference in code size between RISC and CISC processors appears to be a significant factor limiting the use of RISC architectures in embedded systems. Fortunately, RISC programs can be effectively compressed. An ideal solution is to design a RISC system that can directly execute compressed programs. A new RISC system architecture called a Compressed Code RISC Processor is presented. This processor depends on a code-expanding instruction cache to manage compressed programs. The compression is transparent to the processor since all instructions are executed from cache. Experimental simulations show that a significant degree of compression can be achieved from a fixed encoding scheme. The impact on system performance is slight and for some memory implementations the reduced memory bandwidth actually increases performance. 
Abstract-found: 1
Intro-found: 1
Reference: [Cate91] <author> V. Cate and T. Gross, </author> <title> Combining the Concepts of Compression and Caching for a Two-Level Filesystem, </title> <booktitle> in Proc. Fourth International Conf. on Architectural Support for Programming Languages and Operating Systems, ACM, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: While this is similar to the CCRP concept, it differs in that it must decompress entire files rather than decompressing blocks on demand. A similar method is evaluated by Cate and Gross <ref> [Cate91] </ref>. Caching and compression are combined to manage two levels of a file storage hierarchy. Basic properties of traditional caches are described in [Hennessy90] and [Smith82] among others.
Reference: [Colwell87] <author> R. P. Colwell, et al., </author> <title> A VLIW Architecture for a Trace Scheduling Compiler, </title> <booktitle> in proc. Second International Conference on Architectural Support for Programming Languages and Operating Systems , pp. </booktitle> <pages> 180-192, </pages> <publisher> ACM., </publisher> <year> 1987. </year>
Reference-contexts: We have been unable to locate any direct references to prior work involving the use of in-cache expansion to improve code density, however, there are several closely related concepts. Multiflow uses post-compilation code compression and in cache expansion in the TRACE 7/200 series <ref> [Colwell87] </ref> to remove no-op operations from VLIW instructions. The Multiflow scheme reduces cache-memory bandwidth and thus increases performance; however, in order to maintain full addressability, compacted instruction blocks are stored at their original pre compaction address. Stored code size is therefore unchanged. Some similar mechanisms exist at the microinstruction level.
Reference: [Ditzel87] <author> D. Ditzel, H. R. McLellan, and A. D. Berenbaum, </author> <title> The Hardware Architecture of the CRISP Microprocessor, </title> <booktitle> Proc. of the 14th Symp. Comp. Arch., </booktitle> <publisher> IEEE Computer Society, June1987. </publisher>
Reference-contexts: The Multiflow scheme reduces cache-memory bandwidth and thus increases performance; however, in order to maintain full addressability, compacted instruction blocks are stored at their original pre compaction address. Stored code size is therefore unchanged. Some similar mechanisms exist at the microinstruction level. The AT&T CRISP Microprocessor <ref> [Ditzel87] </ref> uses a Decoded Instruction Cache to store up to 32 192 bit fully decoded instructions. This assists in keeping a RISC-style pipeline full despite the use of variable length instructions. Intrater and Spillinger model the performance of a decoded instruction cache [Intrater92] for a pipelined CISC processor.
Reference: [Hennessy90] <author> J. Hennessy and D. Patterson, </author> <title> Computer Architecture: A Quantitative Approach, </title> <publisher> Morgan -Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: A similar method is evaluated by Cate and Gross [Cate91]. Caching and compression are combined to manage two levels of a file storage hierarchy. Basic properties of traditional caches are described in <ref> [Hennessy90] </ref> and [Smith82] among others. Section 2 of this paper presents the critical design issues that drive the implementation of a CCRP as well as proposing some solutions.
Reference: [Huffman52] <author> D. A. Huffman, </author> <title> A Method for the Construction of Minimum-Redundancy Codes, </title> <booktitle> Proceedings of the IRE, </booktitle> <volume> Vol. 4D, </volume> <pages> pp. 1098-1101, </pages> <month> Sept. </month> <year> 1952. </year>
Reference-contexts: The results are summarized in Figure 5. While there is great potential for research in the design of effective encoding schemes for runtime decompression, we have started with the simplest known compression methods. Huffman encoding <ref> [Huffman52] </ref> provides optimal encoding for a fixed size input alphabet given uncorrelated data. While programs are not truly uncorrelated, they are easily and effectively compressed using Huffman codes.
Reference: [Intrater92] <author> G. Intrader and I Spillinger, </author> <title> Performance Evaluation of a Decoded Instruction Cache for Variable Instruction-Length Computers, </title> <booktitle> Proc. of the 19th Symp. Comp. Arch., IEEE Computer Society, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: The AT&T CRISP Microprocessor [Ditzel87] uses a Decoded Instruction Cache to store up to 32 192 bit fully decoded instructions. This assists in keeping a RISC-style pipeline full despite the use of variable length instructions. Intrater and Spillinger model the performance of a decoded instruction cache <ref> [Intrater92] </ref> for a pipelined CISC processor. An interesting corollary exists at the slower levels within the storage hierarchy as well. A number of programs such as AutoDoubler for the Macintosh have become available which provide automatic file decompression.
Reference: [Kane92] <author> G. Kane and J. Heinrich, </author> <title> MIPS RISC ARCHITECTURE , Prentice Hall, </title> <address> Englewood Cliffs, NJ, </address> <year> 1992. </year>
Reference-contexts: CPU Instruction Cache CLB Instruction Memory LAT Cache Refill Engine 2.2. Compression Techniques Program compression algorithms are well known and widely used, therefore the development of a compression tool for a CCRP is not difficult. Our experiments are based on the MIPS R2000 architecture <ref> [Kane92] </ref>. The existing Unix compress program is quite effective at compacting moderately sized R2000 programs, often achieving more than 40% compression. Unfortunately, the techniques used in compress are best suited to blocks of data much larger than a cache line so it is not a practical CCRP method.
Reference: [Mraz92] <author> R. </author> <title> Mraz , A RISC Based Architecture for Real-Time Computation, </title> <type> Ph. D. Thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1992. </year>
Reference-contexts: Although actual ebmedded applications would have been preferable, accurate execution traces from these types of programs were not available. The programs were compiled and executed on a DECstation 3100 as part of an earlier experiment on embedded systems at Carnegie Mellon <ref> [Mraz92] </ref>. The diagnostic profiling tool pixie was used to document the detailed behavior of each program and to generate instruction address traces for typical data. As a result, the data concerning pipeline stalls is based on the 16.67 MHz R2000 processor in the DECstation.
Reference: [Smith82] <author> A. J. Smith, </author> <title> Cache Memories, </title> <journal> Computing Surveys 14:3, </journal> <pages> pp. </pages> <address> 473 -530, </address> <month> Sept. </month> <year> 1982. </year>
Reference-contexts: A similar method is evaluated by Cate and Gross [Cate91]. Caching and compression are combined to manage two levels of a file storage hierarchy. Basic properties of traditional caches are described in [Hennessy90] and <ref> [Smith82] </ref> among others. Section 2 of this paper presents the critical design issues that drive the implementation of a CCRP as well as proposing some solutions.

References-found: 9

