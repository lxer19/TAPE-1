URL: http://www.genetic-programming.com/IEEETEC.ps
Refering-URL: http://www.genetic-programming.com/jkpubs97.html
Root-URL: http://www.genetic-programming.com/jkpubs97.html
Title: Computation. Automated Synthesis of Analog Electrical Circuits by Means of Genetic Programming  
Author: John R. Koza, Member, IEEE, Forrest H Bennett III, Member, IEEE, David Andre, Martin A. Keane, Member, IEEE, Frank Dunlap, Member, IEEE 
Keyword: Index Terms Design automation, genetic programming, analog circuit synthesis, electrical circuits.  
Date: 12, 1997 1  
Note: IEEE TEC Paper No. 26 Version 4-June  Paper TEC #26 Version 4 Submitted June 12, 1997 to IEEE Transactions on Evolutionary  
Abstract: The design (synthesis) of analog electrical circuits starts with a high-level statement of the circuit's desired behavior and requires creating a circuit that satisfies the specified design goals. Analog circuit synthesis entails the creation of both the topology and the sizing (numerical values) of all of the circuit's components. The difficulty of the problem of analog circuit synthesis is well known and there is no previously known general automated technique for synthesizing an analog circuit from a high-level statement of the circuit's desired behavior. This paper presents a single uniform approach using genetic programming for the automatic synthesis of both the topology and sizing of a suite of eight different prototypical analog circuits, including a lowpass filter, a crossover (woofer and tweeter) filter, a source identification circuit, an amplifier, a computational circuit, a time-optimal controller circuit, a temperaturesensing circuit, and a voltage reference circuit. The problemspecific information required for each of the eight problems is minimal and consists primarily of the number of inputs and outputs of the desired circuit, the types of available components, and a fitness measure that restates the high-level statement of the circuit's desired behavior as a measurable mathematical quantity. The eight genetically evolved circuits constitute an instance of an evolutionary computation technique producing results on a task that is usually thought of as requiring human intelligence. The fact that a single uniform approach yielded a satisfactory design for each of the eight circuits as well as the fact that a satisfactory design was created on the first or second run of each problem are evidence for the general applicability of genetic programming for solving the problem of automatic synthesis of analog electrical circuits. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. L. Samuel, </author> <title> "Some studies in machine learning using the game of checkers," </title> <journal> IBM Journal of Research and Development, </journal> <volume> 3(3) 210229, </volume> <month> July </month> <year> 1959. </year>
Reference-contexts: 1. INTRODUCTION Automatic programming is one of the central goals of computer science. Samuel <ref> [1] </ref> described this goal as making computers perform required tasks without being told explicitly how to accomplish these tasks. A particularly challenging area for applying automatic programming involves the design (i.e., synthesis) of analog electrical circuits. Typically, design necessitates creation of a complex structure to satisfy user-defined requirements.
Reference: [2] <author> R. A. Rutenbar, </author> <title> "Analog design automation: Where are we? Where are we going?" Proceedings of the l5th IEEE CICC. </title> <address> New York: </address> <publisher> IEEE, </publisher> <address> 13.1.1-13.1.8, </address> <year> 1993. </year>
Reference-contexts: Progress has been made in automating the design of certain categories of purely digital circuits; however, the design of analog circuits and mixed analog-digital circuits has not proved as amenable to automation <ref> [2] </ref>. When describing "the analog dilemma," Aaserud and Nielsen [3] noted "Analog designs are few and far between. In contrast to digital design, most of the analog circuits are still handcrafted by the experts and socalled 'zahs' of analog design.
Reference: [3] <author> O. Aaserud and I. R. Nielsen, </author> <title> "Trends in current analog design: A panel debate." Analog Integrated Circuits and Signal Processing. </title> <type> 7(1) 5-9, </type> <year> 1995. </year>
Reference-contexts: Progress has been made in automating the design of certain categories of purely digital circuits; however, the design of analog circuits and mixed analog-digital circuits has not proved as amenable to automation [2]. When describing "the analog dilemma," Aaserud and Nielsen <ref> [3] </ref> noted "Analog designs are few and far between. In contrast to digital design, most of the analog circuits are still handcrafted by the experts and socalled 'zahs' of analog design.
Reference: [4] <author> G. J. Sussman, and R. M. Stallman, </author> <title> "Heuristic techniques in computer-aided circuit analysis." </title> <journal> IEEE Transactions on Circuits and Systems, </journal> <volume> 22(11), </volume> <month> November </month> <year> 1975. </year>
Reference-contexts: PREVIOUS WORK Numerous techniques have been applied to various parts of the problem of circuit synthesis. An early effort concerned the use of constraint propagation <ref> [4] </ref>, but in the 1980s attention was focused on knowledge-based design of operational amplifiers and comparators based on usersupplied circuit topologies and associated design knowledge [5,6] (also see [7,8] for an extended knowledge-based system that attempted to find an appropriate sizing given a topology and could create new topologies when deemed
Reference: [5] <author> R. Harjani, R. A. Rutenbar, and L. R. Carley, </author> <title> "A prototype framework for knowledge-based analog circuit synthesis," </title> <booktitle> Proceedings of the 24th Design Automation Conference. </booktitle> <address> New York, NY: </address> <institution> Association for Computing Machinery, </institution> <year> 1987. </year>
Reference: [6] <author> R. Harjani, R. A. Rutenbar, and L. R. Carley, "OASYS: </author> <title> A framework for analog circuit synthesis," </title> <journal> IEEE Transactions on Computer Aided Design, </journal> <volume> 8:12471266, </volume> <year> 1989. </year>
Reference: [7] <author> H. Y. Koh, C. H. Sequin, and P. R. Gray, </author> <title> "Automatic synthesis of operational amplifiers based on analytic circuit models," </title> <booktitle> Proceedings of IEEE International Conference on Computer-Aided Design, </booktitle> <month> November </month> <year> 1987. </year>
Reference: [8] <author> Koh, H. Y., Sequin, C. H. and Gray, P. R. </author> <year> 1990. </year> <title> OPASYN: A compiler for MOS operational amplifiers. </title> <journal> IEEE Transactions on Computer Aided Design. 9:113125. </journal>
Reference: [9] <author> E. S. Ochotta, </author> <title> Synthesis of High-Performance Analog Cells in ASTRX/OBLX, </title> <type> Ph.D. Thesis, </type> <institution> Department of Electrical and Computer Engineering, Carnegie Mellon University, </institution> <year> 1994. </year> <note> IEEE TEC Paper No. 26 Version 4 -June 9, 1997 20 </note>
Reference: [10] <author> E. S. Ochotta, R. A. Rutenbar, and L. R. Carley, </author> <title> "Synthesis of High-Performance Analog Circuits in ASTRX/OBLX," </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> 15(3) 273294, </volume> <year> 1996. </year>
Reference: [11] <author> W. E. Jones III, </author> <title> Simultaneous Topology Selection and Sizing/Biasing for Analog Synthesis in ASTRX/OBLX, </title> <type> Master's Thesis, </type> <institution> Department of Electrical and Computer Engineering, Carnegie Mellon University, </institution> <year> 1996. </year>
Reference-contexts: Recent efforts in [9,10] start with the circuit topology and performance specifications. The system first produces an executable performance prediction module that is customized for the particular problem at hand. The prediction module guides simulated annealing for the sizing and biasing of a satisfactory circuit. This system was enhanced <ref> [11] </ref> to be capable of modifying a usersupplied topology while sizing and biasing. Binary variables indicate the presence or absence of certain connections and components in the topology. Again, annealing is used to perturb the topology by removing elements from a user-supplied superset.
Reference: [12] <author> L. J. Fogel, A. J. Owens, and M. J. Walsh, </author> <title> Artificial Intelligence through Simulated Evolution, </title> <address> New York: </address> <publisher> John Wiley, </publisher> <year> 1966. </year>
Reference-contexts: Again, annealing is used to perturb the topology by removing elements from a user-supplied superset. The possibility of applying evolutionary computation to design problems was recognized in the earliest pioneering work, including efforts in the 1960s <ref> [12, 13] </ref>. These methods have been extended to evolve the length and structure of recursive digital filters with infinite impulse response (IIR) as well as numerical coefficients [14; and others].
Reference: [13] <author> I. Rechenberg, </author> <title> Cybernetic solution path of an experimental problem, Royal Aircraft Establishments, Library Translation 1112, </title> <address> Farnborough, </address> <year> 1965. </year>
Reference-contexts: Again, annealing is used to perturb the topology by removing elements from a user-supplied superset. The possibility of applying evolutionary computation to design problems was recognized in the earliest pioneering work, including efforts in the 1960s <ref> [12, 13] </ref>. These methods have been extended to evolve the length and structure of recursive digital filters with infinite impulse response (IIR) as well as numerical coefficients [14; and others].
Reference: [14] <author> T. Gorne and M. Schneider, </author> <title> "Design of digital filters with evolutionary algorithms," </title> <editor> In Albrecht, R. F., Reeves, C. R., and Steele, N. C. (editors), </editor> <booktitle> Artificial Neural Nets and Genetic Algorithms, </booktitle> <address> Vienna: </address> <publisher> Springer-Verlag, </publisher> <pages> pp. 368374, </pages> <year> 1993. </year>
Reference-contexts: The possibility of applying evolutionary computation to design problems was recognized in the earliest pioneering work, including efforts in the 1960s [12, 13]. These methods have been extended to evolve the length and structure of recursive digital filters with infinite impulse response (IIR) as well as numerical coefficients <ref> [14; and others] </ref>. Similar procedures have been offered within genetic algorithms (GAs) (see [15] for background) using numerical filter coefficients and time delays for analogy IIR filters [16], or powers-of-two coefficients for finite impulse response (FIR) discrete-time digital filters [17].
Reference: [15] <author> J. H. Holland, </author> <booktitle> Adaptation in Natural and Artificial Systems, </booktitle> <address> Ann Arbor, MI: </address> <publisher> University of Michigan Press, </publisher> <year> 1975. </year>
Reference-contexts: These methods have been extended to evolve the length and structure of recursive digital filters with infinite impulse response (IIR) as well as numerical coefficients [14; and others]. Similar procedures have been offered within genetic algorithms (GAs) (see <ref> [15] </ref> for background) using numerical filter coefficients and time delays for analogy IIR filters [16], or powers-of-two coefficients for finite impulse response (FIR) discrete-time digital filters [17].
Reference: [16] <author> A. Neubauer, </author> <title> "Genetic design of analog IIR filters with variable time delays for optically controlled microwave signal processors," </title> <booktitle> Proceedings of the First IEEE Conference on Evolutionary Computation, </booktitle> <publisher> IEEE Press, vol. I. </publisher> <pages> pp. 437442, </pages> <year> 1994. </year>
Reference-contexts: Similar procedures have been offered within genetic algorithms (GAs) (see [15] for background) using numerical filter coefficients and time delays for analogy IIR filters <ref> [16] </ref>, or powers-of-two coefficients for finite impulse response (FIR) discrete-time digital filters [17].
Reference: [17] <author> P. Gentilli, F. Piazza, F., and A. Uncini, </author> <title> "Evolutionary design of FIR digital filers with power-of-two coefficients," </title> <booktitle> Proceedings of the First IEEE Conference on Evolutionary Computation, </booktitle> <publisher> IEEE Press, vol. I. </publisher> <pages> pp. 110114, </pages> <year> 1994. </year>
Reference-contexts: Similar procedures have been offered within genetic algorithms (GAs) (see [15] for background) using numerical filter coefficients and time delays for analogy IIR filters [16], or powers-of-two coefficients for finite impulse response (FIR) discrete-time digital filters <ref> [17] </ref>. Modified GAs have also been used to design CMOS operational amplifiers (op amps) [18, 19]; however, the topology of each op amp was constrained to be 1 of 24 preselected topologies based on the conventional human-designed stages of an op amp.
Reference: [18] <author> M. W. Kruiskamp, </author> <title> Analog Design Automation using Genetic Algorithms and Polytopes, </title> <institution> Eindhoven, The Netherlands: Data Library Technische Universiteit Eindhoven, </institution> <year> 1996. </year>
Reference-contexts: Modified GAs have also been used to design CMOS operational amplifiers (op amps) <ref> [18, 19] </ref>; however, the topology of each op amp was constrained to be 1 of 24 preselected topologies based on the conventional human-designed stages of an op amp.
Reference: [19] <author> M. W. Kruiskamp and D. Leenaerts, "DARWIN: </author> <title> CMOS opamp synthesis by means of a genetic algorithm," </title> <booktitle> Proceedings of the 32nd Design Automation Conference, </booktitle> <address> New York, NY: </address> <publisher> Association for Computing Machinery, </publisher> <pages> pp. 433438, </pages> <year> 1995. </year>
Reference-contexts: Modified GAs have also been used to design CMOS operational amplifiers (op amps) <ref> [18, 19] </ref>; however, the topology of each op amp was constrained to be 1 of 24 preselected topologies based on the conventional human-designed stages of an op amp.
Reference: [20] <author> J. B. Grimbleby, </author> <title> "Automatic analogue network synthesis using genetic algorithms," </title> <booktitle> Proceedings of the First International Conference on Genetic Algorithms in Engineering Systems: Innovations and Applications (GALESIA), </booktitle> <address> London: </address> <publisher> Institution of Electrical Engineers, </publisher> <pages> pp. 53 58, </pages> <year> 1995. </year>
Reference-contexts: A GA was also used to evolve the topology of passive linear circuits composed of two-leaded components such as capacitors, resistors, and inductors <ref> [20] </ref>; however, component values were determined by subsequent numerical optimization. Evolvable digital hardware [21-23] offers a potential approach to automating the synthesis of circuits. A GA has been used to evolve a frequency discriminator on a Xilinx XC6216 rapidly reconfigurable field programmable gate array operating in analog mode [24].
Reference: [21] <author> Higuchi, Tetsuya, Niwa, Tatsuya, Tanaka, Toshio, Iba, Hitoshi, de Garis, Hugo, and Furuya, Tatsumi. </author> <year> 1993a. </year> <editor> In Meyer, Jean-Arcady, Roitblat, Herbert L. and Wilson, Stewart W. (editors). </editor> <booktitle> From Animals to Animats 2: Proceedings of the Second International Conference on Simulation of Adaptive Behavior. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press. </publisher> <year> 1993. </year> <pages> pp. 417 424. </pages>
Reference: [22] <author> Mizoguchi, Junichi, Hemmi, Hitoshi, and Shimohara, Katsunori. </author> <year> 1994. </year> <title> Production genetic algorithms for automated hardware design through an evolutionary process. </title> <booktitle> Proceedings of the First IEEE Conference on Evolutionary Computation. </booktitle> <publisher> IEEE Press. vol. I. </publisher> <pages> pp. 661-664. </pages>
Reference: [23] <editor> E. Sanchez, and M. Tomassini, (editors), </editor> <title> Towards Evolvable Hardware. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 1062, </pages> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference: [24] <author> A. Thompson, </author> <title> "Silicon evolution," </title> <editor> In J. R. Koza, D. E. Goldberg, D. B. Fogel, and R. L. Riolo (editors), </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <pages> pp. 444452, </pages> <year> 1996. </year>
Reference-contexts: Evolvable digital hardware [21-23] offers a potential approach to automating the synthesis of circuits. A GA has been used to evolve a frequency discriminator on a Xilinx XC6216 rapidly reconfigurable field programmable gate array operating in analog mode <ref> [24] </ref>. Also, Gruau [25] used cellular encoding and genetic programming to evolve the architecture, weights, thresholds, and biases of neurons in a neural network. 3 . EIGHT PROBLEMS OF ANALOG CIRCUIT SYNTHESIS The current effort concerns a suite of eight specific problems of analog circuit synthesis.
Reference: [25] <author> F. Gruau, </author> <title> "Artificial cellular development in optimization and compilation," </title> <editor> In E. Sanchez, and M. Tomassini, (editors), </editor> <title> Towards Evolvable Hardware. </title> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 1062, </pages> <address> Berlin: </address> <publisher> Springer-Verlag, </publisher> <pages> pp. 48 75, </pages> <year> 1996. </year>
Reference-contexts: Evolvable digital hardware [21-23] offers a potential approach to automating the synthesis of circuits. A GA has been used to evolve a frequency discriminator on a Xilinx XC6216 rapidly reconfigurable field programmable gate array operating in analog mode [24]. Also, Gruau <ref> [25] </ref> used cellular encoding and genetic programming to evolve the architecture, weights, thresholds, and biases of neurons in a neural network. 3 . EIGHT PROBLEMS OF ANALOG CIRCUIT SYNTHESIS The current effort concerns a suite of eight specific problems of analog circuit synthesis.
Reference: [26] <author> B. Gilbert, </author> <title> "A precise four-quadrant multiplier with subnanosecond response," </title> <journal> IEEE Journal of SolidState Circuits, </journal> <volume> vol. SC-3, Number 4, </volume> <pages> pp. 365373, </pages> <month> December </month> <year> 1968. </year>
Reference: [27] <author> D. H. Sheingold, </author> <title> Nonlinear Circuits Handbook. </title> <address> Norwood, MA: </address> <institution> Analog Devices Inc., </institution> <year> 1976. </year>
Reference: [28] <author> J. N. Babanezhad, G. C. and Temes, </author> <title> "Analog MOS Computational Circuits," </title> <booktitle> Proceedings of the IEEE Circuits and System International Symposium," </booktitle> <pages> pp. 11561160, </pages> <year> 1986. </year>
Reference: [29] <author> J. R. Koza, </author> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection, </title> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: The output is a function of two variables (incoming voltage and temperature); however, the incoming power supply voltage is the only explicit input. 4 . USING GENETIC PROGRAMMING TO EVOLVE CIRCUITS The circuits are developed using genetic programming (GP) <ref> [29, 30] </ref>, an extension of the GA in which the population consists of computer programs. Multipart programs consisting of a main program and one or more reusable, parametrized, hierarchically-called subprograms can be evolved using automatically defined functions (ADFs) [31, 32]. <p> If the deviation is greater, the absolute value of the deviation is weighted by a factor of 10.0. 5 . 5 Control Parameters The population size, M, was 640,000 for all problems. For problems 1, 2, 4, 7, and 8 the percentages of the genetic operations <ref> [29] </ref> on each generation were the same as those used over a period of years on numerous other problems that the authors have solved using genetic programming. Specifically, the percentages were 89% one-offspring crossovers, 10% reproductions, and 1% mutations.
Reference: [30] <author> J. R. Koza, and J. P. Rice, </author> <title> Genetic Programming: The Movie, </title> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <year> 1992. </year> <note> IEEE TEC Paper No. 26 Version 4 -June 9, 1997 21 </note>
Reference-contexts: The output is a function of two variables (incoming voltage and temperature); however, the incoming power supply voltage is the only explicit input. 4 . USING GENETIC PROGRAMMING TO EVOLVE CIRCUITS The circuits are developed using genetic programming (GP) <ref> [29, 30] </ref>, an extension of the GA in which the population consists of computer programs. Multipart programs consisting of a main program and one or more reusable, parametrized, hierarchically-called subprograms can be evolved using automatically defined functions (ADFs) [31, 32].
Reference: [31] <author> J. R. Koza, </author> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Multipart programs consisting of a main program and one or more reusable, parametrized, hierarchically-called subprograms can be evolved using automatically defined functions (ADFs) <ref> [31, 32] </ref>. Architecture-altering operations [33] automatically determine the number of such subprograms, the number of arguments that each possesses, and the nature of the hierarchical references, if any, among such ADFs. See [34-37] for current research in GP. <p> CMFs have one or more construction-continuing subtrees, but no APSs. CCFs have one or more construction-continuing subtrees and typically have one APS. This constrained syntactic structure is preserved using structure-preserving crossover with point typing (see <ref> [31] </ref>). 4 . 1 The Embryonic Circuit In the automated process for circuit synthesis described here, an electrical circuit is created by executing a circuit-constructing program tree. The tree contains various component-creating and topology-modifying functions. Each tree in the population creates one circuit.
Reference: [32] <editor> J. R. Koza, </editor> <booktitle> Genetic Programming II Videotape: The Next Generation. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Multipart programs consisting of a main program and one or more reusable, parametrized, hierarchically-called subprograms can be evolved using automatically defined functions (ADFs) <ref> [31, 32] </ref>. Architecture-altering operations [33] automatically determine the number of such subprograms, the number of arguments that each possesses, and the nature of the hierarchical references, if any, among such ADFs. See [34-37] for current research in GP.
Reference: [33] <author> J. R. Koza, </author> <title> "Evolving the architecture of a multipart program in genetic programming using architecture-altering operations," </title> <editor> In J. R. McDonnell, R. G. Reynolds, and D. B. Fogel (editors), </editor> <booktitle> Evolutionary Programming IV: Proceedings of the Fourth Annual Conference on Evolutionary Programming, </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press, </publisher> <pages> pp. 695717, </pages> <year> 1995. </year>
Reference-contexts: Multipart programs consisting of a main program and one or more reusable, parametrized, hierarchically-called subprograms can be evolved using automatically defined functions (ADFs) [31, 32]. Architecture-altering operations <ref> [33] </ref> automatically determine the number of such subprograms, the number of arguments that each possesses, and the nature of the hierarchical references, if any, among such ADFs. See [34-37] for current research in GP.
Reference: [34] <editor> K. E. Kinnear, Jr. </editor> <booktitle> (editor) Advances in Genetic Programming. </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press, </publisher> <year> 1994. </year>
Reference: [35] <editor> P. J. Angeline, and K. E. Kinnear, Jr. (editors), </editor> <booktitle> Advances in Genetic Programming 2, </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press, </publisher> <year> 1996. </year>
Reference: [36] <editor> J. R. Koza, D. E. Goldberg, D. B. Fogel, and R. L. Riolo (editors), </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference: [37] <editor> J. R. Koza, K. Deb, M. Dorigo, D. B. Fogel, M. Garzon, H. Iba, and R. L. Riolo (editors), </editor> <booktitle> Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <month> July 1316, </month> <year> 1997, </year> <institution> Stanford University, </institution> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann, </publisher> <year> 1997. </year>
Reference: [38] <author> J. R. Koza, F. H Bennett III, D. Andre, and M. A. Keane, </author> <title> "Toward evolution of electronic animals using genetic programming," </title> <booktitle> Artificial Life V: Proceedings of the Fifth International Workshop on the Synthesis and Simulation of Living Systems, </booktitle> <address> Cambridge, MA: </address> <publisher> The MIT Press, </publisher> <pages> pp. 327-334, </pages> <year> 1996. </year>
Reference-contexts: Many of the random initial circuits and many that are created by the crossover and mutation operations in subsequent generations cannot be simulated by SPICE. These circuits receive a high penalty value of fitness (10 8 ) and become the worst-of-generation programs for each generation. For additional details, see <ref> [38, 39] </ref>. 2) Crossover Filter: The main differences between the problem of designing the lowpass filter and the problem of designing the crossover filter are that the crossover filter has two outputs and that the tweeter output calls for a highpass filter (also fifth-order elliptic).
Reference: [39] <author> J. R. Koza, F. H Bennett III, D. Andre, and M. A. Keane, </author> <title> "Automated design of both the topology and sizing of analog electrical circuits using genetic programming" In J. </title> <editor> S. Gero and F. Sudweeks (editors), </editor> <booktitle> Artificial Intelligence in Design '96, </booktitle> <address> Dordrecht: </address> <publisher> Kluwer, </publisher> <pages> pp. 151-170, </pages> <year> 1996. </year>
Reference-contexts: Many of the random initial circuits and many that are created by the crossover and mutation operations in subsequent generations cannot be simulated by SPICE. These circuits receive a high penalty value of fitness (10 8 ) and become the worst-of-generation programs for each generation. For additional details, see <ref> [38, 39] </ref>. 2) Crossover Filter: The main differences between the problem of designing the lowpass filter and the problem of designing the crossover filter are that the crossover filter has two outputs and that the tweeter output calls for a highpass filter (also fifth-order elliptic).
Reference: [40] <author> J. R. Koza, F. H Bennett III, D. Andre, and M. A. Keane, </author> <title> "Four problems for which a computer program evolved by genetic programming is competitive with human performance," </title> <booktitle> Proceedings of the 1996 IEEE International Conference on Evolutionary Computation, </booktitle> <pages> pp. 1 10, </pages> <year> 1996. </year>
Reference-contexts: For additional details, see <ref> [40] </ref>. 3) Source Identification Circuit: As before, fitness is measured in terms of the sum, over 101 fitness cases, of the absolute weighted deviation between the actual value of the voltage that is produced by the circuit and the target value for voltage.
Reference: [41] <author> J. R. Koza, F. H Bennett III, D. Andre, and M. A. Keane, </author> <title> "Automated WYWIWYG design of both the topology and component values of analog electrical circuits using genetic programming," </title> <editor> In J. R. Koza, D. E. Goldberg, D. B. Fogel, and R. L. Riolo (editors), </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <pages> pp. 123131, </pages> <year> 1996. </year>
Reference-contexts: has 40 transistors, 14 diodes, and 13 resistors. [INSERT FIGURE 26] 6 . 9 Other Circuits Numerous other analog electrical circuits have been evolved using the above approach, including other amplifiers [44], a different source identification circuit [47], a comb filter [43], and an asymmetric bandpass filter with stringent requirements <ref> [41] </ref>. 7 . CONCLUSION We have demonstrated that genetic programming can automatically design the topology and sizing of eight different prototypical analog electrical circuits containing various components and having various numbers of inputs and outputs.
Reference: [42] <author> J. R. Koza, F. H Bennett III, D. Andre, and M. A. Keane, </author> <title> "Reuse, parameterized reuse, and hierarchical reuse of substructures in evolving electrical circuits using genetic programming," </title> <booktitle> In Proceedings of International Conference on Evolvable Systems: From Biology to Hardware (ICES-96). Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 1259. </pages> <address> Berlin: </address> <publisher> Springer-Verlag. </publisher> <pages> pp. 312-326, </pages> <year> 1996. </year>
Reference: [43] <author> J. R. Koza, D. Andre, F. H Bennett III, and M. A. Keane, </author> <title> "Use of automatically defined functions and architecture-altering operations in automated circuit synthesis using genetic programming," </title> <editor> In J. R. Koza, D. E. Goldberg, D. B. Fogel, and R. L. Riolo (editors), </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <month> July 28-31, </month> <year> 1996, </year> <institution> Stanford University. </institution> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <pages> pp. 132140, </pages> <year> 1996. </year>
Reference-contexts: The "T" consists of capacitors C3 and C15 and inductor L11 and the "bridge" consists of inductor L14. The frequency domain behavior of this 100%-compliant circuit is indistinguishable from that of Fig. 14b. In another run using ADFs <ref> [43] </ref>, a 100% compliant circuit with the recognizable elliptic (Cauer) topology was evolved (Fig. 15b). This genetically evolved circuit has the equivalent of six inductors horizontally across the top of the circuit and five vertical shunts. <p> of 6.6, scores 90 hits (out of 105), and has 40 transistors, 14 diodes, and 13 resistors. [INSERT FIGURE 26] 6 . 9 Other Circuits Numerous other analog electrical circuits have been evolved using the above approach, including other amplifiers [44], a different source identification circuit [47], a comb filter <ref> [43] </ref>, and an asymmetric bandpass filter with stringent requirements [41]. 7 . CONCLUSION We have demonstrated that genetic programming can automatically design the topology and sizing of eight different prototypical analog electrical circuits containing various components and having various numbers of inputs and outputs.
Reference: [44] <author> F. H Bennett III, J. R. Koza, D. Andre, and M. A. Keane, </author> <title> "Evolution of a 60 Decibel op amp using genetic programming," </title> <editor> In Higuchi, T. (editor). </editor> <booktitle> Proceedings of International Conference on Evolvable Systems: From Biology to Hardware (ICES-96). Lecture Notes in Computer Science, </booktitle> <volume> vol. </volume> <pages> 1259. </pages> <address> Berlin: </address> <publisher> Springer-Verlag. </publisher> <pages> pp. 455-469, </pages> <year> 1996. </year>
Reference-contexts: best circuit (Fig. 26) from generation 80 achieves a fitness of 6.6, scores 90 hits (out of 105), and has 40 transistors, 14 diodes, and 13 resistors. [INSERT FIGURE 26] 6 . 9 Other Circuits Numerous other analog electrical circuits have been evolved using the above approach, including other amplifiers <ref> [44] </ref>, a different source identification circuit [47], a comb filter [43], and an asymmetric bandpass filter with stringent requirements [41]. 7 .
Reference: [45] <author> T. Quarles, A. R. Newton, D. O. Pederson, and A. Sangiovanni-Vincentelli, </author> <note> SPICE 3 Version 3F5 User's Manual, </note> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <address> CA, </address> <month> March </month> <year> 1994. </year>
Reference-contexts: A netlist is created that identifies each component of the developed circuit, the nodes to which each component is connected, and the value of each component. The netlist becomes the input to the 217,000-line SPICE (Simulation Program with Integrated Circuit Emphasis) simulation program <ref> [45] </ref>. SPICE then determines the behavior of the circuit. It was necessary to make considerable modifications in SPICE so that it could run as a submodule within the GP system. Fig. 13 provides additional detail on the calculation of fitness. First, the current circuit is set to the embryonic circuit. <p> For example, SPICE can be accelerated by a factor of three to ten by using improved versions of SPICE that are currently commercially available (as opposed to the public domain SPICE simulator <ref> [45] </ref> that we modified and used). In addition, SPICE simulations can be accelerated by several fold [55] by using known techniques to tune its various control parameters to the specific type of circuit being designed.
Reference: [46] <author> A. B. Williams, and F. J. Taylor, </author> <title> Electronic Filter Design Handbook, </title> <booktitle> Third Edition, </booktitle> <address> New York, NY: </address> <publisher> McGraw-Hill, </publisher> <year> 1995. </year> <note> IEEE TEC Paper No. 26 Version 4 -June 9, 1997 22 </note>
Reference-contexts: A practicing electrical engineer would recognize that the above design goals can be satisfied by a fifth-order elliptic filter (Cauer filter) with a modular angle Q of 30 degrees (i.e., the arcsin of the ratio of the boundaries of the passband and stopband) and a reflection coefficient r of 20% <ref> [46] </ref>. Since the high-level statement of behavior for the desired circuit is expressed in terms of frequencies, the voltage VOUT is measured in the frequency domain. SPICE performs an AC small signal analysis and report the circuit's behavior for frequencies chosen over five decades (between 1 Hz and 100 kHz). <p> The circuit was 100% compliant with the design requirements in that it scored 101 hits (out of 101). After the evolutionary run, this circuit (and all evolved circuits herein) were simulated anew using the commercially available Microsim circuit simulator to verify performance. This circuit had the recognizable ladder topology <ref> [46] </ref> of a Butterworth or Chebychev filter (i.e., a composition of series inductors horizontally with capacitors as vertical shunts). [INSERT FIGURES 14a and 14b] Fig. 14b shows the behavior in the frequency domain of this genetically evolved lowpass filter.
Reference: [47] <author> J. R. Koza, F. H Bennett III, J. Lohn, F. Dunlap, D. Andre, and M. A. Keane, </author> <title> "Evolution of a tristate frequency discriminator for the source identification problem using genetic programming," </title> <editor> In P. P. </editor> <booktitle> Wang (editor) Proceedings of Joint Conference of Information Sciences, </booktitle> <volume> vol. I, </volume> <pages> pp. 95 99, </pages> <year> 1997. </year>
Reference-contexts: If the voltage is more than 240 mV from 0 volts, the absolute value of the deviation from 0 V is weighted by a factor of 10. For additional details, see <ref> [47, 48] </ref>. 4) Computational Circuit: The target voltage is the cube root of the input voltage. SPICE is called to perform a DC sweep analysis at 21 equidistant voltages between 250 mV and +250 mV. <p> 80 achieves a fitness of 6.6, scores 90 hits (out of 105), and has 40 transistors, 14 diodes, and 13 resistors. [INSERT FIGURE 26] 6 . 9 Other Circuits Numerous other analog electrical circuits have been evolved using the above approach, including other amplifiers [44], a different source identification circuit <ref> [47] </ref>, a comb filter [43], and an asymmetric bandpass filter with stringent requirements [41]. 7 . CONCLUSION We have demonstrated that genetic programming can automatically design the topology and sizing of eight different prototypical analog electrical circuits containing various components and having various numbers of inputs and outputs.
Reference: [48] <author> J. R. Koza, F. H Bennett III, J. Lohn, F. Dunlap, D. Andre, and M. A. Keane, </author> <title> "Use of architecture-altering operations to dynamically adapt a three-way analog source identification circuit to accommodate a new source," </title> <editor> In Koza, John R., Deb, Kalyanmoy, Dorigo, Marco, Fogel, David B., Garzon, Max, Iba, Hitoshi, and Riolo, Rick L. (editors). </editor> <booktitle> 1997. Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <month> July 1316, </month> <year> 1997, </year> <institution> Stanford University. </institution> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann, </publisher> <pages> pp. 213 221, </pages> <year> 1997. </year>
Reference-contexts: If the voltage is more than 240 mV from 0 volts, the absolute value of the deviation from 0 V is weighted by a factor of 10. For additional details, see <ref> [47, 48] </ref>. 4) Computational Circuit: The target voltage is the cube root of the input voltage. SPICE is called to perform a DC sweep analysis at 21 equidistant voltages between 250 mV and +250 mV.
Reference: [49] <author> Koza, John R., Bennett III, Forrest H, Lohn, Jason, Dunlap, Frank, Andre, David, and Keane, Martin A. </author> <title> Automated synthesis of computational circuits using genetic programming. </title> <booktitle> Proceedings of the 1997 IEEE Conference on Evolutionary Computation, </booktitle> <address> Piscataway, NJ: </address> <publisher> IEEE Press, </publisher> <pages> pp. 447452, </pages> <year> 1997. </year>
Reference-contexts: Fitness is the sum, over these 21 fitness cases, of the absolute weighted deviation between the actual value of the voltage that is produced by the circuit and the target value for voltage. Also see <ref> [49] </ref>. 5) Time-Optimal Controller Circuit: The fitness of a controller was evaluated using 72 randomly chosen fitness cases each representing a different target (fly-to) point. Fitness is the sum, over the 72 fitness cases, of the fly-to times.
Reference: [50] <author> J. R. Koza, F. H Bennett III, M. A. Keane, and D. Andre, </author> <title> "Evolution of a time-optimal fly-to controller circuit using genetic programming," </title> <editor> In Koza, John R., Deb, Kalyanmoy, Dorigo, Marco, Fogel, David B., Garzon, Max, Iba, Hitoshi, and Riolo, Rick L. </editor> <booktitle> (editors),Genetic Programming 1997: Proceedings of the Second Annual Conference, </booktitle> <month> July 1316, </month> <year> 1997, </year> <institution> Stanford University, </institution> <address> San Francisco, CA: </address> <publisher> Morgan Kaufmann, </publisher> <pages> pp. 207 212, </pages> <year> 1997. </year>
Reference-contexts: When an individual program is executed, it produces a numeric value which the wrapper (output interface) transforms into the turn angle Q for the aircraft. Also see <ref> [50] </ref>. 6) Amplifier: SPICE was requested to perform a DC sweep analysis to determine the circuit's response for several different DC input voltages. An ideal inverting amplifier circuit would receive the DC input, invert it, and multiply it by the amplification factor.
Reference: [51] <author> J. R. Koza, F. H Bennett III, D. Andre, and M. A. Keane, </author> <title> "Evolution using genetic programming of a low-distortion 96 Decibel operational amplifier. </title> <booktitle> Proceedings of the 1997 ACM Symposium on Applied Computing, </booktitle> <address> San Jose, California, </address> <month> February 28 March 2, </month> <year> 1997. </year> <title> New York: </title> <journal> Association for Computing Machinery. pp. </journal> <volume> 207 - 216, </volume> <year> 1997. </year>
Reference-contexts: The penalty for each of these line segments is equal to the absolute value of the difference in slope between the respective line segment and the overall amplification factor of the circuit. Also see <ref> [51] </ref>. 7) TemperatureSensing Circuit: The circuit will operate in an environment whose temperature ranges between 0 C (freezing) and 100 C (boiling) and will be expected to report the ambient temperature in voltages using a linear scale in which 0 V equals 0 C and 10 V equals 100 C.
Reference: [52] <author> D. Andre and J. R. Koza, </author> <title> "Parallel genetic programming: A scalable implementation using the transputer architecture, </title> <editor> In Angeline, P. J. and Kinnear, K. E. Jr. (editors), </editor> <booktitle> 1996, Advances in Genetic Programming 2, </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press, </publisher> <year> 1996. </year>
Reference-contexts: The other parameters were substantially the same for each of the eight problems (as presented in the individual references cited above for each problem). Each problem was run on a medium-grained parallel Parsytec computer system <ref> [52] </ref> consisting of 64 80-MHz PowerPC 601 processors arranged in an 8 by 8 toroidal mesh with a host PC Pentium type computer. The distributed GA was used with a population size of Q = 10,000 at each of the D = 64 demes (reproductive populations).
Reference: [53] <author> J. C. Clements, </author> <title> "Minimum-time turn trajectories to fly-to points," Optimal Control Applications and Methods, </title> <journal> vol. </journal> <volume> 11, </volume> <pages> pp. 39-50, </pages> <year> 1990. </year>
Reference-contexts: In comparison, the optimal value of fitness for this problem is known to be 1.518 hours <ref> [53] </ref>. This best-of-run circuit has 10 transistors and 4 resistors.
Reference: [54] <author> T. Sterling, P. Messina, and P. H. Smith, </author> <title> Enabling Technologies for Petaflops Computing, </title> <address> Cambridge, MA: </address> <publisher> The MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: The runs for the eight problems took about 2 days each on a parallel computing system with 64 80-MHz processors and thus entailed about 10 15 operations each. Petaflop computers <ref> [54] </ref> capable of executing 10 15 operations per second are expected to be available to high-end institutional users by 2010. Thus, it will be possible to run the foregoing examples of automated synthesis in a matter of seconds in the relatively near future.

References-found: 54

