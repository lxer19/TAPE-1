URL: http://www.cs.panam.edu/~meng/unix-home/Research/Nbody/dfma.ps
Refering-URL: http://www.cs.panam.edu/~meng/unix-home/Research/Nbody/
Root-URL: http://www.cs.panam.edu
Email: wrankin@ee.duke.edu  
Title: A Distributed Implementation of the Parallel Multipole Tree Algorithm  
Author: William T. Rankin 
Date: January 13, 1995  
Affiliation: Department of Electrical Engineering Duke University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Barnes and P. Hut. </author> <title> A hierarchical o(n log n) force-calculation algorithm. </title> <journal> Nature, </journal> <volume> 324(4) </volume> <pages> 446-449, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: By using the MPE when computing forces on a particle, and doing operations to combine multipole expansions, the overall amount of computation can be reduced to an almost linear relationship with the number of particles. Other multipole tree codes include the work by Barnes and Hutt <ref> [1] </ref>. This algorithm is similar to Greengard's FMA, in that it utilizes oct-tree based spatial decomposition and multipoles, but does not utilize the concept of combining distant multipoles into local expansions prior to computing the particle forces.
Reference: [2] <author> J. A. Board, W. J. Blanke, D. C. Gray, Z. S. Hakura, W. D. Elliott, and J. F. Leathrum. </author> <title> Scalable implementations of multipole-accelerated algorithms for molecular dynamics. </title> <booktitle> Submitted to 1994 Scalable High Performance Computing Conference, </booktitle> <year> 1994. </year>
Reference-contexts: It is not our intention to lead a discourse on the mathematics behind multipole algorithms. Many people have spent vast amounts of energy doing this already. The reader is urged to to read Leslie Greengard's excellent book [5] and papers by John Board <ref> [2] </ref> and Jim Leathrum [7] for descriptions of the painful mathematics involved. The Fast Multipole Algorithm (FMA) is an algorithm for the numerical solution of the N-body problem. <p> This algorithm is similar to Greengard's FMA, in that it utilizes oct-tree based spatial decomposition and multipoles, but does not utilize the concept of combining distant multipoles into local expansions prior to computing the particle forces. Hybrid methods such as PMTA <ref> [2] </ref> combine the use of local multipole expansion from FMA with the Barnes and Hutt treecodes resulting in performance improvements over the straight treecodes, while being less complex that a full FMA implementation. Additional performance enhancements include the use of FFT methods during the multipole computation phase [3]. <p> The parallel algorithm is based upon previous work by Leathrum [7] and Board <ref> [2] </ref>. Further descriptions of parallel implementations of the FMA are found in [6], [8], [9], and [10]. Step 0: Initialization of Slave Processes The master process spawns all of the required slave processes.
Reference: [3] <author> W. D. Elliott and J. A. </author> <title> Board. Fast fourier transform accelerated fast mul-tipole algorithm. </title> <note> Submitted to SIAM Journal of Scientific and Statistical Computing, </note> <year> 1994. </year>
Reference-contexts: Additional performance enhancements include the use of FFT methods during the multipole computation phase <ref> [3] </ref>.
Reference: [4] <author> D. Gray. </author> <title> Load balancing the parallel fast multipole algorithm. </title> <type> Master's thesis, </type> <institution> Duke University, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: Further descriptions of parallel implementations of the FMA are found in [6], [8], [9], and [10]. Step 0: Initialization of Slave Processes The master process spawns all of the required slave processes. The master then computes the interaction and inverse interaction lists <ref> [4] </ref> that will be used by the slave processes. The interaction lists are then sent to the each slave process. Upon initialization, each slave process precomputes constant arrays used for computing the multipole expansions, and allocates memory to hold the particle and cell data structures.
Reference: [5] <author> L. Greengard. </author> <title> The Rapid Evaluation of Potential Fields in Particle Systems. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1988. </year>
Reference-contexts: It is not our intention to lead a discourse on the mathematics behind multipole algorithms. Many people have spent vast amounts of energy doing this already. The reader is urged to to read Leslie Greengard's excellent book <ref> [5] </ref> and papers by John Board [2] and Jim Leathrum [7] for descriptions of the painful mathematics involved. The Fast Multipole Algorithm (FMA) is an algorithm for the numerical solution of the N-body problem.
Reference: [6] <author> L. Greengard and W. D. Gropp. </author> <title> A parallel version of the fast multipole method. </title> <editor> In G. Rodrigue, editor, </editor> <booktitle> Parallel Processing for Scientific Computing. </booktitle> <publisher> SIAM, </publisher> <year> 1989. </year>
Reference-contexts: The parallel algorithm is based upon previous work by Leathrum [7] and Board [2]. Further descriptions of parallel implementations of the FMA are found in <ref> [6] </ref>, [8], [9], and [10]. Step 0: Initialization of Slave Processes The master process spawns all of the required slave processes. The master then computes the interaction and inverse interaction lists [4] that will be used by the slave processes.
Reference: [7] <author> J. F. Leathrum. </author> <title> Parallelization of the Fast Multipole Algorithm: Algorithm and Architecture Design. </title> <type> PhD thesis, </type> <institution> Duke University, </institution> <year> 1992. </year>
Reference-contexts: It is not our intention to lead a discourse on the mathematics behind multipole algorithms. Many people have spent vast amounts of energy doing this already. The reader is urged to to read Leslie Greengard's excellent book [5] and papers by John Board [2] and Jim Leathrum <ref> [7] </ref> for descriptions of the painful mathematics involved. The Fast Multipole Algorithm (FMA) is an algorithm for the numerical solution of the N-body problem. Simply put, the classical N-Body problem involves computing the net effect of the interactions of each pair of particles out of a set of N. <p> The parallel algorithm is based upon previous work by Leathrum <ref> [7] </ref> and Board [2]. Further descriptions of parallel implementations of the FMA are found in [6], [8], [9], and [10]. Step 0: Initialization of Slave Processes The master process spawns all of the required slave processes.
Reference: [8] <author> J. F. Leathrum and J. A. </author> <title> Board. The parallel fast multipole algorithm in three dimensions. </title> <type> Technical report, </type> <institution> Duke University Dept. of Electrical Engineering, </institution> <year> 1992. </year> <month> 23 </month>
Reference-contexts: The parallel algorithm is based upon previous work by Leathrum [7] and Board [2]. Further descriptions of parallel implementations of the FMA are found in [6], <ref> [8] </ref>, [9], and [10]. Step 0: Initialization of Slave Processes The master process spawns all of the required slave processes. The master then computes the interaction and inverse interaction lists [4] that will be used by the slave processes. The interaction lists are then sent to the each slave process.
Reference: [9] <author> J. P. Singh, C. Holt, J. L. Hennessy, and A. Gupta. </author> <title> A parallel adaptive fast multipole method. </title> <booktitle> In Supercomputing '93. IEEE Computer Society, </booktitle> <year> 1993. </year>
Reference-contexts: The parallel algorithm is based upon previous work by Leathrum [7] and Board [2]. Further descriptions of parallel implementations of the FMA are found in [6], [8], <ref> [9] </ref>, and [10]. Step 0: Initialization of Slave Processes The master process spawns all of the required slave processes. The master then computes the interaction and inverse interaction lists [4] that will be used by the slave processes. The interaction lists are then sent to the each slave process.
Reference: [10] <author> M. S. Warren and J. K. Salmon. </author> <title> A parallel hashed oct-tree n-body algorithm. </title> <booktitle> In Supercomputing '93. IEEE Computer Society, </booktitle> <year> 1993. </year> <month> 24 </month>
Reference-contexts: The parallel algorithm is based upon previous work by Leathrum [7] and Board [2]. Further descriptions of parallel implementations of the FMA are found in [6], [8], [9], and <ref> [10] </ref>. Step 0: Initialization of Slave Processes The master process spawns all of the required slave processes. The master then computes the interaction and inverse interaction lists [4] that will be used by the slave processes. The interaction lists are then sent to the each slave process. <p> A pictorial representation of the Cell Table is shown in Figure 1. The Cell Table is maintained as a single array of pointers to Cell data structures, utilizing the addressing scheme described by Warren and Salmon <ref> [10] </ref>. Each cell may contain part or all of the following structures: Multipole Expansion themultipole expansion of all the particles contained within the bounds of the cell. Particle List the list of particle positions and charges within the boundaries of the cell.
References-found: 10

