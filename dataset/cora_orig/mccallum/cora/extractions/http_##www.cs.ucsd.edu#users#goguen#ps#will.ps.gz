URL: http://www.cs.ucsd.edu/users/goguen/ps/will.ps.gz
Refering-URL: http://www.cs.ucsd.edu/users/goguen/new.html
Root-URL: http://www.cs.ucsd.edu
Title: An Implementation-Oriented Semantics for Module Composition  
Author: Joseph A. Goguen Will Tracz 
Address: La Jolla CA 92093-0114  Owego, New York 13827-3994  
Affiliation: Department of Computer Science Engineering University of California at San Diego  Lockheed Martin Federal Systems  
Abstract: This paper describes an approach to module composition based on executing "module expressions" to build systems out of component modules, and gives it a novel semantics that is intended to aid with its implementation. This semantics is set theoretic, using the technical notions of tuple set, partial signature, and institution, and avoiding more difficult mathematics such as abstract algebra and category theory. Language features include information hiding, both vertical and horizontal composition, and views for binding modules to interfaces. Vertical composition refers to the hierarchical structuring of a system into layers, while horizontal composition refers to the structure of a given layer. Modules may involve information hiding, and views may involve behavioral satisfaction of a theory by a module. A number of "Laws of Software Composition" are given, showing how the various module composition operations are related. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Barry W. Boehm and William L. Scherlis. </author> <title> Megaprogramming. </title> <booktitle> In Proceedings of Software Technology Conference 1992, </booktitle> <pages> pages 63-82, </pages> <month> April </month> <year> 1992. </year>
Reference: [2] <author> Rod Burstall. </author> <title> Programming with modules as typed functional programming. </title> <booktitle> Proceedings, International Conference on Fifth Generation Computing Systems, </booktitle> <year> 1985. </year>
Reference: [3] <author> Rod Burstall and Joseph Goguen. </author> <title> Putting theories together to make specifications. </title> <editor> In Raj Reddy, editor, </editor> <booktitle> Proceedings, Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1045-1058. </pages> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <year> 1977. </year>
Reference: [4] <author> Rod Burstall and Joseph Goguen. </author> <title> The semantics of Clear, a specification language. </title> <editor> In Dines Bjorner, editor, </editor> <booktitle> Proceedings, 1979 Copenhagen Winter School on Abstract Software Specification, </booktitle> <pages> pages 292-332. </pages> <publisher> Springer, </publisher> <year> 1980. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 86. </volume>
Reference-contexts: To emphasize this, it will be indicated in drawings of the module graph with a dashed line. 29 Technically, the instantiation module is the "pushout" of the two views from the parameter theory, one to the body and the other to the actual module, as in <ref> [4, 17] </ref>. 30 A sequence M fl r 1 fl :::r k of transformations can be treated as a single transformation for this purpose. 46 4.8 Summary We have seen that module expressions can be used for: 1. instantiating a parameterized module using a view to create: (a) a new parameterized
Reference: [5] <author> Graham Button and Wes Sharrock. </author> <title> Occasioned practises in the work of implementing development methodologies. </title> <editor> In Marina Jirotka and Joseph Goguen, editors, </editor> <booktitle> Requirements Engineering: Social and Technical Issues, </booktitle> <pages> pages 217-240. </pages> <publisher> Academic, </publisher> <year> 1994. </year>
Reference: [6] <author> Department of Defense. </author> <title> Reference manual for the Ada programming language. United States Government, </title> <type> Report ANSI/MIL-STD-1815A, </type> <year> 1983. </year>
Reference: [7] <author> Razvan Diaconescu, Joseph Goguen, and Petros Stefaneas. </author> <title> Logical support for modu-larisation. </title> <editor> In Gerard Huet and Gordon Plotkin, editors, </editor> <booktitle> Logical Environments, </booktitle> <pages> pages 83-130. </pages> <address> Cambridge, </address> <year> 1993. </year> <title> Proceedings of a Workshop held in Edinburgh, </title> <address> Scotland, </address> <month> May </month> <year> 1991. </year>
Reference: [8] <author> Joseph Goguen. </author> <title> Suggestions for using and organizing libraries in software development. </title> <editor> In Steven Kartashev and Svetlana Kartashev, editors, </editor> <booktitle> Proceedings, First International Conference on Supercomputing Systems, </booktitle> <pages> pages 349-360. </pages> <publisher> IEEE Computer Society, </publisher> <year> 1985. </year> <note> Also in Supercomputing Systems, </note> <editor> Steven and Svetlana Kartashev, Eds., </editor> <publisher> Elsevier, </publisher> <year> 1986. </year> <month> 51 </month>
Reference: [9] <author> Joseph Goguen. </author> <title> Principles of parameterized programming. </title> <editor> In Ted Biggerstaff and Alan Perlis, editors, </editor> <booktitle> Software Reusability, Volume I: Concepts and Models, </booktitle> <pages> pages 159-225. </pages> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference: [10] <author> Joseph Goguen. </author> <title> Higher-order functions considered unnecessary for higher-order programming. </title> <editor> In David Turner, editor, </editor> <booktitle> Research Topics in Functional Programming, </booktitle> <pages> pages 309-352. </pages> <publisher> Addison Wesley, </publisher> <year> 1990. </year> <note> University of Texas at Austin Year of Programming Series; preliminary version in SRI Technical Report SRI-CSL-88-1, </note> <month> January </month> <year> 1988. </year>
Reference: [11] <author> Joseph Goguen. Hyperprogramming: </author> <title> A formal approach to software environments. </title> <booktitle> In Proceedings, Symposium on Formal Approaches to Software Environment Technology. Joint System Development Corporation, </booktitle> <address> Tokyo, Japan, </address> <month> January </month> <year> 1990. </year>
Reference: [12] <author> Joseph Goguen. </author> <title> A categorical manifesto. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 1(1) </volume> <pages> 49-67, </pages> <month> March </month> <year> 1991. </year>
Reference: [13] <author> Joseph Goguen. </author> <title> Types as theories. </title> <editor> In George Michael Reed, Andrew William Roscoe, and Ralph F. Wachter, editors, </editor> <booktitle> Topology and Category Theory in Computer Science, </booktitle> <pages> pages 357-390. </pages> <address> Oxford, </address> <year> 1991. </year> <booktitle> Proceedings of a Conference held at Oxford, </booktitle> <month> June </month> <year> 1989. </year>
Reference: [14] <author> Joseph Goguen. </author> <title> Requirements engineering as the reconciliation of social and technical issues. </title> <editor> In Marina Jirotka and Joseph Goguen, editors, </editor> <booktitle> Requirements Engineering: Social and Technical Issues, </booktitle> <pages> pages 165-200. </pages> <publisher> Academic, </publisher> <year> 1994. </year>
Reference: [15] <author> Joseph Goguen. </author> <title> Formality and informality in requirements engineering. </title> <booktitle> In Proceedings, International Conference on Requirements Engineering, </booktitle> <pages> pages 102-108. </pages> <publisher> IEEE Computer Society, </publisher> <month> April </month> <year> 1996. </year>
Reference: [16] <author> Joseph Goguen and Rod Burstall. </author> <title> CAT, a system for the structured elaboration of correct programs from structured specifications. </title> <type> Technical Report Report CSL-118, </type> <institution> SRI Computer Science Lab, </institution> <month> October </month> <year> 1980. </year>
Reference: [17] <author> Joseph Goguen and Rod Burstall. Institutions: </author> <title> Abstract model theory for specification and programming. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 39(1) </volume> <pages> 95-146, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: To emphasize this, it will be indicated in drawings of the module graph with a dashed line. 29 Technically, the instantiation module is the "pushout" of the two views from the parameter theory, one to the body and the other to the actual module, as in <ref> [4, 17] </ref>. 30 A sequence M fl r 1 fl :::r k of transformations can be treated as a single transformation for this purpose. 46 4.8 Summary We have seen that module expressions can be used for: 1. instantiating a parameterized module using a view to create: (a) a new parameterized
Reference: [18] <author> Joseph Goguen and Razvan Diaconescu. </author> <title> Towards an algebraic semantics for the object paradigm. </title> <editor> In Hartmut Ehrig and Fernando Orejas, editors, </editor> <booktitle> Proceedings, Tenth Workshop on Abstract Data Types, </booktitle> <pages> pages 1-29. </pages> <publisher> Springer, </publisher> <year> 1994. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 785. </volume>
Reference: [19] <author> Joseph Goguen and Grant Malcolm. </author> <title> Proof of correctness of object representation. </title> <editor> In A. William Roscoe, editor, </editor> <title> A Classical Mind: </title> <booktitle> Essays in Honour of C.A.R. Hoare, </booktitle> <pages> pages 119-142. </pages> <publisher> Prentice Hall, </publisher> <year> 1994. </year>
Reference: [20] <author> Joseph Goguen and Grant Malcolm. </author> <title> Algebraic Semantics of Imperative Programs. </title> <publisher> MIT, </publisher> <year> 1996. </year>
Reference: [21] <author> Joseph Goguen and Grant Malcolm. </author> <title> Extended abstract of a hidden agenda. </title> <editor> In James, Alex Meystel, and Richard Quintero, editors, </editor> <booktitle> Proceedings, Conference on Intelligent Systems: A Semiotic Perspective, </booktitle> <pages> pages 159-167. </pages> <institution> National Inst. Standards and Technology, </institution> <address> 1996. Gaithersberg MD, </address> <month> October 20-23. 52 </month>
Reference: [22] <author> Joseph Goguen and Jose Meseguer. </author> <title> Universal realization, persistent interconnection and implementation of abstract modules. </title> <editor> In M. Nielsen and E.M. Schmidt, editors, </editor> <booktitle> Proceedings, 9th International Conference on Automata, Languages and Programming, </booktitle> <pages> pages 265-281. </pages> <publisher> Springer, </publisher> <year> 1982. </year> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> Volume 140. </volume>
Reference: [23] <author> Joseph Goguen and Jose Meseguer. </author> <title> Unifying functional, object-oriented and relational programming, with logical semantics. </title> <editor> In Bruce Shriver and Peter Wegner, editors, </editor> <booktitle> Research Directions in Object-Oriented Programming, </booktitle> <pages> pages 417-477. </pages> <publisher> MIT, </publisher> <year> 1987. </year>
Reference: [24] <author> Joseph Goguen, Timothy Winkler, Jose Meseguer, Kokichi Futatsugi, and Jean-Pierre Jouannaud. Introducing OBJ. In Joseph Goguen and Grant Malcolm, </author> <title> editors, Algebraic Specification with OBJ: An Introduction with Case Studies. </title> <note> to appear. Also Technical Report, SRI International. </note>
Reference: [25] <author> Marina Jirotka and Joseph Goguen. </author> <title> Requirements Engineering: Social and Technical Issues. </title> <publisher> Academic, </publisher> <year> 1994. </year>
Reference: [26] <author> Bernd Krieg-Bruckner and David Luckham. anna: </author> <title> Towards a language for annotating Ada programs. </title> <journal> SIGPLAN Notices, </journal> <volume> 15(11) </volume> <pages> 128-138, </pages> <month> November </month> <year> 1980. </year>
Reference: [27] <author> Karl Lieberherr and Cun Xiao. </author> <title> Minimizing dependency on class structure with adaptive programs. </title> <editor> In S. Nishio and Aki Yonezawa, editors, </editor> <booktitle> Proceedings, Symposium on Object Technologies for Advanced Software, </booktitle> <pages> pages 424-441. </pages> <publisher> Springer, </publisher> <year> 1993. </year>
Reference: [28] <author> David Luckham. </author> <title> Programming with Specifications: An Introduction to anna, A Language for Annotating Ada Programs. </title> <publisher> Springer, </publisher> <year> 1990. </year>
Reference: [29] <author> David Luckham and Friedrich von Henke. </author> <title> An overview of Anna, a specification language for Ada. </title> <journal> IEEE Software, </journal> <volume> 2(2) </volume> <pages> 9-23, </pages> <month> March </month> <year> 1985. </year>
Reference: [30] <author> Neel Madhav and Walter Mann. </author> <title> Abstract Specification of Automated Reasoning Tools: An Ada-Logic Interface. Program Analysis and Verification Group, </title> <institution> Stanford University, </institution> <year> 1989. </year>
Reference: [31] <author> Bertrand Meyer. </author> <title> Object-Oriented Software Construction. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: A new axiom is also added. 27 This is more than a "hide" operation followed by an "add" operation, because it actually removes source code from the implementation and then adds new code. 28 This example is based on an example found in <ref> [31] </ref> 44 make SQUARE is RECTANGLE fl (rename Rectangle =&gt; Square) fl (add function Side (S : Square) return Real) fl (replace (Area =&gt; Area) ) where the new function is implemented as: function Area (S : Square) return Real is begin return Length (S) ** 2; end; fl (replace (Perimeter
Reference: [32] <author> David Parnas. </author> <title> Information distribution aspects of design methodology. </title> <booktitle> Information Processing '72, </booktitle> <volume> 71 </volume> <pages> 339-344, </pages> <year> 1972. </year> <booktitle> Proceedings of 1972 IFIP Congress. </booktitle>
Reference: [33] <author> Rubin Prieto-D iaz and James Neighbors. </author> <title> Module interconnection language. </title> <journal> Journal of Systems and Software, </journal> <volume> 6(4) </volume> <pages> 307-344, </pages> <month> November </month> <year> 1986. </year>
Reference: [34] <author> Donald Sannella. </author> <title> Semantics, Implementation and Pragmatics of Clear, a Program Specification Language. </title> <type> PhD thesis, </type> <institution> University of Edinburgh, Computer Science Department, </institution> <year> 1982. </year> <note> Report CST-17-82. </note>
Reference: [35] <author> Donald Sannella and Andrzej Tarlecki. </author> <title> Specifications in an arbitrary institution. </title> <journal> Information and Control, </journal> <volume> 76 </volume> <pages> 165-210, </pages> <year> 1988. </year> <title> Earlier version in Proceedings, </title> <booktitle> International Symposium on the Semantics of Data Types, Lecture Notes in Computer Science, </booktitle> <volume> Volume 173, </volume> <publisher> Springer, </publisher> <year> 1985. </year>
Reference: [36] <institution> Tartan Laboratories Incorporated. </institution> <note> diana Reference Manual, Revision 3, 1983. 53 </note>
Reference: [37] <author> Will Tracz. lileanna: </author> <title> a parameterized programming language. </title> <booktitle> In Proceedings, Second International Workshop on Software Reuse, </booktitle> <month> March </month> <year> 1993. </year> <pages> Lucca, </pages> <address> Italy. </address>
Reference: [38] <author> Will Tracz. </author> <title> Parameterized programming in lileanna. </title> <booktitle> In Proceedings of ACM Symposium on Applied Computing, SAC'93, </booktitle> <pages> pages 77-86, </pages> <month> February </month> <year> 1993. </year>
Reference: [39] <author> Gio Wiederhold, Peter Wegner, and Stefano Ceri. </author> <title> Toward megaprogramming. </title> <journal> Communications of the ACM, </journal> <volume> 35(11) </volume> <pages> 89-99, </pages> <year> 1992. </year>
Reference: [40] <author> Martin Wirsing. </author> <title> Structured algebraic specifications: A kernel language. </title> <journal> Theoretical Computer Science, </journal> <volume> 42 </volume> <pages> 123-249, </pages> <year> 1986. </year> <month> 54 </month>
References-found: 40

