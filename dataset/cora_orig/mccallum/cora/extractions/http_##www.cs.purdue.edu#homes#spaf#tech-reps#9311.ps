URL: http://www.cs.purdue.edu/homes/spaf/tech-reps/9311.ps
Refering-URL: http://www.cs.purdue.edu/homes/spaf/messiahs.html
Root-URL: http://www.cs.purdue.edu
Email: sjc@cs.purdue.edu spaf@cs.purdue.edu  
Title: An Overview of the messiahs Distributed Scheduling Support System  
Author: Steve J. Chapin Eugene Spafford 
Note: This work was supported by a NASA Graduate Student Researchers Fellowship, NASA grant number NGT 50919.  
Date: January 22, 1993  
Address: West Lafayette, IN 47907-1398  
Affiliation: Department of Computer Sciences Purdue University  
Pubnum: Technical Report TR-CSD-93-011  
Abstract: Users often find that local resources are too limited to solve large computing problems. At the same time, unused machines remain inaccessible because of incompatible architectures, ignorance of their capabilities, or incompatible administrative restrictions. To preserve this investment in equipment, yet allow for the solution of large problems, mechanisms are needed to join these systems into cooperating groups across the boundaries of administrative domains and physical locality. In this paper, we describe messiahs, a system intended to provide scalable mechanisms for the efficient implementation of scheduling policies on distributed systems, while preserving the autonomy of the component systems. These systems can range from a few workstations to hundreds of heterogeneous, autonomous systems interconnected via networks ranging from local-area net works to geographically large networks, connected by arbitrary links. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Artsy and R. Finkel. </author> <title> Simplicity, Efficiency, and Funcionality in Designing a Process Migration Facility. </title> <booktitle> In The 2nd Israel Conference on Computer Systems, </booktitle> <month> May </month> <year> 1987. </year>
Reference-contexts: The FTP protocol family (see [35, 40, 29, 11]) provides mechanisms to move files and programs. Efficient implementations of revocation might use checkpointing and process migration mechanisms, such as those as in Emerald [24], Amoeba [30], Sprite [31], Dune [36], Charlotte <ref> [1] </ref>, or the V System [44]. These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick [15], and Shub, et al. [13, 39]) have devised architecture-independent task representations. XDR [23] and ASN.1 [16, 17] specify machine-independent data formats.
Reference: [2] <author> Bradley Norman Babin. DCS: </author> <title> A System for Distributed Computation. </title> <type> Master's thesis, </type> <institution> Oregon State University, </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: There are many examples of systems that share some of these qualities. Shared-memory parallel processors such as the Sequent Symmetry [38] are homogeneous, tightly-coupled systems. Homogeneous groups of workstations that communicate over a network are described by Babin <ref> [2] </ref>, Gantz, et al. [18], and Litzkow [26], among others. Stumm describes a heterogeneous, distributed system of workstations in [43]. None of these systems support autonomy. Our definition of a task is a request for resources.
Reference: [3] <author> K. Birman, R. Cooper, T. Joseph, K. Marzullo, M. Makpangou, K. Kane, F. Schmuck, and M. Wood. </author> <title> The ISIS System Manual, </title> <note> Version (2.1), </note> <month> September </month> <year> 1990. </year>
Reference-contexts: This is done regardless of how recently it received updates from other systems. We will investigate the use of a multicast facility for this channel, such as described by Birman, et al. in the isis system manual <ref> [3] </ref>, and by Deering in [10]. Provision is also made for polled updates, whereby a system can query another as to its status through the control channel and receive a reply through the update channel. Update cycles cannot be allowed in the communications structure of a system.
Reference: [4] <author> Ben A. Blake. </author> <title> Assignment of independent tasks to minimize completion time. </title> <journal> Software-Practice and Experience, </journal> <volume> 22(9) </volume> <pages> 723-734, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Our work concentrates on facilities for the former. Many researchers have studied the problem of task placement in distributed systems, including Sarkar [37], Lo [28], Stone [42], and Blake <ref> [4] </ref>; however, their algorithms have assumed that all processors are similar, that perfect information describing the system and tasks is instantaneously available, or that they have total control of all processors in the system.
Reference: [5] <author> David R. Boggs, Jeffrey C. Mogul, and Christopher A. Kent. </author> <title> Measured Capacity of an Ethernet: Myths and Reality. </title> <type> Technical Report 88/4, </type> <institution> Digital Equipment Corporation, Western Research Laboratory, </institution> <month> September </month> <year> 1988. </year>
Reference-contexts: The update channel is unidirectional; the recipient of an update message returns no information through the update channel. The update channel makes no attempt to ensure reliability. If a reliable message passing mechanism exists, it may be used. As noted by Boggs, et al. in <ref> [5] </ref>, networks are generally reliable under normal use. Timely delivery of data is more important than reliable delivery; late information is likely to be out-of-date, and therefore of little value. At periodic intervals a module recomputes its status vector and advertise the updated vector through the update channel.
Reference: [6] <author> Mic Bowman, Larry L. Peterson, and Andrey Yeatts. Univers: </author> <title> An attribute-based name server. </title> <journal> Software-Practice and Experience, </journal> <volume> 20(4) </volume> <pages> 403-424, </pages> <month> April </month> <year> 1990. </year> <month> 27 </month>
Reference-contexts: The scheduling module evaluates the predicate, and makes a decision based on its boolean-valued result. Our extension mechanism is similar in concept to the attribute-based descriptions of the Profile [33] and Univers <ref> [6] </ref> systems developed at the University of Arizona. We have simplified and tailored the concept to our more limited purposes. The messiahs extension mechanism has two basic variable types: strings and integers.
Reference: [7] <author> Michael J. Carey, Miron Livny, and Hongjun Lu. </author> <title> Dynamic Task Allocation in a Distributed Database System. </title> <booktitle> In Distributed Computing Systems, </booktitle> <pages> pages 282-291. </pages> <publisher> IEEE, </publisher> <year> 1985. </year>
Reference-contexts: None of these systems support autonomy. Our definition of a task is a request for resources. This includes the conventional model of a computationally intensive unit in a larger program, as well as a set of database queries (see Carey, et al. <ref> [7] </ref>), output requests, etc. Thus, our mechanisms could be used in the scheduling of queries to a large distributed database, to manage a set of output devices, such as printers, or to allocate network resources for large 3 data transfers.
Reference: [8] <author> Bill Cheswick. </author> <title> The Design of a Secure Internet Gateway. </title> <booktitle> In USENIX Summer Conference, </booktitle> <pages> pages 233-237, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: Garfinkel and Spafford [20] define this type of behavior as a firewall. Cheswick discusses the the construction of a secure packet router embodying the firewall concept in <ref> [8] </ref>. 5.4 The extension mechanism It would be impossible to predefine the complete set of characteristics used by all present and future scheduling algorithms. Therefore, messiahs includes an extension 16 mechanism that allows users to customize the description of a system or task.
Reference: [9] <author> Douglas E. Comer. </author> <title> Internetworking with TCP/IP, volume I, Principles, Protocols, and Architecture. </title> <publisher> Prentice Hall, </publisher> <address> second edition, </address> <year> 1991. </year> <note> ISBN 0-13-468505-9. </note>
Reference-contexts: An update cycle occurs when two or more systems exchange update messages and compute their status vectors based on those messages. Such behavior causes an ever-increasing overestimation of system resources, analogous to the count to infinity problem in network routing protocols (see Comer <ref> [9] </ref>). For any system, there are three sets of systems that could pass it updates: its children, its parents, and its siblings within the hierarchy. In order to avoid update cycles, we do not allow parents to pass update messages to their children.
Reference: [10] <author> S. Deering. </author> <title> Host Extensions for IP Multicasting. </title> <type> RFC 1054, </type> <institution> Stanford University, </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: This is done regardless of how recently it received updates from other systems. We will investigate the use of a multicast facility for this channel, such as described by Birman, et al. in the isis system manual [3], and by Deering in <ref> [10] </ref>. Provision is also made for polled updates, whereby a system can query another as to its status through the control channel and receive a reply through the update channel. Update cycles cannot be allowed in the communications structure of a system.
Reference: [11] <author> A.L. DeSchon and R.T. Braden. </author> <title> Background file transfer progrm (bftp). </title> <type> RFC 1068, </type> <institution> Network Information Center, </institution> <month> August </month> <year> 1988. </year>
Reference-contexts: It must also allow the administrator to control the flow of information out of the system to support autonomy and security. 3.1 Prior work Several of these problems have been investigated by other researchers. The FTP protocol family (see <ref> [35, 40, 29, 11] </ref>) provides mechanisms to move files and programs. Efficient implementations of revocation might use checkpointing and process migration mechanisms, such as those as in Emerald [24], Amoeba [30], Sprite [31], Dune [36], Charlotte [1], or the V System [44].
Reference: [12] <author> Andreas Drexl. </author> <title> Job-Prozessor-Scheduling fur heterogene Computernet-zwerke (Job-Processor Scheduling for Heterogeneous Computer Networks). </title> <journal> Wirtschaftsinformatik, </journal> <volume> 31(4) </volume> <pages> 345-351, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: The flexibility of our mechanism allows us to tailor the vector to other applications. To determine what information should be passed in the vector, we surveyed the existing research and noted the classes of information used for scheduling algorithms (including Sarkar [37], Lo [27, 28], Stone [42], Drexl <ref> [12] </ref>, and Hochbaum and Shmoys [22]). Surprisingly, very few of the current scheduling algorithms use any information beyond processor speed. Of the surveyed papers, 50% used the processor speed as input to their algorithms, while only 7% considered the communications structure of the system.
Reference: [13] <author> Brent F. Dubach, Robert M. Rutherford, and Charles M. Shub. </author> <title> Process-Originated Migration in a Heterogeneous Environment. </title> <booktitle> In Proceedings of the Computer Science Conference. ACM, </booktitle> <year> 1989. </year>
Reference-contexts: These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick [15], and Shub, et al. <ref> [13, 39] </ref>) have devised architecture-independent task representations. XDR [23] and ASN.1 [16, 17] specify machine-independent data formats. <p> We must move a process from one machine to another, but because of C-autonomy, we may not know the architecture of the recipient machine. Therefore, advance translation of the program image might be impossible. Essick [15] and Shub, et al. <ref> [13, 39] </ref> have examined the problem of compiling programs for multiple architectures, but their solutions are of limited applicability to the problem. An ideal solution would be an analog of xdr for programs.
Reference: [14] <author> F. Eliassen and J. Veijalainen. </author> <title> Language Support for Multidatabase Transactions in a Cooperative, Autonomous Environment. </title> <booktitle> In TENCON '87, </booktitle> <pages> pages 277-281, </pages> <address> Seoul, </address> <year> 1987. </year> <booktitle> IEEE Regional Conference. </booktitle>
Reference-contexts: In prior work, Garcia-Molina and Kogan [19], and Eliassen and Veijalainen <ref> [14] </ref> examined autonomy in distributed systems and devised taxonomies for its different types. The Eliassen and Veijalainen scheme is more general than Garcia-Molina, but is not as detailed. We combined the two schemes and tailored the category descriptions to our application of distributed scheduling.
Reference: [15] <author> R. B. Essick IV. </author> <title> The Cross-Architecture Procedure Call. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1987. </year> <title> Report No. UIUCDCS-R-87-1340, Architecture independent task representation. </title>
Reference-contexts: Efficient implementations of revocation might use checkpointing and process migration mechanisms, such as those as in Emerald [24], Amoeba [30], Sprite [31], Dune [36], Charlotte [1], or the V System [44]. These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick <ref> [15] </ref>, and Shub, et al. [13, 39]) have devised architecture-independent task representations. XDR [23] and ASN.1 [16, 17] specify machine-independent data formats. <p> The combination of E-autonomy and heterogeneity poses another problem for migration. We must move a process from one machine to another, but because of C-autonomy, we may not know the architecture of the recipient machine. Therefore, advance translation of the program image might be impossible. Essick <ref> [15] </ref> and Shub, et al. [13, 39] have examined the problem of compiling programs for multiple architectures, but their solutions are of limited applicability to the problem. An ideal solution would be an analog of xdr for programs.
Reference: [16] <author> International Organization for Standardization. </author> <title> Information processing systems | open systems interconnection | specification of basic specification of abstract syntax notation one (asn.1). International Standard number 8824, ISO, </title> <month> May </month> <year> 1987. </year>
Reference-contexts: These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick [15], and Shub, et al. [13, 39]) have devised architecture-independent task representations. XDR [23] and ASN.1 <ref> [16, 17] </ref> specify machine-independent data formats. The User Datagram Protocol [34] and Reliable Datagram Protocol [45, 32] protocols from the DARPA TCP/IP protocol suite are message-based protocols, and could form the basis for our information exchange prototols. 3.2 New research The remaining components constitute our research.
Reference: [17] <author> International Organization for Standardization. </author> <title> Information processing systems | open systems interconnection | specification of basic encoding rules for abstract syntax notation one (asn.1). International Standard number 8825, ISO, </title> <month> May </month> <year> 1987. </year>
Reference-contexts: These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick [15], and Shub, et al. [13, 39]) have devised architecture-independent task representations. XDR [23] and ASN.1 <ref> [16, 17] </ref> specify machine-independent data formats. The User Datagram Protocol [34] and Reliable Datagram Protocol [45, 32] protocols from the DARPA TCP/IP protocol suite are message-based protocols, and could form the basis for our information exchange prototols. 3.2 New research The remaining components constitute our research.
Reference: [18] <author> Christopher A. Gantz, Robert D. Silverman, and Sidney J. Stuart. </author> <title> A Distributed Batching System for Parallel Processing. </title> <journal> Software-Practice and Experience, </journal> <year> 1989. </year>
Reference-contexts: 1 Introduction In a typical research environment, there is a large investment in computing equipment, typically dozens or hundreds of workstations. Studies have shown that this equipment is usually underutilized (see Gantz, et al. <ref> [18] </ref> and Litzkow [26]). Users of this equipment often find that their local resources are not sufficient to execute large programs, while the combined resources of several machines might solve the problem at hand. <p> There are many examples of systems that share some of these qualities. Shared-memory parallel processors such as the Sequent Symmetry [38] are homogeneous, tightly-coupled systems. Homogeneous groups of workstations that communicate over a network are described by Babin [2], Gantz, et al. <ref> [18] </ref>, and Litzkow [26], among others. Stumm describes a heterogeneous, distributed system of workstations in [43]. None of these systems support autonomy. Our definition of a task is a request for resources.
Reference: [19] <author> Hector Garcia-Molina and Boris Kogan. </author> <title> Node Autonomy in Distributed Systems. </title> <booktitle> In ACM International Symposium on Databases in Parallel and Distributed Systems, </booktitle> <pages> pages 158-166, </pages> <address> Austin, TX, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: In prior work, Garcia-Molina and Kogan <ref> [19] </ref>, and Eliassen and Veijalainen [14] examined autonomy in distributed systems and devised taxonomies for its different types. The Eliassen and Veijalainen scheme is more general than Garcia-Molina, but is not as detailed. We combined the two schemes and tailored the category descriptions to our application of distributed scheduling.
Reference: [20] <author> Simson Garfinkel and Eugene Spafford. </author> <title> Practical Unix Security. </title> <publisher> O'Reilly and Associates, </publisher> <year> 1991. </year> <note> ISBN 0-937175-72-2. </note>
Reference-contexts: Proxy transfer is used when the destination is inside an autonomous system that prohibits an outside system from directly accessing its members. In this case, the task is delivered to the encapsulating autonomous system, which is then responsible for forwarding the task to its destination. Garfinkel and Spafford <ref> [20] </ref> define this type of behavior as a firewall. Cheswick discusses the the construction of a secure packet router embodying the firewall concept in [8]. 5.4 The extension mechanism It would be impossible to predefine the complete set of characteristics used by all present and future scheduling algorithms.
Reference: [21] <author> Leo Geurts, Lambert Meertens, and Steven Pemberton. </author> <title> ABC Programmer's Handbook. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year> <note> ISBN 0-13-000027-2. </note>
Reference-contexts: Our sets can have duplicate items, which are known as bags or multisets (such as in the programming language ABC <ref> [21] </ref>). For example, fa; bg ] fa; cg = fa; a; b; cg We use the ] operator to coalesce our representation of two SDVs into one. We use multisets because there can be duplicate machines within an autonomous system.
Reference: [22] <author> Dorit Hochbaum and David Shmoys. </author> <title> A Polynomial Approximation Scheme for Scheduling on Uniform Processors: Using the Dual Approximation Approach. </title> <journal> SIAM Journal of Computing, </journal> <volume> 17(3) </volume> <pages> 539-551, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: To determine what information should be passed in the vector, we surveyed the existing research and noted the classes of information used for scheduling algorithms (including Sarkar [37], Lo [27, 28], Stone [42], Drexl [12], and Hochbaum and Shmoys <ref> [22] </ref>). Surprisingly, very few of the current scheduling algorithms use any information beyond processor speed. Of the surveyed papers, 50% used the processor speed as input to their algorithms, while only 7% considered the communications structure of the system.
Reference: [23] <author> Sun Microsystems Inc. XDR: </author> <title> External Data Representation Standard, </title> <month> June </month> <year> 1987. </year> <note> RFC 1014. </note>
Reference-contexts: These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick [15], and Shub, et al. [13, 39]) have devised architecture-independent task representations. XDR <ref> [23] </ref> and ASN.1 [16, 17] specify machine-independent data formats. The User Datagram Protocol [34] and Reliable Datagram Protocol [45, 32] protocols from the DARPA TCP/IP protocol suite are message-based protocols, and could form the basis for our information exchange prototols. 3.2 New research The remaining components constitute our research. <p> Because the individual processors within the system can have different architectures (different data representations, machine instructions, execution speed, etc.), values passed between machines must use a standard external data representation, such as xdr <ref> [23] </ref>. A program compiled for one architecture cannot be directly executed on a machine of a different architecture. 5 The Architectural Model We intend to build our autonomous systems in a hierarchical fashion, which is a model often used in the real world.
Reference: [24] <author> Eric Jul, Henry Levy, Norman Hutchinson, and Andrew Black. </author> <title> Fine-Grained Mobility in the Emerald System. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: The FTP protocol family (see [35, 40, 29, 11]) provides mechanisms to move files and programs. Efficient implementations of revocation might use checkpointing and process migration mechanisms, such as those as in Emerald <ref> [24] </ref>, Amoeba [30], Sprite [31], Dune [36], Charlotte [1], or the V System [44]. These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick [15], and Shub, et al. [13, 39]) have devised architecture-independent task representations.
Reference: [25] <author> Leslie Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: A small amount of C-autonomy is lost when the system conforms to the generality guidelines, because the format of its transmitted data is defined externally. 4.3 Distribution considerations The distributed and autonomous nature of the system preclude global sharing of information. Lamport, in <ref> [25] </ref>, showed that information in a distributed system will always be out of date. Thus, there will always be some latency involved in the information reporting.
Reference: [26] <author> Michael J. Litzkow. </author> <title> Remote Unix: Turning Idle Workstations Into Cycle Servers. </title> <booktitle> In USENIX Summer Conference, </booktitle> <pages> pages 381-384, </pages> <address> 2560 Ninth Street, Suit 215, Berkeley, CA 94710, 1987. </address> <publisher> USENIX Association. </publisher>
Reference-contexts: 1 Introduction In a typical research environment, there is a large investment in computing equipment, typically dozens or hundreds of workstations. Studies have shown that this equipment is usually underutilized (see Gantz, et al. [18] and Litzkow <ref> [26] </ref>). Users of this equipment often find that their local resources are not sufficient to execute large programs, while the combined resources of several machines might solve the problem at hand. <p> There are many examples of systems that share some of these qualities. Shared-memory parallel processors such as the Sequent Symmetry [38] are homogeneous, tightly-coupled systems. Homogeneous groups of workstations that communicate over a network are described by Babin [2], Gantz, et al. [18], and Litzkow <ref> [26] </ref>, among others. Stumm describes a heterogeneous, distributed system of workstations in [43]. None of these systems support autonomy. Our definition of a task is a request for resources.
Reference: [27] <author> Virginia Mary Lo. </author> <title> Task Assignment to Minimize Completion Time. </title> <booktitle> In Distributed Computing Systems, </booktitle> <pages> pages 329-336. </pages> <publisher> IEEE, </publisher> <year> 1985. </year>
Reference-contexts: The flexibility of our mechanism allows us to tailor the vector to other applications. To determine what information should be passed in the vector, we surveyed the existing research and noted the classes of information used for scheduling algorithms (including Sarkar [37], Lo <ref> [27, 28] </ref>, Stone [42], Drexl [12], and Hochbaum and Shmoys [22]). Surprisingly, very few of the current scheduling algorithms use any information beyond processor speed. Of the surveyed papers, 50% used the processor speed as input to their algorithms, while only 7% considered the communications structure of the system.
Reference: [28] <author> Virginia Mary Lo. </author> <title> Heuristic Algorithms for Task Assignment in Distributed Systems. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 37(11) </volume> <pages> 1384-1397, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: Our work concentrates on facilities for the former. Many researchers have studied the problem of task placement in distributed systems, including Sarkar [37], Lo <ref> [28] </ref>, Stone [42], and Blake [4]; however, their algorithms have assumed that all processors are similar, that perfect information describing the system and tasks is instantaneously available, or that they have total control of all processors in the system. <p> The flexibility of our mechanism allows us to tailor the vector to other applications. To determine what information should be passed in the vector, we surveyed the existing research and noted the classes of information used for scheduling algorithms (including Sarkar [37], Lo <ref> [27, 28] </ref>, Stone [42], Drexl [12], and Hochbaum and Shmoys [22]). Surprisingly, very few of the current scheduling algorithms use any information beyond processor speed. Of the surveyed papers, 50% used the processor speed as input to their algorithms, while only 7% considered the communications structure of the system.
Reference: [29] <author> M. Lottor. </author> <title> Simple file transfer protocol. </title> <type> RFC 913, </type> <institution> Network Information Center, </institution> <month> September </month> <year> 1984. </year>
Reference-contexts: It must also allow the administrator to control the flow of information out of the system to support autonomy and security. 3.1 Prior work Several of these problems have been investigated by other researchers. The FTP protocol family (see <ref> [35, 40, 29, 11] </ref>) provides mechanisms to move files and programs. Efficient implementations of revocation might use checkpointing and process migration mechanisms, such as those as in Emerald [24], Amoeba [30], Sprite [31], Dune [36], Charlotte [1], or the V System [44].
Reference: [30] <author> Sape J. Mullender. </author> <title> Process Management in a Distributed Operating System. </title> <editor> In J. Nehmer, editor, </editor> <booktitle> Experiences with Distributed Systems, </booktitle> <pages> pages 38-51. </pages> <publisher> Springer-Verlag, </publisher> <year> 1987. </year>
Reference-contexts: The FTP protocol family (see [35, 40, 29, 11]) provides mechanisms to move files and programs. Efficient implementations of revocation might use checkpointing and process migration mechanisms, such as those as in Emerald [24], Amoeba <ref> [30] </ref>, Sprite [31], Dune [36], Charlotte [1], or the V System [44]. These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick [15], and Shub, et al. [13, 39]) have devised architecture-independent task representations. XDR [23] and ASN.1 [16, 17] specify machine-independent data formats.
Reference: [31] <author> J. K. Ousterhout, A. R. Cherenson, F. Douglis, M. N. Nelson, and B. B. Welch. </author> <title> The Sprite Network Operating System. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 23-36, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: The FTP protocol family (see [35, 40, 29, 11]) provides mechanisms to move files and programs. Efficient implementations of revocation might use checkpointing and process migration mechanisms, such as those as in Emerald [24], Amoeba [30], Sprite <ref> [31] </ref>, Dune [36], Charlotte [1], or the V System [44]. These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick [15], and Shub, et al. [13, 39]) have devised architecture-independent task representations. XDR [23] and ASN.1 [16, 17] specify machine-independent data formats.
Reference: [32] <author> C. Partridge and R. Hinden. </author> <title> Version 2 of the Reliable Data Protocol (RDP). </title> <type> RFC 1151, </type> <institution> Network Information Center, </institution> <month> April </month> <year> 1990. </year> <month> 29 </month>
Reference-contexts: These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick [15], and Shub, et al. [13, 39]) have devised architecture-independent task representations. XDR [23] and ASN.1 [16, 17] specify machine-independent data formats. The User Datagram Protocol [34] and Reliable Datagram Protocol <ref> [45, 32] </ref> protocols from the DARPA TCP/IP protocol suite are message-based protocols, and could form the basis for our information exchange prototols. 3.2 New research The remaining components constitute our research. <p> Updates from siblings are passed to the task placement module, but are not incorporated into the system vector. 14 5.3.2 The control channel The control channel is intended to be a bidirectional, reliable, message-based channel, such as described by Hinden, et al., in the Reliable Datagram Protocol description <ref> [32, 45] </ref>. A control message consists of a header, including an ID number for the message and a message type, and data that depends on the type of the message.
Reference: [33] <author> Larry Peterson. </author> <title> The Profile Naming Service. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(4) </volume> <pages> 341-364, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: The scheduling module evaluates the predicate, and makes a decision based on its boolean-valued result. Our extension mechanism is similar in concept to the attribute-based descriptions of the Profile <ref> [33] </ref> and Univers [6] systems developed at the University of Arizona. We have simplified and tailored the concept to our more limited purposes. The messiahs extension mechanism has two basic variable types: strings and integers.
Reference: [34] <author> J.B. Postel. </author> <title> File transfer protocol. </title> <type> RFC 768, </type> <institution> Network Information Center, </institution> <month> August </month> <year> 1980. </year>
Reference-contexts: These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick [15], and Shub, et al. [13, 39]) have devised architecture-independent task representations. XDR [23] and ASN.1 [16, 17] specify machine-independent data formats. The User Datagram Protocol <ref> [34] </ref> and Reliable Datagram Protocol [45, 32] protocols from the DARPA TCP/IP protocol suite are message-based protocols, and could form the basis for our information exchange prototols. 3.2 New research The remaining components constitute our research.
Reference: [35] <author> J.B. Postel and J.K. Reynolds. </author> <title> File transfer protocol. </title> <type> RFC 959, </type> <institution> Network Information Center, </institution> <month> October </month> <year> 1985. </year>
Reference-contexts: It must also allow the administrator to control the flow of information out of the system to support autonomy and security. 3.1 Prior work Several of these problems have been investigated by other researchers. The FTP protocol family (see <ref> [35, 40, 29, 11] </ref>) provides mechanisms to move files and programs. Efficient implementations of revocation might use checkpointing and process migration mechanisms, such as those as in Emerald [24], Amoeba [30], Sprite [31], Dune [36], Charlotte [1], or the V System [44].
Reference: [36] <author> Mark F. Pucci. </author> <title> Design Considerations for Process Migration and Automatic Load Balancing. </title> <type> Technical report, </type> <institution> Bell Communications Research, </institution> <year> 1988. </year>
Reference-contexts: The FTP protocol family (see [35, 40, 29, 11]) provides mechanisms to move files and programs. Efficient implementations of revocation might use checkpointing and process migration mechanisms, such as those as in Emerald [24], Amoeba [30], Sprite [31], Dune <ref> [36] </ref>, Charlotte [1], or the V System [44]. These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick [15], and Shub, et al. [13, 39]) have devised architecture-independent task representations. XDR [23] and ASN.1 [16, 17] specify machine-independent data formats.
Reference: [37] <author> Vivek Sarkar. </author> <title> Partitioning and Scheduling Parallel Programs for Multiprocessors. </title> <publisher> The MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: Our work concentrates on facilities for the former. Many researchers have studied the problem of task placement in distributed systems, including Sarkar <ref> [37] </ref>, Lo [28], Stone [42], and Blake [4]; however, their algorithms have assumed that all processors are similar, that perfect information describing the system and tasks is instantaneously available, or that they have total control of all processors in the system. <p> The flexibility of our mechanism allows us to tailor the vector to other applications. To determine what information should be passed in the vector, we surveyed the existing research and noted the classes of information used for scheduling algorithms (including Sarkar <ref> [37] </ref>, Lo [27, 28], Stone [42], Drexl [12], and Hochbaum and Shmoys [22]). Surprisingly, very few of the current scheduling algorithms use any information beyond processor speed.
Reference: [38] <author> Sequent. </author> <title> Sequent hardware manuals. </title>
Reference-contexts: Such systems are often called multicomputers (as defined by Spafford in [41]) or loosely-coupled systems, as opposed to tightly-coupled parallel machines that communicate through shared memory. There are many examples of systems that share some of these qualities. Shared-memory parallel processors such as the Sequent Symmetry <ref> [38] </ref> are homogeneous, tightly-coupled systems. Homogeneous groups of workstations that communicate over a network are described by Babin [2], Gantz, et al. [18], and Litzkow [26], among others. Stumm describes a heterogeneous, distributed system of workstations in [43]. None of these systems support autonomy.
Reference: [39] <author> Charles M. Shub. </author> <title> Native Code Process-Originated Migration in a Heterogeneous Environment. </title> <booktitle> In Proceedings of the Computer Science Conference. ACM, </booktitle> <year> 1990. </year>
Reference-contexts: These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick [15], and Shub, et al. <ref> [13, 39] </ref>) have devised architecture-independent task representations. XDR [23] and ASN.1 [16, 17] specify machine-independent data formats. <p> We must move a process from one machine to another, but because of C-autonomy, we may not know the architecture of the recipient machine. Therefore, advance translation of the program image might be impossible. Essick [15] and Shub, et al. <ref> [13, 39] </ref> have examined the problem of compiling programs for multiple architectures, but their solutions are of limited applicability to the problem. An ideal solution would be an analog of xdr for programs.
Reference: [40] <author> K. Sollins. </author> <title> The TFTP protocol (revision 2). </title> <type> RFC 1350, </type> <institution> Network Information Center, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: It must also allow the administrator to control the flow of information out of the system to support autonomy and security. 3.1 Prior work Several of these problems have been investigated by other researchers. The FTP protocol family (see <ref> [35, 40, 29, 11] </ref>) provides mechanisms to move files and programs. Efficient implementations of revocation might use checkpointing and process migration mechanisms, such as those as in Emerald [24], Amoeba [30], Sprite [31], Dune [36], Charlotte [1], or the V System [44].
Reference: [41] <author> Eugene H. Spafford. </author> <title> Kernel Structures for a Distributed Operating System. </title> <type> PhD thesis, </type> <institution> Georgia Institute of Technology, </institution> <year> 1986. </year>
Reference-contexts: If the program is restricted to using only one architecture within the distributed system, it will suffer needless delay. Distributed systems communicate by passing messages over an external communications channel. Such systems are often called multicomputers (as defined by Spafford in <ref> [41] </ref>) or loosely-coupled systems, as opposed to tightly-coupled parallel machines that communicate through shared memory. There are many examples of systems that share some of these qualities. Shared-memory parallel processors such as the Sequent Symmetry [38] are homogeneous, tightly-coupled systems.
Reference: [42] <author> Harold S. Stone. </author> <title> Multiprocessor Scheduling with the Aid of Network Flow Algorithms. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-3(1):85-93, </volume> <month> January </month> <year> 1977. </year>
Reference-contexts: Our work concentrates on facilities for the former. Many researchers have studied the problem of task placement in distributed systems, including Sarkar [37], Lo [28], Stone <ref> [42] </ref>, and Blake [4]; however, their algorithms have assumed that all processors are similar, that perfect information describing the system and tasks is instantaneously available, or that they have total control of all processors in the system. <p> The flexibility of our mechanism allows us to tailor the vector to other applications. To determine what information should be passed in the vector, we surveyed the existing research and noted the classes of information used for scheduling algorithms (including Sarkar [37], Lo [27, 28], Stone <ref> [42] </ref>, Drexl [12], and Hochbaum and Shmoys [22]). Surprisingly, very few of the current scheduling algorithms use any information beyond processor speed. Of the surveyed papers, 50% used the processor speed as input to their algorithms, while only 7% considered the communications structure of the system.
Reference: [43] <author> M. Stumm. </author> <title> The Design and Implementation of a Decentralized Scheduling Facility for a Workstation Cluster. </title> <booktitle> In Proceedings of the 2nd IEEE Conference on Computer Workstations, </booktitle> <pages> pages 12-22. </pages> <publisher> IEEE, </publisher> <month> March </month> <year> 1988. </year>
Reference-contexts: Shared-memory parallel processors such as the Sequent Symmetry [38] are homogeneous, tightly-coupled systems. Homogeneous groups of workstations that communicate over a network are described by Babin [2], Gantz, et al. [18], and Litzkow [26], among others. Stumm describes a heterogeneous, distributed system of workstations in <ref> [43] </ref>. None of these systems support autonomy. Our definition of a task is a request for resources. This includes the conventional model of a computationally intensive unit in a larger program, as well as a set of database queries (see Carey, et al. [7]), output requests, etc.
Reference: [44] <author> M. M. Theimer, K. A. Lantz, and D. R. Cheriton. </author> <title> Preemptable Remote Execution Facilities for the V-System. </title> <booktitle> In Proceedings of the Tenth Symposium on Operating Systems Principles, </booktitle> <pages> pages 2-12, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: The FTP protocol family (see [35, 40, 29, 11]) provides mechanisms to move files and programs. Efficient implementations of revocation might use checkpointing and process migration mechanisms, such as those as in Emerald [24], Amoeba [30], Sprite [31], Dune [36], Charlotte [1], or the V System <ref> [44] </ref>. These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick [15], and Shub, et al. [13, 39]) have devised architecture-independent task representations. XDR [23] and ASN.1 [16, 17] specify machine-independent data formats.
Reference: [45] <author> David Velten, Robert Hinden, and Jack Sax. </author> <title> Reliable Data Protocol. </title> <type> RFC 908, </type> <institution> Network Information Center, </institution> <month> July </month> <year> 1984. </year>
Reference-contexts: These mechanisms can also be used in developing fault tolerance and load balancing schemes. Essick [15], and Shub, et al. [13, 39]) have devised architecture-independent task representations. XDR [23] and ASN.1 [16, 17] specify machine-independent data formats. The User Datagram Protocol [34] and Reliable Datagram Protocol <ref> [45, 32] </ref> protocols from the DARPA TCP/IP protocol suite are message-based protocols, and could form the basis for our information exchange prototols. 3.2 New research The remaining components constitute our research. <p> Updates from siblings are passed to the task placement module, but are not incorporated into the system vector. 14 5.3.2 The control channel The control channel is intended to be a bidirectional, reliable, message-based channel, such as described by Hinden, et al., in the Reliable Datagram Protocol description <ref> [32, 45] </ref>. A control message consists of a header, including an ID number for the message and a message type, and data that depends on the type of the message.
Reference: [46] <author> Larry Wall and Randal L. Schwarz. </author> <title> Programming perl. Nutshell Handbook. </title> <publisher> O'Reilly & Associates, </publisher> <year> 1990. </year> <note> ISBN 0-937175-64-1. 30 </note>
Reference-contexts: Within the predicate, variable names begin with the character $. For example, if the user defined a value of (cpu, sparc) for a system, then a predicate might be ($avail mem &gt;= 4000000) and ($cpu eq "sparc"). 4 This syntax is similar to that used in the perl language <ref> [46] </ref>. The mechanism is the same for extending both task and system description vectors, but the interpretation of the fields is different. The fields describe the requirements of a task or the capabilities of a system.
References-found: 46

