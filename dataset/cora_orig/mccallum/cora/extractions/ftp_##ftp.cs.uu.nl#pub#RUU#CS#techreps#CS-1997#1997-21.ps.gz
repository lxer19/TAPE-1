URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1997/1997-21.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: hansb@cs.ruu.nl  e-mail: deFluiter@cqm.nl  
Title: Parallel Algorithms for Series Parallel Graphs  
Author: Hans L. Bodlaender Babette de Fluiter 
Address: P.O. Box 80.089, 3508 TB Utrecht, the Netherlands  P.O. Box 414, 5600 AK Eindhoven, the Netherlands  
Affiliation: Department of Computer Science, Utrecht University  Centre for Quantitative Methods  
Abstract: In this paper, a parallel algorithm is given that, given a graph G = (V;E), decides whether G is a series parallel graph, and if so, builds a decomposition tree for G of series and parallel composition rules. The algorithm uses O(logjEjlog fl jEj) time and O(jEj) operations on an EREW PRAM, and O(log jEj) time and O(jEj) operations on a CRCW PRAM. With the same time and processor resources, a tree-decomposition of width at most two can be built of a given series parallel graph, and hence very efficient parallel algorithms can be found for a large number of graph problems on series parallel graphs. These include many well-known problems like all problems that can be stated in monadic second order logic. The results hold for undirected series parallel graphs as well as for directed series parallel graphs.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arnborg, B. Courcelle, A. Proskurowski, and D. Seese. </author> <title> An algebraic theory of graph reduction. </title> <journal> J. ACM, </journal> <volume> 40:11341164, </volume> <year> 1993. </year>
Reference-contexts: in this paper do not carry large constant factors and are probably efficient enough for a practical setting (although a more detailed analysis can probably bring the constant factor further down.) A central technique in this paper is graph reduction, introduced in a setting of graphs of bounded treewidth in <ref> [1] </ref>. In [4] and [5], it is shown how the technique can be used to obtain parallel algorithms for graphs of bounded treewidth.
Reference: [2] <author> S. Arnborg, J. Lagergren, and D. Seese. </author> <title> Easy problems for tree-decomposable graphs. </title> <editor> J. </editor> <booktitle> Algorithms, </booktitle> <address> 12:308340, </address> <year> 1991. </year>
Reference-contexts: A large number of interesting and important graph problems can be dealt in this way, including CHROMATIC NUMBER, MAX IMUM CLIQUE, MAXIMUM INDEPENDENT SET, HAMILTONIAN CIRCUIT, STEINER TREE, LONGEST PATH, etc. See <ref> [2, 7, 5] </ref>. Since series parallel graphs have treewidth at most two, we can solve these problems efficiently on series parallel graphs, if a tree decomposition of small width is given.
Reference: [3] <author> M. W. Bern, E. L. Lawler, and A. L. Wong. </author> <title> Linear time computation of optimal subgraphs of decomposable graphs. </title> <editor> J. </editor> <booktitle> Algorithms, </booktitle> <address> 8:216235, </address> <year> 1987. </year>
Reference-contexts: Also, it is known that when a `decomposition tree' for a series parallel graph is given, then many problems can be solved in linear time, including many problems that are NP-hard for arbitrary graphs <ref> [3, 6, 13, 14] </ref>; Valdes et al. also show how to obtain such a decomposition tree in linear time. (In this paper, we assume a specific form of the decomposition tree, and use the term sp-tree for this type of decomposition tree.) fl This research was carried out while the second
Reference: [4] <author> H. L. Bodlaender and B. de Fluiter. </author> <title> Reduction algorithms for constructing solutions in graphs with small treewidth. </title> <editor> In J.-Y. Cai and C. K. Wong, editors, </editor> <booktitle> Proceedings 2nd Annual International Conference on Computing and Combinatorics, COCOON'96, pages 199208. Springer Verlag, Lecture Notes in Computer Science, </booktitle> <volume> vol. 1090, </volume> <year> 1996. </year> <month> 24 </month>
Reference-contexts: It is well-known that series parallel graphs have treewidth at most two. We will use this fact in one of our proofs. Moreover, several of our results were inspired by techniques, established for graphs of bounded treewidth, especially those from <ref> [4] </ref> and [5]. <p> In <ref> [4] </ref> and [5], it is shown how the technique can be used to obtain parallel algorithms for graphs of bounded treewidth. Another technique that is used in this paper is the bounded adjacency list search technique, taken from [5], and adapted here to the setting of series parallel graphs. <p> The algorithm is a constructive reduction algorithm, which consists of two phases: the first phase is the reduction phase, the second phase is the construction phase. The algorithm is based on results presented in <ref> [4, 5] </ref>. It uses a set R of reduction rules which we define later. The two phases work as follows, given a source-sink labeled graph (G; s;t). Phase 1. The first phase consists of a number of reduction rounds which are executed subsequently. <p> We briefly describe how s and t can be found such that they satisfy conditions 2a and 2b of Lemma 5.1. Therefore, we apply a result of <ref> [4] </ref>, which says that any graph problem which can be defined in monadic second order logic for graphs, can be solved on graphs of bounded treewidth in time O (log n log fl n) with O (n) operations on an EREW PRAM, and in O (log n) time with O (n) <p> Hence, it is possible (using techniques of <ref> [5, 4] </ref>) to find s and t in O (log m log fl m) time, with O (m) operations and space on an EREW PRAM, and in O (log m) time, and O (m) operations and space on a CRCW PRAM.
Reference: [5] <author> H. L. Bodlaender and T. Hagerup. </author> <title> Parallel algorithms with optimal speedup for bounded treewidth. </title> <editor> In Z. F ul op and F. Gecseg, editors, </editor> <booktitle> Proceedings 22nd International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 268279, </pages> <address> Berlin, </address> <year> 1995. </year> <note> Springer-Verlag, Lecture Notes in Computer Science 944. </note>
Reference-contexts: It is well-known that series parallel graphs have treewidth at most two. We will use this fact in one of our proofs. Moreover, several of our results were inspired by techniques, established for graphs of bounded treewidth, especially those from [4] and <ref> [5] </ref>. As a side remark we note that, while the algorithms in [5] are carrying constant factors that make them impractical in their stated form, the algorithms in this paper do not carry large constant factors and are probably efficient enough for a practical setting (although a more detailed analysis can <p> We will use this fact in one of our proofs. Moreover, several of our results were inspired by techniques, established for graphs of bounded treewidth, especially those from [4] and <ref> [5] </ref>. As a side remark we note that, while the algorithms in [5] are carrying constant factors that make them impractical in their stated form, the algorithms in this paper do not carry large constant factors and are probably efficient enough for a practical setting (although a more detailed analysis can probably bring the constant factor further down.) A central technique in this <p> In [4] and <ref> [5] </ref>, it is shown how the technique can be used to obtain parallel algorithms for graphs of bounded treewidth. Another technique that is used in this paper is the bounded adjacency list search technique, taken from [5], and adapted here to the setting of series parallel graphs. <p> In [4] and <ref> [5] </ref>, it is shown how the technique can be used to obtain parallel algorithms for graphs of bounded treewidth. Another technique that is used in this paper is the bounded adjacency list search technique, taken from [5], and adapted here to the setting of series parallel graphs. This paper is organized further as follows. In Sections 2 and 3 we give some basic definitions and preliminary results. In Section 4 we give an algorithm for recognizing undirected series parallel graphs with given source and sink. <p> The algorithm is a constructive reduction algorithm, which consists of two phases: the first phase is the reduction phase, the second phase is the construction phase. The algorithm is based on results presented in <ref> [4, 5] </ref>. It uses a set R of reduction rules which we define later. The two phases work as follows, given a source-sink labeled graph (G; s;t). Phase 1. The first phase consists of a number of reduction rounds which are executed subsequently. <p> In the second step, a subset of non-interfering reductions of all found reductions must be found. This set must be large, i.e. it must have size at least kjE (G)j for some k &gt; 0. This is solved in the same way as in <ref> [5] </ref>: a `conflict graph' is built; one can note that this conflict graph has bounded degree, and a large independent set in the conflict graph is then found (see [5] for more details). Finally, the set of selected reductions is carried out. <p> This is solved in the same way as in <ref> [5] </ref>: a `conflict graph' is built; one can note that this conflict graph has bounded degree, and a large independent set in the conflict graph is then found (see [5] for more details). Finally, the set of selected reductions is carried out. Each reduction can be carried out in O (1) time by a single processor. <p> By using the same approach as in <ref> [5] </ref>, we can carry out all reductions in O (log m log fl m) time with O (m) operations and O (m) space on an EREW PRAM, and with O (log m) time and O (m) operations and O (m) space on a CRCW PRAM. Phase 2. <p> Hence, it is possible (using techniques of <ref> [5, 4] </ref>) to find s and t in O (log m log fl m) time, with O (m) operations and space on an EREW PRAM, and in O (log m) time, and O (m) operations and space on a CRCW PRAM. <p> A large number of interesting and important graph problems can be dealt in this way, including CHROMATIC NUMBER, MAX IMUM CLIQUE, MAXIMUM INDEPENDENT SET, HAMILTONIAN CIRCUIT, STEINER TREE, LONGEST PATH, etc. See <ref> [2, 7, 5] </ref>. Since series parallel graphs have treewidth at most two, we can solve these problems efficiently on series parallel graphs, if a tree decomposition of small width is given.
Reference: [6] <author> R. B. Borie, R. G. Parker, and C. A. Tovey. </author> <title> Automatic generation of linear-time algorithms from predicate calculus descriptions of problems on recursively constructed graph families. </title> <journal> Algorithmica, </journal> <volume> 7:555581, </volume> <year> 1992. </year>
Reference-contexts: Also, it is known that when a `decomposition tree' for a series parallel graph is given, then many problems can be solved in linear time, including many problems that are NP-hard for arbitrary graphs <ref> [3, 6, 13, 14] </ref>; Valdes et al. also show how to obtain such a decomposition tree in linear time. (In this paper, we assume a specific form of the decomposition tree, and use the term sp-tree for this type of decomposition tree.) fl This research was carried out while the second <p> can be seen that the characterization of s and t as given in Lemma 5.1 can be translated to a characterization of s and t in the modified, simple graph G 0 , and this characterization can be formulated in monadic second order logic for graphs (using techniques from e.g., <ref> [6] </ref>). Hence, it is possible (using techniques of [5, 4]) to find s and t in O (log m log fl m) time, with O (m) operations and space on an EREW PRAM, and in O (log m) time, and O (m) operations and space on a CRCW PRAM.
Reference: [7] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs I: Recognizable sets of finite graphs. Information and Computation, </title> <address> 85:1275, </address> <year> 1990. </year>
Reference-contexts: A large number of interesting and important graph problems can be dealt in this way, including CHROMATIC NUMBER, MAX IMUM CLIQUE, MAXIMUM INDEPENDENT SET, HAMILTONIAN CIRCUIT, STEINER TREE, LONGEST PATH, etc. See <ref> [2, 7, 5] </ref>. Since series parallel graphs have treewidth at most two, we can solve these problems efficiently on series parallel graphs, if a tree decomposition of small width is given.
Reference: [8] <author> B. de Fluiter. </author> <title> Algorithms for Graphs of Small Treewidth. </title> <type> PhD thesis, </type> <institution> Utrecht University, </institution> <year> 1997. </year>
Reference-contexts: Claim 4.3. In a cycle-sequence of G that consists of 16 cycles, there is a match to one of the rules 3 18. Proof. We omit the full proof here: a long and tedious case analysis shows this fact. Full details are given in <ref> [8] </ref>. 2 In a sequence of 34 successive yellow and blue nodes in T , we can find one path of 33 successive yellow and blue nodes, such that the highest node in this path is a p-node.
Reference: [9] <author> R. J. Duffin. </author> <title> Topology of series-parallel graphs. </title> <journal> J. Math. Anal. Appl., </journal> <volume> 10:303318, </volume> <year> 1965. </year>
Reference-contexts: operations, and O (log m log fl m) time on a EREW PRAM, and O (log m) time on a CRCW PRAM: given a graph (G; s;t), determine whether it is series parallel, and if so, find a minimal or binary sp-tree. 4.1 A Safe Set of Reduction Rules Duffin <ref> [9] </ref> has shown that a graph (G; s;t) is series parallel if and only if any sequence of applications of the series and the parallel reduction rule eventually lead to the base series parallel graph (rules 1 and 2 in Figure 6). <p> Safeness of rules 1 and 2, expressed in the following lemma, follows similarly as in <ref> [9] </ref>. <p> We solve this problem by first computing a source and a sink and then solving the problem with this source and sink. He [11] and Eppstein [10] have shown (using results from Duffin <ref> [9] </ref>) that this problem reduces in a direct way to the problem with specified vertices, as the following result holds. Lemma 5.1 [11, 10]. Let G = (V; E) be a graph. If G is series parallel then the following holds. 1.
Reference: [10] <author> D. Eppstein. </author> <title> Parallel recognition of series parallel graphs. Information and Computation, </title> <address> 98:4155, </address> <year> 1992. </year>
Reference-contexts: In this paper, n denotes the number of vertices of the input graph; m the number of edges.) Their algorithm also returns a decomposition tree of the input graph, if it is series parallel. Eppstein <ref> [10] </ref> improved these results for simple graphs: his algorithms run in O (log n) time on a CRCW PRAM with O (m a (m; n)) operations (a (m; n) is the inverse of Ackermann's function, which is at most four for all practical purposes). <p> We solve this problem by first computing a source and a sink and then solving the problem with this source and sink. He [11] and Eppstein <ref> [10] </ref> have shown (using results from Duffin [9]) that this problem reduces in a direct way to the problem with specified vertices, as the following result holds. Lemma 5.1 [11, 10]. Let G = (V; E) be a graph. If G is series parallel then the following holds. 1. <p> He [11] and Eppstein [10] have shown (using results from Duffin [9]) that this problem reduces in a direct way to the problem with specified vertices, as the following result holds. Lemma 5.1 <ref> [11, 10] </ref>. Let G = (V; E) be a graph. If G is series parallel then the following holds. 1. <p> resulting algorithm will probably not be efficient, this result does not rely on non-constructive arguing. (We expect that a more straightforward approach, based on reduction, will also work here.) If the input graph is a source-sink labeled directed graph (G; s; t), then one can use the modification, described in <ref> [10] </ref>: solve the problem on the underlying undirected graph, then orient the edges with help of the minimal sp-tree (there is at most one possible orientation for which the directed graph is series parallel), and check if this orientation corresponds to the original graph.
Reference: [11] <author> X. </author> <title> He. An improved algorithm for the planar 3-cut problem. </title> <editor> J. </editor> <booktitle> Algorithms, </booktitle> <address> 12:2337, </address> <year> 1991. </year>
Reference-contexts: This research was partially supported by ESPRIT Long Term Research Project 20244 (project ALCOM IT: Algorithms and Complexity in Information Technology). 1 He and Yesha [12] and He <ref> [11] </ref> gave parallel algorithms for recognizing directed and undi--rected series parallel graphs in O (log 2 n + log m) time with O (n + m) processors on an EREW PRAM, and hence O ((n + m)(log 2 n + log m)) operations. (The number of operations of a parallel algorithm <p> First, suppose we are given a graph G, and want to determine whether G is series parallel with a proper choice of the source and sink. We solve this problem by first computing a source and a sink and then solving the problem with this source and sink. He <ref> [11] </ref> and Eppstein [10] have shown (using results from Duffin [9]) that this problem reduces in a direct way to the problem with specified vertices, as the following result holds. Lemma 5.1 [11, 10]. Let G = (V; E) be a graph. <p> He [11] and Eppstein [10] have shown (using results from Duffin [9]) that this problem reduces in a direct way to the problem with specified vertices, as the following result holds. Lemma 5.1 <ref> [11, 10] </ref>. Let G = (V; E) be a graph. If G is series parallel then the following holds. 1.
Reference: [12] <author> X. He and Y. Yesha. </author> <title> Parallel recognition and decomposition of two terminal series parallel graphs. Information and Computation, </title> <address> 75:1538, </address> <year> 1987. </year>
Reference-contexts: This research was partially supported by ESPRIT Long Term Research Project 20244 (project ALCOM IT: Algorithms and Complexity in Information Technology). 1 He and Yesha <ref> [12] </ref> and He [11] gave parallel algorithms for recognizing directed and undi--rected series parallel graphs in O (log 2 n + log m) time with O (n + m) processors on an EREW PRAM, and hence O ((n + m)(log 2 n + log m)) operations. (The number of operations of
Reference: [13] <author> T. Kikuno, N. Yoshida, and Y. Kakuda. </author> <title> A linear algorithm for the domination number of a series-parallel graph. </title> <journal> Disc. Appl. Math., </journal> <volume> 5:299311, </volume> <year> 1983. </year>
Reference-contexts: Also, it is known that when a `decomposition tree' for a series parallel graph is given, then many problems can be solved in linear time, including many problems that are NP-hard for arbitrary graphs <ref> [3, 6, 13, 14] </ref>; Valdes et al. also show how to obtain such a decomposition tree in linear time. (In this paper, we assume a specific form of the decomposition tree, and use the term sp-tree for this type of decomposition tree.) fl This research was carried out while the second
Reference: [14] <author> K. Takamizawa, T. Nishizeki, and N. Saito. </author> <title> Linear-time computability of combinatorial problems on series-parallel graphs. </title> <journal> J. ACM, </journal> <volume> 29:623641, </volume> <year> 1982. </year>
Reference-contexts: Also, it is known that when a `decomposition tree' for a series parallel graph is given, then many problems can be solved in linear time, including many problems that are NP-hard for arbitrary graphs <ref> [3, 6, 13, 14] </ref>; Valdes et al. also show how to obtain such a decomposition tree in linear time. (In this paper, we assume a specific form of the decomposition tree, and use the term sp-tree for this type of decomposition tree.) fl This research was carried out while the second
Reference: [15] <author> J. Valdes, R. E. Tarjan, and E. L. Lawler. </author> <title> The recognition of series parallel digraphs. </title> <journal> SIAM J. Comput., </journal> <volume> 11:298313, </volume> <year> 1982. </year> <month> 25 </month>
Reference-contexts: A well-studied problem is the problem to recognize series parallel graphs. A linear time algorithm for this problem has been given by Valdes, Tarjan, and Lawler <ref> [15] </ref>. <p> Valdes et al. <ref> [15] </ref> have given a sequential constructive reduction algorithm for series parallel graphs, based on this reduction system, that uses O (m) time.
References-found: 15

