URL: ftp://ftp.cse.ucsc.edu/pub/hsnlab/ucsc-crl-95-59.ps.Z
Refering-URL: http://www.cse.ucsc.edu/research/hsnlab/publications/publications_sorted_by_subject.html
Root-URL: http://www.cse.ucsc.edu
Title: Efficient Fair-Queueing Algorithms for ATM and Packet Networks  
Author: Dimitrios Stiliadis Anujan Varma 
Keyword: Packet scheduling, ATM switch scheduling, fair queueing, delay bounds, fairness.  
Address: Santa Cruz, CA 95064 USA  
Affiliation: Baskin Center for Computer Engineering Information Sciences University of California, Santa Cruz  
Date: December 1995  
Pubnum: UCSC-CRL-95-59  
Abstract: Although Weighted Fair Queueing is regarded as an ideal scheduling algorithm in terms of its delay and fairness properties, its computation complexity is asymptotically linear in the number of connections serviced by the scheduler, thus making its implementation prohibitively expensive in high-speed networks. An algorithm that combines the delay and fairness bounds of Weighted Fair Queueing with O(1) timestamp computations had remained elusive so far. In this paper, we present two novel scheduling algorithms that have O(1) complexity for timestamp computations, and provide the same bounds on end-to-end delay and buffer requirements as those of Weighted Fair Queueing. The first algorithm, Frame-based Fair Queueing, uses a framing mechanism to periodically re-calibrate a global variable tracking the progress of work in the system, limiting any short-term unfairness to within a frame-period. The second algorithm, Starting Potential-based Fair Queueing (SPFQ), performs the re-calibration at packet boundaries, resulting in a fairness bound that is equal to that of Weighted Fair Queueing, still maintaining the O(1) timestamp computations. This improved fairness bound is achieved at the expense of a slightly higher implementation cost. Thus, SPFQ is attractive over FFQ in those applications where its improved fairness properties justify the additional implementation cost. The algorithms may be used in both general packet networks with variable packet sizes and in Asynchronous Transfer Mode (ATM) networks. Both algorithms are based on the general framework of rate-proportional servers (RPS) introduced in [11]. Details of hardware implementations of both algorithms are presented for use in an ATM network. This research is supported by the NSF Young Investigator Award No. MIP-9257103. A part of this paper will appear in the Proceedings of ACM SIGMETRICS '96. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. K. Parekh and R. G. Gallager, </author> <title> "A generalized processor sharing approach to flow control - the single node case," </title> <booktitle> in Proc. IEEE INFOCOM '92, </booktitle> <volume> vol. 2, </volume> <pages> pp. 915-924, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: These guarantees are usually in the form of bounds on end-to-end delay, bandwidth, delay jitter (variation in delay), packet loss rate, or a combination of these parameters. Several service disciplines such as Generalized Processor Sharing (GPS) and its packet-by-packet approximation (known as Weighted Fair Queueing or PGPS) <ref> [1, 2] </ref>, VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin [5] Deficit Round Robin [6], Hierarchical-Round-Robin (HRR) [7], and Stop-and-Go queueing [8] have been proposed in the literature for solving this problem (for a survey see [9].) The design of a traffic scheduling algorithm involves an inevitable tradeoff among its delay, <p> As was discussed in the first part of this work [11], based only on the end-to-end delay bounds and fairness properties, Generalized-Processor-Sharing (GPS) is an ideal scheduling discipline <ref> [1] </ref>. The GPS system is based on a fluid model where the packets are assumed to be infinitely divisible and multiple sessions may transmit traffic through the outgoing link simultaneously at different rates. <p> A packet-by-packet version of the algorithm, known as PGPS or Weighted Fair Queueing (WFQ), is defined in terms of the GPS system <ref> [1, 2] </ref>. That is, a GPS system is simulated in parallel with the packet-by-packet system in order to identify the set of connections that are backlogged at each instant.
Reference: [2] <author> A. Demers, S. Keshav, and S. Shenker, </author> <title> "Analysis and simulation of a fair queueing algorithm," Internetworking: </title> <journal> Research and Experience, </journal> <volume> vol. 1, no. 1, </volume> <pages> pp. 3-26, </pages> <year> 1990. </year>
Reference-contexts: These guarantees are usually in the form of bounds on end-to-end delay, bandwidth, delay jitter (variation in delay), packet loss rate, or a combination of these parameters. Several service disciplines such as Generalized Processor Sharing (GPS) and its packet-by-packet approximation (known as Weighted Fair Queueing or PGPS) <ref> [1, 2] </ref>, VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin [5] Deficit Round Robin [6], Hierarchical-Round-Robin (HRR) [7], and Stop-and-Go queueing [8] have been proposed in the literature for solving this problem (for a survey see [9].) The design of a traffic scheduling algorithm involves an inevitable tradeoff among its delay, <p> A packet-by-packet version of the algorithm, known as PGPS or Weighted Fair Queueing (WFQ), is defined in terms of the GPS system <ref> [1, 2] </ref>. That is, a GPS system is simulated in parallel with the packet-by-packet system in order to identify the set of connections that are backlogged at each instant.
Reference: [3] <author> L. Zhang, "VirtualClock: </author> <title> a new traffic control algorithm for packet switching networks," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 9, </volume> <pages> pp. 101-124, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Several service disciplines such as Generalized Processor Sharing (GPS) and its packet-by-packet approximation (known as Weighted Fair Queueing or PGPS) [1, 2], VirtualClock <ref> [3] </ref>, Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin [5] Deficit Round Robin [6], Hierarchical-Round-Robin (HRR) [7], and Stop-and-Go queueing [8] have been proposed in the literature for solving this problem (for a survey see [9].) The design of a traffic scheduling algorithm involves an inevitable tradeoff among its delay, complexity of implementation,
Reference: [4] <author> D. Ferrari and D. Verma, </author> <title> "A scheme for real-time channel establishment in wide-area networks," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 8, </volume> <pages> pp. 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Several service disciplines such as Generalized Processor Sharing (GPS) and its packet-by-packet approximation (known as Weighted Fair Queueing or PGPS) [1, 2], VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) <ref> [4] </ref>, Weighted Round Robin [5] Deficit Round Robin [6], Hierarchical-Round-Robin (HRR) [7], and Stop-and-Go queueing [8] have been proposed in the literature for solving this problem (for a survey see [9].) The design of a traffic scheduling algorithm involves an inevitable tradeoff among its delay, complexity of implementation, and fairness.
Reference: [5] <author> M. Katevenis, S. Sidiropoulos, and C. Courcoubetis, </author> <title> "Weighted round-robin cell multiplexing in a general-purpose ATM switch chip," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 9, </volume> <pages> pp. 1265-79, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Several service disciplines such as Generalized Processor Sharing (GPS) and its packet-by-packet approximation (known as Weighted Fair Queueing or PGPS) [1, 2], VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin <ref> [5] </ref> Deficit Round Robin [6], Hierarchical-Round-Robin (HRR) [7], and Stop-and-Go queueing [8] have been proposed in the literature for solving this problem (for a survey see [9].) The design of a traffic scheduling algorithm involves an inevitable tradeoff among its delay, complexity of implementation, and fairness.
Reference: [6] <author> M. Shreedhar and G. Varghese, </author> <title> "Efficient fair queueing using deficit round robin," </title> <booktitle> in Proc. ACM SIGCOMM '95, </booktitle> <pages> pp. 231-242, </pages> <month> September </month> <year> 1995. </year>
Reference-contexts: Several service disciplines such as Generalized Processor Sharing (GPS) and its packet-by-packet approximation (known as Weighted Fair Queueing or PGPS) [1, 2], VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin [5] Deficit Round Robin <ref> [6] </ref>, Hierarchical-Round-Robin (HRR) [7], and Stop-and-Go queueing [8] have been proposed in the literature for solving this problem (for a survey see [9].) The design of a traffic scheduling algorithm involves an inevitable tradeoff among its delay, complexity of implementation, and fairness.
Reference: [7] <author> C. Kalmanek, H. Kanakia, and S. Keshav, </author> <title> "Rate-controlled servers for very high-speed networks," </title> <booktitle> in Proc. IEEE Global Telecommunications Conference, </booktitle> <pages> pp. </pages> <address> 300.3.1-300.3.9, </address> <month> December </month> <year> 1990. </year>
Reference-contexts: Several service disciplines such as Generalized Processor Sharing (GPS) and its packet-by-packet approximation (known as Weighted Fair Queueing or PGPS) [1, 2], VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin [5] Deficit Round Robin [6], Hierarchical-Round-Robin (HRR) <ref> [7] </ref>, and Stop-and-Go queueing [8] have been proposed in the literature for solving this problem (for a survey see [9].) The design of a traffic scheduling algorithm involves an inevitable tradeoff among its delay, complexity of implementation, and fairness.
Reference: [8] <author> S. Golestani, </author> <title> "A framing strategy for congestion management," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 9, </volume> <pages> pp. 1064-1077, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Several service disciplines such as Generalized Processor Sharing (GPS) and its packet-by-packet approximation (known as Weighted Fair Queueing or PGPS) [1, 2], VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin [5] Deficit Round Robin [6], Hierarchical-Round-Robin (HRR) [7], and Stop-and-Go queueing <ref> [8] </ref> have been proposed in the literature for solving this problem (for a survey see [9].) The design of a traffic scheduling algorithm involves an inevitable tradeoff among its delay, complexity of implementation, and fairness.
Reference: [9] <author> H. Zhang, </author> <title> "Service disciplines for guaranteed performance service in packet-switching networks," </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> vol. 83, </volume> <pages> pp. 1374-96, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: Processor Sharing (GPS) and its packet-by-packet approximation (known as Weighted Fair Queueing or PGPS) [1, 2], VirtualClock [3], Delay-Earliest-Due-Date (Delay-EDD) [4], Weighted Round Robin [5] Deficit Round Robin [6], Hierarchical-Round-Robin (HRR) [7], and Stop-and-Go queueing [8] have been proposed in the literature for solving this problem (for a survey see <ref> [9] </ref>.) The design of a traffic scheduling algorithm involves an inevitable tradeoff among its delay, complexity of implementation, and fairness. Among the three, the delay and implementation complexity are clearly the most important criteria for the selection of an algorithm for use in a real system.
Reference: [10] <author> D. Stiliadis and A. Varma, </author> <title> "Latency-Rate servers: A general model for analysis of traffic scheduling algorithms," </title> <booktitle> in Proc. IEEE INFOCOM '96, </booktitle> <pages> pp. 111-119, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: of an ideal algorithm must include (i) insensitivity to traffic patterns of other sessions (isolation), (ii) delay bounds that are independent of the number of sessions sharing the outgoing link, and (iii) ability to control the delay bound of a session without depending on the internal parameters of the scheduler <ref> [10, 11] </ref>. As was discussed in the first part of this work [11], based only on the end-to-end delay bounds and fairness properties, Generalized-Processor-Sharing (GPS) is an ideal scheduling discipline [1]. <p> This approach reduces the complexity of the algorithm greatly. However, the price paid is the reduced level of isolation among the sessions, causing the end-to-end delay bounds to grow linearly with the number of sessions that share the outgoing link <ref> [10] </ref>. Thus, the worst-case delay of a session can no longer be controlled just by controlling its reservation, as is possible in Weighted Fair Queueing (WFQ). The higher end-to-end delay also affects the burstiness of sessions within the network, increasing the buffer requirements. <p> Note that, disregarding the term L max =r, this fairness bound is nearly identical to that of WFQ <ref> [10] </ref> and SCFQ [13]. <p> Note that the maximum delay observed under SCFQ is even higher than this upper bound. A large value of maximum delay may lead to increased burstiness and buffer requirements within the network if the session is going through multiple hops. This is consistent with the result in <ref> [10, 14] </ref> where it was shown that the maximum end-to-end delay for SCFQ increases with the number of connections sharing the outgoing link.
Reference: [11] <author> D. Stiliadis and A. Varma, </author> <title> "Rate-proportional servers: A design methodology for fair queueing algorithms," </title> <journal> submitted to IEEE/ACM Transactions on Networking, </journal> <month> April </month> <year> 1996. </year> <note> 22 References </note>
Reference-contexts: of an ideal algorithm must include (i) insensitivity to traffic patterns of other sessions (isolation), (ii) delay bounds that are independent of the number of sessions sharing the outgoing link, and (iii) ability to control the delay bound of a session without depending on the internal parameters of the scheduler <ref> [10, 11] </ref>. As was discussed in the first part of this work [11], based only on the end-to-end delay bounds and fairness properties, Generalized-Processor-Sharing (GPS) is an ideal scheduling discipline [1]. <p> As was discussed in the first part of this work <ref> [11] </ref>, based only on the end-to-end delay bounds and fairness properties, Generalized-Processor-Sharing (GPS) is an ideal scheduling discipline [1]. <p> In this paper, we present two novel scheduling algorithms that have O (1) complexity for timestamp computations, and provide the same bounds on end-to-end delay and buffer requirements as those of Weighted Fair Queueing. These algorithms are based on the analytical framework of rate-proportional servers (RPS) presented in <ref> [11] </ref>. Schedulers in the RPS class use the concept of potential to track the state of the system. Each connection is associated with a a connection potential that keeps track of the amount of 4 1. <p> In addition, if the difference between the system potential and the potential of every backlogged connection is bounded, then the server is fair and its fairness can be estimated in terms of this difference <ref> [11] </ref>. fl A system-busy period is defined as a period during which the server is continuously transmitting packets. 2. Methodology for Maintaining System Potential 5 The definition of rate-proportional servers does not specify the exact method of maintaining the system potential function. <p> As in the previous section, let P i (t) represent the potential of connection i at time t and P (t) the corresponding value of system potential. The fluid version of a Fair Rate-Proportional Server follows all the conditions in Definition 5 of <ref> [11] </ref>. That is, at each instant, the scheduler services only the set of backlogged connections with the minimum potential and connections in this set are serviced at rates proportional to their reservations. In an idealized fluid server it is possible to update the system potential at any instant of time. <p> It is easy to see that such a function can be used as the reference for updating the system potential periodically, since it satisfies condition 3 of Definition 5 of <ref> [11] </ref>. Since the above definition of the base potential function does not specify how to construct such a function, considerable flexibility exists in its choice. <p> We now proceed to show that the system-potential function in Definition 2 results in a Fair Rate-Proportional Server. We first need to show that the system-potential function satisfies the two key properties in the definition of a rate-proportional server <ref> [11] </ref>. The following two lemmas prove that the system potential increases at least at the rate of real time, and that it never increases above the potential of a backlogged connection. <p> Recall that the timestamp of a packet denotes the potential of the corresponding connection at the instant the packet completes its service in the fluid system. We make use of the following lemma from <ref> [11] </ref> to establish a relationship between the potentials of a connection in the fluid and packet servers. Lemma 3: Let (0; t] be a server-busy period in the fluid server. <p> Since packets arrive in the FFQ scheduler only at times when a packet finishes service, it is easy to verify that the a packet will never finish transmission in the packet-by-packet server later than in the corresponding fluid server.(The proof can be easily derived by extending Lemma 3 of <ref> [11] </ref>.) An arriving packet may see a maximum delay of L max =r in the regulator, equal to the maximum time needed for the current packet to complete service in the transmitter. <p> The above bound applies only to the fluid server. We can now use this result and Theorem 4 of <ref> [11] </ref>, which defines a general fairness bound for rate proportional servers, to provide a bound for the packet FFQ server.
Reference: [12] <author> J. Davin and A. Heybey, </author> <title> "A simulation study of fair queueing and policy enforcement," </title> <journal> Computer Communication Review, </journal> <volume> vol. 20, </volume> <pages> pp. 23-29, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Thus, the process overhead for completing a scheduling decision is O (V ). In order to reduce its complexity, an approximate implementation of GPS multiplexing was proposed by Davin and Heybey <ref> [12] </ref> and later analyzed by Golestani [13] under the name Self-Clocked Fair Queueing (SCFQ). In this implementation, the timestamp of an arriving packet is computed based on the timestamp of the packet currently in service. This approach reduces the complexity of the algorithm greatly.
Reference: [13] <author> S. Golestani, </author> <title> "A self-clocked fair queueing scheme for broadband applications," </title> <booktitle> in Proc. IEEE INFOCOM '94, </booktitle> <pages> pp. 636-646, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Thus, the process overhead for completing a scheduling decision is O (V ). In order to reduce its complexity, an approximate implementation of GPS multiplexing was proposed by Davin and Heybey [12] and later analyzed by Golestani <ref> [13] </ref> under the name Self-Clocked Fair Queueing (SCFQ). In this implementation, the timestamp of an arriving packet is computed based on the timestamp of the packet currently in service. This approach reduces the complexity of the algorithm greatly. <p> Note that, disregarding the term L max =r, this fairness bound is nearly identical to that of WFQ [10] and SCFQ <ref> [13] </ref>.
Reference: [14] <author> S. Golestani, </author> <title> "Network delay analysis of a class of fair queueing algorithms," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 13, </volume> <pages> pp. 1057-70, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Note that the maximum delay observed under SCFQ is even higher than this upper bound. A large value of maximum delay may lead to increased burstiness and buffer requirements within the network if the session is going through multiple hops. This is consistent with the result in <ref> [10, 14] </ref> where it was shown that the maximum end-to-end delay for SCFQ increases with the number of connections sharing the outgoing link.
Reference: [15] <author> J. L. Rexford, A. Greenberg, and F. Bonomi, </author> <title> "Hardware efficient fair queueing architectures for high-speed networks," </title> <booktitle> in Proc. IEEE INFOCOM 96, </booktitle> <month> March </month> <year> 1996. </year>
Reference: [16] <author> A. Varma and D. Stiliadis, </author> <title> "FAST: an FPGA-based simulation testbed for ATM switching systems," </title> <booktitle> in Proc. </booktitle> <volume> ICC '96, </volume> <month> June </month> <year> 1996, </year> <note> to appear. </note>
Reference-contexts: In Appendix A, we have presented a hardware implementation of the two algorithms for ATM networks. A working prototype of Frame-based Fair Queueing has been implemented in our FPGA-based Simulation Testbed for ATM Networks (FAST) <ref> [16] </ref>. The algorithm is incorporated in a shared-memory ATM switch architecture, using a set of parallel priority lists. A central controller arbitrates the sharing of the output link by the distributed shared-memory modules.
Reference: [17] <author> P. V. E. Boas, </author> <title> "Preserving order in a forest in less than logarithmic time," </title> <booktitle> in Proc. 16th IEEE Conference on Foundations of Computer Science, </booktitle> <pages> pp. 75-84, </pages> <year> 1975. </year>
Reference-contexts: Traditional heap algorithms for insertion and deletion have a complexity of O (log 2 V ) for V virtual channels. There are a number of ways for reducing this complexity for ATM networks where timestamps take integer values in a finite range. A recursive algorithm was proposed in <ref> [17, 18, 19] </ref> for implementing add and delete operations in such a priority queue with O (log log V ) time complexity, where V is the number of elements in the queue.
Reference: [18] <author> P. V. E. Boas, R. Kaas, and E. Zijlstra, </author> <title> "Design and implementation of an efficient priority queue," </title> <journal> Mathematical Systems Theory, </journal> <volume> vol. 10, </volume> <pages> pp. 99-127, </pages> <year> 1977. </year>
Reference-contexts: Traditional heap algorithms for insertion and deletion have a complexity of O (log 2 V ) for V virtual channels. There are a number of ways for reducing this complexity for ATM networks where timestamps take integer values in a finite range. A recursive algorithm was proposed in <ref> [17, 18, 19] </ref> for implementing add and delete operations in such a priority queue with O (log log V ) time complexity, where V is the number of elements in the queue.
Reference: [19] <author> K. Mehlhorn, </author> <title> Data structures and algorithms. </title> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: Traditional heap algorithms for insertion and deletion have a complexity of O (log 2 V ) for V virtual channels. There are a number of ways for reducing this complexity for ATM networks where timestamps take integer values in a finite range. A recursive algorithm was proposed in <ref> [17, 18, 19] </ref> for implementing add and delete operations in such a priority queue with O (log log V ) time complexity, where V is the number of elements in the queue.
Reference: [20] <author> D. Johnson, </author> <title> "A priority queue in which initialization and queue operations take O(log log d) time," </title> <journal> Mathematical Systems Theory, </journal> <volume> vol. 15, </volume> <pages> pp. 295-309, </pages> <year> 1982. </year>
Reference-contexts: A recursive algorithm was proposed in [17, 18, 19] for implementing add and delete operations in such a priority queue with O (log log V ) time complexity, where V is the number of elements in the queue. These algorithms were further refined by Johnson <ref> [20] </ref> who presented a non-recursive algorithm with O (log log D) complexity for the add and delete operations. In this algorithm D denotes the smallest interval between successive elements in the priority queue.
Reference: [21] <author> B. Dixon, </author> <title> "Concurrency in an O(log log n) priority queue," </title> <booktitle> in Proc. Parallel and Distributed Computing, Theory and Practice, First Canada-France Conference, </booktitle> <pages> pp. 59-71, </pages> <year> 1994. </year>
Reference-contexts: Applying this algorithm to Frame-based Fair Queueing results in a complexity of O (log log F ), where F is the frame size. Furthermore, Dixon presented a method for pipelining References 21 such an algorithm <ref> [21] </ref>. Note that, in an N fi N output-buffered ATM switch, a maximum of N cells may be added to the priority list in one cell cycle while only one cell is selected for transmission.

References-found: 21

