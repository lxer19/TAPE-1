URL: ftp://www.cs.chalmers.se/pub/users/tammet/intprover.ps
Refering-URL: http://www.csd.uu.se/~voronkov/Lics/001-025.htm
Root-URL: 
Email: email: tammet@cs.chalmers.se  
Title: A Resolution Theorem Prover for Intuitionistic Logic  
Author: Tanel Tammet 
Address: S-41296 Goteborg, Sweden  
Affiliation: Department of Computing Science, Goteborg University and Chalmers University of Technology,  
Abstract: We use the general scheme of building resolution calculi (also called the inverse method) originating from S.Maslov and G.Mints to design and implement a resolution theorem prover for intuitionistic logic. A number of search strategies is introduced and proved complete. The resolution method is shown to be a decision procedure for a new syntactically described decidable class of intuitionistic logic. We compare the search strategies suitable for the resolution method with strategies suitable for the tableau method. The performance of our prover is compared with the performance of a tableau prover for intuitionistic logic presented in [17].
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Andrews, P. B. </author> <title> Resolution in Type Theory, </title> <journal> Journal of Symbolic Logic, </journal> <volume> 36, </volume> <month> 414-432 </month> <year> (1971). </year>
Reference-contexts: The prover described in [22] is limited to propositional calculus. In recent years we observe a renewed interest in proof search for intuitionistic logic, originating mostly from research in intuitionistic type theories (see <ref> [1] </ref> and [2] for early research in automating type theories). Although type theories are essentially higher-order, there exist useful fragments of type theories which can be directly encoded in first order 1 intuitionistic logic, with no additional axioms or axiom schemes required, see e.g. [20].
Reference: [2] <author> Andrews, P. B., Miller, D. A, Longini Cohen, E., Pfenning, F. </author> <title> Automating Higher Order Logic. In Automated Theorem Proving: </title> <type> After 25 Years, </type> <pages> pages 169-192, </pages> <booktitle> Contemporary Mathematics Series, </booktitle> <volume> vol. 29, </volume> <publisher> American Matehmatical Society, </publisher> <year> 1984. </year>
Reference-contexts: The prover described in [22] is limited to propositional calculus. In recent years we observe a renewed interest in proof search for intuitionistic logic, originating mostly from research in intuitionistic type theories (see [1] and <ref> [2] </ref> for early research in automating type theories). Although type theories are essentially higher-order, there exist useful fragments of type theories which can be directly encoded in first order 1 intuitionistic logic, with no additional axioms or axiom schemes required, see e.g. [20].
Reference: [3] <author> Beeson, M.J., </author> <title> Some applications of Gentzen's proof theory in automated deduction. </title> <type> Manuscript, </type> <year> 1988. </year>
Reference-contexts: For decades, most of the research in automated theorem proving has been concentrated on classical logic. Relatively few papers are devoted on proof search in intuitionistic logic. The following is an incomplete list of such papers: [22],[7], <ref> [3] </ref>, [11], [23], [15], [17], [18], [5], [13]. Despite the fact that several intuitionistic theorem provers have been implemented (see [5], [18], [3]), only very few published papers describe the actual implementation of an automated theorem prover and bring the results of running the prover on some benchmarks: [22] and [17]. <p> Relatively few papers are devoted on proof search in intuitionistic logic. The following is an incomplete list of such papers: [22],[7], <ref> [3] </ref>, [11], [23], [15], [17], [18], [5], [13]. Despite the fact that several intuitionistic theorem provers have been implemented (see [5], [18], [3]), only very few published papers describe the actual implementation of an automated theorem prover and bring the results of running the prover on some benchmarks: [22] and [17]. The prover described in [22] is limited to propositional calculus.
Reference: [4] <author> Chang, C.L., Lee, R.C.T. </author> <title> Symbolic Logic and Mechanical Theorem Proving. </title> <publisher> Aca demic Press, </publisher> <year> (1973). </year>
Reference-contexts: We hope that an efficient prover for intuitionistic logic can be of analogous help for program synthesis and type theory. 2 Terminology For the basic terminology of resolution (term, atom, literal, clause, substitution, most general unifier (denoted mgu)) see e.g. <ref> [6, 4] </ref>. Let us fix the terminology concerning Gentzen-type systems (sequent calculus). In the sequent ` the left-hand side and right-hand side are sometimes called antecedent and succedent. <p> Soundness is easy to prove. The principal idea of the completeness proof is the following: * show completeness for the propositional case, which is straightforward, * use the lifting lemma standardly used for completeness proofs of Robinson's resolu tion (see e.g. <ref> [4, 16, 6] </ref>) in order to lift the proof to predicate level. 2 4.4 Clause Notation It is convenient to formalize the axioms and the system of instances of GJm rules produced by the algorithms RA 1 and RR 1 using the clause notation familiar from Robinson's resolution. <p> We will not bring an exact algorithm for the translation, since RJm is a mere notational variant of instantiated GJm. Other premisses are derived clauses. The rule clauses are analogous to nucleons and the derived clauses are analogous to electrons of the hyperresolution strategy of ordinary classical resolution, see <ref> [4] </ref>. All the literals to the left of j in a rule clause have to be resolved upon. The literal to the right of j will go to the conclusion. <p> Proof Soundness follows from the soundness of Horn strategy. The completeness proof is constructed using the previous lemma about the completeness of Horn strategy and the lemma about the completeness of hyperresolution for classical logic, see <ref> [4] </ref> for the latter. 2 We note that the hyperresolution strategy is incomplete in the general case. As a counterexample, consider deriving ` a ) c from the sequents a ` b and b ` c. <p> In case we do not use the extended axiom set, we do not manage to find a resolution proof during ca one day of search. 24 7.2 Examples from Chang and Lee We will consider two group theory examples from <ref> [4] </ref>. Both can be converted to Horn clauses, thus the classical and intuitionistic provability coincides.
Reference: [5] <author> Dyckoff, R. </author> <title> Contraction-free sequent calculi for intuitionistic logic. </title> <journal> Journal of Sym bolic Logic, </journal> <volume> 57(3), </volume> <month> 795-807 </month> <year> (1992). </year>
Reference-contexts: For decades, most of the research in automated theorem proving has been concentrated on classical logic. Relatively few papers are devoted on proof search in intuitionistic logic. The following is an incomplete list of such papers: [22],[7], [3], [11], [23], [15], [17], [18], <ref> [5] </ref>, [13]. Despite the fact that several intuitionistic theorem provers have been implemented (see [5], [18], [3]), only very few published papers describe the actual implementation of an automated theorem prover and bring the results of running the prover on some benchmarks: [22] and [17]. <p> Relatively few papers are devoted on proof search in intuitionistic logic. The following is an incomplete list of such papers: [22],[7], [3], [11], [23], [15], [17], [18], <ref> [5] </ref>, [13]. Despite the fact that several intuitionistic theorem provers have been implemented (see [5], [18], [3]), only very few published papers describe the actual implementation of an automated theorem prover and bring the results of running the prover on some benchmarks: [22] and [17]. The prover described in [22] is limited to propositional calculus. <p> (x)) ) 9x (a (c) ) b (x)) 20 7 Experiments with Implementations Only three implementations of tableau provers for full first-order intuitionistic logic are known to us, namely, a tableau prover (written in C) described in [17], a tableau prover of R.Dyckoff (written in Prolog) implementing the calculus from <ref> [5] </ref> and a tableau prover of N.Shankar (written in Lisp), implementing his dynamic Skolemization strategies from [18].
Reference: [6] <author> Fermuller, C., Leitsch, A., Tammet, T., Zamov, N. </author> <title> Resolution methods for decision problems. </title> <publisher> LNCS 679, Springer Verlag, </publisher> <year> (1993). </year> <month> 27 </month>
Reference-contexts: We hope that an efficient prover for intuitionistic logic can be of analogous help for program synthesis and type theory. 2 Terminology For the basic terminology of resolution (term, atom, literal, clause, substitution, most general unifier (denoted mgu)) see e.g. <ref> [6, 4] </ref>. Let us fix the terminology concerning Gentzen-type systems (sequent calculus). In the sequent ` the left-hand side and right-hand side are sometimes called antecedent and succedent. <p> Soundness is easy to prove. The principal idea of the completeness proof is the following: * show completeness for the propositional case, which is straightforward, * use the lifting lemma standardly used for completeness proofs of Robinson's resolu tion (see e.g. <ref> [4, 16, 6] </ref>) in order to lift the proof to predicate level. 2 4.4 Clause Notation It is convenient to formalize the axioms and the system of instances of GJm rules produced by the algorithms RA 1 and RR 1 using the clause notation familiar from Robinson's resolution. <p> Such an equivalent conversion does not exist for monadic formulas in intuitionistic logic. Theorem 6 The resolution method incorporating subsumption strategy is a decision procedure for the Near-Monadic class. We will first define the well-known notion of splitting (see e.g. <ref> [6] </ref>) and prove the lemma 4.
Reference: [7] <author> Fitting, M. </author> <title> Resolution for Intuitionistic Logic. </title> <note> Paper presented at ISMIS '87, </note> <editor> Char lotte, </editor> <address> NC. </address> <year> 1987. </year>
Reference: [8] <author> Lifschitz, V. </author> <title> What Is the Inverse Method? Journal of Automated Reasoning, </title> <type> 5, </type> <month> 1-23 </month> <year> (1989). </year>
Reference-contexts: Observe that a tableau prover using the system GI is a decision procedure for formulas not containing negative occurrences of 8. 4 The Generic Resolution Method The generic resolution method (also called the "inverse method") originally developed by S.Maslov and G.Mints (see e.g. [9] (contains unification already), <ref> [8] </ref> and [11]) is a forward-chaining proof search method. The sequent calculus rules are applied top-to-bottom (again, observe that premisses are written above the line and the conclusion below the line).
Reference: [9] <institution> S.Ju.Maslov An inverse method of establishing deducibility in the classical predicate calculus. Dokl. Akad. Nauk. </institution> <note> SSSR 159 (1964) 17-20=Soviet Math. Dokl. 5 (1964) 1420, MR 30 #3005. </note>
Reference-contexts: Exchange rule is implicit. Observe that a tableau prover using the system GI is a decision procedure for formulas not containing negative occurrences of 8. 4 The Generic Resolution Method The generic resolution method (also called the "inverse method") originally developed by S.Maslov and G.Mints (see e.g. <ref> [9] </ref> (contains unification already), [8] and [11]) is a forward-chaining proof search method. The sequent calculus rules are applied top-to-bottom (again, observe that premisses are written above the line and the conclusion below the line). <p> x; y (P (x; y)) L 2 (x;y) B (x; y))) 8 L 6 x9 L 5 (x) y (B (x; y) _ L 4 (x;y) P (y; x)) 4.3 Instantiating Derivation Rules We are now going to present the second main idea of the generic resolution method proposed in <ref> [9] </ref> and developed in [11], [13]: starting the search with maximally general axioms and building unification into derivation rules. Unification is also the essential idea behind Robinson's resolution. Let F be a formula we are trying to prove. <p> Both are present already in <ref> [9] </ref>. The extension strategy of RA 1 of using an extended axiom set is different from all the other strategies we present, in the sense that it does not diminish the branching factor at search nodes. In contrary, the size of the set of axioms is increased.
Reference: [10] <author> W.McCune. </author> <title> OTTER 2.0 Users Guide. </title> <type> Tech. Report ANL-90/9, </type> <institution> Argonne National Laboratory, Argonne, IL, </institution> <month> March </month> <year> 1990. </year>
Reference-contexts: OTTER: <ref> [10] </ref>. Two main lists are maintained: sos (set of support) is the list of clauses yet to be considered, usable is the list of active clauses. All the axioms are initially put to the sos list, and the usable list is initially empty.
Reference: [11] <author> G.Mints. </author> <title> Gentzen-type Systems and Resolution Rules. Part I. Propositional Logic. </title> <booktitle> In COLOG-88, </booktitle> <pages> pages 198-231, </pages> <publisher> LNCS 417, Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: For decades, most of the research in automated theorem proving has been concentrated on classical logic. Relatively few papers are devoted on proof search in intuitionistic logic. The following is an incomplete list of such papers: [22],[7], [3], <ref> [11] </ref>, [23], [15], [17], [18], [5], [13]. Despite the fact that several intuitionistic theorem provers have been implemented (see [5], [18], [3]), only very few published papers describe the actual implementation of an automated theorem prover and bring the results of running the prover on some benchmarks: [22] and [17]. <p> Observe that a tableau prover using the system GI is a decision procedure for formulas not containing negative occurrences of 8. 4 The Generic Resolution Method The generic resolution method (also called the "inverse method") originally developed by S.Maslov and G.Mints (see e.g. [9] (contains unification already), [8] and <ref> [11] </ref>) is a forward-chaining proof search method. The sequent calculus rules are applied top-to-bottom (again, observe that premisses are written above the line and the conclusion below the line). <p> F 0 may not contain ?. The proof is easy. 4.2 Labelling One of the main ideas of the general resolution framework for logics with a subformula property (eg. classical, intuitionistic and linear logics) in <ref> [11, 12, 13] </ref> is to label subformulas of any investigated formula F with new atomic formulas in order to reduce the depth of a formula. <p> y)) L 2 (x;y) B (x; y))) 8 L 6 x9 L 5 (x) y (B (x; y) _ L 4 (x;y) P (y; x)) 4.3 Instantiating Derivation Rules We are now going to present the second main idea of the generic resolution method proposed in [9] and developed in <ref> [11] </ref>, [13]: starting the search with maximally general axioms and building unification into derivation rules. Unification is also the essential idea behind Robinson's resolution. Let F be a formula we are trying to prove. <p> Proof We refer to <ref> [11, 13] </ref> for the details of a proof of a similar system. Soundness is easy to prove. <p> Such a modification was considered in a system RIp in <ref> [11] </ref>. * the notational difference: we write :L 1 ; : : :; :L m ; R instead of L 1 ; : : :; L m ) R. Derivable objects of RJm are clauses which represent sequents.
Reference: [12] <author> G.Mints. </author> <title> Resolution Calculus for The First Order Linear Logic. </title> <journal> Journal of Logic, Language and Information, </journal> <volume> 2, </volume> <month> 58-93 </month> <year> (1993). </year>
Reference-contexts: F 0 may not contain ?. The proof is easy. 4.2 Labelling One of the main ideas of the general resolution framework for logics with a subformula property (eg. classical, intuitionistic and linear logics) in <ref> [11, 12, 13] </ref> is to label subformulas of any investigated formula F with new atomic formulas in order to reduce the depth of a formula.
Reference: [13] <author> G.Mints. </author> <title> Resolution Strategies for the Intuitionistic Logic. In Constraint Program ming, </title> <booktitle> NATO ASI Series F, v. </booktitle> <volume> 131, </volume> <pages> pp. 289-311, </pages> <publisher> Springer Verlag, </publisher> <year> (1994). </year>
Reference-contexts: For decades, most of the research in automated theorem proving has been concentrated on classical logic. Relatively few papers are devoted on proof search in intuitionistic logic. The following is an incomplete list of such papers: [22],[7], [3], [11], [23], [15], [17], [18], [5], <ref> [13] </ref>. Despite the fact that several intuitionistic theorem provers have been implemented (see [5], [18], [3]), only very few published papers describe the actual implementation of an automated theorem prover and bring the results of running the prover on some benchmarks: [22] and [17]. <p> The intuitionistic sequent calculus GJ' from <ref> [13] </ref> avoids explicit applications of structural rules. <p> F 0 may not contain ?. The proof is easy. 4.2 Labelling One of the main ideas of the general resolution framework for logics with a subformula property (eg. classical, intuitionistic and linear logics) in <ref> [11, 12, 13] </ref> is to label subformulas of any investigated formula F with new atomic formulas in order to reduce the depth of a formula. <p> L 2 (x;y) B (x; y))) 8 L 6 x9 L 5 (x) y (B (x; y) _ L 4 (x;y) P (y; x)) 4.3 Instantiating Derivation Rules We are now going to present the second main idea of the generic resolution method proposed in [9] and developed in [11], <ref> [13] </ref>: starting the search with maximally general axioms and building unification into derivation rules. Unification is also the essential idea behind Robinson's resolution. Let F be a formula we are trying to prove. <p> Proof We refer to <ref> [11, 13] </ref> for the details of a proof of a similar system. Soundness is easy to prove. <p> Indeed, this is the case with our implementation, which shares most of the code with our implementation of a classical resolution theorem prover. The calculus RJm is obtained from RJp given in <ref> [13] </ref> by the following inessential modifications: * the redundant clauses ) p and ) q 1 are removed from the rules _ ` and 9 `, respectively, * two rules for the negation connective : are added, * the rule Res is split into a number of different cases: ` (_; <p> Also, in case a newly derived clause subsumes some existing clauses 1 ; : : : ; n , then all the latter are immediately removed from search space. The following lemma is an old result, see <ref> [13] </ref>: Lemma 1 The subsumption strategy preserves completeness of resolution. Proof Proof follows from the lifting lemma and the fact that GJm does not contain an explicit rule of weakening: all the necessary weakening steps are combined implicitly into non-structural rules, for example ) 0 and ) 00 . <p> Completeness of the inversion strategy for RJm is implied by the completeness of the strong inversion strategy for RJm. 13 Lemma 2 The strong inversion strategy preserves completeness for RJm. Proof Analogous lemma is proved in <ref> [13] </ref> for the rules ` &, & `, _ ` and ` ). The proof is easily extendable to the strong inversion strategy and the rules ` :, ` 8, 9 ` and 8 `. We will summarize the main points of the proof from [13] with the modifications for our <p> Analogous lemma is proved in <ref> [13] </ref> for the rules ` &, & `, _ ` and ` ). The proof is easily extendable to the strong inversion strategy and the rules ` :, ` 8, 9 ` and 8 `. We will summarize the main points of the proof from [13] with the modifications for our case. Consider the sequent calculus GI from [17]: the rules ` &, & `, _ `, ` ), ` 8, 9 ` and 8 ` are all invertible. <p> H i being a Horn pre-clause stands in searching for a proof of G with the additional axioms HCF (H 1 ),: : :,HCF (H n ) and an additional rule, the cut rule: :; A :A 0 ; :; B = mgu (A; A 0 ) We refer to <ref> [13] </ref> for the proof of the following lemma: Lemma 3 The Horn strategy is sound and complete. 16 We note that the Horn strategy without the cut rule is incomplete. As a counterexample consider the formula (a & (a ) b)) ) b.
Reference: [14] <author> J. von Plato. </author> <title> The Axioms of Constructive Geometry. </title> <journal> Annals of Pure and Applied Logic 76(2), </journal> <month> 169-200 </month> <year> (1995). </year>
Reference-contexts: Resolution time with hyperresolution 0.04 seconds, clauses kept: 10. 7.3 Constructive Geometry of von Plato In the paper <ref> [14] </ref> Jan von Plato presents a first order axiomatization of constructive elementary geometry and proves a number of theorems in geometry. We will consider the axiomatization of geometry of apartness and convergence and prove several theorems from [14]. The prover is run on a Sun Sparcstation 5. <p> seconds, clauses kept: 10. 7.3 Constructive Geometry of von Plato In the paper <ref> [14] </ref> Jan von Plato presents a first order axiomatization of constructive elementary geometry and proves a number of theorems in geometry. We will consider the axiomatization of geometry of apartness and convergence and prove several theorems from [14]. The prover is run on a Sun Sparcstation 5. The axiomatization consists of the following four groups of axioms. <p> _ (apt (y; u) _ apt (y; v))))) Axioms 4: 25 (8xyz (apt (x; y))(dipt (x; z) _ apt (z; y)))) (8xyz (apt (x; y))(diln (y; z) _ apt (x; z)))) (8xyz (con (x; y))(diln (y; z) _ con (x; z)))) We will proceed to the theorems originally proved in <ref> [14] </ref>. Unless said differently, the prover from [17] eventually stopped with a memory allocation or stack full error after ca 10 seconds of work. <p> [17] was able to prove this theorem in 158 seconds. ((dipt (a; b) & apt (c; ln (a; b))))(diln (ln (a; b); ln (c; a)) & diln (ln (a; b); ln (c; b)))) Due to the lack of space we will not consider the experiments with the other theorems in <ref> [14] </ref>. 7.4 Some Conclusions As always, it is very hard to compare the relative performance of one search method to another, since minute changes in the representation of the problem or the strategies often have a crucial effect on the search. <p> However, in our experiments the resolution prover is a clear winner for almost all the harder benchmark problems presented in [17] or <ref> [14] </ref>. In particular, it takes less than a second for our resolution prover to prove any of the [17] benchmarks (with the special unification problem being an exception) for which the tableau prover in [17] fails.
Reference: [15] <author> Pym, </author> <title> D.J., Wallen, L.A. Investigations into proof-search in a system of first-order dependent function types. </title> <booktitle> In CADE-10, </booktitle> <pages> pages 236-250, </pages> <publisher> Springer Verlag 1990. </publisher>
Reference-contexts: For decades, most of the research in automated theorem proving has been concentrated on classical logic. Relatively few papers are devoted on proof search in intuitionistic logic. The following is an incomplete list of such papers: [22],[7], [3], [11], [23], <ref> [15] </ref>, [17], [18], [5], [13]. Despite the fact that several intuitionistic theorem provers have been implemented (see [5], [18], [3]), only very few published papers describe the actual implementation of an automated theorem prover and bring the results of running the prover on some benchmarks: [22] and [17].
Reference: [16] <author> J.A. Robinson. </author> <title> A Machine-oriented Logic Based on the Resolution Principle. </title> <journal> Journal of the ACM 12, </journal> <month> 23-41 </month> <year> (1965). </year>
Reference-contexts: In the following we will refer to the method shortly as the resolution method. Ordinarily the name "resolution method" (coined by J.Robinson) denotes the proof search method presented by J.Robinson in <ref> [16] </ref>. In our context the usage of "resolution" is justified by the fact that Robinson's resolution method can be seen as a special case of the generic resolution. <p> Soundness is easy to prove. The principal idea of the completeness proof is the following: * show completeness for the propositional case, which is straightforward, * use the lifting lemma standardly used for completeness proofs of Robinson's resolu tion (see e.g. <ref> [4, 16, 6] </ref>) in order to lift the proof to predicate level. 2 4.4 Clause Notation It is convenient to formalize the axioms and the system of instances of GJm rules produced by the algorithms RA 1 and RR 1 using the clause notation familiar from Robinson's resolution.
Reference: [17] <author> D.Sahlin, T.Franzen, S.Haridi. </author> <title> An Intuitionistic Predicate Logic Theorem Prover.Journal of Logic and Computation, </title> <type> 2(5), </type> <month> 619-656 </month> <year> (1992). </year>
Reference-contexts: For decades, most of the research in automated theorem proving has been concentrated on classical logic. Relatively few papers are devoted on proof search in intuitionistic logic. The following is an incomplete list of such papers: [22],[7], [3], [11], [23], [15], <ref> [17] </ref>, [18], [5], [13]. Despite the fact that several intuitionistic theorem provers have been implemented (see [5], [18], [3]), only very few published papers describe the actual implementation of an automated theorem prover and bring the results of running the prover on some benchmarks: [22] and [17]. <p> [3], [11], [23], [15], <ref> [17] </ref>, [18], [5], [13]. Despite the fact that several intuitionistic theorem provers have been implemented (see [5], [18], [3]), only very few published papers describe the actual implementation of an automated theorem prover and bring the results of running the prover on some benchmarks: [22] and [17]. The prover described in [22] is limited to propositional calculus. In recent years we observe a renewed interest in proof search for intuitionistic logic, originating mostly from research in intuitionistic type theories (see [1] and [2] for early research in automating type theories). <p> However, depth-first search enjoys several advantages over breadth-first search (a relatively small computational overhead). Thus several tableau provers implement iteratively deepening depth-first search, where each iteration has a certain bound on a length of branches. Experiments for both the intuitionistic tableau (see <ref> [17] </ref>) and the linear propositional tableau (see [19]) have showed the good bound to be a number of contractions in a branch. <p> One of the main goals of modifying the rules is to restrict the occasions where the contraction rule may be applied without contraction intuitionistic logic would be decidable. The tableau prover presented in <ref> [17] </ref> uses the following system GI: Logical axioms. ?; ` B and B; ` B for arbitrary formulas B. Inference rules. <p> The proof is easily extendable to the strong inversion strategy and the rules ` :, ` 8, 9 ` and 8 `. We will summarize the main points of the proof from [13] with the modifications for our case. Consider the sequent calculus GI from <ref> [17] </ref>: the rules ` &, & `, _ `, ` ), ` 8, 9 ` and 8 ` are all invertible. <p> Each of these is provable classically, but not intuitionistically. For each of these our resolution prover exhausts the search space in ca 0.016 seconds, keeping 0-2 of the derived clauses, and then stops, thus proving the unprovability of the formula. The tableau prover <ref> [17] </ref>, however, never terminates the unsuccesful proof search for those four formulas. <p> q (c)) ) (q (c) _ 8xp (x)) S2: (a (c) ) 9xb (x)) ) 9x (a (c) ) b (x)) 20 7 Experiments with Implementations Only three implementations of tableau provers for full first-order intuitionistic logic are known to us, namely, a tableau prover (written in C) described in <ref> [17] </ref>, a tableau prover of R.Dyckoff (written in Prolog) implementing the calculus from [5] and a tableau prover of N.Shankar (written in Lisp), implementing his dynamic Skolemization strategies from [18]. <p> Unfortunately we do not have any benchmarks for the latter two provers, we only know (from personal communication) that for the following examples 1.1-1.8 with alternating quantifiers Shankar's prover is more than an order of magnitude faster than the prover from <ref> [17] </ref>, mainly due to the dynamic Skolemization strategies for handling quantifiers. We have implemented a resolution prover for intuitionistic logic. No other resolution provers for the intuitionistic predicate calculus are known to us. <p> Our prover uses the calculus RJm along with all the strategies described in the current paper. 7.1 The Benchmark Suite from the SICS paper We compare the performance of the tableau prover from <ref> [17] </ref> and our resolution prover on the set of all the examples (except the specific query-examples 8.1 and 8.2), provided in [17]. <p> calculus RJm along with all the strategies described in the current paper. 7.1 The Benchmark Suite from the SICS paper We compare the performance of the tableau prover from <ref> [17] </ref> and our resolution prover on the set of all the examples (except the specific query-examples 8.1 and 8.2), provided in [17]. Both provers are compiled and run on the Sun SparcServer 10. server is 65, which is about the same speed as a 66-Mhz PC clone with a Pentium, or double the speed of a 66-Mhz PC clone with a 80486DX2 processor. <p> We feel that the Horn strategy and hyperresolution strategy would have made the comparison unfair. We will later analyse some separate benchmarks and demonstrate the effect of the Horn and hyperresolution strategies. Remark: Our timings of the prover in <ref> [17] </ref> are better than the timings presented in [17] itself, due to using a faster machine. [17] systematizes examples in the following way: group 1 alternations of quantifiers, group 2 append, group 3 problems 39-43 from Pelletier's collection, group 4 existence, group 5 unification, group 6 simple, group 7 problematic. <p> We feel that the Horn strategy and hyperresolution strategy would have made the comparison unfair. We will later analyse some separate benchmarks and demonstrate the effect of the Horn and hyperresolution strategies. Remark: Our timings of the prover in <ref> [17] </ref> are better than the timings presented in [17] itself, due to using a faster machine. [17] systematizes examples in the following way: group 1 alternations of quantifiers, group 2 append, group 3 problems 39-43 from Pelletier's collection, group 4 existence, group 5 unification, group 6 simple, group 7 problematic. Group 6 is relatively uninteresting. <p> We will later analyse some separate benchmarks and demonstrate the effect of the Horn and hyperresolution strategies. Remark: Our timings of the prover in <ref> [17] </ref> are better than the timings presented in [17] itself, due to using a faster machine. [17] systematizes examples in the following way: group 1 alternations of quantifiers, group 2 append, group 3 problems 39-43 from Pelletier's collection, group 4 existence, group 5 unification, group 6 simple, group 7 problematic. Group 6 is relatively uninteresting. It deserves mentioning that the prover in [17] uses an efficient nonstandard <p> using a faster machine. <ref> [17] </ref> systematizes examples in the following way: group 1 alternations of quantifiers, group 2 append, group 3 problems 39-43 from Pelletier's collection, group 4 existence, group 5 unification, group 6 simple, group 7 problematic. Group 6 is relatively uninteresting. It deserves mentioning that the prover in [17] uses an efficient nonstandard approach to unification in the proof search (see results of group 5). <p> We present a selection of the formulas from the table above. For the rest see <ref> [17] </ref>. All the subformulas H , G are replaced by (H ) G) & (G ) H) before the proof search is started. 7.1.1 Alternations of Quantifiers The tableau prover performs poorly on larger examples from this group. <p> Unless said differently, the prover from <ref> [17] </ref> eventually stopped with a memory allocation or stack full error after ca 10 seconds of work. <p> Using the same limited axiomatization, the prover from <ref> [17] </ref> succeeded in 0.2 seconds. <p> However, when we limited the axiomatization to contain only axiom groups 2 and 3, the proof was found in 0.5 seconds (364 clauses kept). Using the same limited axiomatization, the prover from <ref> [17] </ref> was able to prove this theorem in 71 seconds. ((dipt (a; b) & con (l; m) & diln (l; ln (a; b))))(apt (a; l) _ apt (b; l))) The resolution prover was unable to prove the following theorem 4.1.i.l during ca 10 hours of search. <p> With an axiomatization limited to axiom groups 2 and 4, the proof was found in 0.4 seconds (215 clauses kept) Using the same limited axiomatization, the prover from <ref> [17] </ref> was able to prove this theorem in 0.2 seconds. ((dipt (a; b) & con (l; m) & (apt (a; l) _ apt (b; l))))diln (l; ln (a; b))) The provers exhibited analogous behaviour for the theorems 4.1.ii.r and 4.1.ii.l: ((dipt (a; b) & con (l; m) & diln (l; m) <p> Using the same limited axiomatization, the prover from <ref> [17] </ref> was able to prove this theorem in 173 seconds. ((dipt (a; b) & apt (c; ln (a; b))))(dipt (c; a) & dipt (c; b))) The theorem 4.3.ii was too hard for the resolution prover in case the full axiomatization was used. <p> It was proved in 0.5 seconds (260 clauses kept) from the axiom groups 2 and 4, though. Using the same limited axiomatization, the prover from <ref> [17] </ref> was able to prove this theorem in 158 seconds. ((dipt (a; b) & apt (c; ln (a; b))))(diln (ln (a; b); ln (c; a)) & diln (ln (a; b); ln (c; b)))) Due to the lack of space we will not consider the experiments with the other theorems in [14]. <p> However, in our experiments the resolution prover is a clear winner for almost all the harder benchmark problems presented in <ref> [17] </ref> or [14]. In particular, it takes less than a second for our resolution prover to prove any of the [17] benchmarks (with the special unification problem being an exception) for which the tableau prover in [17] fails. <p> However, in our experiments the resolution prover is a clear winner for almost all the harder benchmark problems presented in <ref> [17] </ref> or [14]. In particular, it takes less than a second for our resolution prover to prove any of the [17] benchmarks (with the special unification problem being an exception) for which the tableau prover in [17] fails. <p> prover is a clear winner for almost all the harder benchmark problems presented in <ref> [17] </ref> or [14]. In particular, it takes less than a second for our resolution prover to prove any of the [17] benchmarks (with the special unification problem being an exception) for which the tableau prover in [17] fails. Considering the problems in constructive geometry we note that the prover can be used as a practical tool in the hands of human mathematician, using the machine to fill in gaps in the schematic proof plans.
Reference: [18] <author> N.Shankar. </author> <title> Proof Search in the Intuitionistic Sequent Calculus. </title> <booktitle> In CADE-11, </booktitle> <pages> pages 522-536, </pages> <publisher> LNCS 607, Springer Verlag, </publisher> <year> (1992). </year>
Reference-contexts: For decades, most of the research in automated theorem proving has been concentrated on classical logic. Relatively few papers are devoted on proof search in intuitionistic logic. The following is an incomplete list of such papers: [22],[7], [3], [11], [23], [15], [17], <ref> [18] </ref>, [5], [13]. Despite the fact that several intuitionistic theorem provers have been implemented (see [5], [18], [3]), only very few published papers describe the actual implementation of an automated theorem prover and bring the results of running the prover on some benchmarks: [22] and [17]. <p> Relatively few papers are devoted on proof search in intuitionistic logic. The following is an incomplete list of such papers: [22],[7], [3], [11], [23], [15], [17], <ref> [18] </ref>, [5], [13]. Despite the fact that several intuitionistic theorem provers have been implemented (see [5], [18], [3]), only very few published papers describe the actual implementation of an automated theorem prover and bring the results of running the prover on some benchmarks: [22] and [17]. The prover described in [22] is limited to propositional calculus. <p> Since our logic is intuitionistic, no derived clause may contain more than one atom labelling a positive subformula of F . Thus all the derivable clauses satisfy conditions of the lemma 4. Thus the number of derivable clauses is finite. 2 For example, consider the following four formulas from <ref> [18] </ref>. Each of these is provable classically, but not intuitionistically. For each of these our resolution prover exhausts the search space in ca 0.016 seconds, keeping 0-2 of the derived clauses, and then stops, thus proving the unprovability of the formula. <p> of tableau provers for full first-order intuitionistic logic are known to us, namely, a tableau prover (written in C) described in [17], a tableau prover of R.Dyckoff (written in Prolog) implementing the calculus from [5] and a tableau prover of N.Shankar (written in Lisp), implementing his dynamic Skolemization strategies from <ref> [18] </ref>. <p> It is possible to improve the performance of a tableau prover on this group by using the dynamic Skolemization techniques from <ref> [18] </ref>.
Reference: [19] <author> T.Tammet. </author> <title> Proof Strategies in Linear Logic. </title> <journal> Journal of Automated Reasoning 12(3), </journal> <month> 273-304 </month> <year> (1994). </year>
Reference-contexts: However, depth-first search enjoys several advantages over breadth-first search (a relatively small computational overhead). Thus several tableau provers implement iteratively deepening depth-first search, where each iteration has a certain bound on a length of branches. Experiments for both the intuitionistic tableau (see [17]) and the linear propositional tableau (see <ref> [19] </ref>) have showed the good bound to be a number of contractions in a branch. The chief gains of efficiency for the tableau provers are obtained by restricting the calculus in order to obtain a low branching factor in the "upwards" direction of the sequent deduction. <p> A general scheme of reduction strategies for the resolution method is proposed in [21]. The reduction strategy for linear logic developed independently in <ref> [19] </ref> was of crucial importance for efficiency of the linear resolution prover in [19]. Definition 5 We say that a clause is reducible by a reduction strategy iff only one clause can be derived from , according to this strategy. <p> A general scheme of reduction strategies for the resolution method is proposed in [21]. The reduction strategy for linear logic developed independently in <ref> [19] </ref> was of crucial importance for efficiency of the linear resolution prover in [19]. Definition 5 We say that a clause is reducible by a reduction strategy iff only one clause can be derived from , according to this strategy.
Reference: [20] <author> Tammet, T., Smith, J. </author> <title> Optimised Encodings of Fragments of Type Theory in First Order Logic. </title> <booktitle> In Proceedings of the CADE-12 workshop on proof search in type-theoretic languages, Nancy 1994, </booktitle> <pages> 87-93. </pages>
Reference-contexts: Although type theories are essentially higher-order, there exist useful fragments of type theories which can be directly encoded in first order 1 intuitionistic logic, with no additional axioms or axiom schemes required, see e.g. <ref> [20] </ref>. In fragments like these the problems of proof search in type theory translate directly into problems of proof search in first order intuitionistic logic.
Reference: [21] <author> Voronkov, A. </author> <title> Theorem proving in non-standard logics based on the inverse method. </title> <booktitle> In CADE-11, </booktitle> <pages> pages 648-662, </pages> <publisher> LNCS 607, Springer Verlag, </publisher> <year> (1992). </year>
Reference-contexts: A general scheme of reduction strategies for the resolution method is proposed in <ref> [21] </ref>. The reduction strategy for linear logic developed independently in [19] was of crucial importance for efficiency of the linear resolution prover in [19]. Definition 5 We say that a clause is reducible by a reduction strategy iff only one clause can be derived from , according to this strategy.
Reference: [22] <author> Volozh, B., Matskin, M., Mints, G., Tyugu, E. </author> <title> PRIZ system and the Propositional Calculus. </title> <journal> Kibernetika and Software 6, </journal> <year> (1983). </year>
Reference-contexts: papers: <ref> [22] </ref>,[7], [3], [11], [23], [15], [17], [18], [5], [13]. Despite the fact that several intuitionistic theorem provers have been implemented (see [5], [18], [3]), only very few published papers describe the actual implementation of an automated theorem prover and bring the results of running the prover on some benchmarks: [22] and [17]. The prover described in [22] is limited to propositional calculus. In recent years we observe a renewed interest in proof search for intuitionistic logic, originating mostly from research in intuitionistic type theories (see [1] and [2] for early research in automating type theories). <p> Despite the fact that several intuitionistic theorem provers have been implemented (see [5], [18], [3]), only very few published papers describe the actual implementation of an automated theorem prover and bring the results of running the prover on some benchmarks: <ref> [22] </ref> and [17]. The prover described in [22] is limited to propositional calculus. In recent years we observe a renewed interest in proof search for intuitionistic logic, originating mostly from research in intuitionistic type theories (see [1] and [2] for early research in automating type theories).
Reference: [23] <author> Wallen, L.A. </author> <title> Automated Proof Search in Non-Classical Logics. </title> <publisher> MIT Press, </publisher> <year> (1990). </year> <month> 28 </month>
Reference-contexts: For decades, most of the research in automated theorem proving has been concentrated on classical logic. Relatively few papers are devoted on proof search in intuitionistic logic. The following is an incomplete list of such papers: [22],[7], [3], [11], <ref> [23] </ref>, [15], [17], [18], [5], [13]. Despite the fact that several intuitionistic theorem provers have been implemented (see [5], [18], [3]), only very few published papers describe the actual implementation of an automated theorem prover and bring the results of running the prover on some benchmarks: [22] and [17].
References-found: 23

