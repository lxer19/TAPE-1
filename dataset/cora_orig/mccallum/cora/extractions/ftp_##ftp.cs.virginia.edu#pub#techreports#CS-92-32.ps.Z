URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-92-32.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Easy-to-use Object-Oriented Parallel Processing with Mentat  
Abstract: Andrew S. Grimshaw Technical Report No. CS-92-32 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Bal, J. Steiner, and A. Tanenbaum, </author> <title> Programming Languages for Distributed Computing Systems, </title> <journal> ACM Computing Surveys, pp. </journal> <volume> 261-322, vol. 21, no. 3, </volume> <month> Sept. </month> <year> 1989. </year>
Reference: [2] <author> B. Beck, </author> <title> Shared Memory Parallel Programming in C++, </title> <journal> IEEE Software, </journal> <pages> 7(4) pp. 38-48, </pages> <month> July, </month> <year> 1990. </year>
Reference: [3] <author> A. </author> <title> Beguelin et al.,A Users Guide to PVM (Parallel Virtual Machine), </title> <institution> Oak Ridge National Laboratory TM-11826. </institution>
Reference-contexts: In the long term, we expect compiler technology to improve, and the need for programmer intervention to decrease. With respect to applications portability, there have been several mechanisms introduced recently that provide for application portability across platforms. Examples include PVM <ref> [3] </ref>, and Linda [6]. They, like Mentat, achieve portability by providing a virtual machine interface to the programmer.
Reference: [4] <author> B. N. Bershad, E. D. Lazowska, and H. M. Levy, </author> <title> Presto: A System for Object-Oriented Parallel Programming, </title> <journal> Software - Practice and Experience, </journal> <volume> 18(8), </volume> <pages> pp. 713-732, </pages> <month> August, </month> <year> 1988. </year>
Reference: [5] <author> D. Callahan and K. </author> <title> Kennedy,Compiling Programs for Distributed-Memory Multiprocessors The Journal of Supercomputing, </title> <journal> no. </journal> <volume> 2, </volume> <pages> pp. 151-169, </pages> <address> 1988, </address> <publisher> Kluwer Academic Publishers. </publisher>
Reference-contexts: Message passing MIMD architectures require medium-to coarse-grain parallelism in order to operate efficiently. Thus, purely compiler-based approaches are inappropriate for this class of machines because of the mismatch of granularity. Recently, there have been attempts to exploit programmer knowledge to improve data distribution <ref> [5] </ref>. This approach is best suited to data parallel problems. Mentat strikes a balance that captures the best aspects of both explicit and compiler-based approaches. The user makes granularity and partitioning decisions using high-level Mentat class definitions, while the compiler and run-time system manage communication, synchronization, and scheduling.
Reference: [6] <author> N. Carriero and D. Gelernter, </author> <title> Linda in Context, </title> <journal> Comm. of the ACM, </journal> <pages> pp. 444-458, </pages> <month> April, </month> <year> 1989. </year>
Reference-contexts: In the long term, we expect compiler technology to improve, and the need for programmer intervention to decrease. With respect to applications portability, there have been several mechanisms introduced recently that provide for application portability across platforms. Examples include PVM [3], and Linda <ref> [6] </ref>. They, like Mentat, achieve portability by providing a virtual machine interface to the programmer.
Reference: [7] <author> R. Chin and S. Chanson, </author> <title> Distributed Object-Based Programming Systems, </title> <journal> ACM Computing Surveys, pp. </journal> <volume> 323-358, vol. 21, no. 3, </volume> <month> Sept. </month> <year> 1989. </year>
Reference: [8] <author> A. S. Grimshaw, </author> <title> The Mentat Run-Time System: Support for Medium Grain Parallel Computation, </title> <booktitle> Proceedings of the Fifth Distributed Memory Computing Conference, </booktitle> <pages> pp. 1064-1073, </pages> <address> Charleston, SC., </address> <month> April 9-12, </month> <year> 1990. </year>
Reference-contexts: The complex tasks, scheduling, communication and synchronization, are handled by Mentat. 2 There are two primary components of Mentat: the Mentat Programming Language (MPL) [9] and the Mentat run-time system <ref> [8] </ref>. The MPL is an object-oriented programming language based on C++ that masks the complexity of the parallel environment from the programmer. The granule of computation is the Mentat class member function. Mentat classes consist of contained objects (local and member variables), their procedures, and a thread of control. <p> There are five flavors of create (). See Figure 3. Assume the definition p_matrix mat1; When create () is used as in Figure 3 (a), the system will choose on which processor to instantiate the object <ref> [8] </ref>. The programmer may optionally provide location hints. The hints are COLOCATE, DISJOINT, and HIGH_COMPUTATION_RATIO. These hints allow the programmer to specify where he wants the new object to be instantiated. <p> The compiler and run-time system are responsible for mapping this high-level users view of the program onto the physical hardware. 3. The Run-Time System The Mentat run-time system <ref> [8] </ref> supports Mentat programs via the provision of a virtual macro-data ow machine (Figure 10). The virtual machine provides support routines that perform run-time data dependence detection, program graph construction, program graph execution, token matching, scheduling, communication, and synchronization.
Reference: [9] <author> A. S. Grimshaw, E. Loyot Jr., and J. Weissman, </author> <title> Mentat Programming Language (MPL) Reference Manual, </title> <institution> University of Virginia, Computer Science TR 91-32, </institution> <year> 1991. </year>
Reference-contexts: The programmer uses application domain knowledge to specify those object classes that are of sufficient computational complexity to warrant parallel execution. The complex tasks, scheduling, communication and synchronization, are handled by Mentat. 2 There are two primary components of Mentat: the Mentat Programming Language (MPL) <ref> [9] </ref> and the Mentat run-time system [8]. The MPL is an object-oriented programming language based on C++ that masks the complexity of the parallel environment from the programmer. The granule of computation is the Mentat class member function.
Reference: [10] <author> J. K. Lee and D. Gannon, </author> <title> Object Oriented Parallel Programming Experiments and Results, </title> <booktitle> Proceedings of Supercomputing 91, </booktitle> <pages> pp. 273-282, </pages> <address> Albuquerque, NM, </address> <year> 1991. </year>
Reference-contexts: In the object-oriented parallel processing domain Mentat differs from systems such as [2,4] (shared memory C++ systems) in its ability to easily support both shared memory MIMD and distributed memory MIMD architectures, as well as hybrids. PC++ <ref> [10] </ref> on the other hand, is a data parallel C++. Mentat accommodates both functional and data parallelism, often within the same program. ESP [12] is perhaps the most similar of the parallel object-oriented systems. It too is a high-performance extension to C++ that supports both functional and data parallelism.
Reference: [11] <author> C. Polychronopoulos, </author> <title> Parallel Programming and Compilers, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1988. </year>
Reference-contexts: Therefore, much as high-level languages and compilers were developed to simplify sequential programming, compilers have been built for parallel systems. In fully automatic compiler-based approaches the compiler is responsible for performing dependence analysis and finding and exploiting opportunities for parallelism <ref> [11] </ref>. Compiler-based approaches are usually applied to Fortran. Ideally, application of this approach would permit the automatic parallelization of dusty deck Fortran programs. The advantage of compiler-based techniques is that the compiler can be trusted to get communication and synchronization right.
Reference: [12] <author> S. K. Smith, et al., </author> <title> Experimental Systems Project at MCC, </title> <type> MCC Technical Report Number: </type> <institution> ACA-ESP-089-89, </institution> <month> March 2, </month> <year> 1989. </year> <month> 27 </month>
Reference-contexts: PC++ [10] on the other hand, is a data parallel C++. Mentat accommodates both functional and data parallelism, often within the same program. ESP <ref> [12] </ref> is perhaps the most similar of the parallel object-oriented systems. It too is a high-performance extension to C++ that supports both functional and data parallelism. What (a) 8-processor Sun 3/60 network (b) 32-processor Intel iPSC/2 23 distinguishes Mentat is our compiler support.
References-found: 12

