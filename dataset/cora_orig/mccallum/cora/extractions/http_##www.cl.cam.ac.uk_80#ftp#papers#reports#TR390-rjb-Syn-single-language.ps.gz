URL: http://www.cl.cam.ac.uk:80/ftp/papers/reports/TR390-rjb-Syn-single-language.ps.gz
Refering-URL: http://www.cl.cam.ac.uk:80/ftp/papers/reports/
Root-URL: 
Title: Syn: A Single Language for Specifying  
Author: Richard J. Boulton 
Keyword: Syn specification.  
Date: March 1996  
Address: New Museums Site, Pembroke Street Cambridge CB2 3QG, United Kingdom  
Affiliation: University of Cambridge Computer Laboratory  
Abstract: Syntax Trees, Lexical Analysis, Abstract A language called Syn is described in which all aspects of context-free syntax can be specified without redundancy. The language is essentially an extended BNF grammar. Unusual features include high-level constructs for specifying lexical aspects of a language and specification of precedence by textual order. A system has been implemented for generating lexers, parsers, pretty-printers and abstract syntax tree representations from a 
Abstract-found: 1
Intro-found: 1
Reference: [BCD + 88] <author> P. Borras, D. Clement, T. Despeyroux, J. Incerpi, G. Kahn, B. Lang, and V. Pascual. </author> <title> CENTAUR: the system. </title> <booktitle> In Henderson [Hen88], </booktitle> <pages> pages 14-24. </pages>
Reference-contexts: Most of the work has been directed towards parsing, and languages that also allow specification of pretty-printing are rare. They do, however, arise in generators for software engineering environments, e.g., the Ergo Support System (ESS) [LPRS88], the programming system generator PSG [BS86], Centaur <ref> [BCD + 88] </ref> and the Synthesizer Generator [RT89]. The syntax specification language of ESS is quite similar to Syn. It is a single language that has iterators, unparsing annotations, and high-level lexical specification. <p> Layout information need not be given in a Syn specification. However, a printer generated from such a specification will produce a continuous stream of output with no line breaks. The syntax and semantics of these specifications is based on the Pretty-Printing Meta-Language (PPML) [MC86] of the Centaur system <ref> [BCD + 88] </ref>. Each object in a format is either itself a format (with an optional layout specification) or a group of objects. A layout specification before an object is a list of separation values with commas between them and enclosed in angle brackets.
Reference: [BS86] <author> R. Bahlke and G. Snelting. </author> <title> The PSG system: From formal language definitions to interactive programming environments. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(4) </volume> <pages> 547-576, </pages> <month> Oc-tober </month> <year> 1986. </year>
Reference-contexts: Most of the work has been directed towards parsing, and languages that also allow specification of pretty-printing are rare. They do, however, arise in generators for software engineering environments, e.g., the Ergo Support System (ESS) [LPRS88], the programming system generator PSG <ref> [BS86] </ref>, Centaur [BCD + 88] and the Synthesizer Generator [RT89]. The syntax specification language of ESS is quite similar to Syn. It is a single language that has iterators, unparsing annotations, and high-level lexical specification.
Reference: [Chu40] <author> A. Church. </author> <title> A formulation of the simple theory of types. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 5(1) </volume> <pages> 56-68, </pages> <year> 1940. </year>
Reference-contexts: This assumption was partly motivated by the aims of the wider project in which Syn has been developed: to represent abstract syntax in higher-order logic <ref> [Chu40] </ref> using the HOL theorem proving system [GM93], so that language texts can be given a formal semantics and reasoned about using mechanised formal proof. The shape of the abstract syntax trees for a specified language does not have to be given explicitly, but is deduced from the grammar.
Reference: [GM93] <author> M. J. C. Gordon and T. F. Melham, </author> <title> editors. Introduction to HOL: A theorem proving environment for higher order logic. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: This assumption was partly motivated by the aims of the wider project in which Syn has been developed: to represent abstract syntax in higher-order logic [Chu40] using the HOL theorem proving system <ref> [GM93] </ref>, so that language texts can be given a formal semantics and reasoned about using mechanised formal proof. The shape of the abstract syntax trees for a specified language does not have to be given explicitly, but is deduced from the grammar.
Reference: [Hen88] <editor> P. Henderson, editor. </editor> <booktitle> ACM SIGSOFT'88: Third Symposium on Software Development Environments (ACM SIGSOFT Software Engineering Notes, 13(5), and, ACM SIGPLAN Notices, 24(2)), </booktitle> <address> Boston, Massachusetts, </address> <month> November </month> <year> 1988. </year>
Reference: [HHKR89] <author> J. Heering, P. R. H. Hendriks, P. Klint, and J. Rekers. </author> <title> The syntax definition formalism SDF | reference manual |. ACM SIGPLAN Notices, </title> <booktitle> 24(11) </booktitle> <pages> 43-75, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Pretty-printing is specified as another grammar with annotations for 5 insertion of new-lines and indentation. The formatting may be conditional on the existence of optional syntactic elements or on the form of sub-ASTs. Centaur provides specification languages for concrete and abstract syntax (Metal [KLMM83] and SDF <ref> [HHKR89] </ref>), for pretty-printing (PPML [MC86]), and for static and dynamic semantics, together with a powerful user interface. The ASTs in Centaur can have attributes and annotations such as comments and formal assertions. The leaves may be ASTs of sub-languages. <p> These are used for syntax-directed editing and also allow a semantics for the language to be given over the concrete syntax. The form of meta-variables is specified using regular expressions. The SDF Reference Manual <ref> [HHKR89] </ref> has a good discussion of other syntax-specification formalisms. PPML (Pretty-Printing Meta-Language) is not based on a grammar for the language but instead features patterns for matching abstract syntax trees and corresponding formats that specify how strings and the text for subtrees are to be grouped and positioned.
Reference: [Joh78] <author> S. C. Johnson. </author> <title> YACC | yet another compiler-compiler. </title> <type> Technical report, </type> <institution> Bell Laboratories, </institution> <address> Murray Hill, NJ, U.S.A., </address> <month> July </month> <year> 1978. </year>
Reference-contexts: The language is described in more detail in Section 4. 3 Related Work There has been a considerable amount of previous research on specification languages for syntax. The lexical analyser generator Lex [Les75] and parser generator Yacc <ref> [Joh78] </ref> are perhaps the best known. Most of the work has been directed towards parsing, and languages that also allow specification of pretty-printing are rare.
Reference: [KLMM83] <author> G. Kahn, B. Lang, B. Melese, and E. Morcos. </author> <title> Metal: A formalism to specify formalisms. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 3(2) </volume> <pages> 151-188, </pages> <year> 1983. </year>
Reference-contexts: Pretty-printing is specified as another grammar with annotations for 5 insertion of new-lines and indentation. The formatting may be conditional on the existence of optional syntactic elements or on the form of sub-ASTs. Centaur provides specification languages for concrete and abstract syntax (Metal <ref> [KLMM83] </ref> and SDF [HHKR89]), for pretty-printing (PPML [MC86]), and for static and dynamic semantics, together with a powerful user interface. The ASTs in Centaur can have attributes and annotations such as comments and formal assertions. The leaves may be ASTs of sub-languages.
Reference: [Les75] <author> M. E. Lesk. </author> <title> Lex | a lexical analyzer generator. </title> <institution> Computer Science Technical Report 39, Bell Laboratories, </institution> <address> Murray Hill, NJ, U.S.A., </address> <month> October </month> <year> 1975. </year>
Reference-contexts: Hopefully, the example gives the reader a useful impression of the Syn language. The language is described in more detail in Section 4. 3 Related Work There has been a considerable amount of previous research on specification languages for syntax. The lexical analyser generator Lex <ref> [Les75] </ref> and parser generator Yacc [Joh78] are perhaps the best known. Most of the work has been directed towards parsing, and languages that also allow specification of pretty-printing are rare.
Reference: [LPRS88] <author> P. Lee, F. Pfenning, G. Rollins, and W. Scherlis. </author> <title> The Ergo support system: An integrated set of tools for prototyping integrated environments. </title> <booktitle> In Henderson [Hen88], </booktitle> <pages> pages 25-34. 22 </pages>
Reference-contexts: Most of the work has been directed towards parsing, and languages that also allow specification of pretty-printing are rare. They do, however, arise in generators for software engineering environments, e.g., the Ergo Support System (ESS) <ref> [LPRS88] </ref>, the programming system generator PSG [BS86], Centaur [BCD + 88] and the Synthesizer Generator [RT89]. The syntax specification language of ESS is quite similar to Syn. It is a single language that has iterators, unparsing annotations, and high-level lexical specification.
Reference: [MC86] <author> E. Morcos-Chounet and A. Conchon. PPML: </author> <title> A general formalism to specify pretty-printing. </title> <editor> In H.-J. Kugler, editor, </editor> <booktitle> Information Processing 86 (Proceedings of IFIP Congress), </booktitle> <pages> pages 583-590, </pages> <address> Dublin, 1986. </address> <publisher> IFIP, Elsevier Science Publishers B.V. (North-Holland). </publisher>
Reference-contexts: The formatting may be conditional on the existence of optional syntactic elements or on the form of sub-ASTs. Centaur provides specification languages for concrete and abstract syntax (Metal [KLMM83] and SDF [HHKR89]), for pretty-printing (PPML <ref> [MC86] </ref>), and for static and dynamic semantics, together with a powerful user interface. The ASTs in Centaur can have attributes and annotations such as comments and formal assertions. The leaves may be ASTs of sub-languages. <p> Layout information need not be given in a Syn specification. However, a printer generated from such a specification will produce a continuous stream of output with no line breaks. The syntax and semantics of these specifications is based on the Pretty-Printing Meta-Language (PPML) <ref> [MC86] </ref> of the Centaur system [BCD + 88]. Each object in a format is either itself a format (with an optional layout specification) or a group of objects. A layout specification before an object is a list of separation values with commas between them and enclosed in angle brackets.
Reference: [MTH90] <author> R. Milner, M. Tofte, and R. Harper. </author> <title> The Definition of Standard ML. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: It does not return a set of cycles in which some are disjoint. 6 An Implementation A compiler for the Syn language, called ML-Syn, has been implemented in Standard ML <ref> [MTH90, Pau91] </ref>, a higher-order functional programming language that uses strict evaluation. The compiler also generates code in Standard ML. The Standard ML of New Jersey implementation is used because it provides the lexer and parser generating tools ML-Lex and ML-Yacc.
Reference: [Pau91] <author> L. C. Paulson. </author> <title> ML for the Working Programmer. </title> <publisher> Cambridge University Press, </publisher> <year> 1991. </year>
Reference-contexts: It does not return a set of cycles in which some are disjoint. 6 An Implementation A compiler for the Syn language, called ML-Syn, has been implemented in Standard ML <ref> [MTH90, Pau91] </ref>, a higher-order functional programming language that uses strict evaluation. The compiler also generates code in Standard ML. The Standard ML of New Jersey implementation is used because it provides the lexer and parser generating tools ML-Lex and ML-Yacc.
Reference: [RT89] <author> T. W. Reps and T. Teitelbaum. </author> <title> The Synthesizer Generator: A System for Constructing Language-Based Editors. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <year> 1989. </year>
Reference-contexts: They do, however, arise in generators for software engineering environments, e.g., the Ergo Support System (ESS) [LPRS88], the programming system generator PSG [BS86], Centaur [BCD + 88] and the Synthesizer Generator <ref> [RT89] </ref>. The syntax specification language of ESS is quite similar to Syn. It is a single language that has iterators, unparsing annotations, and high-level lexical specification. However, the Syn language has more implicit features such as inferring precedence and the form of the ASTs.
Reference: [Rub83] <author> L. F. Rubin. </author> <title> Syntax-directed pretty printing | a first step towards a syntax-directed editor. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-9(2):119-127, </volume> <month> March </month> <year> 1983. </year>
Reference-contexts: An unparsing scheme also specifies which abstract syntax tree nodes are selectable and which productions of the grammar are editable as text. Lists of syntactic elements and optional elements are considered. Rubin <ref> [Rub83] </ref> describes a language based on context-free grammars that includes lexical and pretty-printing specifications, but no abstract syntax. The pretty-printing annotations take the form of actions to be performed for each symbol of a production, such as starting a new line and indenting by a specified number of spaces.
Reference: [RW81] <author> G. A. Rose and J. Welsh. </author> <title> Formatted programming languages. </title> <journal> Software | Practice and Experience, </journal> <volume> 11 </volume> <pages> 651-669, </pages> <year> 1981. </year> <month> 23 </month>
Reference-contexts: These annotations are similar to the control characters in 6 the Synthesizer Generator. Rubin's work is motivated by the desire to build syntax-directed editors for software engineering environments. Rose and Welsh <ref> [RW81] </ref> describe grammars extended with formatting operations that manipulate a stack of margin values. One of their aims is to move specification of formatting out of the realm of language implementors and users into that of the language designer.
References-found: 16

