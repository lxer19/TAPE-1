URL: ftp://osm7.cs.byu.edu/papers/ClassCongruency.ps
Refering-URL: http://osm7.cs.byu.edu/Papers.html
Root-URL: 
Email: embley@cs.byu.edu  woodfiel@cs.byu.edu  
Phone: (801) 378-6470  
Title: Object-Class Congruency: Improving the Quality of Classification  
Author: Scott N. Woodfield 
Address: Provo, Utah 84602  1993  
Affiliation: Brigham Young University Computer Science Department  Brigham Young University,  
Note: David E. Embley  
Pubnum: (801) 378-2915  
Abstract: ions in Object-Oriented Software Systems 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Booch, G., </author> <title> Object-oriented Design with Applications, </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1991. </year>
Reference-contexts: Although informal descriptions of these elements provide a framework for evaluating quality, they do not provide the means. Other approaches focus on class definitions with principles like sufficiency, completeness, and primitiveness <ref> [1] </ref>. These principles are useful for verifying implementations, but do not help in assessing the quality of classification abstractions. Still other approaches involve principles, such as coupling and cohesion, that help measure modularization and encapsulation, but not classification abstractions [1, 7, 9, 12]. <p> These principles are useful for verifying implementations, but do not help in assessing the quality of classification abstractions. Still other approaches involve principles, such as coupling and cohesion, that help measure modularization and encapsulation, but not classification abstractions <ref> [1, 7, 9, 12] </ref>. Despite the amount of effort being spent on object-oriented technology, there is to date no commonly excepted theory for the quality of classification abstractions.
Reference: [2] <author> Coad, P. and Ed Y., </author> <title> Object-oriented Analysis, </title> <publisher> Prentice Hall, </publisher> <month> January, </month> <year> 1990. </year>
Reference-contexts: Intuitively, good classes and hierarchies should lend themselves to extension, reuse, efficient implementation, and straightforward correlations with real-world concepts. Many authors side-step the quality issue by describing the general elements of the object-oriented paradigm, including identity, classification, abstraction, and encapsulation, but without giving any quality 1 assessment criterion <ref> [2, 8, 10, 11, 12, 15] </ref>. Although informal descriptions of these elements provide a framework for evaluating quality, they do not provide the means. Other approaches focus on class definitions with principles like sufficiency, completeness, and primitiveness [1]. <p> OSA's modeling components include object classes, relationship sets, 3 object states and transitions, object interactions, high-level components, and various types of constraints. OSA's expressive power is similar to Object Modeling Technique (OMT) [12], Object-oriented Analysis (OOA) <ref> [2] </ref>, and Object-oriented Systems Analysis/Object Life Cycles (OOSA/OLC) [13, 14]. Unlike these other models, however, OSA's syntax and semantics are formally defined [3]. The remainder of this paper is organized as follows.
Reference: [3] <author> Clyde, S., D. W. Embley, and S. N. Woodfield, </author> <title> "The Complete Formal Definition For the Syntax and Semantics of OSA," </title> <type> Technical Report BYU-CS-92-2, </type> <institution> Computer Science Department, Brigham Young University, </institution> <month> February, </month> <year> 1992, </year> <pages> pp. 452-465. </pages>
Reference-contexts: OSA's expressive power is similar to Object Modeling Technique (OMT) [12], Object-oriented Analysis (OOA) [2], and Object-oriented Systems Analysis/Object Life Cycles (OOSA/OLC) [13, 14]. Unlike these other models, however, OSA's syntax and semantics are formally defined <ref> [3] </ref>. The remainder of this paper is organized as follows. In Section 2, we introduce and formalize the notions of potential object properties, immediate and inherited properties, common properties, and object-class congruency. We also define a congruency metric. <p> For example, the 1 participation constraint near the Car object class restricts the number of VIN objects related to each car object. We formally define the semantics of OSA by converting any model instance to a two-sorted, first-order logic language with temporal semantics, called Object-oriented Systems Modeling Logic (OSM-Logic) <ref> [3] </ref>. The conversion produces formulas that formally express the semantics of the OSA model instance. Like traditional, first-order, logic languages, these formulas consist of various symbols, including: predicates, variables, constants, logical connectors, and quantifiers.
Reference: [4] <author> Clyde, S., D. W. Embley, and S. N. Woodfield, </author> <title> "Tunable Formalism: Meeting the Needs of Both Theoreticians and Practitioners," </title> <booktitle> Proceedings of the 1992 Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <address> Vancouver, Canada, </address> <month> October 17-22, </month> <year> 1992, </year> <pages> pp. 452-465. </pages>
Reference: [5] <author> Davis, M. D. and E. J. Weyuker, </author> <title> Computability, Complexity, and Languages, </title> <publisher> Academic Press, </publisher> <year> 1983. </year>
Reference: [6] <author> Embley, D. W., B. D. Kurtz, and S. N. Woodfield, </author> <title> Object-oriented System Analysis: A Model-driven Approach, </title> <publisher> Prentice Hall, </publisher> <month> January, </month> <year> 1992. </year>
Reference-contexts: We believe that object-class congruency can be applied to virtually any object-oriented analysis model that supports classes and generalization/specialization hierarchies. However, we formalize object-class congruency using Object-oriented Systems Analysis (OSA), an analysis model developed at Brigham Young University in cooperation with Hewlett-Packard Company <ref> [6] </ref>. OSA's modeling components include object classes, relationship sets, 3 object states and transitions, object interactions, high-level components, and various types of constraints. OSA's expressive power is similar to Object Modeling Technique (OMT) [12], Object-oriented Analysis (OOA) [2], and Object-oriented Systems Analysis/Object Life Cycles (OOSA/OLC) [13, 14]. <p> In OSA diagrams, we represent an object class as a box enclosing the name of the object class as Figures 1-3 show. In addition to objects and object classes, OSA includes modeling components for relationships, relationship sets, object states, state transitions, object interactions, and a variety of constraints <ref> [6] </ref>. From an object-class perspective, these other components either define potential properties for the class members or restrict these properties. For example, the relationship set in Figure 3 labeled Car has VIN defines a potential property for car objects, namely that each may associate with a VIN object.
Reference: [7] <author> Embley, D. W., and S. N. Woodfield, </author> <title> "Assessing the quality of abstract data types written in Ada," </title> <booktitle> Proceedings of the 10th International Conference on Software Engineering, </booktitle> <month> April, </month> <year> 1988. </year>
Reference-contexts: These principles are useful for verifying implementations, but do not help in assessing the quality of classification abstractions. Still other approaches involve principles, such as coupling and cohesion, that help measure modularization and encapsulation, but not classification abstractions <ref> [1, 7, 9, 12] </ref>. Despite the amount of effort being spent on object-oriented technology, there is to date no commonly excepted theory for the quality of classification abstractions.
Reference: [8] <author> Khoshafian, S. N. and G. P. Copeland, </author> <title> "Object Identity," </title> <booktitle> Proceedings of the 1986 Object-oriented Programming Systems, Languages and Applications, </booktitle> <month> September, </month> <year> 1986, </year> <pages> pp. 406-416. </pages>
Reference-contexts: Intuitively, good classes and hierarchies should lend themselves to extension, reuse, efficient implementation, and straightforward correlations with real-world concepts. Many authors side-step the quality issue by describing the general elements of the object-oriented paradigm, including identity, classification, abstraction, and encapsulation, but without giving any quality 1 assessment criterion <ref> [2, 8, 10, 11, 12, 15] </ref>. Although informal descriptions of these elements provide a framework for evaluating quality, they do not provide the means. Other approaches focus on class definitions with principles like sufficiency, completeness, and primitiveness [1].
Reference: [9] <author> Lieberherr, K. J. and I. Holland, </author> <title> "Assuring Good Style for Object-Oriented Programs," </title> <journal> IEEE Software, </journal> <volume> Vol: 6, No: 5, </volume> <month> September, </month> <year> 1989, </year> <pages> pp. 38-49. </pages>
Reference-contexts: These principles are useful for verifying implementations, but do not help in assessing the quality of classification abstractions. Still other approaches involve principles, such as coupling and cohesion, that help measure modularization and encapsulation, but not classification abstractions <ref> [1, 7, 9, 12] </ref>. Despite the amount of effort being spent on object-oriented technology, there is to date no commonly excepted theory for the quality of classification abstractions.
Reference: [10] <author> Meyer, B., </author> <title> Object-oriented Software Construction, Prentice Hall, </title> <booktitle> International Series in Computer Science, </booktitle> <year> 1988. </year>
Reference-contexts: Intuitively, good classes and hierarchies should lend themselves to extension, reuse, efficient implementation, and straightforward correlations with real-world concepts. Many authors side-step the quality issue by describing the general elements of the object-oriented paradigm, including identity, classification, abstraction, and encapsulation, but without giving any quality 1 assessment criterion <ref> [2, 8, 10, 11, 12, 15] </ref>. Although informal descriptions of these elements provide a framework for evaluating quality, they do not provide the means. Other approaches focus on class definitions with principles like sufficiency, completeness, and primitiveness [1].
Reference: [11] <author> Nierstrasz, O. M. </author> <title> "A Survey of Object-oriented Concepts," In Object-oriented Concepts, Databases, and Applications, </title> <editor> W. Kim, F. H. Lochovsky, eds., </editor> <year> 1989, </year> <pages> pp. 3-22. </pages>
Reference-contexts: Intuitively, good classes and hierarchies should lend themselves to extension, reuse, efficient implementation, and straightforward correlations with real-world concepts. Many authors side-step the quality issue by describing the general elements of the object-oriented paradigm, including identity, classification, abstraction, and encapsulation, but without giving any quality 1 assessment criterion <ref> [2, 8, 10, 11, 12, 15] </ref>. Although informal descriptions of these elements provide a framework for evaluating quality, they do not provide the means. Other approaches focus on class definitions with principles like sufficiency, completeness, and primitiveness [1].
Reference: [12] <author> Rumbaugh, J., M. Blaha, W. Premerlani, F. Eddy, and W. Lorensen, </author> <title> Object-oriented Modeling and Design, </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Intuitively, good classes and hierarchies should lend themselves to extension, reuse, efficient implementation, and straightforward correlations with real-world concepts. Many authors side-step the quality issue by describing the general elements of the object-oriented paradigm, including identity, classification, abstraction, and encapsulation, but without giving any quality 1 assessment criterion <ref> [2, 8, 10, 11, 12, 15] </ref>. Although informal descriptions of these elements provide a framework for evaluating quality, they do not provide the means. Other approaches focus on class definitions with principles like sufficiency, completeness, and primitiveness [1]. <p> These principles are useful for verifying implementations, but do not help in assessing the quality of classification abstractions. Still other approaches involve principles, such as coupling and cohesion, that help measure modularization and encapsulation, but not classification abstractions <ref> [1, 7, 9, 12] </ref>. Despite the amount of effort being spent on object-oriented technology, there is to date no commonly excepted theory for the quality of classification abstractions. <p> OSA's modeling components include object classes, relationship sets, 3 object states and transitions, object interactions, high-level components, and various types of constraints. OSA's expressive power is similar to Object Modeling Technique (OMT) <ref> [12] </ref>, Object-oriented Analysis (OOA) [2], and Object-oriented Systems Analysis/Object Life Cycles (OOSA/OLC) [13, 14]. Unlike these other models, however, OSA's syntax and semantics are formally defined [3]. The remainder of this paper is organized as follows.
Reference: [13] <author> Schlaer, S. and S. J. Mellor, </author> <title> Object Lifecyles: Modeling the World in States, </title> <publisher> Yourdon Press, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1992. </year> <month> 18 </month>
Reference-contexts: OSA's modeling components include object classes, relationship sets, 3 object states and transitions, object interactions, high-level components, and various types of constraints. OSA's expressive power is similar to Object Modeling Technique (OMT) [12], Object-oriented Analysis (OOA) [2], and Object-oriented Systems Analysis/Object Life Cycles (OOSA/OLC) <ref> [13, 14] </ref>. Unlike these other models, however, OSA's syntax and semantics are formally defined [3]. The remainder of this paper is organized as follows. In Section 2, we introduce and formalize the notions of potential object properties, immediate and inherited properties, common properties, and object-class congruency.
Reference: [14] <author> Schlaer, S. and S. J. Mellor, </author> <title> Object-Oriented Systems Analysis: Modeling the World in Data, </title> <publisher> Yourdon Press, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1988. </year>
Reference-contexts: OSA's modeling components include object classes, relationship sets, 3 object states and transitions, object interactions, high-level components, and various types of constraints. OSA's expressive power is similar to Object Modeling Technique (OMT) [12], Object-oriented Analysis (OOA) [2], and Object-oriented Systems Analysis/Object Life Cycles (OOSA/OLC) <ref> [13, 14] </ref>. Unlike these other models, however, OSA's syntax and semantics are formally defined [3]. The remainder of this paper is organized as follows. In Section 2, we introduce and formalize the notions of potential object properties, immediate and inherited properties, common properties, and object-class congruency.
Reference: [15] <author> Snyder, A., </author> <title> "Inheritance and the Development of Encapsulated Software Components," In Research Directions in Object-oriented Programming, </title> <editor> P. Wegner, B. Shriver, eds., </editor> <year> 1987, </year> <pages> pp. 165-188. </pages>
Reference-contexts: Intuitively, good classes and hierarchies should lend themselves to extension, reuse, efficient implementation, and straightforward correlations with real-world concepts. Many authors side-step the quality issue by describing the general elements of the object-oriented paradigm, including identity, classification, abstraction, and encapsulation, but without giving any quality 1 assessment criterion <ref> [2, 8, 10, 11, 12, 15] </ref>. Although informal descriptions of these elements provide a framework for evaluating quality, they do not provide the means. Other approaches focus on class definitions with principles like sufficiency, completeness, and primitiveness [1].
Reference: [16] <author> Wand, Y., </author> <title> "A Proposal for a Formal Model of Objects," In Object-oriented Concepts, Databases, and Applications, </title> <editor> W. Kim, F. H. Lochovsky, eds., </editor> <year> 1989, </year> <pages> pp. 537-560 19 </pages>
Reference-contexts: For simplicity, we do not allow objects to be object classes. This restriction is consistent with other formal object models <ref> [16] </ref>. An object can belong to multiple object classes at any one time and may 4 change classes as its properties change. In OSA diagrams, we represent an object class as a box enclosing the name of the object class as Figures 1-3 show.
References-found: 16

