URL: ftp://ftp.mathcs.emory.edu/pub/cstr/CSTR940302.ps
Refering-URL: http://www.mathcs.emory.edu/pious.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: moyer@mathcs.emory.edu  vss@mathcs.emory.edu  
Title: PIOUS: A Scalable Parallel I/O System for Distributed Computing Environments  
Author: Steven A. Moyer and V. S. Sunderam 
Date: March 1994  
Address: Atlanta, GA 30322, USA  
Affiliation: Department of Math and Computer Science Emory University,  
Pubnum: Computer Science Technical Report CSTR-940302  
Abstract: fl Research supported by the National Science Foundation, under award CCR-9118787, the U. S. Department of Energy, under grant DE-FG05-91ER25105, and the Office of Naval Research, under grant N00014-93-1-0278. y Revised version of this paper to appear in the Proceedings of the Scalable High-Performance Computing Conference, May, 1994. 
Abstract-found: 1
Intro-found: 1
Reference: [ABC + 90] <author> M. Arango, D. Berndt, N. Carriero, D. Gelernter, and D. Gilmore. </author> <title> Adventures with network Linda. </title> <journal> Supercomputer Review, </journal> <volume> 10(3) </volume> <pages> 42-46, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Parallel programming environments that exploit networked computing resources offer a cost-effective alternative to traditional parallel machines. Environments such as PVM [Sun90] and Linda <ref> [ABC + 90] </ref>, among others [Tur93], enable parallel-distributed application development by providing mechanisms for interprocess communication, synchronization and concurrency control, fault tolerance, and process management. However, many parallel applications require or could benefit from a unified parallel I/O system that such environments generally lack.
Reference: [BHG87] <author> Philip Bernstein, Vassos Hadzilacos, and Nathan Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <year> 1987. </year>
Reference-contexts: Furthermore, the architecture is relatively free of assumptions concerning the underlying transport and storage subsystems. A more detailed treatment of the PIOUS architecture is presented in [MS94]. 3 Transactions in PIOUS Parallel I/O operations in PIOUS are performed within the context of transactions <ref> [BHG87] </ref>, transparently to the user, to provide sequential consistency [Lam79] of access and tolerance of system failures. Referring to Figure 1, client library routines act as transaction managers for the data servers participating in a distributed transaction satisfying a user request. <p> Applications requiring fault tolerance can access files in the lower-performance, but guaranteed consistent, stable mode. The current PIOUS implementation does not provide applications with fault tolerance of media failures. Media fault tolerance is achieved by data replication on independent devices, either as multiple file copies <ref> [BHG87] </ref> or as computed parity information [PGK88]. Such techniques are independent of the file system architecture, provided that multiple independent storage devices can be accessed. 5 PIOUS Performance Study Performance results for our prototype PIOUS implementation are presented below.
Reference: [CFPB93] <author> Peter F. Corbett, Dror G. Feitelson, Jean-Pierre Prost, and Sandra J. Baylor. </author> <title> Parallel access to files in the Vesta file system. </title> <booktitle> In Proceedings of Supercomputing '93, </booktitle> <pages> pages 472-481, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: Parallel machines commonly provide a parallel file system interface; familiar examples include the Intel CFS [Pie89] and nCUBE Parallel I/O System [DdR92]. Such systems provide parallel applications with varying degrees of file access coordination and control and often employ data declustering to increase aggregate performance. The IBM Vesta <ref> [CFPB93] </ref> multicomputer file system implements two-dimensional files and a unique stencil-based logical partitioning operator to coordinate parallel file access. Swift [CL91] and Zebra [HO93] are research network file systems that implement data declustering across multiple servers with RAID-4/5 [PGK88] fault tolerance of media fail 14 Emory University CSTR-940302 ures.
Reference: [CL91] <author> Luis-Felipe Cabrera and Darrell D. E. Long. Swift: </author> <title> Using distributed disk striping to provide high I/O data rates. </title> <journal> Computing Systems, </journal> <volume> 4(4) </volume> <pages> 405-436, </pages> <month> Fall </month> <year> 1991. </year>
Reference-contexts: Such systems provide parallel applications with varying degrees of file access coordination and control and often employ data declustering to increase aggregate performance. The IBM Vesta [CFPB93] multicomputer file system implements two-dimensional files and a unique stencil-based logical partitioning operator to coordinate parallel file access. Swift <ref> [CL91] </ref> and Zebra [HO93] are research network file systems that implement data declustering across multiple servers with RAID-4/5 [PGK88] fault tolerance of media fail 14 Emory University CSTR-940302 ures.
Reference: [Cro89] <author> Thomas W. Crockett. </author> <title> File concepts for parallel I/O. </title> <booktitle> In Proceedings of Supercomputing '89, </booktitle> <pages> pages 574-579, </pages> <year> 1989. </year>
Reference-contexts: The set of file views currently supported in PIOUS is limited, though sufficient to implement a super-set of the common parallel file access patterns identified by Crockett <ref> [Cro89] </ref>. <p> Thus, while control messages may increase access latency for a given process, the aggregate data bandwidth of a process group should be only minimally effected. 5.3 File Access Benchmarks Performance measurements are presented below for benchmark applications that implement two common parallel file access patterns identified by Crockett <ref> [Cro89] </ref>: partitioned and self-scheduled. Partitioned access divides a linear file into contiguous blocks, with each block accessed sequentially by a different process. Self-scheduled access results when a linear file is accessed sequentially by a group of processes via a shared file pointer.
Reference: [DdR92] <author> Erik DeBenedictis and Juan Miguel del Rosario. </author> <title> nCUBE parallel I/O software. </title> <booktitle> In Eleventh Annual IEEE International Phoenix Conference on Computers and Communications (IPCCC), </booktitle> <pages> pages 0117-0124, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: A brief overview of this related work is presented below. Parallel machines commonly provide a parallel file system interface; familiar examples include the Intel CFS [Pie89] and nCUBE Parallel I/O System <ref> [DdR92] </ref>. Such systems provide parallel applications with varying degrees of file access coordination and control and often employ data declustering to increase aggregate performance. The IBM Vesta [CFPB93] multicomputer file system implements two-dimensional files and a unique stencil-based logical partitioning operator to coordinate parallel file access.
Reference: [HO93] <author> John H. Hartman and John K. Ousterhout. </author> <title> The Zebra striped network file system. </title> <booktitle> In Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 29-43, </pages> <year> 1993. </year>
Reference-contexts: Such systems provide parallel applications with varying degrees of file access coordination and control and often employ data declustering to increase aggregate performance. The IBM Vesta [CFPB93] multicomputer file system implements two-dimensional files and a unique stencil-based logical partitioning operator to coordinate parallel file access. Swift [CL91] and Zebra <ref> [HO93] </ref> are research network file systems that implement data declustering across multiple servers with RAID-4/5 [PGK88] fault tolerance of media fail 14 Emory University CSTR-940302 ures. Zebra is unique in that it incorporates a log-structured file system that allows striping to be performed on a per client basis.
Reference: [Lam79] <author> Leslie Lamport. </author> <title> How to make a multiprocessor computer that correctly executes multiprocess programs. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-28(9):690-691, </volume> <month> September </month> <year> 1979. </year>
Reference-contexts: A more detailed treatment of the PIOUS architecture is presented in [MS94]. 3 Transactions in PIOUS Parallel I/O operations in PIOUS are performed within the context of transactions [BHG87], transparently to the user, to provide sequential consistency <ref> [Lam79] </ref> of access and tolerance of system failures. Referring to Figure 1, client library routines act as transaction managers for the data servers participating in a distributed transaction satisfying a user request. The PIOUS architecture defines two distinct transaction types: stable and volatile. Both transaction types guarantee serializability of access.
Reference: [MS94] <author> Steven A. Moyer and V. S. Sunderam. </author> <title> A parallel I/O system for high-performance distributed computing. </title> <type> Technical Report CSTR-940101, </type> <institution> Emory University, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: Furthermore, the architecture is relatively free of assumptions concerning the underlying transport and storage subsystems. A more detailed treatment of the PIOUS architecture is presented in <ref> [MS94] </ref>. 3 Transactions in PIOUS Parallel I/O operations in PIOUS are performed within the context of transactions [BHG87], transparently to the user, to provide sequential consistency [Lam79] of access and tolerance of system failures. <p> Only general PIOUS interface concepts are discussed; the current file system model is detailed in <ref> [MS94] </ref>. For the remainder of this text the term PIOUS refers to our particular implementation 3 Emory University CSTR-940302 of the PIOUS architecture.
Reference: [PGK88] <author> David Patterson, Garth Gibson, and Randy Katz. </author> <title> A case for redundant arrays of inexpensive disks (RAID). </title> <booktitle> In ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 109-116, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: The current PIOUS implementation does not provide applications with fault tolerance of media failures. Media fault tolerance is achieved by data replication on independent devices, either as multiple file copies [BHG87] or as computed parity information <ref> [PGK88] </ref>. Such techniques are independent of the file system architecture, provided that multiple independent storage devices can be accessed. 5 PIOUS Performance Study Performance results for our prototype PIOUS implementation are presented below. The PIOUS prototype consists of fully functional data servers (PDS) and a limited set of library routines. <p> The IBM Vesta [CFPB93] multicomputer file system implements two-dimensional files and a unique stencil-based logical partitioning operator to coordinate parallel file access. Swift [CL91] and Zebra [HO93] are research network file systems that implement data declustering across multiple servers with RAID-4/5 <ref> [PGK88] </ref> fault tolerance of media fail 14 Emory University CSTR-940302 ures. Zebra is unique in that it incorporates a log-structured file system that allows striping to be performed on a per client basis. However, Swift and Zebra are not parallel file systems as they lack support for parallel application development.
Reference: [Pie89] <author> Paul Pierce. </author> <title> A concurrent file system for a highly parallel mass storage system. </title> <booktitle> In Fourth Conference on Hypercube Concurrent Computers and Applications, </booktitle> <pages> pages 155-160, </pages> <year> 1989. </year>
Reference-contexts: A brief overview of this related work is presented below. Parallel machines commonly provide a parallel file system interface; familiar examples include the Intel CFS <ref> [Pie89] </ref> and nCUBE Parallel I/O System [DdR92]. Such systems provide parallel applications with varying degrees of file access coordination and control and often employ data declustering to increase aggregate performance.
Reference: [Sal87] <author> John Salmon. CUBIX: </author> <title> Programming hypercubes without programming hosts. </title> <booktitle> In Proceedings of the Second Conference on Hypercube Multiprocessors, </booktitle> <pages> pages 3-9, </pages> <year> 1987. </year> <institution> Emory University CSTR-940302 </institution>
Reference-contexts: Zebra is unique in that it incorporates a log-structured file system that allows striping to be performed on a per client basis. However, Swift and Zebra are not parallel file systems as they lack support for parallel application development. Express is a CUBIX-model <ref> [Sal87] </ref> parallel computing environment that implements a parallel file system interface. However, in network environments, Express does not employ data declustering to aggregate the performance of distributed resources. PIOUS extends the work of existing parallel file systems by incorporating transactions as a generalized concurrency control and fault tolerance mechanism.
Reference: [SGM86] <author> Kenneth Salem and Hector Garcia-Molina. </author> <title> Disk striping. </title> <booktitle> In IEEE 1986 Conference on Data Engineering, </booktitle> <pages> pages 336-342, </pages> <year> 1986. </year>
Reference-contexts: Thus the linear file mapping provided by the independent and global views results in a data distribution pattern that is equivalent to disk striping <ref> [SGM86] </ref>. In disk striping, a linear sequence of fixed size data blocks, called striping units, are distributed in a round-robin fashion across some number of storage devices. A data stripe consists of the set of striping units distributed in a single round. This terminology is used in defining benchmark parameters.
Reference: [Sun90] <author> V. S. Sunderam. </author> <title> PVM: A framework for parallel distributed computing. </title> <journal> Con-currency: Practice and Experience, </journal> <volume> 2(4) </volume> <pages> 315-339, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Parallel programming environments that exploit networked computing resources offer a cost-effective alternative to traditional parallel machines. Environments such as PVM <ref> [Sun90] </ref> and Linda [ABC + 90], among others [Tur93], enable parallel-distributed application development by providing mechanisms for interprocess communication, synchronization and concurrency control, fault tolerance, and process management. However, many parallel applications require or could benefit from a unified parallel I/O system that such environments generally lack. <p> The service coordinator (PSC) has not been implemented; however the PSC does not participate in general file access and thus does not impact our results. The PIOUS prototype is implemented within the PVM <ref> [Sun90] </ref> distributed computing environment. Standard PVM message passing services are utilized for all communication between components of the system.
Reference: [Tur93] <author> L. H. Turcotte. </author> <title> A survey of software environments for exploiting networked computing resources. </title> <type> Technical report, </type> <institution> Mississippi State University, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Parallel programming environments that exploit networked computing resources offer a cost-effective alternative to traditional parallel machines. Environments such as PVM [Sun90] and Linda [ABC + 90], among others <ref> [Tur93] </ref>, enable parallel-distributed application development by providing mechanisms for interprocess communication, synchronization and concurrency control, fault tolerance, and process management. However, many parallel applications require or could benefit from a unified parallel I/O system that such environments generally lack.
References-found: 15

