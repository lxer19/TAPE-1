URL: http://www.csl.sri.com/reports/postscript/epri91.ps.gz
Refering-URL: http://www.csl.sri.com/reports/postscript/
Root-URL: 
Title: Formal Specification and Verification for Critical Systems: Tools, Achievements, and Prospects unambiguous and that can
Keyword: Formal specification and verification use mathematical techniques to help document, specify, design, analyze, or certify computer software and hardware.  
Address: Menlo Park CA 94025 USA  
Affiliation: Computer Science Laboratory SRI International  
Note: John Rushby  Mathematically-based notation can provide specifications that are precise and  
Abstract: Presented at Electric Power Research Institute (EPRI) Workshop on Methodologies for Cost-Effective, Reliable Software Verification and Validation, Chicago, IL, 7-9 August 1991. Published in EPRI TR-100294, January 1992, pages 9-1 to 9-14. Reprinted in "Advances in Ultra-Dependable Distributed Systems," N. Suri, C. J. Walter and M. M. Hugue, Eds., pp. 282-296, IEEE Computer Society, 1995. Note: this paper is now rather old. A more uptodate treatment of similar topics can be found in "Formal Verification for Fault-Tolerant Architectures: Prolegomena to the Design of PVS " by Sam Owre, John Rushby, Natarajan Shankar, and Friedrich von Henke, IEEE Transactions on Software Engineering, Vol. 21 No. 2 (feb. 1995) pp. 107-125. fl Abstract This paper describes some of the issues in the design and use of formal specification languages and verification systems, outlines some examples of the application of formal methods to critical systems, and identifies the benefits that may be obtained from this technology.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Anonymous. </author> <title> Reprogramming capability proves key to extending Voyager 2's journey. </title> <booktitle> Aviation Week and Space Technology, </booktitle> <pages> page 72, </pages> <month> August 7, </month> <year> 1989. </year>
Reference-contexts: For example, the failure of the first attempt to launch the Space Shuttle was due to a synchronization problem [14], and some observations were lost when the heavy radiation environment at Jupiter caused one of the clocks on the Voyager spacecraft to jump several seconds <ref> [1] </ref>. The basic means for achieving fault-tolerant synchronization is for each processor to periodically exchange clock values with the other processors, compute a consensus reading from these values, and adjust its own local clock to reflect the consensus.
Reference: [2] <author> G. H. Archinoff, R. J. Hohendorf, A. Wassyng, B. Quigley, and M. R. Borsch. </author> <title> Verification of the shutdown system software at the Darlington nuclear generating station. </title> <booktitle> In International Conference on Control and Instrumentation in Nuclear Installations, </booktitle> <address> Glasgow, UK, </address> <month> May </month> <year> 1990. </year> <title> The Institution of Nuclear Engineers. </title>
Reference-contexts: Already, formal methods have been applied in the analysis of the shutdown system for the Canadian Darlington Nuclear Reactor <ref> [2] </ref>. That experience, probably because it was unplanned and because no automated tools were available, was not an entirely satisfactory one.
Reference: [3] <author> W. R. Bevier and W. D. Young. </author> <title> The design and proof of correctness of a fault-tolerant circuit. </title> <booktitle> In Meyer and Schlichting [21], </booktitle> <pages> pages 243-260. </pages>
Reference-contexts: I consider that these exercises clearly demonstrate the value of formal verification in clarifying and correcting the underpinnings of difficult and critical algorithms. Others working on NASA contracts have formally verified an algorithm and hardware implementations for the Byzantine fault-tolerant distribution of sensor samples <ref> [3, 30] </ref> and several other facets of the overall problem are under current investigation. Much other work on formal verification in the USA has been concerned with secure computer systems, where formal methods are required for the highest level of certification [11].
Reference: [4] <author> William R. Bevier, Warren A. Hunt, Jr., J Strother Moore, and William D. Young. </author> <title> An approach to systems verification. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 5(4) </volume> <pages> 411-428, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: The Boyer-Moore system, on the other hand, uses a very limited, raw logic as its specification language, but has a very powerful theorem prover that has been used to undertake several large and complete formal verifications <ref> [4] </ref>. We consider neither of these extremes to be ideal. A specification language is used for communication and should facilitate clear and straightforward expression using familiar notations. In addition, specifications tend to be large, so that mechanisms for structuring them into modules and parameterizing them for re-use are essential. <p> Although formal verification from "top to bottom" (e.g., from the requirements on a simple program, through the program, compiler, assembler, and hardware design down to the elementary logic gates) has been demonstrated <ref> [4] </ref>, it must still be considered a tour de force rather than a routine capability.
Reference: [5] <author> R. S. Boyer and J S. Moore. </author> <title> A Computational Logic Handbook. </title> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1988. </year>
Reference-contexts: In this trade-off, the extremes are illustrated by the Z notation [29] from Oxford University, and the computational logic of Boyer and Moore <ref> [5] </ref>. Z is very rich 4 specification notation based on set theory which has been used to document several system designs [16], but for which only elementary mechanical support is available.
Reference: [6] <author> Bishop Brock and Warren A. Hunt, Jr. </author> <title> Report on the formal specification and partial verification of the VIPER microprocessor. </title> <booktitle> In COMPASS '91 (Proceedings of the Sixth Annual Conference on Computer Assurance), </booktitle> <pages> pages 91-98, </pages> <address> Gaithersburg, MD, </address> <month> June </month> <year> 1991. </year> <institution> IEEE Washington Section. </institution>
Reference-contexts: Elsewhere, HOL has been used in the partial verification of the Viper microprocessor for safety-critical applications [10] (though some aspects of the presentation of that work have been criticised <ref> [6] </ref>), and a number of other applications of formal methods are described in the September 1990 special issue of IEEE Software.
Reference: [7] <institution> The HOL System. Cambridge Computer Science Research Center, SRI International, </institution> <address> Cambridge, England, </address> <month> December </month> <year> 1989. </year> <title> Three volumes: Description, Tutorial, and Reference Manual. </title>
Reference: [8] <author> J. H. Cheng and C. B. Jones. </author> <title> On the usability of logics which handle partial functions. </title> <editor> In Carroll Morgan and J. C. P. Woodcock, editors, </editor> <booktitle> Proceedings of the Third Refinement Workshop, </booktitle> <pages> pages 51-69. </pages> <publisher> Springer-Verlag Workshops in Computing, </publisher> <year> 1990. </year>
Reference-contexts: Some of the basic concepts employed in Z are simply difficult to deal with (for example, partial functions can require three-valued logics <ref> [8] </ref>, or logics of partial terms [13], or other exotic treatments). In my opinion, those who have not developed full mechanical support for their specification languages underestimate the scale of the challenge, and those that have not done hard verifications underestimate the theorem proving power that is needed.
Reference: [9] <author> E. M. Clarke, E. A. Emerson, and A. P. Sistla. </author> <title> Automatic verification of finite-state concurrent systems using temporal logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Certain verification problems in temporal logic can be solved completely automatically using a technique known as model-checking <ref> [9] </ref>. 3 Accomplisments of Formal Methods Despite the advances reported in the previous section, effective general-purpose tools for formal specification and verification are only just emerging from the laboratory, and are still difficult and time-consuming to use.
Reference: [10] <author> W. J. Cullyer. </author> <title> Implementing safety critical systems: The viper microprocessor. </title> <editor> In G. Birtwistle and P. A. Subrahmanyam, editors, </editor> <booktitle> VLSI Specification, Verification and Synthesis, </booktitle> <pages> pages 1-26. </pages> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1988. </year>
Reference-contexts: Much other work on formal verification in the USA has been concerned with secure computer systems, where formal methods are required for the highest level of certification [11]. Elsewhere, HOL has been used in the partial verification of the Viper microprocessor for safety-critical applications <ref> [10] </ref> (though some aspects of the presentation of that work have been criticised [6]), and a number of other applications of formal methods are described in the September 1990 special issue of IEEE Software.
Reference: [11] <institution> Department of Defense Trusted Computer System Evaluation Criteria. Depart--ment of Defense, </institution> <month> December </month> <year> 1985. </year> <note> DOD 5200.28-STD (supersedes CSC-STD-001-83). </note>
Reference-contexts: Much other work on formal verification in the USA has been concerned with secure computer systems, where formal methods are required for the highest level of certification <ref> [11] </ref>.
Reference: [12] <author> Ben L. Di Vito, Ricky W. Butler, and James L. Caldwell. </author> <title> High level design proof of a reliable computing platform. </title> <booktitle> In Meyer and Schlichting [21], </booktitle> <pages> pages 279-306. </pages>
Reference-contexts: These serious difficulties in plausibly simple designs have stimulated research into principled approaches to redundancy management for flight control systems that will yield predictable behavior. The favored approach uses synchronized channels, Byzantine fault-tolerant distribution of sensor data to all channels, and exact-match voting <ref> [12] </ref>. Synchronization requires that the clocks of the individual channels be kept within some bounded skew of each other, so that each channel will perform the same computations and will be ready to participate in votes and the distribution of sensor data at approximately the same time. <p> A related application undertaken for NASA was the formal specification and verification of a model for fault-masking and transient-recovery in digital flight-control systems [24]. The interest here is that the formal development in Ehdm was undertaken in parallel with a similarly detailed development using conventional pencil-and-paper mathematical notation <ref> [12] </ref>. The Ehdm version took no longer to develop than the other, is more general, is equally readable, and has been fully verified.
Reference: [13] <author> S. Feferman. </author> <title> Polymorphic typed lambda-calculi in a type-free axiomatic framework. </title> <editor> In W. Sieg, editor, </editor> <booktitle> Logic And Computation, </booktitle> <pages> pages 101-136. </pages> <publisher> American Mathematical Society, </publisher> <year> 1990. </year>
Reference-contexts: Some of the basic concepts employed in Z are simply difficult to deal with (for example, partial functions can require three-valued logics [8], or logics of partial terms <ref> [13] </ref>, or other exotic treatments). In my opinion, those who have not developed full mechanical support for their specification languages underestimate the scale of the challenge, and those that have not done hard verifications underestimate the theorem proving power that is needed.
Reference: [14] <author> John R. Garman. </author> <title> The "bug" heard 'round the world. </title> <journal> ACM Software Engineering Notes, </journal> <volume> 6(5) </volume> <pages> 3-10, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: Consequently, early synchronization protocols were seriously flawed. For example, the failure of the first attempt to launch the Space Shuttle was due to a synchronization problem <ref> [14] </ref>, and some observations were lost when the heavy radiation environment at Jupiter caused one of the clocks on the Voyager spacecraft to jump several seconds [1].
Reference: [15] <author> M. Gordon. </author> <title> HOL: A machine oriented formulation of higher order logic. </title> <type> Technical Report 68, </type> <institution> University of Cambridge Computer Laboratory, </institution> <address> Cambridge, England, </address> <month> July </month> <year> 1985. </year>
Reference: [16] <author> Ian Hayes, </author> <title> editor. Specification Case Studies. </title> <publisher> Prentice-Hall International Ltd., </publisher> <address> Hemel Hempstead, UK, </address> <note> second edition, </note> <year> 1993. </year>
Reference-contexts: In this trade-off, the extremes are illustrated by the Z notation [29] from Oxford University, and the computational logic of Boyer and Moore [5]. Z is very rich 4 specification notation based on set theory which has been used to document several system designs <ref> [16] </ref>, but for which only elementary mechanical support is available. The Boyer-Moore system, on the other hand, uses a very limited, raw logic as its specification language, but has a very powerful theorem prover that has been used to undertake several large and complete formal verifications [4].
Reference: [17] <author> Imre Lakatos. </author> <title> Proofs and Refutations. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England, </address> <year> 1976. </year>
Reference-contexts: outcomes of a proof attempt; the real benefit comes from failed proof attempts, since these challenge us to revise our hypotheses, sharpen our statements, and achieve a deeper understanding of our problem: 7 "The virtue of a logical proof is not that it compels belief but that it suggests doubts." <ref> [17, page 48] </ref> These limitations on the utility of powerful automatic theorem proving in the large do not apply in the small. Routine manipulations of arithmetic, equalities, disequalities, and inequalities can, and should, be completely mechanized.
Reference: [18] <author> L. Lamport and P. M. Melliar-Smith. </author> <title> Synchronizing clocks in the presence of faults. </title> <journal> Journal of the ACM, </journal> <volume> 32(1) </volume> <pages> 52-78, </pages> <month> January </month> <year> 1985. </year>
Reference-contexts: Of course, the clock synchronization and the distribution and voting protocols must themselves be fault-tolerant, and the subtlety and delicacy of these protocols were not properly understood prior to the investigations of the SIFT project <ref> [18, 23] </ref>. Consequently, early synchronization protocols were seriously flawed. <p> An algorithm that can cope with such failures is said to be Byzantine fault-tolerant [19]. There are a number of algorithms for Byzantine fault-tolerant clock synchronization, including one known as Interactive Convergence <ref> [18] </ref>. These algorithms themselves are fairly simple to describe, but the reasoning required to establish their correctness is extremely delicate. The difficulty stems from having to simultaneously deal with relative and absolute clock drifts, processor failures, reading errors, and the complicated arithmetic that is involved. The journal proof [18] that the <p> Interactive Convergence <ref> [18] </ref>. These algorithms themselves are fairly simple to describe, but the reasoning required to establish their correctness is extremely delicate. The difficulty stems from having to simultaneously deal with relative and absolute clock drifts, processor failures, reading errors, and the complicated arithmetic that is involved. The journal proof [18] that the Interactive Convergence Clock Synchronization Algorithm maintains synchronization despite the occurrence of Byzantine faults comprises five lemmas and a main theorem. Our analysis, using Ehdm, demonstrated that four of the five lemmas, and the main theorem, were false as stated [25].
Reference: [19] <author> Leslie Lamport, Robert Shostak, and Marshall Pease. </author> <title> The Byzantine Generals problem. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(3) </volume> <pages> 382-401, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: The difficulty is that processors can fail in arbitrary, unpredictable ways and can upset the consensus by communicating one clock value to one processor and a different clock value to another. An algorithm that can cope with such failures is said to be Byzantine fault-tolerant <ref> [19] </ref>. There are a number of algorithms for Byzantine fault-tolerant clock synchronization, including one known as Interactive Convergence [18]. These algorithms themselves are fairly simple to describe, but the reasoning required to establish their correctness is extremely delicate.
Reference: [20] <author> Dale A. Mackall. </author> <title> Development and flight test experiences with a flight-crucial digital control system. </title> <type> NASA Technical Paper 2857, </type> <institution> NASA Ames Research Center, Dryden Flight Research Facility, Edwards, </institution> <address> CA, </address> <year> 1988. </year>
Reference-contexts: Unfortunately, its flight tests revealed numerous problems in the approach, to the extent that redundancy management became the primary source of unreliability in the control system and an impediment to testing <ref> [20, pp. 40-41] </ref>. These serious difficulties in plausibly simple designs have stimulated research into principled approaches to redundancy management for flight control systems that will yield predictable behavior. The favored approach uses synchronized channels, Byzantine fault-tolerant distribution of sensor data to all channels, and exact-match voting [12].
Reference: [21] <author> J. F. Meyer and R. D. Schlichting, </author> <title> editors. Dependable Computing for Critical Applications|2, volume 6 of Dependable Computing and Fault-Tolerant Systems. </title> <publisher> Springer-Verlag, </publisher> <address> Vienna, Austria, </address> <month> February </month> <year> 1991. </year>
Reference: [22] <author> M. Moriconi and D. F. Hare. </author> <title> Visualizing program designs through PegaSys. </title> <journal> IEEE Computer, </journal> <volume> 18(8) </volume> <pages> 72-85, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: These properties are very important to system maintenance, since they allow some of the ramifications of changes to be evaluated. From the point of view of formal specification and verification, they have the advantage that specifications can be represented by pictures, and the formal verification can be completely automated <ref> [22] </ref>. Working with a company involved in power generation and distribution, our laboratory is developing tools for applying formal methods to such pictorial representations of system structure. Another specialized domain is associated with temporal logic.
Reference: [23] <author> M. Pease, R. Shostak, and L. Lamport. </author> <title> Reaching agreement in the presence of faults. </title> <journal> Journal of the ACM, </journal> <volume> 27(2) </volume> <pages> 228-234, </pages> <month> April </month> <year> 1980. </year> <month> 14 </month>
Reference-contexts: Of course, the clock synchronization and the distribution and voting protocols must themselves be fault-tolerant, and the subtlety and delicacy of these protocols were not properly understood prior to the investigations of the SIFT project <ref> [18, 23] </ref>. Consequently, early synchronization protocols were seriously flawed.
Reference: [24] <author> John Rushby. </author> <title> Formal specification and verification of a fault-masking and transient-recovery model for digital flight-control systems. </title> <type> Technical Report SRI-CSL-91-3, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> January </month> <year> 1991. </year> <note> Also available as NASA Contractor Report 4384, </note> <month> July </month> <year> 1991. </year>
Reference-contexts: A related application undertaken for NASA was the formal specification and verification of a model for fault-masking and transient-recovery in digital flight-control systems <ref> [24] </ref>. The interest here is that the formal development in Ehdm was undertaken in parallel with a similarly detailed development using conventional pencil-and-paper mathematical notation [12]. The Ehdm version took no longer to develop than the other, is more general, is equally readable, and has been fully verified.
Reference: [25] <author> John Rushby and Friedrich von Henke. </author> <title> Formal verification of the Interactive Convergence clock synchronization algorithm using Ehdm. </title> <type> Technical Report SRI-CSL-89-3R, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <note> February 1989 (Revised August 1991). Original version also available as NASA Contractor Report 4239, </note> <month> June </month> <year> 1989. </year>
Reference-contexts: The journal proof [18] that the Interactive Convergence Clock Synchronization Algorithm maintains synchronization despite the occurrence of Byzantine faults comprises five lemmas and a main theorem. Our analysis, using Ehdm, demonstrated that four of the five lemmas, and the main theorem, were false as stated <ref> [25] </ref>. As far as we know, these flaws had not previously been detected by the "social pro 10 cess" of informal peer scrutiny to which the journal paper has been subjected since its publication.
Reference: [26] <author> John Rushby, Friedrich von Henke, and Sam Owre. </author> <title> An introduction to formal specification and verification using Ehdm. </title> <type> Technical Report SRI-CSL-91-2, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> February </month> <year> 1991. </year>
Reference-contexts: This is higher-order logic (also known as the simple theory of types), and it is the basis of the HOL system from Cambridge [7,15] and our own Ehdm system <ref> [26] </ref>. Higher-order logic is very expressive, but a specification language must also provide a carefully selected set of built-in data types and type-constructors. In Ehdm, for example, the integer and rational numbers are built in, as are constructors such as arrays, records, tuples, and enumerations.
Reference: [27] <author> John Rushby and R. Alan Whitehurst. </author> <title> Formal verification of AI software. </title> <type> Contractor Report 181827, </type> <institution> NASA Langley Research Center, Hampton, VA, </institution> <month> February </month> <year> 1989. </year> <title> (Work performed by SRI International). </title>
Reference-contexts: Application of formal methods to expert systems and AI software has also been considered <ref> [27, 31] </ref>. 4 Prospects for Formal Methods Steady progress over the last 15 years has resulted in a variety of effective languages and tools for formal specification and verification and I would expect and hope that these will be of value to the power industry.
Reference: [28] <author> Robert E. Shostak. </author> <title> A practical decision procedure for arithmetic with function symbols. </title> <journal> Journal of the ACM, </journal> <volume> 26(2) </volume> <pages> 351-360, </pages> <month> April </month> <year> 1979. </year>
Reference-contexts: This is so because a human reviewer does not need to examine the argument for elementary deductions such as x y z x + 1 &gt; z, and because complete decision procedures are available (at least for the ground case) <ref> [28] </ref>, so that their behavior is predictable. It is hard to overestimate the contribution of the decision procedures in Ehdm towards the successful completion of the verifications that we have performed.
Reference: [29] <author> J. M. Spivey, </author> <title> editor. The Z Notation: A Reference Manual. </title> <publisher> Prentice Hall International Series in Computer Science. Prentice Hall, </publisher> <address> Hemel Hempstead, UK, </address> <note> second edition, </note> <year> 1993. </year>
Reference-contexts: The major design trade-off that must be made in a general-purpose specification language is that between its convenience and expressiveness as a specification medium, and the automation and effectiveness of the mechanical support that can be provided. In this trade-off, the extremes are illustrated by the Z notation <ref> [29] </ref> from Oxford University, and the computational logic of Boyer and Moore [5]. Z is very rich 4 specification notation based on set theory which has been used to document several system designs [16], but for which only elementary mechanical support is available.
Reference: [30] <author> Mandayam Srivas and Mark Bickford. </author> <title> Verification of the FtCayuga fault-tolerant microprocessor system, volume 1: A case-study in theorem prover-based verification. </title> <type> Contractor Report 4381, </type> <institution> NASA Langley Research Center, Hampton, VA, </institution> <month> July </month> <year> 1991. </year> <title> (Work performed by ORA Corporation). </title>
Reference-contexts: I consider that these exercises clearly demonstrate the value of formal verification in clarifying and correcting the underpinnings of difficult and critical algorithms. Others working on NASA contracts have formally verified an algorithm and hardware implementations for the Byzantine fault-tolerant distribution of sensor samples <ref> [3, 30] </ref> and several other facets of the overall problem are under current investigation. Much other work on formal verification in the USA has been concerned with secure computer systems, where formal methods are required for the highest level of certification [11].
Reference: [31] <author> Richard J. Waldinger and Mark E. Stickel. </author> <title> Proving properties of rule-based systems. </title> <booktitle> In Proceedings of the Seventh Conference on Artificial Intelligence Applications, </booktitle> <pages> pages 81-88, </pages> <address> Miami Beach, FL, </address> <month> February </month> <year> 1991. </year> <journal> IEEE Computer Society. </journal> <volume> 15 </volume>
Reference-contexts: Application of formal methods to expert systems and AI software has also been considered <ref> [27, 31] </ref>. 4 Prospects for Formal Methods Steady progress over the last 15 years has resulted in a variety of effective languages and tools for formal specification and verification and I would expect and hope that these will be of value to the power industry.
References-found: 31

