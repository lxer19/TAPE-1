URL: http://www.cs.washington.edu/homes/aberman/Papers/NDSFFAM.ps
Refering-URL: http://www.cs.washington.edu/homes/aberman/
Root-URL: 
Email: aberman@cs.washington.edu  
Title: A New Data Structure For Fast Approximate Matching  
Author: Andrew P. Berman 
Date: March 2, 1994  
Affiliation: University of Washington Department of Computer Science  
Abstract: Given a set of objects S and a metric D, we describe how to represent S as a new data structure, the triangulation trie. This data structure can be used to search through S quickly to find approximate matches to a given object. Using the triangle inequality, the search tree is repeatedly pruned to reduce the number of object comparisons required. Much of the work is done within the tree using integer comparisons. This method can result in very fast database searches in applications where object comparisons are traditionally costly. Furthermore, the data structure seems to be applicable to a very wide variety of object types. The trie is unusual in its construction in that objects are partitioned according to their respective distances from a common set of "key" objects.
Abstract-found: 1
Intro-found: 1
Reference: [AGM + 90] <author> S. F. Altschul, W. Gish, W. Miller, E. W. Myers, and D. J. Lipman. </author> <title> Basic local alignment search tool. </title> <journal> Journal of Molecular Biology, </journal> <volume> 215(3) </volume> <pages> 403-410, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Thus, in database searching, there is a need for sublinear searches, where most of the database is never directly examined. Some current methods of pruning database searches include using some subroutine other than the original distance measure D defined on U . For example, the BLAST <ref> [AGM + 90] </ref> algorithm for genetic databases uses comparisons on short subsequences 1 of the DNA in question. While BLAST is very fast, this method of using subsequences cannot be applied to other pattern-matching problems where the term "subsequence" may have no meaning.
Reference: [BYCMWar] <author> R. Baeza-Yates, W. Cunto, U. Manber, and S. Wu. </author> <title> Proximity matching using fixed-queries trees. In Combinatorial Pattern Matching, </title> <note> June 1994 (to appear). </note>
Reference-contexts: In Section 6, we show how this data structure could be used to organize and search through a database of dresses in a department store catalog. We have recently become aware that a paper containing similar results will be presented at the June Combinatorial Pattern Matching Conference <ref> [BYCMWar] </ref>. 2 Constructing The Triangulation Trie We make the simplifying assumption that distances are integer-valued. For objects with real-valued distance measures, some mapping into an integer-valued distance measure must be made. The construction of the trie is simple: We first choose a set of key objects from our universal set.
Reference: [Fel70] <author> W. Feller. </author> <title> An Introduction to Probability Theory and its Applications. </title> <publisher> John Wiley & Sons, </publisher> <address> third, </address> <note> revised edition, </note> <year> 1970. </year>
Reference-contexts: Then the following approximation holds: P (R (d) k) ! ( p ) ( p ) where (x) is the cumulative distribution function of the standard normal random variable. Proof: We use the DeMoivre-Laplace Limit Theorem <ref> [Fel70] </ref>. R (d) is no greater than k if the difference between rightward and leftward moves is no greater than k. This means that there are between dk 2 and d+k 2 rightward moves.
Reference: [Fre60] <author> E. Fredkin. </author> <title> Trie memory. </title> <journal> Communications of the ACM, </journal> (3):490-499, 1960. 
Reference-contexts: Note that the performance of searches in the trie depends on the choice of the key objects. We create a vector for each object in the database consisting of the ordered set of distances to the key objects. These vectors are then combined into a trie <ref> [Fre60] </ref>. The trie is a compact representation of the distances from the objects in our database to this set of "keys". Each path from the root to a leaf represents the ordered set of distances from the keys to the objects in that leaf.
Reference: [GJ79] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability, A Guide to the Theory of NP-Completeness. </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <year> 1979. </year>
Reference-contexts: It is not known if the question of whether two graphs are isomorphic is NP-complete <ref> [GJ79] </ref>, but so far, nobody has come up with a polynomial time solution. Since learning D (G 1 ; G 2 ) answers the question of whether G 1 and G 2 are isomorphic, it is safe to say that no polynomial-time method of computing D is currently known.
Reference: [NW70] <author> S. B. Needleman and C. D. Wunsch. </author> <title> A general method applicable to the search for similarities in the amino acid sequence of two proteins. </title> <journal> Journal of Molecular Biology, </journal> <volume> 48 </volume> <pages> 443-453, </pages> <year> 1970. </year> <month> 10 </month>
Reference-contexts: Given integer k and x 2 U , the goal is to find all y 2 S such that D (x; y) k. It can be expensive to find D (x; y) for certain U and D. For example, in the sequence alignment problem <ref> [NW70] </ref>, finding D (x; y) takes time proportional to jxjjyj. Thus, in database searching, there is a need for sublinear searches, where most of the database is never directly examined.
References-found: 6

