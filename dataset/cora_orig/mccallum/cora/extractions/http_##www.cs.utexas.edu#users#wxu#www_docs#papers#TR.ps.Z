URL: http://www.cs.utexas.edu/users/wxu/www_docs/papers/TR.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/wxu/www_docs/selected_paper.html
Root-URL: 
Email: wei@ticam.utexas.edu  fussell@cs.utexas.edu  
Title: Subdivision Tree Representation of Arbitrary Triangle Meshes  
Author: Wei Xu TICAM Don Fussell 
Date: January 15, 1998  
Address: Austin, TX 78712  Austin, TX 78712  
Affiliation: University of Texas at Austin  Computer Science Department University of Texas at Austin  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> Chow, M., </author> <title> Optimized Geometry Compression for Real-time Rendering, </title> <booktitle> Proc. of Visualization'97, </booktitle> <month> Oct., </month> <year> 1997 </year>
Reference-contexts: Usually, the topological information is independent from geometric information, except some special cases such as regular grid, or Delaunay Triangulations, where geometric information is able to determine connectivity. Most current methods try to generate long triangle strips <ref> [5, 3, 13, 1] </ref> to code mesh connectivity so that they can be used in some graphical library such as OpenGL. Some methods use vertex split/merge to code topological information implicitely [6, 9]. The hierarchical triangulation presented in [4] discussed the representations of meshes in tree structures.
Reference: [2] <author> Barnsley, M. and Hurd, </author> <title> L.P., Fractal Image Compression, AK Peters, </title> <publisher> Ltd., </publisher> <year> 1993 </year>
Reference-contexts: Otherwise, a more complicated scheme called arithematic coding can be used so that the average coding length l average is as close to the entropy bound as possible <ref> [2] </ref>. Huffman and arithmetic coding are both often called entropy coding techniques. When we analyze efficiency of a compression method theoretically, we can use the entropy of its output message without actually encoding the message.
Reference: [3] <author> Deering, M., </author> <title> Geometry Compression, </title> <address> SIGGRAPH'95, </address> <month> Aug., </month> <year> 1995 </year>
Reference-contexts: 0.1 Introduction Triangle meshes are popular in graphics and other application areas. One problem in dealing with meshes is to store topological information or connectivity of meshes. Recently, some methods have been presented to efficiently code meshes <ref> [5, 3, 4, 13, 6, 9] </ref>. A recent survey can be found in [12]. A triangle mesh has two different parts: topological information and geometric information. <p> Usually, the topological information is independent from geometric information, except some special cases such as regular grid, or Delaunay Triangulations, where geometric information is able to determine connectivity. Most current methods try to generate long triangle strips <ref> [5, 3, 13, 1] </ref> to code mesh connectivity so that they can be used in some graphical library such as OpenGL. Some methods use vertex split/merge to code topological information implicitely [6, 9]. The hierarchical triangulation presented in [4] discussed the representations of meshes in tree structures. <p> A generalized triangle strip method includes swap commands in a triangle strip [5]. Its BT rate is roughly 1 2 log 2 n+c for c 2 (BT). Deering developed the notion of generalized triangle mesh to reuse a limited number previously appearing vertices stored in a buffer <ref> [3] </ref>. The BT rate is about 1 16 log 2 n + 4 (BT). PM in [6] uses about 1 2 log 2 n + 2:5 (BT) for topological coding. And modified PM in [11] uses 1 2 log 2 n + 3:5 (BT).
Reference: [4] <author> De Floriani, L. and Puppo, E., </author> <title> Hierarchical Triangulation for Multiresolution Surface Description, </title> <journal> ACM Trans. on Graphics, Vol.14, </journal> <volume> N.4, </volume> <pages> pages 363-411, </pages> <year> 1995 </year>
Reference-contexts: 0.1 Introduction Triangle meshes are popular in graphics and other application areas. One problem in dealing with meshes is to store topological information or connectivity of meshes. Recently, some methods have been presented to efficiently code meshes <ref> [5, 3, 4, 13, 6, 9] </ref>. A recent survey can be found in [12]. A triangle mesh has two different parts: topological information and geometric information. <p> Most current methods try to generate long triangle strips [5, 3, 13, 1] to code mesh connectivity so that they can be used in some graphical library such as OpenGL. Some methods use vertex split/merge to code topological information implicitely [6, 9]. The hierarchical triangulation presented in <ref> [4] </ref> discussed the representations of meshes in tree structures. A recursive refinement of meshes naturally forms tree representations of triangle meshes. However, paper [4] uses links to code vertices, edges and triangles explicitely. It may result in large storage in storing these links (indices for vertices, edges and triangles). <p> Some methods use vertex split/merge to code topological information implicitely [6, 9]. The hierarchical triangulation presented in <ref> [4] </ref> discussed the representations of meshes in tree structures. A recursive refinement of meshes naturally forms tree representations of triangle meshes. However, paper [4] uses links to code vertices, edges and triangles explicitely. It may result in large storage in storing these links (indices for vertices, edges and triangles). It is true that a recursive refinement has a tree representation.
Reference: [5] <author> Evens, F., Skiena, S., and Varshney, A., </author> <title> Optimizing Triangle Strips for Fast Rendering, </title> <booktitle> Proc. IEEE Visualization'96, </booktitle> <pages> pp 319-326 </pages>
Reference-contexts: 0.1 Introduction Triangle meshes are popular in graphics and other application areas. One problem in dealing with meshes is to store topological information or connectivity of meshes. Recently, some methods have been presented to efficiently code meshes <ref> [5, 3, 4, 13, 6, 9] </ref>. A recent survey can be found in [12]. A triangle mesh has two different parts: topological information and geometric information. <p> Usually, the topological information is independent from geometric information, except some special cases such as regular grid, or Delaunay Triangulations, where geometric information is able to determine connectivity. Most current methods try to generate long triangle strips <ref> [5, 3, 13, 1] </ref> to code mesh connectivity so that they can be used in some graphical library such as OpenGL. Some methods use vertex split/merge to code topological information implicitely [6, 9]. The hierarchical triangulation presented in [4] discussed the representations of meshes in tree structures. <p> OpenGL allows triangles to be coded in strips. A triangle of k triangles can be coded by indexing only k + 2 vertices. That reduces costs to (k+2) k log 2 n (BT). A generalized triangle strip method includes swap commands in a triangle strip <ref> [5] </ref>. Its BT rate is roughly 1 2 log 2 n+c for c 2 (BT). Deering developed the notion of generalized triangle mesh to reuse a limited number previously appearing vertices stored in a buffer [3]. The BT rate is about 1 16 log 2 n + 4 (BT).
Reference: [6] <author> Hoppe, H., </author> <title> Progressive Meshes, </title> <booktitle> SIGGRAPH'96, </booktitle> <pages> pp 99-108, </pages> <year> 1996 </year>
Reference-contexts: 0.1 Introduction Triangle meshes are popular in graphics and other application areas. One problem in dealing with meshes is to store topological information or connectivity of meshes. Recently, some methods have been presented to efficiently code meshes <ref> [5, 3, 4, 13, 6, 9] </ref>. A recent survey can be found in [12]. A triangle mesh has two different parts: topological information and geometric information. <p> Most current methods try to generate long triangle strips [5, 3, 13, 1] to code mesh connectivity so that they can be used in some graphical library such as OpenGL. Some methods use vertex split/merge to code topological information implicitely <ref> [6, 9] </ref>. The hierarchical triangulation presented in [4] discussed the representations of meshes in tree structures. A recursive refinement of meshes naturally forms tree representations of triangle meshes. However, paper [4] uses links to code vertices, edges and triangles explicitely. <p> Deering developed the notion of generalized triangle mesh to reuse a limited number previously appearing vertices stored in a buffer [3]. The BT rate is about 1 16 log 2 n + 4 (BT). PM in <ref> [6] </ref> uses about 1 2 log 2 n + 2:5 (BT) for topological coding. And modified PM in [11] uses 1 2 log 2 n + 3:5 (BT). Li's method [9] has an average BT rate of 1 2 log 2 n + 4:5 (BT).
Reference: [7] <author> Hoppe, H., </author> <title> View-Dependent Refinement of Progressive Meshes, </title> <booktitle> SIGGRAPH'97, </booktitle> <pages> pp 189-198, </pages> <year> 1997 </year>
Reference: [8] <author> Kinsey, L., </author> <title> Topology of Surfaces, </title> <publisher> Springer-Verlag, </publisher> <year> 1993 </year>
Reference-contexts: Some terms are defined in R n in their general forms, although we are only interested in orientable bounded 2 surfaces in R 3 . For details about these terms and related information, readers may refer to topology textbooks, such as <ref> [8] </ref>.
Reference: [9] <author> Li, J.K., Li, L., and Kuo, </author> <title> C.C., Progressive Compression of 3D Graphics Models Proc. </title> <booktitle> of IEEE International Conf. on Multimedia Computing and System, </booktitle> <address> Ottawa, Canada, </address> <year> 1997 </year>
Reference-contexts: 0.1 Introduction Triangle meshes are popular in graphics and other application areas. One problem in dealing with meshes is to store topological information or connectivity of meshes. Recently, some methods have been presented to efficiently code meshes <ref> [5, 3, 4, 13, 6, 9] </ref>. A recent survey can be found in [12]. A triangle mesh has two different parts: topological information and geometric information. <p> Most current methods try to generate long triangle strips [5, 3, 13, 1] to code mesh connectivity so that they can be used in some graphical library such as OpenGL. Some methods use vertex split/merge to code topological information implicitely <ref> [6, 9] </ref>. The hierarchical triangulation presented in [4] discussed the representations of meshes in tree structures. A recursive refinement of meshes naturally forms tree representations of triangle meshes. However, paper [4] uses links to code vertices, edges and triangles explicitely. <p> The BT rate is about 1 16 log 2 n + 4 (BT). PM in [6] uses about 1 2 log 2 n + 2:5 (BT) for topological coding. And modified PM in [11] uses 1 2 log 2 n + 3:5 (BT). Li's method <ref> [9] </ref> has an average BT rate of 1 2 log 2 n + 4:5 (BT). We notice that all coding schemes above have a term log 2 n in their BT rates. The reason is that they access triangles randomly. Random accessing is useful in rendering, especially in view-dependent rendering.
Reference: [10] <author> Nlson, M. and Gailly, J.L., </author> <title> The Data Compression Book, (2nd Ed), M&T Books, </title> <year> 1996 </year>
Reference-contexts: Information theory uses entropy as a measure of how much information is contained in a message <ref> [10] </ref>. The higher the entropy of a message, the more information it contains.
Reference: [11] <author> Popovic, J., and Hoppe, H., </author> <title> Progressive simplicial complexes, </title> <booktitle> SIGGRAPH'97, </booktitle> <pages> pp 217-224, </pages> <note> 1997 BIBLIOGRAPHY 29 </note>
Reference-contexts: The BT rate is about 1 16 log 2 n + 4 (BT). PM in [6] uses about 1 2 log 2 n + 2:5 (BT) for topological coding. And modified PM in <ref> [11] </ref> uses 1 2 log 2 n + 3:5 (BT). Li's method [9] has an average BT rate of 1 2 log 2 n + 4:5 (BT). We notice that all coding schemes above have a term log 2 n in their BT rates.
Reference: [12] <author> Rossignac, J., </author> <title> Geometric Simplification and Compression, in Multiresolution Surface Modeling, </title> <note> Course Notes #25, SIGGRAPH'97. </note>
Reference-contexts: 0.1 Introduction Triangle meshes are popular in graphics and other application areas. One problem in dealing with meshes is to store topological information or connectivity of meshes. Recently, some methods have been presented to efficiently code meshes [5, 3, 4, 13, 6, 9]. A recent survey can be found in <ref> [12] </ref>. A triangle mesh has two different parts: topological information and geometric information. The topological information (also called connectivity) is about the relationship between vertices, edges and triangles in the mesh, while the geometrical information is about the position of vertices.
Reference: [13] <author> Taubin, G., and Rossignac, J., </author> <title> Geometry compression through topological surgery, </title> <institution> Research Report RC-20340, IBM, </institution> <month> January, </month> <year> 1996 </year>
Reference-contexts: 0.1 Introduction Triangle meshes are popular in graphics and other application areas. One problem in dealing with meshes is to store topological information or connectivity of meshes. Recently, some methods have been presented to efficiently code meshes <ref> [5, 3, 4, 13, 6, 9] </ref>. A recent survey can be found in [12]. A triangle mesh has two different parts: topological information and geometric information. <p> Usually, the topological information is independent from geometric information, except some special cases such as regular grid, or Delaunay Triangulations, where geometric information is able to determine connectivity. Most current methods try to generate long triangle strips <ref> [5, 3, 13, 1] </ref> to code mesh connectivity so that they can be used in some graphical library such as OpenGL. Some methods use vertex split/merge to code topological information implicitely [6, 9]. The hierarchical triangulation presented in [4] discussed the representations of meshes in tree structures. <p> The reason is that they access triangles randomly. Random accessing is useful in rendering, especially in view-dependent rendering. One big improvement made by Taubin and Rossignac is to arrange all vertices and triangles in a fixed way so that no indexing term log 2 n appears <ref> [13] </ref>. An average cost of 2 (BT) is reported in their testing. More importantly, when all vertices are arranged in a fixed order, their geometric information can be coded efficiently using a bit-plane coding scheme. However, the method cannot generate hierarchical topology, and is not good for rendering. <p> We need not spend log 2 n bits for indexing a vertex. The BT rate in our scheme is upper bounded by 2.52 (BT) for a normal triangular patch. The BT rate is lower than all existing methods, except <ref> [13] </ref>. Taubin et al. reported 2 (BT) in their tests, but didn't give theoretical analysis of their coding efficiency. The efficiency of our method will be reduced when we cut a big mesh into many 27 normal triangular patches.
References-found: 13

