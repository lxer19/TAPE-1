URL: http://www.cs.umd.edu/~aporter/fundamentalLaws.ps
Refering-URL: http://www.cs.umd.edu/~aporter/html/selected_pubs.html
Root-URL: 
Email: aporter@cs.umd.edu  
Title: Fundamental Laws and Assumptions of Software Maintenance  
Author: Adam A. Porter 
Address: College Park, MD, 20742  
Affiliation: Department of Computer Science University of Maryland  
Abstract: Researchers must pay far more attention to discovering and validating the principles that underlie software maintenance and evolution. This was one of the major conclusions reached during the International Workshop on Empirical Studies of Software Maintenance. This workshop, held in November 1996 in Monterey, California, brought together an international group of researchers to discuss the successes, challenges and open issues in software maintenance and evolution. This article documents the discussion of the subgroup on fundamental laws and assumptions of software maintenance. The participants of this group included researchers in software engineering, the behavioral sciences, information systems and statistics. Their main conclusion was that insufficient effort has been paid to synthesizing research conjectures into validated theories and that this problem has slowed progress in software maintenance. To help remedy this situation they made the following recommendations: (1) when we use empirical methods, an explicit goal should be to develop theories, (2) we should look to other disciplines for help where it is appropriate, and (3) our studies should use a wider range of empirical methods. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Belady, L.A. and M.M. Lehman, </author> <title> A Model of Large Program Development. </title> <journal> IBM Systems Journal, 1976. </journal> <volume> 15 (1): </volume> <pages> p. 225-252. </pages>
Reference-contexts: 1. Introduction All software systems evolve <ref> [1] </ref>. As they evolve they undergo numerous, successive changes - to fix errors, improve performance or other attributes, and to adapt to new environments. The longer a system stays in service, the larger maintenance costs are, and, therefore, its not surprising that maintenance costs often dominate initial development costs [2].
Reference: 2. <author> Gibson, </author> <title> V.R. and J.A. Senn, System Structure and Software Maintenance. </title> <journal> Communications of the ACM, 1989. </journal> <volume> 32 (3): </volume> <pages> p. 347-358. </pages>
Reference-contexts: As they evolve they undergo numerous, successive changes - to fix errors, improve performance or other attributes, and to adapt to new environments. The longer a system stays in service, the larger maintenance costs are, and, therefore, its not surprising that maintenance costs often dominate initial development costs <ref> [2] </ref>. Clearly, improved tools, techniques, and processes can save a great deal of time and money throughout the software industry. To realize these savings, researchers are studying maintenance from many perspectives. Making individual modifications.
Reference: 3. <author> Thomas, W. and J. Baldo. </author> <booktitle> Maintenance of Reuse-Based DomainSpecific Software Product Lines . in International Workshop on Empirical Studies of Software Maintenance. </booktitle> <month> November </month> <year> 1996. </year> <title> Monterey, </title> <address> CA. </address>
Reference-contexts: Please see the complete proceedings. Any mistakes or misrepresentations are unintentional, and are the sole responsibility of the session chair, not the workshop participants. Maintenance of Reuse-Based DomainSpecific Software Product Lines <ref> [3] </ref>. Presented by William Thomas: Reuse saves money and time. Therefore, greater levels of reuse promise even greater savings. Although this seems to be correct, the authors urge us to look more closely.
Reference: 4. <author> Dusink, E. and P.G. Kluit. </author> <title> Using and Didactic Model to Measure Software Comprehension . in International Workshop on Empirical Studies of Software Maintenance. November 1996. </title> <address> Monterey, CA. </address>
Reference-contexts: This work reminds us that new technology can challenge, even invalidate, our basic assumptions. Using a Didactic Model to Measure Software Comprehension <ref> [4] </ref>. Presented by Elisabeth Dusink One of the first steps in changing a system is understanding it. Documentation is supposed to help understanding because it collects system knowledge and presents it in a structured way.
Reference: 5. <author> Bloom, B., ed. </author> <title> Taxonomy of Educational Objects. The Classification of Educational Goals. Handbook 1. Cognitive Domain. . 1968, </title> <publisher> David McKay Company: </publisher> <address> New York. </address>
Reference-contexts: The authors of this article claim that developers learn about a system by reading its documentation. Furthermore, they suspect that qualities of the learning process affect the quality of maintenance. Based on a model of learning by Bloom <ref> [5] </ref>, they argued that learning progresses from gaining knowledge, to understanding it, applying it, analyzing it, and, finally, to synthesizing new knowledge from it. The authors discussed a controlled experiment to link these levels of learning to maintenance success.
Reference: 6. <author> Harrison, W. </author> <title> Change-Prone Modules, Limited Resources, </title> <booktitle> and Maintenance . in International Workshop on Empirical Studies of Software Maintenance. </booktitle> <month> November </month> <year> 1996. </year> <title> Monterey, </title> <address> CA. </address>
Reference-contexts: One potential outcome of this research is a low-cost index for maintenance success. That is, we may be able to test new technology by measuring its effect on understanding levels rather than by measuring its effect on maintenance tasks themselves. Change-Prone Modules, Limited Resources and Maintenance <ref> [6] </ref>. Presented by Warren Harrison Maintainers often work under tight deadlines with meager resources. So sometimes they take short cuts even though they'd prefer to design and implement each change carefully. This kind of change is ad hoc. It can be made rapidly, but often degrades structure.
Reference: 7. <author> Karr, A., A. Porter, and L. Votta. </author> <title> An Empirical Exploration of Code Evolution . in International Workshop on Empirical Studies of Software Maintenance. </title> <month> November </month> <year> 1996. </year> <title> 8. von Mayrhauser, A . and A.M. Vans. On Increasing our Knowledge of Large-Scale Software Comprehension. </title> <booktitle> in International Workshop on Empirical Studies of Software Maintenance . November 1996. </booktitle> <address> Monterey, CA. </address>
Reference-contexts: One interesting feature of this research is that it uses mathematical techniques to model long-term evolution. Since, by definition, evolution takes time, researchers must find ways to reason about it. Tools like these are a first step in that direction. An Empirical Exploration of Code Decay <ref> [7] </ref>. Presented by Adam Porter Software systems must tolerate numerous, successive changes. As this happens, systems deteriorate and changes become increasingly difficult. Eventually, new functionality cannot be added and the system must be redesigned.
Reference: 9. <author> Castro, M. J. H. Mendes-Moreira. </author> <booktitle> The Software Maintenance Process in Financial Organizations . in International Workshop on Empirical Studies of Software Maintenance. </booktitle> <month> November </month> <year> 1996. </year>
Reference-contexts: One implication of this is that experimental results must generalize beyond the environment from which they were taken. This may be one of the most important open issues in empirical software engineering. The Software Maintenance Process in Portugal <ref> [9] </ref>. Presented by Helena Mendes-Moreira Maintenance costs are the dues of success. In this work the authors surveyed 37 software development organizations in Portugal to characterize their maintenance processes. They selected companies with more than 500 developers and revenues in excess of 13 million dollars.
Reference: 10. <author> Rosenberg, J. </author> <title> Problems and Prospects in Quantifying Software Maintainability . in International Workshop on Empirical Studies of Software Maintenance. November 1996. </title> <address> Monterey, CA. </address>
Reference-contexts: Several participants noted similar patterns in US industry. This work raises the possibility of comparing historical data from established organizations with current data from emerging ones. Would they find common patterns of organizational growth despite the changes in technology? Predicting Aspects of Maintainability from Software Characteristics <ref> [10] </ref>. Presented by Jarrett Rosenberg We have to change the way we study change. The author presented several studies that tried to predict the likelihood and cost of certain maintenance tasks. His results cast doubt on the soundness of current metric-based modeling approaches.
Reference: 11. <author> Schneberger, </author> <title> S.L. </title> <booktitle> Position Paper for the International Workshop on Empirical Studies of Software Maintenance . in International Workshop on Empirical Studies of Software Maintenance . November 1996. </booktitle> <address> Monterey, CA. </address>
Reference-contexts: Instead, he argued, we will need to focus on creating deep theories of maintenance-related factors. This presentation stressed two important research goals: to continue raising our scientific standards, and to borrow wisely from the ideas and approaches of other research areas. Operational System Complexity <ref> [11] </ref>. Presented by Scott Schneberger Maintenance bottlenecks can shift as technology changes. The industry is moving more and more from centralized to distributed architectures. Will this shift change our assumptions about maintenance? Schneberger suggests that it might.
Reference: 12. <author> Tryggeseth, E. </author> <booktitle> The Impact of Documentation Availability on Software Maintenance Productivity . in International Workshop on Empirical Studies of Software Maintenance. </booktitle> <month> November </month> <year> 1996. </year> <title> Monterey, </title> <address> CA. </address>
Reference-contexts: The author also points out that, in some domains, there is a trend back toward centralization. These results suggest that the benefits of solving certain maintenance problems can change over time. The Impact of Documentation Availability on Software Maintenance Productivity <ref> [12] </ref>. Presented by Eirik Tryggeseth One way to evaluate technology is to ask what would happen if it didn't exist. The author takes this approach to see how documentation affects maintenance success. He also asks whether this effect is different for more or less-skilled programmers.
Reference: 13. <author> Visaggio, G. </author> <title> Assessing Maintenance Processes Through Controlled Experiment . in International Workshop on Empirical Studies of Software Maintenance. November 1996. </title> <address> Monterey, CA. </address>
Reference-contexts: One implication of this result might be that system-level knowledge has a greater (or, at least, more immediate) effect on maintenance quality than individual programming skill does. Assessing Maintenance Processes Through Controlled Experiment <ref> [13] </ref>. Presented by Guiseppe Visaggio Sometimes the simplest approach is the most cost-effective. In this work the author explores the cost benefit tradeoffs between quick-fixes and a more thorough change process, called iterative enhancement.
Reference: 14. <author> Parnas, </author> <title> D.L., On the Criteria for Decomposing Systems into Modules. </title> <journal> Communications of the ACM, 1972. </journal> <volume> 15 (12). </volume>
Reference-contexts: Some research focuses on individual changes while other focuses on longer-term evolution processes. Within each of these categories, we tried to extract common findings. One topic for which we had some success was modularization. Several people stated that Parnas' early work on information hiding <ref> [14] </ref> illustrated some benefits of modularization, and that the effect of this and other research can be seen in todays objectoriented programming languages. See Kemerer [15] for a survey of results in this area. Unfortunately, we were unable to find too many more. Certainly some exist.
Reference: 15. <author> Kemerer, </author> <title> C.F., Software Complexity and Software Maintenance: A Survey of Empirical Research. </title> <journal> Annals of Software Engineering, 1995. </journal> <volume> 1 : p. </volume> <pages> 1-22. </pages>
Reference-contexts: One topic for which we had some success was modularization. Several people stated that Parnas' early work on information hiding [14] illustrated some benefits of modularization, and that the effect of this and other research can be seen in todays objectoriented programming languages. See Kemerer <ref> [15] </ref> for a survey of results in this area. Unfortunately, we were unable to find too many more. Certainly some exist. But they didn't spring to mind quickly. Although the group members knew of many studies, we couldnt distill their messages.
Reference: 16. <author> Gilgun, J.F., </author> <title> Definitions, Methodologies, and Methods in Qualitative Family Research , in Qualitative Methods in Family Research. 1992, </title> <publisher> Sage. </publisher>
Reference-contexts: Therefore, in addition to traditional analysis techniques, we should consider other methods for generating and testing theories. Qualitative analysis. Refers to the analysis of data that is represented in words and pictures rather than as numbers <ref> [16] </ref>. These approaches do not have as many supporting analyses as traditional quantitative methods do, but may provide a richer description of the phenomena being studied. Meta-analysis. Gathering enough data to draw sound conclusions is a major problem in empirical research.
References-found: 15

