URL: http://choices.cs.uiuc.edu/liao/perf.ps
Refering-URL: http://choices.cs.uiuc.edu/liao/home.html
Root-URL: http://www.cs.uiuc.edu
Email: froush, liao, royg@cs.uiuc.edu  
Title: Performance and the Single/Multi-Processor Operating System Process Subsystem  
Author: Ellard T. Roush Willy S. Liao Roy H. Campbell 
Address: 1304 W. Springfield Urbana, IL 61801  
Affiliation: Department of Computer Science University of Illinois at Urbana-Champaign Digital Computer Laboratory  
Abstract: Operating systems depend on process subsystem performance, which we analyze in Choices. We use compile time specialization to optimize both single and multiprocessor performance within a single design. We partition critical sections into two types, and compose independent control mechanisms to produce high performance, specialized locks. We select heavily used process operations and justify new designs through performance measurements on two different ports of the Choices object oriented operating system. The performance measurements demonstrate speed improvements as high as two orders of magnitude. We validate the impact on application level processes through performance tests on a TCP communication application, whose data rates improve by 8-22% for transmission and by 15-24% for reception. We present designs for process synchronization, current process identification, process context switching, process creation, and interrupt handling support. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Anderson. </author> <title> The performance of spin lock alternatives for shared-memory multiprocessors. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(1) </volume> <pages> 6-16, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Because of its Short Term nature, the spin wait wastes fewer cycles than blocking and then unblocking. Anderson has reported measurements showing that multiprocessors with larger numbers (more than 8) of CPU's can benefit from more sophisticated locks, which he builds with spin locks <ref> [1] </ref>. Process preemption in Choices currently occurs only when the process time quantum expires. Clock interrupts drive the time slice quantum management. Therefore disabling the appropriate clock interrupt disables time slice expiration exceptions, which effectively prevents the scheduler from preempting a process.
Reference: [2] <author> Campbell and Islam. </author> <title> Choices: A parallel object-oriented operating system, 1993. </title> <editor> in Agha, Wegner, and Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming. </booktitle>
Reference-contexts: We compose the control mechanisms according to the machine architecture and lock type. This design approach reuses the control mechanism software, while simultaneously supporting specialization. Thus we are able to optimize each lock individually. Measurements show a very large performance improvement over a single, all-purpose lock. Choices <ref> [2] </ref>, Chorus [13], SOS [17], and Spring [9] successfully demonstrate object oriented designs. Object oriented methodology introduces several useful techniques. However, when used inappropriately, our experience shows these techniques can hinder performance. <p> Compared to the general purpose lock, the new specialized lock is 125.8 times faster on the Virtual Choices port, and 5.35 faster on the SS1 Choices port. Significant performance improvements occurred in the other kernel process subsystem operations. The Choices <ref> [2] </ref> operating system follows an object oriented design, and is implemented in C++ with a very small amount of assembly language code. Choices has been implemented on the multiprocessor Encore MultiMax [15]. A single processor Choices, called SS1 Choices [11], currently runs on the SPARC Station 2.
Reference: [3] <author> Campbell, Islam, Raila, and Madany. </author> <title> Designing and implementing Choices: an object oriented system in C++. </title> <journal> Communications of the ACM, </journal> <volume> 36(9) </volume> <pages> 117-126, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Choices has been implemented on the multiprocessor Encore MultiMax [15]. A single processor Choices, called SS1 Choices [11], currently runs on the SPARC Station 2. Another version of Choices, called Virtual Choices <ref> [3] </ref>, runs on top of the Unix operating system. The Virtual Choices performance tests ran on a SPARC 600MP. The paper describes the most important reasons for each area's improvements. Section 2 briefly defines the Choices process. Section 3 describes improvements in current process identification.
Reference: [4] <author> Campbell and Tan. </author> <title> Choices: an object-oriented multimedia operating system. </title> <booktitle> In Fifth Workshop on Hot Topics in Operating Systems, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: This accounts for the larger performance gains in Virtual Choices. The older multiprocessor MultiMax has been retired, and is no longer available for performance measurements. Efforts are underway to port the new process subsystem to Choices <ref> [4] </ref>, which will run on multiprocessor SPARC Stations. 7 Operation Old (s) New (s) % Improvement 777 Command loop overhead 59 54 9 Function call 200 200 0 Virtual Function 425 425 0 Reference Count 11,225 2,526 344 (inc + dec) Lock 5,348 999 435 (acquire/release) Binary Semaphore 14,996 6,309 138
Reference: [5] <author> Dasgupta, LeBlanc, Ahamad, and Ramachandran. </author> <title> The Clouds distributed operating system. </title> <journal> IEEE Computer, </journal> <volume> 24(11) </volume> <pages> 34-44, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: Multiple Process objects can share the same Domain. This differs from the one process per domain model of early Unix. The Mach task, the Amoeba process, and the Chorus actor all support multiple threads in one address space. The Choices process always remains within one Domain, unlike Clouds <ref> [5] </ref> where threads move between domains. The Choices operating system provides many diverse services to the Process object. The Choices design reifies the interface to a subsystem as an object of a class specific to that subsystem. For example, an object of class ApplicationMsgQueue supports message receipt.
Reference: [6] <author> Hartman and Ousterhout. </author> <title> Performance measurements of a multiprocessor Sprite kernel. </title> <booktitle> In USENIX Summer Conference, </booktitle> <pages> pages 279-287, </pages> <year> 1990. </year>
Reference-contexts: Single processor Unix also uses two different methods for controlling resource contention [16, sec. 8.5]. Unix uses non-preemption to support Process Critical Sections and manipulates processor priority levels to support Interrupt Critical Sections. In Sprite [10] monitor locks protect Process Critical Sections and master locks protect Interrupt Critical Sections <ref> [6] </ref>. Multiprocessor resource contention retains all of the single processor contention types and adds contention with activity on remote CPU's. The Choices design simply adds a spin lock to all critical sections in order to protect against the additional threat. Repeatedly testing the spin lock wastes CPU cycles.
Reference: [7] <author> Hutchinson and Peterson. </author> <title> The X-Kernel: an architecture for implementing network protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Much of the research with Choices involves various networking issues. So we decided to test the performance change on a well known and important communications application. We ported the x-Kernel <ref> [7] </ref> network communication subsystem to Choices [8]. The x-Kernel subsystem uses the process per message model, which results in the use of many processes when message traffic is heavy. The x-Kernel subsystem allows only one process to be active inside it, which makes process synchronization important.
Reference: [8] <author> Liao. </author> <title> Operating system support for embedding network subsystems. </title> <type> Master's thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1995. </year>
Reference-contexts: Much of the research with Choices involves various networking issues. So we decided to test the performance change on a well known and important communications application. We ported the x-Kernel [7] network communication subsystem to Choices <ref> [8] </ref>. The x-Kernel subsystem uses the process per message model, which results in the use of many processes when message traffic is heavy. The x-Kernel subsystem allows only one process to be active inside it, which makes process synchronization important.
Reference: [9] <author> Mitchell, Gibbons, Hamilton, Kesler, Khalidi, Kougiouris, Madany, Nelson, Powell, and Radia. </author> <title> An overview of the Spring system. </title> <booktitle> In CompCon Spring 1994, </booktitle> <year> 1994. </year>
Reference-contexts: This design approach reuses the control mechanism software, while simultaneously supporting specialization. Thus we are able to optimize each lock individually. Measurements show a very large performance improvement over a single, all-purpose lock. Choices [2], Chorus [13], SOS [17], and Spring <ref> [9] </ref> successfully demonstrate object oriented designs. Object oriented methodology introduces several useful techniques. However, when used inappropriately, our experience shows these techniques can hinder performance.
Reference: [10] <author> Ousterhout, Cherenson, Douglis, Nelson, and Welch. </author> <title> The Sprite network operating system. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 23-36, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: Single processor Unix also uses two different methods for controlling resource contention [16, sec. 8.5]. Unix uses non-preemption to support Process Critical Sections and manipulates processor priority levels to support Interrupt Critical Sections. In Sprite <ref> [10] </ref> monitor locks protect Process Critical Sections and master locks protect Interrupt Critical Sections [6]. Multiprocessor resource contention retains all of the single processor contention types and adds contention with activity on remote CPU's.
Reference: [11] <author> Raila. </author> <title> The Choices object oriented operating system on the SPARC architecture. </title> <type> Master's thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1988. </year>
Reference-contexts: The Choices [2] operating system follows an object oriented design, and is implemented in C++ with a very small amount of assembly language code. Choices has been implemented on the multiprocessor Encore MultiMax [15]. A single processor Choices, called SS1 Choices <ref> [11] </ref>, currently runs on the SPARC Station 2. Another version of Choices, called Virtual Choices [3], runs on top of the Unix operating system. The Virtual Choices performance tests ran on a SPARC 600MP. The paper describes the most important reasons for each area's improvements.
Reference: [12] <author> Roush. </author> <title> The Freeze Free Algorithm for Process Migration. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1995. </year> <title> planned completion August. </title>
Reference-contexts: Object oriented methodology introduces several useful techniques. However, when used inappropriately, our experience shows these techniques can hinder performance. We examine concrete examples hindering performance, demonstrate new designs with improved performance, and provide recommendations. 1 A desire to support a new and innovative method for Process Migration <ref> [12] </ref> motivated our modi-fications to the Choices operating system. The design analysis revealed that substantial performance improvements were possible in the process subsystem. The effort expanded to include an extensive examination of the entire process subsystem.
Reference: [13] <author> Rozier, Abrossimov, Armand, Boule, Gien, Guillemont, Herrmann, Kaiser, Langlois, Leonard, and Neuhasuer. </author> <title> Chorus distributed operating system. </title> <journal> Computing Systems, </journal> <volume> 1(4) </volume> <pages> 305-370, </pages> <year> 1988. </year>
Reference-contexts: We compose the control mechanisms according to the machine architecture and lock type. This design approach reuses the control mechanism software, while simultaneously supporting specialization. Thus we are able to optimize each lock individually. Measurements show a very large performance improvement over a single, all-purpose lock. Choices [2], Chorus <ref> [13] </ref>, SOS [17], and Spring [9] successfully demonstrate object oriented designs. Object oriented methodology introduces several useful techniques. However, when used inappropriately, our experience shows these techniques can hinder performance.
Reference: [14] <author> Russo. </author> <title> An Object Oriented Operating System. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <year> 1991. </year>
Reference-contexts: Section 6 describes improvements in process context switching. Section 7 describes improvements in process creation. Section 8 describes the impact of these process support changes on a TCP communications application. 2 The Process The Choices design reifies the process concept as an object of class Process <ref> [14] </ref>. As there is considerable variation in the terminology and composition of the active element within the operating system community, we briefly define the Choices process. The Process object acts as a repository of information on the resource usage by that specific process. Descriptions of the most important components follow.
Reference: [15] <author> Russo, Johnston, and Campbell. </author> <title> Process management and exception handling in multiprocessor operating systems using object oriented design techniques. </title> <booktitle> In Conference on Object Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 248-258, </pages> <year> 1988. </year> <note> also Technical Report No. </note> <institution> UIUCDCS-R-88-1415, Department of Computer Science, University of Illinois at Urbana-Champaign. </institution>
Reference-contexts: Significant performance improvements occurred in the other kernel process subsystem operations. The Choices [2] operating system follows an object oriented design, and is implemented in C++ with a very small amount of assembly language code. Choices has been implemented on the multiprocessor Encore MultiMax <ref> [15] </ref>. A single processor Choices, called SS1 Choices [11], currently runs on the SPARC Station 2. Another version of Choices, called Virtual Choices [3], runs on top of the Unix operating system. The Virtual Choices performance tests ran on a SPARC 600MP.
Reference: [16] <author> Schimmel. </author> <title> UNIX Systems for Modern Architectures, Symmetric Multiprocessing and Caching for Kernel Programmers. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The Choices design does not allow a process to execute while an ISR is active. Thus partitioning general critical sections into Process Critical Sections and Interrupt Critical Sections is important. Single processor Unix also uses two different methods for controlling resource contention <ref> [16, sec. 8.5] </ref>. Unix uses non-preemption to support Process Critical Sections and manipulates processor priority levels to support Interrupt Critical Sections. In Sprite [10] monitor locks protect Process Critical Sections and master locks protect Interrupt Critical Sections [6]. <p> Schimmel describes a similar mechanism used for a multiprocessor extension to Unix <ref> [16, sec. 10.5.3] </ref>. The Process Critical Section multiprocessor process lock works as follows: 1. set the Process Critical Section Flag, 2. acquire the resource specific, machine dependent spin lock, 3. execute Protected Code, 4. release the resource specific spin lock, and 5. clear the Process Critical Section Flag.
Reference: [17] <author> Shapiro, Gourhant, Habert, Mosseri, Ruffin, and Valot. </author> <title> SOS: an object oriented operating system assessment and perspective. </title> <journal> Computing Systems, </journal> <volume> 2(4) </volume> <pages> 287-337, </pages> <year> 1989. </year>
Reference-contexts: This design approach reuses the control mechanism software, while simultaneously supporting specialization. Thus we are able to optimize each lock individually. Measurements show a very large performance improvement over a single, all-purpose lock. Choices [2], Chorus [13], SOS <ref> [17] </ref>, and Spring [9] successfully demonstrate object oriented designs. Object oriented methodology introduces several useful techniques. However, when used inappropriately, our experience shows these techniques can hinder performance.
Reference: [18] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1991. </year>
Reference-contexts: Each object creation entails a call to the memory allocator. An alternative design approach creates these objects as members of the process object. C++ is sufficiently sophisticated that it allocates space for an object and all of its member objects with one memory allocation request <ref> [18] </ref>. Memory allocation is an expensive operation. The new Process object design replaces 4 of the pointers with the actual objects as a members. In conjunction with the locking improvements, the results are substantial.
Reference: [19] <author> Ross Technology. </author> <title> SPARC RISC User's Guide. </title> <institution> Cypress Semiconductor Corporation, </institution> <year> 1990. </year>
Reference-contexts: No location in main memory satisfies this requirement. The CPU registers do satisfy this requirement, as CPU registers are only accessible from that specific CPU. Register architecture varies on different machines, so this requires tailoring per machine architecture. We propose a representative solution for the SPARC architecture <ref> [19] </ref>. The SPARC architecture has several global registers per CPU. The system reserves one global register for the current Process object address. The system loads the global register whenever the application process traps into the kernel or a system process begins initial execution.
Reference: [20] <author> Torellas, Gupta, and Hennessy. </author> <title> Characterizing the caching and synchronization of a multiprocessor operating system. </title> <journal> SIGPLAN Notices, </journal> <volume> 27(9) </volume> <pages> 162-174, </pages> <month> September </month> <year> 1992. </year> <month> 11 </month>
Reference-contexts: Choices supports a high degree of concurrency, and therefore incorporates fine grain locking throughout the kernel. Thus most system functions acquire and release locks at least once, and often multiple times. Performance measurements of IRIX on a Silicon Graphics multiprocessor showed that the operating system frequently accesses locks <ref> [20, sec. 5] </ref>. 5.1 Resource Contention We partition resource contention along 3 dimensions. We identify the components that interact with resource contention, and how to control each of these components. Finally we show how to compose the component controls to provide light-weight, effective locks.
References-found: 20

