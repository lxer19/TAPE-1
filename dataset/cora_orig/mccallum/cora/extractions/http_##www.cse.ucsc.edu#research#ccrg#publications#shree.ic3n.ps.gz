URL: http://www.cse.ucsc.edu/research/ccrg/publications/shree.ic3n.ps.gz
Refering-URL: http://www.cse.ucsc.edu/research/ccrg/publications.html
Root-URL: http://www.cse.ucsc.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> C. Cheng, R. Reley, S. P. R Kumar and J. J. Garcia-Luna-Aceves, </author> <title> A Loop-Free Extended Bellman-Ford Routing Protocol without Bouncing Effect, </title> <journal> ACM Computer Communications Review, Vol.19, </journal> <volume> No.4, </volume> <year> 1989, </year> <month> pp.224-236. </month>
Reference-contexts: 1 Introduction Many of the routing protocols used in today's networks are based on the distributed Bellman-Ford algorithm (DBF) for shortest-path computation [2]. However, DBF suffers from the bouncing effect and the counting-to-infinity problems [11]. Recently, distributed shortest-path algorithms <ref> [1, 7, 8, 10, 12] </ref> that utilize information regarding the length and second-to-last hop (or predecessor) of the shortest path to each destination have been proposed to eliminate the counting-to-infinity problem of DBF. We call these type of algorithms path-finding algorithms. <p> In contrast to LPRA, which makes a node i check the consistency of predecessor information reported by all its neighboring nodes each time an update is processed, Hum-blet's and other earlier path finding algorithms <ref> [1, 10, 8] </ref> check the consistency of the predecessor information only for the neighbor associated with the input event. In LDR [5], the path information is sent to the neighbors by an explicit label.
Reference: [2] <author> L.R. Ford and D.R. Fulkerson, </author> <title> Flow in Networks, </title> <publisher> Princeton University Press, </publisher> <address> Princeton, New Jersey, </address> <year> 1962. </year>
Reference-contexts: 1 Introduction Many of the routing protocols used in today's networks are based on the distributed Bellman-Ford algorithm (DBF) for shortest-path computation <ref> [2] </ref>. However, DBF suffers from the bouncing effect and the counting-to-infinity problems [11]. Recently, distributed shortest-path algorithms [1, 7, 8, 10, 12] that utilize information regarding the length and second-to-last hop (or predecessor) of the shortest path to each destination have been proposed to eliminate the counting-to-infinity problem of DBF.
Reference: [3] <author> J.M. Jaffe and F.M. Moss, </author> <title> A Responsive Routing Algorithm for Computer Networks, </title> <journal> IEEE Trans. Comm., </journal> <volume> Vol.30, </volume> <month> July </month> <year> 1982, </year> <month> pp.1758-1762. </month>
Reference-contexts: We call these type of algorithms path-finding algorithms. Although these algorithms provide a marked improvement over DBF, they do not eliminate the possibility of temporary loops. The loop-free algorithms reported to date rely on mechanisms that require routes either to synchronize along multiple hops <ref> [4, 3, 9] </ref>, or exchange path information that can include all the nodes in the path from source to destination [6]. fl This work was supported in part by the Office of Naval Research under Contract No. <p> To reduce the communication overhead incurred with interneighbor coordination, nodes use a feasibility condition to limit the number of times when they have to send queries to their neighbors. In contrast to many prior loop-free routing algorithms <ref> [3, 4, 9] </ref>, queries propagate only one hop in LPRA. Furthermore, updates and routing-table entries in LPRA require a single node identifier as path information, rather than a variable number of node identifiers as in prior algorithms [6]. Section 2 presents the network model assumed in LPRA.
Reference: [4] <author> J. J. Garcia-Luna-Aceves, </author> <title> Loop-free Routing using Diffusing Computations, </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> Vol. 1, No. 1, </volume> <month> Feb, </month> <year> 1993, </year> <month> pp.130-141. </month>
Reference-contexts: We call these type of algorithms path-finding algorithms. Although these algorithms provide a marked improvement over DBF, they do not eliminate the possibility of temporary loops. The loop-free algorithms reported to date rely on mechanisms that require routes either to synchronize along multiple hops <ref> [4, 3, 9] </ref>, or exchange path information that can include all the nodes in the path from source to destination [6]. fl This work was supported in part by the Office of Naval Research under Contract No. <p> To reduce the communication overhead incurred with interneighbor coordination, nodes use a feasibility condition to limit the number of times when they have to send queries to their neighbors. In contrast to many prior loop-free routing algorithms <ref> [3, 4, 9] </ref>, queries propagate only one hop in LPRA. Furthermore, updates and routing-table entries in LPRA require a single node identifier as path information, rather than a variable number of node identifiers as in prior algorithms [6]. Section 2 presents the network model assumed in LPRA. <p> To obtain an insight into the average performance of LPRA, the algorithm was analyzed by simulation using the topologies of typical networks. Simulations were performed using Drama [13] along with a network simulation library. The performance was compared with a diffusing update algorithm DUAL <ref> [4] </ref> and an ideal link-state algorithm (ILS). The simulation uses link weights of equal cost, and zero link transmission delays. During each simulation step, a node processes input events received during the previous step one at a time, and generates messages as needed for each input event it processes. <p> LPRA converges faster than DUAL in all cases; in particular, LPRA is more responsive in the case of node failures, which is a concern in DUAL's performance <ref> [4] </ref>. CPU utilization on ILS is two orders of magnitude larger than in LPRA and DUAL. On the other hand, LPRA converges in almost the same number of steps as ILS after link and node failures.
Reference: [5] <author> J. J. Garcia-Luna-Aceves, </author> <title> Distributed Routing with Labeled Distances, </title> <booktitle> IEEE Infocom, Vol.2, </booktitle> <month> May </month> <year> 1992, </year> <month> pp.633-643. </month>
Reference-contexts: In LDR <ref> [5] </ref>, the path information is sent to the neighbors by an explicit label. Unlike that, in LPRA, path information is extracted by the predecessor information; Therefore, fixed size update entries can be used, rather than variable size entries that can contain the complete path in some cases.
Reference: [6] <author> J. J. Garcia-Luna-Aceves, LIBRA: </author> <title> A Distributed Routing Algorithm for Large Internets, </title> <booktitle> Proceedings of IEEE Globecom, Vol.3, </booktitle> <month> Dec </month> <year> 1992, </year> <month> pp.1465-1471. </month>
Reference-contexts: The loop-free algorithms reported to date rely on mechanisms that require routes either to synchronize along multiple hops [4, 3, 9], or exchange path information that can include all the nodes in the path from source to destination <ref> [6] </ref>. fl This work was supported in part by the Office of Naval Research under Contract No. N-00014-92-J-1807 and by the Advanced Research Projects Agency (ARPA) under contract F19628-93-C-0175 In this paper, we present a path-finding algorithm that is loop-free at every instant. <p> In contrast to many prior loop-free routing algorithms [3, 4, 9], queries propagate only one hop in LPRA. Furthermore, updates and routing-table entries in LPRA require a single node identifier as path information, rather than a variable number of node identifiers as in prior algorithms <ref> [6] </ref>. Section 2 presents the network model assumed in LPRA. Section 3 provides a description of the algorithm and an example illustrating key aspects of its operation. Section 4 provides a detailed proof of LPRA's correctness. Section 5 addresses the performance of LPRA.
Reference: [7] <author> J. Hagouel, </author> <title> Issues in Routing for Large and Dynamic Networks," IBM Research Report RC 9942 (No. </title> <type> 44055) Communications, </type> <institution> IBM Thomas J. Wat-son Research Center, </institution> <address> Yorktown Heights, New York, </address> <month> April </month> <year> 1983. </year>
Reference-contexts: 1 Introduction Many of the routing protocols used in today's networks are based on the distributed Bellman-Ford algorithm (DBF) for shortest-path computation [2]. However, DBF suffers from the bouncing effect and the counting-to-infinity problems [11]. Recently, distributed shortest-path algorithms <ref> [1, 7, 8, 10, 12] </ref> that utilize information regarding the length and second-to-last hop (or predecessor) of the shortest path to each destination have been proposed to eliminate the counting-to-infinity problem of DBF. We call these type of algorithms path-finding algorithms.
Reference: [8] <author> P.A. Humblet, </author> <title> Another Adaptive Shortest-Path Algorithm, </title> <journal> IEEE Trans. Comm., Vol.39, </journal> <volume> No.6, </volume> <month> June </month> <year> 1991, </year> <month> pp.995-1003. </month>
Reference-contexts: 1 Introduction Many of the routing protocols used in today's networks are based on the distributed Bellman-Ford algorithm (DBF) for shortest-path computation [2]. However, DBF suffers from the bouncing effect and the counting-to-infinity problems [11]. Recently, distributed shortest-path algorithms <ref> [1, 7, 8, 10, 12] </ref> that utilize information regarding the length and second-to-last hop (or predecessor) of the shortest path to each destination have been proposed to eliminate the counting-to-infinity problem of DBF. We call these type of algorithms path-finding algorithms. <p> In contrast to LPRA, which makes a node i check the consistency of predecessor information reported by all its neighboring nodes each time an update is processed, Hum-blet's and other earlier path finding algorithms <ref> [1, 10, 8] </ref> check the consistency of the predecessor information only for the neighbor associated with the input event. In LDR [5], the path information is sent to the neighbors by an explicit label.
Reference: [9] <author> P.M. Merlin and A. Segall, </author> <title> A Failsafe Distributed Routing Algorithm, </title> <journal> IEEE Trans. Comm., </journal> <volume> Vol.27, </volume> <month> Sept. </month> <year> 1979, </year> <month> pp.1280-1288. </month>
Reference-contexts: We call these type of algorithms path-finding algorithms. Although these algorithms provide a marked improvement over DBF, they do not eliminate the possibility of temporary loops. The loop-free algorithms reported to date rely on mechanisms that require routes either to synchronize along multiple hops <ref> [4, 3, 9] </ref>, or exchange path information that can include all the nodes in the path from source to destination [6]. fl This work was supported in part by the Office of Naval Research under Contract No. <p> To reduce the communication overhead incurred with interneighbor coordination, nodes use a feasibility condition to limit the number of times when they have to send queries to their neighbors. In contrast to many prior loop-free routing algorithms <ref> [3, 4, 9] </ref>, queries propagate only one hop in LPRA. Furthermore, updates and routing-table entries in LPRA require a single node identifier as path information, rather than a variable number of node identifiers as in prior algorithms [6]. Section 2 presents the network model assumed in LPRA.
Reference: [10] <author> B. Rajagopalan and M. Faiman, </author> <title> A Responsive Distributed Shortest-Path Routing Algorithm within Autonomous Systems, Internetworking: </title> <journal> Research and Experience, Vol.2, </journal> <volume> No.1, </volume> <month> March </month> <year> 1991, </year> <pages> pp. 51-69. </pages>
Reference-contexts: 1 Introduction Many of the routing protocols used in today's networks are based on the distributed Bellman-Ford algorithm (DBF) for shortest-path computation [2]. However, DBF suffers from the bouncing effect and the counting-to-infinity problems [11]. Recently, distributed shortest-path algorithms <ref> [1, 7, 8, 10, 12] </ref> that utilize information regarding the length and second-to-last hop (or predecessor) of the shortest path to each destination have been proposed to eliminate the counting-to-infinity problem of DBF. We call these type of algorithms path-finding algorithms. <p> In contrast to LPRA, which makes a node i check the consistency of predecessor information reported by all its neighboring nodes each time an update is processed, Hum-blet's and other earlier path finding algorithms <ref> [1, 10, 8] </ref> check the consistency of the predecessor information only for the neighbor associated with the input event. In LDR [5], the path information is sent to the neighbors by an explicit label.
Reference: [11] <author> M.S. Sloman and X. Andriopoulos, </author> <title> A Routing Algorithm for Interconnected Local Area Networks, </title> <booktitle> Computer Networks and ISDN Systems, </booktitle> <year> 1985, </year> <month> pp.109-130. </month>
Reference-contexts: 1 Introduction Many of the routing protocols used in today's networks are based on the distributed Bellman-Ford algorithm (DBF) for shortest-path computation [2]. However, DBF suffers from the bouncing effect and the counting-to-infinity problems <ref> [11] </ref>. Recently, distributed shortest-path algorithms [1, 7, 8, 10, 12] that utilize information regarding the length and second-to-last hop (or predecessor) of the shortest path to each destination have been proposed to eliminate the counting-to-infinity problem of DBF. We call these type of algorithms path-finding algorithms.
Reference: [12] <author> Shree Murthy, </author> <title> Design and Analysis of Distributed Routing Algorithms, </title> <type> Master's Thesis, </type> <institution> University of California, Santa Cruz, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Many of the routing protocols used in today's networks are based on the distributed Bellman-Ford algorithm (DBF) for shortest-path computation [2]. However, DBF suffers from the bouncing effect and the counting-to-infinity problems [11]. Recently, distributed shortest-path algorithms <ref> [1, 7, 8, 10, 12] </ref> that utilize information regarding the length and second-to-last hop (or predecessor) of the shortest path to each destination have been proposed to eliminate the counting-to-infinity problem of DBF. We call these type of algorithms path-finding algorithms. <p> Thus, because j A j j and D i j (t s ) are finite and LPRA is free of deadlocks and loops <ref> [12] </ref>, a node n must be reached for which D n j (t s ) = l n j (t s ) = j; this is impossible because j is not adjacent to any node in A j at time t t s and every node knows its neighbors. <p> DBF has a worst-case time complexity of O (jN j) and worst-case communication complexity of O (jN 2 j), where, N is the number of nodes in the network G. In contrast, LPRA can be shown to have TC=O (x) and CC=O (x) <ref> [12] </ref> where, x is the number of nodes affected by a single topology change. To obtain an insight into the average performance of LPRA, the algorithm was analyzed by simulation using the topologies of typical networks. Simulations were performed using Drama [13] along with a network simulation library. <p> The details of simulation analysis appear in <ref> [12] </ref>. However, it is worth noting that, as expected, LPRA and DUAL have better overall average performance than ILS after the recovery of a single node or a link.
Reference: [13] <author> W. T. Zaumen, </author> <title> Simulations in Drama, Network Information System Center, </title> <booktitle> SRI International, </booktitle> <address> Menlo Park, California, </address> <month> January </month> <year> 1991. </year>
Reference-contexts: To obtain an insight into the average performance of LPRA, the algorithm was analyzed by simulation using the topologies of typical networks. Simulations were performed using Drama <ref> [13] </ref> along with a network simulation library. The performance was compared with a diffusing update algorithm DUAL [4] and an ideal link-state algorithm (ILS). The simulation uses link weights of equal cost, and zero link transmission delays.
References-found: 13

