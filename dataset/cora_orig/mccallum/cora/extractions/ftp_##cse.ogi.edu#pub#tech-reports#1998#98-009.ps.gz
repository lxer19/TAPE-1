URL: ftp://cse.ogi.edu/pub/tech-reports/1998/98-009.ps.gz
Refering-URL: ftp://cse.ogi.edu/pub/tech-reports/README.html
Root-URL: http://www.cse.ogi.edu
Title: Abstract  
Abstract: We introduce SWiFT, a toolkit for building adaptive system software using a control-theoretic approach. SWiFT allows systematic implementation of feedback-control mechanisms. It also provides a framework for composing simple feedback mechanisms that operate within limited domains, and for dynamically reconfiguring them. This composition allows the application to adapt efficiently across a wide range of operating conditions. We describe a streaming application to demonstrate the feasibility of this technology. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> William L. Brogan. </author> <title> Modern Control Theory. </title> <publisher> Quantum Publishers, Inc., </publisher> <year> 1974. </year>
Reference-contexts: We have extended Cens toolkit, ported it to NT, provided composition and analysis tools, and incorporated a run-time reconfiguration mechanism. These extensions are discussed later in this paper. Several commercially available toolkits, such as Matlab [18] and MATRIXx [9] support building linear <ref> [1] </ref>, nonlinear [7] and fuzzy [13] controllers. They provide various predefined control building blocks, simulation, analysis and GUI tools. The target applications of these toolkits are traditional hardware or embedded control systems that have predictable dynamics and gradual transitions.
Reference: [2] <author> Ingo Busse, Bernd Deffner, and Henning Schulzrinne. </author> <title> Dynamic QoS control of multimedia applications based on RTP. </title> <journal> Computer Communications, </journal> <volume> 19:4958, </volume> <month> January </month> <year> 1996. </year>
Reference-contexts: For example, SWiFT supports dynamic reconfiguration through guarding and replug-ging, and direct manipulation of a running control through its debugging tools. Software feedback has been used extensively for adaptive scheduling, flow and congestion control <ref> [11, 17, 12, 2] </ref> and intra- and inter-stream synchronization in distributed multimedia systems [16, 5].
Reference: [3] <author> Bill Carpenter, Mark Roman, Nick Vasilatos, and Myron Zimmerman. </author> <title> The RTX real-time subsystem for Windows NT. </title> <booktitle> In USENIX, editor, The USENIX Windows NT Workshop 1997, August 1113, 1997. </booktitle> <address> Seattle, Washington, </address> <pages> pages 3337, </pages> <address> Berkeley, CA, USA, </address> <month> August </month> <year> 1997. </year> <booktitle> USENIX. </booktitle>
Reference-contexts: The controller can exist as a user or kernel-level driver, but the underlying scheduling mechanism needs to be integrated with the thread scheduler in the NT kernel. Although we could modify NTs abstraction layer as described by Carpenter et al. <ref> [3] </ref>, an integrated approach would allow us to provide an adaptive universal thread scheduler, which is our ultimate goal.
Reference: [4] <author> Shanwei Cen. </author> <title> A Software Feedback Toolkit and Its Applications in Adaptive Multimedia Systems. </title> <type> PhD thesis, </type> <institution> Oregon Graduate Institute of Science and Technology, </institution> <month> August </month> <year> 1997. </year> <institution> Department of Computer Science and Technology. </institution>
Reference-contexts: Massalin and Pu introduced the idea of feedback-based resource management in operating systems in the Synthesis kernel [15]. Cen built an early version of SWiFT, and used it to build an adaptive distributed multimedia player <ref> [4] </ref>. We have extended Cens toolkit, ported it to NT, provided composition and analysis tools, and incorporated a run-time reconfiguration mechanism. These extensions are discussed later in this paper. Several commercially available toolkits, such as Matlab [18] and MATRIXx [9] support building linear [1], nonlinear [7] and fuzzy [13] controllers. <p> Finally, new components can be plugged in or old components can be unplugged. 4.1 An Adaptive Streaming Application As an example, we present the design of a feedback-based reconfigurable controller for streaming multimedia data over both lightly and heavily-buffered networks <ref> [4] </ref>. The goal of the controller is to maximize throughput while avoiding jitter caused either by packet loss or by variation in latency. The controller, situated at the client, monitors the network and adjusts the servers send rate to achieve this goal.
Reference: [5] <author> Shanwei Cen, Calton Pu, Richard Staehli, Cowan Cowan, and Jonathan Walpole. </author> <title> Demonstrating the effect of software feedback on a distributed real-time MPEG video audio player. </title> <booktitle> In Proceedings of the Third ACM International Multimedia Conference and Exhibition, </booktitle> <pages> pages 239240, </pages> <address> San Francisco, CA, USA, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: For example, SWiFT supports dynamic reconfiguration through guarding and replug-ging, and direct manipulation of a running control through its debugging tools. Software feedback has been used extensively for adaptive scheduling, flow and congestion control [11, 17, 12, 2] and intra- and inter-stream synchronization in distributed multimedia systems <ref> [16, 5] </ref>.
Reference: [6] <author> Craig Chambers. </author> <title> Predicate Classes. </title> <editor> In O. Nierstrasz, editor, </editor> <booktitle> Proceedings of the ECOOP93 European Conference on Object-oriented Programming, </booktitle> <volume> LNCS 707, </volume> <pages> pages 268296, </pages> <address> Kaiserslautern, Germany, July 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The mechanisms used for dynamic reconfiguration in SWiFT are similar to code replacement in specialization [19, 14] and to object invocation in multi-dispatch object-oriented languages <ref> [6] </ref>, but the goals are different. Code specialization improves performance by replugging code that is partially evaluated given invariants in the current environment, whereas SWiFT reconfigures policies tuned for the current environment. Multi-dispatch languages can implement reconfiguration of arbitrary code, but this generality disallows simultaneous composition of multiple, distinct functionality.
Reference: [7] <author> P. A. Cook. </author> <title> Nonlinear Dynamical Systems. </title> <publisher> Prentice-Hall International (UK) Ltd., </publisher> <year> 1986. </year>
Reference-contexts: We have extended Cens toolkit, ported it to NT, provided composition and analysis tools, and incorporated a run-time reconfiguration mechanism. These extensions are discussed later in this paper. Several commercially available toolkits, such as Matlab [18] and MATRIXx [9] support building linear [1], nonlinear <ref> [7] </ref> and fuzzy [13] controllers. They provide various predefined control building blocks, simulation, analysis and GUI tools. The target applications of these toolkits are traditional hardware or embedded control systems that have predictable dynamics and gradual transitions.
Reference: [8] <author> Galen C. Hunt. </author> <title> Creating user-mode device drivers with a proxy. </title> <booktitle> In USENIX, editor, The USENIX Windows NT Workshop 1997, August 1113, 1997. </booktitle> <address> Seattle, Washington, </address> <pages> pages 5559, </pages> <address> Berkeley, CA, USA, </address> <month> August </month> <year> 1997. </year> <booktitle> USENIX. </booktitle>
Reference-contexts: These goals requires a different policy mechanism, and hence uses SWiFTs dynamic reconfiguration. NTs modular design lets us implement this mechanism as a user-mode NT driver <ref> [8] </ref>, allowing a single user-level controller to mediate the demands of multiple (possibly conflicting) applications. The feedback-based proportional share CPU scheduler will make scheduling decisions for pipelines of processes that share data buffers.
Reference: [9] <author> Integrated Systems, Inc. </author> <title> MATRIX x family technical specification. </title> <address> http://www.isi.com/Products/ MATRIXx/Techspec/toc.html, </address> <year> 1997. </year>
Reference-contexts: We have extended Cens toolkit, ported it to NT, provided composition and analysis tools, and incorporated a run-time reconfiguration mechanism. These extensions are discussed later in this paper. Several commercially available toolkits, such as Matlab [18] and MATRIXx <ref> [9] </ref> support building linear [1], nonlinear [7] and fuzzy [13] controllers. They provide various predefined control building blocks, simulation, analysis and GUI tools. The target applications of these toolkits are traditional hardware or embedded control systems that have predictable dynamics and gradual transitions.
Reference: [10] <author> Intel Corporation. </author> <title> Intel media framework, java edition. </title> <address> http://developer.intel.com/ial/jmedia/ JMFramework.htm, </address> <year> 1997. </year>
Reference-contexts: Although we could pursue this research on any platform, we chose NT for its modular structure, extensibility, and widespread use as a platform for multimedia applications. Our designs make heavy use of NTs user-level device drivers, Microsofts DirectShow infrastructure, and may leverage Intels Media Framework <ref> [10] </ref>. 6 Conclusions We have presented SWiFT, a software feedback toolkit that allows hierarchical composition of complex feedback systems based on simple building blocks. We have also introduced a means of dynamically reconfiguring feedback controllers and monitors.
Reference: [11] <author> V. Jacobson. </author> <title> Congestion avoidance and control. </title> <booktitle> ACM Computer Communication Review; Proceedings of the Sigcomm 88 Symposium in Stanford, </booktitle> <address> CA, </address> <month> August, </month> <year> 1988, </year> <pages> 18, </pages> <address> 4:314329, </address> <year> 1988. </year>
Reference-contexts: Our goal is to move the task of building adaptive system software from wizardry to engineering. Currently, feedback controls of software systems are brittle and written in an ad-hoc manner. As a result, it is difficult to move an existing control, such as TCP flow control <ref> [11] </ref>, to a new domain such as CPU scheduling. In addition, existing controls are built with implicit assumptions about the systems run-time environment and can become unstable in the face of large or discontinuous variations in the operating environment. <p> For example, SWiFT supports dynamic reconfiguration through guarding and replug-ging, and direct manipulation of a running control through its debugging tools. Software feedback has been used extensively for adaptive scheduling, flow and congestion control <ref> [11, 17, 12, 2] </ref> and intra- and inter-stream synchronization in distributed multimedia systems [16, 5].
Reference: [12] <author> Srinivasan Keshav. </author> <title> A control-theoretic approach to flow control. </title> <booktitle> In SIGCOMM91, </booktitle> <pages> pages 316, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: For example, SWiFT supports dynamic reconfiguration through guarding and replug-ging, and direct manipulation of a running control through its debugging tools. Software feedback has been used extensively for adaptive scheduling, flow and congestion control <ref> [11, 17, 12, 2] </ref> and intra- and inter-stream synchronization in distributed multimedia systems [16, 5].
Reference: [13] <author> F. Martin McNeill and Ellen Thro. </author> <title> Fuzzy Logic: a Practical Approach. Boston: AP Professional, </title> <year> 1994. </year>
Reference-contexts: We have extended Cens toolkit, ported it to NT, provided composition and analysis tools, and incorporated a run-time reconfiguration mechanism. These extensions are discussed later in this paper. Several commercially available toolkits, such as Matlab [18] and MATRIXx [9] support building linear [1], nonlinear [7] and fuzzy <ref> [13] </ref> controllers. They provide various predefined control building blocks, simulation, analysis and GUI tools. The target applications of these toolkits are traditional hardware or embedded control systems that have predictable dynamics and gradual transitions.
Reference: [14] <author> Calton Pu, Tito Autrey, Andrew Black, Charles Consel, Crispin Cowan, Jon Inouye, Lakshmi Kethana, Jonathan Walpole, and Ke Zhang. </author> <title> Optimistic incremental specialization: Streamlining a commercial operating system. </title> <booktitle> In SOSP95, </booktitle> <pages> pages 314324, </pages> <address> Copper Mountain resort, Colorado, USA, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Modularity results from our use of components and containers as the underlying abstraction. SWiFT enables dynamic reconfiguration by limiting the interaction between components to a simple input/output model and by supporting guarding and replugging of controllers <ref> [14] </ref>. SWiFT supports predictability by providing analysis tools based on control theory, and a domain-specific language for specifying composition with predictable results. <p> The mechanisms used for dynamic reconfiguration in SWiFT are similar to code replacement in specialization <ref> [19, 14] </ref> and to object invocation in multi-dispatch object-oriented languages [6], but the goals are different. Code specialization improves performance by replugging code that is partially evaluated given invariants in the current environment, whereas SWiFT reconfigures policies tuned for the current environment.
Reference: [15] <author> Calton Pu, Henry Massalin, and John Loannidis. </author> <title> The synthesis kernel. </title> <booktitle> Computing Systems, </booktitle> <address> 1(1):1132, </address> <month> Winter </month> <year> 1988. </year>
Reference-contexts: Massalin and Pu introduced the idea of feedback-based resource management in operating systems in the Synthesis kernel <ref> [15] </ref>. Cen built an early version of SWiFT, and used it to build an adaptive distributed multimedia player [4]. We have extended Cens toolkit, ported it to NT, provided composition and analysis tools, and incorporated a run-time reconfiguration mechanism. These extensions are discussed later in this paper.
Reference: [16] <author> Srinivas Ramanathan and P. Venkat Rangan. </author> <title> Adaptive feedback techniques for synchronized multimedia retrieval over integrated networks. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 1(2):246260, </volume> <month> April </month> <year> 1993. </year>
Reference-contexts: For example, SWiFT supports dynamic reconfiguration through guarding and replug-ging, and direct manipulation of a running control through its debugging tools. Software feedback has been used extensively for adaptive scheduling, flow and congestion control [11, 17, 12, 2] and intra- and inter-stream synchronization in distributed multimedia systems <ref> [16, 5] </ref>.
Reference: [17] <author> Scott Shenker. </author> <title> A theoretical analysis of feedback flow control. </title> <booktitle> In Proceedings of SIGCOMM90, </booktitle> <pages> pages 156165, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: For example, SWiFT supports dynamic reconfiguration through guarding and replug-ging, and direct manipulation of a running control through its debugging tools. Software feedback has been used extensively for adaptive scheduling, flow and congestion control <ref> [11, 17, 12, 2] </ref> and intra- and inter-stream synchronization in distributed multimedia systems [16, 5].
Reference: [18] <author> The MathWorks, Inc. </author> <title> Matlab product tour. </title> <note> http:// www.mathworks.com/products.html, 1997. </note>
Reference-contexts: We have extended Cens toolkit, ported it to NT, provided composition and analysis tools, and incorporated a run-time reconfiguration mechanism. These extensions are discussed later in this paper. Several commercially available toolkits, such as Matlab <ref> [18] </ref> and MATRIXx [9] support building linear [1], nonlinear [7] and fuzzy [13] controllers. They provide various predefined control building blocks, simulation, analysis and GUI tools. The target applications of these toolkits are traditional hardware or embedded control systems that have predictable dynamics and gradual transitions.
Reference: [19] <author> Eugen N. Volanschi, Charles Consel, and Crispin Cowan. </author> <title> Declarative specialization of object-oriented programs. </title> <booktitle> In Proceedings of the ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages and Applications (OOPSLA-97), volume 32, 10 of ACM SIGPLAN Notices, </booktitle> <pages> pages 286300, </pages> <address> New York, </address> <month> October </month> <year> 1997. </year> <note> ACM Press. </note>
Reference-contexts: The mechanisms used for dynamic reconfiguration in SWiFT are similar to code replacement in specialization <ref> [19, 14] </ref> and to object invocation in multi-dispatch object-oriented languages [6], but the goals are different. Code specialization improves performance by replugging code that is partially evaluated given invariants in the current environment, whereas SWiFT reconfigures policies tuned for the current environment.
Reference: [20] <author> R. Yavatkar and N. Bhagwat. </author> <title> Improving end-to-end performance of TCP over mobile internetworks. </title> <booktitle> In Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, U.S., </address> <year> 1994. </year>
Reference-contexts: This reconfiguration is the controlled systems response to drastic changes in the underlying environment that violate the controllers basic design assumptions. For instance, TCPs adaptive flow-control algorithm performs poorly over wireless links. Replacing this policy with one more suited to wireless use results in better performance <ref> [20] </ref>. Dynamic reconfiguration is similar to hardware hot-swapping with the addition that the swapping is done automatically. estimates the average and the standard deviation. 4 Reconfiguration is useful when the designer cannot completely describe the systems environment.
References-found: 20

