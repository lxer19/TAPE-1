URL: http://www.wi.leidenuniv.nl/home/joost/scp.ps.gz
Refering-URL: http://www.wi.leidenuniv.nl/home/joost/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Coordination in the ImpUnity Framework  
Author: H.J.M. Goeman a J.N. Kok a K. Sere b and R.T. Udink c 
Address: P.O.Box 9512, 2300 RA Leiden, The Netherlands  FIN-20520 Turku, Finland  P.O.Box 80089, 3508 TB Utrecht, The Netherlands  
Affiliation: a Dept. of Computer Science, Leiden University,  b Dept. of Computer Science, Abo Akademi University,  c Dept. of Computer Science, Utrecht University,  
Abstract: Our main interest in this paper is to investigate how we can combine different systems and languages via a shared tuple space. The languages themselves can be for example standard imperative languages. Hence we study a framework, in which we can have both the possibility for communication via a shared tuple space, and more standard imperative programming constructs. The ImpUNITY framework is an extension of the UNITY framework. It contains several program structuring mechanisms and puts special emphasis on compositional refinement of both specifications and programs. It has an associated temporal logic, formal refinement notions, and program transformation rules. In this paper we extend this framework further: we show how coordination in the form of a shared tuple space between communicating ImpUNITY programs is modelled and used during formal program specification and refinement. We exemplify our formalism by a larger case study on a phone system where communication in the system is partly taken care of via a tuple space. Additionally we bring structure in the tuple space and the state spaces of the local programs, by allowing parts of them to be hidden and making it possible to restrict the access rights of different components to the tuple space. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.-M. Andreoli, C. Hankin, and D. Le Metayer, </author> <title> editors. Coordination Programming: mechanisms, models and semantics. </title> <publisher> Imperial College Press, </publisher> <year> 1996. </year>
Reference-contexts: 1 Introduction Coordination mechanisms play an important role in computer science, and have become a popular research topic. For a good overview of the work in this area consult the book on coordination programming <ref> [1] </ref> or the proceedings of the Coordination (Languages and Models) conference [9]. Several examples of action based coordination languages have been presented in the literature. The shared data space language Swarm [10] is based on UNITY [5].
Reference: [2] <author> R. J. R. Back and K. Sere. </author> <title> From action systems to modualar systems. </title> <booktitle> Software Concepts and Tools, </booktitle> <volume> 17 </volume> <pages> 26-39, </pages> <year> 1996. </year>
Reference-contexts: ImpUNITY can be seen as a mixture between UNITY and the language of the action system formalism. It has an associated temporal logic similar to the logic of UNITY [5] and it has formal refinement notions and the structuring mechanisms (procedures, local variables) of the action system formalism <ref> [2] </ref>. Statements in an ImpUNITY program are statements in an extended language of guarded commands [16]. In addition to the above mentioned features, like with action systems, we allow statements to be nondeterministic.
Reference: [3] <author> J.-P Ban^atre and D. Le Metayer. </author> <title> The Gamma model and its discipline of programming. </title> <booktitle> Science of computer programming, </booktitle> <volume> 15 </volume> <pages> 55-77, </pages> <year> 1990. </year>
Reference: [4] <author> J.-P Ban^atre and D. Le Metayer. </author> <title> Gamma and the chemical reaction model: ten years after. </title> <editor> In J.-M. Andreoli, C. Hankin, and D. Le Metayer, editors, </editor> <booktitle> Coordination Programming: mechanisms, models and semantics, </booktitle> <pages> pages 3-41. </pages> <institution> Imperial College Press, </institution> <year> 1996. </year>
Reference: [5] <author> K.M. Chandy and J. Misra. </author> <title> Parallel Program Design: a Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year> <month> 25 </month>
Reference-contexts: Several examples of action based coordination languages have been presented in the literature. The shared data space language Swarm [10] is based on UNITY <ref> [5] </ref>. There are, however, some differences: a Swarm program is based Preprint submitted to Elsevier Science 2 May 1997 on a dynamic set of nondeterministic transaction statements. <p> We discuss how the ImpUNITY-framework can be used for this purpose. The ImpUNITY-framework was introduced by Udink and Kok [16,15]. It is an extension of the UNITY-framework of Chandy and Misra <ref> [5] </ref> with the emphasis on formal refinement notions between programs and a collection of program structuring mechanisms. Moreover, the ImpUNITY framework supports compositional refinement of both specifications and programs. <p> ImpUNITY can be seen as a mixture between UNITY and the language of the action system formalism. It has an associated temporal logic similar to the logic of UNITY <ref> [5] </ref> and it has formal refinement notions and the structuring mechanisms (procedures, local variables) of the action system formalism [2]. Statements in an ImpUNITY program are statements in an extended language of guarded commands [16]. <p> CM q in F i; The properties defined above are UNITY-like properties in the sense that they can be used in a similar way as the standard UNITY properties. All theorems derived in <ref> [5] </ref> for properties of a single program also hold for the ImpUNITY properties. Furthermore, the theorems derived for the ensures CM property also 9 hold for the . CM and . fl properties. And then, the following substitution theorem holds.
Reference: [6] <author> M. Chaudron and E. de Jong. </author> <title> Schedules for multiset transformer programs. </title> <editor> In J.-M. Andreoli, C. Hankin, and D. Le Metayer, editors, </editor> <booktitle> Coordination Programming: mechanisms, models and semantics, </booktitle> <pages> pages 195-210. </pages> <institution> Imperial College Press, </institution> <year> 1996. </year>
Reference-contexts: Computations are expressed without imposing any constraints on the mode of execution. A method to coordinate Gamma programs via so called schedulers is put forward by Chaudron and de Jong [7] together with a notion of refinement for the schedulers <ref> [6] </ref>. Gamma has associated compositional semantics based on transition traces [8] as well as one based on bisimulation [14]. Moreover, Hankin et al. [12] derive a number of refinement rules for Gamma programs.
Reference: [7] <author> M. Chaudron and E. de Jong. </author> <title> Towards a compositional method for coordinating gamma programs. </title> <editor> In P. Ciancarini and C. Hankin, editors, </editor> <booktitle> Coordination: Languages and Models First International Conference, COORDINATION '96, number 1061 in Lecture Notes in Computer Science, </booktitle> <pages> pages 107-123. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: The Gamma language [3,4] is based on a multiset of actions that work on a shared tuple space. Computations are expressed without imposing any constraints on the mode of execution. A method to coordinate Gamma programs via so called schedulers is put forward by Chaudron and de Jong <ref> [7] </ref> together with a notion of refinement for the schedulers [6]. Gamma has associated compositional semantics based on transition traces [8] as well as one based on bisimulation [14]. Moreover, Hankin et al. [12] derive a number of refinement rules for Gamma programs.
Reference: [8] <author> P. Ciancarini, R. Gorrieri, and G. Zavattaro. </author> <title> An alternative semantics for the calculus of gamma programs. </title> <editor> In J.-M. Andreoli, C. Hankin, and D. Le Metayer, editors, </editor> <booktitle> Coordination Programming: mechanisms, models and semantics, </booktitle> <pages> pages 232-248. </pages> <institution> Imperial College Press, </institution> <year> 1996. </year>
Reference-contexts: A method to coordinate Gamma programs via so called schedulers is put forward by Chaudron and de Jong [7] together with a notion of refinement for the schedulers [6]. Gamma has associated compositional semantics based on transition traces <ref> [8] </ref> as well as one based on bisimulation [14]. Moreover, Hankin et al. [12] derive a number of refinement rules for Gamma programs. Both Swarm and Gamma concentrate on the interaction with a shared tuple space as the main communication medium.
Reference: [9] <editor> P. Ciancarini and C. Hankin, editors. </editor> <booktitle> Coordination: Languages and Models First International Conference, COORDINATION '96, number 1061 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: 1 Introduction Coordination mechanisms play an important role in computer science, and have become a popular research topic. For a good overview of the work in this area consult the book on coordination programming [1] or the proceedings of the Coordination (Languages and Models) conference <ref> [9] </ref>. Several examples of action based coordination languages have been presented in the literature. The shared data space language Swarm [10] is based on UNITY [5].
Reference: [10] <author> H.C. Cunningham and G.C. Roman. </author> <title> A unity-style programming logic for a shared dataspace language. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 1(3) </volume> <pages> 365-376, </pages> <year> 1990. </year>
Reference-contexts: For a good overview of the work in this area consult the book on coordination programming [1] or the proceedings of the Coordination (Languages and Models) conference [9]. Several examples of action based coordination languages have been presented in the literature. The shared data space language Swarm <ref> [10] </ref> is based on UNITY [5]. There are, however, some differences: a Swarm program is based Preprint submitted to Elsevier Science 2 May 1997 on a dynamic set of nondeterministic transaction statements.
Reference: [11] <author> H.J.M. Goeman, J.N. Kok, K. Sere, </author> <title> and R.T. Udink. Coordination in the impunity framework. In Coordination Languagues and Models, </title> <booktitle> First International Conference, COORDINATION '96, number 1061 in Lecture Notes in Computer Science, </booktitle> <pages> pages 215-230. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Moreover, the ImpUNITY framework supports compositional refinement of both specifications and programs. In this paper we extend this framework further and show how communication via shared tuple space is treated when specifying and deriving programs within this framework. Compared to our previous work on coordination in the ImpUNITY framework <ref> [11] </ref> we give here a more formal treatment of the semantical aspects of bringing a tuple space communication into the framework. We also adapt the program refinement notions accordingly.
Reference: [12] <author> C. Hankin, D. Le Metayer, and D. Sands. </author> <title> A calculus of gamma programs. </title> <booktitle> In Fifth International Workshop on Languages and Compilers for Parallel Computing, number 757 in Lecture Notes in Computer Science, </booktitle> <pages> pages 342-355. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Gamma has associated compositional semantics based on transition traces [8] as well as one based on bisimulation [14]. Moreover, Hankin et al. <ref> [12] </ref> derive a number of refinement rules for Gamma programs. Both Swarm and Gamma concentrate on the interaction with a shared tuple space as the main communication medium. Our main interest in this paper is to investigate how we can combine different systems and languages via a shared tuple space.
Reference: [13] <author> E. Hedman, J.N. Kok, and K. Sere. </author> <title> Coordinating action systems. </title> <type> Technical Report 92, </type> <institution> TUCS, </institution> <note> Januari 1997. To appear in Proceedings Coordination'97. </note>
Reference-contexts: We included two forms of communication between ImpUNITY programs for this example, namely communication via the tuple space and communication via procedure calls. From a programming methodology viewpoint it might be better to use just one form of communication. In our recent research <ref> [13] </ref> we extend the ideas of this paper further by studying structuring mechanisms that explicitely impose coordination on top of a completely nondeterministic execution of actions.
Reference: [14] <author> D. Sands. </author> <title> A compositional semantics of combining forms for gamma programs. </title> <booktitle> In Formal Methods in Programming and Their Applications, number 735 in Lecture Notes in Computer Science, </booktitle> <pages> pages 43-56. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: A method to coordinate Gamma programs via so called schedulers is put forward by Chaudron and de Jong [7] together with a notion of refinement for the schedulers [6]. Gamma has associated compositional semantics based on transition traces [8] as well as one based on bisimulation <ref> [14] </ref>. Moreover, Hankin et al. [12] derive a number of refinement rules for Gamma programs. Both Swarm and Gamma concentrate on the interaction with a shared tuple space as the main communication medium.
Reference: [15] <author> R.T. Udink. </author> <title> Program refinement in UNITY-like Environments. </title> <type> PhD thesis, </type> <institution> Utrecht University, department of computer science, </institution> <year> 1995. </year>
Reference-contexts: p 0 unless fl q 0 in F ; p ensures fl q in F = p 0 ensures fl q 0 in F ; p 7! fl q in F = p 0 7! fl q 0 in F ; The proof of this theorem can be found in <ref> [15] </ref>. The compositionality of the properties is expressed by the following lemma. Lemma 4 Let F and H be ImpUNITY programs. <p> If - h []Stat : Stat 2 assign (F ) : Stati [] skip Stat 0 , and assign (G) = assign (F ) [ fStat 0 g, then F v G. For an overview of the ImpUNITY rules, including the more powerful rules of data refinement, consult <ref> [15] </ref>. The proofs of the transformation rules can also be found there. 15 5 Phone System In this section we derive a specification of a phone system via a number of refinement steps. We start from the following initial specification, consisting of a non-interference condition and two unless CM properties.
Reference: [16] <author> R.T. Udink and J.N. Kok. ImpUNITY: </author> <title> UNITY with procedures and local variables. </title> <booktitle> In Proc. of Mathematics of Program Construction '95, number 947 in Lecture Notes in Computer Science, </booktitle> <pages> pages 452-472. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: It has an associated temporal logic similar to the logic of UNITY [5] and it has formal refinement notions and the structuring mechanisms (procedures, local variables) of the action system formalism [2]. Statements in an ImpUNITY program are statements in an extended language of guarded commands <ref> [16] </ref>. In addition to the above mentioned features, like with action systems, we allow statements to be nondeterministic. In this paper we use the following syntax: A statement is the nondeterministic choice between a number of guarded statements.
Reference: [17] <author> R.T. Udink, J.N. Kok, and T. Herman. </author> <title> Progress for local variables in UNITY. </title> <booktitle> In Proc. IFIP working conference on programming concepts, methods and calculi, volume A056 of IFIP Transactions, </booktitle> <pages> pages 127-146. </pages> <publisher> North-Holland, </publisher> <year> 1994. </year> <month> 26 </month>
References-found: 17

