URL: http://www.cs.bham.ac.uk/~rmp/eebic/WSC2/gp-music/gp-music-auto-raters.ps.gz
Refering-URL: http://www.cs.bham.ac.uk/~rmp/eebic/WSC2/gp-music/gp_music.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Automated Fitness Raters for the GP-Music System  
Author: by Brad Johanson Supervisor: Dr. Riccardo Poli 
Web: http://www.cs.bham.ac.uk/~bej/gp-music/gp-music.html  
Date: 15 September, 1997  
Affiliation: University of Birmingham  
Note: Final Project  Online Version:  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Beale, R., </author> <title> Neural Computing: An Introduction, </title> <publisher> Institute of Physics Publishing, </publisher> <address> Bristol and Philadelphia, </address> <year> 1990 </year>
Reference-contexts: More information on back propagation neural networks at an introductory level can be found in <ref> [1] </ref>. 3.3 The Lil-GP Programming System The Lil-GP Programming system was used as the basis for the GP-Music System. It is a set of C libraries created by Douglas Zongker, Bill Punch, and Bill Rand at Michigan State University to perform Genetic Programming tasks [17].
Reference: 2. <author> Benjamin, T., Horvit, M., Nelson, R., </author> <title> Techniques and Materials of Tonal Music, </title> <address> 2 nd Edition, Houghton Mifflin, Boston, </address> <year> 1979 </year>
Reference: 3. <author> Biles, J. A., GenJam: </author> <title> A Genetic Algorithm for Generating Jazz Solos </title>
Reference-contexts: Unfortunately it was not very successful since the neural network did not have an adequate amount of training on poor responses. Biles <ref> [3] </ref> designed the GenJam system which uses Genetic Algorithms. It evolves measures, and phrases (which are a series of measures) simultaneously in a real time fashion. As the user listens to a stream of phrases and measures, they type b for bad or g for good.
Reference: 4. <author> Burton, A. R., Vladimirova, T., </author> <title> Genetic Algorithm Utilising Neural Network Fitness Evaluation for Musical Composition, ICANNGA 97 Abstracts, </title> <editor> p. </editor> <volume> 23, </volume> <year> 1997 </year>
Reference: 5. <author> Cope, D., </author> <title> An Expert System for Computer-assisted Composition, </title> <journal> Computer Music Journal, </journal> <volume> Vol. 11, No. 4, </volume> <pages> pp. 30-46, </pages> <year> 1987 </year>
Reference-contexts: John Rahns Lisp Kernel system [11] also has a basic language for composition, but is more concerned in integrating music synthesis, acquisition and composition across various hardware devices and software packages attached to a given computer. Also of note as AI based attempts at music composition are Copes EMI <ref> [5] </ref> and Todds Connectionist Approach [15]. Cope created an expert system which was attuned to his own style of composition and was able to use it to create perturbations of a theme for use throughout a larger composition.
Reference: 6. <author> Gibson, P. M., Byrne, J. A., </author> <title> Neurogen, Musical Composition Using Genetic Algorithms and Cooperating Neural Networks, </title> <journal> IEE Conference Publication, </journal> <volume> No. 349, </volume> <pages> pp. 309-313, </pages> <year> 1991 </year>
Reference-contexts: The accumulation of gs and bs serves as the fitness for the measures. This is interactive GA, and the author reports that although some decent phrases eventually begin to emerge, the process is tedious. A final system using GAs is Neurogen <ref> [6] </ref>. It used a three stage approach where rhythm is first created, and then added in with melody, and finally combined with other phrases to create a harmony.
Reference: 7. <author> Johanson, B. E., </author> <title> The GP-Music System: Interactive Genetic Programming for Music Composition, </title> <institution> University of Birmingham, SecondSemester Mini-Project Report, </institution> <year> 1997 </year>
Reference-contexts: The GP-Music System This section describes the GP-Music System, and gives an overview of the work done prior to this project. Previous work was done during the Spring 1997 Semester at the University of Birmingham, and is discussed fully in <ref> [7] </ref>. 2 Note that the octaves are numbered from zero, so octave four is actually the fifth octave. Automated Fitness Raters for the GP-Music System Page 7 4.1 System Overview 4.1.1 Basic Functionality The GP-Music System uses user interactive Genetic Programming to evolve short melodies.
Reference: 8. <author> Koza, J. R., </author> <title> Genetic Programming 2: Automatic Discovery of Reusable Programs, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA., </address> <year> 1994 </year>
Reference-contexts: The default values used are fairly standard, and approximately mimic those suggested by Koza in his second book <ref> [8] </ref>. 5 This is discussed further in Section 4.2. 6 Even in this instance, however, you have the benefit of variable length sequences when compared to using GA. <p> Automatically Defined Functions Trial In the initial concept for the GP-Music project, one of the exciting possibilities of using Genetic Programming seemed to be the use of Automatically Defined Functions, or ADFs. These were first presented in Kozas second book <ref> [8] </ref>, which concentrated on their use. Essentially an ADF is a separate program tree which can be reused within the body of the main program tree. A given ADF can be either self-contained, or take parameters which are used in its own tree.
Reference: 9. <author> Koza, J. R., </author> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA., </address> <year> 1992 </year>
Reference-contexts: In both techniques an initial random population of potential solutions to a problem (chromosomes) are created. In GA systems, the chromosome is a fixed length string, while in GP, introduced by Koza <ref> [9] </ref>, the chromosome is instead a tree of functions and arguments. A fitness is assigned to each Page 4 Automated Fitness Raters for the GP-Music System solution which reflects how well it solves the problem at hand.
Reference: 10. <author> Poli, R., Cagnoni, S., </author> <title> Evolution of Pseudo-colouring Algorithms for Image Enhancement with Interactive Genetic Programming, </title> <institution> University of Birmingham, </institution> <type> Technical Report CSRP-97-5, </type> <year> 1997 </year>
Reference-contexts: The authors report that initial results are promising, but do not present any derived music. 2.3 Other Interactive GP/GA Systems Other systems have also used interactive GA or GP with a user serving as the fitness function. Such a system was used by Poli and Cagnoni <ref> [10] </ref> to evolve methods for coloring MRI scans of the brain in ways that best emphasized key features. Some attempts were made to provide a model of the user to reduce the burden of having to rate images, but they were not very successful. 3. <p> Instead a human using the system is asked to rate the musical sequences that are created for each generation of the GP process. This is similar to Polis <ref> [10] </ref> system for evolving pseudo-color image algorithms, discussed in Section 2.3. Currently the system lets the user rate each musical sequence on a 1-100 scale. A simple user interface in X-Windows was created to facilitate this rating. The interface is shown in Figure 3.
Reference: 11. <author> Rahn, J., </author> <title> The Lisp Kernel: A Portable Software Environment for Composition, </title> <journal> Computer Music Journal, </journal> <volume> Vol. 14, No. 4, </volume> <pages> pp. 42-58, </pages> <year> 1990 </year>
Reference-contexts: Unfortunately it does not have many low level structuring features which would have been useful as a model for GP-Music. John Rahns Lisp Kernel system <ref> [11] </ref> also has a basic language for composition, but is more concerned in integrating music synthesis, acquisition and composition across various hardware devices and software packages attached to a given computer. Also of note as AI based attempts at music composition are Copes EMI [5] and Todds Connectionist Approach [15].
Reference: 12. <author> Rowe, R., </author> <title> Interactive Music Systems: Machine Listening and Composing, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA., </address> <year> 1993 </year>
Reference: 13. <author> Schottstaedt, B., </author> <title> PLA: A Composers Idea of a Language, </title> <journal> Computer Music Journal, </journal> <volume> Vol. 7, No. 1, </volume> <pages> pp. 11-20, </pages> <note> 1983 Page 68 Automated Fitness Raters for the GP-Music System </note>
Reference-contexts: This section outlines some of the work done in these areas. 2.1 General Attempts Using Genetic Programming for music composition entails a programming language for the same. Several people have created robust languages for music composition. One example is Pla, developed by Bill Schottstaedt in the early 1980s <ref> [13] </ref>. The language is quite complex, and has many special features to deal with the low level sounds created by instruments, and it has other features for dealing with polyphony. Unfortunately it does not have many low level structuring features which would have been useful as a model for GP-Music.
Reference: 14. <author> Spector, L., Alpern, A., </author> <title> Induction and Recapitulation of Deep Musical Structures, </title> <booktitle> Proceedings of the IJCAI-95 Workshop on Music and AI </booktitle>
Reference-contexts: Using a feedback system, the network is able to continue a composition based on previous notes. 2.2 GA Related Attempts Several attempts have also been made to apply Genetic Algorithms and Genetic Programming to music composition. Spector and Alpern <ref> [14] </ref> came up with a GP system which evolved responses to call phrases in Jazz pieces.
Reference: 15. <author> Todd, P. M., </author> <title> A Connectionist Approach to Algorithmic Composition, </title> <journal> Computer Music Journal, </journal> <volume> Vol. 13, No. 4, </volume> <pages> pp. 27-43, </pages> <year> 1989 </year>
Reference-contexts: Also of note as AI based attempts at music composition are Copes EMI [5] and Todds Connectionist Approach <ref> [15] </ref>. Cope created an expert system which was attuned to his own style of composition and was able to use it to create perturbations of a theme for use throughout a larger composition.
Reference: 16. <author> Zhao, T.C., Overmars, M., </author> <title> Xforms library for Xlib, </title> <year> 1995 </year>
Reference-contexts: The interfaces are based upon the xforms library by Zhao and Overmars <ref> [16] </ref>. Table 6 lists all the files in the GP-Music System, while Table 7 lists the files for the auto-rating system: 10 Some of the code was developed during the initial work on GP-Music.
Reference: 17. <author> Zongker, D., Punch, B., Rand, B., </author> <note> lil-gp 1.01, </note> <institution> Michigan State University, </institution> <year> 1996 </year>
Reference-contexts: It is a set of C libraries created by Douglas Zongker, Bill Punch, and Bill Rand at Michigan State University to perform Genetic Programming tasks <ref> [17] </ref>. One of its main features is that it evolves the program trees as trees of C-function pointers, which means that the trees can be executed rapidly to evaluate their fitness. <p> Overall this makes GP a more flexible approach to evolving musical note sequences. 4.1.5 Parameter Specification General parameter specification was done using the facilities provided by the Lil-GP system <ref> [17] </ref>. Default values were chosen for each parameter, and these were then modified during some of the program runs to determine their effect on the resulting musical sequences. The default was to have 6 generations of 16 individuals. <p> Page 20 Automated Fitness Raters for the GP-Music System 5. Applications Overview This section gives an overview of the code developed for the GP-Music System and the associated auto-raters. 10 As mentioned earlier, the system is built on top of the lil-gp system from Michigan State University <ref> [17] </ref>. The interfaces are based upon the xforms library by Zhao and Overmars [16]. Table 6 lists all the files in the GP-Music System, while Table 7 lists the files for the auto-rating system: 10 Some of the code was developed during the initial work on GP-Music.
References-found: 17

