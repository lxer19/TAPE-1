URL: http://robotics.eecs.berkeley.edu/~lygeros/Postscript/game_memo.ps
Refering-URL: http://robotics.eecs.berkeley.edu/~lygeros/Publications/game_memo.html
Root-URL: 
Email: lygeros, godbole, sastry@robotics.eecs.berkeley.edu  
Title: A Game Theoretic Approach to Hybrid System Design  
Author: John Lygeros, Datta N. Godbole and Shankar Sastry 
Address: Berkeley, CA 94720  
Affiliation: Intelligent Machines and Robotics Laboratory University of California, Berkeley  
Abstract: We present a design and verification methodology for hybrid dynamical systems. Our approach is based on optimal control and game theory. The hybrid design is seen as a game between two players. One is the disturbances that enter the dynamics. The disturbances can encode the actions of other agents (in a multi-agent setting), the actions of high level controllers or the usual unmodeled environmental disturbances. The second player is the control, which is to be chosen by the designer. The two players compete over a cost function that encodes the properties that the closed loop hybrid system needs to satisfy (e.g. safety). The control "wins" the game if it can keep the system "safe" for any allowable disturbance. The solution to the game theory problem provides the designer with continuous controllers as well as sets of safe states where the control "wins" the game. The sets of safe sets can be used to construct an interface that guarantees the safe operation of the combined hybrid system. In addition to design, this optimal control methodology can also be used for the verification of hybrid systems as well as the generation of abstractions of the lower layer behavior in terms of the higher layer language (e.g. timed abstractions). The motivating example for our work is Automated Highway Systems. We show how to cast the lower level, multi-agent control problem in the game theoretic setting and give an algorithm that can produce a safe design.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Z. Har'El and R. Kurshan, </author> <title> Cospan User's Guide. </title> <institution> AT&T Bell Laboratories, </institution> <year> 1987. </year>
Reference-contexts: Verification algorithms for finite state machines have been in use for years and efficient programs exist to implement them (COSPAN <ref> [1] </ref>, HSIS [2], STATEMATE [3], etc.). They have proved very successful in discrete problems such as communication protocols [4] and software algorithms. The push towards stronger verification techniques has been in the direction of extending the standard finite state machine results to incorporate progressively more complicated continuous dynamics. <p> The requirement is that the accumulated time of leakage does not exceed ff% in any interval larger that T &gt; 0 seconds, i.e. t T ) x &lt; fft 3.3.2 Optimal Control Formulation To cast the verification as an optimal control define: x ([a; b]) 2 <ref> [0; 1] </ref> to be the percentage of leaking time in the interval [a; b] R with 0 a &lt; b. Let: d : [a; b] ! f0; 1g be the leaking times, with d (t) = 0 being "normal" and d (t) = 1 "leaking".
Reference: [2] <author> Adnan Aziz, et al., "HSIS: </author> <title> a BDD-based environment for formal verification," </title> <booktitle> in ACM/IEEE International Conference on CAD, </booktitle> <year> 1994. </year>
Reference-contexts: Verification algorithms for finite state machines have been in use for years and efficient programs exist to implement them (COSPAN [1], HSIS <ref> [2] </ref>, STATEMATE [3], etc.). They have proved very successful in discrete problems such as communication protocols [4] and software algorithms. The push towards stronger verification techniques has been in the direction of extending the standard finite state machine results to incorporate progressively more complicated continuous dynamics.
Reference: [3] <author> M. Heymann, </author> <title> "Hierarchical decomposition of hybrid systems." </title> <type> (preprint), </type> <year> 1994. </year>
Reference-contexts: Verification algorithms for finite state machines have been in use for years and efficient programs exist to implement them (COSPAN [1], HSIS [2], STATEMATE <ref> [3] </ref>, etc.). They have proved very successful in discrete problems such as communication protocols [4] and software algorithms. The push towards stronger verification techniques has been in the direction of extending the standard finite state machine results to incorporate progressively more complicated continuous dynamics.
Reference: [4] <author> A. Hsu, F. Eskafi, S. Sachs, and P. Varaiya, </author> <title> "Protocol design for an automated highway system," Discrete Event Dynamic Systems, </title> <journal> vol. </journal> <volume> 2, no. 1, </volume> <pages> pp. 183-206, </pages> <year> 1994. </year>
Reference-contexts: Verification algorithms for finite state machines have been in use for years and efficient programs exist to implement them (COSPAN [1], HSIS [2], STATEMATE [3], etc.). They have proved very successful in discrete problems such as communication protocols <ref> [4] </ref> and software algorithms. The push towards stronger verification techniques has been in the direction of extending the standard finite state machine results to incorporate progressively more complicated continuous dynamics. The first 3 extension has been for systems with clocks [5] and multi-rate clocks [6].
Reference: [5] <author> R. Alur, C. Courcoubetis, and D. Dill, </author> <title> "Model checking for real-time systems," </title> <booktitle> Logic in Computer Science, </booktitle> <pages> pp. 414-425, </pages> <year> 1990. </year>
Reference-contexts: The push towards stronger verification techniques has been in the direction of extending the standard finite state machine results to incorporate progressively more complicated continuous dynamics. The first 3 extension has been for systems with clocks <ref> [5] </ref> and multi-rate clocks [6]. Theoretical results have established conditions under which problems like these can be solved computationally and algorithms have been developed to implement the verification process (for example timed COSPAN [7] and KRONOS [8]).
Reference: [6] <author> R. Alur, C. Courcoubetis, T. A. Henzinger, and P. H. Ho, </author> <title> "Hybrid automaton: An algorithmic approach to the specification and verification of hybrid systems," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, </editor> <booktitle> eds.), </booktitle> <pages> pp. 209-229, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The push towards stronger verification techniques has been in the direction of extending the standard finite state machine results to incorporate progressively more complicated continuous dynamics. The first 3 extension has been for systems with clocks [5] and multi-rate clocks <ref> [6] </ref>. Theoretical results have established conditions under which problems like these can be solved computationally and algorithms have been developed to implement the verification process (for example timed COSPAN [7] and KRONOS [8]). <p> The results indicate that, under certain conditions, automatic verification should also be possible for such systems [11], but most applications have been to academic examples rather than actual systems. To our knowledge the only computer package capable of dealing with differential inclusions, HyTech, is still under development <ref> [6] </ref>. Progress in the direction of automatic verification has been impeded by for two fundamental reasons. The first is undecidability. To guarantee that automatic verification algorithm will terminate in finite number of steps with an answer, the system needs to satisfy very stringent technical requirements. <p> It is up to the discrete layer to guarantee that these requirements are satisfied. 3.3 The Leaking Gas Burner To illustrate how optimal control ideas can be used to carry out verification consider the "leaking gas burner" example of <ref> [6] </ref>. Even though this problem is rather simple and amenable to other techniques for verification it highlights some of the advantages of verifying using optimal control. 3.3.1 Problem Statement The gas burner has two states, "normal" and "leaking". There are two rules governing the leaking process: 1. <p> The proof is a direct corollary of Lemma 7. Figure 7 shows a graph of ^x ([a; b]) for various values of (D 1 ; D 2 ) and T = 60 seconds (as in <ref> [6] </ref>). The dividing line between acceptable and unacceptable designs is a horizontal plane at height ff. 29 4 Concluding Remarks Hierarchical, hybrid system design and verification has attracted significant attention over the last few years.
Reference: [7] <author> R. P. Kurshan, </author> <title> Computer-aided verification of coordinating processes; the automata-theoretic approach. </title> <publisher> Princeton University Press, </publisher> <year> 1994. </year>
Reference-contexts: The first 3 extension has been for systems with clocks [5] and multi-rate clocks [6]. Theoretical results have established conditions under which problems like these can be solved computationally and algorithms have been developed to implement the verification process (for example timed COSPAN <ref> [7] </ref> and KRONOS [8]). Verification of timed systems has proved useful in applications such as digital circuit verification [9] and real-time software [10]. Recently the theory has been extended to systems where the dynamics can be modeled by rectangular differential inclusions.
Reference: [8] <author> C. Daws and S. Yovine, </author> <title> "Two examples of verification of multirate timed automata with KRONOS," </title> <booktitle> in Proc. 1995 IEEE Real-Time Systems Symposium, </booktitle> <address> RTSS'95, (Pisa, Italy), </address> <publisher> IEEE Computer Society Press, </publisher> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: The first 3 extension has been for systems with clocks [5] and multi-rate clocks [6]. Theoretical results have established conditions under which problems like these can be solved computationally and algorithms have been developed to implement the verification process (for example timed COSPAN [7] and KRONOS <ref> [8] </ref>). Verification of timed systems has proved useful in applications such as digital circuit verification [9] and real-time software [10]. Recently the theory has been extended to systems where the dynamics can be modeled by rectangular differential inclusions.
Reference: [9] <author> F. Balarin, </author> <title> Iterative Methods for Formal Verification of Digital Systems. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1994. </year>
Reference-contexts: Theoretical results have established conditions under which problems like these can be solved computationally and algorithms have been developed to implement the verification process (for example timed COSPAN [7] and KRONOS [8]). Verification of timed systems has proved useful in applications such as digital circuit verification <ref> [9] </ref> and real-time software [10]. Recently the theory has been extended to systems where the dynamics can be modeled by rectangular differential inclusions.
Reference: [10] <author> F. Balarin, K. Petty, and A. L. Sangiovanni-Vincentelli, </author> <title> "Formal verification of the patho real-time operating system," </title> <booktitle> in IEEE Control and Decision Conference, </booktitle> <pages> pp. 2459-2465, </pages> <year> 1994. </year>
Reference-contexts: Verification of timed systems has proved useful in applications such as digital circuit verification [9] and real-time software <ref> [10] </ref>. Recently the theory has been extended to systems where the dynamics can be modeled by rectangular differential inclusions. The results indicate that, under certain conditions, automatic verification should also be possible for such systems [11], but most applications have been to academic examples rather than actual systems. <p> Even though efficient algorithms (that make use of heuristics and user input to facilitate the search) exist, the the problem may still be prohibitively large for current computers <ref> [10] </ref>. A different approach has been to design the hybrid controller so that performance is a-priori guaranteed [13, 14, 15]. This eases the requirements on verification somewhat as a large part of the complexity can be absorbed by careful design.
Reference: [11] <author> A. Puri and P. Varaiya, </author> <title> "Decidebility of hybrid systems with rectangular differential inclusions," </title> <booktitle> in Computer Aided Verification, </booktitle> <pages> pp. 95-104, </pages> <year> 1994. </year> <month> 31 </month>
Reference-contexts: Recently the theory has been extended to systems where the dynamics can be modeled by rectangular differential inclusions. The results indicate that, under certain conditions, automatic verification should also be possible for such systems <ref> [11] </ref>, but most applications have been to academic examples rather than actual systems. To our knowledge the only computer package capable of dealing with differential inclusions, HyTech, is still under development [6]. Progress in the direction of automatic verification has been impeded by for two fundamental reasons.
Reference: [12] <author> T. Henzinger, P. Kopke, A. Puri, and P. Varaiya, </author> <title> "What's decidable about hybrid au-tomata," </title> <booktitle> in STOCS, </booktitle> <year> 1995. </year>
Reference-contexts: Progress in the direction of automatic verification has been impeded by for two fundamental reasons. The first is undecidability. To guarantee that automatic verification algorithm will terminate in finite number of steps with an answer, the system needs to satisfy very stringent technical requirements. It can be shown <ref> [12] </ref> that relaxing any of these requirements makes the problem undecidable. The second problem is computational complexity. Even relatively simple hybrid systems lead to very large numbers of discrete states when looked at from the point of view of automatic verification.
Reference: [13] <author> A. Deshpande, </author> <title> Control of Hybrid Systems. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering, University of California, Berkeley, California, </institution> <year> 1994. </year>
Reference-contexts: Even though efficient algorithms (that make use of heuristics and user input to facilitate the search) exist, the the problem may still be prohibitively large for current computers [10]. A different approach has been to design the hybrid controller so that performance is a-priori guaranteed <ref> [13, 14, 15] </ref>. This eases the requirements on verification somewhat as a large part of the complexity can be absorbed by careful design. The techniques presented in this paper fit in with this way of thinking. The plan is to start by modeling the systems dynamics at the continuous level.
Reference: [14] <author> M. S. Branicky, V. S. Borkar, and S. K. Mitter, </author> <title> "A unified framework for hybrid control: Background, model and theory," </title> <type> Tech. Rep. </type> <institution> LIDS-P-2239, Laboratory for Information and Decision Systems, Massachusetts Institute of Technology, </institution> <year> 1994. </year>
Reference-contexts: Even though efficient algorithms (that make use of heuristics and user input to facilitate the search) exist, the the problem may still be prohibitively large for current computers [10]. A different approach has been to design the hybrid controller so that performance is a-priori guaranteed <ref> [13, 14, 15] </ref>. This eases the requirements on verification somewhat as a large part of the complexity can be absorbed by careful design. The techniques presented in this paper fit in with this way of thinking. The plan is to start by modeling the systems dynamics at the continuous level.
Reference: [15] <author> A. Nerode and W. Kohn, </author> <title> "Multiple agent hybrid control architecture," in Hybrid System (R. </title> <editor> L. Grossman, A. Nerode, A. P. Ravn, and H. Rischel, </editor> <booktitle> eds.), </booktitle> <pages> pp. 297-316, </pages> <address> New York: </address> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Even though efficient algorithms (that make use of heuristics and user input to facilitate the search) exist, the the problem may still be prohibitively large for current computers [10]. A different approach has been to design the hybrid controller so that performance is a-priori guaranteed <ref> [13, 14, 15] </ref>. This eases the requirements on verification somewhat as a large part of the complexity can be absorbed by careful design. The techniques presented in this paper fit in with this way of thinking. The plan is to start by modeling the systems dynamics at the continuous level.
Reference: [16] <author> T. Basar and P. Bernhard, </author> <title> H 1 -Optimal Control and Related Minimax Design Problems. </title> <publisher> Birkhauser, </publisher> <year> 1991. </year>
Reference-contexts: Game theoretic ideas have already been applied in this context to problems with disturbances of Class 1 and 2 and quadratic cost functions. The resulting controllers are the so called H 1 or L 2 optimal controllers (see for example <ref> [16, 17] </ref>). We will try to extend these ideas to the multiagent, hybrid setting. In this paper we apply this idea to two examples, the train-gate controller and the problem of vehicle following on a highway.
Reference: [17] <author> J. C. Doyle, K. Glover, P. P. Khargonekar, and B. A. Francis, </author> <title> "State-space solutions to standard H 2 and H 1 control problems," </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> vol. 34, no. 8, </volume> <pages> pp. 831-847, </pages> <year> 1989. </year>
Reference-contexts: Game theoretic ideas have already been applied in this context to problems with disturbances of Class 1 and 2 and quadratic cost functions. The resulting controllers are the so called H 1 or L 2 optimal controllers (see for example <ref> [16, 17] </ref>). We will try to extend these ideas to the multiagent, hybrid setting. In this paper we apply this idea to two examples, the train-gate controller and the problem of vehicle following on a highway.
Reference: [18] <author> A. Puri and P. Varaiya, </author> <title> "Driving safely in smart cars," </title> <booktitle> in American Control Conference, </booktitle> <pages> pp. 3597-3599, </pages> <year> 1995. </year>
Reference-contexts: Verification of closed loop hybrid systems is better suited for optimal control, rather than game theory, as one of the two players (the controller) has his strategy fixed a-priori. Therefore only the disturbances, trying to do their worst to upset the design, enter the picture. 5 <ref> [18] </ref> discusses the application of these ideas to the automated highway example.
Reference: [19] <author> A. Puri and P. Varaiya, </author> <title> "Verification of hybrid systems using abstractions," in Hybrid Systems II, </title> <publisher> LNCS 999, Springer Verlag, </publisher> <year> 1995. </year>
Reference-contexts: To simplify the notation, time dependency of the states inputs and outputs will be suppressed unless explicitly stated. 3.1 Train Gate Controller 3.1.1 Problem Statement The train gate problem set up is shown in Figure 1. We will work on the problem formulation of <ref> [19] </ref>. For simplicity we will assume that the train is going around on a circular track of length L, where L is large enough to ensure adequate separation between consecutive train appearances. This assumption will be discussed further in Section 3.1.3. <p> Assume that the gate dynamics are described by a first order ODE: _x 1 = 2 where u is the input to be chosen by the designer of the gate controller. The Sensor: The design of <ref> [19] </ref> is based on discrete sensor measurements. We will assume that there are two sensors located at distances S 1 and S 2 respectively on the track.
Reference: [20] <author> D. Godbole and J. Lygeros, </author> <title> "Longitudinal control of the lead car of a platoon," </title> <journal> IEEE Transactions on Vehicular Technology, </journal> <volume> vol. 43, no. 4, </volume> <pages> pp. 1125-1135, </pages> <year> 1994. </year>
Reference-contexts: For our purposes the details of the nonlinear functions b A and a A are not important. Following the designs of <ref> [20] </ref>, we will assume that feedback linearization has already been carried out, i.e.: v A (t) = a A ( _x A ) x A = u We will design controllers for the resulting linear dynamics.
Reference: [21] <author> J. K. Hedrick, D.McMahon, V. Narendran, and D. Swaroop, </author> <title> "Longitudinal vehicle controller design for IVHS system," </title> <booktitle> in American Control Conference, </booktitle> <pages> pp. 3107-3112, </pages> <year> 1991. </year>
Reference-contexts: We will assume that the acceleration of vehicle B can not be measured and is not communicated to vehicle A (as it is, for example, for the platoon following scenario of <ref> [21] </ref>). The vehicles are also equipped with communication devices. It is assumed that they will only be used to exchange discrete messages for coordinating the agent operation.
Reference: [22] <author> F. M. Callier and C. A. Desoer, </author> <title> Linear System Theory. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Efficiency: J 3 (x 0 ; u; d) = 0 where y d is the desired fixed point for a given maneuver and P is positive definite. The solution to the system equations can be obtained using the variation of constants formula <ref> [22] </ref>: x (t) = e At x 0 + 0 Z t e A (tt) Dd (t )dt Using the formula: e At = I + At + 2! and the fact that A is nilpotent (A 3 = 0) we obtain: e At = 6 6 1 t 0 0
Reference: [23] <author> T. Basar and G. J. Olsder, </author> <title> Dynamic Non-cooperative Game Theory. </title> <publisher> Academic Press, </publisher> <editor> 2nd ed., </editor> <year> 1994. </year>
Reference-contexts: To facilitate the application of our methodology we need to derive conditions under which the problems are solvable (saddle and optimal solutions exist, etc.). In this respect we hope to be able to extend older results in game theory <ref> [23] </ref> and optimal control [24]. We also need to develop algorithms for determining the sets of guaranteed performance, V i , or at least conservative approximations to them. Extensions of previous results may also suffice for this problem.
Reference: [24] <author> L. Berkovitz, </author> <title> Optimal Control Theory. </title> <publisher> Springer-Verlag, </publisher> <year> 1974. </year> <month> 32 </month>
Reference-contexts: To facilitate the application of our methodology we need to derive conditions under which the problems are solvable (saddle and optimal solutions exist, etc.). In this respect we hope to be able to extend older results in game theory [23] and optimal control <ref> [24] </ref>. We also need to develop algorithms for determining the sets of guaranteed performance, V i , or at least conservative approximations to them. Extensions of previous results may also suffice for this problem. The most important missing part is a technique for designing the higher (discrete) levels.
References-found: 24

