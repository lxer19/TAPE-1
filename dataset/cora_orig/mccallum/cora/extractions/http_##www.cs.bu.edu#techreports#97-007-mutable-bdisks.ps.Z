URL: http://www.cs.bu.edu/techreports/97-007-mutable-bdisks.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Email: sanjoy@cs.uvm.edu  best@cs.bu.edu  
Title: Real-Time Mutable Broadcast Disks  
Author: Sanjoy Baruah 
Keyword: Broadcast disks; real-time constraints; disk updates; pfair scheduling; real-time database and information retrieval systems; mobile computing.  
Date: May 1997  
Address: Vermont Azer Bestavros  Boston University  
Affiliation: Department of CS EE University of  CS Department  
Abstract: There is an increased interest in using broadcast disks to support mobile access to real-time databases. However, previous work has only considered the design of real-time immutable broadcast disks, the contents of which do not change over time. This paper considers the design of programs for real-time mutable broadcast disks | broadcast disks whose contents are occasionally updated. Recent scheduling-theoretic results relating to pinwheel scheduling and pfair scheduling are used to design algorithms for the efficient generation of real-time mutable broadcast disk programs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Acharya, R. Alonso, M. Franklin, and S. Zdonik. </author> <title> Broadcast disks: Data management for asymmetric communications environments. </title> <booktitle> In Proceedings of ACM SIGMOD conference, </booktitle> <address> San Jose, CA, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: On the client side, this hierarchy gives rise to cache management and prefetching issues (e.g., cache replacement strategies to improve the hit ratio or reduce miss penalty). In [4], Acharya, Franklin and Zdonik discuss Bdisks organization issues, including client cache management <ref> [1] </ref>, client-initiated prefetching to improve the communication latency for database access systems [3], and techniques for disseminating updates [2].
Reference: [2] <author> S. Acharya, M. Franklin, and S. Zdonik. </author> <title> Disseminating updates on broadcast disks. </title> <booktitle> In Proceedings of VLDB'96: The 1996 International Conference on Very Large Databases, </booktitle> <address> India, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: In [4], Acharya, Franklin and Zdonik discuss Bdisks organization issues, including client cache management [1], client-initiated prefetching to improve the communication latency for database access systems [3], and techniques for disseminating updates <ref> [2] </ref>. <p> design of broadcast programs, the real-time guarantees that are extended by these schemes hold only in the "steady state", when there are no updates|while a file is being updated, the latency guarantee with respect to that particular file is not honoured. 1 The work of Acharya, Franklin, and Zdonick in <ref> [2] </ref> has considered the problem of disseminating updates in Bdisk programs, but has done so without taking the real-time constraints imposed on Bdisk data into consideration. 4 This research: The purpose of this research is to design algorithms for the efficient gen-eration of real-time Bdisk programs, that continue to offer timing
Reference: [3] <author> S. Acharya, M. Franklin, and S. Zdonik. </author> <title> Prefetching from a broadcast disk. </title> <booktitle> In Proceedings of ICDE'96: The 1996 International Conference on Data Engineering, </booktitle> <address> New Orleans, Louisiana, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: In [4], Acharya, Franklin and Zdonik discuss Bdisks organization issues, including client cache management [1], client-initiated prefetching to improve the communication latency for database access systems <ref> [3] </ref>, and techniques for disseminating updates [2].
Reference: [4] <author> Swarup Acharya, Michael Franklin, and Stanley Zdonik. </author> <title> Dissemination-based data delivery using broadcast disks. </title> <journal> IEEE Personal Communications, </journal> <volume> 2(6), </volume> <month> December </month> <year> 1995. </year>
Reference-contexts: On the server side, this hierarchy gives rise to memory management issues (e.g., allocation of data to Bdisks based on priority/urgency). On the client side, this hierarchy gives rise to cache management and prefetching issues (e.g., cache replacement strategies to improve the hit ratio or reduce miss penalty). In <ref> [4] </ref>, Acharya, Franklin and Zdonik discuss Bdisks organization issues, including client cache management [1], client-initiated prefetching to improve the communication latency for database access systems [3], and techniques for disseminating updates [2].
Reference: [5] <author> M. Ajtai, J. Aspnes, M. Naor, Y. Rabani, L. Schulman, and O. Waarts. </author> <title> Fairness in scheduling. </title> <booktitle> In Proceedings of the Sixth Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <month> January </month> <year> 1995. </year>
Reference-contexts: Temporal fairness: The issue of fairness in resource-allocation and scheduling has recently been attracting considerable attention <ref> [5, 6, 8] </ref>. Motivated no doubt in part by applications, such as multimedia, which are characterized by fairly "regular" resource requirements over extended intervals, attempts have been made to formalize and characterize notions of temporal fairness.
Reference: [6] <author> A. Bar-Noy, A. Mayer, B. Schieber, and M. Sudan. </author> <title> Guaranteeing fair service to persistent dependent tasks. </title> <journal> SIAM journal on Computing, </journal> <note> 1996. to appear. </note>
Reference-contexts: Temporal fairness: The issue of fairness in resource-allocation and scheduling has recently been attracting considerable attention <ref> [5, 6, 8] </ref>. Motivated no doubt in part by applications, such as multimedia, which are characterized by fairly "regular" resource requirements over extended intervals, attempts have been made to formalize and characterize notions of temporal fairness.
Reference: [7] <author> S. Baruah and A. Bestavros. </author> <title> Pinwheel scheduling for fault-tolerant broadcast disks in real-time database systems. </title> <booktitle> In Proceedings of the IEEE International Conference on Data Engineering, </booktitle> <address> Birmingham, UK, </address> <month> April </month> <year> 1997. </year> <note> Extended version available as Tech Report TR-1996-023. 16 </note>
Reference-contexts: Other reasons for imposing timing constraints on data retrieval from a Bdisk are due to the requirements of database protocols for admission control [12], concurrency control, transaction scheduling [23], recovery [15], and bounded imprecision [21, 25]. Bestavros [11] and Baruah & Bestavros <ref> [7] </ref> have defined a generalized model for real-time fault-tolerant Bdisks, that also incorporates consideration of the effect of transient failures 3 upon the real-time properties of Bdisks. <p> Real-Time Mutable Broadcast Disks: As a general rule, the data to be broadcast on Bdisks is not completely static over time, but needs to be occasionally updated. Previous studies on designing program schedules for real-time Bdisks|namely the techniques of Bestavros in [11], Baruah and Bestavros in <ref> [7] </ref>, and Xuang et al in [26]|have tended to ignore the issue of updates; 1 as a consequence, timeliness guarantees are compromised during an update. <p> We say that S 1 ) S 2 iff any broadcast program satisfying S 1 also satisfies S 2 . We say S 1 S 2 iff S 1 ) S 2 and S 2 ) S 1 . It has previously been shown in <ref> [7] </ref> that generating a broadcast schedule for n broadcast files is exactly equivalent to constructing a schedule for a system of n pinwheel tasks. <p> In this paper we have extended our previous pinwheel-based programming of real-time Bdisks 4 To understand why this is the case, it suffices to consider a situation in which update-requests for the smallest-sized file are repeatedly made, forcing all update-requests for larger files to wait for ever. 15 <ref> [7] </ref> to allow for the support of mutable broadcast programs. In particular, we have defined a formal model for the specification of the real-time requirements for mutable broadcast disk files.
Reference: [8] <author> S. Baruah, N. Cohen, G. Plaxton, and D. Varvel. </author> <title> Proportionate progress: A notion of fairness in resource allocation. </title> <journal> Algorithmica, </journal> <volume> 15(6) </volume> <pages> 600-625, </pages> <month> June </month> <year> 1996. </year> <booktitle> Extended Abstract in the Proceedings of the 1993 ACM Annual Symposium on the Theory of Computing. </booktitle>
Reference-contexts: Temporal fairness: The issue of fairness in resource-allocation and scheduling has recently been attracting considerable attention <ref> [5, 6, 8] </ref>. Motivated no doubt in part by applications, such as multimedia, which are characterized by fairly "regular" resource requirements over extended intervals, attempts have been made to formalize and characterize notions of temporal fairness. <p> Motivated no doubt in part by applications, such as multimedia, which are characterized by fairly "regular" resource requirements over extended intervals, attempts have been made to formalize and characterize notions of temporal fairness. The concepts of proportionate progress and pfairness were introduced in <ref> [8] </ref> (see also [9]) to quantitatively measure the fairness of a schedule. We briefly review these ideas below. <p> &lt; lag (S; T i ; t) &lt; 1: That is, a schedule is pfair if and only if it is never the case that any task T i is overallocated or underallocated by an entire slot. 6 Pfairness is an extremely stringent form of fairness|indeed, it has been shown <ref> [8] </ref> that no stronger fairness can be guaranteed to be achievable for periodic task systems in general. (Consider a system of n identical tasks, each with weight 1=n. <p> By making n large, these lags can be made arbitrarily close to 1 and +1, respectively.) It was proven in <ref> [8] </ref> that pfair scheduling is a stronger requirement than periodic scheduling, in that any pfair schedule is periodic. The converse, however, is not generally true. <p> The converse, however, is not generally true. The concept of pfairness was initially introduced in the context of constructing periodic schedules for a system of periodic tasks on several identical processors|the multiprocessor periodic scheduling problem [19]. The following theorem was proved in <ref> [8] </ref>: Theorem 1 A system of periodic tasks can be scheduled in a pfair manner on m processors 2 provided the weights of all the tasks sum to at most m. <p> In particular, we have defined a formal model for the specification of the real-time requirements for mutable broadcast disk files. We have shown a close link between the design of broadcast programs for such disks and the previously studied problems of pinwheel scheduling, proportionate progress, and pfair scheduling <ref> [8, 9] </ref>. These results enable the design of efficient Bdisk programming techniques in the presence of updates in Bdisk data.
Reference: [9] <author> Sanjoy Baruah, J. Gehrke, and G. Plaxton. </author> <title> Fast scheduling of periodic tasks on multiple resources. </title> <booktitle> In Proceedings of the Ninth International Parallel Processing Symposium, </booktitle> <month> April </month> <year> 1995. </year> <note> Extended version available via anonymous ftp from ftp.cs.utexas.edu, as Tech Report TR-95-02. </note>
Reference-contexts: Motivated no doubt in part by applications, such as multimedia, which are characterized by fairly "regular" resource requirements over extended intervals, attempts have been made to formalize and characterize notions of temporal fairness. The concepts of proportionate progress and pfairness were introduced in [8] (see also <ref> [9] </ref>) to quantitatively measure the fairness of a schedule. We briefly review these ideas below. <p> In particular, we have defined a formal model for the specification of the real-time requirements for mutable broadcast disk files. We have shown a close link between the design of broadcast programs for such disks and the previously studied problems of pinwheel scheduling, proportionate progress, and pfair scheduling <ref> [8, 9] </ref>. These results enable the design of efficient Bdisk programming techniques in the presence of updates in Bdisk data.
Reference: [10] <author> Sanjoy Baruah and Shun Shii Lin. </author> <title> Pfair scheduling of generalized pinwheel task systems. </title> <note> Submitted, </note> <year> 1996. </year>
Reference-contexts: It has previously been shown in [7] that generating a broadcast schedule for n broadcast files is exactly equivalent to constructing a schedule for a system of n pinwheel tasks. From this equivalence, and the relationship between pinwheel scheduling and pfair scheduling recently identified by Baruah and Lin <ref> [10] </ref>, we obtain the following lemma: Lemma 1 If m i 2, then bc (i; m i ; d i ) ( pfc (i; w i ) The following theorem is a direct consequence: Theorem 2 The problem of constructing a broadcast schedule for F 1 ; F 2 ; :
Reference: [11] <author> Azer Bestavros. </author> <title> AIDA-based real-time fault-tolerant broadcast disks. </title> <booktitle> In Proceedings of the Real-Time Technology and Applications Symposium, </booktitle> <month> June </month> <year> 1996. </year>
Reference-contexts: Other reasons for imposing timing constraints on data retrieval from a Bdisk are due to the requirements of database protocols for admission control [12], concurrency control, transaction scheduling [23], recovery [15], and bounded imprecision [21, 25]. Bestavros <ref> [11] </ref> and Baruah & Bestavros [7] have defined a generalized model for real-time fault-tolerant Bdisks, that also incorporates consideration of the effect of transient failures 3 upon the real-time properties of Bdisks. <p> Real-Time Mutable Broadcast Disks: As a general rule, the data to be broadcast on Bdisks is not completely static over time, but needs to be occasionally updated. Previous studies on designing program schedules for real-time Bdisks|namely the techniques of Bestavros in <ref> [11] </ref>, Baruah and Bestavros in [7], and Xuang et al in [26]|have tended to ignore the issue of updates; 1 as a consequence, timeliness guarantees are compromised during an update.
Reference: [12] <author> Azer Bestavros and Sue Nagy. </author> <title> Value-cognizant admission control for rtdbs. </title> <booktitle> In Proceedings of RTSS'96: The 16 th IEEE Real-Time System Symposium, </booktitle> <address> Washington, DC, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: For example, the constraint would only be 6; 000 msecs for the data item recording the position of a tank with a velocity of 60 km/hour. Other reasons for imposing timing constraints on data retrieval from a Bdisk are due to the requirements of database protocols for admission control <ref> [12] </ref>, concurrency control, transaction scheduling [23], recovery [15], and bounded imprecision [21, 25]. Bestavros [11] and Baruah & Bestavros [7] have defined a generalized model for real-time fault-tolerant Bdisks, that also incorporates consideration of the effect of transient failures 3 upon the real-time properties of Bdisks.
Reference: [13] <author> M. Dertouzos. </author> <title> Control robotics : the procedural control of physical processors. </title> <booktitle> In Proceedings of the IFIP Congress, </booktitle> <pages> pages 807-813, </pages> <year> 1974. </year>
Reference-contexts: to this time interval as time slot t.) Liu and Layland have shown [20] that P T i 2 (e i =p i ) 1 is a necessary and sufficient condition for a system of periodic tasks to have a periodic schedule; furthermore, the earliest deadline first scheduling algorithm (EDF) <ref> [13] </ref> has been proven to be an optimal scheduling algorithm. Temporal fairness: The issue of fairness in resource-allocation and scheduling has recently been attracting considerable attention [5, 6, 8].
Reference: [14] <author> David Gifford. </author> <title> Ploychannel systems for mass digital communication. </title> <journal> Communications of the ACM, </journal> <volume> 33, </volume> <month> February </month> <year> 1990. </year>
Reference-contexts: by continuously and repeatedly broadcasting data to clients, thus in effect making the broadcast channel act as a set of disks (hence the term "Broadcast Disks") from which clients could fetch data "as it goes by." Work on Bdisks is different from previous work in both wired and wireless networks <ref> [14, 16] </ref> in that several sources of data are multiplexed and broadcast to clients, thus creating a hierarchy of Bdisks with different sizes and speeds. On the server side, this hierarchy gives rise to memory management issues (e.g., allocation of data to Bdisks based on priority/urgency).
Reference: [15] <author> Jing Huang and Le Gruenwald. </author> <title> An update-frequency-valid-interval partition checkpoint technique for real-time main memory databases. </title> <booktitle> In Proceedings of RTDB'96: The 1996 Workshop on Real-Time Databases, </booktitle> <pages> pages 135-143, </pages> <address> Newport Beach, California, </address> <month> March </month> <year> 1996. </year>
Reference-contexts: Other reasons for imposing timing constraints on data retrieval from a Bdisk are due to the requirements of database protocols for admission control [12], concurrency control, transaction scheduling [23], recovery <ref> [15] </ref>, and bounded imprecision [21, 25]. Bestavros [11] and Baruah & Bestavros [7] have defined a generalized model for real-time fault-tolerant Bdisks, that also incorporates consideration of the effect of transient failures 3 upon the real-time properties of Bdisks.
Reference: [16] <author> T. Imielinski and B. Badrinath. </author> <title> Mobile wireless computing: Challenges in data management. </title> <journal> Communications of the ACM, </journal> <volume> 37, </volume> <month> October </month> <year> 1994. </year>
Reference-contexts: by continuously and repeatedly broadcasting data to clients, thus in effect making the broadcast channel act as a set of disks (hence the term "Broadcast Disks") from which clients could fetch data "as it goes by." Work on Bdisks is different from previous work in both wired and wireless networks <ref> [14, 16] </ref> in that several sources of data are multiplexed and broadcast to clients, thus creating a hierarchy of Bdisks with different sizes and speeds. On the server side, this hierarchy gives rise to memory management issues (e.g., allocation of data to Bdisks based on priority/urgency).
Reference: [17] <author> IVHS America. </author> <title> IVHS architecture development program: </title> <type> Interim status report, </type> <month> April </month> <year> 1994. </year>
Reference-contexts: IVHS systems allow for automated route guidance and automated rerouting around traffic incidents by allowing the mobile vehicle software to query and react to changes in IVHS databases <ref> [18, 17] </ref>. Other examples include wearable computers for soldiers in the battlefield and computerized cable boxes for future interactive TV networks and video-on-demand. Such systems are characterized by the significant discrepancy between the downstream communication capacity from servers (e.g.
Reference: [18] <author> R.K. Jurgen. </author> <title> Smart cars and highways go global. </title> <journal> IEEE Spectrum, </journal> <pages> pages 26-37, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: IVHS systems allow for automated route guidance and automated rerouting around traffic incidents by allowing the mobile vehicle software to query and react to changes in IVHS databases <ref> [18, 17] </ref>. Other examples include wearable computers for soldiers in the battlefield and computerized cable boxes for future interactive TV networks and video-on-demand. Such systems are characterized by the significant discrepancy between the downstream communication capacity from servers (e.g.
Reference: [19] <author> C. Liu. </author> <title> Scheduling algorithms for multiprocessors in a hard real-time environment. JPL Space Programs Summary 37-60, </title> <address> II:28-37, </address> <year> 1969. </year>
Reference-contexts: The converse, however, is not generally true. The concept of pfairness was initially introduced in the context of constructing periodic schedules for a system of periodic tasks on several identical processors|the multiprocessor periodic scheduling problem <ref> [19] </ref>. The following theorem was proved in [8]: Theorem 1 A system of periodic tasks can be scheduled in a pfair manner on m processors 2 provided the weights of all the tasks sum to at most m.
Reference: [20] <author> C. Liu and J. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> Journal of the ACM, </journal> <volume> 20 </volume> <pages> 46-61, </pages> <year> 1973. </year>
Reference-contexts: Given an instance = fT 1 ; T 2 ; : : : ; T n g of n such periodic tasks, the periodic scheduling problem <ref> [20] </ref> is concerned with attempting to schedule these n tasks on a single resource (e.g. processor or communication channel) so as to satisfy the constraints of each task. <p> at integral boundaries as dictated by the integral boundary constraint|for each integer t 0, the resource must be allocated to exactly one task (or remain unallocated) over the entire time interval [t; t + 1) (we refer to this time interval as time slot t.) Liu and Layland have shown <ref> [20] </ref> that P T i 2 (e i =p i ) 1 is a necessary and sufficient condition for a system of periodic tasks to have a periodic schedule; furthermore, the earliest deadline first scheduling algorithm (EDF) [13] has been proven to be an optimal scheduling algorithm.
Reference: [21] <author> J. Liu, K. Lin, W. Shih, A. Yu, J. Chung, and W. Zhao. </author> <title> Algorithms for scheduling imprecise computations. </title> <journal> Computer magazine, </journal> <pages> pages 58-68, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: Other reasons for imposing timing constraints on data retrieval from a Bdisk are due to the requirements of database protocols for admission control [12], concurrency control, transaction scheduling [23], recovery [15], and bounded imprecision <ref> [21, 25] </ref>. Bestavros [11] and Baruah & Bestavros [7] have defined a generalized model for real-time fault-tolerant Bdisks, that also incorporates consideration of the effect of transient failures 3 upon the real-time properties of Bdisks.
Reference: [22] <author> A. Mok. </author> <title> Task management techniques for enforcing ED scheduling on a periodic task set. </title> <booktitle> In Proc. 5th IEEE Workshop on Real-Time Software and Operating Systems, </booktitle> <address> Wash-ington D.C., </address> <month> May </month> <year> 1988. </year>
Reference-contexts: However, for the single resource case, Algorithm PF reduces to a simple variant of EDF-scheduling, and can be implemented using the heap-of-heaps data structure <ref> [22] </ref> in O (log n) time per time slot, where n is the number of tasks. 3 Representing Bdisk Programs as Pfair Schedules Let a real-time broadcast file F i be represented by two integer parameters: F i = (m i ; d i ), with the interpretation that it consists
Reference: [23] <author> Ozgur Ulusoy and Alejandro Buchmann. </author> <title> Exploiting main memory dbms features to improve real-time concurrency protocols. </title> <journal> ACM SIGMOD Record, </journal> <volume> 25(1), </volume> <month> March </month> <year> 1996. </year>
Reference-contexts: Other reasons for imposing timing constraints on data retrieval from a Bdisk are due to the requirements of database protocols for admission control [12], concurrency control, transaction scheduling <ref> [23] </ref>, recovery [15], and bounded imprecision [21, 25]. Bestavros [11] and Baruah & Bestavros [7] have defined a generalized model for real-time fault-tolerant Bdisks, that also incorporates consideration of the effect of transient failures 3 upon the real-time properties of Bdisks.
Reference: [24] <author> Krithi Ramamritham. </author> <title> Real-time databases. </title> <journal> International journal of Distributed and Parallel Databases, </journal> <volume> 1(2), </volume> <year> 1993. </year>
Reference-contexts: Rather, guaranteeing (either deterministically or probabilistically) that timing constraints imposed on data retrieval will be met becomes the overriding concern. There are many reasons for subjecting Bdisk data retrieval to timing constraints. Perhaps the most compelling is due to the absolute temporal consistency constraints <ref> [24] </ref> that may be imposed on data objects.
Reference: [25] <author> V. Fay Wolfe, L. Cingiser DiPippo, and J. K. Black. </author> <title> Supporting concurrency, timing constraints and imprecision in objects. </title> <type> Technical Report TR94-230, </type> <institution> University of Rhode Island, Computer Science Department, </institution> <month> December </month> <year> 1994. </year>
Reference-contexts: Other reasons for imposing timing constraints on data retrieval from a Bdisk are due to the requirements of database protocols for admission control [12], concurrency control, transaction scheduling [23], recovery [15], and bounded imprecision <ref> [21, 25] </ref>. Bestavros [11] and Baruah & Bestavros [7] have defined a generalized model for real-time fault-tolerant Bdisks, that also incorporates consideration of the effect of transient failures 3 upon the real-time properties of Bdisks.
Reference: [26] <author> P. Xuan, S. Sen, O.J. Gonzalez-Gomez, J. Fernandez, and K. Ramamritham. </author> <title> Broadcast on demand: Efficient and timely dissemination of data. </title> <booktitle> In Proceedings of the 3rd Real-time Technology and Applications Symposium, </booktitle> <address> Montreal, Quebec, </address> <year> 1997. </year>
Reference: [27] <author> S. Zdonik, M. Franklin, R. Alonso, and S. Acharya. </author> <booktitle> Are `disks in the air' just pie in the sky? In Proceedings of the IEEE Workshop on Mobile Computing Systems and Applications, </booktitle> <address> Santa Cruz, CA, </address> <month> December </month> <year> 1994. </year> <month> 18 </month>
Reference-contexts: Broadcast Disks: The concept of Broadcast Disks (Bdisks) was introduced by Zdonik et al. <ref> [27] </ref> as a mechanism that uses communication bandwidth to emulate a storage device (or a memory hierarchy in general) for mobile clients of a database system.
References-found: 27

