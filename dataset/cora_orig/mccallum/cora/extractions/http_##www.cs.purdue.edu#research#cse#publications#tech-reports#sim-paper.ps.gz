URL: http://www.cs.purdue.edu/research/cse/publications/tech-reports/sim-paper.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/ttd/resume.html
Root-URL: http://www.cs.purdue.edu
Title: Multi-Agent Simulation of Complex Heterogeneous Models in Scientific Computing  
Author: Anupam Joshi Tzvetan Drashansky John Rice Sanjiva Weerawarana and Elias Houstis 
Keyword: Distributed Problem Solving, Agent-Based Computing, Simulation, Heterogeneous Models, Software Reuse and Evolution.  
Abstract: Electronic prototyping is becoming a part of every scientific inquiry and product design, and is the focus of research in the new scientific field of Computational Science and Engineering. The new grand challenge here is the rapid prototyping of manufactured artifacts and the rapid solution to problems with numerous interrelated elements. This, in turn, requires the fast, accurate simulation of physical processes and design optimization using knowledge and computational models from multiple disciplines in science and engineering. In this paper we formulate a mathematical and software framework for complex rapid prototyping. Its design utilizes the current computer network infrastructures and High Performance Computation technologies. Its functionality includes adaptability and intelligence with respect to end-users and hardware platforms. We present the architecture of this framework, named SciAgents, using a multi-agent software model encapsulating a collaborating mathematical method. We also briefly discuss some issues related to legacy software reuse that we faced in the implementation. The design of SciAgents allows wholesale reuse of scientific software and provides a natural approach to parallel and distributed problem solving. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Cammarata et al., </author> <title> Strategies of Cooperation in Distributed Problem Solving, </title> <booktitle> Readings in Distributed Artificial Intelligence (Bond and Gasser, </booktitle> <editor> eds.), </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1988, </year> <pages> pp. 102-105. </pages>
Reference-contexts: They reported results using both an hierarchical organization, as well as an "anarchic committee" organization, and found that the latter was as good as, and sometimes better than the former. Cammarata et. al <ref> [1] </ref> present strategies for cooperation by groups of agents involved in distributed problem solving, and infer a set of requirements on information distribution and organizational policies. They point out that different agents may have different capabilities, limited knowledge and resources, and thus differing appropriateness in solving the problem at hand.
Reference: [2] <author> T. Drashansky, A. Joshi, and J.R. Rice, </author> <title> SciAgents AnAgent Based Environment for Distributed, </title> <booktitle> Cooperative Scientific Computing, Proc. 7th Intl. Conf. Tools with Artificial Intelligence (Los Alamitos, </booktitle> <address> CA), </address> <publisher> IEEE Computer Soc., </publisher> <year> 1995, </year> <pages> pp. 452-459. </pages>
Reference-contexts: Most physical systems and manufactured artifacts have a global model which is a mathematical network whose nodes represent the physical components in a system or artifact. Each node has a mathematical model of the physics of the component it represents and a solver agent <ref> [2] </ref> for its analysis. Individual components are chosen so that each node corresponds to a simple mathematical problem defined on a regular geometry. There exist many standard, reliable solver systems that can be applied to these local node problems. <p> Some nodes in the network correspond to interfaces that model the interaction of the parts in the global model. To solve the global problem, the local solvers collaborate with each other to relax (i.e., resolve) the interface conditions. An interface controller or mediator agent <ref> [2] </ref> collects parameters from neighboring subdomains and adjusts these to better satisfy the interface conditions. This "network" abstraction of a physical system allows us to build a software system which is a network of well defined collaborating software parts using interfaces. <p> Such an approach has several advantages, including the reuse of well tested software, modularity and flexibility, low cost, etc. We have developed an agent-based, distributed, collaborative environment called SciAgents <ref> [2] </ref> which addresses these issues by allowing disparate pieces of scientific software to collaborate in solving a problem. <p> An example of such a problem is given on Figure 1. It models the temperature distribution in a small system of 4 different substances (with different laws for temperature distribution), a heater, and a sink. In <ref> [2, 3, 4] </ref> we show how model solvers (for a single PDE defined on a single domain, for example) like //ELLPACK [10] can be used to solve the submodels. These solvers compute locally, and need to interact only with their neighboring solvers, so they are natural local problem solver agents.
Reference: [3] <author> T. T. Drashansky, </author> <title> An Agent-Based Approach to Building Multidisciplinary Problem Solving Environments, </title> <type> Ph.D. thesis, </type> <institution> Department of Computer Sciences, Purdue University, </institution> <month> December </month> <year> 1996. </year> <month> 18 </month>
Reference-contexts: We have developed an agent-based, distributed, collaborative environment called SciAgents [2] which addresses these issues by allowing disparate pieces of scientific software to collaborate in solving a problem. In this paper, we present the design and the architecture of this system, see <ref> [3] </ref> for a discussion of its implementation. 3 Design and Architecture of SciAgents To develop a complex scientific computing system, we need to develop strategies for coordination amongst heterogeneous agents. <p> An example of such a problem is given on Figure 1. It models the temperature distribution in a small system of 4 different substances (with different laws for temperature distribution), a heater, and a sink. In <ref> [2, 3, 4] </ref> we show how model solvers (for a single PDE defined on a single domain, for example) like //ELLPACK [10] can be used to solve the submodels. These solvers compute locally, and need to interact only with their neighboring solvers, so they are natural local problem solver agents. <p> The ability of the agents to autonomously pursue their goals allows seamless computation of the global solution. The interaction of the agents is based on the interface relaxation technique, which is described in detail for PDE based models in <ref> [3, 14, 15] </ref>. It uses the physical relations between the parts of the system modeled by mathematical formulas. The formulas involve the solutions in individual subdomains and their derivatives. <p> We abbreviate the message formats here; their precise arguments and semantics can be found in <ref> [3] </ref>. When talking about the two subrelaxers of a relaxer agent R ij we denote them R i ij and R ij . The messages are given in term of the name performative and its content, which is an S-KIF statement. <p> The reader may refer to <ref> [3] </ref> for greater details. The current implementation of SciAgents is an example for successful reuse of existing complex standalone software systems. The highest level communication in SciAgents is done using the public domain KQML [6] implementation KAPI by EIT Corp. and Lockheed, Inc.
Reference: [4] <author> T. T. Drashansky and J. R. Rice, </author> <title> Processing PDE Interface Conditions - II, </title> <type> Tech. Report TR-94-066, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1994. </year>
Reference-contexts: An example of such a problem is given on Figure 1. It models the temperature distribution in a small system of 4 different substances (with different laws for temperature distribution), a heater, and a sink. In <ref> [2, 3, 4] </ref> we show how model solvers (for a single PDE defined on a single domain, for example) like //ELLPACK [10] can be used to solve the submodels. These solvers compute locally, and need to interact only with their neighboring solvers, so they are natural local problem solver agents. <p> The formulas involve the solutions in individual subdomains and their derivatives. Typically, for second order PDEs, there are two physical or mathematical conditions involving values and normal derivatives of the solutions on the neighboring subdomains. Examples for common interface conditions are given in <ref> [4, 15] </ref>. The interface relaxation technique can be described briefly as follows. Step 1. Choose initial information as boundary conditions to determine the submodel solutions in each subdomain. Step 2. Solve the submodel in each subdomain and obtain a local solution. Step 3.
Reference: [5] <author> T. Finin et al., </author> <title> Draft Specification of the KQML Agent-Communication Language, DARPA Knowledge Sharing Initiative, External Interfaces Working Group, 1993. [6] , KQML as an Agent Communication Language, </title> <booktitle> Proc. III Intl.Conf. on Information and Knowledge Management, </booktitle> <publisher> ACM Press, </publisher> <year> 1994. </year>
Reference-contexts: A similar scheme, mutatis mutandis, is used to obtain the other required parameters and the estimates for the amount of the solver's computing load. Inter-agent Communication and Agent Architecture. In SciAgents , communication at the highest level is done using the Knowledge Query and Manipulation Language (KQML <ref> [5, 6] </ref>) from ARPA's knowledge sharing initiative. The contents of the messages are in S-KIF | a language which we are developing 10 for scientific computing. This is based on a language we developed for PDE data called PDESpec [24].
Reference: [7] <author> E. Gallopoulos, E. Houstis, and J.R. Rice, </author> <title> Computer as Thinker/Doer: Problem-Solving Environments for Computational Science, </title> <booktitle> IEEE Computational Science and Enginerring 1 (1994), </booktitle> <pages> 11-23. </pages>
Reference-contexts: Some of these agents are no more than subroutine libraries in the classical sense, others are very much larger and more sophisticated problem solving environments <ref> [7] </ref>. We believe that this approach will allow locally interacting problem solving agents to decompose a complex computation into a distributed collection of self contained computations.
Reference: [8] <editor> B. Hayes-Roth et al., Guardian. </editor> <title> A Prototype Intelligent Agent for Intensive-care Monitoring, </title> <booktitle> Artif. Intell. Med 4 (1992), </booktitle> <volume> no. 2, </volume> <pages> 165-185. </pages>
Reference-contexts: We believe that this approach will allow locally interacting problem solving agents to decompose a complex computation into a distributed collection of self contained computations. It also allows high scalability. 2 Background and Related Work Many agent-based systems have been developed <ref> [8, 20, 21, 23, 26] </ref>, which demonstrate the advantages of the agent-oriented paradigm. One of their important aspects is modularity and flexibility. It is very easy to dynamically add or remove agents, to move agents around the computing network, and to organize the user interface.
Reference: [9] <author> E. Houstis, S. Weerawarana, A. Joshi, and J. R. Rice, </author> <title> The PYTHIA project, Neural, Parallel, </title> <editor> and Scientific Computations (S. K. Aityan et al., ed.), </editor> <publisher> Dynamic Pub., </publisher> <year> 1995, </year> <pages> pp. 215-218. </pages>
Reference-contexts: While our architecture is general enough to support this, we presently do not handle dynamic migrations and decomposition of agents in our implementation. All the above parameters need to be deduced automatically by the corresponding solvers and relaxers. Solver agents contact PYTHIA for this purpose. PYTHIA <ref> [9, 12] </ref> is a system whose objective is to advise the user of the "right", or at least "good", selections of various solvers, their parameters and the computational resources for solving a particular single-domain PDE problem.
Reference: [10] <author> E. N. Houstis and J. R. Rice, </author> <title> Parallel ELLPACK: A Development and Problem Solving Environment for High Performance Computing Machines, Programming Environments for High Level Scientific Problem Solving, </title> <publisher> North Holland, </publisher> <year> 1992, </year> <pages> pp. 229-243. </pages>
Reference-contexts: A good example for such solvers is //ELLPACK <ref> [10, 19] </ref> which is designed to handle Partial Differential Equations (PDE) models. 4 It is generally accepted, however, that universal solvers for the complex heterogeneous models described earlier cannot be built. Different software for solving each individual problem or small class of problems is necessary. <p> It models the temperature distribution in a small system of 4 different substances (with different laws for temperature distribution), a heater, and a sink. In [2, 3, 4] we show how model solvers (for a single PDE defined on a single domain, for example) like //ELLPACK <ref> [10] </ref> can be used to solve the submodels. These solvers compute locally, and need to interact only with their neighboring solvers, so they are natural local problem solver agents. The task of "relaxing" the interface conditions between adjacent subdomains is given to mediator agents. <p> Our work with //ELLPACK indicates that the 17 developers of the existing system can design and implement the wrapper for a very small fraction of the time and cost spent for the existing system. //ELLPACK <ref> [10] </ref> is the only solver template available in the current implementation of SciAgents .
Reference: [11] <author> A. Joshi, </author> <title> To Learn or Not to Learn ..., Adaptation and Learning in Multiagent Systems (G. </title> <editor> Weiss and S. Sin, eds.), </editor> <booktitle> Lecture Notes in Artificial Intelligence, </booktitle> <volume> vol. 1042, </volume> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Lesser et. al [13] describes the FA/C (functionally accurate, cooperative) architecture in which agents exchange partial and tentative results in order to converge to a solution. Joshi <ref> [11] </ref> presents a learning technique which enhances the effectiveness of such coordination. It combines neuro-fuzzy techniques with epistemic utility criterion. 2.1 SciAgents The software systems for scientific computing reflect the underlying complexity of the intricate, interacting mathematical models.
Reference: [12] <author> A. Joshi, S. Weerawarana, E. N. Houstis, J. R. Rice, and N. Ramakrishnan, </author> <title> Neuro-Fuzzy Support for Problem Solving Environments, </title> <booktitle> IEEE Computational Science and Engineering 3 (1996), </booktitle> <pages> 44-56. </pages>
Reference-contexts: While our architecture is general enough to support this, we presently do not handle dynamic migrations and decomposition of agents in our implementation. All the above parameters need to be deduced automatically by the corresponding solvers and relaxers. Solver agents contact PYTHIA for this purpose. PYTHIA <ref> [9, 12] </ref> is a system whose objective is to advise the user of the "right", or at least "good", selections of various solvers, their parameters and the computational resources for solving a particular single-domain PDE problem.
Reference: [13] <author> V. R. Lesser, </author> <title> A Retrospective View of FA/C Distributed Problem Solving, </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics 21 (1991), </journal> <volume> no. 6, </volume> <pages> 1347-1363. </pages>
Reference-contexts: They point out that different agents may have different capabilities, limited knowledge and resources, and thus differing appropriateness in solving the problem at hand. Lesser et. al <ref> [13] </ref> describes the FA/C (functionally accurate, cooperative) architecture in which agents exchange partial and tentative results in order to converge to a solution. Joshi [11] presents a learning technique which enhances the effectiveness of such coordination.
Reference: [14] <author> S. McFaddin and J. R. Rice, </author> <title> Collaborating PDE Solvers, </title> <journal> Appl. Num. Math 10 (1992), </journal> <pages> 279-295. </pages>
Reference-contexts: This "network" abstraction of a physical system allows us to build a software system which is a network of well defined collaborating software parts using interfaces. Some of the theoretical issues of this methodology have been addressed in <ref> [14, 15, 17] </ref> for the case of collaborating PDE models. The results obtained so far verify the 2 feasibility and potential of network-based prototyping. <p> The ability of the agents to autonomously pursue their goals allows seamless computation of the global solution. The interaction of the agents is based on the interface relaxation technique, which is described in detail for PDE based models in <ref> [3, 14, 15] </ref>. It uses the physical relations between the parts of the system modeled by mathematical formulas. The formulas involve the solutions in individual subdomains and their derivatives.
Reference: [15] <author> Mo Mu and J. R. Rice, </author> <title> Modeling with Collaborating PDE Solvers | Theory and Practice, </title> <booktitle> Computing Systems in Engineering 6 (1995), </booktitle> <pages> 87-95. </pages>
Reference-contexts: This "network" abstraction of a physical system allows us to build a software system which is a network of well defined collaborating software parts using interfaces. Some of the theoretical issues of this methodology have been addressed in <ref> [14, 15, 17] </ref> for the case of collaborating PDE models. The results obtained so far verify the 2 feasibility and potential of network-based prototyping. <p> The ability of the agents to autonomously pursue their goals allows seamless computation of the global solution. The interaction of the agents is based on the interface relaxation technique, which is described in detail for PDE based models in <ref> [3, 14, 15] </ref>. It uses the physical relations between the parts of the system modeled by mathematical formulas. The formulas involve the solutions in individual subdomains and their derivatives. <p> The formulas involve the solutions in individual subdomains and their derivatives. Typically, for second order PDEs, there are two physical or mathematical conditions involving values and normal derivatives of the solutions on the neighboring subdomains. Examples for common interface conditions are given in <ref> [4, 15] </ref>. The interface relaxation technique can be described briefly as follows. Step 1. Choose initial information as boundary conditions to determine the submodel solutions in each subdomain. Step 2. Solve the submodel in each subdomain and obtain a local solution. Step 3.
Reference: [16] <author> T. Oates et al., </author> <title> Cooperative Information Gathering: A Distributed Problem Solving Approach, </title> <type> Tech. Report TR-94-66, </type> <institution> UMASS, </institution> <year> 1994. </year>
Reference-contexts: Agent-based systems can minimize centralized control. Hitherto, the agent-based paradigm has not been used widely in scientific computing. We believe that 3 using it in handling complex mathematical models is natural and direct. It allows distributed problem solving <ref> [16] </ref> which is distinct from merely using distributed computing. The expected behavior of the simple model solvers, computing locally and interacting with the neighboring solvers, effectively translates into a behavior of a local problem solver agent. The task of mediating interface conditions between adjacent subproblems is given to mediator agents.
Reference: [17] <author> A. Quarteroni, F. Pasquarelli, and A. Valli, </author> <title> Heterogeneous Domain Decomposition: </title> <booktitle> Principles, Algorithms, Applications, Proc. of Fifth Intl. Symp. Domain Decomposition Methods for PDEs (Philadel-phia) (D. </booktitle> <editor> Keyes et al., ed.), </editor> <publisher> SIAM Publications, </publisher> <year> 1992, </year> <pages> pp. 129-150. 19 </pages>
Reference-contexts: This "network" abstraction of a physical system allows us to build a software system which is a network of well defined collaborating software parts using interfaces. Some of the theoretical issues of this methodology have been addressed in <ref> [14, 15, 17] </ref> for the case of collaborating PDE models. The results obtained so far verify the 2 feasibility and potential of network-based prototyping.
Reference: [18] <author> V. Rego et al., </author> <title> Process Mobility in Distributed Memory Simulation Systems, </title> <booktitle> Proc. Winter Simulation Conference, </booktitle> <year> 1993, </year> <pages> pp. 722-730. </pages>
Reference-contexts: The main issue is then the correct distribution of the solver agents to balance the load. This can be done by the global execution interface in several ways. One is to reassign agents <ref> [18] </ref> to appropriate computing units; another is to split some subdomains further and distribute them to separate computing units.
Reference: [19] <author> J. R. Rice and R. F. Boisvert, </author> <title> Solving Elliptic Problems Using ELLPACK, </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: A good example for such solvers is //ELLPACK <ref> [10, 19] </ref> which is designed to handle Partial Differential Equations (PDE) models. 4 It is generally accepted, however, that universal solvers for the complex heterogeneous models described earlier cannot be built. Different software for solving each individual problem or small class of problems is necessary.
Reference: [20] <author> J. C. Schlimmer and L. A. Hermens, </author> <title> Software Agents: Completing Patternsand Constructing User Interfaces, </title> <journal> Journal of Artificial Intelligence Research 1 (1993), </journal> <volume> no. </volume> <pages> 61-89. </pages>
Reference-contexts: We believe that this approach will allow locally interacting problem solving agents to decompose a complex computation into a distributed collection of self contained computations. It also allows high scalability. 2 Background and Related Work Many agent-based systems have been developed <ref> [8, 20, 21, 23, 26] </ref>, which demonstrate the advantages of the agent-oriented paradigm. One of their important aspects is modularity and flexibility. It is very easy to dynamically add or remove agents, to move agents around the computing network, and to organize the user interface.
Reference: [21] <author> Y. Shoham, </author> <title> Agent-Oriented Programming, </title> <booktitle> Artificial Intelligence 60 (1993), </booktitle> <volume> no. 1, </volume> <pages> 51-92. </pages>
Reference-contexts: We believe that this approach will allow locally interacting problem solving agents to decompose a complex computation into a distributed collection of self contained computations. It also allows high scalability. 2 Background and Related Work Many agent-based systems have been developed <ref> [8, 20, 21, 23, 26] </ref>, which demonstrate the advantages of the agent-oriented paradigm. One of their important aspects is modularity and flexibility. It is very easy to dynamically add or remove agents, to move agents around the computing network, and to organize the user interface.
Reference: [22] <author> R. G. Smith and R. Davis, </author> <title> Frameworks for Cooperation in Distributed Problem Solving, </title> <booktitle> Readings in Distributed Artificial Intelligence (Bond and Gasser, </booktitle> <editor> eds.), </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1988, </year> <pages> pp. 61-70. </pages>
Reference-contexts: The ability of the agents to autonomously pursue their goals can resolve the problems during the solution process without user intervention. This allows seamless derivation of the global solution. Several researchers have addressed the issue of coordinating multi-agent systems. For instance Smith and Davis <ref> [22] </ref> propose two forms of multi-agent cooperation, task sharing and result sharing. Task sharing essentially involves creating subtasks, and then farming them off to other agents. Result sharing is more data directed. Different agents are solving different tasks, and keep on exchanging partial results to cooperate.
Reference: [23] <author> L. Z. Varga et. al., </author> <title> Integrating Intelligent Systems into a Cooperating Community for Electricity Distribution Management, </title> <journal> International Journal of Expert Systems with Applications 7 (1994), </journal> <volume> no. </volume> <pages> 4. </pages>
Reference-contexts: We believe that this approach will allow locally interacting problem solving agents to decompose a complex computation into a distributed collection of self contained computations. It also allows high scalability. 2 Background and Related Work Many agent-based systems have been developed <ref> [8, 20, 21, 23, 26] </ref>, which demonstrate the advantages of the agent-oriented paradigm. One of their important aspects is modularity and flexibility. It is very easy to dynamically add or remove agents, to move agents around the computing network, and to organize the user interface.
Reference: [24] <author> S. Weerawarana, </author> <title> Problem Solving Environments for Partial Differential Equation Based Systems, </title> <type> Ph.D. thesis, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1994. </year>
Reference-contexts: The user's high-level view of the SciAgents' architecture is shown in Figure 4. There is a global communication medium which is used by all entities called a software bus <ref> [24] </ref>. The agent instantiator communicates with the user through the user interface builder and uses the software bus to communicate with the templates in order to instantiate various agents. Agents communicate with each other through the software bus and have their own local user interfaces to interact with the user. <p> The contents of the messages are in S-KIF | a language which we are developing 10 for scientific computing. This is based on a language we developed for PDE data called PDESpec <ref> [24] </ref>. Using KQML for the inter agent communication in SciAgents ensures portability, compatibility, and better opportunities for extensions and the inclusion of agents built by others. The software architecture of the local problem solver agents reflects our desire to reuse existing software for solving general single-domain PDE problems.
Reference: [25] <author> R. Wesson et al., </author> <title> Network Structures for Distributed Situation Assessment, </title> <booktitle> Readings in Distributed Artificial Intelligence (Bond and Gasser, </booktitle> <editor> eds.), </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1988, </year> <pages> pp. 71-89. </pages>
Reference-contexts: Task sharing essentially involves creating subtasks, and then farming them off to other agents. Result sharing is more data directed. Different agents are solving different tasks, and keep on exchanging partial results to cooperate. They also proposed using "contract nets", to distribute tasks. Wesson et. al showed <ref> [25] </ref> how many intelligent sensor devices could pool their knowledge to obtain an accurate overall assessment of the situation. The specific task presented in their work involved detecting moving entities, even though each "sensor agent" saw only a part of the environment.
Reference: [26] <author> M. Wooldridge and N. Jennings, </author> <title> Intelligent Agents: </title> <journal> Theory and Practice, </journal> <note> (submitted to Knowledge Engineering Review), 1994. 20 </note>
Reference-contexts: We believe that this approach will allow locally interacting problem solving agents to decompose a complex computation into a distributed collection of self contained computations. It also allows high scalability. 2 Background and Related Work Many agent-based systems have been developed <ref> [8, 20, 21, 23, 26] </ref>, which demonstrate the advantages of the agent-oriented paradigm. One of their important aspects is modularity and flexibility. It is very easy to dynamically add or remove agents, to move agents around the computing network, and to organize the user interface.
References-found: 25

