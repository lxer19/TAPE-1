URL: http://www.cs.umd.edu/~fatma/publications/ride96.ps.gz
Refering-URL: http://www.cs.umd.edu/~fatma/publications.html
Root-URL: 
Email: email: asuman@srdc.metu.edu.tr  
Title: A Multidatabase System Implementation on CORBA  
Author: A. Dogac, C. Dengi, E. Kilic, G. Ozhan, F. Ozcan, S. Nural, C. Evrendilek, U. Halici, B. Arpinar, P. Koksal, S. Mancuhan 
Address: (METU), Turkiye  
Affiliation: Software Research and Development Center of TUBITAK Middle East Technical University  
Abstract: METU INteroperable DBMS (MIND) is a multi-database system based on OMG's distributed object management architecture. It is implemented on top of a CORBA compliant ORB, namely, DEC's Ob-jectBroker. In MIND all local databases are encapsulated in a generic database object. The interface of the generic database object is defined in CORBA IDL and multiple implementations of this interface, one for each component DBMSs, namely, Oracle7, Sybase, Adabas D and MOOD are provided. MIND provides its users a common data model and a single global query language based on SQL. The main components of MIND are a global query manager, a global transaction manager, a schema integrator, interfaces to supported database systems and a graphical user interface. The integration of export schemas is currently performed by using an object definition language (ODL) which is based on OMG's interface definition language. MIND global query optimizer aims at maximizing the parallel execution of the intersite operations of the global subqueries. Through MIND global transaction manager, the serializable execution of the global transactions (both nested and flat) is provided. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> ENTIRE SQL-DB Server Call Interface, ESD-311-316, SOFTWARE AG, </institution> <month> April </month> <year> 1993. </year>
Reference-contexts: The Database Object conveys requests from the client to the underlying DBMSs by using the CLIs of these DBMSs. The CLIs of these systems <ref> [14, 15, 1, 4] </ref> support SQL data definition, data manipulation, query, and transaction control facilities. We have used C bindings of these CLIs to access the corresponding database servers. Results of the requests returned from the CLIs of underlying DBMSs are conveyed to the client through CORBA.
Reference: [2] <author> Dogac, A., Evrendilek, C., Okay, T., Ozkan, C., </author> <title> "METU Object- Oriented DBMS", Advances in Object-Oriented Database Systems, edited by Do-gac, </title> <editor> A., Ozsu, T., Biliris, A., Sellis, T., </editor> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: In MIND, there is a generic Database Object defined in CORBA IDL and there are multiple implementations of this interface, one for each of the local DBMSs, namely Oracle7 2 , Sybase 3 , Adabas D 4 and MOOD (METU Object-Oriented Database System) <ref> [2, 3, 4, 6] </ref>. The current implementation makes unified access possible to any combination of these databases through a global query language based on SQL.
Reference: [3] <author> Dogac, A., et. al., </author> <title> "METU Object-Oriented Database System", Demo Description, </title> <booktitle> in the Proc. ACM SIGMOD Intl. Conf. on Management of Data, </booktitle> <address> Minneapolis, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: In MIND, there is a generic Database Object defined in CORBA IDL and there are multiple implementations of this interface, one for each of the local DBMSs, namely Oracle7 2 , Sybase 3 , Adabas D 4 and MOOD (METU Object-Oriented Database System) <ref> [2, 3, 4, 6] </ref>. The current implementation makes unified access possible to any combination of these databases through a global query language based on SQL.
Reference: [4] <author> Dogac, A., Altinel, A., Ozkan, C., Durusoy, I., Al-tintas, I., </author> <title> "METU Object-Oriented DBMS Kernel",Proc. </title> <booktitle> of Intl. Conf on Database and Expert Systems Applications, London, September 1995 (Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995). </year>
Reference-contexts: In MIND, there is a generic Database Object defined in CORBA IDL and there are multiple implementations of this interface, one for each of the local DBMSs, namely Oracle7 2 , Sybase 3 , Adabas D 4 and MOOD (METU Object-Oriented Database System) <ref> [2, 3, 4, 6] </ref>. The current implementation makes unified access possible to any combination of these databases through a global query language based on SQL. <p> The Database Object conveys requests from the client to the underlying DBMSs by using the CLIs of these DBMSs. The CLIs of these systems <ref> [14, 15, 1, 4] </ref> support SQL data definition, data manipulation, query, and transaction control facilities. We have used C bindings of these CLIs to access the corresponding database servers. Results of the requests returned from the CLIs of underlying DBMSs are conveyed to the client through CORBA.
Reference: [5] <author> Dogac.,A., Dengi, C., Kilic, E., Ozhan, G., Oz-can, F., Nural, S., Evrendilek, C., Halici, U., Arpinar, B., Koksal, P., Kesim, N., Mancuhan, S., </author> <title> "METU Interoperable Database System", </title> <booktitle> ACM SIGMOD Record, Vol.24, No.3, </booktitle> <month> September </month> <year> 1995. </year>
Reference-contexts: The assertions will be derived as a result of the investigation phase. For each type of assertion, there will correspond an integration rule so that the system knows what to do to build the integrated schema. 5 Query Processing in MIND MIND V.0.2 <ref> [5] </ref> has a cost based optimizer [7]. In MIND V.1.0, we implemented a dynamic query processor. The main idea behind dynamic query processor is to exploit the inherent parallelism in the system as much as possible without performing a cost based analysis. <p> It is clear that in this architecture two partial results that need to be processed together are executed as soon as they appear. This architecture is highly dynamic and obtains the maximum parallel execution that is possible without cost calculation. 6 MIND Transaction Management In MIND V.0.2 <ref> [5] </ref>, a ticket based algorithm has been implemented for flat transactions. For MIND V.1.0 a technique for global concurrency control of nested transactions in multidatabases, called Nested Tickets Method for Nested Transactions (NTNT) is developed [9].
Reference: [6] <author> Dogac, A., Altinel, M., Ozkan, C., Durusoy, I., </author> <title> "Implementation Aspects of an Object-Oriented DBMS", </title> <booktitle> ACM SIGMOD Record, </booktitle> <address> Vol.24, No.1, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: In MIND, there is a generic Database Object defined in CORBA IDL and there are multiple implementations of this interface, one for each of the local DBMSs, namely Oracle7 2 , Sybase 3 , Adabas D 4 and MOOD (METU Object-Oriented Database System) <ref> [2, 3, 4, 6] </ref>. The current implementation makes unified access possible to any combination of these databases through a global query language based on SQL.
Reference: [7] <author> Evrendilek, C., Dogac, A., Nural, S., Ozcan, F., </author> <title> "Query Optimization in Multidatabase Systems", </title> <booktitle> Proc. of the Next Generation Information Technologies and Systems, </booktitle> <address> Israel, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: The assertions will be derived as a result of the investigation phase. For each type of assertion, there will correspond an integration rule so that the system knows what to do to build the integrated schema. 5 Query Processing in MIND MIND V.0.2 [5] has a cost based optimizer <ref> [7] </ref>. In MIND V.1.0, we implemented a dynamic query processor. The main idea behind dynamic query processor is to exploit the inherent parallelism in the system as much as possible without performing a cost based analysis.
Reference: [8] <author> Georgakopoulos, D., Rusinkiewicz, M., and Sheth, A., </author> <title> "Using Tickets to Enforce the Seri-alizability of Multidatabase Transactions", </title> <journal> IEEE Trans. on Data and Knowledge Eng., </journal> <volume> Vol. 6, No.1, </volume> <year> 1994. </year>
Reference-contexts: If PrepareToCommit message is available at the user transaction level (i.e. immediate child of OMNI) this facility is used at this level. If the underlying DBMS does not support PrepareToCommit even at this level then PreparedToCommit state of a user transaction can be simulated as described in <ref> [8] </ref>. GarbageCollector algorithm which is not presented here is executed periodically to delete the ticket items created by the subtransactions.
Reference: [9] <author> Halici, U., Arpinar, B., and Dogac, A., </author> <title> "Se-rializability of Nested Transactions in Multi-databases," </title> <type> Technical report 95-10, </type> <institution> Software R&D Center, Middle East Technical University, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: For MIND V.1.0 a technique for global concurrency control of nested transactions in multidatabases, called Nested Tickets Method for Nested Transactions (NTNT) is developed <ref> [9] </ref>. <p> The correctness proof of the NTNT technique is provided in <ref> [9] </ref>. The recovery manager of MIND is under development. 7 Conclusions In this paper, we describe our experiences in building a multidatabase system, namely MIND, based on OMG's object management architecture.
Reference: [10] <author> Huck, G., Fankhauser, P., Busse, R., Klas, W., </author> <title> "IRO-DB : An Object-Oriented Approach towards Federated and Interoprable DBMSs", </title> <booktitle> Proc. of ADBIS '94, </booktitle> <address> Moscow, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Attribute and relationship constitute the signature of the class. In addition to its interface definition, each class needs information to determine the extent and to map the attributes onto the local ones. The general syntax for this mapping definition which is similar to <ref> [10] </ref> is provided in the following: mapping classname - origin originname1: classname1 alias1 [, originname2: classname2 alias2,...]; def_ext extname as select from alias1, alias2, ... where ...; def_attr attr1 as [alias1.attrname | select alias1.attrname, alias2.attrname from alias1, alias2 where ...; ] def_rel relname as select * from alias1, alias2 ... where
Reference: [11] <author> Kilic, E., Ozhan, G., Dengi, C., Kesim, N., Kok-sal, P. and Dogac, A., </author> <title> "Experiences in Using CORBA in a Multidatabase Implementation", </title> <booktitle> Proc. of 6th Intl. Workshop on Database and Expert System Applications, </booktitle> <address> London, </address> <month> Sept. </month> <year> 1995. </year>
Reference-contexts: evolves, it provides clearer insights regarding the nature of issues in implementing a multidatabase system on a distributed object management architecture. 3 The Infrastructure of MIND As an initial step in implementing MIND, we encapsulated Oracle7, Sybase, Adabas D and MOOD DBMSs in multiple implementations of a generic Database Object <ref> [11] </ref>. The Database Object conveys requests from the client to the underlying DBMSs by using the CLIs of these DBMSs. The CLIs of these systems [14, 15, 1, 4] support SQL data definition, data manipulation, query, and transaction control facilities.
Reference: [12] <author> Object Management Group, </author> <title> "The Common Object Request Broker: Architecture and Specification", OMG Document Number 91.12.1, </title> <month> Decem-ber </month> <year> 1991. </year>
Reference-contexts: A recent standard by OMG 1 , namely CORBA (The Common Object Request Broker Architecture) <ref> [12] </ref> provides several advantages when used as the infrastructure of a multidatabase system. CORBA handles the heterogeneity at the platform level and in doing this it provides location and implementation transparency.
Reference: [13] <author> Object Management Group, </author> <title> "The Common Object Services Specification, Volume 1", OMG Document Number 94.1.1, </title> <month> January </month> <year> 1994. </year>
Reference-contexts: Furthermore, CORBA and COSS (Common Object Specification Service) together provide much of the functionality to handle heterogeneity at the database level and some functionality to handle application interoperability. Note that COSS <ref> [13] </ref> is a complementary standard developed by the OMG for integrating distributed objects.
Reference: [14] <institution> Programmer's Guide to the Oracle Call Interfaces, Oracle Corporation, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: The Database Object conveys requests from the client to the underlying DBMSs by using the CLIs of these DBMSs. The CLIs of these systems <ref> [14, 15, 1, 4] </ref> support SQL data definition, data manipulation, query, and transaction control facilities. We have used C bindings of these CLIs to access the corresponding database servers. Results of the requests returned from the CLIs of underlying DBMSs are conveyed to the client through CORBA.
Reference: [15] <institution> Open Client DB-Library /C Reference Manual, Sybase Inc., </institution> <month> November </month> <year> 1990. </year>
Reference-contexts: The Database Object conveys requests from the client to the underlying DBMSs by using the CLIs of these DBMSs. The CLIs of these systems <ref> [14, 15, 1, 4] </ref> support SQL data definition, data manipulation, query, and transaction control facilities. We have used C bindings of these CLIs to access the corresponding database servers. Results of the requests returned from the CLIs of underlying DBMSs are conveyed to the client through CORBA.
References-found: 15

