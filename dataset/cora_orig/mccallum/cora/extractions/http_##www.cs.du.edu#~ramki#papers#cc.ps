URL: http://www.cs.du.edu/~ramki/papers/cc.ps
Refering-URL: http://www.cs.du.edu/~ramki/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: On Computing Connected Components of Line Segments  
Author: Mario Alberto Lopez Ramakrishna Thurimella 
Address: Denver, Denver CO 80208.  
Affiliation: Department of Mathematics and Computer Science University of  
Abstract: It is shown that given a set of n line segments, their connected components can be computed in time O(n 4=3 log 3 n). A bound of o(n 4=3 ) for this problem would imply a similar bound for detecting, for a given set of n points and n lines, whether some point lies on some of the lines. This problem, known as Hopcroft's problem, is believed to have a lower bound of (n 4=3 ). For the special case when the endpoints of each segment fall inside the same face of the arrangement induced by the set of segments, we give a faster algorithm that runs in O(n log 3 n) time. 
Abstract-found: 1
Intro-found: 1
Reference: [Ag90a] <author> P.K. Agarwal, </author> <title> Partitioning arrangements of lines I: An efficient deterministic algorithm, </title> <journal> Discrete Comput. Geom., </journal> <volume> 5 (1990), </volume> <pages> pp. 449-483. </pages>
Reference-contexts: We show that C can be merged with its local segments in time O (m 4=3 log 2=3 m) where m = h + k. The technique used was originally suggested by Agarwal <ref> [Ag90a] </ref> and later refined in [Ma91]. We borrow the notation of [Ag90b]. Assume the segments at v are colored blue and the local segments are colored red. We are interested in detecting red-blue intersections. Algorithm Merge-locals 1.
Reference: [Ag90b] <author> P.K. Agarwal, </author> <title> Partitioning arrangements of lines II: </title> <journal> applications, Discrete Comput. Geom., </journal> <volume> 5 (1990), </volume> <pages> pp. 533-573. </pages>
Reference-contexts: We show that C can be merged with its local segments in time O (m 4=3 log 2=3 m) where m = h + k. The technique used was originally suggested by Agarwal [Ag90a] and later refined in [Ma91]. We borrow the notation of <ref> [Ag90b] </ref>. Assume the segments at v are colored blue and the local segments are colored red. We are interested in detecting red-blue intersections. Algorithm Merge-locals 1. <p> Step 1 takes O (mr) time [Ma91]. (Actually, [Ma91] does not show how to ensure that each triangle contains no more than O (m=r 2 ) endpoints. However, this additional requirement can be satisfied with no increase in complexity as shown in Section 4 of <ref> [Ag90b] </ref>.) Consider an arbitrary triangle from Step 1. Let n s and n l denote the number of short and long segments, respectively. Clearly n l = O (m=r) and n s = O (m=r 2 ). <p> Let n s and n l denote the number of short and long segments, respectively. Clearly n l = O (m=r) and n s = O (m=r 2 ). Step 2a can be done in O (n l log n l ) time <ref> [Ag90b] </ref>. Constructing the arrangement and finding the list of wedges for each region can be done in O (n 2 s ) time [EOS86].
Reference: [AHU74] <author> A.V. Aho, J.E. Hopcroft and J.D. Ullman, </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley, </publisher> <year> 1974. </year>
Reference-contexts: We represent the partially computed connected components using the union-find data structure given in <ref> [AHU74] </ref>, where each find takes O (1) time and a sequence of n 1 union operations takes O (n log n) time in worst case. The partial component containing an arbitrary segment is found by doing a find operation and two partial components are merged by doing a union operation.
Reference: [AMS91] <author> B. Aronov, J. Matou sek and M. Sharir, </author> <title> On the sum of squares of cell complexities in hyperplane arrangements, </title> <booktitle> Proc. 7th Annual ACM Symp. </booktitle> <institution> Comput. Geom., </institution> <year> (1991), </year> <pages> pp. 307-313. </pages>
Reference-contexts: Let C be a connected component with k segments at some node v. Consider the zone of L, i.e., the the faces of C containing an edge whose supporting line is L. This zone contains O (k) edges <ref> [AMS91] </ref> and can be computed in O (k log 2 k) time [Mi90]. The same bounds apply when computing the zone of R. Let A be the arrangement induced by the zones of L and R (see Figure 6b). Consider each segment s local to C.
Reference: [Ch86] <author> B. Chazelle, </author> <title> Filtering search: A new approach to query-answering, </title> <journal> SIAM J. Comput., </journal> <month> 15:3 </month> <year> (1986), </year> <pages> pp. 703-724. </pages>
Reference-contexts: For example, in Figure 1, the segments s 1 , s 4 , s 12 , and s 13 belong to the connected component labeled E. Our algorithm makes use of a well known duality transformation (for an example see <ref> [Ch86] </ref>). Under this transform, a point (a; b) is mapped to the line y = ax + b; and a line y = ax + b is mapped to the point (a; b).
Reference: [EGS86] <author> H. Edelsbrunner, L.J. Guibas and J. Stolfi, </author> <title> Optimal point location in a monotone subdivision, </title> <journal> SIAM J. Comput., </journal> <month> 15:2 </month> <year> (1986), </year> <pages> pp. 317-340. </pages>
Reference-contexts: Proof: In order to establish the time bounds, we use the planar point location algorithm from <ref> [EGS86] </ref>. Consider the contours of the connected components at v without the edges from L and R. These chains induce a monotone subdivision of the plane when we attach infinite horizontal extensions to their ends. Now, we identify the local and global segments after locating their endpoints. <p> Constructing the arrangement and finding the list of wedges for each region can be done in O (n 2 s ) time [EOS86]. Point location, which takes O (log n s ) time per query using <ref> [EGS86] </ref>, is performed for n l points, resulting in O (n l log n s ) time. Thus, Step 2b requires O (n 2 s + n l log n s ) time. <p> Substituting for r yields the desired bound. 2 4.3 Merge global segments Merging global segments is a straightforward application of the planar point location algorithm of <ref> [EGS86] </ref> along with some union operations. Let C 1 ; : : : ; C k be the connected components at v sorted in ascending order by the intersection of L with their lower contours (see Figure 4). <p> Modifying the data structure of <ref> [EGS86] </ref> to keep the neighboring regions is trivial. Therefore, Step 1 takes O (d v log n v ) time. Step 2 can be implemented by first sorting the interval endpoints and then scanning them in the increasing order.
Reference: [EGS90] <author> H. Edelsbrunner, L.J. Guibas and M. Sharir, </author> <title> The complexity and construction of many faces in an arrangement of lines and of segments, </title> <journal> Discrete Comput. Geom., </journal> <volume> 5 (1990), </volume> <pages> pp. 161-196. </pages>
Reference-contexts: We denote by U F (resp. LF ) the face unbounded in the upward (resp. downward) direction, and refer to its edges as the upper (resp. lower) contour of C. See Figure 3 for an example. All faces in an arrangement, particularly U F and LF , are convex <ref> [EGS90] </ref>. Now consider the upper and lower contours of a set of connected components at node v. Observe that these contours can be totally ordered by considering, for each contour, the y-coordinate of its vertex on L. See Algorithm Merge at v 1.
Reference: [EOS86] <author> H. Edelsbrunner, J. O'Rourke and R. Seidel, </author> <title> Constructing arrangements of lines and hyperplanes with applications, </title> <journal> SIAM J. Comput., </journal> <month> 15:2 </month> <year> (1986), </year> <pages> pp. 341-363. </pages>
Reference-contexts: Step 2a can be done in O (n l log n l ) time [Ag90b]. Constructing the arrangement and finding the list of wedges for each region can be done in O (n 2 s ) time <ref> [EOS86] </ref>. Point location, which takes O (log n s ) time per query using [EGS86], is performed for n l points, resulting in O (n l log n s ) time. Thus, Step 2b requires O (n 2 s + n l log n s ) time.
Reference: [ELOW84] <author> H. Edelsbrunner, J. van Leeuwen, T. Ottmann and D. Wood, </author> <title> Computing connected components of simple rectilinear geometrical objects in d-space, </title> <journal> RAIRO Theoretical Informatics, </journal> <month> 18:2 </month> <year> (1984), </year> <pages> pp. 171-183. </pages>
Reference-contexts: The special case of computing connected components when the objects are orthogonal has been shown to be solvable with O (n) space in O (n log n) time, where n is the size of the input <ref> [ELOW84, GS83] </ref>. When the number of orientations of the input segments is c, it is known that the connected components can be found in O (cn log n) time with O (n) space [LJS91].
Reference: [GS83] <author> L.J. Guibas and J. Saxe, </author> <title> Problem 80-15, </title> <journal> Journal of Algorithms, </journal> <volume> 4 (1983), </volume> <pages> pp. 176-181. </pages>
Reference-contexts: The special case of computing connected components when the objects are orthogonal has been shown to be solvable with O (n) space in O (n log n) time, where n is the size of the input <ref> [ELOW84, GS83] </ref>. When the number of orientations of the input segments is c, it is known that the connected components can be found in O (cn log n) time with O (n) space [LJS91].
Reference: [GS87] <author> L.J. Guibas and M. Sharir, </author> <title> Computing the unbounded component of an arrangement of line segments, </title> <type> Manuscript, </type> <year> (1987). </year>
Reference-contexts: They further conjecture that it should be possible to find connected components without computing all intersections. In addition, they provide a reference to a manuscript by Guibas and Sharir <ref> [GS87] </ref> that contains an O (n log 2 n) algorithm for computing the connected components of two sets S and T of line segments in the plane, where no two segments in S (similarly, T ) intersect.
Reference: [LJS91] <author> M. Lopez, R. Janardan and S. Sahni, </author> <title> A fast algorithm for VLSI net extraction, </title> <note> submitted. </note>
Reference-contexts: When the number of orientations of the input segments is c, it is known that the connected components can be found in O (cn log n) time with O (n) space <ref> [LJS91] </ref>. The number orientations can be arbitrary in today's technology, and hence many practical net extraction algorithms compute all intersections [NS88].
Reference: [Mi90] <author> J.S.B. Mitchell, </author> <title> On computing a single face in an arrangement of line segments, </title> <type> Manuscript, </type> <year> (1990). </year>
Reference-contexts: Consider the zone of L, i.e., the the faces of C containing an edge whose supporting line is L. This zone contains O (k) edges [AMS91] and can be computed in O (k log 2 k) time <ref> [Mi90] </ref>. The same bounds apply when computing the zone of R. Let A be the arrangement induced by the zones of L and R (see Figure 6b). Consider each segment s local to C. Merge s with C if the endpoints of s belong to different faces of A.
Reference: [MS88] <author> H.G. Mairson and J. Stolfi, </author> <title> Reporting and counting intersections between two sets of line segments, </title> <booktitle> NATO ASI series, Theoretical foundations of computer graphics and CAD, </booktitle> <publisher> Springer-Verlag (1988), </publisher> <pages> pp. 307-325. </pages>
Reference-contexts: As net extraction is often performed on many line segments in practice, the computational complexity of finding connected components plays a central role in the implementation of VLSI circuits. In their paper on computing intersections between two sets of line segments <ref> [MS88] </ref>, Mairson and Stolfi consider the connected component problem as an interesting open problem. They further conjecture that it should be possible to find connected components without computing all intersections.
Reference: [Ma91] <author> J. Matou sek, </author> <title> Cutting hyperplane arrangements, </title> <journal> Discrete Comput. Geom., </journal> <volume> 6 (1991), </volume> <pages> pp. 385-406. </pages>
Reference-contexts: We show that C can be merged with its local segments in time O (m 4=3 log 2=3 m) where m = h + k. The technique used was originally suggested by Agarwal [Ag90a] and later refined in <ref> [Ma91] </ref>. We borrow the notation of [Ag90b]. Assume the segments at v are colored blue and the local segments are colored red. We are interested in detecting red-blue intersections. Algorithm Merge-locals 1. <p> Lemma 3 Algorithm Merge-locals takes O (m 4=3 log 2=3 m) time where m is the sum of the number of segments in C and the number of segments local to C. Proof: Let us estimate the time complexity of the above steps. Step 1 takes O (mr) time <ref> [Ma91] </ref>. (Actually, [Ma91] does not show how to ensure that each triangle contains no more than O (m=r 2 ) endpoints. However, this additional requirement can be satisfied with no increase in complexity as shown in Section 4 of [Ag90b].) Consider an arbitrary triangle from Step 1. <p> Proof: Let us estimate the time complexity of the above steps. Step 1 takes O (mr) time <ref> [Ma91] </ref>. (Actually, [Ma91] does not show how to ensure that each triangle contains no more than O (m=r 2 ) endpoints. However, this additional requirement can be satisfied with no increase in complexity as shown in Section 4 of [Ag90b].) Consider an arbitrary triangle from Step 1.
Reference: [Ma92] <author> J. Matou sek, </author> <title> Range searching with efficient hierarchical cuttings, </title> <booktitle> Proc. 8th Annual ACM Symp. </booktitle> <institution> Comput. Geom., </institution> <year> (1992), </year> <pages> pp. 276-285. </pages>
Reference-contexts: It is believed that this problem has a lower bound of (n 4=3 ). We quote from a recent paper of Matousek <ref> [Ma92] </ref>, in which an algorithm with a time bound of n 4=3 2 O (log fl n) is given for Hopcroft's problem: "Understanding this problem seems to be one of the major challenges in computational geometry : : : It is suspected that n 4=3 might be the true computational complexity
Reference: [NS88] <author> S. Nahar and S. Sahni, </author> <title> Time and space efficient net extractor, </title> <booktitle> Computer Aided Design, 20:1 (1988), </booktitle> <pages> pp. 17-26. </pages>
Reference-contexts: The number orientations can be arbitrary in today's technology, and hence many practical net extraction algorithms compute all intersections <ref> [NS88] </ref>.
Reference: [PS88] <author> F. Preparata and M.I. Shamos, </author> <title> Computational Geometry: An Introduction, </title> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: For an illustration see Figure 2. Transform Dual (L) s L Dual (s) The key data structure in our algorithm is the segment tree. For the sake of completeness, we include its definition (taken from <ref> [PS88] </ref>) in the following. The segment tree is a rooted binary tree designed to store intervals on the real line whose extremes belong to a fixed set of N abscissae. <p> For more details on the segment tree data structure, the reader is referred to <ref> [PS88] </ref>. We now outline our strategy: 1. Build a segment tree T on the 2n x-coordinates of the input endpoints. Partition the input segments using their projections onto the x-axis and store the resulting pieces in T . 2. <p> either entirely above the current contour or it cuts across it. 7 interval at v child of v interval at left child of v interval at right s 1 C In the latter case, vertices are popped from LC in a manner reminiscent of vertex deletion during a Graham scan <ref> [PS88] </ref>. Algorithm Lower Contour 1. Sort the y-coordinates of the endpoints of the segments on L in ascending order; if two or more segments share an endpoint, keep only the one with the smallest slope.
References-found: 18

