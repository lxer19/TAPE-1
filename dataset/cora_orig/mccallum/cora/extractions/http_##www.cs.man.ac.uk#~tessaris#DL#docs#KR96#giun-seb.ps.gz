URL: http://www.cs.man.ac.uk/~tessaris/DL/docs/KR96/giun-seb.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~tessaris/DL/papers.html
Root-URL: http://www.cs.man.ac.uk
Email: fausto@irst.itc.it rseba@mrg.dist.unige.it  
Title: A SAT-based decision procedure for ALC  
Author: Fausto Giunchiglia ; Roberto Sebastiani 
Date: May 13, 1996  
Address: IRST, 38050 Povo (TN), Italy. ph: ++39.461.314436 2 DISA, via Inama 5, 38100 Trento 3 DIST, v. Causa 13, 16146 Genoa, Italy. ph: ++39.10.3532811  
Affiliation: 1  
Abstract: The goal of this paper is to describe and thoroughly test a decision procedure, called Ksat, checking satisfiability in the terminological logic ALC. Ksat is said to be SAT-based as it is defined in terms of a decision procedure for propositional satisfiability (SAT). The tests are performed comparing Ksat with, among other procedures, Kris, a state-of-the-art tableau-based implementation of a decision procedure for ALC. Ksat outperforms Kris of orders of magnitude. Furthermore, the empirical results highlight an intrinsic weakeness that tableau-based decision procedures have with respect to SAT-based decision procedures. fl Franz Baader, Marco Cadoli, Enrico Franconi, Enrico Giunchiglia, Fabio Massacci and Bernhard Nebel have given very useful feedback. Fabio Massacci has suggested testing the Halpern & Moses formulas. Marco Roveri has given technical assistance in the testing phase. All the members of the Mechanized Reasoning Group in Genoa have put up with many weeks of CPU-time background processes. 
Abstract-found: 1
Intro-found: 1
Reference: [AG93] <author> A. Armando and E. Giunchiglia. </author> <title> Embedding Complex Decision Procedures inside an Interactive Theorem Prover. </title> <journal> Annals of Mathematics and Artificial Intelligence, </journal> <volume> 8(3-4):475-502, </volume> <year> 1993. </year>
Reference-contexts: It is important to notice that Ksat W is a variant of the non-CNF version of the Davis-Putnam-Longemann-Loveland SAT procedure [DP60, DLL62] (DPLL from now on), as described in <ref> [AG93] </ref>. Unlike DPLL, whenever an assignment has been found, Ksat W , instead of returning T rue, invokes Ksat A (). Essentially, DPLL is used to generate truth assignments, whose K (m)- satisfiability is recursively checked by Ksat A . <p> Essentially, DPLL is used to generate truth assignments, whose K (m)- satisfiability is recursively checked by Ksat A . We have implemented the algorithm described in Figure 1 as a procedure, also called Ksat, implemented in Common Lisp on top of the non-CNF DPLL decision procedure described in <ref> [AG93] </ref>. DPLL is well known to be one of the fastest decision procedures for SAT (see, e.g., [BB92, US94]). However the implementation we use, though relatively fast, is much slower than the state-of-the-art SAT decision procedures (see, e.g., [BB92, ZS94]). <p> These topics are described in detail in [GS96]. More recently we have also introduced a form of preprocessing | essentially, a recursive removal of duplicate and contradictory subwffs | of the input formulas. 8 A notion of unit clause for non-CNF propositional wffs is given in <ref> [AG93] </ref>. More generally, [AG93] and [Seb94] show how decision procedures for CNF formulas can be modified to work for non-CNF formulas 4 3 The test method The methodology we use generalizes the fixed-clause-length model commonly used in propositional SAT testing (see, e.g., [MSL92, BB92]). <p> These topics are described in detail in [GS96]. More recently we have also introduced a form of preprocessing | essentially, a recursive removal of duplicate and contradictory subwffs | of the input formulas. 8 A notion of unit clause for non-CNF propositional wffs is given in <ref> [AG93] </ref>. More generally, [AG93] and [Seb94] show how decision procedures for CNF formulas can be modified to work for non-CNF formulas 4 3 The test method The methodology we use generalizes the fixed-clause-length model commonly used in propositional SAT testing (see, e.g., [MSL92, BB92]).
Reference: [BB92] <author> M. Buro and H. Buning. </author> <title> Report on a SAT competition. </title> <type> Technical Report 110, </type> <institution> University of Paderborn, Germany, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: We have implemented the algorithm described in Figure 1 as a procedure, also called Ksat, implemented in Common Lisp on top of the non-CNF DPLL decision procedure described in [AG93]. DPLL is well known to be one of the fastest decision procedures for SAT (see, e.g., <ref> [BB92, US94] </ref>). However the implementation we use, though relatively fast, is much slower than the state-of-the-art SAT decision procedures (see, e.g., [BB92, ZS94]). The basic version of the algorithm described in Figure 1 is improved in the following way. First, all modal atoms are internally ordered. <p> DPLL is well known to be one of the fastest decision procedures for SAT (see, e.g., [BB92, US94]). However the implementation we use, though relatively fast, is much slower than the state-of-the-art SAT decision procedures (see, e.g., <ref> [BB92, ZS94] </ref>). The basic version of the algorithm described in Figure 1 is improved in the following way. First, all modal atoms are internally ordered. This avoids assigning different truth values to permutations of the same sub-wffs. <p> More generally, [AG93] and [Seb94] show how decision procedures for CNF formulas can be modified to work for non-CNF formulas 4 3 The test method The methodology we use generalizes the fixed-clause-length model commonly used in propositional SAT testing (see, e.g., <ref> [MSL92, BB92] </ref>). Let a 3CNF K (m) wff be a conjunction of 3CNF K (m) clauses. Let a 3CNF K (m) clause be a disjunction of three 3CNF K (m) literals, i.e., 3CNF K (m) atoms or their negations.
Reference: [Bry92] <author> R. E. Bryant. </author> <title> Symbolic Boolean manipolation with ordered binary-decision diagrams. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(3) </volume> <pages> 293-318, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: The more constrained the wff is, the more likely a truth assignment violates some constraint. (For instance, 12 In Ksat we used non-CNF DPLL, but we could use any other SAT procedures not affected by the problem highlighted in [D'A92, DM94], e.g., OBDDs <ref> [Bry92] </ref>, or an implementation of KE [DM94]. 8 1: varying variable #: 2: varying modality #: 3: varying modal depth: d = 2; m = 1; p = 0:5; d = 2; N = 4; p = 0:5; m = 1; N = 3; p = 0:5; 0.01 1 100 0
Reference: [CA93] <author> J. Crawford and L. Auton. </author> <title> Experimental results on the crossover point in satisfiability problems. </title> <booktitle> In Proc. of the 11th National Conference on Artificial Intelligence, </booktitle> <pages> pages 21-27, </pages> <year> 1993. </year>
Reference: [CKT91] <author> P. Cheeseman, B. Kanefski, and W. M. Taylor. </author> <title> Where the really hard problem are. </title> <booktitle> In Proc. of the 12th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 163-169, </pages> <year> 1991. </year>
Reference-contexts: From these facts we may conjecture (to be verified!) the existence for K (m)/ALC of a phase transition phenomenon, similar to that already known for SAT and other NP-hard problems (see, e.g, <ref> [CKT91, MSL92, WH94] </ref>). The final observation comes from the three sets of median CPU times curves (top row): Ksat outperforms Kris in all the testbeds, independently on the number of variables N , the number of modalities m or the depth d considered.
Reference: [D'A92] <author> M. D'Agostino. </author> <title> Are Tableaux an Improvement on Truth-Tables? Journal of Logic, </title> <journal> Language and Information, </journal> <volume> 1 </volume> <pages> 235-252, </pages> <year> 1992. </year>
Reference-contexts: Analytic propositional tableaux perform what we call syntactic branching, that is, a branching on the syntactic structure of '. As widely discussed in <ref> [D'A92, DM94] </ref>, any application of the _-rule generates two subtrees which are not mutually inconsistent 11 , that is, two subtrees which may share propositional models. The set of truth assignments enumerated by propositional tableau procedures is intrinsically redundant, and may contain many duplicate and/or subsumed assignments. <p> Any redundant truth assignment enumerated at depth d introduces a redundant modal search tree of depth d. Even worse, this propositional redundancy propagates exponentially with the depth d, following the analysis of the subwffs of decreasing depth. 11 As pointed out in <ref> [D'A92, DM94] </ref>, in Analytic tableaux rules are unable to represent bivalence: "every proposition is either true or false, tertium non datur ". <p> The more constrained the wff is, the more likely a truth assignment violates some constraint. (For instance, 12 In Ksat we used non-CNF DPLL, but we could use any other SAT procedures not affected by the problem highlighted in <ref> [D'A92, DM94] </ref>, e.g., OBDDs [Bry92], or an implementation of KE [DM94]. 8 1: varying variable #: 2: varying modality #: 3: varying modal depth: d = 2; m = 1; p = 0:5; d = 2; N = 4; p = 0:5; m = 1; N = 3; p = 0:5;
Reference: [DLL62] <author> M. Davis, G. Longemann, and D. Loveland. </author> <title> A machine program for theorem proving. </title> <journal> Journal of the ACM, </journal> <volume> 5(7), </volume> <year> 1962. </year>
Reference-contexts: The correctness and completeness of Ksat can be easily seen, for instance by noticing the close parallel with Fitting's tableau described in [Fit83]. It is important to notice that Ksat W is a variant of the non-CNF version of the Davis-Putnam-Longemann-Loveland SAT procedure <ref> [DP60, DLL62] </ref> (DPLL from now on), as described in [AG93]. Unlike DPLL, whenever an assignment has been found, Ksat W , instead of returning T rue, invokes Ksat A (). Essentially, DPLL is used to generate truth assignments, whose K (m)- satisfiability is recursively checked by Ksat A .
Reference: [DM94] <author> M. D'Agostino and M. Mondadori. </author> <title> The Taming of the Cut. </title> <journal> Journal of Logic and Computation, </journal> <volume> 4(3) </volume> <pages> 285-319, </pages> <year> 1994. </year>
Reference-contexts: Analytic propositional tableaux perform what we call syntactic branching, that is, a branching on the syntactic structure of '. As widely discussed in <ref> [D'A92, DM94] </ref>, any application of the _-rule generates two subtrees which are not mutually inconsistent 11 , that is, two subtrees which may share propositional models. The set of truth assignments enumerated by propositional tableau procedures is intrinsically redundant, and may contain many duplicate and/or subsumed assignments. <p> Any redundant truth assignment enumerated at depth d introduces a redundant modal search tree of depth d. Even worse, this propositional redundancy propagates exponentially with the depth d, following the analysis of the subwffs of decreasing depth. 11 As pointed out in <ref> [D'A92, DM94] </ref>, in Analytic tableaux rules are unable to represent bivalence: "every proposition is either true or false, tertium non datur ". <p> The more constrained the wff is, the more likely a truth assignment violates some constraint. (For instance, 12 In Ksat we used non-CNF DPLL, but we could use any other SAT procedures not affected by the problem highlighted in <ref> [D'A92, DM94] </ref>, e.g., OBDDs [Bry92], or an implementation of KE [DM94]. 8 1: varying variable #: 2: varying modality #: 3: varying modal depth: d = 2; m = 1; p = 0:5; d = 2; N = 4; p = 0:5; m = 1; N = 3; p = 0:5; <p> The more constrained the wff is, the more likely a truth assignment violates some constraint. (For instance, 12 In Ksat we used non-CNF DPLL, but we could use any other SAT procedures not affected by the problem highlighted in [D'A92, DM94], e.g., OBDDs [Bry92], or an implementation of KE <ref> [DM94] </ref>. 8 1: varying variable #: 2: varying modality #: 3: varying modal depth: d = 2; m = 1; p = 0:5; d = 2; N = 4; p = 0:5; m = 1; N = 3; p = 0:5; 0.01 1 100 0 5 10 15 20 25 30
Reference: [DP60] <author> M. Davis and H. Putnam. </author> <title> A computing procedure for quantification theory. </title> <journal> Journal of the ACM, </journal> <volume> 7 </volume> <pages> 201-215, </pages> <year> 1960. </year>
Reference-contexts: The correctness and completeness of Ksat can be easily seen, for instance by noticing the close parallel with Fitting's tableau described in [Fit83]. It is important to notice that Ksat W is a variant of the non-CNF version of the Davis-Putnam-Longemann-Loveland SAT procedure <ref> [DP60, DLL62] </ref> (DPLL from now on), as described in [AG93]. Unlike DPLL, whenever an assignment has been found, Ksat W , instead of returning T rue, invokes Ksat A (). Essentially, DPLL is used to generate truth assignments, whose K (m)- satisfiability is recursively checked by Ksat A .
Reference: [Fit83] <author> M. </author> <title> Fitting. Proof Methods for Modal and Intuitionistic Logics. </title> <address> D. </address> <publisher> Reidel Publishg, </publisher> <year> 1983. </year>
Reference-contexts: works with ALC's syntax. 3 Although this is beyond the goals of this paper, it is worth noticing that this methodology is general, and can be extended to the other normal and (we think) non normal logics, following the methodology and results presented in [GS94, GSGF93] (but see also, e.g., <ref> [Fit83, Mas94] </ref>). 4 Tableau is available via anonymous FTP at ftp.mrg.dist.unige.it in pub/mrg-systems/tableau/. 5 Kris is available via anonymous FTP at ftp.dfki.uni-sb.de in /pub/tacos/KRIS/. 1 like a phase transition [MSL92, WH94]. To our knowledge this is the first time that this phenomenon has been found in a modal logic. <p> Ksat RA returns a truth value asserting whether r is K (m)-satisfiable or not. The correctness and completeness of Ksat can be easily seen, for instance by noticing the close parallel with Fitting's tableau described in <ref> [Fit83] </ref>. It is important to notice that Ksat W is a variant of the non-CNF version of the Davis-Putnam-Longemann-Loveland SAT procedure [DP60, DLL62] (DPLL from now on), as described in [AG93].
Reference: [GS94] <author> F. Giunchiglia and L. Serafini. </author> <title> Multilanguage hierarchical logics (or: how we can do without modal logics). </title> <journal> Artificial Intelligence, </journal> <volume> 65 </volume> <pages> 29-70, </pages> <year> 1994. </year> <note> Also IRST-Technical Report 9110-07, IRST, </note> <institution> Trento, Italy. </institution>
Reference-contexts: that the current implementation of Ksat works with ALC's syntax. 3 Although this is beyond the goals of this paper, it is worth noticing that this methodology is general, and can be extended to the other normal and (we think) non normal logics, following the methodology and results presented in <ref> [GS94, GSGF93] </ref> (but see also, e.g., [Fit83, Mas94]). 4 Tableau is available via anonymous FTP at ftp.mrg.dist.unige.it in pub/mrg-systems/tableau/. 5 Kris is available via anonymous FTP at ftp.dfki.uni-sb.de in /pub/tacos/KRIS/. 1 like a phase transition [MSL92, WH94].
Reference: [GS96] <author> F. Giunchiglia and R. Sebastiani. </author> <title> Building decision procedures for modal logics from propositional decision procedures the case study of modal K. </title> <booktitle> In Proc. of the 13th Conference on Automated Deduction, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: In our opinion, this is the most interesting theoretical result of this paper. The paper is structured as follows. In Section 2 we present the algorithm implemented by Ksat. In Section 3 we briefly survey our test methodology, originally defined in <ref> [GS96] </ref>. This material is needed for a correct understanding of the experimental results reported later. In Section 4 we perform a comparative analysis of a first set of experimental results. This analysis allows us to show why SAT-based decision procedures are intrinsecally more efficient than tableau-based decision procedures. <p> To our knowledge this is the first time that this phenomenon has been found in a modal logic. The analysis presented in this paper builds on and takes to its conclusion the work preliminarily described in <ref> [GS96] </ref>. It improves on the previous material in three important aspects. Let us call Ksat 0 the decision procedure presented in [GS96] (called Ksat in [GS96]) 6 . First, the algorithm and its heuristics, are extended from dealing with a single modality to dealing with multiple modalities. <p> The analysis presented in this paper builds on and takes to its conclusion the work preliminarily described in <ref> [GS96] </ref>. It improves on the previous material in three important aspects. Let us call Ksat 0 the decision procedure presented in [GS96] (called Ksat in [GS96]) 6 . First, the algorithm and its heuristics, are extended from dealing with a single modality to dealing with multiple modalities. Second, the implementation is improved. <p> The analysis presented in this paper builds on and takes to its conclusion the work preliminarily described in <ref> [GS96] </ref>. It improves on the previous material in three important aspects. Let us call Ksat 0 the decision procedure presented in [GS96] (called Ksat in [GS96]) 6 . First, the algorithm and its heuristics, are extended from dealing with a single modality to dealing with multiple modalities. Second, the implementation is improved. Ksat is much faster than Ksat 0 (in our tests, up to two orders of magnitude, see Sections 4 and 5). <p> This has been obtained essentially by adding an initial phase of wff preprocessing. Other | relatively minor | implementational variations can be understood by comparing the code of the two systems. Third, and more important, the testing in <ref> [GS96] </ref> was not exhaustive and only compared Ksat 0 with Tableau. This made us miss some important points, and the phenomena described in Sections 4 and 5 went unnoticed. Furthermore, the increased efficiency of Ksat 0 with respect to Tableau in [GS96] was wrongly motivated by the efficiency of the propositional <p> Third, and more important, the testing in <ref> [GS96] </ref> was not exhaustive and only compared Ksat 0 with Tableau. This made us miss some important points, and the phenomena described in Sections 4 and 5 went unnoticed. Furthermore, the increased efficiency of Ksat 0 with respect to Tableau in [GS96] was wrongly motivated by the efficiency of the propositional decision procedure. Ksat and Ksat 0 (when applied to a single modality) implement essentially the same algorithm. Ksat is only a more efficient implementation. The same applies to Kris and Tableau. <p> m fi m2 = F; : : : ; Notationally, from now on we write as = i ^ :2 1 fi 1j ^ : : : ^ i ^ :2 m fi mj ^ fl (1) 6 Ksat 0 , the test code and all the results presented in <ref> [GS96] </ref> are available via anonymous FTP at ftp.mrg.dist.unige.it in pub/mrg-systems/ksat/ksat0/. 7 Notice that it is not necessary for a truth assignment to assign all the atoms of '. <p> Finally, Ksat W is modified in such a way that Ksat A is (optionally) invoked on intermediate assignments before every split. This drastically prunes search whenever unconsistent intermediate assignments are detected. These topics are described in detail in <ref> [GS96] </ref>. More recently we have also introduced a form of preprocessing | essentially, a recursive removal of duplicate and contradictory subwffs | of the input formulas. 8 A notion of unit clause for non-CNF propositional wffs is given in [AG93]. <p> These values have been chosen as in the analysis described in <ref> [GS96] </ref> they gave the highest execution times with both Tableau and Ksat 0 . The range N : : : 40N for L has been chosen empirically to cover coarsely the "100% satisfiable - 100% unsatisfiable" transition.
Reference: [GSGF93] <author> F. Giunchiglia, L. Serafini, E. Giunchiglia, and M. Frixione. </author> <title> Non-Omniscient Belief as Context-Based Reasoning. </title> <booktitle> In Proc. of the 13th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 548-554, </pages> <address> Chambery, France, </address> <year> 1993. </year> <note> Also IRST-Technical Report 9206-03, IRST, </note> <institution> Trento, Italy. </institution>
Reference-contexts: that the current implementation of Ksat works with ALC's syntax. 3 Although this is beyond the goals of this paper, it is worth noticing that this methodology is general, and can be extended to the other normal and (we think) non normal logics, following the methodology and results presented in <ref> [GS94, GSGF93] </ref> (but see also, e.g., [Fit83, Mas94]). 4 Tableau is available via anonymous FTP at ftp.mrg.dist.unige.it in pub/mrg-systems/tableau/. 5 Kris is available via anonymous FTP at ftp.dfki.uni-sb.de in /pub/tacos/KRIS/. 1 like a phase transition [MSL92, WH94].
Reference: [HM92] <author> J.Y. Halpern and Y. Moses. </author> <title> A guide to the completeness and complexity for modal logics of knowledge and belief. </title> <journal> Artificial Intelligence, </journal> <volume> 54(3) </volume> <pages> 319-379, </pages> <year> 1992. </year>
Reference-contexts: To provide further evidence, we have performed another, quite different, test, based on the class of wffs f' K d g d=1;2; presented in <ref> [HM92] </ref>. This is a class of K (1)-satisfiable wffs, with depth d and 2d + 1 propositional variables. <p> These wffs are paradigmatic for modal K, as every Kripke structure satisfying ' K d has at least 2 d+1 1 distinct states, while j' K d j is O (d 2 ). From the results in <ref> [HM92] </ref> we can reasonably assume a minimum exponential growth factor of 2 d for any ordinary algorithm based on Kripke semantics.
Reference: [HNSS90] <author> B. Hollunder, W. Nutt, and M. Schmidt-Schau. </author> <title> Subsumption Algorithms for Concept Description Languages. </title> <booktitle> In Proc. 8th European Conference on Artificial Intelligence, </booktitle> <pages> pages 348-353, </pages> <year> 1990. </year>
Reference-contexts: In this paper we compare Ksat with two of them. The first is a tableau-based procedure | due to B. Nebel and E. Franconi | which is essentially a straightforward implementation of the algorithm described in <ref> [HNSS90] </ref>. This procedure is called Tableau from now on 4 . The second is the state-of-the-art system Kris described in [HNSS90] 5 . There are many reasons why a system can be more efficient than another. A crucial one is the "smartness" of the implementation. <p> The first is a tableau-based procedure | due to B. Nebel and E. Franconi | which is essentially a straightforward implementation of the algorithm described in <ref> [HNSS90] </ref>. This procedure is called Tableau from now on 4 . The second is the state-of-the-art system Kris described in [HNSS90] 5 . There are many reasons why a system can be more efficient than another. A crucial one is the "smartness" of the implementation. The implementation of Ksat we use is naive in many respects, e.g., it is in Lisp and it does not use fancy optimized data structures.
Reference: [Lad77] <author> R. Ladner. </author> <title> The computational complexity of provability in systems of modal propositional logic. </title> <journal> SIAM J. Comp., </journal> <volume> 6(3) </volume> <pages> 467-480, </pages> <year> 1977. </year>
Reference: [Mas94] <author> F. Massacci. </author> <title> Strongly analytic tableaux for normal modal logics. </title> <booktitle> In Proc. of the 12th Conference on Automated Deduction, </booktitle> <year> 1994. </year>
Reference-contexts: works with ALC's syntax. 3 Although this is beyond the goals of this paper, it is worth noticing that this methodology is general, and can be extended to the other normal and (we think) non normal logics, following the methodology and results presented in [GS94, GSGF93] (but see also, e.g., <ref> [Fit83, Mas94] </ref>). 4 Tableau is available via anonymous FTP at ftp.mrg.dist.unige.it in pub/mrg-systems/tableau/. 5 Kris is available via anonymous FTP at ftp.dfki.uni-sb.de in /pub/tacos/KRIS/. 1 like a phase transition [MSL92, WH94]. To our knowledge this is the first time that this phenomenon has been found in a modal logic.
Reference: [MSL92] <author> D. Mitchell, B. Selman, and H. Levesque. </author> <title> Hard and Easy Distributions of SAT Problems. </title> <booktitle> In Proc. of the 10th National Conference on Artificial Intelligence, </booktitle> <pages> pages 459-465, </pages> <year> 1992. </year>
Reference-contexts: other normal and (we think) non normal logics, following the methodology and results presented in [GS94, GSGF93] (but see also, e.g., [Fit83, Mas94]). 4 Tableau is available via anonymous FTP at ftp.mrg.dist.unige.it in pub/mrg-systems/tableau/. 5 Kris is available via anonymous FTP at ftp.dfki.uni-sb.de in /pub/tacos/KRIS/. 1 like a phase transition <ref> [MSL92, WH94] </ref>. To our knowledge this is the first time that this phenomenon has been found in a modal logic. The analysis presented in this paper builds on and takes to its conclusion the work preliminarily described in [GS96]. It improves on the previous material in three important aspects. <p> More generally, [AG93] and [Seb94] show how decision procedures for CNF formulas can be modified to work for non-CNF formulas 4 3 The test method The methodology we use generalizes the fixed-clause-length model commonly used in propositional SAT testing (see, e.g., <ref> [MSL92, BB92] </ref>). Let a 3CNF K (m) wff be a conjunction of 3CNF K (m) clauses. Let a 3CNF K (m) clause be a disjunction of three 3CNF K (m) literals, i.e., 3CNF K (m) atoms or their negations. <p> m; (iii) the number of clauses L; (iv) the number of propositional variables N ; (v) a probability value p, stating the mean ratio of the propositional atoms at every level of the wff tree. (Notice that, if we set d = 0, we have the standard 3SAT test method <ref> [MSL92] </ref>.) For fixed N , d, m and p, for increasing values of L, a certain number (100, 500, 1000: : : ) of random 3CNF K (m) wffs are generated, internally sorted, and then given in input to the procedure under test. <p> From these facts we may conjecture (to be verified!) the existence for K (m)/ALC of a phase transition phenomenon, similar to that already known for SAT and other NP-hard problems (see, e.g, <ref> [CKT91, MSL92, WH94] </ref>). The final observation comes from the three sets of median CPU times curves (top row): Ksat outperforms Kris in all the testbeds, independently on the number of variables N , the number of modalities m or the depth d considered.
Reference: [Sch91] <author> K. D. Schild. </author> <title> A correspondence theory for terminological logics: preliminary report. </title> <booktitle> In Proc. of the 12th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 466-471, </pages> <address> Sydney, Australia, </address> <year> 1991. </year>
Reference-contexts: As it is well known, ALC is a notational variant of K (m), that is, K with m modalities <ref> [Sch91] </ref> 2 . The main idea underlying the definition of Ksat is that a decision procedure for satisfiability in K (m) (K (m)-satisfiability) can be defined in terms of a decision procedure for propositional satisfiability (SAT).
Reference: [Seb94] <author> R. Sebastiani. </author> <title> Applying GSAT to Non-Clausal Formulas. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 1 </volume> <pages> 309-314, </pages> <year> 1994. </year> <note> Also DIST-Technical Report 94-0018, DIST, </note> <institution> University of Genova, Italy. </institution>
Reference-contexts: More recently we have also introduced a form of preprocessing | essentially, a recursive removal of duplicate and contradictory subwffs | of the input formulas. 8 A notion of unit clause for non-CNF propositional wffs is given in [AG93]. More generally, [AG93] and <ref> [Seb94] </ref> show how decision procedures for CNF formulas can be modified to work for non-CNF formulas 4 3 The test method The methodology we use generalizes the fixed-clause-length model commonly used in propositional SAT testing (see, e.g., [MSL92, BB92]).
Reference: [SSS91] <author> M. Schmidt-Schau and G. Smolka. </author> <title> Attributive Concept Descriptions with Complements. </title> <journal> Artificial Intelligence, </journal> <volume> 48 </volume> <pages> 1-26, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction The goal of this paper is to describe and thoroughly test a new decision procedure, called Ksat, checking satisfiability in the terminological logic ALC, as defined in <ref> [SSS91] </ref>, comprising Boolean operations on concepts and value restrictions, and not restricted to CNF form 1 . As it is well known, ALC is a notational variant of K (m), that is, K with m modalities [Sch91] 2 .
Reference: [US94] <author> T. E. Uribe and M. E. Stickel. </author> <title> Ordered Binary Decision Diagrams and the Davis-Putnam Procedure. </title> <booktitle> In Proc. of the 1st International Conference on Constraints in Computational Logics, </booktitle> <year> 1994. </year>
Reference-contexts: We have implemented the algorithm described in Figure 1 as a procedure, also called Ksat, implemented in Common Lisp on top of the non-CNF DPLL decision procedure described in [AG93]. DPLL is well known to be one of the fastest decision procedures for SAT (see, e.g., <ref> [BB92, US94] </ref>). However the implementation we use, though relatively fast, is much slower than the state-of-the-art SAT decision procedures (see, e.g., [BB92, ZS94]). The basic version of the algorithm described in Figure 1 is improved in the following way. First, all modal atoms are internally ordered.
Reference: [WH94] <author> C. P. Williams and T. Hogg. </author> <title> Exploiting the deep structure of constraint problems. </title> <journal> Artificial Intelligence, </journal> <volume> 70 </volume> <pages> 73-117, </pages> <year> 1994. </year>
Reference-contexts: other normal and (we think) non normal logics, following the methodology and results presented in [GS94, GSGF93] (but see also, e.g., [Fit83, Mas94]). 4 Tableau is available via anonymous FTP at ftp.mrg.dist.unige.it in pub/mrg-systems/tableau/. 5 Kris is available via anonymous FTP at ftp.dfki.uni-sb.de in /pub/tacos/KRIS/. 1 like a phase transition <ref> [MSL92, WH94] </ref>. To our knowledge this is the first time that this phenomenon has been found in a modal logic. The analysis presented in this paper builds on and takes to its conclusion the work preliminarily described in [GS96]. It improves on the previous material in three important aspects. <p> Therefore, only one instance of = ff ^ :fi is generated. The same applies recursively to K . 2 A propositional wff ' can be seen in terms of a set of constraints for the truth assignments which possibly satisfy it (see, e.g., <ref> [WH94] </ref>). For instance, a clause A 1 _ A 2 constrains every assignment not to set both A 1 and A 2 to F . Unlike tableaux, in SAT procedures branches are cut as soon as they violate some constraint of the wff. <p> From these facts we may conjecture (to be verified!) the existence for K (m)/ALC of a phase transition phenomenon, similar to that already known for SAT and other NP-hard problems (see, e.g, <ref> [CKT91, MSL92, WH94] </ref>). The final observation comes from the three sets of median CPU times curves (top row): Ksat outperforms Kris in all the testbeds, independently on the number of variables N , the number of modalities m or the depth d considered.
Reference: [ZS94] <author> H. Zhang and M. Stickel. </author> <title> Implementing the Davis-Putnam algorithm by tries. </title> <type> Technical report, </type> <institution> University of Iowa, </institution> <month> August </month> <year> 1994. </year> <month> 14 </month>
Reference-contexts: DPLL is well known to be one of the fastest decision procedures for SAT (see, e.g., [BB92, US94]). However the implementation we use, though relatively fast, is much slower than the state-of-the-art SAT decision procedures (see, e.g., <ref> [BB92, ZS94] </ref>). The basic version of the algorithm described in Figure 1 is improved in the following way. First, all modal atoms are internally ordered. This avoids assigning different truth values to permutations of the same sub-wffs.
References-found: 24

