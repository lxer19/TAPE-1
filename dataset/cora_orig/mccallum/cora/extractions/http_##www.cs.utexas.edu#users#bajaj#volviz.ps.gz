URL: http://www.cs.utexas.edu/users/bajaj/volviz.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/bajaj/
Root-URL: 
Email: fanupam,bajaj,drs,mcsg@cs.purdue.edu  
Phone: Tel: 317-494-6531, FAX: 317-494-0739  
Title: Distributed and Collaborative Volume Visualization  
Author: Vinod Anupam Chandrajit Bajaj Daniel Schikore Matthew Schikore 
Keyword: Distributed Volume Rendering, Ray Casting, Collaborative Visualization, Computer  
Note: Supported Cooperative Work, Teleoperation.  
Address: West Lafayette, IN 47907-1398  
Affiliation: Department of Computer Sciences Purdue University  
Abstract: We describe the design and implementation of volume rendering algorithms in a distributed and collaborative software environment. The algorithms use the computational power of a heterogeneous cluster of workstations on a network to produce translucent or shaded images of extremely large volume data sets. Graphics functions are performed using a machine independent 3D graphics and windows library, running on multiple platforms in a heterogeneous environment. We also describe a synchronously conferenced application which we have built to support collaborative visualization, allowing multiple users to share and interact over a volume data set while viewing multiple renderings with independent viewing directions, cutaways, shading parameters, etc. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> V. Anupam and C. Bajaj. </author> <title> Collaborative Multimedia Scientific Design in SHASTRA. </title> <booktitle> In Proc. of the First ACM International Conference on Multimedia, ACM MULTIMEDIA 93, </booktitle> <pages> pages 447-456. </pages> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: In this paper we describe two distributed visualization algorithms and the facilities for collaborative visualization, all implemented on top of the distribution and collaboration mechanisms of an environment called Shastra <ref> [1] </ref>, executing on a networked set of low-cost workstations. 2 Volume Rendering To demonstrate our distributed and collaborative visualization environment, we will use the compute-intensive task of volume visualization. Volume visualization is a very intuitive method for interpretation of volumetric data [6]. <p> The XS graphics and windows library was developed to provide a machine independent interface to routines for 3D graphics. The use of this abstraction provides us with source code level portability across multiple platforms, without compromising on speed or quality of graphics <ref> [1] </ref>. The current suite of libraries supports graphics using X11, SGI/GL, HP/STARBASE and Windows 3.1. 4 Shared Work Spaces Shastra is a collaborative multimedia scientific manipulation environment in which experts in a cooperating group communicate and interact across a network to solve problems. <p> In addition, the environment supports many modes of synchronous multi-user interaction (Collaboration). It offers facilities for starting and terminating collaborative sessions, and for joining or leaving them. The infrastructure is described in detail in <ref> [1] </ref>. 4.1 The Distribution Infrastructure All tools designed to run in the Shastra environment have certain architectural features which make them amenable to inter-operation. A typical tool has an application specific core, the Application Engine, which implements all the functionality offered by the toolkit or service. <p> The baton passing facility of the system can be used to take turns to adjust visualization parameters. Alternately, designers can use the auxiliary communication channels like audio, video, and text by initiating Phone, Video or Talk sessions <ref> [1] </ref> to regulate access, and for arbitration.
Reference: [2] <author> B. Collins. </author> <title> Data Visualization. </title> <editor> In R. Martin, editor, </editor> <booktitle> Directions in Geometric Computing, </booktitle> <pages> pages 31 - 80. </pages> <publisher> Information Geometers Press, </publisher> <year> 1993. </year>
Reference-contexts: Volume visualization is a very intuitive method for interpretation of volumetric data [6]. Measurement-based volumetric data sets arise from sampling, for example medical imaging (Computed Tomography - CT, Magnetic Resonance Imaging - MRI, Laser Surface Imaging - LSI), geological and geophysical measurements, 3D scanning, etc <ref> [2] </ref>. Synthetic volume data sets are generated by computer based simulation and modelling meteorological and thermodynamic simulations, finite element stress analyses, computational fluid dynamics, molecular modelling, etc.
Reference: [3] <author> M. Gerald-Yamasaki. </author> <title> Cooperative Visualization of Computational Fluid Dynamics. </title> <journal> Computer Graphics Forum, </journal> <pages> pages 12(3) 497-508, </pages> <year> 1993. </year>
Reference-contexts: An environment for cooperative visualization of computational fluid dynamics is described in <ref> [3] </ref>. The Shastra environment provides facilities for media-rich interaction over the context of shared visualizations. Poly is a 3D rendering and visualization tool in the Shastra environment. New Shastra toolkits use Poly as their 3D graphics interface, since it encapsulates graphical object manipulation, rendering and visualization functionality.
Reference: [4] <author> W. M. Hsu. </author> <title> Segmented ray casting for data parallel volume rendering. </title> <booktitle> 1993 Parallel Rendering Symposium, </booktitle> <pages> pages 7-14, </pages> <year> 1993. </year>
Reference-contexts: Volume data sets are common with N=128 and sometimes as large as N=512, which clearly demonstrates the compute-intensive nature of the task. The problem of visualizing such large volume data sets interactively has frequently been addressed by using large multi-processor parallel and vector parallel architectures <ref> [4, 10] </ref>. The volume visualization system we describe operates within a network of low-cost workstations, and provides several ways of viewing volumetric data cross sectional viewing, isosurface reconstruction, and direct volume rendering using ray casting. It also provides facilities for interactive control and specification of the visualization process.
Reference: [5] <author> J. Kajiya and B. </author> <title> Vol Herzen. Ray Tracing Volume Densities. </title> <journal> Computer Graphics, </journal> <volume> 18 </volume> <pages> 165-174, </pages> <year> 1984. </year>
Reference-contexts: image to determine which objects in the scene contribute to the color of the pixel. 2 2.1 Ray Casting Ray casting is a direct volume rendering algorithm in which sight rays are cast from the viewing plane through the volume, accumulating the effects of sampled data encountered along their paths <ref> [11, 8, 5, 9, 12] </ref>. The `tracing' stops based on some termination criteria, for example when opaque or visible voxels are encountered, or when some accumulation threshold is achieved. The opacity accumulation is based on a classification of the material giving rise to the data values [11, 12].
Reference: [6] <author> A. Kaufman. </author> <title> Volume Visualization. </title> <publisher> IEEE Computer Society Press, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: Volume visualization is a very intuitive method for interpretation of volumetric data <ref> [6] </ref>. Measurement-based volumetric data sets arise from sampling, for example medical imaging (Computed Tomography - CT, Magnetic Resonance Imaging - MRI, Laser Surface Imaging - LSI), geological and geophysical measurements, 3D scanning, etc [2].
Reference: [7] <author> Gudrun J. Klinker. </author> <title> An Environment for Telecollaborative Data Exploration. </title> <booktitle> In Proceedings of IEEE Visualization '93, </booktitle> <pages> pages 110-117, </pages> <year> 1993. </year>
Reference-contexts: It also implements the Shastra communication protocol for peer to peer communication. The connected application-object interfaces of Shastra tools comprise a distributed virtual machine over which parallel algorithms are implemented, and synchronous conferences are conducted. 4.2 A Collaborative Visualization Tool A telecollaborative data exploration environment is described in <ref> [7] </ref>, where users share images and control their presentation. An environment for cooperative visualization of computational fluid dynamics is described in [3]. The Shastra environment provides facilities for media-rich interaction over the context of shared visualizations. Poly is a 3D rendering and visualization tool in the Shastra environment.
Reference: [8] <author> L. Harris, R. Robb, T. Yuen and E. Ritman. </author> <title> Non-invasive Numerical Dissection and Display of Anatomic Features. In Recent and Future Developments in Medical Imaging. </title> <booktitle> SPIE, </booktitle> <year> 1987. </year>
Reference-contexts: image to determine which objects in the scene contribute to the color of the pixel. 2 2.1 Ray Casting Ray casting is a direct volume rendering algorithm in which sight rays are cast from the viewing plane through the volume, accumulating the effects of sampled data encountered along their paths <ref> [11, 8, 5, 9, 12] </ref>. The `tracing' stops based on some termination criteria, for example when opaque or visible voxels are encountered, or when some accumulation threshold is achieved. The opacity accumulation is based on a classification of the material giving rise to the data values [11, 12].
Reference: [9] <author> M. Levoy. </author> <title> Efficient ray tracing of volume data. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 9(3) </volume> <pages> 245-261, </pages> <year> 1990. </year>
Reference-contexts: image to determine which objects in the scene contribute to the color of the pixel. 2 2.1 Ray Casting Ray casting is a direct volume rendering algorithm in which sight rays are cast from the viewing plane through the volume, accumulating the effects of sampled data encountered along their paths <ref> [11, 8, 5, 9, 12] </ref>. The `tracing' stops based on some termination criteria, for example when opaque or visible voxels are encountered, or when some accumulation threshold is achieved. The opacity accumulation is based on a classification of the material giving rise to the data values [11, 12].
Reference: [10] <author> K-L Ma, J. S. Painter, C. D. Hansen, and M. F. Krogh. </author> <title> A data distributed, parallel algorithm for ray-traced volume rendering. </title> <booktitle> 1993 Parallel Rendering Symposium, </booktitle> <pages> pages 15-22, </pages> <year> 1993. </year>
Reference-contexts: Volume data sets are common with N=128 and sometimes as large as N=512, which clearly demonstrates the compute-intensive nature of the task. The problem of visualizing such large volume data sets interactively has frequently been addressed by using large multi-processor parallel and vector parallel architectures <ref> [4, 10] </ref>. The volume visualization system we describe operates within a network of low-cost workstations, and provides several ways of viewing volumetric data cross sectional viewing, isosurface reconstruction, and direct volume rendering using ray casting. It also provides facilities for interactive control and specification of the visualization process.
Reference: [11] <author> R. Drebin, L. Carpenter and P. Hanrahan. </author> <title> Volume Rendering. </title> <journal> Computer Graphics, </journal> <volume> 22 </volume> <pages> 65-74, </pages> <year> 1988. </year>
Reference-contexts: image to determine which objects in the scene contribute to the color of the pixel. 2 2.1 Ray Casting Ray casting is a direct volume rendering algorithm in which sight rays are cast from the viewing plane through the volume, accumulating the effects of sampled data encountered along their paths <ref> [11, 8, 5, 9, 12] </ref>. The `tracing' stops based on some termination criteria, for example when opaque or visible voxels are encountered, or when some accumulation threshold is achieved. The opacity accumulation is based on a classification of the material giving rise to the data values [11, 12]. <p> The `tracing' stops based on some termination criteria, for example when opaque or visible voxels are encountered, or when some accumulation threshold is achieved. The opacity accumulation is based on a classification of the material giving rise to the data values <ref> [11, 12] </ref>. The basic process is as follows: For each pixel p in the final image we compute the pixel color in the following manner. There exists a prespecified opacity value ff with each voxel. 1. Compute the 3D world space line (ray) which maps to this pixel. 2.
Reference: [12] <author> P. Sabella. </author> <title> A Rendering Algorithm fro Visualizing 3D Scalar Fields. </title> <journal> Computer Graphics, </journal> <volume> 22 </volume> <pages> 51-58, </pages> <year> 1988. </year>
Reference-contexts: image to determine which objects in the scene contribute to the color of the pixel. 2 2.1 Ray Casting Ray casting is a direct volume rendering algorithm in which sight rays are cast from the viewing plane through the volume, accumulating the effects of sampled data encountered along their paths <ref> [11, 8, 5, 9, 12] </ref>. The `tracing' stops based on some termination criteria, for example when opaque or visible voxels are encountered, or when some accumulation threshold is achieved. The opacity accumulation is based on a classification of the material giving rise to the data values [11, 12]. <p> The `tracing' stops based on some termination criteria, for example when opaque or visible voxels are encountered, or when some accumulation threshold is achieved. The opacity accumulation is based on a classification of the material giving rise to the data values <ref> [11, 12] </ref>. The basic process is as follows: For each pixel p in the final image we compute the pixel color in the following manner. There exists a prespecified opacity value ff with each voxel. 1. Compute the 3D world space line (ray) which maps to this pixel. 2.
References-found: 12

