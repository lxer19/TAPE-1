URL: http://www.cs.virginia.edu/~ryall/cs851/kr-uist97.ps
Refering-URL: http://www.cs.virginia.edu/~ryall/cs851/
Root-URL: http://www.cs.virginia.edu
Email: ryall@cs.virginia.edu  marks@merl.com  shieber@eecs.harvard.edu  
Phone: +1-804-982-2200  +1-617-621-7534  +1-617-495-2344  
Title: An Interactive Constraint-Based System for Drawing Graphs  
Author: Kathy Ryall Thornton Hall Joe Marks MERL Stuart Shieber 
Keyword: Graph drawing, constraint-based layout, drawing tools, collaborative interfaces.  
Address: Charlottesville, VA 22903  Cambridge, MA 02139  Cambridge, MA 02138  
Affiliation: University of Virginia  201 Broadway  Engineering Sciences Lab Harvard University  
Abstract: The glide system is an interactive constraint-based editor for drawing small- and medium-sized graphs (50 nodes or fewer) that organizes the interaction in a more collaborative manner than in previous systems. Its distinguishing features are a vocabulary of specialized constraints for graph drawing, and a simple constraint-satisfaction mechanism that allows the user to manipulate the drawing while the constraints are active. These features result in a graph-drawing editor that is superior in many ways to those based on more general and powerful constraint-satisfaction methods. OVERVIEW The dominant metaphor in the design of human-computer interaction is the view of computer as servitor. Although interfaces based on this view have proved useful in very many settings, qualitative progress in the area of human-computer interaction may await the ability to interact with the computer as collaborator. We have built a system, called "glide" (Graph Layout Interactive Diagram Editor), for interactive graph layout, 1 that organizes the interaction in a more collaborative manner than in previous graph-drawing systems. The glide system is a constraint-based drawing editor designed specifically to enable users to easily produce small and medium-sized diagrams. The user is responsible for 1 By "graph" we mean the node-edge network diagrams widely 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Ronald Baecker and Ian Small. </author> <title> Animation at the interface. In Brenda Laurel, editor, The Art of Human-Computer Interface Design. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference-contexts: The simulation of the physical model is animated continuously, thus providing useful visual feedback to the user <ref> [1, 16] </ref>. Although a weak mechanism for satisfying constraints, energy minimization through physical simulation handles over-constrained systems gracefully, and provides an easily understood metaphor for the user. 2 These VOFs have been incorporated previously in two batch systems for graph layout [4, 9].
Reference: 2. <author> Giuseppe Di Battista, Peter Eades, Roberto Tamassia, and Ioannis Tollis. </author> <title> Algorithms for drawing graphs: an annotated bibliography. Computational Geometry: </title> <journal> Theory and Applications, </journal> <volume> 4 </volume> <pages> 235-282, </pages> <year> 1994. </year>
Reference-contexts: 1 By "graph" we mean the node-edge network diagrams widely used to visualize binary relations, and not arbitrary informational graphics. There is a considerable literature on graph-drawing algorithms, but it primarily concerns noninteractive techniques for automatic graph layout <ref> [2, 3, 11, 12, 15] </ref>. an approximate layout of the nodes, and for specifying declaratively the overall visual organization of the diagram.
Reference: 3. <editor> Franz J. Brandenburg, editor. </editor> <booktitle> Proceedings of the Symposium on Graph Drawing, volume 1027 of Lecture Notes on Computer Science. </booktitle> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: 1 By "graph" we mean the node-edge network diagrams widely used to visualize binary relations, and not arbitrary informational graphics. There is a considerable literature on graph-drawing algorithms, but it primarily concerns noninteractive techniques for automatic graph layout <ref> [2, 3, 11, 12, 15] </ref>. an approximate layout of the nodes, and for specifying declaratively the overall visual organization of the diagram.
Reference: 4. <author> Ed Dengler, Mark Friedell, and Joe Marks. </author> <title> Constraint-driven diagram layout. </title> <booktitle> In Proceedings of the 1993 IEEE Symposium on Visual Languages, </booktitle> <pages> pages 330-335, </pages> <address> Bergen, Norway, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Although a weak mechanism for satisfying constraints, energy minimization through physical simulation handles over-constrained systems gracefully, and provides an easily understood metaphor for the user. 2 These VOFs have been incorporated previously in two batch systems for graph layout <ref> [4, 9] </ref>. The present system is the first to allow interactive specification and manipulation of persistent high-level VOFs such as these. In related work, Henry and Hudson have described an interactive graph-layout system that uses a different set of nonpersistent layout operators [7]. <p> In the glide system (as in <ref> [4] </ref>), a more general notion of spring force is used. Constraints on graphs fall into two main classes, syntactic and semantic. Syntactic constraints are universal requirements necessary for a diagram to be well-formed. The glide system respects two such constraints (see * Node-node overlap: Two nodes should not overlap. <p> ACKNOWLEDGMENTS This work was supported by the National Science Foundation <ref> (Grant Numbers IRI-9350192 and IRI-9618848) </ref> and by MERL A Mitsubishi Electric Research Laboratory.
Reference: 5. <author> Peter Eades. </author> <title> A heuristic for graph drawing. </title> <journal> Con-gressus Numerantium, </journal> <volume> 42 </volume> <pages> 149-160, </pages> <year> 1984. </year>
Reference-contexts: The user may also apply force directly to a node by dragging it with the mouse. The nodes, which are modeled as point masses, are moved into minimum-energy configurations by a physical simulation based on a generalized force-directed algorithm <ref> [5] </ref>, whose behavior is easily appreciated and influenced by the user. The simulation of the physical model is animated continuously, thus providing useful visual feedback to the user [1, 16]. <p> Constraint Formulation The fundamental low-level constraint mechanism is essentially a spring that obeys Hooke's Law; graph nodes move according to the spring-like forces attached to them. 5 A mass-spring model for graph drawing was first proposed by Eades <ref> [5] </ref>, but in his and most subsequent systems, the spring forces correspond to topological or geometric properties of the graph. In the glide system (as in [4]), a more general notion of spring force is used. Constraints on graphs fall into two main classes, syntactic and semantic.
Reference: 6. <author> Michael Gleicher and Andrew Witkin. </author> <title> Drawing with constraints. </title> <journal> Visual Computer, </journal> <volume> 11 </volume> <pages> 39-51, </pages> <year> 1994. </year>
Reference-contexts: The physical simulation continually updates the position of the nodes in the layout. Although they are not represented graphically, the forces on a node become apparent to users through observation and manipulation. CONCLUSIONS Constraint-based techniques have been utilized in numerous drawing editors, e.g., <ref> [6, 8, 10, 13, 14] </ref>, but they have so far enjoyed only limited success in this role. <p> Glide improves on general constraint-based systems by providing a specialized set of constraints, 7 The use of hidden objects to control constraint-based layout has been proposed previously. See, for instance, the discussion of alignment objects by Gleicher and Witkin <ref> [6] </ref>. 8 Exaggerated forms of the VOF indicators are shown in Figures 4 through 6. In the actual system, the indicators are depicted with more visual subtlety. simple mechanisms for a user to add and delete constraints, and an intuitive method for solving the constraints.
Reference: 7. <author> Tyson R. Henry and Scott E. Hudson. </author> <title> Interactive graph layout. </title> <booktitle> In Proceedings of UIST '91, </booktitle> <pages> pages 55-64, </pages> <address> Hilton Head, SC, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: The present system is the first to allow interactive specification and manipulation of persistent high-level VOFs such as these. In related work, Henry and Hudson have described an interactive graph-layout system that uses a different set of nonpersistent layout operators <ref> [7] </ref>. In glide, user manipulations are useful not only for exploring design alternatives but for providing "advice" to the system when it finds itself in a local optimum. Figure 2 is a simple example. In Figure 2 (a), we see three nodes, connected by two edges.
Reference: 8. <author> Allan Heydon and Greg Nelson. </author> <title> The Juno2 constraint-based drawing editor. </title> <type> Technical Report 131a, </type> <institution> Digital SRC, </institution> <address> Palo Alto, CA, </address> <year> 1994. </year>
Reference-contexts: The physical simulation continually updates the position of the nodes in the layout. Although they are not represented graphically, the forces on a node become apparent to users through observation and manipulation. CONCLUSIONS Constraint-based techniques have been utilized in numerous drawing editors, e.g., <ref> [6, 8, 10, 13, 14] </ref>, but they have so far enjoyed only limited success in this role.
Reference: 9. <author> Corey Kosak, Joe Marks, and Stuart M. Shieber. </author> <title> Automating the layout of network diagrams with specified visual organization. </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> 24(3) </volume> <pages> 44-454, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: Although a weak mechanism for satisfying constraints, energy minimization through physical simulation handles over-constrained systems gracefully, and provides an easily understood metaphor for the user. 2 These VOFs have been incorporated previously in two batch systems for graph layout <ref> [4, 9] </ref>. The present system is the first to allow interactive specification and manipulation of persistent high-level VOFs such as these. In related work, Henry and Hudson have described an interactive graph-layout system that uses a different set of nonpersistent layout operators [7]. <p> ACKNOWLEDGMENTS This work was supported by the National Science Foundation <ref> (Grant Numbers IRI-9350192 and IRI-9618848) </ref> and by MERL A Mitsubishi Electric Research Laboratory.
Reference: 10. <author> Greg Nelson. Juno, </author> <title> a constraint based graphics system. </title> <booktitle> Computer Graphics (Proceedings of SIG-GRAPH '85), </booktitle> <volume> 19(3) </volume> <pages> 235-243, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: The physical simulation continually updates the position of the nodes in the layout. Although they are not represented graphically, the forces on a node become apparent to users through observation and manipulation. CONCLUSIONS Constraint-based techniques have been utilized in numerous drawing editors, e.g., <ref> [6, 8, 10, 13, 14] </ref>, but they have so far enjoyed only limited success in this role.
Reference: 11. <author> Stephen North, </author> <title> editor. </title> <booktitle> Proceedings of the Symposium on Graph Drawing, volume 1190 of Lecture Notes on Computer Science. </booktitle> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: 1 By "graph" we mean the node-edge network diagrams widely used to visualize binary relations, and not arbitrary informational graphics. There is a considerable literature on graph-drawing algorithms, but it primarily concerns noninteractive techniques for automatic graph layout <ref> [2, 3, 11, 12, 15] </ref>. an approximate layout of the nodes, and for specifying declaratively the overall visual organization of the diagram.
Reference: 12. <author> Aaron Scott. </author> <title> A survey of graph drawing systems. </title> <type> Technical Report 95-6, </type> <institution> University of Newcastle, Australia, </institution> <year> 1994. </year>
Reference-contexts: 1 By "graph" we mean the node-edge network diagrams widely used to visualize binary relations, and not arbitrary informational graphics. There is a considerable literature on graph-drawing algorithms, but it primarily concerns noninteractive techniques for automatic graph layout <ref> [2, 3, 11, 12, 15] </ref>. an approximate layout of the nodes, and for specifying declaratively the overall visual organization of the diagram.
Reference: 13. <author> Steve Sistare. </author> <title> Interaction techniques in constraint-based geometric modeling. </title> <booktitle> In Proceedings of Graphics Interface '91, </booktitle> <pages> pages 85-92, </pages> <address> Calgary, Alberta, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: The physical simulation continually updates the position of the nodes in the layout. Although they are not represented graphically, the forces on a node become apparent to users through observation and manipulation. CONCLUSIONS Constraint-based techniques have been utilized in numerous drawing editors, e.g., <ref> [6, 8, 10, 13, 14] </ref>, but they have so far enjoyed only limited success in this role.
Reference: 14. <author> Ivan Sutherland. </author> <title> Sketchpad: a man-machine graphical communication system. </title> <type> PhD thesis, </type> <institution> MIT, </institution> <year> 1963. </year>
Reference-contexts: The physical simulation continually updates the position of the nodes in the layout. Although they are not represented graphically, the forces on a node become apparent to users through observation and manipulation. CONCLUSIONS Constraint-based techniques have been utilized in numerous drawing editors, e.g., <ref> [6, 8, 10, 13, 14] </ref>, but they have so far enjoyed only limited success in this role.
Reference: 15. <author> Roberto Tamassia and Ioannis G. Tollis, </author> <title> editors. </title> <booktitle> Proceedings of the Symposium on Graph Drawing, volume 894 of Lecture Notes on Computer Science. </booktitle> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: 1 By "graph" we mean the node-edge network diagrams widely used to visualize binary relations, and not arbitrary informational graphics. There is a considerable literature on graph-drawing algorithms, but it primarily concerns noninteractive techniques for automatic graph layout <ref> [2, 3, 11, 12, 15] </ref>. an approximate layout of the nodes, and for specifying declaratively the overall visual organization of the diagram.
Reference: 16. <author> Bruce H. Thomas and Paul Calder. </author> <title> Animating direct manipulation interfaces. </title> <booktitle> In Proceedings of UIST '95, </booktitle> <pages> pages 3-12, </pages> <address> Pittsburgh, PA, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: The simulation of the physical model is animated continuously, thus providing useful visual feedback to the user <ref> [1, 16] </ref>. Although a weak mechanism for satisfying constraints, energy minimization through physical simulation handles over-constrained systems gracefully, and provides an easily understood metaphor for the user. 2 These VOFs have been incorporated previously in two batch systems for graph layout [4, 9].
References-found: 16

