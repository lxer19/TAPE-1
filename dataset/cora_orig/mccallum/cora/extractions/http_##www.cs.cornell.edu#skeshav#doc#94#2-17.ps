URL: http://www.cs.cornell.edu/skeshav/doc/94/2-17.ps
Refering-URL: http://www.cs.cornell.edu/skeshav/papers.html
Root-URL: 
Email: keshav@research.att.com  
Title: Packet-Pair Flow Control  
Author: Srinivasan Keshav 
Address: 600 Mountain Avenue, Murray Hill, NJ 07974, USA  
Affiliation: AT&T Bell Laboratories  
Abstract: This paper presents the packet-pair rate-based feedback flow control scheme. This scheme is designed for networks where individual connections do not reserve bandwidth and for the available bitrate (best-effort) component of integrated networks. We assume a round-robin-like queue service discipline in the output queues of the network's switches, and propose a linear stochastic model for a single conversation in a network of such switches. These model motivates the Packet-Pair rate probing technique, which forms the basis for provably stable discrete and continuous time rate-based flow control schemes. We present a novel state estimation scheme based on fuzzy logic. We then address several practical concerns: dealing with system startup, retransmission and timeout strategy, and dynamic setpoint probing. We present a finite state machine as well as source code for a model implementation. The dynamics of a single source, the interactions of multiple sources, and the behavior of packet-pair sources in a variety of benchmark scenarios are evaluated by means of detailed simulations. We close with some remarks about possible extensions to packet-pair, limitations of this work, and an outline of related work. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> C. Agnew, </author> <title> Dynamic Modeling and Control of Congestion-prone Systems, </title> <journal> Operations Research 24, </journal> <volume> 3 (1976), </volume> <pages> 400-419. </pages>
Reference-contexts: We also make the fluid approximation <ref> [1] </ref>, so packet boundaries are ignored, and the data flow is like that of a fluid in a hydraulic system. This approximation is commonly used [3, 6, 40, 55], and both analysis [43] and simulations show that the approximation is a close one, particularly when the bandwidth-delay product is large. <p> Optimal Flow Control A control theoretic approach to individual optimal flow control was described originally by Agnew <ref> [1] </ref> and since extended by Filipiak [17] and Tipper et al [55]. In their approach, a conversation is modeled by a first order differential equation, using the fluid approximation.
Reference: 2. <author> B. D. O. Anderson and J. B. Moore, </author> <title> Linear Quadratic Methods, </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: In this section, we present the theoretical framework for the design, and in Section 9 we present validation by extensive simulation. 4.1. Design Strategy The design strategy for the flow control mechanism is based upon the Separation Theorem <ref> [2] </ref>. Informally, the theorem states that for a linear stochastic system where an observer estimates the system state and then uses this estimate to do control, the eigenvalues of the state estimator and the controller are separable.
Reference: 3. <author> D. Anick, D. Mitra and M. M. Sondhi, </author> <title> Stochastic Theory of a Data-handling System with Multiple Sources, </title> <journal> Bell System Technical Journal 61 (1982), </journal> <pages> 1871-1894. </pages>
Reference-contexts: We also make the fluid approximation [1], so packet boundaries are ignored, and the data flow is like that of a fluid in a hydraulic system. This approximation is commonly used <ref> [3, 6, 40, 55] </ref>, and both analysis [43] and simulations show that the approximation is a close one, particularly when the bandwidth-delay product is large. Let us assume that the input rate l is held fixed for some duration J.
Reference: 4. <author> L. Benmohamed and S. M. Meerkov, </author> <title> Feedback Control of Congestion in Store-and-forward Net works: the Case of a Single Congested Node, </title> <journal> ACM/IEEE Trans. </journal> <note> on Networking (to appear), </note> <year> 1994. </year>
Reference-contexts: Since the entire control is based on this equation, we doubt the correctness of his approach. Theoretical analyses of rate-based flow control for generic schemes have been done by Benmohamed and Meerkov <ref> [4] </ref> and by Fendick and Rodrigues [16]. - 41 - 12.3.
Reference: 5. <author> K. Bharath-Kumar and J. M. Jaffe, </author> <title> A New Approach to Performance-Oriented Flow Control, </title> <journal> IEEE Trans. on Communication COM-29, </journal> <month> 4 (April </month> <year> 1981), </year> <pages> 427-435. </pages>
Reference-contexts: Studies of Ensembles of Controlled Systems One body of work has considered the dynamics of a system where users update their sending rate either synchronously or asynchronously in response to measured round trip delays, or explicit congestion signals, for example in References <ref> [5, 7, 8, 13, 52] </ref>. These approaches typically assume Poisson sources, availability of global information, a simple flow update rule, and exponential servers. We do not make such assumptions.
Reference: 6. <author> J. Bolot and A. U. Shankar, </author> <title> Analysis of a Fluid Approximation to Flow Control Dynamics, </title> <booktitle> Proc. IEEE INFOCOM '92, </booktitle> <year> 1992, </year> <pages> 2398-2407. </pages>
Reference-contexts: We also make the fluid approximation [1], so packet boundaries are ignored, and the data flow is like that of a fluid in a hydraulic system. This approximation is commonly used <ref> [3, 6, 40, 55] </ref>, and both analysis [43] and simulations show that the approximation is a close one, particularly when the bandwidth-delay product is large. Let us assume that the input rate l is held fixed for some duration J. <p> Dynamic window schemes have been mathematically analyzed by Bolot <ref> [6] </ref>, Fendick, Rodrigues and Weiss [15] and Mukherjee and Strikwerda [45]. These analyses give some insight into the performance of generic dynamic window schemes. 12.2. Rate-based Flow Control Several rate-based flow control schemes have been proposed in the literature.
Reference: 7. <author> A. D. Bovopoulos and A. A. Lazar, </author> <title> Decentralized Algorithms for Optimal Flow Control, </title> <booktitle> Proc. 25th Allerton Conference on Communications Control and Computing, </booktitle> <month> October </month> <year> 1987. </year> <institution> University of Illi nois, Urbana-Champaign. </institution>
Reference-contexts: Studies of Ensembles of Controlled Systems One body of work has considered the dynamics of a system where users update their sending rate either synchronously or asynchronously in response to measured round trip delays, or explicit congestion signals, for example in References <ref> [5, 7, 8, 13, 52] </ref>. These approaches typically assume Poisson sources, availability of global information, a simple flow update rule, and exponential servers. We do not make such assumptions.
Reference: 8. <author> A. D. Bovopoulos and A. A. Lazar, </author> <title> Asynchronous Algorithms for Optimal Flow Control of BCMP Networks, </title> <type> Tech. </type> <institution> Rpt. WUCS-89-10, Washington University, </institution> <address> St. Louis, MO, </address> <month> February </month> <year> 1989. </year>
Reference-contexts: Studies of Ensembles of Controlled Systems One body of work has considered the dynamics of a system where users update their sending rate either synchronously or asynchronously in response to measured round trip delays, or explicit congestion signals, for example in References <ref> [5, 7, 8, 13, 52] </ref>. These approaches typically assume Poisson sources, availability of global information, a simple flow update rule, and exponential servers. We do not make such assumptions.
Reference: 9. <author> D. W. Browning, </author> <title> Flow Control in High-Speed Communication Networks, </title> <journal> IEEE Trans. Comm. </journal> <note> (to appear), </note> <year> 1994. </year>
Reference-contexts: Further, they have not shown that their scheme is stable, nor have they taken implementation considerations into account. Browning has proposed a scheme based on the concept of disturbance accomodation control <ref> [9] </ref>. His scheme derives a control law very similar to that we derive in Section 4, thus validating some of our work. However, he has not done detailed simulations to confirm his control law. Park has proposed the 'Warp' congestion control scheme [47].
Reference: 10. <author> R. Caceres, P. B. Danzig, S. Jamin and D. J. Mitzel, </author> <title> Characteristics of Application Conversations in TCP/IP Wide-Area Internetworks, </title> <booktitle> Proc. ACM SigComm 1991, </booktitle> <month> September </month> <year> 1991. </year>
Reference-contexts: Without loss of generality, we assume that resource contention occurs at the destination LAN. The data packet size is 500 bytes (at the transport layer), and the ack packet is assumed to be 40 bytes long. These correspond to mean packet sizes observed on the Internet <ref> [10] </ref>. The source LAN speed is assumed to be the same as the WAN link speed, and the destination LAN speed is assumed to be one-tenth of the WAN link speed.
Reference: 11. <author> D. D. Clark, M. L. Lambert and L. Zhang, NETBLT: </author> <title> A Bulk Data Transfer Protocol, RFC-998, Net work Working Group, </title> <month> March </month> <year> 1987. </year>
Reference-contexts: These analyses give some insight into the performance of generic dynamic window schemes. 12.2. Rate-based Flow Control Several rate-based flow control schemes have been proposed in the literature. One of the earliest scheme was for NETBLT <ref> [11] </ref>, which was based on heuristics, and not thoroughly studied. In NETBLT, the transmitter sends data at some rate for a few round trip times, and the receiver clocks the data to see if it was received at that rate.
Reference: 12. <author> A. Demers, S. Keshav and S. Shenker, </author> <title> Analysis and Simulation of a Fair Queueing Algorithm, </title> <journal> Journal of Internetworking Research and Experience, </journal> <month> September </month> <year> 1990, </year> <pages> 3-26;. </pages> <note> also Proc. ACM Sig Comm, Sept. 1989, pp 1-12.. </note>
Reference-contexts: In this paper, we present a scheme for congestion control of the ABR component of integrated networks which is equally applicable to existing datagram-oriented networks. Congestion control for ABR traffic involves packet (or cell) schedulers at queuing points and the flow control protocol at traffic sources <ref> [12, 34] </ref>. We first consider the role of packet schedulers in congestion control. Recent work has shown that there is a strong motivation to use round-robin-like packet sched-ulers for bursty data traffic, since this provides several advantages over the traditional first-come-first-served discipline [12, 24, 34, 44, 46]. <p> We first consider the role of packet schedulers in congestion control. Recent work has shown that there is a strong motivation to use round-robin-like packet sched-ulers for bursty data traffic, since this provides several advantages over the traditional first-come-first-served discipline <ref> [12, 24, 34, 44, 46] </ref>. Round-robin service automatically enforces a min-max fair allocation of resources [20]. It also automatically polices sources, since a source sending faster than its fair share is the one that will be subjected to packet or cell loss. <p> This can be done by tagging packets with the completion time had the service been head-of-line processor sharing, and then serving packets in increasing order of their tags, as in Fair Queueing <ref> [12] </ref>. It can be shown that Fair Queueing emulates head-of-line processor sharing asymptotically with conversation length [21, 22]. Connections may be allocated unequal bandwidth shares by varying the weights, as is done in the Weighted Fair Queueing discipline. <p> The network model (and hence the flow control scheme) described in this paper is adequate to describe variants of round-robin service where the packet size per connection is fixed (as in ATM networks), or service is weighted to reflect the packet size - 3 - (as with Fair Queueing <ref> [12] </ref>, Weighted Fair Queueing, Packetized Generalized Processor Sharing [46], and Virtual Clock [65]). <p> Benchmark 4: Fairness Previous studies of window flow control performance have observed that connections on a longer delay path get a smaller share of the bandwidth of the bottleneck (for example, see <ref> [12] </ref>). This ``unfairness'' increases the file transfer times for traffic streams going over longer paths. In this experiment the fairness in bandwidth allocations is measured. The configuration used in this experiment is shown in Figure 25.
Reference: 13. <author> C. Douligeris and R. Majumdar, </author> <title> User Optimal Flow Control in an Integrated Environment, </title> <booktitle> Proc. of the Indo-US Workshop on Systems and Signals, </booktitle> <month> January </month> <year> 1988. </year> <title> Bangalore, </title> <address> India. </address>
Reference-contexts: Studies of Ensembles of Controlled Systems One body of work has considered the dynamics of a system where users update their sending rate either synchronously or asynchronously in response to measured round trip delays, or explicit congestion signals, for example in References <ref> [5, 7, 8, 13, 52] </ref>. These approaches typically assume Poisson sources, availability of global information, a simple flow update rule, and exponential servers. We do not make such assumptions.
Reference: 14. <author> A. E. Ekberg, D. T. Luan and D. M. Lucantoni, </author> <title> Bandwidth Management: A Congestion Control Strategy for Broadband Packet Networks: Characterizing the Throughput-Burstiness Filter, </title> <booktitle> Proc. ITC - 43 - Specialist Seminar, </booktitle> <address> Adelaide, </address> <year> 1989, </year> <note> paper no. 4.4. </note>
Reference-contexts: The exact value chosen for a controls the rise time of the system, and for adequate responsiveness, it should not be too small. Simulations indicate that a value of 0.9 is a good compromise between responsiveness and instability. Similar studies are mentioned in <ref> [14] </ref>. 4.3. Controller Design: Continuous Time Control This section describes how the frequency of control can be increased by using information about the propagation delay. Note that n b , the estimate for the number of packets in the bottleneck queue, plays a critical role in the control system.
Reference: 15. <author> K. W. Fendick, M. A. Rodrigues and A. Weiss, </author> <title> Analysis of a Rate-Based Control Strategy with Delayed Feedback, </title> <booktitle> Proc. ACM SigComm '92, </booktitle> <year> 1992. </year>
Reference-contexts: Dynamic window schemes have been mathematically analyzed by Bolot [6], Fendick, Rodrigues and Weiss <ref> [15] </ref> and Mukherjee and Strikwerda [45]. These analyses give some insight into the performance of generic dynamic window schemes. 12.2. Rate-based Flow Control Several rate-based flow control schemes have been proposed in the literature.
Reference: 16. <author> K. W. Fendick and M. A. Rodrigues, </author> <title> An Adaptive Framework for Dynamic Access to Bandwidth at High Speeds, </title> <booktitle> Proc. ACM SigComm '93, </booktitle> <year> 1993. </year>
Reference-contexts: Since the entire control is based on this equation, we doubt the correctness of his approach. Theoretical analyses of rate-based flow control for generic schemes have been done by Benmohamed and Meerkov [4] and by Fendick and Rodrigues <ref> [16] </ref>. - 41 - 12.3.
Reference: 17. <author> J. Filipiak, </author> <title> Modelling and Control of Dynamic Flows in Communication Networks, </title> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: This makes the control task relatively straightforward. Linearization is possible because RAS service isolates a conversation's service from the details of the arrival pattern of cross traffic. For FCFS service, there is no such isolation, and the associated non-linear control is complex <ref> [17, 55] </ref>. - 4 - 3. Packet-pair probing SOURCE SERVER 1 BOTTLENECK SINK RTT rate estimate d i l bottleneck rate The packet-pair mechanism is to send all data in the form of back-to-back pairs, and then estimate the bottleneck service rate from the spacing of the acknowledgements (Figure 1). <p> Optimal Flow Control A control theoretic approach to individual optimal flow control was described originally by Agnew [1] and since extended by Filipiak <ref> [17] </ref> and Tipper et al [55]. In their approach, a conversation is modeled by a first order differential equation, using the fluid approximation. The modeling parameters are tuned so that, in the steady state, the solution of the differential equation and the solution of a corresponding queueing model agree.
Reference: 18. <author> A. G. Fraser, </author> <title> Designing a Public Data Network, </title> <journal> IEEE Communications Magazine, </journal> <month> October </month> <year> 1991, </year> <pages> 31-35. </pages>
Reference-contexts: It also automatically polices sources, since a source sending faster than its fair share is the one that will be subjected to packet or cell loss. This ensures that well-behaved users are protected from ill-behaved users, which is desirable in public data networks <ref> [18] </ref>.
Reference: 19. <author> A. G. Fraser, C. R. Kalmanek, A. Kaplan, W. T. Marshall and R. C. Restrick, </author> <title> Xunet 2: A Nationwide Testbed in High-Speed Networking, </title> <booktitle> Proc. IEEE INFOCOM 1992, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: Rate probing is effective only when all the queueing points are round-robin like, and there is no multiplexing of data streams in the network. There are high-speed ATM networks already in existence that implement round-robin service <ref> [19, 51] </ref>. Further, the proposed native-mode ATM stack does not do any multiplexing so as to preserve per-virtual circuit Quality of Service constraints. Thus, we feel that these two restrictions could easily be satisfied by other ATM networks, making it feasible to implement packet-pair in B-ISDN environments. 10.2.
Reference: 20. <author> E. Gafni and D. Bertsekas, </author> <title> Dynamic Control of Session Input Rates in Communication Networks, </title> <journal> IEEE Trans. on Automatic Control 29, </journal> <volume> 11 (1984), </volume> <pages> 1009-1016. </pages>
Reference-contexts: Recent work has shown that there is a strong motivation to use round-robin-like packet sched-ulers for bursty data traffic, since this provides several advantages over the traditional first-come-first-served discipline [12, 24, 34, 44, 46]. Round-robin service automatically enforces a min-max fair allocation of resources <ref> [20] </ref>. It also automatically polices sources, since a source sending faster than its fair share is the one that will be subjected to packet or cell loss. This ensures that well-behaved users are protected from ill-behaved users, which is desirable in public data networks [18].
Reference: 21. <author> A. G. Greenberg and N. </author> <title> Madras, Comparison of a Fair Queueing Discipline to Processor Sharing, </title> <booktitle> in Performance '90; Proceedings of the 14th IFIP WG 7.3 International Symposium on Computer Performance Modelling, Measurement and Evaluation, </booktitle> <publisher> North Holland, Edinburgh, </publisher> <address> Scotland, </address> <month> September </month> <year> 1990, </year> <pages> 193-207. </pages>
Reference-contexts: This can be done by tagging packets with the completion time had the service been head-of-line processor sharing, and then serving packets in increasing order of their tags, as in Fair Queueing [12]. It can be shown that Fair Queueing emulates head-of-line processor sharing asymptotically with conversation length <ref> [21, 22] </ref>. Connections may be allocated unequal bandwidth shares by varying the weights, as is done in the Weighted Fair Queueing discipline. If the round spans a constant time duration, with the output trunk being kept idle if necessary (i.e. a non-work-conserving discipline), this is called framed round robin service.
Reference: 22. <author> A. G. Greenberg and N. </author> <title> Madras, How Fair is Fair Queueing?, </title> <journal> Journal of the ACM 3, </journal> <month> 39 </month> <year> (1992). </year>
Reference-contexts: This can be done by tagging packets with the completion time had the service been head-of-line processor sharing, and then serving packets in increasing order of their tags, as in Fair Queueing [12]. It can be shown that Fair Queueing emulates head-of-line processor sharing asymptotically with conversation length <ref> [21, 22] </ref>. Connections may be allocated unequal bandwidth shares by varying the weights, as is done in the Weighted Fair Queueing discipline. If the round spans a constant time duration, with the output trunk being kept idle if necessary (i.e. a non-work-conserving discipline), this is called framed round robin service.
Reference: 23. <author> E. L. Hahne, C. R. Kalmanek and S. P. Morgan, </author> <title> Fairness and Congestion Control on a Large ATM Data Network with Dynamically Adjustable Windows, </title> <booktitle> 13th International Teletraffic Congress, </booktitle> <address> Copenhagen , June 1991. </address>
Reference-contexts: Using fixed sized windows is usually not possible in high speed networks, where the bandwidth-delay product, and hence the required window can be large (of the order of hundreds of kilobytes per conversation). In view of this, the adaptive window allocation scheme proposed by Hahne et al <ref> [23] </ref> is attractive. In their scheme, a conversation is allocated a flow control window that is always larger than the product of the allocated bandwidth at the bottleneck, and the round trip propagation delay. So, a conversation is never constrained by the size of the flow control window. <p> This is clearly undesirable for public networks! A dynamic window scheme that uses out-of-band signalling to achieve zero packet loss while minimizing buffer usage has been proposed by Hahne, Kalmanek and Morgan <ref> [23] </ref>. This scheme is efficient in - 40 - its use of bandwidth and buffers, but uses a fairly complicated signaling protocol. In contrast, packet-pair achieves good performance using passive probes. Mitra, Seery et al have proposed an adaptive window scheme for networks with large bandwidth-delay products [42, 43]. <p> Summary In summary, we feel that our approach is substantially different from others described in the literature. Only one other scheme has concentrated on the problem of feedback flow control in networks of round-robin-like servers <ref> [23] </ref>, and this uses a rather complex signaling protocol. All the other schemes have either not assumed any particular scheduling discipline, or assumed it to be FCFS, and thus do not exploit the linearization property of round-robin service.
Reference: 24. <author> E. L. Hahne, </author> <title> Round Robin Scheduling for Fair Flow Control in Data Communication Networks, </title> <institution> LIDS-TH-1631, Laboratory for Information and Decision Systems, Massachusetts Institute of Tech nology, </institution> <address> Cambridge, MA 02139. </address>
Reference-contexts: We first consider the role of packet schedulers in congestion control. Recent work has shown that there is a strong motivation to use round-robin-like packet sched-ulers for bursty data traffic, since this provides several advantages over the traditional first-come-first-served discipline <ref> [12, 24, 34, 44, 46] </ref>. Round-robin service automatically enforces a min-max fair allocation of resources [20]. It also automatically polices sources, since a source sending faster than its fair share is the one that will be subjected to packet or cell loss.
Reference: 25. <author> M. Hsiao and A. A. Lazar, </author> <title> Optimal Flow Control of Multi-Class Queueing Networks with Partial Information, </title> <journal> IEEE Transactions on Automatic Control 35, </journal> <month> 7 (July </month> <year> 1990), </year> <pages> 855-860. </pages>
Reference-contexts: Vakil and Lazar [57] have considered the the design of optimal traffic filters when the state is not fully observable, but the filters are specialized for voice traffic. Robertazzi and Lazar [49] and Hsiao and Lazar <ref> [25] </ref> have shown that under a variety of conditions, the optimal flow control for a Jacksonian network with Poisson traffic is bang-bang (approximated by a window scheme). It is not clear that this result holds when their strong assumptions regarding memoryless-ness of service are removed. 12.5.
Reference: 26. <author> V. Jacobson, </author> <title> Congestion Avoidance and Control, </title> <booktitle> Proc. ACM SigComm 1988, </booktitle> <month> August </month> <year> 1988, </year> <pages> 314-329. </pages>
Reference-contexts: For example, when the operating window is 200 packets, this scheme will take 200 round trip times to reach that size. A faster way to reach the operating point is the exponential + linear scheme proposed by Jacobson and Karels <ref> [26] </ref>. However, the choice of when to change phase from exponential to linear increase is rather ad hoc. Finally, Kanakia and Mishra have proposed a linear increase in the sending rate till the operating point is reached (i.e a constant acceleration in the sending rate) [29]. <p> For the example above, the sender presumes that packet 5 must have been lost and will retransmit it. This idea of retransmitting packets before they time out is called fast retransmit, and is due to Jacobson <ref> [26] </ref>. Fast retransmits are a good indication of receiver state, since even if one or more acknowledgments are lost, the information is repeated, and even one duplicate acknowledgment sequence number is enough to inform the sender about the loss of a data packet. <p> The same problems are present in a more severe form in the 4.3 BSD implementation of TCP, where induced losses are used to probe for the window size <ref> [26] </ref>. However, in their case, since the probing is for the flow control window, uneven losses lead to unfair bandwidth allocation. In our case, the unfairness in setpoints does not lead to unfair allocations of bandwidth. 9.2. <p> Closed loop (or feedback) schemes, such as packet-pair, are generally subdivided into dynamic window or rate-based schemes. 12.1. Dynamic Window Schemes The first two dynamic window schemes to attract wide attention were those proposed for TCP by Jacobson and Karels <ref> [26] </ref>, and for DEC Network Architecture by Jain, Ramakrishnan and Chiu [48]. Both schemes made seminal contributions to this area, but are best suited for FCFS networks with small bandwidth-delay products. <p> We have shown that packet-pair responds quickly and cleanly to changes in network state. Unlike some current flow control algorithms (DECbit and Jacobson's modifications to 4.3 BSD <ref> [26, 48] </ref>), the system behaves well in situations where the bandwidth-delay product is large, even if the cross traffic is misbehaved or bursty [34]. Implementation and tuning of the algorithm is straightforward, unlike the complex and ad-hoc controls in current flow control algorithms.
Reference: 27. <author> R. Jain, </author> <title> Myths About Congestion Management in High-Speed Networks, </title> <type> Technical Report-726, </type> <institution> Dig ital Equipment Corporation, </institution> <month> October </month> <year> 1990. </year>
Reference-contexts: To repeat, we use rate-based flow control to select an operating point, and window-based flow control as a conservative cut-off point. In this respect, we agree with Jain that the two forms of flow control are - 39 - not diametrically opposed, but in fact can work together <ref> [27] </ref>. The choice of window size is critical. Using fixed sized windows is usually not possible in high speed networks, where the bandwidth-delay product, and hence the required window can be large (of the order of hundreds of kilobytes per conversation).
Reference: 28. <author> C. R. Kalmanek, H. Kanakia and S. Keshav, </author> <title> Rate Controlled Servers for Very High Speed Networks, </title> <booktitle> Proc. Globecom 1990, </booktitle> <month> December </month> <year> 1990, </year> <month> 300.3.1-300.3.9. </month>
Reference-contexts: If the round spans a constant time duration, with the output trunk being kept idle if necessary (i.e. a non-work-conserving discipline), this is called framed round robin service. A multilevel framed round robin server is also called a hierarchical round robin server <ref> [28] </ref>.
Reference: 29. <author> H. Kanakia and P. P. Mishra, </author> <title> A Hop by Hop Rate-Based Congestion Control Scheme, </title> <booktitle> Proc. ACM SigComm, </booktitle> <year> 1992. </year>
Reference-contexts: However, the choice of when to change phase from exponential to linear increase is rather ad hoc. Finally, Kanakia and Mishra have proposed a linear increase in the sending rate till the operating point is reached (i.e a constant acceleration in the sending rate) <ref> [29] </ref>. This scheme performs better than the DECbit scheme, but the choice of the acceleration is crucial, and not addressed. Our proposal is to use an adaptive exponential rise to the nominal operating point. <p> For a loss rate of 10 - 3, solving such an equation in real-time is impossible given current technology. We feel that packet-pair is better attuned to current networking realities. Kanakia and Mishra have proposed a hop-by-hop congestion control scheme based on predictive control <ref> [29] </ref>. This is also similar to our approach. Again, their scheme requires a switch to monitor all the conversations, and there is also the overhead of switch-to-switch transfer of rate information. We have found that the hop-by-hop scheme does perform better than packet-pair, but not by very much [31].
Reference: 30. <author> H. Kanakia, P. P. Mishra and A. Reibman, </author> <title> An Adaptive Congestion Control Scheme for Real-Time Packet Video Transport, </title> <booktitle> Proc. ACM SigComm, </booktitle> <year> 1993. </year>
Reference-contexts: Based on these results, we feel that the scheme is suitable for use in public data networks. 9.5. Packet Video Using Packet-pair In the final test of packet-pair, we used it to carry MPEG compressed video over a simulated network. The experimental method is as in <ref> [30] </ref>, where software coded MPEG is carried through a simulated network with 8 active sources, limited buffering and sudden changes in available bandwidth. The feedback signals from the flow control algorithm are used to modify the quality of the compression algorithm.
Reference: 31. <author> H. Kanakia, S. Keshav and P. P. Mishra, </author> <title> A Comparision of Congestion Control Schemes, </title> <booktitle> Proc. Fourth Annual Workshop on Very High Speed Networks, </booktitle> <address> Baltimore, Maryland, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: File Transfer Benchmark Tests In this section, we study the behavior of packet-pair in a set of benchmarks that are designed to stress the flow control algorithm in a number of ways <ref> [31] </ref>. We compare the behavior of packet-pair to the optimal flow control, defined below. We use sources with finite amounts of data (such as a file) to send and use the file transfer time as the primary metric to compare the performance of various schemes. <p> By carefully designing the topology of the network and the experimental environment, this measure subsumes other traditional performance measures such as link utilization, fairness and throughput. Several considerations about the design of such a benchmark are presented in <ref> [31] </ref>. In this work, we simply present the benchmarks and results obtained for packet-pair. We do not compare packet-pair with other schemes for two reasons. First, all the other schemes have been designed for networks of first-come-first-served servers, and so are optimized for that case. <p> This is also similar to our approach. Again, their scheme requires a switch to monitor all the conversations, and there is also the overhead of switch-to-switch transfer of rate information. We have found that the hop-by-hop scheme does perform better than packet-pair, but not by very much <ref> [31] </ref>. Given that packet-pair uses only passive probing, we feel that the loss in performance may be worth it. Low et al [41] have studied a scheme with one or more bits of explicit feedback information from each switch.
Reference: 32. <author> S. Keshav, </author> <title> A Control-Theoretic Approach to Flow Control, </title> <booktitle> Proc. ACM SigComm 1991, </booktitle> <month> September </month> <year> 1991. </year>
Reference-contexts: Fuzzy Prediction Having derived the control law, and proved its stability, we now need to determine stable estimators for the system state. In earlier work, we studied the Kalman estimator <ref> [32] </ref>. However, this estimator requires a priori knowledge of the variances of the system and observation noise. Since these values are hard to determine, we turn to a novel technique for state estimation, fuzzy prediction.
Reference: 33. <author> S. Keshav, A. K. Agrawala and S. Singh, </author> <title> Design and Analysis of a Flow Control Algorithm for a Network of Rate Allocating Servers, in Protocols for High Speed Networks II, </title> <publisher> Elsevier Science Publishers/North-Holland, </publisher> <month> April </month> <year> 1991. </year>
Reference-contexts: The phase 2 buildup is as expected, and reflects the lack of information about the rate change for one round trip time. The amount of buildup is exactly the minimum predicted by multiplying the change in the service rate by the round trip time <ref> [33] </ref>. However, phase 4 buildup because of improper rate probing when several sources are in their startup phase, was somewhat unexpected. As it turns out, this effect dominates peak buffer occupancy.
Reference: 34. <author> S. Keshav, </author> <title> Congestion Control in Computer Networks, </title> <type> PhD thesis, </type> <institution> Comp. Sci. Dept. Tech. Rpt. 91/649, University of California, Berkeley, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: In this paper, we present a scheme for congestion control of the ABR component of integrated networks which is equally applicable to existing datagram-oriented networks. Congestion control for ABR traffic involves packet (or cell) schedulers at queuing points and the flow control protocol at traffic sources <ref> [12, 34] </ref>. We first consider the role of packet schedulers in congestion control. Recent work has shown that there is a strong motivation to use round-robin-like packet sched-ulers for bursty data traffic, since this provides several advantages over the traditional first-come-first-served discipline [12, 24, 34, 44, 46]. <p> We first consider the role of packet schedulers in congestion control. Recent work has shown that there is a strong motivation to use round-robin-like packet sched-ulers for bursty data traffic, since this provides several advantages over the traditional first-come-first-served discipline <ref> [12, 24, 34, 44, 46] </ref>. Round-robin service automatically enforces a min-max fair allocation of resources [20]. It also automatically polices sources, since a source sending faster than its fair share is the one that will be subjected to packet or cell loss. <p> Unlike some current flow control algorithms (DECbit and Jacobson's modifications to 4.3 BSD [26, 48]), the system behaves well in situations where the bandwidth-delay product is large, even if the cross traffic is misbehaved or bursty <ref> [34] </ref>. Implementation and tuning of the algorithm is straightforward, unlike the complex and ad-hoc controls in current flow control algorithms. Even in complicated scenarios, the dynamics are simple to understand and manage. Packet-pair behaves well even under stress, and, more importantly, it is simple to implement and tune.
Reference: 35. <author> S. Keshav, </author> <title> Flow Control in High Speed Networks with Long Propagation Delays, </title> <booktitle> Proc. </booktitle> <address> INET'92, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Further, as this product increases, the startup algorithms embodied in the algorithms make both packet losses and small data transfers expensive <ref> [35] </ref>. The Jacobson-Karels approach uses packet losses as an indication of congestion. As a consequence, the congestion indicator is seen only when the congestion has already taken a toll. This reduces the achievable goodput. Both schemes assume that all sources are cooperative, that is, they respond correctly to congestion signals.
Reference: 36. <author> S. Keshav and H. Saran, </author> <title> Semantics and Implementation of a Native-Mode ATM Protocol Stack, Sub mitted to Infocom '95, </title> <month> August </month> <year> 1994. </year> <month> - 44 </month> - 
Reference-contexts: Finally, Section 10.4 outlines an implementation of packet-pair that runs at the receiver instead of the sender. 10.1. Packet-pair and ATM The packet-pair scheme is designed to work well in ATM environments. We propose to place packet-pair at the transport layer of a native-mode ATM protocol stack <ref> [36] </ref>. User data would be handed by the session layer to the transport layer using the transmission queue described in Section 6. The transport layer would then use packet-pair to send out pairs of AAL5 frames.
Reference: 37. <author> P. S. Khedkar and S. Keshav, </author> <title> Fuzzy Prediction of Timeseries, </title> <booktitle> Proc. IEEE Conference on Fuzzy Systems-92, </booktitle> <month> March </month> <year> 1992. </year>
Reference-contexts: With these changes, the assumption that the variance in the observation noise is small can now be removed. The resulting system is shown in Figure 4. Further details of the prediction system and a performance analysis can be found in Reference <ref> [37] </ref>. Exponential Averager Exponential Averager Fuzzy System Fuzzy System b z - 1 a Observation Proportional error Smoothed proportional error Estimate q 5.
Reference: 38. <author> K. Ko, P. P. Mishra and S. K. Tripathi, </author> <title> Predictive Congestion Control in High-Speed Wide-Area Networks, in Protocols for High Speed Networks II, </title> <editor> M. J. Johnson (editor), </editor> <publisher> Elsevier Science Publishers/North-Holland, </publisher> <month> April </month> <year> 1991. </year>
Reference-contexts: We avoid this by using packet-pair probes. An early approach to hop-by-hop predictive control was proposed by Ko, Mishra and Tripathi <ref> [38] </ref>. This work shares several objectives with packet-pair, and was independently developed at around the same time.
Reference: 39. <author> W. E. Leland, M. S. Taqqu, W. Willinger and D. V. Wilson, </author> <title> On the Self-Similar Nature of Ethernet Traffic, </title> <booktitle> Proc. ACM SigComm '93, </booktitle> <year> 1993. </year>
Reference-contexts: In contrast, packet-pair achieves good performance using passive probes. Mitra, Seery et al have proposed an adaptive window scheme for networks with large bandwidth-delay products [42, 43]. However, their results depend on the cross traffic being Poisson, which may not unlikely to hold true for current or future networks <ref> [39] </ref> Further, they do not make use of predictive control, so propagation delays lead their control to oscillate even under stable conditions. Dynamic window schemes have been mathematically analyzed by Bolot [6], Fendick, Rodrigues and Weiss [15] and Mukherjee and Strikwerda [45].
Reference: 40. <author> S. Low and P. P. Varaiya, </author> <title> A Simple Theory of Traffic and Resource Allocation in ATM, </title> <booktitle> Conference Record, GlobeCom 1991, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: We also make the fluid approximation [1], so packet boundaries are ignored, and the data flow is like that of a fluid in a hydraulic system. This approximation is commonly used <ref> [3, 6, 40, 55] </ref>, and both analysis [43] and simulations show that the approximation is a close one, particularly when the bandwidth-delay product is large. Let us assume that the input rate l is held fixed for some duration J.
Reference: 41. <author> S. Low, N. Plotkin, M. K. Wong and J. Yee, </author> <title> On the Usefulness of Explicit Congestion Notification in High Speed Networks, </title> <booktitle> 2nd International Conference on Telecommunication Systems, Modeling and Analysis, </booktitle> <month> March </month> <year> 1994. </year>
Reference-contexts: We have found that the hop-by-hop scheme does perform better than packet-pair, but not by very much [31]. Given that packet-pair uses only passive probing, we feel that the loss in performance may be worth it. Low et al <ref> [41] </ref> have studied a scheme with one or more bits of explicit feedback information from each switch. They estimate the network state using these bits, then do a state prediction using Kumar and Varaiya's one-step ahead predictor assuming that the system state density function is Gaussian.
Reference: 42. <author> D. Mitra and J. B. Seery, </author> <title> Dynamic Adaptive Windows for High Speed Data Networks: </title> <booktitle> Theory and Simulations , Proc. ACM SigComm 1990, </booktitle> <month> September </month> <year> 1990, </year> <pages> 30-40. </pages>
Reference-contexts: Work by Mitra et al has shown that asymptotic analysis of product form queueing networks can be used to derive an optimal value of the setpoint <ref> [42, 43] </ref>. While their ideas are not directly applicable because of their assumptions of FCFS scheduling, Poisson cross traffic and an exponentially distributed packet service time distribution, to a first approximation, their results may be used to determine the choice of the optimal setpoint in the control system. 4.1.2. <p> This scheme is efficient in - 40 - its use of bandwidth and buffers, but uses a fairly complicated signaling protocol. In contrast, packet-pair achieves good performance using passive probes. Mitra, Seery et al have proposed an adaptive window scheme for networks with large bandwidth-delay products <ref> [42, 43] </ref>. However, their results depend on the cross traffic being Poisson, which may not unlikely to hold true for current or future networks [39] Further, they do not make use of predictive control, so propagation delays lead their control to oscillate even under stable conditions.
Reference: 43. <author> D. Mitra, </author> <title> Asymptotically Optimal Design of Congestion Control for High Speed Data Networks, </title> <journal> IEEE Trans. on Communications 40, </journal> <month> 2 (Feb </month> <year> 1992), </year> <pages> 301-311. </pages>
Reference-contexts: Work by Mitra et al has shown that asymptotic analysis of product form queueing networks can be used to derive an optimal value of the setpoint <ref> [42, 43] </ref>. While their ideas are not directly applicable because of their assumptions of FCFS scheduling, Poisson cross traffic and an exponentially distributed packet service time distribution, to a first approximation, their results may be used to determine the choice of the optimal setpoint in the control system. 4.1.2. <p> We also make the fluid approximation [1], so packet boundaries are ignored, and the data flow is like that of a fluid in a hydraulic system. This approximation is commonly used [3, 6, 40, 55], and both analysis <ref> [43] </ref> and simulations show that the approximation is a close one, particularly when the bandwidth-delay product is large. Let us assume that the input rate l is held fixed for some duration J. <p> This scheme is efficient in - 40 - its use of bandwidth and buffers, but uses a fairly complicated signaling protocol. In contrast, packet-pair achieves good performance using passive probes. Mitra, Seery et al have proposed an adaptive window scheme for networks with large bandwidth-delay products <ref> [42, 43] </ref>. However, their results depend on the cross traffic being Poisson, which may not unlikely to hold true for current or future networks [39] Further, they do not make use of predictive control, so propagation delays lead their control to oscillate even under stable conditions.
Reference: 44. <author> S. P. Morgan, </author> <title> Queueing Disciplines and Passive Congestion Control in Byte-Stream Networks, </title> <booktitle> Proc. IEEE INFOCOM '89, </booktitle> <year> 1989, </year> <pages> 711-729. </pages>
Reference-contexts: We first consider the role of packet schedulers in congestion control. Recent work has shown that there is a strong motivation to use round-robin-like packet sched-ulers for bursty data traffic, since this provides several advantages over the traditional first-come-first-served discipline <ref> [12, 24, 34, 44, 46] </ref>. Round-robin service automatically enforces a min-max fair allocation of resources [20]. It also automatically polices sources, since a source sending faster than its fair share is the one that will be subjected to packet or cell loss.
Reference: 45. <author> A. Mukherjee and J. C. Strikwerda, </author> <title> Analysis of Dynamic Congestion Control Protocols - A Fokker Planck Approximation, </title> <booktitle> Proc. ACM SigComm '91, </booktitle> <month> September </month> <year> 1991. </year>
Reference-contexts: Dynamic window schemes have been mathematically analyzed by Bolot [6], Fendick, Rodrigues and Weiss [15] and Mukherjee and Strikwerda <ref> [45] </ref>. These analyses give some insight into the performance of generic dynamic window schemes. 12.2. Rate-based Flow Control Several rate-based flow control schemes have been proposed in the literature. One of the earliest scheme was for NETBLT [11], which was based on heuristics, and not thoroughly studied.
Reference: 46. <author> A. K. Parekh, </author> <title> A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networks, </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: We first consider the role of packet schedulers in congestion control. Recent work has shown that there is a strong motivation to use round-robin-like packet sched-ulers for bursty data traffic, since this provides several advantages over the traditional first-come-first-served discipline <ref> [12, 24, 34, 44, 46] </ref>. Round-robin service automatically enforces a min-max fair allocation of resources [20]. It also automatically polices sources, since a source sending faster than its fair share is the one that will be subjected to packet or cell loss. <p> control scheme) described in this paper is adequate to describe variants of round-robin service where the packet size per connection is fixed (as in ATM networks), or service is weighted to reflect the packet size - 3 - (as with Fair Queueing [12], Weighted Fair Queueing, Packetized Generalized Processor Sharing <ref> [46] </ref>, and Virtual Clock [65]). We call this kind of round-robin server a Rate-Allocating Server, (RAS) since at each round a connection is allocated a service rate depending on the number of active connections and their weights, and relatively independent of the traffic arrival patterns at the other connections.
Reference: 47. <author> K. Park, </author> <title> Warp Control: A Dynamically Stable Congestion Protocol and its Analysis, </title> <journal> Proc. ACM Sig Comm '93, </journal> <year> 1993. </year>
Reference-contexts: His scheme derives a control law very similar to that we derive in Section 4, thus validating some of our work. However, he has not done detailed simulations to confirm his control law. Park has proposed the 'Warp' congestion control scheme <ref> [47] </ref>. In this scheme, the receiver detects network state by observing arrival times of data packets from the sender, and uses this to determine an appropriate sending rate. However, this work suffers from an error in the mathematical model (Equation 6 in [47]), since according to this equation, the bottleneck queue <p> Park has proposed the 'Warp' congestion control scheme <ref> [47] </ref>. In this scheme, the receiver detects network state by observing arrival times of data packets from the sender, and uses this to determine an appropriate sending rate. However, this work suffers from an error in the mathematical model (Equation 6 in [47]), since according to this equation, the bottleneck queue size may be negative, which is clearly impossible. Since the entire control is based on this equation, we doubt the correctness of his approach.
Reference: 48. <author> K. K. Ramakrishnan and R. Jain, </author> <title> A Binary Feedback Scheme for Congestion Avoidance in Computer Networks, </title> <journal> ACM Trans. on Comp. Sys. </journal> <volume> 8, </volume> <month> 2 (May </month> <year> 1990), </year> <pages> 158-181. </pages>
Reference-contexts: Several startup schemes have been described in the literature. The DECbit scheme is to open the window linearly till the operating point is reached <ref> [48] </ref>. This is a poor choice when the bandwidth delay product is large. For example, when the operating window is 200 packets, this scheme will take 200 round trip times to reach that size. <p> We feel that this order of slowdown is inevitable for any real-life algorithm that has to deal with imperfect knowledge about network state at the time of start up. In fact, all the other proposals for slow-start show similar or worse behavior (recall that for the DECbit algorithm <ref> [48] </ref>, to achieve a window size of 100 would take 100 round trip times, so that packet-pair performs roughly 20 times better). <p> Dynamic Window Schemes The first two dynamic window schemes to attract wide attention were those proposed for TCP by Jacobson and Karels [26], and for DEC Network Architecture by Jain, Ramakrishnan and Chiu <ref> [48] </ref>. Both schemes made seminal contributions to this area, but are best suited for FCFS networks with small bandwidth-delay products. Neither scheme exploits the linearization property of round-robin service, and because they take control actions only once every few round-trip times, are unsuitable for networks with a large bandwidth-delay product. <p> We have shown that packet-pair responds quickly and cleanly to changes in network state. Unlike some current flow control algorithms (DECbit and Jacobson's modifications to 4.3 BSD <ref> [26, 48] </ref>), the system behaves well in situations where the bandwidth-delay product is large, even if the cross traffic is misbehaved or bursty [34]. Implementation and tuning of the algorithm is straightforward, unlike the complex and ad-hoc controls in current flow control algorithms.
Reference: 49. <author> T. G. Robertazzi and A. A. Lazar, </author> <title> On the Modeling and Optimal Flow Control of the Jacksonian Net work, </title> <booktitle> Performance Evaluation 5 (1985), </booktitle> <pages> 29-43. </pages>
Reference-contexts: Vakil and Lazar [57] have considered the the design of optimal traffic filters when the state is not fully observable, but the filters are specialized for voice traffic. Robertazzi and Lazar <ref> [49] </ref> and Hsiao and Lazar [25] have shown that under a variety of conditions, the optimal flow control for a Jacksonian network with Poisson traffic is bang-bang (approximated by a window scheme).
Reference: 50. <author> K. K. Sabnani and A. N. Netravali, </author> <title> A High Speed Transport Protocol for Datagram/Virtual Circuit Networks, </title> <booktitle> Proc. ACM SigComm 1989, </booktitle> <month> September </month> <year> 1989, </year> <pages> 146-157. </pages>
Reference-contexts: This has the effect of increasing the estimate of m. Note that this source of error will persist even if the inter-ack spacing is noted at the sink and sent to the source using a state exchange scheme <ref> [50] </ref>. Measuring m b at the sink will reduce the effect of noise, but cannot eliminate it, since any server that is after the bottleneck potentially introduces noise in the measurement. We model this error in measurement as an observation noise. <p> Second, the receiver measures the inter-packet spacing, and computes the appropriate sending rate. Third, the receiver sends periodic messages to the sender with the optimal sending rate. The frequency of these messages determines the effectiveness of the control. Based on the state exchange work by Sabnani et al <ref> [50] </ref>, we feel that a fairly parsimonious state exchange protocol can give reasonably good performance. However, this is still an area for interesting future work. 11. Limitations The main limitation of our approach is that it restricts the scheduling discipline to be round-robin-like.
Reference: 51. <author> H. Saran, S. Keshav and C. R. Kalmanek, </author> <title> A Scheduling Discipline and Admission Control Policy for Xunet II, </title> <journal> Multimedia Systems Journal 2, </journal> <month> 3 (September </month> <year> 1994). </year>
Reference-contexts: Rate probing is effective only when all the queueing points are round-robin like, and there is no multiplexing of data streams in the network. There are high-speed ATM networks already in existence that implement round-robin service <ref> [19, 51] </ref>. Further, the proposed native-mode ATM stack does not do any multiplexing so as to preserve per-virtual circuit Quality of Service constraints. Thus, we feel that these two restrictions could easily be satisfied by other ATM networks, making it feasible to implement packet-pair in B-ISDN environments. 10.2.
Reference: 52. <author> S. Shenker, </author> <title> A Theoretical Analysis of Feedback Flow Control, </title> <booktitle> Proc. ACM SigComm 1990, Septem ber 1990, </booktitle> <pages> 156-165. </pages>
Reference-contexts: Studies of Ensembles of Controlled Systems One body of work has considered the dynamics of a system where users update their sending rate either synchronously or asynchronously in response to measured round trip delays, or explicit congestion signals, for example in References <ref> [5, 7, 8, 13, 52] </ref>. These approaches typically assume Poisson sources, availability of global information, a simple flow update rule, and exponential servers. We do not make such assumptions.
Reference: 53. <author> S. Singh, A. K. Agrawala and S. Keshav, </author> <title> Deterministic Analysis of Flow and Congestion Control Policies in Virtual Circuits, </title> <type> Tech. </type> <institution> Rpt.-2490, University of Maryland, </institution> <month> June </month> <year> 1990. </year>
Reference-contexts: Stochastic Model for a Conversation We now present a stochastic model for a conversation in a network of RASs. This is an extension of the deterministic model presented in References <ref> [53, 58, 59] </ref>. We model a conversation in a RAS network as a sequence of regularly spaced packets from a source to a destination over a series of servers connected by links. The servers in the path of the conversation are numbered 1,2,3...n, and the source is numbered 0. <p> The destination is assumed to acknowledge each packet. We also assume, for ease of analysis, that sources always have data to send. This simplification allows us to ignore start-up transients in our analysis. In fact, the start-up costs can be significant, and these are analyzed in <ref> [53] </ref>.
Reference: 54. <author> A. S. Tanenbaum, </author> <title> in Computer Networks, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1981. </year>
Reference-contexts: The buffer setpoint is modified by risk-taking applications only to maximize the usage of buffers at the bottleneck. - 17 - 8. Implementation This section presents details on the implementation of packet-pair flow control. Feedback flow control algorithms are typically implemented at the transport layer of the protocol stack <ref> [54] </ref>. If a data source is not trusted, or incapable of flow control, this functionality could also be implemented at the Network Interface Unit, which is interposed between a traffic source and a public B-ISDN network.
Reference: 55. <author> D. Tipper and M. K. Sundareshan, </author> <title> Numerical Methods for Modeling Computer Networks under Nonstationary Conditions, </title> <address> JSAC 8, </address> <month> 9 (December </month> <year> 1990). </year>
Reference-contexts: This makes the control task relatively straightforward. Linearization is possible because RAS service isolates a conversation's service from the details of the arrival pattern of cross traffic. For FCFS service, there is no such isolation, and the associated non-linear control is complex <ref> [17, 55] </ref>. - 4 - 3. Packet-pair probing SOURCE SERVER 1 BOTTLENECK SINK RTT rate estimate d i l bottleneck rate The packet-pair mechanism is to send all data in the form of back-to-back pairs, and then estimate the bottleneck service rate from the spacing of the acknowledgements (Figure 1). <p> We also make the fluid approximation [1], so packet boundaries are ignored, and the data flow is like that of a fluid in a hydraulic system. This approximation is commonly used <ref> [3, 6, 40, 55] </ref>, and both analysis [43] and simulations show that the approximation is a close one, particularly when the bandwidth-delay product is large. Let us assume that the input rate l is held fixed for some duration J. <p> Optimal Flow Control A control theoretic approach to individual optimal flow control was described originally by Agnew [1] and since extended by Filipiak [17] and Tipper et al <ref> [55] </ref>. In their approach, a conversation is modeled by a first order differential equation, using the fluid approximation. The modeling parameters are tuned so that, in the steady state, the solution of the differential equation and the solution of a corresponding queueing model agree.
Reference: 56. <author> F. Vakil, M. Hsiao and A. A. Lazar, </author> <title> Flow Control in Integrated Local Area Networks, Performance Evaluation 7, </title> <booktitle> 1 (1987), </booktitle> <pages> 43-57. </pages>
Reference-contexts: This is not true for a RAS, where the service rate is independent of the queue length. Hence, we cannot apply their techniques to our problem. Vakil, Hsiao and Lazar <ref> [56] </ref> have used a control-theoretic approach to optimal flow control in double-bus TDMA local-area integrated voice/data networks. However, they assume exponential FCFS servers, and, since the network is not geographically dispersed, propagation delays are ignored.
Reference: 57. <author> F. Vakil and A. A. Lazar, </author> <title> Flow Control Protocols for Integrated Networks with Partially Observed Traffic, </title> <journal> IEEE Transactions on Automatic Control 32, </journal> <volume> 1 (1987), </volume> <pages> 2-14. </pages>
Reference-contexts: Vakil and Lazar <ref> [57] </ref> have considered the the design of optimal traffic filters when the state is not fully observable, but the filters are specialized for voice traffic.
Reference: 58. <author> J. G. Waclawsky and A. K. Agrawala, </author> <title> Dynamic Behavior of Data Flow within Virtual Circuits, </title> <journal> Comp. </journal> <note> Sci.-Tech. Rpt.-2250, University of Maryland , May 1989. </note>
Reference-contexts: Stochastic Model for a Conversation We now present a stochastic model for a conversation in a network of RASs. This is an extension of the deterministic model presented in References <ref> [53, 58, 59] </ref>. We model a conversation in a RAS network as a sequence of regularly spaced packets from a source to a destination over a series of servers connected by links. The servers in the path of the conversation are numbered 1,2,3...n, and the source is numbered 0.
Reference: 59. <author> J. G. Waclawsky, </author> <title> Window Dynamics, </title> <type> PhD Thesis, </type> <institution> University of Maryland, College Park, </institution> <month> May </month> <year> 1990. </year>
Reference-contexts: Stochastic Model for a Conversation We now present a stochastic model for a conversation in a network of RASs. This is an extension of the deterministic model presented in References <ref> [53, 58, 59] </ref>. We model a conversation in a RAS network as a sequence of regularly spaced packets from a source to a destination over a series of servers connected by links. The servers in the path of the conversation are numbered 1,2,3...n, and the source is numbered 0.
Reference: 60. <author> C. L. Williamson and D. R. Cheriton, </author> <title> Loss-Load Curves: Support for Rate-Based Congestion Con trol in High-Speed Datagram Networks, </title> <booktitle> Proc. ACM SigComm 1991, </booktitle> <month> September </month> <year> 1991. </year> <month> - 45 </month> - 
Reference-contexts: Further, they appeal primarily to intuitive heuristics, and do not use a formal control-theoretic model, to develop their control. Williamson has proposed the Loss-Load scheme <ref> [60, 61] </ref> that uses the throughput-versus-loss curve to compute an optimal sending rate. This approach has numerous lacunae. It ignores system considerations, such as the the fact that monitoring each connection at each switch poses a rather considerable burden on the switch controller.
Reference: 61. <author> C. L. Williamson, </author> <title> Optimizing File Transfer Response Time Using the Loss-Load Congestion Control Mechanism, </title> <booktitle> Proc. ACM SigComm 1993, </booktitle> <year> 1993. </year>
Reference-contexts: Further, they appeal primarily to intuitive heuristics, and do not use a formal control-theoretic model, to develop their control. Williamson has proposed the Loss-Load scheme <ref> [60, 61] </ref> that uses the throughput-versus-loss curve to compute an optimal sending rate. This approach has numerous lacunae. It ignores system considerations, such as the the fact that monitoring each connection at each switch poses a rather considerable burden on the switch controller.
Reference: 62. <author> L. A. Zadeh, </author> <title> Fuzzy Sets, </title> <journal> Journal of Information and Control 8 (1965), </journal> <pages> 338-353. </pages>
Reference-contexts: To summarize, the observation is that if the predictor error is large, then a should be small, and vice versa. Treating `small' and `large' as fuzzy linguistic variables <ref> [62] </ref>, this is the basis for a fuzzy controller for the estimation of a.
Reference: 63. <author> L. A. Zadeh, </author> <title> Outline of a New Approach to the Analysis of Complex Systems and Decision Pro cesses, </title> <journal> IEEE Trans. on Systems, Man and Cybernetics, </journal> <year> 1973, </year> <pages> 28-44. </pages>
Reference-contexts: It would be useful to automatically determine a `good' value of a, and to be able to change this value on-line if the system behavior changes. Our approach uses fuzzy control to effect this tuning <ref> [63, 67] </ref>. Fuzzy exponential averaging uses the assumption that a system can be thought of as belonging to a spectrum of behavior that ranges from `steady' to `noisy'.
Reference: 64. <author> L. Zhang, </author> <title> Why TCP Timers Don't Work Well, </title> <booktitle> Proc. Sigcomm 1986, </booktitle> <year> 1986, </year> <pages> 397-405. </pages>
Reference-contexts: However, if timers are too small there can be numerous retransmissions, which can lead to network congestion. A poor choice in the other direction will lead to long pauses, wasting the available bandwidth <ref> [64] </ref>. Thus, the choice of timers and of which packets to retransmit is intimately related to flow and congestion control. Three considerations guided the design of the timeout and retransmission strategy for packet-pair. First, we believe that timers should be a mechanism of last resort.
Reference: 65. <author> L. Zhang, </author> <title> A New Architecture for Packet Switching Network Protocols, </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> July </month> <year> 1989. </year>
Reference-contexts: this paper is adequate to describe variants of round-robin service where the packet size per connection is fixed (as in ATM networks), or service is weighted to reflect the packet size - 3 - (as with Fair Queueing [12], Weighted Fair Queueing, Packetized Generalized Processor Sharing [46], and Virtual Clock <ref> [65] </ref>). We call this kind of round-robin server a Rate-Allocating Server, (RAS) since at each round a connection is allocated a service rate depending on the number of active connections and their weights, and relatively independent of the traffic arrival patterns at the other connections.
Reference: 66. <author> L. Zhang, S. Shenker and D. D. Clark, </author> <title> Observations on the Dynamics of a Congestion Control Algo rithm: The Effects of Two-Way Traffic, </title> <booktitle> Proc. ACM SigComm 1991, </booktitle> <month> September </month> <year> 1991. </year>
Reference-contexts: Benchmark 6: Two-Way Traffic A traffic scenario with traffic flowing in both directions through a switch is important to examine because of the role played by acknowledgement packets in some flow control schemes <ref> [66] </ref>. The TCP scheme uses acks as a clocking mechanism to inject packets into the network at roughly the bottleneck rate. The packet-pair scheme uses the gap between acknowledgment packets to estimate the service rate at the bottleneck node.
Reference: 67. <author> H. J. Zimmerman, </author> <title> in Fuzzy Set Theory and its Applications, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1985. </year>
Reference-contexts: It would be useful to automatically determine a `good' value of a, and to be able to change this value on-line if the system behavior changes. Our approach uses fuzzy control to effect this tuning <ref> [63, 67] </ref>. Fuzzy exponential averaging uses the assumption that a system can be thought of as belonging to a spectrum of behavior that ranges from `steady' to `noisy'.
References-found: 67

