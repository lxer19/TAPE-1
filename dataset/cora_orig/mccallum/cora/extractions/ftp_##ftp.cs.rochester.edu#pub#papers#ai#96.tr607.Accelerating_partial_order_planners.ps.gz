URL: ftp://ftp.cs.rochester.edu/pub/papers/ai/96.tr607.Accelerating_partial_order_planners.ps.gz
Refering-URL: http://www.cs.rochester.edu/trs/ai-trs.html
Root-URL: 
Email: Email: schubert@cs.rochester.edu  Email: gerevini@bsing.ing.unibs.it  
Phone: Tel.: 716-275-8845  
Title: Accelerating Partial Order Planners by Improving Plan and Goal Choices  
Author: Lenhart Schubert Alfonso Gerevini 
Address: Rochester, NY 14627-0226, USA.  via Branze 38, 25123 Brescia, Italy  
Affiliation: Dept. of Computer Science, University of Rochester  Dip. di Elettronica per l'Automazione, Universita di Brescia  
Abstract: We describe some simple domain-independent improvements to plan-refinement strategies for well-founded partial order planning that promise to bring this style of planning closer to practicality. One suggestion concerns the strategy for selecting plans for refinement among the current (incomplete) candidate plans. We propose an A* heuristic that counts only steps and open conditions, while ignoring "unsafe conditions" (threats). A second suggestion concerns the strategy for selecting open conditions (goals) to be established next in a selected incomplete plan. Here we propose a variant of a strategy suggested by Peot & Smith and studied by Joslin & Pollack; the variant gives top priority to unmatchable open conditions (enabling the elimination of the plan), second-highest priority to goals that can only be achieved uniquely, and otherwise uses LIFO prioritization. The preference for uniquely achievable goals is a "zero-commitment" strategy in the sense that the corresponding plan refinements are a matter of deductive certainty, involving no guesswork. In experiments based on modifications of UCPOP, we have obtained improvements by factors ranging from 5 to more than 1000 for a variety of problems that are nontrivial for the unmodified version. Crucially, the hardest problems give the greatest improvements. fl Please address correspondence to the first author. This paper is an extended and revised version of a paper that appeared in the Proc. of the 7th Int. Conf. on Tools with Artificial Intelligence (ICTAI-95), Nov 5-8, Washington DC. The work of the first author was supported in part by Rome Lab contract F30602-91-C-0010, and both authors had partial support from NATO Collaborative Research Grant CRG951285. The work of the second author was partly carried out when he was working at IRST, 38050 Povo (TN), Italy. The helpful comments and perceptive questions of Marc Friedman, David Joslin, Rao Kambham-pati, Colm O'Riain, Martha Pollack, and Mike Williamson are gratefully acknowledged. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J.F. Allen and L.K. Schubert. </author> <title> The TRAINS project. Tec. </title> <type> Rep. 382, </type> <institution> Dept. of Computer Science, Univ. of Rochester, Rochester, NY. </institution> <note> Also slightly revised as Language and discourse in the TRAINS project, </note> <editor> in A. Ortony, J. Slack, and O. Stock (eds.), </editor> <title> Communication from an Artificial Intelligence Perspective: </title> <publisher> Theoretical Springer-Verlag, Heidelberg, </publisher> <pages> pp. 91-120, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: the UCPOP suite, emphasizing those that had proved most challenging for previous strategies, on some artificial problems due to Kambhampati et al.[20], in the trains 4 The Lisp implementation together with instructions for integration into UCPOP is avail able by inquiry to the authors. 10 transportation domain developed in Rochester <ref> [1, 2] </ref>, and in Joslin & Pollack's Tile-world domain [18]. The UCPOP problems include Towers of Hanoi (T of H), Fixa, Fix3, Fixit, Tower-Invert4, Test-Ferry, and Sussman-Anomaly.
Reference: [2] <author> J.F. Allen, L.K. Schubert, G.M. Ferguson, P.A. Heeman, C.H. Hwang, T. Kato, M. Light, N.G. Martin, B.W. Miller, M. Poesio, and D.R. Traum. </author> <title> The TRAINS project: A case study in building a conversational planning agent. </title> <journal> J. Experimental and Theoretical Artificial Intelligence, </journal> <volume> 7 </volume> <pages> 7-48, </pages> <year> 1995. </year>
Reference-contexts: the UCPOP suite, emphasizing those that had proved most challenging for previous strategies, on some artificial problems due to Kambhampati et al.[20], in the trains 4 The Lisp implementation together with instructions for integration into UCPOP is avail able by inquiry to the authors. 10 transportation domain developed in Rochester <ref> [1, 2] </ref>, and in Joslin & Pollack's Tile-world domain [18]. The UCPOP problems include Towers of Hanoi (T of H), Fixa, Fix3, Fixit, Tower-Invert4, Test-Ferry, and Sussman-Anomaly.
Reference: [3] <author> A. Barrett, K. Golden, S. Penberthy, and D. Weld. </author> <title> UCPOP user's manual. </title> <type> Tech. Rep. </type> <institution> 93-09-06, Dept. of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA 98105, </address> <year> 1994. </year>
Reference-contexts: Thus we begin with a sketch of this algorithm, referring the reader to <ref> [3, 25] </ref> for details. UCPOP uses STRIPS-like operators, with positive or negative preconditions and positive or negative effects. The initial state consists of positive predications with constant arguments (if any), and all other ground predications are false by default. <p> pseu-docode of ZLIFO. 4 Very recently this implementation has also been packaged into UCPOP 4.0, a new version of UCPOP which is available by anonymous ftp to cs.washington.edu. 3 Experiments Using UCPOP 3.1 Test problems and experimental settings In order to test our ideas we modified version 2.0 of UCPOP <ref> [3] </ref>, replacing its default plan-selection strategy (S+OC+UC) and goal-selection strategy (LIFO) to incorporate strategies discussed in the previous sections. <p> The latter are special open condions (e.g., a numerical relation like (add-one x y)) that are not state-dependent and are established by Lisp functions <ref> [3] </ref>. ZLIFO* performed very efficiently for all six Tile-world problems, in fact a little better than LCFR. Note that for these problems ZLIFO* is more efficient than LCFR in terms of the CPU-time, even though the number of plans generated/explored by the two strategies is approximately the same.
Reference: [4] <author> A. Barrett and D. S. Weld. </author> <title> Partial-order planning: evaluating possible efficiency gains. </title> <journal> Artificial Intelligence, </journal> <volume> 67 </volume> <pages> 71-112, </pages> <year> 1994. </year>
Reference-contexts: Since then there has been an upsurge of activity in well-founded partial-order planning, aimed both at increasing the expressiveness of such planners, and assessing and improving their performance. UCPOP [25] and BURIDAN [22] exemplify the move toward greater expressiveness, and some recent performance studies are reported in <ref> [4, 20] </ref>. Despite these efforts, it seems fair to say that well-founded planners still perform dismally in practical terms.
Reference: [5] <author> W.A. Bibel. </author> <title> A deductive solution for plan generation. </title> <journal> New Generation Computing, </journal> <volume> 4(2) </volume> <pages> 115-132, </pages> <year> 1986. </year>
Reference-contexts: This led to a renewal of efforts in the 80's to find viable approaches to well-founded planning. These efforts produced some novel approaches to linear planning such as BIGRESS [27, 21] (based on dynamic logic) and Bibel's linear connection method for plan generation <ref> [5] </ref>, as well as the first algorithms for well-founded nonlinear planning, TWEAK [6] (Chapman's partial-order planner based on his "modal truth criterion") and SNLP [23] (another systematic partial-order planner using propositional STRIPS operators).
Reference: [6] <author> D. Chapman. </author> <title> Planning for conjunctive goals. </title> <journal> Artificial Intelligence, </journal> <volume> 32(3) </volume> <pages> 333-377, </pages> <year> 1987. </year>
Reference-contexts: These efforts produced some novel approaches to linear planning such as BIGRESS [27, 21] (based on dynamic logic) and Bibel's linear connection method for plan generation [5], as well as the first algorithms for well-founded nonlinear planning, TWEAK <ref> [6] </ref> (Chapman's partial-order planner based on his "modal truth criterion") and SNLP [23] (another systematic partial-order planner using propositional STRIPS operators). Since then there has been an upsurge of activity in well-founded partial-order planning, aimed both at increasing the expressiveness of such planners, and assessing and improving their performance.
Reference: [7] <author> K. Currie and A. Tate. O-Plan: </author> <title> The open planning architecture. </title> <journal> Artificial Intelligence, </journal> <volume> 51(1), </volume> <year> 1991. </year>
Reference: [8] <editor> J. Dalton, B. Drabble, and A. Tate. </editor> <booktitle> The O-Plan constraint associator. In 13th Workshop of the UK Planning Special Interest Group, </booktitle> <address> Glasgow, UK, </address> <year> 1994. </year>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [16, 30], STRIPS [10], and NOAH [28], and some familiar later examples are NONLIN [31], DEVISER [32], SIPE [33], PRS [11], FORBIN [9], and O-Plan <ref> [8] </ref>. While STRIPS was a linear planner, a noteworthy characteristic of most later planners, starting with NOAH, was their ability to produce nonlinear (partially ordered) plans, when a partial ordering suffices to guarantee achievement of the goals.
Reference: [9] <author> T. Dean, R. J. Firby, and D. Miller. </author> <title> Hierarchical planning involving deadlines, travel time, and resources. </title> <journal> Computational Intelligence, </journal> <volume> 4 </volume> <pages> 381-398, </pages> <year> 1988. </year>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [16, 30], STRIPS [10], and NOAH [28], and some familiar later examples are NONLIN [31], DEVISER [32], SIPE [33], PRS [11], FORBIN <ref> [9] </ref>, and O-Plan [8]. While STRIPS was a linear planner, a noteworthy characteristic of most later planners, starting with NOAH, was their ability to produce nonlinear (partially ordered) plans, when a partial ordering suffices to guarantee achievement of the goals.
Reference: [10] <author> R.E. Fikes and N.J. Nilsson. </author> <title> STRIPS: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208, </pages> <year> 1971. </year>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [16, 30], STRIPS <ref> [10] </ref>, and NOAH [28], and some familiar later examples are NONLIN [31], DEVISER [32], SIPE [33], PRS [11], FORBIN [9], and O-Plan [8].
Reference: [11] <editor> M.P. Georgeff and A.L. Lansky. </editor> <title> Reactive reasoning and planning. </title> <booktitle> In Proc. of the 6th Nat. Conf. of the Am. Assoc. for Artificial Intelligence (AAAI-87), </booktitle> <pages> pp. 677-682, </pages> <address> Seattle, WA, 1987. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [16, 30], STRIPS [10], and NOAH [28], and some familiar later examples are NONLIN [31], DEVISER [32], SIPE [33], PRS <ref> [11] </ref>, FORBIN [9], and O-Plan [8]. While STRIPS was a linear planner, a noteworthy characteristic of most later planners, starting with NOAH, was their ability to produce nonlinear (partially ordered) plans, when a partial ordering suffices to guarantee achievement of the goals.
Reference: [12] <author> A. Gerevini and L.K. Schubert. </author> <title> An efficient method for managing disjunctions in qualitative temporal reasoning. </title> <booktitle> In Principles of Knowledge Representation and Reasoning: Proc. of the 4th Int. Conf. (KR-94), </booktitle> <pages> pp. 215-225, </pages> <address> San Francisco, CA, 1994. </address> <publisher> Morgan-Kaufmann. </publisher> <pages> 28 </pages>
Reference-contexts: Though this problem is in principle NP-hard, algorithms that are very efficient on average are described in <ref> [12, 13] </ref>. This could be far more efficient than trying each possible promotion and demotion, checking in isolation for consistency with ordering constraints.
Reference: [13] <author> A. Gerevini and L.K. Schubert. </author> <title> Efficient algorithms for qualitative rea-soning about time. </title> <journal> Artificial Intelligence, </journal> <volume> 74(2) </volume> <pages> 207-248, </pages> <year> 1995. </year>
Reference-contexts: Though this problem is in principle NP-hard, algorithms that are very efficient on average are described in <ref> [12, 13] </ref>. This could be far more efficient than trying each possible promotion and demotion, checking in isolation for consistency with ordering constraints.
Reference: [14] <author> A. Gerevini and L.K. Schubert. </author> <title> Precomputation of parameter domains as an aid to planning. </title> <note> To be presented at 3rd Int. Conf. on Planning Systems (AIPS-96), May 29-31, Edinburgh. Also available as: </note> <institution> IRST Tech. </institution> <type> Rep. 9307-44, </type> <institution> Istituto per la Ricerca Scien-tifica e Tecnologica, 38050 Povo, Trento Italy; Tech. </institution> <type> Rep. 496, </type> <institution> Computer Science Dept., University of Rochester, Rochester, </institution> <address> NY 14627, USA. </address>
Reference-contexts: This often permits some matching actions for open conditions to be immediately eliminated, as they would violate the precomputed constraints. We have already begun exploring one such method, which involves precomputing domains (sets of constants) of operator parameters and using these domains as filters in the planning process <ref> [14] </ref>. A related idea is to pre-compute implicative state constraints and single-valuedness constraints that are implicit in the operator structure.
Reference: [15] <author> C. Green. </author> <title> Application of theorem proving to problem solving. </title> <booktitle> In Proc. of the 1st Int. Joint Conf. on Artificial Intelligence (IJCAI-69), </booktitle> <pages> pp. 219-239, </pages> <year> 1969. </year>
Reference-contexts: The emphasis in well-founded planning is on constructing planners that can be proved to have certain desirable properties, such as soundness and completeness for their intended class of problems, or the ability to find optimal or near-optimal solutions. The first well-founded planner was probably C. Green's QA3 <ref> [15] </ref>, offering sound and complete linear planning within the expressively quite rich situation calculus. However, it was limited both by the linearity of the plans produced and by impractical performance, attributable in part to the use of frame axioms. <p> Green's QA3, reportedly solved some (carefully formulated) versions of this problem rather easily <ref> [15] </ref>. <p> In the case of T of H, we added a 3-operator version to the UCPOP single-operator version, since T of H is a particularly hard problem for UCPOP and its difficulty has long been known to be sensitive to the formalization (e.g., <ref> [15] </ref>). Fixa is a problem from Dan Weld's "fridge domain", in which the compressor in the fridge is to be exchanged, requiring unscrewing several screws, stopping the fridge, removing the backplane, and making the exchange.
Reference: [16] <author> C. Hewitt. </author> <title> Planner: A language for proving theorems in robots. </title> <booktitle> In Proc. of the 1st Int. Joint Conf. on Artificial Intelligence (IJCAI-69), </booktitle> <pages> pp. 295-301, </pages> <address> Bedford, MA, 1969. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language <ref> [16, 30] </ref>, STRIPS [10], and NOAH [28], and some familiar later examples are NONLIN [31], DEVISER [32], SIPE [33], PRS [11], FORBIN [9], and O-Plan [8].
Reference: [17] <author> D. Joslin. </author> <type> Personal communication. </type> <month> October </month> <year> 1995. </year>
Reference-contexts: While LCFR did slightly better than ZLIFO for Trains1 (the easiest of these problems), it performed quite poorly for Fixit and Trains2 (the 9 This was with UCPOP's delay-separation switch turned off, which is implicit in LCFR <ref> [17] </ref>. In our experiments we also tested a variant of LCFR, where the switch is forced to be on. The resulting goal strategy in combinantion with our plan strategy S+OC performed significantly better for T-of-H1, solving the problem generating/exploring 7423/6065 plans, and using 110.45 CPU seconds. <p> Note also that a comparison of our implementation of LCFR and Joslin&Pollack's implementation used for the experiments discussed in [18] showed that our implementation is considerably faster <ref> [17] </ref>. 16 1 100 10 100 1000 10000 100000 1e+06 1e+07 Problem size Sussman-anomaly ART-3-6 Test-Ferry Tower-Invert4 Fixa Fix3 Trains1 ART-6-3 Fixit Speedup 2 2 2 2 2 2 generated by LIFO and S+OC+UC (log-log scale).
Reference: [18] <author> D. Joslin and M.E. Pollack. </author> <title> Least-cost flaw repair: a plan refinement strategy for partial-order planning. </title> <booktitle> In Proc.of the 12th Nat. Conf. of the Am. Assoc. for Artificial Intelligence (AAAI-94), </booktitle> <pages> pp. 1004-1009, </pages> <address> Seattle WA, </address> <year> 1994. </year>
Reference-contexts: Thus it entails the priorities for unachievable and uniquely achievable goals above (while also entailing a certain prioritization of nonuniquely achievable goals). Joslin and Pollack <ref> [18] </ref> studied the uniform application of such a strategy to both threats and open conditions in UCPOP, terming this strategy "least cost flaw repair" (LCFR). 3 Combining this with UCPOP's default plan selection strategy, they obtained significant search reductions (though less significant running time reductions, mainly for implementation reasons, but also <p> Joslin & Pollack <ref> [18] </ref> and subsequently Srinivasan & Howe [29] proposed some variants of LCFR designed to reduce the overhead incurred by LCFR for flaw selection. <p> challenging for previous strategies, on some artificial problems due to Kambhampati et al.[20], in the trains 4 The Lisp implementation together with instructions for integration into UCPOP is avail able by inquiry to the authors. 10 transportation domain developed in Rochester [1, 2], and in Joslin & Pollack's Tile-world domain <ref> [18] </ref>. The UCPOP problems include Towers of Hanoi (T of H), Fixa, Fix3, Fixit, Tower-Invert4, Test-Ferry, and Sussman-Anomaly. <p> The resulting goal strategy in combinantion with our plan strategy S+OC performed significantly better for T-of-H1, solving the problem generating/exploring 7423/6065 plans, and using 110.45 CPU seconds. Note also that a comparison of our implementation of LCFR and Joslin&Pollack's implementation used for the experiments discussed in <ref> [18] </ref> showed that our implementation is considerably faster [17]. 16 1 100 10 100 1000 10000 100000 1e+06 1e+07 Problem size Sussman-anomaly ART-3-6 Test-Ferry Tower-Invert4 Fixa Fix3 Trains1 ART-6-3 Fixit Speedup 2 2 2 2 2 2 generated by LIFO and S+OC+UC (log-log scale). <p> In <ref> [18] </ref> Joslin and Pollack tested their LCFR strategy on six problems in the Tile-world (tw-1, ..., tw-6), five of which are very hard for default UCPOP, but easy for UCPOP using LCFR. 10 We tested our ZLIFO strategy in the Tile-world using the same six problems.
Reference: [19] <author> R.E. Korf. </author> <title> Linear-Space Best-First Search: Summary of Results. </title> <booktitle> In Proc.of the 10th Nat. Conf. of the Am. Assoc. for Artificial Intelligence (AAAI-92), </booktitle> <pages> pp. 533-538, </pages> <year> 1992. </year>
Reference-contexts: Among the search control functions provided by UCPOP, we used the default bestf-search when the problem was solvable within the search limit of 40,000 plans generated, while we used the function id-bf-search (an implementation of the linear-space best-first search algorithm given by Korf in <ref> [19] </ref>), when this limit was exceeded. 7 3.2 Experimental results Tables I-XII show the CPU time (seconds) and the number of plans created/explored by UCPOP on twelve problems in the domains described above: Towers of Hanoi with three disks and either one operator (T-of-H1) or three operators (T-of-H3), "Dan's fridge" domain
Reference: [20] <author> S. Kambhampati, C. A. Knoblock, and Q. Yang. </author> <title> Planning as refinement search: A unified framework for evaluating design tradeoff in partial-order planning. </title> <journal> Artificial Intelligence. Special Issue on Planning and Scheduling, </journal> <note> 1995. To appear; also available as Tech. Rep. ASU-CSE-TR 94-002, </note> <institution> Dept. of Computer Science and Engineering, Arizona State Univ., Temple, AZ. </institution>
Reference-contexts: Since then there has been an upsurge of activity in well-founded partial-order planning, aimed both at increasing the expressiveness of such planners, and assessing and improving their performance. UCPOP [25] and BURIDAN [22] exemplify the move toward greater expressiveness, and some recent performance studies are reported in <ref> [4, 20] </ref>. Despite these efforts, it seems fair to say that well-founded planners still perform dismally in practical terms. <p> UCPOP [25] and BURIDAN [22] exemplify the move toward greater expressiveness, and some recent performance studies are reported in [4, 20]. Despite these efforts, it seems fair to say that well-founded planners still perform dismally in practical terms. For example, when we tried to apply the programs evaluated in <ref> [20] </ref> to the standard UCPOP suite of test problems, we found that none achieve reasonable performance on the 3-disk Towers of Hanoi 2 (T of H) puzzle (requiring 7 moves for its solution), or on some other simple problems. <p> The artificial problems correspond to two parameter settings for ART-# est - # clob , one of the two artificial domains that served as a testbed for Kambham-pati et al.'s extensive study of the behavior of various planning strategies as a function of problem parameters <ref> [20] </ref>. 5 ART-# est -# clob provides two "layers" of 10 operators each, where those in layer 1 achieve the preconditions of those in layer 2, and each operator in layer 2 achieves one of the 10 goals. <p> The agent can carry at most four tiles at a time. 5 This domain was chosen since absolute performance data are provided for it in <ref> [20] </ref>. 11 Formalizations of several of these domains in terms of UCPOP's language are provided in Appendix B. This includes the two versions of the T of H, ART # est -# clob , the Rochester trains domain and the Tile-world domain. <p> T-of-H3 proved harder to solve than T-of-H1, requiring 8.5 seconds using S+OC and an unknown time in excess of 600 CPU-second using S+OC+UC. 6 The formalizations of these domains, which do not include the 3-operator version of the T of H, the artificial domain from <ref> [20] </ref>, or the trains domain, are available along with UCPOP via anonymous FTP from cs.washington.edu. <p> Concerning ART-# est -# clob , note that the performance we obtained with unenhanced UCPOP (624 plans generated for ART-3-6 and 985 for ART-6-3) was much the same as (just marginally better than) reported in <ref> [20] </ref> for the best planners considered there (700 - 1500 plans generated for ART-3-6, and 1000-2000 for ART-6-3). This is to be expected, since UCPOP is a generalization of the earlier partial-order planners. Relative to standard UCPOP and its predecessors, our "accelerated" planner is thus an order of magnitude faster.
Reference: [21] <author> H.A. Kautz. </author> <title> Planning within first-order dynamic logic. </title> <booktitle> In 4th Bienn. Conf. of the Can. Soc. for Computational Stud. of Intelligence (CSCSI-82), </booktitle> <pages> pp. 19-26, </pages> <institution> Univ. of Saskatchewan, Saskatoon, Sask., </institution> <year> 1982. </year>
Reference-contexts: This led to a renewal of efforts in the 80's to find viable approaches to well-founded planning. These efforts produced some novel approaches to linear planning such as BIGRESS <ref> [27, 21] </ref> (based on dynamic logic) and Bibel's linear connection method for plan generation [5], as well as the first algorithms for well-founded nonlinear planning, TWEAK [6] (Chapman's partial-order planner based on his "modal truth criterion") and SNLP [23] (another systematic partial-order planner using propositional STRIPS operators).
Reference: [22] <author> N. Kushmerick, S. Hanks, and D. Weld. </author> <title> An algorithm for probabilistic least-commitment planning. </title> <booktitle> In Proc.of the 12th Nat. Conf. of the Am. Assoc. for Artificial Intelligence (AAAI-94), </booktitle> <pages> pp. 1073-1078, </pages> <address> Seattle WA, </address> <year> 1994. </year>
Reference-contexts: Since then there has been an upsurge of activity in well-founded partial-order planning, aimed both at increasing the expressiveness of such planners, and assessing and improving their performance. UCPOP [25] and BURIDAN <ref> [22] </ref> exemplify the move toward greater expressiveness, and some recent performance studies are reported in [4, 20]. Despite these efforts, it seems fair to say that well-founded planners still perform dismally in practical terms.
Reference: [23] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proc. of the 9th Nat. Conf. on Artificial Intelligence (AAAI-91), </booktitle> <pages> pp. 634-639, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: These efforts produced some novel approaches to linear planning such as BIGRESS [27, 21] (based on dynamic logic) and Bibel's linear connection method for plan generation [5], as well as the first algorithms for well-founded nonlinear planning, TWEAK [6] (Chapman's partial-order planner based on his "modal truth criterion") and SNLP <ref> [23] </ref> (another systematic partial-order planner using propositional STRIPS operators). Since then there has been an upsurge of activity in well-founded partial-order planning, aimed both at increasing the expressiveness of such planners, and assessing and improving their performance.
Reference: [24] <author> N.J. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <publisher> Tioga Pub. Co., </publisher> <address> Palo Alto, CA, </address> <year> 1980. </year> <month> 29 </month>
Reference-contexts: There are two points of which the reader should be reminded. First, in order for A* to guarantee discovery of an optimal plan (i.e., the "admissibil 5 ity" condition), h (p) should not overestimate the remaining solution cost <ref> [24] </ref>. Second, if the aim is not necessarily to find an optimal solution but to find a satisfactory solution quickly, then f (p) can be augmented to include a term that estimates the remaining cost of finding a solution. <p> Thus we will prefer to pursue a plan p 0 that seems closer to being complete to a plan p further from completion, even though the overall complexity estimate for p 0 may be greater than for p <ref> [24] </ref> (pages 87-88). Alternatively, we could add a heuristic estimate of the remaining cost of finding a solution to f (p) that is more or less independent of the estimate h (p).
Reference: [25] <author> J.S. Penberthy and D.S. Weld. UCPOP: </author> <title> A sound, complete, partial or-der planner for ADL. </title> <editor> In B. Nebel, C. Rich, and W. Swartout, editors, </editor> <booktitle> Proc. of the 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning (KR-92), </booktitle> <pages> pp. 103-114, </pages> <address> Boston, MA, 1992. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Since then there has been an upsurge of activity in well-founded partial-order planning, aimed both at increasing the expressiveness of such planners, and assessing and improving their performance. UCPOP <ref> [25] </ref> and BURIDAN [22] exemplify the move toward greater expressiveness, and some recent performance studies are reported in [4, 20]. Despite these efforts, it seems fair to say that well-founded planners still perform dismally in practical terms. <p> Thus we begin with a sketch of this algorithm, referring the reader to <ref> [3, 25] </ref> for details. UCPOP uses STRIPS-like operators, with positive or negative preconditions and positive or negative effects. The initial state consists of positive predications with constant arguments (if any), and all other ground predications are false by default.
Reference: [26] <author> M. A. Peot and D. E. Smith. </author> <title> Threat-removal strategies for partial-order planning. </title> <booktitle> In Proc. of the 11th Nat. Conf. of the Am. Assoc. for Artificial Intelligence (AAAI-93), </booktitle> <pages> pp. 492-499, </pages> <address> Washington, D.C.,1993. </address>
Reference-contexts: UCPOP did best on T of H but still took over 3 minutes of CPU time on a SUN 10, generating tens of thousands of partial plans. (This was with the "delay separation" switch on <ref> [26] </ref>; 1 with this switch off, performance was typically several times worse.) This is disappointing, since puzzles like T of H are easily solved by inexperienced people, with very little trial and error search; moreover, the very first well-founded planner, C. <p> For unique refinements this narrowing-down is monotonic, never needing revocation. In short, the strategy cuts down the search space without loss of access to viable solutions. Peot and Smith <ref> [26] </ref> studied the strategy of preferring forced threats to unforced threats, and also suggested possible use of a "least commitment" strategy for handling open conditions. "Least commitment" always selects an open condition which generates the fewest refined plans.
Reference: [27] <author> S. Rosenschein. </author> <title> Plan synthesis: a logical perspective. </title> <booktitle> In Proc. of the 7th Int. Joint Conf. on Artificial Intelligence (IJCAI-81), </booktitle> <pages> pp. 331-337, </pages> <year> 1981. </year>
Reference-contexts: This led to a renewal of efforts in the 80's to find viable approaches to well-founded planning. These efforts produced some novel approaches to linear planning such as BIGRESS <ref> [27, 21] </ref> (based on dynamic logic) and Bibel's linear connection method for plan generation [5], as well as the first algorithms for well-founded nonlinear planning, TWEAK [6] (Chapman's partial-order planner based on his "modal truth criterion") and SNLP [23] (another systematic partial-order planner using propositional STRIPS operators).
Reference: [28] <author> E. D. Sacerdoti. </author> <title> The nonlinear nature of plans. </title> <booktitle> In Proc. of the 4th Int. Joint Conf. on Artificial Intelligence (IJCAI-75), </booktitle> <pages> pp. 206-214, </pages> <address> Tbilisi, Georgia, USSR, </address> <month> September </month> <year> 1975. </year>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [16, 30], STRIPS [10], and NOAH <ref> [28] </ref>, and some familiar later examples are NONLIN [31], DEVISER [32], SIPE [33], PRS [11], FORBIN [9], and O-Plan [8].
Reference: [29] <author> R. Srinivasan and A. E. Howe. </author> <title> Comparison of methods for improving search efficiency in a partial-order planner. </title> <booktitle> In Proc. of the 14th Int. Joint Conf. on Artificial Intelligence (IJCAI-95), </booktitle> <address> Montreal, Canada. </address> <month> August </month> <year> 1995. </year>
Reference-contexts: Joslin & Pollack [18] and subsequently Srinivasan & Howe <ref> [29] </ref> proposed some variants of LCFR designed to reduce the overhead incurred by LCFR for flaw selection.
Reference: [30] <author> G. Sussman, T. Winograd, and E. Charniak. </author> <title> Micro-planner reference manual. </title> <type> AI Memo 203, </type> <institution> AI Lab, MIT, </institution> <year> 1970. </year>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language <ref> [16, 30] </ref>, STRIPS [10], and NOAH [28], and some familiar later examples are NONLIN [31], DEVISER [32], SIPE [33], PRS [11], FORBIN [9], and O-Plan [8].
Reference: [31] <author> A. Tate. </author> <title> Generating project networks. </title> <booktitle> In Proc. of the 5th Int. Joint Conf. on Artificial Intelligence (IJCAI-77), </booktitle> <pages> pp. 888-889, </pages> <address> Cambridge, MA, </address> <publisher> MIT, </publisher> <year> 1977. </year>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [16, 30], STRIPS [10], and NOAH [28], and some familiar later examples are NONLIN <ref> [31] </ref>, DEVISER [32], SIPE [33], PRS [11], FORBIN [9], and O-Plan [8]. While STRIPS was a linear planner, a noteworthy characteristic of most later planners, starting with NOAH, was their ability to produce nonlinear (partially ordered) plans, when a partial ordering suffices to guarantee achievement of the goals.
Reference: [32] <author> S.A. Vere. </author> <title> Planning in time: Windows and durations for activities and goals. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 5(3) </volume> <pages> 246-267, </pages> <year> 1983. </year>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [16, 30], STRIPS [10], and NOAH [28], and some familiar later examples are NONLIN [31], DEVISER <ref> [32] </ref>, SIPE [33], PRS [11], FORBIN [9], and O-Plan [8]. While STRIPS was a linear planner, a noteworthy characteristic of most later planners, starting with NOAH, was their ability to produce nonlinear (partially ordered) plans, when a partial ordering suffices to guarantee achievement of the goals.
Reference: [33] <author> D.E. Wilkins. </author> <title> Practical Planning: Extending the Classical AI Planning Paradigm. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: Some of the earliest practically motivated planning "formalisms" were the MICROPLANNER implementation of Hewitt's PLANNER language [16, 30], STRIPS [10], and NOAH [28], and some familiar later examples are NONLIN [31], DEVISER [32], SIPE <ref> [33] </ref>, PRS [11], FORBIN [9], and O-Plan [8]. While STRIPS was a linear planner, a noteworthy characteristic of most later planners, starting with NOAH, was their ability to produce nonlinear (partially ordered) plans, when a partial ordering suffices to guarantee achievement of the goals.
Reference: [34] <author> D.E. Wilkins. </author> <title> Comparative analysis of AI planning systems: </title> <booktitle> a report on the AAAI Workshop. AI Magazine 15(4) </booktitle> <pages> 69-70, </pages> <year> 1994. </year>
Reference-contexts: connecting railroad cars into trains (with use of sidetracks) and pallet management in automated warehouses. (Some of the other problems in the test suite, such as Stuart Russell's "tire domain", are more directly evocative of real-world applications.) Some recent discussions of partial-order planning strategies (e.g., some of those reported in <ref> [34] </ref>) could be interpreted as implying that the level of planning performance achieved so far is about the best that is possible for domain-independent planners; any real improvements from this point on will have to come from exploiting domain-specific information (for instance, in the form of higher-level, multi-step actions or alternatively,
Reference: [35] <author> Q. Yang. </author> <title> A theory a conflict resolution in planning. </title> <journal> Artificial Intelligence, </journal> <volume> 58 </volume> <pages> 361-392, </pages> <year> 1992. </year>
Reference-contexts: Though this problem is in principle NP-hard, algorithms that are very efficient on average are described in [12, 13]. This could be far more efficient than trying each possible promotion and demotion, checking in isolation for consistency with ordering constraints. A similar idea was previously explored in <ref> [35] </ref> using arc consistency techniques, but we think further gains are possible with the algorithms mentioned above, which are more general than arc-consistency testing and employ intelligent backtracking for efficient search.
References-found: 35

