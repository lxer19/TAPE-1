URL: http://www.cs.umn.edu/Users/dept/users/siva/computer.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/siva/
Root-URL: http://www.cs.umn.edu
Email: E-mail Phone/Fax  shekhar@cs.umn.edu siva@cs.umn.edu kumar@cs.umn.edu  gregt@adelphi  
Title: Parallelizing Spatial Databases on Shared-Memory Multiprocessors  
Author: Shashi Shekhar Sivakumar Ravada Vipin Kumar Douglas Chubb Greg Turner Shashi Shekhar Sivakumar Ravada Vipin Kumar ()-/ Douglas Chubb Greg Turner 
Keyword: Declustering Methods, Geographic Information Systems, High Performance, Load-Balancing, Range Query, Shared-Memory Multiprocessors.  
Address: 4-192 EE/CS, 200 Union St. SE Minneapolis, MN 55455  Vint Hill Farms Station Warrenton, VA 22186-5100  Adelphi, MD  
Affiliation: Department of Computer Science University of Minnesota  Research and Technology Division U.S. Army CECOM, RDEC, IEWD  Army Research Laboratory  
Note: Author Address  assb01.army.mil This work was supported by the Army High Performance Computing Research Center under the agreement #DAAH04 95-2-0003/contract #DAAH04-95-C-0008.  
Abstract: Several emerging visualization applications such as flight simulators, distributed interactive simulation (DIS), and virtual reality are using geographic information systems (GISs) for high-fidelity representation of actual terrains. These applications impose stringent performance and response-time restrictions which require parallelization of the GIS and shared-memory multiprocessors (SMPs) are well suited for parallelizing the GIS. Currently, we are developing a high performance GIS on an SMP (Silicon Graphics "Power Challenge") as a part of the virtual GIS project of Army Research Laboratories. Our experimental results with range-query operation show that data-partitioning is an effective approach towards achieving high performance in GIS. As partitioning extended spatial objects is difficult, special techniques such as systematic declustering are needed to parallelize the range-query operation. Systematic declustering methods outperform random declustering methods for range query problems. Even random declustering coupled with dynamic load-balancing (DLB) is outperformed by static load-balancing (SLB) methods with systematic static declustering. In addition, the performance of DLB methods can be improved by using the declustering methods for determining the subsets of polygons to be transferred during run-time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> DIS Home Page. </institution> <note> http://dis.pica.army.mil. </note>
Reference-contexts: processing in the next stage of the system may require movement of data, as the results of the computation will be left in the local memory of each processor. 1.1 Application Domain: Real-Time Terrain Visualization A real-time terrain-visualization [11] system is a virtual environment [5] like distributed interactive simulation system <ref> [1] </ref> which let the users navigate and interact with a three-dimensional computer generated geographic environment in real-time. This type of system has three major components: interaction, 3-D graphics, and GIS. Figure 1 shows the different components of a terrain visualization system for a typical flight simulator.
Reference: [2] <author> S. G. Akl and K. A. Lyons. </author> <title> Parallel Computational Geometry. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, </address> <year> 1993. </year>
Reference-contexts: In the rest of the paper, the word SMP refers to a cache-coherent shared-memory multiprocessor [10]. We also focus on a data-partitioning approach to parallelizing the GIS-range-query as opposed to a CREW PRAM <ref> [2] </ref> approach. The simple approach of dividing the data statically between processors without using any run-time work-transfers is referred to as the static load-balancing (SLB) approach. <p> The query box is then intersected with each of the remaining polygons, and the output is obtained as a set of polygons by polygonizing the results of the intersection computation. The GIS-range-query operation can be parallelized either by function-partitioning <ref> [2] </ref> or by data-partitioning [12]. Function-Partitioning uses specialized data structures (e.g. distributed data structures) and algorithms which may be different from their sequential counterparts. Data-Partitioning techniques divide the data among different processors and independently execute the sequential algorithm on each processor.
Reference: [3] <author> M. T. Fang, R. C. T. Lee, and C. C. Chang. </author> <title> The Idea of Declustering and its Applications. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases, </booktitle> <year> 1986. </year> <month> 14 </month>
Reference-contexts: Function-Partitioning uses specialized data structures (e.g. distributed data structures) and algorithms which may be different from their sequential counterparts. Data-Partitioning techniques divide the data among different processors and independently execute the sequential algorithm on each processor. Data-Partitioning in turn is achieved by declustering <ref> [3] </ref> the spatial data. If the static declustering methods fail to equally distribute the load among different processors, the load-balance may be improved by redistributing parts of the data to idle processors using dynamic load-balancing (DLB) techniques.
Reference: [4] <author> Z. Fang, P.-C. Yew, P. Tang, and C.-Q.Zhu. </author> <title> Dynamic processor self-scheduling for general parallel nested loops. </title> <booktitle> In Proceedings of the International Conference in Parallel Processing, </booktitle> <month> August </month> <year> 1987. </year>
Reference-contexts: On the other hand, too small a 6 pool can also lead to processor idling due to the static load-imbalance in the rest of the data. This two situations are shown in Figure 4. idling. Granularity of Transfers and Data-Partitioning Method Several strategies like self-scheduling <ref> [4] </ref>, factoring scheduling [6], and chunk scheduling [7] exist for determining the amount of work to be transferred during DLB. The first two scheduling strategies are mostly used in pool-based DLB methods while chunk scheduling is applicable in both peer-based and pool-based DLB methods.
Reference: [5] <author> W. Hibbard and D. Santek. </author> <title> Visualizing Large Data Sets in the Earth Sciences. </title> <journal> IEEE Computer, </journal> <note> Special Issue on Vualization in Scientific Computing, </note> <month> August </month> <year> 1989. </year>
Reference-contexts: In case of distributed-memory machines, processing in the next stage of the system may require movement of data, as the results of the computation will be left in the local memory of each processor. 1.1 Application Domain: Real-Time Terrain Visualization A real-time terrain-visualization [11] system is a virtual environment <ref> [5] </ref> like distributed interactive simulation system [1] which let the users navigate and interact with a three-dimensional computer generated geographic environment in real-time. This type of system has three major components: interaction, 3-D graphics, and GIS.
Reference: [6] <author> S. F. Hummel, E. Schonberg, and L. E. Flynn. </author> <title> Factoring a method for scheduling parallel loops. </title> <journal> Communications of the ACM, </journal> <pages> pages 35-90, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: On the other hand, too small a 6 pool can also lead to processor idling due to the static load-imbalance in the rest of the data. This two situations are shown in Figure 4. idling. Granularity of Transfers and Data-Partitioning Method Several strategies like self-scheduling [4], factoring scheduling <ref> [6] </ref>, and chunk scheduling [7] exist for determining the amount of work to be transferred during DLB. The first two scheduling strategies are mostly used in pool-based DLB methods while chunk scheduling is applicable in both peer-based and pool-based DLB methods.
Reference: [7] <author> C. Kruskal and A. Weiss. </author> <title> Allocating independent subtasks on parallel processors. </title> <journal> IEEE Transactions on Software Engineering, </journal> <pages> pages 1001-1016, </pages> <month> October </month> <year> 1985. </year>
Reference-contexts: This two situations are shown in Figure 4. idling. Granularity of Transfers and Data-Partitioning Method Several strategies like self-scheduling [4], factoring scheduling [6], and chunk scheduling <ref> [7] </ref> exist for determining the amount of work to be transferred during DLB. The first two scheduling strategies are mostly used in pool-based DLB methods while chunk scheduling is applicable in both peer-based and pool-based DLB methods.
Reference: [8] <author> V. Kumar, A. Grama, A. Gupta, and G. Karypis. </author> <title> Introduction to Parallel Computing: Design and Analysis of Algorithms. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <year> 1994. </year>
Reference-contexts: Which Processor Should an Idle Processor ask for More Work? Methods to decide which processors an idle processor should ask for more work are discussed and analyzed in <ref> [8] </ref>.
Reference: [9] <author> R. Laurini and D. Thompson. </author> <title> Fundamentals of Spatial Information Systems. </title> <publisher> Academic Press Inc, </publisher> <year> 1992. </year>
Reference-contexts: 1 Introduction A high performance geographic information system (HPGIS) is a central component of many interactive applications like real-time terrain visualization, situation assessment, and spatial decision making. The geographic information system (GIS) <ref> [9] </ref> often contains large amounts of spatial data (geometric and feature data) represented as large sets of points, chains of line-segments, and polygons.
Reference: [10] <author> D. E. Lenoski and W. Weber. </author> <title> Scalable Shared-Memory Multiprocessing. </title> <publisher> Morgan Kaufmann Publishing Company, Inc., </publisher> <year> 1995. </year>
Reference-contexts: Even though the parallel formulations discussed in this paper do not strictly require a symmetric multiprocessor, the availability of cache-coherency eases the implementation of the dynamic load-balancing routines. In the rest of the paper, the word SMP refers to a cache-coherent shared-memory multiprocessor <ref> [10] </ref>. We also focus on a data-partitioning approach to parallelizing the GIS-range-query as opposed to a CREW PRAM [2] approach. The simple approach of dividing the data statically between processors without using any run-time work-transfers is referred to as the static load-balancing (SLB) approach.
Reference: [11] <author> D. R. Pratt, M. Zyda, and K. Kelleher. </author> <title> Guest Editor's Introduction: Virtual Reality-In the Mind of the Beholder. </title> <booktitle> IEEE Computer, Special Issue on Virtual Environments, </booktitle> <month> July </month> <year> 1995. </year>
Reference-contexts: In case of distributed-memory machines, processing in the next stage of the system may require movement of data, as the results of the computation will be left in the local memory of each processor. 1.1 Application Domain: Real-Time Terrain Visualization A real-time terrain-visualization <ref> [11] </ref> system is a virtual environment [5] like distributed interactive simulation system [1] which let the users navigate and interact with a three-dimensional computer generated geographic environment in real-time. This type of system has three major components: interaction, 3-D graphics, and GIS.
Reference: [12] <author> S. Shekhar, S. Ravada, V. Kumar, D. Chubb, and G. Turner. </author> <title> Load-Balancing in High Performance GIS: Declustering Polygonal Maps. </title> <booktitle> In Proceedings of the 4th International Symposium on Large Spatial Databases. Lecture Notes in Computer Science: #951, </booktitle> <address> Springer Verlag. </address> <note> Extended version is avaiable as Technical Report TR 95-076, </note> <institution> Department of Computer Science, University of Minnesota, </institution> <month> August </month> <year> 1995. </year> <month> 15 </month>
Reference-contexts: In case of a distributed-memory machine, data has to be replicated at different processors to reduce the cost of run-time work-transfers, as the communication cost incurred in work-transfers is comparable to the processing cost <ref> [12] </ref> for many GIS operations. This data replication in distributed-memory machines reduces the available total main-memory for storing the spatial data. Another advantage of bus-based shared-memory machines for this kind of problems is that the results of the computation reside in a shared address space. <p> The approach of using work-transfers during run-time to improve the load-balance is referred to as dynamic load-balancing (DLB). 2 Parallel Formulation for GIS-range-query The GIS-range-query problem has three main components: (i) Approximate filtering at the polygon level, (ii) intersection computation, and (iii) polygonization of the result. (See <ref> [12] </ref> for a detailed discussion of a sequential algorithm.) Figure 2 (a) shows the different data structures in the main-memory and the communication pattern of the processor with the main-memory for the GIS-range-query problem. 3 A search structure is used to approximately filter out non-interesting polygons from the set of input <p> The query box is then intersected with each of the remaining polygons, and the output is obtained as a set of polygons by polygonizing the results of the intersection computation. The GIS-range-query operation can be parallelized either by function-partitioning [2] or by data-partitioning <ref> [12] </ref>. Function-Partitioning uses specialized data structures (e.g. distributed data structures) and algorithms which may be different from their sequential counterparts. Data-Partitioning techniques divide the data among different processors and independently execute the sequential algorithm on each processor. Data-Partitioning in turn is achieved by declustering [3] the spatial data. <p> Since the location of the query is not known a priori, it is hard to develop a declustering strategy that is optimal for all range queries. Moreover, the declustering problem for spatial data is shown to be NP-Hard <ref> [12] </ref>. Since the declustering problem is NP-Hard, heuristic methods are used for declustering spatial data. A heuristic declustering method has to address the following four issues: 1.
References-found: 12

