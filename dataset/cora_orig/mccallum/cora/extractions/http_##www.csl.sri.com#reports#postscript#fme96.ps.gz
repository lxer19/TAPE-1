URL: http://www.csl.sri.com/reports/postscript/fme96.ps.gz
Refering-URL: http://www.csl.sri.com/reports/postscript/
Root-URL: 
Email: Email: havelund@litp.ibp.fr  Email: shankar@csl.sri.com  
Phone: 2  
Title: Experiments in Theorem Proving and Model Checking for Protocol Verification  
Author: Klaus Havelund ?? and Natarajan Shankar ??? 
Web: URL: http://cadillac.ibp.fr:8000/~havelund  URL: http://www.csl.sri.com/~shankar/shankar.html  
Address: 4 place Jussieu, 75252 Paris, France  Menlo Park CA 94025, USA  
Affiliation: Oxford  1 LITP, Institut Blaise Pascal,  Computer Science Laboratory, SRI International,  
Date: March 1996,  
Note: To appear in the Proceedings of FME,  
Abstract: Communication protocols pose interesting and difficult challenges for verification technologies. The state spaces of interesting protocols are either infinite or too large for finite-state verification techniques like model checking and state exploration. Theorem proving is also not effective since the formal correctness proofs of these protocols can be long and complicated. We describe a series of protocol verification experiments culminating in a methodology where theorem proving is used to abstract out the sources of unboundedness in the protocol to yield a skeletal protocol that can be verified using model checking. Our experiments focus on the Philips bounded retransmission protocol originally studied by Groote and van de Pol and by Helmink, Sellink, and Vaandrager. First, a scaled-down version of the protocol is analyzed using the Mur state exploration tool as a debugging aid and then translated into the PVS specification language. The PVS verification of the generalized protocol illustrates the difficulty of using theorem proving to verify infinite-state protocols. Some of this difficulty can be overcome by extracting a finite-state abstraction of the protocol that preserves the property of interest while being amenable to model checking. We compare the performance of Mur, SMV, and the PVS model checkers on this reduced protocol. ? Sam Owre (SRI) has assisted with the use of PVS and suggested several improvements to the paper. Sreeranga Rajan (SRI) was instrumental in integrating the mu-calculus model checker (built by Geert Janssen of Eindhoven University of Technology) into PVS. SeungJoon Park of Stanford University implemented the Mur-to-PVS translator. David Cyrluk (SRI and Stanford University) sped up parts of the PVS equality decision procedure. Ken McMillan (Cadence Labs) suggested that we examine forward reachability as a way of obtaining efficiency from the PVS model checker. We are also grateful to John Rushby (SRI) for facilitating Klaus Havelund's visit to SRI, and to Therese Hardin (LITP) for providing a stimulating environment at LITP in Paris. ?? Supported by a European Community HCM grant, with origin institution being DIKU, Institute of Computer Science, University of Copenhagen, Denmark. ??? Supported by NSF Grant CCR-930044 and by ARPA through NASA Ames Research Center under Contract NASA-NAG-2-891 (ARPA Order A721). 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> K. A. Bartlett, R. A. Scantlebury, and P. T. Wilkinson. </author> <title> A note on reliable full-duplex transmission over half-duplex links. </title> <journal> Communications of the ACM, 12(5):260, </journal> <volume> 261, </volume> <month> May </month> <year> 1969. </year>
Reference-contexts: The protocol is a nontrivial extension of the alternating bit protocol <ref> [1] </ref> that uses timeouts and aborts transmission following a bounded number of retransmission attempts. The environment to the protocol consists of the producer and the consumer. The black box view of the system is that it accepts requests REQ (f ) from the producer to transmit the file f .
Reference: 2. <author> Rachel Mary Cardell-Oliver. </author> <title> The formal verification of hard real-time systems. </title> <type> Technical Report 255, </type> <institution> University of Cambridge Computer Laboratory, </institution> <year> 1992. </year>
Reference-contexts: Most finite-state model checking tools cannot cope with potentially infinite but reachably finite state spaces and therefore cannot exploit such an abstraction. Cardell-Oliver <ref> [2] </ref> has used the HOL proof checking system [8] to verify the sliding window protocol. It would be an interesting challenge to obtain a finite-state abstraction of the sliding window protocol.
Reference: 3. <author> K.M. Chandy and J. Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison Wesley, </publisher> <year> 1988. </year>
Reference-contexts: The bulk of their verification is in proving various invariance properties but their main result is a refinement argument showing that one I/O automaton specification implements another more abstract one. We have employed a formalization that is closer to the state-transition model of Unity <ref> [3] </ref> and TLA [14]. By superposing the abstract and concrete state machines, we reduce the refinement demonstration to that of invariance. <p> Mur uses a program model that is similar to Unity <ref> [3] </ref>. A Mur program has three components: a declaration of the global variables, a description of the initial state, and a collection of transition rules.
Reference: 4. <author> E.M. Clark, O. Grumberg, and D.E. </author> <title> Long. Model checking and abstraction. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 16(5) </volume> <pages> 1512-1542, </pages> <month> Septem-ber </month> <year> 1994. </year>
Reference-contexts: Some of the specific abstractions proposed here cannot be obtained by Lam and Shankar's technique. We do not provide a systematic method for obtaining abstractions; this is a topic for future research. The theoretical ideas underlying our use of abstraction have been previously studied <ref> [4, 7, 15] </ref>. 2 The Bounded Retransmission Protocol The bounded retransmission protocol developed at Philips Research Laboratory communicates messages from a producer to a consumer over an unreliable physical medium that can lose messages. <p> The resulting model checker by itself has few advantages over a conventional model checker. The main advantage is when it is combined with theorem proving to exploit the use of abstraction to reduce unbounded state spaces to finite ones. Abstraction is well studied in the literature <ref> [4, 7, 15] </ref>, but the reasoning is usually carried out informally. In order to prove an AG property, there is a simple way to define an abstraction, as shown in [4] and recalled in [21]. <p> Abstraction is well studied in the literature [4, 7, 15], but the reasoning is usually carried out informally. In order to prove an AG property, there is a simple way to define an abstraction, as shown in <ref> [4] </ref> and recalled in [21]. Suppose we are given a concrete, possibly infinite state, system S c (like our protocol) defined by a state type, an initialization predicate and a next-state transition relation over the state.
Reference: 5. <author> C. Cornes, J. Courant, J.C. Filliatre, G. Huet, P. Manoury, C Paulin-Mohring, C. Munoz, C. Murthy, C. Parent, A. Saibi, and B. Werner. </author> <title> The Coq proof assistant reference manual, version 5.10. </title> <type> Technical report, </type> <institution> INRIA, Rocquencourt, France, </institution> <month> February </month> <year> 1995. </year> <note> This version is newer than the version used to verify the BRP-protocol in [10]. </note>
Reference-contexts: File transmission is aborted if any message in the file remains unacknowledged after a fixed number of retransmissions. This protocol has already been verified by researchers at Philips and CWI [10] using the Coq proof checker <ref> [5] </ref> using the framework of Lynch and Tuttle's I/O automata [16]. Their hand proof effort occupied two man-months, and it took them three man-months to mechanize this proof using Coq. The protocol has also been formalized in the process algebra CRL and similarly checked using Coq [9].
Reference: 6. <author> D. Cyrluk, S. Rajan, N. Shankar, and M. K. Srivas. </author> <title> Effective theorem proving for hardware verification. </title> <editor> In Ramayya Kumar and Thomas Kropf, editors, </editor> <booktitle> Theorem Provers in Circuit Design (TPCD '94), volume 910 of Lecture Notes in Com 16 puter Science, </booktitle> <pages> pages 203-222, </pages> <address> Bad Herrenalb, Germany, </address> <month> September </month> <year> 1994. </year> <pages> Springer--Verlag. </pages>
Reference-contexts: While the manual effort required by both their proof and by our initial proof attempt with BRP-PVS is comparable, PVS seems to provide greater and more efficient automation in the verification process particularly through the use of highly optimized rewriting and BDDs <ref> [6] </ref>. Our use of the abstracted protocol BRP-mu yields a simplification in the proof and a valuable technique for other protocol correctness proofs.
Reference: 7. <author> Dennis Dams, Orna Grumberg, and Rob Gerth. </author> <title> Abstract interpretation of reactive systems: Abstractions preserving 8CTL*, </title> <editor> 9CTL* and CTL*. In Ernst-Rudiger Olderog, editor, </editor> <booktitle> Programming Concepts, Methods and Calculi (PROCOMET '94), </booktitle> <pages> pages 561-581, </pages> <year> 1994. </year>
Reference-contexts: Some of the specific abstractions proposed here cannot be obtained by Lam and Shankar's technique. We do not provide a systematic method for obtaining abstractions; this is a topic for future research. The theoretical ideas underlying our use of abstraction have been previously studied <ref> [4, 7, 15] </ref>. 2 The Bounded Retransmission Protocol The bounded retransmission protocol developed at Philips Research Laboratory communicates messages from a producer to a consumer over an unreliable physical medium that can lose messages. <p> The resulting model checker by itself has few advantages over a conventional model checker. The main advantage is when it is combined with theorem proving to exploit the use of abstraction to reduce unbounded state spaces to finite ones. Abstraction is well studied in the literature <ref> [4, 7, 15] </ref>, but the reasoning is usually carried out informally. In order to prove an AG property, there is a simple way to define an abstraction, as shown in [4] and recalled in [21].
Reference: 8. <author> M. J. C. Gordon. </author> <title> HOL: A proof generating system for higher-order logic. </title> <editor> In G. Birtwistle and P. A. Subrahmanyam, editors, </editor> <booktitle> VLSI Specification, Verification and Synthesis, </booktitle> <pages> pages 73-128. </pages> <publisher> Kluwer, </publisher> <address> Dordrecht, The Netherlands, </address> <year> 1988. </year>
Reference-contexts: Most finite-state model checking tools cannot cope with potentially infinite but reachably finite state spaces and therefore cannot exploit such an abstraction. Cardell-Oliver [2] has used the HOL proof checking system <ref> [8] </ref> to verify the sliding window protocol. It would be an interesting challenge to obtain a finite-state abstraction of the sliding window protocol.
Reference: 9. <author> J. F. Groote and J. C. van de Pol. </author> <title> A bounded retransmission protocol for large packets. A case study in computer checked verification. </title> <booktitle> Logic Group Preprint Series 100, </booktitle> <address> Utrecht University, </address> <year> 1993. </year>
Reference-contexts: Their hand proof effort occupied two man-months, and it took them three man-months to mechanize this proof using Coq. The protocol has also been formalized in the process algebra CRL and similarly checked using Coq <ref> [9] </ref>. This proof also required a serious amount of effort. The interesting question therefore is whether this verification effort can be dramatically reduced, perhaps by using a combination of finite state and theorem proving techniques. <p> Our use of the abstracted protocol BRP-mu yields a simplification in the proof and a valuable technique for other protocol correctness proofs. Groote's and van de Pol's specification <ref> [9] </ref> in CRL is notationally compact, but their computer aided verification in Coq requires detailed encoding, and the resulting Coq description is fairly large and their verification is not mechanized to the degree achieved in PVS. 3 Muller and Nipkow [19] use a clever abstraction for reducing the alternating bit protocol
Reference: 10. <author> L. Helmink, M.P.A. Sellink, and F.W. Vaandrager. </author> <title> Proof-checking a data link protocol. </title> <type> Technical Report CS-R9420, </type> <institution> Centrum voor Wiskunde en Informatica (CWI), Computer Science/Department of Software Technology, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: This variant of the alternating bit protocol transmits files each consisting of a sequence of individual messages. File transmission is aborted if any message in the file remains unacknowledged after a fixed number of retransmissions. This protocol has already been verified by researchers at Philips and CWI <ref> [10] </ref> using the Coq proof checker [5] using the framework of Lynch and Tuttle's I/O automata [16]. Their hand proof effort occupied two man-months, and it took them three man-months to mechanize this proof using Coq. <p> The closest related work is obviously the earlier verification of Helmink, Sellink, and Vaandrager <ref> [10] </ref>. The bulk of their verification is in proving various invariance properties but their main result is a refinement argument showing that one I/O automaton specification implements another more abstract one. We have employed a formalization that is closer to the state-transition model of Unity [3] and TLA [14]. <p> We do not model the real-time aspects of the protocol but instead represent the timers by timer events. For example, the timeout event which is supposed to detect message loss is instead defined to occur when a message is lost. This simplification is also present in Helmink, et al <ref> [10] </ref>. The receiver may also retransmit acknowledgments. This happens when the receiver gets a message that it has already received once. The receiver distinguishes between an old message and a new message via the alternating bit (the toggle) which is part of the message. <p> Their formulation in Mur is included in appendix C. In a second proof attempt, several proof optimizations led to a significant reduction in effort. In comparison with the work of Helmink, et al <ref> [10] </ref>, the invariants used are roughly the same but their invariants were discovered by hand in advance of a mechanical proof, whereas we used the PVS proof to guide the discovery of invariants. Rerunning the proof takes 5 hours. <p> We have found it useful and productive to employ a state exploration tool such as Mur as a prelude to full theorem proving. Mur was also useful for checking putative invariants. In <ref> [10] </ref> a refinement between the protocol and an abstract protocol was defined and verified. Our contribution has been to reformulate refinement as a safety property by superposing the implementation and specification of the protocol. This technique seems simple and yet useful. <p> Our contribution has been to reformulate refinement as a safety property by superposing the implementation and specification of the protocol. This technique seems simple and yet useful. The infinite state PVS specification initially took three man-months to verify. This is comparable to the work in Coq <ref> [10] </ref> where they were starting from a hand-written proof.
Reference: 11. <author> G. J. Holzmann. </author> <title> Design and Validation of Computer Protocols. </title> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference-contexts: 1 Introduction Communication protocols are an important class of concurrent algorithms that pose a difficult challenge for existing verification technologies <ref> [11] </ref>. Tools based on model checking and state exploration are effective and widely used for protocol verification, but many real-life protocols are not finite state and cannot be fully analyzed by these methods.
Reference: 12. <author> G. </author> <type> Janssen. </type> <institution> ROBDD software. Department of Electrical Engineering, Eindhoven University of Technology, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: The correspondence between BRP-PVS and BRP-mu is verified using PVS. The resulting finite-state protocol BRP-mu can be verified using a model checking or state exploration tool. We have successfully applied and can compare the PVS model checker <ref> [12] </ref>, Mur [18], and SMV [17] on this example. The model checking part is automatic, but our initial attempts with the PVS model checker were unsuccessful until the mu-calculus definition of invariance was revised to compute fixpoints differently. <p> This level of automation could be achieved primarily because of the flexibility afforded by the PVS decision procedures. 5 Abstraction: Reduction to Finite State Using PVS In recent work [21] a Boolean mu-calculus model checker <ref> [12] </ref> has been integrated into PVS as a decision procedure. This integration uses a relational mu-calculus (quantified Boolean formulas with least and greatest fixpoints of monotone Boolean predicate transformers) as a medium for communicating between PVS and the model checker for the Boolean mu-calculus.
Reference: 13. <author> Simon S. Lam and A. Udaya Shankar. </author> <title> Protocol verification via projections. </title> <journal> IEEE Trans. on S.W. Engg, </journal> <volume> SE-10(4):325-342, </volume> <month> July </month> <year> 1984. </year>
Reference-contexts: Cardell-Oliver [2] has used the HOL proof checking system [8] to verify the sliding window protocol. It would be an interesting challenge to obtain a finite-state abstraction of the sliding window protocol. Lam and Udaya Shankar <ref> [13] </ref> present a systematic method of projecting images of protocols by applying stepwise refinement to the protocol with respect to the property being verified. Their abstractions preserve the property so that protocol M has property P if and only if the abstract protocol M 0 has the property P .
Reference: 14. <author> L. Lamport. </author> <title> The Temporal Logic of Actions. </title> <type> Technical report, </type> <institution> Digital Equipment Corporation (DEC) Systems Research Center, Palo Alto, California, USA, </institution> <month> April </month> <year> 1994. </year>
Reference-contexts: The bulk of their verification is in proving various invariance properties but their main result is a refinement argument showing that one I/O automaton specification implements another more abstract one. We have employed a formalization that is closer to the state-transition model of Unity [3] and TLA <ref> [14] </ref>. By superposing the abstract and concrete state machines, we reduce the refinement demonstration to that of invariance.
Reference: 15. <author> C. Loiseaux, S. Graf, J. Sifakis, A. Bouajjani, and S. Bensalem. </author> <title> Property preserving abstractions for the verification of concurrent systems. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 6 </volume> <pages> 11-44, </pages> <year> 1995. </year>
Reference-contexts: Some of the specific abstractions proposed here cannot be obtained by Lam and Shankar's technique. We do not provide a systematic method for obtaining abstractions; this is a topic for future research. The theoretical ideas underlying our use of abstraction have been previously studied <ref> [4, 7, 15] </ref>. 2 The Bounded Retransmission Protocol The bounded retransmission protocol developed at Philips Research Laboratory communicates messages from a producer to a consumer over an unreliable physical medium that can lose messages. <p> The resulting model checker by itself has few advantages over a conventional model checker. The main advantage is when it is combined with theorem proving to exploit the use of abstraction to reduce unbounded state spaces to finite ones. Abstraction is well studied in the literature <ref> [4, 7, 15] </ref>, but the reasoning is usually carried out informally. In order to prove an AG property, there is a simple way to define an abstraction, as shown in [4] and recalled in [21].
Reference: 16. <author> N.A. Lynch and M.R. Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <booktitle> In Proceedings of the sixth Annual Symposium on Principles of Distributed Computing, </booktitle> <address> New York, </address> <pages> pages 137-151. </pages> <publisher> ACM Press, </publisher> <year> 1987. </year>
Reference-contexts: File transmission is aborted if any message in the file remains unacknowledged after a fixed number of retransmissions. This protocol has already been verified by researchers at Philips and CWI [10] using the Coq proof checker [5] using the framework of Lynch and Tuttle's I/O automata <ref> [16] </ref>. Their hand proof effort occupied two man-months, and it took them three man-months to mechanize this proof using Coq. The protocol has also been formalized in the process algebra CRL and similarly checked using Coq [9]. This proof also required a serious amount of effort.
Reference: 17. <author> K.L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, </address> <year> 1993. </year>
Reference-contexts: The correspondence between BRP-PVS and BRP-mu is verified using PVS. The resulting finite-state protocol BRP-mu can be verified using a model checking or state exploration tool. We have successfully applied and can compare the PVS model checker [12], Mur [18], and SMV <ref> [17] </ref> on this example. The model checking part is automatic, but our initial attempts with the PVS model checker were unsuccessful until the mu-calculus definition of invariance was revised to compute fixpoints differently. <p> Obviously, many more states were explored in this manner. When we apply the SMV model checker <ref> [17] </ref> to the example, it takes 2.5 hours to verify the abstract protocol.
Reference: 18. <author> R. Melton, D.L. Dill, and C. Norris Ip. </author> <title> Murphi annotated reference manual, version 2.6. </title> <type> Technical report, </type> <institution> Stanford University, Palo Alto, California, USA, </institution> <note> Novem-ber 1993. Written by C. Norris Ip. </note>
Reference-contexts: The correspondence between BRP-PVS and BRP-mu is verified using PVS. The resulting finite-state protocol BRP-mu can be verified using a model checking or state exploration tool. We have successfully applied and can compare the PVS model checker [12], Mur <ref> [18] </ref>, and SMV [17] on this example. The model checking part is automatic, but our initial attempts with the PVS model checker were unsuccessful until the mu-calculus definition of invariance was revised to compute fixpoints differently. <p> The receiver now signals IND (m 3 ,LAST) and acknowledges receipt. The sender on receiving this acknowledgment signals CONF (OK) to confirm successful transmission to the producer. 3 State Exploration Using Mur In this section we present the formulation of the protocol and its correctness criteria in Mur <ref> [18] </ref>, a state exploration tool for finite state transition systems. Mur uses a program model that is similar to Unity [3]. A Mur program has three components: a declaration of the global variables, a description of the initial state, and a collection of transition rules.
Reference: 19. <author> O. Muller and T. Nipkow. </author> <title> Combining model checking and deduction for i/o-automata. </title> <institution> Technical University of Munich. </institution> <type> Draft manuscript, </type> <year> 1995. </year>
Reference-contexts: Groote's and van de Pol's specification [9] in CRL is notationally compact, but their computer aided verification in Coq requires detailed encoding, and the resulting Coq description is fairly large and their verification is not mechanized to the degree achieved in PVS. 3 Muller and Nipkow <ref> [19] </ref> use a clever abstraction for reducing the alternating bit protocol to an infinite-state system with only a finite number of reachable states. Most finite-state model checking tools cannot cope with potentially infinite but reachably finite state spaces and therefore cannot exploit such an abstraction.
Reference: 20. <author> S. Owre, J. Rushby, N. Shankar, and F. von Henke. </author> <title> Formal verification for fault-tolerant architectures: Prolegomena to the design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 107-125, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: To explore this question, we first consider a scaled-down version of the protocol BRP-M and show that it can be quickly analyzed and debugged using the Mur state exploration tool from Stanford University. This Mur specification can be converted into PVS <ref> [20] </ref> using a mechanical translator. The PVS description of the protocol is then generalized to the full protocol BRP-PVS, and the main safety property of the protocol is proved in a conventional manner as an invariant.
Reference: 21. <author> S. Rajan, N. Shankar, </author> <title> and M.K. Srivas. An integration of model-checking with automated proof checking. </title> <booktitle> In Computer-Aided Verification (CAV) 1995, Liege, Belgium, Lecture Notes in Computer Science, </booktitle> <volume> Volume 939, </volume> <pages> pages 84-97. </pages> <publisher> Springer Verlag, </publisher> <month> July </month> <year> 1995. </year> <month> 17 </month>
Reference-contexts: Since this level of effort is still very large, we investigate techniques for reducing the verification effort without compromising the generality of the protocol. The PVS theorem prover has recently been extended with mu-calculus based model checking <ref> [21] </ref> so it is natural to ask whether model checking can somehow be applied to BRP-PVS. We answer this question in the affirmative by using theorem proving to construct a property-preserving finite-state abstraction BRP-mu that can be verified using model checking. <p> This level of automation could be achieved primarily because of the flexibility afforded by the PVS decision procedures. 5 Abstraction: Reduction to Finite State Using PVS In recent work <ref> [21] </ref> a Boolean mu-calculus model checker [12] has been integrated into PVS as a decision procedure. This integration uses a relational mu-calculus (quantified Boolean formulas with least and greatest fixpoints of monotone Boolean predicate transformers) as a medium for communicating between PVS and the model checker for the Boolean mu-calculus. <p> Abstraction is well studied in the literature [4, 7, 15], but the reasoning is usually carried out informally. In order to prove an AG property, there is a simple way to define an abstraction, as shown in [4] and recalled in <ref> [21] </ref>. Suppose we are given a concrete, possibly infinite state, system S c (like our protocol) defined by a state type, an initialization predicate and a next-state transition relation over the state.
References-found: 21

