URL: ftp://ftp.cs.rochester.edu/pub/u/rosca/gp/95.ep.exploratory.ps.gz
Refering-URL: http://www.cs.rochester.edu/u/rosca/papers.html
Root-URL: 
Title: Genetic Programming Exploratory Power and the Discovery of Functions  
Author: Justinian P. Rosca 
Abstract: Hierarchical genetic programming (HGP) approaches rely on the discovery, modification, and use of new functions to accelerate evolution. This paper provides a qualitative explanation of the improved behavior of HGP, based on an analysis of the evolution process from the dual perspective of diversity and causality. From a static point of view, the use of an HGP approach enables the manipulation of a population of higher diversity programs. Higher diversity increases the exploratory ability of the genetic search process, as demonstrated by theoretical and experimental fitness distributions and expanded structural complexity of individuals. From a dynamic point of view, an analysis of the causality of the crossover operator suggests that HGP discovers and exploits useful structures in a bottom-up, hierarchical manner. Diversity and causality are complementary, affecting exploration and exploitation in genetic search. Unlike other machine learning techniques that need extra machinery to control the tradeoff between them, HGP automatically trades off exploration and exploitation. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Altenberg, L. </author> <year> (1994). </year> <title> The evolution of evolvability. </title> <editor> In K. Kinnear, editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: The lens effect (Koza 1994b) is the idea that the tails of the fitness distribution for randomly generated programs are larger for the ADF-GP than for standard GP. The effect is attributed to the introduction of new functions into the representation. <ref> (Altenberg 1994) </ref> outlines that a similar property should be observed in general in order to make GP search more efficient than 5 random search: the upper tail of the offspring fitness distribution should be wider than that for random search.
Reference: <editor> Angeline, P. J. </editor> <booktitle> (1994) Genetic programming and emergent intelligence. </booktitle> <editor> In K. Kinnear, editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: The analysis of building blocks in AR-GP (Rosca and Ballard 1994a) starts from this hypothesis and takes a functional approach. The ADF approach, presented earlier, is also a method of representing and using modularity in GP. Another method, module acquisition <ref> (Angeline 1994) </ref>, (Angeline and Pollack 1994) introduced many inspirational ideas. A module is a function with a unique name defined by selecting and chopping off branches of a subtree selected randomly from an individual. <p> The analysis of building blocks in AR-GP (Rosca and Ballard 1994a) starts from this hypothesis and takes a functional approach. The ADF approach, presented earlier, is also a method of representing and using modularity in GP. Another method, module acquisition (Angeline 1994), <ref> (Angeline and Pollack 1994) </ref> introduced many inspirational ideas. A module is a function with a unique name defined by selecting and chopping off branches of a subtree selected randomly from an individual.
Reference: <author> Angeline, P. J., and J. B. </author> <title> Pollack (1994). Coevolving high level representations. </title> <editor> In C. G. Langton, editor, </editor> <booktitle> Artificial Life III, SFI Studies in the Sciences of Complexity, </booktitle> <volume> volume XVII, </volume> <pages> pages 55-71, </pages> <address> Redwood City, CA, </address> <publisher> Addison-Wesley. </publisher>
Reference-contexts: The analysis of building blocks in AR-GP (Rosca and Ballard 1994a) starts from this hypothesis and takes a functional approach. The ADF approach, presented earlier, is also a method of representing and using modularity in GP. Another method, module acquisition <ref> (Angeline 1994) </ref>, (Angeline and Pollack 1994) introduced many inspirational ideas. A module is a function with a unique name defined by selecting and chopping off branches of a subtree selected randomly from an individual. <p> The analysis of building blocks in AR-GP (Rosca and Ballard 1994a) starts from this hypothesis and takes a functional approach. The ADF approach, presented earlier, is also a method of representing and using modularity in GP. Another method, module acquisition (Angeline 1994), <ref> (Angeline and Pollack 1994) </ref> introduced many inspirational ideas. A module is a function with a unique name defined by selecting and chopping off branches of a subtree selected randomly from an individual.
Reference: <author> Cormen, T. H., and C. E. Leiserson, and R. L. Rivest. </author> , <title> (1990) Introduction to Algorithms. </title> <publisher> MIT Press. </publisher>
Reference-contexts: It follows that P robfX = kg = 1 k (3) The expected value of X is n 2 and its variance is n 4 <ref> (Cormen et al. 1990) </ref>. Program diversity In order to understand the role of representation and the effect of dynamically changing it we designed a set of experiments for estimating qualitative measures of diversity such as fitness distributions and program size in GP and HGP.
Reference: <author> Cramer, N. L. </author> <year> (1985). </year> <title> A representation for the adaptive generation of simple sequential programs. </title> <booktitle> In Proceedings of the First International Conference on Genetic Algorithms. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference-contexts: Discovered functions represent an adaptive control mechanism in the exploration-exploitation tradeoff. In conclusion the paper discusses the results and suggests future research. 2 2 HIERARCHICAL GENETIC PROGRAMMING Genetic programming departs from the genetic algorithm (GA) paradigm by using trees to represent genotypes <ref> (Cramer 1985) </ref>, (Koza 1992). Trees provide a flexible representation for creating and manipulating programs. This paper uses the denotations tree and subtree to refer to the parse tree of a program or a part of it respectively. Problem representation in GP is defined by a set of problem-dependent primitive functions.
Reference: <author> Holland, J. H. </author> <year> (1992). </year> <title> Adaptation in Natural and Artificial Systems, An Introductory Analysis with Applications to Biology, </title> <booktitle> Control and Artificial Intelligence. </booktitle> <publisher> MIT Press, 2nd edition. </publisher>
Reference-contexts: However, by using directly the size constraint the GP algorithm is prevented from finding solutions. The algorithm improves convergence to a better optimum while maintaining speed. Exploration and exploitation are recurring themes in search and learning problems <ref> (Holland 1992) </ref>, (Kaelbling 1993). Exploitation takes place when search proceeds based on the action prescribed by the current system knowledge. Exploration is usually based on random actions, taken in order to experiment with more situations.
Reference: <author> Kaelbling, L. P. </author> <year> (1993). </year> <title> Learning in Embedded Systems. </title> <publisher> MIT Press. </publisher>
Reference-contexts: However, by using directly the size constraint the GP algorithm is prevented from finding solutions. The algorithm improves convergence to a better optimum while maintaining speed. Exploration and exploitation are recurring themes in search and learning problems (Holland 1992), <ref> (Kaelbling 1993) </ref>. Exploitation takes place when search proceeds based on the action prescribed by the current system knowledge. Exploration is usually based on random actions, taken in order to experiment with more situations. For example, in learning classifier systems, roulette wheel action selection is a means of choosing exploratory actions.
Reference: <author> Kinnear, K. </author> <year> (1994). </year> <title> Alternatives in automatic function definition. </title> <editor> In K. Kin-near, editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: It has been conjectured that problems whose solutions present symmetry patterns or opportunities to parameterize and reuse code can be solved easier in ADF-GP (Koza 1994b) but there exists no formal explanation of why ADF-GP works better than standard GP. <ref> (Kinnear 1994) </ref> explains why ADF-GP works by introducing the notion of structural regularity. He compares ADF-GP against the module acquisition approach and points out that the module acquisition approach does not directly create structural regularity.
Reference: <author> Koza, J. R. </author> <year> (1992). </year> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts. </address>
Reference-contexts: Such GP extensions have been designed with the goal of automating the discovery of functions that are beneficial during the search for solutions by exploiting opportunities to parameterize and reuse code. Two such techniques are automatic definition of functions (ADF) <ref> (Koza 1992) </ref> and adaptive representation (AR) (Rosca and Ballard 1994a). The former is a GP extension that allows the evolution of reusable subroutines. The latter is based on the discovery of useful building blocks of code. These blocks are identified by analyzing the trajectory of evolution. <p> Discovered functions represent an adaptive control mechanism in the exploration-exploitation tradeoff. In conclusion the paper discusses the results and suggests future research. 2 2 HIERARCHICAL GENETIC PROGRAMMING Genetic programming departs from the genetic algorithm (GA) paradigm by using trees to represent genotypes (Cramer 1985), <ref> (Koza 1992) </ref>. Trees provide a flexible representation for creating and manipulating programs. This paper uses the denotations tree and subtree to refer to the parse tree of a program or a part of it respectively. Problem representation in GP is defined by a set of problem-dependent primitive functions. <p> For example, the inclusion of more complex functions, known to be part of a final solution, will result in less computational effort spent during search and thus will enable a shorter time to finding a final solution. The HGP approaches presented below, automatic definition of functions (ADF-GP) <ref> (Koza 1992) </ref> and adaptive representation (AR-GP) (Rosca and Ballard 1994a) use the above observation in different ways in order to accelerate search. <p> The main goal was understanding if GP problems have building block structure and when GP is superior to other search techniques. The approach was to generalize the definition of a GP schema from <ref> (Koza 1992) </ref> to a collection of tree fragments, that is a collection of trees possibly having subtrees removed. An individual instantiates a schema in case it covers (matches) all the schema fragments, overlappings between fragments not being allowed. The probability of disruption by crossover is estimated based on these definitions. <p> EVEN-n-PARITY can be defined by flipping the result of 6 ODD-n-PARITY. The ODD-n-PARITY and EVEN-n-PARITY functions appear to be difficult to learn in GP, especially for values of n greater than five <ref> (Koza 1992) </ref>. <p> Second, we vary the composition of the primitive function set and analyze again the fitness distribution of randomly generated GP programs. Third, we analyze the expanded structural complexity of GP and HGP solu tions. The method of generating GP individuals in the second experiment, borrowed from <ref> (Koza 1992) </ref>, is the ramped-half-and-half method. In order to create an initial population of increased diversity this method generates trees of depth varying modulo the initial maximum size (taken to be six) and of either balanced or random shape. <p> From the static point of view of creating an initial population, using ADFs is equivalent to considering a larger initial function set. A more formal interpretation of this remarks can be stated by considering the closure requirement in GP <ref> (Koza 1992) </ref>. Closure requires that any function be well defined for any combination of arguments (terminals or results of other function calls) that it may encounter.
Reference: <author> Koza, J. R. </author> <year> (1994). </year> <title> Architecture-altering operations for evolving the architecture of a multi-part program in genetic programming. </title> <institution> Computer Science Department STAN-CS-TR-94-1528, Stanford University. </institution>
Reference: <author> Koza, J. R. </author> <year> (1994). </year> <title> Genetic Programming II. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mas-sachusetts. </address>
Reference: <author> Lohmann, P. </author> <year> (1992). </year> <title> Structure evolution and incomplete induction. </title> <booktitle> In Parallel Problem Solving from Nature 2, </booktitle> <pages> pages 175-185. </pages> <publisher> Elsevier Science Publishers. </publisher>
Reference-contexts: The principle of strong causality states that small alterations in the underlying structure of an object, or small departures from the cause determine small changes of the object's behavior, or small changes of the effects, respectively (Rechenberg 1994), <ref> (Lohmann 1992) </ref>. In GP small alterations of the programs may generate big changes in behavior. From this perspective GP is weakly causal. The trend of structures called birth certificates are presented as evidence for the way HGP inherits useful structures.
Reference: <author> O'Reilly, U.-M. and F. Oppacher, </author> <title> (1994) . The troubling aspects of a building block hypothesis for genetic programming. </title> <booktitle> In Proceedings of the Third Workshop on Foundations of Genetic Algorithms. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference: <author> Rechenberg, I. </author> <year> (1994). </year> <title> Evolution strategy. </title> <editor> In J. M. Zurada, R. J. Marks-II, and C. J. Robinson, editors, </editor> <booktitle> Computational Intelligence Imitating Life, </booktitle> <pages> pages 147-159. </pages> <note> IEEE Press. 17 Rosca, </note> <author> J. P. </author> <year> (1995). </year> <title> An analysis of hierarchical genetic programming. </title> <type> Tech--nical Report 566, </type> <institution> University of Rochester, Computer Science Department, </institution> <month> January. </month>
Reference-contexts: The principle of strong causality states that small alterations in the underlying structure of an object, or small departures from the cause determine small changes of the object's behavior, or small changes of the effects, respectively <ref> (Rechenberg 1994) </ref>, (Lohmann 1992). In GP small alterations of the programs may generate big changes in behavior. From this perspective GP is weakly causal. The trend of structures called birth certificates are presented as evidence for the way HGP inherits useful structures.
Reference: <author> Rosca, J. P. and D. H. </author> <title> Ballard (1994). Genetic programming with adaptive representations. </title> <type> Technical Report 489, </type> <institution> University of Rochester, Computer Science Department. </institution>
Reference: <author> Rosca, J. P. and D. H. </author> <title> Ballard (1994). Hierarchical self-organization in genetic programming. </title> <booktitle> In Proceedings of the Eleventh International Conference on Machine Learning. </booktitle> <publisher> Morgan Kaufmann Publishers, Inc. </publisher>
Reference: <author> Rosca, J. P. and D. H. </author> <title> Ballard (1994). Learning by adapting representations in genetic programming. </title> <booktitle> In Proceedings of the IEEE World Congress on Computational Intelligence. </booktitle> <publisher> IEEE Press, </publisher> <address> Orlando. </address>
Reference: <author> Ryan, C. O. </author> <year> (1994). </year> <editor> Pygmies and civil servants. In K. Kinnear, editor, </editor> <booktitle> Advances in Genetic Programming. </booktitle> <publisher> MIT Press. </publisher>
Reference-contexts: These operations are causal in the sense discussed later in this paper. A rule of thumb in GA literature postulates that population diversity is important for avoiding premature convergence. A comparison of research on this topic is provided in <ref> (Ryan 1994) </ref>. Ryan shows that maintaining increased diversity in GP leads to better performance. His algorithm is called disassortative mating because it selects parents for crossover from two different lists of individuals.
Reference: <author> Wills, C. </author> <year> (1993). </year> <title> The Runaway Brain. </title> <publisher> BasicBooks. </publisher>
Reference-contexts: In particular, offspring of individuals that are already partially adapted to the environment and already have a complex structure are more likely to have a worse fitness. This is close to the conclusions of the role of mutation in natural evolution <ref> (Wills 1993) </ref>. Consider a partial solution to a hypothesis formation problem obtained using standard GP and represented by a tree T .
Reference: <author> Wilson,S. W. </author> <year> (1994). </year> <title> Zcs: A zeroth level classifier system. </title> <journal> Evolutionary Computation, </journal> <volume> 2(1) </volume> <pages> 1-18. 18 </pages>
References-found: 20

