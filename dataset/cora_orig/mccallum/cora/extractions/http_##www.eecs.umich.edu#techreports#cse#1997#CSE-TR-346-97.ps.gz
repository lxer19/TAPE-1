URL: http://www.eecs.umich.edu/techreports/cse/1997/CSE-TR-346-97.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse97.html
Root-URL: http://www.cs.umich.edu
Email: (tyson@eecs.umich.edu) (klick@cs.ucr.edu) (farrens@cs.ucdavis.edu)  
Title: Limited Dual Path Execution  
Author: Gary Tyson Kelsey Lick Matthew Farrens 
Address: Ann Arbor, MI Riv erside, CA Davis, CA 95616  
Affiliation: Electrical Engineering and Department of Department of ^Computer Science Department Computer Science Computer Science The University of Michigan University of California, Davis University of California, Riverside  
Abstract: This work presents a hybrid branch predictor scheme that uses a limited form of dual path execution along with dynamic branch prediction to improve execution times. The ability to execute down both paths of a conditional branch enables the branch penalty to be minimized; however, relying exclusively on dual path execution is infeasible due because instruction fetch rates far exceed the capability of the pipeline to retire a single branch before others must be processed. By using confidence information, available in the dynamic branch prediction state tables, a limited form of dual path execution becomes feasible. This reduces the burden on the branch predictor by allowing predictions of low confidence to be avoided. In this study we present a new approach to gather branch prediction confidence with little or no overhead, and use this confidence mechanism to determine whether dual path execution or branch prediction should be used. Comparing this hybrid predictor model to the dynamic branch predictor shows a dramatic decrease in misprediction rate, which translates to an reduction in runtime of over 20%. These results imply that dual path execution, which often is thought to be an excessively resource consuming method, may be a worthy approach if restricted with an appropriate predicting set. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W.D. Conners, J. Florkowski and S.K. Patton, </author> <title> "The IBM 3033: An Inside Look," </title> <booktitle> In Datamation, </booktitle> <pages> pages 198-218, </pages> <month> May </month> <year> 1979. </year>
Reference-contexts: This approach is not new the IBM 3168 and 3033 mainframes used a similar approach back in the late 1970's (instructions were fetched from both paths, but the instructions from only one path could be decoded and executed) <ref> [1] </ref>. Unfortunately, giv en the known distribution of branch instructions and the number of instructions that are often "in ight" in a current processor, it is inevitable that another branch instruction will be encountered by one (or both) of the streams before the initial branch condition is resolved.
Reference: [2] <author> Augustus K. Uht and Vijay Sindagi, </author> <title> "Disjoint Eager Execution: An optimal form of speculative execution," </title> <booktitle> in Proceedings of the 28th Annual International Symposium on Microarchitecture (MICRO-28), </booktitle> <pages> pages 313-325, </pages> <month> Nov. </month> <year> 1995 </year>
Reference-contexts: In order to limit the cost necessary to support multiple path execution, Uht <ref> [2] </ref> proposed a technique called Disjoint Eager Execution (DEE) which limits the number of concurrent executing paths by using a selector to decide which paths to execute. The selectors are based on statically calculated probabilities.
Reference: [3] <author> Gary Tyson, </author> <title> "The Effects of Predicated Execution on Branch Prediction", </title> <booktitle> in 27th Annual Interna tional Symposium on Microarchitecture, </booktitle> <pages> pages 196-205, </pages> <address> Nov. 30-Dec. 2, San Jose, CA, </address> <year> 1994 </year>
Reference-contexts: The selectors are based on statically calculated probabilities. However, studies of the characteristics of branch behavior <ref> [3] </ref> indicate that certain branches are much more difficult to predict than others.
Reference: [4] <author> E. Rotenberg, S. Bennett, and J.E. Smith, </author> <title> "Trace Cache: A Low Latency Approach to High Bandwidth Instruction Fetching," </title> <booktitle> in 29th Annual International Symposium on Microarchitecture, </booktitle> <address> Paris, France, </address> <month> Dec. </month> <year> 1996 </year>
Reference-contexts: Fortunately, recent improvements in the design of processor fetch mechanisms <ref> [4] </ref> imply that a more restrictive form of dual path execution is feasible. We will not, however, explore front end issues in this paper. - 2 - predictor.
Reference: [5] <author> Scott McFarling, </author> <title> "Combining Branch Predictors", </title> <type> Technical Report TN-36, </type> <institution> DEC-WRL, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: In the following section we will explore this question in more detail. 3. Assigning Confidence to Branch Prediction Hybrid branch predictors <ref> [5] </ref> use selectors to determine which component is more confident in its prediction. In the technique described in the previous section, confidences are assigned to the branch patterns and a selecting set was be used to determine whether to predict or perform dual path execution. <p> This requires a pattern history table of size 4096 indexed by the lower 12 bits of the branch address XORed with the pattern. Gshare has been found to achieve high accuracies without the high cost needed for many other predictors. <ref> [5] </ref>. The last two predictors studied are variations of the two-level adaptive scheme. Both PAg and PAs are implemented. PAg uses a per-address branch history register table, and the depth of the history bits was varied between 8, 12, and 16 bits which then indexed into a global PHT.
Reference: [6] <author> Erik Jacobsen, Eric Rotenberg, and James E. Smith, </author> <title> "Assigning Confidence to Conditional Brnach Predictions", </title> <booktitle> in 29th Annual International Symposium on Microarchitecture, </booktitle> <pages> pages 142-152, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: In the technique described in the previous section, confidences are assigned to the branch patterns and a selecting set was be used to determine whether to predict or perform dual path execution. This technique is substantially different than that used by Jacobsen et al <ref> [6] </ref>. In their work, extra hardware was added to keep track of the performance of the branch predictor. In LDPE we are proposing extracting more information from the existing hardware. 3.1. Experimental System The initial experiments for this research were conducted using UltraSPARC model 170E systems.
Reference: [7] <author> Kelsey Lick and Gary Tyson, </author> <title> "Hybrid Branch Prediction Using Limited Dual Path Execution", </title> <institution> Department of Computer Science Technical Report #UCR-CS-96-7, University of California, River side, </institution> <month> November </month> <year> 1996. </year> <month> - 14 </month> - 
Reference-contexts: The characteristics of branches examined previously can also be seen when looking at patterns. In perl, using the predictor PAg (12), 4 distinct patterns correspond to over 90% of the total references. It has been shown <ref> [7] </ref> that branches are highly biased toward a particular pattern or direction and since branches may map to more than one pattern throughout the execution of a program, targeting patterns can encompass more branch references and branch mispredictions. 3.5.
References-found: 7

