URL: http://www.cs.toronto.edu/~ftp/pub/reports/na/zuberi-96-msc.ps.Z
Refering-URL: http://www.cs.toronto.edu/NA/reports.html
Root-URL: http://www.cs.toronto.edu
Title: Improving the Efficiency of Runge-Kutta Methods for the Solution of BVPs for Higher-Order ODEs  
Author: by Khalid Zuberi 
Degree: A thesis submitted in conformity with the requirements for the degree of Master of Science  
Note: c Copyright Khalid Zuberi 1996  
Address: Toronto  
Affiliation: Graduate Department of Computer Science University of  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> U.M. Ascher, R.M.M. Mattheij and R.D. Russell, </author> <title> Numerical Solution of Boundary Value Problems for Ordinary Differential Equations, </title> <publisher> Prentice Hall, </publisher> <address> Engle-wood Cliffs, </address> <year> 1988. </year>
Reference-contexts: A predictor-corrector scheme is used, along with a function denoted g called the objective function, to select the [i] for each iteration. A more complete discussion of the damped Newton method is found in <ref> [1] </ref>. Here we mention only the natural criterion function, defined to be g (W; ffiW ) = 1 k 0 (W ) 1 (W + ffiW )k 2 : (2.19) Note that g varies from iteration to iteration, though here we have dropped the superscripts. <p> k, we obtain from (3.19) using (3.13) @ n (i+1) = h r=1 s X ! r (1 fl r )I + O (h 2 ) h (1 fl)I; (3.21) where we have used s X ! r = 1; (3.22) which follows from the order conditions (see, for example, <ref> [1] </ref>), and we have defined fl = r=1 Otherwise, from (3.19), using (3.14), when i 6= k and i + 1 6= k @ n (k) = h r=1 = O (h 2 ) We proceed in a similar fashion for the other partial derivatives. <p> Two types of nonlinear system solvers were used in the tests: Newton's method and a damped Newton method based on one presented in <ref> [1] </ref>. The details of these non-linear system solvers are given in Tables 4.1 and 4.2. The main algorithm of the BVP solver is given in Table 4.3. <p> The problem is defined by y 00 = * for * a small parameter. The boundary conditions are y (1) = 1; y (1) = 2: (4.5) No closed form solution is available for this problem. CHAPTER 4. NUMERICAL TESTING 40 4.2.3 Shock Wave This problem is from <ref> [1] </ref>. It also contains a parameter with which we can control difficulty.
Reference: [2] <author> K. Burrage, F.H. Chipman and P.H. Muir, </author> <title> Order results for mono-implicit Runge-Kutta methods, </title> <journal> SIAM J. Numer. Anal., </journal> <volume> Vol. 31, No. 3, </volume> <pages> pp. 876-891, </pages> <year> 1994. </year>
Reference-contexts: 1 0 0 : : : 0 0 . . . . . . . . . c s fl s fi s1 : : : fi s s1 0 : (2.9) A discussion of order results for MIRK methods and a characterisation of low-order methods can be found in <ref> [2] </ref>. 2.3 Solving two-point BVPs using RK methods: an overview Although originally used to solve initial value problems, RK methods are often used to solve BVPs for ODEs. In this section we briefly describe how RK methods can be CHAPTER 2.
Reference: [3] <author> J.W. Daniel and A.J. Martin, </author> <title> Implementing deferred corrections for Numberov's difference method for second-order two-point boundary value problems, Center for Numerical Analysis, </title> <institution> The University of Texas at Austin, </institution> <type> Technical Report CNA-107, </type> <month> November </month> <year> 1975. </year>
Reference-contexts: NUMERICAL TESTING 39 4.2 Test problems and results 4.2.1 Daniel and Martin 75 A simple test problem from <ref> [3] </ref> is y 00 = 2 y (0) = 0; y (1) = 0; (4.2) which has the solution y (x) = (2 x) 2 This problem was tested a second time, with the original system of equations repeated 10 times to make the system artificially larger.
Reference: [4] <author> J.C. Diaz, G. Fairweather and P. Keast, </author> <title> FORTRAN packages for solving certain almost block diagonal linear systems by modified alternate row and column elimination, </title> <journal> ACM Trans. Math. Software, </journal> <volume> Vol. 9, No. 3, </volume> <pages> pp. 358-375, </pages> <year> 1983. </year>
Reference-contexts: With this assumption, the boundary blocks have the same size as the rest of the blocks in (3.40), so algebraic manipulations on the block-rows and block-columns of the matrix are convenient. Current codes might solve this system by modified alternate row-column elimination as discussed in <ref> [4] </ref>. This procedure is based on the familiar Gaussian elimination and has accuracy properties similar to Gaussian elimination, but alternates row and column eliminations to avoid fill-in, and so performs efficiently for matrices with an ABD structure.
Reference: [5] <author> W.H. Enright and Min Hu, </author> <title> Improving performance when solving high order and mixed order boundary value problems in ODEs, </title> <institution> Department of Computer Science Technical Report, University of Toronto, </institution> <year> 1995. </year>
Reference-contexts: This result requires only that G be continuously differentiable at W fl and is valid for the general iteration (2.14). See [14] for a much more complete discussion of iterative methods for solving nonlinear equations. 2.5 Simple improvements for reduced systems Recent work by Enright and Hu <ref> [5] </ref> demonstrates a simple way to take advantage of the structure of reduced systems of differential equations when solving BVPs. Although we do not apply their technique in our work, their results demonstrate some of the CHAPTER 2.
Reference: [6] <author> W.H. Enright and Paul Muir, </author> <title> A Runge-Kutta type boundary value ODE solver with defect control, </title> <institution> Department of Computer Science Technical Report 267/93, University of Toronto, </institution> <year> 1993. </year>
Reference-contexts: This optimisation is not restricted to uniform-order systems of equations; very similar results are obtained for mixed-order systems. Enright and Hu tested their scheme by modifying MIRKDC <ref> [6] </ref>, a code that solves boundary value problems using MIRK methods, and also a shooting code, with favourable results. <p> For two of the problems, additional tests on a fine nonuniform mesh are also included. We report the number of Newton iterations required for each solution, the error in the final solution compared to a solution obtained from MIRKDC <ref> [6] </ref> for the same problem computed with a tolerance of 10 8 , and we report its cost in terms of number of floating-point operations. The MATLAB flops command was used to obtain the latter result. <p> Set W = W + ffiW . Table 4.1: Algorithm for calculating a single Newton step The actual MIRK method used in the tests is the five-stage sixth-order method defined by the tableau given in Table 4.4, which is also the method used by the package MIRKDC <ref> [6] </ref>. CHAPTER 4. NUMERICAL TESTING 37 * Input: A Matrix A, vector b, iteration counter k, and current approxi mate solution W . * Output: An updated approximate solution W , flag status, and norm n. * Algorithm 1.
Reference: [7] <author> Gene H. Golub and Charles F. van Loan, </author> <title> Matrix Computations, </title> <publisher> The John Hop-kins University Press, </publisher> <year> 1983. </year> <note> 49 BIBLIOGRAPHY 50 </note>
Reference-contexts: In the worst case element growth can be proportional to 2 2m1 , as shown in <ref> [7] </ref>. In our specialised method, we have arranged for the matrix on the bottom left CHAPTER 3.
Reference: [8] <author> Ken Jackson, </author> <title> Solving higher order ODEs in a BVP code: some preliminary remarks, unpublished note, </title> <year> 1993. </year>
Reference-contexts: For convenience of notation we assume the mesh width is uniform, although the results are valid for a non-uniform mesh. A derivation similar to the one presented here for the particular case p = 2, on which this section is largely based, is due to Ken Jackson <ref> [8] </ref>. Consider a p th -order system of ODEs as in (2.24), but where y 2 &lt; m , so that it is 13 CHAPTER 3. APPROXIMATE JACOBIANS FOR MIRK METHODS 14 a system of m p th -order ODEs.
Reference: [9] <author> K.R. Jackson and R.N. Pancer, </author> <title> The parallel solution of ABD systems arising in numerical methods for BVPs for ODEs, </title> <institution> Department of Computer Science Technical Report 255/91, University of Toronto, </institution> <year> 1992. </year>
Reference-contexts: We point out that newer algorithms exist that also efficiently solve ABD systems, especially using parallelism, such as those based on stable local factorisations [15], and eigenvalue rescaling <ref> [9] </ref>. We are focussed, however, on the sequential case, and find that modified alternate row-column elimination is amenable to modifications to make use of additional structure in the system being solved. We outline this procedure briefly in the next subsection. In Subsections 3.2.2 and 3.2.3 we describe our CHAPTER 3.
Reference: [10] <author> Barbro Kreiss and Heinz-Otto Kreiss, </author> <title> Numerical methods for singular perturbation problems, </title> <journal> SAM J. Numer. Anal., </journal> <volume> Vol. 18, No. 2, </volume> <month> April </month> <year> 1981. </year>
Reference-contexts: This is useful in observing the improvement in performance which we expect for systems of larger size m. 4.2.2 Kreiss `81 Kreiss `81 <ref> [10] </ref> is a singular perturbation problem which has a parameter with which we can control difficulty. The problem is defined by y 00 = * for * a small parameter.
Reference: [11] <author> The MathWorks, Inc., </author> <title> MATLAB, 24 Prime Park Way, </title> <address> Natick, MA 01760. </address>
Reference-contexts: Chapter 4 Numerical testing 4.1 A simple test implementation Simple BVP solvers were implemented using MATLAB <ref> [11] </ref> to test the behaviour and performance of the experimental solution techniques described in the previous chapter. Two types of nonlinear system solvers were used in the tests: Newton's method and a damped Newton method based on one presented in [1].
Reference: [12] <author> Paul Muir, </author> <title> Implicit Runge-Kutta methods for two-point boundary value problems, </title> <institution> Department of Computer Science Technical Report 175/84, University of Toronto, </institution> <year> 1984. </year>
Reference-contexts: Hence there is a relationship between these two classes. Our work concentrates on a class of Runge-Kutta (RK) methods known as mono-implicit Runge-Kutta (MIRK) <ref> [12] </ref> methods, but can be extended to more general RK methods. For BVPs, MIRK methods have the desirable stability properties of implicit RK methods, while having efficiency comparable to explicit RK methods. <p> Implicitly defined stages would require an additional system solve and add a level of iteration at the innermost loop of the solution code, resulting in a significant impact on performance. See <ref> [12] </ref> for a description of the use of implicit RK and MIRK formulas for solving BVPs.
Reference: [13] <author> Paul Muir and Karin Remington, </author> <title> A parallel implementation of a Runge-Kutta code for systems of nonlinear boundary value ODEs, </title> <type> Congressus Numerantium 99, </type> <pages> pp. 291-305, </pages> <year> 1994. </year>
Reference-contexts: Chapter 3 Approximate Jacobians for MIRK methods 3.1 Derivation of an approximate Jacobian A large portion of the total cost of a BVP code using RK methods lies in constructing the Jacobian matrix of the discrete system that approximates the problem. Profiling reported for MIRKDC in <ref> [13] </ref> indicates the setup of the residual and the Jacobian 0 = @=@W accounts for approximately 55% of the total cost of computing a solution. For systems of large size m, this percentage may be even higher.
Reference: [14] <author> J. M. Ortega and W. C. Rheinboldt, </author> <title> Iterative Solution of Nonlinear Equations in Several Variables, </title> <publisher> Academic Press, </publisher> <address> New York and London, </address> <year> 1970. </year>
Reference-contexts: This result requires only that G be continuously differentiable at W fl and is valid for the general iteration (2.14). See <ref> [14] </ref> for a much more complete discussion of iterative methods for solving nonlinear equations. 2.5 Simple improvements for reduced systems Recent work by Enright and Hu [5] demonstrates a simple way to take advantage of the structure of reduced systems of differential equations when solving BVPs.
Reference: [15] <author> S. J. Wright, </author> <title> Stable parallel algorithms for two-point boundary value problems, </title> <journal> SIAM J. Sci. Statist. Comput., Vol.13, </journal> <volume> No. 2, </volume> <pages> pp. 742-764, </pages> <year> 1992. </year>
Reference-contexts: We point out that newer algorithms exist that also efficiently solve ABD systems, especially using parallelism, such as those based on stable local factorisations <ref> [15] </ref>, and eigenvalue rescaling [9]. We are focussed, however, on the sequential case, and find that modified alternate row-column elimination is amenable to modifications to make use of additional structure in the system being solved. We outline this procedure briefly in the next subsection.
References-found: 15

