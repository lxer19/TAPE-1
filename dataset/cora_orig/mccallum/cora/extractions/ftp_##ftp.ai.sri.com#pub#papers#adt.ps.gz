URL: ftp://ftp.ai.sri.com/pub/papers/adt.ps.gz
Refering-URL: http://www.ai.sri.com/~martin/abstracts.html
Root-URL: 
Title: Development Tools for the Open Agent Architecture  
Author: David L. Martin, Adam Cheyer Gowang-Lo Lee 
Affiliation: SRI International  ETRI  
Abstract: The agent-based paradigm for software systems cannot realize its full potential, and will not become widespread, until adequate agent development tools and environments are available. To address this need, an exploration of the requirements for such tools and environments has been conducted in the context of the Open Agent Architecture (OAA) project, and has resulted in the creation of the Agent Development Toolkit (ADT). The ADT provides a variety of mechanisms that support the specification and implementation of individual agents, as well as cooperating communities of agents. Special attention has been given to tools that enable an agent developer to construct intelligent user interfaces, which allow users to express their requests of agents using spoken and written natural language in combination with other modalities. This paper discusses a number of general requirements that were identified for agent development environments, reports on the design and functionality of the ADT, and shows how the ADT addresses those requirements. In addition, we describe our experience to date in constructing OAA-based agent systems, and future directions in extending the ADT. fl This paper was supported by a contract from the Electronics and Telecommunications Research Institute (Korea), and will be presented at The Practical Application of Intelligent Agents and Multi-Agent Technology (PAAM 96), London, April 1996. The first author can be reached by email at martin@ai.sri.com. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mic Bowman, Peter B. Danzig, Darren R. Hardy, Udi Manber, and Michael F. Schwartz. </author> <title> The Harvest information discovery and access system. </title> <booktitle> In Proceedings of the Second International World Wide Web Conference, </booktitle> <pages> pages 763-771, </pages> <address> Chicago, Illinois, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Publishing documentation in HTML allows developers to employ any of a wide variety of available Web tools. For example, ProACT interfaces with Harvest <ref> [1] </ref>, an Internet tool for indexing and searching Web pages.
Reference: [2] <author> A. Cheyer and L. Julia. </author> <title> Multimodal maps: An agent-based approach. </title> <booktitle> In Proceedings of the International Conference on Cooperative Multimodal Communication, </booktitle> <address> Eindhoven, The Nether-lands, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Another OAA-based multimodal user interface project focuses on techniques for merging simultaneous streams of pen and voice input to form multimedia queries about data retrieved from commercial Internet web sites <ref> [2] </ref>. 4 The Agent Development Toolkit The Agent Development Toolkit, or ADT, is built around three loosely coupled core components, and presents itself via a user interface component. * The Programmer's Agent Construction Tool (ProACT) is used by an agent designer to define and maintain the capabilities and other properties of
Reference: [3] <author> Michael Cohen, Ze'ev Rivlin, and Harry Bratt. </author> <title> Speech recognition in the ATIS domain using multiple knowledge sources. </title> <booktitle> In Proceedings of the ARPA Spoken Language Systems Technology Workshop, </booktitle> <address> Austin, Texas, </address> <month> January </month> <year> 1995. </year>
Reference-contexts: However, in most settings, one wants to use the most powerful, flexible approaches available, and thus our efforts have been focused on the use of two very sophisticated systems developed at SRI: the Decipher <ref> [3] </ref> speech recognition system, and the Gemini [5] natural language understanding system, both of which have been used as agents in a number of OAA-based systems. Consequently, the requirements for LEAP have largely been driven by these 8 9 two systems.
Reference: [4] <author> P. R. Cohen, A. Cheyer, M. Wang, and S. C. Baeg. </author> <title> An open agent architecture. </title> <editor> In O. Et-zioni, editor, </editor> <booktitle> Proceedings of the AAAI Spring Symposium Series on Software Agents, </booktitle> <pages> pages 1-8, </pages> <address> Stanford, California, </address> <month> March </month> <year> 1994. </year> <journal> American Association for Artificial Intelligence. </journal>
Reference-contexts: Agents may be implemented (or derived from existing applications) in any programming language to which the agent library has been ported, and may run on any network-linked platform. The OAA has been described in greater detail in <ref> [4] </ref>. 3.1 The Interagent Communication Language The OAA's Interagent Communication Language (ICL) is the interface language shared by all agents, no matter what machine they are running on or what computer language they are programmed in. <p> The first OAA-based system was a multifunctional "office assistant", in which fourteen autonomous agents provide monitoring, communication and management capabilities for business applications such as online calendars, electronic mail, or databases <ref> [4] </ref>. In a typical scenario, agents with expertise in email processing, text-to-speech translation, notification planning, calendar and database access and telephone control cooperate to find a user and alert him or her of some important message.
Reference: [5] <author> J. Dowding, J. M. Gawron, D. Appelt, J. Bear, L. Cherny, R. Moore, and D. Moran. </author> <title> Gemini: A natural language system for spoken-language understanding. </title> <booktitle> In Proceedings of the 31st Annual Meeting of the Association for Computational Linguistics, </booktitle> <pages> pages 54-61, </pages> <address> Columbus, Ohio, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: However, in most settings, one wants to use the most powerful, flexible approaches available, and thus our efforts have been focused on the use of two very sophisticated systems developed at SRI: the Decipher [3] speech recognition system, and the Gemini <ref> [5] </ref> natural language understanding system, both of which have been used as agents in a number of OAA-based systems. Consequently, the requirements for LEAP have largely been driven by these 8 9 two systems.
Reference: [6] <author> Barbara J. Grosz, Douglas E. Appelt, Paul Martin, and Fernando Pereira. </author> <title> TEAM: An experi-ment in the design of transportable natural-language interfaces. Technical Note 356R, </title> <booktitle> Artificial Intelligence Center, SRI International, </booktitle> <address> Menlo Park, California, </address> <year> 1987. </year>
Reference-contexts: This approach is based on previous work done at SRI on the TEAM project <ref> [6] </ref>. The Wizard operates by obtaining a categorization of a new word, and by gradually refining the categorization through a series of questions. Each refinement of category, in turn, determines the subsequent questions to be asked.
Reference: [7] <author> D. G. Schwartz. </author> <title> Cooperating heterogeneous systems: A blackboard-based meta approach. </title> <type> Technical Report 93-112, </type> <institution> Center for Automation and Intelligent Systems Research, Case Western Reserve University, Cleveland, Ohio, </institution> <month> April </month> <year> 1993. </year> <type> Unpublished Ph.D. thesis. 17 </type>
Reference-contexts: A collection of agents satsifies requests from users, or other agents, by acting cooperatively, under the direction of one or more facilitators (which are themselves agents of a special type). The system's architecture, based loosely on Schwartz's FLiPSiDE system <ref> [7] </ref>, uses a hierarchical configuration in which each application agent connects as a client of a facilitator. Facilitators provide content-based message routing, global data management, and process coordination for their set of connected agents. Facilitators can, in turn, be connected as clients of other facilitators.
References-found: 7

