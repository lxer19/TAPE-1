URL: ftp://ftp.cs.columbia.edu/reports/reports-1998/cucs-001-98.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1998.html
Root-URL: http://www.cs.columbia.edu
Title: Fast Heuristic and Exact Algorithms for Two-Level Hazard-Free Logic Minimization  
Author: Michael Theobald Steven M. Nowick 
Note: This work was supported by NSF under Grant no. MIP-9501880 and by an Alfred P. Sloan Research Fellowship. The presented work is an extended version of two recent conference papers [32, 31].  
Address: New York, NY 10027 CUCS-001-98  
Affiliation: Department of Computer Science Columbia University  
Abstract: None of the available minimizers for 2-level hazard-free logic minimization can synthesize very large circuits. This limitation has forced researchers to resort to manual and automated circuit partitioning techniques. This paper introduces two new 2-level logic minimizers: Espresso-HF, a heuristic method which is loosely based on Espresso-II, and Impymin, an exact method based on implicit data structures. Both minimizers can solve all currently available examples, which range up to 32 inputs and 33 outputs. These include examples that have never been solved before. For examples that can be solved by other minimizers our methods are several orders of magnitude faster. As by-products of these algorithms, we also present two additional results. First, we introduce a fast new algorithm to check if a hazard-free covering problem can feasibly be solved. Second, we introduce a novel formulation of the 2-level hazard-free logic minimization problem by capturing hazard-freedom constraints within a synchronous function by adding new variables. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Benes, S.M. Nowick, and A. Wolfe. </author> <title> A fast asynchronous huffman decoder for compressed-code embedded processors. </title> <booktitle> In Proc. International Symposium on Advanced Research in Asynchronous Circuits and Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1998. </year>
Reference-contexts: 1 Introduction Asynchronous design has been the focus of much recent research activity. In fact, asynchronous designs have been applied to several large-scale control- and datapath circuits and processors <ref> [11, 18, 12, 19, 2, 30, 34, 15, 1] </ref>. A number of methods have been developed for the design of hazard-free controllers [22, 20, 37, 13, 27].
Reference: [2] <author> M. Benes, A. Wolfe, and S.M. Nowick. </author> <title> A high-speed asynchronous decompression circuit for embedded processors. </title> <booktitle> In Proceedings of the 17th Conference on Advanced Research in VLSI. </booktitle> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> CA, </address> <year> 1997. </year>
Reference-contexts: 1 Introduction Asynchronous design has been the focus of much recent research activity. In fact, asynchronous designs have been applied to several large-scale control- and datapath circuits and processors <ref> [11, 18, 12, 19, 2, 30, 34, 15, 1] </ref>. A number of methods have been developed for the design of hazard-free controllers [22, 20, 37, 13, 27].
Reference: [3] <author> R. E. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(8):677-691, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: Impymin is an algorithm to solve the exact hazard-free two-level logic minimization problem. The algorithm uses an implicit approach which makes use of data structures such as BDDs <ref> [3] </ref> and zero-suppressed BDDs [17]. The algorithm is based on a novel theoretical approach to hazard-free two-level logic minimization. We reformulate the generation of dynamic-hazard-free prime implicants as a synchronous prime implicant generation problem. This is achieved by incorporating hazard-freedom constraints within a synchronous function by adding new variables.
Reference: [4] <author> Chou, Beerel, Ginosar, Kol, Myers, Rotem, Stevens, and Yun. </author> <title> Optimizing average-case delay in the technology mapping of domino dual-rail circuits: A case study of an asynchronous instruction length decoding pla. </title> <booktitle> In Proc. International Symposium on Advanced Research in Asynchronous Circuits and Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1998. </year>
Reference-contexts: These methods have been applied to several large and realistic design examples, including a low-power infrared communications chip [14], a second-level cache-controller [21], a SCSI controller [35], a differential equation solver [36], and an instruction length decoder <ref> [4] </ref>. An important aspect of these methods is the development of optimized CAD tools. In synchronous design, CAD packages have been critical to the advancement of modern digital design.
Reference: [5] <author> O. Coudert. </author> <title> Two-level logic minimization: an overview. Integration, </title> <journal> the VLSI journal, </journal> <volume> 17 </volume> <pages> 97-140, </pages> <year> 1994. </year>
Reference-contexts: This technique allows to leverage off an existing method for fast implicit generation of prime implicants. Moreover, our novel approach can be nicely incorporated into a very efficient implicit minimizer for hazard-free logic. In particular, the approach makes it possible to use the implicit set covering solver of Scherzo <ref> [8, 6, 5, 7] </ref>, the state-of-the-art minimization method for synchronous two-level logic, as a black box. Both Espresso-HF and Impymin can solve all currently available examples, which range up to 32 inputs and 33 outputs. These include examples that have never been previously solved. <p> From the BDD representing f , we can easily compute the BDD representing g, and then the ZBDD of P rime (g) using an existing recursive algorithm <ref> [5] </ref>. From the ZBDD of P rime (g), we compute the ZBDD of dhf Prime (f; T ) using Theorem 4.5. <p> Using BDDs, many CAD problems can now be solved much faster than before the inception of BDDs. However, the naive approach of taking an existing CAD algorithm and augmenting it with BDDs does not necessarily lead to a good tool (see discussion in <ref> [5] </ref>). In particular, it is impossible to just augment Espresso-HF or Hfmin with BDDs and get a superb tool. That is why we needed a new theoretical result on the characterization of dhf-prime implicants (cf.
Reference: [6] <author> O. Coudert. </author> <title> Doing two-level logic minimization 100 times faster. </title> <booktitle> In ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1995. </year> <month> 39 </month>
Reference-contexts: This technique allows to leverage off an existing method for fast implicit generation of prime implicants. Moreover, our novel approach can be nicely incorporated into a very efficient implicit minimizer for hazard-free logic. In particular, the approach makes it possible to use the implicit set covering solver of Scherzo <ref> [8, 6, 5, 7] </ref>, the state-of-the-art minimization method for synchronous two-level logic, as a black box. Both Espresso-HF and Impymin can solve all currently available examples, which range up to 32 inputs and 33 outputs. These include examples that have never been previously solved.
Reference: [7] <author> O. Coudert. </author> <title> On solving covering problems. </title> <booktitle> In Proceedings of the 33rd Design Automation Con--ference. ACM, </booktitle> <year> 1996. </year>
Reference-contexts: This technique allows to leverage off an existing method for fast implicit generation of prime implicants. Moreover, our novel approach can be nicely incorporated into a very efficient implicit minimizer for hazard-free logic. In particular, the approach makes it possible to use the implicit set covering solver of Scherzo <ref> [8, 6, 5, 7] </ref>, the state-of-the-art minimization method for synchronous two-level logic, as a black box. Both Espresso-HF and Impymin can solve all currently available examples, which range up to 32 inputs and 33 outputs. These include examples that have never been previously solved.
Reference: [8] <author> O. Coudert and J.C. Madre. </author> <title> New ideas for solving covering problems. </title> <booktitle> In Proceedings of the 32nd Design Automation Conference. ACM, </booktitle> <year> 1995. </year>
Reference-contexts: This technique allows to leverage off an existing method for fast implicit generation of prime implicants. Moreover, our novel approach can be nicely incorporated into a very efficient implicit minimizer for hazard-free logic. In particular, the approach makes it possible to use the implicit set covering solver of Scherzo <ref> [8, 6, 5, 7] </ref>, the state-of-the-art minimization method for synchronous two-level logic, as a black box. Both Espresso-HF and Impymin can solve all currently available examples, which range up to 32 inputs and 33 outputs. These include examples that have never been previously solved.
Reference: [9] <author> R.K. Brayton et al. </author> <title> Logic Minimization Algorithms for VLSI Synthesis. </title> <publisher> Kluwer Academic, </publisher> <year> 1984. </year>
Reference-contexts: Espresso-HF is an algorithm to solve the heuristic hazard-free two-level logic minimization problem. The method is heuristic solely in terms of the cardinality of solution. In all cases, it guarantees a hazard-free solution. The algorithm is based on Espresso-II <ref> [26, 9] </ref>, but with a number of significant modifications to handle hazard-freedom constraints. It is the first heuristic method based on Espresso-II to solve the hazard-free 2 minimization problem.
Reference: [10] <author> R.M. Fuhrer, B. Lin, and S.M. Nowick. </author> <title> Symbolic hazard-free minimization and encoding of asynchronous finite state machines. </title> <booktitle> In 1995 IEEE/ACM International Conference on Computer-Aided Design. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1995. </year>
Reference-contexts: An important aspect of these methods is the development of optimized CAD tools. In synchronous design, CAD packages have been critical to the advancement of modern digital design. In asynchronous design, much progress has been made, including tools for exact hazard-free two-level logic minimization [25], optimal state assignment <ref> [10, 27] </ref> and synthesis-for-testability [24]. However, these tools have been limited in handling large-scale designs. In particular, hazard-free 2-level logic minimization is an important step in all the above-mentioned CAD tools. <p> However, these tools have been limited in handling large-scale designs. In particular, hazard-free 2-level logic minimization is an important step in all the above-mentioned CAD tools. However, while the currently used Quine-McCluskey-like exact hazard-free minimization algorithm, Hfmin <ref> [10] </ref>, has been effective on small- and medium-sized examples, it has been unable to produce solutions for several large design problems [13, 27]. <p> Background information on BDD, ZBDDs, and implicit logic minimization can be found in the appendix. 2 Background The material of this section focuses on hazards and hazard-free logic minimization, and is taken from <ref> [10] </ref> and [25, 23]. For simplicity, we focus on single-output functions. A generalization of these definitions to multi-output functions is straightforward, and is described in [10]. 2.1 Circuit Model This paper considers combinational circuits having arbitrary finite gate and wire delays (an unbounded wire delay model [25]). <p> minimization can be found in the appendix. 2 Background The material of this section focuses on hazards and hazard-free logic minimization, and is taken from <ref> [10] </ref> and [25, 23]. For simplicity, we focus on single-output functions. A generalization of these definitions to multi-output functions is straightforward, and is described in [10]. 2.1 Circuit Model This paper considers combinational circuits having arbitrary finite gate and wire delays (an unbounded wire delay model [25]). A pure delay model is assumed as well (see [33]). 2.2 Multiple-Input Changes Definition 2.1 Let A and B be two minterms. <p> It has recently been extended to hazard-free multi-valued minimization 3 by Fuhrer, Lin and Nowick <ref> [10] </ref>. The latter method, called Hfmin, has been the fastest minimizer for exact hazard-free minimization. Hfmin makes use of Espresso-II to generate all prime implicants, then transforms them into dhf-prime implicants, and finally employs Espresso-II's Mincov to solve the resulting unate covering problem. <p> could only be achieved based on the presented new and non-trivial formulation of the set of dhf-prime implicants, presented in Section 4. 33 6 Experimental Results and Comparison with Re- lated Work Prototype versions of our two new minimizers Espresso-HF 11 and Impymin were run on several well-known benchmark circuits <ref> [10, 32] </ref> on an ULTRA-SPARC 140 workstation (Memory: 89 MB real/ 230 MB virtual). 6.1 Comparison of exact minimizers: Impymin vs. Hfmin The table in Figure 9 compares our new exact minimizer Impymin with the currently fastest available exact minimizer, Hfmin, by Robert Fuhrer et al. [10]. <p> Hfmin The table in Figure 9 compares our new exact minimizer Impymin with the currently fastest available exact minimizer, Hfmin, by Robert Fuhrer et al. <ref> [10] </ref>. For the smaller problems, Hfmin is faster, since our implementation is not yet optimized 12 . However, the bottleneck of Hfmin becomes clearly visible already for medium-sized examples. For examples sd-control and stetson-p2, Impymin is more than three times faster; for the benchmark pscsi-pscsi even more than fifteen times.
Reference: [11] <author> S.B. Furber, J.D. Garside, S. Temple, J. Liu, P. Day, </author> <title> and N.C. Paver. Amulet2e: An asynchronous embedded controller. </title> <booktitle> In Async97 Symposium. ACM, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: 1 Introduction Asynchronous design has been the focus of much recent research activity. In fact, asynchronous designs have been applied to several large-scale control- and datapath circuits and processors <ref> [11, 18, 12, 19, 2, 30, 34, 15, 1] </ref>. A number of methods have been developed for the design of hazard-free controllers [22, 20, 37, 13, 27].
Reference: [12] <author> J. Kessels and P. Marston. </author> <title> Design asynchronous standby circuits for a low-power pager. </title> <booktitle> In Async97 Symposium. ACM, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: 1 Introduction Asynchronous design has been the focus of much recent research activity. In fact, asynchronous designs have been applied to several large-scale control- and datapath circuits and processors <ref> [11, 18, 12, 19, 2, 30, 34, 15, 1] </ref>. A number of methods have been developed for the design of hazard-free controllers [22, 20, 37, 13, 27].
Reference: [13] <author> P. Kudva, G. Gopalakrishnan, and H. Jacobson. </author> <title> A technique for synthesizing distributed burst-mode circuits. </title> <booktitle> In Proceedings of the 33rd Design Automation Conference. ACM, </booktitle> <year> 1996. </year>
Reference-contexts: In fact, asynchronous designs have been applied to several large-scale control- and datapath circuits and processors [11, 18, 12, 19, 2, 30, 34, 15, 1]. A number of methods have been developed for the design of hazard-free controllers <ref> [22, 20, 37, 13, 27] </ref>. These methods have been applied to several large and realistic design examples, including a low-power infrared communications chip [14], a second-level cache-controller [21], a SCSI controller [35], a differential equation solver [36], and an instruction length decoder [4]. <p> In particular, hazard-free 2-level logic minimization is an important step in all the above-mentioned CAD tools. However, while the currently used Quine-McCluskey-like exact hazard-free minimization algorithm, Hfmin [10], has been effective on small- and medium-sized examples, it has been unable to produce solutions for several large design problems <ref> [13, 27] </ref>. This limitation has been a major reason for researchers to invent and apply manual as well as automated techniques for partitioning circuits before hazard-free logic minimization can be performed [13]. <p> This limitation has been a major reason for researchers to invent and apply manual as well as automated techniques for partitioning circuits before hazard-free logic minimization can be performed <ref> [13] </ref>. Contributions of This Paper This paper introduces two new and very efficient 2-level hazard-free logic minimizers for multi-output minimization: Espresso-HF and Impymin. Espresso-HF is an algorithm to solve the heuristic hazard-free two-level logic minimization problem. The method is heuristic solely in terms of the cardinality of solution.
Reference: [14] <author> A. Marshall, B. Coates, and P. Siegel. </author> <title> The design of an asynchronous communications chip. Design and Test, </title> <month> June </month> <year> 1994. </year>
Reference-contexts: A number of methods have been developed for the design of hazard-free controllers [22, 20, 37, 13, 27]. These methods have been applied to several large and realistic design examples, including a low-power infrared communications chip <ref> [14] </ref>, a second-level cache-controller [21], a SCSI controller [35], a differential equation solver [36], and an instruction length decoder [4]. An important aspect of these methods is the development of optimized CAD tools. In synchronous design, CAD packages have been critical to the advancement of modern digital design.
Reference: [15] <author> A.J. Martin, S.M. Burns, T.K. Lee, D. Borkovic, and P.J. Hazewindus. </author> <title> The design of an asynchronous microprocessor. </title> <booktitle> In 1989 Caltech Conference on Very Large Scale Integration, </booktitle> <year> 1989. </year>
Reference-contexts: 1 Introduction Asynchronous design has been the focus of much recent research activity. In fact, asynchronous designs have been applied to several large-scale control- and datapath circuits and processors <ref> [11, 18, 12, 19, 2, 30, 34, 15, 1] </ref>. A number of methods have been developed for the design of hazard-free controllers [22, 20, 37, 13, 27].
Reference: [16] <author> G. De Micheli, R. K. Brayton, and A. Sangiovanni-Vincentelli. </author> <title> Optimal state assignment for finite state machines. </title> <journal> IEEE Transactions on CAD, </journal> <volume> CAD-4(3):269-285, </volume> <month> July </month> <year> 1985. </year>
Reference-contexts: The free entries consist of all entries of the current implicant, in positional cube notation <ref> [16] </ref>, which are still candidates to be raised to 1. Initially, a free entry is assigned a 1 (0) if the current implicant to be expanded, a, has a 0 (1) in the corresponding position.
Reference: [17] <author> S. Minato. </author> <title> Zero-Suppressed BDDs for set manipulation in combinatorial problems. </title> <booktitle> In Proceedings of the 30th Design Automation Conference. ACM, </booktitle> <year> 1993. </year>
Reference-contexts: Impymin is an algorithm to solve the exact hazard-free two-level logic minimization problem. The algorithm uses an implicit approach which makes use of data structures such as BDDs [3] and zero-suppressed BDDs <ref> [17] </ref>. The algorithm is based on a novel theoretical approach to hazard-free two-level logic minimization. We reformulate the generation of dynamic-hazard-free prime implicants as a synchronous prime implicant generation problem. This is achieved by incorporating hazard-freedom constraints within a synchronous function by adding new variables.
Reference: [18] <author> T. Nanya, Y. Ueno, H. Kagotani, M. Kuwako, and A. Takamura. TITAC: </author> <title> design of a quasi-delay-insensitive microprocessor. </title> <journal> IEEE Design and Test, </journal> <volume> 11(2) </volume> <pages> 50-63, </pages> <month> Summer </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Asynchronous design has been the focus of much recent research activity. In fact, asynchronous designs have been applied to several large-scale control- and datapath circuits and processors <ref> [11, 18, 12, 19, 2, 30, 34, 15, 1] </ref>. A number of methods have been developed for the design of hazard-free controllers [22, 20, 37, 13, 27].
Reference: [19] <author> L.S. Nielsen and J. Sparso. </author> <title> A low-power asynchronous data path for a fir filter bank. </title> <booktitle> In Proceedings of the International Symposium on Advanced Research in Asynchronous Circuits and Systems (Async96), </booktitle> <pages> pages 197-207. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Asynchronous design has been the focus of much recent research activity. In fact, asynchronous designs have been applied to several large-scale control- and datapath circuits and processors <ref> [11, 18, 12, 19, 2, 30, 34, 15, 1] </ref>. A number of methods have been developed for the design of hazard-free controllers [22, 20, 37, 13, 27].
Reference: [20] <editor> S.M. Nowick and B. Coates. UCLOCK: </editor> <booktitle> automated design of high-performance unclocked state machines. In IEEE International Conference on Computer Design, </booktitle> <pages> pages 434-441, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: In fact, asynchronous designs have been applied to several large-scale control- and datapath circuits and processors [11, 18, 12, 19, 2, 30, 34, 15, 1]. A number of methods have been developed for the design of hazard-free controllers <ref> [22, 20, 37, 13, 27] </ref>. These methods have been applied to several large and realistic design examples, including a low-power infrared communications chip [14], a second-level cache-controller [21], a SCSI controller [35], a differential equation solver [36], and an instruction length decoder [4].
Reference: [21] <author> S.M. Nowick, M.E. Dean, D.L. Dill, and M. Horowitz. </author> <title> The design of a high-performance cache controller: a case study in asynchronous synthesis. </title> <booktitle> In Proceedings of the Twenty-Sixth Annual Hawaii International Conference on System Sciences, </booktitle> <volume> volume I, </volume> <pages> pages 419-427. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1993. </year> <month> 40 </month>
Reference-contexts: A number of methods have been developed for the design of hazard-free controllers [22, 20, 37, 13, 27]. These methods have been applied to several large and realistic design examples, including a low-power infrared communications chip [14], a second-level cache-controller <ref> [21] </ref>, a SCSI controller [35], a differential equation solver [36], and an instruction length decoder [4]. An important aspect of these methods is the development of optimized CAD tools. In synchronous design, CAD packages have been critical to the advancement of modern digital design.
Reference: [22] <author> S.M. Nowick and D.L. Dill. </author> <title> Synthesis of asynchronous state machines using a local clock. </title> <booktitle> In IEEE International Conference on Computer Design, </booktitle> <pages> pages 192-197. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: In fact, asynchronous designs have been applied to several large-scale control- and datapath circuits and processors [11, 18, 12, 19, 2, 30, 34, 15, 1]. A number of methods have been developed for the design of hazard-free controllers <ref> [22, 20, 37, 13, 27] </ref>. These methods have been applied to several large and realistic design examples, including a low-power infrared communications chip [14], a second-level cache-controller [21], a SCSI controller [35], a differential equation solver [36], and an instruction length decoder [4]. <p> A dynamic logic hazard 1 Sequential synthesis methods, which use hazard-free minimization as a substep, typically include constraints in their algorithms such that no transitions with function hazards are generated <ref> [22, 37] </ref>. 5 occurs if f (A) = 1 and f (B) = 0 (f (A) = 0 and f (B) = 1), but the circuit's output makes an unexpected 1 ! 0 ! 1 ! 0 (0 ! 1 ! 0 ! 1) transition. 2.5 Conditions for a Hazard-Free Transition
Reference: [23] <author> S.M. Nowick and D.L. Dill. </author> <title> Exact two-level minimization of hazard-free logic with multiple-input changes. </title> <booktitle> In Proceedings of the 1992 IEEE/ACM International Conference on Computer-Aided Design, </booktitle> <pages> pages 626-630. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: Background information on BDD, ZBDDs, and implicit logic minimization can be found in the appendix. 2 Background The material of this section focuses on hazards and hazard-free logic minimization, and is taken from [10] and <ref> [25, 23] </ref>. For simplicity, we focus on single-output functions. A generalization of these definitions to multi-output functions is straightforward, and is described in [10]. 2.1 Circuit Model This paper considers combinational circuits having arbitrary finite gate and wire delays (an unbounded wire delay model [25]). <p> is a cover (i.e., set of implicants) of f whose AND-OR implementation is hazard-free for a given set, T , of specified input transitions. (It is assumed below that the function is defined for all specified transitions; the function is undefined for all other input states.) Theorem 2.11 (Hazard-Free Covering <ref> [23, 25] </ref>) A sum-of-products F is a hazard-free cover for function f for the set T of specified input transitions if and only if: 7 (a.) No product of F intersects the OFF-set of f ; (b.) Each required cube of f is contained in some product of F ; and <p> 8 cubes (shaded); (b) shows the set of privileged cubes (shaded); (c) shows a minimal hazard-free cover; (d) shows a minimum-cost cover that is not hazard-free, since it contains a logic hazard. 9 2.8 Exact Hazard-Free Minimization Algorithm A single-output exact hazard-free minimizer has been developed by Nowick and Dill <ref> [23, 25] </ref>. It has recently been extended to hazard-free multi-valued minimization 3 by Fuhrer, Lin and Nowick [10]. The latter method, called Hfmin, has been the fastest minimizer for exact hazard-free minimization.
Reference: [24] <author> S.M. Nowick, N.K. Jha, and F. Cheng. </author> <title> Synthesis of asynchronous circuits for stuck-at and robust path delay fault testability. </title> <booktitle> In Proceedings of VLSI Design 95, </booktitle> <month> January </month> <year> 1995. </year>
Reference-contexts: In synchronous design, CAD packages have been critical to the advancement of modern digital design. In asynchronous design, much progress has been made, including tools for exact hazard-free two-level logic minimization [25], optimal state assignment [10, 27] and synthesis-for-testability <ref> [24] </ref>. However, these tools have been limited in handling large-scale designs. In particular, hazard-free 2-level logic minimization is an important step in all the above-mentioned CAD tools.
Reference: [25] <author> Steven M. Nowick and David L. Dill. </author> <title> Exact two-level minimization of hazard-free logic with multiple-input changes. </title> <journal> IEEE Transactions on CAD, </journal> <volume> CAD-14(8):986-997, </volume> <month> August </month> <year> 1995. </year>
Reference-contexts: An important aspect of these methods is the development of optimized CAD tools. In synchronous design, CAD packages have been critical to the advancement of modern digital design. In asynchronous design, much progress has been made, including tools for exact hazard-free two-level logic minimization <ref> [25] </ref>, optimal state assignment [10, 27] and synthesis-for-testability [24]. However, these tools have been limited in handling large-scale designs. In particular, hazard-free 2-level logic minimization is an important step in all the above-mentioned CAD tools. <p> Background information on BDD, ZBDDs, and implicit logic minimization can be found in the appendix. 2 Background The material of this section focuses on hazards and hazard-free logic minimization, and is taken from [10] and <ref> [25, 23] </ref>. For simplicity, we focus on single-output functions. A generalization of these definitions to multi-output functions is straightforward, and is described in [10]. 2.1 Circuit Model This paper considers combinational circuits having arbitrary finite gate and wire delays (an unbounded wire delay model [25]). <p> For simplicity, we focus on single-output functions. A generalization of these definitions to multi-output functions is straightforward, and is described in [10]. 2.1 Circuit Model This paper considers combinational circuits having arbitrary finite gate and wire delays (an unbounded wire delay model <ref> [25] </ref>). A pure delay model is assumed as well (see [33]). 2.2 Multiple-Input Changes Definition 2.1 Let A and B be two minterms. <p> If a transition has a function hazard, no implementation of the function is guaranteed to avoid a glitch during the transition, assuming arbitrary gate and wire delays <ref> [25, 33] </ref>. Therefore, we consider only transitions which are free of function hazards 1 . 2.4 Logic Hazards If f is free of function hazards for a transition from input A to B, an implementation may still have hazards due to possible delays in the logic realization. <p> but the circuit's output makes an unexpected 1 ! 0 ! 1 ! 0 (0 ! 1 ! 0 ! 1) transition. 2.5 Conditions for a Hazard-Free Transition We now review conditions to ensure that a sum-of-products implementation, F , is hazard-free for a given input transition (for details, see <ref> [25] </ref>). Assume that [A; B] is the transition cube corresponding to a function-hazard-free transition from input state A to B for a function f . We say that f has a f (A) ! f (B) transition in cube [A; B]. <p> is a cover (i.e., set of implicants) of f whose AND-OR implementation is hazard-free for a given set, T , of specified input transitions. (It is assumed below that the function is defined for all specified transitions; the function is undefined for all other input states.) Theorem 2.11 (Hazard-Free Covering <ref> [23, 25] </ref>) A sum-of-products F is a hazard-free cover for function f for the set T of specified input transitions if and only if: 7 (a.) No product of F intersects the OFF-set of f ; (b.) Each required cube of f is contained in some product of F ; and <p> Thus, the two-level hazard-free logic minimization problem is to find a minimum cost cover of a function using only dhf-prime implicants where every required cube is covered. In general, the covering conditions of Theorem 2.11 may not be satisfiable for an arbitrary Boolean function and set of transitions <ref> [33, 25] </ref>. This case occurs if conditions (b) and (c) cannot be satisfied simultaneously. A hazard-free minimization example is shown in Figure 1. There are four specified transitions. Transition t 1 is a 1 ! 1 transition. It gives rise to one required cube (see part (a)). <p> 8 cubes (shaded); (b) shows the set of privileged cubes (shaded); (c) shows a minimal hazard-free cover; (d) shows a minimum-cost cover that is not hazard-free, since it contains a logic hazard. 9 2.8 Exact Hazard-Free Minimization Algorithm A single-output exact hazard-free minimizer has been developed by Nowick and Dill <ref> [23, 25] </ref>. It has recently been extended to hazard-free multi-valued minimization 3 by Fuhrer, Lin and Nowick [10]. The latter method, called Hfmin, has been the fastest minimizer for exact hazard-free minimization. <p> These inputs are used to generate the set of required cubes Q, the set of privileged cubes P and their corresponding start points S, and the OFF-set R. Generation of these sets is immediate from the earlier lemmas (see also <ref> [25] </ref>) 4 . The set Q can be regarded both as an initial cover F of the function, and as a set of objects to be covered. <p> 32 To summarize, based on Theorem 4.5 we can compute the covering objects, dhf - P rime (f; T ), in an implicit manner. 5.2 Computation of the ZBDD of REQ (f,T) From the set of input transitions, T , the set of required cubes can be easily computed (see <ref> [25] </ref>). The set of required cubes can then be stored as a ZBDD. 5.3 Solving the Implicit Covering Problem The implicit set covering problem hQ (init) ; P (init) ; i can be solved analogously to Step 3 of Scherzo (i.e. passed to the unate set covering solver of Scherzo).
Reference: [26] <author> R. Rudell and A. Sangiovanni Vincentelli. </author> <title> Multiple valued minimization for PLA optimization. </title> <journal> IEEE Transactions on CAD, </journal> <volume> CAD-6(5):727-750, </volume> <month> September </month> <year> 1987. </year>
Reference-contexts: Espresso-HF is an algorithm to solve the heuristic hazard-free two-level logic minimization problem. The method is heuristic solely in terms of the cardinality of solution. In all cases, it guarantees a hazard-free solution. The algorithm is based on Espresso-II <ref> [26, 9] </ref>, but with a number of significant modifications to handle hazard-freedom constraints. It is the first heuristic method based on Espresso-II to solve the hazard-free 2 minimization problem. <p> However, because of the constraints and granularity of the hazard-free minimization problem, high-quality results are still obtained even for large examples. 3 It is well-known that multi-output minimization can be regarded as a special case of multi-valued minimization <ref> [26] </ref>. 10 In this subsection, we describe the basic steps of the algorithm, concentrating on the new constraints that must be incorporated to guarantee a cover to be hazard-free. We then describe the individual steps in detail, in later subsections. <p> fq 2 Q a jsupercube dhf (fa; qg) is defined g Let q b be the best candidate in Q a a = supercube dhf (fa; q b g) 3.3.1 Determination of Essential Parts and Update of Local Sets As in Espresso-II, free entries are maintained, to accelerate the expansion <ref> [26] </ref>. The free entries consist of all entries of the current implicant, in positional cube notation [16], which are still candidates to be raised to 1. <p> An overexpanded cube is defined as the cube a where all free entries have been raised simultaneously. An essential part is one which can never, or always, be raised <ref> [26] </ref>. Our definition of "essential parts" is different from Espresso-II, since a hazard-free cover must be maintained. First, we determine which entries can never be raised and remove them from f ree entries.
Reference: [27] <author> J.W.J.M. Rutten and M.R.C.M. Berkelaar. </author> <title> Improved state assignments for burst mode finite state machines. </title> <booktitle> In Proceedings of the 3rd International Symposium on Advanced Research in Asynchronous Circuits and Systems, </booktitle> <year> 1997. </year>
Reference-contexts: In fact, asynchronous designs have been applied to several large-scale control- and datapath circuits and processors [11, 18, 12, 19, 2, 30, 34, 15, 1]. A number of methods have been developed for the design of hazard-free controllers <ref> [22, 20, 37, 13, 27] </ref>. These methods have been applied to several large and realistic design examples, including a low-power infrared communications chip [14], a second-level cache-controller [21], a SCSI controller [35], a differential equation solver [36], and an instruction length decoder [4]. <p> An important aspect of these methods is the development of optimized CAD tools. In synchronous design, CAD packages have been critical to the advancement of modern digital design. In asynchronous design, much progress has been made, including tools for exact hazard-free two-level logic minimization [25], optimal state assignment <ref> [10, 27] </ref> and synthesis-for-testability [24]. However, these tools have been limited in handling large-scale designs. In particular, hazard-free 2-level logic minimization is an important step in all the above-mentioned CAD tools. <p> In particular, hazard-free 2-level logic minimization is an important step in all the above-mentioned CAD tools. However, while the currently used Quine-McCluskey-like exact hazard-free minimization algorithm, Hfmin [10], has been effective on small- and medium-sized examples, it has been unable to produce solutions for several large design problems <ref> [13, 27] </ref>. This limitation has been a major reason for researchers to invent and apply manual as well as automated techniques for partitioning circuits before hazard-free logic minimization can be performed [13].
Reference: [28] <author> J.W.J.M. Rutten and M.A.J. Kolsteren. </author> <title> A divide and conquer strategy for hazard free 2-level logic synthesis. </title> <booktitle> In International Workshop on Logic Synthesis, </booktitle> <year> 1997. </year>
Reference-contexts: Section 4.5) was recently presented by Rutten et al. <ref> [28] </ref>. His new algorithm to computing dhf-prime implicants is very different from ours. His approach follows a divide-and-conquer paradigm. In particular, the problem is split into three sub-problems with respect to a splitting variable. <p> The first (second, third) sub-problem generates those dhf-prime implicants that have a positive literal (negative literal, don't care-literal) for the splitting variable. The underlying idea why this approach may be efficient is that it allows to determine illegal intersections of privileged cubes already during the splitting phase (see <ref> [28] </ref> for details), which can significantly reduce the recursion tree and lead fast to terminal cases. In the merging phase of the divide-and-conquer approach, the solutions to the sub-problems are combined.
Reference: [29] <author> T. Sasao. </author> <title> An application of multiple-valued logic to a design of programmable logic arrays. </title> <booktitle> In Proceedings of Int. Symposium on Multiple-Valued Logic, </booktitle> <year> 1978. </year>
Reference-contexts: Case (ii): q is not a dhf-implicant. Since by construction all cubes contained in the SCC-expression are dhf-implicants, q cannot be contained in the SCC-expression. 2 4.6 Multi-output Case For simplicity of presentation only, it was assumed that f is a single-output function. However, it is well-known <ref> [29] </ref> that multi-output logic minimization can be reduced to single-output minimization. Based on this theorem, the above characterization carries over in a straightforward way to multi-output functions.
Reference: [30] <author> R.F. Sproull, I.E. Sutherland, and C.E. Molnar. </author> <title> The counterflow pipeline processor architecture. </title> <journal> IEEE Design & Test of Computers, </journal> <volume> 11(3) </volume> <pages> 48-59, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction Asynchronous design has been the focus of much recent research activity. In fact, asynchronous designs have been applied to several large-scale control- and datapath circuits and processors <ref> [11, 18, 12, 19, 2, 30, 34, 15, 1] </ref>. A number of methods have been developed for the design of hazard-free controllers [22, 20, 37, 13, 27].
Reference: [31] <author> M. Theobald and S.M. Nowick. </author> <title> An implicit method for hazard-free two-level logic minimization. </title> <booktitle> In Proc. International Symposium on Advanced Research in Asynchronous Circuits and Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1998. </year>
Reference: [32] <author> M. Theobald, S.M. Nowick, and T. Wu. Espresso-HF: </author> <title> A heuristic hazard-free minimizer for two-level logic. </title> <booktitle> In Proceedings of the 33rd Design Automation Conference. ACM, </booktitle> <year> 1996. </year>
Reference-contexts: could only be achieved based on the presented new and non-trivial formulation of the set of dhf-prime implicants, presented in Section 4. 33 6 Experimental Results and Comparison with Re- lated Work Prototype versions of our two new minimizers Espresso-HF 11 and Impymin were run on several well-known benchmark circuits <ref> [10, 32] </ref> on an ULTRA-SPARC 140 workstation (Memory: 89 MB real/ 230 MB virtual). 6.1 Comparison of exact minimizers: Impymin vs. Hfmin The table in Figure 9 compares our new exact minimizer Impymin with the currently fastest available exact minimizer, Hfmin, by Robert Fuhrer et al. [10].
Reference: [33] <author> S.H. Unger. </author> <title> Asynchronous Sequential Switching Circuits. </title> <address> New York: </address> <publisher> Wiley-Interscience, </publisher> <year> 1969. </year>
Reference-contexts: A generalization of these definitions to multi-output functions is straightforward, and is described in [10]. 2.1 Circuit Model This paper considers combinational circuits having arbitrary finite gate and wire delays (an unbounded wire delay model [25]). A pure delay model is assumed as well (see <ref> [33] </ref>). 2.2 Multiple-Input Changes Definition 2.1 Let A and B be two minterms. The transition cube, [A; B], from A to B has start point A and end point B, and contains all minterms that can be reached during a transition from A to B. <p> If a transition has a function hazard, no implementation of the function is guaranteed to avoid a glitch during the transition, assuming arbitrary gate and wire delays <ref> [25, 33] </ref>. Therefore, we consider only transitions which are free of function hazards 1 . 2.4 Logic Hazards If f is free of function hazards for a transition from input A to B, an implementation may still have hazards due to possible delays in the logic realization. <p> Thus, the two-level hazard-free logic minimization problem is to find a minimum cost cover of a function using only dhf-prime implicants where every required cube is covered. In general, the covering conditions of Theorem 2.11 may not be satisfiable for an arbitrary Boolean function and set of transitions <ref> [33, 25] </ref>. This case occurs if conditions (b) and (c) cannot be satisfied simultaneously. A hazard-free minimization example is shown in Figure 1. There are four specified transitions. Transition t 1 is a 1 ! 1 transition. It gives rise to one required cube (see part (a)).
Reference: [34] <author> K. van Berkel, R. Burgess, J. Kessels, M. Roncken, F. Schalij, and A. Peeters. </author> <title> Asynchronous circuits for low power: A DCC error corrector. </title> <journal> IEEE Design and Test of Computers, </journal> <volume> 11(2) </volume> <pages> 22-32, </pages> <month> Summer </month> <year> 1994. </year>
Reference-contexts: 1 Introduction Asynchronous design has been the focus of much recent research activity. In fact, asynchronous designs have been applied to several large-scale control- and datapath circuits and processors <ref> [11, 18, 12, 19, 2, 30, 34, 15, 1] </ref>. A number of methods have been developed for the design of hazard-free controllers [22, 20, 37, 13, 27].
Reference: [35] <author> K. Yun and D.L. Dill. </author> <title> A high-performance asynchronous SCSI controller. </title> <booktitle> In IEEE International Conference on Computer Design. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1995. </year> <month> 41 </month>
Reference-contexts: A number of methods have been developed for the design of hazard-free controllers [22, 20, 37, 13, 27]. These methods have been applied to several large and realistic design examples, including a low-power infrared communications chip [14], a second-level cache-controller [21], a SCSI controller <ref> [35] </ref>, a differential equation solver [36], and an instruction length decoder [4]. An important aspect of these methods is the development of optimized CAD tools. In synchronous design, CAD packages have been critical to the advancement of modern digital design. <p> In particular both tools can solve examples that cannot be solved by the currently fastest minimizer Hfmin. On examples that can be solved by Hfmin, Espresso-HF and Impymin are typically 13 In publications on the 3D method (see e.g. <ref> [37, 35] </ref>), note that several of these examples appear but only single-output minimization is performed. 38 orders of magnitude faster. Although Espresso-HF is a heuristic minimizer, it almost always obtains an absolute minimum-size cover.
Reference: [36] <author> Kenneth Y. Yun, Ayoob E. Dooply, Julio Arceo, Peter A. Beerel, and Vida Vakilotojar. </author> <title> The design and verification of a high-performance low-control-overhead asynchronous differential equation solver. </title> <booktitle> In Proc. International Symposium on Advanced Research in Asynchronous Circuits and Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1997. </year>
Reference-contexts: A number of methods have been developed for the design of hazard-free controllers [22, 20, 37, 13, 27]. These methods have been applied to several large and realistic design examples, including a low-power infrared communications chip [14], a second-level cache-controller [21], a SCSI controller [35], a differential equation solver <ref> [36] </ref>, and an instruction length decoder [4]. An important aspect of these methods is the development of optimized CAD tools. In synchronous design, CAD packages have been critical to the advancement of modern digital design.
Reference: [37] <author> K.Y. Yun, D.L. Dill, and S.M. Nowick. </author> <title> Synthesis of 3D asynchronous state machines. </title> <booktitle> In IEEE International Conference on Computer Design, </booktitle> <pages> pages 346-350. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1992. </year> <month> 42 </month>
Reference-contexts: In fact, asynchronous designs have been applied to several large-scale control- and datapath circuits and processors [11, 18, 12, 19, 2, 30, 34, 15, 1]. A number of methods have been developed for the design of hazard-free controllers <ref> [22, 20, 37, 13, 27] </ref>. These methods have been applied to several large and realistic design examples, including a low-power infrared communications chip [14], a second-level cache-controller [21], a SCSI controller [35], a differential equation solver [36], and an instruction length decoder [4]. <p> A dynamic logic hazard 1 Sequential synthesis methods, which use hazard-free minimization as a substep, typically include constraints in their algorithms such that no transitions with function hazards are generated <ref> [22, 37] </ref>. 5 occurs if f (A) = 1 and f (B) = 0 (f (A) = 0 and f (B) = 1), but the circuit's output makes an unexpected 1 ! 0 ! 1 ! 0 (0 ! 1 ! 0 ! 1) transition. 2.5 Conditions for a Hazard-Free Transition <p> In particular both tools can solve examples that cannot be solved by the currently fastest minimizer Hfmin. On examples that can be solved by Hfmin, Espresso-HF and Impymin are typically 13 In publications on the 3D method (see e.g. <ref> [37, 35] </ref>), note that several of these examples appear but only single-output minimization is performed. 38 orders of magnitude faster. Although Espresso-HF is a heuristic minimizer, it almost always obtains an absolute minimum-size cover.
References-found: 37

