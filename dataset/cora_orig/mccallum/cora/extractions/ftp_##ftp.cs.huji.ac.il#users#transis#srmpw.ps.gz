URL: ftp://ftp.cs.huji.ac.il/users/transis/srmpw.ps.gz
Refering-URL: http://www.cs.huji.ac.il/labs/transis/Abstracts/srmpw.html
Root-URL: http://www.cs.huji.ac.il
Email: fdalia,mischug@research.att.com orodeh@cs.huji.ac.il  
Title: Secure Reliable Multicast Protocols in a WAN  
Author: Dahlia Malkhi Michael Merritt Ohad Rodeh 
Address: Murray Hill, New Jersey  Jerusalem  
Affiliation: AT&T Labs,  The Hebrew University of  
Abstract: A secure reliable multicast protocol enables a process to send a message to a group of recipients such that all honest destinations receive the same message, despite the malicious efforts of fewer than a third of them, including the sender. This has been shown to be a useful tool in building secure distributed services, albeit with a cost that typically grows linearly with the size of the system. For very large networks, for which such a cost may be too prohibitive, we present two approaches for bringing the cost down: First, we show a protocol whose cost is on the order of the number of tolerated failures. Secondly, we show how relaxing the consistency requirement to a selected probability level of guarantee can bring down the associated cost to a constant. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Bracha and S. Toueg. </author> <title> Asynchronous consensus and broadcast protocols. </title> <journal> Journal of the ACM 32(4) </journal> <pages> 824-840, </pages> <month> October </month> <year> 1985. </year>
Reference-contexts: Reliable broadcast underlies the mechanisms used in many infrastructure tools supporting such distributed systems (for a representative collection, cf. [2]). Previous work on the reliable broadcast problem suffers from message complexity and computation cost that do not scale to very large communication groups: Toueg's echo broadcast <ref> [21, 1] </ref> requires O (n 2 ) authenticated message exchanges for each message delivery (where n is the size of the group). Reiter improved this message complexity in the ECHO protocol of the Rampart system [16] through the usage of digital signatures.
Reference: [2] <author> D. Powell, </author> <title> guest editor. Group Communication. </title> <journal> Special section, Communications of the ACM, </journal> <volume> 39(4), </volume> <month> April </month> <year> 1996. </year>
Reference-contexts: To address issues of availability and security, distributed services must rely on mechanisms for maintaining consistent intermediate state and for making coordinated decisions. Reliable broadcast underlies the mechanisms used in many infrastructure tools supporting such distributed systems (for a representative collection, cf. <ref> [2] </ref>). Previous work on the reliable broadcast problem suffers from message complexity and computation cost that do not scale to very large communication groups: Toueg's echo broadcast [21, 1] requires O (n 2 ) authenticated message exchanges for each message delivery (where n is the size of the group). <p> Their definition does not apply in our case since different messages have distinct collections of possible witness sets. 7 Conclusions Experience in constructing robust distributed systems <ref> [2, 4, 10, 17, 18] </ref> shows that (secure) reliable broadcast is an important tool for distributed applications. Implementing reliable broadcast in an insecure environment with arbitrary failures incurs inevitable overhead required for maintaining consistency.
Reference: [3] <author> M. Fischer, N. Lynch, and M. Paterson. </author> <title> Impossibility of Distributed Consensus with One Faulty Process. </title> <journal> J. ACM, </journal> <volume> 32 </volume> <pages> 374-382, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: i.e., payload (m) = payload (m 0 ). (Probability is taken assuming uniform choice of seq (m), and taken at the limit as seq (m) goes to infinity.) The problem statement above is strictly weaker than the Byzantine agreement problem [8], which is known to be unsolvable in asynchronous systems <ref> [3] </ref>. This statement holds even if we use the unconditional Agreement requirement. The reason is that only messages from honest processes are required to be delivered, and thus messages from corrupt processes can "hang" forever.
Reference: [4] <author> M. K. Franklin and M. Yung. </author> <title> The varieties of secure distributed computation. </title> <booktitle> In Proceedings of Sequences II, Methods in Communications, Security and Computer Science, </booktitle> <pages> pages 392-417, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Their definition does not apply in our case since different messages have distinct collections of possible witness sets. 7 Conclusions Experience in constructing robust distributed systems <ref> [2, 4, 10, 17, 18] </ref> shows that (secure) reliable broadcast is an important tool for distributed applications. Implementing reliable broadcast in an insecure environment with arbitrary failures incurs inevitable overhead required for maintaining consistency.
Reference: [5] <author> S. Haber and W.S. Stornetta. </author> <title> How to Time-Stamp a Digital Document. </title> <journal> Journal of Cryptology, </journal> <volume> 3(2) </volume> <pages> 99-111, </pages> <year> 1991. </year>
Reference-contexts: witness set is t k 1 k Relatively small values of k are sufficient for this to be negligible. (As with the size of cryptographic keys, k is effectively a constant.) This idea of forming distributed trust in a cooperation-resilient way borrows from the time-stamping mechanism of Haber et al. <ref> [5] </ref>. Moreover, we stipulate that correct processes multicast messages in sequence order, and enforce this ordering on message delivery. This prevents a malicious sender from scanning off-line the domain of &lt;sender ; seq&gt; pairs for ones that have corrupt witness sets and sending only those messages.
Reference: [6] <author> M. Jakobsson and M. Yung. </author> <title> Applying Anti-Trust Policies to Increase Trust in a Versatile E-Money System. Financial Cryptography '97, </title> <address> Anguilla, </address> <month> February </month> <year> 1997. </year> <note> To be published. </note>
Reference-contexts: Distributed platforms can increase the efficiency of services and diminish the trust put in each component. For example, the Omega key management system [18] provides key backup, recovery and other functions in a penetration-tolerant way using the Rampart distributed communication infrastructure [17]. In a recently suggested electronic payment scheme <ref> [6] </ref>, distribution of trust has been employed to maintain anonymity with the option of revoking it by a threshold of the participants.
Reference: [7] <author> J. B. Lacy, D. P. Mitchell, and W. M. </author> <title> Schell. </title> <booktitle> CryptoLib: Cryptography in Software. In Proceedings of the 4th USENIX Security Workshop, </booktitle> <pages> pages 1-17, </pages> <month> October </month> <year> 1993. </year>
Reference: [8] <author> L. Lamport, R. Shostak, and M. Pease. </author> <title> The Byzantine Generals Problem. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(3) </volume> <pages> 328-401, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: probability) p i and p j delivered the same message, i.e., payload (m) = payload (m 0 ). (Probability is taken assuming uniform choice of seq (m), and taken at the limit as seq (m) goes to infinity.) The problem statement above is strictly weaker than the Byzantine agreement problem <ref> [8] </ref>, which is known to be unsolvable in asynchronous systems [3]. This statement holds even if we use the unconditional Agreement requirement. The reason is that only messages from honest processes are required to be delivered, and thus messages from corrupt processes can "hang" forever.
Reference: [9] <author> D. Maher. </author> <title> Crypto Backup and Key Escrow. </title> <journal> Communications of the ACM, </journal> <volume> 39(3) </volume> <pages> 48-53, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Methods have been suggested to support crypto backup and key escrow by multiple agents, such that no agent can recover a key or the clear-text it encrypts alone <ref> [9] </ref>. In all of these services, distribution might increase the sensitivity to failures and malicious attacks. To address issues of availability and security, distributed services must rely on mechanisms for maintaining consistent intermediate state and for making coordinated decisions.
Reference: [10] <author> D. Malkhi and M. Reiter. </author> <title> A High-Throughput Secure Reliable Multicast Protocol. Journal of Computer Security, to appear. </title> <booktitle> Also in Proceedings of the 9th IEEE Computer Security Foundations Workshop, </booktitle> <pages> pages 9-17, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Reiter improved this message complexity in the ECHO protocol of the Rampart system [16] through the usage of digital signatures. The ECHO protocol incurs O (n) signed message exchanges, and thus, message complexity is improved at the expense of increased computation cost. Malkhi and Reiter <ref> [10] </ref> extended this approach to amortize the cost of computing digital signatures over multiple messages through a technique called acknowledgment chaining, where a signed acknowledgment directly verifies the message it acknowledges and indirectly, every message that message acknowledges. <p> Their definition does not apply in our case since different messages have distinct collections of possible witness sets. 7 Conclusions Experience in constructing robust distributed systems <ref> [2, 4, 10, 17, 18] </ref> shows that (secure) reliable broadcast is an important tool for distributed applications. Implementing reliable broadcast in an insecure environment with arbitrary failures incurs inevitable overhead required for maintaining consistency.
Reference: [11] <author> D. Malkhi and M. Reiter. </author> <title> Byzantine Quorum Systems. </title> <booktitle> In Proceedings of the 29th ACM Symposium on Theory of Computing (STOC), </booktitle> <month> May </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Witness sets are chosen so that any pair of them intersect at an honest process, and such that some witness set is always accessible despite failures. More precisely, witness sets satisfy the Consistency and Availability requirements of Byzantine dissemination quorum systems (cf. <ref> [11] </ref>), as follows: Definition 1.1 A dissemination quorum system is a set of subsets, called quorums, satisfying: For every set B of corrupt processes, and every two quorums Q 1 ; Q 2 , Q 1 " Q 2 6 B (Consistency).
Reference: [12] <author> D. Malkhi, M. Reiter and R. Wright. </author> <title> Probabilistic Quorum Systems. </title> <booktitle> In Proceeding of the 16th Annual ACM Symposium on the Principles of Distributed Computing (PODC 97), </booktitle> <address> Santa Barbara, CA, </address> <month> August </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Malkhi et. al <ref> [12] </ref> consider relaxed consistency requirements in the context of general quorum systems. Their probabilistic dissemination quorum systems resemble the witness sets we use in the active t protocol, but cannot be employed by corrupt clients as is the case we have in our protocols (where senders may be themselves corrupt).
Reference: [13] <author> P. M. Melliar-Smith, L. E. Moser, and V. Agrawala. </author> <title> Broadcast protocols for distributed systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems 1(1) </journal> <pages> 17-25, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Note that there is no ordering requirement among different messages, and thus the problem statement is weaker than the totally ordered reliable broadcast problem, which can be solved only probabilistically <ref> [13, 14] </ref>. The reliable multicast problem is solvable in our environment, as is demonstrated by the E protocol depicted in Figure 1 (which borrows from the Rampart ECHO multicast protocol [16]). 1.
Reference: [14] <author> L. E. Moser and P. M. Melliar-Smith. </author> <title> Total ordering algorithms for asynchronous byzantine systems. </title> <booktitle> In Proceedings of the 9th International Workshop on Distributed Algorithms. </booktitle> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1995. </year>
Reference-contexts: Note that there is no ordering requirement among different messages, and thus the problem statement is weaker than the totally ordered reliable broadcast problem, which can be solved only probabilistically <ref> [13, 14] </ref>. The reliable multicast problem is solvable in our environment, as is demonstrated by the E protocol depicted in Figure 1 (which borrows from the Rampart ECHO multicast protocol [16]). 1.
Reference: [15] <author> M. Naor and A. Wool. </author> <title> The load, capacity, and availability of quorum systems. </title> <booktitle> In Proceedings of the 35th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 214-225, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: A related notion of load defined by Naor and Wool <ref> [15] </ref> considers for a given set system the access probability of the busiest server under the best possible access strategy.
Reference: [16] <author> M. Reiter. </author> <title> Secure Agreement Protocols: Reliable and Atomic Group Multicast in Rampart. </title> <booktitle> In 2nd ACM Conf. on Computer and Communications Security, </booktitle> <pages> pages 68-80, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Reiter improved this message complexity in the ECHO protocol of the Rampart system <ref> [16] </ref> through the usage of digital signatures. The ECHO protocol incurs O (n) signed message exchanges, and thus, message complexity is improved at the expense of increased computation cost. <p> In this paper, we assume a static set of communicating processes. It is possible, however, to use known techniques (e.g., <ref> [16] </ref>) to extend our protocols to operate in a dynamic environment in which processes may leave or join the set of destination processes and in which processes may fail and recover. <p> The reliable multicast problem is solvable in our environment, as is demonstrated by the E protocol depicted in Figure 1 (which borrows from the Rampart ECHO multicast protocol <ref> [16] </ref>). 1. For a process p i to WAN-multicast m, process p i sends &lt;E; regular; m&gt; to P to obtain a set of d (n + t + 1)=2e signed acknowledgments A = f&lt;E; ack; K j (m)&gt;g. It then sends &lt;E; deliver; m; A&gt; to P . 2.
Reference: [17] <author> M. K. Reiter. </author> <title> The Rampart toolkit for building high-integrity services. </title> <booktitle> In Theory and Practice in Distributed Systems (Lecture Notes in Computer Science 938), </booktitle> <pages> pages 99-110, </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Distributed platforms can increase the efficiency of services and diminish the trust put in each component. For example, the Omega key management system [18] provides key backup, recovery and other functions in a penetration-tolerant way using the Rampart distributed communication infrastructure <ref> [17] </ref>. In a recently suggested electronic payment scheme [6], distribution of trust has been employed to maintain anonymity with the option of revoking it by a threshold of the participants. <p> Their definition does not apply in our case since different messages have distinct collections of possible witness sets. 7 Conclusions Experience in constructing robust distributed systems <ref> [2, 4, 10, 17, 18] </ref> shows that (secure) reliable broadcast is an important tool for distributed applications. Implementing reliable broadcast in an insecure environment with arbitrary failures incurs inevitable overhead required for maintaining consistency.
Reference: [18] <author> M. K. Reiter, M. K. Franklin, J. B. Lacy, and R. N. Wright. </author> <title> The key management service. </title> <booktitle> In Proceedings of the 3rd ACM Conference on Computer and Communications Security, </booktitle> <pages> pages 38-47, </pages> <month> March </month> <year> 1996. </year> <note> Revised version to appear in Journal of Computer Security. </note>
Reference-contexts: Experience with building robust distributed systems proves that (secure) reliable broadcast is an important tool for distributed applications. Distributed platforms can increase the efficiency of services and diminish the trust put in each component. For example, the Omega key management system <ref> [18] </ref> provides key backup, recovery and other functions in a penetration-tolerant way using the Rampart distributed communication infrastructure [17]. In a recently suggested electronic payment scheme [6], distribution of trust has been employed to maintain anonymity with the option of revoking it by a threshold of the participants. <p> Their definition does not apply in our case since different messages have distinct collections of possible witness sets. 7 Conclusions Experience in constructing robust distributed systems <ref> [2, 4, 10, 17, 18] </ref> shows that (secure) reliable broadcast is an important tool for distributed applications. Implementing reliable broadcast in an insecure environment with arbitrary failures incurs inevitable overhead required for maintaining consistency.
Reference: [19] <author> R. Rivest. </author> <title> The MD5 Message Digest Algorithm. </title> <type> RFC 1321, </type> <institution> SRI Network Information Center, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: We assume that every process in the system may obtain the public keys of all of the other processes, such that it can verify the authenticity of signatures. Our protocols also make use of a cryptographically secure hash function H (such as MD5 <ref> [19] </ref>). (In the following, we make the cryptographic assumption that H (m) = H (m 0 ) implies that m = m 0 ).
Reference: [20] <author> R. L. Rivest, A. Shamir, and L. Adleman. </author> <title> A Method for Obtaining Digital Signatures and Public-Key Cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <month> February </month> <year> 1978. </year>
Reference-contexts: We assume that every process possesses a private key, known only to itself, that may be used for signing data using a known public key cryptographic method (such as <ref> [20] </ref>). Let d be any data block. We denote by K i (d) the signature of p i on the data block d by means of p i 's private key.
Reference: [21] <author> S. Toueg. </author> <title> Randomized Byzantine agreement. </title> <booktitle> In Proceedings of the 3rd ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 163-178, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: Reliable broadcast underlies the mechanisms used in many infrastructure tools supporting such distributed systems (for a representative collection, cf. [2]). Previous work on the reliable broadcast problem suffers from message complexity and computation cost that do not scale to very large communication groups: Toueg's echo broadcast <ref> [21, 1] </ref> requires O (n 2 ) authenticated message exchanges for each message delivery (where n is the size of the group). Reiter improved this message complexity in the ECHO protocol of the Rampart system [16] through the usage of digital signatures.
References-found: 21

