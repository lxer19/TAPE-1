URL: ftp://ftp.cs.washington.edu/pub/ai/cbur-aips94.ps.Z
Refering-URL: http://www.cs.washington.edu/research/projects/softbots/www/papers.html
Root-URL: 
Email: weldg@cs.washington.edu  
Title: Probabilistic Planning with Information Gathering and Contingent Execution  
Author: Denise Draper Steve Hanks Daniel Weld fddraper, hanks, 
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering, FR-35 University of Washington  
Note: (Appears in Proceedings AIPS-94, pages 31-36)  
Abstract: eration have not included the concept of information-producing actions (also called diagnostics, or tests, in the decision making literature). We present a planning representation and algorithm that models information-producing actions and constructs plans that exploit the information produced by those actions. We extend the buridan (Kushmerick et al. 1994) probabilistic planning algorithm, adapting the action representation to model the behavior of imperfect sensors, and combine it with a framework for contingent action that extends the cnlp algorithm (Peot and Smith 1992) for conditional execution. The result, c-buridan, is an implemented planner that builds plans with probabilistic information-producing actions and contingent execution. 
Abstract-found: 1
Intro-found: 1
Reference: <editor> J. Allen, J. Hendler, and A. Tate, editors. </editor> <booktitle> Readings in Planning. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <month> August </month> <year> 1990. </year>
Reference: <author> D. Draper, S. Hanks, and D. Weld. </author> <title> Probabilistic planning with information gathering and contingent execution. </title> <type> Technical Report 93-12-04, </type> <institution> University of Washington, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Representation: Actions & Contexts Our representation and semantics are based on the buridan planner (Kushmerick et al. 1994); here we provide a brief summary, and refer the reader to <ref> (Draper et al. 1993) </ref> for more detail. A state is a complete description of the world at a point in time. Uncertainty about the world is represented by a random variable over states. An expression is a set (conjunction) of literals which represents a set of states. <p> Finally, c-buridan has an additional threat-resolution technique, branching, unique to a contingent planner. 3 Intuitively, branching ensures that the threatening step can never be executed in the same 2 (Kushmerick et al. 1994) and <ref> (Draper et al. 1993) </ref> discuss plan assessment in detail. Here we will point out only the relationship between assessment and the planner's use of correlated information. <p> For the sake of brevity we will illustrate one correct series of choices. 5 More precisely we choose any partition of A i 's observation labels; technically, this requires the more complex definition of context presented in <ref> (Draper et al. 1993) </ref>. 5. Update the contexts of A s and A t to include the new observation labels: context (A t ) := context (A t ) ^ c, and context (A s ) := context (A s ) ^ c 0 . <p> Thus we can determine when an action will be useful by propagating contexts along causal links, and we can restrict an action's context based on the propagated information. <ref> (Draper et al. 1993) </ref> defines precisely when an action is "useful" in a plan, and develops a propagation algorithm that restricts an action's context accordingly. The algorithm is similar to to the way cnlp propagates context labels, but is adapted to our more general plan structure.
Reference: <author> O. Etzioni, S. Hanks, D. Weld, D. Draper, N. Lesh, and M. Williamson. </author> <title> An Approach to Planning with Incomplete Information. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <month> October </month> <year> 1992. </year>
Reference: <author> N. Kushmerick, S. Hanks, and D. Weld. </author> <title> An Algorithm for Probabilistic Planning. </title> <journal> Artificial Intelligence, </journal> <note> 1994. To appear. (Short version in AAAI-94) D. </note> <author> McAllester and D. Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proc. 9th Nat. Conf. on A.I., </booktitle> <pages> pages 634-639, </pages> <month> July </month> <year> 1991. </year> <title> internet file at ftp.ai.mit.edu: </title> <publisher> /pub/users/dam/aaai91c.ps. </publisher>
Reference-contexts: Likewise, building a contingent plan is useless unless the agent can learn more at execution time than it knows while planning. This paper presents an implemented algorithm for probabilistic planning with information-producing actions and contingent execution. We extend the buridan <ref> (Kushmerick et al. 1994) </ref> probabilistic action representation to allow actions with both informational and causal effects, combined with a framework for building contingent plans that builds on the cnlp fl This research was funded in part by NASA GSRP Fellowship NGT-50822, National Science Foundation Grants IRI-9206733 and IRI-8957302, and Office of <p> The accuracy of a sensor can depend on the prevailing world state. * Informational dependencies: c-buridan can make use of correlated information, such as planning to sense BL when it needs information about FL. Representation: Actions & Contexts Our representation and semantics are based on the buridan planner <ref> (Kushmerick et al. 1994) </ref>; here we provide a brief summary, and refer the reader to (Draper et al. 1993) for more detail. A state is a complete description of the world at a point in time. Uncertainty about the world is represented by a random variable over states. <p> Finally, c-buridan has an additional threat-resolution technique, branching, unique to a contingent planner. 3 Intuitively, branching ensures that the threatening step can never be executed in the same 2 <ref> (Kushmerick et al. 1994) </ref> and (Draper et al. 1993) discuss plan assessment in detail. Here we will point out only the relationship between assessment and the planner's use of correlated information.
Reference: <author> J.S. Penberthy and D. Weld. UCPOP: </author> <title> A sound, complete, partial order planner for ADL. </title> <booktitle> In Proc. 3rd Int. Conf. on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> pages 103-114, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The second difference lies in how c-buridan resolves threats. Like classical planners, c-buridan may promote or demote a threatening action by ordering it before the producer or after the consumer of the threat ened link. Like buridan or ucpop <ref> (Penberthy and Weld 1992) </ref>, c-buridan may also confront a threat: when the threatening action has benign as well as threatening consequences, c-buridan can adopt the triggers of one of the benign consequences as subgoals, which has the effect of decreasing the probability of the threatening consequences.
Reference: <author> M. Peot and D. Smith. </author> <title> Conditional Nonlinear Planning. </title> <booktitle> In Proc. 1st Int. Conf. on A.I. Planning Systems, </booktitle> <pages> pages 189-197, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: representation to allow actions with both informational and causal effects, combined with a framework for building contingent plans that builds on the cnlp fl This research was funded in part by NASA GSRP Fellowship NGT-50822, National Science Foundation Grants IRI-9206733 and IRI-8957302, and Office of Naval Research Grant 90-J-1904. algorithm <ref> (Peot and Smith 1992) </ref>. c-buridan takes as input a probability distribution over initial world states, a goal expression, a set of action descriptions, and a probability threshold, and produces a contingent plan that makes the goal expression true with a probability no less than the threshold. 1 Example Suppose that a <p> Similarly a test-blood action might detect a disease, but also affect the state of the patient. Contexts We represent contingent execution in a manner nearly identical to cnlp <ref> (Peot and Smith 1992) </ref>. Each action A i in the plan is annotated with a context, denoted context (A i ), dictating the circumstances under which the action should be executed. A context is a set (conjunction) of observation labels from previous steps in the plan. <p> The correlation between FL and BL is thus detected by assessment, although an explicit connec tion between the two propositions is never made. 3 <ref> (Peot and Smith 1992) </ref> call this technique "condition execution trace as the producer or consumer of the threatened link. <p> Our approach to contingent planning borrows much from the cnlp algorithm of <ref> (Peot and Smith 1992) </ref>.
Reference: <author> L. Pryor and G. Collins. CASSANDRA: </author> <title> Planning for contingencies. </title> <type> Technical Report 41, </type> <institution> Northwestern University, The Institute for the Learning Sciences, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: We also treat contingencies differently: in cnlp, every time a new execution context is introduced into the plan (by conditioning or branching) a new instance of the goal step is also added with that context|cnlp's plans are thus completely tree-structured. Cassandra <ref> (Pryor and Collins 1993) </ref> is another deterministic causal-link contingency planner. It manipulates a more expressive action representation than cnlp, but uses similar mechanisms for generating branching (contingent) plans.
Reference: <author> D. Warren. </author> <title> Generating Conditional Plans and Programs. </title> <booktitle> In Proceedings of AISB Summer Conference, </booktitle> <pages> pages 344-354, </pages> <institution> University of Edinburgh, </institution> <year> 1976. </year>
Reference: <author> Robert L. Winkler. </author> <title> Introduction to Bayesian Inference and Decision. </title> <publisher> Holt, Rinehart, and Winston, </publisher> <year> 1972. </year>
References-found: 9

