URL: http://krr.irst.itc.it:1024/dl/course/articles/complexity.ps.gz
Refering-URL: http://krr.irst.itc.it:1024/dl/course/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: The Comple xity of Concept Languages  
Author: F M. Donini, M. Lenzerini, D di,W Nutt 
Affiliation: Research Repor t  
Pubnum: RR-95-07  
Abstract-found: 0
Intro-found: 1
Reference: [BFH + 94] <author> Franz Baader, Enrico Franconi, Bernhard Hollunder, Bernhard Nebel, and Hans-Jurgen Profitlich. </author> <title> An empirical analysis of optimization techniques for terminological representation systems or: Making KRIS get a move on. </title> <journal> Applied Intelligence. Special Issue on Knowledge Base Management, </journal> <volume> 4 </volume> <pages> 109-132, </pages> <year> 1994. </year>
Reference-contexts: This novel paradigm was motivated by the shortcomings of semantic networks, which have been criticized for their lack of formal semantics which results in ambiguity and contradictions [Woo75, Bra85]. During the last ten years, this line of research has led to the development of various TKRSs (see for example <ref> [WS92, SIG91, BFH + 94] </ref>). These systems make a clear distinction between intensional knowledge, or general knowledge about the problem domain, and extensional knowledge, which is specific to a particular problem. <p> More specifically, it provides an algorithmic framework that is parametric with respect to the language constructs. For many AL-langugages, the algorithms for concept satisfiabil-ity and subsumption obtained from the calculus on constraints represent the only known complete deduction procedures. They have been the basis of actual implementations <ref> [BH91, BFH + 94] </ref> where they have been tuned by special control strategies. Third, the analysis of intractable cases has led to discover cases of incompleteness of the algorithms developed for implemented systems, and can be used in the definition of worst-case test sets for verifying implementations.
Reference: [BFL83] <author> Ronald J. Brachman, Richard E. Fikes, and Hector J. Levesque. </author> <title> KRYPTON: A functional approach to knowledge representation. </title> <journal> IEEE Computer, </journal> <volume> 16(10) </volume> <pages> 67-73, </pages> <year> 1983. </year>
Reference-contexts: This name comes historically from the use of concept names as terms in the language of the external KBS. The module of the KRS containing the terminology is known as Terminological Box, or simply TBox <ref> [BFL83] </ref>. As an example, we discuss a terminology whose pictorial representation is given in Parent := Person u 9has-child.Person u 8has-child.Person: "A parent is a person having at least one child, who is a person, and all of his/her children are persons".
Reference: [BH91] <author> Franz Baader and Bernhard Hollunder. KRIS: </author> <title> Knowledge Representation and Inference System. </title> <journal> SIGART Bulletin, </journal> <volume> 2(3) </volume> <pages> 8-14, </pages> <year> 1991. </year>
Reference-contexts: More specifically, it provides an algorithmic framework that is parametric with respect to the language constructs. For many AL-langugages, the algorithms for concept satisfiabil-ity and subsumption obtained from the calculus on constraints represent the only known complete deduction procedures. They have been the basis of actual implementations <ref> [BH91, BFH + 94] </ref> where they have been tuned by special control strategies. Third, the analysis of intractable cases has led to discover cases of incompleteness of the algorithms developed for implemented systems, and can be used in the definition of worst-case test sets for verifying implementations.
Reference: [BL84] <author> Ronald J. Brachman and Hector J. Levesque. </author> <title> The tractability of subsumption in frame-based description languages. </title> <booktitle> In Proceedings of the Fourth National Conference on Artificial Intelligence (AAAI-84), </booktitle> <pages> pages 34-37, </pages> <year> 1984. </year>
Reference-contexts: The efficiency of reasoning has often been advocated as a primary motivation for the use of such systems. Among the consequences of the formalization of the representation language, there is the possibility of studying the computational properties of inference by means of a complexity analysis, as first proposed in <ref> [BL84] </ref>. Deduction methods and computational properties of reasoning problems in concept languages are the subject of this paper. We use standard notions from complexity theory (see for example [Joh90]). <p> In other words, structural subsumption is in general weaker than logical subsumption. The study of correct and complete algorithms for reasoning in concept languages and the systematic use of complexity analysis to characterize their computational properties originated with the influential paper by Brachman and Levesque <ref> [BL84] </ref>. They provided a 6 complete polynomial algorithm for a very limited language, called F L , and showed that for the seemingly slightly more expressive language F L subsumption is co-NP-hard (for a definition of F L and F L see Subsection 4.3). <p> Nebel [Neb88] identified other constructs that give rise to co-NP-hard subsumption problems. Other work identified languages with undecidable subsumption problem [Pat89, Sch89, Sch88]. However, neither <ref> [BL84, LB87] </ref> nor [Neb88] give algorithms for the co-NP-hard languages. The first nonstructural complete subsumption algorithm was devised by Schmidt-Schau and Smolka [SS91], for an extension of F L by a construct for complements of concepts, called ALC. <p> The aim of the paper is to provide a complete computational analysis of the inference problems for concept description languages obtained by combining the most frequently used concept forming constructs. Therefore, the paper ideally fulfills one of the goals of the research started after Brachman and Levesque's paper <ref> [BL84] </ref>, namely determining the computational complexity of inference in a concept language characterized in terms of its concept-forming constructs. The outcomes of our study have both theoretical and practical significance. <p> For the syntax of concepts, we employ a notation that is similar to the one in [SS91]. The specification of the semantics follows the one in <ref> [BL84] </ref> and [SS91]. 2.1 Syntax and Semantics of Concepts In the simplest AL-language, called AL, concepts (ranged over by C, D) are built out of atomic concepts (ranged over by A) and atomic roles (ranged over by P ) according to 9 the syntax rule C; D ! A j (atomic <p> Throughout the paper, if no particular language is specified, we refer to ALCN R-concepts simply as "concepts." In addition to AL-languages, in Section 4.3 we consider also the concept language F L <ref> [BL84] </ref>, whose concepts can be expressed as particular ALCN R-concepts. 2.2 Concepts as Predicate Logic Formulas The semantics of concepts identifies concept languages as fragments of first-order predicate logic. <p> The following two results have been shown in [SS91]. Lemma 4.6 (ALC-Reduction) A quantified boolean formula P . M is valid if and only if its translation C P . M is satisfiable. Theorem 4.7 Satisfiability of ALC-concepts is PSPACE-hard. 4.3 Subsumption in F L In their paper <ref> [BL84] </ref>, which initiated the complexity analysis of concept languages, Brach-man and Levesque introduced the language F L , which can be thought of as the minimal meaningful concept language, and proved that the subsumption problem in F L can be solved in quadratic time. <p> This can be seen by considering a completion of fx: Cg, which due to the lack of any kind of complement does not contain a clash. Therefore, deciding the satisfiability of F L -concepts is trivial. As said before, it has been shown <ref> [BL84] </ref> that subsumption of F L -concepts can be decided in polynomial time. This result also follows from a more general result in Section 7 where subsumption in the more expressive language ALN is proved to be polynomial. The language F L extends F L by more expressive roles. <p> Theorem 5.7 (NP-Completeness) Subsumption and unsatisfiability are NP-complete problems for ALE , ALR, and ALER. As discussed in Section 3.4, results on NP-completeness have a character different from former intractability results for concept languages. The work in <ref> [BL84, Neb88, SS91] </ref> identified the disjunctive constructs role restriction, "at-most" restriction, and union that together with concept intersection give rise to intractability. The NP-hardness of ALE and ALR, however, shows that the interplay of universal and existential quantifiers is another unavoidable source of complexity. <p> For the concept language F L, which does not fit into the lattice of AL-languages, we have shown that subsumption is PSPACE-complete, thus improving upon an earlier result by Brachman and Levesque <ref> [BL84] </ref>, who showed that it is co-NP-hard. In Section 3.4, we have singled out two possible sources of complexity. First, complexity comes in through the interplay between conjunctive constructs, like intersection, and disjunctive constructs, like union or "at-most" restrictions that are activated by full existential quantification. <p> Originally, the complexity analysis of terminological reasoning started with the goal to identify languages for which subsumption can be decided in polynomial time <ref> [BL84] </ref>. Now it has turned out that practically all interesting constructs in concept languages lead to intractability. One might conclude from the results in this paper that terminological reasoning in all its variants is infeasible.
Reference: [BL85] <author> Ronald J. Brachman and Hector J. Levesque. </author> <title> Readings in Knowledge Representation. </title> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, </address> <year> 1985. </year>
Reference: [BM77] <author> John L. Bell and Moshe Machover. </author> <title> A Course in Mathematical Logic. </title> <publisher> North-Holland Publ. Co., </publisher> <address> Amsterdam, </address> <year> 1977. </year>
Reference-contexts: The calculus appeared first in [HNS90] and is discussed in full detail in [HN95]. It is influenced by the completion calculus in [SS91], but employs a much simpler notation that emphasizes its similarity to the tableaux calculus for first-order predicate logic (see <ref> [Smu68, BM77, Fit90] </ref>). The calculus consists of inference rules that decompose complex concepts according to the top-level construct. Actually, the rules can be simulated by applications of several rules of the tableaux calculus using a special control strategy.
Reference: [Bra79] <author> Ronald J. Brachman. </author> <title> On the epistemological status of semantic networks. </title> <editor> In Nicholas V. Findler, editor, </editor> <booktitle> Associative Networks, </booktitle> <pages> pages 3-50. </pages> <publisher> Academic Press, </publisher> <year> 1979. </year>
Reference-contexts: Such TKRSs have their roots in Structured Inheritance Networks proposed by Brachman and realized in the kl-one system <ref> [Bra79] </ref>. This novel paradigm was motivated by the shortcomings of semantic networks, which have been criticized for their lack of formal semantics which results in ambiguity and contradictions [Woo75, Bra85].
Reference: [Bra85] <author> Ronald J. Brachman. </author> <title> "I lied about the trees". </title> <journal> AI Magazine, </journal> <volume> 6(3) </volume> <pages> 80-93, </pages> <year> 1985. </year>
Reference-contexts: Such TKRSs have their roots in Structured Inheritance Networks proposed by Brachman and realized in the kl-one system [Bra79]. This novel paradigm was motivated by the shortcomings of semantic networks, which have been criticized for their lack of formal semantics which results in ambiguity and contradictions <ref> [Woo75, Bra85] </ref>. During the last ten years, this line of research has led to the development of various TKRSs (see for example [WS92, SIG91, BFH + 94]).
Reference: [Bra92] <author> Ronald J. Brachman. </author> <title> "Reducing" CLASSIC to practice: Knowledge representation meets reality. </title> <booktitle> In Proceedings of the Third International Conference on the Principles of Knowledge Representation and Reasoning (KR-92), </booktitle> <pages> pages 247-258. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, </address> <year> 1992. </year>
Reference-contexts: First of all, the study of the computational behavior of concept languages has led to a clear understanding of the properties of the language constructs and their interaction. This is not only valuable from a theoretical viewpoint, but gives insights to the designer of a TKRS (see for example <ref> [Bra92] </ref>), with clear indications of the language constructs or their combinations that are difficult to deal with and general methods to cope with them.
Reference: [BS85] <author> Ronald J. Brachman and James G. Schmolze. </author> <title> An overview of the KL-ONE knowledge representation system. </title> <journal> Cognitive Science, </journal> <volume> 9(2) </volume> <pages> 171-216, </pages> <year> 1985. </year>
Reference-contexts: Most languages provide existential and universal quantification over roles that allow one to describe the classes of "individuals having a female child" and of "individuals whose children are all female" by the concepts 9has-child.Female and 8has-child.Female: In a kl-one-like notation <ref> [BS85] </ref>, the latter concept corresponds to a link via the role has-child, and a value restriction to Female of this link. Number restrictions on roles denote classes of individuals having at least or at most a certain number of fillers for a role.
Reference: [DHL + 92] <author> Francesco M. Donini, Bernhard Hollunder, Maurizio Lenzerini, Alber-to Marchetti Spaccamela, Daniele Nardi, and Werner Nutt. </author> <title> The complexity of existential quantification in concept languages. </title> <journal> Artificial Intelligence, </journal> <volume> 2-3:309-327, </volume> <year> 1992. </year>
Reference-contexts: This observation yields a polynomial-space algorithm for checking the satisfiability of ALC-concepts. Subsumption can be computed by reducing it to unsatisfiability: C is subsumed by D if and only if the ALC-concept C u :D is unsatisfiable. Hence subsumption too is PSPACE-complete. In <ref> [DHL + 92] </ref>, it was shown that unsatisfiability and subsumption in the language ALE, obtained by adding qualified existential quantification to AL, is NP-complete, thus proving that existential quantification indeed represents a source of complexity in the language. <p> Since such a proof can be guessed in nondeterministic polynomial time, it follows that the problem of deciding subsumption between ALER-concepts is in NP. In <ref> [DHL + 92] </ref> unsatisfiability and subsumption in ALE were shown to be NP-complete, hence they are NP-complete for ALER too. <p> The nondeterminism in choosing a constraint to which the ! T 9 -rule applies persists. The following lemmata can be proved with arguments similar to those in <ref> [DHL + 92] </ref>. Lemma 5.2 Let C be a simple ALCR-concept. Then: 1. every S-rule derivation starting with ffx: Cgg terminates; 2. <p> By the above arguments, computing such a derivation takes time polynomial in the size of C and D. 5.2 NP-Hardness Results From <ref> [DHL + 92] </ref> we know that unsatisfiability in ALE is NP-hard. We use this result to conclude that unsatisfiability in ALR is NP-hard, too. Theorem 5.5 Unsatisfiability in ALR is NP-hard. Proof. <p> Languages are grouped according to the complexity of unsatisfiability and subsumption. Previous results, noted in the last row, are the following. Complete results for both unsatisfiability and subsumption have been given (2) for ALE in <ref> [DHL + 92] </ref>, and (4) for ALC in [SS91].
Reference: [dRvdH95] <author> Marten de Rijke and Wiebe van der Hoek. </author> <title> Counting objects in generalized quantifier theory, modal logic, and knowledge representation. </title> <journal> Journal of Logic and Computation, </journal> <volume> 5(3) </volume> <pages> 325-346, </pages> <year> 1995. </year>
Reference-contexts: Number restrictions correspond to a numerically-parameterized modal operator, and our results can be transferred to reasoning in such non-standard modal logics <ref> [dRvdH95] </ref>. With regard to query containment in databases, we observe that the main difference between database query languages and concept languages is that concept languages have a variable-free syntax. This, on one hand, limits the expressiveness of concept languages as query languages.
Reference: [Fit90] <author> Melvin Fitting. </author> <title> First-Order Logic and Automated Theorem Proving. </title> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <month> 55 </month>
Reference-contexts: The calculus appeared first in [HNS90] and is discussed in full detail in [HN95]. It is influenced by the completion calculus in [SS91], but employs a much simpler notation that emphasizes its similarity to the tableaux calculus for first-order predicate logic (see <ref> [Smu68, BM77, Fit90] </ref>). The calculus consists of inference rules that decompose complex concepts according to the top-level construct. Actually, the rules can be simulated by applications of several rules of the tableaux calculus using a special control strategy.
Reference: [GJ79] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractability|A guide to NP-completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: The predicate is-true is interpreted over B in the obvious way. Now, P . M is said to be valid if P . M 0 is valid over B. Deciding the validity of quantified boolean formulas is a PSPACE-complete problem <ref> [GJ79] </ref>. The following reformulation of the problem is due to [SS91]. A literal is a nonzero integer. A clause is a nonempty finite set N of literals such that l 2 N implies l =2 N .
Reference: [HKNP94] <author> Jochen Heinsohn, Daniel Kudenko, Bernhard Nebel, and Hans-Jurgen Prof-itlich. </author> <title> An empirical analysis of terminological representation systems. </title> <journal> Artificial Intelligence, </journal> <volume> 68(2) </volume> <pages> 367-396, </pages> <year> 1994. </year>
Reference-contexts: Third, the analysis of intractable cases has led to discover cases of incompleteness of the algorithms developed for implemented systems, and can be used in the definition of worst-case test sets for verifying implementations. For example, the comparison of implemented systems described in <ref> [HKNP94] </ref> has benefited from the results of the complexity analysis. There are at least two other areas of research that have a relationship with concept description languages and the associated inference problems: modal logic and query containment in databases.
Reference: [HM92] <author> Joseph Y. Halpern and Yoram Moses. </author> <title> A guide to completeness and complexity for modal logics of knowledge and belief. </title> <journal> Artificial Intelligence, </journal> <volume> 54(3) </volume> <pages> 319-380, </pages> <year> 1992. </year>
Reference-contexts: Schild [Sch91] pointed out that certain concept languages are notational variants of certain propositional modal logics. Among the languages we consider, ALC has a modal 7 logic counterpart, namely the multimodal version of the logic K (see <ref> [HM92] </ref>). Actually, ALC-concepts and formulas in multimodal K can immediately be translated into each other. Moreover, a concept is satisfiable if and only if the corresponding formula is satisfiable. <p> Ladner [Lad77] showed that satisfiability in unimodal K|a logic whose counterpart is the set of all ALC-concepts with at most one role symbol|is PSPACE-complete. Interestingly, in order to prove membership in PSPACE, Ladner, too, exhibited a tableaux-like algorithm. Halpern and Moses <ref> [HM92] </ref> showed, again using a tableaux calculus, that also in multimodal K satisfiability of formulas can be decided with polynomial space. However, the results we found on the complexity of reasoning in concept languages are new if translated into the framework of modal logic.
Reference: [HN90] <author> Bernhard Hollunder and Werner Nutt. </author> <title> Subsumption algorithms for concept languages. </title> <type> Technical Report RR-90-04, </type> <institution> Deutsches Forschungszentrum fur Kunstliche Intelligenz (DFKI), Kaiserslautern, Germany, </institution> <year> 1990. </year>
Reference-contexts: For our work we employ a calculus of logical constraints that has first been introduced in <ref> [HN90] </ref> and that significantly extends the one in [SS91]. In fact, it covers a more expressive language, and it employs a more concise notation, which points out its similarity 8 to the tableaux calculus for first-order predicate logic. We use the calculus in two ways.
Reference: [HN95] <author> Bernhard Hollunder and Werner Nutt. </author> <title> Algorithms for concept languages. </title> <note> Research Report, DFKI, Stuhlsatzenhausweg 3, </note> <institution> D-66123 Saarbrucken, Germany, </institution> <year> 1995. </year> <month> Forthcoming. </month>
Reference-contexts: The calculus appeared first in [HNS90] and is discussed in full detail in <ref> [HN95] </ref>. It is influenced by the completion calculus in [SS91], but employs a much simpler notation that emphasizes its similarity to the tableaux calculus for first-order predicate logic (see [Smu68, BM77, Fit90]). The calculus consists of inference rules that decompose complex concepts according to the top-level construct. <p> Moreover, also the formula (n R) (x) contains disjunction, as shown in Subsection 2.2. 17 The following proposition shows that the completion rules keep the satisfiability of constraint systems invariant. The proof follows straightforwardly from the soundness of the tableaux calculus (see <ref> [HN95] </ref>). Theorem 3.4 (Invariance) Let S and S 0 be constraint systems. 1. If S 0 is obtained from S by application of a deterministic rule, then S is satisfiable if and only if S 0 is satisfiable. 2. <p> Completeness is shown by proving that there is no infinite chain of rule applications issuing from fx: Cg, and then using the Invariance Theorem 3.4. Below we outline the proofs and describe the underlying ideas. The full proofs are given in <ref> [HN95] </ref>. A constraint system is complete if no completion rule applies to it. A complete system that has been derived from a system S is also called a completion of S. <p> Our next goal is to show the completeness of the calculus. To this end it is necessary to prove the termination of the completion calculus, which is done by exhibiting a suitable termination order (see <ref> [HN95] </ref>). Proposition 3.9 (Termination) Let C be a simple concept. Then there is no infinite chain of completion steps issuing from fx: Cg. Theorem 3.10 (Completeness) Let C be a simple concept. <p> In order to make this more precise we will modify the general calculus given in Subsection 3.2 in such a way that "at-least"-constraints only lead to the introduction of a single new variable. The modified calculus appeared first in [HNS90] and its soundness and completeness are proved in <ref> [HN95] </ref>. We present it here because it is the basis for our complexity studies. <p> However, as the next lemma shows, the quasi-completion rules provide a sound and complete method for deciding the satisfiability of ALCN -concepts. A proof of the lemma can be found in <ref> [HN95] </ref>. Lemma 6.1 Let C be a simple ALCN -concept and S be a quasi-complete constraint system derived from fx: Cg by the quasi-completion rules.
Reference: [HNS90] <author> Bernhard Hollunder, Werner Nutt, and Manfred Schmidt-Schau. </author> <title> Subsump-tion algorithms for concept description languages. </title> <booktitle> In Proceedings of the Ninth European Conference on Artificial Intelligence (ECAI-90), </booktitle> <pages> pages 348-353, </pages> <address> London, 1990. </address> <publisher> Pitman. </publisher>
Reference-contexts: Hence, whenever we prove that the unsatisfiability problem is NP-hard, co-NP-hard, or PSPACE-hard, then so are the other problems. 13 3 A Calculus for Checking Satisfiability In this section we introduce a calculus for checking the satisfiability of concepts. The calculus appeared first in <ref> [HNS90] </ref> and is discussed in full detail in [HN95]. It is influenced by the completion calculus in [SS91], but employs a much simpler notation that emphasizes its similarity to the tableaux calculus for first-order predicate logic (see [Smu68, BM77, Fit90]). <p> In order to make this more precise we will modify the general calculus given in Subsection 3.2 in such a way that "at-least"-constraints only lead to the introduction of a single new variable. The modified calculus appeared first in <ref> [HNS90] </ref> and its soundness and completeness are proved in [HN95]. We present it here because it is the basis for our complexity studies.
Reference: [Joh90] <author> David S. Johnson. </author> <title> A catalog of complexity classes. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume A, chapter 2. </booktitle> <publisher> Elsevier Science Publishers B. V. (North Holland), </publisher> <year> 1990. </year>
Reference-contexts: Deduction methods and computational properties of reasoning problems in concept languages are the subject of this paper. We use standard notions from complexity theory (see for example <ref> [Joh90] </ref>).
Reference: [Kan90] <author> Paris C. Kanellakis. </author> <title> Elements of relational database theory. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume A, chapter 17. </booktitle> <publisher> Elsevier Science Publishers B. V. (North Holland), </publisher> <year> 1990. </year>
Reference-contexts: This, on one hand, limits the expressiveness of concept languages as query languages. In fact, database query languages may create arbitrary coreferences between different parts of a query by using the same variable name. On the other hand, query containment in relational query languages is undecidable <ref> [Kan90, pg.1083] </ref>, while subsumption is decidable for most concept languages (see results in this paper).
Reference: [Lad77] <author> Richard E. Ladner. </author> <title> The computational complexity of provability in systems of modal propositional logic. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(3) </volume> <pages> 467-480, </pages> <year> 1977. </year>
Reference-contexts: Moreover, a concept is satisfiable if and only if the corresponding formula is satisfiable. Research in the complexity of the satisfiability problem for modal propositional logics started a long time before the complexity of concept languages was investigated. Ladner <ref> [Lad77] </ref> showed that satisfiability in unimodal K|a logic whose counterpart is the set of all ALC-concepts with at most one role symbol|is PSPACE-complete. Interestingly, in order to prove membership in PSPACE, Ladner, too, exhibited a tableaux-like algorithm.
Reference: [LB87] <author> Hector J. Levesque and Ronald J. Brachman. </author> <title> Expressiveness and tractability in knowledge representation and reasoning. </title> <journal> Computational Intelligence, </journal> <volume> 3 </volume> <pages> 78-93, </pages> <year> 1987. </year>
Reference-contexts: Nebel [Neb88] identified other constructs that give rise to co-NP-hard subsumption problems. Other work identified languages with undecidable subsumption problem [Pat89, Sch89, Sch88]. However, neither <ref> [BL84, LB87] </ref> nor [Neb88] give algorithms for the co-NP-hard languages. The first nonstructural complete subsumption algorithm was devised by Schmidt-Schau and Smolka [SS91], for an extension of F L by a construct for complements of concepts, called ALC.
Reference: [Lev84] <author> Hector J. Levesque. </author> <title> Foundations of a functional approach to knowledge representation. </title> <journal> Artificial Intelligence, </journal> <volume> 23 </volume> <pages> 155-212, </pages> <year> 1984. </year>
Reference-contexts: The communication between the KRS and the rest of the KBS is realized via queries and answers to queries. The type of language used to represent knowledge, and the inferences drawn from it characterize the KRS <ref> [Lev84] </ref>. In this paper we are concerned with Terminological Knowledge Representation Systems (TKRSs), whose basic feature is to represent knowledge by means of taxonomies, here called terminologies, and to provide a specialized reasoning engine to do inferences on these structures.
Reference: [Lip82] <author> Thomas Lipkis. </author> <title> A KL-ONE classifier. </title> <editor> In J.G. Schmolze and R.J. Brachman, editors, </editor> <booktitle> Proc. 1981 KL-ONE Workshop, </booktitle> <pages> pages 128-145, </pages> <address> Cambridge (Mas-sachusetts, USA), </address> <year> 1982. </year> <note> The proceedings have been published as BBN Report No. 4842 and as AI Technical Report 4, </note> <institution> Schlumberger Palo Alto Research. </institution>
Reference-contexts: Subsumption had been recognized as the key inference and the basic idea of the first subsumption algorithms was to transform two input concepts into labeled graphs and test whether one could be embedded into the other; the embedded graph would correspond to the more general concept (the subsumer) (see <ref> [Lip82] </ref>). This method is called structural comparison, and the relation between concepts it computes is called structural subsumption.
Reference: [Neb88] <author> Bernhard Nebel. </author> <title> Computational complexity of terminological reasoning in BACK. </title> <journal> Artificial Intelligence, </journal> <volume> 34(3) </volume> <pages> 371-383, </pages> <year> 1988. </year> <month> 56 </month>
Reference-contexts: They provided a 6 complete polynomial algorithm for a very limited language, called F L , and showed that for the seemingly slightly more expressive language F L subsumption is co-NP-hard (for a definition of F L and F L see Subsection 4.3). Nebel <ref> [Neb88] </ref> identified other constructs that give rise to co-NP-hard subsumption problems. Other work identified languages with undecidable subsumption problem [Pat89, Sch89, Sch88]. However, neither [BL84, LB87] nor [Neb88] give algorithms for the co-NP-hard languages. <p> Nebel <ref> [Neb88] </ref> identified other constructs that give rise to co-NP-hard subsumption problems. Other work identified languages with undecidable subsumption problem [Pat89, Sch89, Sch88]. However, neither [BL84, LB87] nor [Neb88] give algorithms for the co-NP-hard languages. The first nonstructural complete subsumption algorithm was devised by Schmidt-Schau and Smolka [SS91], for an extension of F L by a construct for complements of concepts, called ALC. <p> Hence, satisfiability in ALU is NP-hard. Contrast this result with the one on ALE : there, unsatisfiability is NP-hard|hence satisfiability is co-NP-hard|while here satisfiability is NP-hard. Note that disjunction can appear also implicitly through combinations of other constructs, as shown in <ref> [Neb88] </ref> for the language ALN R. Finally, the language AL, which does not include any of the two sources of complexity was investigated in [SS91], and it was proved that satisfiability in this language can be checked by means of a polynomial time algorithm. <p> Proof. Satisfiability of ALC-concepts can be reduced to satisfiability of ALU R concepts, since for every simple ALC-concept C the E-simulation ~ C is in ALU R. 34 4.5 Unsatisfiability in ALN R We show that unsatisfiability in ALN R is PSPACE-hard. This sharpens a result by Nebel <ref> [Neb88] </ref>, who showed that subsumption in ALN R is co-NP-hard. The proof is by a reduction of the validity problem for quantified boolean formulas (QBF). We first reduce QBF to satisfiability in ALEN R. Then using E-simulations we conclude the claim. Let P . <p> Theorem 5.7 (NP-Completeness) Subsumption and unsatisfiability are NP-complete problems for ALE , ALR, and ALER. As discussed in Section 3.4, results on NP-completeness have a character different from former intractability results for concept languages. The work in <ref> [BL84, Neb88, SS91] </ref> identified the disjunctive constructs role restriction, "at-most" restriction, and union that together with concept intersection give rise to intractability. The NP-hardness of ALE and ALR, however, shows that the interplay of universal and existential quantifiers is another unavoidable source of complexity. <p> The check for simplified clashes can be performed in polynomial time, too, since S has polynomial cardinality. 6.3 Co-NP-Hard Languages In Section 5 we have seen that deciding the unsatisfiability of ALEN -concepts is NP-hard. Actually, Nebel's proof <ref> [Neb88] </ref> of co-NP-hardness of subsumption in ALN R yields a second lower bound of the complexity of unsatisfiability in ALEN . <p> Notes with a star refer to partial results. ALU is co-NP-complete. In <ref> [Neb88] </ref>, it was shown that (5*) subsumption in ALN R is co-NP-hard. All other results represented by the table have been proved in this paper. The only language that we could not completely characterize is ALEN , which extends AL by full existential quantification and number restrictions. <p> The only language that we could not completely characterize is ALEN , which extends AL by full existential quantification and number restrictions. However, we have provided lower and upper complexity bounds. It follows from results reported in <ref> [Neb88] </ref> that unsatisfiability for ALEN is co-NP-hard (see Subsection 6.4), whereas in this paper we proved that unsatisfiability is also NP-hard (see Subsection 5.3). Since ALEN is a sublanguage of ALCN R, the top element in our lattice, we also know that subsumption can be decided with polynomial space.
Reference: [Neb90] <author> Bernhard Nebel. </author> <title> Terminological reasoning is inherently intractable. </title> <journal> Artificial Intelligence, </journal> <volume> 43 </volume> <pages> 235-249, </pages> <year> 1990. </year>
Reference-contexts: In fact, concept satisfiability is a special case of non-subsumption (with the second concept being the empty concept) and therefore subsumption is the basic reasoning task to be accomplished by the TKRS. In theory, terminologies play a role when looking at complexity issues, since Nebel <ref> [Neb90] </ref> showed that expanding definitions gives rise to an unavoidable source of complexity. In practice, however, definitions increasing the complexity of reasoning do not occur. <p> First of all, the results developed so far refer to the computational complexity in the worst case, which represents only one aspect to be taken into account when considering the practical use of concept languages. Notice that, as pointed out in <ref> [Neb90] </ref>, another aspect that deserves further investigation is the characterization of the average cases occurring in practice. Second, the techniques used for the complexity analysis have provided the formal basis for the design of effective algorithms for computing subsumption and unsatisfiability in a large class of concept languages.
Reference: [Pat89] <author> Peter F. Patel-Schneider. </author> <title> Undecidability of subsumption in NIKL. </title> <journal> Artificial Intelligence, </journal> <volume> 39 </volume> <pages> 263-272, </pages> <year> 1989. </year>
Reference-contexts: Nebel [Neb88] identified other constructs that give rise to co-NP-hard subsumption problems. Other work identified languages with undecidable subsumption problem <ref> [Pat89, Sch89, Sch88] </ref>. However, neither [BL84, LB87] nor [Neb88] give algorithms for the co-NP-hard languages. The first nonstructural complete subsumption algorithm was devised by Schmidt-Schau and Smolka [SS91], for an extension of F L by a construct for complements of concepts, called ALC. <p> On the other hand, query containment in relational query languages is undecidable [Kan90, pg.1083], while subsumption is decidable for most concept languages (see results in this paper). It is interesting to observe that subsumption is undecidable in concept languages with a construct expressing arbitrary coreferences <ref> [Pat89, Sch89] </ref>. 1.4 Main Results and Organization of the Paper The goal of the paper is to provide algorithms that perform various kinds of reasoning about concepts and to study the complexity of such tasks.
Reference: [PS93] <author> Peter F. Patel-Schneider and Bill Swartout. </author> <note> Working version (draft): Description logic specification from the KRSS effort, June 1993. Unpublished Manuscript. </note>
Reference-contexts: intersection, union and complement, interpreted as their set theoretical counterparts, we can describe the class of "persons that are not female" and the class of "individuals that are female or male" by the expressions Person u :Female and Female t Male: An alternative notation for the first concept, proposed in <ref> [PS93] </ref>, is (AND Person (NOT Female)).
Reference: [SB82] <author> James G. Schmolze and Ronald J. Brachman, </author> <title> editors. Proc. 1981 KL-ONE Workshop. </title> <type> BBN Report 4842. </type> <institution> Bolt, Beranek, and Newman Inc., Cambridge (Massachusetts, USA), </institution> <month> May </month> <year> 1982. </year> <note> Also available as AI Technical Report 4, </note> <institution> Schlumberger Palo Alto Research, </institution> <month> May </month> <year> 1982. </year>
Reference-contexts: In practice, however, definitions increasing the complexity of reasoning do not occur. Moreover, a common requirement on terminologies is that the meaning of a concept "can be completely understood in terms of the meaning of its parts and the way these are composed" <ref> [SB82] </ref>.
Reference: [Sch88] <author> Klaus Schild. </author> <title> Undecidability of subsumption in U . Technical Report KIT-Report 67, </title> <institution> FB Informatik, Technische Universitat Berlin, </institution> <address> Berlin, Germany, </address> <year> 1988. </year>
Reference-contexts: Nebel [Neb88] identified other constructs that give rise to co-NP-hard subsumption problems. Other work identified languages with undecidable subsumption problem <ref> [Pat89, Sch89, Sch88] </ref>. However, neither [BL84, LB87] nor [Neb88] give algorithms for the co-NP-hard languages. The first nonstructural complete subsumption algorithm was devised by Schmidt-Schau and Smolka [SS91], for an extension of F L by a construct for complements of concepts, called ALC.
Reference: [Sch89] <author> Manfred Schmidt-Schau. </author> <title> Subsumption in KL-ONE is undecidable. </title> <editor> In Ronald J. Brachman, Hector J. Levesque, and Ray Reiter, editors, </editor> <booktitle> Proceedings of the First International Conference on the Principles of Knowledge Representation and Reasoning (KR-89), </booktitle> <pages> pages 421-431. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, </address> <year> 1989. </year>
Reference-contexts: Nebel [Neb88] identified other constructs that give rise to co-NP-hard subsumption problems. Other work identified languages with undecidable subsumption problem <ref> [Pat89, Sch89, Sch88] </ref>. However, neither [BL84, LB87] nor [Neb88] give algorithms for the co-NP-hard languages. The first nonstructural complete subsumption algorithm was devised by Schmidt-Schau and Smolka [SS91], for an extension of F L by a construct for complements of concepts, called ALC. <p> On the other hand, query containment in relational query languages is undecidable [Kan90, pg.1083], while subsumption is decidable for most concept languages (see results in this paper). It is interesting to observe that subsumption is undecidable in concept languages with a construct expressing arbitrary coreferences <ref> [Pat89, Sch89] </ref>. 1.4 Main Results and Organization of the Paper The goal of the paper is to provide algorithms that perform various kinds of reasoning about concepts and to study the complexity of such tasks.
Reference: [Sch91] <author> Klaus Schild. </author> <title> A correspondence theory for terminological logics: Preliminary report. </title> <booktitle> In Proceedings of the Twelth International Joint Conference on Artificial Intelligence (IJCAI-91), </booktitle> <pages> pages 466-471, </pages> <address> Sydney, </address> <year> 1991. </year>
Reference-contexts: For example, the comparison of implemented systems described in [HKNP94] has benefited from the results of the complexity analysis. There are at least two other areas of research that have a relationship with concept description languages and the associated inference problems: modal logic and query containment in databases. Schild <ref> [Sch91] </ref> pointed out that certain concept languages are notational variants of certain propositional modal logics. Among the languages we consider, ALC has a modal 7 logic counterpart, namely the multimodal version of the logic K (see [HM92]).
Reference: [SIG91] <institution> SIGART Bulletin. </institution> <note> Special issue on implemented knowledge representation and reasoning systems, </note> <year> 1991. </year>
Reference-contexts: This novel paradigm was motivated by the shortcomings of semantic networks, which have been criticized for their lack of formal semantics which results in ambiguity and contradictions [Woo75, Bra85]. During the last ten years, this line of research has led to the development of various TKRSs (see for example <ref> [WS92, SIG91, BFH + 94] </ref>). These systems make a clear distinction between intensional knowledge, or general knowledge about the problem domain, and extensional knowledge, which is specific to a particular problem.
Reference: [Smo88] <author> Gert Smolka. </author> <title> A feature logic with subsorts. </title> <type> Technical Report 33, </type> <institution> IWBS, IBM Deutschland, </institution> <address> P.O. Box 80 08 80 D-7000 Stuttgart 80, Germany, </address> <year> 1988. </year>
Reference-contexts: In this case we write C D. Disjointness: Two concepts C and D are disjoint if C I " D I = ; for every interpreta tion I. Using complement of concepts, we can reduce subsumption, equivalence, and disjoint ness of concepts to satisfiability problems (see also <ref> [Smo88] </ref>): Proposition 2.1 Let C and D be concepts. Then: 1. C is subsumed by D iff C u :D is not satisfiable; 12 2. C and D are equivalent iff (C u :D) and (:C u D) are not satisfiable; 3. <p> The idea to consider only concepts in negation 14 normal form appeared before in <ref> [Smo88] </ref> and [SS91]. Proposition 3.1 For any concept one can compute in linear time its negation normal form, which is equivalent to the original concept. 3.2 The Completion Rules Now we introduce the expressions on which our calculus operates.
Reference: [Smu68] <author> Raymond M. Smullyan. </author> <title> First Order Logic. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1968. </year>
Reference-contexts: The calculus appeared first in [HNS90] and is discussed in full detail in [HN95]. It is influenced by the completion calculus in [SS91], but employs a much simpler notation that emphasizes its similarity to the tableaux calculus for first-order predicate logic (see <ref> [Smu68, BM77, Fit90] </ref>). The calculus consists of inference rules that decompose complex concepts according to the top-level construct. Actually, the rules can be simulated by applications of several rules of the tableaux calculus using a special control strategy.
Reference: [SS91] <author> Manfred Schmidt-Schau and Gert Smolka. </author> <title> Attributive concept descriptions with complements. </title> <journal> Artificial Intelligence, </journal> <volume> 48(1) </volume> <pages> 1-26, </pages> <year> 1991. </year>
Reference-contexts: Nebel [Neb88] identified other constructs that give rise to co-NP-hard subsumption problems. Other work identified languages with undecidable subsumption problem [Pat89, Sch89, Sch88]. However, neither [BL84, LB87] nor [Neb88] give algorithms for the co-NP-hard languages. The first nonstructural complete subsumption algorithm was devised by Schmidt-Schau and Smolka <ref> [SS91] </ref>, for an extension of F L by a construct for complements of concepts, called ALC. In fact, they changed the paradigm for designing algorithms in that, using complements, they reformulated subsumption problems as satisfiability problems. <p> For our work we employ a calculus of logical constraints that has first been introduced in [HN90] and that significantly extends the one in <ref> [SS91] </ref>. In fact, it covers a more expressive language, and it employs a more concise notation, which points out its similarity 8 to the tableaux calculus for first-order predicate logic. We use the calculus in two ways. The analysis of its behavior leads to proofs of worst-case complexity. <p> For the syntax of concepts, we employ a notation that is similar to the one in <ref> [SS91] </ref>. The specification of the semantics follows the one in [BL84] and [SS91]. 2.1 Syntax and Semantics of Concepts In the simplest AL-language, called AL, concepts (ranged over by C, D) are built out of atomic concepts (ranged over by A) and atomic roles (ranged over by P ) according to <p> For the syntax of concepts, we employ a notation that is similar to the one in <ref> [SS91] </ref>. The specification of the semantics follows the one in [BL84] and [SS91]. 2.1 Syntax and Semantics of Concepts In the simplest AL-language, called AL, concepts (ranged over by C, D) are built out of atomic concepts (ranged over by A) and atomic roles (ranged over by P ) according to 9 the syntax rule C; D ! A j (atomic concept) &gt; <p> The calculus appeared first in [HNS90] and is discussed in full detail in [HN95]. It is influenced by the completion calculus in <ref> [SS91] </ref>, but employs a much simpler notation that emphasizes its similarity to the tableaux calculus for first-order predicate logic (see [Smu68, BM77, Fit90]). The calculus consists of inference rules that decompose complex concepts according to the top-level construct. <p> The idea to consider only concepts in negation 14 normal form appeared before in [Smo88] and <ref> [SS91] </ref>. Proposition 3.1 For any concept one can compute in linear time its negation normal form, which is equivalent to the original concept. 3.2 The Completion Rules Now we introduce the expressions on which our calculus operates. <p> In Section 1.3 we mentioned some previous results about the computational complexity of satisfiability and subsumption. Let us briefly review these results in the light of the two sources of complexity. 21 In <ref> [SS91] </ref>, concept satisfiability in ALC was proved to be PSPACE-complete. The lan-guage ALC contains both union and qualified existential quantification. <p> The PSPACE-hardness result can be intuitively explained with the fact that both sources of complexity are present in the language, and this gives rise both to an exponential number of completions and to an exponential size of each completion in the worst case. Nevertheless, in <ref> [SS91] </ref> it was shown that the calculus can work by keeping in memory just a polynomial portion of a completion. This observation yields a polynomial-space algorithm for checking the satisfiability of ALC-concepts. <p> We will show in Section 4.4 that qualified existential quantification can appear implicitly through combinations of other constructs, like existential quantification and conjunction of roles. The union construct as a source of complexity has been studied in <ref> [SS91] </ref>, where the language ALU |obtained by adding union to AL|was investigated. Any propositional formula can be translated into a corresponding ALU -concept, which is satisfiable if and only if the propositional formula is. Hence, satisfiability in ALU is NP-hard. <p> Note that disjunction can appear also implicitly through combinations of other constructs, as shown in [Neb88] for the language ALN R. Finally, the language AL, which does not include any of the two sources of complexity was investigated in <ref> [SS91] </ref>, and it was proved that satisfiability in this language can be checked by means of a polynomial time algorithm. <p> Since ALCN R is the top element of the lattice of AL-languages, this implies that the satisfiability and subsumption problems are in PSPACE for all AL-languages. Then we will turn to AL-languages for which satisfiability is PSPACE-hard. It has been shown <ref> [SS91] </ref> that ALC has this property. We will identify two other minimal PSPACE-hard AL-languages, namely ALU R and ALN R. Using an appropriate modification of the proof for ALC, we can also show that subsumption in Brachman and Levesque's language F L is PSPACE-hard. <p> If the tree of successors of x is traversed depth-first, then one only needs to store constraints depending on a number of variables that is linear in the length of C. For the simpler setting of checking the satisfiability of ALC-concepts, this idea has been formally captured in <ref> [SS91] </ref> by the notion of a "trace." In our case, the situation is complicated by the presence of both number restrictions and role intersections that force us to generate for a given variable more than one successor at at time. <p> We will use traces later on, when dealing with NP-complete languages. In Figure 3 we give a functional algorithm that implements a strategy of applying the completion rules along these ideas. It can be regarded as an extension of the algorithm in <ref> [SS91] </ref> for checking the satisfiability of ALC-concepts. The function sat takes as input a variable y and a constraint system S. In particular, if the simple concept C is to be checked for satisfiability, sat is called with arguments x and fx: Cg. <p> Anyway, also the above analysis leads the following conclusion. Theorem 4.5 Satisfiability and subsumption of ALCN R-concepts can be decided with polynomial space. 4.2 Unsatisfiability in ALC As mentioned before, Schmidt-Schau and Smolka <ref> [SS91] </ref> have shown that the unsatisfi-ability problem in ALC is PSPACE-hard. From results in later sections of this paper it follows that for the strict sublanguages of ALC, i.e., ALE , ALU , and AL, unsatisfiability and subsumption do not have this property (provided NP is different from PSPACE). <p> We complement the results on AL-languages by a proof that subsumption in Brachman and Levesque's language F L is PSPACE-hard. The proofs will consist either in appropriate modifications of the reduction that has been used in <ref> [SS91] </ref> for ALC or in a reduction of the satisfiability problem for ALC itself. <p> Now, P . M is said to be valid if P . M 0 is valid over B. Deciding the validity of quantified boolean formulas is a PSPACE-complete problem [GJ79]. The following reformulation of the problem is due to <ref> [SS91] </ref>. A literal is a nonzero integer. A clause is a nonempty finite set N of literals such that l 2 N implies l =2 N . <p> The structure of the concept C i 1 , which encodes the i-th clause, ensures that for every clash 2 The definition given in <ref> [SS91] </ref> is: D l = (9R.A t 9R.:A) u (8R.D l+1 ) if Q l = 9 and D m = (9R.A t 9R.:A) if Q m = 9. <p> M g into a clash free complete constraint system. The following two results have been shown in <ref> [SS91] </ref>. Lemma 4.6 (ALC-Reduction) A quantified boolean formula P . M is valid if and only if its translation C P . M is satisfiable. <p> A seemingly slight extension of F L by so-called role restrictions led to a language, called F L, for which subsumption was shown co-NP-hard. As already pointed out in <ref> [SS91] </ref>, F L can be viewed as a sublanguage of ALC, which gives membership in PSPACE as an upper bound for the complexity of subsumption. We will prove that subsumption in F L actually is PSPACE-hard, thus complementing the upper bound by a lower bound. <p> It has been shown that, as for F L , every F L-concept is satisfiable <ref> [SS91] </ref>. Therefore, satisfiability is a trivial problem for this language too. In the following we reduce the validity problem for quantified boolean formulas to the subsumption problem for F L-concepts. <p> As a first step we introduce a modified completion calculus in which the applicability of the ! 9 -rule is reduced. The trace rules (see also <ref> [SS91] </ref>) consist of the ! u -, the ! t -, and the ! 8 -rule given in Subsection 3.2, together with the rule S ! T 9 fxP 1 y; : : : ; xP k y; y: Cg [ S if there is no successor of x in S, <p> Theorem 5.7 (NP-Completeness) Subsumption and unsatisfiability are NP-complete problems for ALE , ALR, and ALER. As discussed in Section 3.4, results on NP-completeness have a character different from former intractability results for concept languages. The work in <ref> [BL84, Neb88, SS91] </ref> identified the disjunctive constructs role restriction, "at-most" restriction, and union that together with concept intersection give rise to intractability. The NP-hardness of ALE and ALR, however, shows that the interplay of universal and existential quantifiers is another unavoidable source of complexity. <p> Conversely, it has been shown that universal quantification and restricted existential quantification over roles do not increase the complexity of the problem, i.e., unsatisfiability in ALU is co-NP-complete <ref> [SS91] </ref>. One might conjecture that subsumption in ALU is harder, since it is equivalent to unsatisfiability of certain concepts containing both unions and full existential quantification. <p> Thus, his reduction can easily be modified so as to yield a proof of the following theorem. Theorem 6.8 Unsatisfiability in ALEN is co-NP-hard. Moreover, in <ref> [SS91] </ref> it is noted that unsatisfiability in ALU easily simulates propositional unsatisfiability, hence unsatisfiability in ALU is co-NP-hard. 6.4 Summary on Co-NP-Complete Languages Combining the fact that unsatisfiability in ALU is co-NP-hard and the fact that sub-sumption in ALU N is in co-NP we obtain the following result. <p> Languages are grouped according to the complexity of unsatisfiability and subsumption. Previous results, noted in the last row, are the following. Complete results for both unsatisfiability and subsumption have been given (2) for ALE in [DHL + 92], and (4) for ALC in <ref> [SS91] </ref>. Starred notes refer to the following partial results: In [SS91], it was shown that (1*) unsatisfiability in AL is polynomial, and that (3*) unsatisfiability in 52 AL poly nomial NP complete Co-NP complete PSPACE-complete C t D fi fi fi fi fi fi fi fi (n R) fi fi fi <p> Previous results, noted in the last row, are the following. Complete results for both unsatisfiability and subsumption have been given (2) for ALE in [DHL + 92], and (4) for ALC in <ref> [SS91] </ref>. Starred notes refer to the following partial results: In [SS91], it was shown that (1*) unsatisfiability in AL is polynomial, and that (3*) unsatisfiability in 52 AL poly nomial NP complete Co-NP complete PSPACE-complete C t D fi fi fi fi fi fi fi fi (n R) fi fi fi fi fi fi fi previous results (1*) (2) (3*) (4)
Reference: [Woo75] <author> William A. Woods. </author> <title> What's in a link: Foundations for semantic networks. </title> <editor> In D. G. Bobrow and A. M. Collins, editors, </editor> <booktitle> Representation and Understanding: Studies in Cognitive Science, </booktitle> <pages> pages 35-82. </pages> <publisher> Academic Press, </publisher> <year> 1975. </year> <note> Republished in [BL85]. </note>
Reference-contexts: Such TKRSs have their roots in Structured Inheritance Networks proposed by Brachman and realized in the kl-one system [Bra79]. This novel paradigm was motivated by the shortcomings of semantic networks, which have been criticized for their lack of formal semantics which results in ambiguity and contradictions <ref> [Woo75, Bra85] </ref>. During the last ten years, this line of research has led to the development of various TKRSs (see for example [WS92, SIG91, BFH + 94]).
Reference: [WS92] <author> William A. Woods and James G. Schmolze. </author> <title> The KL-ONE family. </title> <editor> In F. W. Lehmann, editor, </editor> <booktitle> Semantic Networks in Artificial Intelligence, </booktitle> <pages> pages 133-178. </pages> <publisher> Pergamon Press, </publisher> <year> 1992. </year> <note> Published as a special issue of Computers & Mathematics with Applications, Volume 23, Number 2-9. 57 </note>
Reference-contexts: This novel paradigm was motivated by the shortcomings of semantic networks, which have been criticized for their lack of formal semantics which results in ambiguity and contradictions [Woo75, Bra85]. During the last ten years, this line of research has led to the development of various TKRSs (see for example <ref> [WS92, SIG91, BFH + 94] </ref>). These systems make a clear distinction between intensional knowledge, or general knowledge about the problem domain, and extensional knowledge, which is specific to a particular problem.
References-found: 39

