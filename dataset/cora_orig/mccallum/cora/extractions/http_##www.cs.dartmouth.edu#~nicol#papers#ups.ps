URL: http://www.cs.dartmouth.edu/~nicol/papers/ups.ps
Refering-URL: http://www.cs.dartmouth.edu/~nicol/papers/papers.html
Root-URL: http://www.cs.dartmouth.edu
Title: Parallel Execution for Serial Simulators  
Author: David Nicol Philip Heidelberger 
Note: This work is supported in part by NSF grant CCR-9201195. It is also supported in part by NASA contract number NAS1-19480 while the author was a consultant at the Institute for Computer Applications in  
Date: December 30, 1996  
Address: P.O. Box 704 Williamsburg, VA 23185 Yorktown Heights, NY 10598  Hampton, VA, 23681.  
Affiliation: Department of Computer Science IBM T.J. Watson Research Center The College of William and Mary  Science and Engineering (ICASE), NASA Langley Research Center,  
Abstract: This paper describes an approach to discrete event simulation modeling that appears to be effective for developing portable and efficient parallel execution of models of large distributed systems and communication networks. In this approach, the modeler develops sub-models with an existing sequential simulation modeling tool, using the full expressive power of the tool. A set of modeling language extensions permit automatically synchronized communication between sub-models; however, the automation requires that any such communication must take a non-zero amount of simulation time. Within this modeling paradigm, a variety of conservative synchronization protocols can transparently support conservative execution of sub-models on potentially different processors. A specific implementation of this approach, U.P.S. (Utilitarian Parallel Simulator), is described, along with performance results on the Intel Paragon and on the IBM SP2. fl Portions of this paper are reproduced with permission from "On Extending Parallelism to Serial Simulators", in Proceedings of the 1995 Workshop on Parallel and Distributed Simulation. Copyright owned by ACM. Appeared in ACM Trans. on Modeling and Computer Simulation, vol. 6, no. 3, July 1996. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abrams. </author> <title> The object library for parallel simulation (OLPS). </title> <booktitle> In In Proceedings of the 1988 Winter Simulation Conference, </booktitle> <pages> 210-219, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference-contexts: CPSim is event-oriented, and makes available several conservative synchronization techniques. The CPSim user writes simulation event processing routines in accordance with interfaces specified by CPSim. A variety of parallel simulation tools have been developed at universities over the years, including OLPS <ref> [1] </ref>, YAWNS [16, 18], YADDES [19], Maisie [3]. Each was built to demonstrate some limited aspect of parallel simulation, with the exception of Maisie, which is advertised as a general purpose tool. <p> The basic element in the model is a "cluster" of central server queuing network models, each com-prised of one CPU and five IO devices. The CPU has exponential service with mean 2; the IO service time distribution uses a parameter ff 2 <ref> [0; 1] </ref>: the service time is the sum of constant 10ff plus an exponential with mean 10 (1 ff). One central server in a cluster serves as an exit point; a job entering this central server visits the CPU once, and visits an IO device once.
Reference: [2] <author> R.L. Bagrodia. </author> <title> A survival guide for parallel simulation. </title> <journal> ORSA Journal on Computing, </journal> <volume> vol. 5, no. 3, </volume> <pages> 234-235, </pages> <year> 1993. </year>
Reference-contexts: During this panel discussion, a number of issues were raised and discussed: 1. This lack of impact is partially due to a lack of adequate PDES modeling tools, see also Fujimoto's discussion in [9] and Bagrodia's comment "The tools, stupid" <ref> [2] </ref>. The fact remains that efficient PDES requires the use of sophisticated techniques that are often application specific, platform specific, or both. 2. Fujimoto's "Holy Grail" does not currently exist. The "Holy Grail" provides arbitrary modeling capability and automatically parallelizes to yield significant speedups.
Reference: [3] <author> R.L. Bagrodia and W.T. Liao. Maisie: </author> <title> A language for the design of efficient discrete-event simulations. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 20, no. 4, </volume> <pages> 225-238, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: CPSim is event-oriented, and makes available several conservative synchronization techniques. The CPSim user writes simulation event processing routines in accordance with interfaces specified by CPSim. A variety of parallel simulation tools have been developed at universities over the years, including OLPS [1], YAWNS [16, 18], YADDES [19], Maisie <ref> [3] </ref>. Each was built to demonstrate some limited aspect of parallel simulation, with the exception of Maisie, which is advertised as a general purpose tool. A common factor among all of these tools is that the simulation modeler must develop a model in the specific confines of that tool.
Reference: [4] <author> J.P. Buzen. </author> <title> Computational algorithms for closed queueing networks with exponential servers. </title> <journal> Commun. ACM, </journal> <volume> vol. 16, no. 9, </volume> <pages> 527-531, </pages> <month> September </month> <year> 1973. </year>
Reference-contexts: The model is a network of central server models <ref> [4] </ref>, similar to the models considered 13 in [13]. The basic element in the model is a "cluster" of central server queuing network models, each com-prised of one CPU and five IO devices.
Reference: [5] <author> C.D. Carothers, R.M. Fujimoto and Y.-B. Lin. </author> <title> A case study in simulating PCS networks using Time Warp. </title> <booktitle> In Proceedings of the 9th Workshop on Parallel and Distributed Simulation (PADS '95), </booktitle> <pages> 87-94, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: This is an important application area and models such as this have been used as benchmarks in other parallel simulation studies <ref> [5, 10] </ref>. In this model there are a number M of hexagonally shaped cells arranged in the plane. There are a fixed number of frequencies per cell and a fixed (Poisson) arrival rate of calls to each cell.
Reference: [6] <author> P.M. Dickens, P. Heidelberger and D.M. Nicol. </author> <title> A distributed memory LAPSE: Parallel simulation of message-passing programs. </title> <booktitle> In Proceedings of the 8th Workshop on Parallel and Distributed Simulation (PADS), </booktitle> <pages> 32-38, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year> <month> 22 </month>
Reference-contexts: However, these calls are optional; without them, the computation of lookahead is automatically handled by the U.P.S. carriers. 5 Synchronization Protocols U.P.S. provides three synchronization protocols: YAWNS (Yet Another Windowing Network Simulator, see [16, 18]), WHOA (Windows, Halting On Appointments, see <ref> [6] </ref>), and PUCS (Parallel Uniformized Continuous-time Markov Chain Simulator, see [13]). One of these protocols is assigned to a carrier at its declaration; thus a U.P.S. model may use simultaneously any combination of these protocols.
Reference: [7] <author> R.W. Earnshaw and A. Hind. </author> <title> A parallel simulator for performance modeling of broadband telecommuni-cation networks. </title> <booktitle> In Proceedings of the 1992 Winter Simulation Conference, </booktitle> <pages> 1365-1373, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: The appropriate synchronization method to use is YAWNS, whose window size will be this delay value. Figure 8 presents the performance data obtained from this model running on the Paragon. Earnshaw and Hind <ref> [7] </ref> have noted and demonstrated that communications networks are good candidates for parallel simulation; our experience with the switching network confirms this.
Reference: [8] <author> R.M. Fujimoto, </author> <title> Parallel discrete event simulation. </title> <journal> Commun. ACM, </journal> <volume> vol. 33, no. 10, </volume> <pages> 31-53, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: Surveys <ref> [8] </ref> and [14] expound upon this and other issues concerning PDES. However, the ideas found in the PADS literature frequently lack a clear link to the computational models and the type of tool to which a simulation practitioner is accustomed.
Reference: [9] <author> R.M. Fujimoto. </author> <title> Parallel discrete event simulation: </title> <journal> Will the field survive? ORSA Journal on Computing, </journal> <volume> vol. 5, no. 3, </volume> <pages> 213-230, </pages> <year> 1993. </year>
Reference-contexts: During this panel discussion, a number of issues were raised and discussed: 1. This lack of impact is partially due to a lack of adequate PDES modeling tools, see also Fujimoto's discussion in <ref> [9] </ref> and Bagrodia's comment "The tools, stupid" [2]. The fact remains that efficient PDES requires the use of sophisticated techniques that are often application specific, platform specific, or both. 2. Fujimoto's "Holy Grail" does not currently exist.
Reference: [10] <author> A.G. Greenberg, B.D. Lubachevsky, D.M. Nicol and P.E. Wright. </author> <title> Efficient massively parallel simulation of dynamic channel assignment schemes for wireless cellular communications. </title> <booktitle> In Proceedings of the 8th Workshop on Parallel and Distributed Simulation (PADS), </booktitle> <pages> 187-194, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: This is an important application area and models such as this have been used as benchmarks in other parallel simulation studies <ref> [5, 10] </ref>. In this model there are a number M of hexagonally shaped cells arranged in the plane. There are a fixed number of frequencies per cell and a fixed (Poisson) arrival rate of calls to each cell.
Reference: [11] <author> D. Gross and D.R. Miller, </author> <title> The randomization technique as a modeling tool and solution procedure for transient Markov processes. </title> <journal> Operations Research, </journal> <volume> vol. 32, no. 2, </volume> <pages> 343-361, </pages> <month> March-April </month> <year> 1984. </year>
Reference-contexts: At what point do we know the composition of a message sent between sub-models? 5. Can we predict future routings? 6. Is there other special structure present that can be exploited? For example, is the queue's output uniformizable (see, e.g., <ref> [11] </ref>)? The answer to question (1) is "no" when the sole interaction between submodel and extensions is message arrivals, about whose behavior we have no future knowledge. One reasonable exception is if the simulation tool provides access to the time of the next event on its event list.
Reference: [12] <institution> GTU, Inc., Arlington, VA. </institution> <note> CPSim 1.0 User's Guide and Reference Manual, </note> <month> June </month> <year> 1994. </year>
Reference-contexts: Many of the details of synchronization are the responsibility of the modeler. For instance, the modeler must identify all variables whose states must be saved, and must provide the means for saving them. A new commercial parallel simulation product, CPSim, has been announced by GTU, Inc. <ref> [12] </ref>. CPSim is event-oriented, and makes available several conservative synchronization techniques. The CPSim user writes simulation event processing routines in accordance with interfaces specified by CPSim. A variety of parallel simulation tools have been developed at universities over the years, including OLPS [1], YAWNS [16, 18], YADDES [19], Maisie [3].
Reference: [13] <author> P. Heidelberger and D.M. Nicol. </author> <title> Conservative parallel simulation of continuous time Markov chains using uniformization. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> vol. 4, no. 8, </volume> <pages> 906-921, </pages> <year> 1993. </year>
Reference-contexts: Question (6) asks whether special synchronization techniques can be applied. In particular, if the queue's output can be uniformized (which is true for a queue with a finite number of servers and Coxian phase-type service distributions), then techniques developed in <ref> [13] </ref> can be applied. The degree to which a queue can predict its future behavior depends on the various considerations just listed. In our approach, when a sub-model specifies the carriers it will use, it also provides parameters that specify answers to the questions above. <p> Appointments should be used when a carrier's connectivity to other sub-models is low; they are especially effective if the service times and routing destinations can be pre-sampled. The PUCS protocol <ref> [13] </ref> may be used when all carriers have Markovian service distributions that may be pre-sampled, and have routing distributions that may also be pre-sampled. The details are described elsewhere; essentially PUCS is the appointments protocol, with lookahead derived from the mathematical structure of the carriers. <p> these calls are optional; without them, the computation of lookahead is automatically handled by the U.P.S. carriers. 5 Synchronization Protocols U.P.S. provides three synchronization protocols: YAWNS (Yet Another Windowing Network Simulator, see [16, 18]), WHOA (Windows, Halting On Appointments, see [6]), and PUCS (Parallel Uniformized Continuous-time Markov Chain Simulator, see <ref> [13] </ref>). One of these protocols is assigned to a carrier at its declaration; thus a U.P.S. model may use simultaneously any combination of these protocols. This feature allows one to tailor the synchronization method to the salient features of the carrier. <p> The model is a network of central server models [4], similar to the models considered 13 in <ref> [13] </ref>. The basic element in the model is a "cluster" of central server queuing network models, each com-prised of one CPU and five IO devices.
Reference: [14] <author> D. Nicol and R. Fujimoto. </author> <title> Parallel simulation today. </title> <journal> Annals of Operations Research, </journal> <volume> vol. 53, </volume> <pages> 249-286, </pages> <year> 1994. </year>
Reference-contexts: Surveys [8] and <ref> [14] </ref> expound upon this and other issues concerning PDES. However, the ideas found in the PADS literature frequently lack a clear link to the computational models and the type of tool to which a simulation practitioner is accustomed.
Reference: [15] <author> D.M. Nicol and P. Heidelberger. </author> <title> On extending parallelism to serial simulators. </title> <booktitle> In Proceedings of the 9th Workshop on Parallel and Distributed Simulation (PADS '95), </booktitle> <pages> 60-67, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: In particular, we need several tens of events/package and a large number of events/window (although not as large as above, as the next example will illustrate). We should point out that the Paragon speedups for this model reported in <ref> [15] </ref> are somewhat overstated due to a problem in the CSIM calendar queue implementation that was recently uncovered. In CSIM, there is 19 a minimum bucket width for the calendar entries.
Reference: [16] <author> D. Nicol, C. Micheal, and P. Inouye. </author> <title> Efficient aggregation of multiple LP's in distributed memory parallel simulations. </title> <booktitle> In Proceedings of the 1989 Winter Simulation Conference, </booktitle> <pages> 680-685, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1989. </year>
Reference-contexts: CPSim is event-oriented, and makes available several conservative synchronization techniques. The CPSim user writes simulation event processing routines in accordance with interfaces specified by CPSim. A variety of parallel simulation tools have been developed at universities over the years, including OLPS [1], YAWNS <ref> [16, 18] </ref>, YADDES [19], Maisie [3]. Each was built to demonstrate some limited aspect of parallel simulation, with the exception of Maisie, which is advertised as a general purpose tool. <p> There are at least three well-studied conservative synchronization protocols suitable for the extension. The selection of a protocol is constrained by the model characteristics. The YAWNS window-based protocol <ref> [16, 18] </ref> is appropriate when the message associated with a job completion can always be generated and sent a minimum of some X &gt; 0 (which may be randomly sampled) simulation time units before the job completes service. <p> However, these calls are optional; without them, the computation of lookahead is automatically handled by the U.P.S. carriers. 5 Synchronization Protocols U.P.S. provides three synchronization protocols: YAWNS (Yet Another Windowing Network Simulator, see <ref> [16, 18] </ref>), WHOA (Windows, Halting On Appointments, see [6]), and PUCS (Parallel Uniformized Continuous-time Markov Chain Simulator, see [13]). One of these protocols is assigned to a carrier at its declaration; thus a U.P.S. model may use simultaneously any combination of these protocols.
Reference: [17] <author> D.M. Nicol. </author> <title> Parallel discrete-event simulation of FCFS stochastic queueing networks. </title> <booktitle> In Proceedings ACM/SIGPLAN PPEALS 1988: Experiences with Applications, Languages and Systems, </booktitle> <pages> 124-137. </pages> <publisher> ACM Press, </publisher> <year> 1988. </year>
Reference-contexts: To attain good performance, this protocol does require that substantial sub-model simulation activity occur (on average) every E [X min ] units of simulation time, to amortize the cost of global synchronization. The Appointments protocol <ref> [17] </ref> requires each carrier to maintain, for each sub-model to which it may route jobs, a lower bound (the appointment) on the next time at which it might next send a package there. 5 We will later describe a modification where this requirement is relaxed somewhat by placing the protocol in
Reference: [18] <author> D.M. Nicol. </author> <title> The cost of conservative synchronization in parallel discrete-event simulations. </title> <journal> Journal of the ACM, </journal> <volume> vol. 40, no. 2, </volume> <pages> 304-333, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: CPSim is event-oriented, and makes available several conservative synchronization techniques. The CPSim user writes simulation event processing routines in accordance with interfaces specified by CPSim. A variety of parallel simulation tools have been developed at universities over the years, including OLPS [1], YAWNS <ref> [16, 18] </ref>, YADDES [19], Maisie [3]. Each was built to demonstrate some limited aspect of parallel simulation, with the exception of Maisie, which is advertised as a general purpose tool. <p> There are at least three well-studied conservative synchronization protocols suitable for the extension. The selection of a protocol is constrained by the model characteristics. The YAWNS window-based protocol <ref> [16, 18] </ref> is appropriate when the message associated with a job completion can always be generated and sent a minimum of some X &gt; 0 (which may be randomly sampled) simulation time units before the job completes service. <p> However, these calls are optional; without them, the computation of lookahead is automatically handled by the U.P.S. carriers. 5 Synchronization Protocols U.P.S. provides three synchronization protocols: YAWNS (Yet Another Windowing Network Simulator, see <ref> [16, 18] </ref>), WHOA (Windows, Halting On Appointments, see [6]), and PUCS (Parallel Uniformized Continuous-time Markov Chain Simulator, see [13]). One of these protocols is assigned to a carrier at its declaration; thus a U.P.S. model may use simultaneously any combination of these protocols.
Reference: [19] <author> B.R. Preiss. </author> <title> The Yaddes distributed discrete event simulation specification language and execution environments. </title> <booktitle> In Distributed Simulation 1989, </booktitle> <volume> volume 21, </volume> <pages> 139-144, </pages> <booktitle> SCS Simulation Series, </booktitle> <year> 1989. </year>
Reference-contexts: CPSim is event-oriented, and makes available several conservative synchronization techniques. The CPSim user writes simulation event processing routines in accordance with interfaces specified by CPSim. A variety of parallel simulation tools have been developed at universities over the years, including OLPS [1], YAWNS [16, 18], YADDES <ref> [19] </ref>, Maisie [3]. Each was built to demonstrate some limited aspect of parallel simulation, with the exception of Maisie, which is advertised as a general purpose tool.
Reference: [20] <author> D.O. Rich, R.E. Michelsen. </author> <title> An Assessment of the ModSim/TWOS Parallel Simulation Environment. </title> <booktitle> In Proceedings of the 1991 Winter Simulation Conference, </booktitle> <pages> 509-518, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: While we shall 1 leave to the historians the task of analyzing the story of these early efforts, it is safe to say that the efforts were technically ambitious, but did not meet with the hoped-for level of success (e.g., see <ref> [20] </ref>). Despite early hopes, issues related to synchronization (e.g., state-saving) ended up migrating to the modeler level by necessity, to escape unduly large overheads when purely automated means were employed.
Reference: [21] <author> H. Schwetman. CSIM : A C-based, </author> <title> process oriented simulation language. </title> <booktitle> In Proceedings of the 1986 Winter Simulation Conference, </booktitle> <pages> 387-396, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1986. </year>
Reference-contexts: Details of these operations in one specific case are provided in the following section. 4 U.P.S. The Utilitarian Parallel Simulator (U.P.S. ) is a library written to extend parallel processing to the CSIM simulation package <ref> [21] </ref>. CSIM is itself a library that allows one to write simulations in C or C++ using the process-oriented world-view. Given its embedding in these languages and its operations for scheduling future events, CSIM naturally satisfies the criteria we've identified as necessary to support a parallel extension package.
Reference: [22] <author> J.S. Steinman. Speedes: </author> <title> Synchronous parallel environment for emulation and discrete event simulation. </title> <booktitle> In Advances in Parallel and Distributed Simulation, </booktitle> <volume> volume 23, </volume> <pages> 95-103. </pages> <booktitle> SCS Simulation Series, </booktitle> <year> 1991. </year> <month> 23 </month>
Reference-contexts: Despite early hopes, issues related to synchronization (e.g., state-saving) ended up migrating to the modeler level by necessity, to escape unduly large overheads when purely automated means were employed. An optimistic simulation tool, SPEEDES <ref> [22] </ref>, may be licensed from the Jet Propulsion Lab; SPEEDES is based in C++, and has the event-oriented world view. Many of the details of synchronization are the responsibility of the modeler.
Reference: [23] <author> J. Swain. </author> <title> Simulation Survey. </title> <booktitle> OR/MS Today, </booktitle> <pages> 64-79, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Yet while the universities build tool prototypes for research purposes, the commercial (but serial) simulation industry has produced flexible and polished tools such as CSIM, SES-Workbench, BONeS, RESQ, G2, and ModSim, to name a few (see <ref> [23] </ref> for an up-to-date comparison of commercial tools). From a modeler's standpoint, the gap between these commercial tools and the public-ally available university tools is large, and is a contributing factor to the lack of impact the university tools have had.
Reference: [24] <author> A.L. Wilson and R.M. Weatherly. </author> <title> The aggregate level simulation protocol: An evolving system. parallel simulations. </title> <booktitle> In Proceedings of the 1994 Winter Simulation Conference, </booktitle> <pages> 781-787, </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year> <month> 24 </month>
Reference-contexts: In some cases, the hoped-for goal of parallel simulation is different in the academic and industrial communities. The academic PDES work has focused almost exclusively on speedup, whereas one very real industrial application of PDES is in integration of separate simulators <ref> [24] </ref>. Here the goal is simply the capability of joining simulators, acceleration of execution is a secondary issue.
References-found: 24

