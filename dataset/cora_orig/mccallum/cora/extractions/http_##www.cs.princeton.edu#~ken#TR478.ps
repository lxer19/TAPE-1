URL: http://www.cs.princeton.edu/~ken/TR478.ps
Refering-URL: http://www.cs.princeton.edu/~ken/research.html
Root-URL: http://www.cs.princeton.edu
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> S.A. Smith, R.C. Watt, and S.R. Hameroff, </author> <title> "Cellular automata in cy-toskeletal lattices," </title> <journal> Physica 10D (1984), </journal> <pages> pp. 168-174. </pages>
Reference-contexts: CA for the particle model can be realized in conventional VLSI, or | and this is much more speculative | in a bulk physical medium that supports moving persistent structures with the appropriate characteristics <ref> [1, 2, 4, 5, 2 6, 7] </ref>. Without distinguishing between these two situations, we'll call the CA or medium a substrate. We'll call the substrate, the collection of particles it supports, and their interactions, a Particle Machine (PM).
Reference: 2. <author> A.J. Heeger, S. Kivelson, J.R. Schrieffer, and W.-P. Su, </author> <title> "Solitons in conduction polymers," </title> <journal> Rev. Modern Phys. </journal> <volume> 60 3 (1988), </volume> <pages> pp. 781-850. </pages>
Reference-contexts: CA for the particle model can be realized in conventional VLSI, or | and this is much more speculative | in a bulk physical medium that supports moving persistent structures with the appropriate characteristics <ref> [1, 2, 4, 5, 2 6, 7] </ref>. Without distinguishing between these two situations, we'll call the CA or medium a substrate. We'll call the substrate, the collection of particles it supports, and their interactions, a Particle Machine (PM).
Reference: 3. <author> N. Islam, J.P. Singh, and K. Steiglitz, </author> <title> "Soliton phase shifts in a dissipative lattice," </title> <journal> J. Appl. Phys. </journal> <volume> 62 2 (1987). </volume> <pages> 12 </pages>
Reference-contexts: We have shown [17] that a general class of lattice-gas automata is computation-universal. Several recent papers have dealt with particle-like persistent structures in binary CA and their relationship to persistent structures like solitons in nonlinear differential equations <ref> [3, 8, 9, 10, 11, 12, 13, 14] </ref>. It's fair to say that no one has yet succeeded in using these "naturally occurring" particles to do useful computation.
Reference: 4. <author> F.L. Carter, </author> <title> "The molecular device computer: point of departure for large scale cellular automata," </title> <journal> Physica 10D (1984), </journal> <pages> pp. 175-194. </pages>
Reference-contexts: CA for the particle model can be realized in conventional VLSI, or | and this is much more speculative | in a bulk physical medium that supports moving persistent structures with the appropriate characteristics <ref> [1, 2, 4, 5, 2 6, 7] </ref>. Without distinguishing between these two situations, we'll call the CA or medium a substrate. We'll call the substrate, the collection of particles it supports, and their interactions, a Particle Machine (PM).
Reference: 5. <author> J.R. Milch, </author> <title> "Computers based on molecular implementations of cellular automata," </title> <booktitle> presented at Third Int. Symp. on Molecular Electronic Devices, </booktitle> <address> Arlington VA, </address> <month> October 7, </month> <year> 1986. </year>
Reference-contexts: CA for the particle model can be realized in conventional VLSI, or | and this is much more speculative | in a bulk physical medium that supports moving persistent structures with the appropriate characteristics <ref> [1, 2, 4, 5, 2 6, 7] </ref>. Without distinguishing between these two situations, we'll call the CA or medium a substrate. We'll call the substrate, the collection of particles it supports, and their interactions, a Particle Machine (PM).
Reference: 6. <author> S. Lloyd, </author> <title> "A potentially realizable quantum computer," </title> <address> Science 261 17 (Sept. </address> <year> 1993), </year> <pages> pp. 1569-1571. </pages>
Reference: 7. <author> C. Halvorson, A. Hays, B. Kraabel, R. Wu, F. Wudl, and A. Heeger, </author> <title> "A 160-femtosecond optical image processor based on a conjugated polymer," </title> <address> Science 265 26 (Aug. </address> <year> 1994), </year> <pages> pp. 1215-1216. </pages>
Reference-contexts: CA for the particle model can be realized in conventional VLSI, or | and this is much more speculative | in a bulk physical medium that supports moving persistent structures with the appropriate characteristics <ref> [1, 2, 4, 5, 2 6, 7] </ref>. Without distinguishing between these two situations, we'll call the CA or medium a substrate. We'll call the substrate, the collection of particles it supports, and their interactions, a Particle Machine (PM).
Reference: 8. <author> J. K. Park, K. Steiglitz, </author> <title> and W.P. Thurston, "Soliton-like behavior in automata," </title> <journal> Physica 19D (1986), </journal> <pages> pp. 423-432. </pages>
Reference-contexts: We have shown [17] that a general class of lattice-gas automata is computation-universal. Several recent papers have dealt with particle-like persistent structures in binary CA and their relationship to persistent structures like solitons in nonlinear differential equations <ref> [3, 8, 9, 10, 11, 12, 13, 14] </ref>. It's fair to say that no one has yet succeeded in using these "naturally occurring" particles to do useful computation.
Reference: 9. <author> C.H. Goldberg, </author> <title> "Parity filter automata," </title> <booktitle> Complex Systems 2 (1988), </booktitle> <pages> pp. 91-141. </pages>
Reference-contexts: We have shown [17] that a general class of lattice-gas automata is computation-universal. Several recent papers have dealt with particle-like persistent structures in binary CA and their relationship to persistent structures like solitons in nonlinear differential equations <ref> [3, 8, 9, 10, 11, 12, 13, 14] </ref>. It's fair to say that no one has yet succeeded in using these "naturally occurring" particles to do useful computation.
Reference: 10. <author> A.S. Fokas, E. Papadopoulou, and Y. Saridakis, </author> <title> "Particles in soliton cellular automata," </title> <booktitle> Complex Systems 3 (1989), </booktitle> <pages> pp. 615-633. </pages>
Reference-contexts: We have shown [17] that a general class of lattice-gas automata is computation-universal. Several recent papers have dealt with particle-like persistent structures in binary CA and their relationship to persistent structures like solitons in nonlinear differential equations <ref> [3, 8, 9, 10, 11, 12, 13, 14] </ref>. It's fair to say that no one has yet succeeded in using these "naturally occurring" particles to do useful computation.
Reference: 11. <author> A.S. Fokas, E. Papadopoulou, and Y. Saridakis, </author> <title> "Coherent structures in cellular automata," </title> <journal> Physics Letters 147A 7 (1990), </journal> <pages> pp. 369-379. </pages>
Reference-contexts: We have shown [17] that a general class of lattice-gas automata is computation-universal. Several recent papers have dealt with particle-like persistent structures in binary CA and their relationship to persistent structures like solitons in nonlinear differential equations <ref> [3, 8, 9, 10, 11, 12, 13, 14] </ref>. It's fair to say that no one has yet succeeded in using these "naturally occurring" particles to do useful computation.
Reference: 12. <author> M. Bruschi, P.M. Santini, and O. Ragnisco, </author> <title> "Integrable cellular automata," </title> <journal> Physics Letters 169A (1992), </journal> <pages> pp. 151-160. </pages>
Reference-contexts: We have shown [17] that a general class of lattice-gas automata is computation-universal. Several recent papers have dealt with particle-like persistent structures in binary CA and their relationship to persistent structures like solitons in nonlinear differential equations <ref> [3, 8, 9, 10, 11, 12, 13, 14] </ref>. It's fair to say that no one has yet succeeded in using these "naturally occurring" particles to do useful computation.
Reference: 13. <author> M.J. Ablowitz, J.M. Keiser, L.A. Takhtajan, </author> <title> "Class of stable multistate time-reversible cellular automata with rich particle content," </title> <journal> Physical Review 44A 10 (Nov. </journal> <volume> 15, </volume> <year> 1991), </year> <pages> pp. 6909-6912. </pages>
Reference-contexts: We have shown [17] that a general class of lattice-gas automata is computation-universal. Several recent papers have dealt with particle-like persistent structures in binary CA and their relationship to persistent structures like solitons in nonlinear differential equations <ref> [3, 8, 9, 10, 11, 12, 13, 14] </ref>. It's fair to say that no one has yet succeeded in using these "naturally occurring" particles to do useful computation.
Reference: 14. <author> K. Steiglitz, I. Kamal, and A. Watson, </author> <title> "Embedding computation in one-dimensional automata by phase coding solitons," </title> <journal> IEEE Trans. on Computers 37 2 (1988), </journal> <pages> pp. 138-145. </pages>
Reference-contexts: We have shown [17] that a general class of lattice-gas automata is computation-universal. Several recent papers have dealt with particle-like persistent structures in binary CA and their relationship to persistent structures like solitons in nonlinear differential equations <ref> [3, 8, 9, 10, 11, 12, 13, 14] </ref>. It's fair to say that no one has yet succeeded in using these "naturally occurring" particles to do useful computation. <p> It's fair to say that no one has yet succeeded in using these "naturally occurring" particles to do useful computation. For instance, the line of work in <ref> [14] </ref> has succeeded in supporting only the simplest, almost trivial computation | binary ripple-carry addition, where the data is presented to the CA with the addend bits interleaved. <p> The processor atom simply leaves the sum bit behind, and takes the carry bit with itself in the form of its excitation state. This method reflects the hardware of a ripple-carry adder, and was used in <ref> [14] </ref>. Negation, and hence subtraction, is quite easy to incorporate into the CA.
Reference: 15. <author> A. Cappello, </author> <title> "A filter tissue," </title> <journal> IEEE Trans. </journal> <note> on Computers 31 (1987), p. 102. </note>
Reference-contexts: This makes possible the PM implementation of a fixed-point FIR filter by having a left-moving input signal stream hit a right-moving coefficient stream. The multiplications are bit-level systolic, and the filtering convolution is word-level systolic, so the entire calculation mirrors a two-level systolic array multiplier <ref> [16, 15, 25, 23, 24, 30] </ref>. The details are tedious, but simple examples of such a filter have been simulated and the idea verified. 8 Feedback So far, we have interpreted the PM substrate as strictly one-dimensional, with particles passing "through" one another if they don't interact.
Reference: 16. <author> J.V. McCanny, J.G. McWhirter, J.B.G. Roberts, </author> <title> D.J. Day, and T.L. Thorp, "Bit level systolic arrays," </title> <booktitle> Proc. 15th Asilomar Conf. on Circuits, Systems & Computers, </booktitle> <month> Nov. </month> <year> 1981. </year>
Reference-contexts: This makes possible the PM implementation of a fixed-point FIR filter by having a left-moving input signal stream hit a right-moving coefficient stream. The multiplications are bit-level systolic, and the filtering convolution is word-level systolic, so the entire calculation mirrors a two-level systolic array multiplier <ref> [16, 15, 25, 23, 24, 30] </ref>. The details are tedious, but simple examples of such a filter have been simulated and the idea verified. 8 Feedback So far, we have interpreted the PM substrate as strictly one-dimensional, with particles passing "through" one another if they don't interact.
Reference: 17. <author> R. Squier and K. Steiglitz, </author> <title> "2-d FHP lattice-gasses are computation universal," </title> <journal> Complex Systems, </journal> <note> to appear. </note>
Reference-contexts: There is also a large literature in lattice-gas automata (see Frisch et. al. [18], for example), which use particle motion and collisions in CA to simulate fluids. We have shown <ref> [17] </ref> that a general class of lattice-gas automata is computation-universal. Several recent papers have dealt with particle-like persistent structures in binary CA and their relationship to persistent structures like solitons in nonlinear differential equations [3, 8, 9, 10, 11, 12, 13, 14].
Reference: 18. <author> U. Frisch, D. d'Humie'res, B. Hasslacher, P. Lallemand, Y. Pomeau, and J. P. Rivet, </author> <title> "Lattice gas hydrodynamics in two and three dimensions," </title> <booktitle> Complex Systems 1 (1987), </booktitle> <pages> pp. 649-707. </pages>
Reference-contexts: Fredkin, Toffoli and Margolus [19, 20, 21] have explored the idea of the inelastic billiard-ball model for computation, which is computation-universal. There is also a large literature in lattice-gas automata (see Frisch et. al. <ref> [18] </ref>, for example), which use particle motion and collisions in CA to simulate fluids. We have shown [17] that a general class of lattice-gas automata is computation-universal.
Reference: 19. <author> C. H. Bennett, </author> <title> "Notes on the history of reversible computation," </title> <institution> IBM J. Res. and Dev. </institution> <month> 32 1 (Jan. </month> <year> 1988), </year> <pages> pp. 16-23. </pages>
Reference-contexts: In this paper we show how to embed practical computation in one-dimensional cellular automata using a model of computation based on collisions of moving particles [33]. The resulting (fixed) hardware combines the parallelism of systolic arrays with a high degree of programmability. Fredkin, Toffoli and Margolus <ref> [19, 20, 21] </ref> have explored the idea of the inelastic billiard-ball model for computation, which is computation-universal. There is also a large literature in lattice-gas automata (see Frisch et. al. [18], for example), which use particle motion and collisions in CA to simulate fluids.
Reference: 20. <author> N. Margolus, </author> <title> "Physics-like models of computations," </title> <journal> Physica 10D 13 (1984), </journal> <pages> pp. 81-95. </pages>
Reference-contexts: In this paper we show how to embed practical computation in one-dimensional cellular automata using a model of computation based on collisions of moving particles [33]. The resulting (fixed) hardware combines the parallelism of systolic arrays with a high degree of programmability. Fredkin, Toffoli and Margolus <ref> [19, 20, 21] </ref> have explored the idea of the inelastic billiard-ball model for computation, which is computation-universal. There is also a large literature in lattice-gas automata (see Frisch et. al. [18], for example), which use particle motion and collisions in CA to simulate fluids.
Reference: 21. <author> T. Toffoli, N. Margolus, </author> <title> Cellular Automata Machines: A New Environment for Modeling, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1987. </year>
Reference-contexts: In this paper we show how to embed practical computation in one-dimensional cellular automata using a model of computation based on collisions of moving particles [33]. The resulting (fixed) hardware combines the parallelism of systolic arrays with a high degree of programmability. Fredkin, Toffoli and Margolus <ref> [19, 20, 21] </ref> have explored the idea of the inelastic billiard-ball model for computation, which is computation-universal. There is also a large literature in lattice-gas automata (see Frisch et. al. [18], for example), which use particle motion and collisions in CA to simulate fluids.
Reference: 22. <author> H. T. Kung, </author> <title> "Why systolic architectures?" IEEE Comput. </title> <type> 15 1 (Jan. </type> <year> 1982), </year> <pages> pp. 37-46. </pages>
Reference-contexts: 1 Introduction Our goal in this paper is to achieve practical computation in a uniform, simple, locally connected, highly parallel architecture | in a way that is also programmable, and thereby accommodates the differing requirements of a variety of applications. Systolic arrays <ref> [22] </ref>, of course, satisfy the locally connected and parallel requirements, but the topology and processor functionality are difficult to modify once the machine is built.
Reference: 23. <author> H. T. Kung, L. M. Ruane, D. W. L. Yen, </author> <title> "A Two-level pipelined systolic array for convolutions," </title> <booktitle> in CMU Conf. on VLSI Systems and Computations, </booktitle> <editor> H.T. Kung, B. Sproull, and G. Steele (eds.), </editor> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <month> Oct. </month> <year> 1981, </year> <pages> pp. 255-264. </pages>
Reference-contexts: This makes possible the PM implementation of a fixed-point FIR filter by having a left-moving input signal stream hit a right-moving coefficient stream. The multiplications are bit-level systolic, and the filtering convolution is word-level systolic, so the entire calculation mirrors a two-level systolic array multiplier <ref> [16, 15, 25, 23, 24, 30] </ref>. The details are tedious, but simple examples of such a filter have been simulated and the idea verified. 8 Feedback So far, we have interpreted the PM substrate as strictly one-dimensional, with particles passing "through" one another if they don't interact.
Reference: 24. <author> S. Y. Kung, </author> <title> VLSI Array Processors, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year>
Reference-contexts: This makes possible the PM implementation of a fixed-point FIR filter by having a left-moving input signal stream hit a right-moving coefficient stream. The multiplications are bit-level systolic, and the filtering convolution is word-level systolic, so the entire calculation mirrors a two-level systolic array multiplier <ref> [16, 15, 25, 23, 24, 30] </ref>. The details are tedious, but simple examples of such a filter have been simulated and the idea verified. 8 Feedback So far, we have interpreted the PM substrate as strictly one-dimensional, with particles passing "through" one another if they don't interact.
Reference: 25. <author> P. R. Cappello and K. Steiglitz, </author> <title> "Digital signal processing applications of systolic algorithms," </title> <booktitle> in CMU Conf. on VLSI Systems and Computations, </booktitle> <editor> H.T. Kung, B. Sproull, and G. Steele (eds.), </editor> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <month> Oct. </month> <year> 1981, </year> <pages> pp. 245-254. </pages>
Reference-contexts: This makes possible the PM implementation of a fixed-point FIR filter by having a left-moving input signal stream hit a right-moving coefficient stream. The multiplications are bit-level systolic, and the filtering convolution is word-level systolic, so the entire calculation mirrors a two-level systolic array multiplier <ref> [16, 15, 25, 23, 24, 30] </ref>. The details are tedious, but simple examples of such a filter have been simulated and the idea verified. 8 Feedback So far, we have interpreted the PM substrate as strictly one-dimensional, with particles passing "through" one another if they don't interact.
Reference: 26. <author> H.-H. Liu and K.-S. Fu, </author> <title> "VLSI arrays for minimum-distance classifications," in VLSI for Pattern Recognition and Image Processing, </title> <editor> K.-S. Fu (ed.), </editor> <publisher> Spinger-Verlag, </publisher> <address> Berlin, </address> <year> 1984. </year>
Reference-contexts: Of course we are especially interested in finding PMs with small or easily implemented collision tables, which are as computationally rich and efficient as possible. Our current ongoing work is also aimed toward developing more applications, including iterative numerical computations, and combinatorial problems such as string matching <ref> [26, 27, 28, 29] </ref>. 10 Acknowledgement This work was supported in part by NSF grant MIP-9201484, and a grant from Georgetown University.
Reference: 27. <author> R. J. Lipton and D. Lopresti, </author> <title> "A systolic array for rapid string comparison," 1985 Chapel Hill Conference on Very Large Scale Integration, </title> <editor> Henry Fuchs (ed.), </editor> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <year> 1985, </year> <pages> pp. 363-376. </pages>
Reference-contexts: Of course we are especially interested in finding PMs with small or easily implemented collision tables, which are as computationally rich and efficient as possible. Our current ongoing work is also aimed toward developing more applications, including iterative numerical computations, and combinatorial problems such as string matching <ref> [26, 27, 28, 29] </ref>. 10 Acknowledgement This work was supported in part by NSF grant MIP-9201484, and a grant from Georgetown University.
Reference: 28. <author> R. J. Lipton and D. Lopresti, </author> <title> "Comparing long strings on a short systolic array," </title> <booktitle> 1986 International Workshop on Systolic Arrays, </booktitle> <institution> University of Oxford, </institution> <month> July 2-4, </month> <year> 1986. </year>
Reference-contexts: Of course we are especially interested in finding PMs with small or easily implemented collision tables, which are as computationally rich and efficient as possible. Our current ongoing work is also aimed toward developing more applications, including iterative numerical computations, and combinatorial problems such as string matching <ref> [26, 27, 28, 29] </ref>. 10 Acknowledgement This work was supported in part by NSF grant MIP-9201484, and a grant from Georgetown University.
Reference: 29. <author> G. M. Landau and U. Vishkin, </author> <title> "Introducing efficient parallelism into approximate string matching and a new serial algorithm," </title> <booktitle> ACM STOC, </booktitle> <year> 1986, </year> <pages> pp 220-230. </pages>
Reference-contexts: Of course we are especially interested in finding PMs with small or easily implemented collision tables, which are as computationally rich and efficient as possible. Our current ongoing work is also aimed toward developing more applications, including iterative numerical computations, and combinatorial problems such as string matching <ref> [26, 27, 28, 29] </ref>. 10 Acknowledgement This work was supported in part by NSF grant MIP-9201484, and a grant from Georgetown University.
Reference: 30. <author> F. T. Leighton, </author> <title> Introduction to Parallel Algorithms and Architectures, </title> <publisher> Morgan Kaufman Publishers, </publisher> <address> San Mateo, CA, </address> <year> 1992. </year>
Reference-contexts: This makes possible the PM implementation of a fixed-point FIR filter by having a left-moving input signal stream hit a right-moving coefficient stream. The multiplications are bit-level systolic, and the filtering convolution is word-level systolic, so the entire calculation mirrors a two-level systolic array multiplier <ref> [16, 15, 25, 23, 24, 30] </ref>. The details are tedious, but simple examples of such a filter have been simulated and the idea verified. 8 Feedback So far, we have interpreted the PM substrate as strictly one-dimensional, with particles passing "through" one another if they don't interact.
Reference: 31. <author> P. R. Cappello and K. Steiglitz, </author> <title> "Unifying VLSI array design with linear transformations of space-time," </title> <booktitle> in Advances in Computing Research: VLSI Theory, </booktitle> <editor> F. P. Preparata (ed.), </editor> <publisher> JAI Press, </publisher> <address> Greenwich, Conn., </address> <year> 1984, </year> <pages> pp. 23-65 </pages>
Reference-contexts: The work on mapping algorithms to systolic arrays <ref> [31, 32] </ref> may help us find a good language and build an effective compiler. From a practical point of view, the approach presented here could lead to new kinds of hardware for highly parallel computation, using VLSI implementations of cellular automata.
Reference: 32. <author> D. I. Moldovon and J. A. B. Fortes, </author> <title> "Partitioning and mapping algorithms into fixed systolic arrays," </title> <journal> IEEE Trans. Computers C-35 1 (1986), </journal> <pages> pp. 1-12. </pages>
Reference-contexts: The work on mapping algorithms to systolic arrays <ref> [31, 32] </ref> may help us find a good language and build an effective compiler. From a practical point of view, the approach presented here could lead to new kinds of hardware for highly parallel computation, using VLSI implementations of cellular automata.
Reference: 33. <author> R. K. Squier and K. Steiglitz, </author> <title> "Subatomic particle machines: parallel processing in bulk material," </title> <note> submitted to Signal Processing Letters. 14 </note>
Reference-contexts: In this paper we show how to embed practical computation in one-dimensional cellular automata using a model of computation based on collisions of moving particles <ref> [33] </ref>. The resulting (fixed) hardware combines the parallelism of systolic arrays with a high degree of programmability. Fredkin, Toffoli and Margolus [19, 20, 21] have explored the idea of the inelastic billiard-ball model for computation, which is computation-universal.
References-found: 33

