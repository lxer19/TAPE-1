URL: http://www.cs.mu.oz.au/tr_db/mu_96_30.ps.gz
Refering-URL: http://www.cs.mu.oz.au/tr_db/TR.html
Root-URL: 
Title: Criteria Used for the Evaluation of Software System Requirements Models  
Author: Elizabeth Haywood and Philip Dart 
Keyword: software engineering, requirements engineering, requirements modelling.  
Address: Melbourne, Australia  
Affiliation: Department of Electrical Electronic Engineering, Victoria University of Technology,  
Date: 24, 1996  
Note: October  1 also lecturer in the  
Abstract: Technical Report 96/30 Department of Computer Science The University of Melbourne Parkville, Victoria 3052, Australia Email: flizh,philipg@cs.mu.oz.au Abstract This paper presents a set of criteria which can be used as a basis for comparison of software system requirements models. The criteria are intended to cover aspects of a requirements model which allows for assessment of its suitability for a particular application. A range of models have been chosen to demonstrate the diversity of notation, application and intention and they have been considered separately from the methods used for their creation. The models have been evaluated against the criteria and more details can be found in [HD96]. Information is presented that will be of use to researchers and practitioners who are interested in modelling software system requirements and the provision of tool support for requirements engineering. 
Abstract-found: 1
Intro-found: 1
Reference: [BJT + 94] <author> David Bolton, Sara Jones, David Till, David Furber, and Stewart Green. </author> <title> Using Domain Knowledge in Requirements Capture and Formal Specification Construction. </title> <editor> In Marina Jirotka and Joseph A. Goguen, editors, </editor> <booktitle> Requirements Engineering Social and Technical Issues, </booktitle> <pages> pages 141-162. </pages> <publisher> Academic Press, </publisher> <year> 1994. </year>
Reference-contexts: They include a range of formalisms currently under development by the research community and have been grouped into seven different classes based on their underlying structure. These are: * goal hierarchy [DLF93] * statechart [HLN + 90, SC91] * hypertext [PTA94, WCS94] * domain network <ref> [BJT + 94] </ref> * use case hierarchy [RAB96] * logic [MPN + 95] * conceptual state machine [HSG + 94] With the exception of the hypertext models, which allow for many and varied representations of requirements, the models used a formal, well-defined language.
Reference: [Dav88] <author> Alan M. Davis. </author> <title> A Comparison of Techniques for the Specification of External System Behavior. </title> <journal> Communications of the ACM, </journal> <volume> 31(9) </volume> <pages> 1098-1115, </pages> <month> September </month> <year> 1988. </year>
Reference-contexts: Applications of a critical nature will require non-ambiguous, formally defined semantics to ensure verification and validation tasks are possible. Davis suggests that a formal technique should be applied when you cannot afford to have the requirement misunderstood <ref> [Dav88] </ref>. There is a broad spectrum of applications that require formal requirements modelling in order to produce a specification that will meet at least the industry standards as described by the IEEE Guide to Software Requirements Specifications [IEE84].
Reference: [Dav93] <author> Alan M. Davis. </author> <title> Software Requirements: Objects, </title> <publisher> Functions and States . Prentice Hall, </publisher> <year> 1993. </year>
Reference-contexts: Criteria for each of the areas are detailed and an assessment of several requirements definition and design methods and tools is presented. Alan Davis, in his book <ref> [Dav93] </ref>, uses a set of traits that he would like to see exhibited. <p> However, some models are created intentionally to be independent from subsequent system design. A Software Requirements Specification (SRS) is often described as a document containing a complete description of what the software will do without describing how it will do it <ref> [Dav93] </ref>. Many applications expect a SRS to be produced that does not include any design or implementation directives, so a model which is independent of design would be necessary.
Reference: [DH94] <author> Alan M. Davis and Pei Hsai. </author> <title> Giving VOICE to Requirements Engineering. </title> <journal> IEEE Software, </journal> <pages> pages 12-16, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: Davis and Hsia include in their list of three biggest problems in requirements engineering today, that requirements are likely to change at least once during development and certain to change immediately after delivery <ref> [DH94] </ref>. 10. "How easy is it to understand an application of the model?" easily understood by non experts - -requires significant expertise a b c d e This is another subjective criterion which is relevant to the client or their representative, when they check the requirements.
Reference: [DLF93] <author> Anne Dardenne, Axel van Lamsweerde, and Stephen Fickas. </author> <title> Goal-directed Requirements Acquisition. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 20 </volume> <pages> 3-50, </pages> <year> 1993. </year>
Reference-contexts: They include a range of formalisms currently under development by the research community and have been grouped into seven different classes based on their underlying structure. These are: * goal hierarchy <ref> [DLF93] </ref> * statechart [HLN + 90, SC91] * hypertext [PTA94, WCS94] * domain network [BJT + 94] * use case hierarchy [RAB96] * logic [MPN + 95] * conceptual state machine [HSG + 94] With the exception of the hypertext models, which allow for many and varied representations of requirements, the
Reference: [DTI90] <author> DTI/NCC. </author> <title> Extracted from The STARTS Guide, </title> <booktitle> 2nd Edition 1987, </booktitle> <volume> Vol 1, Chapter 5, </volume> <month> September, </month> <year> 1987, </year> <pages> pp. 177-223. </pages> <editor> In Merlin Dorfman and Richard H. Thayer, editors, </editor> <title> Standards, Guidelines, </title> <booktitle> and Examples on System and Software Requirements Engineering, </booktitle> <pages> pages 320-367. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: The STARTS Guide <ref> [DTI90] </ref> details the desirable characteristics of a requirements specification as per the IEEE 830 standard; that they should be unambiguous, complete, verifiable, consistent, modifiable, traceable, and usable after development.
Reference: [EM95a] <author> Khaled El Emam and Nazim H. Madhavji. </author> <title> A Field Study of Requirements Engineering Practices in Information Systems Development. </title> <booktitle> In Proceedings of the Second IEEE 7 International Symposium on Requirements Engineering. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1995. </year>
Reference-contexts: Emam and Madhavji describe a field study they undertook in order to formulate recommendations to practitioners for improving requirements engineering processes, and to provide directions for future research on methods and tools <ref> [EM95a] </ref>. Their study focussed only on the requirements engineering process and they included document inspection as part of their information gathering procedure as well as structured interviews. They present seven issues pertinent to the requirements engineering process and discuss the concerns, recommendations and implementation difficulties that may be encountered.
Reference: [EM95b] <author> Khaled El Emam and Nazim H. Madhavji. </author> <title> Measuring the Success of Requirements Engineering Processes. </title> <booktitle> In Proceedings of the Second IEEE International Symposium on Requirements Engineering. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> March </month> <year> 1995. </year>
Reference-contexts: A model which requires significant expertise to understand, may require interpretation for casual users. Emam and Madhavji, in their study to measure the success of requirements engineering process, include a criterion measuring the extent to which users have understood what the new system will do and will not do <ref> [EM95b] </ref>. 11. "Are there provisions for traceability in the model?" full traceability provided - -no support for tracing requirements a b c d e Tracing of requirements has generated much discussion amongst researchers in the area of requirements engineering.
Reference: [GF94] <author> Orlena C.Z. Gotel and Anthony C.W. Finkelstein. </author> <title> An Analysis of the Requirements Traceability Problem. </title> <booktitle> In Proceedings of the First International Conference on Requirements Engineering (ICRE), </booktitle> <pages> pages 94-101. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: Gotel and Finkelstein recommend that requirements should be traceable back from a specification to the original source <ref> [GF94] </ref>.
Reference: [GMA96a] <author> Andrew Gabb, Neelan Maheswaran, and Alan Allwright. </author> <title> Requirements Tools Evaluation Criteria. Unpublished draft received from author, </title> <year> 1996. </year>
Reference-contexts: Andrew Gabb and colleagues at the Information Technology Division, DSTO, are undertaking a comparative evaluation of requirements management tools for use in front end systems engineering processes in the Australian Defence Organisation. They have derived a detailed set of criteria <ref> [GMA96a] </ref> from an analysis of users' needs of such tools [GMA96b]. The criteria are given a priority rating of critical through to useful; if a tool does not meet certain criteria, then it is not acceptable. <p> For large applications, some means of abstraction is probably essential. Gabb et. al. assume that there will be a hierarchy of some sort in the requirements model that the tools they are evaluating is to support <ref> [GMA96a] </ref>. 5. "Can parts of the model be separated for different views?" supports separation of concerns must be viewed in entirety a b c d e A model allows for separation of concerns if it is capable of providing different "views" of the same requirement for the people who are involved <p> Gabb et. al. describe usability as one of their critical criteria for a requirements tool <ref> [GMA96a] </ref>. <p> Gabb et. al. includes several critical criteria pertaining to traceability in a requirements tool, for example, the provision of links to show both the sources of a requirement (and the reason for its existence), and also requirements derived from that requirement <ref> [GMA96a] </ref>. 12. "How easy is it to reuse part of an application of the model?" reuse supported reuse difficult a b c d e Software reuse is another area that has generated much research.
Reference: [GMA96b] <author> Andrew Gabb, Neelan Maheswaran, and Alan Allwright. </author> <title> Requirements Tools Evaluation User Needs. Unpublished draft received from author, </title> <year> 1996. </year>
Reference-contexts: They have derived a detailed set of criteria [GMA96a] from an analysis of users' needs of such tools <ref> [GMA96b] </ref>. The criteria are given a priority rating of critical through to useful; if a tool does not meet certain criteria, then it is not acceptable. The following section describes two field studies undertaken by different research teams in different countries; Canada and USA.
Reference: [HB96] <author> Michael G. Hinchey and Jonathan P. Bowen. </author> <title> To Formalize or Not to Formalize. </title> <booktitle> Computer, </booktitle> <pages> pages 18-19, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Hinchey and Bowen explain that formal methods are one of several techniques that, when correctly applied, have resulted in systems of the highest integrity <ref> [HB96] </ref>. They may be applied to increase confidence in a system, to conquer complexity or to satisfy standards set by procurers or various regulatory bodies.
Reference: [HD96] <author> Elizabeth Haywood and Philip Dart. </author> <title> Analysis of Software System Requirements Models. </title> <booktitle> In Proceedings of Australian Software Engineering Conference, </booktitle> <pages> pages 131-138. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1996. </year>
Reference-contexts: The following section describes a selection of requirements models we have assessed, a brief description of their most notable features and a table with the evaluation of each model against each criterion. 5 Analysis of models In our earlier paper, <ref> [HD96] </ref> we examine a range of models chosen as a representative cross-section from those included in our on-going survey. They include a range of formalisms currently under development by the research community and have been grouped into seven different classes based on their underlying structure.
Reference: [HLN + 90] <author> David Harel, Hagi Lachover, Amnon Naamad, Amir Pnueli, Michal Politi, Rivi Sher-man, Aharon Shtull-Trauring, and Mark Trakhtenbrot. STATEMATE: </author> <title> A Working Environment for the Development of Complex Reactive Systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(4) </volume> <pages> 403-414, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: They include a range of formalisms currently under development by the research community and have been grouped into seven different classes based on their underlying structure. These are: * goal hierarchy [DLF93] * statechart <ref> [HLN + 90, SC91] </ref> * hypertext [PTA94, WCS94] * domain network [BJT + 94] * use case hierarchy [RAB96] * logic [MPN + 95] * conceptual state machine [HSG + 94] With the exception of the hypertext models, which allow for many and varied representations of requirements, the models used a
Reference: [HSG + 94] <author> Pei Hsai, Jayarajan Samual, Jerry Gao, David Kung, Yasufumi Toyoshima, and Chris Chen. </author> <title> Formal Approach to Scenario Analysis. </title> <journal> IEEE Software, </journal> <pages> pages 33-41, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: These are: * goal hierarchy [DLF93] * statechart [HLN + 90, SC91] * hypertext [PTA94, WCS94] * domain network [BJT + 94] * use case hierarchy [RAB96] * logic [MPN + 95] * conceptual state machine <ref> [HSG + 94] </ref> With the exception of the hypertext models, which allow for many and varied representations of requirements, the models used a formal, well-defined language.
Reference: [IEE84] <editor> IEEE. ANSI/IEEE Std 830-1984. </editor> <title> In IEEE Guide to Software Requirements Specifications. </title> <publisher> IEEE, </publisher> <year> 1984. </year>
Reference-contexts: There is a broad spectrum of applications that require formal requirements modelling in order to produce a specification that will meet at least the industry standards as described by the IEEE Guide to Software Requirements Specifications <ref> [IEE84] </ref>. Hinchey and Bowen explain that formal methods are one of several techniques that, when correctly applied, have resulted in systems of the highest integrity [HB96]. They may be applied to increase confidence in a system, to conquer complexity or to satisfy standards set by procurers or various regulatory bodies.
Reference: [Jon96] <author> Cliff B. Jones. </author> <title> A Rigorous Approach to Formal Methods. </title> <booktitle> Computer, </booktitle> <pages> pages 20-21, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Jones believes that formal methods should be applied to those critical applications on which the future of the company depends or whose software systems can affect society at large <ref> [Jon96] </ref>. 3. "How flexible is the model?" fixed, inflexible - -adaptable, extendible a b c d e By flexibility, we aim to demonstrate whether the model can be adapted and extended depending upon the user and the application.
Reference: [LPR93] <author> Mitch Lubars, Colin Potts, and Charles Richter. </author> <title> A Review of the State of the Practice in Requirements Modeling. </title> <booktitle> In Proceedings of the IEEE International Symposium on Requirements Engineering, </booktitle> <pages> pages 2-14. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> January </month> <year> 1993. </year>
Reference-contexts: in industry, and to attempt to highlight problem areas. 3 Field Studies of Practitioners Lubars et. al. conducted a field study of ten organisations, by way of interviewing practitioners, to find out what they currently do to define, interpret, analyse and use the requirements for their software systems and products <ref> [LPR93] </ref>. They included requirements modelling as part of their analysis, along with elicitation, validation, evolution and methodology. Changing requirements and managing those changes was identified as an important factor in the process, as was integration of various tools. <p> They present seven issues pertinent to the requirements engineering process and discuss the concerns, recommendations and implementation difficulties that may be encountered. Their conclusions highlighted how important non-technical issues are in the requirements engineering process. They agreed with Lubars et. al. <ref> [LPR93] </ref> about how many of the problems were organisational and non-technical and they suggest that support for decision-making during planning activities is an area that needs addressing. Each of the studies described above are addressing the methods and in some cases the tools used for requirements engineering.
Reference: [MPN + 95] <author> T.L. McCluskey, J.M. Porteous, Y. Naik, C.N. Taylor, and S. Jones. </author> <title> A Requirements Capture Method and its use in an Air Traffic Control Application. </title> <journal> Software-Practice and Experience, </journal> <volume> 25(1) </volume> <pages> 47-71, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: There have been a number of surveys of methods and tools developed for use in requirements analysis and specification, some of which are detailed in section 2. We have separated the requirements models from the methods used to create them for our evaluation. We agree with McCluskey et. al. <ref> [MPN + 95] </ref> in that the selection and customisation of a requirements modelling formalism should be considered a major part of the requirements engineering process and that it depends upon the problem to be analysed. <p> These are: * goal hierarchy [DLF93] * statechart [HLN + 90, SC91] * hypertext [PTA94, WCS94] * domain network [BJT + 94] * use case hierarchy [RAB96] * logic <ref> [MPN + 95] </ref> * conceptual state machine [HSG + 94] With the exception of the hypertext models, which allow for many and varied representations of requirements, the models used a formal, well-defined language. Apart from the logic model as described by McCluskey et. al. [MPN + 95], the models included diagrammatic <p> use case hierarchy [RAB96] * logic <ref> [MPN + 95] </ref> * conceptual state machine [HSG + 94] With the exception of the hypertext models, which allow for many and varied representations of requirements, the models used a formal, well-defined language. Apart from the logic model as described by McCluskey et. al. [MPN + 95], the models included diagrammatic notation, for ease of construction and understanding. Many of the models also allowed for a more natural language interpretation, especially for user validation.
Reference: [MS94] <author> N.A.M. Maiden and A.G. Sutcliffe. </author> <title> Requirements Critiquing Using Domain Abstraction. </title> <booktitle> In Proceedings of the First International Conference on Requirements Engineering (ICRE), </booktitle> <pages> pages 184-193. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: The reuse of requirements may also play an important part in saving time and effort in software system specification. Maiden and Sutcliffe suggest that populating tools with generic domain abstractions can assist software engineers in the process of generating a requirements specification <ref> [MS94] </ref>. 13. "What range of requirements does the module cover?" all categories of requirements - -very limited subset a b c d e The range of requirements is concerned with the type of requirements to be described, for example, functional requirements only.
Reference: [PTA94] <author> Colin Potts, Kenji Takahashi, and Annie I. Anton. </author> <title> Inquiry-Based Requirements Analysis. </title> <journal> IEEE Software, </journal> <pages> pages 21-32, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: They include a range of formalisms currently under development by the research community and have been grouped into seven different classes based on their underlying structure. These are: * goal hierarchy [DLF93] * statechart [HLN + 90, SC91] * hypertext <ref> [PTA94, WCS94] </ref> * domain network [BJT + 94] * use case hierarchy [RAB96] * logic [MPN + 95] * conceptual state machine [HSG + 94] With the exception of the hypertext models, which allow for many and varied representations of requirements, the models used a formal, well-defined language.
Reference: [RAB96] <author> Bjorn Regnell, Michael Anderson, and Johan Bergstrand. </author> <title> A Hierarchical Use Case Model with Graphical Representation. </title> <booktitle> In Proceedings of ECBS'96, IEEE International Symposium and Workshop on Engineering of Computer-Based Systems, </booktitle> <pages> 8 pages, </pages> <year> 1996. </year> <month> 8 </month>
Reference-contexts: These are: * goal hierarchy [DLF93] * statechart [HLN + 90, SC91] * hypertext [PTA94, WCS94] * domain network [BJT + 94] * use case hierarchy <ref> [RAB96] </ref> * logic [MPN + 95] * conceptual state machine [HSG + 94] With the exception of the hypertext models, which allow for many and varied representations of requirements, the models used a formal, well-defined language.
Reference: [SC91] <author> I.T.A. Spence and B.N. Carey. </author> <title> Customers Do Not Want Frozen Specifications. </title> <journal> Software Engineering Journal, </journal> <pages> pages 175-180, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: They include a range of formalisms currently under development by the research community and have been grouped into seven different classes based on their underlying structure. These are: * goal hierarchy [DLF93] * statechart <ref> [HLN + 90, SC91] </ref> * hypertext [PTA94, WCS94] * domain network [BJT + 94] * use case hierarchy [RAB96] * logic [MPN + 95] * conceptual state machine [HSG + 94] With the exception of the hypertext models, which allow for many and varied representations of requirements, the models used a
Reference: [SS96] <author> Jawed Siddiqi and M. Chandra Shekaran. </author> <title> Requirements Engineering: The Emerging Wisdom. </title> <journal> IEEE Software, </journal> <pages> pages 15-19, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Many applications expect a SRS to be produced that does not include any design or implementation directives, so a model which is independent of design would be necessary. However, this view is not universally held, Siddiqi and Shekaran remind us that requirements and design are interdependent <ref> [SS96] </ref>. 8. "How easy is it to apply the model?" easily used by non experts - -requires significant expertise a b c d e This is a more subjective criterion and should be treated with caution.
Reference: [WCS94] <author> David P. Wood, Michael G. Christel, and Scott M. Stevens. </author> <title> A Multimedia Approach to Requirements Capture and Modeling. </title> <booktitle> In Proceedings of the First International Conference on Requirements Engineering. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: The problems associated with the management of all the requirements documentation was cited as being pervasive and significant. Their description of the functionality required for documentation could be addressed in part by a hypertext system such as described in Wood et. al. <ref> [WCS94] </ref>. Emam and Madhavji describe a field study they undertook in order to formulate recommendations to practitioners for improving requirements engineering processes, and to provide directions for future research on methods and tools [EM95a]. <p> They include a range of formalisms currently under development by the research community and have been grouped into seven different classes based on their underlying structure. These are: * goal hierarchy [DLF93] * statechart [HLN + 90, SC91] * hypertext <ref> [PTA94, WCS94] </ref> * domain network [BJT + 94] * use case hierarchy [RAB96] * logic [MPN + 95] * conceptual state machine [HSG + 94] With the exception of the hypertext models, which allow for many and varied representations of requirements, the models used a formal, well-defined language. <p> Wood et. al. suggested that their system might be suitable for use as a front end to existing CASE tools <ref> [WCS94] </ref>. We would argue that it is suitable for the initial stages of requirements engineering and that other modelling paradigms might be usefully employed during the later stages when a specification is produced.
Reference: [Whi94] <author> Stephanie M. White. </author> <title> Comparative Analysis of Embedded Computer System Requirements Methods. </title> <booktitle> In Proceedings of the First International Conference on Requirements Engineering, </booktitle> <pages> pages 126-134. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: Stephanie White provides a comparative analysis of embedded system requirements methods using thirteen desirable method characteristics <ref> [Whi94] </ref>. The characteristics include formality, construction, comprehension, independence, verification, traceability. A summary is provided in the form of a table, detailing the eight methods she compared against each of the attributes.
References-found: 26

