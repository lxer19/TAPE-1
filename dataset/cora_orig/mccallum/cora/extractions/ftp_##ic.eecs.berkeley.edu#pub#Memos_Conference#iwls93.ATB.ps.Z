URL: ftp://ic.eecs.berkeley.edu/pub/Memos_Conference/iwls93.ATB.ps.Z
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/serdar/publications/index.html
Root-URL: 
Title: BDD Variable Ordering for Interacting Finite State Machines  
Author: Adnan Aziz Serdar Tasiran Robert K. Brayton 
Date: February 15, 1993  
Address: Berkeley, CA 94720, USA  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California,  
Abstract: We address the problem of obtaining good variable orderings for the BDD representing the transition relation of a system of interacting finite state machines. We obtain orderings based only on the communication structure of the system. We use communication complexity arguments to derive upper bounds on the size of the corresponding BDD in terms of the communication graph. We argue that the bound is partially tight, and justify our decision to use the communication graph to obtain the ordering. We use the bound to get orderings that are asymptotically optimum for a variety of classes of interconnect structures. As another example of communication complexity based proofs, we exhibit an exponential lower bound on the BDD size for a class of functions. We use the upper bound to formulate algorithms for variable ordering. Our experimental results show that the procedures are efficient, and give good orderings. fl This research was supported by SRC 93-DC-008
Abstract-found: 1
Intro-found: 1
Reference: [Bry] <author> R. E. Bryant. </author> <title> "Graph-based algorithms for Boolean Function Manipulation". </title> <journal> IEEE Transactions on Computers, </journal> <month> August </month> <year> 1986. </year>
Reference-contexts: As a result algorithms that explicitly operate on the state space of the product machine will have exponential complexity. The Binary Decision Diagram (BDD) <ref> [Bry] </ref> is a graph based data structure that is used to represent logic functions. It can be used to represent the transition relation of a binary encoded sequential machine implicitly by coding the corresponding characteristic function [Tou].
Reference: [Tou] <author> H.J.Touati, H.Savoj,B.Lin,R.K.Brayton, and A.Sangiovanni-Vincentelli. </author> <title> "Implicit state enumeration of finite state machines using BDD's", </title> <booktitle> in Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pp. </pages> <month> 130-133 Nov. </month> <year> 1990. </year> <month> 13 </month>
Reference-contexts: The Binary Decision Diagram (BDD) [Bry] is a graph based data structure that is used to represent logic functions. It can be used to represent the transition relation of a binary encoded sequential machine implicitly by coding the corresponding characteristic function <ref> [Tou] </ref>. The size of a BDD representing a logic function is very sensitive to the variable ordering chosen. Given a logic function, the problem of finding the ordering which leads to a minimum sized BDD for the function is co-NP complete.
Reference: [Chi] <author> M.Chiodo, T. R. Shiple, A. Sangiovanni-Vincentelli, R. K. </author> <title> Brayton,"Automatic Compositional Minimization in CTL Model Checking", </title> <booktitle> in Proceedings of the International Conference on Computer-Aided Design, </booktitle> <pages> pp. </pages> <month> 172-178 Nov. </month> <year> 1992. </year>
Reference: [McMil] <author> K. L. McMillan, </author> <title> "Symbolic Model Checking", </title> <type> Ph.D. thesis, </type> <institution> Carnegie Mellon University 1992. </institution>
Reference: [Tas] <author> S. Tasiran. </author> <title> "Complexity Management for Sequential Systems composed of Communicating Finite State Machines", in 290h class project report UC-Berkeley, </title> <month> Fall </month> <year> 1992. </year>
Reference-contexts: The more important results are those assessing the usefulness of the bounds in 10 finding a compact BDD representation. The former will be discussed first, as they have determined what algorithms and bounds to use to obtain the latter. Refer to <ref> [Tas] </ref> for details. 4.1 Algorithm Efficiency and Accuracy The branch and bound algorithm that finds the permutation which minimizes S is absolute in the sense that it does find the permutation minimizing the upper bound. However, for more than about 20 component machines this algorithm took excessively long.
Reference: [Ull] <author> J. D. Ullman, </author> <title> "Computational Aspects of VLSI", </title> <publisher> Computer Science Press 1984. </publisher>
Reference: [Kur] <author> Z. Har El and R. P. Kurshan, </author> <title> "Software for Analytic Development of Communication Protocols", </title> <journal> AT&T Technical Journal, </journal> <pages> pp. 45-49, </pages> <month> Jan </month> <year> 1990. </year>
Reference-contexts: The benchmarks were written in the S=R language <ref> [Kur] </ref>. We extracted the process communication graphs, and found variable orderings using the algorithms described in section 3. The number of nodes in the BDDs of the transition relation of the product machine for different orderings is reported in Table 2.
References-found: 7

