URL: http://www-aig.jpl.nasa.gov/home/gat/tla.ps.gz
Refering-URL: http://www-aig.jpl.nasa.gov/home/gat/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: On Three-Layer Architectures significant architectural features. First, the flow of control among these components is
Author: Erann Gat David Kortenkamp, R. Peter Bonnasso, and Robin Murphy, 
Note: (Appears in Artificial Intelligence and Mobile Robots,  eds., AAAI Press) 1. Historical Background The sense-plan-act (SPA) approach has two  By 1985 it was becoming clear that SPA had  was needed [Firby87, Agre87, Payton86]. The SPA approach was so dominant at the time that this new work was labeled with the self-contradictory buzzword  So in its original presentation, Subsumption is, at  [Brooks90]). From the details of Brooks's examples it is clear that Subsumption's layers are not decomposed "in the traditional manner" at all. Instead, they are simple  
Address: 4800 Oak Grove Drive Pasadena, CA 91109  
Affiliation: Jet Propulsion Laboratory California Institute of Technology  
Abstract: In the mid-1980's Rodney Brooks touched off a firestorm of interest in autonomous robots with the introduction of the Subsumption architecture 1 [Brooks86]. At the time, the dominant view in the AI community was that a control system for an autonomous mobile robot should be decomposed into three functional elements: a sensing system, a planning system, and an execution system [Nilsson80]. The job of the sensing system is to translate raw sensor input (usually sonar or vision data) into a world model. The job of the planner is to take the world model and a goal and generate a plan to achieve the goal. The job of the execution system is to take the plan and generate the actions it prescribes. But what about each individual layer? Don't we need to decompose a single layer in the traditional manner? This is true to some extent, but the key difference is that we don't need to account for all desired perceptions and processing and generated behaviors in a single decomposition.
Abstract-found: 1
Intro-found: 1
Reference: [Agre87] <author> Phillip E. Agre and David Chapman. "Pengi: </author> <title> An Implementation of a Theory of Activity." </title> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <year> 1987. </year>
Reference-contexts: In this chapter I will use the word to mean a set of constraints on the structure of a software system. unpredictability. Several researchers in the mid 80's suggested that a different execution mechanism was needed <ref> [Firby87, Agre87, Payton86] </ref>. The SPA approach was so dominant at the time that this new work was labeled with the self-contradictory buzzword "reactive planning." Subsumption is the best known departure from SPA. It is also popularly perceived as the most radical of its time.
Reference: [Agre90] <author> Phillip Agre and David Chapman. </author> <title> "What are Plans For?" Robotics and Autonomous Systems, </title> <journal> vol. </journal> <volume> 6, </volume> <pages> pp. 17-34, </pages> <year> 1990. </year>
Reference-contexts: However, unlike Subsumption, T/R-III embraced abstraction rather than rejecting it. In Subsumption higher-level layers interface with lower level ones by suppressing the results of the lower-level computations and superseding their results. In T/R-III, higher-level layers interfaced with lower-level ones by providing input or advice to the lower-level layers (cf. <ref> [Payton90, Agre90] </ref>). In other words, layers in T/R-III provided layers of computational abstraction as well as layers of functionality. <p> An alternative is to use an approach called conditional sequencing, which is a more complex model of plan execution motivated by human instruction following. Humans can achieve tasks based on very concise instructions in the face of a wide variety of contingencies (e.g. <ref> [Agre90] </ref>, [Suchman87]). Conditional sequencing provides a computational framework for encoding the sort of procedural knowledge contained in instructions. It differs from traditional plan execution in that the control constructs for composing primitives are not limited to the partial ordering, conditionals, and loops used to build SPA plans.
Reference: [Angle89] <author> Colin Angle, </author> <note> "Tooth Docs: the Paper", unpublished manuscript. </note>
Reference-contexts: One of the first robots to be built using one of these latter alternatives was Tooth [Gat94] which was completed in the summer of 1989 <ref> [Angle89] </ref>. Tooth was a small robot (30 cm by 20 cm) with simple sensors and limited computation (two 8-bit microcontroller, each with about 2000 bytes of memory), but it was a very capable robot nonetheless.
Reference: [Arkin90] <author> Ronald C. Arkin. </author> <title> "Integrating Behavioral, Perceptual and World Knowledge in Reactive Navigation." </title> <booktitle> Robotics and Autonomous Systems 6 (1990) 105-122. </booktitle>
Reference-contexts: For such a critique, see [Kirsh91].) The years following the introduction of Subsumption in 1986 saw a profusion of new robot control architectures, some developed more or less independently (e.g. [Kaelbling88], [Soldo90], <ref> [Arkin90] </ref>, [Georgeff87], [Simmons90]) and others introduced as a direct response to Subsumption's shortcomings (e.g. [Rosenblatt89]). One of the first robots to be built using one of these latter alternatives was Tooth [Gat94] which was completed in the summer of 1989 [Angle89].
Reference: [Balch95] <editor> Tucker Balch, et al. "Io, Ganymede and Callisto: </editor> <title> A multiagent robot trash collecting team." </title> <journal> AI Magazine, </journal> <month> Summer </month> <year> 1995. </year>
Reference: [Biber80] <author> C. Biber, et al. </author> <title> "The Polaroid Ultrasonic Ranging System." </title> <booktitle> Proceedings of the 67th Conference of the Audio Engineering Society, </booktitle> <year> 1980. </year>
Reference-contexts: Encoders on the drive and steering motors provide fairly reliable odometry and dead reckoning, although the robot's heading tends to precess due to slight misalignments of its wheels. A development enclosure houses a Gespak 68000 computer and a radially symmetric ring of twelve Polaroid sonars <ref> [Biber80] </ref>. The sonars are mounted on panels that allow them to be easily reconfigured.
Reference: [Bonasso91] <author> R. Peter Bonasso. </author> <title> "Integrating Reaction Plans and Layered Competences Through Synchronous Control." </title> <booktitle> Proceedings of the Internation Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <year> 1991. </year>
Reference-contexts: At least three different groups of researchers working more or less independently came up with very similar solutions to this problem at about the same time <ref> [Connell91, Gat91, Bonasso91] </ref>. All three solutions consisted of control architectures that comprised three main components: a reactive feedback control mechanism, a slow deliberative planner, and a sequencing mechanism that connected the first two components.
Reference: [Bonasso92] <author> R. Peter Bonasso. </author> <title> "Using Parallel Program Specifications For Reactive Control of Underwater Vehicles." </title> <journal> Journal of Applied Intelligence, </journal> <month> June </month> <year> 1992. </year>
Reference: [Bonasso et al. 97] <author> R. Peter Bonasso, et al. </author> <title> Experiences with an Architecture for Intelligent Reactive Agents. </title> <journal> Journal of Experimental and Theoretical AI, </journal> <volume> 9(2), </volume> <year> 1997. </year>
Reference-contexts: The deliberator can interface to the rest of the system in two different ways. It can produce plans for the sequencer to execute, or it can respond to specific queries from the sequencer. The RAPs-based 3T architecture takes the first approach <ref> [Bonasso et al. 97] </ref>. The ESL-based ATLANTIS architecture takes the second approach. This is a natural result of the fact that RAPs was designed specifically to serve as a plan representation for an automated planning system and ESL was not. These two approaches are not mutually exclusive.
Reference: [Brooks86] <author> Rodney A. Brooks. </author> <title> A Robust Layered Control System for a Mobile Robot. </title> <journal> I E EE Journal on Robotics and Automation, </journal> <volume> vol RA-2, no. 1, </volume> <month> March </month> <year> 1986. </year>
Reference-contexts: introduction of the Subsumption architecture 1 <ref> [Brooks86] </ref>. At the time, the dominant view in the AI community was that a control system for an autonomous mobile robot should be decomposed into three functional elements: a sensing system, a planning system, and an execution system [Nilsson80].
Reference: [Brooks89] <author> Rodney A. Brooks. </author> <title> "The Behavior Language User's Guide." </title> <publisher> MIT AI Lab internal publication. </publisher>
Reference-contexts: It is the responsibility of the sequencer to manage transitions between regimes of continuous operation. A number of special-purpose languages have been developed for programming the controller (e.g. [Gat91b], <ref> [Brooks89] </ref>), but any language can be used as long as the architectural constraints are observed. Most of the special-purpose languages for programming the controller were developed at a time when robots could only support very small processors for which no other development tools were available.
Reference: [Brooks90] <author> Rodney A. Brooks. </author> <title> "Elephants Don't Play Chess." </title> <booktitle> Robotics and Autonomous Systems 6 (1990) 3-15. </booktitle>
Reference-contexts: This view is reinforced by the canonical diagram of Subsumption, which shows all information flowing unidirectionally from sensors to actuators, just as in SPA. Where Subsumption departs radically from SPA is in its repudiation of plans (and indeed of symbolic representations in general <ref> [Brooks90] </ref>). From the details of Brooks's examples it is clear that Subsumption's layers are not decomposed "in the traditional manner" at all. Instead, they are simple networks of small finite state machines joined by "wires" which connect output ports to input ports.
Reference: [Brooks91] <author> Rodney Brooks. </author> <title> "Intelligence without representation." </title> <booktitle> Artificial Intelligence 47 (1991) 139-160. </booktitle>
Reference-contexts: issue with the most fundamental tenet of Subsumption as a design methodology, saying in effect that the central (indeed the only) architectural mechanism that Subsumption provides often doesn't work. (It should be noted that Hartley's critique only addresses Subsumption as an engineering methodology, not as a model of human intelligence <ref> [Brooks91] </ref>. For such a critique, see [Kirsh91].) The years following the introduction of Subsumption in 1986 saw a profusion of new robot control architectures, some developed more or less independently (e.g. [Kaelbling88], [Soldo90], [Arkin90], [Georgeff87], [Simmons90]) and others introduced as a direct response to Subsumption's shortcomings (e.g. [Rosenblatt89]).
Reference: [Connell89] <author> Jonathan Connell. </author> <title> A Colony Architecture for an Artificial Creature. </title> <type> Technical Report 1151, </type> <institution> Massachusetts Institute of Technology Artificial Intelligence Laboratory, </institution> <year> 1989. </year>
Reference-contexts: By the common metric that speed equals intelligence, Subsumption appeared to be a major breakthrough. Subsumption reached a pinnacle with a robot called Herbert, which was programmed to find and retrieve soda cans in an office environment <ref> [Connell89] </ref>. (Brooks has recently launched an even more ambitious project called Cog, but as of this writing no results have been published.) While Herbert's capabilities were impressive even by today's standards, it also appeared to represent the limits of what could be achieved with Subsumption.
Reference: [Connell91] <author> Jonathan Connell, </author> <title> "SSS: A Hybrid Architecture Applied to Robot Navigation," </title> <booktitle> Proceedings of the IEEE Conference on Robotics and Automation (ICRA), </booktitle> <year> 1992. </year>
Reference-contexts: At least three different groups of researchers working more or less independently came up with very similar solutions to this problem at about the same time <ref> [Connell91, Gat91, Bonasso91] </ref>. All three solutions consisted of control architectures that comprised three main components: a reactive feedback control mechanism, a slow deliberative planner, and a sequencing mechanism that connected the first two components.
Reference: [Elsaessar&Slack94] <author> Chris E;lsaessar and Marc Slack. </author> <title> "Integrating deliberative planning in a robot architecture." </title> <booktitle> Proceedings of the AIAA Conference on Intelligent Robots in Field, Factory, Service and Space (CIRFFSS), </booktitle> <year> 1994. </year>
Reference-contexts: This original three-layer architecture was briefly implemented on JPL's Robbie robot [Wilcox87], but there is no record of the results. RAPs has since been used to control a number of real robots, including Uncle Bob <ref> [Elsaessar&Slack94] </ref>, Homer [Gat&Dorais94], and Chip [Firby96]. The RAP-based three-layer architecture has come be called 3T [Bonnasso et al. 96]. Connell's Subsumption-based architecture is called SSS. Gat's architecture is called ATLANTIS.
Reference: [Firby87] <author> R. James Firby. </author> <title> An Investigation Into Reactive Planning in Complex Domains. </title> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <year> 1987. </year>
Reference-contexts: In this chapter I will use the word to mean a set of constraints on the structure of a software system. unpredictability. Several researchers in the mid 80's suggested that a different execution mechanism was needed <ref> [Firby87, Agre87, Payton86] </ref>. The SPA approach was so dominant at the time that this new work was labeled with the self-contradictory buzzword "reactive planning." Subsumption is the best known departure from SPA. It is also popularly perceived as the most radical of its time.
Reference: [Firby89] <author> R. James Firby. </author> <title> Adaptive Execution in D y n a m i c D om a in s . Technical report YALEU/CSD/RR#672, </title> <institution> Yale University, </institution> <year> 1989. </year>
Reference-contexts: Connell's sequencer was based on Su bsu mp tion , Bon a ss o u se d K a el bli ng 's REX/GAPPS system [Kaelbling89], and Gat's was based on Firby's Reactive Action Packages (RAPs) system as described in his 1989 thesis <ref> [Firby89] </ref>. Bonasso's group later adopted RAPs as their sequencing component, while Gat's sequencer was recently developed into a new language, ESL [Gat97]. Aside from the technical advances, there are two items of historical interest in Firby's thesis. <p> The first is that the title catch phrase was changed from "reactive planning" to "reactive execution," heralding a clean break from the SPA tradition. The second is that it contains the earliest description of the three-layer architecture that has now become the de facto standard <ref> [Firby89, figures 1.1 and 7.1] </ref>. This original three-layer architecture was briefly implemented on JPL's Robbie robot [Wilcox87], but there is no record of the results. RAPs has since been used to control a number of real robots, including Uncle Bob [Elsaessar&Slack94], Homer [Gat&Dorais94], and Chip [Firby96]. <p> It is possible to construct a conditional sequencing system in a traditional programming language like C, but because the control constructs are so much more complex than those provided by such languages conditional sequencing is much more effectively done with a special-purpose language like RAPs <ref> [Firby89] </ref>, PRS [Georgeff87], the Behavior Language [ B r o o k s 8 9 ] , R E X / G A P P S [ K a e l b l i n g 8 7 , Kaelbling89, Bonasso92], or ESL [Gat97].
Reference: [Firby96] <author> R. James Firby, et al. </author> <title> "Programming CHIP for the IJCAI-95 Robot Competition." </title> <journal> AI Magazine, </journal> <month> Spring </month> <year> 1996. </year>
Reference-contexts: This original three-layer architecture was briefly implemented on JPL's Robbie robot [Wilcox87], but there is no record of the results. RAPs has since been used to control a number of real robots, including Uncle Bob [Elsaessar&Slack94], Homer [Gat&Dorais94], and Chip <ref> [Firby96] </ref>. The RAP-based three-layer architecture has come be called 3T [Bonnasso et al. 96]. Connell's Subsumption-based architecture is called SSS. Gat's architecture is called ATLANTIS.
Reference: [Firby&Slack95] <author> R. James Firby and Marc Slack. </author> <title> "Task execution: Interfacing to reactive skill networks." </title> <booktitle> Working notes of the 1995 AAAI Spring Symposium on Lessons Learned from Implemented Architectures for Physical Agents, </booktitle> <year> 1995. </year>
Reference: [Gat91] <author> Erann Gat. </author> <title> "Reliable Goal-directed Reactive Control for Real-world Autonomous Mobile Robots." </title> <type> Ph.D. Thesis, </type> <institution> Virginia Polytechnic Institute and State University, Blacksburg, Virginia, </institution> <year> 1991. </year>
Reference-contexts: At least three different groups of researchers working more or less independently came up with very similar solutions to this problem at about the same time <ref> [Connell91, Gat91, Bonasso91] </ref>. All three solutions consisted of control architectures that comprised three main components: a reactive feedback control mechanism, a slow deliberative planner, and a sequencing mechanism that connected the first two components.
Reference: [Gat91b] <author> Erann Gat. "ALFA: </author> <title> A Language for Programming Reactive Robotic Control Systems." </title> <booktitle> Proceedings of the IEEE Conference on Robotics and Automation (ICRA), </booktitle> <year> 1991. </year>
Reference-contexts: In other words, a Behavior (which is a transfer function) should be a continuous function with respect to its internal state. It is the responsibility of the sequencer to manage transitions between regimes of continuous operation. A number of special-purpose languages have been developed for programming the controller (e.g. <ref> [Gat91b] </ref>, [Brooks89]), but any language can be used as long as the architectural constraints are observed. Most of the special-purpose languages for programming the controller were developed at a time when robots could only support very small processors for which no other development tools were available. <p> The following sections describe the control, sequencing, and deliberative layers on Alfred. These descriptions are faithful to the actual implementation used in the contest, and could no doubt be improved on. 4.1 Control Layer Alfred's control layer was implemented in ALFA (A Language For Action) <ref> [Gat91b] </ref>, a language designed by its structure to enforce the control layer's architectural constraints. ALFA is a dataflow language with no looping constructs. It does, however, have state variables, making it Turing--complete.
Reference: [Gat92] <author> Erann Gat, </author> <title> Integrating Planning and Reaction in a Heterogeneous Asynchronous Architecture for Controlling Mobile Robots, </title> <booktitle> Proceedings of the Tenth National Conference on Artificial Intelligence (AAAI), </booktitle> <year> 1992. </year>
Reference: [Gat93] <author> Erann Gat. </author> <title> "On the Role of Stored Internal State in the Control of Autonomous Mobile Robots." </title> <journal> AI Magazine, </journal> <month> Spring </month> <year> 1993. </year>
Reference-contexts: A reactive robot using ultrasonic sensors to control its motions sometimes can collide with obstacles when specular (mirror-like) reflections produce readings that fail to indicate the obstacle's presence. All three of these problems can be viewed as a result of the method used to manage stored internal state information <ref> [Gat93] </ref>. Time-consuming computations like planning and world modeling generate internal state whose semantics reflect world states, whether they are past, present (in the case of world models) or future (in the case of plans).
Reference: [Gat94] <author> Erann Gat, et al. </author> <title> "Behavior Control for Robotic Exploration of Planetary Surfaces." </title> <journal> IEEE Transactions on Robotics and Automation 10 (4) 1994. </journal>
Reference-contexts: One of the first robots to be built using one of these latter alternatives was Tooth <ref> [Gat94] </ref> which was completed in the summer of 1989 [Angle89]. Tooth was a small robot (30 cm by 20 cm) with simple sensors and limited computation (two 8-bit microcontroller, each with about 2000 bytes of memory), but it was a very capable robot nonetheless. <p> Tooth was programmed to search for small objects (styrofoam coffee cups), pick them up in its gripper, and return them to a lightbulb beacon. A similar capability was demonstrated a year later on an outdoor robot, RockyIII <ref> [Miller91, Gat94] </ref> using the same control methodology.
Reference: [Gat&Dorais94] <author> Erann Gat and Greg Dorais. </author> <title> "Robot Navigation by Conditional Sequencing." </title> <booktitle> Proceedings of the International Conference on Robotics and Automation (ICRA), </booktitle> <year> 1994. </year>
Reference-contexts: This original three-layer architecture was briefly implemented on JPL's Robbie robot [Wilcox87], but there is no record of the results. RAPs has since been used to control a number of real robots, including Uncle Bob [Elsaessar&Slack94], Homer <ref> [Gat&Dorais94] </ref>, and Chip [Firby96]. The RAP-based three-layer architecture has come be called 3T [Bonnasso et al. 96]. Connell's Subsumption-based architecture is called SSS. Gat's architecture is called ATLANTIS.
Reference: [Gat97] <author> Erann Gat. "ESL: </author> <title> A Language for Supporting Robust Plan Execution in Embedded Autonomous Agents." </title> <booktitle> Proceedings of the IEEE Aerospace Conference, </booktitle> <year> 1997. </year>
Reference-contexts: Bonasso's group later adopted RAPs as their sequencing component, while Gat's sequencer was recently developed into a new language, ESL <ref> [Gat97] </ref>. Aside from the technical advances, there are two items of historical interest in Firby's thesis. The first is that the title catch phrase was changed from "reactive planning" to "reactive execution," heralding a clean break from the SPA tradition. <p> done with a special-purpose language like RAPs [Firby89], PRS [Georgeff87], the Behavior Language [ B r o o k s 8 9 ] , R E X / G A P P S [ K a e l b l i n g 8 7 , Kaelbling89, Bonasso92], or ESL <ref> [Gat97] </ref>. There are two major approaches to the design of conditional sequencing languages. They can be complete languages in their own right with their own specialized execution semantics. RAPs and PRS take this approach. Or they can be layered on top of a syntactically extensible programming language like Lisp. <p> All of these primitive behaviors were implemented in less than 200 lines of ALFA code. 4.2 Sequencing Layer Alfred's sequencing code was written in Macintosh Common Lisp version 2.0 (with one exception; see below), using a set of macros that later evolved into ESL <ref> [Gat97] </ref>. MCL 2.0 is a singlethreaded Lisp, which made it impossible to implement multithreaded task management directly. MCL version 3 is multithreaded, and all of the code and infrastructure described in this section have been much improved since Alfred's code was written.
Reference: [Georgeff87] <author> Michael Georgeff and Amy Lanskey, </author> <title> "Reactive Reasoning and Planning", </title> <booktitle> Proceedings of AAAI-87. </booktitle>
Reference-contexts: For such a critique, see [Kirsh91].) The years following the introduction of Subsumption in 1986 saw a profusion of new robot control architectures, some developed more or less independently (e.g. [Kaelbling88], [Soldo90], [Arkin90], <ref> [Georgeff87] </ref>, [Simmons90]) and others introduced as a direct response to Subsumption's shortcomings (e.g. [Rosenblatt89]). One of the first robots to be built using one of these latter alternatives was Tooth [Gat94] which was completed in the summer of 1989 [Angle89]. <p> It is possible to construct a conditional sequencing system in a traditional programming language like C, but because the control constructs are so much more complex than those provided by such languages conditional sequencing is much more effectively done with a special-purpose language like RAPs [Firby89], PRS <ref> [Georgeff87] </ref>, the Behavior Language [ B r o o k s 8 9 ] , R E X / G A P P S [ K a e l b l i n g 8 7 , Kaelbling89, Bonasso92], or ESL [Gat97].
Reference: [Hartley91] <author> Ralph Hartley and Frank Pipitone. </author> <title> "Experiments with the Subsumption Architecture." </title> <booktitle> Proceedings of the International Conference on Robotics and Automation (ICRA), </booktitle> <year> 1991. </year>
Reference-contexts: Herbert was very unreliable (there is no record of it ever having performed a complete can-retrieval task flawlessly), and no Subsumption-based robot has ever matched its capabilities since. One possible cause of Subsumption's apparent "capability ceiling" is that the architecture lacks mechanisms for managing complexity. Quoting from <ref> [Hartley91] </ref>: The most important problem we found with the Subsumption architecture is that is it not sufficiently modular. The other problems described below are really side-effects of this one. Because upper layers interfere with the internal functions of lower-level behaviors they cannot be designed independently and become increasingly complex.
Reference: [Kaelbling87] <author> Leslie Pack Kaelbling. "REX: </author> <title> A Symbolic Language for the Design and Parallel Implementation of Embedded Systems." </title> <booktitle> Proceedings of the AIAA conference on Computers in Aerospace, </booktitle> <year> 1987. </year>
Reference: [Kaelbling88] <author> Leslie Pack Kaelbling. </author> <title> "Goals as Parallel Program Specifications." </title> <booktitle> Proceedings of AAAI-88. </booktitle>
Reference-contexts: For such a critique, see [Kirsh91].) The years following the introduction of Subsumption in 1986 saw a profusion of new robot control architectures, some developed more or less independently (e.g. <ref> [Kaelbling88] </ref>, [Soldo90], [Arkin90], [Georgeff87], [Simmons90]) and others introduced as a direct response to Subsumption's shortcomings (e.g. [Rosenblatt89]). One of the first robots to be built using one of these latter alternatives was Tooth [Gat94] which was completed in the summer of 1989 [Angle89].
Reference: [Kirsh91] <author> David Kirsh. </author> <booktitle> "Today the earwig, tomorrow man?" Artificial Intelligence 47 (1991) 161-184. </booktitle>
Reference-contexts: For such a critique, see <ref> [Kirsh91] </ref>.) The years following the introduction of Subsumption in 1986 saw a profusion of new robot control architectures, some developed more or less independently (e.g. [Kaelbling88], [Soldo90], [Arkin90], [Georgeff87], [Simmons90]) and others introduced as a direct response to Subsumption's shortcomings (e.g. [Rosenblatt89]).
Reference: [Latombe91] <author> Jean-Claude Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference: [Miller91] <author> David P. Miller, et al. </author> <title> "Reactive Navigation through Rough Terrain: Experimental Results." </title> <booktitle> Proceedings of AAAI92. </booktitle>
Reference-contexts: Tooth was programmed to search for small objects (styrofoam coffee cups), pick them up in its gripper, and return them to a lightbulb beacon. A similar capability was demonstrated a year later on an outdoor robot, RockyIII <ref> [Miller91, Gat94] </ref> using the same control methodology.
Reference: [Nilsson80] <author> Nils J. Nilsson. </author> <booktitle> Principles of Artificial Intelligence. </booktitle> <address> Palo Alto: </address> <publisher> Tioga. </publisher> <year> 1980. </year>
Reference-contexts: introduction of the Subsumption architecture 1 [Brooks86]. At the time, the dominant view in the AI community was that a control system for an autonomous mobile robot should be decomposed into three functional elements: a sensing system, a planning system, and an execution system <ref> [Nilsson80] </ref>. The job of the sensing system is to translate raw sensor input (usually sonar or vision data) into a world model. The job of the planner is to take the world model and a goal and generate a plan to achieve the goal.
Reference: [Noreils90] <author> Fabrice Noreils. </author> <title> "Integrating Error Recovery in a Mobile Robot Control System." </title> <booktitle> IEEE International Conference on Robotics and Automation, </booktitle> <year> 1990. </year>
Reference-contexts: Second, the algorithms in the controller should fail cognizantly, that is, they should be designed to detect (as opposed to avoid) any failure to perform the function for which they were designed (c.f. <ref> [Noreils90] </ref>). Rather than attempt to design algorithms that never fail (which is impossible on real robots) one can instead design algorithms that never fail to detect a failure. This allows other components of the system (the sequencer and deliberator) to take corrective action to recover from the failure.
Reference: [Nourbakhsh et al. 93] <editor> Illah Nourbakhsh, et al. </editor> <title> "The Winning Robots from the 1993 Robot Competition." </title> <journal> AI Magazine, </journal> <month> Winter </month> <year> 1993. </year>
Reference: [Payton86] <author> David Payton. </author> <title> "An Architecture for Reflexive Autonomous Vehicle Control." </title> <booktitle> Proceedings of the International Conference on Robotics and Automation (ICRA), </booktitle> <year> 1986. </year>
Reference-contexts: In this chapter I will use the word to mean a set of constraints on the structure of a software system. unpredictability. Several researchers in the mid 80's suggested that a different execution mechanism was needed <ref> [Firby87, Agre87, Payton86] </ref>. The SPA approach was so dominant at the time that this new work was labeled with the self-contradictory buzzword "reactive planning." Subsumption is the best known departure from SPA. It is also popularly perceived as the most radical of its time.
Reference: [Payton90] <author> David Payton, J. Kenneth Rosenblatt and David Keirsey, </author> <title> "Plan-Guided Reaction," </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, </journal> <volume> vol. 20, </volume> <pages> pp. 1370-1382, </pages> <year> 1990. </year>
Reference-contexts: However, unlike Subsumption, T/R-III embraced abstraction rather than rejecting it. In Subsumption higher-level layers interface with lower level ones by suppressing the results of the lower-level computations and superseding their results. In T/R-III, higher-level layers interfaced with lower-level ones by providing input or advice to the lower-level layers (cf. <ref> [Payton90, Agre90] </ref>). In other words, layers in T/R-III provided layers of computational abstraction as well as layers of functionality.
Reference: [Pell et al. 96] <author> Barney Pell, et al. </author> <title> "A Remote Agent Prototype for an Autonomous Spacecraft." </title> <booktitle> Proceedings of the SPIE Conference on Optical Science, Engineering, and Instrumentation, </booktitle> <year> 1996. </year>
Reference-contexts: RAPs does permit deliberative algorithms (called RAPexperts) to be invoked at runtime to answer specific queries, and the ATLANTIS sequencer can ask the deliberator to give it a complete plan which it then executes. (This is being done in an application of ESL to autonomous spacecraft <ref> [Pell et al. 96] </ref>.) 3.4 Discussion The architectural guidelines that govern the design of the three-layer architecture are not derived from fundamental theoretical considerations.
Reference: [Rosenblatt89] <author> J. Kenneth Rosenblatt and David W. </author> <title> Payton "A Fine-grained Alternative to the Subsumption Architecture." </title> <booktitle> Proceedings of the AAAI Stanford Spring Symposium Series, </booktitle> <year> 1989. </year>
Reference-contexts: For such a critique, see [Kirsh91].) The years following the introduction of Subsumption in 1986 saw a profusion of new robot control architectures, some developed more or less independently (e.g. [Kaelbling88], [Soldo90], [Arkin90], [Georgeff87], [Simmons90]) and others introduced as a direct response to Subsumption's shortcomings (e.g. <ref> [Rosenblatt89] </ref>). One of the first robots to be built using one of these latter alternatives was Tooth [Gat94] which was completed in the summer of 1989 [Angle89].
Reference: [Schoppers87] <author> Marcel Schoppers,=. </author> <title> "Universal Plans for Reactive Robots in Unpredictable Domains." </title> <booktitle> Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <year> 1987. </year>
Reference-contexts: One approach to the problem is to enumerate all the possible states the robot can be in, and precompute the correct primitive to use in each state for a particular task. Clever encoding can actually make this daunting task tractable for certain constrained domains <ref> [Schoppers87] </ref>. However, this universal plan approach has two serious drawbacks. First, it is often not possible for a robot to know its current state, especially when unexpected contingencies arise. Second, this approach disregards the robot's execution history, which often contains useful information.
Reference: [Simmons90] <author> Reid Simmons. </author> <title> "An Architecture for Coordinating Planning, Sensing and Action." Proceedings of the DARPA Workshop on Innovative Approaches to Planning, Scheduling, </title> <journal> and Control, </journal> <year> 1990. </year>
Reference-contexts: For such a critique, see [Kirsh91].) The years following the introduction of Subsumption in 1986 saw a profusion of new robot control architectures, some developed more or less independently (e.g. [Kaelbling88], [Soldo90], [Arkin90], [Georgeff87], <ref> [Simmons90] </ref>) and others introduced as a direct response to Subsumption's shortcomings (e.g. [Rosenblatt89]). One of the first robots to be built using one of these latter alternatives was Tooth [Gat94] which was completed in the summer of 1989 [Angle89].
Reference: [Simmons95] <author> Reid Simmons. </author> <title> "The 1994 AAI Robot Competition and Exhibition." A I Magazine, </title> <month> Summer </month> <year> 1995. </year>
Reference: [Soldo90] <author> Monnett Soldo. </author> <title> "Reactive and Preplanned Control in a Mobile Robot." </title> <booktitle> Proceedings of the International Conference on Robotics and Automation (ICRA), </booktitle> <year> 1990. </year>
Reference-contexts: For such a critique, see [Kirsh91].) The years following the introduction of Subsumption in 1986 saw a profusion of new robot control architectures, some developed more or less independently (e.g. [Kaelbling88], <ref> [Soldo90] </ref>, [Arkin90], [Georgeff87], [Simmons90]) and others introduced as a direct response to Subsumption's shortcomings (e.g. [Rosenblatt89]). One of the first robots to be built using one of these latter alternatives was Tooth [Gat94] which was completed in the summer of 1989 [Angle89].
Reference: [Suchman87] <author> Lucy Suchman. </author> <title> Plans and Situated Action. </title> <publisher> Cambridge University Press, </publisher> <year> 1987. </year>
Reference-contexts: An alternative is to use an approach called conditional sequencing, which is a more complex model of plan execution motivated by human instruction following. Humans can achieve tasks based on very concise instructions in the face of a wide variety of contingencies (e.g. [Agre90], <ref> [Suchman87] </ref>). Conditional sequencing provides a computational framework for encoding the sort of procedural knowledge contained in instructions. It differs from traditional plan execution in that the control constructs for composing primitives are not limited to the partial ordering, conditionals, and loops used to build SPA plans.
Reference: [Wilcox87] <author> W. H. Wilcox, et al., </author> <title> "A vision system for a mars rover," </title> <booktitle> Procedings of SPIE Mobile Robots II, </booktitle> <volume> vol. 852, </volume> <year> 1987. </year>
Reference-contexts: The second is that it contains the earliest description of the three-layer architecture that has now become the de facto standard [Firby89, figures 1.1 and 7.1]. This original three-layer architecture was briefly implemented on JPL's Robbie robot <ref> [Wilcox87] </ref>, but there is no record of the results. RAPs has since been used to control a number of real robots, including Uncle Bob [Elsaessar&Slack94], Homer [Gat&Dorais94], and Chip [Firby96]. The RAP-based three-layer architecture has come be called 3T [Bonnasso et al. 96]. Connell's Subsumption-based architecture is called SSS.
References-found: 47

