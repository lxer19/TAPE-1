URL: http://www.cis.ohio-state.edu/~ren/sigperf.ps
Refering-URL: http://www.cis.ohio-state.edu/~ren/
Root-URL: http://www.cis.ohio-state.edu
Title: Performance Analysis of Key-partitioned Signature Files  
Author: Dik Lun Lee Mukesh Singhal Liming Ren 
Keyword: General Terms: Performance, Signature, Complexity Additional Key words and Phrases: Access method, information retrieval, superimposed, partitioning.  
Date: April 29, 1998  
Affiliation: University of Science and Technology, Hong Kong  The Ohio State University  
Abstract: Key-partitioned signature files is a very effective technique to facilitate fast signature file search. It usually reduce the number of signatures searched to a fraction of the total signature files. In this paper, we propose a new key-based partitioning method, variable-prefix partitioning, to improve the work done by Lee and Leng [8, 9]. we also present some analytically study of key-partitioned signature files. Several fast and accurate analytical functions for estimating search space reduction ratio, number of pages generated etc. are derived based on the Central Limit Theorem. Our analysis, especially the analysis method, can be used in other key-partitioned systems. We also estimate how much space can be saved by storing only one copy of the partition keys. The kind of storage saving occurs in any key-partitioned systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> AHO, A. V., and ULLMAN, J. D. </author> <title> Optimal partial-match retrieval when fields are independently specified. </title> <journal> ACM Trans. Database Syst. </journal> <volume> 4, </volume> <month> 2 (June, </month> <year> 1979), </year> <pages> 168-179. </pages>
Reference-contexts: 1 Introduction The signature file approach has been investigated quite extensively in the last decade. It has been applied to a large variety of applications, including textual databases such as news databases [14], multi-attribute retrieval in relational databases <ref> [1, 8] </ref>, multimedia office filing [4] and chemical databases for DNA matching [11]. The signature file method is also well suited for dynamic environments like the Internet. Signature file based retrieval systems can be updated very efficiently. Documents can be indexed and added to the signature files as they arrive.
Reference: [2] <author> BICKLE, P., and DOKSUM, K. A. </author> <title> Mathematical Statistics: Basic Ideas and Selected Topics. </title> <publisher> Holden-Day, Inc., </publisher> <year> 1977. </year>
Reference-contexts: We need some statistical results here. Given n signatures, let X n denote the number of signatures whose first bit are 0. Then X n has binomial distribution B (n; w) with mean nw and variance nw (1 w). According to The Central Limit Theorem <ref> [2] </ref>, X n nw p nw (1w) converges to the standard normal distribution N (0; 1) when n is large. Mathematically it is lim Pfj p zj "g = 0 where z N (0; 1) is the standard normal distribution. <p> Followings are a few entries from the standard normal distribution table in [7]. ff 0.05 0.025 0.01 0.005 0.002 0.001 0.0004 2 A rule of thumb <ref> [2] </ref> is that for most purposes the approximation can be used when nw and n (1 w) are both larger than 5. <p> Its value can be found in the normal distribution table <ref> [2] </ref>. Proof. The conclusion follows from the Central Limit Theorem and the above discussion. The number 5 ( 1 w + 1 1w ) + p is used as the splitting point since normal distribution table works well when n &gt; 5 ( 1 w + 1 1w ).
Reference: [3] <author> Bozanis, P., M., and Tsakalidis, A. </author> <title> Parametric weighted filter: an efficient dynamic manipulation of signature files. </title> <journal> Computer Journal 38, </journal> <month> 6 </month> <year> (1995). </year>
Reference-contexts: This kind of storage saving does not occur only in the three partitioning methods developed by Lee and Leng. It happens to other key based partitioning methods, like Quick F ilter [12], Parametric Weighted Filter <ref> [3] </ref>, as well. It is interesting to know how much space is saved by storing only one copy of the key. In this section, we will estimate the saving for the fixed-prefix partitioning. <p> In this section, we will estimate the saving for the fixed-prefix partitioning. The result should give us a good indication about storage savings about other methods, including Quick F ilter [12], Parametric Weighted Filter <ref> [3] </ref>. For simplicity, we only consider the case where all partitions are generated. Thus the storage overhead is the storage of the partition keys, 2 k k, plus the storage overhead of the non-key part of signatures, (m k)n. These two terms together give us the new storage overhead.
Reference: [4] <author> CHRISTODOULAKIS, S., and FALOUTSOS, C. </author> <title> Design considerations for a message file server. </title> <journal> IEEE Trans. Soft. Eng. </journal> <volume> SE-10, </volume> <month> 2 (March, </month> <year> 1984), </year> <pages> 201-210. </pages>
Reference-contexts: 1 Introduction The signature file approach has been investigated quite extensively in the last decade. It has been applied to a large variety of applications, including textual databases such as news databases [14], multi-attribute retrieval in relational databases [1, 8], multimedia office filing <ref> [4] </ref> and chemical databases for DNA matching [11]. The signature file method is also well suited for dynamic environments like the Internet. Signature file based retrieval systems can be updated very efficiently. Documents can be indexed and added to the signature files as they arrive.
Reference: [5] <author> Jae Soo Yoo, Yoon-Joon Lee, J., and Myoung Ho Kim. </author> <title> The hs file: a new dynamic signature file method for efficient information retrieval. </title> <booktitle> In Database and Expert Systems Applications. 5th International Conference, DEXA '94 Proceedings (Sept., 1994), </booktitle> <publisher> Springer-Verlag. </publisher>
Reference: [6] <author> Jeong-Ki Kim, and Jae Woo Chang. </author> <title> A new dynamic signature file method in parallel processing environment. </title> <booktitle> In Database and Expert Systems Applications. 6th International Conference, DEXA '95 Proceedings (1995), </booktitle> <publisher> Springer-Verlag. </publisher>
Reference: [7] <author> JOHNSON, R. A., and WICHERN, Dean W. </author> <title> Applied Multivariate Statistical Analysis. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1988. </year>
Reference-contexts: Thus for large n, Pfj p j z 1 ff g = ff where z 1 ff 2 is tabulated in many statistics books. Followings are a few entries from the standard normal distribution table in <ref> [7] </ref>. ff 0.05 0.025 0.01 0.005 0.002 0.001 0.0004 2 A rule of thumb [2] is that for most purposes the approximation can be used when nw and n (1 w) are both larger than 5.
Reference: [8] <author> LEE, D. L., and LENG, C.-W. </author> <title> Partitioned signature files: Design issues and performance evaluation. </title> <booktitle> ACM TOIS 7, </booktitle> <month> 2 (April, </month> <year> 1989), </year> <pages> 158-180. </pages>
Reference-contexts: 1 Introduction The signature file approach has been investigated quite extensively in the last decade. It has been applied to a large variety of applications, including textual databases such as news databases [14], multi-attribute retrieval in relational databases <ref> [1, 8] </ref>, multimedia office filing [4] and chemical databases for DNA matching [11]. The signature file method is also well suited for dynamic environments like the Internet. Signature file based retrieval systems can be updated very efficiently. Documents can be indexed and added to the signature files as they arrive. <p> The time spent on searching the signature file is proportional to the database size, and performance becomes a major concern for large databases. Some recent research on signature files has addressed the improvement of search speed, as exemplified by the partitioned signature file approach, Lee and Leng <ref> [8, 9] </ref>, Zezula et al. [12, 16], Yoo et al.[5, 6]. In this paper, we will work along the line of Lee and Leng. We now give a brief review of their work for background information [8, 9]. To reduce the number of signatures searched, Lee and Leng [8, 9] proposed <p> of search speed, as exemplified by the partitioned signature file approach, Lee and Leng <ref> [8, 9] </ref>, Zezula et al. [12, 16], Yoo et al.[5, 6]. In this paper, we will work along the line of Lee and Leng. We now give a brief review of their work for background information [8, 9]. To reduce the number of signatures searched, Lee and Leng [8, 9] proposed to partition signatures into a number of partitions by a deterministic mapping algorithm. Three partitioning algorithms, namely, the fixed-prefix, extended-prefix, and floating-key methods, were presented. <p> and Leng <ref> [8, 9] </ref>, Zezula et al. [12, 16], Yoo et al.[5, 6]. In this paper, we will work along the line of Lee and Leng. We now give a brief review of their work for background information [8, 9]. To reduce the number of signatures searched, Lee and Leng [8, 9] proposed to partition signatures into a number of partitions by a deterministic mapping algorithm. Three partitioning algorithms, namely, the fixed-prefix, extended-prefix, and floating-key methods, were presented. Each method specifies a different way to extract keys from signatures. <p> The main reason for doing so is for load balancing since the probability of a partition being searched for a query solely depends on the number of zeros in the partition key <ref> [8] </ref>. The drawback is that different partitions may have different key lengths. The last partition method, floating-key method, selects keys differently. First, a key length, say k, is selected, and then the first k-substring of a signature which contains the least number of ones is selected as the key. <p> For simplicity, K P S was assumed only to take the values of 0; k; 2k; ; etc. Lee and Leng <ref> [8, 9] </ref> have shown that floating-key partitioning results in more search space reduction than the fixed-prefix partitioning and extended-prefix partitioning. Lee and Leng proposed a general trie data structure to support these three partition schemes. <p> We only plot the page search reduction ratio here since signature search reduction ratio is almost identical to page search reduction ratio <ref> [8, 9] </ref>. From Figure 2 and Figure 3, we can see results from the approximation formulas match simulation results very accurately. When signatures number reaches 250,000, the error for number of pages generated is under 0.3%. <p> Signature reduction ratio for the fixed-prefix method when k = 15 is obtained from <ref> [8] </ref>. Figure 4 shows the signature search reduction ratios of both the fixed-prefix partitioning and the variable-prefix partitioning. It is clear that the variable-prefix method performs better than the fixed-prefix method for large databases. The margin gets bigger as the number of signatures in the database increases. <p> Number of signatures simulation p=128 theoretical p=128 simulation p=64 theoretical p=64 simulation p=32 theoretical p=32 0 0.2 0.4 0.6 0.8 Signatures serched (1.00=100%100) Number of bits set in query signature Fixed Prefix 0.5 millions 1 million 4 millions 8 million 16 millions 13 3 Floating Key Partitioning Lee and Leng <ref> [8, 9] </ref> showed that the floating-key method has the best search reduction ratio. In this section, we show how the formulas obtained for the variable-prefix method can be used to estimate the number of pages generated and the search space reduction ratio for the floating-key partitioning method. <p> We can expect that the probability to be smaller than 0.5 due to the way this segment is selected. In the variable-prefix partitioning analysis, we know this probability affects the generated trie balance and many performance measures. In <ref> [8] </ref>, Lee and Leng obtained an analytical formula, P (j; i), for the probability that a signature is hashed into S (j) and its key segment has exactly i bits set to 1. <p> Thus, the total complexity of P 3 (n; k; m) is j=0 which is O (( P m k 1 j=0 P (j)) fl n) = O (n). The proofs for other functions are similar. fl 4 Storage Saving In the three partition schemas proposed in <ref> [8, 9] </ref>, all signatures with the same key are grouped into one partition. It is clear that the key portions of the signatures need not be stored for every signature. <p> is, it comes absolutely free. 18 86 90 94 98 100 200 300 400 500 600 700 800 900 1000 Space saved (%) Signature length maximal space saved 0 0.1 0.2 Space saved (1.00=100%100) Number of signatures m=128 m=512 19 5 Conclusion We extend results obtained by Lee and Leng <ref> [8, 9] </ref>. A new way of organizing a signature file is presented to reduce the percentage of signatures searched further. Instead of using fixed prefix key, our method uses variable prefix key. No link list is used at leaf nodes. New partitions (pages) are generated whenever an overflow occurs.
Reference: [9] <author> LEE, D. L., and LENG, C.-W. </author> <title> A partitioned signature for multi-attribute and text retrieval. </title> <booktitle> In Proceedings of 6 th international conference on data engineering (Los Angeles, </booktitle> <address> CA, </address> <month> Feb., </month> <year> 1990), </year> <pages> pp. 389-397. </pages>
Reference-contexts: The time spent on searching the signature file is proportional to the database size, and performance becomes a major concern for large databases. Some recent research on signature files has addressed the improvement of search speed, as exemplified by the partitioned signature file approach, Lee and Leng <ref> [8, 9] </ref>, Zezula et al. [12, 16], Yoo et al.[5, 6]. In this paper, we will work along the line of Lee and Leng. We now give a brief review of their work for background information [8, 9]. To reduce the number of signatures searched, Lee and Leng [8, 9] proposed <p> of search speed, as exemplified by the partitioned signature file approach, Lee and Leng <ref> [8, 9] </ref>, Zezula et al. [12, 16], Yoo et al.[5, 6]. In this paper, we will work along the line of Lee and Leng. We now give a brief review of their work for background information [8, 9]. To reduce the number of signatures searched, Lee and Leng [8, 9] proposed to partition signatures into a number of partitions by a deterministic mapping algorithm. Three partitioning algorithms, namely, the fixed-prefix, extended-prefix, and floating-key methods, were presented. <p> and Leng <ref> [8, 9] </ref>, Zezula et al. [12, 16], Yoo et al.[5, 6]. In this paper, we will work along the line of Lee and Leng. We now give a brief review of their work for background information [8, 9]. To reduce the number of signatures searched, Lee and Leng [8, 9] proposed to partition signatures into a number of partitions by a deterministic mapping algorithm. Three partitioning algorithms, namely, the fixed-prefix, extended-prefix, and floating-key methods, were presented. Each method specifies a different way to extract keys from signatures. <p> For simplicity, K P S was assumed only to take the values of 0; k; 2k; ; etc. Lee and Leng <ref> [8, 9] </ref> have shown that floating-key partitioning results in more search space reduction than the fixed-prefix partitioning and extended-prefix partitioning. Lee and Leng proposed a general trie data structure to support these three partition schemes. <p> The time complexity for searching the trie structure is of the order of the number of partitions which actually match the query. The complexity for both insertion and deletion operations are O (k + p) <ref> [9] </ref>, where p is the page size and k the key length. 3 k Key length. m Signature length. w (w Q ) Probability of a (query) signature bit is set to 1. n Number of total signatures. p Page size (number of signatures it can store). m k Number of <p> Proper key length needs to be selected first based on the number of signatures in database. This is not always possible if the database grows and shrinks over time. With the partition file structures introduced in <ref> [9] </ref>, it is possible to eliminate the limitation of partition key length. One natural way to generalize this is to split and create new partitions whenever necessary. The prefix is still used as the partition key but without any length limitation. <p> The induction case: Now assume the function is correct for any collection of signatures with key length less than k. Let's study the case when the key length is k. For this case, we do induction on n. If n p, then by the insertion operation described in <ref> [9] </ref>, the trie will consist of at most one page at the root of the trie. Thus, we have dn=pe = 1 page generated. <p> The response time is mainly determined by the percentage of signatures searched since it decides the number of disk accesses. Given a query signature S Q , the search process as described in <ref> [9] </ref>, starts with the root of the trie as follows. 1. If the first bit is zero, both the left and right branches have to be searched; otherwise, only the right child will be searched. 2. <p> We only plot the page search reduction ratio here since signature search reduction ratio is almost identical to page search reduction ratio <ref> [8, 9] </ref>. From Figure 2 and Figure 3, we can see results from the approximation formulas match simulation results very accurately. When signatures number reaches 250,000, the error for number of pages generated is under 0.3%. <p> Number of signatures simulation p=128 theoretical p=128 simulation p=64 theoretical p=64 simulation p=32 theoretical p=32 0 0.2 0.4 0.6 0.8 Signatures serched (1.00=100%100) Number of bits set in query signature Fixed Prefix 0.5 millions 1 million 4 millions 8 million 16 millions 13 3 Floating Key Partitioning Lee and Leng <ref> [8, 9] </ref> showed that the floating-key method has the best search reduction ratio. In this section, we show how the formulas obtained for the variable-prefix method can be used to estimate the number of pages generated and the search space reduction ratio for the floating-key partitioning method. <p> Thus, the total complexity of P 3 (n; k; m) is j=0 which is O (( P m k 1 j=0 P (j)) fl n) = O (n). The proofs for other functions are similar. fl 4 Storage Saving In the three partition schemas proposed in <ref> [8, 9] </ref>, all signatures with the same key are grouped into one partition. It is clear that the key portions of the signatures need not be stored for every signature. <p> is, it comes absolutely free. 18 86 90 94 98 100 200 300 400 500 600 700 800 900 1000 Space saved (%) Signature length maximal space saved 0 0.1 0.2 Space saved (1.00=100%100) Number of signatures m=128 m=512 19 5 Conclusion We extend results obtained by Lee and Leng <ref> [8, 9] </ref>. A new way of organizing a signature file is presented to reduce the percentage of signatures searched further. Instead of using fixed prefix key, our method uses variable prefix key. No link list is used at leaf nodes. New partitions (pages) are generated whenever an overflow occurs.
Reference: [10] <author> LEE, D. L., and Ren, L. </author> <title> Document ranking on weight-partitioned signature files. </title> <journal> ACM Transactions on Information Systems 14, </journal> <month> 2 (April, </month> <year> 1996), </year> <pages> 109-137. </pages>
Reference-contexts: The signature file method is also well suited for dynamic environments like the Internet. Signature file based retrieval systems can be updated very efficiently. Documents can be indexed and added to the signature files as they arrive. Recent research results <ref> [10, 15] </ref> enable successful encoding of term weighting in the signature file.
Reference: [11] <author> LIPMAN, D. J., and PEARSON, W. R. </author> <title> Rapid and sensitive protein similarity searches. </title> <address> Science 227 (March, </address> <year> 1985), </year> <pages> 1435-1441. </pages>
Reference-contexts: 1 Introduction The signature file approach has been investigated quite extensively in the last decade. It has been applied to a large variety of applications, including textual databases such as news databases [14], multi-attribute retrieval in relational databases [1, 8], multimedia office filing [4] and chemical databases for DNA matching <ref> [11] </ref>. The signature file method is also well suited for dynamic environments like the Internet. Signature file based retrieval systems can be updated very efficiently. Documents can be indexed and added to the signature files as they arrive.
Reference: [12] <author> RABITTI, F., Z., and TIBERIO, P. </author> <title> Dynamic partitioning of signature files. </title> <journal> ACM Trans. Inf. Syst. </journal> <volume> 9, </volume> <month> 4 (Oct., </month> <year> 1991), </year> <pages> 336-339. </pages>
Reference-contexts: Some recent research on signature files has addressed the improvement of search speed, as exemplified by the partitioned signature file approach, Lee and Leng [8, 9], Zezula et al. <ref> [12, 16] </ref>, Yoo et al.[5, 6]. In this paper, we will work along the line of Lee and Leng. We now give a brief review of their work for background information [8, 9]. <p> Any saving here comes absolutely free since it does not slow down the retrieval process. This kind of storage saving does not occur only in the three partitioning methods developed by Lee and Leng. It happens to other key based partitioning methods, like Quick F ilter <ref> [12] </ref>, Parametric Weighted Filter [3], as well. It is interesting to know how much space is saved by storing only one copy of the key. In this section, we will estimate the saving for the fixed-prefix partitioning. <p> It is interesting to know how much space is saved by storing only one copy of the key. In this section, we will estimate the saving for the fixed-prefix partitioning. The result should give us a good indication about storage savings about other methods, including Quick F ilter <ref> [12] </ref>, Parametric Weighted Filter [3]. For simplicity, we only consider the case where all partitions are generated. Thus the storage overhead is the storage of the partition keys, 2 k k, plus the storage overhead of the non-key part of signatures, (m k)n.
Reference: [13] <author> ROBERTS, C. S. </author> <title> Partial-match retrieval via the method of superimposed codes. </title> <booktitle> In Proceedings of the IEEE (Dec., 1979), </booktitle> <volume> vol. 67, </volume> <pages> pp. 1624-1642. </pages>
Reference-contexts: The third case is a false drop. False drops are text blocks which the signature file identifies as containing the query terms (i.e., a match) but indeed they don't. They can be eliminated by further comparing the query terms with the text blocks. C. S. Roberts <ref> [13] </ref> proved that the false drop probability is minimized when the probability of any bit position set to 1 is 0.5. Compared to inverted files, the signature file approach has two major advantages: * Its storage overhead can be controlled easily and in general is very low.
Reference: [14] <author> STANFILE, C., and KAHLE, B. </author> <title> Parallel free-text search on the connection machine system. </title> <journal> Commun. ACM 29, </journal> <month> 12 (Dec., </month> <year> 1986), </year> <pages> 1229-1239. </pages>
Reference-contexts: 1 Introduction The signature file approach has been investigated quite extensively in the last decade. It has been applied to a large variety of applications, including textual databases such as news databases <ref> [14] </ref>, multi-attribute retrieval in relational databases [1, 8], multimedia office filing [4] and chemical databases for DNA matching [11]. The signature file method is also well suited for dynamic environments like the Internet. Signature file based retrieval systems can be updated very efficiently. <p> Thus, it has low processing overhead on insertion. Since signatures are conceptually organized as a sequential file, it is easy to partition a signature file for parallel processing <ref> [14] </ref>. However signature file has serious drawbacks too. Its search speed is low compared to inverted files, since the signature file has to be searched exhaustively if signatures are organized in a single 2 sequential file.
Reference: [15] <author> WONG, W. Y. P. </author> <title> Design And Performance Evaluation Of Access Method And Heuristic Techniques For Implementing Document Ranking Strategies. </title> <type> Ph.D. dissertation, </type> <institution> The Ohio State University, </institution> <year> 1991. </year>
Reference-contexts: The signature file method is also well suited for dynamic environments like the Internet. Signature file based retrieval systems can be updated very efficiently. Documents can be indexed and added to the signature files as they arrive. Recent research results <ref> [10, 15] </ref> enable successful encoding of term weighting in the signature file.
Reference: [16] <author> Zezula, P. </author> <title> Linear hashing for signature files. </title> <booktitle> In Proceedings of the IFIP TC6 and TC8 International Symposium on Network Information Processing Systems (May, </booktitle> <year> 1989). </year> .[] 
Reference-contexts: Some recent research on signature files has addressed the improvement of search speed, as exemplified by the partitioned signature file approach, Lee and Leng [8, 9], Zezula et al. <ref> [12, 16] </ref>, Yoo et al.[5, 6]. In this paper, we will work along the line of Lee and Leng. We now give a brief review of their work for background information [8, 9].
References-found: 16

