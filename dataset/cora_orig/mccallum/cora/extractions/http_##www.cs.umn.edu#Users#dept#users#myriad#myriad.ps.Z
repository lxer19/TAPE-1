URL: http://www.cs.umn.edu/Users/dept/users/myriad/myriad.ps.Z
Refering-URL: http://www.cs.umn.edu/Users/dept/users/myriad/
Root-URL: http://www.cs.umn.edu
Title: Myriad: Design and Implementation of a Federated Database Prototype  
Author: Ee-Peng Lim, San-Yih Hwang, Jaideep Srivastava Dave Clements, M. Ganesh 
Note: All correspondence should be directed to Professor Jaideep Srivastava  
Address: 4-192 EE/CS Bldg, 200 Union St. SE Minneapolis, MN 55455  
Affiliation: Department of Computer Science, University of Minnesota  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Ahmed, P.D. Smedt, W. Du, W. Kent, M. Ketabchi, W.A. Litwin, A. Rafii, and M-C. Shan. </author> <title> The pegasus heterogeneous multidatabase system. </title> <booktitle> IEEE Computer, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: In Multidatabase [23], there is no integrated schema over local databases. The result of processing a global query is presented as a set of relations, each of which corresponds to the result of a local query decomposed from the global query. Multidatabase also does not provide transaction management. Pegasus <ref> [1] </ref> is an ongoing project at HP Labs which focuses on using an object-oriented data model to integrate local databases. While original plans did include transaction management, the actual approach taken by Pegasus has not been described in the literature.
Reference: [2] <author> C. Batini, M. Lenzerini, and S.B. Navathe. </author> <title> A comparative analysis of methodologies for database schema integration. </title> <journal> ACM Computing Surveys, </journal> <volume> 18(4), </volume> <month> December </month> <year> 1986. </year>
Reference-contexts: It acts as a testbed for validating and comparing solutions to various FDBS problems such as transaction management and query optimization. Lastly, it also provides an environment for realizing new federated database applications. Related work In the last decade a number of database integration projects focused on schema integration <ref> [33, 2] </ref> leading to some commercial products. However, few supported good query capabilities, and none supported transaction management. A number of FDBS projects are currently underway. The Multibase [9] project developed the concept of generalized hierarchies to integrate heterogeneous schemas.
Reference: [3] <author> R. K. Batra, M. Rusinkiewicz, and D. Georgakopoulos. </author> <title> Decentralized deadlock-free concur-rency control method for multidatabase transactions. </title> <booktitle> In Proc. of the 12'th Int'l Conf. on Distributed Computing Systems, </booktitle> <year> 1992. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [7, 6, 26, 27, 11, 18, 12, 25, 3, 15] </ref>. Only recently have researchers started to investigate the relative performance of the various proposed algorithms [14]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed. For those algorithms that employ distributed concurrency control (e.g. <ref> [3, 13] </ref>), each of them can be realized by the cooperation between FTM and FTAs. GCC, in this case, is not used. Many of the proposed algorithms put restrictions on the global transaction model so as to achieve consistent execution or prevent global deadlocks. <p> For example, some algorithms require a global transaction to declare the sites it will access at the begin-transaction statement (e.g. [6, 11, 25]. Others require no value dependency between subtransactions (e.g. <ref> [10, 3, 15] </ref>). While the applicability of restricted transaction models depends on the kinds of federated DB applications, our transaction management components can realize any of the restricted transaction models as well as the standard transaction model, in which no such restrictions are imposed.
Reference: [4] <author> B. Beizer. </author> <title> Software Testing Techniques. </title> <publisher> Van Nostrand Reinhold, </publisher> <year> 1983. </year> <month> 41 </month>
Reference-contexts: As mentioned earlier, we have built some tools for performing module testing. These tools helped us simulate the missing functional components and allowed us to perform white box testing <ref> [4] </ref>. Lastly, we note that the project schedule has helped us greatly in monitoring the progress of our development efforts. However, we also experienced several difficulties in keeping our actual development exactly on schedule.
Reference: [5] <author> Y. Breibart, W. Litwin, and A. Silberschatz. </author> <title> Deadlock problems in a multidatabase environ-ment. </title> <booktitle> In Proceedings of COMPCON, </booktitle> <year> 1991. </year>
Reference-contexts: Therefore, some mechanisms to detect and resolve global deadlocks are required. Unlike traditional distributed database systems, FDBSs cannot obtain the exact data conflict relationship among global transac 25 tions due to autonomy of participating databases. Thus, timeout is needed to establish the potential conflict relationship among global transactions <ref> [5, 28] </ref>. A timeout period is associated with each query submitted to the local DBMS.
Reference: [6] <author> Y. Breitbart and A. Silberschatz. </author> <title> Multidatabase update issues. </title> <booktitle> In Proc. of ACM SIGMOD Int'l. Conf. on Management of Data, </booktitle> <year> 1988. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [7, 6, 26, 27, 11, 18, 12, 25, 3, 15] </ref>. Only recently have researchers started to investigate the relative performance of the various proposed algorithms [14]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms for FDBS can be classified on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [7, 6, 26, 27, 11, 18, 12, 25, 15] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed. <p> GCC, in this case, is not used. Many of the proposed algorithms put restrictions on the global transaction model so as to achieve consistent execution or prevent global deadlocks. For example, some algorithms require a global transaction to declare the sites it will access at the begin-transaction statement (e.g. <ref> [6, 11, 25] </ref>. Others require no value dependency between subtransactions (e.g. [10, 3, 15]).
Reference: [7] <author> Y. Breitbart, A. Silberschatz, and G. Thompson. </author> <title> Update mechanism for multidatabase systems. </title> <journal> IEEE Data Engineering, </journal> <volume> 10(3), </volume> <year> 1987. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [7, 6, 26, 27, 11, 18, 12, 25, 3, 15] </ref>. Only recently have researchers started to investigate the relative performance of the various proposed algorithms [14]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms for FDBS can be classified on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [7, 6, 26, 27, 11, 18, 12, 25, 15] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed.
Reference: [8] <author> O.A. Bukhres, J. Chen, W. Du, and A.K. Elmagarmid. </author> <title> Interbase: An execution environment for heterogeneous software systems. </title> <booktitle> IEEE Computer, </booktitle> <month> August </month> <year> 1993. </year>
Reference-contexts: Multidatabase also does not provide transaction management. Pegasus [1] is an ongoing project at HP Labs which focuses on using an object-oriented data model to integrate local databases. While original plans did include transaction management, the actual approach taken by Pegasus has not been described in the literature. Interbase <ref> [8] </ref> provides a tool-based interface to execute global transactions without violating the autonomy of local DBMSs.
Reference: [9] <author> U. Dayal. </author> <booktitle> Query Processing in Multidatabase Systems, </booktitle> <pages> pages 81-108. </pages> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Related work In the last decade a number of database integration projects focused on schema integration [33, 2] leading to some commercial products. However, few supported good query capabilities, and none supported transaction management. A number of FDBS projects are currently underway. The Multibase <ref> [9] </ref> project developed the concept of generalized hierarchies to integrate heterogeneous schemas. It focused on query processing, but did not address transaction management issues. In Multidatabase [23], there is no integrated schema over local databases.
Reference: [10] <author> W. Du and A. Elmagarmid. </author> <title> Quasi serializability: A correctness criterion for global concurrency control in interbase. </title> <booktitle> In Proc. of the 15th Int'l Conf. on Very Large Data Bases, </booktitle> <year> 1989. </year>
Reference-contexts: For example, some algorithms require a global transaction to declare the sites it will access at the begin-transaction statement (e.g. [6, 11, 25]. Others require no value dependency between subtransactions (e.g. <ref> [10, 3, 15] </ref>). While the applicability of restricted transaction models depends on the kinds of federated DB applications, our transaction management components can realize any of the restricted transaction models as well as the standard transaction model, in which no such restrictions are imposed.
Reference: [11] <author> A. K. Elmagarmid and W. Du. </author> <title> A paradigm for concurrency control in heterogeneous distributed database system. </title> <booktitle> In Proc. of the 6th Int'l. Conf. on Data Engineering, </booktitle> <year> 1990. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [7, 6, 26, 27, 11, 18, 12, 25, 3, 15] </ref>. Only recently have researchers started to investigate the relative performance of the various proposed algorithms [14]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms for FDBS can be classified on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [7, 6, 26, 27, 11, 18, 12, 25, 15] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed. <p> GCC, in this case, is not used. Many of the proposed algorithms put restrictions on the global transaction model so as to achieve consistent execution or prevent global deadlocks. For example, some algorithms require a global transaction to declare the sites it will access at the begin-transaction statement (e.g. <ref> [6, 11, 25] </ref>. Others require no value dependency between subtransactions (e.g. [10, 3, 15]).
Reference: [12] <author> D. Georgakopoulos, M. Rusinkiewicz, and A. Sheth. </author> <title> Serializability of multidatabase transactions through forced local conflicts. </title> <booktitle> In Proc. of the 7th Int'l. Conf. on Data Engineering, </booktitle> <year> 1991. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [7, 6, 26, 27, 11, 18, 12, 25, 3, 15] </ref>. Only recently have researchers started to investigate the relative performance of the various proposed algorithms [14]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms for FDBS can be classified on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [7, 6, 26, 27, 11, 18, 12, 25, 15] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed.
Reference: [13] <author> J. Huang, S.-Y. Hwang, and J. Srivastava. </author> <title> Distributed forward optimistic concurrency control for federated database systems. </title> <type> Technical report, </type> <institution> Honeywell Technology Center, 3660 Technology Drive, Minneapolis, Minnesota, </institution> <year> 1992. </year>
Reference-contexts: The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed. For those algorithms that employ distributed concurrency control (e.g. <ref> [3, 13] </ref>), each of them can be realized by the cooperation between FTM and FTAs. GCC, in this case, is not used. Many of the proposed algorithms put restrictions on the global transaction model so as to achieve consistent execution or prevent global deadlocks.
Reference: [14] <author> J. Huang, S.-Y. Hwang, and J. Srivastava. </author> <title> Concurrency control in federated database systems: A performance study. </title> <booktitle> In Proc. of 7'th Int'l Conf. on Parallel and Distributed Computing Systems, </booktitle> <address> Las Vegas, Nevada, </address> <year> 1994. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed [7, 6, 26, 27, 11, 18, 12, 25, 3, 15]. Only recently have researchers started to investigate the relative performance of the various proposed algorithms <ref> [14] </ref>. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. Therefore, one of our design choices in transaction management was to make our architecture flexible to allow various algorithms to be implemented and tested.
Reference: [15] <author> S.-Y. Hwang, J. Huang, and J. Srivastava. </author> <title> Concurrency control in federated databases: A dynamic approach. </title> <booktitle> In Proc. of the 2nd Int'l Conf. on Information and Knowledge Management, </booktitle> <year> 1993. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [7, 6, 26, 27, 11, 18, 12, 25, 3, 15] </ref>. Only recently have researchers started to investigate the relative performance of the various proposed algorithms [14]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms for FDBS can be classified on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [7, 6, 26, 27, 11, 18, 12, 25, 15] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed. <p> For example, some algorithms require a global transaction to declare the sites it will access at the begin-transaction statement (e.g. [6, 11, 25]. Others require no value dependency between subtransactions (e.g. <ref> [10, 3, 15] </ref>). While the applicability of restricted transaction models depends on the kinds of federated DB applications, our transaction management components can realize any of the restricted transaction models as well as the standard transaction model, in which no such restrictions are imposed.
Reference: [16] <author> S.-Y. Hwang, J. Srivastava, and J. Huang. </author> <title> Incorporating admission control into concurrency control in federated databases. </title> <type> Technical Report 93-56, </type> <institution> Dept. Computer Sci., U. of Minnesota, MN, </institution> <year> 1993. </year>
Reference-contexts: The timeout period is then selected to allow most of the transactions to complete. If the system performance increases due to this adjustment, the timeout period is further tuned in the same direction. However, if the performance decreases then a correction is done in the opposite direction <ref> [16] </ref>. Communication Subsystem and Process Management The Communications Process (CP) in Myriad serves several purposes. It acts as a coordinator for distributed processing and manages the inter- process communication at different physical sites. Myriad can be started by a DBA from any of the participating sites in the system.
Reference: [17] <author> S.-Y. Hwang, J. Srivastava, and J. Li. </author> <title> Transaction recovery in federated autonomous databases. Distributed and Parallel Databases, </title> <journal> An International Journal, </journal> <volume> 2(2), </volume> <year> 1994. </year>
Reference-contexts: In case a local DBMS does not support prepare to commit state, the associated gateway simulates it by logging the write operations after a subtransaction enters its prepared state and re-submitting these operations if failure occurs. Several algorithms proposed in the literature (e.g. see <ref> [17] </ref>) can be used to control the resubmission. However, the simulated 2PC mechanisms do not come for free.
Reference: [18] <author> Y. Leu and A. K. Elmagarmid. </author> <title> A hierarchical approach to concurrency control for multi-databases. </title> <booktitle> In Proc. of the 2nd Int'l Symposium on Databases in Parallel and Distributed Systems, </booktitle> <year> 1990. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [7, 6, 26, 27, 11, 18, 12, 25, 3, 15] </ref>. Only recently have researchers started to investigate the relative performance of the various proposed algorithms [14]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms for FDBS can be classified on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [7, 6, 26, 27, 11, 18, 12, 25, 15] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed.
Reference: [19] <author> E.-P. Lim and J. Srivastava. </author> <title> Query optimization/processing in federated database systems. </title> <booktitle> In Conference of Information and Knowledge Management, </booktitle> <year> 1993. </year>
Reference-contexts: The design of Myriad query subsystem recognizes these limitations, and focuses on adopting useful heuristics to generate execution plans that reduce the amount of local data accesses. We also introduce an additional statistics collection step into query processing so that cost-based optimization can be performed <ref> [19] </ref>. The following describes in detail the design and implementation of functional components in the Myriad query subsystem. Gateway Myriad gateways support a relational interface to local DBs using SQL.
Reference: [20] <author> E.-P. Lim, J. Srivastava, and S.-Y. Hwang. </author> <title> An algebraic transformation framework for mul-tidatabase queries. Distributed and Parallel Databases, </title> <note> An International Journal, to appear, </note> <year> 1994. </year>
Reference-contexts: We have therefore developed an algebraic transformation framework involving outerjoin, GAD and other relational operations. The extended set of transformation rules explores new opportunities of query transformation by incorporating useful semantics about user-defined functions (of GAD operations) and query predicates (see <ref> [20] </ref> for a detailed discussion) Eventually, the FQM decomposes the optimized query execution plan into one or more query fragments. Each query fragment is assigned to either a FQA or gateway.
Reference: [21] <author> E.-P. Lim, J. Srivastava, S. Prabhakar, and J. Richardson. </author> <title> Entity identification problem in database integration. </title> <booktitle> Proc. of 9th IEEE Data Eng. Conf., </booktitle> <year> 1993. </year>
Reference-contexts: In Myriad, we have focused on two instance-level integration problems, namely the entity identification <ref> [21] </ref> and attribute value conflict [22] problems. The first is the problem of identifying record instances from different export databases which correspond to the same real-world entity. The second arises when the attribute values in different databases, modeling the same property of a real-world entity, do not match.
Reference: [22] <author> E.-P. Lim, J. Srivastava, and S. Shekhar. </author> <title> Resolving attribute incompatibility in database integration: An evidential reasoning approach. </title> <booktitle> Proc. of 10th IEEE Data Eng. Conf., </booktitle> <year> 1994. </year>
Reference-contexts: In Myriad, we have focused on two instance-level integration problems, namely the entity identification [21] and attribute value conflict <ref> [22] </ref> problems. The first is the problem of identifying record instances from different export databases which correspond to the same real-world entity. The second arises when the attribute values in different databases, modeling the same property of a real-world entity, do not match.
Reference: [23] <author> W. Litwin and A. Abdellatif. </author> <title> Multidatabase interoperability. </title> <booktitle> IEEE Computer, </booktitle> <month> December </month> <year> 1986. </year>
Reference-contexts: However, few supported good query capabilities, and none supported transaction management. A number of FDBS projects are currently underway. The Multibase [9] project developed the concept of generalized hierarchies to integrate heterogeneous schemas. It focused on query processing, but did not address transaction management issues. In Multidatabase <ref> [23] </ref>, there is no integrated schema over local databases. The result of processing a global query is presented as a set of relations, each of which corresponds to the result of a local query decomposed from the global query. Multidatabase also does not provide transaction management. <p> Federation users can freely use the data manipulation operations provided by the FDBS to integrate data from export relations in a manner that best suits their precise needs. An example of a loosely-coupled FDBS is the Multidatabase project <ref> [23] </ref>.
Reference: [24] <author> J. Martin. </author> <title> IDMS/R : concepts, design, and programming. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: Gateway Myriad gateways support a relational interface to local DBs using SQL. This design choice was made mainly because of the popularity of SQL gateways for non-relational DBMSs and relational but non-SQL DBMSs, e.g. IDMS/R <ref> [24] </ref>, Ingres [31], etc. By adopting SQL as the uniform interface to all local DBMSs, we achieve portability and interoperability in the Myriad design. Three kinds of database services are provided by Myriad gateways. They are access control, transaction services, and query services.
Reference: [25] <author> S. Mehrotra, R. Rastogi, H. F. Korth, and A. Silberschatz. </author> <title> The concurrency control problem in multidatabases: Characteristics and solutions. </title> <booktitle> In Proc. of ACM SIGMOD Int'l. Conf. on Management of Data, </booktitle> <year> 1992. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [7, 6, 26, 27, 11, 18, 12, 25, 3, 15] </ref>. Only recently have researchers started to investigate the relative performance of the various proposed algorithms [14]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms for FDBS can be classified on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [7, 6, 26, 27, 11, 18, 12, 25, 15] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed. <p> GCC, in this case, is not used. Many of the proposed algorithms put restrictions on the global transaction model so as to achieve consistent execution or prevent global deadlocks. For example, some algorithms require a global transaction to declare the sites it will access at the begin-transaction statement (e.g. <ref> [6, 11, 25] </ref>. Others require no value dependency between subtransactions (e.g. [10, 3, 15]).
Reference: [26] <author> C. Pu. Superdatabases: </author> <title> Transactions across database boundaries. </title> <journal> IEEE Data Engineering, </journal> <volume> 10(3), </volume> <year> 1987. </year>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [7, 6, 26, 27, 11, 18, 12, 25, 3, 15] </ref>. Only recently have researchers started to investigate the relative performance of the various proposed algorithms [14]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms for FDBS can be classified on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [7, 6, 26, 27, 11, 18, 12, 25, 15] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed.
Reference: [27] <author> C. Pu. </author> <title> Superdatabases for composition of heterogeneous databases. </title> <booktitle> In Proc. of the 4th Int'l Conf. on Data Engineering, </booktitle> <year> 1988. </year> <month> 43 </month>
Reference-contexts: Over the past five years, transaction management has become one of the most active research areas in FDBSs. Many algorithms have been proposed <ref> [7, 6, 26, 27, 11, 18, 12, 25, 3, 15] </ref>. Only recently have researchers started to investigate the relative performance of the various proposed algorithms [14]. However, such investigation is still in its early stage, and it is not clear how different algorithms behave in a real system. <p> Concurrency Control The proposed concurrency control algorithms for FDBS can be classified on the following two dimensions: * Centralized v.s. distributed control * Restricted v.s. general transaction model Most of the proposed algorithms use centralized control, e.g. <ref> [7, 6, 26, 27, 11, 18, 12, 25, 15] </ref>. The GCC process is responsible for monitoring the execution of global transactions. A centralized concurrency control algorithm can be realized by the GCC. Through the cooperation between GCC, FTM and FTA, consistent execution is guaranteed.
Reference: [28] <author> P. Scheuermann and H. Tung. </author> <title> A deadlock checkpointing scheme for multidatabase systems. </title> <booktitle> In Proc. of the 2nd Int'l Workshop on Research Issues on Data Engineering: Transaction and Query Processing, </booktitle> <year> 1992. </year>
Reference-contexts: Therefore, some mechanisms to detect and resolve global deadlocks are required. Unlike traditional distributed database systems, FDBSs cannot obtain the exact data conflict relationship among global transac 25 tions due to autonomy of participating databases. Thus, timeout is needed to establish the potential conflict relationship among global transactions <ref> [5, 28] </ref>. A timeout period is associated with each query submitted to the local DBMS.
Reference: [29] <author> P.G. Selinger, M.M. Astrahan, D.D. Chamberlin, R.A. Lorie, and T.G. Price. </author> <title> Access path selection in a relational database management system. </title> <booktitle> In Proc. of the ACM SIGMOD Conference, </booktitle> <pages> pages 23-34, </pages> <year> 1979. </year>
Reference-contexts: former is performed by 16 the FDBS while the latter by the local DBMSs. * Availability of statistical information and local cost model: The success of query optimization often depends on the accuracy of knowledge about the statistics on referenced relations and the execution cost model of the local DBMSs <ref> [29] </ref>. In a FDBS environment, some local DBMSs may not have, or may not supply (due to autonomy) sufficient information about database statistics, DBMS workloads, and cost models. This may seriously restrict the opportunities for performing global query optimization.
Reference: [30] <author> A.P. Sheth and J.A. Larson. </author> <title> Federated database systems for managing distributed heterogeneous, and autonomous databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3), </volume> <month> September </month> <year> 1990. </year>
Reference-contexts: In Myriad the schema mapping information for various federated schemas is represented in files. To reduce the difficulty of generating these files we are currently developing a graphical input tool for the DBAs. Loosely-coupled vs. Tightly-coupled FDBSs The Myriad integration framework supports both loosely- and tightly-coupled FDBS <ref> [30] </ref>. In a loosely-coupled FDBS, the federation DBAs do not attempt to integrate export relations from different local databases. Federation users can freely use the data manipulation operations provided by the FDBS to integrate data from export relations in a manner that best suits their precise needs.
Reference: [31] <author> D. Simonson and D. Benningfield. </author> <title> Ingres gateways: Transparent heterogeneous sql access. </title> <journal> Data Engineering Bulletin, </journal> <month> June </month> <year> 1990. </year>
Reference-contexts: Gateway Myriad gateways support a relational interface to local DBs using SQL. This design choice was made mainly because of the popularity of SQL gateways for non-relational DBMSs and relational but non-SQL DBMSs, e.g. IDMS/R [24], Ingres <ref> [31] </ref>, etc. By adopting SQL as the uniform interface to all local DBMSs, we achieve portability and interoperability in the Myriad design. Three kinds of database services are provided by Myriad gateways. They are access control, transaction services, and query services.
Reference: [32] <author> W. Richard Stevens. </author> <title> Unix Network Programming. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1990. </year>
Reference-contexts: CPs at each site are the only processes aware of the physical site to logical site mapping. Hence all communication between processes which are likely to be at different physical sites is done through the CP. We have used the Unix message queues <ref> [32] </ref> for communication between processes at the same physical site and stream sockets for inter-site communication in Myriad. Each process type (e.g. the FTM or FQA) has one designated incoming mailbox for messages. All processes at invocation will attach to the message queue for its corresponding process type.
Reference: [33] <author> G. Thomas, G. R. Thompson, C.-W. Chung, E. Barkmeyer, F. Carter, M. Templeton, S. Fox, and B. Hartman. </author> <title> Heterogeneous distributed database systems for production use. </title> <journal> ACM Computing Surveys, </journal> <volume> 22(3), </volume> <month> September </month> <year> 1990. </year>
Reference-contexts: It acts as a testbed for validating and comparing solutions to various FDBS problems such as transaction management and query optimization. Lastly, it also provides an environment for realizing new federated database applications. Related work In the last decade a number of database integration projects focused on schema integration <ref> [33, 2] </ref> leading to some commercial products. However, few supported good query capabilities, and none supported transaction management. A number of FDBS projects are currently underway. The Multibase [9] project developed the concept of generalized hierarchies to integrate heterogeneous schemas.
Reference: [34] <author> B.S. Tjan, L. Breslow, S. Dogru, V. Rajan, K. Rieck, J.R. Slagle, and M.O. Poliac. </author> <title> A data-flow graphical user interface for querying a scientific datab ase. </title> <booktitle> In 1993 IEEE Symposium on Visual Languages, </booktitle> <pages> pages 49-54, </pages> <address> Norway, </address> <month> Aug </month> <year> 1993. </year> <journal> IEEE Computer Society. </journal> <volume> 44 </volume>
Reference-contexts: In the next phase of Myriad research, we will implement and evaluate a number of query processing strategies and transaction management algorithms. We are currently integrating an application called Data Flow Query Language (DFQL) <ref> [34] </ref> with the Myriad framework. This tool has been designed to work as a visual data flow query interface to a database system, especially suited to science and engineering users.
References-found: 34

