URL: ftp://ftp.cs.unc.edu/pub/users/manocha/PAPERS/COLLISION/wafr98.ps.gz
Refering-URL: http://www.cs.unc.edu/~lin/papers.html
Root-URL: http://www.cs.unc.edu
Title: Spherical Shell: A Higher Order Bounding Volume for Fast Proximity Queries  
Author: Shankar Krishnan, Ming C. Lin, Dinesh Manocha, 
Address: Florham Park, NJ, USA  Chapel Hill, NC, USA  Chapel Hill, NC, USA  Chapel Hill, NC, USA  
Affiliation: AT&T Research Labs,  Amol Pattekar, University of North Carolina,  University of North Carolina,  University of North Carolina,  
Abstract: Hierarchical data structures have been widely used to design efficient algorithms for interference detection for robot motion planning and physically-based modeling applications. Most of the hierarchies involve use of bounding volumes which enclose the underlying geometry. These bounding volumes are used to test for interference or compute distance bounds between the underlying geometry. The efficiency of a hierarchy is directly proportional to the choice of a bounding volume. In this paper, we introduce spherical shells, a higher order bounding volume for fast proximity queries. Each shell corresponds to a portion of the volume between two concentric spheres. We present algorithms to compute tight fitting shells and fast overlap between two shells. Moreover, we show that spherical shells provide local cubic convergence to the underlying geometry. As a result, in many cases they provide faster algorithms for interference detection and distance computation as compared to earlier methods. We also describe an implementation and compare it with other hierarchies. 
Abstract-found: 1
Intro-found: 1
Reference: [AANJ94] <author> A.Garica-Alonso, N.Serrano, and J.Flaquer. </author> <title> Solving the collision detection problem. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 13(3) </volume> <pages> 36-43, </pages> <year> 1994. </year>
Reference-contexts: Hierarchical structures used for collision detection include cone trees, k-d trees and octrees [Sam89], sphere trees [Hub93, Qui94], trees based on S-bounds [Cam91] etc. Other spatial representations are based on BSP's and its extensions to multi-space partitions [WG91], spatial representations based on space-time bounds or four-dimensional testing <ref> [AANJ94, Cam90, Can86, Hub93] </ref> and many more. All of these hierarchical methods do very well in performing "rejection tests", whenever two objects are far apart.
Reference: [Bar90] <author> D. Baraff. </author> <title> Curved surfaces and coherence for non-penetrating rigid body simulation. </title> <journal> ACM Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 19-28, </pages> <year> 1990. </year>
Reference-contexts: However, they are fairly slow in practice and not adequate for most of online planning algorithms or interactive dynamic simulation. In applications involving rigid motion, geometric coherence has been utilized to design algorithms for convex polyhedra based on local features <ref> [Bar90, LC91, Lin93] </ref>. Local properties have been used in the earlier motion planning algorithms by [Don84, LPW79] when two objects come into contact. These algorithms utilize the spatial and temporal coherence between successive instances and work well in practice.
Reference: [BCG + 96] <author> G. Barequet, B. Chazelle, L. Guibas, J. Mitchell, and A. Tal. Boxtree: </author> <title> A hierarchical representation of surfaces in 3d. </title> <booktitle> In Proc. of Eurographics'96, </booktitle> <year> 1996. </year>
Reference-contexts: Many researchers have proposed hierarchical data structures based on other bounding volumes. More recently, Gottschalk et al. [GLM96], have presented a fast algorithm and a system, called RAPID, for interference detection based on oriented bounding boxes. Barequet et al. <ref> [BCG + 96] </ref> have also used oriented bounding boxes for computing hierarchical representations of surfaces in 3D and collision detection.
Reference: [BK88] <author> S. Bonner and R. B. Kelley. </author> <title> A representation scheme for rapid 3-d collision detection. </title> <booktitle> IEEE International Symposium on Intelligent Control, </booktitle> <pages> pages 320-325, </pages> <year> 1988. </year>
Reference-contexts: These problems have been well studied in the literature and numerous solutions have been proposed. Especially in the case of convex polytopes or objects that can be represented as union of convex polytopes, efficient algorithms have been presented in <ref> [GJK88, LC91, Cam97, BK88] </ref>. They work quite well for poly-gonized manipulators in a simple simulated environment. <p> This can cor S. Krishnan, A. Pattekar, M. C. Lin and D. Manocha respond to tens of CPU hours for assembly maintainability study on large CAD models [CL95]. The use of successive spherical approximations <ref> [BK88] </ref> was used for the rapid detection of collisions in a dynamic environment like a robot being tested for collisions with obstacles along a specified path. Recently, Gottschalk et al. [GLM96] have proposed the use of oriented bounding boxes (OBB's) for fast interference detection. <p> A representation scheme for rapid collision detection in a dynamic environment using successive spherical approximations (SSA) was discussed in <ref> [BK88] </ref>. The SSA representation is very similar to the spherical shells presented in this paper. However, there are a number of significant differences in the two approaches. They restrict the geometry to be topologically closed polygonal objects. We can deal with "polygonal soups" without any topology information.
Reference: [Cam90] <author> S. Cameron. </author> <title> Collision detection by four-dimensional intersection testing. </title> <booktitle> Proceedings of International Conference on Robotics and Automation, </booktitle> <pages> pages 291-302, </pages> <year> 1990. </year> <title> Spherical Shell: A Higher Order Bounding Volume for Fast Proximity Queries </title>
Reference-contexts: Hierarchical structures used for collision detection include cone trees, k-d trees and octrees [Sam89], sphere trees [Hub93, Qui94], trees based on S-bounds [Cam91] etc. Other spatial representations are based on BSP's and its extensions to multi-space partitions [WG91], spatial representations based on space-time bounds or four-dimensional testing <ref> [AANJ94, Cam90, Can86, Hub93] </ref> and many more. All of these hierarchical methods do very well in performing "rejection tests", whenever two objects are far apart.
Reference: [Cam91] <author> S. Cameron. </author> <title> Approximation hierarchies and s-bounds. </title> <booktitle> In Proceedings. Symposium on Solid Modeling Foundations and CAD/CAM Applications, </booktitle> <pages> pages 129-137, </pages> <address> Austin, TX, </address> <year> 1991. </year>
Reference-contexts: Hierarchical structures used for collision detection include cone trees, k-d trees and octrees [Sam89], sphere trees [Hub93, Qui94], trees based on S-bounds <ref> [Cam91] </ref> etc. Other spatial representations are based on BSP's and its extensions to multi-space partitions [WG91], spatial representations based on space-time bounds or four-dimensional testing [AANJ94, Cam90, Can86, Hub93] and many more. All of these hierarchical methods do very well in performing "rejection tests", whenever two objects are far apart.
Reference: [Cam97] <author> S. Cameron. </author> <title> Enhancing gjk: Computing minimum and penetration distance between convex polyhedra. </title> <booktitle> Proceedings of International Conference on Robotics and Automation, </booktitle> <year> 1997. </year>
Reference-contexts: These problems have been well studied in the literature and numerous solutions have been proposed. Especially in the case of convex polytopes or objects that can be represented as union of convex polytopes, efficient algorithms have been presented in <ref> [GJK88, LC91, Cam97, BK88] </ref>. They work quite well for poly-gonized manipulators in a simple simulated environment.
Reference: [Can86] <author> J. F. Canny. </author> <title> Collision detection for moving polyhedra. </title> <journal> IEEE Trans. PAMI, </journal> <volume> 8 </volume> <pages> 200-209, </pages> <year> 1986. </year>
Reference-contexts: Hierarchical structures used for collision detection include cone trees, k-d trees and octrees [Sam89], sphere trees [Hub93, Qui94], trees based on S-bounds [Cam91] etc. Other spatial representations are based on BSP's and its extensions to multi-space partitions [WG91], spatial representations based on space-time bounds or four-dimensional testing <ref> [AANJ94, Cam90, Can86, Hub93] </ref> and many more. All of these hierarchical methods do very well in performing "rejection tests", whenever two objects are far apart.
Reference: [CL90] <author> J. F. Canny and M. C. Lin. </author> <title> An opportunistic global path planner. </title> <booktitle> Proceedings of International Conference on Robotics and Automation, </booktitle> <pages> pages 1554-1559, </pages> <year> 1990. </year>
Reference-contexts: However, in several instances such as those encountered in maintainability study systems, objects are in close proximity of each other. As a result, a very significant fraction of the motion planning algorithm based on potential field approaches [Lat91, KLMR95] or global methods <ref> [CL90] </ref>, is spent on collision detection or distance computation routines. According to Latombe [Lat91], in many cases, 90% of the overall time of a path planner based on potential field techniques is spent on distance computation. This can cor S. Krishnan, A. Pattekar, M. C. Lin and D.
Reference: [CL95] <author> H. Chang and T. Li. </author> <title> Assembly maintainability study with motion planning. </title> <booktitle> In Proceedings of International Conference on Robotics and Automation, </booktitle> <year> 1995. </year>
Reference-contexts: They work quite well for poly-gonized manipulators in a simple simulated environment. However, in different applications using motion planning techniques, including virtual prototyping <ref> [CL95] </ref>, haptic rendering [RKK97] and molecular modeling [FKL + 97], models composed of tens or hundred of thousands of primitives (e.g. polygons, spline patches) are very common. <p> This can cor S. Krishnan, A. Pattekar, M. C. Lin and D. Manocha respond to tens of CPU hours for assembly maintainability study on large CAD models <ref> [CL95] </ref>. The use of successive spherical approximations [BK88] was used for the rapid detection of collisions in a dynamic environment like a robot being tested for collisions with obstacles along a specified path.
Reference: [CLMP95] <author> J. Cohen, M. Lin, D. Manocha, and M. Ponamgi. I-collide: </author> <title> An interactive and exact collision detection system for large-scale environments. </title> <booktitle> In Proc. of ACM Interactive 3D Graphics Conference, </booktitle> <pages> pages 189-196, </pages> <year> 1995. </year>
Reference-contexts: More recently, Cohen et al. have presented algorithms and a system, I-COLLIDE, based on spatial and temporal coherence, for large environments composed of multiple moving objects <ref> [CLMP95] </ref>. A number of hierarchies have been used for collision detection between general polygonal models. Typical examples of bounding volumes include axis-aligned boxes (of which cubes are a special case) and spheres, and they are chosen for to the simplicity of finding collision between two such volumes.
Reference: [DK90] <author> D. P. Dobkin and D. G. Kirkpatrick. </author> <title> Determining the separation of preprocessed polyhedra A unified approach. </title> <booktitle> In Proc. 17th Internat. Colloq. Automata Lang. Program., volume 443 of Lecture Notes Comput. Sci., </booktitle> <pages> pages 400-413. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Last, but not the least, the parameters required to represent the bounding volume is essentially different (they used a pyramidal structure, whereas we use a conical representation). Using hierarchical representations, an O (log 2 n) algorithm is given in <ref> [DK90] </ref> for polytope-polytope overlap problem, where n is the number of vertices. As Spherical Shell: A Higher Order Bounding Volume for Fast Proximity Queries for curved objects, many algorithms are presented for models whose trajectory can be expressed as a closed form function of time [HBZ90].
Reference: [Don84] <author> B. R. Donald. </author> <title> Motion planning with six degrees of freedom. </title> <type> Master's thesis, </type> <institution> MIT Artificial Intelligence Lab., </institution> <year> 1984. </year> <month> AI-TR-791. </month>
Reference-contexts: In applications involving rigid motion, geometric coherence has been utilized to design algorithms for convex polyhedra based on local features [Bar90, LC91, Lin93]. Local properties have been used in the earlier motion planning algorithms by <ref> [Don84, LPW79] </ref> when two objects come into contact. These algorithms utilize the spatial and temporal coherence between successive instances and work well in practice. Most environments consists of multiple objects and performing O (n 2 ) pairwise interference detection becomes a bottleneck for large n.
Reference: [Ede83] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections, part i. </title> <journal> Int. J. of Comput. Math, </journal> <volume> 13 </volume> <pages> 209-219, </pages> <year> 1983. </year>
Reference-contexts: Most environments consists of multiple objects and performing O (n 2 ) pairwise interference detection becomes a bottleneck for large n. Algorithms of complexity O (nlog 2 n + m) have been presented for spheres in [HSS83] and rectangular bounding boxes in <ref> [Ede83] </ref>, where m corresponds to the number of overlaps. More recently, Cohen et al. have presented algorithms and a system, I-COLLIDE, based on spatial and temporal coherence, for large environments composed of multiple moving objects [CLMP95]. A number of hierarchies have been used for collision detection between general polygonal models.
Reference: [FKL + 97] <author> P. Finn, L. Kavraki, J.-C. Latombe, R. Motwani, C. Shel-ton, S. Venkatasubramanian, and A. Yao. </author> <title> Rapid: randomized pharmacophore identification for drug design. </title> <booktitle> In Proc. 13th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 324-333, </pages> <year> 1997. </year>
Reference-contexts: They work quite well for poly-gonized manipulators in a simple simulated environment. However, in different applications using motion planning techniques, including virtual prototyping [CL95], haptic rendering [RKK97] and molecular modeling <ref> [FKL + 97] </ref>, models composed of tens or hundred of thousands of primitives (e.g. polygons, spline patches) are very common. Furthermore, in many CAD applications, the input models come as unstructured models or polygons soups [LMCG96] and it is very hard to decompose them into convex pieces.
Reference: [GJK88] <author> E. G. Gilbert, D. W. Johnson, and S. S. Keerthi. </author> <title> A fast procedure for computing the distance between objects in three-dimensional space. </title> <journal> IEEE J. Robotics and Automation, </journal> <volume> vol RA-4:193-203, </volume> <year> 1988. </year>
Reference-contexts: These problems have been well studied in the literature and numerous solutions have been proposed. Especially in the case of convex polytopes or objects that can be represented as union of convex polytopes, efficient algorithms have been presented in <ref> [GJK88, LC91, Cam97, BK88] </ref>. They work quite well for poly-gonized manipulators in a simple simulated environment. <p> Good theoretical and practical approaches based on linear complexity of the linear programming problem are known as well [Meg83, Sei90]. Using the Minkowski difference and convex optimization techniques, algorithms with expected linear time performance are also given in <ref> [GJK88] </ref> to compute the distance between convex polytopes and keep track of closest features. A representation scheme for rapid collision detection in a dynamic environment using successive spherical approximations (SSA) was discussed in [BK88]. The SSA representation is very similar to the spherical shells presented in this paper.
Reference: [GLM96] <author> S. Gottschalk, M. Lin, and D. Manocha. Obb-tree: </author> <title> A hierarchical structure for rapid interference detection. </title> <booktitle> In Proc. of ACM Siggraph'96, </booktitle> <pages> pages 171-180, </pages> <year> 1996. </year>
Reference-contexts: The use of successive spherical approximations [BK88] was used for the rapid detection of collisions in a dynamic environment like a robot being tested for collisions with obstacles along a specified path. Recently, Gottschalk et al. <ref> [GLM96] </ref> have proposed the use of oriented bounding boxes (OBB's) for fast interference detection. In terms of shape approximation, OBB's provide local quadratic convergence to the underlying geometry, as compared to linear convergence for hierarchies based on sphere or axis-aligned bounding boxes. <p> In such cases, their performance slows down considerably and they become a major bottleneck in the simulation. Many researchers have proposed hierarchical data structures based on other bounding volumes. More recently, Gottschalk et al. <ref> [GLM96] </ref>, have presented a fast algorithm and a system, called RAPID, for interference detection based on oriented bounding boxes. Barequet et al. [BCG + 96] have also used oriented bounding boxes for computing hierarchical representations of surfaces in 3D and collision detection. <p> N v : no. of bounding volume pair overlap tests C v : cost of testing two bounding volumes for overlap, N p : number of primitive pairs tested for interference, C p : cost of testing two primitives for interference, This equation differs from the cost function presented in <ref> [GLM96] </ref>. Here we include a separate term for updating each hierarchy based on objects' motion. For simpler hierarchies based on spheres or axis-aligned bounding boxes, C v is a small constant (6 to 10 arithmetic operations). For higher order bounding volumes, C v can be much higher. <p> For higher order bounding volumes, C v can be much higher. For example, for OBB's, S. Krishnan, A. Pattekar, M. C. Lin and D. Manocha the average value of C v is about 100 arithmetic operations <ref> [GLM96] </ref>. Since a higher order bounding volume provides a tighter fit to the enclosed geometry, N v and N p are relatively lower for them. The overall performance of different hierarchies varies with the geometric models and their configurations.
Reference: [HBZ90] <author> B. V. Herzen, A. H. Barr, and H. R. Zatz. </author> <title> Geometric collisions for time-dependent parametric surfaces. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 39-48, </pages> <year> 1990. </year>
Reference-contexts: As Spherical Shell: A Higher Order Bounding Volume for Fast Proximity Queries for curved objects, many algorithms are presented for models whose trajectory can be expressed as a closed form function of time <ref> [HBZ90] </ref>. These methods use either subdivision methods, interval arithmetic or bounds on derivatives and constrained minimization. However, they are fairly slow in practice and not adequate for most of online planning algorithms or interactive dynamic simulation.
Reference: [HKM95] <author> M. Held, J.T. Klosowski, and J.S.B. Mitchell. </author> <title> Evaluation of collision detection methods for virtual reality fly-throughs. </title> <booktitle> In Canadian Conference on Computational Geometry, </booktitle> <year> 1995. </year>
Reference-contexts: As a result, most planning algorithms use hierarchical techniques for proximity queries. Some of the simplest hierarchies are based on the use or variants of spheres or axis-aligned bounding boxes <ref> [Qui94, HKM95] </ref>. These bounding volumes are used for simple rejection tests and work well when the objects are far away. However, in several instances such as those encountered in maintainability study systems, objects are in close proximity of each other.
Reference: [HSS83] <author> J.E. Hopcroft, J.T. Schwartz, and M. Sharir. </author> <title> Efficient detection of intersections among spheres. </title> <journal> The International Journal of Robotics Research, </journal> <volume> 2(4) </volume> <pages> 77-80, </pages> <year> 1983. </year>
Reference-contexts: Most environments consists of multiple objects and performing O (n 2 ) pairwise interference detection becomes a bottleneck for large n. Algorithms of complexity O (nlog 2 n + m) have been presented for spheres in <ref> [HSS83] </ref> and rectangular bounding boxes in [Ede83], where m corresponds to the number of overlaps. More recently, Cohen et al. have presented algorithms and a system, I-COLLIDE, based on spatial and temporal coherence, for large environments composed of multiple moving objects [CLMP95].
Reference: [Hub93] <author> P. M. Hubbard. </author> <title> Interactive collision detection. </title> <booktitle> In Proceedings of IEEE Symposium on Research Frontiers in Virtual Reality, </booktitle> <month> October </month> <year> 1993. </year>
Reference-contexts: Typical examples of bounding volumes include axis-aligned boxes (of which cubes are a special case) and spheres, and they are chosen for to the simplicity of finding collision between two such volumes. Hierarchical structures used for collision detection include cone trees, k-d trees and octrees [Sam89], sphere trees <ref> [Hub93, Qui94] </ref>, trees based on S-bounds [Cam91] etc. Other spatial representations are based on BSP's and its extensions to multi-space partitions [WG91], spatial representations based on space-time bounds or four-dimensional testing [AANJ94, Cam90, Can86, Hub93] and many more. <p> Hierarchical structures used for collision detection include cone trees, k-d trees and octrees [Sam89], sphere trees [Hub93, Qui94], trees based on S-bounds [Cam91] etc. Other spatial representations are based on BSP's and its extensions to multi-space partitions [WG91], spatial representations based on space-time bounds or four-dimensional testing <ref> [AANJ94, Cam90, Can86, Hub93] </ref> and many more. All of these hierarchical methods do very well in performing "rejection tests", whenever two objects are far apart.
Reference: [KHM + 96] <author> J. Klosowski, M. Held, J.S.B. Mitchell, H. Sowizral, and K. Zikan. </author> <title> Efficient collision detection using bounding volume hierarchies of k-dops. </title> <booktitle> In Siggraph'96 Visual Proceedings, </booktitle> <year> 1996. </year>
Reference-contexts: Barequet et al. [BCG + 96] have also used oriented bounding boxes for computing hierarchical representations of surfaces in 3D and collision detection. Klosowski et al. <ref> [KHM + 96] </ref> have used bounding volumes corresponding to k-DOP's for fast collision detection. 3 Overview Any interference detection algorithm based on hierarchical data structures involves computing a hierarchical decomposition of the model and bounding volumes corresponding to each node of the tree.
Reference: [KLMR95] <author> L. E. Kavraki, J.-C. Latombe, R. Motwani, and P. Ragha-van. </author> <title> Randomized query processing in robot path planning. </title> <booktitle> In Proc. 27th Annu. ACM Sympos. Theory Comput., </booktitle> <pages> pages 353-362, </pages> <year> 1995. </year>
Reference-contexts: However, in several instances such as those encountered in maintainability study systems, objects are in close proximity of each other. As a result, a very significant fraction of the motion planning algorithm based on potential field approaches <ref> [Lat91, KLMR95] </ref> or global methods [CL90], is spent on collision detection or distance computation routines. According to Latombe [Lat91], in many cases, 90% of the overall time of a path planner based on potential field techniques is spent on distance computation. This can cor S. Krishnan, A. Pattekar, M. C.
Reference: [KPLM97] <author> S. Krishnan, A. Pattekar, M. Lin, and D. Manocha. </author> <title> Spherical shells: A higher-order bounding volume for fast proximity queries. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of North Carolina, </institution> <year> 1997. </year>
Reference-contexts: We use Sturm sequences [SB93] to evaluate the signs of these polynomials without actually performing root computation. We omit many of the details here. But a detailed version of the test can be found in <ref> [KPLM97] </ref>. 7 Implementation and Performance The software for the collision detection library was written in C++. The main data structure is a "shell" which holds all the required parameters for a shell.
Reference: [Lat91] <author> J.C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: However, in several instances such as those encountered in maintainability study systems, objects are in close proximity of each other. As a result, a very significant fraction of the motion planning algorithm based on potential field approaches <ref> [Lat91, KLMR95] </ref> or global methods [CL90], is spent on collision detection or distance computation routines. According to Latombe [Lat91], in many cases, 90% of the overall time of a path planner based on potential field techniques is spent on distance computation. This can cor S. Krishnan, A. Pattekar, M. C. <p> As a result, a very significant fraction of the motion planning algorithm based on potential field approaches [Lat91, KLMR95] or global methods [CL90], is spent on collision detection or distance computation routines. According to Latombe <ref> [Lat91] </ref>, in many cases, 90% of the overall time of a path planner based on potential field techniques is spent on distance computation. This can cor S. Krishnan, A. Pattekar, M. C. Lin and D.
Reference: [Law74] <author> C. Lawson. </author> <title> Solving Least Squares Problems. </title> <publisher> Prentice-Hall, </publisher> <year> 1974. </year>
Reference-contexts: In our case, we choose this approximation to be the least squares fit sphere for all the vertices of the input model. We formulate a set of equations for this least squared problem and obtain a solution using Singular Value Decomposition (SVD) <ref> [Law74] </ref>. We now present the SVD formulation. The general equation of a sphere with center (c x ; c y ; c z ) and radius r is (x c x ) 2 + (y c y ) 2 + (z c z ) 2 r 2 = 0.
Reference: [LC91] <author> M.C. Lin and John F. Canny. </author> <title> Efficient algorithms for incremental distance computation. </title> <booktitle> In IEEE Conference on Robotics and Automation, </booktitle> <pages> pages 1008-1014, </pages> <year> 1991. </year>
Reference-contexts: These problems have been well studied in the literature and numerous solutions have been proposed. Especially in the case of convex polytopes or objects that can be represented as union of convex polytopes, efficient algorithms have been presented in <ref> [GJK88, LC91, Cam97, BK88] </ref>. They work quite well for poly-gonized manipulators in a simple simulated environment. <p> However, they are fairly slow in practice and not adequate for most of online planning algorithms or interactive dynamic simulation. In applications involving rigid motion, geometric coherence has been utilized to design algorithms for convex polyhedra based on local features <ref> [Bar90, LC91, Lin93] </ref>. Local properties have been used in the earlier motion planning algorithms by [Don84, LPW79] when two objects come into contact. These algorithms utilize the spatial and temporal coherence between successive instances and work well in practice.
Reference: [Lin93] <author> M.C. Lin. </author> <title> Efficient Collision Detection for Animation and Robotics. </title> <type> PhD thesis, </type> <institution> Department of Electrical Engineering and Computer Science, University of California, Berkeley, </institution> <month> De-cember </month> <year> 1993. </year>
Reference-contexts: However, they are fairly slow in practice and not adequate for most of online planning algorithms or interactive dynamic simulation. In applications involving rigid motion, geometric coherence has been utilized to design algorithms for convex polyhedra based on local features <ref> [Bar90, LC91, Lin93] </ref>. Local properties have been used in the earlier motion planning algorithms by [Don84, LPW79] when two objects come into contact. These algorithms utilize the spatial and temporal coherence between successive instances and work well in practice.
Reference: [LMCG96] <author> M. Lin, D. Manocha, J. Cohen, and S. Gottschalk. </author> <title> Collision detection: Algorithms and applications. In Algorithms for Robot Motion and Manipulation, pages 129-142. A K Peters, </title> <year> 1996. </year>
Reference-contexts: Furthermore, in many CAD applications, the input models come as unstructured models or polygons soups <ref> [LMCG96] </ref> and it is very hard to decompose them into convex pieces. As a result, most planning algorithms use hierarchical techniques for proximity queries. Some of the simplest hierarchies are based on the use or variants of spheres or axis-aligned bounding boxes [Qui94, HKM95].
Reference: [LPW79] <author> T. Lozano-Perez and M. Wesley. </author> <title> An algorithm for planning collision-free paths among polyhedral obstacles. </title> <journal> Comm. ACM, </journal> <volume> 22(10) </volume> <pages> 560-570, </pages> <year> 1979. </year>
Reference-contexts: In applications involving rigid motion, geometric coherence has been utilized to design algorithms for convex polyhedra based on local features [Bar90, LC91, Lin93]. Local properties have been used in the earlier motion planning algorithms by <ref> [Don84, LPW79] </ref> when two objects come into contact. These algorithms utilize the spatial and temporal coherence between successive instances and work well in practice. Most environments consists of multiple objects and performing O (n 2 ) pairwise interference detection becomes a bottleneck for large n.
Reference: [Meg83] <author> N. Megiddo. </author> <title> Linear-time algorithms for linear programming in r 3 and related problems. </title> <journal> SIAM J. Computing, </journal> <volume> 12:pp. </volume> <pages> 759-776, </pages> <year> 1983. </year>
Reference-contexts: Most of the earlier work in robotics and in computational geometry has focussed on collision detection between convex polytopes. Good theoretical and practical approaches based on linear complexity of the linear programming problem are known as well <ref> [Meg83, Sei90] </ref>. Using the Minkowski difference and convex optimization techniques, algorithms with expected linear time performance are also given in [GJK88] to compute the distance between convex polytopes and keep track of closest features.
Reference: [O'N66] <author> B. O'Neill. </author> <title> Elementary Differential Geometry. </title> <publisher> Academic Press, </publisher> <address> London, UK, </address> <year> 1966. </year>
Reference-contexts: It is easily seen that these conditions can be achieved by a simple rigid transformation of M. To proceed further, we make use of a result from classical differential geometry which we state here without proof. Theorem 1 <ref> [O'N66] </ref> There exists a small neighborhood W p of p 2 M such that the map : (x; y; z) ) (x; y) is a one-to-one map with its image being an open set V p R 2 . Moreover the map is a diffeomorphism.
Reference: [Qui94] <author> S. Quinlan. </author> <title> Efficient distance computation between non-convex objects. </title> <booktitle> In Proceedings of International Conference on Robotics and Automation, </booktitle> <pages> pages 3324-3329, </pages> <year> 1994. </year>
Reference-contexts: As a result, most planning algorithms use hierarchical techniques for proximity queries. Some of the simplest hierarchies are based on the use or variants of spheres or axis-aligned bounding boxes <ref> [Qui94, HKM95] </ref>. These bounding volumes are used for simple rejection tests and work well when the objects are far away. However, in several instances such as those encountered in maintainability study systems, objects are in close proximity of each other. <p> Typical examples of bounding volumes include axis-aligned boxes (of which cubes are a special case) and spheres, and they are chosen for to the simplicity of finding collision between two such volumes. Hierarchical structures used for collision detection include cone trees, k-d trees and octrees [Sam89], sphere trees <ref> [Hub93, Qui94] </ref>, trees based on S-bounds [Cam91] etc. Other spatial representations are based on BSP's and its extensions to multi-space partitions [WG91], spatial representations based on space-time bounds or four-dimensional testing [AANJ94, Cam90, Can86, Hub93] and many more.
Reference: [RKK97] <author> D.C. Ruspini, K. Kolarov, and O. Khatib. </author> <title> The haptic display of complex graphical environments. </title> <booktitle> Proc. of ACM SIG-GRAPH, </booktitle> <pages> pages 345-352, </pages> <year> 1997. </year>
Reference-contexts: They work quite well for poly-gonized manipulators in a simple simulated environment. However, in different applications using motion planning techniques, including virtual prototyping [CL95], haptic rendering <ref> [RKK97] </ref> and molecular modeling [FKL + 97], models composed of tens or hundred of thousands of primitives (e.g. polygons, spline patches) are very common.
Reference: [Sam89] <author> H. Samet. </author> <title> Spatial Data Structures: Quadtree, Octrees and Other Hierarchical Methods. </title> <publisher> Addison Wesley, </publisher> <year> 1989. </year>
Reference-contexts: Typical examples of bounding volumes include axis-aligned boxes (of which cubes are a special case) and spheres, and they are chosen for to the simplicity of finding collision between two such volumes. Hierarchical structures used for collision detection include cone trees, k-d trees and octrees <ref> [Sam89] </ref>, sphere trees [Hub93, Qui94], trees based on S-bounds [Cam91] etc. Other spatial representations are based on BSP's and its extensions to multi-space partitions [WG91], spatial representations based on space-time bounds or four-dimensional testing [AANJ94, Cam90, Can86, Hub93] and many more.
Reference: [SB93] <author> J. Stoer and R. </author> <title> Bulirsch. Introduction to Numerical Analysis. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The tests described previously carries through to this case as well. However, the signed expression we are evaluating changes to a (quartic) polynomial in a given range. We use Sturm sequences <ref> [SB93] </ref> to evaluate the signs of these polynomials without actually performing root computation. We omit many of the details here. But a detailed version of the test can be found in [KPLM97]. 7 Implementation and Performance The software for the collision detection library was written in C++.
Reference: [Sei90] <author> R. Seidel. </author> <title> Linear programming and convex hulls made easy. </title> <booktitle> In Proc. 6th Ann. ACM Conf. on Computational Geometry, </booktitle> <pages> pages 211-215, </pages> <address> Berkeley, California, </address> <year> 1990. </year>
Reference-contexts: Most of the earlier work in robotics and in computational geometry has focussed on collision detection between convex polytopes. Good theoretical and practical approaches based on linear complexity of the linear programming problem are known as well <ref> [Meg83, Sei90] </ref>. Using the Minkowski difference and convex optimization techniques, algorithms with expected linear time performance are also given in [GJK88] to compute the distance between convex polytopes and keep track of closest features.
Reference: [SWZ89] <author> T.W. Sederberg, S. White, and A. Zundel. </author> <title> Fat arcs: A bounding region with cubic convergence. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 6 </volume> <pages> 205-218, </pages> <year> 1989. </year>
Reference: [WG91] <author> W.Bouma and G.Vanecek. </author> <title> Collision detection and analysis in a physically based simulation. </title> <booktitle> Proceedings Eurographics workshop on animation and simulation, </booktitle> <pages> pages 191-203, </pages> <year> 1991. </year>
Reference-contexts: Hierarchical structures used for collision detection include cone trees, k-d trees and octrees [Sam89], sphere trees [Hub93, Qui94], trees based on S-bounds [Cam91] etc. Other spatial representations are based on BSP's and its extensions to multi-space partitions <ref> [WG91] </ref>, spatial representations based on space-time bounds or four-dimensional testing [AANJ94, Cam90, Can86, Hub93] and many more. All of these hierarchical methods do very well in performing "rejection tests", whenever two objects are far apart.
Reference: [ZL91] <author> David Zhu and Jean-Claude Latombe. </author> <title> New heuristic algorithms for efficient hierarchical path planning. </title> <journal> IEEE Trans. Robot. Autom., </journal> <volume> 7 </volume> <pages> 9-20, </pages> <year> 1991. </year>
References-found: 40

