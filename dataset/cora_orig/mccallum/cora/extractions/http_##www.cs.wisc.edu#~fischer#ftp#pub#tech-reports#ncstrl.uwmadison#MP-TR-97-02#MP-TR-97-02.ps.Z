URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/MP-TR-97-02/MP-TR-97-02.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/MP-TR-97-02/
Root-URL: http://www.cs.wisc.edu
Title: Minimum-Perimeter Domain Assignment  
Author: Jonathan Yackel Robert R. Meyer Ioannis Christou 
Abstract: For certain classes of problems defined over two-dimensional domains with grid structure, optimization problems involving the assignment of grid cells to processors present a nonlinear network model for the problem of partitioning tasks among processors so as to minimize interprocessor communication. Minimizing interprocessor communication in this context is shown to be equivalent to tiling the domain so as to minimize total tile perimeter, where each tile corresponds to the collection of tasks assigned to some processor. A tight lower bound on the perimeter of a tile as a function of its area is developed. We then show how to generate minimum-perimeter tiles. By using assignments corresponding to near-rectangular minimum-perimeter tiles, closed form solutions are developed for certain classes of domains. We conclude with computational results with parallel high-level genetic algorithms that have produced good (and sometimes provably optimal) solutions for very large perimeter minimization problems.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.J. Chen, R.R. Meyer, and J. Yackel. </author> <title> A genetic algorithm for diversity minimization and its parallel implementation. </title> <booktitle> In Proceedings of the Fifth International Conference on Genetic Algorithms, </booktitle> <pages> pages 163-170. </pages> <publisher> Morgan Kaufman, </publisher> <year> 1993. </year>
Reference-contexts: The computing time varied over the test problems from 0.4 seconds to 6 seconds per GA iteration. Within 100 iterations, a solution within at most 4% of the optimal value was computed for each of the test problems studied. For complete details see <ref> [1] </ref>.
Reference: [2] <author> I. T. Christou and R. R. Meyer. </author> <title> Optimal equi-partition of rectangular domains for parallel computation. </title> <journal> Journal of Global Optimization, </journal> <volume> 8 </volume> <pages> 15-34, </pages> <year> 1996. </year>
Reference-contexts: Moreover, the subset of optimal shapes in the library is sufficiently large so as to yield optimal or near optimal solutions for many cases (see the results of the previous section and <ref> [2] </ref>). Finally, the number of configurations in the library is of order A p , and, thus, even in the case A p = 1000 (the largest area in the test problems below), the library contains only 9 elements. <p> than this, neither the solution time nor quality was comparable to that attained with the GA, and time limitations (we allowed problems to run for not more than 6 hours) prevented GRASP from running problems on grids larger than 13 fi 13. (Details of this computational comparison are given in <ref> [2] </ref>.) We have also compared our GA against the popular spectral partitioning algorithm [14] and the geometric mesh partitioning method [13]. We obtained MATLAB versions of both algorithms from the ftp site referenced in [7].
Reference: [3] <author> R. DeLeone and M. A. Tork-Roth. </author> <title> Massively parallel solution of quadratic programs via successive overrelaxation. </title> <type> Computer Sciences Technical Report 1041, </type> <institution> University of Wisconsin - Madison, Madison, WI, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: Examples include the problem of determining the characteristics of fluid flow [8], solving obstacle problems using parallel successive overrelaxation <ref> [3] </ref>, and edge detection in computer vision [16]. We assume initially that all grid cells are squares of uniform size as in figure 1, and that there is a task associated with each cell that uses only its own data and values from neighboring cells that share an edge.
Reference: [4] <author> M. Garey and D. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness, pages 60-62. W.H. </title> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: For example, given a domain consisting of 25 cells, 5 processors, and a load of 5 for each processor, there are more than 623 fi 10 12 possible assignments. The processor assignment problem is related to the graph partition problem which is NP-complete (see Garey and Johnson, page 209 <ref> [4] </ref>). Yackel showed that the problem is NP-hard if the domains are allowed to be arbitrary rectilinear grids [17].
Reference: [5] <author> S. Ghandeharizadeh, G. L. Schultz, R. R. Meyer, and J. Yackel. </author> <title> Optimal processor assignment for parallel database design. </title> <booktitle> In Proceedings of the Fifth SIAM Conference on Parallel Processing for Scientific Computing. </booktitle> <publisher> SIAM, </publisher> <year> 1992. </year>
Reference-contexts: The minimum diversity problem presented in <ref> [5] </ref> is a parallel database design problem with the same assignment constraints as the minimum perimeter problem, but has a different objective function. In this database application [5], we wish to assign grid cells of a rectangular domain to processors in order to minimize the total number of distinct processors that <p> The minimum diversity problem presented in <ref> [5] </ref> is a parallel database design problem with the same assignment constraints as the minimum perimeter problem, but has a different objective function. In this database application [5], we wish to assign grid cells of a rectangular domain to processors in order to minimize the total number of distinct processors that appear in the slices of the grid. <p> corresponding to unit charges for the appearance of a processor (any number of times) in a slice; the minimum perimeter problem objective, on the other hand, is most directly modeled as a sum of quadratic terms corresponding to the assignment of adjacent cells to different processors.) In Ghandeharizadeh et al <ref> [5] </ref> we considered a general D-dimensional assignment problem and showed that minimizing diversity is equivalent to minimizing the sum of the "D-perimeters" for the processors, where the D-perimeter for a processor is defined to be the number of (D 1)-dimensional slices in which a processor appears.
Reference: [6] <author> S. Ghandeharizadeh, G. L. Schultz, R. R. Meyer, and J. Yackel. </author> <title> Optimal balanced assignments and a parallel database application. </title> <journal> ORSA J. on Computing, </journal> <volume> 5 </volume> <pages> 151-167, </pages> <year> 1993. </year>
Reference-contexts: In general, for large areas, the latter set contains so many elements that it would be impractical to generate all of them anyway. For the two-dimensional case considered here, a result of Ghandeharizadeh et al <ref> [6] </ref> (lemma 1), and a result of Rosenberg [15] (lemma 4.3), both yield an alternate bound on the semi-perimeter S: S 2 A 1=2 : This bound is equivalent to S fl (A) (see Yackel and Meyer [18]), and by the preceding construction is therefore attained by appropriate configurations for each
Reference: [7] <author> J. R. Gilbert, G. L. Miller, and S. H. Teng. </author> <title> Geometric mesh partitioning: Implementation and experiments. </title> <booktitle> In Proceedings of the 9th International Symposium on Parallel Processing, </booktitle> <pages> pages 418-427, </pages> <year> 1995. </year>
Reference-contexts: We obtained MATLAB versions of both algorithms from the ftp site referenced in <ref> [7] </ref>. Both methods were 18 1 1 1 2 2 3 3 1 1 2 2 3 3 3 4 4 4 5 5 5 5 6 6 6 7 7 7 7 run on a uniprocessor Sun SPARCstation 20.
Reference: [8] <author> W. D. Gropp and D. E. Keyes. </author> <title> Domain decomposition methods in computational fluid dynamics. </title> <type> Technical Report 91-20, </type> <institution> ICASE, </institution> <month> February </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Many computations performed by systems of parallel processors involve a collection of tasks which are related by a rectangular grid structure (i.e., as in figure 1, each task has at most four "neighbor" tasks). Examples include the problem of determining the characteristics of fluid flow <ref> [8] </ref>, solving obstacle problems using parallel successive overrelaxation [3], and edge detection in computer vision [16].
Reference: [9] <author> B. W. Kernighan and S. Lin. </author> <title> An effective heuristic procedure for partitioning graphs. </title> <journal> Bell Systems Tech. Journal, </journal> <pages> pages 291-308, </pages> <month> February </month> <year> 1970. </year>
Reference-contexts: In stage 2 the heuristic performs a local search of the problem space in a fashion similar to the Kernighan - Lin heuristic <ref> [9] </ref>. Using the cell-processor assignment from stage 1 as its starting point, it selects pairs of cells and evaluates the change in objective that would result from swapping the processors in the two cells. If the swap does not worsen the objective, then the cell assignments are interchanged.
Reference: [10] <author> Y. Li, P. M. Pardalos, and M. G. C. Resende. </author> <title> A grasp for the qap. </title> <editor> In P. M. Pardalos and H. Wolkowicz, editors, </editor> <title> Quadratic Assignment and Related Problems. </title> <journal> DIMACS Series Vol. </journal> <volume> 16, </volume> <publisher> American Mathematical Society, </publisher> <year> 1994. </year>
Reference-contexts: A subset of these test problems (formulated as quadratic assignment problems) was also run on a GRASP algorithm (see <ref> [10] </ref>) for general quadratic assignment problems.
Reference: [11] <author> K. Y. Lin. </author> <title> Exact solution of the convex polygon perimeter and area generating function. </title> <journal> J. Phys. A. Math Gen., </journal> <volume> 24 </volume> <pages> 2411-2417, </pages> <year> 1991. </year>
Reference-contexts: Department, University of Wisconsin, Madison, Wisconsin 53706. 1 1 1 1 8 8 8 2 2 2 7 7 7 3 3 3 4 4 5 5 6 6 6 The term "tile" will refer to a connected group of cells assigned to the same processor. (In the combinatorics literature <ref> [11, 12] </ref>, such a configuration is called a polyomino.) We say a set of cells is connected if for every pair of cells c i ; c j there is a path of cells in the set from c i to c j such that adjacent cells on the path share <p> This construction technique is a special case of a technique to be described in x4.2 that may be used to construct all minimum-perimeter configurations of a given area. There is a considerable literature (see for example <ref> [11, 12] </ref> and the references therein) dealing with the generating function approach for developing expressions for the exact number of "convex polyominoes" with various properties.
Reference: [12] <author> M. Bousquet Melou. </author> <title> Codage des polyominos convexes et equation pour l'enumeration suivant l'aire. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 48 </volume> <pages> 21-43, </pages> <year> 1994. </year>
Reference-contexts: Department, University of Wisconsin, Madison, Wisconsin 53706. 1 1 1 1 8 8 8 2 2 2 7 7 7 3 3 3 4 4 5 5 6 6 6 The term "tile" will refer to a connected group of cells assigned to the same processor. (In the combinatorics literature <ref> [11, 12] </ref>, such a configuration is called a polyomino.) We say a set of cells is connected if for every pair of cells c i ; c j there is a path of cells in the set from c i to c j such that adjacent cells on the path share <p> This construction technique is a special case of a technique to be described in x4.2 that may be used to construct all minimum-perimeter configurations of a given area. There is a considerable literature (see for example <ref> [11, 12] </ref> and the references therein) dealing with the generating function approach for developing expressions for the exact number of "convex polyominoes" with various properties.
Reference: [13] <author> G. L. Miller, S. H. Teng, W. Thurston, and S. A. Vavasis. </author> <title> Automatic mesh partitioning. </title> <editor> In A. George, J. R. Gilbert, and J. W. H. Liu, editors, </editor> <title> Graph Theory and Sparse Matrix Computation. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: allowed problems to run for not more than 6 hours) prevented GRASP from running problems on grids larger than 13 fi 13. (Details of this computational comparison are given in [2].) We have also compared our GA against the popular spectral partitioning algorithm [14] and the geometric mesh partitioning method <ref> [13] </ref>. We obtained MATLAB versions of both algorithms from the ftp site referenced in [7].
Reference: [14] <author> A. Pothen, H. D. Simon, and K. P. Liu. </author> <title> Partitioning sparse matrices with eigenvectors of graphs. </title> <journal> SIAM Journal on Matrix Analysis and Applications, </journal> <volume> 11 </volume> <pages> 430-452, </pages> <year> 1990. </year>
Reference-contexts: with the GA, and time limitations (we allowed problems to run for not more than 6 hours) prevented GRASP from running problems on grids larger than 13 fi 13. (Details of this computational comparison are given in [2].) We have also compared our GA against the popular spectral partitioning algorithm <ref> [14] </ref> and the geometric mesh partitioning method [13]. We obtained MATLAB versions of both algorithms from the ftp site referenced in [7].
Reference: [15] <author> A. L. Rosenberg. </author> <title> Encoding data structures in trees. </title> <journal> JACM, </journal> <volume> 26(4) </volume> <pages> 668-689, </pages> <month> October </month> <year> 1979. </year>
Reference-contexts: perimeter of all configurations of A cells. (We show below that S fl (A) is attained by a slice-convex tile, so that by slice-convexity (lemma 2) its perimeter is 2S fl (A).) A result equivalent to proposition 4 appeared in the context of graph embedding in a paper by Rosenberg <ref> [15] </ref>. We restate the result here in terms of perimeter and provide a simpler and more intuitive proof. <p> In general, for large areas, the latter set contains so many elements that it would be impractical to generate all of them anyway. For the two-dimensional case considered here, a result of Ghandeharizadeh et al [6] (lemma 1), and a result of Rosenberg <ref> [15] </ref> (lemma 4.3), both yield an alternate bound on the semi-perimeter S: S 2 A 1=2 : This bound is equivalent to S fl (A) (see Yackel and Meyer [18]), and by the preceding construction is therefore attained by appropriate configurations for each value of A.
Reference: [16] <author> R.J. Schalkoff. </author> <title> Digital Image Processing and Computer Vision. </title> <publisher> John Wiley & Sons, Inc., </publisher> <year> 1989. </year>
Reference-contexts: Examples include the problem of determining the characteristics of fluid flow [8], solving obstacle problems using parallel successive overrelaxation [3], and edge detection in computer vision <ref> [16] </ref>. We assume initially that all grid cells are squares of uniform size as in figure 1, and that there is a task associated with each cell that uses only its own data and values from neighboring cells that share an edge.
Reference: [17] <author> J. Yackel. </author> <title> Minimum-Perimeter Tiling for Optimization of Parallel Computation. </title> <type> PhD thesis, </type> <institution> University of Wisconsin - Madison, </institution> <year> 1993. </year> <note> Computer Sciences technical report #1170. </note>
Reference-contexts: The processor assignment problem is related to the graph partition problem which is NP-complete (see Garey and Johnson, page 209 [4]). Yackel showed that the problem is NP-hard if the domains are allowed to be arbitrary rectilinear grids <ref> [17] </ref>. The complexity of the problem restricted to rectangular domains is unknown. 3 Lower Bounds In this section we will develop a lower bound on the measure C and discuss conditions under which this lower bound is attained. <p> Theorem 11 A toroidal domain can be tiled with partial square tiles of size A if A divides both the number of rows and columns evenly. Proof: See <ref> [17] </ref>. <p> We used the "host-node" programming paradigm in which a host processor initiates and coordinates the node processors. This allows the implementation of a "fork-join" parallel program which fits the genetic algorithm's characteristics <ref> [17] </ref>. Each node on the parallel machine is responsible for two individuals. The nodes execute fitness function evaluation and crossover in parallel, sending the fitness values of the new generation back to the host.
Reference: [18] <author> J. Yackel and R. R. Meyer. </author> <title> Optimal tilings for parallel database design. </title> <editor> In P. M. Pardalos, editor, </editor> <booktitle> Advances in Optimization and Parallel Computing, </booktitle> <pages> pages 293-309. </pages> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: For the two-dimensional case considered here, a result of Ghandeharizadeh et al [6] (lemma 1), and a result of Rosenberg [15] (lemma 4.3), both yield an alternate bound on the semi-perimeter S: S 2 A 1=2 : This bound is equivalent to S fl (A) (see Yackel and Meyer <ref> [18] </ref>), and by the preceding construction is therefore attained by appropriate configurations for each value of A. Lemma 5 X P fl (A p ) C . Proof: Follows from C = P p P (T p ) and the area constraints for (T p ).
References-found: 18

