URL: http://www.csl.sri.com/reports/postscript/svnc95.ps
Refering-URL: http://www.csl.sri.com/reports/postscript/
Root-URL: 
Title: FIBRE CHANNEL PROTOCOL: FORMAL SPECIFICATION AND VERIFICATION  
Author: Vijay Nagasamy Sreeranga Rajan Preeti Ranjan Panda 
Address: CA 95035.  Menlo Park, CA 94025.  Irvine, CA 92717.  
Affiliation: Software R&D, LSI Logic Corporation, Milpitas,  Computer Science Laboratory, SRI International,  Dept. of Information and Computer Science, UC  
Abstract: The complexity of the Fibre Channel protocol poses a challenge to design its implementation right-the-first-time. In this work we have investigated the formal specification and mechanical verification of the Fibre Channel Protocol to address issues of correctness. We present abstract models of the FC-2 layer protocols in SpecCharts and the automated verification of a portion of the fibre channel node loop core implementation in a mechanical verification system called PVS. We show that this approach can supplement traditional simulation based approaches to obtain better coverage and confidence during verification. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Fibre Channel - Physical and Signalling Interface (FC-PH). ANSI X3T9.3 Working Document, Revision 4.1, </institution> <month> August 12, </month> <year> 1993. </year>
Reference-contexts: 1. Introduction In this work we investigate the formal specification and efficient mechanical verification of a Fibre Channel Protocol core. The ANSI standards document for Fibre Channel <ref> [1] </ref> contains a good description of the protocol, but it is not in a machine readable or executable format. Hence the document can only serve as a guide for manually checking whether an implementation satisfies the standards or not. Manual checking is tedious and error prone. <p> We show that with our approach the designer can obtain a greater degree of confidence towards a right-the-first-time concrete design implementation. We summarize the results and suggest directions for future work in section 6. 2. The Fibre Channel Standard Fibre Channel <ref> [1] </ref> is an integrated set of standards being developed by the American National Standards Institute (ANSI) to address the definition of a practical, inexpensive, yet expandable method for achieving high-speed data transfer among a variety of platforms like workstations, mainframes, supercomputers, desktop computers, storage devices and display devices. <p> FC-4 defines the mapping between the lower levels of the Fibre Channel and the ULPs (Upper Level Protocols) like SCSI and HIPPI. The specification for FC-0, FC-1 and FC-2 levels of the Protocol is described in the Fibre Channel Physical and Signalling Interface (FC-PH) <ref> [1] </ref> document. The protocol for FC-2, which forms the bulk of the specification, is modeled in the present work. The Fibre Channel Implementation Guide (FC-IG) [2] along with specific inputs from the design architect was used in developing the FSM structures of the model. 3.
Reference: [2] <institution> Fibre Channel - Implementation Guide (FC-IG). ANSI X3T9.3 Working Document, Revision 4.2.1, </institution> <month> April 16, </month> <year> 1994. </year>
Reference-contexts: The specification for FC-0, FC-1 and FC-2 levels of the Protocol is described in the Fibre Channel Physical and Signalling Interface (FC-PH) [1] document. The protocol for FC-2, which forms the bulk of the specification, is modeled in the present work. The Fibre Channel Implementation Guide (FC-IG) <ref> [2] </ref> along with specific inputs from the design architect was used in developing the FSM structures of the model. 3.
Reference: [3] <institution> Fibre Channel - Arbitrated Loop (FC-AL). ANSI X3T9.3 Working Document, Revision 4.2, </institution> <month> March 11, </month> <year> 1994. </year>
Reference-contexts: Using this method we were able to verify modules in the implementation of the Fiber Channel node loop Core. state machine (LPSM) translated from a Verilog RTL implementation description. The specification for the LPSM can be found in the FC-AL standards document <ref> [3] </ref>. A closer look reveals that the PVS description is very similar to the original Verilog description in so far as the state type, variables and the description of the state transition relations are concerned.
Reference: [4] <author> D. D. Gajski, F. Vahid, S. Narayan, and J. Gong. </author> <title> Specification and Design of Embedded Systems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1994. </year>
Reference-contexts: Modeling the FC-2 Protocol In this section, we describe the language and tools used to model the FC-2 protocols that helped us gain a better understanding of the Fibre Channel standard. We chose the SpecCharts <ref> [4] </ref> language to develop the initial abstract specification. SpecCharts was developed at the University of California, Irvine to aid system-level specification and design. It is based on the Program-State-Machine (PSM) model and is implemented as an extension to VHDL (VHSIC Hardware Description Language). <p> At any given time only a subset of the program-states will be active. The control ow amongst program-states can be either sequential or concurrent depending on the behavior. The functionality of the leaf-level program-states are specified using sequential statements in VHDL. More information on Spec-Charts can be found in <ref> [4] </ref>. We started the first phase of this project by creating models for the FC-2 layer protocol in SpecCharts. The modeling was done at the frame, sequence and exchange levels of abstraction. Figure 1 shows a portion of the SpecCharts description.
Reference: [5] <institution> The PVS Proof Checker: </institution> <note> A Reference Manual (Beta Release). </note> <author> N. Shankar, S. Owre, and J. M. </author> <type> Rushby. </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> February </month> <year> 1993. </year>
Reference-contexts: Prototype Verification System (PVS) The Prototype Verification System (PVS) <ref> [5] </ref> is an environment for specifying entities such as hardware/software models and algorithms, and verifying properties associated with the entities. An entity is usually specified by asserting a small number of general properties that are known to be true. These known properties are then used to derive other desired properties.
Reference: [6] <author> D. Cyrluk. </author> <title> Microprocessor Verification in PVS: A methodology and simple example. </title> <type> Technical Report, </type> <institution> SRI International, </institution> <month> December </month> <year> 1993. </year> <note> Report CSL-93-12. </note>
Reference: [7] <editor> Ramayya Kumar and Thomas Kropf, editors. </editor> <booktitle> Preliminary Proceedings of the Second Conference on Theorem Provers in Circuit Design, </booktitle> <address> Bad Herrenalb (Blackforest), Germany, </address> <month> September </month> <year> 1994. </year> <institution> Forschungszentrum Informatik an der Universitt Karlsruhe, </institution> <note> FZI Publication 4/94. </note>
Reference: [8] <author> P. Sreeranga Rajan. </author> <title> Transformations in High Level Synthesis: Specification and Verification. </title> <type> Technical Report NL-TN 118/94, </type> <institution> Philips Research Laboratories, Eindhoven, </institution> <address> The Netherlands, </address> <month> April </month> <year> 1994. </year>
Reference: [9] <author> Patrick Lincoln, Sam Owre, John Rushby, N. Shankar, and Friedrich von Henke. </author> <title> Eight Papers on Formal Verification. </title> <type> Technical Report SRI-CSL-93-4, </type> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: The process of verification involves checking relationships that are supposed to hold among entities. The checking is done by comparing the specified properties of the entities. PVS has been used for reasoning in many domains, such as in hardware verification [6,7,8], protocol verification, and algorithm verification <ref> [9] </ref>. We briey give the features of the PVS specification language in Section 4.1 and the PVS verification features in Section 4.2. 4.1 PVS Specification Language The specification language features common programming language constructs such as arrays, functions, and records. It has built-in types for reals, integers, naturals, and lists.
Reference: [10] <author> J. Burch, E. M. Clarke, K. McMillan, D. Dill, and J. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <booktitle> In Proceedings of the 5th Annual Symposium on Logic in Computer Science, </booktitle> <month> June </month> <year> 1990. </year>
Reference: [11] <author> S. Rajan, N. Shankar, and M. Srivas. </author> <title> An integration of model-checking with automated proof-checking. </title> <note> Submitted for publication, </note> <month> January </month> <year> 1995. </year>
References-found: 11

