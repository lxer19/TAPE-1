URL: file://ftp.cis.ohio-state.edu/pub/communication/papers/ipps95-reduction.ps.Z
Refering-URL: http://www.cis.ohio-state.edu/~panda/wormhole_pub.html
Root-URL: 
Email: E-mail: panda@cis.ohio-state.edu  
Phone: Tel: (614)-292-5199, Fax: (614)-292-2911  
Title: Global Reduction in Wormhole k-ary n-cube Networks with Multidestination Exchange Worms  
Author: Dhabaleswar K. Panda 
Address: Columbus, OH 43210-1277  
Affiliation: Dept. of Computer and Information Science The Ohio State University,  
Abstract: Proc. of the International Parallel Processing Symposium (IPPS '95), Apr. 1995, pp. 652-659. This paper presents a new approach to implement global reduction operations in wormhole k-ary n-cubes. The novelty lies in using multidestination message passing mechanism instead of single destination (unicast) messages. Using pairwise exchange worms along each dimension, it is shown that complete global reduction and barrier synchronization operations, as defined by the Message Passing Interface (MPI) standard, can be implemented with n communication start-ups as compared to 2ndlog 2 ke start-ups required with unicast-based message passing. Analytical results for different values of communication startup time, system size, and data size are presented and compared with the unicast-based scheme. The analysis indicates that the proposed framework can be effectively used in wormhole-routed systems to achieve fast global reduction without a separate control network. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Barnett, S. Gupta, D. G. Payne, L. Shuler, R. van de Geijn, and J. Watts. </author> <title> Interprocessor Collective Communication Library (Intercom). </title> <booktitle> In Scalable High Performance Computing Conference, </booktitle> <pages> pages 357-364, </pages> <year> 1994. </year>
Reference-contexts: In this paper, we consider both reduction and barrier synchronization as a single class of reduction operation. Many software schemes have been recently proposed in the literature to efficiently implement reduction <ref> [1] </ref> and barrier synchronization [11] operations on wormhole-routed systems. All these schemes use multiple phases of point-to-point unicast message passing and encounter long latency due to multiple communication start-ups. Systems like Cray T3D and CM-5 use dedicated tree-based networks to provide fast global reduction and barrier synchronization. <p> Hence, the latency of a communication phase is dominated by t s and the latency of any software-based synchronization scheme becomes proportional to the number of communication phases involved. This makes the global reduction cost quite high. In <ref> [1] </ref> it is reported that reduction operation on 8 bytes of data on 16x32 Intel Paragon takes around 7600 microseconds. This raises question whether efficient mechanisms are possible to reduce overhead of such reduction operations.
Reference: [2] <author> C.-M. Chiang and L. M. Ni. </author> <title> Multi-Address Encoding for Multicast. </title> <booktitle> In Proceedings of the Parallel Computer Routing and Communication Workshop, </booktitle> <pages> pages 146-160, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: In single destination (unicast) wormhole message-passing, every message consists of a body and a header with the destination number. For a multi-destination message, the header consists of multiple destinations and can span multiple flits depending on the encoding of the destinations <ref> [2] </ref>. The sender node creates the list of destinations as an ordered list, depending on their intended order of traversal, and incorporate it into the header. Once the worm is injected into the network by the source processor, it is routed in a piece-wise manner from one destination to another. <p> As the adaptivity of the base routing scheme increases, more and more destinations can be covered by a single multides-tination worm. There are different ways to encode the addresses in a multidestination worm <ref> [2] </ref>. The all-destination encoding scheme uses one or more flits per each destination. However, as the number of destination increases, such encoding makes the header quite long and increases the message size. On the contrary, a bit-string encoding scheme can be used to represent each destination by a bit.
Reference: [3] <author> S. K. S. Gupta and D. K. Panda. </author> <title> Barrier Synchronization in Distributed-Memory Multiprocessors using Rendezvous Primitives. </title> <booktitle> In Proceedings of the International Parallel Processing Symposium, </booktitle> <pages> pages 501-506, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: In section 5, we take all these parameters into account in doing performance analysis. 3.3 Design Considerations Such gather/exchange worm-based schemes are prone to deadlock if careful consideration is not taken. The problem of deadlock for multiple concurrent barriers using path-based scheme was pointed out in our earlier works <ref> [3, 7] </ref>. In this paper, we alleviate this deadlock problem by using virtual-cut through technique. The gather/exchange worms get stored into the buffers at the router interface if they can not move. For a single reduction operation at a time, two buffers at each router interface are sufficient.
Reference: [4] <author> Message Passing Interface Forum. </author> <title> MPI: A Message-Passing Interface Standard, </title> <month> Mar </month> <year> 1994. </year>
Reference-contexts: Such systems with direct interconnections are being used for supporting either distributed-memory or distributed-shared memory programming paradigms. In order to support these paradigms, the systems need fast communication and synchronization support from the underlying network. The Message Passing Interface Standard <ref> [4] </ref> has recently defined the importance of collective communication operations. <p> The gather operation can be any associative and commutative function (sum, max, min, or user-defined) as defined under collective communication by the MPI standard <ref> [4] </ref>. The required reduction operation is assumed to be element-wise operation on the data packets. Barrier synchronization is a special case of such reduction operation where there is no data (just an event). <p> Based on the above operation of the gather worm, result i can be logically defined as follows: result i = sdata 0 fi sdata 1 fi fi sdata i It is to be noted that this result i is nothing but prefix computation <ref> [4] </ref> of operation fi over data items sdata associated with the respective processors. 3.2 Bidirectional Exchange Worm It can be seen that after the gather operation, the intermediate results available at individual processors are prefix results and the final result is available with the last processor.
Reference: [5] <author> L. Ni and P. K. McKinley. </author> <title> A Survey of Wormhole Routing Techniques in Direct Networks. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 62-76, </pages> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: 1 Introduction The wormhole-routing switching technique is becoming the trend in building future parallel systems due to its inherent advantages like low-latency communication and reduced communication hardware overhead <ref> [5] </ref>. Intel Paragon, Cray T3D, Ncube, J-Machine, and Stanford DASH are representative systems falling into this category. Such systems with direct interconnections are being used for supporting either distributed-memory or distributed-shared memory programming paradigms. <p> This will alleviate the need for a separate control network and can provide easy scalability as the system size grows. Traditionally, the wormhole-routed systems have supported only point-to-point (unicast) message passing <ref> [5] </ref>. This mechanism allows a message to have only a single destination. Using unicast-based send and receive message passing primitives, reduction and barrier synchronization operations can easily be achieved using a two-step procedure: gather (report) and broadcast.
Reference: [6] <author> M. T. O'Keefe and H. G. Dietz. </author> <title> Hardware Barrier Synchronization: Static Barrier MIMD (SBM). </title> <booktitle> In Proceedings of the International Conference on Parallel Processing, </booktitle> <pages> pages I: 35-42, </pages> <month> Aug </month> <year> 1990. </year>
Reference-contexts: As defined by the standard, the result of an operation may be available to only one member of the group or to all the members. The operations can be carried on either scalar or vector data. Barrier synchronization <ref> [6] </ref> is a special case of this class of operation where there is no data (just an event) and the result is available to all members of the group. In this paper, we consider both reduction and barrier synchronization as a single class of reduction operation.
Reference: [7] <author> D. K. Panda. </author> <title> Optimal Phase Barrier Synchronization in k-ary n-cube Wormhole-routed Systems using Multirendezvous Primitives. </title> <booktitle> In Workshop on Fine-Grain Massively Parallel Coordination, </booktitle> <pages> pages 24-26, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: In section 5, we take all these parameters into account in doing performance analysis. 3.3 Design Considerations Such gather/exchange worm-based schemes are prone to deadlock if careful consideration is not taken. The problem of deadlock for multiple concurrent barriers using path-based scheme was pointed out in our earlier works <ref> [3, 7] </ref>. In this paper, we alleviate this deadlock problem by using virtual-cut through technique. The gather/exchange worms get stored into the buffers at the router interface if they can not move. For a single reduction operation at a time, two buffers at each router interface are sufficient. <p> If arbitrary number of processors participate in the operation, then the exchange steps can not always be carried out. If some end processors do not participate then the structure of the problem (participating processors) becomes asymmetric and it becomes difficult to carry out result from one phase to another <ref> [7] </ref>.
Reference: [8] <author> D. K. Panda. </author> <title> Global Reduction in Wormhole k-ary n-cube Networks with Multidestination Exchange Worms. </title> <type> Technical Report OSU-CISRC-8/94-TR53, </type> <year> 1994. </year>
Reference-contexts: In <ref> [8] </ref>, we have derived the latency of the pipelined algorithm as follows: T p ex = n (dl=bet max + (kt node ) + ((db=we + 1) (k 1)t p ) + ((k 1)t comp b)) (3) Using the above models, we compared our scheme with the unicast-based scheme. <p> It was observed <ref> [8] </ref> that with appropriate buffer size, as system size increases, the exchange worm-based scheme continues to perform reduction operation with less cost. For smaller data size (32 bytes), the improvement varies from 1.7-2.1 and for large data size (256 bytes) it varies between 1.9-5.0.
Reference: [9] <author> D. K. Panda. </author> <title> Fast Barrier Synchronization in Wormhole k-ary n-cube Networks with Multides-tination Worms. </title> <booktitle> In International Symposium on High Performance Comuter Architecture, </booktitle> <pages> pages 200-209, </pages> <year> 1995. </year>
Reference-contexts: All these schemes use multiple phases of point-to-point unicast message passing and encounter long latency due to multiple communication start-ups. Systems like Cray T3D and CM-5 use dedicated tree-based networks to provide fast global reduction and barrier synchronization. However, these schemes are not physically scalable <ref> [9] </ref>. This raises a question whether fast reduction and barrier synchronization can be implemented on wormhole-routed direct networks using software message passing with minimal architectural supports associated with each router. This will alleviate the need for a separate control network and can provide easy scalability as the system size grows. <p> This raises question whether efficient mechanisms are possible to reduce overhead of such reduction operations. In this paper, we take such a challenge in proposing a new approach to implement fast global reduction in k-ary n-cube wormhole networks. Recently, we have introduced a new concept of multidestina-tion wormhole mechanism <ref> [9, 10] </ref>. We used multides-tination broadcast worm in [10] to design algorithms for broadcast and multicast operations in wormhole-routed k-ary n-cube systems with reduced latency. <p> Recently, we have introduced a new concept of multidestina-tion wormhole mechanism [9, 10]. We used multides-tination broadcast worm in [10] to design algorithms for broadcast and multicast operations in wormhole-routed k-ary n-cube systems with reduced latency. In <ref> [9] </ref>, we introduced a concept of multidestination gather worm and in conjunction with the broadcast worm, we showed how to implement complete and arbitrary barrier synchronization in wormhole-routed systems with reduced latency. <p> Based on such architectural support, we present algorithms for complete (all processors participating) global reduction. We do not emphasize on reduction with arbitrary number of participating processors because it can be done efficiently using the scheme proposed in <ref> [9] </ref>. Using exchange worms, it is demonstrated that the reduction operations can be implemented with n communication start-up for k-ary n-cube systems when the data size is smaller than the individual buffer size available at a router. For data size larger than the buffer size, we present a pipelined algorithm. <p> In section 4, we present algorithms for complete global reduction on k-ary n-cube systems. Performance analysis for both schemes are done in section 5. 2 Multidestination Mechanism In this section, we provide an overview of wormhole message passing mechanism with multiple destinations. The readers are requested to refer to <ref> [9, 10] </ref> for details. In single destination (unicast) wormhole message-passing, every message consists of a body and a header with the destination number. For a multi-destination message, the header consists of multiple destinations and can span multiple flits depending on the encoding of the destinations [2]. <p> In [10], we have presented broadcast/multicast algorithms using such worms. We have shown that the cost of multicast can in fact be reduced as the number of destinations increases beyond certain number depending on the system size, architectural parameters, and the routing scheme being used. In <ref> [9] </ref>, we have introduced multidestination gather 653 worm. The functionality of such a worm is opposite to that of a broadcast worm. <p> Using both gather and broadcast worms, we have shown how to implement fast barrier synchronization (complete and arbitrary barriers) in <ref> [9] </ref>. In the following section, we introduce a new exchange worm type. In order to route such multidestination messages, we have proposed a Base Routing Conformed Path (BRCP) model in [10]. Figure 1 shows examples of multidestination worms on a 2D mesh with different base routing schemes. <p> The current generation systems support channel widths (flit sizes) of 16-32 bits. Hence, maximum 1 or 2 flits are sufficient to encode destinations of a single dimensional path in a k-ary n-cube system with k 32. We have used such bit-string encoding in <ref> [9] </ref> and will be using it in this paper too. 3 Reduction on Linear Array with Ex change Worms In this section we first provide an overview of single-directional gather worm, as introduced in [9]. <p> We have used such bit-string encoding in <ref> [9] </ref> and will be using it in this paper too. 3 Reduction on Linear Array with Ex change Worms In this section we first provide an overview of single-directional gather worm, as introduced in [9]. Then we introduce the concept of bi-directional exchange worms and demonstrate how to use them to perform global reduction on a linear array. 3.1 Single-directional Gather Worm The basic name of this worm indicates that it gathers information from multiple processors as it propagates. <p> If some end processors do not participate then the structure of the problem (participating processors) becomes asymmetric and it becomes difficult to carry out result from one phase to another [7]. Under these circumstances, one can use a two-phase method as suggested in <ref> [9] </ref>. 5 Performance Analysis In this section, we develop timing models for both unicast-based and exchange worm-based schemes and compare them for different system and technological parameters. 5.1 Latency of Reduction Operation Let us consider the unicast-based scheme first. There are 2n log 2 k communication steps.
Reference: [10] <author> D. K. Panda, S. Singal, and P. Prabhakaran. </author> <title> Mul-tidestination Message Passing Mechanism Conforming to Base Wormhole Routing Scheme. </title> <booktitle> In Proceedings of the Parallel Computer Routing and Communication Workshop, </booktitle> <pages> pages 131-145, </pages> <year> 1994. </year>
Reference-contexts: This raises question whether efficient mechanisms are possible to reduce overhead of such reduction operations. In this paper, we take such a challenge in proposing a new approach to implement fast global reduction in k-ary n-cube wormhole networks. Recently, we have introduced a new concept of multidestina-tion wormhole mechanism <ref> [9, 10] </ref>. We used multides-tination broadcast worm in [10] to design algorithms for broadcast and multicast operations in wormhole-routed k-ary n-cube systems with reduced latency. <p> In this paper, we take such a challenge in proposing a new approach to implement fast global reduction in k-ary n-cube wormhole networks. Recently, we have introduced a new concept of multidestina-tion wormhole mechanism [9, 10]. We used multides-tination broadcast worm in <ref> [10] </ref> to design algorithms for broadcast and multicast operations in wormhole-routed k-ary n-cube systems with reduced latency. In [9], we introduced a concept of multidestination gather worm and in conjunction with the broadcast worm, we showed how to implement complete and arbitrary barrier synchronization in wormhole-routed systems with reduced latency. <p> In section 4, we present algorithms for complete global reduction on k-ary n-cube systems. Performance analysis for both schemes are done in section 5. 2 Multidestination Mechanism In this section, we provide an overview of wormhole message passing mechanism with multiple destinations. The readers are requested to refer to <ref> [9, 10] </ref> for details. In single destination (unicast) wormhole message-passing, every message consists of a body and a header with the destination number. For a multi-destination message, the header consists of multiple destinations and can span multiple flits depending on the encoding of the destinations [2]. <p> Such multidestination worms can be designed to have different functionality. For example, a broadcast worm can be used to broadcast/multicast a message to multiple destinations using a single communication start-up <ref> [10] </ref>. A multidestination broadcast worm uses forward and absorb capability at the router of each destination (except the last one), i.e., the flits are forwarded to an adjacent router as well as copied to the system buffer of the associated processor-router interface. <p> It is to be noted that such a worm is quite powerful and can deliver a message to multiple destinations much faster than using multiple unicast messages. In <ref> [10] </ref>, we have presented broadcast/multicast algorithms using such worms. We have shown that the cost of multicast can in fact be reduced as the number of destinations increases beyond certain number depending on the system size, architectural parameters, and the routing scheme being used. <p> In the following section, we introduce a new exchange worm type. In order to route such multidestination messages, we have proposed a Base Routing Conformed Path (BRCP) model in <ref> [10] </ref>. Figure 1 shows examples of multidestination worms on a 2D mesh with different base routing schemes. In an e-cube system, a mul-tidestination worm can cover a set of destinations in row/column/row-column order.
Reference: [11] <author> H. Xu, P. K. McKinley, and L. Ni. </author> <title> Efficient Implementation of Barrier Synchronization in Wormhole-routed Hypercube Multicomputers. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 16 </volume> <pages> 172-184, </pages> <year> 1992. </year>
Reference-contexts: In this paper, we consider both reduction and barrier synchronization as a single class of reduction operation. Many software schemes have been recently proposed in the literature to efficiently implement reduction [1] and barrier synchronization <ref> [11] </ref> operations on wormhole-routed systems. All these schemes use multiple phases of point-to-point unicast message passing and encounter long latency due to multiple communication start-ups. Systems like Cray T3D and CM-5 use dedicated tree-based networks to provide fast global reduction and barrier synchronization.
References-found: 11

