URL: http://www.tns.lcs.mit.edu/~djw/library/FTPCaching.ps.gz
Refering-URL: http://www.tns.lcs.mit.edu/~djw/library/
Root-URL: 
Title: A Case for Caching File Objects Inside Internetworks  
Author: Peter B. Danzig Richard S. Hall Michael F. Schwartz 
Address: Boulder  
Affiliation: ffi University of Colorado at  
Date: March 1993  
Pubnum: CU-CS-642-93  
Abstract: Technical Report CU-CS-642-93 Department of Computer Science University of Colorado Boulder, Colorado 80309-430 
Abstract-found: 1
Intro-found: 1
Reference: [AB92] <author> R. Alonso and M. </author> <title> Blaze. Dynamic hierarchical caching for large-scale distributed file systems. </title> <booktitle> Proceedings of the Twelvth International Conference on Distributed Computing Systems, </booktitle> <month> June </month> <year> 1992. </year>
Reference-contexts: They both reported little write sharing between workstations, although they took different approaches to write-shared files. Muntz and Honeyman [MH92] and Blaze and Alonso <ref> [AB92] </ref> simulated multi-level caching architectures driven by traces taken from over a hundred workstations running the Andrew File System at DEC's Systems Research Center.
Reference: [BCCP93] <author> Hans-Werner Braun, Bilal Chinoy, Kimberly C. Claffy, and George C. Polyzos. </author> <title> Analysis and modeling of wide-area networks: Annual status report. </title> <type> Technical report, </type> <institution> Applied Networking Research, San Diego Supercomputer Center, </institution> <month> February 13, </month> <year> 1993. </year>
Reference-contexts: Measurement studies of IP packet statistics have documented the growth in traffic volume and troubles with existing protocols <ref> [BCCP93] </ref>. Another series of studies focused on models of Internet traffic [DJC + 92, Hei90, WLC92, Pax91]. Mukjerjee [Muk92] conducted "ping" experiments to study the dynamics of network congestion and round trip times.
Reference: [Cat92] <author> V. Cate. </author> <title> Alex a global filesystem. </title> <booktitle> Proceedings of the Usenix File Systems Workshop, </booktitle> <pages> pages 1-11, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: It is closely related to a study by Maffeis [Maf93] and to the Alex file system <ref> [Cat92] </ref>. Maffeis [Maf93] analyzed the log files of 25 FTP archives. He reported the degree of read-sharing and touched on the update rate of files in FTP archives. <p> However, he did not give sufficient detail to help evaluate cache consistency policies. He suggested that object caching would improve availability and performance, but did not suggest an architecture or evaluate the impact of caching on network load. A type of file cache for anonymous FTP already exists. Alex <ref> [Cat92] </ref> is a recently developed system that wraps a Network File System (NFS) interface around the space of anonymous FTP archives. One uses Alex by mounting the Alex server as an NFS volume. The Alex server, in turn, translates name requests to FTP operations, caching recently retrieved files.
Reference: [CM91] <author> David Curry and Jeff Mogul. </author> <note> NF-Swatch 3.1 Software. Anonymous FTP from gatekeeper.dec.com: pub/net/ip/nfs/nfswatch3.1.tar.Z, </note> <month> January, </month> <year> 1991. </year>
Reference-contexts: It contributed 6.35% of NSFNET bytes during the month the traces were collected. We captured IP packets on a DECStation 5000, filtered the packets to single out FTP control connections and file transfer connections using a modified NFSwatch program <ref> [CM91] </ref>, discarded information that might compromise the privacy of individuals, and wrote a trace record for each transferred file. Table 1 shows a typical trace record. We recorded only IP network numbers rather than full IP addresses, to preserve individual privacy.
Reference: [DJC + 92] <author> Peter B. Danzig, Sugih Jamin, Ramon Caceres, Danny J. Mitzel, and Deb-orah Estrin. </author> <title> An artificial workload model of TCP/IP internetworks. </title> <journal> Journal of Internetworking: Practice and Experience, </journal> <volume> 3(1) </volume> <pages> 1-26, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: size for dupl. transfers 53,687 Total bytes transferred in trace 25.6 GB Files transferred once/day 3% Bytes due to these files 32% Table 3: Summary of transfers. more often than large files, but some very large files do get transferred (in agreement with our and other studies of Internet traffic <ref> [DJC + 92] </ref>). <p> The signature bytes of transfers equal to or larger than 32 network Maximum Transfer Units (MTUs) come from different packets. Since previous studies <ref> [DJC + 92, WLC92] </ref> have shown that most FTP data connections employ a 512 byte TCP segment size, we approximated that the signature bytes of transfers greater than 512*32 bytes long came from different packets. For each sufficiently long transfer, we found the highest numbered, successfully recorded signature byte. <p> Measurement studies of IP packet statistics have documented the growth in traffic volume and troubles with existing protocols [BCCP93]. Another series of studies focused on models of Internet traffic <ref> [DJC + 92, Hei90, WLC92, Pax91] </ref>. Mukjerjee [Muk92] conducted "ping" experiments to study the dynamics of network congestion and round trip times. We traced Domain Name System traffic and showed that 3% of NSFNET bytes are due to defective implementations of the DNS [DOK92].
Reference: [DJCM91] <author> Peter B. Danzig, Sugih Jamin, Ramon Caceres, and Danny Mitzel. </author> <title> Characteristics of wide-area TCP/IP conversations. </title> <booktitle> ACM SIGCOMM 91 Conference, </booktitle> <month> September, </month> <year> 1991. </year>
Reference-contexts: Rather, we believe, it means that the average size of FTP transfers will continue to grow, and the fraction of bandwidth due to FTP will stay significant. As justification for this, note that FTP file sizes have grown an order of magnitude from 1989 to 1993 <ref> [DJCM91] </ref>. Multimedia applications will almost certainly lead to even more demand for widespread distribution of audio and video transcripts, further exacerbating the load caused by file transfers.
Reference: [DOK92] <author> Peter B. Danzig, Katia Obraczka, and Anant Kumar. </author> <title> An analysis of wide-area name server traffic: A study of the Domain Name System. </title> <booktitle> ACM SIG-COMM 92 Conference, </booktitle> <pages> pages 281-292, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: Mukjerjee [Muk92] conducted "ping" experiments to study the dynamics of network congestion and round trip times. We traced Domain Name System traffic and showed that 3% of NSFNET bytes are due to defective implementations of the DNS <ref> [DOK92] </ref>.

Reference: [EHS92] <author> David J. Ewing, Richard S. Hall, and Michael F. Schwartz. </author> <title> A measurement study of Internet file transfer traffic. </title> <type> Technical Report CU-CS 571-92, </type> <institution> University of Colorado, Boulder, </institution> <month> January, </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The Internet's File Transfer Protocol (FTP [PR85]) is the source of about half of the bytes that traverse the NSFNET backbone [Mer92]. Our previous study showed that many large, essentially read-only files are popularly FTP'd across the Internet many times each day <ref> [EHS92] </ref>. Through trace-driven simulation and measurements of traffic characteristics, this paper demonstrates that over half of the FTP bytes transmitted over the backbone could be eliminated. Regional networks should see similar savings. The reason that such a hefty bandwidth savings is possible is simple. <p> A separate analysis of two weeks of University of Colorado FTP traffic shows a similar degree of savings <ref> [EHS92] </ref>. While it could be argued that the volume of file exchange traffic will pale compared to upcoming audio and video traffic, we note that people will undoubtedly FTP recordings of video and audio conferences.
Reference: [Hei90] <author> Steven A. Heimlich. </author> <title> Traffic characterization of the NSFNET national backbone. </title> <booktitle> Proceedings Winter USENIX Conference, </booktitle> <pages> pages 207-227, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: Measurement studies of IP packet statistics have documented the growth in traffic volume and troubles with existing protocols [BCCP93]. Another series of studies focused on models of Internet traffic <ref> [DJC + 92, Hei90, WLC92, Pax91] </ref>. Mukjerjee [Muk92] conducted "ping" experiments to study the dynamics of network congestion and round trip times. We traced Domain Name System traffic and showed that 3% of NSFNET bytes are due to defective implementations of the DNS [DOK92].
Reference: [HKM + 88] <author> John H. Howard, Michael L. Kazar, Sherri G. Menees, David A. Nichols, M. Satyanarayanan, Robert N. Side-botham, and Michael J. West. </author> <title> Scale and performance in a distributed file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 51-81, </pages> <month> January, </month> <year> 1988. </year>
Reference-contexts: Both the Sprite and Andrew operating system projects <ref> [NWO88, HKM + 88] </ref> optimized their file systems for caching of read-shared files, such as 11 program binaries. They both reported little write sharing between workstations, although they took different approaches to write-shared files.
Reference: [HS93] <author> D. Hardy and M. F. Schwartz. </author> <title> Essence: A resource discovery system based on semantic file indexing. </title> <booktitle> Proceedings of the USENIX Winter Conference, </booktitle> <pages> pages 361-374, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: Across wide-area networks and a multitude of platforms, FTP is now a ubiquitous global file system. Recently, more advanced facilities have been layered atop FTP, such as primary-copy replication [McL91] and various directory services <ref> [ED92, HS93] </ref>. Unfortunately, FTP's simplicity also leads to many inefficiencies and inconsistencies.
Reference: [Int93] <institution> Internet Engineering Task Force. Uniform resource locators. </institution> <note> Anonymous FTP from cnri.reston.va.us: /ietf.mail.archives/uri/, </note> <month> January, </month> <year> 1993. </year>
Reference-contexts: For our purposes, the server-independent name of a file should include the hostname and full path name of the primary copy of a file. The actual representation could be the naming convention being developed by the Internet Engineering Task Force (IETF) <ref> [Int93] </ref>. 1.1.2 Caching Architectures The performance of all distributed systems depends on caching. If they don't cache, they don't perform well. We propose an architecture of file caches, accessed via server-independent file names, that would improve FTP performance, eliminate the inconsistencies that arise from hand-replication, and reduce wide-area FTP traffic. <p> We intentionally refer to objects rather than FTP files, because services for duplicate file transmissions . other than FTP (such as WAIS [KM91]) could employ these caches via universal resource locators <ref> [Int93] </ref>. 4.1 Cache Machine Load We believe that well designed object caches can keep up with demand rather than becoming performance bottlenecks. They can optimize their performance by exploiting FTP's sequential access. <p> For example, one could purchase a caching machine for $5,500, as compared with paying $1,500 monthly for an additional T1 regional link. For these reasons we believe an architecture of anonymous object caches, accessed by "universal resource locators" <ref> [Int93] </ref>, would be useful to services other than FTP.
Reference: [KL86] <author> Brian Kontor and Phil Lapsley. </author> <title> Network news transfer protocol. </title> <type> RFC 977, </type> <year> 1986. </year>
Reference-contexts: For these reasons we believe an architecture of anonymous object caches, accessed by "universal resource locators" [Int93], would be useful to services other than FTP. We hope to deploy a prototype of such a caching architecture. 2 Adding compression to NNTP <ref> [KL86] </ref> and SMTP [Pos82] could reduce backbone traffic by another 6%. 12 Appendix: Traffic By File Type Table 6 lists common file types by percentage of bandwidth used, based on an analysis of file names.
Reference: [KM91] <author> B. Kahle and A. Medlar. </author> <title> An information system for corporate users: Wide Area In formation Servers. </title> <journal> Con-neXions The Interoperability Report, </journal> <volume> 5(11) </volume> <pages> 2-9, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: This section addresses issues of cache machine performance, cache consistency, how to locate caches, and the privacy and security of fetching objects from caches. We intentionally refer to objects rather than FTP files, because services for duplicate file transmissions . other than FTP (such as WAIS <ref> [KM91] </ref>) could employ these caches via universal resource locators [Int93]. 4.1 Cache Machine Load We believe that well designed object caches can keep up with demand rather than becoming performance bottlenecks. They can optimize their performance by exploiting FTP's sequential access.
Reference: [Maf93] <author> S. Maffeis. </author> <title> File access patterns in public FTP archives and a index for locality of reference. </title> <journal> ACM SIGMET-RICS Performance Evaluation Review, </journal> <volume> 20(3) </volume> <pages> 22-35, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: It is closely related to a study by Maffeis <ref> [Maf93] </ref> and to the Alex file system [Cat92]. Maffeis [Maf93] analyzed the log files of 25 FTP archives. He reported the degree of read-sharing and touched on the update rate of files in FTP archives. <p> It is closely related to a study by Maffeis <ref> [Maf93] </ref> and to the Alex file system [Cat92]. Maffeis [Maf93] analyzed the log files of 25 FTP archives. He reported the degree of read-sharing and touched on the update rate of files in FTP archives.
Reference: [McL91] <author> Lee McLoughlin. </author> <note> FTP mirroring software. Anonymous FTP from 14 src.doc.ic.ac.uk: package/mirror.shar, </note> <month> August </month> <year> 1991. </year>
Reference-contexts: Unencumbered by consistency control, locking, security, or caching, FTP's client and server software are tidy and easily ported. Across wide-area networks and a multitude of platforms, FTP is now a ubiquitous global file system. Recently, more advanced facilities have been layered atop FTP, such as primary-copy replication <ref> [McL91] </ref> and various directory services [ED92, HS93]. Unfortunately, FTP's simplicity also leads to many inefficiencies and inconsistencies.
Reference: [Mer92] <institution> Merit/NSFnet Information Services. NSFNET Statistics, </institution> <month> October </month> <year> 1992. </year> <note> Anonymous FTP from nis.nsf.net:statistics/nsfnet/*. </note>
Reference-contexts: 1 Introduction The Internet's File Transfer Protocol (FTP [PR85]) is the source of about half of the bytes that traverse the NSFNET backbone <ref> [Mer92] </ref>. Our previous study showed that many large, essentially read-only files are popularly FTP'd across the Internet many times each day [EHS92]. Through trace-driven simulation and measurements of traffic characteristics, this paper demonstrates that over half of the FTP bytes transmitted over the backbone could be eliminated. <p> This entry point contributes between 5% and 7% of the bytes carried by the NSFNET (See file t3-9210.bnss, <ref> [Mer92] </ref>). It contributed 6.35% of NSFNET bytes during the month the traces were collected. <p> We obtained these measures by driving simulations with our NCAR traces. We focus on the NSFNET backbone because we know its topology (see Figure 2) and global traffic statistics <ref> [Mer92] </ref>. We excluded regional and local networks from the measures presented here by substituting NSFNET entry points, or External Nodal Switching Subsystem (ENSS), for each IP address found in the traces. This eliminated our measure's sensitivity to particular regional and local topologies. <p> At every step, each ENSS calls the generator and retrieves the specified file. We modeled the variation in traffic level generated by each ENSS by scaling the number of file transfers by the relative counts of traffic reported by Merit, Inc. (see file t3-9210.bnss, <ref> [Mer92] </ref>). We chose where to place CNSS caches by ordering the CNSS's according to which node would prevent the most downstream byte-hops for the given synthetic workload. <p> We traced Domain Name System traffic and showed that 3% of NSFNET bytes are due to defective implementations of the DNS [DOK92]. NSF measures and reports monthly traffic statistics of the NSFNET backbone and maintains an extensive FTP archive of packet counts, link loads, and packet delay measurements <ref> [Mer92] </ref>. 6 Conclusions This paper presented evidence that a hierarchical file caching mechanism layered atop FTP would eliminate 21% of the traffic that currently traverses the NSFNET backbone and our regional networks. Simultaneously, these caches would lead to improved consistency of FTP archives. <p> As evidence, we note that although many new Internet services have been introduced and traffic has been growing exponentially in the past few years, the proportion of packets and bytes caused by FTP have fluctuated by only a few percent, averaging about 25% and 48 <ref> [Mer92] </ref>. Table 6 shows that FTP is already used extensively for distributing data for new types of services, such as video and audio. Finally, file caching is cost effective.
Reference: [MH92] <author> D. Muntz and P. Honeyman. </author> <title> Multilevel caching in distributed file systems or- your cache ain't nuthin' but trash. </title> <booktitle> Proceedings of the USENIX Winter Conference, </booktitle> <pages> pages 305-313, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Both the Sprite and Andrew operating system projects [NWO88, HKM + 88] optimized their file systems for caching of read-shared files, such as 11 program binaries. They both reported little write sharing between workstations, although they took different approaches to write-shared files. Muntz and Honeyman <ref> [MH92] </ref> and Blaze and Alonso [AB92] simulated multi-level caching architectures driven by traces taken from over a hundred workstations running the Andrew File System at DEC's Systems Research Center.
Reference: [Muk92] <author> Amarnath Mukherjee. </author> <title> On the dynamics and significance of low frequency components of internet load. </title> <type> Technical Report MIS-CIS-92-83, </type> <institution> University of Pennsylvania, </institution> <month> December, </month> <year> 1992. </year>
Reference-contexts: Measurement studies of IP packet statistics have documented the growth in traffic volume and troubles with existing protocols [BCCP93]. Another series of studies focused on models of Internet traffic [DJC + 92, Hei90, WLC92, Pax91]. Mukjerjee <ref> [Muk92] </ref> conducted "ping" experiments to study the dynamics of network congestion and round trip times. We traced Domain Name System traffic and showed that 3% of NSFNET bytes are due to defective implementations of the DNS [DOK92].
Reference: [Neu92] <author> B. Clifford Neuman. Prospero: </author> <title> A tool for organizing Internet resources. </title> <journal> Electronic Networking: Research, Applications and Policy, </journal> <volume> 2(1) </volume> <pages> 30-37, </pages> <month> Spring </month> <year> 1992. </year>
Reference-contexts: Although its impact on network traffic has not been evaluated, this could be substantial if Alex servers were placed at ENSS's and were in common use. The Australian archive server archie.au implements a file cache based on the Prospero file system <ref> [Neu92] </ref>. Australian users retrieve files through this server to amortize bandwidth on the Aus-tralian long-haul links.
Reference: [NWO88] <author> Michael N. Nelson, Brent B. Welch, and John K. Ousterhout. </author> <title> Caching in the sprite network file system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 134-154, </pages> <month> January, </month> <year> 1988. </year>
Reference-contexts: Both the Sprite and Andrew operating system projects <ref> [NWO88, HKM + 88] </ref> optimized their file systems for caching of read-shared files, such as 11 program binaries. They both reported little write sharing between workstations, although they took different approaches to write-shared files.
Reference: [Pax91] <author> Vern Paxson. </author> <title> Measurements and models of wide-area TCP conversations. </title> <type> Technical Report TR LBL-30840, </type> <institution> Lawrence Berkeley Labs, </institution> <year> 1991. </year>
Reference-contexts: Measurement studies of IP packet statistics have documented the growth in traffic volume and troubles with existing protocols [BCCP93]. Another series of studies focused on models of Internet traffic <ref> [DJC + 92, Hei90, WLC92, Pax91] </ref>. Mukjerjee [Muk92] conducted "ping" experiments to study the dynamics of network congestion and round trip times. We traced Domain Name System traffic and showed that 3% of NSFNET bytes are due to defective implementations of the DNS [DOK92].
Reference: [Pos82] <author> J. B. Postel. </author> <title> RFC 821: Simple Mail Transfer Protocol. </title> <type> Technical report, </type> <institution> University of Southern California Information Sciences Institute, </institution> <month> August </month> <year> 1982. </year>
Reference-contexts: For these reasons we believe an architecture of anonymous object caches, accessed by "universal resource locators" [Int93], would be useful to services other than FTP. We hope to deploy a prototype of such a caching architecture. 2 Adding compression to NNTP [KL86] and SMTP <ref> [Pos82] </ref> could reduce backbone traffic by another 6%. 12 Appendix: Traffic By File Type Table 6 lists common file types by percentage of bandwidth used, based on an analysis of file names.
Reference: [PR85] <author> J. Postel and J. Reynolds. </author> <title> RFC 959: File transfer protocol (FTP). </title> <type> Technical report, </type> <institution> University of Southern Cal-ifornia Information Sciences Institute, </institution> <month> October </month> <year> 1985. </year>
Reference-contexts: 1 Introduction The Internet's File Transfer Protocol (FTP <ref> [PR85] </ref>) is the source of about half of the bytes that traverse the NSFNET backbone [Mer92]. Our previous study showed that many large, essentially read-only files are popularly FTP'd across the Internet many times each day [EHS92].
Reference: [Wel84] <author> T. A. Welch. </author> <title> A technique for high performance data compression. </title> <journal> IEEE Computer Magazine, </journal> <volume> 17(6) </volume> <pages> 8-19, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: Table 3 lists the compressed formats we recognized. Assuming FTP implemented Lempel-Ziv compression <ref> [Wel84] </ref>, the most common compression algorithm, and conservatively estimating that the average compressed file is 60% the size of the original, then automatic compression would eliminate 40% of 31% of the FTP bytes transmitted, or 12.4% of FTP bytes.
Reference: [WLC92] <author> Ian Wakeman, Dave Lewis, and Jon Crowcroft. </author> <title> Traffic analysis of transatlantic traffic. </title> <booktitle> Proceedings of INET 92, </booktitle> <pages> pages 417-430, </pages> <month> June </month> <year> 1992. </year> <month> 15 </month>
Reference-contexts: The signature bytes of transfers equal to or larger than 32 network Maximum Transfer Units (MTUs) come from different packets. Since previous studies <ref> [DJC + 92, WLC92] </ref> have shown that most FTP data connections employ a 512 byte TCP segment size, we approximated that the signature bytes of transfers greater than 512*32 bytes long came from different packets. For each sufficiently long transfer, we found the highest numbered, successfully recorded signature byte. <p> Measurement studies of IP packet statistics have documented the growth in traffic volume and troubles with existing protocols [BCCP93]. Another series of studies focused on models of Internet traffic <ref> [DJC + 92, Hei90, WLC92, Pax91] </ref>. Mukjerjee [Muk92] conducted "ping" experiments to study the dynamics of network congestion and round trip times. We traced Domain Name System traffic and showed that 3% of NSFNET bytes are due to defective implementations of the DNS [DOK92].
References-found: 26

