URL: http://www.eecs.umich.edu/~wuchang/work/internet/intserv/CSZ93.ps.Z
Refering-URL: http://www.eecs.umich.edu/~wuchang/work/internet/
Root-URL: http://www.cs.umich.edu
Title: A Scheduling Service Model and a Scheduling Architecture for an Integrated Services Packet Network  
Author: Scott Shenker David D. Clark Lixia Zhang 
Abstract: Integrated Services Packet Networks (ISPN) are designed to integrate the network service requirements of a wide variety of computer-based applications. Some of these services are delivered primarily through the packet scheduling algorithms used in the network switches. This paper addresses two questions related to these scheduling algorithms. The first question is: what scheduling services should an ISPN offer? In answer, we propose a scheduling service model for ISPN's which is based on our projections about future application and institutional service requirements. Our service model includes both a delay-related component designed to meet the ergonomic requirements of individual applications, and also a hierarchical link-sharing component designed to meet the economic needs of resource sharing between different entities. The second question we address is: what implications does this service model have for the packet scheduling algorithms? We answer this question by constructing a scheduling architecture, and then argue that any scheduling algorithm capable of supporting our scheduling service model must conform to this architecture. The scheduling architecture is derived from the natural precedence ordering of the service model's various scheduling goals. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Casner. </author> <title> private communication, </title> <year> 1992. </year>
Reference-contexts: Video can be made to adapt by dropping or replaying a frame as necessary, and voice can adapt imperceptibly by adjusting silent periods. In fact, such adaptive approaches have been employed in packetized voice applications since the early 70's (see [9, 36]); the VT <ref> [1] </ref> and VAT [26] packet voice protocols, which are currently used to transmit voice on the Internet, are living examples of such adaptive applications. Third, we believe that most playback applications will have sufficient buffering to store packets until their playback point.
Reference: [2] <author> D. Clark and V. Jacobson. </author> <title> Flexible and Efficient Resource management for Datagram Networks, </title> <type> unpublished draft, </type> <year> 1991. </year>
Reference-contexts: While there are many packet scheduling algorithms which realize the ISPN service model, we argue that they all must conform to the basic 5 Reference <ref> [2] </ref>, and to a lesser extent reference [15], also focus on flexibility of the packet scheduler as a primary design objective. We discuss this at greater length in Section 9. 3 architecture that we develop. <p> However, we would like to acknowledge that the thoughts discussed in this paper also reflect the contributions of many others. In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd <ref> [2, 25, 15] </ref>, Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. <p> There are many choices for &lt; A G &gt; and G: for instance, the "stop-and-go" algorithm in [16, 17], the hierarchical round-robin in [28], the J-EDD and D-EDD schemes in [12, 14, 35], the weighted round-robin algorithm described in <ref> [2, 25] </ref>, and the weighted fair queueing (WFQ) algorithm described in [8] and later analyzed in [30, 31]. <p> Furthermore, we focus exclusively on the issue of the service model and do not discuss to any great extent the underlying scheduling algorithm (for a review of the scheduling algorithms, see [3]). The motivating principle of this work is that the service model is primary. However, Reference <ref> [2] </ref> (and, to a lesser extent, Reference [15]) contend that because we do not yet know the service needs of future applications, the most important goal is to design flexible and efficient packet scheduling implementations. <p> More recently, Jacobson and Floyd [15, 25] have discussed the possibility of hierarchical link-sharing, and have proposed a mechanism to accomplish this. Steenstrup [34] has also proposed a mechanism for such hierarchical sharing. In most of these works <ref> [2, 7, 25] </ref>, the service model has been implicitly defined by the mechanism itself. Recently, Floyd [15] has provided a more principled description of the service 31 model, independent of the implementing mechanism. This service model is, in general outline, somewhat similar to what we have proposed.
Reference: [3] <author> D. Clark, S. Shenker, and L. Zhang. </author> <title> Supporting Real-Time Applications in an Integrated Services Packet Network: </title> <booktitle> Architecture and Mechanism In Proceedings of SIGCOMM '92, </booktitle> <pages> pp 14-26, </pages> <year> 1992. </year>
Reference-contexts: In fact, admission control is but one kind of denial of service; we will discuss the several varieties of denial of service and their role in allowing the scheduling algorithm to meet service commitments. This work is a revised version of the first half of Reference <ref> [3] </ref>, which contains an embryonic form of the thinking presented here. However, we would like to acknowledge that the thoughts discussed in this paper also reflect the contributions of many others. <p> We review the related literature in Section 6 A fuller description of this packet scheduling algorithm will be forthcoming in a revision of the mechanism presented in the second half of Reference <ref> [3] </ref>. 4 9, and then conclude in Section 10. 2 Service Commitments A service model is made up of service commitments; that is, a service model describes what service the network commits to deliver in response to a particular service request. <p> The combination of &lt; A G &gt; and G must provide perfectly reliable bounds, which means that the service a guaranteed flow gets must not be greatly affected by the behavior of other traffic flows. Thus, as we argue in <ref> [3] </ref>, the key heuristic to keep in mind when designing these algorithms is isolation; the scheduling algorithm must isolate the flows from one another. <p> Since we need not provide a perfectly reliable bound, isolation is not the most important requirement. In fact, isolation is counterproductive for predictive traffic and, as we argued in <ref> [3] </ref>, the key heuristic here is sharing; sharing enables a particular flow's transient burst of traffic to pass through a switch without those packets experiencing overly large delays by spreading the delay around to other flows. Thus, an appropriate scheduling discipline is FIFO. (Actually, as we argue in [3], one can <p> argued in <ref> [3] </ref>, the key heuristic here is sharing; sharing enables a particular flow's transient burst of traffic to pass through a switch without those packets experiencing overly large delays by spreading the delay around to other flows. Thus, an appropriate scheduling discipline is FIFO. (Actually, as we argue in [3], one can extend this notion of sharing across switches and then an appropriate scheduling algorithm is what we called FIFO+.) Since we may want to offer several different delay bounds, we will employ a multi-level strict priority queue. The service model for link-sharing revolved around an idealized fluid model. <p> Instead, we mention only a few representative references. Furthermore, we focus exclusively on the issue of the service model and do not discuss to any great extent the underlying scheduling algorithm (for a review of the scheduling algorithms, see <ref> [3] </ref>). The motivating principle of this work is that the service model is primary.
Reference: [4] <author> R. Chipalkatti, J. Kurose, and D. Towsley. </author> <title> Scheduling Policies for Real-Time and Non-Real-Time Traffic in a Statistical Multiplexer, </title> <booktitle> In Proceedings of GlobeCom '89, </booktitle> <pages> pp 774-783, </pages> <year> 1989. </year>
Reference-contexts: In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. <ref> [4, 20, 29, 33, 37] </ref>, Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter.
Reference: [5] <author> R. Cocchi, D. Estrin, S. Shenker, and L. Zhang. </author> <title> A Study of Priority Pricing in Multiple Service Class Networks, </title> <booktitle> In Proceedings of SIGCOMM '91, </booktitle> <pages> pp 123-130, </pages> <year> 1991. </year>
Reference-contexts: We conclude with one last observation: pricing must be a basic part of any complete ISPN architecture. If all services are free, there is no incentive to request less than the best service the network can provide, which will not produce effective utilization of the network's resources (see Reference <ref> [5, 6, 32] </ref> for a discussion of these issues). The sharing model in existing datagram 33 networks deals with overload by giving everyone equally poor service; the equivalent in real-time services would be to refuse a high fraction of requests, which would be very unsatisfactory.
Reference: [6] <author> R. Cocchi, D. Estrin, S. Shenker, and L. Zhang. </author> <title> Pricing in Computer Networks: Motivation, Formulation, and Example, </title> <type> preprint, </type> <year> 1992. </year>
Reference-contexts: (which, as we mentioned earlier, is probably more a function of the average delay than of the maximum delay), and so the service 13 Efficiency can be thought of as the number of applications that can be simultaneously serviced with a given amount of bandwidth; for a fuller definition, see <ref> [6, 32] </ref>. 14 We choose not to use the term "best-effort" for the ASAP service since that connotes the FIFO service discipline. <p> We conclude with one last observation: pricing must be a basic part of any complete ISPN architecture. If all services are free, there is no incentive to request less than the best service the network can provide, which will not produce effective utilization of the network's resources (see Reference <ref> [5, 6, 32] </ref> for a discussion of these issues). The sharing model in existing datagram 33 networks deals with overload by giving everyone equally poor service; the equivalent in real-time services would be to refuse a high fraction of requests, which would be very unsatisfactory.
Reference: [7] <author> J. Davin and A. Heybey. </author> <title> A Simulation Study of Fair Queueing and Policy Enforcement, </title> <journal> In Computer Communication Review, </journal> <volume> 20(5), </volume> <pages> pp 23-29, </pages> <year> 1990. </year>
Reference-contexts: This straightforward realization of the fluid processor sharing model produces the WFQ scheduling algorithm (its use for link-sharing was first explored in <ref> [7] </ref>). The WFQ algorithm can be extended to a hierarchical WFQ algorithm to match the service model of hierarchical link-sharing. However, we assume that one could modify several other algorithms, such as weighted round-robin or VirtualClock, to provide reasonable approximations to this service model. <p> The link-sharing service model has been informally discussed for years, but has rarely been written about. One exception is the work of Davin and Heybey (see <ref> [7] </ref>), where an approximation to the WFQ algorithm was used to share a link between several agencies. More recently, Jacobson and Floyd [15, 25] have discussed the possibility of hierarchical link-sharing, and have proposed a mechanism to accomplish this. Steenstrup [34] has also proposed a mechanism for such hierarchical sharing. <p> More recently, Jacobson and Floyd [15, 25] have discussed the possibility of hierarchical link-sharing, and have proposed a mechanism to accomplish this. Steenstrup [34] has also proposed a mechanism for such hierarchical sharing. In most of these works <ref> [2, 7, 25] </ref>, the service model has been implicitly defined by the mechanism itself. Recently, Floyd [15] has provided a more principled description of the service 31 model, independent of the implementing mechanism. This service model is, in general outline, somewhat similar to what we have proposed.
Reference: [8] <author> A. Demers, S. Keshav, and S. Shenker. </author> <title> Analysis and Simulation of a Fair Queueing Algorithm, </title> <journal> In Journal of Internetworking: Research and Experience, </journal> <volume> 1, </volume> <pages> pp. 3-26, </pages> <year> 1990. </year> <booktitle> Also in Proc. ACM SIGCOMM '89, </booktitle> <pages> pp 3-12. 34 </pages>
Reference-contexts: This policy embodies a "use-it-or-lose-it" philosophy in that the firms are not given credit at a later date for currently unused bandwidth. An idealized fluid model of instantaneous link-sharing with proportional sharing of excess is the fluid processor sharing model (introduced in <ref> [8] </ref> and further explored in [30, 31]) where at every instant the available bandwidth is shared between the active entities (i.e., those having packets in the queue) in proportion to the assigned shares of the resource. <p> There are many choices for &lt; A G &gt; and G: for instance, the "stop-and-go" algorithm in [16, 17], the hierarchical round-robin in [28], the J-EDD and D-EDD schemes in [12, 14, 35], the weighted round-robin algorithm described in [2, 25], and the weighted fair queueing (WFQ) algorithm described in <ref> [8] </ref> and later analyzed in [30, 31]. <p> The service model for link-sharing revolved around an idealized fluid model. The connection between such fluid models and actual scheduling disciplines is discussed in <ref> [8] </ref> and [30, 31]; suffice it here to say that this connection is usually done by assigning, in the real switch, a "timestamp" to each real packet based on when all the bits in the corresponding idealized packet have been transmitted in the fluid model, and then using these timestamps to <p> Denial of service, in all of its incarnations, plays a fundamental role in meeting quantitative service commitments. 17 This does not address any of the congestion control issues that arise with elastic traffic. Congestion control may necesitate using some variant of Fair Queueing <ref> [8] </ref> along with some form of congestion feedback. 25 Since this paper is primarily about scheduling service models, and consequently focuses on the service actually delivered by the network as opposed to the service denied by the network, we do not address in detail the algorithms used to deny service. <p> Such schemes include the WFQ (see <ref> [8] </ref>; also see citeP-G,ap-thesis which refers to this as the PGPS algorithm), Delay-EDD (see [14]), and Hierarchical Round Robin (see [28]). This service model is identical to our guaranteed service model; this can be considered the canonical service model for supporting real-time applications.
Reference: [9] <author> J. DeTreville and D. Sincoskie. </author> <title> A Distributed Experimental Communications System, </title> <journal> In IEEE JSAC, </journal> <volume> Vol. 1, No. 6, </volume> <pages> pp 1070-1075, </pages> <month> December </month> <year> 1983. </year>
Reference-contexts: Video can be made to adapt by dropping or replaying a frame as necessary, and voice can adapt imperceptibly by adjusting silent periods. In fact, such adaptive approaches have been employed in packetized voice applications since the early 70's (see <ref> [9, 36] </ref>); the VT [1] and VAT [26] packet voice protocols, which are currently used to transmit voice on the Internet, are living examples of such adaptive applications. Third, we believe that most playback applications will have sufficient buffering to store packets until their playback point.
Reference: [10] <author> F. Dix, M. Kelly, and R. Klessig. </author> <title> Access to a Public Switched Multi-Megabit Data Service Offering, </title> <journal> In Computer Communication Review, </journal> <volume> 20(3), </volume> <pages> pp 36-61, </pages> <year> 1990. </year>
Reference-contexts: In fact, we explicitly rejected such statistically characterized service offerings (in Section 3.1) because they inherently require a statistical characterization of individual flows (or at least of the aggregate traffic), and we doubt that such characterizations will be available. The SMDS service interface (see <ref> [10] </ref>) offers a fixed delay bound (independent of path) with an assurance that a given percentage of the traffic will meet that bound. The statistical characterization offered here is more similar to our predictive service, in that it applies only over long time intervals.
Reference: [11] <author> D. Ferrari. </author> <title> Client Requirements for Real-Time Communication Services, </title> <journal> In IEEE Communications Magazine, </journal> <volume> 28(11), </volume> <month> November </month> <year> 1990. </year>
Reference-contexts: Much of the recent quality of service literature concentrates on the support of real-time applications. As is most clearly spelled out in References <ref> [11, 13] </ref>, the consensus of the literature is that the appropriate service model for these real-time applications is to provide a priori delay bounds. We should note that there is another viewpoint on this issue, which has not yet been adequately articulated in the literature. <p> One such scheme is the Jitter-EDD scheme (see <ref> [11, 35] </ref>).
Reference: [12] <author> D. Ferrari. </author> <title> Distributed Delay Jitter Control in Packet-Switching Internetworks, </title> <journal> In Journal of Internetworking: Research and Experience, </journal> <volume> 4, </volume> <pages> pp. 1-20, </pages> <year> 1993. </year>
Reference-contexts: We should note that there have been many other packet scheduling algorithms proposed in the literature (see, for example, <ref> [12, 14, 16, 17, 25, 28, 30, 31, 35] </ref>), and they too implement various pieces of our service model. A packet scheduling algorithm is only part of a complete mechanism to support explicit qualities of service. <p> However, we would like to acknowledge that the thoughts discussed in this paper also reflect the contributions of many others. In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. <ref> [12, 14, 35] </ref>, Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. <p> There are many choices for &lt; A G &gt; and G: for instance, the "stop-and-go" algorithm in [16, 17], the hierarchical round-robin in [28], the J-EDD and D-EDD schemes in <ref> [12, 14, 35] </ref>, the weighted round-robin algorithm described in [2, 25], and the weighted fair queueing (WFQ) algorithm described in [8] and later analyzed in [30, 31].
Reference: [13] <author> D. Ferrari, A. Banerjea, and H. </author> <title> Zhang Network Support for Multimedia, </title> <type> preprint, </type> <year> 1992. </year>
Reference-contexts: Much of the recent quality of service literature concentrates on the support of real-time applications. As is most clearly spelled out in References <ref> [11, 13] </ref>, the consensus of the literature is that the appropriate service model for these real-time applications is to provide a priori delay bounds. We should note that there is another viewpoint on this issue, which has not yet been adequately articulated in the literature.
Reference: [14] <author> D. Ferrari and D. Verma. </author> <title> A Scheme for Real-Time Channel Establishment in Wide-Area Networks, </title> <journal> In IEEE JSAC, </journal> <volume> Vol. 8, No. 3, </volume> <pages> pp 368-379, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: We should note that there have been many other packet scheduling algorithms proposed in the literature (see, for example, <ref> [12, 14, 16, 17, 25, 28, 30, 31, 35] </ref>), and they too implement various pieces of our service model. A packet scheduling algorithm is only part of a complete mechanism to support explicit qualities of service. <p> scheduling service model and on the architecture of scheduling algorithms, it is important to keep in mind that admission control plays a crucial role in allowing these scheduling algorithms to be effective by keeping the aggregate traffic load down to a level where meeting the service commitments is feasible (see <ref> [14, 19, 23, 27] </ref> for examples of admission control algorithms). In fact, admission control is but one kind of denial of service; we will discuss the several varieties of denial of service and their role in allowing the scheduling algorithm to meet service commitments. <p> However, we would like to acknowledge that the thoughts discussed in this paper also reflect the contributions of many others. In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. <ref> [12, 14, 35] </ref>, Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. <p> There are many choices for &lt; A G &gt; and G: for instance, the "stop-and-go" algorithm in [16, 17], the hierarchical round-robin in [28], the J-EDD and D-EDD schemes in <ref> [12, 14, 35] </ref>, the weighted round-robin algorithm described in [2, 25], and the weighted fair queueing (WFQ) algorithm described in [8] and later analyzed in [30, 31]. <p> This characterization gives the network the information necessary to determine if it can indeed commit to providing the requested delay bounds. The request is denied if the network determines that it cannot reliably provide the requested service. References <ref> [14, 19, 23, 27] </ref> discuss various approaches to admission control. In addition, a service model could offer a preemptable flow service, presumably for a lower cost than non-preemptable service. <p> Such schemes include the WFQ (see [8]; also see citeP-G,ap-thesis which refers to this as the PGPS algorithm), Delay-EDD (see <ref> [14] </ref>), and Hierarchical Round Robin (see [28]). This service model is identical to our guaranteed service model; this can be considered the canonical service model for supporting real-time applications. <p> A rather different form of service model is the offering of statistical characterizations of performance. The Statistical-EDD scheme (see <ref> [14] </ref>) offers a delay bound and the probability that bound will be violated. In the MARS scheme, delay bounds are firm but there is a statistical characterization of packet loss (see [21, 22]).
Reference: [15] <author> S. Floyd. Link-sharing, </author> <title> resource management, and the future internet, </title> <type> preprint, </type> <year> 1993. </year>
Reference-contexts: While there are many packet scheduling algorithms which realize the ISPN service model, we argue that they all must conform to the basic 5 Reference [2], and to a lesser extent reference <ref> [15] </ref>, also focus on flexibility of the packet scheduler as a primary design objective. We discuss this at greater length in Section 9. 3 architecture that we develop. <p> However, we would like to acknowledge that the thoughts discussed in this paper also reflect the contributions of many others. In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd <ref> [2, 25, 15] </ref>, Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. <p> In our taxonomy, some applications needed explicit assurances about the network delays (the real-time applications), and others needed no such assurances (the elastic applications). However, the universal assumption was that most 18 Reference <ref> [15] </ref> discusses using link-sharing ideas to control such dropping decisions; while this is one possible approach, more general approaches are also possible. 28 applications expected that all (or almost all) of their data would be delivered. <p> The motivating principle of this work is that the service model is primary. However, Reference [2] (and, to a lesser extent, Reference <ref> [15] </ref>) contend that because we do not yet know the service needs of future applications, the most important goal is to design flexible and efficient packet scheduling implementations. <p> The link-sharing service model has been informally discussed for years, but has rarely been written about. One exception is the work of Davin and Heybey (see [7]), where an approximation to the WFQ algorithm was used to share a link between several agencies. More recently, Jacobson and Floyd <ref> [15, 25] </ref> have discussed the possibility of hierarchical link-sharing, and have proposed a mechanism to accomplish this. Steenstrup [34] has also proposed a mechanism for such hierarchical sharing. In most of these works [2, 7, 25], the service model has been implicitly defined by the mechanism itself. <p> Steenstrup [34] has also proposed a mechanism for such hierarchical sharing. In most of these works [2, 7, 25], the service model has been implicitly defined by the mechanism itself. Recently, Floyd <ref> [15] </ref> has provided a more principled description of the service 31 model, independent of the implementing mechanism. This service model is, in general outline, somewhat similar to what we have proposed. <p> Few of the above works focus on the service model independently of a particular realization. Consequently, they have typically not addressed the issue of the existence of a general scheduling architecture that we have proposed here. The only exception to this is the recent work of Floyd <ref> [15] </ref>. We have argued for a precedence ordering between the various scheduling goals, with real-time objectives taking precedence over link-sharing objectives. In contrast, Floyd views link-sharing as coequal with real-time objectives, and argues that in some cases the link-sharing goals should cause real-time bounds to be violated.
Reference: [16] <author> S. J. Golestani. </author> <title> A Stop and Go Queueing Framework for Congestion Management, </title> <booktitle> In Proceedings of SIGCOMM '90, </booktitle> <pages> pp 8-18, </pages> <year> 1990. </year>
Reference-contexts: We should note that there have been many other packet scheduling algorithms proposed in the literature (see, for example, <ref> [12, 14, 16, 17, 25, 28, 30, 31, 35] </ref>), and they too implement various pieces of our service model. A packet scheduling algorithm is only part of a complete mechanism to support explicit qualities of service. <p> However, we would like to acknowledge that the thoughts discussed in this paper also reflect the contributions of many others. In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani <ref> [16, 17] </ref>, Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. <p> Thus, as we argue in [3], the key heuristic to keep in mind when designing these algorithms is isolation; the scheduling algorithm must isolate the flows from one another. There are many choices for &lt; A G &gt; and G: for instance, the "stop-and-go" algorithm in <ref> [16, 17] </ref>, the hierarchical round-robin in [28], the J-EDD and D-EDD schemes in [12, 14, 35], the weighted round-robin algorithm described in [2, 25], and the weighted fair queueing (WFQ) algorithm described in [8] and later analyzed in [30, 31]. <p> One such scheme is the Jitter-EDD scheme (see [11, 35]). The original Stop-and-Go scheme (see <ref> [16] </ref>) provides a jitter bound, which is a universal bound on the difference between the maximum and minimum delays which applies to all flows, no matter what network path their traffic takes, and no matter what their offered load is (as long as it conforms to the characterization handed to admission
Reference: [17] <author> S. J. Golestani. </author> <title> Duration-Limited Statistical Multiplexing of Delay Sensitive Traffic in Packet Networks, </title> <booktitle> In Proceedings of INFOCOM '91, </booktitle> <year> 1991. </year>
Reference-contexts: We should note that there have been many other packet scheduling algorithms proposed in the literature (see, for example, <ref> [12, 14, 16, 17, 25, 28, 30, 31, 35] </ref>), and they too implement various pieces of our service model. A packet scheduling algorithm is only part of a complete mechanism to support explicit qualities of service. <p> However, we would like to acknowledge that the thoughts discussed in this paper also reflect the contributions of many others. In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani <ref> [16, 17] </ref>, Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. <p> Thus, as we argue in [3], the key heuristic to keep in mind when designing these algorithms is isolation; the scheduling algorithm must isolate the flows from one another. There are many choices for &lt; A G &gt; and G: for instance, the "stop-and-go" algorithm in <ref> [16, 17] </ref>, the hierarchical round-robin in [28], the J-EDD and D-EDD schemes in [12, 14, 35], the weighted round-robin algorithm described in [2, 25], and the weighted fair queueing (WFQ) algorithm described in [8] and later analyzed in [30, 31]. <p> The maximum delay bound will depend on the path, but the jitter bound depends only on the frame size of the network which is fixed. Subsequent enhancements to this scheme (see <ref> [17] </ref>) enable the network to provide several different values of jitter bounds.
Reference: [18] <author> R. Guerin and L. Gun. </author> <title> A Unified Approach to Bandwidth Allocation and Access Control in Fast Packet-Switched Networks, </title> <booktitle> In Proceedings of INFOCOM '92. </booktitle>
Reference-contexts: However, we would like to acknowledge that the thoughts discussed in this paper also reflect the contributions of many others. In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. <ref> [18, 19] </ref>, Kurose et al. [4, 20, 29, 33, 37], Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. <p> Another scheme which attempts to provide a reliable bound, but does not give a precise estimate of the probability of violation, is implicitly defined by the equivalent capacity approximations in References <ref> [18, 19] </ref>; these approximations, when used in an admission control scheme, can ensure with high reliability that delay bounds are not violated. The link-sharing service model has been informally discussed for years, but has rarely been written about.
Reference: [19] <author> R. Guerin, H. Ahmadi, and M. Naghshineh. </author> <title> Equivalent Capacity and Its Application to Bandwidth Allocation in High-Speed Networks, </title> <journal> In IEEE JSAC, </journal> <volume> Vol. 9, No. 9, </volume> <pages> pp 968-981, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: scheduling service model and on the architecture of scheduling algorithms, it is important to keep in mind that admission control plays a crucial role in allowing these scheduling algorithms to be effective by keeping the aggregate traffic load down to a level where meeting the service commitments is feasible (see <ref> [14, 19, 23, 27] </ref> for examples of admission control algorithms). In fact, admission control is but one kind of denial of service; we will discuss the several varieties of denial of service and their role in allowing the scheduling algorithm to meet service commitments. <p> However, we would like to acknowledge that the thoughts discussed in this paper also reflect the contributions of many others. In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. <ref> [18, 19] </ref>, Kurose et al. [4, 20, 29, 33, 37], Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. <p> This characterization gives the network the information necessary to determine if it can indeed commit to providing the requested delay bounds. The request is denied if the network determines that it cannot reliably provide the requested service. References <ref> [14, 19, 23, 27] </ref> discuss various approaches to admission control. In addition, a service model could offer a preemptable flow service, presumably for a lower cost than non-preemptable service. <p> Another scheme which attempts to provide a reliable bound, but does not give a precise estimate of the probability of violation, is implicitly defined by the equivalent capacity approximations in References <ref> [18, 19] </ref>; these approximations, when used in an admission control scheme, can ensure with high reliability that delay bounds are not violated. The link-sharing service model has been informally discussed for years, but has rarely been written about.
Reference: [20] <author> J. Kurose. </author> <title> Open Issues and Challenges in Providing Quality of Service Guarantees in High-Speed Networks, </title> <journal> In Computer Communication Review, </journal> <volume> 23(1), </volume> <pages> pp 6-15, </pages> <year> 1993. </year>
Reference-contexts: In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. <ref> [4, 20, 29, 33, 37] </ref>, Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter.
Reference: [21] <author> J. Hyman and A. Lazar. </author> <title> MARS: The Magnet II Real-Time Scheduling Algorithm, </title> <booktitle> In Proceedings of SIGCOMM '91, </booktitle> <pages> pp 285-293, </pages> <year> 1991. </year>
Reference-contexts: In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. <ref> [21, 22, 23, 24] </ref>, and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. Discussions with the End-to-End Services Research Group, the authors of the above works, and many of our other colleagues have also been instrumental in clarifying our thoughts. <p> The Statistical-EDD scheme (see [14]) offers a delay bound and the probability that bound will be violated. In the MARS scheme, delay bounds are firm but there is a statistical characterization of packet loss (see <ref> [21, 22] </ref>). In some ways, these service offerings are similar to the predictive delay bounds included in our service model; however, we do not supply a precise estimate of the probability.
Reference: [22] <author> J. Hyman, A. Lazar, and G. Pacifici. </author> <title> Real-Time Scheduling with Quality of Service Constraints, </title> <journal> In IEEE JSAC, </journal> <volume> Vol. 9, No. 9, </volume> <pages> pp 1052-1063, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. <ref> [21, 22, 23, 24] </ref>, and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. Discussions with the End-to-End Services Research Group, the authors of the above works, and many of our other colleagues have also been instrumental in clarifying our thoughts. <p> The Statistical-EDD scheme (see [14]) offers a delay bound and the probability that bound will be violated. In the MARS scheme, delay bounds are firm but there is a statistical characterization of packet loss (see <ref> [21, 22] </ref>). In some ways, these service offerings are similar to the predictive delay bounds included in our service model; however, we do not supply a precise estimate of the probability.
Reference: [23] <author> J. Hyman, A. Lazar, and G. Pacifici. </author> <title> Joint Scheduling and Admission Control for ATS-based Switching Nodes, </title> <booktitle> In Proceedings of SIGCOMM '92, </booktitle> <year> 1992. </year>
Reference-contexts: scheduling service model and on the architecture of scheduling algorithms, it is important to keep in mind that admission control plays a crucial role in allowing these scheduling algorithms to be effective by keeping the aggregate traffic load down to a level where meeting the service commitments is feasible (see <ref> [14, 19, 23, 27] </ref> for examples of admission control algorithms). In fact, admission control is but one kind of denial of service; we will discuss the several varieties of denial of service and their role in allowing the scheduling algorithm to meet service commitments. <p> In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. <ref> [21, 22, 23, 24] </ref>, and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. Discussions with the End-to-End Services Research Group, the authors of the above works, and many of our other colleagues have also been instrumental in clarifying our thoughts. <p> This characterization gives the network the information necessary to determine if it can indeed commit to providing the requested delay bounds. The request is denied if the network determines that it cannot reliably provide the requested service. References <ref> [14, 19, 23, 27] </ref> discuss various approaches to admission control. In addition, a service model could offer a preemptable flow service, presumably for a lower cost than non-preemptable service.
Reference: [24] <author> J. Hyman, A. Lazar, and G. Pacifici. </author> <title> A Separation Principle Between Scheduling and Admission Control for Broadband Switching, </title> <journal> In IEEE JSAC, </journal> <volume> Vol. 11, No. 4, </volume> <pages> pp 605-616, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. <ref> [21, 22, 23, 24] </ref>, and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. Discussions with the End-to-End Services Research Group, the authors of the above works, and many of our other colleagues have also been instrumental in clarifying our thoughts.
Reference: [25] <author> V. Jacobson and S. </author> <type> Floyd private communication, </type> <year> 1991. </year> <month> 35 </month>
Reference-contexts: We should note that there have been many other packet scheduling algorithms proposed in the literature (see, for example, <ref> [12, 14, 16, 17, 25, 28, 30, 31, 35] </ref>), and they too implement various pieces of our service model. A packet scheduling algorithm is only part of a complete mechanism to support explicit qualities of service. <p> However, we would like to acknowledge that the thoughts discussed in this paper also reflect the contributions of many others. In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd <ref> [2, 25, 15] </ref>, Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. <p> Heretofore we have considered link-sharing across a set of entities with no internal structure to the entities themselves. However, the various sorts of link-sharing requirements presented above could conceivably be nested into a hierarchy of link-sharing requirements, an idea first proposed by Jacobson and Floyd <ref> [25] </ref>. For instance, a link could be divided between a number of organizations, each of which would divide the resulting allocation among a number of protocols, each of which would be divided among a number of services. <p> There are many choices for &lt; A G &gt; and G: for instance, the "stop-and-go" algorithm in [16, 17], the hierarchical round-robin in [28], the J-EDD and D-EDD schemes in [12, 14, 35], the weighted round-robin algorithm described in <ref> [2, 25] </ref>, and the weighted fair queueing (WFQ) algorithm described in [8] and later analyzed in [30, 31]. <p> The link-sharing service model has been informally discussed for years, but has rarely been written about. One exception is the work of Davin and Heybey (see [7]), where an approximation to the WFQ algorithm was used to share a link between several agencies. More recently, Jacobson and Floyd <ref> [15, 25] </ref> have discussed the possibility of hierarchical link-sharing, and have proposed a mechanism to accomplish this. Steenstrup [34] has also proposed a mechanism for such hierarchical sharing. In most of these works [2, 7, 25], the service model has been implicitly defined by the mechanism itself. <p> More recently, Jacobson and Floyd [15, 25] have discussed the possibility of hierarchical link-sharing, and have proposed a mechanism to accomplish this. Steenstrup [34] has also proposed a mechanism for such hierarchical sharing. In most of these works <ref> [2, 7, 25] </ref>, the service model has been implicitly defined by the mechanism itself. Recently, Floyd [15] has provided a more principled description of the service 31 model, independent of the implementing mechanism. This service model is, in general outline, somewhat similar to what we have proposed.
Reference: [26] <author> V. </author> <type> Jacobson private communication, </type> <year> 1991. </year>
Reference-contexts: Video can be made to adapt by dropping or replaying a frame as necessary, and voice can adapt imperceptibly by adjusting silent periods. In fact, such adaptive approaches have been employed in packetized voice applications since the early 70's (see [9, 36]); the VT [1] and VAT <ref> [26] </ref> packet voice protocols, which are currently used to transmit voice on the Internet, are living examples of such adaptive applications. Third, we believe that most playback applications will have sufficient buffering to store packets until their playback point.
Reference: [27] <author> S. Jamin, S. Shenker, L. Zhang, and D. Clark. </author> <title> An Admission Control Algorithm for Predictive Real-Time Service, </title> <booktitle> In Proceedings of the Third International Workshop on Networking and Operating System Support for Digital Audio and Video, </booktitle> <year> 1992. </year>
Reference-contexts: scheduling service model and on the architecture of scheduling algorithms, it is important to keep in mind that admission control plays a crucial role in allowing these scheduling algorithms to be effective by keeping the aggregate traffic load down to a level where meeting the service commitments is feasible (see <ref> [14, 19, 23, 27] </ref> for examples of admission control algorithms). In fact, admission control is but one kind of denial of service; we will discuss the several varieties of denial of service and their role in allowing the scheduling algorithm to meet service commitments. <p> This characterization gives the network the information necessary to determine if it can indeed commit to providing the requested delay bounds. The request is denied if the network determines that it cannot reliably provide the requested service. References <ref> [14, 19, 23, 27] </ref> discuss various approaches to admission control. In addition, a service model could offer a preemptable flow service, presumably for a lower cost than non-preemptable service.
Reference: [28] <author> C. Kalmanek, H. Kanakia, and S. Keshav. </author> <title> Rate Controlled Servers for Very High-Speed Networks, </title> <booktitle> In Proceedings of GlobeCom '90, </booktitle> <pages> pp 300.3.1-300.3.9, </pages> <year> 1990. </year>
Reference-contexts: We should note that there have been many other packet scheduling algorithms proposed in the literature (see, for example, <ref> [12, 14, 16, 17, 25, 28, 30, 31, 35] </ref>), and they too implement various pieces of our service model. A packet scheduling algorithm is only part of a complete mechanism to support explicit qualities of service. <p> In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. [21, 22, 23, 24], and Kalmanek et al. <ref> [28] </ref> have been critical in shaping our thinking on this matter. Discussions with the End-to-End Services Research Group, the authors of the above works, and many of our other colleagues have also been instrumental in clarifying our thoughts. <p> There are many choices for &lt; A G &gt; and G: for instance, the "stop-and-go" algorithm in [16, 17], the hierarchical round-robin in <ref> [28] </ref>, the J-EDD and D-EDD schemes in [12, 14, 35], the weighted round-robin algorithm described in [2, 25], and the weighted fair queueing (WFQ) algorithm described in [8] and later analyzed in [30, 31]. <p> Such schemes include the WFQ (see [8]; also see citeP-G,ap-thesis which refers to this as the PGPS algorithm), Delay-EDD (see [14]), and Hierarchical Round Robin (see <ref> [28] </ref>). This service model is identical to our guaranteed service model; this can be considered the canonical service model for supporting real-time applications.
Reference: [29] <author> R. Nagarajan and J. Kurose. </author> <title> On Defining, Computing, and Guaranteeing Quality-of-Service in High-Speed Networks, </title> <booktitle> In Proceedings of INFOCOM '92, </booktitle> <year> 1992. </year>
Reference-contexts: In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. <ref> [4, 20, 29, 33, 37] </ref>, Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. <p> control nonextremal measures of packet delay for the aggregate traffic in the network, this does not control the value of such measures for individual flows; e.g., the average delay observed by a particular flow need not be the same as, or even bounded by, the average of the aggregate (see <ref> [29] </ref> for a discussion of related issues). Thus, controlling nonextremal measures of delay for the aggregate is not sufficient, and we judge it impractical to control nonextremal measures of delay for each individual flow.
Reference: [30] <author> A. Parekh and R. Gallager. </author> <title> A Generalized Processor Sharing Approach to Flow Control- The Single Node Case, </title> <note> In Technical Report LIDS-TR-2040, </note> <institution> Laboratory for Information and Decision Systems, Massachusetts Institute of Technology, </institution> <year> 1991. </year>
Reference-contexts: We should note that there have been many other packet scheduling algorithms proposed in the literature (see, for example, <ref> [12, 14, 16, 17, 25, 28, 30, 31, 35] </ref>), and they too implement various pieces of our service model. A packet scheduling algorithm is only part of a complete mechanism to support explicit qualities of service. <p> However, we would like to acknowledge that the thoughts discussed in this paper also reflect the contributions of many others. In particular, the works of Parekh and Gallager <ref> [30, 31] </ref>, Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this <p> Discussions with the End-to-End Services Research Group, the authors of the above works, and many of our other colleagues have also been instrumental in clarifying our thoughts. In particular, Abhay Parekh has taught us much about the delay bound results in <ref> [30, 31] </ref>. Also, Sally Floyd and Van Jacobson have rightly insisted that packet scheduling algorithms must deal with packet dropping and hierarchical link-sharing; we wish to acknowledge that much of our thinking on the hierarchical nature of link-sharing was stimulated by, and borrows heavily from, their work. <p> This policy embodies a "use-it-or-lose-it" philosophy in that the firms are not given credit at a later date for currently unused bandwidth. An idealized fluid model of instantaneous link-sharing with proportional sharing of excess is the fluid processor sharing model (introduced in [8] and further explored in <ref> [30, 31] </ref>) where at every instant the available bandwidth is shared between the active entities (i.e., those having packets in the queue) in proportion to the assigned shares of the resource. <p> &lt; A G &gt; and G: for instance, the "stop-and-go" algorithm in [16, 17], the hierarchical round-robin in [28], the J-EDD and D-EDD schemes in [12, 14, 35], the weighted round-robin algorithm described in [2, 25], and the weighted fair queueing (WFQ) algorithm described in [8] and later analyzed in <ref> [30, 31] </ref>. <p> The service model for link-sharing revolved around an idealized fluid model. The connection between such fluid models and actual scheduling disciplines is discussed in [8] and <ref> [30, 31] </ref>; suffice it here to say that this connection is usually done by assigning, in the real switch, a "timestamp" to each real packet based on when all the bits in the corresponding idealized packet have been transmitted in the fluid model, and then using these timestamps to order the
Reference: [31] <author> A. Parekh. </author> <title> A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networks, </title> <note> In Technical Report LIDS-TR-2089, </note> <institution> Laboratory for Information and Decision Systems, Massachusetts Institute of Technology, </institution> <year> 1992. </year>
Reference-contexts: We should note that there have been many other packet scheduling algorithms proposed in the literature (see, for example, <ref> [12, 14, 16, 17, 25, 28, 30, 31, 35] </ref>), and they too implement various pieces of our service model. A packet scheduling algorithm is only part of a complete mechanism to support explicit qualities of service. <p> However, we would like to acknowledge that the thoughts discussed in this paper also reflect the contributions of many others. In particular, the works of Parekh and Gallager <ref> [30, 31] </ref>, Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this <p> Discussions with the End-to-End Services Research Group, the authors of the above works, and many of our other colleagues have also been instrumental in clarifying our thoughts. In particular, Abhay Parekh has taught us much about the delay bound results in <ref> [30, 31] </ref>. Also, Sally Floyd and Van Jacobson have rightly insisted that packet scheduling algorithms must deal with packet dropping and hierarchical link-sharing; we wish to acknowledge that much of our thinking on the hierarchical nature of link-sharing was stimulated by, and borrows heavily from, their work. <p> This policy embodies a "use-it-or-lose-it" philosophy in that the firms are not given credit at a later date for currently unused bandwidth. An idealized fluid model of instantaneous link-sharing with proportional sharing of excess is the fluid processor sharing model (introduced in [8] and further explored in <ref> [30, 31] </ref>) where at every instant the available bandwidth is shared between the active entities (i.e., those having packets in the queue) in proportion to the assigned shares of the resource. <p> &lt; A G &gt; and G: for instance, the "stop-and-go" algorithm in [16, 17], the hierarchical round-robin in [28], the J-EDD and D-EDD schemes in [12, 14, 35], the weighted round-robin algorithm described in [2, 25], and the weighted fair queueing (WFQ) algorithm described in [8] and later analyzed in <ref> [30, 31] </ref>. <p> The service model for link-sharing revolved around an idealized fluid model. The connection between such fluid models and actual scheduling disciplines is discussed in [8] and <ref> [30, 31] </ref>; suffice it here to say that this connection is usually done by assigning, in the real switch, a "timestamp" to each real packet based on when all the bits in the corresponding idealized packet have been transmitted in the fluid model, and then using these timestamps to order the
Reference: [32] <author> S. </author> <title> Shenker Service Models and Pricing Policies for an Integrated Services Internet, to appear in Proceedings of "Public Access to the Internet", </title> <publisher> Harvard University, </publisher> <year> 1993. </year>
Reference-contexts: (which, as we mentioned earlier, is probably more a function of the average delay than of the maximum delay), and so the service 13 Efficiency can be thought of as the number of applications that can be simultaneously serviced with a given amount of bandwidth; for a fuller definition, see <ref> [6, 32] </ref>. 14 We choose not to use the term "best-effort" for the ASAP service since that connotes the FIFO service discipline. <p> We conclude with one last observation: pricing must be a basic part of any complete ISPN architecture. If all services are free, there is no incentive to request less than the best service the network can provide, which will not produce effective utilization of the network's resources (see Reference <ref> [5, 6, 32] </ref> for a discussion of these issues). The sharing model in existing datagram 33 networks deals with overload by giving everyone equally poor service; the equivalent in real-time services would be to refuse a high fraction of requests, which would be very unsatisfactory.
Reference: [33] <author> H. Schulzrinne, J. Kurose, and D. Towsley. </author> <title> Congestion Control for Real-Time Traffic, </title> <booktitle> In Proceedings of INFOCOM '90. </booktitle>
Reference-contexts: In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. <ref> [4, 20, 29, 33, 37] </ref>, Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. <p> The basic idea of allowing applications to mark certain packets to express their "drop preference" and then having the network discard these packets if the network is congested has been circulating in the Internet community for years, and has been simulated in Reference <ref> [33] </ref>. The usual problem in such a scheme is defining what congestion means. In the Internet, with its simple service model, one usually equates congestion with the presence of a sizable queue.
Reference: [34] <author> M. Steenstrup. </author> <title> Fair Share for Resource Allocation, </title> <type> preprint, </type> <year> 1993. </year>
Reference-contexts: More recently, Jacobson and Floyd [15, 25] have discussed the possibility of hierarchical link-sharing, and have proposed a mechanism to accomplish this. Steenstrup <ref> [34] </ref> has also proposed a mechanism for such hierarchical sharing. In most of these works [2, 7, 25], the service model has been implicitly defined by the mechanism itself. Recently, Floyd [15] has provided a more principled description of the service 31 model, independent of the implementing mechanism.
Reference: [35] <author> D. Verma, H. Zhang, and D. Ferrari. </author> <title> Delay Jitter Control for Real-Time Communication in a Packet Switching Network, </title> <booktitle> In Proceedings of TriCom '91, </booktitle> <pages> pp 35-43, </pages> <year> 1991. </year>
Reference-contexts: We should note that there have been many other packet scheduling algorithms proposed in the literature (see, for example, <ref> [12, 14, 16, 17, 25, 28, 30, 31, 35] </ref>), and they too implement various pieces of our service model. A packet scheduling algorithm is only part of a complete mechanism to support explicit qualities of service. <p> However, we would like to acknowledge that the thoughts discussed in this paper also reflect the contributions of many others. In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. <ref> [12, 14, 35] </ref>, Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. [4, 20, 29, 33, 37], Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter. <p> There are many choices for &lt; A G &gt; and G: for instance, the "stop-and-go" algorithm in [16, 17], the hierarchical round-robin in [28], the J-EDD and D-EDD schemes in <ref> [12, 14, 35] </ref>, the weighted round-robin algorithm described in [2, 25], and the weighted fair queueing (WFQ) algorithm described in [8] and later analyzed in [30, 31]. <p> One such scheme is the Jitter-EDD scheme (see <ref> [11, 35] </ref>).
Reference: [36] <author> C. Weinstein and J. Forgie. </author> <title> Experience with Speech Communication in Packet Networks, </title> <journal> In IEEE JSAC, </journal> <volume> Vol. 1, No. 6, </volume> <pages> pp 963-980, </pages> <month> December </month> <year> 1983. </year>
Reference-contexts: Video can be made to adapt by dropping or replaying a frame as necessary, and voice can adapt imperceptibly by adjusting silent periods. In fact, such adaptive approaches have been employed in packetized voice applications since the early 70's (see <ref> [9, 36] </ref>); the VT [1] and VAT [26] packet voice protocols, which are currently used to transmit voice on the Internet, are living examples of such adaptive applications. Third, we believe that most playback applications will have sufficient buffering to store packets until their playback point.
Reference: [37] <author> D. Yates, J. Kurose, D. Towsley, and M. Hluchyj. </author> <title> On Per-Session End-to-End Delay Distribution and the Call Admission Problem for Real Time Applications with QOS Requirements, </title> <note> In Proceedings of SIGCOMM '93, to appear. </note>
Reference-contexts: In particular, the works of Parekh and Gallager [30, 31], Ferrari et al. [12, 14, 35], Jacobson and Floyd [2, 25, 15], Golestani [16, 17], Guerin et al. [18, 19], Kurose et al. <ref> [4, 20, 29, 33, 37] </ref>, Lazar et al. [21, 22, 23, 24], and Kalmanek et al. [28] have been critical in shaping our thinking on this matter.
Reference: [38] <author> L. Zhang. </author> <title> A New Architecture for Packet Switching Network Protocols, </title> <note> In Technical Report LCS-TR-455, </note> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <year> 1989. </year>
Reference-contexts: However, we will choose to use a "stalled" version of the VirtualClock <ref> [38, 39] </ref> algorithm which we will denote SVC and will describe in a later note but is essentially using VirtualClock timestamps to order the guaranteed packets and then only sending packets when their timestamp value is less than or equal to real time (or unless the link would otherwise be idle).
Reference: [39] <author> L. Zhang. VirtualClock: </author> <title> A New Traffic Control Algorithm for Packet Switching Networks, </title> <journal> In ACM Transactions on Computer Systems, </journal> <volume> Vol. 9, No. 2, </volume> <pages> pp 101-124, </pages> <month> May </month> <year> 1991. </year> <booktitle> Also in Proc. ACM SIGCOMM '90, </booktitle> <pages> pp 19-29. 36 </pages>
Reference-contexts: However, we will choose to use a "stalled" version of the VirtualClock <ref> [38, 39] </ref> algorithm which we will denote SVC and will describe in a later note but is essentially using VirtualClock timestamps to order the guaranteed packets and then only sending packets when their timestamp value is less than or equal to real time (or unless the link would otherwise be idle).
References-found: 39

