URL: http://www.cs.pitt.edu/~pollack/distrib/tark98.ps
Refering-URL: http://www.cs.pitt.edu/~pollack/distrib/guide.html
Root-URL: http://www.cs.pitt.edu
Title: Evaluating Options in a Context  
Author: John F. Horty Martha E. Pollack 
Address: College Park, MD 20742  Pittsburgh Pittsburgh, PA 15260  
Affiliation: Institute for Advanced Computer Studies University of Maryland  Department of Computer Science and Intelligent Systems Program University of  
Note: Appears in the 7th Conference on Theoretical Aspects of Rationality and Knowledge (TARK),  
Email: horty@umiacs.umd.edu  pollack@cs.pitt.edu  
Degree: Philosophy Department and  
Date: 1998  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Fahiem Bacchus and Froduald Kabanza. </author> <title> Planning for temporally extended goals. </title> <booktitle> In Proceedings of the 13th National Conference on Artificial Intelligence, </booktitle> <year> 1996. </year>
Reference-contexts: The plan steps are instances of the action types. The planning literature tends to concentrate on qualitative temporal constraints, specifying only the relative order of steps (but see <ref> [1] </ref>). In contrast, we also allow for quantitative constraints, which associate steps with actual time points.
Reference: [2] <author> Michael E. Bratman. </author> <title> Intention, Plans and Practical Reason. </title> <publisher> Harvard University Press, </publisher> <address> Cambridge, MA, </address> <year> 1987. </year>
Reference-contexts: Second, we insist that the task of evaluating an option should be computationally realizable; and in particular, our work here is developed within the theoretical framework first articulated in <ref> [2] </ref>, and then further elaborated in [3, 16], according to which it is best to view a resource-bounded agent as operating always against the background of some current set of intentions, or plans.
Reference: [3] <author> Michael E. Bratman, David J. Israel, and Martha E. Pollack. </author> <title> Plans and resource-bounded practical reasoning. </title> <journal> Computational Intelligence, </journal> <volume> 4 </volume> <pages> 349-355, </pages> <year> 1988. </year>
Reference-contexts: Second, we insist that the task of evaluating an option should be computationally realizable; and in particular, our work here is developed within the theoretical framework first articulated in [2], and then further elaborated in <ref> [3, 16] </ref>, according to which it is best to view a resource-bounded agent as operating always against the background of some current set of intentions, or plans.
Reference: [4] <author> Amedeo Cesta, Angelo Oddi, and Stephen F. Smith. </author> <title> Profile-based algorithms to solve multiple capac-itated metric scheduling problems. </title> <booktitle> In Proceedings of the Fourth International Conference on Artificial Intelligence Planning Systems (AIPS-98), </booktitle> <pages> pages 214-223, </pages> <year> 1998. </year>
Reference-contexts: Although in the worst case, solving a CSP is computation-ally intractable, there are a number of powerful techniques that are known to work very well in practice, and in fact, have recently been applied to large planning and scheduling problems <ref> [5, 11, 12, 4] </ref>. The algorithm We now present our algorithm, depicted in Figure 1, for evaluating an option P in the context C, under the assumption that the two plans are strongly compatible. The algorithm works with two stepset lattices, based on the plans C and P [ C.
Reference: [5] <author> C. Cheng and S. F. Smith. </author> <title> Generating feasible schedules under complex metric constraints. </title> <booktitle> In Proceedings of the 12th National Conference on Artificial Intelligence (AAAI-94), </booktitle> <year> 1994. </year>
Reference-contexts: Although in the worst case, solving a CSP is computation-ally intractable, there are a number of powerful techniques that are known to work very well in practice, and in fact, have recently been applied to large planning and scheduling problems <ref> [5, 11, 12, 4] </ref>. The algorithm We now present our algorithm, depicted in Figure 1, for evaluating an option P in the context C, under the assumption that the two plans are strongly compatible. The algorithm works with two stepset lattices, based on the plans C and P [ C.
Reference: [6] <author> Richard Goodwin and Reid Simmons. </author> <title> Search control of plan generation in decision-theoretic planners. </title> <booktitle> In Proceedings of the Fourth International Conference on Artificial Intelligence Planning Systems (AIPS-98), </booktitle> <pages> pages 94-101, </pages> <year> 1998. </year>
Reference-contexts: Cost estimates, so defined, accurately bound the actual cost of a plan, and are thus related to the interval measures of plan cost used in the decision-theoretic plan generation literature <ref> [21, 7, 6] </ref>. We now show that, under certain coherence conditions, a cost estimate for a plan in context can be derived from a cost estimate for the context together with a cost estimate for the plan and context combined. <p> First, it simplifies the base algorithm; see [20] for an example of this applied to classical plan generation. Second, it allows for separate, focused investigation of heuristics for efficient control, something we are now exploring in our ongoing work. Recent work in decision-theoretic plan generation <ref> [6] </ref> has analyzed the use of interval-based utility estimates in finding optimal plans, and there is potential for the transfer of this analysis to our framework. However, we defer consideration of this issue to subsequent work.
Reference: [7] <author> P. Haddawy, A. Doan, and R. Goodwin. </author> <title> Efficient decision-theoretic planning: techniques and empirical analysis. </title> <booktitle> In Proceedings of the 11th Conference on Uncertainty in Artificial Intelligence, </booktitle> <year> 1995. </year>
Reference-contexts: Cost estimates, so defined, accurately bound the actual cost of a plan, and are thus related to the interval measures of plan cost used in the decision-theoretic plan generation literature <ref> [21, 7, 6] </ref>. We now show that, under certain coherence conditions, a cost estimate for a plan in context can be derived from a cost estimate for the context together with a cost estimate for the plan and context combined.
Reference: [8] <author> Ronald A. Howard and James E. Matheson, </author> <title> editors. The Principles and Applications of Decision Analysis. Strategic Decision Group, </title> <address> Menlo Park, CA, </address> <year> 1984. </year>
Reference-contexts: A good deal of attention has been devoted to the structure of those utility functions that might actually be thought to underlie human decision making [9], and the more applied literature on decision analysis has focused on the task of eliciting such preference information from humans <ref> [8] </ref>. When we attempt to build artificial agents that are capable of making rational decisions, we likewise need to provide them with techniques for evaluating the options they encounter. Our approach to this problem|the rational evaluation of options|differs in two important ways from that of classical decision theory.
Reference: [9] <author> Daniel Kahneman and Amos Tversky. </author> <title> Prospect theory: an analysis of decision under risk. </title> <journal> Econometrica, </journal> <volume> 47 </volume> <pages> 263-291, </pages> <year> 1979. </year>
Reference-contexts: A good deal of attention has been devoted to the structure of those utility functions that might actually be thought to underlie human decision making <ref> [9] </ref>, and the more applied literature on decision analysis has focused on the task of eliciting such preference information from humans [8]. When we attempt to build artificial agents that are capable of making rational decisions, we likewise need to provide them with techniques for evaluating the options they encounter.
Reference: [10] <author> Subbarao Kambhampati, Craig A. Knoblock, and Qiang Yang. </author> <title> Planning as refinement search: A unified framework for evaluating design tradeoffs in partial-order planning. </title> <journal> Artificial Intelligence, </journal> <volume> 76(1-2):167-238, </volume> <year> 1995. </year>
Reference-contexts: We begin by adapting the notion of refinement <ref> [10] </ref> from the plan generation literature. Definition 6 (Refinement; v ) Let P = hS; O; Li and P 0 = hS 0 ; O 0 ; L 0 i be plans.
Reference: [11] <author> Henry Kautz and Bart Selman. </author> <title> Pushing the envelope: Planning, propositional logic, and stochastic search. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence (AAAI), </booktitle> <address> Portland, OR, </address> <year> 1996. </year>
Reference-contexts: Although in the worst case, solving a CSP is computation-ally intractable, there are a number of powerful techniques that are known to work very well in practice, and in fact, have recently been applied to large planning and scheduling problems <ref> [5, 11, 12, 4] </ref>. The algorithm We now present our algorithm, depicted in Figure 1, for evaluating an option P in the context C, under the assumption that the two plans are strongly compatible. The algorithm works with two stepset lattices, based on the plans C and P [ C.
Reference: [12] <author> Henry Kautz and Bart Selman. </author> <title> The role of domain-specific knowledge in the planning as satisfiability framework. </title> <booktitle> In Proceedings of the Fourth International Conference on Artificial Intelligence Planning Systems (AIPS-98), </booktitle> <pages> pages 181-189, </pages> <year> 1998. </year>
Reference-contexts: Although in the worst case, solving a CSP is computation-ally intractable, there are a number of powerful techniques that are known to work very well in practice, and in fact, have recently been applied to large planning and scheduling problems <ref> [5, 11, 12, 4] </ref>. The algorithm We now present our algorithm, depicted in Figure 1, for evaluating an option P in the context C, under the assumption that the two plans are strongly compatible. The algorithm works with two stepset lattices, based on the plans C and P [ C.
Reference: [13] <author> David McAllester and David Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 634-639, </pages> <address> Anaheim, CA, </address> <year> 1991. </year>
Reference-contexts: in which plans might interact, even this very simple setting is sufficiently rich to allow us to illustrate the shape of our theory, and we defer a detailed treatment of more complicated plan interactions to subsequent work. 2 Primitive plans Basic concepts We represent primitive plans using a standard formalism <ref> [13, 20, 15] </ref>, in which a plan consist of a set of steps, temporal constraints on those steps, and causal links, which record dependency relations among steps.
Reference: [14] <author> Tom M. Mitchell. </author> <title> Machine Learning. </title> <publisher> McGraw-Hill Co., Inc., </publisher> <address> New York, </address> <year> 1997. </year>
Reference-contexts: The algorithm works with two stepset lattices, based on the plans C and P [ C. In a fashion somewhat reminiscent of the candidate-elimination algorithm <ref> [14] </ref>, our algorithms maintains, for each lattice, an upper frontier containing the highest nodes in the lattice not yet known to be infeasible, and similarly a lower frontier.
Reference: [15] <author> J. Scott Penberthy and Daniel Weld. UCPOP: </author> <title> A sound, complete, partial order planner for ADL. </title> <booktitle> In Proceedings of the Third International Conference on Knowledge Representation and Reasoning, </booktitle> <pages> pages 103-114, </pages> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: in which plans might interact, even this very simple setting is sufficiently rich to allow us to illustrate the shape of our theory, and we defer a detailed treatment of more complicated plan interactions to subsequent work. 2 Primitive plans Basic concepts We represent primitive plans using a standard formalism <ref> [13, 20, 15] </ref>, in which a plan consist of a set of steps, temporal constraints on those steps, and causal links, which record dependency relations among steps.
Reference: [16] <author> Martha E. Pollack. </author> <title> The uses of plans. </title> <journal> Artificial Intelligence, </journal> <volume> 57 </volume> <pages> 43-68, </pages> <year> 1992. </year>
Reference-contexts: Second, we insist that the task of evaluating an option should be computationally realizable; and in particular, our work here is developed within the theoretical framework first articulated in [2], and then further elaborated in <ref> [3, 16] </ref>, according to which it is best to view a resource-bounded agent as operating always against the background of some current set of intentions, or plans.
Reference: [17] <author> Martha E. Pollack, Ioannis Tsamardinos, Jun Hu, and John F. Horty. </author> <title> Merging temporally grounded plans. </title> <note> In preparation. </note>
Reference-contexts: Again, this immediate rejection of incompatible options is an oversimplification, but one that we adhere to in this paper. Note that the Combine algorithm was not designed for temporally grounded plans, but we are developing a generalization of it that can handle such plans <ref> [17] </ref>. Our focus in this paper is on the second step in the reasoning process, in which the agent computes the cost estimate for plan P in context C.
Reference: [18] <author> Arthur Prior. </author> <title> Past, Present and Future. </title> <publisher> Oxford University Press, </publisher> <address> New York, </address> <year> 1967. </year>
Reference-contexts: Semantics Eventually, we will want to interpret a plan as specifying a set of allowed futures|intuitively, those futures consistent with an execution of the plan. (An interpretation along these lines can be developed within the general logical framework of branching time <ref> [18, 19] </ref>.) For reasons of space, however, we restrict ourselves in this paper to a simpler account, in which complete and scheduled plans, rather than futures, are taken as the points in the semantic space, and more abstract plans are associated with sets of these.
Reference: [19] <author> Richmond Thomason. </author> <title> Indeterminist time and truth-value gaps. </title> <journal> Theoria, </journal> <volume> 36 </volume> <pages> 264-281, </pages> <year> 1970. </year>
Reference-contexts: Semantics Eventually, we will want to interpret a plan as specifying a set of allowed futures|intuitively, those futures consistent with an execution of the plan. (An interpretation along these lines can be developed within the general logical framework of branching time <ref> [18, 19] </ref>.) For reasons of space, however, we restrict ourselves in this paper to a simpler account, in which complete and scheduled plans, rather than futures, are taken as the points in the semantic space, and more abstract plans are associated with sets of these.
Reference: [20] <author> Daniel S. Weld. </author> <title> An introduction to least commitment planning. </title> <journal> AI Magazine, </journal> <volume> 15(4) </volume> <pages> 27-61, </pages> <year> 1994. </year>
Reference-contexts: in which plans might interact, even this very simple setting is sufficiently rich to allow us to illustrate the shape of our theory, and we defer a detailed treatment of more complicated plan interactions to subsequent work. 2 Primitive plans Basic concepts We represent primitive plans using a standard formalism <ref> [13, 20, 15] </ref>, in which a plan consist of a set of steps, temporal constraints on those steps, and causal links, which record dependency relations among steps. <p> A similar decoupling has proven to be useful in the analysis of many AI algorithms. This tactic has two advantages. First, it simplifies the base algorithm; see <ref> [20] </ref> for an example of this applied to classical plan generation. Second, it allows for separate, focused investigation of heuristics for efficient control, something we are now exploring in our ongoing work.
Reference: [21] <author> Mike Williamson and Steve Hanks. </author> <title> Optimal planning with a goal-directed utility model. </title> <booktitle> In Proceedings of the Second International Conference on Artificial Intelligence Planning Systems, </booktitle> <pages> pages 176-181, </pages> <year> 1994. </year>
Reference-contexts: Cost estimates, so defined, accurately bound the actual cost of a plan, and are thus related to the interval measures of plan cost used in the decision-theoretic plan generation literature <ref> [21, 7, 6] </ref>. We now show that, under certain coherence conditions, a cost estimate for a plan in context can be derived from a cost estimate for the context together with a cost estimate for the plan and context combined.
Reference: [22] <author> Qiang Yang. </author> <title> Intelligent Planning: A Decomposition and Abstraction Based Approach. </title> <publisher> Springer, </publisher> <address> New York, </address> <year> 1997. </year>
Reference-contexts: As explained earlier, the first step of the process is determining whether P is, in fact, strongly compatible with the context C. This problem has been studied in <ref> [22] </ref>, which develops a constraint satisfaction procedure to determine plan compatibility. <p> Our focus in this paper is on the second step in the reasoning process, in which the agent computes the cost estimate for plan P in context C. Given an option P that is compatible with C, we might next appeal to the Optimal Merge algorithm <ref> [22] </ref>, which uses a dynamic programming approach to find an optimally merged plan, that is, one with minimum cost. This cost is precisely (P [ C), which could then be combined with an exact value for (C) to yield an exact value for (P=C).
References-found: 22

