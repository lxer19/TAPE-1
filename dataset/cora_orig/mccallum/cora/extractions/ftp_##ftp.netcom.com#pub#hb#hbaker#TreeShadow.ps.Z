URL: ftp://ftp.netcom.com/pub/hb/hbaker/TreeShadow.ps.Z
Refering-URL: ftp://ftp.netcom.com/pub/hb/hbaker/home.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Worlds in Collision: A Mostly Functional Model of Concurrency Control and Recovery asynchronous logic is
Author: Henry G. Baker 
Keyword: 1.INTRODUCTION 2.MOSTLY FUNCTIONAL HARDWARE DESIGN  
Address: 16231 Meadow Ridge Way, Encino, CA 91436  
Affiliation: Nimble Computer Corporation,  
Note: Nimble Computer Corporation 1  This work was supported in part by the U.S. Department of Energy ContractNo.DE-AC03-88ER80663  If  
Pubnum: Unpublished Memo  
Date: 1990, 1993  August, 1990  
Abstract: Many techniques of concurrency control and crash recovery are implementation instances of an abstract "world tree" model. This abstract model factors out most low-level implementation details of transactions, intentions, shadowing and logging, so that the essential issues like conflict resolution can be seen more easily. Parallel synchronization can often be seen as a merging of disparate worlds after resolving their differences. Nested transactions fit easily into this model, as does crash recovery. A "lazy shallow binding" implementation model of world trees is described which offers good performance during both normal and abnormal execution modes. We present a "multiple worlds" model of a parallel/distributed processing system "universe", which abstracts out the implementation details of concurrency control and crash recovery, so that one can more easily focus on the more important issue of conflict resolution. We show how crash recovery is an instance of synchronization in this model, and show how a "lazy shallow binding" implementation can provide good performance both during normal execution, as well as during crash recovery. We start with a very general model of states and actions, and then demonstrate the application of these ideas to a database shared among several processes. Digital hardware designers, as a group, are one of the greatest repositories of knowledge of how to design parallel systems. These designers usually have significant constraints in the areas of cost and parts availability, but they also have a great deal of freedom in the area of concurrency. Asynchronous logic has been touted for over 25 years, because it has the potential to maximize the concurrency available in certain computations.. Yet hardware designers have firmly rejected asynchronous logic. Because similar mechanisms have been advocated for some concurrent programming languages, it should be a significant priority for parallel software designers to understand the reasons behind the lack of acceptance of asynchronous logic. One of the goals in hardware design is the minimize the amount of synchronization that is requiredespecially ambiguous synchronization, where a choice must be made among alternatives. Not only is the synchronization logic itself expensive, but ambiguous synchronization can produce system failure through "runt pulses". If a substantial fraction of the system is clocked in a synchronous manner, then within this synchronous domain no synchronization logic is necessary (other than the clock itself), and no "runt pulses" can be generated. Any interaction with the outside world can cause failure, however; these interactions can be minimized and localized within a few well-confined modules. Asynchronous logic can offer greater speed for determinate computations, because every circuit operates at its actual ratenot at a speed determined by its slowest element. In asynchronous logic, however, many straightforward tasks become choices requiring ambiguous synchronization, which leads to a greater likelihood of "runt pulse" failure. As a result, the possibility of failure is pervasive, rather than being localized where it can be more easily dealt with. 1 In addition to the possibility of failure, asynchronous logic is difficult to work with because state is distributed throughout the system. This makes it difficult to recover from failure, and nearly impossible to test or debug, because much of this state is inaccessible. Since testability is essentially to modern chip-building, it is required that any state be capable of being sensed and manipulated. Asynchronous logic is difficult to debug, because the switchings of its logic elements do not form regular patterns. This lack of patterning makes oscilloscopes and logic analyzers useless. While new tools for debugging asynchronous logic may make the job easier, such tools seem to require more sophisticationand hence more costthan synchronous debugging tools. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Ada83: </author> <title> Reference Manual for the Ada Programming Language. ANSI/MIL-STD-1815A-1983, </title> <type> U.S. </type> <institution> Gov't Printing Office, </institution> <address> Wash., DC, </address> <year> 1983. </year>
Reference: <author> Agha, Gul. </author> <title> Actors: A Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, Camb., </publisher> <address> MA, </address> <year> 1986. </year>
Reference: <author> Baker, Henry, and Hewitt, Carl. </author> <title> "The Incremental Garbage Collection of Processes". </title> <booktitle> Proc. ACM Symp. on AI and Progr. Langs., Sigplan Not. </booktitle> <address> 12,8 (Aug.1977),55-59. </address>
Reference: <author> Baker, Henry. </author> <title> Actor Systems for Real-Time Computation. </title> <type> Ph.D. Thesis, </type> <institution> MIT/LCS/TR197, </institution> <month> March, </month> <year> 1978,145p. </year>
Reference: <author> Baker, Henry. </author> <title> "List processing in real time on a serial computer". </title> <journal> CACM 21,4 (April1978),280-294. </journal>
Reference: <author> Baker, Henry. </author> <title> "Shallow Binding in Lisp 1.5". </title> <journal> CACM 21,7 (July1978),565-569. </journal>
Reference: <author> Baker, Henry. </author> <title> "Unify and Conquer (Garbage, Updating, Aliasing ...) in Functional Languages". </title> <booktitle> Proc. 1990 ACM Conf. on Lisp and Functional Programming, </booktitle> <address> Nice, France, </address> <month> June, </month> <year> 1990,218-226. </year>
Reference: <author> Baker, Henry. </author> <title> "Shallow Binding Makes Functional Arrays Fast". </title> <journal> ACM Sigplan Not. 26,8 (Aug.1991), </journal> <pages> 145-147. </pages>
Reference: <author> Baker, Henry. </author> <title> "Equal Rights for Functional Objects". </title> <journal> ACM OOPS Messenger 4,4 (Oct.1993), </journal> <pages> 2-27. </pages>
Reference: <author> Bernstein, Philip A., and Goodman, Nathan. </author> <title> "Concurrency Control in Distributed Database Systems". </title> <journal> A CM Computing Surveys 13,2 (June 1981),185-221. </journal>
Reference: <author> Eswaran, K.P., Gray, J.N., Lorie, R.A., and Traiger, </author> <title> I.L. "The notions of consistency and predicate locks in a database system". </title> <journal> CACM 19,11 (Nov.1976),624-633. </journal>
Reference: <author> Goldstein, I.P., and Bobrow, D.G. </author> <title> "Layered Networks as a Tool For Software Development". </title> <booktitle> Proc. 7'th IJCAI, </booktitle> <address> (Aug.1981),913-919. </address>
Reference: <author> Gray, Jim, McJones, Paul, et al. </author> <title> "The Recovery Manager of the System R Database Manager". </title> <journal> ACM Computing Surveys 13,2 (June1981),223-242. </journal>
Reference: <author> Greenblatt, R. </author> <title> "The Lisp Machine". </title> <type> AI Working Paper 79, </type> <institution> MIT AI Lab., Camb., </institution> <address> MA, </address> <month> Nov. </month> <year> 1974. </year>
Reference: <author> Gruber, R.E. </author> <title> "Optimistic Concurrency Control for Nested Distributed Transactions". </title> <publisher> MIT/LCS/TR-453, June1989,106p. </publisher>
Reference: <author> Habermann, </author> <title> A.N., and Nassi, I.R. "Efficient Implementation of Ada Tasks". </title> <type> TR CMU-CS-80-103, </type> <institution> Carnegie-Mellon Univ., </institution> <month> Jan. </month> <year> 1980. </year>
Reference: <author> Halpern, J.Y., and Moses, Y. </author> <title> "Knowledge and Common Knowledge in a Distributed Environment". </title> <journal> JACM 37,3 (July1990),549-587. </journal>
Reference: <author> Hanson, Christopher and Lamping, John. </author> <title> "Dynamic Binding in Scheme". </title> <type> Unpublished manuscript, </type> <year> 1984. </year>
Reference: <author> Haynes, Christopher T., and Friedman, Daniel P. </author> <title> "Embedding Continuations in Procedural Objects". A C M TOPLAS 9,4 (Oct.1987),582-598. </title>
Reference: <author> Henhapl, W., and Jones, C.B. </author> <title> "A runtime mechanism for referencing variables". </title> <journal> Inform. </journal> <note> Processing Letters 1 (1971),14-16. </note>
Reference: <author> Hewitt, Carl. </author> <title> Description and Theoretical Anaysis (Using Schemata) of Planner: A Language for Proving Theorems and Manipulating Models in a Robot. </title> <type> Ph.D. Thesis, </type> <institution> MIT AI TR-258, Camb., </institution> <address> MA, </address> <month> April </month> <year> 1972. </year>
Reference: <author> Hewitt, Carl, and Atkinson, Russell. </author> <title> "Synchronization in Actor Systems". </title> <booktitle> Proc. ACM POPL 4 (Jan.1977),267-280. </booktitle>
Reference: <author> Hewitt, Carl, and Baker, Henry. </author> <title> "Actors and Continuous Functionals". </title> <editor> In Neuhold, E.J. (ed.), </editor> <title> Formal Descriptions of Programming Concepts. </title> <publisher> North-Holland, </publisher> <year> 1978, </year> <pages> 367-390. </pages>
Reference: <author> Hilfinger, Paul N. </author> <title> Abstraction Mechanisms and Language Design. </title> <publisher> MIT Press, </publisher> <year> 1983. </year>
Reference: <author> Hughes, G.E. and Cresswell, M.J. </author> <title> An Introduction to Modal Logic. </title> <publisher> Methuen and Co., </publisher> <address> London, </address> <year> 1968. </year>
Reference: <author> Jefferson, David R. </author> <title> "Virtual Time". </title> <journal> ACM TOPLAS 7,3 (July1985),404-425. </journal>
Reference: <author> Katz, Morry. "Paratran: </author> <title> A Transparent, Transaction-based Runtime Mechanism for Parallel Execution of Scheme". </title> <publisher> MIT/LCS/TR-454, July1989,84p. </publisher>
Reference: <author> Keller, R.M., and Lindstrom, G. </author> <title> "Toward Function-Based Distributed Database Systems". </title> <type> Tech. Rep. 82-100, </type> <institution> Dept. of Computer Sci., U. Utah, </institution> <month> Jan. </month> <year> 1982, </year> <month> 37p. </month>
Reference: <author> Knight, Tom. </author> <title> "An Architecture for Mostly Functional Languages". </title> <booktitle> Proc. 1986 ACM Conf. on Lisp and Funct. Prog., </booktitle> <address> (Aug.1986),105-112. </address>
Reference: <author> Kohler, Walter H. </author> <title> "A Survey of Techniques for Synchronization and Recovery in Decentralized Computer Systems". </title> <journal> ACM Computing Surveys 13,2 (June1981),149-183. </journal>
Reference: <author> Kung, H.T., and Robinson, J.T. </author> <title> "On Optimistic Methods for Concurrency Control". </title> <journal> ACM Trans. Database Sys. 6,2 (June1981),213-226. </journal>
Reference: <author> Lamport, L. </author> <title> "Time, clocks and the ordering of events in a distributed system". </title> <journal> CACM 21,7 (July1978),558-565. </journal>
Reference: <author> Lamport, L., and Lynch, N. </author> <note> "Chapter on Distributed Computing". MIT/LCS/TM-384, Feb.1989,60p. </note>
Reference: <author> Lampson, B.W., and Sturgis, </author> <title> H.E. "Crash recovery in a distributed storage system". </title> <note> Unpublished paper, Xerox PARC, </note> <institution> Palo Alto, </institution> <year> 1976. </year>
Reference: <author> McCarthy, J. and Hayes, P. </author> <title> "Some Philosophical Problems from the Standpoint of Artificial Intelligence". </title> <editor> In Michie, D., and Meltzer, B., eds., </editor> <booktitle> Machine Intelligence 4, </booktitle> <publisher> Edingurgh Univ. Press, Edinburgh, </publisher> <address> Scotland, </address> <year> 1969. </year> <note> Unpublished Memo 1990, 1993 Nimble Computer Corporation 12 Miller, </note> <author> James S. MultiScheme: </author> <title> A Parallel Processing System based on MIT Scheme. </title> <type> Ph.D. Thesis, </type> <institution> MIT-LCS-TR-402, Sept.1987,243p. </institution>
Reference: <author> Osborne, Randy B. </author> <title> Speculative Computation in MultiLisp. </title> <type> Ph.D. Thesis, </type> <institution> MIT-LCS-TR-464, Dec.1989,263p. </institution>
Reference: <author> Pratt, </author> <title> V.R. "Process Logic". </title> <booktitle> ACM POPL 6, </booktitle> <address> (1979),93-100. </address>
Reference: <author> Reed, David P. </author> <title> Naming and Synchronization in a Decentralized Computer System. </title> <type> Ph.D. Thesis, </type> <institution> MIT EECS Dept., </institution> <year> 1978. </year>
Reference: <author> Rich, Charles. </author> <title> "A Formal Representation for Plans in the Programmer's Apprentice". </title> <booktitle> Proc. 7'th IJCAI, </booktitle> <address> (Aug.1981),1044-1052. </address>
Reference: <author> Rulifson, J.F., Derksen, J.A., and Waldinger, </author> <title> R.J. "QA4: A Procedural Calculus for Intuitive Reasoning". SRI AI Ctr. </title> <type> Tech. </type> <note> Note 73, Nov. 1972,363p. </note>
Reference: <author> Sussman, G., and McDermott, D. </author> <title> "From PLANNER to CONNIVER A Genetic Approach". </title> <booktitle> AFIPS FJCC (1972). </booktitle>
Reference: <author> Tuttle, Mark. </author> <title> Knowledge and Distributed Computation. </title> <type> Ph.D. Thesis, </type> <institution> MIT/LCS/TR-477, May1990,237p. </institution>
Reference: <author> Ullman, Jeffrey D. </author> <title> Principles of Database Systems. </title> <publisher> Computer Science Press, </publisher> <address> Potomac, MD, </address> <year> 1980. </year>
Reference: <author> Weihl, </author> <title> W.E. "The Impact of Recovery on Concurrency Control". </title> <publisher> MIT/LCS/TM-382.b, Aug.1989,22p. </publisher>
Reference: <author> Wiebe, Douglas. </author> <title> "A Distributed Repository for Immutable Persistent Objects". </title> <booktitle> Proc. OOPSLA'86, Sigplan Not. </booktitle> <address> 21,11 (Nov.1986),453-465. </address>
References-found: 45

