URL: http://www.cs.umd.edu/users/reiko/ecp97.ps
Refering-URL: http://www.cs.umd.edu/users/reiko/
Root-URL: 
Email: reiko@cs.umd.edu nau@cs.umd.edu hendler@cs.umd.edu  
Title: Plan-Refinement Strategies and Search-Space Size refinement planners search space is an AND/OR graph, and the
Author: Reiko Tsuneto Dana Nau James Hendler 
Keyword: planning and search; refinement strategies; commitment strategies  
Note: A  
Address: College Park, MD 20742 USA  
Affiliation: Department of Computer Science and Institute for Systems Research University of Maryland  
Abstract: During the planning process, a planner may have many options for refinements to perform on the plan being developed. The planners efficiency depends on how it chooses which refinement to do next. Recent studies have shown that several versions of the popular least commitment plan refinement strategy are often outperformed by a fewest alternatives first (FAF) strategy that chooses to refine the plan element that has the smallest number of alternative refinement options. In this paper, we ex amine the FAF strategy in more detail, to try to gain a better understanding of how well it performs and why. We present the following results: The FAF heuristic can be computed in constant time, and in our experimental studies it usually produced an optimal or near-optimal serialization. This suggests that using FAF (or some similar heuristic) is preferable to trying to guarantee an optimal serialization (which we conjecture is a computationally intractible problem).
Abstract-found: 1
Intro-found: 1
Reference: [Barret and Weld, 1994] <author> Anthony Barret and Daniel Weld. </author> <title> Partial-order planning: Evaluating possible efficiency gains. </title> <booktitle> Artificial Intelligence 67(1), </booktitle> <pages> pp. 71112. </pages>
Reference: [Bitner and Reingold, 1975] <author> James Bitner and Edward Reingold. </author> <title> Backtrack Programming Techniques. </title> <journal> CACM 18(11), </journal> <pages> pp. 651-656. </pages>
Reference: [Clocksin and Mellish, 1981] <author> W. Clocksin and C. Mellish. </author> <title> Programming in PROLOG. </title> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The idea of serializing an AND/OR graph occurs in a number of search procedures, although the first case we know of where such a technique was described explicitly was in the SSS* game-tree search procedure [Stockman, 1979]. One well known example is Prologs search procedure (for example, see <ref> [Clocksin and Mellish, 1981] </ref>, which serializes AND/OR graphs in a depth-first left-to-right manner.
Reference: [Currie and Tate, 1991] <author> Ken Currie and Austin Tate. O-plan: </author> <title> the open planning architecture. </title> <booktitle> Artificial Intelligence 52, </booktitle> <pages> pp. 4986. </pages>
Reference: [Erol, 1995] <author> Kutluhan Erol. </author> <title> HTN planning: Formalization, analysis, and implementation. </title> <type> Ph.D. dissertation, </type> <institution> Computer Science Dept., U. of Maryland. </institution>
Reference-contexts: 1. Introduction One characteristic of partial-order plannersregardless of whether they are Hierarchical Task Network (HTN) planners such as UMCP <ref> [Erol, 1995] </ref> and O-Plan [Currie and Tate, 1994], or planners that use STRIPS-style operators such as UCPOP [Penberthy and Weld, 1992]is that they search a space in which the nodes are partially developed plans.
Reference: [Gupta and Nau, 1992] <author> Naresh Gupta and Dana Nau. </author> <title> On the complexity of blocks-world planning. </title> <booktitle> Artificial Intelligence 56 </booktitle> <pages> 2-3, pp. 223254. </pages>
Reference-contexts: At least one example of this occurs in the AI planning literature, involving a greedy heuristic for the block-stacking problem <ref> [Gupta and Nau, 1992] </ref> To formalize the notion of optimal results in the previous paragraph, first we define a minimal serialization of an AND/OR graph G to be a serialization T of G such that no other serialization of G contains fewer nodes than T .
Reference: [Gerevini and Schubert, 1996] <author> Alfonso Gerevini and Lenhart Schubert. </author> <title> Accelerating Partial-Order Planners: Some Techniques for Effective Search Control and Pruning. </title> <journal> Journal of Artificial Intelligence Research 5, </journal> <pages> pp. 95 137. </pages>
Reference: [Joslin and Pollack, 1994] <author> David Joslin and Martha Pollack. </author> <title> Least-cost flaw repair: A plan refinement strategy for partial-order planning. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <pages> pp. 1004 1009. </pages>
Reference: [Joslin and Pollack, 1996] <author> David Joslin and Martha Pollack. </author> <title> Is early commitment in plan generation ever a good idea? In Proc. </title> <booktitle> Thirteenth National Conference on Artificial Intelligence, </booktitle> <pages> pp. 1188-1193. </pages>
Reference: [Kambhampati et al., 1995] <author> Subbarao Kambhampati, Craig Knoblock, and Qiang Yang. </author> <title> Planning as refinement search: A unified framework for evaluating design tradeoffs in partial-order planning. </title> <booktitle> Artificial Intelligence 76, </booktitle> <pages> pp. 167238. </pages>
Reference: [Kumar, 1992] <author> Vipin Kumar. </author> <title> Algorithms for constraint -satisfaction problems: A survey. </title> <journal> AI Magazine, </journal> <pages> pp. 3244. </pages>
Reference: [Luke, 1997] <author> Sean Luke. </author> <title> A Fast Probabilistic Tree Generation Algorithm. </title> <type> Unpublished manuscript. </type>
Reference-contexts: We have begun an experimental exploration to try to answer these questions. We have compared the performance of FAF with an average serialization performed on 50 different randomly generated AND/OR trees. The sample trees were generated using a tree generation algorithm based on <ref> [Luke, 1997] </ref>. These trees had 1 to 5 branches at each node, with a maximum depth of 8. All nodes at even depths were AND-nodes, while all nodes at odd depths were OR-nodes. Thus, leaves were only placed at even depths.
Reference: [Penberthy and Weld, 1992] <author> J. S. Penberthy and Daniel Weld. UCPOP: </author> <title> A sound, complete, partial order planner for ADL. </title> <booktitle> Proc. </booktitle> <address> KR-92. </address>
Reference-contexts: 1. Introduction One characteristic of partial-order plannersregardless of whether they are Hierarchical Task Network (HTN) planners such as UMCP [Erol, 1995] and O-Plan [Currie and Tate, 1994], or planners that use STRIPS-style operators such as UCPOP <ref> [Penberthy and Weld, 1992] </ref>is that they search a space in which the nodes are partially developed plans. The planner refines the plans into more and more specific plans, until either a completely developed solution is found or every plan is found incapable of solving the problem.
Reference: [Purdom, 1983] <author> Paul W. Purdom. </author> <title> Search Rearrangement Backtracking and Polynomial Average Time. </title> <booktitle> Artificial Intelligence 21, </booktitle> <pages> pp. 117 133. </pages>
Reference: [Purdom and Brown, 1983] <author> Paul W. Purdom and Cynthia A. Brown. </author> <title> An Analysis of Backtracking with Search Rearragement. </title> <note> SIAM J. Computing 12(4), pp.717 733. </note>
Reference: [Sacerdoti, 1977] <author> Earl Sacerdoti. </author> <title> A Structure for Plans and Behavior. </title> <publisher> American Elsevier Publishing Company. </publisher>
Reference: [Stefik, 1981] <author> Mark Stefik. </author> <title> Planning with constraints (MOLGEN: </title> <booktitle> part 1). Artificial Intelligence 16, </booktitle> <pages> pp. 111140. </pages>
Reference-contexts: The least commitment idea was originally applied to step orderings [Sacerdoti, 1975], but it has also been applied to other kinds of refinements. For example, Stefiks MOLGEN program <ref> [Stefik, 1981] </ref> used a least commitment to constraint posting approach; and Tsuneto et al. [1996] have examined both a least commitment to variable bindings strategy and a least commitment to task achievement strategy for HTN planning.
Reference: [Smith et al., 1996] <author> S. J. J. Smith, D. S. Nau, and T. A. Throop. </author> <title> Total-order multi-agent task-network planning for control bridge. </title> <booktitle> AAAI-96, </booktitle> <address> pp.108-113. </address>
Reference: [Stockman, 1979] <author> G. Stockman. </author> <title> A minimax algorithm better than alphabeta? Artificial Intelligence 12(2), </title> <journal> pp. </journal> <volume> 17996. </volume>
Reference-contexts: The idea of serializing an AND/OR graph occurs in a number of search procedures, although the first case we know of where such a technique was described explicitly was in the SSS* game-tree search procedure <ref> [Stockman, 1979] </ref>. One well known example is Prologs search procedure (for example, see [Clocksin and Mellish, 1981], which serializes AND/OR graphs in a depth-first left-to-right manner.
Reference: [Tsuneto et al., 1996] <author> Reiko Tsuneto, Kutluhan Erol, James Hendler, and Dana Nau. </author> <title> Commitment strategies in hierarchical task network planning. </title> <booktitle> In Proc. Thirteenth National Conference on Artificial Intelligence, </booktitle> <pages> pp. 536-542. </pages>
Reference: [Veloso and Stone, 1995] <author> Manuela Veloso and Peter Stone. FLECS: </author> <title> Planning with a flexible commitment strategy. </title> <type> JAIR 3, </type> <pages> pp. 2552. </pages>
References-found: 21

