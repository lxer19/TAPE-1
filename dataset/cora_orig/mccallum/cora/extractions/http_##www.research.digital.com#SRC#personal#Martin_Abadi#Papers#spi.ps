URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/Papers/spi.ps
Refering-URL: http://www.research.digital.com/SRC/personal/Martin_Abadi/allpapers.html
Root-URL: http://www.research.digital.com
Title: Calculus for Cryptographic Protocols The Spi Calculus  
Author: Martin Abadi and Andrew D. Gordon d i g i t a l 
Web: http://www.research.digital.com/SRC/  
Address: 130 Lytton Avenue Palo Alto, California 94301  
Affiliation: Systems Research Center  
Note: A  
Date: January 25, 1998  
Abstract: SRC Research Report 149 
Abstract-found: 1
Intro-found: 1
Reference: [Aba97] <author> M. Abadi. </author> <title> Secrecy by typing in security protocols. </title> <booktitle> In Theoretical Aspects of Computer Software, volume 1281 of Lecture Notes in Computer Science, </booktitle> <pages> pages 611-638. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: The 2 Appendices contain some proofs and several sketches of partial encodings of the spi calculus in the pi calculus. Two conference papers contain part of the material of this paper, in preliminary form [AG97b, AG97c]. Other recent papers describe additional proof techniques [AG98] and a type system <ref> [Aba97] </ref> for the spi calculus. Note It has been said that Perl is a language that looks the same in clear and encrypted. The pi calculus, and a fortiori the spi calculus, are not too far behind Perl in this respect.
Reference: [ABLP93] <author> M. Abadi, M. Burrows, B. Lampson, and G. Plotkin. </author> <title> A calculus for access control in distributed systems. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(4) </volume> <pages> 706-734, </pages> <year> 1993. </year>
Reference-contexts: As in some modal logics (e.g., <ref> [ABLP93, LABW92] </ref>), we emphasize reasoning about channels and their utterances. As in state-transition models (e.g., [DY81, MCF87, Mil95a, Kem89, Mea92, Pau97]), we are interested in characterizing the knowledge of an environment.
Reference: [AG97a] <author> M. Abadi and A. D. Gordon. </author> <title> A calculus for cryptographic protocols: The spi calculus. </title> <type> Technical Report 414, </type> <institution> University of Cambridge Computer Laboratory, </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: A Calculus for Cryptographic Protocols The Spi Calculus Martin Abadi and Andrew D. Gordon January 25, 1998 A preliminary version of this paper appeared as a Technical Report of the University of Cambridge Computer Laboratory <ref> [AG97a] </ref>. During most of this work, Andrew D. Gordon was with the University of Cambridge Computer Laboratory, holding a University Research Fellowship awarded by the Royal Society; he is now with Microsoft Research, Cam-bridge.
Reference: [AG97b] <author> M. Abadi and A. D. Gordon. </author> <title> A calculus for cryptographic protocols: The spi calculus. </title> <booktitle> In Proceedings of the Fourth ACM Conference on Computer and Communications Security, </booktitle> <pages> pages 36-47, </pages> <year> 1997. </year>
Reference-contexts: The 2 Appendices contain some proofs and several sketches of partial encodings of the spi calculus in the pi calculus. Two conference papers contain part of the material of this paper, in preliminary form <ref> [AG97b, AG97c] </ref>. Other recent papers describe additional proof techniques [AG98] and a type system [Aba97] for the spi calculus. Note It has been said that Perl is a language that looks the same in clear and encrypted.
Reference: [AG97c] <author> M. Abadi and A. D. Gordon. </author> <title> Reasoning about cryptographic protocols in the spi calculus. </title> <booktitle> In CONCUR'97: Concurrency Theory, volume 1243 of Lecture Notes in Computer Science, </booktitle> <pages> pages 59-73. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: The 2 Appendices contain some proofs and several sketches of partial encodings of the spi calculus in the pi calculus. Two conference papers contain part of the material of this paper, in preliminary form <ref> [AG97b, AG97c] </ref>. Other recent papers describe additional proof techniques [AG98] and a type system [Aba97] for the spi calculus. Note It has been said that Perl is a language that looks the same in clear and encrypted.
Reference: [AG98] <author> M. Abadi and A. D. Gordon. </author> <title> A bisimulation method for cryptographic protocols. </title> <booktitle> In Proceedings of ESOP'98, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: The 2 Appendices contain some proofs and several sketches of partial encodings of the spi calculus in the pi calculus. Two conference papers contain part of the material of this paper, in preliminary form [AG97b, AG97c]. Other recent papers describe additional proof techniques <ref> [AG98] </ref> and a type system [Aba97] for the spi calculus. Note It has been said that Perl is a language that looks the same in clear and encrypted. The pi calculus, and a fortiori the spi calculus, are not too far behind Perl in this respect.
Reference: [AN96] <author> M. Abadi and R. Needham. </author> <title> Prudent engineering practice for cryptographic protocols. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(1) </volume> <pages> 6-15, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: The challenge is N S , a nonce created by S; the nonce must not have been used previously for this purpose. Obviously the nonce is not secret, but it must be unpredictable (for otherwise an attacker could simulate a challenge and later replay the response <ref> [AN96] </ref>). In Message 3, A says that A and B can communicate under K AB , sometime after receipt of N S . All the components A, B, K AB , N S appear explicitly in the message, for safety [AN96], but A could perhaps be elided. <p> attacker could simulate a challenge and later replay the response <ref> [AN96] </ref>). In Message 3, A says that A and B can communicate under K AB , sometime after receipt of N S . All the components A, B, K AB , N S appear explicitly in the message, for safety [AN96], but A could perhaps be elided. The presence of N S in Message 3 proves the freshness of the message. In Message 4, fl represents a fixed but arbitrary message; S uses fl to signal that it is ready for a nonce challenge N B from B.
Reference: [BAN89] <author> M. Burrows, M. Abadi, and R. M. Needham. </author> <title> A logic of authentication. </title> <journal> Proceedings of the Royal Society of London A, </journal> <volume> 426 </volume> <pages> 233-271, </pages> <year> 1989. </year> <note> A preliminary version appeared as Digital Equipment Corporation Systems Research Center report No. 39, </note> <month> February </month> <year> 1989. </year>
Reference-contexts: Some, which have long been used in the authentication literature, have a fairly clear connection to the intended implementations of those protocols (see, e.g., [NS78, Lie93]). Their main shortcoming is that they do not provide a precise and solid basis for reasoning about protocols. Other notations (e.g., <ref> [BAN89] </ref>) are more formal, but their relation to implementations may be more tenuous or subtle. The spi calculus is a middle ground: it is directly executable and it has a precise semantics. <p> Like work based on temporal logics or process algebras (e.g., [GM95, Low96, Sch96a]), our method builds on a standard concurrency formalism; this has obvious advantages but it also implies that our method is less intuitive than some based on ad hoc formalisms (e.g., <ref> [BAN89] </ref>). As in some modal logics (e.g., [ABLP93, LABW92]), we emphasize reasoning about channels and their utterances. As in state-transition models (e.g., [DY81, MCF87, Mil95a, Kem89, Mea92, Pau97]), we are interested in characterizing the knowledge of an environment. <p> There are many different ways of establishing a channel, even at the abstract level at which we work here. The one we describe is inspired by the Wide Mouthed Frog protocol <ref> [BAN89] </ref>, which has the basic structure shown in Figure 1. 8 &% A '$ &% S 3. data on new channel 1. new channel @ @ @ 2. new channel We consider an abstract and simplified version of the Wide Mouthed Frog protocol. <p> It is not assumed that all messages contain information that allows each principal to recognize its own messages (cf. <ref> [BAN89] </ref>). The semantics of the spi calculus can be formalized in much the same way as the semantics of the pi calculus. We carry out this formalization in Section 4. The most interesting issues in this formalization concern the notion of equivalence. <p> These aspects of the spi calculus descriptions add complexity, but they enable finer analysis. (Recall, 22 for example, that one of the mistakes in the CCITT X.509 protocol was to omit a timestamp check <ref> [BAN89] </ref>.) It should also be obvious that writing a protocol in the spi calculus is essentially analogous to writing it in any programming language with suitable communication and encryption libraries. The main advantage of the spi calculus is its formal precision. <p> We prove some of the authenticity and secrecy properties claimed in those examples. Our proofs are not quite as easy as those of special-purpose formalisms (e.g., <ref> [BAN89] </ref>), but they have a somewhat clearer status. With a few further techniques and tools, proofs such as ours could well become routine. 6.1 Proofs for the Example of Section 2.3.1 The example of Section 2.3.1 is our simplest one; it relies on restricted channels.
Reference: [BB92] <author> G. Berry and G. Boudol. </author> <title> The chemical abstract machine. </title> <journal> Theoretical Computer Science, </journal> <volume> 96(1) </volume> <pages> 217-248, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: free names.) The set Proc = fP j fv (P ) = ;g is the set of closed processes. 4.1 The Reaction Relation The reaction relation is a concise account of computation in the pi calculus introduced by Milner [Mil92], inspired by the Chemical Abstract Machine of Berry and Boudol <ref> [BB92] </ref>. One thinks of a process as consisting of a 23 chemical solution of molecules waiting to react.
Reference: [BN95] <author> M. Boreale and R. De Nicola. </author> <title> Testing equivalence for mobile processes. </title> <journal> Information and Computation, </journal> <volume> 120(2) </volume> <pages> 279-303, </pages> <month> August </month> <year> 1995. </year> <month> 107 </month>
Reference-contexts: Testing equivalence is sensitive to the choice of language. Two processes that are testing equivalent in our calculus may not be testing equivalent after new constructs are added to the calculus. As Boreale and De Nicola have shown <ref> [BN95] </ref>, testing equivalence becomes finer-grained in the presence of a mismatch construct ([M is not N ] P ).
Reference: [BR95] <author> M. Bellare and P. Rogaway. </author> <title> Provably secure session key distri-bution: The three party case. </title> <booktitle> In Proceedings of the 27th Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1995. </year>
Reference-contexts: Our model of protocols is simpler, but poorer, than some models developed for informal mathematical arguments (e.g., <ref> [BR95] </ref>) because the spi calculus does not include any notion of probability or complexity. It would be interesting to bridge the gap between the spi calculus and those models, perhaps by giving a probabilistic interpretation for our results.
Reference: [DES77] <institution> Data encryption standard. Fed. </institution> <note> Inform. Processing Standards Pub. 46, </note> <institution> National Bureau of Standards, </institution> <address> Washington DC, </address> <month> Jan-uary </month> <year> 1977. </year>
Reference-contexts: Intuitively, the meaning of the new constructs is as follows: * The term fM g N represents the ciphertext obtained by encrypting the term M under the key N using a shared-key cryptosystem such as DES <ref> [DES77] </ref>. * The process case L of fxg N in P attempts to decrypt the term L with the key N . If L is a ciphertext of the form fM g N , then the process behaves as P [M=x]. Otherwise, the process is stuck.
Reference: [DH76] <author> W. Diffie and M. Hellman. </author> <title> New directions in cryptography. </title> <journal> IEEE Transactions on Information Theory, </journal> <volume> IT-22(6):644-654, </volume> <month> November </month> <year> 1976. </year>
Reference-contexts: We do not wish to suggest that the pi calculus enables us to describe all security protocols, even at an abstract level. For example, some protocols rely on asymmetric channels (channels of the kind implemented with public-key cryptography <ref> [DH76, RSA78] </ref>). It may be possible to represent such asymmetric channels in the pi calculus but extending the pi calculus may be simpler and more effective.
Reference: [DH84] <author> R. De Nicola and M. C. B. Hennessy. </author> <title> Testing equivalences for processes. </title> <journal> Theoretical Computer Science, </journal> <volume> 34 </volume> <pages> 83-133, </pages> <year> 1984. </year>
Reference-contexts: Proc of closed processes: P v Q = for any test (R; fi), if (P j R) + fi then (Q j R) + fi P ' Q = P v Q and Q v P The idea of testing equivalence comes from the work of De Nicola and Hennessy <ref> [DH84] </ref>. In that work, tests are processes that contain the distinguished name ! (instead of being parameterized by a barb fi). This is only a superficial difference, and we can show that our relation ' is a version of De Nicola and Hennessy's may-testing equivalence.
Reference: [DY81] <author> D. Dolev and A. C. Yao. </author> <title> On the security of public key protocols. </title> <booktitle> In Proc. 22th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 350-357, </pages> <year> 1981. </year>
Reference-contexts: As in some modal logics (e.g., [ABLP93, LABW92]), we emphasize reasoning about channels and their utterances. As in state-transition models (e.g., <ref> [DY81, MCF87, Mil95a, Kem89, Mea92, Pau97] </ref>), we are interested in characterizing the knowledge of an environment.
Reference: [GM95] <author> J. Gray and J. McLean. </author> <title> Using temporal logic to specify and verify cryptographic protocols (progress report). </title> <booktitle> In Proceedings of the 8th IEEE Computer Security Foundations Workshop, </booktitle> <pages> pages 108-116, </pages> <year> 1995. </year>
Reference-contexts: We resolve this conflict by letting the environment be an arbitrary spi calculus process. Our approach has some similarities with other recent approaches for reasoning about protocols. Like work based on temporal logics or process algebras (e.g., <ref> [GM95, Low96, Sch96a] </ref>), our method builds on a standard concurrency formalism; this has obvious advantages but it also implies that our method is less intuitive than some based on ad hoc formalisms (e.g., [BAN89]). As in some modal logics (e.g., [ABLP93, LABW92]), we emphasize reasoning about channels and their utterances.
Reference: [Gor95] <author> A. D. Gordon. </author> <title> Bisimilarity as a theory of functional programming. </title> <booktitle> Mini-course. BRICS Notes Series NS-95-3, BRICS, </booktitle> <address> Aarhus University, </address> <year> 1995. </year> <note> Full version of MFPS'95 paper. </note>
Reference-contexts: Lemma 33 Suppose that R is a preorder. Then R is a precongruence (closed under arbitrary contexts) iff b R R. See <ref> [Gor95] </ref> for the proof of a similar proposition. Lemma 34 The open extension of testing equivalence, ' ffi , is a congruence. Proof Since v ffi is clearly a preorder, it suffices to show that c v ffi v ffi .
Reference: [Hoa85] <author> C. A. R. Hoare. </author> <title> Communicating Sequential Processes. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1985. </year>
Reference-contexts: The channels that a process knows about determine the communication possibilities of the process. Channels may be restricted, so that only certain processes may communicate on them. In this respect the pi calculus is similar to earlier process calculi such as CSP <ref> [Hoa85] </ref> and CCS [Mil89]. What sets the pi calculus apart from earlier calculi is that the scope of a restriction|the program text in which a channel may be used|may change during computation.
Reference: [Kem89] <author> R. A. Kemmerer. </author> <title> Analyzing encryption protocols using formal verification techniques. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 7, </volume> <year> 1989. </year>
Reference-contexts: As in some modal logics (e.g., [ABLP93, LABW92]), we emphasize reasoning about channels and their utterances. As in state-transition models (e.g., <ref> [DY81, MCF87, Mil95a, Kem89, Mea92, Pau97] </ref>), we are interested in characterizing the knowledge of an environment.
Reference: [LABW92] <author> B. Lampson, M. Abadi, M. Burrows, and E. Wobber. </author> <title> Authentication in distributed systems: </title> <journal> Theory and practice. ACM Transactions on Computer Systems, </journal> <volume> 10(4) </volume> <pages> 265-310, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: As in some modal logics (e.g., <ref> [ABLP93, LABW92] </ref>), we emphasize reasoning about channels and their utterances. As in state-transition models (e.g., [DY81, MCF87, Mil95a, Kem89, Mea92, Pau97]), we are interested in characterizing the knowledge of an environment.
Reference: [Lie93] <author> A. Liebl. </author> <title> Authentication in distributed systems: A bibliography. </title> <journal> ACM Operating Systems Review, </journal> <volume> 27(4) </volume> <pages> 31-41, </pages> <year> 1993. </year> <month> 108 </month>
Reference-contexts: There are by now many other notations for describing security protocols. Some, which have long been used in the authentication literature, have a fairly clear connection to the intended implementations of those protocols (see, e.g., <ref> [NS78, Lie93] </ref>). Their main shortcoming is that they do not provide a precise and solid basis for reasoning about protocols. Other notations (e.g., [BAN89]) are more formal, but their relation to implementations may be more tenuous or subtle.
Reference: [Low96] <author> G. Lowe. </author> <title> Breaking and fixing the Needham-Schroeder public-key protocol using FDR. In Tools and Algorithms for the Construction and Analysis of Systems, </title> <booktitle> volume 1055 of Lecture Notes in Computer Science, </booktitle> <pages> pages 147-166. </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: We resolve this conflict by letting the environment be an arbitrary spi calculus process. Our approach has some similarities with other recent approaches for reasoning about protocols. Like work based on temporal logics or process algebras (e.g., <ref> [GM95, Low96, Sch96a] </ref>), our method builds on a standard concurrency formalism; this has obvious advantages but it also implies that our method is less intuitive than some based on ad hoc formalisms (e.g., [BAN89]). As in some modal logics (e.g., [ABLP93, LABW92]), we emphasize reasoning about channels and their utterances.
Reference: [Mao96] <author> W. Mao. </author> <title> On two proposals for on-line bankcard payments using open networks: Problems and solutions. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 201-210, </pages> <year> 1996. </year>
Reference-contexts: Moreover, there seems to be no fundamental difficulty in writing other kinds of examples, such as protocols for electronic commerce. Unfortunately, the specifications for those protocols do not yet seem to be fully understood, even in informal terms <ref> [Mao96] </ref>. In both the pi calculus and the spi calculus, restriction and scope extrusion play a central role. The pi calculus provides an abstract treatment of channels, while the spi calculus expresses the cryptographic operations that usually underlie channels in systems for distributed security.
Reference: [MCF87] <author> J. K. Millen, S. C. Clark, and S. B. Freedman. </author> <title> The Interrogator: Protocol security analysis. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-13(2):274-288, </volume> <month> February </month> <year> 1987. </year>
Reference-contexts: As in some modal logics (e.g., [ABLP93, LABW92]), we emphasize reasoning about channels and their utterances. As in state-transition models (e.g., <ref> [DY81, MCF87, Mil95a, Kem89, Mea92, Pau97] </ref>), we are interested in characterizing the knowledge of an environment.
Reference: [Mea92] <author> C. Meadows. </author> <title> Applying formal methods to the analysis of a key management protocol. </title> <journal> Journal of Computer Security, </journal> <volume> 1(1) </volume> <pages> 5-36, </pages> <year> 1992. </year>
Reference-contexts: As in some modal logics (e.g., [ABLP93, LABW92]), we emphasize reasoning about channels and their utterances. As in state-transition models (e.g., <ref> [DY81, MCF87, Mil95a, Kem89, Mea92, Pau97] </ref>), we are interested in characterizing the knowledge of an environment.
Reference: [Mil89] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <booktitle> Prentice-Hall International, </booktitle> <year> 1989. </year>
Reference-contexts: The channels that a process knows about determine the communication possibilities of the process. Channels may be restricted, so that only certain processes may communicate on them. In this respect the pi calculus is similar to earlier process calculi such as CSP [Hoa85] and CCS <ref> [Mil89] </ref>. What sets the pi calculus apart from earlier calculi is that the scope of a restriction|the program text in which a channel may be used|may change during computation. <p> In order to establish a barbed equivalence, it is often convenient to use Milner's standard technique of "bisimulation up to" <ref> [Mil89, MPW92] </ref>.
Reference: [Mil92] <author> R. Milner. </author> <title> Functions as processes. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 2 </volume> <pages> 119-141, </pages> <year> 1992. </year>
Reference-contexts: variables. (To be able to communicate externally, a process must have free names.) The set Proc = fP j fv (P ) = ;g is the set of closed processes. 4.1 The Reaction Relation The reaction relation is a concise account of computation in the pi calculus introduced by Milner <ref> [Mil92] </ref>, inspired by the Chemical Abstract Machine of Berry and Boudol [BB92]. One thinks of a process as consisting of a 23 chemical solution of molecules waiting to react.
Reference: [Mil95a] <author> J. K. Millen. </author> <title> The Interrogator model. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 251-260, </pages> <year> 1995. </year>
Reference-contexts: As in some modal logics (e.g., [ABLP93, LABW92]), we emphasize reasoning about channels and their utterances. As in state-transition models (e.g., <ref> [DY81, MCF87, Mil95a, Kem89, Mea92, Pau97] </ref>), we are interested in characterizing the knowledge of an environment.
Reference: [Mil95b] <author> R. Milner. </author> <title> The -calculus. </title> <booktitle> Undergraduate lecture notes, </booktitle> <address> Cam-bridge University, </address> <year> 1995. </year>
Reference-contexts: Here we define a labelled-transition semantics for the spi calculus, imitating Milner's recent lecture notes <ref> [Mil95b] </ref>. Despite differences in style, this semantics is essentially equivalent to the one of Section 4, so it can be used in proofs about that semantics. In order to define the labelled-transition semantics, we need some new syntactic forms: abstractions, concretions, and agents. <p> In particular, in Section 5.2.3, we define barbed congruence, which is a stronger relation than testing equivalence but is some times easier to prove directly. 5.2.1 Strong bisimilarity We first recall the definition of strong bisimulation <ref> [Mil95b] </ref>.
Reference: [MPW92] <author> R. Milner, J. Parrow, and D. Walker. </author> <title> A calculus of mobile processes, parts I and II. </title> <booktitle> Information and Computation, </booktitle> <pages> pages 1-40 and 41-77, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Barbed Congruence . . . . . . . . . . . . . . . . . . . . . . . . 100 E Proofs about Underpinning 103 References 107 1 Security and the Pi Calculus The spi calculus is an extension of the pi calculus <ref> [MPW92] </ref> with cryptographic primitives. It is designed for describing and analyzing security protocols, such as those for authentication and for electronic commerce. These protocols rely on cryptography and on communication channels with properties like authenticity and privacy. <p> One of the purposes of this section is to obtain a direct inductive characterization of reaction without appeal to structural equivalence, and a co-inductive method for proving testing equivalence. 27 5.1 The Commitment Relation The original semantics of the pi calculus (given in <ref> [MPW92] </ref>) is not based on the notion of reaction, but rather on a labelled transition system. Here we define a labelled-transition semantics for the spi calculus, imitating Milner's recent lecture notes [Mil95b]. <p> In order to establish a barbed equivalence, it is often convenient to use Milner's standard technique of "bisimulation up to" <ref> [Mil89, MPW92] </ref>. <p> A fortiori, if S is a barbed bisimulation up to * , then S * . Proof We prove the proposition using a generalization of the standard technique <ref> [MPW92] </ref>; an alternative would be to use the modular framework recently developed by Sangiorgi [San94]. 98 We construct a relation S fl larger than S and show that S fl is a barbed bisimulation.
Reference: [MS92] <author> R. Milner and D. Sangiorgi. </author> <title> Barbed bisimulation. </title> <booktitle> In Proceedings of 19th International Colloquium on Automata, Languages and Programming (ICALP '92), volume 623 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Section 5.1 defines the commitment relation, providing in particular a characterization of the reaction relation. Section 5.2 reviews the notions of strong bisimulation, barbed equivalence, and barbed congruence <ref> [MS92] </ref>. Finally, Section 5.3 introduces the underpinning relation and shows its use for proofs of secrecy. In order to prove a testing equivalence directly, we need to consider arbitrary tests and arbitrary sequences of reactions.
Reference: [NS78] <author> R. M. Needham and M. D. Schroeder. </author> <title> Using encryption for authentication in large networks of computers. </title> <journal> Communications of the ACM, </journal> <volume> 21(12) </volume> <pages> 993-999, </pages> <month> December </month> <year> 1978. </year>
Reference-contexts: There are by now many other notations for describing security protocols. Some, which have long been used in the authentication literature, have a fairly clear connection to the intended implementations of those protocols (see, e.g., <ref> [NS78, Lie93] </ref>). Their main shortcoming is that they do not provide a precise and solid basis for reasoning about protocols. Other notations (e.g., [BAN89]) are more formal, but their relation to implementations may be more tenuous or subtle.
Reference: [Pau97] <author> L. Paulson. </author> <title> Proving properties of security protocols by induction. </title> <booktitle> In Proceedings of the 10th IEEE Computer Security Foundations Workshop, </booktitle> <pages> pages 70-83, </pages> <year> 1997. </year> <month> 109 </month>
Reference-contexts: As in some modal logics (e.g., [ABLP93, LABW92]), we emphasize reasoning about channels and their utterances. As in state-transition models (e.g., <ref> [DY81, MCF87, Mil95a, Kem89, Mea92, Pau97] </ref>), we are interested in characterizing the knowledge of an environment.
Reference: [PS96] <author> B. Pierce and D. Sangiorgi. </author> <title> Typing and subtyping for mo-bile processes. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 6(5) </volume> <pages> 409-453, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: This completes the proof of part (3). 2 Intuitively, part (3) states that any reaction of !P can be obtained from two copies of P running in parallel. As Pierce and Sangiorgi <ref> [PS96] </ref> have remarked, we can strengthen part (3) to require only one copy of P , but this stronger property would fail for an extended language with a choice construct. The claim with two copies would remain true for such an extended language. <p> Using (Star S), we conclude that S * . 2 D.3 Barbed Congruence The main task of this section is to show c ffi ffi , from which it follows that ffi is a congruence. The following is an adaptation of the proof by Pierce and Sangiorgi <ref> [PS96] </ref>. We begin with two lemmas concerning replication and commitment. Lemma 38 c ffi ffi .
Reference: [RSA78] <author> R. L. Rivest, A. Shamir, and L. Adleman. </author> <title> A method for obtaining digital signatures and public-key cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <month> February </month> <year> 1978. </year>
Reference-contexts: We do not wish to suggest that the pi calculus enables us to describe all security protocols, even at an abstract level. For example, some protocols rely on asymmetric channels (channels of the kind implemented with public-key cryptography <ref> [DH76, RSA78] </ref>). It may be possible to represent such asymmetric channels in the pi calculus but extending the pi calculus may be simpler and more effective.
Reference: [San94] <author> D. Sangiorgi. </author> <title> On the bisimulation proof method. </title> <type> Technical Report ECS-LFCS-94-299, </type> <institution> Laboratory for Foundations of Computer Science, Department of Computer Science, University of Edinburgh, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: A fortiori, if S is a barbed bisimulation up to * , then S * . Proof We prove the proposition using a generalization of the standard technique [MPW92]; an alternative would be to use the modular framework recently developed by Sangiorgi <ref> [San94] </ref>. 98 We construct a relation S fl larger than S and show that S fl is a barbed bisimulation.
Reference: [Sch96a] <author> S. Schneider. </author> <title> Security properties and CSP. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 174-187, </pages> <year> 1996. </year>
Reference-contexts: We resolve this conflict by letting the environment be an arbitrary spi calculus process. Our approach has some similarities with other recent approaches for reasoning about protocols. Like work based on temporal logics or process algebras (e.g., <ref> [GM95, Low96, Sch96a] </ref>), our method builds on a standard concurrency formalism; this has obvious advantages but it also implies that our method is less intuitive than some based on ad hoc formalisms (e.g., [BAN89]). As in some modal logics (e.g., [ABLP93, LABW92]), we emphasize reasoning about channels and their utterances.
Reference: [Sch96b] <author> B. Schneier. </author> <title> Applied Cryptography: Protocols, Algorithms, and Source Code in C. </title> <publisher> John Wiley & Sons, Inc., </publisher> <address> second edition, </address> <year> 1996. </year>
Reference-contexts: Functions such as SHA and RIPE-MD are generally believed to have these properties <ref> [Sch96b] </ref>. When we represent hash functions in the spi calculus, we pretend that operations that are very expensive are altogether impossible.
References-found: 38

