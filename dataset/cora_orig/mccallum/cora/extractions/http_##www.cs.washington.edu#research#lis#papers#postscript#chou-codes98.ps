URL: http://www.cs.washington.edu/research/lis/papers/postscript/chou-codes98.ps
Refering-URL: http://www.cs.washington.edu/research/projects/lis/chinook/www/publications.html
Root-URL: 
Title: f g modal process Abstract 2.1 Modal processes  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> G. Berry and G. Gonthier. </author> <title> The ESTEREL synchronous programming language: design, semantics, implementation. </title> , <address> 19(2):87152, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Each model makes assumptions about the synchrony of transitions, communication, and many other factors. For example, CSP [6] assumes that different processes make progress asynchronously unless they communicate by synchronization. On the other extreme, the synchronous language Esterel <ref> [1] </ref> assumes that transitions are taken synchronously, as are the events. Synchronous (event or transition) semantics have many advantages, including composability and determinism, which enable designers to succinctly and precisely capture complex control-dominated behavior. Synchronous models can be implemented efficiently on a uniprocessor.
Reference: [2] <author> G. Berry, S. Ramesh, and R. K. Shyamasundar. </author> <title> Communicating reactive processes. </title> <booktitle> In , pages 8598, </booktitle> <month> January </month> <year> 1993. </year>
Reference-contexts: In models, each process can make arbitrary amounts of progress asynchronously to other processes. Most process models fall into this category, most notably CSP [6] and its derivatives. Even synchronous models have come to rely on asynchronous compositions at the system level. For example, CRP <ref> [2] </ref> is essentially a set of locally-synchronous Esterel components that are composed asynchronously as CSP processes at the system level. StateMate [5] offers similar composition: locally-synchronous State-Charts components are connected together asynchronously in ModuleCharts. Both are motivated by the fact that transition-synchrony and eventsynchrony are impractical for distributed systems.
Reference: [3] <author> P. Chou and G. Borriello. </author> <title> Modal processes: Towards enhanced retargetability through control composition of distributed embedded systems. </title> <note> In , October 1997. </note>
Reference-contexts: In the next section, we review the modal process model, discuss a taxonomy of various semantics, and review the synthesis of control communication. Section 3 describes our analysis algorithm based on the space-time diagram representation. Our model for embedded systems is called modal processes <ref> [3] </ref>. A process consists of event handlers, data variables, communication ports, and accesses to devices. For the purpose of this discussion, we will focus on the control aspect of the processes. A modal process is a process with modes. A mode is a collection of event handlers. <p> Localized transitions that do not affect other processes need no synchronization. Otherwise, the system can have any other combinations of synchrony. This is the semantics assumed by modal processes <ref> [3] </ref> by default. In models, the propagation of control is tied to data communication. Even though a set of processes should operate in the same modes (as a result of binding), it is unnecessary to synchronize all of them at once on a mode change.
Reference: [4] <author> D. Harel and E. Gery. </author> <title> Executable object modeling with StateCharts. </title> , <booktitle> pages 246257, </booktitle> <year> 1996. </year>
Reference-contexts: This is the semantics assumed by the original StateCharts as well as the program statements in hardware description languages such as Verilog [9] and VHDL. It is also possible to combine event synchrony with transition synchrony, as in Esterel and the later revised State-Charts <ref> [4] </ref>. semantics requires processes to synchronize on a mode change if their modes are affected. Localized transitions that do not affect other processes need no synchronization. Otherwise, the system can have any other combinations of synchrony. This is the semantics assumed by modal processes [3] by default.
Reference: [5] <author> D. Harel, H. Lachover, A. Naamad, A. Pnueli, M. Politi, R. Sherman, A. Shtull-Trauring, and M. Trakhtenbrot. STATEMATE: </author> <title> a working environment for the development of complex reactive systems. </title> , <address> 16(4):403414, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: Even synchronous models have come to rely on asynchronous compositions at the system level. For example, CRP [2] is essentially a set of locally-synchronous Esterel components that are composed asynchronously as CSP processes at the system level. StateMate <ref> [5] </ref> offers similar composition: locally-synchronous State-Charts components are connected together asynchronously in ModuleCharts. Both are motivated by the fact that transition-synchrony and eventsynchrony are impractical for distributed systems.
Reference: [6] <author> C. A. R. </author> <title> Hoare. </title> . <publisher> Prentice-Hall, </publisher> <year> 1985. </year>
Reference-contexts: Currently, this component-based design approach works as long as all components to be composed are written in the same programming model. Each model makes assumptions about the synchrony of transitions, communication, and many other factors. For example, CSP <ref> [6] </ref> assumes that different processes make progress asynchronously unless they communicate by synchronization. On the other extreme, the synchronous language Esterel [1] assumes that transitions are taken synchronously, as are the events. <p> In other words, control can flow synchronously as data, or piggybacked with data. See [8] for a comprehensive survey on dataflow models. In models, each process can make arbitrary amounts of progress asynchronously to other processes. Most process models fall into this category, most notably CSP <ref> [6] </ref> and its derivatives. Even synchronous models have come to rely on asynchronous compositions at the system level. For example, CRP [2] is essentially a set of locally-synchronous Esterel components that are composed asynchronously as CSP processes at the system level.
Reference: [7] <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> , <type> 21(7), </type> <month> July </month> <year> 1978. </year>
Reference-contexts: It is possible for a consistent steady state to respond to no events, but it would not be considered a deadlock here. The representation for our analysis is based on the space-time diagram as used by Lamport <ref> [7] </ref> for describing events in distributed systems. The diagram contains vertices that are divided into parallel tracks, each of which models a physically separate module with its own views of time and event arrivals.
Reference: [8] <author> E. A. Lee and T. M. Parks. </author> <title> Dataflow process networks. </title> , <address> 83:773801, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: Instead, the mode is with data and is allowed to be pipelined over data communication channels in the same way data flows through a dataflow network or a pineline. In other words, control can flow synchronously as data, or piggybacked with data. See <ref> [8] </ref> for a comprehensive survey on dataflow models. In models, each process can make arbitrary amounts of progress asynchronously to other processes. Most process models fall into this category, most notably CSP [6] and its derivatives. Even synchronous models have come to rely on asynchronous compositions at the system level.
Reference: [9] <author> D. E. Thomas and P. R. </author> <title> Moorby. </title> . <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: The time step ends when no more transitions can be triggered. This is the semantics assumed by the original StateCharts as well as the program statements in hardware description languages such as Verilog <ref> [9] </ref> and VHDL. It is also possible to combine event synchrony with transition synchrony, as in Esterel and the later revised State-Charts [4]. semantics requires processes to synchronize on a mode change if their modes are affected. Localized transitions that do not affect other processes need no synchronization.
References-found: 9

