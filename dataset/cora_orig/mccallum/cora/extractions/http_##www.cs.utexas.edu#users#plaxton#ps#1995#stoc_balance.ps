URL: http://www.cs.utexas.edu/users/plaxton/ps/1995/stoc_balance.ps
Refering-URL: http://www.cs.utexas.edu/users/plaxton/html/abc.html
Root-URL: 
Title: Tight Analyses of Two Local Load Balancing Algorithms  
Author: Bhaskar Ghosh F. T. Leighton Bruce M. Maggs ; S. Muthukrishnan C. Greg Plaxton ; R. Rajaraman ; Andrea W. Richa Robert E. Tarjan David Zuckerman ; 
Abstract: This paper presents an analysis of the following load balancing algorithm. At each step, each node in a network examines the number of tokens at each of its neighbors and sends a token to each neighbor with at least 2d + 1 fewer tokens, where d is the maximum degree of any node in the network. We show that within O(=ff) steps, the algorithm reduces the maximum difference in tokens between any two nodes to at most O((d 2 log n)=ff), where is the maximum difference between the number tokens at any node initially and the average number of tokens, n is the number of nodes in the network, and ff is the edge expansion of the network. The time bound is tight in the sense that for any graph with edge expansion ff, and for any value , there exists an initial distribution of tokens with imbalance for which the time to reduce the imbalance to even =2 is at least (=ff). The bound on the final imbalance is tight in the sense that there exists a class of networks that can be locally balanced everywhere (i.e., the maximum difference in tokens between any two neighbors is at most 2d), while the global imbalance remains ((d 2 log n)=ff). Furthermore, we show that upon reaching a state with a global imbalance of O((d 2 log n)=ff), the time for this algorithm to locally balance the network can be as large as (n 1=2 ). We extend our analysis to a variant of this algorithm for dynamic and asynchronous networks. We also present tight bounds for a randomized algorithm in which each node sends at most one token in each step. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Afek, E. Gafni, and A. Rosen. </author> <title> The slide mechanism with applications in dynamic networks. </title> <booktitle> In Proceedings of the 11th ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pages 35-46, </pages> <month> August </month> <year> 1992. </year>
Reference-contexts: In general, work on dynamic and asynchronous networks has been limited. In work related to load balancing for instance, an end-to-end communication problem, namely one in which messages are routed from a single source to a single destination, has been studied in <ref> [1, 7] </ref> on dynamic networks. Our scenario is substantially more involved since we are required to move load between several sources and destinations simultaneously. Another result on dynamic networks is the recent analysis of a local algorithm for the approximate multicommodity flow problem [5, 6]. <p> We denote the average number of tokens by . For simplicity, throughout this paper we assume that is an integer. We assign a unique rank from <ref> [1; w (v)] </ref> to every token at v. The height of a token is its rank minus . The height of a node is the maximum among the heights of all its tokens. <p> For any bad index i, we have jS &gt;i j &lt; jS i j=(1 + ff=(2d)). Since jS &gt;0 j=(1+ff=(2d)) log (1+ff=(2d)) n 1, there can be at most dlog (1+ff=(2d)) ne bad indices. It follows that at least half of the indices in <ref> [1; 2dlog (1+ff=(2d)) ne] </ref> are good. 3 Analysis for static synchronous net <p>- works 3.1 The single-port model In this section, we analyze the single-port load balancing algorithm that is described in Section 1.1. <p> It holds that either jS &gt;0 j n=2 at the start of at least half the steps, or jS 0 j n=2 at the start of at least half the steps. Without loss of generality, assume the former is true. Since at least half of the indices in <ref> [1; 2dlog (1+ff=(2d)) ne] </ref> are good in any time step t, there exists an index j in [1; 2dlog (1+ff=(2d)) ne] that is good in at least half of those time steps in which jS &gt;0 j n=2. Hence j is good in at least T =4 steps. <p> Without loss of generality, assume the former is true. Since at least half of the indices in <ref> [1; 2dlog (1+ff=(2d)) ne] </ref> are good in any time step t, there exists an index j in [1; 2dlog (1+ff=(2d)) ne] that is good in at least half of those time steps in which jS &gt;0 j n=2. Hence j is good in at least T =4 steps. <p> Consider T steps of the multi-port algorithm. Without loss of generality, we assume that jS &gt;0 j n=2 holds before at least half of these steps. By Section 2, there exists an index j in <ref> [1; 2dlog 1+ff=(2d) ne] </ref> that is good in at least T =4 steps. We assign a potential of (1 + -) h to every token at height h 2jd, and a potential of zero to all other tokens, where - = ff=cd 2 for appropriately chosen c. <p> Consider T steps of DS. We assume without loss of generality that jS &gt;0 j n=2 at the start of at least T =2 steps. There exists an index j in <ref> [1; d2 log 1+ff=(2d) ne] </ref> that is good in at least half the steps at the start of which jS &gt;0 j n=2. If index j is good at the start of step t, we call t a good step.
Reference: [2] <author> W. Aiello, B. Awerbuch, B. Maggs, and S. Rao. </author> <title> Approxi-mate load balancing on dynamic and asynchronous networks. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 632-641, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: At each step, a token is sent from node u to node v across edge (u; v) if at the beginning of the step node u contained at least 2d + 1 more tokens than node v. This algorithm was first analyzed in <ref> [2] </ref>. As in the single-port case, we analyze the multi-port algorithm in terms of both edge expansion and node expansion. In terms of edge expansion, the algorithm balances to within O (d 2 log n=ff) tokens in O (=ff) steps. <p> A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the algorithm <ref> [2, 11, 12, 15, 26, 30] </ref>. On these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques [27, 34, 36]. <p> The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step. Load balancing algorithms on the second model were first proposed and analyzed in <ref> [2] </ref> for the multi-port variant and in [15] for the single-port variant. The upper bounds established by them are suboptimal by a factor of ( n) or (log (n)) in general. Our result here is an improved, in fact, an optimal bound for the same problem. <p> The upper bounds established by them are suboptimal by a factor of ( n) or (log (n)) in general. Our result here is an improved, in fact, an optimal bound for the same problem. As remarked earlier, our multi-port results (and those in <ref> [2] </ref>) hold even for dynamic or asynchronous networks. In general, work on dynamic and asynchronous networks has been limited. <p> Second, our argument uses an exponential potential function. The analyses in [12, 21, 29], in contrast, use quadratic potential func-tions. Our potential function and our amortized analysis were necessary since a number of previous attempts using quadratic potential functions yielded suboptimal results <ref> [2, 15] </ref> for local load balancing. 1.3 Outline The remainder of this paper is organized as follows. Sec- tion 2 contains some definitions. Section 3.1 analyzes the performance of the single-port algorithm. Section 3.2 analyzes the performance of the multi-port algorithm. <p> The proofs of Theorems 3.1 and 3.2 can be modified to establish bounds in terms of instead of ff. 4 Local load balancing can be expensive In this section, we show that locally load balancing to within 2d tokens using the multi-port algorithm of <ref> [2] </ref> described in Section 1.1 can take (n 1=2 ) more time than globally load balancing to within O (d log n=) tokens, for any n, d and . <p> We first prove that a variant of the local multi- port algorithm is optimal on dynamic synchronous networks in the same sense as for static synchronous networks. We then use a result of <ref> [2] </ref> that relates the dynamic synchronous and asynchronous models, to extend our results to asynchronous networks. In the dynamic synchronous model, the edges of the network may fail or succeed dynamically. <p> We assume that at each step each node knows which of its adjacent edges are live. The local load balancing algorithm for static synchronous networks can be modified to work on dynamic synchronous networks. The algorithm presented here is essentially the same as in <ref> [2] </ref>. <p> A simple variant of DS, as suggested in <ref> [2] </ref>, can be defined for asynchronous networks. As shown in [2], the analysis for the dynamic synchronous case can be used for asynchronous networks to yield the same time bounds. <p> A simple variant of DS, as suggested in <ref> [2] </ref>, can be defined for asynchronous networks. As shown in [2], the analysis for the dynamic synchronous case can be used for asynchronous networks to yield the same time bounds.
Reference: [3] <author> M. Ajtai, J. Komlos, and E. Szemeredi. </author> <title> Sorting in c log n parallel steps. </title> <journal> Combinatorica, </journal> <volume> 3 </volume> <pages> 1-19, </pages> <year> 1983. </year>
Reference-contexts: Peleg and Upfal [31] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in [9, 18, 32]. These algorithms either use strong expanders to approximately balance the network, or the AKS sorting network <ref> [3] </ref> to perfectly balance the network. Thus, they do not work on networks of arbitrary topology. Also, these algorithms work by setting up fixed paths through the network on which load is moved and therefore fail when the network changes.
Reference: [4] <author> J. Aspnes, M. Herlihy, and N. Shavit. </author> <title> Counting networks and multiprocessor co-ordination. </title> <booktitle> In Proceedings of the 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 348-358, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks <ref> [4, 23] </ref>, hyper- cubes [20, 33], and meshes [17, 28]. Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [31] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing.
Reference: [5] <author> B. Awerbuch and T. Leighton. </author> <title> A simple local-control approx-imation algorithm for multi-commodity flow. </title> <booktitle> In Proceedings of the 34th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 459-468, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Our scenario is substantially more involved since we are required to move load between several sources and destinations simultaneously. Another result on dynamic networks is the recent analysis of a local algorithm for the approximate multicommodity flow problem <ref> [5, 6] </ref>. While their result has several applications including the end-to-end communication problem mentioned above, it does not seem to extend to load balancing.
Reference: [6] <author> B. Awerbuch and T. Leighton. </author> <title> Improved approximation algo-rithms for the multi-commodity flow problem and local com-petitive routing in dynamic networks. </title> <booktitle> In Proceedings of the 26th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 487-496, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Our scenario is substantially more involved since we are required to move load between several sources and destinations simultaneously. Another result on dynamic networks is the recent analysis of a local algorithm for the approximate multicommodity flow problem <ref> [5, 6] </ref>. While their result has several applications including the end-to-end communication problem mentioned above, it does not seem to extend to load balancing.
Reference: [7] <author> B. Awerbuch, Y. Mansour, and N. Shavit. </author> <title> End-to-end com-munication with polynomial overhead. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 358-363, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: In general, work on dynamic and asynchronous networks has been limited. In work related to load balancing for instance, an end-to-end communication problem, namely one in which messages are routed from a single source to a single destination, has been studied in <ref> [1, 7] </ref> on dynamic networks. Our scenario is substantially more involved since we are required to move load between several sources and destinations simultaneously. Another result on dynamic networks is the recent analysis of a local algorithm for the approximate multicommodity flow problem [5, 6].
Reference: [8] <author> D. P. Bertsekas and J. N. Tsitsiklis. </author> <title> Parallel and Distributed Computation: Numerical Methods. Chapter 7, </title> <address> PrenticeHall, Englewood Cliffs, NJ, </address> <year> 1989. </year>
Reference-contexts: In contrast, our local algorithm works on any arbitrary dynamic network that remains connected. On arbitrary topologies, load balancing has been studied under two models. In the first model, any amount of load can be moved across a link in any time step <ref> [8, 12, 15, 19, 35] </ref>. The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step.
Reference: [9] <author> A. Broder, A. M. Frieze, E. Shamir, and E. Upfal. </author> <title> Nearperfect token distribution. </title> <booktitle> In Proceedings of the 19th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 308-317, </pages> <year> 1992. </year>
Reference-contexts: Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [31] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in <ref> [9, 18, 32] </ref>. These algorithms either use strong expanders to approximately balance the network, or the AKS sorting network [3] to perfectly balance the network. Thus, they do not work on networks of arbitrary topology.
Reference: [10] <author> H. Chernoff. </author> <title> A measure of asymptotic efficiency for tests of a hypothesis based on the sum of observations. </title> <journal> Annals of Mathematical Statistics, </journal> <volume> 23 </volume> <pages> 493-507, </pages> <year> 1952. </year>
Reference-contexts: By setting T = d (4 ln 4)=("-2 )e, we obtain E [ t+T ] t =4. By Markov's inequality, the probability that t+T t =2 is at most 1=2. Therefore, using standard Chernoff bounds <ref> [10] </ref>, we can show that in T 0 = 8aT d (log 0 + log n)e steps, T 0 &gt; 1 with probability at most O (1=( 0 ) a + 1=n a ) for any constant a &gt; 0.
Reference: [11] <author> Y. C. Chow and W. Kohler. </author> <title> Models for dynamic load bal-ancing in a heterogeneous multiple processor system. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-28(5):57-68, </volume> <month> November </month> <year> 1980. </year>
Reference-contexts: A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the algorithm <ref> [2, 11, 12, 15, 26, 30] </ref>. On these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques [27, 34, 36].
Reference: [12] <author> G. Cybenko. </author> <title> Dynamic load balancing for distributed memory multiprocessors. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 2(7) </volume> <pages> 279-301, </pages> <year> 1989. </year>
Reference-contexts: A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the algorithm <ref> [2, 11, 12, 15, 26, 30] </ref>. On these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques [27, 34, 36]. <p> In contrast, our local algorithm works on any arbitrary dynamic network that remains connected. On arbitrary topologies, load balancing has been studied under two models. In the first model, any amount of load can be moved across a link in any time step <ref> [8, 12, 15, 19, 35] </ref>. The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step. <p> First, the analysis of the rapid convergence of random walks [21, 29] relies on averaging arbitrary probabilities across any edge. This corresponds to sending an arbitrary (possibly nonintegral) load along an edge which is forbidden in our model. In this sense, the analysis in <ref> [12] </ref> (and all references in the unbounded capacity model) are similar to the random walk analysis. Second, our argument uses an exponential potential function. The analyses in [12, 21, 29], in contrast, use quadratic potential func-tions. <p> In this sense, the analysis in [12] (and all references in the unbounded capacity model) are similar to the random walk analysis. Second, our argument uses an exponential potential function. The analyses in <ref> [12, 21, 29] </ref>, in contrast, use quadratic potential func-tions. Our potential function and our amortized analysis were necessary since a number of previous attempts using quadratic potential functions yielded suboptimal results [2, 15] for local load balancing. 1.3 Outline The remainder of this paper is organized as follows.
Reference: [13] <author> D. Eager, E. Lazowska, and J. Zahorjan. </author> <title> Adaptive load shar-ing in homogeneous distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(5):662-675, </volume> <year> 1986. </year>
Reference-contexts: will take at least d=ffe steps to balance G to within one token. 1.2 Previous and related work Load balancing has been studied extensively since it comes up in a wide variety of settings including adaptive mesh partitioning [17, 37], fine grain functional programming [16], job scheduling in operating systems <ref> [13, 24] </ref>, and distributed game tree searching [22, 25]. A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the algorithm [2, 11, 12, 15, 26, 30].
Reference: [14] <author> B. Ghosh, F. T. Leighton, B. M. Maggs, S. Muthukrishnan, C. G. Plaxton, R. Rajaraman, A. W. Richa, R. E. Tarjan, and D. Zuckerman. </author> <title> Tight analyses of two local load balanc-ing algorithms. </title> <type> Technical Report CMU-CS-95-131, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA 15213, </address> <month> March </month> <year> 1995. </year>
Reference-contexts: Section 5 describes extensions to dynamic and asynchronous networks. Finally, Section 6 presents tight bounds on offline load balancing. Due to space limitations, many of the proofs have been omitted in this version of the paper. Complete proofs may be found in <ref> [14] </ref>. 2 Preliminaries For any network G = (V; E) with n nodes, m edges, and edge expansion ff, we denote the number of tokens at v 2 V by w (v). We denote the average number of tokens by .
Reference: [15] <author> B. Ghosh and S. Muthukrishnan. </author> <title> Dynamic load balancing on parallel and distributed networks by random matchings. </title> <booktitle> In Proceedings of the 6th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 226-235, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: For each edge (u; v) in M , if u and v have the same number of tokens, then nothing is sent across (u; v). Otherwise, a token is sent from the node with more tokens to the node with fewer. This algorithm was first analyzed in <ref> [15] </ref>. We analyze the performance of the single-port algorithm in terms of both the edge expansion and the node expansion of the graph. In terms of edge expansion, we show that the single-port algorithm balances to within O (d log n=ff) tokens in O (d=ff) steps, with high probability. <p> A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the algorithm <ref> [2, 11, 12, 15, 26, 30] </ref>. On these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques [27, 34, 36]. <p> In contrast, our local algorithm works on any arbitrary dynamic network that remains connected. On arbitrary topologies, load balancing has been studied under two models. In the first model, any amount of load can be moved across a link in any time step <ref> [8, 12, 15, 19, 35] </ref>. The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step. <p> The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step. Load balancing algorithms on the second model were first proposed and analyzed in [2] for the multi-port variant and in <ref> [15] </ref> for the single-port variant. The upper bounds established by them are suboptimal by a factor of ( n) or (log (n)) in general. Our result here is an improved, in fact, an optimal bound for the same problem. <p> Second, our argument uses an exponential potential function. The analyses in [12, 21, 29], in contrast, use quadratic potential func-tions. Our potential function and our amortized analysis were necessary since a number of previous attempts using quadratic potential functions yielded suboptimal results <ref> [2, 15] </ref> for local load balancing. 1.3 Outline The remainder of this paper is organized as follows. Sec- tion 2 contains some definitions. Section 3.1 analyzes the performance of the single-port algorithm. Section 3.2 analyzes the performance of the multi-port algorithm. <p> In order to prove the upper bound on E [ i ], we place a lower bound on E [m i ] that is obtained from the following lemma of <ref> [15] </ref>. Lemma 3.2 ([15]) For any edge e 2 E, the probability that e is selected in the matching is at least 1=(8d). <p> We extend this bound for the single-port algorithm presented in <ref> [15] </ref>, i.e., the expected number of additional steps this algorithm may take to perform local (to within one token) rather than global balancing is (dn 1=2 ).
Reference: [16] <author> B. Goldberg and P. Hudak. </author> <title> Implementing functional pro-grams on a hypercube multiprocessor. </title> <booktitle> In Proceedings of the 4th Conference on Hypercubes, Concurrent Computers and Applications, </booktitle> <volume> volume 1, </volume> <pages> pages 489-503, </pages> <year> 1989. </year>
Reference-contexts: token distribution such that any algorithm will take at least d=ffe steps to balance G to within one token. 1.2 Previous and related work Load balancing has been studied extensively since it comes up in a wide variety of settings including adaptive mesh partitioning [17, 37], fine grain functional programming <ref> [16] </ref>, job scheduling in operating systems [13, 24], and distributed game tree searching [22, 25]. A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the algorithm [2, 11, 12, 15, 26, 30].
Reference: [17] <author> A. Heirich and S. Taylor. </author> <title> A parabolic theory of load bal-ance. Research Report Caltech-CS-TR-93-25, Caltech Scalable Concurrent Computation Lab, </title> <address> Pasadena, CA, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: network G there exists an initial token distribution such that any algorithm will take at least d=ffe steps to balance G to within one token. 1.2 Previous and related work Load balancing has been studied extensively since it comes up in a wide variety of settings including adaptive mesh partitioning <ref> [17, 37] </ref>, fine grain functional programming [16], job scheduling in operating systems [13, 24], and distributed game tree searching [22, 25]. A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the algorithm [2, 11, 12, 15, 26, 30]. <p> In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks [4, 23], hyper- cubes [20, 33], and meshes <ref> [17, 28] </ref>. Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [31] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in [9, 18, 32].
Reference: [18] <author> K. T. Herley. </author> <title> A note on the token distribution problem. </title> <journal> Information Processing Letters, </journal> <volume> 28 </volume> <pages> 329-334, </pages> <year> 1991. </year>
Reference-contexts: Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [31] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in <ref> [9, 18, 32] </ref>. These algorithms either use strong expanders to approximately balance the network, or the AKS sorting network [3] to perfectly balance the network. Thus, they do not work on networks of arbitrary topology.
Reference: [19] <author> S. H. Hosseini, B. Litow, M. Malkawi, J. McPherson, and K. Vairavan. </author> <title> Analysis of a graph coloring based distributed load balancing algorithm. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 10 </volume> <pages> 160-166, </pages> <year> 1990. </year>
Reference-contexts: In contrast, our local algorithm works on any arbitrary dynamic network that remains connected. On arbitrary topologies, load balancing has been studied under two models. In the first model, any amount of load can be moved across a link in any time step <ref> [8, 12, 15, 19, 35] </ref>. The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step.
Reference: [20] <author> J. JaJa and K. W. Ryu. </author> <title> Load balancing and routing on the hypercube and related networks. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 14 </volume> <pages> 431-435, </pages> <year> 1992. </year>
Reference-contexts: In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks [4, 23], hyper- cubes <ref> [20, 33] </ref>, and meshes [17, 28]. Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [31] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in [9, 18, 32].
Reference: [21] <author> M. R. Jerrum and A. Sinclair. </author> <title> Conductance and the rapid mixing property for Markov chains: the approximation of the permanent resolved. </title> <booktitle> In Proceedings of the 20th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 235-244, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Indeed the convergence bounds in both cases depend on the expansion properties of the underlying graph and they are established using potential function arguments. There are however two important differences. First, the analysis of the rapid convergence of random walks <ref> [21, 29] </ref> relies on averaging arbitrary probabilities across any edge. This corresponds to sending an arbitrary (possibly nonintegral) load along an edge which is forbidden in our model. In this sense, the analysis in [12] (and all references in the unbounded capacity model) are similar to the random walk analysis. <p> In this sense, the analysis in [12] (and all references in the unbounded capacity model) are similar to the random walk analysis. Second, our argument uses an exponential potential function. The analyses in <ref> [12, 21, 29] </ref>, in contrast, use quadratic potential func-tions. Our potential function and our amortized analysis were necessary since a number of previous attempts using quadratic potential functions yielded suboptimal results [2, 15] for local load balancing. 1.3 Outline The remainder of this paper is organized as follows.
Reference: [22] <author> R. Karp and Y. Zhang. </author> <title> A randomized parallel branch-andbound procedure. </title> <booktitle> In Proceedings of the 20th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 290-300, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: balance G to within one token. 1.2 Previous and related work Load balancing has been studied extensively since it comes up in a wide variety of settings including adaptive mesh partitioning [17, 37], fine grain functional programming [16], job scheduling in operating systems [13, 24], and distributed game tree searching <ref> [22, 25] </ref>. A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the algorithm [2, 11, 12, 15, 26, 30].
Reference: [23] <author> M. Klugerman and C. G. Plaxton. </author> <title> Small depth counting net-works. </title> <booktitle> In Proceedings of the 24th Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 417-428, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks <ref> [4, 23] </ref>, hyper- cubes [20, 33], and meshes [17, 28]. Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [31] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing.
Reference: [24] <author> F. C. H. Lin and R. M. Keller. </author> <title> The gradient model load balancing method. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(1) </volume> <pages> 32-38, </pages> <year> 1987. </year>
Reference-contexts: will take at least d=ffe steps to balance G to within one token. 1.2 Previous and related work Load balancing has been studied extensively since it comes up in a wide variety of settings including adaptive mesh partitioning [17, 37], fine grain functional programming [16], job scheduling in operating systems <ref> [13, 24] </ref>, and distributed game tree searching [22, 25]. A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the algorithm [2, 11, 12, 15, 26, 30].
Reference: [25] <author> R. Luling and B. Monien. </author> <title> Load balancing for distributed branch and bound algorithms. </title> <booktitle> In Proceedings of the 6th International Parallel Processing Symposium, </booktitle> <pages> pages 543-549, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: balance G to within one token. 1.2 Previous and related work Load balancing has been studied extensively since it comes up in a wide variety of settings including adaptive mesh partitioning [17, 37], fine grain functional programming [16], job scheduling in operating systems [13, 24], and distributed game tree searching <ref> [22, 25] </ref>. A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the algorithm [2, 11, 12, 15, 26, 30].
Reference: [26] <author> R. Luling and B. Monien. </author> <title> A dynamic distributed load bal-ancing algorithm with provable good performance. </title> <booktitle> In Proceedings of the 5th Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 164-172, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the algorithm <ref> [2, 11, 12, 15, 26, 30] </ref>. On these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques [27, 34, 36].
Reference: [27] <author> R. Luling, B. Monien, and F. Ramme. </author> <title> Load balancing in large networks: A comparative study. </title> <booktitle> In Proceedings of the 3rd IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 686-689, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: On these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques <ref> [27, 34, 36] </ref>. In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem.
Reference: [28] <editor> F. Meyer auf der Heide, B. Osterdiekhoff, and R. </editor> <title> Wanka. Strongly adaptive token distribution. </title> <booktitle> In Proceedings of the 20th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 398-409, </pages> <year> 1993. </year>
Reference-contexts: We also study the off-line load balancing problem, in which every node has knowledge of the global state of the network. This problem on static synchronous networks has been studied in <ref> [28] </ref>. We use their results to obtain tight bounds on off-line load balancing in terms of edge expansion and node expansion. In particular, we prove that any network can be balanced off-line to within two tokens in at most d (1 + )=e steps in the single-port model. <p> In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks [4, 23], hyper- cubes [20, 33], and meshes <ref> [17, 28] </ref>. Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [31] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in [9, 18, 32]. <p> Lemma 6.1 For any network G = (V; E) with node expansion and any subset X of V , we have m (X) minfjXj; jXjg=(1 + ): Moreover, there exists a set X of size at most (1+)jV j=2 such that m (X) jXj=(1+ ). Theorem 1 of <ref> [28] </ref> obtains tight bounds on the o*ine complexity of load balancing in terms of the function m. By invoking Lemma 6.1, we obtain Lemma 6.2 ([28]) Any network G with node expansion and initial imbalance can be globally balanced to within 2 tokens in at most d (1 + )=e steps.
Reference: [29] <author> M. Mihail. </author> <title> Conductance and convergence of Markov chains a combinatorial treatment of expanders. </title> <booktitle> In Proceedings of the 30th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 526-531, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: Indeed the convergence bounds in both cases depend on the expansion properties of the underlying graph and they are established using potential function arguments. There are however two important differences. First, the analysis of the rapid convergence of random walks <ref> [21, 29] </ref> relies on averaging arbitrary probabilities across any edge. This corresponds to sending an arbitrary (possibly nonintegral) load along an edge which is forbidden in our model. In this sense, the analysis in [12] (and all references in the unbounded capacity model) are similar to the random walk analysis. <p> In this sense, the analysis in [12] (and all references in the unbounded capacity model) are similar to the random walk analysis. Second, our argument uses an exponential potential function. The analyses in <ref> [12, 21, 29] </ref>, in contrast, use quadratic potential func-tions. Our potential function and our amortized analysis were necessary since a number of previous attempts using quadratic potential functions yielded suboptimal results [2, 15] for local load balancing. 1.3 Outline The remainder of this paper is organized as follows.
Reference: [30] <author> L. M. Ni, C. Xu, and T. B. Gendreau. </author> <title> Distributed drafting algorithm for load balancing. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(10):1153-1161, </volume> <month> October </month> <year> 1985. </year>
Reference-contexts: A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the algorithm <ref> [2, 11, 12, 15, 26, 30] </ref>. On these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques [27, 34, 36].
Reference: [31] <author> D. Peleg and E. Upfal. </author> <title> The generalized packet routing prob-lem. </title> <journal> Theoretical Computer Science, </journal> <volume> 53 </volume> <pages> 281-293, </pages> <year> 1987. </year>
Reference-contexts: Local algorithms restricted to particular networks have been studied on counting networks [4, 23], hyper- cubes [20, 33], and meshes [17, 28]. Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal <ref> [31] </ref> pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in [9, 18, 32]. These algorithms either use strong expanders to approximately balance the network, or the AKS sorting network [3] to perfectly balance the network.
Reference: [32] <author> D. Peleg and E. Upfal. </author> <title> The token distribution problem. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18 </volume> <pages> 229-243, </pages> <year> 1989. </year>
Reference-contexts: Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [31] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in <ref> [9, 18, 32] </ref>. These algorithms either use strong expanders to approximately balance the network, or the AKS sorting network [3] to perfectly balance the network. Thus, they do not work on networks of arbitrary topology.
Reference: [33] <author> C. G. Plaxton. </author> <title> Load balancing, selection and sorting on the hypercube. </title> <booktitle> In Proceedings of the 1989 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 64-73, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem. Local algorithms restricted to particular networks have been studied on counting networks [4, 23], hyper- cubes <ref> [20, 33] </ref>, and meshes [17, 28]. Another class of networks on which load balancing has been studied is the class of expanders. Peleg and Upfal [31] pioneered this study by identifying certain small-degree expanders as being suitable for load balancing. Their work has been extended in [9, 18, 32]. <p> A network for which the local algorithm is not optimal is the hypercube. The local algorithm balances in ( log n) time, while there exists an O ( p log n) time load balancing algorithm for the hypercube <ref> [33] </ref>. The proof of Lemma 6.2 can be modified to establish the following result for the multi-port model. Lemma 6.3 Any network G with edge expansion ff and initial imbalance can be globally balanced to within d tokens in at most d=ffe steps.
Reference: [34] <author> J. Stankovic. </author> <title> Simulations of three adaptive, decentralized controlled, job scheduling algorithms. </title> <journal> Computer Networks, </journal> <volume> 8 </volume> <pages> 199-217, </pages> <year> 1984. </year>
Reference-contexts: On these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques <ref> [27, 34, 36] </ref>. In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem.
Reference: [35] <author> R. Subramanian and I. D. Scherson. </author> <title> An analysis of diffusive load balancing. </title> <booktitle> In Proceedings of the 1994 ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 220225, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: In contrast, our local algorithm works on any arbitrary dynamic network that remains connected. On arbitrary topologies, load balancing has been studied under two models. In the first model, any amount of load can be moved across a link in any time step <ref> [8, 12, 15, 19, 35] </ref>. The second model is the one that we adopt here, namely one in which at most one unit load can be moved across a link in each time step.
Reference: [36] <author> A. N. Tantawi and D. Towsley. </author> <title> Optimal static load balanc-ing in distributed computer systems. </title> <journal> Journal of the ACM, </journal> <volume> 32 </volume> <pages> 445-465, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: On these models, algorithms have been proposed for specific applications; also, proposed heuristics and algorithms have been analyzed using simulations and queuing-theoretic techniques <ref> [27, 34, 36] </ref>. In what follows, we focus on models that allow only local algorithms and on prior work that takes an analytical approach to the load balancing problem.
Reference: [37] <author> R. D. Williams. </author> <title> Performance of dynamic load balancing al-gorithms for unstructured mesh calculations. </title> <journal> Concurrency: Practice and Experience, </journal> <volume> 3(5) </volume> <pages> 457-481, </pages> <year> 1991. </year>
Reference-contexts: network G there exists an initial token distribution such that any algorithm will take at least d=ffe steps to balance G to within one token. 1.2 Previous and related work Load balancing has been studied extensively since it comes up in a wide variety of settings including adaptive mesh partitioning <ref> [17, 37] </ref>, fine grain functional programming [16], job scheduling in operating systems [13, 24], and distributed game tree searching [22, 25]. A number of models have been proposed for load balancing, differing chiefly in the amount of global information used by the algorithm [2, 11, 12, 15, 26, 30].
References-found: 37

