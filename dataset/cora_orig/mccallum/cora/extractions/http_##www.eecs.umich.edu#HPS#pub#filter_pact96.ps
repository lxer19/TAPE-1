URL: http://www.eecs.umich.edu/HPS/pub/filter_pact96.ps
Refering-URL: http://www.eecs.umich.edu/HPS/hps_branchpred.html
Root-URL: http://www.eecs.umich.edu
Title: Improving Branch Prediction Accuracy by Reducing Pattern History Table Interference  
Phone: Telephone: Intl. 908-562-3966.  
Author: Po-Yung Chang Marius Evers Yale N. Patt 
Address: 445 Hoes Lane P.O. Box 1331 Piscataway, NJ 08855-1331, USA.  Ann Arbor, Michigan 48109-2122  
Affiliation: Service Center  Department of Electrical Engineering and Computer Science The University of Michigan  
Note: Copyright 1996 IEEE. Published in the Proceedings of the 1996 Conference on Parallel Architectures and Compilation Techniques, October 21-23 1996, Boston, USA. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works, must be obtained from the IEEE. Contact: Manager, Copyrights and Permissions IEEE  
Abstract: Today's deeply pipelined, superscalar processors rely on accurate branch prediction in order to approach their performance potential. Branch mispredictions result in a flushing of the speculative information in the pipeline, thus limiting the amount of useful work that can be done. The 2-level branch predictors have been shown to achieve high prediction accuracy. However, it has also been shown that there is a high degree of pattern history table interference in 2-level branch predictors and that the interference generally has a negative effect on the prediction accuracy. This paper introduces a method for reducing the pattern history table interference by dynamically identifying some easily predictable branches and inhibiting the pattern history table update for these branches. We show how this technique reduces pattern history table interference for two versions of the 2-level branch predictor and that this significantly improves branch prediction accuracy for the SPEC 95 benchmarks. In particular, we eliminate up to 30% of the mispredictions for the gcc benchmark. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P.-Y. Chang, E. Hao, T.-Y. Yeh, and Y. N. Patt. </author> <title> Branch classification: A new mechanism for improving branch predictor performance. </title> <booktitle> In Proceedings of the 27th Annual ACM/IEEE International Symposium on Microarchitecture, </booktitle> <pages> pages 22-31, </pages> <year> 1994. </year> <note> a version of this paper has been accepted for publication in a special issue of International Journal on Parallel Programming. </note>
Reference-contexts: Recent studies [4, 8] have shown that interference in the pattern history tables of these 2-level branch predictors can significantly reduce their ability to make accurate predictions. Furthermore, it has been shown <ref> [1] </ref> that a significant amount of branches in the dynamic execution stream tend to be mostly taken or mostly not-taken. The same study also showed the benefits of separating these strongly biased branches from weakly biased branches based on profiling information.
Reference: [2] <author> S. McFarling. </author> <title> Combining branch predictors. </title> <type> Technical Report TN-36, </type> <institution> Digital Western Research Laboratory, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: Speculative execution is a common solution to the branch problem. However, all speculative work beyond a branch must be discarded if that branch is mispredicted. Therefore, a very accurate branch predictor is essential for achieving high performance on deeply pipelined, superscalar processors. Various prediction strategies, including 2-level branch predictors <ref> [5, 6, 7, 2] </ref>, have been developed to improve branch prediction. Recent studies [4, 8] have shown that interference in the pattern history tables of these 2-level branch predictors can significantly reduce their ability to make accurate predictions. <p> The lower bits of the branch address select the appropriate Pattern History Table (PHT) and the value in the branch history register (BHR) selects the appropriate 2-bit counter to use within that PHT. McFarling <ref> [2] </ref> introduced gshare, a variation of the global-history 2-level branch predictor which XORs the global branch history with the branch address to index into the PHT.
Reference: [3] <author> S. Sechrest, C.-C. Lee, and T. Mudge. </author> <title> The role of adaptivity in two-level adaptive branch prediction. </title> <booktitle> In Proceedings of the 28th Annual ACM/IEEE International Symposium on Microarchitecture, </booktitle> <year> 1995. </year>
Reference-contexts: Using static prediction on the strongly biased branches and dynamic prediction on the remaining branches resulted in lower contention in the pattern history table and thus more accurate predictions. Sechrest et al. <ref> [3] </ref> further classified the branches and showed that a significant number of the biased branches are always taken and always not-taken. In this paper, we propose a new branch predictor that dynamically classifies branches based on their history patterns. <p> For branches that have a recurring pattern, we expect the next outcome of the branch to be an extension of this pattern. Since the PSg (algo) <ref> [3] </ref> works on this premise, we expect it to perform well for branches with repeating patterns and apply it to these branches. Thus, we evaluate its performance. Figure 3 and 4 show the performance of PSg (algo) with a 1024 and a 8192 entry BTB respectively.
Reference: [4] <author> A. R. Talcott, M. Nemirovsky, and R. C. Wood. </author> <title> The influence of branch prediction table interference on branch prediction scheme performance. </title> <booktitle> In International Conference on Parallel Architectures and Compilation Techniques, </booktitle> <year> 1995. </year>
Reference-contexts: Therefore, a very accurate branch predictor is essential for achieving high performance on deeply pipelined, superscalar processors. Various prediction strategies, including 2-level branch predictors [5, 6, 7, 2], have been developed to improve branch prediction. Recent studies <ref> [4, 8] </ref> have shown that interference in the pattern history tables of these 2-level branch predictors can significantly reduce their ability to make accurate predictions. Furthermore, it has been shown [1] that a significant amount of branches in the dynamic execution stream tend to be mostly taken or mostly not-taken. <p> The gshare scheme tries to better identify the machine execution states by using both the branch address and the branch history. Recent studies <ref> [4, 8] </ref> have shown that PHT interference negatively affects the performance of 2-level branch predictors. Pattern history table interference occurs when a conditional branch references a PHT entry that was last referenced by another conditional branch. <p> Recent studies [4, 8] have shown that PHT interference negatively affects the performance of 2-level branch predictors. Pattern history table interference occurs when a conditional branch references a PHT entry that was last referenced by another conditional branch. Talcott et al. <ref> [4] </ref> classified the interference as positive if the counter in the PHT entry correctly predicts the branch outcome. Otherwise, they classified the interference as negative. They showed that destructive interference causes branch prediction schemes to operate much below their potential performance level.
Reference: [5] <author> T.-Y. Yeh and Y. N. Patt. </author> <title> Two-level adaptive branch prediction. </title> <booktitle> In Proceedings of the 24th Annual ACM/IEEE International Symposium on Microarchi-tecture, </booktitle> <pages> pages 51-61, </pages> <year> 1991. </year>
Reference-contexts: Speculative execution is a common solution to the branch problem. However, all speculative work beyond a branch must be discarded if that branch is mispredicted. Therefore, a very accurate branch predictor is essential for achieving high performance on deeply pipelined, superscalar processors. Various prediction strategies, including 2-level branch predictors <ref> [5, 6, 7, 2] </ref>, have been developed to improve branch prediction. Recent studies [4, 8] have shown that interference in the pattern history tables of these 2-level branch predictors can significantly reduce their ability to make accurate predictions.
Reference: [6] <author> T.-Y. Yeh and Y. N. Patt. </author> <title> Alternative implementations of two-level adaptive branch prediction. </title> <booktitle> In Proceedings of the 19th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 124-134, </pages> <year> 1992. </year>
Reference-contexts: Speculative execution is a common solution to the branch problem. However, all speculative work beyond a branch must be discarded if that branch is mispredicted. Therefore, a very accurate branch predictor is essential for achieving high performance on deeply pipelined, superscalar processors. Various prediction strategies, including 2-level branch predictors <ref> [5, 6, 7, 2] </ref>, have been developed to improve branch prediction. Recent studies [4, 8] have shown that interference in the pattern history tables of these 2-level branch predictors can significantly reduce their ability to make accurate predictions.
Reference: [7] <author> T.-Y. Yeh and Y. N. Patt. </author> <title> A comparison of dynamic branch predictors that use two levels of branch history. </title> <booktitle> In Proceedings of the 20th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 257-266, </pages> <year> 1993. </year>
Reference-contexts: Speculative execution is a common solution to the branch problem. However, all speculative work beyond a branch must be discarded if that branch is mispredicted. Therefore, a very accurate branch predictor is essential for achieving high performance on deeply pipelined, superscalar processors. Various prediction strategies, including 2-level branch predictors <ref> [5, 6, 7, 2] </ref>, have been developed to improve branch prediction. Recent studies [4, 8] have shown that interference in the pattern history tables of these 2-level branch predictors can significantly reduce their ability to make accurate predictions.
Reference: [8] <author> C. Young, N. Gloy, and M. D. Smith. </author> <title> A comparative analysis of schemes for correlated branch prediction. </title> <booktitle> In Proceedings of the 22st Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 276-286, </pages> <year> 1995. </year>
Reference-contexts: Therefore, a very accurate branch predictor is essential for achieving high performance on deeply pipelined, superscalar processors. Various prediction strategies, including 2-level branch predictors [5, 6, 7, 2], have been developed to improve branch prediction. Recent studies <ref> [4, 8] </ref> have shown that interference in the pattern history tables of these 2-level branch predictors can significantly reduce their ability to make accurate predictions. Furthermore, it has been shown [1] that a significant amount of branches in the dynamic execution stream tend to be mostly taken or mostly not-taken. <p> The gshare scheme tries to better identify the machine execution states by using both the branch address and the branch history. Recent studies <ref> [4, 8] </ref> have shown that PHT interference negatively affects the performance of 2-level branch predictors. Pattern history table interference occurs when a conditional branch references a PHT entry that was last referenced by another conditional branch. <p> Talcott et al. [4] classified the interference as positive if the counter in the PHT entry correctly predicts the branch outcome. Otherwise, they classified the interference as negative. They showed that destructive interference causes branch prediction schemes to operate much below their potential performance level. Young et al. <ref> [8] </ref> classified interference as constructive if the counter correctly predicts the branch outcome and a predictor with an infinite number of PHTs, thus having no PHT interference, mispredicts the outcome. They classified interference as destructive if the counter mispredicts while the predictor with an infinite number of PHTs predicts correctly. <p> Tables 2 and 3 show the amount of interference for a per-address history variation (PAs) and a global history variation (gshare) of the 2-level branch predictor respectively. The tables also list the amount of constructive and destructive interference <ref> [8] </ref> for each of the two schemes. Interference is defined as constructive if the counter correctly predicts the branch outcome when a predictor with an infinite number of PHTs, thus no PHT interference, mispredicts the outcome.
References-found: 8

