URL: file://ftp.cis.ohio-state.edu/pub/communication/papers/spdp93-assignment.ps.Z
Refering-URL: http://www.cis.ohio-state.edu/~panda/mapping_pub.html
Root-URL: 
Email: E-mail: fradiya-v,pandag@cis.ohio-state.edu  
Title: Task Assignment on Distributed-Memory Systems with Adaptive Wormhole Routing  
Author: Vibha A. Dixit-Radiya and Dhabaleswar K. Panda 
Date: 674-681.  
Note: In Symposium on Parallel and Distributed Processing, 1993, pp.  
Address: Columbus, OH 43210  
Affiliation: Department of Computer and Information Science The Ohio State University,  
Abstract: Assignment of tasks of a parallel program onto processors of a distributed-memory system is critical to obtain minimal program completion time by minimizing communication overhead. This paper presents task assignment heuristics for wormhole-routed systems. A Temporal Communication Graph is used to model task graphs and to identify spatial and temporal link contention. The interplay between degree of routing adaptivity, topology, application characteristics, and task assignment is studied by evaluating random task graphs using an event-driven simulator. The study indicates that even for systems supporting fully-adaptive routing, efficient task assignment is necessary to reduce program completion time especially for communication-bound applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Bollinger and S.F. Midkiff, </author> <title> "Heursitic Technique for Processor and Link Assignment in Mul-ticomputers," </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol. 40, No. 3, </volume> <month> Mar </month> <year> 1991. </year>
Reference-contexts: 1 Introduction Task assignment problem is defined as mapping tasks of a parallel program onto processors of a multiprocessor system such that the program gets executed with minimal time <ref> [1, 9] </ref>. If the number of tasks exceeds the number of processors, the assignment phase is preceded by a clustering phase [4, 7, 8]. Here, we assume the number of tasks to be equal to the number of processors and address the problem of assignment of tasks onto specific topology. <p> However, the correlation between routing adaptivity and flexibility in task assignment has not been addressed. Previous research related to the assignment problem has modeled a program as precedence graph [8, 11] or task interaction graph <ref> [1, 7, 9] </ref>. The precedence graph models only sequential programs for the purpose of parallelizing them. The interaction graph models distributed-memory programs but omits all the temporal information of computation and communication within a task. <p> The precedence graph models only sequential programs for the purpose of parallelizing them. The interaction graph models distributed-memory programs but omits all the temporal information of computation and communication within a task. Some researchers <ref> [1, 9] </ref> have considered temporal link contention but for very restricted cases of programs when communication between all tasks is synchronized. We use a new graph-theoretic model, Temporal Communication Graph (TCG), which is a hybrid of both the precedence and the interaction models.
Reference: [2] <author> A.A. Chien and J.H. Kim, </author> <title> "Planar Adaptive Routing: Low-cost Adaptive Networks for Multiprocessors," </title> <booktitle> Proc. of 19th Annual Int. Sym. on Computer Architecture, </booktitle> <pages> pp. 268-277, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Deterministic or e-cube routing [3] defines a single path from a source to a destination node and thus has zero adaptivity. Fully adaptive algorithms [6] allow a message to be routed along any of the shortest paths. Partially adaptive algorithms like planar <ref> [2] </ref> restrict routing freedom to two dimensions at a time. Figure 1 illustrates the differences between these three routing schemes. Higher adaptivity reduces message contention and hence has potential to reduce the overall execution time of a given program. <p> objective of the experiments were to study the effects of (a) degree of adaptivity in message routing, (b) topology, and (c) application characteristics, on the flexibility in task assignment. 6.1 MSG and TCG parameters We considered wormhole-routed systems with three different minimal routing algorithms - e-cube (least adaptive), planar adaptive <ref> [2] </ref>, and fully adaptive [6]. For topology variation, we covered 64-processor system organized as either 8x8-mesh or 6-dimensional hypercube. Since planar routing ensures full adaptivity for meshes, we excluded it in our experiments.
Reference: [3] <author> W.J. Dally, </author> <title> "Virtual-channel Flow Control," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> Vol. 3, </volume> <pages> pp. 194-205, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Here, we assume the number of tasks to be equal to the number of processors and address the problem of assignment of tasks onto specific topology. Current generation multicomputers (nCUBE-2, iWarp, and Intel's Paragon) employ wormhole routing <ref> [3] </ref> in which the header flit of a message establishes the path, intermediate flits follow the path, and the tail flit releases the path. Once the header gets blocked due to link contention, the entire message waits in the network, occupying all the links it is traversing. <p> On the routing front, researchers are proposing routing schemes with varying adaptivity to improve system throughput. Deterministic or e-cube routing <ref> [3] </ref> defines a single path from a source to a destination node and thus has zero adaptivity. Fully adaptive algorithms [6] allow a message to be routed along any of the shortest paths. Partially adaptive algorithms like planar [2] restrict routing freedom to two dimensions at a time.
Reference: [4] <author> V.A. Dixit-Radiya and D.K. Panda, </author> <title> "Mapping and Scheduling in Distributed-Memory Systems using Temporal Communication Graph Model," </title> <institution> Ohio State Univ., OSU-CISRC-3/93-TR11, </institution> <year> 1993. </year>
Reference-contexts: 1 Introduction Task assignment problem is defined as mapping tasks of a parallel program onto processors of a multiprocessor system such that the program gets executed with minimal time [1, 9]. If the number of tasks exceeds the number of processors, the assignment phase is preceded by a clustering phase <ref> [4, 7, 8] </ref>. Here, we assume the number of tasks to be equal to the number of processors and address the problem of assignment of tasks onto specific topology. <p> Nodes with no incoming edges are called source nodes and those with no outgoing edges are called sink nodes of the TCG. Figure 3 shows TCG representation for the example Gaussian elimination program clustered for 4 processors by Min-Completion clustering heuristic proposed in <ref> [4] </ref>. Node v 12 with an amount of computation 50 represents computation stage 2 of task T 1 . This node gets executed by T 1 only after v 11 gets executed and the message e 00;12 of size 60 is received from T 0 .
Reference: [5] <author> V.A. Dixit-Radiya and D.K. Panda, </author> <title> "Task Assignment with Link Contention on Distributed-Memory Systems," </title> <institution> The Ohio State University, OSU-CISRC-4/93-TR18, </institution> <year> 1993. </year>
Reference-contexts: Some important attributes are summarized here. Details can be found in <ref> [5] </ref>. There are four primary occurrence time estimates for each node: (a) Earliest Start Time (EST), (b) Earliest Finish Time (EFT), (c) Latest Start Time (LST), and (d) Latest Finish Time (LFT). Contention delays are assumed to be zero for these ideal estimates. <p> This leads to completion time of 441 which is also one of the optimal solutions. The time complexity of this heuristic is O (jE c j + m 3 ) <ref> [5] </ref>, where E c is the set of communication edges and m is the number of tasks in a TCG. 5 Main (Min-Max-Contention) heuristic This heuristic attempts to minimize completion time of a TCG on a MSG by minimizing the maximum link contention. <p> The time complexity of d-hop MMC is (number of iterations fl number of d-hop neighbors of a processor fl CT cost), where CT cost is the time taken to compute actual completion time of TCG. Detailed complexity results are derived in <ref> [5] </ref>. For TCG in Fig. 3, the initial assignment returned by the Simple heuristic is an optimal one. <p> As explained in section 2.3, the probability of communication steps conflicting with each other increases as we go from CpLp ! CpHp ! CmLp ! CmHp task graphs. The CCR and DPAR values were controlled by varying input parameters to the random graph generator <ref> [5] </ref>. Two assignment heuristics, Simple and hop-2 MMC, were run on 100 random task graphs for each permutation of routing algorithms, topologies, and TCG classes. Time taken by MMC heuristic to run was found to be acceptable because the number of iterations were less than 5.
Reference: [6] <author> J. Duato, </author> <title> "Deadlock-Free Adaptive Routing Algorithms for Multicomputers: Evaluation of a New Algorithm," </title> <booktitle> Proc. of Sym. on Parallel and Distributed Processing, </booktitle> <pages> pp. 840-847, </pages> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: On the routing front, researchers are proposing routing schemes with varying adaptivity to improve system throughput. Deterministic or e-cube routing [3] defines a single path from a source to a destination node and thus has zero adaptivity. Fully adaptive algorithms <ref> [6] </ref> allow a message to be routed along any of the shortest paths. Partially adaptive algorithms like planar [2] restrict routing freedom to two dimensions at a time. Figure 1 illustrates the differences between these three routing schemes. <p> were to study the effects of (a) degree of adaptivity in message routing, (b) topology, and (c) application characteristics, on the flexibility in task assignment. 6.1 MSG and TCG parameters We considered wormhole-routed systems with three different minimal routing algorithms - e-cube (least adaptive), planar adaptive [2], and fully adaptive <ref> [6] </ref>. For topology variation, we covered 64-processor system organized as either 8x8-mesh or 6-dimensional hypercube. Since planar routing ensures full adaptivity for meshes, we excluded it in our experiments.
Reference: [7] <author> F. Ercal et al, </author> <title> "Task Allocation onto a Hypercube by Recursive Mincut Bipartitioning," </title> <journal> JPDC, </journal> <pages> pp. 35-44, </pages> <month> Oct. </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Task assignment problem is defined as mapping tasks of a parallel program onto processors of a multiprocessor system such that the program gets executed with minimal time [1, 9]. If the number of tasks exceeds the number of processors, the assignment phase is preceded by a clustering phase <ref> [4, 7, 8] </ref>. Here, we assume the number of tasks to be equal to the number of processors and address the problem of assignment of tasks onto specific topology. <p> However, the correlation between routing adaptivity and flexibility in task assignment has not been addressed. Previous research related to the assignment problem has modeled a program as precedence graph [8, 11] or task interaction graph <ref> [1, 7, 9] </ref>. The precedence graph models only sequential programs for the purpose of parallelizing them. The interaction graph models distributed-memory programs but omits all the temporal information of computation and communication within a task.
Reference: [8] <author> S.J. Kim and J.C. Browne, </author> <title> "A General Approach to Mapping of Parallel Computations upon Multiprocessor Architectures," </title> <booktitle> Int. Conf. on Parallel Processing, </booktitle> <volume> Vol. III, </volume> <pages> pp. 1-8, </pages> <year> 1988. </year>
Reference-contexts: 1 Introduction Task assignment problem is defined as mapping tasks of a parallel program onto processors of a multiprocessor system such that the program gets executed with minimal time [1, 9]. If the number of tasks exceeds the number of processors, the assignment phase is preceded by a clustering phase <ref> [4, 7, 8] </ref>. Here, we assume the number of tasks to be equal to the number of processors and address the problem of assignment of tasks onto specific topology. <p> Higher adaptivity reduces message contention and hence has potential to reduce the overall execution time of a given program. However, the correlation between routing adaptivity and flexibility in task assignment has not been addressed. Previous research related to the assignment problem has modeled a program as precedence graph <ref> [8, 11] </ref> or task interaction graph [1, 7, 9]. The precedence graph models only sequential programs for the purpose of parallelizing them. The interaction graph models distributed-memory programs but omits all the temporal information of computation and communication within a task.
Reference: [9] <author> S. Lee and J.K. Aggrawal, </author> <title> "A Mapping Strategy for Parallel Processing," </title> <journal> IEEE Trans. on Computers, </journal> <volume> Vol. C-36, No. 4, </volume> <pages> pp. 433-441, </pages> <month> April </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Task assignment problem is defined as mapping tasks of a parallel program onto processors of a multiprocessor system such that the program gets executed with minimal time <ref> [1, 9] </ref>. If the number of tasks exceeds the number of processors, the assignment phase is preceded by a clustering phase [4, 7, 8]. Here, we assume the number of tasks to be equal to the number of processors and address the problem of assignment of tasks onto specific topology. <p> However, the correlation between routing adaptivity and flexibility in task assignment has not been addressed. Previous research related to the assignment problem has modeled a program as precedence graph [8, 11] or task interaction graph <ref> [1, 7, 9] </ref>. The precedence graph models only sequential programs for the purpose of parallelizing them. The interaction graph models distributed-memory programs but omits all the temporal information of computation and communication within a task. <p> The precedence graph models only sequential programs for the purpose of parallelizing them. The interaction graph models distributed-memory programs but omits all the temporal information of computation and communication within a task. Some researchers <ref> [1, 9] </ref> have considered temporal link contention but for very restricted cases of programs when communication between all tasks is synchronized. We use a new graph-theoretic model, Temporal Communication Graph (TCG), which is a hybrid of both the precedence and the interaction models.
Reference: [10] <author> V.M. Lo et al, "OREGAMI: </author> <title> Software Tools for Mapping Parallel Computations to Parallel Architectures," </title> <type> Technical Report, </type> <institution> University of Ore-gon, </institution> <year> 1990. </year>
Reference-contexts: Figure 2 shows an example distributed-memory program for Gaussian elimination. It is an explicitly-parallel program consisting of interacting sequential tasks T 0 i . gram for Gaussian elimination on a 6x6 matrix (A). The TCG model was introduced and used by Lo <ref> [10] </ref> to produce application-specific routing only after the assignment phase to minimize link contention. However, the scope of such approach is very restrictive on current systems because the routing is always specified by its hardware. In this paper, we propose assignment heuristics that overcome the deficiencies of previous work.
Reference: [11] <author> H. El-Rewini and T.G. Lewis, </author> <title> "Scheduling Parallel Program Tasks onto Arbitrary Target Machines," </title> <journal> JPDC, </journal> <volume> 9, </volume> <pages> pp. 138-153, </pages> <year> 1990. </year>
Reference-contexts: Higher adaptivity reduces message contention and hence has potential to reduce the overall execution time of a given program. However, the correlation between routing adaptivity and flexibility in task assignment has not been addressed. Previous research related to the assignment problem has modeled a program as precedence graph <ref> [8, 11] </ref> or task interaction graph [1, 7, 9]. The precedence graph models only sequential programs for the purpose of parallelizing them. The interaction graph models distributed-memory programs but omits all the temporal information of computation and communication within a task.
Reference: [12] <author> H. Schwetman, </author> <title> "Introduction to Process - Oriented Simulation and CSIM," </title> <booktitle> Proc. of Winter Simulation Conf., </booktitle> <year> 1990. </year>
Reference-contexts: We obtain A EST, A EFT, and MRT measures by executing a TCG on a process-oriented discrete-event simulator written in CSIM <ref> [12] </ref>. Figure 4 shows the actual occurrence times for the example TCG. <p> For topology variation, we covered 64-processor system organized as either 8x8-mesh or 6-dimensional hypercube. Since planar routing ensures full adaptivity for meshes, we excluded it in our experiments. We used a simulator written in CSIM <ref> [12] </ref> supporting flit-level message transfer and modeling the communication architecture of the system accurately, including demand multiplexing over virtual channels. We assumed an n-port injection and consumption model to eliminate the effect of port contention. Assuming concurrent computation and communication, startup time was not taken into consideration.
References-found: 12

