URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1995/1995-32.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: thomas@cs.ruu.nl  
Phone: Tel. 31 30 531454  
Title: A technique for automatically proving termination of constructor systems  
Author: Thomas Arts 
Date: October 1995  
Address: P.O. Box 80.089 3508 TB Utrecht The Netherlands  Padualaan 14, P.O. Box 80.089, 3508 TB Utrecht, The Netherlands,  
Affiliation: Utrecht University Department of Computer Science  Utrecht University Department of Computer Science  
Pubnum: UU-CS-1995-32  
Abstract-found: 0
Intro-found: 1
Reference: [AZ95a] <author> Thomas Arts and Hans Zantema. </author> <title> Termination of constructor systems using semantic unification. </title> <type> Technical Report UU-CS-1995-17, </type> <institution> Utrecht, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: In this sense the technique differs from all methods based on simplification orders, like rpo and kbo, which are not able to prove termination of CSs that are not simply terminating. The technique has been introduced in <ref> [AZ95a] </ref> as a general applicable technique with 1 a few remarks added to point out which parts can be implemented and which parts are undecidable. Now we focus on the parts that can be implemented. Roughly speaking the technique exists of three steps. <p> The main theorem in <ref> [AZ95a] </ref> states 2.6. Theorem. Let R be a constructor system. If there exists a complete TRS E such that R is contained in E, and no infinite chain of dependency pairs w.r.t. E exists, then R is terminating.
Reference: [AZ95b] <author> Thomas Arts and Hans Zantema. </author> <title> Termination of logic programs via labelled term rewrite systems. </title> <booktitle> In Proceedings of CSN 1995. </booktitle> <address> Sion, </address> <month> November </month> <year> 1995. </year> <note> Full version appeared as technical report UU-CS-1994-20. </note>
Reference-contexts: Kennaway [Ken95], can be proved completely automatically with the presented techniques. 2. Chains of dependency pairs To illustrate the definitions that we present in this section, we use the following constructor system as a leading example. 2.1. Example. The constructor system is a transformation (see <ref> [AZ95b] </ref>) of the logic program leq (0; 0) leq (s (x); s (y)) leq (x; y): split (x; nil; nil; nil) split (x; cons (y; ys); cons (y; ys 1 ); ys 2 ) leq (y; x); split (x; ys; ys 1 ; ys 2 ) split (x; cons (y; ys); <p> Finally, Kennaway compares subterms with respect to the size order, whereas the presented techniques may use any well-founded order. The technique is also very suitable to prove termination of CS that are obtained by transforming logic programs into CSs <ref> [AZ95b] </ref>, and therefore, by the termination preserving property of the transformation, also to prove termination of logic programs. In Corollary 4.17 we demand R 0 to be non-overlapping and innermost nor-malising. By [Gra95], R 0 is complete.
Reference: [DKM90] <author> Jeremy Dick, John Kalmus, and Ursula Martin. </author> <title> Automating the knuth bendix ordering. </title> <journal> Acta Informatica, </journal> <volume> 28 </volume> <pages> 95-119, </pages> <year> 1990. </year>
Reference-contexts: : z); (w : EN D) fi zi h (w : x) fi (y : z); x fi zi hM IN U S (x) fi (y : z); x fi (y : z)i An argument selector that selects both arguments and the Knuth Bendix order (performed automatically as described in <ref> [DKM90] </ref>) suffice to meet the last condition of the corollary. Hence, the CS of Appendix A is terminating and moreover, can be proved terminating completely automatically. 5. Conclusions The technique, proving absence of infinite chains of dependency pairs, can be performed automatically for a subclass of CSs.
Reference: [Dro89] <editor> K. Drosten. Termersetzungssysteme : Grundlagen der prototyp-generierung algebraischer spezifikationen. </editor> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: By [Gra95], R 0 is complete. One could expect, by considering this and the transformation, that the first two demands in the corollary can be replaced by one demand, viz. R 0 is complete. However, the CS of K. Drosten <ref> [Dro89] </ref> rejects this possibility. 0 ! 2 g (x; y; y) ! x f (0; 1; x) ! f (x; x; x) Choose the set of unattached symbols ff g, then R 0 is defined to be the upper four rules.
Reference: [Gra95] <author> Bernhard Gramlich. </author> <title> Abstract relations between restricted termination and confluence properties of rewrite systems. </title> <journal> Fundamenta In-formaticae, </journal> <volume> 24 </volume> <pages> 3-23, </pages> <year> 1995. </year>
Reference-contexts: By the transformation, all constructor symbols of R are also constructor symbols of E, hence R is terminating. The transformation is innermost normalisation preserving (Lemma 4.16), thus R is innermost normalising. By using <ref> [Gra95] </ref> and the assumption that R is nonoverlapping, we derive that R is complete. 2 4.18. Example. The CS K 1 is proved terminating automatically by absence of cycles in the dependency graph. For the CS K 1 [ K 2 the unattached set finc; decg is found. <p> In Corollary 4.17 we demand R 0 to be non-overlapping and innermost nor-malising. By <ref> [Gra95] </ref>, R 0 is complete. One could expect, by considering this and the transformation, that the first two demands in the corollary can be replaced by one demand, viz. R 0 is complete. However, the CS of K.
Reference: [HL78] <author> G. Huet and D. Lankford. </author> <title> On the uniform halting problem for term rewriting systems. </title> <type> Technical Report report 283, </type> <institution> INRIA, </institution> <year> 1978. </year>
Reference-contexts: 1. Introduction Termination of term rewrite systems (TRSs), and also of constructor systems (CSs), is undecidable <ref> [HL78] </ref>. This means that there is no algorithm able to prove termination of an arbitrary CS.
Reference: [Ken95] <author> Richard Kennaway. </author> <title> Complete term rewrite systems for decimal arithmetic and other total recursive functions. </title> <booktitle> Presented at the Workshop on Termination, </booktitle> <address> La Bresse, France, </address> <month> May </month> <year> 1995. </year> <month> 24 </month>
Reference-contexts: Second we focus on a technique to derive an equational theory automatically such that the criteria that we presented before can be fulfilled. As an example of the power of this method, we show how termination of a CS of almost 400 lines, introduced by R. Kennaway <ref> [Ken95] </ref>, can be proved completely automatically with the presented techniques. 2. Chains of dependency pairs To illustrate the definitions that we present in this section, we use the following constructor system as a leading example. 2.1. Example. <p> In this case termination of the rewrite system can also be proved by RPO. A different criterion, for which we do not need a complete TRS in which the system is contained, is a reformulation of a theorem due to Richard Kennaway <ref> [Ken95] </ref>. The criterion does not prove that no infinite chain exists, but directly proves termination of the constructor system. The reformulation of this theorem is 3.3. Theorem. Let R be a constructor system. <p> Only a restricted class of all CSs will meet the criteria, for example the CS has to be non-overlapping. However, the criteria can easily be checked automatically. Moreover, a CS of almost 400 lines introduced by R. Kennaway in <ref> [Ken95] </ref>, can be proved terminating completely automatically by using the criteria and the chains of dependency pair technique. In fact it is a little more complicated. <p> But the CS is not terminating, since f (g (0; 1; 1); g (0; 1; 1); g (0; 1; 1)) has an infinite reduction. A. Constructor system for decimal arithmetic R. Kennaway proposed in <ref> [Ken95] </ref> a constructor system for decimal arithmetic. The constructor system of approximately 400 rewrite rules can be split into a base system and several systems that extend the base system. The complete system can be proved terminating automatically by the chains of dependency pairs technique together with Corollary 4.17.
References-found: 7

