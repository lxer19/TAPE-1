URL: ftp://ftp.cs.dartmouth.edu/TR/TR97-322.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/reports/abstracts/TR97-322/
Root-URL: http://www.cs.dartmouth.edu
Email: thc@cs.dartmouth.edu  
Title: Determining an Out-of-Core FFT Decomposition Strategy for Parallel Disks by Dynamic Programming out-of-core FFT algorithm
Author: Thomas H. Cormen 
Note: The  
Date: July 1997  
Affiliation: Dartmouth College Computer Science  Dartmouth College Department of Computer Science  
Pubnum: Technical Report PCS-TR97-322  
Abstract: We present an out-of-core FFT algorithm based on the in-core FFT method developed by Swarztrauber. Our algorithm uses a recursive divide-and-conquer strategy, and each stage in the recursion presents several possibilities for how to split the problem into subproblems. We give a recurrence for the algorithm's I/O complexity on the Parallel Disk Model and show how to use dynamic programming to determine optimal splits at each recursive stage. The algorithm to determine the optimal splits takes only fi(lg 2 N) time for an N -point FFT, and it is practical. 
Abstract-found: 1
Intro-found: 1
Reference: [Bai90] <author> David H. Bailey. </author> <title> FFTs in external or hierarchical memory. </title> <journal> The Journal of Supercomputing, </journal> <volume> 4 </volume> <pages> 23-35, </pages> <year> 1990. </year>
Reference-contexts: Section 5 shows how to use dynamic programming to compute optimal subproblem sizes. Finally, we conclude in Section 6. For other work in out-of-core FFTs, see <ref> [Bai90, Bre69, CN96, CWN97, SW95] </ref>. 2 FFT background This section presents fundamental background information on the FFT in general and the in-core version of Swarztrauber's method in particular. <p> For further background on the FFT, see any of the texts [CLR90, Nus82, Van92]. 1 This method is attributed by Bailey <ref> [Bai90] </ref> to P. Swarztrauber as a variation of an algorithm by Gentleman and Sande. It is also attributed by Brenner [Bre69] to E. Granger. 2 Discrete Fourier transforms Fourier transforms are based on complex roots of unity.
Reference: [Bre69] <author> Norman M. Brenner. </author> <title> Fast Fourier transform of externally stored data. </title> <journal> IEEE Transactions on Audio and Electroacoustics, </journal> <volume> AU-17(2):128-132, </volume> <month> June </month> <year> 1969. </year>
Reference-contexts: Section 5 shows how to use dynamic programming to compute optimal subproblem sizes. Finally, we conclude in Section 6. For other work in out-of-core FFTs, see <ref> [Bai90, Bre69, CN96, CWN97, SW95] </ref>. 2 FFT background This section presents fundamental background information on the FFT in general and the in-core version of Swarztrauber's method in particular. <p> For further background on the FFT, see any of the texts [CLR90, Nus82, Van92]. 1 This method is attributed by Bailey [Bai90] to P. Swarztrauber as a variation of an algorithm by Gentleman and Sande. It is also attributed by Brenner <ref> [Bre69] </ref> to E. Granger. 2 Discrete Fourier transforms Fourier transforms are based on complex roots of unity. The principal Nth root of unity is a complex number ! N = e 2i=N , where i = p 1.
Reference: [CLR90] <author> Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1990. </year>
Reference-contexts: Here, R is the size of each subproblem (N=2 for Cooley-Tukey and p Swarztrauber). Like the recursive form of the Cooley-Tukey method (see <ref> [CLR90, Chapter 32] </ref>), each problem of size R may be solved recursively. The question we examine in this paper is what value of R to use in the recursion. <p> For other work in out-of-core FFTs, see [Bai90, Bre69, CN96, CWN97, SW95]. 2 FFT background This section presents fundamental background information on the FFT in general and the in-core version of Swarztrauber's method in particular. For further background on the FFT, see any of the texts <ref> [CLR90, Nus82, Van92] </ref>. 1 This method is attributed by Bailey [Bai90] to P. Swarztrauber as a variation of an algorithm by Gentleman and Sande. It is also attributed by Brenner [Bre69] to E. Granger. 2 Discrete Fourier transforms Fourier transforms are based on complex roots of unity. <p> Then lg N = 3 stages of butterfly operations are performed, and the results (y 0 ; y 1 ; : : : ; y N1 ) emerge from the right. This figure is taken from <ref> [CLR90, p. 796] </ref>. Swarztrauber's method Swarztrauber's method generalizes the above divide-and-conquer method by splitting the summation of equation (1) into p N summations each with p N terms. <p> We refer the reader to Chapter 16 of <ref> [CLR90] </ref> for background on the technique of dynamic programming. Recall that there are two properties that an optimization problem must have for dynamic programming to apply: Optimal substructure: an optimal solution to the problem contains within it optimal solutions to the subproblems.
Reference: [CN96] <author> Thomas H. Cormen and David M. Nicol. </author> <title> Performing out-of-core FFTs on parallel disk systems. </title> <type> Technical Report PCS-TR96-294, </type> <institution> Dartmouth College Department of Computer Science, </institution> <month> August </month> <year> 1996. </year> <note> To appear in Parallel Computing. </note>
Reference-contexts: Section 5 shows how to use dynamic programming to compute optimal subproblem sizes. Finally, we conclude in Section 6. For other work in out-of-core FFTs, see <ref> [Bai90, Bre69, CN96, CWN97, SW95] </ref>. 2 FFT background This section presents fundamental background information on the FFT in general and the in-core version of Swarztrauber's method in particular. <p> The FFT algorithms for the PDM in <ref> [CN96, CWN97] </ref> achieve this bound. Low-order transpose We will rely heavily on the second PDM result, which is based on a class of permutations known as BMMC (bit-matrix-multiply/complement) permutations [CSW94]. <p> The dynamic-programming algorithm is fast, requiring only fi (lg 2 N) time to determine the decomposition for an N-point FFT. Unlike previous work in out-of-core FFTs <ref> [CN96, CWN97, VS94] </ref>, we have not presented the asymptotic parallel I/O complexity of the resulting FFT algorithm. Why not? As Figures 3 and 4 show, the solution provided by the dynamic-programming method appears to defy a straightforward analysis. <p> Consequently, we do not know how to determine the asymptotic I/O complexity when N &gt; M 2 . Another question not answered here is how well this method works in practice. Our earlier work <ref> [CN96, CWN97] </ref> presents empirical results for a different (and provably asymptotically optimal) out-of-core FFT method on a uniprocessor and on a multiprocessor.
Reference: [CSW94] <author> Thomas H. Cormen, Thomas Sundquist, and Leonard F. Wisniewski. </author> <title> Asymptotically tight bounds for performing BMMC permutations on parallel disk systems. </title> <type> Technical Report PCS-TR94-223, </type> <institution> Dartmouth College Department of Computer Science, </institution> <month> July </month> <year> 1994. </year> <note> Preliminary version appeared in Proceedings of the 5th Annual ACM Symposium on Parallel Algorithms and Architectures. Revised version to appear in SIAM Journal on Computing. </note>
Reference-contexts: The FFT algorithms for the PDM in [CN96, CWN97] achieve this bound. Low-order transpose We will rely heavily on the second PDM result, which is based on a class of permutations known as BMMC (bit-matrix-multiply/complement) permutations <ref> [CSW94] </ref>. The class of BMMC permutations includes many permutations encountered in practice; among them are matrix transpose when both matrix dimensions are powers of 2. Here, we will use a slight variation on matrix transpose. First, let us examine the usual 2-dimensional matrix-transpose permutation. <p> Using techniques from <ref> [CSW94] </ref>, one can show that transposition of an R fi C matrix can be performed in 2N BD lg min (R;C;M;N=M) m parallel I/Os. The variation we use to perform an out-of-core FFT is a low-order transpose, and it works as follows. <p> Again using techniques from <ref> [CSW94] </ref>, one can show that a low-order transpose can be performed in 6 2N l lg (M=B) + 1 parallel I/Os. Observe that when K = N, low-order transpose is the usual 2-dimensional matrix transpose, and the I/O complexities are equal.
Reference: [CT65] <author> J. W. Cooley and J. W. Tukey. </author> <title> An algorithm for the machine calculation of complex Fourier series. </title> <journal> Mathematics of Computation, </journal> <volume> 19 </volume> <pages> 297-301, </pages> <year> 1965. </year>
Reference-contexts: Of the many known variants of FFT methods (see Van Loan's excellent book [Van92] for a comprehensive treatment), this paper is based on a lesser-known method, which we shall refer to as Swarztrauber's method. 1 Unlike the traditional Cooley-Tukey formulation <ref> [CT65] </ref>, which uses a 2-way divide-and-conquer strategy, Swarztrauber's method performs a p N-way divide-and-conquer for an input vector of length N . <p> The butterfly operations in the sth stage can be organized into N=2 s groups of 2 s operations each. When the FFT is computed according to Figure 1 in a straightforward manner|left to right and top to bottom|the result is the classic Cooley-Tukey FFT method <ref> [CT65] </ref>. Several other methods, including Swarztrauber's, have been developed to improve performance on vector machines and in memory hierarchies, by avoiding the bit-reversal permutation to improve locality of reference. 3 : : : ; a N1 ) enter from the left and first undergo a bit-reversal permutation.
Reference: [CWN97] <author> Thomas H. Cormen, Jake Wegmann, and David M. Nicol. </author> <title> Multiprocessor out-of-core FFTs with distributed memory and parallel disks. </title> <type> Technical Report PCS-TR97-303, </type> <institution> Dart-mouth College Department of Computer Science, </institution> <month> January </month> <year> 1997. </year> <note> To appear in IOPADS '97. </note>
Reference-contexts: Section 5 shows how to use dynamic programming to compute optimal subproblem sizes. Finally, we conclude in Section 6. For other work in out-of-core FFTs, see <ref> [Bai90, Bre69, CN96, CWN97, SW95] </ref>. 2 FFT background This section presents fundamental background information on the FFT in general and the in-core version of Swarztrauber's method in particular. <p> The FFT algorithms for the PDM in <ref> [CN96, CWN97] </ref> achieve this bound. Low-order transpose We will rely heavily on the second PDM result, which is based on a class of permutations known as BMMC (bit-matrix-multiply/complement) permutations [CSW94]. <p> The dynamic-programming algorithm is fast, requiring only fi (lg 2 N) time to determine the decomposition for an N-point FFT. Unlike previous work in out-of-core FFTs <ref> [CN96, CWN97, VS94] </ref>, we have not presented the asymptotic parallel I/O complexity of the resulting FFT algorithm. Why not? As Figures 3 and 4 show, the solution provided by the dynamic-programming method appears to defy a straightforward analysis. <p> Consequently, we do not know how to determine the asymptotic I/O complexity when N &gt; M 2 . Another question not answered here is how well this method works in practice. Our earlier work <ref> [CN96, CWN97] </ref> presents empirical results for a different (and provably asymptotically optimal) out-of-core FFT method on a uniprocessor and on a multiprocessor.
Reference: [Li96] <author> Zhiyong Li. </author> <title> Computational Models and Program Synthesis for Parallel Out-of-Core Computation. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Duke University, </institution> <year> 1996. </year>
Reference-contexts: The only other out-of-core work that we know of using dynamic programming in such a fashion is by Li <ref> [Li96] </ref>. Acknowledgments Many thanks to David Nicol for numerous helpful discussions. Thanks also to the Institute for Mathematics and Its Applications at the University of Minnesota for inviting the author to a workshop there in September 1996; conversations at the workshop with Eric Schwabe were most valuable.
Reference: [Nus82] <author> Henri J. Nussbaumer. </author> <title> Fast Fourier Transform and Convolution Algorithms. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <note> second edition, </note> <year> 1982. </year>
Reference-contexts: For other work in out-of-core FFTs, see [Bai90, Bre69, CN96, CWN97, SW95]. 2 FFT background This section presents fundamental background information on the FFT in general and the in-core version of Swarztrauber's method in particular. For further background on the FFT, see any of the texts <ref> [CLR90, Nus82, Van92] </ref>. 1 This method is attributed by Bailey [Bai90] to P. Swarztrauber as a variation of an algorithm by Gentleman and Sande. It is also attributed by Brenner [Bre69] to E. Granger. 2 Discrete Fourier transforms Fourier transforms are based on complex roots of unity.
Reference: [SW95] <author> Roland Sweet and John Wilson. </author> <title> Development of out-of-core fast Fourier transform software for the Connection Machine. </title> <note> URL http://www-math.cudenver.edu/~jwilson/ final report/final report.html, </note> <month> December </month> <year> 1995. </year> <month> 13 </month>
Reference-contexts: Section 5 shows how to use dynamic programming to compute optimal subproblem sizes. Finally, we conclude in Section 6. For other work in out-of-core FFTs, see <ref> [Bai90, Bre69, CN96, CWN97, SW95] </ref>. 2 FFT background This section presents fundamental background information on the FFT in general and the in-core version of Swarztrauber's method in particular.
Reference: [Van92] <author> Charles Van Loan. </author> <title> Computational Frameworks for the Fast Fourier Transform. </title> <publisher> SIAM Press, </publisher> <address> Philadelphia, </address> <year> 1992. </year>
Reference-contexts: In this paper, we shall concentrate on reducing the number of parallel disk accesses for performing out-of-core FFTs. We use the Parallel Disk Model (PDM) of Vitter and Shriver [VS94] to compute I/O costs. Of the many known variants of FFT methods (see Van Loan's excellent book <ref> [Van92] </ref> for a comprehensive treatment), this paper is based on a lesser-known method, which we shall refer to as Swarztrauber's method. 1 Unlike the traditional Cooley-Tukey formulation [CT65], which uses a 2-way divide-and-conquer strategy, Swarztrauber's method performs a p N-way divide-and-conquer for an input vector of length N . <p> For other work in out-of-core FFTs, see [Bai90, Bre69, CN96, CWN97, SW95]. 2 FFT background This section presents fundamental background information on the FFT in general and the in-core version of Swarztrauber's method in particular. For further background on the FFT, see any of the texts <ref> [CLR90, Nus82, Van92] </ref>. 1 This method is attributed by Bailey [Bai90] to P. Swarztrauber as a variation of an algorithm by Gentleman and Sande. It is also attributed by Brenner [Bre69] to E. Granger. 2 Discrete Fourier transforms Fourier transforms are based on complex roots of unity.
Reference: [VS94] <author> Jeffrey Scott Vitter and Elizabeth A. M. Shriver. </author> <title> Algorithms for parallel memory I: Two-level memories. </title> <journal> Algorithmica, </journal> 12(2/3):110-147, August and September 1994. <volume> 14 </volume>
Reference-contexts: Parallel disk systems are available on most parallel computers, and they are relatively simple to construct on networks of workstations. In this paper, we shall concentrate on reducing the number of parallel disk accesses for performing out-of-core FFTs. We use the Parallel Disk Model (PDM) of Vitter and Shriver <ref> [VS94] </ref> to compute I/O costs. <p> Of course, in order to choose R = p N , we must have that N is a power of 4. 3 The Parallel Disk Model This section describes the Parallel Disk Model (PDM) <ref> [VS94] </ref>, upon which our modifications to Swarztrauber's method for out-of-core FFTs are based. It also covers prior PDM algorithms relevant to performing out-of-core FFTs. PDM structure and cost metric with N=D records stored on each disk. <p> The dynamic-programming algorithm is fast, requiring only fi (lg 2 N) time to determine the decomposition for an N-point FFT. Unlike previous work in out-of-core FFTs <ref> [CN96, CWN97, VS94] </ref>, we have not presented the asymptotic parallel I/O complexity of the resulting FFT algorithm. Why not? As Figures 3 and 4 show, the solution provided by the dynamic-programming method appears to defy a straightforward analysis.
References-found: 12

