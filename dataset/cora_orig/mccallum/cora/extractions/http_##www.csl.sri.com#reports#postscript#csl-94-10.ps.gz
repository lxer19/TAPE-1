URL: http://www.csl.sri.com/reports/postscript/csl-94-10.ps.gz
Refering-URL: http://www.csl.sri.com/fm-papers.html
Root-URL: 
Email: sree@csl.sri.com  
Phone: Phone: +1 (415) 859-2873 Fax: +1 (415) 859-2844  
Title: Transformations in High-Level Synthesis: Formal Specification and Efficient Mechanical Verification  
Author: P. Sreeranga Rajan 
Address: Menlo Park CA 94025 USA  
Affiliation: Computer Science Laboratory SRI International  
Abstract: Technical Report CSL-94-10 October 1994 
Abstract-found: 1
Intro-found: 1
Reference: [AaL 94] <author> M. Aagaard and M. Leeser PBS: </author> <title> Proven Boolean Algorithm, </title> <journal> IEEE Trans. on CAD of ICs. </journal> <volume> Vol 13, No. 4, </volume> <month> April </month> <year> 1994. </year>
Reference-contexts: An approach based on the execution model for representation languages in BEDROC high-level synthesis system [CBL 92] has been used to verify the correctness of optimization transformations. A formal verification of an implementation of a logic synthesis system has been reported by Aagard and Leeser <ref> [AaL 94] </ref>, but it does not provide a mechanical verification for transformations in high-level synthesis. A brief discussion of the work on verification of transformations in synchronized transitions [Sta 90] is given in Section 1.1.6.
Reference: [AAD 93] <author> F.V. Aelten, J. Allen, and S. </author> <title> Devadas Verification of Relations between Synchronous Machines, </title> <journal> IEEE Trans. on CAD of ICs. </journal> <volume> Vol. 12, No. 12, </volume> <month> December </month> <year> 1993. </year>
Reference-contexts: This work is discussed briefly in Section 1.1.4. A post-facto verification method for comparing logic level designs against a restricted class of data-flow graphs in SILAGE was presented by Aelten and others <ref> [AAD 93, Ael 94] </ref>. Denotational and operational models of generalized data-flow graphs have been developed, but they have not been used to study the correctness of transformations [GGJ 93]. A formalization of SILAGE transformations in HOL was studied by Angelo [Ang 94].
Reference: [Ael 94] <author> F.V. Aelten, J. Allen, and S. </author> <title> Devadas Even-Based Verification of Synchronous Globally Controlled, Logic Designs Against Signal Flow Graphs, </title> <journal> IEEE Trans. on CAD of ICs., </journal> <volume> Vol. 13, No. </volume> <month> 1 January </month> <year> 1994. </year>
Reference-contexts: This work is discussed briefly in Section 1.1.4. A post-facto verification method for comparing logic level designs against a restricted class of data-flow graphs in SILAGE was presented by Aelten and others <ref> [AAD 93, Ael 94] </ref>. Denotational and operational models of generalized data-flow graphs have been developed, but they have not been used to study the correctness of transformations [GGJ 93]. A formalization of SILAGE transformations in HOL was studied by Angelo [Ang 94].
Reference: [Ang 94] <author> C. </author> <title> Angelo Formal Hardware Verification in a Silicon Compilation Environment by means of theorem proving, </title> <type> PhD Thesis, </type> <institution> IMEC, Leuven, Belgium, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: Denotational and operational models of generalized data-flow graphs have been developed, but they have not been used to study the correctness of transformations [GGJ 93]. A formalization of SILAGE transformations in HOL was studied by Angelo <ref> [Ang 94] </ref>. A concise description of this work appears in Section 1.1.5. An approach based on the execution model for representation languages in BEDROC high-level synthesis system [CBL 92] has been used to verify the correctness of optimization transformations. <p> This language is used to describe hardware represented as data-flow graphs. Transformations such as commutativity and retiming are used to optimize and refine SILAGE descriptions. In this work <ref> [Ang 94] </ref>, the syntax and semantics of SILAGE programs have been formalized as predicates in HOL [GoM 93]. The denotational semantics of SILAGE have been formalized in HOL. The equivalence of SILAGE programs is specified with respect to this denotational semantics.
Reference: [Bac 88] <author> R.J.R. </author> <title> Back </title>
Reference-contexts: The refinement calculus <ref> [Bac 88] </ref> for specifications based on Dijkstra's guarded command language and weakest precondition semantics has been formalized in HOL [WrS 91]. Transformations such as data refinement and superposition have been verified to be correct.
References-found: 5

