URL: http://www-cad.eecs.berkeley.edu/~shaz/dac97.fire.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/~shaz/publications.html
Root-URL: 
Email: jjang@duke.colorado.edu shaz@eecs.berkeley.edu fmatt kaufmann,carl pixleyg@email.mot.com  
Title: Formal Verification of FIRE: A Case Study  
Author: Jae-Young Jang Shaz Qadeer Matt Kaufmann Carl Pixley 
Address: Boulder, CO 80309 Berkeley, CA 94720 Austin, TX 78731  
Affiliation: Dept. of ECE Dept. of EECS Motorola Inc. University of Colorado University of California 7600A Capital of Texas Highway  
Abstract: We present our experiences with the formal verification of an automotive chip used to control the safety features in a car. We used a BDD based model checker in our work. We describe our verification methodology for verifying a very complicated property on a relatively large design. We also describe the bugs that were found and present our views on how to make model checking an effective integrated part of the design flow for complex hardware systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. A. Emerson, </author> <title> Temporal and Modal Logic, in Formal Models and Semantics (J. </title> <editor> van Leeuwen, ed.), </editor> <volume> vol. </volume> <booktitle> B of Handbook of Theoretical Computer Science, </booktitle> <pages> pp. 996-1072, </pages> <publisher> Elsevier Science, </publisher> <year> 1990. </year>
Reference-contexts: As a result, designers have turned to formal methods for verification. Symbolic model checking is becoming a popular method for verifying commercial sequential designs. In this work, we used Verdict, a BDD based CTL (Computational Tree Logic <ref> [1] </ref>) model checker under development at Motorola, to verify the correctness of an automotive chip we will refer to as FIRE. Verdict has been extensively used to verify commercial designs [2]. <p> If multiple clocks are present, the design can be verified by model checking only if they are synchronized. In this case, the fastest clock is made the global clock and the other clocks are derived from it. It is a limitation of the model (Kripke structure <ref> [1] </ref>), i.e., state transition graph of global states, on which the model checking algorithms work, that asynchronous clocks cannot be handled more directly. In this model, the design is visualized as being in some global state which changes at every clock tick according to the state transition graph.
Reference: [2] <author> B. Plessier and C. Pixley, </author> <title> Formal Verification of a Commercial Serial Bus Interface, </title> <booktitle> in InternationalConference on Computers and Communications, (Phoenix, U.S.A.), </booktitle> <pages> pp. 378-382, </pages> <year> 1995. </year>
Reference-contexts: In this work, we used Verdict, a BDD based CTL (Computational Tree Logic [1]) model checker under development at Motorola, to verify the correctness of an automotive chip we will refer to as FIRE. Verdict has been extensively used to verify commercial designs <ref> [2] </ref>. In the past few years, as model checking has become a popular method for verifying sequential designs, several case studies of verification of commercial designs have been published [3, 4, 5].
Reference: [3] <author> E. M. Clarke and O. Grumberg and H. Hiraishi and S. Jha and D. E. Long and K. L. McMillan and L. A. Ness, </author> <title> Verification of the Futurebus+ Cache Coherence Protocol, </title> <booktitle> in Proc. 11th Intl. Symp. on Comput. Hardware Description Lang. and their Applications, </booktitle> <year> 1993. </year>
Reference-contexts: Verdict has been extensively used to verify commercial designs [2]. In the past few years, as model checking has become a popular method for verifying sequential designs, several case studies of verification of commercial designs have been published <ref> [3, 4, 5] </ref>. This work is intended to be a case study in which several aspects of formal verification of commercial hardware designs are highlighted. In this work, close interaction with the designer resulted in the identification of a very complex property to be verified on a relatively large design.
Reference: [4] <author> A. T. Eiriksson and K. L. McMillan, </author> <title> Using Formal Verification/Analysis Methods on the Critical Path in System Design: A Case Study, </title> <booktitle> in Proc. 7th International Conference on Computer Aided Verification, </booktitle> <publisher> LNCS, </publisher> <pages> pp. 367-380, </pages> <year> 1995. </year>
Reference-contexts: Verdict has been extensively used to verify commercial designs [2]. In the past few years, as model checking has become a popular method for verifying sequential designs, several case studies of verification of commercial designs have been published <ref> [3, 4, 5] </ref>. This work is intended to be a case study in which several aspects of formal verification of commercial hardware designs are highlighted. In this work, close interaction with the designer resulted in the identification of a very complex property to be verified on a relatively large design.
Reference: [5] <author> I. Beer, S. Ben-David, C. Eisner, and A. Landver, </author> <title> RuleBase: An Industry-Oriented Formal Verification Tool, </title> <booktitle> in Proc. of the Design Automation Conf., </booktitle> <address> (Las Vegas, NV), </address> <pages> pp. 655-660, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Verdict has been extensively used to verify commercial designs [2]. In the past few years, as model checking has become a popular method for verifying sequential designs, several case studies of verification of commercial designs have been published <ref> [3, 4, 5] </ref>. This work is intended to be a case study in which several aspects of formal verification of commercial hardware designs are highlighted. In this work, close interaction with the designer resulted in the identification of a very complex property to be verified on a relatively large design.
Reference: [6] <author> R. Bryant, </author> <title> Graph-based Algorithms for Boolean Function Manipulation, </title> <journal> IEEE Trans. Computers, </journal> <volume> vol. C-35, </volume> <pages> pp. 677-691, </pages> <month> Aug. </month> <year> 1986. </year>
Reference-contexts: In hardware designs, it manifests itself in an exponential growth of the state space with the number of latches in the design. Since model checking algorithms are based on state space exploration, their efficacy is also limited by this phenomenon. The introduction of BDDs <ref> [6] </ref> as a symbolic representation of a set of states increased the number of states that could be handled [7]. But, even BDDs have their limit and cannot handle designs with a lot of state holding elements. We faced the state explosion problem in the case of FIRE.
Reference: [7] <author> C. Pixley, </author> <title> A ComputationalTheoryand Implementationof Sequential Hardware Equivalence, </title> <booktitle> in Proc. of the Workshop on Computer-Aided Verification (E. </booktitle> <editor> M. Clarke and R. P. Kurshan, eds.), </editor> <volume> vol. </volume> <booktitle> 3 of DIMACS Series in Discrete Mathematics and Theoretical Computer Science, </booktitle> <pages> pp. 293-320, </pages> <publisher> American Mathematical Society, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: Since model checking algorithms are based on state space exploration, their efficacy is also limited by this phenomenon. The introduction of BDDs [6] as a symbolic representation of a set of states increased the number of states that could be handled <ref> [7] </ref>. But, even BDDs have their limit and cannot handle designs with a lot of state holding elements. We faced the state explosion problem in the case of FIRE. Our tool synthesized more than 200 latches from the Verilog description of FIRE and our model of its environment.
Reference: [8] <author> E. Macii, B. Plessier, and F. Somenzi, </author> <title> Verification of Systems Containing Counters, </title> <booktitle> in Proc. Intl. Conf. on Computer-AidedDesign, </booktitle> <address> (Santa Clara, CA), </address> <pages> pp. 179-182, </pages> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: We made use of this observation to abstract away some of the bits of the counter thereby reducing the state space. Reducing the length of the counter was very useful in reducing the number of reachability steps 3 . Related work can be found in <ref> [8] </ref>. Note that in making this abstraction, intimate knowledge of the design was required. We will come back to this point in Section 5.
Reference: [9] <author> R. K. Brayton et al., </author> <title> VIS: A System for Verification and Synthesis, </title> <booktitle> in Proc. of the 8th International Conference on Computer Aided Verification, vol. 1102 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 428-432, </pages> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Researchers have been looking at compositional proof techniques for a number of years but we have yet to see a practical implementation of these ideas. Recently, an attempt at automating a limited kind of abstraction methodology using the model checker in VIS <ref> [9] </ref> as a decision procedure has been made in [10]. 3 Verification In this section, we describe in more detail specific examples of important properties that we model checked on the design. We verified a total of 76 CTL properties dealing with the different pieces of the design.
Reference: [10] <author> W. Lee, A. Pardo, J. Jang, G. Hachtel, and F. Somenzi, </author> <title> Tearing Based Automatic Abstraction for CTL Model Checking, </title> <booktitle> in Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <address> (San Jose, CA), </address> <pages> pp. 76-81, </pages> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: Recently, an attempt at automating a limited kind of abstraction methodology using the model checker in VIS [9] as a decision procedure has been made in <ref> [10] </ref>. 3 Verification In this section, we describe in more detail specific examples of important properties that we model checked on the design. We verified a total of 76 CTL properties dealing with the different pieces of the design.
References-found: 10

