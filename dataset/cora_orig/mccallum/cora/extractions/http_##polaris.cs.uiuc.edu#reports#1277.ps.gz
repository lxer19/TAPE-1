URL: http://polaris.cs.uiuc.edu/reports/1277.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: Original Loop Bounds Loop Bounds Assumed Constant Type Count Count Difference Proved Dependent Constant Test
Keyword: Original Loop Bounds Loop Bounds Assumed Constant Type Count Count Difference Proved Dependent  
Affiliation: Assumed Dependent  Assumed Dependent  
Address: Omega Test 70770 16.2% 39684 9.1% -7.1%  Unanalyzable Subscripts 16049 3.7% 15515 3.6% -0.1%  Omega Test 72323 16.6% 70381 16.1% -0.5%  Unanalyzable Subscripts 16049 3.7% 15515 3.6% -0.1%  
Note: Integer Programming  Total Proved Dependent  Total  Constant Test  Integer Programming  Total 436325 436320  
Pubnum: 116616  188939 43.3% 186997 42.9% -0.4%  
Phone: 1553 0.4% 30697 7.0% 6.6%  188939 43.3% 186997 42.9% -0.4%  116616 26.7% 116616 26.7% 0.0%  0 0.0% 0 0.0% 0.0%  
Date: 26.7% 116616 26.7% 0.0%  436325 436320  
Abstract: Proved Independent Constant Test 150716 34.5% 150716 34.5% 0.0% Greatest Common Divisor 34645 7.9% 34675 7.9% 0.0% Banerjee's Test for Rectangular Loops 13320 3.1% 42781 9.8% 6.7% Banerjee's Test for Trapezoidal Loops 15 0.1% 3418 0.8% 0.7% Banerjee's Test for Unbounded Loops 28567 6.5% 0 0.0% -6.5% Integer Programming 92 0.1% 1491 0.3% 0.2% Omega Test 3982 0.9% 727 0.2% -0.7% Total Broken Dependences 231337 53.0% 233808 53.6% 0.6% Table 1: Dependence results for the Perfect Benchmarks Proved Independent Constant Test 150716 34.5% 150716 34.5% 0.0% Greatest Common Divisor 34645 7.9% 34675 7.9% 0.0% Banerjee's Test for Unbounded Loops 41902 9.6% 44901 10.3% 0.7% Banerjee's Test for Rectangular Loops 0 0.0% 0 0.0% 0.0% Banerjee's Test for Trapezoidal Loops 0 0.0% 1234 0.3% 0.3% Omega Test 4074 0.9% 2282 0.5% -0.4% Integer Programming 0 0.0% 0 0.0% 0.0% Total Broken Dependences 231337 53.0% 233808 53.6% 0.6% 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> U. Banerjee, </author> <title> Dependence Analysis for Supercomputing. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1988. </year>
Reference-contexts: This work was also supported by the NASA Ames Research Center Grant No. NCC 2-559 (DARPA), and a donation from MIPS Computer Systems. constant test, the GCD test, three variants of Banerjee's inequalities <ref> [1] </ref>, and integer-programming based tests such as the Omega test [2]. Both static (compile-time) and dynamic (run-time) experimental studies are presented. Our study has two major objectives. <p> Conversely, if it does not divide the constant term, then no solution can exist. In the work reported here we used the generalized GCD method, described in <ref> [1] </ref>; it is an extension of the GCD method that considers all subscripts in a multidimensional array simultaneously. When the GCD method breaks a potential dependence, it breaks all the direction vectors simultaneously. <p> The GCD method cannot prove dependence because it does not take into account the value of the loop limits. 2.1.2 Banerjee's Inequalities for Loops with Known Limits Traditionally the most widely studied dependence tests are those based on Banerjee's inequalities. A formalization of these ideas is presented in <ref> [1] </ref>.
Reference: [2] <author> W. Pugh, </author> <title> "The Omega Test: A Fast and Practical Integer Programming Algorithm for Dependence Analysis," </title> <address> Supercomputing'91, </address> <year> 1991. </year>
Reference-contexts: This work was also supported by the NASA Ames Research Center Grant No. NCC 2-559 (DARPA), and a donation from MIPS Computer Systems. constant test, the GCD test, three variants of Banerjee's inequalities [1], and integer-programming based tests such as the Omega test <ref> [2] </ref>. Both static (compile-time) and dynamic (run-time) experimental studies are presented. Our study has two major objectives. The first is to determine how much the accuracy of the dependence analysis is affected if the value of the loop limits is not known. <p> Once an integer solution is found, the process stops and reports success. If, on the other hand, all branches of the exhaustive search lead to empty sets, then the process reports that no solution exists. 2.2.2 Omega Test The Omega test <ref> [2] </ref> is an extension of the Fourier-Motzkin linear-programming algorithm allowing integer constraints on the solution vector. In addition to supporting the full capabilities of integer-programming, the Omega test also permits the systematic handling of unknown additive terms. <p> One implementation detail of these arcs is that they enforce static dependences to be of distance one. More details on how this is implemented can be found in [16]. 4.2 Effectiveness of Dependence Tests A number of papers <ref> [2, 3, 4] </ref> show that each of the many different dependence tests are capable of solving a number of data dependence problems. For evaluation purposes we want to use an ideal dependence test. This ideal test should be able to determine dependence or independence for all possible subscripts.
Reference: [3] <author> G. Goff, K. Kennedy, and C.-W. Tseng, </author> <title> "Practical dependence testing," </title> <journal> SIGPLAN Notices, </journal> <volume> vol. 26, </volume> <pages> pp. 15-29, </pages> <month> June </month> <year> 1991. </year> <booktitle> Proceedings of the ACM SIGPLAN '91 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: The second objective is to determine whether the tests based on integer programming produce better results than traditional approximations such as Baner-jee's test when applied to real programs. Even though there have been other studies of dependence analysis that have presented and analyzed compile-time information <ref> [3, 4] </ref>, to our knowledge this is the first work that focuses on these two objectives. In addition, there is no other work using run-time information to evaluate the accuracy of dependence analysis techniques. <p> Several important observations can be derived from Tables 1 and 2. First is the large number of dependences that are proved and broken by the constant dependence test. This result is consistent with the the results obtained by other studies <ref> [3, 4] </ref>. Second is the un expected effectiveness of Banerjee's test for unbounded loops. Consider first the Original Loop Bounds column of Table 1 where the loop limits are processed as they appear in the source program. <p> One implementation detail of these arcs is that they enforce static dependences to be of distance one. More details on how this is implemented can be found in [16]. 4.2 Effectiveness of Dependence Tests A number of papers <ref> [2, 3, 4] </ref> show that each of the many different dependence tests are capable of solving a number of data dependence problems. For evaluation purposes we want to use an ideal dependence test. This ideal test should be able to determine dependence or independence for all possible subscripts.
Reference: [4] <author> D. E. Maydan, J. L. Hennessy, and M. S. Lam, </author> <title> "Efficient and exact data dependence analysis," </title> <journal> SIGPLAN Notices, </journal> <volume> vol. 26, </volume> <pages> pp. 1-14, </pages> <month> June </month> <year> 1991. </year> <booktitle> Proceedings of the ACM SIGPLAN '91 Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: The second objective is to determine whether the tests based on integer programming produce better results than traditional approximations such as Baner-jee's test when applied to real programs. Even though there have been other studies of dependence analysis that have presented and analyzed compile-time information <ref> [3, 4] </ref>, to our knowledge this is the first work that focuses on these two objectives. In addition, there is no other work using run-time information to evaluate the accuracy of dependence analysis techniques. <p> Affine loop bounds are incorporated naturally into the inequalities. Furthermore, execution constraints such as covering conditionals can be introduced into the dependence equations. It has also been reported that the linear programming approximation to integer programming is sufficient in most cases <ref> [4] </ref>. 2.2.1 Simplex Based Integer Programming Test Several methods are available to solve the integer programming problem. One method of implementation is the branch-and-bound algorithm. This algorithm works by first solving the real valued linear programming problem using the simplex method. <p> Several important observations can be derived from Tables 1 and 2. First is the large number of dependences that are proved and broken by the constant dependence test. This result is consistent with the the results obtained by other studies <ref> [3, 4] </ref>. Second is the un expected effectiveness of Banerjee's test for unbounded loops. Consider first the Original Loop Bounds column of Table 1 where the loop limits are processed as they appear in the source program. <p> One implementation detail of these arcs is that they enforce static dependences to be of distance one. More details on how this is implemented can be found in [16]. 4.2 Effectiveness of Dependence Tests A number of papers <ref> [2, 3, 4] </ref> show that each of the many different dependence tests are capable of solving a number of data dependence problems. For evaluation purposes we want to use an ideal dependence test. This ideal test should be able to determine dependence or independence for all possible subscripts.
Reference: [5] <author> U. Banerjee, </author> <title> Speedup of Ordinary Programs. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> Octo-ber </month> <year> 1979. </year>
Reference-contexts: The rest of this section consists of two subsections. One discusses simple and approximate tests and the other describes integer-programming based tests. 2.1 Approximate Dependence Tests Approximate dependence techniques, especially those developed by Banerjee <ref> [5, 6] </ref>, have been widely adopted in both experimental and commercial compilers. In the last few years, a renewed interest in the subject of dependence analysis has arisen, and techniques have been developed that are in some cases more accurate than Banerjee's [7, 8, 9].
Reference: [6] <author> K. Psarris, D. Klappholz, and X. Kong, </author> <title> "On the accuracy of the Banerjee test," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> vol. 12, </volume> <pages> pp. 152-157, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: The rest of this section consists of two subsections. One discusses simple and approximate tests and the other describes integer-programming based tests. 2.1 Approximate Dependence Tests Approximate dependence techniques, especially those developed by Banerjee <ref> [5, 6] </ref>, have been widely adopted in both experimental and commercial compilers. In the last few years, a renewed interest in the subject of dependence analysis has arisen, and techniques have been developed that are in some cases more accurate than Banerjee's [7, 8, 9].
Reference: [7] <author> Z. Li, P.-C. Yew, and C.-Q. Zhu, </author> <title> "Data Dependence Analysis on Multi-dimensional Array References," </title> <booktitle> in Proc. 3rd International Conf. on Supercomputing, </booktitle> <pages> pp. 215-224, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: In the last few years, a renewed interest in the subject of dependence analysis has arisen, and techniques have been developed that are in some cases more accurate than Banerjee's <ref> [7, 8, 9] </ref>. In addition to the published variations of Banerjee's inequalities, for rectangular and trapezoidal iteration spaces, we have extended the implementation to handle dependences correctly in loops with unknown upper and lower limits. This extension was developed after some preliminary results from the experiments in this paper.
Reference: [8] <author> X. Kong, D. Klappholz, and K. Psarris, </author> <title> "The I Test: </title>
Reference-contexts: In the last few years, a renewed interest in the subject of dependence analysis has arisen, and techniques have been developed that are in some cases more accurate than Banerjee's <ref> [7, 8, 9] </ref>. In addition to the published variations of Banerjee's inequalities, for rectangular and trapezoidal iteration spaces, we have extended the implementation to handle dependences correctly in loops with unknown upper and lower limits. This extension was developed after some preliminary results from the experiments in this paper.
References-found: 8

