URL: ftp://ftp.cs.washington.edu/tr/1992/07/UW-CSE-92-07-02.PS.Z
Refering-URL: http://www.cs.washington.edu/research/constraints/solvers/skyblue-tr-92.html
Root-URL: 
Title: The SkyBlue Constraint Solver  
Author: Michael Sannella 
Keyword: constraints, constraint hierarchies, local propagation, user interfaces, interactive tech niques.  
Note: A constraint describes a relationship that should be maintained, for example that the equality  
Abstract: Technical Report 92-07-02 Dept. of Computer Science and Engineering University of Washington February 1993 Abstract A + B = C holds between three variables, that a set of displayed objects are aligned, or that the elements in a data structure are consistent with a graphic display of this structure. Constraint solvers have been successfully applied to problems in computer graphics including geometric design and user interface construction. This paper presents the SkyBlue constraint solver, an efficient incremental algorithm that uses local propagation to maintain sets of required and preferential constraints. SkyBlue is a successor to the DeltaBlue algorithm, which was used as the constraint solver in the ThingLab II user interface development environment. DeltaBlue has two limitations: cycles of constraints are prohibited, and the procedures used to satisfy a constraint can only have a single output. SkyBlue relaxes these restrictions, allowing cycles of constraints to be constructed (although SkyBlue may not be able to satisfy all of the constraints in a cycle) and supporting multi-output methods. The SkyBlue algorithm has been incorporated into Multi-Garnet, an extended version of the Garnet user interface development system that supports multi-way constraints. Multi-Garnet has been used to build several user interfaces exploiting the features of SkyBlue that would have been difficult to build within Garnet. This paper describes the basic SkyBlue algorithm and outlines several techniques that significantly improve its performance for large constraint graphs. Performance measurements are presented demonstrating that SkyBlue is efficient enough to use in interactive user interfaces. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Franz G. Amador, Adam Finkelstein, and Daniel S. Weld. </author> <title> Real-Time Self-Explanatory Simulation. </title> <note> (submitted to AAAI 93). </note>
Reference-contexts: Multi-Garnet and SkyBlue implementations are available (contact the author for more information). SkyBlue is also currently being used as the constraint solver in an implementation of the Kaleidoscope language [5] and as an equation manipulation tool in the Pika simulation system <ref> [1] </ref>. 2 Method Graphs A SkyBlue constraint is represented by one or more methods. Each method is a procedure that reads the values of a subset of the constraint's variables (the method's input variables) and calculates values for the remaining variables (the method's output variables) that satisfy the constraint.
Reference: [2] <author> Paul Barth. </author> <title> An Object-Oriented Approach to Graphical Interfaces. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5(2) </volume> <pages> 142-172, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Many user interface development systems have provided integrated constraint solvers, including GROW <ref> [2] </ref>, Garnet [14], Rendezvous [9], and ThingLab II [13]. References [3, 6] contain additional references to constraint-based systems. One important class of constraint solvers accepts a set of mathematical equations between variables, and uses symbolic or numerical techniques to find variable values that satisfy the equations. <p> For example, a user interface system may allow procedures to be designated as callback procedures, which are called when particular events occur. These can be used to update the application data structures when the user manipulates the interface. Systems with such facilities include GROW <ref> [2] </ref>, Interviews [12], and the Smalltalk Model-View-Controller [11]. These facilities can be difficult to use if there are multiple callbacks that access the same data structures: the programmer may need to understand the internal details of the consistency mechanism to prevent undesirable interactions.
Reference: [3] <author> Alan Borning, Bjorn Freeman-Benson, and Molly Wilson. </author> <title> Constraint Hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5(3) </volume> <pages> 223-270, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Many user interface development systems have provided integrated constraint solvers, including GROW [2], Garnet [14], Rendezvous [9], and ThingLab II [13]. References <ref> [3, 6] </ref> contain additional references to constraint-based systems. One important class of constraint solvers accepts a set of mathematical equations between variables, and uses symbolic or numerical techniques to find variable values that satisfy the equations. <p> In a user interface, different alternatives may correspond to different visible behaviors of the interface, and the programmer may want to control which behavior is chosen. The constraint hierarchy theory presented in <ref> [3] </ref> provides a way to specify declaratively how these situations should be handled. A constraint hierarchy is a set of constraints, each labeled with a strength, indicating how important it is to satisfy each constraint. <p> A stay constraint specifies that its output variable should not be changed. A similar type of constraint is a set constraint, which sets its output to a constant value. Set constraints can be used to inject new variable values into a constraint graph. In Reference <ref> [3] </ref> presents several different ways to define which variable values "best" satisfy a constraint hierarchy. The concept of read-only variables extends this theory to constraints that may not be able to set some of their variables, such as SkyBlue constraints without methods in all possible directions.
Reference: [4] <author> Bjorn Freeman-Benson. </author> <title> A Module Compiler for ThingLab II. </title> <booktitle> In Proceedings of the 1989 ACM Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 389-396, </pages> <address> New Orleans, </address> <month> October </month> <year> 1989. </year> <note> ACM. </note>
Reference-contexts: Constraint Compilers SkyBlue could be extended with a constraint compiler to compile a subgraph of the constraint graph (possibly including cycles) into a single complex constraint with methods to handle the different propagation directions <ref> [4] </ref>. This could be used to avoid repeated calls to a more powerful solver and as an encapsulation mechanism.
Reference: [5] <author> Bjorn Freeman-Benson and Alan Borning. </author> <booktitle> The Design and Implementation of Kaleidoscope'90, </booktitle>
Reference-contexts: Multi-Garnet and SkyBlue implementations are available (contact the author for more information). SkyBlue is also currently being used as the constraint solver in an implementation of the Kaleidoscope language <ref> [5] </ref> and as an equation manipulation tool in the Pika simulation system [1]. 2 Method Graphs A SkyBlue constraint is represented by one or more methods.
References-found: 5

