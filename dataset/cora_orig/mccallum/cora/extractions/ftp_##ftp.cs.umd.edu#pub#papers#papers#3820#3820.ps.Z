URL: ftp://ftp.cs.umd.edu/pub/papers/papers/3820/3820.ps.Z
Refering-URL: http://www.cs.umd.edu/TRs/TR.html
Root-URL: 
Email: fkrish, bao, agrawalag@cs.umd.edu  
Title: Temporal accuracy and modern high performance processors: A case study using Pentium Pro  
Author: Krishnan K. Kailas Bao Trinh Ashok K. Agrawala 
Address: College Park  
Affiliation: Institute for Advanced Computer Studies Systems Design and Analysis Group Department of Computer Science University of Maryland,  
Pubnum: Technical Report  
Abstract: Real-time systems must be able to ensure temporally determinate execution of real-time tasks at run-time. By temporal accuracy, we refer to the timing accuracy with which the execution of a task can be started at a predetermined time. Temporally determinate execution of tasks on modern high performance processors is becoming more and more difficult because of the techniques used by these processors to boost their average performance. This report describes the experiments we have conducted to measure the temporal accuracy that can be achieved with the Pentium Pro processor. We present the results of these experiments and analyze these results to highlight the limitations of temporally determinate execution of programs on modern high performance processor architectures. fl This work is supported in part by ARPA under contract N66001-95-C-8619 and USAF F30602-96-1-0329. The views, opinions, and/or findings contained in this report are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the Advanced Research Projects Agency, U.S. Air Force or the U.S. Government. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Intel Pentium Pro Processor Presentation. </institution> <note> Web page URL: http://www.intel.com/procs /ppro/info/isscc/index.htm. accessed on Feb 05 16:34:46 EST 1997. </note>
Reference-contexts: All the above techniques make it hard to predict the execution time of an instruction. Moreover, mispredicted branches, interrupts, breakpoints, traps and faults can cause some or all of the speculative state to be flushed by the processor <ref> [1] </ref>, thereby adding more unpredictability. Temporal accuracy and modern high performance processors 3 The Pentium Pro architecture offers two interesting timing mechanisms a pollable 64-bit time register called the Time Stamp Counter (TSC) and a 32-bit programmable timer.
Reference: [2] <editor> Pentium Pro Family Developer's Manual, </editor> <volume> volume 1-3. </volume> <publisher> Intel Corporation, </publisher> <address> Mt. Prospect, IL, </address> <year> 1996. </year>
Reference-contexts: The processor has an instruction pool coupled with three independent units, viz. the Fetch/Decode unit, the Dispatch/Execute unit and the Retire unit as shown in Figure-1. A user program is executed by the Pentium Pro processor as follows (for a detailed description see <ref> [2, 5] </ref>). The user program instruction stream is fetched from the instruction cache and decoded into a series of micro-operations (ops) by the Fetch/Decode unit. Pre-fetching of instructions is speculative, based on a dynamic branch prediction scheme. <p> The effect of the instructions executed in the background at the time of interrupt is therefore hard to identify from the experimental results. 6 Discussion We have used the on-chip Performance Monitoring counters <ref> [2] </ref> to investigate the reason behind the periodic pattern found in the experimental results. <p> Moreover, the RDPMC instruction used for reading the performance monitoring counters (PMC) is not a serializing instruction, and hence is not ordered with other instructions <ref> [2] </ref>.
Reference: [3] <institution> Optimizations For Intel's 32-Bit Processors. AP-526 Application note. Intel Corporation, Mt. Prospect, IL, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: This further confirms our explanation for the cyclic variation pattern in temporal accuracy with increasing target TSC value. The alignment of code inside the cache was also found to influence the variations in temporal accuracy significantly <ref> [3] </ref>. Figure-6 clearly shows the increase in variations when the TSC loop was not aligned to 32 byte boundary compared to aligned code 2 used in the above experiments.
Reference: [4] <author> P. Koopman. </author> <title> Perils of the PC Cache. </title> <journal> Embedded Systems Programming, </journal> <volume> 6(5) </volume> <pages> 26-34, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Moreover, if the working set of the background process is static and small, it is possible for the interrupt handler to be always resident in the cache thereby avoiding I-cache misses on interrupt. Similar results were reported by Koopman <ref> [4] </ref> based on experiments with Intel 80486 cache.
Reference: [5] <author> Robert P. Colwell and Randy L. Steck. </author> <title> A 0.6um BiCMOS Processor with Dynamic Execution. </title> <booktitle> In Proceedings of IEEE International Solid-State Circuits Conference (ISSCC). IEEE, </booktitle> <month> February </month> <year> 1995. </year>
Reference-contexts: The processor has an instruction pool coupled with three independent units, viz. the Fetch/Decode unit, the Dispatch/Execute unit and the Retire unit as shown in Figure-1. A user program is executed by the Pentium Pro processor as follows (for a detailed description see <ref> [2, 5] </ref>). The user program instruction stream is fetched from the instruction cache and decoded into a series of micro-operations (ops) by the Fetch/Decode unit. Pre-fetching of instructions is speculative, based on a dynamic branch prediction scheme.
Reference: [6] <author> M. Saksena, J. da Silva, and Ashok K. Agrawala. </author> <title> Design and Implementation of Maruti-II. </title> <editor> In Sang H. Son, editor, </editor> <booktitle> Principles of Real-Time Systems. </booktitle> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1995. </year> <note> Also available as University of Maryland CS Tech Report CS-TR-3181. </note>
Reference-contexts: Our test programs were run on the bare machine, which was re-booted before each run. A modified version of the Maruti kernel <ref> [6] </ref> was used to gain exclusive access to the processor and run our test code. There was absolutely no operating system or any other program running concurrently when the test programs were executed. All the hardware interrupts were also disabled during the experiments. <p> Special conditions have to be set to achieve higher temporal accuracies. 6.1 Maruti run-time system We have examined how the results of this study can be made use of for improving the temporal accuracy of next release of the Maruti run-time system. Maruti <ref> [6] </ref> is a hard real-time operating system which manages resources in time base. In Maruti, resources are explicitly reserved prior to execution and the tasks are executed based on a pre-determined schedule called calendar.
Reference: [7] <author> John A. Stankovic and Krithi Ramamritham. </author> <title> Editorial: What is Predictability in Real-Time Systems? The Journal of Real-Time Systems, </title> <booktitle> 2 </booktitle> <pages> 247-254, </pages> <year> 1990. </year>
Reference-contexts: These techniques make the temporally determinate execution of tasks on such processors very difficult and thereby making the system less predictable <ref> [7, 8] </ref>. In this report, we present the results of experiments we have carried out to study the temporal accuracy of an off-the-shelf modern high performance processor. Specifically, our goal was to construct a run-time mechanism to achieve temporally accurate execution of programs on such processors.
Reference: [8] <author> Clyde E. Taylor and Ronald N. Schroeder. </author> <title> Are RISCs ready for real-time control? InTech, </title> <booktitle> 43(12) </booktitle> <pages> 45-48, </pages> <month> December </month> <year> 1996. </year>
Reference-contexts: These techniques make the temporally determinate execution of tasks on such processors very difficult and thereby making the system less predictable <ref> [7, 8] </ref>. In this report, we present the results of experiments we have carried out to study the temporal accuracy of an off-the-shelf modern high performance processor. Specifically, our goal was to construct a run-time mechanism to achieve temporally accurate execution of programs on such processors.
References-found: 8

