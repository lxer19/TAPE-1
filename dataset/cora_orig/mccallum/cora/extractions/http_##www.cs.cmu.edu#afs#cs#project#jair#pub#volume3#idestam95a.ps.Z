URL: http://www.cs.cmu.edu/afs/cs/project/jair/pub/volume3/idestam95a.ps.Z
Refering-URL: http://www.cs.washington.edu/research/jair/abstracts/idestam95a.html
Root-URL: 
Email: pi@dsv.su.se  
Title: Generalization of Clauses under Implication  
Author: Peter Idestam-Almquist 
Address: Electrum 230, S-164 40 Kista, Sweden  
Affiliation: Department of Computer and Systems Sciences, Stockholm University  
Note: Journal of Artificial Intelligence Research 3 (1995) 467-489 Submitted 5/95; published 12/95  
Abstract: In the area of inductive learning, generalization is a main operation, and the usual definition of induction is based on logical implication. Recently there has been a rising interest in clausal representation of knowledge in machine learning. Almost all inductive learning systems that perform generalization of clauses use the relation -subsumption instead of implication. The main reason is that there is a well-known and simple technique to compute least general generalizations under -subsumption, but not under implication. However generalization under -subsumption is inappropriate for learning recursive clauses, which is a crucial problem since recursion is the basic program structure of logic programs. We note that implication between clauses is undecidable, and we therefore introduce a stronger form of implication, called T-implication, which is decidable between clauses. We show that for every finite set of clauses there exists a least general generalization under T-implication. We describe a technique to reduce generalizations under implication of a clause to generalizations under -subsumption of what we call an expansion of the original clause. Moreover we show that for every non-tautological clause there exists a T-complete expansion, which means that every generalization under T-implication of the clause is reduced to a generalization under -subsumption of the expansion.
Abstract-found: 1
Intro-found: 1
Reference: <author> Aha, D. W., Lapointe, S., Ling, C. X., & Matwin, S. </author> <year> (1994). </year> <title> Inverting implication with small training sets. </title> <booktitle> In Proceedings of the Seventh European Conference on Machine Learning. </booktitle> <publisher> Springer-Verlag. </publisher>
Reference: <author> Bain, M., & Muggleton, S. </author> <year> (1992). </year> <title> Non-monotonic learning. </title> <editor> In Muggleton, S. (Ed.), </editor> <booktitle> Inductive Logic Programming. </booktitle> <publisher> Academic Press, London. </publisher>
Reference: <author> Chang, C., & Lee, R. </author> <year> (1973). </year> <title> Symbolic Logic and Mechanical Theorem Proving. </title> <publisher> Academic Press, London. </publisher>
Reference: <author> Cohen, W. </author> <year> (1995a). </year> <title> Pac-learning recursive logic programs: Efficient algorithms. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 2, </volume> <pages> 501-539. </pages>
Reference: <author> Cohen, W. </author> <year> (1995b). </year> <title> Pac-learning recursive logic programs: Negative results. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 2, </volume> <pages> 541-573. </pages>
Reference: <author> Gallier, J. H. </author> <year> (1986). </year> <title> Logic for Computer Science Foundations of Automatic Theorem Proving. </title> <publisher> Harper & Row Publishers. </publisher>
Reference: <author> Gottlob, G. </author> <year> (1987). </year> <title> Subsumption and implication. </title> <journal> Information Processing Letters, </journal> <volume> 24 (2), </volume> <pages> 109-111. </pages>
Reference: <author> Hamfelt, A., & Nilsson, J. F. </author> <year> (1994). </year> <title> Inductive metalogic programming. </title> <booktitle> In Proceedings of the Fourth International Workshop on Inductive Logic Programming. </booktitle> <institution> Gesellschaft fur Mathematik und Datenverarbeitung mbH, </institution> <address> Bad Honnef/Bonn, Germany. </address>
Reference-contexts: It was also shown that generalizing this class of learning problem in any natural way leads to a computationally difficult problem. This result tells us that to efficiently learn more complex recursive hypotheses some extra information, such as rule models (Kietz & Wrobel, 1992) or program recursion schemes <ref> (Hamfelt & Nilsson, 1994) </ref>, is needed. The contributions of this paper are threefold. First, we have systematically reviewed and discussed the concepts relevant to generalization in a first-order setting. Second, we have introduced T-implication, a stronger form of implication which is decidable between clauses.
Reference: <author> Helft, N. </author> <year> (1987). </year> <title> Inductive generalization: A logical framework. </title> <booktitle> In Proceedings of the Second European Working Session on Learning. </booktitle> <publisher> Sigma Press, </publisher> <address> Wilmslow, England. </address>
Reference-contexts: We also have C 6' D, and even C 6~ D. It has been claimed that implication and -subsumption are equivalent for function-free clauses <ref> (Helft, 1987) </ref>. This is wrong as shown by the example above. The above example also shows that if a clause C implies a clause D then C does not necessarily -subsume D. It is well-known that implication is a strictly weaker relation between clauses than -subsumption.
Reference: <author> Hume, D., & Sammut, C. </author> <year> (1991). </year> <title> Using inverse resolution to learn relations from experiments. </title> <booktitle> In Proceedings of the Eighth International Workshop on Machine Learning. </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Idestam-Almquist, P. </author> <year> (1992). </year> <title> Learning missing clauses by inverse resolution. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems 1992. </booktitle> <publisher> Ohmsha Publishers, </publisher> <address> Tokyo. </address> <note> 486 Generalization of Clauses under Implication Idestam-Almquist, </note> <author> P. </author> <year> (1993a). </year> <title> Generalization of Clauses. </title> <type> Ph.D. thesis, </type> <institution> Department of Computer and Systems Sciences, Stockholm University and Royal Institute of Technology. </institution>
Reference: <author> Idestam-Almquist, P. </author> <year> (1993b). </year> <title> Generalization under implication by recursive anti-unification. </title> <booktitle> In Proceedings of the Tenth International Conference on Machine Learning. </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Idestam-Almquist, P. </author> <year> (1993c). </year> <title> Generalization under implication by using or-introduction. </title> <booktitle> In Proceedings of the Sixth European Conference on Machine Learning. </booktitle> <publisher> Springer-Verlag. </publisher>
Reference: <author> Idestam-Almquist, P. </author> <year> (1995). </year> <title> Efficient induction of recursive definitions by structural analysis of saturations. </title> <booktitle> In Proceedings of the Fifth International Workshop on Inductive Logic Programming. </booktitle> <institution> Department of Computer Science, Katholieke Universiteit Leu-ven, Belgium. </institution>
Reference: <author> Kietz, J.-U. </author> <year> (1993). </year> <title> A comparative study of structural most specific generalizations used in machine learning. </title> <editor> In Muggleton, S. (Ed.), </editor> <booktitle> Proceedings of the Third International Workshop on Inductive Logic Programming. </booktitle> <institution> J. Stefan Institute, Ljubljana, Slovenia. </institution>
Reference-contexts: Even an LGG reduced under -subsumption, which means that all literals that are redundant under -subsumption are removed, may grow exponentially in the number of clauses <ref> (Kietz, 1993) </ref>. Since an expansion of a clause is an LGG of a set of or-introduced clauses, the computational cost of an expansion grows exponentially in the number of literals used in the or-introduction.
Reference: <author> Kietz, J.-U., & Wrobel, S. </author> <year> (1992). </year> <title> Controlling the complexity of learning in logic through syntactic and task-oriented models. </title> <editor> In Muggleton, S. (Ed.), </editor> <booktitle> Inductive Logic Programming. </booktitle> <publisher> Academic Press, </publisher> <address> San Diego, California. </address>
Reference-contexts: It was also shown that generalizing this class of learning problem in any natural way leads to a computationally difficult problem. This result tells us that to efficiently learn more complex recursive hypotheses some extra information, such as rule models <ref> (Kietz & Wrobel, 1992) </ref> or program recursion schemes (Hamfelt & Nilsson, 1994), is needed. The contributions of this paper are threefold. First, we have systematically reviewed and discussed the concepts relevant to generalization in a first-order setting.
Reference: <author> Kowalski, R. </author> <year> (1970). </year> <title> The case for using equality axioms in automatic demonstration. </title> <booktitle> In Symposium on Automatic Demonstration, Lecture notes in Mathematics, </booktitle> <volume> Vol. 125. </volume> <publisher> Springer-Verlag. </publisher>
Reference: <author> Lapointe, S., & Matwin, S. </author> <year> (1992). </year> <title> Sub-unification: A tool for efficient induction of recursive programs. </title> <booktitle> In Proceedings of the Ninth International Conference on Machine Learning. </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Lavrac, N., & De Raedt, L. </author> <year> (1995). </year> <title> Inductive logic programming: A survey of European research. </title> <journal> AI Communications, </journal> <volume> 8 (1), </volume> <pages> 3-19. </pages>
Reference: <author> Lavrac, N., & Dzeroski, S. </author> <year> (1994). </year> <title> Inductive Logic Programming: Techniques and Applications. </title> <publisher> Ellis Horwood. </publisher>
Reference: <author> Lee, C. </author> <year> (1967). </year> <title> A Completeness Theorem and a Computer Program for Finding Theorems Derivable from Given Axioms. </title> <type> Ph.D. thesis, </type> <institution> University of California, Berkeley. </institution>
Reference-contexts: It follows from this proposition that an LGG and an LGGI of a set of clauses, including at least one non-ambivalent clause, are equivalent. Muggleton (1992) has investigated the relationship between resolution and implication between clauses. He describes the subsumption theorem <ref> (Lee, 1967) </ref> in terms of input resolution, and gives a corollary about the relationship between -subsumption and implication between clauses. Unfortunately, this formulation of the subsumption theorem, which later also has been used by Idestam-Almquist (1993c, 1993a), has been shown to be wrong.
Reference: <author> Lloyd, J. W. </author> <year> (1987). </year> <note> Foundations of Logic Programming. Springer-Verlag. Second edition. </note>
Reference-contexts: In section 3, we present a technique to reduce implication to -subsumption based on or-introduction of literals. Finally, our results, computational complexity and future work are discussed in section 4. We assume the reader to be familiar with the basic notions and notations in Logic Programming <ref> (Lloyd, 1987) </ref> and/or Automatic Theorem Proving (Chang & Lee, 1973; Gallier, 1986). Generalization of Clauses under Implication 2. Generalization of Clauses In the area of Inductive Logic Programming (ILP), the framework for generalization of clauses developed by Plotkin (1970, 1971b, 1971a), has been accorded much interest.
Reference: <author> Marcinkowski, J., & Pacholski, L. </author> <year> (1992). </year> <title> Undecidability of the horn clause implication problem. </title> <booktitle> In Proceedings of the Thirtythird Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pp. 354-362 Pittsburg, </pages> <address> Pennsylvania. </address>
Reference-contexts: Theorem 4 (Undecidability of implication between clauses) Let C and D be clauses. Then there exists no procedure to decide if C ) D. Niblett (1988) has claimed that implication between Horn clauses is decidable. This result has later been proved to be false <ref> (Marcinkowski & Pacholski, 1992) </ref>.
Reference: <author> Muggleton, S. </author> <year> (1990). </year> <title> Inductive logic programming. </title> <booktitle> In Proceedings of the Workshop on Algorithmic Learning Theory. </booktitle> <publisher> Ohmsha Publishers, </publisher> <address> Tokyo. </address> <note> 487 Idestam-Almquist Muggleton, </note> <author> S. </author> <year> (1991). </year> <title> Inductive logic programming. </title> <journal> New Generation Computing Journal, </journal> <volume> 8 (4), </volume> <pages> 295-318. </pages>
Reference-contexts: This is not surprising since our framework for generalization under implication is based on and extends Plotkin's framework for generalization under -subsumption, which already suffers from complexity problems. In general an LGG of a set of clauses may grow exponentially in the number of clauses in the set <ref> (Muggleton & Feng, 1990) </ref>. Even an LGG reduced under -subsumption, which means that all literals that are redundant under -subsumption are removed, may grow exponentially in the number of clauses (Kietz, 1993). <p> However, although Plotkin's framework for generalization under -subsumption is com-putationally expensive, it has been widely used as a theoretical framework. Then to make it practical, a number of different restrictions on the clausal language has been considered, for example ij-determinacy <ref> (Muggleton & Feng, 1990) </ref>. In a similar way we hope to find restrictions under which our here presented framework for generalization under implication can be practically useful. Idestam-Almquist (1993b, 1993a) has described a technique to efficiently compute a restricted form of generalizations under implication.
Reference: <author> Muggleton, S. </author> <year> (1992). </year> <title> Inverting implication. </title> <booktitle> In Proceedings of the Second International Workshop on Inductive Logic Programming. </booktitle> <publisher> ICOT Technical Memorandum TM-1182. </publisher>
Reference: <author> Muggleton, S. </author> <year> (1993). </year> <title> Inductive logic programming: Derivations, successes and shortcomings. </title> <booktitle> In Proceedings of the Sixth European Conference on Machine Learning. </booktitle> <publisher> Springer-Verlag. </publisher>
Reference: <author> Muggleton, S. </author> <year> (1995). </year> <title> Inverse entailment and Progol. </title> <journal> New Generation Computing Journal, </journal> <volume> 13. </volume>
Reference: <author> Muggleton, S., & Buntine, W. </author> <year> (1988). </year> <title> Machine invention of first-order predicates by inverting resolution. </title> <booktitle> In Proceedings of the Fifth International Conference on Machine Learning. </booktitle> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Muggleton, S., & De Raedt, L. </author> <year> (1994). </year> <title> Inductive logic programming: Theory and methods. </title> <journal> Journal of Logic Programming, </journal> <volume> 19,20, </volume> <pages> 629-679. </pages>
Reference: <author> Muggleton, S., & Feng, C. </author> <year> (1990). </year> <title> Efficient induction of logic programs. </title> <booktitle> In Proceedings of the Workshop on Algorithmic Learning Theory. </booktitle> <publisher> Ohmsha Publishers, </publisher> <address> Tokyo. </address>
Reference-contexts: This is not surprising since our framework for generalization under implication is based on and extends Plotkin's framework for generalization under -subsumption, which already suffers from complexity problems. In general an LGG of a set of clauses may grow exponentially in the number of clauses in the set <ref> (Muggleton & Feng, 1990) </ref>. Even an LGG reduced under -subsumption, which means that all literals that are redundant under -subsumption are removed, may grow exponentially in the number of clauses (Kietz, 1993). <p> However, although Plotkin's framework for generalization under -subsumption is com-putationally expensive, it has been widely used as a theoretical framework. Then to make it practical, a number of different restrictions on the clausal language has been considered, for example ij-determinacy <ref> (Muggleton & Feng, 1990) </ref>. In a similar way we hope to find restrictions under which our here presented framework for generalization under implication can be practically useful. Idestam-Almquist (1993b, 1993a) has described a technique to efficiently compute a restricted form of generalizations under implication.
Reference: <author> Muggleton, S., & Page, D. </author> <year> (1994). </year> <title> Self saturation of definite clauses. </title> <booktitle> In Proceedings of the Fourth International Workshop on Inductive Logic Programming. </booktitle> <institution> Gesellschaft fur Mathematik und Datenverarbeitung mbH, </institution> <address> Bad Honnef/Bonn, Germany. </address>
Reference: <author> Niblett, T. </author> <year> (1988). </year> <title> A study of generalization in logic programs. </title> <booktitle> In Proceedings of the Third European Working Session on Learning. </booktitle> <publisher> Pitman. </publisher>
Reference: <author> Nienhuys-Cheng, S.-H., & de Wolf, R. </author> <year> (1995). </year> <title> The subsumption theorem in inductive logic programming: Facts and fallacies. </title> <booktitle> In Proceedings of the Fifth International Workshop on Inductive Logic Programming. </booktitle> <institution> Department of Computer Science, Katholieke Universiteit Leuven, Belgium. </institution>
Reference: <author> Plotkin, G. D. </author> <year> (1970). </year> <title> A note on inductive generalization. </title> <editor> In Meltzer, B., & Michie, D. (Eds.), </editor> <booktitle> Machine Intelligence, </booktitle> <volume> Vol. 5, </volume> <pages> pp. 153-163. </pages> <publisher> Edinburgh University Press. </publisher>
Reference: <author> Plotkin, G. D. </author> <year> (1971a). </year> <title> Automatic Methods of Inductive Inference. </title> <type> Ph.D. thesis, </type> <institution> Edinburgh University. </institution>
Reference: <author> Plotkin, G. D. </author> <year> (1971b). </year> <title> A further note on inductive generalization. </title> <editor> In Meltzer, B., & Michie, D. (Eds.), </editor> <booktitle> Machine Intelligence, </booktitle> <volume> Vol. 6, </volume> <pages> pp. 101-124. </pages> <publisher> Edinburgh University Press. </publisher>
Reference: <author> Quinlan, J. R. </author> <year> (1986). </year> <title> Induction of decision trees. </title> <journal> Machine Learning Journal, </journal> <volume> 1 (1), </volume> <pages> 81-106. </pages>
Reference-contexts: In inductive machine learning the goal is to develop techniques for inducing hypotheses from examples (observations). By using the rich representation formalism of computational logic (clauses) for hypotheses and examples, ILP can overcome the limitations of classical machine learning representations, such as decision trees <ref> (Quinlan, 1986) </ref>. By using a clausal representation we have the ability to learn all types of hypotheses describable in first-order logic, in particular the important class of recursive hypotheses. Another advantage of using a clausal representation is that clausal theories are easy to manipulate for machine learning algorithms.
Reference: <author> Robinson, J. A. </author> <year> (1965). </year> <title> A machine-oriented logic based on the resolution principle. </title> <journal> Journal of the ACM, </journal> <volume> 12 (1), </volume> <month> 23-41. </month> <title> 488 Generalization of Clauses under Implication Rouveirol, </title> <address> C. </address> <year> (1992). </year> <title> Extensions of inversion of resolution applied to theory completion. </title>
Reference-contexts: Below we give the correct formulation of the subsumption theorem, which is based on the nth resolution <ref> (Robinson, 1965) </ref>. Definition A substitution is a unifier for a finite set of literals S if and only if S is a singleton.
Reference: <editor> In Muggleton, S. (Ed.), </editor> <booktitle> Inductive Logic Programming. </booktitle> <publisher> Academic Press, </publisher> <address> San Diego, California. </address>
Reference: <author> Rouveirol, C., & Puget, J.-F. </author> <year> (1989). </year> <title> A simple solution for inverting resolution. </title> <booktitle> In Proceedings of the Fourth European Working Session on Learning. </booktitle> <publisher> Pitman. </publisher>
Reference: <author> Schmidt-Schauss, M. </author> <year> (1988). </year> <title> Implication of clauses is undecidable. </title> <journal> Theoretical Computer Science, </journal> <volume> 59, </volume> <pages> 287-296. </pages>
Reference: <author> Slagle, J. R., Chang, C. L., & Lee, R. C. T. </author> <year> (1969). </year> <title> Completeness theorems for semantic resolution in consequence-finding. </title> <booktitle> In Proceedings of the First International Joint Conference on Artificial Intelligence. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, California. </address>
Reference: <author> Wirth, R. </author> <year> (1989). </year> <title> Completing logic programs by inverse resolution. </title> <booktitle> In Proceedings of the Fourth European Working Session on Learning. </booktitle> <publisher> Pitman. </publisher> <pages> 489 </pages>
References-found: 43

