URL: http://www.cs.uoregon.edu/~fickas/icse-workshop/ghezzi.ps
Refering-URL: http://www.cs.uoregon.edu/~fickas/icse-workshop/
Root-URL: http://www.cs.uoregon.edu
Email: [cugola, ghezzi]@elet.polimi.it  
Phone: Tel.: +39-2-23993666  
Title: Inconsistencies in Software Development: Towards a Reference Framework  
Author: Gianpaolo Cugola and Carlo Ghezzi 
Date: March 17, 1997  
Address: P.za Leonardo da Vinci 32 20133 Milano (Italy).  
Affiliation: Dipartimento di Elettronica e Informazione Politecnico di Milano  
Abstract: This paper describes a framework to formalize the concept of inconsistency in software development. This framework will be used to analyze and compare several approaches proposed in literature to deal with the different forms of inconsistencies that may arise in software development. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Jackson, </author> <title> Software Requirements & Specifications. </title> <publisher> ACM Press and Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: A formal model asserts some facts about a domain that constitutes the scope of the model <ref> [1] </ref>. A formal model is expressed using some formal language (i.e., a language whose semantics is formally defined) 1 . A domain is a particular part of the world that can be considered separately from the rest of the world [1]. <p> about a domain that constitutes the scope of the model <ref> [1] </ref>. A formal model is expressed using some formal language (i.e., a language whose semantics is formally defined) 1 . A domain is a particular part of the world that can be considered separately from the rest of the world [1]. It is composed of a set of entities that interact and evolve during time. At every instant, a domain is in a particular state that is characterized by the properties that hold for the different entities that compose the domain and the relationships that hold among these entities. <p> In this paper the word "formal model" (or simply "model") will be used to denote a formal description of some part of the world. 2 This example is a partial rewriting of a problem statement given in <ref> [1] </ref>, page 169. 3 * if the winding motor polarity is set to up and the motor is activated, then the lift starts to rise; * the lift doors take 2250 msecs to reach the fully closed from the fully open state. <p> Each formal model contains a set of terminal symbols. They are all the symbols that compose the model and that are not part of the language. Each terminal symbol designates a particular element or property that is part of the domain described by the model <ref> [1] </ref>. The meaning of the same terminal symbol may vary from modeler to modeler and from model to model (even the same modeler may attach different meanings for the same terminal symbol in different models). <p> rd and finally: Definition 5 A dynamic model dm and a static model sm that describe the same domain are inconsistent iff it does not exist any scenario sc such that: (dm; sc) 2 D rd ^ sc = (st 1 ; :::; st n ) ^ 8i (i 2 <ref> [1; n] </ref> ) (sm; st i ) 2 S rd ) As an example, the dynamic model of Figure 2 is consistent with the dynamic model of opens after ten seconds is compatible with both models (we used the intuitive meaning for the terminal symbols that appear in both the models).
Reference: [2] <author> S. Easterbrook and B. Nuseibeh, </author> <title> "Managing inconsistencies in an evolving specification," </title> <booktitle> in Proceedings of 2nd International Symposium on Requirements Engineering (RE 95), </booktitle> <address> (York, UK), </address> <pages> pp. 48-55, </pages> <publisher> IEEE CS Press, </publisher> <month> 27-29th March </month> <year> 1995. </year>
Reference-contexts: Such kinds of inconsistencies may cause the corruption of all the data maintained by the PSEE which is in charge of controlling the development process. 7 3.1 Inconsistencies in ViewPoints In <ref> [2, 3, 4, 5] </ref> the authors propose a solution to the problem of detecting inconsistencies that arise during software development among a set of models that describe different views of the same system (i.e., a set of ViewPoints). To identify such inconsistencies they introduce the concept of a consistency rule. <p> As an example, suppose you have the following consistency rule, which applies to models expressed using finite state machines: "If a transition between two states is described in one model, and both states are described in another model, then the transition should also be described in the second model" <ref> [2] </ref>. According to these consistency rule the models in Figure 1 and 3 are inconsistent. On the other hand, intuitively they are not; they are simply at a different level of abstraction.
Reference: [3] <author> S. Easterbrook, A. Finkelstein, J. Kramer, and B. Nuseibeh, </author> <title> "Coordinating distributed viewpoints: The anatomy of a consistency check," </title> <journal> nternational Journal on Concurrent Engineering: Research & Applications, </journal> <volume> vol. 2, no. 3, </volume> <pages> pp. 209-222, </pages> <year> 1994. </year>
Reference-contexts: Such kinds of inconsistencies may cause the corruption of all the data maintained by the PSEE which is in charge of controlling the development process. 7 3.1 Inconsistencies in ViewPoints In <ref> [2, 3, 4, 5] </ref> the authors propose a solution to the problem of detecting inconsistencies that arise during software development among a set of models that describe different views of the same system (i.e., a set of ViewPoints). To identify such inconsistencies they introduce the concept of a consistency rule.
Reference: [4] <author> A. Finkelstein, D. Gabbay, A. Hunter, J. Kramer, and B. Nuseibeh, </author> <title> "Inconsistency handling in multi-perspective specifications," </title> <journal> Transactions on Software Engineering, </journal> <volume> vol. 20, </volume> <pages> pp. 569-578, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: Such kinds of inconsistencies may cause the corruption of all the data maintained by the PSEE which is in charge of controlling the development process. 7 3.1 Inconsistencies in ViewPoints In <ref> [2, 3, 4, 5] </ref> the authors propose a solution to the problem of detecting inconsistencies that arise during software development among a set of models that describe different views of the same system (i.e., a set of ViewPoints). To identify such inconsistencies they introduce the concept of a consistency rule.
Reference: [5] <author> B. Nuseibeh, J. Kramer, and A. Finkelstein, </author> <title> "A framework for expressing the relationships between multiple views in requirements specification," </title> <journal> Transactions on Software Engineering, </journal> <volume> vol. 20, </volume> <pages> pp. 760-773, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Such kinds of inconsistencies may cause the corruption of all the data maintained by the PSEE which is in charge of controlling the development process. 7 3.1 Inconsistencies in ViewPoints In <ref> [2, 3, 4, 5] </ref> the authors propose a solution to the problem of detecting inconsistencies that arise during software development among a set of models that describe different views of the same system (i.e., a set of ViewPoints). To identify such inconsistencies they introduce the concept of a consistency rule.
Reference: [6] <editor> A. Finkelstein, J. Kramer, and B. Nuseibeh, eds., </editor> <booktitle> Advances in Software Process Technology. </booktitle> <publisher> Research Studies Press, J. Wiley, </publisher> <year> 1994. </year>
Reference: [7] <author> G. Cugola, E. Di Nitto, A. Fuggetta, and C. Ghezzi, </author> <title> "A framework for formalizing inconsistencies in human-centered systems," </title> <booktitle> ACM Transaction On Software Engineering and Methodologies (TOSEM), </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: This deviations lead to an inconsistency between the modeled process and the process actually followed. The same happens in workflow systems and, more in general, in all the human centered systems (HCS) <ref> [7] </ref>. These environments are characterized by the fact that a process support system is used to enact a process model in order to support a group of people in carrying out a set of work procedures. In [7] we give a precise formalization of the concepts of inconsistency and completeness in <p> workflow systems and, more in general, in all the human centered systems (HCS) <ref> [7] </ref>. These environments are characterized by the fact that a process support system is used to enact a process model in order to support a group of people in carrying out a set of work procedures. In [7] we give a precise formalization of the concepts of inconsistency and completeness in process environments. In this section we will reformulate such definitions using the framework presented so far. The definition of inconsistency of a process environment given in [7] may be reformulated using the framework presented in this paper <p> In <ref> [7] </ref> we give a precise formalization of the concepts of inconsistency and completeness in process environments. In this section we will reformulate such definitions using the framework presented so far. The definition of inconsistency of a process environment given in [7] may be reformulated using the framework presented in this paper by saying that at a specific time t a HCS is environment-level inconsistent if the static model of the world kept by the process support system at time t is inconsistent with respect to the ideal model of the world <p> Similarly, it is possible to reformulate the definition of completeness for a process environment given in <ref> [7] </ref> by saying that a process environment is transition complete (see [7]) if the process model it enacts is complete with respect to the set of scenarios that describe all the possible evolution of the supported process. <p> Similarly, it is possible to reformulate the definition of completeness for a process environment given in <ref> [7] </ref> by saying that a process environment is transition complete (see [7]) if the process model it enacts is complete with respect to the set of scenarios that describe all the possible evolution of the supported process. In [8] we described SENTINEL, a PSEE that is able to detect inconsistencies between the process model it enacts and the process actually followed. <p> In [8] we described SENTINEL, a PSEE that is able to detect inconsistencies between the process model it enacts and the process actually followed. Inconsistencies are defined as in <ref> [7] </ref> and a logical approach is followed to detect them. In SENTINEL a software development process is described as a collection of taskTypes. Each taskType is modeled as a state machine. State transitions are atomic; they are characterized by a precondition, called ENTRY, and a body.
Reference: [8] <author> G. Cugola, E. Di Nitto, C. Ghezzi, and M. Mantione, </author> <title> "How to deal with deviations during process model enactment," </title> <booktitle> in Proceedings of the 17th International Conference on Software Engineering, </booktitle> <address> (Seattle (Washington - USA)), </address> <month> Apr. </month> <year> 1995. </year> <month> 10 </month>
Reference-contexts: In <ref> [8] </ref> we described SENTINEL, a PSEE that is able to detect inconsistencies between the process model it enacts and the process actually followed. Inconsistencies are defined as in [7] and a logical approach is followed to detect them.
References-found: 8

