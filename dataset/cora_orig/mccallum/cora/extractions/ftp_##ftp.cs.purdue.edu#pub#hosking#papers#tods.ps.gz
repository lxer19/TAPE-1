URL: ftp://ftp.cs.purdue.edu/pub/hosking/papers/tods.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/hosking/papers.html
Root-URL: http://www.cs.purdue.edu
Title: Lightweight write detection and checkpointing for fine-grained persistence  
Author: ANTONY L. HOSKING J. ELIOT B. MOSS 
Address: Amherst  
Affiliation: Purdue University and  University of Massachusetts at  
Abstract: Many systems must dynamically track writes to cached data, for the purpose of reconciling those updates with respect to the permanent or global state of the data. For example, distributed systems employ coherency protocols to ensure a consistent view of shared data. Similarly, database systems log updates both for concurrency control and to ensure the resilience of those updates in the face of system failures. Here, we measure and compare the absolute performance of several alternative mechanisms for the lightweight detection of writes to cached data in a persistent system, and the relative overhead to log those writes to stable storage in the form of a checkpoint. A checkpoint defines a consistent state to which the system will be restored in the event of any subsequent failure. The efficient detection and logging of updates is critical to the performance of persistent systems that embody a fine-grained data model, since per-object overheads are typically very low. Our results reveal a wide range of performance for the alternatives, indicating that the right choice of mechanism is important. They also demonstrate that software write detection mechanisms can significantly outperform approaches that rely solely on the hardware and operating system. Categories and Subject Descriptors: D.3.2 [Programming Languages]: Language ClassificationsObject-oriented languages; D.3.3 [Programming Languages]: Language Constructs and FeaturesDynamic storage management; Input/Output; D.3.4 [Programming Languages]: ProcessorsRun-time environments; D.4.2 [Operating Systems]: Storage ManagementMain memory; secondary storage; storage hierarchies; virtual memory; D.4.8 [Operating Systems]: PerformanceMeasurements; simulation; H.2.2 [Database Management]: Physical DesignRecovery and restart; H.2.3 [Database Management]: LanguagesDatabase (persistent) programming languages 
Abstract-found: 1
Intro-found: 1
Reference: <author> ANDERSON, T. L., BERRE, A. J., MALLISON, M., PORTER, H., AND SCHNEIDER, B. </author> <year> 1989. </year> <title> The Tektronix Hy-perModel benchmark specification. </title> <type> Tech. Rep. 89-05, </type> <institution> Computer Research Laboratory, Tektronix Laboratories. </institution> <month> Aug. </month>
Reference: <author> APPEL, A. W. AND LI, K. </author> <year> 1991. </year> <title> Virtual memory primitives for user programs. </title> <booktitle> In Proceedings of the ACM International Conference on Architectural Support for Programming Languages and Operating Systems (Santa Clara, California, Apr.). ACM SIGPLAN Notices 26, </booktitle> <month> 4 (Apr.), 96107. </month>
Reference: <author> ATKINSON, M., CHISOLM, K., AND COCKSHOTT, P. </author> <year> 1982. </year> <title> PS-Algol: an Algol with a persistent heap. </title> <journal> ACM SIGPLAN Notices 17, </journal> <volume> 7 (July), </volume> <pages> 2431. </pages>
Reference: <author> ATKINSON, M. P., BAILEY, P. J., CHISHOLM, K. J., COCKSHOTT, P. W., AND MORRISON, R. </author> <year> 1983. </year> <title> An approach to persistent programming. </title> <journal> The Computer Journal 26, </journal> <volume> 4 (Nov.), </volume> <pages> 360365. </pages>
Reference: <author> ATKINSON, M. P. AND BUNEMAN, O. P. </author> <year> 1987. </year> <title> Types and persistence in database programming languages. </title> <journal> ACM Comput. Surv. </journal> <volume> 19, </volume> <month> 2 (June), 105190. </month>
Reference: <author> ATKINSON, M. P., CHISHOLM, K. J., COCKSHOTT, W. P., AND MARSHALL, R. M. </author> <year> 1983. </year> <title> Algorithms for a persistent heap. </title> <journal> Software: Practice and Experience 13, </journal> <volume> 7 (Mar.), </volume> <pages> 259271. </pages>
Reference: <author> ATKINSON, M. P. AND MORRISON, R. </author> <year> 1995. </year> <title> Orthogonally persistent object systems. </title> <booktitle> Int. J. Very Large Data Bases 4, </booktitle> <volume> 3, </volume> <pages> 319401. </pages>
Reference: <author> BELL, J. R. </author> <year> 1973. </year> <title> Threaded code. </title> <journal> Commun. </journal> <note> ACM 16, 6 (June), 370372. </note>
Reference: <author> BROWN, A. L., DEARLE, A., MORRISON, R., MUNRO, D. S., AND ROSENBERG, J. </author> <year> 1990. </year> <title> A layered persistent architecture for Napier88. </title> <type> Tech. rep., </type> <institution> University of St Andrews. </institution>
Reference: <author> BROWN, A. L., MAINETTO, G., MATTHES, F., MUELLER, R., AND MCNALLY, D. J. </author> <year> 1991. </year> <title> An open system architecture for a persistent object store. </title> <institution> Research Report CS/91/9, University of St Andrews. </institution>
Reference: <author> CAREY, M. J., DEWITT, D. J., AND NAUGHTON, J. F. </author> <year> 1993. </year> <title> The OO7 benchmark. </title> <booktitle> In Proceedings of the ACM International Conference on Management of Data (Washington, </booktitle> <address> DC, </address> <month> May). </month> <booktitle> ACM SIGMOD Record 22, </booktitle> <month> 2 (June), 1221. </month>
Reference: <author> CATTELL, R. G. G. AND SKEEN, J. </author> <year> 1992. </year> <title> Object operations benchmark. </title> <journal> ACM Trans. Database Syst. </journal> <volume> 17, </volume> <month> 1 (Mar.), 131. </month>
Reference: <author> CHENEY, C. J. </author> <year> 1970. </year> <title> A nonrecursive list compacting algorithm. </title> <journal> Commun. ACM 13, </journal> <volume> 11 (Nov.), </volume> <pages> 677678. </pages>
Reference: <author> CMELIK, B. AND KEPPEL, D. </author> <year> 1994. </year> <title> Shade: A fast instruction-set simulator for execution profiling. </title> <booktitle> In Proceedings of the ACM Conference on the Measurement and Modeling of Computer Systems (May). </booktitle> <pages> 128137. </pages>
Reference: <author> DATE, C. J. </author> <year> 1983. </year> <title> An Introduction to Database Systems. Vol. II. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> DATE, C. J. </author> <year> 1986. </year> <title> An Introduction to Database Systems, </title> <note> Fourth ed. Vol. I. Addison-Wesley. Corrected in 1987. </note>
Reference: <author> ELHARDT, K. AND BAYER, R. </author> <year> 1984. </year> <title> A database cache for high performance and fast restart in database systems. </title> <journal> ACM Trans. Database Syst. </journal> <volume> 9, </volume> <month> 4 (Dec.), 503525. </month>
Reference: <author> FRANKLIN, M. J., CAREY, M. J., AND LIVNY, M. </author> <year> 1997. </year> <title> Transactional client-server cache consistency: Alternatives and performance. </title> <journal> ACM Trans. Database Syst. </journal> <volume> 22, 3 (Sept.), </volume> <pages> 315363. </pages>
Reference: <author> GOLDBERG, A. AND ROBSON, D. </author> <year> 1983. </year> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley. </publisher>
Reference: <author> HOSKING, A. L. </author> <year> 1991. </year> <title> Main memory management for persistence. Position paper presented at the OOPSLA'91 Workshop on Garbage Collection. </title>
Reference: <author> HOSKING, A. L. </author> <year> 1995a. </year> <title> Benchmarking persistent programming languages: Quantifying the language/database interface. Position paper presented at the OOPSLA'95 Workshop on Object Database Behavior, Benchmarks, and Performance. </title> <note> 26 A. </note> <author> L. Hosking and J. E. B. Moss HOSKING, A. L. </author> <year> 1995b. </year> <title> Lightweight support for fine-grained persistence on stock hardware. </title> <type> Ph.D. thesis, </type> <institution> University of Massachusetts at Amherst. </institution> <note> Available as Computer Science Technical Report 95-02. </note>
Reference: <author> HOSKING, A. L. </author> <year> 1997. </year> <title> Residency check elimination for object-oriented persistent languages. </title> <booktitle> In Proceedings of the Seventh International Workshop on Persistent Object Systems (Cape May, </booktitle> <address> New Jersey, </address> <month> May </month> <year> 1996), </year> <editor> R. Connor and S. Nettles, Eds. </editor> <booktitle> Persistent Object Systems: Principles and Practice. </booktitle> <publisher> Morgan Kaufmann, </publisher> <pages> 174 183. </pages>
Reference: <author> HOSKING, A. L., BROWN, E., AND MOSS, J. E. B. </author> <year> 1993. </year> <title> Update logging for persistent programming languages: A comparative performance evaluation. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases (Dublin, </booktitle> <address> Ireland, Aug.). </address> <publisher> Morgan Kaufmann, </publisher> <pages> 429440. </pages>
Reference: <author> HOSKING, A. L. AND MOSS, J. E. B. </author> <year> 1991. </year> <title> Towards compile-time optimisations for persistence. </title> <booktitle> In Proceedings of the Fourth International Workshop on Persistent Object Systems (Martha's Vineyard, </booktitle> <address> Massachusetts, </address> <month> Sept. </month> <year> 1990), </year> <editor> A. Dearle, G. M. Shaw, and S. B. Zdonik, Eds. </editor> <title> Implementing Persistent Object Bases: </title> <booktitle> Principles and Practice. </booktitle> <publisher> Morgan Kaufmann, </publisher> <pages> 1727. </pages>
Reference: <author> HOSKING, A. L. AND MOSS, J. E. B. </author> <year> 1993a. </year> <title> Object fault handling for persistent programming languages: A performance evaluation. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications (Washington, DC, Sept.). ACM SIGPLAN Notices 28, </booktitle> <address> 10 (Oct.), </address> <month> 288303. </month>
Reference: <author> HOSKING, A. L. AND MOSS, J. E. B. </author> <year> 1993b. </year> <title> Protection traps and alternatives for memory management of an object-oriented language. </title> <booktitle> In Proceedings of the ACM Symposium on Operating Systems Principles (Asheville, North Carolina, Dec.). ACM Operating Systems Review 27, </booktitle> <month> 5 (Dec.), 106119. </month>
Reference: <author> HOSKING, A. L., MOSS, J. E. B., AND STEFANOVI C, D. </author> <year> 1992. </year> <title> A comparative performance evaluation of write barrier implementations. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications (Vancouver, Canada, Oct.). ACM SIGPLAN Notices 27, </booktitle> <address> 10 (Oct.), </address> <month> 92109. </month>
Reference: <author> KEMPER, A. AND KOSSMAN, D. </author> <year> 1994. </year> <title> Dual-buffering strategies in object bases. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases (Santiago, </booktitle> <address> Chile, Sept.). </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> LAMB, C., LANDIS, G., ORENSTEIN, J., AND WEINREB, D. </author> <year> 1991. </year> <title> The ObjectStore database system. </title> <journal> Commun. ACM 34, </journal> <volume> 10 (Oct.), </volume> <pages> 5063. </pages>
Reference: <author> MCCALL, K. </author> <year> 1983. </year> <title> The Smalltalk-80 benchmarks. In Smalltalk-80: Bits of History, Words of Advice, </title> <editor> G. Krasner, Ed. </editor> <publisher> Addison-Wesley, </publisher> <address> Chapter 9, </address> <month> 153173. </month>
Reference: <author> MOSS, J. E. B. </author> <year> 1987. </year> <title> Managing stack frames in Smalltalk. </title> <booktitle> In Proceedings of the ACM Symposium on Interpreters and Interpretive Techniques (St. </booktitle> <address> Paul, Minnesota, </address> <month> June). </month> <journal> ACM SIGPLAN Notices 22, </journal> <volume> 7 (July), </volume> <pages> 229240. </pages>
Reference: <author> MOSS, J. E. B. </author> <year> 1990. </year> <title> Design of the Mneme persistent object store. </title> <journal> ACM Transactions on Information Systems 8, </journal> <volume> 2 (Apr.), </volume> <pages> 103139. </pages>
Reference: <author> MOSS, J. E. B. AND HOSKING, A. L. </author> <year> 1995. </year> <title> Expressing object residency optimizations using pointer type annotations. </title> <booktitle> In Proceedings of the Sixth International Workshop on Persistent Object Systems (Tarascon, </booktitle> <address> France, </address> <month> Sept. </month> <year> 1994), </year> <editor> M. Atkinson, D. Maier, and V. Benzaken, Eds. </editor> <booktitle> Workshops in Computing. </booktitle> <publisher> Springer-Verlag, </publisher> <pages> 315. </pages>
Reference: <author> SHAW, R. A. </author> <year> 1987. </year> <title> Improving garbage collector performance in virtual memory. </title> <type> Tech. Rep. </type> <institution> CSL-TR-87-323, Stanford University. </institution> <month> Mar. </month>
Reference: <author> SINGHAL, V., KAKKAD, S. V., AND WILSON, P. R. </author> <year> 1992. </year> <title> Texas, an efficient, portable persistent store. </title> <booktitle> In Proceedings of the Fifth International Workshop on Persistent Object Systems (San Miniato (Pisa), </booktitle> <address> Italy, </address> <month> Sept.), </month> <editor> A. Albano and R. Morrison, Eds. </editor> <booktitle> Workshops in Computing. </booktitle> <publisher> Springer-Verlag, </publisher> <pages> 1133. </pages>
Reference: <author> SOBALVARRO, P. G. </author> <year> 1988. </year> <title> A lifetime-based garbage collector for LISP systems on general-purpose computers. </title>
Reference: <author> B.S. </author> <type> Thesis, </type> <institution> Dept. of EECS, Massachusetts Institute of Technology, </institution> <address> Cambridge. </address>
Reference: <author> THEKKATH, C. A. AND LEVY, H. M. </author> <year> 1994. </year> <title> Hardware and software support for efficient exception handling. </title> <booktitle> In Proceedings of the ACM International Conference on Architectural Support for Programming Languages and Operating Systems (San Jose, California, Oct.). ACM SIGPLAN Notices 29, </booktitle> <volume> 11 (Nov.), </volume> <pages> 110119. </pages>
Reference: <author> UNGAR, D. </author> <year> 1984. </year> <title> Generation scavenging: A non-disruptive high performance storage reclamation algorithm. </title> <booktitle> In Proceedings of the ACM Symposium on Practical Software Development Environments (Pittsburgh, Pennsyl-vania, Apr.). </booktitle> <pages> 157167. </pages>
Reference: <author> UNGAR, D. M. </author> <year> 1987. </year> <title> The Design and Evaluation of a High Performance Smalltalk System. </title> <publisher> ACM Distinguished Dissertations. MIT Press, </publisher> <address> Cambridge, Massachusetts. </address>
Reference: <author> WAHBE, R. </author> <year> 1992. </year> <title> Efficient data breakpoints. </title> <booktitle> In Proceedings of the ACM International Conference on Architectural Support for Programming Languages and Operating Systems (Boston, Massachusetts, Oct.). ACM SIGPLAN Notices 27, </booktitle> <month> 9 (Sept.), </month> <title> 200212. Lightweight write detection and checkpointing 27 WHITE, </title> <editor> S. J. AND DEWITT, D. J. </editor> <year> 1992. </year> <title> A performance study of alternative object faulting and pointer swizzling strategies. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases (Vancouver, </booktitle> <address> Canada, Aug.). </address> <publisher> Morgan Kaufmann, </publisher> <pages> 419431. </pages>
Reference: <author> WHITE, S. J. AND DEWITT, D. J. </author> <year> 1994. </year> <title> QuickStore: A high performance mapped object store. </title> <booktitle> In Proceedings of the ACM International Conference on Management of Data (Minneapolis, </booktitle> <address> Minnesota, </address> <month> May). </month> <booktitle> ACM SIGMOD Record 23, </booktitle> <month> 2 (June), 395406. </month>
Reference: <author> WHITE, S. J. AND DEWITT, D. J. </author> <year> 1995. </year> <title> Implementing crash recovery in QuickStore: A performance study. </title> <booktitle> In Proceedings of the ACM International Conference on Management of Data (San Jose, </booktitle> <address> California, </address> <month> May). </month> <booktitle> ACM SIGMOD Record 24, </booktitle> <month> 2 (June), 187198. </month>
Reference: <author> WILSON, P. R. AND KAKKAD, S. V. </author> <year> 1992. </year> <title> Pointer swizzling at page fault time: Efficiently and compatibly supporting huge address spaces on standard hardware. </title> <booktitle> In Proceedings of the 1992 International Workshop on Object Orientation in Operating Systems (Paris, </booktitle> <address> France, Sept.). </address> <publisher> IEEE Computer Society, </publisher> <pages> 364377. </pages>
Reference: <author> WILSON, P. R. AND MOHER, T. G. </author> <year> 1989a. </year> <title> A card-marking scheme for controlling intergenerational references in generation-based garbage collection on stock hardware. </title> <journal> ACM SIGPLAN Notices 24, </journal> <volume> 5 (May), </volume> <pages> 8792. </pages>
Reference: <author> WILSON, P. R. AND MOHER, T. G. </author> <year> 1989b. </year> <title> Design of the opportunistic garbage collector. </title> <booktitle> In Proceedings of the ACM Conference on Object-Oriented Programming Systems, Languages, and Applications (New Orleans, Louisiana, Oct.). ACM SIGPLAN Notices 24, </booktitle> <address> 10 (Oct.), </address> <month> 2335. </month>
Reference: <author> ZEKAUSKAS, M. J., SAWDON, W. A., AND BERSHAD, B. N. </author> <year> 1994. </year> <title> Software write detection for a distributed shared memory. </title> <booktitle> In Proceedings of the USENIX Symposium on Operating Systems Design and Implementation (Monterey, California, Nov.). ACM Operating Systems Review 28, </booktitle> <pages> 87100. </pages>
References-found: 47

