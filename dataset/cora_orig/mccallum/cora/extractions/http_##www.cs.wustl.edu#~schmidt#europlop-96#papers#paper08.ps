URL: http://www.cs.wustl.edu/~schmidt/europlop-96/papers/paper08.ps
Refering-URL: http://www.cs.wustl.edu/~schmidt/europlop-96/ww1-papers.html
Root-URL: 
Title: A Framework and Patterns for the Support of Reactive Specifications  
Author: Leonor Barroca Pedro R. Henriques 
Address: Milton Keynes Braga U.K. Portugal  
Affiliation: Dep. of Computing Dep. de Informatica The Open University Universidade do Minho  
Abstract: We defend the need of a dual approach for representing reactive systems and reasoning about their timing properties; this dual approach uses a notation for the specification of behaviour (preferably a graphical one), and a temporal logic to express formally, and reason about, this behaviour. The combination of two representation schemes forms the basis of a generic framework that can be instantiated for different choices of notations. Two instantiations of the framework, illustrating its use, are discussed. To describe in detail one of the instantiations (ArchSM method) we use design patterns. 
Abstract-found: 1
Intro-found: 1
Reference: [AB96] <author> J. Armstrong and L. Barroca. </author> <title> Specification and verification of reactive system behaviour: The railroad crossing example. Real-Time Systems, </title> <note> to be published in 1996. 9 </note>
Reference-contexts: As show in section 4 it is in this way that we will be using design patterns to document a framework. 2.3 ArchSM A group of techniques has been proposed, under the name of the Architectural Specification Method (ArchSM), for the formal specification of real-time systems <ref> [AB96, LFS95] </ref> at the logical architecture level. ArchSM is intended to support modelling and reasoning about three important aspects of a reactive system: its timing properties, its behaviour and its structure. <p> framework above defined where: * Diagram notation: Timed StateCharts (TSC) * Logic notation: Real Time Logic (RTL) * Mapping: a set of translation rules TSC 7!RTL * Theorem Prover: HOL (or an alternative such as Isabelle) 4 5 This environment has been applied to the specification of several real-time sys-tems <ref> [AB96, CLF + 95, LFS95, BHV96] </ref>. In a first instance the translation from behaviour diagrams to the behaviour axioms, and the proof of the properties were performed manually. We have been working recently on a tool [BHV96] that accepts a textual representation of TSC (TSCLan-guage) and executes an automatic translation.
Reference: [BHV96] <author> Leonor Barroca, Pedro R. Henriques, and Maria Joao Varanda. </author> <title> Lan--guage and Environments for the Pragmatic Applications of Formal Methods: project reports. </title> <institution> JNICT/BC Project Report UMDITR(9507|9601), Departamento de Informatica da Universidade do Minho, </institution> <month> February </month> <year> 1996. </year>
Reference-contexts: framework above defined where: * Diagram notation: Timed StateCharts (TSC) * Logic notation: Real Time Logic (RTL) * Mapping: a set of translation rules TSC 7!RTL * Theorem Prover: HOL (or an alternative such as Isabelle) 4 5 This environment has been applied to the specification of several real-time sys-tems <ref> [AB96, CLF + 95, LFS95, BHV96] </ref>. In a first instance the translation from behaviour diagrams to the behaviour axioms, and the proof of the properties were performed manually. We have been working recently on a tool [BHV96] that accepts a textual representation of TSC (TSCLan-guage) and executes an automatic translation. <p> In a first instance the translation from behaviour diagrams to the behaviour axioms, and the proof of the properties were performed manually. We have been working recently on a tool <ref> [BHV96] </ref> that accepts a textual representation of TSC (TSCLan-guage) and executes an automatic translation. <p> Known Uses The design pattern here proposed has been used in the development of an environment for the application of ArchSM <ref> [BHV96] </ref>. This design pattern is also used to present ArchSM every time we want to teach it. We have found no problems with it. 5 Conclusion We have been working with a group of techniques under the name of ArchSM for the formal specification of real time systems.
Reference: [CLF + 95] <author> A. Coombes, L.Barroca, J. Fitzgerald, J. McDermid, L. Spencer, and A. Saeed. </author> <title> Formal specification of an aerospace system: The attitude monitor. </title> <editor> In M. Hinchey and J. Bowen, editors, </editor> <title> Applications of Formal Methods. </title> <publisher> Prentice-Hall, </publisher> <year> 1995. </year>
Reference-contexts: framework above defined where: * Diagram notation: Timed StateCharts (TSC) * Logic notation: Real Time Logic (RTL) * Mapping: a set of translation rules TSC 7!RTL * Theorem Prover: HOL (or an alternative such as Isabelle) 4 5 This environment has been applied to the specification of several real-time sys-tems <ref> [AB96, CLF + 95, LFS95, BHV96] </ref>. In a first instance the translation from behaviour diagrams to the behaviour axioms, and the proof of the properties were performed manually. We have been working recently on a tool [BHV96] that accepts a textual representation of TSC (TSCLan-guage) and executes an automatic translation.
Reference: [FMM94] <author> M. Felder, D. Mandrioli, and A. Morzenti. </author> <title> Proving properties of real-time systems through logical specifications and petri net models. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 20(2) </volume> <pages> 127-141, </pages> <year> 1994. </year>
Reference-contexts: A method has been proposed at the Po-litecnico di Milano <ref> [FMM94] </ref> to combine Timed Petri Nets with TRIO. This method is also a dual-language approach for the analysis of real-time systems. Behaviour is expressed using Timed Petri Nets; and the axiomatisation of the behaviour is expressed in TRIO axioms and proof rules.
Reference: [GHJV95] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: They represent a strategy for reuse either in a specific domain or even across a wide set of applications. The framework discussed in this paper captures a specific problem domain expertise| environments for the specification and verification of reactive systems. 2.2 Design Patterns According to <ref> [GHJV95] </ref>, an object-oriented design pattern is a set of interrelated objects, with well-defined interfaces between them, aiming at the characterization of a problem, and its context, and describing a solution for it. <p> Libraries of design patterns have to be built and made available to developers. Three main characteristics should be set when defining a design pattern, namely: * pattern name * problem description * proposed solution Gamma et al <ref> [GHJV95] </ref> also suggest that a clear identification of the consequences of adopting that solution should also be present. We omit this characteristic because our use of a design pattern is slightly different. The concept of design pattern does not restrict the kind of problems to be dealt with. <p> source, target, initial-stateg start-element: system structural-relations: ftransition ! state fi state fi label, label ! trigger fi effect, trigger ! immediate [ delayed, machine ! initial-state fi P state fi P transition, ... g To describe the design pattern we have adapted the template suggested by Gamma et al in <ref> [GHJV95] </ref> |the description is divided into sections as follows. Name Timed StateCharts Intent Given a reactive system, describe its behaviour based on the idea of a set of machines with their own internal state, reacting to events.
Reference: [GMM90] <author> C. Ghezzi, D. Mandrioli, and A. Morzenti. </author> <title> Trio: A logic language for executable specifications of real-time systems. </title> <journal> Journal of Systems and Software, </journal> <volume> 12 </volume> <pages> 107-123, </pages> <year> 1990. </year>
Reference-contexts: It deals with time quantitatively, rather than just relative temporal order. In ArchSM in order to produce rigorous statements and proofs of timing properties, statecharts are interpreted as theories in RTL. 2.4 TRIO TRIO <ref> [GMM90] </ref> is a first order temporal logic augmented with temporal operators to specify properties that change with time. A method has been proposed at the Po-litecnico di Milano [FMM94] to combine Timed Petri Nets with TRIO. This method is also a dual-language approach for the analysis of real-time systems.
Reference: [Har87] <author> D. Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8 </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference-contexts: We chose to represent the timing behaviour of systems with a graphical notation, based on the language of Timed Statecharts. This has the advantage of being accessible to people with a less mathematical background, while being sufficiently expressive and formal. Statecharts <ref> [Har87] </ref> are an extension of state machines and state diagrams for the specification of reactive systems. Timed Statecharts [HMP91] take this further to deal with time constraints. Reasoning about Timed Statecharts The production of rigorous arguments is important for the assessment process.
Reference: [HMP91] <author> T. Henzinger, Z. Manna, and A. Pnueli. </author> <title> Timed transition systems. </title> <booktitle> In Proceedings of the REX Workshop-Real-Time: Theory and Practice, </booktitle> <year> 1991. </year>
Reference-contexts: This has the advantage of being accessible to people with a less mathematical background, while being sufficiently expressive and formal. Statecharts [Har87] are an extension of state machines and state diagrams for the specification of reactive systems. Timed Statecharts <ref> [HMP91] </ref> take this further to deal with time constraints. Reasoning about Timed Statecharts The production of rigorous arguments is important for the assessment process.
Reference: [JMS88] <author> F. Jahanian, A. K. Mok, and D. Stuart. </author> <title> Formal specification of real-time systems. </title> <institution> Tr-88-25, Dept. of Computer Sciences, The University of Texas at Austin, Austin, Texas 78712, </institution> <year> 1988. </year>
Reference-contexts: Reasoning about Timed Statecharts The production of rigorous arguments is important for the assessment process. In ArchSM Real Time Logic (RTL) is used to construct such arguments about timing properties of systems whose timing behaviour is expressed using the Timed Statechart notation. Real Time Logic <ref> [JMS88] </ref> is a formal language for capturing the time constraints of real-time systems. It deals with time quantitatively, rather than just relative temporal order.
Reference: [Joh92] <author> R. Johnson. </author> <title> Documenting frameworks using patterns. </title> <booktitle> In Proceedings of OOPSLA'92, </booktitle> <year> 1992. </year>
Reference-contexts: In this paper we define the generic framework and two of its possible instantiations to illustrate its use. One of the instantiations of the framework is described in detail using design patterns. As suggested by Jonhson <ref> [Joh92] </ref> the use of a pattern to give the details of the design has shown to be a good way of documenting the framework.
Reference: [LFS95] <author> L.Barroca, J. Fitzgerald, and L. Spencer. </author> <title> The architectural specification of an avionic subsystem. </title> <booktitle> In Proceedings of the Workshop on Industrial-Strength Formal Specification Techniques, </booktitle> <address> Boca Raton, Florida, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: As show in section 4 it is in this way that we will be using design patterns to document a framework. 2.3 ArchSM A group of techniques has been proposed, under the name of the Architectural Specification Method (ArchSM), for the formal specification of real-time systems <ref> [AB96, LFS95] </ref> at the logical architecture level. ArchSM is intended to support modelling and reasoning about three important aspects of a reactive system: its timing properties, its behaviour and its structure. <p> framework above defined where: * Diagram notation: Timed StateCharts (TSC) * Logic notation: Real Time Logic (RTL) * Mapping: a set of translation rules TSC 7!RTL * Theorem Prover: HOL (or an alternative such as Isabelle) 4 5 This environment has been applied to the specification of several real-time sys-tems <ref> [AB96, CLF + 95, LFS95, BHV96] </ref>. In a first instance the translation from behaviour diagrams to the behaviour axioms, and the proof of the properties were performed manually. We have been working recently on a tool [BHV96] that accepts a textual representation of TSC (TSCLan-guage) and executes an automatic translation.
Reference: [WB88] <author> R. Wirfs-Brock. </author> <title> Object-oriented frameworks. </title> <journal> American Programmer, </journal> <volume> 4(10), </volume> <year> 1988. </year>
Reference-contexts: These will be used to build environments for the specification of reactive systems. We also give a short description of two specification approaches that we will use as example of possible instantiations of the proposed framework: the Architectural Specification Method (ArchSM), and TRIO. 2.1 Frameworks An object-oriented framework <ref> [WB88] </ref> is a set of classes that are integrated and interact in a well defined way to provide a set of services. The use of object-oriented technology brings in a set of facilities.
References-found: 12

