URL: http://www.cs.helsinki.fi/~tirri/nwf.ps
Refering-URL: http://www.cs.helsinki.fi/~tirri/publications.html
Root-URL: 
Email: e-mail: fpuustjar, tirrig@cs.helsinki.fi  e-mail: Jari.Veijalainen@vtt.fi  
Phone: 2  
Title: Managing Overlapping Transactional Workflows  
Author: Juha Puustjarvi Henry Tirri and Jari Veijalainen P. O. Box (Teollisuuskatu ) 
Note: Event/Condition/Action (ECA) rules is discussed.  
Address: Finland  P.O. Box 1203 Finland  
Affiliation: 1 Department of Computer Science  UNIVERSITY OF HELSINKI  VTT Information Technology Multimedia Systems  
Pubnum: FIN-00014  
Abstract: Workflow management techniques have become an intensive area of research in information systems. In large scale workflow systems modularity and reusability of existing task structures with context dependent (parametrized) task execution are essential components of a successful application. In this paper we study the issues related to management of overlapping transactional workflows, i.e., workflows that share component tasks and thus avoid redundancy in design. The notion of parametrized transactional properties of workflow tasks is introduced and analyzed, and the underlying implementation mechanism based on 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> M. Attie, M. Singh, A. Sheth, and M. Rusinkiewicz. </author> <title> Specifying and enforcing in-tertask dependencies. </title> <booktitle> In The 19th International Conference on VLDB, </booktitle> <year> 1993. </year>
Reference-contexts: Such constraints can be specified e.g., by triggers [7, 6] of which the ECA rules are a special case, by Petri nets [16] or by finite state automaton <ref> [1] </ref>. In the following, we will make no assumptions of the method the execution structure is specified with. For a detailed discussion on inter-task dependency enforcement in workflow context see [27].
Reference: 2. <author> P. Bernstein, V. Hadzilacos, and N. Goodman. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference-contexts: The problem is naturally related to traditional transaction concurrency control <ref> [2] </ref>. A trivial approach to this problem (as well as to all concurrency control problems) would be to treat each workflow as a single monolithic transaction and require the execution of workflows to be seri-alizable. <p> Second, there must be a moment during the execution of T 0 when both T 1 and T 2 have an exclusive access to all the data objects they need. Such a moment corresponds to the traditional serialization point <ref> [2] </ref> and thus guar antees serializable behavior. Third, either both T 1 and T 2 commit or neither of them will. <p> If several tasks T 1 ; T 2 ; :::T n are executed in serialization mode then the commit protocol (e.g., the 2PC-protocol <ref> [2] </ref>) implies that this set of tasks can be combined into one transaction. Executing the transactions T 1 ; T 2 ; :::T n in the prepare mode ensures only the atomicity of the combined task.
Reference: 3. <author> A. Biliris, S. Dar, N. Gehani, H. Jagadish, and K. Ramamritham. </author> <title> Asset: A system for supporting extended transactions. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 23(2), </volume> <month> June </month> <year> 1994. </year>
Reference-contexts: Cooperative transaction models have been discussed in [18, 19, 26, 24, 15, 23] in the centralized case, and in order to better match the requirements of various modern database applications, more general transaction frameworks are developed in [9, 22, 33]. The ASSET system <ref> [3] </ref> provides transaction primitives for the specification of extended and cooperative transaction models.
Reference: 4. <author> Y. Breitbart, A. Deacon, H.-J. Schek, A. Sheth, and G. Weikum. </author> <title> Merging application-centric and data-centric approaches to support transaction-oriented multi-system workflows. </title> <booktitle> Sigmod Record, </booktitle> <volume> 22(3), </volume> <month> September </month> <year> 1993. </year>
Reference-contexts: The ASSET system [3] provides transaction primitives for the specification of extended and cooperative transaction models. Some of the recent work also makes direct connections between workflow management systems and advanced transaction processing: workflows are treated as extended transactions in DOM systems <ref> [4, 13] </ref>, and the Contract model [31, 32] provides task reusability and application specific concurrency control. In this paper we will study the design of workflow management systems that support modular, overlapping workflows.
Reference: 5. <author> C. Bussler and S. Jablonski. </author> <title> Implementing agent coordination for workflow management systems using active database systems. </title> <editor> In S. Chakravarthy and S. Urban, editors, </editor> <booktitle> IEEE Proceedings Research Interests in Data Engineering: Active Database Systems (RIDE'94), </booktitle> <year> 1994. </year>
Reference-contexts: As far as we are aware of, this notion of parametrized transactional properties to increase reusability of tasks has not been addressed before. The mechanisms to implement such properties are based on Event/Condition/Action rules (ECA rules) <ref> [5] </ref> which are defined on the global workflow schema (i.e., task parameters). The ECA rules are used to specify which synchroniztion operations are needed. Such rules are given as part of the workflow specification, and used by the global level workflow manager module during the execution phase. <p> An additional benefit in using ECA rules is that they conform nicely to the work done in active database area, and can reuse (at least part of) the implementation mechanisms available <ref> [5] </ref>.
Reference: 6. <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> A transaction model for long-running activities. </title> <booktitle> In The 17th International Conference on VLDB, </booktitle> <year> 1991. </year>
Reference-contexts: Such constraints can be specified e.g., by triggers <ref> [7, 6] </ref> of which the ECA rules are a special case, by Petri nets [16] or by finite state automaton [1]. In the following, we will make no assumptions of the method the execution structure is specified with.
Reference: 7. <author> U. Dayl, M. Hsu, and R. Ladin. </author> <title> Organizing long-running activities with triggers and transactions. </title> <booktitle> In ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1990. </year>
Reference-contexts: Such constraints can be specified e.g., by triggers <ref> [7, 6] </ref> of which the ECA rules are a special case, by Petri nets [16] or by finite state automaton [1]. In the following, we will make no assumptions of the method the execution structure is specified with.
Reference: 8. <author> R. de By, A. Lehtola, O. Pihlajamaa, J. Veijalainen, and J. Wasch. </author> <title> A reference architecture for cooperative transaction processing systems. </title> <type> Technical Report 1694, </type> <institution> Technical Research Centre of Finland, </institution> <year> 1995. </year>
Reference-contexts: We will return to these execution mode issues in Section 5.2. 2.2 Architectural considerations Our architectural views for the workflow environment are influenced by the general reference architecture under development in the TransCoop project <ref> [8] </ref>. The TransCoop architecture is intended to provide a platform for transaction management support for cooperative applications in general. The architecture consists of both a specification environment (TSE) and a run-time environment (TRE) which use the services of an object server (TOS). <p> Here we focus on the global level workflows only, and discuss briefly those architectural issues that are related to the topic of the paper, specification and execution of concurrent overlapping workflows. For more detailed discussion on architectural questions see <ref> [8] </ref>. A workflow designer specifies system supported workflows as well as the consistency constraints of the system. The Workflow Specification Environment (WSE) analyzes the specifications to determine whether such a workflow can be implemented. For example, if the specification includes a reusable task but such Fig. 2.
Reference: 9. <author> A. Elmagarmid, Y. Leu, W. Litwin, and M. Rusinkiewicz. </author> <title> A multibase transaction model for interbase. </title> <booktitle> In The 16th International International Conference on VLDB, </booktitle> <year> 1990. </year>
Reference-contexts: Cooperative transaction models have been discussed in [18, 19, 26, 24, 15, 23] in the centralized case, and in order to better match the requirements of various modern database applications, more general transaction frameworks are developed in <ref> [9, 22, 33] </ref>. The ASSET system [3] provides transaction primitives for the specification of extended and cooperative transaction models.
Reference: 10. <author> K.P. Eswaran, J.N. Gray, </author> <title> P.A. Lorie, and I.L. Traiger. The notions of consistency and predicate locks in a database system. </title> <journal> Communications of the ACM, </journal> <month> 19(11), November </month> <year> 1976. </year>
Reference-contexts: In this respect our ECA rule mechanism is similar to, but more general than predicate locking <ref> [10] </ref> or escrow locking [25]. Unlike these locking methods our ECA rules are based on a predefined set of markers. In principle, the more marker types we have, the more application semantics we can utilize in our workflow concurrency control.
Reference: 11. <author> H. Garcia-Molina, D. Gawlick, J. Klein, K. Kleissner, and K. Salem. </author> <title> Modeling long-running activities as nested sagas. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 14(1), </volume> <month> March </month> <year> 1991. </year>
Reference-contexts: This example suggests that analogously to the different isolation modes discussed in the context of basic task integration, a variation task may also require different modes for atomicity. This situation is analogous with nested transactions <ref> [22, 11, 12] </ref> where typically subtransactions have to satisfy ACID properties when executed alone, but the nested transaction does not necessary have to be fully isolated.
Reference: 12. <author> H. Garcia-Molina and K. Salem. Sagas. </author> <booktitle> In ACM SIGMOD International Conference on Management of Data, </booktitle> <year> 1987. </year>
Reference-contexts: Such a lock would then hold for many days preventing client's data to be updated, which clearly is not an acceptable alternative. In the other extreme are the s-transaction model [30] and the Sagas <ref> [12] </ref>, where the local subtransactions (including the compensation transactions) are run in a serializable manner together with other subtransac-tions and local transactions, without global level restrictions on the order of the subtransactions (for more discussion on the topic see [29]). <p> This example suggests that analogously to the different isolation modes discussed in the context of basic task integration, a variation task may also require different modes for atomicity. This situation is analogous with nested transactions <ref> [22, 11, 12] </ref> where typically subtransactions have to satisfy ACID properties when executed alone, but the nested transaction does not necessary have to be fully isolated.
Reference: 13. <author> D. Georgakopoulos and M. Hornick. </author> <title> A framework for enforceable specification of extended transaction models and transactional workflows. </title> <journal> Journal of Intelligent and Cooperative Information Systems, </journal> <month> September </month> <year> 1994. </year>
Reference-contexts: The ASSET system [3] provides transaction primitives for the specification of extended and cooperative transaction models. Some of the recent work also makes direct connections between workflow management systems and advanced transaction processing: workflows are treated as extended transactions in DOM systems <ref> [4, 13] </ref>, and the Contract model [31, 32] provides task reusability and application specific concurrency control. In this paper we will study the design of workflow management systems that support modular, overlapping workflows.
Reference: 14. <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: We will address the reuse issues by introducing the concepts of task integration and task execution modes, implemented by the ECA rule mechanism. 5.1 Task integration ECA rule based mechanisms are very suitable for providing less restrictive properties than the traditional ACID-properties. For example, the traditionally used consistency degrees <ref> [14] </ref> from degree 0 to degree 3 provide various atomicity and isolation levels, and for each of the levels there is a corresponding ECA rule 3 . Such rules differ in their execution policies described in their action parts. <p> A task is in a serialization mode if it is in a prepared mode <ref> [14] </ref> and it has not released access to any data object it requires. If several tasks T 1 ; T 2 ; :::T n are executed in serialization mode then the commit protocol (e.g., the 2PC-protocol [2]) implies that this set of tasks can be combined into one transaction.
Reference: 15. <author> W. Harrison, H. Ossher, and P. Sweeney. </author> <title> Coordinating concurrent development. </title> <booktitle> In Proceedings of the Conference on Computer-Supported Cooperative Work, </booktitle> <year> 1990. </year>
Reference-contexts: Consequently management of overlapping workflows, i.e., workflows that share one or more tasks, is an important topic to be addressed in transactional workflows. Workflow management research is clearly related to the work done in developing advanced transaction models, especially for cooperative environments. Cooperative transaction models have been discussed in <ref> [18, 19, 26, 24, 15, 23] </ref> in the centralized case, and in order to better match the requirements of various modern database applications, more general transaction frameworks are developed in [9, 22, 33]. The ASSET system [3] provides transaction primitives for the specification of extended and cooperative transaction models.
Reference: 16. <author> K. Jensen. </author> <title> Colored Petri Nets. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Such constraints can be specified e.g., by triggers [7, 6] of which the ECA rules are a special case, by Petri nets <ref> [16] </ref> or by finite state automaton [1]. In the following, we will make no assumptions of the method the execution structure is specified with. For a detailed discussion on inter-task dependency enforcement in workflow context see [27].
Reference: 17. <author> S. Joosten. </author> <title> Trigger modeling for workflow analysis. In Proceedings of CON'94: Workflow Management, Challenges, Paradigms and Products, </title> <year> 1994. </year>
Reference-contexts: We use ECA rules <ref> [17] </ref> and markers as mechanisms to control the interference caused by several tasks (from different workflows) executing concurrently.
Reference: 18. <author> G. Kaiser. </author> <title> Flexible transaction model for software engineering. </title> <booktitle> In Proceedings of Sixth International Conference on Data Engineering, </booktitle> <year> 1990. </year>
Reference-contexts: Consequently management of overlapping workflows, i.e., workflows that share one or more tasks, is an important topic to be addressed in transactional workflows. Workflow management research is clearly related to the work done in developing advanced transaction models, especially for cooperative environments. Cooperative transaction models have been discussed in <ref> [18, 19, 26, 24, 15, 23] </ref> in the centralized case, and in order to better match the requirements of various modern database applications, more general transaction frameworks are developed in [9, 22, 33]. The ASSET system [3] provides transaction primitives for the specification of extended and cooperative transaction models.
Reference: 19. <author> G. Kaiser and C. Pu. </author> <title> Dynamic restructuring of transactions. In A.K. </title> <editor> Elmagarmid, editor, </editor> <title> Database Transaction Models for Advanced Applications, chapter 8. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1992. </year>
Reference-contexts: Consequently management of overlapping workflows, i.e., workflows that share one or more tasks, is an important topic to be addressed in transactional workflows. Workflow management research is clearly related to the work done in developing advanced transaction models, especially for cooperative environments. Cooperative transaction models have been discussed in <ref> [18, 19, 26, 24, 15, 23] </ref> in the centralized case, and in order to better match the requirements of various modern database applications, more general transaction frameworks are developed in [9, 22, 33]. The ASSET system [3] provides transaction primitives for the specification of extended and cooperative transaction models.
Reference: 20. <author> N.A. Lynch. </author> <title> Multilevel atomicity anew correctness criteria for database concur-rency control. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(4), </volume> <month> December </month> <year> 1983. </year>
Reference-contexts: In addition, by task integration we can bind together tasks executed at the same site to comprise appropriate units of atomicity or isolation. In this way we incorporate workflow notions similar to multilevel atomicity <ref> [20] </ref>, and increase task reusability and workflow system throughput. As far as we are aware of, this notion of parametrized transactional properties to increase reusability of tasks has not been addressed before. <p> Such rules differ in their execution policies described in their action parts. In particular the "degree 3 consistency" provides traditional serializable and recoverable executions, while other levels weaken these criteria. It should be noted, that theoretically task integration with ECA rules is akin to multilevel atomicity <ref> [20] </ref>, which weakens the usual notion of serializability by permitting controlled interleaving among transactions.
Reference: 21. <author> C. Mohan, G. Alonso, R. Gunthor, and M. Kamath. Exotica: </author> <title> A research perspective on workflow management systems. </title> <journal> Bulletin of the IEEE Technical Committee on Data Engineering, </journal> <volume> 18(1), </volume> <month> March </month> <year> 1995. </year>
Reference-contexts: It is within this framework of efficient business process re-engineering that our research is inscribed. Mohan et el <ref> [21] </ref> listed several key aspects in large scale workflow management design: failure handling, availability, navigational flexibility, replication and distributed coordination. Such aspects are clearly in the realm of transactional workflows where the application execution has to conform to a set of correctness constraints derived from the application domain.
Reference: 22. <author> J.E.B. Moss. </author> <title> Nested Transactions: An Approach to Reliable Distributed Computing. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <year> 1985. </year>
Reference-contexts: Cooperative transaction models have been discussed in [18, 19, 26, 24, 15, 23] in the centralized case, and in order to better match the requirements of various modern database applications, more general transaction frameworks are developed in <ref> [9, 22, 33] </ref>. The ASSET system [3] provides transaction primitives for the specification of extended and cooperative transaction models. <p> This example suggests that analogously to the different isolation modes discussed in the context of basic task integration, a variation task may also require different modes for atomicity. This situation is analogous with nested transactions <ref> [22, 11, 12] </ref> where typically subtransactions have to satisfy ACID properties when executed alone, but the nested transaction does not necessary have to be fully isolated.
Reference: 23. <author> K. Narayanaswamy and K. Goldman. </author> <title> "Lazy" consistency: A basis for cooperative software development. </title> <booktitle> In Proceedings of the Conference on Computer-Supported Cooperative Work, </booktitle> <year> 1992. </year>
Reference-contexts: Consequently management of overlapping workflows, i.e., workflows that share one or more tasks, is an important topic to be addressed in transactional workflows. Workflow management research is clearly related to the work done in developing advanced transaction models, especially for cooperative environments. Cooperative transaction models have been discussed in <ref> [18, 19, 26, 24, 15, 23] </ref> in the centralized case, and in order to better match the requirements of various modern database applications, more general transaction frameworks are developed in [9, 22, 33]. The ASSET system [3] provides transaction primitives for the specification of extended and cooperative transaction models.
Reference: 24. <author> M. Nodine, S. Ramaswamy, and S. Zdonik. </author> <title> A cooperative transaction model for design databases. In A.K. </title> <editor> Elmagarmid, editor, </editor> <title> Database Transaction Models for Advanced Applications, chapter 3. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1992. </year>
Reference-contexts: Consequently management of overlapping workflows, i.e., workflows that share one or more tasks, is an important topic to be addressed in transactional workflows. Workflow management research is clearly related to the work done in developing advanced transaction models, especially for cooperative environments. Cooperative transaction models have been discussed in <ref> [18, 19, 26, 24, 15, 23] </ref> in the centralized case, and in order to better match the requirements of various modern database applications, more general transaction frameworks are developed in [9, 22, 33]. The ASSET system [3] provides transaction primitives for the specification of extended and cooperative transaction models.
Reference: 25. <author> P.E. O'neil. </author> <title> The escrow transactional method. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 11(4), </volume> <month> December </month> <year> 1986. </year>
Reference-contexts: In this respect our ECA rule mechanism is similar to, but more general than predicate locking [10] or escrow locking <ref> [25] </ref>. Unlike these locking methods our ECA rules are based on a predefined set of markers. In principle, the more marker types we have, the more application semantics we can utilize in our workflow concurrency control.
Reference: 26. <author> C. Pu and N. Hutchinson. </author> <title> Split transactions for open ended activities. </title> <booktitle> In The 14th International Conference on VLDB, </booktitle> <year> 1988. </year>
Reference-contexts: Consequently management of overlapping workflows, i.e., workflows that share one or more tasks, is an important topic to be addressed in transactional workflows. Workflow management research is clearly related to the work done in developing advanced transaction models, especially for cooperative environments. Cooperative transaction models have been discussed in <ref> [18, 19, 26, 24, 15, 23] </ref> in the centralized case, and in order to better match the requirements of various modern database applications, more general transaction frameworks are developed in [9, 22, 33]. The ASSET system [3] provides transaction primitives for the specification of extended and cooperative transaction models.
Reference: 27. <author> J. Tang and J. Veijalainen. </author> <title> Enforcing inter-task dependencies in transactional workflows. </title> <booktitle> In Proceedings of the the Third International Conference on Cooperative Information Systems (CoopIS-95), </booktitle> <year> 1995. </year>
Reference-contexts: In the following, we will make no assumptions of the method the execution structure is specified with. For a detailed discussion on inter-task dependency enforcement in workflow context see <ref> [27] </ref>. In our terminology a task defines some unit of work to be done, which can also be shared by several different workflows. A task may be specified in a number of ways. However, we model only the aspects which are relevant from task's reusability point of view.
Reference: 28. <author> T. Tesch and P. Verkoulen. </author> <note> Transcoop deliverable ii.2. Technical Report TC/REP/GMD/D2-2/207, ESPRIT Basic Research Action 8012, </note> <year> 1995. </year>
Reference-contexts: Fig. 7. Execution precedence graph for the workflow Bill request processing. The simplified example above was chosen only for illustrative purposes. In our analysis of real workflow processes, one example being Telecom Finland <ref> [28] </ref>, we have encountered numerous examples of overlapping workflows. From these studies it is evident that there are tasks which can be used as part of different workflows.
Reference: 29. <author> J. Veijalainen. </author> <title> Heterogeneous multilevel transaction management with multiple subtransactions. </title> <booktitle> In Proceedings of the DEXA'93, </booktitle> <year> 1993. </year>
Reference-contexts: the other extreme are the s-transaction model [30] and the Sagas [12], where the local subtransactions (including the compensation transactions) are run in a serializable manner together with other subtransac-tions and local transactions, without global level restrictions on the order of the subtransactions (for more discussion on the topic see <ref> [29] </ref>). We use ECA rules [17] and markers as mechanisms to control the interference caused by several tasks (from different workflows) executing concurrently.
Reference: 30. <author> J. Veijalainen, F. Eliassen, and B. Holtkamp. </author> <title> The s-transaction model. In A.K. </title> <editor> Elmagarmid, editor, </editor> <title> Database Transaction Models for Advanced Applications, chapter 12. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1992. </year>
Reference-contexts: Such a lock would then hold for many days preventing client's data to be updated, which clearly is not an acceptable alternative. In the other extreme are the s-transaction model <ref> [30] </ref> and the Sagas [12], where the local subtransactions (including the compensation transactions) are run in a serializable manner together with other subtransac-tions and local transactions, without global level restrictions on the order of the subtransactions (for more discussion on the topic see [29]).
Reference: 31. <author> W. Wachter. </author> <title> Contracts: A means for improving reliability in distributed computing. </title> <booktitle> In IEEE COMPCON, </booktitle> <year> 1991. </year>
Reference-contexts: The ASSET system [3] provides transaction primitives for the specification of extended and cooperative transaction models. Some of the recent work also makes direct connections between workflow management systems and advanced transaction processing: workflows are treated as extended transactions in DOM systems [4, 13], and the Contract model <ref> [31, 32] </ref> provides task reusability and application specific concurrency control. In this paper we will study the design of workflow management systems that support modular, overlapping workflows.
Reference: 32. <author> H. Wahter and A. Reuter. </author> <title> The contract model. In A.K. </title> <editor> Elmagarmid, editor, </editor> <title> Database Transaction Models for Advanced Applications, chapter 7. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1992. </year>
Reference-contexts: The ASSET system [3] provides transaction primitives for the specification of extended and cooperative transaction models. Some of the recent work also makes direct connections between workflow management systems and advanced transaction processing: workflows are treated as extended transactions in DOM systems [4, 13], and the Contract model <ref> [31, 32] </ref> provides task reusability and application specific concurrency control. In this paper we will study the design of workflow management systems that support modular, overlapping workflows.
Reference: 33. <author> G. Weikum and H. Schek. </author> <title> Concepts and applications of multilevel transactions and open nested transactions. In A.K. </title> <editor> Elmagarmid, editor, </editor> <title> Database Transaction Models for Advanced Applications, chapter 13. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1992. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: Cooperative transaction models have been discussed in [18, 19, 26, 24, 15, 23] in the centralized case, and in order to better match the requirements of various modern database applications, more general transaction frameworks are developed in <ref> [9, 22, 33] </ref>. The ASSET system [3] provides transaction primitives for the specification of extended and cooperative transaction models.
References-found: 33

