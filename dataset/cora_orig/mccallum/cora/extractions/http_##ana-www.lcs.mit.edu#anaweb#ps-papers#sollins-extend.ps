URL: http://ana-www.lcs.mit.edu/anaweb/ps-papers/sollins-extend.ps
Refering-URL: http://ana-www.lcs.mit.edu/anaweb/ps-papers/
Root-URL: 
Email: sollins@lcs.mit.edu  
Title: Extending the Network Abstraction to an Information Infrastructure: The Information Mesh  
Author: Karen R. Sollins 
Keyword: Information infrastructure architecture, network abstraction.  
Date: February 2, 1996  
Address: 545 Technology Square Cambridge, MA 02139  
Affiliation: MIT Laboratory for Computer Science  
Abstract: This paper is focussed on two central ideas. The first is that it is valuable and important to extend our model of the network to a higher level of abstraction and generality than has been provided heretofore. The second idea is that the level of abstraction to which the network should be extended should provide an extremely simple yet powerful network-based object model. The goals of such an infrastructure should be not only those commonly used such as ubiquity and support of some model of application heterogeneity, but longevity, mobility, evolvability, and resiliency to failures and unpredictable behavior. We describe the Information Mesh, such an information infrastructure architecture and address the issues in realizing it. This work is put into the context of ongoing research and development in the field. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R.J. Anderson, </author> <title> UEPS A Second Generation Electronic Wallet, </title> <booktitle> Proc. Second Euro-pean Symposium on Research in Computer Security, </booktitle> <address> Toulouse, France, </address> <year> 1992, </year> <pages> 411-418. </pages>
Reference: [2] <editor> F. Anklesaria, et al., </editor> <title> The Internet Gopher Protocol (a distributed document search and retrieval protocol), Network Working Group RFC 1436, </title> <booktitle> Informational, </booktitle> <month> March, </month> <year> 1993. </year>
Reference-contexts: We see several examples of infrastructure models such as the World Wide Web [3] and Prospero [28, 29] taking advantage of a suite of transport protocols. In both of these cases, the protocols supported by the models are higher level protocols, such as HTTP [6], FTP [35], and Gopher <ref> [2] </ref>, as well as several other file access protocols (AFS and NFS). A set such as this will only grow, and therefore selecting only one or configuring into a system even a particular set would severely hamper the utility of an information infrastructure. <p> The demonstration core provides a naming service, hint and supporting hint servers, location translation, and a role library. Demonstrations have included importing all of the Gnu Info Tree [11] into our environment, and making the Gopher <ref> [2] </ref> universe accessible through a gateway. In addition, the role library as a set of browsable objects is also accessible. A web server has made these accessible through unmodified web browsers.
Reference: [3] <author> T. Berners-Lee et al., </author> <title> The world wide web, </title> <journal> Communications of the ACM, </journal> <volume> 37(8) </volume> <pages> 76-82, </pages> <month> August, </month> <year> 1994. </year>
Reference-contexts: The third concern here is what to use for transport. We see several examples of infrastructure models such as the World Wide Web <ref> [3] </ref> and Prospero [28, 29] taking advantage of a suite of transport protocols. In both of these cases, the protocols supported by the models are higher level protocols, such as HTTP [6], FTP [35], and Gopher [2], as well as several other file access protocols (AFS and NFS). <p> In addition, the thinking in this project has been strongly influenced by both individual large information systems, as well as participation in the Internet Engineering Task Force (IETF)[40, 19, 4, 23] working groups on information infrastructure, as well as the large hypertext systems of the World Wide Web <ref> [3] </ref> and Project Xanadu [27]. There are clear distinctions between these works and the Information Mesh, for example, in terms of separating location from identification. In addition, the WWW is focussed very much on the present in terms of other mechanisms and does not provide anything akin to roles.
Reference: [4] <author> T. Berners-Lee, </author> <title> Uniform Resource Locators: A Syntax for the Expression of Access Information of Objects on the Network, Network Working Group RFC 1738, </title> <month> December, </month> <year> 1994. </year>
Reference: [5] <author> T. Berners-Lee and D. Connelly, </author> <title> Hypertext Markup Language - 2.0, </title> <address> MIT/W3C, </address> <month> Sept. </month> <year> 1995. </year> <note> Also, </note> <institution> Network Working Group RFC 1866, </institution> <month> November, </month> <year> 1995. </year>
Reference-contexts: SMTP provides for the various activities related to delivering mail messages, on behalf of a local mail services. SMTP delivers mail to particular mailboxes, so it will verify that the destination mailbox is known or forwarding can be handled by the recipient. HTTP exchanges HTML <ref> [5, 36] </ref> documents. In this case, it will be invoked by a "web client" and transmits its messages encoded in MIME [9, 26] types. In each of these cases, it is important that the protocols be considered, as they are, part of the protocol suite. <p> The linking model was influenced by a number of works. In particular, part of that effort was to accommodate the features as many different models of linking as possible. Of particular concern were the models of the Web <ref> [5, 36] </ref>, Xanadu [27], the Dexter model [12], and Aquanet [22], as representative of various models of linking. None of these provides the full flexibility and generality provided by the Information Mesh, but it in turn does support all of them.
Reference: [6] <author> T. Berners-Lee, R. Fielding, H. Frystyk, </author> <title> Hypertext Transport Protocol - HTTP/1.0. MITW3C, </title> <address> Oct. </address> <year> 1995. </year>
Reference-contexts: These provide bit-streams with various characteristics. Above that there are a variety of more application specific transport and communication protocols such as FTP [35], Telnet [34], SMTP [33], 1 2 Submitted to SIGCOMM '96: Do not distribute and HTTP <ref> [6] </ref>. Each of these protocols can be described as providing enhanced abstractions for communication and exchange. FTP supports files, allowing for both learning about them and more importantly exchanging or copying them. <p> We see several examples of infrastructure models such as the World Wide Web [3] and Prospero [28, 29] taking advantage of a suite of transport protocols. In both of these cases, the protocols supported by the models are higher level protocols, such as HTTP <ref> [6] </ref>, FTP [35], and Gopher [2], as well as several other file access protocols (AFS and NFS). A set such as this will only grow, and therefore selecting only one or configuring into a system even a particular set would severely hamper the utility of an information infrastructure.
Reference: [7] <author> K.P. Birman, A. Schiper, and P. </author> <title> Stephenson Light-weight causal and atomic group multicast, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9, </volume> <month> 3 (August, </month> <year> 1991), </year> <pages> pp 272-314. </pages>
Reference-contexts: The question of how programs communicate with each other is traditionally a significant part of any distributed system. SunRPC [43] and DCE [15] support various forms of Remote Procedure Call (RPC). ISIS <ref> [7] </ref> provides causal invocation and group communications (a form of multicast) as does PSynch [32]. Message passing is more common in strict object oriented systems, such as ANSA [44, 45, 37] or CLOS [18]. <p> See [41, 46] for the full detail of these relationships. Finally, the negative influence of recognizing the need for a variety of communications paradigms such as that of Mercury [21], ISIS <ref> [7] </ref> and Psynch [32], the ANSA communications paradigm [37] and traditional RPC [8] caused us to reject the idea of a single, pervasive communications paradigm.
Reference: [8] <author> A.D. Birrell and B. Nelson, </author> <title> Implementing Remote Procedure Calls, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2, 1, </volume> <month> (February </month> <year> 1984), </year> <pages> pp. 39-59. </pages>
Reference-contexts: See [41, 46] for the full detail of these relationships. Finally, the negative influence of recognizing the need for a variety of communications paradigms such as that of Mercury [21], ISIS [7] and Psynch [32], the ANSA communications paradigm [37] and traditional RPC <ref> [8] </ref> caused us to reject the idea of a single, pervasive communications paradigm.
Reference: [9] <author> N. Borenstein and N. Freed, </author> <title> MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies, Network Working Group RFC 1521, </title> <month> Sept., </month> <year> 1993. </year>
Reference-contexts: SMTP delivers mail to particular mailboxes, so it will verify that the destination mailbox is known or forwarding can be handled by the recipient. HTTP exchanges HTML [5, 36] documents. In this case, it will be invoked by a "web client" and transmits its messages encoded in MIME <ref> [9, 26] </ref> types. In each of these cases, it is important that the protocols be considered, as they are, part of the protocol suite. The reason for this is that there are cross-cutting issues that should be addressed through mechanisms that span more than one layer of protocol. <p> Here the question is what is the form into which objects, information, or data are marshalled for transmission. We see several examples of such protocols available and in use, such as ASN.1 [14], XDR [42], and MIME <ref> [9, 26] </ref>. As with the other issues in transport, neither is there one provably correct choice nor is this a stable situation in which no new protocols will be developed to solve yet unknown problems. Evolution must be supported.
Reference: [10] <author> J.A. Bull, L. Gong, K.R. Sollins, </author> <title> Towards Security in an Open Systems Federation, </title> <booktitle> Second European Symposium on Research in Computer Security, </booktitle> <address> Toulouse, France, </address> <month> Nov. </month> <year> 1992, </year> <pages> 1-20. </pages> <note> Also published as Y. </note> <editor> Deswarte, G. Eizenberg, J.-J. Quisquater, eds., </editor> <booktitle> Lecture Notes in Computer Science: </booktitle> <volume> 648, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1991. </year>
Reference-contexts: For example, given that we are taking an object oriented approach in our core model, it follows from that, in truly object oriented environments, that each object will be its own determinant of its own access policies. We have been involved in work addressing this problem <ref> [39, 10] </ref> from the object oriented perspective, but recognize that the problem is more complex than that. Objects may reside within administrative domains, perhaps nested domains, each of which claims to have at least some right to controlling access to the object.
Reference: [11] <author> Free Software Foundation, </author> <title> Gnu Info Tree is self-documenting and has the Free Software Foundation copyleft. </title>
Reference-contexts: The demonstration core provides a naming service, hint and supporting hint servers, location translation, and a role library. Demonstrations have included importing all of the Gnu Info Tree <ref> [11] </ref> into our environment, and making the Gopher [2] universe accessible through a gateway. In addition, the role library as a set of browsable objects is also accessible. A web server has made these accessible through unmodified web browsers.
Reference: [12] <author> F. Halasz and M. Schwartz, </author> <title> The Dexter Hypertext Reference, </title> <journal> Communications of the ACM, </journal> <volume> 37(2) </volume> <pages> 30-39, </pages> <month> February, </month> <year> 1994. </year>
Reference-contexts: The linking model was influenced by a number of works. In particular, part of that effort was to accommodate the features as many different models of linking as possible. Of particular concern were the models of the Web [5, 36], Xanadu [27], the Dexter model <ref> [12] </ref>, and Aquanet [22], as representative of various models of linking. None of these provides the full flexibility and generality provided by the Information Mesh, but it in turn does support all of them. See [41, 46] for the full detail of these relationships.
Reference: [13] <author> Hayes et al., </author> <title> MLP: A system for constructing distributed mixed language programs, </title> <journal> IEEE Transactions on Software Engineering, </journal> <year> 1988. </year>
Reference-contexts: The Mercury Project [21] allowed for a variety of communications paradigms ranging from message passing to simple RPC to multiple, sequenced outstanding remote invocations, as well as a global typing scheme. Work closely related to this was the MLP project at the University of Arizona <ref> [13] </ref> and Matchmaker [16] at CMU. These projects all dealt with the problem of exchanging information when different programming paradigms existed at the two ends of a communication.
Reference: [14] <author> International Organization for Standards and International Electrotechnical Committee, </author> <title> Information Processing Open Systems Interconnection Specification of Abstract Syntax Notation One (ASN.1), </title> <booktitle> International Standards 8824, </booktitle> <year> 1987. </year> <note> 20 Submitted to SIGCOMM '96: Do not distribute </note>
Reference-contexts: Here the question is what is the form into which objects, information, or data are marshalled for transmission. We see several examples of such protocols available and in use, such as ASN.1 <ref> [14] </ref>, XDR [42], and MIME [9, 26]. As with the other issues in transport, neither is there one provably correct choice nor is this a stable situation in which no new protocols will be developed to solve yet unknown problems. Evolution must be supported.
Reference: [15] <author> B.C. Johnson, </author> <title> A Distributed Computing Environment Framework: An OSF Perspective, Open Software Foundation, </title> <address> DEV-DEC-TP6-1, </address> <month> June, </month> <year> 1991. </year>
Reference-contexts: The question of how programs communicate with each other is traditionally a significant part of any distributed system. SunRPC [43] and DCE <ref> [15] </ref> support various forms of Remote Procedure Call (RPC). ISIS [7] provides causal invocation and group communications (a form of multicast) as does PSynch [32]. Message passing is more common in strict object oriented systems, such as ANSA [44, 45, 37] or CLOS [18].
Reference: [16] <editor> M.B. Jones, R.F. Rashid, and M.R. Thompson, Matchmaker: </editor> <title> An Interface Specification Language for Distributed Processing, </title> <booktitle> Proceedings of the 12th Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 225-235, </pages> <month> January, </month> <year> 1984. </year>
Reference-contexts: The Mercury Project [21] allowed for a variety of communications paradigms ranging from message passing to simple RPC to multiple, sequenced outstanding remote invocations, as well as a global typing scheme. Work closely related to this was the MLP project at the University of Arizona [13] and Matchmaker <ref> [16] </ref> at CMU. These projects all dealt with the problem of exchanging information when different programming paradigms existed at the two ends of a communication.
Reference: [17] <author> E. Jul, H. Levy, N,. Hutchinson, and A. Black, </author> <title> Fine-Grained Mobility in the Emerald System, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6, 1, </volume> <month> (February, </month> <pages> ,1988) pp. 109-133. </pages>
Reference-contexts: The thinking in the Information Mesh was influenced by the author's previous work on distributed naming [38] as well as the work of others on object oriented distributed systems, such as Emerald <ref> [17] </ref> and ANSA [44]. These had an early effect on the object model and the separation of identification from location of objects.
Reference: [18] <author> S. Keene, </author> <title> Object-oriented programming in Common Lisp: a programmer's guide to CLOS, </title> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1988. </year>
Reference-contexts: SunRPC [43] and DCE [15] support various forms of Remote Procedure Call (RPC). ISIS [7] provides causal invocation and group communications (a form of multicast) as does PSynch [32]. Message passing is more common in strict object oriented systems, such as ANSA [44, 45, 37] or CLOS <ref> [18] </ref>. <p> In addition, the Object Management Group's recent work on CORBA [30, 31] providing both multiple inheritance and polymorphism, as well as the polymorphism provided by a language such as Eiffel [24], in addition to the type systems of Clu [20] and CLOS <ref> [18] </ref> led to our generalization of typing into the role model described above. Microsoft's OLE [25, 31] in the Component Object Model (COM) takes a different approach. It supports single inheritance between interfaces in a very limited way, and discourages its use.
Reference: [19] <author> J. Kunze, </author> <title> Functional Requirements for Internet Resource Locators,Network Working Group RFC 1736, </title> <month> February, </month> <year> 1995. </year>
Reference: [20] <author> B. Liskov et al., </author> <title> CLU reference manual, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1981. </year>
Reference-contexts: In addition, the Object Management Group's recent work on CORBA [30, 31] providing both multiple inheritance and polymorphism, as well as the polymorphism provided by a language such as Eiffel [24], in addition to the type systems of Clu <ref> [20] </ref> and CLOS [18] led to our generalization of typing into the role model described above. Microsoft's OLE [25, 31] in the Component Object Model (COM) takes a different approach. It supports single inheritance between interfaces in a very limited way, and discourages its use.
Reference: [21] <author> B. Liskov et. al, </author> <title> Communications in the Mercury System, </title> <booktitle> Hawaii International Conference on System Sciences, Kailua-Koni, Hawaii, </booktitle> <month> Jan 5-8, </month> <year> 1988. </year>
Reference-contexts: The first of these is the author's previous work in both distributed systems and naming problems. The work on the type model was influenced by a number of activities. The Mercury Project <ref> [21] </ref> allowed for a variety of communications paradigms ranging from message passing to simple RPC to multiple, sequenced outstanding remote invocations, as well as a global typing scheme. Work closely related to this was the MLP project at the University of Arizona [13] and Matchmaker [16] at CMU. <p> See [41, 46] for the full detail of these relationships. Finally, the negative influence of recognizing the need for a variety of communications paradigms such as that of Mercury <ref> [21] </ref>, ISIS [7] and Psynch [32], the ANSA communications paradigm [37] and traditional RPC [8] caused us to reject the idea of a single, pervasive communications paradigm.
Reference: [22] <editor> C.C. Marshall et al., Aquanet: </editor> <title> A hypertext tool to hold your knowledge in place, </title> <booktitle> Proceedings Hypertext '91, </booktitle> <address> ACM New York, </address> <month> December, </month> <year> 1991, </year> <pages> 261-275. </pages>
Reference-contexts: The linking model was influenced by a number of works. In particular, part of that effort was to accommodate the features as many different models of linking as possible. Of particular concern were the models of the Web [5, 36], Xanadu [27], the Dexter model [12], and Aquanet <ref> [22] </ref>, as representative of various models of linking. None of these provides the full flexibility and generality provided by the Information Mesh, but it in turn does support all of them. See [41, 46] for the full detail of these relationships.
Reference: [23] <editor> M. McCahill, et al., </editor> <booktitle> Report of the IAB Workshop on Internet Information Infrastructure, </booktitle> <month> October 12-14, </month> <year> 1994, </year> <title> Network Working Group RFC 1862, </title> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: By postulating boot servers, we can limit the amount of information that must be well known to only that needed to find a boot service. There is a close relationship between this set of core services and those enumerated in the IAB Workshop on an Internet Information Infrastructure Architecture <ref> [23] </ref> as we were active participants in that workshop. The set identified there is broader than this set because it includes services and functionality that we would judge not to be in the core, although quite important.
Reference: [24] <author> B. Meyer, </author> <title> Eiffel: the Language, </title> <publisher> Prentice Hall, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: In addition, the Object Management Group's recent work on CORBA [30, 31] providing both multiple inheritance and polymorphism, as well as the polymorphism provided by a language such as Eiffel <ref> [24] </ref>, in addition to the type systems of Clu [20] and CLOS [18] led to our generalization of typing into the role model described above. Microsoft's OLE [25, 31] in the Component Object Model (COM) takes a different approach.
Reference: [25] <author> Microsoft OLE 2.0 Design Team, </author> <title> Microsoft OLE 2.0 Design Specification, Microsoft Development Library, </title> <month> April, </month> <year> 1993. </year>
Reference-contexts: Microsoft's OLE <ref> [25, 31] </ref> in the Component Object Model (COM) takes a different approach. It supports single inheritance between interfaces in a very limited way, and discourages its use. <p> Each ORB has a globally unique, not relative, name, avoiding the first of these two problems. But the second is also applicable to CORBA. Extreme longevity and mobility are not well supported in these systems. Although object reference is mediated through a COM in OLE <ref> [25, 31] </ref>; there is no cross COM reference supported at present. The linking model was influenced by a number of works. In particular, part of that effort was to accommodate the features as many different models of linking as possible.
Reference: [26] <author> K. Moore, </author> <title> MIME (Multipurpose Internet Mail Extensions) Part Two: Message Header Extensions for Non-ASCII Text, Network Working Group RFC 1522, </title> <month> Sept. </month> <year> 1993 </year>
Reference-contexts: SMTP delivers mail to particular mailboxes, so it will verify that the destination mailbox is known or forwarding can be handled by the recipient. HTTP exchanges HTML [5, 36] documents. In this case, it will be invoked by a "web client" and transmits its messages encoded in MIME <ref> [9, 26] </ref> types. In each of these cases, it is important that the protocols be considered, as they are, part of the protocol suite. The reason for this is that there are cross-cutting issues that should be addressed through mechanisms that span more than one layer of protocol. <p> Here the question is what is the form into which objects, information, or data are marshalled for transmission. We see several examples of such protocols available and in use, such as ASN.1 [14], XDR [42], and MIME <ref> [9, 26] </ref>. As with the other issues in transport, neither is there one provably correct choice nor is this a stable situation in which no new protocols will be developed to solve yet unknown problems. Evolution must be supported.
Reference: [27] <author> T.H. Nelson, </author> <title> Literary machines, </title> <booktitle> The Distributors, South Bend, IN, </booktitle> <year> 1988. </year>
Reference-contexts: the thinking in this project has been strongly influenced by both individual large information systems, as well as participation in the Internet Engineering Task Force (IETF)[40, 19, 4, 23] working groups on information infrastructure, as well as the large hypertext systems of the World Wide Web [3] and Project Xanadu <ref> [27] </ref>. There are clear distinctions between these works and the Information Mesh, for example, in terms of separating location from identification. In addition, the WWW is focussed very much on the present in terms of other mechanisms and does not provide anything akin to roles. <p> The linking model was influenced by a number of works. In particular, part of that effort was to accommodate the features as many different models of linking as possible. Of particular concern were the models of the Web [5, 36], Xanadu <ref> [27] </ref>, the Dexter model [12], and Aquanet [22], as representative of various models of linking. None of these provides the full flexibility and generality provided by the Information Mesh, but it in turn does support all of them. See [41, 46] for the full detail of these relationships.
Reference: [28] <author> B.C. Neuman, Prospero: </author> <title> A Tool for Organizing Internet Resources, </title> <journal> Electronic Networking: Research, Applications and Policy, </journal> <volume> 2(1) </volume> <pages> 30-37, </pages> <month> Spring </month> <year> 1992. </year>
Reference-contexts: The third concern here is what to use for transport. We see several examples of infrastructure models such as the World Wide Web [3] and Prospero <ref> [28, 29] </ref> taking advantage of a suite of transport protocols. In both of these cases, the protocols supported by the models are higher level protocols, such as HTTP [6], FTP [35], and Gopher [2], as well as several other file access protocols (AFS and NFS).
Reference: [29] <author> B.C, Neuman, </author> <title> The Prospero File System: A global file system based on the Virtual System Model, </title> <journal> Computing Systems, </journal> <volume> 5(4) </volume> <pages> 407-432, </pages> <month> Fall </month> <year> 1992. </year>
Reference-contexts: The third concern here is what to use for transport. We see several examples of infrastructure models such as the World Wide Web [3] and Prospero <ref> [28, 29] </ref> taking advantage of a suite of transport protocols. In both of these cases, the protocols supported by the models are higher level protocols, such as HTTP [6], FTP [35], and Gopher [2], as well as several other file access protocols (AFS and NFS).
Reference: [30] <institution> Object Management Group, </institution> <address> CORBA: </address> <booktitle> Architecture and Specification, The Object Management Group, </booktitle> <month> August, </month> <year> 1995. </year>
Reference-contexts: These projects all dealt with the problem of exchanging information when different programming paradigms existed at the two ends of a communication. In addition, the Object Management Group's recent work on CORBA <ref> [30, 31] </ref> providing both multiple inheritance and polymorphism, as well as the polymorphism provided by a language such as Eiffel [24], in addition to the type systems of Clu [20] and CLOS [18] led to our generalization of typing into the role model described above. <p> This is a collaboration among participants from the networking, information infrastructure, and library communities, as well as other interested participants. Our service model influenced the IAB Workshop on an Internet Information Infrastructure Architecture.[23] model. Both ANSA [45] and CORBA <ref> [30, 31] </ref> provide federated naming. In ANSA names are defined within domains; each domain has a name for all other domains as well.
Reference: [31] <author> R. Orfali, D. Harkey, J., Edwards, </author> <title> The Essential Distributed Objects Survival Guide, </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1996. </year> <note> Submitted to SIGCOMM '96: Do not distribute 21 </note>
Reference-contexts: These projects all dealt with the problem of exchanging information when different programming paradigms existed at the two ends of a communication. In addition, the Object Management Group's recent work on CORBA <ref> [30, 31] </ref> providing both multiple inheritance and polymorphism, as well as the polymorphism provided by a language such as Eiffel [24], in addition to the type systems of Clu [20] and CLOS [18] led to our generalization of typing into the role model described above. <p> Microsoft's OLE <ref> [25, 31] </ref> in the Component Object Model (COM) takes a different approach. It supports single inheritance between interfaces in a very limited way, and discourages its use. <p> This is a collaboration among participants from the networking, information infrastructure, and library communities, as well as other interested participants. Our service model influenced the IAB Workshop on an Internet Information Infrastructure Architecture.[23] model. Both ANSA [45] and CORBA <ref> [30, 31] </ref> provide federated naming. In ANSA names are defined within domains; each domain has a name for all other domains as well. <p> Each ORB has a globally unique, not relative, name, avoiding the first of these two problems. But the second is also applicable to CORBA. Extreme longevity and mobility are not well supported in these systems. Although object reference is mediated through a COM in OLE <ref> [25, 31] </ref>; there is no cross COM reference supported at present. The linking model was influenced by a number of works. In particular, part of that effort was to accommodate the features as many different models of linking as possible.
Reference: [32] <author> L.L. Peterson, N.C. Bucholz, and R.D. Schlicting, </author> <title> Preserving and Using Context Information in Interprocess Communication, </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7, </volume> <month> 3 (August </month> <year> 1989), </year> <pages> pp. 217-246. </pages>
Reference-contexts: The question of how programs communicate with each other is traditionally a significant part of any distributed system. SunRPC [43] and DCE [15] support various forms of Remote Procedure Call (RPC). ISIS [7] provides causal invocation and group communications (a form of multicast) as does PSynch <ref> [32] </ref>. Message passing is more common in strict object oriented systems, such as ANSA [44, 45, 37] or CLOS [18]. <p> See [41, 46] for the full detail of these relationships. Finally, the negative influence of recognizing the need for a variety of communications paradigms such as that of Mercury [21], ISIS [7] and Psynch <ref> [32] </ref>, the ANSA communications paradigm [37] and traditional RPC [8] caused us to reject the idea of a single, pervasive communications paradigm.
Reference: [33] <author> J. Postel, </author> <title> Simple Mail Transfer Protocol, Network Working Group RFC 821, </title> <month> August, </month> <year> 1982 </year>
Reference-contexts: In order to support it, each site must provide IP over which sits TCP and UDP. These provide bit-streams with various characteristics. Above that there are a variety of more application specific transport and communication protocols such as FTP [35], Telnet [34], SMTP <ref> [33] </ref>, 1 2 Submitted to SIGCOMM '96: Do not distribute and HTTP [6]. Each of these protocols can be described as providing enhanced abstractions for communication and exchange. FTP supports files, allowing for both learning about them and more importantly exchanging or copying them.
Reference: [34] <author> J. Postel and J. Reynolds, </author> <title> Telnet Protocol Specification, Network Working Group RFC 854, </title> <month> May, </month> <year> 1983. </year>
Reference-contexts: In order to support it, each site must provide IP over which sits TCP and UDP. These provide bit-streams with various characteristics. Above that there are a variety of more application specific transport and communication protocols such as FTP [35], Telnet <ref> [34] </ref>, SMTP [33], 1 2 Submitted to SIGCOMM '96: Do not distribute and HTTP [6]. Each of these protocols can be described as providing enhanced abstractions for communication and exchange. FTP supports files, allowing for both learning about them and more importantly exchanging or copying them.
Reference: [35] <author> J. Postel and J. Reynolds, </author> <title> File Transfer Protocol (FTP), Network Working Group RFC 959, </title> <month> October, </month> <year> 1985. </year>
Reference-contexts: In order to support it, each site must provide IP over which sits TCP and UDP. These provide bit-streams with various characteristics. Above that there are a variety of more application specific transport and communication protocols such as FTP <ref> [35] </ref>, Telnet [34], SMTP [33], 1 2 Submitted to SIGCOMM '96: Do not distribute and HTTP [6]. Each of these protocols can be described as providing enhanced abstractions for communication and exchange. FTP supports files, allowing for both learning about them and more importantly exchanging or copying them. <p> We see several examples of infrastructure models such as the World Wide Web [3] and Prospero [28, 29] taking advantage of a suite of transport protocols. In both of these cases, the protocols supported by the models are higher level protocols, such as HTTP [6], FTP <ref> [35] </ref>, and Gopher [2], as well as several other file access protocols (AFS and NFS). A set such as this will only grow, and therefore selecting only one or configuring into a system even a particular set would severely hamper the utility of an information infrastructure.
Reference: [36] <author> D. Raggett, </author> <title> Hypertext Markup Language Specification Version 3.0, Internet Draft March, </title> <note> 1995. If this reference is has not been finalized by publication time, it will be removed. </note>
Reference-contexts: SMTP provides for the various activities related to delivering mail messages, on behalf of a local mail services. SMTP delivers mail to particular mailboxes, so it will verify that the destination mailbox is known or forwarding can be handled by the recipient. HTTP exchanges HTML <ref> [5, 36] </ref> documents. In this case, it will be invoked by a "web client" and transmits its messages encoded in MIME [9, 26] types. In each of these cases, it is important that the protocols be considered, as they are, part of the protocol suite. <p> The linking model was influenced by a number of works. In particular, part of that effort was to accommodate the features as many different models of linking as possible. Of particular concern were the models of the Web <ref> [5, 36] </ref>, Xanadu [27], the Dexter model [12], and Aquanet [22], as representative of various models of linking. None of these provides the full flexibility and generality provided by the Information Mesh, but it in turn does support all of them.
Reference: [37] <author> R.T.O. Rees, </author> <title> The ANSA Computational Model, Architecture Projects Management, </title> <publisher> Ltd, </publisher> <address> AR.001.01, </address> <month> February, </month> <year> 1993. </year>
Reference-contexts: SunRPC [43] and DCE [15] support various forms of Remote Procedure Call (RPC). ISIS [7] provides causal invocation and group communications (a form of multicast) as does PSynch [32]. Message passing is more common in strict object oriented systems, such as ANSA <ref> [44, 45, 37] </ref> or CLOS [18]. <p> See [41, 46] for the full detail of these relationships. Finally, the negative influence of recognizing the need for a variety of communications paradigms such as that of Mercury [21], ISIS [7] and Psynch [32], the ANSA communications paradigm <ref> [37] </ref> and traditional RPC [8] caused us to reject the idea of a single, pervasive communications paradigm.
Reference: [38] <author> K.R. Sollins and D.D. Clark, </author> <title> Distributed Name Management, </title> <booktitle> IFIP 6.5 International Working Conference on Message Handling Systems, </booktitle> <address> Munich, Germany, </address> <month> April, </month> <title> 1887. [39] , K.R. Sollins, Cascaded Authentication, </title> <booktitle> Proc. IEEE Symposium on Security and Privacy, </booktitle> <address> Oakland, CA, </address> <month> April, </month> <year> 1988, </year> <pages> 156-163. </pages>
Reference-contexts: There also is both significant previous work by the author and others on the problems 16 Submitted to SIGCOMM '96: Do not distribute of separating naming and location. The thinking in the Information Mesh was influenced by the author's previous work on distributed naming <ref> [38] </ref> as well as the work of others on object oriented distributed systems, such as Emerald [17] and ANSA [44]. These had an early effect on the object model and the separation of identification from location of objects.
Reference: [40] <author> K.R. Sollins and L. Masinter, </author> <title> Requirements for Uniform Resource Names, Network Working Group RFC 1737, </title> <month> February, </month> <year> 1995. </year>
Reference: [41] <author> K.R. Sollins and J.R. Van Dyke, </author> <title> Linking in a Global Information Architecture, </title> <booktitle> Fourth International World Wide Web Conference, </booktitle> <address> Boston, MA, </address> <month> Dec. </month> <year> 1995, </year> <pages> 493-508. </pages>
Reference-contexts: It is worth noting here that based on the subroles of Named Link, Ordered Link, and Binary Link defined in Appendix B, we could then define link roles to support many of the popular linking models. References <ref> [41] </ref> and [46] present the details of this work. In these definitions, it is the parts that are critically important. <p> A tag specifies which part of which role is being specified and the selector identifies the particular part if more than one is available. There are a number of issues embedded in this link structure. Again, these have been addressed and published in further detail in <ref> [41] </ref> and [46]. By using URNs the problems of identity and mobility are addressed. Since links are first class objects, they have identities and therefore can be used as the targets of links. <p> But, it readily falls out of the role inheritance model. Again, this aspect of building relationships is more complex than can be described here, but is given more detail in <ref> [41] </ref> and [46]. 4 Core services In addition to the components of the central model of the Information Mesh, there are a set of core services that are needed in order for the Mesh to function. We will only identify these here without significant detail, for lack of space. <p> None of these provides the full flexibility and generality provided by the Information Mesh, but it in turn does support all of them. See <ref> [41, 46] </ref> for the full detail of these relationships.
Reference: [42] <author> Sun Microsystems, XDR: </author> <title> External Data Representation Standard, Network Working Group RFC 1014, </title> <month> June, </month> <year> 1987. </year>
Reference-contexts: Here the question is what is the form into which objects, information, or data are marshalled for transmission. We see several examples of such protocols available and in use, such as ASN.1 [14], XDR <ref> [42] </ref>, and MIME [9, 26]. As with the other issues in transport, neither is there one provably correct choice nor is this a stable situation in which no new protocols will be developed to solve yet unknown problems. Evolution must be supported.
Reference: [43] <author> Sun Microsystems, </author> <title> RPC: Remote Procedure Call Protocol Specification Version 2, Network Working Group RFC 1057, </title> <month> June, </month> <year> 1988. </year>
Reference-contexts: The question of how programs communicate with each other is traditionally a significant part of any distributed system. SunRPC <ref> [43] </ref> and DCE [15] support various forms of Remote Procedure Call (RPC). ISIS [7] provides causal invocation and group communications (a form of multicast) as does PSynch [32]. Message passing is more common in strict object oriented systems, such as ANSA [44, 45, 37] or CLOS [18].
Reference: [44] <author> R.J. van der Linden, </author> <title> An Overview of ANSA, Architecture Projects Management, </title> <publisher> Ltd, </publisher> <address> AR.000.00, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: SunRPC [43] and DCE [15] support various forms of Remote Procedure Call (RPC). ISIS [7] provides causal invocation and group communications (a form of multicast) as does PSynch [32]. Message passing is more common in strict object oriented systems, such as ANSA <ref> [44, 45, 37] </ref> or CLOS [18]. <p> The thinking in the Information Mesh was influenced by the author's previous work on distributed naming [38] as well as the work of others on object oriented distributed systems, such as Emerald [17] and ANSA <ref> [44] </ref>. These had an early effect on the object model and the separation of identification from location of objects.
Reference: [45] <author> R.J. van der Linden, </author> <title> The ANSA Naming Model, Architecture Projects Management, </title> <publisher> Ltd, </publisher> <address> AR.003.001, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: SunRPC [43] and DCE [15] support various forms of Remote Procedure Call (RPC). ISIS [7] provides causal invocation and group communications (a form of multicast) as does PSynch [32]. Message passing is more common in strict object oriented systems, such as ANSA <ref> [44, 45, 37] </ref> or CLOS [18]. <p> The IETF is in the process of standardizing an information identification architecture. This is a collaboration among participants from the networking, information infrastructure, and library communities, as well as other interested participants. Our service model influenced the IAB Workshop on an Internet Information Infrastructure Architecture.[23] model. Both ANSA <ref> [45] </ref> and CORBA [30, 31] provide federated naming. In ANSA names are defined within domains; each domain has a name for all other domains as well.
Reference: [46] <author> J.R. Van Dyke, </author> <title> Link Architecture for a Global Information Infrastructure, </title> <publisher> MIT LCS-TR 659, </publisher> <month> June, </month> <year> 1995. </year> <note> 22 Submitted to SIGCOMM '96: Do not distribute </note>
Reference-contexts: It is worth noting here that based on the subroles of Named Link, Ordered Link, and Binary Link defined in Appendix B, we could then define link roles to support many of the popular linking models. References [41] and <ref> [46] </ref> present the details of this work. In these definitions, it is the parts that are critically important. <p> A tag specifies which part of which role is being specified and the selector identifies the particular part if more than one is available. There are a number of issues embedded in this link structure. Again, these have been addressed and published in further detail in [41] and <ref> [46] </ref>. By using URNs the problems of identity and mobility are addressed. Since links are first class objects, they have identities and therefore can be used as the targets of links. <p> But, it readily falls out of the role inheritance model. Again, this aspect of building relationships is more complex than can be described here, but is given more detail in [41] and <ref> [46] </ref>. 4 Core services In addition to the components of the central model of the Information Mesh, there are a set of core services that are needed in order for the Mesh to function. We will only identify these here without significant detail, for lack of space. <p> None of these provides the full flexibility and generality provided by the Information Mesh, but it in turn does support all of them. See <ref> [41, 46] </ref> for the full detail of these relationships.
References-found: 45

