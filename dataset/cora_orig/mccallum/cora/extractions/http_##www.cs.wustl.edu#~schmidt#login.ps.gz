URL: http://www.cs.wustl.edu/~schmidt/login.ps.gz
Refering-URL: http://www.cs.wustl.edu/~schmidt/new.html
Root-URL: http://www.cs.wustl.edu
Email: schmidt@cs.wustl.edu  
Title: An Architectural Overview of the ACE Framework A Case-study of Successful Cross-platform Systems Software Reuse  
Author: Douglas C. Schmidt 
Note: This article will appear in a special issue of USENIX Login edited by Peter Salus, 1998.  
Address: St. Louis, MO 63130  
Affiliation: Department of Computer Science Washington University,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> D. C. Schmidt, </author> <title> ACE: an Object-Oriented Framework for Developing Distributed Applications, </title> <booktitle> in Proceedings of the 6 th USENIX C++ Technical Conference, </booktitle> <address> (Cambridge, Mas-sachusetts), </address> <publisher> USENIX Association, </publisher> <month> April </month> <year> 1994. </year>
Reference-contexts: This article describes the software architecture of ACE <ref> [1] </ref>, which is a freely available, open source C++ framework targeted for developers of high-performance and real-time communication services and applications. <p> Service configuration components: The ACE Service Con-figurator [9] supports the configuration of applications whose services may be assembled dynamically at installation-time and/or run-time. Hierarchically-layered stream components: The ACE Streams components <ref> [8, 1] </ref> simplify the development of communication software applications, such as user-level protocol stacks, that are composed of hierarchically-layered services. ORB adapter components: ACE can be integrated seamlessly with single-threaded and multi-threaded CORBA implementations via its ORB adapters [16].
Reference: [2] <author> D. C. Schmidt, </author> <title> A Family of Design Patterns for Application-level Gateways, </title> <journal> The Theory and Practice of Object Systems (Special Issue on Patterns and Pattern Languages), </journal> <volume> vol. 2, no. 1, </volume> <year> 1996. </year>
Reference-contexts: of ACE, outlines several complex communication mid-dleware applications that have been developed with ACE, and summarizes the key lessons learned developing and deploying reusable the OO communication software components and frameworks in ACE. 2 Overview of ACE ACE is an object-oriented (OO) framework that implements core concurrency and distribution patterns <ref> [2] </ref> for communication software. ACE provides a rich set of reusable C++ wrappers and framework components that are targeted for developers of high-performance, real-time services and applications across a wide range of OS platforms, including Win32, most versions of UNIX, and many real-time operating systems. <p> Connection establishment and service initialization [3]; * Event demultiplexing and event handler dispatching [4, 5, 6]; * Interprocess communication [7] and shared memory management; * Static and dynamic configuration [8, 9] of communica tion services; * Concurrency and synchronization [5, 10]; * Distributed communication services such as naming, event routing <ref> [2] </ref>, logging, time synchronization, and net work locking; * Higher-level distributed computing middleware components such as Object Request Brokers (ORBs) [11], Web servers [12], and electronic medical imaging systems [13]. <p> return value CLIENTCLIENT OS KERNELOS KERNEL HIGHHIGH-SPEEDSPEED NETWORK ADAPTERSNETWORK ADAPTERS REALREAL-TIME ITIME I//OO SUBSYSTEMSUBSYSTEM RIOPRIOP SERVANTSERVANT OS KERNELOS KERNEL HIGHHIGH-SPEEDSPEED NETWORK ADAPTERSNETWORK ADAPTERS REALREAL-TIME ITIME I//OO SUBSYSTEMSUBSYSTEM Factoring out reusable distributed application building blocks: These service components provide reusable implementations of common distributed application tasks such as naming, event routing <ref> [2] </ref>, logging, time synchronization, and network locking. <p> ACE has been used in research and development projects at many universities and companies. For instance, ACE has been used to build real-time avionics systems at Boe-ing [27]; telecommunication systems at Bellcore [4], Erics-son [28], Motorola <ref> [2] </ref>, and Lucent; medical imaging systems at Siemens [9] and Kodak [16]; and distributed simulation systems at SAIC/DARPA. It is also widely used for research projects and classroom instruction. A description of many of the projects using the ACE, TAO, and JAWS frameworks are available at www.cs.wustl.edu/schmidt/ACE-users.html.
Reference: [3] <author> D. C. Schmidt, </author> <title> Acceptor and Connector: Design Patterns for Initializing Communication Services, in Pattern Languages of Program Design (R. </title> <editor> Martin, F. Buschmann, and D. Riehle, eds.), </editor> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1997. </year>
Reference-contexts: The components in ACE provide reusable implementations of the following common communication software tasks: * Connection establishment and service initialization <ref> [3] </ref>; * Event demultiplexing and event handler dispatching [4, 5, 6]; * Interprocess communication [7] and shared memory management; * Static and dynamic configuration [8, 9] of communica tion services; * Concurrency and synchronization [5, 10]; * Distributed communication services such as naming, event routing [2], logging, time synchronization, and net <p> The framework layer in ACE contains the following components: Event demultiplexing components: The ACE Reactor [4] and Proactor [6] are extensible, object-oriented demultiplex-ers that dispatch application-specific handlers in response to various types of I/O-based, timer-based, signal-based, and synchronization-based events. Service initialization components: The ACE Connector and Acceptor components <ref> [3] </ref> decouple the active and passive initialization roles, respectively, from application-specific tasks that communication services perform once initialization is complete. Service configuration components: The ACE Service Con-figurator [9] supports the configuration of applications whose services may be assembled dynamically at installation-time and/or run-time.
Reference: [4] <author> D. C. Schmidt, </author> <title> Reactor: An Object Behavioral Pattern for Concurrent Event Demultiplexing and Event Handler Dispatching, in Pattern Languages of Program Design (J. </title> <editor> O. Coplien and D. C. Schmidt, </editor> <booktitle> eds.), </booktitle> <pages> pp. 529545, </pages> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1995. </year>
Reference-contexts: The components in ACE provide reusable implementations of the following common communication software tasks: * Connection establishment and service initialization [3]; * Event demultiplexing and event handler dispatching <ref> [4, 5, 6] </ref>; * Interprocess communication [7] and shared memory management; * Static and dynamic configuration [8, 9] of communica tion services; * Concurrency and synchronization [5, 10]; * Distributed communication services such as naming, event routing [2], logging, time synchronization, and net work locking; * Higher-level distributed computing middleware components <p> These framework components support the flexible configuration of concurrent communication applications and services [8]. The framework layer in ACE contains the following components: Event demultiplexing components: The ACE Reactor <ref> [4] </ref> and Proactor [6] are extensible, object-oriented demultiplex-ers that dispatch application-specific handlers in response to various types of I/O-based, timer-based, signal-based, and synchronization-based events. <p> This URL contains complete source code, documentation, and 6 example applications, including JAWS and TAO. ACE has been used in research and development projects at many universities and companies. For instance, ACE has been used to build real-time avionics systems at Boe-ing [27]; telecommunication systems at Bellcore <ref> [4] </ref>, Erics-son [28], Motorola [2], and Lucent; medical imaging systems at Siemens [9] and Kodak [16]; and distributed simulation systems at SAIC/DARPA. It is also widely used for research projects and classroom instruction.
Reference: [5] <author> D. C. Schmidt and C. D. Cranor, Half-Sync/Half-Async: </author> <title> an Architectural Pattern for Efficient and Well-structured Concurrent I/O, in Pattern Languages of Program Design (J. </title> <editor> O. Coplien, J. Vlissides, and N. Kerth, eds.), </editor> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: The components in ACE provide reusable implementations of the following common communication software tasks: * Connection establishment and service initialization [3]; * Event demultiplexing and event handler dispatching <ref> [4, 5, 6] </ref>; * Interprocess communication [7] and shared memory management; * Static and dynamic configuration [8, 9] of communica tion services; * Concurrency and synchronization [5, 10]; * Distributed communication services such as naming, event routing [2], logging, time synchronization, and net work locking; * Higher-level distributed computing middleware components <p> provide reusable implementations of the following common communication software tasks: * Connection establishment and service initialization [3]; * Event demultiplexing and event handler dispatching [4, 5, 6]; * Interprocess communication [7] and shared memory management; * Static and dynamic configuration [8, 9] of communica tion services; * Concurrency and synchronization <ref> [5, 10] </ref>; * Distributed communication services such as naming, event routing [2], logging, time synchronization, and net work locking; * Higher-level distributed computing middleware components such as Object Request Brokers (ORBs) [11], Web servers [12], and electronic medical imaging systems [13].
Reference: [6] <author> T. Harrison, I. Pyarali, D. C. Schmidt, and T. Jordan, </author> <title> Proac-tor An Object Behavioral Pattern for Dispatching Asynchronous Event Handlers, </title> <booktitle> in The 4 th Pattern Languages of Programming Conference (Washington University technical report #WUCS-97-34), </booktitle> <month> September </month> <year> 1997. </year>
Reference-contexts: The components in ACE provide reusable implementations of the following common communication software tasks: * Connection establishment and service initialization [3]; * Event demultiplexing and event handler dispatching <ref> [4, 5, 6] </ref>; * Interprocess communication [7] and shared memory management; * Static and dynamic configuration [8, 9] of communica tion services; * Concurrency and synchronization [5, 10]; * Distributed communication services such as naming, event routing [2], logging, time synchronization, and net work locking; * Higher-level distributed computing middleware components <p> These framework components support the flexible configuration of concurrent communication applications and services [8]. The framework layer in ACE contains the following components: Event demultiplexing components: The ACE Reactor [4] and Proactor <ref> [6] </ref> are extensible, object-oriented demultiplex-ers that dispatch application-specific handlers in response to various types of I/O-based, timer-based, signal-based, and synchronization-based events. Service initialization components: The ACE Connector and Acceptor components [3] decouple the active and passive initialization roles, respectively, from application-specific tasks that communication services perform once initialization is complete.
Reference: [7] <author> D. C. Schmidt, T. H. Harrison, and E. Al-Shaer, </author> <title> Object-Oriented Components for High-speed Network Programming, </title> <booktitle> in Proceedings of the 1 st Conference on Object-Oriented Technologies and Systems, </booktitle> <address> (Monterey, CA), </address> <publisher> USENIX, </publisher> <month> June </month> <year> 1995. </year>
Reference-contexts: The components in ACE provide reusable implementations of the following common communication software tasks: * Connection establishment and service initialization [3]; * Event demultiplexing and event handler dispatching [4, 5, 6]; * Interprocess communication <ref> [7] </ref> and shared memory management; * Static and dynamic configuration [8, 9] of communica tion services; * Concurrency and synchronization [5, 10]; * Distributed communication services such as naming, event routing [2], logging, time synchronization, and net work locking; * Higher-level distributed computing middleware components such as Object Request Brokers (ORBs) <p> IPC and filesystem components: The ACE C++ wrappers encapsulate local and/or remote IPC mechanisms <ref> [7] </ref> such as sockets, TLI, UNIX FIFOs and STREAM pipes, and Win32 Named Pipes. In addition, the ACE C++ wrappers encapsulate the OS filesystem APIs.
Reference: [8] <author> D. C. Schmidt and T. Suda, </author> <title> An Object-Oriented Framework for Dynamically Configuring Extensible Distributed Communication Systems, </title> <journal> IEE/BCS Distributed Systems Engineering Journal (Special Issue on Configurable Distributed Systems), </journal> <volume> vol. 2, </volume> <pages> pp. 280293, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: The components in ACE provide reusable implementations of the following common communication software tasks: * Connection establishment and service initialization [3]; * Event demultiplexing and event handler dispatching [4, 5, 6]; * Interprocess communication [7] and shared memory management; * Static and dynamic configuration <ref> [8, 9] </ref> of communica tion services; * Concurrency and synchronization [5, 10]; * Distributed communication services such as naming, event routing [2], logging, time synchronization, and net work locking; * Higher-level distributed computing middleware components such as Object Request Brokers (ORBs) [11], Web servers [12], and electronic medical imaging systems [13]. <p> These framework components support the flexible configuration of concurrent communication applications and services <ref> [8] </ref>. The framework layer in ACE contains the following components: Event demultiplexing components: The ACE Reactor [4] and Proactor [6] are extensible, object-oriented demultiplex-ers that dispatch application-specific handlers in response to various types of I/O-based, timer-based, signal-based, and synchronization-based events. <p> Service configuration components: The ACE Service Con-figurator [9] supports the configuration of applications whose services may be assembled dynamically at installation-time and/or run-time. Hierarchically-layered stream components: The ACE Streams components <ref> [8, 1] </ref> simplify the development of communication software applications, such as user-level protocol stacks, that are composed of hierarchically-layered services. ORB adapter components: ACE can be integrated seamlessly with single-threaded and multi-threaded CORBA implementations via its ORB adapters [16]. <p> ORB adapter components: ACE can be integrated seamlessly with single-threaded and multi-threaded CORBA implementations via its ORB adapters [16]. The ACE framework components facilitate the development of communication software that can be updated and extended without the need to modify, recompile, relink, or often restart running applications <ref> [8] </ref>.
Reference: [9] <author> P. Jain and D. C. Schmidt, </author> <title> Service Configurator: A Pattern for Dynamic Configuration of Services, </title> <booktitle> in Proceedings of the 3 rd Conference on Object-Oriented Technologies and Systems, USENIX, </booktitle> <month> June </month> <year> 1997. </year>
Reference-contexts: The components in ACE provide reusable implementations of the following common communication software tasks: * Connection establishment and service initialization [3]; * Event demultiplexing and event handler dispatching [4, 5, 6]; * Interprocess communication [7] and shared memory management; * Static and dynamic configuration <ref> [8, 9] </ref> of communica tion services; * Concurrency and synchronization [5, 10]; * Distributed communication services such as naming, event routing [2], logging, time synchronization, and net work locking; * Higher-level distributed computing middleware components such as Object Request Brokers (ORBs) [11], Web servers [12], and electronic medical imaging systems [13]. <p> Service initialization components: The ACE Connector and Acceptor components [3] decouple the active and passive initialization roles, respectively, from application-specific tasks that communication services perform once initialization is complete. Service configuration components: The ACE Service Con-figurator <ref> [9] </ref> supports the configuration of applications whose services may be assembled dynamically at installation-time and/or run-time. Hierarchically-layered stream components: The ACE Streams components [8, 1] simplify the development of communication software applications, such as user-level protocol stacks, that are composed of hierarchically-layered services. <p> This flexibility is achieved in ACE by combining (1) C++ language features, such as templates, inheritance, and dynamic binding, (2) design patterns, such as Abstract Factory, Strategy, and Service Configurator <ref> [17, 9] </ref>, and (3) OS mechanisms, such as dynamic linking and multi-threading. 2.1.4 Self-contained Distributed Service Components In addition to its C++ wrappers and framework components, ACE provides a standard library of distributed services that are packaged as self-contained components. <p> ACE has been used in research and development projects at many universities and companies. For instance, ACE has been used to build real-time avionics systems at Boe-ing [27]; telecommunication systems at Bellcore [4], Erics-son [28], Motorola [2], and Lucent; medical imaging systems at Siemens <ref> [9] </ref> and Kodak [16]; and distributed simulation systems at SAIC/DARPA. It is also widely used for research projects and classroom instruction. A description of many of the projects using the ACE, TAO, and JAWS frameworks are available at www.cs.wustl.edu/schmidt/ACE-users.html. In addition, comp.soft-sys.ace is a USENET newsgroup devoted to ACE-related topics.
Reference: [10] <author> R. G. Lavender and D. C. Schmidt, </author> <title> Active Object: an Object Behavioral Pattern for Concurrent Programming, in Pattern Languages of Program Design (J. </title> <editor> O. Coplien, J. Vlissides, and N. Kerth, eds.), </editor> <address> Reading, MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: provide reusable implementations of the following common communication software tasks: * Connection establishment and service initialization [3]; * Event demultiplexing and event handler dispatching [4, 5, 6]; * Interprocess communication [7] and shared memory management; * Static and dynamic configuration [8, 9] of communica tion services; * Concurrency and synchronization <ref> [5, 10] </ref>; * Distributed communication services such as naming, event routing [2], logging, time synchronization, and net work locking; * Higher-level distributed computing middleware components such as Object Request Brokers (ORBs) [11], Web servers [12], and electronic medical imaging systems [13]. <p> Applications can combine and compose these wrappers by selectively inheriting, aggregating, and/or instantiating the following components: Concurrency and synchronization components: ACE abstracts native OS multi-threading and multi-processing mechanisms like mutexes and semaphores to create higher-level OO concurrency abstractions like Active Objects <ref> [10] </ref> and Polymorphic Futures [14]. IPC and filesystem components: The ACE C++ wrappers encapsulate local and/or remote IPC mechanisms [7] such as sockets, TLI, UNIX FIFOs and STREAM pipes, and Win32 Named Pipes. In addition, the ACE C++ wrappers encapsulate the OS filesystem APIs.
Reference: [11] <author> D. C. Schmidt, A. Gokhale, T. Harrison, and G. </author> <month> Parulkar, </month>
Reference-contexts: and shared memory management; * Static and dynamic configuration [8, 9] of communica tion services; * Concurrency and synchronization [5, 10]; * Distributed communication services such as naming, event routing [2], logging, time synchronization, and net work locking; * Higher-level distributed computing middleware components such as Object Request Brokers (ORBs) <ref> [11] </ref>, Web servers [12], and electronic medical imaging systems [13]. This section outlines the structure and functionality of the ACE framework. 2.1 The Structure and Functionality of ACE The ACE framework contains 150,000 lines of C++ code divided into 450 classes.
References-found: 11

