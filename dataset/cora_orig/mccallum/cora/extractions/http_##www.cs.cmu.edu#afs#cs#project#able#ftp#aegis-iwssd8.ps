URL: http://www.cs.cmu.edu/afs/cs/project/able/ftp/aegis-iwssd8.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs/project/able/www/paper_abstracts/aegis-iwssd8.html
Root-URL: 
Title: A Case Study in Architectural Modelling: The AEGIS System  
Author: Robert Allen David Garlan 
Address: Pittsburgh, PA 15213  
Affiliation: Computer Science Department Carnegie Mellon University  
Date: March 1996  
Note: Proceedings of Eighth International Conference on Software Specification and Design (IWSSD-8),  
Abstract: Software architecture is receiving increasingly attention as a critical design level for software systems. However, the current practice of architectural description is largely informal and ad hoc, with the consequence that architectural documents serve as a poor communication mechanism, are difficult to analyze, and may have very little relationship to the implemented system. In an attempt to address these problems several researchers have experimented with formalisms for architectural specification and modelling. One such formalism is WRIGHT. In this paper we show how WRIGHT can be used to provide insight into an architectural design by modelling a prototype implementation of part of the AEGIS Weapons System. 
Abstract-found: 1
Intro-found: 1
Reference: [AAG93] <author> G. Abowd, R. Allen, and D. Garlan. </author> <title> Using style to understand descriptions of software architecture. </title> <booktitle> In Proc. of SIGSOFT'93: Foundations of Software Eng., Software Eng. Notes 18(5). </booktitle> <publisher> ACM Press, </publisher> <month> Dec </month> <year> 1993. </year>
Reference-contexts: Rapide has been used to model the AEGIS System, and in fact was one of the original prototyping languages applied to the problem. In earlier work the authors and other colleagues have used Z to model architectural style <ref> [AG92, GN91, AAG93] </ref>. While this work demonstrated that many properties of architecture can be handled in a set-theoretic context, we also found that Z was a poorly matched to the problem of capturing the dynamic behavior of architectural systems.
Reference: [AG92] <author> R. Allen and D. Garlan. </author> <title> A formal approach to software architectures. </title> <editor> In Jan van Leeuwen, editor, </editor> <booktitle> Proc. of IFIP'92. </booktitle> <publisher> Elsevier Science Publishers B.V., </publisher> <month> Sept </month> <year> 1992. </year>
Reference-contexts: Rapide has been used to model the AEGIS System, and in fact was one of the original prototyping languages applied to the problem. In earlier work the authors and other colleagues have used Z to model architectural style <ref> [AG92, GN91, AAG93] </ref>. While this work demonstrated that many properties of architecture can be handled in a set-theoretic context, we also found that Z was a poorly matched to the problem of capturing the dynamic behavior of architectural systems.
Reference: [AG94a] <author> R. Allen and D. Garlan. </author> <title> Formal connectors. </title> <type> Technical Report CMU-CS-94-115, </type> <institution> Carnegie Mellon University, </institution> <month> Mar </month> <year> 1994. </year>
Reference-contexts: show how it must be modified to characterize the as-built system. 4 The WRIGHT Notation Before presenting the AEGIS specification, we provide a brief overview of the WRIGHT notation. (We will assume rudimentary familiarity with CSP [Hoa85].) Details of the semantic model and the supporting toolset can be found elsewhere <ref> [AG94b, AG94a] </ref>. 1 WRIGHT describes the architecture of a system as a collection of components interacting via instances of connector types. A simple Client-Server system description is shown in Figure 2. This example shows the three elements of a system description: style declaration, instance declarations, and attachments.
Reference: [AG94b] <author> R. Allen and D. Garlan. </author> <title> Formalizing architectural connection. </title> <booktitle> In Proc. of the 16th International Conf on Software Eng., </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: show how it must be modified to characterize the as-built system. 4 The WRIGHT Notation Before presenting the AEGIS specification, we provide a brief overview of the WRIGHT notation. (We will assume rudimentary familiarity with CSP [Hoa85].) Details of the semantic model and the supporting toolset can be found elsewhere <ref> [AG94b, AG94a] </ref>. 1 WRIGHT describes the architecture of a system as a collection of components interacting via instances of connector types. A simple Client-Server system description is shown in Figure 2. This example shows the three elements of a system description: style declaration, instance declarations, and attachments. <p> The final extension is the use of conditional processes, which we will illustrate in the next section. As discussed in <ref> [AG94b] </ref>, descriptions of connectors can be used to determine whether the glue constrains the roles enough to guarantee critical properties such as local absence of deadlock.
Reference: [BB92] <author> G. Berry and G. Boudol. </author> <title> The chemical abstract machine. </title> <journal> Theoretical Computer Science, </journal> <volume> (96), </volume> <year> 1992. </year>
Reference-contexts: A number of other formalisms have been proposed for modelling architectures of software systems. Inverardi and Wolf have used the Chemical Abstract Machine <ref> [BB92] </ref> as a formal basis for architectural description [IW95]. Architectural elements are represented by molecules and architectural interaction by reactions. Reactions operate as a set of rewrite rules, which determine how the computations proceed over time. We understand that this formalism has been applied to the AEGIS problem.
Reference: [GN91] <author> D. Garlan and D. Notkin. </author> <title> Formalizing design spaces: Implicit invocation mechanisms. In VDM'91: Formal Software Development Methods. </title> <publisher> Springer-Verlag, LNCS 551, </publisher> <month> Oct </month> <year> 1991. </year>
Reference-contexts: Rapide has been used to model the AEGIS System, and in fact was one of the original prototyping languages applied to the problem. In earlier work the authors and other colleagues have used Z to model architectural style <ref> [AG92, GN91, AAG93] </ref>. While this work demonstrated that many properties of architecture can be handled in a set-theoretic context, we also found that Z was a poorly matched to the problem of capturing the dynamic behavior of architectural systems.
Reference: [GPT95] <author> David Garlan, Frances Newberry Paulisch, and Wal-ter F. Tichy, </author> <title> editors. </title> <booktitle> Summary of the Dagstuhl Workshop on Software Architecture, </booktitle> <month> Feb </month> <year> 1995. </year> <note> Reprinted in ACM Software Eng. Notes, </note> <month> July </month> <year> 1995. </year>
Reference-contexts: It was later re-presented as a challenge problem at the 1995 Dagstuhl Workshop on Software Architecture <ref> [GPT95] </ref>. The AEGIS Weapons System is a large, complex software system that controls many of the defense functions of modern US Navy ships.
Reference: [Hoa85] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: We start by characterizing the naive architectural design. Then we show how it must be modified to characterize the as-built system. 4 The WRIGHT Notation Before presenting the AEGIS specification, we provide a brief overview of the WRIGHT notation. (We will assume rudimentary familiarity with CSP <ref> [Hoa85] </ref>.) Details of the semantic model and the supporting toolset can be found elsewhere [AG94b, AG94a]. 1 WRIGHT describes the architecture of a system as a collection of components interacting via instances of connector types. A simple Client-Server system description is shown in Figure 2.
Reference: [IW95] <author> P. Inverardi and A. Wolf. </author> <title> Formal specification and analysis of software architectures using the chemical, abstract machine model. </title> <journal> IEEE Trans. on Software Eng., </journal> <volume> 21(4), </volume> <month> Apr </month> <year> 1995. </year>
Reference-contexts: A number of other formalisms have been proposed for modelling architectures of software systems. Inverardi and Wolf have used the Chemical Abstract Machine [BB92] as a formal basis for architectural description <ref> [IW95] </ref>. Architectural elements are represented by molecules and architectural interaction by reactions. Reactions operate as a set of rewrite rules, which determine how the computations proceed over time. We understand that this formalism has been applied to the AEGIS problem.
Reference: [L + 95] <author> D. Luckham et al. </author> <title> Specification and analysis of system architecture using Rapide. </title> <journal> IEEE Trans. on Software Eng., </journal> <volume> 21(4), </volume> <month> Apr </month> <year> 1995. </year>
Reference-contexts: The latter treatment is consistent with our approach, although it is based on a somewhat different formal model, and is more concerned with understanding the relationship between different architectural styles than with the expressiveness of an architectural formalism for a given system. Rapide <ref> [L + 95] </ref> is a module description language, whose interface model is based on partially ordered event sets and event patterns. Rapide's main advantage is that it can be executed to produce event traces that can be examined for violation of interaction invariants. <p> This is a very common case in architectural connectors, and many descriptive notations specialize their connector descriptions to it (e.g., <ref> [L + 95, YS94] </ref>). As we will see later, however, there are other cases where there may be more complex relationships, involving partial visibility of events or run-time mechanisms (that are not part of the abstract computation) that require a more complex Glue.
Reference: [MK95] <author> J. Magee and J. Kramer. </author> <title> Modelling distributed software architectures. </title> <booktitle> In Proc. of the 1st International Workshop on Architectures for Software Systems. </booktitle> <institution> Carnegie Mellon University Technical Report CMU-CS-95-151, </institution> <month> Apr </month> <year> 1995. </year>
Reference-contexts: We understand that this formalism has been applied to the AEGIS problem. In their work on architectures for distributed systems, Magee and Kramer have used the -calculus to model the dynamic aspects of architectures described in the Darwin language <ref> [MK95] </ref>. Their work can be viewed as a good example of formalization for a particular style (embodied in Darwin) using a semantic model different than the one we use in this paper.
Reference: [MQR95] <author> M. Moriconi, X. Qian, and R. Riemenschneider. </author> <title> Correct architecture refinement. </title> <journal> IEEE Trans. on Software Eng., </journal> <volume> 21(4), </volume> <month> Apr </month> <year> 1995. </year>
Reference-contexts: In their investigations of architectural refinement, Mori-coni and his colleagues have characterized styles as theories in first order predicate logic and with Lamport's TLA Actions <ref> [MQR95] </ref>. The latter treatment is consistent with our approach, although it is based on a somewhat different formal model, and is more concerned with understanding the relationship between different architectural styles than with the expressiveness of an architectural formalism for a given system.
Reference: [S + 94] <editor> M. Shaw et al. </editor> <title> Candidate model problems in software architecture. </title> <note> Draft Publication, </note> <year> 1994. </year>
Reference-contexts: The use of model problems for software architecture is not without precedent. Shaw and her colleagues have devised a set of challenge problems for architectures, including compiler, ATM, KWIC, cruise control, sea buoy, and others <ref> [S + 94] </ref>. This list is an evolving and one and we expect that through efforts like this paper, AEGIS will be added to the list. 3 The AEGIS Problem The problem was first posed by Bob Balzer at an ARPA program meeting in Fall 1994.
Reference: [YS94] <author> D. M. Yellin and R. E. Strom. </author> <title> Interfaces, protocols, and the semi-automatic construction of software adaptors. </title> <booktitle> Proc. of OOPSLA'94, </booktitle> <month> Oct </month> <year> 1994. </year> <month> 10 </month>
Reference-contexts: This is a very common case in architectural connectors, and many descriptive notations specialize their connector descriptions to it (e.g., <ref> [L + 95, YS94] </ref>). As we will see later, however, there are other cases where there may be more complex relationships, involving partial visibility of events or run-time mechanisms (that are not part of the abstract computation) that require a more complex Glue.
References-found: 14

