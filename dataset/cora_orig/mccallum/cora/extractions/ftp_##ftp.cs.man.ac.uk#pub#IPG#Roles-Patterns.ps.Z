URL: ftp://ftp.cs.man.ac.uk/pub/IPG/Roles-Patterns.ps.Z
Refering-URL: http://www.cs.man.ac.uk/ipg/publications.html
Root-URL: http://www.cs.man.ac.uk
Email: E-mails ferei@cs.man.ac.uk brian@cs.man.ac.uk  
Title: Roles Represent Patterns important to understand a pattern before reusing it, a representation method to
Author: Fereidoon Shams Aliee Brian C. Warboys 
Note: Since it is  
Address: Manchester M13 9PL, U.K.  
Affiliation: Department of Computer Science, University of Manchester,  
Abstract: In building process models based on objects, we identify a gap between object capabilities and the process world. To overcome this problem, a level of abstraction, role, above the object level, similar to pattern structure, has been defined. We have represented roles in different levels of abstraction containing CRC cards, for-malised CRC (CRC plus path expressions), Petri nets, and encapsulated structures to provide a pattern representation of roles. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Egil P. Andersen and Trygve Reenskaug. </author> <title> System Design by Composing Structures of Interacting Objects. </title> <booktitle> In ECOOP`92 Proceedings, </booktitle> <year> 1992. </year>
Reference-contexts: It is recognised as a useful method for building structures of communicating objects (roles) in many object-oriented applications <ref> [1, 7, 8, 17, 22] </ref>. CRC definitions are very close to capturing the nature of a role because they have been defined using a responsibility-driven approach rather than a data-driven approach [21]. vocabulary for discussing a design. Responsibilities identify problems to be solved.
Reference: [2] <author> Constantin Arapis. </author> <title> Specifying Object Life-Cycles. </title> <editor> In Ed. Dennis Tsichritzis, editor, </editor> <booktitle> Object Composition, </booktitle> <pages> pages 197-225. </pages> <institution> University de Geneve, </institution> <year> 1990. </year>
Reference-contexts: As defined by Booch [5], a role is the face which an object presents to the world at a given moment or a particular aspect or behaviour which an object 2 OBJECT ROLE plays uses exhibits during a period of time <ref> [2] </ref>. The most important point is the possible relationship between role and object concepts which provides an insight into viewing roles in terms of cooperation amongst different objects to play these roles. Figure 1. represents a many-to-many relationship between the role and the object concepts.
Reference: [3] <author> Kent Beck and Ward Cunningham. </author> <title> A Laboratory For Teaching Object-Oriented Thinking. </title> <booktitle> In OOPSLA`89 Proceedings, </booktitle> <year> 1989. </year>
Reference-contexts: Roles can repeat in different processes (applications) as patterns are expected to and role models represent the structure of processes as patterns generate software architectures [4]. 4 Characterising Roles Class, Responsibilities, Collaborators (CRC) cards were invented by Cunningham in response to a need to document collaborative design decisions <ref> [3] </ref>. It is recognised as a useful method for building structures of communicating objects (roles) in many object-oriented applications [1, 7, 8, 17, 22]. <p> A responsibility serves as a handle for discussing potential solutions. Collaborators will send or be sent messages in the course of satisfying responsibilities. CRC cards have emerged as a simple yet effective way of analyzing scenarios. First proposed by Beck and Cunningham as a tool for teaching object-oriented programming <ref> [3] </ref>, CRC cards have proven to be a useful development tool that facilitates brainstorming and enhances communication amongst developers. Beck and Cunningham suggest driving a design toward completion with the aid of execution scenarios. We can start with only one or two obvious cards and start playing "what-if" scenarios.
Reference: [4] <author> Kent Beck and Ralph Johnson. </author> <title> Patterns Generate Architectures. </title> <booktitle> In ECOOP'94 Proceedings, </booktitle> <year> 1994. </year>
Reference-contexts: Roles can repeat in different processes (applications) as patterns are expected to and role models represent the structure of processes as patterns generate software architectures <ref> [4] </ref>. 4 Characterising Roles Class, Responsibilities, Collaborators (CRC) cards were invented by Cunningham in response to a need to document collaborative design decisions [3]. It is recognised as a useful method for building structures of communicating objects (roles) in many object-oriented applications [1, 7, 8, 17, 22].
Reference: [5] <author> Grady Booch. </author> <title> Object-Oriented Analysis and Design with Applications. </title> <publisher> The Ben-jamin/Cummings Publishing Company Second Edition, </publisher> <year> 1994. </year>
Reference-contexts: Recently, the importance of providing a framework of collaborating objects to improve reusability has been recognised by many experts in the object-oriented design field. Frameworks [13], patterns [11], collaborating graphs [22], role teams [6], mechanisms <ref> [5] </ref>, 1 contracts [12], role models [17] are some examples of such efforts. The main focus has been to identify, capture, and use an abstraction level above the concept of object to provide a better representation of software architecture which consequently can improve the quality of software design. <p> Such an agent needs to interact with other roles, to assist in part of a process. From an object perspective, roles prescribe the way we need to use objects to approach the system's goal. As defined by Booch <ref> [5] </ref>, a role is the face which an object presents to the world at a given moment or a particular aspect or behaviour which an object 2 OBJECT ROLE plays uses exhibits during a period of time [2].
Reference: [6] <author> R.J.A. Buhr and R.S. Casselman. </author> <title> Timethread-Role Maps for Object-Oriented design of Real-Time and Distributed Systems. </title> <booktitle> In OOPSLA' 94 Proceedings, </booktitle> <year> 1994. </year>
Reference-contexts: We observed that by defining a level of abstraction above the object level we can remedy this situation. Moreover, we noted that there is a general problem in designing many other object-oriented applications in that is the need to identify another level to improve reusability and facilitate design <ref> [13, 12, 6, 21, 17] </ref>. This problem can be addressed by defining a new level of abstraction, above the basic object concept level, for modelling a group of objects which cooperate with each other to accomplish a task as a process component. <p> Recently, the importance of providing a framework of collaborating objects to improve reusability has been recognised by many experts in the object-oriented design field. Frameworks [13], patterns [11], collaborating graphs [22], role teams <ref> [6] </ref>, mechanisms [5], 1 contracts [12], role models [17] are some examples of such efforts. The main focus has been to identify, capture, and use an abstraction level above the concept of object to provide a better representation of software architecture which consequently can improve the quality of software design.
Reference: [7] <author> Frank Buschmann. </author> <title> Rational Architecture for Object-Oriented Software Systems. </title> <type> JOOP, </type> <month> September </month> <year> 1993. </year> <month> 10 </month>
Reference-contexts: It is recognised as a useful method for building structures of communicating objects (roles) in many object-oriented applications <ref> [1, 7, 8, 17, 22] </ref>. CRC definitions are very close to capturing the nature of a role because they have been defined using a responsibility-driven approach rather than a data-driven approach [21]. vocabulary for discussing a design. Responsibilities identify problems to be solved.
Reference: [8] <author> B. G. Cain and J. O. Coplien. </author> <title> A Role-Based Empirical Process Modelling Environ--ment. </title> <booktitle> In ICSP2, </booktitle> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: It is recognised as a useful method for building structures of communicating objects (roles) in many object-oriented applications <ref> [1, 7, 8, 17, 22] </ref>. CRC definitions are very close to capturing the nature of a role because they have been defined using a responsibility-driven approach rather than a data-driven approach [21]. vocabulary for discussing a design. Responsibilities identify problems to be solved. <p> Since objects in such a representation have responsibilities, these type of classes can capture a role class which is more functionally oriented than objects. As expressed in 4 Class Name Responsibilities Collaborators <ref> [8] </ref>, the basic abstraction in the process model is role, a longstanding, stable locus of associated responsibilities in a process.
Reference: [9] <author> R. H. Campbell and A. N. Habermann. </author> <title> The Specification of Process Synchronization by Path Expressions. </title> <booktitle> In Lecture Notes in Computer Science, </booktitle> <volume> volume 16. </volume> <publisher> Springer Verlag, </publisher> <year> 1974. </year>
Reference-contexts: This approach is based on constraining the order of responsibilities within a CRC card. Path expressions <ref> [9] </ref>, which originally have been derived from regular expressions to represent primitive operations such as sequence (a ; b), selection (a , b), and iteration a + or a fl , can be added to every CRC card to define a clear sequence of execution amongst responsibilities.
Reference: [10] <author> Ronald S. Casselman. </author> <title> A Role-Based Architecture Model Applied to Object-Oriented Systems. </title> <type> Master's thesis, </type> <institution> Department of Systems and Computer Engineering, Car-leton University, </institution> <year> 1993. </year>
Reference-contexts: Therefore, role modelling is now associated with the concept of collaborating objects to provide a high level abstraction to improve the application of object-oriented modelling <ref> [17, 10] </ref>. Designing patterns has also such an intention and we have found many similarities between the notion that we have defined as the abstraction level above objects and the notion of pattern. Most of the suggested pattern definitions are based on traditional class relationships.
Reference: [11] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Abstraction and Reuse of Object-Oriented Design. </title> <booktitle> In ECOOP '93 Proceedings, </booktitle> <year> 1993. </year>
Reference-contexts: Recently, the importance of providing a framework of collaborating objects to improve reusability has been recognised by many experts in the object-oriented design field. Frameworks [13], patterns <ref> [11] </ref>, collaborating graphs [22], role teams [6], mechanisms [5], 1 contracts [12], role models [17] are some examples of such efforts.
Reference: [12] <author> Richard Helm, Ian M. Holland, and Dipayan Gangopadhyay. </author> <title> Contracts: Specifying Behavioral Compositions in Object-Oriented Systems. </title> <booktitle> In ECOOP/OOPSLA '90 Proceedings, </booktitle> <year> 1990. </year>
Reference-contexts: We observed that by defining a level of abstraction above the object level we can remedy this situation. Moreover, we noted that there is a general problem in designing many other object-oriented applications in that is the need to identify another level to improve reusability and facilitate design <ref> [13, 12, 6, 21, 17] </ref>. This problem can be addressed by defining a new level of abstraction, above the basic object concept level, for modelling a group of objects which cooperate with each other to accomplish a task as a process component. <p> Recently, the importance of providing a framework of collaborating objects to improve reusability has been recognised by many experts in the object-oriented design field. Frameworks [13], patterns [11], collaborating graphs [22], role teams [6], mechanisms [5], 1 contracts <ref> [12] </ref>, role models [17] are some examples of such efforts. The main focus has been to identify, capture, and use an abstraction level above the concept of object to provide a better representation of software architecture which consequently can improve the quality of software design.
Reference: [13] <author> Ralph E. Johnson. </author> <title> Documenting Frameworks using Patterns. </title> <booktitle> In OOPSLA '92 Proceedings, </booktitle> <year> 1992. </year>
Reference-contexts: We observed that by defining a level of abstraction above the object level we can remedy this situation. Moreover, we noted that there is a general problem in designing many other object-oriented applications in that is the need to identify another level to improve reusability and facilitate design <ref> [13, 12, 6, 21, 17] </ref>. This problem can be addressed by defining a new level of abstraction, above the basic object concept level, for modelling a group of objects which cooperate with each other to accomplish a task as a process component. <p> Recently, the importance of providing a framework of collaborating objects to improve reusability has been recognised by many experts in the object-oriented design field. Frameworks <ref> [13] </ref>, patterns [11], collaborating graphs [22], role teams [6], mechanisms [5], 1 contracts [12], role models [17] are some examples of such efforts.
Reference: [14] <author> M. Kellner, P. Feiler, A. Finkelstein, T. Katayama, L. Osterweil, M. Penedo, and H.D.Rombach. </author> <title> ISPW-6 Software Process Example. </title> <booktitle> In Proceedings of the First International Conference on Software Process, </booktitle> <address> Washington, 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: [15] <author> Doug Lea. </author> <title> Roles Before Objects. </title> <type> Technical Report uncompleted, </type> <institution> Computer Science Department, State University of New York at Oswege, </institution> <year> 1995. </year>
Reference-contexts: Viewing roles before objects is the way to develop a high level design without committing to the existence of particular objects and the classes that support them <ref> [15] </ref>.
Reference: [16] <author> L.J. Osterweil. </author> <title> Software Processes are Software too. </title> <booktitle> In Proceedings of the 9th International Conference on Software Engineering, </booktitle> <address> Monterey, </address> <year> 1987. </year>
Reference-contexts: When exploiting objects for this purpose, we have treated process models like other software application domains. The reason perhaps is the adoption of the idea that software processes are software too <ref> [16] </ref>, and of similarities between designing software and designing process models. Such models basically represent the behaviour of different objects involved in the process.
Reference: [17] <author> Trygve Reenskauge and etal. OORASS: </author> <title> Seamless Support for the Creation and Maintenance of Object-Oriented Systems. </title> <type> JOOP, </type> <month> October </month> <year> 1992. </year>
Reference-contexts: We observed that by defining a level of abstraction above the object level we can remedy this situation. Moreover, we noted that there is a general problem in designing many other object-oriented applications in that is the need to identify another level to improve reusability and facilitate design <ref> [13, 12, 6, 21, 17] </ref>. This problem can be addressed by defining a new level of abstraction, above the basic object concept level, for modelling a group of objects which cooperate with each other to accomplish a task as a process component. <p> Recently, the importance of providing a framework of collaborating objects to improve reusability has been recognised by many experts in the object-oriented design field. Frameworks [13], patterns [11], collaborating graphs [22], role teams [6], mechanisms [5], 1 contracts [12], role models <ref> [17] </ref> are some examples of such efforts. The main focus has been to identify, capture, and use an abstraction level above the concept of object to provide a better representation of software architecture which consequently can improve the quality of software design. <p> Therefore, role modelling is now associated with the concept of collaborating objects to provide a high level abstraction to improve the application of object-oriented modelling <ref> [17, 10] </ref>. Designing patterns has also such an intention and we have found many similarities between the notion that we have defined as the abstraction level above objects and the notion of pattern. Most of the suggested pattern definitions are based on traditional class relationships. <p> It is recognised as a useful method for building structures of communicating objects (roles) in many object-oriented applications <ref> [1, 7, 8, 17, 22] </ref>. CRC definitions are very close to capturing the nature of a role because they have been defined using a responsibility-driven approach rather than a data-driven approach [21]. vocabulary for discussing a design. Responsibilities identify problems to be solved.
Reference: [18] <author> Baldev Singh and Gail L. Rein. </author> <title> Role Interaction Nets (RINs): A Process Description Formalism. </title> <type> Technical Report CT-083-92, </type> <institution> MCC, </institution> <year> 1992. </year>
Reference-contexts: Finally, a representation method which covers different levels of abstraction and which is suitable for encapsulating patterns in terms of roles is specified. 2 Roles and Objects Role definition is basically concerned with role theory as used for organisational coordination. Here, roles are the building blocks of organisational structures <ref> [18] </ref>. The role concept has been used slightly differently in different contexts although basically with the same root meaning. In process modelling a role is a list of responsibilities assigned to an agent to be followed in a specific order.
Reference: [19] <author> B.C. Warboys. </author> <title> The IPSE 2.5 Project: Process Modelling as a basis for a support environment. </title> <booktitle> In Proceedings of the First International Conference on Software Development, Environments, and Factories, </booktitle> <address> Berlin, </address> <year> 1989. </year>
Reference-contexts: Further in playing a role such as librarian, a person object, a book class object, a file object, and other objects can be used. In designing process models, roles are the basic building blocks of processes <ref> [19] </ref>. In contrast with other software applications, role can be seen as a small application module reusable in different processes. Instances of roles in a software process are project manager, design engineer, and QA engineer.
Reference: [20] <author> Roel Wiernga and Wiebren de Jonge. </author> <title> The Identification of Objects and Roles. </title> <type> Technical Report TR-267, </type> <institution> Faculty of Mathematics and Computer Science, Vrije University, </institution> <year> 1993. </year>
Reference-contexts: For example, depending on the level of detail that we wish to model, some objects which cooperate in the playing of the project manager's role are project manager as a person object, documents, files, E-mail tool, and so on. In <ref> [20] </ref> a precise distinction between role and object concepts has been made and some good examples were provided to identify the differences between these concepts.
Reference: [21] <author> Rebecca J. Wirfs-Brock and Brian Wilkerson. </author> <title> Object-Oriented Design: </title> <booktitle> A Responsibility-Driven Approach . In OOPSLA'89 Proceedings, </booktitle> <year> 1989. </year>
Reference-contexts: We observed that by defining a level of abstraction above the object level we can remedy this situation. Moreover, we noted that there is a general problem in designing many other object-oriented applications in that is the need to identify another level to improve reusability and facilitate design <ref> [13, 12, 6, 21, 17] </ref>. This problem can be addressed by defining a new level of abstraction, above the basic object concept level, for modelling a group of objects which cooperate with each other to accomplish a task as a process component. <p> It is recognised as a useful method for building structures of communicating objects (roles) in many object-oriented applications [1, 7, 8, 17, 22]. CRC definitions are very close to capturing the nature of a role because they have been defined using a responsibility-driven approach rather than a data-driven approach <ref> [21] </ref>. vocabulary for discussing a design. Responsibilities identify problems to be solved. The solutions will exist in many versions and refinements. A responsibility serves as a handle for discussing potential solutions. Collaborators will send or be sent messages in the course of satisfying responsibilities.
Reference: [22] <author> Rebecca J. Wirfs-Brock, Brian Wilkerson, and Lauren Wiener. </author> <title> Designing Object-Oriented Software. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year> <note> 11 8 Appendix </note> : 
Reference-contexts: Recently, the importance of providing a framework of collaborating objects to improve reusability has been recognised by many experts in the object-oriented design field. Frameworks [13], patterns [11], collaborating graphs <ref> [22] </ref>, role teams [6], mechanisms [5], 1 contracts [12], role models [17] are some examples of such efforts. <p> It is recognised as a useful method for building structures of communicating objects (roles) in many object-oriented applications <ref> [1, 7, 8, 17, 22] </ref>. CRC definitions are very close to capturing the nature of a role because they have been defined using a responsibility-driven approach rather than a data-driven approach [21]. vocabulary for discussing a design. Responsibilities identify problems to be solved.
References-found: 22

