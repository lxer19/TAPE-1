URL: ftp://ftp.ifad.dk/pub/papers/sosl.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Phone: DK 5230  
Title: Towards Proof Rules for Looseness in Explicit Definitions from VDM-SL  
Author: Peter Gorm Larsen 
Address: Forskerparken 10  Denmark  
Affiliation: The Institute of Applied Computer Science  Odense M  
Abstract: The model-oriented formal method called VDM contains a specification language called VDM-SL. This language existed in a number of different dialects, but now a standard for the language has been prepared, including a dynamic semantics defined from a model-theoretic point of view. Thus, it is not at all clear that the defined semantics is appropriate for deriving proof rules which reflect the semantics. This paper focus on the possible ways of defining proof rules which reflect the semantics of explicit definitions which contain looseness. The model-theoretic view which has been chosen for the definition of the semantics for VDM-SL, incorporates looseness by denoting the semantics of a (loose) specification as a set of models. The proof system should be designed such that properties which can be proved about a given specification should hold for all its models. This paper shows why it is an interesting challenge to develop a proof system which are able to do this.
Abstract-found: 1
Intro-found: 1
Reference: [Bicarregui&93] <author> Juan Bicarregui, John Fitzgerald, Peter Lindsay, Richard Moore and Brian Ritchie. </author> <title> Proof in VDM: A Practitioner's Guide. </title> <publisher> Springer-Verlag, </publisher> <month> December </month> <year> 1993. </year>
Reference-contexts: However, the implementation relation and the proof rules have not yet been formulated for the entire standard VDM-SL language. Work on the provision of a basic proof theory for reasoning about specifications and developments in VDM has been done by researchers in the UK and Australia (to appear in <ref> [Bicarregui&93] </ref> and in [Fitzgerald&93]). The extension of this to give a proof theory for the full standard language VDM-SL is an area of the author's research.
Reference: [Bruun&91] <author> Hans Bruun, Flemming Damm and Bo Stig Hansen. </author> <title> An Approach to the Static Semantics of VDM-SL. In VDM '91: Formal Software Development Methods, VDM Europe, </title> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: present. 11 The existence of a single value satisfying a given predicate can be expressed as a singleton set. 12 Alternatively we could have used the subtype notation from [Jones&91] (which we have used so far) or the domain notation from the domain universe. 13 Here the "possibly well-formedness" (see <ref> [Bruun&91] </ref>) check will be performed on the defexpr to derive its possible type. This derived type is then used to derive the type of the individual pattern identifiers which is inferred to be used here.
Reference: [Dijkstra&90] <author> Edsger W. Dijkstra, Carel S. Scholten. </author> <title> Predicate Calculus and Program Semantics, </title> <booktitle> chapter 4, </booktitle> <pages> pages 21-29. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: 0 )g (POS;[mk-(n 0 ;m 0 )]) 6=4 " 2 fn 0 + m 0 g setcomp-sin-lem (5=4) infer h (mk-(n 0 ; m 0 )) = n 0 + m 0 "-E (1,6=4) Notice that the proof is displayed in the `natural deduction' style except that a simplification resembling <ref> [Dijkstra&90] </ref> is used.
Reference: [Fitzgerald&93] <author> John Fitzgerald and Richard Moore. </author> <title> Experiences in Developing a Proof Theory for VDM Specifications. </title> <booktitle> In Proceedings of the International Workshop on Semantics of Specification Languages, </booktitle> <address> Utrect, October 1993, </address> <publisher> Springer Verlag, </publisher> <year> 1994. </year> <pages> 17 pages. </pages>
Reference-contexts: Work on the provision of a basic proof theory for reasoning about specifications and developments in VDM has been done by researchers in the UK and Australia (to appear in [Bicarregui&93] and in <ref> [Fitzgerald&93] </ref>). The extension of this to give a proof theory for the full standard language VDM-SL is an area of the author's research. This paper will focus on one aspect: proof rules for explicit definitions. 1 It is natural that implicit function and operation definitions can contain looseness.
Reference: [Fitzgerald93] <author> John Fitzgerald. </author> <title> Private Communication. </title> <month> March </month> <year> 1993. </year>
Reference-contexts: Finally the third rule says that if two choice values have disjoint predicates these choice values will be different in all models. 8 In <ref> [Fitzgerald93] </ref> it is shown that these rules follow from a version of the ""-def" and the "-form" which are extended with tags 9 The existential quantification assumption is needed because a loose value must at least have one possibility to choose from.
Reference: [Hayes93] <author> Ian Hayes. </author> <title> Private Communication. </title> <month> June </month> <year> 1993. </year>
Reference-contexts: Thus, the problems dealt with in this paper does not appear in RSL. This kind of looseness is also avoided in Z <ref> [Hayes93] </ref>. To sum up, we can say that, since explicit expressions in VDM-SL can be loose, we need to investigate how this can be reflected in the proof rules for VDM-SL. In this paper we will present different ways of treating such looseness and indicate their limitations.
Reference: [Jones&91] <author> Cliff Jones, Kevin Jones, Peter Linsay and Richard Moore, </author> <title> editors. mural: A Formal Development Support System. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year> <pages> 421 pages. </pages>
Reference-contexts: When such an expression is used in a specification it can be translated into: letbe-def 1 9 x : A P (x ) Here the usual choice operator from first order logic is used. In <ref> [Jones&91] </ref> two extra axioms are defined for the choice operator: "-def P ("x : A P (x )) "-form 9 x : A P (x ) As a consequence of the ""-form" and the "=-self-I" rule 4 the following can be proved:. "-deterministic 9 x : A P (x ) However, <p> However, at this point we abstract away from this because the let-be-such-that expressions used in <ref> [Jones&91] </ref> always are typed in this way. g : () ! N let x : N be st x 2 f1; 2g in x With the three proof rules defined above and a rule for function unfolding it is possible to derive for instance that f () = g () which <p> terms this simply correspond to the carrier sets of domains from the domain universe of VDM-SL where an ordering also is present. 11 The existence of a single value satisfying a given predicate can be expressed as a singleton set. 12 Alternatively we could have used the subtype notation from <ref> [Jones&91] </ref> (which we have used so far) or the domain notation from the domain universe. 13 Here the "possibly well-formedness" (see [Bruun&91]) check will be performed on the defexpr to derive its possible type.
Reference: [Kneuper89] <author> Ralf Kneuper. </author> <title> Symbolic Execution as a Tool for Validation of Specifications. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Univeristy of Manchester, </institution> <year> 1989. </year> <pages> 154 pages. </pages> <note> Technical Report Series UMCS-89-7-1. </note>
Reference-contexts: Possibly one could even let the expression be so general that it simply was symbolically executed. However, as the results of <ref> [Kneuper89] </ref> also show it is very difficult to reduce the produced symbolic expressions. 7 Turning an explicit definition into an implicit one Another approach which one also might attempt is to transform an explicit definition into an implicit one which is semantically equivalent.
Reference: [Larsen&89] <author> Peter Gorm Larsen, Michael Meincke Arentoft, Brian Monahan and Stephen Bear. </author> <title> Towards a Formal Semantics of The BSI/VDM Specification Language. </title> <editor> In Ritter, editor, </editor> <booktitle> Information Processing 89, </booktitle> <pages> pages 95-100, </pages> <publisher> IFIP, North-Holland, </publisher> <year> 1989. </year>
Reference-contexts: This paper will focus on one aspect: proof rules for explicit definitions. 1 It is natural that implicit function and operation definitions can contain looseness. However, in VDM-SL it is also possible to let explicit function and operation definitions be loosely specified (see e.g. <ref> [Larsen&89] </ref>, and [Larsen92]). In some other specification languages, e.g. VVSL [Middelburg90], this is disallowed. It is a matter of taste whether one wishes to include such a style of specification in a language.
Reference: [Larsen&91] <author> Peter Gorm Larsen and Poul Btgh Lassen. </author> <title> An Executable Subset of Meta-IV with Loose Specification. In VDM '91: Formal Software Development Methods, VDM Europe, </title> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: The advantage 15 See <ref> [Larsen&91] </ref>, or [Lassen93]. about the implicit function definitions is that it simply describes the intended relationship between input and output. Thus, when looseness is present it will not be possible to say explicitly what the output will be, but simply what it will fulfill.
Reference: [Larsen92] <author> Peter Gorm Larsen. </author> <title> The Dynamic Semantics of the VDM Specification Language. </title> <type> Technical Report, </type> <institution> The Institute of Applied Computer Science, </institution> <month> July </month> <year> 1992. </year> <pages> 177 pages. </pages>
Reference-contexts: This paper will focus on one aspect: proof rules for explicit definitions. 1 It is natural that implicit function and operation definitions can contain looseness. However, in VDM-SL it is also possible to let explicit function and operation definitions be loosely specified (see e.g. [Larsen&89], and <ref> [Larsen92] </ref>). In some other specification languages, e.g. VVSL [Middelburg90], this is disallowed. It is a matter of taste whether one wishes to include such a style of specification in a language. However, we think that it is important to investigate the consequences of such a decision in the proof rules. <p> At first sight this may not correspond to ones intuition but considering the unique existential quantification it becomes clear that this is the most natural solution (see the example in the section about quantifiers in <ref> [Larsen92] </ref>). 5.6 Combining looseness Having defined skeletons for expressions which can introduce explicit looseness it becomes interesting to investigate whether it is possible to define proof rules which enables one to combine expressions which contain looseness. Thereby one can achieve a "-calculus which can be used to manipulate loose values. <p> This function will be quite similar to the EvalPattern from <ref> [Larsen92] </ref> and to the PatternMatch function from [Lassen&91]. This function must also have access to the environment which currently is in context. However, as it is visible in [Larsen92] PatternMatch may in general yield an infinite set of possible bindings. <p> This function will be quite similar to the EvalPattern from <ref> [Larsen92] </ref> and to the PatternMatch function from [Lassen&91]. This function must also have access to the environment which currently is in context. However, as it is visible in [Larsen92] PatternMatch may in general yield an infinite set of possible bindings. Thus, if one wanted to support such an approach with a tool it would probably be necessary to restrict its use to an executable subset (like the one used by the IFAD VDM-SL interpreter 15 ).
Reference: [Lassen&91] <author> Poul Btgh Lassen, Kees de Bruin and Peter Gorm Larsen. </author> <title> The Dynamic Semantics of IFAD VDM-SL. </title> <month> June </month> <year> 1993. </year> <title> Internal document (IFAD) </title>
Reference-contexts: This function will be quite similar to the EvalPattern from [Larsen92] and to the PatternMatch function from <ref> [Lassen&91] </ref>. This function must also have access to the environment which currently is in context. However, as it is visible in [Larsen92] PatternMatch may in general yield an infinite set of possible bindings.
Reference: [Lassen93] <editor> Poul Btgh Lassen. IFAD VDM-SL Toolbox. In J.C.P. Woodcock and P.G. Larsen, editors, FME'93: </editor> <title> Industrial-Strength Formal Methods, page 681, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin Heidelberg, </address> <month> April </month> <year> 1993. </year> <pages> 1 page. </pages>
Reference-contexts: The advantage 15 See [Larsen&91], or <ref> [Lassen93] </ref>. about the implicit function definitions is that it simply describes the intended relationship between input and output. Thus, when looseness is present it will not be possible to say explicitly what the output will be, but simply what it will fulfill.
Reference: [Middelburg90] <author> Kees Middelburg. </author> <title> Syntax and Semantics of VVSL A Lan--guage for Structured VDM Specifications. </title> <type> PhD thesis, </type> <institution> University of Amster-dam, </institution> <year> 1989. </year> <pages> 395 pages. </pages>
Reference-contexts: However, in VDM-SL it is also possible to let explicit function and operation definitions be loosely specified (see e.g. [Larsen&89], and [Larsen92]). In some other specification languages, e.g. VVSL <ref> [Middelburg90] </ref>, this is disallowed. It is a matter of taste whether one wishes to include such a style of specification in a language. However, we think that it is important to investigate the consequences of such a decision in the proof rules.
Reference: [RAISE94] <author> Chris George and Stren Prehn. </author> <title> The RAISE Justification Handbook. The BCS Practitioners Series, </title> <note> To be published by Prentice-Hall, </note> <year> 1994. </year> <pages> 205 pages. </pages>
Reference-contexts: VVSL [Middelburg90], this is disallowed. It is a matter of taste whether one wishes to include such a style of specification in a language. However, we think that it is important to investigate the consequences of such a decision in the proof rules. In RSL <ref> [RAISE94] </ref>, looseness in explicit definitions is interpreted as nondeterminism and not as un-derdetermined which is done inside functions in VDM-SL 1 .
Reference: [Wieth89] <author> Morten Wieth. </author> <title> Loose Specification and its Semantics. </title> <editor> In G.X. Ritter, editor, </editor> <booktitle> Information Processing 89, </booktitle> <pages> pages 1115-1120, </pages> <publisher> IFIP, North-Holland, </publisher> <month> August </month> <year> 1989. </year>
Reference-contexts: to most problems, because two loose expression can be proved to be equal 1 The distinction between these is further described in Section 2. 2 In the literature `underdeterminedness' has also been called `under-specification'. 3 The complexity of the semantics with an arbitrary combination of loose specification is given in <ref> [Wieth89] </ref>. under certain conditions. Two loose expressions which are interpreted in a nondeterministic way can never be proved to be equal.
References-found: 16

