URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1995/1995-37.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: fhansb,babetteg@cs.ruu.nl  
Title: Reduction Algorithms for Graphs with Small Treewidth  
Author: Hans L. Bodlaender and Babette de Fluiter 
Address: P.O. Box 80.089, 3508 TB Utrecht, the Netherlands  
Affiliation: Department of Computer Science, Utrecht University  
Abstract: This paper presents some new ideas and results on graph reduction applied to graphs with bounded treewidth. Arnborg et al. [2] have shown that many decision problems on graphs can be solved in linear time on graphs with bounded treewidth, by using a finite set of reduction rules. We show that this method can also be used to solve the construction variants of many of these problems, and to solve a number of optimization problems, and to solve construction variants of many of these optimization problems. For example, the construction variants of decision problems that are definable in monadic second order logic can be solved in this way. Examples of optimization problems that can be solved in this way are INDEPENDENT SET, INDUCED BOUNDED DEGREE SUBGRAPH, PARTITION INTO CLIQUES and HAMILTONIAN COMPLETION NUMBER. We also show that the results of [6] can be applied to these reduction algorithms, which results in parallel algorithms that use O(n) operations and O(log n log fl n) time on an EREW PRAM, or O(log n) time on a CRCW PRAM (where n is the number of vertices of the graph).
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. R. Abrahamson and M. R. Fellows. </author> <title> Finite automata, bounded treewidth and well-quasiordering. </title> <booktitle> In Proceedings of the AMS Summer Workshop on Graph Minors, Graph Structure Theory, Contemporary Mathematics vol. </booktitle> <volume> 147, </volume> <pages> pages 539-564. </pages> <publisher> American Mathematical Society, </publisher> <year> 1993. </year>
Reference-contexts: Moreover, this algorithm is of a special, well described structure. See e.g. <ref> [1] </ref>. Note that a reduction rule (H 1 ; H 2 ) 2 R is safe for a property P if and only if H 1 ~ P;l H 2 (if H 1 and H 2 are l-terminal graphs).
Reference: [2] <author> S. Arnborg, B. Courcelle, A. Proskurowski, and D. Seese. </author> <title> An algebraic theory of graph reduction. </title> <journal> J. ACM, </journal> <volume> 40 </volume> <pages> 1134-1164, </pages> <year> 1993. </year>
Reference-contexts: A graph property P is a function which assigns to each graph the value true or false. Arn-borg et al. <ref> [2] </ref> have shown that for each graph property P which is of `finite index', and each constant k, there exists a finite, complete, safe, and decreasing set of reduction rules for graphs with treewidth at most k. <p> The algorithm of Bodlaender and Hagerup [6] can be simulated on one processor to get a sequential linear time algorithm which uses linear memory. In this paper, we extend the results of Arnborg et al. <ref> [2] </ref> in two ways. * We discuss a method to solve in many cases not only decision problems (i.e. properties) on graphs with bounded treewidth, but also the construction variants of these problems. <p> If the resulting graph belongs to the finite set fG j P (G) ^ :9G 0 : G R ! G 0 g, then P holds on the input graph, otherwise it does not. In <ref> [2] </ref> it has been shown how, when the set is decreasing, this algorithm can be implemented such that it takes linear time and polynomial space. 4 Def inition 2.6. For a graph property P the equivalence relation ~ P;l on l-terminal graphs, is defined as follows. <p> Note that a terminal graph G 1 that is returned has at most k+1 terminals, is open and connected, and has at least r + 1 and at most 2 (r + 1)(k + 1) vertices. 2 6 The following theorem has been proved in a slightly different form in <ref> [2] </ref>, but we give a proof which may be somewhat easier to follow. Theorem 2.1. Let k 1 be a constant, P a graph property, and suppose P is of finite index. There exists a finite, safe, complete and decreasing set of reduction rules R for P k . <p> For each l, let ~ l be an effectively decidable equivalence relation on l-terminal graphs that is a refinement of ~ P;l and has a finite number of equivalence classes. Arnborg et al. <ref> [2] </ref> give a way to construct, for a given integer m, a representative of each equivalence class of ~ l (0 l m + 1) which contains a graph for which there exists a tree decomposition of width m with all terminals in the same node. <p> Use the result from <ref> [2] </ref> to generate a representative for each equivalence class of ~ 0 k;l (for each l 2k + 1) which contains a graph for which there is a tree decomposition of width 2k + 1 with all terminals in one node. <p> If an H 0 is found, then add the reduction rule (H; H 0 ) to an initially empty set of reduction rules R. 2 The open and connectedness properties of the reduction rules in Theorem 2.1 are not needed for the algorithm of Arnborg et al <ref> [2] </ref>, but they are used for the parallel algorithm of Bodlaender and Hagerup [6], see also Section 6. As each right-hand-side of a rule in R is open, applying a rule in R can never give multiple edges between a pair of vertices. <p> which R (H G) = R (H 0 G) + i for each G, then we can again turn each of these rules (H; H 0 ) in a reduction-counter rule ((H; H 0 ); i) with i defined as above. 2 Note that the algorithm of Arnborg et al. <ref> [2] </ref> can easily be adapted to solve a graph optimization problem with a finite, safe, complete and decreasing set of reduction-counter rules. <p> for all p 1, MAXIMUM CUT on graphs with bounded degree, PARTITION INTO CLIQUES, HAMILTONIAN PATH COMPLETION NUMBER, and MAXIMUM LEAF SPANNING TREE when restricted to graphs of bounded treewidth. 7 Conclusions and Further Research In this paper, we have shown that reduction algorithms as introduced by Arnborg et al. <ref> [2] </ref> can not only be used to decide whether a graph property holds for a given graph with bounded treewidth, but in many cases, they can also be used to give a solution if one exists, to solve optimization problems on graphs with bounded treewidth, and to construct optimal solutions for
Reference: [3] <author> S. Arnborg, J. Lagergren, and D. Seese. </author> <title> Easy problems for tree-decomposable graphs. </title> <journal> J. Algorithms, </journal> <volume> 12 </volume> <pages> 308-340, </pages> <year> 1991. </year>
Reference-contexts: It appears that many important graph properties are of finite index. For instance, all properties that can be formulated in monadic second order logic, i.e. that are MS-definable, are of finite index (for a definition, see e.g. <ref> [3] </ref>). These include HAMILTONIAN CIRCUIT, k COLORABILITY (for fixed k), and many others. An equivalence relation ~ 0 is a refinement of an equivalence relation ~ if each equivalence class of ~ 0 is a subset of an equivalence class of ~. <p> Lemma 2.1. If P is of finite index, then P k is of finite index for each k 1. Proof. The property T W k is of finite index, for each k 1, since it is MS-definable (see e.g. <ref> [3] </ref>). For each l, let ~ l be the equivalence relation on l-terminal graphs which is defined as follows. <p> This completes the proof. 2 13 As an important special case, we consider the graph properties that are MS-definable (see e.g. [9] or <ref> [3] </ref>). Let k 1.
Reference: [4] <author> H. L. Bodlaender. </author> <title> A tourist guide through treewidth. </title> <journal> Acta Cybernetica, </journal> <volume> 11 </volume> <pages> 1-23, </pages> <year> 1993. </year>
Reference-contexts: Moreover, if ~ l is effectively decidable, then such a set R can effectively be constructed. More background information about graph reduction and graphs of bounded treewidth can be found in <ref> [4, 8] </ref>. 8 3 Constructing Solutions Many graph properties are of the form P (G) = 9 S2D (G) Q (G; S), where D (G) is a solution domain (or shortly domain), which is some set depending on G, and Q is a property of G and S, i.e.
Reference: [5] <author> H. L. Bodlaender. </author> <title> On reduction algorithms for graphs with small treewidth. </title> <booktitle> In Proceedings 19th International Workshop on Graph-Theoretic Concepts in Computer Science WG'93, </booktitle> <pages> pages 45-56, </pages> <year> 1994. </year>
Reference-contexts: Some results of this paper have appeared in <ref> [5] </ref>. 1 and only if P (G) holds and the treewidth of G is at most k. The set of finite index graph proper-ties includes many interesting properties, including all graph properties expressible in monadic second order logic.
Reference: [6] <author> H. L. Bodlaender and T. Hagerup. </author> <title> Parallel algorithms with optimal speedup for bounded treewidth. </title> <editor> In Z. F ul op and F. G ecseg, editors, </editor> <booktitle> Proceedings 22nd International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 268-279, </pages> <address> Berlin, </address> <year> 1995. </year> <note> Springer-Verlag, Lecture Notes in Computer Science 944. </note>
Reference-contexts: It should be noted that these algorithms use more than linear memory. The algorithm does not depend on the structure of the reduction rules: it can be applied for all sets of reduction rules that are finite, safe, complete and decreasing. Bodlaender and Hagerup <ref> [6] </ref> give parallel algorithms based on finite, safe, complete and decreasing sets of reduction rules. <p> The algorithm of Bodlaender and Hagerup <ref> [6] </ref> can be simulated on one processor to get a sequential linear time algorithm which uses linear memory. <p> We also show that a combination of these two results is possible: the construction variants of several graph optimization problems of graphs can be solved using graph reduction algorithms on graphs with bounded treewidth. Furthermore, we show that the parallel algorithm of Bodlaender and Hagerup <ref> [6] </ref> can be applied to our results. This paper is organized as follows. In Section 2, some definitions and preliminary results are given. In Section 3, a method to use reduction algorithms for the construction variants of decision problems is discussed. <p> rule (H; H 0 ) to an initially empty set of reduction rules R. 2 The open and connectedness properties of the reduction rules in Theorem 2.1 are not needed for the algorithm of Arnborg et al [2], but they are used for the parallel algorithm of Bodlaender and Hagerup <ref> [6] </ref>, see also Section 6. As each right-hand-side of a rule in R is open, applying a rule in R can never give multiple edges between a pair of vertices. <p> In Section 6 we show that the efficient parallel algorithm of <ref> [6] </ref> can be adapted to solve graph optimization problems with a finite, safe, complete and decreasing set of reduction-counter rules. <p> Proof. We only have to show for each problem that conditions 2 and 3 of Theorem 3.1 hold (in the `effective' way). This can be done straightforwardly. 2 6 Parallel Reduction Algorithms It is possible to combine the results of Sections 2 up to 5 with results from <ref> [6] </ref> to obtain fast parallel algorithms for several problems on graphs with bounded treewidth. A set of applications of reduction (-counter) rules is said to be concurrent, if there is no inner vertex of any subgraph to be rewritten that also occurs in another subgraph to be rewritten. <p> The idea behind concurrent applications of rules is that in a parallel algorithm, all reduction steps from a concurrent set can be carried out simultaneously. This is very useful in order to obtain fast parallel algorithms, based on reduction. We use a result from <ref> [6] </ref> to show that there exists a finite, safe, complete, and decreasing set R of reduction rules for finite index properties P , such that in any graph G of treewidth at most k with more than a constant number of vertices, a set of (n) concurrent reductions can be found. <p> The following lemma is a weaker version of Lemma 5 in <ref> [6] </ref>. 37 Lemma 6.1. [Bodlaender, Hagerup [6]] For all integers k; n min 1, there are integers d; n max 1 and a real c &gt; 0, such that every connected graph G with n &gt; n max vertices and treewidth at most k, with an arbitrary adjacency-list representation, contains at <p> The following lemma is a weaker version of Lemma 5 in <ref> [6] </ref>. 37 Lemma 6.1. [Bodlaender, Hagerup [6]] For all integers k; n min 1, there are integers d; n max 1 and a real c &gt; 0, such that every connected graph G with n &gt; n max vertices and treewidth at most k, with an arbitrary adjacency-list representation, contains at least cn strongly connected subgraphs which <p> Each of these strongly connected subgraphs can be taken as left-hand-side in a rule application (because of its size), and hence the rule applications are concurrent. 2 38 Theorem 6.1 allows us to use the method from <ref> [6] </ref> to obtain fast parallel algorithms, based on graph reduction. <p> For more details, we refer to <ref> [6] </ref>. Moreover, the approach from Section 3 can be used to construct solutions. Reductions are then undone in parallel, in reverse order. By using proper bookkeeping, we can make sure that a reduction is undone by the same processor that carried out the reduction. <p> Thus, we increase the time by not more than a constant factor, and use the same number of processors. We denote the product of the number of processors, and the time used by a parallel algorithm, as the number of operations of the algorithm. The techniques from <ref> [6] </ref>, combined with the results of this paper, give the following results. Theorem 6.2. <p> The reduction algorithms of Arnborg et al. use a linear amount of time, but a polynomial amount of space. We have shown that the techniques from <ref> [6] </ref> can be used to run the reduction algorithms in O (log n log fl n) time on an EREW PRAM with O (n) operations and O (n) 40 space, and in O (log n) time on a CRCW PRAM with O (n) operations and space (n is the num-ber of
Reference: [7] <author> R. B. Borie, R. G. Parker, and C. A. Tovey. </author> <title> Automatic generation of linear-time algorithms from predicate calculus descriptions of problems on recursively constructed graph families. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 555-581, </pages> <year> 1992. </year>
Reference-contexts: If D i (GH) is V (G H) or E (G H), then D [ ];i (G) = D i (G) [ f*g. With this definition of [ ], D is inducible, and jC cmp;l j is finite, for each l 0. Borie et al. <ref> [7] </ref> have shown that for each k 1, there is a homomorphism h, mapping each pair (G; S), where G is an l-terminal graph, l k, and S 2 D [ ] (G), to an element of a finite set A k , such that the following conditions hold. 1.
Reference: [8] <author> B. Courcelle. </author> <title> Graph rewriting: an algebraic and logical approach. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> volume B, </volume> <pages> pages 192-242, </pages> <address> Amsterdam, 1990. </address> <publisher> North Holland Publ. </publisher> <address> Comp. </address>
Reference-contexts: Moreover, if ~ l is effectively decidable, then such a set R can effectively be constructed. More background information about graph reduction and graphs of bounded treewidth can be found in <ref> [4, 8] </ref>. 8 3 Constructing Solutions Many graph properties are of the form P (G) = 9 S2D (G) Q (G; S), where D (G) is a solution domain (or shortly domain), which is some set depending on G, and Q is a property of G and S, i.e.
Reference: [9] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs I: Recognizable sets of finite graphs. </title> <journal> Information and Computation, </journal> <volume> 85 </volume> <pages> 12-75, </pages> <year> 1990. </year> <month> 42 </month>
Reference-contexts: This completes the proof. 2 13 As an important special case, we consider the graph properties that are MS-definable (see e.g. <ref> [9] </ref> or [3]). Let k 1.
Reference: [10] <author> J. Lagergren and S. Arnborg. </author> <title> Finding minimal forbidden minors using a finite congru-ence. </title> <booktitle> In Proceedings of the 18th International Colloquium on Automata, Languages and Programming, </booktitle> <pages> pages 532-543. </pages> <address> Springer Verlag, </address> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 510, </volume> <year> 1991. </year>
Reference-contexts: Furthermore, Lagergren and Arnborg <ref> [10] </ref> give an effectively decidable equivalence relation ~ 0 T W k ;l , which has a finite number of equivalence classes for each k and l, and is a refinement of ~ T W k ;l . This gives us enough ingredients to show how to construct reduction rules.
Reference: [11] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. II. Algorithmic aspects of tree-width. </title> <journal> J. Algorithms, </journal> <volume> 7 </volume> <pages> 309-322, </pages> <year> 1986. </year> <month> 43 </month>
Reference-contexts: Similarly, we say a function is effectively computable if an algorithm is known that computes the function value for a given element of the domain. The notion of treewidth was introduced by Robertson and Seymour <ref> [11] </ref>. Def inition 2.1.
References-found: 11

