URL: http://www.cs.jhu.edu/~kumar/papers/gis.ps
Refering-URL: http://www.cs.jhu.edu/~kumar/
Root-URL: http://www.cs.jhu.edu
Title: A Prototype Astronomical Database  
Author: Kumar Ramaiyer Robert Brunner Alex Szalay Andy Connolly Robert Lupton 
Abstract: In preparation for the Sloan Digital Sky Survey (SDSS), a multi-color digital mapping of the northern sky, we have developed a prototype system using simulated astronomical data. The system uses an object-oriented database to store the data, a client-server model for data communication, and supports different types of geometric queries. The prototype system provides a simple and easy-to-use graphical interface, and has excellent response times for all the geometric queries. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Arya, D.M. Mount, N.S. Netanyahu, R. Silverman, A. Wu, </author> <title> "An Optimal Algorithm for Approximate Nearest Neighbor," </title> <booktitle> Symposium on Discrete Algorithms, </booktitle> <year> 1994. </year>
Reference-contexts: Samet [16, 17] discusses various spatial data structures. A data object with k attributes can be treated as a point in k-dimensional space. As a result, we can think of storing multiple attribute data objects as a problem of storing points in k-dimensional space. Various geometric data structures <ref> [1, 4, 6, 2, 16, 17, 10, 11] </ref> have been proposed for storing points in k-dimensions, and which support different types of queries. <p> Nearest Neighbor Query: Given a query ob-ject q, find the closest object in the database. The metric used for computing closest distance is L 2 . This is a difficult problem to solve efficiently (see <ref> [1] </ref> for a good history of the problem). We implement a simpler version of the problem called approximate nearest neighbor [1] which takes a parameter *, and finds an object in the database whose distance to q is at most (1 + *) times the distance to the actual nearest neighbor. <p> The metric used for computing closest distance is L 2 . This is a difficult problem to solve efficiently (see <ref> [1] </ref> for a good history of the problem). We implement a simpler version of the problem called approximate nearest neighbor [1] which takes a parameter *, and finds an object in the database whose distance to q is at most (1 + *) times the distance to the actual nearest neighbor. k-Nearest Neighbors Query [1]: Given a query object q, find k-nearest objects (ap proximate) to q in the database. <p> We implement a simpler version of the problem called approximate nearest neighbor <ref> [1] </ref> which takes a parameter *, and finds an object in the database whose distance to q is at most (1 + *) times the distance to the actual nearest neighbor. k-Nearest Neighbors Query [1]: Given a query object q, find k-nearest objects (ap proximate) to q in the database. <p> With linear space, it is conjectured [19], that O (n * ) time, with * 1, is the best we can achieve. As a result, we are forced to work with approx imation methods. Arya et. al. <ref> [1] </ref>, discuss an approximation scheme which in O (log n) time, using O (n) space, finds an (1 + *)-approximate nearest neighbor. We modify their method for our data structure. We extend the same method easily for approximate k-nearest neighbors.
Reference: [2] <author> R. Bayer and E.M. McCrieght, </author> <title> "Organization and Maintenance of Large Ordered Indexes," </title> <journal> Acta. Inf., </journal> <volume> Vol. 1, </volume> <pages> 173-189, </pages> <year> 1972. </year>
Reference-contexts: Samet [16, 17] discusses various spatial data structures. A data object with k attributes can be treated as a point in k-dimensional space. As a result, we can think of storing multiple attribute data objects as a problem of storing points in k-dimensional space. Various geometric data structures <ref> [1, 4, 6, 2, 16, 17, 10, 11] </ref> have been proposed for storing points in k-dimensions, and which support different types of queries.
Reference: [3] <author> J.L. Bentley, </author> <title> "Multidimensional Binary Search Trees Used for Associated Searching," </title> <journal> Communications of the ACM, </journal> <volume> Vol. 18, </volume> <pages> 509-517, </pages> <year> 1975. </year>
Reference: [4] <author> J.L. Bentley, </author> <title> "Multidimensional Binary Search Trees in Database Applications," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 5, </volume> <pages> 333-340, </pages> <year> 1979. </year>
Reference-contexts: Samet [16, 17] discusses various spatial data structures. A data object with k attributes can be treated as a point in k-dimensional space. As a result, we can think of storing multiple attribute data objects as a problem of storing points in k-dimensional space. Various geometric data structures <ref> [1, 4, 6, 2, 16, 17, 10, 11] </ref> have been proposed for storing points in k-dimensions, and which support different types of queries. <p> The data structures satisfy different properties based on the partition scheme, and support different queries efficiently. 4.1 Geometric Data Structure We use the well known k-d tree <ref> [4, 6] </ref> for partitioning our data space into smaller buckets. The k-d tree is a simple data structure, and has a good performance for different searches involving uniformly distributed data. We briefly outline the construction of the k-d tree for our data. <p> This is a restricted form of query since the L 2 distance metric is not defined for all the attributes of our objects. These queries are well studied by researchers <ref> [4, 6, 15, 11, 10] </ref>. We briefly discuss the algorithms for each of the queries. Range Query: We first create a rectangular box, say B, from the description of query. To perform range searching on a k-d tree, we check whether B intersects the rectangular box of the root.
Reference: [5] <author> A. Connolly, </author> <title> Private Communication. </title>
Reference-contexts: Our simulated data has 8 attributes: right ascension, declination, red shift, and magnitudes in 5 color bands (ultraviolet, optical, infrared). Though we work with data in a 8 dimensional space, the distribution of some of the attributes are correlated <ref> [5] </ref>. We split on the attributes that are most likely to be searched on however other attributes will be correlated with these. So, by storing the boundaries we can efficiently search on dimensions that are not split on.
Reference: [6] <author> R.A. Finkel and J.L. Bentley, "Quad-Trees: </author> <title> a Data Structure for Retrieval on Composite Keys," </title> <journal> Acta Informatica, </journal> <volume> Vol. 4, </volume> <pages> 1-9, </pages> <year> 1974. </year>
Reference-contexts: Samet [16, 17] discusses various spatial data structures. A data object with k attributes can be treated as a point in k-dimensional space. As a result, we can think of storing multiple attribute data objects as a problem of storing points in k-dimensional space. Various geometric data structures <ref> [1, 4, 6, 2, 16, 17, 10, 11] </ref> have been proposed for storing points in k-dimensions, and which support different types of queries. <p> The data structures satisfy different properties based on the partition scheme, and support different queries efficiently. 4.1 Geometric Data Structure We use the well known k-d tree <ref> [4, 6] </ref> for partitioning our data space into smaller buckets. The k-d tree is a simple data structure, and has a good performance for different searches involving uniformly distributed data. We briefly outline the construction of the k-d tree for our data. <p> This is a restricted form of query since the L 2 distance metric is not defined for all the attributes of our objects. These queries are well studied by researchers <ref> [4, 6, 15, 11, 10] </ref>. We briefly discuss the algorithms for each of the queries. Range Query: We first create a rectangular box, say B, from the description of query. To perform range searching on a k-d tree, we check whether B intersects the rectangular box of the root.
Reference: [7] <author> J.E. Gunn and G.R. Knapp, </author> <year> 1992, </year> <journal> PASP, </journal> <volume> 43, </volume> <pages> 267. </pages>
Reference-contexts: In this paper we discuss the challenges involved in a massive data management project, and also some of the design solutions we adopted. The Sloan Digital Sky Survey (SDSS) <ref> [8, 7] </ref>, a project involving several academic and research institutions is a major international effort to create a large scale digital map of the northern sky.
Reference: [8] <author> S.M. Kent, C. Stoughton, H. Newberg, J. Loveday, D. Petravick, V. Gurbani, E. Berman, and G. Sergey, </author> <title> "Sloan Digital Sky Survey," </title> <booktitle> in Proc. 3rd Annual Conference on Astronomical Data Analysis Software and systems, </booktitle> <address> Victoria, British Colombia, </address> <year> 1993. </year>
Reference-contexts: In this paper we discuss the challenges involved in a massive data management project, and also some of the design solutions we adopted. The Sloan Digital Sky Survey (SDSS) <ref> [8, 7] </ref>, a project involving several academic and research institutions is a major international effort to create a large scale digital map of the northern sky.
Reference: [9] <author> Won Kim, </author> <title> Introduction to Object-Oriented Databases, </title> <publisher> The MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: We have designed our system to use an object-oriented database <ref> [9] </ref>. The object-oriented database is extremely efficient for extracting large amounts of information. It has support for modeling complex data structures, and for efficient controlling of the behavior of data.
Reference: [10] <author> G.S. Lueker, </author> <title> "A Data Structure for Orthogonal Range Queries," </title> <booktitle> in Proc. 19th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1978, </year> <pages> 28-34. </pages>
Reference-contexts: Samet [16, 17] discusses various spatial data structures. A data object with k attributes can be treated as a point in k-dimensional space. As a result, we can think of storing multiple attribute data objects as a problem of storing points in k-dimensional space. Various geometric data structures <ref> [1, 4, 6, 2, 16, 17, 10, 11] </ref> have been proposed for storing points in k-dimensions, and which support different types of queries. <p> We identify all the leaf buckets of the k-d tree which intersect the query geometric structure. We then access the data contained in the buckets from the database. The geometric queries we support include the following: Range Query <ref> [10, 15] </ref>: Given a k-dimensional rectangular box defined by intervals f (a i ; b i ) : 1 i kg, where a i ; b i 2 R i (R i is the range of the attribute i), find all the objects in the database which lie within the specified <p> This is a restricted form of query since the L 2 distance metric is not defined for all the attributes of our objects. These queries are well studied by researchers <ref> [4, 6, 15, 11, 10] </ref>. We briefly discuss the algorithms for each of the queries. Range Query: We first create a rectangular box, say B, from the description of query. To perform range searching on a k-d tree, we check whether B intersects the rectangular box of the root.
Reference: [11] <author> E.M. McCreight, </author> <title> "Priority Search Trees," </title> <journal> SIAM J. Computing, </journal> <volume> Vol. 14, </volume> <pages> 257-276, </pages> <year> 1985. </year>
Reference-contexts: Samet [16, 17] discusses various spatial data structures. A data object with k attributes can be treated as a point in k-dimensional space. As a result, we can think of storing multiple attribute data objects as a problem of storing points in k-dimensional space. Various geometric data structures <ref> [1, 4, 6, 2, 16, 17, 10, 11] </ref> have been proposed for storing points in k-dimensions, and which support different types of queries. <p> This is a restricted form of query since the L 2 distance metric is not defined for all the attributes of our objects. These queries are well studied by researchers <ref> [4, 6, 15, 11, 10] </ref>. We briefly discuss the algorithms for each of the queries. Range Query: We first create a rectangular box, say B, from the description of query. To perform range searching on a k-d tree, we check whether B intersects the rectangular box of the root.
Reference: [12] <institution> Objectivity/DB Database Development, </institution> <note> Version 3.0, </note> <institution> Objectivity Inc., Mountain View, </institution> <address> CA., </address> <year> 1994 </year>
Reference-contexts: It determines which objects from the database actually satisfy the search request. The client then executes the extraction object passed by the GUI, and communicates the results back to the GUI. We use Objectivity/DB <ref> [12] </ref> as our object-oriented database. It supports a containment hierarchy that consists of federated database, databases, containers, and objects. It supports easily-tunable parameters to optimize the page intensive computations. To maintain the object-oriented philosophy in and across the modules, most of our code is written in C++ [18].
Reference: [13] <author> J.K.. Ousterhout, </author> <title> Tcl and the Tk Toolkit, </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The data flow of the prototype system is shown in Figure 1. The prototype is not dependent on any machine architecture as the GUI was written using Tcl/Tk <ref> [13] </ref>. We envision extending the prototype to support multiple astronomical databases, and to provide support for customized local databases, and also implement associated queries. The graphical user interface contains a work space which contains different types of objects: query objects, extractor objects, and databases; all the objects are represented graphically.
Reference: [14] <author> M.H. Overmars, M.H.M. Smid, M.T. de Berg, and M.J.v. Kreveld, </author> <title> "Maintaining range trees in secondary memory, part I: partitions," </title> <journal> Acta Informatica, </journal> <year> 1990, </year> <pages> 423-452. </pages>
Reference: [15] <author> F.P. Preparata and M.I. Shamos, </author> <title> Computational Geometry: An Introduction, </title> <publisher> Springer-Verlag, </publisher> <address> NY, </address> <year> 1985. </year>
Reference-contexts: We identify all the leaf buckets of the k-d tree which intersect the query geometric structure. We then access the data contained in the buckets from the database. The geometric queries we support include the following: Range Query <ref> [10, 15] </ref>: Given a k-dimensional rectangular box defined by intervals f (a i ; b i ) : 1 i kg, where a i ; b i 2 R i (R i is the range of the attribute i), find all the objects in the database which lie within the specified <p> This is a restricted form of query since the L 2 distance metric is not defined for all the attributes of our objects. These queries are well studied by researchers <ref> [4, 6, 15, 11, 10] </ref>. We briefly discuss the algorithms for each of the queries. Range Query: We first create a rectangular box, say B, from the description of query. To perform range searching on a k-d tree, we check whether B intersects the rectangular box of the root. <p> Nearest Neighbor: This is the classical post office problem <ref> [15] </ref> studied by the computational geometry community very extensively. The brute-force method to solve this problem is simple and takes O (n) time, but is too expensive.
Reference: [16] <author> H. Samet, </author> <title> The Design and Analysis of Spatial Data Structures, </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: For example, find all blue galaxies within 2 ar cmin of quasars. Hence we require fast area searches, color searches, and proximity searches. As a first step, we needed a spatial data structure to index the data in the database. Samet <ref> [16, 17] </ref> discusses various spatial data structures. A data object with k attributes can be treated as a point in k-dimensional space. As a result, we can think of storing multiple attribute data objects as a problem of storing points in k-dimensional space. <p> Samet [16, 17] discusses various spatial data structures. A data object with k attributes can be treated as a point in k-dimensional space. As a result, we can think of storing multiple attribute data objects as a problem of storing points in k-dimensional space. Various geometric data structures <ref> [1, 4, 6, 2, 16, 17, 10, 11] </ref> have been proposed for storing points in k-dimensions, and which support different types of queries.
Reference: [17] <author> H. Samet, </author> <title> The Applications of Spatial Data Structures, </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference-contexts: For example, find all blue galaxies within 2 ar cmin of quasars. Hence we require fast area searches, color searches, and proximity searches. As a first step, we needed a spatial data structure to index the data in the database. Samet <ref> [16, 17] </ref> discusses various spatial data structures. A data object with k attributes can be treated as a point in k-dimensional space. As a result, we can think of storing multiple attribute data objects as a problem of storing points in k-dimensional space. <p> Samet [16, 17] discusses various spatial data structures. A data object with k attributes can be treated as a point in k-dimensional space. As a result, we can think of storing multiple attribute data objects as a problem of storing points in k-dimensional space. Various geometric data structures <ref> [1, 4, 6, 2, 16, 17, 10, 11] </ref> have been proposed for storing points in k-dimensions, and which support different types of queries.
Reference: [18] <author> J. Stroustrup, </author> <title> The C++ Programming Language, </title> <publisher> Addison-Wesley, </publisher> <year> 1993. </year>
Reference-contexts: It supports a containment hierarchy that consists of federated database, databases, containers, and objects. It supports easily-tunable parameters to optimize the page intensive computations. To maintain the object-oriented philosophy in and across the modules, most of our code is written in C++ <ref> [18] </ref>. The code for GUI is written in Tcl/Tk. 6 Performance In an initial test of the viability of this method, we tested our prototype system using two million objects generated from a simulated all-sky galaxy survey. for a range query on databases of different sizes.
Reference: [19] <author> A.C. Yao and F.F. Yao, </author> <title> "A general approach to D-dimensional geometric queries," </title> <booktitle> in Proc. 17th Annu. ACM Sym-pos. Theory Comput., </booktitle> <year> 1985, </year> <pages> 163-168. </pages>
Reference-contexts: The same approach can be used for higher-dimensional point sets, but there will be a space blow up as the k-dimensional Voronoi diagram can contain exponential number of facets in the worst case. With linear space, it is conjectured <ref> [19] </ref>, that O (n * ) time, with * 1, is the best we can achieve. As a result, we are forced to work with approx imation methods.
Reference: [20] <institution> SDSS Archive Group Meetings. </institution>
References-found: 20

