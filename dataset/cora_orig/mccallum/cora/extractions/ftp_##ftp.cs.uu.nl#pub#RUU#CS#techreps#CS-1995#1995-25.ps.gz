URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1995/1995-25.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Parallel Algorithms with Optimal Speedup for Bounded Treewidth  
Author: Hans L. Bodlaender and Torben Hagerup 
Abstract: We describe the first parallel algorithm with optimal speedup for constructing minimum-width tree decompositions of graphs of bounded treewidth. On n-vertex input graphs, the algorithm works in O((log n) 2 ) time using O(n) operations on the EREW PRAM. We also give faster parallel algorithms with optimal speedup for the problem of deciding whether the treewidth of an input graph is bounded by a given constant and for a variety of problems on graphs of bounded treewidth, including all decision problems expressible in monadic second-order logic. On n-vertex input graphs, the algorithms use O(n) operations together with O(log n log fl n) time on the EREW PRAM, or O(log n) time on the CRCW PRAM.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Abrahamson, N. Dadoun, D. G. Kirkpatrick, and T. Przytycka. </author> <title> A simple parallel tree contraction algorithm. </title> <journal> J. </journal> <note> Algorithms 10 (1989) 287-302. </note>
Reference: [2] <author> N. Alon, L. Babai, and A. Itai. </author> <title> A fast and simple randomized parallel algorithm for the maximal independent set problem. </title> <journal> J. </journal> <note> Algorithms 7 (1986) 567-583. </note>
Reference-contexts: It then follows from [3, Lemma 2] and <ref> [2, Proposition 6.5] </ref> that the m bits output by the algorithm are indeed (1=K ; d)-independent. What remains is to bound the resources needed by the computation.
Reference: [3] <author> N. Alon, O. Goldreich, J. H-astad, and R. Peralta. </author> <title> Simple constructions of almost k-wise independent random variables. Random Structures and Algorithms 3 (1992) 289-304. </title>
Reference-contexts: Since we can allow any positive constant here instead of 2 d , however, we can relax the requirements even more. For * &gt; 0, random bits X 1 ; : : : ; X m are said to be (*; d)-independent <ref> [3] </ref> if for all positive integers l d, all distinct integers i 1 ; : : : ; i l with 1 i 1 ; : : : ; i l m and all b 1 ; : : : ; b l 2 f0; 1g, the probability of the event <p> It is easy to see that (*; d)-independent random bits, where * = 2 d1 , suffice for our purpose. We now appeal to Theorem 2 of <ref> [3] </ref>, which promises that m (2 d1 ; d)-independent random bits can be drawn from a sample space of size (log m) O (1) (where the exponent depends on d); we argue separately in Lemma 6.2 below that the computation of the m bits can be carried out in constant time <p> Proof: Our construction, described below, is an elaboration of one given in <ref> [3, Theorem 2] </ref>. Without loss of generality assume that d is odd, say d = 2t + 1. <p> It is proved in <ref> [3, Proposition 2] </ref> that the inner product modulo 2 of y with any fixed bit vector of length 1+rt is *-biased [3], where * = rt= p 2 (1 + rt)= p 1=K , i.e., it takes on the values 0 and 1 with probabilities differing by at most *. <p> It is proved in [3, Proposition 2] that the inner product modulo 2 of y with any fixed bit vector of length 1+rt is *-biased <ref> [3] </ref>, where * = rt= p 2 (1 + rt)= p 1=K , i.e., it takes on the values 0 and 1 with probabilities differing by at most *. <p> It then follows from <ref> [3, Lemma 2] </ref> and [2, Proposition 6.5] that the m bits output by the algorithm are indeed (1=K ; d)-independent. What remains is to bound the resources needed by the computation.
Reference: [4] <author> R. J. Anderson and G. L. Miller. </author> <title> Deterministic parallel list ranking. </title> <booktitle> In Proc. 3rd Aegean Workshop on Computing (AWOC 1988), Springer-Verlag, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 319, </volume> <pages> pages 81-90. </pages>
Reference: [5] <author> S. Arnborg, D. G. Corneil, and A. Proskurowski. </author> <title> Complexity of finding embeddings in a k-tree. </title> <journal> SIAM J. Alg. Disc. Meth. </journal> <month> 8 </month> <year> (1987) </year> <month> 277-284. </month>
Reference: [6] <author> S. Arnborg, B. Courcelle, A. Proskurowski, and D. Seese. </author> <title> An algebraic theory of graph reduction. </title> <journal> J. </journal> <note> ACM 40 (1993) 1134-1164. 24 </note>
Reference-contexts: Our algorithm can be viewed as a parallelization of a linear-time sequential algorithm due to Arnborg et al. <ref> [6] </ref>. A first parallel version of this algorithm was given in [9]. The algorithm described there is randomized, works only for graphs of bounded degree and uses O (log n) expected time and O (n log n) expected operations on n-vertex input graphs. <p> The algorithm given in this section works for arbitrary graphs, uses O (n) operations and is deterministic, but at a cost of an extra factor of O (log fl n) in the running time. The algorithm of <ref> [6] </ref> uses an amount of space bounded by a polynomial, but a polynomial whose degree is large and unspecified. <p> If we have a terminating algorithm that decides whether two given terminal graphs are equivalent under ~ G or under some refinement (subdivision) of ~ G that still has a finite number of equivalence classes, this can be done by a method described in <ref> [6] </ref> (in a general algebraic setting). For the case in which G is the class of all graphs of treewidth at most k, such an explicit decision algorithm was exhibited in [32].
Reference: [7] <author> H. L. Bodlaender. </author> <title> NC-algorithms for graphs with small treewidth. </title> <booktitle> In Proc. 14th International Workshop on Graph-Theoretic Concepts in Computer Science (WG 1988), Springer-Verlag, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 344, </volume> <pages> pages 1-10. </pages>
Reference: [8] <author> H. L. Bodlaender. </author> <title> A linear time algorithm for finding tree-decompositions of small treewidth. </title> <booktitle> In Proc. 25th Annual Symposium on Theory of Computing (STOC 1993), </booktitle> <pages> pages 226-234. </pages> <note> To appear in SIAM J. Comput. </note>
Reference: [9] <author> H. L. Bodlaender. </author> <title> On reduction algorithms for graphs with small treewidth. </title> <booktitle> In Proc. 19th International Workshop on Graph-Theoretic Concepts in Computer Science (WG 1993), Springer-Verlag, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 790, </volume> <pages> pages 45-56. </pages>
Reference-contexts: Our algorithm can be viewed as a parallelization of a linear-time sequential algorithm due to Arnborg et al. [6]. A first parallel version of this algorithm was given in <ref> [9] </ref>. The algorithm described there is randomized, works only for graphs of bounded degree and uses O (log n) expected time and O (n log n) expected operations on n-vertex input graphs. <p> It is also possible to apply the parallel reduction techniques to problems that are of finite integer index, in the sense of <ref> [9] </ref>. This allows deciding on the size of a maximum independent set, minimum vertex cover, minimum dominating set and others on graphs of bounded treewidth in O (log n log fl n) time using O (n) operations on an EREW PRAM. <p> This allows deciding on the size of a maximum independent set, minimum vertex cover, minimum dominating set and others on graphs of bounded treewidth in O (log n log fl n) time using O (n) operations on an EREW PRAM. Using the technique of <ref> [9, Section 6.1] </ref>, it is also possible to construct corresponding solutions for some of these problems. 6 Deciding treewidth on the CRCW PRAM In this section we show how the running time of O (log n log fl n) of the algorithm in the previous section can be reduced to O
Reference: [10] <author> H. L. Bodlaender. </author> <title> Improved self-reduction algorithms for graphs with bounded treewidth. </title> <journal> Disc. Appl. Math. </journal> <month> 54 </month> <year> (1994) </year> <month> 101-115. </month>
Reference: [11] <author> H. L. Bodlaender and T. Kloks. </author> <title> Efficient and constructive algorithms for the pathwidth and treewidth of graphs. </title> <type> Technical Report RUU-CS-93-27, </type> <institution> Department of Computer Science, Utrecht University, </institution> <address> Utrecht, the Netherlands, </address> <year> 1993. </year> <title> A preliminary version appeared in Proc. </title> <booktitle> 18th International Colloquium on Automata, Languages and Programming (ICALP 1991), Springer-Verlag, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 510, </volume> <pages> pages 544-555. </pages> <note> To appear in J. Algorithms. </note>
Reference: [12] <author> R. B. Borie, R. G. Parker, and C. A. Tovey. </author> <title> Automatic generation of linear-time algorithms from predicate calculus descriptions of problems on recursively constructed graph families. </title> <note> Algorithmica 7 (1992) 555-581. </note>
Reference-contexts: Proof: Assume first that P (G) implies that G is connected. It was shown in [32] that the class of graphs of treewidth at most k is of finite index, and one easily observes that finite index is closed under intersection (see, e.g., <ref> [12] </ref>). Hence G = fG j P (G) ^ (tw (G) k)g is of finite index. <p> Moreover, the same result can be shown to hold for pathwidth. Many well-known graph properties are of finite index. For instance, this is true of all problems that can be expressed in monadic second-order logic, such as Hamiltonicity and l-colorability. This was first shown by Courcelle [18]; see <ref> [12] </ref> for a possibly more accessible proof. Theorem 5.1 is nonconstructive: An algorithm with the stated properties is merely shown to exist. To actually exhibit the algorithm, we must be able to compute the number n min and to construct the table T . <p> If G is the set of those graphs of treewidth at most k that satisfy a property P expressed in monadic second-order logic, then an algorithm that decides a subdivision of ~ G with a finite number of equivalence classes can be obtained by combining results implicit in <ref> [12, 18, 32] </ref>. It is also possible to apply the parallel reduction techniques to problems that are of finite integer index, in the sense of [9].
Reference: [13] <author> N. Chandrasekharan. </author> <title> Fast Parallel Algorithms and Enumeration Techniques for Partial k-Trees. </title> <type> Ph.D. thesis, </type> <institution> Clemson University, </institution> <year> 1989. </year>
Reference: [14] <author> N. Chandrasekharan and S. T. Hedetniemi. </author> <title> Fast parallel algorithms for tree decomposing and parsing partial k-trees. </title> <booktitle> In Proc. 26th Annual Allerton Conference on Communication, Control, and Computing, </booktitle> <address> Urbana-Champaign, Illinois, </address> <year> 1988. </year>
Reference: [15] <author> R. Cole and U. Vishkin. </author> <title> Approximate parallel scheduling. Part I: The basic technique with applications to optimal parallel list ranking in logarithmic time. </title> <journal> SIAM J. Comput. </journal> <month> 17 </month> <year> (1988) </year> <month> 128-142. </month>
Reference: [16] <author> R. Cole and U. Vishkin. </author> <title> The accelerated centroid decomposition technique for optimal parallel tree evaluation in logarithmic time. </title> <note> Algorithmica 3 (1988) 329-346. </note>
Reference: [17] <author> R. Cole and U. Vishkin. </author> <title> Faster optimal parallel prefix sums and list ranking. </title> <journal> Inform. and Comput. </journal> <month> 81 </month> <year> (1989) </year> <month> 334-352. </month>
Reference-contexts: Moving to the CRCW PRAM, we can easily eliminate the first bottleneck, since in this model compaction can be done in fi (log n=log log n) time <ref> [17] </ref>, rather than the fi (log n) time for the EREW PRAM. Before attacking the second bottleneck, let us observe that we can execute fi (log n=log fl n) stages of the EREW PRAM algorithm without exceeding a time bound of O (log n).
Reference: [18] <author> B. Courcelle. </author> <title> The monadic second-order logic of graphs. I. Recognizable sets of finite graphs. </title> <journal> Inform. and Comput. </journal> <month> 85 </month> <year> (1990) </year> <month> 12-75. </month>
Reference-contexts: Moreover, the same result can be shown to hold for pathwidth. Many well-known graph properties are of finite index. For instance, this is true of all problems that can be expressed in monadic second-order logic, such as Hamiltonicity and l-colorability. This was first shown by Courcelle <ref> [18] </ref>; see [12] for a possibly more accessible proof. Theorem 5.1 is nonconstructive: An algorithm with the stated properties is merely shown to exist. To actually exhibit the algorithm, we must be able to compute the number n min and to construct the table T . <p> If G is the set of those graphs of treewidth at most k that satisfy a property P expressed in monadic second-order logic, then an algorithm that decides a subdivision of ~ G with a finite number of equivalence classes can be obtained by combining results implicit in <ref> [12, 18, 32] </ref>. It is also possible to apply the parallel reduction techniques to problems that are of finite integer index, in the sense of [9].
Reference: [19] <author> N. Dadoun and D. G. Kirkpatrick. </author> <title> Parallel construction of subdivision hierarchies. </title> <journal> J. Comput. System Sci. </journal> <month> 39 </month> <year> (1989) </year> <month> 153-165. </month>
Reference-contexts: It is easy to see that the conflict graph is of bounded degree and can be constructed in constant time using O (n) operations. Following <ref> [19] </ref>, we define a fractional independent set in an m-vertex graph H as an independent vertex set in H of size at least *m, where * is an (unspecified) positive constant.
Reference: [20] <author> M. R. Fellows and M. A. Langston. </author> <title> On search, decision, and the efficiency of polynomial-time algorithms. </title> <journal> J. Comput. System Sci. </journal> <month> 49 </month> <year> (1994) </year> <month> 769-779. </month>
Reference: [21] <author> H. Gazit, G. L. Miller, and S.-H. Teng. </author> <title> Optimal tree contraction in an EREW model. </title> <editor> In S. K. Tewksbury, B. W. Dickson, and S. C. Schwartz, editors, </editor> <booktitle> Concurrent Computations: Algorithms, Architecture, and Technology, </booktitle> <pages> pages 139-156. </pages> <publisher> Plenum Press, </publisher> <year> 1988. </year>
Reference: [22] <author> A. Gibbons and W. Rytter. </author> <title> Optimal parallel algorithms for dynamic expression evaluation and context-free recognition. </title> <journal> Inform. and Comput. </journal> <month> 81 </month> <year> (1989) </year> <month> 32-45. </month>
Reference: [23] <author> A. V. Goldberg, S. A. Plotkin, and G. E. Shannon. </author> <title> Parallel symmetry-breaking in sparse graphs. </title> <journal> SIAM J. Disc. Math. </journal> <month> 1 </month> <year> (1988) </year> <month> 434-446. </month>
Reference-contexts: For this, we employ in the first O (log fl n) stages the algorithm of [24, Lemma 7 (b)], which uses O (log m) time and O (m) operations, where m is the number of vertices in the conflict graph. In the remaining phases, we use the algorithm of <ref> [23, Theorem 4] </ref>, which needs O (log fl n) time and O (m log fl n) operations.
Reference: [24] <author> T. Hagerup. </author> <title> Optimal parallel algorithms on planar graphs. </title> <journal> Inform. and Comput. </journal> <month> 84 </month> <year> (1990) </year> <month> 71-96. </month>
Reference-contexts: We proceed to compute a fractional independent set in the conflict graph, which can be done 15 in O (log n) time using O (n) operations <ref> [24, Lemma 7 (b)] </ref>. Finally we execute the reductions on the pairs in the independent set, which takes constant time and uses O (n) operations. The reductions described above change G into a smaller graph G 0 . <p> The only part of a stage that takes more than constant time with a linear number of processors is the computation of a fractional independent set in the conflict graph. For this, we employ in the first O (log fl n) stages the algorithm of <ref> [24, Lemma 7 (b)] </ref>, which uses O (log m) time and O (m) operations, where m is the number of vertices in the conflict graph.
Reference: [25] <author> T. Hagerup. </author> <title> Fast deterministic processor allocation. </title> <journal> J. </journal> <note> Algorithms 18 (1995) 629-649. </note>
Reference-contexts: We would like simply to pick a good execution, but this is not entirely trivial, since we have only constant time per stage, which is not sufficient for computing the size of I. Using the deterministic approximate-summation algorithm of <ref> [25, Theorem 3] </ref>, we can compute the size of I, up to a constant factor (which is sufficiently accurate), in O ((log log n) 3 ) time. While this is fast, it is not fast enough. <p> Using the deterministic approximate-summation algorithm of [25, Theorem 3], we can compute the size of I, up to a constant factor (which is sufficiently accurate), in O ((log log n) 3 ) time. While this is fast, it is not fast enough. We overcome this using a technique of <ref> [25] </ref>, namely to simulate all possible executions of the randomized algorithm not just for one stage at a time, but for fi ((log log n) 3 ) consecutive stages, after which we can spend O ((log log n) 3 ) time determining a good execution without violating our time bound (as
Reference: [26] <author> T. Hagerup, M. Chrobak, and K. Diks. </author> <title> Optimal parallel 5-colouring of planar graphs. </title> <journal> SIAM J. Comput. </journal> <month> 18 </month> <year> (1989) </year> <month> 288-300. </month>
Reference-contexts: In the remaining phases, we use the algorithm of [23, Theorem 4], which needs O (log fl n) time and O (m log fl n) operations. The total time is O (log n log fl n), and a simple simulation argument that schedules compactions of the representation conveniently (see <ref> [26, Section 4] </ref>) shows that the algorithm can be carried out using O (n) operations.
Reference: [27] <author> T. Hagerup, J. Katajainen, N. Nishimura, and P. Ragde. </author> <title> Characterizations of k-terminal flow networks and computing network flows in partial k-trees. </title> <booktitle> In Proc. 6th Annual ACM-SIAM Symposium on Discrete Algorithms (SODA 1995), </booktitle> <pages> pages 641-649. </pages>
Reference: [28] <author> G. H. Hardy and E. M. Wright. </author> <title> An Introduction to the Theory of Numbers (5th ed.). </title> <publisher> Oxford University Press, Oxford, </publisher> <year> 1979. </year>
Reference-contexts: It then follows from [3, Lemma 2] and [2, Proposition 6.5] that the m bits output by the algorithm are indeed (1=K ; d)-independent. What remains is to bound the resources needed by the computation. Obviously, r = O (log m) and, by Bertrand's postulate (see, e.g., <ref> [28, Thm. 418] </ref>), which asserts the existence of a prime in the range fs; : : : ; 2sg for every positive integer s, we obtain that p = (log m) O (1) , so that the random integer h is indeed chosen from a range as small as claimed in
Reference: [29] <author> S. Khuller and B. Schieber. </author> <title> Efficient parallel algorithms for testing connectivity and finding disjoint s-t paths in graphs. </title> <booktitle> In Proc. 30th Annual Symposium on Foundations of Computer Science (FOCS 1989), </booktitle> <pages> pages 288-293. 26 </pages>
Reference: [30] <author> S. R. Kosaraju and A. L. Delcher. </author> <title> Optimal parallel evaluation of tree--structured computations by raking. </title> <booktitle> In Proc. 3rd Aegean Workshop on Computing (AWOC 1988), Springer-Verlag, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 319, </volume> <pages> pages 101-110. </pages>
Reference: [31] <author> J. Lagergren. </author> <title> Efficient parallel algorithms for tree-decomposition and related problems. </title> <booktitle> In Proc. 31st Annual Symposium on Foundations of Computer Science (FOCS 1990), </booktitle> <pages> pages 173-182. </pages>
Reference: [32] <author> J. Lagergren and S. Arnborg. </author> <title> Finding minimal forbidden minors using a finite congruence. </title> <booktitle> In Proc. 18th International Colloquium on Automata, Languages and Programming (ICALP 1991), Springer-Verlag, Lecture Notes in Computer Science, </booktitle> <volume> Vol. 510, </volume> <pages> pages 532-543. </pages>
Reference-contexts: Proof: Assume first that P (G) implies that G is connected. It was shown in <ref> [32] </ref> that the class of graphs of treewidth at most k is of finite index, and one easily observes that finite index is closed under intersection (see, e.g., [12]). Hence G = fG j P (G) ^ (tw (G) k)g is of finite index. <p> For the case in which G is the class of all graphs of treewidth at most k, such an explicit decision algorithm was exhibited in <ref> [32] </ref>. <p> If G is the set of those graphs of treewidth at most k that satisfy a property P expressed in monadic second-order logic, then an algorithm that decides a subdivision of ~ G with a finite number of equivalence classes can be obtained by combining results implicit in <ref> [12, 18, 32] </ref>. It is also possible to apply the parallel reduction techniques to problems that are of finite integer index, in the sense of [9].
Reference: [33] <author> R. Lidl and H. Niederreiter. </author> <title> Introduction to Finite Fields and their Applications. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1986. </year>
Reference-contexts: Since f (x) is irreducible over ZZ 2 <ref> [33, Exercise 3.96] </ref>, it is well-known that this multiplication operation (together with componentwise addition over ZZ 2 ) indeed turns F into a field. Compute q as a positive integer with q (log m)=5, but q = (log m).
Reference: [34] <author> J. Matousek and R. Thomas. </author> <title> Algorithms finding tree-decompositions of graphs. </title> <journal> J. </journal> <note> Algorithms 12 (1991) 1-22. </note>
Reference: [35] <author> G. L. Miller and J. H. Reif. </author> <title> Parallel tree contraction and its application. </title> <booktitle> In Proc. 26th Annual Symposium on Foundations of Computer Science (FOCS 1985), </booktitle> <pages> pages 478-489. </pages>
Reference: [36] <author> P. Ragde. </author> <title> The parallel simplicity of compaction and chaining. </title> <journal> J. </journal> <note> Algorithms 14 (1993) 371-380. </note>
Reference-contexts: For multiplication, the problem reduces to computing the parities of 2q 1 bit sequences, each of length at most q. Since the parity of q bits can be computed in constant time with O (m ffi ) processors, for arbitrary constant ffi &gt; 0 (see, e.g., <ref> [36, lemma on p. 375] </ref>), we have enough processors in this case as well.
Reference: [37] <author> S. Rajasekaran and J. H. Reif. </author> <title> Optimal and sublogarithmic time randomized parallel sorting algorithms. </title> <journal> SIAM J. Comput. </journal> <month> 18 </month> <year> (1989) </year> <month> 594-607. </month>
Reference: [38] <author> B. A. Reed. </author> <title> Finding approximate separators and computing tree width quickly. </title> <booktitle> In Proc. 24th Annual Symposium on Theory of Computing, (STOC 1992), </booktitle> <pages> pages 221-228. </pages>
Reference: [39] <author> N. Robertson and P. D. Seymour. </author> <title> Graph minors. XIII. The disjoint paths problem. </title> <journal> J. Comb. Theory Ser. B. </journal> <month> 63 </month> <year> (1995) </year> <month> 65-110. </month>
Reference: [40] <author> R. E. Tarjan and U. Vishkin. </author> <title> An efficient parallel biconnectivity algorithm. </title> <journal> SIAM J. Comput. </journal> <month> 14 </month> <year> (1985) </year> <month> 862-874. </month>
Reference: [41] <author> E. Wanke. </author> <title> Bounded tree-width and LOGCFL. </title> <journal> J. </journal> <note> Algorithms 16 (1994) 470-491. </note>
References-found: 41

