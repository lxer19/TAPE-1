URL: ftp://ftp.irisa.fr/local/lande/pfdlm-PI989.ps.gz
Refering-URL: http://www.irisa.fr/lande/fradet/Fradet.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: 989 STRUCTURED GAMMA  
Author: PASCAL FRADET AND DANIEL LE M ETAYER 
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> R. Allen and D. Garlan. </author> <title> Formalizing architectural connection, </title> <booktitle> in Proc. 16th Int. Conf. Soft. </booktitle> <address> Eng., </address> <publisher> IEEE Computer Society, </publisher> <pages> pp. 71-80, </pages> <year> 1994. </year>
Reference-contexts: Let us give a few examples of Structured Gamma programs whose description in pure Gamma is cumbersome. Note that the syntax of programs is extended to account for typed programs (ProgName : TypeName = : : :). Iota takes a singleton [a] and yields the list <ref> [a; a 1; : : : ; 1] </ref>. <p> This allows us to check relevant properties of the architecture very easily (for instance, there is no direct communication link between a server and a client in the above architecture). In contrast <ref> [1] </ref>, uses CSP programs to define the architecture, which leads to a description mixing the communication protocol with the geometry of the communication. We are currently studying the integration of the protocol specification (as separate values associated to the links) in Structured Gamma.
Reference: [2] <author> J.-P. Ban^atre and D. Le Metayer. </author> <title> Programming by multiset transformation, </title> <journal> Communications of the ACM, </journal> <volume> Vol. </volume> <pages> 36-1, pp. 98-111, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: a set of pairs (index; value) and the program exchanges ill-ordered values until a stable state is reached and all values are well-ordered. sort : (i; x) ; (j; y) ; (i &lt; j) ; (x &gt; y) ) (i; y) ; (j; x) The interested reader may find in <ref> [2] </ref> a longer series of examples (string processing problems, graph problems, geometry problems, . . . ) illustrating the Gamma style of programming and in [3] a review of contributions related to the chemical reaction model. <p> Section 6 reviews related proposals in different contexts and suggests several extensions. 2 Syntax and semantics of Structured Gamma A structured multiset is a set of addresses satisfying specific relations. As an example, the list <ref> [5; 2; 7] </ref> can be represented by a structured multiset whose set of addresses is fa 1 ; a 2 ; a 3 g and associated values are V al (a 1 ) = 5; V al (a 2 ) = 2; V al (a 3 ) = 7.
Reference: [3] <author> J.-P. Ban^atre and D. Le Metayer. </author> <title> Gamma and the chemical reaction model: ten years after, Coordination programming: mechanisms, models and semantics, </title> <publisher> Imperial College Press, </publisher> <year> 1996. </year>
Reference-contexts: (i; x) ; (j; y) ; (i &lt; j) ; (x &gt; y) ) (i; y) ; (j; x) The interested reader may find in [2] a longer series of examples (string processing problems, graph problems, geometry problems, . . . ) illustrating the Gamma style of programming and in <ref> [3] </ref> a review of contributions related to the chemical reaction model.
Reference: [4] <author> M. Chaudron and E. de Jong, </author> <title> Towards a compositional method for coordinating Gamma programs, </title> <booktitle> in Proc. Coordination'96 Conference, Cesena, 1996, </booktitle> <publisher> Springer Verlag, LNCS 1061, </publisher> <pages> pp. 107-123. </pages>
Reference-contexts: This issue was addressed in [7, 8] which introduce operators for the parallel and the sequential composition of programs and study their properties and in [11, 5] which define higher-order extensions of Gamma. Another approach was taken in <ref> [4] </ref> where a notion of schedules is proposed to control the execution of Gamma programs.
Reference: [5] <author> D. Cohen and J. Muylaert-Filho, </author> <title> Introducing a calculus for higher-order multiset programming, </title> <booktitle> in Proc. Coordination'96 Conference, Cesena, 1996, </booktitle> <publisher> Springer Verlag, LNCS 1061, </publisher> <pages> pp. 124-141. </pages>
Reference-contexts: It is also fundamental that these operators enjoy a useful collection of algebraic laws in order to make it possible to reason about programs. This issue was addressed in [7, 8] which introduce operators for the parallel and the sequential composition of programs and study their properties and in <ref> [11, 5] </ref> which define higher-order extensions of Gamma. Another approach was taken in [4] where a notion of schedules is proposed to control the execution of Gamma programs. <p> Section 6 reviews related proposals in different contexts and suggests several extensions. 2 Syntax and semantics of Structured Gamma A structured multiset is a set of addresses satisfying specific relations. As an example, the list <ref> [5; 2; 7] </ref> can be represented by a structured multiset whose set of addresses is fa 1 ; a 2 ; a 3 g and associated values are V al (a 1 ) = 5; V al (a 2 ) = 2; V al (a 3 ) = 7.
Reference: [6] <author> C. Creveuil. </author> <title> Techniques d'analyse et de mise en uvre des programmes Gamma, </title> <type> Thesis, </type> <institution> University of Rennes, </institution> <year> 1991. </year>
Reference-contexts: This limitation also introduces an unnecessary factor of inefficiency in the implementation because the underlying structure of the data (and control) is not exposed to the compiler. Such information could be exploited to improve the implementation <ref> [6] </ref> but it can usually not be recovered by an automatic analysis of the program. PI n-989 4 Pascal Fradet and Daniel Le Metayer So, the lack of structuring facility is detrimental both for reasoning about programs and for implementing them. <p> However the worst-case complexity of an unoptimised implementation of max l is N 3 , with N the size of the multiset. This cost is reached by a strategy choosing the first element (i; v; s) in decreasing order of i. As pointed out in <ref> [6] </ref>, the order in which elements are selected is crucial indeed and most of the refinements leading to efficient optimisations of Gamma programs can be expressed as specific selection orderings. [6] introduces several refinements and shows that they often lead to efficient well-known implementations of the corresponding algorithms. <p> As pointed out in <ref> [6] </ref>, the order in which elements are selected is crucial indeed and most of the refinements leading to efficient optimisations of Gamma programs can be expressed as specific selection orderings. [6] introduces several refinements and shows that they often lead to efficient well-known implementations of the corresponding algorithms. This result is quite satisfactory from a formal point of view because it shows that there is a continuum from specifications written in Gamma to lower-level and efficient program descriptions.
Reference: [7] <author> C. Hankin, D. Le Metayer and D. Sands. </author> <title> A calculus of Gamma programs, </title> <booktitle> in Proc. of the 5th workshop on Languages and Compilers for Parallel Computing, Yale, 1992, </booktitle> <publisher> Springer Verlag, LNCS 757. </publisher>
Reference-contexts: For the sake of modularity it is desirable that a language offers a rich set of operators for combining programs. It is also fundamental that these operators enjoy a useful collection of algebraic laws in order to make it possible to reason about programs. This issue was addressed in <ref> [7, 8] </ref> which introduce operators for the parallel and the sequential composition of programs and study their properties and in [11, 5] which define higher-order extensions of Gamma. Another approach was taken in [4] where a notion of schedules is proposed to control the execution of Gamma programs. <p> Section 6 reviews related proposals in different contexts and suggests several extensions. 2 Syntax and semantics of Structured Gamma A structured multiset is a set of addresses satisfying specific relations. As an example, the list <ref> [5; 2; 7] </ref> can be represented by a structured multiset whose set of addresses is fa 1 ; a 2 ; a 3 g and associated values are V al (a 1 ) = 5; V al (a 2 ) = 2; V al (a 3 ) = 7.
Reference: [8] <author> C. Hankin, D. Le Metayer and D. Sands. </author> <title> A parallel programming style and its algebra of programs, </title> <booktitle> in Proc. of the PARLE conference, </booktitle> <address> Munich, 1993, </address> <publisher> Springer Verlag, LNCS 694, </publisher> <pages> pp. 367-378. </pages>
Reference-contexts: For the sake of modularity it is desirable that a language offers a rich set of operators for combining programs. It is also fundamental that these operators enjoy a useful collection of algebraic laws in order to make it possible to reason about programs. This issue was addressed in <ref> [7, 8] </ref> which introduce operators for the parallel and the sequential composition of programs and study their properties and in [11, 5] which define higher-order extensions of Gamma. Another approach was taken in [4] where a notion of schedules is proposed to control the execution of Gamma programs.
Reference: [9] <author> P. Inverardi and A. Wolf. </author> <title> Formal specification and analysis of software architectures using the chemical abstract machine model, </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> Vol. 21, No. 4, </volume> <pages> pp. 373-386, </pages> <month> April </month> <year> 1995. </year>
Reference: [10] <author> N. Klarlund and M. Schwartzbach. </author> <title> Graph types. </title> <booktitle> In Proc. 20th Symp. on Princ. of Prog. Lang., </booktitle> <pages> pp. 196-205. </pages> <publisher> ACM, </publisher> <year> 1993. </year>
Reference-contexts: Our framework makes it easy to define common imperative structures (such as circular lists, doubly-linked lists,: : :). Type checking in this context would greatly contribute to the correctness of pointer-based programs. The graph types approach <ref> [10] </ref> shares the same concern. In their framework, a graph is defined using a canonical spanning tree (called the backbone) and auxiliary pointers. Only the backbone can be manipulated by programs and some simple operations may implicitly involve non-constant updates of the auxiliary pointers.
Reference: [11] <author> D. Le Metayer, </author> <title> Higher-order multiset programming, </title> <booktitle> in Proc. of the DIMACS workshop on specifications of parallel algorithms, American Mathematical Society, Dimacs series in Discrete Mathematics, </booktitle> <volume> Vol. 18, </volume> <year> 1994. </year>
Reference-contexts: It is also fundamental that these operators enjoy a useful collection of algebraic laws in order to make it possible to reason about programs. This issue was addressed in [7, 8] which introduce operators for the parallel and the sequential composition of programs and study their properties and in <ref> [11, 5] </ref> which define higher-order extensions of Gamma. Another approach was taken in [4] where a notion of schedules is proposed to control the execution of Gamma programs.
Reference: [12] <author> J.-C. Raoult and F. Voisin. </author> <title> Set-theoretic graph rewriting. </title> <note> INRIA Research Report No 1665, 1992. PI n-989 </note>
Reference-contexts: However, the application of our approach to imperative languages is not straightforward and needs further research. Another related work is Raoult & Voisin's study of (hyper-)graph rewriting in a set-theoretic setting <ref> [12] </ref>.
References-found: 12

