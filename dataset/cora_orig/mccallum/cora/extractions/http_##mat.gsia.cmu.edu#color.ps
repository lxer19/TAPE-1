URL: http://mat.gsia.cmu.edu/color.ps
Refering-URL: http://mat.gsia.cmu.edu/trick.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: anuj@nirvana.bus.miami.edu  e-mail: trick+@cmu.edu  
Title: A COLUMN GENERATION APPROACH FOR GRAPH COLORING  
Author: Anuj Mehrotra Michael A. Trick 
Date: April 11, 1995  
Address: Coral Gables, FL 33124-8237  Pittsburgh, PA 15213-3890  
Affiliation: Department of Management Science School of Business Administration University of Miami  Graduate School of Industrial Administration Carnegie Mellon University  
Abstract: We present a method for solving the independent set formulation of the graph coloring problem (where there is one variable for each independent set in the graph). We use a column generation method for implicit optimization of the linear program at each node of the branch-and-bound tree. This approach, while requiring the solution of a difficult subproblem as well as needing sophisticated branching rules, solves small to moderate size problems quickly. We have also implemented an exact graph coloring algorithm based on DSATUR for comparison. Implementation details and computational experience are presented.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Egon Balas and H. Samuelsson. </author> <title> A node covering algorithm. </title> <journal> Naval Research Logistics Quarterly, </journal> <volume> 24(2) </volume> <pages> 213-233, </pages> <year> 1977. </year>
Reference-contexts: Various solution approaches have been tried, including implicit enumeration [6], integer programming with branch and bound [2, 3], and integer programming with cutting planes <ref> [1, 27] </ref>. In addition a number of heuristics have been developed [28] and combined with general heuristic methods such as simulated annealing [13].
Reference: [2] <author> Egon Balas and Jue Xue. </author> <title> Minimum weighted coloring of triangulated graphs, with application to maximum weight vertex packing and clique finding in arbitrary graphs. </title> <journal> SIAM Journal on Computing, </journal> <volume> 20(2) </volume> <pages> 209-221, </pages> <year> 1991. </year>
Reference-contexts: Various solution approaches have been tried, including implicit enumeration [6], integer programming with branch and bound <ref> [2, 3] </ref>, and integer programming with cutting planes [1, 27]. In addition a number of heuristics have been developed [28] and combined with general heuristic methods such as simulated annealing [13].
Reference: [3] <author> Egon Balas and Chang Sung Yu. </author> <title> Finding a maximum clique in an arbitrary graph. </title> <journal> SIAM Journal on Computing, </journal> <volume> 15(4) </volume> <pages> 1054-1068, </pages> <year> 1986. </year>
Reference-contexts: Various solution approaches have been tried, including implicit enumeration [6], integer programming with branch and bound <ref> [2, 3] </ref>, and integer programming with cutting planes [1, 27]. In addition a number of heuristics have been developed [28] and combined with general heuristic methods such as simulated annealing [13].
Reference: [4] <author> Cynthia Barnhart, Ellis L. Johnson, George L. Nemhauser, Martin W. P. Savelsbergh, and Pamela H. Vance. Branch-and-Price: </author> <title> Column Generation for Huge Integer Programs. </title> <institution> School of Industrial & Systems Engineering, Georgia Institute of Technology, </institution> <address> Atlanta, GA 30332-0205, </address> <year> 1994. </year>
Reference-contexts: We resolve this difficulty by using only a subset of the variables and generating more variables as needed. This technique, called column generation, is well known for linear programs and has recently emerged as a viable technique for some integer programming problems <ref> [4, 17] </ref>. The need to generate dual variables (which requires something like linear programming) while still enforcing integrality makes column generation procedures nontrivial for integer programs. The procedures need to be suitably developed and their effectiveness is usually dependent on cleverly exploiting the characteristics of the problem. <p> In our experiments we order the nodes in nonincreasing values of square root of the degree of the node times the weight of the node. Column Management Another approach to optimizing the linear program faster is to generate several columns at every iteration rather than a single column <ref> [4] </ref>. For example, one could use improvement algorithms that take existing columns with reduced cost equal to zero and try to construct columns that might improve the linear program. <p> This tended to reduce the number of columns generated and resulted in exploration of fewer nodes in our experiments. The resulting decrease in overall computation time by not solving the linear programming relaxation to optimality before branching has also been experienced on other combinatorial problems <ref> [4, 31] </ref>. 5.1.2 Branching Methodology In our implementation, we use a depth-first-search (DFS) strategy in choosing the node to evaluate.
Reference: [5] <author> D. Brelaz. </author> <title> New Methods to color the vertices of a graph. </title> <journal> Communications of the ACM, </journal> <volume> 22 </volume> <pages> 251-256, </pages> <year> 1979. </year>
Reference-contexts: This tends to increase the overall effort. 5.2 DSATUR In addition to our column generation approach to graph coloring, we have implemented an exact graph coloring algorithm based on the DSATUR algorithm first developed by Brelaz <ref> [5] </ref>. We will use this algorithm as a comparison code to determine the effectiveness of column generation. DSATUR works by dividing a graph coloring instance into a series of subproblems. A subproblem in DSATUR is a partial coloration of the graph. <p> The algorithm terminates when there are no subproblems left. At this point, UB give the coloring number of the graph. The choice of branch node i can have a large effect on the algorithm. In a heuristic, Brelez <ref> [5] </ref> suggests choosing the node adjacent to the largest number of differently colored nodes. This has the effect of reducing the number of subproblems created at each branch. Ties can be broken by choosing a node with highest degree in the uncolored subgraph.
Reference: [6] <author> R. Carraghan and P. M. Pardalos. </author> <title> An exact algorithm for the maximum clique problem. </title> <journal> Operations Research Letters, </journal> <volume> 9 </volume> <pages> 375-382, </pages> <year> 1990. </year>
Reference-contexts: Various solution approaches have been tried, including implicit enumeration <ref> [6] </ref>, integer programming with branch and bound [2, 3], and integer programming with cutting planes [1, 27]. In addition a number of heuristics have been developed [28] and combined with general heuristic methods such as simulated annealing [13]. <p> For instance, if the total weight of the set examined is less than the incumbent, the incumbent is necessarily better, so it is unnecessary to continue the recursion. 4. Use a faster code for smaller problems. It appears that a weighted version of the method of Carraghan and Pardalos <ref> [6] </ref> is faster for smaller problems, particularly when it is able to terminate when it is clear that no independent set is available that is better than the incumbent.
Reference: [7] <author> Fred C. Chow and John L. Hennessy. </author> <title> Register allocation by priority-based coloring. </title> <booktitle> In Proceedings of the ACM SIGPLAN 84 Symposium on Compiler Construction, </booktitle> <pages> pages 222-232, </pages> <address> New York, NY, 1984. </address> <publisher> ACM. </publisher>
Reference-contexts: 1 INTRODUCTION The graph coloring problem is one of the most useful models in graph theory. This problem has been used to solve problems in school timetabling [10], computer register allocation <ref> [7, 8] </ref>, electronic bandwidth allocation [11], and many other areas. These applications suggest that effective algorithms for solving the graph coloring problem would be of great importance. Despite this relevance, there are relatively few methods available for solving graph coloring instances exactly.
Reference: [8] <author> Fred C. Chow and John L. Hennessy. </author> <title> The priority-based coloring approach to register allocation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4) </volume> <pages> 501-536, </pages> <year> 1990. </year>
Reference-contexts: 1 INTRODUCTION The graph coloring problem is one of the most useful models in graph theory. This problem has been used to solve problems in school timetabling [10], computer register allocation <ref> [7, 8] </ref>, electronic bandwidth allocation [11], and many other areas. These applications suggest that effective algorithms for solving the graph coloring problem would be of great importance. Despite this relevance, there are relatively few methods available for solving graph coloring instances exactly.
Reference: [9] <author> Anne Condon. </author> <title> DIMACS Challenge 1994. </title>
Reference-contexts: Register Graphs One standard application of graph coloring is register allocation. In this problem, a compiler is attempting to assign variables to registers. Two variables can be assigned to the same register if they are not both required at the same time in a code fragment. Condon <ref> [9] </ref> has developed a program that takes code fragments and generates the corresponding graph coloring problem. Geometric Graphs A different type of random graph is created by generating 2n random numbers in the range (0,1) and treating pairs number as coordinates in the Euclidean unit square.
Reference: [10] <author> D. De Werra. </author> <title> An introduction to timetabling. </title> <journal> European Journal of Operations Research, </journal> <volume> 19 </volume> <pages> 151-162, </pages> <year> 1985. </year>
Reference-contexts: 1 INTRODUCTION The graph coloring problem is one of the most useful models in graph theory. This problem has been used to solve problems in school timetabling <ref> [10] </ref>, computer register allocation [7, 8], electronic bandwidth allocation [11], and many other areas. These applications suggest that effective algorithms for solving the graph coloring problem would be of great importance. Despite this relevance, there are relatively few methods available for solving graph coloring instances exactly.
Reference: [11] <author> Andreas Gamst. </author> <title> Some lower bounds for a class of frequency assignment problems. </title> <journal> IEEE Transactions of Vehicular Echnology, </journal> <volume> 35(1) </volume> <pages> 8-14, </pages> <year> 1986. </year>
Reference-contexts: 1 INTRODUCTION The graph coloring problem is one of the most useful models in graph theory. This problem has been used to solve problems in school timetabling [10], computer register allocation [7, 8], electronic bandwidth allocation <ref> [11] </ref>, and many other areas. These applications suggest that effective algorithms for solving the graph coloring problem would be of great importance. Despite this relevance, there are relatively few methods available for solving graph coloring instances exactly. Those that are available ([21, 22]) are limited to solving small instances.
Reference: [12] <author> Martin Gardner. </author> <title> The Unexpected Hanging and Other Mathematical Diversions. </title> <publisher> Simon and Schuster, </publisher> <address> New York, </address> <year> 1969. </year>
Reference-contexts: Gardner <ref> [12] </ref> states without proof that this is the case if and only if n is not divisible by either 2 or 3. In all cases, the maximum clique in the graph is no more than n, and the coloring value is no less than n.
Reference: [13] <author> Mark Jerrum. </author> <title> Large cliques elude the metropolis process. Random Structures and Algorithms, </title> <booktitle> 3(4) </booktitle> <pages> 347-360, </pages> <year> 1992. </year>
Reference-contexts: Various solution approaches have been tried, including implicit enumeration [6], integer programming with branch and bound [2, 3], and integer programming with cutting planes [1, 27]. In addition a number of heuristics have been developed [28] and combined with general heuristic methods such as simulated annealing <ref> [13] </ref>. In this section, we outline a simple recursive algorithm based on the work of [20] and describe a simple greedy heuristic that can be used to reduce the need for the recursive algorithm.
Reference: [14] <author> David S. Johnson. </author> <title> Approximation algorithms for combinatorial problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 9 </volume> <pages> 256-278, </pages> <year> 1974. </year>
Reference: [15] <author> David S. Johnson. </author> <title> Worst-case behavior of graph coloring algorithms. </title> <booktitle> In Proceedings 5th Southeastern Conference on Combinatorics, Graph Theory, and Computing, </booktitle> <pages> pages 513-527, </pages> <address> Winnipeg, Canada, 1974. </address> <publisher> Utilitas Mathematica Publishing. </publisher>
Reference: [16] <author> Ellis L. Johnson. </author> <title> Modeling and strong linear programs for mixed integer programming. S.W. Wallace (ed.). Algorithms and Model Formulations in Mathematical Programming, </title> <booktitle> NATO ASI Series 51, </booktitle> <year> 1989. </year>
Reference-contexts: The minimum coloring problem is then the following (denoted (IS)): M inimize X x s Subject to X x s 1 8 i 2 V This formulation can also be obtained from the first formulation by using a suitable decomposition scheme as explained in <ref> [16, 24] </ref> in the context of general mixed integer programs. The formulation (IS) has only one constraint for each vertex, but can have a tremendous number of variables. Note that a feasible solution to (IS) may assign multiple labels to a vertex.
Reference: [17] <author> Ellis L. Johnson, Anuj Mehrotra, and George L. Nemhauser. </author> <title> Min-cut clustering. </title> <journal> Math Programming, </journal> <volume> 62 </volume> <pages> 133-151, </pages> <year> 1993. </year>
Reference-contexts: We resolve this difficulty by using only a subset of the variables and generating more variables as needed. This technique, called column generation, is well known for linear programs and has recently emerged as a viable technique for some integer programming problems <ref> [4, 17] </ref>. The need to generate dual variables (which requires something like linear programming) while still enforcing integrality makes column generation procedures nontrivial for integer programs. The procedures need to be suitably developed and their effectiveness is usually dependent on cleverly exploiting the characteristics of the problem. <p> Instead, we find the best integer solution from among the columns accumulated at the root node of the branch-and-bound tree. We refer to this restricted program at the root node as the restricted integer program (RIP). This type of heuristic has been successfully used for clustering problems in <ref> [17] </ref>. The strength of this branching method is another important observation. Very few nodes are explored in the branch-and-bound tree.
Reference: [18] <author> Donald E. Knuth. </author> <title> The Stanford GraphBase. </title> <publisher> ACM Press, Addison Wesley, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: Book Graphs Given a work of literature, a graph is created where each node represents a character. Two nodes are connected by an edge if the corresponding characters encounter each other in the book. Knuth <ref> [18] </ref> creates the graphs for five classic works: Tolstoy's Anna Karenina (anna), Dicken's David Copperfield (david), Homer's Iliad (homer), Twain's Huckleberry Finn (huck), and Hugo's Les Miserables (jean). <p> Game Graphs A graph representing the games played in a college football season can be represented by a graph where the nodes represent each college team. Two teams are connected by an edge if they played each other during the season. Knuth <ref> [18] </ref> gives the graph for the 1990 college football season. 10 Miles Graphs These graphs are similar to geometric graphs in that nodes are placed in space with two nodes connected if they are close enough. These graphs, however, are not random. <p> These graphs, however, are not random. The nodes represent a set of United States cities and the distance between them is given by by road mileage from 1947. These graphs are also due to Kuth <ref> [18] </ref>. Queen Graphs Given an n by n chessboard, a queen graph is a graph on n 2 nodes, each corresponding to a square of the board. Two nodes are connected by an edge if the corresponding squares are in the same row, column, or diagonal.
Reference: [19] <author> S.M. Korman. </author> <title> The graph-coloring problem. </title> <editor> In N. Christophides, P. Toth, and C. Sandi, editors, </editor> <booktitle> Combinatorial Optimization, </booktitle> <pages> 211-235, </pages> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: In a heuristic, Brelez [5] suggests choosing the node adjacent to the largest number of differently colored nodes. This has the effect of reducing the number of subproblems created at each branch. Ties can be broken by choosing a node with highest degree in the uncolored subgraph. Korman <ref> [19] </ref> recommended using this within the optimization routine, and Kubale and Jackowski [21] confirm that this is an effective choice in their experiment. A further modification is suggested by Sewell [30]. If the first k nodes colored form a clique, then it is clear that they will never be recolored.
Reference: [20] <author> Bassam N. Khoury and Panos M. Pardalos. </author> <title> An algorithm for finding the maximum clique on an arbitrary graph. DIMACS Challenge, </title> <year> 1993. </year>
Reference-contexts: In addition a number of heuristics have been developed [28] and combined with general heuristic methods such as simulated annealing [13]. In this section, we outline a simple recursive algorithm based on the work of <ref> [20] </ref> and describe a simple greedy heuristic that can be used to reduce the need for the recursive algorithm. <p> This insight, first examined by <ref> [20] </ref> for the unweighted case, leads to the following recursion which can be turned into a full program: MWIS (G [ fig) = max (MWIS (G),MWIS (fig [ AN (i))). While this approach is reasonably effective for not-too-sparse graphs, it can be improved by appropriately ordering the vertices.
Reference: [21] <author> M. Kubale and B. Jackowski. </author> <title> A generalized implicit enumeration algorithm for graph coloring. </title> <journal> Communications of the ACM, </journal> <volume> 28 </volume> <pages> 412-418, </pages> <year> 1985. </year>
Reference-contexts: This has the effect of reducing the number of subproblems created at each branch. Ties can be broken by choosing a node with highest degree in the uncolored subgraph. Korman [19] recommended using this within the optimization routine, and Kubale and Jackowski <ref> [21] </ref> confirm that this is an effective choice in their experiment. A further modification is suggested by Sewell [30]. If the first k nodes colored form a clique, then it is clear that they will never be recolored.
Reference: [22] <author> M. Kubale and E. Kusz. </author> <title> Computational experience with implicit enumeration algorithms for graph coloring. </title> <editor> In M. Nagl and J. Perl, editors, </editor> <booktitle> Proceedings of the WG'83 International Workshop on Graphtheoretic Concepts in Computer Science, </booktitle> <pages> pages 167-176, </pages> <address> Linz, 1983. </address> <publisher> Trauner Verlag. </publisher>
Reference: [23] <author> Michael Larsen, James Propp, and Daniel Ullman. </author> <title> The fractional chromatic number of a graph and a construction of Mycielski. </title> <type> preprint, </type> <year> 1994. </year>
Reference-contexts: Larson, Propp, and Ullman <ref> [23] </ref> show that as long as G has at least one edge, the size of the largest clique in the graph is not affected by this transformation. They also show that the coloring number goes up by one.
Reference: [24] <author> Anuj Mehrotra. </author> <title> Constrained Graph Partitioning: Decomposition, Polyhedral Structure and Algorithms. </title> <type> Ph.D. Thesis, </type> <institution> Georgia Institute of Technology, </institution> <address> Atlanta, GA, </address> <year> 1992. </year>
Reference-contexts: The minimum coloring problem is then the following (denoted (IS)): M inimize X x s Subject to X x s 1 8 i 2 V This formulation can also be obtained from the first formulation by using a suitable decomposition scheme as explained in <ref> [16, 24] </ref> in the context of general mixed integer programs. The formulation (IS) has only one constraint for each vertex, but can have a tremendous number of variables. Note that a feasible solution to (IS) may assign multiple labels to a vertex. <p> This formulation exhibits much less symmetry than (VC): vertices are combined into independent sets and forcing an independent set to 0 means that no color can correspond to that independent set. Furthermore, it is easy to show <ref> [24] </ref> that the bound provided by the linear relaxation of (IS) will at least be as good as the bound provided by the linear relaxation of (VC). The fact remains, however, that (IS) can have far more variables than can be reasonably attacked directly.
Reference: [25] <author> Craig Morgenstern and Harry Shapiro. </author> <title> Coloration neighborhood structures for general graph coloring. </title> <booktitle> In First Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <year> 1990. </year> <month> 19 </month>
Reference: [26] <author> J. Mycielski. </author> <title> Sur le coloriage des graphes. </title> <journal> Colloquim Mathematiques, </journal> <volume> 3 </volume> <pages> 161-162, </pages> <year> 1955. </year>
Reference-contexts: Mycielski Graphs Given a graph G with vertex set fv 1 ; v 2 ; : : : ; v n g, we can get the My-cielski transformation <ref> [26] </ref> (G) of G by creating a graph with vertex set fx 1 ; x 2 ; : : : ; x n ; y 1 ; y 2 ; : : : ; y n ; zg and edges x i x j if and only if v i v
Reference: [27] <author> George L. Nemhauser and Les E. Trotter. </author> <title> Vertex packings: Structural properties and algorithms. </title> <journal> Mathematical Programming, </journal> <volume> 8 </volume> <pages> 232-248, </pages> <year> 1975. </year>
Reference-contexts: Various solution approaches have been tried, including implicit enumeration [6], integer programming with branch and bound [2, 3], and integer programming with cutting planes <ref> [1, 27] </ref>. In addition a number of heuristics have been developed [28] and combined with general heuristic methods such as simulated annealing [13].
Reference: [28] <author> B. Pittel. </author> <title> On the probable behaviour of some algorithms for finding the stability number of a graph. </title> <booktitle> Mathematical Proceedings of the Cambridge Philosophical Society, </booktitle> <volume> 92 </volume> <pages> 511-526, </pages> <year> 1982. </year>
Reference-contexts: Various solution approaches have been tried, including implicit enumeration [6], integer programming with branch and bound [2, 3], and integer programming with cutting planes [1, 27]. In addition a number of heuristics have been developed <ref> [28] </ref> and combined with general heuristic methods such as simulated annealing [13]. In this section, we outline a simple recursive algorithm based on the work of [20] and describe a simple greedy heuristic that can be used to reduce the need for the recursive algorithm.
Reference: [29] <author> Martin W.P. Savelsbergh and George L. Nemhauser. </author> <title> Functional description of MINTO, a Mixed INTeger Optimizer. </title> <institution> School of Industrial & Systems Engineering, Georgia Institute of Technology, </institution> <address> Atlanta, GA 30332-0205, </address> <year> 1993. </year>
Reference-contexts: This approach has the advantage of creating only 2 subproblems like traditional branching schemes. 5 IMPLEMENTATION DETAILS 5.1 Column Generation Methodology The methodology has been implemented on a DEC ALPHA 3000 (Model 300) workstation using CPLEX version 2.1 as the linear programming solver and MINTO version 1.5 <ref> [29] </ref> as the integer programming solver. Currently, we generate a feasible initial coloring using a greedy heuristic (essentially applying the greedy MWIS heuristic repeatedly until all nodes are colored).
Reference: [30] <author> Edward C. Sewell. </author> <title> An Improved Algorithm for Exact Graph Coloring. </title> <note> To appear, DIMACS Series on Discrete Mathematics and Theoretical Computer Science, </note> <year> 1995. </year>
Reference-contexts: Ties can be broken by choosing a node with highest degree in the uncolored subgraph. Korman [19] recommended using this within the optimization routine, and Kubale and Jackowski [21] confirm that this is an effective choice in their experiment. A further modification is suggested by Sewell <ref> [30] </ref>. If the first k nodes colored form a clique, then it is clear that they will never be recolored. This suggests that it would be useful to find a maximum clique in the graph and color those nodes first.
Reference: [31] <author> P.H. Vance, C. Barnhart, E.L. Johnson, and G.L. Nemhauser. </author> <title> Solving Binary Cutting Stock Problems by Column Generation and Branch-and-Bound. </title> <note> Computational Optimization and Applications, to appear, 1994. 20 </note>
Reference-contexts: This tended to reduce the number of columns generated and resulted in exploration of fewer nodes in our experiments. The resulting decrease in overall computation time by not solving the linear programming relaxation to optimality before branching has also been experienced on other combinatorial problems <ref> [4, 31] </ref>. 5.1.2 Branching Methodology In our implementation, we use a depth-first-search (DFS) strategy in choosing the node to evaluate.
References-found: 31

