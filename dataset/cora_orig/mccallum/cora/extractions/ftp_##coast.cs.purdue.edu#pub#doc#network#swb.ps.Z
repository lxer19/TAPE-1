URL: ftp://coast.cs.purdue.edu/pub/doc/network/swb.ps.Z
Refering-URL: http://www.cs.purdue.edu/coast/archive/data/categ30.html
Root-URL: http://www.cs.purdue.edu
Title: A Reliable and Secure UNIX Connection Service  
Author: Dennis Draheim Barton Miller Steven Snyder 
Address: 1210 W. Dayton Street Madison, Wisconsin 53706  
Affiliation: Computer Sciences Department University of Wisconsin  
Abstract: Distributed programs require a method for processes residing on different machines to identify each other and establish communication. One method is to provide a special connection service to perform this task. A good connection service should be easy to use. It should allow arbitrary processes to connect to each other as well as helping client processes to connect to server processes. It should provide location transparency; that is, the programmer should not have to know the network address of a process to connect to it. The connection service should be reliable. It should provide a way for a process to establish the identity of the user associated with the process to which it has connected, and to communicate securely with that process. We have implemented a connection service for Berkeley UNIX that is reliable, available, secure, and easy to use. The connection service achieves ease of use through a simple interface based on the library routine meet. Meet allows one process to connect to another by specifying arbitrary names for itself and the other process. The connection service imposes no naming conventions of its own so it can be used with most name spaces and naming services. The service is location-transparent. It also provides a routine for posting services. Reliable and available service is provided by replicating connection servers. Each server knows about all pending connection requests. The connection service provides continuous service as long as at least one server is running. Connections can be authenticated by an authentication server that works in cooperation with the connection server. Secure communication is achieved via the RSA public-key encryption algorithm. The connection server was put in regular use in June 1986. Our limited experience indicates that it satisfies an important need of UNIX users. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. Joy, E. Cooper, R. Fabry, S. Leffler, K. McKusick, and D. </author> <title> Mosher, ``4.2BSD System Manual,'' </title> <institution> Computer Systems Research Group Technical Report, University of California, </institution> <address> Berkeley (July 1983). </address>
Reference-contexts: Authentication and security are optional in our system. We do not force all users to communicate in a secure fashion; users choose between security and high performance. The switchboard was designed for a network of heterogeneous machines running Berkeley 4.3 BSD UNIX <ref> [1] </ref>. We assume the existence of trusted hosts in the network, but not all hosts are trusted. A trusted host in one in which the users do not have physical access. We do not assume that the network itself can be trusted.
Reference: [2] <author> Forest Baskett, John H. Howard, and John T. Montague, </author> <title> ``Task Communication in DEMOS,'' </title> <booktitle> Proceedings of the 6th SOSP, Operating Systems Review 11(5) pp. </booktitle> <month> 23-31 (November </month> <year> 1977). </year>
Reference-contexts: We assume both processes participating in a communication are on-line at the same time. 3 Several operating systems have connection services. In the DEMOS operating system <ref> [2] </ref>, the connection service, or switchboard, accepts a request for connection to a process and returns a one-way communication channel that points to the desired process. The DEMOS switchboard is used mainly by operating system processes at system configuration time and has no reliability or authentication features.
Reference: [3] <author> Yeshayahu Artsy, Hun-Yang Chang, and Raphael Finkel, </author> <title> ``Charlotte: Design and Implementation of a Distributed Kernel,'' </title> <institution> Computer Science Technical Report #554, University of Wisconsin, Madison, </institution> <note> Wisconsin (August 1984). </note>
Reference-contexts: The DEMOS switchboard is used mainly by operating system processes at system configuration time and has no reliability or authentication features. The Charlotte operating system <ref> [3] </ref> features a switchboard that acts as a connector for client/server connections only, but otherwise is similar to the DEMOS switchboard. Matchmaker [4], a connection server for 8th Edition UNIX, provides a network-independent connection service based on streams.
Reference: [4] <author> David L. Presotto, ``Matchmaker: </author> <title> The Eighth Edition Unix Connection Service,'' </title> <booktitle> Proceedings of the 1986 European Unix Users Group Conference, </booktitle> <address> Florence, Italy, </address> <month> (April </month> <year> 1986). </year>
Reference-contexts: The DEMOS switchboard is used mainly by operating system processes at system configuration time and has no reliability or authentication features. The Charlotte operating system [3] features a switchboard that acts as a connector for client/server connections only, but otherwise is similar to the DEMOS switchboard. Matchmaker <ref> [4] </ref>, a connection server for 8th Edition UNIX, provides a network-independent connection service based on streams. Matchmaker allows processes to establish connections using the standard UNIX file I/O primitives. Our switchboard design was influenced by name servers that were designed to provide reliable service.
Reference: [5] <author> Andrew D. Birrell, Roy Levin, Roger M. Needham, and Michael D. Schroeder, ``Grapevine: </author> <title> An Exercise in Distributed Computing,'' </title> <journal> Communications of the ACM 25(5) pp. </journal> <month> 260-274 (April </month> <year> 1982). </year>
Reference-contexts: Matchmaker [4], a connection server for 8th Edition UNIX, provides a network-independent connection service based on streams. Matchmaker allows processes to establish connections using the standard UNIX file I/O primitives. Our switchboard design was influenced by name servers that were designed to provide reliable service. Grapevine <ref> [5] </ref> provides a replicated naming, authentication, and mail service for a distributed environment. The Clearinghouse system [6] binds names to network locations of objects. It also uses replication to provide reliability.
Reference: [6] <author> Darek C. Oppen and Yogen K. Dalel, </author> <title> ``The Clearinghouse: A Decentralized Agent for Locating Named Objects in a Distributed Environment,'' </title> <note> XEROX Technical Report OPD-T8103 (October 1971). </note>
Reference-contexts: Matchmaker allows processes to establish connections using the standard UNIX file I/O primitives. Our switchboard design was influenced by name servers that were designed to provide reliable service. Grapevine [5] provides a replicated naming, authentication, and mail service for a distributed environment. The Clearinghouse system <ref> [6] </ref> binds names to network locations of objects. It also uses replication to provide reliability. The goal of both of these systems is to provide continuous service in the face of any single server failure.
Reference: [7] <author> Bradley Taylor and David Goldberg, </author> <title> ``Secure Networking in the Sun Environment,'' </title> <booktitle> Proceedings of the Summer Usenix Conference, </booktitle> <pages> pp. </pages> <address> 28-37 Atlanta, Georgia, </address> <month> (June </month> <year> 1986). </year>
Reference-contexts: The goal of both of these systems is to provide continuous service in the face of any single server failure. The switchboard's goal is to provide continuous service as long as there is at least one functioning server. Related work in authentication and security includes the secure NFS system <ref> [7] </ref> developed by SUN Microsys-tems, which uses both public keys and DES encryption to achieve security. The SUN system is limited to authentication of login requests, and does not deal with secure interprocess communication.
Reference: [8] <author> R. L. Rivest, A. Shamir, and L. Adleman, </author> <title> ``A Method for Obtaining Digital Signatures and Public-Key Cryptosystems,'' </title> <journal> Communications of the ACM 21(2) pp. </journal> <month> 120-126 (February </month> <year> 1978). </year>
Reference-contexts: Inserting a key is a relative infrequent event, typically corresponding to the addition of a new user to the system. If the name is not authenticated, the administrator can delete the entry. 9 2.2.3. Encryption Algorithm The switchboard's encryption method is an implementation of the public-key encryption algorithm, RSA <ref> [8] </ref>. We chose RSA because it has (so far) proven itself safe and can easily be extended to compensate for improving technology by increasing the size of the keys.
Reference: [9] <author> Roger M. Needham and Michael D. Schroeder, </author> <title> ``Using Encryption for Authentication in Large Networks of Computers,'' </title> <journal> Communications of the ACM 21(12) pp. </journal> <month> 993-999 (December </month> <year> 1978). </year>
Reference-contexts: This protocol is based on the public-key protocol presented in <ref> [9] </ref>, and [10] with the addition of the switchboard connection messages. Figure 4 summarizes the protocol. 2.2.5. Initial Key Distribution Any security mechanism that depends on keys has the problem of how to distribute the initial keys.
Reference: [10] <author> Gerald J. Popek and Charles S. Kline, </author> <title> ``Encryption and Secure Computer Networks,'' </title> <journal> Computing Surveys 11(4) pp. </journal> <month> 331-356 (December </month> <year> 1979). </year>
Reference-contexts: This protocol is based on the public-key protocol presented in [9], and <ref> [10] </ref> with the addition of the switchboard connection messages. Figure 4 summarizes the protocol. 2.2.5. Initial Key Distribution Any security mechanism that depends on keys has the problem of how to distribute the initial keys.
Reference: [11] <author> Mitali Bhattacharyya, David Cohrs, and Barton Miller, </author> <title> ``The Implementation of a Visual UNIX Process Connector,'' </title> <note> Computer Sciences Technical Report, University of Wisconsin (August 1986). </note>
Reference-contexts: When this analysis is completed, we will verify that the code that implements the servers matches the protocol specification. Results from this study will appear in a future paper. The switchboard service is currently being used by several projects, including UPCONN, a graphic layout tool for distributed programs <ref> [11] </ref>. The switchboard simplified UPCONN's task of establishing the connections needed to execute the distributed program. 5. Future Work The switchboard has been in use since June 1986. Our experience with the switchboard has indicated the need for some additions and changes.
References-found: 11

