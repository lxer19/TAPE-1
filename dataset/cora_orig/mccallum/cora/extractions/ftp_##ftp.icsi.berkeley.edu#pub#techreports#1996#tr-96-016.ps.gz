URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1996/tr-96-016.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1996.html
Root-URL: http://www.icsi.berkeley.edu
Email: (dora@univaq.it)  (rosalba@altair.math.unipa.it)  
Title: Deterministic Generalized Automata  
Phone: (510) 643-9153 FAX (510) 643-7684  
Author: Dora Giammarresi Rosa Montalbano 
Note: Work partially supported by the ESPRIT II Basic Research Actions Program of the EC under Project ASMICS 2 (contract No. 6317) and in part by MURST under project 40% Algoritmi,  Strutture Informative. Work partially done while visiting the International  Partially supported by a research fellowship by Consiglio Nazionale delle Ricerche (CNR), Grant n.201.01.121.  
Web: TR-96-016  
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  via Vetoio, loc. Coppito, 67100 L'Aquila, ITALY  via Archirafi 34, 90123 Palermo, ITALY  CA.  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  Dipartimento di Matematica Pura ed Applicata, Universita di L'Aquila  Dipartimento di Matematica e Applicazioni, Universita di Palermo  Modelli di Calcolo,  Computer Science Institute (ICSI) Berkeley,  
Abstract: A generalized automaton (GA) is a finite automaton where the single transitions are defined on words rather than on single letters. Generalized automata were considered by K. Hashiguchi who proved that the problem of calculating the size of a minimal GA is decidable. We define the model of deterministic generalized automaton (DGA) and study the problem of its minimization. A DGA has the restriction that, for each state, the sets of words corresponding to the transitions of that state are prefix sets. We solve the problem of calculating the number of states of a minimal DGA for a given language, by giving a procedure that effectively constructs a minimal DGA starting from the minimal equivalent (conventional) deterministic automaton. 
Abstract-found: 1
Intro-found: 1
Reference: [AHU] <author> A. Aho, J. E. Hopcroft and J. D. Ullman, </author> <title> The Design and the Analysis of Computer Algorithm (Addison-Wesley, </title> <address> Reading, MA 1974). </address>
Reference: [BP85] <author> J. Berstel and D. </author> <title> Perrin, </title> <publisher> Theory of Codes (Academic Press, </publisher> <year> 1985). </year> <month> 17 </month>
Reference-contexts: Otherwise, W q (r) = X (r; q) W (q) [ X (r; q), and, since (X (r; q); X (r; q)) is a partition of a prefix set and W (q) is prefix then W q (r) is prefix (see Proposition 4.1 in <ref> [BP85] </ref>). It remains to prove that A and A q recognize the same language.
Reference: [C86] <author> M.Chrobak, </author> <title> Finite automata and unary languages, </title> <note> Theoret. Comp. Science 47 (1986) 149-158. </note>
Reference-contexts: Moreover, in last years, there have been many attemps to define particular "normal forms" for non-deterministic automata which solve the problems of unicity and calculability of the minimal automaton (for more details see, for example, <ref> [C86, JMR] </ref>). When we restrict the minimization problem to deterministic automata, everything becames easier to handle. A minimal deterministic automaton for a given language L is an automaton with minimal number of states among all equivalent deterministic automata accepting L.
Reference: [E74] <author> S. Eilenberg, </author> <title> Automata, </title> <journal> Languages and Machines, </journal> <volume> Vol. </volume> <publisher> A (Academic Press, </publisher> <year> 1974). </year>
Reference-contexts: Deterministic and non-deterministic automata recognize the same family of languages: that is, given any non-deterministic automaton it can be constructed an equivalent deterministic automaton (see, for example, [HU79]). For the sequel we will assume to deal with trim automata (see <ref> [E74] </ref>, p.23 for the formal definition) that is automata whose states are all accessible and co-accessible (i.e. all the states are in some path from an initial to a final state). <p> For the sequel we will refer to the model of automaton described in previous sections as "conventional automaton" while this more general model will be referred as "generalized automaton". Generalized automata were introduced by Eilenberg in <ref> [E74] </ref> and they can be formally defined as follows. <p> This is related with the decomposition of a regular language in unitary components ( <ref> [E74] </ref>). 16 As final observation, notice that the S-reductions can be defined as well for non-deterministic GA. They still give equivalent GA but in general we do not know whether there exists a procedure that compute a minimal non-deterministic (generalized) automaton.
Reference: [GH94] <author> N. Globerman and D. Harel, </author> <title> Complexity results for multi-pebble automata and their logics, </title> <booktitle> in:Proc. ICALP'94), Lecture Notes in Computer Science, </booktitle> <volume> Vol. </volume> <publisher> 820 (Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994) </year> <month> 73-82. </month>
Reference-contexts: In the case of finite automata, very recently, Harel et al. studied exponential discrepancies in the succinctness of finite automata when augmented by combinations of various additional mechanisms like alternation (i.e. both universal and existential branching), concurrency, "two-wayness" and pebbles (see <ref> [GH94] </ref>). We conclude the paper by discussing problems of discrepancy in succinctness between non-deterministic and deterministic versions of generalized automata and give some open problems. Part of the results of this paper appeared already in [GM95]. 2 Preliminaries In this section we give first some terminology on languages and automata.
Reference: [H91] <author> K. Hashigushi, </author> <title> Algorithms for determining the smallest number of nonterminals (states) sufficient for generating (accepting) a regular language, </title> <booktitle> in: Proc. (ICALP'91), Lecture Notes in Computer Science, </booktitle> <volume> Vol. </volume> <publisher> 510 (Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1991) </year> <month> 641-648. </month>
Reference-contexts: In this context, Hashiguchi in 1991 investigated the problem of computing the size of the minimal representation of a given regular language in the model of generalized automata (see <ref> [H91] </ref>). In particular, he proved that the problem of calculating the number of states of a minimal GA is actually decidable. A strictly related problem consists of effectively computing a minimal representation of a given language in a model. <p> Moreover, the language S fl can be recognized by a GA with one state only. Generalized automata were considered by Hashiguchi in <ref> [H91] </ref>. He studied the problem of calculating the number of states of a minimal generalized automaton for a given language and proved that this problem is decidable. If A is a GA, denote by D (A) the maximal length of the labels of the edges in A. <p> Calculate the minimal conventional deterministic automaton M for L. 2. Calculate a maximal set of states S that induces a maximal acyclic subgraph in M . 3. Then, n = jQ M j jSj. This algorithm solves, in the deterministic setting, the corresponding problem studied by Hashiguchi in <ref> [H91] </ref>. In fact, let m be the number of states of the minimal automaton M and let N be the minimal DGA calculated by the above algorithm. Then, the maximal length of the labels in the edges of N (called D (N ) in [H91]) is at most equal to the <p> corresponding problem studied by Hashiguchi in <ref> [H91] </ref>. In fact, let m be the number of states of the minimal automaton M and let N be the minimal DGA calculated by the above algorithm. Then, the maximal length of the labels in the edges of N (called D (N ) in [H91]) is at most equal to the number of states suppressed in M plus 1 (see Remark 5.1), that is D (N ) m. Differently from the case of conventional deterministic automata, the following theorem holds. <p> In particular we have given a procedure that effectively constructs a minimal DGA starting from the minimal equivalent (conventional) deterministic automaton. This gives a solution, in the deterministic setting, for the corresponding problem studied by Hashiguchi in <ref> [H91] </ref>. The size of a minimal representation of a language in a given model is related to the comparisons of different models according to their intrinsic succinctness. The primary terms of comparisons are always the deterministic and the non-deterministic versions.
Reference: [HU79] <author> J. E. Hopcroft and J. D. Ullman, </author> <title> Introduction to Automata Theory, Languages and Computation (Addison-Wesley, </title> <address> Reading, MA 1979). </address>
Reference-contexts: In the case of conventional deterministic finite automata, it can be proved that the minimal automaton is unique and an algorithm to calculate it starting from any equivalent deterministic automaton can be obtained using the Myhill-Nerode's theorem (see, for example, <ref> [HU79] </ref>). For non-deterministic automata there are only partial results stating that there is no unique minimal automaton but there are no constructive procedures for computing it, excepting the one that lists all possible automata. <p> Deterministic and non-deterministic automata recognize the same family of languages: that is, given any non-deterministic automaton it can be constructed an equivalent deterministic automaton (see, for example, <ref> [HU79] </ref>). For the sequel we will assume to deal with trim automata (see [E74], p.23 for the formal definition) that is automata whose states are all accessible and co-accessible (i.e. all the states are in some path from an initial to a final state). <p> Notice that, in general, a minimal deterministic automaton has many more states than the corresponding non-deterministic one. Given a deterministic automaton A = (; Q; i; F; E), there is a unique minimal deterministic automaton equivalent to a A and it can be to obtained as follows (see <ref> [HU79] </ref> or [P90] for more details). <p> Two states p; q 2 Q are indistinguishable (write p ~ q) if L pF = L qF . Notice that the above definition of indistinguishability among states is an extension to generalized automata of the corresponding definition for conventional automata (cf. Section 2.2 or <ref> [HU79] </ref>). The indistinguishability ~ is an equivalence relation over the set of states Q.
Reference: [GM95] <author> D. Giammarresi and R. Montalbano, </author> <title> Deterministic Generalized Automata, </title> <booktitle> in: Proc. XII Symposium on Theoretical Aspects of Computer Science (STACS '95). Lecture Notes in Computer Science, </booktitle> <volume> Vol. </volume> <publisher> 900 (Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1995) </year> <month> 325-336. </month>
Reference-contexts: We conclude the paper by discussing problems of discrepancy in succinctness between non-deterministic and deterministic versions of generalized automata and give some open problems. Part of the results of this paper appeared already in <ref> [GM95] </ref>. 2 Preliminaries In this section we give first some terminology on languages and automata. Then we recall some definitions, properties and problems related to the minimization of finite automata.
Reference: [JMR] <author> Tao Jang, E. McDowell and B. Ravikumar, </author> <title> The structure and complexity of minimal NFA's over a unary alphabet, </title> <institution> Tech.Report, University of Rhode Island (TR-200-90). </institution>
Reference-contexts: Moreover, in last years, there have been many attemps to define particular "normal forms" for non-deterministic automata which solve the problems of unicity and calculability of the minimal automaton (for more details see, for example, <ref> [C86, JMR] </ref>). When we restrict the minimization problem to deterministic automata, everything becames easier to handle. A minimal deterministic automaton for a given language L is an automaton with minimal number of states among all equivalent deterministic automata accepting L.
Reference: [JR91] <author> Tao Jiang and B. Ravikumar, </author> <title> Minimal NFA problems are hard, </title> <note> SIAM Journal on Computing 22 (1995) 1117-1141. </note>
Reference-contexts: For non-deterministic automata there are only partial results stating that there is no unique minimal automaton but there are no constructive procedures for computing it, excepting the one that lists all possible automata. In <ref> [JR91] </ref> the computational complexity of different problems concerning minimization is studied in a general setting for non-deterministic automata and it is proved that all these problems are computationally hard. In this paper we introduce the model of deterministic generalized automata (DGA) and deal with the minimization problem for this model. <p> The best we can do is to compute all possible non-deterministic automata in an incremental fashion (starting with a one-state automaton and adding states) until we find one that recognizes the given language. In <ref> [JR91] </ref> many problems regarding minimization of non-deterministic automata are investigated, and it is proved that they are all computationally hard.
Reference: [LY80] <author> J. M. Lewis and M. Yannakakis, </author> <title> The node-deletion problem for hereditary properties is NP-complete, </title> <journal> Journal of Comp. </journal> <note> and System Science 20 (1980) 219-230. </note>
Reference-contexts: We conclude this section by remarking that, given an automaton A, the problem of finding a maximum set of states S as required by Theorem 5.1 is NP-complete. In fact, it is strictly related to the following NP-complete problem (see <ref> [LY80] </ref>): "Given a direct graph, find the minimum number of states to be deleted so that resulting subgraph is acyclic". 6 Minimal DGA In this section we consider the minimization problem: given a DGA A, find a minimal DGA equivalent to A.
Reference: [M94] <author> M. Mohri, </author> <title> Minimization of sequential trasducers, </title> <booktitle> in: Proc. Combinatorial Pattern Matching (CPM'94), Lecture Notes in Computer Science, </booktitle> <volume> Vol. </volume> <publisher> 807 (Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994) </year> <month> 151-163. </month>
Reference-contexts: Much work has been devoted to studying succinctness of representation when transducers are considered (see, for example <ref> [WK94, M94] </ref>). In the case of finite automata, very recently, Harel et al. studied exponential discrepancies in the succinctness of finite automata when augmented by combinations of various additional mechanisms like alternation (i.e. both universal and existential branching), concurrency, "two-wayness" and pebbles (see [GH94]).
Reference: [P90] <author> D. Perrin, </author> <title> Finite Automata. </title> <editor> in: J. Van Leeuwen, ed., </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <publisher> Vol.B (Elsevier, </publisher> <address> Amsterdam, </address> <year> 1990) </year> <month> 1-57. </month>
Reference-contexts: Part of the results of this paper appeared already in [GM95]. 2 Preliminaries In this section we give first some terminology on languages and automata. Then we recall some definitions, properties and problems related to the minimization of finite automata. The notations we use are mainly borrowed from <ref> [P90] </ref>. 2.1 Basic notations We denote by a finite alphabet and by fl the free monoid generated by . The elements of are called letters, those of fl are called words. A language over is a subset of fl (i.e. a set of words). <p> Given a deterministic automaton A = (; Q; i; F; E), there is a unique minimal deterministic automaton equivalent to a A and it can be to obtained as follows (see [HU79] or <ref> [P90] </ref> for more details). <p> This because the cardinality of the syntactic monoid of a language is of the order of n n where n is the number of states of the minimal deterministic (conventional) automaton for L (see <ref> [P90] </ref>). 4 Deterministic generalized automata We now define and study the model of generalized automaton in the deterministic case.
Reference: [WK94] <author> A. Weber and R. Klemm, </author> <title> Economy of description for single-valued transducers, </title> <journal> Information and Computation 118, </journal> <volume> 2 (1995) 327 - 340. </volume> <pages> 18 </pages>
Reference-contexts: Much work has been devoted to studying succinctness of representation when transducers are considered (see, for example <ref> [WK94, M94] </ref>). In the case of finite automata, very recently, Harel et al. studied exponential discrepancies in the succinctness of finite automata when augmented by combinations of various additional mechanisms like alternation (i.e. both universal and existential branching), concurrency, "two-wayness" and pebbles (see [GH94]).
References-found: 14

