URL: http://www.cs.virginia.edu/~knabe/lomaps96.ps.gz
Refering-URL: http://www.cs.virginia.edu/~knabe/papers.html
Root-URL: http://www.cs.virginia.edu
Title: An Overview of Mobile Agent Programming  
Author: Frederick Knabe P. 
Address: Chile, Casilla 306, Santiago 22, Chile  
Affiliation: Universidad Catolica de  
Abstract: Mobile agents are code-containing objects that may be transmitted between communicating participants in a distributed system. Compared to systems that only allow the exchange of nonexecutable data, those incorporating mobile agents can achieve significant gains in performance and functionality. Languages with first-class functions provide a good starting point for agent programming, as they make it easy to express the construction, transmission, receipt, and subsequent execution of agents. However, for developing real agent-based systems, a language implementation must handle architectural heterogeneity between communicating machines and provide sufficient performance for applications based on agents. In addition, agents need to be able to access resources on remote execution sites yet remain in a framework that provides sufficient security. In this paper we consider the uses of mobile agents and how a distributed functional language can be extended to support them. We review other agent languages and present several observations on how further work in this area may proceed.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Nathaniel S. Borenstein. </author> <title> Email with a mind of its own: The Safe-Tcl language for enabled mail. </title> <booktitle> In Proceedings of the 1994 IFIP WG6.5 Conference on Upper Layer Protocols, Architectures, and Applications, </booktitle> <address> Barcelona, May 1994. </address> <publisher> North-Holland. </publisher>
Reference-contexts: An Obliq programmer can create a stand-alone function, but she must take care not to refer to any nontransmissible values. In Facile there is never a danger of agents including implicit callbacks because all values are copied on transmission, including state-containing ones. 14 Safe-Tcl. The emphasis in Safe-Tcl <ref> [1] </ref> is on the agent language properties of heterogeneity and security. Tcl interpreters are widely available for many platforms, making it easy to send Tcl programs between different machine architectures.
Reference: 2. <author> Luca Cardelli. Obliq: </author> <title> A Language with Distributed Scope. </title> <institution> DEC Systems Research Center, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: At run time, the procedure can only be transmitted to servers that implement an instance of the interface. A prototype REV implementation was developed that used transmission of source code, but REV's real contribution is its design. Obliq. Obliq <ref> [2] </ref> is a distributed object-oriented programming language. The language is lexically scoped and untyped. Obliq supports first-class functions, and functions as well as other values may be transmitted over the network. Heterogeneity is handled by sending function code as abstract syntax trees, though at the cost of large transmissible representations.
Reference: 3. <author> Joseph R. Falcone. </author> <title> A programmable interface language for heterogeneous distributed systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(4):330351, </volume> <month> November </month> <year> 1987. </year>
Reference-contexts: On connecting to a remote system, the appropriate terminal emulator would be sent back to the client as DEL code. The client would execute the emulator using its local implementation of DEL. Unfortunately, this innovative work was set aside before it could be fully developed. Falcone <ref> [3] </ref> also faced the problem of providing common views of several centralized services across a heterogeneous distributed environment. These services and their clients were located on a variety of machines running different operating systems.
Reference: 4. <author> Alessandro Giacalone, Prateek Mishra, and Sanjiva Prasad. </author> <title> Facile: A symmetric integration of concurrent and functional programming. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 18(2):121160, </volume> <month> April </month> <year> 1989. </year>
Reference-contexts: In an attempt to solve these problems, I designed and implemented an extended version of Facile. Facile <ref> [4, 14] </ref> is a higher-order, mostly functional programming language that integrates support for concurrency and distribution. Building an agent language by modifying Facile allowed me to reuse large parts of a design and implementation and to focus on the features specific to agent programming.
Reference: 5. <author> James Gosling and Henry McGilton. </author> <title> The Java language environment. </title> <type> White paper, </type> <month> May </month> <year> 1995. </year> <title> Sun Microsystems, </title> <type> 2550 Garcia Avenue, </type> <institution> Mountain View, </institution> <address> CA 94043, USA. </address> <note> Available at http://java.sun.com/. </note>
Reference-contexts: In addition to services that are only usable while some connectivity can be maintained, an environment may provide stand-alone agents with domain-specific information. A simple example is an agent that contains a local guide book along with software to search and scan it in various ways. The HotJava browser <ref> [5] </ref> for the World Wide Web encourages this style of agent programming. With HotJava (and now with browsers from Netscape and Microsoft), 6 Web pages may contain applets written in the Java language. These applets are self-contained programs that start execution once they have been downloaded. <p> Safe-Tcl's original application domain was as a means to add safe executable content to electronic mail, but it continues to draw interest for agent programming. Java. The Java language <ref> [5] </ref> has attracted significant attention since its announcement in 1995. Java is an object-oriented language that in many ways is similar to C++, but its type system is stronger and it uses automatic memory management. The most interesting use of Java is in applets.
Reference: 6. <author> James Gosling, David S. H. Rosenthal, and Michelle J. Arden. </author> <title> The NeWS Book: An Introduction to the Network/extensible Window System. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: In principle, system calls made by clients could have been translated into multiple RPCs made to generic interface routines on the appropriate servers. However, the resulting overhead from communication latencies would have been unacceptable. By sending agents to make the calls, these latencies were avoided. The NeWS window system <ref> [6] </ref> provides another example. In NeWS, clients communicate with the display server by sending PostScript programs. Instead of drawing a grid by sending several thousand messages for individual points, it is possible to send one brief program that will compute and draw the entire grid.
Reference: 7. <institution> MPEG-4 Proposal Package Description (PPD) Revision 3 (Tokyo Revision). International Organisation for Standardisation document ISO/IEC JTC1/SC29/WG11 N0998, </institution> <month> July </month> <year> 1995. </year> <title> Produced by the working group on Coding of Moving Pictures and Associated Audio Information. </title>
Reference-contexts: Java applets range from games and simulations to interactive proofs, and many more are being developed. Intelligent Data. Associating agents with data provides a way for the data to know how to process itself. An example is provided by the MPEG 4 compression standard for video <ref> [7] </ref>, where the decompression algorithm is bundled with the data. This approach makes the standard highly flexible and adaptable to different needs. In the SOFTNET packet radio system [11, 18], each network packet is an agent written in FORTH.
Reference: 8. <author> Frederick C. Knabe. </author> <title> Language Support for Mobile Agents. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, Pittsburgh, Pennsylvania 15213, </institution> <month> December </month> <year> 1995. </year> <note> Technical report CMU-CS-95-223. </note>
Reference-contexts: Not surprisingly, the agent approach to structuring distributed computation places its own demands on programming languages. Conventional languages and their implementations are poorly suited to those demands. One approach that I have explored and implemented is to extend a distributed functional programming language to support agent programming <ref> [8] </ref>. The motivation for starting with a functional language is that transmissible, first-class functions provide a natural model for the creation and use of agents. However, other features are also necessary to support agent programming. The next section presents potential applications for mobile agents in more detail. <p> Facile also supports strong static typing and automatic memory management, two further desirable properties. 5.2 Extensions for Agent Programming In <ref> [8] </ref> I describe how I extended Facile to satisfy the properties of heterogeneity, remote resource access, independent compilation, and performance. At the same time I preserved the agent language properties it supported already. <p> On transmission to a remote site, an agent carries with it the signatures for the structures containing needed resources. At the site, the agent is linked to the local structures that match those signatures. (In the implementation the signatures are not actually transmitted; see <ref> [8] </ref>.) On retransmission, the agent is conceptually unlinked from these local structures and relinked at the next site. Proxy structures represent a balance between several competing goals. Their key advantage is that they permit strong typing and also independent compilation. <p> It does not need to be transmitted because the agent can be linked with and use the local implementation of the value wherever it is executed. The process of removing these values before transmission is known as closure trimming. Performance studies <ref> [8] </ref> show that closure trimming can markedly reduce the transmission times and latencies associated with using agent applications. Lazy Run-Time Compilation. A further efficiency measure introduced into Facile makes run-time compilation lazy. Before a received agent can be run, it must be converted to an executable form, normally via compilation.
Reference: 9. <author> Scott McCartney and Jonathan Friedland. </author> <title> Computer sales hot as poorer nations try to string PC gap. </title> <journal> The Wall Street Journal, </journal> <month> 29 June </month> <year> 1995. </year>
Reference-contexts: When Ever Systems developed a home banking system for Unibanco in Brazil, they reduced the need for data transmissions over slow, noisy phone lines by downloading application agents onto customers' personal computers <ref> [9] </ref>. In the Wit project [16], portable palmtop computers can access applications on Unix servers via an infrared link.
Reference: 10. <author> Martin Odersky and Philip Wadler. </author> <title> Evolving Java. Outline for the Pizza research project. </title> <note> More information can be found at http://wwwipd.ira.uka.de/~espresso/Project/. February 1996. </note>
Reference-contexts: Fortunately, there is still room for functional languages to have an effect. First, extended versions of Java that incorporate functional language features can be developed that use plain Java as their compilation target. The Pizza project <ref> [10] </ref> takes this approach. Another possibility is to sidestep the Java language altogether and instead to compile functional languages directly to Java virtual machine code (it is this code, after all, that is actually transmitted over the network).
Reference: 11. <author> Birger Olofsson. </author> <title> SOFTNET Programming Guide (Linkoping Implementation). </title> <institution> Department of Electrical Engineering, Linkoping University, S-581 83 Linkoping, Sweden, </institution> <month> March </month> <year> 1985. </year>
Reference-contexts: An example is provided by the MPEG 4 compression standard for video [7], where the decompression algorithm is bundled with the data. This approach makes the standard highly flexible and adaptable to different needs. In the SOFTNET packet radio system <ref> [11, 18] </ref>, each network packet is an agent written in FORTH. The code for how to process a packet is included in the packet itself; routers simply execute the packets they receive.
Reference: 12. <author> Jeff Rulifson. DEL. </author> <title> ARPANET Request For Comments 5, </title> <note> available at ftp://ds. internic.net/rfc/rfc5.txt, </note> <month> June </month> <year> 1969. </year>
Reference-contexts: This idea is not new, and it dates back to the very founding of the Internet. In 1968, the original ARPANET designers were already considering the problem of emulating the terminals for one timesharing system on the terminals of another. Their solution was the DecodeEncode Language, or DEL <ref> [12] </ref>. On connecting to a remote system, the appropriate terminal emulator would be sent back to the client as DEL code. The client would execute the emulator using its local implementation of DEL. Unfortunately, this innovative work was set aside before it could be fully developed.
Reference: 13. <author> James W. Stamos and David K. Gifford. </author> <title> Remote evaluation. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 12(4):537565, </volume> <month> October </month> <year> 1990. </year>
Reference-contexts: We will not try to make a comprehensive list here but will rather highlight several systems. REV. The REV system <ref> [13] </ref> provides code transmission in an RPC context (REV stands for remote evaluation). A client can relocate a procedure call P (x,y,z) to a server S with the language construct at S eval P (x,y,z).
Reference: 14. <author> Bent Thomsen, Lone Leth, Sanjiva Prasad, Tsung-Min Kuo, Andre Kramer, Fritz Knabe, and Alessandro Giacalone. </author> <title> Facile Antigua Release programming guide. </title> <type> Technical Report ECRC-93-20, </type> <institution> European Computer-Industry Research Centre, </institution> <address> Arabellastr. 17, 81925 Mu-nich, Germany, </address> <month> December </month> <year> 1993. </year> <note> Available at http://www.ecrc.de/. </note>
Reference-contexts: In an attempt to solve these problems, I designed and implemented an extended version of Facile. Facile <ref> [4, 14] </ref> is a higher-order, mostly functional programming language that integrates support for concurrency and distribution. Building an agent language by modifying Facile allowed me to reuse large parts of a design and implementation and to focus on the features specific to agent programming.
Reference: 15. <author> Jim Waldo, Geoff Wyant, Ann Wollrath, and Sam Kendall. </author> <title> A note on distributed computing. </title> <type> Technical Report SMLI TR-94-29, </type> <institution> Sun Microsystems Laboratories, </institution> <address> 2550 Garcia Avenue, Mountain View, California 94043, USA, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: All the code in a program is assumed to stay in a single address space. To maximize performance, the compiler strives to make the code as machine-specific as possible. Ad 1 Waldo et al. <ref> [15] </ref> argue that trying to hide the distinction between local and remote resources and the communication in a distributed system is doomed to failure.
Reference: 16. <author> Terri Watson. </author> <title> Effective wireless communication through application partitioning. </title> <booktitle> In Proceedings of the Fifth Workshop on Hot Topics in Operating Systems (HotOS-V), </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: When Ever Systems developed a home banking system for Unibanco in Brazil, they reduced the need for data transmissions over slow, noisy phone lines by downloading application agents onto customers' personal computers [9]. In the Wit project <ref> [16] </ref>, portable palmtop computers can access applications on Unix servers via an infrared link.
Reference: 17. <author> James E. White. </author> <title> Telescript technology: Mobile agents. General Magic white paper, </title> <type> 2465 Latham Street, </type> <institution> Mountain View, </institution> <address> CA 94040, </address> <year> 1996. </year> <note> Available from http:// www.genmagic.com/. </note>
Reference-contexts: The language also does not contain built-in communication primitives. These two aspects of Java limit the types of agent applications for which it can be used. Telescript. One language designed and implemented specifically for agent programming is General Magic's Telescript <ref> [17] </ref>. Telescript contains many language constructs for creating, transmitting, and manipulating agents. An executing agent can choose to move itself to a new location with the go primitive, and once there can access local resources. In turn, the recipient of an agent can call procedures inside the agent.
Reference: 18. <author> Jens Zander and Robert Forchheimer. </author> <title> High-level packet communication. FORTH Dimensions, </title> <address> 6(5):3233, </address> <year> 1984. </year>
Reference-contexts: An example is provided by the MPEG 4 compression standard for video [7], where the decompression algorithm is bundled with the data. This approach makes the standard highly flexible and adaptable to different needs. In the SOFTNET packet radio system <ref> [11, 18] </ref>, each network packet is an agent written in FORTH. The code for how to process a packet is included in the packet itself; routers simply execute the packets they receive.
References-found: 18

