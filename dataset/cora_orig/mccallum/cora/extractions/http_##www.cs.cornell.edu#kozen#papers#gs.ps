URL: http://www.cs.cornell.edu/kozen/papers/gs.ps
Refering-URL: http://www.cs.cornell.edu/kozen/papers/papers.html
Root-URL: 
Email: kozen@cs.cornell.edu  fms@cs.cornell.edu  
Title: Kleene Algebra with Tests: Completeness and Decidability  
Author: Dexter Kozen Frederick Smith 
Address: Ithaca, NY 14853-7501, USA  
Affiliation: Computer Science Department Cornell University  
Abstract: Kleene algebras with tests provide a rigorous framework for equational specification and verification. They have been used successfully in basic safety analysis, source-to-source program transformation, and concurrency control. We prove the completeness of the equational theory of Kleene algebra with tests and *-continuous Kleene algebra with tests over language-theoretic and relational models. We also show decid-ability. Cohen's reduction of Kleene algebra with hypotheses of the form r = 0 to Kleene algebra without hypotheses is simplified and extended to handle Kleene algebras with tests.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1975. </year>
Reference-contexts: C. Kleene [12] and was developed extensively in a 1971 monograph of Conway [7]. It has appeared in one form or another in relational algebra [20, 25], semantics and logics of programs [13, 23], automata and formal language theory [18], and the design and analysis of algorithms <ref> [1, 11] </ref>. See [16] for an introduction and a comprehensive list of citations. Kleene algebra forms an essential component of Propositional Dynamic Logic (PDL) [8], in which it is mixed with modal logic to give a theoretically appealing and practical system for reasoning about computation at the propositional level.
Reference: 2. <author> J. Berstel. </author> <title> Transductions and Context-free Languages. </title> <publisher> Teubner, </publisher> <year> 1979. </year>
Reference-contexts: given a direct proof that *-continuous Kleene algebra in the presence of extra commutativity conditions of the form pq = qp, even for atomic p and q, is undecidable (see [17]), although with a little extra work this result can be shown to follow from a 1979 result of Berstel <ref> [2] </ref> (see also [9]). The proof in [17] only needed extra commutativity conditions of the form bp = pb, where b is a test. But as shown in that paper, this equation is equivalent to bpb + bpb = 0.
Reference: 3. <author> E. Cohen. </author> <title> Hypotheses in Kleene algebra. </title> <address> ftp://ftp.bellcore.com/pub/ernie/research/homepage.html, </address> <month> April </month> <year> 1994. </year>
Reference-contexts: This formalism provides a rigorous framework for equational specification and verification of programs. It has been applied successfully to problems in basic safety analysis, source-to-source program transformation, and concurrency control <ref> [3, 4, 5, 17] </ref>. Kleene algebra dates back to a 1956 paper of S. C. Kleene [12] and was developed extensively in a 1971 monograph of Conway [7]. <p> He has given several practical examples of the use of Kleene algebra with conditions in program verification, such as lazy caching and concurrency control [4, 5]. He has shown that Kleene algebra with extra conditions of the form r = 0 reduces to Kleene algebra without extra conditions <ref> [3] </ref>, and is therefore decidable. <p> This result is analogous to the completeness result of [16], which states that the regular sets over a finite alphabet form the free Kleene algebra on generators . 4. As mentioned above, Cohen <ref> [3] </ref> shows that Kleene algebra with extra conditions r = 0 reduces efficiently to Kleene algebra without conditions. <p> shown that the equational theories of the Kleene algebras with tests and the *-continuous Kleene algebras with tests coincide, we can henceforth write j= p = q unambiguously in place of KAT fl j= p = q or KAT j= p = q. 8 Eliminating Hypotheses r = 0 Cohen <ref> [3] </ref> shows that in Kleene algebra, any equational implication of the form r = 0 ! p = q reduces efficiently to a single equation. In this section we simplify Cohen's proof and extend it to handle Kleene algebras with tests. Let p; q; r 2 T ;B .
Reference: 4. <author> E. Cohen. </author> <title> Lazy caching. </title> <address> ftp://ftp.bellcore.com/pub/ernie/research/homepage.html, </address> <year> 1994. </year>
Reference-contexts: This formalism provides a rigorous framework for equational specification and verification of programs. It has been applied successfully to problems in basic safety analysis, source-to-source program transformation, and concurrency control <ref> [3, 4, 5, 17] </ref>. Kleene algebra dates back to a 1956 paper of S. C. Kleene [12] and was developed extensively in a 1971 monograph of Conway [7]. <p> E. Cohen has taken a slightly different approach in which tests are defined to be elements b satisfying the condition b 1. He has given several practical examples of the use of Kleene algebra with conditions in program verification, such as lazy caching and concurrency control <ref> [4, 5] </ref>. He has shown that Kleene algebra with extra conditions of the form r = 0 reduces to Kleene algebra without extra conditions [3], and is therefore decidable.
Reference: 5. <author> E. Cohen. </author> <title> Using Kleene algebra to reason about concurrency control. </title> <address> ftp://ftp.bellcore.com/pub/ernie/research/homepage.html, </address> <year> 1994. </year>
Reference-contexts: This formalism provides a rigorous framework for equational specification and verification of programs. It has been applied successfully to problems in basic safety analysis, source-to-source program transformation, and concurrency control <ref> [3, 4, 5, 17] </ref>. Kleene algebra dates back to a 1956 paper of S. C. Kleene [12] and was developed extensively in a 1971 monograph of Conway [7]. <p> E. Cohen has taken a slightly different approach in which tests are defined to be elements b satisfying the condition b 1. He has given several practical examples of the use of Kleene algebra with conditions in program verification, such as lazy caching and concurrency control <ref> [4, 5] </ref>. He has shown that Kleene algebra with extra conditions of the form r = 0 reduces to Kleene algebra without extra conditions [3], and is therefore decidable.
Reference: 6. <author> E. Cohen, D. Kozen, and F. Smith. </author> <title> The complexity of Kleene algebra with tests. </title> <type> Tech. Rep. </type> <institution> TR96-1598, Cornell University, </institution> <month> July </month> <year> 1996. </year>
Reference-contexts: We show that the equational theories of KAT and KAT fl coincide. 2. We show that KAT is complete over relational models. This implies de-cidability of the equational theory by an essentially trivial reduction to Propositional Dynamic Logic (PDL). In <ref> [6] </ref>, we show by different methods that the problem is PSPACE -complete, thus of the same complexity as Kleene algebra. 3. We show that the equational theory of Kleene algebra with tests admits free language-theoretic models consisting of regular sets of "guarded strings". <p> It is at least PSPACE -hard, since the equational theory of Kleene algebras is [24]. It can be shown by different methods that the equational theory of KAT is PSPACE -complete <ref> [6] </ref>. Acknowledgements Ernie Cohen provided valuable comments. The support of the National Science Foundation under grant CCR-9317320 is gratefully acknowledged. The second author is supported on a National Science Foundation Graduate Fellowship.
Reference: 7. <author> J. H. Conway. </author> <title> Regular Algebra and Finite Machines. </title> <publisher> Chapman and Hall, </publisher> <year> 1971. </year>
Reference-contexts: It has been applied successfully to problems in basic safety analysis, source-to-source program transformation, and concurrency control [3, 4, 5, 17]. Kleene algebra dates back to a 1956 paper of S. C. Kleene [12] and was developed extensively in a 1971 monograph of Conway <ref> [7] </ref>. It has appeared in one form or another in relational algebra [20, 25], semantics and logics of programs [13, 23], automata and formal language theory [18], and the design and analysis of algorithms [1, 11]. See [16] for an introduction and a comprehensive list of citations.
Reference: 8. <author> M. J. Fischer and R. E. Ladner. </author> <title> Propositional dynamic logic of regular programs. </title> <journal> J. Comput. Syst. Sci., </journal> <volume> 18(2) </volume> <pages> 194-211, </pages> <year> 1979. </year>
Reference-contexts: See [16] for an introduction and a comprehensive list of citations. Kleene algebra forms an essential component of Propositional Dynamic Logic (PDL) <ref> [8] </ref>, in which it is mixed with modal logic to give a theoretically appealing and practical system for reasoning about computation at the propositional level. Syntactically, PDL is a two-sorted logic consisting of programs and propositions defined by mutual induction. <p> KAT is a program of PDL (after replacing Boolean terms b with PDL tests b?), and it is known that two such terms p and q represent the same binary relation in all relational structures iff PDL j= &lt;p&gt;c $ &lt;q&gt;c ; where c is a new primitive proposition symbol <ref> [8] </ref>. By Theorems 6 and 8, this is tantamount to deciding KAT-equivalence. PDL is known to be exponential time complete [8, 21], thus the equational theory of KAT is decidable in no more than exponential time. <p> By Theorems 6 and 8, this is tantamount to deciding KAT-equivalence. PDL is known to be exponential time complete <ref> [8, 21] </ref>, thus the equational theory of KAT is decidable in no more than exponential time. It is at least PSPACE -hard, since the equational theory of Kleene algebras is [24]. It can be shown by different methods that the equational theory of KAT is PSPACE -complete [6].
Reference: 9. <author> A. Gibbons and W. Rytter. </author> <title> On the decidability of some problems about rational subsets of free partially commutative monoids. </title> <journal> Theor. Comput. Sci., </journal> <volume> 48 </volume> <pages> 329-337, </pages> <year> 1986. </year>
Reference-contexts: proof that *-continuous Kleene algebra in the presence of extra commutativity conditions of the form pq = qp, even for atomic p and q, is undecidable (see [17]), although with a little extra work this result can be shown to follow from a 1979 result of Berstel [2] (see also <ref> [9] </ref>). The proof in [17] only needed extra commutativity conditions of the form bp = pb, where b is a test. But as shown in that paper, this equation is equivalent to bpb + bpb = 0.
Reference: 10. <author> D. Harel. </author> <title> On folk theorems. </title> <journal> Comm. Assoc. Comput. Mach., </journal> <volume> 23(7) </volume> <pages> 379-389, </pages> <month> July </month> <year> 1980. </year>
Reference-contexts: In that paper, the utility of KAT was illustrated by giving a purely equational proof of the following classical result: every while program can be simulated by a while program with at most one while loop <ref> [10, 19] </ref>. E. Cohen has taken a slightly different approach in which tests are defined to be elements b satisfying the condition b 1. He has given several practical examples of the use of Kleene algebra with conditions in program verification, such as lazy caching and concurrency control [4, 5].
Reference: 11. <author> K. Iwano and K. Steiglitz. </author> <title> A semiring on convex polygons and zero-sum cycle problems. </title> <journal> SIAM J. Comput., </journal> <volume> 19(5) </volume> <pages> 883-901, </pages> <year> 1990. </year>
Reference-contexts: C. Kleene [12] and was developed extensively in a 1971 monograph of Conway [7]. It has appeared in one form or another in relational algebra [20, 25], semantics and logics of programs [13, 23], automata and formal language theory [18], and the design and analysis of algorithms <ref> [1, 11] </ref>. See [16] for an introduction and a comprehensive list of citations. Kleene algebra forms an essential component of Propositional Dynamic Logic (PDL) [8], in which it is mixed with modal logic to give a theoretically appealing and practical system for reasoning about computation at the propositional level.
Reference: 12. <author> S. C. Kleene. </author> <title> Representation of events in nerve nets and finite automata. </title> <editor> In Shan-non and McCarthy, editors, </editor> <booktitle> Automata Studies, </booktitle> <pages> pages 3-41. </pages> <publisher> Princeton University Press, </publisher> <year> 1956. </year>
Reference-contexts: This formalism provides a rigorous framework for equational specification and verification of programs. It has been applied successfully to problems in basic safety analysis, source-to-source program transformation, and concurrency control [3, 4, 5, 17]. Kleene algebra dates back to a 1956 paper of S. C. Kleene <ref> [12] </ref> and was developed extensively in a 1971 monograph of Conway [7]. It has appeared in one form or another in relational algebra [20, 25], semantics and logics of programs [13, 23], automata and formal language theory [18], and the design and analysis of algorithms [1, 11].
Reference: 13. <author> D. Kozen. </author> <title> On induction vs. </title> <editor> *-continuity. In Kozen, editor, </editor> <booktitle> Proc. Workshop on Logic of Programs, volume 131 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 167-176. </pages> <publisher> Springer, </publisher> <year> 1981. </year>
Reference-contexts: Kleene algebra dates back to a 1956 paper of S. C. Kleene [12] and was developed extensively in a 1971 monograph of Conway [7]. It has appeared in one form or another in relational algebra [20, 25], semantics and logics of programs <ref> [13, 23] </ref>, automata and formal language theory [18], and the design and analysis of algorithms [1, 11]. See [16] for an introduction and a comprehensive list of citations.
Reference: 14. <author> D. Kozen. </author> <title> On Kleene algebras and closed semirings. </title> <editor> In Rovan, editor, </editor> <booktitle> Proc. Math. Found. Comput. Sci., volume 452 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 26-47. </pages> <publisher> Springer, </publisher> <year> 1990. </year>
Reference-contexts: In the presence of the other axioms, the *-continuity condition (7) implies (3-6), and is strictly stronger in the sense that there exist Kleene algebras that are not *-continuous <ref> [14] </ref>. The main result of [16] says that all true identities between regular expressions, interpreted as regular sets of strings, are derivable from the axioms of Kleene algebra [16], and only such identities are derivable.
Reference: 15. <author> D. Kozen. </author> <title> The Design and Analysis of Algorithms. </title> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: In particular, I (q) = sup I (x) : This result is analogous to the same result for Kleene algebras <ref> [15, Lemma 7.1, p. 35] </ref> and the proof is similar. Note that the *-continuity axiom is a special case. Proof of Lemma 4. We proceed by induction on the structure of q. The basis consists of cases for primitive tests, primitive actions, 0 and 1. <p> The induction step consists of cases for +, , fl , and . The cases other than and are the same as in <ref> [15, Lemma 7.1, p. 35] </ref>.
Reference: 16. <author> D. Kozen. </author> <title> A completeness theorem for Kleene algebras and the algebra of regular events. </title> <journal> Infor. and Comput., </journal> <volume> 110(2) </volume> <pages> 366-390, </pages> <month> May </month> <year> 1994. </year>
Reference-contexts: Kleene [12] and was developed extensively in a 1971 monograph of Conway [7]. It has appeared in one form or another in relational algebra [20, 25], semantics and logics of programs [13, 23], automata and formal language theory [18], and the design and analysis of algorithms [1, 11]. See <ref> [16] </ref> for an introduction and a comprehensive list of citations. Kleene algebra forms an essential component of Propositional Dynamic Logic (PDL) [8], in which it is mixed with modal logic to give a theoretically appealing and practical system for reasoning about computation at the propositional level. <p> We show that the equational theory of Kleene algebra with tests admits free language-theoretic models consisting of regular sets of "guarded strings". This result is analogous to the completeness result of <ref> [16] </ref>, which states that the regular sets over a finite alphabet form the free Kleene algebra on generators . 4. As mentioned above, Cohen [3] shows that Kleene algebra with extra conditions r = 0 reduces efficiently to Kleene algebra without conditions. <p> The precedence of the operators is &gt; fl &gt; &gt; +. Thus p + qr fl should be parsed p + (q (r fl )). 2.1 Kleene Algebra There have been many competing axiomatizations of Kleene algebra. The formulation we adopt here (KA) is from <ref> [16] </ref>. <p> In the presence of the other axioms, the *-continuity condition (7) implies (3-6), and is strictly stronger in the sense that there exist Kleene algebras that are not *-continuous [14]. The main result of <ref> [16] </ref> says that all true identities between regular expressions, interpreted as regular sets of strings, are derivable from the axioms of Kleene algebra [16], and only such identities are derivable. <p> The main result of <ref> [16] </ref> says that all true identities between regular expressions, interpreted as regular sets of strings, are derivable from the axioms of Kleene algebra [16], and only such identities are derivable. In other words, the algebra of regular sets of strings over the finite alphabet is the free Kleene algebra on generators . <p> In other words, if p q, then pr qr, p + r q + r, and p fl q fl for any r. See <ref> [16] </ref> for a more thorough introduction. 2.2 The Boolean Subalgebra The Boolean subalgebra B admits a Boolean negation operator defined only on B. Join and meet are given by the Kleene algebra operators + and , respectively. <p> The Boolean algebra axioms are not needed in equivalence proofs involving such terms, so we can apply the completeness result of <ref> [16] </ref> directly. Consider the set B = fb j b 2 Bg, the set of negated atomic tests. We can view B as a separate set of primitive symbols disjoint from B and . <p> Our main task will be to show how to further transform p 0 to another KAT-equivalent string bp such that all elements of R (bp) are guarded strings and R (bp) = G (bp). We can then use the completeness result of <ref> [16] </ref>, since p and q will be KAT-equivalent iff bp and bq are equivalent as regular expressions over [ B [ B, i.e., if they can be proved equivalent in pure Kleene algebra. In our inductive proof, it will be helpful to maintain terms in the following special form. <p> The forward implication is immediate, since G is a Kleene algebra with tests. For the reverse implication, suppose G (p) = G (q). By Lemma 7 (i) and Theorem 3, G (bp) = G (bq). By Lemma 7 (ii), R (bp) = R (bq). By the completeness result of <ref> [16] </ref>, KA j= bp = bq. Combining this with Lemma 7 (i), we have KAT j= p = q.
Reference: 17. <author> D. Kozen. </author> <title> Kleene algebra with tests and commutativity conditions. </title> <editor> In T. Margaria and B. Steffen, editors, </editor> <booktitle> Proc. Second Int. Workshop Tools and Algorithms for the Construction and Analysis of Systems (TACAS'96), volume 1055 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 14-33. </pages> <publisher> Springer, </publisher> <month> March </month> <year> 1996. </year>
Reference-contexts: This formalism provides a rigorous framework for equational specification and verification of programs. It has been applied successfully to problems in basic safety analysis, source-to-source program transformation, and concurrency control <ref> [3, 4, 5, 17] </ref>. Kleene algebra dates back to a 1956 paper of S. C. Kleene [12] and was developed extensively in a 1971 monograph of Conway [7]. <p> However, tests are an essential ingredient for modeling real programs. This motivates the definition of Kleene algebra with tests (KAT), an equational system introduced in <ref> [17] </ref>. In that paper, the utility of KAT was illustrated by giving a purely equational proof of the following classical result: every while program can be simulated by a while program with at most one while loop [10, 19]. E. <p> He has also given a direct proof that *-continuous Kleene algebra in the presence of extra commutativity conditions of the form pq = qp, even for atomic p and q, is undecidable (see <ref> [17] </ref>), although with a little extra work this result can be shown to follow from a 1979 result of Berstel [2] (see also [9]). The proof in [17] only needed extra commutativity conditions of the form bp = pb, where b is a test. <p> algebra in the presence of extra commutativity conditions of the form pq = qp, even for atomic p and q, is undecidable (see <ref> [17] </ref>), although with a little extra work this result can be shown to follow from a 1979 result of Berstel [2] (see also [9]). The proof in [17] only needed extra commutativity conditions of the form bp = pb, where b is a test. But as shown in that paper, this equation is equivalent to bpb + bpb = 0. <p> Thus if Cohen's reduction of Kleene algebra with extra conditions r = 0 to Kleene algebra without extra conditions could be carried over to Kleene algebra with tests, then one could effectively get rid of the conditions in the proof of <ref> [17] </ref>. We show that this is indeed the case. The following are the main results of this paper. 1. A Kleene algebra with tests is called *-continuous if its Kleene algebra satisfies the *-continuity axiom (7) below. The system KAT with this additional axiom is called KAT fl . <p> As mentioned above, Cohen [3] shows that Kleene algebra with extra conditions r = 0 reduces efficiently to Kleene algebra without conditions. We simplify Cohen's construction and generalize it to handle Kleene algebra with tests. 2 Kleene Algebra with Tests A Kleene algebra with tests <ref> [17] </ref> is a Kleene algebra with an embedded Boolean subalgebra.
Reference: 18. <editor> W. Kuich and A. Salomaa. Semirings, </editor> <booktitle> Automata, and Languages. </booktitle> <publisher> Springer, </publisher> <year> 1986. </year>
Reference-contexts: Kleene algebra dates back to a 1956 paper of S. C. Kleene [12] and was developed extensively in a 1971 monograph of Conway [7]. It has appeared in one form or another in relational algebra [20, 25], semantics and logics of programs [13, 23], automata and formal language theory <ref> [18] </ref>, and the design and analysis of algorithms [1, 11]. See [16] for an introduction and a comprehensive list of citations.
Reference: 19. <author> G. Mirkowska. </author> <title> Algorithmic Logic and its Applications. </title> <type> PhD thesis, </type> <institution> University of Warsaw, </institution> <year> 1972. </year> <note> In Polish. </note>
Reference-contexts: In that paper, the utility of KAT was illustrated by giving a purely equational proof of the following classical result: every while program can be simulated by a while program with at most one while loop <ref> [10, 19] </ref>. E. Cohen has taken a slightly different approach in which tests are defined to be elements b satisfying the condition b 1. He has given several practical examples of the use of Kleene algebra with conditions in program verification, such as lazy caching and concurrency control [4, 5].
Reference: 20. <author> K. C. Ng. </author> <title> Relation Algebras with Transitive Closure. </title> <type> PhD thesis, </type> <institution> University of California, Berkeley, </institution> <year> 1984. </year>
Reference-contexts: Kleene algebra dates back to a 1956 paper of S. C. Kleene [12] and was developed extensively in a 1971 monograph of Conway [7]. It has appeared in one form or another in relational algebra <ref> [20, 25] </ref>, semantics and logics of programs [13, 23], automata and formal language theory [18], and the design and analysis of algorithms [1, 11]. See [16] for an introduction and a comprehensive list of citations.
Reference: 21. <author> V. R. Pratt. </author> <title> Models of program logics. </title> <booktitle> In Proc. 20th Symp. Found. Comput. Sci., </booktitle> <pages> pages 115-122. </pages> <publisher> IEEE, </publisher> <year> 1979. </year>
Reference-contexts: By Theorems 6 and 8, this is tantamount to deciding KAT-equivalence. PDL is known to be exponential time complete <ref> [8, 21] </ref>, thus the equational theory of KAT is decidable in no more than exponential time. It is at least PSPACE -hard, since the equational theory of Kleene algebras is [24]. It can be shown by different methods that the equational theory of KAT is PSPACE -complete [6].
Reference: 22. <author> V. R. Pratt. </author> <title> Dynamic algebras and the nature of induction. </title> <booktitle> In Proc. 12th Symp. Theory of Comput., </booktitle> <pages> pages 22-28. </pages> <publisher> ACM, </publisher> <year> 1980. </year>
Reference-contexts: Therefore KAT fl j= p = q. 6 Completeness over Relational Models In this section we establish completeness over relational models. It will suffice to construct a relational model isomorphic to G. This construction is similar to a construction of Pratt <ref> [22] </ref> for regular sets. For A any set of guarded strings, define h (A) = f (x; x y) j x 2 GS; y 2 Ag : Lemma 5. The language-theoretic model P and its submodel G are isomorphic to relational models. Proof.
Reference: 23. <author> V. R. Pratt. </author> <title> Dynamic algebras as a well-behaved fragment of relation algebras. </title> <editor> In D. Pigozzi, editor, </editor> <booktitle> Proc. Conf. on Algebra and Computer Science, volume 425 of Lect. Notes in Comput. Sci., </booktitle> <pages> pages 77-110. </pages> <publisher> Springer, </publisher> <month> June </month> <year> 1988. </year>
Reference-contexts: Kleene algebra dates back to a 1956 paper of S. C. Kleene [12] and was developed extensively in a 1971 monograph of Conway [7]. It has appeared in one form or another in relational algebra [20, 25], semantics and logics of programs <ref> [13, 23] </ref>, automata and formal language theory [18], and the design and analysis of algorithms [1, 11]. See [16] for an introduction and a comprehensive list of citations.
Reference: 24. <author> L. J. Stockmeyer and A. R. Meyer. </author> <title> Word problems requiring exponential time. </title> <booktitle> In Proc. 5th Symp. Theory of Computing, </booktitle> <pages> pages 1-9. </pages> <publisher> ACM, </publisher> <year> 1973. </year>
Reference-contexts: By Theorems 6 and 8, this is tantamount to deciding KAT-equivalence. PDL is known to be exponential time complete [8, 21], thus the equational theory of KAT is decidable in no more than exponential time. It is at least PSPACE -hard, since the equational theory of Kleene algebras is <ref> [24] </ref>. It can be shown by different methods that the equational theory of KAT is PSPACE -complete [6]. Acknowledgements Ernie Cohen provided valuable comments. The support of the National Science Foundation under grant CCR-9317320 is gratefully acknowledged. The second author is supported on a National Science Foundation Graduate Fellowship.
Reference: 25. <author> A. Tarski. </author> <title> On the calculus of relations. </title> <journal> J. Symb. Logic, </journal> <volume> 6(3) </volume> <pages> 65-106, </pages> <year> 1941. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Kleene algebra dates back to a 1956 paper of S. C. Kleene [12] and was developed extensively in a 1971 monograph of Conway [7]. It has appeared in one form or another in relational algebra <ref> [20, 25] </ref>, semantics and logics of programs [13, 23], automata and formal language theory [18], and the design and analysis of algorithms [1, 11]. See [16] for an introduction and a comprehensive list of citations.
References-found: 25

