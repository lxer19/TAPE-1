URL: http://www.cs.colorado.edu/~zorn/cs5535/Fall-1996/projects96/lee-java-alloc.ps
Refering-URL: http://www.cs.colorado.edu/~zorn/cs5535/Fall-1996/fall96.html
Root-URL: http://www.cs.colorado.edu
Title: An Object Allocation Profiler for Java  
Author: Han Lee Mike Root 
Date: December 8, 1996  
Abstract: This paper introduces our implementation of an object allocation profiler for the Java Virtual Machine. Summary of both the memory and the handles to the memory are displayed in two tables. The direct object allocation table displays which member functions were directly responsible for allocating objects. The memory allocation table describes the call stack for every method call that directly or indirectly allocates objects. This tool can be used to study the memory allocation behavior of a Java program and improve the performance of the program. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Benjamin Zorn and Paul Hilfinger. </author> <title> A memory allocation profiler for C and Lips programs. </title>
Reference-contexts: Understanding the Output To test our object profiler we ran it on a number of example Java programs and examined its output. To illustrate the usefulness of our project, we will use the test program, similar to the program used by Zorn and Hilfinger <ref> [1] </ref>, in Figure 2 as an example. /* A basic extension of the java.awt.Frame class */ import java.awt.*; class WidgetMaker Frame aFrame; Color c; protected void DrawWidget (int WidgetColor)- if (WidgetColor == 0) - c = Color.red; - else - c = Color.blue; - aFrame.setForeground (c); (aFrame.getGraphics ()).fillRect (Math.ro und ((float)Math.random
Reference: [2] <author> Sun Microsystems Inc. </author> <title> Suns Java Homepage ( http://java.sun.com). </title>
Reference: [3] <author> Michael E. </author> <title> Root. </title> <note> Mikes Homepage ( http://www.cs.colorado.edu/~rootm). 8 </note>
References-found: 3

