URL: http://www.cs.uni-bonn.de/IV/blum/papers/rll.ps.Z
Refering-URL: http://www.cs.uni-bonn.de/IV/blum/blum.html
Root-URL: http://cs.uni-bonn.de
Email: email: blum@cs.uni-bonn.de  
Title: On Parsing LL-Languages  
Author: Norbert Blum 
Date: July 10, 1998  
Address: Romerstr. 164, D-53117 Bonn, Germany  
Affiliation: Informatik IV, Universitat Bonn  
Abstract: Usually, a parser for an LL(k)-grammar G is a deterministic pushdown transducer which produces a leftmost derivation for a given input string x 2 L(G). Ukkonen [5] has given a family of LL(2)-grammars proving that every parser for these grammars has exponential size. If we add to a parser the possibility to manipulate a constant number of pointers which point to positions within the constructed part of the leftmost derivation and to change the output in such positions, we obtain an extended parser for the LL(k)-grammar G. Given an arbitrary LL(k)-grammar G, we will show how to construct an extended parser of polynomial size manipulating at most k 2 pointers. 1 Introduction, notations and basic results 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, and J. D. Ullman, </author> <title> The Theory of Parsing, Translation, and Compiling, Vol. I: Parsing, </title> <publisher> Prentice-Hall (1972). </publisher>
Reference-contexts: We assume that the reader is familiar with the elementary theory of LL (k)-parsing as written in standard text books (see e.g. <ref> [1, 3, 6] </ref>). <p> The following implication of the LL (k) definition is central for the construction of LL (k)- parsers. The proof can be found in <ref> [1] </ref>.
Reference: [2] <author> N. Blum, </author> <title> On the computation of FIRST and FOLLOW, </title> <type> Report No. </type> <institution> 85163-CS, Institut fur Informatik der Universitat Bonn, </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: An efficient algorithm without the use of fixed-point iteration for the computation of all F IRST k -sets can be found in <ref> [2] </ref>. Let G = (V; ; P; S) be a reduced, context-free grammar and k be a positive integer. We say that G is LL (k) if G fulfills the following property: If there are two leftmost derivations 1.
Reference: [3] <author> S. Sippu, and E. Soisalon-Soininen, </author> <title> Parsing Theory, Vol. I: Languages and Parsing, </title> <journal> EATCS Monographs on Theoretical Computer Science Vol. </journal> <volume> 15, </volume> <publisher> Springer (1988). </publisher>
Reference-contexts: We assume that the reader is familiar with the elementary theory of LL (k)-parsing as written in standard text books (see e.g. <ref> [1, 3, 6] </ref>).
Reference: [4] <author> S. Sippu, and E. Soisalon-Soininen, </author> <title> Parsing Theory, Vol. II: LR(k) and LL(k) Parsing, </title> <journal> EATCS Monographs on Theoretical Computer Science Vol. </journal> <volume> 20, </volume> <publisher> Springer (1990). </publisher>
Reference: [5] <author> E. Ukkonen, </author> <title> Lower bound on the size of deterministic parsers, </title> <booktitle> JCSS 26 (1983), </booktitle> <pages> 153-170. </pages>
Reference-contexts: The most important such context-free grammars are the LR (k)- and the LL (k)-grammars. But the size of linear LR (k)- and LL (k)-parsers might be exponential in the size of the underlying grammar. Indeed, Ukkonen <ref> [5] </ref> has constructed families of LR (k)- and LL (k)-grammars having only parsers of exponential size. The reason is that parsers always treat exactly one possible derivation which can depend on the prefix of the input derived so far. <p> If we add to a parser the possibility to manipulate a constant number of pointers which point to positions within the constructed part of the leftmost derivation and to change the output in such positions, we obtain an extended parser for the LL (k)-grammar G. Ukkonen <ref> [5] </ref> has given a family of LL (2)-grammars and shown that every parser for these grammars must have exponential size. <p> In order to explain the main idea, we consider the LL (2)-grammar, given by Ukkonen <ref> [5] </ref> for proving an exponential lower bound on the size of any parser.
Reference: [6] <author> R. Wilhelm, and D. Maurer, </author> <title> Compiler Design, </title> <publisher> Addison-Wesley (1995). </publisher>
Reference-contexts: We assume that the reader is familiar with the elementary theory of LL (k)-parsing as written in standard text books (see e.g. <ref> [1, 3, 6] </ref>).
References-found: 6

