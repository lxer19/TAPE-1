URL: http://c.gp.cs.cmu.edu:5103/afs/cs/user/fp/public/papers/cutlin94.ps.gz
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/fp/www/courses/95-linear.html
Root-URL: http://www.cs.cmu.edu
Title: Structural Cut Elimination in Linear Logic  
Author: Frank Pfenning 
Note: This work was supported by NSF Grant CCR-9303383 The views and conclusions contained in this document are those of the author and should not be interpreted as representing the official policies, either expressed or implied, of NSF or the U.S. government.  
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Date: December 1994  
Pubnum: CMU-CS-94-222  
Abstract: We present a new proof of cut elimination for linear logic which proceeds by three nested structural inductions, avoiding the explicit use of multi-sets and termination measures on sequent derivations. The computational content of this proof is a non-deterministic algorithm for cut elimination which is amenable to an elegant implementation in Elf. We show this implementation in detail. 
Abstract-found: 1
Intro-found: 1
Reference: [Abr93] <author> Samson Abramsky. </author> <title> Computational interpretations of linear logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 111 </volume> <pages> 3-57, </pages> <year> 1993. </year>
Reference-contexts: It usually yields consistency as an easy corollary and forms the basis for efficient proof search procedures [Wal90] and logic programming languages [MNPS91]. In linear logic, the algorithm for cut elimination may also be given a computational interpretation <ref> [Abr93] </ref>. Traditional sequent formulations of linear logic [Gir87] are not well-suited to a deep analysis of cut elimination because of the disturbing effects of weakening and contraction of modal formulas of the form !A and ?A. <p> This avoids confusion with different proof term assignments from the literature (e.g. <ref> [Abr93] </ref>). The purpose of the proof terms here is not immediately computational|they record enough information about the structure of the proof that it may be reconstructed up to insertion or removal of some unused hypotheses or conclusions. Axioms.
Reference: [And92] <author> Jean-Marc Andreoli. </author> <title> Logic programming with focusing proofs in linear logic. </title> <journal> Journal of Logic and Computation, </journal> <volume> 2(3) </volume> <pages> 197-347, </pages> <year> 1992. </year>
Reference-contexts: This is achieved by dividing a sequent into linear and non-linear zones whose constituents are treated differently in the sequent rules. Examples of such calculi are Andreoli's 2 <ref> [And92] </ref>, Girard's LU [Gir93], and Hodas & Miller's L [HM94, Hod94]. We take a two-sided version of classical linear logic quite close to 2 with three rules of Cut as in LU and endow the resulting calculus LV with proof terms. <p> A ( B (A B ? ) ? ? 1 ? 0 &gt; ? 3 LV: Another Sequent Calculus for Linear Logic In this section we present a formulation of a sequent calculus for linear logic, called LV very close to Andreoli's dyadic system 2 <ref> [And92] </ref> and similar to Girard's LU [Gir93]. It may also be considered a complete classical analogue of Hodas & Miller's L [HM94, Hod94], a formulation of a fragment of intuitionistic linear logic. <p> The solution is to eliminate the structural rules (in the example above contraction) as much as possible. To this end we divide a sequent into linear and non-linear zones as in Andreoli's 2 <ref> [And92] </ref> and Girard's LU [Gir93]. Contraction and weakening are no longer required, since the non-linear zones are maintained monotonically: In each inference rule arbitrary non-linear side formulas are permitted and copied to all premises, thus eliminating the need for contraction.
Reference: [Gen35] <author> Gerhard Gentzen. </author> <title> Untersuchungen uber das logische Schlieen. </title> <journal> Mathematische Zeitschrift, </journal> <volume> 39 </volume> <pages> 176-210, 405-431, </pages> <year> 1935. </year> <title> English translation in M. </title> <editor> E. Szabo, editor, </editor> <booktitle> The Collected Papers of Gerhard Gentzen, </booktitle> <pages> pages 68-131, </pages> <publisher> North-Holland, </publisher> <year> 1969. </year>
Reference-contexts: 1 Introduction The property of cut elimination <ref> [Gen35] </ref> is a central property of logical systems in a sequent formulation. It usually yields consistency as an easy corollary and forms the basis for efficient proof search procedures [Wal90] and logic programming languages [MNPS91].
Reference: [Gir87] <author> Jean-Yves Girard. </author> <title> Linear logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 50 </volume> <pages> 1-102, </pages> <year> 1987. </year>
Reference-contexts: It usually yields consistency as an easy corollary and forms the basis for efficient proof search procedures [Wal90] and logic programming languages [MNPS91]. In linear logic, the algorithm for cut elimination may also be given a computational interpretation [Abr93]. Traditional sequent formulations of linear logic <ref> [Gir87] </ref> are not well-suited to a deep analysis of cut elimination because of the disturbing effects of weakening and contraction of modal formulas of the form !A and ?A. <p> However, his proof cannot be structural, since he does not introduce proof terms. Constructive cut elimination in a sequent formulation is difficult due to the nature of the structural rules, especially contraction. Girard <ref> [Gir87] </ref> uses proof nets (instead of a sequent calculus) 3 LV: ANOTHER SEQUENT CALCULUS FOR LINEAR LOGIC 4 for his strong normalization theorem partly for that reason.
Reference: [Gir93] <author> Jean-Yves Girard. </author> <title> On the unity of logic. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 59 </volume> <pages> 201-217, </pages> <year> 1993. </year>
Reference-contexts: This is achieved by dividing a sequent into linear and non-linear zones whose constituents are treated differently in the sequent rules. Examples of such calculi are Andreoli's 2 [And92], Girard's LU <ref> [Gir93] </ref>, and Hodas & Miller's L [HM94, Hod94]. We take a two-sided version of classical linear logic quite close to 2 with three rules of Cut as in LU and endow the resulting calculus LV with proof terms. <p> ( B (A B ? ) ? ? 1 ? 0 &gt; ? 3 LV: Another Sequent Calculus for Linear Logic In this section we present a formulation of a sequent calculus for linear logic, called LV very close to Andreoli's dyadic system 2 [And92] and similar to Girard's LU <ref> [Gir93] </ref>. It may also be considered a complete classical analogue of Hodas & Miller's L [HM94, Hod94], a formulation of a fragment of intuitionistic linear logic. LV will be amenable to a structural proof of cut elimination following ideas from an analysis of intuitionistic and classical sequent calculi [Pfe94]. <p> The solution is to eliminate the structural rules (in the example above contraction) as much as possible. To this end we divide a sequent into linear and non-linear zones as in Andreoli's 2 [And92] and Girard's LU <ref> [Gir93] </ref>. Contraction and weakening are no longer required, since the non-linear zones are maintained monotonically: In each inference rule arbitrary non-linear side formulas are permitted and copied to all premises, thus eliminating the need for contraction.
Reference: [GP] <author> Didier Galmiche and Guy Perrier. </author> <title> On proof normalization in linear logic. </title> <note> Theoretical Computer Science. To appear. Available as Technical Report CRIN 94-R-113, </note> <institution> Nancy, France. </institution>
Reference-contexts: Girard [Gir87] uses proof nets (instead of a sequent calculus) 3 LV: ANOTHER SEQUENT CALCULUS FOR LINEAR LOGIC 4 for his strong normalization theorem partly for that reason. Galmiche and Perrier <ref> [GP] </ref> give a syntactic analysis of permutabilities of rules in a sequent calculus and apply it to cut elimination; our own analysis does not go quite as far, but we have a simpler proof of cut elimination. We conjecture that their presentation could be streamlined using our linear sequent calculus. <p> Another interesting direction for further research would be to reformulate the algorithm into a set of higher-order rewrite rules on linear -terms. The resulting system appears to be canonical modulo permutations of adjacent inferences as analyzed by Galmiche & Perrier <ref> [GP] </ref>. We have checked this mechanically only for the intuitionistic and classical (non-linear) version of our cut elimination procedure as presented in [Pfe94]. 9 CONCLUSION 37 Acknowledgments I would like to thank Iliano Cervesato for discussions regarding the topic of this paper and proof reading earlier drafts.
Reference: [HHP93] <author> Robert Harper, Furio Honsell, and Gordon Plotkin. </author> <title> A framework for defining logics. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 40(1) </volume> <pages> 143-184, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: The seeds for this proof may already be found in [Hod94], where cut elimination is proven for L, a fragment of intuitionistic linear logic. We show how linear sequent derivations may be represented faithfully in the logical framework LF <ref> [HHP93] </ref> and how this representation may be improved if the framework itself already possesses linear features. We also present an elegant implementation of the algorithm for cut elimination implicit in our constructive proof of the cut elimination theorem. <p> We proceed in three stages. In the first stage we represent the formulas of linear logic using the standard technique of higher-order abstract syntax (see <ref> [HHP93] </ref>). In the second stage we encode proof terms for the sequent calculus without regard to linearity constraints as in [Pfe94]. In the third stage we encode the linearity requirements as a higher-level judgment on proof terms.
Reference: [HM94] <author> Joshua Hodas and Dale Miller. </author> <title> Logic programming in a fragment of intuitionistic linear logic. </title> <journal> Information and Computation, </journal> <volume> 110(2) </volume> <pages> 327-365, </pages> <year> 1994. </year> <booktitle> A preliminary version appeared in the Proceedings of the Sixth Annual IEEE Symposium on Logic in Computer Science, </booktitle> <pages> pages 32-42, </pages> <address> Amsterdam, The Netherlands, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: This is achieved by dividing a sequent into linear and non-linear zones whose constituents are treated differently in the sequent rules. Examples of such calculi are Andreoli's 2 [And92], Girard's LU [Gir93], and Hodas & Miller's L <ref> [HM94, Hod94] </ref>. We take a two-sided version of classical linear logic quite close to 2 with three rules of Cut as in LU and endow the resulting calculus LV with proof terms. We then prove admissibility of the cut rules in LV by three nested structural inductions. <p> It may also be considered a complete classical analogue of Hodas & Miller's L <ref> [HM94, Hod94] </ref>, a formulation of a fragment of intuitionistic linear logic. LV will be amenable to a structural proof of cut elimination following ideas from an analysis of intuitionistic and classical sequent calculi [Pfe94]. <p> It is helpful to think of proof terms as part of a linear -calculus. For our purposes, proof terms for the Lolli fragment of linear logic <ref> [HM94] </ref> are sufficient, which is important since it satisfies a stronger normal form theorem than the full calculus. In this fragment, we have linear (() and intuitionistic (!) implication, additive conjunction (N), top (&gt;) and corresponding proof constructors. <p> Cervesato. In the absence of such a framework we limit ourselves to the propositional fragment of the linear sequent calculus LV, since its proof terms may be mapped rather directly onto the Lolli fragment of a linear natural deduction calculus <ref> [HM94] </ref>. We believe that the ideas can be extended naturally to a full calculus, including the proof of cut elimination. Throughout this section, we restrict ourselves to the propositional fragment LVP of LV. <p> We use E for the non-linear context and L for the linear context, fixing a signature for constants. We define here only the judgment for canonical forms (which correspond to so-called uniform derivations in <ref> [HM94] </ref>), because this is required for adequacy. We obtain the typing judgment for this linear -calculus by replacing both * and # by : and omitting the (now redundant) rule which coerces from # to *.
Reference: [Hod94] <author> Joshua S. Hodas. </author> <title> Logic Programming in Intuitionistic Linear Logic: Theory, Design, and Implementation. </title> <type> PhD thesis, </type> <institution> University of Pennsylvania, Department of Computer and Information Science, </institution> <year> 1994. </year>
Reference-contexts: This is achieved by dividing a sequent into linear and non-linear zones whose constituents are treated differently in the sequent rules. Examples of such calculi are Andreoli's 2 [And92], Girard's LU [Gir93], and Hodas & Miller's L <ref> [HM94, Hod94] </ref>. We take a two-sided version of classical linear logic quite close to 2 with three rules of Cut as in LU and endow the resulting calculus LV with proof terms. We then prove admissibility of the cut rules in LV by three nested structural inductions. <p> We then prove admissibility of the cut rules in LV by three nested structural inductions. Cut elimination follows by an additional structural induction on sequent derivations possibly containing cuts. The seeds for this proof may already be found in <ref> [Hod94] </ref>, where cut elimination is proven for L, a fragment of intuitionistic linear logic. We show how linear sequent derivations may be represented faithfully in the logical framework LF [HHP93] and how this representation may be improved if the framework itself already possesses linear features. <p> It may also be considered a complete classical analogue of Hodas & Miller's L <ref> [HM94, Hod94] </ref>, a formulation of a fragment of intuitionistic linear logic. LV will be amenable to a structural proof of cut elimination following ideas from an analysis of intuitionistic and classical sequent calculi [Pfe94]. <p> However, he analyzes its relationship to CLL. Hodas gives an explicit proof of cut elimination for L in <ref> [Hod94] </ref>, which contains many of the same basic ideas we employ here. However, his proof cannot be structural, since he does not introduce proof terms. Constructive cut elimination in a sequent formulation is difficult due to the nature of the structural rules, especially contraction. <p> We obtain the typing judgment for this linear -calculus by replacing both * and # by : and omitting the (now redundant) rule which coerces from # to *. It follows from results in <ref> [Hod94] </ref> that every term can be transformed into canonical form. Note that the canonical forms correspond to long fi-normal forms.
Reference: [MNPS91] <author> Dale Miller, Gopalan Nadathur, Frank Pfenning, and Andre Scedrov. </author> <title> Uniform proofs as a foundation for logic programming. </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 51 </volume> <pages> 125-157, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction The property of cut elimination [Gen35] is a central property of logical systems in a sequent formulation. It usually yields consistency as an easy corollary and forms the basis for efficient proof search procedures [Wal90] and logic programming languages <ref> [MNPS91] </ref>. In linear logic, the algorithm for cut elimination may also be given a computational interpretation [Abr93].
Reference: [MPP92] <author> Dale Miller, Gordon Plotkin, and David Pym. </author> <title> A relevant analysis of natural deduction. Talk given at the Workshop on Logical Frameworks, </title> <address> B-astad, Sweden, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: A full realization of this idea requires a dependently typed linear logical framework <ref> [MPP92] </ref> which is the subject of current research in joint work with I. Cervesato. <p> This naturally leads to the question if the proof of cut elimination could be represented faithfully and directly in a linear logical framework along the lines of <ref> [MPP92] </ref>. We conjecture that this is possible and plan to investigate it in future work. Preliminary evidence in this direction is a more direct encoding of sequent derivations themselves presented in Section 8.
Reference: [Pfe91] <author> Frank Pfenning. </author> <title> Logic programming in the LF logical framework. </title> <editor> In Gerard Huet and Gordon Plotkin, editors, </editor> <booktitle> Logical Frameworks, </booktitle> <pages> pages 149-181. </pages> <publisher> Cambridge University Press, </publisher> <year> 1991. </year>
Reference-contexts: We also present an elegant implementation of the algorithm for cut elimination implicit in our constructive proof of the cut elimination theorem. This implementation is in Elf <ref> [Pfe91] </ref>, a constraint logic programming language based on LF. 2 CLL: A Traditional Sequent Calculus for Linear Logic In this section we present a traditional sequent calculus CLL for linear logic.
Reference: [Pfe94] <author> Frank Pfenning. </author> <title> A structural proof of cut elimination and its representation in a logical framework. </title> <type> Technical Report CMU-CS-94-218, </type> <institution> Department of Computer Science, Carnegie Mellon University, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: It may also be considered a complete classical analogue of Hodas & Miller's L [HM94, Hod94], a formulation of a fragment of intuitionistic linear logic. LV will be amenable to a structural proof of cut elimination following ideas from an analysis of intuitionistic and classical sequent calculi <ref> [Pfe94] </ref>. Andreoli's goal is to study a paradigm of concurrent computation as search for restricted linear derivations, so he does not endow 2 with proof terms, nor does he prove cut elimination for it. However, he analyzes its relationship to CLL. <p> We proceed in three stages. In the first stage we represent the formulas of linear logic using the standard technique of higher-order abstract syntax (see [HHP93]). In the second stage we encode proof terms for the sequent calculus without regard to linearity constraints as in <ref> [Pfe94] </ref>. In the third stage we encode the linearity requirements as a higher-level judgment on proof terms. This third stage yields an adequate representation. 5.1 Formulas The representation of formulas using higher-order abstract syntax is straightforward. The main idea is to represent object-level variables and parameters by meta-level variables. <p> The resulting system appears to be canonical modulo permutations of adjacent inferences as analyzed by Galmiche & Perrier [GP]. We have checked this mechanically only for the intuitionistic and classical (non-linear) version of our cut elimination procedure as presented in <ref> [Pfe94] </ref>. 9 CONCLUSION 37 Acknowledgments I would like to thank Iliano Cervesato for discussions regarding the topic of this paper and proof reading earlier drafts.
Reference: [Wal90] <author> Lincoln A. Wallen. </author> <title> Automated Proof Search in Non-Classical Logics: Efficient Matrix Proof Methods for Modal and Intuitionistic Logics. </title> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction The property of cut elimination [Gen35] is a central property of logical systems in a sequent formulation. It usually yields consistency as an easy corollary and forms the basis for efficient proof search procedures <ref> [Wal90] </ref> and logic programming languages [MNPS91]. In linear logic, the algorithm for cut elimination may also be given a computational interpretation [Abr93].
References-found: 14

