URL: ftp://hal.cs.vt.edu/pub/keller/bjkdiss.ps.gz
Refering-URL: http://hal.cs.vt.edu/~keller/
Root-URL: http://www.cs.vt.edu
Title: Algorithms and Orders for Finding Noncommutative Grobner Bases  
Author: by Benjamin J. Keller c flBenjamin J. Keller and VPI SU Lenwood S. Heath, Co-chairman Edward L. Green, Co-chairman Donald C.S. Allison Michael A. Keenan Daniel R. Farkas Clifford A. Shaffer 
Degree: Dissertation submitted to the faculty of the  in partial fulfillment of the requirements for the degree of DOCTOR OF PHILOSOPHY in  APPROVED:  
Date: 1997  March, 1997  
Affiliation: Virginia Polytechnic Institute and State University  Computer Science and Applications  Blacksburg, Virginia  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. V. Aho and M. J. Corasick. </author> <title> Efficient string matching: an aid to bibliographic search. </title> <journal> Communications of the ACM, </journal> <volume> 18(6) </volume> <pages> 333-340, </pages> <year> 1975. </year>
Reference-contexts: Sims [52] defines index automata that can be used for the pattern matching problems in completion of string rewriting systems. These matching problems are the same as for the Grobner basis computation; however, Sims suggests using the dictionary matching approach of Aho and Corasick <ref> [1] </ref>. The dictionary Benjamin J. Keller Chapter 4 66 matching problem is to find all occurrences of all words in a given dictionary in a search string (this is the same as the subword problem described in the previous section).
Reference: [2] <author> A. Amir, M. Farach, Z. Galil, R. Giancarlo, and K. Park. </author> <title> Dynamic dictionary matching. </title> <journal> Journal of Computer and Systems Sciences, </journal> <volume> 49(2) </volume> <pages> 208-222, </pages> <year> 1994. </year>
Reference-contexts: All of these operations can be thought of as pattern matching operations with a set of patterns, the tip set of the current generating set. Chapter 4 discusses the pattern matching problems in detail and gives a solution based on the dynamic dictionary matching approach of Amir et al. <ref> [2] </ref> in which all searches take time linear in the size of the search string. 3.4.3 Triple Sets One key to efficient Grobner basis computation is the efficient handling of triples. <p> Because terms of noncommutative polynomials are words in a free semigroup, these tests are pattern matching searches with a dictionary of strings. The dictionary D is the set of tips of the generating set. In this chapter, the dynamic dictionary matching approach of Amir et al. <ref> [2] </ref> is extended to solve the pattern matching problems involved in the noncommutative Grobner basis computation. A similar situation occurs in the closely related computation of Knuth-Bendix completion for string rewriting (see [10]). <p> Therefore, it is safe to assume that the dictionary of words D has this property. In particular, for all d 2 D, there is no d 0 such that d 0 jd. This assumption allows a significant simplification in the data structures of Amir et al. <ref> [2] </ref>. If w is a string not in D, the subword and superword searches for w are the following: 1. Subword search find all (d; i) where d 2 D and d is a subword of w beginning at the ith symbol of w. 2. <p> In the string rewriting system kbmag the index automata are used for testing confluence, but not for general completion since they are too expensive to rebuild when new words are added to the dictionary [33]. Amir et al. <ref> [2] </ref> introduce the dynamic dictionary matching approach as a dynamic alternative to Aho and Corasick's static approach. Instead of using a static data structure, Amir et al. implement the search automaton using a suffix tree. <p> The implication for the algorithm is that if the locus of head (w k+1 ) is given, then the common prefix with w k does not have to be scanned. The algorithm for inserting each suffix is given by Amir et al. <ref> [2] </ref> (they call it procedure STI ). The arguments to the algorithm are the locus v of the previous head head (w k+1 ) and the current suffix w k . <p> The modified insertion and deletion operations are still accomplished in linear time. Another modification of the insertion algorithm is needed for computing overlaps and is described below. 4.4 Pattern Matching Solution The dynamic dictionary matching approach of Amir et al. <ref> [2] </ref> supports linear time modifications to the dictionary, but only implements the subword search. In particular, they show how to use a suffix tree to implement the automata for the subword search. We describe how the suffix tree structure also supports the superword and overlap searches. <p> Keller Chapter 4 73 m is the size of the output. The input size is n = jwj in all searches, but the size of the output m depends on the search. In particular, the result by Amir et al. for the subword search <ref> [2] </ref> implies the following. Let #(d; w) is the number of times d occurs in w. <p> Theorem 4.4 The insertion algorithm together with the right-overlap search takes time O (jwj+m) where m is the sum of the lengths of the words that overlap with w. Proof The insertion algorithm alone takes O (jwj) time with each suffix insertion taking amortized constant time <ref> [2] </ref>. The addition of the subtree search does not affect the asymptotic time for inserting each suffix.
Reference: [3] <author> J. Apel and W. Lassner. </author> <title> An extension of Buchberger's algorithm and calculations in enveloping fields of Lie algebras. </title> <editor> In L. Robbiano, editor, </editor> <booktitle> Computational Aspects of Commutative Algebra, </booktitle> <pages> pages 227-236. </pages> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: Grobner bases in other noncommutative algebras occur in the literature. However, most are "almost-commutative" polynomial rings where the relationship between products of indeterminates like ab is not ba but some other expression of a and b. Examples of these algebras are Weyl algebras [21], enveloping algebras of Lie algebras <ref> [3] </ref>, algebras of solvable type [35], Grassman algebras [26, 53], and Clifford algebras [26]. Strictly speaking these algebras are noncommutative, but all have properties that imply that all ideals have finite Grobner bases.
Reference: [4] <author> AT&T Bell Laboratories. </author> <title> The Standard ML of New Jersey Library Reference Manual (Release 0.1), </title> <note> 1993. Also distributed with Release 0.2. </note>
Reference-contexts: The relationships between the primary functors and structures of the system are shown in Figure 3.15. (The system consists of many other structures, some of which are implementations of data structures from the SML/NJ library, version 0.2 <ref> [4] </ref>.) In the figure, the square boxes represent the functors and the rounded boxes represent the structures created using the functors. The arrows into the functor boxes indicate which structures are arguments to the functors.
Reference: [5] <author> M. Barr and C. Wells. </author> <title> Category Theory and Computing Science. </title> <publisher> Prentice Hall, </publisher> <year> 1990. </year>
Reference-contexts: Also, if v = src (p) then v p = p and so the vertices act like identities for particular elements (so B is like the arrows of the free category of <ref> [5] </ref>). If we add a zero value 0 to B and extend the operation to return 0 for invalid compositions, then B [ f0g is closed under the composition operator. Since p q = pq, the operator is generally not written.
Reference: [6] <author> D. Bayer and M. Stillman. </author> <title> A criterion for detecting m-regularity. </title> <journal> Inventiones Mathematicae, </journal> <volume> 87 </volume> <pages> 1-11, </pages> <year> 1987. </year>
Reference-contexts: For commutative Grobner bases, an order called (degree) reverse lexicographic has been shown to be optimal in the sense that the maximum degree of any tip generated during a computation using the order is minimal among all possible orders <ref> [6] </ref>. Reeves [47] demonstrates that for some problem instances other orders can do as well as the degree reverse lexicographic order. The degree reverse lexicographic order corresponds to an order on noncommutative instances (here it is called "length right vector lexicographic").
Reference: [7] <author> T. Becker and V. Weispfenning. </author> <title> Grobner Basis: A Computational Approach to Commutative Algebra. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1993. </year>
Reference-contexts: A ring is a set R with two operations addition + and multiplication , and a zero element 0 such that 1. R with addition is an Abelian group with identity 0; 2. multiplication is associative; and 3. multiplication distributes with addition <ref> [7, p.19] </ref>. In this thesis, all rings also have a unit, which is the identity for multiplication. A polynomial ring has elements that are polynomials. <p> A Grobner basis always exists regardless of the admissible order (an ideal is its own trivial Grobner basis). In commutative polynomial rings, finite Grobner bases always exist (in fact, they are usually defined to be finite <ref> [7, p.207] </ref>), but in noncommutative polynomial rings one admissible order may yield an infinite Grobner basis while another yields a finite Grobner basis. <p> The term XY Z is the least common multiple of the tips XY and Y Z. Since the least common multiple occurs in both Z (XY 1) and X (Y Z Z) of Z (XY 1) X (Y Z Z) the occurrences cancel each other <ref> [7, p.210] </ref>. A pair of polynomials (p; q) for which the leading terms can be canceled in this way is called a critical pair, and the corresponding polynomial (called the s-polynomial) is denoted SPol (p; q). <p> This fact is due to the following theorem by Buchberger. Theorem 2.1 If all the s-polynomials SPol (p; q) for the critical pairs of G reduce to zero by G, then G is a Grobner basis <ref> [7, p.211] </ref>. This result suggests the basic forms of Buchberger's algorithm shown in Figure 2.1. The algorithm is underspecified and allows many alternative implementations. Also, many variations to the algorithm are described in the literature. These variations are the subject of Chapter 3 and are introduced there. <p> Mora [46] shows (using syzygies) that these criteria can be applied in computing noncommutative Grobner bases. Another proof is given in Appendix A that uses an approach like that of Becker and Weispfenning <ref> [7] </ref>. What is proved in the appendix is known as Buchberger's second criterion. The other well-known Buchberger criterion is Buchberger's first, which says that pairs of polynomials with disjoint leading terms (terms with no common divisor) need not be considered. <p> We call this approach the hybrid elimination strategy. All three elimination strategies are considered in the experiments. Note that, in general, elimination also refers to an application of Grobner bases (see Becker and Weispfenning <ref> [7, p.256] </ref>, or Helton and Stankus [29]), so some care is needed in using the term.
Reference: [8] <author> G. Bergman. </author> <title> The diamond lemma in ring theory. </title> <booktitle> Advances in Mathematics, </booktitle> <volume> 29 </volume> <pages> 178-218, </pages> <year> 1978. </year>
Reference-contexts: In noncommutative algebra, the terms are words in a noncommutative monoid (or in our case, a semigroup). Noncommutative algebras are quotients of free (associative) algebras, where the terms are elements of a free monoid over the alphabet of indeterminates. Bergman <ref> [8] </ref> first defines the concept of Grobner bases for free algebras, but the algorithm is due to Mora [45]. The algorithm for the noncommutative case is nearly identical to the one for the commutative case with the primary difference being how the new elements are formed. <p> The algorithm in Figure 3.1 only terminates if the input generators (and order) have a finite Grobner basis. (The proof of termination when the Grobner basis is finite is based on the "diamond lemma" of Bergman <ref> [8] </ref>.) Otherwise, the algorithm enumerates an infinite set. There are two ways in which the algorithm is modified to use bounds to force termination. Both modifications will find a finite Grobner basis if it exists within the given bound.
Reference: [9] <author> R. Blute. </author> <title> Hopf algebras and linear logic. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 6(2) </volume> <pages> 189-217, </pages> <year> 1996. </year>
Reference-contexts: Noncommutativity is also common in computation, and at times abstract algebraic structures correspond to underlying computational models. Two examples are the use of categories of Hopf algebras as models of linear logic <ref> [9] </ref>, and the use of polynomials to express polymorphic type systems [34].
Reference: [10] <author> R. V. Book and F. Otto. </author> <title> String-Rewriting Systems. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: In string rewriting the terms are words in a free monoid, and rewriting is done by replacing occurrences of the left-hand side by the right-hand side <ref> [10] </ref>. A string rewriting rule s ! s 0 can be considered to be a polynomial s s 0 (equal to zero) that is an element of the corresponding free algebra. Therefore, completion in string rewriting corresponds to computing Grobner bases for Benjamin J. <p> In this chapter, the dynamic dictionary matching approach of Amir et al. [2] is extended to solve the pattern matching problems involved in the noncommutative Grobner basis computation. A similar situation occurs in the closely related computation of Knuth-Bendix completion for string rewriting (see <ref> [10] </ref>). There the dictionary is the set of left-hand sides of rewrite rules, but the pattern matching problems are identical. Although a static form of dictionary matching is used in string rewriting, the dynamic technique developed here has not been used previously in string rewriting or for similar applications.
Reference: [11] <author> B. </author> <title> Buchberger. Ein Algorithmus zum Auffinden der Basiselemente des Restklassenringes nach einem nulldimensionalen Polynomialideal. </title> <type> PhD thesis, Innsbruck, </type> <year> 1965. </year>
Reference-contexts: Hironaka [32] first defined standard bases, which are closely related to Grobner bases; however, Buchberger first defined Grobner bases (for commutative polynomial rings) and the algorithm for computing them <ref> [11] </ref>. Mishra and Yap [43] discuss the relationship between standard and Grobner bases. The algorithm takes as input a set of polynomials and adds new polynomials to create a new set for which all polynomial reductions converge.
Reference: [12] <author> B. </author> <title> Buchberger. A criterion for detecting unnecessary reductions in the construction of Grobner-bases. </title> <editor> In E. W. Ng, editor, </editor> <volume> EUROSAM `79, LNCS# 72, </volume> <pages> pages 3-21. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1979. </year>
Reference-contexts: foreach g 2 D do 9 begin 10 g 0 Reduce (g; G); 11 if (g 0 6= 0) then 12 Update (G; T; g 0 ); 13 end 3.3.4 Triple Elimination The elimination of useless pairs (pairs for which the s-polynomial reduces to zero) is first considered by Buchberger <ref> [12] </ref>. Buchberger defines several criteria that can be used to determine whether a critical pair can be eliminated, and later Gebauer and Moller [22] derive similar criteria using syzygies. Mora [46] shows (using syzygies) that these criteria can be applied in computing noncommutative Grobner bases.
Reference: [13] <author> B. </author> <title> Buchberger. Grobner bases: an algorithmic method in polynomial ideal theory. </title> <editor> In N. K. Bose, editor, </editor> <booktitle> Multidimensional Systems Theory, Mathematics and its Applications, </booktitle> <pages> pages 184-232. </pages> <address> D. </address> <publisher> Reidel Publishing Company, Dordrecht, Holland, </publisher> <year> 1985. </year>
Reference-contexts: In the next section, we explain how to obtain a Grobner basis and give an example. 2.3 Computing Commutative Grobner Bases The algorithm for computing Grobner bases for ideals of commutative polynomial rings is due to Buchberger <ref> [13] </ref>. Buchberger's algorithm is based on the subtle fact that it is sufficient to complete the generating set with polynomials of a particular form.
Reference: [14] <author> R. Bundgen. </author> <title> Simulating Buchberger's algorithm by Knuth-Bendix completion. </title> <editor> In R. V. Book, editor, </editor> <volume> RTA `91, LNCS# 488, </volume> <pages> pages 386-397. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1991. </year> <note> 109 REFERENCES 110 </note>
Reference-contexts: If we view a set of polynomials together with polynomial division as a rewrite system, then a Grobner basis is exactly a convergent system of rules. (See the work by Bundgen <ref> [14, 15] </ref> for more details.) However, a Grobner basis is a tool for answering a different (but analogous) question, that of membership in ideals of polynomial rings. <p> However, using this view of polynomials as rewrite rules, a Grobner basis is a convergent set of rules, and Buchberger's algorithm corresponds to Knuth-Bendix completion. (More details of this relationship can be found elsewhere <ref> [14, 15] </ref>.) Noncommutative Grobner bases include a special form of term rewriting called string rewriting. In string rewriting the terms are words in a free monoid, and rewriting is done by replacing occurrences of the left-hand side by the right-hand side [10].
Reference: [15] <author> R. Bundgen. </author> <title> Buchberger's algorithm: the term rewriter's point of view. </title> <editor> In W. Kuich, editor, </editor> <booktitle> ICALP '92, </booktitle> <volume> LNCS# 623, </volume> <pages> pages 380-391. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: If we view a set of polynomials together with polynomial division as a rewrite system, then a Grobner basis is exactly a convergent system of rules. (See the work by Bundgen <ref> [14, 15] </ref> for more details.) However, a Grobner basis is a tool for answering a different (but analogous) question, that of membership in ideals of polynomial rings. <p> However, using this view of polynomials as rewrite rules, a Grobner basis is a convergent set of rules, and Buchberger's algorithm corresponds to Knuth-Bendix completion. (More details of this relationship can be found elsewhere <ref> [14, 15] </ref>.) Noncommutative Grobner bases include a special form of term rewriting called string rewriting. In string rewriting the terms are words in a free monoid, and rewriting is done by replacing occurrences of the left-hand side by the right-hand side [10].
Reference: [16] <author> S. Collart, M. Kalkbrener, and D. Mall. </author> <title> The Grobner walk. </title> <type> Technical report, </type> <institution> Department of Mathematics, Swiss Federal Institute of Technology, </institution> <address> Zurich, </address> <year> 1993. </year>
Reference-contexts: to find the best representative for each equivalence class (if the members of an equivalence class do not behave the same). 6.3.3 Grobner Walks In the commutative theory of Grobner bases, there is the concept of a "Grobner walk" that is used to convert between Grobner bases for different orders <ref> [16] </ref>. The algorithm uses the fact that admissible orders on commutative terms correspond to projective cones and transform the cone from the initial order to the cone for the final order.
Reference: [17] <author> B. A. Davey and H. Priestley. </author> <title> Introduction to Lattices and Order. </title> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: The set B [ f0g is a semigroup with zero where the vertices are idempotents (for v a vertex, v v = v). The standard kinds of orders are defined as follows. A partial order on B is a reflexive, transitive and antisymmetric relation <ref> [17] </ref>. A pre-order on B is a reflexive and transitive relation. Benjamin J. Keller Chapter 5 78 A total order on B is a partial order such that all p; q 2 B are comparable, meaning p &lt; q, p &gt; q or p = q.
Reference: [18] <author> N. Dershowitz and J.-P. Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics, </booktitle> <pages> pages 245-320. </pages> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: In this section, the relationship of Grobner basis to another kind of algebraic computation called term rewriting is considered. This relationship is more of an algorithmic one than algebraic. Term rewriting is used to decide equivalence between terms in some universal algebra <ref> [18] </ref>. Terms are mathematical expressions composed of constants, variables and operators. A rewrite rule s ! t is used to rewrite (or reduce) a term w by first finding a substitution of terms for variable names in s such that s is a subterm of w.
Reference: [19] <author> T. Dube, B. Mishra, and C. K. Yap. </author> <title> Admissible orderings and bounds for Grobner bases normal form algorithms. </title> <type> Technical Report 258, </type> <institution> Department of Computer Science, </institution> <address> New York University, </address> <year> 1986. </year>
Reference-contexts: This algorithm depends heavily on the ability to characterize all admissible orders by weight vectors (see Robbiano [49] or Dube, Mishra and Yap <ref> [19] </ref>). While there is no such characterization for admissible orders on strings, the spanning trees might present an opportunity for a similar algorithm for path algebras. Also, most common admissible orders can be defined as weight orders, making it reasonable to deal with only this set of orders.
Reference: [20] <author> D. R. Farkas, C. D. Feustel, and E. L. Green. </author> <title> Synergy in the theories of Grobner bases and path algebras. </title> <journal> Canadian Journal of Mathematics, </journal> <volume> 45(4) </volume> <pages> 727-739, </pages> <year> 1993. </year>
Reference-contexts: Therefore, the Knuth-Bendix completion algorithm for string rewriting is basically the same Benjamin J. Keller Chapter 1 4 as the noncommutative form of Buchberger's algorithm. 1.1.2 Noncommutative Algebras Our problem is actually that of computing Grobner bases for ideals in path algebras (as presented by Farkas, Feustel, and Green <ref> [20] </ref>). Path algebras are quotients of free algebras that can be conveniently described in terms of a graph. If K is a field, a path algebra K consists of K-linear combinations of finite paths in a directed multigraph (called the quiver ). <p> Since both spv and upv are relations whose support elements are uniform equivalent, we call spv and upv uniform projections of p. In general, it is sufficient to consider only uniform generators <ref> [20] </ref>. To see this, suppose we have a generating set P with a nonuniform element p. Let p 1 and p 2 be the uniform projections of p. Then p 1 and p 2 are in hP i.
Reference: [21] <author> A. Galligo. </author> <title> Some algorithmic questions on ideals of differential operators. </title> <booktitle> In EUROCAL '85, </booktitle> <volume> LNCS# 204, </volume> <pages> pages 413-421, </pages> <year> 1985. </year>
Reference-contexts: Grobner bases in other noncommutative algebras occur in the literature. However, most are "almost-commutative" polynomial rings where the relationship between products of indeterminates like ab is not ba but some other expression of a and b. Examples of these algebras are Weyl algebras <ref> [21] </ref>, enveloping algebras of Lie algebras [3], algebras of solvable type [35], Grassman algebras [26, 53], and Clifford algebras [26]. Strictly speaking these algebras are noncommutative, but all have properties that imply that all ideals have finite Grobner bases.
Reference: [22] <author> R. Gebauer and H. M. Moller. </author> <title> On an installation of Buchberger's algorithm. </title> <editor> In L. Robbiano, editor, </editor> <booktitle> Computational Aspects of Commutative Algebra, </booktitle> <pages> pages 141-152. </pages> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: INPUT: Tip-reduced set G, triple set T , tip-reduced polynomial p. OUTPUT: Self-reduced G with h 2 G, triples for h in T 1 T T [ Overlaps (G; h); 2 D fg 2 G : tip (h)jtip (g)g; 3 G (G n D) [ fhg; redundant <ref> [22] </ref>. Tip-reducible elements of P can be dealt with in two ways. The first technique, due to Gebauer and Moller, is to simply delete the reducible elements. This approach, called redundant element deletion, requires that the triples involving reducible elements be kept. Otherwise, the result may not be complete. <p> Buchberger defines several criteria that can be used to determine whether a critical pair can be eliminated, and later Gebauer and Moller <ref> [22] </ref> derive similar criteria using syzygies. Mora [46] shows (using syzygies) that these criteria can be applied in computing noncommutative Grobner bases. Another proof is given in Appendix A that uses an approach like that of Becker and Weispfenning [7].
Reference: [23] <author> P. Graf. </author> <title> Term Indexing. </title> <type> PhD thesis, </type> <institution> Universitat des Saarlandes, </institution> <year> 1995. </year>
Reference-contexts: In term rewriting the corresponding matching problems are to find left-hand sides of rules that unify with terms to be reduced and finding critical pairs for pairs of rules. Completion in term rewriting uses discrimination trees to match terms and to find critical pairs <ref> [23] </ref>. Other (simpler) structures are used for matching in string rewriting. Sims [52] defines index automata that can be used for the pattern matching problems in completion of string rewriting systems.
Reference: [24] <author> E. L. Green, </author> <year> 1995. </year> <type> Personal Communication. </type>
Reference-contexts: Section 6.2 begins the development of an approach to the computation of representative orders for the equivalence classes for very special graphs. This approach uses a relationship of spanning trees and admissible orders observed by Green <ref> [24] </ref>. Once this approach is complete, it might be possible to combine it with an approach using information on the generating relations to make the choice of order. This and other future research directions are discussed in Section 6.3.
Reference: [25] <author> D. Gusfield, G. M. Landau, and B. Schieber. </author> <title> An efficient algorithm for the All Pairs Suffix-Prefix problem. </title> <journal> Information Processing Letters, </journal> <volume> 41 </volume> <pages> 181-185, </pages> <year> 1992. </year>
Reference-contexts: Keller Chapter 4 67 3. each leaf corresponds to a particular suffix of s given by the concatenation of the labels from the root to the leaf <ref> [25, pp.182-183] </ref>. Note that each node v in a suffix tree corresponds to a unique string l (v) formed by concatenating the labels of the edges from the root to v.
Reference: [26] <author> D. Hartley and P. Tuckey. </author> <title> Grobner bases in Clifford and Grassman algebras. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 20 </volume> <pages> 197-205, </pages> <year> 1995. </year>
Reference-contexts: However, most are "almost-commutative" polynomial rings where the relationship between products of indeterminates like ab is not ba but some other expression of a and b. Examples of these algebras are Weyl algebras [21], enveloping algebras of Lie algebras [3], algebras of solvable type [35], Grassman algebras <ref> [26, 53] </ref>, and Clifford algebras [26]. Strictly speaking these algebras are noncommutative, but all have properties that imply that all ideals have finite Grobner bases. Problem instances in these algebras probably can be solved more directly than by presenting them as quotients of path algebras. <p> Examples of these algebras are Weyl algebras [21], enveloping algebras of Lie algebras [3], algebras of solvable type [35], Grassman algebras [26, 53], and Clifford algebras <ref> [26] </ref>. Strictly speaking these algebras are noncommutative, but all have properties that imply that all ideals have finite Grobner bases. Problem instances in these algebras probably can be solved more directly than by presenting them as quotients of path algebras. Because of this, these cases are not considered here.
Reference: [27] <author> G. Havas, D. F. Holt, and S. Rees. </author> <title> Recognizing badly presented z-modules. </title> <journal> Linear algebra and its applications, </journal> <volume> 192 </volume> <pages> 137-164, </pages> <year> 1993. </year>
Reference-contexts: Coefficient explosion is also common in other normal form computations such as finding canonical forms of matrices, and the heuristics <ref> [27, 28] </ref> used in these situations may extend well to Grobner basis computations. Nothing is done in this research to compare the two reduction strategies in the noncommutative case, nor is anything done to consider the selection of a divisor.
Reference: [28] <author> G. Havas and B. S. Majewski. </author> <title> Integer matrix diagonalization. </title> <journal> Journal of Symbolic Computation, </journal> <note> (to appear). </note>
Reference-contexts: Coefficient explosion is also common in other normal form computations such as finding canonical forms of matrices, and the heuristics <ref> [27, 28] </ref> used in these situations may extend well to Grobner basis computations. Nothing is done in this research to compare the two reduction strategies in the noncommutative case, nor is anything done to consider the selection of a divisor.
Reference: [29] <author> J. W. Helton and M. Stankus. </author> <title> Computer assistance for "discovering" formulas in system engineering and operator theory. </title> <type> Technical report, </type> <institution> Department of Mathematics, University of California, </institution> <address> San Diego, California, </address> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: However, there are also other more "real-world" applications. One such application is the simplification of polynomial equations that arise in operator theory and linear control theory <ref> [29, 30, 31] </ref>. In essence, a Grobner basis is found for a set of equations that express Benjamin J. Keller Chapter 1 5 the basic assumptions of the theory, and so can be used to simplify other equations so that they can be solved by other means. <p> We call this approach the hybrid elimination strategy. All three elimination strategies are considered in the experiments. Note that, in general, elimination also refers to an application of Grobner bases (see Becker and Weispfenning [7, p.256], or Helton and Stankus <ref> [29] </ref>), so some care is needed in using the term. In this thesis, triple elimination and elimination always mean the same thing. 3.4 Data Structures The main data structures required for the algorithm are polynomial sets for storing basis elements (and facilitating pattern matching) and triple sets.
Reference: [30] <author> J. W. Helton, M. Stankus, and J. Wavrik. </author> <title> Computer simplification of engineering formulas. </title> <journal> IEEE Transactions on Automatic Control, </journal> <note> (submitted), </note> <year> 1995. </year>
Reference-contexts: However, there are also other more "real-world" applications. One such application is the simplification of polynomial equations that arise in operator theory and linear control theory <ref> [29, 30, 31] </ref>. In essence, a Grobner basis is found for a set of equations that express Benjamin J. Keller Chapter 1 5 the basic assumptions of the theory, and so can be used to simplify other equations so that they can be solved by other means.
Reference: [31] <author> J. W. Helton and J. J. Wavrik. </author> <title> Rules for computer simplification of the formulas in operator model theory and linear systems. Operator Theory: </title> <booktitle> Advances and Applications, </booktitle> <volume> 73 </volume> <pages> 325-354, </pages> <year> 1994. </year> <note> REFERENCES 111 </note>
Reference-contexts: However, there are also other more "real-world" applications. One such application is the simplification of polynomial equations that arise in operator theory and linear control theory <ref> [29, 30, 31] </ref>. In essence, a Grobner basis is found for a set of equations that express Benjamin J. Keller Chapter 1 5 the basic assumptions of the theory, and so can be used to simplify other equations so that they can be solved by other means.
Reference: [32] <author> H. Hironaka. </author> <title> Resolution of singularities of an algebraic variety over a field of characteristic 0. </title> <journal> Annals of Mathematics, </journal> <volume> 79 </volume> <pages> 109-326, </pages> <year> 1964. </year>
Reference-contexts: Polynomials are sums of a finite number of monomials that consist of a nonzero coefficient and a term. In commutative polynomial rings, the terms are elements of an abelian monoid, which means that the order of the indeterminates in a term is not important. Hironaka <ref> [32] </ref> first defined standard bases, which are closely related to Grobner bases; however, Buchberger first defined Grobner bases (for commutative polynomial rings) and the algorithm for computing them [11]. Mishra and Yap [43] discuss the relationship between standard and Grobner bases.
Reference: [33] <author> D. Holt, </author> <year> 1996. </year> <type> Personal Communication. </type>
Reference-contexts: The result is that index automata are too expensive when implemented this way. In the string rewriting system kbmag the index automata are used for testing confluence, but not for general completion since they are too expensive to rebuild when new words are added to the dictionary <ref> [33] </ref>. Amir et al. [2] introduce the dynamic dictionary matching approach as a dynamic alternative to Aho and Corasick's static approach. Instead of using a static data structure, Amir et al. implement the search automaton using a suffix tree.
Reference: [34] <author> C. Jay. </author> <title> Polynomial polymorphism. </title> <editor> In R. Kotagiri, editor, </editor> <booktitle> Proceedings of the Eighteenth Aus-tralasian Computer Science Conference, </booktitle> <volume> volume 17, </volume> <pages> pages 237-243. </pages> <address> A.C.S. Communications, </address> <year> 1995. </year>
Reference-contexts: Noncommutativity is also common in computation, and at times abstract algebraic structures correspond to underlying computational models. Two examples are the use of categories of Hopf algebras as models of linear logic [9], and the use of polynomials to express polymorphic type systems <ref> [34] </ref>.
Reference: [35] <author> A. Kandri-Rody and V. Weispfenning. </author> <title> Non-commutative Grobner bases in algebras of solvable type. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 9 </volume> <pages> 1-26, </pages> <year> 1990. </year>
Reference-contexts: However, most are "almost-commutative" polynomial rings where the relationship between products of indeterminates like ab is not ba but some other expression of a and b. Examples of these algebras are Weyl algebras [21], enveloping algebras of Lie algebras [3], algebras of solvable type <ref> [35] </ref>, Grassman algebras [26, 53], and Clifford algebras [26]. Strictly speaking these algebras are noncommutative, but all have properties that imply that all ideals have finite Grobner bases. Problem instances in these algebras probably can be solved more directly than by presenting them as quotients of path algebras. <p> Benjamin J. Keller Chapter 2 14 Therefore, given an arbitrary generating set P for an ideal I, different reductions may yield different results. In fact, ideal membership is in general undecidable <ref> [35, 46] </ref>. However, for decidable instances (including all instances in commutative polynomial rings), if a finite generating set P is given, then it is possible to find another generating set G P which generates the same ideal and for which reduction always yields a unique value. <p> Undecidability is shown using a reduction of the word problem for semigroups to the ideal membership problem <ref> [35, p.25] </ref> [46, p.137]. The source of the undecidability is not directly related to finiteness. This is indicated by using polynomial reduction to solve the ideal membership problem using a finite subset of a Grobner basis for the ideal.
Reference: [36] <author> D. E. Knuth and P. B. Bendix. </author> <title> Simple word problems in universal algebra. </title> <editor> In J. Leech, editor, </editor> <booktitle> Computational Problems in Abstract Algebra, </booktitle> <pages> pages 263-297, </pages> <year> 1970. </year>
Reference-contexts: Such a system is convergent (a more formal definition is given in Chapter 2). Given an arbitrary rewriting system, the Knuth-Bendix completion algorithm can be used to find an equivalent convergent rewriting system <ref> [36] </ref>. The Benjamin J. Keller Chapter 1 3 difficulty is that for any given rewrite system the equivalent convergent system may not be finite; so, in general, a Knuth-Bendix computation might not terminate. <p> On the other hand, given some noetherian system (usually obtained by choosing a well-ordering of the terms compatible with the operation structure and orienting the rules by the order), an equivalent convergent system may be found using Knuth-Bendix completion <ref> [36] </ref>. The completion algorithm considers critical pairs of terms which correspond to a pair of rules whose left-hand sides interact.
Reference: [37] <author> L. Lovasz. </author> <title> A homology theory for spanning trees of a graph. </title> <journal> Acta Mathematica Academiae Scientiarum Hungaricae, </journal> <volume> 30(3-4):241-251, </volume> <year> 1977. </year>
Reference-contexts: The idea is to incrementally mutate the family of trees for &lt; i toward the family of trees for &lt; f and change G as the orders change. Spanning trees are all related by edge swaps (see Lovasz <ref> [37] </ref>), and most algorithms that generate all spanning trees of a graph use this fact. It might be possible to use a similar approach to "walk" from one family of trees to another, and then use an approach similar to the commutative Grobner walk to change the basis.
Reference: [38] <author> U. Martin. </author> <title> A note on division orderings on strings. </title> <journal> Information Processing Letters, </journal> <volume> 36 </volume> <pages> 237-240, </pages> <year> 1990. </year>
Reference-contexts: Experience in string rewriting suggests that the length lexicographic order generally results in good performance [39]. However, for particular classes of problems other orders are better; an example is the recursive path (or wreath product) order for polycyclic groups [52]. Most results about orders on strings prove general properties <ref> [38] </ref> or classification results [51], but there is no comparable result to the result regarding degree reverse lexicographic for commutative Grobner bases. 5.2 Definition Admissible orders in path algebras are not that different from ones in free algebras, but they must take into account the structure of the graph.
Reference: [39] <author> U. Martin. </author> <title> On the diversity of orderings on strings. </title> <journal> Fundimenta Informaticae, </journal> 24(1/2):25-46, 1995. 
Reference-contexts: Another related problem is the choice of order for string rewriting. Experience in string rewriting suggests that the length lexicographic order generally results in good performance <ref> [39] </ref>. However, for particular classes of problems other orders are better; an example is the recursive path (or wreath product) order for polycyclic groups [52]. <p> The vector orders have the same definition as the lexicographic orders for commutative monoids. This class of orders is in no way complete. There are many other orders on strings that could be Benjamin J. Keller Chapter 5 81 defined on the paths of a graph. Martin <ref> [39] </ref> considers a wider class of orders on strings. In the experiments that follow, we exclude the weight orders because there are simply too many of them, and choosing the "best" weight order for the experiments is not possible.
Reference: [40] <author> U. Martin, </author> <year> 1996. </year> <type> Personal Communication. </type>
Reference-contexts: Therefore, the second and third conditions are equivalent. fl This theorem is a specific form of a folk theorem from string rewriting that says equivalence of two orders for a rewriting system is determined by how the two orders sequence the equivalence classes of terms defined by the rewrite rules <ref> [40] </ref>. Theorem 6.1 says that how two orders behave on uniform equivalence classes determines equivalence, at least, with respect to determining a Grobner basis.
Reference: [41] <author> U. Martin. </author> <title> Invariants of string rewriting systems: examples and questions. </title> <booktitle> In Symbolic Rewriting Techniques, </booktitle> <year> 1996. </year> <note> (submitted). </note>
Reference-contexts: Once this approach is complete, it might be possible to combine it with an approach using information on the generating relations to make the choice of order. This and other future research directions are discussed in Section 6.3. The work by Martin <ref> [41] </ref> on determining orders that induce termination of string rewriting 92 Benjamin J. Keller Chapter 6 93 systems is related and could be useful. <p> If this can be shown it would be possible to check for families of trees that will give rise to inconsistencies. 6.3 Future Directions The previous sections suggest several possible directions that future research might take. 6.3.1 Orders and Generators Similar work is done by Martin <ref> [41] </ref>, but instead of using the underlying structure of the language, she uses string rewriting rules to determine constraints on the orders. <p> After finding a consistent set of constraints it is possible to build weight pre-orders as was done from spanning trees in Section 6.2. Admissible orders that satisfy these constraints are equivalent in the sense given in Section 6.1 <ref> [41] </ref>. It is certainly possible (and necessary) to combine constraints determined by the quiver of the path algebra, and the relations of the generating set.
Reference: [42] <author> E. M. McCreight. </author> <title> A space-economical suffix tree construction algorithm. </title> <journal> Journal of the ACM, </journal> <volume> 23(2) </volume> <pages> 262-272, </pages> <year> 1976. </year>
Reference-contexts: For each v, the label l (v) is a prefix of the suffixes represented by all leaves of the subtree rooted at v. Given a word s such that s = l (v) for some node v of a suffix tree, then v is called the locus of s <ref> [42] </ref>. Note that for a word of length m, there are m leaves of the suffix tree, and the size of the tree is bounded by 2m 1. For dictionary matching, the suffix tree holds the suffixes for the individual dictionary words. <p> The tree is actually built by inserting each dictionary word in sequence. The insertion algorithm and data structure used for the suffix tree are based on that of Mc-Creight <ref> [42] </ref>. McCreight's algorithm inserts the suffixes from the longest to the shortest, and uses suffix links in the tree so that insertion requires only linear time. <p> Let w be a word and w k be the length k suffix of w. Define head (w k ) = s, where s is the longest prefix of w k that is also a prefix of w l for some l satisfying jwj &gt; l &gt; k. McCreight <ref> [42] </ref> shows that if head (w k+1 ) = aff for a symbol a and a possibly empty word ff then ff is a prefix of head (w k ).
Reference: [43] <author> B. Mishra and C. Yap. </author> <title> Notes on Grobner bases. </title> <journal> Information Sciences, </journal> <volume> 48 </volume> <pages> 219-252, </pages> <year> 1989. </year>
Reference-contexts: Hironaka [32] first defined standard bases, which are closely related to Grobner bases; however, Buchberger first defined Grobner bases (for commutative polynomial rings) and the algorithm for computing them [11]. Mishra and Yap <ref> [43] </ref> discuss the relationship between standard and Grobner bases. The algorithm takes as input a set of polynomials and adds new polynomials to create a new set for which all polynomial reductions converge. In the commutative case, a finite Grobner basis always exists, and Buchberger's algorithm always terminates.
Reference: [44] <author> B. Mitchell. </author> <title> Rings with several objects. </title> <booktitle> Advances in Mathematics, </booktitle> <volume> 8 </volume> <pages> 1-161, </pages> <year> 1972. </year>
Reference-contexts: The Grobner basis theory for rings whose terms are elements of monoids presented by string rewriting systems is developed by Reinert [48]. Path algebras can be described in this setting as monoid rings with zero divisors. The rings with many objects defined by Mitchell <ref> [44] </ref> are very similar to path algebras, and the Grobner basis theory likely extends to these algebras. 1.1.3 Applications Noncommutative Grobner bases were developed as a tool for algebraic research, and therefore most applications are in algebra. However, there are also other more "real-world" applications.
Reference: [45] <author> F. Mora. </author> <title> Groebner bases for noncommutative polynomial rings. </title> <editor> In J. Calmet, editor, </editor> <title> Algebraic Algorithms and Error-Correcting Codes, </title> <publisher> LNCS# 229, </publisher> <pages> pages 353-362. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1986. </year>
Reference-contexts: Noncommutative algebras are quotients of free (associative) algebras, where the terms are elements of a free monoid over the alphabet of indeterminates. Bergman [8] first defines the concept of Grobner bases for free algebras, but the algorithm is due to Mora <ref> [45] </ref>. The algorithm for the noncommutative case is nearly identical to the one for the commutative case with the primary difference being how the new elements are formed. However, for noncommutative algebras, Grobner bases are not guaranteed to be finite.
Reference: [46] <author> T. Mora. </author> <title> An introduction to commutative and non-commutative Grobner bases. </title> <journal> Theoretical Computer Science, </journal> <volume> 134 </volume> <pages> 131-173, </pages> <year> 1994. </year>
Reference-contexts: For commutative Grobner basis computations, progress has been made toward improving the efficiency through algorithms that eliminate unnecessary work. However, for Grobner bases in noncommutative algebras, all that is known (or speculated) is that the commutative techniques should still apply (see the survey by Mora <ref> [46] </ref>). The algorithms considered in this research are a mix of new algorithms and adaptations of algorithms used in the commutative case. We successfully identify a configuration of alternative algorithms that computes noncommutative Grobner bases more efficiently. <p> Benjamin J. Keller Chapter 2 14 Therefore, given an arbitrary generating set P for an ideal I, different reductions may yield different results. In fact, ideal membership is in general undecidable <ref> [35, 46] </ref>. However, for decidable instances (including all instances in commutative polynomial rings), if a finite generating set P is given, then it is possible to find another generating set G P which generates the same ideal and for which reduction always yields a unique value. <p> Undecidability is shown using a reduction of the word problem for semigroups to the ideal membership problem [35, p.25] <ref> [46, p.137] </ref>. The source of the undecidability is not directly related to finiteness. This is indicated by using polynomial reduction to solve the ideal membership problem using a finite subset of a Grobner basis for the ideal. <p> Using this order, the partial Grobner basis bounded by tip &lt; (f ) is finite. However, the undecidability of the ideal membership problem implies that this finite partial basis is not computable <ref> [46, pp.137-138] </ref>. There are classes of ideals for which the existence of a finite Grobner basis is decidable. Decidable instances occur when the ideal has a finite Grobner basis either for all admissible orders or for some Benjamin J. <p> No general conditions for the second case are known. The slightly different problem of finding a partial (bounded) basis is decidable when all elements of the ideal are (degree) homogeneous and the order is compatible with the length of terms <ref> [46, p.138] </ref>. 2.6 Relationship to Rewriting The earlier discussion showed how the Grobner basis computation is a kind of nonlinear Gaussian elimination. In this section, the relationship of Grobner basis to another kind of algebraic computation called term rewriting is considered. <p> Usually, this means finding new elements that can be used to eliminate other triples (see the discussion on triple elimination below). In general, a selection strategy need only satisfy a fairness property that the selection of a particular triple is not postponed indefinitely (see <ref> [46] </ref>). One form of selection strategy is to choose the triple with the smallest common multiple with respect to some well-order (that need not be the same as the admissible order on the polynomials). <p> Buchberger defines several criteria that can be used to determine whether a critical pair can be eliminated, and later Gebauer and Moller [22] derive similar criteria using syzygies. Mora <ref> [46] </ref> shows (using syzygies) that these criteria can be applied in computing noncommutative Grobner bases. Another proof is given in Appendix A that uses an approach like that of Becker and Weispfenning [7]. What is proved in the appendix is known as Buchberger's second criterion.
Reference: [47] <author> A. A. Reeves. </author> <title> The worst order is not always the lexicographic order. </title> <journal> SIGSAM Bulletin, </journal> <volume> 25(4) </volume> <pages> 18-19, </pages> <year> 1992. </year> <journal> Erratum vol. </journal> <volume> 26, no. 1, </volume> <month> p.13. </month>
Reference-contexts: For commutative Grobner bases, an order called (degree) reverse lexicographic has been shown to be optimal in the sense that the maximum degree of any tip generated during a computation using the order is minimal among all possible orders [6]. Reeves <ref> [47] </ref> demonstrates that for some problem instances other orders can do as well as the degree reverse lexicographic order. The degree reverse lexicographic order corresponds to an order on noncommutative instances (here it is called "length right vector lexicographic").
Reference: [48] <author> B. Reinert. </author> <title> On Grobner Bases in Monoid and Group Rings. </title> <type> PhD thesis, </type> <institution> FB Informatik, University of Kaiserslautern, </institution> <year> 1995. </year>
Reference-contexts: Because of this, these cases are not considered here. The Grobner basis theory for rings whose terms are elements of monoids presented by string rewriting systems is developed by Reinert <ref> [48] </ref>. Path algebras can be described in this setting as monoid rings with zero divisors.
Reference: [49] <author> L. Robbiano. </author> <title> Term orderings on the polynomial ring. </title> <editor> In B. F. Caviness, editor, </editor> <booktitle> EUROCAL `85, </booktitle> <volume> LNCS# 204, </volume> <pages> pages 513-517. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: The algorithm uses the fact that admissible orders on commutative terms correspond to projective cones and transform the cone from the initial order to the cone for the final order. This algorithm depends heavily on the ability to characterize all admissible orders by weight vectors (see Robbiano <ref> [49] </ref> or Dube, Mishra and Yap [19]). While there is no such characterization for admissible orders on strings, the spanning trees might present an opportunity for a similar algorithm for path algebras.
Reference: [50] <author> J. J. Rotman. </author> <title> An introduction to homological algebra. </title> <publisher> Academic Press, </publisher> <year> 1979. </year> <note> REFERENCES 112 </note>
Reference-contexts: Instance M39 is a modification of BT31, where the graph has an additional eight vertices used to create cycles by adding arcs to the eight pairs of leaves. The last input instance is P5, which is a Froebenius algebra <ref> [50] </ref>. The exact problem instance is given in Appendix C. Benjamin J. Keller Chapter 3 51 Each of these individual problems is combined with each of eight orders to form an input instance.
Reference: [51] <author> E. A. Scott. </author> <title> Weights for total division orderings on strings. </title> <journal> Theoretical Computer Science, </journal> <volume> 135 </volume> <pages> 345-359, </pages> <year> 1994. </year>
Reference-contexts: However, for particular classes of problems other orders are better; an example is the recursive path (or wreath product) order for polycyclic groups [52]. Most results about orders on strings prove general properties [38] or classification results <ref> [51] </ref>, but there is no comparable result to the result regarding degree reverse lexicographic for commutative Grobner bases. 5.2 Definition Admissible orders in path algebras are not that different from ones in free algebras, but they must take into account the structure of the graph.
Reference: [52] <author> C. C. Sims. </author> <title> Computation with Finitely Presented Groups. </title> <publisher> Cambridge University Press, </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: Completion in term rewriting uses discrimination trees to match terms and to find critical pairs [23]. Other (simpler) structures are used for matching in string rewriting. Sims <ref> [52] </ref> defines index automata that can be used for the pattern matching problems in completion of string rewriting systems. These matching problems are the same as for the Grobner basis computation; however, Sims suggests using the dictionary matching approach of Aho and Corasick [1]. The dictionary Benjamin J. <p> Experience in string rewriting suggests that the length lexicographic order generally results in good performance [39]. However, for particular classes of problems other orders are better; an example is the recursive path (or wreath product) order for polycyclic groups <ref> [52] </ref>. <p> Along with the fact that insertions and deletions of words from the dictionary are also fast, the fast search times make this approach a significant improvement over the other algorithms that might be used (single-word matching algorithms, and the extension of static dictionary matching defined by Sims <ref> [52] </ref>). Both of these algorithmic contributions dramatically improve the understanding of the computation of noncommutative Grobner bases.
Reference: [53] <author> T. </author> <title> Stokes. Grobner bases in exterior algebras. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 6 </volume> <pages> 233-250, </pages> <year> 1990. </year>
Reference-contexts: However, most are "almost-commutative" polynomial rings where the relationship between products of indeterminates like ab is not ba but some other expression of a and b. Examples of these algebras are Weyl algebras [21], enveloping algebras of Lie algebras [3], algebras of solvable type [35], Grassman algebras <ref> [26, 53] </ref>, and Clifford algebras [26]. Strictly speaking these algebras are noncommutative, but all have properties that imply that all ideals have finite Grobner bases. Problem instances in these algebras probably can be solved more directly than by presenting them as quotients of path algebras.
Reference: [54] <author> C. Traverso and L. Donati. </author> <title> Experimenting the Grobner basis algorithm with the AlPI. </title> <booktitle> In ISSAC '89, </booktitle> <pages> pages 192-198, </pages> <year> 1989. </year>
Reference-contexts: If the well-order used for selection is also the admissible used to order the polynomials, this strategy is called the normal strategy. Fairness is ensured by the property of well-orders (there is not an infinite sequence of triples less than any particular triple). Traverso and Donati <ref> [54] </ref> describe other forms of selection. One example that performs well in their experiments (in the commutative case) is ordering the triples by the leading term of the corresponding overlap relation. In Figure 3.1, the Select function performs selection. <p> The algorithm for tip-reduction is shown in Figure 3.8 and the algorithm for total reduction is shown in Figure 3.9. Clearly, tip reduction is a simpler algorithm, but it is not clear which is the better choice. For the commutative case, Traverso and Donati <ref> [54, p.196] </ref> Benjamin J. Keller Chapter 3 37 Select (T ). Triple selection. INPUT: Set T of triples. <p> The choice of divisor can lead to coefficient explosion if the coefficient field is not finite (e.g., is the rational numbers, or a rational function field). Traverso and Donati <ref> [54] </ref> discuss experiments in the noncommutative case that imply a good choice is the divisor with the fewest terms; however, they also note that the choice of divisor is less significant than the selection strategy. <p> Specifically, if p is tip-reducible by q, then p and q form a critical pair for which the s-polynomial SPol (p; q) is the simple reduction of p by q. Traverso and Donati <ref> [54] </ref> consider a selection strategy that chooses reduction of redundant elements over other pairs that is analogous to element reduction. In the noncommutative case, however, overlap relations cannot correspond to reductions of redundant elements, and so redundant element reduction must be done explicitly.
Reference: [55] <author> W. Wechler. </author> <title> Universal Algebra for Computer Scientists. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: Term rewriting is used primarily to test equivalence of terms in a universal algebra <ref> [55] </ref> using a set of rules that defines an equivalence relation on the terms. The goal in term rewriting is to have a system of rules that can be used to rewrite any term to a unique irreducible form regardless of which rules are applied and in what order.
Reference: [56] <author> T. Yan. </author> <title> The geobucket data structure for polynomials. </title> <note> (paper in preparation), </note> <year> 1996. </year>
Reference-contexts: The indexing is discarded once the reduction is complete. The only advantage of this approach is when p has a large number of terms, and the sequential search for the beginning of the merge is too inefficient. Yan <ref> [56] </ref> describes another data structure to store subterms during reduction as a list of sorted lists of geometrically increasing length. Merging is then done after the reduction is complete. Benjamin J.
References-found: 56

