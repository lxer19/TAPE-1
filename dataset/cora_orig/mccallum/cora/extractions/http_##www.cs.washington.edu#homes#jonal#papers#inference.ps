URL: http://www.cs.washington.edu/homes/jonal/papers/inference.ps
Refering-URL: http://www.cs.washington.edu/homes/jonal/papers/index.html
Root-URL: 
Email: jonal@cs.washington.edu  
Title: Incremental Type Inference for Software Engineering  
Author: Jonathan Aldrich 
Address: Washington  
Affiliation: University of  
Abstract: Software engineering focused type inference can enhance programmer productivity in statically typed object-oriented languages. Type inference is a system of automatically inferring the argument and return types of a function. It provides considerable programming convenience, because the programmer can realize the benefits of a statically typed language without manually entering the type annotations. We study the problem of type inference in objectoriented languages and propose an incremental, programmer-aided approach. Code is added one method at a time and missing types are inferred if possible. We present a specification and algorithm for inferring simple objectoriented types in this kind of incremental development environment. 
Abstract-found: 1
Intro-found: 1
Reference: [Ageson, 1995] <author> Ole Agesen, </author> <title> Concrete Type Inference: Delivering ObjectOriented Applications, </title> <type> Ph.D. thesis, </type> <institution> Stanford University, </institution> <month> December </month> <year> 1995. </year>
Reference: [Borning and Ingalls, 1982] <author> Alan H. Borning and Dan H. Ingalls. </author> <title> A Type Declaration and Inference System for Smalltalk, </title> <booktitle> Conference Record of the Ninth Annual ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 133-141, </pages> <address> Albuquerque, New Mexico, </address> <month> January </month> <year> 1982. </year>
Reference-contexts: Although I have attempt to included many objectoriented type inference projects that support the software-engineering aspects of type inference, this list is almost certainly incomplete. 3.1. Early Work Alan Borning and Dan Ingalls were among the first to add type inference to an objectoriented language <ref> [Borning and Ingalls, 1982] </ref>. They created a type type A; type B; type C; type D; signature foo (A,B):A; signature foo (C,D):C; method bar (arg1, arg2) - return foo (arg1, arg2); - declaration and inference system for Smalltalk-80.
Reference: [Cardelli, 1984] <author> Luca Cardelli. </author> <title> A Semantics of Multiple Inheritance, </title> <booktitle> Proceedings of the Conference on Semantics of Data Types, </booktitle> <address> France, </address> <year> 1984. </year>
Reference-contexts: Type Systems Many different type systems have been proposed for objectoriented programming systems. This section discusses the software engineering tradeoffs inherent in many of these choices, motivating the type system used in our model. 2.1. Structural Subtyping Cardelli <ref> [Cardelli, 1984] </ref> proposed a simple model of structural subtyping in an objectoriented language with multiple inheritance. In structural subtyping, type a subtypes type b iff type a includes all of the method interfaces in type b.
Reference: [Cardelli and Wegner, 1985] <author> Luca Cardelli and Peter Wegner. </author> <title> On Understanding Types, Data Abstraction, and Polymorphism, </title> <journal> Computing Surveys, </journal> <volume> 17(4), </volume> <month> December </month> <year> 1985. </year>
Reference-contexts: Ole Ageson extended their work to produce a type inference system for Self [Agesen, 1995]. David Grove and the Cecil group applied these methods successfully in an optimizing compiler for Cecil [Grove, 1995]. 3.3. Is Inference Feasible? Cardelli and Wegner developed a strongly typed language called Fun <ref> [Cardelli and Wegner, 1985] </ref>, integrating type inference with subtyping and a powerful type system called bounded quantification. In 1992 Benjamin Pierce proved that their type inference system was undecidable [Pierce, 1992] and there was speculation that type inference would be impossible in any reasonably powerful objectoriented type system.
Reference: [Canning et al., 1989] <author> Peter Canning, William Cook, Walter Hill, Walter Olthoff, and John C. Mitchell. </author> <title> F-Bounded Polymorphism for ObjectOriented Programming, </title> <booktitle> Proceedings of the Fourth International Conference on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pp. 273-280, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: We include closures, multiple inheritance and overloading in our system, but leave advanced typing features such as polymorphic, parameterized, and F-bounded types <ref> [Canning et al., 1989] </ref> to future research. While these advanced type systems are necessary for many real applications, they complicate the inference problem considerably. Many real-world programming languages, including Java, omit features like F-bounded polymorphism to simplify their programming model.
Reference: [Duggan, 1995] <author> Dominic Duggan. </author> <title> Polymorphic Methods With Self Types for ML-like Languages, </title> <type> Technical report CS-95-03, </type> <institution> University of Waterloo, </institution> <year> 1995. </year>
Reference-contexts: Camls type inference system is based on HM (X), a theoretical framework described in [Lufer and Odersky, 1994]. Two other proposals to add objects to ML, one by Dominic Duggan <ref> [Duggan, 1995] </ref> and the other named Object ML [Reppy and Riecke, 1996], provide weaker kinds of type inference.
Reference: [Eifrig et al., 1995] <author> J. Eifrig, S. Smith, V. Trifonov. </author> <title> Sound Polymorphic Type Inference for Objects, </title> <booktitle> OOPSLA95 ObjectOriented Programming Systems, Languages and Applications, </booktitle> <pages> pp. 169-184, </pages> <year> 1995. </year>
Reference: [Graver, 1989] <author> Justin O. Graver. </author> <title> Type-Checking and Type-Inference for ObjectOriented Programming Languages, </title> <type> Ph.D. thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: The programmer specifies only type definitions, the types that each class conforms to, and the types of global, class, and instance variables. The types of local variables, methods, and closures can all be inferred, eliminating up to 90% of all type annotations <ref> [Graver, 1989] </ref>. 2. Type Systems Many different type systems have been proposed for objectoriented programming systems. This section discusses the software engineering tradeoffs inherent in many of these choices, motivating the type system used in our model. 2.1. <p> Typed Smalltalk The Typed Smalltalk project, headed by Ralph Johnson and Justin Graver, designed and implemented a static type specification and inference system for Smalltalk <ref> [Graver, 1989] </ref>. Their inference algorithm is intended to automatically infer types for non-primitive methods, local variables, blocks, and literals. In their survey this includes over 95% of all Smalltalk methods and 90% of variables.
Reference: [Grove, 1995] <author> David Grove. </author> <title> The Impact of Interprocedural Class Inference on Optimization, </title> <booktitle> Proceedings of CASCON95 Centre for Advanced Studies Conference, </booktitle> <pages> pp. 195-203, </pages> <address> Toronto, Ontario, Canada, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: Ole Ageson extended their work to produce a type inference system for Self [Agesen, 1995]. David Grove and the Cecil group applied these methods successfully in an optimizing compiler for Cecil <ref> [Grove, 1995] </ref>. 3.3. Is Inference Feasible? Cardelli and Wegner developed a strongly typed language called Fun [Cardelli and Wegner, 1985], integrating type inference with subtyping and a powerful type system called bounded quantification.
Reference: [Hense and Smolka, 1993] <author> A.V. Hense and G. Smolka. </author> <title> Principal Types for ObjectOriented Languages, Technischer Bericht Nr. A 02/93, </title> <institution> Universitt des Saarlandes, </institution> <address> Im Stadtwald 15, 6600 Saabrcken 11, Germany, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: For this reason, we suggest that type inference focused on extensibility be kept entirely separate from type inference used to optimize program execution. 3.5. Recent Related Work Osmall <ref> [Hense and Smolka, 1993] </ref> is a minimal objectoriented language that includes inference of principal types, similar to that of ML. It appears they use record subtyping, which isnt as expressive as abstract typing from a software-engineering perspective. Objective Caml [Rmy and Vouillon, 1998] is an objectoriented extension to ML.
Reference: [Jaffar et al., 1992] <author> Joxan Jaffar, Spiro Michaylov, Peter J. Stuckey, and Roland H.C. Yap. </author> <title> The CLP(R) Language and System, </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> Vol. 14, No. 3, </volume> <month> July </month> <year> 1992. </year>
Reference-contexts: It is crucial that we do not sacrifice the benefits of a well-designed type system just to make type inference easier. This restriction makes type inference more difficult; but if type inference is an optional productivity-enhancing tool, our algorithms need not be perfect. Following the designers of CLP (R) <ref> [Jaffar et al., 1992] </ref>, we believe it is better to provide an approximate solution to the type inference problem than to provide a perfect solution to an easier-to-solve approximation of the type inference problem.
Reference: [Lufer and Odersky, 1994] <author> Konstantin Lufer and Martin Odersky. </author> <title> Polymorphic Type Inference and Abstract Data Types, </title> <journal> Transactions of Programming Languages and Systems, </journal> <year> 1994. </year>
Reference-contexts: Polymorphic types are allowed for functions (as in ML), but not for methods of objects. The language has some nice object features, but its object features seem somewhat low-level, almost like those provided by C++. Camls type inference system is based on HM (X), a theoretical framework described in <ref> [Lufer and Odersky, 1994] </ref>. Two other proposals to add objects to ML, one by Dominic Duggan [Duggan, 1995] and the other named Object ML [Reppy and Riecke, 1996], provide weaker kinds of type inference.
Reference: [Mairson, 1990] <author> Harry G. Mairson. </author> <title> Decidability of ML Typing is Complete for Deterministic Exponential Time, </title> <booktitle> 17th Symposium on Principles of Programming Languages, </booktitle> <publisher> ACM Press, </publisher> <month> January </month> <year> 1990. </year>
Reference-contexts: Static typing is desirable because it ensures that there will be no run time type errors. 1.1. Motivation ML types can be rather complex. It has been shown <ref> [Mairson, 1990] </ref> that the description of the most general type of a function can be exponential in the size of the function definition. In practice, inferred types are not exponentially long but may be more obscure than one might like.
Reference: [Milner et al., 1990] <author> Robin Milner, Mads Tofte, and Robert Harper. </author> <title> The Definition of Standard ML, </title> <publisher> The MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: 1. Introduction Type inference was popularized by the ML language <ref> [Milner et al., 1990] </ref>. ML is made up of functions and simple data types such as records, tuples, and lists. Every function in ML has a well-defined type that includes the required types of its arguments and the type of the result of the function.
Reference: [Odersky and Wadler, 1997] <author> Martin Odersky and Philip Wadler. </author> <title> Pizza into Java: Translating Theory into Practice, </title> <booktitle> Principles of Programming Languages (POPL), </booktitle> <year> 1997. </year>
Reference-contexts: Local Type Inference [Pierce and Turner, 1997] is an attempt to provide partial type inference support for new languages such as Pizza <ref> [Odersky and Wadler, 1997] </ref> that include powerful type systems and higher-order functions. Their system infers the types of local variables and anonymous blocks, while still requiring the programmer to provide types for top-level function definitions.
Reference: [Oxhj et al., 1992] <author> Nicholas Oxhj, Jens Palsberg, and Michael I. Schwartzbach. </author> <title> Making Type Inference Practical, </title> <booktitle> in ECOOP92, Sixth European Conference on ObjectOriented Programming, </booktitle> <pages> pp. 329-349, </pages> <address> Utrecht, The Netherlands, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: This class of type inference literature may still be relevant as a source of algorithms that could be modified to support software-engineering types. Jens Palsberg and Michael Schwartzbach have done a lot of work in this area; one algorithm they developed with Nicholas Oxhj is described in <ref> [Oxhj et al., 1992] </ref>. Ole Ageson extended their work to produce a type inference system for Self [Agesen, 1995]. David Grove and the Cecil group applied these methods successfully in an optimizing compiler for Cecil [Grove, 1995]. 3.3.
Reference: [Palsberg, 1996] <author> Jens Palsberg. </author> <title> Type inference for objects, </title> <journal> ACM Computing Surveys, </journal> <volume> 28(2) </volume> <pages> 358-359, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: In this case the programmers intention in writing bar probably applies to only one of the foo signatures. Because union and intersection types are confusing and error-prone, we limit types to the abstractions developed by programmers. 2.4. Principal Types MLs system infers principal types <ref> [Palsberg, 1996] </ref>, which means that an inferred type generalizes all possible types for a function.
Reference: [Pierce, 1992] <author> Benjamin C. Pierce. </author> <title> Bounded Quantification is Undecidable, </title> <booktitle> in 19th ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pp. 305-315, </pages> <year> 1992. </year>
Reference-contexts: Is Inference Feasible? Cardelli and Wegner developed a strongly typed language called Fun [Cardelli and Wegner, 1985], integrating type inference with subtyping and a powerful type system called bounded quantification. In 1992 Benjamin Pierce proved that their type inference system was undecidable <ref> [Pierce, 1992] </ref> and there was speculation that type inference would be impossible in any reasonably powerful objectoriented type system. However, Vorobyov showed that a more general type inference system was decidable [Vorobyov, 1994], indicating that inference of powerful type systems is not necessarily infeasible.
Reference: [Pierce, 1997] <author> Benjamin C. Pierce and David N. Turner. </author> <title> Local Type Inference, </title> <note> Indiana University CSCI Technical Report #493, </note> <month> October </month> <year> 1997. </year>
Reference: [Rmy and Vouillon, 1998] <author> Didier Rmy and Jrme Vouillon. </author> <title> Objective ML: An Effective ObjectOriented Extension to ML, </title> <note> to appear in Theory And Practice of Objects Systems, </note> <year> 1998. </year>
Reference-contexts: Recent Related Work Osmall [Hense and Smolka, 1993] is a minimal objectoriented language that includes inference of principal types, similar to that of ML. It appears they use record subtyping, which isnt as expressive as abstract typing from a software-engineering perspective. Objective Caml <ref> [Rmy and Vouillon, 1998] </ref> is an objectoriented extension to ML. It includes principal types, structural subtyping, multiple inheritance and parameterized types. Polymorphic types are allowed for functions (as in ML), but not for methods of objects.
Reference: [Reppy and Riecke, 1996] <author> John H. Reppy and Jon G. Riecke. </author> <title> Classes in Object ML, </title> <booktitle> presented at the FOOL3 workshop, </booktitle> <month> July </month> <year> 1996. </year>
Reference-contexts: Camls type inference system is based on HM (X), a theoretical framework described in [Lufer and Odersky, 1994]. Two other proposals to add objects to ML, one by Dominic Duggan [Duggan, 1995] and the other named Object ML <ref> [Reppy and Riecke, 1996] </ref>, provide weaker kinds of type inference. Local Type Inference [Pierce and Turner, 1997] is an attempt to provide partial type inference support for new languages such as Pizza [Odersky and Wadler, 1997] that include powerful type systems and higher-order functions.
Reference: [Vorobyov, 1994] <author> S. Vorobyov. Fsub: </author> <title> Bounded quantification is NOT essentially undecidable, </title> <type> Technical Report CRIN94R018, </type> <institution> Centre de Recherche en Informatique de Nancy, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: In 1992 Benjamin Pierce proved that their type inference system was undecidable [Pierce, 1992] and there was speculation that type inference would be impossible in any reasonably powerful objectoriented type system. However, Vorobyov showed that a more general type inference system was decidable <ref> [Vorobyov, 1994] </ref>, indicating that inference of powerful type systems is not necessarily infeasible. More recently, the Hopkins Object Group has experimented with recursively constrained types [Efrig et al., 1995], which are even more general than F-bounded types.
References-found: 22

