URL: http://www.cs.tamu.edu/faculty/bhuyan/papers/ics96.ps
Refering-URL: http://www.cs.tamu.edu/faculty/bhuyan/
Root-URL: http://www.cs.tamu.edu
Email: E-mail: fakhil,bhuyang@cs.tamu.edu  
Title: Evaluating Virtual Channels for Cache-Coherent Shared-Memory Multiprocessors  
Author: Akhilesh Kumar and Laxmi N. Bhuyan 
Address: College Station, TX 77843-3112, USA.  
Affiliation: Department of Computer Science Texas A&M University  
Abstract: In this paper, performance of wormhole routed 2-D torus network with virtual channels has been evaluated for cache-coherent shared-memory multiprocessors with execution-driven simulation. The traffic in such systems is very different from the traffic in message-passing environment. We show the impact of number of virtual channels, flit buffers per virtual channel, and internal links. The study shows that 4 virtual channels per link is most efficient for 2-D torus networks. The number of flit buffers per virtual channel has a considerable impact and 2 to 4 flit buffers are usually enough. The number of internal links makes a difference on the performance for applications, such as MP3D, that generate large contention for shared variables. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. N. Bhuyan, Q. Yang, and D. P. Agrawal, </author> <title> "Performance of Multiprocessor Interconnection Networks," </title> <booktitle> Computer, </booktitle> <pages> pp. 25-37, </pages> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: Thus it is desirable that the IN provides minimum latency for servicing the cache misses. The focus of this paper is on the evaluation of the IN in cache-coherent shared-memory systems through execution-driven simulation. The performance evaluation of multiprocessor INs has been an active area of research <ref> [1] </ref>. This has contributed to advances in the design and implementation of the networks to a great extent.
Reference: [2] <author> L. M. Ni and P. K. McKinley, </author> <title> "A Survey of Wormhole Routing Techniques in Direct Networks," </title> <booktitle> Computer, </booktitle> <pages> pp. 62-76, </pages> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: Moreover, the effect of all these advances in the INs has to be judged from the real changes in the execution time of applications. Therefore, we have chosen the approach of execution-driven simulation. Wormhole routing <ref> [2] </ref> is an efficient switching technique for multiprocessor networks. Here, the messages/packets are divided into small flits, typically 8-32 bits long, and sent over the network in a pipeline fashion. Virtual channels [3] are used in wormhole networks to avoid deadlocks and to improve link utilization and network throughput.
Reference: [3] <author> W. J. Dally, </author> <title> "Virtual-Channel Flow Control," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 3, </volume> <pages> pp. 194-205, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Therefore, we have chosen the approach of execution-driven simulation. Wormhole routing [2] is an efficient switching technique for multiprocessor networks. Here, the messages/packets are divided into small flits, typically 8-32 bits long, and sent over the network in a pipeline fashion. Virtual channels <ref> [3] </ref> are used in wormhole networks to avoid deadlocks and to improve link utilization and network throughput. In this paper we evaluate the performance of an 8fi8 torus network with wormhole routing and virtual channel flow control in shared-memory multiprocessors. <p> Also, mesh networks without end-around connections have significant performance degradations at the boundary nodes [5, 8]. The performance of wormhole networks with virtual channels has been evaluated in various studies <ref> [3, 6, 9] </ref>. However, all these evaluations are based either on analytical models that assume certain traffic distributions or on simulations using statistical workload models. Adve and Vernon [6] analyzed the performance of mesh and torus networks using closed queueing model.
Reference: [4] <author> D. Lenoski, et al, </author> <title> "The Stanford DASH Multiprocessor," </title> <booktitle> Computer, </booktitle> <pages> pp. 63-79, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: In this paper we evaluate the performance of an 8fi8 torus network with wormhole routing and virtual channel flow control in shared-memory multiprocessors. We selected a 2-D torus network with bidirectional links for our performance study, because it is a popular topology <ref> [4, 5, 6, 7] </ref>. Also, mesh networks without end-around connections have significant performance degradations at the boundary nodes [5, 8]. The performance of wormhole networks with virtual channels has been evaluated in various studies [3, 6, 9].
Reference: [5] <author> K. Bolding and L. Snyder, </author> <title> "Mesh and Torus Chaotic Routing," </title> <type> Tech Rep UW-CSE-91-04-04, </type> <institution> Dept of Computer Sci. Engg., Univ. of Washington, </institution> <month> Apr. </month> <year> 1991. </year>
Reference-contexts: In this paper we evaluate the performance of an 8fi8 torus network with wormhole routing and virtual channel flow control in shared-memory multiprocessors. We selected a 2-D torus network with bidirectional links for our performance study, because it is a popular topology <ref> [4, 5, 6, 7] </ref>. Also, mesh networks without end-around connections have significant performance degradations at the boundary nodes [5, 8]. The performance of wormhole networks with virtual channels has been evaluated in various studies [3, 6, 9]. <p> We selected a 2-D torus network with bidirectional links for our performance study, because it is a popular topology [4, 5, 6, 7]. Also, mesh networks without end-around connections have significant performance degradations at the boundary nodes <ref> [5, 8] </ref>. The performance of wormhole networks with virtual channels has been evaluated in various studies [3, 6, 9]. However, all these evaluations are based either on analytical models that assume certain traffic distributions or on simulations using statistical workload models.
Reference: [6] <author> V. S. Adve and M. K. Vernon, </author> <title> "Performance Analysis of Mesh Interconnection Networks with Deterministic Routing," </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> vol. 5, no. 3, </volume> <pages> pp. 225-246, </pages> <month> March </month> <year> 1994. </year>
Reference-contexts: In this paper we evaluate the performance of an 8fi8 torus network with wormhole routing and virtual channel flow control in shared-memory multiprocessors. We selected a 2-D torus network with bidirectional links for our performance study, because it is a popular topology <ref> [4, 5, 6, 7] </ref>. Also, mesh networks without end-around connections have significant performance degradations at the boundary nodes [5, 8]. The performance of wormhole networks with virtual channels has been evaluated in various studies [3, 6, 9]. <p> Also, mesh networks without end-around connections have significant performance degradations at the boundary nodes [5, 8]. The performance of wormhole networks with virtual channels has been evaluated in various studies <ref> [3, 6, 9] </ref>. However, all these evaluations are based either on analytical models that assume certain traffic distributions or on simulations using statistical workload models. Adve and Vernon [6] analyzed the performance of mesh and torus networks using closed queueing model. <p> The performance of wormhole networks with virtual channels has been evaluated in various studies [3, 6, 9]. However, all these evaluations are based either on analytical models that assume certain traffic distributions or on simulations using statistical workload models. Adve and Vernon <ref> [6] </ref> analyzed the performance of mesh and torus networks using closed queueing model. Their model takes into account a limited number of multiple requests from a node before it is blocked.
Reference: [7] <author> Intel Corp, </author> <title> Paragon XP/S Product Overview, </title> <year> 1991. </year>
Reference-contexts: In this paper we evaluate the performance of an 8fi8 torus network with wormhole routing and virtual channel flow control in shared-memory multiprocessors. We selected a 2-D torus network with bidirectional links for our performance study, because it is a popular topology <ref> [4, 5, 6, 7] </ref>. Also, mesh networks without end-around connections have significant performance degradations at the boundary nodes [5, 8]. The performance of wormhole networks with virtual channels has been evaluated in various studies [3, 6, 9].
Reference: [8] <author> S. Chittor and R. Enbody, </author> <title> "Performance Degradation in Large Wormhole Routed Interprocessor Communication Networks," </title> <booktitle> In Proc. of the 1990 Int'l Conference on Parallel Processing, </booktitle> <pages> pp. </pages> <address> I-424-428, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: We selected a 2-D torus network with bidirectional links for our performance study, because it is a popular topology [4, 5, 6, 7]. Also, mesh networks without end-around connections have significant performance degradations at the boundary nodes <ref> [5, 8] </ref>. The performance of wormhole networks with virtual channels has been evaluated in various studies [3, 6, 9]. However, all these evaluations are based either on analytical models that assume certain traffic distributions or on simulations using statistical workload models.
Reference: [9] <author> Y. M. Boura and C. R. Das, </author> <title> "Modeling Virtual Channel Flow Control in Hypercubes," </title> <booktitle> In Proc. of the First IEEE Symp. on High-Performance Computer Architecture, </booktitle> <pages> pp. 166-175, </pages> <month> Jan. </month> <year> 1995. </year>
Reference-contexts: Also, mesh networks without end-around connections have significant performance degradations at the boundary nodes [5, 8]. The performance of wormhole networks with virtual channels has been evaluated in various studies <ref> [3, 6, 9] </ref>. However, all these evaluations are based either on analytical models that assume certain traffic distributions or on simulations using statistical workload models. Adve and Vernon [6] analyzed the performance of mesh and torus networks using closed queueing model.
Reference: [10] <author> Q. Yang, L. N. Bhuyan, and B. Liu, </author> <title> "Analysis and Comparison of Cache Coherence Protocols for a Packet-Switched Multiprocessor," </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 38, </volume> <pages> pp. 1143-1153, </pages> <month> Aug. </month> <year> 1989. </year>
Reference-contexts: However, the model is not appropriate for cache-coherent systems, where a number of invalidation messages are generated to maintain coherence among the caches and the main memory. On the other hand, analytical and simulation models, such as <ref> [10, 11] </ref>, capture the cache coherence traffic in detail, but here we concentrate on wormhole routing with virtual channels. In this paper, we evaluate the performance using an execution-driven simulation where traffic is generated using applications.
Reference: [11] <author> J. Archibald and J.-L. Baer, </author> <title> "Cache Coherence Protocols: Evaluation Using a Multiprocessor Simulation Model," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 4, no. 4, </volume> <pages> pp. 273-298, </pages> <month> Nov. </month> <year> 1986. </year>
Reference-contexts: However, the model is not appropriate for cache-coherent systems, where a number of invalidation messages are generated to maintain coherence among the caches and the main memory. On the other hand, analytical and simulation models, such as <ref> [10, 11] </ref>, capture the cache coherence traffic in detail, but here we concentrate on wormhole routing with virtual channels. In this paper, we evaluate the performance using an execution-driven simulation where traffic is generated using applications.
Reference: [12] <author> E. A. Brewer, C. N. Dellarocas, A. Colbrook, and W. E. Weihl, "Proteus: </author> <title> A High-Performance Parallel-Architecture Simulator," </title> <institution> MIT/LCS/TR-516, Massachusetts Institute of Technology, </institution> <month> Sept. </month> <year> 1991. </year>
Reference-contexts: Section 4 presents and discusses the results of our simulations. Section 5 provides the details about the execution of each application. Finally, section 6 presents the conclusion and the directions for further work. 2 Simulator Development We have modified the Proteus simulator <ref> [12] </ref> extensively to incorporate virtual channels, multi-flit buffers, multiple internal links and other architectural features. The system considered for evaluation in this paper is a cache-coherent shared-memory multiprocessor connected through a two-dimensional torus network. The network is wormhole routed with virtual channels.
Reference: [13] <author> W. J. Dally and C. L. Seitz, </author> <title> "Deadlock-Free Message Routing in Multiprocessor Interconnection Networks," </title> <journal> IEEE Trans. on Computers, </journal> <pages> pp. 547-553, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: The message is always routed in the lowest required dimension, where a required dimension is the dimension where the coordinates of the current node and the destination node are different. We avoid deadlock in the network by using the scheme proposed by Dally and Seitz <ref> [13] </ref> where a pair of virtual channels, called low channel and high channel, are used. The same scheme is used when the number of virtual channels is two, otherwise, we divide the virtual channels into odd and even virtual channels.
Reference: [14] <author> L. M. Censier and P. Feautrier, </author> <title> "A New Solution to Coherence Problems in Multicache Systems," </title> <journal> IEEE Trans. on Computers, </journal> <pages> pp. 1112-1118, </pages> <month> Dec. </month> <year> 1978. </year>
Reference-contexts: ith dimension link is routed on an odd channel if the ith index of the destination node is greater than the ith index of the current node, otherwise, the message is routed on an even channel. 2.2 Cache coherence protocol and synchronization We implemented the full-map directory-based cache coherence protocol <ref> [14] </ref> for evaluation in this paper. In this scheme, each shared memory block is assigned to a node, called home node, which maintains the directory entries for that block. Each entry in the directory is a bit-vector of 2 same length as the number of nodes.
Reference: [15] <author> A. Kumar and L. N. Bhuyan, </author> <title> "Effect of Virtual Channels and Memory Organization on Cache-Coherent Shared-Memory Multiprocessors," </title> <type> Tech Rep 96-005, </type> <institution> Dept. of Computer Sci, Texas A&M Univ, </institution> <month> Feb. </month> <year> 1996. </year>
Reference-contexts: We have considered that the memory is high-order interleaved, so contigous blocks reside on the same node. The size of a memory block is same as the cache line size. The effect of low-order interleaving of shared blocks on network traffic and execution time is presented in <ref> [15] </ref>. The memory allocation policy also plays a major role in the traffic distribution. The allocation scheme used in our simulator partitions the whole shared memory space into buckets and a shorted list of free buckets is maintained. <p> Here, we have considered only high-order interleaving of memory blocks without any user-defined placement of shared variables. The comparison of performance for high-order and low-order interleaving of shared memory blocks are presented in <ref> [15] </ref>. The execution based evaluation of the network in this paper shows the impact of various network parameters and points the ways to further improve the performance. Our measurements show that the utilization of the network and internal links is very low for most of the applications.
Reference: [16] <author> J. D. Kubiatowicz, </author> <title> "Closing the Window of Vulnerability in Multiphase Transactions: The Alewife Transaction Store," </title> <type> MIT/LCS TR 594, </type> <institution> Massachusetts Institute of Technology, </institution> <month> Feb. </month> <year> 1993. </year>
Reference-contexts: If the invalidation is acknowledged, it may lead to inconsistent state. We have modified the coherence protocol where the cache controllers detect if a message has arrived out-of-order and holds it to be serviced later. The scheme is similar to the scheme used in MIT Alewife system <ref> [16] </ref>. The synchronization method used in our simulations is based on spinlocks using test-test-and-set operation with exponential backoff [17]. Barriers used in many of the applications were implemented using a shared counter. 2.3 Simulation parameters The system parameters used in the simulation are listed in Table 1.
Reference: [17] <author> J. M. Mellor-Crummey and M. L. Scott, </author> <title> "Synchronization Without Contention," </title> <booktitle> In Proceedings of ASPLOS IV, </booktitle> <pages> pp. 269-278, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: The scheme is similar to the scheme used in MIT Alewife system [16]. The synchronization method used in our simulations is based on spinlocks using test-test-and-set operation with exponential backoff <ref> [17] </ref>. Barriers used in many of the applications were implemented using a shared counter. 2.3 Simulation parameters The system parameters used in the simulation are listed in Table 1. We simulated an 8 fi 8 torus network with 8KB of cache and 32KB of memory per node.
Reference: [18] <author> S. Woo, et al, </author> <title> "The SPLASH-2 Programs: Characterization and Methodical Considerations," </title> <booktitle> In Proc. 22nd Annual Int'l Symp. on Computer Architecture, </booktitle> <pages> pp. 24-36, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: The problem is partitioned as per the rows of the distance matrix. The program goes through as many iterations as the number of vertices. Each iteration is followed by a barrier. The blocked LU decomposition program from SPLASH-2 suite <ref> [18] </ref> was done on a 256 fi 256 matrix using 8 fi 8 blocks. The principal data structure is a two-dimensional array in which the first dimension is the block, and the second contains all data points in that block.
Reference: [19] <author> A. Kumar and L. N. Bhuyan, </author> <title> "Parallel FFT Algorithms for Cache Based Shared Memory Multiprocessors," </title> <booktitle> In Proc. of 1993 Int'l Conference on Parallel Processing, volume III, </booktitle> <pages> pp. 23-27, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: We implemented Cooley-Tukey 1-D FFT algorithm <ref> [19] </ref>. The simulations were done on an input of 2 14 points. The principal data structures are two arrays of complex numbers. Though, this algorithm is not optimal for cache based systems [19], but for given problem size, number of processors and cache size, it performs fairly. <p> We implemented Cooley-Tukey 1-D FFT algorithm <ref> [19] </ref>. The simulations were done on an input of 2 14 points. The principal data structures are two arrays of complex numbers. Though, this algorithm is not optimal for cache based systems [19], but for given problem size, number of processors and cache size, it performs fairly. MP3D [20] is a three-dimensional particle simulator used in rarefied fluid flow simulation.
Reference: [20] <author> J. P. Singh, W.-D. Weber, and A. Gupta, </author> <title> "SPLASH: Stanford Parallel Applications for Shared-Memory," </title> <journal> ACM SIGARCH Computer Architecture News, </journal> <volume> vol. 20, no. 1, </volume> , <month> March </month> <year> 1992. </year> <month> 8 </month>
Reference-contexts: The simulations were done on an input of 2 14 points. The principal data structures are two arrays of complex numbers. Though, this algorithm is not optimal for cache based systems [19], but for given problem size, number of processors and cache size, it performs fairly. MP3D <ref> [20] </ref> is a three-dimensional particle simulator used in rarefied fluid flow simulation. We used 16000 molecules with the default geometry provided with SPLASH [20] which uses a 14 fi 24 fi 4 (2646-cell) space containing a single flat sheet placed at an angle to the free stream. <p> Though, this algorithm is not optimal for cache based systems [19], but for given problem size, number of processors and cache size, it performs fairly. MP3D <ref> [20] </ref> is a three-dimensional particle simulator used in rarefied fluid flow simulation. We used 16000 molecules with the default geometry provided with SPLASH [20] which uses a 14 fi 24 fi 4 (2646-cell) space containing a single flat sheet placed at an angle to the free stream. The simulation was done for 5 time steps.
References-found: 20

