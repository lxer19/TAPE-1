URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1181/CS-TR-93-1181.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-93-1181/
Root-URL: http://www.cs.wisc.edu
Title: Domain Independent Disambiguation of Vague Query Specifications  
Author: Yezdi Lashkari Yannis E. Ioannidis 
Degree: submitted in partial fulfillment of the requirements for the degree of Master of Science  Thesis Advisor  Associate Professor of Computer Sciences Certified By Jude W. Shavlik Assistant Professor of Computer Sciences  
Date: July 1993.  
Address: Madison, WI.  
Affiliation: Department of Computer Sciences University of Wisconsin-Madison  
Abstract-found: 0
Intro-found: 1
Reference: [ADJ 90] <author> R. Agrawal, S. Dar, and H. Jagadish, </author> <title> Direct Transitive Closure Algorithms: Design and Performance Evaluation, </title> <journal> ACM TODS, </journal> <volume> Vol 15 (3), </volume> <pages> pp 427-458, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: optimal path computation problem, model our problem as an optimal path computation, and then introduce the path collapse function CON. 3.1 Optimal Path Computation There has been much work done on the problem of computing several properties that are specified over the set of paths in a labeled directed graph <ref> [Carr 79, Ros+ 86, ADJ 90, IRW 93] </ref>. Such properties are called aggregate properties and the computation of such a property is termed a path computation. Most path computation algorithms use some variant of the path algebra formalism below, which is taken from [Carr 79, IRW 93].
Reference: [ABD+ 89] <author> M. Atkinson, F. Banchilhon, D. DeWitt, K. Dittrich, D. Maier, and S. Zdonik, </author> <title> The Object-Oriented Database System Manifesto, </title> <booktitle> in Proc of the International Conference on Deductive and Object-Oriented Databases, </booktitle> <pages> pp 223-240, </pages> <year> 1989. </year>
Reference-contexts: The expansion of the application domains of DBMSs and the increase in the number of naive users will result in many more ad-hoc queries. A final trend that we expect to see in the coming decades is the prevalence of the Object Oriented (OO) model for DBMSs <ref> [ABD+ 89] </ref>. The technology still suffers from the lack of a single formal model unlike its predecessor, the relational model.
Reference: [Bate 1979] <author> M. Bates, </author> <title> Information Search Tactics, </title> <journal> J. of the American Society for Information Science, </journal> <pages> pp 205-213, </pages> <month> July </month> <year> 1979. </year>
Reference: [BoCo 75] <editor> D. Bobrow, and A. Collins (eds), </editor> <booktitle> Representation and Understanding, </booktitle> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <year> 1975. </year>
Reference-contexts: Some of the work has also been concerned with approximate reasoning <ref> [ToCo 89, Tabo 88, BoCo 75] </ref>. None of the work above is directly related to our task at hand, as our model precludes the existence of defeasible links in a database schema.
Reference: [Brac 83] <author> R. Brachman, </author> <title> What IS-A is and isnt: An analysis of taxonomic links in semantic networks, </title> <journal> IEEE Computer Magazine, </journal> <volume> Vol 6 (10), </volume> <pages> pp 30-36, </pages> <year> 1983. </year>
Reference-contexts: Various attempts have been published to formalize the mathematics of object hierarchies, especially those that contain defeasible links, and hence non-monotonic inferences <ref> [Tour 84, Brac 83, Tour 90] </ref>. 63 Most of the work in this area has concentrated on non-monotonic inferences from object hierar-chies. Some of the work has also been concerned with approximate reasoning [ToCo 89, Tabo 88, BoCo 75].
Reference: [Carr 79] <author> B. Carre, </author> <title> Graphs and Networks, </title> <publisher> Clarendon Press, Oxford, </publisher> <address> England, </address> <year> 1979. </year>
Reference-contexts: optimal path computation problem, model our problem as an optimal path computation, and then introduce the path collapse function CON. 3.1 Optimal Path Computation There has been much work done on the problem of computing several properties that are specified over the set of paths in a labeled directed graph <ref> [Carr 79, Ros+ 86, ADJ 90, IRW 93] </ref>. Such properties are called aggregate properties and the computation of such a property is termed a path computation. Most path computation algorithms use some variant of the path algebra formalism below, which is taken from [Carr 79, IRW 93]. <p> Such properties are called aggregate properties and the computation of such a property is termed a path computation. Most path computation algorithms use some variant of the path algebra formalism below, which is taken from <ref> [Carr 79, IRW 93] </ref>. There is a label L ij associated with each arc (i, j) in the graph.
Reference: [CHW 88] <author> R. Chaffin, D. Herrmann, and M. Winston, </author> <title> An Empirical Taxonomy of Part-Whole Relations : Effects of Part-Whole Relation Type on Relation Identification, </title> <booktitle> Language and Cognitive Processes, </booktitle> <volume> Vol 3 (10), </volume> <pages> pp 17-48, </pages> <month> July </month> <year> 1988. </year>
Reference: [ChAr 90] <author> R. Chaffin, and A. Glass, </author> <title> A Comparison of Hyponym and Synonym Decisions, </title> <journal> J. of Psycholinguistic Research, </journal> <volume> Vol 19 (4), </volume> <pages> pp 265-280, </pages> <year> 1990. </year>
Reference: [ChHe 89] <author> R. Chaffin, and D. Herrmann, </author> <title> Retrieval and Comparison Processes in Part-Whole Decisions, </title> <journal> J. of General Psychology, </journal> <volume> Vol 116 (4), </volume> <pages> pp 393-406, </pages> <month> October </month> <year> 1989. </year>
Reference: [ChHe 88] <author> R. Chaffin, and D. Herrmann, </author> <title> Effects of Relation Similarity on Part-Whole Decisions, </title> <journal> J. of General Psychology, </journal> <volume> Vol 115 (2), </volume> <pages> pp 131-139, </pages> <month> April </month> <year> 1988. </year>
Reference: [ChHe 84] <author> R. Chaffin, and D. Herrmann, </author> <title> The Similarity and Diversity of Semantic Relations, </title> <journal> Memory and Cognition, </journal> <volume> Vol 12, </volume> <pages> pp 134-141, </pages> <year> 1984. </year>
Reference: [Char 83] <author> E. Charniak, </author> <title> Passing Markers : A Theory of Contextual Influence in Language Comprehension, </title> <journal> Cognitive Science, </journal> <volume> Vol 7, </volume> <pages> pp 173-190, </pages> <year> 1983. </year>
Reference-contexts: There have been various algorithms published in the literature to make this search as efficient as possible. Most of the efficient algorithms for semantic networks use a technique termed marker passing to spread activation out from the original concept nodes <ref> [CoLo 75, Hend 87, Char 83, Char 86, Hirs 92] </ref>. Perhaps the most famous is the NETL [Fahl 79] algorithm that performs parallel local processing at each node (or set of nodes) to speed the search. <p> However, we have only the start concept to begin with and various concepts (intermediate points) to string along the way. Performing a search on the schema using a marker passing algorithm similar to <ref> [Fahl 79, Char 83, CoLo 75, Hend 87, Char 86] </ref>, is not very straightforward for intermediate point specifications especially for the restricted regular expression approach. Even for an end point specification there may be multiple classes in a schema pointed to by the last relationship in the vague path expression.
Reference: [Char 86] <author> E. Charniak, </author> <title> A Neat Theory of Marker Passing, </title> <booktitle> in Proc 5th National Conference on Artificial Intelligence, </booktitle> <pages> pp 584-588, </pages> <year> 1986. </year>
Reference-contexts: There have been various algorithms published in the literature to make this search as efficient as possible. Most of the efficient algorithms for semantic networks use a technique termed marker passing to spread activation out from the original concept nodes <ref> [CoLo 75, Hend 87, Char 83, Char 86, Hirs 92] </ref>. Perhaps the most famous is the NETL [Fahl 79] algorithm that performs parallel local processing at each node (or set of nodes) to speed the search. <p> However, we have only the start concept to begin with and various concepts (intermediate points) to string along the way. Performing a search on the schema using a marker passing algorithm similar to <ref> [Fahl 79, Char 83, CoLo 75, Hend 87, Char 86] </ref>, is not very straightforward for intermediate point specifications especially for the restricted regular expression approach. Even for an end point specification there may be multiple classes in a schema pointed to by the last relationship in the vague path expression.
Reference: [CoLo 88] <author> P. Cohen, and C. Loiselle, </author> <title> Beyond ISA : Structures for Plausible Inference in Semantic Networks, </title> <booktitle> in Proc 7th National Conference on Artificial Intelligence, </booktitle> <address> St. Paul, </address> <publisher> Minnesota, </publisher> <pages> pp 415-420, </pages> <month> August </month> <year> 1988. </year> <month> 68 </month>
Reference-contexts: The single relationship kind obtained by applying CON repeatedly to the path expression is called the collapsed relationship kind or collapsed kind of that path expression. The notion of a path collapse function is similar to the work in <ref> [CoLo 88] </ref> to generate plausible inference rules by the combination of pairs of relationships. <p> None of the work above is directly related to our task at hand, as our model precludes the existence of defeasible links in a database schema. A final piece of research that bears some similarity to our notion of a path collapse function is the work in <ref> [CoLo 88] </ref> on constructing plausible inferences from pairs of adjacent relationships. However the research in [CoLo 88] uses a larger set of relationships and is more oriented to various actions in English than the relationships in our data model. 64 Chapter 9 CONCLUSIONS With the increasing proliferation of DBMSs amongst non-computer <p> A final piece of research that bears some similarity to our notion of a path collapse function is the work in <ref> [CoLo 88] </ref> on constructing plausible inferences from pairs of adjacent relationships. However the research in [CoLo 88] uses a larger set of relationships and is more oriented to various actions in English than the relationships in our data model. 64 Chapter 9 CONCLUSIONS With the increasing proliferation of DBMSs amongst non-computer experts there is a growing need for user friendly interfaces. <p> The postulating of an associated deep structure for every relationship kind and the usage of this deep structure to generate plausible inferences from adjacent relationship pairs, is akin to the research reported in <ref> [CoLo 88] </ref>. The interface for such a system can also be made more user friendly with a few easily implementable modules. Addition of a synonym lexicon for class and relationship names does not constrain the user to know the particular class names/relationship names in the schema.
Reference: [CoQu 69] <author> A. Collins, and M. Quillian, </author> <title> Retrieval Time From Semantic Memory, </title> <journal> J. of Verbal Learning and Verbal Behaviour, </journal> <volume> Vol 8, </volume> <pages> pp 240-247, </pages> <year> 1969. </year>
Reference-contexts: Cognitive Science studies support the assertion that concepts with greater semantic distance between them are considered less plausible by humans than corresponding concepts with a lesser semantic distance <ref> [CoQu 69] </ref>. We attempt to capture the notion of semantic distance by the heuristic of effective length of a particular path expression.
Reference: [CoLo 75] <author> A. Collins, and E. Loftus, </author> <title> A Spreading Activation Theory of Semantic Processing, </title> <journal> Psychological Review, </journal> <volume> Vol 82, </volume> <pages> pp 407-428, </pages> <year> 1975. </year>
Reference-contexts: There have been various algorithms published in the literature to make this search as efficient as possible. Most of the efficient algorithms for semantic networks use a technique termed marker passing to spread activation out from the original concept nodes <ref> [CoLo 75, Hend 87, Char 83, Char 86, Hirs 92] </ref>. Perhaps the most famous is the NETL [Fahl 79] algorithm that performs parallel local processing at each node (or set of nodes) to speed the search. <p> However, we have only the start concept to begin with and various concepts (intermediate points) to string along the way. Performing a search on the schema using a marker passing algorithm similar to <ref> [Fahl 79, Char 83, CoLo 75, Hend 87, Char 86] </ref>, is not very straightforward for intermediate point specifications especially for the restricted regular expression approach. Even for an end point specification there may be multiple classes in a schema pointed to by the last relationship in the vague path expression.
Reference: [Fahl 79] <author> S. Fahlman, </author> <title> NETL: A System for Representing and Using Real World Knowledge, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1979. </year>
Reference-contexts: Most of the efficient algorithms for semantic networks use a technique termed marker passing to spread activation out from the original concept nodes [CoLo 75, Hend 87, Char 83, Char 86, Hirs 92]. Perhaps the most famous is the NETL <ref> [Fahl 79] </ref> algorithm that performs parallel local processing at each node (or set of nodes) to speed the search. The work in semantic networks is similar to ours inasmuch as we too perform a search over a network of relationships and concepts (classes). <p> However, we have only the start concept to begin with and various concepts (intermediate points) to string along the way. Performing a search on the schema using a marker passing algorithm similar to <ref> [Fahl 79, Char 83, CoLo 75, Hend 87, Char 86] </ref>, is not very straightforward for intermediate point specifications especially for the restricted regular expression approach. Even for an end point specification there may be multiple classes in a schema pointed to by the last relationship in the vague path expression.
Reference: [GlCo 85] <author> M. Gluck, and J. Corter, </author> <title> Information, uncertainty, and the utility of categories, </title> <booktitle> in Proc of the 7th Annual Conference of the Cognitive Science Society, </booktitle> <publisher> Lawrence Erl-baum Assoc, </publisher> <address> Irvine, CA, </address> <pages> pp 283-287, </pages> <year> 1985. </year>
Reference: [Hend 87] <author> J. Hendler, </author> <title> Integrating Marker-Passing and Problem Solving : A Spreading Activation Approach to Improved Choice in Planning, Norwood, </title> <editor> N. J., </editor> <year> 1987. </year>
Reference-contexts: There have been various algorithms published in the literature to make this search as efficient as possible. Most of the efficient algorithms for semantic networks use a technique termed marker passing to spread activation out from the original concept nodes <ref> [CoLo 75, Hend 87, Char 83, Char 86, Hirs 92] </ref>. Perhaps the most famous is the NETL [Fahl 79] algorithm that performs parallel local processing at each node (or set of nodes) to speed the search. <p> However, we have only the start concept to begin with and various concepts (intermediate points) to string along the way. Performing a search on the schema using a marker passing algorithm similar to <ref> [Fahl 79, Char 83, CoLo 75, Hend 87, Char 86] </ref>, is not very straightforward for intermediate point specifications especially for the restricted regular expression approach. Even for an end point specification there may be multiple classes in a schema pointed to by the last relationship in the vague path expression.
Reference: [Herr 87] <author> D. Herrmann, </author> <title> Representational Forms of Semantic Relations and the modeling of Relation Comprehension, in "Knowledge Aided Information Processing", </title> <editor> E. van der Meer, and J. Hoffmann, (eds), </editor> <year> 1987. </year>
Reference: [Hirs 92] <author> G. Hirst, </author> <title> Semantic Interpretation and the Resolution of Ambiguity, </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, England, </address> <year> 1992. </year>
Reference-contexts: There have been various algorithms published in the literature to make this search as efficient as possible. Most of the efficient algorithms for semantic networks use a technique termed marker passing to spread activation out from the original concept nodes <ref> [CoLo 75, Hend 87, Char 83, Char 86, Hirs 92] </ref>. Perhaps the most famous is the NETL [Fahl 79] algorithm that performs parallel local processing at each node (or set of nodes) to speed the search.
Reference: [Holl 92] <author> J. Holland, </author> <title> Adaptation in Natural and Artificial Systems, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: The idea behind the reproduction phase is to mix the genetic material of successful agents and hopefully produce even more successful agents. The genetic algorithm <ref> [Holl 92] </ref> which is the basis of the entire technique is a proven optimal parallel search technique that adapts quickly to a changing environment. In our case, the space to be searched is the space of possible collapsed relationship kind orderings, given a particular collapse function.
Reference: [IRW 93] <author> Y. Ioannidis, R. Ramakrishnan, and L. Winger, </author> <title> Transitive Closure Algorithms Based on Graph Traversal, </title> <journal> ACM TODS, </journal> <note> Vol 18 (3), September 1993 (to appear). </note>
Reference-contexts: optimal path computation problem, model our problem as an optimal path computation, and then introduce the path collapse function CON. 3.1 Optimal Path Computation There has been much work done on the problem of computing several properties that are specified over the set of paths in a labeled directed graph <ref> [Carr 79, Ros+ 86, ADJ 90, IRW 93] </ref>. Such properties are called aggregate properties and the computation of such a property is termed a path computation. Most path computation algorithms use some variant of the path algebra formalism below, which is taken from [Carr 79, IRW 93]. <p> Such properties are called aggregate properties and the computation of such a property is termed a path computation. Most path computation algorithms use some variant of the path algebra formalism below, which is taken from <ref> [Carr 79, IRW 93] </ref>. There is a label L ij associated with each arc (i, j) in the graph. <p> AGG ( CON (L 1 ; L 2 ), CON (L 1 ; L 3 )) = CON (L 1 , AGG (L 2 ; L 3 )) If a graph satisfies the properties above, then efficient optimal path computation algorithms exist <ref> [IRW 93] </ref>. 3.2 The Problem as Optimal Path Computation Clearly we can cast the problem of generating plausible completions of vague path expressions as an optimal path computation over a labeled directed graph as follows. * The graph in question is the schema graph with each relationship between two classes replaced <p> In the general case, AGG is a partial order. This implies that, in general, AGG may not even have a distinct identity , as required by condition (4) in Section 3.1. In addition, all the algorithms <ref> [IRW 93] </ref> assume that AGG deals with a pair of single path expressions at a time. Due to the fact that AGG is a partial order, our AGG function needs to deal with a set of path expressions.
Reference: [ILH 92] <author> Y. Ioannidis, M. Livny, and E. Haber, </author> <title> Graphical User Interfaces for the Management of Scientific Experiments and Data, </title> <booktitle> ACM SIGMOD Record, </booktitle> <month> March </month> <year> 1992. </year>
Reference-contexts: This is no trivial task for most real world databases even if a natural language or menu driven interface could be provided to formulate the exact query. Work on Graphical User Interfaces (GUIs) <ref> [ILH 92] </ref> is a step in this direction. A GUI provides a pictorial representation of the organization of the data in the DBMS to the user. However, there are drawbacks to this solution too. Most current DBMS schemas are too large to fit into one screen of most workstations. <p> Browsers are also used when the user has only a vague idea of what he/she wants to retrieve from the database. Browsers suffer from the same disadvantages as GUIs <ref> [ILH 92] </ref> mentioned in Chapter 1. It often happens that the user may be familiar with a schema but may not know the exact values stored in the database itself.
Reference: [Koza 92] <author> J. Koza, </author> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1992. </year>
Reference-contexts: Some sort of genetic representation has to be devised for the ordering of relationships. One possible solution could be to code the partial order as a C macro, (or a LISP function), and use the associated technique of genetic programming <ref> [Koza 92] </ref>. The genetic search technique however, often takes a long time to converge to a solution. We need our system to start operating at near optimal efficiency from startup. This implies that the initial orderings of the agents have to be handcrafted, instead of randomized, which is not unreasonable.
Reference: [MeWo 89] <author> A. Mendelzon, and P. Wood, </author> <title> Finding Regular Simple Paths in Graph Databases, </title> <booktitle> in Proc 15th International Conference on Very Large Data Bases, </booktitle> <address> Amsterdam, the Netherlands, </address> <pages> pp 185-194, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: There are two ways one can deal with intermediate point specifications. 31 5.3.1 Restricted Regular Expressions An intermediate point specification could be treated as a restricted version of a regular expression matching a path in a graph, similar to the work of <ref> [MeWo 89] </ref>. The ~ connector symbol in the specification acts as a wildcard specifier for that part of the expression. The path expression so generated is restricted in the sense that it is not allowed to have any cycles (except cycles through invisible collection classes).
Reference: [MiFe 91] <author> G. Miller, and C. Fellbaum, </author> <title> Semantic Networks of English, </title> <journal> Cognition, </journal> <volume> Vol 41 (1-3), </volume> <pages> pp 197-229, </pages> <month> December </month> <year> 1991. </year>
Reference: [MIR 93a] <author> R. Miller, Y. Ioannidis, and R. Ramakrishnan, </author> <title> Understanding Schemas, </title> <booktitle> in Proc International Workshop on Research Issues on Data Engineering: Interoperability in Multidatabase Systems, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> Vienna, Austria, </address> <pages> pp 170-173, </pages> <month> April </month> <year> 1993. </year>
Reference: [MIR 93b] <author> R. Miller, Y. Ioannidis, and R. Ramakrishnan, </author> <title> The Use of Information Capacity in Schema Integration and Translation, </title> <booktitle> in Proc of the International Conference on Very Large Data Bases, </booktitle> <address> Dublin, Ireland, </address> <month> August </month> <year> 1993. </year>
Reference: [MIR 93c] <author> R. Miller, Y. Ioannidis, and R. Ramakrishnan, </author> <title> Schema Equivalence in Heterogeneous Systems: Bridging Theory and Practice, </title> <note> (Submitted for Publication), 1993. 69 </note>
Reference: [MDT 92] <author> A. Motro, A. D'Atri, and L. Tarantino, ViewFinder: </author> <title> An Object Oriented Browser, </title> <type> draft, </type> <year> 1992. </year>
Reference-contexts: There are numerous database browsers <ref> [MDT 92] </ref>, [Motr 86a] present for DBMSs. Most such browsers allow a user to browse through the schema and the data in the database, and are used when the user does not know the database schema, or the data model or query language.
Reference: [Motr 86a] <author> A. Motro, BAROQUE: </author> <title> A Browser for Relational Databases, </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> Vol 4 (2), </volume> <pages> pp 164-181, </pages> <year> 1986. </year>
Reference-contexts: There are numerous database browsers [MDT 92], <ref> [Motr 86a] </ref> present for DBMSs. Most such browsers allow a user to browse through the schema and the data in the database, and are used when the user does not know the database schema, or the data model or query language.
Reference: [Motr 86b] <author> A. Motro, SEAVE: </author> <title> A Mechanism for Verifying User Presuppositions in Query Systems, </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> Vol 4 (4), </volume> <pages> pp 312-330, </pages> <year> 1986. </year>
Reference-contexts: Such interfaces are powerful, but are also dependent to a large extent on the database domain. Certain other interfaces such as SEAVE <ref> [Motr 86b] </ref> take the approach that every user query is based on certain presuppositions about the data values in the database.
Reference: [Motr 88] <author> A. Motro, </author> <title> VAGUE: A User Interface to Relational Databases, </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> Vol 6 (3), </volume> <pages> pp 187-214, </pages> <year> 1988. </year>
Reference-contexts: Browsers suffer from the same disadvantages as GUIs [ILH 92] mentioned in Chapter 1. It often happens that the user may be familiar with a schema but may not know the exact values stored in the database itself. Interfaces such as VAGUE <ref> [Motr 88] </ref> allow a user to specify queries based on some predefined notions of similarity or closeness to other data values.
Reference: [Motr 90] <author> A. Motro, </author> <title> FLEX: A Tolerant and Cooperative User Interface to Databases, </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol 2 (3), </volume> <pages> pp 231-246, </pages> <year> 1990. </year>
Reference-contexts: Interfaces such as FLEX <ref> [Motr 90] </ref> attempt to combine the approaches above, so that experienced users can directly formulate queries, while naive users may use one or more of the mechanisms above to get at the data they are seeking. 8.2 Semantic Networks and Spreading Activation Semantic Networks are general cases of Object Oriented Systems.
Reference: [NoCa 83] <author> J. Norman, and G. Campbell, </author> <title> Application of a Plant-Environment Model to Problems in Irrigation, </title> <booktitle> in "Advances in Irrigation II", </booktitle> <editor> D. Hillel (ed), </editor> <publisher> Academic Press, </publisher> <address> New York, NY, </address> <pages> pp 155-188, </pages> <year> 1983. </year>
Reference-contexts: The schema we used for this experiment was the input part of the CUPID <ref> [NoCa 83] </ref> schema, which represents the structure of the various entities used in soil science experiments. The CUPID schema was designed by Larry Murdock of the Soil Sciences department using the MOOSE OODB data model. The schema has 219 classes and 364 relationships.
Reference: [Ros+ 86] <author> A. Rosenthal, et al, </author> <title> Traversal Recursion: A Practical Approach to Supporting Recursive Applications, </title> <booktitle> in Proc ACM-SIGMOD Conference, </booktitle> <address> Washington DC, </address> <pages> pp 166-176, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: optimal path computation problem, model our problem as an optimal path computation, and then introduce the path collapse function CON. 3.1 Optimal Path Computation There has been much work done on the problem of computing several properties that are specified over the set of paths in a labeled directed graph <ref> [Carr 79, Ros+ 86, ADJ 90, IRW 93] </ref>. Such properties are called aggregate properties and the computation of such a property is termed a path computation. Most path computation algorithms use some variant of the path algebra formalism below, which is taken from [Carr 79, IRW 93].
Reference: [Salt 89] <author> G. Salton, </author> <title> Automatic Text Processing: The Transformation, Analysis, and Retrieval of Information by Computer, </title> <publisher> Addison Wesley Publishing, </publisher> <year> 1989. </year>
Reference-contexts: We begin by presenting the parameters used to measure the effectiveness of the system, the motivation behind each set of experiments, the experimental set-up and methodology, and the results obtained. 6.1 Measures of Effectiveness . Two important parameters of information retrieval effectiveness are recall and precision <ref> [Salt 89] </ref>. Recall is defined as the proportion of relevant answers retrieved. In our case an answer corresponds to a path expression consistent with a given vague path expression.
Reference: [ShMa 93] <author> B. Sheth, and P. Maes, </author> <title> Evolving Agents For Personalized Information Retrieval, </title> <booktitle> in Proc of the 9th IEEE Conference on Artificial Intelligence for Applications, </booktitle> <address> Orlando Florida, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: In general, the system performed well in terms of providing intuitive path completions to vague path expressions provided by users. As has been indicated by work in adaptive interfaces <ref> [ShMa 93] </ref>, users are not alike. A system that is to work optimally must adapt to a user using some form of learning and feedback. Our current implementation and theory does not provide for this. <p> Work with learning interface agents <ref> [ShMa 93] </ref> has shown that it is possible to have a population of interface agents, all working on the same task a bit differently, to increase accuracy of a system like ours. These interface agents typically have some sort of genetic representation of their task encoded in them.
Reference: [Tabo 88] <author> P. Tabossi, </author> <title> Accessing Lexical Ambiguity in Different Types of Sentential Contexts, </title> <editor> J. </editor> <booktitle> of Memory and Language, </booktitle> <volume> Vol 27 (3), </volume> <pages> pp 324-240, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Some of the work has also been concerned with approximate reasoning <ref> [ToCo 89, Tabo 88, BoCo 75] </ref>. None of the work above is directly related to our task at hand, as our model precludes the existence of defeasible links in a database schema.
Reference: [ToCo 89] <author> P. Torasso, and L. Console, </author> <title> Approximate Reasoning and Prototypical Knowledge, </title> <journal> International Journal of Approximate Reasoning, </journal> <volume> Vol 3 (2), </volume> <pages> pp 157-177, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: Some of the work has also been concerned with approximate reasoning <ref> [ToCo 89, Tabo 88, BoCo 75] </ref>. None of the work above is directly related to our task at hand, as our model precludes the existence of defeasible links in a database schema.
Reference: [Tour 90] <author> D. Touretzky, </author> <title> Implicit Ordering of Defaults in Inheritance Systems, </title> <note> in "Readings in Uncertain Reasoning", </note> <author> G. Shafer, and J. Pearl (eds), </author> <year> 1990. </year>
Reference-contexts: Various attempts have been published to formalize the mathematics of object hierarchies, especially those that contain defeasible links, and hence non-monotonic inferences <ref> [Tour 84, Brac 83, Tour 90] </ref>. 63 Most of the work in this area has concentrated on non-monotonic inferences from object hierar-chies. Some of the work has also been concerned with approximate reasoning [ToCo 89, Tabo 88, BoCo 75].
Reference: [Tour 84] <author> D. Touretzky, </author> , <title> The Mathematics of Inheritance Systems, </title> <type> Ph. D. Thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1984. </year>
Reference-contexts: Various attempts have been published to formalize the mathematics of object hierarchies, especially those that contain defeasible links, and hence non-monotonic inferences <ref> [Tour 84, Brac 83, Tour 90] </ref>. 63 Most of the work in this area has concentrated on non-monotonic inferences from object hierar-chies. Some of the work has also been concerned with approximate reasoning [ToCo 89, Tabo 88, BoCo 75].
Reference: [WiIo 93] <author> J. Wiener, and Y. Ioannidis, </author> <title> A Moose and a Fox Can Aid Scientists with Data Management Problems, </title> <booktitle> in Proc 4th DBPL Workshop, </booktitle> <address> Manhattan, NY, </address> <note> August 1993 (to appear). </note>
Reference-contexts: We also present the overall picture of where exactly we expect such a system to fit in the context of a full-fledged DBMS. 2.1 The Data Model Our OODB model is based loosely on the MOOSE OO data model <ref> [WiIo 93] </ref>. However, it is general enough to easily map onto most existing OODB models. In the DBMS, real world entities are modeled by objects. Objects are grouped together by uniquely named classes, which capture the objects' common properties. Binary relationships describe the connections between objects in the schema classes. <p> Since the DBMS requires the user to explicitly conform to the structure of the schema while querying, specifying queries on such schemas is laborious, even for database experts. Our second experiment was conducted on a real life schema in the MOOSE OODBMS <ref> [WiIo 93] </ref>, to determine to what degree a system like ours can aid schema designers and database administrators in querying the database.
Reference: [WCH 87] <author> M. Winston, R. Chaffin, and D. Herrmann, </author> <title> A Taxonomy of Part-Whole Relations, </title> <journal> Cognitive Science, </journal> <volume> Vol 11, </volume> <pages> pp 417-444, </pages> <year> 1987. </year> <month> 70 </month>
References-found: 45

