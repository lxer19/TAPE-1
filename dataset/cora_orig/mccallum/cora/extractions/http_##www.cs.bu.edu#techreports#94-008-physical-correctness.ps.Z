URL: http://www.cs.bu.edu/techreports/94-008-physical-correctness.ps.Z
Refering-URL: http://cs-www.bu.edu/techreports/Home.html
Root-URL: 
Title: An Ounce of Prevention is Worth a Pound of Cure Towards Physically-Correct Specifications of Embedded
Author: Azer Bestavros 
Address: Boston, MA 02215  
Affiliation: Department of Computer Science Boston University  
Abstract: Predictability the ability to foretell that an implementation will not violate a set of specified reliability and timeliness requirements is a crucial, highly desirable property of responsive embedded systems. This paper overviews a development methodology for responsive systems, which enhances predictability by eliminating potential hazards resulting from physically-unsound specifications. The backbone of our methodology is a formalism that restricts expressiveness in a way that allows the specification of only reactive, spontaneous, and causal computation. Unrealistic systems - possessing properties such as clairvoyance, caprice, infinite capacity, or perfect timing cannot even be specified. We argue that this "ounce of prevention" at the specification level is likely to spare a lot of time and energy in the development cycle of responsive systems not to mention the elimination of potential hazards that would have gone, otherwise, unnoticed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Rajeev Alur, Costas Courcoubetis, and David Dill. </author> <title> Model-checking for real-time systems. </title> <booktitle> In Proceedings of the 5th annual IEEE Symposium on Logic in Computer Science, </booktitle> <address> Philadelphia, Pensylvania, June 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: This distinction between real time and perceived time is important when dealing with embedded applications where time properties are stated with respect to real time, but have to be preserved relying on perceived time. 2.2 Basic definitions We adopt a continuous model of time similar to that used in <ref> [1, 15] </ref>. We represent any point in time by a nonnegative real t 2 &lt;. Time intervals are defined by specifying their end-points which are drawn from the set of nonnegative rationals Q &lt;. A time interval is viewed as a traditional set over nonnegative real numbers.
Reference: [2] <author> Rajeev Alur and David Dill. </author> <title> Automata for modeling real-time systems. </title> <booktitle> In Proceedings of TAU'90: The 1990 ACM International Workshop on Timing issues in the Specification and Synthesis of Digital Systems, </booktitle> <address> Vancouver, Canada, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: The TRA model enforces spontaneity by requiring that simultaneously occuring events be independent; time has to necessarily advance to observe dependencies. A computing system that maintains perfect timing information cannot be implemented. Nevertheless, formal models (such as the Timed Finite Automata <ref> [2] </ref> or the Timed Input-Output Automata [16]) allow the specification of perfect clocks. The TRA model does not provide for (or allow the specification of) perfect clocks. As a consequence, the only measure of time available for system processes has to be relative to imperfect, locally-maintained clocks.
Reference: [3] <author> Azer Bestavros. </author> <title> The IOTA: A model for real-time parallel computation. </title> <booktitle> In Proceedings of TAU'90: The 1990 ACM International Workshop on Timing issues in the Specification and Synthesis of Digital Systems, </booktitle> <address> Vancouver, Canada, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: In Section 4, we present a compiler that allows the execution of CLEOPATRA specifications. In Section 5, we conclude with current and future research directions. 2 The TRA Model The TRA model has evolved from our earlier work in <ref> [3] </ref> extending Lynch's IOA model [18, 17] to suit embedded and time-constrained computation. 2.1 Novelties Previous studies in modeling real-time computing have focussed on adding the notion of time without regard to physical properties of the modeled systems. <p> This led to the abandoning of the idea of partitioning a system into components in our earlier model proposed in <ref> [3] </ref>. Lynch and Vaan-drager [19] followed suit in their recent modification of the model proposed in [25]. In the TRA model we use system components to represent what can be termed as spatial locality. <p> Also, the relationships between the behaviors and spatial properties of the composed TRA and those of its constituent TRAs are established. In particular, we prove that the sets of proper, spontaneous, and causal TRAs are closed under composition. The TRA composition operation is more general than those reported in <ref> [18, 25, 3] </ref> in that it allows the specification of both parallel and sequential composition.
Reference: [4] <author> Azer Bestavros. </author> <title> TRA-based real-time executable specification using CLEOPATRA. </title> <booktitle> In Proceedings of the 10th Annual Rochester Forth Conference on Embedded Systems, </booktitle> <address> Rochester, NY, </address> <month> June </month> <year> 1990. </year> <month> (revised May </month> <year> 1991). </year>
Reference-contexts: Our experience confirms CLEOPATRA's suitability as a vehicle for the specification and validation of many embedded and time-critical applications. In particular, we used it to simulate and analyze asynchronous digital circuits, sensori-motor behavior of autonomous creatures, and intelligent controllers <ref> [5, 8, 4] </ref>. A compiler that allows the execution of CLEOPATRA specifications has been developed [9], and is available via FTP from cs.bu.edu:/bestavros/cleopatra/. CLEOPATRA is based on the Time-constrained Reactive Automata (TRA) formalism [6, 7].
Reference: [5] <author> Azer Bestavros. </author> <title> Planning for embedded systems: A real-time prospective. </title> <booktitle> In Proceedings of AIRTC-91: The 3rd IFAC Workshop on Artificial Intelligence in Real Time Control, Napa/Sonoma Region, </booktitle> <address> CA, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Our experience confirms CLEOPATRA's suitability as a vehicle for the specification and validation of many embedded and time-critical applications. In particular, we used it to simulate and analyze asynchronous digital circuits, sensori-motor behavior of autonomous creatures, and intelligent controllers <ref> [5, 8, 4] </ref>. A compiler that allows the execution of CLEOPATRA specifications has been developed [9], and is available via FTP from cs.bu.edu:/bestavros/cleopatra/. CLEOPATRA is based on the Time-constrained Reactive Automata (TRA) formalism [6, 7]. <p> We have used the CLEOPATRA compiler to simulate a variety of systems. In particular, we used it extensively to specify and analyze sensori-motor robotics applications [8] and to simulate complex behaviors of autonomous creatures <ref> [5] </ref>. Figure 7 shows the different stages involved in the compilation and execution of specifications written in CLEOPATRA. At the heart of this process is a one-pass preprocessor, written in C, which parses user-defined CLEOPATRA specifications, augmented with system-defined TRA classes, 11 and generates an equivalent C simulator.
Reference: [6] <author> Azer Bestavros. </author> <title> Specification and verification or real-time embedded systems using the Time-constrained Reactive Automata. </title> <booktitle> In Proceedings of the 12th IEEE Real-time Systems Symposium, </booktitle> <pages> pages 244-253, </pages> <address> San Antonio, Texas, </address> <month> December </month> <year> 1991. </year>
Reference-contexts: A compiler that allows the execution of CLEOPATRA specifications has been developed [9], and is available via FTP from cs.bu.edu:/bestavros/cleopatra/. CLEOPATRA is based on the Time-constrained Reactive Automata (TRA) formalism <ref> [6, 7] </ref>. Using the TRA model, an embedded system is viewed as a set of automata (TRAs), each representing an autonomous system entity.
Reference: [7] <author> Azer Bestavros. </author> <title> Time-constrained Reactive Automata: A novel development methodology for embedded real-time systems. </title> <type> PhD thesis, </type> <institution> Harvard University, Division of Applied Sciences (Department of Computer Science), Cambridge, Massachusetts, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: A compiler that allows the execution of CLEOPATRA specifications has been developed [9], and is available via FTP from cs.bu.edu:/bestavros/cleopatra/. CLEOPATRA is based on the Time-constrained Reactive Automata (TRA) formalism <ref> [6, 7] </ref>. Using the TRA model, an embedded system is viewed as a set of automata (TRAs), each representing an autonomous system entity. <p> In this section we examine such an operation, namely composition. Other operations (for example hiding and renaming) were presented in <ref> [7] </ref>. The composition of a countable collection of compatible TRAs, fA i : i 2 Ig, is a new TRA A = A 0 fi A 1 fi : : : fi A i fi : : : = i2I A i . <p> A computational step of the composed TRA is necessarily a step of one of its components. Similarily the time-constrained causal relationships of the composed TRA are exactly those of the component TRAs. In <ref> [7] </ref>, the formal construction of the sextuple representation of a composition is given. Also, the relationships between the behaviors and spatial properties of the composed TRA and those of its constituent TRAs are established. <p> The behavior of a TRA object is described using TETs. TRA objects can be composed to specify more complex TRAs. The correspondence between CLEOPATRA and the TRA formalism is straightforward. Every object in CLEOPATRA corresponds to a TRA sextuple. In <ref> [7] </ref>, the construction of a TRA sextuple, given a CLEOPATRA object, is detailed. 3.1 Classes and Objects A TRA object specification in CLEOPATRA consists of two components: a header and a body. An object's header specifies its name, the parameters needed for its instantiation, and its signature. <p> To avoid such malignant behaviors, the environment must wait for an acknowledgment ack () 10 , or else wait for at least DLY MIN before issuing a new input. Such safety conditions can be verified using TRA-based verification techniques <ref> [7] </ref>. We argue that any finite implementation of a discrete-event delay element must have a finite capacity, which must not be exceeded for a correct behavior. Using CLEOPATRA, it is impossible to specify a fifo class that behaves correctly independent of its environment's behavior.
Reference: [8] <author> Azer Bestavros, James Clark, and Nicola Ferrier. </author> <title> Management of sensori-motor activity in mobile robots. </title> <booktitle> In Proceedings of the 1990 IEEE International Conference on Robotics & Automation, </booktitle> <address> Cinci-nati, Ohio, May 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Our experience confirms CLEOPATRA's suitability as a vehicle for the specification and validation of many embedded and time-critical applications. In particular, we used it to simulate and analyze asynchronous digital circuits, sensori-motor behavior of autonomous creatures, and intelligent controllers <ref> [5, 8, 4] </ref>. A compiler that allows the execution of CLEOPATRA specifications has been developed [9], and is available via FTP from cs.bu.edu:/bestavros/cleopatra/. CLEOPATRA is based on the Time-constrained Reactive Automata (TRA) formalism [6, 7]. <p> We have used the CLEOPATRA compiler to simulate a variety of systems. In particular, we used it extensively to specify and analyze sensori-motor robotics applications <ref> [8] </ref> and to simulate complex behaviors of autonomous creatures [5]. Figure 7 shows the different stages involved in the compilation and execution of specifications written in CLEOPATRA.
Reference: [9] <author> Azer Bestavros, Devora Reich, and Robert Popp. </author> <title> Cleopatra compiler design and implementation. </title> <type> Technical Report TR-92-019, </type> <institution> Computer Science Department, Boston University, </institution> <address> Boston, MA, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: In particular, we used it to simulate and analyze asynchronous digital circuits, sensori-motor behavior of autonomous creatures, and intelligent controllers [5, 8, 4]. A compiler that allows the execution of CLEOPATRA specifications has been developed <ref> [9] </ref>, and is available via FTP from cs.bu.edu:/bestavros/cleopatra/. CLEOPATRA is based on the Time-constrained Reactive Automata (TRA) formalism [6, 7]. Using the TRA model, an embedded system is viewed as a set of automata (TRAs), each representing an autonomous system entity.
Reference: [10] <author> Alan Burns and Andy Wellings. </author> <title> Real-time systems and their programming languages. </title> <publisher> Addison Wesley Co. (International Computer Science Series), </publisher> <year> 1990. </year>
Reference-contexts: In particular, rather than describing behaviors using control structures, it describes behaviors using time-constrained causal structures. CLEOPATRA is object-oriented and compositional, thus advocating modularity and reusability. CLEOPATRA is se 1 For comprehensive surveys of recent research in real-time systems, the reader is directed to <ref> [22, 10, 26, 27] </ref>. 2 A C-based Language for the Event-driven Object-oriented Prototyping of Asynchronous T ime-constrained Reactive Automata. mantically sound; its objects can be transformed, me-chanically and unambiguously, into formal automata for verification purposes.
Reference: [11] <author> Jen-Yao Chung, Jane Liu, and Kwei-Jay Lin. </author> <title> Scheduling periodic jobs that allow imprecise results. </title> <journal> IEEE Transaction on Computers, </journal> <volume> 19(9) </volume> <pages> 1156-1173, </pages> <month> Septem-ber </month> <year> 1990. </year>
Reference-contexts: It can be enhanced by restricting expressiveness as was done in Real-Time Euclid [14], by sacrificing accuracy as was done in the Flex system <ref> [11] </ref>, or by abstracting segmented resources as was done in the Spring kernel [23]. The TRA-development methodology we are advocating here introduces one more way of improving predictability, that of allowing only physically-sound specifications.
Reference: [12] <author> James Clark, Nicola Ferrier, and Lei Wang. </author> <title> A robotics system for manipulation using directed vision feedback. </title> <type> Internal report, </type> <institution> Robotics laboratory, Harvard University, </institution> <address> Cambridge, MA, </address> <year> 1991. </year>
Reference-contexts: This situation is further exacerbated considering the range of disciplines employed in developing the various components of an embedded application. For example, in a simple sensori-motor robotic application <ref> [12] </ref>, algorithms from various disciplines like low-level imaging, active vision, tactile sensing, path planning, compliant motion control, and non-linear dynamics may be utilized [13].
Reference: [13] <author> K. S. Fu, R. C. Gonzalez, and C. S. G. Lee. </author> <title> Robotics: Control, </title> <booktitle> sensing, vision, and intelligence. </booktitle> <publisher> McGraw-Hill Book Company, </publisher> <year> 1987. </year>
Reference-contexts: For example, in a simple sensori-motor robotic application [12], algorithms from various disciplines like low-level imaging, active vision, tactile sensing, path planning, compliant motion control, and non-linear dynamics may be utilized <ref> [13] </ref>. Not only are these disciplines different in their abstractions and programming styles, but also they differ in their computational requirements, which range from single-board dedicated processors to massively parallel general-purpose computers.
Reference: [14] <author> Eugene Kligerman and Alexander Stoyenko. </author> <title> Real-time Euclid: A language for reliable real-time systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 12(9) </volume> <pages> 941-949, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: The performance of the simulator degrades considerably when extensive I/O and tracing operations are performed. 15 5 Conclusion Predictability can be enhanced in a variety of ways. It can be enhanced by restricting expressiveness as was done in Real-Time Euclid <ref> [14] </ref>, by sacrificing accuracy as was done in the Flex system [11], or by abstracting segmented resources as was done in the Spring kernel [23]. The TRA-development methodology we are advocating here introduces one more way of improving predictability, that of allowing only physically-sound specifications.
Reference: [15] <author> Harry Lewis. </author> <title> A logic of concrete time intervals. </title> <booktitle> In Proceedings of the 5th annual IEEE Symposium on Logic in Computer Science, </booktitle> <address> Philadelphia, PA, June 1990. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: This distinction between real time and perceived time is important when dealing with embedded applications where time properties are stated with respect to real time, but have to be preserved relying on perceived time. 2.2 Basic definitions We adopt a continuous model of time similar to that used in <ref> [1, 15] </ref>. We represent any point in time by a nonnegative real t 2 &lt;. Time intervals are defined by specifying their end-points which are drawn from the set of nonnegative rationals Q &lt;. A time interval is viewed as a traditional set over nonnegative real numbers.
Reference: [16] <author> Nancy Lynch and Hagit Attiya. </author> <title> Using mappings to prove timing properties. </title> <type> Technical Report MIT/LCS/TM-412.b, </type> <institution> MIT, </institution> <address> Cambridge, Mas-sachusetts, </address> <month> December </month> <year> 1989. </year> <booktitle> Also in Proceedings of the 1990 ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pp. 265-280. </pages>
Reference-contexts: The TRA model enforces spontaneity by requiring that simultaneously occuring events be independent; time has to necessarily advance to observe dependencies. A computing system that maintains perfect timing information cannot be implemented. Nevertheless, formal models (such as the Timed Finite Automata [2] or the Timed Input-Output Automata <ref> [16] </ref>) allow the specification of perfect clocks. The TRA model does not provide for (or allow the specification of) perfect clocks. As a consequence, the only measure of time available for system processes has to be relative to imperfect, locally-maintained clocks.
Reference: [17] <author> Nancy Lynch and Kenneth Goldman. </author> <title> 6.852 distributed algorithms lecture notes: The I/O Automata. </title> <type> Technical report, </type> <institution> Laboratory of Computer Science, MIT, </institution> <address> Cambridge, MA, </address> <month> Fall </month> <year> 1988. </year>
Reference-contexts: In Section 4, we present a compiler that allows the execution of CLEOPATRA specifications. In Section 5, we conclude with current and future research directions. 2 The TRA Model The TRA model has evolved from our earlier work in [3] extending Lynch's IOA model <ref> [18, 17] </ref> to suit embedded and time-constrained computation. 2.1 Novelties Previous studies in modeling real-time computing have focussed on adding the notion of time without regard to physical properties of the modeled systems. This makes it possible to specify systems that do not abide by principles like causality and spontaneity.
Reference: [18] <author> Nancy Lynch and Mark Tuttle. </author> <title> An introduction to Input/Output Automata. </title> <type> Technical Report MIT/LCS/TM-373, </type> <institution> MIT, Cambridge, Massachusetts, </institution> <month> November </month> <year> 1988. </year>
Reference-contexts: CLEOPATRA is based on the Time-constrained Reactive Automata (TRA) formalism [6, 7]. Using the TRA model, an embedded system is viewed as a set of automata (TRAs), each representing an autonomous system entity. TRAs are reactive in that they abide by Lynch's input enabling property <ref> [18] </ref>; they communicate by signaling events on their output channels and by reacting to events signaled on their input channels. The behavior of a TRA is governed by time-constrained causal relationships between computation-triggering events. <p> In Section 4, we present a compiler that allows the execution of CLEOPATRA specifications. In Section 5, we conclude with current and future research directions. 2 The TRA Model The TRA model has evolved from our earlier work in [3] extending Lynch's IOA model <ref> [18, 17] </ref> to suit embedded and time-constrained computation. 2.1 Novelties Previous studies in modeling real-time computing have focussed on adding the notion of time without regard to physical properties of the modeled systems. This makes it possible to specify systems that do not abide by principles like causality and spontaneity. <p> A system is reactive if it cannot block the occurrence of events not under its control. This property is crucial for accurate and realistic modeling of embedded and real-time systems. A sufficient condition for reactivity is the input enabling property proposed in <ref> [18] </ref>. The TRA model is input enabled. It distinguishes clearly between environment-controlled actions, which cannot be restricted or constrained, and locally-controlled actions, which can be scheduled and disabled. <p> For the remainder of this paper, we assume that any TRA is proper. The notion of system components we are presenting here is novel and entirely different from that used in untimed models to express fairness <ref> [18] </ref> by requiring that, in an infinite execution, each of the system's components gets infinitely many chances to perform its locally-controlled actions. In timed systems, the major concern is safe and not necessarily fair executions [20]. <p> We follow an approach similar to that adopted in <ref> [18] </ref> by defining fi to be a behavior of a TRA A, if it consists of all the external events appearing in some execution e of A. We denote the set of all the possible behaviors of a TRA A by behs (A). <p> Also, the relationships between the behaviors and spatial properties of the composed TRA and those of its constituent TRAs are established. In particular, we prove that the sets of proper, spontaneous, and causal TRAs are closed under composition. The TRA composition operation is more general than those reported in <ref> [18, 25, 3] </ref> in that it allows the specification of both parallel and sequential composition.
Reference: [19] <author> Nancy Lynch and Frits Vaandrager. </author> <title> Forward and backward simulations for timing-based systems. Unpublished notes, </title> <institution> Massachusetts Institute of Technology Laboratory for Computer Science, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: This led to the abandoning of the idea of partitioning a system into components in our earlier model proposed in [3]. Lynch and Vaan-drager <ref> [19] </ref> followed suit in their recent modification of the model proposed in [25]. In the TRA model we use system components to represent what can be termed as spatial locality. <p> Local events are under the TRA's control; they are time constrained, and could be disabled. Consider the time constraint i = ( i ; 0 i ; ffi i ; fi i ) 2 , which identifies a time-constrained causal relation 4 Such executions were called admissible in <ref> [19] </ref> ship between the events signaled on i and those sig-naled on 0 i . The occurrence of a trigger on i results in an intention to perform an action on 0 i within the time frame imposed by ffi i .
Reference: [20] <author> Fred Schneider. </author> <title> Critical (of) issues in real-time systems: A position paper. </title> <type> Technical Report 88-914, </type> <institution> Department of Computer Science, Cornell University, </institution> <address> Ithaca, NY, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: In timed systems, the major concern is safe and not necessarily fair executions <ref> [20] </ref>. Even if required, fairness can be enforced by treating it as a safety property; liveness properties can be handled in infinite execution by requiring time to grow unboundedly. 4 .
Reference: [21] <author> Ramavarapu Sreenivas. </author> <title> Towards a system theory for interconnected Condition/Event systems. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> Septem-ber </month> <year> 1990. </year>
Reference-contexts: A system is spontaneous if its output actions at any given point in time t cannot depend on actions occuring at or after time t. In particular, if an output occurs simultaneously with (say) an input transition, the same output could have been produced without the simultaneous input transition <ref> [21] </ref>. Simultaneity is, thus, a mere coincidence; the output event could have occurred spontaneously even if the input transition was delayed. The TRA model enforces spontaneity by requiring that simultaneously occuring events be independent; time has to necessarily advance to observe dependencies.
Reference: [22] <author> John Stankovic and Krithi Ramamritham, </author> <title> editors. Hard Real-Time Systems. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year>
Reference-contexts: In particular, rather than describing behaviors using control structures, it describes behaviors using time-constrained causal structures. CLEOPATRA is object-oriented and compositional, thus advocating modularity and reusability. CLEOPATRA is se 1 For comprehensive surveys of recent research in real-time systems, the reader is directed to <ref> [22, 10, 26, 27] </ref>. 2 A C-based Language for the Event-driven Object-oriented Prototyping of Asynchronous T ime-constrained Reactive Automata. mantically sound; its objects can be transformed, me-chanically and unambiguously, into formal automata for verification purposes.
Reference: [23] <author> John Stankovic and Krithi Ramamritham. </author> <title> The Spring Kernel: A new paradigm for real-time operating systems. </title> <journal> ACM Operating Systems Review, </journal> <volume> 23(3) </volume> <pages> 54-71, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: It can be enhanced by restricting expressiveness as was done in Real-Time Euclid [14], by sacrificing accuracy as was done in the Flex system [11], or by abstracting segmented resources as was done in the Spring kernel <ref> [23] </ref>. The TRA-development methodology we are advocating here introduces one more way of improving predictability, that of allowing only physically-sound specifications. Pursuing the ideas presented in this paper will undoubtedly provide us with one more handle in our persistent quest for predictable systems.
Reference: [24] <author> D.A. Stuart and P.C. Clements. Clairvoyance, </author> <title> capricious timing faults, causality, and real-time specifications. </title> <booktitle> In Proceedings of the 12th IEEE Real-time Systems Symposium, </booktitle> <pages> pages 254-263, </pages> <address> San Antonio, Texas, </address> <month> December </month> <year> 1991. </year>
Reference-contexts: We distinguish clearly between causality and dependency. An event occurs as a result of exactly one earlier event but may depend on many others as reflected in the state of the system. This spares our formalism from dealing with clairvoyant and capricious behaviors <ref> [24] </ref>. Spontaneity is a notion closely related to causality. A system is spontaneous if its output actions at any given point in time t cannot depend on actions occuring at or after time t.
Reference: [25] <author> Mark Tuttle, Michael Meritt, and Francesmary Mod-ugno. </author> <title> Time constrained automata. </title> <address> MIT/LCS, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: This led to the abandoning of the idea of partitioning a system into components in our earlier model proposed in [3]. Lynch and Vaan-drager [19] followed suit in their recent modification of the model proposed in <ref> [25] </ref>. In the TRA model we use system components to represent what can be termed as spatial locality. <p> Also, the relationships between the behaviors and spatial properties of the composed TRA and those of its constituent TRAs are established. In particular, we prove that the sets of proper, spontaneous, and causal TRAs are closed under composition. The TRA composition operation is more general than those reported in <ref> [18, 25, 3] </ref> in that it allows the specification of both parallel and sequential composition.
Reference: [26] <author> Andre M. van Tilborg and Gary M. Koob, </author> <title> editors. Foundations of Real-Time Computing: Formal Specifications and Methods. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: In particular, rather than describing behaviors using control structures, it describes behaviors using time-constrained causal structures. CLEOPATRA is object-oriented and compositional, thus advocating modularity and reusability. CLEOPATRA is se 1 For comprehensive surveys of recent research in real-time systems, the reader is directed to <ref> [22, 10, 26, 27] </ref>. 2 A C-based Language for the Event-driven Object-oriented Prototyping of Asynchronous T ime-constrained Reactive Automata. mantically sound; its objects can be transformed, me-chanically and unambiguously, into formal automata for verification purposes.
Reference: [27] <author> Andre M. van Tilborg and Gary M. Koob, </author> <title> editors. Foundations of Real-Time Computing: Scheduling and resource management. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: In particular, rather than describing behaviors using control structures, it describes behaviors using time-constrained causal structures. CLEOPATRA is object-oriented and compositional, thus advocating modularity and reusability. CLEOPATRA is se 1 For comprehensive surveys of recent research in real-time systems, the reader is directed to <ref> [22, 10, 26, 27] </ref>. 2 A C-based Language for the Event-driven Object-oriented Prototyping of Asynchronous T ime-constrained Reactive Automata. mantically sound; its objects can be transformed, me-chanically and unambiguously, into formal automata for verification purposes.
Reference: [28] <author> Niklaus Wirth. </author> <title> Toward a discipline of real-time programming. </title> <journal> Communications of the ACM, </journal> <volume> 20(8), </volume> <month> August </month> <year> 1977. </year>
Reference-contexts: The sustained demands of the environments in which such systems operate pose relatively fl This research is supported by NSF (grant CCR-9308344). rigid and urgent performance requirements. Often, these requirements are stated as timing constraints on their behaviors. Wirth <ref> [28] </ref> singled out this aspect as the one aspect that differentiates real-time from other sequential and parallel systems.
Reference: [29] <author> Pamela Zave. </author> <title> An operational approach to requirements specification for embedded systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 8(3), </volume> <month> May </month> <year> 1982. </year>
Reference-contexts: In contrast to the black box approach, the operational approach calls for problem specification by formulating a system to solve it. The formulated system is given in terms of implementation-independent structures that, once implemented, would generate the required behavior <ref> [29] </ref>. 10 An ack () event is signaled after the input is processed. 4 CLEOPATRA Simulation We have developed a compiler that transforms CLEOPATRA specifications into an event-driven simulator for validation purposes. We have used the CLEOPATRA compiler to simulate a variety of systems.
References-found: 29

