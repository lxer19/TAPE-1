URL: ftp://ftp.csd.uu.se/pub/papers/theses/0029.ps.gz
Refering-URL: http://www.csd.uu.se/papers/long-theses.html
Root-URL: 
Title: On Simultaneous Rigid E-Unification  
Author: Margus Veanes 
Degree: Thesis for the Degree of Doctor of Philosophy  
Date: UPPSALA 1997  
Address: Uppsala University  
Affiliation: Computing Science Department  
Note: UPPSALA THESES IN COMPUTING SCIENCE 29  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> P.B. Andrews. </author> <title> Theorem proving via general matings. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 28(2) </volume> <pages> 193-214, </pages> <year> 1981. </year>
Reference-contexts: For example, the mating method <ref> [1] </ref> is based on this characterization. Let us consider a proof of Formula (1.1) by using the mating method. <p> Tableau methods are to a large extent based on Gentzen's work [61]. The matrix characterization of provability (where free variables were used for the first time) was introduced by Prawitz [118, 119] for formulas in conjunctive normal form and was later generalized to arbitrary formulas, independently, by Andrews <ref> [1] </ref> and Bibel [10]. Related ideas appear already in Quine [120]. The study of equality reasoning in sequent calculus based methods was already started by Wang [158]. Important pioneering work in this connection was done by Kanger [84]. Both categories are addressed and compared by several authors. <p> Futher comparisons can be found, e.g., in Eder [45, 46], Bibel and Eder [11] and Ophelders and de Swart [108]. 1.2 SIMULTANEOUS RIGID E-UNIFICATION Simultaneous Rigid E-Unification was introduced by Gallier, Raatz and Snyder [57], who showed that the method of matings by Andrews <ref> [1] </ref> can be extended to logic with equality by incorporating simultaneous rigid E-unification. Considering a free variable tableau method, the key observation is the following.
Reference: 2. <author> M. Baaz. </author> <title> Note on the existence of most general semi-unifiers. In Arithmetic, Proof Theory and Computation Complexity, </title> <booktitle> volume 23 of Oxford Logic Guides, </booktitle> <pages> pages 20-29. </pages> <publisher> Oxford University Press, </publisher> <year> 1993. </year>
Reference-contexts: This proof has its roots in [31] where it is proved that the variable-bounded semi-unification problem 3 can be reduced to SREU. Semi-unification was proved undecidable in Kfoury, Tiuryn and Urzyczyn [85] and the monadic semi-unification was proved undecidable in Baaz <ref> [2] </ref>. A semi-unification problem consists of a set of expressions s i t i , 1 i n, where s i and t i are terms.
Reference: 3. <author> L. Bachmair, H. Ganzinger, C. Lynch, and W. Snyder. </author> <title> Basic paramod-ulation and superposition. </title> <editor> In D. Kapur, editor, </editor> <booktitle> 11th International Conference on Automated Deduction, volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 462-476, </pages> <address> Saratoga Springs, NY, USA, June 1992. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Degtyarev and Voronkov [41, 39] present a calculus BPE for solving nonsimultaneous rigid E-unification that is based on "rigid" basic superposition and is an adaption of basic superposition of Bachmair <ref> [3] </ref>, Nieuwenhuis and Rubio [106], to "rigid" variables. Their formalization of rigid basic superposition is close to the one in Nieuwenhuis and Rubio [107].
Reference: 4. <author> Peter Baumgartner. </author> <title> An ordered theory resolution calculus. </title> <editor> In A. Voronkov, editor, </editor> <booktitle> Logic Programming and Automated Reasoning (LPAR'92), volume 624 of Lecture Notes in Computer Science, </booktitle> <pages> pages 119-130, </pages> <year> 1992. </year>
Reference-contexts: they propose. (It may be the case that if a formula has an m-corroborator then their procedure eventually finds an n-corroborator for some n &gt; m, although it fails to find an m-corroborator.) There are a number of publications on the use of SREU in automated reasoning, e.g., the papers <ref> [4, 5, 6, 7, 52, 53, 56, 58, 66, 115] </ref>, some of the results are based on the conjecture that SREU is decidable.
Reference: 5. <author> G. Becher and U. Petermann. </author> <title> Rigid unification by completion and rigid paramodulation. </title> <editor> In B. Nebel and L. Dreschler-Fischer, editors, </editor> <booktitle> KI-94: Advances in Artificial Intelligence. 18th German Annual Conference on Artificial Intelligence, volume 861 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 319-330, </pages> <address> Saarbrucken, Germany, September 1994. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: they propose. (It may be the case that if a formula has an m-corroborator then their procedure eventually finds an n-corroborator for some n &gt; m, although it fails to find an m-corroborator.) There are a number of publications on the use of SREU in automated reasoning, e.g., the papers <ref> [4, 5, 6, 7, 52, 53, 56, 58, 66, 115] </ref>, some of the results are based on the conjecture that SREU is decidable.
Reference: 6. <author> B. Beckert. </author> <title> A completion-based method for mixed universal and rigid E-unification. </title> <editor> In A. Bundy, editor, </editor> <booktitle> Automated Deduction | CADE-12. 12th International Conference on Automated Deduction., volume 814 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 678-692, </pages> <address> Nancy, France, </address> <month> June/July </month> <year> 1994. </year> <pages> 106 107 </pages>
Reference-contexts: they propose. (It may be the case that if a formula has an m-corroborator then their procedure eventually finds an n-corroborator for some n &gt; m, although it fails to find an m-corroborator.) There are a number of publications on the use of SREU in automated reasoning, e.g., the papers <ref> [4, 5, 6, 7, 52, 53, 56, 58, 66, 115] </ref>, some of the results are based on the conjecture that SREU is decidable.
Reference: 7. <author> B. Beckert and R. Hahnle. </author> <title> An improved method for adding equality to free variable semantic tableaux. </title> <editor> In D. Kapur, editor, </editor> <booktitle> 11th International Conference on Automated Deduction (CADE), volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 678-692, </pages> <address> Saratoga Springs, NY, USA, June 1992. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: they propose. (It may be the case that if a formula has an m-corroborator then their procedure eventually finds an n-corroborator for some n &gt; m, although it fails to find an m-corroborator.) There are a number of publications on the use of SREU in automated reasoning, e.g., the papers <ref> [4, 5, 6, 7, 52, 53, 56, 58, 66, 115] </ref>, some of the results are based on the conjecture that SREU is decidable.
Reference: 8. <author> D. Benanav, D. Kapur, and P. Narendran. </author> <title> Complexity of matching problems. </title> <journal> Journal of Symbolic Computations, </journal> <volume> 3 </volume> <pages> 203-216, </pages> <year> 1987. </year>
Reference-contexts: There are no known interesting upper bounds of the computational complexity of the word equation problem; the complexity of Makanin's algorithm has several exponents [87]. It is known only that the problem is NP-hard <ref> [8] </ref>. Hence, if SREU 2 is decidable then there is probably no simple proof of that. One approach to prove the de-cidability is to try to generalize the decidability proof of the case with one unary function symbol [31, 32].
Reference: 9. <editor> E.W. Beth. </editor> <booktitle> The Foundations of Mathematics. </booktitle> <publisher> North Holland, </publisher> <year> 1959. </year>
Reference-contexts: The other category of methods, that we considered above, is based on semantic tableau or sequent calculus based proof systems, originally developed by Beth <ref> [9] </ref> and further studied by Smullyan [137]. Independently, similar methods were introduced by Kanger [83]. We refer to such methods under the name of tableau. Tableau methods are to a large extent based on Gentzen's work [61].
Reference: 10. <author> W. Bibel. </author> <title> On matrices with connections. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 28(4) </volume> <pages> 633-645, </pages> <year> 1981. </year>
Reference-contexts: The matrix characterization of provability (where free variables were used for the first time) was introduced by Prawitz [118, 119] for formulas in conjunctive normal form and was later generalized to arbitrary formulas, independently, by Andrews [1] and Bibel <ref> [10] </ref>. Related ideas appear already in Quine [120]. The study of equality reasoning in sequent calculus based methods was already started by Wang [158]. Important pioneering work in this connection was done by Kanger [84]. Both categories are addressed and compared by several authors.
Reference: 11. <author> W. Bibel and E. Eder. </author> <title> Methods and calculi for deduction. In D.M. </title> <editor> Gabbay, C.J. Hogger, and J.A. Robinson, editors, </editor> <booktitle> Handbook of Logic in Artificial Intelligence and Logic Programming, </booktitle> <volume> volume 1, chapter 3, </volume> <pages> pages 67-182. </pages> <publisher> Oxford University Press, </publisher> <year> 1993. </year>
Reference-contexts: The close correspondence between tableau and sequent calculus systems is described in Smullyan [137]. For a comprehensive treatment of equality reasoning in automated theorem proving in general see the tutorial by Degtyarev and Voronkov [40]. Futher comparisons can be found, e.g., in Eder [45, 46], Bibel and Eder <ref> [11] </ref> and Ophelders and de Swart [108]. 1.2 SIMULTANEOUS RIGID E-UNIFICATION Simultaneous Rigid E-Unification was introduced by Gallier, Raatz and Snyder [57], who showed that the method of matings by Andrews [1] can be extended to logic with equality by incorporating simultaneous rigid E-unification.
Reference: 12. <author> G. Birkhoff. </author> <title> On the structure of abstract algebras. </title> <journal> Proc. Cambridge Phil. Soc., </journal> <volume> 31 </volume> <pages> 433-454, </pages> <year> 1935. </year>
Reference-contexts: It follows by Birkhoff's completeness theorem for equational logic <ref> [12] </ref> that, given a set of ground equations E and and a ground equation s t, s t is a logical consequence of E iff s can be reduced to t by using the equations in E as rewrite rules in both directions. 14 Preliminaries 2.4 FINITE TREE AUTOMATA Finite tree <p> Recall that, for any set E of ground equations and for all ground terms s and t, where T =E is the canonical model of E. Recall also that Birkhoff's completeness theorem for equational logic <ref> [12] </ref> states the following in the case of ground equations.
Reference: 13. <author> E. Borger, E. Gradel, and Yu. Gurevich. </author> <title> The Classical Decision Problem. </title> <publisher> Springer Verlag, </publisher> <year> 1997. </year>
Reference-contexts: We can also note the following "reversed" fenomenon. The following problem is undecidable if there is either one binary or two unary function symbols in the signature [159, 160] and no relation symbols besides equality (cf <ref> [13, Corollary 4.1.3] </ref>): * Given a Horn clause '(~x), is 9~x'(~x) valid? Actually, it is enough that there are three literals and three variables in '(~x) [160]. On the other hand, we know that the 1-Skeleton problem of Horn clauses is decidable, this is just rigid E-unification. <p> f F (S 1 ) j S 1 2 S g: 7.3 CLASSIFICATION OF THE PRENEX FRAGMENT The decidability problem of the fragments of intuitionistic logic has not been as thoroughly studied as the corresponding problem in classical logic, where the decidability of all standard fragments has been systematically classified <ref> [13] </ref>. In particular, not much has been known about the prenex fragment (of intuitionistic logic). Many new decidability results about the prenex fragment have been obtained quite recently by Degtyarev and Voronkov [34, 35, 37, 38] and Voronkov [153, 154]. Some of these results are: 1. <p> By now the classification of all the traditional fragments has been completed <ref> [13] </ref>. See Gurevich [71] for a popular introduction into the subject. Classically, all formulas are equivalent to prenex formulas. Formulas in prenex form are traditionally classified by imposing restrictions on the quantifier prefix, the signature and either allowing equality or not. <p> Classically, all formulas are equivalent to prenex formulas. Formulas in prenex form are traditionally classified by imposing restrictions on the quantifier prefix, the signature and either allowing equality or not. Let us adopt the following notation for classes of formulas <ref> [13] </ref>. Let [Q; ff; fi] and [Q; ff; fi] stand for collections of closed first-order prenex formulas with and without equality, respectively, where 1. Q is a string over f9; 8; 9 fl ; 8 fl g, indicating that prenex sentences with quantifier prefix Q are allowed. <p> Note that, without equality, * [all ; all ; all ] (` i ) is decidable and in fact PSPACE-complete [153], whereas classically, there are already 11 different minimal standard fragments of first-order logic without equality which are undecidable (9 of which use no function symbols at all) <ref> [13] </ref>. Note also that * [all ; all ; (0)] is decidable [111] and in fact PSPACE-complete [35]. <p> This is equivalent to the de-cidability of the prenex fragment of intuitionistic logic with equality restricted to function symbols of arity 1. 2. Decidability of SREU with two rigid equations. If we adopt a more precise notion of classification (that is standard in the context of classical logic <ref> [13] </ref>), we can note that the following case is unsolved. 3. Decidability of the 9 fl -fragment of intuitionistic logic with equality without constants.
Reference: 14. <author> W.S. Brainerd. </author> <title> Tree generating regular systems. </title> <journal> Information and Control, </journal> <volume> 14 </volume> <pages> 217-231, </pages> <year> 1969. </year>
Reference-contexts: Reduction to Tree Automata We use the following relationship between tree automata and arbitrary ground rewrite systems <ref> [14] </ref>. Theorem 6.3 (Brainerd) Let R be a ground rewrite system and T a finite set of terms. Then the set f t j (9s 2 T ) t fl ! R s g is recognizable.
Reference: 15. <author> J.R. Buchi and J.B. Wright. </author> <title> Mathematical theory of automata. </title> <note> course notes. Communications Sciences 403, </note> <institution> University of Michigan, </institution> <year> 1960. </year>
Reference-contexts: So the value of a term 1 ( 2 ( n (*))) is the state after reading the string n 2 1 . This observation is attributed to Buchi and Wright <ref> [15] </ref>. 5.2. Preliminaries 51 The main contributions of this chapter can be summarized as follows. We present a comprehensive proof of EXPTIME-completeness of the intersection non-emptiness problem of finite tree automata. More precisely, it is proved that the hardness result holds already for deterministic finite (bottom-up) tree automata.
Reference: 16. <author> A. Chandra, H. Lewis, and J. Makowsky. </author> <title> Embedded implicational dependencies and their inference problem. </title> <booktitle> In Proc. of 13th Annual ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pages 342-354, </pages> <year> 1981. </year>
Reference-contexts: So, inclusion in EXPTIME follows by Theorem 5.1. Without using Theorem 5.1, one can reduce the intersection non-emptiness problem to other problems known to be in EXPTIME (or EXPTIME-complete), like the inference problem for full implicational dependencies <ref> [16] </ref>, relational query evaluation [146] or a certain restricted 5.5. Intersection Non-emptiness 59 logic program [134] (using the relationship ALOGSPCE=P [17]). One such reduction is given below. Theorem 5.2 Intersection non-emptiness of TAs and DTAs is EXPTIME-complete. <p> The only function symbols in an FID are constants. The inference problem is simply the question of whether a given conjunction of FIDs implies another given FID. This problem can be solved in exponential time (actually it is EXPTIME complete <ref> [16, 146] </ref>). Let A i for 1 i n for some n 1 be TAs with a common input alphabet , Let A = (Q; ; R; F ) be the direct product of all the A i 's. <p> The time to construct P is clearly polynomial in the total size of the A i 's. By Chandra et al. <ref> [16] </ref> it follows thus that: Lemma 5.8 The intersection non-emptiness problem of DTAs is in EXP TIME. We obtain an alternative proof of Lemma 5.8 by looking at P as a logic program and asking the question if the goal Nonempty follows from it.
Reference: 17. <author> A.K. Chandra, D.C. Kozen, and L.J. Stockmeyer. </author> <title> Alternation. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 28(1) </volume> <pages> 114-133, </pages> <month> January </month> <year> 1981. </year>
Reference-contexts: But alternating space is precisely deterministic time, only one exponential higher <ref> [17] </ref>. 5.2 PRELIMINARIES Finite Tree Automata Let us recall the definition of a (bottom-up) tree automaton. <p> This is actually the definition of a DTA used by Gecseg and Steinby [60]. We note that the study of various forms of recognizability is a research area by itself [21, 103]. Alternation and Computational Complexity Alternation was introduced by Chandra, Kozen and Stockmeyer <ref> [17] </ref> as a generalization of nondeterminism. First, let us give an intuitive definition of an alternating Turing machine or ATM. An ATM is like a nondeterministic Turing machine (TM), except that every configuration or instantaneous description (ID) is labelled as either "universal" or "existential". <p> Then M accepts x iff the initial ID q 0 x, leads to acceptance, where leads to acceptance is defined recursively as follows. 2 In the original definition of an ATM there is also a possibility of a "negated" state, but it can be omitted without loss of generality <ref> [17, Theorem 2.5] </ref>. 54 Finite Tree Automata Any final ID leads to acceptance. <p> Alternating Space vs Deterministic Time The notion of space (and time) complexity of ATMs is the same as that of TMs. The key property that we are going to use is that, alternating space is precisely deterministic time, only one exponential higher <ref> [17] </ref>. <p> Without using Theorem 5.1, one can reduce the intersection non-emptiness problem to other problems known to be in EXPTIME (or EXPTIME-complete), like the inference problem for full implicational dependencies [16], relational query evaluation [146] or a certain restricted 5.5. Intersection Non-emptiness 59 logic program [134] (using the relationship ALOGSPCE=P <ref> [17] </ref>). One such reduction is given below. Theorem 5.2 Intersection non-emptiness of TAs and DTAs is EXPTIME-complete. A formal proof of Theorem 5.2 is given in the subsequent sections as lemmas 5.4 and 5.8. The following outline illustrates the main ideas of that proof. <p> particular, it seems that if a decision problem for (deterministic) finite automata is complete for a certain space complexity class then the same decision problem for (deterministic) finite tree automata is complete for the corresponding alternating space complexity class, but alternating space is precisely deterministic time, only one exponential higher <ref> [17] </ref>. Using the above complexity results we were then able to prove that: * SREU with one variable is EXPTIME-complete (see Theorem 6.4). * SREU with one variable and a constant bound on the number of rigid equations is P-complete (see Theorem 6.5).
Reference: 18. <author> C.C. Chang and H.J. Keisler. </author> <title> Model Theory. </title> <publisher> North-Holland, </publisher> <address> Amster-dam, third edition, </address> <year> 1990. </year>
Reference-contexts: However, all the written proofs and the presentation of the material in this thesis is the result of the individual effort of the author of the thesis. Chapter 2 Preliminaries 2.1 FIRST-ORDER LOGIC We follow Chang and Keisler <ref> [18] </ref> regarding first-order languages and structures. We always assume, unless otherwise stated, that the first-order languages that we are dealing with are languages with equality and contain only function symbols. A signature is a collection of function symbols with fixed arities.
Reference: 19. <author> Jin-Young Choi. </author> <title> The Decidability Problem for Rigid E-Unification: A New Proof and Extensions. </title> <type> PhD thesis, </type> <institution> University of Pennsylvania, </institution> <year> 1993. </year>
Reference-contexts: SREU versus E-Unification and Unification The first decidability and NP-completeness proof of rigid E-unification was given by Gallier, Narendran, Plaisted and Snyder [52, 56]. Since then, the decidability (and NP-completeness) of rigid E-unification has been reestablished by other authors, e.g., Plaisted [116], de Kogel [27, 28] and Choi <ref> [19] </ref>. In contrast, the problem of E-unification is undecidable. A good example is the undecidability of weak equality in Combinatory Logic due to Scott and Curry (cf Hindley and Seldin [75, Chapter 5]). Let be a binary function symbol and let S and K be two constants. <p> The first decidability proof of rigid E-unification is given in Gallier, Narendran, Plaisted and Snyder [56]. Recently a simpler proof, without computational complexity considerations, has been given by de Kogel [27, 28]. Rigid E-unification is studied also in Choi <ref> [19] </ref>. We start with the solved cases: * Rigid E-unification with ground left-hand side is NP-complete [91]. Rigid E-unification in general is NP-complete and there exist finite complete sets of unifiers [52, 56]. * Rigid E-unification with one variable is P-complete [29] (see Theorem 6.2).
Reference: 20. <author> J.L. Coquide, M. Dauchet, R. Gilleron, and S. Vagvolgyi. </author> <title> Bottom-up tree pushdown automata: classification and connection with rewrite systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 127 </volume> <pages> 69-98, </pages> <year> 1994. </year> <month> 108 </month>
Reference-contexts: Tree automata were introduced, independently, in Doner [43] and Thatcher and Wright [143]. The main motivation was to obtain decidability results for the weak monadic second-order logic of the binary tree. Here we adopt the following definition of tree automata, based on rewrite rules <ref> [20, 22] </ref>. <p> Furthermore, a tree automaton that recognizes this set can be obtained effectively from R and T . Recently, corresponding connections between recognizability (with respect to pushdown tree automata [129]) and nonground term rewriting systems have been studied by several authors <ref> [20, 21, 54, 62, 126] </ref>. For a survey of connections between rewriting and tree automata see Dauchet [22]. We obtain the following corollary. Corollary 6.1 Let S (x) be a rigid equation with one variable x that is not redundant. <p> Answers to such questions might be found by studying the relationships between SREU and automata theoretic extensions of tree automata, such as tree pushdown automata, and the decision problems of the latter <ref> [20, 62, 126, 129] </ref>.
Reference: 21. <author> B. Courcelle. </author> <title> On recognizable sets and tree automata. </title> <editor> In M. Nivat and H. Ait-Kaci, editors, </editor> <title> Resolution of Equations in Algebraic Structures. </title> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: It is well-known that the nondeterministic and the deterministic versions of TAs have the same expressive power [43, 60, 143], i.e., for any TA there is an equivalent DTA. For an overview of the notion of recognizability in general algebraic structures see Courcelle <ref> [21] </ref> and the fundamental paper by Mezei and Wright [103]. 2.5 CLASSICAL AUTOMATA THEORY We use some notions from classical automata theory and follow Hopcroft and Ullman in that respect [76]. Characters are treated as constants, in the usual case. 2.5. <p> This is actually the definition of a DTA used by Gecseg and Steinby [60]. We note that the study of various forms of recognizability is a research area by itself <ref> [21, 103] </ref>. Alternation and Computational Complexity Alternation was introduced by Chandra, Kozen and Stockmeyer [17] as a generalization of nondeterminism. First, let us give an intuitive definition of an alternating Turing machine or ATM. <p> Furthermore, a tree automaton that recognizes this set can be obtained effectively from R and T . Recently, corresponding connections between recognizability (with respect to pushdown tree automata [129]) and nonground term rewriting systems have been studied by several authors <ref> [20, 21, 54, 62, 126] </ref>. For a survey of connections between rewriting and tree automata see Dauchet [22]. We obtain the following corollary. Corollary 6.1 Let S (x) be a rigid equation with one variable x that is not redundant.
Reference: 22. <author> M. Dauchet. </author> <title> Rewriting and tree automata. </title> <editor> In H. Comon and J.P. Jouannaud, editors, </editor> <booktitle> Term Rewriting (French Spring School of Theoretical Computer Science), volume 909 of Lecture Notes in Computer Science, </booktitle> <pages> pages 95-113. </pages> <publisher> Springer Verlag, </publisher> <address> Font Romeux, France, </address> <year> 1993. </year>
Reference-contexts: Tree automata were introduced, independently, in Doner [43] and Thatcher and Wright [143]. The main motivation was to obtain decidability results for the weak monadic second-order logic of the binary tree. Here we adopt the following definition of tree automata, based on rewrite rules <ref> [20, 22] </ref>. <p> Recently, corresponding connections between recognizability (with respect to pushdown tree automata [129]) and nonground term rewriting systems have been studied by several authors [20, 21, 54, 62, 126]. For a survey of connections between rewriting and tree automata see Dauchet <ref> [22] </ref>. We obtain the following corollary. Corollary 6.1 Let S (x) be a rigid equation with one variable x that is not redundant. Then the set of x such that solves S (x) is recognizable. Furthermore, a tree automaton that recognizes this set is obtained effectively from S. Proof.
Reference: 23. <author> M. Dauchet, T. Heuillard, P. Lescanne, and S. Tison. </author> <title> Decidability of the confluence of ground term rewriting systems. </title> <booktitle> In Proc. IEEE Conference on Logic in Computer Science (LICS), </booktitle> <pages> pages 353-360. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year>
Reference-contexts: In particular, it involves, for each ground rewrite system, a construction of a "ground tree transducer" that is a pair of a bottom-up and a top-down finite tree automaton, and defines the rewrite relation that is related with that rewrite system <ref> [23, 25] </ref>.
Reference: 24. <author> M. Dauchet, T. Heuillard, P. Lescanne, and S. Tison. </author> <title> Decidability of the confluence of finite ground term rewrite systems and of other related term rewrite systems. </title> <journal> Information and Computation, </journal> <volume> 88 </volume> <pages> 187-201, </pages> <year> 1990. </year>
Reference-contexts: This construction is in fact based on a construction in de Kogel [27, Theorems 4.1 and 4.2] that is based on Shostak's congruence closure algorithm [136]. 1 A similar construction is used also in Dauchet, Heuillard, Lescanne and Tison <ref> [24] </ref>, and in Gurevich and Voronkov [73]. Inclusion in EXPTIME In the following we assume that none of the rigid equations are redundant.
Reference: 25. <author> M. Dauchet and S. Tison. </author> <title> Tree automata and decidability in ground term rewriting systems. </title> <booktitle> In Proc. FCT'85, volume 199 of Lecture Notes in Computer Science, </booktitle> <pages> pages 80-84, </pages> <year> 1985. </year>
Reference-contexts: In particular, it involves, for each ground rewrite system, a construction of a "ground tree transducer" that is a pair of a bottom-up and a top-down finite tree automaton, and defines the rewrite relation that is related with that rewrite system <ref> [23, 25] </ref>.
Reference: 26. <author> M. Dauchet and S. Tison. </author> <title> The theory of ground rewrite systems is decidable. </title> <booktitle> In Proc. IEEE Conference on Logic in Computer Science (LICS), </booktitle> <pages> pages 242-248. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: The proof is by reduction to the decidable first-order theory of ground rewrite systems <ref> [26] </ref>. The Decidable Theory GRS Now we formally define the theory of ground rewrite systems or GRS. Consider a signature that contains all the function symbols and constants that we are going to need in the sequel. <p> For each constant t 2 , t A = t. 2. For each relation symbol R E 2 , R A E is the rewrite relation fl 3 In the original definition of GRS <ref> [26] </ref> there are two more relation symbols for each E, but we do not use them here. 86 SREU with One Variable We can now define GRS as the first-order theory of A, i.e., GRS = f ' a sentence in j A j= ' g: We use the following result <p> there are two more relation symbols for each E, but we do not use them here. 86 SREU with One Variable We can now define GRS as the first-order theory of A, i.e., GRS = f ' a sentence in j A j= ' g: We use the following result <ref> [26] </ref>. Theorem 6.8 (Dauchet-Tison) GRS is decidable. The proof of Theorem 6.8 is by reduction to finite tree automata. <p> Hence, the intractability of SREU with one variable is strongly related to the number of rigid equations. In addition, by using a result of Dauchet and Tison <ref> [26] </ref>, we were able to extend the decidability result of SREU with one variable in a non-trivial way: (see Theorem 6.9) * SREU is decidable if restricted to rigid equations E ` 8 e such that - E ` 8 e contains at most one variable, or - E is ground
Reference: 27. <author> E. De Kogel. </author> <title> Rigid E-unification simplified. </title> <editor> In P. Baumgartner, R. Hahnle, and J. Posegga, editors, </editor> <title> Theorem Proving with Analytic Tableaux and Related Methods, </title> <booktitle> number 918 in Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 17-30, </pages> <address> Schlo Rheinfels, St. Goar, Germany, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: SREU versus E-Unification and Unification The first decidability and NP-completeness proof of rigid E-unification was given by Gallier, Narendran, Plaisted and Snyder [52, 56]. Since then, the decidability (and NP-completeness) of rigid E-unification has been reestablished by other authors, e.g., Plaisted [116], de Kogel <ref> [27, 28] </ref> and Choi [19]. In contrast, the problem of E-unification is undecidable. A good example is the undecidability of weak equality in Combinatory Logic due to Scott and Curry (cf Hindley and Seldin [75, Chapter 5]). <p> We write Terms (E) for the set of all terms that occur in E, in particular Terms (E) is closed under the subterm relation. We use the following lemma. Lemma 6.1 follows also from a more general statement in de Kogel <ref> [27, Theorem 5.11] </ref>. Lemma 6.1 Let t be a ground term, c a constant, E a finite set of ground equations and e a ground equation. Let T = Terms (E [ feg). <p> Brainerd's theorem is too general here and its computational complexity is unclear. Instead of using Brainerd's theorem, we give an explicit construction of a DTA from a given set of equations. This construction is in fact based on a construction in de Kogel <ref> [27, Theorems 4.1 and 4.2] </ref> that is based on Shostak's congruence closure algorithm [136]. 1 A similar construction is used also in Dauchet, Heuillard, Lescanne and Tison [24], and in Gurevich and Voronkov [73]. Inclusion in EXPTIME In the following we assume that none of the rigid equations are redundant. <p> Clearly, it is enough to prove that, for all t; s 2 T , E j= t s , A j= t s: For a proof of this statement see de Kogel <ref> [27] </ref>. The second part is proved as follows. The number of terms in Terms (E) is proportional to the size of E. It follows by Theorem 6.1 that the time complexity of the construction of Q, i.e., the time complexity to partition Terms (E) into congruence classes, is polynomial. <p> The first decidability proof of rigid E-unification is given in Gallier, Narendran, Plaisted and Snyder [56]. Recently a simpler proof, without computational complexity considerations, has been given by de Kogel <ref> [27, 28] </ref>. Rigid E-unification is studied also in Choi [19]. We start with the solved cases: * Rigid E-unification with ground left-hand side is NP-complete [91].
Reference: 28. <author> Eric De Kogel. </author> <title> Equational Proofs in Tableaux and Logic Programming. </title> <type> PhD thesis, </type> <institution> Tilburg University, </institution> <address> the Netherlands, </address> <year> 1995. </year>
Reference-contexts: SREU versus E-Unification and Unification The first decidability and NP-completeness proof of rigid E-unification was given by Gallier, Narendran, Plaisted and Snyder [52, 56]. Since then, the decidability (and NP-completeness) of rigid E-unification has been reestablished by other authors, e.g., Plaisted [116], de Kogel <ref> [27, 28] </ref> and Choi [19]. In contrast, the problem of E-unification is undecidable. A good example is the undecidability of weak equality in Combinatory Logic due to Scott and Curry (cf Hindley and Seldin [75, Chapter 5]). <p> The first decidability proof of rigid E-unification is given in Gallier, Narendran, Plaisted and Snyder [56]. Recently a simpler proof, without computational complexity considerations, has been given by de Kogel <ref> [27, 28] </ref>. Rigid E-unification is studied also in Choi [19]. We start with the solved cases: * Rigid E-unification with ground left-hand side is NP-complete [91].
Reference: 29. <author> A. Degtyarev, Yu. Gurevich, P. Narendran, M. Veanes, and A. Voronkov. </author> <title> The decidability of simultaneous rigid E-unification with one variable. </title> <type> UPMAIL Technical Report 139, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: In particular, inequiva-lence [127, 132] and intersection non-emptiness <ref> [29, 48, 133] </ref> are examples of such decision problems. The intersection non-emptiness problem of finite tree automata arises naturally in the context of type inference in logic programming [48]. The same decision problem restricted to top-down deterministic finite tree automata arises also in sort inference in typed functional programming [133]. <p> Rigid E-unification is studied also in Choi [19]. We start with the solved cases: * Rigid E-unification with ground left-hand side is NP-complete [91]. Rigid E-unification in general is NP-complete and there exist finite complete sets of unifiers [52, 56]. * Rigid E-unification with one variable is P-complete <ref> [29] </ref> (see Theorem 6.2). Or, more generally, SREU with one variable and a bounded number of rigid equations is P-complete [29] (see Theorem 6.5). * If all function symbols have arity 1 (the monadic case) then it follows that SREU is PSPACE-hard [66]. <p> Rigid E-unification in general is NP-complete and there exist finite complete sets of unifiers [52, 56]. * Rigid E-unification with one variable is P-complete <ref> [29] </ref> (see Theorem 6.2). Or, more generally, SREU with one variable and a bounded number of rigid equations is P-complete [29] (see Theorem 6.5). * If all function symbols have arity 1 (the monadic case) then it follows that SREU is PSPACE-hard [66]. If only one unary function symbol is allowed then the problem is decidable [31, 32]. <p> Furthermore, there are only two variables [147, 148, 150] and three rigid equations with fixed ground left-hand sides [72] (see Theorem 3.4). * SREU with one variable is decidable, in fact EXPTIME-complete <ref> [29] </ref> (see Theorem 6.4). Moreover, united one variable SREU, i.e., SREU restricted to rigid equations that either contain one variable, or have a ground left-hand side and a right-hand side that is a simple equality between two variables, is decidable (see Theorem 6.9).
Reference: 30. <author> A. Degtyarev, Yu. Gurevich, and A. Voronkov. </author> <title> Herbrand's theorem and equational reasoning: Problems and solutions. </title> <type> UPMAIL Technical Report 128, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> September </month> <year> 1996. </year> <note> Appears in the Bulletin of the European Association for Theoretical Computer Science (Vol 60, </note> <month> October </month> <year> 1996). </year> <month> 109 </month>
Reference-contexts: Before that result, there were several faulty statements about the decidability of SREU, e.g., that SREU is NP-complete [50, 52, 56], EXPTIME-complete [66] and even NEXPTIME-complete [65]. The undecidability of SREU was quite unexpected and implied the undecidability of several other fundamental decision problems in automated theorem proving <ref> [30] </ref>. Simultaneous unification reduces to unification. Unification can be solved in almost linear time [97] and even in linear time [114] if more complex data structures are used. It is also known that unification is P-complete [44, 161]. <p> In general, this quite unexpected undecidability result had a serious impact on the automated theorem proving community, as several effectively equivalent fundamental decision problems in automated reasoning in classical logic with equality turned out to be undecidable <ref> [30] </ref>. We return to this in the next chapter. Here we show that four or even three rigid equations with ground left-hand sides and two variables in a signature with one binary function symbol an no other nonconstant function symbols, already imply undecidability. <p> formula ' and a positive integer m, do there exist ground substitutions 1 ; : : : ; m such that ' 1 _ _ ' m is valid? 36 The Herbrand Skeleton Problem The Herbrand Skeleton problem is effectively equivalent to any of the fol lowing six decision problems <ref> [30] </ref>. 2. Formula Instantiation: the Herbrand skeleton problem with multi plicity one. 3. Matrix Instantiation: Given a matrix, is there a substitution that makes every vertical path through that matrix inconsistent? 4. Existential Intuitionistic: Is a given existential formula provable in intuitionistic logic? 5. <p> In the case of logic without equality, all the above problems are decidable and reduce to unification. In the case of logic with equality, all the above problems are equivalent to SREU <ref> [30] </ref>. The undecidability of SREU [32, 34, 37, 38] thus implies that problems (1-7) are all undecidable. Note that SREU had several false decidability proofs [53, 56, 66] before it was proved undecidabile, and the problems (1-7) were believed to be decidable.
Reference: 31. <author> A. Degtyarev, Yu. Matiyasevich, and A. Voronkov. </author> <title> Simultaneous rigid E-unification is not so simple. </title> <type> UPMAIL Technical Report 104, </type> <institution> Upp-sala University, Computing Science Department, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: Reduction of Monadic Semi-unification The first proof of the undecidability of SREU [34] was by reduction of the monadic semi-unification problem to SREU. This proof has its roots in <ref> [31] </ref> where it is proved that the variable-bounded semi-unification problem 3 can be reduced to SREU. Semi-unification was proved undecidable in Kfoury, Tiuryn and Urzyczyn [85] and the monadic semi-unification was proved undecidable in Baaz [2]. <p> If only one unary function symbol is allowed then the problem is decidable <ref> [31, 32] </ref>. <p> Monadic SREU with one variable is PSPACE-complete [73] (see Theorem 6.7). * The word equation solving [96] (i.e., unification under associativity), which is an extremely hard problem with no interesting known computational complexity bounds, can be reduced to monadic SREU <ref> [31] </ref>. * Monadic SREU is equivalent to a non-trivial extension of word equa tions [73]. 102 Conclusion * Monadic SREU is equivalent to the decidability problem of the prenex fragment of intuitionistic logic with equality with function symbols of arity 1 [35]. * In general SREU is undecidable [34]. <p> It should be emphasized that the question of the decidability of monadic SREU is equivalent to the question of the decidability of SREU with just two unary function symbols or SREU 2 [32]. It is shown in Degtyarev, Matiya-sevich and Voronkov <ref> [31, 32] </ref> that the famous word equation problem, also known as unification under associativity has a simple reduction to SREU 2 . The word equation problem is a hard combinatorial problem that was proven decidable by Makanin in 1977 [96]. <p> It is known only that the problem is NP-hard [8]. Hence, if SREU 2 is decidable then there is probably no simple proof of that. One approach to prove the de-cidability is to try to generalize the decidability proof of the case with one unary function symbol <ref> [31, 32] </ref>. The decidability of SREU with two rigid equations is less important, but intriguing. One might try to prove its undecidability by using some ideas from Schubert [130].
Reference: 32. <author> A. Degtyarev, Yu. Matiyasevich, and A. Voronkov. </author> <title> Simultaneous rigid E-unification and related algorithmic problems. </title> <booktitle> In Eleventh Annual IEEE Symposium on Logic in Computer Science (LICS'96), </booktitle> <pages> pages 494-502, </pages> <address> New Brunswick, NJ, July 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: In the case of logic without equality, all the above problems are decidable and reduce to unification. In the case of logic with equality, all the above problems are equivalent to SREU [30]. The undecidability of SREU <ref> [32, 34, 37, 38] </ref> thus implies that problems (1-7) are all undecidable. Note that SREU had several false decidability proofs [53, 56, 66] before it was proved undecidabile, and the problems (1-7) were believed to be decidable. The Herbrand m-Skeleton problem is the Herbrand Skeleton problem with fixed multiplicity m. <p> Let us write SREU 2 for monadic SREU with two unary function symbols. Then monadic SREU is decidable iff SREU 2 is decidable <ref> [32] </ref>. If SREU 2 is decidable then there hardly exists a simple proof of that. A fact to support this statement is that the word equation problem or unification under associativity has a simple reduction to SREU 2 [32]. <p> Then monadic SREU is decidable iff SREU 2 is decidable <ref> [32] </ref>. If SREU 2 is decidable then there hardly exists a simple proof of that. A fact to support this statement is that the word equation problem or unification under associativity has a simple reduction to SREU 2 [32]. The word equation problem is a hard combinatorial problem that was proved decidable by Makanin [96]. No interesting upper bounds for computational complexity of the word equation problem are known yet. The monadic SREU is treated in detail in Gurevich and Voronkov [73]. <p> If only one unary function symbol is allowed then the problem is decidable <ref> [31, 32] </ref>. <p> If only one unary function symbol is allowed then the problem is decidable [31, 32]. If only constants are allowed then the problem is NP-complete <ref> [32] </ref> if there are at least two constants. * About the monadic case it is known that if there are more than 1 unary function symbols then SREU is decidable iff it is decidable with just 2 unary function symbols [32]. * If the left-hand sides are ground then the monadic <p> If only constants are allowed then the problem is NP-complete <ref> [32] </ref> if there are at least two constants. * About the monadic case it is known that if there are more than 1 unary function symbols then SREU is decidable iff it is decidable with just 2 unary function symbols [32]. * If the left-hand sides are ground then the monadic case is decidable [73]. <p> Decidability of the 9 fl -fragment of intuitionistic logic with equality without constants. It should be emphasized that the question of the decidability of monadic SREU is equivalent to the question of the decidability of SREU with just two unary function symbols or SREU 2 <ref> [32] </ref>. It is shown in Degtyarev, Matiya-sevich and Voronkov [31, 32] that the famous word equation problem, also known as unification under associativity has a simple reduction to SREU 2 . The word equation problem is a hard combinatorial problem that was proven decidable by Makanin in 1977 [96]. <p> It should be emphasized that the question of the decidability of monadic SREU is equivalent to the question of the decidability of SREU with just two unary function symbols or SREU 2 [32]. It is shown in Degtyarev, Matiya-sevich and Voronkov <ref> [31, 32] </ref> that the famous word equation problem, also known as unification under associativity has a simple reduction to SREU 2 . The word equation problem is a hard combinatorial problem that was proven decidable by Makanin in 1977 [96]. <p> It is known only that the problem is NP-hard [8]. Hence, if SREU 2 is decidable then there is probably no simple proof of that. One approach to prove the de-cidability is to try to generalize the decidability proof of the case with one unary function symbol <ref> [31, 32] </ref>. The decidability of SREU with two rigid equations is less important, but intriguing. One might try to prove its undecidability by using some ideas from Schubert [130].
Reference: 33. <author> A. Degtyarev and A. Voronkov. </author> <title> Reduction of second-order unification to simultaneous rigid E-unification. </title> <type> UPMAIL Technical Report 109, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> June </month> <year> 1995. </year>
Reference-contexts: It follows that -unification is undecidable. A -unification problem is then reduced to SREU. This reduction is rather technical, and it does not really reveal the reasons why SREU is undecidable. Reduction of Second-Order Unification The second proof of the undecidability of SREU by Degtyarev and Voron-kov <ref> [33, 38] </ref>, and probably the most straightforward one, is by reducing second-order unification to SREU. The undecidability of second-order unification was proved by Goldfarb [64]. A second-order unification problem is the problem of deciding if a finite set S of second-order equations is unifiable. <p> Currently there are no reasonable semi-decision procedures for SREU, except for ones based on straightforward enumeration [115]. Other Applications Due to the simple reduction from second-order unification to SREU <ref> [33, 38] </ref>, a reasonable semi-decision procedure for SREU might also give new insights into how to deal with the former problem. If monadic SREU is decidable then some algorithm for it may shed some light on the complexity of the word equation problem.
Reference: 34. <author> A. Degtyarev and A. Voronkov. </author> <title> Simultaneous rigid E-unification is undecidable. </title> <type> UPMAIL Technical Report 105, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> May </month> <year> 1995. </year>
Reference-contexts: The undecidability of weak equality implies that the following problem is undecidable: Given ground terms t and s, is it the case that 5 8x 8y (K x) y x SREU was proved undecidable by Degtyarev and Voronkov <ref> [34] </ref>. Before that result, there were several faulty statements about the decidability of SREU, e.g., that SREU is NP-complete [50, 52, 56], EXPTIME-complete [66] and even NEXPTIME-complete [65]. The undecidability of SREU was quite unexpected and implied the undecidability of several other fundamental decision problems in automated theorem proving [30]. <p> So we speak about P-completeness with respect to logarithmic space reductions and PSPACE-completeness or EXPTIME-completeness with respect to polynomial time reductions. Chapter 3 Undecidability of SREU 3.1 INTRODUCTION The first undecidability proof of SREU was given by Degtyarev and Voron-kov <ref> [34] </ref>. Before that result, there were several faulty proofs of its decidabil-ity, e.g. [52, 66]. <p> 3.4 SREU is undecidable already for some fixed ground left-hand sides, two variables and three rigid equations. 32 Undecidability of SREU 3.7 UNDECIDABILITY PROOFS OF SREU In this section we briefly summarize the main points in the other undecidability proofs of SREU that have emerged since the problem was first <ref> [34] </ref> found to be undecidable. The different proofs reflect the undecidable nature of SREU more or less directly. The most transparent proof is probably by reduction of second-order unification, which shows how closely these problems are related. <p> The proof by reduction of Hilbert's tenth problem is less transparent, but reveals that one can express certain derivations with a system of rigid equations. Reduction of Monadic Semi-unification The first proof of the undecidability of SREU <ref> [34] </ref> was by reduction of the monadic semi-unification problem to SREU. This proof has its roots in [31] where it is proved that the variable-bounded semi-unification problem 3 can be reduced to SREU. <p> In the case of logic without equality, all the above problems are decidable and reduce to unification. In the case of logic with equality, all the above problems are equivalent to SREU [30]. The undecidability of SREU <ref> [32, 34, 37, 38] </ref> thus implies that problems (1-7) are all undecidable. Note that SREU had several false decidability proofs [53, 56, 66] before it was proved undecidabile, and the problems (1-7) were believed to be decidable. The Herbrand m-Skeleton problem is the Herbrand Skeleton problem with fixed multiplicity m. <p> Then j= but 6j= ' 1 and 6j= ' 0 (the situation is exaclty the same as in the previous case). 2 4.4 FROM 1-SKELETON TO N -SKELETON PROBLEM The 1-Skeleton problem is undecidable. This follows from the undecidability of SREU by Degtyarev and Voronkov <ref> [34, 38] </ref>. We can formulate their result in the current setting as follows (cf [38, Theorem 1]). Theorem 4.2 (Degtyarev-Voronkov) The 1-Skeleton problem of guarded Horn formulas is undecidable. Under certain restrictions on the language and the structure of formulas, the 1-Skeleton problem becomes decidable. <p> In particular, not much has been known about the prenex fragment (of intuitionistic logic). Many new decidability results about the prenex fragment have been obtained quite recently by Degtyarev and Voronkov <ref> [34, 35, 37, 38] </ref> and Voronkov [153, 154]. Some of these results are: 1. Decidability, and in particular PSPACE-completeness, of the prenex fragment of intuitionistic logic without equality [153, 154]. 2. Prenex fragment of intuitionistic logic with equality but without function symbols is PSPACE-complete [35]. <p> Decidability of this fragment was proved in Orevkov [111]. 3. Prenex fragment of intuitionistic logic with equality in the language with one unary function symbol is decidable [35]. 4. 9 fl -fragment of intuitionistic logic with equality is undecidable <ref> [34, 37, 38] </ref>. In many of the above results, the corresponding result has first been obtained for a fragment of SREU with similar restrictions. In particular, the last statement follows from the undecidability of SREU and the following property, originally used in Degtyarev and Voronkov [34, Theorem 4]. 7.3. <p> In many of the above results, the corresponding result has first been obtained for a fragment of SREU with similar restrictions. In particular, the last statement follows from the undecidability of SREU and the following property, originally used in Degtyarev and Voronkov <ref> [34, Theorem 4] </ref>. 7.3. Classification of the Prenex Fragment 91 Lemma 7.1 Let S (~x) be a system of rigid equations. S is solvable , ` i 9~xF (S): Proof. <p> The m-Skeleton problem was proved undecidable by Voda and Komara [151] by a very complicated argument, shortly after the result of Degtyarev and Voronkov <ref> [34] </ref>. Contrary to their claim [151], we show that the undecidability of the m-Skeleton problem follows directly from the undecidability of SREU. <p> monadic SREU [31]. * Monadic SREU is equivalent to a non-trivial extension of word equa tions [73]. 102 Conclusion * Monadic SREU is equivalent to the decidability problem of the prenex fragment of intuitionistic logic with equality with function symbols of arity 1 [35]. * In general SREU is undecidable <ref> [34] </ref>. Moreover, SREU is undecidable under the following restrictions: The left-hand sides of the rigid equations are ground [116].
Reference: 35. <author> A. Degtyarev and A. Voronkov. </author> <title> Decidability problems for the prenex fragment of intuitionistic logic. </title> <booktitle> In Eleventh Annual IEEE Symposium on Logic in Computer Science (LICS'96), </booktitle> <pages> pages 503-512, </pages> <address> New Brunswick, NJ, July 1996. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The decidability of monadic SREU is currently one of the few open problems related to SREU [73]. An effectively equivalent problem is the decidability of the prenex fragment of intuitionistic logic with equality with function symbols of arity 1 <ref> [35] </ref>. Some evidence speaks in favour of that the problem is decidable, although with very high computational complexity (e.g., many subcases are decidable). We get also the following result. <p> The statement follows now from Theorem 6.4. fi Chapter 7 Prenex Fragment of Intuitionistic Logic 7.1 INTRODUCTION The strong connections between SREU and intuitionistic logic with equality have implied new important decidability results in the latter area <ref> [35, 155] </ref>. From the undecidability of SREU follows, for example, that the 9 fl -fragment of intuitionistic logic with equality is undecidable [37, 38]. By using the results in Chapter 3, we improve this result to the following. The 99-fragment of intuitionistic logic with equality is undecid able. <p> The decidability of the 8 fl 98 fl -fragment of intuitionistic logic with equality has been an open problem which is settled in this chapter by using the results in Chapter 6 and an analogue of a Skolemization result for intuitionistic logic <ref> [35] </ref>. The following is proved. The 8 fl 98 fl -fragment of intuitionistic logic with equality is decid able and EXPTIME-hard. The above two results imply the following main contribution of this chapter. The prenex fragment of intuitionistic logic is the collection of all intuition istically provable prenex formulas. <p> In particular, not much has been known about the prenex fragment (of intuitionistic logic). Many new decidability results about the prenex fragment have been obtained quite recently by Degtyarev and Voronkov <ref> [34, 35, 37, 38] </ref> and Voronkov [153, 154]. Some of these results are: 1. Decidability, and in particular PSPACE-completeness, of the prenex fragment of intuitionistic logic without equality [153, 154]. 2. Prenex fragment of intuitionistic logic with equality but without function symbols is PSPACE-complete [35]. <p> Some of these results are: 1. Decidability, and in particular PSPACE-completeness, of the prenex fragment of intuitionistic logic without equality [153, 154]. 2. Prenex fragment of intuitionistic logic with equality but without function symbols is PSPACE-complete <ref> [35] </ref>. Decidability of this fragment was proved in Orevkov [111]. 3. Prenex fragment of intuitionistic logic with equality in the language with one unary function symbol is decidable [35]. 4. 9 fl -fragment of intuitionistic logic with equality is undecidable [34, 37, 38]. <p> Prenex fragment of intuitionistic logic with equality but without function symbols is PSPACE-complete <ref> [35] </ref>. Decidability of this fragment was proved in Orevkov [111]. 3. Prenex fragment of intuitionistic logic with equality in the language with one unary function symbol is decidable [35]. 4. 9 fl -fragment of intuitionistic logic with equality is undecidable [34, 37, 38]. In many of the above results, the corresponding result has first been obtained for a fragment of SREU with similar restrictions. <p> Proof. We prove the decidability first. Intuitionistic provability of any prenex sentence with the prefix 8 fl 98 fl can be reduced to provability of a prenex sentence with prefix 9 by using an analogue of Skolemization for intuitionistic logic <ref> [35, Theorem 3.2] </ref>. So consider a sentence 9x'(x), where ' is quantifier free. <p> A similar decidability proof of another fragment is given in Degtyarev and Voronkov <ref> [35, Theorem 7.1] </ref> where the authors first prove the equivalence (when restricted to prenex formulas) of LJ with another system that is based on Hudelmaier's calculus LG [77] and use properties of the latter system. <p> Note also that * [all ; all ; (0)] is decidable [111] and in fact PSPACE-complete <ref> [35] </ref>. <p> of Herbrand formulas, i.e., prenex formulas whose quantifier free part is a conjunction of literals. 98 Prenex Fragment of Intuitionistic Logic * the Shelah fragment [8 fl 98 fl ; all ; (1)] (` c ) In intuitionistic logic we have that * [all ; all ; (1)] is decidable <ref> [35] </ref>. 7.6 OPEN CASES We conclude with the following two open problems regarding intuitionistic provability of closed prenex formulas. Recall that monadic SREU is SREU restricted to a signature with function symbols of arity 1. <p> The decidability of the following two fragments is open: ? [all ; all ; (!)] and (` i ) The fragment [all ; all ; (!)] (` i ) is decidable if and only if monadic SREU is decidable <ref> [35] </ref>. Let us write SREU 2 for monadic SREU with two unary function symbols. Then monadic SREU is decidable iff SREU 2 is decidable [32]. If SREU 2 is decidable then there hardly exists a simple proof of that. <p> Finally, using the undecidability result of SREU with two variables and the decidability result of SREU with one variable, combined with techniques developed in Degtyarev and Voronkov <ref> [35] </ref> and Voronkov [156], we got a new result in intuitionistic logic with equality: * A complete classification of the prenex fragment of intuitionistic logic with equality, in terms of the quantifier prefix: 8.2. Current Status of SREU 101 The 99-fragment is undecidable (see Theorem 7.2). <p> computational complexity bounds, can be reduced to monadic SREU [31]. * Monadic SREU is equivalent to a non-trivial extension of word equa tions [73]. 102 Conclusion * Monadic SREU is equivalent to the decidability problem of the prenex fragment of intuitionistic logic with equality with function symbols of arity 1 <ref> [35] </ref>. * In general SREU is undecidable [34]. Moreover, SREU is undecidable under the following restrictions: The left-hand sides of the rigid equations are ground [116].
Reference: 36. <author> A. Degtyarev and A. Voronkov. </author> <title> Equality elimination for the tableau method. </title> <editor> In J. Calmet and C. Limongelli, editors, </editor> <booktitle> Design and Implementation of Symbolic Computation Systems (DISCO'96), volume 1128 of Lecture Notes in Computer Science, </booktitle> <address> Karlsruhe, Germany, </address> <year> 1996. </year>
Reference-contexts: It is necessary to consider the so-called free variable versions of the tableau methods in order to avoid the huge level of non-determinism that arises when choosing the terms in the universal quantifier tableau expansion rules <ref> [36, 40, 47] </ref>. In the free variable based tableau methods, a tableau proof amounts to finding a substitution 3 that replaces all the variables in the tableau with ground terms such that all branches become inconsistent, which is tantamount to simultaneous unification.
Reference: 37. <author> A. Degtyarev and A. Voronkov. </author> <title> Simultaneous rigid E-unification is undecidable. </title> <editor> In H. Kleine Buning, editor, </editor> <booktitle> Computer Science Logic. 9th International Workshop, CSL'95, volume 1092 of Lecture Notes in Computer Science, </booktitle> <pages> pages 178-190, </pages> <address> Paderborn, Germany, </address> <month> September </month> <year> 1995, 1996. </year>
Reference-contexts: A similar technique was used already by Goldfarb in the proof of the undecidability of second-order unification [64], which is by reduction of Hilbert's tenth problem, and later, adopted from that proof, also in a proof of the undecidability of SREU by Degtyarev and Voronkov <ref> [37] </ref>, which is also by reduction of Hilbert's tenth problem. In this proof the key point is to explicitly represent the "history of a multiplication process". 3.2. <p> The problem was proved undecidable by Matiyasevich 70 years later [99]. As the third undecidability proof of SREU <ref> [37] </ref>, Degtyarev and Voronkov showed how to reduce Hilbert's tenth problem to SREU. The proof is quite short and the key argument [37, Lemma 6] lies in representing multiplication with a system of rigid equations. <p> The problem was proved undecidable by Matiyasevich 70 years later [99]. As the third undecidability proof of SREU [37], Degtyarev and Voronkov showed how to reduce Hilbert's tenth problem to SREU. The proof is quite short and the key argument <ref> [37, Lemma 6] </ref> lies in representing multiplication with a system of rigid equations. <p> In the case of logic without equality, all the above problems are decidable and reduce to unification. In the case of logic with equality, all the above problems are equivalent to SREU [30]. The undecidability of SREU <ref> [32, 34, 37, 38] </ref> thus implies that problems (1-7) are all undecidable. Note that SREU had several false decidability proofs [53, 56, 66] before it was proved undecidabile, and the problems (1-7) were believed to be decidable. The Herbrand m-Skeleton problem is the Herbrand Skeleton problem with fixed multiplicity m. <p> From the undecidability of SREU follows, for example, that the 9 fl -fragment of intuitionistic logic with equality is undecidable <ref> [37, 38] </ref>. By using the results in Chapter 3, we improve this result to the following. The 99-fragment of intuitionistic logic with equality is undecid able. <p> In particular, not much has been known about the prenex fragment (of intuitionistic logic). Many new decidability results about the prenex fragment have been obtained quite recently by Degtyarev and Voronkov <ref> [34, 35, 37, 38] </ref> and Voronkov [153, 154]. Some of these results are: 1. Decidability, and in particular PSPACE-completeness, of the prenex fragment of intuitionistic logic without equality [153, 154]. 2. Prenex fragment of intuitionistic logic with equality but without function symbols is PSPACE-complete [35]. <p> Decidability of this fragment was proved in Orevkov [111]. 3. Prenex fragment of intuitionistic logic with equality in the language with one unary function symbol is decidable [35]. 4. 9 fl -fragment of intuitionistic logic with equality is undecidable <ref> [34, 37, 38] </ref>. In many of the above results, the corresponding result has first been obtained for a fragment of SREU with similar restrictions. In particular, the last statement follows from the undecidability of SREU and the following property, originally used in Degtyarev and Voronkov [34, Theorem 4]. 7.3.
Reference: 38. <author> A. Degtyarev and A. Voronkov. </author> <title> The undecidability of simultaneous rigid E-unification. </title> <booktitle> Theoretical Computer Science, </booktitle> <address> 166(1-2):291-300, </address> <year> 1996. </year>
Reference-contexts: It follows that -unification is undecidable. A -unification problem is then reduced to SREU. This reduction is rather technical, and it does not really reveal the reasons why SREU is undecidable. Reduction of Second-Order Unification The second proof of the undecidability of SREU by Degtyarev and Voron-kov <ref> [33, 38] </ref>, and probably the most straightforward one, is by reducing second-order unification to SREU. The undecidability of second-order unification was proved by Goldfarb [64]. A second-order unification problem is the problem of deciding if a finite set S of second-order equations is unifiable. <p> Now, is a unifier of s t iff it is the case that if we replace w i in X by s i , for 1 i m, then we obtain t. The set S is reduced (roughly) to the following system of rigid equations <ref> [38, Theorem 1] </ref>. The first case is simply reduced to the (rigid) equation ` 8 t s. <p> This is actually just a reformulation of the original problem, and one readily proves that S has a unifier if and only if this system of rigid equations is solvable <ref> [38, Lemma 5] </ref>. Recently it was claimed that second-order unification is undecidabile already when restricted to terms such that all arguments of second-order variables are variable free [130]. 4 In the case of s above, this means that all the s i 's must be variable free. <p> In the case of logic without equality, all the above problems are decidable and reduce to unification. In the case of logic with equality, all the above problems are equivalent to SREU [30]. The undecidability of SREU <ref> [32, 34, 37, 38] </ref> thus implies that problems (1-7) are all undecidable. Note that SREU had several false decidability proofs [53, 56, 66] before it was proved undecidabile, and the problems (1-7) were believed to be decidable. The Herbrand m-Skeleton problem is the Herbrand Skeleton problem with fixed multiplicity m. <p> Then j= but 6j= ' 1 and 6j= ' 0 (the situation is exaclty the same as in the previous case). 2 4.4 FROM 1-SKELETON TO N -SKELETON PROBLEM The 1-Skeleton problem is undecidable. This follows from the undecidability of SREU by Degtyarev and Voronkov <ref> [34, 38] </ref>. We can formulate their result in the current setting as follows (cf [38, Theorem 1]). Theorem 4.2 (Degtyarev-Voronkov) The 1-Skeleton problem of guarded Horn formulas is undecidable. Under certain restrictions on the language and the structure of formulas, the 1-Skeleton problem becomes decidable. <p> This follows from the undecidability of SREU by Degtyarev and Voronkov [34, 38]. We can formulate their result in the current setting as follows (cf <ref> [38, Theorem 1] </ref>). Theorem 4.2 (Degtyarev-Voronkov) The 1-Skeleton problem of guarded Horn formulas is undecidable. Under certain restrictions on the language and the structure of formulas, the 1-Skeleton problem becomes decidable. <p> T (A): fi For a given signature , and some constant c in it, let us denote by S (x) the following rigid equation: 2 S (x) = (f f (c; : : : ; c) c j f 2 g ` 8 x c): The following lemma is elementary <ref> [38] </ref>. Lemma 6.7 For all , solves S (x) iff x 2 T . 2 Note that f (c; : : : ; c) stands for f when f is a constant. 6.4. <p> From the undecidability of SREU follows, for example, that the 9 fl -fragment of intuitionistic logic with equality is undecidable <ref> [37, 38] </ref>. By using the results in Chapter 3, we improve this result to the following. The 99-fragment of intuitionistic logic with equality is undecid able. <p> In particular, not much has been known about the prenex fragment (of intuitionistic logic). Many new decidability results about the prenex fragment have been obtained quite recently by Degtyarev and Voronkov <ref> [34, 35, 37, 38] </ref> and Voronkov [153, 154]. Some of these results are: 1. Decidability, and in particular PSPACE-completeness, of the prenex fragment of intuitionistic logic without equality [153, 154]. 2. Prenex fragment of intuitionistic logic with equality but without function symbols is PSPACE-complete [35]. <p> Decidability of this fragment was proved in Orevkov [111]. 3. Prenex fragment of intuitionistic logic with equality in the language with one unary function symbol is decidable [35]. 4. 9 fl -fragment of intuitionistic logic with equality is undecidable <ref> [34, 37, 38] </ref>. In many of the above results, the corresponding result has first been obtained for a fragment of SREU with similar restrictions. In particular, the last statement follows from the undecidability of SREU and the following property, originally used in Degtyarev and Voronkov [34, Theorem 4]. 7.3. <p> Currently there are no reasonable semi-decision procedures for SREU, except for ones based on straightforward enumeration [115]. Other Applications Due to the simple reduction from second-order unification to SREU <ref> [33, 38] </ref>, a reasonable semi-decision procedure for SREU might also give new insights into how to deal with the former problem. If monadic SREU is decidable then some algorithm for it may shed some light on the complexity of the word equation problem.
Reference: 39. <author> A. Degtyarev and A. Voronkov. </author> <title> What you always wanted to know about rigid E-unification. </title> <editor> In J.J. Alferes, L. Moniz Pereira, and E. Or-lowska, editors, </editor> <booktitle> Logics in Artificial Intelligence (JELIA'96), volume 1126 of Lecture Notes in Artificial Intelligence, </booktitle> <address> Evora, Portugal, </address> <year> 1996. </year>
Reference-contexts: Degtyarev and Voronkov <ref> [41, 39] </ref> present a calculus BPE for solving nonsimultaneous rigid E-unification that is based on "rigid" basic superposition and is an adaption of basic superposition of Bachmair [3], Nieuwenhuis and Rubio [106], to "rigid" variables. <p> Their formalization of rigid basic superposition is close to the one in Nieuwenhuis and Rubio [107]. The calculus BPE is incomplete for solving rigid E-unification in general, but can be used in tableau-based methods to get a complete calculus for classical logic with equality <ref> [41, 39] </ref>. (See Schumann [131] for a survey of implementations of tableau-based theorem provers.) It should be investigated if a calculus similar to BPE can be designed for SREU. In Intuitionistic Logic In intuitionistic logic with equality, SREU is unavoidable [155, 156]; we address this fact briefly in Chapter 7.
Reference: 40. <author> A. Degtyarev and A. Voronkov. </author> <title> Equality reasoning in sequent-based calculi: a tutorial. </title> <type> UPMAIL Technical Report, </type> <institution> Uppsala University, Computing Science Department, </institution> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: It is necessary to consider the so-called free variable versions of the tableau methods in order to avoid the huge level of non-determinism that arises when choosing the terms in the universal quantifier tableau expansion rules <ref> [36, 40, 47] </ref>. In the free variable based tableau methods, a tableau proof amounts to finding a substitution 3 that replaces all the variables in the tableau with ground terms such that all branches become inconsistent, which is tantamount to simultaneous unification. <p> The first general method to handle equality in resolution based methods is based on paramodulation [123]. 1.2. Simultaneous Rigid E-Unification 5 Although there have been other approaches, the main line of research in resolution theorem proving with equality has been dominated by various improvements of paramodulation <ref> [40] </ref>. The other category of methods, that we considered above, is based on semantic tableau or sequent calculus based proof systems, originally developed by Beth [9] and further studied by Smullyan [137]. Independently, similar methods were introduced by Kanger [83]. We refer to such methods under the name of tableau. <p> The close correspondence between tableau and sequent calculus systems is described in Smullyan [137]. For a comprehensive treatment of equality reasoning in automated theorem proving in general see the tutorial by Degtyarev and Voronkov <ref> [40] </ref>. <p> Tammet [142] has implemented a resolution based theorem prover for intuitionistic logic and has plans to include equality there. A non-standard formalization of equality is used in Sahlin, Franzen and Haridi [125]. It is noted in Degtyarev and Voronkov <ref> [40] </ref> that the same situation arises in other non-classical logics with equality, such as certain modal logics with equality. It is clear that, in order to handle equality in intuitionistic logic and other non-classical logics with a semantics based on Kripke semantics, it is necessary to handle SREU.
Reference: 41. <author> A. Degtyarev and A. Voronkov. </author> <title> What you always wanted to know about rigid E-unification. </title> <type> UPMAIL Technical Report 143, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> April </month> <year> 1997. </year> <month> 110 </month>
Reference-contexts: Degtyarev and Voronkov <ref> [41, 39] </ref> present a calculus BPE for solving nonsimultaneous rigid E-unification that is based on "rigid" basic superposition and is an adaption of basic superposition of Bachmair [3], Nieuwenhuis and Rubio [106], to "rigid" variables. <p> Their formalization of rigid basic superposition is close to the one in Nieuwenhuis and Rubio [107]. The calculus BPE is incomplete for solving rigid E-unification in general, but can be used in tableau-based methods to get a complete calculus for classical logic with equality <ref> [41, 39] </ref>. (See Schumann [131] for a survey of implementations of tableau-based theorem provers.) It should be investigated if a calculus similar to BPE can be designed for SREU. In Intuitionistic Logic In intuitionistic logic with equality, SREU is unavoidable [155, 156]; we address this fact briefly in Chapter 7.
Reference: 42. <author> N. Dershowitz and J.-P. Jouannaud. </author> <title> Rewrite systems. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume B: Formal Methods and Semantics, chapter 6, </booktitle> <pages> pages 243-309. </pages> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: The problem of solvability of systems of rigid equations is called simultaneous rigid E-unification or SREU for short. Solvability of a single rigid equation is called rigid E-unification. 2.3 TERM REWRITING In some cases it is convenient to use ground term rewriting techniques at metalevel <ref> [42, 78] </ref> when reasoning about equations. Let ! be a binary relation on terms. We define first some well-known properties of !. The 2.4. Term Rewriting 13 reflexive and transitive closure of ! is denoted by fl !. <p> Moreover, if we want to decide whether an equation s t logically follows from a set E of equations, and E is a convergent rewrite system, then it is enough to see if s# E = t# E (cf <ref> [42, Section 2.4] </ref>), i.e., E j= s t , s# E = t# E : To construct a canonical rewrite system from a given set E of equations, while preserving the set of logical consequences of E, is the main motivation behind the completion procedure [86].
Reference: 43. <author> J. Doner. </author> <title> Tree acceptors and some of their applications. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 4 </volume> <pages> 406-451, </pages> <year> 1970. </year>
Reference-contexts: Tree automata were introduced, independently, in Doner <ref> [43] </ref> and Thatcher and Wright [143]. The main motivation was to obtain decidability results for the weak monadic second-order logic of the binary tree. Here we adopt the following definition of tree automata, based on rewrite rules [20, 22]. <p> Two tree automata are equivalent if they recognize the same set of terms. It is well-known that the nondeterministic and the deterministic versions of TAs have the same expressive power <ref> [43, 60, 143] </ref>, i.e., for any TA there is an equivalent DTA. <p> On the other hand, we know that the 1-Skeleton problem of Horn clauses is decidable, this is just rigid E-unification. See also Chapter 7 (Section 7.5). Chapter 5 Finite Tree Automata 5.1 INTRODUCTION Finite tree automata <ref> [43, 143] </ref> is a natural generalization of classical finite automata to automata that accept or recognize trees of symbols, not just strings. <p> Recall that two tree automata are equivalent if they recognize the same forest. It is well-known that the nondeterministic and the deterministic versions of TAs have the same expressive power <ref> [43, 60, 143] </ref>, i.e., for any TA there is an equivalent DTA. Clearly there is no essential difference between a TA and a TTA. However, the class of forests recognized by DTTAs are properly contained in the class of all recognizable forests. <p> Furthermore, a tree automaton that recognizes this set is obtained effectively from S. Proof. Immediate by Brainerd's theorem and Lemma 6.3 fi By using the fact that the class of recognizable sets is (effectively) closed under finite intersectons and that the non-emptiness problem of tree automata is decidable <ref> [43, 143] </ref>, the decidability result of SREU with one variable follows from Corollary 6.1. The decidability is proved formally below, with a precise computational complexity bound. 80 SREU with One Variable 6.4 COMPUTATIONAL COMPLEXITY In the previous section we showed that SREU with one variable is decidable.
Reference: 44. <author> C. Dwork, P.C. Kanellakis, and J.C. Mitchell. </author> <title> On the sequential nature of unification. </title> <journal> Journal of Logic Programming, </journal> <volume> 1 </volume> <pages> 35-50, </pages> <year> 1984. </year>
Reference-contexts: Simultaneous unification reduces to unification. Unification can be solved in almost linear time [97] and even in linear time [114] if more complex data structures are used. It is also known that unification is P-complete <ref> [44, 161] </ref>. An Example Let us see how SREU can be used in a rigid variable method, but instead of using any particular method let us consider the principal procedure.
Reference: 45. <author> E. Eder. </author> <title> A comparison of the resolution calculus and the connection method, and a new calculus generalizing both methods. </title> <editor> In E. Borger, G. Jager, H. Kleine Buning, and M.M. Richter, editors, </editor> <booktitle> CSL'88 (Proc. 2nd Workshop on Computer Science Logic), volume 385 of Lecture Notes in Computer Science, </booktitle> <pages> pages 80-98. </pages> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: The close correspondence between tableau and sequent calculus systems is described in Smullyan [137]. For a comprehensive treatment of equality reasoning in automated theorem proving in general see the tutorial by Degtyarev and Voronkov [40]. Futher comparisons can be found, e.g., in Eder <ref> [45, 46] </ref>, Bibel and Eder [11] and Ophelders and de Swart [108]. 1.2 SIMULTANEOUS RIGID E-UNIFICATION Simultaneous Rigid E-Unification was introduced by Gallier, Raatz and Snyder [57], who showed that the method of matings by Andrews [1] can be extended to logic with equality by incorporating simultaneous rigid E-unification.
Reference: 46. <author> E. Eder. </author> <title> Consolution and its relation with resolution. </title> <booktitle> In Proc. International Joint Conference on Artificial Intelligence (IJCAI), </booktitle> <pages> pages 132-136, </pages> <year> 1991. </year>
Reference-contexts: The close correspondence between tableau and sequent calculus systems is described in Smullyan [137]. For a comprehensive treatment of equality reasoning in automated theorem proving in general see the tutorial by Degtyarev and Voronkov [40]. Futher comparisons can be found, e.g., in Eder <ref> [45, 46] </ref>, Bibel and Eder [11] and Ophelders and de Swart [108]. 1.2 SIMULTANEOUS RIGID E-UNIFICATION Simultaneous Rigid E-Unification was introduced by Gallier, Raatz and Snyder [57], who showed that the method of matings by Andrews [1] can be extended to logic with equality by incorporating simultaneous rigid E-unification.
Reference: 47. <author> M. </author> <title> Fitting. First Order Logic and Automated Theorem Proving. </title> <publisher> Springer Verlag, </publisher> <address> New York, </address> <note> second edition, </note> <year> 1996. </year>
Reference-contexts: It is necessary to consider the so-called free variable versions of the tableau methods in order to avoid the huge level of non-determinism that arises when choosing the terms in the universal quantifier tableau expansion rules <ref> [36, 40, 47] </ref>. In the free variable based tableau methods, a tableau proof amounts to finding a substitution 3 that replaces all the variables in the tableau with ground terms such that all branches become inconsistent, which is tantamount to simultaneous unification. <p> P (1)) ^ 8x:P (x): 3 A mapping from variables to terms. 4 Introduction i (P (0) _ P (1)) ^ 8x:P (x) ii P (0) _ P (1) iii 8x:P (x) iv :P (x 0 ) v :P (x 1 ) vi P (0) P (1) system of Fitting <ref> [47] </ref>. Lines ii and iii result from line i. Lines iv and v result from line iii by two applications of the fl-rule. Line vi results from line ii. <p> Important pioneering work in this connection was done by Kanger [84]. Both categories are addressed and compared by several authors. For a general comparison and an introduction to tableau and resolution systems for arbitrary formulas, see Fitting <ref> [47] </ref>. The close correspondence between tableau and sequent calculus systems is described in Smullyan [137]. For a comprehensive treatment of equality reasoning in automated theorem proving in general see the tutorial by Degtyarev and Voronkov [40].
Reference: 48. <author> T. Fruhwirth, E. Shapiro, M. Vardi, and E. Yardeni. </author> <title> Logic programs as types of logic programs. </title> <booktitle> In Proc. 6th Symposium on Logics in Computer Science (LICS), </booktitle> <pages> pages 300-309, </pages> <year> 1991. </year>
Reference-contexts: In particular, inequiva-lence [127, 132] and intersection non-emptiness <ref> [29, 48, 133] </ref> are examples of such decision problems. The intersection non-emptiness problem of finite tree automata arises naturally in the context of type inference in logic programming [48]. The same decision problem restricted to top-down deterministic finite tree automata arises also in sort inference in typed functional programming [133]. <p> In particular, inequiva-lence [127, 132] and intersection non-emptiness [29, 48, 133] are examples of such decision problems. The intersection non-emptiness problem of finite tree automata arises naturally in the context of type inference in logic programming <ref> [48] </ref>. The same decision problem restricted to top-down deterministic finite tree automata arises also in sort inference in typed functional programming [133]. Our main motivation for studying this problem is its close connection with SREU. <p> Although the complexity of this problem has been used in the above mentioned contexts and also in the context of a "de-cidability" proof of SREU [66], its proof is either merely remarked upon <ref> [48] </ref>, or only briefly outlined and incomplete [66, 133]. The proof of its complexity is however highly nontrivial and in order to trust it we had to prove it ourselves. <p> For more recent developments regarding complexity of word problems see Mayer and Stockmeyer [100]. 5.5 INTERSECTION NON-EMPTINESS EXPTIME-hardness of the intersection non-emptiness problem of finite tree automata has been observed by other researchers and used in various contexts. It was first remarked by Fruhwirth et al <ref> [48] </ref> and used in the context of type inference of logic programs. Goubault gives an incomplete proof in the case of DTAs in the context of a faulty proof of EXPTIME-completeness of SREU [66]. <p> Non-emptiness of finite tree automata is closely related to the two well-known P-complete problems: alternating graph accessibility [80] and gen-erability [82, 89]. It follows by (5.2) that inequivalence of DTAs is also P-complete. EXPTIME-hardness of the intersection non-emptiness problem of finite tree automata has been observed by other researchers <ref> [48, 66, 133] </ref>. In particular, Seidl outlines a proof in the case of DTTAs [133]. He has also proved that inequivalence of TAs is EXPTIME-complete [132, Theorem 2.1] and it follows also from a statement by Seidl that when restricted to DTTAs, inequivalence is P-complete [132, Theorem 4.3].
Reference: 49. <author> M. Furer. </author> <title> The complexity of the inequivalence problem for regular expressions with intersection. </title> <booktitle> In Proc. 7th International Colloquium on Autamata, Languages, and Programming (ICALP), volume 85 of Lecture Notes in Computer Science, </booktitle> <pages> pages 234-245, </pages> <address> New York, 1980. </address> <publisher> Springer Verlag. </publisher>
Reference-contexts: Succinctness 73 5.6 SUCCINCTNESS The use of intersection can shorten a regular expression by an exponential amount. This fact explains why the inequivalence problem for regular expressions becomes EXPSPACE-complete when intersection is added <ref> [49, 79] </ref>, whereas it is PSPACE-complete [102] in the usual case. (A similar effect is obtained with interleaving [100].) Above, we are just witnessing a similar effect on TAs.
Reference: 50. <author> J. Gallier. </author> <title> Unification procedures in automated deduction methods based on matings: a survey. </title> <editor> In M. Nivat and A. Podelski, editors, </editor> <booktitle> Tree Automata and Languages, </booktitle> <pages> pages 439-485. </pages> <publisher> Elsevier Science, </publisher> <year> 1992. </year>
Reference-contexts: The groundness condition of the result is for technical reasons only, it is not part of the standard definition. 6 Introduction equations. This problem is called simultaneous rigid E-unification or SREU for short. There are several papers <ref> [50, 52, 53, 56, 58] </ref> that explain in detail how SREU arises in the mating method. SREU versus E-Unification and Unification The first decidability and NP-completeness proof of rigid E-unification was given by Gallier, Narendran, Plaisted and Snyder [52, 56]. <p> Before that result, there were several faulty statements about the decidability of SREU, e.g., that SREU is NP-complete <ref> [50, 52, 56] </ref>, EXPTIME-complete [66] and even NEXPTIME-complete [65]. The undecidability of SREU was quite unexpected and implied the undecidability of several other fundamental decision problems in automated theorem proving [30]. Simultaneous unification reduces to unification. <p> Voronkov investigates the complexity of various problems related to such methods [157]. In particular, he considers the rigid-variable methods in the context of a fragment of classical logic for which validity is decidable, and proves that, for this fragment, a rigid-variable method (by Gallier et al <ref> [52, 53, 50] </ref>) introduces (by using Plaisteds result [116]) an undecidable sub-problem at Step II. He notes that the result of Voda and Komara [151] simply shows the inadequacy of the formulation of the Herbrand Skeleton problem and suggests the notion of strategy for multiplicity.
Reference: 51. <author> J. Gallier, P. Narendran, D. Plaisted, S. Raatz, and W. Snyder. </author> <title> An algorithm for finding canonical sets of ground rewrite rules in polynomial time. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 40(1) </volume> <pages> 1-16, </pages> <year> 1993. </year>
Reference-contexts: It is well-known that for any set of ground equations there exists an equivalent canonical rewrite system [92]. Moreover, such a system can be constructed in O (n 3 ) time <ref> [51, 55] </ref> or even in O (n log n) time [138].
Reference: 52. <author> J. Gallier, P. Narendran, D. Plaisted, and W. Snyder. </author> <title> Rigid E-unification: NP-completeness and applications to equational matings. </title> <journal> Information and Computation, </journal> 87(1/2):129-195, 1990. <volume> 111 </volume>
Reference-contexts: The groundness condition of the result is for technical reasons only, it is not part of the standard definition. 6 Introduction equations. This problem is called simultaneous rigid E-unification or SREU for short. There are several papers <ref> [50, 52, 53, 56, 58] </ref> that explain in detail how SREU arises in the mating method. SREU versus E-Unification and Unification The first decidability and NP-completeness proof of rigid E-unification was given by Gallier, Narendran, Plaisted and Snyder [52, 56]. <p> There are several papers [50, 52, 53, 56, 58] that explain in detail how SREU arises in the mating method. SREU versus E-Unification and Unification The first decidability and NP-completeness proof of rigid E-unification was given by Gallier, Narendran, Plaisted and Snyder <ref> [52, 56] </ref>. Since then, the decidability (and NP-completeness) of rigid E-unification has been reestablished by other authors, e.g., Plaisted [116], de Kogel [27, 28] and Choi [19]. In contrast, the problem of E-unification is undecidable. <p> Before that result, there were several faulty statements about the decidability of SREU, e.g., that SREU is NP-complete <ref> [50, 52, 56] </ref>, EXPTIME-complete [66] and even NEXPTIME-complete [65]. The undecidability of SREU was quite unexpected and implied the undecidability of several other fundamental decision problems in automated theorem proving [30]. Simultaneous unification reduces to unification. <p> Chapter 3 Undecidability of SREU 3.1 INTRODUCTION The first undecidability proof of SREU was given by Degtyarev and Voron-kov [34]. Before that result, there were several faulty proofs of its decidabil-ity, e.g. <ref> [52, 66] </ref>. In general, this quite unexpected undecidability result had a serious impact on the automated theorem proving community, as several effectively equivalent fundamental decision problems in automated reasoning in classical logic with equality turned out to be undecidable [30]. We return to this in the next chapter. <p> Voronkov investigates the complexity of various problems related to such methods [157]. In particular, he considers the rigid-variable methods in the context of a fragment of classical logic for which validity is decidable, and proves that, for this fragment, a rigid-variable method (by Gallier et al <ref> [52, 53, 50] </ref>) introduces (by using Plaisteds result [116]) an undecidable sub-problem at Step II. He notes that the result of Voda and Komara [151] simply shows the inadequacy of the formulation of the Herbrand Skeleton problem and suggests the notion of strategy for multiplicity. <p> Rigid E-unification is studied also in Choi [19]. We start with the solved cases: * Rigid E-unification with ground left-hand side is NP-complete [91]. Rigid E-unification in general is NP-complete and there exist finite complete sets of unifiers <ref> [52, 56] </ref>. * Rigid E-unification with one variable is P-complete [29] (see Theorem 6.2). <p> they propose. (It may be the case that if a formula has an m-corroborator then their procedure eventually finds an n-corroborator for some n &gt; m, although it fails to find an m-corroborator.) There are a number of publications on the use of SREU in automated reasoning, e.g., the papers <ref> [4, 5, 6, 7, 52, 53, 56, 58, 66, 115] </ref>, some of the results are based on the conjecture that SREU is decidable.
Reference: 53. <author> J. Gallier, P. Narendran, S. Raatz, and W. Snyder. </author> <title> Theorem proving using equational matings and rigid E-unification. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 39(2) </volume> <pages> 377-429, </pages> <year> 1992. </year>
Reference-contexts: The groundness condition of the result is for technical reasons only, it is not part of the standard definition. 6 Introduction equations. This problem is called simultaneous rigid E-unification or SREU for short. There are several papers <ref> [50, 52, 53, 56, 58] </ref> that explain in detail how SREU arises in the mating method. SREU versus E-Unification and Unification The first decidability and NP-completeness proof of rigid E-unification was given by Gallier, Narendran, Plaisted and Snyder [52, 56]. <p> In the case of logic with equality, all the above problems are equivalent to SREU [30]. The undecidability of SREU [32, 34, 37, 38] thus implies that problems (1-7) are all undecidable. Note that SREU had several false decidability proofs <ref> [53, 56, 66] </ref> before it was proved undecidabile, and the problems (1-7) were believed to be decidable. The Herbrand m-Skeleton problem is the Herbrand Skeleton problem with fixed multiplicity m. Clearly, SREU is a special case of the 1-Skeleton problem. <p> Voronkov investigates the complexity of various problems related to such methods [157]. In particular, he considers the rigid-variable methods in the context of a fragment of classical logic for which validity is decidable, and proves that, for this fragment, a rigid-variable method (by Gallier et al <ref> [52, 53, 50] </ref>) introduces (by using Plaisteds result [116]) an undecidable sub-problem at Step II. He notes that the result of Voda and Komara [151] simply shows the inadequacy of the formulation of the Herbrand Skeleton problem and suggests the notion of strategy for multiplicity. <p> they propose. (It may be the case that if a formula has an m-corroborator then their procedure eventually finds an n-corroborator for some n &gt; m, although it fails to find an m-corroborator.) There are a number of publications on the use of SREU in automated reasoning, e.g., the papers <ref> [4, 5, 6, 7, 52, 53, 56, 58, 66, 115] </ref>, some of the results are based on the conjecture that SREU is decidable.
Reference: 54. <author> J.H. Gallier and R.V. </author> <title> Book. Reductions in tree replacement systems. </title> <journal> Theoretical Computer Science, </journal> <volume> 37 </volume> <pages> 123-150, </pages> <year> 1985. </year>
Reference-contexts: Furthermore, a tree automaton that recognizes this set can be obtained effectively from R and T . Recently, corresponding connections between recognizability (with respect to pushdown tree automata [129]) and nonground term rewriting systems have been studied by several authors <ref> [20, 21, 54, 62, 126] </ref>. For a survey of connections between rewriting and tree automata see Dauchet [22]. We obtain the following corollary. Corollary 6.1 Let S (x) be a rigid equation with one variable x that is not redundant.
Reference: 55. <author> J.H. Gallier, P. Narendran, D. Plaisted, S. Raatz, and W. Snyder. </author> <title> Finding canonical rewrite systems equivalent to a finite set of ground equations in polynomial time. </title> <booktitle> In CADE'88 (9th Int. Conf. on Automated Deduction), Lecture Notes in Computer Science, </booktitle> <address> Argonne, Illinois, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: It is well-known that for any set of ground equations there exists an equivalent canonical rewrite system [92]. Moreover, such a system can be constructed in O (n 3 ) time <ref> [51, 55] </ref> or even in O (n log n) time [138].
Reference: 56. <author> J.H. Gallier, P. Narendran, D. Plaisted, and W. Snyder. </author> <title> Rigid E-unification is NP-complete. </title> <booktitle> In Proc. IEEE Conference on Logic in Computer Science (LICS), </booktitle> <pages> pages 338-346. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1988. </year>
Reference-contexts: The groundness condition of the result is for technical reasons only, it is not part of the standard definition. 6 Introduction equations. This problem is called simultaneous rigid E-unification or SREU for short. There are several papers <ref> [50, 52, 53, 56, 58] </ref> that explain in detail how SREU arises in the mating method. SREU versus E-Unification and Unification The first decidability and NP-completeness proof of rigid E-unification was given by Gallier, Narendran, Plaisted and Snyder [52, 56]. <p> There are several papers [50, 52, 53, 56, 58] that explain in detail how SREU arises in the mating method. SREU versus E-Unification and Unification The first decidability and NP-completeness proof of rigid E-unification was given by Gallier, Narendran, Plaisted and Snyder <ref> [52, 56] </ref>. Since then, the decidability (and NP-completeness) of rigid E-unification has been reestablished by other authors, e.g., Plaisted [116], de Kogel [27, 28] and Choi [19]. In contrast, the problem of E-unification is undecidable. <p> Before that result, there were several faulty statements about the decidability of SREU, e.g., that SREU is NP-complete <ref> [50, 52, 56] </ref>, EXPTIME-complete [66] and even NEXPTIME-complete [65]. The undecidability of SREU was quite unexpected and implied the undecidability of several other fundamental decision problems in automated theorem proving [30]. Simultaneous unification reduces to unification. <p> In the case of logic with equality, all the above problems are equivalent to SREU [30]. The undecidability of SREU [32, 34, 37, 38] thus implies that problems (1-7) are all undecidable. Note that SREU had several false decidability proofs <ref> [53, 56, 66] </ref> before it was proved undecidabile, and the problems (1-7) were believed to be decidable. The Herbrand m-Skeleton problem is the Herbrand Skeleton problem with fixed multiplicity m. Clearly, SREU is a special case of the 1-Skeleton problem. <p> In fact, such a skeleton is illustrated in Figure 7.3. 8.2 CURRENT STATUS OF SREU Let us briefly summarize the current status of SREU and the results that have been proven about it. The first decidability proof of rigid E-unification is given in Gallier, Narendran, Plaisted and Snyder <ref> [56] </ref>. Recently a simpler proof, without computational complexity considerations, has been given by de Kogel [27, 28]. Rigid E-unification is studied also in Choi [19]. We start with the solved cases: * Rigid E-unification with ground left-hand side is NP-complete [91]. <p> Rigid E-unification is studied also in Choi [19]. We start with the solved cases: * Rigid E-unification with ground left-hand side is NP-complete [91]. Rigid E-unification in general is NP-complete and there exist finite complete sets of unifiers <ref> [52, 56] </ref>. * Rigid E-unification with one variable is P-complete [29] (see Theorem 6.2). <p> they propose. (It may be the case that if a formula has an m-corroborator then their procedure eventually finds an n-corroborator for some n &gt; m, although it fails to find an m-corroborator.) There are a number of publications on the use of SREU in automated reasoning, e.g., the papers <ref> [4, 5, 6, 7, 52, 53, 56, 58, 66, 115] </ref>, some of the results are based on the conjecture that SREU is decidable.
Reference: 57. <author> J.H. Gallier, S. Raatz, and W. Snyder. </author> <title> Theorem proving using rigid E-unification: Equational matings. </title> <booktitle> In Proc. IEEE Conference on Logic in Computer Science (LICS), </booktitle> <pages> pages 338-346. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1987. </year>
Reference-contexts: Futher comparisons can be found, e.g., in Eder [45, 46], Bibel and Eder [11] and Ophelders and de Swart [108]. 1.2 SIMULTANEOUS RIGID E-UNIFICATION Simultaneous Rigid E-Unification was introduced by Gallier, Raatz and Snyder <ref> [57] </ref>, who showed that the method of matings by Andrews [1] can be extended to logic with equality by incorporating simultaneous rigid E-unification. Considering a free variable tableau method, the key observation is the following. <p> On the other hand, we know that intuitionistic provability is decidable for such implications, e.g., by Lemma 7.1 and the decidability of rigid E-unification <ref> [57] </ref>. As an exception to the general rule that intuitionistic fragments of prenex formulas seem to be "easier" than the corresponding classical fragments, we have the following case. <p> In general of course, SREU is undecidable and thus does not have a decision procedure. In Classical Logic The original refutation procedure for classical logic with equality using SREU, given in Gallier et al <ref> [57] </ref>, is based on the assumption that solutions to a system of rigid equations can be found by combining minimal solutions for the individual rigid equations, which cannot work in general.
Reference: 58. <author> J.H. Gallier, S. Raatz, and W. Snyder. </author> <title> Rigid E-unification and its applications to equational matings. </title> <editor> In H. At Kaci and M. Nivat, editors, </editor> <booktitle> Resolution of Equations in Algebraic Structures, </booktitle> <volume> volume 1, </volume> <pages> pages 151-216. </pages> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: The groundness condition of the result is for technical reasons only, it is not part of the standard definition. 6 Introduction equations. This problem is called simultaneous rigid E-unification or SREU for short. There are several papers <ref> [50, 52, 53, 56, 58] </ref> that explain in detail how SREU arises in the mating method. SREU versus E-Unification and Unification The first decidability and NP-completeness proof of rigid E-unification was given by Gallier, Narendran, Plaisted and Snyder [52, 56]. <p> they propose. (It may be the case that if a formula has an m-corroborator then their procedure eventually finds an n-corroborator for some n &gt; m, although it fails to find an m-corroborator.) There are a number of publications on the use of SREU in automated reasoning, e.g., the papers <ref> [4, 5, 6, 7, 52, 53, 56, 58, 66, 115] </ref>, some of the results are based on the conjecture that SREU is decidable.
Reference: 59. <author> H. Galperin and A. Wigderson. </author> <title> Succinct representations of graphs. </title> <journal> Information and Control, </journal> <volume> 56 </volume> <pages> 183-198, </pages> <year> 1983. </year>
Reference-contexts: that if a decision problem for (deterministic) finite automata is complete for a certain space complexity then the same decision problem with (deterministic) finite tree automata is complete for the corresponding deterministic time 4 The standard notion of succinctness in the case of graphs arises from practical considerations in VLSI <ref> [59] </ref>.
Reference: 60. <author> F. Gecseg and M. Steinby. </author> <title> Tree Automata. </title> <address> Akademiai Kiodo, Bu-dapest, </address> <year> 1984. </year>
Reference-contexts: Two tree automata are equivalent if they recognize the same set of terms. It is well-known that the nondeterministic and the deterministic versions of TAs have the same expressive power <ref> [43, 60, 143] </ref>, i.e., for any TA there is an equivalent DTA. <p> Before we prove the theorem we state the following simple lemma. This lemma follows from the wellknown fact that all regular sets of strings are recognizable (cf <ref> [60] </ref>), assuming an appropriate representation of strings. 1 For any string v, we write v r for v in reverse and for a set of strings V we let V r = f v r j v 2 V g. <p> Recall that two tree automata are equivalent if they recognize the same forest. It is well-known that the nondeterministic and the deterministic versions of TAs have the same expressive power <ref> [43, 60, 143] </ref>, i.e., for any TA there is an equivalent DTA. Clearly there is no essential difference between a TA and a TTA. However, the class of forests recognized by DTTAs are properly contained in the class of all recognizable forests. <p> However, the class of forests recognized by DTTAs are properly contained in the class of all recognizable forests. A simple example of this is the forest ff (a; b); f (b; a)g that is clearly recognizable but not by any DTTA <ref> [60, Example 2.11] </ref>. We say that a TA is total if every term over its input alphabet reduces to some state. Every TA can trivially be extended (by adding new rules and a new dummy state) to an equivalent total TA. <p> This is actually the definition of a DTA used by Gecseg and Steinby <ref> [60] </ref>. We note that the study of various forms of recognizability is a research area by itself [21, 103]. Alternation and Computational Complexity Alternation was introduced by Chandra, Kozen and Stockmeyer [17] as a generalization of nondeterminism. <p> of all problems that can be solved by a polynomial space ATM and a logarithmic space ATM, respectively. 5.3 BASIC DECISION PROBLEMS All the basic decision problems of finite tree automata, like the non-emptiness problem, the inequivalence problem (or the more general inclusion problem) are decidable (see Gecseg and Steinby <ref> [60] </ref>). The proofs are fairly easy by first transforming a TA into a DTA by a powerset construction and then using a "pumping property" for DTAs. It is also easy to show that recognizable sets of terms are closed under Boolean operations. <p> It is clear that, by using (5.2), inequivalence of DTAs reduces (in logarithmic space) to non-emptiness <ref> [60] </ref>. For DFAs this was already shown by Moore [105]. <p> For each S i construct a DTA A i in polynomial time, like in Lemma 6.5. Let A be the DTA that recognizes T n For example, A can be the direct product of f A i j 1 i n g (Gecseg and Steinby <ref> [60] </ref>). It is straightforward to construct A in time that is proportional to the product of the sizes of the A i 's. Hence A is obtained in polynomial time (because n is fixed) and T (A) is non-empty iff S (x) is solvable.
Reference: 61. <author> G. </author> <title> Gentzen. Investigation into logical deduction. In M.E. </title> <editor> Szabo, editor, </editor> <booktitle> The Collected Papers of Gerhard Gentzen, </booktitle> <pages> pages 68-131. </pages> <publisher> North-Holland, </publisher> <year> 1969. </year>
Reference-contexts: Independently, similar methods were introduced by Kanger [83]. We refer to such methods under the name of tableau. Tableau methods are to a large extent based on Gentzen's work <ref> [61] </ref>. The matrix characterization of provability (where free variables were used for the first time) was introduced by Prawitz [118, 119] for formulas in conjunctive normal form and was later generalized to arbitrary formulas, independently, by Andrews [1] and Bibel [10]. Related ideas appear already in Quine [120].
Reference: 62. <author> R. Gilleron. </author> <title> Decision problems for term rewriting systems and recognizable tree languages. </title> <booktitle> In 8th Annual Symposium on Theoretical Aspects of Computer Science (STACS'91), volume 480 of Lecture Notes in Computer Science, </booktitle> <pages> pages 148-159, </pages> <year> 1991. </year>
Reference-contexts: Furthermore, a tree automaton that recognizes this set can be obtained effectively from R and T . Recently, corresponding connections between recognizability (with respect to pushdown tree automata [129]) and nonground term rewriting systems have been studied by several authors <ref> [20, 21, 54, 62, 126] </ref>. For a survey of connections between rewriting and tree automata see Dauchet [22]. We obtain the following corollary. Corollary 6.1 Let S (x) be a rigid equation with one variable x that is not redundant. <p> Answers to such questions might be found by studying the relationships between SREU and automata theoretic extensions of tree automata, such as tree pushdown automata, and the decision problems of the latter <ref> [20, 62, 126, 129] </ref>.
Reference: 63. <author> K. </author> <title> Godel. </title> <booktitle> Collected Works, </booktitle> <volume> Vol I: </volume> <pages> Publications 1929-1936, pages 144-195. </pages> <publisher> Oxford University Press, </publisher> <year> 1986. </year>
Reference-contexts: Godel's Incompleteness Theorem <ref> [63] </ref> was an important breakthrough in logic that implied the undecidability of the classical decision problem in general.
Reference: 64. <author> W.D. Goldfarb. </author> <title> The undecidability of the second-order unification problem. </title> <journal> Theoretical Computer Science, </journal> <volume> 13 </volume> <pages> 225-230, </pages> <year> 1981. </year> <month> 112 </month>
Reference-contexts: A similar technique was used already by Goldfarb in the proof of the undecidability of second-order unification <ref> [64] </ref>, which is by reduction of Hilbert's tenth problem, and later, adopted from that proof, also in a proof of the undecidability of SREU by Degtyarev and Voronkov [37], which is also by reduction of Hilbert's tenth problem. <p> Reduction of Second-Order Unification The second proof of the undecidability of SREU by Degtyarev and Voron-kov [33, 38], and probably the most straightforward one, is by reducing second-order unification to SREU. The undecidability of second-order unification was proved by Goldfarb <ref> [64] </ref>. A second-order unification problem is the problem of deciding if a finite set S of second-order equations is unifiable. A second-order equation is an expression t s where t and s are terms with possibly some (second-order) variables in place of function symbols. <p> These conditions can be expressed by a system of rigid equations with two lists of pairs (in the same spirit as shifted pairing). It follows that x = kl. Goldfarb uses the same idea in his proof of the undecidability of second-order unification <ref> [64] </ref>. Reduction of PCP The Post Correspondence Problem or PCP over an alphabet can be stated as follows.
Reference: 65. <author> J. Goubault. </author> <title> Simultaneous rigid E-unification is NEXPTIME-complete (correction). </title> <type> Technical Report 93047, Bull, </type> <year> 1993. </year>
Reference-contexts: Before that result, there were several faulty statements about the decidability of SREU, e.g., that SREU is NP-complete [50, 52, 56], EXPTIME-complete [66] and even NEXPTIME-complete <ref> [65] </ref>. The undecidability of SREU was quite unexpected and implied the undecidability of several other fundamental decision problems in automated theorem proving [30]. Simultaneous unification reduces to unification. Unification can be solved in almost linear time [97] and even in linear time [114] if more complex data structures are used.
Reference: 66. <author> J. Goubault. </author> <title> Rigid ~ E-unifiability is DEXPTIME-complete. </title> <booktitle> In Proc. IEEE Conference on Logic in Computer Science (LICS). </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: Before that result, there were several faulty statements about the decidability of SREU, e.g., that SREU is NP-complete [50, 52, 56], EXPTIME-complete <ref> [66] </ref> and even NEXPTIME-complete [65]. The undecidability of SREU was quite unexpected and implied the undecidability of several other fundamental decision problems in automated theorem proving [30]. Simultaneous unification reduces to unification. <p> Chapter 3 Undecidability of SREU 3.1 INTRODUCTION The first undecidability proof of SREU was given by Degtyarev and Voron-kov [34]. Before that result, there were several faulty proofs of its decidabil-ity, e.g. <ref> [52, 66] </ref>. In general, this quite unexpected undecidability result had a serious impact on the automated theorem proving community, as several effectively equivalent fundamental decision problems in automated reasoning in classical logic with equality turned out to be undecidable [30]. We return to this in the next chapter. <p> In the case of logic with equality, all the above problems are equivalent to SREU [30]. The undecidability of SREU [32, 34, 37, 38] thus implies that problems (1-7) are all undecidable. Note that SREU had several false decidability proofs <ref> [53, 56, 66] </ref> before it was proved undecidabile, and the problems (1-7) were believed to be decidable. The Herbrand m-Skeleton problem is the Herbrand Skeleton problem with fixed multiplicity m. Clearly, SREU is a special case of the 1-Skeleton problem. <p> More precisely, it is proved that the hardness result holds already for deterministic finite (bottom-up) tree automata. Although the complexity of this problem has been used in the above mentioned contexts and also in the context of a "de-cidability" proof of SREU <ref> [66] </ref>, its proof is either merely remarked upon [48], or only briefly outlined and incomplete [66, 133]. The proof of its complexity is however highly nontrivial and in order to trust it we had to prove it ourselves. <p> Although the complexity of this problem has been used in the above mentioned contexts and also in the context of a "de-cidability" proof of SREU [66], its proof is either merely remarked upon [48], or only briefly outlined and incomplete <ref> [66, 133] </ref>. The proof of its complexity is however highly nontrivial and in order to trust it we had to prove it ourselves. <p> It was first remarked by Fruhwirth et al [48] and used in the context of type inference of logic programs. Goubault gives an incomplete proof in the case of DTAs in the context of a faulty proof of EXPTIME-completeness of SREU <ref> [66] </ref>. Seidl [133] uses EXPTIME-hardness of the intersection non-emptiness of DTTAs and outlines a proof, in the context of sort inference in typed functional programming. The proof presented here is a generalization of the proof of PSPACE-hardness of the intersection non-emptiness of DFAs by Kozen [90]. <p> Non-emptiness of finite tree automata is closely related to the two well-known P-complete problems: alternating graph accessibility [80] and gen-erability [82, 89]. It follows by (5.2) that inequivalence of DTAs is also P-complete. EXPTIME-hardness of the intersection non-emptiness problem of finite tree automata has been observed by other researchers <ref> [48, 66, 133] </ref>. In particular, Seidl outlines a proof in the case of DTTAs [133]. He has also proved that inequivalence of TAs is EXPTIME-complete [132, Theorem 2.1] and it follows also from a statement by Seidl that when restricted to DTTAs, inequivalence is P-complete [132, Theorem 4.3]. <p> Or, more generally, SREU with one variable and a bounded number of rigid equations is P-complete [29] (see Theorem 6.5). * If all function symbols have arity 1 (the monadic case) then it follows that SREU is PSPACE-hard <ref> [66] </ref>. If only one unary function symbol is allowed then the problem is decidable [31, 32]. <p> they propose. (It may be the case that if a formula has an m-corroborator then their procedure eventually finds an n-corroborator for some n &gt; m, although it fails to find an m-corroborator.) There are a number of publications on the use of SREU in automated reasoning, e.g., the papers <ref> [4, 5, 6, 7, 52, 53, 56, 58, 66, 115] </ref>, some of the results are based on the conjecture that SREU is decidable.
Reference: 67. <author> R. Greenlaw, H.J. Hoover, and W.L. Ruzzo. </author> <title> A compendium of problems complete for P . Technical Report TR 91-05-01, </title> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <year> 1991. </year>
Reference-contexts: There is also a very simple reduction from generabil-ity, which is another P-complete problem due to Jones and Laaser [82] and Kozen [89], to non-emptiness of DTAs and vice versa. We follow Greenlaw, Hoover and Ruzzo <ref> [67, 68] </ref> in our formulation of alternating graph accessibility and generability. 3 3 The book of Greenlaw, Hoover and Ruzzo [68] includes an excellent up-to-date survey of around 150 P-complete problems. 56 Finite Tree Automata I Alternating graph accessibility.
Reference: 68. <author> R. Greenlaw, H.J. Hoover, and W.L. Ruzzo. </author> <title> Limits to Parallel Computation: P -Completeness Theory. </title> <publisher> Oxford University Press, </publisher> <year> 1995. </year>
Reference-contexts: This survey is summarized in Table 5.1 at the end of this chapter. We show also that the non-emptiness problem of finite tree automata is P-complete by showing its close connection with the two well-known P-complete problems alternating graph accessibility <ref> [68, 80] </ref> and generabil-ity [68, 82, 89]. We consider a notion of succinctness with respect to which the intersection non-emptiness problem is in fact a succinct version of the non-emptiness problem. <p> This survey is summarized in Table 5.1 at the end of this chapter. We show also that the non-emptiness problem of finite tree automata is P-complete by showing its close connection with the two well-known P-complete problems alternating graph accessibility [68, 80] and generabil-ity <ref> [68, 82, 89] </ref>. We consider a notion of succinctness with respect to which the intersection non-emptiness problem is in fact a succinct version of the non-emptiness problem. <p> There is also a very simple reduction from generabil-ity, which is another P-complete problem due to Jones and Laaser [82] and Kozen [89], to non-emptiness of DTAs and vice versa. We follow Greenlaw, Hoover and Ruzzo <ref> [67, 68] </ref> in our formulation of alternating graph accessibility and generability. 3 3 The book of Greenlaw, Hoover and Ruzzo [68] includes an excellent up-to-date survey of around 150 P-complete problems. 56 Finite Tree Automata I Alternating graph accessibility. <p> We follow Greenlaw, Hoover and Ruzzo [67, 68] in our formulation of alternating graph accessibility and generability. 3 3 The book of Greenlaw, Hoover and Ruzzo <ref> [68] </ref> includes an excellent up-to-date survey of around 150 P-complete problems. 56 Finite Tree Automata I Alternating graph accessibility.
Reference: 69. <author> Y. Gurevich. </author> <title> Formulas with one 8. In Selected Questions in Algebra and Logic; in memory of A. </title> <booktitle> Malcev, </booktitle> <pages> pages 97-110. </pages> <publisher> Nauka, </publisher> <address> Moscow, </address> <year> 1973. </year> <note> In Russian. A German translation is available at TIB Universitat Hannover, Germany. </note>
Reference-contexts: Classically, without restrictions on the signa ture, maximal decidable fragments are * [8 fl ; all ; all ] if equality is allowed [70], and 7.5. Corresponding Classical Fragments 97 * [8 fl 98 fl ; all ; all ] (` c ) if equality is disallowed <ref> [69, 98] </ref>.
Reference: 70. <author> Y. Gurevich. </author> <title> The decision problem for standard classes. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 41(2) </volume> <pages> 460-464, </pages> <year> 1976. </year>
Reference-contexts: Classically, without restrictions on the signa ture, maximal decidable fragments are * [8 fl ; all ; all ] if equality is allowed <ref> [70] </ref>, and 7.5. Corresponding Classical Fragments 97 * [8 fl 98 fl ; all ; all ] (` c ) if equality is disallowed [69, 98]. <p> prenex formulas whose quantifier free part is a clause, i.e., a disjunction of literals. 2 In the presence of equality, we have that, the Gurevich fragments * ([9; (0); (0; 1)] " CLAUSE ) (` c ) and * ([9; (0); (2)] " CLAUSE ) (` c ) are undecidable <ref> [70] </ref>. Let HornCLAUSE be the class of prenex formulas whose quantifier free part is a (strict) Horn clause, i.e., a clause with exactly one positive literal. The Gurevich fragments are already undecidable when restricted to HornCLAUSE [160].
Reference: 71. <author> Y. Gurevich. </author> <title> On the classical decision problem. </title> <editor> In G. Rozenberg and A. Salomaa, editors, </editor> <booktitle> Current Trends in Theoretical Computer Science, </booktitle> <pages> pages 254-265. </pages> <publisher> World Scientific, </publisher> <year> 1993. </year> <note> Originally published in the Bull. </note> <institution> of European Association for Theoretical Computer Science, </institution> <month> Oct. </month> <year> 1990, </year> <pages> 140-150. </pages>
Reference-contexts: By now the classification of all the traditional fragments has been completed [13]. See Gurevich <ref> [71] </ref> for a popular introduction into the subject. Classically, all formulas are equivalent to prenex formulas. Formulas in prenex form are traditionally classified by imposing restrictions on the quantifier prefix, the signature and either allowing equality or not. Let us adopt the following notation for classes of formulas [13].
Reference: 72. <author> Y. Gurevich and M. Veanes. </author> <title> Some undecidable problems related to the Herbrand theorem. </title> <type> UPMAIL Technical Report 138, </type> <institution> Uppsala University, Computing Science Department, </institution> <month> March </month> <year> 1997. </year>
Reference-contexts: Moreover, SREU is undecidable under the following restrictions: The left-hand sides of the rigid equations are ground [116]. Furthermore, there are only two variables [147, 148, 150] and three rigid equations with fixed ground left-hand sides <ref> [72] </ref> (see Theorem 3.4). * SREU with one variable is decidable, in fact EXPTIME-complete [29] (see Theorem 6.4).
Reference: 73. <author> Y. Gurevich and A. Voronkov. </author> <title> The monadic case of simultaneous rigid E-unification. </title> <type> UPMAIL Technical Report 137, </type> <institution> Uppsala University, Computing Science Department, </institution> <year> 1997. </year> <note> To appear in Proc. of ICALP'97. </note>
Reference-contexts: Recall that monadic SREU is SREU restricted to signatures with function symbols of arity 1. The decidability of monadic SREU is currently one of the few open problems related to SREU <ref> [73] </ref>. An effectively equivalent problem is the decidability of the prenex fragment of intuitionistic logic with equality with function symbols of arity 1 [35]. Some evidence speaks in favour of that the problem is decidable, although with very high computational complexity (e.g., many subcases are decidable). <p> This construction is in fact based on a construction in de Kogel [27, Theorems 4.1 and 4.2] that is based on Shostak's congruence closure algorithm [136]. 1 A similar construction is used also in Dauchet, Heuillard, Lescanne and Tison [24], and in Gurevich and Voronkov <ref> [73] </ref>. Inclusion in EXPTIME In the following we assume that none of the rigid equations are redundant. <p> Theorem 6.7 Monadic SREU with one variable is PSPACE-complete. Proof. Inclusion in PSPACE follows from Lemma 6.5 trivially modified so that Theorem 6.6 is used. PSPACE-hardness follows from Theorem 6.4 trivially modified so that Theorem 6.6 is used. fi A detailed study of monadic SREU can be found elsewhere <ref> [73] </ref>, where also the PSPACE-completeness is proved. We can note that, in general, the decidability of monadic SREU is still an open problem [73]. 6.5 UNITED ONE VARIABLE CASE In this section we extend the decidability result of SREU with one variable to SREU with multiple variables with the following syntactical <p> PSPACE-hardness follows from Theorem 6.4 trivially modified so that Theorem 6.6 is used. fi A detailed study of monadic SREU can be found elsewhere <ref> [73] </ref>, where also the PSPACE-completeness is proved. We can note that, in general, the decidability of monadic SREU is still an open problem [73]. 6.5 UNITED ONE VARIABLE CASE In this section we extend the decidability result of SREU with one variable to SREU with multiple variables with the following syntactical restriction on the structure of each rigid equation. <p> The word equation problem is a hard combinatorial problem that was proved decidable by Makanin [96]. No interesting upper bounds for computational complexity of the word equation problem are known yet. The monadic SREU is treated in detail in Gurevich and Voronkov <ref> [73] </ref>. Chapter 8 Conclusion 8.1 MAIN CONTRIBUTIONS The main purpose of the thesis is to gain deeper understanding of SREU. The fundamental role of SREU in several areas of computer science has been shown in numerous results by Degtyarev and Voronkov and others. <p> at least two constants. * About the monadic case it is known that if there are more than 1 unary function symbols then SREU is decidable iff it is decidable with just 2 unary function symbols [32]. * If the left-hand sides are ground then the monadic case is decidable <ref> [73] </ref>. Monadic SREU with one variable is PSPACE-complete [73] (see Theorem 6.7). * The word equation solving [96] (i.e., unification under associativity), which is an extremely hard problem with no interesting known computational complexity bounds, can be reduced to monadic SREU [31]. * Monadic SREU is equivalent to a non-trivial extension <p> case it is known that if there are more than 1 unary function symbols then SREU is decidable iff it is decidable with just 2 unary function symbols [32]. * If the left-hand sides are ground then the monadic case is decidable <ref> [73] </ref>. Monadic SREU with one variable is PSPACE-complete [73] (see Theorem 6.7). * The word equation solving [96] (i.e., unification under associativity), which is an extremely hard problem with no interesting known computational complexity bounds, can be reduced to monadic SREU [31]. * Monadic SREU is equivalent to a non-trivial extension of word equa tions [73]. 102 Conclusion * <p> variable is PSPACE-complete <ref> [73] </ref> (see Theorem 6.7). * The word equation solving [96] (i.e., unification under associativity), which is an extremely hard problem with no interesting known computational complexity bounds, can be reduced to monadic SREU [31]. * Monadic SREU is equivalent to a non-trivial extension of word equa tions [73]. 102 Conclusion * Monadic SREU is equivalent to the decidability problem of the prenex fragment of intuitionistic logic with equality with function symbols of arity 1 [35]. * In general SREU is undecidable [34]. <p> Actually, the problem is then P-complete because the uniform word problem for ground equations is P-complete [89]. The unsolved cases are: ? Decidability of monadic SREU <ref> [73] </ref>. ? Decidability of SREU with two rigid equations. Both problems are highly non-trivial. 8.3 FUTURE WORK There are several directions for future work and open problems that need to be solved. We can divide these problems into three categories: 1. Classification of unsolved fragments of SREU. 2. <p> Future Work 103 Unsolved Fragments One concern of the thesis is to classify fragments of SREU into either decidable or undecidable ones. In that respect there are two unsolved cases: 1. Decidability of monadic SREU <ref> [73] </ref>. This is equivalent to the de-cidability of the prenex fragment of intuitionistic logic with equality restricted to function symbols of arity 1. 2. Decidability of SREU with two rigid equations.
Reference: 74. <author> J. </author> <title> Herbrand. Logical Writings. </title> <publisher> Harvard University Press, </publisher> <year> 1972. </year>
Reference-contexts: first-order logic deals with the validity problem of closed first-order formulas: 2 Introduction Given a closed formula ', is ' valid? There is a category of automated theorem proving methods, known as the tableau methods and the matrix methods, the theorectical foundation of which is provided by the Herbrand theorem <ref> [74] </ref>. Below we illustrate both methods briefly. Collectively, such methods are referred to as the rigid variable methods [157]. We can consider, without loss of generality, first-order languages with at least one constant. So the set of ground 1 terms is always nonempty. <p> Background Automated theorem proving methods in classical logic can be divided roughly into two categories. The first category comprises methods that are refinements of Robinson's resolution principle [124] that descends from techniques developed already by Herbrand <ref> [74] </ref>. The first general method to handle equality in resolution based methods is based on paramodulation [123]. 1.2. Simultaneous Rigid E-Unification 5 Although there have been other approaches, the main line of research in resolution theorem proving with equality has been dominated by various improvements of paramodulation [40]. <p> The important implication is that SREU is undecidable already with ground left-hand sides. Chapter 4 The Herbrand Skeleton Problem 4.1 INTRODUCTION One popular form of the classical Herbrand theorem <ref> [74] </ref> is this: An existential formula 9~x'(~x) is provable if and only if there exist a positive integer m and ground substitutions 1 ; : : : ; m in the language of ' such that the disjunction ' 1 _ _ ' m is provable.
Reference: 75. <editor> J.R. Hindley and J.P. Seldin. </editor> <title> Introduction to Combinatorics and - Calculus. </title> <publisher> Cambridge University Press, </publisher> <year> 1986. </year>
Reference-contexts: In contrast, the problem of E-unification is undecidable. A good example is the undecidability of weak equality in Combinatory Logic due to Scott and Curry (cf Hindley and Seldin <ref> [75, Chapter 5] </ref>). Let be a binary function symbol and let S and K be two constants.
Reference: 76. <author> J. E. Hopcroft and J. D. Ullman. </author> <title> Introduction to Automata Theory, Languages and Computation. </title> <publisher> Addison-Wesley Publishing Co., </publisher> <year> 1979. </year>
Reference-contexts: For an overview of the notion of recognizability in general algebraic structures see Courcelle [21] and the fundamental paper by Mezei and Wright [103]. 2.5 CLASSICAL AUTOMATA THEORY We use some notions from classical automata theory and follow Hopcroft and Ullman in that respect <ref> [76] </ref>. Characters are treated as constants, in the usual case. 2.5. Classical Automata Theory 15 Finite Automata We use the following formal definition of a DFA. <p> (q; a)) ff c a fi q ff c b fi p The language accepted by M is the following set of strings: L (M ) = f w 2 fl M ffpfi where p 2 F and ffpfi is an ID g: The notions of valid (and invalid) computations <ref> [76] </ref> of a TM are a powerful tool in proving undecidability results about context free languages. <p> Overview of the Construction 19 We note also that shifted pairing bears certain similarities to the technique that is used to prove that any recursively enumerable set of strings is given by the intersection of two (deterministic) context free languages <ref> [76, Lemma 8.6] </ref>. 3.2 OVERVIEW OF THE CONSTRUCTION We consider a fixed Turing machine M = (Q M ; in ; tape ; ffi; q 0 ; b; fq acc g); and assume, without loss of generality, that the final ID of M is simply q acc i.e., the tape is <p> Proof. Let M = (Q; ; ffi; q 0 ; F ) be a DFA that accepts the reverse of V , or V r , (clearly M exists, cf <ref> [76, p 281] </ref>). For each a 2 let ~a be a new state. <p> In particular, we can choose as M a universal Turing machine M u . Let for example M u be the Turing machine that accepts the universal language L u <ref> [76, Section 8.3] </ref>, L u = f hM; vi j M is a Turing machine that accepts v g; where hM; vi is some encoding of the pair (M; v) that is carried out in some fixed alphabet. The precise details of such an encoding are not relevant here. <p> We can assume, without loss of generality, that M has a single tape, this follows from a straightforward generalization of the corresponding property for TMs <ref> [76, Theorem 12.2] </ref>. Let x 2 + in be a fixed string and n = S (jxj).
Reference: 77. <author> J. Hudelmaier. </author> <title> An O(n log n)-space decision procedure for intuitionis-tic propositional logic. </title> <journal> Journal of Logic and Computation, </journal> <volume> 3(1) </volume> <pages> 63-75, </pages> <year> 1993. </year> <month> 113 </month>
Reference-contexts: A similar decidability proof of another fragment is given in Degtyarev and Voronkov [35, Theorem 7.1] where the authors first prove the equivalence (when restricted to prenex formulas) of LJ with another system that is based on Hudelmaier's calculus LG <ref> [77] </ref> and use properties of the latter system.
Reference: 78. <author> G. Huet. </author> <title> Confluent reductions: Abstract properties and applications to term rewriting systems. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 27(4) </volume> <pages> 797-821, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: The problem of solvability of systems of rigid equations is called simultaneous rigid E-unification or SREU for short. Solvability of a single rigid equation is called rigid E-unification. 2.3 TERM REWRITING In some cases it is convenient to use ground term rewriting techniques at metalevel <ref> [42, 78] </ref> when reasoning about equations. Let ! be a binary relation on terms. We define first some well-known properties of !. The 2.4. Term Rewriting 13 reflexive and transitive closure of ! is denoted by fl !.
Reference: 79. <author> H.B. Hunt III. </author> <title> The equivalence problem for regular expressions with intersection is not polynomial in tape. </title> <type> Technical Report TR 73-161, </type> <institution> Cornell University, </institution> <address> Ithaca, NY., </address> <year> 1973. </year>
Reference-contexts: Succinctness 73 5.6 SUCCINCTNESS The use of intersection can shorten a regular expression by an exponential amount. This fact explains why the inequivalence problem for regular expressions becomes EXPSPACE-complete when intersection is added <ref> [49, 79] </ref>, whereas it is PSPACE-complete [102] in the usual case. (A similar effect is obtained with interleaving [100].) Above, we are just witnessing a similar effect on TAs.
Reference: 80. <author> N. Immerman. </author> <title> Number of quantifiers is better than number of tape cells. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 22(3) </volume> <pages> 384-406, </pages> <year> 1981. </year>
Reference-contexts: This survey is summarized in Table 5.1 at the end of this chapter. We show also that the non-emptiness problem of finite tree automata is P-complete by showing its close connection with the two well-known P-complete problems alternating graph accessibility <ref> [68, 80] </ref> and generabil-ity [68, 82, 89]. We consider a notion of succinctness with respect to which the intersection non-emptiness problem is in fact a succinct version of the non-emptiness problem. <p> It follows that the inequivalence problem of DFAs is also NL-complete. Analogously, for finite tree automata there is a simple reduction from the alternating graph accessibility problem to the non-emptiness problem and vice versa. Alternating graph accessibility was shown P-complete by Immerman <ref> [80] </ref> by a direct simulation of any ALOGSPACE ATM. There is also a very simple reduction from generabil-ity, which is another P-complete problem due to Jones and Laaser [82] and Kozen [89], to non-emptiness of DTAs and vice versa. <p> For finite automata in general, inequivalence is PSPACE-complete by Meyer and Stockmeyer [102]. PSPACE-completeness of non-emptiness of intersection of finite automata was proved by Kozen [90]. Non-emptiness of finite tree automata is closely related to the two well-known P-complete problems: alternating graph accessibility <ref> [80] </ref> and gen-erability [82, 89]. It follows by (5.2) that inequivalence of DTAs is also P-complete. EXPTIME-hardness of the intersection non-emptiness problem of finite tree automata has been observed by other researchers [48, 66, 133]. In particular, Seidl outlines a proof in the case of DTTAs [133].
Reference: 81. <author> D.S. Johnson. </author> <title> A catalog of complexity classes. </title> <editor> In J. Van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, volume A: Algorithms and Complexity, chapter 2, </booktitle> <pages> pages 67-161. </pages> <publisher> Elsevier Science, </publisher> <address> Amster-dam, </address> <year> 1990. </year>
Reference-contexts: EXPTIME The class of problems that can be solved deterministically within exponential time, i.e., within time 2 p (n) , where p is a polyno mial and n the size of the input. We refer the reader to Papadimitriou [112] and Johnson <ref> [81] </ref> for precise definitions and an extensive treatment of the subject. We establish some new P-completeness, PSPACE-completeness and EXPTIME-completeness results in the thesis. <p> All computation models based on a Turing machine can be considered as variants of a TM with different acceptance conditions, this point is emphasized by Johnson <ref> [81] </ref>. We define an ATM formally as follows. I An alternating Turing machine is a pair (M; U ) where M is a TM and U a subset of the states of M , called the set of universal states. The states of M not in U are called existential.
Reference: 82. <author> N.D. Jones and W.T. Laaser. </author> <title> Complete problems for deterministic polynomial time. </title> <journal> Theoretical Computer Science, </journal> <volume> 3(2) </volume> <pages> 105-117, </pages> <year> 1976. </year>
Reference-contexts: This survey is summarized in Table 5.1 at the end of this chapter. We show also that the non-emptiness problem of finite tree automata is P-complete by showing its close connection with the two well-known P-complete problems alternating graph accessibility [68, 80] and generabil-ity <ref> [68, 82, 89] </ref>. We consider a notion of succinctness with respect to which the intersection non-emptiness problem is in fact a succinct version of the non-emptiness problem. <p> Alternating graph accessibility was shown P-complete by Immerman [80] by a direct simulation of any ALOGSPACE ATM. There is also a very simple reduction from generabil-ity, which is another P-complete problem due to Jones and Laaser <ref> [82] </ref> and Kozen [89], to non-emptiness of DTAs and vice versa. <p> For finite automata in general, inequivalence is PSPACE-complete by Meyer and Stockmeyer [102]. PSPACE-completeness of non-emptiness of intersection of finite automata was proved by Kozen [90]. Non-emptiness of finite tree automata is closely related to the two well-known P-complete problems: alternating graph accessibility [80] and gen-erability <ref> [82, 89] </ref>. It follows by (5.2) that inequivalence of DTAs is also P-complete. EXPTIME-hardness of the intersection non-emptiness problem of finite tree automata has been observed by other researchers [48, 66, 133]. In particular, Seidl outlines a proof in the case of DTTAs [133].
Reference: 83. <author> S. Kanger. </author> <title> Provability in Logic, </title> <booktitle> volume 1 of Studies in Philosophy. Almquist and Wicksell, </booktitle> <address> Stockholm, </address> <year> 1957. </year>
Reference-contexts: The other category of methods, that we considered above, is based on semantic tableau or sequent calculus based proof systems, originally developed by Beth [9] and further studied by Smullyan [137]. Independently, similar methods were introduced by Kanger <ref> [83] </ref>. We refer to such methods under the name of tableau. Tableau methods are to a large extent based on Gentzen's work [61].
Reference: 84. <author> S. Kanger. </author> <title> A simplified proof method for elementary logic. </title> <editor> In J. Siek-mann and G. Wrightson, editors, </editor> <booktitle> Automation of Reasoning. Classical Papers on Computational Logic, </booktitle> <volume> volume 1, </volume> <pages> pages 364-371. </pages> <publisher> Springer Verlag, </publisher> <year> 1983. </year> <note> Originally appeared in 1963. </note>
Reference-contexts: Related ideas appear already in Quine [120]. The study of equality reasoning in sequent calculus based methods was already started by Wang [158]. Important pioneering work in this connection was done by Kanger <ref> [84] </ref>. Both categories are addressed and compared by several authors. For a general comparison and an introduction to tableau and resolution systems for arbitrary formulas, see Fitting [47]. The close correspondence between tableau and sequent calculus systems is described in Smullyan [137].
Reference: 85. <author> A.J. Kfoury, J. Tiuryn, and P. Urzyczyn. </author> <title> The undecidability of the semi-unification problem. </title> <journal> Information and Computation, </journal> <volume> 102 </volume> <pages> 83-101, </pages> <year> 1993. </year>
Reference-contexts: This proof has its roots in [31] where it is proved that the variable-bounded semi-unification problem 3 can be reduced to SREU. Semi-unification was proved undecidable in Kfoury, Tiuryn and Urzyczyn <ref> [85] </ref> and the monadic semi-unification was proved undecidable in Baaz [2]. A semi-unification problem consists of a set of expressions s i t i , 1 i n, where s i and t i are terms.
Reference: 86. <author> D. Knuth and P. Bendix. </author> <title> Simple word problems in universal algebras. </title> <editor> In J. Leech, editor, </editor> <booktitle> Computational Problems in Abstract Algebra, </booktitle> <pages> pages 263-297. </pages> <publisher> Pergamon Press, Oxford, </publisher> <year> 1970. </year>
Reference-contexts: E = t# E (cf [42, Section 2.4]), i.e., E j= s t , s# E = t# E : To construct a canonical rewrite system from a given set E of equations, while preserving the set of logical consequences of E, is the main motivation behind the completion procedure <ref> [86] </ref>. It is well-known that for any set of ground equations there exists an equivalent canonical rewrite system [92]. Moreover, such a system can be constructed in O (n 3 ) time [51, 55] or even in O (n log n) time [138].
Reference: 87. <author> A. Koscielski and L. Pacholski. </author> <title> Complexity of Makanin's algorithm. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 43(4) </volume> <pages> 670-684, </pages> <year> 1996. </year>
Reference-contexts: The word equation problem is a hard combinatorial problem that was proven decidable by Makanin in 1977 [96]. There are no known interesting upper bounds of the computational complexity of the word equation problem; the complexity of Makanin's algorithm has several exponents <ref> [87] </ref>. It is known only that the problem is NP-hard [8]. Hence, if SREU 2 is decidable then there is probably no simple proof of that. One approach to prove the de-cidability is to try to generalize the decidability proof of the case with one unary function symbol [31, 32].
Reference: 88. <author> D. Kozen. </author> <title> Complexity of finitely presented algebras. </title> <type> Technical Report TR 76-294, </type> <institution> Cornell University, </institution> <address> Ithaca, N.Y., </address> <year> 1976. </year>
Reference-contexts: Various problems that are related to finitely presented algebras, and their computational complexity, have been studied in Kozen <ref> [88, 89] </ref>. Below, we make use of some of those results. 76 SREU with One Variable 6.3 DECIDABILITY In this section we establish formally the decidability of SREU with one variable. The proof has two parts. 1. <p> I The uniform word problem for ground equations is the following de cision problem. Given a set of ground equations E and a ground equation e, is e a logical consequence of E? We use the following complexity result <ref> [88, 89] </ref>. Theorem 6.1 (Kozen) The uniform word problem for ground equations is P-complete. So redundancy of rigid equations is decidable in polynomial time.
Reference: 89. <author> D. Kozen. </author> <title> Complexity of finitely presented algebras. </title> <booktitle> In Proc. of the 9th Annual Symposium on Theory of Computing, </booktitle> <pages> pages 164-177, </pages> <address> New York, 1977. </address> <publisher> ACM. </publisher>
Reference-contexts: This survey is summarized in Table 5.1 at the end of this chapter. We show also that the non-emptiness problem of finite tree automata is P-complete by showing its close connection with the two well-known P-complete problems alternating graph accessibility [68, 80] and generabil-ity <ref> [68, 82, 89] </ref>. We consider a notion of succinctness with respect to which the intersection non-emptiness problem is in fact a succinct version of the non-emptiness problem. <p> Alternating graph accessibility was shown P-complete by Immerman [80] by a direct simulation of any ALOGSPACE ATM. There is also a very simple reduction from generabil-ity, which is another P-complete problem due to Jones and Laaser [82] and Kozen <ref> [89] </ref>, to non-emptiness of DTAs and vice versa. <p> The generability problem remains in P even with more than one function. More generally, it is the problem of deciding if, given a finite algebra, a subset of its universe and an element in it, this element is in the subalgebra generated by the given subset <ref> [89] </ref>. Actually, generability is basically the same problem as non-emptiness of DTAs. In the following proof it is easily seen that all reductions can be carried out within logarithmic space, assuming reasonable representations of the problems, and we do not mention that explicitly. <p> For finite automata in general, inequivalence is PSPACE-complete by Meyer and Stockmeyer [102]. PSPACE-completeness of non-emptiness of intersection of finite automata was proved by Kozen [90]. Non-emptiness of finite tree automata is closely related to the two well-known P-complete problems: alternating graph accessibility [80] and gen-erability <ref> [82, 89] </ref>. It follows by (5.2) that inequivalence of DTAs is also P-complete. EXPTIME-hardness of the intersection non-emptiness problem of finite tree automata has been observed by other researchers [48, 66, 133]. In particular, Seidl outlines a proof in the case of DTTAs [133]. <p> Various problems that are related to finitely presented algebras, and their computational complexity, have been studied in Kozen <ref> [88, 89] </ref>. Below, we make use of some of those results. 76 SREU with One Variable 6.3 DECIDABILITY In this section we establish formally the decidability of SREU with one variable. The proof has two parts. 1. <p> I The uniform word problem for ground equations is the following de cision problem. Given a set of ground equations E and a ground equation e, is e a logical consequence of E? We use the following complexity result <ref> [88, 89] </ref>. Theorem 6.1 (Kozen) The uniform word problem for ground equations is P-complete. So redundancy of rigid equations is decidable in polynomial time. <p> Note also that SREU is decidable when there are no variables, since each rigid equation can be decided for example by using any congruence closure algorithm or ground term rewriting technique. Actually, the problem is then P-complete because the uniform word problem for ground equations is P-complete <ref> [89] </ref>. The unsolved cases are: ? Decidability of monadic SREU [73]. ? Decidability of SREU with two rigid equations. Both problems are highly non-trivial. 8.3 FUTURE WORK There are several directions for future work and open problems that need to be solved.
Reference: 90. <author> D. Kozen. </author> <title> Lower bounds for natural proof systems. </title> <booktitle> In Proc. 18th IEEE Symposium on Foundations of Computer Science (FOCS), </booktitle> <pages> pages 254-266, </pages> <year> 1977. </year> <month> 114 </month>
Reference-contexts: Seidl [133] uses EXPTIME-hardness of the intersection non-emptiness of DTTAs and outlines a proof, in the context of sort inference in typed functional programming. The proof presented here is a generalization of the proof of PSPACE-hardness of the intersection non-emptiness of DFAs by Kozen <ref> [90] </ref>. The idea is to encode the set of valid computation trees of a fixed polynomial space ATM and a given input string, as the forest given by the intersection of a collection of DTAs. The same idea is used in the above references. <p> Thus the intersection non-emptiness problem of NFAs is in PSPACE. This fact follows already from the proof of the PSPACE-completeness of the intersection non-emptiness problem of DFAs by Kozen <ref> [90] </ref>, where the part of the proof regarding inclusion in PSPACE holds also for NFAs. 5.7. Succinctness 73 5.6 SUCCINCTNESS The use of intersection can shorten a regular expression by an exponential amount. <p> With this notion of succinctness it follows that the intersection non-emptiness problem is simply the succinct non-emptiness problem. Note also that it is generally believed that EXPTIME is nothing else but P on exponentially more succinct input [112]. Analogously, succinct non-emptiness of finite automata is PSPACE-complete by Kozen's result <ref> [90] </ref>. If we consider a finite automaton as a graph, non-emptiness is just graph accessibility. <p> For finite automata in general, inequivalence is PSPACE-complete by Meyer and Stockmeyer [102]. PSPACE-completeness of non-emptiness of intersection of finite automata was proved by Kozen <ref> [90] </ref>. Non-emptiness of finite tree automata is closely related to the two well-known P-complete problems: alternating graph accessibility [80] and gen-erability [82, 89]. It follows by (5.2) that inequivalence of DTAs is also P-complete. <p> DTAs restricted to signatures with just unary function symbols correspond to classical deterministic finite automata or DFAs. The following result is proved in Kozen <ref> [90] </ref>. Theorem 6.6 (Kozen) The intersection non-emptiness problem of DFAs is PSPACE-complete. We get the following result. Theorem 6.7 Monadic SREU with one variable is PSPACE-complete. Proof. Inclusion in PSPACE follows from Lemma 6.5 trivially modified so that Theorem 6.6 is used.
Reference: 91. <author> D. Kozen. </author> <title> Positive first-order logic is NP-complete. </title> <journal> IBM J. of Research and Development, </journal> <volume> 25(4) </volume> <pages> 327-332, </pages> <year> 1981. </year>
Reference-contexts: Recently a simpler proof, without computational complexity considerations, has been given by de Kogel [27, 28]. Rigid E-unification is studied also in Choi [19]. We start with the solved cases: * Rigid E-unification with ground left-hand side is NP-complete <ref> [91] </ref>. Rigid E-unification in general is NP-complete and there exist finite complete sets of unifiers [52, 56]. * Rigid E-unification with one variable is P-complete [29] (see Theorem 6.2).
Reference: 92. <author> D.S. Lankford. </author> <title> Canonical inference. </title> <type> Technical report, </type> <institution> Department of Mathematics, South-Western University, Georgetown, Texas, </institution> <year> 1975. </year>
Reference-contexts: It is well-known that for any set of ground equations there exists an equivalent canonical rewrite system <ref> [92] </ref>. Moreover, such a system can be constructed in O (n 3 ) time [51, 55] or even in O (n log n) time [138].
Reference: 93. <author> V. Lifschitz. </author> <title> Problem of decidability for some constructive theories of equalities (in Russian). </title> <journal> Zapiski Nauchnyh Seminarov LOMI, </journal> <volume> 4 </volume> <pages> 78-85, </pages> <year> 1967. </year> <note> English Translation in: Seminars in Mathematics: </note> <institution> Steklov Math. Inst. 4, Consultants Bureau, NY-London, </institution> <year> 1969, </year> <month> p.29-31. </month>
Reference-contexts: that, although both formula instantiation and intuitionistic provability of existential formulas reduce to SREU, these reductions are fundamentally different, as is illustrated with the above example. 7.4 OTHER FRAGMENTS Decidability problems for other fragments of intuitionistic logic have been studied by Orevkov [109, 111], Mints [104], Statman [139] and Lifschitz <ref> [93] </ref>. Orevkov proves that the ::89-fragment of intuitionistic logic with function symbols is undecidable [109]. Orevkov classifies the decidability of some other pseudo-prenex fragments of intuitionistic logic with equality, i.e., classes of formulas with a prenex that is a string in f9; 8; ::g fl [111]. <p> Lifschitz proves that intuitionistic logic with equality and without function symbols is undecidable, i.e., that the pure constructive theory of equality is undecidable <ref> [93] </ref>. Statman proves that the intuitionistic propositional logic is PSPACE-complete [139]. 7.5 CORRESPONDING CLASSICAL FRAGMENTS The study of the classical decision problem was initiated by Hilbert at the beginning of this century.
Reference: 94. <author> A. Lozano and J.L. Balcazar. </author> <title> The complexity of graph problems for succinctly represented graphs. </title> <editor> In M. Nagl, editor, </editor> <booktitle> Graph-Theoretic Concepts in Computer Science, 15th International Workshop WG'89, volume 411 of Lecture Notes in Computer Science, </booktitle> <pages> pages 277-286. </pages> <publisher> Springer Verlag, </publisher> <year> 1989. </year>
Reference-contexts: If we consider a finite automaton as a graph, non-emptiness is just graph accessibility. In this case there is another notion of succinctness 4 which implies that the succinct graph accessibility problem is PSPACE-complete [113] (even for undirected graphs <ref> [94] </ref>). 5.7 CONCLUDING REMARKS In this chapter we considered computational complexity of some basic decision problems of finite tree automata. In particular, we proved EXPTIME-completeness of the intersection non-emptiness problem (Theorem 5.2) and we showed P-completeness of the non-emptiness problem (Theorem 5.1).
Reference: 95. <author> M. Magidor and G. Moran. </author> <title> Finite automata over finite trees. </title> <type> Technical Report 30, </type> <institution> Hebrew University, Jerusalem, </institution> <year> 1969. </year>
Reference-contexts: Tree automata as defined above are usually also called bottom-up tree automata. Top-down tree automata were introduced by Rabin [121] and were also studied by Magidor and Moran <ref> [95] </ref>. Here we use the following definition, also based on rewrite rules.
Reference: 96. <author> G.S. Makanin. </author> <title> The problem of solvability of equations in free semi-groups. </title> <journal> Mat. Sbornik (in Russian), </journal> <volume> 103(2) </volume> <pages> 147-236, </pages> <year> 1977. </year> <journal> English Translation in American Mathematical Soc. </journal> <volume> Translations (2), vol. 117, </volume> <year> 1981. </year>
Reference-contexts: A fact to support this statement is that the word equation problem or unification under associativity has a simple reduction to SREU 2 [32]. The word equation problem is a hard combinatorial problem that was proved decidable by Makanin <ref> [96] </ref>. No interesting upper bounds for computational complexity of the word equation problem are known yet. The monadic SREU is treated in detail in Gurevich and Voronkov [73]. Chapter 8 Conclusion 8.1 MAIN CONTRIBUTIONS The main purpose of the thesis is to gain deeper understanding of SREU. <p> Monadic SREU with one variable is PSPACE-complete [73] (see Theorem 6.7). * The word equation solving <ref> [96] </ref> (i.e., unification under associativity), which is an extremely hard problem with no interesting known computational complexity bounds, can be reduced to monadic SREU [31]. * Monadic SREU is equivalent to a non-trivial extension of word equa tions [73]. 102 Conclusion * Monadic SREU is equivalent to the decidability problem of <p> It is shown in Degtyarev, Matiya-sevich and Voronkov [31, 32] that the famous word equation problem, also known as unification under associativity has a simple reduction to SREU 2 . The word equation problem is a hard combinatorial problem that was proven decidable by Makanin in 1977 <ref> [96] </ref>. There are no known interesting upper bounds of the computational complexity of the word equation problem; the complexity of Makanin's algorithm has several exponents [87]. It is known only that the problem is NP-hard [8].
Reference: 97. <author> A. Martelli and U. Montanari. </author> <title> An efficient unification algorithm. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 4(2) </volume> <pages> 258-282, </pages> <year> 1982. </year>
Reference-contexts: The undecidability of SREU was quite unexpected and implied the undecidability of several other fundamental decision problems in automated theorem proving [30]. Simultaneous unification reduces to unification. Unification can be solved in almost linear time <ref> [97] </ref> and even in linear time [114] if more complex data structures are used. It is also known that unification is P-complete [44, 161].
Reference: 98. <author> S. Maslov and V. Orevkov. </author> <title> Decidable classes reducing to one-quantifier class. </title> <journal> In Proc. Steklov Inst. Steklov Math, </journal> <volume> volume 121, </volume> <pages> pages 61-72, </pages> <year> 1972. </year> <institution> Russian original in Trudy Math. Inst. Steklov. </institution>
Reference-contexts: Classically, without restrictions on the signa ture, maximal decidable fragments are * [8 fl ; all ; all ] if equality is allowed [70], and 7.5. Corresponding Classical Fragments 97 * [8 fl 98 fl ; all ; all ] (` c ) if equality is disallowed <ref> [69, 98] </ref>.

References-found: 98

