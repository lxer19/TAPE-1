URL: ftp://hyena.cs.umd.edu/pub/ranga/usenix97.final/final.ps
Refering-URL: http://www.cs.umd.edu/users/ranga/
Root-URL: 
Title: Network-aware Mobile Programs  
Author: M.Ranganathan, Anurag Acharya, Shamik D. Sharma and Joel Saltz 
Address: College Park, MD 20740  
Affiliation: Department of Comptuer Science University of Maryland  
Abstract: In this paper, we investigate network-aware mobile programs, programs that can use mobility as a tool to adapt to variations in network characteristics. We present infras-tructural support for mobility and network monitoring and show how adaptalk, a Java-based mobile Internet chat application can take advantage of this support to dynamically place the chat server so as to minimize response time. Our conclusion was that on-line network monitoring and adaptive placement of shared data-structures can significantly improve performance of distributed applications on the Internet. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Java object serialization specification. </institution> <note> http://chatsubo.javasoft.com/current/serial/index.html. </note>
Reference-contexts: Remote evaluation (or code shipping) has been supported by several systems for example Java [10], REV [17], REXDC [4] NCL [15] and the UNIX rsh facility and Avalon/Common Lisp [25]. Movement of passive objects (ie. data) is supported by Java Object Serialization <ref> [1] </ref> and Modula 3 Network Objects [2].
Reference: [2] <author> A. Birell, G. Nelson, S. Owicki, and E. Wobber. </author> <title> Network objects. </title> <booktitle> In ACM SIGOPS, </booktitle> <pages> pages 217-229, </pages> <month> Dec. </month> <year> 1993. </year>
Reference-contexts: Remote evaluation (or code shipping) has been supported by several systems for example Java [10], REV [17], REXDC [4] NCL [15] and the UNIX rsh facility and Avalon/Common Lisp [25]. Movement of passive objects (ie. data) is supported by Java Object Serialization [1] and Modula 3 Network Objects <ref> [2] </ref>. Several systems have been built which permit an executing program to move while it is in execution 5 for example Obliq [3], Agent TCL [24], Emerald [16], Telescript [12] 5 These systems are also called Mobile Agents or Itinerant Agents in the literature and TACOMA [14]. <p> In contrast all objects are "Global" objects in Sumatra. Emerald supports object groups and different models of passing parameters to remote method invocations. Emerald runs on a homogeneous network of workstations. Obliq [3] is an object-oriented system that is based on Modula-3 network objects <ref> [2] </ref>. Obliq supports enforces adherence to static scoping in a distributed environment and the provides transmission of closures and objects. Objects in Obliq don't move from a site. However, the state of an object can be cloned and transmitted to another site. Telescript [12] is a commercially available agent system.
Reference: [3] <author> L. Cardelli. </author> <title> A language with distributed scope. </title> <booktitle> In 22 nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <month> Jan. </month> <year> 1995. </year> <note> http://www.research.digital.com/SRC/Obliq/Obliq.html. </note>
Reference-contexts: Our design philosophy for Sumatra was to provide the mechanisms to build adaptive mobile programs. Policy decisions concerning when, where and what move are left to the application. The main feature that distinguishes Suma-tra from previous systems <ref> [3, 6, 24, 13] </ref> that support mobile programs is that all communication and migration happens under application control. Furthermore, combination of distributed objects and thread migration allows applications the flexibility to dynamically choose between moving either data or computation. <p> Movement of passive objects (ie. data) is supported by Java Object Serialization [1] and Modula 3 Network Objects [2]. Several systems have been built which permit an executing program to move while it is in execution 5 for example Obliq <ref> [3] </ref>, Agent TCL [24], Emerald [16], Telescript [12] 5 These systems are also called Mobile Agents or Itinerant Agents in the literature and TACOMA [14]. We examine some of these systems below. Process migration is similar to mobile programs. <p> These are known as Global objects. In contrast all objects are "Global" objects in Sumatra. Emerald supports object groups and different models of passing parameters to remote method invocations. Emerald runs on a homogeneous network of workstations. Obliq <ref> [3] </ref> is an object-oriented system that is based on Modula-3 network objects [2]. Obliq supports enforces adherence to static scoping in a distributed environment and the provides transmission of closures and objects. Objects in Obliq don't move from a site.
Reference: [4] <author> C. ching Chang. </author> <title> Rexdc a remote execution mechanism. </title> <booktitle> In ACM SIGCOMM, </booktitle> <pages> pages 106-115, </pages> <year> 1989. </year>
Reference-contexts: Remote evaluation (or code shipping) has been supported by several systems for example Java [10], REV [17], REXDC <ref> [4] </ref> NCL [15] and the UNIX rsh facility and Avalon/Common Lisp [25]. Movement of passive objects (ie. data) is supported by Java Object Serialization [1] and Modula 3 Network Objects [2].
Reference: [5] <author> D.Sanghi, A.K.Agrawala, O.Gudmundsson, and B.N.Jain. </author> <title> Experimental assessment of end-to end behavior on internet. </title> <type> Technical Report CS-TR-2909, </type> <institution> University of Maryland, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: Similar observations have been made by others <ref> [5] </ref>. Figure 2 (a) illustrates the operation of the filter. Each daemon maintains a cache of current latency estimates for all its currently active monitoring requests. This cache is maintained in a well-known shared memory segment and can be efficiently read by all Sumatra applications executing on the same machine. <p> Application-transparent or system level adaptation to wide variations in network bandwidth has been used successfully by the designers of the CODA file system [18] to improve the performance of applications. Several experimental studies have been conducted on various aspects of Internet performance. Sanghi et al <ref> [5] </ref> present studies on round trip time measurements of UDP packets. Their observations show that round trip times show significant variability with sharp peaks. If the peaks are ignored, the round trip time shows a step change behavior. This is consistent with our observations.
Reference: [6] <author> E.Jul, H.Levy, N.Hutchinson, and A.Black. </author> <title> Fine-grained mobility in the emerald system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(2) </volume> <pages> 109-133, </pages> <month> Feb. </month> <year> 1988. </year>
Reference-contexts: Our design philosophy for Sumatra was to provide the mechanisms to build adaptive mobile programs. Policy decisions concerning when, where and what move are left to the application. The main feature that distinguishes Suma-tra from previous systems <ref> [3, 6, 24, 13] </ref> that support mobile programs is that all communication and migration happens under application control. Furthermore, combination of distributed objects and thread migration allows applications the flexibility to dynamically choose between moving either data or computation.
Reference: [7] <author> E.Zayas. </author> <title> Attacking the process migration bottleneck. </title> <booktitle> In 11th. ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 13-24, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: The difference is that process migration moves the entire execution image of a process in execution. This complicates matters especially for I/O objects [8] and kernel state. Process migration has been used in homogeneous networks of workstations to provide better performance, utilization and load distribution <ref> [7, 8, 20, 26] </ref> Several distributed object systems that support mobility have been built. Our system design has been most influenced by Emerald, Obliq and Telescript which we describe briefly below. Emerald [16] is an object-based language and system designed for the construction of distributed programs.
Reference: [8] <author> F.Douglis and J.Ousterhout. </author> <title> Process migration in the Sprite operating system. </title> <booktitle> In 7 th International Conference on Dis-ributed Computing Systems, </booktitle> <pages> pages 18-25, </pages> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: We examine some of these systems below. Process migration is similar to mobile programs. The difference is that process migration moves the entire execution image of a process in execution. This complicates matters especially for I/O objects <ref> [8] </ref> and kernel state. Process migration has been used in homogeneous networks of workstations to provide better performance, utilization and load distribution [7, 8, 20, 26] Several distributed object systems that support mobility have been built. <p> The difference is that process migration moves the entire execution image of a process in execution. This complicates matters especially for I/O objects [8] and kernel state. Process migration has been used in homogeneous networks of workstations to provide better performance, utilization and load distribution <ref> [7, 8, 20, 26] </ref> Several distributed object systems that support mobility have been built. Our system design has been most influenced by Emerald, Obliq and Telescript which we describe briefly below. Emerald [16] is an object-based language and system designed for the construction of distributed programs.
Reference: [9] <author> R. A. Golding. </author> <title> End-to-end performance prediction for the internet (work in progress). </title> <type> Technical Report UCSC-CRL-92-26, </type> <institution> University of California at Santa Cruz, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: Paxson's study concludes that traffic various quantities of interest such as packet inter arrival time may be explained with a self similar model. Golding <ref> [9] </ref> has investigated methods to predict RTT measurements and bandwidth using moving averages. Their work implies that bandwidth estimation using previous observations alone as a basis for prediction does not work well. Carter and Crovella [19] propose a bandwidth probing scheme to estimate the bandwidth of a connection.
Reference: [10] <author> J. Gosling and H. McGilton. </author> <title> The Java language environment white paper, </title> <note> 1995. Available at : http://www.java.sun.com. </note>
Reference-contexts: We investigate these issues in the context of Sumatra, an extension of the J ava 1 programming environment <ref> [10] </ref> that provides a flexible substrate for adaptive mobile programs. Since, mobile programs are scarce, we developed our own mobile internet chat server. This application, called adaptalk, monitors the latencies between all participants and locates the chat server so as to minimize the maximum response time. <p> A rough classification may be (1) systems that support remote evaluation; (2) systems that support passive object migration; (3) systems that support active thread migration; and (4) systems that support a combination of these features. Remote evaluation (or code shipping) has been supported by several systems for example Java <ref> [10] </ref>, REV [17], REXDC [4] NCL [15] and the UNIX rsh facility and Avalon/Common Lisp [25]. Movement of passive objects (ie. data) is supported by Java Object Serialization [1] and Modula 3 Network Objects [2].
Reference: [11] <author> H.E.Bal, J.G.Stiener, and A.S.Tanenbaum. </author> <title> Programming languages for distributed computing. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3), </volume> <year> 1989. </year>
Reference-contexts: The system supports security by public key encryption methods. In addition to these systems that support mobility, a number of distributed programming systems have been developed to ease the task of developing communicating programs. Bal,Stienter and Tanenbaum give a survey of these systems <ref> [11] </ref>. While the design of Sumatra was influenced by several other systems such as Emerald, Obliq and Telescript, Suma-tra differs from these systems in a few respects. The most significant difference is that data movement is under application control. There is no automatic motion of objects.
Reference: [12] <author> G. M. Inc. </author> <title> Telescript Technology: Mobile Agents. </title> <note> Available at : http://www.genmagic.com/Telescript/Whitepapers. </note>
Reference-contexts: Movement of passive objects (ie. data) is supported by Java Object Serialization [1] and Modula 3 Network Objects [2]. Several systems have been built which permit an executing program to move while it is in execution 5 for example Obliq [3], Agent TCL [24], Emerald [16], Telescript <ref> [12] </ref> 5 These systems are also called Mobile Agents or Itinerant Agents in the literature and TACOMA [14]. We examine some of these systems below. Process migration is similar to mobile programs. The difference is that process migration moves the entire execution image of a process in execution. <p> Obliq supports enforces adherence to static scoping in a distributed environment and the provides transmission of closures and objects. Objects in Obliq don't move from a site. However, the state of an object can be cloned and transmitted to another site. Telescript <ref> [12] </ref> is a commercially available agent system. It supports the notion of agents, places and Engines. An agent is a mobile program. A place is a physical location. An Engine is an interpreter in an infinite loop (as in Suma-tra).
Reference: [13] <author> G. M. Inc. </author> <title> Telescript Language Language Reference and Users Guide, </title> <note> 1995. Available at : http://www.genmagic.com/Telescript/TDE. </note>
Reference-contexts: Our design philosophy for Sumatra was to provide the mechanisms to build adaptive mobile programs. Policy decisions concerning when, where and what move are left to the application. The main feature that distinguishes Suma-tra from previous systems <ref> [3, 6, 24, 13] </ref> that support mobile programs is that all communication and migration happens under application control. Furthermore, combination of distributed objects and thread migration allows applications the flexibility to dynamically choose between moving either data or computation.
Reference: [14] <author> D. Johansen, R. van Renesse, and F. B. Schneider. </author> <title> An introduction to the tacoma distributed system version 1.0. </title> <type> Technical Report 95-23, </type> <institution> University of Tromso, </institution> <year> 1995. </year> <note> Available at : http://tklab1.cs.uit.no/DOS/Tacoma/Publications.html. </note>
Reference-contexts: Several systems have been built which permit an executing program to move while it is in execution 5 for example Obliq [3], Agent TCL [24], Emerald [16], Telescript [12] 5 These systems are also called Mobile Agents or Itinerant Agents in the literature and TACOMA <ref> [14] </ref>. We examine some of these systems below. Process migration is similar to mobile programs. The difference is that process migration moves the entire execution image of a process in execution. This complicates matters especially for I/O objects [8] and kernel state. <p> The system then notifies it when these temporary restrictions are reached. Agents may meet at pre-arranged meeting places and exchange information. Telescript does not support remote references. We have not as yet addressed the problems of resource containment and security in Sumatra. The TACOMA system <ref> [14] </ref> defines an execution model where agents can migrate from site to site and rendezvous with each other. Data is packaged and placed into folders which agents carry from site to site. Agents may exchange folders when they rendezvous.
Reference: [15] <author> J.R.Falcone. </author> <title> A programmable interface language for heterogeneous systems. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 5(4) </volume> <pages> 330-351, </pages> <month> Nov. </month> <year> 1987. </year>
Reference-contexts: Remote evaluation (or code shipping) has been supported by several systems for example Java [10], REV [17], REXDC [4] NCL <ref> [15] </ref> and the UNIX rsh facility and Avalon/Common Lisp [25]. Movement of passive objects (ie. data) is supported by Java Object Serialization [1] and Modula 3 Network Objects [2].
Reference: [16] <author> E. Jul, H. Levy, N. Hutchinson, and A. Black. </author> <title> Fine-grained mobility in the emerald system. </title> <booktitle> In Proceedings of the Eleventh Symposium on Operating Systems Principles, </booktitle> <address> Austin, Texas, </address> <year> 1987. </year>
Reference-contexts: Movement of passive objects (ie. data) is supported by Java Object Serialization [1] and Modula 3 Network Objects [2]. Several systems have been built which permit an executing program to move while it is in execution 5 for example Obliq [3], Agent TCL [24], Emerald <ref> [16] </ref>, Telescript [12] 5 These systems are also called Mobile Agents or Itinerant Agents in the literature and TACOMA [14]. We examine some of these systems below. Process migration is similar to mobile programs. The difference is that process migration moves the entire execution image of a process in execution. <p> Our system design has been most influenced by Emerald, Obliq and Telescript which we describe briefly below. Emerald <ref> [16] </ref> is an object-based language and system designed for the construction of distributed programs. Emerald supports a "pure" object oriented model. An explicit goal of Emerald is support for object mobility. Objects in Emerald can freely move within the system to take advantage of distribution and dynamically changing environments.
Reference: [17] <author> J.W.Stamos and D.K.Glifford. </author> <title> Implementing remote evaluation. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 16(7) </volume> <pages> 710-722, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Remote evaluation (or code shipping) has been supported by several systems for example Java [10], REV <ref> [17] </ref>, REXDC [4] NCL [15] and the UNIX rsh facility and Avalon/Common Lisp [25]. Movement of passive objects (ie. data) is supported by Java Object Serialization [1] and Modula 3 Network Objects [2].
Reference: [18] <author> L.B.Mummert, M.R.Ebling, and M.Satyanarayanan. </author> <title> Ex--ploiting Weak Connectivity for Mobile File Access. </title> <booktitle> In Proceedings of the 15th. A.C.M Symposium on Operating Systems Principles, </booktitle> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: We have therefore not as yet addressed the important issues of security and resource usage containment our implementation. Application-transparent or system level adaptation to wide variations in network bandwidth has been used successfully by the designers of the CODA file system <ref> [18] </ref> to improve the performance of applications. Several experimental studies have been conducted on various aspects of Internet performance. Sanghi et al [5] present studies on round trip time measurements of UDP packets. Their observations show that round trip times show significant variability with sharp peaks.
Reference: [19] <author> R. L.Carter and M. E.Crovella. </author> <title> Dynamic server selection using bandwidth probing in wide-area networks. </title> <type> Technical Report BU-CS-96-007, </type> <institution> Boston University, </institution> <year> 1996. </year>
Reference-contexts: Golding [9] has investigated methods to predict RTT measurements and bandwidth using moving averages. Their work implies that bandwidth estimation using previous observations alone as a basis for prediction does not work well. Carter and Crovella <ref> [19] </ref> propose a bandwidth probing scheme to estimate the bandwidth of a connection. They observe that congestion is usually caused by queuing delays at a bottleneck link. The base bandwidth of the connection is estimated by the speed of the bottleneck link.
Reference: [20] <author> M. Litzkow and M. Livny. </author> <title> Experiences with the condor distributed batch system. </title> <booktitle> In IEEE Workshop on Experimental Distributed Systems, </booktitle> <address> Huntsville, Al., </address> <year> 1990. </year> <note> Available at : http://www.cs.wisc.edu/condor/ publications.html. </note>
Reference-contexts: The difference is that process migration moves the entire execution image of a process in execution. This complicates matters especially for I/O objects [8] and kernel state. Process migration has been used in homogeneous networks of workstations to provide better performance, utilization and load distribution <ref> [7, 8, 20, 26] </ref> Several distributed object systems that support mobility have been built. Our system design has been most influenced by Emerald, Obliq and Telescript which we describe briefly below. Emerald [16] is an object-based language and system designed for the construction of distributed programs.
Reference: [21] <author> V. Paxson. </author> <title> End-to-end routing behavior in the internet. </title> <booktitle> In ACM SIGCOMM, </booktitle> <month> Aug. </month> <year> 1996. </year> <note> Available at : http://ftp.ee.lbl.gov/nrg-papers.html. </note>
Reference-contexts: Sanghi et al [5] present studies on round trip time measurements of UDP packets. Their observations show that round trip times show significant variability with sharp peaks. If the peaks are ignored, the round trip time shows a step change behavior. This is consistent with our observations. Paxson <ref> [21, 22] </ref> has experimentally studied the various aspects of Internet performance. His study on routing concludes that in the Internet, the majority of routes persist for days. Further, approximately half of the connections displayed routing asymmetry.
Reference: [22] <author> V. Paxson and S. Floyd. </author> <title> Wide-area traffic: The failure of posson modeling. </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> 3(3) </volume> <pages> 226-244, </pages> <year> 1995. </year> <note> Available at : http://ftp.ee.lbl.gov/nrg-papers.html. </note>
Reference-contexts: Sanghi et al [5] present studies on round trip time measurements of UDP packets. Their observations show that round trip times show significant variability with sharp peaks. If the peaks are ignored, the round trip time shows a step change behavior. This is consistent with our observations. Paxson <ref> [21, 22] </ref> has experimentally studied the various aspects of Internet performance. His study on routing concludes that in the Internet, the majority of routes persist for days. Further, approximately half of the connections displayed routing asymmetry.
Reference: [23] <author> M. Ranganathan, A. Acharya, and J. Saltz. </author> <title> Distributed resource monitors for mobile objects. </title> <booktitle> In International Workshop on Operating System Support for Object Oriented Systems, </booktitle> <year> 1996. </year> <note> Available at : http://www.cs.umd.edu/ acha. </note>
Reference-contexts: Each experiment was run for 1000 seconds with one ping per second for all links. utilization and 640 bytes/sec data transfer. 3 Further details about Komodo are presented in <ref> [23] </ref>. 4 Adaptalk: An adaptive internet chat ap plication Adaptalk is a relatively simple network chat application built using Sumatra and Komodo. It allows multiple users to have an online conversation; new participants can join an ongoing conversation at any point; multiple independent conversations can be held.
Reference: [24] <author> R.S.Gray. </author> <title> Agent tcl: A flexible and secure mobile-agent system. </title> <booktitle> In Proceedings of the Fourth Annual Tcl/Tk Workshop (TCL 96), </booktitle> <month> July </month> <year> 1996. </year> <note> Available at :http://www.cs.dartmouth.edu/ agent/papers.html. </note>
Reference-contexts: Our design philosophy for Sumatra was to provide the mechanisms to build adaptive mobile programs. Policy decisions concerning when, where and what move are left to the application. The main feature that distinguishes Suma-tra from previous systems <ref> [3, 6, 24, 13] </ref> that support mobile programs is that all communication and migration happens under application control. Furthermore, combination of distributed objects and thread migration allows applications the flexibility to dynamically choose between moving either data or computation. <p> Movement of passive objects (ie. data) is supported by Java Object Serialization [1] and Modula 3 Network Objects [2]. Several systems have been built which permit an executing program to move while it is in execution 5 for example Obliq [3], Agent TCL <ref> [24] </ref>, Emerald [16], Telescript [12] 5 These systems are also called Mobile Agents or Itinerant Agents in the literature and TACOMA [14]. We examine some of these systems below. Process migration is similar to mobile programs. <p> TACOMA implements a rear guard agent to deal with site failures. The TACOMA notion of folders is similar to the notion of ObjectGroup in Sumatra. Agents pay for services using electronic cash units. We have not addressed the problem of payment for services in Sumatra. Agent TCL <ref> [24] </ref> is a TCL based agent system which provides state mobility. Communication between agents in Agent TCL happens through explicit message passing (send and receive). The system supports security by public key encryption methods.
Reference: [25] <editor> S.M.Clamen, L.D.Lebengood, S.M.Nettles, and J.M.Wing. </editor> <booktitle> Reliable distributed computing with avalon/common lisp. In International Conference on Computer Languages, </booktitle> <pages> pages 169-179, </pages> <address> New Orleans, LA, </address> <year> 1990. </year>
Reference-contexts: Remote evaluation (or code shipping) has been supported by several systems for example Java [10], REV [17], REXDC [4] NCL [15] and the UNIX rsh facility and Avalon/Common Lisp <ref> [25] </ref>. Movement of passive objects (ie. data) is supported by Java Object Serialization [1] and Modula 3 Network Objects [2].
Reference: [26] <author> J. M. Smith. </author> <title> A survey of process migration mechanisms. </title> <booktitle> In Operating Systems Review, </booktitle> <month> May </month> <year> 1988. </year>
Reference-contexts: The difference is that process migration moves the entire execution image of a process in execution. This complicates matters especially for I/O objects [8] and kernel state. Process migration has been used in homogeneous networks of workstations to provide better performance, utilization and load distribution <ref> [7, 8, 20, 26] </ref> Several distributed object systems that support mobility have been built. Our system design has been most influenced by Emerald, Obliq and Telescript which we describe briefly below. Emerald [16] is an object-based language and system designed for the construction of distributed programs.
References-found: 26

