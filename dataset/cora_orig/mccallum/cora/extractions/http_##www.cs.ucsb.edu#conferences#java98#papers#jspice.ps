URL: http://www.cs.ucsb.edu/conferences/java98/papers/jspice.ps
Refering-URL: http://www.cs.ucsb.edu/conferences/java98/program.html
Root-URL: http://www.cs.ucsb.edu
Email: Dennis.DeRykeg@Sun.COM  
Title: JSPICE: A Component-based Distributed Java Front-End For SPICE  
Author: Dan Souder, Morgan Herrington, Rajat P. Garg and Dennis DeRyke fDan.Souder, Morgan.Herrington, Rajat.Garg, 
Date: February 28, 1998  
Note: To be Presented at the ACM 1998 Workshop on Java for High-Performance  
Web: www.sun.com  
Address: 901, San Antonio Road, Palo Alto, CA 94303  Palo Alto, California  
Affiliation: Market Development Engineering Sun Microsystems, Inc.  Network Computing  
Abstract: The design and implementation of a component-based distributed Java front-end for the Berke-ley SPICE circuit-simulation program is described. The front-end is architected as a client-server application implemented via the Remote Method Invocation (RMI) API. A graphical user-interface is implemented on the client-side which has multiple components for command and control, graphing, text-editing and communication with the server. JavaBeans API is used as the underlying component model. On the server side, the native SPICE code (in C language) is converted into a dynamic library and is interfaced with the Java Server code using Java Native Interface (JNI) API. Implementation issues related to modifications in the SPICE code enabling multiple invocations as a shared object, efficient input/output of simulation data from the Java code, waveform compression and extraction for display on client side, real-time transfer of SPICE generated runtime messages from the server to client etc. are discussed. Benchmark results comparing performance of file input using various Java I/O classes are presented. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gosling, J., Joy, W. & Steele, G.; </author> <title> Java Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mas-sachusetts, </address> <year> (1996). </year>
Reference: [2] <author> Cornell, G. & Horstmann, C.S.; </author> <title> Core Java. The SunSoft Press, Mountain Views, </title> <address> California, </address> <year> (1997). </year>
Reference: [3] <institution> JavaBeans API definitions; www.javasoft.com/beans/docs. </institution>
Reference-contexts: Capable of running on diverse devices such as retail point-of-sale scanners and consumer electronics products, Java promises to impact the way we all do business. Further, the development of a component-based architecture, namely, Java Beans API (see <ref> [3] </ref>) additionally promises to decrease development costs by accelerating software design based on reusable modules. In one sense, Java Beans is a convention for software developers to follow in the naming and packaging of their functions.
Reference: [4] <institution> JavaStudio; www.sun.com/studio. </institution>
Reference-contexts: In one sense, Java Beans is a convention for software developers to follow in the naming and packaging of their functions. The incentive to adhere to this convention is that the resulting software components can be used as building blocks through visual application builder tools such as JavaStudio (see <ref> [4] </ref>) and the Bean Developers' Kit [5]. However, Java still faces many challenges. Performance is a purported short-coming and there is ample skepticism in the technical computing community regarding Java's applicability to large, complex applications, especially integration with legacy systems. <p> This is part of an ongoing effort and the results will be reported in a later manuscript. 5 Finally, some comments are in order on the use of Integrated Development Environment's (IDE), such as Java Studio (see <ref> [4] </ref>) in the development of JSPICE. Figure 4 is a screen shot of Java Studio, Sun's visual Java Beans application builder tool. The design window (in the lower right corner of the diagram) contains icons which represent individual beans.
Reference: [5] <institution> Beans Development Kit 1.0; www.javasoft.com/beans/software. </institution>
Reference-contexts: The incentive to adhere to this convention is that the resulting software components can be used as building blocks through visual application builder tools such as JavaStudio (see [4]) and the Bean Developers' Kit <ref> [5] </ref>. However, Java still faces many challenges. Performance is a purported short-coming and there is ample skepticism in the technical computing community regarding Java's applicability to large, complex applications, especially integration with legacy systems. Consequently, at present there are few Java based scientific computing applications.
Reference: [6] <author> Cherry, Y.; MAJIC: </author> <title> A distributed VLSI Layout tool. </title> <booktitle> Presented at the ACM 1997 Conference on Java for Science and Engineering, </booktitle> <address> Las Vegas, Nevada, June 1997; www.npac.syr.edu/projects/javaforcse. </address>
Reference-contexts: Consequently, at present there are few Java based scientific computing applications. A noteworthy Java application in Electronic Design Automation (EDA) area is the MAJIC VLSI layout editing tool described in <ref> [6] </ref>, designed to support distributed VLSI design and collaboration. The present work is motivated by the desire to explore the applicability of Java's distributed computing framework to an existing engineering code.
Reference: [7] <author> Nagel, L.W.; </author> <title> SPICE2: A Computer Program to Simulate Semiconductor Circuits, </title> <type> Technical Report No. </type> <institution> ERL-M520, University of California, Berkeley, </institution> <year> 1975. </year>
Reference-contexts: The present work is motivated by the desire to explore the applicability of Java's distributed computing framework to an existing engineering code. We consider the publically available Berkeley SPICE (Simulation Program with Integrated Circuit Emphasis) program (see <ref> [7] </ref>), one of the most 1 widely used and perhaps the de facto standard circuit-simulation tool. Arising from research at the Universtity of California, Berkeley, in the early Seventies, SPICE represents a large legacy system that grew in popularity with the advent of the personal computer.
Reference: [8] <institution> SPICE Version 3F3 User's Guide. University of California, Berkeley, </institution> <year> 1993. </year>
Reference-contexts: The original SPICE program was written in FORTRAN but in the mid-Eighties it was rewritten in the C language. In the present work, the C based version 3f3 is used (see <ref> [8] </ref>). The SPICE input files are ASCII text (also called "netlist" files), which describe the circuit to be analyzed.
Reference: [9] <author> Orfali, R. and Harkey, D.; </author> <title> Client/Server Programming with Java and CORBA. </title> <publisher> John Wiley and Sons, </publisher> <year> 1997. </year>
Reference-contexts: An important implementation issue was the selection of the interprocess communication between the client and the server. Possible choices included sockets, Common Object Request Broker Architecture (CORBA) (see <ref> [9] </ref>), Remote Procedure Call (RPC), shared memory and Java RMI ([10, 11]). A comparative evaluation of the usefullness of the various approaches is a major project it its own right and was not pursued here.
Reference: [10] <author> Wollrath, A., Waldo, J. & Riggs, R.; </author> <title> Java Remote Methods Invocation System. </title> <note> Submitted to IEEE Micro. </note> <year> (1997). </year>
Reference: [11] <author> Sutherland, D.; </author> <title> Distributing Java across your Enterprise. In Internet and Java Advisor, </title> <journal> vol. </journal> <volume> 1, no. 10, </volume> <year> (1996). </year>
Reference: [12] <author> Atwood, C.A., Garg, R.P. & DeRyke, D.; </author> <title> A Prototype Computational Fluid Dynamics Case Study in Java. In Concurrency: </title> <journal> Practice and Experience, </journal> <volume> vol. 9(11), </volume> <year> (1997). </year>
Reference: [13] <institution> Java Platform 1.1.5 Core API Spiecification; www.javasoft.com/products/jdk/1.1/docs/api/. </institution>
Reference-contexts: We have added a "raw-file" output object on the server to convert SPICE binary "raw-files" into Java binary files; this provides the user with the option to generate a portable simulation database. The java.io package in JDK 1.1 API (see <ref> [13] </ref>) provides a variety of classes for input/output from files. As shown in [14], efficient file I/O in java is tricky and is often the bottleneck to high performance. We performed benchmarks comparing different java.io classes for both ASCII and binary SPICE "raw-files".
Reference: [14] <institution> Java on Solaris 2.6: </institution> <note> A Whitepaper. www.sun.com/solaris/java/wp-java/. </note>
Reference-contexts: The java.io package in JDK 1.1 API (see [13]) provides a variety of classes for input/output from files. As shown in <ref> [14] </ref>, efficient file I/O in java is tricky and is often the bottleneck to high performance. We performed benchmarks comparing different java.io classes for both ASCII and binary SPICE "raw-files".
Reference: [15] <institution> The Ultra1 Architecture Technical White Paper, </institution> <note> www.sun.com/desktop/products/Ultra1. </note>

References-found: 15

