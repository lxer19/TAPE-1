URL: http://ci.etl.go.jp/~miyasita/publications/etfa96.ps
Refering-URL: http://ci.etl.go.jp/~miyasita/projects/CAMPS.html
Root-URL: 
Title: A Distributed Architecture for Planning and Scheduling that Learns through Negotiation Cases Preliminary Report  
Author: Kazuo Miyashita Masahiro Hori 
Address: 1-1-4, Umezono, Tsukuba Ibaraki 305, Japan  1623-14, Shimo-Tsuruma, Yamato Kanagawa 242, Japan  
Affiliation: Electrotechnical Laboratory  Tokyo Research Laboratory, IBM Japan  
Abstract: In this paper, we propose a new integrated architecture for distributed planning and scheduling that exploits constraints for problem decomposition and coordination. One of the goals in our research is to develop an efficient method to solve densely constrained planning/scheduling problems in a distributed manner. And the other goal is to find an effective way to acquire useful context-dependent knowledge for improving problem solving performance dynamically in the course of interac tions among problem solving agents.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Pauline M. Berry. </author> <title> A Predictive Model for Satisfying Conflicting Objectives in Scheduling Problems. </title> <type> PhD thesis, </type> <institution> University of Strathclyde, </institution> <year> 1991. </year>
Reference-contexts: After fixing the time windows for jobs, the planning agent distributes the estimated load of operations of all the jobs to each resource (i.e. to each corresponding scheduling agent). There have been several research activities which analyze global resource capacity for estimating operation loads to each resource ( <ref> [ 14; 1; 12 ] </ref> ). But most of them have been done under a single scheduling agent scenario with a few exceptions such as [ 16; 13 ] .
Reference: [2] <author> Keith S. Decker, Edmund H. Durfee, and Victor R. Lesser. </author> <title> Evaluating research in cooperative distributed problem solving. </title> <editor> In Les Gasser and Michael N. Huhns, editors, </editor> <booktitle> Distributed Artificial Intelligence, Vol.2, </booktitle> <pages> pages 485-519. </pages> <publisher> Pitman, </publisher> <address> London, </address> <year> 1989. </year>
Reference-contexts: 1 Introduction In the research of distributed artificial intelligence (DAI), there has been research on cooperative distributed problem solving (CDPS) <ref> [ 2 ] </ref> or coordinated problem solving [ 4 ] , which involves a loosely coupled distributed network of semi-autonomous agents that are capable of sophisticated problem solving and cooperatively interact with other agents to solve a problem with a single goal [ 7 ] .
Reference: [3] <author> Simon French. </author> <title> Sequencing and Scheduling: An Introduction to the Mathematics of the Job-Shop. </title> <publisher> Ellis Horwood, </publisher> <address> London, </address> <year> 1982. </year>
Reference-contexts: Job shop scheduling is a well-known NP-complete problem <ref> [ 3 ] </ref> . In job shop scheduling, each job consists of a set of operations with fixed duration to be scheduled according to a partial operation ordering.
Reference: [4] <author> Les Gasser and Randall W. Hill. </author> <title> Engineering coordinated problem solvers. </title> <booktitle> Annual Review of Computer Science, </booktitle> <volume> 4 </volume> <pages> 203-253, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction In the research of distributed artificial intelligence (DAI), there has been research on cooperative distributed problem solving (CDPS) [ 2 ] or coordinated problem solving <ref> [ 4 ] </ref> , which involves a loosely coupled distributed network of semi-autonomous agents that are capable of sophisticated problem solving and cooperatively interact with other agents to solve a problem with a single goal [ 7 ] .
Reference: [5] <author> Katsutoshi Hirayama and Junnichi Toyoda. </author> <title> Forming coalitions for breaking deadlocks. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <pages> pages 155-162. </pages> <publisher> AAAI, </publisher> <year> 1995. </year>
Reference-contexts: Among theoretical research of distributed constraint satisfaction, almost none has fl email: miyasita@etl.go.jp y email: hori@trl.ibm.co.jp developed the effective method for solving densely constrained problems such as production scheduling problems <ref> [ 5; 17 ] </ref> . And in the study of distributed scheduling, the aim of the systems has been to find a feasible solution (CORTES [ 16 ] ) or a satisfactory solution in terms of a simple objective (e.g. time-shift preferences in DIS-DSS [ 13 ] ).
Reference: [6] <author> M. Hori and T. Yoshida. Scoop: </author> <title> An object-oriented framework for production scheduling systems. </title> <booktitle> In Proceedins of International Conference on Advances in Production Management Systems, </booktitle> <year> 1996. </year>
Reference-contexts: In the same way, problem-solving strategies are refined to be domain-specific tactics such as overtime shift and job cancel. Fig. 6 shows a portion of a domain model for production scheduling. The model has been used for the development of operational scheduling systems <ref> [ 6; 18 ] </ref> , in which this model was quite effective in explicating the structure of the application domains.
Reference: [7] <author> V.R. Lesser and D.D. Corkill. </author> <title> Distributed problem solving. In S.C. </title> <editor> Shapiro, editor, </editor> <booktitle> Encyclopedia in Artificial Intelligence. </booktitle> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: been research on cooperative distributed problem solving (CDPS) [ 2 ] or coordinated problem solving [ 4 ] , which involves a loosely coupled distributed network of semi-autonomous agents that are capable of sophisticated problem solving and cooperatively interact with other agents to solve a problem with a single goal <ref> [ 7 ] </ref> . The planning and scheduling activities in a large enterprise can be modeled as CDPS. The goal of planning/scheduling systems is, in its broadest sense, to maximize the profit of the enterprise.
Reference: [8] <author> Jyi-Shane Liu. </author> <title> Coordination of Multiple Agents in Distributed Manufacturing Scheduling. </title> <type> PhD thesis, </type> <institution> The Robotics Institute, School of Computer Science, Carnegie Mellon University, </institution> <year> 1996. </year>
Reference-contexts: The core of process is the first and fourth step: at these steps agents must cooperatively accomplish several tasks such as problem decomposition and conflict resolution . In Anchor & Ascend approach by Liu <ref> [ 8 ] </ref> , the specific problem structure such as bottleneck resources is used to control search for a near-optimal solution by several agents while keeping search space of the agents tractable.
Reference: [9] <author> S. Minton, M. D. Johnston, A. B. Philips, and P. Laird. </author> <title> Solving large-scale constraint satisfaction and scheduling problems using a heuristic repair method. </title> <booktitle> In Proceedings of the Eighth National Conference on Artificial Intelligence, </booktitle> <pages> pages 17-24, </pages> <address> Boston, MA, 1990. </address> <publisher> AAAI. </publisher>
Reference-contexts: Negotiation for Conflict/Defect Resolution After schedule integration, when conflicts are detected among each agent's schedule, they are to be resolved through negotiations among scheduling agents by revising schedules locally. This process is similar to the repair-based scheduling approach <ref> [ 9; 19; 11 ] </ref> , but it is more complicated because of distributed nature of the system, i.e. many conflicts can/should be detected and solved simultaneously, thus resolution processes on the different sets of conflicts may interact each other and result in divergence.
Reference: [10] <author> Kazuo Miyashita. </author> <title> A Case-Based Approach to Improve Quality and Efficiency in Ill-Structured Optimization: An Application to Job Shop Scheduling. </title> <type> PhD thesis, </type> <institution> Osaka University, </institution> <year> 1994. </year>
Reference-contexts: To decide local actions for conflicts/defects resolu tion (tactics) 5. To direct search for decomposition or sub-solution avoiding critical failures (failure avoidance) For the purpose of acquiring such knowledge, we are planning to apply case-based learning techniques extending CABINS architecture <ref> [ 10 ] </ref> . Integrating CBR with distributed planning/scheduling stems from a variety of motivations. Although distributed planning/scheduling is an ill-structured domain, we assume that it exhibits domain regularities that could be captured, albeit only approximately, in a case.
Reference: [11] <author> Kazuo Miyashita and Katia Sycara. CABINS: </author> <title> A framework of knowledge acquisition and iterative revision for schedule improvement and reactive repair. </title> <journal> Artificial Intelligence, </journal> <volume> 76(1-2):377-426, </volume> <year> 1995. </year>
Reference-contexts: Negotiation for Conflict/Defect Resolution After schedule integration, when conflicts are detected among each agent's schedule, they are to be resolved through negotiations among scheduling agents by revising schedules locally. This process is similar to the repair-based scheduling approach <ref> [ 9; 19; 11 ] </ref> , but it is more complicated because of distributed nature of the system, i.e. many conflicts can/should be detected and solved simultaneously, thus resolution processes on the different sets of conflicts may interact each other and result in divergence.
Reference: [12] <author> N. Muscettola. </author> <title> Scheduling by iterative partition of bottleneck conflicts. </title> <booktitle> In Proceedings of the Ninth Conference on Artificial Intelligence for Applications, </booktitle> <pages> pages 49-55, </pages> <address> Orlando, FL, </address> <month> March </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: After fixing the time windows for jobs, the planning agent distributes the estimated load of operations of all the jobs to each resource (i.e. to each corresponding scheduling agent). There have been several research activities which analyze global resource capacity for estimating operation loads to each resource ( <ref> [ 14; 1; 12 ] </ref> ). But most of them have been done under a single scheduling agent scenario with a few exceptions such as [ 16; 13 ] .
Reference: [13] <author> Daniel E. Neiman, David W. Hildum, and Victor R. Lessor. </author> <title> Expoliting meta-level information in a distributed scheduling system. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <pages> pages 394-400, </pages> <address> Seattle, WA, 1994. </address> <publisher> AAAI. </publisher>
Reference-contexts: And in the study of distributed scheduling, the aim of the systems has been to find a feasible solution (CORTES [ 16 ] ) or a satisfactory solution in terms of a simple objective (e.g. time-shift preferences in DIS-DSS <ref> [ 13 ] </ref> ). In those systems, solutions are built constructively by scheduling agents which communicate abstract resource profiles and meta-level information (such as lending possibility). <p> There have been several research activities which analyze global resource capacity for estimating operation loads to each resource ( [ 14; 1; 12 ] ). But most of them have been done under a single scheduling agent scenario with a few exceptions such as <ref> [ 16; 13 ] </ref> . Moreover, those systems hypothesize that all the necessary data for load estimation is available a priori and doesn't change over time.
Reference: [14] <author> Norman Sadeh. </author> <title> Look-Ahead Techniques for Micro-Opportunistic Job Shop Scheduling. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <year> 1991. </year>
Reference-contexts: After fixing the time windows for jobs, the planning agent distributes the estimated load of operations of all the jobs to each resource (i.e. to each corresponding scheduling agent). There have been several research activities which analyze global resource capacity for estimating operation loads to each resource ( <ref> [ 14; 1; 12 ] </ref> ). But most of them have been done under a single scheduling agent scenario with a few exceptions such as [ 16; 13 ] .
Reference: [15] <author> Katia Sycara. </author> <title> Resolving adversarial conflicts: An approach integrating case-based and analytic methods. </title> <type> PhD thesis, </type> <institution> School of Information and Computer Science, Georgia Institute of Technology, </institution> <address> GA, </address> <year> 1987. </year>
Reference-contexts: Negotiation is computation-ally expensive, and knowledge to control negotiation is very difficult to acquire since it is highly complex and context-dependent <ref> [ 15 ] </ref> . 3.1 Negotiation Process The coordination process in our system consists of the following four steps (see Fig. 3): (1) decomposing a problem into mutually interrelated sub-problems and imposing some constraints on sub-problems from a global objective point of view, (2) solving sub-problems independently, (3) detecting conflicts and
Reference: [16] <author> Katia P. Sycara, Steven F. Roth, Norman Sadeh, and Mark S. Fox. </author> <title> Resource allocation in distributed factory scheduling. </title> <journal> IEEE Expert, </journal> <volume> 6(1) </volume> <pages> 29-40, </pages> <year> 1991. </year>
Reference-contexts: And in the study of distributed scheduling, the aim of the systems has been to find a feasible solution (CORTES <ref> [ 16 ] </ref> ) or a satisfactory solution in terms of a simple objective (e.g. time-shift preferences in DIS-DSS [ 13 ] ). In those systems, solutions are built constructively by scheduling agents which communicate abstract resource profiles and meta-level information (such as lending possibility). <p> There have been several research activities which analyze global resource capacity for estimating operation loads to each resource ( [ 14; 1; 12 ] ). But most of them have been done under a single scheduling agent scenario with a few exceptions such as <ref> [ 16; 13 ] </ref> . Moreover, those systems hypothesize that all the necessary data for load estimation is available a priori and doesn't change over time.
Reference: [17] <author> Makoto Yokoo, Edmund H. Durfee, Toru Ishida, and Kazuhiro Kuwabara. </author> <title> Distributed constraint satisfaction for formalizing distributed problem solving. </title> <booktitle> In Proceedings of the Twelfth International Conference on Distributed Computing Systems, </booktitle> <pages> pages 614-621, </pages> <year> 1992. </year>
Reference-contexts: Among theoretical research of distributed constraint satisfaction, almost none has fl email: miyasita@etl.go.jp y email: hori@trl.ibm.co.jp developed the effective method for solving densely constrained problems such as production scheduling problems <ref> [ 5; 17 ] </ref> . And in the study of distributed scheduling, the aim of the systems has been to find a feasible solution (CORTES [ 16 ] ) or a satisfactory solution in terms of a simple objective (e.g. time-shift preferences in DIS-DSS [ 13 ] ).
Reference: [18] <author> T. Yoshida and M. Hori. </author> <title> Adaptation of a production scheduling framework to distributed work environments. </title> <booktitle> In Proceedings of The Ninth International Conference on Industrial & Engineering Applications of Artificial Intelligence & Expert Systems, </booktitle> <year> 1996. </year>
Reference-contexts: In the same way, problem-solving strategies are refined to be domain-specific tactics such as overtime shift and job cancel. Fig. 6 shows a portion of a domain model for production scheduling. The model has been used for the development of operational scheduling systems <ref> [ 6; 18 ] </ref> , in which this model was quite effective in explicating the structure of the application domains.
Reference: [19] <author> M. Zweben, E. Davis, B. Daun, and M. Deale. </author> <title> Rescheduling with iterative repair. </title> <booktitle> In Proceedings of AAAI-92 workshop on Production Planning, Scheduling and Control, </booktitle> <address> San Jose, CA, 1992. </address> <publisher> AAAI. </publisher>
Reference-contexts: Negotiation for Conflict/Defect Resolution After schedule integration, when conflicts are detected among each agent's schedule, they are to be resolved through negotiations among scheduling agents by revising schedules locally. This process is similar to the repair-based scheduling approach <ref> [ 9; 19; 11 ] </ref> , but it is more complicated because of distributed nature of the system, i.e. many conflicts can/should be detected and solved simultaneously, thus resolution processes on the different sets of conflicts may interact each other and result in divergence.
References-found: 19

