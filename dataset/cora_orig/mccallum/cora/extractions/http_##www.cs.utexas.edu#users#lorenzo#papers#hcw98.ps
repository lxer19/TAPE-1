URL: http://www.cs.utexas.edu/users/lorenzo/papers/hcw98.ps
Refering-URL: http://www.cs.utexas.edu/users/lorenzo/publications.html
Root-URL: 
Title: Fault-Tolerance: Java's Missing Buzzword  
Author: Lorenzo Alvisi 
Address: Austin TX 78712  
Affiliation: Department of Computer Sciences The University of Texas at Austin  
Abstract: Java has been described as a simple, object-oriented, distributed, interpreted, robust, secure, architectural neutral, portable, high-performance, multithreaded and dynamic language, prompting some to describe it as the first buzzword-compliant programming language. We submit that to deserve full certification|and in the process establish itself as the natural choice for developing large-scale distributed applications|Java misses a crucial buzzword: fault-tolerant. We outline some promising research directions for building reliable Java-based applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Bressoud and F.B. Schneider. </author> <title> Hypervisor-based fault-tolerance. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 14(1) </volume> <pages> 41-79, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: At the virtual machine level 2. At the method invocation level Capturing Nondeterminism in the JVM The idea of using a virtual machine to manage nonde-terminism has been first explored by Bressoud and Schneider <ref> [1] </ref>, who implemented a virtual machine for HP's PA-RISC architecture. In their scheme, fault-tolerance is achieved by replicating the computation on two independently failing processes, using a well-known technique called the state-machine approach [3]. To make this technique work, however, the two replicas must be deterministic. <p> Indeed, it is not obvious which non-deterministic commands are executed by the JVM, although it is reasonable to expect that many will occur at the Java Native Interface. One expects that once these commands have been identified, the techniques developed in <ref> [1] </ref> and [4] could be used to guarantee the reproducibility of nondeterministic choices during recovery. Capturing Nondeterminism through Method Logging The logging of message ordering information described above can be generalized easily to distributed object computation systems.
Reference: [2] <institution> Sun Microsystems Computer Company. Java computing home page. </institution> <note> http://www.sun.com/java/, January 1998. </note>
Reference-contexts: 1 Introduction Java may well be the most exciting technology of our time <ref> [2] </ref>, but the excitement never appeared to leave its proponents speechless. Simple, object-oriented, distributed, interpreted, robust, secure, architectural neutral, portable, high-performance, mul-tithreaded and dynamic [5]|these are some of the buzzwords that have been used to characterize Java since its first introduction.
Reference: [3] <author> Fred B. Schneider. </author> <title> Implementing fault-tolerant services using the state machine approach: A tutorial. </title> <journal> Computing Surveys, </journal> <volume> 22(3) </volume> <pages> 299-319, </pages> <month> Septem-ber </month> <year> 1990. </year>
Reference-contexts: In their scheme, fault-tolerance is achieved by replicating the computation on two independently failing processes, using a well-known technique called the state-machine approach <ref> [3] </ref>. To make this technique work, however, the two replicas must be deterministic. To ensure this, Bressoud and Schneider identified the non-deterministic commands processed by their virtual machine and designed protocols that guarantee that any non-deterministic choice is resolved identically at both replicas.
Reference: [4] <author> J.H. Slye and E.N. Elnozahy. </author> <title> Supporting nondeterministic execution in fault-tolerant systems. </title> <booktitle> In Proceedings of the 26th IEEE International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 250-259, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Indeed, it is not obvious which non-deterministic commands are executed by the JVM, although it is reasonable to expect that many will occur at the Java Native Interface. One expects that once these commands have been identified, the techniques developed in [1] and <ref> [4] </ref> could be used to guarantee the reproducibility of nondeterministic choices during recovery. Capturing Nondeterminism through Method Logging The logging of message ordering information described above can be generalized easily to distributed object computation systems.
Reference: [5] <author> Sun Microsystems Computer Company. </author> <title> Java Lan--guage Overview. </title> <note> White paper available at ftp://ftp.javasoft.com/docs/papers/java-overview.ps. </note>
References-found: 5

