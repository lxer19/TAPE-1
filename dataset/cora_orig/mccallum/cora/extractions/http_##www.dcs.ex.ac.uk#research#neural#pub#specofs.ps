URL: http://www.dcs.ex.ac.uk/research/neural/pub/specofs.ps
Refering-URL: http://www.dcs.ex.ac.uk/research/neural/pub/pub.htm
Root-URL: http://www.dcs.ex.ac.uk
Email: Email: derek/antony@uk.ac.exeter.dcs  
Phone: Tel: 0392-264061  
Title: The Specification of "Specification"  
Author: Derek Partridge and Antony Galton 
Address: Exeter EX4 4PT  
Affiliation: Department of Computer Science University of Exeter,  
Abstract: The notion of "specification" plays a key role in the developing science of computing. It is typically considered to be the keystone in the software development process. However, there is no single, generally agreed meaning of "specification" that bears close scrutiny. Instead there is a variety of different, although partially interlocking and overlapping interpretations of the term. We catalogue this varietal profusion and attempt to lay bare both the sources and consequences of each major alternative. We attempt to present the full range of possibilities, and the biases inherent in each style of interpretation. By initiating debate on the meaning of "specification" (and several other important terms) we would hope that a well-defined consensus will eventually emerge to replace the current very unsatisfactory state of affairs in which a science and a technology are being built on shaky foundations. 
Abstract-found: 1
Intro-found: 1
Reference: <author> P. </author> <title> Abrahams (1988). `Specifications and illusions'. </title> <journal> CACM 31, </journal> <volume> 5, </volume> <pages> 480-481. </pages>
Reference: <author> E. W. </author> <title> Dijkstra (1975). `Correctness concerns and, among other things, why they are resented'. </title> <booktitle> Proc. Internat. Conf. on Reliable Software, SIGPLAN Notices 10, </booktitle> <volume> 6, </volume> <month> June, </month> <pages> 546-550. </pages>
Reference: <author> E. W. </author> <title> Dijkstra (1989). `On the cruelty of really teaching computing science'. </title> <journal> CACM 32, </journal> <volume> 12, </volume> <pages> 1398-1404 and 1414. </pages>
Reference: <author> J. H. </author> <title> Fetzer (1988). `Program verification: the very idea'. </title> <journal> CACM 31, </journal> <volume> 9, </volume> <month> September, </month> <pages> 1048-1063. </pages>
Reference: <author> G. </author> <title> Fischer (1992). `Domain-Oriented Design Environments'. </title> <booktitle> Proc. 7th Knowledge-Based Software Engineering Conf., </booktitle> <address> McLean, VA, </address> <month> September 20th-23rd, </month> <pages> 204-213. </pages>
Reference-contexts: But as is often pointed out <ref> (e.g., Fischer, 1992) </ref>, just as many errors occur "upstream" in the process of passing from perceived problem to specification. This fluvial metaphor can usefully be extended to encompass a panoramic view of the software development process and hence of "specification" as a limited concept but within a broad context.
Reference: <author> S. I. </author> <title> Gallant (1988). `Connectionist expert systems'. </title> <journal> CACM 31, </journal> <volume> 2, </volume> <pages> 152-169. </pages>
Reference: <author> D. </author> <title> Ince (1990). `Z and system specification'. </title> <editor> In D. Ince and D. </editor> <booktitle> Andrews (eds.),The Software Life Cycle. </booktitle> <publisher> Butterworths: London, </publisher> <pages> 260-277. </pages>
Reference-contexts: the most useful basis for supporting the prime goals of the software scientist or technologist? It is generally acknowledged that a good specification should be precise, unambiguous and `free of design and implementation directives', and yet should `enable the developer to reason about the properties of the system it describes' <ref> (Ince, 1990, p. 261) </ref>. This last characteristic is an important one: after all, the whole purpose of the specification is to provide a good basis for the subsequent software development process.
Reference: <author> J. C. Knight and N. G. </author> <title> Leveson (1986). `An experimental evaluation of independence in multiversion programming'. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> SE-12, </volume> <pages> 1. </pages> <address> 10 D. </address> <month> Michie </month> <year> (1991). </year> <title> `Methodologies from machine learning in data analysis and software'. </title> <journal> The Computer Journal, </journal> <volume> 34, 6, </volume> <pages> 559-565. </pages>
Reference-contexts: For a specification, viewed as a fiction, must be open to evaluation; it cannot be simply accepted at face value as definitive. A study of induction-based implementations of the Launch-Interceptor (LI) problem, which does have a substantial specification <ref> (five pages long, see Knight and Leveson, 1986) </ref>, leads us to question the "reality" of certain of the crucial abstractions that it contains (Partridge and Sharkey, 1992).
Reference: <editor> P. Naur, B. Randell and J. N. Buxton (eds.) </editor> <booktitle> (1976). Software Engineering Concepts and Techniques, Proceeedings of NATO Science Committee sponsored conferences on software engineering, </booktitle> <address> Garmisch, Germany, </address> <month> Oct. </month> <pages> 7-11, </pages> <address> 1968 and Rome, Italy, </address> <month> Oct. </month> <pages> 27-31, </pages> <address> 1969. New York: Petrocelli/Charter. </address>
Reference-contexts: Introduction As the opening quotations illustrate, the very first software engineering conference at Garmisch in 1968 and its successor in Rome in 1969 <ref> (Naur et al., 1976) </ref> were exercised, amongst other pressing problems, by the notion of "specification".
Reference: <author> D. A. </author> <title> Nelson (1992). `Deductive program verification (a practitioner's commentary)'. </title> <journal> Minds and Machines, </journal> <volume> 2, 3, </volume> <pages> 283-307. </pages>
Reference: <author> D. Partridge and N. </author> <title> Sharkey (1992). `Neural networks as a software engineering technology'. </title> <booktitle> Proc. 7th Knowledge-Based Software Engineering Conf., </booktitle> <address> McLean, VA, </address> <month> September 20th-23rd. </month>
Reference-contexts: A study of induction-based implementations of the Launch-Interceptor (LI) problem, which does have a substantial specification (five pages long, see Knight and Leveson, 1986), leads us to question the "reality" of certain of the crucial abstractions that it contains <ref> (Partridge and Sharkey, 1992) </ref>. The LI problem is part of an anti-missile system, and is concerned with the classification of radar images as representative of a hostile missile or not.
Reference: <author> C. R. Rich and R. C. </author> <title> Waters (1988). `Automatic programming: myths and prospects'. </title> <journal> IEEE Computer, </journal> <volume> 21, 8, </volume> <pages> 40-51. </pages>
Reference: <author> W. Swartout and R. </author> <title> Balzer (1983). `On the inevitable intertwining of specification and implementation'. </title> <journal> CACM 25, </journal> <volume> 7, </volume> <pages> 438-440. </pages>
Reference: <author> R. C. </author> <title> Waters (1989). </title> <booktitle> `Programming in the year 2009'. In Preprints of the Int. Workshop on AI and Software Engineering, </booktitle> <institution> Dept. of Computer Science, University of Exeter, </institution> <month> 1-5. 11 </month>
References-found: 14

