URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr95/tr95-002.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr95-abstracts.html
Root-URL: http://www.cis.ufl.edu
Title: Load Balancing in a Distributed Processing System for High-Energy Physics (UFMulti)  
Author: Jagadeesh Kasaraneni Theodore Johnson Paul Avery 
Address: Gainesville, Fl 32611-2024  Gainesville, Fl 32611-2024  
Affiliation: Dept. of Computer and Information Science University of Florida  Dept. of Physics University of Florida  
Abstract: Experiments in High Energy Physics (HEP) generate tremendous amounts of data. For example, the accelerator at CERN is expected to generate petabytes per year. New HEP discoveries require that the experimental data be carefully analyzed to identify the events of interest. To take advantage of distributed processing, we have developed a package, UFMulti, which allows physicists to specify and execute a complex distributed application. In this paper, we report on the load balancing module of UFMulti. Our algorithm takes advantage of the particular structures of typical HEP computations to perform very effective load balancing. For example, our dynamic load balancer takes advantage of buffered data to partially allocate a processor between tasks. As a result, it often provides better performance than any static allocation of processors to tasks. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> UFMulti Distributed Toolkit, </institution> <note> http://www.phys.ufl.edu/~ufm, 1994 </note>
Reference-contexts: For more details on HEP processing see [2]. 1.2 UFMulti UFMulti is a toolkit designed for distributing the components of an HEP application across multiple Unix workstations <ref> [1] </ref>. UFMulti considers every application to be composed of a number of interacting stages, each stage consisting of one or more tasks which are copies of an user analysis program.
Reference: [2] <editor> P. Avery et al. </editor> <booktitle> The UFMulti Project, International Conference on Computing in High Energy Physics, 1994 pg. </booktitle> <volume> 156 - 164 </volume>
Reference-contexts: Since the programs are written by different teams, it is convenient to treat each stage separately, and only integrate the processing at run time. For more details on HEP processing see <ref> [2] </ref>. 1.2 UFMulti UFMulti is a toolkit designed for distributing the components of an HEP application across multiple Unix workstations [1]. UFMulti considers every application to be composed of a number of interacting stages, each stage consisting of one or more tasks which are copies of an user analysis program.
Reference: [3] <author> Aric F.Zion. NetQueues: </author> <title> A Distributed Processing System For High-Energy Physics Masters Thesis, </title> <institution> Dept. of CIS, University of Florida, </institution> <year> 1992 </year>
Reference: [4] <author> Y.T. Wang and R.J.T. Morris. </author> <title> Load Sharing in Distributed Systems IEEE Transactions on Computers, </title> <address> C-34(3), </address> <month> March </month> <year> 1985, </year> <pages> pp. 204-17 </pages>
Reference-contexts: These steps are automated in the Load Balancer which is developed in the second part. Much research has been done in designing load balancing algorithms for distributed systems. Readers interested in the taxonomy of the load balancing algorithms should refer to Casavant and Kuhl [5] and Wang and Morris <ref> [4] </ref>. 2 System Monitor System Monitor provides the user with a monitoring tool and a manual load balancing mechanism. The objective of the monitoring is to find the status of the job and identify bottlenecks, if any.
Reference: [5] <author> T.L. Casavant and J.G. Kuhl. </author> <title> A Taxonomy of Scheduling in General Purpose Distributed Computing Systems IEEE Transactions on Software Engineering, </title> <address> SE-14(2), </address> <month> February </month> <year> 1988, </year> <pages> pp. 141-54 </pages>
Reference-contexts: These steps are automated in the Load Balancer which is developed in the second part. Much research has been done in designing load balancing algorithms for distributed systems. Readers interested in the taxonomy of the load balancing algorithms should refer to Casavant and Kuhl <ref> [5] </ref> and Wang and Morris [4]. 2 System Monitor System Monitor provides the user with a monitoring tool and a manual load balancing mechanism. The objective of the monitoring is to find the status of the job and identify bottlenecks, if any.
References-found: 5

