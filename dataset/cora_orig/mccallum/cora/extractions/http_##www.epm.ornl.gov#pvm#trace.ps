URL: http://www.epm.ornl.gov/pvm/trace.ps
Refering-URL: http://www.epm.ornl.gov/pvm/pvm_home.html
Root-URL: 
Email: (kohl@msr.epm.ornl.gov)  (geist@msr.epm.ornl.gov)  
Phone: Phone: (615) 574-3143 FAX: (615) 574-0680  
Title: The PVM 3.4 Tracing Facility and XPVM 1.1  
Author: James Arthur Kohl G. A. Geist 
Note: Research supported by the Applied Mathematical Sciences subprogram of the Office of Energy Research, U.S. Department of Energy.  
Address: Oak Ridge, TN 37831-6367  
Affiliation: Computer Science Mathematics Division Oak Ridge National Laboratory  
Abstract: One of the more bothersome aspects of developing a parallel program is that of monitoring the behavior of the program for debugging and performance tuning. Often there is no intrinsic support for examining program state and dynamics in a parallel programming system, let alone a useful interface for analyzing or visualizing that information. This paper discusses an enhanced tracing facility and tracing tool for PVM (Parallel Virtual Machine), a message passing library for parallel processing in a heterogeneous environment. PVM supports mixed collections of workstation clusters, shared-memory multiprocessors, and MPPs. The latest release of PVM, Version 3.4, contains a new and improved tracing facility which provides more flexible and efficient access to run-time program information. This new tracing system supports a buffering mechanism to reduce intrusion, and a more flexible trace event definition scheme which is based more directly on SDDF (Self-Defining Data Format, Reed et al). This new scheme expedites the collection and analysis of execution histories, and allows for integration of custom trace events. The tracing instrumentation is built into the PVM library to avoid re-compilation, and supports on-the-fly adjustments to each task's trace event mask, to control the level of tracing detail. Along with this new tracing facility, the graphical console and monitor XPVM has been updated to provide better access to the new tracing functionality. Several new views have been implemented to utilize the additional tracing information now possible, including user-defined events. The system has also been optimized to provide better real-time monitoring capabilities. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. A. Aydt, </author> <title> "The Pablo Self-Defining Data Format," </title> <institution> University of Illinois at Urbana Champaign, Department of Computer Science, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: XPVM receives and processes these trace event messages to produce a "trace file" which can then be read in to drive graphical or textual views. The trace files for both tracing facilities are written in SDDF (Self-Defining Data Format) <ref> [1] </ref> as designed for the "Pablo" project [4]. SDDF was chosen over the PICL format [5] for the "ParaGraph" system [2] because PICL was not sufficiently flexible to represent the trace information generated by PVM. SDDF allows arbitrary data structuring and also includes some semantic information.
Reference: [2] <author> M. T. Heath, J. A. Etheridge, </author> <title> "Visualizing the Performance of Parallel Programs," </title> <journal> IEEE Software, </journal> <volume> Volume 8, Number 5, </volume> <month> September </month> <year> 1991, </year> <pages> pp. 29-40. </pages>
Reference-contexts: The trace files for both tracing facilities are written in SDDF (Self-Defining Data Format) [1] as designed for the "Pablo" project [4]. SDDF was chosen over the PICL format [5] for the "ParaGraph" system <ref> [2] </ref> because PICL was not sufficiently flexible to represent the trace information generated by PVM. SDDF allows arbitrary data structuring and also includes some semantic information. The original tracing facility provided with PVM 3.3 did not support any buffering mechanism, resulting in high tracing overhead.
Reference: [3] <author> G. A. Geist, A. Beguelin, J. Dongarra, W. Jiang, R. Manchek, V. Sunderam, </author> <title> "PVM: Parallel Virtual Machine, A User's Guide and Tutorial for Networked Parallel Computing," </title> <publisher> The MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Therefore, the goal of effective parallel program analysis is to provide information that is as accurate as possible without significantly intruding on the parallel program. This paper focuses on the tracing facility provided in the latest release of PVM (Parallel Virtual Machine) <ref> [3] </ref>. PVM is a message passing library which supports portable, interop-erable parallel processing in a heterogeneous environment. A single "virtual machine" can consist of clusters of workstations, shared-memory multiprocessors, and Massively Parallel Processors (MPPs).
Reference: [4] <author> D. Reed, R. Olson, R. Aydt, T. Madhyastha, T. Birkett, D. Jensen, B. Nazief, B. Totty, </author> <title> "Scalable Performance Environments for Parallel Systems," </title> <booktitle> Proceedings of the Sixth Distributed Memory Computing Conference, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1991. </year>
Reference-contexts: XPVM receives and processes these trace event messages to produce a "trace file" which can then be read in to drive graphical or textual views. The trace files for both tracing facilities are written in SDDF (Self-Defining Data Format) [1] as designed for the "Pablo" project <ref> [4] </ref>. SDDF was chosen over the PICL format [5] for the "ParaGraph" system [2] because PICL was not sufficiently flexible to represent the trace information generated by PVM. SDDF allows arbitrary data structuring and also includes some semantic information.
Reference: [5] <author> P. H. Worley, </author> <title> "A New PICL Trace File Format," </title> <type> Technical Report ORNL/TM-12125, </type> <institution> Oak Ridge National Laboratory, Oak Ridge, TN, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: The trace files for both tracing facilities are written in SDDF (Self-Defining Data Format) [1] as designed for the "Pablo" project [4]. SDDF was chosen over the PICL format <ref> [5] </ref> for the "ParaGraph" system [2] because PICL was not sufficiently flexible to represent the trace information generated by PVM. SDDF allows arbitrary data structuring and also includes some semantic information. The original tracing facility provided with PVM 3.3 did not support any buffering mechanism, resulting in high tracing overhead.
Reference: [6] <author> J. A. Kohl, G. A. Geist, </author> <title> "XPVM 1.0 User's Guide," </title> <type> Technical Report ORNL/TM 12981, </type> <institution> Computer Science and Mathematics Division, Oak Ridge National Laboratory, Oak Ridge, TN, </institution> <month> April </month> <year> 1995. </year> <note> 18 Kohl & Geist </note>
Reference-contexts: The tracing facility described here supports the retrieval of program state information during run-time, in the form of events which can be viewed either in "real-time" or used in "post-mortem" analyses. A related tool XPVM <ref> [6] </ref> is a graphical console and trace monitor that provides a graphical interface for visualizing and processing PVM execution traces.
References-found: 6

