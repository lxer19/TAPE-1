URL: file://ftp.win.tue.nl/pub/techreports/tbasten/poet.ps.gz
Refering-URL: http://wwwis.win.tue.nl/~tbasten/publications.html
Root-URL: http://www.win.tue.nl
Email: Email: tkunz@uwaterloo.ca  
Title: Poet: Target-System-Independent Visualisations of Complex Distributed-Application Executions  
Author: T. Kunz J. P. Black D. J. Taylor and T. Basten 
Keyword: programming environments, parallel and distributed debugging, visualisation, event abstraction, clustering, PVM, OSF DCE, C++  
Note: Received revised accepted  
Address: Netherlands  
Affiliation: 1 Dept. of Computer Science, University of Waterloo, Canada 2 Dept. of Math. and Comp. Science, Eindhoven University of Technology, The  
Abstract: Designing and implementing a visual debugger for distributed programs is a significant challenge. Distributed applications are often large and frequently exhibit a high degree of complexity. Consequently, a debugger must address problems of complexity and scale in at least two ways. First, appropriate user interfaces should allow a user to manage the vast amount of information typically obtained from distributed executions. Second, the tool itself, in handling this information, should be implemented efficiently, providing a user with reasonable response times for interactive use. Our research efforts, concentrating on these problems, have led to the development of Poet, a tool for the collection and presentation of event-based traces of distributed executions. Poet makes as few assumptions as possible about characteristics that must be possessed by all target environments. Information describing each target environment is placed in configuration files, allowing a single set of Poet executables to be used for all target environments. Comparing Poet's performance to XPVM, the standard visualisation tool for PVM executions, reveals that this target-system independence does not impose a per formance penalty. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Ahuja and S. Mishra. </author> <title> Units of computation in fault-tolerant distributed systems. </title> <booktitle> In Proc. 14th Int. Conf. on Distr. Comp. Systems, </booktitle> <pages> pages 626-633, </pages> <address> Poznan, Poland, </address> <month> June </month> <year> 1994. </year>
Reference: [2] <author> G.R. Andrews et al. </author> <title> An overview of the SR language and implementation. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 10(1) </volume> <pages> 51-86, </pages> <month> Jan. </month> <year> 1988. </year>
Reference: [3] <author> E. Arjomandi et al. </author> <title> ABC++: Concurrency by inheritance in C++. </title> <journal> IBM Sys. Journal, </journal> <volume> 34(1) </volume> <pages> 120-137, </pages> <year> 1995. </year>
Reference: [4] <author> T. Basten. </author> <title> Hierarchical event-based behavioral abstraction in interactive distributed debugging: A theoretical approach. M.Sc. </title> <type> thesis, </type> <institution> Eindhoven University of Technology, </institution> <address> The Netherlands, </address> <month> Aug. </month> <year> 1993. </year> <journal> The Computer Journal, </journal> <volume> Vol. 00, No. </volume> <pages> 0, </pages> <note> 1997 14 Kunz et al. </note>
Reference: [5] <author> T. Basten. </author> <title> Parsing partially ordered multisets. </title> <note> To appear in Int. Journal of Found. </note> <institution> of Comp. Science, </institution> <year> 1997. </year>
Reference: [6] <author> T. Basten, T. Kunz, J.P. Black, M.H. Coffin, </author> <title> and D.J. Taylor. Time and the order of abstract events in distributed computations. </title> <note> Computing Science Note 94/06, </note> <institution> Eindhoven University of Technology, </institution> <month> Feb. </month> <year> 1994. </year>
Reference: [7] <author> T. Basten, T. Kunz, J.P. Black, M.H. Coffin, </author> <title> and D.J. Taylor. Vector time and causality among abstract events in distributed computations. </title> <note> To appear in Distributed Computing. </note>
Reference: [8] <author> P.C. Bates. </author> <title> Shu*e automata: A formal model for behavior recognition in distributed systems. </title> <type> COINS Tech. Rep. 87-27, </type> <institution> U. of Massachusetts, </institution> <month> Jan. </month> <year> 1987. </year>
Reference: [9] <author> P.C. Bates and J.C. Wileden. </author> <title> An approach to high-level debugging of distributed systems. </title> <booktitle> In Proc. of the ACM SIGSOFT/SIGPLAN Soft. Eng. Symp. on High-Level Debugging, </booktitle> <pages> pages 107-111, </pages> <address> Pacific Grove, CA, </address> <month> March </month> <year> 1983. </year>
Reference: [10] <author> P.C. Bates. </author> <title> Debugging heterogeneous distributed systems using event-based models of behavior. </title> <journal> ACM Trans. on Comp. Systems, </journal> <volume> 13(1) </volume> <pages> 1-31, </pages> <month> Feb. </month> <year> 1995. </year>
Reference: [11] <author> E. Best and B. Randell. </author> <title> A formal model of atomicity in asynchronous systems. </title> <journal> Acta Informatica, </journal> <volume> 16 </volume> <pages> 93-124. </pages>
Reference: [12] <author> P. A. Buhr and R. A. Stroobosscher. </author> <title> The System: Providing light-weight concurrency on shared-memory multiprocessor computers running Unix. </title> <journal> Software | Practice and Experience, </journal> <volume> 20(9) </volume> <pages> 929-963, </pages> <month> Sept. </month> <year> 1991. </year>
Reference: [13] <author> W.-H. Cheung. </author> <title> Process and Event Abstraction for Debugging Distributed Programs. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of Waterloo, </institution> <month> Oct. </month> <year> 1989. </year>
Reference: [14] <author> S.G. Eick and A. Ward. </author> <title> An interactive visualization for message sequence charts. </title> <booktitle> In Proc. of the Fourth Workshop on Program Comprehension, </booktitle> <pages> pages 2-8, </pages> <address> Berlin, Germany, </address> <month> March </month> <year> 1996. </year> <note> ISBN 0-8186-7283-8. </note>
Reference: [15] <author> C.J. Fidge. </author> <title> Logical time in distributed computing systems. </title> <journal> IEEE Computer, </journal> <volume> 24(8) </volume> <pages> 28-33, </pages> <month> Aug. </month> <year> 1991. </year>
Reference: [16] <author> Al Geist et al. </author> <title> PVM: Parallel Virtual Machine. A User's Guide and Tutorial for Networked Parallel Computing. </title> <publisher> MIT Press, </publisher> <year> 1994. </year> <note> ISBN 0-262-57108-0. </note>
Reference: [17] <author> J. Gosling and H. McGilton. </author> <title> The Java Language Environment. Javasoft, </title> <address> CA, </address> <month> May </month> <year> 1996. </year> <note> http://www.javasoft.com/doc/language environment/. </note>
Reference: [18] <author> A.A. Hough and J.E. Cuny. </author> <title> Initial experiences with a pattern-oriented parallel debugger. </title> <booktitle> In Proc. of the ACM SIGPLAN/SIGOPS Workshop on Par. and Distr. Debugging, </booktitle> <pages> pages 195-205, </pages> <address> Madison, WI, </address> <month> May </month> <year> 1988. </year>
Reference: [19] <author> W. Hseush and G.E. Kaiser. </author> <title> Modelling concurrency in parallel debugging. </title> <booktitle> In Proc. 2nd ACM/SIGPLAN Symp. on Principles and Practice of Parallel Programming, </booktitle> <pages> pages 11-20, </pages> <address> Seattle, WA, </address> <month> March </month> <year> 1990. </year>
Reference: [20] <author> IBM. </author> <title> IBM AIX SDE Workbench/6000 User's Guide and Reference. </title> <institution> IBM, </institution> <month> September </month> <year> 1992. </year> <month> SC09-1453-01. </month>
Reference: [21] <author> M. Khouzam and T. Kunz. </author> <title> Single stepping in event-visualization tools. </title> <booktitle> In Proc. of the 1996 CAS Conf., </booktitle> <pages> pages 103-114, </pages> <address> Toronto, Canada, </address> <month> Nov. </month> <year> 1996. </year>
Reference: [22] <author> J.A. Kohl. </author> <title> The Kerberos Network Authentication Service (V5). </title> <type> Internet Draft, </type> <institution> Internet Activities Board, </institution> <month> March </month> <year> 1993. </year>
Reference: [23] <author> J.A. Kohl and G.A. Geist. </author> <title> The PVM 3.4 tracing facility and XPVM 1.1. </title> <type> Technical report, </type> <institution> Comp. Science & Math. Division, Oak Ridge Nat. Lab., TN, USA, </institution> <year> 1995. </year>
Reference: [24] <author> D. Kranzlmuller, S. Grabner, and J. Volkert. </author> <title> Event graph visualization for debugging large applications. </title> <booktitle> In Proc. of SPDT 96: SIGMETRICS Symp. on Parallel and Distributed Tools, </booktitle> <pages> pages 108-116, </pages> <address> Philadelphia, PA, USA, </address> <month> May </month> <year> 1996. </year>
Reference: [25] <author> J. Kundu and J.E. Cuny. </author> <title> A scalable, visual interface for debugging with event-based behavioral abstraction. </title> <booktitle> In Frontiers '95. The Fifth Symp. on the Frontiers of Massively Parallel Computation, </booktitle> <pages> pages 472-479. </pages>
Reference: [26] <author> T. Kunz. </author> <title> Reverse engineering distributed applications: An event abstraction tool. </title> <journal> Int. Journal of Soft. Eng. and Knowledge Eng., </journal> <volume> 4(3) </volume> <pages> 303-323, </pages> <month> Sept. </month> <year> 1994. </year>
Reference: [27] <author> T. Kunz and J.P. Black. </author> <title> Using automatic process clustering for design recovery and distributed debugging. </title> <journal> IEEE Trans. on Soft. Eng., </journal> <volume> 21(6) </volume> <pages> 515-527, </pages> <month> June </month> <year> 1995. </year>
Reference: [28] <author> T. Kunz and D.J. Taylor. </author> <title> Visualizing PVM executions. </title> <booktitle> In Proc. of the 3rd PVM User's Group Meeting, </booktitle> <address> Pittsburgh, PA, USA, </address> <month> May </month> <year> 1995. </year> <pages> 13 pages, </pages> <address> URL: http://www.cs.cmu.edu/Web/Groups/pvmug95.html. </address>
Reference: [29] <author> T. Kunz. </author> <title> High-level views of distributed executions: Convex abstract events. Automated Soft. </title> <journal> Eng., </journal> <volume> 4(2) </volume> <pages> 179-197, </pages> <month> April </month> <year> 1997. </year>
Reference: [30] <author> L. Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference: [31] <author> L. Lamport. </author> <title> On interprocess communication. </title> <journal> Distributed Computing, </journal> <volume> 1 </volume> <pages> 77-85, </pages> <year> 1986. </year>
Reference: [32] <author> M.J. Manthey. </author> <title> Hierarchy in sequential and concurrent systems. In L.H. </title> <editor> Jamieson et al, editors, </editor> <booktitle> The Characteristics of Parallel Algorithms, </booktitle> <pages> pages 139-164. </pages> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1987. </year>
Reference: [33] <author> Open Software Foundation. </author> <title> Introduction to OSF/DCE. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1993. </year>
Reference: [34] <author> R. Schwarz and F. Mattern. </author> <title> Detecting causal relationships in distributed computations: In search of the holy grail. </title> <journal> Distributed Computing, </journal> <volume> 7 </volume> <pages> 149-174, </pages> <month> Sept. </month> <year> 1994. </year>
Reference: [35] <author> I.R. Seelemann. </author> <title> Application of event-based debugging techniques to object-oriented executions. M.Math. </title> <type> thesis, </type> <institution> University of Waterloo, </institution> <month> June </month> <year> 1995. </year>
Reference: [36] <author> M. Seuren. </author> <title> Design and implementation of an automatic event abstraction tool. M.Sc. </title> <type> thesis, </type> <institution> Eindhoven University of Technology, </institution> <address> The Netherlands, </address> <month> Aug. </month> <year> 1996. </year>
Reference: [37] <author> R.E. Strom et al. </author> <title> Hermes: A Language for Distributed Computing. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1991. </year>
Reference: [38] <author> D.J. Taylor. </author> <title> The use of process clustering in distributed-system event displays. </title> <booktitle> In Proc. of the 1993 CAS Conf., </booktitle> <pages> pages 505-512, </pages> <address> Toronto, Canada, </address> <month> Oct. </month> <year> 1993. </year>
Reference: [39] <author> S. Yemini et al. </author> <title> CONCERT: A high-level-language approach to heterogeneous distributed systems. </title> <booktitle> In Proc. 9th Int. Conf. on Distr. Comp. Systems, </booktitle> <pages> pages 162-171, </pages> <month> June </month> <year> 1989. </year>
Reference: [40] <author> Y.M. Yong and D.J. Taylor. </author> <title> Performing replay in an OSF DCE environment. </title> <booktitle> In Proc. of the 1995 CAS Conf., </booktitle> <pages> pages 52-62, </pages> <address> Toronto, Canada, </address> <month> Nov. </month> <year> 1995. </year>
Reference: [41] <author> D. Zernik, M. Snir, and D. Malki. </author> <title> Using visualization tools to understand concurrency. </title> <journal> IEEE Software, </journal> <volume> 9(3) </volume> <pages> 87-92, </pages> <month> May </month> <year> 1992. </year> <journal> The Computer Journal, </journal> <volume> Vol. 00, No. 0, </volume> <year> 1997 </year>
References-found: 41

