URL: http://www.cs.ucl.ac.uk/staff/t.yu/ppsn.ps
Refering-URL: http://www.cs.bham.ac.uk/~wbl/biblio/gp-bibliography.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: T.Yu@cs.ucl.ac.uk P.Bentley@cs.ucl.ac.uk  
Title: Methods to Evolve Legal Phenotypes  
Author: Tina Yu and Peter Bentley 
Address: Gower Street, London WC1E 6BT, UK.  
Affiliation: Department of Computer Science, University College London,  
Abstract: Many optimization problems require the satisfaction of constraints in addition to their objectives. When using an evolutionary algorithm to solve such problems, these constraints can be enforced in many different ways to ensure that legal solutions (phenotypes) are evolved. We have identified eleven ways to handle constraints within various stages of an evolutionary algorithm. Five of these methods are experimented on a runtime error constraint in a Genetic Pro gramming system. The results are compared and analyzed. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Bck, T., </author> <title> Evolutionary Algorithms in Theory and Practice. </title> <publisher> Oxford Uni. Press, </publisher> <address> NY (1996). </address> <month> 12 </month>
Reference-contexts: Nevertheless, the work of Michalewicz and colleagues provides some of the key investigations in this area. For example, Michalewicz (1995a) describes the application of five methods (three based on penalizing illegal phenotypes) to five test functions. Michalewicz et. al. <ref> (1996) </ref> describe the use of behavioral memory and other penalty-based approaches in GAs to evolve different engineering designs. Schoenauer and Michalewicz (1997) describe the use of a repair method in a GA to evolve legal phenotypes. <p> Schwefel's ES algorithm also used a 'legal mutant' constraint handling method, where the creation of an individual is simply repeated as long as the individual violates one or more constraints <ref> (Bck, 1996) </ref>. Standard EP, on the other hand, typically does not enforce constraints during the generation of new offspring. More recent research on constrained optimization problems in EP is described in (McDon-nell et al., 1995) and (Fogel et al., 1996). <p> Standard EP, on the other hand, typically does not enforce constraints during the generation of new offspring. More recent research on constrained optimization problems in EP is described in (McDon-nell et al., 1995) and <ref> (Fogel et al., 1996) </ref>. Genetic Programming: The traditional GP paradigm (Koza, 1992) does not distinguish genotypes from phenotypes, i.e. the search space is regarded as being the same as the solution space. An individual is represented as a program parse tree. <p> Yu and Clack (1998) applied both syntactic constraints and type constraints in their GP system. Banzhaf (1994) proposed an alternative paradigm for GP, where the search space is separated from the solution space. A mapping scheme is used to transform genotypes into legal phenotypes <ref> (Keller & Banzhaf, 1996) </ref>. 3 3. Constraints in Evolutionary Algorithms Just as evolution requires selection pressure to generate phenotypes that satisfy the objective function, evolution can have a second selection pressure placed upon it in order to generate phenotypes that do not conflict the constraints. <p> C3: LEGAL SEED Seed with nonconflicting solutions. The initial population is seeded with solutions that do not conflict with the constraints and the crossover and mutation operators are designed so that they cannot generate illegal solutions. Many constraints in GP are implemented using this method. For example, Gruau <ref> (1996) </ref> uses a context-free grammar to specify syntactic constraints of parse trees. Yu and Clack (1998) employ a type system to ensure that only type-correct programs are considered during evolution. C4: GENETIC REPAIR Correct illegal genotypes.
Reference: 2. <author> Banzhaf, W. </author> <title> Genotype-phenotype-mapping and neutral variation - a case study in genetic programming. Parallel Problem Solving From Nature, 3. </title> <editor> Y. Davidor, H-P Schwefel, and R. Mnner (eds.), </editor> <publisher> Springer-Verlag, </publisher> <year> (1994) </year> <month> 322-332. </month>
Reference: 3. <author> Bentley, P. J. & Wakefield, J. P., </author> <title> Finding acceptable solutions in the pareto-optimal range using multiobjective genetic algorithms. </title> <editor> Chawdhry, P.K., Roy, R., & Pant, R.K. </editor> <booktitle> (eds) Soft Computing in Engineering Design and Manufacturing. </booktitle> <publisher> Springer Verlag London Limited, </publisher> <address> Part 5, </address> <year> (1997), </year> <pages> 231-240. </pages>
Reference: 4. <editor> Fogel, L., Angeline, P. J., Bck, T. </editor> <booktitle> Evolutionary Programming V, Porceedings of the 5 th Annual Conference on Evolutionary Programming. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA (1996). </address>
Reference: 5. <author> Gero, J. S. and Kazakov, V. </author> <title> A, Evolving design genes in space layout planning problems, </title> <booktitle> Artificial Intelligence in Engineering (1998). </booktitle>
Reference: 6. <author> Goldberg, D. E., </author> <title> Genetic Algorithms in Search, Optimization & Machine Learning. </title> <publisher> Addison-Wesley (1989). </publisher>
Reference: 7. <author> Gruau, F., </author> <title> On using syntactic constraints with genetic programming. </title> <booktitle> Advances in Genetic Programming II, </booktitle> <editor> P.J. Angeline & K.E. Kinnear, Jr, (eds.), </editor> <publisher> MIT Press, </publisher> <year> (1996) </year> <month> 377-394 </month>
Reference: 8. <author> Janikow, C., </author> <title> A methodology for processing problem constraints in genetic programming. Computers and Mathematics with Application, </title> <journal> Vol. </journal> <volume> 32 No. 8, </volume> <year> (1996) </year> <month> 97-113. </month>
Reference: 9. <author> Keller, R. and Banzhaf, W. </author> <title> Genetic programming using genotype-phenotype mapping from linear genomes into linear phenotypes. </title> <booktitle> Genetic Programming 96: Proc. of the 1st Annual Conf. on GP., </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA. </address> <year> (1996) </year> <month> 116-122. </month>
Reference-contexts: Nevertheless, the work of Michalewicz and colleagues provides some of the key investigations in this area. For example, Michalewicz (1995a) describes the application of five methods (three based on penalizing illegal phenotypes) to five test functions. Michalewicz et. al. <ref> (1996) </ref> describe the use of behavioral memory and other penalty-based approaches in GAs to evolve different engineering designs. Schoenauer and Michalewicz (1997) describe the use of a repair method in a GA to evolve legal phenotypes. <p> Schwefel's ES algorithm also used a 'legal mutant' constraint handling method, where the creation of an individual is simply repeated as long as the individual violates one or more constraints <ref> (Bck, 1996) </ref>. Standard EP, on the other hand, typically does not enforce constraints during the generation of new offspring. More recent research on constrained optimization problems in EP is described in (McDon-nell et al., 1995) and (Fogel et al., 1996). <p> Standard EP, on the other hand, typically does not enforce constraints during the generation of new offspring. More recent research on constrained optimization problems in EP is described in (McDon-nell et al., 1995) and <ref> (Fogel et al., 1996) </ref>. Genetic Programming: The traditional GP paradigm (Koza, 1992) does not distinguish genotypes from phenotypes, i.e. the search space is regarded as being the same as the solution space. An individual is represented as a program parse tree. <p> Yu and Clack (1998) applied both syntactic constraints and type constraints in their GP system. Banzhaf (1994) proposed an alternative paradigm for GP, where the search space is separated from the solution space. A mapping scheme is used to transform genotypes into legal phenotypes <ref> (Keller & Banzhaf, 1996) </ref>. 3 3. Constraints in Evolutionary Algorithms Just as evolution requires selection pressure to generate phenotypes that satisfy the objective function, evolution can have a second selection pressure placed upon it in order to generate phenotypes that do not conflict the constraints. <p> C3: LEGAL SEED Seed with nonconflicting solutions. The initial population is seeded with solutions that do not conflict with the constraints and the crossover and mutation operators are designed so that they cannot generate illegal solutions. Many constraints in GP are implemented using this method. For example, Gruau <ref> (1996) </ref> uses a context-free grammar to specify syntactic constraints of parse trees. Yu and Clack (1998) employ a type system to ensure that only type-correct programs are considered during evolution. C4: GENETIC REPAIR Correct illegal genotypes.
Reference: 10. <author> Koza, J. R., </author> <title> Genetic Programming: On the Programming of Computers by Means of Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA (1992). </address>
Reference: 11. <editor> McDonnell, J. R., Reynolds, R. G., Fogel, D. B. </editor> <booktitle> Evolutionary Programming IV, Proceedings of the 4 th Annual Conference on Evolutionary Programming. </booktitle> <publisher> MIT Press (1995). </publisher>
Reference: 12. <author> Michalewicz, Z., </author> <title> Genetic algorithms, numerical optimization and constraints, </title> <booktitle> Proc. of the 6th Int. Conf. on Genetic Algorithms, </booktitle> <address> Pittsburgh, </address> <month> July 15-19, </month> <year> (1995a) </year> <month> 151-158. </month>
Reference: 13. <author> Michalewicz, Z., </author> <title> A survey of constraint handling techniques in evolutionary computation methods Proc. </title> <booktitle> of the 4th Annual Conf. on Evolutionary Programming, </booktitle> <publisher> MIT Press, </publisher> <address> Cam-bridge, MA (1995b) 135-155. </address>
Reference: 14. <author> Michalewicz, Z., Dasgupta, D., Le Riche, R.G., and Schoenauer, M., </author> <title> Evolutionary algorithms for constrained engineering problems, </title> <journal> Computers & Industrial Engineering Journal, Vol.30, No.2, </journal> <month> September </month> <year> (1996) </year> <month> 851-870. </month>
Reference: 15. <author> Michalewicz, Z. and Michalewicz, M., </author> <title> "Pro-Life versus Pro-Choice Strategies in Evolutionary Computation Techniques", Ch. 10, Evolutionary Computation, </title> <publisher> IEEE Press (1995). </publisher>
Reference: 16. <author> Michalewicz, Z., Schoenauer, M., </author> <title> Evolutionary Algorithms for Constrained Parameter Optimization Problems, </title> <booktitle> Evolutionary Computation 4 (1996) 1-32. </booktitle>
Reference: 17. <author> Hinterding, R. and Michalewicz, Z., </author> <title> Your brains and my beauty: parent matching for constrained optimisation, </title> <booktitle> Proc. of the 5th Int. Conf. on Evolutionary Computation, </booktitle> <address> Anchorage, Alaska, </address> <year> (1998) </year> <month> May, </month> <pages> 4-9. </pages>
Reference: 18. <author> Schoenauer, M. and Michalewicz, Z., </author> <title> Boundary operators for constrained parameter optimization problems, </title> <booktitle> Proc. of the 7th Int. Conf. on Genetic Algorithms, </booktitle> <address> East Lansing, Michigan, </address> <month> July 19-23 </month> <year> (1997) </year> <month> 320-329. </month>
Reference: 19. <author> Syswerda, G., </author> <title> Uniform crossover in genetic algorithms. </title> <editor> In Schaffer, D. (ed.), </editor> <booktitle> Proc. of the Third Int. Conf. on Genetic Algorithms. </booktitle> <publisher> Morgan Kaufmann Pub., </publisher> <year> (1989). </year>
Reference-contexts: Goldberg <ref> (1989) </ref> describes perhaps the simplest: mapping the range of a gene to a specified interval. This permits constraints on parameter range and precision to be satisfied without the need to redesign the genotype representation and coding. <p> However, the replacement of potential parents discards potentially beneficial genetic material and so may be harmful to evolution. This method requires the use of a steady-state GA <ref> (Syswerda, 1989) </ref>. 7 = 9 ii Ry 4. Experiments with a RunTime Constraint in GP This section describes experiments conducted to compare five of the constraint handling methods described above in a GP system. The experiments are focused on one particular kind of constraint in GP: the runtime error constraint. <p> Table 2 summarizes the features of this problem. 4.1 Implementation of Constraints To allow the use of the Illegal Replacement method, the GP system uses a steady-state replacement scheme <ref> (Syswerda, 1989) </ref> where a population with a constant number of individuals is maintained. Unless otherwise stated, parents are selected using fitness proportionate selection, and offspring replace individuals with the worst fitness in the population. The five constraint handling methods were implemented as follows: C5: Legal Map.
Reference: 20. <author> Yu, T. and Clack, C., PolyGP: </author> <title> A polymorphic genetic programming system in Haskell. </title> <booktitle> Genetic Programming 98: Proc. of the 3rd Annual Conf. Genetic Programming, </booktitle> <year> (1998). </year>
References-found: 20

