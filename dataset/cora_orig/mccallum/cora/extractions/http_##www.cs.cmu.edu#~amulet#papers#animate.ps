URL: http://www.cs.cmu.edu/~amulet/papers/animate.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/project/amulet/amulet3/manual/Animation.html
Root-URL: 
Email: -bam, rcm, richm, af1x-@cs.cmu.edu  
Phone: 6-8, 1996.  
Title: Easily Adding Animations to Interfaces Using Constraints  
Author: Brad A. Myers, Robert C. Miller, Rich McDaniel, and Alan Ferrency 
Keyword: Animation, Constraints, Toolkits, User Interface Development Environments, Amulet.  
Note: To appear in UIST'96: ACM Symposium on User Interface Software and Technology, Nov.  
Web: http://www.cs.cmu.edu/~amulet  
Address: Pittsburgh, PA 15213  Seattle, WA  
Affiliation: Human Computer Interaction Institute Carnegie Mellon University  
Abstract: Adding animation to interfaces is a very difficult task with todays toolkits, even though there are many situations in which it would be useful and effective. The Amulet toolkit contains a new form of animation constraint that allows animations to be added to interfaces extremely easily without changing the logic of the application or the graphical objects themselves. An animation constraint detects changes to the value of the slot to which it is attached, and causes the slot to instead take on a series of values interpolated between the original and new values. The advantage over previous approaches is that animation constraints provide significantly better modularity and reuse. The programmer has independent control over the graphics to be animated, the start and end values of the animation, the path through value space, and the timing of the animation. Animations can be attached to any object, even existing widgets from the toolkit, and any type of value can be animated: scalars, coordinates, fonts, colors, line widths, point lists (for polygons), booleans (for visibility), etc. A library of useful animation constraints is provided in the toolkit, including support for exaggerated, cartoonstyle effects such as slow-in-slow-out, anticipation, and follow-through. Because animations can be added to an existing application with only a single extra line of code, we expect that this new mechanism will make it easy for researchers and developers to investigate the use of animations in a wide variety of applications. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Baecker, R. and Small, I., </author> <title> Animation at the Interface, </title> <booktitle> in The Art of Human Computer Interface Design, </booktitle> <editor> B. Laurel, Editor. </editor> <booktitle> 1990, </booktitle> <publisher> Addison-Wesley. </publisher> <address> p. </address> <pages> 251-267. </pages>
Reference-contexts: If more functional animations were easier to add to interfaces, they could be used to make changes in interface objects more comprehensible, as recommended by <ref> [1] </ref>. For example, when menus or graphical objects appear, they can fade in. The effects of an Undo are often hard to detect, so animations can be used to make them more noticeable.
Reference: 2. <author> Chang, B.-W. and Ungar, D. </author> <title> Animation: From Cartoons to the User Interface. </title> <booktitle> in UIST93: Symposium on User Interface Software and Technology. </booktitle> <year> 1993. </year> <pages> pp. 45-55. </pages>
Reference-contexts: Built-in support for undoing of the effects of anima tions. A library of animations that can be attached to objects, including special effects such as slow-in-slow-out, anticipation, follow-through, and various ways for objects to appear and disappear. These effects have been adapted from cartooning techniques <ref> [2] </ref> [7]. RELATED WORK Previous systems have provided animation and temporal constraints, but none are as flexible or easy-to-use as Amulets. <p> Artkit also does not use a constraint mechanism to implement the animations. A number of special animation effects were added to the Self environment <ref> [2] </ref>, including motion blur, anticipation and follow-through, slow-in-slow-out, and arcing paths. Many of these are also provided by Amulet, and the others would be easy to add. <p> After reaching the target value, the animator does follow-through, wiggling back and forth slightly as if to dissipate its energy. These effects, which were part of the Self user interface <ref> [2] </ref>, lend realism and solidity to objects. List of Values Another type of animation chooses from a fixed set of values. For example, icons are often animated by cycling through a sequence of pictures. Therefore, one form of animation constraint takes a list of values and iterates through them. <p> Other effects can be achieved by having the final position be onscreen. For example, one end of an arrow might grow out of the source object towards the destination object, as in <ref> [2] </ref>. The fourth effect takes the parts of the object and moves them away in different directions to make it look like the object is exploding. <p> Under heavy loads, the animations degrade gracefully, showing fewer intermediate values. Updating the Graphics Other systems <ref> [2] </ref> have achieved high frame rates by col-ormap cycling techniques, which reserve portions of the colormap for fast rendering. In Amulet, by contrast, we animate objects simply by drawing them repeatedly.
Reference: 3. <author> Duisberg, R A., </author> <title> Constraint-Based Animation: Temporal Constraints in the Animus System. </title> <type> PhD Thesis, </type> <institution> Dept. of Computer Science, Univerity of Washington, </institution> <year> 1986. </year> <note> Also Tektronix Laboratories Technical Report CR-86-37, </note> <month> August, </month> <year> 1986. </year>
Reference-contexts: Thus, unlike in other toolkits such as Artkit [6] and Animus <ref> [3] </ref>, it is just as easy to animate preexisting objects such as buttons from a toolkit and components from libraries as it is to animate newly created objects. Briefly, the innovations of our approach are: Increased modularity since all aspects of the anima tions can be separately specified. <p> Many of these are also provided by Amulet, and the others would be easy to add. However, Self implemented these effects using special-purpose code, and does not provide a way for programmers to customize or reuse them for particular applications. The Animus system <ref> [3] </ref> pioneered temporal constraints in a toolkit. Animus was primarily aimed at visualizations and simulations, and did not provide any built-in mechanisms to animate user interfaces or to make it easy to animate objects. Animus provides constraints that depend on time and help with the mathematics to calculate differential equations. <p> Given the normal constraint mechanisms already in Amulet, the programmer could write constraints that depend on the clock. For example the charge on a capacitor could be a function of time, as in Animus <ref> [3] </ref>. The programmer could create clock objects with a specified tick rate, and insert a constraint which depends on the clocks value into the Charge slot of the capacitor. The system will update the clock object at the appropriate intervals.
Reference: 4. <author> Durbin, J., Gossweiler, R., and Pausch, R. </author> <title> Amortizing 3D Graphics Optimization Across Multiple Frames. </title> <booktitle> in UIST95: Symposium on User Interface Software and Technology. </booktitle> <year> 1995. </year> <pages> pp. 13-18. </pages>
Reference-contexts: This is implemented by making a copy of the object, making the original object invisible, and then separately animating all the parts of the copy in different directions. This idea comes from the animation in the Alice system <ref> [4] </ref> for object destruction, but in Alice the animation is hardwired and inflexible, whereas in Amulet, the programmer has complete control over what animation is used and how it appears.
Reference: 5. <editor> Foley, J.D., et al., </editor> <booktitle> Computer Graphics; Principles and Practice, Second Edition. 1990, </booktitle> <address> Reading, MA: </address> <publisher> Addison-Wesley Publishing Company. </publisher>
Reference-contexts: Often, this will be used to fade from the current color to white or black. When the user wants to fade between other colors, different intermediate colors will appear depending on which color model is used <ref> [5] </ref>. The color animator provides a parameter to allow the programmer to choose between the RGB or HSV color models when calculating which intermediate colors to choose. Objects in Amulet can use a filling style of none, which means that only the border is drawn and objects underneath show through.
Reference: 6. <author> Hudson, S.E. and Stasko, J.T. </author> <title> Animation Support in a User Interface Toolkit: Flexible, Robust, and Reusable Abstractions, </title> <booktitle> in UIST93: Symposium on User Interface Software and Technology. </booktitle> <year> 1993. </year> <pages> pp. 57-67. </pages>
Reference-contexts: In addition to the obvious numerical slots like positions and sizes, animations can also interpolate colors, fonts, pictures for an icon (bitmaps), the point list of a polygon, and visibility, all without changing the graphical objects to be animated. Thus, unlike in other toolkits such as Artkit <ref> [6] </ref> and Animus [3], it is just as easy to animate preexisting objects such as buttons from a toolkit and components from libraries as it is to animate newly created objects. <p> These effects have been adapted from cartooning techniques [2] [7]. RELATED WORK Previous systems have provided animation and temporal constraints, but none are as flexible or easy-to-use as Amulets. The Artkit toolkit <ref> [6] </ref> provides Transition Objects which contain a reference to the graphical object to be animated, a trajectory along which to move the object, a time interval, and a pacing function. These are generalizations of the architecture used in [12].
Reference: 7. <author> Lassiter, J. </author> <title> Principles of Traditional Animation Applied to 3D Computer Animation. </title> <booktitle> in Proceedings SIGGRAPH87. </booktitle> <year> 1987. </year> <pages> pp. 35-44. </pages>
Reference-contexts: Built-in support for undoing of the effects of anima tions. A library of animations that can be attached to objects, including special effects such as slow-in-slow-out, anticipation, follow-through, and various ways for objects to appear and disappear. These effects have been adapted from cartooning techniques [2] <ref> [7] </ref>. RELATED WORK Previous systems have provided animation and temporal constraints, but none are as flexible or easy-to-use as Amulets. <p> This separation is desir Easily Adding Animations to Interfaces Using Constraints - 7 - To appear in UIST'96 able not only for modularity, but because designers often want to tweak timing parameters independently from path parameters <ref> [7] </ref>. The pacing function maps the current elapsed time of the animation to the path parameter (a real value between 0.0 and 1.0). Pacing functions are used to accelerate and decelerate along the path.
Reference: 8. <author> Myers, B.A., et al., </author> <title> The Amulet V2.0 Reference Manual, . 1996, </title> <institution> Carnegie Mellon University Computer. Science Dep-tartment Technical Report Number CMU-CS-95-166-R1. </institution>
Reference-contexts: INTRODUCTION By providing better modularity for the software for user interfaces, the Amulet toolkit <ref> [8] </ref> achieves increased reuse and decreased code size, and makes it easier for researchers and developers to create applications. For example, in Amulet, the interactive behavior of objects can be defined entirely independently from their graphical look by attaching Interactor objects to the graphics.
Reference: 9. <author> Myers, B.A. and Kosbie, D. </author> <title> Reusable Hierarchical Command Objects, </title> <booktitle> in Proceedings CHI96: Human Factors in Computing Systems. 1996. </booktitle> <address> Vancouver, Canada. </address> <pages> pp. 260-267. </pages>
Reference-contexts: For example, in Amulet, the interactive behavior of objects can be defined entirely independently from their graphical look by attaching Interactor objects to the graphics. Command objects <ref> [9] </ref> encapsulate the complete information about operations, and can be hierarchically linked so each application layer can be separately defined. We have followed this philosophy in our new support for animations and other time-based behaviors. <p> Commands on Animation Completion Rather than using a call-back procedure for when a widget is operated as in most toolkits, Amulet instead allocates a command object and calls its Do_Method <ref> [9] </ref>. The advantages of command objects are that they also support various forms of Undo, the enabling and disabling (greying out) of the operation, providing help, and saving all information needed to execute or undo the command. Animation constraints also have attached commands. <p> Since the final action of an animator is to execute a Command, the standard Amulet mechanisms can be used to Undo the effect of the animation <ref> [9] </ref>. The programmer only needs to clear the Not Undoable flag of the animator command, or use one of the standard commands from the library, such as the Delete_Object_Command, and the action will be queued in the standard undo history. DEBUGGING Debugging animations is often quite difficult.
Reference: 10. <author> Price, B.A., Baecker, R.A., and Small, I., </author> <title> A Principled Taxonomy of Software Visualization, </title> <journal> Journal of Visual Languages and Computing, 1993. </journal> <volume> 4(3): </volume> <pages> pp. 211-266. </pages>
Reference: 11. <editor> Sederberg, T.W., et al. </editor> <title> 2-D Shape Blending: An Intrinsic Solution to the Vertex Path Problem. </title> <booktitle> in Proceedings SIGGRAPH93. </booktitle> <year> 1993. </year> <pages> pp. 15-18. </pages>
Reference-contexts: It would be fun in the future to add a warping animator that determines an attractive way to animate between two arbitrary polygons, as in <ref> [11] </ref>. DETAILED DESIGN The animation mechanism is implemented as a new type of constraint solver that can be attached to objects. Amulet implements a prototype-instance object model on top of C++.
Reference: 12. <author> Stasko, J.T. </author> <title> Using Direct Manipulation to Build Algorithm Animations by Demonstration, </title> <booktitle> in Proceedings CHI91: Human Factors in Computing Systems. 1991. </booktitle> <address> New Orleans, LA. </address> <pages> pp. 307-314. </pages>
Reference-contexts: The Artkit toolkit [6] provides Transition Objects which contain a reference to the graphical object to be animated, a trajectory along which to move the object, a time interval, and a pacing function. These are generalizations of the architecture used in <ref> [12] </ref>. For objects to be Easily Adding Animations to Interfaces Using Constraints - 3 - To appear in UIST'96 animated in Artkit, the programmer must add three special methods to the graphical objects being animated: start_transition, transition_step and end_transition.
References-found: 12

