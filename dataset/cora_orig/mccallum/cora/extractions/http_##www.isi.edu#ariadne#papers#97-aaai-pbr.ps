URL: http://www.isi.edu/ariadne/papers/97-aaai-pbr.ps
Refering-URL: http://www.isi.edu/~ambite/
Root-URL: 
Email: fambite, knoblockg@isi.edu  
Title: Planning by Rewriting: Efficiently Generating High-Quality Plans  
Author: Jose Luis Ambite and Craig A. Knoblock 
Note: In Proceedings of the Fourteenth National Conference on  
Address: 4676 Admiralty Way, Marina del Rey, CA 90292  Providence, Rhode Island, 1997.  
Affiliation: Information Sciences Institute and Department of Computer Science University of Southern California  Artificial Intelligence,  
Abstract: Domain-independent planning is a hard combinatorial problem. Taking into account plan quality makes the task even more difficult. We introduce a new paradigm for efficient high-quality planning that exploits plan rewriting rules and efficient local search techniques to transform an easy-to-generate, but possibly suboptimal, initial plan into a low-cost plan. In addition to addressing the issues of efficiency and quality, this framework yields a new anytime planning algorithm. We have implemented this planner and applied it to several existing domains. The results show that this approach provides significant savings in planning effort while generating high-quality plans. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Arens, Y.; Knoblock, C. A.; and Shen, W.-M. </author> <year> 1996. </year> <title> Query reformulation for dynamic information integration. </title> <journal> Journal of Intelligent Information Systems, Special Issue on Intelligent Information Integration </journal> 6(2/3):99-130. 
Reference-contexts: Query planning Distributed query processing involves generating a plan that efficiently computes a user query. This plan is composed of data retrieval actions at diverse information sources and operations on this data. We used a simplified domain for the query planner (Sage) of the SIMS mediator <ref> (Arens, Knoblock, & Shen 1996) </ref>. We compare the performance and quality of the Sage planner and PBR for this domain, where the query plans are trees of join operations.
Reference: <author> Dean, T., and Boddy, M. </author> <year> 1988. </year> <title> An analysis of time-dependent planning. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence, </booktitle> <pages> 49-54. </pages>
Reference-contexts: Second, efficient search of the space of rewritings is critical to the success of the method. Thus, we adapt techniques from local search to help in this process. Finally, our framework yields an anytime algorithm <ref> (Dean & Boddy 1988) </ref>. The planner always has a solution to offer at any point in its computation (modulo the initial plan generation, which should be fast). This is a clear advantage over traditional planning approaches, which must run to completion before producing a solution.
Reference: <author> Erol, K.; Nau, D.; and Subrahmanian, V. S. </author> <year> 1995. </year> <title> Decidability and undecidability results for domain-independent planning. </title> <journal> Artificial Intelligence 76(1-2):75-88. </journal>
Reference-contexts: Domain independent planning accepts as input, not only the initial state and the goal, but also the domain specification (i.e., the operators). This is a problem of considerable practical significance, but domain-independent planning is computationally hard except for its simplest formulations <ref> (Erol, Nau, & Sub-rahmanian 1995) </ref>. Moreover, in many circumstances it is not enough to find any solution plan since the quality of the solution is important. This paper presents a new paradigm for efficiently generating high-quality plans. Two observations guided the present work.
Reference: <author> Etzioni, O. </author> <year> 1993. </year> <title> Acquiring search-control knowledge via static analysis. </title> <booktitle> Artificial Intelligence 62(2) </booktitle> <pages> 255-302. </pages>
Reference: <author> Forgy, C. L. </author> <year> 1982. </year> <title> Rete: A fast algorithm for the many pattern/many object pattern match problem. </title> <booktitle> Artificial Intelligence 19 </booktitle> <pages> 17-37. </pages>
Reference-contexts: This is useful to avoid returning to some previously visited plan and thus cycling. Also, it forces the search not to be concentrated in a small local area around a local minimum. Finally, we plan to improve the planner implementation. For example, a RETE-like graph matcher <ref> (Forgy 1982) </ref> would make the system much more efficient. Conclusions We presented a new paradigm for efficient high-quality planning based on local search and plan rewriting, and we provided initial experimental support for its usefulness in several domains.
Reference: <author> Foulser, D. E.; Li, M.; and Yang, Q. </author> <year> 1992. </year> <title> Theory and algorithms for plan merging. </title> <journal> Artificial Intelligence 57(2-3):143-182. </journal>
Reference-contexts: The system generates all valid embeddings of the replacement subplan into the original plan (once the subplan in the :replace field has been removed). Thus, a single rule instantiation may produce several rewritten plans. The formal conditions for valid rewriting, a generalization from plan merging in <ref> (Foulser, Li, & Yang 1992) </ref>, are shown in Figure 6. It is possible to define rules whose application provably yields a correct plan. However, this eager approach would require the generation of many rules with very long and specific antecedents, which are possibly expensive to match. <p> This is not surprising because of the restricted space of left trees that Sage-BFS is searching. As in the manufacturing domain, PBR shows better scaling properties than the corresponding systematic algorithms. Related work Some of the most closely related work is on plan merging <ref> (Foulser, Li, & Yang 1992) </ref>. Their system solves a complex goal by dividing it into subgoals, solving the subproblems, and combining the partial solutions exploiting synergies. They improve the quality of a plan by replacing a set of operators by one operator that can do the same job.
Reference: <author> Graefe, G., and DeWitt, D. J. </author> <year> 1987. </year> <title> The EXODUS optimizer generator. </title> <booktitle> Proceedings of the 1987 ACM SIGMOD International Conference on Management of Data 16(3) </booktitle> <pages> 160-172. </pages>
Reference-contexts: Moreover, we provide an anytime algorithm while other approaches must run to completion. Some domain specific planners have also used a transformational approach, for example, query evaluation in centralized databases <ref> (Graefe & DeWitt 1987) </ref>. They parse the query to obtain an initial evaluation plan and iteratively transform this plan using a set of rules based on the algebra of the data model. PBR offers a more general and easily extensible framework to tackle more complex information gathering domains.
Reference: <author> Hanks, S., and Weld, D. S. </author> <year> 1995. </year> <title> A domain-independent algorithm for plan adaptation. </title> <journal> Journal of Artificicial Intelligence Research 2 </journal> <pages> 319-360. </pages>
Reference-contexts: Case-based planning also attempts to solve a problem by modifying a previous solution (Veloso 1994; Paulokat & Wess 1994). Systematic algorithms, such as <ref> (Hanks & Weld 1995) </ref>, invert the decisions done in refinement planning to find a path between the solution to a similar old problem and the new problem. Our work modifies a solution to the current problem, so there is no need for similarity metrics, nor retrieval process.
Reference: <author> Kautz, H., and Selman, B. </author> <year> 1996. </year> <title> Pushing the envelope: Planning, propositional logic, and stochastic search. </title> <booktitle> In Proceedings of the Thirteenth National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Some systems incorporate automatically learned search control, for example, search control rules (Minton 1988) and abstraction (Knoblock 1994a). Our system does not learn the rewriting rules currently (see Future Work). Other work has reduced planning to propositional satisfiability, which can be solved by stochastic local search <ref> (Kautz & Selman 1996) </ref>. These approaches do not specifically address plan quality, or else they consider only very simple cost metrics (such as the number of steps). Quality-improving control rules are learned in (Perez 1996), but planning efficiency was not significantly improved.
Reference: <author> Knoblock, C. A. </author> <year> 1994a. </year> <title> Automatically generating abstractions for planning. </title> <booktitle> Artificial Intelligence 68(2). </booktitle>
Reference-contexts: By setting the type of search and providing a strong bias by means of the search control rules, the planner can quickly generate a valid, although possibly suboptimal, initial plan. For example, in the manufacturing domain we used depth-first search and a goal selection heuristic based on abstraction hierarchies <ref> (Knoblock 1994a) </ref>. This combination quickly generates a feasible plan, but often the time required to manufacture all objects is suboptimal. For many domains, we expect that simple domain-dependent greedy algorithms will provide good initial plans. <p> The least-committed partial-order nature of PBR allows it to optimize the plans in ways that cannot be achieved by optimizing linear subsequences. A variety of research has attacked the complexity of planning. Some systems incorporate automatically learned search control, for example, search control rules (Minton 1988) and abstraction <ref> (Knoblock 1994a) </ref>. Our system does not learn the rewriting rules currently (see Future Work). Other work has reduced planning to propositional satisfiability, which can be solved by stochastic local search (Kautz & Selman 1996).
Reference: <author> Knoblock, C. A. </author> <year> 1994b. </year> <title> Generating parallel execution plans with a partial-order planner. </title> <booktitle> In Proceedings of the Second International Conference on Artificial Intelligence Planning Systems. </booktitle>
Reference-contexts: Operators may need to use certain resources to perform their actions. In this paper, we consider unit non-consumable resources, that is, those that are fully acquired by an operator until the completion of its action, and then released to be reused <ref> (Knoblock 1994b) </ref>. For this type of resource, steps requiring the same resource have to be sequentially ordered. Finally, note that all conditions in the plan are fully ground because we start with a complete initial plan.
Reference: <author> Knoblock, C. A. </author> <year> 1995. </year> <title> Planning, executing, </title> <booktitle> sensing, and replanning for information gathering. In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: There are ten possible machining operations for making a part. Sample rewriting rules for this domain appear in Figures 3 and 7. To evaluate the performance of Planning by Rewriting (PBR), we compared it to a planner called Sage <ref> (Knoblock 1995) </ref>, which is an extension of UCPOP that supports resources, execution and replanning. For PBR, we defined ten plan rewriting rules for this domain and used a steepest descent search.
Reference: <author> Knoblock, C. A. </author> <year> 1996. </year> <title> Building a planner for information gathering: A report from the trenches. </title> <booktitle> In Proceedings of the Third International Conference on Artificial Intelligence Planning Systems. </booktitle>
Reference-contexts: Distributed query processing (Yu & Chang 1984) involves generating a plan that efficiently computes a user query. This plan is composed of data retrieval actions at diverse information sources and operations on this data (such as join, selection, etc). Some systems use a general-purpose planner to solve this problem <ref> (Knoblock 1996) </ref>. In this domain it is relatively easy to construct an initial plan and then transform it using a gradient-descent search to reduce its cost. <p> Query planning Distributed query processing involves generating a plan that efficiently computes a user query. This plan is composed of data retrieval actions at diverse information sources and operations on this data. We used a simplified domain for the query planner (Sage) of the SIMS mediator <ref> (Arens, Knoblock, & Shen 1996) </ref>. We compare the performance and quality of the Sage planner and PBR for this domain, where the query plans are trees of join operations.
Reference: <author> Minton, S. </author> <year> 1988. </year> <title> Learning Search Control Knowledge: An Explanation-Based Approach. </title> <address> Boston, MA: </address> <publisher> Kluwer. </publisher>
Reference-contexts: is already implied by the :operators (define-rule :name avoid-move-twice :if (:operators ((?n1 (unstack ?b1 ?b2)) (?n2 (stack ?b1 ?b3 Table))) :links (?n1 (on ?b1 Table) ?n2) :constraints ((possibly-adjacent ?n1 ?n2) (:neq ?b2 ?b3))) :replace (:operators (?n1 ?n2)) :with (:operators (?n3 (stack ?b1 ?b3 ?b2)))) A rule for a manufacturing domain <ref> (Minton 1988) </ref> is shown in Figure 3. <p> In this section we report on our initial results in the domains of manufacturing process planning and distributed query planning. Process planning The task in the manufacturing process planning domain is to find a plan to manufacture a set of parts. We implemented the domain specification in <ref> (Minton 1988) </ref>. This domain contains a variety of machines, such as a lathe, punch, spray painter, welder, etc, which are used to perform various operations to produce a set of parts. <p> The least-committed partial-order nature of PBR allows it to optimize the plans in ways that cannot be achieved by optimizing linear subsequences. A variety of research has attacked the complexity of planning. Some systems incorporate automatically learned search control, for example, search control rules <ref> (Minton 1988) </ref> and abstraction (Knoblock 1994a). Our system does not learn the rewriting rules currently (see Future Work). Other work has reduced planning to propositional satisfiability, which can be solved by stochastic local search (Kautz & Selman 1996).
Reference: <author> Minton, S. </author> <year> 1992. </year> <title> Minimizing conflicts: A heuristic repair method for constraint-satisfaction and scheduling problems. </title> <journal> Artificial Intelligence 58(1-3):161-205. </journal>
Reference-contexts: Such an effect is ameliorated by the gradient-descent search strategy. Local search has a long tradition in combinatorial optimization (Papadimitriou & Steiglitz 1982). Local improvement ideas have found application in constraint satisfaction, scheduling, and heuristic search. In constraint satisfaction, <ref> (Minton 1992) </ref> start with a complete, but inconsistent, variable assignment and efficiently search the space of repairs using a simple heuristic, min-conflicts.
Reference: <author> Monte Zweben, B. D., and Deale, M. </author> <year> 1994. </year> <title> Scheduling and rescheduling with iterative repair. In Intelligent Scheduling. </title> <address> San Mateo, CA: </address> <publisher> Morgan Kaufman. </publisher> <pages> 241-255. </pages>
Reference-contexts: In our work we focus on a STRIPS-like planning paradigm (with fairly expressive operators) in which the rewritings yield complete and consistent plans, as opposed to complete but inconsistent variable assignments. In work on scheduling and rescheduling, <ref> (Monte Zweben & Deale 1994) </ref> define a set of general, but fixed, repairs methods, and use simulated annealing to search the space of schedules. Our plans are networks of actions as opposed to the metric-time total-order tasks in that work.
Reference: <author> Nau, D. S.; Gupta, S. K.; and Regli, W. C. </author> <year> 1995. </year> <title> AI planning versus manufacturing-operation planning: A case study. </title> <booktitle> In Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Domain independent planning accepts as input, not only the initial state and the goal, but also the domain specification (i.e., the operators). This is a problem of considerable practical significance, but domain-independent planning is computationally hard except for its simplest formulations <ref> (Erol, Nau, & Sub-rahmanian 1995) </ref>. Moreover, in many circumstances it is not enough to find any solution plan since the quality of the solution is important. This paper presents a new paradigm for efficiently generating high-quality plans. Two observations guided the present work. <p> In a feature-based approach <ref> (Nau, Gupta, & Regli 1995) </ref> it is possible to enumerate the possible actions involved in building a piece by analyzing its CAD model. It is more difficult to find an ordering of the operations and the setups that optimize the machining cost.
Reference: <author> Papadimitriou, C. H., and Steiglitz, K. </author> <year> 1982. </year> <title> Combinatorial Optimization: Algorithms and Complexity. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall. </publisher>
Reference-contexts: However, the rules in PBR may search the space of rewritings non-systematically. Such an effect is ameliorated by the gradient-descent search strategy. Local search has a long tradition in combinatorial optimization <ref> (Papadimitriou & Steiglitz 1982) </ref>. Local improvement ideas have found application in constraint satisfaction, scheduling, and heuristic search. In constraint satisfaction, (Minton 1992) start with a complete, but inconsistent, variable assignment and efficiently search the space of repairs using a simple heuristic, min-conflicts.
Reference: <author> Paulokat, J., and Wess, S. </author> <year> 1994. </year> <title> Planning for machining workpieces with a partial-order, nonlinear planner. </title> <booktitle> In Working notes of the AAAI Fall Symposium on Planning and Learning: On to Real Applications. </booktitle>
Reference: <author> Penberthy, J. S., and Weld, D. S. </author> <year> 1992. </year> <title> UCPOP: A sound, complete, partial order planner for ADL. </title> <booktitle> In Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <pages> 189-197. </pages>
Reference-contexts: Finally, we address the selection of the next plan. Planning and Rewriting Concepts A plan is represented by a graph notation, in the spirit of partial-order causal-link (POCL) planners, such as UCPOP <ref> (Penberthy & Weld 1992) </ref>. The nodes are plan steps, that is, domain actions. The edges specify a temporal ordering relation among steps, imposed by causal links and ordering constraints. A causal link is a record of how a condition is used in a plan.
Reference: <author> Perez, M. A. </author> <year> 1996. </year> <title> Representing and learning quality-improving search control knowledge. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Machine Learning. </booktitle>
Reference-contexts: Other work has reduced planning to propositional satisfiability, which can be solved by stochastic local search (Kautz & Selman 1996). These approaches do not specifically address plan quality, or else they consider only very simple cost metrics (such as the number of steps). Quality-improving control rules are learned in <ref> (Perez 1996) </ref>, but planning efficiency was not significantly improved. By exploiting domain-specific knowledge, conveniently expressed as plan rewriting rules, and the local search approach, we improve both plan efficiency and quality. Moreover, we provide an anytime algorithm while other approaches must run to completion.
Reference: <author> Ratner, D., and Pohl, I. </author> <year> 1986. </year> <title> Joint and LPA*: Combination of approximation and search. </title> <booktitle> In Proceedings of the Fifth National Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Our plans are networks of actions as opposed to the metric-time total-order tasks in that work. Also we can easily specify different rewriting rules (general or specific) to suit each domain, as opposed to their fixed strategies. Related ideas have been used in heuristic search <ref> (Ratner & Pohl 1986) </ref>. In that work, first they find a valid sequence of operators using an approximate algorithm. Then, they identify segments of this sequence, take their initial and end states, and heuristically search for a shorter path for that segment (the cost metric is the path length).
Reference: <author> Schurr, A. </author> <year> 1996. </year> <title> Programmed Graph Replacement Systems. </title> <publisher> World Scientific. </publisher>
Reference-contexts: PBR offers a more general and easily extensible framework to tackle more complex information gathering domains. Finally, the research in graph rewriting <ref> (Schurr 1996) </ref> may provide efficient matching algorithms and perhaps another implementation vehicle using high-level graph-rewriting programming languages. Future Work There are several issues that we plan to address more thoroughly in the future: initial plan generation, automatic rule generation, and alternative search strategies.
Reference: <author> Veloso, M. </author> <year> 1994. </year> <title> Planning and Learning by Analogical Reasoning. </title> <publisher> Springer Verlag. </publisher>
Reference: <author> Yu, C., and Chang, C. </author> <year> 1984. </year> <title> Distributed query processing. </title> <journal> ACM Computing Surveys 16(4) </journal> <pages> 399-433. </pages>
Reference-contexts: As motivation, consider two domains: query processing in a distributed, heterogeneous environment and manufacturing process planning. Distributed query processing <ref> (Yu & Chang 1984) </ref> involves generating a plan that efficiently computes a user query. This plan is composed of data retrieval actions at diverse information sources and operations on this data (such as join, selection, etc). Some systems use a general-purpose planner to solve this problem (Knoblock 1996).
References-found: 25

