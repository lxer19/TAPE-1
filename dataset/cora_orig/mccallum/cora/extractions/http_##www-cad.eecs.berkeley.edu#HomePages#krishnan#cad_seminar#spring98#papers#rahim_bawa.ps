URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/spring98/papers/rahim_bawa.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/spring98/abstract/rahim_bawa.html
Root-URL: http://www.cs.berkeley.edu
Email: email Emmanuelle.Encrenaz@masi.ibp.fr  
Title: A Symbolic Relation for a Subset of VHDL'87 Descriptions and its Application to Symbolic Model Checking  
Author: Emmanuelle Encrenaz 
Address: 4 place Jussieu, 75252 Paris Cedex 05, FRANCE  
Affiliation: Laboratoire MASI IBP, Universit Pierre et Marie Curie,  
Note: proc. of CHARME'95 Frankfurt, Germany oct.95, LNCS 987.  
Abstract: This paper presents the main principles for building a symbolic transition system from a description written in a subset of VHDL'87 (temporal information is excluded and objects are restricted to bit, bit_vector and Boolean types). This transition system is used for formal verification of the VHDL description. It consist of a system of Boolean equations indicating the next state of the system in terms of its current state. It is automatically generated from an intermediate representation of the VHDL description by means of a Petri Net. The deterministic nature of VHDL 87 and the exclusion of temporal elements in the description permit us to abstract the behavior of the system : only one state per delta cycle is represented instead of all intermediate states encountered in simulation. This abstraction reduces the size of the transition system and the cost of subsequent analysis. The construction of the system of Boolean equations from the Petri Net is presented first, and then an example of verification of a temporal logic property illustrates its use for Symbolic Model Checking. Experimental results are given which demonstrate the feasibility of this approach. 
Abstract-found: 1
Intro-found: 1
Reference: [BCMDH90] <author> J.R.Burch, E.M.Clarke, K.L. McMillan, D.L.Dill, L.H.Hwang, </author> <title> "Symbolic Model Checking : 10 20 states and beyond", </title> <booktitle> Proc. 5th IEEE Symposium on Logic in Computer Science, </booktitle> <year> 1990, </year> <pages> pp 428-439. </pages>
Reference-contexts: Recent trends of symbolic representation of transition systems by means of BDDs [Bryant86] have established the viability of symbolic Model Checking for real hardware systems <ref> [BCMDH90] </ref> [McMillan93]. Our aim is to further the link between VHDL descriptions and Symbolic Model Checking techniques. This requires the definition of a formal model representing the VHDL proc. of CHARME'95 , Frankfurt, Germany , oct.95, LNCS 987. system, from which a symbolic transition system is extracted.
Reference: [BEC94] <author> R.K.Bawa, E. Encrenaz, J.M. Couvreur, </author> <type> "VPN Technical Report", technical report IBP-MASI 94-13, </type> <institution> Apr.94. </institution>
Reference-contexts: Various techniques of construction of the transition system representing all behaviors of the modeled system can be applied to this formalism. An overview of Petri Nets can be found in [Murata89]. A VHDL description is automatically translated into a Petri Net <ref> [BEC94] </ref>. The Petri Net represents the control structure of VHDL processes and their synchronization reproducing the VHDL simulation semantics. An external data part of the Petri Net contains the data modified by the firing of transitions in the control part.
Reference: [BPS92] <author> D.Borrione, L.Pierre, A.Salem,"PREVAIL: </author> <title> A proof environment for VHDL descriptions",in Correct Hardware Design Methodologies, </title> <editor> ed P.Camurati and P.Prinetto, </editor> <publisher> North Holland 1992 </publisher>
Reference-contexts: Their links with VHDL began at the end of the 80's, and since much research has been done in this area. Different formal semantics of VHDL'87 [VHDL'87] were proposed to apply automatic formal verification : theorem proving techniques [VanTassel93] <ref> [BPS92] </ref>, stream functions [BS-FD-K94], process algebra [BSCPB94], structural Petri Nets analysis [OC93], Symbolic Model Checking [DB93] DB95] [DH95a]... Symbolic Model Checking techniques require the description of the behavior of the system by means of a transition system determining the states of the system and the relations between them.
Reference: [Bryant86] <author> R.E.Bryant, </author> <title> "Graph Based Algorithms for Boolean Function Manipulation", </title> <journal> Transaction on Computers, </journal> <volume> Vol C-35, </volume> <pages> pp. 677-691, </pages> <year> 1986. </year>
Reference-contexts: Symbolic Model Checking techniques require the description of the behavior of the system by means of a transition system determining the states of the system and the relations between them. Recent trends of symbolic representation of transition systems by means of BDDs <ref> [Bryant86] </ref> have established the viability of symbolic Model Checking for real hardware systems [BCMDH90] [McMillan93]. Our aim is to further the link between VHDL descriptions and Symbolic Model Checking techniques.
Reference: [CBM90] <author> O. Coudert, C. Berthet, J-C. Madre, </author> <title> "Verification of sequential machines using functional vectors", </title> <booktitle> in International Workshop on Applied Formal proc. of CHARME'95 , Frankfurt, Germany , oct.95, LNCS 987. Methods for Correct VLSI Design, volume VLSI Design Methods II, </booktitle> <pages> pp. 179-196, </pages> <address> Belgium 1989. </address> <booktitle> IFIP WG 10.2/ WG 10.5, </booktitle> <publisher> North Holland 1990. </publisher>
Reference: [Clarke94] <author> E. Clarke, </author> <title> "A VHDL subset for Model Checking", </title> <type> CMU Internal Report, feb. 9 5 </type> . 
Reference-contexts: Example : a bus arbiter with combinatorial loops The example used for demonstrating our approach is composed of n cells of a bus arbiter proposed by [Mc Millan 93]. A VHDL description of this device is described in <ref> [Clarke94] </ref>. The VHDL description of one cell of the bus arbiter is composed of three processes. The interconnection of cells induces cyclic dependencies which may drive the system into a never-ending simulation.
Reference: [DJ92] <author> A. Debreil, D. </author> <title> Jaillet,"Synchronous description in VHDL for formal proof and resulting guidelines proposed by BULL", Advanced Report, </title> <editor> BULL Produits et Systmes, Dpt Dveloppements Assists, Les Clayes sous Bois, </editor> <address> France, </address> <month> Jul </month> <year> 1992. </year> <note> BULL/92.0001 rev.A. </note>
Reference-contexts: The difficulty comes from the fact that a system may present non stabilizations which are not anticipated. proc. of CHARME'95 , Frankfurt, Germany , oct.95, LNCS 987. Synchronous designs adopting strict description rules avoid this problem <ref> [DJ92] </ref>. But in a general case, [VHDL'87] does not prevent from these neverending loops. Conditions for never ending simulation cycle, provided stimuli do not change during the cycle, are of two types : the system structure and signal values have to be taken into account.
Reference: [BS-FD-K94] <author> P.T.Breuer,L.Sanchez-Fernandez, C.Delgado-Kloos, </author> <title> "Proof Therory and a Validation Condition Generator for VHDL", </title> <booktitle> Proc of the EURO-DAC,Grenoble, </booktitle> <year> 1994, </year> <pages> pp 512-517. </pages>
Reference-contexts: Their links with VHDL began at the end of the 80's, and since much research has been done in this area. Different formal semantics of VHDL'87 [VHDL'87] were proposed to apply automatic formal verification : theorem proving techniques [VanTassel93] [BPS92], stream functions <ref> [BS-FD-K94] </ref>, process algebra [BSCPB94], structural Petri Nets analysis [OC93], Symbolic Model Checking [DB93] DB95] [DH95a]... Symbolic Model Checking techniques require the description of the behavior of the system by means of a transition system determining the states of the system and the relations between them.
Reference: [BSCPB94] <author> C.Bayol, B.Soulas, F.Corno, P.Prinetto, </author> <title> D.Borrione,"A Process Algebra Interpretation of a Verification Oriented Overlanguage of VHDL" .Proc of the EURO-VHDL, </title> <booktitle> Grenoble France 1994, </booktitle> <pages> pp. 506-511. </pages>
Reference-contexts: Their links with VHDL began at the end of the 80's, and since much research has been done in this area. Different formal semantics of VHDL'87 [VHDL'87] were proposed to apply automatic formal verification : theorem proving techniques [VanTassel93] [BPS92], stream functions [BS-FD-K94], process algebra <ref> [BSCPB94] </ref>, structural Petri Nets analysis [OC93], Symbolic Model Checking [DB93] DB95] [DH95a]... Symbolic Model Checking techniques require the description of the behavior of the system by means of a transition system determining the states of the system and the relations between them.
Reference: [DB93] <institution> D.Dharbe,D.Borrione,"Symbolic Model Checking of VHDL Design Entities", Technical Report of IMAG Institut, </institution> <type> RR 925 -I, </type> <month> dec </month> <year> 1993 </year>
Reference-contexts: Different formal semantics of VHDL'87 [VHDL'87] were proposed to apply automatic formal verification : theorem proving techniques [VanTassel93] [BPS92], stream functions [BS-FD-K94], process algebra [BSCPB94], structural Petri Nets analysis [OC93], Symbolic Model Checking <ref> [DB93] </ref> DB95] [DH95a]... Symbolic Model Checking techniques require the description of the behavior of the system by means of a transition system determining the states of the system and the relations between them.
Reference: [DB95] <institution> D.Dharbe,D.Borrione,"A qualitative finite subset of VHDL and semantics", Technical Report of IMAG Institut, </institution> <type> RR 943 -I, </type> <month> feb </month> <year> 1995 </year>
Reference-contexts: Their approach is applicable to a fairly large subset of VHDL (all finite types and timing constructs are allowed in their descriptions). <ref> [DB95] </ref> also define a semantics, based on abstract machines, that represents the behavior of a subset of VHDL (timing constructs are excluded but all finite types are treated). The symbolic transition system built in [DB95] is coarser than the one in [DH95b]as the only states considered are the ones at the <p> fairly large subset of VHDL (all finite types and timing constructs are allowed in their descriptions). <ref> [DB95] </ref> also define a semantics, based on abstract machines, that represents the behavior of a subset of VHDL (timing constructs are excluded but all finite types are treated). The symbolic transition system built in [DB95] is coarser than the one in [DH95b]as the only states considered are the ones at the end of each delta cycle. We present a way to obtain a symbolic transition system from a restricted VHDL description (timing constructs are excluded and objects are of bit, bit-vector and Boolean types). <p> The transition relation is expressed as a system of Boolean equations, each of which is built from the structure of an intermediate Petri Net. The level of abstraction is similar to <ref> [DB95] </ref> : only states at the end of each delta cycles are considered. We illustrate the use of the symbolic transition system by presenting a means of detecting neverending simulation cycles in a VHDL description. With present simulation tools, these are difficult to detect and to correct.
Reference: [Dhmen94] <author> G. Dhmen, </author> <title> "Petri Nets as Intermediate Representation between VHDL and Symbolic Transition Systems", </title> <booktitle> Proc of the EURO-VHDL, Grenoble France 1994, </booktitle> <pages> pp. 572-577. </pages>
Reference: [DH95a] <author> G.Dhmen, </author> <title> R.Herrmann,"A Deterministic FiniteState Model for VHDL", Formal Semantics for VHDL, edited by C. Delgado Kloos and P.T. </title> <institution> Breur, Universitad Politecnica de Madrid, Spain, </institution> <month> feb </month> <year> 1995. </year>
Reference-contexts: Different formal semantics of VHDL'87 [VHDL'87] were proposed to apply automatic formal verification : theorem proving techniques [VanTassel93] [BPS92], stream functions [BS-FD-K94], process algebra [BSCPB94], structural Petri Nets analysis [OC93], Symbolic Model Checking [DB93] DB95] <ref> [DH95a] </ref>... Symbolic Model Checking techniques require the description of the behavior of the system by means of a transition system determining the states of the system and the relations between them.
Reference: [DH95b] <author> G.Dhmen, R Herrmann, </author> <title> "Translating VHDL into functional symbolic finitestate models", special issue of Formal Methods In System Design, D.Borrione Editor, Kluwer Academic Publisher. </title> <note> To appear in 1995. </note>
Reference: [ECB93] <author> E. Encrenaz, J-M. Couvreur, R-K. Bawa, </author> <title> "Validation of VHDL systems based on Petri Net modeling", </title> <booktitle> in : Proc Workshop on Design Methodologies for Microelectronics and Signal Processing, </booktitle> <address> Poland, </address> <year> 1993 </year>
Reference: [EB95] <author> E. Encrenaz, R-K. Bawa, </author> <title> "A Petri Net Model for Verifying Properties of VHDL programs", </title> <note> Research Report MASI-IBP 95-07, </note> <month> Feb 95. </month>
Reference-contexts: An external data part of the Petri Net contains the data modified by the firing of transitions in the control part. The construction and behavior of the Petri Net are presented in <ref> [EB95] </ref>. They are briefly reviewed in the following section. 1.1. Petri Net Features The Petri Net is composed of subnets, reproducing the structure of each VHDL process and their synchronization according to VHDL'87 semantics. Each process is composed of places and transitions. <p> TRF (t n ) " " means "followed by" : the data modifications of t a are combined appropriately with those of t b , etc... Reduction rules are defined in <ref> [EB95] </ref>.
Reference: [Long] <author> D.E. </author> <title> Long, "A Binary Decision Diagram Package", manual page. </title>
Reference-contexts: Experimental Results All experiments have been performed on a Sun SPARCStation 10 with 32Mbytes of memory. We used the BDD package supplied by <ref> [Long] </ref> to manipulate Boolean functions. nbr of cells nbr of (current) variables : total (wait,evt,eff) Equation system (CPU time in s) Image Computation (CPU time in s) EG Computation (CPU time in s) 2 44 (7,18,19) 0.1 6.5 1.3 4 80 (13,30,37) 0.3 158 6.7 6 120 (19,50,51) 0.7 2709 150
Reference: [McMillan93] <author> K. </author> <title> Mc Millan, "Symbolic Model Checking", </title> <publisher> Kluwer Academic Publisher, </publisher> <address> Norwell Massachusetts, </address> <year> 1993 </year>
Reference-contexts: Recent trends of symbolic representation of transition systems by means of BDDs [Bryant86] have established the viability of symbolic Model Checking for real hardware systems [BCMDH90] <ref> [McMillan93] </ref>. Our aim is to further the link between VHDL descriptions and Symbolic Model Checking techniques. This requires the definition of a formal model representing the VHDL proc. of CHARME'95 , Frankfurt, Germany , oct.95, LNCS 987. system, from which a symbolic transition system is extracted. <p> This requires the definition of a formal model representing the VHDL proc. of CHARME'95 , Frankfurt, Germany , oct.95, LNCS 987. system, from which a symbolic transition system is extracted. Once this transition system is obtained, classical Symbolic Model Checking algorithms can be applied <ref> [McMillan93] </ref>. Building the transition system characterizing the behavior of the system is a difficult task : the building mechanism is simple but the explicit representation of states and relations induces a combinatorial explosion. The time needed to build the explicit transition system and the space to store it become prohibitive. <p> This system of equations represents the functional transition system of the VHDL program. The transition relation is expressed as R = -vj [i+1] = fj (v1 [i],...vn [i]) -, and Symbolic Model Checking algorithms can be applied <ref> [McMillan93] </ref>. As an example, we propose to study the stability of simulation cycles under the assumption of stability of stimuli. 3. Example : Characterizing the Stability of a Simulation C y c l e 3.1. VHDL Simulation and Stabilization Points. <p> The system of Boolean equations developed in section 2 can help detect neverending simulations. The stabilization of a simulation cycle corresponds to a termination property that can be expressed in CTL and checked by Symbolic Model Checking techniques <ref> [McMillan93] </ref> : Let T be the termination property to be verified : T is an atomic property that is true in the terminal states. The detection of sequences that always stabilize comes down to the computation of the CTL formula AF (T).
Reference: [Murata89] <author> T.Murata, </author> <title> "Petri Nets : Properties, Analysis and Applications". </title> <journal> Proc IEEE, </journal> <volume> vol 77 n4, apr 89, </volume> <pages> pp 541-580. </pages>
Reference-contexts: Various techniques of construction of the transition system representing all behaviors of the modeled system can be applied to this formalism. An overview of Petri Nets can be found in <ref> [Murata89] </ref>. A VHDL description is automatically translated into a Petri Net [BEC94]. The Petri Net represents the control structure of VHDL processes and their synchronization reproducing the VHDL simulation semantics.
Reference: [OC93] <institution> Olcoz - Colom , "A Petri Net Approach for the Analysis of VHDL Descriptions", </institution> <note> in: Proc of the CHARME 1993. </note>
Reference-contexts: Different formal semantics of VHDL'87 [VHDL'87] were proposed to apply automatic formal verification : theorem proving techniques [VanTassel93] [BPS92], stream functions [BS-FD-K94], process algebra [BSCPB94], structural Petri Nets analysis <ref> [OC93] </ref>, Symbolic Model Checking [DB93] DB95] [DH95a]... Symbolic Model Checking techniques require the description of the behavior of the system by means of a transition system determining the states of the system and the relations between them.
Reference: [TSLBS-V90] <author> H.J.Touati, H. Savoj, B. Lin, R.V. Brayton, A. </author> <title> Sangiovanni-Vincentelli,"Implicite State enumeration using bdd's",Repot, </title> <institution> University of California, Berkeley, USA, </institution> <year> 1990. </year>
Reference: [vanTassel93] <author> J.P. Van Tassel, "Femto-VHDL: </author> <title> The Semantics of a Subset of VHDL and its Embedding in the HOL Proof Assitant", </title> <institution> PhD Thesis , University of Cambridge, </institution> <year> 1993. </year> <title> [VHDL'87] "IEEE Standard VHDL Language Reference Manual" IEEE Std 1076-1987. </title>
Reference-contexts: Their links with VHDL began at the end of the 80's, and since much research has been done in this area. Different formal semantics of VHDL'87 [VHDL'87] were proposed to apply automatic formal verification : theorem proving techniques <ref> [VanTassel93] </ref> [BPS92], stream functions [BS-FD-K94], process algebra [BSCPB94], structural Petri Nets analysis [OC93], Symbolic Model Checking [DB93] DB95] [DH95a]... Symbolic Model Checking techniques require the description of the behavior of the system by means of a transition system determining the states of the system and the relations between them.
References-found: 22

