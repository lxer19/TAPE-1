URL: http://infopad.eecs.berkeley.edu/~schan/ee219b/report.ps
Refering-URL: http://infopad.eecs.berkeley.edu/~schan/ee219b/index.html
Root-URL: 
Email: schan@eecs.berkeley.edu  
Title: ARIES: A Test Generation Package for Synchronous Sequential Circuits  
Author: Steven C. Chan 
Address: Berkeley, CA 94720  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California,  
Abstract: We present ARIES, a new test pattern generator for synchronous sequential circuits. ARIES is based on the idea that test pattern generation for sequential circuits can follow the same structured generation process as testing of combinational circuits. We show in this paper that it is possible to modify a combinational test pattern generator to perform testing of sequential circuits, and show that this method can potentially give good results. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Thomas Niermann and Janak H. Patel. Hitec: </author> <title> A test generation package for sequential circuits. </title> <booktitle> In European Design Automation Conf., </booktitle> <pages> pages 214-218, </pages> <year> 1991. </year> <month> 5 </month>
Reference-contexts: STG based algorithms extract a state graph from the circuit and derive test vectors from the graph. Structural based algorithms, on the other hand, generate test vectors from the circuit structure directly, without using a state graph. Some work discussing STG and structural based algorithms are presented in <ref> [1, 2] </ref> and [3, 4], respectively. The problem of test pattern generation for sequential circuits remains an active area of research because both structural and STG based algorithms have drawbacks. <p> This is in contrast to other sequential test generators that perform each task as a separate program. The most notable system which performs each task separately is HITEC <ref> [1] </ref>. The authors of HITEC chose separate programs to implement each task because memory requirements were too high to allow for one unified program. Though separating each task reduces the system memory requirements, it slows down test generation considerably.
Reference: [2] <author> Abhijit Ghosh, Srinivas Devadas, and A. Richard Newton. </author> <title> Sequential Logic Testing and Verification. </title> <publisher> Kluwer, </publisher> <year> 1992. </year>
Reference-contexts: STG based algorithms extract a state graph from the circuit and derive test vectors from the graph. Structural based algorithms, on the other hand, generate test vectors from the circuit structure directly, without using a state graph. Some work discussing STG and structural based algorithms are presented in <ref> [1, 2] </ref> and [3, 4], respectively. The problem of test pattern generation for sequential circuits remains an active area of research because both structural and STG based algorithms have drawbacks. <p> In contract to structural based methods, STG based methods do not use iterative arrays. Instead, STG based methods derive a state graph from a circuit and then invoke a three step algorithm <ref> [2] </ref> 1. Derivation of the excitation state for a fault using combinational test generation, treating the present-state lines also as primary inputs, and the next-state lines also as primary outputs. 2. Derivation of an input sequence to justify the excitation state. 3.
Reference: [3] <author> Dong Ho Lee and Sudhakar M. Reddy. </author> <title> A new test generation method for sequantial circuits. </title> <booktitle> In Int. Conf Computer Aided Design, </booktitle> <pages> pages 446-449, </pages> <year> 1991. </year>
Reference-contexts: Structural based algorithms, on the other hand, generate test vectors from the circuit structure directly, without using a state graph. Some work discussing STG and structural based algorithms are presented in [1, 2] and <ref> [3, 4] </ref>, respectively. The problem of test pattern generation for sequential circuits remains an active area of research because both structural and STG based algorithms have drawbacks.
Reference: [4] <author> W. Cheng. </author> <title> The back algorithm for sequantial test generation. </title> <booktitle> In Int. Conf Computer Aided Design, </booktitle> <pages> pages 66-69, </pages> <year> 1988. </year>
Reference-contexts: Structural based algorithms, on the other hand, generate test vectors from the circuit structure directly, without using a state graph. Some work discussing STG and structural based algorithms are presented in [1, 2] and <ref> [3, 4] </ref>, respectively. The problem of test pattern generation for sequential circuits remains an active area of research because both structural and STG based algorithms have drawbacks.
Reference: [5] <author> Willam K. Lam. </author> <title> Sequantial test generation for real-time systems. </title> <note> unpublished paper. </note>
Reference-contexts: In this paper, we present ARIES, a new test pattern generator for synchronous sequential circuits. ARIES is based on the algorithm presented by Lam in <ref> [5] </ref>. Lam's algorithm is unique in that it is neither structural nor STG based, and thus does not have the shortcomings of either. In Lam's algorithm, the logical value at a node is augmented to include a time component.
Reference: [6] <author> Hyung Ki Lee and Dong Sam Ha. </author> <title> Hope: An efficient parallel fault simulator for synchronous sequential circuits. </title> <booktitle> In Design Automation Conf., </booktitle> <pages> pages 336-340, </pages> <year> 1992. </year>
Reference-contexts: Using this time domain extension, Lam shows that sequential test pattern generation can be done using combinational test generation techniques. ARIES is a modified version of ATALANTA <ref> [6] </ref>, a combinational test pattern generator based on the FAN algorithm. The organization of this paper is as follows. We review sequential test pattern generation in section 2. In section 3, we discuss combinational test pattern generation. Section 4 discusses Lam's time domain extension algorithm.
Reference: [7] <author> A. Miczo. </author> <title> Digital Logic Testing and Simulation. </title> <publisher> Harper and Row, </publisher> <year> 1986. </year>
Reference-contexts: Algebraic based algorithms derive a Boolean equation representing all possible tests for a particular fault and then simplify that equation. Since algebraic methods rely of symbolic manipulation, they are not as readily implementable within a CAD system <ref> [7] </ref>. Satisfi-ability based algorithms generate test patterns by deriving a formula expressing the Boolean difference between the unfaulted circuit and the faulted circuit and then apply a satisfiability algorithm to the formula [8].
Reference: [8] <author> Tracy Larrabee. </author> <title> Efficient Generation of Test Patterns Using Boolean Satisfiability. </title> <type> PhD thesis, </type> <institution> Stanford Univ, </institution> <year> 1990. </year>
Reference-contexts: Since algebraic methods rely of symbolic manipulation, they are not as readily implementable within a CAD system [7]. Satisfi-ability based algorithms generate test patterns by deriving a formula expressing the Boolean difference between the unfaulted circuit and the faulted circuit and then apply a satisfiability algorithm to the formula <ref> [8] </ref>. Structural based algorithms generate test patterns by assigning a fault to the circuit and then searching the circuit structural to find primary inputs values that propagate the fault to a primary output.
Reference: [9] <author> J. Paul Roth. </author> <title> Diagnosis of automata failures: A calculus and a method. </title> <journal> IBM Journal of Res. and Dev., </journal> <pages> pages 278-291, </pages> <month> Jul </month> <year> 1966. </year>
Reference-contexts: Structural based algorithms generate test patterns by assigning a fault to the circuit and then searching the circuit structural to find primary inputs values that propagate the fault to a primary output. Four widely studied structural algorithms, in order of increasing complexity and increasing efficiency are: the D algorithm <ref> [9] </ref>, PO-DEM [10], FAN [11], and SOCRATES [12]. In order to implement Lam's algorithm, a structural combinational test pattern generator must be modified to handle timed duos.
Reference: [10] <author> Prabhakar Goel. </author> <title> An implicit enumeration algorithm to generate tests for combinational logic circuits. </title> <journal> IEEE Trans. Computer Aided Design, </journal> <pages> pages 215-222, </pages> <month> Mar </month> <year> 1981. </year>
Reference-contexts: Four widely studied structural algorithms, in order of increasing complexity and increasing efficiency are: the D algorithm [9], PO-DEM <ref> [10] </ref>, FAN [11], and SOCRATES [12]. In order to implement Lam's algorithm, a structural combinational test pattern generator must be modified to handle timed duos.
Reference: [11] <author> Hideo Fujiwara and Takeshi Shimono. </author> <title> On the acceleration of test generation algorithms. </title> <journal> IEEE Trans. Computer Aided Design, </journal> <pages> pages 1137-1144, </pages> <month> Dec </month> <year> 1983. </year>
Reference-contexts: Four widely studied structural algorithms, in order of increasing complexity and increasing efficiency are: the D algorithm [9], PO-DEM [10], FAN <ref> [11] </ref>, and SOCRATES [12]. In order to implement Lam's algorithm, a structural combinational test pattern generator must be modified to handle timed duos. Ideally, we would like to modify a SOCRATES based test pattern generator since such a system would give us the best performance in terms of execution speed.
Reference: [12] <author> Michael H. Schulz, Erwin Trischler, and Thomas M. Sarfert. Socrates: </author> <title> A highly efficient automatic test pattern generation system. </title> <journal> IEEE Trans. Computer Aided Design, </journal> <pages> pages 126-137, </pages> <month> Jan </month> <year> 1988. </year>
Reference-contexts: Four widely studied structural algorithms, in order of increasing complexity and increasing efficiency are: the D algorithm [9], PO-DEM [10], FAN [11], and SOCRATES <ref> [12] </ref>. In order to implement Lam's algorithm, a structural combinational test pattern generator must be modified to handle timed duos. Ideally, we would like to modify a SOCRATES based test pattern generator since such a system would give us the best performance in terms of execution speed.
Reference: [13] <author> Franc Brglez, David Bryan, and Krzysztof Kozminski. </author> <title> Combinational profiles of sequential benchmark circuits. </title> <booktitle> In Int. Symposium on Circuits and Sys, </booktitle> <pages> pages 1929-1934, </pages> <year> 1989. </year> <month> 6 </month>
Reference-contexts: In addition to the no reset state assumption, we only allow D type flip flops in the circuit. This simplifies the modification of the FAN algorithm, yet does not prevent performance evaluation using the ISCAS89 benchmarks <ref> [13] </ref> since those circuits only contain D type flip flops. generation begins with the reading of a flat circuit netlist in ISCAS89 format. The circuit is then lev-elized and a collapsed fault list is produced. ARIES then runs the modified FAN algorithm on each fault in the fault list.
References-found: 13

