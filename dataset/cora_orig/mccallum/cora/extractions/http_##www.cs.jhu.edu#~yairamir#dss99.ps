URL: http://www.cs.jhu.edu/~yairamir/dss99.ps
Refering-URL: http://www.cs.jhu.edu/~yairamir/
Root-URL: http://www.cs.jhu.edu
Email: -yairamir, baruch, rsean-@cs.jhu.edu  
Title: A COST-BENEFIT FRAMEWORK FOR ONLINE MANAGEMENT OF A METACOMPUTING SYSTEM  
Author: Yair Amir, Baruch Awerbuch, R. Sean Borgstrom 
Address: Baltimore MD 21218  
Affiliation: Department of Computer Science The Johns Hopkins University  
Abstract: 1. Abstract 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> The LYDIA Project (goal-oriented scheduling). </institution> <note> http://www.ics.forth.gr/pleiades/projects/LYDIA/. </note>
Reference-contexts: Applying the Cost-Benefit framework to the more traditional problem of resource allocation on a cluster of workstations, we improved the performance of nave strategies by 38% and intelligent, optimized strategies by about 13%. 3. RELATED WORK The LYDIA project <ref> [1] </ref> studies single-resource resource allocation on a system where there are many kinds of jobs, and each "class" of jobs has different performance expectations. The performance of each class is given a homogeneous cost called the "performance index", much like our job benefit functions.
Reference: [2] <author> C. Waldspurger. </author> <title> A distributed computational economy for utilizing idle resources. </title> <type> Master's thesis, </type> <institution> MIT, Dept. of Electrical Engineering and Computer Science, </institution> <month> May </month> <year> 1989. </year>
Reference-contexts: The performance of each class is given a homogeneous cost called the "performance index", much like our job benefit functions. The LYDIA project does not yet address the complex issues involved in balancing several of the diverse system resources simultaneously. SPAWN <ref> [2] </ref> and other systems like it provide computational markets where tasks bid competitively for resources. This approach uses economic principles conceptually similar to ours. The Cost-Benefit framework, however, integrates the computer science notions of competitive algorithms and analysis with the economics concepts of marginal costs and markets for services.
Reference: [3] <author> Condor. </author> <note> http://www.cs.wisc.edu/condor/. </note>
Reference-contexts: This approach uses economic principles conceptually similar to ours. The Cost-Benefit framework, however, integrates the computer science notions of competitive algorithms and analysis with the economics concepts of marginal costs and markets for services. The Condor system <ref> [3] </ref> is similar to the Java Market, our testbed. The Condor team has created a set of software tools for utilizing the wasted CPU cycles in a cluster of workstations. <p> Restricting these maxima translates directly into bounded CPU loads, bounded memory usage, limited network congestion, etc. 4.4 A Decentralized Approach The Cost-Benefit framework uses a centralized scheduler in both of our testbeds. Experience with the Condor system <ref> [3] </ref> shows that one scheduler can manage hundreds of producer machines, as long as it acts only as a decision-maker. For a more distributed approach, our framework can be extended as follows. Assign each scheduler a subset of the producer machines, which it must choose from when assigning jobs.
Reference: [4] <author> N. Camiel, S. London, N. Nisan, O. Regev. </author> <title> The Popcorn Project - An Interim Report, Distributed Computation over the Internet in Java. </title> <booktitle> Sixth International World Wide Web Conference, </booktitle> <month> April </month> <year> 1997 </year>
Reference-contexts: Although Condor is a mature system, proven to work efficiently with hundreds of machines at a time, it has very limited support for heterogeneous machine architectures. The Java Market, while limited by the speed of the virtual Java machines available, is 100% cross-platform. The Popcorn project <ref> [4] </ref>, independently developed at the Hebrew University in Israel, is an online market for computational services that shares many features with the Java Market. The project differs from the Java Market primarily in that it provides a new programming model.
Reference: [5] <author> MILAN: </author> <note> http://www.cs.nyu.edu/milan/milan/index.html </note>
Reference-contexts: Its users must write their applications with the Popcorn project in mind - Popcorn cannot be used with ordinary Java applications. A key Java Market design decision is that users submit their jobs as regular Java applications, and the Market itself does all necessary modifications. The Milan project <ref> [5] </ref>, like the Popcorn project, provides a programming model that can take advantage of heterogeneous Internet-connected machines. Also like the Popcorn project, Milan is not designed for use with standard Java applications. 4.
Reference: [6] <author> J. Aspnes, Y. Azar, A. Fiat, S. Plotkin and O. Waarts. </author> <title> OnLine Machine Scheduling with Applications to Load Balancing and Virtual Circuit Routing. </title> <booktitle> In Proceedings of the ACM Symposium on Theory Of Computing (STOC), </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Using the marginal cost strategy with this particular cost function has a beneficial theoretical property. Over the systems continuously operating lifetime, the maximum usage of each resource is within O (log n) of the optimal assignment strategys maximum usage <ref> [6] </ref>. Further, this holds even when the optimal strategy knows the future. This theoretical guarantee is weak, but most job assignment strategies have no theoretical guarantees at all.
Reference: [7] <author> A. Barak, S. Guday and R. Wheeler. </author> <title> The Mosix distributed operating system, load balancing for Unix, </title> <booktitle> Volume 672, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: Experimental Results The first major test of the Java Market was performed in the Johns Hopkins Center for Networking and Distributed Systems (CNDS). A CPU-intensive simulation (about 1000 lines of Java code) evaluating five different job scheduling policies for the Mosix system <ref> [7] </ref> and a stream of jobs was run on the CNDS lab machines. One hundred simulations, each of them representing 10,000 real-time seconds, were run in the following two ways: 1. Running on a standalone Pentium II machine using the Java Developers Kit. 2. <p> Designed for networks of workstations where jobs can only be assigned to a machine once, it distributes jobs using a straightforward round robin policy. (Programmers can override this policy.) In comparison, our strategy for an identical network of workstations completed the average job 38% faster. Mosix <ref> [7] </ref> is a set of kernel enhancements to the BSDI Unix-like operating system [9] that allows jobs to be moved from machine to machine without interrupting their execution. Mosix also has an experimentally tuned resource allocation strategy based on load balancing.
Reference: [8] <author> Y. Amir, B. Awerbuch, A. Barak, R. Borgstrom, A. Keren. </author> <title> An Opportunity Cost Approach for Job Assignment in a Scalable Computing Cluster. </title> <booktitle> In Proceedings of the 10th IASTED International Conference on Parallel and Distributed Computing and Systems (PDCS), </booktitle> <month> October </month> <year> 1998. </year> <note> Available as tech report CNDS-98-2 at http://www.cnds.jhu.edu/publications. </note>
Reference-contexts: Enhancing Local Networks We also studied the Cost-Benefit framework in an environment where standard resource allocation methods applied - a network of workstations. In this work, found in <ref> [8] </ref>, we created two new policies for resource allocation and compared them to standard methods. These policies were based on the "system-friendly" strategy and did not use admission control. PVM is a popular resource allocation system with a nave default strategy.
Reference: [9] <institution> Berkeley Software Design, Inc. </institution> <note> http://www.bsdi.com. </note>
Reference-contexts: Mosix [7] is a set of kernel enhancements to the BSDI Unix-like operating system <ref> [9] </ref> that allows jobs to be moved from machine to machine without interrupting their execution. Mosix also has an experimentally tuned resource allocation strategy based on load balancing. A Cost-Benefit-based strategy for Mosix networks, also able to move jobs around, improved over the current Mosix strategy by about 13%.
References-found: 9

