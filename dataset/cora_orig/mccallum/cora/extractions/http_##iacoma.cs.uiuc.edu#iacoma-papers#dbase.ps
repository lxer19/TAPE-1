URL: http://iacoma.cs.uiuc.edu/iacoma-papers/dbase.ps
Refering-URL: http://iacoma.cs.uiuc.edu/papers.html
Root-URL: http://www.cs.uiuc.edu
Email: trancoso,zzhang,torrella@csrd.uiuc.edu  larri@ac.upc.es  
Title: The Memory Performance of DSS Commercial Workloads in Shared-Memory Multiprocessors 1  
Author: Pedro Trancoso, Josep-L. Larriba-Pey Zheng Zhang, and Josep Torrellas 
Web: http://www.csrd.uiuc.edu/iacoma/  
Address: IL 61801  Barcelona, Spain  
Affiliation: Center for Supercomputing Research and Development University of Illinois at Urbana-Champaign,  Computer Architecture Department Universitat Politecnica de Catalunya,  
Abstract: Although cache-coherent shared-memory multiprocessors are often used to run commercial workloads, little work has been done to characterize how well these machines support such workloads. In particular, we do not have much insight into the demands of commercial workloads on the memory subsystem of these machines. In this paper, we analyze in detail the memory access patterns of several queries that are representative of Decision Support System (DSS) databases. Our analysis shows that the memory use of queries differs largely depending on how the queries access the database data, namely via indices or by sequentially scanning the records. The former queries, which we call Index queries, suffer most of their shared-data misses on indices and on lock-related metadata structures. The latter queries, which we call Sequential queries, suffer most of their shared-data misses on the database records as they are scanned. An analysis of the data locality in the queries shows that both Index and Sequential queries exhibit spatial locality and, therefore, can benefit from relatively long cache lines. Interestingly, shared data is reused very little inside queries. However, there is data reuse across Sequential queries. Finally, we show that the performance of Sequential queries can be improved moderately with data prefetching. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Z. Cvetanovic and D. Bhandarkar. </author> <title> Characterization of Alpha AXP Performance Using TP and SPEC Work-loads. </title> <booktitle> In Proceedings of the 21st Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 60-70, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: Eickemeyer et al [4] showed that a significant performance improvement can be obtained for OLTP workloads when a multithreaded processor is used. Finally, other studies that have involved database workloads include the work by Cve-tanovic and Bhandarkar <ref> [1] </ref> on a DEC Alpha AXP system, Torrellas et al [10] on an SGI multiprocessor, and Rosenblum et al [7] on a simulated SGI multiprocessor. In general, these studies agree on the relatively worse memory performance of commercial workloads.
Reference: [2] <author> C. J. Date. </author> <title> An Introduction to Database Systems. </title> <booktitle> The Systems Programming Series. </booktitle> <publisher> Addison Wesley, </publisher> <address> sixth edition, </address> <year> 1995. </year>
Reference-contexts: Finally, the aggregate operation generates a table where one or more attributes of each tuple in the input table are modified by an operation. This operation may be an arithmetic operation. More information on these operations and the relational database model can be found in <ref> [2] </ref>. 2.1.2 Query Execution Queries can be written in several database languages. For example, Figure 1-(a) shows an example of a query written in SQL that will be analyzed later. A query that is submitted to a database system undergoes three different steps, namely parsing, optimization and execution.
Reference: [3] <author> D. DeWitt and J. Gray. </author> <title> Parallel Database Systems: The Future of High Performance Database Systems. </title> <journal> Communications of the ACM, </journal> <volume> 35(6) </volume> <pages> 85-98, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: For these reasons, there is relatively little previous work in this area. In addition, most of the work has addressed the performance of these workloads from a high-level point of view. For example, DeWitt and Gray <ref> [3] </ref> studied parallel database systems and indicated that a shared-nothing architecture seems to be more cost-effective than a shared-memory architecture.
Reference: [4] <author> R. J. Eickemeyer, R. E. Johnson, S. R. Kunkel, M. S. Squillante, and S. Liu. </author> <title> Evaluation of Multi-threaded Uniprocessors for Commercial Application Environments. </title> <booktitle> In Proceedings of the 23rd Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 203-212, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Maynard et al [6] contrasted the cache performance of technical and commercial workloads and concluded that the latter is often worse. Eickemeyer et al <ref> [4] </ref> showed that a significant performance improvement can be obtained for OLTP workloads when a multithreaded processor is used.
Reference: [5] <author> T. Lovett and R. Clapp. STiNG: </author> <title> A CC-NUMA Computer System for the Commercial Marketplace. </title> <booktitle> In Proceedings of the 23rd Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 308-317, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: 1 Introduction Cache-coherent shared-memory multiprocessors are becoming a cheap source of easy-to-program computing power. One promising use of such machines is in commercial workloads, widely used in applications like large wholesale suppliers or airline ticket reservation systems. Indeed, recently announced shared-memory multiprocessors like the Sequent STiNG machine <ref> [5] </ref> specifically target the commercial market. However, while vendors usually present performance results 1 This work was supported in part by the National Science Foundation under grants NSF Young Investigator Award MIP 94-57436 and RIA MIP 93-08098, ARPA Contract No. DABT63-95-C-0097, NASA Contract No. NAG-1-613, and Intel Corporation.
Reference: [6] <author> A. M. G. Maynard, C. M. Donnelly, and B. R. Olszewski. </author> <title> Contrasting Characteristics and Cache Performance of Technical and Multi-User Commercial Workloads. </title> <booktitle> In Proceedings of the 6th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 145-156, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Thakkar and Sweiger [9] looked at the performance of On-Line Transaction Processing (OLTP) workloads running on a Sequent cache-coherent shared-memory multiprocessor and highlighted the importance of process scheduling and the I/O capability of the machine. Maynard et al <ref> [6] </ref> contrasted the cache performance of technical and commercial workloads and concluded that the latter is often worse. Eickemeyer et al [4] showed that a significant performance improvement can be obtained for OLTP workloads when a multithreaded processor is used.
Reference: [7] <author> M. Rosenblum, E. Bugnion, S. A. Herrod, E. Witchel, and A. Gupta. </author> <title> The impact of architectural trends on operating system performance. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <month> De-cember </month> <year> 1995. </year>
Reference-contexts: Finally, other studies that have involved database workloads include the work by Cve-tanovic and Bhandarkar [1] on a DEC Alpha AXP system, Torrellas et al [10] on an SGI multiprocessor, and Rosenblum et al <ref> [7] </ref> on a simulated SGI multiprocessor. In general, these studies agree on the relatively worse memory performance of commercial workloads. However, they do not give us the insight of what the actual memory access patterns are like.
Reference: [8] <author> M. Stonebraker and G. Kemnitz. </author> <title> The POSTGRES Next Generation Database Management System. </title> <journal> Communications of the ACM, </journal> <month> October </month> <year> 1991. </year>
Reference-contexts: Queries to these databases are usually read-only and extract useful information in order to aid decision making. We use three queries from the standard TPC-D benchmark [11] and simulate the memory hierarchy of a 4-processor cache-coherent NUMA running a memory-resident database. We use a modified version of Postgres95 <ref> [8, 14] </ref>, a public-domain database from the University of California at Berkeley. Our analysis shows that the memory use of queries differs largely depending on how the queries access the database data, namely via indices or by sequentially scanning the records. <p> In this section, we examine Postgres95, the issues involved in scaling down the system, and finally the simulation system. 4.1 Postgres95 Postgres95 is a public-domain, client-server share-everything database developed at the University of California-Berkeley <ref> [8, 14] </ref>. It is a reduced and revised version of the Postgres database [8]. Postgres has led to commercial products, now being commercialized by Informix. Postgres95 runs on numerous platforms, is fairly popular, and is considerably well-tuned for a system developed in academia. <p> In this section, we examine Postgres95, the issues involved in scaling down the system, and finally the simulation system. 4.1 Postgres95 Postgres95 is a public-domain, client-server share-everything database developed at the University of California-Berkeley [8, 14]. It is a reduced and revised version of the Postgres database <ref> [8] </ref>. Postgres has led to commercial products, now being commercialized by Informix. Postgres95 runs on numerous platforms, is fairly popular, and is considerably well-tuned for a system developed in academia. We chose Postgres95 for at least two practical reasons. First of all, we have its source code.
Reference: [9] <author> S. S. Thakkar and M. Sweiger. </author> <title> Performance of an OLTP Application on Symmetry Multiprocessor System. </title> <booktitle> In Proceedings of the 17th Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 228-238, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: In addition, most of the work has addressed the performance of these workloads from a high-level point of view. For example, DeWitt and Gray [3] studied parallel database systems and indicated that a shared-nothing architecture seems to be more cost-effective than a shared-memory architecture. Thakkar and Sweiger <ref> [9] </ref> looked at the performance of On-Line Transaction Processing (OLTP) workloads running on a Sequent cache-coherent shared-memory multiprocessor and highlighted the importance of process scheduling and the I/O capability of the machine.
Reference: [10] <author> J. Torrellas, A. Gupta, and J. Hennessy. </author> <title> Characterizing the Caching and Synchronization Performance of a Multiprocessor Operating System. </title> <booktitle> In Proceedings of the 5th International Conference on Architectural Support for Programming Languages and Operating Systems, </booktitle> <pages> pages 162-174, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Eickemeyer et al [4] showed that a significant performance improvement can be obtained for OLTP workloads when a multithreaded processor is used. Finally, other studies that have involved database workloads include the work by Cve-tanovic and Bhandarkar [1] on a DEC Alpha AXP system, Torrellas et al <ref> [10] </ref> on an SGI multiprocessor, and Rosenblum et al [7] on a simulated SGI multiprocessor. In general, these studies agree on the relatively worse memory performance of commercial workloads. However, they do not give us the insight of what the actual memory access patterns are like.
Reference: [11] <author> Transaction Processing Performance Council. </author> <title> TPC Benchmark D (Decision Support) Standard Specification Revision 1.1, </title> <month> December </month> <year> 1995. </year>
Reference-contexts: DSS databases store large quatities of data. Queries to these databases are usually read-only and extract useful information in order to aid decision making. We use three queries from the standard TPC-D benchmark <ref> [11] </ref> and simulate the memory hierarchy of a 4-processor cache-coherent NUMA running a memory-resident database. We use a modified version of Postgres95 [8, 14], a public-domain database from the University of California at Berkeley. <p> These databases often store large quantities of information that is queried to make a decision. Typically, DSS queries are complex and access the data in a read-mostly manner. A well-known benchmark that simulates a DSS system is TPC-D <ref> [11] </ref>. In this section, we first describe TPC-D briefly and then examine its queries in detail. 2.2.1 TPC-D TPC-D simulates an application for a wholesale supplier that manages, sells and distributes a product worldwide. The data in TPC-D is organized in several tables.
Reference: [12] <author> J. E. Veenstra and R. J. Fowler. MINT: </author> <title> A Front End for Efficient Simulation of Shared-Memory Multiprocessors. </title> <booktitle> In Proceedings of the 2nd International Workshop on Modeling, Analysis and Simulation of Computer and Telecommunication Systems (MASCOTS), </booktitle> <pages> pages 201-207, </pages> <month> January </month> <year> 1994. </year>
Reference-contexts: The simulation setup is as follows. The object codes of the query and Postgres95 are linked together to produce an executable. Then, the executable is fed to Mint <ref> [12] </ref>, an execution-driven multiprocessor simulation package. Mint performs an interleaved execution of all processes, correctly modeling all the aspects of the shared-memory and synchronization activity. In addition, Mint generates events on-the-fly to a back-end architecture simulator. The setup of the experiments is outlined in Figure 5.
Reference: [13] <author> S. C. Woo, M. Ohara, E. Torrie, J. P. Singh, and A. Gupta. </author> <title> The SPLASH-2 Programs: Characterization and Methodological Considerations. </title> <booktitle> In Proceedings of the 22nd Annual International Symposium on Computer Architecture, </booktitle> <pages> pages 24-36, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: Furthermore, the information extracted from the address traces needs to be combined with an analysis of the database source code to determine the operations executed and the data structures accessed when the address references were issued. While this is not a problem for scientific workloads like Splash 2 <ref> [13] </ref>, where the sources are publicly available, it is usually hard for commercial workloads. Obtaining the source code of a reasonably-tuned database management system (DBMS) is difficult because it is usually proprietary. For these reasons, there is relatively little previous work in this area.
Reference: [14] <author> A. Yu and J. Chen. </author> <title> The POSTGRES95 User Manual. </title> <institution> Computer Science Div., Dept. of EECS, University of California at Berkeley, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: Queries to these databases are usually read-only and extract useful information in order to aid decision making. We use three queries from the standard TPC-D benchmark [11] and simulate the memory hierarchy of a 4-processor cache-coherent NUMA running a memory-resident database. We use a modified version of Postgres95 <ref> [8, 14] </ref>, a public-domain database from the University of California at Berkeley. Our analysis shows that the memory use of queries differs largely depending on how the queries access the database data, namely via indices or by sequentially scanning the records. <p> In this section, we examine Postgres95, the issues involved in scaling down the system, and finally the simulation system. 4.1 Postgres95 Postgres95 is a public-domain, client-server share-everything database developed at the University of California-Berkeley <ref> [8, 14] </ref>. It is a reduced and revised version of the Postgres database [8]. Postgres has led to commercial products, now being commercialized by Informix. Postgres95 runs on numerous platforms, is fairly popular, and is considerably well-tuned for a system developed in academia.
References-found: 14

