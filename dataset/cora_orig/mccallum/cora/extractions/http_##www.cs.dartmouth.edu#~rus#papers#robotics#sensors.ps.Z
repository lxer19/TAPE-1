URL: http://www.cs.dartmouth.edu/~rus/papers/robotics/sensors.ps.Z
Refering-URL: http://www.cs.dartmouth.edu/~rus/papers/robotics/robotics.html
Root-URL: http://www.cs.dartmouth.edu
Email: frus,ask,kotay,lightsg@cs.dartmouth.edu  
Phone: phone: (603) 646 1691 fax: (603) 646 1672  
Title: Guiding Distributed Manipulation with Mobile Sensors  
Author: Daniela Rus Ahsan Kabir Keith D. Kotay Morgan Soutter 
Date: April 29, 1996  
Address: Hanover, NH 03755  
Affiliation: Department of Computer Science Dartmouth College  
Abstract: We wish to organize furniture with teams of mobile robots in dynamic, unstructured environments. We describe a distributed heterogeneous system of robots that cooperate to achieve this task. This system consists of two robot pushers and a mobile-sensor robot that guides and synchronizes the pushers. We present algorithms and experimental results for this system. We also discuss how this heterogeneous system of robots cooperates by decoupling and then fusing the navigation and manipulation sensory data. 
Abstract-found: 1
Intro-found: 1
Reference: [BK95] <editor> R. Bajcsy and J. Kosecka, </editor> <title> The Problem of Signal and Symbol Integration: A Study of Cooperative Mobile Autonomous Agent Behaviors, </title> <type> Technical Report MS-CIS-95-25 / GRASP LAB 395, </type> <institution> Department of Computer Science, the University of Pennsylvania, </institution> <year> 1995. </year>
Reference-contexts: and applies that architecture to a number of tasks (mostly in simulation), including "hazardous waste cleanup", in which several mobots cooperate to pick up a number of small objects and move them near a designated site. [BHD94] treats successfully a foraging task 2 in which multiple robots cooperate without communication. <ref> [BK95] </ref> discusses communication in distributed systems of robots. We build on the ground-breaking work of [Mas86, Erd86] and others on planar sensorless manipulation. Inspired by [Erd86, EM86] we focus on developing near-sensorless (i.e., that require only sparse sensing) manipulation protocols [Rus92, JR93, DJR93, DJR94a, RDJ95, DJR96a, DJR96b].
Reference: [BHD94] <author> R. Beckers, O. Holland, and J. Deneubourg, </author> <title> From local actions to global tasks: stigmergy and collective robotics, </title> <booktitle> in Artificial Life IV, </booktitle> <editor> R. Brooks and P. Maes eds., </editor> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Previous work on cooperative manipulation has focused on pushing. Cooperative pushing has been treated in the context of box-pushing with multiple robots. In [Par94] a reinforcement learning strategy that focuses on task allocation is presented. Combining cooperation with mobot manipulation are, e.g., [Nor93], [Par94], [Yam94], <ref> [BHD94] </ref>, and [DJR93, RDJ95, DJR96a]. <p> builds an architecture designed to achieve fault-tolerant cooperation within teams of heterogeneous mobile robots and applies that architecture to a number of tasks (mostly in simulation), including "hazardous waste cleanup", in which several mobots cooperate to pick up a number of small objects and move them near a designated site. <ref> [BHD94] </ref> treats successfully a foraging task 2 in which multiple robots cooperate without communication. [BK95] discusses communication in distributed systems of robots. We build on the ground-breaking work of [Mas86, Erd86] and others on planar sensorless manipulation.
Reference: [BBD+95] <author> R. Brown, K. Bohringer, B. Donald, J. Jen-nings, and D. </author> <title> Rus, Distributed Robotic Manipulation: Experiments in Minimalism, </title> <booktitle> in Proceedings 7 of the International Symposium on Experimental Robotics, </booktitle> <year> 1995. </year>
Reference-contexts: We first describe the information invariants framework. Then we describe the experimental setup for the placement problem. We continue by presenting off-line and online algorithms and systems that rely on them for the placement problem. Finally, we discuss our experiments. 2 Information Invariants for Distributed Manipulation In <ref> [BBD+95] </ref>, the following hierarchy was defined to differentiate between the properties of manipulation protocols. In a manipulation task, robots use forces to affect the pose of objects. In a parallel manipulation protocol, two or more robots apply forces to the same coupled dynamical system. <p> The equivalences that can be derived between communication, external state, computation, and sensors are valuable in distributing and in parallelizing robot algorithms. The Information Invariant formalism allows the treatment of manipulation from a minimalist stance <ref> [BBD+95, DJR96a] </ref>. <p> The different architectures of our robots make them suitable for different tasks. Bonnie and Clyde, 3 who are equipped with sonar and contact bumpers are well suited to manipulate objects. In fact, they run manipulation software similar to their RWI B12 counterparts at Cornell, Tommy and Lily <ref> [BBD+95] </ref>. Bonnie and Clyde can execute the on-line asynchronous pushing protocol described in [DJR93, DJR94a, DJR96b] and the on-line asynchronous reorientation protocol reported in [RDJ95]. As a team, they combine their contact bumper readings to converge to stable pushing (respectively reorienting) configurations. <p> In our manipulation system, the robots use sonar and contact sensors to implement these skills. 5 This is called protocol P.II in [DJR94a, DJR96b]. 6 This is called protocol Asynch-Online in <ref> [RDJ95, BBD+95] </ref>. 5.2 An on-line, global control algorithm A variant of this protocol denoted by P-Local-Offline can be derived for one, two (or more) autonomous robots. Such a system does not have a glo-val controller, but each robot has the map, the start, and the goal. <p> The scouter can use its resources to navigate around obstacles but it is incapable of manipulation. By combining the manipulation and the scouting skills with a simple communication scheme, we developed a more powerful ssytem. This research is done in the framework of information invariants <ref> [Don95, DJR93, DJR94a, DJR96b, BBD+95] </ref> and it takes a minimalist approach to distributed manipulation.
Reference: [BJ95] <author> R. Brown, and J. Jennings, </author> <title> Manipulation by a pusher/steerer, </title> <booktitle> In Proceedings of Intelligent Robot Systems, </booktitle> <address> Pittsburgh, PA, </address> <month> August </month> <year> 1995. </year>
Reference: [CFKM95] <author> Y. Cao, A. Fukunaga, A. Kahng, and F. Meng, </author> <title> Cooperative mobile robots: Antecedents and directions, </title> <type> Technical Report, </type> <institution> UCLA Department of Computer Science, </institution> <year> 1995. </year>
Reference-contexts: We focus instead on situations where maps are not available and the environment may change dynamically and present on-line solutions to the placement problem class. 1.1 Previous Work There has been a lot of work on cooperative systems of robots. For an excellent review see <ref> [CFKM95] </ref>. Previous work on cooperative manipulation has focused on pushing. Cooperative pushing has been treated in the context of box-pushing with multiple robots. In [Par94] a reinforcement learning strategy that focuses on task allocation is presented.
Reference: [Don95] <author> B. Donald, </author> <title> Information invariants in robotics, </title> <journal> Artificial Intelligence, </journal> <volume> 72 </volume> <pages> 217-304, </pages> <year> 1995. </year>
Reference-contexts: We have reported on several sets of distributed manipulation strategies [DJR94a, RDJ95, BBD+95, 2 A team of robots wander in search for "food" that is randomly distributed throughout their workspace. DJR96b] and also on the methodology which generated them. This methodology relies on information invariants <ref> [Don95, DJR93, DJR94a, RDJ95] </ref> for determining the information required by a robot to perform a task, and the equivalent ways for the robot to extract this information from the environment. <p> The scouter can use its resources to navigate around obstacles but it is incapable of manipulation. By combining the manipulation and the scouting skills with a simple communication scheme, we developed a more powerful ssytem. This research is done in the framework of information invariants <ref> [Don95, DJR93, DJR94a, DJR96b, BBD+95] </ref> and it takes a minimalist approach to distributed manipulation. <p> This research is done in the framework of information invariants [Don95, DJR93, DJR94a, DJR96b, BBD+95] and it takes a minimalist approach to distributed manipulation. In our future work [Rus96], we will present manipulation circuits <ref> [Don95, DJR96b, DJR96a] </ref> for these protocols and give an information invariant analysis of resource tradeoffs in between these protocols for the distributed placement protocols presented here and discuss the supermodularity [DJR96a] of the underlieing circuits. Supermodularity is an attribute of manipulation circuits that ensures code distribution across spatially separated robots.
Reference: [DJR93] <author> B. Donald, J. Jennings, and D. </author> <title> Rus, Towards a Theory of Information Invariants for Cooperating Autonomous Mobile Robots, </title> <booktitle> in em Proceedings of the International Symposium on Robotics Research (ISRR), </booktitle> <year> 1993. </year>
Reference-contexts: The scouter acts as a mobile sensing platform to guide the motion of the movers. It uses sonar to detect obstacles and communicates motion directions to the movers. (See Figure 3.) In our previous work <ref> [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] </ref> we described off-line and on-line 1 algorithms and systems for cooperative pushing and reorientation of large robots. These manipulation systems were implemented on two RWI B12 robots in the Robotics and Vision Laboratory at Cornell University. <p> work <ref> [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] </ref> we described off-line and on-line 1 algorithms and systems for cooperative pushing and reorientation of large robots. These manipulation systems were implemented on two RWI B12 robots in the Robotics and Vision Laboratory at Cornell University. We reimplemented the manipulation systems reported in [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] on the RWI B14 architecture and duplicated the experiments on the Dart-mouth robots. The movers described in this paper use this manipulation system. <p> Previous work on cooperative manipulation has focused on pushing. Cooperative pushing has been treated in the context of box-pushing with multiple robots. In [Par94] a reinforcement learning strategy that focuses on task allocation is presented. Combining cooperation with mobot manipulation are, e.g., [Nor93], [Par94], [Yam94], [BHD94], and <ref> [DJR93, RDJ95, DJR96a] </ref>. <p> We build on the ground-breaking work of [Mas86, Erd86] and others on planar sensorless manipulation. Inspired by [Erd86, EM86] we focus on developing near-sensorless (i.e., that require only sparse sensing) manipulation protocols <ref> [Rus92, JR93, DJR93, DJR94a, RDJ95, DJR96a, DJR96b] </ref>. Our previous work on cooperative manipulation treats pushing and reorienting a large object from a minimalistic viewpoint [DJR96b, DJR96a]. We present and analyze four pushing and four reorientation protocols that require different amount of communication and sensing. <p> We have reported on several sets of distributed manipulation strategies [DJR94a, RDJ95, BBD+95, 2 A team of robots wander in search for "food" that is randomly distributed throughout their workspace. DJR96b] and also on the methodology which generated them. This methodology relies on information invariants <ref> [Don95, DJR93, DJR94a, RDJ95] </ref> for determining the information required by a robot to perform a task, and the equivalent ways for the robot to extract this information from the environment. <p> Bonnie and Clyde, 3 who are equipped with sonar and contact bumpers are well suited to manipulate objects. In fact, they run manipulation software similar to their RWI B12 counterparts at Cornell, Tommy and Lily [BBD+95]. Bonnie and Clyde can execute the on-line asynchronous pushing protocol described in <ref> [DJR93, DJR94a, DJR96b] </ref> and the on-line asynchronous reorientation protocol reported in [RDJ95]. As a team, they combine their contact bumper readings to converge to stable pushing (respectively reorienting) configurations. They make use of their sonar to recover from impediments and find better lever arms for more effective manipulation. <p> This algorithm requires a system of robots for manipulation (the movers) and a different robot to guide the navigation of the manipulation system (the scouter). One or two robots suffice to do the manipulation <ref> [DJR93, DJR94a, DJR96b, RDJ95] </ref>, but more robots can be used. <p> and the scouter knows the straight-line direction to the goal (but not the obstacles along the way), we have (see Figure 5 for a motion sequence): * Each Mover: 1. receive message from the scouter 2. if message = forward then straight line push (by using protocol P.II described in <ref> [DJR93, DJR94a, DJR96b] </ref>) 3. if message = stop then stop motion 4. if message = turn-right then counterclockwise reorientation (using protocol Async Online described in [RDJ95]) 5. if message = turn-left then clockwise reorientation (using protocol Async-Online described in [RDJ95]) * The Scouter 1. move along the straight-line to the goal <p> The scouter can use its resources to navigate around obstacles but it is incapable of manipulation. By combining the manipulation and the scouting skills with a simple communication scheme, we developed a more powerful ssytem. This research is done in the framework of information invariants <ref> [Don95, DJR93, DJR94a, DJR96b, BBD+95] </ref> and it takes a minimalist approach to distributed manipulation.
Reference: [DJR94a] <author> B. Donald, J. Jennings, and D.Rus. </author> <title> Information invariants for distributed manipulation, </title> <booktitle> The First Workshop on the Algorithmic Foundations of Robotics, </booktitle> <editor> eds. K. Goldberg, D. Halperin, J.-C. Latombe, and R. </editor> <publisher> Wilson, </publisher> <pages> pages 431-459, </pages> <year> 1994. </year>
Reference-contexts: The scouter acts as a mobile sensing platform to guide the motion of the movers. It uses sonar to detect obstacles and communicates motion directions to the movers. (See Figure 3.) In our previous work <ref> [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] </ref> we described off-line and on-line 1 algorithms and systems for cooperative pushing and reorientation of large robots. These manipulation systems were implemented on two RWI B12 robots in the Robotics and Vision Laboratory at Cornell University. <p> work <ref> [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] </ref> we described off-line and on-line 1 algorithms and systems for cooperative pushing and reorientation of large robots. These manipulation systems were implemented on two RWI B12 robots in the Robotics and Vision Laboratory at Cornell University. We reimplemented the manipulation systems reported in [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] on the RWI B14 architecture and duplicated the experiments on the Dart-mouth robots. The movers described in this paper use this manipulation system. <p> We build on the ground-breaking work of [Mas86, Erd86] and others on planar sensorless manipulation. Inspired by [Erd86, EM86] we focus on developing near-sensorless (i.e., that require only sparse sensing) manipulation protocols <ref> [Rus92, JR93, DJR93, DJR94a, RDJ95, DJR96a, DJR96b] </ref>. Our previous work on cooperative manipulation treats pushing and reorienting a large object from a minimalistic viewpoint [DJR96b, DJR96a]. We present and analyze four pushing and four reorientation protocols that require different amount of communication and sensing. <p> We have reported on several sets of distributed manipulation strategies [DJR94a, RDJ95, BBD+95, 2 A team of robots wander in search for "food" that is randomly distributed throughout their workspace. DJR96b] and also on the methodology which generated them. This methodology relies on information invariants <ref> [Don95, DJR93, DJR94a, RDJ95] </ref> for determining the information required by a robot to perform a task, and the equivalent ways for the robot to extract this information from the environment. <p> The Information Invariant formalism allows the treatment of manipulation from a minimalist stance [BBD+95, DJR96a]. We ask (i) Can we do manipulation without communication? (ii) Can we do manipulation without planning? (iii) Can we do manipulation without global control? (iv) Can we do manipulation without geometric models? Previous results <ref> [DJR94a, RDJ95] </ref> show that questions (i)-(iv) can be answered affirmatively for the tasks of pushing an object along a straight line and reorientation with multiple robots. Posing (i)-(iv) for general manipulation tasks is much more challenging. <p> Bonnie and Clyde, 3 who are equipped with sonar and contact bumpers are well suited to manipulate objects. In fact, they run manipulation software similar to their RWI B12 counterparts at Cornell, Tommy and Lily [BBD+95]. Bonnie and Clyde can execute the on-line asynchronous pushing protocol described in <ref> [DJR93, DJR94a, DJR96b] </ref> and the on-line asynchronous reorientation protocol reported in [RDJ95]. As a team, they combine their contact bumper readings to converge to stable pushing (respectively reorienting) configurations. They make use of their sonar to recover from impediments and find better lever arms for more effective manipulation. <p> In our manipulation system, the robots use sonar and contact sensors to implement these skills. 5 This is called protocol P.II in <ref> [DJR94a, DJR96b] </ref>. 6 This is called protocol Asynch-Online in [RDJ95, BBD+95]. 5.2 An on-line, global control algorithm A variant of this protocol denoted by P-Local-Offline can be derived for one, two (or more) autonomous robots. <p> This algorithm requires a system of robots for manipulation (the movers) and a different robot to guide the navigation of the manipulation system (the scouter). One or two robots suffice to do the manipulation <ref> [DJR93, DJR94a, DJR96b, RDJ95] </ref>, but more robots can be used. <p> and the scouter knows the straight-line direction to the goal (but not the obstacles along the way), we have (see Figure 5 for a motion sequence): * Each Mover: 1. receive message from the scouter 2. if message = forward then straight line push (by using protocol P.II described in <ref> [DJR93, DJR94a, DJR96b] </ref>) 3. if message = stop then stop motion 4. if message = turn-right then counterclockwise reorientation (using protocol Async Online described in [RDJ95]) 5. if message = turn-left then clockwise reorientation (using protocol Async-Online described in [RDJ95]) * The Scouter 1. move along the straight-line to the goal <p> The scouter can use its resources to navigate around obstacles but it is incapable of manipulation. By combining the manipulation and the scouting skills with a simple communication scheme, we developed a more powerful ssytem. This research is done in the framework of information invariants <ref> [Don95, DJR93, DJR94a, DJR96b, BBD+95] </ref> and it takes a minimalist approach to distributed manipulation.
Reference: [DJR94b] <author> B. Donald, J. Jennings, and D. </author> <title> Rus, Analyzing teams of cooperative robots, </title> <booktitle> in Proceedings of the International Conference on Robotics and Automation, </booktitle> <year> 1994. </year>
Reference-contexts: This decoupling of the placement task into (1) manipulation and (2) scouting best utilizes the resources of the robots. The movers can push and orient large objects with local guarantees but all their sensors are devoted to the manipulation task <ref> [DJR94b, RDJ95] </ref>. They can't "see" what happens in front of the object. To change the placement of an object in a cluttered room, the movers need either an accurate and detailed map on which they could callibrate and plan, or navigation guidance. <p> The scouter acts as a mobile sensing platform to guide the motion of the movers. It uses sonar to detect obstacles and communicates motion directions to the movers. (See Figure 3.) In our previous work <ref> [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] </ref> we described off-line and on-line 1 algorithms and systems for cooperative pushing and reorientation of large robots. These manipulation systems were implemented on two RWI B12 robots in the Robotics and Vision Laboratory at Cornell University. <p> work <ref> [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] </ref> we described off-line and on-line 1 algorithms and systems for cooperative pushing and reorientation of large robots. These manipulation systems were implemented on two RWI B12 robots in the Robotics and Vision Laboratory at Cornell University. We reimplemented the manipulation systems reported in [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] on the RWI B14 architecture and duplicated the experiments on the Dart-mouth robots. The movers described in this paper use this manipulation system. <p> Clyde push a large recycle bin under the direction of Jerry, who scouts next to the moving system for obstacles. reorienting objects guarantee the local behavior of the object being manipulated. In this paper we introduce the global placement problem and present algorithms and systems of similar flavor to <ref> [DJR94b, RDJ95] </ref> for distributed placement goals. Specifically, this paper addresses distributed solutions with heterogeneous teams of robots for the placement problem: given an environment, reorganize the objects in it according to some desired global property.
Reference: [DJR96a] <institution> Minimalism + Distribution = Supermodularity, </institution> <note> in Journal of Experimental and Theoretical Artificial Intelligence 1996 (to appear). </note>
Reference-contexts: Previous work on cooperative manipulation has focused on pushing. Cooperative pushing has been treated in the context of box-pushing with multiple robots. In [Par94] a reinforcement learning strategy that focuses on task allocation is presented. Combining cooperation with mobot manipulation are, e.g., [Nor93], [Par94], [Yam94], [BHD94], and <ref> [DJR93, RDJ95, DJR96a] </ref>. <p> We build on the ground-breaking work of [Mas86, Erd86] and others on planar sensorless manipulation. Inspired by [Erd86, EM86] we focus on developing near-sensorless (i.e., that require only sparse sensing) manipulation protocols <ref> [Rus92, JR93, DJR93, DJR94a, RDJ95, DJR96a, DJR96b] </ref>. Our previous work on cooperative manipulation treats pushing and reorienting a large object from a minimalistic viewpoint [DJR96b, DJR96a]. We present and analyze four pushing and four reorientation protocols that require different amount of communication and sensing. <p> Inspired by [Erd86, EM86] we focus on developing near-sensorless (i.e., that require only sparse sensing) manipulation protocols [Rus92, JR93, DJR93, DJR94a, RDJ95, DJR96a, DJR96b]. Our previous work on cooperative manipulation treats pushing and reorienting a large object from a minimalistic viewpoint <ref> [DJR96b, DJR96a] </ref>. We present and analyze four pushing and four reorientation protocols that require different amount of communication and sensing. The final pushing protocol and the final reorientation protocol requires no explicit communication between the robots. 1.2 Outline This paper is organized as follows. <p> The equivalences that can be derived between communication, external state, computation, and sensors are valuable in distributing and in parallelizing robot algorithms. The Information Invariant formalism allows the treatment of manipulation from a minimalist stance <ref> [BBD+95, DJR96a] </ref>. <p> This research is done in the framework of information invariants [Don95, DJR93, DJR94a, DJR96b, BBD+95] and it takes a minimalist approach to distributed manipulation. In our future work [Rus96], we will present manipulation circuits <ref> [Don95, DJR96b, DJR96a] </ref> for these protocols and give an information invariant analysis of resource tradeoffs in between these protocols for the distributed placement protocols presented here and discuss the supermodularity [DJR96a] of the underlieing circuits. Supermodularity is an attribute of manipulation circuits that ensures code distribution across spatially separated robots. <p> In our future work [Rus96], we will present manipulation circuits [Don95, DJR96b, DJR96a] for these protocols and give an information invariant analysis of resource tradeoffs in between these protocols for the distributed placement protocols presented here and discuss the supermodularity <ref> [DJR96a] </ref> of the underlieing circuits. Supermodularity is an attribute of manipulation circuits that ensures code distribution across spatially separated robots. Intuitively, a manipulation circuit is supermodular it is functions correctly the circuit relocated to a different physical location. We will explain how the environment for authoring supermodular circuits introduced in [DJR96a] <p> <ref> [DJR96a] </ref> of the underlieing circuits. Supermodularity is an attribute of manipulation circuits that ensures code distribution across spatially separated robots. Intuitively, a manipulation circuit is supermodular it is functions correctly the circuit relocated to a different physical location. We will explain how the environment for authoring supermodular circuits introduced in [DJR96a] was used to develop the system described in this paper. Acknowledgements This paper describes research done in the Dartmouth Robotics Laboratory.
Reference: [DJR96b] <institution> Information Invariants for Distributed Manipulation, </institution> <note> in International Journal of Robotics Research 1996 (to appear). </note>
Reference-contexts: The scouter acts as a mobile sensing platform to guide the motion of the movers. It uses sonar to detect obstacles and communicates motion directions to the movers. (See Figure 3.) In our previous work <ref> [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] </ref> we described off-line and on-line 1 algorithms and systems for cooperative pushing and reorientation of large robots. These manipulation systems were implemented on two RWI B12 robots in the Robotics and Vision Laboratory at Cornell University. <p> work <ref> [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] </ref> we described off-line and on-line 1 algorithms and systems for cooperative pushing and reorientation of large robots. These manipulation systems were implemented on two RWI B12 robots in the Robotics and Vision Laboratory at Cornell University. We reimplemented the manipulation systems reported in [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] on the RWI B14 architecture and duplicated the experiments on the Dart-mouth robots. The movers described in this paper use this manipulation system. <p> We build on the ground-breaking work of [Mas86, Erd86] and others on planar sensorless manipulation. Inspired by [Erd86, EM86] we focus on developing near-sensorless (i.e., that require only sparse sensing) manipulation protocols <ref> [Rus92, JR93, DJR93, DJR94a, RDJ95, DJR96a, DJR96b] </ref>. Our previous work on cooperative manipulation treats pushing and reorienting a large object from a minimalistic viewpoint [DJR96b, DJR96a]. We present and analyze four pushing and four reorientation protocols that require different amount of communication and sensing. <p> Inspired by [Erd86, EM86] we focus on developing near-sensorless (i.e., that require only sparse sensing) manipulation protocols [Rus92, JR93, DJR93, DJR94a, RDJ95, DJR96a, DJR96b]. Our previous work on cooperative manipulation treats pushing and reorienting a large object from a minimalistic viewpoint <ref> [DJR96b, DJR96a] </ref>. We present and analyze four pushing and four reorientation protocols that require different amount of communication and sensing. The final pushing protocol and the final reorientation protocol requires no explicit communication between the robots. 1.2 Outline This paper is organized as follows. <p> Bonnie and Clyde, 3 who are equipped with sonar and contact bumpers are well suited to manipulate objects. In fact, they run manipulation software similar to their RWI B12 counterparts at Cornell, Tommy and Lily [BBD+95]. Bonnie and Clyde can execute the on-line asynchronous pushing protocol described in <ref> [DJR93, DJR94a, DJR96b] </ref> and the on-line asynchronous reorientation protocol reported in [RDJ95]. As a team, they combine their contact bumper readings to converge to stable pushing (respectively reorienting) configurations. They make use of their sonar to recover from impediments and find better lever arms for more effective manipulation. <p> In our manipulation system, the robots use sonar and contact sensors to implement these skills. 5 This is called protocol P.II in <ref> [DJR94a, DJR96b] </ref>. 6 This is called protocol Asynch-Online in [RDJ95, BBD+95]. 5.2 An on-line, global control algorithm A variant of this protocol denoted by P-Local-Offline can be derived for one, two (or more) autonomous robots. <p> This algorithm requires a system of robots for manipulation (the movers) and a different robot to guide the navigation of the manipulation system (the scouter). One or two robots suffice to do the manipulation <ref> [DJR93, DJR94a, DJR96b, RDJ95] </ref>, but more robots can be used. <p> and the scouter knows the straight-line direction to the goal (but not the obstacles along the way), we have (see Figure 5 for a motion sequence): * Each Mover: 1. receive message from the scouter 2. if message = forward then straight line push (by using protocol P.II described in <ref> [DJR93, DJR94a, DJR96b] </ref>) 3. if message = stop then stop motion 4. if message = turn-right then counterclockwise reorientation (using protocol Async Online described in [RDJ95]) 5. if message = turn-left then clockwise reorientation (using protocol Async-Online described in [RDJ95]) * The Scouter 1. move along the straight-line to the goal <p> The scouter can use its resources to navigate around obstacles but it is incapable of manipulation. By combining the manipulation and the scouting skills with a simple communication scheme, we developed a more powerful ssytem. This research is done in the framework of information invariants <ref> [Don95, DJR93, DJR94a, DJR96b, BBD+95] </ref> and it takes a minimalist approach to distributed manipulation. <p> This research is done in the framework of information invariants [Don95, DJR93, DJR94a, DJR96b, BBD+95] and it takes a minimalist approach to distributed manipulation. In our future work [Rus96], we will present manipulation circuits <ref> [Don95, DJR96b, DJR96a] </ref> for these protocols and give an information invariant analysis of resource tradeoffs in between these protocols for the distributed placement protocols presented here and discuss the supermodularity [DJR96a] of the underlieing circuits. Supermodularity is an attribute of manipulation circuits that ensures code distribution across spatially separated robots.
Reference: [Erd86] <author> M. Erdmann, </author> <title> Using Backprojections for Fine Motion Planning with Uncertainty, </title> <journal> International Journal of Robotics Research, </journal> <volume> Vol. 5 no. 1, </volume> <year> 1986. </year>
Reference-contexts: For example, place all the objects in some corner; or place the movable objects so that the free space area of the room satisfies a desired topological property. When maps and models of the room are available, classical off-line planning methods <ref> [LMT84, Erd86, Lat91] </ref> can be used to determine the trajectory of each object. <p> We build on the ground-breaking work of <ref> [Mas86, Erd86] </ref> and others on planar sensorless manipulation. Inspired by [Erd86, EM86] we focus on developing near-sensorless (i.e., that require only sparse sensing) manipulation protocols [Rus92, JR93, DJR93, DJR94a, RDJ95, DJR96a, DJR96b]. <p> We build on the ground-breaking work of [Mas86, Erd86] and others on planar sensorless manipulation. Inspired by <ref> [Erd86, EM86] </ref> we focus on developing near-sensorless (i.e., that require only sparse sensing) manipulation protocols [Rus92, JR93, DJR93, DJR94a, RDJ95, DJR96a, DJR96b]. Our previous work on cooperative manipulation treats pushing and reorienting a large object from a minimalistic viewpoint [DJR96b, DJR96a].
Reference: [Erd93] <author> M. Erdmann, </author> <title> Action Subservient Sensing and Design, </title> <booktitle> in Proceedings of the International Conference on Robotics and Automation, </booktitle> <year> 1993. </year> <note> Also Carnegie-Mellon report CMU-CS-92-116. </note>
Reference: [EM86] <author> M. Erdmann and M. Mason, </author> <title> An Exploration of Sensorless Manipulation, </title> <booktitle> in Proceedings of the IEEE International Conference on Robotics and Automation, </booktitle> <year> 1986. </year>
Reference-contexts: We build on the ground-breaking work of [Mas86, Erd86] and others on planar sensorless manipulation. Inspired by <ref> [Erd86, EM86] </ref> we focus on developing near-sensorless (i.e., that require only sparse sensing) manipulation protocols [Rus92, JR93, DJR93, DJR94a, RDJ95, DJR96a, DJR96b]. Our previous work on cooperative manipulation treats pushing and reorienting a large object from a minimalistic viewpoint [DJR96b, DJR96a].
Reference: [Gol93] <author> K. Goldberg, </author> <title> Orienting Parts without Sensors, </title> <journal> Al-gorithmica Vol. </journal> <volume> 10, Nos. 2/3/4, </volume> <year> 1993. </year>
Reference: [HSS84] <author> J. Hopcroft, J. Schwartz, and M. Sharir, </author> <title> On the Complexity of Motion Planning for Multiple Independent Objects; PSPACE-Hardness of the "Warehouseman's Problem." </title> <journal> International Journal of Robotics Research,(4):76-88, </journal> <year> 1984. </year>
Reference: [JR93] <author> Jennings, J., and Rus, D., </author> <title> Active model acquisition for near-sensorless manipulation with mobile robots, </title> <booktitle> In IASTED International Conference on Robotics and Manufacturing, </booktitle> <pages> pages 179-184, </pages> <address> Oxford, England, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: We build on the ground-breaking work of [Mas86, Erd86] and others on planar sensorless manipulation. Inspired by [Erd86, EM86] we focus on developing near-sensorless (i.e., that require only sparse sensing) manipulation protocols <ref> [Rus92, JR93, DJR93, DJR94a, RDJ95, DJR96a, DJR96b] </ref>. Our previous work on cooperative manipulation treats pushing and reorienting a large object from a minimalistic viewpoint [DJR96b, DJR96a]. We present and analyze four pushing and four reorientation protocols that require different amount of communication and sensing.
Reference: [KB94] <author> J. Kosecka and L. Bogoni, </author> <title> Application of Discrete Event Systems for Modelling and Controlling Robotic Agents, </title> <booktitle> in Proceedings of the International Conference on Robotics and Automation, </booktitle> <year> 1994. </year>
Reference: [Lat91] <author> J. C. Latombe, </author> <title> Robot Motion Planning, </title> <publisher> Kluwer Academic Publishers 1991. </publisher>
Reference-contexts: For example, place all the objects in some corner; or place the movable objects so that the free space area of the room satisfies a desired topological property. When maps and models of the room are available, classical off-line planning methods <ref> [LMT84, Erd86, Lat91] </ref> can be used to determine the trajectory of each object.
Reference: [LMT84] <author> T. Lozano-Perez, M. Mason, and R. Taylor, </author> <title> Automatic Synthesis of Fine-Motion Strategies for Robots, </title> <journal> International Journal of Robotics Research Vol 3, </journal> <volume> no. 1, </volume> <year> 1984. </year>
Reference-contexts: For example, place all the objects in some corner; or place the movable objects so that the free space area of the room satisfies a desired topological property. When maps and models of the room are available, classical off-line planning methods <ref> [LMT84, Erd86, Lat91] </ref> can be used to determine the trajectory of each object.
Reference: [LS87] <author> V. Lumelsky and A. Stepanov, </author> <title> Path-planning strategies for a point mobile automaton moving amidst unknown obstacles of arbitrary shape, </title> <journal> Al-gorithmica, </journal> <volume> (2), </volume> <pages> pp. 403-430, </pages> <year> 1987. </year>
Reference-contexts: the object 3. if obstacle detected on the right communicate turn-left to the movers and adjust direction to goal 4. if obstacle detected on the left communicate turn-right to the movers and adjust direc tion to goal This is an on-line algorithm for guiding distributed manipulation of the flavor of <ref> [LS87] </ref>. The scouter only knows the location of the goal. If the robot encounters an obstacle before reaching the goal, it stops and records its state.
Reference: [Mas86] <author> M. Mason, </author> <title> Manipulator grasping and pushing operations, </title> <journal> International Journal of Robotics Research, </journal> <volume> 5(3) </volume> <pages> 53-71, </pages> <year> 1986. </year>
Reference-contexts: We build on the ground-breaking work of <ref> [Mas86, Erd86] </ref> and others on planar sensorless manipulation. Inspired by [Erd86, EM86] we focus on developing near-sensorless (i.e., that require only sparse sensing) manipulation protocols [Rus92, JR93, DJR93, DJR94a, RDJ95, DJR96a, DJR96b].
Reference: [Nor93] <author> F. Noreils, </author> <title> Toward a Robot Architecture Integrating Cooperation Between Mobile Robots: Application to Indoor Environment, </title> <journal> International Journal of Robotics Research Vol. </journal> <volume> 12, </volume> <year> 1993. </year>
Reference-contexts: For an excellent review see [CFKM95]. Previous work on cooperative manipulation has focused on pushing. Cooperative pushing has been treated in the context of box-pushing with multiple robots. In [Par94] a reinforcement learning strategy that focuses on task allocation is presented. Combining cooperation with mobot manipulation are, e.g., <ref> [Nor93] </ref>, [Par94], [Yam94], [BHD94], and [DJR93, RDJ95, DJR96a]. Each demonstrates the manipulation of a box or other large object using two mobile robots. [Nor93] describes a task in which one robot pushes a box and another robot clears ob 2 stacles out of the way. [Yam94] describes a system in which <p> In [Par94] a reinforcement learning strategy that focuses on task allocation is presented. Combining cooperation with mobot manipulation are, e.g., <ref> [Nor93] </ref>, [Par94], [Yam94], [BHD94], and [DJR93, RDJ95, DJR96a]. Each demonstrates the manipulation of a box or other large object using two mobile robots. [Nor93] describes a task in which one robot pushes a box and another robot clears ob 2 stacles out of the way. [Yam94] describes a system in which two mobile robots equipped with grippers move while holding an object. [Par94] builds an architecture designed to achieve fault-tolerant cooperation within teams of
Reference: [Par94] <author> L. Parker, </author> <title> Heterogeneous Multi-Robot Cooperation, </title> <type> PhD thesis, </type> <institution> MIT EECS department, </institution> <year> 1994. </year>
Reference-contexts: For an excellent review see [CFKM95]. Previous work on cooperative manipulation has focused on pushing. Cooperative pushing has been treated in the context of box-pushing with multiple robots. In <ref> [Par94] </ref> a reinforcement learning strategy that focuses on task allocation is presented. Combining cooperation with mobot manipulation are, e.g., [Nor93], [Par94], [Yam94], [BHD94], and [DJR93, RDJ95, DJR96a]. <p> For an excellent review see [CFKM95]. Previous work on cooperative manipulation has focused on pushing. Cooperative pushing has been treated in the context of box-pushing with multiple robots. In <ref> [Par94] </ref> a reinforcement learning strategy that focuses on task allocation is presented. Combining cooperation with mobot manipulation are, e.g., [Nor93], [Par94], [Yam94], [BHD94], and [DJR93, RDJ95, DJR96a]. <p> of a box or other large object using two mobile robots. [Nor93] describes a task in which one robot pushes a box and another robot clears ob 2 stacles out of the way. [Yam94] describes a system in which two mobile robots equipped with grippers move while holding an object. <ref> [Par94] </ref> builds an architecture designed to achieve fault-tolerant cooperation within teams of heterogeneous mobile robots and applies that architecture to a number of tasks (mostly in simulation), including "hazardous waste cleanup", in which several mobots cooperate to pick up a number of small objects and move them near a designated site.
Reference: [RD92] <author> J. Rees, and B. Donald, </author> <title> Program mobile robots in scheme, </title> <booktitle> In Proceedings of the 1992 IEEE International Conference on Robotics and Automation, </booktitle> <address> Nice, France, </address> <year> 1992. </year>
Reference-contexts: This team is heterogeneous. The mechanical designs of Bonnie and Clyde are similar, but drastically different than the design of Jerry. Furthermore, the software design of the robots is different: Bonnie and Clyde are programmed in Mobot-Scheme <ref> [RD92] </ref> and Jerry is programmed in C in the Saphira programming environment [Sap96]. The different architectures of our robots make them suitable for different tasks. Bonnie and Clyde, 3 who are equipped with sonar and contact bumpers are well suited to manipulate objects.
Reference: [Rus92] <author> D. </author> <title> Rus, Fine motion planning for dexterous manipulation, </title> <type> PhD thesis, </type> <institution> Cornell University, </institution> <address> Ithaca, NY, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: We build on the ground-breaking work of [Mas86, Erd86] and others on planar sensorless manipulation. Inspired by [Erd86, EM86] we focus on developing near-sensorless (i.e., that require only sparse sensing) manipulation protocols <ref> [Rus92, JR93, DJR93, DJR94a, RDJ95, DJR96a, DJR96b] </ref>. Our previous work on cooperative manipulation treats pushing and reorienting a large object from a minimalistic viewpoint [DJR96b, DJR96a]. We present and analyze four pushing and four reorientation protocols that require different amount of communication and sensing.
Reference: [Rus93] <author> D. </author> <title> Rus, "Coordinatd rotations of polygons", </title> <booktitle> in Proceedings of the Symposium on Intelligent Robot Systems, </booktitle> <year> 1993. </year>
Reference-contexts: The scouter acts as a mobile sensing platform to guide the motion of the movers. It uses sonar to detect obstacles and communicates motion directions to the movers. (See Figure 3.) In our previous work <ref> [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] </ref> we described off-line and on-line 1 algorithms and systems for cooperative pushing and reorientation of large robots. These manipulation systems were implemented on two RWI B12 robots in the Robotics and Vision Laboratory at Cornell University. <p> work <ref> [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] </ref> we described off-line and on-line 1 algorithms and systems for cooperative pushing and reorientation of large robots. These manipulation systems were implemented on two RWI B12 robots in the Robotics and Vision Laboratory at Cornell University. We reimplemented the manipulation systems reported in [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] on the RWI B14 architecture and duplicated the experiments on the Dart-mouth robots. The movers described in this paper use this manipulation system.
Reference: [RDJ95] <author> D. Rus, B. Donald, and J. Jennings, </author> <title> Moving furniture with mobile robots, </title> <booktitle> In Proceedings of Intelligent Robot Systems, </booktitle> <address> Pittsburgh, PA, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: This decoupling of the placement task into (1) manipulation and (2) scouting best utilizes the resources of the robots. The movers can push and orient large objects with local guarantees but all their sensors are devoted to the manipulation task <ref> [DJR94b, RDJ95] </ref>. They can't "see" what happens in front of the object. To change the placement of an object in a cluttered room, the movers need either an accurate and detailed map on which they could callibrate and plan, or navigation guidance. <p> The scouter acts as a mobile sensing platform to guide the motion of the movers. It uses sonar to detect obstacles and communicates motion directions to the movers. (See Figure 3.) In our previous work <ref> [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] </ref> we described off-line and on-line 1 algorithms and systems for cooperative pushing and reorientation of large robots. These manipulation systems were implemented on two RWI B12 robots in the Robotics and Vision Laboratory at Cornell University. <p> work <ref> [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] </ref> we described off-line and on-line 1 algorithms and systems for cooperative pushing and reorientation of large robots. These manipulation systems were implemented on two RWI B12 robots in the Robotics and Vision Laboratory at Cornell University. We reimplemented the manipulation systems reported in [Rus93, DJR93, DJR94a, DJR94b, DJR96b, RDJ95] on the RWI B14 architecture and duplicated the experiments on the Dart-mouth robots. The movers described in this paper use this manipulation system. <p> Clyde push a large recycle bin under the direction of Jerry, who scouts next to the moving system for obstacles. reorienting objects guarantee the local behavior of the object being manipulated. In this paper we introduce the global placement problem and present algorithms and systems of similar flavor to <ref> [DJR94b, RDJ95] </ref> for distributed placement goals. Specifically, this paper addresses distributed solutions with heterogeneous teams of robots for the placement problem: given an environment, reorganize the objects in it according to some desired global property. <p> Previous work on cooperative manipulation has focused on pushing. Cooperative pushing has been treated in the context of box-pushing with multiple robots. In [Par94] a reinforcement learning strategy that focuses on task allocation is presented. Combining cooperation with mobot manipulation are, e.g., [Nor93], [Par94], [Yam94], [BHD94], and <ref> [DJR93, RDJ95, DJR96a] </ref>. <p> We build on the ground-breaking work of [Mas86, Erd86] and others on planar sensorless manipulation. Inspired by [Erd86, EM86] we focus on developing near-sensorless (i.e., that require only sparse sensing) manipulation protocols <ref> [Rus92, JR93, DJR93, DJR94a, RDJ95, DJR96a, DJR96b] </ref>. Our previous work on cooperative manipulation treats pushing and reorienting a large object from a minimalistic viewpoint [DJR96b, DJR96a]. We present and analyze four pushing and four reorientation protocols that require different amount of communication and sensing. <p> We have reported on several sets of distributed manipulation strategies [DJR94a, RDJ95, BBD+95, 2 A team of robots wander in search for "food" that is randomly distributed throughout their workspace. DJR96b] and also on the methodology which generated them. This methodology relies on information invariants <ref> [Don95, DJR93, DJR94a, RDJ95] </ref> for determining the information required by a robot to perform a task, and the equivalent ways for the robot to extract this information from the environment. <p> The Information Invariant formalism allows the treatment of manipulation from a minimalist stance [BBD+95, DJR96a]. We ask (i) Can we do manipulation without communication? (ii) Can we do manipulation without planning? (iii) Can we do manipulation without global control? (iv) Can we do manipulation without geometric models? Previous results <ref> [DJR94a, RDJ95] </ref> show that questions (i)-(iv) can be answered affirmatively for the tasks of pushing an object along a straight line and reorientation with multiple robots. Posing (i)-(iv) for general manipulation tasks is much more challenging. <p> In fact, they run manipulation software similar to their RWI B12 counterparts at Cornell, Tommy and Lily [BBD+95]. Bonnie and Clyde can execute the on-line asynchronous pushing protocol described in [DJR93, DJR94a, DJR96b] and the on-line asynchronous reorientation protocol reported in <ref> [RDJ95] </ref>. As a team, they combine their contact bumper readings to converge to stable pushing (respectively reorienting) configurations. They make use of their sonar to recover from impediments and find better lever arms for more effective manipulation. <p> In our manipulation system, the robots use sonar and contact sensors to implement these skills. 5 This is called protocol P.II in [DJR94a, DJR96b]. 6 This is called protocol Asynch-Online in <ref> [RDJ95, BBD+95] </ref>. 5.2 An on-line, global control algorithm A variant of this protocol denoted by P-Local-Offline can be derived for one, two (or more) autonomous robots. Such a system does not have a glo-val controller, but each robot has the map, the start, and the goal. <p> This algorithm requires a system of robots for manipulation (the movers) and a different robot to guide the navigation of the manipulation system (the scouter). One or two robots suffice to do the manipulation <ref> [DJR93, DJR94a, DJR96b, RDJ95] </ref>, but more robots can be used. <p> sequence): * Each Mover: 1. receive message from the scouter 2. if message = forward then straight line push (by using protocol P.II described in [DJR93, DJR94a, DJR96b]) 3. if message = stop then stop motion 4. if message = turn-right then counterclockwise reorientation (using protocol Async Online described in <ref> [RDJ95] </ref>) 5. if message = turn-left then clockwise reorientation (using protocol Async-Online described in [RDJ95]) * The Scouter 1. move along the straight-line to the goal and communicate forward to the movers 2. if moving object system not visible with sonar set S, communicate stop to the movers, and search for <p> forward then straight line push (by using protocol P.II described in [DJR93, DJR94a, DJR96b]) 3. if message = stop then stop motion 4. if message = turn-right then counterclockwise reorientation (using protocol Async Online described in <ref> [RDJ95] </ref>) 5. if message = turn-left then clockwise reorientation (using protocol Async-Online described in [RDJ95]) * The Scouter 1. move along the straight-line to the goal and communicate forward to the movers 2. if moving object system not visible with sonar set S, communicate stop to the movers, and search for the object 3. if obstacle detected on the right communicate turn-left to the movers
Reference: [Rus96] <author> D. </author> <title> Rus, Supermodular circuits for distributed placement, </title> <type> forthcoming technical report, </type> <institution> Department of Computer Science, Dartmouth College, </institution> <year> 1996. </year>
Reference-contexts: By combining the manipulation and the scouting skills with a simple communication scheme, we developed a more powerful ssytem. This research is done in the framework of information invariants [Don95, DJR93, DJR94a, DJR96b, BBD+95] and it takes a minimalist approach to distributed manipulation. In our future work <ref> [Rus96] </ref>, we will present manipulation circuits [Don95, DJR96b, DJR96a] for these protocols and give an information invariant analysis of resource tradeoffs in between these protocols for the distributed placement protocols presented here and discuss the supermodularity [DJR96a] of the underlieing circuits.
Reference: [Sap96] <institution> Pioneer 1 Mobile Robot with Saphira Manual, Active Media Inc. and Real World Interface Inc., </institution> <year> 1996. </year>
Reference-contexts: This team is heterogeneous. The mechanical designs of Bonnie and Clyde are similar, but drastically different than the design of Jerry. Furthermore, the software design of the robots is different: Bonnie and Clyde are programmed in Mobot-Scheme [RD92] and Jerry is programmed in C in the Saphira programming environment <ref> [Sap96] </ref>. The different architectures of our robots make them suitable for different tasks. Bonnie and Clyde, 3 who are equipped with sonar and contact bumpers are well suited to manipulate objects. In fact, they run manipulation software similar to their RWI B12 counterparts at Cornell, Tommy and Lily [BBD+95].
Reference: [Yam94] <author> Y. Yamamoto, </author> <title> Coordinated Control of A Mobile Manipulator, </title> <institution> Techical Report MS-CIS-94-12 / GRASP LAB 372, Department of Computer Science, The University of Pennsylvania, </institution> <year> 1994. </year> <month> 8 </month>
Reference-contexts: Previous work on cooperative manipulation has focused on pushing. Cooperative pushing has been treated in the context of box-pushing with multiple robots. In [Par94] a reinforcement learning strategy that focuses on task allocation is presented. Combining cooperation with mobot manipulation are, e.g., [Nor93], [Par94], <ref> [Yam94] </ref>, [BHD94], and [DJR93, RDJ95, DJR96a]. Each demonstrates the manipulation of a box or other large object using two mobile robots. [Nor93] describes a task in which one robot pushes a box and another robot clears ob 2 stacles out of the way. [Yam94] describes a system in which two mobile <p> with mobot manipulation are, e.g., [Nor93], [Par94], <ref> [Yam94] </ref>, [BHD94], and [DJR93, RDJ95, DJR96a]. Each demonstrates the manipulation of a box or other large object using two mobile robots. [Nor93] describes a task in which one robot pushes a box and another robot clears ob 2 stacles out of the way. [Yam94] describes a system in which two mobile robots equipped with grippers move while holding an object. [Par94] builds an architecture designed to achieve fault-tolerant cooperation within teams of heterogeneous mobile robots and applies that architecture to a number of tasks (mostly in simulation), including "hazardous waste cleanup", in which several
References-found: 31

