URL: http://www.uni-paderborn.de/fachbereich/AG/agmadh/Scripts/GENERAL/Chen-optimization-notes.ps
Refering-URL: http://www.uni-paderborn.de/fachbereich/AG/agmadh/WWW/english/scripts.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: chen@cs.tamu.edu  
Title: Lecture Notes in Computational Optimization  
Author: Jianer Chen U. S. A. 
Date: December, 1995  
Address: College Station, TX 77843-3112  
Affiliation: Department of Computer Science Texas A&M University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. V. Aho, J. E. Hopcropt, and J. D. Ullman, </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1974. </year>
Reference-contexts: For the boolean variable u that has three occurrences in the set S, there are four identical rings of six triples. For k = 1; : : : ; 4, the kth ring has its outer vertices labeled by u <ref> [1; k] </ref>, u [1; k], u [2; k], u [2; k], u [3; k], and u [3; k] (see Figure 8). <p> For the boolean variable u that has three occurrences in the set S, there are four identical rings of six triples. For k = 1; : : : ; 4, the kth ring has its outer vertices labeled by u <ref> [1; k] </ref>, u [1; k], u [2; k], u [2; k], u [3; k], and u [3; k] (see Figure 8). <p> For each i = 1; 2; 3, the four vertices u <ref> [i; 1] </ref>, u [i; 2], u [i; 3] and u [i; 4] are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. <p> For each i = 1; 2; 3, the four vertices u <ref> [i; 1] </ref>, u [i; 2], u [i; 3] and u [i; 4] are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. Similarly, for each i = 1; 2; 3, the four vertices u [i; 1], u [i; 2], u [i; 3] and u [i; 4] are <p> 3] and u [i; 4] are connected by three new triples (u <ref> [i; 1] </ref>; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. Similarly, for each i = 1; 2; 3, the four vertices u [i; 1], u [i; 2], u [i; 3] and u [i; 4] are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. <p> Similarly, for each i = 1; 2; 3, the four vertices u <ref> [i; 1] </ref>, u [i; 2], u [i; 3] and u [i; 4] are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. <p> Figure 9 shows the four rings and the three new triples connecting the vertices u <ref> [1; 1] </ref>, u [1; 2], u [1; 3] and u [1; 4]. Note that the new triples connecting the other 20 triples in the rings are not shown in The triples contained in each ring will be called ring triples. <p> Figure 9 shows the four rings and the three new triples connecting the vertices u [1; 1], u <ref> [1; 2] </ref>, u [1; 3] and u [1; 4]. Note that the new triples connecting the other 20 triples in the rings are not shown in The triples contained in each ring will be called ring triples. <p> Figure 9 shows the four rings and the three new triples connecting the vertices u [1; 1], u [1; 2], u <ref> [1; 3] </ref> and u [1; 4]. Note that the new triples connecting the other 20 triples in the rings are not shown in The triples contained in each ring will be called ring triples. <p> Figure 9 shows the four rings and the three new triples connecting the vertices u [1; 1], u [1; 2], u [1; 3] and u <ref> [1; 4] </ref>. Note that the new triples connecting the other 20 triples in the rings are not shown in The triples contained in each ring will be called ring triples. <p> Note that the new triples connecting the other 20 triples in the rings are not shown in The triples contained in each ring will be called ring triples. The triples (u <ref> [i; 1] </ref>; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); for i = 1; 2; 3, will be called leaf triples, and the triples (u1 [i]; u2 [i]; u [i]) (u1 [i]; u2 [i]; u [i]) for i = 1; 2; 3, will be called root <p> All trees will be labeled identically, so we only describe the labeling for the tree rooted at u <ref> [1] </ref>. Label u [1] with X, label u1 [1] with Y and u2 [1] with Z, and label u [1; 1] with Z, u [1; 2] with X, u [1; 3] with X, and u [1; 4] with Y . <p> All trees will be labeled identically, so we only describe the labeling for the tree rooted at u <ref> [1] </ref>. Label u [1] with X, label u1 [1] with Y and u2 [1] with Z, and label u [1; 1] with Z, u [1; 2] with X, u [1; 3] with X, and u [1; 4] with Y . <p> All trees will be labeled identically, so we only describe the labeling for the tree rooted at u <ref> [1] </ref>. Label u [1] with X, label u1 [1] with Y and u2 [1] with Z, and label u [1; 1] with Z, u [1; 2] with X, u [1; 3] with X, and u [1; 4] with Y . <p> All trees will be labeled identically, so we only describe the labeling for the tree rooted at u <ref> [1] </ref>. Label u [1] with X, label u1 [1] with Y and u2 [1] with Z, and label u [1; 1] with Z, u [1; 2] with X, u [1; 3] with X, and u [1; 4] with Y . Note that for each fixed ring, this labeling process labels all outer vertices of the ring with the same symbol. <p> All trees will be labeled identically, so we only describe the labeling for the tree rooted at u [1]. Label u [1] with X, label u1 [1] with Y and u2 [1] with Z, and label u <ref> [1; 1] </ref> with Z, u [1; 2] with X, u [1; 3] with X, and u [1; 4] with Y . Note that for each fixed ring, this labeling process labels all outer vertices of the ring with the same symbol. <p> All trees will be labeled identically, so we only describe the labeling for the tree rooted at u [1]. Label u [1] with X, label u1 [1] with Y and u2 [1] with Z, and label u [1; 1] with Z, u <ref> [1; 2] </ref> with X, u [1; 3] with X, and u [1; 4] with Y . Note that for each fixed ring, this labeling process labels all outer vertices of the ring with the same symbol. <p> All trees will be labeled identically, so we only describe the labeling for the tree rooted at u [1]. Label u [1] with X, label u1 [1] with Y and u2 [1] with Z, and label u [1; 1] with Z, u [1; 2] with X, u <ref> [1; 3] </ref> with X, and u [1; 4] with Y . Note that for each fixed ring, this labeling process labels all outer vertices of the ring with the same symbol. Thus, the inner vertices in the ring can be properly labeled using the other two symbols. <p> Label u [1] with X, label u1 [1] with Y and u2 [1] with Z, and label u [1; 1] with Z, u [1; 2] with X, u [1; 3] with X, and u <ref> [1; 4] </ref> with Y . Note that for each fixed ring, this labeling process labels all outer vertices of the ring with the same symbol. Thus, the inner vertices in the ring can be properly labeled using the other two symbols. <p> The set M + u consists of: (1) the 12 ring triples that contain u [i; k], for i = 1; 2; 3 and k = 1; 2; 3; 4, respectively; (2) the 6 leaf triples (u <ref> [i; 1] </ref>; u [i; 2]; u1 [i]), and (u [i; 3]; u [i; 4]; u2 [i]), for i = 1; 2; 3; and (3) the 3 root triples (u1 [i]; u2 [i]; u [i]), for i = 1; 2; 3. <p> The set M u consists of: (1) the 12 ring triples that contain u [i; k], for i = 1; 2; 3 and k = 1; 2; 3; 4, respectively; (2) the 6 leaf triples (u <ref> [i; 1] </ref>; u [i; 2]; u1 [i]), and (u [i; 3]; u [i; 4]; u2 [i]), for i = 1; 2; 3; and (3) the 3 root triples (u1 [i]; u2 [i]; u [i]), for i = 1; 2; 3. <p> Then one can construct a set T u of at most 42 triples with the following properties: 1. T u has d positive root triples that contain the d components u <ref> [1] </ref>, : : :, u [d], respectively, and d negative root triples that contain the d com ponents u [1], : : :, u [d], respectively; 2. <p> T u has d positive root triples that contain the d components u <ref> [1] </ref>, : : :, u [d], respectively, and d negative root triples that contain the d com ponents u [1], : : :, u [d], respectively; 2. <p> Then one can construct a set T u of at most 42 triples with the following properties: 1. T u has d positive root triples that contain the d components u <ref> [1] </ref>, : : :, u [d], respectively, and d negative root triples that contain the d com ponents u [1], : : :, u [d], respectively; 2. <p> T u has d positive root triples that contain the d components u <ref> [1] </ref>, : : :, u [d], respectively, and d negative root triples that contain the d com ponents u [1], : : :, u [d], respectively; 2.
Reference: [2] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy, </author> <title> Proof verification and hardness of approximation problems, </title> <booktitle> Proc. 33rd Ann. IEEE Symp. on the Foundation of Computer Science, </booktitle> <year> (1992), </year> <pages> pp. 14-23. </pages>
Reference-contexts: For the boolean variable u that has three occurrences in the set S, there are four identical rings of six triples. For k = 1; : : : ; 4, the kth ring has its outer vertices labeled by u [1; k], u [1; k], u <ref> [2; k] </ref>, u [2; k], u [3; k], and u [3; k] (see Figure 8). <p> For the boolean variable u that has three occurrences in the set S, there are four identical rings of six triples. For k = 1; : : : ; 4, the kth ring has its outer vertices labeled by u [1; k], u [1; k], u <ref> [2; k] </ref>, u [2; k], u [3; k], and u [3; k] (see Figure 8). <p> For each i = 1; 2; 3, the four vertices u [i; 1], u <ref> [i; 2] </ref>, u [i; 3] and u [i; 4] are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. <p> For each i = 1; 2; 3, the four vertices u [i; 1], u <ref> [i; 2] </ref>, u [i; 3] and u [i; 4] are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. Similarly, for each i = 1; 2; 3, the four vertices u [i; 1], u [i; 2], u [i; 3] and u [i; 4] are connected by three <p> [i; 4] are connected by three new triples (u [i; 1]; u <ref> [i; 2] </ref>; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. Similarly, for each i = 1; 2; 3, the four vertices u [i; 1], u [i; 2], u [i; 3] and u [i; 4] are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. <p> Similarly, for each i = 1; 2; 3, the four vertices u [i; 1], u <ref> [i; 2] </ref>, u [i; 3] and u [i; 4] are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. Figure 9 shows the four rings and the three new triples connecting the vertices u [1; 1], u [1; 2], u [1; 3] and u [1; 4]. <p> Figure 9 shows the four rings and the three new triples connecting the vertices u [1; 1], u <ref> [1; 2] </ref>, u [1; 3] and u [1; 4]. Note that the new triples connecting the other 20 triples in the rings are not shown in The triples contained in each ring will be called ring triples. <p> Note that the new triples connecting the other 20 triples in the rings are not shown in The triples contained in each ring will be called ring triples. The triples (u [i; 1]; u <ref> [i; 2] </ref>; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); for i = 1; 2; 3, will be called leaf triples, and the triples (u1 [i]; u2 [i]; u [i]) (u1 [i]; u2 [i]; u [i]) for i = 1; 2; 3, will be called root triples. <p> All trees will be labeled identically, so we only describe the labeling for the tree rooted at u [1]. Label u [1] with X, label u1 [1] with Y and u2 [1] with Z, and label u [1; 1] with Z, u <ref> [1; 2] </ref> with X, u [1; 3] with X, and u [1; 4] with Y . Note that for each fixed ring, this labeling process labels all outer vertices of the ring with the same symbol. <p> The set M + u consists of: (1) the 12 ring triples that contain u [i; k], for i = 1; 2; 3 and k = 1; 2; 3; 4, respectively; (2) the 6 leaf triples (u [i; 1]; u <ref> [i; 2] </ref>; u1 [i]), and (u [i; 3]; u [i; 4]; u2 [i]), for i = 1; 2; 3; and (3) the 3 root triples (u1 [i]; u2 [i]; u [i]), for i = 1; 2; 3. <p> The set M u consists of: (1) the 12 ring triples that contain u [i; k], for i = 1; 2; 3 and k = 1; 2; 3; 4, respectively; (2) the 6 leaf triples (u [i; 1]; u <ref> [i; 2] </ref>; u1 [i]), and (u [i; 3]; u [i; 4]; u2 [i]), for i = 1; 2; 3; and (3) the 3 root triples (u1 [i]; u2 [i]; u [i]), for i = 1; 2; 3. Each of the matchings M + u and M u contains 21 triples.
Reference: [3] <author> S. Arora and S. Safra, </author> <title> Probabilistic checking of proofs: a new characterization of NP, </title> <booktitle> Proc. 33rd Ann. IEEE Symp. on the Foundation of Computer Science, </booktitle> <year> (1992), </year> <pages> pp. 2-13. </pages>
Reference-contexts: For k = 1; : : : ; 4, the kth ring has its outer vertices labeled by u [1; k], u [1; k], u [2; k], u [2; k], u <ref> [3; k] </ref>, and u [3; k] (see Figure 8). <p> For k = 1; : : : ; 4, the kth ring has its outer vertices labeled by u [1; k], u [1; k], u [2; k], u [2; k], u <ref> [3; k] </ref>, and u [3; k] (see Figure 8). <p> For each i = 1; 2; 3, the four vertices u [i; 1], u [i; 2], u <ref> [i; 3] </ref> and u [i; 4] are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. <p> For each i = 1; 2; 3, the four vertices u [i; 1], u [i; 2], u <ref> [i; 3] </ref> and u [i; 4] are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. Similarly, for each i = 1; 2; 3, the four vertices u [i; 1], u [i; 2], u [i; 3] and u [i; 4] are connected by three new triples (u [i; 1]; <p> connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u <ref> [i; 3] </ref>; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. Similarly, for each i = 1; 2; 3, the four vertices u [i; 1], u [i; 2], u [i; 3] and u [i; 4] are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. <p> Similarly, for each i = 1; 2; 3, the four vertices u [i; 1], u [i; 2], u <ref> [i; 3] </ref> and u [i; 4] are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. Figure 9 shows the four rings and the three new triples connecting the vertices u [1; 1], u [1; 2], u [1; 3] and u [1; 4]. <p> Figure 9 shows the four rings and the three new triples connecting the vertices u [1; 1], u [1; 2], u <ref> [1; 3] </ref> and u [1; 4]. Note that the new triples connecting the other 20 triples in the rings are not shown in The triples contained in each ring will be called ring triples. <p> Note that the new triples connecting the other 20 triples in the rings are not shown in The triples contained in each ring will be called ring triples. The triples (u [i; 1]; u [i; 2]; u1 [i]); (u <ref> [i; 3] </ref>; u [i; 4]; u2 [i]); for i = 1; 2; 3, will be called leaf triples, and the triples (u1 [i]; u2 [i]; u [i]) (u1 [i]; u2 [i]; u [i]) for i = 1; 2; 3, will be called root triples. <p> All trees will be labeled identically, so we only describe the labeling for the tree rooted at u [1]. Label u [1] with X, label u1 [1] with Y and u2 [1] with Z, and label u [1; 1] with Z, u [1; 2] with X, u <ref> [1; 3] </ref> with X, and u [1; 4] with Y . Note that for each fixed ring, this labeling process labels all outer vertices of the ring with the same symbol. Thus, the inner vertices in the ring can be properly labeled using the other two symbols. <p> The set M + u consists of: (1) the 12 ring triples that contain u [i; k], for i = 1; 2; 3 and k = 1; 2; 3; 4, respectively; (2) the 6 leaf triples (u [i; 1]; u [i; 2]; u1 [i]), and (u <ref> [i; 3] </ref>; u [i; 4]; u2 [i]), for i = 1; 2; 3; and (3) the 3 root triples (u1 [i]; u2 [i]; u [i]), for i = 1; 2; 3. <p> The set M u consists of: (1) the 12 ring triples that contain u [i; k], for i = 1; 2; 3 and k = 1; 2; 3; 4, respectively; (2) the 6 leaf triples (u [i; 1]; u [i; 2]; u1 [i]), and (u <ref> [i; 3] </ref>; u [i; 4]; u2 [i]), for i = 1; 2; 3; and (3) the 3 root triples (u1 [i]; u2 [i]; u [i]), for i = 1; 2; 3. Each of the matchings M + u and M u contains 21 triples.
Reference: [4] <author> G. Ausiello, P. Crescenzi, and M. Protasi, </author> <title> Approximate solution of NP optimization problems, </title> <booktitle> Theoretical Computer Science 150, </booktitle> <year> (1995), </year> <pages> pp. 1-55. </pages>
Reference-contexts: For each i = 1; 2; 3, the four vertices u [i; 1], u [i; 2], u [i; 3] and u <ref> [i; 4] </ref> are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. <p> For each i = 1; 2; 3, the four vertices u [i; 1], u [i; 2], u [i; 3] and u <ref> [i; 4] </ref> are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. Similarly, for each i = 1; 2; 3, the four vertices u [i; 1], u [i; 2], u [i; 3] and u [i; 4] are connected by three new triples (u [i; 1]; u [i; 2]; <p> triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u <ref> [i; 4] </ref>; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. Similarly, for each i = 1; 2; 3, the four vertices u [i; 1], u [i; 2], u [i; 3] and u [i; 4] are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. <p> Similarly, for each i = 1; 2; 3, the four vertices u [i; 1], u [i; 2], u [i; 3] and u <ref> [i; 4] </ref> are connected by three new triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u [i; 4]; u2 [i]); (u1 [i]; u2 [i]; u [i]) in a binary tree manner. Figure 9 shows the four rings and the three new triples connecting the vertices u [1; 1], u [1; 2], u [1; 3] and u [1; 4]. <p> Figure 9 shows the four rings and the three new triples connecting the vertices u [1; 1], u [1; 2], u [1; 3] and u <ref> [1; 4] </ref>. Note that the new triples connecting the other 20 triples in the rings are not shown in The triples contained in each ring will be called ring triples. <p> Note that the new triples connecting the other 20 triples in the rings are not shown in The triples contained in each ring will be called ring triples. The triples (u [i; 1]; u [i; 2]; u1 [i]); (u [i; 3]; u <ref> [i; 4] </ref>; u2 [i]); for i = 1; 2; 3, will be called leaf triples, and the triples (u1 [i]; u2 [i]; u [i]) (u1 [i]; u2 [i]; u [i]) for i = 1; 2; 3, will be called root triples. <p> Label u [1] with X, label u1 [1] with Y and u2 [1] with Z, and label u [1; 1] with Z, u [1; 2] with X, u [1; 3] with X, and u <ref> [1; 4] </ref> with Y . Note that for each fixed ring, this labeling process labels all outer vertices of the ring with the same symbol. Thus, the inner vertices in the ring can be properly labeled using the other two symbols. <p> The set M + u consists of: (1) the 12 ring triples that contain u [i; k], for i = 1; 2; 3 and k = 1; 2; 3; 4, respectively; (2) the 6 leaf triples (u [i; 1]; u [i; 2]; u1 [i]), and (u [i; 3]; u <ref> [i; 4] </ref>; u2 [i]), for i = 1; 2; 3; and (3) the 3 root triples (u1 [i]; u2 [i]; u [i]), for i = 1; 2; 3. <p> The set M u consists of: (1) the 12 ring triples that contain u [i; k], for i = 1; 2; 3 and k = 1; 2; 3; 4, respectively; (2) the 6 leaf triples (u [i; 1]; u [i; 2]; u1 [i]), and (u [i; 3]; u <ref> [i; 4] </ref>; u2 [i]), for i = 1; 2; 3; and (3) the 3 root triples (u1 [i]; u2 [i]; u [i]), for i = 1; 2; 3. Each of the matchings M + u and M u contains 21 triples.
Reference: [5] <author> B. S. Baker, </author> <title> Approximation algorithms for NP-complete problems on planar graphs, </title> <journal> Journal of ACM 41, </journal> <year> (1994), </year> <pages> pp. 153-180. </pages>
Reference: [6] <author> P. Berman and G. Schnitger, </author> <title> On the complexity of approximating the independent set problem, </title> <booktitle> Information and Computation 96, </booktitle> <year> (1992), </year> <pages> pp. 77-94. </pages>
Reference: [7] <author> P. Berman and V. Ramaiyer, </author> <title> Improved approximations for the Steiner tree problem, </title> <booktitle> Proc. 3rd Ann. ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <year> (1992), </year> <pages> pp. 325-334. </pages>
Reference: [8] <author> L. Cai and J. Chen, </author> <title> On the amount of nondeterminism and the power of verifying, </title> <journal> SIAM Journal on Computing, </journal> <note> to appear. </note>
Reference: [9] <author> L. Cai and J. Chen, </author> <title> On fixed-parameter tractability and approx-imability of NP-hard optimization problems, </title> <journal> Journal of Computer and System Sciences, </journal> <note> to appear. </note>
Reference: [10] <author> L. Cai, J. Chen, R. Downey, and M. Fellows, </author> <title> On the structure of parameterized problems in NP, </title> <booktitle> Information and Computation 123, </booktitle> <year> (1995), </year> <pages> pp. 38-49. </pages>
Reference: [11] <author> J. Chen and D. K. Friesen, </author> <title> The complexity of 3-dimensional matching, </title> <type> Tech. Report, </type> <institution> Dept. Computer Science, Texas A&M University, </institution> <year> (1995). </year>
Reference: [12] <author> J. Chen, S. P. Kanchi, and A. Kanevsky, </author> <title> On the complexity of graph embeddings, </title> <booktitle> Lecture Notes in Computer Science 709, </booktitle> <year> (1993), </year> <pages> pp. 234-245. </pages>
Reference: [13] <author> N. Christofides, </author> <title> Worst-case analysis of a new heuristic for the traveling salesman problem, </title> <type> Tech. Report, </type> <institution> GSIA, Carnegie-Mellon University, </institution> <year> (1976). </year>
Reference: [14] <author> E. G. Coffman, M. R. Garey, and D. S. Johnson, </author> <title> Approximation algorithms for bin packing an updated survey, in Algorithm Design for Computer System Design, </title> <editor> (ed. G. Ausiello, M. Lucertini, and P. Serafini), </editor> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference: [15] <author> P. Crescenzi and V. Kann, </author> <title> A compendium of NP optimization problems, </title> <type> Manuscript, </type> <year> (1995). </year>
Reference: [16] <author> P. Crescenzi and A. Panconesi, </author> <title> Completeness in approximation classes, </title> <booktitle> Information and Computation 93, </booktitle> <year> (1991), </year> <pages> pp. 241-262. </pages>
Reference: [17] <author> G. B. Dantzig, </author> <title> Linear Programming and Extensions, </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1963. </year>
Reference: [18] <author> E. A. Dinits, </author> <title> Algorithm for solution of a problem of maximum flow in a network with power estimation, </title> <journal> Soviet Math. Dokl. </journal> <volume> 11, </volume> <year> (1970), </year> <pages> pp. 1277-1280. </pages>
Reference: [19] <author> J. Edmonds, </author> <title> Paths, trees and flowers, </title> <journal> Canad. J. Math. </journal> <volume> 17, </volume> <year> (1965), </year> <pages> pp. 449-467. </pages>
Reference: [20] <author> J. Edmonds and R. M. Karp, </author> <title> Theoretical improvements in algorithmic efficiency for network flow problems, </title> <journal> Journal of ACM 19, </journal> <year> (1972), </year> <pages> pp. 248-264. </pages>
Reference: [21] <author> R. Fagin, </author> <title> Generalized first-order spectra and polynomial-time recognizable sets, </title> <booktitle> SIAM-AMS Proc., </booktitle> <year> (1974), </year> <pages> pp. 43-73. </pages>
Reference: [22] <author> W. Fernandez de la Vega and G. S. Lueker, </author> <title> Bin packing can be solved within 1+* in linear time, </title> <type> Combinatorica 1, </type> <year> (1981), </year> <pages> pp. 349-355. 227 </pages>
Reference: [23] <author> L. R. Ford and D. R. Fulkerson, </author> <title> Flows in Networks, </title> <publisher> Princeton University Press, </publisher> <address> Princeton, NJ, </address> <year> 1962. </year>
Reference: [24] <author> D. K. Friesen, </author> <title> Tighter bounds for the multifit processor scheduling algorithm, </title> <journal> SIAM Journal on Computing 13, </journal> <year> (1984), </year> <pages> pp. 170-181. </pages>
Reference: [25] <author> M. R. Garey and D. S. Johnson, </author> <title> Strong NP-completeness results: motivation, examples, and implications, </title> <journal> Journal of ACM 25, </journal> <year> (1978), </year> <pages> pp. 499-508. </pages>
Reference: [26] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability: A Guide to the Theory of NP-completeness, </title> <publisher> Freeman, </publisher> <address> San Fransico, CA, </address> <year> 1979. </year>
Reference: [27] <author> M. X. Goemans and D. P. Williamson, </author> <title> :878-approximation algorithms for MAX CUT and MAX 2SAT, </title> <booktitle> Proc. 26st Ann. ACM Symp. on Theory of Computing, </booktitle> <year> (1994), </year> <pages> pp. 422-431. </pages>
Reference: [28] <author> R. L. Graham, </author> <title> Bounds for certain multiprocessing anomalies, </title> <journal> Bell Systems Technical Journal 45, </journal> <year> (1966), </year> <pages> pp. 1563-1581. </pages>
Reference: [29] <author> M. Grigni, E. Koutsoupias, and C. Papadimitriou, </author> <title> An approximation scheme for planar graph TSP, </title> <booktitle> Proc. 36st Ann. IEEE Symp. on the Foundation of Computer Science, </booktitle> <year> (1995), </year> <note> to appear. </note>
Reference: [30] <author> D. S. Hochbaum, </author> <title> Approximation algorithms for the set covering and vertex cover problems, </title> <journal> SIAM Journal on Computing 3, </journal> <year> (1982), </year> <pages> pp. 555-556. </pages>
Reference: [31] <author> D. S. Hochbaum and D. B. Shmoys, </author> <title> Using dual approximation algorithms for scheduling problems: theoretical and practical results, </title> <journal> Journal of ACM 34, </journal> <year> (1987), </year> <pages> pp. 144-162. </pages>
Reference: [32] <author> D. S. Hochbaum and D. B. Shmoys, </author> <title> A polynomial approximation scheme for scheduling on uniform processors: using the dual approximation approach, </title> <journal> SIAM Journal on Computing 17, </journal> <year> (1988), </year> <pages> pp. 539-551. </pages>
Reference: [33] <author> I. Holyer, </author> <title> The NP-completeness of edge coloring, </title> <journal> SIAM Journal on Computing 10, </journal> <year> (1981), </year> <pages> pp. 718-720. </pages>
Reference: [34] <author> J. E. Hopcroft and R. M. Karp, </author> <title> A n 5=2 algorithm for maximum matching in bipartite graphs, </title> <journal> SIAM Journal on Computing 2, </journal> <year> (1973), </year> <pages> pp. 225-231. </pages>
Reference: [35] <author> O. H. Ibarra and C. E. Kim, </author> <title> Fast approximation algorithms for the knapsack and sum of subset problems, </title> <journal> Journal of ACM 22, </journal> <year> (1975), </year> <pages> pp. 463-468. </pages>
Reference: [36] <author> D. S. Johnson, </author> <title> Approximation algorithms for combinatorial problems, </title> <journal> Journal of Computer and System Sciences 9, </journal> <year> (1974), </year> <pages> pp. 256-278. </pages>
Reference: [37] <author> D. S. Johnson, </author> <title> The NP-completeness column: an ongoing guide, </title> <journal> Journal of Algorithms 13, </journal> <year> (1992), </year> <pages> pp. 502-524. </pages>
Reference: [38] <author> V. Kann, </author> <title> Maximum bounded 3-dimensional matching is MAX SNP-complete, </title> <journal> Information Processing Letters 37, </journal> <year> (1991), </year> <pages> pp. 27-35. </pages>
Reference: [39] <author> N. Karmakar, </author> <title> A new polynomial-time algorithm for linear programming, </title> <type> Combinatorica 4, </type> <year> (1984), </year> <pages> pp. 373-395. </pages>
Reference: [40] <author> N. Karmakar and R. M. Karp, </author> <title> An efficient approximation scheme for the one-dimensional bin packing problem, </title> <booktitle> Proc. 23rd Ann. IEEE Symp. on Foundation of Computer Science, </booktitle> <year> (1982), </year> <pages> pp. 312-320. </pages>
Reference: [41] <author> D. Karger, R. Motwani, and G. D. S. Ramkumar, </author> <title> On approximating the longest path in a graph, </title> <booktitle> Lecture Notes in Computer Science 709, </booktitle> <year> (1993), </year> <pages> pp. 421-432. </pages>
Reference: [42] <author> A. V. Karzanov, </author> <title> Determining the maximum flow in the network with the method of preflows, </title> <journal> Soviet Math. Dokl. </journal> <volume> 15, </volume> <year> (1974), </year> <pages> pp. 434-437. </pages>
Reference: [43] <author> S. Khanna, R. Motwani, M. Sudan, and U. Vazirani, </author> <title> On syntactic versus computational views of approximability, </title> <booktitle> Proc. 35th Ann. IEEE Symp. on Foundation of Computer Science, </booktitle> <year> (1994), </year> <pages> pp. 819-836. </pages>
Reference: [44] <author> D. E. Knuth, </author> <title> The Art of Computer Programming. Volume III: Sorting and Searching, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1973. </year>
Reference: [45] <author> P. G. Kolaitis and M. N. Thakur, </author> <title> Logical definability of NP optimization problems, </title> <booktitle> Information and Computation 115, </booktitle> <year> (1994), </year> <pages> pp. 321-353. </pages>
Reference: [46] <author> P. G. Kolaitis and M. N. Thakur, </author> <title> Approximation properties of NP minimization classes, </title> <journal> Journal of Computer and System Sciences 50, </journal> <year> (1995), </year> <pages> pp. 391-411. </pages>
Reference: [47] <author> E. L. Lawler, </author> <title> Combinatorial Optimization: Networks and Matroids, </title> <publisher> Holt, </publisher> <address> Rinehart&Winston, </address> <year> 1976. </year> <month> 229 </month>
Reference: [48] <author> H. W. Lenstra, </author> <title> Integer programming with a fixed number of vari-ables, </title> <note> Mathematics of Operations Research 8, </note> <year> (1983), </year> <pages> pp. 538-548. </pages>
Reference: [49] <author> R. J. Lipton and R. E. Tarjan, </author> <title> A separator theorem for planar graphs, </title> <journal> SIAM J. Appl. Math. </journal> <volume> 36, </volume> <year> (1979), </year> <pages> pp. 177-189. </pages>
Reference: [50] <author> R. J. Lipton and R. E. Tarjan, </author> <title> Applications of a planar separator theorem, </title> <journal> SIAM Journal on Computing 9, </journal> <year> (1980), </year> <pages> pp. 615-627. </pages>
Reference: [51] <author> C. Lund and M. Yannakakis, </author> <title> On the hardness of approximating minimization problems, </title> <journal> Journal of ACM 41, </journal> <year> (1994), </year> <pages> pp. 960-981. </pages>
Reference: [52] <author> S. Micali and V. V. Vazirani, </author> <title> An O( p jV j jEj) algorithm for finding maximum matching in general graphs, </title> <booktitle> Proc. 21st Ann. IEEE Symp. on the Foundation of Computer Science, </booktitle> <year> (1980), </year> <pages> pp. 17-27. </pages>
Reference: [53] <author> B. Monien, </author> <title> How to find long paths efficiently, </title> <journal> Annals of Discrete Mathematics 25, </journal> <year> (1985), </year> <pages> pp. 239-254. </pages>
Reference: [54] <author> R. Motwani, </author> <booktitle> Lecture Notes on Approximation algorithms, </booktitle> <institution> Dept. of Computer Science, Stanford University, </institution> <year> 1995. </year>
Reference: [55] <author> C. H. Papadimitriou, </author> <title> Combinatorial Complexity, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1993. </year>
Reference: [56] <author> C. H. Papadimitriou and K. Steiglitz, </author> <title> Combinatorial Optimization: Algorithms and Complexity, </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice Hall, </publisher> <year> 1982. </year>
Reference: [57] <author> C. H. Papadimitriou and M. Yannakakis, </author> <title> Optimization, approximation, and complexity classes, </title> <journal> Journal of Computer and System Sciences 43, </journal> <year> (1991), </year> <pages> pp. 425-440. </pages>
Reference: [58] <author> C. H. Papadimitriou and M. Yannakakis, </author> <title> The traveling salesman problem with distances one and two, </title> <note> Mathematics of Operations Research 18, </note> <year> (1993), </year> <pages> pp. 1-11. </pages>
Reference: [59] <author> C. H. Papadimitriou and M. Yannakakis, </author> <title> On limited nondeter-minism and the complexity of the V-C dimension, </title> <journal> Journal of Computer and System Sciences, </journal> <note> (1995), to appear. </note>
Reference: [60] <author> F. P. Preparata and M. I. Shamos, </author> <title> Computational Geometry: An Introduction, </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985. </year> <month> 230 </month>
Reference: [61] <author> S. Sahni, </author> <title> Algorithms for scheduling independent tasks, </title> <journal> Journal of ACM 23, </journal> <year> (1976), </year> <pages> pp. 116-127. </pages>
Reference: [62] <author> S. Sahni and T. Gonzalez, </author> <title> P-complete approximation problems, </title> <journal> Journal of ACM 23, </journal> <year> (1976), </year> <pages> pp. 555-565. </pages>
Reference: [63] <author> D. B. Shmoys, </author> <title> Computing near-optimal solutions to combinatorial optimization problems, </title> <booktitle> DIMACS Series in Discrete Mathematics, </booktitle> <year> (1995), </year> <note> to appear. </note>
Reference: [64] <author> V. G. Vizing, </author> <title> On an estimate of the chromatic class of a p-graph (in Russian), </title> <journal> Diskret. </journal> <volume> Analiz 3, </volume> <year> (1964), </year> <pages> pp. 23-30. </pages>
Reference: [65] <author> M. Yannakakis, </author> <title> On the approximation of maximum satisfiability, </title> <journal> Journal of Algorithms 17, </journal> <year> (1994), </year> <pages> pp. 475-502. </pages>
Reference: [66] <author> D. Zuckerman, </author> <title> On unapproximable versions of NP-complete problems, </title> <journal> SIAM Journal on Computing, </journal> <note> (1995), to appear. 231 </note>
References-found: 66

