URL: http://www-ai.ijs.si/DarkoZupanic/erk94.ps
Refering-URL: http://www-ai.ijs.si/DarkoZupanic/home.html
Root-URL: 
Email: E-mail: darko.zupanic@ijs.si  
Phone: Phone: (+386)(61) 1259 199 Fax: (+386)(61) 1258 058  
Title: Solving a job scheduling problem with CLP  
Author: Darko Zupanic 
Address: Jamova 39, 61000 Ljubljana, Slovenia  
Affiliation: Jozef Stefan Institute Artificial Intelligence Laboratory  
Abstract: Problems in various application areas can be formulated as scheduling problems. Therefore many efforts have been spent to find successful and efficient methods for solving this type of problems. The paper shows that a scheduling problem can be simply described as a set of constraints within which an optimal schedule solution must be found. Therefore a Constraint Logic Programming (CLP) approach is one of the most natural and promising ways of solving the scheduling problem. A difficult real-life example problem of job scheduling was successfully solved using CLP. The optimal problem solution was obtained by exhaustive search in a substantially constrainted space of admissible solutions. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Filipic, B.: </author> <title> Enhancing genetic search to schedule a production unit. </title> <editor> In B.Neumann, editor, </editor> <booktitle> Proceedings of the 10 th European Conference on Artificial Intelligence ECAI-92, Vienna, </booktitle> <pages> pp. 603-607, </pages> <year> 1992. </year>
Reference-contexts: The optimal problem solution was obtained by exhaustive search in a substantially con-strainted space of admissible solutions. 1 The problem is taken from the textile company Julon, Ljubljana, Slovenia. 2 A scheduling problem The scheduling problem described in <ref> [1, 2] </ref> can be divided into two parts. First, there are work environment constraints that determine the admissible schedule solutions. <p> A single execution took 15 seconds. The best schedule solution found spent 635 kWh of energy over the fixed limit, which is approximately 25 percent better than the hand-made schedules. These results are comparable with the results reported in <ref> [1, 2] </ref>, where the best schedule solutions found spent between 590 kWh and 600 kWh energy over the fixed limit. By using better heuristics in our CLP approach these results should easily be outperformed.
Reference: [2] <author> Zupanic, D.: </author> <title> Scheduling with Markovian neural networks. </title> <type> Technical report, </type> <note> IJS DP-E4 6830/93 (in Slovene), </note> <year> 1993. </year>
Reference-contexts: The optimal problem solution was obtained by exhaustive search in a substantially con-strainted space of admissible solutions. 1 The problem is taken from the textile company Julon, Ljubljana, Slovenia. 2 A scheduling problem The scheduling problem described in <ref> [1, 2] </ref> can be divided into two parts. First, there are work environment constraints that determine the admissible schedule solutions. <p> A single execution took 15 seconds. The best schedule solution found spent 635 kWh of energy over the fixed limit, which is approximately 25 percent better than the hand-made schedules. These results are comparable with the results reported in <ref> [1, 2] </ref>, where the best schedule solutions found spent between 590 kWh and 600 kWh energy over the fixed limit. By using better heuristics in our CLP approach these results should easily be outperformed.
Reference: [3] <author> Jaffar, J., Maher, M.J.: </author> <title> Constraint Logic Programming: A Survey. </title> <note> Final draft (Journal of Logic Programming: to appear), </note> <year> 1994. </year>
Reference-contexts: The difference between these two numbers is the amount of energy available for machine executions. A consumption greater than this available amount of energy is the cost of a schedule which has to be minimized. 3 Constraint Logic Programming The development of Constraint Logic Programming (CLP) <ref> [3] </ref> began as a natural merge of two declarative paradigms: constraint solving and logic programming. This combination helps to make CLP programs both expressive and flexible. From then on, CLP progressed in several directions, i.e. the early fundamental concepts have been adopted to better serve in different application areas.
Reference: [4] <author> Jaffar, J., Michaylov, S., Stuckey, P., Yap, R.: </author> <title> The CLP(R) Language and System. </title> <journal> ACM Transactions on Programming languages, </journal> <volume> 14(3), </volume> <pages> pp. 339-395, </pages> <year> 1992. </year>
Reference-contexts: For instance, Prolog is a CLP language where the constraints are equations over the algebra of terms (the Herbrand domain). The equations are implicit in the use of unification. On the other hand, CLP (R) <ref> [4] </ref> has linear arithmetic constraints and computes over real numbers. Nonlinear constraints are delayed until they become effectively linear. Other CLP systems, like DMCAI [5], CHIP [6], Prolog III [7], and LIFE [8], compute over Boolean domains, rational numbers domains, finite domains of integers, and order-sorted domains of feature trees.
Reference: [5] <author> Holzbaur, C.: </author> <title> DMCAI CLP 1.2. Manual documents, </title> <address> Edition 1.2, </address> <year> 1992. </year>
Reference-contexts: The equations are implicit in the use of unification. On the other hand, CLP (R) [4] has linear arithmetic constraints and computes over real numbers. Nonlinear constraints are delayed until they become effectively linear. Other CLP systems, like DMCAI <ref> [5] </ref>, CHIP [6], Prolog III [7], and LIFE [8], compute over Boolean domains, rational numbers domains, finite domains of integers, and order-sorted domains of feature trees. CLP applications can be broadly classified into two classes. First, CLP techniques are used for simple and clear representation of problems.
Reference: [6] <author> Dincbas, M., Van Hentenryck, P., Simonis, H., Ag-goun, A.: </author> <title> The Constraint Logic Programming Language CHIP. </title> <booktitle> Proceedings of the Second International Conference on Fifth Generation Computer Systems, </booktitle> <pages> pp. 249-264, </pages> <year> 1988. </year>
Reference-contexts: The equations are implicit in the use of unification. On the other hand, CLP (R) [4] has linear arithmetic constraints and computes over real numbers. Nonlinear constraints are delayed until they become effectively linear. Other CLP systems, like DMCAI [5], CHIP <ref> [6] </ref>, Prolog III [7], and LIFE [8], compute over Boolean domains, rational numbers domains, finite domains of integers, and order-sorted domains of feature trees. CLP applications can be broadly classified into two classes. First, CLP techniques are used for simple and clear representation of problems.
Reference: [7] <author> Colmerauer, A.: </author> <title> Prolog III Reference and Users Manual, </title> <note> Version 1.1. PrologIA, Marseilles, </note> <year> 1990. </year>
Reference-contexts: The equations are implicit in the use of unification. On the other hand, CLP (R) [4] has linear arithmetic constraints and computes over real numbers. Nonlinear constraints are delayed until they become effectively linear. Other CLP systems, like DMCAI [5], CHIP [6], Prolog III <ref> [7] </ref>, and LIFE [8], compute over Boolean domains, rational numbers domains, finite domains of integers, and order-sorted domains of feature trees. CLP applications can be broadly classified into two classes. First, CLP techniques are used for simple and clear representation of problems.
Reference: [8] <author> At-Kaci, H., Podelski, A.: </author> <title> Towards a Meaning of LIFE. </title> <journal> Journal of Logic Programming, </journal> <volume> 16: </volume> <pages> 195-234, </pages> <year> 1993. </year>
Reference-contexts: The equations are implicit in the use of unification. On the other hand, CLP (R) [4] has linear arithmetic constraints and computes over real numbers. Nonlinear constraints are delayed until they become effectively linear. Other CLP systems, like DMCAI [5], CHIP [6], Prolog III [7], and LIFE <ref> [8] </ref>, compute over Boolean domains, rational numbers domains, finite domains of integers, and order-sorted domains of feature trees. CLP applications can be broadly classified into two classes. First, CLP techniques are used for simple and clear representation of problems.
Reference: [9] <author> Van Hentenryck, P.: </author> <title> Constraint Satisfaction in Logic Programming. </title> <publisher> MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: Then an arbitrary solution for the second group operations must be found. Because the CLP (R) system does not provide a predicate such as minimize ( solve ( X1,...,XN, Cost ), BestCost ) we have implemented the first fail principle <ref> [9] </ref> search strategy, which is a very efficient method of exploring a search space. 5 Results Two experiments were performed. In the first experiment, heuristic search was used, and in the second experiment, we have tried to find an optimal solution to the problem.
Reference: [10] <author> Zupanic, D.: </author> <title> Job scheduling: A CLP approach. </title> <booktitle> Proceedings of the 16 th International Conference on Information Technology interfaces, Pula, Croatia, </booktitle> <pages> pp. 299-303, </pages> <year> 1994. </year>
Reference-contexts: In other words, we have managed to define the problem very quickly excluding almost every possibility of committing an error. On the other hand, searching for an optimal schedule solution was not that smooth <ref> [10] </ref>. The additional (redundant) constraints were obtained by detailed investigation of the search space. Again, CLP had a major role in the efficient and successful analysis. We have succeeded to reduce the entire search space from 10 49 possible solutions to 10 5 admissible solutions.
References-found: 10

