URL: http://www.cs.chalmers.se/pub/cs-reports/techreports/TR-69.ps.Z
Refering-URL: http://www.cs.chalmers.se/pub/cs-reports/techreports/
Root-URL: 
Title: A CALCULUS OF VALUE BROADCASTS  
Author: K. V. S. PRASAD 
Date: April 7, 1994  
Abstract: Computation can be modelled as a sequence of values, each broad cast by one agent and instantaneously audible to all those in parallel with it. Listening agents receive the value; others lose it. Subsystems interface via translators; these can scramble values and thus hide or restrict them. Examples show the calculus describing this model to be a powerful and natural programming tool. Weak bisimulation, a candidate for observational equivalence, is defined on the basis that receiving a value can be matched by losing it. 
Abstract-found: 1
Intro-found: 1
Reference: [Abr87] <author> Samson Abramsky. </author> <title> Observation equivalence as a testing equivalence. </title> <journal> Theoretical Computer Science, </journal> <volume> 53, </volume> <year> 1987. </year>
Reference-contexts: The advantage is that losses can be ignored in the reasoning (e.g., in Ex. 6 of Table 2). But are Laws 3 and 5 desirable? Characterising weak bisimulation as a testing equivalence <ref> [Abr87] </ref> would settle the issue formally. This is yet to be done. Table 2 is a start. 5. Channels, guards and sums Let i be patterns, and v= be the substitution that results from matching v against .
Reference: [AJ92] <author> Lennart Augustsson and Thomas Johnsson. </author> <title> Lazy ML user's manual. </title> <type> Technical report, </type> <institution> Department of Computer Science, Chalmers University of Technology, </institution> <year> 1992. </year>
Reference-contexts: Implementations. Several implementations for CBS exist [Pet93, Pra93b, Jon92]. Several examples, including those in this paper, have been run on them. All the implementations are small, and none need any change to the language they use, Lazy ML <ref> [AJ92] </ref>. That of [Pra93b] is less than two pages long, and seems capable of parallel implementation. It types the calculus simply but satisfactorily, within the ML type system. CBS thus compares well with the many other attempts [Hol83, GMP89, BMT92] to combine functional and concurrent programming. Message priority.
Reference: [BC91] <author> Kenneth Birman and Robert Cooper. </author> <title> The ISIS project: Real experience with a fault tolerant programming system. </title> <journal> Operating Systems Review, </journal> <volume> 25(2), </volume> <month> April </month> <year> 1991. </year>
Reference-contexts: CBS offers one. Algorithms. Broadcast has almost always been treated as something to be implemented rather than to be used. This is true of literature on hardware, on distributed systems and on algorithms. Even literature that describes it as a primitive <ref> [BC91] </ref> gives no examples of use. I had therefore re-invented the sorting algorithm in this paper, and several others, when I saw [HT92] and then discovered [YLC90] and [DK86]. This is clearly only a small field of research, but its neglect is sobering. 12 K. V. S. PRASAD Future work.
Reference: [BMT92] <author> Dave Berry, Robin Milner, and David Turner. </author> <title> A semantics for ML concurrency primitives. </title> <booktitle> In Symposium on Principles of Programming Languages. ACM, </booktitle> <year> 1992. </year>
Reference-contexts: That of [Pra93b] is less than two pages long, and seems capable of parallel implementation. It types the calculus simply but satisfactorily, within the ML type system. CBS thus compares well with the many other attempts <ref> [Hol83, GMP89, BMT92] </ref> to combine functional and concurrent programming. Message priority. CBS separates autonomous actions from controlled ones, rather than manufacture autonomous t 's out of controlled actions as in CCS. Because of this, a prioritised version of CBS is easy to develop [Pra93a].
Reference: [CH88] <author> Rance Cleaveland and Matthew Hennessy. </author> <title> Priorities in process algebras. </title> <booktitle> In Symposium on Logic in Computer Science. IEEE, </booktitle> <year> 1988. </year>
Reference-contexts: Message priority. CBS separates autonomous actions from controlled ones, rather than manufacture autonomous t 's out of controlled actions as in CCS. Because of this, a prioritised version of CBS is easy to develop [Pra93a]. This compares favourably with the difficulty of putting priority into CCS <ref> [CH88] </ref>. I/O Automata. Input/output automata [LT87] use a model of computation tan-talisingly similar to that of CBS. One difference is that I/O automata are input enabled. So are agents in [Pra93b], so that paper provides a process calculus formulation of I/O automata [Vaa91].
Reference: [DK86] <author> Rina Dechter and Leonard Kleinrock. </author> <title> Broadcast communications and distributed algorithms. </title> <journal> IEEE Trans. on Computers, </journal> <volume> 35(3):418, </volume> <month> Mar </month> <year> 1986. </year>
Reference-contexts: This is true of literature on hardware, on distributed systems and on algorithms. Even literature that describes it as a primitive [BC91] gives no examples of use. I had therefore re-invented the sorting algorithm in this paper, and several others, when I saw [HT92] and then discovered [YLC90] and <ref> [DK86] </ref>. This is clearly only a small field of research, but its neglect is sobering. 12 K. V. S. PRASAD Future work. More examples are needed to establish the applicability of CBS and to test whether the language of [Pra93b] suffices. A parallel implementation has to be explored.
Reference: [GMP89] <author> Alessandro Giacalone, Prateek Mishra, and Sanjeev Prasad. </author> <title> Facile: A symmetric integration of functional and concurrent programming. </title> <journal> International Journal of Parallel Programming, </journal> <volume> 18(2), </volume> <year> 1989. </year>
Reference-contexts: That of [Pra93b] is less than two pages long, and seems capable of parallel implementation. It types the calculus simply but satisfactorily, within the ML type system. CBS thus compares well with the many other attempts <ref> [Hol83, GMP89, BMT92] </ref> to combine functional and concurrent programming. Message priority. CBS separates autonomous actions from controlled ones, rather than manufacture autonomous t 's out of controlled actions as in CCS. Because of this, a prioritised version of CBS is easy to develop [Pra93a].
Reference: [Gro90] <author> J.F. Groote. </author> <title> Transition system specifications with negative premises. </title> <booktitle> In CONCUR '90, 1990. </booktitle> <publisher> Springer Verlag LNCS 458. </publisher>
Reference-contexts: Also, x? P t? =!. Replacing losses by the predicate "cannot receive a" yields essentially the same calculus. A transition system with negative premises is well defined if these can be derived first, independently of the positive transitions <ref> [Gro90] </ref>. Losses are similar. Proposition 3. The relation w: ! is independent of w 0 ! ! and v? !. Proposition 4. 8P , the set fw fi fi P w! !g is finite. Proof. By induction on the structure of P . There are only finite sums in CBS.
Reference: [Hen91] <author> Matthew Hennessy. </author> <title> A proof system for communicating processes with value-passing. </title> <journal> Formal Aspects of Computer Science, </journal> <volume> 3 </volume> <pages> 346-366, </pages> <year> 1991. </year>
Reference-contexts: For pure CBS, the proof is identical to that of [Mil89]; this reflects the fact that strong bisimulation ignores the communication model. Value passing CBS needs in addition an inference system for reasoning about data <ref> [Hen91] </ref>, but the process content of the proof is essentially the same. The standard form is P i=1 l X w i ! P i where each P i is also in standard form. By convention, the empty sum is 0. 6 K. V. S. PRASAD Proposition 12 (Expansion theorem).
Reference: [Hol83] <author> Soren Holmstrom. </author> <title> PFL: A functional language for parallel programming. </title> <type> Technical Report 7, </type> <institution> Dept. of Computer Sciences, Chalmers Univ. of Tech., </institution> <year> 1983. </year>
Reference-contexts: That of [Pra93b] is less than two pages long, and seems capable of parallel implementation. It types the calculus simply but satisfactorily, within the ML type system. CBS thus compares well with the many other attempts <ref> [Hol83, GMP89, BMT92] </ref> to combine functional and concurrent programming. Message priority. CBS separates autonomous actions from controlled ones, rather than manufacture autonomous t 's out of controlled actions as in CCS. Because of this, a prioritised version of CBS is easy to develop [Pra93a].
Reference: [HT92] <author> Tzung-Pei Hong and Shian-Shyong Tseng. </author> <title> Parallel perceptron learning on a single-channel broadcast communication model. </title> <journal> Parallel Computing, </journal> <volume> 18 </volume> <pages> 133-148, </pages> <year> 1992. </year>
Reference-contexts: This is true of literature on hardware, on distributed systems and on algorithms. Even literature that describes it as a primitive [BC91] gives no examples of use. I had therefore re-invented the sorting algorithm in this paper, and several others, when I saw <ref> [HT92] </ref> and then discovered [YLC90] and [DK86]. This is clearly only a small field of research, but its neglect is sobering. 12 K. V. S. PRASAD Future work. More examples are needed to establish the applicability of CBS and to test whether the language of [Pra93b] suffices.
Reference: [Jon92] <author> Simon Jones. </author> <title> Translating CBS to LML. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Stirling, </institution> <year> 1992. </year>
Reference-contexts: Shortage of space precludes a comparison of CCS and CBS. Please see [Pra91b]. [Pra91b] had no definition of weak bisimulation. This has now been defined, and produces testing results that justify describing as observational equivalence. Implementations. Several implementations for CBS exist <ref> [Pet93, Pra93b, Jon92] </ref>. Several examples, including those in this paper, have been run on them. All the implementations are small, and none need any change to the language they use, Lazy ML [AJ92]. That of [Pra93b] is less than two pages long, and seems capable of parallel implementation.
Reference: [LT87] <author> Nancy Lynch and Mark Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <type> Technical Report MIT/LCS/TR-387, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <year> 1987. </year>
Reference-contexts: CBS separates autonomous actions from controlled ones, rather than manufacture autonomous t 's out of controlled actions as in CCS. Because of this, a prioritised version of CBS is easy to develop [Pra93a]. This compares favourably with the difficulty of putting priority into CCS [CH88]. I/O Automata. Input/output automata <ref> [LT87] </ref> use a model of computation tan-talisingly similar to that of CBS. One difference is that I/O automata are input enabled. So are agents in [Pra93b], so that paper provides a process calculus formulation of I/O automata [Vaa91].
Reference: [Mil89] <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: 1. Introduction This paper presents a new version of a calculus of broadcasting systems, CBS [Pra91b], a CCS-like calculus <ref> [Mil89] </ref> with broadcast communication instead of handshake. No knowledge of older versions of CBS 1 is necessary, but familiarity with CCS will be helpful. [Pra91b] should be consulted for motivation of the communication model, discussion of design decisions, and comparison with CCS. 1.1. Preview. <p> It is now possible to state that P ~ Q implies x? P ~ x? Q. In fact, Proposition 9. ~ is a congruence for CBS Proof. By adapting the corresponding proof in <ref> [Mil89] </ref>. Definition 10. For any L V, if the transmissions w! of P and all its derivatives are such that w 2 L [ ft ! g then P has sort L, written P : L. <p> Axioms for finite agents. The equations 1 (a) and 1 (b) of Proposition 11 constitute a complete axiom system for strong bisimulation, as they do for CCS. For pure CBS, the proof is identical to that of <ref> [Mil89] </ref>; this reflects the fact that strong bisimulation ignores the communication model. Value passing CBS needs in addition an inference system for reasoning about data [Hen91], but the process content of the proof is essentially the same. <p> Table 2. Examples of testing for 6 4.2. Hennessy-Milner Logic. The modal characterisation theorem <ref> [Mil89] </ref> of weak bisimulation in terms of Hennessy-Milner Logic goes through with the follow-img definition of satisfaction for the hw] i operator. <p> This is close to Milner's specification <ref> [Mil89] </ref>. A CALCULUS OF VALUE BROADCASTS 9 The scheduler can be implemented as a set of cells A i , which schedule their respective wards and then wait for hDone; ii and hGo; i1i to happen in either order.
Reference: [Pet93] <author> Jenny Petersson. </author> <title> Tools for CBS. </title> <type> Licentiate thesis, </type> <institution> Department of Computer Science, Chalmers University of Technology, </institution> <year> 1993. </year> <note> In preparation. </note>
Reference-contexts: Shortage of space precludes a comparison of CCS and CBS. Please see [Pra91b]. [Pra91b] had no definition of weak bisimulation. This has now been defined, and produces testing results that justify describing as observational equivalence. Implementations. Several implementations for CBS exist <ref> [Pet93, Pra93b, Jon92] </ref>. Several examples, including those in this paper, have been run on them. All the implementations are small, and none need any change to the language they use, Lazy ML [AJ92]. That of [Pra93b] is less than two pages long, and seems capable of parallel implementation.
Reference: [Pra91a] <author> K. V. S. Prasad. </author> <title> Bisimulations induced by preorders on action sequences. </title> <booktitle> In Chalmers Workshop On Concurrency, </booktitle> <month> May </month> <year> 1991. </year>
Reference-contexts: Alternative definitions of . The weak bisimulation of <ref> [Pra91a] </ref> allows t 's only before a matching transmission, and none surrounding a matching response. then differs from the present relation in some cases (e.g., Laws 5 and 6 fail), but agrees in most.
Reference: [Pra91b] <author> K. V. S. Prasad. </author> <title> A calculus of broadcasting systems. </title> <booktitle> In TAPSOFT'91 Volume 1: CAAP, </booktitle> <address> April 1991. </address> <publisher> Springer Verlag LNCS 493. </publisher>
Reference-contexts: 1. Introduction This paper presents a new version of a calculus of broadcasting systems, CBS <ref> [Pra91b] </ref>, a CCS-like calculus [Mil89] with broadcast communication instead of handshake. No knowledge of older versions of CBS 1 is necessary, but familiarity with CCS will be helpful. [Pra91b] should be consulted for motivation of the communication model, discussion of design decisions, and comparison with CCS. 1.1. Preview. <p> 1. Introduction This paper presents a new version of a calculus of broadcasting systems, CBS <ref> [Pra91b] </ref>, a CCS-like calculus [Mil89] with broadcast communication instead of handshake. No knowledge of older versions of CBS 1 is necessary, but familiarity with CCS will be helpful. [Pra91b] should be consulted for motivation of the communication model, discussion of design decisions, and comparison with CCS. 1.1. Preview. CBS agents evolve by transmitting (i.e., broadcasting), receiving, or losing data values. <p> Broadcast, parallel computation, distributed computing, process cal culi, CCS, communicating processes, bisimulation, observational equivalence. Author's address: Department of Computer Sciences, Chalmers University of Technology, S 412 96 Gothenburg, Sweden. E-mail: prasad@cs.chalmers.se. Reference: This paper was presented at PARLE'93, Springer Verlag LNCS 694. 1 The version of <ref> [Pra91b] </ref> is referred to as Channelled CBS. The Patterned CBS that has been privately circulated is an intermediate version. 1 2 K. V. S. PRASAD Transmission is autonomous, while reception and loss are both responses to transmissions by the environment, and are therefore controlled. <p> V. S. PRASAD Channelled CBS <ref> [Pra91b] </ref> offers only the patterns ha; vi where a is a channel, and v a value. Pure CBS restricts further to patterns a; [Pra91b] interprets these traditionally as channels without values. <p> V. S. PRASAD Channelled CBS <ref> [Pra91b] </ref> offers only the patterns ha; vi where a is a channel, and v a value. Pure CBS restricts further to patterns a; [Pra91b] interprets these traditionally as channels without values. A better interpretation is that 3? P awaits a 3 on a single (unnamed) channel, and loses everything until then. Example 15. [Input guards] Below, X (3; P ) 3? P and Y 3? P + 4? Q. <p> This is an easy exercise, with the system settling down rapidly into a 4-state loop. 7. Conclusions, Related work, Future work <ref> [Pra91b] </ref> had ports (channels), input guards, summation, restriction/hiding distinct from translation, and dealt with value passing only by encoding to the pure calculus. These concepts, carried over from CCS, are foreign to the physical model underlying CBS. [Pra91b] therefore gave unsatisfactory accounts of hiding/restriction; worse, it failed to discover the programming <p> Conclusions, Related work, Future work <ref> [Pra91b] </ref> had ports (channels), input guards, summation, restriction/hiding distinct from translation, and dealt with value passing only by encoding to the pure calculus. These concepts, carried over from CCS, are foreign to the physical model underlying CBS. [Pra91b] therefore gave unsatisfactory accounts of hiding/restriction; worse, it failed to discover the programming power in CBS. This paper uses the natural model for broadcast that eludes [Pra91b], the single unnamed channel. This makes for elegance of notation: e! P and ? P . <p> These concepts, carried over from CCS, are foreign to the physical model underlying CBS. <ref> [Pra91b] </ref> therefore gave unsatisfactory accounts of hiding/restriction; worse, it failed to discover the programming power in CBS. This paper uses the natural model for broadcast that eludes [Pra91b], the single unnamed channel. This makes for elegance of notation: e! P and ? P . Channels are seen as special kinds of structured values, and Pure CBS as the sub-calculus that uses only constant patterns (3? P ). <p> It can handle problems, such as sorting, not tailor made for process calculi. More, it suggests a new paradigm of programming, though its range is unclear. [Pra93b] reports several other examples. Shortage of space precludes a comparison of CCS and CBS. Please see <ref> [Pra91b] </ref>. [Pra91b] had no definition of weak bisimulation. This has now been defined, and produces testing results that justify describing as observational equivalence. Implementations. Several implementations for CBS exist [Pet93, Pra93b, Jon92]. Several examples, including those in this paper, have been run on them. <p> It can handle problems, such as sorting, not tailor made for process calculi. More, it suggests a new paradigm of programming, though its range is unclear. [Pra93b] reports several other examples. Shortage of space precludes a comparison of CCS and CBS. Please see <ref> [Pra91b] </ref>. [Pra91b] had no definition of weak bisimulation. This has now been defined, and produces testing results that justify describing as observational equivalence. Implementations. Several implementations for CBS exist [Pet93, Pra93b, Jon92]. Several examples, including those in this paper, have been run on them.
Reference: [Pra93a] <author> K. V. S. Prasad. </author> <title> Broadcasting with priority. </title> <type> Technical report, </type> <institution> Department of Computer Science, Chalmers University of Technology, </institution> <year> 1993. </year>
Reference-contexts: Message priority. CBS separates autonomous actions from controlled ones, rather than manufacture autonomous t 's out of controlled actions as in CCS. Because of this, a prioritised version of CBS is easy to develop <ref> [Pra93a] </ref>. This compares favourably with the difficulty of putting priority into CCS [CH88]. I/O Automata. Input/output automata [LT87] use a model of computation tan-talisingly similar to that of CBS. One difference is that I/O automata are input enabled.
Reference: [Pra93b] <author> K. V. S. Prasad. </author> <title> Programming with broadcasts. </title> <type> Technical report, </type> <institution> Department of Computer Science, Chalmers University of Technology, </institution> <year> 1993. </year>
Reference-contexts: As with CCS, is often enough in practice, since specifications usually require a j context, not a + context. Further, if P Q then w! P c w! Q and x? P c x? Q. But most important are the developments of <ref> [Pra93b] </ref>, which suggest that c is a non-issue. <p> The agent P offers a better solution under a constraint: P ~ Y , but only if Q 0 ~ Q. Translating functions are specified by their graphs. They are taken to leave values unchanged except if otherwise specified. 5.1. A simplified CBS. <ref> [Pra93b] </ref>, which deals with an implementation of CBS, also replaces + by a guarded sum construct with the input pattern x? and a finite number of output guards. This permits loss and reception to be identified. The x? case end construct then approximates a sum of patterns up to ~. <p> Thus the absence of channels as a basic concept enables a smooth interface to functional programming. Other benefits are a natural generalisation to a higher order calculus (yet to be studied), and the formulation of hiding and restriction as translation to t , thus simplifying the calculus. <ref> [Pra93b] </ref>, as yet seen as experimental, completes the development, permitting only sums with one input summand, x? P , and a finite number of output summands. This permits loss and reception to be identified. is then defined exactly as for CCS, and is a congruence. <p> CBS is natural and powerful; it expresses concisely several programs that would be tedious in CCS. It can handle problems, such as sorting, not tailor made for process calculi. More, it suggests a new paradigm of programming, though its range is unclear. <ref> [Pra93b] </ref> reports several other examples. Shortage of space precludes a comparison of CCS and CBS. Please see [Pra91b]. [Pra91b] had no definition of weak bisimulation. This has now been defined, and produces testing results that justify describing as observational equivalence. Implementations. Several implementations for CBS exist [Pet93, Pra93b, Jon92]. <p> Shortage of space precludes a comparison of CCS and CBS. Please see [Pra91b]. [Pra91b] had no definition of weak bisimulation. This has now been defined, and produces testing results that justify describing as observational equivalence. Implementations. Several implementations for CBS exist <ref> [Pet93, Pra93b, Jon92] </ref>. Several examples, including those in this paper, have been run on them. All the implementations are small, and none need any change to the language they use, Lazy ML [AJ92]. That of [Pra93b] is less than two pages long, and seems capable of parallel implementation. <p> Implementations. Several implementations for CBS exist [Pet93, Pra93b, Jon92]. Several examples, including those in this paper, have been run on them. All the implementations are small, and none need any change to the language they use, Lazy ML [AJ92]. That of <ref> [Pra93b] </ref> is less than two pages long, and seems capable of parallel implementation. It types the calculus simply but satisfactorily, within the ML type system. CBS thus compares well with the many other attempts [Hol83, GMP89, BMT92] to combine functional and concurrent programming. Message priority. <p> This compares favourably with the difficulty of putting priority into CCS [CH88]. I/O Automata. Input/output automata [LT87] use a model of computation tan-talisingly similar to that of CBS. One difference is that I/O automata are input enabled. So are agents in <ref> [Pra93b] </ref>, so that paper provides a process calculus formulation of I/O automata [Vaa91]. A technical difference is that models of I/O automata use quiescent and fair traces, not bisimulation. Process calculi. <p> This is clearly only a small field of research, but its neglect is sobering. 12 K. V. S. PRASAD Future work. More examples are needed to establish the applicability of CBS and to test whether the language of <ref> [Pra93b] </ref> suffices. A parallel implementation has to be explored. Theoretical work includes the formulation of bisimulation as testing, efficient methods for checking bisimulation, axiomatisations, a study of higher order CBS and timed CBS, and the relation to other models such as I/O automata. Acknowledgements.
Reference: [Sjo91] <author> Peter Sjodin. </author> <title> From LOTOS specifications to distributed implementations. </title> <type> PhD thesis, </type> <institution> Uppsala University, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: So are agents in [Pra93b], so that paper provides a process calculus formulation of I/O automata [Vaa91]. A technical difference is that models of I/O automata use quiescent and fair traces, not bisimulation. Process calculi. The handshake model predominates overwhelmingly even though it appears incapable of distributed implementation <ref> [Sjo91] </ref> and is a low level primitive entailing very detailed code. Nor has it proved a fruitful paradigm for new algorithms. There is increasing willingness to look at other models. CBS offers one. Algorithms. Broadcast has almost always been treated as something to be implemented rather than to be used.
Reference: [Vaa91] <author> Frits Vaandrager. </author> <title> On the relationship between process algebra and input/output automata. </title> <booktitle> 6th Annual Symposium on Logic in Computer Science, </booktitle> <year> 1991. </year>
Reference-contexts: I/O Automata. Input/output automata [LT87] use a model of computation tan-talisingly similar to that of CBS. One difference is that I/O automata are input enabled. So are agents in [Pra93b], so that paper provides a process calculus formulation of I/O automata <ref> [Vaa91] </ref>. A technical difference is that models of I/O automata use quiescent and fair traces, not bisimulation. Process calculi. The handshake model predominates overwhelmingly even though it appears incapable of distributed implementation [Sjo91] and is a low level primitive entailing very detailed code.
Reference: [YLC90] <author> Chang-Biau Yang, R. C. T. Lee, and Wen-Tsuen Chen. </author> <title> Parallel graph algorithms based upon broadcast communications. </title> <journal> IEEE Trans. on Computers, </journal> <volume> 39(12):1468, </volume> <month> Dec </month> <year> 1990. </year>
Reference-contexts: This is true of literature on hardware, on distributed systems and on algorithms. Even literature that describes it as a primitive [BC91] gives no examples of use. I had therefore re-invented the sorting algorithm in this paper, and several others, when I saw [HT92] and then discovered <ref> [YLC90] </ref> and [DK86]. This is clearly only a small field of research, but its neglect is sobering. 12 K. V. S. PRASAD Future work. More examples are needed to establish the applicability of CBS and to test whether the language of [Pra93b] suffices. A parallel implementation has to be explored.
References-found: 22

