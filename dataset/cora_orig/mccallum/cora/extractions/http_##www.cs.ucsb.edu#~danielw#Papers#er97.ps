URL: http://www.cs.ucsb.edu/~danielw/Papers/er97.ps
Refering-URL: http://www.cs.ucsb.edu/~danielw/Papers/publications.html
Root-URL: http://www.cs.ucsb.edu
Email: ambujg@cs.ucsb.edu  
Title: A Java-Based Framework for Processing Distributed Objects  
Author: Daniel Wu Divyakant Agrawal Amr El Abbadi Ambuj Singh fdanielw, agrawal, amr, 
Keyword: Data Store items.  
Address: Santa Barbara  
Affiliation: Department of Computer Science University of California,  
Abstract: The Alexandria Digital Library Project at UC Santa Bar-bara has been building an information retrieval system for geographically-referenced information and datasets. To meet these requirements, we have designed a distributed Data Store to store its holdings. The library's map, image and geographical data are viewed as a collection of objects with evolving roles. Developed in the Java programming language and the HORB distributed object system, the Data Store manages these objects for flexible and scalable processing. To implement the Data Store we provide a messaging layer that allows applications to distribute processing between the Data Store and the local host. We define a data model for Data Store repositories that provide Client access to Data Store objects. We finally provide support for specialized views of these 
Abstract-found: 1
Intro-found: 1
Reference: [AG96] <author> Ken Arnold and James Gosling. </author> <title> The Java Programming Language. </title> <publisher> Prentice-Hall, </publisher> <address> Reading, Mass., </address> <year> 1996. </year>
Reference-contexts: Providing this capability, though, forces many requirements upon the system. The receiver must be able to run the sender's object code, thus fixing the binary and run-time executable for the object implementation across disseparate machines. To achieve platform independence, we have chosen Java <ref> [AG96] </ref> as our implementation language because both its byte-code and Java Virtual Machine are designed to be machine-independent. Programming in Java adds a virtual programming layer upon the native operating environment.
Reference: [Cor97] <author> Microsoft Corp. </author> <title> Automation Programmer's Reference : Using ActiveX Technology to Create Programmable Applications. </title> <publisher> Microsoft Press, </publisher> <year> 1997. </year>
Reference-contexts: 1 Introduction In recent years, the need for distributed computing has spurred the introduction of distributed object packages such as CORBA [Sie96], COM [Rog97], and ActiveX <ref> [Cor97] </ref>. While these object systems provide access to remote objects they are limited in how they distribute processing and dynamically extend services.
Reference: [Rob95] <author> Arthur H. Robinson. </author> <title> Elements of Cartography. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: a DispatchMessage except that the execution takes place at the Client's site rather than at the Server site. 4 Dynamic Object Access As geographical information constitutes the bulk of data in the Alexandria Digital Library, most of the objects that we encounter in the Data Store model geographical data types <ref> [Rob95] </ref>. We now describe the Data Store repository, which provides a dynamic and extensible type system for objects in the Data Store collection. Fig. 3. DataStore Class Hierarchy To motivate the discussion, we use as an example the class hierarchy of Figure 3.
Reference: [Rog97] <author> Dale Rogerson. </author> <title> Inside COM. </title> <publisher> Microsoft Press, </publisher> <year> 1997. </year>
Reference-contexts: 1 Introduction In recent years, the need for distributed computing has spurred the introduction of distributed object packages such as CORBA [Sie96], COM <ref> [Rog97] </ref>, and ActiveX [Cor97]. While these object systems provide access to remote objects they are limited in how they distribute processing and dynamically extend services.
Reference: [RS91] <author> Joel Richardson and Peter Schwarz. </author> <title> Aspects: Extending object to support multiple independent roles. </title> <booktitle> In Proc. ACM SIGMOD Int. Conf. on Management of Data, </booktitle> <pages> pages 298-307, </pages> <month> May </month> <year> 1991. </year>
Reference-contexts: In addition, the Java programming architecture is standardized so that Java objects may be serialized into portable byte-code using JDK 1.1's Object Serializer [RWW96]. The choice of Java thus addresses many of the platform compatibility issues raised in implementing a distributed system. 2.2 Object Extensibility Object roles and behavior <ref> [RS91] </ref> in a digital library evolve over time, and may need to be individually tailored to specific user requirements. Hence a distributed digital library must provide some means of dynamically extending an object's functionality.
Reference: [RWW96] <author> R. Riggs, J. Waldo, and A. Wollrath. </author> <title> Pickling state in java. </title> <booktitle> In 2nd Conf. on Object-Oriented Technologies and Systems (COOTS), </booktitle> <pages> pages 241-250, </pages> <address> Toronto, Ontario, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Programming in Java adds a virtual programming layer upon the native operating environment. In addition, the Java programming architecture is standardized so that Java objects may be serialized into portable byte-code using JDK 1.1's Object Serializer <ref> [RWW96] </ref>. The choice of Java thus addresses many of the platform compatibility issues raised in implementing a distributed system. 2.2 Object Extensibility Object roles and behavior [RS91] in a digital library evolve over time, and may need to be individually tailored to specific user requirements.
Reference: [Sat96] <author> HIRANO Satoshi. </author> <title> The Magic Carpet for Network Computing: HORB Flyer's Guide. </title> <institution> Electrotechnical Laboratory, </institution> <note> http://ring.etl.go.jp/openlab/horb, 1996. </note>
Reference-contexts: Rather, the message implements its own functionality, since it is an actual object. The Data Store server need only dispatch the message. We have developed our Messaging layer in Java and a distributed programming package called HORB <ref> [Sat96] </ref>, that provides the basic remote invocation services between Client and Server; other applicable distributed programming packages for Java include RMI (Remote Method Invocation) [WRW96], and CORBA (Common Object Request Broker Architecture)[Sie96]. Fig. 2. Message Class Hierarchy sent from Client to Server.
Reference: [Sie96] <author> Jon Siegal. </author> <title> CORBA: Fundamentals and Programming. </title> <publisher> Wiley, </publisher> <year> 1996. </year>
Reference-contexts: 1 Introduction In recent years, the need for distributed computing has spurred the introduction of distributed object packages such as CORBA <ref> [Sie96] </ref>, COM [Rog97], and ActiveX [Cor97]. While these object systems provide access to remote objects they are limited in how they distribute processing and dynamically extend services.
Reference: [Smi96] <author> T.R. Smith. </author> <title> A digital library for geographically referenced materials. </title> <booktitle> IEEE Computer, </booktitle> <pages> pages 54-60, </pages> <month> May </month> <year> 1996. </year>
Reference: [Sto86] <author> Michael Stonebraker. </author> <title> Object management in postgres using procedures. </title> <booktitle> In 1986 International Workshop on Object-Oriented Database Systems, </booktitle> <pages> pages 66-72, </pages> <address> Pacific Grove, Calif., </address> <month> September </month> <year> 1986. </year>
Reference-contexts: In designing this data model, we have provided a schema that adheres to a relational model, in order to facilitate storage in a relational DBMS. Other approaches to decomposing and mapping objects into relational databases have been explored in Postgres <ref> [Sto86] </ref>. By providing the basic structure and methods of the Data Store in terms of a DBMS that allows Clients to dynamically execute methods, we no longer need a statically defined proxy for each object in the Data Store.
Reference: [Sun97] <author> Sun Microsystems, Inc., </author> <title> http://java.sun.com/products/jdk/1.1/docs/guide /reflection/index.html. Java Core Reflection API and Specification, </title> <year> 1997. </year>
Reference-contexts: The ExecutableMessage then performs some operation upon the object. The operation can either be a class method of the object (in which case, the Java Reflections Package <ref> [Sun97] </ref> is employed to invoke the particular method), or the method can be some external method that extends the object's functionality.
Reference: [WRW96] <author> A. Wollrath, R. Riggs, and J. Waldo. </author> <title> A distributed object model for java. </title> <booktitle> In 2nd Conf. on Object-Oriented Technologies and Systems (COOTS), </booktitle> <pages> pages 219-231, </pages> <address> Toronto, Ontario, </address> <month> June </month> <year> 1996. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The Data Store server need only dispatch the message. We have developed our Messaging layer in Java and a distributed programming package called HORB [Sat96], that provides the basic remote invocation services between Client and Server; other applicable distributed programming packages for Java include RMI (Remote Method Invocation) <ref> [WRW96] </ref>, and CORBA (Common Object Request Broker Architecture)[Sie96]. Fig. 2. Message Class Hierarchy sent from Client to Server. At the root of the hierarchy is the Message object. Different types of objects are derived from Message, namely, QueryMessages, AdminMessages, and ExecutableMessages.
References-found: 12

