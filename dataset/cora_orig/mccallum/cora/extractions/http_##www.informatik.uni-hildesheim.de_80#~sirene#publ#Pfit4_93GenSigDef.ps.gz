URL: http://www.informatik.uni-hildesheim.de:80/~sirene/publ/Pfit4_93GenSigDef.ps.gz
Refering-URL: http://www.informatik.uni-hildesheim.de:80/~sirene/lit/sirene.lit.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: pfitzb@informatik.uni-hildesheim.de  
Title: Sorting Out Signature Schemes signature schemes are best defined by a separation of service, structure,
Author: Birgit Pfitzmann 
Address: Marienburger Platz 22, D-31141 Hildesheim, Germany  
Affiliation: Universitt Hildesheim, Institut fr Informatik,  
Date: 1993 74  
Note: 1st ACM Conference on Computer and Communications Security, Fairfax, acm press  It turns out that  are discussed.  
Abstract: Digital signature schemes are a fundamental tool for secure distributed systems. It is important to have a formal notion of what a secure digital signature scheme is, so that there is a clear interface between designers and users of such schemes. A definition that seemed final was given by Goldwasser, Micali, and Rivest in 1988, and although most signature schemes used in practice cannot be proved secure with respect to it, they are all built so that they hopefully fulfil it, e.g., by the inclusion of hash functions or redundancy to counter active attacks. Recently, however, several signature schemes with new security properties have been presented. Most of them exist in several variants, and some of them pay for the new properties with restrictions in other respects, whose relation is not always clear. Obviously, these new properties need definitions and some classification. Unfortunately, however, none of the new schemes is covered by the definition mentioned above. Hence the new properties cannot be defined as additions, but each new type of scheme needs a new definition from scratch, although there are similarities between the definitions. This is unsatisfactory. This paper presents (an overview of) a general definition of digital signature schemes that covers all known schemes, and hopefully all that might be invented in future. Additional properties of special types of schemes are then presented in an orthogonal way, so that existing schemes can be classified systematically. 
Abstract-found: 1
Intro-found: 1
Reference: [AT91] <author> M. Abadi, M. Tuttle: </author> <title> A Semantics for a Logic of Authentication; 10th PoDC, </title> <publisher> acm press, </publisher> <address> New York 1991, </address> <pages> 201-216. </pages>
Reference-contexts: In [LABW92], e.g., integrity is still assumed to be provided by a variant of an encryption scheme, which is a structure that most signature schemes definitely do not have. * If logics of authentication have a formal semantics, not the real cryptologic schemes are used, but algebraic abstractions <ref> [DY81, AT91] </ref>. Hence, if one finds an error with the logic, there was an error in the real protocol, but if one proves the algebraic abstraction to be secure, one is not sure that the real protocol is secure, too. Here, the real signature schemes are the semantics.
Reference: [B91] <author> D. Beaver: </author> <title> Secure Multiparty Protocols and Zero Knowledge Proof Systems Tolerating a Faulty Minority; J. </title> <note> Cryptology 4/2 (1991) 75-122. </note>
Reference-contexts: (Note that no knowledge of these approaches is assumed in the later sections.) 3.1 Relation to Secure MultiParty Computation Protocols Deriving a cryptologic definition from an ideal service specification is new with signature schemes, but it is known with multiparty function computation, starting with [Y82]. (Overviews can be found in <ref> [B91, MR91, FGY92] </ref>.) However, existing definitions were not general enough to be used for signature schemes. (This is no criticism they go much further in other directions.) The following new features were needed: Logic specification. The services of different types of signature schemes are similar, but not identical.
Reference: [BAN89] <author> M. Burrows, M. Abadi, R. Needham: </author> <title> A Logic of Authentication; ACM Operating Systems Review 23/5 (1989) 1-13. </title>
Reference-contexts: the participants, which may be handheld computers in pockets, have so many dedicated channels, and the channels are not necessarily secure this is part of the reason to use signatures. 3.2 Relation to BAN Logic Logic specification of signature schemes may sound rather similar to the logics of authentication from <ref> [BAN89] </ref> and many successive papers. However, there are several differences in the purpose and consequently in the approach. This is natural, since these logics were primarily designed to find errors in key exchange protocols with symmetric cryptosystems, which they do successfully.
Reference: [BC92] <author> J. Bos, D. Chaum: </author> <title> Provably Unforgeable Signatures; Crypto '92, </title> <booktitle> Abstracts, </booktitle> <address> Santa Barbara 1992, 1.1-1.8. </address>
Reference-contexts: In another example, there is a trusted public random value in addition to the public keys <ref> [BC92] </ref>.
Reference: [BCDP91] <author> J. Boyar, D. Chaum, I. Damgfird, T. Pedersen: </author> <title> Convertible Undeniable Signatures; Crypto '90, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin 1991, </address> <pages> 189-205. </pages>
Reference-contexts: For instance, there are failstop signature schemes, where a signer who has been cheated with a forged signature can prove that it was a forgery [BPW91, P91, HP92, HPP92]. A different example is socalled undeniable signature schemes <ref> [CA90, C91, BCDP91] </ref>.
Reference: [BPW91] <author> G. Bleumer, B. Pfitzmann, M. Waidner: </author> <title> A remark on a signature scheme where forgery can be proved; Eurocrypt '90, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin 1991, </address> <pages> 441-445. </pages>
Reference-contexts: For instance, there are failstop signature schemes, where a signer who has been cheated with a forged signature can prove that it was a forgery <ref> [BPW91, P91, HP92, HPP92] </ref>. A different example is socalled undeniable signature schemes [CA90, C91, BCDP91].
Reference: [C91] <author> D. Chaum: </author> <title> Zero-knowledge undeniable signatures; Eurocrypt '90, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin 1991, </address> <pages> 458-464. </pages>
Reference-contexts: For instance, there are failstop signature schemes, where a signer who has been cheated with a forged signature can prove that it was a forgery [BPW91, P91, HP92, HPP92]. A different example is socalled undeniable signature schemes <ref> [CA90, C91, BCDP91] </ref>.
Reference: [CA90] <author> D. Chaum, H. van Antwerpen: </author> <title> Undeniable signatures; Crypto '89, </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg 1990, </address> <pages> 212-216. </pages>
Reference-contexts: For instance, there are failstop signature schemes, where a signer who has been cheated with a forged signature can prove that it was a forgery [BPW91, P91, HP92, HPP92]. A different example is socalled undeniable signature schemes <ref> [CA90, C91, BCDP91] </ref>.
Reference: [CHP92] <author> D. Chaum, E. v. Heijst, B. Pfitzmann: </author> <title> Cryptographically Strong Undeniable Signatures, Unconditionally Secure for the Signer; Crypto '91, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin 1992, </address> <pages> 470-484. </pages>
Reference-contexts: A third example is undeniable signature schemes where signers can unconditionally deny forged signatures, which is a slightly restricted failstop property <ref> [CHP92] </ref>. This situation alone might call for some classification. However, it would not be too bad if all these schemes were signature schemes in the sense of the GMR definition with some additional properties. <p> Dual security is the other way round: The requirement of the signer on disputes holds information-theoretically and that of the recipient computationally, as in <ref> [CHP92] </ref>. (Note that it is now very easy to describe this degree of security and its difference to failstop security, which it wasnt before.) Unconditional security means that both requirements on disputes hold information-theoretically.
Reference: [CR91] <author> D. Chaum, S. Roijakkers: </author> <title> Unconditionally Secure Digital Signatures; Crypto '90, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin 1991, </address> <pages> 206-214. </pages>
Reference-contexts: There are even unconditionally secure signature schemes, where even an adversary with unlimited computing power cannot produce forgeries better than by using a random number and hoping that it is the signature <ref> [CR91, PW92] </ref>. However, unconditionally secure signature schemes seem to be impractical, in contrast to failstop and undeniable ones. All these new schemes exist in several variants with different properties.
Reference: [D84] <author> D. E. Denning: </author> <title> Digital Signatures with RSA and Other Public-Key Cryptosystems; CACM 27/4 (1984) 388-392. </title>
Reference-contexts: Moreover, it was originally overlooked that adversaries might try to compute new signatures from given signatures, in particular with RSA <ref> [RSA78, D84] </ref>. Hence it was very satisfactory that a definition that seemed final was given in [GMR88]. It allows the scheme to consist of an arbitrary key generation algorithm, an arbitrary signing algorithm, and an arbitrary test algorithm.
Reference: [DH76] <author> W. Diffie, M. </author> <title> Hellman: </title> <journal> New Directions in Cryptography; IEEE Trans. Inform. </journal> <note> Theory 22/6 (1976) 644-654. </note>
Reference-contexts: The first informal definition by Diffie and Hellman saw signature schemes just as a form of encryption schemes used in an inverse way, but nowadays many schemes, e.g., the proposed NIST digital signature standard, are not of this form <ref> [DH76, DSS92] </ref>. Moreover, it was originally overlooked that adversaries might try to compute new signatures from given signatures, in particular with RSA [RSA78, D84]. Hence it was very satisfactory that a definition that seemed final was given in [GMR88].
Reference: [DSS92] <institution> The Digital Signature Standard Proposed by NIST; CACM 35/7 (1992) 36-40. </institution>
Reference-contexts: The first informal definition by Diffie and Hellman saw signature schemes just as a form of encryption schemes used in an inverse way, but nowadays many schemes, e.g., the proposed NIST digital signature standard, are not of this form <ref> [DH76, DSS92] </ref>. Moreover, it was originally overlooked that adversaries might try to compute new signatures from given signatures, in particular with RSA [RSA78, D84]. Hence it was very satisfactory that a definition that seemed final was given in [GMR88]. <p> cannot be proved secure with respect to it: They are all designed so that one can at least hope that they fulfil it, e.g., by the inclusion of hash functions or redundancy to counter active attacks, such as in the proposed NIST digital signature standard or in ISO standardization activities <ref> [DSS92, GQ91, ISO91] </ref>. Note that hash functions or redundancy have to be considered parts of the signature scheme if one wants to provide a common interface to applications.
Reference: [DY81] <author> D. Dolev, A. Yao: </author> <title> On the Security of Public Key Protocols; FOCS 1981, </title> <publisher> IEEE Computer Society, </publisher> <year> 1981, </year> <pages> 350-357. </pages>
Reference-contexts: In [LABW92], e.g., integrity is still assumed to be provided by a variant of an encryption scheme, which is a structure that most signature schemes definitely do not have. * If logics of authentication have a formal semantics, not the real cryptologic schemes are used, but algebraic abstractions <ref> [DY81, AT91] </ref>. Hence, if one finds an error with the logic, there was an error in the real protocol, but if one proves the algebraic abstraction to be secure, one is not sure that the real protocol is secure, too. Here, the real signature schemes are the semantics.
Reference: [FGY92] <author> M. Franklin, Z. Galil, M. Yung: </author> <title> An Overview of Secure Distributed Computing; Columbia University, </title> <institution> Dep. of Computer Science, TR CUCS-008-92, </institution> <month> March 24, </month> <year> 1992. </year>
Reference-contexts: (Note that no knowledge of these approaches is assumed in the later sections.) 3.1 Relation to Secure MultiParty Computation Protocols Deriving a cryptologic definition from an ideal service specification is new with signature schemes, but it is known with multiparty function computation, starting with [Y82]. (Overviews can be found in <ref> [B91, MR91, FGY92] </ref>.) However, existing definitions were not general enough to be used for signature schemes. (This is no criticism they go much further in other directions.) The following new features were needed: Logic specification. The services of different types of signature schemes are similar, but not identical.
Reference: [GMR88] <author> S. Goldwasser, S. Micali, R. Rivest: </author> <title> A Digital Signature Scheme Secure Against Adaptive Chosen-Message Attacks; SIAM J. </title> <institution> Comput. </institution> <month> 17/2 </month> <year> (1988) </year> <month> 281-308. </month>
Reference-contexts: Moreover, it was originally overlooked that adversaries might try to compute new signatures from given signatures, in particular with RSA [RSA78, D84]. Hence it was very satisfactory that a definition that seemed final was given in <ref> [GMR88] </ref>. It allows the scheme to consist of an arbitrary key generation algorithm, an arbitrary signing algorithm, and an arbitrary test algorithm. Hence it seemed that all signature schemes would be of this form, in 75 contrast to the Diffie-Hellman definition. <p> Influence of attackers on honest users. Sequences of interface events are produced by interaction of the system with arbitrary users. Even honest users who are interested parties may be influenced by the attacker, e.g., in the choice of messages they authenticate. This corresponds to the active attacks of <ref> [GMR88] </ref>. In more general signature schemes, active attacks on recipients and third parties are also possible and dangerous (because all entities may have secret information this was originally overlooked with unconditionally secure schemes). The most general active attack on any reactive system is shown in Figures 2 and 3.
Reference: [GMW87] <author> O. Goldreich, S. Micali, A. Wigderson: </author> <title> How to play any mental game - or - a completeness theorem for protocols with honest majority; STOC 1987, </title> <publisher> ACM, </publisher> <address> New York 1987, </address> <pages> 218-229. </pages>
Reference-contexts: Signature schemes, however, yield reactive systems: They can go on (polynomially) forever, and at any time users can decide what messages they want to sign or what disputes to carry out. (An informal sketch of more general games exists in <ref> [GMW87] </ref>; if they were formalized, they might be nearer to signature schemes in this respect.) Varying connections. Usual multiparty protocols assume fixed connections throughout a protocol run, 77 usually reliable point-to-point channels between each pair of participants and reliable broadcast channels.
Reference: [GQ91] <author> L. C. Guillou, J.-J. Quisquater: </author> <title> Precautions taken against various potential attacks in ISO/IEC DIS 9796; Eurocrypt '90, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin 1991, </address> <pages> 465-473. </pages>
Reference-contexts: cannot be proved secure with respect to it: They are all designed so that one can at least hope that they fulfil it, e.g., by the inclusion of hash functions or redundancy to counter active attacks, such as in the proposed NIST digital signature standard or in ISO standardization activities <ref> [DSS92, GQ91, ISO91] </ref>. Note that hash functions or redundancy have to be considered parts of the signature scheme if one wants to provide a common interface to applications.
Reference: [HP92] <author> E. van Heyst, </author> <title> T.P. Pedersen: How to make efficient failstop signatures; Eurocrypt '92, </title> <publisher> Springer-Verlag, </publisher> <address> Berlin 1993, </address> <pages> 366-377 </pages>
Reference-contexts: For instance, there are failstop signature schemes, where a signer who has been cheated with a forged signature can prove that it was a forgery <ref> [BPW91, P91, HP92, HPP92] </ref>. A different example is socalled undeniable signature schemes [CA90, C91, BCDP91].
Reference: [HPP92] <author> E. van Heijst, T.P. Pedersen, B. Pfitzmann: </author> <title> New Constructions of FailStop Signatures and Lower Bounds; Crypto '92, </title> <type> Abstracts, </type> <institution> Santa Barbara, </institution> <month> August </month> <year> 1992, </year> <month> 1.9-1.14. </month>
Reference-contexts: For instance, there are failstop signature schemes, where a signer who has been cheated with a forged signature can prove that it was a forgery <ref> [BPW91, P91, HP92, HPP92] </ref>. A different example is socalled undeniable signature schemes [CA90, C91, BCDP91].
Reference: [ISO91] <author> ISO (International Organization for Standardization): </author> <title> Digital signature scheme giving message recovery; International Standard ISO/IEC 9796, </title> <note> Preliminary edition 1991-04-22. </note>
Reference-contexts: cannot be proved secure with respect to it: They are all designed so that one can at least hope that they fulfil it, e.g., by the inclusion of hash functions or redundancy to counter active attacks, such as in the proposed NIST digital signature standard or in ISO standardization activities <ref> [DSS92, GQ91, ISO91] </ref>. Note that hash functions or redundancy have to be considered parts of the signature scheme if one wants to provide a common interface to applications.
Reference: [L83] <author> P. Linington: </author> <title> Fundamentals of the Layer Service Definitions and Protocol Specifications; Proc. </title> <note> IEEE 71/12 (1983) 1341-1345. </note>
Reference-contexts: This is entirely normal with service specification in the field of distributed systems (e.g., <ref> [L83] </ref>), but unusual in cryptology. Interface with three access points (Users) Entities Connections System Object of a service specification: Sequences of events here The entities, in our case, correspond to processes running on the behalf of individual users.
Reference: [LABW92] <author> B. Lampson, M. Abadi, M. Burrows, E. Wobber: </author> <title> Authentication in Distributed Systems: </title> <journal> Theory and Practice; ACM Trans. Comput. Syst. </journal> <month> 10/4 </month> <year> (1992) </year> <month> 265-310. </month>
Reference-contexts: Logics of authentication assume very simple cryptologic primitives; hence they deal with individual algorithms and keys of those schemes. Hence a new type of logic would be needed for each new type of signature scheme, just as with current cryptologic definitions. In <ref> [LABW92] </ref>, e.g., integrity is still assumed to be provided by a variant of an encryption scheme, which is a structure that most signature schemes definitely do not have. * If logics of authentication have a formal semantics, not the real cryptologic schemes are used, but algebraic abstractions [DY81, AT91].
Reference: [MP91] <author> Z. Manna, A. Pnueli: </author> <title> The Temporal Logic of Reactive and Concurrent Systems Specification ; Springer-Verlag, </title> <address> New York 1991 </address>
Reference-contexts: not bother with scheduling. 4.4.4 An Example of the Formalization The requirement of the recipient on disputes is now presented formally, but, for brevity, not from scratch in all details. (The rest of formalization should then be fairly clear, except for availability of service.) For definitions of temporal logic, see <ref> [MP91] </ref>.
Reference: [MR91] <author> S. Micali, P. Rogaway: </author> <title> Secure Computation (Ch. </title> <institution> 1-3); Laboratory for Computer Science, MIT, Cam-bridge, MA 02139, USA; distributed at Crypto '91. </institution>
Reference-contexts: (Note that no knowledge of these approaches is assumed in the later sections.) 3.1 Relation to Secure MultiParty Computation Protocols Deriving a cryptologic definition from an ideal service specification is new with signature schemes, but it is known with multiparty function computation, starting with [Y82]. (Overviews can be found in <ref> [B91, MR91, FGY92] </ref>.) However, existing definitions were not general enough to be used for signature schemes. (This is no criticism they go much further in other directions.) The following new features were needed: Logic specification. The services of different types of signature schemes are similar, but not identical.
Reference: [P91] <author> B. Pfitzmann: </author> <title> Failstop Signatures; Principles and Applications; Compsec '91, </title> <publisher> Elsevier, Oxford 1991, </publisher> <pages> 125-134. </pages>
Reference-contexts: For instance, there are failstop signature schemes, where a signer who has been cheated with a forged signature can prove that it was a forgery <ref> [BPW91, P91, HP92, HPP92] </ref>. A different example is socalled undeniable signature schemes [CA90, C91, BCDP91].
Reference: [PW92] <author> B. Pfitzmann, M. Waidner: </author> <title> Unconditional Byzantine Agreement for any Number of Faulty Processors; STACS 92, </title> <publisher> Springer-Verlag, </publisher> <address> Heidelberg 1992, </address> <pages> 339-350. </pages>
Reference-contexts: There are even unconditionally secure signature schemes, where even an adversary with unlimited computing power cannot produce forgeries better than by using a random number and hoping that it is the signature <ref> [CR91, PW92] </ref>. However, unconditionally secure signature schemes seem to be impractical, in contrast to failstop and undeniable ones. All these new schemes exist in several variants with different properties.
Reference: [RSA78] <author> R. L. Rivest, A. Shamir, L. Adleman: </author> <title> A Method for Obtaining Digital Signatures and Public-Key Cryptosystems; CACM 21/2 (1978) 120-126. </title>
Reference-contexts: Moreover, it was originally overlooked that adversaries might try to compute new signatures from given signatures, in particular with RSA <ref> [RSA78, D84] </ref>. Hence it was very satisfactory that a definition that seemed final was given in [GMR88]. It allows the scheme to consist of an arbitrary key generation algorithm, an arbitrary signing algorithm, and an arbitrary test algorithm.
Reference: [S91] <author> C.P. Schnorr: </author> <title> Efficient Signature Generation by Smart Cards; J. </title> <note> Cryptology 4/3 (1991) 161-174. </note>
Reference-contexts: that have no special security features, are covered by the GMR definition: Sometimes, signing is not just an algorithm that takes a secret key and a message (and at most the number of this message) as inputs, but some memory is needed between applications, e.g., in Schnorrs scheme with preprocessing <ref> [S91] </ref>. In another example, there is a trusted public random value in addition to the public keys [BC92].
Reference: [SM93] <author> P. Syverson, C. Meadows: </author> <title> A Logical Language for Specifying Cryptographic Protocol Requirements; Proc. </title> <booktitle> 1993 IEEE Symp. on Security and Privacy, </booktitle> <address> Oakland, California, </address> <pages> 165-177. </pages>
Reference-contexts: Here, the real signature schemes are the semantics. In future, the approaches might meet in logics for the design of complicated protocols, but using more general primitives and a real cryptologic semantics. * Thanks to an anonymous reviewer, I noticed that very recently, <ref> [SM93] </ref> also formulated requirements independently of the structure and in temporal logic. (The differences in the schemes actually considered and the semantics remain.) The general idea of what should be expressed in requirements is indeed similar, except that [SM93] has no explicit interface. <p> semantics. * Thanks to an anonymous reviewer, I noticed that very recently, <ref> [SM93] </ref> also formulated requirements independently of the structure and in temporal logic. (The differences in the schemes actually considered and the semantics remain.) The general idea of what should be expressed in requirements is indeed similar, except that [SM93] has no explicit interface. Introducing one might be helpful, because intuition seems to be needed to map, e.g., an accept statement from the requirements to something in the actual protocol, whereas here, it is simply the interface output in the protocol.
Reference: [Y82] <author> A.C. Yao: </author> <title> Protocols for Secure Computations; 23rd FOCS, </title> <publisher> IEEE Computer Society, </publisher> <year> 1982, </year> <pages> 160-164. </pages>
Reference-contexts: to those approaches are now discussed. (Note that no knowledge of these approaches is assumed in the later sections.) 3.1 Relation to Secure MultiParty Computation Protocols Deriving a cryptologic definition from an ideal service specification is new with signature schemes, but it is known with multiparty function computation, starting with <ref> [Y82] </ref>. (Overviews can be found in [B91, MR91, FGY92].) However, existing definitions were not general enough to be used for signature schemes. (This is no criticism they go much further in other directions.) The following new features were needed: Logic specification.
References-found: 31

