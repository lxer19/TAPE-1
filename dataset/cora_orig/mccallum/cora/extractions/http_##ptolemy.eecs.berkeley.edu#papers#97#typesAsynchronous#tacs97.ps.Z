URL: http://ptolemy.eecs.berkeley.edu/papers/97/typesAsynchronous/tacs97.ps.Z
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/97/typesAsynchronous/
Root-URL: 
Email: samson@dcs.ed.ac.uk  S.Gay@dcs.rhbnc.ac.uk  R.Nagarajan@doc.ic.ac.uk  
Phone: 2  3  
Title: A Type-theoretic Approach to Deadlock-freedom of Asynchronous Systems  
Author: Samson Abramsky Simon Gay and Rajagopal Nagarajan 
Address: Edinburgh, Mayfield Road, Edinburgh, UK, EH9 3JZ;  Surrey, UK, TW20 0EX;  London, UK, SW7 2BZ  CA 94720, USA;  
Affiliation: 1 Department of Computer Science, University of  Department of Computer Science, Royal Holloway, University of London, Egham,  Department of Computing, Imperial College, 180 Queen's Gate,  Electronics Research Laboratory, University of California, Berkeley,  
Abstract: We present a type-based technique for the verification of deadlock-freedom in asynchronous concurrent systems. Our general approach is to start with a simple interaction category, in which objects are types containing safety specifications and morphisms are processes. We then use a specification structure to add information to the types so that they specify stronger properties. In this paper the starting point is the category ASProc and the extra type information concerns deadlock-freedom. In the resulting category ASProc D , combining well-typed processes preserves deadlock-freedom. It is also possible to accommodate non-compositional methods within the same framework. The systems we consider are asynchronous, hence issues of divergence become significant; our approach incorporates an elegant treatment of both divergence and successful termination. As an example, we use our methods to verify the deadlock-freedom of an implementation of the alternating-bit protocol.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S. Abramsky, S. J. Gay, and R. Nagarajan. </author> <title> Interaction categories and foundations of typed concurrent programming. </title> <editor> In M. Broy, editor, </editor> <booktitle> Deductive Program Design: Proceedings of the 1994 Marktoberdorf International Summer School, NATO ASI Series F: Computer and Systems Sciences. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Interaction between components may take the form of a prolonged, dynamic pattern of communication rather than a simple procedure call, and both parties must agree about the expected nature of the dialogue. Our recent research on interaction categories <ref> [1, 2] </ref> has led to a framework for the design of sophisticated type systems which are able to specify communication protocols of this form. <p> Future work will combine the ideas of these calculi into a syntax to accompany the semantic type system of the present paper. Much of our previous work has concentrated on deadlock-freedom of synchronous systems <ref> [1, 11] </ref>. In the asynchronous case, the theory is complicated by the need to consider issues of divergence. A divergent process is one which communicates internally forever, and under the process equivalence we use this is equated to a deadlocked process. <p> This includes the fl-autonomous structure [5], corresponding to the multiplicative connectives , O and () ? of linear logic [13], but not the additive structure (products and coproducts) or the delay operator. Complete definitions can be found in previous publications <ref> [1, 2, 3, 11] </ref>. Our use of ASProc in the present paper allows us to analyse asynchronous systems, in which different components are able to evolve at their own rate. <p> The types do not express the specification that the sequence of delivered messages is the same as the sequence of received messages. This specification could be expressed in our typed framework [20], and we have anal ysed similar specifications of other systems <ref> [1, 11] </ref>, but it is not the purpose of the present paper to illustrate this aspect of the theory. 5.2 Types in ASProc V In order to type the system at the most elementary level, without taking account of deadlock-freedom, we need the following ASProc V types. <p> again, denoted here by Accept and Ack for convenience) Accept : (X ? O B) ! A ? which have the same process behaviour as before, but differently organised in terfaces. (For more details of the way in which a single process can be viewed as many different morphisms, see <ref> [1, 11] </ref>). Now, connecting Accept and Ack is simply an application of categorical composition.
Reference: 2. <author> S. Abramsky, S. J. Gay, and R. Nagarajan. </author> <title> Specification structures and propositions-as-types for concurrency. </title> <editor> In G. Birtwistle and F. Moller, editors, </editor> <title> Logics for Concurrency: Structure vs. </title> <booktitle> Automata|Proceedings of the VIIIth Banff Higher Order Workshop, volume 1043 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1996. </year>
Reference-contexts: Interaction between components may take the form of a prolonged, dynamic pattern of communication rather than a simple procedure call, and both parties must agree about the expected nature of the dialogue. Our recent research on interaction categories <ref> [1, 2] </ref> has led to a framework for the design of sophisticated type systems which are able to specify communication protocols of this form. <p> We hope to address this in future work. Our approach to the construction of type systems for concurrency is to begin with a simple interaction category such as ASProc <ref> [2, 3] </ref>, in which the types correspond to very basic safety specifications, and use a specification structure [2] to add information to the types so that they specify stronger properties. <p> We hope to address this in future work. Our approach to the construction of type systems for concurrency is to begin with a simple interaction category such as ASProc [2, 3], in which the types correspond to very basic safety specifications, and use a specification structure <ref> [2] </ref> to add information to the types so that they specify stronger properties. This process can be iterated, leading to a "tower of categories" sharing a great deal of structure and possessing progressively more complex types. In this paper we are interested in specifying deadlock-freedom. <p> In the asynchronous case, the theory is complicated by the need to consider issues of divergence. A divergent process is one which communicates internally forever, and under the process equivalence we use this is equated to a deadlocked process. Previous attempts to extend our work to the asynchronous case <ref> [2, 11] </ref> have used the idea of fairness, by assuming that processes are fair in the sense that every infinite behaviour has an infinite projection onto every port. <p> This includes the fl-autonomous structure [5], corresponding to the multiplicative connectives , O and () ? of linear logic [13], but not the additive structure (products and coproducts) or the delay operator. Complete definitions can be found in previous publications <ref> [1, 2, 3, 11] </ref>. Our use of ASProc in the present paper allows us to analyse asynchronous systems, in which different components are able to evolve at their own rate. <p> However, the final step in the construction of a cyclic network can only be carried out if and O coincide. This point is discussed in more detail elsewhere <ref> [2] </ref>, and in Section 5 of this paper. In Section 4 we will construct a fl-autonomous category of deadlock-free processes; this category turns out not to be compact closed, which means that additional verification rules are required in order to form cyclic networks. <p> If P and Q are forced to communicate, in the composite P ; Q, the result is divergence: they can communicate internally forever, and never produce any observable actions. If deadlock is simply taken to be termination (this approach was used in our earlier work <ref> [2, 11] </ref>), then P ; Q is deadlocked even though successful communication takes place. The introduction of the sets V of valid infinite traces provides a nice resolution of this conflict. <p> This in turn means that " 2 V A and " 2 V C , hence " 2 V A (C and P ; Q is interpreted as a successfully terminated process. Compared to our previous work <ref> [2, 11] </ref>, the present theory offers a much more satisfactory treatment of deadlock-freedom in interaction categories of asynchronous processes. The improvements stem from the use of the sets V of valid maximal traces; although this is a simple addition, it makes the theory much more elegant.
Reference: 3. <author> S. Abramsky. </author> <title> Interaction Categories and communicating sequential processes. </title> <editor> In A. W. Roscoe, editor, </editor> <title> A Classical Mind: Essays in Honour of C. </title> <editor> A. R. </editor> <booktitle> Hoare, </booktitle> <pages> pages 1-15. </pages> <publisher> Prentice Hall International, </publisher> <year> 1994. </year>
Reference-contexts: We hope to address this in future work. Our approach to the construction of type systems for concurrency is to begin with a simple interaction category such as ASProc <ref> [2, 3] </ref>, in which the types correspond to very basic safety specifications, and use a specification structure [2] to add information to the types so that they specify stronger properties. <p> This includes the fl-autonomous structure [5], corresponding to the multiplicative connectives , O and () ? of linear logic [13], but not the additive structure (products and coproducts) or the delay operator. Complete definitions can be found in previous publications <ref> [1, 2, 3, 11] </ref>. Our use of ASProc in the present paper allows us to analyse asynchronous systems, in which different components are able to evolve at their own rate.
Reference: 4. <author> L. Aceto and M. Hennessy. </author> <title> Termination, deadlock and divergence. </title> <journal> Journal of the ACM, </journal> <volume> 39 </volume> <pages> 147-187, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: In general, the choice of input or output can be made independently at each step. The structure of ASProc D allows a rich variety of input/output behaviour to be specified. 6 Related Work The analysis of deadlock-freedom in concurrency has been investigated by a number of authors <ref> [4, 7, 8, 10, 22, 24, 25] </ref>. The work of Roscoe and Daithi [24] is one of the most recent, and also the most relevant to our own. Their approach is to define a variant function which assigns a value to each state of a process.
Reference: 5. <author> M. Barr. </author> <title> fl-autonomous categories and linear logic. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 1(2) </volume> <pages> 159-178, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: The theory described in the present paper gives a much cleaner account of deadlock-freedom in asynchronous interaction categories. 2 The Interaction Category ASProc In this section we briefly review those parts of the definition of ASProc which are relevant to the present paper. This includes the fl-autonomous structure <ref> [5] </ref>, corresponding to the multiplicative connectives , O and () ? of linear logic [13], but not the additive structure (products and coproducts) or the delay operator. Complete definitions can be found in previous publications [1, 2, 3, 11].
Reference: 6. <author> M. Berger, S. Gay, and R. Nagarajan. </author> <title> A typed calculus of deadlock-free processes. </title> <note> Paper in preparation, </note> <year> 1997. </year>
Reference-contexts: Elsewhere we have studied process calculi whose type systems correspond to the structure of various interaction categories: the synchronous category SProc whose types are safety specifications [12]; the synchronous cat-egory SProc D whose types specify deadlock-freedom <ref> [6] </ref>; and the asynchronous category ASProc whose types are safety specifications [20]. Future work will combine the ideas of these calculi into a syntax to accompany the semantic type system of the present paper. Much of our previous work has concentrated on deadlock-freedom of synchronous systems [1, 11]. <p> Such a typing system is being developed for the synchronous case <ref> [6] </ref> and will be adapted for the asynchronous case.
Reference: 7. <author> S. D. Brookes and A. W. Roscoe. </author> <title> Deadlock analysis in networks of communicating processes. </title> <editor> In K. Apt, editor, </editor> <booktitle> Logics and Models of Concurrent Systems, </booktitle> <volume> volume 13, </volume> <pages> pages 305-324. </pages> <booktitle> NATO Advanced Study Institutes, Series F, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1985. </year>
Reference-contexts: In general, the choice of input or output can be made independently at each step. The structure of ASProc D allows a rich variety of input/output behaviour to be specified. 6 Related Work The analysis of deadlock-freedom in concurrency has been investigated by a number of authors <ref> [4, 7, 8, 10, 22, 24, 25] </ref>. The work of Roscoe and Daithi [24] is one of the most recent, and also the most relevant to our own. Their approach is to define a variant function which assigns a value to each state of a process.
Reference: 8. <author> K. M. Chandy and J. Misra. </author> <title> Deadlock absence proofs for networks of communicating processes. </title> <journal> Information Processing Letters, </journal> <volume> 9(4), </volume> <month> November </month> <year> 1979. </year>
Reference-contexts: In general, the choice of input or output can be made independently at each step. The structure of ASProc D allows a rich variety of input/output behaviour to be specified. 6 Related Work The analysis of deadlock-freedom in concurrency has been investigated by a number of authors <ref> [4, 7, 8, 10, 22, 24, 25] </ref>. The work of Roscoe and Daithi [24] is one of the most recent, and also the most relevant to our own. Their approach is to define a variant function which assigns a value to each state of a process.
Reference: 9. <author> J. W. de Bakker. </author> <title> Mathematical Theory of Program Correctness. </title> <publisher> Prentice Hall International, </publisher> <year> 1980. </year>
Reference-contexts: A ! B, g : B ! C, ' 2 P S A, 2 P S B and 2 P S C: 'ff g ; fgg =) 'ff ; gg (2) The axioms (1) and (2) are typed versions of the standard Hoare logic axioms for "skip" and "sequential composition" <ref> [9] </ref>. Given C and S as above, we can define a new category C S as follows. The objects are pairs (A; ') with A 2 ob C and ' 2 P S A.
Reference: 10. <author> E. W. Dijkstra and C. S. Scholten. </author> <title> A class of simple communication patterns. </title> <booktitle> In Selected Writings on Computing. </booktitle> <address> EWD643. </address> <publisher> Springer-Verlag, </publisher> <year> 1982. </year>
Reference-contexts: In general, the choice of input or output can be made independently at each step. The structure of ASProc D allows a rich variety of input/output behaviour to be specified. 6 Related Work The analysis of deadlock-freedom in concurrency has been investigated by a number of authors <ref> [4, 7, 8, 10, 22, 24, 25] </ref>. The work of Roscoe and Daithi [24] is one of the most recent, and also the most relevant to our own. Their approach is to define a variant function which assigns a value to each state of a process.
Reference: 11. <author> S. J. Gay. </author> <title> Linear Types for Communicating Processes. </title> <type> PhD thesis, </type> <institution> University of London, </institution> <year> 1995. </year>
Reference-contexts: Future work will combine the ideas of these calculi into a syntax to accompany the semantic type system of the present paper. Much of our previous work has concentrated on deadlock-freedom of synchronous systems <ref> [1, 11] </ref>. In the asynchronous case, the theory is complicated by the need to consider issues of divergence. A divergent process is one which communicates internally forever, and under the process equivalence we use this is equated to a deadlocked process. <p> In the asynchronous case, the theory is complicated by the need to consider issues of divergence. A divergent process is one which communicates internally forever, and under the process equivalence we use this is equated to a deadlocked process. Previous attempts to extend our work to the asynchronous case <ref> [2, 11] </ref> have used the idea of fairness, by assuming that processes are fair in the sense that every infinite behaviour has an infinite projection onto every port. <p> This includes the fl-autonomous structure [5], corresponding to the multiplicative connectives , O and () ? of linear logic [13], but not the additive structure (products and coproducts) or the delay operator. Complete definitions can be found in previous publications <ref> [1, 2, 3, 11] </ref>. Our use of ASProc in the present paper allows us to analyse asynchronous systems, in which different components are able to evolve at their own rate. <p> If P and Q are forced to communicate, in the composite P ; Q, the result is divergence: they can communicate internally forever, and never produce any observable actions. If deadlock is simply taken to be termination (this approach was used in our earlier work <ref> [2, 11] </ref>), then P ; Q is deadlocked even though successful communication takes place. The introduction of the sets V of valid infinite traces provides a nice resolution of this conflict. <p> This in turn means that " 2 V A and " 2 V C , hence " 2 V A (C and P ; Q is interpreted as a successfully terminated process. Compared to our previous work <ref> [2, 11] </ref>, the present theory offers a much more satisfactory treatment of deadlock-freedom in interaction categories of asynchronous processes. The improvements stem from the use of the sets V of valid maximal traces; although this is a simple addition, it makes the theory much more elegant. <p> The types do not express the specification that the sequence of delivered messages is the same as the sequence of received messages. This specification could be expressed in our typed framework [20], and we have anal ysed similar specifications of other systems <ref> [1, 11] </ref>, but it is not the purpose of the present paper to illustrate this aspect of the theory. 5.2 Types in ASProc V In order to type the system at the most elementary level, without taking account of deadlock-freedom, we need the following ASProc V types. <p> again, denoted here by Accept and Ack for convenience) Accept : (X ? O B) ! A ? which have the same process behaviour as before, but differently organised in terfaces. (For more details of the way in which a single process can be viewed as many different morphisms, see <ref> [1, 11] </ref>). Now, connecting Accept and Ack is simply an application of categorical composition. <p> We see this work as a significant step in the development of type-theoretic methods for compositional verification of concurrent systems. Work is in already progress to develop a formal syntax for deadlock-free processes, using ideas from the typed process calculi that we have already developed <ref> [11, 12, 20] </ref> and the typed language of Takeuchi et al. [26]. In addition, it is highly desirable to develop techniques whereby forming cyclic connections can be automated to some extent, perhaps under certain conditions. The use of variants as in Roscoe and Daithi's work [24] may provide some clues.
Reference: 12. <author> S. J. Gay and R. Nagarajan. </author> <title> A typed calculus of synchronous processes. </title> <booktitle> In Proceedings, Tenth Annual IEEE Symposium on Logic in Computer Science. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1995. </year>
Reference-contexts: Elsewhere we have studied process calculi whose type systems correspond to the structure of various interaction categories: the synchronous category SProc whose types are safety specifications <ref> [12] </ref>; the synchronous cat-egory SProc D whose types specify deadlock-freedom [6]; and the asynchronous category ASProc whose types are safety specifications [20]. Future work will combine the ideas of these calculi into a syntax to accompany the semantic type system of the present paper. <p> Our use of ASProc in the present paper allows us to analyse asynchronous systems, in which different components are able to evolve at their own rate. This is in contrast to much of our previous work on interaction categories (for example, <ref> [12] </ref>) which assumes universal synchronisation with respect to a global clock. An object of ASProc is a triple A = ( A ; t A ; S A ), in which A is a set of actions and t A 2 A is the silent action. <p> In our typed calculus of synchronous processes <ref> [12] </ref>, based on the structure of SProc, the corresponding operation (treated formally) is cut. Using the same typing rule we can connect Reply and then Trans, to obtain the following process. <p> We see this work as a significant step in the development of type-theoretic methods for compositional verification of concurrent systems. Work is in already progress to develop a formal syntax for deadlock-free processes, using ideas from the typed process calculi that we have already developed <ref> [11, 12, 20] </ref> and the typed language of Takeuchi et al. [26]. In addition, it is highly desirable to develop techniques whereby forming cyclic connections can be automated to some extent, perhaps under certain conditions. The use of variants as in Roscoe and Daithi's work [24] may provide some clues.
Reference: 13. <author> J.-Y. Girard. </author> <title> Linear Logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 50(1) </volume> <pages> 1-102, </pages> <year> 1987. </year>
Reference-contexts: This includes the fl-autonomous structure [5], corresponding to the multiplicative connectives , O and () ? of linear logic <ref> [13] </ref>, but not the additive structure (products and coproducts) or the delay operator. Complete definitions can be found in previous publications [1, 2, 3, 11].
Reference: 14. <author> R. Hoofman. </author> <title> Non-Standard Models of Linear Logic. </title> <type> PhD thesis, </type> <institution> Universiteit Utrecht, Netherlands, </institution> <year> 1992. </year>
Reference-contexts: Nevertheless, it provides an alternative view of these standard notions which is highly suggestive, particularly from a Computer Science point of view. Similar notions have been studied, for a variety of purposes, by Burstall and McKinna [18], Hoofman <ref> [14] </ref>, O'Hearn and Tennent [21] and Pitts [23]. Let C be a category.
Reference: 15. <author> N. Kobayashi. </author> <title> A partially deadlock-free typed process calculus. </title> <booktitle> In Proceedings, Twelfth Annual IEEE Symposium on Logic in Computer Science. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1997. </year>
Reference-contexts: Although the categorical structure supports a number of inference rules for combining typed processes, we do not present a full type-checking system for syntactic processes. It is this semantic, denotational emphasis which distinguishes our approach from other recent work, for example Kobayashi's type system for a -calculus-like language <ref> [15] </ref>. Elsewhere we have studied process calculi whose type systems correspond to the structure of various interaction categories: the synchronous category SProc whose types are safety specifications [12]; the synchronous cat-egory SProc D whose types specify deadlock-freedom [6]; and the asynchronous category ASProc whose types are safety specifications [20]. <p> Based on this work, Kobayashi, Pierce and Turner [16] have developed a linear type system for the -calculus. Recently Kobayashi <ref> [15] </ref> has proposed a process calculus with a type system which captures information about order of channel usage, and uses this information to guarantee deadlock-freedom.
Reference: 16. <author> N. Kobayashi, B. C. Pierce, and D. N. Turner. </author> <title> Linearity and the pi-calculus. </title> <booktitle> In Proceedings, 23rd ACM Symposium on Principles of Programming Languages, </booktitle> <year> 1996. </year>
Reference-contexts: Based on this work, Kobayashi, Pierce and Turner <ref> [16] </ref> have developed a linear type system for the -calculus. Recently Kobayashi [15] has proposed a process calculus with a type system which captures information about order of channel usage, and uses this information to guarantee deadlock-freedom.
Reference: 17. <author> S. Mac Lane. </author> <title> Categories for the Working Mathematician. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1971. </year>
Reference-contexts: monoidal category, i.e. there are a bifunctor : C 2 ! C, an object I, and natural isomorphisms assoc A;B;C : (A B) C ~ = A (B C) unitl A : I A ~ = A unitr A : A I ~ = A satisfying the standard coherence equations <ref> [17] </ref>.
Reference: 18. <author> J. McKinna and R. Burstall. Deliverables: </author> <title> A categorical approach to program development in type theory. </title> <booktitle> In Proceedings of Mathematical Foundation of Computer Science, </booktitle> <year> 1993. </year>
Reference-contexts: Nevertheless, it provides an alternative view of these standard notions which is highly suggestive, particularly from a Computer Science point of view. Similar notions have been studied, for a variety of purposes, by Burstall and McKinna <ref> [18] </ref>, Hoofman [14], O'Hearn and Tennent [21] and Pitts [23]. Let C be a category.
Reference: 19. <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: However, the type structure of ASProc D does not support the formation of cyclic process configurations; to deal with such cases, we introduce an additional verification rule. After presenting the necessary theory, we illustrate the use of our type system by analysing a version of the alternating-bit protocol <ref> [19] </ref> and verifying that it is deadlock-free. Communications protocols are a standard source of examples and case studies of verification techniques, so we see this as a significant choice of application. The emphasis of the present paper is semantic; ASProc D provides a semantic framework for reasoning about communication behaviour. <p> A process with sort and silent action t 2 is a labelled transition system (strictly, a distinguished state of a labelled transition system) with label set . We identify processes up to observation equivalence <ref> [19] </ref>. Throughout the paper we will omit the verifications that the operations we define respect observation equivalence. <p> Notation In this paper we will use a CCS-like notation to describe processes in ASProc. The main constructions used will be prefixing, non-deterministic sum and guarded recursion, with their usual interpretations in terms of labelled transition systems <ref> [19] </ref>. <p> There are several versions of the protocol, with different assumptions about the nature of the transmission medium. In the version which we will consider, corresponding to Exercise 15 in Chapter 6 of Milner's book <ref> [19] </ref>, the transmission lines Trans and Ack each have capacity for at most one message, and may lose messages. Thus any message sent by Accept, and any acknowledgement sent by Reply , may disappear unpredictably.
Reference: 20. <author> R. Nagarajan. </author> <title> Typed Concurrent Programs: Specification & Verification. </title> <type> PhD thesis, </type> <institution> University of London, </institution> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Elsewhere we have studied process calculi whose type systems correspond to the structure of various interaction categories: the synchronous category SProc whose types are safety specifications [12]; the synchronous cat-egory SProc D whose types specify deadlock-freedom [6]; and the asynchronous category ASProc whose types are safety specifications <ref> [20] </ref>. Future work will combine the ideas of these calculi into a syntax to accompany the semantic type system of the present paper. Much of our previous work has concentrated on deadlock-freedom of synchronous systems [1, 11]. <p> The main constructions used will be prefixing, non-deterministic sum and guarded recursion, with their usual interpretations in terms of labelled transition systems [19]. A formal calculus of typed asynchronous processes (with a weaker type system which does not guarantee deadlock-freedom) has been developed <ref> [20] </ref>, and this calculus will eventually be combined with the ideas of the present paper, but for now we will concentrate on the semantic aspects of the type system for deadlock-freedom. <p> It is important to note that we are only considering one aspect of the system's correctness, namely deadlock-freedom. The types do not express the specification that the sequence of delivered messages is the same as the sequence of received messages. This specification could be expressed in our typed framework <ref> [20] </ref>, and we have anal ysed similar specifications of other systems [1, 11], but it is not the purpose of the present paper to illustrate this aspect of the theory. 5.2 Types in ASProc V In order to type the system at the most elementary level, without taking account of deadlock-freedom, <p> We see this work as a significant step in the development of type-theoretic methods for compositional verification of concurrent systems. Work is in already progress to develop a formal syntax for deadlock-free processes, using ideas from the typed process calculi that we have already developed <ref> [11, 12, 20] </ref> and the typed language of Takeuchi et al. [26]. In addition, it is highly desirable to develop techniques whereby forming cyclic connections can be automated to some extent, perhaps under certain conditions. The use of variants as in Roscoe and Daithi's work [24] may provide some clues.
Reference: 21. <author> P. W. O'Hearn and R. D. Tennent. </author> <title> Relational parametricity and local variables. </title> <booktitle> In Proceedings, 20th ACM Symposium on Principles of Programming Languages. </booktitle> <publisher> ACM Press, </publisher> <year> 1993. </year>
Reference-contexts: Nevertheless, it provides an alternative view of these standard notions which is highly suggestive, particularly from a Computer Science point of view. Similar notions have been studied, for a variety of purposes, by Burstall and McKinna [18], Hoofman [14], O'Hearn and Tennent <ref> [21] </ref> and Pitts [23]. Let C be a category.
Reference: 22. <author> S. S. Owicki and D. Gries. </author> <title> Verifying properties of parallel programs. </title> <journal> Communications of the ACM, </journal> <volume> 19(5) </volume> <pages> 279-285, </pages> <month> May </month> <year> 1976. </year>
Reference-contexts: In general, the choice of input or output can be made independently at each step. The structure of ASProc D allows a rich variety of input/output behaviour to be specified. 6 Related Work The analysis of deadlock-freedom in concurrency has been investigated by a number of authors <ref> [4, 7, 8, 10, 22, 24, 25] </ref>. The work of Roscoe and Daithi [24] is one of the most recent, and also the most relevant to our own. Their approach is to define a variant function which assigns a value to each state of a process.
Reference: 23. <author> A. M. Pitts. </author> <title> Relational properties of recursively defined domains. </title> <booktitle> In 8th Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 86-97. </pages> <publisher> IEEE Computer Society Press, </publisher> <address> Washington, </address> <year> 1993. </year>
Reference-contexts: Nevertheless, it provides an alternative view of these standard notions which is highly suggestive, particularly from a Computer Science point of view. Similar notions have been studied, for a variety of purposes, by Burstall and McKinna [18], Hoofman [14], O'Hearn and Tennent [21] and Pitts <ref> [23] </ref>. Let C be a category.
Reference: 24. <author> A. W. Roscoe and N. Daithi. </author> <title> The pursuit of deadlock freedom. </title> <journal> Information and Computation, </journal> <volume> 75(3) </volume> <pages> 289-327, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: In general, the choice of input or output can be made independently at each step. The structure of ASProc D allows a rich variety of input/output behaviour to be specified. 6 Related Work The analysis of deadlock-freedom in concurrency has been investigated by a number of authors <ref> [4, 7, 8, 10, 22, 24, 25] </ref>. The work of Roscoe and Daithi [24] is one of the most recent, and also the most relevant to our own. Their approach is to define a variant function which assigns a value to each state of a process. <p> The structure of ASProc D allows a rich variety of input/output behaviour to be specified. 6 Related Work The analysis of deadlock-freedom in concurrency has been investigated by a number of authors [4, 7, 8, 10, 22, 24, 25]. The work of Roscoe and Daithi <ref> [24] </ref> is one of the most recent, and also the most relevant to our own. Their approach is to define a variant function which assigns a value to each state of a process. <p> In addition, it is highly desirable to develop techniques whereby forming cyclic connections can be automated to some extent, perhaps under certain conditions. The use of variants as in Roscoe and Daithi's work <ref> [24] </ref> may provide some clues. Another possibility is the cycle sum test of Wadge [27], which captures the idea that the presence of non-trivial delays in feedback loops is a necessary condition for deadlock-freedom.
Reference: 25. <author> J. Sifakis. </author> <title> Deadlocks and livelocks in transition systems. </title> <booktitle> In Mathematical Foundations of Computer Science, volume 88 of Lecture Notes in Computer Science, </booktitle> <pages> pages 587-599. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1980. </year>
Reference-contexts: In general, the choice of input or output can be made independently at each step. The structure of ASProc D allows a rich variety of input/output behaviour to be specified. 6 Related Work The analysis of deadlock-freedom in concurrency has been investigated by a number of authors <ref> [4, 7, 8, 10, 22, 24, 25] </ref>. The work of Roscoe and Daithi [24] is one of the most recent, and also the most relevant to our own. Their approach is to define a variant function which assigns a value to each state of a process.
Reference: 26. <author> K. Takeuchi, K. Honda, and M. Kubo. </author> <title> An interaction-based language and its typing system. </title> <booktitle> In Proceedings of the 6th European Conference on Parallel Languages and Architectures, number 817 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: This enables local analysis of deadlock-freedom, and hence offers the possibility of constructing deadlock-free networks from deadlock-free subcomponents. None of the above-mentioned approaches is based on types. However, Takeuchi, Honda and Kubo <ref> [26] </ref> have developed a typed language for interaction, in which the type system guarantees avoidance of a class of communication errors; these errors can be viewed as weak forms of deadlock, but do not include the possibility of cyclic dependencies. <p> Work is in already progress to develop a formal syntax for deadlock-free processes, using ideas from the typed process calculi that we have already developed [11, 12, 20] and the typed language of Takeuchi et al. <ref> [26] </ref>. In addition, it is highly desirable to develop techniques whereby forming cyclic connections can be automated to some extent, perhaps under certain conditions. The use of variants as in Roscoe and Daithi's work [24] may provide some clues.
Reference: 27. <author> W. W. Wadge. </author> <title> An extensional treatment of dataflow deadlock. </title> <journal> Theoretical Computer Science, </journal> <volume> 13 </volume> <pages> 3-15, </pages> <year> 1981. </year>
Reference-contexts: In addition, it is highly desirable to develop techniques whereby forming cyclic connections can be automated to some extent, perhaps under certain conditions. The use of variants as in Roscoe and Daithi's work [24] may provide some clues. Another possibility is the cycle sum test of Wadge <ref> [27] </ref>, which captures the idea that the presence of non-trivial delays in feedback loops is a necessary condition for deadlock-freedom.
References-found: 27

