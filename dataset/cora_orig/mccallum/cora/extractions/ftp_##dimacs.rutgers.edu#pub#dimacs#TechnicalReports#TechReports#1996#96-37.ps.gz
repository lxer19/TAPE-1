URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1996/96-37.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1996.html
Root-URL: http://www.cs.rutgers.edu
Title: Lower Bounds for Monotone Span Programs 1  
Author: by Laszlo Babai Anna Gal Avi Wigderson 
Note: Superpolynomial  
Abstract: DIMACS Technical Report 96-37 September 1996 DIMACS is a partnership of Rutgers University, Princeton University, AT&T Research, Bellcore, and Bell Laboratories. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology. 
Abstract-found: 1
Intro-found: 1
Reference: [AB] <author> N. Alon and R. Boppana: </author> <title> The monotone circuit complexity of Boolean functions. </title> <booktitle> Combinatorica 7 (1987), </booktitle> <pages> 1-22. 14 </pages>
Reference: [ABO] <author> E. Allender, R. Beals, M. Ogihara: </author> <title> The complexity of matrix rank and feasible systems of linear equations. </title> <booktitle> In Proc. 28th ACM STOC, </booktitle> <year> 1996, </year> <pages> pp. 161-167. </pages>
Reference-contexts: Allender, Beals and Ogihara <ref> [ABO] </ref> showed explicitely how to construct polynomial size span programs for testing feasibility of systems of linear equations (Theorem 2.12 [ABO]). This gives the following. Theorem 2.7 (implicit in [BDHM, ABO]) Let K be an arbitrary field. <p> Allender, Beals and Ogihara <ref> [ABO] </ref> showed explicitely how to construct polynomial size span programs for testing feasibility of systems of linear equations (Theorem 2.12 [ABO]). This gives the following. Theorem 2.7 (implicit in [BDHM, ABO]) Let K be an arbitrary field. Let A X be an n fi n matrix with entries of the form a ij x ij , where a ij 2 K and the x ij are Boolean variables. <p> Allender, Beals and Ogihara [ABO] showed explicitely how to construct polynomial size span programs for testing feasibility of systems of linear equations (Theorem 2.12 [ABO]). This gives the following. Theorem 2.7 (implicit in <ref> [BDHM, ABO] </ref>) Let K be an arbitrary field. Let A X be an n fi n matrix with entries of the form a ij x ij , where a ij 2 K and the x ij are Boolean variables.
Reference: [AGHP] <author> N. Alon, O. Goldreich, J. H-astad, R. Peralta: </author> <title> Simple constructions of almost k-wise independent random variables. </title> <booktitle> Random Structures and Algorithms 3 (1992), </booktitle> <pages> 289-304. </pages>
Reference-contexts: Constructions of k-wise nearly independent random variables have been analysed in a similar spirit (cf. <ref> [AGHP] </ref>, [AMN]). In this paper we only describe the second approach.
Reference: [AMN] <author> Y. Azar, R. Motwani, J. Naor: </author> <title> Approximating probability distributions using small sample spaces. </title> <journal> Combinatorica, </journal> <note> to appear. </note>
Reference-contexts: Constructions of k-wise nearly independent random variables have been analysed in a similar spirit (cf. [AGHP], <ref> [AMN] </ref>). In this paper we only describe the second approach.
Reference: [BFS] <author> L. Babai, P. Frankl, J. Simon: </author> <title> Complexity classes in communication complexity theory. </title> <booktitle> In: Proc. 27th IEEE FOCS, </booktitle> <year> 1986, </year> <pages> pp. 337-347. </pages>
Reference-contexts: Define the disjointness function on a pair x; y of u-bit vectors by DISJ (x; y) = 1 iff the sets represented by these vectors are disjoint. Theorem 2.4 ([KS, Ra4], cf. <ref> [BFS] </ref>) Any 1=3 error probabilistic communication protocol for DISJ requires (u) communication bits. We prove the following. Theorem 2.5 Any monotone formula computing ODDFACTOR n has size exp (( p Proof.
Reference: [BGKRSW] <author> L. Babai, A. Gal, J. Kollar, L. Ronyai, T. Szabo, A. Wigderson. </author> <title> Extremal bipartite graphs and superpolynomial lower bounds for monotone span programs. </title> <booktitle> In Proc. 28th ACM STOC, </booktitle> <year> 1996, </year> <pages> pp. 603-611. </pages>
Reference-contexts: Constructions of k-wise nearly independent random variables have been analysed in a similar spirit (cf. [AGHP], [AMN]). In this paper we only describe the second approach. For the details of the first solution we refer to <ref> [BGKRSW] </ref>. 2 The power of span programs 2.1 Monotone span programs vs. monotone circuits and formulae Proof of Theorem 1.1 Here we give the proof of Theorem 1.1, a result that may be interpreted as an indication why lower bounds for monotone span programs may be hard to come by.
Reference: [BGP] <author> A. Beimel, A. Gal and M. Paterson: </author> <title> Lower bounds for monotone span programs. </title> <booktitle> In Proc. 36th IEEE FOCS, </booktitle> <address> Milwaukee WI 1995, </address> <pages> pp. 674-681, </pages> <note> journal version to appear in Computational Complexity. </note>
Reference-contexts: Lower bound techniques for monotone circuits and formulae are well known 2 (e.g. Razborov [Ra1, Ra2, Ra3], Haken [Ha] for circuits, Karchmer-Wigderson [KW1], Raz-Wigderson [RW] for formulae). These techniques, however, do not appear to be adaptable to the study of monotone span programs. Beimel, Gal and Paterson <ref> [BGP] </ref> showed that monotone span programs can be strictly stronger than monotone circuits. Here we show that monotone span programs may be stronger than monotone circuits even by superpolynomial factors. <p> It remains open to prove that this function requires large monotone span programs. A different motivation for studying monotone span programs comes from a cryptographic tool called "secret sharing schemes." This connection is reviewed in detail by Beimel, Gal, and Paterson <ref> [BGP] </ref>. Without giving the definitions, we should mention that most known secret sharing schemes are "linear," and lower bounds for the total size of "shares" in linear secret sharing schemes are equivalent to lower bounds for monotone span programs. <p> Our main result can therefore be interpreted as a superpolynomial lower bound for linear secret sharing schemes. For details we refer to the survey by Stinson [St] and to the extensive literature listed in <ref> [BGP] </ref>. The best known lower bound for general secret sharing schemes is (n 2 = log n) (Csirmaz [Cs]). This immediately implies the same lower bound for monotone span programs for explicit functions. This by-product of [Cs] was improved by Beimel, Gal, and Paterson [BGP] to an (n 5=2 ) lower <p> to the extensive literature listed in <ref> [BGP] </ref>. The best known lower bound for general secret sharing schemes is (n 2 = log n) (Csirmaz [Cs]). This immediately implies the same lower bound for monotone span programs for explicit functions. This by-product of [Cs] was improved by Beimel, Gal, and Paterson [BGP] to an (n 5=2 ) lower bound for monotone span programs; they prove this bound for the 6-clique function. (Here n denotes the number of variables.) More importantly, [BGP] exhibits a combinatorial criterion which we shall be able to exploit to obtain superpolynomial lower bounds. <p> This by-product of [Cs] was improved by Beimel, Gal, and Paterson <ref> [BGP] </ref> to an (n 5=2 ) lower bound for monotone span programs; they prove this bound for the 6-clique function. (Here n denotes the number of variables.) More importantly, [BGP] exhibits a combinatorial criterion which we shall be able to exploit to obtain superpolynomial lower bounds. <p> Finally, in section 3.3 we present the construction of such a family. 3.1 The BGP Lower Bound Condition We shall make use of a technique introduced by Beimel, Gal, and Paterson <ref> [BGP] </ref>, to prove lower bounds for monotone span programs. The idea is to show that if a small monotone span program accepts all the minterms of the function f then it must also accept an input that does not contain any minterms, a contradiction. <p> Given a set system F 2 X over the universe X, we say that a set A X determines a member H 2 F if H is the unique member of F containing A. Next we define is a key concept introduced in <ref> [BGP] </ref>. <p> (ii) for any H 2 F and any subset T D (H), the set S (T ) := G2F;G"T6=; does not contain any member of F . (We call S (T ) the spread of T .) (This definition is equivalent to a special case of "critical families" defined in <ref> [BGP, Sec. 2.2] </ref>.) The following result summarizes the BGP lower bound technique. 9 Theorem 3.2 (Beimel, Gal, Paterson [BGP]) Let F be a Sperner family over a universe of n elements and f F the corresponding monotone Boolean function in n variables. <p> G2F;G"T6=; does not contain any member of F . (We call S (T ) the spread of T .) (This definition is equivalent to a special case of "critical families" defined in [BGP, Sec. 2.2].) The following result summarizes the BGP lower bound technique. 9 Theorem 3.2 (Beimel, Gal, Paterson <ref> [BGP] </ref>) Let F be a Sperner family over a universe of n elements and f F the corresponding monotone Boolean function in n variables. If F is self-avoiding then for every field K we have mSP K (f F ) jF j : For completeness we describe the proof from [BGP]. <p> <ref> [BGP] </ref>) Let F be a Sperner family over a universe of n elements and f F the corresponding monotone Boolean function in n variables. If F is self-avoiding then for every field K we have mSP K (f F ) jF j : For completeness we describe the proof from [BGP]. Proof. Consider a monotone span program computing f F . Let W i W be the subspaces associated with the variables x i and let r denote the sum of the dimensions of the subspaces, i.e. the size of the span program. <p> a solution, that would mean that the columns of Q are not linearly independent, by taking fi Z = P as a coefficient for the column Z and observing that fi H = ff H 6= 0. 2 For a more detailed explanation of the above proof we refer to <ref> [BGP] </ref>.
Reference: [Ber] <author> S. J. Berkowitz: </author> <title> On computing the determinant in small parallel time using a small number of processors. </title> <journal> Inform. Process. Lett. </journal> <volume> 18 (1984), </volume> <pages> 147-150. </pages>
Reference-contexts: Span programs can be viewed as a model of parallel computation. Indeed, functions with polynomial size span programs over fixed finite fields belong to N C 2 . (This is immediate from the fact that linear algebra is in N C 2 <ref> [Ber, BDHM, KW, Mu] </ref>). As we shall see, the monotone analog of this statement fails badly; functions admitting polynomial size monotone span programs do not necessarily have polynomial size or even polylog depth monotone circuits (cf. Theorem 1.1 below).
Reference: [Bol] <author> B. Bollobas: </author> <title> Extremal Graph Theory. </title> <publisher> Academic Press, </publisher> <year> 1978. </year>
Reference: [BDHM] <author> G. Buntrock, C. Damm, H. Hertrampf, and C. Meinel: </author> <title> Structure and importance of the logspace-mod class. Math. </title> <booktitle> Systems Theory 25 (1992), </booktitle> <pages> 223-237. </pages>
Reference-contexts: The class of Boolean functions with polynomial size span programs is equivalent to the class of functions with polynomial size counting branching programs <ref> [BDHM, KW] </ref>. Span program size is a lower bound on the size of symmetric branching programs [KW]. The model of symmetric branching programs is essentially the same as that of (undirected) contact schemes (for definitions, see [KW]). Lower bounds for span programs also imply lower bounds for formula size. <p> Span programs can be viewed as a model of parallel computation. Indeed, functions with polynomial size span programs over fixed finite fields belong to N C 2 . (This is immediate from the fact that linear algebra is in N C 2 <ref> [Ber, BDHM, KW, Mu] </ref>). As we shall see, the monotone analog of this statement fails badly; functions admitting polynomial size monotone span programs do not necessarily have polynomial size or even polylog depth monotone circuits (cf. Theorem 1.1 below). <p> It follows from the arguments of Buntrock et al. <ref> [BDHM] </ref> that testing singularity of a variable matrix can be performed by polynomial size span programs. [BDHM] have not considered the model of span programs, but their model is equivalent to span programs up to polynomial increase in the size of the computation [KW]. <p> It follows from the arguments of Buntrock et al. <ref> [BDHM] </ref> that testing singularity of a variable matrix can be performed by polynomial size span programs. [BDHM] have not considered the model of span programs, but their model is equivalent to span programs up to polynomial increase in the size of the computation [KW]. <p> Allender, Beals and Ogihara [ABO] showed explicitely how to construct polynomial size span programs for testing feasibility of systems of linear equations (Theorem 2.12 [ABO]). This gives the following. Theorem 2.7 (implicit in <ref> [BDHM, ABO] </ref>) Let K be an arbitrary field. Let A X be an n fi n matrix with entries of the form a ij x ij , where a ij 2 K and the x ij are Boolean variables.
Reference: [Cs1] <author> L. Csirmaz: </author> <title> The size of a share must be large. </title> <editor> In A. De Santis, ed., </editor> <booktitle> Advances in Cryptology - Eurocrypt'94, pre-proceedings, </booktitle> <year> 1994. </year>
Reference: [Cs] <author> L. Csirmaz: </author> <title> The dealer's random bits in perfect secret sharing schemes. </title> <type> Preprint, </type> <institution> Mathematical Inst. Hungarian Acad. Sci., </institution> <year> 1994. </year>
Reference-contexts: For details we refer to the survey by Stinson [St] and to the extensive literature listed in [BGP]. The best known lower bound for general secret sharing schemes is (n 2 = log n) (Csirmaz <ref> [Cs] </ref>). This immediately implies the same lower bound for monotone span programs for explicit functions. This by-product of [Cs] was improved by Beimel, Gal, and Paterson [BGP] to an (n 5=2 ) lower bound for monotone span programs; they prove this bound for the 6-clique function. (Here n denotes the number <p> The best known lower bound for general secret sharing schemes is (n 2 = log n) (Csirmaz <ref> [Cs] </ref>). This immediately implies the same lower bound for monotone span programs for explicit functions. This by-product of [Cs] was improved by Beimel, Gal, and Paterson [BGP] to an (n 5=2 ) lower bound for monotone span programs; they prove this bound for the 6-clique function. (Here n denotes the number of variables.) More importantly, [BGP] exhibits a combinatorial criterion which we shall be able to exploit to obtain
Reference: [GS] <author> R. L. Graham, J. H. Spencer: </author> <title> A constructive solution to a tournament problem. </title> <journal> Canad. Math. Bull. </journal> <volume> 14 (1971), </volume> <pages> 45-48. </pages>
Reference-contexts: This second approach uses a more general class of Paley-type graphs in the same way as we used the "norm graphs" but the analysis is done via Weil's character sum estimates in the spirit of the classical paper by Graham and Spencer <ref> [GS] </ref>. Constructions of k-wise nearly independent random variables have been analysed in a similar spirit (cf. [AGHP], [AMN]). In this paper we only describe the second approach. <p> Weil and show how to deduce Lemma 3.6 along the lines of <ref> [GS] </ref>. Let be a homomorphism of the multiplicative group GF (q) fi onto the group of k th roots of unity. We extend the domain of to GF (q) by setting (0) = 0. The function is called a multiplicative character of order k over GF (q).
Reference: [GSi] <author> M. Grigni, M. Sipser: </author> <title> Monotone Complexity. In Boolean function complexity, edited by M. Paterson, </title> <journal> London Math. Society Lecture Note Series, </journal> <volume> 169, </volume> <publisher> Cambridge University Press, </publisher> <year> 1992, </year> <pages> pp. 57-75. </pages>
Reference-contexts: This follows from the fact that the clique problem is monotone complete for N P , i.e. there is a monotone projection reduction from any function computable by monotone nondeterministic circuits to the clique problem <ref> [SV, GSi] </ref>. To summarize, let CLIQUE n be the function on m = n variables taking value 1 if and only if the input graph on n vertices contains a clique on n=2 vertices. We have the following corollary.
Reference: [Ha] <author> Armin Haken: </author> <title> Counting bottlenecks to show monotone P6=NP. </title> <booktitle> In Proc. 36th IEEE FOCS, </booktitle> <address> Milwaukee WI 1995, </address> <pages> pp. 36-40. </pages>
Reference-contexts: Lower bound techniques for monotone circuits and formulae are well known 2 (e.g. Razborov [Ra1, Ra2, Ra3], Haken <ref> [Ha] </ref> for circuits, Karchmer-Wigderson [KW1], Raz-Wigderson [RW] for formulae). These techniques, however, do not appear to be adaptable to the study of monotone span programs. Beimel, Gal and Paterson [BGP] showed that monotone span programs can be strictly stronger than monotone circuits.
Reference: [KS] <author> B. Kalyanasundaram and G. Schnitger: </author> <title> The probabilistic communication complexity of set intersection. </title> <booktitle> In Proc. of Structure in Complexity Theory, </booktitle> <year> 1987, </year> <pages> pp. 41-49. </pages>
Reference: [Ka] <author> M. Karchmer: </author> <title> On proving lower bounds for circuit size. </title> <booktitle> In Proc. 8th Ann. Symp. Structure in Complexity Theory, IEEE 1993, </booktitle> <pages> pp. 112-118. </pages>
Reference-contexts: The idea is to show that if a small monotone span program accepts all the minterms of the function f then it must also accept an input that does not contain any minterms, a contradiction. This approach can be viewed as an application of the "fusion method" <ref> [Ra3, Ka, Wi] </ref>. A minterm of a monotone Boolean function is a minimal set of variables which, if assigned the value 1, force the function to take the value 1 regardless of the values assigned to the remaining variables.
Reference: [KW] <author> M. Karchmer and A. Wigderson: </author> <title> On span programs. </title> <booktitle> In Proc. 8th Ann. Symp. Structure in Complexity Theory, IEEE 1993, </booktitle> <pages> pp. 102-111. </pages>
Reference-contexts: 1 Introduction 1.1 Span programs Karchmer and Wigderson <ref> [KW] </ref> introduced span programs as a linear algebraic model for computing Boolean functions. Let us consider a linear space W over some field K; let w 6= 0 be a specified vector called the root. <p> The class of Boolean functions with polynomial size span programs is equivalent to the class of functions with polynomial size counting branching programs <ref> [BDHM, KW] </ref>. Span program size is a lower bound on the size of symmetric branching programs [KW]. The model of symmetric branching programs is essentially the same as that of (undirected) contact schemes (for definitions, see [KW]). Lower bounds for span programs also imply lower bounds for formula size. <p> The class of Boolean functions with polynomial size span programs is equivalent to the class of functions with polynomial size counting branching programs [BDHM, KW]. Span program size is a lower bound on the size of symmetric branching programs <ref> [KW] </ref>. The model of symmetric branching programs is essentially the same as that of (undirected) contact schemes (for definitions, see [KW]). Lower bounds for span programs also imply lower bounds for formula size. Span programs can be viewed as a model of parallel computation. <p> Span program size is a lower bound on the size of symmetric branching programs <ref> [KW] </ref>. The model of symmetric branching programs is essentially the same as that of (undirected) contact schemes (for definitions, see [KW]). Lower bounds for span programs also imply lower bounds for formula size. Span programs can be viewed as a model of parallel computation. <p> Span programs can be viewed as a model of parallel computation. Indeed, functions with polynomial size span programs over fixed finite fields belong to N C 2 . (This is immediate from the fact that linear algebra is in N C 2 <ref> [Ber, BDHM, KW, Mu] </ref>). As we shall see, the monotone analog of this statement fails badly; functions admitting polynomial size monotone span programs do not necessarily have polynomial size or even polylog depth monotone circuits (cf. Theorem 1.1 below). <p> As we shall see, the monotone analog of this statement fails badly; functions admitting polynomial size monotone span programs do not necessarily have polynomial size or even polylog depth monotone circuits (cf. Theorem 1.1 below). The reduction in <ref> [KW] </ref> from symmetric branching programs to span programs preserves monotonicity, and thus lower bounds for monotone span programs imply lower bounds for monotone symmetric branching programs and for monotone formula size. Lower bound techniques for monotone circuits and formulae are well known 2 (e.g. <p> from the arguments of Buntrock et al. [BDHM] that testing singularity of a variable matrix can be performed by polynomial size span programs. [BDHM] have not considered the model of span programs, but their model is equivalent to span programs up to polynomial increase in the size of the computation <ref> [KW] </ref>. Allender, Beals and Ogihara [ABO] showed explicitely how to construct polynomial size span programs for testing feasibility of systems of linear equations (Theorem 2.12 [ABO]). This gives the following. Theorem 2.7 (implicit in [BDHM, ABO]) Let K be an arbitrary field. <p> GF (p q (n) ), where q (n) is a given polynomial in n and p is an arbitrary prime. Finally, to get polynomial size span programs for PERFECT-MATCHING over arbitrary fields, we need the following result. Theorem 2.8 (implicit in <ref> [KW] </ref> Theorem 12) Span programs of size S over GF (p t ) can be simulated by span programs of size tS over GF (p). [KW] shows how to transform span programs of size S over GF (2 t ) into span programs of size tS over GF (2). <p> Finally, to get polynomial size span programs for PERFECT-MATCHING over arbitrary fields, we need the following result. Theorem 2.8 (implicit in <ref> [KW] </ref> Theorem 12) Span programs of size S over GF (p t ) can be simulated by span programs of size tS over GF (p). [KW] shows how to transform span programs of size S over GF (2 t ) into span programs of size tS over GF (2). They present their proof for monotone span programs computing majority, but their proof works as well for arbitrary span programs and finite fields of arbitrary characteristic.
Reference: [KW1] <author> M. Karchmer and A. Wigderson: </author> <title> Monotone Circuits for Connectivity require Super-Logarithmic Depth. </title> <journal> In SIAM Journal on Discrete Mathematics, </journal> <volume> Vol 3, No. 2, </volume> <year> 1990, </year> <pages> pp. 255-265. </pages>
Reference-contexts: Lower bound techniques for monotone circuits and formulae are well known 2 (e.g. Razborov [Ra1, Ra2, Ra3], Haken [Ha] for circuits, Karchmer-Wigderson <ref> [KW1] </ref>, Raz-Wigderson [RW] for formulae). These techniques, however, do not appear to be adaptable to the study of monotone span programs. Beimel, Gal and Paterson [BGP] showed that monotone span programs can be strictly stronger than monotone circuits. <p> all 2-colorings, the above argument suffices. 2 2.1.3 The lower bound for monotone formulae For the formula size (equivalently circuit depth) lower bound we use a similar method to the one used by Raz and Wigderson in [RW], which is based on the communication complexity approach of Karchmer and Wigderson <ref> [KW1] </ref>. Define the disjointness function on a pair x; y of u-bit vectors by DISJ (x; y) = 1 iff the sets represented by these vectors are disjoint. Theorem 2.4 ([KS, Ra4], cf. [BFS]) Any 1=3 error probabilistic communication protocol for DISJ requires (u) communication bits. We prove the following.
Reference: [KRS] <author> J. Kollar, L. Ronyai, T. Szabo: </author> <title> Norm-graphs and bipartite Turan numbers. </title> <journal> Combinatorica, </journal> <note> to appear. </note>
Reference-contexts: sizes of t-wise intersections for t = t (n) ! 1. (This function t (n) will go in the exponent of the lower bound.) The first idea we used for constructing such set systems was based on the recent progress made by Kollar, Ronyai, and Szabo on the Zarankiewicz problem <ref> [KRS] </ref>. The set system was obtained from the Paley-type graphs with special parameters called "norm graphs" by [KRS] and analysed by them using the elements of commutative algebra. <p> in the exponent of the lower bound.) The first idea we used for constructing such set systems was based on the recent progress made by Kollar, Ronyai, and Szabo on the Zarankiewicz problem <ref> [KRS] </ref>. The set system was obtained from the Paley-type graphs with special parameters called "norm graphs" by [KRS] and analysed by them using the elements of commutative algebra. This approach resulted in a lower bound of n ( p logn= log log n) on the monotone span program complexity of a family of explicit functins. 4 The result of [KRS] helped us a great deal in clarifying the <p> graphs with special parameters called "norm graphs" by <ref> [KRS] </ref> and analysed by them using the elements of commutative algebra. This approach resulted in a lower bound of n ( p logn= log log n) on the monotone span program complexity of a family of explicit functins. 4 The result of [KRS] helped us a great deal in clarifying the combinatorial structure we needed, and inspired the next step, which yielded a stronger bound.
Reference: [L] <author> L. Lovasz: </author> <title> On determinants, matchings and random algorithms. </title> <booktitle> Fundamentals of Computing Theory, </booktitle> <address> Akademia-Verlag, Berlin, </address> <year> (1979). </year> <month> 15 </month>
Reference-contexts: Tutte's theorem [Tu] states that a graph has a perfect matching if and only if its Tutte matrix is nonsingular. Based on Tutte's theorem and Schwartz's lemma [Schw] about probabilistic testing of polynomial identities, Lovasz <ref> [L] </ref> reduced the problem if a graph contains a perfect matching to testing if a given integer matrix is nonsingular. Theorem 2.6 [L] Let K be a field of order &gt; n 2 ( n 2 ) . <p> Based on Tutte's theorem and Schwartz's lemma [Schw] about probabilistic testing of polynomial identities, Lovasz <ref> [L] </ref> reduced the problem if a graph contains a perfect matching to testing if a given integer matrix is nonsingular. Theorem 2.6 [L] Let K be a field of order &gt; n 2 ( n 2 ) .
Reference: [LN] <author> R. Lidl, H. Niederreiter: </author> <title> Introduction to Finite Fields and their Applications, </title> <publisher> Cambridge University Press, </publisher> <year> 1986. </year>
Reference-contexts: These bipartite graphs are regular of degree (q 1)=k. (For this and other elementary facts about finite fields we refer the reader to Lidl-Niederreiter <ref> [LN] </ref>.) In order to construct the functions for which we are able to prove super-polynomial lower bounds, we need a set system for which one can control the sizes of t-wise intersections for t = t (n) ! 1. (This function t (n) will go in the exponent of the lower <p> idea is to replace every entry from GF (p t ) by an appropriate tfit matrix with entries from GF (p), using the representation of the elements of GF (p t ) as degree t polynomials over GF (p) with addition and multiplication performed modulo a fixed irreducible polynomial (see <ref> [LN] </ref>) and the fact that multiplication in this representation is a bilinear operator. Putting all these results together concludes the proof of Theorem 1.2. 3 The lower bounds for monotone span programs Proof of Theorem 1.3 Here we give the proof of our main result, Theorem 1.3.
Reference: [Mu] <author> K. Mulmuley: </author> <title> A fast parallel algorithm to compute the rank of a matrix over an arbitrary field. </title> <booktitle> Combinatorica 7 (1987), </booktitle> <pages> 101-104. </pages>
Reference-contexts: Span programs can be viewed as a model of parallel computation. Indeed, functions with polynomial size span programs over fixed finite fields belong to N C 2 . (This is immediate from the fact that linear algebra is in N C 2 <ref> [Ber, BDHM, KW, Mu] </ref>). As we shall see, the monotone analog of this statement fails badly; functions admitting polynomial size monotone span programs do not necessarily have polynomial size or even polylog depth monotone circuits (cf. Theorem 1.1 below).
Reference: [RW] <author> R. Raz and A. Wigderson: </author> <title> Monotone Circuits for Matching require Linear Depth. </title> <journal> Journal of the ACM, </journal> <volume> Vol 39, </volume> <year> 1992, </year> <pages> pp. 736-744. </pages>
Reference-contexts: Lower bound techniques for monotone circuits and formulae are well known 2 (e.g. Razborov [Ra1, Ra2, Ra3], Haken [Ha] for circuits, Karchmer-Wigderson [KW1], Raz-Wigderson <ref> [RW] </ref> for formulae). These techniques, however, do not appear to be adaptable to the study of monotone span programs. Beimel, Gal and Paterson [BGP] showed that monotone span programs can be strictly stronger than monotone circuits. <p> As odd 2-colorings constitute half of all 2-colorings, the above argument suffices. 2 2.1.3 The lower bound for monotone formulae For the formula size (equivalently circuit depth) lower bound we use a similar method to the one used by Raz and Wigderson in <ref> [RW] </ref>, which is based on the communication complexity approach of Karchmer and Wigderson [KW1]. Define the disjointness function on a pair x; y of u-bit vectors by DISJ (x; y) = 1 iff the sets represented by these vectors are disjoint.
Reference: [Ra1] <author> A. A. Razborov: </author> <title> Lower bounds for the monotone complexity of some Boolean functions. </title> <journal> Soviet Math. Doklady, </journal> <month> 31 </month> <year> (1985) </year> <month> 354-357. </month>
Reference-contexts: The reduction in [KW] from symmetric branching programs to span programs preserves monotonicity, and thus lower bounds for monotone span programs imply lower bounds for monotone symmetric branching programs and for monotone formula size. Lower bound techniques for monotone circuits and formulae are well known 2 (e.g. Razborov <ref> [Ra1, Ra2, Ra3] </ref>, Haken [Ha] for circuits, Karchmer-Wigderson [KW1], Raz-Wigderson [RW] for formulae). These techniques, however, do not appear to be adaptable to the study of monotone span programs. Beimel, Gal and Paterson [BGP] showed that monotone span programs can be strictly stronger than monotone circuits.
Reference: [Ra2] <author> A. A. Razborov: </author> <title> A lower bound on the monotone network complexity of the logical permanent. </title> <journal> Mat. </journal> <volume> Zametki 37 (1985), </volume> <pages> 887-900. </pages>
Reference-contexts: The reduction in [KW] from symmetric branching programs to span programs preserves monotonicity, and thus lower bounds for monotone span programs imply lower bounds for monotone symmetric branching programs and for monotone formula size. Lower bound techniques for monotone circuits and formulae are well known 2 (e.g. Razborov <ref> [Ra1, Ra2, Ra3] </ref>, Haken [Ha] for circuits, Karchmer-Wigderson [KW1], Raz-Wigderson [RW] for formulae). These techniques, however, do not appear to be adaptable to the study of monotone span programs. Beimel, Gal and Paterson [BGP] showed that monotone span programs can be strictly stronger than monotone circuits. <p> Razborov's lower bound for the perfect matching function <ref> [Ra2] </ref> gives a superpolynomial separation between monotone and non-monotone circuits, and a result by E. Tardos [T] shows an exponential gap. No separation is known between monotone and non-monotone span programs. A natural candidate for such separation would be the perfect matching function. <p> j) form an odd factor. 2 2.1.2 The lower bound for monotone circuits Despite the simplicity of this span program (as well as the trivial sequential algorithm) for this function, it has close affinity to the perfect matching problem, which makes it as difficult for monotone Boolean models. 5 In <ref> [Ra2] </ref>, Razborov proves an n (log n) monotone circuit lower bound for the perfect matching function. We observe that his proof actually gives a stronger result, stated below. <p> Given a 2-coloring of a vertex set, we consider the graph consisting of all edges whose endpoints have the same color by the given 2-coloring. We refer to this graph as the graph of the given 2-coloring. Theorem 2.2 (implicit in <ref> [Ra2] </ref> Lemma 7) Any monotone circuit that accepts all perfect matchings, and rejects any constant fraction of all the graphs of 2-colorings must have size n (log n) . We use this to prove the following. Theorem 2.3 Any monotone circuit computing ODDFACTOR n has size n (log n) .
Reference: [Ra3] <author> A. A. Razborov: </author> <title> On the method of approximation. </title> <booktitle> In Proc. 21st ACM STOC, </booktitle> <year> 1989, </year> <pages> pp. 167-176. </pages>
Reference-contexts: The reduction in [KW] from symmetric branching programs to span programs preserves monotonicity, and thus lower bounds for monotone span programs imply lower bounds for monotone symmetric branching programs and for monotone formula size. Lower bound techniques for monotone circuits and formulae are well known 2 (e.g. Razborov <ref> [Ra1, Ra2, Ra3] </ref>, Haken [Ha] for circuits, Karchmer-Wigderson [KW1], Raz-Wigderson [RW] for formulae). These techniques, however, do not appear to be adaptable to the study of monotone span programs. Beimel, Gal and Paterson [BGP] showed that monotone span programs can be strictly stronger than monotone circuits. <p> The idea is to show that if a small monotone span program accepts all the minterms of the function f then it must also accept an input that does not contain any minterms, a contradiction. This approach can be viewed as an application of the "fusion method" <ref> [Ra3, Ka, Wi] </ref>. A minterm of a monotone Boolean function is a minimal set of variables which, if assigned the value 1, force the function to take the value 1 regardless of the values assigned to the remaining variables.
Reference: [Ra4] <author> A. A. Razborov: </author> <title> On the distributional complexity of disjointness. </title> <booktitle> Theoretical Computer Science, 106, 1992, </booktitle> <volume> No. 2, </volume> <pages> pp. 385-390. </pages>
Reference: [Sch] <author> W. M. Schmidt: </author> <title> Equations over Finite Fields: An Elementary Approach. </title> <journal> Lect. Notes in Math. </journal> <volume> vol. 536, </volume> <publisher> Springer Verlag, </publisher> <year> 1976. </year>
Reference-contexts: Let t denote the number of distinct roots of f in the algebraic closure of GF (q). Under these circumstances, Weil's theorem gives the following bound. Theorem 3.7 (A. Weil) j x2GF (q) p (See e. g. <ref> [Sch, p. 43, Theorem 2C] </ref>.) Now we turn to the proof of Lemma 3.6. Let ! denote a primitive k th root of unity and let g be a generator of the multiplicative group of GF (q). Set (g ` ) = ! ` .
Reference: [Schw] <author> J. T. Schwartz: </author> <title> Fast probabilistic algorithms for verification of polynomial identities JACM, </title> <type> 27(4), </type> <year> 1980, </year> <pages> pp. 701-717. </pages>
Reference-contexts: Tutte's theorem [Tu] states that a graph has a perfect matching if and only if its Tutte matrix is nonsingular. Based on Tutte's theorem and Schwartz's lemma <ref> [Schw] </ref> about probabilistic testing of polynomial identities, Lovasz [L] reduced the problem if a graph contains a perfect matching to testing if a given integer matrix is nonsingular. Theorem 2.6 [L] Let K be a field of order &gt; n 2 ( n 2 ) .
Reference: [SV] <author> S. Skyum, L.G. Valiant: </author> <title> A complexity theory based on Boolean algebra. </title> <journal> JACM, </journal> <volume> 32(2), </volume> <year> 1985, </year> <pages> pp. 484-502. </pages>
Reference-contexts: This follows from the fact that the clique problem is monotone complete for N P , i.e. there is a monotone projection reduction from any function computable by monotone nondeterministic circuits to the clique problem <ref> [SV, GSi] </ref>. To summarize, let CLIQUE n be the function on m = n variables taking value 1 if and only if the input graph on n vertices contains a clique on n=2 vertices. We have the following corollary.
Reference: [St] <author> D. R. Stinson: </author> <title> An explicitation of secret sharing schemes. </title> <booktitle> Design, Codes and Cryptography 2 (1992), </booktitle> <pages> 357-390. </pages>
Reference-contexts: Our main result can therefore be interpreted as a superpolynomial lower bound for linear secret sharing schemes. For details we refer to the survey by Stinson <ref> [St] </ref> and to the extensive literature listed in [BGP]. The best known lower bound for general secret sharing schemes is (n 2 = log n) (Csirmaz [Cs]). This immediately implies the same lower bound for monotone span programs for explicit functions.
Reference: [T] <author> E. Tardos: </author> <title> The gap between monotone and non-monotone circuit complexity is exponential Combinatorica, </title> <type> 7(4), </type> <year> 1987, </year> <pages> pp. 141-142. </pages>
Reference-contexts: Razborov's lower bound for the perfect matching function [Ra2] gives a superpolynomial separation between monotone and non-monotone circuits, and a result by E. Tardos <ref> [T] </ref> shows an exponential gap. No separation is known between monotone and non-monotone span programs. A natural candidate for such separation would be the perfect matching function.
Reference: [Tu] <author> W. T. Tutte: </author> <title> The factorization of linear graphs J. </title> <journal> London Math. Soc. </journal> <volume> 22, </volume> <year> 1947, </year> <pages> pp. 107-111. </pages>
Reference-contexts: The Tutte matrix of a graph G is obtained from its adjacency matrix by substituting indeterminates y ij or y ij (according to an arbitrary orientation) for the edges of G, and leaving the entries corresponding to non-edges 0. Tutte's theorem <ref> [Tu] </ref> states that a graph has a perfect matching if and only if its Tutte matrix is nonsingular.
Reference: [We] <author> I. Wegener: </author> <title> The Complexity of Boolean Functions. </title> <month> Wiley-Teubner </month> <year> 1987. </year>
Reference: [Wi] <author> A. Wigderson: </author> <title> The fusion method for lower bounds in circuit complexity. In: Combinatorics, </title> <editor> Paul Erd-os is Eighty, </editor> <volume> (Volume 1), </volume> <editor> D. Miklos, V. T. Sos, T. Sz-onyi, eds., </editor> <booktitle> Bolyai Society Mathematical Studies 1, Budapest 1993, </booktitle> <pages> pp. 453-467. </pages>
Reference-contexts: The idea is to show that if a small monotone span program accepts all the minterms of the function f then it must also accept an input that does not contain any minterms, a contradiction. This approach can be viewed as an application of the "fusion method" <ref> [Ra3, Ka, Wi] </ref>. A minterm of a monotone Boolean function is a minimal set of variables which, if assigned the value 1, force the function to take the value 1 regardless of the values assigned to the remaining variables.
References-found: 36

