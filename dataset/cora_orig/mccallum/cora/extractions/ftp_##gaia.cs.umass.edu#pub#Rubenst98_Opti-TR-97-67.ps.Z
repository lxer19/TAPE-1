URL: ftp://gaia.cs.umass.edu/pub/Rubenst98:Opti-TR-97-67.ps.Z
Refering-URL: http://www-net.cs.umass.edu/papers/papers.html
Root-URL: 
Email: fdrubenst,kurose,towsleyg@cs.umass.edu  
Title: Optimistic Parallel Simulation of Reliable Multicast Protocols  
Author: Dan Rubenstein Jim Kurose Don Towsley 
Address: Amherst MA 01003 USA  
Affiliation: Department of Computer Science University of Massachusetts  
Abstract: Technical Report 97-67 y Department of Computer Science December 1997 Abstract Parallel discrete-event simulation offers the promise of harnessing the computational power of multiple processors in order to reduce the time needed for simulation-based performance studies. In this paper, we investigate the use of optimistic parallel simulation techniques in simulating reliable multicast communication network protocols. Through empirical studies (using the TeD simulation programming language, the Georgia Tech time warp simulator, and a 12-processor SGI Challenge), we find that these parallelized simulations can run noticeably faster than a uniprocessor simulation and, in a number of cases, can make effective use of parallel resources. These results are somewhat surprising because reliable multicast protocols require considerable communication (and hence synchronization) among different network entities. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Perumalla, A. Ogielski and R. Fujimoto, MetaTeD: </author> <title> A Meta Language for Modeling Telecommunication Networks, GIT-CC-96-32, </title> <type> Technical Report, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <year> 1997. </year> <note> URL: http://www.cc.gatech.edu/computing/pads/ted.html </note>
Reference-contexts: In this paper, we empirically investigate the use of so-called "optimistic" parallel simulation techniques in simulating reliable multicast protocols. We use the TeD simulation programming language <ref> [1] </ref> for specifying the network model and the Georgia Tech time warp simulation engine [2] to run the simulation code produced by TeD. <p> Section 5 concludes the paper. 2 Simulation Environment and Network Protocol Models In this section we briefly overview the TeD simulation language, the GTW parallel simulator, and the network protocols and network models considered in this study. Our multicast protocol models are specified in TeD <ref> [1] </ref>, an object-oriented discrete-event modeling language based loosely on the VHSIC Hardware Description Language (VHDL) [3]. Here, we only briefly describe TeD; a more complete description can be found in an accompanying article in this special issue of Performance Evaluation Review.
Reference: [2] <author> R. M. Fujimoto, </author> <title> Time Warp on a Shared Memory Multiprocessor, </title> <journal> Transactions of the Society for Computer Simulation, </journal> <volume> Vol. 6, No. 3, </volume> <pages> pp. 211-239, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: In this paper, we empirically investigate the use of so-called "optimistic" parallel simulation techniques in simulating reliable multicast protocols. We use the TeD simulation programming language [1] for specifying the network model and the Georgia Tech time warp simulation engine <ref> [2] </ref> to run the simulation code produced by TeD. We find that on a 12-processor SGI Challenge shared-memory multiprocessor, these parallelized simulations not only run noticeably faster than an unparallelized uniprocessor simulation, but also make fairly effective use of the available parallel processing resources. <p> Once a model is defined in TeD, it is pre-processed into a lower level language of choice (e.g., C++ [4] in our studies), which is then compiled to create an executable. The executable makes use of the GTW parallel simulation architecture <ref> [2] </ref>, an event-based optimistic parallel simulator. GTW operates on multiple processors by initiating a parent process which then forks off child processes so that there is a single process on each processor being used in the simulation. Processes communicate through shared memory.
Reference: [3] <author> J. Bhasker, </author> <title> A VHDL Primer, </title> <publisher> Prentice Hall, </publisher> <year> 1995. </year>
Reference-contexts: Our multicast protocol models are specified in TeD [1], an object-oriented discrete-event modeling language based loosely on the VHSIC Hardware Description Language (VHDL) <ref> [3] </ref>. Here, we only briefly describe TeD; a more complete description can be found in an accompanying article in this special issue of Performance Evaluation Review. TeD provides three basic types of modeling objects: events, entities, and channels.
Reference: [4] <author> K. Perumalla and R. Fujimoto, </author> <title> A C++ Instance of TeD, GIT-CC-96-33, </title> <type> Technical Report, </type> <institution> College of Computing, Georgia Institute of Technology, </institution> <year> 1997. </year> <note> URL: http://www.cc.gatech.edu/computing/pads/ted.html </note>
Reference-contexts: This results in an event (e.g., packet delivery at the other end of the channel) occurring at the other end of the channel after the given amount of time. Once a model is defined in TeD, it is pre-processed into a lower level language of choice (e.g., C++ <ref> [4] </ref> in our studies), which is then compiled to create an executable. The executable makes use of the GTW parallel simulation architecture [2], an event-based optimistic parallel simulator.
Reference: [5] <author> R.M. Fujimoto, </author> <title> Parallel Discrete Event Simulation, </title> <journal> Communications of the ACM, pp. </journal> <volume> 30-53, Vol. 33, No. 10, </volume> <month> Oct., </month> <year> 1990. </year>
Reference-contexts: Processes communicate through shared memory. Note that because GTW is an an optimistic simulator, events occurring in different processes on different processors may require synchronization among these processes and rollback of the simulation state when a process finds that it has incorrectly proceeded beyond a synchronization point. See <ref> [5] </ref> and the references therein for a discussion of these issues. Having briefly described our simulation environment, let us now turn to the network protocols being modeled. We will model a one-to-many reliable multicast session, following the model in [6].
Reference: [6] <author> D. Towsley, J. Kurose, S. Pingali, </author> <title> A Comparison of Sender-Initiated and Receiver-Initiated Reliable Multicast Protocols, </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <year> 1997. </year>
Reference-contexts: See [5] and the references therein for a discussion of these issues. Having briefly described our simulation environment, let us now turn to the network protocols being modeled. We will model a one-to-many reliable multicast session, following the model in <ref> [6] </ref>. In this model, a single sender distributes data to multiple receivers by partitioning it into packets, and transmitting these packets across the network. <p> We assume here that the loss processes are independent (and homogeneous) among receivers and in time. The manner in which a receiver recovers from lost data depends on the specific reliable multicast protocol being used. In <ref> [6] </ref> three generic reliable multicast protocols are described; the reader is referred to [6] for details. <p> We assume here that the loss processes are independent (and homogeneous) among receivers and in time. The manner in which a receiver recovers from lost data depends on the specific reliable multicast protocol being used. In <ref> [6] </ref> three generic reliable multicast protocols are described; the reader is referred to [6] for details. One of these is an ACK-based protocol that puts the burden of detecting and recovering from errors on the sender; the other two protocols place more of the burden for loss recovery on the receivers. <p> When a sender has no incoming packets (ACKs) to process or retransmissions to perform, it sends a new data packet. We thus assume here that the source effectively has an infinite supply of new messages to send, reflecting our interest here (as in <ref> [6] </ref>) in determining the maximum supportable throughput of the various reliable multicast protocols. <p> As in the ACK protocol, when a sender has no incoming packets (NAKs) to process or retransmissions to perform, it sends a new data packet. * NAK2: The two previous protocols deteriorate in performance as the receiver set grows large <ref> [6] </ref>. This is because each receiver communicates its status (ACK or NAK) to the sender, which becomes a bottleneck. The NAK2 protocol alleviates this problem by reducing receiver feedback. NAK2 is similar to NAK1 protocol with the following exceptions. <p> First, we wanted to verify (though simulation) a number of the modeling assumptions adopted in our earlier analytic work <ref> [6, 7] </ref>. Second, we wanted to use TeD and GTW in the network modeling domain in order to better understand and test their capabilities. Finally, we wanted to evaluate the benefits of using parallel simulation to model reliable multicast protocols.
Reference: [7] <author> M. Yamamoto, J. Kurose, D. Towsley, H. Ikeda, </author> <title> A Delay Analysis of Sender-Initiated and Receiver-Initiated Reliable Multicast Protocols, </title> <booktitle> Proc. IEEE Infocom97, </booktitle> <address> Kobe Japan, </address> <month> April 97. </month>
Reference-contexts: A performance metric of interest not considered here is the delay associated with reliable packet delivery <ref> [7] </ref>. * NAK1: The NAK1 protocol requires each receiver to unicast a negative acknowledgment (NAK) to the sender for each data packet that it has not received. <p> First, we wanted to verify (though simulation) a number of the modeling assumptions adopted in our earlier analytic work <ref> [6, 7] </ref>. Second, we wanted to use TeD and GTW in the network modeling domain in order to better understand and test their capabilities. Finally, we wanted to evaluate the benefits of using parallel simulation to model reliable multicast protocols.
Reference: [8] <author> Sally Floyd, Van Jacobson, Ching-Gung Liu, Steven McCanne, and Lixia Zhang, </author> <title> A Reliable Mul--ticast Framework for Light-Weight Sessions and Application Level Framing. </title> <booktitle> Proc. ACM SigComm 1995. </booktitle>
Reference-contexts: The NAK2 protocol reduces the burden at the sender but requires that receivers process both data packets and NAKs. It has been shown in practice that reliable multicast protocols adopting this approach perform quite effectively in real networks such as the Internet <ref> [8] </ref>. 3 Simulation Issues Our goals in undertaking this study were threefold. First, we wanted to verify (though simulation) a number of the modeling assumptions adopted in our earlier analytic work [6, 7].
Reference: [9] <author> Phil Heidelberger, </author> <title> Discrete Event Simulations and Parallel Processing: Statistical Properties, </title> <journal> SIAM Journal on Scientific and Statistical Computing. </journal> <volume> 9, </volume> <pages> 1114-1132. </pages>
Reference-contexts: such cases, an alternative approach to exploiting parallelism is to distribute these multiple runs among the various processors, rather than sequentially running parallel simulations. (We note, however, that computing confidence intervals by running sequential simulations on n processors does not necessarily give a speedup of n; as one might expect <ref> [9] </ref>.) Yet another alternative is possible when multiple simulation experiments are to be run (e.g., under different parameter values). In this case, one could divide the experiments among the various processors and perform the different experiments in parallel. In such a case, a speedup of close to n is likely.
References-found: 9

