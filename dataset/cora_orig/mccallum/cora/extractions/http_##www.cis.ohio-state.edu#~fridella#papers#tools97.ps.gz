URL: http://www.cis.ohio-state.edu/~fridella/papers/tools97.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/~fridella/papers.html
Root-URL: 
Email: e-mail: fneelam,fridellag@cis.ohio-state.edu  
Title: Inheriting and Modifying Behavior  
Author: Neelam Soundarajan and Stephen Fridella 
Keyword: Derived classes, Protected members, Abstract and Concrete specifications.  
Address: Columbus, OH 43210  
Affiliation: Computer and Information Science The Ohio State University  
Abstract: In languages like C++, the mechanism of protected members is critical to making inheritance work. It allows access to some of the internals of a base class B to the designer of a derived class D, while denying it to clients of B. We develop a formal approach in which class behavior is precisely specified in terms of an abstract specification and a concrete specification, the former for use by a client, the latter containing information about how the protected members change, for use by a derived class designer. We present rules that allow us to establish that a class meets both specifications. 
Abstract-found: 1
Intro-found: 1
Reference: [AC95] <author> M. Abadi and L. Cardelli. </author> <title> On subtyp-ing and matching. </title> <booktitle> In ECOOP, </booktitle> <volume> LNCS 952, </volume> <pages> pages 145-167. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Much work 10 This is exactly the approach of, for e.g., Jones [Jon90], where inheritance is not considered. has been done in allowing for much more flexible forms of inheritance <ref> [AC95, BSvG95] </ref>. The focus of much of this work has been to build precise models, in a denotational style, of how these mechanisms are intended to work. Once that question is settled, it would be appropriate to investigate specification and verification methods for classes built using these forms of inheritance.
Reference: [BSvG95] <author> K.B. Bruce, A. Schuett, and R. van Gent. Polytoil: </author> <title> A type-safe polymorphic object-oriented language. </title> <booktitle> In ECOOP, </booktitle> <volume> LNCS 952, </volume> <pages> pages 27-51. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Much work 10 This is exactly the approach of, for e.g., Jones [Jon90], where inheritance is not considered. has been done in allowing for much more flexible forms of inheritance <ref> [AC95, BSvG95] </ref>. The focus of much of this work has been to build precise models, in a denotational style, of how these mechanisms are intended to work. Once that question is settled, it would be appropriate to investigate specification and verification methods for classes built using these forms of inheritance.
Reference: [Cas95] <author> G. Castagna. </author> <title> Covariance and con-travariance: conflict without a cause. </title> <journal> ACM TOPLAS, </journal> <year> 1995. </year>
Reference-contexts: is also inherited. 3 2 If f is not redefined in D but invokes functions that are, we will have a problem; we will consider this problem later in the paper. 3 One question that of covariance versus contra-variance- that has received much attention in the literature (see, for instance, <ref> [Cas95] </ref>) has to do with what kinds of changes, if any, should be permitted in the types of any The rest of the paper is organized as follows: In the next section we present a simple example to illustrate the typical use of inheritance to build a new class by inheritance
Reference: [DN66] <author> O.J. Dahl and K. Nygaard. </author> <title> Sim-ula an algol-based simulation language. </title> <journal> Communications of the ACM, </journal> <volume> 9(9) </volume> <pages> 671-678, </pages> <month> Sept </month> <year> 1966. </year>
Reference-contexts: designer of D has a good understanding of the protected data members of B and a good understanding of how the mem 1 The use of the term "protected" to denote a component that is hidden from the client class but accessible to the derived class was introduced by SIMULA <ref> [DN66] </ref>. Eiffel does not use the term "protected", but in effect, all features of on Eiffel base class are accessible to the derived class (see [Mey88], section 11.5).
Reference: [GHW85] <author> J. Guttag, J. Horning, and J. Wing. </author> <title> The larch family of specification languages. </title> <journal> IEEE Software, </journal> <volume> 2, </volume> <year> 1985. </year>
Reference: [Hor95] <author> C. Horstmann. </author> <title> Mastering Object-Oriented Design in C++. </title> <publisher> Wiley, </publisher> <year> 1995. </year>
Reference: [Jon90] <author> C. Jones. </author> <title> Systematic Software Development Using VDM. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference-contexts: Much work 10 This is exactly the approach of, for e.g., Jones <ref> [Jon90] </ref>, where inheritance is not considered. has been done in allowing for much more flexible forms of inheritance [AC95, BSvG95]. The focus of much of this work has been to build precise models, in a denotational style, of how these mechanisms are intended to work.
Reference: [Lam93] <author> J. Lamping. </author> <title> Typing the specialization interface. </title> <booktitle> In OOPSLA, </booktitle> <pages> pages 201-214, </pages> <year> 1993. </year>
Reference-contexts: 0 ] (1a 0 ) g i () ^ I ( t )] ) [c:post g i ( t; 0 t 0 )] ) c:post f g i (; 0 ) (1c 0 ) The discussion in the last paragraph bears some resemblance to the discussion in <ref> [Lam93] </ref>and [SG95]. In [Lam93], Lamping considers the question of how to include, in the interface specification of a class, information about which (virtual) functions g a given function f depends on. He introduces notation for providing this specification but [Lam93]focuses mainly on the typing issues rather than providing information on what properties of g
Reference: [LW93] <author> B. Liskov and J. Wing. </author> <title> A new definition of the subtype relation. </title> <booktitle> In ECOOP, </booktitle> <year> 1993. </year>
Reference-contexts: Many of the existing formalisms such as those of Leavens and Weihl [LW95], Liskov and Wing <ref> [LW93] </ref>, [LW94], that consider the question of relations between classes focus on the issue of behavioral subtyping. <p> The abstract specification A will be the usual ADT-type specification, in terms of a conceptual, mathematical model of B, with the individual methods of B being specified as pre-and post-conditions in this conceptual model. In formalisms like that of <ref> [LW93] </ref>, A would essentially be the complete specification of B, and indeed we will borrow notation for this part of our specification from [LW93]. <p> In formalisms like that of <ref> [LW93] </ref>, A would essentially be the complete specification of B, and indeed we will borrow notation for this part of our specification from [LW93]. We could also include an invariant in A although for simplicity we will not do so. (The invariant may be incorporated into the pre- and post-conditions of each operation rather than being specified separately). <p> Once this is done, we can proceed to establish any relations, such as behavioral subtyping, between it and any other classes, including the base class, using systems like those of <ref> [LW93] </ref>, [LW95]. We should also note that our interest has been exclusively on specifying and verifying, using an axiomatic approach, the behaviors of classes defined using inheritance with the derived classes being allowed to access the base classes' protected members.
Reference: [LW94] <author> B. Liskov and J. Wing. </author> <title> A behavioral notion of subtyping. </title> <journal> ACM TOPLAS, </journal> <volume> 16, </volume> <year> 1994. </year>
Reference-contexts: Many of the existing formalisms such as those of Leavens and Weihl [LW95], Liskov and Wing [LW93], <ref> [LW94] </ref>, that consider the question of relations between classes focus on the issue of behavioral subtyping.
Reference: [LW95] <author> G. Leavens and W. Weihl. </author> <title> Specification and verification of object-oriented programs using supertype abstraction. </title> <journal> Acta Informatica, </journal> <volume> 32 </volume> <pages> 705-778, </pages> <year> 1995. </year>
Reference-contexts: Many of the existing formalisms such as those of Leavens and Weihl <ref> [LW95] </ref>, Liskov and Wing [LW93], [LW94], that consider the question of relations between classes focus on the issue of behavioral subtyping. <p> Once this is done, we can proceed to establish any relations, such as behavioral subtyping, between it and any other classes, including the base class, using systems like those of [LW93], <ref> [LW95] </ref>. We should also note that our interest has been exclusively on specifying and verifying, using an axiomatic approach, the behaviors of classes defined using inheritance with the derived classes being allowed to access the base classes' protected members.
Reference: [Mey88] <author> B. Meyer. </author> <title> Object-Oriented Software Construction. </title> <publisher> Prentice Hall, </publisher> <year> 1988. </year>
Reference-contexts: Eiffel does not use the term "protected", but in effect, all features of on Eiffel base class are accessible to the derived class (see <ref> [Mey88] </ref>, section 11.5).
Reference: [SG95] <author> R. Stata and J.V. Guttag. </author> <title> Modular reasoning in the presence of subclass-ing. </title> <booktitle> In OOPSLA. </booktitle> <publisher> ACM Press, </publisher> <year> 1995. </year>
Reference-contexts: = t 0 ] (1a 0 ) g i () ^ I ( t )] ) [c:post g i ( t; 0 t 0 )] ) c:post f g i (; 0 ) (1c 0 ) The discussion in the last paragraph bears some resemblance to the discussion in [Lam93]and <ref> [SG95] </ref>. In [Lam93], Lamping considers the question of how to include, in the interface specification of a class, information about which (virtual) functions g a given function f depends on. <p> He introduces notation for providing this specification but [Lam93]focuses mainly on the typing issues rather than providing information on what properties of g f depends. In <ref> [SG95] </ref> Stata and Guttag propose a specialization specification which tries to capture such properties.
References-found: 13

