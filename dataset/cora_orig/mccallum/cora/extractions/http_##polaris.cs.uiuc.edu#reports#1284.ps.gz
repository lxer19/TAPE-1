URL: http://polaris.cs.uiuc.edu/reports/1284.ps.gz
Refering-URL: http://polaris.cs.uiuc.edu/tech_reports.html
Root-URL: http://www.cs.uiuc.edu
Title: An Analysis of a Cedar Implementation of  
Author: dyfesm U. Meier Yang K. A. Gallivan 
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Eigenmann, </author> <title> Automatic Parallelization and Manual Improvements of the Perfect Club: Program DYFESM on Alliant FX/80, FX/8, and Cedar, </title> <institution> Working Report,CSRD, University of Illinois at Urbana-Champaign, </institution> <year> 1992. </year>
Reference-contexts: The mappings to Cedar of two of the key computational primitives are discussed along with the relationship of the approaches to the particular problem used in the benchmark. For a consideration of this code from the point of view of a restructuring compiler the reader is referred to <ref> [1] </ref>. Section 2 describes the governing equations and the method used to solve them. Sections 3 and 4 present the code structure and a brief description of the test problem. <p> Unfortunately, the system is only of order 32 and cannot be effectively split across CEs. Therefore, the most successful approach using Fortran for the test problem is simple vectorization. This was done in the automatable version <ref> [1] </ref>. Further improvement was achieved by replacing chosol by the optimized single CE routine chosol6. The optimizations required a change in data structure and, therefore, a corresponding change was required in the routine chofac. <p> All runs were made using real*8 arithmetic. We use as a starting point the automatable parallel version discussed in <ref> [1] </ref> with matmul replaced by a library matrix-vector product routine dmxv which in turn uses the assembler level routine mtvb. This code runs in an average 59 seconds on 4 clusters. <p> The associated speedups, each version relative to itself on 1 CE, are in Tables 14 to 16. In order to interpret these results we recapitulate the major differences between the versions of the code. REIP5 is representative of the results possible via automatable transformations and simple library substitution <ref> [1] </ref>. No application or detailed algorithm knowledge was exploited in its development. KGIP8 improves on REIP5 in two ways. First is the use of the chosol6 primitive in place of chosol.
Reference: [2] <author> M. Berry et al., </author> <title> The Perfect Club Benchmarks: Effective performance evaluation of supercomputers, </title> <journal> International Journal of Supercomputer Applications, </journal> <volume> Vol. 3, </volume> <pages> pp. 5-40, </pages> <year> 1989. </year>
Reference-contexts: The Perfect benchmark suite is one attempt to provide more complex codes from different application areas, including a variety of test data. This report considers the Perfect code dyfesm <ref> [2] </ref>. We concentrate on providing some insight into the influence of application/algorithm considerations and the problem size on the performance observed on Cedar.
References-found: 2

