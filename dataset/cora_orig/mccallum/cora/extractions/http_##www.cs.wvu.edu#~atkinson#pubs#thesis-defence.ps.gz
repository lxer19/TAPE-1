URL: http://www.cs.wvu.edu/~atkinson/pubs/thesis-defence.ps.gz
Refering-URL: http://www.cs.wvu.edu/~atkinson/publications.html
Root-URL: http://www.cs.wvu.edu
Title: Proposed Thesis Amendments and Responses to Examiner Comments  
Author: Steven Atkinson 
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. J. Bates. </author> <title> Where should the person stop and the information search interface start? Information Processing and Management, </title> <booktitle> 26(5) </booktitle> <pages> 575-591, </pages> <year> 1990. </year>
Reference-contexts: The active role of humans during the search process is mentioned on [p25]. Action To emphasise the point, add after [p185,5]: "There remains a role for human decision making and control during matching and retrieval (as argued for by Bates <ref> [1] </ref>), particularly as to whether the cost of retrieval and adaptation outweighs the cost of development, and as to the application of composition operators to modify components in a desired fashion." Suggestion 1 Suggestion "Formal (or at least rigorous) specification and maintenance of the design rationale (s) and abstractions used to
Reference: [2] <author> S. Butler and R. Duke. </author> <title> Defining Composition Operators for Object Interaction. </title> <type> Technical Report 96-12, </type> <institution> Software Verification Research Cen-tre, Dept. of Computer Science , Univ. of Queensland, </institution> <year> 1996. </year> <note> Accepted in Journal of Object-oriented Systems (OOS). </note>
Reference-contexts: Action Amend [p80,3] to read: "A number of different collaboration styles are defined in Object-Z <ref> [2] </ref>. The Transfer operation currently uses the sequential style of collaboration between operations (denoted by symbol o 9 ), which sequentially composes two operations so that outputs of the first are avail able as inputs to the second.
Reference: [3] <author> L.M. Chan. </author> <title> Cataloging and Classification: An Introduction. McGraw-Hill series in library eduction. </title> <publisher> McGraw-Hill, </publisher> <year> 1981. </year>
Reference: [4] <author> E.W. Dijkstra. </author> <title> On the teaching of programming, i.e. on the teaching of thinking. </title> <booktitle> In Language Hierarchies and Interfaces (Lecture notes in Computer Science Vol 46), </booktitle> <pages> pages 1-10. </pages> <publisher> Springer-Verlag, </publisher> <year> 1976. </year>
Reference-contexts: It is the role of a software library to effectively communicate the designer's mental model of a software component to the users of the library software engineers." * Amend <ref> [p33, 4] </ref>: "Section 3.2 examines the libraries' approaches to cognitive problems arising from component representation issues: namely exposing underlying library structure (i.e. increasing the visibility of the system image [13, p17] (see Figure 1)) , and augmenting component interfaces (i.e. allowing the user to form a mental model of the system
Reference: [5] <author> M. Gorman and P. Winkler. </author> <title> Anglo-American Cataloguing Rules. </title> <publisher> American Library Association, </publisher> <year> 1988. </year> <note> Second Edition, prepared by the Joint Steering Committee for Revision of AACR,. </note>
Reference-contexts: The American Library Association defines the task of bibliographic control as <ref> [5, p4] </ref> "the 12 skill or art ... of organizing knowledge (information) for retrieval.". Since the role of software libraries is to communicate information to software engineers, consideration of techniques for organizing, cataloging and classifying traditional library holdings are of relevance when considering software components in a software library.
Reference: [6] <author> IEEE. </author> <title> IEEE Standard 1042: IEEE Guide to Software Configuration Management. </title> <year> 1987. </year>
Reference-contexts: 23-25) In classification based schemes, vocabularies are different from ontologies since names (especially in "colloquial" language) do not always imply semantics; specifically the same name may have different meanings in different contexts and vice versa." Response Vocabularies and ontologies are adequately distinguished as sep arate techniques for external classification on <ref> [p23, 6] </ref>. 1 The question as to within what context one can assign meaning to vo-cabulary items as opposed to ontologies does not warrant consideration at the level of abstraction the retrieval schemes are being characterised the point is that these entities are invented externally to the components under consideration. <p> Generally, SCM concerns the control of all development artefacts throughout the system life-cycle, to preserve the definitions of component versions and the relationships among them <ref> [6] </ref>. Here we consider a configuration item to be a general software component as specified in Chapter 4. In this subsection we consider the impact of SCM techniques upon the processes of insertion and removal, to be defined in Sections 5.3 and 5.4.
Reference: [7] <author> ISO/IEC. </author> <title> Open Distributed Processing Reference Model. ISO/IEC Document 10746, </title> <year> 1995. </year>
Reference-contexts: Clearly the point about meanings being contextually interpreted is rel evant, but is better made on [p25,7]. Action Add to <ref> [p25, 7, after first sentence] </ref> "To apply such an assumption to the software retrieval problem is to ignore the semantics inherent in software component structure." The next sentence clearly implies the interpretation of software components within a given context. <p> Action Add to future work section: "The models constructed in this thesis are largely based on the assumption that a software library is viewed as an information system. As a standard model for the construction of distributed information systems, the Open Distributed Processing (ODP) document <ref> [7] </ref> represents a framework within which the models of a software library can be placed. The models presented in this thesis can be extended to cover more of the information and enterprise viewpoints of the ODP document.
Reference: [8] <author> ISO/IEC. </author> <title> Open Distributed Processing Reference Model: Part 3: Architecture. ITU-T Recommendation X.903, </title> <address> ISO/IEC 10746-3, </address> <year> 1995. </year>
Reference-contexts: Comment 3 Comment "(p 54) data model corresponds to invariant schemata <ref> [8] </ref> rather than static schema. It is unclear what happens (and how to model) nonhierarchical compositions i.e. situations when a subcomponents may be a component of more than one composite. <p> Action * Amend [p54,2] to include a reference to the ISO document, and mention that the modelling in this chapter will cover aspects of the invariant and static schemas for a software library: "... such a model forms the invariant and static schemas (following standard information systems terminology <ref> [8] </ref>) for the software library. <p> Currently, the enclosure hierarchy captures syntactic subcomponents. Additional hierarchies could be used to model annotations and relevant semantic proper ties of components. Comment 4 Comment "(p 85) integrity constraints governing valid states and transac tions are presumably expressible as invariant schemata <ref> [8] </ref>." Response Agreed, integrity constraints can indeed be expressed as invariant schemata. This will be mentioned in passing. Action Add to [p86,4] "...valid database transactions, and are generally expressible as invariant schematic constraints [8]." Comment 5 Comment "(p 141) when classes are represented, in specification matching, by collections of pairs of <p> Comment "(p 85) integrity constraints governing valid states and transac tions are presumably expressible as invariant schemata <ref> [8] </ref>." Response Agreed, integrity constraints can indeed be expressed as invariant schemata. This will be mentioned in passing. Action Add to [p86,4] "...valid database transactions, and are generally expressible as invariant schematic constraints [8]." Comment 5 Comment "(p 141) when classes are represented, in specification matching, by collections of pairs of predicates, it may be of interest to consider matching of class invariants since these invariants may determine fundamental properties of the classes.
Reference: [9] <author> T. Korson and J.D. McGregor. </author> <title> Technical criteria for the specification and evaluation of object-oriented libraries. </title> <journal> Software Engineering Journal, </journal> <pages> pages 85-94, </pages> <month> March </month> <year> 1992. </year> <month> 25 </month>
Reference-contexts: Action Amend typographical errors as specified. Comment 8 Comment "The definitions of domain-complete, -abstract and -standard do not seem very precise or useful. (page 14)" 16 Response The criteria are disclaimed as not complete in any sense. The terms are explained in detail in Korson <ref> [9] </ref>, and I did not want to repeat the definitions in detail. The intention is to give a feel for some of the concerns a library designer may ponder.
Reference: [10] <author> P. A. Lindsay and O. Traynor. </author> <title> Version and configuration management of formal theories. </title> <type> Technical report 97-13, </type> <institution> Software Verification Research Centre, School of Information Technology, The University of Queens-land, </institution> <address> Brisbane 4072. Australia, </address> <month> February </month> <year> 1997. </year>
Reference-contexts: These results apply equally to the model of Object-Z specifications developed in Section 4.5; future work involves application of configuration management activities to the general component model. Lindsay and Traynor <ref> [10] </ref> present a generic model of consistency and change management for systems where configuration items comprise further configuration items which are themselves subject to another regime of configuration management. This scenario is analogous to an 21 evolving software library system that contains components which are independently versioned.
Reference: [11] <author> B. Meyer. </author> <title> Reusable Software The Base object-oriented component libraries. </title> <publisher> Prentice Hall, </publisher> <address> ISE, </address> <institution> Santa Barbara and SOL, Paris, </institution> <year> 1994. </year>
Reference-contexts: Action Amend [p17,1] to read: " "All the components of a library should proceed from an overall coherent design, and follow a set of systematic, explicit and uniform conventions." - Meyer <ref> [11, p62] </ref> " Comment 11 Comment "It is poor style to begin paragraphs with `Therefore...' " Response Agreed.
Reference: [12] <author> D.A. Norman. </author> <title> Cognitive Engineering. In D.A. </title> <editor> Norman and S.W. Draper, editors, </editor> <title> User Centred System Design: new perspectives on human-computer interaction, </title> <year> 1986. </year>
Reference-contexts: These mental models serve two purposes: to predict and to explain the behaviour of artefacts. In earlier work, Norman <ref> [12] </ref> depicts a general situation (see Figure 1) where the designer of an artefact must communicate with the eventual user of that artefact through a system. Norman states [13, p16]: "The design model is the designer's mental model of the artefact.
Reference: [13] <author> D.A. Norman. </author> <title> The Design of Everyday Things. </title> <publisher> Bantam Doubleday Dell Publishing Group, Inc., </publisher> <year> 1988. </year> <note> ISBN 0-385-26774-6. </note>
Reference-contexts: For book libraries, this model comprises the entries a cataloger must make for each kind of artefact being stored. This thesis is the presentation of such a model for software components that takes advantage of the structure and semantics of these designed software artefacts. Norman <ref> [13] </ref> shows how the field of cognitive psychology has progressed by using the idea of people having mental models of the artefacts with which they interact. These mental models serve two purposes: to predict and to explain the behaviour of artefacts. <p> Action To address the comment concerning an inadequate contextual placement of the work within a broader spectrum of library and cognitive science, the following amendments will be undertaken: * Add to [p4, after 2]: "The problems associated with communication of information have been examined by Norman <ref> [13] </ref> who shows 10 how the field of cognitive psychology has progressed by using the idea of people having mental models of the artefacts with which they interact. These mental models serve two purposes: to predict and to explain the behaviour of artefacts. <p> These mental models serve two purposes: to predict and to explain the behaviour of artefacts. In earlier work, Norman [12] depicts a general situation (see Figure 1) where the designer of an artefact must communicate with the eventual user of that artefact through a system. Norman states <ref> [13, p16] </ref>: "The design model is the designer's mental model of the artefact. The user's model is the mental model developed through interaction with the system. The system image results from the physical structure that has been built to support communication. <p> to effectively communicate the designer's mental model of a software component to the users of the library software engineers." * Amend [p33, 4]: "Section 3.2 examines the libraries' approaches to cognitive problems arising from component representation issues: namely exposing underlying library structure (i.e. increasing the visibility of the system image <ref> [13, p17] </ref> (see Figure 1)) , and augmenting component interfaces (i.e. allowing the user to form a mental model of the system image in a more natural manner [13, p23]). <p> approaches to cognitive problems arising from component representation issues: namely exposing underlying library structure (i.e. increasing the visibility of the system image [13, p17] (see Figure 1)) , and augmenting component interfaces (i.e. allowing the user to form a mental model of the system image in a more natural manner <ref> [13, p23] </ref>). <p> Comment 3 Comment "Reference [50] seems an inappropriate basis for an understand ing of subjectivity." Response Agreed. Action Reference 50 will be removed. The amendment in Comment 1 now explains subjectivity in terms of disparate mental models, using Norman <ref> [13] </ref> as the basis. Comment 4 Comment "It is not the formality of Object-Z but its declarative nature which places emphasis on intension rather than extension." Response Agreed. Action Amend [p7,4]: "being a formal specification language," to "being a declarative specification language," Comments 5 to 7 Response Agreed.
Reference: [14] <author> W.F. Opdyke. </author> <title> Refactoring Object-Oriented Frameworks. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, Department of Computer Science, </institution> <year> 1992. </year>
Reference-contexts: Action Add to the final section: "In Chapter 8, one policy for library evolution that guaranteed protection of client behaviour in the presence of library update was examined. Other strategies for incremental modification to libraries that protect client behaviour (for example re-structuring <ref> [14] </ref>) have been proposed. Investigation of incremental library update policies with different kinds of guarantee for client pro grams is warranted.
Reference: [15] <author> K.J. Ross and P.A. Lindsay. </author> <title> Maintaining consistency under changes to formal specifications. </title> <booktitle> In Proc. 1st Int'l Symposium of Formal Methods Europe, </booktitle> <pages> pages 558-577. </pages> <publisher> LNCS 670, Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Consistent initial and final states are enforced via the integrity constraints defined for component insertion, and the effect of change is precisely captured through the specification of operations to update component enclosure and reference structures. In related work, Ross and Lindsay <ref> [15] </ref> investigated the consistency-checking and change control activities in the presence of changes to a model of VDM formal specifications and associated theories.
Reference: [16] <author> B.S. Wynar and A.G. Taylor. </author> <title> Introduction to Cataloging and Classification. </title> <address> Englewood, Colorado, </address> <year> 1992. </year> <note> Eighth Edition, ISBN 0-87287-967-4. 26 </note>
Reference-contexts: There are two primary processes in library science that dictate the organization of libraries: cataloging and classification. 2.1.1 Cataloging Traditionally, library holdings are described by a collection of catalogs. Each catalog contains a collection of entries, at least one entry for each artefact held by the library. Wynar <ref> [16, p9] </ref> identifies general requirements for a catalog. <p> The software library models constructed in Chapters 4 through 6 address these requirements. 2.1.2 Classification Given a catalog, entries within the catalog can be classified into divisions. The purpose of classification <ref> [16, p317] </ref> "is to bring related items together in a helpful sequence from the general to the specific.....the ultimate aim of any classification system is to lead the patron to the items required." Various kinds of classification schemes have been proposed. <p> The idea is to maximise collocation, that is, the grouping of similar subjects together. Most recently, synthetic classification schemes provide many divisions within each subject, the divisions being defined using artificially but intuitively chosen criteria. A number of limitations of classification schemes are noted by Wynar <ref> [16, p325] </ref>: Logical arrangement: the relative separation of potentially 14 related subjects presents difficulties for any classification sys-tem. For example, history and social sciences are inter-related topics, since history illuminates the study of social sciences, yet history is influenced by social cultures.
References-found: 16

