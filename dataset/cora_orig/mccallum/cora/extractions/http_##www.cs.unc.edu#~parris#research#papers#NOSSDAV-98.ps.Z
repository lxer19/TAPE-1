URL: http://www.cs.unc.edu/~parris/research/papers/NOSSDAV-98.ps.Z
Refering-URL: http://www.cs.unc.edu/~parris/research/papers/papers.html
Root-URL: http://www.cs.unc.edu
Email: parris,jeffay,smithfd,borg-@cs.unc.edu  
Title: In: Proceedings of the Eighth International Workshop on Network and Operating System Support for Digital
Author: Mark Parris Kevin Jeffay F. Donelson Smith Jan Borgersen 
Web: http://www.cs.unc.edu/Research/dirt  
Address: Chapel Hill, NC 27599-3175 USA  
Affiliation: University of North Carolina at Chapel Hill Department of Computer Science  
Note: Cambridge, UK, July 1998, to appear.  1 Overview Supported by grants from the National Science Foundation (grants IRIS-9508514 CCR-9510156), the Advanced Research Projects Agency (grant number 96-06580), the IBM Corporation, and a graduate fellowship from the Intel Corporation.  
Abstract: The Internet community is very interested in addressing congestion with active queue management mechanisms like Random Early Detection (RED). Recent proposals extend these mechanisms to actively penalize misbehaving flows. These methods favor TCP and TCP-like flows strongly over other flows like UDP. In this paper we propose extensions to active queue management disciplines which continue to address congestion and reward TCP-friendly flows while minimizing impact on continuous media flows using other protocols. Our mechanism, Drop Preference Management (DPM), recognizes tagged flows and manages their latency while constraining the bandwidth they consume. We present empirical results of experiments comparing our mechanism to plain RED. As the Internet continues to evolve, increasing attention is being given to recognizing and addressing congestion within the network. Particularly, there is increasing focus on recognizing well-behaved flows, those that respond to congestion by reducing the load they place on the network. Both Braden et al., and Floyd et al., recognize TCP flows with correct congestion avoidance implementations as well behaved [2, 6, 7, 1]. They argue that these flows, as good network citizens, should be protected and isolated from the effects of misbehaving flows. Misbehaving flows include incorrect implementations of TCP, unresponsive but lightweight UDP connections, and high bandwidth flows that aggressively retransmit when drops occur. A recent internet draft considers the problem of con gestion in the current internet and makes two recommendations [2]. First, they recommend deploying active queue management schemes, specifically Random Early Detection (RED) to more effectively notify responsive flows of congestion [5]. Active queue management refers to extending the queueing discipline in the router beyond simple enqueue and dequeue with drop-tail when full. For example, RED does not wait until the queue is full to drop packets. Instead, it probabilistically drops incoming packets when the queues average size exceeds a particular threshold and automatically drops a random packet when the average exceeds a higher threshold. This provides earlier feedback, before the queue overflows, and causes higher bandwidth flows to see a greater number of drops. Second, they recommend continued development of mechanisms to deal with flows that do not respond to congestion in TCP-friendly manner. To date dealing with these other flows has centered on how to constrain or penalize those flows [6, 9]. We recognize the need to protect well-behaved flows but also recognize that many applications choose unresponsive protocols, such as UDP, because they are concerned with throughput and (especially) latency rather than reliable delivery. Since reliable delivery in TCP depends on timeouts, feedback, and retransmissions, it can be incompatible with performance goals. Multimedia applications are a prime example of applications that avoid TCP for performance reasons. Simply penalizing these non-TCP flows leaves application developers with some unattractive options. With the deployment of RED in many routers, application developers must realize UDP flows will be subject to more aggressive drop policies than in the past. The developer could use TCP and incur overhead for features she may not want. Or, she could use another protocol and be subject to aggressive drop policies. Another alternative would be to use a protocol that implements TCP-like congestion management without the other undesired features such as reliable 
Abstract-found: 1
Intro-found: 1
References-found: 0

