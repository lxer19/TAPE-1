URL: http://www.cs.umd.edu/~samir/grant/gk98b.ps
Refering-URL: http://www.cs.umd.edu/~samir/grant/career.html
Root-URL: 
Title: Improved Methods for Approximating Node Weighted Steiner Trees and Connected Dominating Sets  
Author: Sudipto Guha Samir Khuller 
Address: Stanford, CA 94305  College Park, MD 20742  
Affiliation: Dept. of Computer Science Stanford University  Computer Science Dept. and UMIACS University of Maryland  
Abstract: A greedy approximation algorithm based on "spider decompositions" was developed by Klein and Ravi for node weighted Steiner trees. This algorithm provides a worst case approximation ratio of 2 ln k, where k is the number of terminals. However, the best known lower bound on the approximation ratio is ln k, assuming that N P 6 DT IME[n O(log log n) ], by a reduction from set cover [9, 4]. We show that for the unweighted case we can obtain an approximation factor of ln k. For the weighted case we develop a new decomposition theorem, and generalize the notion of "spiders" to "branch-spiders", that are used to design a new algorithm with a worst case approximation factor of 1:5 ln k. This algorithm, although polynomial, is not very practical due to its high running time; since we need to repeatedly find many minimum weight matchings in each iteration. We are able to generalize the method to yield an approximation factor approaching 1:35 ln k. We also develop a simple greedy algorithm that is practical and has a worst case approximation factor of 1:6103 ln k. The techniques developed for the second algorithm imply a method of approximating node weighted network design problems defined by 0-1 proper functions. These new ideas also lead to improved approximation guarantees for the problem of finding a minimum node weighted connected dominating set. The previous best approximation guarantee for this problem was 3 ln n [7]. By a direct application of the methods developed in this paper we are able to develop an algorithm with an approximation factor approaching 1:35 ln n. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Berman and V. Ramaiyer, </author> <title> "Improved approximation algorithms for the Steiner tree problem", </title> <journal> J. Algorithms, </journal> <volume> 17 </volume> <pages> 381-408, </pages> <year> (1994). </year>
Reference-contexts: 1. Introduction The Steiner tree problem is a classical problem in networks, and is of wide interest. The problem is known to be NP-hard for graphs, as well as in most metrics [5]. Much effort has been devoted to the study of polynomial time approximation algorithms for this problem <ref> [1, 8, 9, 10, 13] </ref>. The Steiner tree problem is defined as follows: given a graph G = (V; E) and a subset of vertices S V we wish to compute a minimum weight tree that includes all the vertices in S. <p> The tree may include other vertices not in S as well. The vertices in S are also called terminals (sometimes these are referred to as "required" vertices). For results on edge weighted problems see <ref> [14, 2, 1, 10] </ref>. In this paper, we concentrate on the study of the node weighted version, where the nodes, rather than fl Part of this work was done while S. Guha was at the University of Maryland and his research was supported by NSF Research Initiation Award CCR-9307462.
Reference: [2] <author> M. Bern and P. Plassmann, </author> <title> "The Steiner problem with edge lengths 1 and 2", </title> <journal> Information Processing Letters, </journal> <volume> 32: </volume> <pages> 171-176, </pages> <year> (1989). </year>
Reference-contexts: The tree may include other vertices not in S as well. The vertices in S are also called terminals (sometimes these are referred to as "required" vertices). For results on edge weighted problems see <ref> [14, 2, 1, 10] </ref>. In this paper, we concentrate on the study of the node weighted version, where the nodes, rather than fl Part of this work was done while S. Guha was at the University of Maryland and his research was supported by NSF Research Initiation Award CCR-9307462.
Reference: [3] <author> T. Cormen, C. Leiserson, and R. Rivest, </author> <title> Introduction to Algorithms, </title> <publisher> The MIT Press, </publisher> <year> 1989. </year>
Reference-contexts: The Klein-Ravi algorithm [9] is based on an earlier heuristic by Rayward-Smith [12] and may be viewed as a generalization of the set-cover greedy approach <ref> [3] </ref>. In this scheme, at each step a "spider" is chosen so as to minimize the ratio of the weight of spider to the number of terminals that it connects. They prove that the process of greedily picking spiders yields a good solution.
Reference: [4] <author> U. Feige, </author> <title> "A threshold of ln n for approximating set-cover", </title> <booktitle> 28th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 314-318, </pages> <year> (1996). </year>
Reference-contexts: They showed that the problem is at least as hard to approximate as the set-cover problem, for which a polynomial time approximation algorithm with a factor of (1 *) ln k would imply that N P DT IM E [n O (loglog n) ] <ref> [4] </ref>. The Klein-Ravi algorithm [9] is based on an earlier heuristic by Rayward-Smith [12] and may be viewed as a generalization of the set-cover greedy approach [3].
Reference: [5] <author> M. R. Garey and D. S. Johnson, </author> <title> "Computers and Intractability: A guide to the theory of NP-completeness", </title> <publisher> Freeman, </publisher> <address> San Francisco (1978). </address>
Reference-contexts: 1. Introduction The Steiner tree problem is a classical problem in networks, and is of wide interest. The problem is known to be NP-hard for graphs, as well as in most metrics <ref> [5] </ref>. Much effort has been devoted to the study of polynomial time approximation algorithms for this problem [1, 8, 9, 10, 13].
Reference: [6] <author> M. X. Goemans and D. P. Williamson, </author> <title> "A general approximation technique for constrained forest problems", </title> <journal> SIAM Journal on Computing, </journal> <volume> 24 </volume> <pages> 296-317, </pages> <year> (1995). </year> <month> 10 </month>
Reference-contexts: It has a worst case approximation factor of 1:6103 ln k. It is not difficult to observe that this algorithm can be extended easily to problems defined by 0-1 proper function <ref> [9, 6] </ref>. This algorithm is described in Section 4. In Section 5 we show how to use the method developed to solve the node weighted Steiner tree problem to solve the Connected dominating set problem. This improves the 3 ln n factor shown for the weighted CDS problem in [7]. <p> Proper functions have several restrictions imposed on them. A 0-1 proper function is a general class of functions where the connectivity requirement is 0 or 1 across a cut. For details and definition of proper functions, the reader is referred to <ref> [6] </ref>. Klein and Ravi show that the node weighted Steiner tree algorithm can be modified to find a solution for the more general class of problems. A cut which is unsatisfied is called an active component.
Reference: [7] <author> S. Guha and S. Khuller, </author> <title> "Approximation algorithms for connected dominating sets", </title> <booktitle> Proc. of 4th Annual European Symposium on Algorithms, </booktitle> <pages> pages 179-193, </pages> <year> (1996). </year> <note> To appear in Algorithmica. </note>
Reference-contexts: This algorithm is described in Section 4. In Section 5 we show how to use the method developed to solve the node weighted Steiner tree problem to solve the Connected dominating set problem. This improves the 3 ln n factor shown for the weighted CDS problem in <ref> [7] </ref>. In Appendix A we give an algorithm for the case when all the node weights are 1. This algorithm has an approximation factor of ln k. 2. Preliminaries We assume that the input graph is connected and that only the vertices have weights. <p> Application to Connected Dominating Sets The connected dominating set (CDS) problem is defined as follows: given a node weighted graph G, find a subset S of vertices of minimum weight, such that S induces a connected subgraph and the vertices in S form a dominating set in G. See <ref> [7] </ref> for applications and other results for the CDS problem on unweighted graphs. We can develop a similar approximation scheme for connected dominating sets. As the algorithm proceeds, certain vertices are added to the current CDS.
Reference: [8] <author> L. Kou, G. Markowsky and L. Berman, </author> <title> "A fast algorithm for Steiner trees", </title> <journal> Acta Informatica, </journal> <volume> 15, </volume> <pages> pp. 141-145, </pages> <year> (1981). </year>
Reference-contexts: 1. Introduction The Steiner tree problem is a classical problem in networks, and is of wide interest. The problem is known to be NP-hard for graphs, as well as in most metrics [5]. Much effort has been devoted to the study of polynomial time approximation algorithms for this problem <ref> [1, 8, 9, 10, 13] </ref>. The Steiner tree problem is defined as follows: given a graph G = (V; E) and a subset of vertices S V we wish to compute a minimum weight tree that includes all the vertices in S.
Reference: [9] <author> P. N. Klein and R. Ravi, </author> <title> "A nearly best-possible approximation algorithm for node-weighted Steiner trees", </title> <journal> J. Algorithms, </journal> <volume> 19(1) </volume> <pages> 104-114, </pages> <year> (1995). </year>
Reference-contexts: 1. Introduction The Steiner tree problem is a classical problem in networks, and is of wide interest. The problem is known to be NP-hard for graphs, as well as in most metrics [5]. Much effort has been devoted to the study of polynomial time approximation algorithms for this problem <ref> [1, 8, 9, 10, 13] </ref>. The Steiner tree problem is defined as follows: given a graph G = (V; E) and a subset of vertices S V we wish to compute a minimum weight tree that includes all the vertices in S. <p> The first non-trivial polynomial time approximation factor for this problem was achieved by Klein and Ravi <ref> [9] </ref>. Their algorithm achieves a worst case approximation factor of 2 ln k where k is the number of terminals. <p> They showed that the problem is at least as hard to approximate as the set-cover problem, for which a polynomial time approximation algorithm with a factor of (1 *) ln k would imply that N P DT IM E [n O (loglog n) ] [4]. The Klein-Ravi algorithm <ref> [9] </ref> is based on an earlier heuristic by Rayward-Smith [12] and may be viewed as a generalization of the set-cover greedy approach [3]. <p> It has a worst case approximation factor of 1:6103 ln k. It is not difficult to observe that this algorithm can be extended easily to problems defined by 0-1 proper function <ref> [9, 6] </ref>. This algorithm is described in Section 4. In Section 5 we show how to use the method developed to solve the node weighted Steiner tree problem to solve the Connected dominating set problem. This improves the 3 ln n factor shown for the weighted CDS problem in [7]. <p> The shrunken node has zero weight, and we make it a degree one node once again. Klein and Ravi <ref> [9] </ref> give an algorithm that repeatedly contracts the min-ratio spider. The reason one obtains a 2 ln k factor is that one may repeatedly contract 2 spiders, and each time a spider is contracted, we create a new terminal to denote the contracted spider (see [9] for the proof). <p> Klein and Ravi <ref> [9] </ref> give an algorithm that repeatedly contracts the min-ratio spider. The reason one obtains a 2 ln k factor is that one may repeatedly contract 2 spiders, and each time a spider is contracted, we create a new terminal to denote the contracted spider (see [9] for the proof). If we could restrict our attention to larger spiders, then we get a better algorithm. However, we cannot show that a decomposition into large spiders exists to achieve this, we modify spiders into more general structures. The next two lemmas are due to Klein and Ravi [9], <p> <ref> [9] </ref> for the proof). If we could restrict our attention to larger spiders, then we get a better algorithm. However, we cannot show that a decomposition into large spiders exists to achieve this, we modify spiders into more general structures. The next two lemmas are due to Klein and Ravi [9], and used in their proof for the approximation factor of 2 ln k. Lemma 2.1: Any solution to the node weighted Steiner tree problem can be decomposed into spiders having terminals as leaves, without increasing the cost. <p> Typical problems include generalizations of Steiner trees. We present a greedy algorithm for node weighted Steiner trees, which is practical and extends to the class of 0-1 proper functions as well. This algorithm has the same complexity as the original 7 algorithm of Klein and Ravi <ref> [9] </ref>. For simplicity we describe it only for the node weighted Steiner tree problem. Algorithm Repeat the following steps until we have at most two terminals left, and then connect the terminals optimally. Step 1. <p> Algorithm Repeat the following steps until we have at most two terminals left, and then connect the terminals optimally. Step 1. Find a spider with the minimum ratio. (this can be done by using the method by Klein and Ravi <ref> [9] </ref>). Let the ratio be fl m . If it is a 3+ spider contract it. Step 2. Else if the minimum ratio spider is a 2 spider, find the 3+ spider with the minimum ratio. Let this ratio be fl 3+ .
Reference: [10] <author> M. Karpinsky and A. Zelikovsky, </author> <title> "New approximation algorithms for the Steiner tree problem", </title> <journal> Journal of Combinatorial Optimization, </journal> <volume> 1(1) </volume> <pages> 47-66, </pages> <year> (1997). </year>
Reference-contexts: 1. Introduction The Steiner tree problem is a classical problem in networks, and is of wide interest. The problem is known to be NP-hard for graphs, as well as in most metrics [5]. Much effort has been devoted to the study of polynomial time approximation algorithms for this problem <ref> [1, 8, 9, 10, 13] </ref>. The Steiner tree problem is defined as follows: given a graph G = (V; E) and a subset of vertices S V we wish to compute a minimum weight tree that includes all the vertices in S. <p> The tree may include other vertices not in S as well. The vertices in S are also called terminals (sometimes these are referred to as "required" vertices). For results on edge weighted problems see <ref> [14, 2, 1, 10] </ref>. In this paper, we concentrate on the study of the node weighted version, where the nodes, rather than fl Part of this work was done while S. Guha was at the University of Maryland and his research was supported by NSF Research Initiation Award CCR-9307462.
Reference: [11] <author> C. Lund and M. Yannakakis, </author> <title> "On the hardness of approximating minimization problems", </title> <journal> Journal of the ACM, </journal> <volume> 41(5): </volume> <pages> 960-981, </pages> <year> (1994). </year>
Reference: [12] <author> V. J. Rayward-Smith, </author> <title> "The computation of nearly minimal Steiner trees in graphs", </title> <journal> Internat. J. Math. Educ. Sci. Tech., </journal> <volume> 14: </volume> <pages> 15-23, </pages> <year> (1983). </year>
Reference-contexts: The Klein-Ravi algorithm [9] is based on an earlier heuristic by Rayward-Smith <ref> [12] </ref> and may be viewed as a generalization of the set-cover greedy approach [3]. In this scheme, at each step a "spider" is chosen so as to minimize the ratio of the weight of spider to the number of terminals that it connects.
Reference: [13] <author> H. Takahashi and A. </author> <title> Matsuyama, "An approximate solution for the Steiner problem in graphs", </title> <journal> Math. Japonica, </journal> <volume> Vol. 24, </volume> <pages> pp. 573-577, </pages> <year> (1980). </year>
Reference-contexts: 1. Introduction The Steiner tree problem is a classical problem in networks, and is of wide interest. The problem is known to be NP-hard for graphs, as well as in most metrics [5]. Much effort has been devoted to the study of polynomial time approximation algorithms for this problem <ref> [1, 8, 9, 10, 13] </ref>. The Steiner tree problem is defined as follows: given a graph G = (V; E) and a subset of vertices S V we wish to compute a minimum weight tree that includes all the vertices in S.

References-found: 13

