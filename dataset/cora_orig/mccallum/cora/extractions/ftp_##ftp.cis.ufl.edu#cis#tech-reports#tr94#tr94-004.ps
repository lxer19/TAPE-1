URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr94/tr94-004.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr94-abstracts.html
Root-URL: http://www.cis.ufl.edu
Email: Email r varadaraja@upr1.upr.clu.edu  Email ih@cis.ufl.edu  
Phone: Fax (809) 754-0757  
Title: An efficient dynamic load balancing algorithm for adaptive mesh refinement  
Author: Ravi Varadarajan Injae Hwang 
Date: May 26, 1994  
Address: Puerto Rico Rio Piedras, PR 00931  Gainesville, FL 32611  
Affiliation: Dept. of Mathematics, University of  Comp. and Info. Sciences Department, University of Florida  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> S. Acharya and F Moukalled, </author> <title> "An Adaptive Grid Solution Procedure for Convection-Diffusion Problems," </title> <journal> Journal of Computational Physics, </journal> <volume> Vol.91, </volume> <year> 1990, </year> <month> pp.32-54. </month>
Reference: [2] <author> A. V. Aho, J. E. Hopcroft and J. D. Ullman, </author> <title> The Design and Analysis of Computer Algorithms, </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, MA, </address> <year> 1974. </year>
Reference: [3] <author> I. Altas and J. Stephenson, </author> <title> "A Two-Dimensional Adaptive Mesh Generation Method," </title> <journal> Journal of Computational Physics, </journal> <volume> Vol.94, </volume> <year> 1991, </year> <month> pp.201-224. </month>
Reference: [4] <author> B. S. Baker, D. J. Brown and H. P. Katseff, </author> <title> "A 5/4 Algorithm for Two-Dimensional Packing," </title> <journal> Journal of Algorithms, </journal> <volume> Vol.2, </volume> <year> 1981, </year> <month> pp.348-368. </month>
Reference-contexts: Experimental results on the performance of the packing algorithm are included at the end of this section. 4.1 A Packing Algorithm Two dimensional packing problem has been studied by many researchers <ref> [5, 4, 6, 18] </ref>. It arises in a variety of situations such as scheduling of tasks and cutting-stock problems. Cutting-stock problems may involve cutting objects out of a sheet or roll of material so as to minimize waste. <p> Since the decision version of the problem is NP-complete, the original optimization problem is NP-hard. For this reason, we seek an approximation algorithm to solve the problem. Since our packing problem is somewhat different from the commonly known 2D bin packing problem, the heuristic algorithms developed in <ref> [5, 4, 6, 18] </ref> are not readily useful for our purpose.
Reference: [5] <author> B. S. Baker, E. G. Coffman and R. L. Rivest, </author> <title> "Orthogonal Packings in Two Dimensions," </title> <journal> SIAM Journal on Computing, Vol.9, </journal> <volume> No.4, </volume> <month> August, </month> <year> 1980, </year> <month> pp.846-855. </month>
Reference-contexts: Experimental results on the performance of the packing algorithm are included at the end of this section. 4.1 A Packing Algorithm Two dimensional packing problem has been studied by many researchers <ref> [5, 4, 6, 18] </ref>. It arises in a variety of situations such as scheduling of tasks and cutting-stock problems. Cutting-stock problems may involve cutting objects out of a sheet or roll of material so as to minimize waste. <p> The rectangles should be packed with their sides parallel to the sides of the bin. In one version of the problem (see <ref> [5] </ref>) the rectangles should be packed in a fixed orientation. In our processor allocation problem, grids correspond to rectangles to be packed. But, the problem is slightly different from the above two-dimensional bin packing problem. First, the width as well as the height of the bin is unlimited. <p> Since the decision version of the problem is NP-complete, the original optimization problem is NP-hard. For this reason, we seek an approximation algorithm to solve the problem. Since our packing problem is somewhat different from the commonly known 2D bin packing problem, the heuristic algorithms developed in <ref> [5, 4, 6, 18] </ref> are not readily useful for our purpose. <p> Note that all items in the region A 1 (A 2 ) have been packed with their long sides parallel to Y (X) axis. Thus the items are packed in these regions as in bottom-up left-justified (BL for short) strategy of <ref> [5] </ref>. We can make the similar argument on the occupancy of A 1 and A 2 as in [5]. Note that any vertical (or horizontal) cut through A 1 (or A 2 ) can be partitioned into alternating segments corresponding to cuts through unoccupied and occupied areas. <p> Thus the items are packed in these regions as in bottom-up left-justified (BL for short) strategy of <ref> [5] </ref>. We can make the similar argument on the occupancy of A 1 and A 2 as in [5]. Note that any vertical (or horizontal) cut through A 1 (or A 2 ) can be partitioned into alternating segments corresponding to cuts through unoccupied and occupied areas. <p> It can be easily shown that W T P H T P w fl . Since all the items are square shaped, they are packed as in BL strategy <ref> [5] </ref> in the two isosceles right triangles S 1 and S 2 (see Figure 6) with areas (W TP w fl ) 2 (H TP w fl ) 2 2 respectively.
Reference: [6] <author> B. S. Baker and J. S. Schwarz, </author> <title> "Shelf Algorithms for Two-Dimensional Packing Problems," </title> <journal> SIAM Journal on Computing, Vol.12, </journal> <volume> No.3, </volume> <month> August, </month> <year> 1983, </year> <month> pp.508-525. </month>
Reference-contexts: Experimental results on the performance of the packing algorithm are included at the end of this section. 4.1 A Packing Algorithm Two dimensional packing problem has been studied by many researchers <ref> [5, 4, 6, 18] </ref>. It arises in a variety of situations such as scheduling of tasks and cutting-stock problems. Cutting-stock problems may involve cutting objects out of a sheet or roll of material so as to minimize waste. <p> Since the decision version of the problem is NP-complete, the original optimization problem is NP-hard. For this reason, we seek an approximation algorithm to solve the problem. Since our packing problem is somewhat different from the commonly known 2D bin packing problem, the heuristic algorithms developed in <ref> [5, 4, 6, 18] </ref> are not readily useful for our purpose.
Reference: [7] <author> M. Berger and S. Bokhari, </author> <title> "A Partitioning Strategy for Nonuniform Problems on Multiprocessors," </title> <journal> IEEE Transactions on Computers, </journal> <volume> Vol.C-36, </volume> <year> 1987, </year> <month> pp.570-580. </month>
Reference-contexts: In this paper, we address the issue of dynamic load balancing that arises particularly in mapping adaptive mesh refinement algorithms onto parallel architectures. There are many load balancing algorithms (such as binary decomposition <ref> [7] </ref>, scatter decomposition [28]) proposed in the literature for numerical algorithms based on finite difference or finite element methods. These algorithms are more suitable for static load balancing as they ignore the interprocessor communication cost that usually results from relocating the intermediate solution values among the processors during rebalancing. <p> For static load balancing, communication between two processors is usually assumed to be proportional to the number of points on the boundaries between the subdomains allocated to the processors. In these techniques, balancing the load among the processors is given more importance than minimizing the inter-processor communication cost. In <ref> [7] </ref>, Berger and Bokhari propose binary decomposition for distributing the workload associated with non-uniform mesh computations in a multiprocessor system with a mesh topology.
Reference: [8] <author> M. Berger and J. Oliger, </author> <title> "Adaptive Mesh Refinement for Hyperbolic Partial Differential Equations," </title> <journal> Journal of Computational Physics, </journal> <volume> Vol.53, </volume> <year> 1984, </year> <month> pp.484-512. </month>
Reference: [9] <author> M. Berger and I. Rigoutsos, </author> <title> "An Algorithm for Point Clustering and Grid Generation," </title> <journal> IEEE Transactions on Systems, Man and Cybernetics, Vol.21, </journal> <volume> no.5, </volume> <year> 1991, </year> <month> pp.1178-1286. </month>
Reference: [10] <author> D. P. Bertsekas and J. N. Tsitsiklis, </author> <title> Parallel and Distributed Computation, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1989. </year>
Reference-contexts: Then, we can easily embed the mesh in the given hypercube using reflected Gray code <ref> [10] </ref>. The reflected Gray code is generated in the following way. We start with the 1-bit Gray code sequence f0; 1g, and then insert a zero and a one in front of the two elements obtaining the two sequences f00; 01g and f10; 11g.
Reference: [11] <author> J. Boillat, F. Bruce and P. Kropf, </author> <title> "A Dynamic Load-Balancing Algorithm for Molecular Dynamics Simulation on Multi-processor Systems," </title> <journal> Journal of Computational Physics, </journal> <volume> Vol.96, </volume> <year> 1991, </year> <month> pp.1-14. </month>
Reference-contexts: It is a local balancing operation, wherein each processor independently moves (receives) workload to (from) its neighbors based on only the information about its workload and that of its neighbors. This method was used for molecular dynamics simulation applications <ref> [11] </ref>. A major disadvantage of this method is that it takes a long time to achieve global balancing but this delay is acceptable when the workload distribution changes slowly. Cy-benko [20] showed the conditions for convergence of this method and the rate of convergence for arbitrary processor network topologies.
Reference: [12] <author> S. H. Bokhari, </author> <title> "A Shortest Tree Algorithm for Optimal Assignments Across Space and Time in a Distributed System," </title> <journal> IEEE Trans. Software Engineering, Vol.7, </journal> <volume> No.6, </volume> <month> November </month> <year> 1981, </year> <month> pp.583-589. </month>
Reference: [13] <author> S. W. Bollinger and S. F. Midkiff, </author> <title> "Processor and Link Assignment in Multicomput-ers Using Simulated Annealing," </title> <booktitle> Proceedings of the 1988 International Conference on Parallel Processing, Vol.1, </booktitle> <year> 1988, </year> <month> pp.1-7. </month>
Reference: [14] <author> R. G. Casey, </author> <title> "Allocation of Copies of a File in an Information Network," </title> <booktitle> Proc. AFIPS National Computer Conference, </booktitle> <address> Vol.43, </address> <year> 1972, </year> <month> pp.371-374. </month>
Reference: [15] <author> W. W. Chu, </author> <title> "Optimal File Allocation in a Computer Network," in Computer Communication Systems, </title> <editor> N. Abramson and F. F. Kuo eds., </editor> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1973, </year> <month> pp.82-94. </month>
Reference: [16] <author> E. G. Coffman, </author> <title> Computer and Job-Shop Scheduling Theory, </title> <publisher> John Wiley & Sons, Inc. </publisher> <address> New York, </address> <year> 1976. </year>
Reference: [17] <author> E. G. Coffman, M. R. Garey and D. S. Johnson, </author> <title> "An Application of Bin-packing to Multiprocessor Scheduling," </title> <journal> SIAM Journal on Computing, Vol.7, </journal> <volume> No.1, </volume> <month> February, </month> <year> 1978, </year> <month> pp.1-17. </month>
Reference: [18] <author> E. G. Coffman, M. R. Garey, D. S. Johnson and R. E. Tarjan, </author> <title> "Performance Bounds for Level-Oriented Two-Dimensional Packing Algorithms," </title> <journal> SIAM Journal on Computing, Vol.9, </journal> <volume> No.4, </volume> <month> August, </month> <year> 1980, </year> <month> pp.808-826. </month>
Reference-contexts: Experimental results on the performance of the packing algorithm are included at the end of this section. 4.1 A Packing Algorithm Two dimensional packing problem has been studied by many researchers <ref> [5, 4, 6, 18] </ref>. It arises in a variety of situations such as scheduling of tasks and cutting-stock problems. Cutting-stock problems may involve cutting objects out of a sheet or roll of material so as to minimize waste. <p> Since the decision version of the problem is NP-complete, the original optimization problem is NP-hard. For this reason, we seek an approximation algorithm to solve the problem. Since our packing problem is somewhat different from the commonly known 2D bin packing problem, the heuristic algorithms developed in <ref> [5, 4, 6, 18] </ref> are not readily useful for our purpose. <p> We compared the performance of our algorithm with that of an algorithm based on the modified first-fit level heuristic (LP) discussed in <ref> [18] </ref> for packing rectangles into a bin of fixed width. In this heuristic, rectangles (grids) are considered in decreasing order of height and packed level by level as in the first-fit heuristic.
Reference: [19] <author> W. Y. Crutchfield, </author> <title> "Load Balancing Irregular Algorithms," </title> <institution> Lawrence Livermore National Laboratory Report, </institution> <year> 1991. </year>
Reference: [20] <author> G. Cybenko, </author> <title> "Dynamic Load Balancing for Distributed Memory Multiprocessors," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol.7, </volume> <year> 1989, </year> <month> pp.279-301. </month>
Reference-contexts: These algorithms are more suitable for static load balancing as they ignore the interprocessor communication cost that usually results from relocating the intermediate solution values among the processors during rebalancing. There are other general dynamic load balancing algorithms (such as diffusion scheme <ref> [20] </ref>) suitable for slowly varying workload distributions, as the time to rebalance the workload is quite high in these methods. In this paper, we propose dynamic load balancing algorithms especially for adaptive mesh refinement, that explicitly consider the computational and communication costs in rebalanc-ing the workload. <p> This method was used for molecular dynamics simulation applications [11]. A major disadvantage of this method is that it takes a long time to achieve global balancing but this delay is acceptable when the workload distribution changes slowly. Cy-benko <ref> [20] </ref> showed the conditions for convergence of this method and the rate of convergence for arbitrary processor network topologies. Hanxledon and Scott [25] propose a decentralized dynamic strategy in which each proces-sor does local balancing based on the total workload information that it receives from every other processor.
Reference: [21] <author> K. D. Devine, J. E. Flaherty, S. R. Wheat and A. B. Maccabe, </author> <title> "A Massively Paral--lel Adaptive Finite Element Method with Dynamic Load Balancing," </title> <booktitle> Proceedings of Supercomputing '93 Conference, </booktitle> <address> Portland, Oregon, </address> <year> 1993, </year> <month> pp.2-11. </month>
Reference: [22] <author> A. K. Dewdney, </author> <title> "Computer Recreations," </title> <publisher> Scientific American, </publisher> <month> Dec. </month> <year> 1984, </year> <month> pp.14-18. </month>
Reference: [23] <author> L. W. Dowdy and D. V. Foster, </author> <title> "Comparative Models of the File Assignment Problem," </title> <journal> ACM Computing Surveys, Vol.14, No.2, </journal> <month> June </month> <year> 1982, </year> <month> pp.287-313. </month>
Reference: [24] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability, </title> <editor> W. H. </editor> <publisher> Freeman and Company, </publisher> <address> San Francisco, CA, </address> <year> 1983. </year>
Reference-contexts: rectangles of dimension w i fi h i (w i h i ), is there a packing so that the maxi mum of height and width of packing is smaller than or equal to L? Proof : We will reduce the bin packing problem which is known to be NP-complete <ref> [24] </ref> to our 2D packing problem.
Reference: [25] <author> R. Hanxleden and L. R. Scott, </author> <title> "Load Balancing on Message Passing Architectures," </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> Vol.13, </volume> <year> 1991, </year> <month> pp.312-324. </month>
Reference-contexts: Cy-benko [20] showed the conditions for convergence of this method and the rate of convergence for arbitrary processor network topologies. Hanxledon and Scott <ref> [25] </ref> propose a decentralized dynamic strategy in which each proces-sor does local balancing based on the total workload information that it receives from every other processor. This strategy was tested on Intel iPSC/2 for WaTor, a particle migration application and was found to give good results.
Reference: [26] <author> F. T. Leighton, </author> <title> Introduction to Parallel Algorithms and Architectures, </title> <publisher> Morgan Kauf-mann Publishers, Inc. </publisher> <address> San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: Using greedy routing, this operation can be done in O (log N ) time on a hypercube and O ( p N ) time on a mesh <ref> [26] </ref>. // Procedure GridPacking (i); 1. Call procedure Broadcast (b i ; &lt; (w i ; h i ); S i &gt;). 2. <p> ; q 0 )], at Processor P b i . end FindNewCornerSize; Procedure Broadcast (j; V ); // Processor P j broadcasts value V to all the processors in P S; takes O (log N ) time in a hypercube and O ( p N ) time in a mesh <ref> [26] </ref>. // Procedure FindMin (fa l g n1 l=0 ; b; j); // Given the a l values with one value per processor, find the minimum (b) of these values and store it in the processor P j . <p> Send each packet &lt; (w i ; h i ); S i ; (XLoc i ; Y Loc i ); Orient i ; (width; height) &gt; to processor S i . For this, use the monotone routing (see chapter 3) for a hypercube and one-to-one routing <ref> [26] </ref> for a mesh. end SendPacketToSource Finding a corner to pack the next grid, updating the sizes of corners and determining the sizes of two new corners are done in the same way as in the sequential packing algorithm.
Reference: [27] <author> D. Nicol and N. Saltz, </author> <title> "Dynamic Remapping of Parallel Computations with Varying Resource Demands," </title> <journal> IEEE Transactions on Computers, Vol.37, </journal> <volume> No.9, </volume> <year> 1988, </year> <month> pp.1073-1087. </month>
Reference: [28] <author> D. Nicol and N. Saltz, </author> <title> "An Analysis of Scatter Decomposition," </title> <journal> IEEE Trnasactions on Computers, Vol.39, </journal> <volume> No.11, </volume> <year> 1991, </year> <month> pp.1337-1345. </month>
Reference-contexts: In this paper, we address the issue of dynamic load balancing that arises particularly in mapping adaptive mesh refinement algorithms onto parallel architectures. There are many load balancing algorithms (such as binary decomposition [7], scatter decomposition <ref> [28] </ref>) proposed in the literature for numerical algorithms based on finite difference or finite element methods. These algorithms are more suitable for static load balancing as they ignore the interprocessor communication cost that usually results from relocating the intermediate solution values among the processors during rebalancing. <p> Determining this trade-off is a major difficulty with this method. This technique was used as a load balancing method by Williams [32] and was analyzed for a probabilistic workload by Nicol and Saltz <ref> [28] </ref>. In [29], Simon proposes the application of graph-theoretic techniques for mapping unstructured grid calculations that arise in computational fluid dynamics onto multiprocessor architectures.
Reference: [29] <author> H. D. Simon, </author> <title> "Partitioning of Unstructured Problems for Parallel Processing," </title> <booktitle> Computing Systems in Engineering, Vol.2, </booktitle> <address> No.2/3, </address> <year> 1991, </year> <month> pp.135-148. </month>
Reference-contexts: Determining this trade-off is a major difficulty with this method. This technique was used as a load balancing method by Williams [32] and was analyzed for a probabilistic workload by Nicol and Saltz [28]. In <ref> [29] </ref>, Simon proposes the application of graph-theoretic techniques for mapping unstructured grid calculations that arise in computational fluid dynamics onto multiprocessor architectures.
Reference: [30] <author> P. Sadayappan and F. Ercal, </author> <title> "Nearest-Neighbor Mapping of Finite Element Graphs onto Processor Meshes," </title> <journal> IEEE Transactions on Computers' Vol.C-36, </journal> <volume> No.12, </volume> <year> 1987, </year> <month> pp.1408-1424. </month>
Reference: [31] <author> Ravi Varadarajan and Eva Ma, </author> <title> "An Approximation Load Balancing Model with Resource Migration in Distributed Systems," </title> <booktitle> Proceedings of the 1988 International Conference on Parallel Processing, Vol.1, </booktitle> <year> 1988, </year> <month> pp.13-17. </month>
Reference-contexts: But this approach eliminates inter-grid communication at the expense of this migration cost. It introduces intra-grid communication however since the mesh points of a grid may be allocated to more than one processor. The load balancing problem here is similar to the problem considered in <ref> [31] </ref> for load balancing with resource migration in distributed systems if the coarse grids are treated as resources.
Reference: [32] <author> W. Williams, </author> <title> "Load Balancing and Hypercubes: A Preliminary Look," Hypercube Multiprocessors 1987, </title> <publisher> SIAM, </publisher> <address> Philadelphia, PA, 1897, pp.108-113. </address>
Reference-contexts: Determining this trade-off is a major difficulty with this method. This technique was used as a load balancing method by Williams <ref> [32] </ref> and was analyzed for a probabilistic workload by Nicol and Saltz [28]. In [29], Simon proposes the application of graph-theoretic techniques for mapping unstructured grid calculations that arise in computational fluid dynamics onto multiprocessor architectures.
Reference: [33] <author> J. Woo and S. Sahni, </author> <title> "Load Balancing on a Hypercube," </title> <booktitle> Proceedings of the Fifth International Parallel Processing Symposium, </booktitle> <address> Anaheim, CA, </address> <year> 1991, </year> <month> pp.525-530. </month>
References-found: 33

