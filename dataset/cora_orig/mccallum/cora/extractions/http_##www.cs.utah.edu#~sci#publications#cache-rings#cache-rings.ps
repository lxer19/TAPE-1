URL: http://www.cs.utah.edu/~sci/publications/cache-rings/cache-rings.ps
Refering-URL: http://www.cs.utah.edu/~sci/publications/
Root-URL: 
Title: Cache-Rings for Memory Efficient Isosurface Construction  
Author: David M. Weinstein 
Affiliation: Department of Computer Science University of Utah  
Note: Submitted to Visualization 97  
Abstract: Processor speeds continue to increase at faster rates than memory speeds. As this performance gap widens, it becomes increasingly important to develop memory-conscious algorithms programs that still optimize instruction count and algorithmic complexity, but that also integrate optimizations for data locality and cache performance. In this paper we present a topological isosurface extraction algorithm which utilizes a cache-ring data structure to optimize memory performance. We compare our algorithm to an analogous edge-hashing algorithm which, though functionally equivalent, gives less priority to memory performance. While our algorithm actually executes more instructions during execution, we nonetheless see a speed-up over the traditional method, as we more-than-compensate for the extra instructions with superior memory performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> CLINE, H. E., LORENSEN, W. E., LUDKE, S., CRAWFORD, C. R., AND TEETER, B. C. </author> <title> Two algorithms for the three-dimensional construction of tomo-grams. Medical Physics 15, </title> <booktitle> 3 (1988), </booktitle> <pages> 320-327. </pages>
Reference-contexts: As the processor-memory gap widens and parallel processors become increasingly prevalent, we anticipate even greater performance improvements with such memory-conscious algorithms. 2 Background Isosurface extraction has become a ubiquitous problem in the scientific visualization literature. We are all familiar with Lorensen and Cline's Marching and Dividing Cubes algorithms <ref> [6, 1] </ref>, Wilhelm and Van Gelder's hierarchical algorithms [15], and some of the more recent improvements based on locating the critical points of the field or reparameterizing the domain based on value with active lists [4], span filters [3], both active lists and span filters [13], or span-space [12].
Reference: [2] <author> CURLESS, B., AND LEVOY, M. </author> <title> A volumetricmethodfor buildingcomplexmod-els from range data. </title> <booktitle> In ACM SIGGRAPH Computer Graphics (1996),IEEE Press, </booktitle> <pages> pp. 303-312. </pages>
Reference-contexts: In all of these cases, it is not just important that the surface look right but that it be topologically connected. Isosurface extraction is not the only method used for constructing topological surfaces indeed, the vision literature is rich with methods for reconstructing models from range data <ref> [2, 5, 14] </ref>. For the purpose of this paper, we will restrict our interest to topological surface generation from scalar field data. Additionally, while there are many algorithms for extracting isosurfaces from data mapped to unstructured meshes, we will not be discussing those here.
Reference: [3] <author> GALLAGHER, R. </author> <title> Span filter: An optimization scheme for volume visualization of large finite element models. In Visualization `91 (1991), </title> <publisher> IEEE Press, </publisher> <pages> pp. 68-75. </pages>
Reference-contexts: are all familiar with Lorensen and Cline's Marching and Dividing Cubes algorithms [6, 1], Wilhelm and Van Gelder's hierarchical algorithms [15], and some of the more recent improvements based on locating the critical points of the field or reparameterizing the domain based on value with active lists [4], span filters <ref> [3] </ref>, both active lists and span filters [13], or span-space [12]. While all of these algorithms fall under the broad umbrella of isosurfacing methods, they clearly differ in their domains of applicability. In this paper we will focus on those methods that generate a connected, topological surface while extracting.
Reference: [4] <author> GILES, M., AND HAIMES, R. </author> <title> Advnaced interactive visualization for cfd. </title> <booktitle> Computing Systems in Engineering 1(1) (1990), </booktitle> <pages> 51-62. </pages>
Reference-contexts: We are all familiar with Lorensen and Cline's Marching and Dividing Cubes algorithms [6, 1], Wilhelm and Van Gelder's hierarchical algorithms [15], and some of the more recent improvements based on locating the critical points of the field or reparameterizing the domain based on value with active lists <ref> [4] </ref>, span filters [3], both active lists and span filters [13], or span-space [12]. While all of these algorithms fall under the broad umbrella of isosurfacing methods, they clearly differ in their domains of applicability.
Reference: [5] <author> HOPPE, H., DEROSE, T., DUCHAMP, T., MCDONALD, J., AND STUETZLE, W. </author> <title> Surface reconstructionfrom unorganizedpoints. </title> <booktitle> In ACM SIGGRAPH Computer Graphics (1992), </booktitle> <publisher> IEEE Press, </publisher> <pages> pp. 71-78. </pages>
Reference-contexts: In all of these cases, it is not just important that the surface look right but that it be topologically connected. Isosurface extraction is not the only method used for constructing topological surfaces indeed, the vision literature is rich with methods for reconstructing models from range data <ref> [2, 5, 14] </ref>. For the purpose of this paper, we will restrict our interest to topological surface generation from scalar field data. Additionally, while there are many algorithms for extracting isosurfaces from data mapped to unstructured meshes, we will not be discussing those here.
Reference: [6] <author> LORENSEN, W., AND CLINE, H. </author> <title> Marching cubes: A high resolution 3d surface construction algorithm. </title> <booktitle> Computer Graphics 21, 4 (1987), </booktitle> <pages> 163-169. </pages>
Reference-contexts: Recognizing this paradigm-shift, we have developed a topological isosurface extraction algorithm to optimize cache performance. Our algorithm exploits the predictability of memory accesses during Marching Cubes <ref> [6] </ref> surface construction, matching data structures to these access patterns in order to minimize cache misses. The data structure we have developed, termed a cache-ring, leverages hardware access mechanisms (such as spatial coherence and cache line fetching) to minimize MMU stalls. <p> As the processor-memory gap widens and parallel processors become increasingly prevalent, we anticipate even greater performance improvements with such memory-conscious algorithms. 2 Background Isosurface extraction has become a ubiquitous problem in the scientific visualization literature. We are all familiar with Lorensen and Cline's Marching and Dividing Cubes algorithms <ref> [6, 1] </ref>, Wilhelm and Van Gelder's hierarchical algorithms [15], and some of the more recent improvements based on locating the critical points of the field or reparameterizing the domain based on value with active lists [4], span filters [3], both active lists and span filters [13], or span-space [12].
Reference: [7] <author> MONTANI, C., SCATENI, R., AND SCOPIGNO, R. </author> <title> Discretized marching cubes. In Visualization `94 (1994), </title> <publisher> IEEE Press, </publisher> <pages> pp. 281-287. </pages>
Reference-contexts: Montani et al. implemented a discrete surface construction method that bisects, rather than linearly interpolates, the intersected edges <ref> [7] </ref>. The advantage to their algorithm is that the output surface can be easily decimated, as the resultant vertices lie within a finite number of indices. However, as with the original Marching Cubes algorithm, they must postprocess their data in order to obtain a connected, topological surface.
Reference: [8] <author> OF MEDICINE, N. L. </author> <title> The visible human project, </title> <year> 1995. </year>
Reference-contexts: The third data set is the same individual's head imaged during a different MRI scan and contains (56 fl 512 fl 512) nodes. The final model is the CT thorax of the Visible Human Data Set (T M) <ref> [8] </ref> and contains (512 fl 512 fl 168) nodes. For the MRI data sets, we extract an isosurface values corresponding roughly to the scalp. The CT data was isosurfaced at a value more appropriate for bone.
Reference: [9] <author> PATTERSON, D., AND HENNESSY, J. L. </author> <title> Computer Architecture: A Quantitative Approach, 2nd ed. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1996. </year>
Reference-contexts: This trend is a result of the inability of memory speeds to keep pace with processor speeds while processor speeds double every two years, memory speeds double only every eight years <ref> [9] </ref>. In an effort to mitigate this growing differential, memory designers have developed increasingly deep, multi-tiered storage hierarchies. The top tiers (registers and L1 cache) consist of fast storage capable of delivering data to the datapath fast enough that program execution can continue smoothly with little to no delay. <p> This standard technique is generally efficient because of the law of data locality: if a memory address is being accessed now, its neighbors are likely to be accessed in the very near future <ref> [9] </ref>. We turn this mechanism to our advantage with cache-rings, as we essentially prefetch most of our data. In practice, we did not see as much speed-up as we had anticipated.
Reference: [10] <author> ROSSIGNAC, J., AND BORREL, P. </author> <title> Multi-resolution 3D approximations for rendering complex scenes. In Modeling in Computer Graphics: Methods and Applications (1993), </title> <editor> B. Falcidieno and T. Kunii, Eds., </editor> <publisher> Springer-Verlag, </publisher> <pages> pp. 455-465. </pages>
Reference-contexts: Furthermore, this algorithm turns out to be exceedingly difficult to parallelize because the relevant data can not be easily decomposed into discrete regions. Another topological, regular grid extraction method is the Bin and Coalesce method a generalization of Rossignac and Borrel's algorithm for surface decimation <ref> [10] </ref>. This algorithm takes the geometric data discussed above and, for each triangle, bins its vertices by location. When every triangle has been processed, vertices located in the same bin are coalesced into a single vertex, and a topologically connected surfaces is output.
Reference: [11] <author> SHEKHAR, R., FAYYAD, E., YAGEL, R., AND CORNHILL, J. </author> <title> Octree-based decimation of marching cubes surfaces. In Visualization `96 (1996), </title> <publisher> IEEE Press, </publisher> <pages> pp. 335-342. </pages>
Reference-contexts: Within the domain of surface extraction from regularly gridded scalar data, several algorithms have been published. The most intuitive of these, an extension of Marching Cubes, is the seed-growth algorithm <ref> [11] </ref>. This algorithm was not motivated by the need for topological surfaces (that result was merely a by-product); rather, it was introduced as a way of extracting a single surface connected Submitted to Visualization 97 to a starting node in order to restrict the surface domain.
Reference: [12] <author> SHEN, H., HANSEN, C., LIVNAT, Y., AND JOHNSON, C. </author> <title> Isosurfacing in span space with utmost efficiency (issue). In Visualization `96 (1996), </title> <publisher> IEEE Press, </publisher> <pages> pp. 287-294. </pages>
Reference-contexts: Cubes algorithms [6, 1], Wilhelm and Van Gelder's hierarchical algorithms [15], and some of the more recent improvements based on locating the critical points of the field or reparameterizing the domain based on value with active lists [4], span filters [3], both active lists and span filters [13], or span-space <ref> [12] </ref>. While all of these algorithms fall under the broad umbrella of isosurfacing methods, they clearly differ in their domains of applicability. In this paper we will focus on those methods that generate a connected, topological surface while extracting.
Reference: [13] <author> SHEN, H., AND JOHNSON, C. Sweeping simplices: </author> <title> A fast isosurface extraction algorithm for unstructured grids. In Visualization `95 (1995), </title> <publisher> IEEE Press, </publisher> <pages> pp. 143-150. </pages>
Reference-contexts: Marching and Dividing Cubes algorithms [6, 1], Wilhelm and Van Gelder's hierarchical algorithms [15], and some of the more recent improvements based on locating the critical points of the field or reparameterizing the domain based on value with active lists [4], span filters [3], both active lists and span filters <ref> [13] </ref>, or span-space [12]. While all of these algorithms fall under the broad umbrella of isosurfacing methods, they clearly differ in their domains of applicability. In this paper we will focus on those methods that generate a connected, topological surface while extracting.
Reference: [14] <author> TURK, G., AND LEVOY, M. </author> <title> Zippered polygon meshes from range images. </title> <booktitle> In ACM SIGGRAPH Computer Graphics (1994), </booktitle> <publisher> IEEE Press, </publisher> <pages> pp. 311-318. </pages>
Reference-contexts: In all of these cases, it is not just important that the surface look right but that it be topologically connected. Isosurface extraction is not the only method used for constructing topological surfaces indeed, the vision literature is rich with methods for reconstructing models from range data <ref> [2, 5, 14] </ref>. For the purpose of this paper, we will restrict our interest to topological surface generation from scalar field data. Additionally, while there are many algorithms for extracting isosurfaces from data mapped to unstructured meshes, we will not be discussing those here.
Reference: [15] <author> WILHELMS, J., AND VAN GELDER, A. </author> <title> Octrees for faster isosurface generation. </title> <journal> ACM Transactions on Graphics 11, </journal> <month> 3 </month> <year> (1992), </year> <month> 201-227. </month> <title> 6 Submitted to Visualization 97 of a head. Surface contains 9492 triangles. of a head. Surface contains 47,436 triangles. model of a head. Surface contains 2,399,382 triangles. model of Visible Human Project male thorax. Surface contains 651,594 triangles. </title> <type> 7 </type>
Reference-contexts: We are all familiar with Lorensen and Cline's Marching and Dividing Cubes algorithms [6, 1], Wilhelm and Van Gelder's hierarchical algorithms <ref> [15] </ref>, and some of the more recent improvements based on locating the critical points of the field or reparameterizing the domain based on value with active lists [4], span filters [3], both active lists and span filters [13], or span-space [12]. <p> However, as with the original Marching Cubes algorithm, they must postprocess their data in order to obtain a connected, topological surface. Finally, there is the edge-hashing method, as described at the end of Wilhelm and Van Gelder's octree isosurfacing paper <ref> [15] </ref>. This method uses hashing to create connected surfaces during extraction, rather than after. It works from the observation that if linear interpolation is used to locate surface-lattice intersection, then each edge in the lattice contains at most one vertex of the isosurface.
References-found: 15

