URL: http://www.cs.umr.edu/techreports/94-01.ps
Refering-URL: http://www.cs.umr.edu/techreports/
Root-URL: 
Title: Efficient Run-Time Assurance in Distributed Systems Through Selection of Executable Assertions 1  
Author: Martina Schollmeyer and Bruce McMillin 
Date: January 6, 1994 CSC 94-1  
Abstract: Run-time assurance of a distributed system can be obtained by comparing, at run-time, the behavior of the program with the expected behavior described in the program's specification. Executable assertions, embedded into the program code, can determine when there are discrepancies, due to processor failures, between actual and expected behavior. Thus, there is no global monitoring scheme but processes will check each other. A non-faulty process will always perform correct computation. It can detect errors in other processes after receiving information from them and checking it against expected values by using executable assertions. In order to efficiently check programs at run-time, we need to determine how many assertions need to be used, where they need to be located, and what they need to check to ensure that all occurring errors can be detected. This paper introduces temporal subsumption to remove, from a given set of assertions for a specific program, the assertions which perform redundant checking. The remaining set of assertions is then the set necessary to provide run-time assurance. To subsume assertions, the flow graph of the program is examined using a graph traversal algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Hoare. </author> <title> Communicating Sequential Processes. </title> <journal> Communications of the ACM, </journal> <volume> 21(8) </volume> <pages> 666-677, </pages> <year> 1978. </year>
Reference-contexts: A distributed program P consists of a set of processes running concurrently on a set of n processors, and each individual process P i constitutes a sequential program. We use the model of Communicating Sequential Processes (CSP) <ref> [1] </ref>. In CSP, each process is described independently and processes can execute concurrently.
Reference: [2] <author> J. Jou and J. Abraham. </author> <title> Fault-Tolerant Matrix Arithmetic and Signal Processing on Highly Parallel Computing Structures. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 74(5) </volume> <pages> 732-741, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: 1 Introduction In order to provide run-time assurance for a message-passing, distributed system, we need to ensure the detection of all errors occurring at run-time. In the past, executable assertions have been used to detect hardware, communication <ref> [2] </ref> and software errors [4]. Assertions are logical expressions which describe expected program behavior and which can determine, when embedded into the program code, if the program meets its specifications. Assertions are, in general, conjunctions of clauses describing individual variables and their relationships with other variables.
Reference: [3] <author> L. Lamport, R. Shostack, and M. Pease. </author> <title> The byzantine general's problem. </title> <journal> ACM Transaction on Programming Language Systems, </journal> <volume> 4 </volume> <pages> 382-401, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: In a possibly faulty environment, we require the assertions in each individual process to examine the received messages from other processes for possible violation of the specifications. Thus, every process must be suspect of the data received from any other process. We allow for Byzantine <ref> [3] </ref> faultiness which describes malicious behavior such as sending inconsistent messages to different processes. In general, a Byzantine faulty process will never be able to detect its own faultiness and, thus, its errors can only be detected by some other, non-faulty, process.
Reference: [4] <author> B. McMillin and L. Ni. </author> <title> Reliable distributed sorting through the application-oriented fault tolerance paradigm. </title> <journal> IEEE Trans. of Parallel and Distributed Computing, </journal> <volume> 3(4) </volume> <pages> 411-420, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction In order to provide run-time assurance for a message-passing, distributed system, we need to ensure the detection of all errors occurring at run-time. In the past, executable assertions have been used to detect hardware, communication [2] and software errors <ref> [4] </ref>. Assertions are logical expressions which describe expected program behavior and which can determine, when embedded into the program code, if the program meets its specifications. Assertions are, in general, conjunctions of clauses describing individual variables and their relationships with other variables.
References-found: 4

