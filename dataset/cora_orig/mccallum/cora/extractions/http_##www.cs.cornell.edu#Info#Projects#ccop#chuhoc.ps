URL: http://www.cs.cornell.edu/Info/Projects/ccop/chuhoc.ps
Refering-URL: http://www.cs.cornell.edu/Info/Projects/ccop/reports.html
Root-URL: 
Title: A half-integral linear programming relaxation for scheduling precedence-constrained jobs on a single machine  
Author: Fabian A. Chudak Dorit S. Hochbaum 
Keyword: P Keywords: Scheduling, precedence constraints, approximation algorithms, linear programming  
Address: Berkeley  
Affiliation: Cornell University  U.C.  
Abstract: We present a new linear programming relaxation for the problem of minimizing the sum of weighted completion times of precedence-constrained jobs. Given a set of n jobs, each job j has processing time p j and weight w j . There is also a partial order on the execution of the jobs: if j k, job k may not start processing before job j has been completed. For C j representing the completion time of job j, the objective is to minimize the weighted sum of completion times, j w j C j . The new relaxation is simple and compact, has exactly two variables per inequality and half-integral extreme points. An optimal solution can be found via a minimum cut computation, which provides a new 2-approximation algorithm in the complexity of a minimum cut on a graph. In addition to being combinatorial, the resulting approximation algorithm has the fastest worst case strongly polynomial running time known to date. As a by-product, we also introduce another new 2-approximation algorithm for the problem.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Von Arnim, U. Faigle, and R. Schrader. </author> <title> The permutahedron of series-parallel posets. </title> <journal> Disc. Appl. Math., </journal> <volume> 28 </volume> <pages> 3-9, </pages> <year> 1990. </year>
Reference-contexts: polynomial approximation algorithm for the problem, but also, compared to the above two alternative algorithms, it has the advantage of being the only algorithm that is combinatorial. 4 A new 2-approximation algorithm for 1jprecj P In the following theorem we generalize an observation made by Von Arnim, Faigle and Schrader <ref> [1] </ref>, for the special case in which the precedence constraints are series-parallel and all weights are 1. Although the proof is straightforward, it has not been mentioned earlier in the literature.
Reference: [2] <author> D. Coppersmith and S. Winograd. </author> <title> Matrix computations via arithmetic progessions. </title> <booktitle> In Proceedings of the 19th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 1-6, </pages> <year> 1987. </year>
Reference: [3] <author> A.V. Goldberg and R.E. Tarjan. </author> <title> A new approach for the maximum flow problem. </title> <journal> J. of ACM, </journal> <volume> 35 </volume> <pages> 921-940, </pages> <year> 1988. </year>
Reference-contexts: Finally let us consider the running time of the linear program SLO. A minimum cut com 10 putation has a worst case running time of O (jV jjAj log jV j 2 jAj ) using the minimum cut algorithm of Goldberg and Tarjan <ref> [3] </ref> on a network G = (V; A). This running time is O (n 5 log n) for our network N .
Reference: [4] <author> R.L. Graham, E.L. Lawler, J.K. Lenstra, and A.H.G. Rinnoy Kan. </author> <title> Optimization and approximation in deterministic sequencing and scheduling: a survey. </title> <journal> Ann. Discrete Math., </journal> <volume> 5 </volume> <pages> 287-326, </pages> <year> 1979. </year>
Reference-contexts: The objective is to minimize the sum of the weighted completion times, P n j=1 w j C j . Using the notation of the survey article of Graham, Lawler, Lenstra, & Rinnooy Kan (1979) <ref> [4] </ref>, this problem is denoted 1jprecj P The problem is known to be NP-complete ([7]). The first constant factor guarantee was given by Hall, Schulz, Shmoys & Wein (1996) [5], who provided a 2-approximation algorithm. This is the best known approximation factor to date.
Reference: [5] <author> L.A. Hall, A.S. Schulz, D.B. Shmoys, and J. Wein. </author> <title> Scheduling to minimize average completion time: off-line and on-line approximation algorithms. </title> <journal> Math. of Operations Research, </journal> <note> to appear. 12 </note>
Reference-contexts: Using the notation of the survey article of Graham, Lawler, Lenstra, & Rinnooy Kan (1979) [4], this problem is denoted 1jprecj P The problem is known to be NP-complete ([7]). The first constant factor guarantee was given by Hall, Schulz, Shmoys & Wein (1996) <ref> [5] </ref>, who provided a 2-approximation algorithm. This is the best known approximation factor to date. The algorithm of Hall et al. is based on solving a linear programming relaxation of the problem. The relaxation uses completion time variables. <p> In this paper we present a linear programming relaxation that is weaker than that of Potts', but stronger than the one of <ref> [5] </ref>, thus within a factor of 2 from optimal. Our relaxation is based on linear ordering variables, like the linear ordering relaxation of Pott's. However it contains only 2 variables per inequality and is simpler and relaxed compared to Pott's relaxation. <p> The formulation of <ref> [5] </ref> uses the variables C j that represent the completion times of the jobs. Let N = f1; : : : ; ng be the set of jobs. For each subset of jobs S N let p (S) := P p 2 (S) := j2S p 2 j . <p> precedence constraints are introduced by adding C k C j + p k ; if j k: (2) The linear programming relaxation on completion time variables CT can now be written as (CT) n X w j C j subject to (1) (2) The 2-approximation algorithm of Hall et al. <ref> [5] </ref> works as follows: first solve the linear program CT and then schedule the jobs in a sequence corresponding to optimal LP values for C j , C j , j = 1; : : : ; n, in nondecreasing order. <p> To obtain a lower bound, we relax the integrality constraints replacing them by ffi ij 0; i 6= j ; (7) we will refer to the relaxation of ILO as LO. This linear programming relaxation was proposed by Potts in [8]. As observed in <ref> [5] </ref>, this relaxation satisfies all the inequalities of the relaxation CT when deriving the completion times values from (6). <p> In particular, an optimal solution to SLO can be rounded to a 2-approximate schedule as in section 2.1 . Also if we denote OPT LP the optimal objective value of the linear program LP, we have that OPT CT OPT SLO OPT LO : Examples from <ref> [5] </ref> show that the inequality on the left is tight. An interesting open question is whether the inequality on the right is tight or not. Each constraint of ISLO has no more than two variables. <p> We consider first the linear program CT. Even though, CT has exponentially many inequalities (1), as pointed out in <ref> [5] </ref>, it can be solved in polynomial time using a separation oracle. In fact, a routine of [9] can be used to separate the supermodular inequalities (1) in O (n log n) time. <p> Note that the proof of the theorem also establishes that the SLO relaxations of the two instances have the same objective function value. The new approximation algorithm consists of applying the algorithm of <ref> [5] </ref>, described in section 2.1, to the new instance constructed as in the theorem exchanging the roles of the weights and processing times. <p> In effect, notice that after solving the min-cut of section 2.3, if fffi ij g is an optimal solution, we obtain two 2-approximation algorithms: as in <ref> [5] </ref>, use the sequence based on nondecreasing values of C j := p j + P k ffi kj p k , j = 1; : : : ; n, and as above use the sequence based on nonincreasing values of T j .
Reference: [6] <author> D.S. Hochbaum, N. Meggido, J. Naor, and A. Tamir. </author> <title> Tight bounds and 2-approximation algorithms for integer programs with two variables per inequality. </title> <journal> Math. Programming, </journal> <volume> 62 </volume> <pages> 69-83, </pages> <year> 1993. </year>
Reference-contexts: However it contains only 2 variables per inequality and is simpler and relaxed compared to Pott's relaxation. In addition, a half-integral optimal solution can be found via a minimum cut computation. This is a consequence of the work of Hochbaum, Meggido, Naor & Tamir (1993) <ref> [6] </ref>. Our algorithm is not only the first combinatorial 2-approximation algorithm, but also among the strongly polynomial 2-approximation algorithms for the problem, it is the fastest known to date. <p> An interesting open question is whether the inequality on the right is tight or not. Each constraint of ISLO has no more than two variables. Therefore ISLO is a special case of IP2 studied by Hochbaum et al. in <ref> [6] </ref>, (IP2) P n subject to a i x j i + b i x k i c i for i = 1; : : : ; m ` j x j u j j = 1; : : : ; n x j integer j = 1; : : : <p> Moreover, the half integral solution has a rounding of the components that are half integer that is feasible and the resulting solution is 2-approximate for IP2. For the integer program ISLO, with n the number of jobs, the network of <ref> [6] </ref> has O (n 2 ) nodes and O (n 3 ) arcs. Furthermore, any IP2 problem has a superoptimal half-integral solution that is derived from the solution of the minimum cut problem on the respective network. <p> In addition, there is an optimal solution that coincides with the half-integral solution on the integer components. Consider now the linear program SLO. Since the integer program SLO has all constraint coefficients in f1; 0; 1g, it follows from Lemma 6.1 of <ref> [6] </ref> that the extreme points of the linear programming relaxation are half-integral. Namely, each basic feasible solution has each variable ffi ij , i &lt;&gt; j, either 0, 1 2 or 1. Indeed, as in [6], an optimal solution to the linear programming relaxation can be found via a minimum cut <p> SLO has all constraint coefficients in f1; 0; 1g, it follows from Lemma 6.1 of <ref> [6] </ref> that the extreme points of the linear programming relaxation are half-integral. Namely, each basic feasible solution has each variable ffi ij , i &lt;&gt; j, either 0, 1 2 or 1. Indeed, as in [6], an optimal solution to the linear programming relaxation can be found via a minimum cut computation. Note that the procedure of [6] for generating a 2-approximation algorithm via rounding, is not applicable to SLO because rounding is not guaranteed to generate a feasible solution to LO. <p> Namely, each basic feasible solution has each variable ffi ij , i &lt;&gt; j, either 0, 1 2 or 1. Indeed, as in <ref> [6] </ref>, an optimal solution to the linear programming relaxation can be found via a minimum cut computation. Note that the procedure of [6] for generating a 2-approximation algorithm via rounding, is not applicable to SLO because rounding is not guaranteed to generate a feasible solution to LO. Instead it is necessary to compute the "fractional" completion times and thus derive a feasible sequence.
Reference: [7] <author> E.L. Lawler. </author> <title> Sequencing jobs to minimize total weighted completion time subject to precedence constraints. </title> <journal> Ann. Discrete Math., </journal> <volume> 2 </volume> <pages> 75-90, </pages> <year> 1978. </year>
Reference: [8] <author> C.N. Potts. </author> <title> An algorithm for the single machine sequencing problem with precedence constraints. </title> <journal> Math. Programming Stud., </journal> <volume> 13 </volume> <pages> 78-87, </pages> <year> 1980. </year>
Reference-contexts: The relaxation uses completion time variables. The linear program contains an exponential number of inequalities, yet it can be solved in polynomial time using a separation oracle (see Section 3). Hall et al. also pointed out that a relaxation proposed by Potts (1980) <ref> [8] </ref>, a linear ordering formulation, contains only a polynomial number of constraints, and has the property that any feasible solution satisfies all the constraints of their original linear programming relaxation. <p> j 2 i=1 Since the completion time of job j in the schedule produced by the algorithm is P j scheduling the jobs in the order 1; : : : ; n is a 2-approximate solution. 4 2.2 The linear ordering relaxation of Potts In the relaxation proposed by Potts <ref> [8] </ref> there is a binary variable for each pair of jobs i and j, ffi ij , which is 1 if i is scheduled before j, and 0 otherwise. <p> To obtain a lower bound, we relax the integrality constraints replacing them by ffi ij 0; i 6= j ; (7) we will refer to the relaxation of ILO as LO. This linear programming relaxation was proposed by Potts in <ref> [8] </ref>. As observed in [5], this relaxation satisfies all the inequalities of the relaxation CT when deriving the completion times values from (6).
Reference: [9] <author> M. Queyranne. </author> <title> Structure of a simple scheduling polyhedron. </title> <journal> Math. Programming, </journal> <volume> 58 </volume> <pages> 263-285, </pages> <year> 1993. </year>
Reference-contexts: Let N = f1; : : : ; ng be the set of jobs. For each subset of jobs S N let p (S) := P p 2 (S) := j2S p 2 j . The following valid inequalities were proposed by Queyranne <ref> [9] </ref>: X p j C j 2 (p 2 (S) + p (S) 2 ); for each S N: (1) Note that the right hand-side in (1) is a supermodular function on the subsets of N . <p> We consider first the linear program CT. Even though, CT has exponentially many inequalities (1), as pointed out in [5], it can be solved in polynomial time using a separation oracle. In fact, a routine of <ref> [9] </ref> can be used to separate the supermodular inequalities (1) in O (n log n) time. Since in the worst case there could be O (n 2 ) inequalities (2), overall the separation routine takes at most O (n 2 ) time.
Reference: [10] <author> A.S. Schulz. </author> <title> Private communication, </title> <month> June </month> <year> 1997. </year>
Reference-contexts: Finally we propose a new 2-approximation algorithm for the problem, which is based on a simple observation concerning the interchange of weights and processing times for the general problem. Independently of our work, it was communicated to us by Andreas Schulz (June, 1997) <ref> [10] </ref>, that Margot, Queyranne and Wang claim to have also obtained new 2-approximation algorithms for the problem. 3 2 Linear programming relaxation for 1jprecj P 2.1 The completion time formulation of Hall et al.
Reference: [11] <author> P.M. Vaidya. </author> <title> A new algorithm for minimizing convex functions over convex sets. </title> <booktitle> In Proceedings of the 30th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 338-343, </pages> <year> 1989. </year>
Reference-contexts: Since there are at most n! terms, each no greater than p n max , the logarithm of the determinant is at most O (n (log p max + log n)). For constraints described using a separation oracle, the fastest algorithm known to date, due to Vaidya <ref> [11] </ref>, takes O (T nL + M (n)nL) time to solve a linear program with n variables, where T is the time needed for one call to the separation oracle and L is the logarithm of the largest subdeterminant in absolute value of the constraint matrix.
Reference: [12] <author> P.M. Vaidya. </author> <title> Speeding-up linear programming using fast matrix multiplication. </title> <booktitle> In Proceedings of the 30th Annual IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 332-337, </pages> <year> 1989. </year>
Reference-contexts: algorithm already provides a strongly polynomial algorithm, and that, in this case, given that the separation oracle is fast, the algorithm runs faster than using an all-purpose linear programming algorithm, in which the constraints are specified by a polynomial number of inequalities (such as the fastest, also due to Vaidya <ref> [12] </ref>). Finally let us consider the running time of the linear program SLO.
Reference: [13] <author> L.A. Wolsey. </author> <title> Formulating single machine scheduling problems with precedence constraints. </title> <editor> In J.J. Gabsewicz, J.F. Richard, and L.A. Wolsey, editors, </editor> <title> Econimic Decision Making: Games, Econometrics and Optimisation, </title> <booktitle> Contributions in Honour of Jacques Dreze, </booktitle> <pages> pages 473-484. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year> <title> 13 t +1 ffi kj ffi ik ffi jk ffi ki ffi ij s p j w i =2 p i w j =2 </title>
Reference-contexts: of job j, C j , is C j = p j + k6=j It is easy to see that the linear ordering formulation ILO (ILO) n X w j C j subject to (3) (6) ffi ij 2 f0; 1g is indeed a complete formulation of the problem (see <ref> [13] </ref>). To obtain a lower bound, we relax the integrality constraints replacing them by ffi ij 0; i 6= j ; (7) we will refer to the relaxation of ILO as LO. This linear programming relaxation was proposed by Potts in [8].
References-found: 13

