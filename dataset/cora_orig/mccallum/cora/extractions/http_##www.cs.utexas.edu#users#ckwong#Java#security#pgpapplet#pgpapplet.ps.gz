URL: http://www.cs.utexas.edu/users/ckwong/Java/security/pgpapplet/pgpapplet.ps.gz
Refering-URL: http://www.cs.utexas.edu/users/ckwong/Java/security/index.html
Root-URL: 
Title: PGP Enhancement to Java Applet  
Author: Chung Kei Wong 
Date: 17 December 1996  
Abstract: In this project, we investigated different possible approaches for Java-capable web browsers to provide flexible access control to applets, and then we designed, implemented, and tested our approach. Our approach uses PGP to do authentication and to provide privacy. We modify the class loader to use PGP to authenticate (and decrypt) a signed (and encrypted) applet. The security manager is also modified to use the signature of a signed applet and the originating host, path, and name of the applet to make authorization decision. The security manager consults the user's access control policy which is specified as a list of properties in the user's properties file. Since our approach is independent of machine and web browser, it can be ported to different platforms and browsers. It is compatible with existing web servers, web pages, and web browsers. Only a few modifications to web servers, web pages, and web browsers are required to use. The time and space overhead is low. It is simple to use. The existing public key infrastructure provided by PGP can be utilized.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Godmar Back. </author> <note> How to bypass netscape's securitymanager. 23 http://www.cs.utah.edu/~gback/netscape/bypass.html. </note>
Reference-contexts: Their approach requires kernel modification which is considered be a bad idea in [8] due to the inconveniency and the risk of introducing bugs to security-critical kernel. One work related to access control in Java environment is the article "How to bypass Netscape's SecurityManager" by Godmar Back <ref> [1] </ref>. This article describes a way to completely disable the function of the security manager. This is done by replacing the security manager of Netscape version 2.0 browser with an empty security manager. The author does not deal with the support of flexible access control.
Reference: [2] <author> Lee Badger, Daniel F. Sterne, David L. Sherman, Kenneth M. Walker, and Sheila A. Haghighat. </author> <title> Practical domain and type enforcement for unix. </title> <booktitle> IEEE Symposium on Security and Privacy, </booktitle> <year> 1995. </year> <note> http://shadowplay.hq.tis.com/docs/research/operating/dteproj.html. </note>
Reference-contexts: Since most applications (Java applications or ordinary applications) are complicated and big, it is not cost-effective (or simply impossible) to prove that the applications are bug-free and contain no malicious codes <ref> [21, 8, 2, 22] </ref>. Moreover, applications may also be affected by computer viruses or by bad input data to cause damages to the end-user. Therefore, it is desirable to provide a secure environment for the execution of these (untrusted) applications. <p> Their approach can protect pre-existing applications. However, their approach requires the support of Solaris process tracing facility from the underlying OS, which makes their approach OS dependent and cannot be applied to other platforms. Domain and Type Enforcement (DTE) to UNIX <ref> [22, 2] </ref> is an approach to provide mandatory access control to security-related programs and data. Their approach requires kernel modification which is considered be a bad idea in [8] due to the inconveniency and the risk of introducing bugs to security-critical kernel.
Reference: [3] <author> Bryan Bilbrey and Ben Jeffcoat. </author> <title> Custom security for dynamically loaded java applications. </title> <address> http://www.ece.utexas.edu/~jeffcoat/project.html. </address>
Reference-contexts: This is done by replacing the security manager of Netscape version 2.0 browser with an empty security manager. The author does not deal with the support of flexible access control. The other Java related works are the work of Bryan Bilbrey and Ben Jeffcoat <ref> [3] </ref>, and the Java code signing by Sun Microsystems Inc. [12]. Both are not completed at the time of this writing.
Reference: [4] <author> Drew Dean, Edward W. Felten, and Dan S. Wallach. </author> <title> Java Security: From HotJava to Netscape and Beyond. </title> <booktitle> Proceedings of 1996 IEEE Symposium on Security and Privacy, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: As an example, a user may not even want an applet to make connections to the originating host. For many other useful tasks, the "sandbox" security model is too restricted, and flexible access control policy support for applet is required <ref> [6, 4] </ref>. 2 A simple example (from [6]) is that home banking applet may need to create and maintain its own directory on the end-user's home directory.
Reference: [5] <author> Edward W. Felten, Dirk Balfanz, Drew Dean, and Dan S. Wallach. </author> <title> Web spoofing: An internet con game. </title> <note> http://www.cs.princeton.edu/sip/pub/spoofing.html, December 1996. </note>
Reference-contexts: This is useful to distribute software or software up-grade through the Internet. Address-based authentication is not as secure as the cryptography-based authentication. For example, address-based authentication is vulnerable to the "man-in-the-middle" attack <ref> [5] </ref>. However, it is a useful mean to support flexible access control on non-critical resources, e.g. writing to /tmp directory, or making connections to originating host.
Reference: [6] <author> J. Steven Fritzinger and Marianne Mueller. </author> <title> Java security. </title> <address> http://www.javasoft.com/security/whitepaper.ps. </address>
Reference-contexts: Usually, the Java virtual machine is implemented on top of a machine's native operating system, e.g. Microsoft Windows, UNIX, MacOS, etc. 1 Java programs run on top of the Java virtual machine. One important advantage of Java is the "Write Once/Run Anywhere" capability <ref> [6] </ref>. Java programs can be executed on any Java virtual machine without any modification, porting, and recompilation, no matter where the Java programs are developed and compiled. <p> An applet can do anything within its sandbox but not outside of it. This is the so-called "sandbox" security model for applets <ref> [6] </ref>. <p> As an example, a user may not even want an applet to make connections to the originating host. For many other useful tasks, the "sandbox" security model is too restricted, and flexible access control policy support for applet is required <ref> [6, 4] </ref>. 2 A simple example (from [6]) is that home banking applet may need to create and maintain its own directory on the end-user's home directory. <p> As an example, a user may not even want an applet to make connections to the originating host. For many other useful tasks, the "sandbox" security model is too restricted, and flexible access control policy support for applet is required [6, 4]. 2 A simple example (from <ref> [6] </ref>) is that home banking applet may need to create and maintain its own directory on the end-user's home directory.
Reference: [7] <author> Morrie Gasser. </author> <title> Building a Secure Computer System. </title> <publisher> Van Nostrand Reinhold, </publisher> <year> 1988. </year>
Reference-contexts: Therefore, it is desirable to provide a secure environment for the execution of these (untrusted) applications. In order to limit the damages caused by a misbehavored application, the access of an application to the host system should be restricted, like applet. According to the principle of least privilege <ref> [7] </ref>, subjects should be given no more privilege than is necessary to enable them to do their jobs.
Reference: [8] <author> Ian Goldberg, David Wagner, Randi Thomas, and Eric A. Brewer. </author> <title> A secure environment for untrusted helper applications. </title> <booktitle> 1996 USENIX Security Symposium, </booktitle> <year> 1996. </year> <note> http://http.cs.berkeley.edu/~daw/janus-usenix96.ps. </note>
Reference-contexts: Since most applications (Java applications or ordinary applications) are complicated and big, it is not cost-effective (or simply impossible) to prove that the applications are bug-free and contain no malicious codes <ref> [21, 8, 2, 22] </ref>. Moreover, applications may also be affected by computer viruses or by bad input data to cause damages to the end-user. Therefore, it is desirable to provide a secure environment for the execution of these (untrusted) applications. <p> The authors address the problem of safety for trusted modules running in the same address space as untrusted modules. They do not consider the security problem of running untrusted programs. In <ref> [8] </ref>, the authors provide a secure environment for untrusted helper applications. Their approach can protect pre-existing applications. However, their approach requires the support of Solaris process tracing facility from the underlying OS, which makes their approach OS dependent and cannot be applied to other platforms. <p> Domain and Type Enforcement (DTE) to UNIX [22, 2] is an approach to provide mandatory access control to security-related programs and data. Their approach requires kernel modification which is considered be a bad idea in <ref> [8] </ref> due to the inconveniency and the risk of introducing bugs to security-critical kernel. One work related to access control in Java environment is the article "How to bypass Netscape's SecurityManager" by Godmar Back [1]. This article describes a way to completely disable the function of the security manager.
Reference: [9] <author> Sun Microsystems Inc. </author> <title> Faq applet security. </title> <address> http://www.javasoft.com/sfaq/index.html. </address>
Reference-contexts: An applet can do anything within its sandbox but not outside of it. This is the so-called "sandbox" security model for applets [6]. Currently, all Java applets downloaded over network have the following restrictions <ref> [9] </ref>. * Cannot read and write files on the client file system. * Cannot make network connections except to the originating host. * Cannot start other programs on the client. * Cannot load libraries. 1 JavaOS [19] is a stand-alone operating environment that can run Java program without a host operating <p> JavaChip [19] is a microprocessor that has the Java virtual machine implemented in hardware. 2 * Cannot define native method calls. * Cannot read some system properties. * Cannot create a popup window without a warning. The security manager <ref> [9, 17] </ref> of the browser is used to enforce these restrictions. Even though the "sandbox" security model provides adaquate protection for most users and applets, for some users and applets, an even more restricted security model may be required. <p> Thus, a flexible access control policy should be supported, so that a user can define different access control policies to different programs (applets and applications). 2 Note that in Hotjava web browser [10], user can relieve some restrictions by specifying in the properties file <ref> [9] </ref>. However, using this approach, all applets are granted the same capabilities which is highly undesirable. 3 1.3 Project goals In this project, we investigated different possible approaches for Java-capable web browsers to provide flexible access control to applets, and then we designed, implemented, and tested our approach. <p> In order to provide different capabilities to different applets, the first step is to identify an applet (authentication). We decided to use PGP [25] to provide authentication (digital signature and verification) and privacy (encryption and decryption). We modify the class loader <ref> [9] </ref>, which is responsible for loading applet over network, to use PGP to authenticate (and decrypt) a signed (and encrypted) applet. The security manager [9], which is responsible for enforcing access control policy, is also modified to use the signature of a signed applet and the originating host, path, and name <p> We decided to use PGP [25] to provide authentication (digital signature and verification) and privacy (encryption and decryption). We modify the class loader <ref> [9] </ref>, which is responsible for loading applet over network, to use PGP to authenticate (and decrypt) a signed (and encrypted) applet. The security manager [9], which is responsible for enforcing access control policy, is also modified to use the signature of a signed applet and the originating host, path, and name of the applet to make authorization decision [17]. <p> The security manager needs to consult an access control policy specified by the user to make the decision accordingly. In our approach, the access control policy is specified by user as a list of properties in the user's properties file <ref> [9] </ref>. Since our approach is independent of machine and web browser, it can be ported to different platforms and browsers. It is compatible with existing web servers, web pages, and web browsers. Only a few modifications to web servers, web pages, and web browsers are required to use. <p> They are used to test the effect of the size of applets and the number of applets per web page. Applet readFile tries to read the first line of the file /etc/passwd and prints it out. It is obtained from Sun's Applet FAQ <ref> [9] </ref> (http://www.javasoft.com/sfaq/example/readFile.java). It is used to test the overhead of security manager. We consider the time overhead on client-side only since on the server, the encryption and digital signature can be done o*ine and once only. The numbers in Table 1, 2, and 3 are in seconds.
Reference: [10] <author> Sun Microsystems Inc. Hotjava(tm): </author> <title> The security story. </title> <address> http://www.javasoft.com/sfaq/may95/security.html. </address>
Reference-contexts: Thus, a flexible access control policy should be supported, so that a user can define different access control policies to different programs (applets and applications). 2 Note that in Hotjava web browser <ref> [10] </ref>, user can relieve some restrictions by specifying in the properties file [9].
Reference: [11] <institution> Sun Microsystems Inc. </institution> <note> Jar file format specification version 1.0. http://www.javasoft.com/people/dac/doc/jar-format.html. </note>
Reference-contexts: In this case, we can limit the access rights of a untrusted/unverified Java program. User can also provide flexible access control to Java programs as well as Java applets. We can also archive a number of related Java applets or Java programs into a single archive file (like JAR <ref> [11] </ref>). In the current implementation, the signed and/or encrypted applet is first written to a file and then the PGP verifier is called as a native method to verify and/or decrypt the file.
Reference: [12] <author> Sun Microsystems Inc. </author> <title> Java code signing. </title> <note> http://www.javasoft.com/security/codesign/index.html. 24 </note>
Reference-contexts: The author does not deal with the support of flexible access control. The other Java related works are the work of Bryan Bilbrey and Ben Jeffcoat [3], and the Java code signing by Sun Microsystems Inc. <ref> [12] </ref>. Both are not completed at the time of this writing. Note that the JDK version 1.1 of Sun Microsystems Inc. contains some classes for digital signature, and it is still in beta testing stage. 22 9 Future work There are a number of possible future works.
Reference: [13] <author> Sun Microsystems Inc. </author> <title> The java language: An overview. </title> <address> http://www.javasoft.com/doc/Overviews/java/index.html. </address>
Reference-contexts: 1 Introduction 1.1 Background Java <ref> [13, 14] </ref> is an object-oriented programming language developed by Sun Microsystems Inc. A program written in Java is compiled to a class file [24, 16] which is an architecturally neutral, binary intermediate format.
Reference: [14] <author> Sun Microsystems Inc. </author> <title> The java language specification. </title> <address> http://www.javasoft.com/doc/language_specification.html. </address>
Reference-contexts: 1 Introduction 1.1 Background Java <ref> [13, 14] </ref> is an object-oriented programming language developed by Sun Microsystems Inc. A program written in Java is compiled to a class file [24, 16] which is an architecturally neutral, binary intermediate format.
Reference: [15] <author> Sun Microsystems Inc. </author> <title> The java tutorial. </title> <address> http://www.javasoft.com/doc/tutorial.html. </address>
Reference-contexts: Informally, a Java program is called a Java application if it is a stand-alone program and can be executed on the Java virtual machine directly. A Java program is called a Java applet if it is executed in the context of an applet viewer or a Java-compatible web browser <ref> [15] </ref>. One of the most exciting uses of Java applets is to include them in web pages. This allows web publishers to include sophisticated and interactive applets in their web pages instead of just text and pictures.
Reference: [16] <author> Sun Microsystems Inc. </author> <title> The java virtual machine specification. </title> <address> http://www.javasoft.com/doc/language_vm_specification.html. </address>
Reference-contexts: 1 Introduction 1.1 Background Java [13, 14] is an object-oriented programming language developed by Sun Microsystems Inc. A program written in Java is compiled to a class file <ref> [24, 16] </ref> which is an architecturally neutral, binary intermediate format. In 1 the class file, the program is implemented in bytecodes [16, 24], the instruc-tion set of a virtual machine. The program in the bytecodes format is then executed/interpreted by Java virtual machine [16, 19]. <p> 1 Introduction 1.1 Background Java [13, 14] is an object-oriented programming language developed by Sun Microsystems Inc. A program written in Java is compiled to a class file [24, 16] which is an architecturally neutral, binary intermediate format. In 1 the class file, the program is implemented in bytecodes <ref> [16, 24] </ref>, the instruc-tion set of a virtual machine. The program in the bytecodes format is then executed/interpreted by Java virtual machine [16, 19]. Usually, the Java virtual machine is implemented on top of a machine's native operating system, e.g. <p> In 1 the class file, the program is implemented in bytecodes [16, 24], the instruc-tion set of a virtual machine. The program in the bytecodes format is then executed/interpreted by Java virtual machine <ref> [16, 19] </ref>. Usually, the Java virtual machine is implemented on top of a machine's native operating system, e.g. Microsoft Windows, UNIX, MacOS, etc. 1 Java programs run on top of the Java virtual machine. One important advantage of Java is the "Write Once/Run Anywhere" capability [6].
Reference: [17] <author> Sun Microsystems Inc. </author> <title> Providing your own security manager: in java tutorial. </title> <address> http://www.javasoft.com/books/Series/Tutorial/ networking/security/index.html. </address>
Reference-contexts: JavaChip [19] is a microprocessor that has the Java virtual machine implemented in hardware. 2 * Cannot define native method calls. * Cannot read some system properties. * Cannot create a popup window without a warning. The security manager <ref> [9, 17] </ref> of the browser is used to enforce these restrictions. Even though the "sandbox" security model provides adaquate protection for most users and applets, for some users and applets, an even more restricted security model may be required. <p> The security manager [9], which is responsible for enforcing access control policy, is also modified to use the signature of a signed applet and the originating host, path, and name of the applet to make authorization decision <ref> [17] </ref>. Note that if an applet is not signed, flexible access control can still be provided and the decision will base on the originating host, path, and name of the applet only.
Reference: [18] <author> Charlie Kaufman, Radia Perlman, and Mike Speciner. </author> <title> Network Security: Private Communication in a Public World. </title> <publisher> PTR Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey 07632, </address> <year> 1995. </year>
Reference-contexts: Thus, we decided to use public-key cryptography authentication. Moreover, there are several advantages for using the public-key cryptography authentication of an existing secure email program, e.g. PEM, PGP, and X.400 <ref> [18] </ref>, to do the authentication. First, a user can use the same public and private key pair for both email and web publishing, just like to use the same signature to sign all legal documents. <p> Second, the existing public key infrastructure of the secure email can be used, e.g. how to obtain public key, how to publish public key, how to revoke a key, etc. 6 There are three major secure email programs, PEM, PGP, and X.400 3 <ref> [18] </ref>. We decided to use PGP to authenticate applets for the following reasons. First, the source code of PGP is available and it is not difficult to integrate PGP with class loader. Second, PGP is international. Users outside North America can still use our enhancement. <p> This simple approach is both intuitive for the user to use and is independent of platform, OS, and 3 Reader may want to consult <ref> [18] </ref> for the discussion on these three email programs and their advantages and disadvantages. 7 browser. We tested this simple approach for time overhead and the result is summarized in the Performance Analysis section later.
Reference: [19] <author> Douglas Kramer. </author> <title> The java platform, </title> <note> a white paper. http://www.javasoft.com/doc/whitePaper.Platform/ CreditsPage.doc.html. </note>
Reference-contexts: In 1 the class file, the program is implemented in bytecodes [16, 24], the instruc-tion set of a virtual machine. The program in the bytecodes format is then executed/interpreted by Java virtual machine <ref> [16, 19] </ref>. Usually, the Java virtual machine is implemented on top of a machine's native operating system, e.g. Microsoft Windows, UNIX, MacOS, etc. 1 Java programs run on top of the Java virtual machine. One important advantage of Java is the "Write Once/Run Anywhere" capability [6]. <p> Currently, all Java applets downloaded over network have the following restrictions [9]. * Cannot read and write files on the client file system. * Cannot make network connections except to the originating host. * Cannot start other programs on the client. * Cannot load libraries. 1 JavaOS <ref> [19] </ref> is a stand-alone operating environment that can run Java program without a host operating system. JavaChip [19] is a microprocessor that has the Java virtual machine implemented in hardware. 2 * Cannot define native method calls. * Cannot read some system properties. * Cannot create a popup window without a <p> read and write files on the client file system. * Cannot make network connections except to the originating host. * Cannot start other programs on the client. * Cannot load libraries. 1 JavaOS <ref> [19] </ref> is a stand-alone operating environment that can run Java program without a host operating system. JavaChip [19] is a microprocessor that has the Java virtual machine implemented in hardware. 2 * Cannot define native method calls. * Cannot read some system properties. * Cannot create a popup window without a warning. The security manager [9, 17] of the browser is used to enforce these restrictions.
Reference: [20] <author> Jennifer G. Steiner, Clifford Neuman, and Jeffrey I. Schiller. </author> <title> Kerberos: An authentication service for open network systems. </title> <booktitle> USENIX Winter Conference, </booktitle> <pages> pages 191-202, </pages> <month> February </month> <year> 1988. </year> <note> http://nii.isi.edu/gost-grop/products/kerberos/index.html. </note>
Reference-contexts: In this project, both address-based authentication and cryptography-based authentication are used. In cryptography-based authentication, we can use secret-key cryptography, like those used by Kerberos <ref> [20] </ref>, or we can use public-key cryptography, like those used by PGP. However, for our application environment, the Internet, the number of clients and servers is too huge for secret-key cryptography authentication to work efficiently. Thus, we decided to use public-key cryptography authentication.
Reference: [21] <author> Robert Wahbe, Steven Lucco, Thomas E. Anderson, and Susan L. Graham. </author> <title> Efficient software-based fault isolation. </title> <booktitle> Proc. Fourteenth ACM Symposium on Operating System Principles, </booktitle> <pages> pages 203-216, </pages> <month> December </month> <year> 1993. </year> <note> http://http.cs.berkeley.edu/~tea/sfi.ps. </note>
Reference-contexts: Since most applications (Java applications or ordinary applications) are complicated and big, it is not cost-effective (or simply impossible) to prove that the applications are bug-free and contain no malicious codes <ref> [21, 8, 2, 22] </ref>. Moreover, applications may also be affected by computer viruses or by bad input data to cause damages to the end-user. Therefore, it is desirable to provide a secure environment for the execution of these (untrusted) applications. <p> Upon receiving the applet, the service provider can verify the signature, execute the applet and charge the user according to the information accessed, the cpu time, and number of bytes transmitted by the applet. 8 Related Work The idea of "sandbox" security model was first introduced in <ref> [21] </ref>. The authors address the problem of safety for trusted modules running in the same address space as untrusted modules. They do not consider the security problem of running untrusted programs. In [8], the authors provide a secure environment for untrusted helper applications. Their approach can protect pre-existing applications.
Reference: [22] <author> Kenneth M. Walker, Daniel F. Sterne, Lee Badger, Karen A. Oost-endorp, Michael J. Petkac, and David L. Sherman. </author> <title> Confining root programs with domain and type enforcement (dte). </title> <booktitle> USENIX UNIX Security Symposium, </booktitle> <year> 1996. </year> <note> http://shadowplay.hq.tis.com/docs/research/operating/dteproj.html. 25 </note>
Reference-contexts: Since most applications (Java applications or ordinary applications) are complicated and big, it is not cost-effective (or simply impossible) to prove that the applications are bug-free and contain no malicious codes <ref> [21, 8, 2, 22] </ref>. Moreover, applications may also be affected by computer viruses or by bad input data to cause damages to the end-user. Therefore, it is desirable to provide a secure environment for the execution of these (untrusted) applications. <p> Their approach can protect pre-existing applications. However, their approach requires the support of Solaris process tracing facility from the underlying OS, which makes their approach OS dependent and cannot be applied to other platforms. Domain and Type Enforcement (DTE) to UNIX <ref> [22, 2] </ref> is an approach to provide mandatory access control to security-related programs and data. Their approach requires kernel modification which is considered be a bad idea in [8] due to the inconveniency and the risk of introducing bugs to security-critical kernel.
Reference: [23] <author> Thomas Y.C. Woo and Simon S. Lam. </author> <title> Designing an authorization ser-vice. </title> <type> Technical Report TR 93-29, </type> <institution> Department of Computer Sciences, The University of Texas at Austin, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Note that the above syntax only deals with the three file/directory operations, i.e. read, write, and execute. The extension to other operations, e.g. making network connections, reading system properties, etc, is not yet defined. We expect to use a more general representation, e.g. GACL <ref> [23] </ref>, and a more advanced authorization decision making algorithm in future. Since the authentication step and the authorization step are independent with each other, one can always modify the security manager to implement his own choice of policy representation and authorization decision making.
Reference: [24] <author> Frank Yellin. </author> <title> Low level security in java. </title> <note> WWW4 Conference, December, 1995. http://www.javasoft.com/sfaq/verifier.html. </note>
Reference-contexts: 1 Introduction 1.1 Background Java [13, 14] is an object-oriented programming language developed by Sun Microsystems Inc. A program written in Java is compiled to a class file <ref> [24, 16] </ref> which is an architecturally neutral, binary intermediate format. In 1 the class file, the program is implemented in bytecodes [16, 24], the instruc-tion set of a virtual machine. The program in the bytecodes format is then executed/interpreted by Java virtual machine [16, 19]. <p> 1 Introduction 1.1 Background Java [13, 14] is an object-oriented programming language developed by Sun Microsystems Inc. A program written in Java is compiled to a class file [24, 16] which is an architecturally neutral, binary intermediate format. In 1 the class file, the program is implemented in bytecodes <ref> [16, 24] </ref>, the instruc-tion set of a virtual machine. The program in the bytecodes format is then executed/interpreted by Java virtual machine [16, 19]. Usually, the Java virtual machine is implemented on top of a machine's native operating system, e.g.
Reference: [25] <author> Phil Zimmermann. </author> <title> Pretty good privacy. </title> <address> http://www.pgp.com/ or http://web.mit.edu/network/pgp.html. 26 </address>
Reference-contexts: The second step is authorization, that is, based on the identity of applet to decide what access rights are granted and what are denied. In order to provide different capabilities to different applets, the first step is to identify an applet (authentication). We decided to use PGP <ref> [25] </ref> to provide authentication (digital signature and verification) and privacy (encryption and decryption). We modify the class loader [9], which is responsible for loading applet over network, to use PGP to authenticate (and decrypt) a signed (and encrypted) applet.
References-found: 25

