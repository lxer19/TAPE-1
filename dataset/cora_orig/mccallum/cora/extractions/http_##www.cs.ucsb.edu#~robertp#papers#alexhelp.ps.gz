URL: http://www.cs.ucsb.edu/~robertp/papers/alexhelp.ps.gz
Refering-URL: http://www.cs.ucsb.edu/~robertp/
Root-URL: http://www.cs.ucsb.edu
Email: yzhaog@cs.ucsb.edu  
Title: The Design of an Interactive Online Help Desk in the Alexandria Digital Library  
Author: Robert Prince Jianwen Su Hong Tang Yonggang Zhao frobertp, su, htang, 
Date: July 28, 1998  
Address: Santa Barbara, CA 93106  
Affiliation: Department of Computer Science University of California  
Abstract: In large software systems such as digital libraries, electronic commerce applications, and customer support systems, the user interface is often complex and difficult to navigate. It is necessary to provide users with interactive online support to help users learn how to effectively use the applications. Such online help facilities can include providing tutorials and animated demonstrations, synchronized activities between users and system supporting staff for real time instruction and guidance, multimedia communication with support staff such as chat, voice, and shared whiteboards, and tools for quick identification of user problems. In this paper, we investigate how such interactive online help support can be developed and provided in the context of a working system, the Alexandria Digital Library (ADL) for geospatially-referenced data. We developed an online help system, AlexHelp!. AlexHelp! supports collaborative sessions between the user and the librarian (support staff) that include activities such as map browsing and region selections, recorded demonstration sessions for the user, primitive tools for analyzing user sessions, and channels for voice and text based communications. The design of AlexHelp! is based on user activity logs, and the system is a light-weight software component that can be easily integrated into the ADL user interface client. A prototype of AlexHelp! is developed and integrated into the ADL client; both the ADL client and AlexHelp! are written in Java. fl Supported in part by NSF grants IRI IRI-9411330 and IRI-9700370. Contact author.
Abstract-found: 1
Intro-found: 1
Reference: [BM94] <author> N. W. Bergmann and J. C. Mugdge. </author> <title> Automated assistance for the telemeeting life-cycle. </title> <booktitle> In Proc. ACM Conference on Computer Supported Cooperative Work, </booktitle> <year> 1994. </year>
Reference-contexts: Moreover, the advantage of our approach is that it saves time from repeating the work already done. As pointed out in <ref> [BM94] </ref>, a straightforward approach to construct collaborative environment that puts different communication mechanisms together will not necessarily result in a good collaborative environment. In their experiment, they found that the successful use of their system incurs a large logistics and support.
Reference: [CGJ + 98] <author> A. Chabert, E. Grossman, L. Jackson, S. Pietrowicz, and C. Seguin. </author> <title> Java object-sharing in Habanero. </title> <journal> Communications of the ACM, </journal> <volume> 41(6) </volume> <pages> 69-76, </pages> <month> June </month> <year> 1998. </year> <month> 19 </month>
Reference-contexts: Our design is different from many other collaborative systems that are developed from scratch with collaborative environment tools. This is because the ADL system is already operational and using tools like Habanero <ref> [CGJ + 98] </ref> or Sun's JSDT [JSD98] would essentially rewrite the ADL client code or significantly increase the cost of communication. Moreover, the advantage of our approach is that it saves time from repeating the work already done. <p> Not being able to fundamentally alter the client prevented us from using frameworks or toolkits for building collaborative environments like NCSA's Habanero <ref> [CGJ + 98] </ref> or Sun's JSDT (Java Shared Data Toolkit) [JSD98]. Using a framework such as JSDT would entail in essence rebuilding the application.
Reference: [FFL + 95] <author> C. Fischer, J. Frew, M. Larsgaard, T.R. Smith, and Q.Zheng. </author> <title> Alexandria digital library: Rapid prototype and metadata schema. </title> <booktitle> In Proc. Int. Conf. on the Advances in Digital Libraries, </booktitle> <year> 1995. </year>
Reference-contexts: In particular, we report our experiences in the development and integration of an on-line help desk system, AlexHelp!, in the context of the Alexandria Digital Library (ADL) <ref> [FFL + 95] </ref>. In ADL, the user starts a session by initiating an HTTP-based connection to the ADL server. During one session, the ADL client software has a relatively complex user interface that allows users to browse maps, zoom in/out, construct queries (searches), and manipulate the results of queries. <p> We then discuss the general concept of online interactive help systems or help wizards and their applications. The Alexandria Digital Library (ADL) <ref> [FFL + 95] </ref> is a digital library for geospatially referenced data including maps and images. ADL's graphical user interface is a client application implemented in Java; the user runs it locally (on the user's workstation). The ADL client includes the following components (see Figure 1). 1.
Reference: [FLF94] <author> T. J. Frivold, R. E. Lang, and M. W. Fong. </author> <title> Extending www for synchronous collaboration. </title> <booktitle> In Electronic Proceedings of the Second World Wide Web Conference '94: Mosaic and the Web, </booktitle> <year> 1994. </year> <note> (http://www.ncsa.uiuc.edu/SDG/IT94/Proceedings/ CSCW/frivold/frivold.html). </note>
Reference-contexts: Our work is also related to synchronized web browsers such as <ref> [WR94, FLF94] </ref>. However, 3 AlexHelp! is based on and integrated into the ADL client software rather than web browsers, the design and implementation techniques are quite different. This paper is organized as follows. Section 2 presents the motivation of AlexHelp!. Section 3 outlines the overall design and system architecture. <p> the future. 17 Synchronized Web Browser As mentioned in Section 2, the current ADL client also uses web browser to display image items, we also implemented some primitive synchronization functionality between two World Wide Web browsers (Netscape) using Java script and Java, which is similar to but much simpler than <ref> [WR94, FLF94] </ref>.
Reference: [GM94] <author> S. Greenberg and D. Marwood. </author> <title> Real time groupware as a distributed system: Con-currency control and its effect on the interface. </title> <booktitle> In Proc. ACM Conference on Computer Supported Cooperative Work, </booktitle> <pages> pages 207-218, </pages> <year> 1994. </year>
Reference-contexts: Considering this simple model and our desired features within the context of a collaborative help system for ADL, there is no need to use complex concurrency control or shared object models <ref> [GM94, MR91] </ref>. The user interface of the client, A, that is currently in receive mode is simply "locked;" it may receive and interpret events or messages from the other client, B (the remote client), but the user is unable to 8 change client A's state.
Reference: [Gru94a] <author> J. Grudin. </author> <title> Computer-supported cooperative work: Its history and participation. </title> <journal> IEEE Computer, </journal> <volume> 27(5) </volume> <pages> 19-26, </pages> <year> 1994. </year>
Reference-contexts: But clearly such an application in the ADL context is also very representative for various other online assistance services. In the CSCW research community, there have been several typologies proposed. In terms of the Grudin's typology <ref> [Gru94a] </ref>, CSCW models are categorized in two dimensions: space and time.
Reference: [Gru94b] <author> J. Grudin. </author> <title> Groupware and social dynamics: Eight challenges for developers. </title> <journal> Communications of the ACM, </journal> <volume> 37(1) </volume> <pages> 92-105, </pages> <year> 1994. </year>
Reference-contexts: However, what we find is that a careful design will make it possible to significantly reduce such cost by automating most repetitive tasks. Most of our work on AlexHelp! is focused on the ADL client. Generally speaking, AlexHelp! is quite different from typical groupwares <ref> [Gru94b] </ref>. The collaborative model AlexHelp! supports is much simpler, since collaboration only occurs between users of the system and cyberians. In a collaborative session, one participant is designated the master and the others are slaves. The master controls all the slaves' view of the client interface (essentially). <p> Thus we were faced with adding multi-user ability to an existing single-user application not originally designed with multi-user access in mind, a task Grudin recommends as a reasonable way to approach building groupware <ref> [Gru94b] </ref>. Not being able to fundamentally alter the client prevented us from using frameworks or toolkits for building collaborative environments like NCSA's Habanero [CGJ + 98] or Sun's JSDT (Java Shared Data Toolkit) [JSD98]. Using a framework such as JSDT would entail in essence rebuilding the application.
Reference: [JAV97] <author> JDK 1.1.6 Documentation, </author> <year> 1997. </year> <note> (http://www.javasoft.com/products/jdk/1.1/ docs/index.html). </note>
Reference-contexts: This simplified design of the client-to-client communication, and makes it easy to generalize the client-to-client model into a one-to-many "multicast" model. Rather than capturing and packaging system or user interface events for transmission, which is a potentially complex endeavor even in a syntactically sweet language like Java <ref> [JAV97] </ref>, the log entries can simply be sent to the remote client as they are generated. <p> The choice was made easy because of Java's inclusion of networking abstractions as part of its core libraries <ref> [JAV97] </ref>. The java.net.* library provides objects that encapsulate network connections that are either connection-oriented or connectionless, and also provides a model for sending the same message to multiple recipients (useful for our distance-learning "multicast" model).
Reference: [JSD98] <institution> Java Shared Data Toolkit, </institution> <year> 1998. </year> <note> (http://developer.javasoft.com/developer/early-Access/jsdt/index.html). </note>
Reference-contexts: Our design is different from many other collaborative systems that are developed from scratch with collaborative environment tools. This is because the ADL system is already operational and using tools like Habanero [CGJ + 98] or Sun's JSDT <ref> [JSD98] </ref> would essentially rewrite the ADL client code or significantly increase the cost of communication. Moreover, the advantage of our approach is that it saves time from repeating the work already done. <p> Not being able to fundamentally alter the client prevented us from using frameworks or toolkits for building collaborative environments like NCSA's Habanero [CGJ + 98] or Sun's JSDT (Java Shared Data Toolkit) <ref> [JSD98] </ref>. Using a framework such as JSDT would entail in essence rebuilding the application.
Reference: [MR91] <author> J. A. Mariani and T. </author> <title> Rodden. </title> <booktitle> The impact of cscw on database technology. In Proc. ACM Conference on Computer Supported Cooperative Work, </booktitle> <year> 1991. </year>
Reference-contexts: Considering this simple model and our desired features within the context of a collaborative help system for ADL, there is no need to use complex concurrency control or shared object models <ref> [GM94, MR91] </ref>. The user interface of the client, A, that is currently in receive mode is simply "locked;" it may receive and interpret events or messages from the other client, B (the remote client), but the user is unable to 8 change client A's state.
Reference: [WR94] <author> T. K. Woo and M. J. Rees. </author> <title> A synchronous collaboration tool for world-wide web. </title> <booktitle> In Electronic Proceedings of the Second World Wide Web Conference '94: Mosaic and the Web, </booktitle> <year> 1994. </year> <note> (http://www.ncsa.uiuc.edu/SDG/IT94/Proceedings/CSCW/rees/Syn-ColTol.html). 20 </note>
Reference-contexts: Our work is also related to synchronized web browsers such as <ref> [WR94, FLF94] </ref>. However, 3 AlexHelp! is based on and integrated into the ADL client software rather than web browsers, the design and implementation techniques are quite different. This paper is organized as follows. Section 2 presents the motivation of AlexHelp!. Section 3 outlines the overall design and system architecture. <p> the future. 17 Synchronized Web Browser As mentioned in Section 2, the current ADL client also uses web browser to display image items, we also implemented some primitive synchronization functionality between two World Wide Web browsers (Netscape) using Java script and Java, which is similar to but much simpler than <ref> [WR94, FLF94] </ref>.
References-found: 11

