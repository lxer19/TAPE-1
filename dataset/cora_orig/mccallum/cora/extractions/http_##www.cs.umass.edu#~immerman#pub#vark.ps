URL: http://www.cs.umass.edu/~immerman/pub/vark.ps
Refering-URL: http://www.cs.umass.edu/~immerman/pub_immerman.html
Root-URL: 
Email: immerman@cs.umass.edu  
Title: DSPACE[n  
Author: k VAR[k ] Neil Immerman 
Note: (draft of a revised version of [I91])  
Address: Amherst, MA 01003  
Affiliation: Computer Science Dept. University of Massachusetts  
Abstract: In this paper we prove that the set of properties checkable by a Turing machine in DSPACE[n k ] is exactly equal to the set of properties describable by a uniform sequence of first-order sentences using at most k + 1 distinct variables. We prove that this is also equal to the set of properties describable using an iterative definition for a finite set of relations of arity k. This is a refinement of the theorem PSPACE = VAR[O[1]] [I82]. We suggest some directions for exploiting this result to derive trade-offs between the number of variables and the quantifier-depth in desciptive complexity. This has applications to parallel complexity.
Abstract-found: 1
Intro-found: 1
Reference: [BIS90] <author> D. Mix Barrington, N. Immerman, H. Straub-ing, </author> <title> "On Uniformity Within NC 1 ," JCSS 41, No. </title> <booktitle> 3 (1990), </booktitle> <volume> 274 - 306. </volume>
Reference-contexts: Define the complexity class FO to be the set of all first-order expressible problems. FO is a uniform version of the circuit class AC 0 <ref> [BIS90] </ref> and it is equal to the set of problems acceptable in constant time on a polynomial size concurrent parallel random access machine [I89]. 2.1 Inductive Definitions A useful way to increase the power of first-order logic without jumping all the way up to second order logic is to add the
Reference: [CFI89] <author> J. Cai, M. Furer, N. Immerman, </author> <title> "An Optimal Lower Bound on the Number of Variables for Graph Identification," </title> <booktitle> 30th IEEE FOCS Symp. </booktitle> <year> (1989), </year> <pages> 612-617. </pages>
Reference: [CH82] <author> A. Chandra and D. Harel, </author> <title> "Structure and Complexity of Relational Queries," </title> <type> JCSS 25, </type> <year> 1982, </year> <pages> (99-128). </pages>
Reference: [F90] <author> R. Fagin, </author> <title> "Finite-Model Theory a Personal Perspective," </title> <booktitle> Third Intl. Conf. Database Theory, </booktitle> <year> (1990). </year>
Reference: [G88] <author> Y. Gurevich, </author> <booktitle> "Logic and the Challenge of Computer Science," in Current Trends in Theoretical Computer Science, </booktitle> <editor> ed. Egon Borger, </editor> <publisher> Computer Science Press (1988), </publisher> <pages> 1-57. </pages>
Reference: [I81] <author> N. Immerman, </author> <title> "Number of Quantifiers is Better than Number of Tape Cells," </title> <journal> JCSS 22, </journal> <volume> No. 3, </volume> <month> June </month> <year> 1981, </year> <pages> 65-72. </pages>
Reference-contexts: A similar game called the separability game is described in <ref> [I81] </ref>. These games as stated only consider circuit depth, and quantifier-depth, respectively.
Reference: [I82] <author> N. Immerman, </author> <title> "Upper and Lower Bounds for First Order Expressibility," </title> <journal> JCSS 25, </journal> <volume> No. 1 (1982), </volume> <pages> 76-98. </pages>
Reference: [I86] <author> N. Immerman, </author> <title> "Relational Queries Computable in Polynomial Time," </title> <journal> Information and Control, </journal> <volume> 68 (1986), </volume> <pages> 86-104. </pages> <note> A preliminary version of this paper appeared in 14th ACM STOC Symp., </note> <year> (1982), </year> <pages> 147-152. </pages>
Reference: [I87] <author> N. Immerman, </author> <title> "Languages That Capture Complexity Classes," </title> <journal> SIAM J. Comput. </journal> <volume> 16, No. 4 (1987), </volume> <pages> 760-778. </pages>
Reference-contexts: Just to give a taste of this kind of construction, here is QB + for the case k = 3. For convenience, the pair of boolean variables, 3 For details on the coding of inputs see for example <ref> [I87] </ref>. Note that we are assuming that the whole input is on the work tape at time 0.
Reference: [I89] <author> N. Immerman, </author> <title> Expressibility and Parallel Complexity, </title> <journal> SIAM J. of Comput 18 (1989), </journal> <pages> 625-638. </pages>
Reference-contexts: Define the complexity class FO to be the set of all first-order expressible problems. FO is a uniform version of the circuit class AC 0 [BIS90] and it is equal to the set of problems acceptable in constant time on a polynomial size concurrent parallel random access machine <ref> [I89] </ref>. 2.1 Inductive Definitions A useful way to increase the power of first-order logic without jumping all the way up to second order logic is to add the power to define new relations by induction. For example, consider the vocabulary t g = hEi of graphs. <p> Further work is needed to determine a meaningful, nearly exact relationship between simultaneous descriptive measures and simultaneous parallel time and hardware. This is a tricky problem because it depends on the interconnection patterns and the conventions for concurrent reads and writes. (See <ref> [I89] </ref> for further discussion.) One instance of the above tradeoff problem seems particularly worthy of study. Consider the following very different characterizations of PSPACE.
Reference: [I91] <author> N. Immerman, </author> <title> "DSPACE[n k ] = VAR[k + 1]," </title> <booktitle> Sixth IEEE Structure in Complexity Theory Symp. </booktitle> <month> (July, </month> <year> 1991), </year> <pages> 334-340. </pages>
Reference: [KW90] <author> M. Karchmer and A. Wigderson, </author> <title> "Monotone circuits for connectivity require super-logarithmic depth," </title> <journal> SIAM J. Discrete Math. </journal> <month> 3:2 </month> <year> (1990), </year> <pages> 255-65. </pages>
Reference-contexts: Now we hope to challenge many people to work hard on the following: Problem 4.3 What is the tradeoff between number of variables and quantifier-depth for describing LGAP? The main tool currently available for studying Problem 4.3 is the sort of communication complexity game introduced in <ref> [KW90] </ref>. A similar game called the separability game is described in [I81]. These games as stated only consider circuit depth, and quantifier-depth, respectively.
Reference: [M74] <author> Y. Moschovakis, </author> <title> Elementary Induction on Abstract Structures, </title> <publisher> North Holland, </publisher> <year> 1974. </year>
Reference-contexts: ' can be written in the following form, '(R; x 1 ; : : : ; x k ) where the M i 's are quantifier-free formulas in which R does not occur. 1 In the logical literature where structures are usually infinite this is called the closure ordinal, cf. <ref> [M74] </ref>. Proof This is a straight forward induction on the complexity of '.
Reference: [V82] <author> M. Vardi, </author> <title> "Complexity of Relational Query Languages," </title> <booktitle> 14th ACM Symposium on Theory of Computation (1982), </booktitle> <pages> 137-146. 7 </pages>
Reference-contexts: Now we generalize inductive definitions to iterative definitions in which the requirement of monotonicity is removed. 2 2 This is equivalent to the addition of a "while" operator <ref> [V82] </ref>. 4 Definition 2.13 Define ITER [t (n); arity k] to be the set of properties definable by iterating t (n) times, the simultaneous first-order definitions of a set of c relations of arity k, for some constant c.
References-found: 14

