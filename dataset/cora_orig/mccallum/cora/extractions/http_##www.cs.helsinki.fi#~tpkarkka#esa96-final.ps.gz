URL: http://www.cs.helsinki.fi/~tpkarkka/esa96-final.ps.gz
Refering-URL: http://www.cs.helsinki.fi/research/pmdm/publications/
Root-URL: 
Email: fJuha.Karkkainen,Erkki.Sutineng@cs.Helsinki.FI  
Title: Lempel-Ziv Index for q-Grams  
Author: Juha Karkkainen and Erkki Sutinen 
Address: P.O. Box 26 (Teollisuuskatu 23), FIN-00014 University of Helsinki, Finland  
Affiliation: Department of Computer Science,  
Abstract: We present a new sublinear-size index structure for q-grams. A q-gram index of the text is used in many approximate pattern matching algorithms. All earlier q-gram indexes have at least linear size. The new method takes advantage of repetitions in the text found by Lempel-Ziv parsing.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. Baeza-Yates: </author> <title> Space-time trade-offs in text retrieval. </title> <booktitle> In: Proc. First South Amer ican Workshop on String Processing (ed. </booktitle> <editor> R. Baeza-Yates and N. Ziviani), Univer-sidade Federal de Minas Gerais, </editor> <year> 1993, </year> <pages> 15-21. </pages>
Reference-contexts: Currently, the huge amounts of data, accessible over the networks, or, in a smaller scale, on CDROMs, provide the pattern matching research community with a new challenge. Formally, the approximate pattern matching problem is as follows. Given text T = T <ref> [1; n] </ref> and pattern P = P [1; m] in alphabet and an integer k, find all the text positions i such that an approximate occurrence of P with at most k differences ends at i. <p> Currently, the huge amounts of data, accessible over the networks, or, in a smaller scale, on CDROMs, provide the pattern matching research community with a new challenge. Formally, the approximate pattern matching problem is as follows. Given text T = T [1; n] and pattern P = P <ref> [1; m] </ref> in alphabet and an integer k, find all the text positions i such that an approximate occurrence of P with at most k differences ends at i. <p> Static algorithms have been introduced by Myers [10], Holsti & Sutinen [4], and Sutinen & Tarhio [13]. Furthermore, the FLASH system [2], designed for approximate pattern matching in biological data, applies q-grams in a probabilistic algorithm. In addition, q-grams have been applied in information retrieval schemes <ref> [1, 8] </ref>. Current implementations of q-gram indexes. When filtrating text T with a static algorithm, the preprocessing phase builds an index of the q-grams of the text; we call it the q-gram index of the text. <p> Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] [2; 5] [2; 7], but <ref> [1; 3] </ref> and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals. <p> Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] [2; 5] [2; 7], but <ref> [1; 3] </ref> and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals.
Reference: 2. <author> A. Califano and I. Rigoutsos: </author> <title> FLASH: A fast look-up algorithm for string homo logy. </title> <booktitle> In: Proc. First International Conference on Intelligent Systems for Molecular Biology (ed. </booktitle> <editor> L. Hunter, D. Searls, and J. Shavlik), </editor> <publisher> AAAI Press, </publisher> <year> 1993, </year> <pages> 56-64. </pages>
Reference-contexts: Among the last members in the q-family, we name the dynamic approaches by Ukkonen [16], Chang & Marr [3], Takaoka [14], and Sutinen & Tarhio [12, 13]. Static algorithms have been introduced by Myers [10], Holsti & Sutinen [4], and Sutinen & Tarhio [13]. Furthermore, the FLASH system <ref> [2] </ref>, designed for approximate pattern matching in biological data, applies q-grams in a probabilistic algorithm. In addition, q-grams have been applied in information retrieval schemes [1, 8]. Current implementations of q-gram indexes. <p> Lemma 2.3. Two intervals [I; J ] and [I 0 ; J 0 ] are comparable in both and iff I = I 0 or J = J 0 . Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] <ref> [2; 5] </ref> [2; 7], but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals. <p> Two intervals [I; J ] and [I 0 ; J 0 ] are comparable in both and iff I = I 0 or J = J 0 . Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] [2; 5] <ref> [2; 7] </ref>, but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals. <p> Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] <ref> [2; 5] </ref> [2; 7], but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals. <p> Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] <ref> [2; 5] </ref> [2; 7], but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals. <p> Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] [2; 5] <ref> [2; 7] </ref>, but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals. <p> Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] <ref> [2; 5] </ref> [2; 7], but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals.
Reference: 3. <author> W. Chang and T. Marr: </author> <title> Approximate string matching and local similarity. In: Com binatorial Pattern Matching, </title> <booktitle> Proceedings of 5th Annual Symposium (ed. </booktitle> <editor> M. Cro-chemore and D. Gusfield), </editor> <booktitle> Lecture Notes in Computer Science 807, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994, </year> <pages> 259-273. </pages>
Reference-contexts: Thus, the applicability of the q-grams in approximate pattern matching is intuitively clear. The classical paper by Jokinen and Ukkonen [5] introduced the use of q-grams in static pattern matching. Among the last members in the q-family, we name the dynamic approaches by Ukkonen [16], Chang & Marr <ref> [3] </ref>, Takaoka [14], and Sutinen & Tarhio [12, 13]. Static algorithms have been introduced by Myers [10], Holsti & Sutinen [4], and Sutinen & Tarhio [13]. Furthermore, the FLASH system [2], designed for approximate pattern matching in biological data, applies q-grams in a probabilistic algorithm. <p> Lemma 2.3. Two intervals [I; J ] and [I 0 ; J 0 ] are comparable in both and iff I = I 0 or J = J 0 . Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. <ref> [3; 4] </ref> [2; 5] [2; 7], but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals. <p> Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] [2; 5] [2; 7], but <ref> [1; 3] </ref> and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals. <p> Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] [2; 5] [2; 7], but <ref> [1; 3] </ref> and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals. <p> Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. <ref> [3; 4] </ref> [2; 5] [2; 7], but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals.
Reference: 4. <author> N. Holsti and E. Sutinen: </author> <title> Approximate string matching using q-gram places. </title> <booktitle> Proc. Seventh Finnish Symposium on Computer Science (ed. </booktitle> <institution> M. Penttonen), University of Joensuu, </institution> <year> 1994, </year> <pages> 23-32. </pages>
Reference-contexts: Among the last members in the q-family, we name the dynamic approaches by Ukkonen [16], Chang & Marr [3], Takaoka [14], and Sutinen & Tarhio [12, 13]. Static algorithms have been introduced by Myers [10], Holsti & Sutinen <ref> [4] </ref>, and Sutinen & Tarhio [13]. Furthermore, the FLASH system [2], designed for approximate pattern matching in biological data, applies q-grams in a probabilistic algorithm. In addition, q-grams have been applied in information retrieval schemes [1, 8]. Current implementations of q-gram indexes. <p> Lemma 2.3. Two intervals [I; J ] and [I 0 ; J 0 ] are comparable in both and iff I = I 0 or J = J 0 . Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. <ref> [3; 4] </ref> [2; 5] [2; 7], but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals. <p> Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. <ref> [3; 4] </ref> [2; 5] [2; 7], but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals.
Reference: 5. <author> P. Jokinen and E. Ukkonen: </author> <title> Two algorithms for approximate string matching in static texts. </title> <booktitle> In: Proceedings of Mathematical Foundations of Computer Science 1991 (ed. </booktitle> <editor> A. Tarlecki), </editor> <booktitle> Lecture Notes in Computer Science 520, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1991, </year> <pages> 240-248. </pages>
Reference-contexts: Therefore, any approximate match must contain at least some common q-grams with the searched pattern. Thus, the applicability of the q-grams in approximate pattern matching is intuitively clear. The classical paper by Jokinen and Ukkonen <ref> [5] </ref> introduced the use of q-grams in static pattern matching. Among the last members in the q-family, we name the dynamic approaches by Ukkonen [16], Chang & Marr [3], Takaoka [14], and Sutinen & Tarhio [12, 13]. <p> The basic implementation is a pointer array of size jj q . Each entry of the array refers to the list of occurrences of the corresponding q-gram in the text. The index can be built in time O (n + jj q ) <ref> [5] </ref>. The problem of this approach is the exponential dependancy of the size of array on q. It results in unnecessarily large indexes, especially when only a small fraction of potential q-grams occurs in the text. <p> Lemma 2.3. Two intervals [I; J ] and [I 0 ; J 0 ] are comparable in both and iff I = I 0 or J = J 0 . Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] <ref> [2; 5] </ref> [2; 7], but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals. <p> Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] <ref> [2; 5] </ref> [2; 7], but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals. <p> Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] <ref> [2; 5] </ref> [2; 7], but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals. <p> Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] <ref> [2; 5] </ref> [2; 7], but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals.
Reference: 6. <author> J. Karkkainen and E. Ukkonen: </author> <title> Lempel-Ziv parsing and sublinear-size index struc tures for string matching. To appear in: </title> <booktitle> Proc. 3rd South American Workshop on String Processing WSP '96. </booktitle>
Reference-contexts: In Lempel-Ziv compression, the information about the repetitions is used for compressing the text. We use the repetitions to compress the occurrence lists. The method is illustrated in Figure 1. Similar ideas, leading to quite different data structures, were used in <ref> [6] </ref> for static exact pattern matching. Q. A pair of lines, connected by an arrow, represents two occurrences of the same string (a repetition). The primary q-gram index contains only the location of the first occurrence of Q; the rest are found using the information about the repetitions. <p> The secondary and tertiary indexes require O (N ) space, where N is the number of phrases in the LZ parse of the text. The total space requirement is therefore O (M + N ). In the following, we show that this can be sublinear (cf. <ref> [6] </ref>). Lemma 8.1. The total number of phrases of length at most l q is at most (c lq+1 1)M , where c is the size of the alphabet. Proof.
Reference: 7. <author> G. Landau and U. Vishkin: </author> <title> Fast string matching with k differences. </title> <journal> Journal of Computer and System Sciences 37 (1988), </journal> <pages> 63-78. </pages>
Reference-contexts: In this paper, we are interested in tools for the truly approximate pattern matching, with k &gt; 0. Filtration with q-grams. The basic solution for the approximate pattern matching problem is based on dynamic programming <ref> [7, 15] </ref>. It has O (kn) time complexity and is usually too slow for long texts. Therefore, several filtration schemes have been introduced in order to extract the text areas with potential matches, to be inspected by dynamic programming in the second phase of the algorithm. <p> Two intervals [I; J ] and [I 0 ; J 0 ] are comparable in both and iff I = I 0 or J = J 0 . Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] [2; 5] <ref> [2; 7] </ref>, but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals. <p> Two intervals are never incomparable in both and . We say that and are orthogonal. Example 2.4. [3; 4] [2; 5] <ref> [2; 7] </ref>, but [1; 3] and [2; 5] are incomparable in . [1; 3] t [2; 5] &lt; [2; 7], but [2; 5] and [3; 4] are incomparable in . Definition 2.5. Let S be a set of intervals.
Reference: 8. <author> O. Lehtinen, E. Sutinen and J. Tarhio: </author> <title> Experiments on block indexing. To appear in: </title> <booktitle> Proc. 3rd South American Workshop on String Processing WSP '96. </booktitle>
Reference-contexts: Static algorithms have been introduced by Myers [10], Holsti & Sutinen [4], and Sutinen & Tarhio [13]. Furthermore, the FLASH system [2], designed for approximate pattern matching in biological data, applies q-grams in a probabilistic algorithm. In addition, q-grams have been applied in information retrieval schemes <ref> [1, 8] </ref>. Current implementations of q-gram indexes. When filtrating text T with a static algorithm, the preprocessing phase builds an index of the q-grams of the text; we call it the q-gram index of the text.
Reference: 9. <author> E. M. McCreight: </author> <title> A space-economical suffix tree construction algorithm. </title> <journal> J. Assoc. Comput. Mach. </journal> <volume> 23 (1976), </volume> <pages> 262-272. </pages>
Reference-contexts: To compute L i and J i , the algorithm builds a suffix tree of the text. The values L i and J i are naturally found when the suffix starting at I i is added to the suffix tree. Using the suffix tree construction algorithms by McCreight <ref> [9] </ref> or by Ukkonen [17], the algorithm then executes in O (n) time and space. 4 Outline of the Search Algorithm With the new index, the phrase occurrences are found through their definitions.
Reference: 10. <author> E. Myers: </author> <title> A sublinear algorithm for approximate keyword searching. </title> <type> Algorithmica 12, </type> <month> 4-5 </month> <year> (1994), </year> <pages> 345-374. </pages>
Reference-contexts: Among the last members in the q-family, we name the dynamic approaches by Ukkonen [16], Chang & Marr [3], Takaoka [14], and Sutinen & Tarhio [12, 13]. Static algorithms have been introduced by Myers <ref> [10] </ref>, Holsti & Sutinen [4], and Sutinen & Tarhio [13]. Furthermore, the FLASH system [2], designed for approximate pattern matching in biological data, applies q-grams in a probabilistic algorithm. In addition, q-grams have been applied in information retrieval schemes [1, 8]. Current implementations of q-gram indexes.
Reference: 11. <author> P. Pevzner and M. Waterman: </author> <title> Multiple filtration and approximate pattern match ing. </title> <booktitle> Algorithmica 13 (1995), </booktitle> <pages> 135-154. </pages>
Reference-contexts: By a q-gram, we refer to any sequence of q characters in alphabet . For example, pattern MOROGORO has continuous 3-grams MOR, ORO, ROG, OGO, and GOR; in addition, it contains several gapped 3-grams, like OOO <ref> [11] </ref>. An approximate match resembles the original pattern; this similarity is reflected by their common q-grams, called the preserved q-grams. Therefore, any approximate match must contain at least some common q-grams with the searched pattern. Thus, the applicability of the q-grams in approximate pattern matching is intuitively clear.
Reference: 12. <author> E. Sutinen and J. Tarhio: </author> <title> On using q-gram locations in approximate string match ing. </title> <booktitle> In: Proc. 3rd Annual European Symposium on Algorithms ESA '95 (ed. P. Spirakis), Lecture Notes in Computer Science 979, </booktitle> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1995, </year> <pages> 327-340. </pages>
Reference-contexts: The classical paper by Jokinen and Ukkonen [5] introduced the use of q-grams in static pattern matching. Among the last members in the q-family, we name the dynamic approaches by Ukkonen [16], Chang & Marr [3], Takaoka [14], and Sutinen & Tarhio <ref> [12, 13] </ref>. Static algorithms have been introduced by Myers [10], Holsti & Sutinen [4], and Sutinen & Tarhio [13]. Furthermore, the FLASH system [2], designed for approximate pattern matching in biological data, applies q-grams in a probabilistic algorithm. In addition, q-grams have been applied in information retrieval schemes [1, 8].
Reference: 13. <author> E. Sutinen and J. Tarhio: </author> <title> Filtration with q-samples in approximate string match ing. </title> <booktitle> In: Proc. 7th Symposium on Combinatorial Pattern Matching CPM '96 (ed. </booktitle> <editor> D. Hirschberg and G. Myers), </editor> <booktitle> Lecture Notes in Computer Science 1075, </booktitle> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1996, </year> <pages> 50-63. </pages>
Reference-contexts: The classical paper by Jokinen and Ukkonen [5] introduced the use of q-grams in static pattern matching. Among the last members in the q-family, we name the dynamic approaches by Ukkonen [16], Chang & Marr [3], Takaoka [14], and Sutinen & Tarhio <ref> [12, 13] </ref>. Static algorithms have been introduced by Myers [10], Holsti & Sutinen [4], and Sutinen & Tarhio [13]. Furthermore, the FLASH system [2], designed for approximate pattern matching in biological data, applies q-grams in a probabilistic algorithm. In addition, q-grams have been applied in information retrieval schemes [1, 8]. <p> Among the last members in the q-family, we name the dynamic approaches by Ukkonen [16], Chang & Marr [3], Takaoka [14], and Sutinen & Tarhio [12, 13]. Static algorithms have been introduced by Myers [10], Holsti & Sutinen [4], and Sutinen & Tarhio <ref> [13] </ref>. Furthermore, the FLASH system [2], designed for approximate pattern matching in biological data, applies q-grams in a probabilistic algorithm. In addition, q-grams have been applied in information retrieval schemes [1, 8]. Current implementations of q-gram indexes. <p> The O (n) space is required for the lists of occurrences. A potential improvement for the scheme is to store only every hth text q-gram. This approach can, however, be applied only in algorithms, designed specifically for this purpose <ref> [13] </ref>. Sketch of the new q-gram index. The idea of the new index is to do away with the lists of occurrences.
Reference: 14. <author> T. Takaoka: </author> <title> Approximate pattern matching with samples. </title> <booktitle> Proceedings of ISAAC '94, Lecture Notes in Computer Science 834, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994, </year> <pages> 234-242. </pages>
Reference-contexts: The classical paper by Jokinen and Ukkonen [5] introduced the use of q-grams in static pattern matching. Among the last members in the q-family, we name the dynamic approaches by Ukkonen [16], Chang & Marr [3], Takaoka <ref> [14] </ref>, and Sutinen & Tarhio [12, 13]. Static algorithms have been introduced by Myers [10], Holsti & Sutinen [4], and Sutinen & Tarhio [13]. Furthermore, the FLASH system [2], designed for approximate pattern matching in biological data, applies q-grams in a probabilistic algorithm.
Reference: 15. <author> E. Ukkonen: </author> <title> Finding approximate patterns in strings. </title> <booktitle> Journal of Algorithms 6 (1985), </booktitle> <pages> 132-137. </pages>
Reference-contexts: In this paper, we are interested in tools for the truly approximate pattern matching, with k &gt; 0. Filtration with q-grams. The basic solution for the approximate pattern matching problem is based on dynamic programming <ref> [7, 15] </ref>. It has O (kn) time complexity and is usually too slow for long texts. Therefore, several filtration schemes have been introduced in order to extract the text areas with potential matches, to be inspected by dynamic programming in the second phase of the algorithm.
Reference: 16. <author> E. Ukkonen: </author> <title> Approximate string matching with q-grams and maximal matches. </title> <booktitle> Theoretical Computer Science 92, 1 (1992), </booktitle> <pages> 191-211. </pages>
Reference-contexts: Thus, the applicability of the q-grams in approximate pattern matching is intuitively clear. The classical paper by Jokinen and Ukkonen [5] introduced the use of q-grams in static pattern matching. Among the last members in the q-family, we name the dynamic approaches by Ukkonen <ref> [16] </ref>, Chang & Marr [3], Takaoka [14], and Sutinen & Tarhio [12, 13]. Static algorithms have been introduced by Myers [10], Holsti & Sutinen [4], and Sutinen & Tarhio [13]. Furthermore, the FLASH system [2], designed for approximate pattern matching in biological data, applies q-grams in a probabilistic algorithm.
Reference: 17. <author> E. Ukkonen: </author> <title> On-line construction of suffix-trees. </title> <booktitle> Algorithmica 14 (1995), </booktitle> <pages> 249-260. </pages>
Reference-contexts: The text q-grams are stored into a trie structure, with each leaf storing the list of occurrences of the corresponding q-gram in the text. The trie can be built in linear time, for example by using an algorithm similar to creating a suffix tree <ref> [17] </ref>. While simple to implement, the indexes mentioned above suffer from the same drawback: because of the linear space consumption, the size of the index gets unpractically large with an increasing text length n. <p> The values L i and J i are naturally found when the suffix starting at I i is added to the suffix tree. Using the suffix tree construction algorithms by McCreight [9] or by Ukkonen <ref> [17] </ref>, the algorithm then executes in O (n) time and space. 4 Outline of the Search Algorithm With the new index, the phrase occurrences are found through their definitions.
References-found: 17

