URL: http://s2k-ftp.cs.berkeley.edu:8000/postgres/papers/vldb95-gist.ps.Z
Refering-URL: http://gist.cs.berkeley.edu:8000/gist/gist1.html
Root-URL: http://www.cs.berkeley.edu
Email: jmh@cs.berkeley.edu  naughton@cs.wisc.edu  avi@cs.berkeley.edu  
Title: Generalized Search Trees for Database Systems (Extended Abstract)  
Author: Joseph M. Hellerstein Jeffrey F. Naughton Avi Pfeffer 
Address: Wisconsin, Madison  Wisconsin, Madison  Berkeley  
Affiliation: University of  University of  University of California,  
Abstract: This paper introduces the Generalized Search Tree (GiST), an index structure supporting an extensible set of queries and data types. The GiST allows new data types to be indexed in a manner supporting queries natural to the types; this is in contrast to previous work on tree extensibility which only supported the traditional set of equality and range predicates. In a single data structure, the GiST provides all the basic search tree logic required by a database system, thereby unifying disparate structures such as B+-trees and R-trees in a single piece of code, and opening the application of search trees to general extensibility. To illustrate the flexibility of the GiST, we provide simple method implementations that allow it to behave like a B+-tree, an R-tree, and an RD-tree, a new index for data with set-valued attributes. We also present a preliminary performance analysis of RD-trees, which leads to discussion on the nature of tree indices and how they behave for various datasets. 
Abstract-found: 1
Intro-found: 1
Reference: [Aok91] <author> P. M. Aoki. </author> <title> Implementation of Extended Indexes in POSTGRES. </title> <journal> SIGIR Forum, </journal> <volume> 25(1) </volume> <pages> 2-9, </pages> <year> 1991. </year>
Reference-contexts: Other multidimensional search trees include quad-trees [FB74], k-D-B-trees [Rob81], and hB-trees [LS90]. Multidimensional data can also be transformed into unidimensional data using a space-filling curve [Jag90]; after transformation, a B+-tree can be used to index the resulting unidimensional data. Extensible-key indices were introduced in POSTGRES <ref> [Sto86, Aok91] </ref>, and are included in Illustra [Ill94], both of which have distinct extensible B+-tree and R-tree implementations. These extensible indices allow many types of data to be indexed, but only support a fixed set of query predicates.
Reference: [BKSS90] <author> Norbert Beckmann, Hans-Peter Kriegel, Ralf Schneider, and Bernhard Seeger. </author> <title> The R*- tree: An Efficient and Robust Access Method Page 11 For Points and Rectangles. </title> <booktitle> In Proc. ACM--SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 322-331, </pages> <address> Atlantic City, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: There are a variety of multidimensional search trees, such as R-trees [Gut84] and their variants: R*- trees <ref> [BKSS90] </ref> and R+-trees [SRF87]. Other multidimensional search trees include quad-trees [FB74], k-D-B-trees [Rob81], and hB-trees [LS90]. Multidimensional data can also be transformed into unidimensional data using a space-filling curve [Jag90]; after transformation, a B+-tree can be used to index the resulting unidimensional data. <p> This metric of change in area is the one proposed by Guttman [Gut84]. * PickSplit (P ) A variety of algorithms have been proposed for R-tree splitting. We thus omit this method implementation from our discussion here, and refer the in terested reader to [Gut84] and <ref> [BKSS90] </ref>. The above implementations, along with the GiST algorithms described in the previous chapters, give behavior identical to that of Guttman's R-tree. A series of variations on R-trees have been proposed, notably the R*-tree [BKSS90] and the R+-tree [SRF87]. <p> this method implementation from our discussion here, and refer the in terested reader to [Gut84] and <ref> [BKSS90] </ref>. The above implementations, along with the GiST algorithms described in the previous chapters, give behavior identical to that of Guttman's R-tree. A series of variations on R-trees have been proposed, notably the R*-tree [BKSS90] and the R+-tree [SRF87]. The R*-tree differs from the basic R-tree in three ways: in its PickSplit algorithm, which has a variety of small changes, in its ChooseSubtree algorithm, which varies only slightly, and in its policy of reinserting a number of keys during node split.
Reference: [BKSS94] <author> Thomas Brinkhoff, Hans-Peter Kriegel, Ralf Schneider, and Bernhard Seeger. </author> <title> Multi-Step Processing of Spatial Joins. </title> <booktitle> In Proc. ACM-SIGMOD International Conference on Management of Data, </booktitle> <address> Minneapolis, </address> <month> May </month> <year> 1994, </year> <pages> pages 197-208. </pages>
Reference-contexts: We chose RD-trees for two reasons: 1. We were able to implement the methods in Illustra R trees. 2. Set data can be cooked to have almost arbitrary over 3 Better approximations than bounding boxes have been considered for doing spatial joins <ref> [BKSS94] </ref>. However, this work proposes using bounding boxes in an R*-tree, and only using the more accurate approximations in main memory during post-processing steps. Page 9 This surface was generated from data presented in [HNP95].
Reference: [CDF + 94] <author> Michael J. Carey, David J. DeWitt, Michael J. Franklin, Nancy E. Hall, Mark L. McAuliffe, Jeffrey F. Naughton, Daniel T. Schuh, Mar-vin H. Solomon, C. K. Tan, Odysseas G. Tsatalos, Seth J. White, and Michael J. Zwilling. </author> <title> Shoring Up Persistent Applications. </title> <booktitle> In Proc. ACM-SIGMOD International Conference on Management of Data, </booktitle> <address> Minneapolis, </address> <month> May </month> <year> 1994, </year> <pages> pages 383-394. </pages>
Reference-contexts: Implementing a new set of methods for the GiST is a significantly easier task than implementing a new tree package from scratch: for example, the POSTGRES [Gro94] and SHORE <ref> [CDF + 94] </ref> implementations of R-trees and B+-trees are on the order of 3000 lines of C or C++ code each, while our method implementations for the GiST are on the order of 500 lines of C code each.
Reference: [CDG + 90] <author> M.J. Carey, D.J. DeWitt, G. Graefe, D.M. Haight, J.E. Richardson, D.H. Schuh, E.J. Shekita, </author> <title> and S.L. Vandenberg. The EXODUS Extensible DBMS Project: An Overview. </title> <editor> In Stan Zdonik and David Maier, editors, </editor> <booktitle> Readings In Object-Oriented Database Systems. </booktitle> <publisher> Morgan-Kaufmann Publishers, Inc., </publisher> <year> 1990. </year>
Reference-contexts: The GiST can be adapted to work like a variety of other known search tree structures, e.g. partial sum trees Page 1 [WE80], k-D-B-trees [Rob81], Ch-trees [KKD89], Exodus large objects <ref> [CDG + 90] </ref>, hB-trees [LS90], V-trees [MCD94], TV-trees [LJF94], etc.
Reference: [Com79] <author> Douglas Comer. </author> <title> The Ubiquitous B-Tree. </title> <journal> Computing Surveys, </journal> <volume> 11(2) </volume> <pages> 121-137, </pages> <month> June </month> <year> 1979. </year>
Reference-contexts: 1 Introduction An efficient implementation of search trees is crucial for any database system. In traditional relational systems, B+-trees <ref> [Com79] </ref> were sufficient for the sorts of queries posed on the usual set of alphanumeric data types. Today, database systems are increasingly being deployed to support new applications such as geographic information systems, multimedia systems, CAD tools, document libraries, sequence databases, fingerprint identification systems, biochemical databases, etc. <p> Section 7 concludes with a discussion of the significance of the work, and directions for further research. 1.2 Related Work A good survey of search trees is provided by Knuth [Knu73], though B-trees and their variants are covered in more detail by Comer <ref> [Com79] </ref>. There are a variety of multidimensional search trees, such as R-trees [Gut84] and their variants: R*- trees [BKSS90] and R+-trees [SRF87]. Other multidimensional search trees include quad-trees [FB74], k-D-B-trees [Rob81], and hB-trees [LS90]. <p> This is the technique used in SHORE's R-trees, for example, which upon insertion take a polygon and compress it to its bounding box, which is itself a valid polygon. It is also used in prefix B+-trees <ref> [Com79] </ref>, which truncate split keys to an initial substring. More involved implementations might use complex methods for both Compress and Decompress. 3.4 Tree Methods The key methods in the previous section must be provided by the designer of the key class.
Reference: [FB74] <author> R. A. Finkel and J. L. Bentley. </author> <month> Quad-Trees: </month>
Reference-contexts: There are a variety of multidimensional search trees, such as R-trees [Gut84] and their variants: R*- trees [BKSS90] and R+-trees [SRF87]. Other multidimensional search trees include quad-trees <ref> [FB74] </ref>, k-D-B-trees [Rob81], and hB-trees [LS90]. Multidimensional data can also be transformed into unidimensional data using a space-filling curve [Jag90]; after transformation, a B+-tree can be used to index the resulting unidimensional data.
References-found: 7

