URL: http://www.isi.edu:80/people/johnh/PAPERS/Heidemann92a.ps.gz
Refering-URL: http://www.isi.edu:80/people/johnh/PAPERS/Heidemann92a.html
Root-URL: http://www.isi.edu
Title: Primarily Disconnected Operation: Experiences with Ficus  
Author: John S. Heidemann Thomas W. Page Richard G. Guy Gerald J. Popek 
Address: Los Angeles  
Affiliation: Department of Computer Science University of California,  
Date: November 1992, pages 2-5  
Note: Appeared in the Proceedings of the Second Workshop on Management of Replicated Data,  
Abstract: Ficus is a flexible replication facility with optimistic concurrency control designed to span a wide range of scales and network environments. Support for partitioned operation is fundamental to the Ficus design but was not widely exercised in early Ficus use. This position paper reports recent experiences using Ficus in settings where some replicas are only occasionally connected to a network, and hence partitioned operation is the rule rather than the exception. We conclude that with some tuning, Ficus adapted quite well to primarily disconnected operation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Richard G. Guy. Ficus: </author> <title> A Very Large Scale Reliable Distributed File System. </title> <type> Ph.D. dissertation, </type> <institution> University of California, </institution> <address> Los Angeles, </address> <month> June </month> <year> 1991. </year> <note> Also available as UCLA technical report CSD-910018. </note>
Reference-contexts: In the case of directories, most conflicts are repaired automatically by reconciliation, while for files, conflicting versions are marked as such and their owner notified. More information concerning the Ficus architecture and its reconciliation algorithms may be found in <ref> [2, 1] </ref>. 3 Reconciliation Optimizations Since each invocation of reconciliation is a unidirectional pull of information by one replica from another, some thought must be given to the reconciliation topology. Early Ficus designs called for all-pairs reconciliation, but the cost of O (n 2 ) message exchanges proved too expensive. <p> The second performance problem results from the approach Ficus uses to detect when a file has been removed in one partition and updated in another. This remove/update conflict has the potential for losing the update. To detect this conflict, the Ficus garbage collection algorithm <ref> [1] </ref> requires that file data propagate to all sites before it is removed. While this conservative strategy makes sense for important data files, many programs create temporary files which are quickly removed. Propagating these transient files to mostly disconnected sites wastes valuable bandwidth for data which will never be needed.
Reference: [2] <author> Richard G. Guy, John S. Heidemann, Wai Mak, Thomas W. Page, Jr., Gerald J. Popek, and Dieter Rothmeier. </author> <title> Implementation of the Ficus replicated file system. </title> <booktitle> In USENIX Conference Proceedings, </booktitle> <pages> pages 63-71. </pages> <publisher> USENIX, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: In the case of directories, most conflicts are repaired automatically by reconciliation, while for files, conflicting versions are marked as such and their owner notified. More information concerning the Ficus architecture and its reconciliation algorithms may be found in <ref> [2, 1] </ref>. 3 Reconciliation Optimizations Since each invocation of reconciliation is a unidirectional pull of information by one replica from another, some thought must be given to the reconciliation topology. Early Ficus designs called for all-pairs reconciliation, but the cost of O (n 2 ) message exchanges proved too expensive.
Reference: [3] <author> James J. Kistler and Mahadev Satyanarayanan. </author> <title> Transparent disconnected operation for fault-tolerance. </title> <journal> ACM Operating Systems Review, </journal> <volume> 25(1), </volume> <month> January </month> <year> 1991. </year>
Reference-contexts: This issue is further discussed in the next section. 5 Related Work There is at least one other research project focusing on the topic of deliberate disconnected operation described in the literature: CMU's Coda system <ref> [3] </ref>. Ficus and Coda share many of the same goals, and even some basic techniques such as optimistic replication. The primary difference in approach lies in the (AFS-inherited) Coda model of client-server filing support, versus the peer-to-peer Ficus model.
References-found: 3

