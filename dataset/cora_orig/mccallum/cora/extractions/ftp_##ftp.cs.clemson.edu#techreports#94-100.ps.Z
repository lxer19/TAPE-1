URL: ftp://ftp.cs.clemson.edu/techreports/94-100.ps.Z
Refering-URL: http://www.cs.clemson.edu/html/research/techrpt.shtml
Root-URL: http://www.cs.clemson.edu
Title: Rapid Prototyping using ISETL  
Author: John Lloyd 
Note: (jlloyd@cs.clemson.edu) 1.0 Introduction  
Date: 18 November 1993  
Affiliation: Clemson University  
Abstract: ISETL is a very high level language in which functions can be implemented quickly and expressively. We used the language ISETL to rapidly build a prototype for an electronic mail system. This prototype is a fully functional version of the mail system. However it lacks the ability to handle many users efficiently. After our prototype was complete, prospective users of the fully implemented version of the mail system used the prototype to request changes and additions to the specification of the final version. In the software development process one of the most difficult steps is requirements analysis. The systems analyst may not be able to accurately define the requirements of the system just by talking to the users. Conversely the users may not be able to express the requirements, because they are not able to predict all the implications of an automated system or visualize how the system will behave. However, users can usually determine if the systems does what they want, when they see the system. If the users see the system for the first time when it is delivered, it is unlikely the system will meet all the users' requirements. (Yet at this point in the software life cycle, it is most expensive to redesign and modify the system.) Therefore the systems analyst needs to present a prototype of the system to the users before the system leaves the requirements analysis phase. The prototype is a version of the system capable of performing all the functions on a smaller data set in a manner less user friendly and less optimized than the fully implemented version. Presenting a prototype requires a fully functional version of the system to be constructed quickly and economically. To construct these prototypes, high-level languages such as LISP, PROLOG, and ISETL can be used [1]. They are designed to be expressive and flexible rather than efficient. Expressiveness and flexibility make the prototypes written in these languages easier to construct, modify, and analyze. In this project, we determined the feasibility of using ISETL as a prototyping language. The first phase of this study determined if prototypes could be constructed quickly enough to be practical with ISETL. We noted the time to learn the language, the time to define a problem in a manner that lends itself to coding in ISETL, and the time to code the prototype in ISETL. The second phase determined if a prototype built using ISETL could be used to enable the users and the analyst to gain further insight into a problem 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Berzin, V. and Luqu, </author> <title> Software Engineering with Abstractions, </title> <address> Reading, MA., </address> <publisher> Addison-Wesley, </publisher> <pages> pages 479 - 498, </pages> <year> 1991 </year>
Reference-contexts: Presenting a prototype requires a fully functional version of the system to be constructed quickly and economically. To construct these prototypes, high-level languages such as LISP, PROLOG, and ISETL can be used <ref> [1] </ref>. They are designed to be expressive and flexible rather than efficient. Expressiveness and flexibility make the prototypes written in these languages easier to construct, modify, and analyze. In this project, we determined the feasibility of using ISETL as a prototyping language.
Reference: 2. <author> Cohen, B., Harwood, W. T., Jackson, M. I., </author> <title> The Specification of Complex Systems, </title> <address> Wokingham, England, </address> <publisher> Addison-Wesley, </publisher> <pages> pages 59 - 76, </pages> <year> 1986 </year>
Reference-contexts: To provide a basis for designing a mail system and to make the results of this study more meaningful to readers, we based the mail system on the system defined using VDM in the book The Specification of Complex Systems by Cohen, Harwood, and Jackson <ref> [2] </ref>. Next, we coded and tested a prototype mail system using ISETL. During the test phase we looked for coding errors, which caused the system not to function as defined. <p> Also since these built-in functions return sets, their values can be preserved for later use and inspection. To define the function f in ISETL, we could enter the following: f := -[12,6], ["john", 4], <ref> [2, "fred"] </ref>- Then we can use the functions domain (f) and image (f) to return the domain and range of the function. In addition to the built-in functions, ISETL allows the users to define their own functions. <p> these areas may still be able to understand the language, but not write programs in it. 2.2 Description of the Mail System The specification of a mail system used to build the prototype in this study is in the book The Specification of Complex Systems by Cohen, Harwood, and Jackson <ref> [2] </ref>. The specification was in both English and VDM. This mail system allows users to send documents to each other by manipulating three trays and a writing pad. The first tray is an out tray of documents waiting to be sent.
Reference: 3. <author> Doberkat, E., </author> <title> An Approach to Reusable Software through Prototyping and Set-Oriented Languages, </title> <booktitle> Proceedings 15th Computer Software and Applications Conference, </booktitle> <pages> pages 4 - 5, </pages> <year> 1991. </year>
Reference-contexts: ISETL features mathematical notation and objects such as sets, tuples, and functions as well as statements usually found in procedural languages. Its mathematical notation makes it particularly suitable for direct translation of formalisms into executable functions <ref> [3] </ref>. ISETL was originally developed as a teaching aid for discrete mathematics, but it has proved useful in several other applications. <p> One of these is the cataloging of programs for future use, since the mathematical notation of ISETL makes it easy to see what a program is doing rather than how it is doing it <ref> [3] </ref>. ISETL can be run on an IBM compatible PC or on UNIX workstations. The executable and source for both the PC version and the UNIX version are available for FTP from sun.soe.clarkson.edu. We used version 3.0 for the PC from the above FTP site to develop the prototype.
Reference: 4. <author> Muench, D., </author> <title> ISETL Interactive Set Language, </title> <journal> Notices of the American Mathematical Society, </journal> <volume> Vol. 37, No. 3, </volume> <pages> pages 276 - 279, </pages> <month> March </month> <year> 1990. </year> <month> 8 </month>
Reference-contexts: Also since these built-in functions return sets, their values can be preserved for later use and inspection. To define the function f in ISETL, we could enter the following: f := -[12,6], <ref> ["john", 4] </ref>, [2, "fred"]- Then we can use the functions domain (f) and image (f) to return the domain and range of the function. In addition to the built-in functions, ISETL allows the users to define their own functions.
References-found: 4

