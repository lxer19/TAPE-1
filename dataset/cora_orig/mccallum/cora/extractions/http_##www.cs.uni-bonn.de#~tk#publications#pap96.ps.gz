URL: http://www.cs.uni-bonn.de/~tk/publications/pap96.ps.gz
Refering-URL: http://www.cs.uni-bonn.de/~tk/
Root-URL: http://cs.uni-bonn.de
Email: fwolfram,abc,tk,lutzg@cs.uni-bonn.de  
Title: Object Construction by Deduction for a 3D-Geo-Information System of a Mine  
Author: Wolfram Burgard Armin B. Cremers Thomas H. Kolbe Lutz Plumer 
Address: Romerstr. 164 D-53117 Bonn  
Affiliation: Institut fur Informatik III Universitat Bonn  
Abstract: A three-dimensional Geo-Information System (GIS) for planning and operating a mine is described. On a conceptual level, the underlying database is specified using the notation of Rumbaugh's Object Modeling Technique (OMT). The paper focuses on the problems caused by the implementation of such an Object Oriented Data Model by flat relations as provided by a standard RDBMS. A running implementation is described which bridges the semantic gap between the object model and the Oracle Database using Logic Programming techniques. This implementation based on an efficient Eclipse-Oracle-interface provides a query language, tightly integrated in a Graphic User Interface applying TCL/TK and extending SQL by handling aggregated objects and spatial relations. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> W. G. Aref and H. Samet. </author> <title> Extending a DBMS with spatial operations. </title> <editor> In O. Gunther and H.-J. Schek, editors, </editor> <booktitle> Advances in Spatial Databases, </booktitle> <pages> pages 300-318. </pages> <publisher> Springer, </publisher> <year> 1991. </year>
Reference-contexts: Such objects may be and in fact are mapped to the tables of a relational database in the GIS described in this paper. The semantic gap between complex objects and flat relations, however, causes several problems on different levels <ref> [26, 1, 17] </ref> including the the expressiveness of the query language, complexity of integrity constraints, long-termed transactions and above all performance. This paper focuses on the description of a query language which bridges the gap between the object model and the relational database using Logic Programming techniques.
Reference: [2] <author> A. Baumewerd-Ahlmann, A. B. Cremers, G. Kruger, J. Leonhardt, L. Plumer, and R. Wasch-kowski. </author> <title> An information system for the mining industry. </title> <editor> In D. Karagiannis, editor, </editor> <booktitle> Database and Expertsystems Applications - DEXA 91. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference: [3] <editor> C. Beierle and L. Plumer, editors. </editor> <title> Logic Programming: Formal Methods and Practical Applications. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1995. </year>
Reference-contexts: The call activate (P) emphasizes the objects given as input using the visualization tool. This illustrates the tight coupling between the relational database, the object-oriented query language and the graphical interface. 6 Final Remarks Logic programming techniques offer solutions to many problems arising in complex, innovative industrial applications <ref> [3] </ref>. In the recent years we have found that Geographic Information Systems, a field of high dynamics, give an important application domain for the methods and techniques of Logic Programming.
Reference: [4] <author> C. Braun, T. H. Kolbe, F. Lang, W. Schickler, V. Steinhage, A.B. Cremers, W. Forstner, and L. Plumer. </author> <title> Models for photogrammetric building reconstruction. </title> <journal> Computer & Graphics, </journal> <volume> 19(1), </volume> <year> 1995. </year>
Reference-contexts: Many researchers in this field already apply such techniques in order to approach problems ranging from theoretical foundations of GIS to such specific applications as object recognition in aerial images <ref> [4] </ref> or text placement in maps [8, 10]. This paper is based on a software project which has been undertaken for a number of years resulting in a database being installed on all coal mines of the Ruhr Area in Germany.
Reference: [5] <author> S. Ceri, G. Gottlob, and L. Tanca. </author> <title> Logic Programming and Databases. </title> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference-contexts: Reasons among others were robustness and scalability, the included constraint handling techniques and the flexible indexing strategy. The latter comfortably augments the capabilities of the RDBMS, thus allowing to run the complete system even without the underlying relational database system. In <ref> [5] </ref> systems coupling Prolog with databases (so-called CPR systems) are subdivided into the four components Prolog engine, Prolog interface, database interface and database engine. Since no interface for the Prolog engine Eclipse to the database engine Oracle was available, we needed to develop both the Prolog and the database interface. <p> In Prolog, however, output variables may be bound already by the input goal. Again consider the query given above, but now suppose N is bound to 5. Thus we have the goal :- sql_query ([working_place_number], [hollow_space], 'name = xyz', '', <ref> [5] </ref>) In order to exploit given indexes the database interface propagates such additional bindings to the RDBMS. For the query given as an example, this means that the SQL-interpreter simply has to check whether the working place with name xyz has number 5.
Reference: [6] <author> M. J. Egenhofer. </author> <title> Spatial SQL: A query and presentation language. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 6(1) </volume> <pages> 86-95, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: Based on these predicates actually specifying what has been called NF 2 -relations [16] we defined a select statement which allows a flexible retrieval of objects and their components (for an overview of spatial extensions of SQL see <ref> [6] </ref>). The syntax of this statement is :- select [&lt;A1&gt;, &lt;A2&gt;, ..., &lt;An&gt;] from &lt;C&gt; into L. where A 1 ; : : : ; A n are the attributes to be selected from the objects of the object class C.
Reference: [7] <author> G. Engels, M. Gogolla, U. Hohenstein, K. Hulsmann, P. Lohr-Richter, G. Saake, and H.-D. Ehrich. </author> <title> Conceptual modelling of database applications using an extended ER model. </title> <booktitle> volume 9 of Data and Knowledge Engineering, </booktitle> <pages> pages 157-204. </pages> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: During the first phase of the project, which was mainly done by DMT, the research institute of the German mining industry, we applied an extended entity relationship model as described in <ref> [7, 14] </ref>. Later on we used the object modeling technique OMT given by Rumbaugh et al. [23], which is also applied in this paper. The shift from the storage of spatial data in maps to a database system involves an important shift of paradigm, which can hardly be underestimated.
Reference: [8] <author> H. Freeman and J. Ahn. </author> <title> On the problem of placing names in a geographic map. </title> <journal> Int. Journal of Pattern Recognition and Artificial Intelligence, </journal> <volume> 1(1) </volume> <pages> 121-140, </pages> <year> 1987. </year>
Reference-contexts: Many researchers in this field already apply such techniques in order to approach problems ranging from theoretical foundations of GIS to such specific applications as object recognition in aerial images [4] or text placement in maps <ref> [8, 10] </ref>. This paper is based on a software project which has been undertaken for a number of years resulting in a database being installed on all coal mines of the Ruhr Area in Germany.
Reference: [9] <author> John R. Herring. TIGRIS: </author> <title> topologically integrated geographic information system. </title> <booktitle> In Proceedings of the Auto Carto 8 Conference, </booktitle> <address> Baltimore, Maryland, USA, </address> <pages> pages 282-291, </pages> <address> Baltimore, Maryland, USA, </address> <year> 1987. </year>
Reference-contexts: Although several GIS (Arc/INFO [21], Tigris <ref> [9] </ref>, SiCAD etc.) have been commercially available when the project started five years ago ([2]) none of them fitted the given needs.
Reference: [10] <author> C. B. Jones. </author> <title> Cartographic name placement with Prolog. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 9(5) </volume> <pages> 36-47, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Many researchers in this field already apply such techniques in order to approach problems ranging from theoretical foundations of GIS to such specific applications as object recognition in aerial images [4] or text placement in maps <ref> [8, 10] </ref>. This paper is based on a software project which has been undertaken for a number of years resulting in a database being installed on all coal mines of the Ruhr Area in Germany.
Reference: [11] <editor> W. Keune and R. Simon. Infrastruktur-Informationssystem Bergwerk. GIS, </editor> (3):6-12, 1995. 
Reference-contexts: Availability and easy access on reliable and actual data is an important prerequisite for the complex task of planning and operating a mine. The need to react on unforseeable events require ad-hoc access to and reasoning on the relevant data of the mine <ref> [11] </ref>. fl This article appeared in: Proc. of the 4. Int. Conf. on the Practical Application of Prolog, London, 1996 Geological data are stored in a number of maps describing the overall geological situation and the actual state of the mine.
Reference: [12] <author> H. J. Komorowski. </author> <title> A specification of an abstract Prolog machine and its application to partial evaluation. </title> <type> PhD thesis, </type> <institution> Linkoping University, </institution> <year> 1981. </year>
Reference-contexts: On the other hand, the database interface is called twice, since each select statement results in a call to the interface. A straightforward solution to both problems is partial evaluation <ref> [12, 25, 15] </ref>. The declarative definition of the complete object interface allows to unfold the complete query until the goal only consists of database predicates and aggregations of complex attributes. The sub-query consisting of the database predicates is translated to an SQL-statement using the technique described in [24].
Reference: [13] <author> R. Laurini and D. Thompson. </author> <title> Fundamentals of Spatial Information Systems. </title> <publisher> Academic Press, </publisher> <address> London, UK, </address> <year> 1992. </year>
Reference-contexts: In this case, which is fairly typical for GIS applications (for an overview of GIS see <ref> [13] </ref>), data modeling had a special importance and complexity due to two facts: integration of heterogeneous data collections and the shift from storing geological data in maps to a database, which separates between the visualization and the storage of data.
Reference: [14] <author> U. W. Lipeck and K. Neumann. </author> <title> Modelling and manipulating objects in geoscientific databases. </title> <editor> In S. Spaccapietra, editor, </editor> <booktitle> Proc. of the 5th Int. Conf. on the ER-Approach to Information Modelling and Analysis, </booktitle> <pages> pages 67-86, </pages> <address> Amsterdam, NL, 1986. </address> <publisher> North-Holland. </publisher>
Reference-contexts: During the first phase of the project, which was mainly done by DMT, the research institute of the German mining industry, we applied an extended entity relationship model as described in <ref> [7, 14] </ref>. Later on we used the object modeling technique OMT given by Rumbaugh et al. [23], which is also applied in this paper. The shift from the storage of spatial data in maps to a database system involves an important shift of paradigm, which can hardly be underestimated.
Reference: [15] <author> J. W. Lloyd and J. C. Shepherdson. </author> <title> Partial evaluation in logic programming. </title> <journal> Journal of Logic Programming, </journal> 11(3&4):217-242, October 1991. 
Reference-contexts: On the other hand, the database interface is called twice, since each select statement results in a call to the interface. A straightforward solution to both problems is partial evaluation <ref> [12, 25, 15] </ref>. The declarative definition of the complete object interface allows to unfold the complete query until the goal only consists of database predicates and aggregations of complex attributes. The sub-query consisting of the database predicates is translated to an SQL-statement using the technique described in [24].
Reference: [16] <author> R. Lorie and H.-J. Schek. </author> <title> On dynamically defined complex objects and SQL. </title> <booktitle> In Proceedings of the 2nd Int. Workshop Object-Oriented Database Systems, volume 334 of LNCS, </booktitle> <pages> pages 323-328, </pages> <address> New York, 1988. </address> <publisher> Springer. </publisher>
Reference-contexts: Based on these predicates actually specifying what has been called NF 2 -relations <ref> [16] </ref> we defined a select statement which allows a flexible retrieval of objects and their components (for an overview of spatial extensions of SQL see [6]).
Reference: [17] <author> R. A. Lorie. </author> <title> The use of complex object language in geographic data management. </title> <editor> In O. Gunther and H.-J. Schek, editors, </editor> <booktitle> Advances in Spatial Databases, </booktitle> <pages> pages 319-337. </pages> <publisher> Springer, </publisher> <year> 1991. </year>
Reference-contexts: Such objects may be and in fact are mapped to the tables of a relational database in the GIS described in this paper. The semantic gap between complex objects and flat relations, however, causes several problems on different levels <ref> [26, 1, 17] </ref> including the the expressiveness of the query language, complexity of integrity constraints, long-termed transactions and above all performance. This paper focuses on the description of a query language which bridges the gap between the object model and the relational database using Logic Programming techniques.
Reference: [18] <author> R. Lucas. </author> <title> Database Applications using Prolog. Computers and Their Applications. </title> <publisher> Ellis Hor-wood Limited, </publisher> <address> Chichester, England, </address> <year> 1988. </year>
Reference-contexts: This query is converted by the database interface to the following equivalent SQL-Statement: select working_place_number from hollow_space where name = xyz; The retrieved data are passed from the database interface in a way that is called one-tuple-at-a-time (for pragmatic aspects regarding the implementation of database interfaces see <ref> [18] </ref>). In Prolog, however, output variables may be bound already by the input goal. Again consider the query given above, but now suppose N is bound to 5.
Reference: [19] <author> M. Meier, A. Aggoun, D. Chan, P. Dufresne, R. Enders, D. Henry de Villeneuve, A. Herold, P. Kay, B. Perez, E. van Rossum, and J. Schimpf. </author> <title> SEPIA an extendible prolog system. </title> <booktitle> In Proc. of the 11th World Computer Congress IFIP '89, </booktitle> <address> San Francisco, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: This paper focuses on the description of a query language which bridges the gap between the object model and the relational database using Logic Programming techniques. We describe an SQL-interface for the Prolog System Eclipse <ref> [19, 20] </ref> tailored to the efficient construction of objects on the Prolog level. <p> Based on an evaluation of different (commercial and non-commercial) Prolog systems, we decided to use Eclipse <ref> [19, 20] </ref>. Reasons among others were robustness and scalability, the included constraint handling techniques and the flexible indexing strategy. The latter comfortably augments the capabilities of the RDBMS, thus allowing to run the complete system even without the underlying relational database system.
Reference: [20] <author> M. Meier and J. Schimpf. </author> <title> An architecture for prolog extensions. </title> <booktitle> In Proc. of the 3rd Int. Workshop on Extensions of Logic Programming, </booktitle> <address> Bologna, </address> <year> 1992. </year>
Reference-contexts: This paper focuses on the description of a query language which bridges the gap between the object model and the relational database using Logic Programming techniques. We describe an SQL-interface for the Prolog System Eclipse <ref> [19, 20] </ref> tailored to the efficient construction of objects on the Prolog level. <p> Based on an evaluation of different (commercial and non-commercial) Prolog systems, we decided to use Eclipse <ref> [19, 20] </ref>. Reasons among others were robustness and scalability, the included constraint handling techniques and the flexible indexing strategy. The latter comfortably augments the capabilities of the RDBMS, thus allowing to run the complete system even without the underlying relational database system.
Reference: [21] <author> Scott Morehouse. </author> <booktitle> The architecture of ARC/INFO. In Proceedings of the Auto Carto 9 Conference, </booktitle> <address> Baltimore, Maryland, USA, </address> <pages> pages 266-277, </pages> <year> 1989. </year>
Reference-contexts: Such new range of possible applications requires a new and formal modeling of entities the structures of which were supposed to be well-understood in the past. 1.2 Technology The decision to apply a relational database system was made on the management level for several reasons. Although several GIS (Arc/INFO <ref> [21] </ref>, Tigris [9], SiCAD etc.) have been commercially available when the project started five years ago ([2]) none of them fitted the given needs.
Reference: [22] <author> J. K. Ousterhout. </author> <title> Tcl and the Tk toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: Subsequently, we discuss the actual construction of the objects specified in the data model, and the Prolog implementation of a query language, tightly integrated in a graphical user interface based on TCL/TK <ref> [22] </ref> and extending Select-statements by handling aggregated objects and spatial relations. The paper ends with an illustrative example from the application domain and concluding remarks on the relevance of Logic Programming techniques for GIS. 2 The Data Model purposes throughout this paper.
Reference: [23] <author> J. Rumbaugh, M. Blaha, W. Premerlani, F. Eddy, and W. Lorensen. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1991. </year>
Reference-contexts: During the first phase of the project, which was mainly done by DMT, the research institute of the German mining industry, we applied an extended entity relationship model as described in [7, 14]. Later on we used the object modeling technique OMT given by Rumbaugh et al. <ref> [23] </ref>, which is also applied in this paper. The shift from the storage of spatial data in maps to a database system involves an important shift of paradigm, which can hardly be underestimated. Typical for maps is that spatial data are stored and presented by the same medium. <p> Their specific object classes form subclasses of the superclass Component. 3 The Prolog-SQL Interface The transformation of the object classes to a relational scheme is not too difficult. General rules for this transformation are described in <ref> [23] </ref>. Special problems arise from the complex structure of aggregated spatial objects such as "hollow space". The geometry of a hollow space is given by a list (ordered set) of points.
Reference: [24] <author> Jeffrey D. Ullman. </author> <title> Principles of Database and Knowledge-Base Systems, volume 1,. </title> <publisher> Computer Science Press, </publisher> <year> 1988. </year>
Reference-contexts: General rules for this transformation are described in [23]. Special problems arise from the complex structure of aggregated spatial objects such as "hollow space". The geometry of a hollow space is given by a list (ordered set) of points. Since due to 1NF <ref> [24] </ref> there is no way to represent a set / list of objects in a single attribute, neither 1NF-relations nor -views provide an adequate representation. Accordingly, SQL commands for the manipulation of complete objects become rather complex and in some cases even unmanageable. <p> The declarative definition of the complete object interface allows to unfold the complete query until the goal only consists of database predicates and aggregations of complex attributes. The sub-query consisting of the database predicates is translated to an SQL-statement using the technique described in <ref> [24] </ref>.
Reference: [25] <author> R. Venken. </author> <title> A prolog meta-interpreter for partial evaluation and its application to source to source transformation and query-optimization. </title> <editor> In T. O'Shea, editor, </editor> <booktitle> Advances in Artificial Intelligence: Proceedings of the Sixth European Conference on Artificial Intelligence, </booktitle> <address> Pisa Italy, </address> <publisher> page Elsevier Science Publishers B.V. (North Holland). Elsevier Science Publishers B.V. (North Holland), </publisher> <year> 1984. </year>
Reference-contexts: On the other hand, the database interface is called twice, since each select statement results in a call to the interface. A straightforward solution to both problems is partial evaluation <ref> [12, 25, 15] </ref>. The declarative definition of the complete object interface allows to unfold the complete query until the goal only consists of database predicates and aggregations of complex attributes. The sub-query consisting of the database predicates is translated to an SQL-statement using the technique described in [24].
Reference: [26] <author> G. Wiederhold. </author> <title> Views, objects and databases. </title> <journal> IEEE Computing, </journal> <pages> pages 34-44, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: Such objects may be and in fact are mapped to the tables of a relational database in the GIS described in this paper. The semantic gap between complex objects and flat relations, however, causes several problems on different levels <ref> [26, 1, 17] </ref> including the the expressiveness of the query language, complexity of integrity constraints, long-termed transactions and above all performance. This paper focuses on the description of a query language which bridges the gap between the object model and the relational database using Logic Programming techniques.
References-found: 26

