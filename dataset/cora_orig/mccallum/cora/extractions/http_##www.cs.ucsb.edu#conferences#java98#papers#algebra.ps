URL: http://www.cs.ucsb.edu/conferences/java98/papers/algebra.ps
Refering-URL: http://www.cs.ucsb.edu/conferences/java98/program.html
Root-URL: http://www.cs.ucsb.edu
Email: E-mail: fweber,kuechling@informatik.uni-tuebingen.de  
Title: Parallel Computer Algebra Software as a Web Component  
Author: Andreas Weber Wolfgang Kuchlin Bernhard Eggers Volker Simonis 
Web: WWW: http://www-sr.informatik.uni-tuebingen.de  
Address: 72076 Tubingen, Germany  
Affiliation: Wilhelm-Schickard-Institut fur Informatik Universitat Tubingen,  
Abstract: In the field of computer algebra, joining separate computer algebra systems with individual strengths into problem solving environments is an important recent research direction. In this paper we describe how we wrapped a specialized computer algebra system, which uses shared-memory parallelism to speed up Grobner basis computations, into a Web component that can be used by other systems. By this component also a new algorithmic development in Grobner basis computationsthe use of the fractal Grobner walkwas made available to various general purpose computer algebra systems in the form of a single optimized implementation. Previously, all of the important algorithmic improvements to an algorithm had to be reimplemented in the general purpose systems . Our implementation allows access to the Grobner basis computations via intelligent graphical user interfaces and via scripting from existing general purpose algebra systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> AMRHEIN, B., AND GLOOR, O. </author> <title> The fractal walk. </title> <note> In Winkler [13]. </note>
Reference-contexts: Even super-linear speed-ups due to strategy effects have been observed [2]. It currently runs on multi-processor SUN SPARC stations. On the algorithmic side, improvements of the so called Grobner walk technique have been developed [3, 4] and implemented. So far the most efficient of these is the fractal walk <ref> [1] </ref>, which is the version we use in the system described in this paper. 1 2 Accessing the High-Performance Gr obner Bases Software via the WWW We provide three different access methods to our high-performance symbolic software.
Reference: [2] <author> AMRHEIN, B., GLOOR, O., AND K UCHLIN, W. </author> <title> A case study of multi-threaded Grobner basis completion. </title> <booktitle> In Lak-shman [12]. </booktitle>
Reference-contexts: Developping algorithms and building high-performance systems for their efficient computation is a central topic of research. Our research group takes part in this efforts and has built a high-performance Grobner solver <ref> [2] </ref>. This software that we made available via the WWW is based on the computer algebra nucleus CANNES [8]. CANNES gives a very efficient implementation of arbitrary precision integers on the basis of GNU/MP and of lists, including an automatic garbage collection. <p> The Grobner solver uses the parallel version PARCAN [8] of CANNES and shows good speed-ups on shared-memory multiprocessors. Even super-linear speed-ups due to strategy effects have been observed <ref> [2] </ref>. It currently runs on multi-processor SUN SPARC stations. On the algorithmic side, improvements of the so called Grobner walk technique have been developed [3, 4] and implemented.
Reference: [3] <author> AMRHEIN, B., GLOOR, O., AND K UCHLIN, W. </author> <title> Walking faster. </title> <booktitle> In Design and Implementation of Symbolic Computation Systems International Symposium DISCO '96 (Karlsruhe, </booktitle> <address> Germany, </address> <month> Sept. </month> <year> 1996), </year> <editor> J. Calmet and C. Limon-gelli, Eds., </editor> <volume> vol. </volume> <booktitle> 1128 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Even super-linear speed-ups due to strategy effects have been observed [2]. It currently runs on multi-processor SUN SPARC stations. On the algorithmic side, improvements of the so called Grobner walk technique have been developed <ref> [3, 4] </ref> and implemented.
Reference: [4] <author> AMRHEIN, B., GLOOR, O., AND K UCHLIN, W. </author> <title> On the Walk. </title> <journal> Theoretical Comput. Sci. </journal> <volume> 187 (1997), </volume> <pages> 179202. </pages>
Reference-contexts: Even super-linear speed-ups due to strategy effects have been observed [2]. It currently runs on multi-processor SUN SPARC stations. On the algorithmic side, improvements of the so called Grobner walk technique have been developed <ref> [3, 4] </ref> and implemented.
Reference: [5] <author> BECKER, T., AND WEISPFENNING, V. </author> <title> Grobner Bases: A Computational Approach to Commutative Algebra, vol. 141 of Graduate Texts in Mathematics. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: The encapsulation of the parallel system and access to it is done with Java using various techniques that are well supported by Java. 1.1 High Performance Gr obner Bases Computation The computation of Grobner bases <ref> [5] </ref> is of central importance in computer algebra. Developping algorithms and building high-performance systems for their efficient computation is a central topic of research. Our research group takes part in this efforts and has built a high-performance Grobner solver [2].
Reference: [6] <author> BUCHBERGER, B., COLLINS, G. E., ENCARNACI ON, M. J., HONG, H., JOHNSON, J. R., KRANDICK, W., LOOS, R., MANDACHE, A., NEUBACHER, A., AND VIELHABER, H. </author> <title> SACLIB User's Guide. </title> <institution> Johannes Kepler Universitat, 4020 Linz, Austria, </institution> <month> Mar. </month> <year> 1993. </year> <note> Available via anonymous ftp at melmac.risc.uni-linz.ac.at in pub/saclib. </note>
Reference-contexts: The following programs will be executed on our parallel server computer. The parallel Grobner solver; a high-performance implementation of the fractal Grobner walk; a small C program based on the SACLIB computer algebra library <ref> [6] </ref> which expands polynomials. This function serves as an improvement to the user friendliness of the interface, because the user might give polynomials in non-expanded form, but the Grobner solver expects its input polynomials in expanded form. These programs are wrapped into Java classes.
Reference: [7] <author> DALMAS, S., GA ETANO, M., AND WATT, S. </author> <title> An OpenMath 1.0 implementation. </title> <booktitle> In Kuchlin [11], </booktitle> <pages> pp. 241248. </pages>
Reference-contexts: Dealing with Different Representations of Mathematical Data. Different computer algebra systems often use different syntactic representations of the mathematical objects they are dealing with. Several suggestions have been made for a common exchange format between different systems. These include the multi-protocol (MP) [9], OpenMath <ref> [7] </ref>, or the MathBus [14]. Ideally, all systems should support one of these formats. Then the communication between different systems would be greatly facilitated. The existence of several exchange formats already indicates that no general agreement is in sight. Our solution to this problem has been as follows.
Reference: [8] <author> GLOOR, O., AND M ULLER, S. </author> <note> PARCANa parallel computer algebra nucleus. In preparation, </note> <year> 1997. </year>
Reference-contexts: Developping algorithms and building high-performance systems for their efficient computation is a central topic of research. Our research group takes part in this efforts and has built a high-performance Grobner solver [2]. This software that we made available via the WWW is based on the computer algebra nucleus CANNES <ref> [8] </ref>. CANNES gives a very efficient implementation of arbitrary precision integers on the basis of GNU/MP and of lists, including an automatic garbage collection. The Grobner solver uses the parallel version PARCAN [8] of CANNES and shows good speed-ups on shared-memory multiprocessors. <p> This software that we made available via the WWW is based on the computer algebra nucleus CANNES <ref> [8] </ref>. CANNES gives a very efficient implementation of arbitrary precision integers on the basis of GNU/MP and of lists, including an automatic garbage collection. The Grobner solver uses the parallel version PARCAN [8] of CANNES and shows good speed-ups on shared-memory multiprocessors. Even super-linear speed-ups due to strategy effects have been observed [2]. It currently runs on multi-processor SUN SPARC stations. On the algorithmic side, improvements of the so called Grobner walk technique have been developed [3, 4] and implemented.
Reference: [9] <author> GRAY, S., KAJLER, N., AND WANG, P. </author> <title> MP: A protocol for efficient exchange of mathematical expressions. </title> <booktitle> In Proc. Intl. Symposium on Symbolic and Algebraic Computation (IS-SAC '94) (Oxford, </booktitle> <month> July </month> <year> 1994), </year> <journal> Association for Computing Machinery, </journal> <pages> pp. 330335. </pages>
Reference-contexts: Dealing with Different Representations of Mathematical Data. Different computer algebra systems often use different syntactic representations of the mathematical objects they are dealing with. Several suggestions have been made for a common exchange format between different systems. These include the multi-protocol (MP) <ref> [9] </ref>, OpenMath [7], or the MathBus [14]. Ideally, all systems should support one of these formats. Then the communication between different systems would be greatly facilitated. The existence of several exchange formats already indicates that no general agreement is in sight. Our solution to this problem has been as follows.
Reference: [10] <author> HEIMBIGNER, D. </author> <title> JAVA BisonParser and Lexer Generation for Java. </title> <institution> University of Colorado at Boulder, </institution> <year> 1997. </year> <note> Available at ftp://ftp.cs.colorado.edu/ pub/cs/distribs/arcadia/jb.tar. </note>
Reference-contexts: Converting data form the MathBus into another format is quite easy, since the MathBus format is a quite general expression tree format. Converting data from Mathematica into the MathBus format could be done with a parser generator. 1 We used the Java Bison system <ref> [10] </ref> for this purpose. Incorporating converters for other algebra systems can be done by simply adapting the grammar of the parser for the algebra system and writing the straight-forward conversion from the MathBus format into the format of the new system.
Reference: [11] <editor> K UCHLIN, W., Ed. </editor> <booktitle> Proceedings of the 1997 International Symposium on Symbolic and Algebraic Computation (IS-SAC '97) (Aston Wailea Resort, Maui, Hawaii, 1997), The Association for Computing Machinery, ACM. </booktitle>
Reference: [12] <editor> LAKSHMAN, Y. N., Ed. </editor> <booktitle> Proc. Intl. Symposium on Symbolic and Algebraic Computation (ISSAC '96) (Zurich, </booktitle> <month> July </month> <year> 1996), </year> <institution> Association for Computing Machinery. </institution>
Reference: [13] <author> WINKLER, F., Ed. </author> <title> 33 Years of Grobner Bases (Feb. 1998), </title> <publisher> Cambridge University Press. </publisher>
Reference: [14] <author> ZIPPEL, R. </author> <title> The MathBus Term Structure. </title> <institution> Cornell University, </institution> <address> Ithaca, </address> <publisher> NY 14853, </publisher> <editor> U. S. A., </editor> <year> 1997. </year> <note> http:// www2.cs.cornell.edu/Simlab/papers/ mathbus/mathTerm.htm. 4 </note>
Reference-contexts: Dealing with Different Representations of Mathematical Data. Different computer algebra systems often use different syntactic representations of the mathematical objects they are dealing with. Several suggestions have been made for a common exchange format between different systems. These include the multi-protocol (MP) [9], OpenMath [7], or the MathBus <ref> [14] </ref>. Ideally, all systems should support one of these formats. Then the communication between different systems would be greatly facilitated. The existence of several exchange formats already indicates that no general agreement is in sight. Our solution to this problem has been as follows. <p> Our solution to this problem has been as follows. We take one of the common exchange formats for our internal representation and provide parsers and converters from and to other formats. The format we use is the one of the MathBus <ref> [14] </ref>, which was especially developed as a bridge between different systems, especially computer algebra systems. Up to now we have implemented a converter from and to the computer algebra system Mathematica and the format used by the parallel Grobner solver.
References-found: 14

