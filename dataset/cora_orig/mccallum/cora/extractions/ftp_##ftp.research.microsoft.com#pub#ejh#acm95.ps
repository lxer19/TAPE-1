URL: ftp://ftp.research.microsoft.com/pub/ejh/acm95.ps
Refering-URL: http://www.research.microsoft.com/~horvitz/meld.htm
Root-URL: http://www.research.microsoft.com
Title: Structure and Chance: Melding Logic and Probability for Software Debugging  
Author: Lisa Burnell Eric Horvitz 
Address: One Microsoft Way Redmond, WA 98052  
Affiliation: Microsoft Research Advanced Technology Division Microsoft Corporation  
Date: February 1995  
Note: Communications of the ACM, 38(3)31-41, 1995.  Appears in Communications of the ACM, 38(3)31-41, 1995.  
Abstract: Technical Report MSR-TR-95-12 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Aho, A.V., Sethi, R. and Ullman, J.D. </author> <booktitle> Compilers. Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1986. </year> <month> 27 </month>
Reference-contexts: The symbol table, the control flow graph, and the data in the dumpfile are used to rule out impossible paths. Execution paths are typically constructed using a directed-graph representation of the program segment called a control flow graph (see <ref> [1] </ref> for a detailed description). Each node of the graph, called a basic block, contains a set of instructions that are executed in sequence.
Reference: [2] <author> Arbon, R.G., Atkinson, L., Chen, J., Guida, </author> <title> C.A. TPF Dump Analyzer: A System to Provide Expert Assistance to Analysts in Solving Run-Time Program Exceptions by Deriving Program Intention from a TPF Assembly Language Program. </title> <booktitle> In Proceedings of Innovative Application of Artificial Intelligence 4 (Jul. </booktitle> <pages> 12-16, </pages> <address> San Jose, Calif.). </address> <publisher> AAAI, </publisher> <address> Menlo Park, Calif., </address> <year> 1992, </year> <pages> pp. 71-88. </pages>
Reference-contexts: In many APU projects, designers have sought to develop methods to interpret and understand an entire program segment. In the realm of automated program debuggers, the APU task involves understanding just enough about program behavior to determine failures in the code (see, for example, <ref> [2] </ref>, [10]; additional related work and a comparison to our method is given in [4]). In theory, the debugging task is not as ambitious as that of comprehensive program understanding.
Reference: [3] <author> Burnell, L.J. and E.J. Horvitz, E.J. </author> <title> A Synthesis of Logical and Probabilistic Reasoning for Program Understanding and Debugging. </title> <booktitle> In Proceedings of the Ninth Conference on Uncertainty in Artificial Intelligence (July 9-11, </booktitle> <address> Washington. D.C.). </address> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, Calif., </address> <year> 1993, </year> <pages> pp. 285-291. </pages>
Reference-contexts: Our work was carried out as part of the Dump Analysis And Consulting System (DAACS) Project, a research effort centered at the University of Texas at Arlington, and at the former Knowledge Systems Group of American Airlines in Fort Worth <ref> [3, 4] </ref>. We have focused specifically on the problem of identifying sequences of instructions that could harbor the source of run-time problems arising in the American Airlines Sabre airline reservation system, the most widely used time-shared reservation system in the world.
Reference: [4] <author> Burnell, L.J. and Talbot, </author> <title> S.E. Incorporating Probabilistic Reasoning in a Reactive Program Debugging System. </title> <journal> IEEE Expert, </journal> <month> 9,1 (Feb. </month> <year> 1994), </year> <pages> 15-20. </pages>
Reference-contexts: Our work was carried out as part of the Dump Analysis And Consulting System (DAACS) Project, a research effort centered at the University of Texas at Arlington, and at the former Knowledge Systems Group of American Airlines in Fort Worth <ref> [3, 4] </ref>. We have focused specifically on the problem of identifying sequences of instructions that could harbor the source of run-time problems arising in the American Airlines Sabre airline reservation system, the most widely used time-shared reservation system in the world. <p> In the realm of automated program debuggers, the APU task involves understanding just enough about program behavior to determine failures in the code (see, for example, [2], [10]; additional related work and a comparison to our method is given in <ref> [4] </ref>). In theory, the debugging task is not as ambitious as that of comprehensive program understanding.
Reference: [5] <author> Hartman, J. </author> <year> 1992. </year> <booktitle> Technical Introduction to the First Workshop on Artificial Intelligence and Automated Program Understanding. In Workshop Notes of the AAAI-92 Workshop Program: AI & Automated Program Understanding (July 12-16, </booktitle> <address> San Jose, Calif.). </address> <publisher> AAAI, </publisher> <address> Menlo Park, Calif., </address> <year> 1992, </year> <pages> pp. 8-30. </pages>
Reference-contexts: Therefore, to debug time-shared assembler programs, engineers must often examine program structure and infer intended program behavior. There has been ongoing related work on automated program understanding (APU). APU tools build abstract representations of a program and related information to facilitate reasoning (see, for example, <ref> [5, 9, 12] </ref>). Most program understanding systems seek to match portions of programs to prototypical implementation plans. Applications pursued by APU researchers include student programming tutors, design recovery and reuse of software, and program language translation.
Reference: [6] <author> Heckerman, D., Horvitz, E., Nathwani, B. </author> <title> Toward normative expert systems: Part I. The Pathfinder Project. </title> <booktitle> Methods of Information in Medicine, </booktitle> <volume> 31 </volume> <pages> 90-105. </pages>
Reference-contexts: The salience of uncertain reasoning in program debugging, in combination with the development, over the last decade, of expressive probabilistic representations and inference 4 methods <ref> [6, 8, 11] </ref> stimulated us to investigate methods that take advantage of both logical and probabilistic inference to support the process of software debugging. We have applied the automated reasoning methods to problems with maintaining and refining large, complex pieces of software that are used and refined over many years. <p> In practice, probabilistic-inference algorithms are applied to belief networks to compute the probability distributions over the values of variables in the network conditioned on the specified values of some subset of variables (see reviews of this work in <ref> [11, 6, 8] </ref>). In most applications of belief networks, users are most interested in reviewing probabilities computed for values of nodes representing variables that are hidden from direct inspection, such as diseases in a patient.
Reference: [7] <author> Horvitz, E.J. </author> <title> Reasoning under varying and uncertain resource constraints. </title> <booktitle> In Proceedings of the Seventh National Conference on Artificial Intelligence , (Aug. </booktitle> <pages> 21-26, </pages> <address> Minneapolis, MN). </address> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, Calif., </address> <year> 1988, </year> <pages> pp. 111-116. </pages>
Reference-contexts: Additionally, we are interested in the use of decision-theoretic methods to focus the attention of path-identification analyses, to identify cost-effective evidence gathering strategies, and to prioritize debugging tasks for a time-pressured software engineer <ref> [7] </ref>. Finally, we are excited about recent research in learning belief-network models from data.
Reference: [8] <author> Horvitz, E.J., Breese, J.S., and Henrion, M. </author> <title> Decision Theory in Expert Systems and Artificial Intelligence, </title> <journal> International Journal of Approximate Reasoning, Special Issue on Uncertain Reasoning, </journal> <volume> 2 (1988), </volume> <pages> pp. 247-302. </pages>
Reference-contexts: The salience of uncertain reasoning in program debugging, in combination with the development, over the last decade, of expressive probabilistic representations and inference 4 methods <ref> [6, 8, 11] </ref> stimulated us to investigate methods that take advantage of both logical and probabilistic inference to support the process of software debugging. We have applied the automated reasoning methods to problems with maintaining and refining large, complex pieces of software that are used and refined over many years. <p> In practice, probabilistic-inference algorithms are applied to belief networks to compute the probability distributions over the values of variables in the network conditioned on the specified values of some subset of variables (see reviews of this work in <ref> [11, 6, 8] </ref>). In most applications of belief networks, users are most interested in reviewing probabilities computed for values of nodes representing variables that are hidden from direct inspection, such as diseases in a patient.
Reference: [9] <author> Kozaczynski, W., Letovsky, S. and Ning, J. </author> <title> A Knowledge-Based Approach to Software System Understanding. </title> <booktitle> In Proceedings of the Sixth Annual Knowledge-Based Software Engineering Conference (Sep. </booktitle> <pages> 22-25, </pages> <address> Syracuse, N.Y.). </address> <publisher> IEEE, Los Alamitos, </publisher> <address> Calif., </address> <year> 1991, </year> <pages> pp. 162-170. 28 </pages>
Reference-contexts: Therefore, to debug time-shared assembler programs, engineers must often examine program structure and infer intended program behavior. There has been ongoing related work on automated program understanding (APU). APU tools build abstract representations of a program and related information to facilitate reasoning (see, for example, <ref> [5, 9, 12] </ref>). Most program understanding systems seek to match portions of programs to prototypical implementation plans. Applications pursued by APU researchers include student programming tutors, design recovery and reuse of software, and program language translation.
Reference: [10] <author> Lenz, N.G. and Saelens, S.F.L.. </author> <title> A knowledge-based system for MVS dump analysis. </title> <journal> IBM Systems Journal 30,3 (1991), </journal> <pages> 336-350. </pages>
Reference-contexts: In many APU projects, designers have sought to develop methods to interpret and understand an entire program segment. In the realm of automated program debuggers, the APU task involves understanding just enough about program behavior to determine failures in the code (see, for example, [2], <ref> [10] </ref>; additional related work and a comparison to our method is given in [4]). In theory, the debugging task is not as ambitious as that of comprehensive program understanding.
Reference: [11] <author> Pearl, J. </author> <title> Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference. </title> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, CA, </address> <year> 1988. </year>
Reference-contexts: The salience of uncertain reasoning in program debugging, in combination with the development, over the last decade, of expressive probabilistic representations and inference 4 methods <ref> [6, 8, 11] </ref> stimulated us to investigate methods that take advantage of both logical and probabilistic inference to support the process of software debugging. We have applied the automated reasoning methods to problems with maintaining and refining large, complex pieces of software that are used and refined over many years. <p> In practice, probabilistic-inference algorithms are applied to belief networks to compute the probability distributions over the values of variables in the network conditioned on the specified values of some subset of variables (see reviews of this work in <ref> [11, 6, 8] </ref>). In most applications of belief networks, users are most interested in reviewing probabilities computed for values of nodes representing variables that are hidden from direct inspection, such as diseases in a patient.
Reference: [12] <author> Selfridge, P.G. </author> <title> Knowledge Representation Support for a Software Information System, </title> <booktitle> In Proceedings of the Seventh IEEE Conference on AI Applications (Feb. </booktitle> <pages> 24-28, </pages> <address> Miami Beach, Florida). </address> <publisher> IEEE, Los Alamitos, </publisher> <address> Calif., </address> <year> 1991, </year> <pages> pp. 134-140. </pages>
Reference-contexts: Therefore, to debug time-shared assembler programs, engineers must often examine program structure and infer intended program behavior. There has been ongoing related work on automated program understanding (APU). APU tools build abstract representations of a program and related information to facilitate reasoning (see, for example, <ref> [5, 9, 12] </ref>). Most program understanding systems seek to match portions of programs to prototypical implementation plans. Applications pursued by APU researchers include student programming tutors, design recovery and reuse of software, and program language translation.

References-found: 12

