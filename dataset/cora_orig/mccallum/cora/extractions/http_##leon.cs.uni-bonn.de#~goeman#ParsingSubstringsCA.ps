URL: http://leon.cs.uni-bonn.de/~goeman/ParsingSubstringsCA.ps
Refering-URL: http://leon.cs.uni-bonn.de/~goeman/
Root-URL: http://cs.uni-bonn.de
Email: Email: goeman@cs.uni-bonn.de  
Title: On Parsing and Condensing Substrings of LR Languages in Linear Time  
Author: Heiko Goeman 
Address: Romerstrae 164, 53117 Bonn, Germany  
Affiliation: University of Bonn, Computer Science Department V,  
Abstract: LR parsers have long been studied as being an efficient method for parsing deterministic context-free grammars. In this article, we present a linear-time algorithm for recognizing substrings of LR languages. The algorithm depends on the LR automaton that is used for the usual parsing of complete sentences. We prove the correctness and linear complexity of our algorithm and present an interesting extension of our substring parser that allows to condense the input string, which increases the speed when reparsing that string for a second time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, J. D. Ullman: </author> <title> The Theory of Parsing, Translation and Compiling. Vol. 1: Parsing. </title> <publisher> Prentice Hall, </publisher> <year> 1972. </year>
Reference-contexts: We assume that the reader is familiar with the LR parsing technique. For more information, the reader is directed to <ref> [1] </ref>.
Reference: [2] <author> J. Bates, A. Lavie: </author> <title> Recognizing Substrings of LR(k) Languages in Linear Time. </title> <journal> ACM Transactions on Programming Languages and Systems 16(3), </journal> <pages> 1051-1077, </pages> <year> 1994. </year>
Reference-contexts: Several substring parsers suffering from various drawbacks have already been presented before. Cormack's algorithm [4] and a parallel version of it [3] only work with the bounded-context class of grammars, which is a proper subset of the LR (1) class. Bates and Lavie's approach <ref> [2] </ref> is applicable for SLR (1), LALR (1) and all canonical LR (k) grammars, but their correctness proof as well as their complexity analysis are incorrect, as we shall show later. <p> The resulting algorithm is fast and has several advantages over other correction methods, e.g. the advantage of never detecting spurious errors. Details will be published elsewhere. A The problems in the substring parser of Bates and Lavie In <ref> [2] </ref>, Bates and Lavie also present a substring parser for LR grammars. But unfortunately, both the correctness and the linear complexity are proven incorrectly, as we shall now demonstrate (familiarity with [2] is assumed). We again use the SLR (1) grammar given in the second section as an example. <p> Details will be published elsewhere. A The problems in the substring parser of Bates and Lavie In <ref> [2] </ref>, Bates and Lavie also present a substring parser for LR grammars. But unfortunately, both the correctness and the linear complexity are proven incorrectly, as we shall now demonstrate (familiarity with [2] is assumed). We again use the SLR (1) grammar given in the second section as an example. Let c = (q 3 ; b) be a partial configuration. <p> Clearly, the next configuration then results from a reduction corresponding to the rule A ! aa: (q 0 q 1 q 2 q 3 ; b) j A!aa (q 0 q 1 q 5 ; b) . By using the notions introduced in <ref> [2] </ref>, these facts can be written as c = ([q 3 ]; b; 1) ; M (c) = ([q 0 ; q 1 ; q 2 ; q 3 ]; aaab; 4) ; next (M (c)) = ([q 0 ; q 1 ; q 5 ]; aaab; 4) Now we determine <p> Clearly, LONG (A) = fq 4 ; q 5 g. Since the right hand side of the rule A ! aa is longer than the current stack in c, we conclude that next (c) results from a long reduction. By Definition 6 in <ref> [2] </ref>, we have next (c) = . There again is only one path from q 0 to q 4 , namely q 0 q 4 , and only one path from q 0 to q 5 , namely q 0 q 1 q 5 . <p> Therefore, with C := fcg, this lemma is obviously wrong. But then the complete proof of correctness is no longer valid, either. 2 The complexity analysis given in <ref> [2] </ref> is correct for grammars without "-rules, i.e., rules of the form A ! ". But Section 4.2, where the analysis is extended to grammers which include such rules, contains a severe error.
Reference: [3] <author> G. Clarke, D. T. Barnard: </author> <title> An LR Substring Parser Applied in a Parallel Environment. </title> <journal> Journal of Parallel and Distributed Computing 35, </journal> <pages> 2-17, </pages> <year> 1996. </year>
Reference-contexts: Several substring parsers suffering from various drawbacks have already been presented before. Cormack's algorithm [4] and a parallel version of it <ref> [3] </ref> only work with the bounded-context class of grammars, which is a proper subset of the LR (1) class.
Reference: [4] <author> G. V. Cormack: </author> <title> An LR Substring Parser for Noncorrecting Syntax Error Recovery. </title> <booktitle> ACM SIGPLAN 24(7), </booktitle> <pages> 161-169, </pages> <year> 1989. </year>
Reference-contexts: The ability to decide whether a part of a given program is not a substring of a programming language allows the local detection of syntax errors without performing a complete parsing process. Several substring parsers suffering from various drawbacks have already been presented before. Cormack's algorithm <ref> [4] </ref> and a parallel version of it [3] only work with the bounded-context class of grammars, which is a proper subset of the LR (1) class.
Reference: [5] <author> H. Richter: </author> <title> Noncorrecting Syntax Error Recovery. </title> <journal> ACM Transactions on Programming Languages and Systems 7(3), </journal> <pages> 478-489, </pages> <year> 1985. </year>
Reference-contexts: An important application for a corresponding substring parser is a method for detecting syntax errors suggested by Richter <ref> [5] </ref>, although his article does not contain such a parser. The ability to decide whether a part of a given program is not a substring of a programming language allows the local detection of syntax errors without performing a complete parsing process. <p> Practical experience has shown that this substring parser is nearly as fast as the corresponding normal LR parser. The substring parser has primarily been developed in order to generate a new algorithm for syntax error correction and recovery. This algorithm depends on the ideas of Richter <ref> [5] </ref> and divides an incorrect program into several parts such that on one hand each part contains at least one syntax error, but on the other hand a shorter substring of any part does not contain any syntax errors.
References-found: 5

