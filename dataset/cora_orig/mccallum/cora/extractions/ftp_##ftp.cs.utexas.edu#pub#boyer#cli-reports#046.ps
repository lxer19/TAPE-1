URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/046.ps
Refering-URL: ftp://ftp.cs.utexas.edu/pub/boyer/cli-reports/index.html
Root-URL: http://www.cs.utexas.edu
Title: VIPER Microprocessor  
Author: Bishop Brock Warren A. Hunt, Jr. 
Address: 1717 West Sixth Street, Suite 290 Austin, Texas 78703-4776  
Affiliation: Computational Logic, Inc.  
Note: of the  
Pubnum: Technical Report  
Email: EMAIL: brock@cli.com, hunt@cli.com  
Phone: TEL: +1 512 322 9951  
Date: 46 January 15, 1990  
Abstract: Report on the Formal Specification 1 This work was supported in part at Computational Logic, Inc. by NASA purchase order L-39627C and by the Defense Advanced Research Projects Agency, ARPA Order 584155. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of Computational Logic, Inc., NASA, the Defense Advanced Research Projects Agency or the U.S. Government. and Partial Verification
Abstract-found: 1
Intro-found: 1
Reference: [BF76] <author> Melvin A. Bruer and Authur D. Friedman. </author> <title> Diagnosis and Reliable Design of Digital Systems. </title> <publisher> Computer Science Press, </publisher> <address> Potomac, MD, </address> <year> 1976. </year>
Reference-contexts: Irrelevant signal values can be modeled with unknown or indeterminate states, which are well-known The Formal Specification and Partial Verification of VIPER Technical Report #46 15 abstractions for digital logic simulation <ref> [BF76] </ref>. Since simulating a circuit with an indeterminate input is equivalent to simulating both high and low values for that input, intelligent analysis by the engineer can reduce the number of input patterns required to completely test the functionality of a combinational circuit.
Reference: [Bry86] <author> Randal E. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(8):677-691, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: There is also a need to improve the Boolean decision procedures in mechanical reasoning systems, in order to avoid the necessity for special purpose methods such as Intelligent Exhaustion. For example, Bryant <ref> [Bry86] </ref> recently introduced a set of algorithms which provide extremely fast verification of Boolean circuits. It should be possible to soundly implement similar procedures in currently existing systems.
Reference: [Coh87] <author> Avra Cohn. </author> <title> A Proof of Correctness of the VIPER Microprocessor: The First Level. </title> <type> Technical Report 104, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <month> January </month> <year> 1987. </year>
Reference-contexts: The reference is to the method; the analyses are not docu mented. Top () Major State [CP85,Cul86] A hand proof, later invalidated. The first reference is to the method, the second documents the proof at tempt. Top () Major State <ref> [Coh87] </ref> A machine-checked proof, using HOL versions of the (corrected) specifications. Top () Block [Coh89a] A formal analysis in HOL; not a finished proof. <p> The first proof, which showed the correspondence between the top-level specification and the major-state machine, was published in 1987 <ref> [Coh87] </ref>. Cohn reported that this proof required six months to complete, and involved over one million primitive inferences. Due to a change of plans (see Section 4.4) this proof is only of historical interest, and does not play any role in the formal correctness argument for VIPER.
Reference: [Coh89a] <author> Avra Cohn. </author> <title> Correctness properties of the viper block model: </title> <booktitle> the second level. In Current Trends in Hardware Verification and Automatic Theorem Proving, </booktitle> <pages> pages 1-91, </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: Connecting the block-level models to create a usable formal specification in HOL was a major hurdle in the high-level proof attempt (Section 4.4). The translation from LCF LSM to HOL also uncovered a number of syntactic and typographical errors in the LCF LSM specifications <ref> [Coh89a] </ref>. The block-level specification is also flawed by the need for the co-specification in ELLA. <p> Top () Major State [CP85,Cul86] A hand proof, later invalidated. The first reference is to the method, the second documents the proof at tempt. Top () Major State [Coh87] A machine-checked proof, using HOL versions of the (corrected) specifications. Top () Block <ref> [Coh89a] </ref> A formal analysis in HOL; not a finished proof. Table 4.1: Analyses of the VIPER specification, in chronological order. nique, followed by a discussion of the application of IE to the VIPER verification and the problems with connecting the low-level proofs to the higher levels. <p> Quoting from <ref> [Coh89a] </ref> (the italics are Cohn's): For the non-ALU sequences, the results are not very complicated and they appear to be as intended. Some of the arithmetic-logic paths are also apparently correct. Others, in particular the additions, subtractions, and comparisons, are neither obviously correct nor incorrect, and require further study. <p> Cohn also gives other examples in which the correspondence between levels is far less clear. Unfortunately, the lemmas about bit-vector operations that were needed to prove the correspondence were never developed. The status of this proof attempt is unchanged since the publication of <ref> [Coh89a] </ref>. There is no indication that this proof will ever be completed. 4.5 Proof Summary Several attempts were made to prove correspondence between the various levels in the VIPER specification. These efforts were undertaken by RSRE and researchers at Cambridge University over a three-year period.
Reference: [Coh89b] <author> Avra Cohn. </author> <title> The notion of proof in hardware verification. </title> <journal> Journal of Automated Reasoning, </journal> <volume> 5(2) </volume> <pages> 127-139, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: This is not a unique point of view; a recent paper by one of the Cambridge University consultants arrives at a similar conclusion <ref> [Coh89b] </ref>. Chapter 2 contains an informal description of the VIPER microprocessor. The analysis of VIPER begins in Chapter 3 with an outline of the abstract layers used to specify VIPER. Chapter 4 covers each of the proofs, and attempted proofs of correspondence between the levels in the specification.
Reference: [CP85] <author> W J Cullyer and C H Pygott. </author> <title> Hardware Proofs Using LCF LSM and ELLA. </title> <type> Memorandum 3832, </type> <institution> Royal Signals and Radar Establishment, Malvern, </institution> <address> Worcestershire (United Kingdom), </address> <month> September </month> <year> 1985. </year>
Reference: [CP87] <author> W. J. Cullyer and C. H. Pygott. </author> <title> Application of Formal Methods to the VIPER Microprocessor. </title> <booktitle> IEE Proceedings, </booktitle> <volume> 134, Pt. E(3):133-141, </volume> <month> May </month> <year> 1987. </year>
Reference-contexts: Recent technical and marketing literature includes the following statements: . . . formal mathematical methods have been used both to specify the overall behaviour of the processor and to prove that the gate-level realisations conform to this top-level specification. <ref> [CP87] </ref> [Formal methods] were used in the development of VIPER, the first commercially available microprocessor with a formal specification and a proof that the chip conforms to it. [Dyk88] The purpose of this report is to examine the claim that the gate-level design of the VIPER microprocessor is mathematically verified. <p> The block-level specification is also flawed by the need for the co-specification in ELLA. RSRE felt that it would have been prohibitively complicated to attempt gate-level verification against the block model using LCF LSM <ref> [CP87] </ref>, 3 The specification does include a RESET state, but since external events are not modeled there is no way to enter that state. The Formal Specification and Partial Verification of VIPER Technical Report #46 11 and originally specified the block-level machine in ELLA.
Reference: [Cul] <author> W J Cullyer, </author> <title> Private Communication, </title> <month> April </month> <year> 1989. </year>
Reference-contexts: At the time RSRE scientists began the work they did not feel confident in extending the specification methodology past the simple state-transition technique which was employed <ref> [Cul] </ref>. We do not mean to suggest that these are trivial problems; the formalization of peripheral behavior is an active area of research in hardware verification.
Reference: [Cul85] <author> W. J. Cullyer. </author> <title> VIPER Microprocessor: Formal Specification. </title> <type> Report 85013, </type> <institution> Royal Signals and Radar Establishment, Malvern, </institution> <address> Worcestershire (United Kingdom), </address> <month> October </month> <year> 1985. </year>
Reference-contexts: It is also instructive to examine some of the deficiencies in the original LCF LSM specifications, not all of which are solved in their HOL counterparts. The VIPER Specification Level Language (s) Reference Top LCF LSM <ref> [Cul85] </ref> Major State LCF LSM [Cul86] Block LCF LSM, Drawing; ELLA [Pyg86] Implementation ELLA; HILO, FDL N/A Table 3.1: Levels in the VIPER Specification, in decreasing order of abstraction. 6 The Formal Specification and Partial Verification of VIPER Technical Report #46 7 3.1 The Top Level 3.1.1 Overview At the top <p> specification states that ". . . overflow on either addition or subtraction causes the VIPER processor to stop . . . " [Ker84], a statement about signed arithmetic, the formal specification never mentions signed numbers. 2 Thus the top-level specification leaves too 1 An unconvincing justification appears in the specification <ref> [Cul85] </ref>. At the block level (Section 3.3), addition is defined by truncating the 33-bit result of a 32-bit addition. 2 Signed integers are not a built-in type in LCF LSM.
Reference: [Cul86] <author> W J Cullyer. </author> <title> VIPER Correspondence Between the Specification and the "Major State Machine". </title> <type> Report 86004, </type> <institution> Royal Signals and Radar Establishment, Malvern, </institution> <address> Worcestershire (United Kingdom), </address> <month> January </month> <year> 1986. </year> <title> The Formal Specification and Partial Verification of VIPER Technical Report #46 24 </title>
Reference-contexts: It is also instructive to examine some of the deficiencies in the original LCF LSM specifications, not all of which are solved in their HOL counterparts. The VIPER Specification Level Language (s) Reference Top LCF LSM [Cul85] Major State LCF LSM <ref> [Cul86] </ref> Block LCF LSM, Drawing; ELLA [Pyg86] Implementation ELLA; HILO, FDL N/A Table 3.1: Levels in the VIPER Specification, in decreasing order of abstraction. 6 The Formal Specification and Partial Verification of VIPER Technical Report #46 7 3.1 The Top Level 3.1.1 Overview At the top level, VIPER was specified as
Reference: [Dyk88] <author> Digby A. Dyke. One-day seminars (advertisement). </author> <title> Safety Net, </title> <address> 1(1):10, April/May/June 1988. </address> <publisher> Published by Viper Technologies Ltd., </publisher> <address> PO Box 79, Worcester WR1 2PX, England. </address>
Reference-contexts: used both to specify the overall behaviour of the processor and to prove that the gate-level realisations conform to this top-level specification. [CP87] [Formal methods] were used in the development of VIPER, the first commercially available microprocessor with a formal specification and a proof that the chip conforms to it. <ref> [Dyk88] </ref> The purpose of this report is to examine the claim that the gate-level design of the VIPER microprocessor is mathematically verified. The sources for our study of VIPER included a number of technical documents from RSRE and Cambridge University.
Reference: [Fet88] <author> James H. </author> <title> Fetzer. Program verification: the very idea. </title> <journal> Communications of the ACM, </journal> <volume> 31(9) </volume> <pages> 1048-1063, </pages> <month> September </month> <year> 1988. </year>
Reference: [Gor81] <author> M. Gordon. </author> <title> LCF LSM. </title> <type> Technical Report 41, </type> <institution> University of Cam-bridge, Computer Laboratory, </institution> <year> 1981. </year>
Reference: [Gor83] <author> Mike Gordon. </author> <title> Proving a Computer Correct. </title> <type> Technical Report 42, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <year> 1983. </year>
Reference: [Gor87] <author> M. Gordon. </author> <title> HOL: A Proof Generating System for Higher-Order Logic. </title> <type> Technical Report 103, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <year> 1987. </year>
Reference-contexts: Partitioning the specification this way was inspired by Gordon's specification and verification of a simple 12-bit processor modeled in LCF LSM [Gor81,Gor83]. Table 3.1 only lists the specifications published by RSRE. For some of the proofs the LCF LSM specifications were recast into the derivative language HOL <ref> [Gor87] </ref> by consultants at Cambridge University. In the following Sections we focus on the original versions and treat the HOL translations along with the proofs in Chapter 4. The specification style used in the LCF LSM specifications is not significantly altered by translation to HOL. <p> Due to a change of plans (see Section 4.4) this proof is only of historical interest, and does not play any role in the formal correctness argument for VIPER. Cohn began by translating the LCF LSM specifications into the higher-order logic HOL <ref> [Gor87] </ref>. Since HOL was derived from LCF LSM, the translation of the top-level and major-state specification from LCF LSM into HOL was straightforward. The proof of equivalence also required Cohn to augment the original specifications in two respects.
Reference: [HP87] <author> M P Halbert and G P Pink. </author> <title> The Design of Fault Detecting and Fault-Tolerant Computer Systems Based on the Viper Microprocessor. </title> <type> Technical Report C2610, </type> <institution> Cambridge Consultants Limited, </institution> <month> June </month> <year> 1987. </year> <institution> Science Park, </institution> <address> Milton Road, Cambridge CB4 4DW, England. </address>
Reference: [Ker84] <author> J Kershaw. </author> <title> VIPER: A Microprocessor for Safety Critical Applications. </title> <type> Memorandum 3754, </type> <institution> Royal Signals and Radar Establishment, Malvern, </institution> <address> Worcestershire (United Kingdom), </address> <month> December </month> <year> 1984. </year>
Reference-contexts: Introduction VIPER (Verifiable Integrated Processor for Enhanced Reliability) is a 32-bit microprocessor architecture designed by the Royal Signals and Radar Establishment (RSRE) in Malvern, England <ref> [Ker84] </ref>. <p> It was believed that the formal specification and verification of a microprocessor would yield an embedded-systems platform whose operational characteristics were completely known. Some other goals of the VIPER project, besides those stated in the VIPER design documents <ref> [Ker84] </ref>, are listed below. Design Stability. Different revisions of supposedly identical processors have been found to behave differently even though these processors bear the same part number. These differences are often the result of iterating a design as the processor implementation technology matures. <p> The above list points out the great success MOD has achieved with the VIPER project. They have implemented a safety-conscious architecture, and developed dual-processor systems capability which should provide enhanced reliability. An informal, architectural-level specification for VIPER appears in <ref> [Ker84] </ref>. VIPER is a 32-bit machine with an accumulator, two index registers, a 20-bit program counter, and a 1-bit flag register. The processor supports word addressing of separate, 2 20 word I/O and memory spaces. <p> Whereas the informal specification states that ". . . overflow on either addition or subtraction causes the VIPER processor to stop . . . " <ref> [Ker84] </ref>, a statement about signed arithmetic, the formal specification never mentions signed numbers. 2 Thus the top-level specification leaves too 1 An unconvincing justification appears in the specification [Cul85].
Reference: [Moo88] <author> J Strother Moore. </author> <title> A Mechanically Verified Language Implementation. </title> <type> Technical Report 30, </type> <institution> Computational Logic, Inc., </institution> <month> September </month> <year> 1988. </year>
Reference: [MPT84] <author> J D Morrison, N E Peeling, and T L Thorp. Ella: </author> <booktitle> hardware description or specification? In Proceedings IEEE International Conference, </booktitle> <address> CAD-84, Santa Clara, </address> <month> November </month> <year> 1984. </year>
Reference-contexts: Each block has three equivalent specifications: RSRE's published LCF LSM version, the HOL translation of the LCF LSM used for formal proofs (Section 4.4), and an unpublished counterpart in the ELLA <ref> [MPT84] </ref> simulation language used for Intelligent Exhaustion simulation (Section 4.1). The block-level specification utilizes a register-transfer representation for sequential hardware. All of the registers are assumed to be activated by a common clock, and the block-level specification functions specify the behavior of the combinational logic.
Reference: [Pyg] <author> Clive Pygott, </author> <title> Private Communication, </title> <month> April </month> <year> 1989. </year>
Reference-contexts: The low-level verification of VIPER by Intelligent Exhaustion remains incomplete, however, for two important reasons. Most importantly, RSRE never proved that the input patterns used for IE simulation provided complete coverage of every possible case <ref> [Pyg] </ref>. The complete IE analysis of VIPER required the development and simulation of more than 6000 patterns [Pyg85]. There is no proof that these 6000 test patterns completely exercise the block-level specifications.
Reference: [Pyg85] <author> C H Pygott. </author> <title> Formal Proof of Correspondence Between the Specification of a Hardware Module and its Gate Level Implementation. </title> <type> Report 85002, </type> <institution> Royal Signals and Radar Establishment, Malvern, </institution> <address> Worcestershire (United Kingdom), </address> <month> November </month> <year> 1985. </year>
Reference-contexts: The remainder of this Section consists of an introduction to the IE tech 13 The Formal Specification and Partial Verification of VIPER Technical Report #46 14 VIPER Proof Efforts Levels Ref. Notes Block () Implementation <ref> [Pyg85] </ref> ELLA specifications were analyzed by Intelligent Exhaustion simulation. The reference is to the method; the analyses are not docu mented. Top () Major State [CP85,Cul86] A hand proof, later invalidated. The first reference is to the method, the second documents the proof at tempt. <p> These gate-level designs were automatically translated to ELLA for IE simulation. The IE simulations uncovered errors in the initial designs "that would have been virtually impossible to find by simulation" <ref> [Pyg85] </ref>. The low-level verification of VIPER by Intelligent Exhaustion remains incomplete, however, for two important reasons. Most importantly, RSRE never proved that the input patterns used for IE simulation provided complete coverage of every possible case [Pyg]. <p> Most importantly, RSRE never proved that the input patterns used for IE simulation provided complete coverage of every possible case [Pyg]. The complete IE analysis of VIPER required the development and simulation of more than 6000 patterns <ref> [Pyg85] </ref>. There is no proof that these 6000 test patterns completely exercise the block-level specifications. The Formal Specification and Partial Verification of VIPER Technical Report #46 16 There is also no formalized argument that the implementations of the VIPER ALU meet the block-level specification. <p> The LCF LSM version was created by hand-translating ELLA to LCF LSM. ELLA is not an LCF LSM simulator; a number of subtle differences between the two representations are documented in <ref> [Pyg85] </ref>. For example the ELLA specification employs data types not available in LCF LSM. There are also a number of ramifications of the presence of indeterminate states in ELLA with respect to interpreting LCF LSM specifications.
Reference: [Pyg86] <author> C H Pygott. </author> <title> VIPER: The Electronic Block Model. </title> <type> Report 86008, </type> <institution> Royal Signals and Radar Establishment, Malvern, </institution> <address> Worcestershire (United Kingdom), </address> <month> July </month> <year> 1986. </year>
Reference-contexts: It is also instructive to examine some of the deficiencies in the original LCF LSM specifications, not all of which are solved in their HOL counterparts. The VIPER Specification Level Language (s) Reference Top LCF LSM [Cul85] Major State LCF LSM [Cul86] Block LCF LSM, Drawing; ELLA <ref> [Pyg86] </ref> Implementation ELLA; HILO, FDL N/A Table 3.1: Levels in the VIPER Specification, in decreasing order of abstraction. 6 The Formal Specification and Partial Verification of VIPER Technical Report #46 7 3.1 The Top Level 3.1.1 Overview At the top level, VIPER was specified as a function in LCF LSM named
Reference: [Pyg87] <author> C H Pygott. </author> <title> Specification of the VIPER1A Micro-processor: </title> <note> Issue 2. Divisional Memo (CC2) 412-87, </note> <institution> Royal Signals and Radar Establishment, Malvern, </institution> <address> Worcestershire (United Kingdom), </address> <month> November </month> <year> 1987. </year> <title> The Formal Specification and Partial Verification of VIPER Technical Report #46 25 </title>
Reference: [Pyg88] <author> C H Pygott. NODEN HDL: </author> <title> An Engineering Approach to Hardware Verification. </title> <editor> In G. J. Milne, editor, </editor> <title> The Fusion of Hardware Design and Verification, </title> <publisher> Elsevier Science Publishers, </publisher> <year> 1988. </year>
Reference-contexts: RSRE also discovered cases where IE is too pessimistic, and would lead one to believe that correct circuits are incorrect <ref> [Pyg88] </ref>. 4.1.2 Application to VIPER RSRE implemented IE in the ELLA simulator, in part because the ELLA system had interfaces to the proprietary CAD systems used in the actual fabrication of VIPER.
Reference: [War87] <author> Warren A. Hunt, Jr. </author> <title> The Mechanical Verification of a Microprocessor Design. </title> <type> Technical Report CLI-6, </type> <institution> Computational Logic, Inc., </institution> <address> 1717 West Sixth Street, Suite 290, Austin, TX 78703, </address> <year> 1987. </year>
Reference-contexts: managing formal hardware verification projects, using the VIPER project as an example. 1 The Formal Specification and Partial Verification of VIPER Technical Report #46 2 Throughout the report we contrast the specification and verification approach used for VIPER with that used during the specification and verification of the FM8502 microprocessor <ref> [War87] </ref>. The Formal Specification and Partial Verification of VIPER Technical Report #46 3 VIPER. Chapter 2 The VIPER Microprocessor The VIPER project was launched after the British Ministry of Defence became increasingly concerned that computer hardware and software errors had caused and would continue to cause loss of life.
Reference: [You88] <author> William D. Young. </author> <title> A Verified Code Generator for a Subset of Gypsy. </title> <type> Technical Report 33, </type> <institution> Computational Logic, Inc., </institution> <year> 1988. </year> <type> Ph.D. Thesis, </type> <institution> University of Texas at Austin. </institution>
References-found: 26

