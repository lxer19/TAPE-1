URL: http://choices.cs.uiuc.edu/research/NSF.ps
Refering-URL: http://choices.cs.uiuc.edu/research/other.html
Root-URL: http://www.cs.uiuc.edu
Title: Customized System Software for Parallel Processing Project Proposal  
Author: Roy H. Campbell Nayeem Islam 
Date: September 10, 1993  
Affiliation: Department of Computer Science University of Illinois, Urbana-Champaign  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Sarita Adve and Mark Hill. </author> <title> "Weak Ordering an New Definition". </title> <booktitle> In Proceedings of the 16th Annual Symposium on Computer Architecture, </booktitle> <pages> pages 2-14, </pages> <year> 1989. </year>
Reference-contexts: These protocols may be invoked dynamically. A third aspect of the protocols involves each node invoking specific data consistency or recovery procedures. Similar techniques have been used for consistency protocols for distributed shared memory systems, which support shared memory on a network of computers <ref> [3, 1, 20] </ref>. For instance, Munin provides multiple consistency protocols which are selected by program annotations [14]. Support for application level scheduling has been designed and described by Anderson et al. [2] and by Mach researchers [4].
Reference: [2] <author> T. Anderson, Brian Bershad, Edward Lazowska, and Henry Levy. </author> <title> Scheduler Activations: Effective Kernel Support for the User Level Managment of Parallelism. </title> <journal> ACM Transactions on Computing Systems, </journal> <volume> 10(2) </volume> <pages> 53-79, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: For instance, Munin provides multiple consistency protocols which are selected by program annotations [14]. Support for application level scheduling has been designed and described by Anderson et al. <ref> [2] </ref> and by Mach researchers [4]. Hiranandani describes automatic generation of communications for programs [21]. 8 Results from Prior NSF research In the fall of 1988, the Department of Computer Science received an Institutional Infrastructure award, with principal investigators Roy H. Campbell and Daniel A. Reed, that totaled approximately $2:4M.
Reference: [3] <author> Brian Bershad and Matthew Zekauskas. Midway: </author> <title> Shared memory parallel programming with entry consistency for distributed memory multiprocessors. </title> <type> Technical Report CMU-CS-91-170, </type> <institution> Carnegie Mellon University, </institution> <month> September </month> <year> 1991. </year>
Reference-contexts: These protocols may be invoked dynamically. A third aspect of the protocols involves each node invoking specific data consistency or recovery procedures. Similar techniques have been used for consistency protocols for distributed shared memory systems, which support shared memory on a network of computers <ref> [3, 1, 20] </ref>. For instance, Munin provides multiple consistency protocols which are selected by program annotations [14]. Support for application level scheduling has been designed and described by Anderson et al. [2] and by Mach researchers [4].
Reference: [4] <author> David Black. </author> <title> Scheduling Support for Concurrency and Parallelism in the Mach Operating System. </title> <booktitle> COMPUTER, </booktitle> <pages> pages 35-43, </pages> <year> 1990. </year>
Reference-contexts: For instance, Munin provides multiple consistency protocols which are selected by program annotations [14]. Support for application level scheduling has been designed and described by Anderson et al. [2] and by Mach researchers <ref> [4] </ref>. Hiranandani describes automatic generation of communications for programs [21]. 8 Results from Prior NSF research In the fall of 1988, the Department of Computer Science received an Institutional Infrastructure award, with principal investigators Roy H. Campbell and Daniel A. Reed, that totaled approximately $2:4M.
Reference: [5] <author> S. R. Bourne. </author> <title> The UNIX System. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1983. </year>
Reference-contexts: Table 5 shows the list of optimizations for the SPARCStations and the Intel iPSC/2. Performance studies of these list of optimizations appear in [28, 25], copies of these papers are appended. 7 Related Work Most operating systems such as Mach [45, 55], UNIX <ref> [5] </ref>, Chorus [47], and Amoeba [40] describe interface and operating system services that are tuned for particular semantics. Customization of an operating system to enhance the performance of an application has not been addressed by any of these operating systems.
Reference: [6] <author> R. H. Campbell, J. J. Hine, and V. F. Russo. </author> <title> "Choices for Mission Critical Computing". </title> <editor> In Ashok Agrawala, Karen Gordon, and Phillip Hwang, editors, </editor> <booktitle> Studies in Computer and Communication Systems , pages 11-20. </booktitle> <publisher> IOS Press, </publisher> <year> 1992. </year>
Reference-contexts: Generic components are customized through object-oriented inheritance and specialization to match the specific concurrency requirements of applications. Choices has, as its kernel, a dynamic collection of objects <ref> [8, 10, 33, 6] </ref>. System resources, mechanisms, and policies are represented as objects that belong to a class hierarchy [51]. The object-oriented application interface has a name server that implements inheritance and polymorphism and provides access to system services, local and remote servers, and persistent objects.
Reference: [7] <author> R. H. Campbell, G. Johnston, K. Kenny, G. Murakami, and V. Russo. </author> <title> "Choices (Class Hierarchical Open Interface for Custom Embedded Systems)". </title> <journal> Operating Systems Review, </journal> <volume> 21(3) </volume> <pages> 9-17, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: version for parallel systems, notably the shared memory Encore Multimax and Sun SPARC multiprocessors, and the distributed memory Intel iPSC/2 hypercube. 8.1 Operating System Infrastructure To accommodate diverse parallel applications, Choices supports a large set of components that may be combined to support different models of parallel and concurrent programming <ref> [10, 28, 25, 26, 7, 12] </ref>. Generic components are customized through object-oriented inheritance and specialization to match the specific concurrency requirements of applications. Choices has, as its kernel, a dynamic collection of objects [8, 10, 33, 6].
Reference: [8] <author> Roy Campbell, Nayeem Islam, Peter Madany, and David Raila. </author> <title> Designing and Implementing Choices:an Object-Oriented System in C++. </title> <journal> Communications of the ACM, </journal> <month> September </month> <year> 1993. </year>
Reference-contexts: Generic components are customized through object-oriented inheritance and specialization to match the specific concurrency requirements of applications. Choices has, as its kernel, a dynamic collection of objects <ref> [8, 10, 33, 6] </ref>. System resources, mechanisms, and policies are represented as objects that belong to a class hierarchy [51]. The object-oriented application interface has a name server that implements inheritance and polymorphism and provides access to system services, local and remote servers, and persistent objects.
Reference: [9] <author> Roy H. Campbell and Nayeem Islam. </author> <title> "A Technique for Documenting the Framework of an Object-Oriented System". </title> <booktitle> In Proceedings Second International Workshop on Object-Orientation in Operating Systems, </booktitle> <pages> pages 288-300, </pages> <address> Paris, France, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: While supporting operating system layers, frameworks also encourage design and code reuse [29, 10] and the consistent imposition of design constraints on all software, independent of the level at which it may be used <ref> [12, 9] </ref>. The framework for the system provides generalized components and constraints to which the specialized subframe-works must conform. Conformance is enforced in the subframeworks by reusing the classes and constraints defined within the framework. The subframeworks introduce additional components and constraints and subclass components of the framework.
Reference: [10] <author> Roy H. Campbell and Nayeem Islam. </author> " <title> Choices: A Parallel Object-Oriented Operating System". </title> <editor> In Gul Agha, Peter Wegner, and Akinori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: version for parallel systems, notably the shared memory Encore Multimax and Sun SPARC multiprocessors, and the distributed memory Intel iPSC/2 hypercube. 8.1 Operating System Infrastructure To accommodate diverse parallel applications, Choices supports a large set of components that may be combined to support different models of parallel and concurrent programming <ref> [10, 28, 25, 26, 7, 12] </ref>. Generic components are customized through object-oriented inheritance and specialization to match the specific concurrency requirements of applications. Choices has, as its kernel, a dynamic collection of objects [8, 10, 33, 6]. <p> Generic components are customized through object-oriented inheritance and specialization to match the specific concurrency requirements of applications. Choices has, as its kernel, a dynamic collection of objects <ref> [8, 10, 33, 6] </ref>. System resources, mechanisms, and policies are represented as objects that belong to a class hierarchy [51]. The object-oriented application interface has a name server that implements inheritance and polymorphism and provides access to system services, local and remote servers, and persistent objects. <p> In the design of Choices, the concept of a framework subsumes the more conventional organization of an operating system into layers [51, 11]. While supporting operating system layers, frameworks also encourage design and code reuse <ref> [29, 10] </ref> and the consistent imposition of design constraints on all software, independent of the level at which it may be used [12, 9]. The framework for the system provides generalized components and constraints to which the specialized subframe-works must conform. <p> The subframeworks introduce additional components and constraints and subclass components of the framework. We believe this way of building systems greatly simplifies experiments involving the comparison of many different policies [12]. Choices has frameworks for parallel processing <ref> [27, 12, 10] </ref>, virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35]. <p> The subframeworks introduce additional components and constraints and subclass components of the framework. We believe this way of building systems greatly simplifies experiments involving the comparison of many different policies [12]. Choices has frameworks for parallel processing [27, 12, 10], virtual memory <ref> [49, 50, 10] </ref>, distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35]. <p> Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors <ref> [51, 10, 12] </ref>, device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35]. The system runs on shared memory multiprocessor Encore Multimaxes [51], MC68030s [31], Intel 386 and 486 personal computers [32], SUN SPARCstation I and II architectures [44] as well as the Tapestry hypercubes. <p> The systems that we have built could not only be optimized using object-oriented customization techniques, but the systems were also of comparable performance to commercially avail able, optimized systems written in C [51, 53, 34]. * A classification of operating system algorithms, data structures, and resource management schemes <ref> [51, 34, 10, 12] </ref>. * An approach to reusing and customizing operating system designs based on the notion of a framework [11, 10, 12]. * A detailed comparison of many different implementations of the hypercube message passing system on a shared memory multiprocessor, indicating that the performance of applications depends specifically <p> also of comparable performance to commercially avail able, optimized systems written in C [51, 53, 34]. * A classification of operating system algorithms, data structures, and resource management schemes [51, 34, 10, 12]. * An approach to reusing and customizing operating system designs based on the notion of a framework <ref> [11, 10, 12] </ref>. * A detailed comparison of many different implementations of the hypercube message passing system on a shared memory multiprocessor, indicating that the performance of applications depends specifically on the implementation of the message passing system.
Reference: [11] <author> Roy H. Campbell, Nayeem Islam, Ralph Johnson, Panos Kougiouris, and Peter Madany. </author> <title> Choices, Frameworks and Refinement. </title> <editor> In Luis-Felipe Cabrera and Vincent Russo, and Marc Shapiro, editor, </editor> <booktitle> Object-Orientation in Operating Systems, </booktitle> <pages> pages 9-15, </pages> <address> Palo Alto, CA, October 1991. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The object-oriented application interface has a name server that implements inheritance and polymorphism and provides access to system services, local and remote servers, and persistent objects. In the design of Choices, the concept of a framework subsumes the more conventional organization of an operating system into layers <ref> [51, 11] </ref>. While supporting operating system layers, frameworks also encourage design and code reuse [29, 10] and the consistent imposition of design constraints on all software, independent of the level at which it may be used [12, 9]. <p> also of comparable performance to commercially avail able, optimized systems written in C [51, 53, 34]. * A classification of operating system algorithms, data structures, and resource management schemes [51, 34, 10, 12]. * An approach to reusing and customizing operating system designs based on the notion of a framework <ref> [11, 10, 12] </ref>. * A detailed comparison of many different implementations of the hypercube message passing system on a shared memory multiprocessor, indicating that the performance of applications depends specifically on the implementation of the message passing system.
Reference: [12] <author> Roy H. Campbell, Nayeem Islam, and Peter Madany. </author> <title> Choices, Frameworks and Refinement. </title> <journal> Computing Systems, </journal> <volume> 5(3) </volume> <pages> 217-257, </pages> <year> 1992. </year>
Reference-contexts: The Choices operating system, built in the Tapestry Laboratory, demonstrates the feasibility of customizing an operating system for an application. It is an object-oriented operating system in which design frameworks <ref> [12] </ref> support alternative implementations of key services. Each framework separates implementation details from the design of a subsystem which is expressed as a set of abstract classes and their interrelationships. <p> version for parallel systems, notably the shared memory Encore Multimax and Sun SPARC multiprocessors, and the distributed memory Intel iPSC/2 hypercube. 8.1 Operating System Infrastructure To accommodate diverse parallel applications, Choices supports a large set of components that may be combined to support different models of parallel and concurrent programming <ref> [10, 28, 25, 26, 7, 12] </ref>. Generic components are customized through object-oriented inheritance and specialization to match the specific concurrency requirements of applications. Choices has, as its kernel, a dynamic collection of objects [8, 10, 33, 6]. <p> While supporting operating system layers, frameworks also encourage design and code reuse [29, 10] and the consistent imposition of design constraints on all software, independent of the level at which it may be used <ref> [12, 9] </ref>. The framework for the system provides generalized components and constraints to which the specialized subframe-works must conform. Conformance is enforced in the subframeworks by reusing the classes and constraints defined within the framework. The subframeworks introduce additional components and constraints and subclass components of the framework. <p> Conformance is enforced in the subframeworks by reusing the classes and constraints defined within the framework. The subframeworks introduce additional components and constraints and subclass components of the framework. We believe this way of building systems greatly simplifies experiments involving the comparison of many different policies <ref> [12] </ref>. <p> The subframeworks introduce additional components and constraints and subclass components of the framework. We believe this way of building systems greatly simplifies experiments involving the comparison of many different policies [12]. Choices has frameworks for parallel processing <ref> [27, 12, 10] </ref>, virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35]. <p> We believe this way of building systems greatly simplifies experiments involving the comparison of many different policies [12]. Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems <ref> [27, 25, 12] </ref>, remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35]. <p> Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors <ref> [51, 10, 12] </ref>, device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35]. The system runs on shared memory multiprocessor Encore Multimaxes [51], MC68030s [31], Intel 386 and 486 personal computers [32], SUN SPARCstation I and II architectures [44] as well as the Tapestry hypercubes. <p> The results of the comparison showed many advantages for application-oriented message passing systems that are customized to sup 11 port specific applications on specific hardware. A classification of message passing schemes has been published <ref> [12] </ref>. Early results from distributed shared virtual memory experiments convinced us to redesign the virtual memory and distributed shared virtual memory systems [54] to permit parallelism in the paging system. <p> The systems that we have built could not only be optimized using object-oriented customization techniques, but the systems were also of comparable performance to commercially avail able, optimized systems written in C [51, 53, 34]. * A classification of operating system algorithms, data structures, and resource management schemes <ref> [51, 34, 10, 12] </ref>. * An approach to reusing and customizing operating system designs based on the notion of a framework [11, 10, 12]. * A detailed comparison of many different implementations of the hypercube message passing system on a shared memory multiprocessor, indicating that the performance of applications depends specifically <p> also of comparable performance to commercially avail able, optimized systems written in C [51, 53, 34]. * A classification of operating system algorithms, data structures, and resource management schemes [51, 34, 10, 12]. * An approach to reusing and customizing operating system designs based on the notion of a framework <ref> [11, 10, 12] </ref>. * A detailed comparison of many different implementations of the hypercube message passing system on a shared memory multiprocessor, indicating that the performance of applications depends specifically on the implementation of the message passing system.
Reference: [13] <author> Roy H. Campbell and Peter W. Madany. </author> <title> Considerations of Persistence and Security in Choices, an Object-Oriented Operating System. </title> <editor> In J. Rosenberg and J. Leslie Keedy, editors, </editor> <booktitle> Security and Persistence, Workshops in Computing, </booktitle> <pages> pages 289-300. </pages> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1990. </year> <booktitle> Proceedings of the International Workshop on Computer Architectures to Support Security and Persistence of Information, </booktitle> <institution> Bremen, Federal Republic of Germany, </institution> <month> May </month> <year> 1990. </year> <month> 16 </month>
Reference-contexts: parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects <ref> [13, 35] </ref>. The system runs on shared memory multiprocessor Encore Multimaxes [51], MC68030s [31], Intel 386 and 486 personal computers [32], SUN SPARCstation I and II architectures [44] as well as the Tapestry hypercubes.
Reference: [14] <author> John B. Carter, John K. Bennett, and Willy Zwaenepoel. </author> <title> Implementation and performance of Munin. </title> <booktitle> Proceedings of the 13th ACM Symposium on Operating Systems Principles, </booktitle> <volume> 25(5) </volume> <pages> 152-164, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Similar techniques have been used for consistency protocols for distributed shared memory systems, which support shared memory on a network of computers [3, 1, 20]. For instance, Munin provides multiple consistency protocols which are selected by program annotations <ref> [14] </ref>. Support for application level scheduling has been designed and described by Anderson et al. [2] and by Mach researchers [4].
Reference: [15] <author> David Cheriton. </author> <title> Problem Oriented Shared Memory: A Decentralised Approach to Distributed System Design. </title> <booktitle> 6th International Conference on Distributed Computing Systems, </booktitle> <year> 1986. </year>
Reference-contexts: Customization of an operating system to enhance the performance of an application has not been addressed by any of these operating systems. Reed [46] describes a variety of issues and optimizations for message passing systems on different hardware architectures. Cheriton <ref> [15] </ref> describes the need for problem oriented shared memory. He discusses two primitives that are essential for memory to implement: fetch and store. Applications customize fetch and store to implement particular problem-oriented semantics.
Reference: [16] <author> David Cheriton. </author> <title> The V Distributed System. </title> <journal> Communications of the ACM, </journal> <pages> pages 314-334, </pages> <year> 1988. </year>
Reference-contexts: Although Cheriton describes how problem oriented systems may be designed he does not consider the design of problem oriented message passing. The fixed message passing protocol of the V <ref> [16] </ref> system is used as the base for problem-oriented systems. The Locus [41] system also uses problem-oriented protocols to solve the problem of recovering from network partitions and the related issues of data consistency. The reconfiguration protocols are divided into two sections: partition and merge.
Reference: [17] <author> Michael W. Condry, Swee Boon Lim, and Lup Yuen Lee. </author> <title> "The Object-Oriented Advantage in Prototyping a Remote File System". </title> <booktitle> In Proceedings Second International Workshop on Object-Orientation in Operating Systems, </booktitle> <pages> pages 190-199, </pages> <address> Paris, France, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: Other experiments examined customizations of network file servers and distributed virtual memory to improve performance <ref> [17, 54] </ref>. Our goal is to solve the following problems: 1. What is a representative set of possible operating system customizations for optimizing the performance of applications? 2. What is the best way to organize a library of operating systems optimizations to facilitate choosing possible optimizations. 3. <p> Early results from distributed shared virtual memory experiments convinced us to redesign the virtual memory and distributed shared virtual memory systems [54] to permit parallelism in the paging system. Early results from implementing a flexible caching strategy for distributed file systems have encouraged us to explore these issues further <ref> [17] </ref>. Using Pablo, Reed has been examining traces of parallel applications on Choices . The distributed subsystems of Choices, including the message passing systems, remote procedure calls, distributed file system, and distributed shared virtual memory, have been run stand-alone on networks of Encore Multimaxes and networks of SUN SPARCstation IIs.
Reference: [18] <author> Thomas Cormen, Charles Leiserson, and Ronald Rivest. </author> <title> Alogrithms. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1990. </year>
Reference-contexts: Our approach has similarities with other computer science research except that we examine complex systems issues. For example, classification of the performance of algorithms is an established research program in computational complexity <ref> [18] </ref>. However, the application of computational complexity to operating system performance is difficult because of the many interactions between the system components, the hardware, and the applications. Our research program therefore combines practical experimentation and measurement with analysis. <p> Our research program therefore combines practical experimentation and measurement with analysis. It is often easy to specify the best case performance of an algorithm. Again, for example, comparison sorts have a best case running time of O (nlogn) <ref> [18] </ref>, although naive sort implementations may have a best case running time of n 2 . Which sorts to use can be viewed as decision trees. A sort algorithm may have specializations that perform better than O (nlogn) if the input data conforms to a particular pattern.
Reference: [19] <author> Amitabh Dave, Mohlalefi Sefika, and Roy H. Campbell. </author> <title> "Proxies, Application Interfaces, </title> <booktitle> and Distributed Systems". In Proceedings Second International Workshop on Object-Orientation in Operating Systems, </booktitle> <pages> pages 212-220, </pages> <address> Paris, France, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: We believe this way of building systems greatly simplifies experiments involving the comparison of many different policies [12]. Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls <ref> [19] </ref>, TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35].
Reference: [20] <author> Kourosh Gharachorloo, Daniel Lenoski, James Laudon, Phillip Gibbons, Anoop Gupta, and John Hennessy. </author> <title> Memory consistency and event ordering in scalable shared-memory multiprocessors. </title> <booktitle> Proc. of the 17th Annual International Symp. on Comp. Architecture, </booktitle> <volume> 18(2) </volume> <pages> 15-26, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: These protocols may be invoked dynamically. A third aspect of the protocols involves each node invoking specific data consistency or recovery procedures. Similar techniques have been used for consistency protocols for distributed shared memory systems, which support shared memory on a network of computers <ref> [3, 1, 20] </ref>. For instance, Munin provides multiple consistency protocols which are selected by program annotations [14]. Support for application level scheduling has been designed and described by Anderson et al. [2] and by Mach researchers [4].
Reference: [21] <author> S. Hiranandani, Ken Kennedy, and Chau-Wen Tseng. </author> <title> Compiler Support for Machine-Independent Parallel Programming in Fortran D. </title> <publisher> Elsevier, </publisher> <address> Amsterdam, </address> <year> 1991. </year>
Reference-contexts: For instance, Munin provides multiple consistency protocols which are selected by program annotations [14]. Support for application level scheduling has been designed and described by Anderson et al. [2] and by Mach researchers [4]. Hiranandani describes automatic generation of communications for programs <ref> [21] </ref>. 8 Results from Prior NSF research In the fall of 1988, the Department of Computer Science received an Institutional Infrastructure award, with principal investigators Roy H. Campbell and Daniel A. Reed, that totaled approximately $2:4M.
Reference: [22] <author> Nayeem Islam and Roy Campbell. </author> <title> Design Considerations for Shared Memory Multiprocessor Message Systems. </title> <booktitle> In Proceedings of the Symposium on Experiences with Distributed and Multiprocessor Systems, </booktitle> <pages> pages 149-171, </pages> <address> Newport Beach, California, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: The Choices operating system, which is described briefly in the Section 6 of this proposal, has a customizable message passing system that has been used in a number of performance experiments <ref> [24, 22, 25] </ref>. First we discuss organizing the message passing system and its optimizations as a class hierarchy in which performance characteristics are inherited. Next we examine attributes, characteristics, and synthetic benchmarks for the system. Then we demonstrate how to choose an appropriate set of optimizations for an FFT application.
Reference: [23] <author> Nayeem Islam and Roy Campbell. </author> <title> "Uniform Co-Scheduling using object-oriented design techniques". </title> <booktitle> In International Conference on Decentralized and Distributed Systems, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: However, from the point of view of improving the execution time of individual programs spinlocks are the best choice particularly if gang scheduling is available <ref> [23] </ref> 9 access network devices from user space most of the code resides in the kernel requiring the use of the KernelMessageSystem. Table 5 shows the list of optimizations for the SPARCStations and the Intel iPSC/2.
Reference: [24] <author> Nayeem Islam and Roy H. Campbell. </author> <title> "Performance of Message based Applications on an Object-Oriented Operating System". </title> <type> Technical Report UIUCDCS-R-91-1675, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, Urbana, Illinois, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: The Choices operating system, which is described briefly in the Section 6 of this proposal, has a customizable message passing system that has been used in a number of performance experiments <ref> [24, 22, 25] </ref>. First we discuss organizing the message passing system and its optimizations as a class hierarchy in which performance characteristics are inherited. Next we examine attributes, characteristics, and synthetic benchmarks for the system. Then we demonstrate how to choose an appropriate set of optimizations for an FFT application.
Reference: [25] <author> Nayeem Islam and Roy H. Campbell. </author> <title> "Design Considerations for Shared Memory Multiprocessor Message Systems". </title> <journal> In IEEE Transactions on Parallel and Distributed Systems, </journal> <month> November </month> <year> 1992. </year>
Reference-contexts: Experiments demonstrated customizations of the message passing, synchronization, and process management systems that enhanced the performance of hypercube (i. e., distributed memory) applications running on a shared memory machine <ref> [25] </ref> and a network of SPARCstations. Other experiments examined customizations of network file servers and distributed virtual memory to improve performance [17, 54]. Our goal is to solve the following problems: 1. What is a representative set of possible operating system customizations for optimizing the performance of applications? 2. <p> The Choices operating system, which is described briefly in the Section 6 of this proposal, has a customizable message passing system that has been used in a number of performance experiments <ref> [24, 22, 25] </ref>. First we discuss organizing the message passing system and its optimizations as a class hierarchy in which performance characteristics are inherited. Next we examine attributes, characteristics, and synthetic benchmarks for the system. Then we demonstrate how to choose an appropriate set of optimizations for an FFT application. <p> These implementations have several characteristics including latency and cache interference and invalidation. The synthetic Ring benchmark distinguishes between the latency characteristic of these three different implementations of DataTransfer . Using the synthetic Ring benchmark alone to predict the appropriate optimizations for an FFT application is inadequate <ref> [25] </ref> because the FFT application also has an attribute "cache invalidation", caused by the symmetry with which it accesses data. This attribute corresponds to performance loss caused by cache line invalidation in accessing data. We constructed a synthetic Invalidation benchmark to distinguish between the characteristics of the three DataTransfer schemes. <p> The appropriate optimizations for an application depend on the characteristics of the operating system subsystems that are sensitive to the values of the application attributes. Similar tables and graphs may be generated for the synthetic Invalidation, Context switch and Type benchmarks. These benchmarks appear in <ref> [25] </ref>. 4.3 Optimizing an FFT Application To optimize the message passing system for a particular application, we must measure the application's attributes and relate these values to the characteristics of the message passing system optimizations. <p> The FFT does not provide a clear cut example of such an interaction. When it occurs, however, then our approach would require us to devise a benchmark that measures the optimizations of a framework of classes. Further experimental results may be found in <ref> [25] </ref>. 5 Example In this section, we discuss the application of our methodology to several applications. <p> Table 5 shows the list of optimizations for the SPARCStations and the Intel iPSC/2. Performance studies of these list of optimizations appear in <ref> [28, 25] </ref>, copies of these papers are appended. 7 Related Work Most operating systems such as Mach [45, 55], UNIX [5], Chorus [47], and Amoeba [40] describe interface and operating system services that are tuned for particular semantics. <p> version for parallel systems, notably the shared memory Encore Multimax and Sun SPARC multiprocessors, and the distributed memory Intel iPSC/2 hypercube. 8.1 Operating System Infrastructure To accommodate diverse parallel applications, Choices supports a large set of components that may be combined to support different models of parallel and concurrent programming <ref> [10, 28, 25, 26, 7, 12] </ref>. Generic components are customized through object-oriented inheritance and specialization to match the specific concurrency requirements of applications. Choices has, as its kernel, a dynamic collection of objects [8, 10, 33, 6]. <p> We believe this way of building systems greatly simplifies experiments involving the comparison of many different policies [12]. Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems <ref> [27, 25, 12] </ref>, remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35]. <p> Most aspects of the system are available for inspection during debugging including application interaction with the operating system, paging, the various file systems and networking. Operating System Experiments and Impact The performance of Choices shows minimal overhead as a consequence of being written as an object-oriented operating system <ref> [53, 51, 25] </ref>. The problems of using C++ and our approach to solving these problems are discussed in [36]. A performance comparison of a large number of different message passing implementations on a shared memory Encore Multimax has been reported [25]. <p> The problems of using C++ and our approach to solving these problems are discussed in [36]. A performance comparison of a large number of different message passing implementations on a shared memory Encore Multimax has been reported <ref> [25] </ref>. The results of the comparison showed many advantages for application-oriented message passing systems that are customized to sup 11 port specific applications on specific hardware. A classification of message passing schemes has been published [12]. <p> In particular, 12 our results showed that no one implementation of a message passing system improved the performance of all of the applications we examined. Our studies also showed that the best message passing system for a particular application can depend on the size of its data set <ref> [25] </ref>. 9 Plans In the previous sections, we propose solving problems in performance by using application-oriented operating system customizations. This section discusses the particular research involved in the program.
Reference: [26] <author> Nayeem Islam and Roy H. Campbell. </author> <title> Design Considerations for Shared Memory Multiprocessor Message Systems. </title> <booktitle> In Proceedings of the Symposium on Experiences with Distributed and Multiprocessor Systems, </booktitle> <pages> pages 149-171, </pages> <address> Newport Beach, California, March 1992. </address> <publisher> Usenix. </publisher>
Reference-contexts: version for parallel systems, notably the shared memory Encore Multimax and Sun SPARC multiprocessors, and the distributed memory Intel iPSC/2 hypercube. 8.1 Operating System Infrastructure To accommodate diverse parallel applications, Choices supports a large set of components that may be combined to support different models of parallel and concurrent programming <ref> [10, 28, 25, 26, 7, 12] </ref>. Generic components are customized through object-oriented inheritance and specialization to match the specific concurrency requirements of applications. Choices has, as its kernel, a dynamic collection of objects [8, 10, 33, 6].
Reference: [27] <author> Nayeem Islam and Roy H. Campbell. </author> <title> "Design Considerations for Shared Memory Multiprocessor Message Systems"(judged by committee to be one of two best papers). In Symposium on Experiences with Distributed and Multiprocessor Systems, </title> <address> Newport Beach, California, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: The subframeworks introduce additional components and constraints and subclass components of the framework. We believe this way of building systems greatly simplifies experiments involving the comparison of many different policies [12]. Choices has frameworks for parallel processing <ref> [27, 12, 10] </ref>, virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35]. <p> We believe this way of building systems greatly simplifies experiments involving the comparison of many different policies [12]. Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems <ref> [27, 25, 12] </ref>, remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35]. <p> Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers <ref> [27] </ref>, file systems [34, 38, 37] and persistent objects [13, 35]. The system runs on shared memory multiprocessor Encore Multimaxes [51], MC68030s [31], Intel 386 and 486 personal computers [32], SUN SPARCstation I and II architectures [44] as well as the Tapestry hypercubes.
Reference: [28] <author> Nayeem Islam, Robert E. McGrath, and Roy Campbell. </author> <title> "Parallel Distributed Application Per--formance and Message Passing: A case study". </title> <booktitle> In Symposium on Experienves with Distributed and Multiprocessor Systems (SEDMS IV), </booktitle> <address> San Diego, California, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: Table 5 shows the list of optimizations for the SPARCStations and the Intel iPSC/2. Performance studies of these list of optimizations appear in <ref> [28, 25] </ref>, copies of these papers are appended. 7 Related Work Most operating systems such as Mach [45, 55], UNIX [5], Chorus [47], and Amoeba [40] describe interface and operating system services that are tuned for particular semantics. <p> version for parallel systems, notably the shared memory Encore Multimax and Sun SPARC multiprocessors, and the distributed memory Intel iPSC/2 hypercube. 8.1 Operating System Infrastructure To accommodate diverse parallel applications, Choices supports a large set of components that may be combined to support different models of parallel and concurrent programming <ref> [10, 28, 25, 26, 7, 12] </ref>. Generic components are customized through object-oriented inheritance and specialization to match the specific concurrency requirements of applications. Choices has, as its kernel, a dynamic collection of objects [8, 10, 33, 6].
Reference: [29] <author> Ralph E. Johnson and Vincent F. Russo. </author> <title> Reusing object-oriented design. </title> <type> Technical Report UIUCDCS-R-91-1696, </type> <institution> University of Illinois, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: In the design of Choices, the concept of a framework subsumes the more conventional organization of an operating system into layers [51, 11]. While supporting operating system layers, frameworks also encourage design and code reuse <ref> [29, 10] </ref> and the consistent imposition of design constraints on all software, independent of the level at which it may be used [12, 9]. The framework for the system provides generalized components and constraints to which the specialized subframe-works must conform.
Reference: [30] <author> G. M. Johnston and R. H. Campbell. </author> <title> "An Object-Oriented Implementation of Distributed Virtual Memory". </title> <booktitle> In Workshop on Experiences with Building Distributed and Multiprocessor Systems, </booktitle> <pages> pages 39-57. </pages> <publisher> Usenix, </publisher> <year> 1989. </year>
Reference-contexts: The subframeworks introduce additional components and constraints and subclass components of the framework. We believe this way of building systems greatly simplifies experiments involving the comparison of many different policies [12]. Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory <ref> [30, 54] </ref>, message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35].
Reference: [31] <author> Panos Kougiouris. </author> <title> A Device Management Framework for an Object-oriented Operating System. </title> <type> Technical report, </type> <institution> The University of Illinois at Urbana-Champaign, </institution> <month> May </month> <year> 1991. </year>
Reference-contexts: Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management <ref> [31] </ref>, schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35]. The system runs on shared memory multiprocessor Encore Multimaxes [51], MC68030s [31], Intel 386 and 486 personal computers [32], SUN SPARCstation I and II architectures [44] as well as the Tapestry hypercubes. <p> memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management <ref> [31] </ref>, schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35]. The system runs on shared memory multiprocessor Encore Multimaxes [51], MC68030s [31], Intel 386 and 486 personal computers [32], SUN SPARCstation I and II architectures [44] as well as the Tapestry hypercubes. To simplify debugging, Choices also runs in a virtual operating system mode on top of SUN-OS and MS/DOS.
Reference: [32] <author> Lup Lee. </author> <title> PC-Choices Object-oriented Operating System. </title> <type> Technical report, </type> <institution> The University of Illinois at Urbana-Champaign, </institution> <month> Aug </month> <year> 1992. </year>
Reference-contexts: The system runs on shared memory multiprocessor Encore Multimaxes [51], MC68030s [31], Intel 386 and 486 personal computers <ref> [32] </ref>, SUN SPARCstation I and II architectures [44] as well as the Tapestry hypercubes. To simplify debugging, Choices also runs in a virtual operating system mode on top of SUN-OS and MS/DOS.
Reference: [33] <author> Peter Madany, Nayeem Islam, Panayotis Kougiouris, and Roy H. Campbell. </author> <title> "Practical Examples of Reification and Reflection in C++". </title> <booktitle> In International Workshop on Reflection and MetaLevel Architecture, </booktitle> <pages> pages 76-82, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: Generic components are customized through object-oriented inheritance and specialization to match the specific concurrency requirements of applications. Choices has, as its kernel, a dynamic collection of objects <ref> [8, 10, 33, 6] </ref>. System resources, mechanisms, and policies are represented as objects that belong to a class hierarchy [51]. The object-oriented application interface has a name server that implements inheritance and polymorphism and provides access to system services, local and remote servers, and persistent objects.
Reference: [34] <author> Peter W. Madany. </author> <title> An Object-oriented Framework for File Systems. </title> <type> Technical report, </type> <institution> University of Illinois, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems <ref> [34, 38, 37] </ref> and persistent objects [13, 35]. The system runs on shared memory multiprocessor Encore Multimaxes [51], MC68030s [31], Intel 386 and 486 personal computers [32], SUN SPARCstation I and II architectures [44] as well as the Tapestry hypercubes. <p> The systems that we have built could not only be optimized using object-oriented customization techniques, but the systems were also of comparable performance to commercially avail able, optimized systems written in C <ref> [51, 53, 34] </ref>. * A classification of operating system algorithms, data structures, and resource management schemes [51, 34, 10, 12]. * An approach to reusing and customizing operating system designs based on the notion of a framework [11, 10, 12]. * A detailed comparison of many different implementations of the hypercube <p> The systems that we have built could not only be optimized using object-oriented customization techniques, but the systems were also of comparable performance to commercially avail able, optimized systems written in C [51, 53, 34]. * A classification of operating system algorithms, data structures, and resource management schemes <ref> [51, 34, 10, 12] </ref>. * An approach to reusing and customizing operating system designs based on the notion of a framework [11, 10, 12]. * A detailed comparison of many different implementations of the hypercube message passing system on a shared memory multiprocessor, indicating that the performance of applications depends specifically
Reference: [35] <author> Peter W. Madany and Roy H. Campbell. </author> <title> Organizing and Typing of Persistent Objects within an Object-Oriented Framework. </title> <booktitle> In Proceedings of the 25th Hawaii International Conference on System Sciences, </booktitle> <address> Kauai, Hawaii, </address> <month> January </month> <year> 1992. </year>
Reference-contexts: parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects <ref> [13, 35] </ref>. The system runs on shared memory multiprocessor Encore Multimaxes [51], MC68030s [31], Intel 386 and 486 personal computers [32], SUN SPARCstation I and II architectures [44] as well as the Tapestry hypercubes.
Reference: [36] <author> Peter W. Madany, Roy H. Campbell, and Panos Kougiouris. </author> <title> Experiences Building an Object-Oriented System in C++. </title> <editor> In Jean Bezivin and Bertrand Meyer, editor, </editor> <booktitle> Technology of Object-Oriented Languages and Systems Conference, </booktitle> <pages> pages 35-49. </pages> <publisher> Prentice Hall, </publisher> <address> Paris, France, </address> <month> March </month> <year> 1991. </year>
Reference-contexts: Operating System Experiments and Impact The performance of Choices shows minimal overhead as a consequence of being written as an object-oriented operating system [53, 51, 25]. The problems of using C++ and our approach to solving these problems are discussed in <ref> [36] </ref>. A performance comparison of a large number of different message passing implementations on a shared memory Encore Multimax has been reported [25]. The results of the comparison showed many advantages for application-oriented message passing systems that are customized to sup 11 port specific applications on specific hardware.
Reference: [37] <author> Peter W. Madany, Roy H. Campbell, Vincent F. Russo, and Douglas E. Leyens. </author> <title> A Class Hierarchy for Building Stream-Oriented File Systems. </title> <editor> In Stephen Cook, editor, </editor> <booktitle> Proceedings of the 1989 European Conference on Object-Oriented Programming, </booktitle> <pages> pages 311-328, </pages> <address> Nottingham, UK, July 1989. </address> <publisher> Cambridge University Press. </publisher>
Reference-contexts: Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems <ref> [34, 38, 37] </ref> and persistent objects [13, 35]. The system runs on shared memory multiprocessor Encore Multimaxes [51], MC68030s [31], Intel 386 and 486 personal computers [32], SUN SPARCstation I and II architectures [44] as well as the Tapestry hypercubes.
Reference: [38] <author> Peter W. Madany, Douglas E. Leyens, Vincent F. Russo, and Roy H. Campbell. </author> <title> A C++ Class Hierarchy for Building UNIX-Like File Systems. </title> <booktitle> In Proceedings of the USENIX C++ Conference, </booktitle> <pages> pages 65-79, </pages> <address> Denver, Colorado, </address> <month> October </month> <year> 1988. </year>
Reference-contexts: Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems <ref> [34, 38, 37] </ref> and persistent objects [13, 35]. The system runs on shared memory multiprocessor Encore Multimaxes [51], MC68030s [31], Intel 386 and 486 personal computers [32], SUN SPARCstation I and II architectures [44] as well as the Tapestry hypercubes.
Reference: [39] <author> Henry Massalin and Calton Pu. </author> <title> Threads and input output in the Synthesis kernel. </title> <booktitle> In Proceedings of the 12th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 191-201, </pages> <address> Litchfield Park, Arizona USA, </address> <month> December </month> <year> 1989. </year> <note> ACM. </note>
Reference-contexts: An interesting experiment in this area is Carlton Pu's operating system called the Synthesis kernel <ref> [43, 39, 42] </ref>. In his work, alternatives are compiled as the operating system runs. Our work differs from this approach. We propose a class hierarchy of common optimizations organized by algorithm and performance, structured within an object-oriented operating system.
Reference: [40] <author> Sape J. Mullendar, Guido van Rossum, Andrew S. Tanenbaun, Robbert van Renesse, and Hans van Staveren. </author> <title> Amoeba: A Distributed Operating System for the 1990s. </title> <journal> IEEE Computer, </journal> <volume> 23(5) </volume> <pages> 44-53, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: Table 5 shows the list of optimizations for the SPARCStations and the Intel iPSC/2. Performance studies of these list of optimizations appear in [28, 25], copies of these papers are appended. 7 Related Work Most operating systems such as Mach [45, 55], UNIX [5], Chorus [47], and Amoeba <ref> [40] </ref> describe interface and operating system services that are tuned for particular semantics. Customization of an operating system to enhance the performance of an application has not been addressed by any of these operating systems.
Reference: [41] <author> G. Popek, B. Walker, J. Chow, D. Edwards, C. Kline, G. Rudisin, and G. Thiel. </author> <title> Locus: A network transparent, high reliability distributed system. </title> <booktitle> In Proceedings of the 8th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 169-177. </pages> <publisher> ACM, </publisher> <year> 1981. </year> <month> 18 </month>
Reference-contexts: Although Cheriton describes how problem oriented systems may be designed he does not consider the design of problem oriented message passing. The fixed message passing protocol of the V [16] system is used as the base for problem-oriented systems. The Locus <ref> [41] </ref> system also uses problem-oriented protocols to solve the problem of recovering from network partitions and the related issues of data consistency. The reconfiguration protocols are divided into two sections: partition and merge.
Reference: [42] <author> Calton Pu and Henry Massalin. </author> <title> Quaject composition in the Synthes is kernel. </title> <booktitle> In 1991 Work--shop on Object Orientation in Operating Systems, </booktitle> <pages> pages 29-34, </pages> <year> 1991. </year>
Reference-contexts: An interesting experiment in this area is Carlton Pu's operating system called the Synthesis kernel <ref> [43, 39, 42] </ref>. In his work, alternatives are compiled as the operating system runs. Our work differs from this approach. We propose a class hierarchy of common optimizations organized by algorithm and performance, structured within an object-oriented operating system.
Reference: [43] <author> Calton Pu, Henry Massalin, and John Ioannidis. </author> <title> The Synthesis kernel. </title> <journal> Computing Systems, </journal> <volume> 1(1) </volume> <pages> 12-32, </pages> <year> 1988. </year>
Reference-contexts: An interesting experiment in this area is Carlton Pu's operating system called the Synthesis kernel <ref> [43, 39, 42] </ref>. In his work, alternatives are compiled as the operating system runs. Our work differs from this approach. We propose a class hierarchy of common optimizations organized by algorithm and performance, structured within an object-oriented operating system.
Reference: [44] <author> David Raila. </author> <title> The Choices Object-oriented Operating System on the Sparc Architecture. </title> <type> Technical report, </type> <institution> The University of Illinois at Urbana-Champaign, </institution> <month> Aug </month> <year> 1992. </year>
Reference-contexts: The system runs on shared memory multiprocessor Encore Multimaxes [51], MC68030s [31], Intel 386 and 486 personal computers [32], SUN SPARCstation I and II architectures <ref> [44] </ref> as well as the Tapestry hypercubes. To simplify debugging, Choices also runs in a virtual operating system mode on top of SUN-OS and MS/DOS. Most aspects of the system are available for inspection during debugging including application interaction with the operating system, paging, the various file systems and networking.
Reference: [45] <author> Richard Rashid. </author> <title> Threads of a New System. UNIX Review, </title> <year> 1986. </year>
Reference-contexts: Table 5 shows the list of optimizations for the SPARCStations and the Intel iPSC/2. Performance studies of these list of optimizations appear in [28, 25], copies of these papers are appended. 7 Related Work Most operating systems such as Mach <ref> [45, 55] </ref>, UNIX [5], Chorus [47], and Amoeba [40] describe interface and operating system services that are tuned for particular semantics. Customization of an operating system to enhance the performance of an application has not been addressed by any of these operating systems.
Reference: [46] <author> Daniel Reed and Richard Fujimoto. </author> <title> Multicomputer Networks Message based Parallel Processing. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1986. </year>
Reference-contexts: Customization of an operating system to enhance the performance of an application has not been addressed by any of these operating systems. Reed <ref> [46] </ref> describes a variety of issues and optimizations for message passing systems on different hardware architectures. Cheriton [15] describes the need for problem oriented shared memory. He discusses two primitives that are essential for memory to implement: fetch and store. Applications customize fetch and store to implement particular problem-oriented semantics.
Reference: [47] <author> M. Rozier, V. Abrossimov, F. Armand, I. Boule, M. Gien, M. Guillemont, F. Herrmann, C. Kaiser, S. Lanlois, P. Leonard, and W. Neuhauser. </author> <title> Overview of the CHORUS Distributed Operating System. </title> <type> Technical Report CS/TR-90-25, </type> <institution> Chorus systems, </institution> <month> April </month> <year> 1990. </year>
Reference-contexts: Table 5 shows the list of optimizations for the SPARCStations and the Intel iPSC/2. Performance studies of these list of optimizations appear in [28, 25], copies of these papers are appended. 7 Related Work Most operating systems such as Mach [45, 55], UNIX [5], Chorus <ref> [47] </ref>, and Amoeba [40] describe interface and operating system services that are tuned for particular semantics. Customization of an operating system to enhance the performance of an application has not been addressed by any of these operating systems.
Reference: [48] <author> V. Russo, G. M. Johnston, and R. H. Campbell. </author> <title> "Process Management and Exception Handling in Multiprocessor Operating Systems Using Object-Oriented Design Techniques". </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 248-258, </pages> <year> 1988. </year> <note> Also Technical Report No. </note> <institution> UIUCDCS-R-88-1415, Department of Computer Science, University of Illinois at Urbana-Champaign. </institution>
Reference-contexts: Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions <ref> [48] </ref>, multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35].
Reference: [49] <author> V. F. Russo and R. H. Campbell. </author> <title> "Virtual Memory and Backing Storage Management in Multiprocessor Operating Systems Using Object-Oriented Design Techniques". </title> <booktitle> In Proceedings of the Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 267-278, </pages> <month> October </month> <year> 1989. </year>
Reference-contexts: The subframeworks introduce additional components and constraints and subclass components of the framework. We believe this way of building systems greatly simplifies experiments involving the comparison of many different policies [12]. Choices has frameworks for parallel processing [27, 12, 10], virtual memory <ref> [49, 50, 10] </ref>, distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35].
Reference: [50] <author> Vincent Russo and Roy H. Campbell. </author> <title> Virtual Memory and Backing Storage Management in Multiprocessor Operating Systems using Class Hierarchical Design. </title> <booktitle> In Proceedings of OOPSLA '89, </booktitle> <pages> pages 267-278, </pages> <address> New Orleans, Louisiana, </address> <month> September </month> <year> 1989. </year>
Reference-contexts: The subframeworks introduce additional components and constraints and subclass components of the framework. We believe this way of building systems greatly simplifies experiments involving the comparison of many different policies [12]. Choices has frameworks for parallel processing [27, 12, 10], virtual memory <ref> [49, 50, 10] </ref>, distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35].
Reference: [51] <author> Vincent F. Russo. </author> <title> An Object-Oriented Operating System. </title> <type> PhD thesis, </type> <institution> University of Illinois at Urbana-Champaign, </institution> <month> October </month> <year> 1990. </year>
Reference-contexts: Generic components are customized through object-oriented inheritance and specialization to match the specific concurrency requirements of applications. Choices has, as its kernel, a dynamic collection of objects [8, 10, 33, 6]. System resources, mechanisms, and policies are represented as objects that belong to a class hierarchy <ref> [51] </ref>. The object-oriented application interface has a name server that implements inheritance and polymorphism and provides access to system services, local and remote servers, and persistent objects. In the design of Choices, the concept of a framework subsumes the more conventional organization of an operating system into layers [51, 11]. <p> The object-oriented application interface has a name server that implements inheritance and polymorphism and provides access to system services, local and remote servers, and persistent objects. In the design of Choices, the concept of a framework subsumes the more conventional organization of an operating system into layers <ref> [51, 11] </ref>. While supporting operating system layers, frameworks also encourage design and code reuse [29, 10] and the consistent imposition of design constraints on all software, independent of the level at which it may be used [12, 9]. <p> Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors <ref> [51, 10, 12] </ref>, device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35]. The system runs on shared memory multiprocessor Encore Multimaxes [51], MC68030s [31], Intel 386 and 486 personal computers [32], SUN SPARCstation I and II architectures [44] as well as the Tapestry hypercubes. <p> The system runs on shared memory multiprocessor Encore Multimaxes <ref> [51] </ref>, MC68030s [31], Intel 386 and 486 personal computers [32], SUN SPARCstation I and II architectures [44] as well as the Tapestry hypercubes. To simplify debugging, Choices also runs in a virtual operating system mode on top of SUN-OS and MS/DOS. <p> Most aspects of the system are available for inspection during debugging including application interaction with the operating system, paging, the various file systems and networking. Operating System Experiments and Impact The performance of Choices shows minimal overhead as a consequence of being written as an object-oriented operating system <ref> [53, 51, 25] </ref>. The problems of using C++ and our approach to solving these problems are discussed in [36]. A performance comparison of a large number of different message passing implementations on a shared memory Encore Multimax has been reported [25]. <p> The systems that we have built could not only be optimized using object-oriented customization techniques, but the systems were also of comparable performance to commercially avail able, optimized systems written in C <ref> [51, 53, 34] </ref>. * A classification of operating system algorithms, data structures, and resource management schemes [51, 34, 10, 12]. * An approach to reusing and customizing operating system designs based on the notion of a framework [11, 10, 12]. * A detailed comparison of many different implementations of the hypercube <p> The systems that we have built could not only be optimized using object-oriented customization techniques, but the systems were also of comparable performance to commercially avail able, optimized systems written in C [51, 53, 34]. * A classification of operating system algorithms, data structures, and resource management schemes <ref> [51, 34, 10, 12] </ref>. * An approach to reusing and customizing operating system designs based on the notion of a framework [11, 10, 12]. * A detailed comparison of many different implementations of the hypercube message passing system on a shared memory multiprocessor, indicating that the performance of applications depends specifically
Reference: [52] <author> Vincent F. Russo, Peter W. Madany, and Roy H. Campbell. </author> <title> C++ and Operating Systems Performance: A Case Study. </title> <booktitle> In Proceedings of the USENIX C++ Conference, </booktitle> <pages> pages 103-114, </pages> <address> San Francisco, California, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: Such an estimate of the best optimizations for the application might then be further refined by instrumenting and observing the performance of the application in an iterative manner. 3 In prior research, we investigated an object-oriented operating system design for shared memory and distributed memory multiprocessors <ref> [52] </ref>. Experiments demonstrated customizations of the message passing, synchronization, and process management systems that enhanced the performance of hypercube (i. e., distributed memory) applications running on a shared memory machine [25] and a network of SPARCstations.
Reference: [53] <author> Vincent F. Russo, Peter W. Madany, and Roy H. Campbell. </author> <title> C++ and Operating Systems Performance: a Case Study. </title> <booktitle> In 1990 USENIX C++ Conference, </booktitle> <pages> pages 103-114, </pages> <address> San Francisco, CA, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: Most aspects of the system are available for inspection during debugging including application interaction with the operating system, paging, the various file systems and networking. Operating System Experiments and Impact The performance of Choices shows minimal overhead as a consequence of being written as an object-oriented operating system <ref> [53, 51, 25] </ref>. The problems of using C++ and our approach to solving these problems are discussed in [36]. A performance comparison of a large number of different message passing implementations on a shared memory Encore Multimax has been reported [25]. <p> The systems that we have built could not only be optimized using object-oriented customization techniques, but the systems were also of comparable performance to commercially avail able, optimized systems written in C <ref> [51, 53, 34] </ref>. * A classification of operating system algorithms, data structures, and resource management schemes [51, 34, 10, 12]. * An approach to reusing and customizing operating system designs based on the notion of a framework [11, 10, 12]. * A detailed comparison of many different implementations of the hypercube
Reference: [54] <author> Aamod Sane, Kenneth MacGregor, and Roy Campbell. </author> <title> Distributed Virtual Memory Consistency Protocols: Design and Performance. </title> <booktitle> In Proceedings of the Second IEEE Workshop in Experimental Distributed Systems, </booktitle> <pages> pages 91-96, </pages> <address> Huntsville, Alabama, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Other experiments examined customizations of network file servers and distributed virtual memory to improve performance <ref> [17, 54] </ref>. Our goal is to solve the following problems: 1. What is a representative set of possible operating system customizations for optimizing the performance of applications? 2. What is the best way to organize a library of operating systems optimizations to facilitate choosing possible optimizations. 3. <p> The subframeworks introduce additional components and constraints and subclass components of the framework. We believe this way of building systems greatly simplifies experiments involving the comparison of many different policies [12]. Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory <ref> [30, 54] </ref>, message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP [56, 57], hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35]. <p> A classification of message passing schemes has been published [12]. Early results from distributed shared virtual memory experiments convinced us to redesign the virtual memory and distributed shared virtual memory systems <ref> [54] </ref> to permit parallelism in the paging system. Early results from implementing a flexible caching strategy for distributed file systems have encouraged us to explore these issues further [17]. Using Pablo, Reed has been examining traces of parallel applications on Choices .
Reference: [55] <author> Michael Young, Avadis Tevanian, Richard Rashid, David Golub, Jeffrey Eppinger an d Jonathan Chew, William Bolosky, David Black, and Robert Baron. </author> <title> The duality of memory and communication in the implementation of a multiprocessor operating system. </title> <booktitle> In Proceedings of the 11th ACM Symposium on Operating Systems Principles, </booktitle> <pages> pages 63-76, </pages> <address> Austin TX (USA), </address> <month> November </month> <year> 1987. </year> <journal> ACM. </journal> <volume> 19 </volume>
Reference-contexts: Table 5 shows the list of optimizations for the SPARCStations and the Intel iPSC/2. Performance studies of these list of optimizations appear in [28, 25], copies of these papers are appended. 7 Related Work Most operating systems such as Mach <ref> [45, 55] </ref>, UNIX [5], Chorus [47], and Amoeba [40] describe interface and operating system services that are tuned for particular semantics. Customization of an operating system to enhance the performance of an application has not been addressed by any of these operating systems.
Reference: [56] <author> Jonathan Zweig and Ralph E. Johnson. </author> <title> The conduit: A communication abstraction in C++. </title> <booktitle> In Proceedings of the USENIX C++ Conference, </booktitle> <pages> pages 191-204, </pages> <address> San Francisco, California, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: We believe this way of building systems greatly simplifies experiments involving the comparison of many different policies [12]. Choices has frameworks for parallel processing [27, 12, 10], virtual memory [49, 50, 10], distributed shared virtual memory [30, 54], message passing systems [27, 25, 12], remote procedure calls [19], TCP/IP <ref> [56, 57] </ref>, hardware exceptions [48], multiple processors [51, 10, 12], device management [31], schedulers [27], file systems [34, 38, 37] and persistent objects [13, 35].

References-found: 56

