URL: ftp://www.cs.rutgers.edu/pub/technical-reports/lcsr-tr-226.ps.Z
Refering-URL: http://www.cs.rutgers.edu/pub/technical-reports/
Root-URL: 
Email: minsky@cs.rutgers.edu  
Title: A Problem with Long-Term Computing Processes, and What Can Be Done About It  
Author: Naftaly H. Minsky 
Keyword: long term process, law-governed architecture, on-line audit of financial systems, evolving systems, invariants of evolution.  
Note: Work supported in part by NSF grants No. CCR-9308773  
Date: June 94  
Address: New Brunswick, NJ, 08903 USA  
Affiliation: Department of Computer Science Rutgers University  
Abstract: We make here the observation that due to the evolutionary nature of large systems, a long-term process that runs for month or years is generally not driven by any single program, but rather by an unpredictable sequence of programs, (P (1); :::; P (k)), resulting in a serious loss of predictability of the process itself. The main point of this paper is that under LGA such a sequence of programs can be made into a "single organism," with certain invariant properties established by the law of the software development project. To demonstrate the feasibility and usefulness of such evolutionary invariants under LGA, we discuss in this paper the design of a law-governed evolving financial system in which certain important policies of "internal control" (such as separation of duties between the base system and its auditors) are established as invariants by formu - lating them as the law of the system. 
Abstract-found: 1
Intro-found: 1
Reference: [BGMW81] <author> A.D. Baily, J. Gerlach, P. McAfee, </author> <title> and A.B. Whinston. Internal accounting control in the office of the future. </title> <journal> The IEEE Computer Journal, </journal> <month> May </month> <year> 1981. </year>
Reference-contexts: of the software development project that maintains the financial system in question. 2 A model for On-Line Auditable System Financial and other socially sensitive systems are required to maintain a degree of what is called internal controls which, among other things, facilitate the audit of the activities of the system <ref> [BGMW81] </ref>. Traditionally, such audit has been performed mostly off-line by means of the analysis of the paper trail of the transaction involved, and of the data files generated by the computer systems.
Reference: [Mey92] <author> B. Meyer. </author> <title> Eiffel: The Language. </title> <publisher> Prentice-Hall, </publisher> <year> 1992. </year>
Reference-contexts: This situation changed due to the recent development of Darwin-E [MP94], which is a software development environment (based on Darwin/2 [Min94]) that supports LGA for systems written in the object-oriented language Eiffel <ref> [Mey92] </ref>, and which provides for efficient static enforcement for a substantial part of the law. This paper is based on Darwin-E.
Reference: [Min85] <author> N.H. Minsky. </author> <title> Controlling the evolution of large scale software systems. </title> <booktitle> In Proceedings of the Conference on Software Maintenance, </booktitle> <year> 1985, </year> <pages> pages 1-16. </pages> <publisher> IEEE, </publisher> <month> November </month> <year> 1985. </year> <month> 12 </month>
Reference-contexts: The ability to establish such invariants has been one of the main goals of the concept of law-governed architecture (LGA) from its inception <ref> [Min85] </ref>, but until recently we have been unable to establish interesting and useful invariants efficiently enough to be practical.
Reference: [Min91] <author> N.H. Minsky. </author> <title> Law-governed systems. </title> <journal> The IEE Software En-gineering Journal, </journal> <month> September </month> <year> 1991. </year> <note> (This is a revision of a similarly entitled 1987 technical report). </note>
Reference-contexts: Interactions between the components of the system being developed. The rules that deal the former kind of interactions are those that govern the process of development under project J . These rules, whose structure has been described in <ref> [Min91] </ref>, are enforced dynamically, when the regulated operations are invoked. On the other hand, the rules that deal with the latter kind of interactions govern the structure of any system developed under J . <p> But the manner in which L 0 establishes the other two principles of on-line auditing, by regulating the process of evolution of J , are discussed only informally. (This part of the law is similar to the analogous part of the already published law of evolving layered systems <ref> [Min91] </ref>.) Principle 1 is established by the set of rules listed in Figure 2, which are explained in detail below. (For a reader who is not familiar with Prolog, each rule is followed by a comment that explains its effect.) First note that rule R1 prohibits cross inheritance between classes in
Reference: [Min94] <author> N.H. Minsky. </author> <title> Law-governed regularities in software systems. </title> <type> Technical Report LCSR-TR-220, </type> <institution> Rutgers University, LCSR, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: This situation changed due to the recent development of Darwin-E [MP94], which is a software development environment (based on Darwin/2 <ref> [Min94] </ref>) that supports LGA for systems written in the object-oriented language Eiffel [Mey92], and which provides for efficient static enforcement for a substantial part of the law. This paper is based on Darwin-E.
Reference: [MP94] <author> N.H. Minsky and P Pal. </author> <title> Establishing regularity in objectoriented systems. </title> <type> Technical report, </type> <institution> Rutgers University, LCSR, </institution> <month> June </month> <year> 1994. </year> <month> 13 </month>
Reference-contexts: This situation changed due to the recent development of Darwin-E <ref> [MP94] </ref>, which is a software development environment (based on Darwin/2 [Min94]) that supports LGA for systems written in the object-oriented language Eiffel [Mey92], and which provides for efficient static enforcement for a substantial part of the law. This paper is based on Darwin-E. <p> The nature of this second kinds of rules is discussed briefly in the rest of this section. For a detailed discussion of these rules the reader is referred to <ref> [MP94] </ref>. Darwin-E regulates various types of interactions between the component parts of the Eiffel system being developed. An example of such a regulated interaction is the relation inherit (c1,c2), which means that class 1 c1 inherits directly from class c2 in S. <p> There are quite a number of additional interactions that can be regulated by the law under Darwin-E, some of which will be encountered later on in this paper, the rest are discussed in <ref> [MP94] </ref>. Darwin-E determines whether or not a given interaction t is to be permitted by evaluating the goal cannot t with respect to the the law L of the project in question. This law is a Prolog program whose evaluation may either succeed or fail.
References-found: 6

