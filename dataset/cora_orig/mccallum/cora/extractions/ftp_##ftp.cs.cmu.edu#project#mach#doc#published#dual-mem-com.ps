URL: ftp://ftp.cs.cmu.edu/project/mach/doc/published/dual-mem-com.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs/project/mach/public/www/doc/publications.html
Root-URL: 
Title: The Duality of Memory and Communication in the Implementation of a Multiprocessor Operating System  
Author: Michael Young, Avadis Tevanian, Richard Rashid, David Golub, Jeffrey Eppinger, Jonathan Chew, William Bolosky, David Black and Robert Baron 
Date: November, 1987  
Note: Appeared in Proceedings of the 11th Operating Systems Principles,  This research was sponsored by the Defense Advanced Research Projects Agency (DOD), ARPA Order No. 4864, monitored by the Space and Naval Warfare Systems Command under contract N00039-85-C-1034. The views expressed are those of the authors alone.  
Address: Pittsburgh, PA 15213  
Affiliation: Computer Science Department Carnegie-Mellon University  
Abstract: Mach is a multiprocessor operating system being implemented at Carnegie-Mellon University. An important component of the Mach design is the use of memory objects which can be managed either by the kernel or by user programs through a message interface. This feature allows applications such as transaction management systems to participate in decisions regarding secondary storage management and page replacement. This paper explores the goals, design and implementation of Mach and its external memory management facility. The relationship between memory and communication in Mach is examined as it relates to overall performance, applicability of Mach to new multiprocessor architectures, and the structure of application programs. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association of Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Accetta, M.J., Baron, R.V., Bolosky, W., Golub, D.B., Rashid, R.F., Tevanian, A., and Young, M.W. </author> <title> Mach: A New Kernel Foundation for UNIX Development. </title> <booktitle> In Proceedings of Summer Usenix. </booktitle> <month> July, </month> <year> 1986. </year>
Reference-contexts: Mach is binary compatible with Berkeley UNIX 4.3bsd and has been shown to outperform 4.3bsd in several benchmarks of overall system performance <ref> [1] </ref>. A key and unusual element in the design of Mach is the notion that communication (in the form of message passing) and virtual memory can play complementary roles, not only in the organization of distributed and parallel applications, but in the implementation of the operating system kernel itself. <p> Compilation of a small program cached in memory on a SUN 3/160 running Mach is twice as fast as when running the more conventional SunOS 3.2 operating system [17]. In a large system compilation, the total number of I/O operations can be reduced by a factor of 10 <ref> [1] </ref>. 10. Status All of the Mach facilities described in this paper have been implemented -- with the external memory management facility the most recent and most experimental addition.
Reference: [2] <author> BBN Laboratories. </author> <title> Butterfly Parallel Processor Overview. </title> <type> Technical Report, </type> <institution> BBN Computer Company, </institution> <address> Cambridge, MA, </address> <month> June, </month> <year> 1985. </year>
Reference-contexts: The difficulties in keeping cache contents consistent through such switches have led most NUMA designers to (1) not provide cache memory, (2) only allow caching for non-shared memory or (3) provide instruction-level cache control to be used by smart compilers. The BBN Butterfly <ref> [2] </ref> is an example of a commercial NUMA. Communication between CPUs in the Butterfly is by means of a Butterfly Switch, the complexity of which increases only as the logarithm of the number of processors.
Reference: [3] <author> Bisiani, R., Alleva, F., Forin, A. and Lerner, R. </author> <title> Agora: A Distributed System Architecture for Speech Recognition. </title> <booktitle> In International Conference on Acoustics, Speech and Signal Processing. IEEE, </booktitle> <month> April, </month> <year> 1986. </year>
Reference-contexts: Mach runs on the majority of workstations and mainframes within the Department of Computer Science, and supports projects in distributed computing and parallel processing such as the Camelot distributed transaction processing system [21], the Agora parallel speech understanding system <ref> [3] </ref> and a parallel implementation of OPS5 [7]. <p> The speech research group at CMU is currently engaged in a project to build a distributed speech understanding system called Agora <ref> [3] </ref>. This work is being done on Mach and currently makes use both of Mach memory sharing and message passing. Both communication and memory sharing are used to implement a shared blackboard structure in which hypotheses are placed and evaluated by multiple cooperating agents.
Reference: [4] <author> ELXSI Computer, Inc. </author> <title> System Programmer's Reference Manual ELXSI Computer, </title> <publisher> Inc., </publisher> <year> 1983. </year>
Reference-contexts: All three types of multiprocessors can be made to support message passing or shared memory. Although some manufacturers <ref> [4, 9] </ref> have provided hardware support for message mechanisms, implementations of message communication on uniprocessors and tightly coupled multiprocessors typically use internal semaphores and data copy operations. It is possible to implement copy-on-reference [24] and read/write sharing [13, 14] of information in a network environment without explicit hardware support.
Reference: [5] <author> Eppinger, J.L., and Spector, A.Z. </author> <title> Virtual Memory Management for Recoverable Objects in the TABS Prototype. </title> <type> Technical Report CMU-CS-85-163, </type> <institution> Carnegie-Mellon University, </institution> <month> December, </month> <year> 1985. </year>
Reference-contexts: Recoverable data can be written directly to permanent backing storage without first being written to temporary paging storage. By using an external interface, Camelot can benefit from these advantages without having to modify the operating system to provide specialized support <ref> [5] </ref>. Mach manages the physical memory cache while the Camelot disk manager guarantees that the write-ahead log protocol is followed. 8.4.
Reference: [6] <author> French, R.E., R.W. Collins and L.W. </author> <title> Loen. System/38 Machine Storage Management. </title> <institution> IBM System/38 Technical Developments, IBM General Systems Division :63-66, </institution> <year> 1978. </year>
Reference-contexts: Filesystem data and runtime allocated storage were both implemented as disk-based data objects. Copies of large messages were managed using shadow paging techniques. Other systems of the time, such as the IBM System 38 <ref> [6] </ref> and Apollo Aegis [13], also used the single level store approach, but limited its application to the management of files. For the operating system designer, a single level store can be very attractive.
Reference: [7] <author> Gupta, A. </author> <title> Parallel Production Systems. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <month> May, </month> <year> 1986. </year>
Reference-contexts: Mach runs on the majority of workstations and mainframes within the Department of Computer Science, and supports projects in distributed computing and parallel processing such as the Camelot distributed transaction processing system [21], the Agora parallel speech understanding system [3] and a parallel implementation of OPS5 <ref> [7] </ref>. Mach has already been ported to more than a 1 dozen computer systems including ten members of the VAX family of uniprocessors and multiprocessors , the IBM RT PC, the SUN 3, the 16-processor Encore MultiMax , and the 26-processor Sequent Balance 21000.
Reference: [8] <author> Hornig, D.A. </author> <title> Automatic Partitioning and Scheduling on a Network of Personal Computers. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <month> November, </month> <year> 1984. </year>
Reference-contexts: Accent was successful in demonstrating the utility of combining memory mapping with message passing. At its peak, Accent ran on over 150 workstations at CMU and served as the base for a number of experiments in distributed transaction processing [20], distributed sensor networks <ref> [8] </ref>, distributed filesystems [12], and process migration [24]. Accent was unsuccessful, however, in surviving the introduction of new hardware architectures and was never able to efficiently support the large body of UNIX software used within the academic community [16].
Reference: [9] <editor> Kahn, K.C. et al. iMAX: </editor> <title> A Multiprocessor Operating System for an Object-Based Computer. </title> <booktitle> In Proc. 8th Symposium on Operating Systems Principles, </booktitle> <pages> pages 127-136. </pages> <publisher> ACM, </publisher> <month> December, </month> <year> 1981. </year>
Reference-contexts: All three types of multiprocessors can be made to support message passing or shared memory. Although some manufacturers <ref> [4, 9] </ref> have provided hardware support for message mechanisms, implementations of message communication on uniprocessors and tightly coupled multiprocessors typically use internal semaphores and data copy operations. It is possible to implement copy-on-reference [24] and read/write sharing [13, 14] of information in a network environment without explicit hardware support.
Reference: [10] <author> Jones, </author> <title> A.K. The Object Model: A Conceptual Tool for Structuring Systems. Operating Systems: An Advanced Course. </title> <publisher> Springer-Verlag, </publisher> <year> 1978, </year> <pages> pages 7-16. </pages>
Reference-contexts: Messages sent to such a port result in operations being performed on the object it represents. Ports used in this way can be thought of as though they were capabilities to objects in an object-oriented system <ref> [10] </ref>. The act of sending a message (and perhaps receiving a reply) corresponds to a cross-domain procedure call in a capability-based system such as Hydra [23] or StarOS [11]. The indirection provided by message passing allows objects to be arbitrarily placed in the network without regard to programming details.
Reference: [11] <author> Jones, A.K., Chansler, R.J., Durham, I.E., Schwans, K., and Vegdahl, S. StarOS, </author> <title> a Multiprocessor Operating System for the Support of Task Forces. </title> <booktitle> In Proceedings of the 7th Symposium on Operating System Principles, </booktitle> <pages> pages 117-129. </pages> <publisher> ACM, </publisher> <month> December, </month> <year> 1979. </year>
Reference-contexts: Ports used in this way can be thought of as though they were capabilities to objects in an object-oriented system [10]. The act of sending a message (and perhaps receiving a reply) corresponds to a cross-domain procedure call in a capability-based system such as Hydra [23] or StarOS <ref> [11] </ref>. The indirection provided by message passing allows objects to be arbitrarily placed in the network without regard to programming details. <p> Examples of UMAs are the Encore MultiMax, Sequent 15 Balance, VAX 8300 and VAX 8800. Some of the earliest multiprocessors were examples of NUMAs, including CMUs C.mmp [23] and CM* <ref> [11] </ref>. One problem with UMAs is that they often rely on a shared global bus that limits the maximum number of processors and memory units which can be attached. NUMAs typically avoid this problem of scale by associating a local memory with each CPU.
Reference: [12] <author> Jones, M.B., Rashid, R.F., and Thompson, </author> <title> M.R. Sesame: The Spice File System. Internal Document, </title> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <month> October, </month> <year> 1982. </year>
Reference-contexts: Accent was successful in demonstrating the utility of combining memory mapping with message passing. At its peak, Accent ran on over 150 workstations at CMU and served as the base for a number of experiments in distributed transaction processing [20], distributed sensor networks [8], distributed filesystems <ref> [12] </ref>, and process migration [24]. Accent was unsuccessful, however, in surviving the introduction of new hardware architectures and was never able to efficiently support the large body of UNIX software used within the academic community [16]. <p> A Minimal Filesystem An example of a service which minimally uses the Mach external interface is a filesystem server which provides read-whole-file/write-whole-file functionality. Although it is simple, this style of interface has been used in actual servers <ref> [12, 19] </ref> and should be considered a serious example.
Reference: [13] <author> Leach, P.L., P.H. Levine, B.P. Douros, J.A. Hamilton, D.L. Nelson and B.L. Stumpf. </author> <title> The Architecture of an Integrated Local Network. </title> <journal> IEEE Journal on Selected Areas in Communications SAC-1(5):842-857, </journal> <month> November, </month> <year> 1983. </year>
Reference-contexts: Filesystem data and runtime allocated storage were both implemented as disk-based data objects. Copies of large messages were managed using shadow paging techniques. Other systems of the time, such as the IBM System 38 [6] and Apollo Aegis <ref> [13] </ref>, also used the single level store approach, but limited its application to the management of files. For the operating system designer, a single level store can be very attractive. <p> Although some manufacturers [4, 9] have provided hardware support for message mechanisms, implementations of message communication on uniprocessors and tightly coupled multiprocessors typically use internal semaphores and data copy operations. It is possible to implement copy-on-reference [24] and read/write sharing <ref> [13, 14] </ref> of information in a network environment without explicit hardware support.
Reference: [14] <author> Li, K. and Hudak, P. </author> <title> Memory Coherence in Shared Virtual Memory Systems. </title> <booktitle> In 5th Symposium on Principles of Distributed Computing. </booktitle> <year> 1986. </year>
Reference-contexts: Although some manufacturers [4, 9] have provided hardware support for message mechanisms, implementations of message communication on uniprocessors and tightly coupled multiprocessors typically use internal semaphores and data copy operations. It is possible to implement copy-on-reference [24] and read/write sharing <ref> [13, 14] </ref> of information in a network environment without explicit hardware support. <p> Just as Accent demonstrated that copy-on-write could be used for message passing in a uniprocessor, Li at Yale showed that a modified Apollo Aegis kernel could support applications which required read/write sharing of virtual memory data structures on a 10MHz token ring <ref> [14] </ref>. Network read/write sharing is accomplished using software techniques which parallel the hardware management of consistent caches in a multiprocessor. Cache blocks (in this case physical memory pages mapped by the memory mapping hardware of the Apollo workstations) are retrieved and cached as necessary from global memory.
Reference: [15] <author> Rashid, R.F. and Robertson, G. </author> <title> Accent: A Communication Oriented Network Operating System Kernel. </title> <booktitle> In Proceedings of the 8th Symposium on Operating System Principles, </booktitle> <pages> pages 64-75. </pages> <month> December, </month> <year> 1981. </year>
Reference-contexts: Early Work in Virtual Memory/Message Integration The design of Mach owes a great deal to a previous system developed at CMU called Accent <ref> [15] </ref>. A central feature of Accent was the integration of virtual memory and communication. Large amounts of data could be transmitted between processes in Accent with extremely high performance through its use of memory-mapping techniques.
Reference: [16] <author> Rashid, </author> <title> R.F. From RIG to Accent to Mach: The Evolution of a Network Operating System. </title> <booktitle> In Proceedings of the ACM/IEEE Computer Society 1986 Fall Joint Computer Conference. ACM, </booktitle> <month> November, </month> <year> 1986. </year>
Reference-contexts: Accent was unsuccessful, however, in surviving the introduction of new hardware architectures and was never able to efficiently support the large body of UNIX software used within the academic community <ref> [16] </ref>. In addition, from the point of view of a system designer, the Accent style of message/memory integration lacked symmetry.
Reference: [17] <author> Rashid, R.F., Tevanian, A., Young, M.W., Golub, D.B., Baron, R.V., Black, D.L., Bolosky, W., and Chew, J.J. </author> <title> Machine-Independent Virtual Memory Management for Paged Uniprocessor and Multiprocessor Architectures. </title> <booktitle> In Proceedings of the 2nd Symposium on Architectural Support for Programming Languages and Operating Systems. ACM, </booktitle> <month> October, </month> <year> 1987. </year> <month> 20 </month>
Reference-contexts: The effect of this kind of caching on the performance of UNIX and its traditional suite of application programs is dramatic. Compilation of a small program cached in memory on a SUN 3/160 running Mach is twice as fast as when running the more conventional SunOS 3.2 operating system <ref> [17] </ref>. In a large system compilation, the total number of I/O operations can be reduced by a factor of 10 [1]. 10. Status All of the Mach facilities described in this paper have been implemented -- with the external memory management facility the most recent and most experimental addition.
Reference: [18] <author> Ritchie, D.M. and Thompson, K. </author> <title> The Unix Time-Sharing System. </title> <journal> Communications of the ACM 17(7) </journal> <pages> 365-375, </pages> <month> July, </month> <year> 1974. </year>
Reference-contexts: Emulating Operating System Environments During the 1960's the notion of a virtual machine base for operating systems development became commercially popular. That popularity faded in the research community due to the complexities of truly virtualizing a wide range of devices and hardware functions. Alternative systems such as UNIX <ref> [18] </ref> were developed which provided a simple set of basic abstractions which could be implemented on a range of architectures. Today, the concept of an extensible operating system is once again gaining acceptance -- this time as the solution to the unconstrained growth of UNIX.
Reference: [19] <author> Satyanarayanan, M., et.al. </author> <title> The ITC Distributed File System: </title> <booktitle> Principles and Design. In Proc. 10th Symposium on Operating Systems Principles, </booktitle> <pages> pages 35-50. </pages> <publisher> ACM, </publisher> <month> December, </month> <year> 1985. </year>
Reference-contexts: A Minimal Filesystem An example of a service which minimally uses the Mach external interface is a filesystem server which provides read-whole-file/write-whole-file functionality. Although it is simple, this style of interface has been used in actual servers <ref> [12, 19] </ref> and should be considered a serious example.
Reference: [20] <author> Spector, A.Z., Butcher, J., Daniels, D.S., Duchamp, D.J., Eppinger, J.L., Fineman, C.E., Heddaya, A., Schwarz, </author> <title> P.M. Support for Distributed Transactions in the TABS Prototype. </title> <booktitle> In Proceedings of the 4th Symposium on Reliability In Distributed Software and Database Systems. </booktitle> <month> October, </month> <year> 1984. </year> <note> Also available as Carnegie-Mellon Report CMU-CS-84-132, </note> <month> July </month> <year> 1984. </year>
Reference-contexts: Accent was successful in demonstrating the utility of combining memory mapping with message passing. At its peak, Accent ran on over 150 workstations at CMU and served as the base for a number of experiments in distributed transaction processing <ref> [20] </ref>, distributed sensor networks [8], distributed filesystems [12], and process migration [24]. Accent was unsuccessful, however, in surviving the introduction of new hardware architectures and was never able to efficiently support the large body of UNIX software used within the academic community [16].
Reference: [21] <author> Spector, A.Z. </author> <title> Distributed Transaction Processing and the Camelot System. </title> <editor> In Yakup Paker (editor), </editor> <booktitle> NATO Advanced Study Institute - Computer and Systems Sciences. Volume : Distributed Operating Systems: Theory and Practice. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1987. </year> <note> Also available as Carnegie-Mellon Report CMU-CS-87-100, </note> <month> January </month> <year> 1987. </year>
Reference-contexts: Mach runs on the majority of workstations and mainframes within the Department of Computer Science, and supports projects in distributed computing and parallel processing such as the Camelot distributed transaction processing system <ref> [21] </ref>, the Agora parallel speech understanding system [3] and a parallel implementation of OPS5 [7]. <p> This pre-paging can proceed while the newly-migrated task begins to run. Alternatively, the migration manager can respond to requests on demand for unpredictable or excessively large tasks. 8.3. Database Management: Camelot Camelot is a transaction processing system being implemented on Mach <ref> [21] </ref>. Camelot provides support for distributed transactions on user-defined objects. In Camelot, servers maintain permanent objects in virtual memory backed by the Camelot disk manager. Camelot uses the write-ahead logging technique to implement permanent, failure-atomic transactions.
Reference: [22] <editor> Thacker, C.P., et al. </editor> <title> Alto: A personal computer. In Computer Structures: Readings and Examples. </title> <publisher> McGraw-Hill, </publisher> <year> 1980. </year> <title> Edited by D. </title> <type> Siewiorek, C.G. </type> <institution> Bell, and A. </institution> <note> Newell, second edition. </note>
Reference-contexts: Today, the concept of an extensible operating system is once again gaining acceptance -- this time as the solution to the unconstrained growth of UNIX. During the last 20 years operating systems and their environments have undergone dramatic expansion in size, scope and complexity. The Alto operating system <ref> [22] </ref>, a workstation operating system of the early 70's, occupied approximately 19K bytes, including code and data. A typical UNIX implemention on a modern workstation such as a MicroVAX or SUN can consume over 1.5 megabytes of storage before a single user program is executed.
Reference: [23] <author> Wulf, W.A., Levin, R., and Harbison, S.P. Hydra/C.mmp: </author> <title> An Experimental Computer System. </title> <publisher> McGraw-Hill, </publisher> <year> 1981. </year>
Reference-contexts: Ports used in this way can be thought of as though they were capabilities to objects in an object-oriented system [10]. The act of sending a message (and perhaps receiving a reply) corresponds to a cross-domain procedure call in a capability-based system such as Hydra <ref> [23] </ref> or StarOS [11]. The indirection provided by message passing allows objects to be arbitrarily placed in the network without regard to programming details. <p> Access times appear nearly uniform, although, depending on the architecture, cache flushing can result in non-uniform memory access times for some algorithms. Examples of UMAs are the Encore MultiMax, Sequent 15 Balance, VAX 8300 and VAX 8800. Some of the earliest multiprocessors were examples of NUMAs, including CMUs C.mmp <ref> [23] </ref> and CM* [11]. One problem with UMAs is that they often rely on a shared global bus that limits the maximum number of processors and memory units which can be attached. NUMAs typically avoid this problem of scale by associating a local memory with each CPU.

References-found: 23

