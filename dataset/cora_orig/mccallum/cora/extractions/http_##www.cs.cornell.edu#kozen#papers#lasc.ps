URL: http://www.cs.cornell.edu/kozen/papers/lasc.ps
Refering-URL: http://www.cs.cornell.edu/kozen/papers/papers.html
Root-URL: 
Email: kozen@cs.cornell.edu  
Title: Logical Aspects of Set Constraints  
Author: Dexter Kozen 
Address: Ithaca, New York 14853, USA  
Affiliation: Computer Science Department Cornell University  
Abstract: Set constraints are inclusion relations between sets of ground terms over a ranked alphabet. They have been used extensively in program analysis and type inference. Here we present an equational axiomatization of the algebra of set constraints. Models of these axioms are called termset algebras. They are related to the Boolean algebras with operators of Jonsson and Tarski. We also define a family of combinatorial models called topological term automata, which are essentially the term automata studied by Kozen, Palsberg, and Schwartzbach endowed with a topology such that all relevant operations are continuous. These models are similar to Kripke frames for modal or dynamic logic. We establish a Stone duality between termset algebras and topological term automata, and use this to derive a completeness theorem for a related multidimensional modal logic. Finally, we prove a small model property by filtration, and argue that this result contains the essence of several algorithms appearing in the literature on set constraints.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> A. Aiken, D. Kozen, M. Vardi, and E. Wimmers, </author> <title> The complexity of set constraints, </title> <booktitle> in Proc. 1993 Conf. Computer Science Logic (CSL'93), </booktitle> <editor> E. Borger, Y. Gurevich, and K. Meinke, eds., </editor> <volume> vol. </volume> <booktitle> 832 of Lect. Notes in Comput. </booktitle> <institution> Sci., Eur. Assoc. Comput. Sci. </institution> <address> Logic, </address> <publisher> Springer, </publisher> <month> September </month> <year> 1993, </year> <pages> pp. 1-17. </pages>
Reference-contexts: 1 Introduction Set constraints are inclusion relations between sets of ground terms over a ranked alphabet. They have been used extensively in program analysis and type inference [29, 21, 27, 28, 32, 20, 3, 4]. Several algorithms for solving general systems of set constraints have appeared <ref> [5, 1, 2, 7, 14, 15, 30, 9] </ref>. These algorithms use a variety of interesting techniques and expose a rich structure touching on monadic second-order logic, automata on infinite trees, and combinatorics on hypergraphs. <p> We give a completeness result for this logic. Finally, we prove a small model property by filtration, a classical technique of modal logic, and argue that this result contains the essence of <ref> [1, Theorem 5.1] </ref>, [14, Proposition 14], and the proof of decidability of the Monadic Class given in [13, x2.1] on which the algorithm of [7] is based. 2 Termset Algebras Let B denote the usual signature of Boolean algebra consisting of symbols + (join), (meet), : (negation), 0 (bottom), and 1 <p> f (: : : ; y; : : :) (7) x y ) f (: : : ; x; : : :) f (: : : ; y; : : :) : (9) 2.1 Examples The standard interpretation of set expressions found in the literature on set constraints (see e.g. <ref> [5, 1] </ref>) is a model of these axioms. We call this model the standard termset algebra. Elements are the subsets of T , the set of ground terms over . <p> Conversely, any Th M is a dual ideal and thus consistent by Lemma 6. 7 Solutions of Set Constraints In <ref> [19, 5, 1, 2, 7, 9, 14, 15, 30] </ref>, various techniques for the solution of systems of set constraints are given. Here we introduce yet another approach. <p> Here we introduce yet another approach. Let be a set of formulas ' (representing the set constraints ' = 1 in the sense of <ref> [1] </ref>) and let X be the set of propositional letters occurring in . A standard solution of the constraints is an annotation of the finite syntactic term automaton T defined in x4.2 such that the resulting annotated term automaton realizes . Definition 8. <p> This notion of closure corresponds directly to the notion of closure in hyper-graphs defined in <ref> [1] </ref>. We can characterize this property algebraically: Definition 9. <p> Also, is one-to-one, since (t) satisfies the formula t, and these formulas are pairwise inconsistent. The annotation of T realizing is inherited from M under the bijection . 7.1 Filtration In <ref> [1] </ref>, an exponential-size hypergraph H for a given finite collection of set constraints was constructed by ad hoc means. The hypergraph H is described by Boolean formulas obtained from . It was proved that has a solution iff H has a closed induced subhypergraph [1, Theorem 5.1]. <p> The hypergraph H is described by Boolean formulas obtained from . It was proved that has a solution iff H has a closed induced subhypergraph <ref> [1, Theorem 5.1] </ref>. The graph H is essentially a filtrate of F X = and can be obtained by a standard filtration construction of modal logic (see [10, 17, 26]), which we outline here. Determinacy is not preserved under the filtration construction. <p> Lemma 14. For ' 2 , [q] 2 N (') if and only if q 2 M ('). Proof. Induction on the structure of ' (see [17, 10]). The following theorem is a restatement of <ref> [1, Theorem 5.1] </ref>. Theorem 15. A set of formulas has a standard solution if and only if the filtrate N of St F X = by has a closed subautomaton. Proof. By Lemma 11, has a standard solution iff St F X = has a closed subau-tomaton.
Reference: 2. <author> A. Aiken, D. Kozen, and E. Wimmers, </author> <title> Decidability of systems of set constraints with negative constraints, </title> <type> Tech. Rep. 93-1362, </type> <institution> Computer Science Department, Cor-nell University, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Set constraints are inclusion relations between sets of ground terms over a ranked alphabet. They have been used extensively in program analysis and type inference [29, 21, 27, 28, 32, 20, 3, 4]. Several algorithms for solving general systems of set constraints have appeared <ref> [5, 1, 2, 7, 14, 15, 30, 9] </ref>. These algorithms use a variety of interesting techniques and expose a rich structure touching on monadic second-order logic, automata on infinite trees, and combinatorics on hypergraphs. <p> Conversely, any Th M is a dual ideal and thus consistent by Lemma 6. 7 Solutions of Set Constraints In <ref> [19, 5, 1, 2, 7, 9, 14, 15, 30] </ref>, various techniques for the solution of systems of set constraints are given. Here we introduce yet another approach.
Reference: 3. <author> A. Aiken and B. Murphy, </author> <title> Implementing regular tree expressions, </title> <booktitle> in Proc. 1991 Conf. Functional Programming Languages and Computer Architecture, </booktitle> <month> August </month> <year> 1991, </year> <pages> pp. 427-447. </pages> <month> 4. </month> , <title> Static type inference in a dynamically typed language, </title> <booktitle> in Proc. 18th Symp. Principles of Programming Languages, ACM, </booktitle> <month> January </month> <year> 1991, </year> <pages> pp. 279-290. </pages>
Reference-contexts: 1 Introduction Set constraints are inclusion relations between sets of ground terms over a ranked alphabet. They have been used extensively in program analysis and type inference <ref> [29, 21, 27, 28, 32, 20, 3, 4] </ref>. Several algorithms for solving general systems of set constraints have appeared [5, 1, 2, 7, 14, 15, 30, 9].
Reference: 5. <author> A. Aiken and E. Wimmers, </author> <title> Solving systems of set constraints, </title> <booktitle> in Proc. 7th Symp. Logic in Computer Science, IEEE, </booktitle> <month> June </month> <year> 1992, </year> <pages> pp. 329-340. </pages>
Reference-contexts: 1 Introduction Set constraints are inclusion relations between sets of ground terms over a ranked alphabet. They have been used extensively in program analysis and type inference [29, 21, 27, 28, 32, 20, 3, 4]. Several algorithms for solving general systems of set constraints have appeared <ref> [5, 1, 2, 7, 14, 15, 30, 9] </ref>. These algorithms use a variety of interesting techniques and expose a rich structure touching on monadic second-order logic, automata on infinite trees, and combinatorics on hypergraphs. <p> f (: : : ; y; : : :) (7) x y ) f (: : : ; x; : : :) f (: : : ; y; : : :) : (9) 2.1 Examples The standard interpretation of set expressions found in the literature on set constraints (see e.g. <ref> [5, 1] </ref>) is a model of these axioms. We call this model the standard termset algebra. Elements are the subsets of T , the set of ground terms over . <p> Conversely, any Th M is a dual ideal and thus consistent by Lemma 6. 7 Solutions of Set Constraints In <ref> [19, 5, 1, 2, 7, 9, 14, 15, 30] </ref>, various techniques for the solution of systems of set constraints are given. Here we introduce yet another approach.
Reference: 6. <author> R. M. Amadio and L. Cardelli, </author> <title> Subtyping recursive types, </title> <booktitle> in Proc. 18th Symp. Princip. Programming Lang., ACM, </booktitle> <month> January </month> <year> 1991, </year> <pages> pp. 104-118. </pages>
Reference-contexts: Regular terms are commonly used to represent recursive types <ref> [6, 8, 24, 25] </ref>. The following definition is from Courcelle [12]. Definition 2. Let ! denote the set of natural numbers and let be a ranked alphabet.
Reference: 7. <author> L. Bachmair, H. Ganzinger, and U. Waldmann, </author> <title> Set constraints are the monadic class, </title> <booktitle> in Proc. 8th Symp. Logic in Computer Science, IEEE, </booktitle> <month> June </month> <year> 1993, </year> <pages> pp. 75-83. </pages>
Reference-contexts: 1 Introduction Set constraints are inclusion relations between sets of ground terms over a ranked alphabet. They have been used extensively in program analysis and type inference [29, 21, 27, 28, 32, 20, 3, 4]. Several algorithms for solving general systems of set constraints have appeared <ref> [5, 1, 2, 7, 14, 15, 30, 9] </ref>. These algorithms use a variety of interesting techniques and expose a rich structure touching on monadic second-order logic, automata on infinite trees, and combinatorics on hypergraphs. <p> Finally, we prove a small model property by filtration, a classical technique of modal logic, and argue that this result contains the essence of [1, Theorem 5.1], [14, Proposition 14], and the proof of decidability of the Monadic Class given in [13, x2.1] on which the algorithm of <ref> [7] </ref> is based. 2 Termset Algebras Let B denote the usual signature of Boolean algebra consisting of symbols + (join), (meet), : (negation), 0 (bottom), and 1 (top). <p> Conversely, any Th M is a dual ideal and thus consistent by Lemma 6. 7 Solutions of Set Constraints In <ref> [19, 5, 1, 2, 7, 9, 14, 15, 30] </ref>, various techniques for the solution of systems of set constraints are given. Here we introduce yet another approach.
Reference: 8. <author> L. Cardelli and P. Wegner, </author> <title> On understanding types, data abstraction, and polymorphism, </title> <journal> Computing Surveys, </journal> <month> 17:4 </month> <year> (1985), </year> <pages> pp. 471-522. </pages>
Reference-contexts: Regular terms are commonly used to represent recursive types <ref> [6, 8, 24, 25] </ref>. The following definition is from Courcelle [12]. Definition 2. Let ! denote the set of natural numbers and let be a ranked alphabet.
Reference: 9. <author> W. Charatonik and L. Pacholski, </author> <title> Negative set constraints with equality, </title> <booktitle> in Proc. 9th Symp. Logic in Computer Science, IEEE, </booktitle> <month> July </month> <year> 1994. </year> <note> To appear. Also, </note> <institution> Max-Planck-Institut fur Informatik Technical Report MPI-I-93-265. </institution> <month> 13 </month>
Reference-contexts: 1 Introduction Set constraints are inclusion relations between sets of ground terms over a ranked alphabet. They have been used extensively in program analysis and type inference [29, 21, 27, 28, 32, 20, 3, 4]. Several algorithms for solving general systems of set constraints have appeared <ref> [5, 1, 2, 7, 14, 15, 30, 9] </ref>. These algorithms use a variety of interesting techniques and expose a rich structure touching on monadic second-order logic, automata on infinite trees, and combinatorics on hypergraphs. <p> Conversely, any Th M is a dual ideal and thus consistent by Lemma 6. 7 Solutions of Set Constraints In <ref> [19, 5, 1, 2, 7, 9, 14, 15, 30] </ref>, various techniques for the solution of systems of set constraints are given. Here we introduce yet another approach.
Reference: 10. <author> B. F. Chellas, </author> <title> Modal Logic: An Introduction, </title> <publisher> Cambridge University Press, </publisher> <year> 1980. </year>
Reference-contexts: We show that these two classes of structures are Stone duals (see [18, 17]). We also identify a subfamily of term automata in which the topology is induced by labelings on the states. These models are quite similar to Kripke frames for modal or dynamic logic (see <ref> [10, 31, 17, 26] </ref>) and provide a semantics for a kind of multidimensional modal logic (cf. [31]). We give a completeness result for this logic. <p> x i+1 ; : : : ; x n and define 3y = f (x 1 ; : : : ; x i1 ; y; x i+1 ; : : : ; x n ) then 3 and 2 satisfy the usual laws of the minimal normal modal logic K <ref> [10, 17] </ref>: 3 (x + y) = 3x + 3y (13) (3x) (2y) 3 (xy) (15) In addition, because of axiom (2), 3 is a deterministic modality in the sense used in dynamic logic to model deterministic computation (see [26]): 3x 2x (17) 2 (x ! y) 2x ! 2y : <p> It was proved that has a solution iff H has a closed induced subhypergraph [1, Theorem 5.1]. The graph H is essentially a filtrate of F X = and can be obtained by a standard filtration construction of modal logic (see <ref> [10, 17, 26] </ref>), which we outline here. Determinacy is not preserved under the filtration construction. Thus we must work with nondeterministic termset algebras as defined in x2.2. Definition 12. <p> Lemma 14. For ' 2 , [q] 2 N (') if and only if q 2 M ('). Proof. Induction on the structure of ' (see <ref> [17, 10] </ref>). The following theorem is a restatement of [1, Theorem 5.1]. Theorem 15. A set of formulas has a standard solution if and only if the filtrate N of St F X = by has a closed subautomaton. Proof.
Reference: 11. <author> A. Colmerauer, </author> <title> PROLOG and infinite trees, in Logic Programming, </title> <editor> S.-A. Tarnlund and K. L. Clark, eds., </editor> <publisher> Academic Press, </publisher> <month> January </month> <year> 1982, </year> <pages> pp. 231-251. </pages>
Reference-contexts: infinite term s is regular since it has two subterms up to isomorphism, namely s and a. 5 4.2 Term Automata It is well known that an infinite regular term can be represented by a finite labeled graph such that the infinite term is obtained by "unwinding" the graph (see <ref> [12, 11] </ref>). We use the automata-theoretic formulation introduced in [24] of this idea. Definition 3.
Reference: 12. <author> B. Courcelle, </author> <title> Fundamental properties of infinite trees, </title> <institution> Theor. Comput. Sci., </institution> <month> 25 </month> <year> (1983), </year> <pages> pp. 95-169. </pages>
Reference-contexts: We can also define similar termset algebras consisting of sets of finite and infinite terms or sets of regular terms <ref> [12] </ref>. We discuss these models further in x4.2. There are other examples of termset algebras that have no representation as sets of terms. <p> Regular terms are commonly used to represent recursive types [6, 8, 24, 25]. The following definition is from Courcelle <ref> [12] </ref>. Definition 2. Let ! denote the set of natural numbers and let be a ranked alphabet. <p> infinite term s is regular since it has two subterms up to isomorphism, namely s and a. 5 4.2 Term Automata It is well known that an infinite regular term can be represented by a finite labeled graph such that the infinite term is obtained by "unwinding" the graph (see <ref> [12, 11] </ref>). We use the automata-theoretic formulation introduced in [24] of this idea. Definition 3.
Reference: 13. <author> B. Dreben and W. D. Goldfarb, </author> <title> The Decision Problem: Solvable Classes of Quantificational formulas, </title> <publisher> Addison Wesley, </publisher> <year> 1979. </year>
Reference-contexts: We give a completeness result for this logic. Finally, we prove a small model property by filtration, a classical technique of modal logic, and argue that this result contains the essence of [1, Theorem 5.1], [14, Proposition 14], and the proof of decidability of the Monadic Class given in <ref> [13, x2.1] </ref> on which the algorithm of [7] is based. 2 Termset Algebras Let B denote the usual signature of Boolean algebra consisting of symbols + (join), (meet), : (negation), 0 (bottom), and 1 (top).
Reference: 14. <author> R. Gilleron, S. Tison, and M. Tommasi, </author> <title> Solving systems of set constraints using tree automata, </title> <booktitle> in Proc. Symp. </booktitle> <institution> Theor. Aspects of Comput. Sci., </institution> <note> vol. 665, Springer-Verlag Lect. Notes in Comput. Sci., </note> <month> February </month> <year> 1993, </year> <pages> pp. 505-514. </pages> <month> 15. </month> , <title> Solving systems of set constraints with negated subset relationships, </title> <booktitle> in Proc. 34th Symp. </booktitle> <institution> Foundations of Comput. Sci., IEEE, </institution> <month> November </month> <year> 1993, </year> <pages> pp. 372-380. </pages>
Reference-contexts: 1 Introduction Set constraints are inclusion relations between sets of ground terms over a ranked alphabet. They have been used extensively in program analysis and type inference [29, 21, 27, 28, 32, 20, 3, 4]. Several algorithms for solving general systems of set constraints have appeared <ref> [5, 1, 2, 7, 14, 15, 30, 9] </ref>. These algorithms use a variety of interesting techniques and expose a rich structure touching on monadic second-order logic, automata on infinite trees, and combinatorics on hypergraphs. <p> We give a completeness result for this logic. Finally, we prove a small model property by filtration, a classical technique of modal logic, and argue that this result contains the essence of [1, Theorem 5.1], <ref> [14, Proposition 14] </ref>, and the proof of decidability of the Monadic Class given in [13, x2.1] on which the algorithm of [7] is based. 2 Termset Algebras Let B denote the usual signature of Boolean algebra consisting of symbols + (join), (meet), : (negation), 0 (bottom), and 1 (top). <p> Conversely, any Th M is a dual ideal and thus consistent by Lemma 6. 7 Solutions of Set Constraints In <ref> [19, 5, 1, 2, 7, 9, 14, 15, 30] </ref>, various techniques for the solution of systems of set constraints are given. Here we introduce yet another approach.
Reference: 16. <author> R. Goldblatt, </author> <title> Varieties of complex algebras, </title> <journal> Annals of Pure and Applied Logic, </journal> <volume> 44 (1989), </volume> <pages> pp. 173-242. </pages> <month> 17. </month> , <title> Mathematics of Modality, </title> <booktitle> vol. 43 of CSLI Lecture Notes, Center for the Study of Language and Information, </booktitle> <year> 1993. </year>
Reference-contexts: We call the models of these axioms termset algebras. These models form an equational variety and are related to the Boolean algebras with operators and complex algebras (algebras of subsets of another algebra) introduced by Jonsson and Tarski [22, 23]; see also <ref> [16] </ref>. We also define a family of topological models called topological term automata, which are essentially the term automata of [25] endowed with a topology such that all relevant operations are continuous. We show that these two classes of structures are Stone duals (see [18, 17]). <p> These are Boolean algebras satisfying (1) and (5). An example of a Boolean algebra with operators is the complex algebra or algebra of subsets of another algebra <ref> [16] </ref>. We need not postulate (5) as an axiom for termset algebras, since it follows from (2). The two chief features that distinguish termset algebras from Boolean algebras with operators and complex algebras are characterized by axiom (2) and axioms (3) and (4). We discuss the former in x3 below.
Reference: 18. <author> P. R. Halmos, </author> <title> Lectures on Boolean algebras, </title> <publisher> Springer-Verlag, </publisher> <year> 1974. </year>
Reference-contexts: We also define a family of topological models called topological term automata, which are essentially the term automata of [25] endowed with a topology such that all relevant operations are continuous. We show that these two classes of structures are Stone duals (see <ref> [18, 17] </ref>). We also identify a subfamily of term automata in which the topology is induced by labelings on the states. <p> Every filter extends to an ultrafilter; this is a standard application of Zorn's Lemma <ref> [18] </ref>. By the same technique one can show that every dual ideal extends to a maximal dual ideal. <p> The proof is a standard ultrafilter construction (see <ref> [18, 17] </ref>). Theorem 4. Every termset algebra is isomorphic to a set-theoretic termset algebra. 7 Proof. <p> Moreover, these functors are bijections on the homsets of TSA and STA, and are inverses up to isomorphism, thus constitute a Stone duality (see <ref> [18] </ref>). 8 6 Completeness 6.1 Annotated Term Automata Definition 5. Let X = fP; Q; : : :g be a set of propositional letters.
Reference: 19. <author> N. Heintze and J. Jaffar, </author> <title> A decision procedure for a class of set constraints, </title> <booktitle> in Proc. 5th Symp. Logic in Computer Science, IEEE, </booktitle> <month> June </month> <year> 1990, </year> <pages> pp. 42-51. </pages> <month> 20. </month> , <title> A finite presentation theorem for approximating logic programs, </title> <booktitle> in Proc. 17th Symp. Principles of Programming Languages, ACM, </booktitle> <month> January </month> <year> 1990, </year> <pages> pp. 197-209. </pages>
Reference-contexts: Conversely, any Th M is a dual ideal and thus consistent by Lemma 6. 7 Solutions of Set Constraints In <ref> [19, 5, 1, 2, 7, 9, 14, 15, 30] </ref>, various techniques for the solution of systems of set constraints are given. Here we introduce yet another approach.
Reference: 21. <author> N. D. Jones and S. S. Muchnick, </author> <title> Flow analysis and optimization of LISP-like structures, </title> <booktitle> in Proc. 6th Symp. Principles of Programming Languages, ACM, Jan-uary 1979, </booktitle> <pages> pp. 244-256. </pages>
Reference-contexts: 1 Introduction Set constraints are inclusion relations between sets of ground terms over a ranked alphabet. They have been used extensively in program analysis and type inference <ref> [29, 21, 27, 28, 32, 20, 3, 4] </ref>. Several algorithms for solving general systems of set constraints have appeared [5, 1, 2, 7, 14, 15, 30, 9].
Reference: 22. <author> B. J onsson and A. Tarski, </author> <title> Boolean algebras with operators, </title> <journal> Amer. J. Math., </journal> <volume> 73 (1951), </volume> <pages> pp. 891-939. </pages> <month> 23. </month> , <title> Boolean algebras with operators, </title> <journal> Amer. J. Math., </journal> <volume> 74 (1952), </volume> <pages> pp. 127-162. </pages>
Reference-contexts: We call the models of these axioms termset algebras. These models form an equational variety and are related to the Boolean algebras with operators and complex algebras (algebras of subsets of another algebra) introduced by Jonsson and Tarski <ref> [22, 23] </ref>; see also [16]. We also define a family of topological models called topological term automata, which are essentially the term automata of [25] endowed with a topology such that all relevant operations are continuous. We show that these two classes of structures are Stone duals (see [18, 17]). <p> Algebraic models of these axioms are called nondeterministic termset algebras. 3 2.3 Boolean Algebras with Operators Termset algebras are a special case of the Boolean algebras with operators introduced by Jonsson and Tarski <ref> [22, 23] </ref>. These are Boolean algebras satisfying (1) and (5). An example of a Boolean algebra with operators is the complex algebra or algebra of subsets of another algebra [16]. We need not postulate (5) as an axiom for termset algebras, since it follows from (2).
Reference: 24. <author> D. Kozen, J. Palsberg, and M. I. Schwartzbach, </author> <title> Efficient inference of partial types, </title> <booktitle> in Proc. 33rd Symp. </booktitle> <institution> Found. Comput. Sci., IEEE, </institution> <month> October </month> <year> 1992, </year> <pages> pp. 363-371. </pages> <month> 25. </month> , <title> Efficient recursive subtyping, </title> <booktitle> in Proc. 20th Symp. Princip. Programming Lang., ACM, </booktitle> <month> January </month> <year> 1993, </year> <pages> pp. 419-428. </pages>
Reference-contexts: Regular terms are commonly used to represent recursive types <ref> [6, 8, 24, 25] </ref>. The following definition is from Courcelle [12]. Definition 2. Let ! denote the set of natural numbers and let be a ranked alphabet. <p> We use the automata-theoretic formulation introduced in <ref> [24] </ref> of this idea. Definition 3.
Reference: 26. <author> D. Kozen and J. Tiuryn, </author> <title> Logics of programs, </title> <booktitle> in Handbook of Theoretical Computer Science, </booktitle> <editor> van Leeuwen, ed., </editor> <volume> vol. </volume> <editor> B, </editor> <publisher> North Holland, </publisher> <year> 1990, </year> <pages> pp. 789-840. </pages>
Reference-contexts: We show that these two classes of structures are Stone duals (see [18, 17]). We also identify a subfamily of term automata in which the topology is induced by labelings on the states. These models are quite similar to Kripke frames for modal or dynamic logic (see <ref> [10, 31, 17, 26] </ref>) and provide a semantics for a kind of multidimensional modal logic (cf. [31]). We give a completeness result for this logic. <p> satisfy the usual laws of the minimal normal modal logic K [10, 17]: 3 (x + y) = 3x + 3y (13) (3x) (2y) 3 (xy) (15) In addition, because of axiom (2), 3 is a deterministic modality in the sense used in dynamic logic to model deterministic computation (see <ref> [26] </ref>): 3x 2x (17) 2 (x ! y) 2x ! 2y : (19) The laws (17)-(19) are equivalent in the sense that they are interderivable in the presence of (13)-(16). 4 Term Automata 4.1 Infinite Terms Infinite terms and regular terms are useful in program logic, program specification and type theory. <p> It was proved that has a solution iff H has a closed induced subhypergraph [1, Theorem 5.1]. The graph H is essentially a filtrate of F X = and can be obtained by a standard filtration construction of modal logic (see <ref> [10, 17, 26] </ref>), which we outline here. Determinacy is not preserved under the filtration construction. Thus we must work with nondeterministic termset algebras as defined in x2.2. Definition 12.
Reference: 27. <author> P. Mishra, </author> <title> Towards a theory of types in PROLOG, </title> <booktitle> in Proc. 1st Symp. Logic Programming, IEEE, </booktitle> <year> 1984, </year> <pages> pp. 289-298. </pages>
Reference-contexts: 1 Introduction Set constraints are inclusion relations between sets of ground terms over a ranked alphabet. They have been used extensively in program analysis and type inference <ref> [29, 21, 27, 28, 32, 20, 3, 4] </ref>. Several algorithms for solving general systems of set constraints have appeared [5, 1, 2, 7, 14, 15, 30, 9].
Reference: 28. <author> P. Mishra and U. Reddy, </author> <title> Declaration-free type checking, </title> <booktitle> in Proc. 12th Symp. Principles of Programming Languages, ACM, </booktitle> <year> 1985, </year> <pages> pp. 7-21. </pages>
Reference-contexts: 1 Introduction Set constraints are inclusion relations between sets of ground terms over a ranked alphabet. They have been used extensively in program analysis and type inference <ref> [29, 21, 27, 28, 32, 20, 3, 4] </ref>. Several algorithms for solving general systems of set constraints have appeared [5, 1, 2, 7, 14, 15, 30, 9].
Reference: 29. <author> J. C. Reynolds, </author> <title> Automatic computation of data set definitions, </title> <booktitle> in Information Processing 68, </booktitle> <publisher> North-Holland, </publisher> <year> 1969, </year> <pages> pp. 456-461. </pages>
Reference-contexts: 1 Introduction Set constraints are inclusion relations between sets of ground terms over a ranked alphabet. They have been used extensively in program analysis and type inference <ref> [29, 21, 27, 28, 32, 20, 3, 4] </ref>. Several algorithms for solving general systems of set constraints have appeared [5, 1, 2, 7, 14, 15, 30, 9].
Reference: 30. <author> K. Stef ansson, </author> <title> Systems of set constraints with negative constraints are NEXPTIME-complete, </title> <booktitle> in Proc. 9th Symp. Logic in Computer Science, IEEE, </booktitle> <month> June </month> <year> 1994. </year> <note> To appear. Also Cornell University TR93-1380, </note> <month> August </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Set constraints are inclusion relations between sets of ground terms over a ranked alphabet. They have been used extensively in program analysis and type inference [29, 21, 27, 28, 32, 20, 3, 4]. Several algorithms for solving general systems of set constraints have appeared <ref> [5, 1, 2, 7, 14, 15, 30, 9] </ref>. These algorithms use a variety of interesting techniques and expose a rich structure touching on monadic second-order logic, automata on infinite trees, and combinatorics on hypergraphs. <p> Conversely, any Th M is a dual ideal and thus consistent by Lemma 6. 7 Solutions of Set Constraints In <ref> [19, 5, 1, 2, 7, 9, 14, 15, 30] </ref>, various techniques for the solution of systems of set constraints are given. Here we introduce yet another approach.
Reference: 31. <author> Y. Venema, </author> <title> Many-Dimensional Modal Logic, </title> <type> PhD thesis, </type> <institution> Universiteit van Ams-terdam, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: We show that these two classes of structures are Stone duals (see [18, 17]). We also identify a subfamily of term automata in which the topology is induced by labelings on the states. These models are quite similar to Kripke frames for modal or dynamic logic (see <ref> [10, 31, 17, 26] </ref>) and provide a semantics for a kind of multidimensional modal logic (cf. [31]). We give a completeness result for this logic. <p> We also identify a subfamily of term automata in which the topology is induced by labelings on the states. These models are quite similar to Kripke frames for modal or dynamic logic (see [10, 31, 17, 26]) and provide a semantics for a kind of multidimensional modal logic (cf. <ref> [31] </ref>). We give a completeness result for this logic.
Reference: 32. <author> J. Young and P. O'Keefe, </author> <title> Experience with a type evaluator, in Partial Evaluation and Mixed Computation, </title> <editor> D. Bjtrner, A. P. Ershov, and N. D. Jones, eds., </editor> <publisher> North-Holland, </publisher> <year> 1988, </year> <pages> pp. </pages> <month> 573-581. </month> <title> This article was processed using the L a T E X macro package with LLNCS style 14 </title>
Reference-contexts: 1 Introduction Set constraints are inclusion relations between sets of ground terms over a ranked alphabet. They have been used extensively in program analysis and type inference <ref> [29, 21, 27, 28, 32, 20, 3, 4] </ref>. Several algorithms for solving general systems of set constraints have appeared [5, 1, 2, 7, 14, 15, 30, 9].
References-found: 26

