URL: http://www.ececs.uc.edu/~paw/lab/theses/spandey.ps.gz
Refering-URL: http://www.ececs.uc.edu/~paw/lab/theses.html
Root-URL: 
Title: A Model for the Dynamic Semantics of VHDL for CAD Tool Optimization  by  
Author: Sheetanshu Pandey 
Degree: A thesis submitted to the  in partial fulfillment of the requirements for the degree of MASTER OF SCIENCE in the Department of Electrical and Computer Engineering and Computer Science of the College of Engineering  B.Tech, Indian Institute of Technology, Delhi, India, 1994 Thesis Advisor and Committee Chair: Dr. Philip A. Wilsey  
Date: December 6, 1995  
Affiliation: Division of Graduate Studies and Research of the University of Cincinnati  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Abramovici, M., Breuer, M. A., and Friedman, A. D. </author> <title> Digital Systems Testing and Testable Design, 1st ed. </title> <publisher> Computer Science Press, An imprint of W. H. Freeman and company, </publisher> <address> 41 Madison Avenue, New York, NY, </address> <year> 1990. </year>
Reference-contexts: For example, one verification technique is to simulate a model of the design (written in an HDL) and verify its functionality by comparing the simulator outputs against the expected outputs for certain key input vectors (since it is not practical to check for all possible inputs) <ref> [1] </ref>. Another method is to develop tools to directly synthesize a circuit from its high level HDL specification following the philosophy of "correct by construction" [19, 33].
Reference: [2] <author> Agerwala, T. </author> <title> Putting Petri Nets to Work. </title> <booktitle> Computer 12, </booktitle> <month> 12 (December </month> <year> 1979), </year> <pages> 85-94. </pages>
Reference-contexts: A more recent technique using Evolving Algebras developed by Gurevich [21] has been widely used in the specification of Ada [35], C [22], C++ [51] and Modula-2 [23]. Other popular techniques include Higher Order Logic and Petri Nets <ref> [2] </ref> which are discussed in greater detail in the next section. Almost all of the above techniques have been used in the specification of the semantics of VHDL. <p> The key difference is of course in the style being used (operational versus declarative). 2.2.3 Petri Nets Petri Nets, developed by C. A. Petri <ref> [2] </ref>, are powerful graphical schemes useful in modeling systems that exhibit concurrency and whose components show complex interactions and behaviors. Petri Net models of systems can be analyzed for behavior 14 using Petri Net theories.
Reference: [3] <author> Allen, J. F. </author> <title> An interval-based representation of temporal knowledge. </title> <booktitle> Proc. 7th Int. Joint Conf. on Artificial Intelligence (Aug. </booktitle> <year> 1981), </year> <pages> 221-226. </pages>
Reference-contexts: In this thesis a declarative formal definition for the dynamic aspects of VHDL'93 using a temporal logic developed by J. Allen <ref> [3, 4, 5] </ref> is presented. The semantics essentially establishes the minimum timing constraints that must be met for evaluating a VHDL description correctly. <p> An obvious application of such a semantics is its utility in CAD tool optimization. 18 Chapter 3 An Introduction to Temporal Logic In this chapter, an introduction to Allen's interval temporal logic <ref> [3, 4, 5] </ref> is presented. Although it is not a complete discussion, it introduces concepts that will be used in this work. This logic is selected for use because it organizes a universe by time intervals, relations between time intervals and by binding action (or assertions) to time intervals.
Reference: [4] <author> Allen, J. F. </author> <title> Maintaining knowledge about temporal intervals. </title> <journal> Communications of the ACM 26 (Nov. </journal> <year> 1983), </year> <pages> 832-843. </pages>
Reference-contexts: In this thesis a declarative formal definition for the dynamic aspects of VHDL'93 using a temporal logic developed by J. Allen <ref> [3, 4, 5] </ref> is presented. The semantics essentially establishes the minimum timing constraints that must be met for evaluating a VHDL description correctly. <p> An obvious application of such a semantics is its utility in CAD tool optimization. 18 Chapter 3 An Introduction to Temporal Logic In this chapter, an introduction to Allen's interval temporal logic <ref> [3, 4, 5] </ref> is presented. Although it is not a complete discussion, it introduces concepts that will be used in this work. This logic is selected for use because it organizes a universe by time intervals, relations between time intervals and by binding action (or assertions) to time intervals. <p> Allen has defined a set of axioms for the behavior of these predicates. Among these are axioms asserting that each relationship is mutually exclusive of the others; others define the transitivity of the predicates. A detailed discussion of these can be found in <ref> [4] </ref>. For the purpose of this thesis, the only critical issue is that for any given interval, t, there exists another interval for each predicate of the logic such that the predicate holds.
Reference: [5] <author> Allen, J. F. </author> <title> Towards a general theory of action and time. </title> <booktitle> Artificial Intelligence 23 (1984), </booktitle> <pages> 123-154. </pages>
Reference-contexts: In this thesis a declarative formal definition for the dynamic aspects of VHDL'93 using a temporal logic developed by J. Allen <ref> [3, 4, 5] </ref> is presented. The semantics essentially establishes the minimum timing constraints that must be met for evaluating a VHDL description correctly. <p> An obvious application of such a semantics is its utility in CAD tool optimization. 18 Chapter 3 An Introduction to Temporal Logic In this chapter, an introduction to Allen's interval temporal logic <ref> [3, 4, 5] </ref> is presented. Although it is not a complete discussion, it introduces concepts that will be used in this work. This logic is selected for use because it organizes a universe by time intervals, relations between time intervals and by binding action (or assertions) to time intervals.
Reference: [6] <author> Andrews, D., and Henhapl, W. </author> <title> Algol 60. </title> <booktitle> In Formal Specification and Software Development (Hemel Hempstead, </booktitle> <address> England, </address> <year> 1982), </year> <editor> D. Borger and C. B. Jones, Eds., </editor> <publisher> Prentice Hall International, </publisher> <pages> pp. 175-251. </pages>
Reference-contexts: Denotational semantics has been used in the formal specification of Pascal [47], Algol-60 [36] and Scheme [12]. VDM, a variant of denotational semantics has been used in the formal specification of Algol-60 [24] and Pascal <ref> [6] </ref>. A more recent technique using Evolving Algebras developed by Gurevich [21] has been widely used in the specification of Ada [35], C [22], C++ [51] and Modula-2 [23]. Other popular techniques include Higher Order Logic and Petri Nets [2] which are discussed in greater detail in the next section.
Reference: [7] <author> Barton, D. L. </author> <title> A functional characterization of elements of the VHDL simulation cycle. </title> <booktitle> In VHDL Users' Group Spring 1991 Conference (Cincinnati, </booktitle> <address> OH, </address> <month> April </month> <year> 1991), </year> <pages> pp. 91-96. </pages>
Reference-contexts: The application of formal methods towards the definition of the semantics of VHDL has been pursued since the late 1980s. Most of the investigations into formal definitions concentrate on defining the semantics from the point of view of executing a VHDL description (dynamic semantics) <ref> [7, 8, 9, 10, 11, 14, 15, 17, 30, 40, 44] </ref> though some efforts in addition address issues related to the semantics of static VHDL constructs such as well-formedness (static semantics) [37, 50]. <p> A characterization of the VHDL simulation kernel is provided in terms of semantic algebras and valuation functions that map states to consecutive states. Transport delays, inertial delays, and propagation of signal values are characterized but guarded signal assignments and communication between architectures are ignored. Barton <ref> [7] </ref> also provides a functional characterization of several of the language features but does not attempt to give a complete definition. Charaterizations of drivers, delayed signal assignments, resolution and type conversion functions are provided. No proof methods are investigated.
Reference: [8] <author> Belhadj, M., McConnell, R., and Le Guernic, P. </author> <title> A framework for macro- and micro-time to model VHDL attributes. </title> <booktitle> In Proc. of the European Design Automation Conference with EURO-VHDL '93 (CCH Hamburg, </booktitle> <address> Germany, </address> <month> September </month> <year> 1993), </year> <pages> pp. 520-525. </pages>
Reference-contexts: The application of formal methods towards the definition of the semantics of VHDL has been pursued since the late 1980s. Most of the investigations into formal definitions concentrate on defining the semantics from the point of view of executing a VHDL description (dynamic semantics) <ref> [7, 8, 9, 10, 11, 14, 15, 17, 30, 40, 44] </ref> though some efforts in addition address issues related to the semantics of static VHDL constructs such as well-formedness (static semantics) [37, 50].
Reference: [9] <author> Bickford, M. </author> <title> A formal semantics for VHDL and its use towards verifying a large design. </title> <type> Technical Report TM-92-0045, </type> <institution> Odyssey Research Associates, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: The application of formal methods towards the definition of the semantics of VHDL has been pursued since the late 1980s. Most of the investigations into formal definitions concentrate on defining the semantics from the point of view of executing a VHDL description (dynamic semantics) <ref> [7, 8, 9, 10, 11, 14, 15, 17, 30, 40, 44] </ref> though some efforts in addition address issues related to the semantics of static VHDL constructs such as well-formedness (static semantics) [37, 50].
Reference: [10] <author> Borger, E., Glasser, U., and Muller, W. </author> <title> The semantics of behavioral VHDL '93 descriptions. </title> <booktitle> In Proceedings of EURO-DAC '94/EURO-VHDL '94 (Grenoble, </booktitle> <address> France, </address> <month> September </month> <year> 1994). </year> <month> 75 </month>
Reference-contexts: The application of formal methods towards the definition of the semantics of VHDL has been pursued since the late 1980s. Most of the investigations into formal definitions concentrate on defining the semantics from the point of view of executing a VHDL description (dynamic semantics) <ref> [7, 8, 9, 10, 11, 14, 15, 17, 30, 40, 44] </ref> though some efforts in addition address issues related to the semantics of static VHDL constructs such as well-formedness (static semantics) [37, 50]. <p> Tools have been developed to automatically generate Petri Nets from VHDL descriptions and to perform analysis on these nets such as testing for liveness and deadlock using Petri Net theory. 15 2.2.4 Evolving Algebras Evolving Algebra machines [21]1 can be thought of as application of `pseudo code over abstract data' <ref> [10] </ref>. <p> This method is useful for modeling the execution of sequential statements in a process. Probably the most comprehensive semantics for VHDL '93 is provided by Borger et al <ref> [10] </ref> in terms of EA machines using an operational approach. To model the parallel execution of process statements under the control of a simulation kernel, Distributed EA machines are used.
Reference: [11] <author> Borrione, D. D., Pierre, L. V., and Salem, A. M. </author> <title> Formal verification of VHDL descriptions in the prevail environment. </title> <booktitle> IEEE Design & Test of Computers 9, </booktitle> <month> 2 (June </month> <year> 1992), </year> <pages> 42-56. </pages>
Reference-contexts: An alternate technique involves `proving' the correctness of designs based on sound mathematical principles. A standard technique is to prove the equivalence between a high level HDL specification of a circuit and a low implementation level HDL specification of the same <ref> [11, 50] </ref>. It is no wonder then that HDLs have become an indispensable tool for the hardware industry. <p> The application of formal methods towards the definition of the semantics of VHDL has been pursued since the late 1980s. Most of the investigations into formal definitions concentrate on defining the semantics from the point of view of executing a VHDL description (dynamic semantics) <ref> [7, 8, 9, 10, 11, 14, 15, 17, 30, 40, 44] </ref> though some efforts in addition address issues related to the semantics of static VHDL constructs such as well-formedness (static semantics) [37, 50]. <p> No formal proofs are demonstrated but the authors identify problems associated with formalizing the semantics in BML and suggest strategies to overcome them. A more successful attempt at proofs is made by Borrione et al <ref> [11] </ref>.
Reference: [12] <author> Clinger, A. </author> <title> Revised 4 report on the algorithmic language Scheme. </title> <type> 1-55. </type>
Reference-contexts: In this method, each program statement is associated with a meaning or denotation which is typically a function mapping the input to the output of the statement. Denotational semantics has been used in the formal specification of Pascal [47], Algol-60 [36] and Scheme <ref> [12] </ref>. VDM, a variant of denotational semantics has been used in the formal specification of Algol-60 [24] and Pascal [6]. A more recent technique using Evolving Algebras developed by Gurevich [21] has been widely used in the specification of Ada [35], C [22], C++ [51] and Modula-2 [23].
Reference: [13] <institution> Computer General Electronic Design Ltd. </institution> <note> The ELLA Language Reference Manual, 1990. Issue 4.0. </note>
Reference-contexts: The past decade has seen an explosion of HDLs emerging in the market; a few of them being CONLAN [43] and ELLA <ref> [13, 34] </ref> in Europe, and Verilog [48] and VHDL [29, 39, 42] in the US. Amongst these, the hardware description language VHDL has enjoyed widespread acceptance as a standard primarily due to the efforts of the United States Department of Defense (DoD).
Reference: [14] <author> Damm, W., Josko, B., and Schlor, R. </author> <title> A net-based semantics for VHDL. </title> <booktitle> In Proc. of the European Design Automation Conference with EURO-VHDL '93 (CCH Hamburg, </booktitle> <address> Germany, </address> <month> September </month> <year> 1993), </year> <pages> pp. 514-519. </pages>
Reference-contexts: The application of formal methods towards the definition of the semantics of VHDL has been pursued since the late 1980s. Most of the investigations into formal definitions concentrate on defining the semantics from the point of view of executing a VHDL description (dynamic semantics) <ref> [7, 8, 9, 10, 11, 14, 15, 17, 30, 40, 44] </ref> though some efforts in addition address issues related to the semantics of static VHDL constructs such as well-formedness (static semantics) [37, 50]. <p> Petri Net models of systems can be analyzed for behavior 14 using Petri Net theories. For example, a net corresponding to a VHDL description can be analyzed for properties such as liveness, deadlock, boundedness. Interpreted Petri Nets have been used by W. Damm et al. <ref> [14] </ref> to model designs specified in VHDL '87. In particular, a special class of Petri Nets, AADL nets, have been used. AADL nets are condition/event nets. Their transitions are labeled with the transformations on the state space and places are marked by predicates corresponding to the VHDL statements.
Reference: [15] <author> Davis, K. C. </author> <title> A denotational definition of the VHDL simulation kernel. </title> <booktitle> Proc. 11th Int. Symp. on Computer Hardware Description Languages (1993), </booktitle> <pages> 509-521. </pages>
Reference-contexts: The application of formal methods towards the definition of the semantics of VHDL has been pursued since the late 1980s. Most of the investigations into formal definitions concentrate on defining the semantics from the point of view of executing a VHDL description (dynamic semantics) <ref> [7, 8, 9, 10, 11, 14, 15, 17, 30, 40, 44] </ref> though some efforts in addition address issues related to the semantics of static VHDL constructs such as well-formedness (static semantics) [37, 50]. <p> In the case of VHDL, most of the work done in this area has been towards describing the 13 semantics of the simulation by representing the simulation kernel as a function. Davis <ref> [15] </ref> provides denotational specification of the simulation cycle for a limited subset of VHDL '87. A characterization of the VHDL simulation kernel is provided in terms of semantic algebras and valuation functions that map states to consecutive states.
Reference: [16] <author> Decamp, E. </author> <title> Methodology for the specification of temporal behaviours, applied to the formal verification of circuits. </title> <type> Tech. Rep. 580, </type> <institution> Laboratoire ARTEMIS IMAG, France, </institution> <year> 1986. </year>
Reference-contexts: In particular, the application of the semantics to speed up the time warp parallel VHDL simulator being developed at the University of Cincinnati will be investigated. Since the proofs presented herein have been rather tedious (though not complicated), mechanization of proof techniques such as those developed by <ref> [16] </ref> will be investigated.
Reference: [17] <author> Filippenko, I. V. </author> <title> VHDL verification in the state delta verification system (SDVS). </title> <booktitle> In 1991 International Workshop on Formal Verification in VLSI Design (January 1991). </booktitle>
Reference-contexts: The application of formal methods towards the definition of the semantics of VHDL has been pursued since the late 1980s. Most of the investigations into formal definitions concentrate on defining the semantics from the point of view of executing a VHDL description (dynamic semantics) <ref> [7, 8, 9, 10, 11, 14, 15, 17, 30, 40, 44] </ref> though some efforts in addition address issues related to the semantics of static VHDL constructs such as well-formedness (static semantics) [37, 50].
Reference: [18] <author> Fujimoto, R. </author> <title> Parallel discrete event simulation. </title> <journal> Communications of the ACM 33, </journal> <month> 10 (October </month> <year> 1990), </year> <pages> 30-53. </pages>
Reference-contexts: In this research, an attempt is made to define a semantics that is independent of the simulation cycle of VHDL hence providing a basis against which different simulation techniques could be developed and compared. For example, parallel simulators using distributed synchronization protocols such as time warp <ref> [18, 31] </ref> can be constructed against this definition. An operational definition of the simulation cycle totally disallows any such investigations. The nature of the semantics supports proofs of equivalences between a VHDL description and a reduced form (by the application of some reduction algebra).
Reference: [19] <author> Gajsky, D. D., Dutt, N. D., Wu, A. C.-H., and Lin, S. Y.-L. </author> <title> High Level Synthesis: Introduction to Chip and System Design. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Menlo Park, CA, </address> <year> 1992. </year>
Reference-contexts: Another method is to develop tools to directly synthesize a circuit from its high level HDL specification following the philosophy of "correct by construction" <ref> [19, 33] </ref>. In this approach, the high level specification and the transformation techniques used by the synthesis tools are assumed (or proved) to be correct and consequently the synthesized circuit faithfully implements the specification. An alternate technique involves `proving' the correctness of designs based on sound mathematical principles.
Reference: [20] <author> Gordon, M. </author> <title> Why higher order logic is a good formalism for specifying and verifying hardware. </title> <booktitle> Formal Aspects of VLSI design (1986), </booktitle> <pages> 153-177. </pages>
Reference-contexts: A popular language supporting Higher Order Logics is HOL. Specifications of digital circuits directly in HOL (rather than going through an intermediate HDL description) has been pursued in Cambridge, England by Gordon <ref> [20] </ref>. He argues that circuits can be formally described using pure logic and that the inference mechanisms available in the logic provide a means for proving properties of circuits. Gordon models a circuit as a conjunction of predicates each of which models a component in the circuit. <p> generic n-bit adders, sequential multipliers and flip-flops using the HOL proof assistant which is a manually guided tool that, given a theorem and a set of inference steps, asserts whether or not the inference steps constitutes a proof of the theorem. 1 This material has been presented from Gordon's work <ref> [20] </ref>. 12 Van Tassel [49, 50] takes a different approach.
Reference: [21] <author> Gurevich, Y. </author> <title> Evolving Algebras-A tutorial introduction. In Specification and Validaion Methods (1994), </title> <editor> E. Borger, Ed., </editor> <publisher> Oxford University Press, Oxford. </publisher>
Reference-contexts: Denotational semantics has been used in the formal specification of Pascal [47], Algol-60 [36] and Scheme [12]. VDM, a variant of denotational semantics has been used in the formal specification of Algol-60 [24] and Pascal [6]. A more recent technique using Evolving Algebras developed by Gurevich <ref> [21] </ref> has been widely used in the specification of Ada [35], C [22], C++ [51] and Modula-2 [23]. Other popular techniques include Higher Order Logic and Petri Nets [2] which are discussed in greater detail in the next section.
Reference: [22] <author> Gurevich, Y., and Huggins, J. </author> <title> The semantics of the C programming language. </title> <booktitle> In Computer Science Logic, </booktitle> <editor> E. Borger, H. K. Buning, G. Jager, S. Martini, and M. M. Richter, Eds. </editor> <publisher> Springer, </publisher> <year> 1993, </year> <pages> pp. 274-309. </pages> <note> (available by anonymous ftp at ftp.eecs.umich.edu (141.212.99.7) in root directory /groups/Ealgebras). </note>
Reference-contexts: VDM, a variant of denotational semantics has been used in the formal specification of Algol-60 [24] and Pascal [6]. A more recent technique using Evolving Algebras developed by Gurevich [21] has been widely used in the specification of Ada [35], C <ref> [22] </ref>, C++ [51] and Modula-2 [23]. Other popular techniques include Higher Order Logic and Petri Nets [2] which are discussed in greater detail in the next section. Almost all of the above techniques have been used in the specification of the semantics of VHDL.
Reference: [23] <author> Gurevich, Y., and Morris, J. </author> <title> Algebraic operational semantics and modula-2. </title> <booktitle> In SCSL'87, 1st Workshop on Computer Science Logic, LNCS 329 (1988), </booktitle> <editor> E. Borger, H. K. Buning, and M. M. Richter, Eds., </editor> <publisher> Springer, </publisher> <pages> pp. 81-101. </pages> <note> (available by anonymous ftp at ftp.eecs.umich.edu (141.212.99.7) in root directory /groups/Ealgebras ). 76 </note>
Reference-contexts: VDM, a variant of denotational semantics has been used in the formal specification of Algol-60 [24] and Pascal [6]. A more recent technique using Evolving Algebras developed by Gurevich [21] has been widely used in the specification of Ada [35], C [22], C++ [51] and Modula-2 <ref> [23] </ref>. Other popular techniques include Higher Order Logic and Petri Nets [2] which are discussed in greater detail in the next section. Almost all of the above techniques have been used in the specification of the semantics of VHDL.
Reference: [24] <author> Henhapl, W., and Jones, C. B. </author> <title> Algol 60. </title> <booktitle> In Formal Specification and Software Development (Hemel Hempstead, </booktitle> <address> England, </address> <year> 1982), </year> <editor> D. Borger and C. B. Jones, Eds., </editor> <publisher> Prentice Hall International, </publisher> <pages> pp. 141-73. </pages>
Reference-contexts: Denotational semantics has been used in the formal specification of Pascal [47], Algol-60 [36] and Scheme [12]. VDM, a variant of denotational semantics has been used in the formal specification of Algol-60 <ref> [24] </ref> and Pascal [6]. A more recent technique using Evolving Algebras developed by Gurevich [21] has been widely used in the specification of Ada [35], C [22], C++ [51] and Modula-2 [23].
Reference: [25] <author> Hoare, C. A. R. </author> <title> An axiomatic approach to computer programming. </title> <journal> Communications of the ACM 12, </journal> <month> 10 (Oct. </month> <year> 1969), </year> <pages> 576-580, 583. </pages>
Reference-contexts: This allows one to look at the end result of executing a program independent of the method of execution. Several techniques for specifying language semantics have been developed and they 10 can be used following either of the styles mentioned above. Axiomatic semantics <ref> [25] </ref> specify the semantics [25] in terms of assertions that hold at the end of control structures or whole procedures. Hoare and Wirth used this method to specify the semantics for a subset of Pascal [27]. <p> This allows one to look at the end result of executing a program independent of the method of execution. Several techniques for specifying language semantics have been developed and they 10 can be used following either of the styles mentioned above. Axiomatic semantics <ref> [25] </ref> specify the semantics [25] in terms of assertions that hold at the end of control structures or whole procedures. Hoare and Wirth used this method to specify the semantics for a subset of Pascal [27].
Reference: [26] <author> Hoare, C. A. R. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall International, UK, Ltd., </publisher> <year> 1985. </year>
Reference-contexts: Hoare and Wirth used this method to specify the semantics for a subset of Pascal [27]. Hoare is also known for his work on Communicating Sequential Processes which are used to specify concurrent behavior of computer systems and their interaction with their environment <ref> [26] </ref>. Denotational Semantics was developed at Oxford University by Dana Scott and Christopher Strachey [45, 46]. In this method, each program statement is associated with a meaning or denotation which is typically a function mapping the input to the output of the statement.
Reference: [27] <author> Hoare, C. A. R., and Wirth, N. </author> <title> An axiomatic definition of the programming language Pascal. </title> <journal> Acta Informatica 2 (1973), </journal> <pages> 335-355. </pages>
Reference-contexts: Axiomatic semantics [25] specify the semantics [25] in terms of assertions that hold at the end of control structures or whole procedures. Hoare and Wirth used this method to specify the semantics for a subset of Pascal <ref> [27] </ref>. Hoare is also known for his work on Communicating Sequential Processes which are used to specify concurrent behavior of computer systems and their interaction with their environment [26]. Denotational Semantics was developed at Oxford University by Dana Scott and Christopher Strachey [45, 46].
Reference: [28] <institution> IEEE Standard VHDL Language Reference Manual. </institution> <address> New York, NY, </address> <year> 1988. </year>
Reference-contexts: VHDL supports a hierarchical description of digital systems and can be used to describe arbitrarily large designs. The semantics of VHDL is described in the IEEE Standard VHDL Language Reference Manual (referred henceforth as the VHDL LRM or simply the LRM) <ref> [28, 29] </ref>. The LRM defines the syntax of VHDL in a notation similar to Backus Naur Form (BNF) [38] and presents the semantics in prose form.
Reference: [29] <institution> IEEE Standard VHDL Language Reference Manual. </institution> <address> New York, NY, </address> <year> 1993. </year>
Reference-contexts: The past decade has seen an explosion of HDLs emerging in the market; a few of them being CONLAN [43] and ELLA [13, 34] in Europe, and Verilog [48] and VHDL <ref> [29, 39, 42] </ref> in the US. Amongst these, the hardware description language VHDL has enjoyed widespread acceptance as a standard primarily due to the efforts of the United States Department of Defense (DoD). VHDL supports a hierarchical description of digital systems and can be used to describe arbitrarily large designs. <p> VHDL supports a hierarchical description of digital systems and can be used to describe arbitrarily large designs. The semantics of VHDL is described in the IEEE Standard VHDL Language Reference Manual (referred henceforth as the VHDL LRM or simply the LRM) <ref> [28, 29] </ref>. The LRM defines the syntax of VHDL in a notation similar to Backus Naur Form (BNF) [38] and presents the semantics in prose form.
Reference: [30] <author> Jamsek, D., and Bickford, M. </author> <title> Formal verification of VHDL. </title> <type> Technical Report TM-93-0060, </type> <institution> Odyssey Research Associates, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: The application of formal methods towards the definition of the semantics of VHDL has been pursued since the late 1980s. Most of the investigations into formal definitions concentrate on defining the semantics from the point of view of executing a VHDL description (dynamic semantics) <ref> [7, 8, 9, 10, 11, 14, 15, 17, 30, 40, 44] </ref> though some efforts in addition address issues related to the semantics of static VHDL constructs such as well-formedness (static semantics) [37, 50].
Reference: [31] <author> Jefferson, D. </author> <title> Virtual time. </title> <journal> ACM Transactions on Programming Languages and Systems 7, </journal> <month> 3 (July </month> <year> 1985), </year> <pages> 405-425. </pages>
Reference-contexts: In this research, an attempt is made to define a semantics that is independent of the simulation cycle of VHDL hence providing a basis against which different simulation techniques could be developed and compared. For example, parallel simulators using distributed synchronization protocols such as time warp <ref> [18, 31] </ref> can be constructed against this definition. An operational definition of the simulation cycle totally disallows any such investigations. The nature of the semantics supports proofs of equivalences between a VHDL description and a reduced form (by the application of some reduction algebra).
Reference: [32] <author> McBrayer, T., and Wilsey, P. A. </author> <title> Process combination to increase event granularity in parallel logic simulation. </title> <booktitle> In 9th International Parallel Processing Symposium (April 1995). </booktitle>
Reference-contexts: Furthermore, no one has attempted the validation of transformation techniques on VHDL descriptions. In this work, manipulations on VHDL such as process folding <ref> [32] </ref> are validated for some special cases. It is also believed that the operational approach of the currently available semantics and their characterization of the LRM simulation cycle complicates any investigations into different methods of simulating VHDL (eg., parallel simulation). <p> In a parallel VHDL simulator, each process is executed as a parallel thread where each of these threads need to communicate with each other. Process folding (proposed in <ref> [32] </ref>) is an optimization technique that combines two processes into a single process, thereby reducing the number of threads in the simulation which in turn speeds up the simulation. Results have indicated an improvement by a factor of 2.2 after folding. <p> The nature of the semantics supports proofs of equivalences between a VHDL description and a reduced form (by the application of some reduction algebra). Thus optimization techniques such as folding process statements for improving simulation performance can be formally defended <ref> [32] </ref>. Further, equivalences between descriptions at different levels of abstraction can be proved. Thus, a low level implementation can be verified against a high level specification of a circuit. This methodology is closely related to the work done by Van Tassel, Borrione and Gordon.
Reference: [33] <author> Micheli, G. D. </author> <title> Synthesis and Optimization of Digital Circuits. </title> <publisher> McGraw-Hill, Inc., </publisher> <address> New York, </address> <year> 1994. </year>
Reference-contexts: Another method is to develop tools to directly synthesize a circuit from its high level HDL specification following the philosophy of "correct by construction" <ref> [19, 33] </ref>. In this approach, the high level specification and the transformation techniques used by the synthesis tools are assumed (or proved) to be correct and consequently the synthesized circuit faithfully implements the specification. An alternate technique involves `proving' the correctness of designs based on sound mathematical principles.
Reference: [34] <author> Morison, J. K., Peeling, N. E., and Thorp, T. L. </author> <title> The design rational of ELLA, a hardware design and description language. </title> <booktitle> Proc. 7th Int. Conf. on Computer Hardware Description Languages (Aug. </booktitle> <year> 1985), </year> <pages> 303-320. </pages>
Reference-contexts: The past decade has seen an explosion of HDLs emerging in the market; a few of them being CONLAN [43] and ELLA <ref> [13, 34] </ref> in Europe, and Verilog [48] and VHDL [29, 39, 42] in the US. Amongst these, the hardware description language VHDL has enjoyed widespread acceptance as a standard primarily due to the efforts of the United States Department of Defense (DoD).
Reference: [35] <author> Morris, J., and Pottinger, G. </author> <title> Ada-Ariel semantics. </title> <publisher> Odyssey Research Associates, Inc., </publisher> <month> July </month> <year> 1990. </year> <note> (available by anonymous ftp at ftp.eecs.umich.edu (141.212.99.7) in root directory /groups/Ealgebras). </note>
Reference-contexts: VDM, a variant of denotational semantics has been used in the formal specification of Algol-60 [24] and Pascal [6]. A more recent technique using Evolving Algebras developed by Gurevich [21] has been widely used in the specification of Ada <ref> [35] </ref>, C [22], C++ [51] and Modula-2 [23]. Other popular techniques include Higher Order Logic and Petri Nets [2] which are discussed in greater detail in the next section. Almost all of the above techniques have been used in the specification of the semantics of VHDL.
Reference: [36] <author> Mosses, P. D. </author> <title> The mathematical semantics of ALGOL-60. </title> <type> Technical Monograph PRG-12, </type> <institution> Programming Research Group, </institution> <year> 1974. </year>
Reference-contexts: In this method, each program statement is associated with a meaning or denotation which is typically a function mapping the input to the output of the statement. Denotational semantics has been used in the formal specification of Pascal [47], Algol-60 <ref> [36] </ref> and Scheme [12]. VDM, a variant of denotational semantics has been used in the formal specification of Algol-60 [24] and Pascal [6].
Reference: [37] <author> Mueller, W. </author> <title> Approaching the denotational semantics of behavioural VHDL descriptions. </title> <booktitle> In Proc. of the 1st Asian Pacific Conference on Hardware Description Languages, Standards & Application (December 1993), </booktitle> <publisher> IEEE Press. </publisher>
Reference-contexts: formal definitions concentrate on defining the semantics from the point of view of executing a VHDL description (dynamic semantics) [7, 8, 9, 10, 11, 14, 15, 17, 30, 40, 44] though some efforts in addition address issues related to the semantics of static VHDL constructs such as well-formedness (static semantics) <ref> [37, 50] </ref>. Typically, the formal definitions developed so far only characterize a small subset of VHDL and rarely address issues related to the more complex features of VHDL such as shared variables, guarded signals, component interconnections, and so on. <p> Barton [7] also provides a functional characterization of several of the language features but does not attempt to give a complete definition. Charaterizations of drivers, delayed signal assignments, resolution and type conversion functions are provided. No proof methods are investigated. Mueller <ref> [37] </ref> has used denotational methods to describe the static semantics for a subset of the VHDL '93 standard, and an operational approach to describe the dynamic semantics. The denotational static semantics provided has a close relation with the syntax of VHDL.
Reference: [38] <author> Naur, P. </author> <title> Revised to the algorithmic language ALGOL-60. </title> <booktitle> Communications of the ACM 6 (1963), </booktitle> <pages> 1-20. </pages>
Reference-contexts: The semantics of VHDL is described in the IEEE Standard VHDL Language Reference Manual (referred henceforth as the VHDL LRM or simply the LRM) [28, 29]. The LRM defines the syntax of VHDL in a notation similar to Backus Naur Form (BNF) <ref> [38] </ref> and presents the semantics in prose form. <p> At first only informal methods were used to specify the syntax of early programming languages such as FORTRAN and COBOL. The Backus Naur Form (BNF) was first used to specify the syntax of Algol-60 <ref> [38] </ref>. Since then context-free grammars (similar to BNF) have been in wide use for specifying the syntax of programming languages. Specifications of the semantics of languages on the other hand have not enjoyed a similar success.
Reference: [39] <author> Navabi, Z. </author> <title> VHDL: Analysis and Modeling of Digital Systems. </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY, </address> <year> 1993. </year> <month> 77 </month>
Reference-contexts: The past decade has seen an explosion of HDLs emerging in the market; a few of them being CONLAN [43] and ELLA [13, 34] in Europe, and Verilog [48] and VHDL <ref> [29, 39, 42] </ref> in the US. Amongst these, the hardware description language VHDL has enjoyed widespread acceptance as a standard primarily due to the efforts of the United States Department of Defense (DoD). VHDL supports a hierarchical description of digital systems and can be used to describe arbitrarily large designs.
Reference: [40] <author> Olcoz, S., and Colom, J. M. </author> <title> Toward a formal semantics of IEEE Std. VHDL 1076. </title> <booktitle> In Proc. of the European Design Automation Conference with EURO-VHDL '93 (CCH Hamburg, </booktitle> <address> Germany, </address> <month> September </month> <year> 1993), </year> <pages> pp. 526-531. </pages>
Reference-contexts: The application of formal methods towards the definition of the semantics of VHDL has been pursued since the late 1980s. Most of the investigations into formal definitions concentrate on defining the semantics from the point of view of executing a VHDL description (dynamic semantics) <ref> [7, 8, 9, 10, 11, 14, 15, 17, 30, 40, 44] </ref> though some efforts in addition address issues related to the semantics of static VHDL constructs such as well-formedness (static semantics) [37, 50]. <p> However no proofs have yet been demonstrated. The characterization does not include multiple entity-architecture pairs, delta delays and structural descriptions. Only Signals and variables of type bit are considered. Olcoz and Colom <ref> [40] </ref> use colored Petri Nets (CP-nets) to model fully elaborated VHDL '87. The formalization is provided in terms of the colored net representations for (1) user-defined processes, (2) simulation kernel, and (3) communication between the simulation kernel and the user defined processes. <p> Though semantics of language constructs such as case statements, loop statements, and if statements have been formalized for other languages, similar work is almost non-existent in VHDL semantics (an operational characterization using Petri Nets by Olcoz and Colom <ref> [40] </ref> being an exception). Semantics of exit and next statements of VHDL are not available. Most of the formal definitions are for VHDL '87 and therefore do not characterize newer features such as postponed processes and shared variables.
Reference: [41] <author> Pandey, S. L., Benz, D. M., and Wilsey, P. A. </author> <title> Formalizing the static structures of HDLs for the optimization of CAD tools. </title> <journal> IEEE Transactions on CAD (1996). </journal> <note> (submitted). </note>
Reference-contexts: Therefore the semantic model provides a platform for comparing alternative and possibly more efficient techniques for simulating VHDL. This work is to be viewed as an extension of a larger effort to formalize the static and dynamic semantics of VHDL <ref> [41, 52, 53, 54, 55] </ref>. The static semantics have been defined for a mathematical representation of VHDL constructs (referred to as the Static Model). In particular, the semantics includes a set of well-formedness rules, equivalence axioms and a reduction algebra.
Reference: [42] <author> Perry, D. L. </author> <title> VHDL, 2nd ed. </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY, </address> <year> 1994. </year>
Reference-contexts: The past decade has seen an explosion of HDLs emerging in the market; a few of them being CONLAN [43] and ELLA [13, 34] in Europe, and Verilog [48] and VHDL <ref> [29, 39, 42] </ref> in the US. Amongst these, the hardware description language VHDL has enjoyed widespread acceptance as a standard primarily due to the efforts of the United States Department of Defense (DoD). VHDL supports a hierarchical description of digital systems and can be used to describe arbitrarily large designs. <p> Therefore there exists a need to develop a formal, well-defined, well understood, and complete specification of the semantics for the language. Furthermore, formal verification techniques using VHDL can be based only on a formal mathematical 1 It turns out that it refers to both. 2 For example, Perry <ref> [42] </ref> defines the semantics of the VHDL exit statement incorrectly. 3 representation of its semantics. The application of formal methods towards the definition of the semantics of VHDL has been pursued since the late 1980s.
Reference: [43] <author> Piloty, R., Barbacci, M., Borrione, D., Dietmeyer, D., Hill, F., and Skelly, P. </author> <title> CONLAN report. </title> <booktitle> In Lecture Notes in Computer Science, </booktitle> <volume> vol. 151. </volume> <publisher> Springer-Verlag, </publisher> <year> 1983. </year>
Reference-contexts: Therefore a need was felt to standardize HDLs so that a company could select one standard HDL for use and turn to CAD tool vendors for its support. The past decade has seen an explosion of HDLs emerging in the market; a few of them being CONLAN <ref> [43] </ref> and ELLA [13, 34] in Europe, and Verilog [48] and VHDL [29, 39, 42] in the US. Amongst these, the hardware description language VHDL has enjoyed widespread acceptance as a standard primarily due to the efforts of the United States Department of Defense (DoD).
Reference: [44] <author> Read, S. E. G., and Edwards, M. D. </author> <title> A formal semantics of VHDL in Boyer-Moore logic. </title> <booktitle> In Proc. of the Conf. on Concurrent Engineering and Electronic Design Automation (Poole, </booktitle> <address> Great Britain, </address> <year> 1994). </year>
Reference-contexts: The application of formal methods towards the definition of the semantics of VHDL has been pursued since the late 1980s. Most of the investigations into formal definitions concentrate on defining the semantics from the point of view of executing a VHDL description (dynamic semantics) <ref> [7, 8, 9, 10, 11, 14, 15, 17, 30, 40, 44] </ref> though some efforts in addition address issues related to the semantics of static VHDL constructs such as well-formedness (static semantics) [37, 50]. <p> These connectives can be used to model circuitry at the gate level. The logic is supported by the fully automatic Boyer Moore theorem prover which can be used to prove lemmas on appropriately chosen functions. Read and Edwards <ref> [44] </ref> present a translation of VHDL descriptions into an equivalent representation in Boyer Moore Logic as two stages. The first stage provides a denotational mapping of syntactic constructs of a VHDL description into functions in Boyer Moore Logic.
Reference: [45] <author> Scott, D., and Strachey, C. </author> <title> Towards a mathematical semantics for computer languages. </title> <booktitle> In Proceedings of Symposium on Computers and Automata (New York, United States, </booktitle> <year> 1971), </year> <editor> J. Fox, Ed., </editor> <publisher> Polytechnic Institute of Brooklyn Press, </publisher> <pages> pp. 19-46. </pages>
Reference-contexts: Hoare is also known for his work on Communicating Sequential Processes which are used to specify concurrent behavior of computer systems and their interaction with their environment [26]. Denotational Semantics was developed at Oxford University by Dana Scott and Christopher Strachey <ref> [45, 46] </ref>. In this method, each program statement is associated with a meaning or denotation which is typically a function mapping the input to the output of the statement. Denotational semantics has been used in the formal specification of Pascal [47], Algol-60 [36] and Scheme [12].
Reference: [46] <author> Stoy, J. E. </author> <title> Denotational Semantics: The Schott-Strachey Approach to Programming Language Theory. </title> <publisher> The MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1977. </year>
Reference-contexts: Hoare is also known for his work on Communicating Sequential Processes which are used to specify concurrent behavior of computer systems and their interaction with their environment [26]. Denotational Semantics was developed at Oxford University by Dana Scott and Christopher Strachey <ref> [45, 46] </ref>. In this method, each program statement is associated with a meaning or denotation which is typically a function mapping the input to the output of the statement. Denotational semantics has been used in the formal specification of Pascal [47], Algol-60 [36] and Scheme [12].
Reference: [47] <author> Tennent, R. D. </author> <title> A denotational definition of the programming language Pascal. </title> <type> Tech. Rep. 77-47, </type> <institution> Department of Computing and Information Sciences, Queens University, Kingston, </institution> <address> Ontario, Canada, </address> <year> 1978. </year>
Reference-contexts: In this method, each program statement is associated with a meaning or denotation which is typically a function mapping the input to the output of the statement. Denotational semantics has been used in the formal specification of Pascal <ref> [47] </ref>, Algol-60 [36] and Scheme [12]. VDM, a variant of denotational semantics has been used in the formal specification of Algol-60 [24] and Pascal [6].
Reference: [48] <author> Thomas, D. E., and Moorby, P. R. </author> <title> The Verilog Hardware Description Language. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year> <note> [49] van Tassel, </note> <author> J. P. </author> <title> A formalisation of the VHDL simulation cycle. </title> <type> Technical Report 249, </type> <institution> University of Cambridge Computer Laboratory, </institution> <month> March </month> <year> 1992. </year> <note> [50] van Tassel, </note> <author> J. P. Femto-VHDL: </author> <title> The Semantics of a Subset of VHDL and its Embedding in the HOL Proof Assistant. </title> <type> PhD thesis, </type> <institution> University of Cambridge Computer Laboratory, </institution> <address> Cambridge, England, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: The past decade has seen an explosion of HDLs emerging in the market; a few of them being CONLAN [43] and ELLA [13, 34] in Europe, and Verilog <ref> [48] </ref> and VHDL [29, 39, 42] in the US. Amongst these, the hardware description language VHDL has enjoyed widespread acceptance as a standard primarily due to the efforts of the United States Department of Defense (DoD).
Reference: [51] <author> Wallace, C. </author> <title> The semantics of the C++ programming language. In Specification and Validation Methods (1994), </title> <editor> D. Borger, Ed., </editor> <address> Oxford University Press. </address> <note> (available by anonymous ftp at ftp.eecs.umich.edu (141.212.99.7) in root directory /groups/Ealgebras </note> ). 
Reference-contexts: VDM, a variant of denotational semantics has been used in the formal specification of Algol-60 [24] and Pascal [6]. A more recent technique using Evolving Algebras developed by Gurevich [21] has been widely used in the specification of Ada [35], C [22], C++ <ref> [51] </ref> and Modula-2 [23]. Other popular techniques include Higher Order Logic and Petri Nets [2] which are discussed in greater detail in the next section. Almost all of the above techniques have been used in the specification of the semantics of VHDL.
Reference: [52] <author> Wilsey, P. A. </author> <title> Developing a formal semantic definition of VHDL. In VHDL for Simulation, Synthesis and Formal Proofs of Hardware, </title> <editor> J. Mermet, Ed. </editor> <publisher> Kluwer Academic Publishers, </publisher> <address> The Netherlands, </address> <year> 1992, </year> <pages> pp. 243-256. 78 </pages>
Reference-contexts: Therefore the semantic model provides a platform for comparing alternative and possibly more efficient techniques for simulating VHDL. This work is to be viewed as an extension of a larger effort to formalize the static and dynamic semantics of VHDL <ref> [41, 52, 53, 54, 55] </ref>. The static semantics have been defined for a mathematical representation of VHDL constructs (referred to as the Static Model). In particular, the semantics includes a set of well-formedness rules, equivalence axioms and a reduction algebra.
Reference: [53] <author> Wilsey, P. A. </author> <title> Formal models of digital systems compatible with VHDL, </title> <note> 1994. (available on the www at http://www.ece.uc.edu/~paw/rassp.html). </note>
Reference-contexts: Therefore the semantic model provides a platform for comparing alternative and possibly more efficient techniques for simulating VHDL. This work is to be viewed as an extension of a larger effort to formalize the static and dynamic semantics of VHDL <ref> [41, 52, 53, 54, 55] </ref>. The static semantics have been defined for a mathematical representation of VHDL constructs (referred to as the Static Model). In particular, the semantics includes a set of well-formedness rules, equivalence axioms and a reduction algebra. <p> Formally, this rule is stated as: 8 wa-stmt : wa-stmt 2 Wait-Stmts, 8 port : port 2 wa-stmt.sensitivity-list ^ port 2 Ports, (port.mode = in _ port.mode = inout) . A complete set of well-formedness rules are available in the working document <ref> [53] </ref> which is updated periodically. 4.3.3 Equivalence of Static Structures The LRM defines equivalences between certain constructs of VHDL. For example, every concurrent statement has an equivalent representation in the form of a process statement. The model includes a collection of axioms that assert these equivalences. <p> Again, for more detailed information, the reader is urged to refer to the working document <ref> [53] </ref>. 4.3.4 The Reduction Algebra A reduction algebra consistent with the equivalence axioms has been defined which builds a reduced form representation of the static model ( i.e., certain elements of VHDL are defined in the more primitive but equivalent elements). <p> postponed (wa) 9 pr: pr 2 Process-Statements, wa 2 (pr.ordered-statements) ^ pr.postponement = postponed where is a recursive function that, when applied to a sequence (pr.ordered-statements in this case), returns a set of all statements contained within the statements of the sequence ( is formally defined in the working document <ref> [53] </ref>). In order to terminate the evaluation of a wait statement, an event must occur on a signal or port in its sensitivity list and the condition must evaluate to true. <p> Static rewriting of nested exit statements 71 to equivalent forms with exit statements at only the highest level will be a topic for future investigation. Alternatively, nested exit statements could be incorporated into the semantics directly. Although well formedness issues for the static semantics have been formulated <ref> [53] </ref>, similar work has not been done for the dynamic model. For example, that a time expression cannot evaluate to a negative value at any stage of the simulation is an issue for well formedness. Future work will address these issues.
Reference: [54] <author> Wilsey, P. A., Benz, D. M., and Pandey, S. L. </author> <title> A model of VHDL for the analysis, transformation, and optimization of digital system designs. </title> <booktitle> In Conference on Hardware Description Languages (CHDL '95) (August 1995). </booktitle>
Reference-contexts: Therefore the semantic model provides a platform for comparing alternative and possibly more efficient techniques for simulating VHDL. This work is to be viewed as an extension of a larger effort to formalize the static and dynamic semantics of VHDL <ref> [41, 52, 53, 54, 55] </ref>. The static semantics have been defined for a mathematical representation of VHDL constructs (referred to as the Static Model). In particular, the semantics includes a set of well-formedness rules, equivalence axioms and a reduction algebra.
Reference: [55] <author> Wilsey, P. A., McBrayer, T. J., and Sims, D. </author> <title> Towards a formal of VLSI systems compatible with VHDL. </title> <booktitle> In VLSI 91 (Amsterdam, </booktitle> <address> The Netherlands, </address> <month> August </month> <year> 1991), </year> <editor> A. Halaas and P. B. Denyer, Eds., </editor> <publisher> Elsevier Science Publishers B. V. (North-Holland), </publisher> <pages> pp. 225-236. 79 </pages>
Reference-contexts: Therefore the semantic model provides a platform for comparing alternative and possibly more efficient techniques for simulating VHDL. This work is to be viewed as an extension of a larger effort to formalize the static and dynamic semantics of VHDL <ref> [41, 52, 53, 54, 55] </ref>. The static semantics have been defined for a mathematical representation of VHDL constructs (referred to as the Static Model). In particular, the semantics includes a set of well-formedness rules, equivalence axioms and a reduction algebra.
References-found: 53

