URL: http://www.cs.iastate.edu/tech-reports/TR90-04.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: 
Title: A Pseudorandum Oracle Characterization of BBP  
Author: Jack H. Lutz 
Date: April, 1990  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> K. Ambos-Spies, </author> <title> Randomness, relativizations, and polynomial reducibilities, </title> <booktitle> Proceedings of the First Structure in Complexity Theory Conference, </booktitle> <year> 1986, </year> <pages> pp. 23-34. </pages>
Reference-contexts: 1 Introduction The class BPP consists of those decision problems that are feasibly solvable by randomized algorithms. This class, defined by Gill [9], has been shown to admit a variety of equivalent definitions <ref> [2, 11, 32, 1, 31, 13, 30, 12, 28, 27] </ref>. A particularly elegant and useful characterization of BPP is the following. Theorem 1 (Bennett and Gill [2], Ambos-Spies [1]). <p> This class, defined by Gill [9], has been shown to admit a variety of equivalent definitions [2, 11, 32, 1, 31, 13, 30, 12, 28, 27]. A particularly elegant and useful characterization of BPP is the following. Theorem 1 (Bennett and Gill [2], Ambos-Spies <ref> [1] </ref>).
Reference: [2] <author> C. H. Bennett and J. Gill, </author> <title> Relative to a random oracle A, P A 6= NP A 6= co-NP A with probability 1, </title> <journal> SIAM Journal on Computing 10 (1981), </journal> <pages> pp. 96-113. 12 </pages>
Reference-contexts: 1 Introduction The class BPP consists of those decision problems that are feasibly solvable by randomized algorithms. This class, defined by Gill [9], has been shown to admit a variety of equivalent definitions <ref> [2, 11, 32, 1, 31, 13, 30, 12, 28, 27] </ref>. A particularly elegant and useful characterization of BPP is the following. Theorem 1 (Bennett and Gill [2], Ambos-Spies [1]). <p> This class, defined by Gill [9], has been shown to admit a variety of equivalent definitions [2, 11, 32, 1, 31, 13, 30, 12, 28, 27]. A particularly elegant and useful characterization of BPP is the following. Theorem 1 (Bennett and Gill <ref> [2] </ref>, Ambos-Spies [1]). <p> This result strengthens the intuition that pspace-random languages are "adequate sources" for all BPP problems. (Earlier, more asymptotic, evidence for this view appears in [17].) Our work also gives a more detailed analysis of the Bennett and Gill <ref> [2] </ref> result that P A = BPP A for almost every oracle A. Specifically, under every pspace-random oracle A, E A contains languages that are very hard to approximate with oracle circuits. <p> Since almost every oracle A is pspace-random, the result of Bennett and Gill <ref> [2] </ref> follows. Acknowledgment I thank Ron Book and other participants in an informal workshop in structural complexity theory, held in 1990 at the University of California in Santa Barbara, for their helpful remarks on this work. I also thank David Juedes and Elvira Mayordomo for useful observations on resource-bounded measure.
Reference: [3] <author> E. Borel, </author> <title> Sur les probabilites denombrables et leurs applications arithmetiques, Rend. Circ. Mat. </title> <booktitle> Palermo 26 (1909), </booktitle> <pages> pp. 247-271. </pages>
Reference-contexts: Lemma 7 (Borel <ref> [3] </ref>, Cantelli [4], Lutz [18]).
Reference: [4] <author> F. P. Cantelli, La tendenza ad un limite nel senzo del calcolo della probabilita, Rend. Circ. </author> <title> Mat. </title> <booktitle> Palermo 16 (1916), </booktitle> <pages> pp. 191-201. </pages>
Reference-contexts: Lemma 7 (Borel [3], Cantelli <ref> [4] </ref>, Lutz [18]).
Reference: [5] <author> G. J. Chaitin, </author> <title> A theory of program size formally identical to information theory, </title> <journal> Journal of the Association for Computing Machinery 22 (1975), </journal> <pages> pp. 329-340. </pages>
Reference-contexts: Of course every random oracle (i.e., every language whose characteristic sequence is algorithmically random in the equivalent senses of Martin-Lof [20], Levin [14], Schnorr [23], Chaitin <ref> [5, 6] </ref>, Solovay [26], and Shen 0 [24]) is pspace-random, so it follows immediately from the Main Theorem that every random oracle is P T -hard for BPP. Since almost every oracle is random [20], this in turn gives the (1) =) (2) part of Theorem 1.
Reference: [6] <author> G. J. Chaitin, </author> <title> Incompleteness theorems for random reals, </title> <booktitle> Advances in Applied Mathematics 8 (1987), </booktitle> <pages> pp. 119-146. </pages>
Reference-contexts: Of course every random oracle (i.e., every language whose characteristic sequence is algorithmically random in the equivalent senses of Martin-Lof [20], Levin [14], Schnorr [23], Chaitin <ref> [5, 6] </ref>, Solovay [26], and Shen 0 [24]) is pspace-random, so it follows immediately from the Main Theorem that every random oracle is P T -hard for BPP. Since almost every oracle is random [20], this in turn gives the (1) =) (2) part of Theorem 1.
Reference: [7] <author> H. Chernoff, </author> <title> A measure of asymptotic efficiency for tests of a hypothesis based on the sum of observations, </title> <journal> Annals of Mathematical Statistics 23 (1952), </journal> <pages> pp. 493-509. </pages>
Reference-contexts: fi fiOCIRC (2 ff (l)n ) fi fi 2 k ff (l) log k (4:7) for all l; n 2 N with n n 1 . (The constant n 1 does not depend upon l here because ff (l) &lt; 1 3 for all l.) By the Chernoff bound (see <ref> [7, 8, 10] </ref>), jDELTA (l; n)j 2 k k ; (4:8) where = (1 " 2 ) 1 1 " " 1 ; " = k ff (l) : (4:9) Calculating with Taylor approximations, we have 1 + " = (1 2" + o (")) " = e " ln (12"+o
Reference: [8] <author> P. Erdos and J. Spencer, </author> <title> Probabilistic Methods in Combinatorics, </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1974. </year>
Reference-contexts: fi fiOCIRC (2 ff (l)n ) fi fi 2 k ff (l) log k (4:7) for all l; n 2 N with n n 1 . (The constant n 1 does not depend upon l here because ff (l) &lt; 1 3 for all l.) By the Chernoff bound (see <ref> [7, 8, 10] </ref>), jDELTA (l; n)j 2 k k ; (4:8) where = (1 " 2 ) 1 1 " " 1 ; " = k ff (l) : (4:9) Calculating with Taylor approximations, we have 1 + " = (1 2" + o (")) " = e " ln (12"+o
Reference: [9] <author> J. Gill, </author> <title> Computational complexity of probabilistic Turing machines, </title> <journal> SIAM Journal on Computing 6 (1977), </journal> <pages> pp. 675-695. </pages>
Reference-contexts: 1 Introduction The class BPP consists of those decision problems that are feasibly solvable by randomized algorithms. This class, defined by Gill <ref> [9] </ref>, has been shown to admit a variety of equivalent definitions [2, 11, 32, 1, 31, 13, 30, 12, 28, 27]. A particularly elegant and useful characterization of BPP is the following. Theorem 1 (Bennett and Gill [2], Ambos-Spies [1]).
Reference: [10] <author> T. Hagerup and C. Rub, </author> <title> A guided tour of Chernoff bounds, </title> <booktitle> Information Processing Letters 33 (1990), </booktitle> <pages> pp. 305-308. </pages>
Reference-contexts: fi fiOCIRC (2 ff (l)n ) fi fi 2 k ff (l) log k (4:7) for all l; n 2 N with n n 1 . (The constant n 1 does not depend upon l here because ff (l) &lt; 1 3 for all l.) By the Chernoff bound (see <ref> [7, 8, 10] </ref>), jDELTA (l; n)j 2 k k ; (4:8) where = (1 " 2 ) 1 1 " " 1 ; " = k ff (l) : (4:9) Calculating with Taylor approximations, we have 1 + " = (1 2" + o (")) " = e " ln (12"+o
Reference: [11] <author> P. Hinman and S. Zachos, </author> <title> Probabilistic machines, oracles and quantifiers, </title> <booktitle> Proceedings, Oberwolfach Recursion-Theoretic Week, Lecture Notes in Mathematics, </booktitle> <volume> Vol. 1141, </volume> <year> 1984, </year> <pages> pp. 159-192, </pages> <address> New York/Berlin. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: 1 Introduction The class BPP consists of those decision problems that are feasibly solvable by randomized algorithms. This class, defined by Gill [9], has been shown to admit a variety of equivalent definitions <ref> [2, 11, 32, 1, 31, 13, 30, 12, 28, 27] </ref>. A particularly elegant and useful characterization of BPP is the following. Theorem 1 (Bennett and Gill [2], Ambos-Spies [1]).
Reference: [12] <author> J. Kamper, </author> <title> Non-uniform proof systems: A new framework to describe non-uniform and probabilistic complexity classes, </title> <booktitle> Proceedings of the Eighth Conference on Foundations of Software Technology and Theoretical Computer Science, </booktitle> <year> 1988, </year> <pages> pp. 193-210. </pages>
Reference-contexts: 1 Introduction The class BPP consists of those decision problems that are feasibly solvable by randomized algorithms. This class, defined by Gill [9], has been shown to admit a variety of equivalent definitions <ref> [2, 11, 32, 1, 31, 13, 30, 12, 28, 27] </ref>. A particularly elegant and useful characterization of BPP is the following. Theorem 1 (Bennett and Gill [2], Ambos-Spies [1]).
Reference: [13] <author> S. Kurtz, </author> <title> A note on randomized polynomial time, </title> <journal> SIAM Journal on Computing 16 (1987), </journal> <pages> pp. 852-853. </pages>
Reference-contexts: 1 Introduction The class BPP consists of those decision problems that are feasibly solvable by randomized algorithms. This class, defined by Gill [9], has been shown to admit a variety of equivalent definitions <ref> [2, 11, 32, 1, 31, 13, 30, 12, 28, 27] </ref>. A particularly elegant and useful characterization of BPP is the following. Theorem 1 (Bennett and Gill [2], Ambos-Spies [1]).
Reference: [14] <author> L. A. Levin, </author> <title> On the notion of a random sequence, </title> <journal> Soviet Mathematics Doklady 14 (1973), </journal> <pages> pp. 1413-1416. </pages>
Reference-contexts: Of course every random oracle (i.e., every language whose characteristic sequence is algorithmically random in the equivalent senses of Martin-Lof [20], Levin <ref> [14] </ref>, Schnorr [23], Chaitin [5, 6], Solovay [26], and Shen 0 [24]) is pspace-random, so it follows immediately from the Main Theorem that every random oracle is P T -hard for BPP.
Reference: [15] <author> J. H. Lutz, </author> <title> Almost everywhere high nonuniform complexity, </title> <booktitle> Proceedings of the Fourth Structure in Complexity Theory Conference, </booktitle> <year> 1989, </year> <pages> pp. 37-53. </pages>
Reference-contexts: = ff : f0; 1g fl ! f0; 1g fl j f is computable in polynomial spaceg: (The length jf (x)j of the output is included as part of the space used in computing f .) Resource-bounded measure and pseudorandomness were originally developed in terms of "modulated covering by cylinders" <ref> [16, 17, 15] </ref>. Though the main results of these papers are true, the underlying development was technically flawed. This situation was remedied in [18], where resource-bounded measure was reformulated in terms of density functions. We review relevant aspects of the latter formulation here.
Reference: [16] <author> J. H. Lutz, </author> <title> Category and measure in complexity classes, </title> <journal> SIAM Journal on Computing 19 (1990), </journal> <pages> pp. 1100-1131. </pages>
Reference-contexts: = ff : f0; 1g fl ! f0; 1g fl j f is computable in polynomial spaceg: (The length jf (x)j of the output is included as part of the space used in computing f .) Resource-bounded measure and pseudorandomness were originally developed in terms of "modulated covering by cylinders" <ref> [16, 17, 15] </ref>. Though the main results of these papers are true, the underlying development was technically flawed. This situation was remedied in [18], where resource-bounded measure was reformulated in terms of density functions. We review relevant aspects of the latter formulation here.
Reference: [17] <author> J. H. Lutz, </author> <title> Pseudorandom sources for BPP, </title> <journal> Journal of Computer and System Sciences 41 (1990), </journal> <pages> pp. 307-320. </pages>
Reference-contexts: = ff : f0; 1g fl ! f0; 1g fl j f is computable in polynomial spaceg: (The length jf (x)j of the output is included as part of the space used in computing f .) Resource-bounded measure and pseudorandomness were originally developed in terms of "modulated covering by cylinders" <ref> [16, 17, 15] </ref>. Though the main results of these papers are true, the underlying development was technically flawed. This situation was remedied in [18], where resource-bounded measure was reformulated in terms of density functions. We review relevant aspects of the latter formulation here. <p> This result strengthens the intuition that pspace-random languages are "adequate sources" for all BPP problems. (Earlier, more asymptotic, evidence for this view appears in <ref> [17] </ref>.) Our work also gives a more detailed analysis of the Bennett and Gill [2] result that P A = BPP A for almost every oracle A. Specifically, under every pspace-random oracle A, E A contains languages that are very hard to approximate with oracle circuits.
Reference: [18] <author> J. H. Lutz, </author> <title> Almost everywhere high nonuniform complexity, </title> <journal> Journal of Computer and System Sciences, </journal> <note> to appear. 13 </note>
Reference-contexts: following conditions are equivalent. (1) L 2 BPP. (2) The set of oracles A for which L 2 P A has pspace-measure 1. (3) For every pspace-random oracle A, L 2 P A . (Conditions (2) and (3) here refer to the resource-bounded measure theory and measure-theoretic pseudorandomness of Lutz <ref> [18] </ref>; see x3 below for details.) Intuitively, the Main Theorem says that every sufficiently random oracle is P T -hard for BPP, and that pspace-randomness is sufficient here. <p> Since almost every oracle is random [20], this in turn gives the (1) =) (2) part of Theorem 1. However, the Main Theorem is much stronger than this. For example, since every pspace-measure 1 set has measure 1 in ESPACE = DSPACE (2 linear ) <ref> [18] </ref>, the (1) =) (2) part of the Main Theorem tells us that for each L 2 BPP, L is P T -reducible to almost every A 2 ESPACE. Similarly, since almost every language in E 2 SPACE = DSPACE (2 polynomial ) is pspace-random [18], the (1) =) (3) part <p> = DSPACE (2 linear ) <ref> [18] </ref>, the (1) =) (2) part of the Main Theorem tells us that for each L 2 BPP, L is P T -reducible to almost every A 2 ESPACE. Similarly, since almost every language in E 2 SPACE = DSPACE (2 polynomial ) is pspace-random [18], the (1) =) (3) part of the Main Theorem tells us that almost every language in E 2 SPACE is P T -hard for BPP. <p> If (1) holds, then P A = BPP A implies L 2 P A , so (2) follows by Corollary 4. If (2) holds, then (3) holds because every pspace-random language is, by definition, an element of every pspace-measure 1 set <ref> [18] </ref>. Finally, almost every oracle A is pspace-random [18], so (1) follows from (3) by the (2) =) (1) part of Theorem 1. 2 The relationship between pseudorandom generators and pseudorandom oracles is a particularly interesting aspect of this proof. <p> If (1) holds, then P A = BPP A implies L 2 P A , so (2) follows by Corollary 4. If (2) holds, then (3) holds because every pspace-random language is, by definition, an element of every pspace-measure 1 set <ref> [18] </ref>. Finally, almost every oracle A is pspace-random [18], so (1) follows from (3) by the (2) =) (1) part of Theorem 1. 2 The relationship between pseudorandom generators and pseudorandom oracles is a particularly interesting aspect of this proof. <p> For more details, examples, and proofs, see <ref> [18] </ref>. We work two alphabets, the binary alphabet f0; 1g and the extended binary alphabet = f0; 1; ?g. The symbol ? ("bottom") denotes an "undefined bit." We fix the partial ordering v of in which ? v 0, ? v 1, and 0 and 1 are incomparable. <p> Though the main results of these papers are true, the underlying development was technically flawed. This situation was remedied in <ref> [18] </ref>, where resource-bounded measure was reformulated in terms of density functions. We review relevant aspects of the latter formulation here. A density function is a function d : f0; 1g fl ! [0; 1) satisfying d (x) 2 for all x 2 f0; 1g fl . <p> A null cover of a set X of languages is a 1-DS d such that, for all k 2 N, d k covers X with global value d k () 2 k . 5 It is easy to show <ref> [18] </ref> that a set X of languages has classical Lebesgue measure 0 (i.e., probability 0 in the coin-tossing random experiment) if and only if there exists a null cover of X. In this paper we are interested in the situation where the null cover d is pspace-computable. Definitions. <p> In this case, we say that X contains almost every language in ESPACE. It is shown in <ref> [18] </ref> that these definitions endow ESPACE with internal measure-theoretic structure. <p> More importantly, it is shown that the ideal I ESPACE is a proper ideal, i.e., that ESPACE does not have measure 0 in ESPACE. Our proof of Theorem 3 does not proceed directly from the above definitions. Instead we use a sufficient condition, proved in <ref> [18] </ref>, for a set to have pspace-measure 0. To state this condition we need a polynomial notion of convergence for infinite series. All our series here consist of nonnegative terms. <p> Lemma 7 (Borel [3], Cantelli [4], Lutz <ref> [18] </ref>). <p> A language A passes a pspace-test X if A 2 X. A language A is pspace-random, and we write A 2 RAND (pspace), if A passes all pspace-tests. That is, RAND (pspace) = " pspace (X)=1 X: Since every finite subset of ESPACE has pspace-measure 0 <ref> [18] </ref>, it is immediate that RAND (pspace) " ESPACE = ;: (3:2) Moreover, every pspace-random language has essentially maximum circuit-size complexity and space-bounded Kolmogorov complexity [18]. Intuitively, pspace-random languages are "random enough for all pspace-computable purposes." On the other hand, pspace-random languages may be computable. <p> That is, RAND (pspace) = " pspace (X)=1 X: Since every finite subset of ESPACE has pspace-measure 0 <ref> [18] </ref>, it is immediate that RAND (pspace) " ESPACE = ;: (3:2) Moreover, every pspace-random language has essentially maximum circuit-size complexity and space-bounded Kolmogorov complexity [18]. Intuitively, pspace-random languages are "random enough for all pspace-computable purposes." On the other hand, pspace-random languages may be computable. In fact, notwithstanding (3.2), almost every language in E 2 SPACE = DSPACE (2 polynomial ) is pspace-random [18]. 4 Hardness Under Pseudorandom Oracles In this section we prove Theorem 3. <p> every pspace-random language has essentially maximum circuit-size complexity and space-bounded Kolmogorov complexity <ref> [18] </ref>. Intuitively, pspace-random languages are "random enough for all pspace-computable purposes." On the other hand, pspace-random languages may be computable. In fact, notwithstanding (3.2), almost every language in E 2 SPACE = DSPACE (2 polynomial ) is pspace-random [18]. 4 Hardness Under Pseudorandom Oracles In this section we prove Theorem 3.
Reference: [19] <author> J. H. Lutz and W. J. Schmidt, </author> <title> Circuit size relative to pseudorandom oracles, </title> <note> Theoretical Computer Science, to appear. </note>
Reference-contexts: (Here L =n denotes L " f0; 1g n hardness of L relative to A is the function H A L : N ! N defined by H A L (n) = maxfh 2 N j L is (h 1 ; h) A -hard at ng: 2 (See [29] or <ref> [19] </ref> for details concerning oracle circuits.) Thus a language L is (ffi; s) A -hard at n if fl A computes L incorrectly on at least 50 (1 ffi) percent of the inputs in f0; 1g n , whenever fl is an n-input oracle circuit of size s. <p> that d j;k () fi fiOCIRC (2 ff (l)n ) fi fi jDELTA (l; n)j 2 k : (4:6) A routine counting argument shows that fi fiOCIRC (2 ff (l)n ) fi fi a (4ek ff (l) ) k ff (l) where a = 2685. (This is Lemma 4.2 of <ref> [19] </ref>.) It follows that there is a constant n 1 2 N such that fi fi fiOCIRC (2 ff (l)n ) fi fi 2 k ff (l) log k (4:7) for all l; n 2 N with n n 1 . (The constant n 1 does not depend upon l here
Reference: [20] <author> P. Martin-Lof, </author> <title> On the definition of random sequences, </title> <booktitle> Information and Control 9 (1966), </booktitle> <pages> pp. 602-619. </pages>
Reference-contexts: Of course every random oracle (i.e., every language whose characteristic sequence is algorithmically random in the equivalent senses of Martin-Lof <ref> [20] </ref>, Levin [14], Schnorr [23], Chaitin [5, 6], Solovay [26], and Shen 0 [24]) is pspace-random, so it follows immediately from the Main Theorem that every random oracle is P T -hard for BPP. Since almost every oracle is random [20], this in turn gives the (1) =) (2) part of <p> sequence is algorithmically random in the equivalent senses of Martin-Lof <ref> [20] </ref>, Levin [14], Schnorr [23], Chaitin [5, 6], Solovay [26], and Shen 0 [24]) is pspace-random, so it follows immediately from the Main Theorem that every random oracle is P T -hard for BPP. Since almost every oracle is random [20], this in turn gives the (1) =) (2) part of Theorem 1. However, the Main Theorem is much stronger than this.
Reference: [21] <author> N. Nisan and A. Wigderson, </author> <title> Hardness vs. randomness, </title> <booktitle> Proceedings of the 29th IEEE Symposium on Foundations of Computer Science, </booktitle> <year> 1988, </year> <pages> pp. 2-11. </pages>
Reference-contexts: In fact, our proof tells us more, namely that almost every language A 2 ESPACE is P T -hard for BPP A . 2 Overview of Proof The following notion of hardness relative to oracle circuits is central to the proof of the Main Theorem. Definition (Nisan and Wigderson <ref> [21, 22] </ref>). <p> That is, we have the following. Theorem 2 (Nisan and Wigderson <ref> [21, 22] </ref>). For every oracle A and every 0 &lt; ff &lt; 1, if E A " H A ff 6= ;, then P A = BPP A . 2 The proof of Theorem 2, a relativization of arguments in [21, 22], will not be given here. <p> Theorem 2 (Nisan and Wigderson <ref> [21, 22] </ref>). For every oracle A and every 0 &lt; ff &lt; 1, if E A " H A ff 6= ;, then P A = BPP A . 2 The proof of Theorem 2, a relativization of arguments in [21, 22], will not be given here. The following result, which is the main technical content of this paper, will be proven in x4. <p> Specifically, under every pspace-random oracle A, E A contains languages that are very hard to approximate with oracle circuits. Such a hard language can, by the work of Nisan and Wigderson <ref> [21, 22] </ref>, be used to construct a pseudo random generator that is quick enough and secure enough to establish P A = BPP A . Since almost every oracle A is pspace-random, the result of Bennett and Gill [2] follows.
Reference: [22] <author> N. Nisan and A. Wigderson, </author> <title> Hardness vs. randomness, </title> <note> submitted. </note>
Reference-contexts: In fact, our proof tells us more, namely that almost every language A 2 ESPACE is P T -hard for BPP A . 2 Overview of Proof The following notion of hardness relative to oracle circuits is central to the proof of the Main Theorem. Definition (Nisan and Wigderson <ref> [21, 22] </ref>). <p> That is, we have the following. Theorem 2 (Nisan and Wigderson <ref> [21, 22] </ref>). For every oracle A and every 0 &lt; ff &lt; 1, if E A " H A ff 6= ;, then P A = BPP A . 2 The proof of Theorem 2, a relativization of arguments in [21, 22], will not be given here. <p> Theorem 2 (Nisan and Wigderson <ref> [21, 22] </ref>). For every oracle A and every 0 &lt; ff &lt; 1, if E A " H A ff 6= ;, then P A = BPP A . 2 The proof of Theorem 2, a relativization of arguments in [21, 22], will not be given here. The following result, which is the main technical content of this paper, will be proven in x4. <p> Specifically, under every pspace-random oracle A, E A contains languages that are very hard to approximate with oracle circuits. Such a hard language can, by the work of Nisan and Wigderson <ref> [21, 22] </ref>, be used to construct a pseudo random generator that is quick enough and secure enough to establish P A = BPP A . Since almost every oracle A is pspace-random, the result of Bennett and Gill [2] follows.
Reference: [23] <author> C. P. Schnorr, </author> <title> Process complexity and effective random tests, </title> <journal> Journal of Computer and System Sciences 7 (1973), </journal> <pages> pp. 376-388. </pages>
Reference-contexts: Of course every random oracle (i.e., every language whose characteristic sequence is algorithmically random in the equivalent senses of Martin-Lof [20], Levin [14], Schnorr <ref> [23] </ref>, Chaitin [5, 6], Solovay [26], and Shen 0 [24]) is pspace-random, so it follows immediately from the Main Theorem that every random oracle is P T -hard for BPP. Since almost every oracle is random [20], this in turn gives the (1) =) (2) part of Theorem 1.
Reference: [24] <author> A. Kh. </author> <title> Shen 0 , On relations between different algorithmic definitions of randomness, </title> <journal> Soviet Mathematics Doklady 38 (1989), </journal> <pages> pp. 316-319. </pages>
Reference-contexts: Of course every random oracle (i.e., every language whose characteristic sequence is algorithmically random in the equivalent senses of Martin-Lof [20], Levin [14], Schnorr [23], Chaitin [5, 6], Solovay [26], and Shen 0 <ref> [24] </ref>) is pspace-random, so it follows immediately from the Main Theorem that every random oracle is P T -hard for BPP. Since almost every oracle is random [20], this in turn gives the (1) =) (2) part of Theorem 1. However, the Main Theorem is much stronger than this.
Reference: [25] <author> M. Sipser, </author> <title> A complexity-theoretic approach to randomness, </title> <booktitle> Proceedings of the 15th ACM Symposium on Theory of Computing, </booktitle> <year> 1983, </year> <pages> pp. 330-335. </pages>
Reference-contexts: Since BPP is countable, Theorem 1 implies that almost every oracle is P T -hard for BPP. Nevertheless, Theorem 1 gives no information regarding which oracles are P T -hard for BPP. (The inclusion BPP P 2 of Sipser and Gacs <ref> [25] </ref> implies that oracles that are P T -hard for P 2 " P have this property, but by Theorem 1 this is only a measure 0 set of oracles, unless BPP = P 2 .) In this paper we refine Theorem 1 by proving the following. Main Theorem.
Reference: [26] <author> R. M. Solovay, </author> <year> 1975, </year> <note> reported in [6]. </note>
Reference-contexts: Of course every random oracle (i.e., every language whose characteristic sequence is algorithmically random in the equivalent senses of Martin-Lof [20], Levin [14], Schnorr [23], Chaitin [5, 6], Solovay <ref> [26] </ref>, and Shen 0 [24]) is pspace-random, so it follows immediately from the Main Theorem that every random oracle is P T -hard for BPP. Since almost every oracle is random [20], this in turn gives the (1) =) (2) part of Theorem 1.
Reference: [27] <author> S. Tang and R. </author> <title> Book, Polynomial-time reducibilities and "almost-all" oracle sets, </title> <note> Theoretical Computer Science (1991), to appear. </note>
Reference-contexts: 1 Introduction The class BPP consists of those decision problems that are feasibly solvable by randomized algorithms. This class, defined by Gill [9], has been shown to admit a variety of equivalent definitions <ref> [2, 11, 32, 1, 31, 13, 30, 12, 28, 27] </ref>. A particularly elegant and useful characterization of BPP is the following. Theorem 1 (Bennett and Gill [2], Ambos-Spies [1]).
Reference: [28] <author> S. Tang and O. Watanabe, </author> <title> On tally relativizations of BP-complexity classes, </title> <journal> SIAM Journal on Computing 18 (1989), </journal> <pages> pp. 449-462. </pages>
Reference-contexts: 1 Introduction The class BPP consists of those decision problems that are feasibly solvable by randomized algorithms. This class, defined by Gill [9], has been shown to admit a variety of equivalent definitions <ref> [2, 11, 32, 1, 31, 13, 30, 12, 28, 27] </ref>. A particularly elegant and useful characterization of BPP is the following. Theorem 1 (Bennett and Gill [2], Ambos-Spies [1]).
Reference: [29] <author> C. B. Wilson, </author> <title> Relativized circuit complexity, </title> <journal> Journal of Computer and System Sciences 31 (1985), </journal> <pages> pp. 169-181. </pages>
Reference-contexts: (fl) s. (Here L =n denotes L " f0; 1g n hardness of L relative to A is the function H A L : N ! N defined by H A L (n) = maxfh 2 N j L is (h 1 ; h) A -hard at ng: 2 (See <ref> [29] </ref> or [19] for details concerning oracle circuits.) Thus a language L is (ffi; s) A -hard at n if fl A computes L incorrectly on at least 50 (1 ffi) percent of the inputs in f0; 1g n , whenever fl is an n-input oracle circuit of size s.
Reference: [30] <author> S. Zachos, </author> <title> Probabilistic quantifiers and games, </title> <journal> Journal of Computer and System Sciences 36 (1988), </journal> <pages> pp. 433-451. </pages>
Reference-contexts: 1 Introduction The class BPP consists of those decision problems that are feasibly solvable by randomized algorithms. This class, defined by Gill [9], has been shown to admit a variety of equivalent definitions <ref> [2, 11, 32, 1, 31, 13, 30, 12, 28, 27] </ref>. A particularly elegant and useful characterization of BPP is the following. Theorem 1 (Bennett and Gill [2], Ambos-Spies [1]).
Reference: [31] <author> S. Zachos and M. Furer, </author> <title> Probabilistic quantifiers vs. </title> <booktitle> distrustful adversaries, Proceedings of the Seventh Conference on Foundations of Software Technology and Theoretical Computer Science, </booktitle> <year> 1987, </year> <pages> pp. 443-455. </pages>
Reference-contexts: 1 Introduction The class BPP consists of those decision problems that are feasibly solvable by randomized algorithms. This class, defined by Gill [9], has been shown to admit a variety of equivalent definitions <ref> [2, 11, 32, 1, 31, 13, 30, 12, 28, 27] </ref>. A particularly elegant and useful characterization of BPP is the following. Theorem 1 (Bennett and Gill [2], Ambos-Spies [1]).
Reference: [32] <author> S. Zachos and H. Heller, </author> <title> A decisive characterization of BPP, </title> <booktitle> Information and Control 69 (1986), </booktitle> <pages> pp. 125-135. </pages>
Reference-contexts: 1 Introduction The class BPP consists of those decision problems that are feasibly solvable by randomized algorithms. This class, defined by Gill [9], has been shown to admit a variety of equivalent definitions <ref> [2, 11, 32, 1, 31, 13, 30, 12, 28, 27] </ref>. A particularly elegant and useful characterization of BPP is the following. Theorem 1 (Bennett and Gill [2], Ambos-Spies [1]).
References-found: 32

