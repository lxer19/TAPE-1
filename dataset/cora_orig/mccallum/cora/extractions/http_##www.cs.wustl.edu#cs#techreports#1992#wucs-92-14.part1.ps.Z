URL: http://www.cs.wustl.edu/cs/techreports/1992/wucs-92-14.part1.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: http://www.cs.wustl.edu
Note: WUCS-92-14  
Address: IN ST LOUIS  Saint Louis, MO 63130-4899 One Brookings Drive Campus Box 1045  
Affiliation: WASHINGTON UNIVERSITY  Washington School of Engineering Applied Science  Washington University Department of Computer Science  
Abstract: ion in Algorithm Animation Kenneth C. Cox March 1992 This paper appeared in Proceedings of the 1992 IEEE Workshop on Visual Languages, September 1992, pp. 18-24. 
Abstract-found: 1
Intro-found: 0
Reference: [1] <author> Brown, M. H., </author> <title> Perspectives on Algorithm Animation, </title> <booktitle> CHI'88 Human Factors in Computing Systems, </booktitle> <address> Washington, DC, USA, </address> <pages> pp. 33-38, </pages> <year> 1988. </year>
Reference-contexts: Chang [3], although not providing a taxonomy, defined program visualization as the use of graphical representations to illustrate programs, data, the structure of a system, or the dynamic behavior of a system. Brown <ref> [1] </ref> proposed classifying algorithm animations along three axes: content (direct or synthetic representation of information about the program), transformation (discretely or smoothly changing images), and persistence (representations of the current state or of the entire execution history).
Reference: [2] <author> Brown, M. H., </author> <title> Exploring Algorithms using Balsa-II, </title> <journal> IEEE Computer, </journal> <volume> vol. 21, no. 5, </volume> <pages> pp. 14-36, </pages> <year> 1988. </year>
Reference-contexts: The most common form of direct representation is the mapping of the values of variables to the attributes of graphical objects. Brown, for example, uses such a direct mapping in two visualizations of sorting algorithms using BALSA <ref> [2] </ref>. In both cases the array that is being sorted is represented in the image by a collection of objects.
Reference: [3] <author> Chang, S.-K., </author> <title> Visual Languages and Visual Programming, </title> <publisher> Plenum Press, </publisher> <address> New York, NY, </address> <year> 1990. </year>
Reference-contexts: Shu [9] focused on increasing degrees of sophistication exhibited by program visualization systems, from pretty-printing to complex algorithm animations. Myers [5] used a classification along two axes: the aspect of the program that is illustrated (code, data, algorithm) and the display style (static or dynamic). Chang <ref> [3] </ref>, although not providing a taxonomy, defined program visualization as the use of graphical representations to illustrate programs, data, the structure of a system, or the dynamic behavior of a system.
Reference: [4] <author> McCleary, G. F., </author> <title> An Effective Graphic Vocabulary, </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> vol. 3, no. 2, </volume> <pages> pp. 46-53, </pages> <year> 1983. </year>
Reference: [5] <author> Myers, B. A., </author> <title> Taxonomies of visual programming and program visualization, </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> vol. 1, no. 1, </volume> <pages> pp. 97-123, </pages> <year> 1990. </year>
Reference-contexts: 1 . Introduction A number of researchers have published taxonomic surveys of program visualization systems and approaches. Shu [9] focused on increasing degrees of sophistication exhibited by program visualization systems, from pretty-printing to complex algorithm animations. Myers <ref> [5] </ref> used a classification along two axes: the aspect of the program that is illustrated (code, data, algorithm) and the display style (static or dynamic).
Reference: [6] <author> Roman, G.-C., and Cox, K. C., </author> <title> A Declarative A p p r o a c h t o V i s u a l i z i n g C o n c u r r e n t Computations, </title> <journal> Computer, </journal> <volume> vol. 22, no. 10, </volume> <pages> pp. 25-36, </pages> <year> 1989. </year>
Reference-contexts: An abstract formulation of this algorithm appears in Figure 2. In this version, scanning of nodes is performed in numerical order with k ranging from 0 to N (k =N occurs when the algorithm is complete). In our declarative approach to visualization <ref> [6] </ref> we find it notationally-convenient to model the state as a collection of tuples. We can represent the array d by a collection of tuples of the type dist, where a tuple dist (i,j,v) indicates that d [i,j] =v.
Reference: [7] <author> Roman, G.-C., and Cox, K. C., </author> <title> Program Visualization: The Art of Mapping Programs to Pictures, </title> <booktitle> Proceedings of the 14th International Conference on Software Engineering, </booktitle> <address> Melbourne, Australia, </address> <year> 1992, </year> <pages> pp. </pages> <note> 412-420 (invited paper). </note>
Reference-contexts: Brown [1] proposed classifying algorithm animations along three axes: content (direct or synthetic representation of information about the program), transformation (discretely or smoothly changing images), and persistence (representations of the current state or of the entire execution history). Finally, Roman and Cox <ref> [7] </ref> have suggested a taxonomy based on a treatment of visualization as a mapping from programs to graphical representations, characterizing systems based on the mapping. We continue to treat visualization as a mapping in this paper.
Reference: [8] <author> Roman, G.-C., Cox, K. C., Wilcox, C. D., and Plun, J. Y., Pavane: </author> <title> a system for declarative visualization of concurrent computations, </title> <note> to appear in Journal of Visual Languages and Computing. </note>
Reference-contexts: A rule which accomplishes such a direct mapping appears in Figure 3. This rule is expressed in the form used by Pavane, the algorithm animation system that we have developed <ref> [8] </ref>. A visualization is a composition of one or more mappings, with each mapping made up of one or more rules. A rule specifies a relationship between two collections of tuples.
Reference: [9] <author> Shu, N. C., </author> <title> Visual Programming, </title> <publisher> Van Nostrand Reinhold Company, </publisher> <address> New York, NY, </address> <year> 1988. </year>
Reference-contexts: 1 . Introduction A number of researchers have published taxonomic surveys of program visualization systems and approaches. Shu <ref> [9] </ref> focused on increasing degrees of sophistication exhibited by program visualization systems, from pretty-printing to complex algorithm animations. Myers [5] used a classification along two axes: the aspect of the program that is illustrated (code, data, algorithm) and the display style (static or dynamic).
Reference: [10] <author> Stasko, J., </author> <title> The path-transition paradigm: a practical methodology for adding animation to program interfaces, </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> vol. 1, no. 3, </volume> <pages> pp. 213-236, </pages> <year> 1990. </year>
Reference-contexts: This point is actually quite significant, as a poor choice of animation activities could lead a naive viewer to assume a corresponding activity in the program. TANGO <ref> [10] </ref> provides sophisticated facilities for the production of explanatory animations of algorithms. TANGO uses the path-transition paradigm for visualization, which simultaneously maps program data to graphical objects and program actions to animation actions involving the objects.

References-found: 10

