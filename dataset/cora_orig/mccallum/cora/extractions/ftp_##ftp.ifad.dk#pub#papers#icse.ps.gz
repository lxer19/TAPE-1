URL: ftp://ftp.ifad.dk/pub/papers/icse.ps.gz
Refering-URL: http://www.ifad.dk/publications/publications.html
Root-URL: 
Title: Formal specification techniques in the commercial development process  
Author: J S Fitzgerald P G Larsen 
Keyword: Applications of Formal Methods; Tool Support; Software Process; Training  
Abstract: This paper describes the lessons learned from an application of formal specification techniques in the development of a security-critical system within a UK company. The authors advocate the gradual introduction of formal methods, beginning with an appreciation of existing development processes, and discuss the role played by non-software professionals, executable specifications, formal proof, training and tool support in this and future projects. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. M. Brookes, M. Green, J. S. Fitzgerald, and P. G. Larsen. </author> <title> A Comparison of the Conventional and Formal Design of a Secure System Component. </title> <booktitle> In Proceedings of the Nordic Seminar on Dependable Computing Systems 1994. </booktitle> <institution> Technical University of Denmark, </institution> <year> 1994. </year> <note> Preliminary version in the FACS Europe Newsletter, Vol. 1, No. 2, </note> <year> 1994. </year>
Reference: [2] <author> J. S. Fitzgerald, T. M. Brookes, M. Green, and P. G. Larsen. </author> <title> Formal and Informal Specifications of a Secure System Component: first results in a comparative study. </title> <editor> In Maurice Naftalin, Tim Denvir, and Miquel Bertran, editors, FME'94: </editor> <booktitle> Industrial Benefit of Formal Methods, volume 873 of Lecture Notes in Computer Science, </booktitle> <pages> pages 35-44. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Each section ends with a summary of the point we are making. Experience at British Aerospace Our experiment in developing a security-critical system using VDM-SL with CASE technology is documented elsewhere ([1], <ref> [2] </ref>, [3], [4], [5]).
Reference: [3] <author> J. S. Fitzgerald, P. G. Larsen, T. M. Brookes, and M. A. Green. </author> <title> Developing a Security-critical System using Formal and Conventional Methods. </title> <editor> In Michael G. Hinchey and Jonathan P. Bowen, editors, </editor> <booktitle> Applications of Formal Methods, International Series in Computer Science. </booktitle> <publisher> Prentice Hall, </publisher> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: Each section ends with a summary of the point we are making. Experience at British Aerospace Our experiment in developing a security-critical system using VDM-SL with CASE technology is documented elsewhere ([1], [2], <ref> [3] </ref>, [4], [5]).
Reference: [4] <author> J. S. </author> <type> Fitzgerald. </type> <institution> ESSI Project ConForm: Home Page. </institution> <note> World wide web at URL http://www.cs.man.ac.uk/fmethods/projects/essi-ConForm.html, 1994. </note>
Reference-contexts: Each section ends with a summary of the point we are making. Experience at British Aerospace Our experiment in developing a security-critical system using VDM-SL with CASE technology is documented elsewhere ([1], [2], [3], <ref> [4] </ref>, [5]).
Reference: [5] <author> Tom Brookes Peter Gorm Larsen, John Fitzgerald and Mike Green. </author> <title> Formal mod-elling and simulation in the development of a security-critical message processing system. </title> <booktitle> In Anglo-French workshop on Formal methods, Modelling and Simulation for System Engineering, </booktitle> <month> February </month> <year> 1995. </year>
Reference-contexts: Each section ends with a summary of the point we are making. Experience at British Aerospace Our experiment in developing a security-critical system using VDM-SL with CASE technology is documented elsewhere ([1], [2], [3], [4], <ref> [5] </ref>).
Reference: [6] <author> ISO. </author> <title> Document Number ISO/IEC JTC1/SC22/WG19/N-20 Information Technology Programming Languages - VDM-SL First Committee Draft Standard CD 13817-1, </title> <month> November </month> <year> 1993. </year>
Reference-contexts: This is matched with a parallel development of the trusted gateway by a separate team of engineers using the same techniques, plus some formal specification in VDM-SL <ref> [6] </ref> supported by the IFAD VDM-SL Toolbox. This forms the basis of a comparative study of the costs and benefits of applying simple formal techniques.
Reference: [7] <author> N. Fenton. </author> <title> How Effective are Software Engineering Methods? Controversy Corner in the Journal of Systems and Software, </title> <booktitle> 22 </booktitle> <pages> 141-146, </pages> <year> 1993. </year>
Reference-contexts: A number of other aspects of the system besides the security policy were described in VDM-SL. This experiment is certainly no clinical trial of formal specification, and we would agree with Fenton's observation <ref> [7] </ref> that there is surprisingly little empirical evidence of the benefits of new software engineering techniques, formal methods included.
Reference: [8] <author> L. M. Barroca, J. S. Fitzgerald, and L. Spencer. </author> <title> The Architectural Specification of an Avionic Subsystem. </title> <type> Technical Report 94/19, </type> <institution> Dept of Computing, The Open University, </institution> <year> 1994. </year> <title> Extended version of the paper to appear in Proceeedings of the First International Workshop on Industrial Formal Techniques, </title> <address> Boca Raton, Florida, </address> <publisher> IEEE Press 1995. </publisher>
Reference-contexts: These include the application of formal modelling to the definition of monitoring and control systems in processing and storage plants (with British Nuclear Fuels, BNFL) and development of techniques for specification of avionic control systems (with British Aerospace Defence <ref> [8] </ref>). In most of these projects, we have been working with engineers who are are new to formal methods. In fact, we have found little of the industrial prejudice responded to in [9] and [10].
Reference: [9] <author> J. A. Hall. </author> <title> Seven Myths of Formal Methods. </title> <journal> IEEE Software, </journal> <volume> 7(5) </volume> <pages> 11-19, </pages> <year> 1990. </year>
Reference-contexts: In most of these projects, we have been working with engineers who are are new to formal methods. In fact, we have found little of the industrial prejudice responded to in <ref> [9] </ref> and [10]. Software is specified by systems engineers The Software 2000 [11] working party noted that software is increasingly being developed for embedded applications 3 .
Reference: [10] <author> Jonathan P. Bowen and Michael G. </author> <title> Hinchey. Seven More Myths of Formal Methods: </title> <editor> Dispelling Industrial Prejudices. In Maurice Naftalin, Tim Denvir, and Miquel Bertran, editors, FME'94: </editor> <booktitle> Industrial Benefit of Formal Methods, volume 873 of Lecture Notes in Computer Science, </booktitle> <pages> pages 105-117. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: In most of these projects, we have been working with engineers who are are new to formal methods. In fact, we have found little of the industrial prejudice responded to in [9] and <ref> [10] </ref>. Software is specified by systems engineers The Software 2000 [11] working party noted that software is increasingly being developed for embedded applications 3 . One consequence of this is that many formal specifications will be written by systems engineers, who do not often have a traditional computing background.
Reference: [11] <author> Brian Randell, Gill Ringland, and Bill Wulf, </author> <title> editors. Software 2000: a View of the Future, </title> <address> D2D, Cavendish Road, Stevenage SG1 2DY, UK, </address> <year> 1994. </year> <note> ICL and The Comis-sion of the European Communities. Report No. P4265. </note>
Reference-contexts: In most of these projects, we have been working with engineers who are are new to formal methods. In fact, we have found little of the industrial prejudice responded to in [9] and [10]. Software is specified by systems engineers The Software 2000 <ref> [11] </ref> working party noted that software is increasingly being developed for embedded applications 3 . One consequence of this is that many formal specifications will be written by systems engineers, who do not often have a traditional computing background. <p> case in the BASE project, where a systems engineer led the initial 1 RTM is a Registered Trademark of GEC Marconi, Addlestone, Surrey 2 Teamwork is a Registered Trademark of Cadre Technology Inc. 3 0.5 MByte in a television and 2kByte in an electric shaver, according to Remi Bourgonjon in <ref> [11] </ref>! design and specification phase, while a software engineer took charge of more detailed program design. Systems engineers in both BASE and BNFL have had little trouble understanding the principles of formal specification, even if the technology's roots in computer science are unfamiliar to them.
Reference: [12] <author> P. C. Fencott, A. J. Galloway, M. A. Lockyer, S. J. O'Brien, and S. Pearson. </author> <title> Formalis-ing the Semantics of Ward/Mellor SA/RT Essential Models using a process Algebra. </title> <editor> In Maurice Naftalin, Tim Denvir, and Miquel Bertran, editors, FME'94: </editor> <booktitle> Industrial Benefit of Formal Methods, volume 873 of Lecture Notes in Computer Science, </booktitle> <pages> pages 681-702. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Because of the need to work within a predefined development process, formal specification must complement established techniques and tools. In BASE, rather than suggest an integrated method based on a formal semantics to data flow diagrams (e.g. <ref> [12] </ref>), a more ad hoc approach was taken: formal specifications were written as comments in the data dictionary and process specifications of the Teamwork diagrams.
Reference: [13] <author> I. J. Hayes and C. B. Jones. </author> <title> Specifications are not (necessarily) executable. </title> <journal> Software Engineering Journal, </journal> <volume> 4(6) </volume> <pages> 320-338, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: Tools have a strong influence on specification style The value of executability in specifications has been the subject of debate (e.g. <ref> [13] </ref>, [14]). The BASE project used a tool set which permits specification testing, so it was not surprising that the systems engineer preferred to write executable specifications over non-executable, and perhaps more abstract, versions. Moreover, an explicit specification style was used rather than the pre-/post-condition style also available in VDM-SL.
Reference: [14] <author> Norbert E. Fuchs. </author> <title> Specifications are (Preferably) Executable. </title> <journal> Software Engineering Journal, </journal> <pages> pages 323-334, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Tools have a strong influence on specification style The value of executability in specifications has been the subject of debate (e.g. [13], <ref> [14] </ref>). The BASE project used a tool set which permits specification testing, so it was not surprising that the systems engineer preferred to write executable specifications over non-executable, and perhaps more abstract, versions. Moreover, an explicit specification style was used rather than the pre-/post-condition style also available in VDM-SL.
Reference: [15] <author> Jeremy Dick and Alain Faivre. </author> <title> Automating the Generation and Sequencing of Test Cases from Model-Based Specifications. </title> <editor> In J.C.P. Woodcock and P.G. Larsen, editors, FME'93: </editor> <booktitle> Industrial-Strength Formal Methods, </booktitle> <pages> pages 268-284. </pages> <booktitle> Formal Methods Europe, </booktitle> <publisher> Springer-Verlag, </publisher> <month> April </month> <year> 1993. </year> <note> Lecture Notes in Computer Science 670. </note>
Reference-contexts: The software designs at BASE reflect this, with abstract specifications seen as higher level designs rather than descriptions of desired behaviour. One way forward is to develop techniques for generating test cases from implicit (possibly non-executable) specifications (see <ref> [15] </ref>, [16]). Such test cases can then form the basis for validation of explicit versions. The implicit specifications could continue to be the definitive ones handed on to later development phases, while developers can choose to pass on explicit versions or not, as appropriate.
Reference: [16] <author> Hans-Martin Horcher and Jan Peleska. </author> <title> The Role of Formal Specifications in Software Test. </title> <booktitle> In Tutorial Programme FME'94, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: The software designs at BASE reflect this, with abstract specifications seen as higher level designs rather than descriptions of desired behaviour. One way forward is to develop techniques for generating test cases from implicit (possibly non-executable) specifications (see [15], <ref> [16] </ref>). Such test cases can then form the basis for validation of explicit versions. The implicit specifications could continue to be the definitive ones handed on to later development phases, while developers can choose to pass on explicit versions or not, as appropriate.
Reference: [17] <author> Ralf Kneuper. </author> <title> Symbolic Execution: a Semantic Approach. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 16 </volume> <pages> 207-249, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: A disadvantage is the need to keep two versions of the specification in step during development. Another important approach is direct symbolic execution of implicit operation specifications <ref> [17] </ref>, although this can suffer from combinatorial explosion. Research is required to make this a more tractable option for model-oriented specifications, perhaps exploiting formula rewriting packages used in mathematical applications. Point: Commercial systems developers have found the ability to execute specifications a great benefit.
Reference: [18] <author> J. Rushby. </author> <title> Formal Methods and the Certification of Critical Systems. </title> <type> Technical Report CSL-93-7, </type> <institution> Computer Science Laboratory, SRI International, </institution> <month> December </month> <year> 1993. </year>
References-found: 18

