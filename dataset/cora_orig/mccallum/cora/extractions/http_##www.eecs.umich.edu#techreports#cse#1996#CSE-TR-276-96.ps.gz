URL: http://www.eecs.umich.edu/techreports/cse/1996/CSE-TR-276-96.ps.gz
Refering-URL: http://www.eecs.umich.edu/home/techreports/cse96.html
Root-URL: http://www.eecs.umich.edu
Email: Email: gwu@eecs.umich.edu  
Title: Distributed Object Replication Support for Collaborative Systems  
Author: by Gwobaw A. Wu Atul Prakash 
Address: Ann Arbor, MI 48109  
Affiliation: Department of Electrical Engineering and Computer Science The University of Michigan,  
Abstract: The ability to share synchronized views of interactions with an application is critical to supporting synchronous collaboration over a network. To keep bandwidth requirements and interactive response time low in wide-area networks, we have designed a toolkit, called DistView, that uses an object-level replication scheme, in which the application and interface objects that need to be shared among users are replicated at the various user sites. Existing schemes for maintaining consistency among replicated active objects are generally designed for database applications and do not necessarily work in collaborative applications where response times or latencies are generally more critical than throughput or persistence. In this paper, we describe an object replication service that is designed to provide low interactive response times and low latencies in communication in collaborative environments. We describe the algorithms used, the architecture of the system, and present an analysis of its performance. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Birman et al. </author> <title> The ISIS System Manual, </title> <note> Version 2.0, </note> <month> April, </month> <year> 1990. </year>
Reference-contexts: We show in this paper that it is possible to take advantage of the characteristics of collaborative systems to provide much better performance. Using atomic, totally ordered broadcast protocols, such as the ABCAST protocol provided by ISIS <ref> [1] </ref>, is another potential way to provide consistency among replicas. However, we feel that can be too expensive from the perspective of response time because messages have to normally go through a shared sequencer process to serialize the messages before delivery. <p> Systems such as ISIS <ref> [1] </ref> provide protocols that provide delivery atomicity under our assumptions. The following are the goals of the proposed object replication service: * Allow control over degree of object replication: Application developers should be able to designate objects as either non-replicatable or replicatable. <p> For objects already replicated at a local site, no replication is needed. * Object Name Server (ONS): The ONS maintains the information about object replicas at all collaborating sites. The ONSs function like a process group in ISIS <ref> [1] </ref>. A site is designated to sequence updates from the servers at all sites. Since all updates go through the designated site, and are then forwarded to other sites, updates of information are performed at every ONS in the same order.
Reference: [2] <author> E.C. Cooper. </author> <title> Replicated distributed programs. </title> <type> Ph.D. Thesis, </type> <year> 1985. </year>
Reference-contexts: be non-replicatable, provide consistency of object replicas in the presence of failures, and yet provide 4 A1 A2 I2 Window 1 Window 2 Window 3 Site A Site B A1 A2 I2 Window 1' (Replicated) low latencies and interactive response times. 3 Related Work Cooper's work on replicated procedure calls <ref> [2] </ref> presented many of the key ideas for managing replicate distributed programs. The goal was to mask partial failures. The basic technique was to enhance the remote procedure calls stubs so that they could make replicated procedure calls, discarding duplicate results.
Reference: [3] <institution> Digital Equipment Corp., Hewlett-Packard Com., HyperDesk Copr., NCR Copr., Inc. </institution> <note> Object Design, </note> <author> and Inc. </author> <title> SunSoft. The Common Object Request Broker: Architecture and Specification, Revision 1.1, </title> <month> Dec, </month> <year> 1991. </year>
Reference-contexts: Thus, each application process that can directly invoke methods on a replica group has a proxy for the replica group. Use of proxies is a standard technique in the implementation of distributed object systems, such as those provided by CORBA <ref> [3] </ref>. Proxies provide similar functionality to that of client stubs in remote procedure calls.
Reference: [4] <author> P. Dewan. </author> <title> Flexible user interface coupling in collaborative systems. </title> <booktitle> In Proceedings otf the ACM CHI'91 Conference on Human Factors in Computing Systems, </booktitle> <pages> pages 41-48, </pages> <month> April </month> <year> 1991. </year>
Reference-contexts: Many groupware systems, at present, avoid dealing with issues of replication by using a centralized site for storing the application state <ref> [4, 13] </ref>. The problem, of course, is that this type of solution does not really scale well to Internet-type environments where communication links can get congested, preventing interactions with the centralized site. Furthermore, failure of the centralized site can prevent collaboration from continuing.
Reference: [5] <author> C. Ellis, S.J. Gibbs, and G. Rein. </author> <title> Concurrency control in groupware systems. </title> <booktitle> In Proceedings of the ACM SIGMOD '89 Conference on Management of Data, </booktitle> <pages> pages 399-407. </pages> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: In this paper, we describe the design of the object-replication service that supports DistView. Object replication has so far been largely explored in the context of persistent object databases [11, 12]. The distinction between databases and groupware applications in general have been pointed out by Ellis et al earlier <ref> [5] </ref>.
Reference: [6] <author> C.A. Ellis, S.J. Gibbs, and G.L. Rein. </author> <title> Groupware: Some Issues and Experiences. </title> <journal> Communications of the ACM, </journal> <pages> pages 38-51, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: 1 Introduction A great interest has developed in recent years in building collaboration tools that allow people to work with each other without the need for physical proximity <ref> [6, 14, 18, 20] </ref>. This interest has been partly motivated by the increasing availability of powerful interconnected workstations. The focus of this paper is on the middleware distributed systems support needed for building such collaboration tools for use in wide-area networks.
Reference: [7] <author> C.R. Clauer et. al. UARC: </author> <title> A prototype upper atmospheric research collaboratory. </title> <journal> EOS Trans. American Geophysical Union, </journal> <volume> 267(74), </volume> <year> 1993. </year>
Reference-contexts: Section 8 presents conclusions and future work. 2 Background and Motivation The DistView Toolkit The DistView toolkit is designed to provide shared workspaces over wide area networks [14]. A prototype of it is currently in use in the Upper Atmospheric Research Collaboratory (UARC) <ref> [7] </ref> | a system that provides space scientists with the means to effectively view and analyze data collected by various instruments located in Greenland.
Reference: [8] <author> S. Greenberg and D. Marwood. </author> <title> Real time groupware as a distributed system: Concurrency control and its effect on the interface. </title> <booktitle> CSCW 94, </booktitle> <pages> pages 207-217, </pages> <month> Oct </month> <year> 1994. </year>
Reference-contexts: However, in other groupware applications, such as group editing of documents, such errors can be more serious. GroupKit is now attempting to provide concurrency control for different levels of requirements <ref> [8] </ref>. DistEdit is a group editing toolkit that uses replication of editor state to provide low response times and was implemented in our group [9].
Reference: [9] <author> M. Knister and A. Prakash. </author> <title> Issues in the design of a toolkit for supporting multiple group editors. </title> <journal> Computing Systems The Journal of the Usenix Association, </journal> <volume> 6(2) </volume> <pages> 135-166, </pages> <month> Spring </month> <year> 1993. </year>
Reference-contexts: GroupKit is now attempting to provide concurrency control for different levels of requirements [8]. DistEdit is a group editing toolkit that uses replication of editor state to provide low response times and was implemented in our group <ref> [9] </ref>. Since DistEdit is primarily intended to support group text-editing, it replicates the entire application's state that is specific to the file-being shared, and does not do fine-grain object-level replication. <p> Delays in acquiring locks are observed only when locks are transferred from one user to another. In the future, we expect to build some existing collaborative applications such as DistEdit <ref> [9] </ref> and DistView using the new schemes described in this paper and to experimentally evaluate the performance.
Reference: [10] <author> K.P.Birman and T. Joseph. </author> <title> Exploiting virtualsynchrony in distributed systems. </title> <booktitle> Proceedings of the Eleventh ACM Symposimu on Operating Systems Principles, </booktitle> <pages> pages 123-138, </pages> <month> Nov </month> <year> 1987. </year>
Reference-contexts: This is necessary to ensure that all sites have a consistent view of the group of sites that are participating in the collaboration. A process is defined to be alive if it is a member of the latest view of the collaboration group. See <ref> [10, 15, 16, 19] </ref> for examples of protocols that provide this service under the assumptions above. * FIFO message delivery : Between any two alive processes in a group, we assume that messages are delivered reliably and in FIFO order.
Reference: [11] <author> B. Liskov, M. Day, and L. Shrira. </author> <title> Distributed object management in Thor. </title> <editor> In T. Ozsu, U. Dayal, and P. Valduriez, editors, </editor> <booktitle> Distributed Object Management, </booktitle> <pages> pages 79-91. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year> <month> 17 </month>
Reference-contexts: The high-level architecture of DistView and its use in building groupware applications is described elsewhere [14]. In this paper, we describe the design of the object-replication service that supports DistView. Object replication has so far been largely explored in the context of persistent object databases <ref> [11, 12] </ref>. The distinction between databases and groupware applications in general have been pointed out by Ellis et al earlier [5]. <p> The goal was to mask partial failures. The basic technique was to enhance the remote procedure calls stubs so that they could make replicated procedure calls, discarding duplicate results. The focus in the work was primarily on fault-tolerance, and not so much on response time or latencies. Thor <ref> [11] </ref> is an object-oriented database management system designed to support different languages in heterogeneous distributed systems. Clients interact with object repositories via a front-end service. The front-end service maintains a cache of all the objects the client interacts with.
Reference: [12] <author> M.C. Little. </author> <title> Object replication in a distributed system. </title> <type> Ph.D. Thesis, </type> <year> 1991. </year>
Reference-contexts: The high-level architecture of DistView and its use in building groupware applications is described elsewhere [14]. In this paper, we describe the design of the object-replication service that supports DistView. Object replication has so far been largely explored in the context of persistent object databases <ref> [11, 12] </ref>. The distinction between databases and groupware applications in general have been pointed out by Ellis et al earlier [5]. <p> Furthermore, all objects have to part of the Thor system | replication and consistency of external objects such as widgets, non-persistent data structures, etc., is not supported. Arjuna <ref> [12] </ref> is designed to provide a replicated object database for persistent storage of objects. Full transaction support is provided as in a conventional database, including persistency and atomicity in the presence of crashes, etc. of some of the sites where objects are stored.
Reference: [13] <author> J.F. Patterson, R.D. Hill, </author> <title> S.L. Rohall, and W.S. Meeks. Rendezvous: An architecture for synchronous multi-user applications. </title> <booktitle> In Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 317-328, </pages> <address> Los Angeles, California, </address> <month> October </month> <year> 1990. </year>
Reference-contexts: Many groupware systems, at present, avoid dealing with issues of replication by using a centralized site for storing the application state <ref> [4, 13] </ref>. The problem, of course, is that this type of solution does not really scale well to Internet-type environments where communication links can get congested, preventing interactions with the centralized site. Furthermore, failure of the centralized site can prevent collaboration from continuing.
Reference: [14] <author> A. Prakash and H.S. Shim. Distview: </author> <title> Support for building efficient collaborative applications using replicated objects. </title> <booktitle> Proc. Fifth ACM conference on CSCW, </booktitle> <pages> pages 153-164, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: 1 Introduction A great interest has developed in recent years in building collaboration tools that allow people to work with each other without the need for physical proximity <ref> [6, 14, 18, 20] </ref>. This interest has been partly motivated by the increasing availability of powerful interconnected workstations. The focus of this paper is on the middleware distributed systems support needed for building such collaboration tools for use in wide-area networks. <p> We have designed a toolkit, called DistView, that supports building of collaborative multi-window applications in which users can share some of their application windows with other users while still keeping other application windows private <ref> [14] </ref>. Applications can be designed to be collaboration-aware so that several users can simultaneously interact with the application and with each other. The toolkit is intended for supporting synchronous collaboration over wide-area networks. <p> To keep interactive response time low in such networks, DistView uses an object replication scheme, in which the application and interface objects that need to be shared among users are replicated. The high-level architecture of DistView and its use in building groupware applications is described elsewhere <ref> [14] </ref>. In this paper, we describe the design of the object-replication service that supports DistView. Object replication has so far been largely explored in the context of persistent object databases [11, 12]. <p> Section 7 describes the servers intended to be the next implementation of the system. Section 8 presents conclusions and future work. 2 Background and Motivation The DistView Toolkit The DistView toolkit is designed to provide shared workspaces over wide area networks <ref> [14] </ref>. A prototype of it is currently in use in the Upper Atmospheric Research Collaboratory (UARC) [7] | a system that provides space scientists with the means to effectively view and analyze data collected by various instruments located in Greenland.
Reference: [15] <author> A. M. Ricciardi. </author> <title> The Group Membership Problem in Asynchronous Systems. </title> <type> Technical Report TR92-1313, </type> <institution> cornell, </institution> <month> Nov. </month> <year> 1992. </year>
Reference-contexts: This is necessary to ensure that all sites have a consistent view of the group of sites that are participating in the collaboration. A process is defined to be alive if it is a member of the latest view of the collaboration group. See <ref> [10, 15, 16, 19] </ref> for examples of protocols that provide this service under the assumptions above. * FIFO message delivery : Between any two alive processes in a group, we assume that messages are delivered reliably and in FIFO order.
Reference: [16] <author> A. M. Ricciardi and K. P. Birman. </author> <title> Using Process Groups to Implement Failure Detection in Asynchronous Environments. </title> <booktitle> In Proc. of 10th. Annual ACM Symp. on Principles of Distributed Computing, </booktitle> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: This is necessary to ensure that all sites have a consistent view of the group of sites that are participating in the collaboration. A process is defined to be alive if it is a member of the latest view of the collaboration group. See <ref> [10, 15, 16, 19] </ref> for examples of protocols that provide this service under the assumptions above. * FIFO message delivery : Between any two alive processes in a group, we assume that messages are delivered reliably and in FIFO order.
Reference: [17] <author> M. Roseman and S. Greenberg. GroupKit: </author> <title> A groupware toolkit for building real-time conferencing appliations. </title> <booktitle> In Proceedings of the Fourth Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 43-50, </pages> <address> Toronto, Canada, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: Furthermore, failure of the centralized site can prevent collaboration from continuing. In other groupware systems, replication of state is used but the problem of maintaining consistency is ignored or is considered not important for the type of collaborative work going on. For instance, in GroupKit <ref> [17] </ref>, no mechanism for concurrency control is provided for its whiteboard application and inconsistencies can occur in states at individual sites, though usually not serious to prevent collaboration. However, in other groupware applications, such as group editing of documents, such errors can be more serious.
Reference: [18] <author> D. Bogia S. Kaplan, W. Tolone and C. Bignoli. </author> <title> Flexible, active support for collaborative work with conversationbuilder. </title> <booktitle> In Proceedings of the Fourth Conference on Computer-Supported Cooperative Work, </booktitle> <address> Toronto, Canada, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: 1 Introduction A great interest has developed in recent years in building collaboration tools that allow people to work with each other without the need for physical proximity <ref> [6, 14, 18, 20] </ref>. This interest has been partly motivated by the increasing availability of powerful interconnected workstations. The focus of this paper is on the middleware distributed systems support needed for building such collaboration tools for use in wide-area networks.
Reference: [19] <author> A. Sch iper and A. Ricciardi. </author> <title> Virtually-Synchronous Communication Based on a Weak Failure Suspector. </title> <booktitle> In Proceedings on the 13th International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 534-568, </pages> <address> Toulouse,France, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: This is necessary to ensure that all sites have a consistent view of the group of sites that are participating in the collaboration. A process is defined to be alive if it is a member of the latest view of the collaboration group. See <ref> [10, 15, 16, 19] </ref> for examples of protocols that provide this service under the assumptions above. * FIFO message delivery : Between any two alive processes in a group, we assume that messages are delivered reliably and in FIFO order.
Reference: [20] <author> M. Stefik, G. Foster, D.G. Bobrow, K. Kahn, S. Lanning, and L. Suchman. </author> <title> Beyond the Chalkboard: Computer support for collaboration and problem solving in meetings. </title> <journal> Communications of the ACM, </journal> <volume> 30(1) </volume> <pages> 32-47, </pages> <month> Jan. </month> <year> 1987. </year> <month> 18 </month>
Reference-contexts: 1 Introduction A great interest has developed in recent years in building collaboration tools that allow people to work with each other without the need for physical proximity <ref> [6, 14, 18, 20] </ref>. This interest has been partly motivated by the increasing availability of powerful interconnected workstations. The focus of this paper is on the middleware distributed systems support needed for building such collaboration tools for use in wide-area networks.
References-found: 20

