URL: http://www.cs.umn.edu/Users/dept/users/du/papers/file_allocation.ps
Refering-URL: http://www.cs.umn.edu/Users/dept/users/du/papers/
Root-URL: http://www.cs.umn.edu
Title: Video File Allocation over Disk Arrays for Video-On-Demand  
Author: Yuewei Wang, Jonathan C.L. Liu, David H.C. Du and Jen-Wei Hsieh 
Keyword: Multimedia, Video-On-Demand, Concurrent Access, MPEG-II, RAID 3, Replication, Striping, 2-D Vector Packing  
Affiliation: Distributed Multimedia Research Center 1 Department of Computer Science University of Minnesota  
Abstract: A Video-on-Demand (VOD) server needs to store hundreds of movie titles and to support thousands of concurrent accesses. This, technically and economically, imposes a great challenge on the design of the disk storage subsystem of a VOD server. Due to different demands for different movie titles, the numbers of concurrent accesses to different movie titles can differ a lot. We define access profile as the number of concurrent accesses to each movie title that should be supported by a VOD server. The access profile is derived based on the popularity of each movie title and thus serves as a major design goal for the disk storage subsystem. Since some popular (hot) movie titles may be concurrently accessed by hundreds of users and a current high-end magnetic disk array (disk) can only support tens of concurrent accesses, it is necessary to replicate and/or stripe the hot movie files over multiple disk arrays. The consequence of replication and striping for hot movie titles is the potential increase on the required number of disk arrays. Therefore, how to replicate, stripe, and place the movie files over a minimum number of magnetic disk arrays such that a given access profile can be supported is an important problem. In this paper, we formulate the problem of the video file allocation over disk arrays, demonstrate that it is a NP-hard problem, and present some heuristic algorithms to find the near-optimal solutions. The result of this study can be applied to the design of the storage subsystem of a VOD server to economically minimize the cost or to maximize the utilization of disk arrays. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ciprico Inc. </author> <title> RF6700 Controller Board Reference Manual, </title> <year> 1993. </year>
Reference-contexts: 44 B True Lies 30 C Time Cop 20 D Clear And Present Danger 7 E Star Gate 4 F Top Gun 1 H RoboCop 1 I Total Recall 1 J Star Trek VI 1 Assume that we want to store these movie titles on an array of RAID 3s <ref> [1] </ref> where each RAID 3 consists of 8 data + 1 parity Seagate ST12400N 2.1 gigabyte drives with a Ciprico 6710 controller. A 90-minute movie file in MPEG-II format occupies about 5 gigabytes of storage and requires I/O bandwidth of about 8 megabits per second (Mbps) 2 .
Reference: [2] <author> E.G. Jr. Coffman, M.R. Garey, and D.S. Johnson. </author> <title> Approximation Algorithms for Bin-Packing An Updated Survey. </title> <booktitle> Analysis and Design of Algorithms in Combinatorial Optimization, </booktitle> <pages> pages 147-172, </pages> <year> 1981. </year>
Reference-contexts: Thus, for any instance of 2-D vector packing problem, we can transform it in polynomial time into an instance of a special case of our problem which does not have any striping. Since 2-D vector packing problem is NP-hard <ref> [2] </ref>, our problem is also NP-hard. 2 3.2 Problem Formulation with Replication The formulation in Section 3:1 does not consider the replication possibility of a video file. The formulation with replication of video files needs to decide the replication factor r i from each video file i. <p> Using these pre-determined striping factors, we then propose a way to place movie files over a small number (but maybe not the minimum) of disk arrays. The above problem is very similar to 2-D vector packing problem <ref> [2] </ref> except that some objects may be placed in more than one container. As a result, we found that many heuristic algorithms developed for 2-D vector packing problem can be used. We adopt a Best-fit [2] algorithm to place a movie over disk arrays. <p> The above problem is very similar to 2-D vector packing problem <ref> [2] </ref> except that some objects may be placed in more than one container. As a result, we found that many heuristic algorithms developed for 2-D vector packing problem can be used. We adopt a Best-fit [2] algorithm to place a movie over disk arrays. The idea of a Best-fit algorithm is to place the movie over disk arrays that have been used so far, and will have the heaviest "loads" after the movie is placed on the disk array.
Reference: [3] <author> Y. N. Doganata and A. N. Tantawi. </author> <title> A Cost/Performance Study of Video Servers with Hierarchical Storage. </title> <booktitle> Proceedings of the International Conference on Multimedia Computing and Systems, </booktitle> <year> 1994. </year>
Reference-contexts: This paper attempts to formulate and solve this problem. There are some related studies on video file allocation over the storage subsystems for a VOD server. Load-balancing is very important in maximizing the number of concurrent accesses, as pointed out by Little and Venkatesh in [7]. In <ref> [3] </ref>, Doganata and Tantawi gave a cost/performance analysis over a hierarchical storage system of a centralized VOD server. In [9], Ramarao and Ramamoorthy proposed a probabilistic model to assign video to different levels of a three-tiered storage hierarchy in a distribute VOD server environment. <p> Table 9 compares the results of Increasing Ordering, Random Ordering, Decreasing Ordering, and Matching Ordering with approximately 110 movie titles (i.e. M 110). In the comparison, we assume that the movie access profile can be approximated by the normalized geometry distribution as used in <ref> [3] </ref>. That is, let skew factor ff (0 &lt; ff &lt; 1) denotes the variation in demand, M denotes the number of the movie titles and A denotes the total number of concurrent accesses to the M movie titles. <p> This algorithm generates the solution to the example access profile in Section 1 (as shown in Table 4). 4.3 Comparison of Greedy-Placement and Branch-and-Bound-Placement Algorithms As in Section 4.1, we conduct the comparison by approximating the concurrent access profile with a geometry distribution <ref> [3] </ref>. We use three groups of M and A to cover the above three cases and use different ff values (ff = 0:1, 0:3, 0:5, 0:7, 0:9 within each group.
Reference: [4] <author> Shahram Ghandeharizadeh and Luis Ramos. </author> <title> Continuous Retrieval of Multimedia Data Using Parallelism. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> Vol. 5, No. 4,, </volume> <month> August </month> <year> 1993. </year>
Reference-contexts: They did not address how video files are allocated in each site. Ghandeharizadeh and Ramos proposed a scheme to decluster and/or replicate a media object over a number of processors/disks in a share-nothing architecture in <ref> [4] </ref>.
Reference: [5] <author> J. Hsieh, M. Lin, J. Liu, and D. Du. </author> <title> Performance of a Mass Storage System for Video-On-Demand. </title> <note> To appear in a Special Issue on Multimedia Processing and Technology, Journal of Parallel and Distributed & Computing (JPDC), </note> <month> August </month> <year> 1995. </year>
Reference-contexts: Based on our experimental results, each RAID 3 can store at most 3 movie files and support at most 11 concurrent accesses if a reasonable size buffer is dedicated to each stream <ref> [5, 8] </ref>. In the above access profile, we want to support 44 concurrent viewers (i.e., accesses) to movie title "Forest Gump". Clearly, this movie cannot be stored on only one RAID 3 since each RAID 3 can only support 11 MPEG-II streams. <p> Section 5 analyze the relationship between striping and replication and give a heuristic solution in the case that striping is not needed. Section 6 concludes the paper. 2 System Architecture and Assumptions 2.1 VOD System Architecture and VOD Service Quality Distributed Multimedia Center at University of Minnesota <ref> [5, 8] </ref>. A SGI Onyx with 20 MIPS R4400 150 MHz processors and 512 MBytes random access memory (RAM) is used as the computing engine. The system bus has a bandwidth of 1:2 GB/second and can be configured with up to 4 POWERchannel-2 I/O adapter boards. <p> An array of RAID 3s is used to store the video files. One SCSI-2 channel is dedicated to each RAID 3. Each RAID 3 achieves a sustained transfer rate of 17:8 MBytes per second under this configuration <ref> [5] </ref>. Within each RAID 3, data is interleaved byte-wise over multiple data disks, and a single parity disk is used to tolerate a disk failure. This is called RAID 3 Byte Striping in [5]. <p> Each RAID 3 achieves a sustained transfer rate of 17:8 MBytes per second under this configuration <ref> [5] </ref>. Within each RAID 3, data is interleaved byte-wise over multiple data disks, and a single parity disk is used to tolerate a disk failure. This is called RAID 3 Byte Striping in [5]. The striping we consider in this paper is the user-level striping in which the application controls the 4 allocation and retrieval of data over multiple RAID 3s. This is called Application Striping [5] and is very similar to providing a RAID 0 level of striping over multiple RAID 3s. <p> This is called RAID 3 Byte Striping in <ref> [5] </ref>. The striping we consider in this paper is the user-level striping in which the application controls the 4 allocation and retrieval of data over multiple RAID 3s. This is called Application Striping [5] and is very similar to providing a RAID 0 level of striping over multiple RAID 3s. That is, in Application Striping, a user can stripe a video file over multiple RAID3s using the RAID 0 level of striping.
Reference: [6] <author> S. Krikpatrick, C.D. Gelatt, and M.P. Jr. Vecchi. </author> <title> Optimization by Simulated Annealing. </title> <journal> Science, </journal> <volume> Vol. 220, No. 4598, </volume> <pages> pages 671-680, </pages> <month> May </month> <year> 1983. </year>
Reference-contexts: Actually, after the replication step, the problem becomes the traditional 2-D vector packing problem. The advantage of this algorithm is that we can use any good (and probably very expensive) heuristic algorithms developed for 2-D vector packing (including Simulated Annealing <ref> [6] </ref> algorithms) to optimize the placement. 6 Conclusion The access profile of a given set of movie titles specifies the number of concurrent accesses that the disk subsystem of a VOD server needs to support. Video files impose requirements on disks in two dimensions: storage and concurrent access.
Reference: [7] <author> T.D.C. Little and D. Venkatesh. </author> <title> Popularity-based assignment of movies to storage devices in a video-on-demand system. </title> <journal> Multimedia Systems, </journal> <volume> No. 2, </volume> <year> 1995. </year>
Reference-contexts: This paper attempts to formulate and solve this problem. There are some related studies on video file allocation over the storage subsystems for a VOD server. Load-balancing is very important in maximizing the number of concurrent accesses, as pointed out by Little and Venkatesh in <ref> [7] </ref>. In [3], Doganata and Tantawi gave a cost/performance analysis over a hierarchical storage system of a centralized VOD server. In [9], Ramarao and Ramamoorthy proposed a probabilistic model to assign video to different levels of a three-tiered storage hierarchy in a distribute VOD server environment. <p> This is the most desired feature because it can truly emulate the VCR functions and is referred to as T-VOD service in <ref> [7] </ref>. 2.2 Striping Penalty As we mentioned before, a RAID 3 can provide sustained transfer rate of 17:6 Mbytes/second and a MPEG-II video stream needs a bandwidth of about 8 Mbits/second.
Reference: [8] <author> J. Liu, J. Hsieh, D. Du, and Mengjou Lin. </author> <title> Performance of A Storage System for Supporting Different Video Types and Qualities. </title> <type> Technical Report TR95-060, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: Based on our experimental results, each RAID 3 can store at most 3 movie files and support at most 11 concurrent accesses if a reasonable size buffer is dedicated to each stream <ref> [5, 8] </ref>. In the above access profile, we want to support 44 concurrent viewers (i.e., accesses) to movie title "Forest Gump". Clearly, this movie cannot be stored on only one RAID 3 since each RAID 3 can only support 11 MPEG-II streams. <p> We should point out that striping this movie title over 4 RAID 3s was not sufficient to support 44 concurrent accesses since there is a performance penalty in the disk striping <ref> [8] </ref>. The number of MPEG-II streams that can be supported by striping over 4 2 We are aware that the current MPEG-II specification is 4 20 Mbps. We choose a typical value 8 in our discussion. 1 RAID 3s (4-way striping) is 36. <p> We choose a typical value 8 in our discussion. 1 RAID 3s (4-way striping) is 36. Table 2 shows the number of concurrent accesses that can be supported by different ways of striping over RAID 3s <ref> [8] </ref>. <p> Section 5 analyze the relationship between striping and replication and give a heuristic solution in the case that striping is not needed. Section 6 concludes the paper. 2 System Architecture and Assumptions 2.1 VOD System Architecture and VOD Service Quality Distributed Multimedia Center at University of Minnesota <ref> [5, 8] </ref>. A SGI Onyx with 20 MIPS R4400 150 MHz processors and 512 MBytes random access memory (RAM) is used as the computing engine. The system bus has a bandwidth of 1:2 GB/second and can be configured with up to 4 POWERchannel-2 I/O adapter boards. <p> Although theoretically we can support b 17:6fl8 8 c = 17 MPEG-II streams, due to system overhead we were able to support only 11 MPEG-II streams as our experiments demonstrated in <ref> [8] </ref>. Moreover, as the number of ways of striping increases, the average number of concurrent streams per disk array 5 that can be supported will decrease. This performance behavior is verified by the experiments conducted in [8]. <p> we were able to support only 11 MPEG-II streams as our experiments demonstrated in <ref> [8] </ref>. Moreover, as the number of ways of striping increases, the average number of concurrent streams per disk array 5 that can be supported will decrease. This performance behavior is verified by the experiments conducted in [8]. We define a striping function f (i) as the number of concurrent accesses (i.e., MPEG-II streams) that a RAID 3 can support on average if movie files are i-way striped over i disk arrays. <p> In other words, i disk arrays can support a total number of i fl f (i) concurrent accesses if movie files are i-way striped over these i disk arrays. Table 6 is an example of striping function from the experiments reported in <ref> [8] </ref> when each of stream is allocated a 1 megabyte buffer . From the table we can observe that the number of streams that a disk array can sup Table 6: Striping function i 1 2 4 8 16 32 port decreases as the number of ways of striping increases. <p> If we increase the buffer size of each stream, the numbers in the above table will increase, but the monotonically decreasing relation of f (i) with respect to i still holds <ref> [8] </ref>. However, in the above discussion, we only consider the concurrent accesses to the movie files with the same ways of striping. In reality, there may be hundreds of movie titles and each of them may be striped over different number of disk arrays.
Reference: [9] <author> Ram Ramarao and Victor Ramamoorthy. </author> <title> Architectural Design of On-Demand Video Delivery Systems: The Spatio-Temporal Storage Allocation Problem. </title> <booktitle> Proceedings of International Conference on Communications ICC'91, </booktitle> <pages> pages 17.6.1-17.6.5, </pages> <year> 1991. </year> <month> 27 </month>
Reference-contexts: Load-balancing is very important in maximizing the number of concurrent accesses, as pointed out by Little and Venkatesh in [7]. In [3], Doganata and Tantawi gave a cost/performance analysis over a hierarchical storage system of a centralized VOD server. In <ref> [9] </ref>, Ramarao and Ramamoorthy proposed a probabilistic model to assign video to different levels of a three-tiered storage hierarchy in a distribute VOD server environment. They did not address how video files are allocated in each site.
References-found: 9

