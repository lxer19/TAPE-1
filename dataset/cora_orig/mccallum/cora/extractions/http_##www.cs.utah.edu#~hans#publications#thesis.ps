URL: http://www.cs.utah.edu/~hans/publications/thesis.ps
Refering-URL: http://www.cs.utah.edu/~hans/publications/publications.html
Root-URL: 
Title: ASYNCHRONOUS CIRCUIT DESIGN A CASE STUDY OF A FRAMEWORK CALLED ACK  
Author: by Hans Jacobson 
Degree: A thesis submitted to the faculty of Lule-a University of Technology In partial fulfillment of the requirements for the degree of Master of Science  
Date: May 1996  
Affiliation: Department of Computer Engineering Lule-a University of Technology  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Aghdasi F. </author> <title> Synthesis of Asynchronous Sequential Machines for VLSI Applications. </title> <booktitle> In Proceedings of the 1991 International Conference on Concurrent Engineering and Electronic Design Automation (CEEDA), </booktitle> <month> March </month> <year> 1991, </year> <pages> pp. 55-59. </pages>
Reference-contexts: The self synchronized style will be discussed next followed by the Huffman only style. 7.2.1 The Self Synchronizing Style A method using a locally clocked approach for hazard free synthesis of burst mode machines was developed in [49]. This approach and others <ref> [27, 68, 1, 13, 57] </ref> make use of a method called self-synchronization. This method use Huffman machines along with a locally generated aperiodic clock acting on internal latches.
Reference: [2] <author> Akella, V. </author> <title> An Integrated Framework for the Automatic Synthesis of Efficient Self-Timed Circuits from Behavioral Specifications. </title> <type> PhD thesis, </type> <institution> Dept. of Computer Science, University of Utah, </institution> <address> Salt Lake City, UT 84112, </address> <year> 1992. </year>
Reference-contexts: We present a tool called ACK that incorporates these features. There exist a wide variety of methodologies in asynchronous high level synthesis, that target various implementation styles. Methods targeting restricted macromodule libraries for control implementation have been developed <ref> [2, 7] </ref>. A synthesis style based on a high level language called Tangram [32] and an approach called Martin-style synthesis [38] using a CSP-style high level language for specification have been presented. <p> Although there is no consensus on the requirements for a good HDL, based on strong research some factors have emerged as important for asynchronous synthesis <ref> [2, 7, 38, 32] </ref> such as channel communication, process descriptions, and direct support of concurrency. Meanwhile, languages such as Verilog and VHDL have emerged as standards in the industry. <p> To balance these factors we define a language called Verilog+, which is a synthesizable subset of Verilog that supports many of the required features in asynchronous design. Syntax directed translation <ref> [2, 7, 38, 32] </ref> has proved to be a successful technique in high level asynchronous synthesis. Often synthesis methods that use this technique have targeted restricted module libraries, sometimes referred to as macromodules, for implementation. This method does not generate the most efficient implementations. <p> The functions representing the combinational parts of the allocated datapath resources are later synthesized with ordinary synchronous tools such as Viewlogic and Cadence LAS system. In the current implementation of ACK, communication and expression guards are assumed to be mutually exclusive. Techniques to relax this restriction are standard <ref> [2, 7, 38, 32] </ref> 49 and will be added in future versions of ACK. Currently the delays are computed from the worst case delay of the combinational logic as given by the synthesis tools. Due to the conservative unit delay model used in Viewlogic, the accuracy is far from satisfactory. <p> In this section we will provide a method to address this issue. 5.1 Related Work In [38], a technique called process decomposition is proposed. Process decomposition does not involve signal sharing between incompletely specified machines. Signal sharing is addressed in macromodule based design systems <ref> [2, 7] </ref> by using additional macromodules such as Toggles [66] and Decision-waits [21] to steer the global input to the correct sub-controller. Since macromodule libraries contain only a limited number of macromodule types, distributed control realizations based on macromodules are often inefficient [26]. <p> Allocation Support for user defined area/performance tradeoff should be added. This will require the ability to share resources within the same module. Methods for this are standard and can be found in <ref> [2, 7] </ref>. Partitioning Heuristics or methods for exact solutions to partitioning should be developed. Algorithms for partitioning under certain criteria such as minimal wire sharing between partitions, or resource sharing are of interest.
Reference: [3] <author> Akella V, Gopalakrishnan G. SHILPA: </author> <title> A High-Level Synthesis System for Self-Timed Circuits. </title> <booktitle> In Proceedings of the International Conference on Computer Aided Design (ICCAD), </booktitle> <year> 1992, </year> <pages> pp. 587-591. </pages>
Reference: [4] <author> Beerel P. A, Meng T. H. </author> <title> Automatic Gate-level Synthesis of Speed-independent Circuits. </title> <booktitle> In Proceedings of the International Conference on Computer Aided Design (ICCAD), </booktitle> <year> 1992, </year> <pages> pp. 581-586. </pages>
Reference: [5] <author> Beerel P. A, Yun K. Y, Chou W. </author> <title> Optimizing Average-case Delay in Technology Mapping of Burst-mode Circuits. </title> <booktitle> In Proceedings of the International Conference on Asynchronous Design, </booktitle> <year> 1996, </year> <pages> pp. 244-260. </pages>
Reference-contexts: An important part of the technology mapping process then is to find the combination of gate sizes that gives the best area/performance tradeoff from a given library of gates. A method in <ref> [5] </ref> also allows decomposition based on average case delay. This method is based on assigning probability values to branches in the burst mode specification. The gate decomposition is then based on with what frequency different actions are executed. <p> A near optimal solution is better than no solution at all. Complex Gate Implementation The method for custom complex gate implementation should be extended with a decomposition method for average case performance based on the method presented in <ref> [5] </ref>. A method for user defined area/performance tradeoff based on transistor sizing should also be incorporated. Completion Detection Using matching delays for completion detection requires careful timing to ensure a correct circuit behavior. This step should be automated by using a timing analysis tool.
Reference: [6] <author> Berkel v. K, Bink A. </author> <title> Single-track Handshake Signaling with Application to Micropipelines and Handshake Circuits. </title> <booktitle> In Proceedings of the International Conference on Asynchronous Design, </booktitle> <year> 1996, </year> <pages> pp. 122-133. </pages>
Reference-contexts: Signaling protocols defining how communication with the interface is to proceed is also a part of the environmental specification. Although other signaling schemes exist <ref> [6, 67] </ref>, these protocols are usually restricted to follow the two phase or four phase protocols for compatibility reasons.
Reference: [7] <author> Brunvand, E. </author> <title> Translating Concurrent Communicating Programs into Asynchronous Circuits. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <year> 1991. </year>
Reference-contexts: We present a tool called ACK that incorporates these features. There exist a wide variety of methodologies in asynchronous high level synthesis, that target various implementation styles. Methods targeting restricted macromodule libraries for control implementation have been developed <ref> [2, 7] </ref>. A synthesis style based on a high level language called Tangram [32] and an approach called Martin-style synthesis [38] using a CSP-style high level language for specification have been presented. <p> Although there is no consensus on the requirements for a good HDL, based on strong research some factors have emerged as important for asynchronous synthesis <ref> [2, 7, 38, 32] </ref> such as channel communication, process descriptions, and direct support of concurrency. Meanwhile, languages such as Verilog and VHDL have emerged as standards in the industry. <p> To balance these factors we define a language called Verilog+, which is a synthesizable subset of Verilog that supports many of the required features in asynchronous design. Syntax directed translation <ref> [2, 7, 38, 32] </ref> has proved to be a successful technique in high level asynchronous synthesis. Often synthesis methods that use this technique have targeted restricted module libraries, sometimes referred to as macromodules, for implementation. This method does not generate the most efficient implementations. <p> The functions representing the combinational parts of the allocated datapath resources are later synthesized with ordinary synchronous tools such as Viewlogic and Cadence LAS system. In the current implementation of ACK, communication and expression guards are assumed to be mutually exclusive. Techniques to relax this restriction are standard <ref> [2, 7, 38, 32] </ref> 49 and will be added in future versions of ACK. Currently the delays are computed from the worst case delay of the combinational logic as given by the synthesis tools. Due to the conservative unit delay model used in Viewlogic, the accuracy is far from satisfactory. <p> In this section we will provide a method to address this issue. 5.1 Related Work In [38], a technique called process decomposition is proposed. Process decomposition does not involve signal sharing between incompletely specified machines. Signal sharing is addressed in macromodule based design systems <ref> [2, 7] </ref> by using additional macromodules such as Toggles [66] and Decision-waits [21] to steer the global input to the correct sub-controller. Since macromodule libraries contain only a limited number of macromodule types, distributed control realizations based on macromodules are often inefficient [26]. <p> Allocation Support for user defined area/performance tradeoff should be added. This will require the ability to share resources within the same module. Methods for this are standard and can be found in <ref> [2, 7] </ref>. Partitioning Heuristics or methods for exact solutions to partitioning should be developed. Algorithms for partitioning under certain criteria such as minimal wire sharing between partitions, or resource sharing are of interest.
Reference: [8] <author> Bredeson J. G. </author> <title> Synthesis of Multiple-input Change Hazard-free Combinational Switching Circuits Without Feedback. </title> <journal> In International Journal of Electronics (GB), </journal> <volume> Vol. 39, No. 6, </volume> <month> December </month> <year> 1975, </year> <pages> pp. 615-624. </pages>
Reference-contexts: Since adding delays to ensure correct behavior slows down the circuit, a large body of work has been done in hazard free synthesis of such circuits. Many solutions for hazard free synthesis have been presented in the past <ref> [42, 8, 9, 23] </ref>. However, [42] only solves the problem under single input changes, [9] uses sequential storage elements and [8, 23] assumes fully specified functions and tries to eliminate hazards even for unspecified transitions resulting in suboptimal solutions. <p> Many solutions for hazard free synthesis have been presented in the past [42, 8, 9, 23]. However, [42] only solves the problem under single input changes, [9] uses sequential storage elements and <ref> [8, 23] </ref> assumes fully specified functions and tries to eliminate hazards even for unspecified transitions resulting in suboptimal solutions. Work in [50] presents a new method for hazard free minimization that, for problems where a solution can be found, eliminates all hazards. <p> For the remainder of this section it is therefore assumed that the output of a CMOS gate is only used as a control variable in other CMOS gates. The delay model assumed in this work is that of unbounded gate and wire delays, as in previous approaches <ref> [8, 50, 36, 35] </ref>. This is a conservative model, which assumes that inputs in a MIC can arrive at any time and in any order, and that gates and wires have unknown delay. <p> Besides requiring less area, this also reduces the delay through the circuit. 8.4 Multi-level Implementations 8.4.1 Background and Overview Several approaches have been used for multilevel hazard-free logic synthesis. In <ref> [8] </ref>, a technique was presented to derive single-output multilevel AND/OR gate implementations. The algorithm assumes a fully-specified function and attempts to eliminate hazards even for unspecified transitions, leading to inefficient implementations. A method using BDDs that target multilevel multiplexer based circuits is presented in [36]. <p> We will therefore present a new technique which is an extension of work in <ref> [8] </ref>, but which deals with the special hazard requirements of SOP/SOP complex-gates. The procedure is presented in two steps. First, we will give a model for the multilevel complex gates we target.
Reference: [9] <author> Bredeson J. G, Hulina P. T. </author> <title> Elimination of Static and Dynamic Hazards for Multiple Input Changes in Combinational Switching Circuits. </title> <journal> In Information and Control, </journal> <volume> Vol. 20, No. 2, </volume> <month> March </month> <year> 1972, </year> <pages> pp. 114-224. </pages>
Reference-contexts: Since adding delays to ensure correct behavior slows down the circuit, a large body of work has been done in hazard free synthesis of such circuits. Many solutions for hazard free synthesis have been presented in the past <ref> [42, 8, 9, 23] </ref>. However, [42] only solves the problem under single input changes, [9] uses sequential storage elements and [8, 23] assumes fully specified functions and tries to eliminate hazards even for unspecified transitions resulting in suboptimal solutions. <p> Many solutions for hazard free synthesis have been presented in the past [42, 8, 9, 23]. However, [42] only solves the problem under single input changes, <ref> [9] </ref> uses sequential storage elements and [8, 23] assumes fully specified functions and tries to eliminate hazards even for unspecified transitions resulting in suboptimal solutions. Work in [50] presents a new method for hazard free minimization that, for problems where a solution can be found, eliminates all hazards. <p> We may therefore get a dynamic 1 ! 0 ! 1 ! 0 hazard (glitch) at the output of the logic implementing the function. In <ref> [9] </ref> it has been proved that there is no way of avoiding a function hazard on the output of a combinational logic block if the inputs are allowed to arrive at arbitrary times. Function hazards must therefore be avoided before the logic synthesis step can take place.
Reference: [10] <institution> Custom Layout/Virtuoso LAS User's Manual. Cadence Design Systems Inc., </institution> <year> 1992. </year>
Reference-contexts: In addition to our algorithms, ACK makes use of many commercial and public domain tools. The Viewlogic and Cadence LAS <ref> [10] </ref> synthesis tools are used to generate datapaths and automatic synthesis of the complex gate controllers. Currently the complete ACK tool set is also encapsulated into, and can be run directly from, the Viewlogic cockpit. <p> For these examples, our method obtained a hazard-free combinational logic solution whereas the 3D tool [74] which uses hfmin [50] often had to add one or more state variables just in order to prevent logic hazards. For the comparison the Cadence schematic entry system and the LAS <ref> [10] </ref> layout syntheziser was used to generate layouts. The average critical path delays where then measured under same input slopes and output load. Results for cases where occuring logic hazards could be resolved using only single SOP/SOP complex gates is shown in the Single part of Table 8.1.
Reference: [11] <author> Chandrakasan A. P, Brodersen R. W. </author> <title> Minimizing Power Consumption in Digital CMOS Circuits. </title> <booktitle> In Proceedings of the IEEE, </booktitle> <volume> Vol. 83, No. 4, </volume> <month> April </month> <year> 1995, </year> <pages> pp. 498-523. 133 </pages>
Reference: [12] <author> Chu T. A. </author> <title> Synthesis of Self-timed VLSI Circuits from Graph Theoretic Specifications. </title> <type> PhD Thesis, </type> <institution> Department of EECS, Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1987. </year>
Reference-contexts: Since macromodule libraries contain only a limited number of macromodule types, distributed control realizations based on macromodules are often inefficient [26]. In <ref> [12, 55] </ref>, a method called contraction has been suggested as a decomposition technique for signal transition graph (STG) specifications. Contraction preserves the global nature of the controller. It does not turn a large grain controller into many smaller grain controllers and is therefore unable to take advantage of spatial locality.
Reference: [13] <author> Chuang H. Y, Das S. </author> <title> Synthesis of Multiple-input Change Asynchronous Machines Using Controlled Excitation and Flip-flops. </title> <journal> In IEEE Transactions on Computers, </journal> <volume> Vol. 22, No. 12, </volume> <month> December </month> <year> 1973, </year> <pages> pp. 1103 1109. </pages>
Reference-contexts: The self synchronized style will be discussed next followed by the Huffman only style. 7.2.1 The Self Synchronizing Style A method using a locally clocked approach for hazard free synthesis of burst mode machines was developed in [49]. This approach and others <ref> [27, 68, 1, 13, 57] </ref> make use of a method called self-synchronization. This method use Huffman machines along with a locally generated aperiodic clock acting on internal latches. <p> Third, this method offers synthesis using both the function region and excitation region approach <ref> [13] </ref> as well as the extended form of burst mode machine specification. Although only the functional region approach and ordinary burst mode machines are currently supported in the high level synthesis methodology of ACK, these additional features are easy to implement and could have advantages in certain situations.
Reference: [14] <author> Davis, A., Coates, B., and Stevens, K. </author> <title> The Post Office Experience: Designing a Large Asynchronous Chip. </title> <booktitle> In Proceedings of the 26th Annual Hawaiian International Conference on System Sciences, </booktitle> <volume> Volume 1 (Jan. </volume> <year> 1993), </year> <editor> T. Mudge, V. Milutinovic, and L. Hunter, </editor> <booktitle> Eds., </booktitle> <pages> pp. 409-418. </pages>
Reference-contexts: Many asynchronous design styles have targeted the problem of generating efficient control structures and dealt with the issues of design complexity and correctness. One class of such techniques target Huffman mode asynchronous finite state machines starting from burst mode specifications and use standard gates for implementation <ref> [14, 49, 63, 74] </ref>. We therefore target interacting burst mode controllers based on the previous control partioning and take advantage of the logic synthesis techniques available in burst mode controller synthesis to generate efficient controller circuits. <p> Customized CMOS gate implementations have been used successfully to design a large number of burst-mode Huffman style asynchronous controllers <ref> [14, 65] </ref>, however, a systematic analysis and synthesis methodology for deriving these has not been given. There are several reasons for considering custom CMOS complex-gate based circuits. <p> The general solution has therefore been to adopt the SIC mode of operation. A special form of input change called data driven mode was first introduced by Davis et al. <ref> [14] </ref>. This style is an extension to the MIC mode of operation since it does not have the restriction that inputs must occur within a limited time interval. <p> Analysis and efficient synthesis methods to generate such networks under a multiple-input change assumption (MIC) will be presented. Customized CMOS gate implementations have been successfully used to design a large number of burst-mode asynchronous controllers <ref> [14, 65] </ref>. However, previous methods do not present systematic models and synthesis algorithms to take advantage of the particular hazard properties of these circuits. There are several reasons for considering customized CMOS complex-gate based circuits. <p> Technology-mapping techniques to perform hazard-non-increasing mapping of two level AND/OR networks into complex gate networks from a standard cell library have been given in [63]. Other technology mapping techniques have implemented Boolean functions as single gate hazard-free CMOS complex gate circuits <ref> [14, 65] </ref>. However, no systematic procedure to derive such CMOS gates has been outlined, which includes precise hazard-free requirements for these gates. For the class of methods that use the excitation regions, single CMOS complex-gate circuits, called generalized C-elements [38], have been used as target implementations.
Reference: [15] <author> Dean, M. E. </author> <title> STRiP: A Self-timed RISC Processor Architecture. </title> <type> Ph.D. Thesis, </type> <institution> Stanford University, </institution> <year> 1992. </year>
Reference: [16] <author> Dean, M. E., Dill, D. L., Horowitz, M. </author> <title> Self-timed Logic Using Current-sensing Completion Detection (CSCD). </title> <booktitle> In Proceedings of the International Conference on Computer Design (ICCD), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1991, </year> <pages> pp. 187-191. </pages>
Reference: [17] <author> De Micheli G. </author> <title> Synthesis and Optimization of Digital Circuits. </title> <publisher> McGraw-Hill, </publisher> <year> 1994 </year>
Reference-contexts: A flow through scheme for ACK is currently under developement. Current research also include other techniques to optimize the behavioral Petri net and the refined control graph. Standard techniques for high level optimizations frequently used in synchronous synthesis such as those presented in <ref> [17] </ref> can be directly implemented. However, optimization techniques directly related to asynchronous structures are also of importance and are the aim of our research efforts. Such optimizations require that we can share datapath resources between different actions. These techniques will be added in future versions of ACK. <p> Step 3. Generate a Minimum Cover: The dhf-prime implicant table can now be solved in three steps using simple standard methods. Essential dhf-prime implicants are first extracted using standard techniques. The flow table is then iteratively reduced by removing rows and columns using row-dominance and column-dominance operations <ref> [17] </ref>. These operations may lead to further possibilities of secondary removal of essential dhf-prime implicants. These operations are iterated until there is no further change. If the table is still not empty after the iterations have finished, a cyclic covering problem remains. <p> Refinement The refinement process used is somewhat naive in that it is only based on the syntactic structure of individual statement constructs. A method taking advantage of high level synthesis optimizations such as those presented in <ref> [17] </ref> would be desirable. Experience has also shown that careful flow analysis of the refined controller can result in optimizations at the handshaking level. Allocation Support for user defined area/performance tradeoff should be added. This will require the ability to share resources within the same module.
Reference: [18] <author> Dill D. L. </author> <title> Trace Theory for Automatic Hierarchical Verification of Speed-independent Cirucits. </title> <publisher> MIT Press, An ACM Distinguished Dissertation, </publisher> <year> 1989. </year>
Reference: [19] <author> Dolotta T. A, McCluskey E. J. Jr. </author> <title> Encoding of incompletely specified Boolean matrices. </title> <booktitle> In Proceedings of Western Joint Computer Conference, </booktitle> <volume> Vol. 18, </volume> <pages> pp. 231-238, </pages> <year> 1960. </year>
Reference-contexts: Indeed, some of the allocated state variables may be redundant, i.e. they are the same for two or more rows in the Boolean matrix. We will remove such redundancies by a procedure similar to encoding of incompletely specified Boolean matrices <ref> [19] </ref>. Definition 8: Two rows of a Boolean matrix, R i and R j , have an intersection of R i and R j , written R i R j , iff R i and R j agree wherever both R i and R j are specified.
Reference: [20] <author> Ebergen, J. C. </author> <title> A Formal Approach to Designing Delay-insensitive Circuits. </title> <journal> Distributed Computing, </journal> <volume> Vol. 5, No. 3, </volume> <year> 1991, </year> <pages> pp. 107-119. </pages>
Reference: [21] <author> Ebergen J. C. </author> <title> Translating Programs into Delay-insensitive Ciruicts. </title> <publisher> Centrum for Wiskunde en Informatica, CWI Tract 56, </publisher> <address> Amsterdam, </address> <year> 1989. </year>
Reference-contexts: Process decomposition does not involve signal sharing between incompletely specified machines. Signal sharing is addressed in macromodule based design systems [2, 7] by using additional macromodules such as Toggles [66] and Decision-waits <ref> [21] </ref> to steer the global input to the correct sub-controller. Since macromodule libraries contain only a limited number of macromodule types, distributed control realizations based on macromodules are often inefficient [26].
Reference: [22] <author> Fang T. P, Molnar C. E. </author> <title> Synthesis of Reliable Speed-Independent Circuit Modules: II. Circuit and Delay Conditions to Ensure Operation Free of Problems from Races and Hazards. </title> <institution> Computer Systems Laboratory, Washington University Tech. </institution> <note> Memorandum 298, </note> <year> 1983. </year>
Reference: [23] <author> Frackoviak J. </author> <title> Metoden der Analyse und Synthese von Hasardarmen Schaltnetzen mit Minimalen Kosten I. </title> <journal> In Elektronische Informationsverarbeitung und Kybernetik, </journal> <volume> Vol. 10, No. 2/3, </volume> <year> 1974, </year> <pages> pp. 149-187. </pages>
Reference-contexts: Since adding delays to ensure correct behavior slows down the circuit, a large body of work has been done in hazard free synthesis of such circuits. Many solutions for hazard free synthesis have been presented in the past <ref> [42, 8, 9, 23] </ref>. However, [42] only solves the problem under single input changes, [9] uses sequential storage elements and [8, 23] assumes fully specified functions and tries to eliminate hazards even for unspecified transitions resulting in suboptimal solutions. <p> Many solutions for hazard free synthesis have been presented in the past [42, 8, 9, 23]. However, [42] only solves the problem under single input changes, [9] uses sequential storage elements and <ref> [8, 23] </ref> assumes fully specified functions and tries to eliminate hazards even for unspecified transitions resulting in suboptimal solutions. Work in [50] presents a new method for hazard free minimization that, for problems where a solution can be found, eliminates all hazards.
Reference: [24] <author> Friedman A. D, Menon P.R. </author> <title> Synthesis of Asynchronous Sequential Circuits With Multiple-input Changes In IEEE Transactions on Computers, </title> <journal> Vol. </journal> <volume> 17, No. 6, </volume> <month> June </month> <year> 1968, </year> <pages> pp. 559-566. </pages>
Reference-contexts: Methods for implementing Huffman only machines for SIC and MIC have been presented [71] using inertial delays and <ref> [24, 37] </ref> that make use of delays, large flow tables, careful timing requirements and specialized state codes. All these methods slow down circuit operation. The 3D method deals with these performance problems by generating hazard free combinational logic instead of introducing delays to ensure correct circuit behavior.
Reference: [25] <author> Furber S. B, Day P, Garside J. D, Paver N. C, Woods J. V. AMULET1: </author> <title> A Micropipelined ARM. </title> <booktitle> In Proceedings of CompCon'94, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <address> CompCon'94, San Francisco, </address> <month> March </month> <year> 1994 </year>
Reference: [26] <author> Gopalakrishnan G. C, Kudva P. N, Brunvand E. L. </author> <title> Peephole Optimization of Asynchronous Macromodule Networks. </title> <booktitle> In Proceedings of the International Conference on Computer Design (ICCD), </booktitle> <year> 1994, </year> <pages> pp. 442-446. 134 </pages>
Reference-contexts: Often synthesis methods that use this technique have targeted restricted module libraries, sometimes referred to as macromodules, for implementation. This method does not generate the most efficient implementations. Resynthesis techniques such as peephole optimization <ref> [26] </ref>, where inefficient parts of the macromodule controllers are identified and replaced by more efficient implementations based on asynchronous finite state machines synthesis, have shown that FSM representations are a viable option for efficient control implementation. <p> Since macromodule libraries contain only a limited number of macromodule types, distributed control realizations based on macromodules are often inefficient <ref> [26] </ref>. In [12, 55], a method called contraction has been suggested as a decomposition technique for signal transition graph (STG) specifications. Contraction preserves the global nature of the controller. <p> With this notation each thread of a fork-join is an STS 11 since they are required to have only one start place and one end place. In order to generate legal burst-mode machines [49] from the partitions through burst-mode reduction <ref> [26] </ref> (discussed in section 6), the original SFJ graphs must obey the following restrictions, in that they are (1) initially quiescent, and attain quiescence infinitely often; (2) deterministic, and (3) obey the subset property [49]. 5.2.2 Create Partitioned Controllers The goal of partitioning is to generate a stand alone controller for
Reference: [27] <author> Hayes, A. B. </author> <title> Stored state asynchronous sequential circuits. </title> <journal> In IEEE Transactions on Computers, </journal> <volume> Vol. 30, No. 8, </volume> <month> August </month> <year> 1981, </year> <month> pp.596-600. </month>
Reference-contexts: The self synchronized style will be discussed next followed by the Huffman only style. 7.2.1 The Self Synchronizing Style A method using a locally clocked approach for hazard free synthesis of burst mode machines was developed in [49]. This approach and others <ref> [27, 68, 1, 13, 57] </ref> make use of a method called self-synchronization. This method use Huffman machines along with a locally generated aperiodic clock acting on internal latches.
Reference: [28] <author> Hedberg A, Jacobson H. M, Einarsson M, Jennings G. </author> <title> Imposing a Unified Design Methodology on Independent Rapid Prototyping Tools. </title> <booktitle> In Proceedings of the Sixth IEEE International Workshop on Rapid Systems Prototyping (RSP95), </booktitle> <month> June </month> <year> 1995, </year> <pages> pp. 217-222. </pages>
Reference-contexts: Implicit means that there is no separate description of the interconnection necessary. Instead, a naming convention similar to that in <ref> [28] </ref>, which has shown to be an effective way to handle automatic interconnection of large circuits, is introduced. If several modules have the same name and type for an event wire, channel, variable or function, it is assumed to be shared between these modules.
Reference: [29] <author> Hoare C. A. R. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall International, UK Ltd., </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1985. </year>
Reference: [30] <author> Huffman D. A. </author> <title> The Synthesis of Sequential Switching Circuits. </title> <journal> J. Franklin Institute, </journal> <month> March/April </month> <year> 1954. </year>
Reference: [31] <author> Jennings G, Jennings E. </author> <title> A Discrete Syntax for Level-Sensitive Latched Circuits Having n Clocks and m Phases. </title> <journal> In IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, </journal> <volume> Vol. 15, No. 1, </volume> <month> January </month> <year> 1996, </year> <pages> pp. 111-126. </pages>
Reference: [32] <author> Kessels, J., van Berkel, K., Burgess, R., Roncken, M., and Schalij, F. </author> <title> An error decoder for the compact disc player as an example of VLSI programming. </title> <type> Tech. rep., </type> <institution> Philips Research Laboratories, Eindhoven, </institution> <address> The Netherlands, </address> <year> 1993. </year>
Reference-contexts: There exist a wide variety of methodologies in asynchronous high level synthesis, that target various implementation styles. Methods targeting restricted macromodule libraries for control implementation have been developed [2, 7]. A synthesis style based on a high level language called Tangram <ref> [32] </ref> and an approach called Martin-style synthesis [38] using a CSP-style high level language for specification have been presented. Our method presents an asynchronous synthesis paradigm that generates data path and asynchronous state machine controllers from a behavioral description in a standard HDL. <p> Although there is no consensus on the requirements for a good HDL, based on strong research some factors have emerged as important for asynchronous synthesis <ref> [2, 7, 38, 32] </ref> such as channel communication, process descriptions, and direct support of concurrency. Meanwhile, languages such as Verilog and VHDL have emerged as standards in the industry. <p> To balance these factors we define a language called Verilog+, which is a synthesizable subset of Verilog that supports many of the required features in asynchronous design. Syntax directed translation <ref> [2, 7, 38, 32] </ref> has proved to be a successful technique in high level asynchronous synthesis. Often synthesis methods that use this technique have targeted restricted module libraries, sometimes referred to as macromodules, for implementation. This method does not generate the most efficient implementations. <p> The functions representing the combinational parts of the allocated datapath resources are later synthesized with ordinary synchronous tools such as Viewlogic and Cadence LAS system. In the current implementation of ACK, communication and expression guards are assumed to be mutually exclusive. Techniques to relax this restriction are standard <ref> [2, 7, 38, 32] </ref> 49 and will be added in future versions of ACK. Currently the delays are computed from the worst case delay of the combinational logic as given by the synthesis tools. Due to the conservative unit delay model used in Viewlogic, the accuracy is far from satisfactory. <p> Partitioning also often significantly decreases the number of literals in the synthesized design and often increases the overall controller performance compared to that of a centralized implementation. In Table 5.1 we show the partitioning results for a CD Player Error Corrector from <ref> [32] </ref>, a Barcode Reader from the High Level Synthesis Design benchmarks [52] adapted to asynchronous operation, an iterative implementation of the Greatest Common Divisor algorithm, a Factorial computation unit, and a synchronization Loop example.
Reference: [33] <author> Kudva P. N, Jacobson H. M, Gopalakrishnan G. C. </author> <title> Synthesis of Hazard-free Customized CMOS Complex-Gate Networks Under Multiple-Input Changes. </title> <booktitle> In Proceedings of the 33rd Design Automation Conference (DAC), </booktitle> <year> 1996, </year> <pages> pp. 77-82. </pages>
Reference-contexts: Depending on the probability distribution a performance gain of between 10-20% can be achieved using this method. Apart from mapping to a two level sum of products implementation there are many other styles of implementation that can be targeted <ref> [33, 36, 63] </ref>. Some of these, and especially a method to target custom complex gates will be discussed in the next section. 7.8 Conclusions This section has presented the concept of asynchronous finite state machine synthesis.
Reference: [34] <author> Kudva P. N, Gopalakrishnan G. C, Jacobson H. M. </author> <title> A Technique for Synthesizing Distributed Burst-mode Circuits. </title> <booktitle> In Proceedings of the 33rd Design Automation Conference (DAC), </booktitle> <year> 1996, </year> <pages> pp. 67-70. </pages>
Reference: [35] <author> Kung D. </author> <title> Hazard-non-increasing Gate Level Optimization Algorithms. </title> <booktitle> In Proceedings of the International Conference on Computer Aided Design (ICCAD), </booktitle> <year> 1992. </year>
Reference-contexts: Various techniques for hazard-free logic minimization have been proposed for the function region approach. An exact hazard-free two-level logic minimization algorithm, based on a modified Quine-McCluskey method, is given in [50]. Hazard non-increasing transformations and algorithms for multilevel optimization of gate-level logic have been given in <ref> [35, 71] </ref>. A BDD-based method [36] which targets multilevel multiplexor-based networks has been developed. Technology-mapping techniques to perform hazard-non-increasing mapping of two level AND/OR networks into complex gate networks from a standard cell library have been given in [63]. <p> For the remainder of this section it is therefore assumed that the output of a CMOS gate is only used as a control variable in other CMOS gates. The delay model assumed in this work is that of unbounded gate and wire delays, as in previous approaches <ref> [8, 50, 36, 35] </ref>. This is a conservative model, which assumes that inputs in a MIC can arrive at any time and in any order, and that gates and wires have unknown delay.
Reference: [36] <author> Lin B, Devadas S. </author> <title> Synthesis of Hazard-free Multi-level Implementations Under Multiple-input Changes From Binary Decision Diagrams. </title> <booktitle> In Proceedings of the International Conference on Computer Aided Design (ICCAD), </booktitle> <year> 1994. </year>
Reference-contexts: Depending on the probability distribution a performance gain of between 10-20% can be achieved using this method. Apart from mapping to a two level sum of products implementation there are many other styles of implementation that can be targeted <ref> [33, 36, 63] </ref>. Some of these, and especially a method to target custom complex gates will be discussed in the next section. 7.8 Conclusions This section has presented the concept of asynchronous finite state machine synthesis. <p> An exact hazard-free two-level logic minimization algorithm, based on a modified Quine-McCluskey method, is given in [50]. Hazard non-increasing transformations and algorithms for multilevel optimization of gate-level logic have been given in [35, 71]. A BDD-based method <ref> [36] </ref> which targets multilevel multiplexor-based networks has been developed. Technology-mapping techniques to perform hazard-non-increasing mapping of two level AND/OR networks into complex gate networks from a standard cell library have been given in [63]. <p> For the remainder of this section it is therefore assumed that the output of a CMOS gate is only used as a control variable in other CMOS gates. The delay model assumed in this work is that of unbounded gate and wire delays, as in previous approaches <ref> [8, 50, 36, 35] </ref>. This is a conservative model, which assumes that inputs in a MIC can arrive at any time and in any order, and that gates and wires have unknown delay. <p> In [8], a technique was presented to derive single-output multilevel AND/OR gate implementations. The algorithm assumes a fully-specified function and attempts to eliminate hazards even for unspecified transitions, leading to inefficient implementations. A method using BDDs that target multilevel multiplexer based circuits is presented in <ref> [36] </ref>. The multiplexers in this method are assumed to be hazard-free. A method to eliminate dynamic hazards from signal transition graph specifications by iterative factoring has been presented in [45]. Factoring does not eliminate static hazards. 121 Work in [63] targets multilevel hazard-free circuits, starting from a hazard-free two-level circuit.
Reference: [37] <author> Mago G. </author> <title> Realization Methods for Asynchronous Sequential Circuits. </title> <journal> In IEEE Transactions on Computers, </journal> <volume> Vol. 20, No. 3, </volume> <month> March </month> <year> 1971, </year> <pages> pp. 290-297. </pages>
Reference-contexts: Methods for implementing Huffman only machines for SIC and MIC have been presented [71] using inertial delays and <ref> [24, 37] </ref> that make use of delays, large flow tables, careful timing requirements and specialized state codes. All these methods slow down circuit operation. The 3D method deals with these performance problems by generating hazard free combinational logic instead of introducing delays to ensure correct circuit behavior.
Reference: [38] <author> Martin, A. J. </author> <title> Programming in VLSI: From communicating processes to delay-insensitive circuits. </title> <booktitle> In UT Year of Programming Institute on Concurrent Programming (1989), </booktitle> <editor> e. C.A.R. Hoare, Ed. </editor> <address> MA: </address> <publisher> Addison-Wesley, </publisher> <year> 1989, </year> <pages> pp. 1-64. </pages>
Reference-contexts: There exist a wide variety of methodologies in asynchronous high level synthesis, that target various implementation styles. Methods targeting restricted macromodule libraries for control implementation have been developed [2, 7]. A synthesis style based on a high level language called Tangram [32] and an approach called Martin-style synthesis <ref> [38] </ref> using a CSP-style high level language for specification have been presented. Our method presents an asynchronous synthesis paradigm that generates data path and asynchronous state machine controllers from a behavioral description in a standard HDL. <p> Although there is no consensus on the requirements for a good HDL, based on strong research some factors have emerged as important for asynchronous synthesis <ref> [2, 7, 38, 32] </ref> such as channel communication, process descriptions, and direct support of concurrency. Meanwhile, languages such as Verilog and VHDL have emerged as standards in the industry. <p> To balance these factors we define a language called Verilog+, which is a synthesizable subset of Verilog that supports many of the required features in asynchronous design. Syntax directed translation <ref> [2, 7, 38, 32] </ref> has proved to be a successful technique in high level asynchronous synthesis. Often synthesis methods that use this technique have targeted restricted module libraries, sometimes referred to as macromodules, for implementation. This method does not generate the most efficient implementations. <p> The functions representing the combinational parts of the allocated datapath resources are later synthesized with ordinary synchronous tools such as Viewlogic and Cadence LAS system. In the current implementation of ACK, communication and expression guards are assumed to be mutually exclusive. Techniques to relax this restriction are standard <ref> [2, 7, 38, 32] </ref> 49 and will be added in future versions of ACK. Currently the delays are computed from the worst case delay of the combinational logic as given by the synthesis tools. Due to the conservative unit delay model used in Viewlogic, the accuracy is far from satisfactory. <p> In this section we will provide a method to address this issue. 5.1 Related Work In <ref> [38] </ref>, a technique called process decomposition is proposed. Process decomposition does not involve signal sharing between incompletely specified machines. Signal sharing is addressed in macromodule based design systems [2, 7] by using additional macromodules such as Toggles [66] and Decision-waits [21] to steer the global input to the correct sub-controller. <p> However, no systematic procedure to derive such CMOS gates has been outlined, which includes precise hazard-free requirements for these gates. For the class of methods that use the excitation regions, single CMOS complex-gate circuits, called generalized C-elements <ref> [38] </ref>, have been used as target implementations. These techniques usually rely on the use of state holding elements on the output of the gate.
Reference: [39] <author> Martin, A. J. </author> <title> The limitation to delay-insensitivity in asynchronous circuits. </title> <editor> In W.J. Dally, editor, </editor> <booktitle> Advanced Research in VLSI: Proceedings of the Sixth MIT Conference, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990, </year> <pages> pp. 263-278. </pages>
Reference: [40] <author> Martin, A. J., Burns, S. M., Lee, T. K., Borkovic, D., Hazewindus, P. J. </author> <title> The design of an asynchronous microprocessor. </title> <booktitle> In 1989 Caltech Conference on Very Large Scale Integration, </booktitle> <year> 1989. </year>
Reference: [41] <author> Martin A. J. </author> <booktitle> A Synthesis Method for Self-timed VLSI Circuits In Proceedings of the International Conference on Computer Design (ICCD), </booktitle> <month> October </month> <year> 1987, </year> <pages> pp. 224-229. </pages>
Reference: [42] <author> McCluskey E. J. </author> <title> Introduction to the Theory of Switching Circuits. </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY, </address> <year> 1965. </year>
Reference-contexts: Since adding delays to ensure correct behavior slows down the circuit, a large body of work has been done in hazard free synthesis of such circuits. Many solutions for hazard free synthesis have been presented in the past <ref> [42, 8, 9, 23] </ref>. However, [42] only solves the problem under single input changes, [9] uses sequential storage elements and [8, 23] assumes fully specified functions and tries to eliminate hazards even for unspecified transitions resulting in suboptimal solutions. <p> Since adding delays to ensure correct behavior slows down the circuit, a large body of work has been done in hazard free synthesis of such circuits. Many solutions for hazard free synthesis have been presented in the past [42, 8, 9, 23]. However, <ref> [42] </ref> only solves the problem under single input changes, [9] uses sequential storage elements and [8, 23] assumes fully specified functions and tries to eliminate hazards even for unspecified transitions resulting in suboptimal solutions. <p> We will briefly present such a method that is based on a method for reduction of incompletely specified Boolean matrices <ref> [42, 54, 70] </ref>. This method gives an exact solution to the problem of finding the minimal number of symbolic states for an incompletely specified Boolean matrix and is exponential in algorithmic complexity. The method presented here is quite simple and straight forward.
Reference: [43] <author> Mead, C. A., and Conway, L. A. </author> <title> Introduction to VLSI Systems. </title> <publisher> Addison-Wesley, </publisher> <year> 1980. </year> <note> ISBN 0-201-04358-0 </note>
Reference: [44] <author> Molnar C. E, Fang T. P, Rosenberger F. U. </author> <title> Synthesis of Delay-Insensitive Modules. </title> <booktitle> In Proceedings of the 1985 Chappel Hill Conference on Advanced Research in VLSI, </booktitle> <year> 1985, </year> <pages> pp. 67-86. </pages>
Reference: [45] <author> Moon C. W, Brayton R. K. </author> <title> Elimination of Dynamic Hazards By Factoring. </title> <booktitle> In Proceedings of the 30th Design Automation Conference (DAC), </booktitle> <year> 1993, </year> <pages> pp. 7-13. </pages>
Reference-contexts: A method using BDDs that target multilevel multiplexer based circuits is presented in [36]. The multiplexers in this method are assumed to be hazard-free. A method to eliminate dynamic hazards from signal transition graph specifications by iterative factoring has been presented in <ref> [45] </ref>. Factoring does not eliminate static hazards. 121 Work in [63] targets multilevel hazard-free circuits, starting from a hazard-free two-level circuit.
Reference: [46] <author> Murata, T. </author> <title> Petri Nets: Properties, Analysis and Applications. </title> <booktitle> In Proceedings of the IEEE, </booktitle> <volume> Vol. 77, No. 4, </volume> <year> 1989, </year> <pages> pp. 541-580. </pages>
Reference: [47] <author> Myers C. J, Meng T. H. </author> <title> Synthesis of Timed Asynchronous Circuits. </title> <journal> In IEEE Transactions on VLSI Systems, </journal> <volume> Vol. 1, No. 2, </volume> <month> June </month> <year> 1993, </year> <pages> pp. 106-119. </pages>
Reference: [48] <author> Nielsen L.S, Niessen C, Sparst J, Berkel van K. </author> <title> Low-Power Operation Using Self-Timed Circuits and Adaptive Scaling of the Supply Voltage. </title> <booktitle> In IEEE Transactions on Very Large Scale Integration (VLSI) Systems, </booktitle> <volume> Vol. 2, No. 4, </volume> <month> December </month> <year> 1994, </year> <pages> pp. 391-397. </pages>
Reference: [49] <author> Nowick, S. M. </author> <title> Automatic synthesis of burst-mode asynchronous controllers. </title> <type> Tech. rep., Ph.D Thesis, </type> <institution> Computer Systems Laboratory, Stanford University, </institution> <year> 1993. </year>
Reference-contexts: Many asynchronous design styles have targeted the problem of generating efficient control structures and dealt with the issues of design complexity and correctness. One class of such techniques target Huffman mode asynchronous finite state machines starting from burst mode specifications and use standard gates for implementation <ref> [14, 49, 63, 74] </ref>. We therefore target interacting burst mode controllers based on the previous control partioning and take advantage of the logic synthesis techniques available in burst mode controller synthesis to generate efficient controller circuits. <p> We therefore target interacting burst mode controllers based on the previous control partioning and take advantage of the logic synthesis techniques available in burst mode controller synthesis to generate efficient controller circuits. Although the interacting burst-mode controllers can be built efficiently using standard gate-level cell libraries <ref> [49, 63] </ref>, even better performance can be obtained by mapping the burst-mode controllers to custom CMOS complex-gate implementations. <p> With this notation each thread of a fork-join is an STS 11 since they are required to have only one start place and one end place. In order to generate legal burst-mode machines <ref> [49] </ref> from the partitions through burst-mode reduction [26] (discussed in section 6), the original SFJ graphs must obey the following restrictions, in that they are (1) initially quiescent, and attain quiescence infinitely often; (2) deterministic, and (3) obey the subset property [49]. 5.2.2 Create Partitioned Controllers The goal of partitioning is <p> In order to generate legal burst-mode machines <ref> [49] </ref> from the partitions through burst-mode reduction [26] (discussed in section 6), the original SFJ graphs must obey the following restrictions, in that they are (1) initially quiescent, and attain quiescence infinitely often; (2) deterministic, and (3) obey the subset property [49]. 5.2.2 Create Partitioned Controllers The goal of partitioning is to generate a stand alone controller for each of the specified partitions in the original graph. <p> The signals are annotated with + and signs to indicate whether the signal is supposed to make a rising or 1 Annotated with + or sign to distinguish rising and falling transitions. 71 falling transition. A more precise definition of a burst mode machine can be found in <ref> [49] </ref>. An example of a burst mode specification is illustrated in figure 6.1. If not specified otherwise, all inputs, outputs and state variables are initially set to zero. The state machine initially starts in state 0. <p> From the burst mode graphs that have been created using the method presented in this section the next step is to generate Boolean functions for the controllers they describe. This is done using existing burst mode synthesis tools <ref> [74, 49] </ref> and will be discussed in the next section. 78 based Petri net, (c) burst mode graph, (d) reshu*ed burst mode graph 79 Chapter 7 Burst Mode State Machine Synthesis At this point we have generated a collection of asynchronous finite state machines in the form of burst mode controllers <p> Instead a set of inputs is specified as a burst and the signals may change in any order with arbitrary delay in between. After a full burst has been received outputs and next state signals are generated. This method require fundamental mode operation. In <ref> [49] </ref> a constrained and formalized version of Davis data driven mode called burst mode (BM) was introduced. This style uses specifications in the form of Mealy style finite state machines and imposes no timing restrictions on multiple input 82 changes. <p> The self synchronized style will be discussed next followed by the Huffman only style. 7.2.1 The Self Synchronizing Style A method using a locally clocked approach for hazard free synthesis of burst mode machines was developed in <ref> [49] </ref>. This approach and others [27, 68, 1, 13, 57] make use of a method called self-synchronization. This method use Huffman machines along with a locally generated aperiodic clock acting on internal latches. <p> The clock signal generation in these methods have been based on XOR-trees or combinational logic using inertial delays to remove glitches. These methods have resulted in implementations having rather poor performance due to the worst case design and added delays. The method presented in <ref> [49] </ref> deals with these performance problems by only using the clock for state changes. The outputs freely flow through the internal latches that are always transparent except during a state change. This method also uses a new method for making hazard free (glitch free) minimization [50] of the combinational logic. <p> Unlike synchronous design a clock tick is generated only when it is needed, when a new input burst arrives. The clock is therefore aperiodic, meaning it does not have a fixed cycle time. The general structure of the locally clocked method used in <ref> [49] </ref> is illustrated in Figure 7.1. It consists of combinational logic for the clock, output and state signal generation, storage elements in the form of latches, and a set of primary inputs and outputs. The phase-1 latches are dynamic while the phase-2 latches are static. <p> The advantage of this selective clocking method is that it tends to require less complex logic for the clock generation and that many transitions will not have the clock-cycle overhead. An example taken from <ref> [49] </ref> is illustrated in figure 7.2. The burst mode specification of the controller is shown in figure 7.2 (a), and the resulting implementation after synthesis is 84 viewed in figure 7.2 (b). <p> The contribution of this section is to address the problem of deriving hazard-free customized CMOS realizations for asynchronous controllers under multiple-input changes, using the function region approach. This problem is encountered during the synthesis of burst-mode circuits <ref> [49, 74] </ref> and is a general problem in asynchronous synthesis. In particular, we present a style of CMOS gate design, called SOP/SOP form, that reduces the constraints in hazard-free synthesis of single CMOS complex gates. Second, we present a generalization of this technique to multilevel networks. <p> Required cube A is covered only by itself (bc 0 ), which illegally intersects dynamic transition t2. Similarly, required cube B is covered only by itself (a 0 c), which illegally intersects dynamic transition t1. Therefore, no dhf-prime exists to cover A and B. Burst-mode sequential synthesis tools <ref> [49, 74] </ref> avoid this problem at an earlier point in synthesis: during state minimization. By using careful constraints on state merger, these methods produce Boolean functions for which a hazard-free solution exists.
Reference: [50] <author> Nowick, S. M, and Dill, D. L. </author> <title> Exact two-level minimization of hazard-free logic with multiple-input changes. </title> <journal> IEEE Transactions on Computer-Aided Design, </journal> <volume> Vol. 14, No. 8, </volume> <month> August </month> <year> 1995, </year> <pages> pp. 986-997. </pages>
Reference-contexts: The method presented in [49] deals with these performance problems by only using the clock for state changes. The outputs freely flow through the internal latches that are always transparent except during a state change. This method also uses a new method for making hazard free (glitch free) minimization <ref> [50] </ref> of the combinational logic. This method thereby exploits the average case delay properties of the individual controllers as well as reduces the latching delay compared to other methods. 83 It is important to notice the difference between the self-synchronized and synchronous approach. <p> However, [42] only solves the problem under single input changes, [9] uses sequential storage elements and [8, 23] assumes fully specified functions and tries to eliminate hazards even for unspecified transitions resulting in suboptimal solutions. Work in <ref> [50] </ref> presents a new method for hazard free minimization that, for problems where a solution can be found, eliminates all hazards. This method only eliminates hazards for specified transitions using exact algorithms, making the solution optimal. <p> The conditions presented here have their origin in the definitions of function and logic hazards previously discussed in section 7.3 and are taken from <ref> [51, 69, 50] </ref>. The following are definitions of a transition cube and its subcubes. Definition 1. Let A and B be two minterms. <p> The method for hazard free minimization presented here is based on the Quine-McCluskey algorithm for solving the two-level logic minimization problem with proper restrictions added to ensure no logic hazards are introduced by the covering procedure. This method is explained in more detail in <ref> [50] </ref>. A heuristic near optimal method is presented in [69]. The Quine-McCluskey algorithm has three basic steps: 1. Generate the prime implicants of a function. 2. Construct a prime implicant table. 107 108 3. Generate a minimum cover of this table. <p> Various techniques for hazard-free logic minimization have been proposed for the function region approach. An exact hazard-free two-level logic minimization algorithm, based on a modified Quine-McCluskey method, is given in <ref> [50] </ref>. Hazard non-increasing transformations and algorithms for multilevel optimization of gate-level logic have been given in [35, 71]. A BDD-based method [36] which targets multilevel multiplexor-based networks has been developed. <p> For the remainder of this section it is therefore assumed that the output of a CMOS gate is only used as a control variable in other CMOS gates. The delay model assumed in this work is that of unbounded gate and wire delays, as in previous approaches <ref> [8, 50, 36, 35] </ref>. This is a conservative model, which assumes that inputs in a MIC can arrive at any time and in any order, and that gates and wires have unknown delay. <p> possible [71]. 119 SOP/SOP form, both the p network and the n network may have dynamic hazards, creating a hazard at the output of the complex gate. 8.3.3 Algorithm For SOP/SOP Realizations Our hazard-free algorithm for SOP/SOP complex-gate realizations is similar to an existing algorithm for hazard-free two-level simple-gate networks <ref> [50] </ref> presented in section 7.6. The key difference is that our new algorithm uses fewer constraints: we can ignore hazards due to static transitions in the SOP/SOP realization. The steps after the generation of sets are common to both the complex-gate algorithm and two-level algorithm, and are summarized below. <p> Note that the unate covering problem in our complex-gate algorithm is less restrictive: required cubes for static 1 ! 1 transitions need not be covered. In fact, there are problems which have no 2-level hazard-free solution, but where a complex-gate solution exists. For instance, the example used in <ref> [50] </ref> to demonstrate the absence of a solution for hazard-free AND/OR implementation, has a solution in the SOP/SOP form of complex-gate implementation. is implemented both using a two level implementation using simple AND/OR gates and using the SOP/SOP customized complex gate method. <p> Note that the static hazard for transition abc:101 ! 001 does not manifest in the SOP/SOP multilevel implementation. Also, no state variable is needed. hfmin <ref> [50] </ref> to produce a hazard-free two-level AND/OR gate implementation. A state variable has been added to eliminate the hazard problem in this case. An algorithm for deriving multilevel complex gates is given in figure 8.5. <p> For these examples, our method obtained a hazard-free combinational logic solution whereas the 3D tool [74] which uses hfmin <ref> [50] </ref> often had to add one or more state variables just in order to prevent logic hazards. For the comparison the Cadence schematic entry system and the LAS [10] layout syntheziser was used to generate layouts.
Reference: [51] <author> Nowick, S. M, Coates B. UCLOCK: </author> <title> Automated Design of High-Performance Unclocked State Machines. </title> <booktitle> In Proceedings of the International Conference on Computer Design (ICCD), </booktitle> <year> 1994, </year> <pages> pp. 434-441. </pages>
Reference-contexts: The conditions presented here have their origin in the definitions of function and logic hazards previously discussed in section 7.3 and are taken from <ref> [51, 69, 50] </ref>. The following are definitions of a transition cube and its subcubes. Definition 1. Let A and B be two minterms.
Reference: [52] <author> Panda P. R, Dutt N. </author> <title> 1995 High Level Synthesis Design Repository. </title> <type> Tech. Report 95-04, </type> <institution> University of California, Irvine, </institution> <month> February </month> <year> 1995. </year>
Reference-contexts: In Table 5.1 we show the partitioning results for a CD Player Error Corrector from [32], a Barcode Reader from the High Level Synthesis Design benchmarks <ref> [52] </ref> adapted to asynchronous operation, an iterative implementation of the Greatest Common Divisor algorithm, a Factorial computation unit, and a synchronization Loop example. For the CD Player Error Corrector and the Barcode Reader the synthesis of the centralized controllers did not complete due to the complexity of the synthesis task.
Reference: [53] <author> Pedron C, Stauffer A. </author> <title> Analysis and Synthesis of Combinatinal Pass Transistor Circuits. </title> <journal> In IEEE Transactions on CAD/CAS, </journal> <volume> Vol. 6, No. 5, </volume> <year> 1988, </year> <pages> pp. 727-750. </pages>
Reference-contexts: Results will be provided in section 8.5. 115 8.2 Terminology We will provide definitions relating to pass transistor and CMOS logic gates we will use. We will then briefly describe some terminology on hazards. 8.2.1 Pass Transistor Networks A model for pass transistor logic has been developed in <ref> [53, 56, 61, 63] </ref>. We will describe and extend the model presented in these works for single CMOS gates. Definition 1.
Reference: [54] <author> Petrick S. R. </author> <title> A direct determination of the irredundant forms of a Boolean function from the set of prime implicants. </title> <institution> Air Force Cambridge research Center, Cambridge, Mass., </institution> <type> Tech. Rep. </type> <institution> AFCRC-TR-56-110, </institution> <year> 1956. </year>
Reference-contexts: We will briefly present such a method that is based on a method for reduction of incompletely specified Boolean matrices <ref> [42, 54, 70] </ref>. This method gives an exact solution to the problem of finding the minimal number of symbolic states for an incompletely specified Boolean matrix and is exponential in algorithmic complexity. The method presented here is quite simple and straight forward. <p> These expanded combinations are called maximal compatibles. We then want to find a minimal set of such maximal compatibles that covers each internal state. This is done using Petrick's method <ref> [54] </ref>. The problem is then formulated as a product of sums expression where each sum represents all maximal intersectables that contains a certain internal state row in the flow table. This expression is then multiplied out to form a sum of products representation. <p> This is done by formulating the problem as a product of sums where a factor is a sum of all maximal intersectable containing a certain row in the Boolean matrix (Petrick's method <ref> [54] </ref>). In figure 7.11 (f) the first factor consists of the sum of the maximal intersectables A and B since these both contain row 1 in the Boolean matrix and thus either of these maximal intersectables can be used to cover row 1.
Reference: [55] <author> Puri R, Gu J. </author> <title> A Modular Partitioning Approach for Asynchronous Circuit Synthesis. </title> <booktitle> In Proceedings of the ACM/IEEE Design Automation Conference, </booktitle> <year> 1994, </year> <pages> pp. 63-69. </pages>
Reference-contexts: Since macromodule libraries contain only a limited number of macromodule types, distributed control realizations based on macromodules are often inefficient [26]. In <ref> [12, 55] </ref>, a method called contraction has been suggested as a decomposition technique for signal transition graph (STG) specifications. Contraction preserves the global nature of the controller. It does not turn a large grain controller into many smaller grain controllers and is therefore unable to take advantage of spatial locality.
Reference: [56] <author> Radhakrishnan D, Whitaker S, Maki G. </author> <title> Formal Design Procedures for Pass Transistor Switching Circuits. </title> <journal> In IEEE Journal of Solid State Circuits, </journal> <volume> Vol. 20, No. 2, </volume> <year> 1985, </year> <pages> pp. 531-536. </pages>
Reference-contexts: Results will be provided in section 8.5. 115 8.2 Terminology We will provide definitions relating to pass transistor and CMOS logic gates we will use. We will then briefly describe some terminology on hazards. 8.2.1 Pass Transistor Networks A model for pass transistor logic has been developed in <ref> [53, 56, 61, 63] </ref>. We will describe and extend the model presented in these works for single CMOS gates. Definition 1.
Reference: [57] <author> Rey C. A, Vaucher J. </author> <title> Self-synchronized Asynchronous Sequential Machines. </title> <journal> In IEEE Transaction on Computers, </journal> <volume> Vol. 23, No. 12, </volume> <month> December </month> <year> 1974, </year> <pages> pp. 1306-1311. 136 </pages>
Reference-contexts: The self synchronized style will be discussed next followed by the Huffman only style. 7.2.1 The Self Synchronizing Style A method using a locally clocked approach for hazard free synthesis of burst mode machines was developed in [49]. This approach and others <ref> [27, 68, 1, 13, 57] </ref> make use of a method called self-synchronization. This method use Huffman machines along with a locally generated aperiodic clock acting on internal latches.
Reference: [58] <author> Rosenberger F. U, Molnar C. E, Chaney T. J, Fang T. P. Q-Modules: </author> <title> Internally Clocked Delay-Insensitive Modules. </title> <journal> In IEEE Transactions on Computers, </journal> <volume> Vol. 37, No. 9, </volume> <year> 1988, </year> <pages> pp. 1005-1018. </pages>
Reference: [59] <author> Rudell R. </author> <title> Logic Synthesis for VLSI Design. </title> <type> Ph.D. dissertation, </type> <institution> Department of Electrical Eng. and Computer Sci., University of California, Berkeley, </institution> <year> 1989. </year>
Reference-contexts: Step 1. Generate DHF-Prime Implicants: The next step in the logic minimization then is to generate the set of dhf-prime implicants for the function f . This is done by first generating the prime implicants of f from the req-set and off-set using existing techniques presented in <ref> [59, 60] </ref>. From this set of prime implicants we want to form a set of dhf-prime implicants. Prime implicants that illegally intersects any privileged cubes must therefore first be 109 identified.
Reference: [60] <author> Rudell R, Sangiovanni-Vincentelli A. </author> <title> Multiple-valued Minimization for PLA Optimization. </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> Vol. 6, No. 5, </volume> <pages> pp. 727-750, </pages> <month> Sept. </month> <year> 1987. </year>
Reference-contexts: Step 1. Generate DHF-Prime Implicants: The next step in the logic minimization then is to generate the set of dhf-prime implicants for the function f . This is done by first generating the prime implicants of f from the req-set and off-set using existing techniques presented in <ref> [59, 60] </ref>. From this set of prime implicants we want to form a set of dhf-prime implicants. Prime implicants that illegally intersects any privileged cubes must therefore first be 109 identified.
Reference: [61] <author> Sasi S, Radhakrishnan D. </author> <title> Hazards in CMOS Circuits. </title> <journal> In International Journal on Electronics, </journal> <volume> Vol. 68, No. 6, </volume> <year> 1990, </year> <pages> pp. 976-990 </pages>
Reference-contexts: Results will be provided in section 8.5. 115 8.2 Terminology We will provide definitions relating to pass transistor and CMOS logic gates we will use. We will then briefly describe some terminology on hazards. 8.2.1 Pass Transistor Networks A model for pass transistor logic has been developed in <ref> [53, 56, 61, 63] </ref>. We will describe and extend the model presented in these works for single CMOS gates. Definition 1.
Reference: [62] <author> Sparst J, Staunstrup J. </author> <title> Delay-insensitive multi-ring structures. In INTEGRATION, </title> <journal> the VLSI journal, </journal> <volume> 15, </volume> <year> 1993, </year> <month> pp.313-340. </month>
Reference: [63] <author> Siegel P. S. </author> <title> Automatic Technology Mapping for Asynchronous Designs. </title> <type> Tech. Report, PhD Thesis, </type> <institution> Computer Systems Laboratory, Stanford University, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Many asynchronous design styles have targeted the problem of generating efficient control structures and dealt with the issues of design complexity and correctness. One class of such techniques target Huffman mode asynchronous finite state machines starting from burst mode specifications and use standard gates for implementation <ref> [14, 49, 63, 74] </ref>. We therefore target interacting burst mode controllers based on the previous control partioning and take advantage of the logic synthesis techniques available in burst mode controller synthesis to generate efficient controller circuits. <p> We therefore target interacting burst mode controllers based on the previous control partioning and take advantage of the logic synthesis techniques available in burst mode controller synthesis to generate efficient controller circuits. Although the interacting burst-mode controllers can be built efficiently using standard gate-level cell libraries <ref> [49, 63] </ref>, even better performance can be obtained by mapping the burst-mode controllers to custom CMOS complex-gate implementations. <p> Depending on the probability distribution a performance gain of between 10-20% can be achieved using this method. Apart from mapping to a two level sum of products implementation there are many other styles of implementation that can be targeted <ref> [33, 36, 63] </ref>. Some of these, and especially a method to target custom complex gates will be discussed in the next section. 7.8 Conclusions This section has presented the concept of asynchronous finite state machine synthesis. <p> A BDD-based method [36] which targets multilevel multiplexor-based networks has been developed. Technology-mapping techniques to perform hazard-non-increasing mapping of two level AND/OR networks into complex gate networks from a standard cell library have been given in <ref> [63] </ref>. Other technology mapping techniques have implemented Boolean functions as single gate hazard-free CMOS complex gate circuits [14, 65]. However, no systematic procedure to derive such CMOS gates has been outlined, which includes precise hazard-free requirements for these gates. <p> Results will be provided in section 8.5. 115 8.2 Terminology We will provide definitions relating to pass transistor and CMOS logic gates we will use. We will then briefly describe some terminology on hazards. 8.2.1 Pass Transistor Networks A model for pass transistor logic has been developed in <ref> [53, 56, 61, 63] </ref>. We will describe and extend the model presented in these works for single CMOS gates. Definition 1. <p> The multiplexers in this method are assumed to be hazard-free. A method to eliminate dynamic hazards from signal transition graph specifications by iterative factoring has been presented in [45]. Factoring does not eliminate static hazards. 121 Work in <ref> [63] </ref> targets multilevel hazard-free circuits, starting from a hazard-free two-level circuit. In this method a hazard-free two-level function is decomposed into base functions using De Morgan's theorem and associative laws and then partitioned into cones which are mapped to library elements based on associated hazards.
Reference: [64] <author> Sproull R. F, Sutherland I. E. </author> <title> Asynchronous Systems. Sutherland, </title> <publisher> Sproull and Associates, </publisher> <address> Palo Alto, </address> <year> 1986, </year> <title> Vol. I: Introduction, Vol. II: Logical Effort and Asynchronous Modules, Vol. III: Case Studies. </title>
Reference: [65] <author> Stevens K. </author> <type> Tech. Report, PhD Thesis, </type> <institution> Computer Systems Department, University of Calgary, </institution> <year> 1994. </year>
Reference-contexts: Customized CMOS gate implementations have been used successfully to design a large number of burst-mode Huffman style asynchronous controllers <ref> [14, 65] </ref>, however, a systematic analysis and synthesis methodology for deriving these has not been given. There are several reasons for considering custom CMOS complex-gate based circuits. <p> Analysis and efficient synthesis methods to generate such networks under a multiple-input change assumption (MIC) will be presented. Customized CMOS gate implementations have been successfully used to design a large number of burst-mode asynchronous controllers <ref> [14, 65] </ref>. However, previous methods do not present systematic models and synthesis algorithms to take advantage of the particular hazard properties of these circuits. There are several reasons for considering customized CMOS complex-gate based circuits. <p> Technology-mapping techniques to perform hazard-non-increasing mapping of two level AND/OR networks into complex gate networks from a standard cell library have been given in [63]. Other technology mapping techniques have implemented Boolean functions as single gate hazard-free CMOS complex gate circuits <ref> [14, 65] </ref>. However, no systematic procedure to derive such CMOS gates has been outlined, which includes precise hazard-free requirements for these gates. For the class of methods that use the excitation regions, single CMOS complex-gate circuits, called generalized C-elements [38], have been used as target implementations.
Reference: [66] <author> Sutherland, I. </author> <title> Micropipelines. </title> <journal> Communications of the ACM , Vol. </journal> <volume> 32, No. 6, </volume> <month> June </month> <year> 1989, </year> <note> The 1988 ACM Turing Award Lecture. </note>
Reference-contexts: Process decomposition does not involve signal sharing between incompletely specified machines. Signal sharing is addressed in macromodule based design systems [2, 7] by using additional macromodules such as Toggles <ref> [66] </ref> and Decision-waits [21] to steer the global input to the correct sub-controller. Since macromodule libraries contain only a limited number of macromodule types, distributed control realizations based on macromodules are often inefficient [26].
Reference: [67] <author> Sutherland I. E, Molnar C. E, Sproull R. F, Mudge J. C. </author> <booktitle> The Trimosbus. CalTech Conference on VLSI, </booktitle> <month> January, </month> <year> 1979. </year>
Reference-contexts: Signaling protocols defining how communication with the interface is to proceed is also a part of the environmental specification. Although other signaling schemes exist <ref> [6, 67] </ref>, these protocols are usually restricted to follow the two phase or four phase protocols for compatibility reasons.
Reference: [68] <author> Tapia M. A. </author> <title> Synthesis of Asynchronous Sequential Systems Using Boolean Caculus. </title> <booktitle> In 14th Asilomar Conference on Circuits, Systems and Computers, </booktitle> <month> November </month> <year> 1980, </year> <pages> pp. 205-209. </pages>
Reference-contexts: The self synchronized style will be discussed next followed by the Huffman only style. 7.2.1 The Self Synchronizing Style A method using a locally clocked approach for hazard free synthesis of burst mode machines was developed in [49]. This approach and others <ref> [27, 68, 1, 13, 57] </ref> make use of a method called self-synchronization. This method use Huffman machines along with a locally generated aperiodic clock acting on internal latches.
Reference: [69] <author> Theobald M, Nowick S. M, Wu T. Espresso-HF: </author> <title> A Heuristic Hazard-Free Minimizer for Two-Level Logic. </title> <booktitle> In Proceedings of the 33rd Design Automation Conference, </booktitle> <year> 1996, </year> <pages> pp. 71-76. </pages>
Reference-contexts: The methods presented here use exact algorithms that have exponential complexity. More time-efficient heuristic methods that generate near-optimal solutions <ref> [74, 69] </ref> exists but will not be presented here. <p> The conditions presented here have their origin in the definitions of function and logic hazards previously discussed in section 7.3 and are taken from <ref> [51, 69, 50] </ref>. The following are definitions of a transition cube and its subcubes. Definition 1. Let A and B be two minterms. <p> This method is explained in more detail in [50]. A heuristic near optimal method is presented in <ref> [69] </ref>. The Quine-McCluskey algorithm has three basic steps: 1. Generate the prime implicants of a function. 2. Construct a prime implicant table. 107 108 3. Generate a minimum cover of this table.
Reference: [70] <author> Tracey J. H. </author> <title> Internal State Assignment for Asynchronous Sequential Machines. </title> <journal> IEEE Transactions on Electronic Computers, </journal> <volume> EC-15(4), </volume> <month> August </month> <year> 1966. </year>
Reference-contexts: We will briefly present such a method that is based on a method for reduction of incompletely specified Boolean matrices <ref> [42, 54, 70] </ref>. This method gives an exact solution to the problem of finding the minimal number of symbolic states for an incompletely specified Boolean matrix and is exponential in algorithmic complexity. The method presented here is quite simple and straight forward. <p> There are several methods to ensure critical race free state encoding. Among them are the one-hot, one-shot, Liu or Tracey methods <ref> [70, 71] </ref>. <p> Our problem then becomes, given a minimized flow-table, generate a minimum transition time critical race free 103 state assignment with minimum number of state variables. In this section we will summarize such a method originally presented in <ref> [70] </ref>. Further details and proofs are presented in [70]. 7.5.1 Conditions for Critical Races A flow table, as specified earlier, that describes the behavior of a state machine is naturally divided into a set of columns representing all possible input states fI 1 ,: : :,I g g and a set <p> Our problem then becomes, given a minimized flow-table, generate a minimum transition time critical race free 103 state assignment with minimum number of state variables. In this section we will summarize such a method originally presented in <ref> [70] </ref>. Further details and proofs are presented in [70]. 7.5.1 Conditions for Critical Races A flow table, as specified earlier, that describes the behavior of a state machine is naturally divided into a set of columns representing all possible input states fI 1 ,: : :,I g g and a set of rows representing all possible internal states fS
Reference: [71] <author> Unger, S. H. </author> <title> Asynchronous Sequential Switching Circuits. </title> <publisher> Wiley-Interscience, </publisher> <year> 1969. </year> <note> ISBN 0 89874-565-9 </note>
Reference-contexts: These methods can be hierarchically categorized based on their constraints on input changes <ref> [71] </ref>. SIC single input change allows only one input to change at a time. After an input change has occurred a minimal time interval d must pass before any new input change is allowed. <p> The types of complications that can occur are function and logic hazards for input changes and critical races when several state variables change simultaneously. These hazards will be described in subsection 7.3. Solutions to solve these problems have been presented <ref> [71] </ref> but the method makes use of inertial delays which have questionable reliability and slow down circuit operation. The general solution has therefore been to adopt the SIC mode of operation. A special form of input change called data driven mode was first introduced by Davis et al. [14]. <p> Since its introduction this has been the most successfully used style of asynchronous state machine synthesis and has shown to generate efficient solutions to a large set of real designs. A method has also been presented to allow UIC mode operation <ref> [71] </ref>. However, as the MIC style, this method never saw wide use due to its use of inertial delays. <p> This method uses the Huffman only machine approach and also extends the burst mode style to include non-monotonic level input signals and directed don't care signals and is called extended burst mode. Methods for implementing Huffman only machines for SIC and MIC have been presented <ref> [71] </ref> using inertial delays and [24, 37] that make use of delays, large flow tables, careful timing requirements and specialized state codes. All these methods slow down circuit operation. <p> The hazard analysis done in this subsection requires that no product term contain both a signal and its complement, otherwise additional hazards are possible <ref> [71] </ref>. Definition. A static logic hazard is present in the network implementing a Boolean function f , free of function hazards, for the static transition A ! B if and only if during the input change from A to B a momentary pulse may be present on the output. <p> We will not consider static 0 ! 0 hazards here since it is trivially realized, and has been shown in <ref> [71] </ref>, that a SOP implementation covering the ON-set cannot have any such hazards. Definition. <p> Similarly no product term may intersect the transition cube T [A; B] for f (A) = 0 and f (B) = 1 without also containing the end state B. We will not consider dynamic hazards for SIC transitions here since it is trivially realized, and has been shown in <ref> [71] </ref>, that such cannot occur for a two level SOP implementation. 7.4 Hazard Free AFSM Synthesis to Two Level Logic Now that we have discussed all the hazards that can occur in a two level AND/OR circuit implementation we can present a general synthesis method following the steps outlined in section <p> This is done by merging compatible rows in the flow table. During merging, all outputs and symbolic next states are considered at the same time when deciding if two rows are compatible or not. Classic Compatibility Constraints for State Merger In classical state minimization <ref> [71] </ref> a compatibility relation defines when two states can be merged. The relation is defined in two steps as follows. Output compatibility is the initial compatibility relation. <p> There are several methods to ensure critical race free state encoding. Among them are the one-hot, one-shot, Liu or Tracey methods <ref> [70, 71] </ref>. <p> The targeting of a two level sum of products form together with the bounded delay model used gives us the possibility of decomposing such gates by means of algebraic transformations, something that is not possible for many unbounded delay models. It has been shown in <ref> [71] </ref> that many algebraic transformations including the associative, distributive and DeMorgans law do not introduce any new hazards in such circuits. An important part of the technology mapping process then is to find the combination of gate sizes that gives the best area/performance tradeoff from a given library of gates. <p> Various techniques for hazard-free logic minimization have been proposed for the function region approach. An exact hazard-free two-level logic minimization algorithm, based on a modified Quine-McCluskey method, is given in [50]. Hazard non-increasing transformations and algorithms for multilevel optimization of gate-level logic have been given in <ref> [35, 71] </ref>. A BDD-based method [36] which targets multilevel multiplexor-based networks has been developed. Technology-mapping techniques to perform hazard-non-increasing mapping of two level AND/OR networks into complex gate networks from a standard cell library have been given in [63]. <p> Consider F and F to be on-set and off-set covers respectively implemented as p and n transistor networks in a complex gate. It has been shown 118 in <ref> [71] </ref> that a sum-of-products implementation of the on-set F does not have any 0 ! 0 hazards. 1 Similarly, F does not have any 1 ! 1 hazards. <p> The output is therefore free of hazards for both of these transitions. Subsequently, there is no need to eliminate static hazards during synthesis of F and F when targeting SOP/SOP form of complex gates. Case 2: Dynamic Transitions. For the case of SIC transitions, it has been shown in <ref> [71] </ref> that a dynamic SIC hazard cannot occur (assuming no product contains both a variable and its complement). Since F and F are in two-level AND/OR form, no hazards will occur in the complex-gate output in this case. <p> For the case of MIC transitions, though, we will have to make the p and n pass networks hazard-free for dynamic transitions. Otherwise, even in the 1 Note that, throughout this section, we assume that no product contains both a variable and its complement, otherwise additional hazards are possible <ref> [71] </ref>. 119 SOP/SOP form, both the p network and the n network may have dynamic hazards, creating a hazard at the output of the complex gate. 8.3.3 Algorithm For SOP/SOP Realizations Our hazard-free algorithm for SOP/SOP complex-gate realizations is similar to an existing algorithm for hazard-free two-level simple-gate networks [50] presented <p> an algorithm targeted to find the minimal sum of products implementation, we also convert the problem of finding the product of sums for a function F to the problem of finding the sum of products for F and then using De Morgan's law (which has been shown to be hazard-preserving <ref> [71] </ref>) to obtain F .
Reference: [72] <author> VIS Group, </author> <title> the. VIS: A system for Verification and Synthesis. </title> <booktitle> In Proceedings of the Conference on Computer Aided Verification, </booktitle> <address> New Brunswick, NJ, </address> <month> July </month> <year> 1996. </year>
Reference: [73] <author> Williams T. E. </author> <title> Performance of Iterative Computation in Self-Timed Rings. </title> <journal> In Journal of VLSI Signal Processing, </journal> <volume> 7, </volume> <year> 1994, </year> <pages> pp. 17-31. </pages>
Reference: [74] <author> Yun, K. Y. </author> <title> Synthesis of asynchronous controllers for heterogeneous systems. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <month> Aug. </month> <year> 1994. </year> <month> 137 </month>
Reference-contexts: Many asynchronous design styles have targeted the problem of generating efficient control structures and dealt with the issues of design complexity and correctness. One class of such techniques target Huffman mode asynchronous finite state machines starting from burst mode specifications and use standard gates for implementation <ref> [14, 49, 63, 74] </ref>. We therefore target interacting burst mode controllers based on the previous control partioning and take advantage of the logic synthesis techniques available in burst mode controller synthesis to generate efficient controller circuits. <p> The Lager tool set is used for place and route of standard cells and LAS is used when targeting complex gates. Both commercial and public domain Verilog simulators have been used. The 3D <ref> [74] </ref> tool is used for synthesis of the burst mode controllers. <p> Details are given in section 5. After partitioning, the resulting Petri net controllers are converted into burst-mode state machine descriptions. These burst-mode descriptions are then synthesized using the 3D synthesis system <ref> [74] </ref>. Details of conversion of Petri net controllers to burst mode state machines is given in section 6. The synthesis of these controllers is then 40 considered in section 7. <p> Since the largest burst mode graph we so far have been able to synthesize all the way to a netlist of gates using the 3D synthesis method <ref> [74] </ref>, (without using partitioning) is the GCD circuit, the Petri net to burst mode conversion does not set the limit to what circuits can be generated by the ACK synthesis system. 76 Controller Number of I/O Conversion Number of Number of BM states size time (sec) PN places choice places Extended <p> From the burst mode graphs that have been created using the method presented in this section the next step is to generate Boolean functions for the controllers they describe. This is done using existing burst mode synthesis tools <ref> [74, 49] </ref> and will be discussed in the next section. 78 based Petri net, (c) burst mode graph, (d) reshu*ed burst mode graph 79 Chapter 7 Burst Mode State Machine Synthesis At this point we have generated a collection of asynchronous finite state machines in the form of burst mode controllers <p> This style uses specifications in the form of Mealy style finite state machines and imposes no timing restrictions on multiple input 82 changes. This style was later extended with non-monotonic level input signals and directed don't care signals in <ref> [74] </ref> called extended burst mode (XBM). A more thorough description of this type of state machine has been given in section 6. <p> This is also a one-sided constraint that can be met by inserting delays on the feedback wires. 86 7.2.2 The Huffman Machine Style A method called 3D for hazard free synthesis of burst mode machines was developed in <ref> [74] </ref>. This method uses the Huffman only machine approach and also extends the burst mode style to include non-monotonic level input signals and directed don't care signals and is called extended burst mode. <p> Also, for state changes it may require to go through two feedback loops to complete a state change and thereby increase the fundamental mode delay. The general structure of the Huffman only machine method used in <ref> [74] </ref> is illustrated in Figure 7.4. It consists of combinational logic for the output and state signal generation, a set of primary inputs and outputs, and delays on the feedback paths. <p> The concepts of three hazard considerations present in both the Huffman only and self synchronized implementation styles will be discussed. Extra hazard considerations necessary for implementing extended burst mode specifications will not be addressed here but can be found in <ref> [74] </ref>. Note that all definitions give here are based on a two level sum of products implementation. 89 7.3.1 Terminology and Definitions A logic function f is defined as a mapping from f0; 1g n 7! f0; 1; flg where "fl" represents a don't care value in the function. <p> The methods presented here use exact algorithms that have exponential complexity. More time-efficient heuristic methods that generate near-optimal solutions <ref> [74, 69] </ref> exists but will not be presented here. <p> OR gates. 7.7 AFSM Synthesis in ACK The burst mode controllers created by the method of burst mode generation presented in section 6 must now be synthesized to Boolean functions for subsequent implementation as a network of logic gates. 7.7.1 Hazard Free Synthesis ACK makes use of the 3D method <ref> [74] </ref> to synthesize hazard free Boolean functions from the burst mode specifications. There are several reasons for chosing this tool. First of all, since the output and state signals do not have to pass through any latches, this method offers a possible advantage in reduced propagation delay. <p> The contribution of this section is to address the problem of deriving hazard-free customized CMOS realizations for asynchronous controllers under multiple-input changes, using the function region approach. This problem is encountered during the synthesis of burst-mode circuits <ref> [49, 74] </ref> and is a general problem in asynchronous synthesis. In particular, we present a style of CMOS gate design, called SOP/SOP form, that reduces the constraints in hazard-free synthesis of single CMOS complex gates. Second, we present a generalization of this technique to multilevel networks. <p> Required cube A is covered only by itself (bc 0 ), which illegally intersects dynamic transition t2. Similarly, required cube B is covered only by itself (a 0 c), which illegally intersects dynamic transition t1. Therefore, no dhf-prime exists to cover A and B. Burst-mode sequential synthesis tools <ref> [49, 74] </ref> avoid this problem at an earlier point in synthesis: during state minimization. By using careful constraints on state merger, these methods produce Boolean functions for which a hazard-free solution exists. <p> For these examples, our method obtained a hazard-free combinational logic solution whereas the 3D tool <ref> [74] </ref> which uses hfmin [50] often had to add one or more state variables just in order to prevent logic hazards. For the comparison the Cadence schematic entry system and the LAS [10] layout syntheziser was used to generate layouts.
References-found: 74

