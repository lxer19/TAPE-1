URL: http://www-icparc.doc.ic.ac.uk/papers/practical_applications_of_constraint_pro.ps
Refering-URL: http://www-icparc.doc.ic.ac.uk/papers.html
Root-URL: 
Email: email: mgw@doc.ic.ac.uk  
Title: Survey: Practical Applications of Constraint Programming  
Author: Mark Wallace 
Date: September 1995  
Address: College, LONDON SW7 2AZ.  
Affiliation: IC-Parc, William Penney Laboratory, Imperial  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Abderrahmane Aggoun and Nicolas Beldiceanu. </author> <title> Extending CHIP in order to solve complex scheduling and placement problems. </title> <journal> Journal of Mathematical and Computer Modelling, </journal> <volume> 17(7) </volume> <pages> 57-73, </pages> <year> 1993. </year> <month> 23 </month>
Reference-contexts: This constraint is a "global" constraint in that it applies to an arbitrary number of tasks and resources which could include all the tasks and resources in the whole problem. Such a specialised constraint is available in CHIP called the cumulative constraint <ref> [1] </ref>. It has been used in timetabling [7], in scheduling network repair 18 operations [29], and in a variety of commercial CHIP applications [109]. A sim-ilar generic constraint is the ILOG SCHEDULE library [81], which has been applied on a range of scheduling applications [98, 42].
Reference: [2] <author> P. Baptiste and C. Le Pape. </author> <title> A theoretical and experimental compari-son of constraint propagation techniques for disjunctive scheduling. </title> <editor> In C. Mellish, editor, </editor> <booktitle> Proc. IJCAI, </booktitle> <volume> volume 1, </volume> <pages> pages 600-606, </pages> <year> 1995. </year>
Reference-contexts: A sim-ilar generic constraint is the ILOG SCHEDULE library [81], which has been applied on a range of scheduling applications [98, 42]. The algorithms underlying these constraints are based on ones developed in the Operations Research community. A comparative study of some of these algorithms is in <ref> [2] </ref>. Such constraints have made constraint programming competitive with the best specialised algorithms available on these applications, with the added advantage that the constraint programming can easily be extended to handle side-constraints equally efficiently [16, 126].
Reference: [3] <author> J. Bellone, A. Chamard, and A. Fischler. </author> <title> Constraint logic programming decision support systems for planning and scheduling aircraft manufacturing at dassault aviation. </title> <note> In Roth [100]. </note>
Reference-contexts: In OPIS [115], the whole focus of scheduling is on repair, and the repair is driven by constraint violations. Currently the way overconstrained problems are handled in most other applications is problem specific. Typical descriptions of applications report that "simple constraint relaxations are proposed to the user" <ref> [3] </ref> or that "There are many forms of interactions between constraints and con flicts between constraint types that cannot be resolved automatically.
Reference: [4] <author> Frederic Benhamou, David McAllester, and Pascal Van Hentenryck. </author> <title> Clp(intervals) revisited. </title> <booktitle> In Proc. ILPS-94, </booktitle> <pages> pages 124-138, </pages> <address> Ithaca, </address> <month> Novem-ber </month> <year> 1994. </year>
Reference-contexts: Three of the most influential constraint programming languages were embedded in Prolog (Prolog III [23], CLP (R) [70] and CHIP [32]). Whilst all three system are still developing further ([119, 73, 111]), there are many new constraint programming systems emerging (eg <ref> [22, 38, 63, 124, 4] </ref>). From a theoretical point of view the extension of logic programming to Constraint Logic Programming (CLP) has been very fruitful: for example ALPS [85] a form of logic programming with guards was an extremely influential language, becoming the forerunner of the Concurrent Constraints paradigm [107].
Reference: [5] <author> R. Berger. </author> <title> Constraint-based gate allocation for airports. In ILOG [69]. ILOG SA, </title> <type> 12, </type> <address> Avenue Raspail, BP 7, 94251 Gentilly Cedex, France. </address>
Reference-contexts: The application of constraint programming to gate allocation at Changi airport supports several different Gantt chart displays (as well as over one hundred other interface screens!). Its interactive requirements are summed up in the following terms <ref> [5] </ref>: "The resource assignments can be manipulated graphically on the Gantt chart... The actions allow users to provide additional information to the system and to override the systems allocations...The system can be used in automatic, advisory or manual mode.
Reference: [6] <author> R. Bisdorff and S. Laurent. </author> <title> Industrial disposing problem solved in CHIP. </title> <booktitle> In ICLP'93: Proceedings 10th International Conference on Logic Programming, </booktitle> <pages> pages 830-831, </pages> <address> Budapest, </address> <year> 1993. </year> <note> (Abstract; not presented). </note>
Reference-contexts: Nevertheless arc-consistency techniques and backtrack search have sufficed for a number of practical appliactions of constraint programming. Three examples are a university timetabling application [47], an industrial disposing problem <ref> [6] </ref>, and a vehicle scheduling system [80]. 4.3 Specialised Constraint Behaviours For different applications different constraint behaviours are appropriate.
Reference: [7] <author> P. Boizumault, Y. Delon, and L. Peridy. </author> <title> Planning exams using constraint logic programming. </title> <editor> In Leon Stirling, editor, </editor> <booktitle> Proc. 2nd International Conference on the Practical Applications of Prolog, </booktitle> <month> April </month> <year> 1994. </year>
Reference-contexts: This constraint is a "global" constraint in that it applies to an arbitrary number of tasks and resources which could include all the tasks and resources in the whole problem. Such a specialised constraint is available in CHIP called the cumulative constraint [1]. It has been used in timetabling <ref> [7] </ref>, in scheduling network repair 18 operations [29], and in a variety of commercial CHIP applications [109]. A sim-ilar generic constraint is the ILOG SCHEDULE library [81], which has been applied on a range of scheduling applications [98, 42]. <p> This claim is born out by studying reported practical applications of constraints. A set of tests which happen to illustrate this phenomenon is described in <ref> [7] </ref>. The application is to build a timetables for a set of around 300 examinations, taking place over a limited time period in a limited set of examination rooms.
Reference: [8] <author> J. Bormann, J. Lohse, M. Payer, and R. Scmid. </author> <title> Circuit verification environment cve2. </title> <type> Technical Report Version 1.72, </type> <institution> ZFE BT SE 12 Siemens AG, </institution> <year> 1995. </year> <title> (User Manual and System Description). </title>
Reference-contexts: The application of CLP to circuit verification has been commercialised by Siemens. The Siemens product is used internally at Siemens and sold externally as their "Circuit Verification Environment" CVE2 <ref> [8] </ref>. The constraints reflecting the behaviour of a range of standard cells are offered as libraries. New cell constraints can be added using logic programming. The structural specification of circuits how they are built out of cells is expressed in an industry-standard language called EDIF [39].
Reference: [9] <author> A. Borning and B.N. Freeman-Benson. </author> <title> The OTI constraint solver: A constraint library for constructing graphical user interfaces. </title> <booktitle> In Proc Principles and Practice of Constraint programming CP'95. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Constraints also provide a way of stating many user interface requirements, such as maintaining consistency between the underlying data and a graphical depiction of that data, maintaining consistency among multiple views, and specifying formatting requirements. A commercial constraint library for constructing interactive graphical user interfaces is presented in <ref> [9] </ref>. Object Technology International has used the library to build a graphical editor for a large database. technology for graphical editors. Most modern tools, be they database browsers, calendar managers or systems for producing overhead projector presentations, have some sort of graphical editor.
Reference: [10] <author> Alan Borning. </author> <title> The programming language aspects of ThingLab, a constraint-oriented simulation laboratory. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 353-387, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: In 1963 Sutherland introduced the Sketchpad system [118], a constraint language for graphical interaction. Other early constraint programming languages were Fikes' Ref-Arf [44], Lauriere's Alice [78], Sussmann's CONSTRAINTS [116] and Borning's ThingLab <ref> [10] </ref>. These languages already offered the most important features of constraint programming: * declarative problem modelling * propagation of the effects of decisions * efficient search for feasible solutions Each of these three features has been the study of extensive research over a long period.
Reference: [11] <author> Alan Borning, Bjorn Freeman-Benson, and Molly Wilson. </author> <title> Constraint hierarchies. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 5 </volume> <pages> 223-270, </pages> <year> 1992. </year>
Reference-contexts: hierarchy. (Nevertheless there remains the decision whether to relax one more constraint in order to get an improved optimum solution.) Hierarchical constraints can be solved optimistically, by first searching for a solution satisfying all the constraints and then relaxing more and more constraints theweakest first until a solution is found <ref> [11] </ref>. The optimistic approach has been applied in some timetabling applications [89, 41]. As yet this approach does not appear to have scaled up enough to be viable for real applications.
Reference: [12] <author> A. Brodsky and Y. Kornatsky. </author> <title> The LyriC language: Querying constraint objects. </title> <booktitle> In Proc. SIGMOD, </booktitle> <pages> pages 35-46, </pages> <address> San Jose, </address> <year> 1995. </year>
Reference-contexts: Such a constraint may be defined on a particular object, or on a whole class all parking bays of a certain class for example [68]. A first proposal for integrating constraint and object models is in <ref> [12] </ref>, and an application of constraints in a visual interface to object-oriented databases is [30].
Reference: [13] <author> R.E. Bryant. </author> <title> Graph based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 35(8) </volume> <pages> 677-691, </pages> <year> 1986. </year>
Reference-contexts: It handles any number of such constraints, extracting the global consequences of the complete conjunction of constraints. The algorithm is based on a special data structure Binary Decision Diagrams (BDD's) to represent the constraints <ref> [13] </ref> and employs a decision procedure Boolean Unification to extract the "most general solution" to any set of constraints defined in terms of booleans functions and relations. [15, 99]. The first specific application which directly uses constraints as a modelling tool is VLSI circuit verification.
Reference: [14] <author> J.R. Burch, E.M. Clarke, K.L. McMillan, D.L. Dill, and L.J. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <journal> Information and Computation, </journal> <volume> 98 </volume> <pages> 142-170, </pages> <month> June </month> <year> 1992. </year> <month> 24 </month>
Reference-contexts: The number of pins is finite and so such a circuit can be modelled as a finite state automaton. The number of internal pins may be in the hundreds, and the number of possible states can reach 10 20 and beyond <ref> [14] </ref>. The method of verifying sequential circuits is essentially the same as for combinatorial circuits, except that now it is necessary to establish that the same sequence of inputs produces the same sequence of outputs.
Reference: [15] <author> W. Buttner and H. Simonis. </author> <title> Embedding Boolean expressions into logic programming. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 4 </volume> <pages> 191-205, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: The algorithm is based on a special data structure Binary Decision Diagrams (BDD's) to represent the constraints [13] and employs a decision procedure Boolean Unification to extract the "most general solution" to any set of constraints defined in terms of booleans functions and relations. <ref> [15, 99] </ref>. The first specific application which directly uses constraints as a modelling tool is VLSI circuit verification.
Reference: [16] <author> Y. Caseau. </author> <title> Constraint programming and operations research: Mixed solutions for mixed problems. </title> <booktitle> In Proc. Principles and Practice of Constraint Programming, </booktitle> <year> 1993. </year>
Reference-contexts: A comparative study of some of these algorithms is in [2]. Such constraints have made constraint programming competitive with the best specialised algorithms available on these applications, with the added advantage that the constraint programming can easily be extended to handle side-constraints equally efficiently <ref> [16, 126] </ref>. To support the implementation of such specialised constraint behaviours some generic techniques have been developed. Such a language Constraint Handling Rules has been used for supporting terminological reasoning [52].
Reference: [17] <author> Yves Caseau and Francois Laburthe. </author> <title> Improved clp scheduling with task intervals. </title> <editor> In P. Van Hentenryck, editor, </editor> <booktitle> Proceedings of the 11th International Conference on Logic Programming, </booktitle> <address> Santa Margherita, 1994. </address> <publisher> MIT Press. </publisher>
Reference-contexts: The first consequence of this combination is that constraint programming can be used to explore different ways of solving a problem very quickly. This is reflected in the speed with which constraint programming approaches have caught up with, and overtaken, special purpose codes for job-shop scheduling 16 <ref> [17] </ref>. The second consequence is that programs can be quickly modified when the application changes. Constraint programming code is genuinely reuseable [72]. 4.2 Backtrack Search under Constraints Backtrack search augmented by constraint propagation is a basic technique for tackling combinatorial problems [96, 125]. <p> For resource constraints, in which several tasks share a resource, it is very powerful to add redundant constraints on the sum of the durations of the tasks <ref> [127, 17] </ref>. The specialised constraints cumulative and SCHEDULE introduced above are low-level implementations of consistency constraints on sets of tasks and resources. It has been pointed out in [17] and [122] that such redundant constraints can be used to achieve the same effect as facet-inducing cuts in mixed integer programming. <p> The specialised constraints cumulative and SCHEDULE introduced above are low-level implementations of consistency constraints on sets of tasks and resources. It has been pointed out in <ref> [17] </ref> and [122] that such redundant constraints can be used to achieve the same effect as facet-inducing cuts in mixed integer programming. On the other hand there are simple applications where local propagation has a behaviour which is extremely hard to achieve in the mixed integer programming framework [114, 82].
Reference: [18] <author> A. Chamard and C. Pradelles. </author> <title> CHIP applications at dassault aviation. </title> <institution> COSYTEC SA, Parc Club Orsay Universite, </institution> <address> 4, rue Jean Rostand, 91893 Orsay Cedex, France, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: In advisory mode, the system prompts the operator on the responses required. In manual mode, the operator is completely free to modify the assignments as (s)he wishes." In the application of constraints to aircraft production scheduling interac-tivity is a basic requirement <ref> [18] </ref>. The SAVEPLAN production management 13 software package uses constraint programming for its scheduling component be-cause it supports an interactive user interface [55].
Reference: [19] <author> P. Cheeseman, R. Kanefsky, and W.M. Taylor. </author> <title> Where the really hard problems are. </title> <editor> In J. Mylopoulos and R. Reiter, editors, </editor> <booktitle> Proc. IJCAI, </booktitle> <pages> pages 331-337. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: The many studies on the phase transition in NP-complete problems <ref> [19] </ref>, have strongly suggested that each problem has a "really hard" area, where most (or all) algorithms will have difficulty proving success or failure. In fact all the reported applications of constraint programming, except circuit verification, have an optimisation component.
Reference: [20] <author> T. Chew and David J.-M. </author> <title> A constraint-based spreadsheet for cooperative production planning. </title> <booktitle> In AAAI Sigman Workshop in Knowledge-Based Production Planning, Scheduling and Control, </booktitle> <year> 1992. </year>
Reference-contexts: The commercial spreadsheet market is not yet dominated by constraint-based spreadsheets, but there are a number of practical applications based on this very idea. The Short Term Planning (STP) application at Renault is an excellent example of constraint-based spreadsheets in action <ref> [20] </ref>. The problem is to assign product orders to factories so as to minimise transportation costs for delivering the finished products (cars!) to the customer. <p> It requires compromises based on some kind of negotiation: consequently it is up to the end user to take such a decision. A constraint-based spreadsheet was developed to help the user in this task <ref> [20] </ref>. The spreadsheet presents to the end user the production figures at each factory. For each combination of car model, version, country and transmission, it shows the number of vehicles allocated to each factory.
Reference: [21] <author> T.L. Chew, J.-M. David, A. Nguyen, and Y. Tourbier. </author> <title> Solving constraint satisfaction problems with simulated annealing; the car sequencing problem revisited. </title> <booktitle> In Proc. 12th International Conference on AI, Expert Systems and Natural Language, </booktitle> <year> 1992. </year>
Reference-contexts: A typical example is the 2-swap, a move which maps one tour to another for solving the travelling salesman problem. Repair based on move operators is used in scheduling systems [115], and in applications that use simulated annealing <ref> [28, 21, 26] </ref>. Integrating constraint propagation with repair-based search using move operations is an ongoing research theme, but there are applications where they are loosely connected.
Reference: [22] <author> P. Codognet, F. Fages, and T. Sola. </author> <title> A metalevel compiler of clp(fd) and its combination with intelligent backtracking. </title> <type> Technical Report LACS-93, </type> <institution> Thompson-CSF, </institution> <year> 1993. </year>
Reference-contexts: Three of the most influential constraint programming languages were embedded in Prolog (Prolog III [23], CLP (R) [70] and CHIP [32]). Whilst all three system are still developing further ([119, 73, 111]), there are many new constraint programming systems emerging (eg <ref> [22, 38, 63, 124, 4] </ref>). From a theoretical point of view the extension of logic programming to Constraint Logic Programming (CLP) has been very fruitful: for example ALPS [85] a form of logic programming with guards was an extremely influential language, becoming the forerunner of the Concurrent Constraints paradigm [107].
Reference: [23] <author> Alain Colmerauer. </author> <title> An introduction to Prolog III. </title> <journal> Communications of the ACM, </journal> <volume> 33(7) </volume> <pages> 69-90, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: More generally there are commercially available libraries supporting constraint handling [68, 24]. On the other hand constraints fit hand in glove with declarative host programming languages. Three of the most influential constraint programming languages were embedded in Prolog (Prolog III <ref> [23] </ref>, CLP (R) [70] and CHIP [32]). Whilst all three system are still developing further ([119, 73, 111]), there are many new constraint programming systems emerging (eg [22, 38, 63, 124, 4]).
Reference: [24] <author> COSYTEC. </author> <title> CHIP C library. </title> <institution> COSYTEC SA, Parc Club Orsay Universite, </institution> <address> 4, rue Jean Rostand, 91893 Orsay Cedex, France. </address>
Reference-contexts: For example isolating constraints as libraries has made possible the development of sophisticated constraint-based scheduling systems, see [134]. More generally there are commercially available libraries supporting constraint handling <ref> [68, 24] </ref>. On the other hand constraints fit hand in glove with declarative host programming languages. Three of the most influential constraint programming languages were embedded in Prolog (Prolog III [23], CLP (R) [70] and CHIP [32]).
Reference: [25] <author> COSYTEC. </author> <title> Proceedings of the CHIP users club. </title> <institution> COSYTEC SA, Parc Club Orsay Universite, </institution> <address> 4, rue Jean Rostand, 91893 Orsay Cedex, France, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: and an easy modifica tion of the data structures * hooks in the resolution engine enabling the user to pause during search, modify the configuration and continue the search." The importance of mixed initiative programming in practical applications is confirmed in the proceedings of two industrial CLP user group meetings <ref> [25, 69] </ref>. For example the assignment of cashiers for El Corte Ingles in Spain includes both assignment by a constraint program and consolidation by the end user. This consolidation is then fed back to the constraint program and used to constrain further assignments [43].
Reference: [26] <author> B Crabtree. </author> <title> Resource scheduling comparing simulated annealing with constraint programming. </title> <journal> BT Technology Journal, </journal> <volume> 13(1), </volume> <year> 1995. </year> <month> 25 </month>
Reference-contexts: A typical example is the 2-swap, a move which maps one tour to another for solving the travelling salesman problem. Repair based on move operators is used in scheduling systems [115], and in applications that use simulated annealing <ref> [28, 21, 26] </ref>. Integrating constraint propagation with repair-based search using move operations is an ongoing research theme, but there are applications where they are loosely connected.
Reference: [27] <author> J.-Y. Cras. </author> <title> Using constraints in servicing: A few short tales. </title> <booktitle> Presented at the 2nd CHIC-PRINCE Workshop, </booktitle> <address> ECRC, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: The problem is, given a site (with typically 1000-10000 keys), how to design the different keys and locks so each key opens a required set of locks. For this application it was possible to "compile" the 17 constraints yielding an eager algorithm producing solutions guaranteed to satisfy the constraints <ref> [27] </ref>. Another application, developed by the same author, is an aid for cartographers [28]. The cartographer must place names of cities and rivers on a map so that they don't overlap. <p> These cities could then be handled by a specialised program or the end-user. In this case the constraint propagation was specifically designed to detect the inconsistency: including "an edge-consistency algorithm that would propagate all information relevant to incompatibilities" <ref> [27] </ref>. A feature that comes for free with CLP is the facility to handle dynamic Constraint Satisfaction Problems (dynamic CSP's), were the set of problem variables may grow as search progresses. A typical application of dynamic CSP's is configuration [92].
Reference: [28] <author> J.-Y. Cras. </author> <title> Using constraint logic programming: A few short tales. </title> <editor> In M. Bruynooghe, editor, </editor> <booktitle> Proc. International Symposium on Logic Programming, </booktitle> <year> 1994. </year>
Reference-contexts: Whilst these applications were excellent demonstrations of the potential of constraint programming, it soon became apparent that these demonstration programs would not scale up to large applications <ref> [28] </ref>. The built-in propagation reduced the depth in the search tree that the backtrack search algorithm reached before detecting failed branches, but even the reduced search tree could grow too large to be completely explored in any realistic timescales. <p> For this application it was possible to "compile" the 17 constraints yielding an eager algorithm producing solutions guaranteed to satisfy the constraints [27]. Another application, developed by the same author, is an aid for cartographers <ref> [28] </ref>. The cartographer must place names of cities and rivers on a map so that they don't overlap. The names should also not cover other features of the map, and it should be clear to which town, or river, each name applies. <p> A typical example is the 2-swap, a move which maps one tour to another for solving the travelling salesman problem. Repair based on move operators is used in scheduling systems [115], and in applications that use simulated annealing <ref> [28, 21, 26] </ref>. Integrating constraint propagation with repair-based search using move operations is an ongoing research theme, but there are applications where they are loosely connected. <p> In OPIS [115] the problem constraints are crucial for determining the scope of the conflict which has to be repaired and the most appropriate repair operator for the job. In the map-labelling application <ref> [28] </ref> constraint propagation is used as a preprocessing step, to detect which parts of the problem cannot be solved by the annealer. Repair based on labelling is closely related to constructive labelling.
Reference: [29] <author> T. Creemers, L.R. Giralt, J. Riera, C. Ferrarons, J. Roca, and X. Corbella. </author> <title> Constraint-based maintenance scheduling on an electric power distribution network. </title> <booktitle> In Roth [100], </booktitle> <pages> pages 135-144. </pages>
Reference-contexts: Such a specialised constraint is available in CHIP called the cumulative constraint [1]. It has been used in timetabling [7], in scheduling network repair 18 operations <ref> [29] </ref>, and in a variety of commercial CHIP applications [109]. A sim-ilar generic constraint is the ILOG SCHEDULE library [81], which has been applied on a range of scheduling applications [98, 42]. The algorithms underlying these constraints are based on ones developed in the Operations Research community.
Reference: [30] <author> I. Cruz. </author> <title> Expressing Constraints for Data Display Specification: A Visual Approach. </title> <editor> In Saraswat and Van Hentenryck [105], </editor> <year> 1994. </year>
Reference-contexts: A first proposal for integrating constraint and object models is in [12], and an application of constraints in a visual interface to object-oriented databases is <ref> [30] </ref>. Indeed object-oriented constraint programming has been applied to graphical interfaces, and editors, for many years as we shall see in section 3.3 below. 3 Applications using Constraints for Producing Consequences Constraint stores are sets of constraints whose global consistency is checked by a constraint solver.
Reference: [31] <author> E. Davis. </author> <title> Constraint propagation with interval labels. </title> <journal> Artificial Intelligence, </journal> <volume> 32 </volume> <pages> 281-331, </pages> <year> 1987. </year>
Reference-contexts: Constraint propagation was used in 1972 for scene labelling applications [130], and has produced a long line of local consistency algorithms <ref> [94, 84, 49, 60, 93, 31] </ref>. The topic of search has been at the heart of AI since GPS [97].
Reference: [32] <author> Dincbas, M., P. Van Hentenryck, H. Simonis, A. Aggoun, T. Graf, and F. Berthier. </author> <title> The constraint logic programming language chip. </title> <booktitle> In Proceedings of the International Conference on Fifth Generation Computer Systems (FGCS'88), </booktitle> <pages> pages 693-702, </pages> <address> Tokyo, Japan, </address> <month> December </month> <year> 1988. </year>
Reference-contexts: More generally there are commercially available libraries supporting constraint handling [68, 24]. On the other hand constraints fit hand in glove with declarative host programming languages. Three of the most influential constraint programming languages were embedded in Prolog (Prolog III [23], CLP (R) [70] and CHIP <ref> [32] </ref>). Whilst all three system are still developing further ([119, 73, 111]), there are many new constraint programming systems emerging (eg [22, 38, 63, 124, 4]). <p> An excellent tutorial by Pascal Van Hentenryck describing how to augment the search with different kinds of constraint propagation is [122]. Early practical applications of constraint programming used built-in constraint propagation algorithms which approximated arc-consistency. Examples, implemented in CHIP <ref> [32] </ref>, included scheduling tasks on a construction project [34], sequencing of cars on an assembly line [35] and optimal cutting of raw materials to satisfy customer orders [33].
Reference: [33] <author> M. Dincbas, H. Simonis, and P. Van Hentenryck. </author> <title> Solving a cutting-stock problem in constraint logic programming. </title> <booktitle> In Fifth International Conference on Logic Programming (ICLP'88), </booktitle> <address> Seattle, USA, August 1988. </address> <publisher> M.I.T Press. </publisher>
Reference-contexts: Early practical applications of constraint programming used built-in constraint propagation algorithms which approximated arc-consistency. Examples, implemented in CHIP [32], included scheduling tasks on a construction project [34], sequencing of cars on an assembly line [35] and optimal cutting of raw materials to satisfy customer orders <ref> [33] </ref>. Whilst these applications were excellent demonstrations of the potential of constraint programming, it soon became apparent that these demonstration programs would not scale up to large applications [28].
Reference: [34] <author> M. Dincbas, H. Simonis, and P. Van Hentenryck. </author> <title> Solving large scheduling problems in logic programming. </title> <booktitle> In EURO-TIMS Joint International Conference on Operations Research and Management Science, </booktitle> <address> Paris, France, </address> <month> July </month> <year> 1988. </year>
Reference-contexts: An excellent tutorial by Pascal Van Hentenryck describing how to augment the search with different kinds of constraint propagation is [122]. Early practical applications of constraint programming used built-in constraint propagation algorithms which approximated arc-consistency. Examples, implemented in CHIP [32], included scheduling tasks on a construction project <ref> [34] </ref>, sequencing of cars on an assembly line [35] and optimal cutting of raw materials to satisfy customer orders [33]. Whilst these applications were excellent demonstrations of the potential of constraint programming, it soon became apparent that these demonstration programs would not scale up to large applications [28].
Reference: [35] <author> M. Dincbas, H. Simonis, and P. Van Hentenryck. </author> <title> Solving the car sequencing problem in constraint logic programming. </title> <booktitle> In European Conference on Artificial Intelligence (ECAI-88), </booktitle> <address> Munich, W.Germany, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: Early practical applications of constraint programming used built-in constraint propagation algorithms which approximated arc-consistency. Examples, implemented in CHIP [32], included scheduling tasks on a construction project [34], sequencing of cars on an assembly line <ref> [35] </ref> and optimal cutting of raw materials to satisfy customer orders [33]. Whilst these applications were excellent demonstrations of the potential of constraint programming, it soon became apparent that these demonstration programs would not scale up to large applications [28].
Reference: [36] <author> S. Donikian and G. Hegron. </author> <title> Constraint Management in a Declarative Design Method for 3D Scene Sketch Modelling. </title> <editor> In Saraswat and Van Hentenryck [105], </editor> <year> 1994. </year>
Reference-contexts: As yet the technology has not scaled up sufficiently to allow such general constraints to be tackled in large graphical applications such as commercial CAD systems (but see [90] for a specialised application, and <ref> [54, 36] </ref> for ongoing developments). 4 Applications using Constraints for Solving Com binatorial Problems The success of constraint programming on combinatorial problems is due to its combination of high level modelling, constraint propagation and facilities for controlling search behaviour.
Reference: [37] <author> A. Dresse. </author> <title> A constraint programming library dedicated to timetabling. In ILOG [69]. ILOG SA, </title> <type> 12, </type> <address> Avenue Raspail, BP 7, 94251 Gentilly Cedex, France. </address>
Reference-contexts: For example constraint programming was used to address the timetabling problems of Banque Bruxelles Lambert <ref> [129, 37] </ref>.
Reference: [38] <institution> ECRC. ECLiPSe 3.5. </institution> <type> Technical report, </type> <institution> ECRC, </institution> <year> 1995. </year> <note> http://www.ecrc.de/eclipse/eclipse.html. 26 </note>
Reference-contexts: Three of the most influential constraint programming languages were embedded in Prolog (Prolog III [23], CLP (R) [70] and CHIP [32]). Whilst all three system are still developing further ([119, 73, 111]), there are many new constraint programming systems emerging (eg <ref> [22, 38, 63, 124, 4] </ref>). From a theoretical point of view the extension of logic programming to Constraint Logic Programming (CLP) has been very fruitful: for example ALPS [85] a form of logic programming with guards was an extremely influential language, becoming the forerunner of the Concurrent Constraints paradigm [107].
Reference: [39] <author> EDIF. </author> <title> EDIF electronic design interchange format. </title> <type> Technical Report Ver--sion 2, </type> <institution> Electronic Industries Association, </institution> <year> 1989. </year> <note> Reference Manual. </note>
Reference-contexts: The constraints reflecting the behaviour of a range of standard cells are offered as libraries. New cell constraints can be added using logic programming. The structural specification of circuits how they are built out of cells is expressed in an industry-standard language called EDIF <ref> [39] </ref>. CVE2 automatically generates the circuit constraint from the EDIF specification and the cell constraints. 2.3 Real Time Control Systems Constraint programming is now being exploited for building control software for electro-mechanical systems with a finite number of inputs, outputs and internal states.
Reference: [40] <author> O. Evans. </author> <title> How to use the spreadsheet manager. </title> <type> Technical report, </type> <institution> ICL, </institution> <address> Lovelace Road, Bracknell, England, </address> <year> 1993. </year> <title> CHIC, Esprit project 5291, </title> <type> Report T3.5/W2.2. </type>
Reference-contexts: The idea of applying constraint technology to overcome these limitations of spreadsheets has been taken up in several systems, for example in the Visilog European collaborative project. Indeed the spreadsheet metaphor has been built into some constraint programming systems as a generic interface <ref> [40] </ref>. The commercial spreadsheet market is not yet dominated by constraint-based spreadsheets, but there are a number of practical applications based on this very idea. The Short Term Planning (STP) application at Renault is an excellent example of constraint-based spreadsheets in action [20].
Reference: [41] <author> F. Fages, J. Fowler, and T. Sola. </author> <title> Handling preferences in constraint logic programming with relational optimisation. </title> <editor> In M. Hermenegildo and J. Penjaam, editors, </editor> <booktitle> Proc. 6th International Symposium on Programming Language Implementation and Logic Programming, </booktitle> <pages> pages 261-276, </pages> <address> Madrid, </address> <year> 1994. </year>
Reference-contexts: The optimistic approach has been applied in some timetabling applications <ref> [89, 41] </ref>. As yet this approach does not appear to have scaled up enough to be viable for real applications. Alternatively they can be solved pessimistically be first searching for a solution satisfying the strongest constraints and then seeking to satisfy more and more constraints, strongest first [51].
Reference: [42] <author> J. Feldman, A. Hoyos, N. Sekas, and D. Vergamini. </author> <title> Scheduling engine for the long island lighting company. In ILOG [69]. ILOG SA, </title> <type> 12, </type> <address> Avenue Raspail, BP 7, 94251 Gentilly Cedex, France. </address>
Reference-contexts: It has been used in timetabling [7], in scheduling network repair 18 operations [29], and in a variety of commercial CHIP applications [109]. A sim-ilar generic constraint is the ILOG SCHEDULE library [81], which has been applied on a range of scheduling applications <ref> [98, 42] </ref>. The algorithms underlying these constraints are based on ones developed in the Operations Research community. A comparative study of some of these algorithms is in [2].
Reference: [43] <author> J. Fernandez and E. Sanchez. </author> <title> A cashier assignment system. In ILOG [69]. ILOG SA, </title> <type> 12, </type> <address> Avenue Raspail, BP 7, 94251 Gentilly Cedex, France. </address>
Reference-contexts: For example the assignment of cashiers for El Corte Ingles in Spain includes both assignment by a constraint program and consolidation by the end user. This consolidation is then fed back to the constraint program and used to constrain further assignments <ref> [43] </ref>. The application of constraint programming to gate allocation at Changi airport supports several different Gantt chart displays (as well as over one hundred other interface screens!). Its interactive requirements are summed up in the following terms [5]: "The resource assignments can be manipulated graphically on the Gantt chart...
Reference: [44] <author> R. E. Fikes. REF-ARF: </author> <title> A system for solving problems stated as procedures. </title> <journal> Artificial Intelligence, </journal> <volume> 1 </volume> <pages> 27-120, </pages> <year> 1970. </year>
Reference-contexts: This survey will seek, by examples, to explain the current success of constraint technology, and, by showing its benefits, to add to that success. In 1963 Sutherland introduced the Sketchpad system [118], a constraint language for graphical interaction. Other early constraint programming languages were Fikes' Ref-Arf <ref> [44] </ref>, Lauriere's Alice [78], Sussmann's CONSTRAINTS [116] and Borning's ThingLab [10].
Reference: [45] <author> T. Filkhorn, H.-A. Schneider, A. Scholz, A. Strasser, and P. Warkentin. </author> <title> SVE system verification environment. </title> <type> Technical Report SVE, </type> <institution> ZFE BT SE Siemens AG, </institution> <year> 1995. </year>
Reference-contexts: Even on a toy production cell example, current systems require up to 5 minutes to prove liveness properties involving just one or two such assumptions. One such commercial system is the system verification environment SVE <ref> [45] </ref>. There is another role for constraint programming in control systems, and that is as a language Timed Concurrent Constraint Programming (TCC) for defining the behaviour of the components [106]. <p> Support for complex preconditions makes it possible to define component behaviour without having to specify all possible internal states of a component (and its neighbours) with complete understanding in advance of the component's transitions. For example in <ref> [45] </ref> for defining one transition of a certain component, it was necessary to add an extra state not low to record that a component was not in the state low. <p> On 100 tests the system produced answers within 20 seconds in 55 cases; in the other 45 no answer was produced within 5 minutes. It was reported that "for these <ref> [45] </ref> tests it would suffice to relax two or three constraints in order to efficiently solve the problem". The challenge is how to detect which constraints to relax.
Reference: [46] <author> M. Fox. </author> <booktitle> ISIS:A Retrospective, </booktitle> <pages> pages 3-28. </pages> <note> In Zweben and Fox [134], </note> <year> 1994. </year>
Reference-contexts: The pessimistic approach was applied to a diagnosis problem [101]. The main idea is to find the assignment that minimises the number or value of constraints violated, and this is the diagnosis. Constraint violations are an important focus in practical scheduling systems. In ISIS <ref> [46] </ref>, the decision as to which constraints to relax, and how, are an 20 important aspect of the search technique. In OPIS [115], the whole focus of scheduling is on repair, and the repair is driven by constraint violations. <p> One way to avoid an explosion in the search space is to explore a strictly limited number of alternative states, for example by using beam search. This is the approach taken in the ISIS system, originally applied for scheduling the manufacture of turbine blades <ref> [46] </ref>. However constructive search techniques, which work on partial solutions, can have little information about good or bad combinations of values for their unlabelled variables. Repair-based search techniques, by contrast, have a "current" complete, though often infeasible, solution as a starting point.
Reference: [47] <author> H. Frangouli, V. Harmandas, and P. Stamatopoulos. UTSE: </author> <title> Construction of optimum timetables for university courses a CLP-based approach. </title> <booktitle> In Roth [100], </booktitle> <pages> pages 225-243. </pages>
Reference-contexts: Nevertheless arc-consistency techniques and backtrack search have sufficed for a number of practical appliactions of constraint programming. Three examples are a university timetabling application <ref> [47] </ref>, an industrial disposing problem [6], and a vehicle scheduling system [80]. 4.3 Specialised Constraint Behaviours For different applications different constraint behaviours are appropriate.
Reference: [48] <author> Bjorn N. Freeman-Benson, John Maloney, and Alan Borning. </author> <title> An incremental constraint solver. </title> <journal> Communications of the ACM, </journal> <volume> 33(1) </volume> <pages> 54-63, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: propagation of constraints in graphical interface applications has to satisfy two special requirements: * It has to be extremely efficient, to support low latency and high bandwidth feedback during direct manipulation [86] * It has to propagate changes, not just refinements, and inconsistencies must be handled by making further changes <ref> [48] </ref> To meet the first objective it is necessary to handle the constraints as functions. However a prerequisite for handling a constraint in this way is to know in what direction it propagates information. This directional information has been called the dataflow graph of the constraints.
Reference: [49] <author> E.C. Freuder. </author> <title> Synthesizing constraint expressions. </title> <journal> Communications of the ACM, </journal> <volume> 21(11) </volume> <pages> 958-966, </pages> <month> November </month> <year> 1978. </year>
Reference-contexts: Constraint propagation was used in 1972 for scene labelling applications [130], and has produced a long line of local consistency algorithms <ref> [94, 84, 49, 60, 93, 31] </ref>. The topic of search has been at the heart of AI since GPS [97].
Reference: [50] <author> Eugene Freuder. </author> <title> Exploiting structure in constraint satisfaction problems. </title> <editor> In B. Mayoh, E. Tyugu, and J.Penjaam, editors, </editor> <booktitle> Constraint Programming: Proceedings 1993 NATO ASI Parnu, Estonia, NATO Advanced Science Institute Series, </booktitle> <pages> pages 54-79. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The topic of search has been at the heart of AI since GPS [97]. Influential ideas were generate and test [56], branch and bound [79], the A* algorithm [61], iterative deepening [76], tree search guided by the global problem structure <ref> [50] </ref>, or by information elicited during search [87], and by intelligent backtracking [75].
Reference: [51] <author> Eugene C. Freuder and Richard J. Wallace. </author> <title> Partial constraint satisfaction. </title> <journal> Artificial Intelligence, </journal> <volume> 58 </volume> <pages> 21-70, </pages> <year> 1992. </year> <month> 27 </month>
Reference-contexts: As yet this approach does not appear to have scaled up enough to be viable for real applications. Alternatively they can be solved pessimistically be first searching for a solution satisfying the strongest constraints and then seeking to satisfy more and more constraints, strongest first <ref> [51] </ref>. The pessimistic approach was applied to a diagnosis problem [101]. The main idea is to find the assignment that minimises the number or value of constraints violated, and this is the diagnosis. Constraint violations are an important focus in practical scheduling systems.
Reference: [52] <author> Thom Fruhwirth and Philipp Hanschke. </author> <title> Terminological Reasoning with Constraint Handling Rules, pages 361-384. </title> <editor> In Saraswat and Van Henten-ryck [105], </editor> <year> 1994. </year>
Reference-contexts: To support the implementation of such specialised constraint behaviours some generic techniques have been developed. Such a language Constraint Handling Rules has been used for supporting terminological reasoning <ref> [52] </ref>. Indeed the Concurrent Constraints framework [107] supports just this requirement for cleanly implementing well-behaved constraints! A concurrent constraints language which has been used for tackling combinatorial problems is cc (FD) [124].
Reference: [53] <author> P. Gardenfors. </author> <title> Knowledge in Flux. </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference-contexts: To meet the second objective propagating changes so as to eliminate inconsistencies it is necessary to establish which values can be changed and which 15 constraints can be relaxed. This is essentially the knowledge revision problem <ref> [53] </ref>, emerging in a very practical context.
Reference: [54] <author> M. Gleicher. </author> <title> Practical Issues in Graphical Constraints. </title> <editor> In Saraswat and Van Hentenryck [105], </editor> <year> 1994. </year>
Reference-contexts: As yet the technology has not scaled up sufficiently to allow such general constraints to be tackled in large graphical applications such as commercial CAD systems (but see [90] for a specialised application, and <ref> [54, 36] </ref> for ongoing developments). 4 Applications using Constraints for Solving Com binatorial Problems The success of constraint programming on combinatorial problems is due to its combination of high level modelling, constraint propagation and facilities for controlling search behaviour.
Reference: [55] <author> Y. Gloner. </author> <title> A scheduling engine. </title> <institution> COSYTEC SA, Parc Club Orsay Univer-site, </institution> <address> 4, rue Jean Rostand, 91893 Orsay Cedex, France, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: The SAVEPLAN production management 13 software package uses constraint programming for its scheduling component be-cause it supports an interactive user interface <ref> [55] </ref>. A crucial issue in scheduling for the process industries is how to handle over constrained problems [83] the very same problem faced by Renault in the STP application (above). The feedback from constraint propagation must be presented vividly to the end user.
Reference: [56] <author> S.W. Golomb and L.D. Baumert. </author> <title> Backtrack programming. </title> <journal> Journal of the ACM, </journal> <volume> 12 </volume> <pages> 516-524, </pages> <year> 1965. </year>
Reference-contexts: Constraint propagation was used in 1972 for scene labelling applications [130], and has produced a long line of local consistency algorithms [94, 84, 49, 60, 93, 31]. The topic of search has been at the heart of AI since GPS [97]. Influential ideas were generate and test <ref> [56] </ref>, branch and bound [79], the A* algorithm [61], iterative deepening [76], tree search guided by the global problem structure [50], or by information elicited during search [87], and by intelligent backtracking [75].
Reference: [57] <author> V. Gosselin. </author> <title> Train scheduling using constraint programming techniques. </title> <booktitle> In Proc. 13th International Conference on Artificial Intelligence, Expert Systems and Natural Language, </booktitle> <pages> pages 401-413, </pages> <address> Avignon, </address> <year> 1993. </year> <pages> EC2, 269-287, </pages> <address> rue de la Garenne, 92024 Nanterre, France. </address>
Reference-contexts: A typical constraint on resources is that no two tasks can use the same resource at the same time. A vivid example from an existing application is that no two trains can run on the same track at the same time <ref> [57] </ref>. A typical constraint applicable to an object is to constrain a property (or slot) of the object. For example a particular parking bay may not admit vehicles of more than a certain dimension. <p> However these constraints can be handled in CLP as guarded clauses (introduced in section 2.2.1 above) which, if their guard is satisfied, can declare new variables and constrain then appropriately. Another specialised behaviour was used in a train routing and timetabling application by Gosselin <ref> [57] </ref>. In this application a complete route is composed of a sequence of sections, each of which has several choices. One approach would be to compute all possible routes in advance this corresponds to the mod-elling technique of column generation for mixed integer programming.
Reference: [58] <author> T. Graf, P. van Hentenryck, C. Pradelles, and L. Zimmer. </author> <title> Simulation of hybrid circuits in constraint logic programming. </title> <booktitle> In Proceedings of the Eleventh International Joint Conference on Artificial Intelligence (IJCAI-89), </booktitle> <pages> pages 72-77, </pages> <address> Detroit, </address> <year> 1989. </year>
Reference-contexts: Thus for circuit diagnosis, instead of the standard arc-consistency algorithm, CHIP used constraints called "demons" with a special behaviour [112], and for simulation of hybrid circuits CHIP used constraints called "forward rules" with another special behaviour <ref> [58] </ref>. A nice example of specialised constraint behaviour comes from an application to the design of keys and locks. The problem is, given a site (with typically 1000-10000 keys), how to design the different keys and locks so each key opens a required set of locks.
Reference: [59] <author> El-Sakkout H. and Wallace M.G. </author> <title> Modelling a fleet assignment application in constraint logic programming. </title> <type> Technical report, </type> <year> 1995. </year>
Reference-contexts: For this reason in many applications (eg. <ref> [121, 59] </ref>) it proves useful to introduce extra variables for aggregates: (eg T = T 1 + T 2 and S = S1 + S2), and to add redundant constraints on the aggregate variables (eg T = S + 1).
Reference: [60] <author> R.M. Haralick and G.L. Elliot. </author> <title> Increasing tree search efficiency for constraint satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 14 </volume> <pages> 263-314, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: Constraint propagation was used in 1972 for scene labelling applications [130], and has produced a long line of local consistency algorithms <ref> [94, 84, 49, 60, 93, 31] </ref>. The topic of search has been at the heart of AI since GPS [97].
Reference: [61] <author> P.E. Hart, N.J. Nilsson, and B. Raphael. </author> <title> A formal basis for the heuristic determination of minimum cost paths. </title> <journal> IEEE Tansactions on Systems, Science and Cybernetics, </journal> <volume> 4(2), </volume> <year> 1968. </year>
Reference-contexts: The topic of search has been at the heart of AI since GPS [97]. Influential ideas were generate and test [56], branch and bound [79], the A* algorithm <ref> [61] </ref>, iterative deepening [76], tree search guided by the global problem structure [50], or by information elicited during search [87], and by intelligent backtracking [75].
Reference: [62] <author> R. Helm, T. Huynh, C. Lassez, and K. Marriott. </author> <title> A linear constraints technology for user interfaces. </title> <booktitle> In Graphics Interface, </booktitle> <pages> pages 301-309, </pages> <address> Van-couver, </address> <year> 1992. </year>
Reference-contexts: Again, this normalisation process is expensive and should be done as few times as possible <ref> [62] </ref>. To meet the second objective propagating changes so as to eliminate inconsistencies it is necessary to establish which values can be changed and which 15 constraints can be relaxed. This is essentially the knowledge revision problem [53], emerging in a very practical context.
Reference: [63] <author> M. Henz, G. Smolka, and J. Wuertz. </author> <title> Object-oriented concurrent constraint programming in oz. </title> <booktitle> In Priniciples and Practice of Constraint Programming, </booktitle> <pages> pages 27-48. </pages> <publisher> MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Three of the most influential constraint programming languages were embedded in Prolog (Prolog III [23], CLP (R) [70] and CHIP [32]). Whilst all three system are still developing further ([119, 73, 111]), there are many new constraint programming systems emerging (eg <ref> [22, 38, 63, 124, 4] </ref>). From a theoretical point of view the extension of logic programming to Constraint Logic Programming (CLP) has been very fruitful: for example ALPS [85] a form of logic programming with guards was an extremely influential language, becoming the forerunner of the Concurrent Constraints paradigm [107]. <p> Concurrent constraint programming has in turn provided a very clean model of concurrent and multi-agent computing <ref> [108, 63] </ref>. Constraints can also be mod-elled in terms of information systems [104], which allows us to reason about the behaviour of constraint programs at an abstract level. One application of such abstract reasoning, abstract interpretation, is already paying dividends in the global optimisation of constraint programs [74].
Reference: [64] <author> L. Hermosilla and G. Kuper. </author> <title> Towards the definition of a spatial object-oriented data model with constraints. </title> <booktitle> In Kuper and Wallace [77]. </booktitle> <pages> 28 </pages>
Reference-contexts: For example in an electronic 14 room planning application, it might be possible to drag a graphical chair across an graphical room, but the constraints should prevent it from occupying a position which overlaps with the position of any other piece of furniture in the room <ref> [64] </ref>. Constraints also provide a way of stating many user interface requirements, such as maintaining consistency between the underlying data and a graphical depiction of that data, maintaining consistency among multiple views, and specifying formatting requirements. A commercial constraint library for constructing interactive graphical user interfaces is presented in [9].
Reference: [65] <author> Hon Wai Chun. </author> <title> Solving check-in counter constraints with ILOG solver. In ILOG [69]. ILOG SA, </title> <type> 12, </type> <address> Avenue Raspail, BP 7, 94251 Gentilly Cedex, France. </address>
Reference-contexts: Not only does this require the application designer to make some rather arbitrary judgements, but also it becomes hard to maintain in the light of ever-changing priorities. Lagrangian relaxation is adopted in many practical applications for example <ref> [133, 65] </ref>.
Reference: [66] <author> J.N. Hooker and H. Yan. </author> <title> Verifying Logic Circuits by Benders Decomposition. </title> <editor> In Saraswat and Van Hentenryck [105], </editor> <year> 1994. </year>
Reference-contexts: Another constraint-based procedure for verifying the equivalence of digital circuits was recently proposed by Hooker and Yan <ref> [66] </ref>. 2.2.2 Sequential Circuits Most VLSI circuits have not only inputs and outputs but also an internal state. The output of the circuit depends on the inputs and the state. Similarly the inputs and previous state determine a new internal state.
Reference: [67] <author> E Hyv-onen. </author> <title> Interval constraint spreadsheets for financial planning. </title> <booktitle> In Proc. First International Conference on Artificial Intelligence Applications on Wall Street. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: Then she invokes a linear programming algorithm to produce an optimal solution, with regard to manufacturing and transportation costs, within the selected intervals and satisfying the selected side-constraints. Another very promising application of constraint-based spreadsheets is to financial planning <ref> [67] </ref>. The spreadsheet allows the financial planner to explore potential investments. <p> Sometimes, of course, a refinement will violate the constraints, and then it is necessary to widen the intervals again. Typically inconsistency is dealt with by backtracking, but another option is to relax the intervals in a way that is driven by the violated constraints <ref> [67] </ref>. 3.2 Explanation and Debugging Mixed initiative problem solving is essential in a whole variety of practical applications: the end user must be able to cooperate with the software in developing solutions.
Reference: [68] <author> ILOG. </author> <title> ILOG SOLVER: Object-oriented constraint programming. ILOG SA, </title> <type> 12, </type> <address> Avenue Raspail, BP 7, 94251 Gentilly Cedex, France. </address>
Reference-contexts: For example isolating constraints as libraries has made possible the development of sophisticated constraint-based scheduling systems, see [134]. More generally there are commercially available libraries supporting constraint handling <ref> [68, 24] </ref>. On the other hand constraints fit hand in glove with declarative host programming languages. Three of the most influential constraint programming languages were embedded in Prolog (Prolog III [23], CLP (R) [70] and CHIP [32]). <p> For example a particular parking bay may not admit vehicles of more than a certain dimension. Such a constraint may be defined on a particular object, or on a whole class all parking bays of a certain class for example <ref> [68] </ref>. A first proposal for integrating constraint and object models is in [12], and an application of constraints in a visual interface to object-oriented databases is [30].
Reference: [69] <editor> ILOG, editor. </editor> <booktitle> Proceedings of the ILOG User-group meeting. ILOG, 1995. </booktitle> <address> ILOG SA, 12, Avenue Raspail, BP 7, 94251 Gentilly Cedex, France. </address>
Reference-contexts: and an easy modifica tion of the data structures * hooks in the resolution engine enabling the user to pause during search, modify the configuration and continue the search." The importance of mixed initiative programming in practical applications is confirmed in the proceedings of two industrial CLP user group meetings <ref> [25, 69] </ref>. For example the assignment of cashiers for El Corte Ingles in Spain includes both assignment by a constraint program and consolidation by the end user. This consolidation is then fed back to the constraint program and used to constrain further assignments [43].
Reference: [70] <author> Joxan Jaffar, Spiro Michayov, Peter J. Stuckey, and Roland H. C. Yap. </author> <title> The CLP(R) language and system. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 14(3) </volume> <pages> 339-395, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: More generally there are commercially available libraries supporting constraint handling [68, 24]. On the other hand constraints fit hand in glove with declarative host programming languages. Three of the most influential constraint programming languages were embedded in Prolog (Prolog III [23], CLP (R) <ref> [70] </ref> and CHIP [32]). Whilst all three system are still developing further ([119, 73, 111]), there are many new constraint programming systems emerging (eg [22, 38, 63, 124, 4]).
Reference: [71] <author> M. Johnston and S. Minton. </author> <title> Analyzing a Heuristic Strategy for Constraint-Satisfaction and Scheduling, </title> <booktitle> chapter 9, </booktitle> <pages> pages 257-289. </pages> <note> In Zweben and Fox [134], </note> <year> 1994. </year>
Reference-contexts: Repair based on label operators has proven very effective on a range of problems. These techniques are now being proven on practical applications. Conflict minimisation has been incorporated into the scheduler used for the Hubble telescope <ref> [71] </ref>, and weak commitment is being applied on a network path assignment application [132]. 5 Conclusion This paper has skimmed the surface of a range of practical applications of constraint programming.
Reference: [72] <author> P. Kay and H. Simonis. </author> <title> Building industrial CHIP applications from reuse-able software components. </title> <booktitle> In Roth [100], </booktitle> <pages> pages 355-369. </pages>
Reference-contexts: This is reflected in the speed with which constraint programming approaches have caught up with, and overtaken, special purpose codes for job-shop scheduling 16 [17]. The second consequence is that programs can be quickly modified when the application changes. Constraint programming code is genuinely reuseable <ref> [72] </ref>. 4.2 Backtrack Search under Constraints Backtrack search augmented by constraint propagation is a basic technique for tackling combinatorial problems [96, 125]. Each choice made by the search engine, imposes new constraints whose consequences are extracted by the propagation engine.
Reference: [73] <author> Kelly, Macdonald, Marriott, Sondergaard, Stuckey, and Yap. </author> <title> An optimizing compiler for CLP(R). </title> <editor> In U. Montanari and F. Rossi, editors, </editor> <booktitle> Proc. Principles and Practise of Constraints Programming, CP'95, </booktitle> <pages> pages 222-239. </pages> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference: [74] <author> A.D. Kelly, A. Macdonald, K. Marriott, H. Sondergaard, P. Stuckey, and R. Yap. </author> <title> An optimizing compiler for CLP(R). </title> <note> In Montanari and Rossi [95]. </note>
Reference-contexts: Constraints can also be mod-elled in terms of information systems [104], which allows us to reason about the behaviour of constraint programs at an abstract level. One application of such abstract reasoning, abstract interpretation, is already paying dividends in the global optimisation of constraint programs <ref> [74] </ref>. However the focus of this paper is on the success of constraints in building practical software solutions to end-user problems. We shall examine these successes in the next three sections, corresponding to the three features of constraint programming listed above.
Reference: [75] <author> G. Kondrak and P. van Beek. </author> <title> A theoretical evaluation of selected backtracking algorithms. </title> <editor> In C. Mellish, editor, </editor> <booktitle> IJCAI, </booktitle> <pages> pages 541-547, </pages> <address> Mon-treal, Canada, </address> <year> 1995. </year>
Reference-contexts: Influential ideas were generate and test [56], branch and bound [79], the A* algorithm [61], iterative deepening [76], tree search guided by the global problem structure [50], or by information elicited during search [87], and by intelligent backtracking <ref> [75] </ref>. Whilst there is "nothing new under the sun", the current flowering of constraint programming, owes itself to a generation of languages in which these three features are present in a new architecture that makes them easy to understand, combine and apply.
Reference: [76] <author> R.E. Korf. </author> <title> Optimal path-finding algorithms. </title> <booktitle> In Search in Artificial Intelligence, </booktitle> <pages> pages 223-267. </pages> <publisher> Springer, </publisher> <year> 1988. </year>
Reference-contexts: The topic of search has been at the heart of AI since GPS [97]. Influential ideas were generate and test [56], branch and bound [79], the A* algorithm [61], iterative deepening <ref> [76] </ref>, tree search guided by the global problem structure [50], or by information elicited during search [87], and by intelligent backtracking [75].
Reference: [77] <author> G. Kuper and M. Wallace, </author> <title> editors. </title> <booktitle> Proc. 1st International CONTESSA Workshop on Constraint Databases and their Applications. </booktitle> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: Another frontier is the use of constraint programming to bring software engineering techniques to the mathematical programming community: constraints programming may play an important role in the mathematical modelling of complex problems. With the integration of constraint programming and databases <ref> [77] </ref>, we see the paradigm being brought right to the heart of commercial information processing. Constraint programs will be used for database queries so that database access will become just one feature of a complete decision support functionality. At that point constraint programming will have finally come of age.
Reference: [78] <author> J-L. Lauriere. </author> <title> A language and a program for stating and solving combinatorial problems. </title> <journal> Artificial Intelligence, </journal> <volume> 10 </volume> <pages> 29-127, </pages> <year> 1978. </year> <month> 29 </month>
Reference-contexts: This survey will seek, by examples, to explain the current success of constraint technology, and, by showing its benefits, to add to that success. In 1963 Sutherland introduced the Sketchpad system [118], a constraint language for graphical interaction. Other early constraint programming languages were Fikes' Ref-Arf [44], Lauriere's Alice <ref> [78] </ref>, Sussmann's CONSTRAINTS [116] and Borning's ThingLab [10].
Reference: [79] <author> E.L. Lawler and D.E. Wood. </author> <title> Branch-and-bound methods: A survey. </title> <journal> Op--erations Research, </journal> <volume> 14 </volume> <pages> 699-719, </pages> <year> 1966. </year>
Reference-contexts: The topic of search has been at the heart of AI since GPS [97]. Influential ideas were generate and test [56], branch and bound <ref> [79] </ref>, the A* algorithm [61], iterative deepening [76], tree search guided by the global problem structure [50], or by information elicited during search [87], and by intelligent backtracking [75].
Reference: [80] <author> J. Lazaro and P. Aristondo. </author> <title> Using SOLVER for nurse scheduling. In ILOG [69]. ILOG SA, </title> <type> 12, </type> <address> Avenue Raspail, BP 7, 94251 Gentilly Cedex, France. </address>
Reference-contexts: Nevertheless arc-consistency techniques and backtrack search have sufficed for a number of practical appliactions of constraint programming. Three examples are a university timetabling application [47], an industrial disposing problem [6], and a vehicle scheduling system <ref> [80] </ref>. 4.3 Specialised Constraint Behaviours For different applications different constraint behaviours are appropriate. Thus for circuit diagnosis, instead of the standard arc-consistency algorithm, CHIP used constraints called "demons" with a special behaviour [112], and for simulation of hybrid circuits CHIP used constraints called "forward rules" with another special behaviour [58].
Reference: [81] <author> Claude Le Pape. </author> <title> Implementation of resource constraints in ILOG SCHEDULE. </title> <journal> Intelligent Systems Engineering, </journal> <volume> 3(2), </volume> <year> 1994. </year>
Reference-contexts: Such a specialised constraint is available in CHIP called the cumulative constraint [1]. It has been used in timetabling [7], in scheduling network repair 18 operations [29], and in a variety of commercial CHIP applications [109]. A sim-ilar generic constraint is the ILOG SCHEDULE library <ref> [81] </ref>, which has been applied on a range of scheduling applications [98, 42]. The algorithms underlying these constraints are based on ones developed in the Operations Research community. A comparative study of some of these algorithms is in [2].
Reference: [82] <author> J. Little and K. Darby-Dowman. </author> <title> The significance of constraint logic programming to operational research. </title> <note> Presented at APMOD'95, </note> <year> 1995. </year>
Reference-contexts: On the other hand there are simple applications where local propagation has a behaviour which is extremely hard to achieve in the mixed integer programming framework <ref> [114, 82] </ref>. For optimisation problems, where branch and bound is being used as the op-timisation algorithm, it is particularly important to achieve good propagation on constraints involving the cost. The lower bound of the variable representing the cost is a safe estimate of the cost of the full solution.
Reference: [83] <author> M. Loos. </author> <title> Optimized scheduling for the process industry. </title> <institution> COSYTEC SA, Parc Club Orsay Universite, </institution> <address> 4, rue Jean Rostand, 91893 Orsay Cedex, France, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: The SAVEPLAN production management 13 software package uses constraint programming for its scheduling component be-cause it supports an interactive user interface [55]. A crucial issue in scheduling for the process industries is how to handle over constrained problems <ref> [83] </ref> the very same problem faced by Renault in the STP application (above). The feedback from constraint propagation must be presented vividly to the end user. The spreadsheet approach is just one example of a user interface.
Reference: [84] <author> A.K. Mackworth. </author> <title> Consistency in networks of relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8(1) </volume> <pages> 99-118, </pages> <year> 1977. </year>
Reference-contexts: Constraint propagation was used in 1972 for scene labelling applications [130], and has produced a long line of local consistency algorithms <ref> [94, 84, 49, 60, 93, 31] </ref>. The topic of search has been at the heart of AI since GPS [97].
Reference: [85] <author> Michael J. Maher. </author> <title> Logic semantics for a class of committed-choice programs. </title> <editor> In Jean-Louis Lassez, editor, ICLP'87: </editor> <booktitle> Proceedings 4th International Conference on Logic Programming, </booktitle> <pages> pages 858-876, </pages> <address> Melbourne, 1987. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Whilst all three system are still developing further ([119, 73, 111]), there are many new constraint programming systems emerging (eg [22, 38, 63, 124, 4]). From a theoretical point of view the extension of logic programming to Constraint Logic Programming (CLP) has been very fruitful: for example ALPS <ref> [85] </ref> a form of logic programming with guards was an extremely influential language, becoming the forerunner of the Concurrent Constraints paradigm [107]. Concurrent constraint programming has in turn provided a very clean model of concurrent and multi-agent computing [108, 63].
Reference: [86] <author> J. Maloney, A. Borning, and B. Freeman-Benson. </author> <title> Constraint technology for user interface construction in thinglab ii. </title> <booktitle> In Proc. ACM OOPSLA, </booktitle> <pages> pages 381-388, </pages> <year> 1989. </year>
Reference-contexts: The propagation of constraints in graphical interface applications has to satisfy two special requirements: * It has to be extremely efficient, to support low latency and high bandwidth feedback during direct manipulation <ref> [86] </ref> * It has to propagate changes, not just refinements, and inconsistencies must be handled by making further changes [48] To meet the first objective it is necessary to handle the constraints as functions.
Reference: [87] <author> F. Maruyama, Y. Minoda, Sawada S., and Y. Takizawa. </author> <title> Constraint satisfaction and optimisation using nogood justifications. </title> <booktitle> In Proc. 2nd Pacific Rim Conf. on AI, </booktitle> <year> 1992. </year>
Reference-contexts: The topic of search has been at the heart of AI since GPS [97]. Influential ideas were generate and test [56], branch and bound [79], the A* algorithm [61], iterative deepening [76], tree search guided by the global problem structure [50], or by information elicited during search <ref> [87] </ref>, and by intelligent backtracking [75]. Whilst there is "nothing new under the sun", the current flowering of constraint programming, owes itself to a generation of languages in which these three features are present in a new architecture that makes them easy to understand, combine and apply.
Reference: [88] <author> M. Meier. </author> <title> Debugging constraint programs. </title> <booktitle> In Proc. Principles and Practice of Constraint Programming CP'95. </booktitle> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: From the results of her interactive problem solving, the user learns which automatic techniques work well on the current specific application. A system supporting this kind of "performance debugging" is described in <ref> [88] </ref>. 3.3 Constraint-Based Graphical Interfaces The most venerable application of constraint programmng is its application to graphical interfaces.
Reference: [89] <author> F. Menenez and P. Barahona. </author> <title> An Incremental Hierarchical Constraint Solver, pages 291-318. </title> <editor> In Saraswat and Van Hentenryck [105], </editor> <year> 1994. </year>
Reference-contexts: Achieving an accurate lower bound is crucial to the behaviour of branch and bound and other constructive search techniques! Tailoring the behaviour of the constraints, and 19 adding redundant constraints are the two main techniques available in constraint programming to achieve this aim. 4.5 Constraint Relaxation It is claimed in <ref> [89] </ref> that "real problems are usually overconstrained". This claim is born out by studying reported practical applications of constraints. A set of tests which happen to illustrate this phenomenon is described in [7]. <p> The optimistic approach has been applied in some timetabling applications <ref> [89, 41] </ref>. As yet this approach does not appear to have scaled up enough to be viable for real applications. Alternatively they can be solved pessimistically be first searching for a solution satisfying the strongest constraints and then seeking to satisfy more and more constraints, strongest first [51].
Reference: [90] <author> G. Mezzanatto, M. Foglino, P. Giordanengo, M. Apra, and G. Gullane. </author> <title> Using ai techniques to design and install electrical bundles. </title> <booktitle> In Proc. 13th International Conf. on Artificial Intelligence, Expert Systems and Natural Language, </booktitle> <address> Avignon, </address> <year> 1993. </year> <pages> EC2, 269-287, </pages> <address> rue de la Garenne, 92024 Nanterre, France. </address>
Reference-contexts: As yet the technology has not scaled up sufficiently to allow such general constraints to be tackled in large graphical applications such as commercial CAD systems (but see <ref> [90] </ref> for a specialised application, and [54, 36] for ongoing developments). 4 Applications using Constraints for Solving Com binatorial Problems The success of constraint programming on combinatorial problems is due to its combination of high level modelling, constraint propagation and facilities for controlling search behaviour.
Reference: [91] <author> S. Minton, M. D. Johnston, A. B. Philips, and P. Laird. </author> <title> Minimizing conflicts: a heuristic repair method for constraint satisfaction and scheduling problems. </title> <journal> Artificial Intelligence, </journal> <volume> 58, </volume> <year> 1992. </year> <month> 30 </month>
Reference-contexts: Repair-based search techniques, by contrast, have a "current" complete, though often infeasible, solution as a starting point. Weaknesses in the current solution are repaired, either by a problem-specific move opera 21 tion, as in hill-climbing and simulated annealing, or by labelling, as in conflict minimisation <ref> [91] </ref> or weak-commitment [131]. A move operation takes a complete labelling of the variables and modifies it, yielding another complete labelling. The move is designed so that if the original labelling satisfied certain constraints, then so will the resulting labelling. <p> Secondly the previous labelling is used in the selection of which variable to label next typically one whose previous value conflicts with one or more constraints. In conflict minimisation the repair labels only one variable <ref> [91] </ref>. In weak commitment relabelling continues until there is no way to change a variable so as to make it consistent with the other relabelled variables [131]. Repair based on label operators has proven very effective on a range of problems. These techniques are now being proven on practical applications.
Reference: [92] <author> S. Mittal and F. Frayman. </author> <title> Towards a generic model of configuration tasks. </title> <booktitle> In Proc. 11th IJCAI, </booktitle> <pages> pages 1395-1401, </pages> <year> 1989. </year>
Reference-contexts: A feature that comes for free with CLP is the facility to handle dynamic Constraint Satisfaction Problems (dynamic CSP's), were the set of problem variables may grow as search progresses. A typical application of dynamic CSP's is configuration <ref> [92] </ref>. In this case the choice of a particular type of component, will introduce new variables for each (unknown) property of the component. Later choices will then instantiate the variables. For dynamic CSP's special constraints called "activity" constraints were introduced, whose role was to turn variables on or off.
Reference: [93] <author> R. Mohr and T.C. Henderson. </author> <title> Arc and path consistency revisited. </title> <journal> Artificial Intelligence, </journal> <volume> 28 </volume> <pages> 225-233, </pages> <year> 1986. </year>
Reference-contexts: Constraint propagation was used in 1972 for scene labelling applications [130], and has produced a long line of local consistency algorithms <ref> [94, 84, 49, 60, 93, 31] </ref>. The topic of search has been at the heart of AI since GPS [97].
Reference: [94] <author> U. Montanari. </author> <title> Networks of constraints : Fundamental properties and applications to picture processing. </title> <journal> Information Science, </journal> <volume> 7(2) </volume> <pages> 95-132, </pages> <year> 1974. </year>
Reference-contexts: Constraint propagation was used in 1972 for scene labelling applications [130], and has produced a long line of local consistency algorithms <ref> [94, 84, 49, 60, 93, 31] </ref>. The topic of search has been at the heart of AI since GPS [97].
Reference: [95] <editor> U. Montanari and F. Rossi, editors. </editor> <booktitle> Proc Principles and Practice of Constraint Programming CP'95. </booktitle> <publisher> Springer, </publisher> <year> 1995. </year>
Reference: [96] <author> B. </author> <title> Nadel. Tree Search and Arc Consistency in Constraint Satisfaction Algorithms, chapter 9. </title> <publisher> Springer, </publisher> <year> 1988. </year>
Reference-contexts: The second consequence is that programs can be quickly modified when the application changes. Constraint programming code is genuinely reuseable [72]. 4.2 Backtrack Search under Constraints Backtrack search augmented by constraint propagation is a basic technique for tackling combinatorial problems <ref> [96, 125] </ref>. Each choice made by the search engine, imposes new constraints whose consequences are extracted by the propagation engine. The information yielded by propagation is then used to focus the remainder of the search.
Reference: [97] <author> A. Newell and H.A. Simon. </author> <title> GPS, a program that simulates human thought. </title> <editor> In E. Feigenbaum and J. Feldman, editors, </editor> <booktitle> Computers and Thought, </booktitle> <pages> pages 279-293. </pages> <address> New York: </address> <publisher> McGraw-Hill, </publisher> <year> 1963. </year>
Reference-contexts: Constraint propagation was used in 1972 for scene labelling applications [130], and has produced a long line of local consistency algorithms [94, 84, 49, 60, 93, 31]. The topic of search has been at the heart of AI since GPS <ref> [97] </ref>. Influential ideas were generate and test [56], branch and bound [79], the A* algorithm [61], iterative deepening [76], tree search guided by the global problem structure [50], or by information elicited during search [87], and by intelligent backtracking [75].
Reference: [98] <author> J.-F. Puget. </author> <title> Applications of constraint programming. </title> <booktitle> In Montanari and Rossi [95], </booktitle> <pages> pages 647-650. </pages>
Reference-contexts: It has been used in timetabling [7], in scheduling network repair 18 operations [29], and in a variety of commercial CHIP applications [109]. A sim-ilar generic constraint is the ILOG SCHEDULE library [81], which has been applied on a range of scheduling applications <ref> [98, 42] </ref>. The algorithms underlying these constraints are based on ones developed in the Operations Research community. A comparative study of some of these algorithms is in [2].
Reference: [99] <author> A. Rauzy. </author> <title> Notes on the design of an open boolean solver. </title> <editor> In P. Van Hentenryck, editor, </editor> <booktitle> Proc. International Conference on Logic Programming ICLP'94'. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: The algorithm is based on a special data structure Binary Decision Diagrams (BDD's) to represent the constraints [13] and employs a decision procedure Boolean Unification to extract the "most general solution" to any set of constraints defined in terms of booleans functions and relations. <ref> [15, 99] </ref>. The first specific application which directly uses constraints as a modelling tool is VLSI circuit verification.
Reference: [100] <editor> Al Roth, editor. </editor> <booktitle> Proc. Third International Conference on the Practical Applications of Prolog, </booktitle> <address> Paris, </address> <year> 1995. </year>
Reference: [101] <author> D. Sabin, M. Sabin, R. Russell, and E. Freuder. </author> <title> A constraint-based approach to diagnosing software problems in computer networks. </title> <booktitle> In Monta-nari and Rossi [95], </booktitle> <pages> pages 463-480. </pages>
Reference-contexts: Alternatively they can be solved pessimistically be first searching for a solution satisfying the strongest constraints and then seeking to satisfy more and more constraints, strongest first [51]. The pessimistic approach was applied to a diagnosis problem <ref> [101] </ref>. The main idea is to find the assignment that minimises the number or value of constraints violated, and this is the diagnosis. Constraint violations are an important focus in practical scheduling systems.
Reference: [102] <author> N. Sadeh. </author> <title> Micro-Opportunistic Scheduling, </title> <note> chapter 4. In Zweben and Fox [134], </note> <year> 1994. </year>
Reference-contexts: Simonis points out that backtracking is most important for developing complex assignment strategies in the problem solver [110]. Backtracking is used, for example, in Micro-Boss <ref> [102] </ref>, but a great deal of computational effort is put into each choice, to avoid reaching deadend states where backtracking is necessary.
Reference: [103] <author> Michael Sannella. </author> <title> The SkyBlue Constraint Solver and Its Applications. </title> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: In a graphical interface application, the dataflow graph is typically built when the user first grabs some graphical object using the mouse. The dataflow idea works best when there are no cycles in the graph. However the new propagation algorithms are increasingly able to handle cycles <ref> [103] </ref>. For example sets of linear equations and inequations which cannot in general be reduced to a cycle-free constraint graph can still be normalised so that minimal work is done to reflect the effects on the remaining variables of changing the value of one specific variable.
Reference: [104] <author> V. Saraswat. </author> <title> The category of constraint systems is cartesian-closed. </title> <booktitle> In Proc. Logic in Computer Science LICS'92. IEEE, </booktitle> <year> 1992. </year>
Reference-contexts: Concurrent constraint programming has in turn provided a very clean model of concurrent and multi-agent computing [108, 63]. Constraints can also be mod-elled in terms of information systems <ref> [104] </ref>, which allows us to reason about the behaviour of constraint programs at an abstract level. One application of such abstract reasoning, abstract interpretation, is already paying dividends in the global optimisation of constraint programs [74].
Reference: [105] <editor> V. J. Saraswat and P. Van Hentenryck, editors. </editor> <booktitle> Principles and Practice of Constraint Programming. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [106] <author> Vijay Saraswat, Radha Jagadeesan, and Vinheet Gupta. </author> <title> Programming in timed concurrent constraint languages. </title> <editor> In B. Mayoh, E. Tyugu, and J.Penjaam, editors, </editor> <booktitle> Constraint Programming: Proceedings 1993 NATO ASI Parnu, Estonia, NATO Advanced Science Institute Series, </booktitle> <pages> pages 361-410. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <month> 31 </month>
Reference-contexts: One such commercial system is the system verification environment SVE [45]. There is another role for constraint programming in control systems, and that is as a language Timed Concurrent Constraint Programming (TCC) for defining the behaviour of the components <ref> [106] </ref>. This language uses constraint agents both to express reasoning about the current state, and to specify agent behaviours across multiple states. The first facility makes it possible to define complex preconditions for a component transition. <p> The second facility, specifying agents behaviour across multiple states, also avoids the programmer having to introduce artificial internal states. A simple example from <ref> [106] </ref> is sensor (Loc) :: always (power -&gt; at (Loc):paper -&gt; next (at (Loc):paper -&gt; jam)) This sensor component has the behaviour that, whenever the power is on, if 8 the paper is at the same location in two successive states, then it outputs jam.
Reference: [107] <author> Vijay A. Saraswat. </author> <title> Concurrent Constraint Programming. </title> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: From a theoretical point of view the extension of logic programming to Constraint Logic Programming (CLP) has been very fruitful: for example ALPS [85] a form of logic programming with guards was an extremely influential language, becoming the forerunner of the Concurrent Constraints paradigm <ref> [107] </ref>. Concurrent constraint programming has in turn provided a very clean model of concurrent and multi-agent computing [108, 63]. Constraints can also be mod-elled in terms of information systems [104], which allows us to reason about the behaviour of constraint programs at an abstract level. <p> To support the implementation of such specialised constraint behaviours some generic techniques have been developed. Such a language Constraint Handling Rules has been used for supporting terminological reasoning [52]. Indeed the Concurrent Constraints framework <ref> [107] </ref> supports just this requirement for cleanly implementing well-behaved constraints! A concurrent constraints language which has been used for tackling combinatorial problems is cc (FD) [124]. We will encounter cc (FD) again in the next section. 4.4 Redundant Constraints Local consistency is cheap to enforce, but weak.
Reference: [108] <author> Vijay A. Saraswat, Martin Rinard, and Prakash Panangaden. </author> <title> Semantic foundations of concurrent constraint programming. </title> <booktitle> In POPL 91, </booktitle> <year> 1990. </year>
Reference-contexts: Concurrent constraint programming has in turn provided a very clean model of concurrent and multi-agent computing <ref> [108, 63] </ref>. Constraints can also be mod-elled in terms of information systems [104], which allows us to reason about the behaviour of constraint programs at an abstract level. One application of such abstract reasoning, abstract interpretation, is already paying dividends in the global optimisation of constraint programs [74].
Reference: [109] <author> H. Simonis. </author> <title> Application development with the CHIP system. </title> <note> In Kuper and Wallace [77]. </note>
Reference-contexts: Such a specialised constraint is available in CHIP called the cumulative constraint [1]. It has been used in timetabling [7], in scheduling network repair 18 operations [29], and in a variety of commercial CHIP applications <ref> [109] </ref>. A sim-ilar generic constraint is the ILOG SCHEDULE library [81], which has been applied on a range of scheduling applications [98, 42]. The algorithms underlying these constraints are based on ones developed in the Operations Research community. A comparative study of some of these algorithms is in [2]. <p> The system is used as a decision support system, which helps the human scheduler, but does not replace him" <ref> [109] </ref>. 4.6 Advanced Search In several of the reported applications using backtrack search, the program returns answers quickly, when there are any, but continues to compute for a very long time if there are no (more) answers.
Reference: [110] <author> H. Simonis. </author> <title> Application development with the chip system. </title> <booktitle> In Proc. 1st International CONTESSA Workshop on Constraint Databases and their Applications. </booktitle> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: For example in the tests described in the previous section, the tightening of the data appears to take 45 instances of the problem into the really hard region. Simonis points out that backtracking is most important for developing complex assignment strategies in the problem solver <ref> [110] </ref>. Backtracking is used, for example, in Micro-Boss [102], but a great deal of computational effort is put into each choice, to avoid reaching deadend states where backtracking is necessary.
Reference: [111] <author> H. Simonis. </author> <title> The CHIP system and its applications. </title> <editor> In U. Montanari and F. Rossi, editors, </editor> <booktitle> Proc. Principles and Practice of Constraints Programming, CP'95, </booktitle> <pages> pages 643-646. </pages> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference: [112] <author> H. Simonis and M. Dincbas. </author> <title> Using logic programming for fault diagnosis in digital circuits. </title> <booktitle> In German Workshop on Artificial Intelligence (GWAI-87), </booktitle> <pages> pages 139-148, </pages> <address> Geseke, W.Germany, </address> <month> September </month> <year> 1987. </year>
Reference-contexts: Thus for circuit diagnosis, instead of the standard arc-consistency algorithm, CHIP used constraints called "demons" with a special behaviour <ref> [112] </ref>, and for simulation of hybrid circuits CHIP used constraints called "forward rules" with another special behaviour [58]. A nice example of specialised constraint behaviour comes from an application to the design of keys and locks.
Reference: [113] <author> H. Simonis, H. N. Nguyen, and M. Dincbas. </author> <title> Verification of digital circuits using chip. </title> <editor> In G.J. Milne, editor, </editor> <booktitle> Proceedings of the IFIP WG 10.2 International Working Conference on the Fusion of Hardware Design and Verification, </booktitle> <address> Glasgow, Scotland, </address> <month> July </month> <year> 1988. </year> <title> IFIP, </title> <publisher> North-Holland. </publisher>
Reference-contexts: For example a full-adder in a digital circuit imposes constraints between its inputs and outputs which are best captured in terms of the constraints imposed by its component gates as follows <ref> [113] </ref>: f ull adder (XIn; Y In; CarryIn; Sum; CarryOut) $ and2 (XIn; Y In; C1); and2 (CarryIn; S1; C2); xor (CarryIn; S1; Sum); or (C1; C2; CarryOut): The full-adder is, in turn, used as a component in more complex circuits, such as the n-bit adder.
Reference: [114] <author> B. Smith, S. Brailsford, </author> <title> P.M. Hubbard, and H.P. Williams. The progressive party problem: Integer linear programming and constraint propagation compared. </title> <booktitle> In Proc. APMOD, Brunel, </booktitle> <address> London, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: On the other hand there are simple applications where local propagation has a behaviour which is extremely hard to achieve in the mixed integer programming framework <ref> [114, 82] </ref>. For optimisation problems, where branch and bound is being used as the op-timisation algorithm, it is particularly important to achieve good propagation on constraints involving the cost. The lower bound of the variable representing the cost is a safe estimate of the cost of the full solution.
Reference: [115] <author> S. Smith. OPIS: </author> <title> A Methodology and Architecture for Reactive Scheduling, </title> <type> pages 29-66. </type> <note> In Zweben and Fox [134], </note> <year> 1994. </year>
Reference-contexts: Constraint violations are an important focus in practical scheduling systems. In ISIS [46], the decision as to which constraints to relax, and how, are an 20 important aspect of the search technique. In OPIS <ref> [115] </ref>, the whole focus of scheduling is on repair, and the repair is driven by constraint violations. Currently the way overconstrained problems are handled in most other applications is problem specific. <p> The move is designed so that if the original labelling satisfied certain constraints, then so will the resulting labelling. A typical example is the 2-swap, a move which maps one tour to another for solving the travelling salesman problem. Repair based on move operators is used in scheduling systems <ref> [115] </ref>, and in applications that use simulated annealing [28, 21, 26]. Integrating constraint propagation with repair-based search using move operations is an ongoing research theme, but there are applications where they are loosely connected. In OPIS [115] the problem constraints are crucial for determining the scope of the conflict which has <p> Repair based on move operators is used in scheduling systems <ref> [115] </ref>, and in applications that use simulated annealing [28, 21, 26]. Integrating constraint propagation with repair-based search using move operations is an ongoing research theme, but there are applications where they are loosely connected. In OPIS [115] the problem constraints are crucial for determining the scope of the conflict which has to be repaired and the most appropriate repair operator for the job.
Reference: [116] <author> G. J. Sussman and G. L. Steele. </author> <title> CONSTRAINTS | a language for expressing almost-hierarchical descriptions. </title> <journal> Artificial Intelligence, </journal> <volume> 14(1) </volume> <pages> 1-39, </pages> <year> 1980. </year>
Reference-contexts: In 1963 Sutherland introduced the Sketchpad system [118], a constraint language for graphical interaction. Other early constraint programming languages were Fikes' Ref-Arf [44], Lauriere's Alice [78], Sussmann's CONSTRAINTS <ref> [116] </ref> and Borning's ThingLab [10]. These languages already offered the most important features of constraint programming: * declarative problem modelling * propagation of the effects of decisions * efficient search for feasible solutions Each of these three features has been the study of extensive research over a long period.
Reference: [117] <author> G.J. Sussman and G.L. Steele. </author> <title> Constraints-a language for expressing almost-hierarchical descriptions. </title> <journal> Artificial Intelligence, </journal> <volume> 14(1) </volume> <pages> 1-39, </pages> <year> 1980. </year>
Reference-contexts: The first specific application which directly uses constraints as a modelling tool is VLSI circuit verification. The idea behind circuit verification has its roots in an idea of Sussman <ref> [117] </ref>: complex systems can be broken down and modelled in quite different ways into functional components, physical components, causal sequences etc. If the different models can be expressed in a common, constraint-based, formalism, then we can learn much from the interaction of these different models.
Reference: [118] <author> Ivan Sutherland. </author> <title> A Man Machine Graphical Communication System. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> January </month> <year> 1963. </year>
Reference-contexts: This survey will seek, by examples, to explain the current success of constraint technology, and, by showing its benefits, to add to that success. In 1963 Sutherland introduced the Sketchpad system <ref> [118] </ref>, a constraint language for graphical interaction. Other early constraint programming languages were Fikes' Ref-Arf [44], Lauriere's Alice [78], Sussmann's CONSTRAINTS [116] and Borning's ThingLab [10].
Reference: [119] <author> Touraivane. </author> <title> Constraint programming and industrial applications. </title> <editor> In U. Montanari and F. Rossi, editors, </editor> <booktitle> Proc. Principles and Practise of Constraints Programming, CP'95, </booktitle> <pages> pages 640-642. </pages> <publisher> Springer Verlag, </publisher> <year> 1995. </year>
Reference: [120] <author> J. D. Ullman. </author> <booktitle> Principles of Database and Knowledge-Base Systems, </booktitle> <volume> volume 2. </volume> <publisher> Computer Science Press, </publisher> <year> 1989. </year> <month> 32 </month>
Reference-contexts: In the database world, many advantages are perceived for object databases over relational databases. However relational databases have much more developed facilities for maintaining integrity constraints <ref> [120] </ref>. When managing integrity constraints in object databases, the difficulty is that an update to one object may violate constraints on another object. Consequently integrity checking must be applied to the result of a whole transaction which may involve many objects.
Reference: [121] <author> P. Van Hentenryck. </author> <title> Scheduling and Packing in the Constraint Language cc(FD), </title> <note> chapter 5. In Zweben and Fox [134], </note> <year> 1994. </year>
Reference-contexts: For example the program for Digital Signal Processing in cc (FD) <ref> [121] </ref> shows excellent results in actual applications and comprises just four pages of code. There is nothing new about high-level programs being short. <p> For this reason in many applications (eg. <ref> [121, 59] </ref>) it proves useful to introduce extra variables for aggregates: (eg T = T 1 + T 2 and S = S1 + S2), and to add redundant constraints on the aggregate variables (eg T = S + 1).
Reference: [122] <author> P. Van Hentenryck. </author> <title> Constraint solving for combinatorial search problems: A tutorial. </title> <booktitle> In Montanari and Rossi [95], </booktitle> <pages> pages 564-587. </pages>
Reference-contexts: When all the remaining alternatives for a given choice have been tried unsuccessfully, the search engine backtracks to the previous choice. An excellent tutorial by Pascal Van Hentenryck describing how to augment the search with different kinds of constraint propagation is <ref> [122] </ref>. Early practical applications of constraint programming used built-in constraint propagation algorithms which approximated arc-consistency. Examples, implemented in CHIP [32], included scheduling tasks on a construction project [34], sequencing of cars on an assembly line [35] and optimal cutting of raw materials to satisfy customer orders [33]. <p> The specialised constraints cumulative and SCHEDULE introduced above are low-level implementations of consistency constraints on sets of tasks and resources. It has been pointed out in [17] and <ref> [122] </ref> that such redundant constraints can be used to achieve the same effect as facet-inducing cuts in mixed integer programming. On the other hand there are simple applications where local propagation has a behaviour which is extremely hard to achieve in the mixed integer programming framework [114, 82].
Reference: [123] <author> P. Van Hentenryck, D. McAllester, and D. Kapur. </author> <title> Solving polynomial systems using a branch and prune approach. </title> <note> SIAM Journal on Numerical Analysis, 1995. to appear. </note>
Reference-contexts: No less important are the graphical facilities which support mixed initiative programming. Some surprising successes have been achieved by the simple combination of constraint propagation and search: for example constraint propagation techniques have recently enabled interval reasoning to achieve some spectacular results <ref> [123] </ref>. The exciting prospect about such results is that they are in no sense cut off, nor do they exclude the other features of constraints programming.
Reference: [124] <author> P. Van Hentenryck, V. Saraswat, and Y. Deville. </author> <title> Design, implementation, and evaluation of the constraint language cc(FD). </title> <editor> In A. Podelski, editor, </editor> <booktitle> Constraint Programming: Basics and Trends, </booktitle> <pages> pages 293-316. </pages> <publisher> Springer, </publisher> <year> 1994. </year>
Reference-contexts: Three of the most influential constraint programming languages were embedded in Prolog (Prolog III [23], CLP (R) [70] and CHIP [32]). Whilst all three system are still developing further ([119, 73, 111]), there are many new constraint programming systems emerging (eg <ref> [22, 38, 63, 124, 4] </ref>). From a theoretical point of view the extension of logic programming to Constraint Logic Programming (CLP) has been very fruitful: for example ALPS [85] a form of logic programming with guards was an extremely influential language, becoming the forerunner of the Concurrent Constraints paradigm [107]. <p> Such a language Constraint Handling Rules has been used for supporting terminological reasoning [52]. Indeed the Concurrent Constraints framework [107] supports just this requirement for cleanly implementing well-behaved constraints! A concurrent constraints language which has been used for tackling combinatorial problems is cc (FD) <ref> [124] </ref>. We will encounter cc (FD) again in the next section. 4.4 Redundant Constraints Local consistency is cheap to enforce, but weak. Often it is possible to achieve more powerful propagation by adding redundant constraints.
Reference: [125] <author> Pascal Van Hentenryck. </author> <title> Constraint Satisfaction in Logic Programming. Logic Programming Series. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1989. </year>
Reference-contexts: The second consequence is that programs can be quickly modified when the application changes. Constraint programming code is genuinely reuseable [72]. 4.2 Backtrack Search under Constraints Backtrack search augmented by constraint propagation is a basic technique for tackling combinatorial problems <ref> [96, 125] </ref>. Each choice made by the search engine, imposes new constraints whose consequences are extracted by the propagation engine. The information yielded by propagation is then used to focus the remainder of the search.
Reference: [126] <author> M. Wallace. </author> <title> Constraints as a tool for distributed scheduling. </title> <editor> In H. Richards, editor, </editor> <booktitle> Proc. International Conference on Improving Manufacturing Performance in the Distributed Enterprise: Advanced Systems and Tools, </booktitle> <address> Edinburgh, </address> <year> 1995. </year>
Reference-contexts: A comparative study of some of these algorithms is in [2]. Such constraints have made constraint programming competitive with the best specialised algorithms available on these applications, with the added advantage that the constraint programming can easily be extended to handle side-constraints equally efficiently <ref> [16, 126] </ref>. To support the implementation of such specialised constraint behaviours some generic techniques have been developed. Such a language Constraint Handling Rules has been used for supporting terminological reasoning [52].
Reference: [127] <author> Mark Wallace. </author> <title> Applying constraints for scheduling. </title> <editor> In B. Mayoh, E. Tyugu, and J.Penjaam, editors, </editor> <booktitle> Constraint Programming: Proceedings 1993 NATO ASI Parnu, Estonia, NATO Advanced Science Institute Series, </booktitle> <pages> pages 161-180. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: For resource constraints, in which several tasks share a resource, it is very powerful to add redundant constraints on the sum of the durations of the tasks <ref> [127, 17] </ref>. The specialised constraints cumulative and SCHEDULE introduced above are low-level implementations of consistency constraints on sets of tasks and resources. It has been pointed out in [17] and [122] that such redundant constraints can be used to achieve the same effect as facet-inducing cuts in mixed integer programming.
Reference: [128] <author> M.G. Wallace. </author> <title> Compiling integrity checking into update procedures. </title> <booktitle> In Proc. IJCAI, </booktitle> <address> Sydney, </address> <year> 1991. </year>
Reference-contexts: This violates the requirement that the admissible behaviours of an object are defined by its interface alone: an atomic behaviour is not the result of sending of a message to a single object but is instead a whole transaction <ref> [128] </ref>. Constraint programming, however, has a very well-developed notion of a constrained object. The simplest constrained object is a variable: its possible values are given by the constraints upon it. A variable is, of course, a very 9 different kind of object from those found in object databases.
Reference: [129] <editor> M.G. Wallace, editor. </editor> <booktitle> Proc. Conf. on Practical Applications of Constraints Technology, </booktitle> <address> Paris, </address> <year> 1995. </year>
Reference-contexts: This flexibility is becoming crucial with the increasing demand for faster time to market, and for greater flexibility in product lines. For example traditional product development methods for reprographic machines (photocopiers, printers, faxes machines etc.) involve dozens, if not hundreds, of mechanical, electrical, software and systems engineers <ref> [129] </ref>. One final horizon on the application of constraint programming to control systems: instead of proving properties of a FSA compiled from the constraints, it becomes possible to prove more and more properties from the constraints themselves. <p> For example constraint programming was used to address the timetabling problems of Banque Bruxelles Lambert <ref> [129, 37] </ref>.
Reference: [130] <author> D. L. Waltz. </author> <title> Generating semantic descriptions from drawings of scenes with shadows. </title> <editor> In P. H. Winston, editor, </editor> <booktitle> The Psychology of Computer Vision. </booktitle> <publisher> McGraw Hill, </publisher> <year> 1975. </year>
Reference-contexts: Constraint propagation was used in 1972 for scene labelling applications <ref> [130] </ref>, and has produced a long line of local consistency algorithms [94, 84, 49, 60, 93, 31]. The topic of search has been at the heart of AI since GPS [97].
Reference: [131] <author> M. Yokoo. </author> <title> Weak-commitment search for solving constraint satisfaction problems. </title> <booktitle> In Proc. 12th National Conference on Artificial Intelligence, </booktitle> <pages> pages 313-318, </pages> <year> 1994. </year>
Reference-contexts: Repair-based search techniques, by contrast, have a "current" complete, though often infeasible, solution as a starting point. Weaknesses in the current solution are repaired, either by a problem-specific move opera 21 tion, as in hill-climbing and simulated annealing, or by labelling, as in conflict minimisation [91] or weak-commitment <ref> [131] </ref>. A move operation takes a complete labelling of the variables and modifies it, yielding another complete labelling. The move is designed so that if the original labelling satisfied certain constraints, then so will the resulting labelling. <p> In conflict minimisation the repair labels only one variable [91]. In weak commitment relabelling continues until there is no way to change a variable so as to make it consistent with the other relabelled variables <ref> [131] </ref>. Repair based on label operators has proven very effective on a range of problems. These techniques are now being proven on practical applications.
Reference: [132] <author> M. Yokoo. </author> <title> Asynchronous weak-commitment search for solving distributed constraint satisfaction problems. </title> <booktitle> In Montanari and Rossi [95], </booktitle> <pages> pages 88-102. </pages>
Reference-contexts: Repair based on label operators has proven very effective on a range of problems. These techniques are now being proven on practical applications. Conflict minimisation has been incorporated into the scheduler used for the Hubble telescope [71], and weak commitment is being applied on a network path assignment application <ref> [132] </ref>. 5 Conclusion This paper has skimmed the surface of a range of practical applications of constraint programming.
Reference: [133] <author> P.-A. Yvars and H. Roussou. SARTRE: </author> <title> A computer-aided design tool for robotised production lines. In ILOG [69]. ILOG SA, </title> <type> 12, </type> <address> Avenue Raspail, BP 7, 94251 Gentilly Cedex, France. </address> <month> 33 </month>
Reference-contexts: Not only does this require the application designer to make some rather arbitrary judgements, but also it becomes hard to maintain in the light of ever-changing priorities. Lagrangian relaxation is adopted in many practical applications for example <ref> [133, 65] </ref>.
Reference: [134] <editor> M. Zweben and M.S. Fox, editors. </editor> <title> Intelligent Scheduling. </title> <publisher> Morgan Kauf--mann, </publisher> <year> 1994. </year> <month> 34 </month>
Reference-contexts: The technology has matured to the point where it is possible to isolate the essential features and offer them as libraries or embedded cleanly in general purpose host programming languages. For example isolating constraints as libraries has made possible the development of sophisticated constraint-based scheduling systems, see <ref> [134] </ref>. More generally there are commercially available libraries supporting constraint handling [68, 24]. On the other hand constraints fit hand in glove with declarative host programming languages. Three of the most influential constraint programming languages were embedded in Prolog (Prolog III [23], CLP (R) [70] and CHIP [32]).
References-found: 134

