URL: http://www.tc.cornell.edu/UserDoc/Software/PTools/pablo/docs/SDDF.ps
Refering-URL: http://www.tc.cornell.edu/UserDoc/Software/PTools/pablo/docs/
Root-URL: http://www.tc.cornell.edu
Title: The Pablo Self-Defining Data Format  
Author: Ruth A. Aydt 
Note: Copyright c 1992-1996 The University of Illinois Board of Trustees. All Rights Reserved. Pablo is a registered trademark of the Board of Trustees of the University of Illinois. Supported in part by National Science Foundation grants NSF CCR87-06653 and NSF CDA87-22836 (Tapestry), DARPA contracts DABT63-91-K-0004, DABT63-93-C-0040, DABT63-94-C-0049 (SIO), and F30602-96-C-0161, NASA contracts NAG-1-613 (ICLASS), USRA 5555-22, and NGT-51023, and a collaborative research agreement with the Intel  
Date: March 17, 1992 Last Revised September 26, 1996  
Web: http://www-pablo.cs.uiuc.edu  
Address: Urbana, Illinois 61801  
Affiliation: Pablo Research Group Department of Computer Science University of Illinois  Supercomputer Systems Division.  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> NCSA. </author> <note> NCSA HDF, Version 2.0. </note> <institution> University of Illinois at Urbana-Champaign, National Center for Supercomputing Applications, </institution> <month> Feb. </month> <year> 1989. </year>
Reference-contexts: To summarize: the format for performance trace event files must be compact, portable, general, and extensible. These requirements could not be addressed satisfactorily by adopting yet another fixed record format, so we investigated possible alternatives. 1 Previous forays by other researchers into self-defining data files such as HDF <ref> [1] </ref> and netCDF [3] have been very successful, and it seemed a similar approach might be well suited to the needs of the Pablo system. <p> "Processor (s) Receiving Message" int "destinationPE"[]; // "Size" "Message length in bytes" int "messageLength"; -;; "context switch" - double "timestamp"; int "processor"; char "processName"[]; -;; "context switch" - 100.150000, 2, [8] - "file i/o" - -;; "message send" - 101.100000, 0, [4] - 3, 7 "message send" - 102.150000, 7, <ref> [1] </ref> - -, 1012 -;; "context switch" - 108.000000, 4, [4] - "idle" - -;; 5 1 #include "AsciiPipeWriter.h" 2 #include "Attributes.h" 3 #include "OutputFileStreamPipe.h" 4 #include "RecordDossier.h" 5 #include "StructureDescriptor.h" 6 #include "InitializeStatic.C" 7 8 main () 9 - 10 Attributes attributes; 11 StructureDescriptor *structureP; 12 FieldDescriptor *fieldP; 13 14 <p> ); 240 contextSwitchRecord-&gt;setValue ( "processor", 2 ); 241 contextSwitchRecord-&gt;setCString ( "procedure", "printf" ); 242 pipeWriter-&gt;putData ( *contextSwitchRecord ); 243 245 246 /** Procedure Call Summary Data Packet **/ 247 dimSizes [0] = 30; 248 data_file-&gt;setDimSizes ( dimSizes ); 249 data_file-&gt;setCellString ( "/mnt/data/testdata-1" ); 250 dimSizes [0] = 3; 251 dimSizes <ref> [1] </ref> = 20; 252 procedures-&gt;setDimSizes ( dimSizes ); 253 procedures-&gt;setCellString ( "compare ()", 0 ); 254 procedures-&gt;setCellString ( "swap ()", 1 ); 255 procedures-&gt;setCellString ( "error ()", 2 ); 256 dimSizes [0] = 3; 257 dimSizes [1] = 4; 258 count_of_calls-&gt;setDimSizes ( dimSizes ); 259 count_of_calls-&gt;setCellValue ( 15, 0, 0 ); <p> dimSizes ); 249 data_file-&gt;setCellString ( "/mnt/data/testdata-1" ); 250 dimSizes [0] = 3; 251 dimSizes <ref> [1] </ref> = 20; 252 procedures-&gt;setDimSizes ( dimSizes ); 253 procedures-&gt;setCellString ( "compare ()", 0 ); 254 procedures-&gt;setCellString ( "swap ()", 1 ); 255 procedures-&gt;setCellString ( "error ()", 2 ); 256 dimSizes [0] = 3; 257 dimSizes [1] = 4; 258 count_of_calls-&gt;setDimSizes ( dimSizes ); 259 count_of_calls-&gt;setCellValue ( 15, 0, 0 ); 260 count_of_calls-&gt;setCellValue ( 10, 0, 1 ); 261 count_of_calls-&gt;setCellValue ( 2, 0, 2 ); 262 count_of_calls-&gt;setCellValue ( 20, 0, 3 ); 263 count_of_calls-&gt;setCellValue ( 10, 1, 0 ); 264 count_of_calls-&gt;setCellValue ( 7, 1, 1 ); 265 <p> file"[]; char "procedures"[][]; // "Dimension 0" "Procedure" // "Dimension 1" "Processor" // "Cell Value" "Count" int "count of calls"[][]; -;; /* * "Information" "End of Record Descriptors" */ ;; "context switch" - 100.150000, 2, [4] - - -;; "message send" - 0, [4] - 3, 7 "message send" - 7, <ref> [1] </ref> - -, 1012, S, 102.150000 -;; "context switch" - 108.000000, 4, [6] - "printf" - -;; "message send" - 3, [7] - 1, 4, 6, -, 102, B, 109.000000 -;; "context switch" - 320.000000, 5, [5] - "scanf" - -;; "context switch" - 412.770000, 2, [6] - "printf" - -;;
Reference: [2] <author> Reed, D. A., Olson, R. D., Aydt, R. A., Madhyastha, T. M., Birkett, T., Jensen, D. W., Nazief, B. A. A., and Totty, B. K. </author> <title> Scalable Performance Environments for Parallel Systems. </title> <booktitle> In Proceedings of the Sixth Distributed Memory Computing Conference (1991), </booktitle> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: and in-depth coverage of the format itself, an explanation of the C ++ interface library, and sample files and code demonstrating the use of SDDF. 1.1 Motivation for the Development of SDDF The Pablo group at the University of Illinois is developing an integrated performance data analysis environment called Pablo <ref> [2] </ref>. The goal of the Pablo system is to provide tools for the collection and analysis of performance data across both SIMD and MIMD distributed memory parallel systems. The data capture component of the environment produces files containing performance trace event records for the system being studied. <p> For Values containing a single character string (CHARACTER type Arrays with dimension one), either the Value class string manipulation methods discussed in the previous section or the Array setCellString method may be used. 1 int strLength = 30; 2 int dimSizes <ref> [2] </ref> = - 3, 20 -; 3 4 Array *oneString = new Array ( CHARACTER, 1 ); 5 oneString-&gt;setDimSizes ( &strLength ); 6 oneString-&gt;setCellString ( "Here is my character string." ); 7 8 Array *moreStrings = new Array ( CHARACTER, 2 ); 9 moreStrings-&gt;setDimSizes ( dimSizes ); 10 moreStrings-&gt;setCellString ( "First <p> == INVALID ); 62 63 /** Class instance, pointers, and tag variable used to build SDDF packets ** 64 ** In this program no field has &gt; 2 dimensions; dimSizes set accordingly **/ 65 Attributes attributes; 66 StructureDescriptor *structureP; 67 FieldDescriptor *fieldP; 68 int tag = 1; 69 int dimSizes <ref> [2] </ref>; 70 71 /** Stream Attribute **/ 72 attributes.insert ( "Creation Date", "Feb. 1, 1992" ); 73 attributes.insert ( "Machine", "Intel iPSC/860" ); 74 pipeWriter-&gt;putAttributes ( attributes ); 75 76 /* Message Send structure */ 77 attributes.clearEntries (); 78 attributes.insert ( "Event", "Message sent to one or more processors" ); 79
Reference: [3] <author> Rew, R. K. </author> <note> netCDF User's Guide, Version 1.0. </note> <institution> Unidata Program Center, University Corporation for Atmospheric Research, </institution> <month> Apr. </month> <year> 1989. </year>
Reference-contexts: These requirements could not be addressed satisfactorily by adopting yet another fixed record format, so we investigated possible alternatives. 1 Previous forays by other researchers into self-defining data files such as HDF [1] and netCDF <ref> [3] </ref> have been very successful, and it seemed a similar approach might be well suited to the needs of the Pablo system. The scientific and graphical data sets targeted by HDF and netCDF usually consist of a small number of large records, often containing arrays of floating point data. <p> A given index should not exceed the valid range for the dimension it is specifying as set in the 20 most recent call to setDimSizes. Figure 16 shows an example of the setDimSizes and setCellValue methods. 1 int dimSizes <ref> [3] </ref> = - 2, 1, 3 -; 2 3 Array *threeD = new Array ( INTEGER, 3 ); 4 threeD-&gt;setDimSizes ( dimSizes ); 5 threeD-&gt;setCellValue ( 10, 0, 0, 0 ); 6 threeD-&gt;setCellValue ( 20, 0, 0, 1 ); 7 threeD-&gt;setCellValue ( 30, 0, 0, 2 ); 8 threeD-&gt;setCellValue ( 40,
Reference: [4] <author> The Pablo Research Group. </author> <title> A Description of the Classes and Methods of the Pablo SDDF Interface Library. </title> <institution> University of Illinois at Urbana-Champaign, Department of Computer Science, </institution> <month> May </month> <year> 1993. </year> <month> 43 </month>
Reference-contexts: // "Source" "Processor Sending Message" int "sourcePE"; // "Destination" "Processor (s) Receiving Message" int "destinationPE"[]; // "Size" "Message length in bytes" int "messageLength"; -;; "context switch" - double "timestamp"; int "processor"; char "processName"[]; -;; "context switch" - 100.150000, 2, [8] - "file i/o" - -;; "message send" - 101.100000, 0, <ref> [4] </ref> - 3, 7 "message send" - 102.150000, 7, [1] - -, 1012 -;; "context switch" - 108.000000, 4, [4] - "idle" - -;; 5 1 #include "AsciiPipeWriter.h" 2 #include "Attributes.h" 3 #include "OutputFileStreamPipe.h" 4 #include "RecordDossier.h" 5 #include "StructureDescriptor.h" 6 #include "InitializeStatic.C" 7 8 main () 9 - 10 Attributes <p> in bytes" int "messageLength"; -;; "context switch" - double "timestamp"; int "processor"; char "processName"[]; -;; "context switch" - 100.150000, 2, [8] - "file i/o" - -;; "message send" - 101.100000, 0, <ref> [4] </ref> - 3, 7 "message send" - 102.150000, 7, [1] - -, 1012 -;; "context switch" - 108.000000, 4, [4] - "idle" - -;; 5 1 #include "AsciiPipeWriter.h" 2 #include "Attributes.h" 3 #include "OutputFileStreamPipe.h" 4 #include "RecordDossier.h" 5 #include "StructureDescriptor.h" 6 #include "InitializeStatic.C" 7 8 main () 9 - 10 Attributes attributes; 11 StructureDescriptor *structureP; 12 FieldDescriptor *fieldP; 13 14 /** Open file **/ 15 OutputFileStreamPipe *outFile = new OutputFileStreamPipe <p> First, for each dimension of the array, the number of elements in that dimension is given. Following that, braces surround the cell data values, listed in row-major order and separated by commas. Character strings are enclosed in double quotes. "message send" - 0, <ref> [4] </ref> - 1, 3, 5, 7 -, 13 that of the Record Descriptor packet in Figure 7; the body of this Record Data packet is inter-preted based on the record layout described in that Record Descriptor. The value of the integer field fromPE is 0. <p> Classes used to interact with SDDF files are presented first, followed by those used to save and manipulate the information conveyed by the individual SDDF packets. Complete documentation of the classes and methods can be found in the accompanying document <ref> [4] </ref>. 8 4.1 InputFileStreamPipe and OutputFileStreamPipe The InputFileStreamPipe and OutputFileStreamPipe classes are used to open files for input and output. They provide interfaces to standard Unix files that are compatible with the SDDF PipeReader and PipeWriter classes we will see later. <p> // "Units" "msec" double "timestamp"; int "processor"; char "procedure"[]; -;; "procedure call summary" - char "data file"[]; char "procedures"[][]; // "Dimension 0" "Procedure" // "Dimension 1" "Processor" // "Cell Value" "Count" int "count of calls"[][]; -;; /* * "Information" "End of Record Descriptors" */ ;; "context switch" - 100.150000, 2, <ref> [4] </ref> - - -;; "message send" - 0, [4] - 3, 7 "message send" - 7, [1] - -, 1012, S, 102.150000 -;; "context switch" - 108.000000, 4, [6] - "printf" - -;; "message send" - 3, [7] - 1, 4, 6, -, 102, B, 109.000000 -;; "context switch" - 320.000000, <p> "procedure"[]; -;; "procedure call summary" - char "data file"[]; char "procedures"[][]; // "Dimension 0" "Procedure" // "Dimension 1" "Processor" // "Cell Value" "Count" int "count of calls"[][]; -;; /* * "Information" "End of Record Descriptors" */ ;; "context switch" - 100.150000, 2, <ref> [4] </ref> - - -;; "message send" - 0, [4] - 3, 7 "message send" - 7, [1] - -, 1012, S, 102.150000 -;; "context switch" - 108.000000, 4, [6] - "printf" - -;; "message send" - 3, [7] - 1, 4, 6, -, 102, B, 109.000000 -;; "context switch" - 320.000000, 5, [5] - "scanf" - -;; "context switch"
References-found: 4

