URL: ftp://ftp.cs.uu.nl/pub/RUU/CS/techreps/CS-1996/1996-12.ps.gz
Refering-URL: http://www.cs.ruu.nl/docs/research/publication/TechList1.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: E-mail: jacques@cs.ruu.nl  
Title: Scheduling interval orders with release dates and deadlines  
Author: Jacques Verriet 
Address: P.O. Box 80.089, 3508 TB Utrecht, The Netherlands.  
Affiliation: Department of Computer Science, Utrecht University,  
Abstract: We study the problem of scheduling unit-length tasks with release dates and deadlines subject to precedence constraints and unit communication delays. Two polynomial-time algorithms are defined: one constructs schedules for graphs with uniform release dates, the other for graphs with arbitrary release dates. They have a special structure: unlike most scheduling algorithms, they do not consider individual tasks, but pairs of tasks. It is proved that the algorithms find minimum-lateness schedules for interval orders on an arbitrary number of processors.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H.H. Ali and H. El-Rewini. </author> <title> The time complexity of scheduling interval orders with communication is polynomial. </title> <journal> Parallel Processing Letters, </journal> <volume> 3(1) </volume> <pages> 53-58, </pages> <year> 1993. </year>
Reference-contexts: In real computer architectures, a large delay occurs between the execution of dependent tasks on different processors. If these communication delays are taken into account, finding a schedule of minimum length is computationally intractable, even under tree precedence constraints [9]. For interval orders, however, Ali and El-Rewini <ref> [1, 2] </ref> defined a polynomial-time algorithm that takes communication delays into account and finds a minimum-length schedule. In this report we consider the problem of scheduling unit length tasks subject to precedence constraints, communication delays and individual release dates and deadlines.
Reference: [2] <author> H.H. Ali and H. El-Rewini. </author> <title> An optimal algorithm for scheduling interval ordered tasks with communication on N processors. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 51(2) </volume> <pages> 301-307, </pages> <month> October </month> <year> 1995. </year>
Reference-contexts: In real computer architectures, a large delay occurs between the execution of dependent tasks on different processors. If these communication delays are taken into account, finding a schedule of minimum length is computationally intractable, even under tree precedence constraints [9]. For interval orders, however, Ali and El-Rewini <ref> [1, 2] </ref> defined a polynomial-time algorithm that takes communication delays into account and finds a minimum-length schedule. In this report we consider the problem of scheduling unit length tasks subject to precedence constraints, communication delays and individual release dates and deadlines. <p> On one hand, this is a generalisation of scheduling precedence graphs with release dates and deadlines [6, 7]. On the other, scheduling with a uniform deadline subject to communication delays <ref> [2, 3, 9] </ref> is a special case of this problem. The problem has been considered by Verriet [12].
Reference: [3] <author> P. Chretienne and C. Picouleau. </author> <title> Scheduling with communication delays: a survey. </title> <editor> In P. Chretienne, E.G. Coffman, Jr., J.K. Lenstra and Z. Liu, editors, </editor> <booktitle> Scheduling Theory and its Applications, </booktitle> <pages> pages 65-90. </pages> <publisher> John Wiley & Sons, </publisher> <year> 1995. </year>
Reference-contexts: On one hand, this is a generalisation of scheduling precedence graphs with release dates and deadlines [6, 7]. On the other, scheduling with a uniform deadline subject to communication delays <ref> [2, 3, 9] </ref> is a special case of this problem. The problem has been considered by Verriet [12].
Reference: [4] <author> D. Coppersmith and S. Winograd. </author> <title> Matrix multiplication via algorithmic progressions. </title> <booktitle> In Proceedings of the 19th Annual Symposium on the Theory of Computation, </booktitle> <pages> pages 1-6, </pages> <year> 1987. </year>
Reference-contexts: Computing the modified deadlines of the individual tasks clearly takes O (n 2 ) time. The calculation of a deadline of a pair of tasks takes linear time for each pair, so O (n 3 ) time for all pairs. Coppersmith and Winograd <ref> [4] </ref> showed that computing the transitive closure of a directed acyclic graph takes O (n 2:376 ) time. Therefore the modified deadlines are computed in O (n 3 ) time. To define the list scheduling algorithm, a notion of priority is required.
Reference: [5] <author> D. Dolev and M.K. Warmuth. </author> <title> Profile scheduling of opposing forests and level orders. </title> <journal> SIAM Journal of Algebraic and Discrete Methods, </journal> <volume> 6(4) </volume> <pages> 665-687, </pages> <month> October </month> <year> 1985. </year>
Reference-contexts: As a result, the class of interval orders is not a subclass, nor a superclass of the outforests or the inforests. It is, however, a superclass of the level orders which were considered by Dolev and Warmuth <ref> [5] </ref>. 3 4 Scheduling with deadlines In this section an algorithm for scheduling with deadlines on an arbitrary number of processors is defined.
Reference: [6] <author> M.R. Garey and D.S. Johnson. </author> <title> Scheduling tasks with nonuniform deadlines on two processors. </title> <journal> Journal of the ACM, </journal> <volume> 23(6) </volume> <pages> 461-467, </pages> <month> July </month> <year> 1976. </year>
Reference-contexts: In this report we consider the problem of scheduling unit length tasks subject to precedence constraints, communication delays and individual release dates and deadlines. On one hand, this is a generalisation of scheduling precedence graphs with release dates and deadlines <ref> [6, 7] </ref>. On the other, scheduling with a uniform deadline subject to communication delays [2, 3, 9] is a special case of this problem. The problem has been considered by Verriet [12]. His algorithms have the same structure as those of Garey and Johnson [6, 7] for scheduling without communication delays: <p> graphs with release dates and deadlines <ref> [6, 7] </ref>. On the other, scheduling with a uniform deadline subject to communication delays [2, 3, 9] is a special case of this problem. The problem has been considered by Verriet [12]. His algorithms have the same structure as those of Garey and Johnson [6, 7] for scheduling without communication delays: first the individual deadlines are modified, and second the tasks are scheduled by a list scheduling algorithm applied to the set of tasks ordered by non-decreasing modified deadlines. The precise deadline modifications of Verriet [12] and Garey and Johnson [6, 7] of a task <p> of Garey and Johnson <ref> [6, 7] </ref> for scheduling without communication delays: first the individual deadlines are modified, and second the tasks are scheduled by a list scheduling algorithm applied to the set of tasks ordered by non-decreasing modified deadlines. The precise deadline modifications of Verriet [12] and Garey and Johnson [6, 7] of a task u depend on the subgraph of successors of u, but not on the predecessors of u. For the case of two processors without communication delays [6, 7], this turns out to be sufficient: the algorithms find minimum-lateness schedules. <p> The precise deadline modifications of Verriet [12] and Garey and Johnson <ref> [6, 7] </ref> of a task u depend on the subgraph of successors of u, but not on the predecessors of u. For the case of two processors without communication delays [6, 7], this turns out to be sufficient: the algorithms find minimum-lateness schedules. In case of two processors with communication delays, Verriet was only able to solve the problem for graphs satisfying the least urgent parent property. <p> This algorithm is similar to the one presented by Garey and Johnson <ref> [6] </ref> for scheduling with deadlines on two processors without communication delays and the one defined by Verriet [12] for scheduling subject to unit communication delays. It consists of two steps. First the deadlines are modified, such that they are consistent with the precedence constraints.
Reference: [7] <author> M.R. Garey and D.S. Johnson. </author> <title> Two-processor scheduling with start-times and deadlines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 6(3) </volume> <pages> 416-426, </pages> <month> September </month> <year> 1977. </year> <month> 20 </month>
Reference-contexts: In this report we consider the problem of scheduling unit length tasks subject to precedence constraints, communication delays and individual release dates and deadlines. On one hand, this is a generalisation of scheduling precedence graphs with release dates and deadlines <ref> [6, 7] </ref>. On the other, scheduling with a uniform deadline subject to communication delays [2, 3, 9] is a special case of this problem. The problem has been considered by Verriet [12]. His algorithms have the same structure as those of Garey and Johnson [6, 7] for scheduling without communication delays: <p> graphs with release dates and deadlines <ref> [6, 7] </ref>. On the other, scheduling with a uniform deadline subject to communication delays [2, 3, 9] is a special case of this problem. The problem has been considered by Verriet [12]. His algorithms have the same structure as those of Garey and Johnson [6, 7] for scheduling without communication delays: first the individual deadlines are modified, and second the tasks are scheduled by a list scheduling algorithm applied to the set of tasks ordered by non-decreasing modified deadlines. The precise deadline modifications of Verriet [12] and Garey and Johnson [6, 7] of a task <p> of Garey and Johnson <ref> [6, 7] </ref> for scheduling without communication delays: first the individual deadlines are modified, and second the tasks are scheduled by a list scheduling algorithm applied to the set of tasks ordered by non-decreasing modified deadlines. The precise deadline modifications of Verriet [12] and Garey and Johnson [6, 7] of a task u depend on the subgraph of successors of u, but not on the predecessors of u. For the case of two processors without communication delays [6, 7], this turns out to be sufficient: the algorithms find minimum-lateness schedules. <p> The precise deadline modifications of Verriet [12] and Garey and Johnson <ref> [6, 7] </ref> of a task u depend on the subgraph of successors of u, but not on the predecessors of u. For the case of two processors without communication delays [6, 7], this turns out to be sufficient: the algorithms find minimum-lateness schedules. In case of two processors with communication delays, Verriet was only able to solve the problem for graphs satisfying the least urgent parent property.
Reference: [8] <author> T.C. Hu. </author> <title> Parallel sequencing and assembly line problems. </title> <journal> Operations Research, </journal> <volume> 9(6) </volume> <pages> 841-848, </pages> <year> 1961. </year>
Reference-contexts: The problem remains NP-complete if all task lengths are equal and the number of processors is arbitrary [11]. Only for special classes of precedence relations there are polynomial-time algorithms that find minimum-length schedules <ref> [8, 10] </ref>. In real computer architectures, a large delay occurs between the execution of dependent tasks on different processors. If these communication delays are taken into account, finding a schedule of minimum length is computationally intractable, even under tree precedence constraints [9].
Reference: [9] <author> J.K. Lenstra, M. Veldhorst and B. Veltman. </author> <title> The complexity of scheduling trees with communication delays. </title> <journal> Journal of Algorithms, </journal> <volume> 20(1) </volume> <pages> 157-173, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: In real computer architectures, a large delay occurs between the execution of dependent tasks on different processors. If these communication delays are taken into account, finding a schedule of minimum length is computationally intractable, even under tree precedence constraints <ref> [9] </ref>. For interval orders, however, Ali and El-Rewini [1, 2] defined a polynomial-time algorithm that takes communication delays into account and finds a minimum-length schedule. In this report we consider the problem of scheduling unit length tasks subject to precedence constraints, communication delays and individual release dates and deadlines. <p> On one hand, this is a generalisation of scheduling precedence graphs with release dates and deadlines [6, 7]. On the other, scheduling with a uniform deadline subject to communication delays <ref> [2, 3, 9] </ref> is a special case of this problem. The problem has been considered by Verriet [12].
Reference: [10] <author> C. H. Papadimitriou and M. Yannakakis. </author> <title> Scheduling interval-ordered tasks. </title> <journal> SIAM Journal on Computing, </journal> <volume> 8(3) </volume> <pages> 405-409, </pages> <month> August </month> <year> 1979. </year>
Reference-contexts: The problem remains NP-complete if all task lengths are equal and the number of processors is arbitrary [11]. Only for special classes of precedence relations there are polynomial-time algorithms that find minimum-length schedules <ref> [8, 10] </ref>. In real computer architectures, a large delay occurs between the execution of dependent tasks on different processors. If these communication delays are taken into account, finding a schedule of minimum length is computationally intractable, even under tree precedence constraints [9]. <p> Papadimitriou and Yannakakis <ref> [10] </ref> defined these in the following way. <p> The two following results were proved by Papadimitriou and Yannakakis <ref> [10] </ref>. Lemma 3.1. Let (V; ) be a partial order. If the incomparability graph of (V; ) is a chordal graph, then for all u; v 2 V Succ (u) Succ (v) or Succ (v) Succ (u): Lemma 3.2.
Reference: [11] <author> J.D. Ullman. </author> <title> NP-complete scheduling problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 10 </volume> <pages> 384-393, </pages> <year> 1975. </year>
Reference-contexts: The problem remains NP-complete if all task lengths are equal and the number of processors is arbitrary <ref> [11] </ref>. Only for special classes of precedence relations there are polynomial-time algorithms that find minimum-length schedules [8, 10]. In real computer architectures, a large delay occurs between the execution of dependent tasks on different processors.
Reference: [12] <author> J. Verriet. </author> <title> Scheduling UET, UCT dags with release dates and deadlines. </title> <type> Technical Report UU-CS-1995-31, </type> <institution> Department of Computer Science, Utrecht University, </institution> <month> September </month> <year> 1995. </year> <month> 21 </month>
Reference-contexts: On one hand, this is a generalisation of scheduling precedence graphs with release dates and deadlines [6, 7]. On the other, scheduling with a uniform deadline subject to communication delays [2, 3, 9] is a special case of this problem. The problem has been considered by Verriet <ref> [12] </ref>. His algorithms have the same structure as those of Garey and Johnson [6, 7] for scheduling without communication delays: first the individual deadlines are modified, and second the tasks are scheduled by a list scheduling algorithm applied to the set of tasks ordered by non-decreasing modified deadlines. <p> The precise deadline modifications of Verriet <ref> [12] </ref> and Garey and Johnson [6, 7] of a task u depend on the subgraph of successors of u, but not on the predecessors of u. For the case of two processors without communication delays [6, 7], this turns out to be sufficient: the algorithms find minimum-lateness schedules. <p> This algorithm is similar to the one presented by Garey and Johnson [6] for scheduling with deadlines on two processors without communication delays and the one defined by Verriet <ref> [12] </ref> for scheduling subject to unit communication delays. It consists of two steps. First the deadlines are modified, such that they are consistent with the precedence constraints. The modified deadlines are used to assign a starting time to every task. The algorithm defined by Verriet [12] does not use all knowledge <p> the one defined by Verriet <ref> [12] </ref> for scheduling subject to unit communication delays. It consists of two steps. First the deadlines are modified, such that they are consistent with the precedence constraints. The modified deadlines are used to assign a starting time to every task. The algorithm defined by Verriet [12] does not use all knowledge of the deadlines and the structure of 0-optimal schedules: its deadline modification part only considers a task and its successors. Therefore a task with modified deadline d has at most one successor with modified deadline d + 1. <p> Like in the previous section we use shorthand notations: P (u; r; d) = P (u; u; r; d). The deadline modification algorithm has a loop structure similar to the deadline modification part of the algorithm by Verriet <ref> [12] </ref> for scheduling with non-uniform release dates. Let D = max u D (u) and R = max u R (u). <p> So an optimal schedule can be found in O (n 4 log n) time with bisection search. Concluding remarks The deadline modification parts of the algorithms defined by Verriet <ref> [12] </ref> only consider a task and its successors. The knowledge that at most one parent of a task can be scheduled immediately before this task is not used. As a result, these algorithms find optimal schedules for a small class of graphs. A solution for this problem presented by Verriet [12] <p> <ref> [12] </ref> only consider a task and its successors. The knowledge that at most one parent of a task can be scheduled immediately before this task is not used. As a result, these algorithms find optimal schedules for a small class of graphs. A solution for this problem presented by Verriet [12] considered a special class of precedence graphs: in these graphs, every task u has a parent, its least urgent parent, which has to be scheduled after every other parent of u. Another approach to this problem was taken in this report: every pair of tasks is assigned a deadline. <p> The class of the outforests is an exception. However, for outforests the introduction of deadlines for pairs of tasks does not add any information. Besides, more efficient algorithms for scheduling outforests were defined by Verriet <ref> [12] </ref>.
References-found: 12

