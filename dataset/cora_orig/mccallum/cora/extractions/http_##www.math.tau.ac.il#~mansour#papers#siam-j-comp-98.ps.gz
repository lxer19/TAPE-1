URL: http://www.math.tau.ac.il/~mansour/papers/siam-j-comp-98.ps.gz
Refering-URL: 
Root-URL: 
Email: (baruch@blaze.cs.jhu.edu).  (cidon@ee.technion.ac.il).  (kutten@ie.technion.ac.il).  (mansour@math.tau.ac.il).  (peleg@wisdom.weizmann.ac.il).  
Title: Optimal Broadcast with Partial Knowledge  
Author: Baruch Awerbuch Israel Cidon Shay Kutten Yishay Mansour David Peleg 
Note: Supported by Air Force Contract TNDGAFOSR-86-0078, ARPA/Army contract DABT63-93-C-0038, ARO contract DAAL03-86-K-0171, NSF contract 9114440-CCR, DARPA contract N00014-J-92-1799, and a special grant from IBM.  Supported in part by an Allon Fellowship, by a Walter and Elise Haas Career Development Award and by a Bantrell Fellowship.  
Address: Baltimore, MD 21218,  32000, Israel  32000, Israel  69978, Israel  Rehovot 76100, Israel  
Affiliation: Johns Hopkins University,  and MIT Lab. for Computer Science  Faculty of Electrical Engineering, The Technion, Haifa  Department of Industrial Engineering, Technion, Haifa  Department of Computer Science, Tel Aviv University, Tel Aviv  Department of Applied Mathematics and Computer Science, The Weizmann Institute,  
Date: February 4, 1998  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [AAG87] <author> Yehuda Afek, Baruch Awerbuch, and Eli Gafni. </author> <title> Applying static network protocols to dynamic networks. </title> <booktitle> In 28 th Annual Symposium on Foundations of Computer Science, </booktitle> <month> October </month> <year> 1987. </year>
Reference: [ACG + 90] <author> Baruch Awerbuch, Israel Cidon, Inder Gopal, Marc Kaplan, and Shay Kutten. </author> <title> Distributed control for paris. </title> <booktitle> In Proc. 9th ACM Symp. on Principles of Distributed Computing, </booktitle> <year> 1990. </year> <note> To appear. </note>
Reference-contexts: The comparison of our protocols, previous results and the lower bounds is given in Figure 1. 1.5 Applications One application of our work is to the classical network problem of Topology Update. This task is at the heart of many practical network protocols <ref> [MRR80, BGJ + 85, ACG + 90] </ref>. The problem can be formulated as follows. Initially, each processor is aware of the status of its adjacent links, i.e., whether each link is up or down, but is unaware of the status of other links.
Reference: [ACK90] <author> Baruch Awerbuch, Israel Cidon, and Shay Kutten. </author> <title> Optimal maintenance of replicated information. </title> <booktitle> In Proc. 31st IEEE Symp. on Foundations of Computer Science. Comp. Soc. of the IEEE, IEEE, </booktitle> <year> 1990. </year>
Reference-contexts: A weaker version of the problem is based on making the rather strong "neighbor knowledge" assumption, namely, assuming that each processor correctly knows the inputs of all its neighbors, in addition to its own. This assumption is justified in <ref> [ACK90] </ref>, where it is shown that neighbor-knowledge comes for free in context of database and topology update protocols. <p> Thus, one would like to improve on this algorithm with respect to communication complexity, aiming towards reducing this complexity to be close to the total discrepancy , while maintaining near-optimal time complexity. The Incremental Update strategy proposed in <ref> [ACK90] </ref> poses an alternative approach. It can be applied only under the strong assumption of "neighbor knowledge", where each node is assumed to "know" the value of the database at its neighbor. <p> Note that in 3 Algorithm Communication Time Assumptions Full broadcast (folklore) nm n + m Incr. Update <ref> [ACK90] </ref> n + log m n + log m neighbor knowledge Our algorithm log m + n log n * n + log n * + minfm; log mg Our lower bound n + nffi max log (m=ffi max ) n + ffi max log (m=ffi max ) all cases, we <p> The purpose of the protocol is to supply each processor with this global link status information. The topology update algorithm of <ref> [ACK90] </ref> is based on the Incremental Update strategy. The possibility of recurring network partitions and re-connections significantly complicates implementation of this strategy. Nevertheless, the resulting broadcast procedure is efficient 4 Reference Amortized Commun. Quiescence Time Full broadcast ([AAG87]) V E V + E Incr. Update [ACK90] V log E V 2 <p> The topology update algorithm of <ref> [ACK90] </ref> is based on the Incremental Update strategy. The possibility of recurring network partitions and re-connections significantly complicates implementation of this strategy. Nevertheless, the resulting broadcast procedure is efficient 4 Reference Amortized Commun. Quiescence Time Full broadcast ([AAG87]) V E V + E Incr. Update [ACK90] V log E V 2 log E Our upper bound V log E E + V log V Lower bound V log E E in terms of communication (although not in time), and leads to essentially communication-optimal topology update protocols [ACK90]. A consequence of [ACK90] that is most significant for <p> Update <ref> [ACK90] </ref> V log E V 2 log E Our upper bound V log E E + V log V Lower bound V log E E in terms of communication (although not in time), and leads to essentially communication-optimal topology update protocols [ACK90]. A consequence of [ACK90] that is most significant for our purposes is the observation that it is possible to relate the complexities of the problem of Broadcasting with Partial Knowledge to those of Topology Update, effectively reducing the former problem to the latter. <p> Update <ref> [ACK90] </ref> V log E V 2 log E Our upper bound V log E E + V log V Lower bound V log E E in terms of communication (although not in time), and leads to essentially communication-optimal topology update protocols [ACK90]. A consequence of [ACK90] that is most significant for our purposes is the observation that it is possible to relate the complexities of the problem of Broadcasting with Partial Knowledge to those of Topology Update, effectively reducing the former problem to the latter. <p> It is worth pointing out that our complexity results are presented in the bit complexity model, whereas the results in <ref> [ACK90] </ref> are presented in the message complexity model which charges only one complexity unit for a message of size O (log n) bits. Our algorithm may also be applicable for dealing with the issue of self stabilization [Dij74, ASY90, KP90, APV91].
Reference: [ACK + 91] <author> Baruch Awerbuch, Israel Cidon, Shay Kutten, Yishay Mansour, and David Pe-leg. </author> <title> Broadcast with partial knowledge. </title> <booktitle> In Proc. 10th ACM Symp. on Principles of Distributed Computing, </booktitle> <year> 1991. </year>
Reference-contexts: This assumption is justified in [ACK90], where it is shown that neighbor-knowledge comes for free in context of database and topology update protocols. Even for this weaker problem, none of the previously known solutions are efficient both in communication and time. (Following the original version of the current paper <ref> [ACK + 91] </ref>, a deterministic algorithm was given for the weaker problem [AS91].
Reference: [APV91] <author> Baruch Awerbuch, Boaz Patt-Shamir, and George Varghese. </author> <title> Self-stabilization by local checking and correction. </title> <booktitle> In Proc. 32nd IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 268-277, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Our algorithm may also be applicable for dealing with the issue of self stabilization <ref> [Dij74, ASY90, KP90, APV91] </ref>. The self-stabilization approach is directed at dealing with intermittent faults that may change the memory contents of nodes, and cause inconsistency between the local states of nodes.
Reference: [AS91] <author> Baruch Awerbuch and Leonard J. Schulman. </author> <title> The maintenance of common data in a distributed system. </title> <booktitle> In Proc. 32nd IEEE Symp. on Foundations of Computer Science, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: Even for this weaker problem, none of the previously known solutions are efficient both in communication and time. (Following the original version of the current paper [ACK + 91], a deterministic algorithm was given for the weaker problem <ref> [AS91] </ref>. The complexity of that algorithm is larger than that of the randomized algorithm presented here by a polylogarithmic factor.) In order to quantify the possibility of exploiting local knowledge, we first introduce a new measure that captures the level of "information" of the knowledge held by each processor. <p> Note that there is almost no pipelining possible in this algorithm as described above, since a node can start transmitting only after it done with the receiving. Even in the simple case of a path network the protocol may require () time. As mentioned above, in the follow-up paper <ref> [AS91] </ref> the complexity of this strategy (for the "neighbor knowledge" variant of the problem) was improved significantly (although still not matching the lower bound), using a very sophisticated partitioning of the information, and a recursive implementation. 1.4 Our results In this paper, we provide an efficient randomized solution to the Broadcast
Reference: [ASY90] <author> Y. Afek, S.Kutten, and M. Yung. </author> <title> Memory-efficient self-stabilization on general networks. </title> <booktitle> In Proc. 4th Workshop on Distributed Algorithms, </booktitle> <address> Italy, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: Our algorithm may also be applicable for dealing with the issue of self stabilization <ref> [Dij74, ASY90, KP90, APV91] </ref>. The self-stabilization approach is directed at dealing with intermittent faults that may change the memory contents of nodes, and cause inconsistency between the local states of nodes.
Reference: [BGJ + 85] <author> A. E. Baratz, J. P. Gray, P. E. Green Jr., J. M. Jaffe, </author> <title> and D.P. Pozefski. Sna networks of small systems. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> SAC-3(3):416-426, </volume> <month> May </month> <year> 1985. </year>
Reference-contexts: The comparison of our protocols, previous results and the lower bounds is given in Figure 1. 1.5 Applications One application of our work is to the classical network problem of Topology Update. This task is at the heart of many practical network protocols <ref> [MRR80, BGJ + 85, ACG + 90] </ref>. The problem can be formulated as follows. Initially, each processor is aware of the status of its adjacent links, i.e., whether each link is up or down, but is unaware of the status of other links.
Reference: [BOGW88] <author> Michael Ben-Or, Shafi Goldwasser, and Avi Wigderson. </author> <title> Completeness theorem for non-cryptographic fault tolerant distributed computing. </title> <booktitle> In Proc. 20th ACM Symp. on Theory of Computing, </booktitle> <month> May </month> <year> 1988. </year>
Reference-contexts: Our upper bounds are derived using linear codes. Such codes were used before in constructing distributed algorithms for solving various problems. Metzner [Met84] uses Reed-Solomon and random codes to achieve efficient retransmission protocols in a complete network. Ben-Or, Goldwasser and Wigderson <ref> [BOGW88] </ref> use BCH codes to guarantee privacy in a malicious environment. Rabin [Rab89] uses codes to achieve a reliable fault-tolerant routing with a low overhead. Another closely related concept is that of source coding with side information [SW73].
Reference: [Dij74] <author> Edsger W. Dijkstra. </author> <title> Self stabilizing systems in spite of distributed control. </title> <journal> Commun. of the ACM, </journal> <volume> 17 </volume> <pages> 643-644, </pages> <year> 1974. </year>
Reference-contexts: Our algorithm may also be applicable for dealing with the issue of self stabilization <ref> [Dij74, ASY90, KP90, APV91] </ref>. The self-stabilization approach is directed at dealing with intermittent faults that may change the memory contents of nodes, and cause inconsistency between the local states of nodes. <p> Our algorithm may also be applicable for dealing with the issue of self stabilization [Dij74, ASY90, KP90, APV91]. The self-stabilization approach is directed at dealing with intermittent faults that may change the memory contents of nodes, and cause inconsistency between the local states of nodes. Dijkstra's example <ref> [Dij74] </ref> is that of a token passing system, where it is required that exactly one of the nodes holds a token at any given time.
Reference: [Eve79] <author> Shimon Even. </author> <title> Graph Algorithms. </title> <publisher> Computer Science Press, </publisher> <year> 1979. </year> <month> 17 </month>
Reference: [KP90] <author> Shmuel Katz and Kenneth Perry. </author> <title> Self-stabilizing extensions for message-passing systems. </title> <booktitle> In Proc. 10th ACM Symp. on Principles of Distributed Computing, </booktitle> <address> Quebec City, Canada, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: Our algorithm may also be applicable for dealing with the issue of self stabilization <ref> [Dij74, ASY90, KP90, APV91] </ref>. The self-stabilization approach is directed at dealing with intermittent faults that may change the memory contents of nodes, and cause inconsistency between the local states of nodes.
Reference: [Met84] <author> J. J. Metzner. </author> <title> An improved broadcast retransmission protocol. </title> <journal> IEEE Trans. on Communications, </journal> <volume> COM-32(6):679-683, </volume> <month> June </month> <year> 1984. </year>
Reference-contexts: Our upper bounds are derived using linear codes. Such codes were used before in constructing distributed algorithms for solving various problems. Metzner <ref> [Met84] </ref> uses Reed-Solomon and random codes to achieve efficient retransmission protocols in a complete network. Ben-Or, Goldwasser and Wigderson [BOGW88] use BCH codes to guarantee privacy in a malicious environment. Rabin [Rab89] uses codes to achieve a reliable fault-tolerant routing with a low overhead.
Reference: [Met91] <author> J.J. Metzner. </author> <title> Efficient replicated remote file comparison. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 40 </volume> <pages> 651-660, </pages> <year> 1991. </year>
Reference-contexts: It may be interesting to devise an algorithm that performs better in such a case. A technique for finding regions of disagreements appears in <ref> [Met91] </ref>. There may be other interesting special cases. One such case is when later (and more updated) versions of a document are longer (or shorter) than previous versions. Our algorithm can solve this case by "padding" the shorter vector, but this seems to lead to an inefficient solution. 16
Reference: [MRR80] <author> I. McQuillan, I. Richer, and E.C. Rosen. </author> <title> The new routing algorithm for the arpanet. </title> <journal> IEEE Trans. on Commun., </journal> <volume> COM-28, </volume> <month> May </month> <year> 1980. </year>
Reference-contexts: The comparison of our protocols, previous results and the lower bounds is given in Figure 1. 1.5 Applications One application of our work is to the classical network problem of Topology Update. This task is at the heart of many practical network protocols <ref> [MRR80, BGJ + 85, ACG + 90] </ref>. The problem can be formulated as follows. Initially, each processor is aware of the status of its adjacent links, i.e., whether each link is up or down, but is unaware of the status of other links.
Reference: [Rab89] <author> M. Rabin. </author> <title> efficient dispersal of information for security, load balancing, and fault tolerance. </title> <journal> J. of the ACM, </journal> <volume> 36(3) </volume> <pages> 335-348, </pages> <year> 1989. </year>
Reference-contexts: Such codes were used before in constructing distributed algorithms for solving various problems. Metzner [Met84] uses Reed-Solomon and random codes to achieve efficient retransmission protocols in a complete network. Ben-Or, Goldwasser and Wigderson [BOGW88] use BCH codes to guarantee privacy in a malicious environment. Rabin <ref> [Rab89] </ref> uses codes to achieve a reliable fault-tolerant routing with a low overhead. Another closely related concept is that of source coding with side information [SW73]. Using simple arguments from information theory and communication complexity theory, we are able to show that our upper bounds are almost tight.
Reference: [SG89] <author> John M. Spinelli and Robert G. Gallager. </author> <title> Broadcasting topology information in computer networks. </title> <journal> IEEE Trans. on Commun., </journal> <month> May </month> <year> 1989. </year> <note> to appear. </note>
Reference: [SW73] <author> D. Slepian and J.K. Wolf. </author> <title> Noiseless coding of correlated information sources. </title> <journal> IEEE Trans. on Information Theory., </journal> <volume> IT-19:471-480, </volume> <month> July </month> <year> 1973. </year>
Reference-contexts: Ben-Or, Goldwasser and Wigderson [BOGW88] use BCH codes to guarantee privacy in a malicious environment. Rabin [Rab89] uses codes to achieve a reliable fault-tolerant routing with a low overhead. Another closely related concept is that of source coding with side information <ref> [SW73] </ref>. Using simple arguments from information theory and communication complexity theory, we are able to show that our upper bounds are almost tight.
Reference: [Tiw84] <author> P. Tiwari. </author> <title> Lower bounds on communication complexity in distributed computer networks. </title> <booktitle> In 25 th Annual Symposium on Foundations of Computer Science, </booktitle> <address> Singer Island, Florida, </address> <pages> pages 109-117, </pages> <year> 1984. </year>
Reference-contexts: For the case of n = 2, Yao showed a lower bound of (m) for deterministic algorithms [Yao79], and Tiwari extended it to a line of processors and showed an (nm) lower bound <ref> [Tiw84] </ref>. This bound holds in particular when all the inputs are equal, in which case ffi av = 0.
Reference: [WC79] <author> M.N. Wegman and J.L. Carter. </author> <title> Universal classes of hash functions. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 18 </volume> <pages> 143-154, </pages> <year> 1979. </year>
Reference-contexts: In Section 3, we present our upper bound (algorithm BPart). Finally, lower bounds on the problem are 5 established in Section 4. 2 Preliminaries 2.1 Universal hash functions Universal hash functions have found many interesting applications since their introduction by Carter and Wegman <ref> [WC79] </ref>.
Reference: [Yao79] <author> Andy Yao. </author> <title> Some complexity questions related to distributed computing. </title> <booktitle> In Proceedings of the 11 th Annual ACM Symposium on Theory of Computing, Atlanta, Georgia, </booktitle> <pages> pages 209-213. </pages> <publisher> ACM SIGACT, ACM, </publisher> <month> April </month> <year> 1979. </year> <month> 18 </month>
Reference-contexts: This is a well studied problem in communication complexity theory, where lower bounds for the number of bit exchanges required of solving the equality problem are known. For the case of n = 2, Yao showed a lower bound of (m) for deterministic algorithms <ref> [Yao79] </ref>, and Tiwari extended it to a line of processors and showed an (nm) lower bound [Tiw84]. This bound holds in particular when all the inputs are equal, in which case ffi av = 0.
References-found: 21

