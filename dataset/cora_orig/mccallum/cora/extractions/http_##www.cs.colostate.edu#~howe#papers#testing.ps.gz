URL: http://www.cs.colostate.edu/~howe/papers/testing.ps.gz
Refering-URL: http://www.cs.colostate.edu/~howe/pubs.html
Root-URL: 
Title: Test Case Generation as an AI Planning Problem  Editor: Dorothy Setliff  
Author: ADELE E. HOWE ANNELIESE VON MAYRHAUSER RICHARD T. MRAZ 
Keyword: System testing, AI planning, blackbox testing  
Address: Fort Collins, CO 80523  USAFA/DFCS, 2354 Fairchild Hall, Suite 6K41,  CO 80840  
Affiliation: Computer Science Department, Colorado State University,  HQ  Academy,  
Note: 1-35 c Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  U.S. Air Force  
Email: howe@cs.colostate.edu  avm@cs.colostate.edu  mraz@cs.usafa.af.mil  
Date: Received May 1, 1991  
Abstract: While Artificial Intelligence techniques have been applied to a variety of software engineering applications, the area of automated software testing remains largely unexplored. Yet, test cases for certain types of systems (e.g., those with command language interfaces and transaction based systems) are similar to plans. We have exploited this similarity by constructing an automated test case generator with an AI planning system at its core. We compared the functionality and output of two systems, one based on Software Engineering techniques and the other on planning, for a real application: the StorageTek robot tape library command language. From this, we showed that AI planning is a viable technique for test case generation and that the two approaches are complementary in their capabilities. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Charles Anderson, Anneliese von Mayrhauser, and Rick Mraz. </author> <title> "On the Use of Neural Networks to Guide Software Testing Activities", Procs. </title> <booktitle> International Test Conference, </booktitle> <month> Oct. </month> <year> 1995, </year> <note> Wash-ington, DC (to appear). </note>
Reference: <author> John S. Anderson. </author> <title> Automating Requirements Engineering Using Artificial Intelligence Techniques. </title> <type> PhD thesis, </type> <institution> Dept. of Computer and Information Science, University of Oregon, </institution> <month> Dec. </month> <year> 1993. </year>
Reference: <author> Anthony Barrett, Keith Golden, Scott Penberthy, and Daniel Weld. </author> <title> UCPOP User's Manual. </title> <institution> Dept of Computer Science and Engineering, University of Washington, </institution> <address> Seattle, WA, </address> <month> October </month> <year> 1993. </year> <note> TR 93-09-06. </note>
Reference: <author> J. Bauer and A. </author> <title> Finger. "Test Plan Generation Using Formal Grammars", Procs. </title> <booktitle> Fourth International Conference on Software Engineering, </booktitle> <year> 1979, </year> <pages> pp. 425-432. </pages>
Reference-contexts: Automated test generation for systems with a command language interface represents each command using a grammar, generates commands from the grammar, and runs the list of commands as the test case (for early work see (Purdom, 1972), <ref> (Bauer and Finger, 1979) </ref>). When using grammars for test case generation, we also need to address command language semantics (Bazzichi and Spadafora, 1982), (Celentano et al., 1980), (Duncan and Hutchison, 1981), (Ince, 1987). (Duncan and Hutchison, 1981), (von Mayrhauser and Crawford-Hines, 1993) used attribute grammars for test case generation.
Reference: <author> Franco Bazzichi and Ippolito Spadafora. </author> <title> "An Automatic Generator for Compiler Testing," </title> <journal> IEEE Transactions on Software Engineering, 1982:8(4), pp.343-353. </journal>
Reference: <author> Ted J. Biggerstaff and Alan J. Perlis. </author> <title> Software Reusability: Volume I, Concepts and Models, </title> <publisher> ACM Press, Fronier Series, </publisher> <year> 1989. </year> <title> Grady Booch, Object Oriented Design with Applications, </title> <address> "Benjamin/Cummings", </address> <year> 1991. </year>
Reference: <author> A. Celentano and S. Crespi Reghizzi and P. Della Vigna and C. Ghezzi and G. Gramata and F. Savoretti. </author> <title> "Compiler Testing using a Sentence Generator," </title> <journal> Software-Practice and Experience, 1980:10, pp.987-918. </journal>
Reference-contexts: When using grammars for test case generation, we also need to address command language semantics (Bazzichi and Spadafora, 1982), <ref> (Celentano et al., 1980) </ref>, (Duncan and Hutchison, 1981), (Ince, 1987). (Duncan and Hutchison, 1981), (von Mayrhauser and Crawford-Hines, 1993) used attribute grammars for test case generation. The syntax and semantics of the command language were encoded as grammar productions. Test case generation is a single stage algorithm.
Reference: <author> John J. Chilenski and Philip H. Newcomb. </author> <title> "Formal Specification Tools for Test Coverage Analysis", Procs. </title> <booktitle> Ninth Knowledge-Based Software Engineering Conference, </booktitle> <month> September </month> <year> 1994, </year> <title> Mon-terey, </title> <publisher> CA, </publisher> <pages> pp. 59-68. </pages>
Reference: <author> Paul R. Cohen and Edward A. Feigenbaum. </author> <booktitle> Handbook of Artificial Intelligence, volume 3, chapter Planning and Problem Solving, </booktitle> <pages> pages 513-562. </pages> <publisher> William Kaufmann, Inc., </publisher> <address> Los Angeles, </address> <year> 1982. </year>
Reference: <author> A.G. Duncan and J.S. Hutchison, </author> <title> "Using Attributed Grammars to Test Designs and Implementations," </title> <booktitle> Proceedings of the Fifth International Conference on Software Engineering, </booktitle> <year> 1981, </year> <pages> pp. 170-177. </pages>
Reference-contexts: When using grammars for test case generation, we also need to address command language semantics (Bazzichi and Spadafora, 1982), (Celentano et al., 1980), <ref> (Duncan and Hutchison, 1981) </ref>, (Ince, 1987). (Duncan and Hutchison, 1981), (von Mayrhauser and Crawford-Hines, 1993) used attribute grammars for test case generation. The syntax and semantics of the command language were encoded as grammar productions. Test case generation is a single stage algorithm. <p> When using grammars for test case generation, we also need to address command language semantics (Bazzichi and Spadafora, 1982), (Celentano et al., 1980), <ref> (Duncan and Hutchison, 1981) </ref>, (Ince, 1987). (Duncan and Hutchison, 1981), (von Mayrhauser and Crawford-Hines, 1993) used attribute grammars for test case generation. The syntax and semantics of the command language were encoded as grammar productions. Test case generation is a single stage algorithm.
Reference: <author> Tsum S. Chow. </author> <title> "Testing Software Design Modeled by Finite State Machines," </title> <booktitle> Proceedings of the First COMPSAC, </booktitle> <year> 1977, </year> <pages> pp. 58-64. </pages>
Reference: <author> W. Deason, D. Brown, K.-H. Chang, and J. </author> <title> Cross. "Rule-Based Software Test Data Generator", </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(1), </volume> <month> March </month> <year> 1991, </year> <pages> pp. 108-117. </pages> <editor> 34 Stephen Fickas and John Anderson. </editor> <title> A proposed perspective shift: Viewing specification design as a planning problem. </title> <institution> Department of Computer and Information Science CIS-TR-88-15, University of Oregon, Eugene, </institution> <address> OR, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: Definition of content of rules at each level is the result of a specialized application domain analysis. The resulting domain model forms the basis for test case generation. So far, few approaches to software testing use artificial intelligence methods. <ref> (Deason et al., 1991) </ref> uses a rule-based system to test programs. The rules reflect white box criteria and use information about control flow and data flow of the code.
Reference: <author> Stephen Fickas and B. Robert Helm. </author> <title> "Knowledge Representation and Reasoning in the Design of Composite Systems", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-18(6), </volume> <month> June </month> <year> 1992, </year> <pages> pp. 470-482. </pages>
Reference: <author> Tom Figliulo, Anneliese von Mayrhauser, and Richard Karcich. </author> <title> "Experiences with Automated System Testing and SLEUTH", Procs. </title> <note> IEEE Aerospace Applications Conference 1996, February 1996 (to appear). </note>
Reference: <author> S. Fujiwara, G. von Bochman, F. Khendek, M. Amalou, and A. Ghedamsi. </author> <title> "Test Selection Based on Finite State Models", </title> <journal> IEEE Transactions on Software Engineering SE-17, </journal> <volume> no. </volume> <month> 10(June </month> <year> 1991), </year> <pages> pp. 591-603. </pages>
Reference-contexts: Transaction based systems and state transition aspects of some other systems have been tested using state machine representations (Chow, 1977), <ref> (Fujiwara et al., 1991) </ref>. 3 State machine representations work well for generating sensible sequences of command types, but become cumbersome for generation of both sequencing as well as command details of systems with large and intricate command languages.
Reference: <author> J. B. Goodenough and S. L. Gerhart. </author> <title> "Toward a Theory of Test Data Selection", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-1(2), </volume> <month> June </month> <year> 1975, </year> <pages> pp. 156-173. </pages>
Reference-contexts: Thus, value selection is based on making choices relating to the representation of the command language or state machine. Alternatively, one can argue that choices should be made depending on the functional characteristics of the system. Functional testing according to (Myers, 1979) uses heuristic criteria related to the requirements. <ref> (Goodenough and Gerhart, 1975) </ref> suggest partitioning the input domain into equivalence classes and selecting test data from each class. <p> Partition Testing Partition testing <ref> (Goodenough and Gerhart, 1975) </ref>, (Hamlet and Taylor, 1990) includes all testing criteria that define equivalence classes of input values with the proviso that a set of tests is adequate if it contains tests with values from each of the equivalence classes.
Reference: <author> Dick Hamlet and Ross Taylor. </author> <title> "Partition Testing Does not inspire Confidence", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-16(12), </volume> <month> Dec. </month> <year> 1990, </year> <pages> pp. 1402-1411. </pages>
Reference: <author> James W. Hooper and Rowena O. Chester. </author> <title> Software Reuse: Guidelines and Methods, </title> <publisher> Plenum Publishers, </publisher> <year> 1991. </year>
Reference: <author> Karen Huff and Victor Lesser. </author> <title> A plan-based intelligent assistant that supports the software development process. </title> <booktitle> In ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <month> Nov. </month> <year> 1988. </year>
Reference: <author> Karen Huff. </author> <title> Software adaptation. </title> <booktitle> In Working Notes of AAAI-92 Spring Symposium on Computational Considerations in Supporting Incremental Modification and Reuse, </booktitle> <pages> pages 63-66, </pages> <institution> Stanford University, </institution> <month> March </month> <year> 1992. </year>
Reference: <author> D. C. Ince. </author> <title> "The Automatic Generation of Test Data", </title> <journal> Computer Journal, </journal> <volume> vol.30(1), </volume> <year> 1987, </year> <pages> pp. 63-69. </pages>
Reference-contexts: When using grammars for test case generation, we also need to address command language semantics (Bazzichi and Spadafora, 1982), (Celentano et al., 1980), (Duncan and Hutchison, 1981), <ref> (Ince, 1987) </ref>. (Duncan and Hutchison, 1981), (von Mayrhauser and Crawford-Hines, 1993) used attribute grammars for test case generation. The syntax and semantics of the command language were encoded as grammar productions. Test case generation is a single stage algorithm.
Reference: <author> P. Maurer. </author> <title> "Generating Test Data with Enhanced Context-Free Grammars", </title> <journal> IEEE Software, </journal> <month> July </month> <year> 1990, </year> <pages> pp. 50-55. </pages>
Reference-contexts: The choices are due to ambiguities as well as the purposeful inclusion of options in the representation. Choice is directed by incorporating selection rules of various types. (Purdom, 1972) integrates "coverage rules" for grammar productions to reduce choice, while Mau-rer <ref> (Maurer, 1990) </ref> uses probabilistic context free grammars that are enhanced by selection rules including permutations, combinations, dynamic probabilities, and Poisson distribution. Thus, value selection is based on making choices relating to the representation of the command language or state machine. <p> They may want to do this in order or according to some random permutation of the values. In Sleuth, value selection is currently random, but could easily be enhanced to include capabilities such as Maurer's probabilistic grammars <ref> (Maurer, 1990) </ref>. Even so, setting the number of commands to be generated high enough will guarantee that all parameter values will be generated. While this will not be a minimal set (in terms of number of commands generated), it is sufficient.
Reference: <author> Glenford J. Myers. </author> <title> The Art of Software Testing, Wiley Series in Business Data Processing. </title> <publisher> John Wiley and Sons, </publisher> <year> 1979. </year>
Reference: <author> Thomas J. Ostrand and Marc J. Balcer. </author> <title> "The Category-Partition Method for Specifying and Generating Functional Tests", </title> <journal> Communications of the ACM, </journal> <volume> 31(6), </volume> <month> June </month> <year> 1988, </year> <pages> pp. 676-686. </pages>
Reference: <author> J.S. Penberthy and D. Weld. "UCPOP: </author> <title> A sound, complete, partial order planner for ADL", </title> <booktitle> In Proceedings Third International Conference on Principles of Knowledge Representation and Reasoning, </booktitle> <month> October </month> <year> 1992, </year> <pages> pp. 103-114. </pages>
Reference-contexts: The Planning System for the Prototype We used the UCPOP 2.0 planner as the basis for our prototype test case generator (Barrett et al., 1993), <ref> (Penberthy and Weld, 1992) </ref>. The planner was selected because it is relatively easy to use and the software is easily obtained.
Reference: <author> P. Purdom. </author> <title> "A Sentence Generator for Testing Parsers", </title> <journal> BIT, </journal> <volume> 12(3), </volume> <year> 1972, </year> <pages> pp. 366-375. </pages>
Reference-contexts: Automated test generation for systems with a command language interface represents each command using a grammar, generates commands from the grammar, and runs the list of commands as the test case (for early work see <ref> (Purdom, 1972) </ref>, (Bauer and Finger, 1979)). <p> Automatic generation, whether based on grammars or state machines, requires making choices during the traversal of the representations. The choices are due to ambiguities as well as the purposeful inclusion of options in the representation. Choice is directed by incorporating selection rules of various types. <ref> (Purdom, 1972) </ref> integrates "coverage rules" for grammar productions to reduce choice, while Mau-rer (Maurer, 1990) uses probabilistic context free grammars that are enhanced by selection rules including permutations, combinations, dynamic probabilities, and Poisson distribution.
Reference: <author> Debra J. Richardson, Owen O'Malley, and Cindy Tittle. </author> <title> "Approaches to Specification-Based Testing", Procs. </title> <booktitle> ACM Third Symposium on Software Testing, Analysis, and Verification (TAV3), </booktitle> <month> December </month> <year> 1993, </year> <pages> pp. 86-96. </pages>
Reference: <author> Robert S. Rist. </author> <title> Plan Identification and Re-use in Programs. </title> <booktitle> In Working Notes of AAAI-92 Spring Symposium on Computational Considerations in Supporting Incremental Modification and Reuse, </booktitle> <pages> pages 67-72, </pages> <institution> Stanford University, </institution> <month> March </month> <year> 1992. </year>
Reference: <author> Kenneth S. Rubin and Adele Goldberg. </author> <title> "Object Behavior Analysis," </title> <journal> Communications of the ACM, </journal> <volume> 35(9), </volume> <month> September </month> <year> 1992, </year> <pages> pp. 48-62. </pages>
Reference: <author> Raghavan Srinivasan and Adele E. Howe. </author> <title> Comparison of Methods for Improving Search Efficiency in a Partial-Order Planner. </title> <booktitle> In Proceedings of the 14th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1620-1626, </pages> <address> Montreal, Canada, </address> <month> August </month> <year> 1995. </year> <title> StorageTek, StorageTek 4400 Operator's Guide, Host Software Component (VM) Rel 1.2.0, </title> <address> Stor-ageTek, </address> <year> 1992. </year>
Reference: <author> Gerald A. Sussman. </author> <title> A computational model of skill acquisition. </title> <type> Technical Report Memo no. </type> <institution> AI-TR-297, MIT AI Lab, </institution> <year> 1973. </year>
Reference: <author> Markos Z. Tsoulakas, Joe W. Duran, and Simeon C. Ntafos. </author> <title> "On Some Reliability Estimation Problems in Random and Partition Testing", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 19(7), </volume> <month> July </month> <year> 1993, </year> <pages> pp. </pages> <month> 687-697. </month> <title> 35 Anneliese von Mayrhauser and Steward Crawford-Hines, "Automated Testing Support for a Robot Tape Library," </title> <booktitle> Proceedings of the Fourth International Software Reliability Engineering Conference, </booktitle> <month> November </month> <year> 1993, </year> <pages> pp. 6-14. </pages>
Reference: <author> Anneliese von Mayrhauser, Richard T. Mraz, and Jeff Walls. </author> <title> "Domain Based Regression Testing," </title> <booktitle> Proceedings of the International Conference on Software Maintenance, </booktitle> <month> Sept </month> <year> 1994, </year> <pages> p. 26-35. </pages>
Reference: <author> Anneliese von Mayrhauser, Richard Mraz, Jeff Walls, and Pete Ocken. </author> <title> "Domain Based Testing: Increasing Test Case Reuse," </title> <booktitle> Proc. of the International Conference on Computer Design, </booktitle> <month> October </month> <year> 1994, </year> <note> p. 484-491. </note> <author> Anneliese von Mayrhauser, Jeff Walls, and Richard Mraz, </author> <title> "Testing Applications Using Domain Based Testing and Sleuth," </title> <booktitle> Proceedings of the Fifth International Software Reliability Engineering Conference, </booktitle> <month> November </month> <year> 1994, </year> <pages> p. 206-215. </pages>
Reference: <author> Anneliese von Mayrhauser, Jeff Walls, and Richard Mraz. "Sleuth: </author> <title> A Domain Based Testing Tool," </title> <booktitle> Proc. of the International Test Conference, </booktitle> <month> October </month> <year> 1994, </year> <pages> p. 840-849. </pages>
Reference: <author> Elaine J. Weyuker and Bingchiang Jeng. </author> <title> "Analyzing Partition Testing Strategies", </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(7), </volume> <month> July </month> <year> 1991, </year> <pages> pp. 703-711. </pages>
Reference: <author> Steven J. Zeil and Christian Wild. </author> <title> "A Knowledge Base for Software Test Refinement", </title> <type> Technical Report TR-93-14, </type> <institution> Old Dominion University, </institution> <address> Norfolk, VA. </address>
References-found: 37

