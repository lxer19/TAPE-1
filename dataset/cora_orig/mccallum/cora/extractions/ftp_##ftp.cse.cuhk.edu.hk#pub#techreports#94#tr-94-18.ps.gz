URL: ftp://ftp.cse.cuhk.edu.hk/pub/techreports/94/tr-94-18.ps.gz
Refering-URL: ftp://ftp.cs.cuhk.hk/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fckchiu,jleeg@cs.cuhk.hk  
Title: Interval Linear Constraint Solving Using the Preconditioned Interval Gauss-Seidel Method  
Author: C.K. Chiu and J.H.M. Lee 
Address: Shatin, Hong Kong  
Affiliation: Department of Computer Science The Chinese University of Hong Kong  
Abstract: We propose the use of the preconditioned interval Gauss-Seidel method as the backbone of an efficient linear equality solver in a CLP(Interval) language. The method, as originally designed, works only on linear systems with square coefficient matrices. Even imposing such a restriction, a naive incorporation of the traditional preconditioning algorithm in a CLP language incurs a high worst-case time complexity of O(n 4 ), where n is the number of variables in the linear system. In this paper, we generalize the algorithm for general linear systems with m constraints and n variables, and give a novel incremental adaptation of preconditioning of O(n 2 (n + m)) complexity. The efficiency of the incremental preconditioned interval Gauss-Seidel method is demonstrated using large-scale linear systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Barrett, M. Berry, T. Chan, J. Demmel, J. Donato, J. Dongarra, V. Ei-jkhout, R. Pozo, C. Romine, and H. van der Vorst. </author> <title> Templates for the Solution of Linear Systems: Building Blocks for Iterative Methods. </title> <publisher> SIAM, </publisher> <year> 1993. </year>
Reference-contexts: The previously computed values can be used as soon as they are available. Assuming that variable updates are coordinated in a naive round-robin fashion, a sequential version of the interval Gauss-Seidel method is suggested to be <ref> [1] </ref> X i ((b I j=i1 X (a I I (k) j=n X (a I I (k1) ii ) X i : The superscript (k 1) of X I (k1) i indicates that the variable is obtained in the (k 1)-st iterating cycle.
Reference: [2] <author> F. Benhamou, D. McAllester, and P. Van Hentenryck. </author> <title> CLP(Intervals) revisited. </title> <booktitle> In Logic Programming: Proceedings of the 1994 International Symposium, </booktitle> <address> Ithaca, USA, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction and Related Work Interval narrowing [7] is deficient in handling general systems of constraints over real numbers <ref> [5, 2] </ref>. Chiu and Lee [6] suggest to separate linear equality constraint solving from inequality and non-linear constraint solving. They propose the implementation of a linear solver based on an interval version of Gaussian elimination using generalized interval arithmetic operators [10]. <p> We call this technique interval narrowing, which effects the development of such systems as BNR-Prolog [16], CLP (BNR) [3], Echidna [19], and ICL [11]. Chiu and Lee [6] improve interval linear constraint solving by using an interval version of Gaussian elimination with generalized interval arithmetic. Benhamou et al <ref> [2] </ref> replaces the usual interval reduction operator of previous CLP (Interval) languages by an operator based on the interval Newton method to speed up interval non-linear constraint solving. The paper is organized as follows. Section 2 defines notations and reviews the traditional preconditioned interval Gauss-Seidel method. <p> A number of questions remain to be investigated. On the theoretical side, it would be interesting to study the level of interval consistency attainable by the incremental preconditioned interval Gauss-Seidel method. We conjecture that our method should reach a consistency level falling between box consistency and hull consistency <ref> [2] </ref>. Concerning implementations, our CIAL prototypes have much to be desired. First, our implementation of CIAL 1.x is still rudimentary. Further optimizations, such as the techniques used for CLP (R), might be applicable to CIAL. Second, the current prototypes implement constraint solvers as independent modules separating from the Prolog engine.
Reference: [3] <editor> F. Benhamou and W.J. Older. </editor> <title> Applying interval arithmetic to real, integer and boolean constraints. </title> <note> (to appear) Journal of Logic Programming. </note>
Reference-contexts: They propose the implementation of a linear solver based on an interval version of Gaussian elimination using generalized interval arithmetic operators [10]. The solver is incorporated in a new interval constraint logic programming system CIAL, which compares favorably against other CLP (Interval) systems, such as CLP (BNR) <ref> [3] </ref> and Echidna [18]. Later experiments [5] show, however, that the generalized interval Gaussian elimination solver is deficient in solving large-scale linear systems, both in terms of accuracy and computational efficiency. <p> A constraint relaxation cycle is needed to coordinate the execution of the narrowing algorithms for a network of constraints. We call this technique interval narrowing, which effects the development of such systems as BNR-Prolog [16], CLP (BNR) <ref> [3] </ref>, Echidna [19], and ICL [11]. Chiu and Lee [6] improve interval linear constraint solving by using an interval version of Gaussian elimination with generalized interval arithmetic. <p> We abandon the bound type calculation since the type information is insignificant in most cases and its calculation is costly. We compare the CIAL 1.0 (Beta), CIAL 1.1, and CIAL 1.1a prototypes with BNR Prolog v3.1.0 [17], CLP (BNR) (or BNR Prolog v4.2.3) <ref> [3] </ref>, Echidna Version 0.947 beta [18], ICL [11], and CIAL (Alpha) 12 [6] over randomly generated systems of linear equations of the form: A ~ X = ~ b; where A = (a ij ); ~ X = (X i ); ~ b = (b i ) and X i 2
Reference: [4] <author> X. Chen and D. Wang. </author> <title> On the optimal properties of the Krawczyk-type interval operator. </title> <journal> International Journal of Computer Mathematics, </journal> <volume> 29(2-4):235-245, </volume> <year> 1989. </year>
Reference-contexts: Hansen [9] suggests an inverse mid-point matrix as preconditioner, which is shown to be optimal <ref> [4] </ref> in the sense that the preconditioned system gives the tightest bounds of the solutions of the original system. Let A denote the mid-point matrix of A I .
Reference: [5] <author> C.K. Chiu. </author> <title> Interval linear constraint solving in constraint logic programming. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, The Chinese University of Hong Kong, Shatin, Hong Kong, </institution> <year> 1994. </year>
Reference-contexts: 1 Introduction and Related Work Interval narrowing [7] is deficient in handling general systems of constraints over real numbers <ref> [5, 2] </ref>. Chiu and Lee [6] suggest to separate linear equality constraint solving from inequality and non-linear constraint solving. They propose the implementation of a linear solver based on an interval version of Gaussian elimination using generalized interval arithmetic operators [10]. <p> The solver is incorporated in a new interval constraint logic programming system CIAL, which compares favorably against other CLP (Interval) systems, such as CLP (BNR) [3] and Echidna [18]. Later experiments <ref> [5] </ref> show, however, that the generalized interval Gaussian elimination solver is deficient in solving large-scale linear systems, both in terms of accuracy and computational efficiency. <p> Current practice in the CIAL system is to transfer these constraints to another solver, which employs interval narrowing for constraint solving, for further scrutiny, in the hope that the solver may narrow some intervals or reveal inconsistency. Thus, computation results of CIAL are interpreted as conditional answers <ref> [20, 5] </ref>. Lemma 3.1 Assume that we have a linear system with m equalities of n variables. The incremental preconditioner update algorithm with inconsistency and redundancy detection has worst-case time complexity O (n 2 (n + m)).
Reference: [6] <author> C.K. Chiu and J.H.M. Lee. </author> <title> Towards practical interval constraint solving in logic programming. </title> <booktitle> In Logic Programming: Proceedings of the 1994 International Symposium, </booktitle> <address> Ithaca, USA, </address> <year> 1994. </year> <month> 14 </month>
Reference-contexts: 1 Introduction and Related Work Interval narrowing [7] is deficient in handling general systems of constraints over real numbers [5, 2]. Chiu and Lee <ref> [6] </ref> suggest to separate linear equality constraint solving from inequality and non-linear constraint solving. They propose the implementation of a linear solver based on an interval version of Gaussian elimination using generalized interval arithmetic operators [10]. <p> A constraint relaxation cycle is needed to coordinate the execution of the narrowing algorithms for a network of constraints. We call this technique interval narrowing, which effects the development of such systems as BNR-Prolog [16], CLP (BNR) [3], Echidna [19], and ICL [11]. Chiu and Lee <ref> [6] </ref> improve interval linear constraint solving by using an interval version of Gaussian elimination with generalized interval arithmetic. Benhamou et al [2] replaces the usual interval reduction operator of previous CLP (Interval) languages by an operator based on the interval Newton method to speed up interval non-linear constraint solving. <p> Readers may refer to <ref> [6] </ref> for details. 4 Benchmarks The proposed preconditioned interval Gauss-Seidel method has been incorporated into the CIAL system [6], replacing the previous solver which is based on interval Gaussian-elimination. The CIAL 1.0 (Beta) solver lacks incremental execution. <p> Readers may refer to <ref> [6] </ref> for details. 4 Benchmarks The proposed preconditioned interval Gauss-Seidel method has been incorporated into the CIAL system [6], replacing the previous solver which is based on interval Gaussian-elimination. The CIAL 1.0 (Beta) solver lacks incremental execution. Although the preconditioner is constructed incrementally, the preconditioned system (multiplying the preconditioner and the interval coefficient matrix) are re-computed at every derivation step. <p> We compare the CIAL 1.0 (Beta), CIAL 1.1, and CIAL 1.1a prototypes with BNR Prolog v3.1.0 [17], CLP (BNR) (or BNR Prolog v4.2.3) [3], Echidna Version 0.947 beta [18], ICL [11], and CIAL (Alpha) 12 <ref> [6] </ref> over randomly generated systems of linear equations of the form: A ~ X = ~ b; where A = (a ij ); ~ X = (X i ); ~ b = (b i ) and X i 2 [10000; 10000] for 1 i; j n: BNR Prolog runs on an
Reference: [7] <author> J.G. Cleary. </author> <title> Logical arithmetic. </title> <journal> Future Computing Systems, </journal> <volume> 2(2) </volume> <pages> 125-149, </pages> <year> 1987. </year>
Reference-contexts: 1 Introduction and Related Work Interval narrowing <ref> [7] </ref> is deficient in handling general systems of constraints over real numbers [5, 2]. Chiu and Lee [6] suggest to separate linear equality constraint solving from inequality and non-linear constraint solving. <p> In this paper, we present an incremental preconditioning algorithm of O (n 2 (n + m)) complexity for general linear systems with m constraints and n variables. A heuristic for detecting redundant and inconsistent constraints is also presented. Interval arithmetic is introduced by Moore [13]. Cleary <ref> [7] </ref> gives a relational version of interval arithmetic for use in Prolog. He describes distinct algorithms, one for each kind of convex constraint over intervals, that narrow intervals associated with a constraint by removing values that do not satisfy the constraint.
Reference: [8] <author> T.H. Cormen, C.E. Leiserson, and R.L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> The MIT Press, </publisher> <address> eighth edition, </address> <year> 1992. </year>
Reference-contexts: f1; : : : ; n 1g, which indicates the number of operations. 6 Extra constraints should have been moved to another solver in the phase of inconsistency and redundancy detection. 7 We do not consider such special divide-and-conquer square matrix multiplication algorithms as Strassen's algorithm (O (n 2:81 )) <ref> [8] </ref>. Those algorithms usually introduce multiple occurrences of variables and require the dimension of the matrix to be a power of 2.
Reference: [9] <author> E.R. Hansen. </author> <title> Interval arithmetic in matrix computations. </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 2 </volume> <pages> 308-320, </pages> <year> 1965. </year>
Reference-contexts: The interval Gauss-Seidel method is an iterative method for solving interval linear systems. Convergence of the method to the approximations of the hull of the solution set 1 is guaranteed, however, for only a certain class of linear systems. Preconditioning <ref> [9] </ref> is a process to transform a linear system into another equivalent system satisfying the convergence criteria. To incorporate the preconditioned interval Gauss-Seidel method into the constraint solver of a CLP language, we have to tackle two problems. <p> Instead of solving A I ~ X I = ~ b I , we deal with the following system: P A I ~ X I = P ~ b I : (1) We call P the preconditioner . Hansen <ref> [9] </ref> suggests an inverse mid-point matrix as preconditioner, which is shown to be optimal [4] in the sense that the preconditioned system gives the tightest bounds of the solutions of the original system. Let A denote the mid-point matrix of A I .
Reference: [10] <author> E.R. Hansen. </author> <title> A generalized interval arithmetic. </title> <booktitle> In Interval Mathematics, </booktitle> <pages> pages 7-18, </pages> <year> 1975. </year>
Reference-contexts: Chiu and Lee [6] suggest to separate linear equality constraint solving from inequality and non-linear constraint solving. They propose the implementation of a linear solver based on an interval version of Gaussian elimination using generalized interval arithmetic operators <ref> [10] </ref>. The solver is incorporated in a new interval constraint logic programming system CIAL, which compares favorably against other CLP (Interval) systems, such as CLP (BNR) [3] and Echidna [18].
Reference: [11] <author> J.H.M. Lee and T.W. Lee. </author> <title> A WAM-based abstract machine for interval constraint logic programming. </title> <booktitle> In Proceedings of the Sixth IEEE International Conference on Tools with Artificial Intelligence, </booktitle> <address> New Orleans, USA, </address> <year> 1994. </year>
Reference-contexts: A constraint relaxation cycle is needed to coordinate the execution of the narrowing algorithms for a network of constraints. We call this technique interval narrowing, which effects the development of such systems as BNR-Prolog [16], CLP (BNR) [3], Echidna [19], and ICL <ref> [11] </ref>. Chiu and Lee [6] improve interval linear constraint solving by using an interval version of Gaussian elimination with generalized interval arithmetic. <p> We compare the CIAL 1.0 (Beta), CIAL 1.1, and CIAL 1.1a prototypes with BNR Prolog v3.1.0 [17], CLP (BNR) (or BNR Prolog v4.2.3) [3], Echidna Version 0.947 beta [18], ICL <ref> [11] </ref>, and CIAL (Alpha) 12 [6] over randomly generated systems of linear equations of the form: A ~ X = ~ b; where A = (a ij ); ~ X = (X i ); ~ b = (b i ) and X i 2 [10000; 10000] for 1 i; j n: <p> Further optimizations, such as the techniques used for CLP (R), might be applicable to CIAL. Second, the current prototypes implement constraint solvers as independent modules separating from the Prolog engine. Communications between the solvers and the Prolog engine incur high overhead. The work of Lee and Lee <ref> [11] </ref> can be used as basis to integrate the interval constraint solving and the Prolog engine at the Warren Abstract Machine (WAM) level. We expect to improve the performance of CIAL 1.1 substantially in the near future.
Reference: [12] <author> S. Michaylov. </author> <title> Design and Implementation of Practical Constraint Logic Programming Systems. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, U.S.A, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: We call [IjUjPjZ] the IUPZ matrix . To construct the IUPZ matrix incrementally, we adapt a variant of the familiar incremental Gaussian elimination procedure used in CLP (R) <ref> [12] </ref>. Assume that we have a collection of r interval linear equalities of n variables with r &lt; n.
Reference: [13] <author> R.E. Moore. </author> <title> Interval Analysis. </title> <publisher> Prentice-Hall, </publisher> <year> 1966. </year>
Reference-contexts: In this paper, we present an incremental preconditioning algorithm of O (n 2 (n + m)) complexity for general linear systems with m constraints and n variables. A heuristic for detecting redundant and inconsistent constraints is also presented. Interval arithmetic is introduced by Moore <ref> [13] </ref>. Cleary [7] gives a relational version of interval arithmetic for use in Prolog. He describes distinct algorithms, one for each kind of convex constraint over intervals, that narrow intervals associated with a constraint by removing values that do not satisfy the constraint. <p> Thus O can be regarded as a matrix of point intervals. 8 O A I 0 2 B @ u 2 u r C A ((t 1 t 2 : : : t r ) A I using the subdistributivity 9 and associativity 10 <ref> [13] </ref> properties of interval arithmetic. Unfortunately, none of (4), (5), and (6) hold under floating-point (interval) arith metic since associativity and subdistributivity are no longer guaranteed. <p> Traditional non incremental preconditioning guarantees that ~x 1 I . Since P r A I K I and P r ~ b I P ~ b I , from the inclusion monotonicity of interval arithmetic <ref> [13] </ref>, we know that ~ x 0 I ~x 2 . It follows that ~x 1 I I Theorem 3.4 Assume that we have a linear system with m equalities of n variables. The incremental preconditioning algorithm has worst-case time complexity of O (n 2 (n + m)).
Reference: [14] <author> A. Neumaier. </author> <title> Overestimation in linear interval equations. </title> <journal> SIAM Journal on Numerical Analysis, </journal> <volume> 24(1) </volume> <pages> 207-214, </pages> <month> February </month> <year> 1987. </year>
Reference-contexts: The real A 1 is used as the preconditioner P in equation (1). Since preconditioning involves much interval multiplications, small errors will be introduced due to outward-rounding. A preconditioned system usually has slightly wider solutions than the original system and these additional pseudo-solutions are called overestimation <ref> [14] </ref>. Overestimation destroys the completeness of inconsistency detection in interval Gauss-Seidel method since an inconsistent system of constraints may become consistent after preconditioning. Readers may refer to [14, 15] for detailed analysis. 3 Incremental Execution Solvers in constraint logic programming languages must be amenable to efficient incremental execution. <p> A preconditioned system usually has slightly wider solutions than the original system and these additional pseudo-solutions are called overestimation [14]. Overestimation destroys the completeness of inconsistency detection in interval Gauss-Seidel method since an inconsistent system of constraints may become consistent after preconditioning. Readers may refer to <ref> [14, 15] </ref> for detailed analysis. 3 Incremental Execution Solvers in constraint logic programming languages must be amenable to efficient incremental execution. The preconditioned interval Gauss-Seidel method, as originally designed, however, operates in the batch mode: all constraints are collected before solving takes place.
Reference: [15] <author> A. Neumaier. </author> <title> Interval Methods for Systems of Equations. </title> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference-contexts: Later experiments [5] show, however, that the generalized interval Gaussian elimination solver is deficient in solving large-scale linear systems, both in terms of accuracy and computational efficiency. In this paper, we propose the use of the preconditioned interval Gauss-Seidel method <ref> [15] </ref> as the backbone of an efficient linear equality solver in a CLP (Interval) language. The interval Gauss-Seidel method is an iterative method for solving interval linear systems. <p> Such a system can be solved efficiently by using some iterative methods. Interval Gauss-Seidel method is one being widely-used in interval computation <ref> [15] </ref>. Let the i-th equation in A I ~ X I = ~ b I be n X (a I j ) = b I 2 where i 2 f1; : : : ; ng and we have initial bounds on all variables. <p> The following definitions and lemma state the convergence criterion of a linear system using the interval Gauss-Seidel method. Definition 2.1 <ref> [15] </ref> The hull of the solution set of a linear system is the set of tightest intervals that enclose the solution of the linear system. Definition 2.2 [15] The magnitude of an interval I I = [l; u] is defined as mag (I I ) = max (jlj; juj), while its <p> The following definitions and lemma state the convergence criterion of a linear system using the interval Gauss-Seidel method. Definition 2.1 <ref> [15] </ref> The hull of the solution set of a linear system is the set of tightest intervals that enclose the solution of the linear system. Definition 2.2 [15] The magnitude of an interval I I = [l; u] is defined as mag (I I ) = max (jlj; juj), while its mignitude is defined as mig (I I ) = min (jlj; juj), where jaj denotes the absolute value of a real number a. <p> An interval matrix A I = (a I ij ) is said to be strictly diagonal dominant if mig (a I n X mag (a I 2 We overload the P symbol to denote interval summation. 3 Lemma 2.3 <ref> [15] </ref> Interval Gauss-Seidel method is guaranteed to converge to the hull of the solution set 3 of a linear system if the coefficient matrix of the linear system is strictly diagonal dominant. 2.2 Preconditioning As stated in lemma 2.3, the interval Gauss-Seidel method always converges to the hull of the solution <p> A preconditioned system usually has slightly wider solutions than the original system and these additional pseudo-solutions are called overestimation [14]. Overestimation destroys the completeness of inconsistency detection in interval Gauss-Seidel method since an inconsistent system of constraints may become consistent after preconditioning. Readers may refer to <ref> [14, 15] </ref> for detailed analysis. 3 Incremental Execution Solvers in constraint logic programming languages must be amenable to efficient incremental execution. The preconditioned interval Gauss-Seidel method, as originally designed, however, operates in the batch mode: all constraints are collected before solving takes place.
Reference: [16] <author> W. Older and A. Vellino. </author> <title> Extending Prolog with constraint arithmetic on real intervals. </title> <booktitle> In Proceedings of the Canadian Conference on Computer & Electrical Engineering, </booktitle> <address> Ottawa, Canada, </address> <year> 1990. </year>
Reference-contexts: A constraint relaxation cycle is needed to coordinate the execution of the narrowing algorithms for a network of constraints. We call this technique interval narrowing, which effects the development of such systems as BNR-Prolog <ref> [16] </ref>, CLP (BNR) [3], Echidna [19], and ICL [11]. Chiu and Lee [6] improve interval linear constraint solving by using an interval version of Gaussian elimination with generalized interval arithmetic.
Reference: [17] <author> W. Older and A. Vellino. </author> <title> Constraint arithmetic on real intervals. </title> <editor> In A. Colmer-auer and F. Benhamou, editors, </editor> <booktitle> Constraint Logic Programming: Selected Research. </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: We abandon the bound type calculation since the type information is insignificant in most cases and its calculation is costly. We compare the CIAL 1.0 (Beta), CIAL 1.1, and CIAL 1.1a prototypes with BNR Prolog v3.1.0 <ref> [17] </ref>, CLP (BNR) (or BNR Prolog v4.2.3) [3], Echidna Version 0.947 beta [18], ICL [11], and CIAL (Alpha) 12 [6] over randomly generated systems of linear equations of the form: A ~ X = ~ b; where A = (a ij ); ~ X = (X i ); ~ b =
Reference: [18] <author> G. Sidebottom and W.S. Havens. </author> <title> Hierarchical arc consistency for disjoint real intervals in constraint logic programming. </title> <journal> Computational Intelligence, </journal> <volume> 8(4) </volume> <pages> 601-623, </pages> <year> 1992. </year>
Reference-contexts: The solver is incorporated in a new interval constraint logic programming system CIAL, which compares favorably against other CLP (Interval) systems, such as CLP (BNR) [3] and Echidna <ref> [18] </ref>. Later experiments [5] show, however, that the generalized interval Gaussian elimination solver is deficient in solving large-scale linear systems, both in terms of accuracy and computational efficiency. <p> We abandon the bound type calculation since the type information is insignificant in most cases and its calculation is costly. We compare the CIAL 1.0 (Beta), CIAL 1.1, and CIAL 1.1a prototypes with BNR Prolog v3.1.0 [17], CLP (BNR) (or BNR Prolog v4.2.3) [3], Echidna Version 0.947 beta <ref> [18] </ref>, ICL [11], and CIAL (Alpha) 12 [6] over randomly generated systems of linear equations of the form: A ~ X = ~ b; where A = (a ij ); ~ X = (X i ); ~ b = (b i ) and X i 2 [10000; 10000] for 1 i;
Reference: [19] <author> S. Sidebottom, W. Havens, and S. Kindersley. </author> <title> Echidna Constraint Reasoning System (Version 1): Programming Manual. </title> <institution> Expert Systems Laboratory, Simon Fraser University, British Columbia, </institution> <address> Canada, 2.0 edition, </address> <year> 1992. </year>
Reference-contexts: A constraint relaxation cycle is needed to coordinate the execution of the narrowing algorithms for a network of constraints. We call this technique interval narrowing, which effects the development of such systems as BNR-Prolog [16], CLP (BNR) [3], Echidna <ref> [19] </ref>, and ICL [11]. Chiu and Lee [6] improve interval linear constraint solving by using an interval version of Gaussian elimination with generalized interval arithmetic. <p> The precision of the answers are set to 10 decimal places for CLP (BNR), ICL, and all CIAL prototypes, 5 decimal places for BNR Prolog, and the highest precision (precision (30) <ref> [19] </ref>) for Echidna. None of the interval-narrowing-based systems can handle randomly generated systems with rank greater than or equal to six 13 . Next we compare the three CIAL 1.x prototypes over larger scale systems and incremental execution.
Reference: [20] <author> P. Vasey. </author> <title> Qualified answers and their application to transformation. </title> <booktitle> In Proceedings of the Third International Logic Programming Conference, </booktitle> <pages> pages 425-432, </pages> <year> 1986. </year>
Reference-contexts: Current practice in the CIAL system is to transfer these constraints to another solver, which employs interval narrowing for constraint solving, for further scrutiny, in the hope that the solver may narrow some intervals or reveal inconsistency. Thus, computation results of CIAL are interpreted as conditional answers <ref> [20, 5] </ref>. Lemma 3.1 Assume that we have a linear system with m equalities of n variables. The incremental preconditioner update algorithm with inconsistency and redundancy detection has worst-case time complexity O (n 2 (n + m)).
References-found: 20

