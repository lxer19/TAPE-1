URL: http://www.cs.cmu.edu/afs/cs/user/pstone/public/papers/no-universal-heuristics.ps.Z
Refering-URL: http://www.cs.cmu.edu/afs/cs/usr/pstone/mosaic/pstone-papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fpstone, veloso, blytheg@cs.cmu.edu  
Title: The Need for Different Domain-Independent Heuristics  
Author: Peter Stone and Manuela Veloso and Jim Blythe 
Address: Pittsburgh PA 15213-3890  
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract: prodigy's planning algorithm uses domain-independent search heuristics. In this paper, we support our belief that there is no single search heuristic that performs more efficiently than others for all problems or in all domains. The paper presents three different domain-independent search heuristics of increasing complexity. We run prodigy with these heuristics in a series of artificial domains (introduced in (Barrett & Weld 1994)) where in fact one of the heuristics performs more efficiently than the others. However, we introduce an additional simple domain where the apparently worst heuristic outperforms the other two. The results we obtained in our empirical experiments lead to the main conclusion of this paper: planning algorithms need to use different search heuristics in different domains. We conclude the paper by advocating the need to learn the correspondence between particular domain characteristics and specific search heuristics for planning efficiently in complex domains. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Barrett, A., and Weld, D. S. </author> <year> 1993. </year> <title> Characterizing subgoal interactions for planning. </title> <booktitle> In Proceedings of IJCAI-93, </booktitle> <pages> 1388-1393. </pages>
Reference: <author> Barrett, A., and Weld, D. S. </author> <year> 1994. </year> <title> Partial-order planning:Evaluating possible efficiency gains. </title> <booktitle> Artificial Intelligence 67(1). </booktitle>
Reference-contexts: In the next section we present prodigy's planning algorithm and three different domain-independent search heuristics of apparently increasing complexity. After this we show the empirical results we obtained by running prodigy with these different heuristics. We test them in a series of artificial domains (introduced in <ref> (Barrett & Weld 1994) </ref>) in which one of the heuristics performs more efficiently than the others. However, we introduce an additional simple domain, representative of a large class of domains, for which the apparently worst heuristic outperforms the other two. <p> a version of saba that prunes the search space when it is provably impossible to be deleting a solution from the space. 2 We use D 0 S 1 , D m S 1 , D 1 S 1fl , and D m S 2fl as presented in detail in <ref> (Barrett & Weld 1994) </ref> and in (Barrett & Weld tigate the relative performance of planners that reason about a partial order of plan steps and those that use a total order. <p> Here the operators look like: Operator preconds adds deletes A 1 A 2 A fl fI fl g fG fl g fI i j8ig [ fG i j8ig 5 D m S 2 from <ref> (Barrett & Weld 1994) </ref> is another such domain.
Reference: <author> Carbonell, J. G.; Knoblock, C. A.; and Minton, S. </author> <year> 1990. </year> <title> Prodigy: An integrated architecture for planning and learning. </title> <editor> In VanLehn, K., ed., </editor> <booktitle> Architectures for Intelligence. </booktitle> <address> Hillsdale, NJ: </address> <note> Erlbaum. Also Technical Report CMU-CS-89-189. </note>
Reference-contexts: Introduction prodigy is an integrated architecture for research in planning and learning <ref> (Carbonell, Knoblock, & Minton 1990) </ref>. The focus of the prodigy project has been on understanding how an AI planning system can acquire expertise by using different machine learning strategies. Like all planning systems, prodigy needs to be able to efficiently handle multiple interacting goals and different ways of achieving goals.
Reference: <author> Ginsberg, M. L., and Geddis, D. F. </author> <year> 1991. </year> <booktitle> Is there any need for domain-dependent control information? In Proceedings of the Ninth National Conference on Artificial Intelligence. </booktitle>
Reference: <author> Minton, S. </author> <year> 1993. </year> <title> Integrating heuristics for constraint satisfaction problems: A case study. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> 120-126. </pages>
References-found: 5

