URL: http://www.cs.purdue.edu/research/cse/publications/conf-journal/siam-minnesota.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/ttd/resume.html
Root-URL: http://www.cs.purdue.edu
Title: A MultiAgent Environment for MPSEs  
Author: T. Drashansky A. Joshi J. Rice E. Houstis S. Weerawarana 
Abstract: We present a paradigm for simulating complex systems which involve multiple physical phenomena and complicated geometries. The computational process uses cooperating agents to subdivide the physical object into components of simple geometric shapes modeled by a single problem solving environment (PSE). PSEs are viewed as agents which solve the PDE on each component independently. The interfaces between the components must have physical interface conditions satisfied; mediator agents use relaxation techniques for this. This approach is parallel and scalable; suitable for both parallel and distributed computing. SciAgents, which implements the method, is presented and used to solve an example problem.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. T. Drashansky, </author> <title> An Agent-Based Approach to Building Multidisciplinary Problem Solving Environments, </title> <type> PhD thesis, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <month> December </month> <year> 1996. </year>
Reference-contexts: Most physical systems and manufactured artifacts can be modeled as a mathematical network whose nodes represent the physical components in a system or artifact. Each node has a mathematical model of the physics of the component it represents and a solver agent <ref> [1] </ref> for its analysis. Individual components are chosen so that each node corresponds to a simple mathematical problem defined on a regular geometry for which a standard solver exists. In addition there are interface nodes that model the collaboration in the global model. <p> In addition there are interface nodes that model the collaboration in the global model. To solve the global problem, these local solvers collaborate with each other to relax (i.e., resolve) the interface conditions. An interface controller or mediator agent <ref> [1] </ref> fl This work was supported in part by NSF awards ASC 9404859 and CCR 9202536, AFOSR award F49620-92-J-0069 and ARPA ARO award DAAH04-94-G-0010 y Dept. Comp. Sci., Purdue University, W. Lafayette, IN 47907, email: fttd,jrr,enh,sawg@cs.purdue.edu z Dept. Comp. Engr. & Comp. <p> The wrapper, once written, enables the reuse of this PSE as a solver agent in different MPSEs, thus amortizing the cost of wrapping. 4 SciAgents and Example SciAgents is an implementation of the MPSE approach and architecture, see <ref> [1] </ref> for a complete description of its implementation. We first discuss how solving composite PDE models fits into our MPSE approach using solvers and mediator agents. <p> The main issue is what mediation schemes can be applied in this case | in other words, how to obtain a global solution out of the local solutions produced by the single-domain solvers. To do this, we use the interface relaxation technique <ref> [1, 4] </ref>. Important mathematical questions of the convergence of the method, the behavior of the solution in special cases, etc., are addressed in [5]. Typically, for second order PDEs, there are two physical or mathematical conditions involving values and normal derivatives of the solutions on the neighboring subdomains.
Reference: [2] <author> E. Gallopoulos, E. Houstis, and J. Rice, </author> <title> Computer as Thinker/Doer: Problem-Solving Environments for Computational Science, </title> <journal> IEEE Computational Sci. Engr., </journal> <volume> 1 (1994), </volume> <pages> pp. 11-23. </pages>
Reference: [3] <author> E. N. Houstis and J. R. Rice, </author> <title> Parallel ELLPACK: A Development and Problem Solving Environment for High Performance Computing Machines, in Programming Environments for High Level Scientific Problem Solving, </title> <publisher> North Holland, </publisher> <year> 1992, </year> <pages> pp. 229-243. </pages>
Reference-contexts: When the model of a phenomenon is simple enough, then the resulting PDE problem consists of a single domain with a single PDE defined on it (together with appropriate boundary conditions and initial conditions). There exist general solvers (PSEs) for this class of problems like //ELLPACK <ref> [3, 7] </ref>. Multiple-domain PDE problems, however, often have complicated geometry and are highly non-homogeneous, and usually require variable grid density and different discretization methods in different subdomains.
Reference: [4] <author> S. McFaddin and J. Rice, </author> <title> Collaborating PDE Solvers, </title> <journal> Appl. Num. Math, </journal> <volume> 10 (1992), </volume> <pages> pp. 279-295. </pages>
Reference-contexts: A simple heat flow problem with six components and three distinct physical processes of heat flow. collects boundary values from neighboring subdomains and adjusts boundary values to better satisfy the interface conditions. Some of the theoretical issues of this methodology are addressed in <ref> [5, 6, 4] </ref> and the results obtained so far verify the feasibility and potential of network-based PDE solving. All this collaboration can be built on standard network services without involving the user, without moving software to arbitrary platforms, and without revealing source codes. <p> The main issue is what mediation schemes can be applied in this case | in other words, how to obtain a global solution out of the local solutions produced by the single-domain solvers. To do this, we use the interface relaxation technique <ref> [1, 4] </ref>. Important mathematical questions of the convergence of the method, the behavior of the solution in special cases, etc., are addressed in [5]. Typically, for second order PDEs, there are two physical or mathematical conditions involving values and normal derivatives of the solutions on the neighboring subdomains.
Reference: [5] <author> M. Mu and J. R. Rice, </author> <title> Modeling with Collaborating PDE Solvers | Theory and Practice, </title> <booktitle> Computing Systems in Engineering, 6 (1995), </booktitle> <pages> pp. 87-95. </pages>
Reference-contexts: A simple heat flow problem with six components and three distinct physical processes of heat flow. collects boundary values from neighboring subdomains and adjusts boundary values to better satisfy the interface conditions. Some of the theoretical issues of this methodology are addressed in <ref> [5, 6, 4] </ref> and the results obtained so far verify the feasibility and potential of network-based PDE solving. All this collaboration can be built on standard network services without involving the user, without moving software to arbitrary platforms, and without revealing source codes. <p> To do this, we use the interface relaxation technique [1, 4]. Important mathematical questions of the convergence of the method, the behavior of the solution in special cases, etc., are addressed in <ref> [5] </ref>. Typically, for second order PDEs, there are two physical or mathematical conditions involving values and normal derivatives of the solutions on the neighboring subdomains. The interface relaxation technique is as follows. Step 1. Make initial guesses as boundary conditions to determine the submodel solutions. Step 2.
Reference: [6] <author> A. Quarteroni, F. Pasquarelli, and A. Valli, </author> <title> Heterogeneous Domain Decomposition: </title> <booktitle> Principles, Algorithms, Applications, in Proc. of Fifth Intl. </booktitle> <editor> Symp. </editor> <title> Domain Decomposition Methods for PDEs, </title> <editor> D. Keyes et al., ed., </editor> <address> Philadelphia, 1992, </address> <publisher> SIAM Publications, </publisher> <pages> pp. 129-150. </pages>
Reference-contexts: A simple heat flow problem with six components and three distinct physical processes of heat flow. collects boundary values from neighboring subdomains and adjusts boundary values to better satisfy the interface conditions. Some of the theoretical issues of this methodology are addressed in <ref> [5, 6, 4] </ref> and the results obtained so far verify the feasibility and potential of network-based PDE solving. All this collaboration can be built on standard network services without involving the user, without moving software to arbitrary platforms, and without revealing source codes.
Reference: [7] <author> J. Rice and R. Boisvert, </author> <title> Solving Elliptic Problems Using ELLPACK, </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: When the model of a phenomenon is simple enough, then the resulting PDE problem consists of a single domain with a single PDE defined on it (together with appropriate boundary conditions and initial conditions). There exist general solvers (PSEs) for this class of problems like //ELLPACK <ref> [3, 7] </ref>. Multiple-domain PDE problems, however, often have complicated geometry and are highly non-homogeneous, and usually require variable grid density and different discretization methods in different subdomains.
Reference: [8] <author> S. Weerawarana, </author> <title> Problem Solving Environments for Partial Differential Equation Based Systems, </title> <type> PhD thesis, </type> <institution> Dept. Comp. Sci., Purdue University, </institution> <year> 1994. </year>
Reference-contexts: The user's high-level view of the MPSE architecture is shown in Figure 3. The MPSE constructor communicates with the user through the user interface builder and uses the software bus <ref> [8] </ref> to instantiate various agents. Agents communicate with each other through the software bus and have their own local user interfaces to interact with the user. The 4 Fig. 3. Software architecture of an MPSE: the user's abstraction.
References-found: 8

