URL: http://www.cs.brown.edu/people/tld/postscript/GreenwaldandDeanWAFR-95.ps
Refering-URL: http://www.cs.brown.edu/research/ai/publications/
Root-URL: http://www.cs.brown.edu
Title: Anticipating Computational Demands when Solving Time-Critical Decision-Making Problems  
Author: Lloyd Greenwald, Brown Thomas Dean, Brown 
Address: Providence, RI, USA  Providence, RI, USA  
Affiliation: University,  University,  
Abstract: An agent embedded in a dynamic environment may need to respond in a timely manner to sequences of events outside the agent's control. By anticipating computational demands and allocating processing time accordingly the agent can avoid costly delays often arising from trying to respond to a dynamic environment with high-complexity decision procedures. Deliberation scheduling, the process of allocating processing time among competing decision procedures to explicitly account for the costs and benefits of computational delays, may aid an agent that must solve time-critical decision-making problems in which the time spent in decision-making affects the quality of the responses generated. The more accurate the agent is in anticipating the computational demands of forthcoming problems the more successful it can be in allocating its decision-making time. We present an approach to solving time-critical decision-making problems by taking advantage of domain structure to expand the amount of time available for processing difficult combinatorial tasks. Our approach uses predictable variability in anticipated computational demands to allocate on-line deliberation time and exploits problem regularity and stochastic models of environmental dynamics to restrict attention to small subsets of the state space. This approach demonstrates how slow, high-level systems (e.g. for planning and scheduling) might interact with faster, more reactive systems (e.g. for real-time execution and monitoring) and enables us to generate timely solutions to difficult combinatorial planning and scheduling problems such as the traffic control of multiple robot vehicles. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Mark Boddy and Thomas Dean. </author> <title> Solving time-dependent planning problems. </title> <booktitle> In Proceedings IJ-CAI 11, </booktitle> <pages> pages 979-984. </pages> <address> IJCAII, </address> <year> 1989. </year>
Reference-contexts: This is the problem of compiling anytime algorithms introduced by Zilberstein [22]. 2.1 Performance Profiles Anticipated computational demands for a given problem and decision procedure are captured in the form of a performance profile. In the standard usage introduced by <ref> [4, 1] </ref> a performance profile is a mapping from processing time to expected performance (quality) for a decision procedure, derived from past experience. Performance profiles are used to allocate computational resources among anticipated problem instances and competing decision procedures. <p> In some environments the sequence of problem instances may be predicted in advance of any deliberation. Alternately, the prediction of potential problem instances may be part of the decision procedure itself and reflected in its conditional performance profile. In <ref> [4, 1] </ref> the sequence of problem instances is indicated in advance by precursor events. In Sections 3 and 4 we discuss prediction by taking advantage of regularities in the domain. <p> In doing so we tie together the particular approach to solving time-critical decision-making problems proposed by response planning with the general idea of anticipating computational demands. In Section 4.1 we compare the deliberation scheduling task of response planning to that introduced by Boddy and Dean <ref> [4, 1] </ref>. In Section 4.2 we show that the notion of compilation of anytime algorithms introduced by Zilberstein [22] encompasses the particular notions of deliberation scheduling used in response planning. <p> In response planning, overall performance is determined by the expected performance of the policies executed by . Anticipating Computational Demands The assumption of regularity simplifies the problem of determining the problem instances from which to base deliberation scheduling. Other researchers have used different techniques. In <ref> [4, 1] </ref> the sequence of problem instances is indicated by precursor events. A precursor event indicates to the deliberation scheduler a sequence of future events (problem instances) that need to be solved. <p> Once the sequence of problem instances is determined, the deliberation scheduling problem is to allocate processing time and, possibly, other parameters to the competing decision procedures. One important difference between response planning and the deliberation scheduling of Boddy and Dean <ref> [4, 1] </ref> is that our problem requires that the deliberation scheduler determine both time allocation and start time for processing a decision procedure for a particular problem instance. The treatment by Boddy and Dean [4, 1] does not require this because they assume that decision procedures are independent and only the <p> One important difference between response planning and the deliberation scheduling of Boddy and Dean <ref> [4, 1] </ref> is that our problem requires that the deliberation scheduler determine both time allocation and start time for processing a decision procedure for a particular problem instance. The treatment by Boddy and Dean [4, 1] does not require this because they assume that decision procedures are independent and only the relative processing allocation is important, not the start time. <p> Multiple planners may compete for the control of each reactive table. Finally the complexity of deliberation scheduling/compilation of anytime algorithms can be characterized for different classes of performance profiles. Zil-berstein [22] and Boddy and Dean <ref> [4, 1] </ref> provide some results along these lines. 7 Related Work Simon and Kadane [21] consider the case of allocating time to search in which deliberation time is quantized into chunks of fixed, though not necessarily constant, size. <p> There are a number of approaches similar to the approach of using anytime decision procedures described in this paper. Anytime algorithms and various deliberation scheduling problems are described in <ref> [4, 1] </ref> and Chapter 8 of [5]. The advantages of the anytime algorithm approach include an ability to make use of any amount of time available, robust behavior in the presence of unexpected interruption, and simplifying the problem of optimal or near-optimal deliberation scheduling.
Reference: [2] <author> Ronald J. Brachman, Hector J. Levesque, and Raymond Reiter, </author> <title> editors. </title> <booktitle> Proceedings of the First International Conference on Principles of Knowledge Representation and Reasoning. </booktitle> <publisher> Morgan-Kaufmann, </publisher> <address> Los Altos, California, </address> <year> 1989. </year>
Reference: [3] <author> Thomas Dean. </author> <title> Decision-theoretic planning and markov decision processes. </title> <note> In preparation, </note> <year> 1994. </year>
Reference-contexts: If g can be modeled as a Markov chain then we need only look at the most recently occurred state in predicting future distributions. This can be further simplified by using dependencies among state variables to provide short-term predictions <ref> [3] </ref>. f is an on-line process that, given a trajectory of previously visited states, and a target time window uses the known model of g to predict and prioritize reachable states. It may then calculate responses for the states so as the maximize the expected quality of the resulting policy.
Reference: [4] <author> Thomas Dean and Mark Boddy. </author> <title> An analysis of time-dependent planning. </title> <booktitle> In Proceedings AAAI-88, </booktitle> <pages> pages 49-54. </pages> <publisher> AAAI, </publisher> <year> 1988. </year>
Reference-contexts: This is the problem of compiling anytime algorithms introduced by Zilberstein [22]. 2.1 Performance Profiles Anticipated computational demands for a given problem and decision procedure are captured in the form of a performance profile. In the standard usage introduced by <ref> [4, 1] </ref> a performance profile is a mapping from processing time to expected performance (quality) for a decision procedure, derived from past experience. Performance profiles are used to allocate computational resources among anticipated problem instances and competing decision procedures. <p> In some environments the sequence of problem instances may be predicted in advance of any deliberation. Alternately, the prediction of potential problem instances may be part of the decision procedure itself and reflected in its conditional performance profile. In <ref> [4, 1] </ref> the sequence of problem instances is indicated in advance by precursor events. In Sections 3 and 4 we discuss prediction by taking advantage of regularities in the domain. <p> In doing so we tie together the particular approach to solving time-critical decision-making problems proposed by response planning with the general idea of anticipating computational demands. In Section 4.1 we compare the deliberation scheduling task of response planning to that introduced by Boddy and Dean <ref> [4, 1] </ref>. In Section 4.2 we show that the notion of compilation of anytime algorithms introduced by Zilberstein [22] encompasses the particular notions of deliberation scheduling used in response planning. <p> In response planning, overall performance is determined by the expected performance of the policies executed by . Anticipating Computational Demands The assumption of regularity simplifies the problem of determining the problem instances from which to base deliberation scheduling. Other researchers have used different techniques. In <ref> [4, 1] </ref> the sequence of problem instances is indicated by precursor events. A precursor event indicates to the deliberation scheduler a sequence of future events (problem instances) that need to be solved. <p> Once the sequence of problem instances is determined, the deliberation scheduling problem is to allocate processing time and, possibly, other parameters to the competing decision procedures. One important difference between response planning and the deliberation scheduling of Boddy and Dean <ref> [4, 1] </ref> is that our problem requires that the deliberation scheduler determine both time allocation and start time for processing a decision procedure for a particular problem instance. The treatment by Boddy and Dean [4, 1] does not require this because they assume that decision procedures are independent and only the <p> One important difference between response planning and the deliberation scheduling of Boddy and Dean <ref> [4, 1] </ref> is that our problem requires that the deliberation scheduler determine both time allocation and start time for processing a decision procedure for a particular problem instance. The treatment by Boddy and Dean [4, 1] does not require this because they assume that decision procedures are independent and only the relative processing allocation is important, not the start time. <p> Multiple planners may compete for the control of each reactive table. Finally the complexity of deliberation scheduling/compilation of anytime algorithms can be characterized for different classes of performance profiles. Zil-berstein [22] and Boddy and Dean <ref> [4, 1] </ref> provide some results along these lines. 7 Related Work Simon and Kadane [21] consider the case of allocating time to search in which deliberation time is quantized into chunks of fixed, though not necessarily constant, size. <p> There are a number of approaches similar to the approach of using anytime decision procedures described in this paper. Anytime algorithms and various deliberation scheduling problems are described in <ref> [4, 1] </ref> and Chapter 8 of [5]. The advantages of the anytime algorithm approach include an ability to make use of any amount of time available, robust behavior in the presence of unexpected interruption, and simplifying the problem of optimal or near-optimal deliberation scheduling.
Reference: [5] <author> Thomas Dean and Michael Wellman. </author> <title> Planning and Control. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, Cal-ifornia, </address> <year> 1991. </year>
Reference-contexts: We distinguish between state and control in keeping with standard practice in the control literature. For a description of the motivation and use of this formalism for modeling dynamical systems see <ref> [5, 9, 13] </ref>. 3.2 Response Planning Response planning is an approach to embedded planning that makes specific assumptions about the underlying environment and computational resources. In [10] we outline the general motivations and options for designing composite planning and control systems. <p> There are a number of approaches similar to the approach of using anytime decision procedures described in this paper. Anytime algorithms and various deliberation scheduling problems are described in [4, 1] and Chapter 8 of <ref> [5] </ref>. The advantages of the anytime algorithm approach include an ability to make use of any amount of time available, robust behavior in the presence of unexpected interruption, and simplifying the problem of optimal or near-optimal deliberation scheduling.
Reference: [6] <author> Mark Drummond and John Bresina. </author> <title> Anytime synthetic projection: Maximizing the probability of L. </title> <editor> Greenwald and T. Dean goal satisfaction. </editor> <booktitle> In Proceedings AAAI-90, </booktitle> <pages> pages 138-144. </pages> <publisher> AAAI, </publisher> <year> 1990. </year>
Reference-contexts: Georgeff's procedural reasoning system [8] was designed for on-line use in evolving situations, but it simply executes user-supplied procedures rather than constructing plans of action on its own. Systems for synthesizing plans in stochastic domains, such as those by Drummond and Bresina <ref> [6] </ref>, and Kushmerick, Hanks and Weld [14] do not directly address the problem of generating plans given time and quality constraints. Lansky [15] has developed planning systems for deterministic domains that exploit structural properties of the state space to expedite planning.
Reference: [7] <author> Oren Etzioni. </author> <title> Tractable decision-analytic control. </title> <editor> In Brachman et al. </editor> <volume> [2], </volume> <pages> pages 114-125. </pages>
Reference-contexts: Zil-berstein [22] and Boddy and Dean [4, 1] provide some results along these lines. 7 Related Work Simon and Kadane [21] consider the case of allocating time to search in which deliberation time is quantized into chunks of fixed, though not necessarily constant, size. Etzioni <ref> [7] </ref> considers a similar model in which the deliberative chunks correspond to different problem solving methods. Russell and Wefald [18] describe a general approach in which deliberation is considered as a sequence of inference steps leading to the performance of an action.
Reference: [8] <author> Michael P. Georgeff and Amy L. Lansky. </author> <title> Reactive reasoning and planning. </title> <booktitle> In Proceedings AAAI-87, </booktitle> <pages> pages 677-682. </pages> <publisher> AAAI, </publisher> <year> 1987. </year>
Reference-contexts: Zilberstein [22] discusses how anytime algorithms can be composed to perform more complicated computations. Additionally, there have been a variety of planning systems that are related to the problem. Georgeff's procedural reasoning system <ref> [8] </ref> was designed for on-line use in evolving situations, but it simply executes user-supplied procedures rather than constructing plans of action on its own.
Reference: [9] <author> M. Gopal. </author> <title> Modern Control System Theory. </title> <publisher> Hal-sted Press, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: We distinguish between state and control in keeping with standard practice in the control literature. For a description of the motivation and use of this formalism for modeling dynamical systems see <ref> [5, 9, 13] </ref>. 3.2 Response Planning Response planning is an approach to embedded planning that makes specific assumptions about the underlying environment and computational resources. In [10] we outline the general motivations and options for designing composite planning and control systems.
Reference: [10] <author> Lloyd Greenwald and Thomas Dean. </author> <title> Solving time-critical decision-making problems with predictable computational demands. </title> <booktitle> In Second International Conference on AI Planning Systems, </booktitle> <year> 1994. </year>
Reference-contexts: In Section 5 we describe an example traffic-control problem for multiple robot vehicles that demonstrates the applicability of the response planning approach to solving time-critical problems. A general overview of this work motivated by an air traffic control problem is found in <ref> [10] </ref>. 2 Anticipating Computational Demands We are interested in the design of systems that make the best use of the time available for decision-making by explicitly accounting for the costs and benefits of computational delays. <p> For a description of the motivation and use of this formalism for modeling dynamical systems see [5, 9, 13]. 3.2 Response Planning Response planning is an approach to embedded planning that makes specific assumptions about the underlying environment and computational resources. In <ref> [10] </ref> we outline the general motivations and options for designing composite planning and control systems. The response planning approach combines the reactivity of off-line construction of universal plans [19] (complete policies that precompute actions for all world states) with the adaptability of on-line decision-making. <p> Inherent in this usage is the assumption that the performance of our decision procedure for a given allocation of processing time is determined by these two classes (as well as the window size). In <ref> [10] </ref> we use an air traffic control problem to motivate these assumptions. The problem becomes more involved if the responses constructed by f can alter the sequence of classes visited. We allow for this possibility in response planning by extending a rigid strategy to include some state-based strategies. <p> There are many other issues and extensions of this work not included in this treatment. We briefly touch upon some here. In <ref> [10] </ref> we touch upon some others. The response planning approach takes a very restricted view of possible strategies for by enforcing domain regularity. As we have mentioned previously there are more flexible options available for the construction of .
Reference: [11] <author> Eric J. Horvitz. </author> <title> Reasoning about beliefs and actions under computational resource constraints. </title> <booktitle> In Proceedings of the 1987 Workshop on Uncertainty in Artificial Intelligence, </booktitle> <year> 1987. </year>
Reference-contexts: The flexibility inherent in these decision procedures allows for a more flexi ble allocation of processing time to satisfy an overall performance criterion. Anytime algorithms are sometimes referred to as flexible computations <ref> [11] </ref> or imprecise computations [20]. Zilberstein [22] contains a nice comparison of related work in anytime algorithms. An anytime algorithm may also take the form of a contract algorithm. A non-interruptible contract algorithm associates a specific processing time allocation (contract time) with any given performance level. <p> Thus, any resource limitations may be integral to the applicability of profile. Other parameters are explicit. Some work has been done in differentiating the objective value of the output of a decision procedure with the comprehensive value stemming from its use in a particular situation <ref> [11] </ref>. An example of such a differentiation would be a successive approximation integration procedure. The objective value of such a procedure is measured in terms of numerical error, but the contribution to comprehensive value differs depending on whether the procedure is used for medical diagnosis or stock trading. <p> The advantages of the anytime algorithm approach include an ability to make use of any amount of time available, robust behavior in the presence of unexpected interruption, and simplifying the problem of optimal or near-optimal deliberation scheduling. Horvitz <ref> [11] </ref> uses what he calls flexible computations to allocate computational resources at run time. Lesser [16] uses a similar notion for solving time-critical problems.
Reference: [12] <author> Ronald A. Howard. </author> <title> Information value theory. </title> <journal> IEEE Transactions on Systems Science and Cybernetics, </journal> <volume> 2(1) </volume> <pages> 22-26, </pages> <year> 1966. </year>
Reference-contexts: They explicitly compute the expected value of different sequences of inference steps using a technique similar to Howard's method for computing the expected value of information <ref> [12] </ref>. There are a number of approaches similar to the approach of using anytime decision procedures described in this paper. Anytime algorithms and various deliberation scheduling problems are described in [4, 1] and Chapter 8 of [5].
Reference: [13] <author> R. E. Kalman, P. L. Falb, and M. A. Arbib. </author> <title> Topics in Mathematical System Theory. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1969. </year>
Reference-contexts: We distinguish between state and control in keeping with standard practice in the control literature. For a description of the motivation and use of this formalism for modeling dynamical systems see <ref> [5, 9, 13] </ref>. 3.2 Response Planning Response planning is an approach to embedded planning that makes specific assumptions about the underlying environment and computational resources. In [10] we outline the general motivations and options for designing composite planning and control systems.
Reference: [14] <author> Nicholas Kushmerick, Steve Hanks, and Daniel Weld. </author> <title> An algorithm for probabilistic planning. </title> <type> Unpublished Manuscript, </type> <year> 1993. </year>
Reference-contexts: Georgeff's procedural reasoning system [8] was designed for on-line use in evolving situations, but it simply executes user-supplied procedures rather than constructing plans of action on its own. Systems for synthesizing plans in stochastic domains, such as those by Drummond and Bresina [6], and Kushmerick, Hanks and Weld <ref> [14] </ref> do not directly address the problem of generating plans given time and quality constraints. Lansky [15] has developed planning systems for deterministic domains that exploit structural properties of the state space to expedite planning. Ow et al. [17] describe some initial efforts at building systems that modify plans incrementally.
Reference: [15] <author> Amy L. Lansky. </author> <title> Localized event-based reasoning for multiagent domains. </title> <journal> Computational Intelligence, </journal> <volume> 4(4), </volume> <year> 1988. </year>
Reference-contexts: Systems for synthesizing plans in stochastic domains, such as those by Drummond and Bresina [6], and Kushmerick, Hanks and Weld [14] do not directly address the problem of generating plans given time and quality constraints. Lansky <ref> [15] </ref> has developed planning systems for deterministic domains that exploit structural properties of the state space to expedite planning. Ow et al. [17] describe some initial efforts at building systems that modify plans incrementally.
Reference: [16] <author> Victor R. Lesser, Jasmina Pavlin, and Edmund Durfee. </author> <title> Approximate processing in real-time problem solving. </title> <journal> AI Magazine, </journal> <volume> 9(1) </volume> <pages> 49-61, </pages> <year> 1988. </year>
Reference-contexts: Horvitz [11] uses what he calls flexible computations to allocate computational resources at run time. Lesser <ref> [16] </ref> uses a similar notion for solving time-critical problems. Liu et al. [20] uses the term imprecise computation in the context of real-time operating systems to refer to a computation that has both a necessary and an optional component.
Reference: [17] <author> P. S. Ow, S. F. Smith, and A. Thiriez. </author> <title> Reactive plan revision. </title> <booktitle> In Proceedings AAAI-88. AAAI, </booktitle> <year> 1988. </year>
Reference-contexts: Lansky [15] has developed planning systems for deterministic domains that exploit structural properties of the state space to expedite planning. Ow et al. <ref> [17] </ref> describe some initial efforts at building systems that modify plans incrementally. Neither Lansky nor Ow et al.'s systems deal with uncertainty and Lansky's system cannot handle concurrent planning and execution.
Reference: [18] <author> Stuart J. Russell and Eric H. Wefald. </author> <title> Principles of metareasoning. </title> <editor> In Brachman et al. </editor> <volume> [2], </volume> <pages> pages 400-411. </pages>
Reference-contexts: Etzioni [7] considers a similar model in which the deliberative chunks correspond to different problem solving methods. Russell and Wefald <ref> [18] </ref> describe a general approach in which deliberation is considered as a sequence of inference steps leading to the performance of an action. They explicitly compute the expected value of different sequences of inference steps using a technique similar to Howard's method for computing the expected value of information [12].
Reference: [19] <author> Marcel J. Schoppers. </author> <title> Universal plans for reactive robots in unpredictable environments. </title> <booktitle> In Proceedings IJCAI 10, </booktitle> <pages> pages 1039-1046. </pages> <address> IJCAII, </address> <year> 1987. </year>
Reference-contexts: In [10] we outline the general motivations and options for designing composite planning and control systems. The response planning approach combines the reactivity of off-line construction of universal plans <ref> [19] </ref> (complete policies that precompute actions for all world states) with the adaptability of on-line decision-making. Time-critical decision-making is accomplished despite the constraints of limited storage and computational resources in the face of large state spaces.
Reference: [20] <author> W-K. Shih, J. W. S. Liu, and J-Y. Chung. </author> <title> Fast algorithms for scheduling imprecise computations. </title> <booktitle> In Proceedings of the Real-Time Systems Symposium, </booktitle> <pages> pages 12-19. </pages> <publisher> IEEE, </publisher> <year> 1989. </year>
Reference-contexts: The flexibility inherent in these decision procedures allows for a more flexi ble allocation of processing time to satisfy an overall performance criterion. Anytime algorithms are sometimes referred to as flexible computations [11] or imprecise computations <ref> [20] </ref>. Zilberstein [22] contains a nice comparison of related work in anytime algorithms. An anytime algorithm may also take the form of a contract algorithm. A non-interruptible contract algorithm associates a specific processing time allocation (contract time) with any given performance level. <p> Horvitz [11] uses what he calls flexible computations to allocate computational resources at run time. Lesser [16] uses a similar notion for solving time-critical problems. Liu et al. <ref> [20] </ref> uses the term imprecise computation in the context of real-time operating systems to refer to a computation that has both a necessary and an optional component. Zilberstein [22] discusses how anytime algorithms can be composed to perform more complicated computations.
Reference: [21] <author> Herbert A. Simon and Joseph B. Kadane. </author> <title> Optimal problem-solving search: All-or-none solutions. </title> <journal> Artificial Intelligence, </journal> <volume> 6 </volume> <pages> 235-247, </pages> <year> 1975. </year>
Reference-contexts: Multiple planners may compete for the control of each reactive table. Finally the complexity of deliberation scheduling/compilation of anytime algorithms can be characterized for different classes of performance profiles. Zil-berstein [22] and Boddy and Dean [4, 1] provide some results along these lines. 7 Related Work Simon and Kadane <ref> [21] </ref> consider the case of allocating time to search in which deliberation time is quantized into chunks of fixed, though not necessarily constant, size. Etzioni [7] considers a similar model in which the deliberative chunks correspond to different problem solving methods.
Reference: [22] <author> Shlomo Zilberstein. </author> <title> Operational Rationality through Compilation of Anytime Algorithms. </title> <type> PhD thesis, </type> <institution> University of California at Berkeley, </institution> <year> 1993. </year>
Reference-contexts: The flexibility inherent in these decision procedures allows for a more flexi ble allocation of processing time to satisfy an overall performance criterion. Anytime algorithms are sometimes referred to as flexible computations [11] or imprecise computations [20]. Zilberstein <ref> [22] </ref> contains a nice comparison of related work in anytime algorithms. An anytime algorithm may also take the form of a contract algorithm. A non-interruptible contract algorithm associates a specific processing time allocation (contract time) with any given performance level. <p> Deliberation scheduling is a special case of the more general problem of composing anytime algorithms with conditional performance profiles to satisfy overall performance measures. This is the problem of compiling anytime algorithms introduced by Zilberstein <ref> [22] </ref>. 2.1 Performance Profiles Anticipated computational demands for a given problem and decision procedure are captured in the form of a performance profile. <p> Performance profiles are used to allocate computational resources among anticipated problem instances and competing decision procedures. In this section we gener Anticipating Computational Demands alize the performance profile notion and extend some of the discussions of <ref> [22] </ref>. In Section 2.2 we expand upon methods for conditioning profiles based on differing problem parameters and inputs. A typical performance profile for an anytime algorithm is depicted in Figure 1.i. <p> In Section 4.1 we compare the deliberation scheduling task of response planning to that introduced by Boddy and Dean [4, 1]. In Section 4.2 we show that the notion of compilation of anytime algorithms introduced by Zilberstein <ref> [22] </ref> encompasses the particular notions of deliberation scheduling used in response planning. In response planning we introduce the notion of regularity so that deliberation scheduling may be performed off-line to construct rigid strategies. <p> Certain events may trigger different strategy branches. Given that processing time is dependent upon the actual problem instance, the time allocated to a decision procedure may not produce the desired quality. Zilberstein <ref> [22] </ref> introduces the concept of on-line monitoring to deal with these situations. Additionally, the concept of dynamically adjustable performance profiles and profiles conditioned on intervening states that pass during deliberation extend the dynamic properties of response planning. <p> The multiple reactive tables may correspond to multiple agents, each table controlling the behavior of a unique agent. Multiple planners may compete for the control of each reactive table. Finally the complexity of deliberation scheduling/compilation of anytime algorithms can be characterized for different classes of performance profiles. Zil-berstein <ref> [22] </ref> and Boddy and Dean [4, 1] provide some results along these lines. 7 Related Work Simon and Kadane [21] consider the case of allocating time to search in which deliberation time is quantized into chunks of fixed, though not necessarily constant, size. <p> Lesser [16] uses a similar notion for solving time-critical problems. Liu et al. [20] uses the term imprecise computation in the context of real-time operating systems to refer to a computation that has both a necessary and an optional component. Zilberstein <ref> [22] </ref> discusses how anytime algorithms can be composed to perform more complicated computations. Additionally, there have been a variety of planning systems that are related to the problem.
References-found: 22

