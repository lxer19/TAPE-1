URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/93-020.ps.Z
Refering-URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/FILE.html
Root-URL: http://www.cs.unc.edu
Title: MODELING AND PROTOTYPING COLLABORATIVE SOFTWARE PROCESSES  
Author: P. DAVID STOTTS RICHARD FURUTA 
Note: This work is partially supported by the National Science Foundation under grant numbers IRI-9007746 and IRI-9015439, and by the Software  
Address: Chapel Hill, NC 27599-3175 College Park, MD 20742 USA USA  
Affiliation: Department of Computer Science Department of Computer Science University of North Carolina University of Maryland  Engineering Research Center (University of Florida and Purdue University).  
Abstract: The correct and timely creation of systems for coordination of group work depends on the ability to express, analyze, and experiment with protocols for managing multiple work threads. We present an evolution of the Trellis model that provides a formal basis for prototyping the coordination structure of a collaboration system. Like its predecessor, the new Trellis model has the nicely exploitable duality of being both graph formalism and parallel automaton. The automaton semantics provide dynamic information about the interactions of agents in a collaboration; the graph structure forms the basis for the static link structure of a hyperdocument. We give several analysis techniques for the model, and demonstrate its use by expressing the interaction structure of some common forms of collaborative system. 
Abstract-found: 1
Intro-found: 1
Reference: [BK90] <author> C. Beeri and Y. Kornatzky. </author> <title> A logical query language for hypertext systems. </title> <editor> In A. Rizk, N. Streitz, and J. Andre, editors, </editor> <booktitle> Hypertext: Concepts, Systems, and Applications, </booktitle> <pages> pages 67-80. </pages> <publisher> Cambridge University Press, </publisher> <month> November </month> <year> 1990. </year> <booktitle> Proceedings of the European Conference on Hypertext. </booktitle>
Reference-contexts: A commercial package, Design/CPN, is available from MetaSoftware providing extensive editing capabilities for building hierarchical colored Petri nets. Temporal logic has been used to describe structural aspects of hypertext <ref> [BK90] </ref>, but the goal in that work is to define subgraphs of a structure rather than the dynamics of browsing, as in Trellis.
Reference: [CES86] <author> E. M. Clarke, E. A. Emerson, and A. P. Sistla. </author> <title> Automatic verification of finite-state concurrent systems using temporal logic specifications. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8(2) </volume> <pages> 244-263, </pages> <year> 1986. </year>
Reference-contexts: One very promising approach involves our adaptation of automated verification techniques called model checking <ref> [CES86] </ref> from the domain of concurrent programs. This approach allows verification of browsing properties of Trellis hyperprograms expressed in a temporal logic notation called CTL.
Reference: [CG88] <author> Brad Campbell and Joseph M. Goodman. </author> <title> HAM: A general purpose hypertext abstract machine. </title> <journal> Communications of the ACM, </journal> <volume> 31(7) </volume> <pages> 856-861, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: The underlying Trellis information engine supporting Trellis is related to other hypertext engines that have been used in experimental software support systems. The HAM (hypertext abstract machine) <ref> [CG88] </ref> was developed in 1986 by Textronix, and was used as the basis for a hypertextual software support system called Neptune. The uniqueness of Trellis is the basis on a parallel collaborative computation model|colored timed PT nets.
Reference: [DC92] <author> P. Dewan and R. Choudhary. </author> <title> A high-level and flexible framework for implementing multi-user user interfaces. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(4) </volume> <pages> 345-380, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Other research projects have looked at various aspects of the domain we are studying. Fischer is using IO automata [Fis91] to model human/computer interactions in CSCW settings. The Suite project <ref> [DC92] </ref> is system for construction of CSCW tools; its prototyping facilities are more sophisticated than those of Trellis, but no emphasis is given in Suite on formal methods or analysis of the underlying protocol.
Reference: [Fis91] <author> M. Fischer. </author> <title> Decision making based on practical knowledge. </title> <booktitle> In Proc. of the 1991 Coordination Theory and Collaboration Technology Workshop, </booktitle> <pages> pages 89-97. </pages> <institution> National Science Foundation, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: Our project goes beyond such recognition by providing a modeling 22 framework that includes unique analysis methods, as well as a system design for prototyping and simulation of collaborative tools. Other research projects have looked at various aspects of the domain we are studying. Fischer is using IO automata <ref> [Fis91] </ref> to model human/computer interactions in CSCW settings. The Suite project [DC92] is system for construction of CSCW tools; its prototyping facilities are more sophisticated than those of Trellis, but no emphasis is given in Suite on formal methods or analysis of the underlying protocol.
Reference: [GL81] <author> H. J. Genrich and K. Lautenbach. </author> <title> System modeling with high-level Petri nets. </title> <journal> Theoretical Computer Science, </journal> <volume> 13 </volume> <pages> 109-136, </pages> <year> 1981. </year>
Reference-contexts: For use in CSCW, we have employed a form of net model known generically as high-level nets. High-level nets have been introduced in several forms by different researchers, including predicate-transition nets <ref> [GL81] </ref>, colored Petri nets [Jen81], and nets with individual tokens [Rei83]. We present our ideas in a hybrid notation. We will use the Jensen's terminology of colored nets, but the simplified syntax presented by Murata in his high-level net summary [Mur89]. <p> The alternate form provide, in essence, more compactness of expression but do not add modeling power to a CPS. In predicate-transition nets <ref> [GL81] </ref>, for example, tokens carry information (which we have generically called color) and every transition carrys a predicate describing how the input tokens may combine to produce output tokens.
Reference: [GS87] <author> P. Garg and W. Scacchi. </author> <title> On designing intelligent hypertext systems for information management in software engineering. </title> <booktitle> In Proceedings of Hypertext '87 (Chapel Hill, </booktitle> <address> NC, </address> <month> November </month> <year> 1987), </year> <pages> pages 409-432, </pages> <year> 1987. </year>
Reference-contexts: The uniqueness of Trellis is the basis on a parallel collaborative computation model|colored timed PT nets. This gives the model an elegant structure that can be both programmed and analyzed. Scacchi and Garg have also used a hypertext mechanism in a software engineering context <ref> [GS87] </ref>. Their project, though, concentrated on the object-base aspects of a software project and did not have a formal model for representing process and enactment. Intellectual leadership in the field of software process modeling comes from SEI, with its process assessment procedures, and with the writings of Watts Humphrey [Hum88].
Reference: [Hol88] <author> Anatol W. Holt. Diplans: </author> <title> A new language for the study and implementation of coordination. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 6(2) </volume> <pages> 109-125, </pages> <month> January </month> <year> 1988. </year> <month> 24 </month>
Reference-contexts: For example, van Biljon [vB88] has described a special grammar-based notation for designing man-machine dialogues as languages, which are then realized with a hierarchy of PT nets as recognition automata. Another example is the work of Holt <ref> [Hol88] </ref>, who has designed a PT-net-based graphical specification language for coordination of multiple cooperating agents in an information processing organization. Trellis is a more complicated model than these previous proposals, because it encompasses more than just the control aspects of man-machine interactions.
Reference: [Hum88] <author> W. S. Humphrey. </author> <title> Characterizing the software proess: A maturity framework. </title> <journal> IEEE Software, </journal> <volume> 5(2) </volume> <pages> 73-79, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: In section 6.3 we conclude with an outline of the main structure, capabilities, and uses of the Trellis system and methodology. 6.1 Basic capabilities and requirements Our process models are being designed by integrating ideas drawn from the materials on process from the SEI <ref> [Hum88] </ref>; the MVP project of Rombach [LR90]; the material contained in the proceedings of the past software process workshops; and from personal communications with representatives of the 14 industrial affiliates of the Purdue/Florida/NSF Software Engineering Research Center. <p> An important characteristic of an effective software process is predictability <ref> [Hum88] </ref>. This attribute requires the ability to measure the crucial aspects of development, and to apply statistical (repeatable) controls to the procedures involved with the measured quantities. Trellis models serve as a basis for implementing various measurements and evaluations of system development practices. <p> Their project, though, concentrated on the object-base aspects of a software project and did not have a formal model for representing process and enactment. Intellectual leadership in the field of software process modeling comes from SEI, with its process assessment procedures, and with the writings of Watts Humphrey <ref> [Hum88] </ref>. In terms of experimental projects, Kellner has described a study of how StateMate can be used to present several different views of a development process [Kel89].
Reference: [Jen81] <author> Kurt Jensen. </author> <title> Coloured Petri nets and the invariant-method. </title> <journal> Theoretical Computer Science, </journal> <volume> 14 </volume> <pages> 317-336, </pages> <year> 1981. </year>
Reference-contexts: For use in CSCW, we have employed a form of net model known generically as high-level nets. High-level nets have been introduced in several forms by different researchers, including predicate-transition nets [GL81], colored Petri nets <ref> [Jen81] </ref>, and nets with individual tokens [Rei83]. We present our ideas in a hybrid notation. We will use the Jensen's terminology of colored nets, but the simplified syntax presented by Murata in his high-level net summary [Mur89].
Reference: [Kel89] <author> M. I. Kellner. </author> <title> Software process modeling: Value and improvement. </title> <journal> Technical Review 1989, </journal> <pages> pages 23-54, </pages> <year> 1989. </year>
Reference-contexts: In terms of experimental projects, Kellner has described a study of how StateMate can be used to present several different views of a development process <ref> [Kel89] </ref>. This work describes an experiment at SEI, and most closely parallels the approach of Trellis; we feel the basic idea of unified static and dynamic properties in one model deserves an industrial trial.
Reference: [KFP88] <author> G. Kaiser, P. H. Feiler, and S. S. Popovich. </author> <title> Intelligent assistance for software development and maintenance. </title> <journal> IEEE Software, </journal> <month> May </month> <year> 1988. </year>
Reference-contexts: The MVP-L project [Rom91] has looked as an Ada-like syntax for expressing salient process properties in a form that can be machine translated into plans, code, documents, etc. Marvel <ref> [KFP88] </ref> has looked at using rule-based systems for assistance in the software development process. There are numerous other process projects documented in the proceedings of the annual 23 software process workshop. We have mentioned only a few to give an idea of their nature.
Reference: [LR90] <author> C. M. Lott and H. D. Rombach. </author> <title> A mvp-l1 solution for the software-process modeling problem. </title> <booktitle> In Collected Solutions from the 6th International Software Process Workshop (Hakodate, </booktitle> <address> Japan), </address> <month> October </month> <year> 1990. </year>
Reference-contexts: In section 6.3 we conclude with an outline of the main structure, capabilities, and uses of the Trellis system and methodology. 6.1 Basic capabilities and requirements Our process models are being designed by integrating ideas drawn from the materials on process from the SEI [Hum88]; the MVP project of Rombach <ref> [LR90] </ref>; the material contained in the proceedings of the past software process workshops; and from personal communications with representatives of the 14 industrial affiliates of the Purdue/Florida/NSF Software Engineering Research Center. <p> Any process modeling mechanism must assist these areas of software development (from Rombach <ref> [LR90] </ref>): * understanding and communication * measurement * analysis of captured data * planning * execution (actual development) * process improvement To produce models meeting these goals, a formalism must satisfy these requirements: * express relationships among product, process, quality, and resource components; * support instrumentation mechanisms (data capture); * support
Reference: [Mer74] <author> Philip M. Merlin. </author> <title> A Study of the Recoverability of Computing Systems. </title> <type> Ph.D. dissertation, </type> <institution> University of California at Irvine, Department of Information and Computer Science, </institution> <address> Irvine, CA, </address> <year> 1974. </year> <note> Also available as Technical Report 58, </note> <institution> Department of Information and Computer Science, University of California at Irvine (1974). </institution>
Reference-contexts: This temporal structure is very similar to that of Merlin's Time Petri nets <ref> [Mer74, MF76] </ref>, with a few differences. The two time values for each transition here are integers, whereas Merlin used reals. We also have a need for the maximum latency to possibly be unbounded, using the special designation 1 which is not in Merlin's model.
Reference: [MF76] <author> Philip M. Merlin and David J. Farber. </author> <title> Recoverability of communication protocols-implications of a theoretical study. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-24(9):1036-1043, </volume> <year> 1976. </year>
Reference-contexts: This temporal structure is very similar to that of Merlin's Time Petri nets <ref> [Mer74, MF76] </ref>, with a few differences. The two time values for each transition here are integers, whereas Merlin used reals. We also have a need for the maximum latency to possibly be unbounded, using the special designation 1 which is not in Merlin's model.
Reference: [Mur89] <author> Tadao Murata. </author> <title> Petri nets: Properties, analysis and applications. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(4) </volume> <pages> 541-580, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Following that we introduce the group- and timing-specific net definitions, and finally the model of collaboration structures based on these nets. 2.1 Net theory basics The notation used here is taken from Reisig [Rei85]. For the interested formalist, Mu-rata <ref> [Mur89] </ref> gives a broad and thorough introduction to net theory and modeling applications. We present here just the basics required for understanding our application of this theory. A PT net is a bipartite graph with some associated execution semantics. <p> We present our ideas in a hybrid notation. We will use the Jensen's terminology of colored nets, but the simplified syntax presented by Murata in his high-level net summary <ref> [Mur89] </ref>. All forms of high-level nets can be translated into one another, and are thus equivalent, but the simple syntax we use creates explanations that are more clear. We will discuss these other syntaxes after the examples. In colored nets, tokens have type (color) and may carry data structure.
Reference: [Rei83] <author> W. Reisig. </author> <title> Petri nets with individual tokens. </title> <journal> Informatik-Fachberichte, </journal> <volume> 66(21) </volume> <pages> 229-249, </pages> <year> 1983. </year>
Reference-contexts: For use in CSCW, we have employed a form of net model known generically as high-level nets. High-level nets have been introduced in several forms by different researchers, including predicate-transition nets [GL81], colored Petri nets [Jen81], and nets with individual tokens <ref> [Rei83] </ref>. We present our ideas in a hybrid notation. We will use the Jensen's terminology of colored nets, but the simplified syntax presented by Murata in his high-level net summary [Mur89].
Reference: [Rei85] <author> Wolfgang Reisig. </author> <title> Petri Nets: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: Following that we introduce the group- and timing-specific net definitions, and finally the model of collaboration structures based on these nets. 2.1 Net theory basics The notation used here is taken from Reisig <ref> [Rei85] </ref>. For the interested formalist, Mu-rata [Mur89] gives a broad and thorough introduction to net theory and modeling applications. We present here just the basics required for understanding our application of this theory. A PT net is a bipartite graph with some associated execution semantics. <p> For any transition t 2 T , we write t (t) = (t r t ; t m t ) and we require that t r t t m In this model, we have simplified the notation used in Reisig <ref> [Rei85] </ref> by assuming that the weight on each arc is 1, and that the token capacity of each place is unbounded. A net marking is a vector of token counts, with each token count being a vector of color counts; a many forms of concurrent computation model.
Reference: [Rom91] <author> H. D. Rombach. Mvp-l: </author> <title> A language for process modeling in-the-large. </title> <type> Technical Report CS-TR-2709, </type> <institution> Department of Computer Science, University of Maryland, College Park, MD, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: This work describes an experiment at SEI, and most closely parallels the approach of Trellis; we feel the basic idea of unified static and dynamic properties in one model deserves an industrial trial. The MVP-L project <ref> [Rom91] </ref> has looked as an Ada-like syntax for expressing salient process properties in a form that can be machine translated into plans, code, documents, etc. Marvel [KFP88] has looked at using rule-based systems for assistance in the software development process.
Reference: [SF89] <author> P. David Stotts and Richard Furuta. </author> <title> Petri-net-based hypertext: Document structure with browsing semantics. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 7(1) </volume> <pages> 3-29, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: 1 Introduction The Trellis project <ref> [SF89, SF90b] </ref> has investigated for the past several years the structure and semantics of human computer interaction in the context of hypertext/hypermedia systems, program browsers, visual programming notations, and software process models. <p> The first such effort was a hypertext model <ref> [SF89] </ref>, with a followup framework for highly-interactive time-based programming (termed temporal hyperprogramming [SF90b]). The model we present here is an extension of these earlier designs that explicitly distinguishes the various agents acting within a linked structure, and that provide an analyzable mechanism with which agents may exchange data. <p> By composing the truth values of these subformulae, one obtains a truth value for the entire formula. For PT nets, we obtain a useful state machine from the coverability graph explained in an earlier Trellis paper <ref> [SF89] </ref>. The details of our use of CTL are discussed elsewhere [SFR92]. For this rationale, it is sufficient to give an idea of how the method is applied to Trellis models.
Reference: [SF90a] <author> D. Stotts and R. Furuta. </author> <title> Browsing parallel process networks. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 9(2) </volume> <pages> 224-235, </pages> <year> 1990. </year>
Reference-contexts: The formula is FALSE. This particular Trellis model is very small compared to those encountered in realistic applications. Our checker has also been tested on larger Trellis documents|for example, the one we built to represent a CSP parallel program <ref> [SF90a] </ref> contains about 50 places and transitions, and generates a state machine of over six thousand states. <p> [SF91]; image browsing indexes, where images are classified according to common characteristics, and the manner of filtering and sharing images among collaborating astronomers is encoded in the net structure defining the index; parallel program browsers, where the coordination of a CPS is applied to program processes rather than to people <ref> [SF90a, SF92] </ref>. One application we will discuss is some detail here is modeling the process of developing software systems, from requirements to product, from initial design and specification through maintenance. <p> For example, we mentioned that Trellis can be used to express and browse the control structure of program source code <ref> [SF90a, SF92] </ref>. As a related example, module designs can be expressed as Trellis models, too; Trellis clients can then be written to apply, say, Zage's design quality metrics to the design models.
Reference: [SF90b] <author> P. David Stotts and Richard Furuta. </author> <title> Temporal hyperprogramming. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 1(3) </volume> <pages> 237-253, </pages> <year> 1990. </year>
Reference-contexts: 1 Introduction The Trellis project <ref> [SF89, SF90b] </ref> has investigated for the past several years the structure and semantics of human computer interaction in the context of hypertext/hypermedia systems, program browsers, visual programming notations, and software process models. <p> The first such effort was a hypertext model [SF89], with a followup framework for highly-interactive time-based programming (termed temporal hyperprogramming <ref> [SF90b] </ref>). The model we present here is an extension of these earlier designs that explicitly distinguishes the various agents acting within a linked structure, and that provide an analyzable mechanism with which agents may exchange data.
Reference: [SF91] <author> P. David Stotts and Richard Furuta. </author> <title> Dynamic adaptation of hypertext structure. </title> <booktitle> In Proceedings of Hypertext 91, </booktitle> <pages> pages 219-231. </pages> <publisher> ACM, </publisher> <month> December </month> <year> 1991. </year> <month> 25 </month>
Reference-contexts: Our domains of Trellis investigation include: hypertext and hypermedia, in which multiple readers can share and interact with the linked information elements <ref> [SF91] </ref>; image browsing indexes, where images are classified according to common characteristics, and the manner of filtering and sharing images among collaborating astronomers is encoded in the net structure defining the index; parallel program browsers, where the coordination of a CPS is applied to program processes rather than to people [SF90a,
Reference: [SF92] <author> P. D. Stotts and R. Furuta. </author> <title> Hypertextual concurrent control of a Lisp kernel. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 3(2) </volume> <pages> 221-236, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: In the curent Trellis engine a Lisp interpreter is provided to assist in this stage of prototpying. The result is a program with a hypertextual interface that controls group use of some information base. An example of a Trellis hyperprogram using the Lisp interpreter is given in <ref> [SF92] </ref>. 6 CPS Application: Software process modeling In addition to the meeting structure we have shown, and in addition to CSCW tools in general, many different forms of software can be based on CPS models. We have investigated several and are currently constructing others. <p> [SF91]; image browsing indexes, where images are classified according to common characteristics, and the manner of filtering and sharing images among collaborating astronomers is encoded in the net structure defining the index; parallel program browsers, where the coordination of a CPS is applied to program processes rather than to people <ref> [SF90a, SF92] </ref>. One application we will discuss is some detail here is modeling the process of developing software systems, from requirements to product, from initial design and specification through maintenance. <p> For example, we mentioned that Trellis can be used to express and browse the control structure of program source code <ref> [SF90a, SF92] </ref>. As a related example, module designs can be expressed as Trellis models, too; Trellis clients can then be written to apply, say, Zage's design quality metrics to the design models.
Reference: [SFR92] <author> P. D. Stotts, R. Furuta, and J. C. Ruiz. </author> <title> Hyperdocuments as automata: Trace-based browsing property verification. </title> <booktitle> In Proceedings of the 1992 European Conference on Hypertext (ECHT92: November 30-December 4, </booktitle> <address> Milan, Italy), </address> <pages> pages 272-281. </pages> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1992. </year>
Reference-contexts: By composing the truth values of these subformulae, one obtains a truth value for the entire formula. For PT nets, we obtain a useful state machine from the coverability graph explained in an earlier Trellis paper [SF89]. The details of our use of CTL are discussed elsewhere <ref> [SFR92] </ref>. For this rationale, it is sufficient to give an idea of how the method is applied to Trellis models.
Reference: [Sin89] <author> A. Sinachopoulos. </author> <title> Logics for petri-nets: Partial order logics, branching time logics and how to distinguish between them. </title> <booktitle> Petri Net Newsletter, </booktitle> <pages> pages 9-14, </pages> <month> 8 </month> <year> 1989. </year>
Reference-contexts: The only project we know of other than Trellis that uses temporal logic for PT net analysis is by Sinachopoulos <ref> [Sin89] </ref>; the emphasis in this work is on timing in a timed net model. No other project we know of uses model checking for PT net state space analysis. The use of PT nets as a specification medium for man-machine interaction appears previously in the literature.
Reference: [vB88] <author> Willem R. van Biljon. </author> <title> Extending Petri nets for specifying man-machine dialogues. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 28 </volume> <pages> 437-455, </pages> <year> 1988. </year> <month> 26 </month>
Reference-contexts: No other project we know of uses model checking for PT net state space analysis. The use of PT nets as a specification medium for man-machine interaction appears previously in the literature. For example, van Biljon <ref> [vB88] </ref> has described a special grammar-based notation for designing man-machine dialogues as languages, which are then realized with a hierarchy of PT nets as recognition automata.
References-found: 27

