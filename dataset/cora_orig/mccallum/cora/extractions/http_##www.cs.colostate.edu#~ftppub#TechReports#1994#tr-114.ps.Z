URL: http://www.cs.colostate.edu/~ftppub/TechReports/1994/tr-114.ps.Z
Refering-URL: http://www.cs.colostate.edu/~ftppub/
Root-URL: 
Affiliation: Department of Computer Science Colorado State University  
Abstract: Estimating Bounds on the Size of Compressed Tries Karl W. Glander and Karl P. Durre Technical Report CS-94-114 May 19, 1994 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Al-Suwaiyel, Mohammed Ibrahim, </author> <title> Algorithms for Trie Compaction, </title> <type> Ph.D. </type> <institution> Thesis at University of Southern California. </institution> <month> June </month> <year> 1979. </year>
Reference-contexts: Various methods have been investigated to reduce the storage requirements of tries. The methods of primary interest are trie compaction in <ref> [1, 2, 9, 10] </ref> and trie compression 1 in [4, 11]. Although these two methods are different in their general structure, they are similar since both are based on the process of merging nodes of the trie into an array.
Reference: 2. <author> Al-Suwaiyel, M. and E. Horowitz, </author> <title> Algorithms for Trie Compaction, </title> <journal> ACM Transactions on Database Systems, v.9, </journal> <volume> n.2, </volume> <month> (June) </month> <year> 1984, </year> <title> p.243-263. 3. de La Braindais, File Searching Using Variable Length Keys, </title> <booktitle> 1959 Proceedings of the Western Joint Computer Conference, </booktitle> <address> p.295-98. </address>
Reference-contexts: Various methods have been investigated to reduce the storage requirements of tries. The methods of primary interest are trie compaction in <ref> [1, 2, 9, 10] </ref> and trie compression 1 in [4, 11]. Although these two methods are different in their general structure, they are similar since both are based on the process of merging nodes of the trie into an array.
Reference: 4. <author> Durre, Karl P., </author> <title> Storing Static Tries, </title> <booktitle> 10th International Workshop WG 84 on Graphtheoretic Concepts in Computer Science, </booktitle> <address> 13-15 June 1984, Berlin, Germany, p. </address> <pages> 125-135. </pages>
Reference-contexts: Various methods have been investigated to reduce the storage requirements of tries. The methods of primary interest are trie compaction in [1, 2, 9, 10] and trie compression 1 in <ref> [4, 11] </ref>. Although these two methods are different in their general structure, they are similar since both are based on the process of merging nodes of the trie into an array.
Reference: 5. <author> Fredkin, Edward, </author> <title> Trie Memory, </title> <journal> Comm. of the ACM, v.3, </journal> <volume> n.9, </volume> <month> (Sept.) </month> <year> 1960, </year> <month> p.490-499. </month>
Reference-contexts: Introduction A trie <ref> [3, 5] </ref> is an M-ary tree where each node consists of an M-positional vector of pointers that correspond to the symbols in the trie alphabet.
Reference: 6. <author> Glander, Karl W. and Karl P. Durre, </author> <title> Minimal Storage Trie Variations, </title> <booktitle> Submitted to Thirteenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> Minneapolis, MN, </address> <month> 24-26 May, </month> <year> 1994. </year>
Reference-contexts: variations p.7 0.8 1.2 1.6 0 20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 Cost 1,000's of Key Words Upper PL Trie Lower PL Trie Upper VLC Trie Lower VLC Trie Static B-Tree Static Binary Tree can be found in <ref> [6, 7, 8] </ref>. 8 Figure 3 shows the average cost performance of the trie variations in relation to the static B-tree and static Binary tree for subsets of WORDS.
Reference: 7. <author> Glander, Karl W. and Karl P. Durre, </author> <title> VLC Tries (Extended Abstract), </title> <booktitle> Proceedings of the Data Compression Conference, </booktitle> <address> Snowbird, Utah, </address> <month> 29-31 March </month> <year> 1994. </year>
Reference-contexts: variations p.7 0.8 1.2 1.6 0 20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 Cost 1,000's of Key Words Upper PL Trie Lower PL Trie Upper VLC Trie Lower VLC Trie Static B-Tree Static Binary Tree can be found in <ref> [6, 7, 8] </ref>. 8 Figure 3 shows the average cost performance of the trie variations in relation to the static B-tree and static Binary tree for subsets of WORDS.
Reference: 8. <author> Glander, Karl W. and Karl P. Durre, </author> <title> VLC Tries, </title> <institution> CS-94-102 Colorado State University Technical Report. </institution>
Reference-contexts: variations p.7 0.8 1.2 1.6 0 20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 Cost 1,000's of Key Words Upper PL Trie Lower PL Trie Upper VLC Trie Lower VLC Trie Static B-Tree Static Binary Tree can be found in <ref> [6, 7, 8] </ref>. 8 Figure 3 shows the average cost performance of the trie variations in relation to the static B-tree and static Binary tree for subsets of WORDS.
Reference: 9. <author> Horowitz, E., and S. Sahni, </author> <title> Fundamentals of Data Structures, </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <year> 1976, </year> <month> p.517-525. </month>
Reference-contexts: Various methods have been investigated to reduce the storage requirements of tries. The methods of primary interest are trie compaction in <ref> [1, 2, 9, 10] </ref> and trie compression 1 in [4, 11]. Although these two methods are different in their general structure, they are similar since both are based on the process of merging nodes of the trie into an array.
Reference: 10. <author> Knuth, D.E., </author> <title> Sorting and Searching, second ed., </title> <booktitle> vol. 3 of The Art of Computer Programming. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading Massachusetts, </address> <year> 1973, </year> <pages> pp. 481-499. </pages>
Reference-contexts: Various methods have been investigated to reduce the storage requirements of tries. The methods of primary interest are trie compaction in <ref> [1, 2, 9, 10] </ref> and trie compression 1 in [4, 11]. Although these two methods are different in their general structure, they are similar since both are based on the process of merging nodes of the trie into an array.
Reference: 11. <author> Purdin, T.D.M., </author> <title> Compressing Tries for Storing Dictionaries, </title> <booktitle> Proceedings of the 1990 Symposium on Applied Computing, Fayetteville, AR, </booktitle> <address> USA, </address> <month> 5-6 April </month> <year> 1990, </year> <pages> p. 336-340. </pages>
Reference-contexts: Various methods have been investigated to reduce the storage requirements of tries. The methods of primary interest are trie compaction in [1, 2, 9, 10] and trie compression 1 in <ref> [4, 11] </ref>. Although these two methods are different in their general structure, they are similar since both are based on the process of merging nodes of the trie into an array.
Reference: 12. <author> Tarjan, Robert E. and Andrew Chi-Chih Yao, </author> <title> Storing a Sparse Table, </title> <journal> Comm. of the ACM, v.22, </journal> <volume> n.11, </volume> <month> (Nov.) </month> <year> 1979, </year> <note> p.606-611. p.15 </note>
Reference-contexts: The problem of estimating the size of compressed tries without performing the actual merging of nodes is possible. A result of Tarjan and Yao <ref> [12] </ref> derived for storing sparse compiler tables allows certain tries, labeled harmonic tries, to be identified as being optimally compressible with an O (m) algorithm. This result is presented in the first section. In the second section, an estimate is introduced that provides a compression size estimate for non-harmonic tries.
Reference: 13. <author> Ziegler, </author> <title> S.F., Smaller faster table driven parser, </title> <type> Unpublished manuscript, </type> <institution> Madison Academic Comptg. Ctr., U. of Wisconsin, Madison, Wisconsin, </institution> <year> 1977. </year>
Reference-contexts: Harmonic Tries In many instances the matrix representation of a trie will be sparse. Tarjan and Yao analyzed the method, proposed by Ziegler in <ref> [13] </ref>, of storing a sparse matrix in a one dimensional array by merging the rows of the matrix while maintaining a row displacement that contains the absolute array address of each row.
References-found: 12

