URL: http://www.research.digital.com/SRC/personal/Michael_Mitzenmacher/NEWWORK/postscripts/stealing-conf.ps.gz
Refering-URL: http://www.research.digital.com/SRC/personal/Michael_Mitzenmacher/NEWWORK/papers.html
Root-URL: http://www.research.digital.com
Email: michaelm@pa.dec.com  
Title: Analyses of Load Stealing Models Based on Differential Equations  
Author: Michael Mitzenmacher 
Address: 130 Lytton Ave. Palo Alto, CA 94301  
Affiliation: Digital Systems Research Center  
Abstract: In this paper we develop models for and analyze several randomized work stealing algorithms in a dynamic setting. Our models represent the limiting behavior of systems as the number of processors grows to infinity using differential equations. The advantages of this approach include the ability to model a large variety of systems and to provide accurate numerical approximations of system behavior even when the number of processors is relatively small. We show how this approach can yield significant intuition about the behavior of work stealing algorithms in realistic settings. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Achlioptas and M. Molloy. </author> <title> The analysis of a list-coloring algorithm on a random graph. </title> <booktitle> In Proceedings of the 38th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 204-212, </pages> <year> 1997. </year>
Reference-contexts: The use of this approach in the study of algorithms dates back to work by Karp and Sipser [13], and has since been used to analyze several other algorithms, for example in <ref> [1, 11, 14, 21, 31, 32, 39] </ref>. Note that here we focus on how to use the technique and what insight it, in conjunction with simulations, gives us about work stealing algorithms, rather than on the technical relationship between the limiting and finite systems.
Reference: [2] <author> M. Alanyali and B. Hajek. </author> <title> Analysis of simple algorithms for dynamic load balancing. </title> <booktitle> In INFOCOM 95, </booktitle> <year> 1995. </year>
Reference-contexts: Our work is similar to theirs, although both our approach and our focus are different. The approach of using differential equations to study limiting versions of load balancing processes has been applied previously in several cases <ref> [2, 11, 22, 29, 37, 38] </ref>.
Reference: [3] <author> Y. Azar, A. Broder, A. Karlin, and E. Upfal. </author> <title> Balanced allocations. </title> <booktitle> In Proceedings of the 26th ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 593-602, </pages> <year> 1994. </year>
Reference-contexts: solutions to the differential equations can be used correctly determine the best threshold value for various arrival rates. 3.3 Multiple choices In load sharing algorithms, systems that have some choice of where to place new jobs has proven to have different performance characteristics than systems where jobs are placed randomly <ref> [3, 29, 37] </ref>. For example, suppose that, upon entry, a task chooses two servers uniformly at random, and queues at the one with the smaller load.
Reference: [4] <author> R. Blumofe. </author> <title> Executing Multithreaded Program Efficiently. </title> <type> PhD thesis, </type> <institution> Massachusetts Institute of Technology, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: Work stealing has therefore been a popular strategy for multithreaded computation. Several systems using the work-stealing idea have been implemented (see <ref> [4, p.6] </ref>), including the Cilk system [6, 8]. In this paper we analyze several simple randomized work stealing algorithms in a dynamic setting using simple Marko-vian models and an approach that has similarly been used to study work sharing algorithms [28, 29, 30, 37, 38].
Reference: [5] <author> R. Blumofe, M. Frigo, C. Joerg, C. Leiserson, and K. Randall. </author> <title> An analysis of dag-consistent distributed shared-memory algorithms. </title> <booktitle> In Proceedings of the 8th Annual ACM Syposium on Parallel Algorithms and Architectures, </booktitle> <year> 1996. </year>
Reference-contexts: variations of work stealing algorithms and different system parameters can be modeled and by comparing the results of these models with simulation results for systems with a small number of processors. 1.1 Previous Work Work stealing has been treated extensively in a series of papers by Blumofe, Leiserson, and others <ref> [5, 6, 7, 8] </ref>, who use work stealing in their Cilk system for parallel processing.
Reference: [6] <author> R. Blumofe, C. Joerg, B. Kuszmaul, C. Leiserson, K. Randall, and Y. Zhou. Cilk: </author> <title> An efficient multi-threaded runtime system. </title> <booktitle> In Proceedings of the 5th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <year> 1995. </year>
Reference-contexts: Work stealing has therefore been a popular strategy for multithreaded computation. Several systems using the work-stealing idea have been implemented (see [4, p.6]), including the Cilk system <ref> [6, 8] </ref>. In this paper we analyze several simple randomized work stealing algorithms in a dynamic setting using simple Marko-vian models and an approach that has similarly been used to study work sharing algorithms [28, 29, 30, 37, 38]. <p> variations of work stealing algorithms and different system parameters can be modeled and by comparing the results of these models with simulation results for systems with a small number of processors. 1.1 Previous Work Work stealing has been treated extensively in a series of papers by Blumofe, Leiserson, and others <ref> [5, 6, 7, 8] </ref>, who use work stealing in their Cilk system for parallel processing.
Reference: [7] <author> R. Blumofe and C. Leiserson. </author> <title> Space-efficient scheduling of multithreaded computations. </title> <booktitle> In Proceedings of the 25th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 362-371, </pages> <year> 1993. </year>
Reference-contexts: variations of work stealing algorithms and different system parameters can be modeled and by comparing the results of these models with simulation results for systems with a small number of processors. 1.1 Previous Work Work stealing has been treated extensively in a series of papers by Blumofe, Leiserson, and others <ref> [5, 6, 7, 8] </ref>, who use work stealing in their Cilk system for parallel processing.
Reference: [8] <author> R. Blumofe and C. Leiserson. </author> <title> Scheduling multithreaded computations by work stealing. </title> <booktitle> In Proceedings of the 35th Annual IEEE Conference on Foundations of Computer Science, </booktitle> <year> 1994. </year>
Reference-contexts: Work stealing has therefore been a popular strategy for multithreaded computation. Several systems using the work-stealing idea have been implemented (see [4, p.6]), including the Cilk system <ref> [6, 8] </ref>. In this paper we analyze several simple randomized work stealing algorithms in a dynamic setting using simple Marko-vian models and an approach that has similarly been used to study work sharing algorithms [28, 29, 30, 37, 38]. <p> Primarily we study variations of the WS algorithm described by Blumofe and Leiserson <ref> [8] </ref>. We focus on the dynamic model where tasks enter the system over time according to a Poisson arrival process and require exponentially distributed service times. This model proves simplest for our analysis; however, as we explain, we can also use this technique to analyze other arrival and service distributions. <p> variations of work stealing algorithms and different system parameters can be modeled and by comparing the results of these models with simulation results for systems with a small number of processors. 1.1 Previous Work Work stealing has been treated extensively in a series of papers by Blumofe, Leiserson, and others <ref> [5, 6, 7, 8] </ref>, who use work stealing in their Cilk system for parallel processing. <p> Convergence issues are discussed in Section 4. 2 Simple Work Stealing Systems In this section, we consider variations of the WS algorithm described by Blumofe and Leiserson <ref> [8] </ref> in a dynamic setting. These variations share an interesting property: in the limiting model, the fraction of processors with load at least i decreases geometrically for sufficiently large i. 2.1 A Dynamic Model We describe our initial model of a work stealing system. <p> Tasks are served according to a First In First Out (FIFO) policy. The load of a processor is the number of tasks at that processor. At certain times, a processor may attempt to steal a task from another processor. Following the terminology of <ref> [8] </ref>, we call a processor attempting to steal a thief, and say that it attempts to steal from a victim processor. We assume that stealing is accomplished instantaneously, so that the stolen task joins the queue of the thief immediately. <p> and arrivals are Poisson, the entire system is Markovian: the future of the system depends only on its present state, and not on the past that brought it to that state. 2.2 A Simple WS algorithm We initially study a variation of the WS algorithm described by Blumofe and Leiserson <ref> [8] </ref>. When a processor finds itself empty, it attempts to steal a task from a processor chosen uniformly at random. If a task is available that is, the victim processor has more than one task a task is stolen. <p> + T , the tails decrease geometrically according to i = B+T i (B+T ) This formula can be derived using intuition of Section 2.2, or by an inductive argument from the equivalent of equation (7) for this model. 2.5 Repeated Steal Attempts In the WS algorithm as described in <ref> [8] </ref>, if the thief fails to find a suitable victim on the first attempt, further attempts are made to find a suitable victim. We can model this behavior by allowing empty processors to repeatedly make steal attempts at a certain rate, say r per unit time.
Reference: [9] <author> D. L. Eager, E. D. Lazokwska, and J. Zahorjan. </author> <title> A comparison of receiver-initiated and sender-initiated adaptive load sharing. </title> <journal> Performance Evaluation Review, </journal> <volume> 16 </volume> <pages> 53-68, </pages> <month> March </month> <year> 1986. </year>
Reference-contexts: Other work stealing algorithms have also been developed and analyzed by Rudolph, Slivkin-Allalouf, and Upfal [34] and Karp and Zhang [15]. Work stealing has also been the subject of attention in the queueing theory literature, most notably in the early work by Eager, Lazwowska, and Zahorjan <ref> [9] </ref> and the later work by Mirchandaney, Towsley, and Stankovic [24, 25]. Our work is similar to theirs, although both our approach and our focus are different.
Reference: [10] <author> S. N. Ethier and T. G. Kurtz. </author> <title> Markov Processes: Characterization and Convergence. </title> <publisher> John Wiley and Sons, </publisher> <year> 1986. </year>
Reference-contexts: Techni cally, the relationship between the limiting system consist-ing of a family of differential equations and systems with a finite number of processors can be derived using the theory of large deviations; see, for instance, the body of work of Kurtz <ref> [10, 17, 18, 19, 20] </ref>, or a more modern treatment by Shwartz and Weiss [35]. <p> Rather than focus on the technical details of this convergence, we explore how to use this methodology. The details of the theory behind this convergence can be found in many sources, including <ref> [10, 29, 37, 38, 39] </ref>. Let us now consider how to modify the above equations in the case of load stealing. A processor that completes its final task attempts to find a victim, thereby reducing the rate at which it actually empties.
Reference: [11] <author> B. Hajek. </author> <title> Asymptotic analysis of an assignment problem arising in a distributed communications protocol. </title> <booktitle> In Proceedings of the 27th Conference on Decision and Control, </booktitle> <pages> pages 1455-1459, </pages> <year> 1988. </year>
Reference-contexts: Our work is similar to theirs, although both our approach and our focus are different. The approach of using differential equations to study limiting versions of load balancing processes has been applied previously in several cases <ref> [2, 11, 22, 29, 37, 38] </ref>. <p> The use of this approach in the study of algorithms dates back to work by Karp and Sipser [13], and has since been used to analyze several other algorithms, for example in <ref> [1, 11, 14, 21, 31, 32, 39] </ref>. Note that here we focus on how to use the technique and what insight it, in conjunction with simulations, gives us about work stealing algorithms, rather than on the technical relationship between the limiting and finite systems.
Reference: [12] <author> M. Harchol-Balter and D. Wolfe. </author> <title> Bounding delays in packet-routing networks. </title> <booktitle> In Proceedings of the Twenty-Seventh Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 248-257, </pages> <year> 1995. </year>
Reference-contexts: We do not have a proof that this holds in general; it would be interesting to prove such a result either using the fixed point (see [29, Section 4.3]) or other techniques (see, for example, <ref> [12, 26, 27, 33, 36] </ref>). 3.2 Transfer time Up to this point we have assumed that a job can be transferred instantaneously to another processor. More realistically moving a task from the victim to the thief will require some time for transfer.
Reference: [13] <author> R. M. Karp and M. Sipser. </author> <title> Maximum matchings in sparse random graphs. </title> <booktitle> In Proceedings of the 22nd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 364-375, </pages> <year> 1981. </year>
Reference-contexts: The use of this approach in the study of algorithms dates back to work by Karp and Sipser <ref> [13] </ref>, and has since been used to analyze several other algorithms, for example in [1, 11, 14, 21, 31, 32, 39].
Reference: [14] <author> R. M. Karp, U. V. Vazirani, and V. V. Vazirani. </author> <title> An optimal algorithm for on-line bipartite matching. </title> <booktitle> In Proceedings of the 22nd ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 352-358, </pages> <year> 1990. </year>
Reference-contexts: The use of this approach in the study of algorithms dates back to work by Karp and Sipser [13], and has since been used to analyze several other algorithms, for example in <ref> [1, 11, 14, 21, 31, 32, 39] </ref>. Note that here we focus on how to use the technique and what insight it, in conjunction with simulations, gives us about work stealing algorithms, rather than on the technical relationship between the limiting and finite systems.
Reference: [15] <author> R. M. Karp and Y. Zhang. </author> <title> A randomized parallel branch-and-bound procedure. </title> <booktitle> In Proceedings of the 20th ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 290-300, </pages> <year> 1988. </year>
Reference-contexts: Their experiments further show that their algorithms work well in practice. Other work stealing algorithms have also been developed and analyzed by Rudolph, Slivkin-Allalouf, and Upfal [34] and Karp and Zhang <ref> [15] </ref>. Work stealing has also been the subject of attention in the queueing theory literature, most notably in the early work by Eager, Lazwowska, and Zahorjan [9] and the later work by Mirchandaney, Towsley, and Stankovic [24, 25].
Reference: [16] <author> L. Kleinrock. </author> <title> Queueing Systems, Volume I: Theory. </title> <publisher> John Wiley and Sons, </publisher> <year> 1976. </year>
Reference: [17] <author> T. G. Kurtz. </author> <title> Solutions of ordinary differential equations as limits of pure jump Markov processes. </title> <journal> Journal of Applied Probability, </journal> <volume> 7 </volume> <pages> 49-58, </pages> <year> 1970. </year>
Reference-contexts: Techni cally, the relationship between the limiting system consist-ing of a family of differential equations and systems with a finite number of processors can be derived using the theory of large deviations; see, for instance, the body of work of Kurtz <ref> [10, 17, 18, 19, 20] </ref>, or a more modern treatment by Shwartz and Weiss [35].
Reference: [18] <author> T. G. Kurtz. </author> <title> Limit theorems for sequences of jump Markov processes approximating ordinary differential processes. </title> <journal> Journal of Applied Probability, </journal> <volume> 8 </volume> <pages> 344-356, </pages> <year> 1971. </year>
Reference-contexts: Techni cally, the relationship between the limiting system consist-ing of a family of differential equations and systems with a finite number of processors can be derived using the theory of large deviations; see, for instance, the body of work of Kurtz <ref> [10, 17, 18, 19, 20] </ref>, or a more modern treatment by Shwartz and Weiss [35].
Reference: [19] <author> T. G. Kurtz. </author> <title> Strong approximation theorems for density dependent Markov chains. </title> <booktitle> Stochastic Processes and Applications, </booktitle> <volume> 6 </volume> <pages> 223-240, </pages> <year> 1978. </year>
Reference-contexts: Techni cally, the relationship between the limiting system consist-ing of a family of differential equations and systems with a finite number of processors can be derived using the theory of large deviations; see, for instance, the body of work of Kurtz <ref> [10, 17, 18, 19, 20] </ref>, or a more modern treatment by Shwartz and Weiss [35].
Reference: [20] <author> T. G. Kurtz. </author> <title> Approximation of Population Processes. </title> <booktitle> CBMS-NSF Regional Conf. Series in Applied Math. </booktitle> <publisher> SIAM, </publisher> <year> 1981. </year>
Reference-contexts: Techni cally, the relationship between the limiting system consist-ing of a family of differential equations and systems with a finite number of processors can be derived using the theory of large deviations; see, for instance, the body of work of Kurtz <ref> [10, 17, 18, 19, 20] </ref>, or a more modern treatment by Shwartz and Weiss [35].
Reference: [21] <author> M. Luby, M. Mitzenmacher, M. A. Shokrollahi, D. Spielman, and V. Stemann. </author> <title> Practical loss-resilient codes. </title> <booktitle> In Proceedings of the 29th ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 150-159, </pages> <year> 1997. </year>
Reference-contexts: The use of this approach in the study of algorithms dates back to work by Karp and Sipser [13], and has since been used to analyze several other algorithms, for example in <ref> [1, 11, 14, 21, 31, 32, 39] </ref>. Note that here we focus on how to use the technique and what insight it, in conjunction with simulations, gives us about work stealing algorithms, rather than on the technical relationship between the limiting and finite systems.
Reference: [22] <author> J. Martin and Y. M. Suhov. </author> <title> Fast jackson networks. </title> <note> available at www.statslab.cam.ac.uk/~jmb, January 1998. </note>
Reference-contexts: Our work is similar to theirs, although both our approach and our focus are different. The approach of using differential equations to study limiting versions of load balancing processes has been applied previously in several cases <ref> [2, 11, 22, 29, 37, 38] </ref>.
Reference: [23] <author> A. N. Michel and R. K. Miller. </author> <title> Qualitative Analysis of Large Scale Dynamical Systems. </title> <publisher> Academic Press, Inc., </publisher> <year> 1977. </year>
Reference-contexts: We now consider the technical problem of defining dD=dt when * i (t) = 0 for some i. Since we are interested in the forward progress of the system, it is sufficient to consider the upper right-hand derivatives of * i . (See, for instance, <ref> [23, p. 16] </ref>.) That is, we may define dj* i j fi fi t=t 0 t!t + j* i (t)j ; and similarly for d=dt.
Reference: [24] <author> R. Mirchandaney, D. Towsley, and J. A. Stankovic. </author> <title> Analysis of the effects of delays on load sharing. </title> <journal> Journal of Parallel and Distributed Systems, </journal> <volume> 1513-1525:331-346, </volume> <month> November </month> <year> 1989. </year>
Reference-contexts: Work stealing has also been the subject of attention in the queueing theory literature, most notably in the early work by Eager, Lazwowska, and Zahorjan [9] and the later work by Mirchandaney, Towsley, and Stankovic <ref> [24, 25] </ref>. Our work is similar to theirs, although both our approach and our focus are different. The approach of using differential equations to study limiting versions of load balancing processes has been applied previously in several cases [2, 11, 22, 29, 37, 38].
Reference: [25] <author> R. Mirchandaney, D. Towsley, and J. A. Stankovic. </author> <title> Adaptive load sharing in heterogeneous systems. </title> <journal> Journal of Parallel and Distributed Systems, </journal> <volume> 9 </volume> <pages> 331-346, </pages> <year> 1990. </year>
Reference-contexts: Work stealing has also been the subject of attention in the queueing theory literature, most notably in the early work by Eager, Lazwowska, and Zahorjan [9] and the later work by Mirchandaney, Towsley, and Stankovic <ref> [24, 25] </ref>. Our work is similar to theirs, although both our approach and our focus are different. The approach of using differential equations to study limiting versions of load balancing processes has been applied previously in several cases [2, 11, 22, 29, 37, 38].
Reference: [26] <author> M. Mitzenmacher. </author> <title> Bounds on the greedy routing algorithm for array networks. </title> <booktitle> In Proceedings of the Sixth Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 248-259, </pages> <year> 1994. </year> <note> To appear in the Journal of Computer Systems and Science. </note>
Reference-contexts: We do not have a proof that this holds in general; it would be interesting to prove such a result either using the fixed point (see [29, Section 4.3]) or other techniques (see, for example, <ref> [12, 26, 27, 33, 36] </ref>). 3.2 Transfer time Up to this point we have assumed that a job can be transferred instantaneously to another processor. More realistically moving a task from the victim to the thief will require some time for transfer.
Reference: [27] <author> M. Mitzenmacher. </author> <title> Constant time per edge is optimal on rooted tree networks. </title> <booktitle> In Proceedings of the Eighth Annual ACM Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 162-169, </pages> <year> 1996. </year>
Reference-contexts: We do not have a proof that this holds in general; it would be interesting to prove such a result either using the fixed point (see [29, Section 4.3]) or other techniques (see, for example, <ref> [12, 26, 27, 33, 36] </ref>). 3.2 Transfer time Up to this point we have assumed that a job can be transferred instantaneously to another processor. More realistically moving a task from the victim to the thief will require some time for transfer.
Reference: [28] <author> M. Mitzenmacher. </author> <title> Load balancing and density dependent jump Markov processes. </title> <booktitle> In Proceedings of the 37th IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 213-222, </pages> <year> 1996. </year>
Reference-contexts: In this paper we analyze several simple randomized work stealing algorithms in a dynamic setting using simple Marko-vian models and an approach that has similarly been used to study work sharing algorithms <ref> [28, 29, 30, 37, 38] </ref>. Primarily we study variations of the WS algorithm described by Blumofe and Leiserson [8]. We focus on the dynamic model where tasks enter the system over time according to a Poisson arrival process and require exponentially distributed service times.
Reference: [29] <author> M. Mitzenmacher. </author> <title> The Power of Two Choices in Randomized Load Balancing. </title> <type> PhD thesis, </type> <institution> University of Cal-ifornia at Berkeley, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: In this paper we analyze several simple randomized work stealing algorithms in a dynamic setting using simple Marko-vian models and an approach that has similarly been used to study work sharing algorithms <ref> [28, 29, 30, 37, 38] </ref>. Primarily we study variations of the WS algorithm described by Blumofe and Leiserson [8]. We focus on the dynamic model where tasks enter the system over time according to a Poisson arrival process and require exponentially distributed service times. <p> Our work is similar to theirs, although both our approach and our focus are different. The approach of using differential equations to study limiting versions of load balancing processes has been applied previously in several cases <ref> [2, 11, 22, 29, 37, 38] </ref>. <p> Rather than focus on the technical details of this convergence, we explore how to use this methodology. The details of the theory behind this convergence can be found in many sources, including <ref> [10, 29, 37, 38, 39] </ref>. Let us now consider how to modify the above equations in the case of load stealing. A processor that completes its final task attempts to find a victim, thereby reducing the rate at which it actually empties. <p> We do not have a proof that this holds in general; it would be interesting to prove such a result either using the fixed point (see <ref> [29, Section 4.3] </ref>) or other techniques (see, for example, [12, 26, 27, 33, 36]). 3.2 Transfer time Up to this point we have assumed that a job can be transferred instantaneously to another processor. <p> solutions to the differential equations can be used correctly determine the best threshold value for various arrival rates. 3.3 Multiple choices In load sharing algorithms, systems that have some choice of where to place new jobs has proven to have different performance characteristics than systems where jobs are placed randomly <ref> [3, 29, 37] </ref>. For example, suppose that, upon entry, a task chooses two servers uniformly at random, and queues at the one with the smaller load. <p> That is, we would like to show convergence of the system to its fixed point. Such convergence results have been shown previously for similar systems in <ref> [29, 37, 38] </ref>. In some cases where we cannot prove convergence, we can prove a weaker result, namely the stability of the fixed point. <p> Techniques for proving stability are also described in <ref> [29, Section 4.6] </ref>. In the work stealing setting, both stability and convergence results prove difficult. Even for the simple system given by equations (2) and (3), we can only prove the stability of the fixed point for sufficiently small arrival rates , as we shall show in the theorem below.
Reference: [30] <author> M. Mitzenmacher. </author> <title> On the analysis of randomized load balancing schemes. </title> <booktitle> In Proceedings of the 9th Annual Symposium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 292-301, </pages> <year> 1997. </year>
Reference-contexts: In this paper we analyze several simple randomized work stealing algorithms in a dynamic setting using simple Marko-vian models and an approach that has similarly been used to study work sharing algorithms <ref> [28, 29, 30, 37, 38] </ref>. Primarily we study variations of the WS algorithm described by Blumofe and Leiserson [8]. We focus on the dynamic model where tasks enter the system over time according to a Poisson arrival process and require exponentially distributed service times.
Reference: [31] <author> M. Mitzenmacher. </author> <title> Tight thresholds for the pure literal rule. </title> <type> Technical Report Technical Note 1997-011, </type> <institution> Digital Systems Research Center, </institution> <month> June </month> <year> 1997. </year>
Reference-contexts: The use of this approach in the study of algorithms dates back to work by Karp and Sipser [13], and has since been used to analyze several other algorithms, for example in <ref> [1, 11, 14, 21, 31, 32, 39] </ref>. Note that here we focus on how to use the technique and what insight it, in conjunction with simulations, gives us about work stealing algorithms, rather than on the technical relationship between the limiting and finite systems.
Reference: [32] <author> B. Pittel, J. Spencer, and N. Wormald. </author> <title> Sudden emergence of a giant k-core in a random graph. </title> <journal> Journal of Combinatorial Series B, </journal> <volume> 67 </volume> <pages> 111-151, </pages> <year> 1996. </year>
Reference-contexts: The use of this approach in the study of algorithms dates back to work by Karp and Sipser [13], and has since been used to analyze several other algorithms, for example in <ref> [1, 11, 14, 21, 31, 32, 39] </ref>. Note that here we focus on how to use the technique and what insight it, in conjunction with simulations, gives us about work stealing algorithms, rather than on the technical relationship between the limiting and finite systems.
Reference: [33] <author> R. Righter. and J. Shanthikumar. </author> <title> Extremal properties of the FIFO discipline in queueing networks. </title> <journal> Journal of Applied Probability, </journal> <volume> 29 </volume> <pages> 967-978, </pages> <month> November </month> <year> 1992. </year>
Reference-contexts: We do not have a proof that this holds in general; it would be interesting to prove such a result either using the fixed point (see [29, Section 4.3]) or other techniques (see, for example, <ref> [12, 26, 27, 33, 36] </ref>). 3.2 Transfer time Up to this point we have assumed that a job can be transferred instantaneously to another processor. More realistically moving a task from the victim to the thief will require some time for transfer.
Reference: [34] <author> L. Rudolph, M. Slivkin-Allalouf, and E. Upfal. </author> <title> A simple load balancing scheme for task allocation in parallel machines. </title> <booktitle> In Proceedings of the 3rd Annual ACM Sy-posium on Parallel Algorithms and Architectures, </booktitle> <pages> pages 237-245, </pages> <year> 1991. </year>
Reference-contexts: Their experiments further show that their algorithms work well in practice. Other work stealing algorithms have also been developed and analyzed by Rudolph, Slivkin-Allalouf, and Upfal <ref> [34] </ref> and Karp and Zhang [15]. Work stealing has also been the subject of attention in the queueing theory literature, most notably in the early work by Eager, Lazwowska, and Zahorjan [9] and the later work by Mirchandaney, Towsley, and Stankovic [24, 25]. <p> More complicated algorithms that steal multiple items at a time are also possible. For example, we consider a variation of a load balancing algorithm suggested by Rudolph, Slivkin-Allalouf, and Upfal <ref> [34] </ref>, in which a processor at certain randomly determined steps chooses another processor uniformly at random and the two machines balance the load between them.
Reference: [35] <author> A. Shwartz and A. Weiss. </author> <title> Large Deviations for Performance Analysis. </title> <publisher> Chapman & Hall, </publisher> <year> 1995. </year>
Reference-contexts: the limiting system consist-ing of a family of differential equations and systems with a finite number of processors can be derived using the theory of large deviations; see, for instance, the body of work of Kurtz [10, 17, 18, 19, 20], or a more modern treatment by Shwartz and Weiss <ref> [35] </ref>. The use of this approach in the study of algorithms dates back to work by Karp and Sipser [13], and has since been used to analyze several other algorithms, for example in [1, 11, 14, 21, 31, 32, 39].
Reference: [36] <author> G. D. Stamoulis and J. N. Tsitsiklis. </author> <title> The efficiency of greedy routing in hypercubes and butterflies. </title> <journal> IEEE Transactions on Communications, </journal> <volume> 42(11) </volume> <pages> 3051-3061, </pages> <month> November </month> <year> 1994. </year> <note> An early version appeared in the Proceedings of the Second Annual ACM Symposium on Parallel Algorithms and Architectures, </note> <author> p. </author> <month> 248-259, </month> <year> 1991. </year>
Reference-contexts: We do not have a proof that this holds in general; it would be interesting to prove such a result either using the fixed point (see [29, Section 4.3]) or other techniques (see, for example, <ref> [12, 26, 27, 33, 36] </ref>). 3.2 Transfer time Up to this point we have assumed that a job can be transferred instantaneously to another processor. More realistically moving a task from the victim to the thief will require some time for transfer.
Reference: [37] <author> N. D. Vvedenskaya, R. L. Dobrushin, and F. I. Karpele-vich. </author> <title> Queueing system with selection of the shortest of two queues: An asymptotic approach. </title> <journal> Problems of Information Transmission, </journal> <volume> 32 </volume> <pages> 15-27, </pages> <year> 1996. </year>
Reference-contexts: In this paper we analyze several simple randomized work stealing algorithms in a dynamic setting using simple Marko-vian models and an approach that has similarly been used to study work sharing algorithms <ref> [28, 29, 30, 37, 38] </ref>. Primarily we study variations of the WS algorithm described by Blumofe and Leiserson [8]. We focus on the dynamic model where tasks enter the system over time according to a Poisson arrival process and require exponentially distributed service times. <p> Our work is similar to theirs, although both our approach and our focus are different. The approach of using differential equations to study limiting versions of load balancing processes has been applied previously in several cases <ref> [2, 11, 22, 29, 37, 38] </ref>. <p> Rather than focus on the technical details of this convergence, we explore how to use this methodology. The details of the theory behind this convergence can be found in many sources, including <ref> [10, 29, 37, 38, 39] </ref>. Let us now consider how to modify the above equations in the case of load stealing. A processor that completes its final task attempts to find a victim, thereby reducing the rate at which it actually empties. <p> solutions to the differential equations can be used correctly determine the best threshold value for various arrival rates. 3.3 Multiple choices In load sharing algorithms, systems that have some choice of where to place new jobs has proven to have different performance characteristics than systems where jobs are placed randomly <ref> [3, 29, 37] </ref>. For example, suppose that, upon entry, a task chooses two servers uniformly at random, and queues at the one with the smaller load. <p> That is, we would like to show convergence of the system to its fixed point. Such convergence results have been shown previously for similar systems in <ref> [29, 37, 38] </ref>. In some cases where we cannot prove convergence, we can prove a weaker result, namely the stability of the fixed point.
Reference: [38] <author> N. D. Vvedenskaya and Y. M. Suhov. </author> <title> Dobrushin's mean-field approximation for a queue with dynamic routing. </title> <type> Technical Report 3328, </type> <institution> INRIA, </institution> <month> December </month> <year> 1997. </year>
Reference-contexts: In this paper we analyze several simple randomized work stealing algorithms in a dynamic setting using simple Marko-vian models and an approach that has similarly been used to study work sharing algorithms <ref> [28, 29, 30, 37, 38] </ref>. Primarily we study variations of the WS algorithm described by Blumofe and Leiserson [8]. We focus on the dynamic model where tasks enter the system over time according to a Poisson arrival process and require exponentially distributed service times. <p> Our work is similar to theirs, although both our approach and our focus are different. The approach of using differential equations to study limiting versions of load balancing processes has been applied previously in several cases <ref> [2, 11, 22, 29, 37, 38] </ref>. <p> Rather than focus on the technical details of this convergence, we explore how to use this methodology. The details of the theory behind this convergence can be found in many sources, including <ref> [10, 29, 37, 38, 39] </ref>. Let us now consider how to modify the above equations in the case of load stealing. A processor that completes its final task attempts to find a victim, thereby reducing the rate at which it actually empties. <p> That is, we would like to show convergence of the system to its fixed point. Such convergence results have been shown previously for similar systems in <ref> [29, 37, 38] </ref>. In some cases where we cannot prove convergence, we can prove a weaker result, namely the stability of the fixed point.
Reference: [39] <author> N. C. Wormald. </author> <title> Differential equations for random processes and random graphs. </title> <journal> Annals of Appl. Prob., </journal> <volume> 5 </volume> <pages> 1217-1235, </pages> <year> 1995. </year>
Reference-contexts: The use of this approach in the study of algorithms dates back to work by Karp and Sipser [13], and has since been used to analyze several other algorithms, for example in <ref> [1, 11, 14, 21, 31, 32, 39] </ref>. Note that here we focus on how to use the technique and what insight it, in conjunction with simulations, gives us about work stealing algorithms, rather than on the technical relationship between the limiting and finite systems. <p> Rather than focus on the technical details of this convergence, we explore how to use this methodology. The details of the theory behind this convergence can be found in many sources, including <ref> [10, 29, 37, 38, 39] </ref>. Let us now consider how to modify the above equations in the case of load stealing. A processor that completes its final task attempts to find a victim, thereby reducing the rate at which it actually empties.
References-found: 39

