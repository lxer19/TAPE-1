URL: http://choices.cs.uiuc.edu/sane/read.ps.gz
Refering-URL: http://choices.cs.uiuc.edu/sane/home.html
Root-URL: http://www.cs.uiuc.edu
Email: email: sane@iconcomp.com  
Title: ALPHA DRAFT Writing programs and documentation to meet reader expectations  
Author: Aamod Sane 
Date: May 19, 1998  
Address: 11940 Jollyville Road, Suite 300-N, Austin, TX 78759  
Affiliation: Icon Computing  
Abstract: Rules of thumb such as "place important material at the end of a sentence" are commonly used in writing. Such guidelines describe reader expectations that good writers satisfy. This paper extends this idea to the study of reader expectations for program readers. The paper presents a pattern language of reader expectations, and exhibits its use in diverse cultures, including literate programming, extreme programming, T E X programming and Unix programming. The approach offers a perspective that may help improve documentation practices in different contexts.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Kent Beck. </author> <title> Smalltalk Best Practice Patterns. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1996. </year>
Reference-contexts: Books such as Concurrent Programming in Java [15] help, but inexperienced developers underestimate the subtleties of concurrent programming. 4.6 Open Sesame The right names for objects and operations help make complex designs understandable. Therefore: Consider books like Smalltalk Best Practices Patterns <ref> [1] </ref> that suggest ways to choose good names. Use style guides for selecting names of variables. Keep a thesaurus and dictionary at hand. Examples: Experience suggests that one of the greatest benefits of development processes is to produce agreement regarding notation, and to synchronize program names with business concepts. <p> Therefore: Supply readers with birds-eye view documentation and various diagrams for the rest of the code. At a line by line level, the code must be self documenting, using expressive names (Open Sesame), standard idioms (Programming Idioms), etc. Consider books like Smalltalk Best Practices Patterns <ref> [1] </ref> that teach principles of communicative programming. Examples: After understanding the architecture overview, programmers often directly proceed to the code. Then they employ methods like Examples are Documentation. <p> Similar C++ pairs include Stroustrup [22], and Scott Meyers [17]. For Smalltalk, the combination might be the "Blue" Book [7], the Smalltalk image itself, and Beck <ref> [1] </ref>. 5.2 Naming conventions Naming conventions are important as shorthand, and sometimes to avoid obscure bugs. Often, tools in the environment will depend on them. Readers associate semantics with names in certain forms. Therefore: Study the project guidelines for naming, and follow them. If in doubt, consult the local guru. <p> The papers written by the architects show how STL embodies a style called generic programming. Object oriented languages are usually versatile enough to emulate other styles such as functional programming. The Smalltalk collections library makes use of this style using Smalltalk blocks. Books such as Smalltalk best practice patterns <ref> [1] </ref> show how to emulate the "native" Smalltalk styles. 5.4 Program organization Styles of program organization are sensitive to the culture and the kind of tools native to that culture. Often this knowledge is implicit within the community, existing only in the form of programs.
Reference: [2] <author> Grady Booch. </author> <title> Object-oriented Analysis and Design with Applications. </title> <address> Benjamin/Cummings, California, </address> <year> 1994. </year>
Reference-contexts: Therefore: Ensure that program units are cohesive: that is, their subcomponents implement a clearly defined aspect of the overall program. Motivate and document the decomposition you have chosen. Follow the rules of your programming culture. Examples: Booch <ref> [2] </ref>, Martin [16] and others argue the importance of units for program understanding, deployment, and release. 4.3 Why This And Not That Often, a particular design is easier understand when contrasted with other plausible designs that are not applicable.
Reference: [3] <author> Frank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, and Michael Stal. </author> <title> Pattern Oriented Software Architecture : A System of Patterns. </title> <publisher> John Wiley & Sons, </publisher> <address> New York, </address> <year> 1996. </year>
Reference-contexts: To maintain coherence as the program evolves, the changes should respect the styles. Therefore: Where possible, refer to standard sources of architectural styles, such as Buschmann <ref> [3] </ref>. Garlan [21]. Use "bibles" that describe, for instance, functional or logic programming. Use idioms of the style in standard ways. Examples: The C++ Standard Template Library [4] is intended to be an extensible library framework.
Reference: [4] <author> Alexander Stepanov David R. Musser, Atul Saini. </author> <title> Stl Tutorial & Reference Guide : C++ Programming With the Standard Template Library. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1996. </year>
Reference-contexts: Therefore: Where possible, refer to standard sources of architectural styles, such as Buschmann [3]. Garlan [21]. Use "bibles" that describe, for instance, functional or logic programming. Use idioms of the style in standard ways. Examples: The C++ Standard Template Library <ref> [4] </ref> is intended to be an extensible library framework. It uses a functional style, in a way that elegantly extends the basic C++ imperative style. The papers written by the architects show how STL embodies a style called generic programming.
Reference: [5] <author> Christopher W. Fraser and David R. Hanson. </author> <title> A Retargetable C Compiler: Design and Implementation. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1995. </year>
Reference-contexts: Some readers may have to adapt to the writers style. Typically, literate programming has seen use in situations where Reader is User and and Reader is Not Writer, so that the code stabilizes. These cases include Knuth's "T E X The Program" [11], Fraser and Hanson's <ref> [5] </ref> book on compiler construction. There are reports of industrial practice [19], to bring users up to speed | Reader is proto-Expert. The Java libraries, where again Reader is User, practice semi-literate programming.
Reference: [6] <author> Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. </author> <title> Design Patterns: Elements of Object-Oriented Software Architecture. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1994. </year>
Reference-contexts: This remains true for recursive sub-parts of the program. Therefore: When it is natural, capture the overall function in a Controller object that is part Facade <ref> [6] </ref> and part Mediator [6]. In other cases, maintain records of scenarios and collaboration 5 ALPHA DRAFT diagrams that highlight the essential components and their interactions. Often, the test driver of a program will reveal the overall program organization. Examples: The importance of overall architecture is well known. <p> This remains true for recursive sub-parts of the program. Therefore: When it is natural, capture the overall function in a Controller object that is part Facade <ref> [6] </ref> and part Mediator [6]. In other cases, maintain records of scenarios and collaboration 5 ALPHA DRAFT diagrams that highlight the essential components and their interactions. Often, the test driver of a program will reveal the overall program organization. Examples: The importance of overall architecture is well known.
Reference: [7] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk 80 : The Language. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1989. </year>
Reference-contexts: Similar C++ pairs include Stroustrup [22], and Scott Meyers [17]. For Smalltalk, the combination might be the "Blue" Book <ref> [7] </ref>, the Smalltalk image itself, and Beck [1]. 5.2 Naming conventions Naming conventions are important as shorthand, and sometimes to avoid obscure bugs. Often, tools in the environment will depend on them. Readers associate semantics with names in certain forms. Therefore: Study the project guidelines for naming, and follow them.
Reference: [8] <author> Watts Humphrey. </author> <title> A Discipline for Software Engineering. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1995. </year> <note> 17 ALPHA DRAFT </note>
Reference-contexts: Discussions and explanations well known techniques for gaining perspective on your work. A famous example of programming diary is Knuths diary and the resulting paper, The Errors of T E X [12] Diaries have been recommended by Watts Humphrey for his Personal Software Process <ref> [8] </ref>. Emacs includes a special mode for keeping change logs of programs; they may be accompanied by design notes. 3.4 Reader is Other Other roles in programming include team leader, tester, release manager and so on.
Reference: [9] <author> Ron Jeffries, Kent Beck, and Ward Cunningham. </author> <title> Extreme Programming. </title> <note> www.armaties.com, 1997. </note>
Reference-contexts: They do not write documents; they write programs and strip out the comments, inverting Knuth's intent. 7.2 Extreme Programming Where Literate Programming says you should write documents not code, Extreme Programming says write Code that communicates, but do not document beyond necessity. See <ref> [9] </ref> for further details. Here, the documentation patterns play out as follows. Readers Purpose In this culture, no Reader is User. If Reader is Proto-Expert, he is encouraged to Just ask and read Code that communicates. If Reader is Writer, he is encouraged to follow Pair Programming.
Reference: [10] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language : ANSI C Version. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1988. </year>
Reference-contexts: Other texts include collections of advice, traps and pitfalls that become apparent after long use. Examples: There are many examples: the Kernighan and Ritchie <ref> [10] </ref>, C bible, followed by books from Andrew Koenig [13] and later Peter van der Linden [24], documenting best practices and pitfalls. Similar C++ pairs include Stroustrup [22], and Scott Meyers [17].
Reference: [11] <author> Donald Ervin Knuth. </author> <title> Tex : The Program. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1986. </year>
Reference-contexts: Some readers may have to adapt to the writers style. Typically, literate programming has seen use in situations where Reader is User and and Reader is Not Writer, so that the code stabilizes. These cases include Knuth's "T E X The Program" <ref> [11] </ref>, Fraser and Hanson's [5] book on compiler construction. There are reports of industrial practice [19], to bring users up to speed | Reader is proto-Expert. The Java libraries, where again Reader is User, practice semi-literate programming.
Reference: [12] <author> Donald Ervin Knuth. </author> <title> The errors of T E X. </title> <journal> Software Practice and Experience, </journal> <volume> 19(7) </volume> <pages> 607-685, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: You let the issues sink in, meditate on the problems and solution, and often interesting ideas bubble up. Discussions and explanations well known techniques for gaining perspective on your work. A famous example of programming diary is Knuths diary and the resulting paper, The Errors of T E X <ref> [12] </ref> Diaries have been recommended by Watts Humphrey for his Personal Software Process [8]. Emacs includes a special mode for keeping change logs of programs; they may be accompanied by design notes. 3.4 Reader is Other Other roles in programming include team leader, tester, release manager and so on.
Reference: [13] <author> Andrew Koenig. </author> <title> C Traps and Pitfalls. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Mas-sachusetts, </address> <year> 1988. </year>
Reference-contexts: Other texts include collections of advice, traps and pitfalls that become apparent after long use. Examples: There are many examples: the Kernighan and Ritchie [10], C bible, followed by books from Andrew Koenig <ref> [13] </ref> and later Peter van der Linden [24], documenting best practices and pitfalls. Similar C++ pairs include Stroustrup [22], and Scott Meyers [17].
Reference: [14] <author> Leslie Lamport. </author> <title> Latex : A Documentation Preparation System User's Guide and Reference Manual. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1991. </year>
Reference-contexts: The quirks of language mean that it is hard to be more than a proto-expert. This leads to the evolution of a few wizards, who perform acts of magic such as emulating structured programming within T E X <ref> [14] </ref>, getting T E X and postscript to cooperate to produce versatile figure drawing macros [25] and so on. However, virtually all these feats are individual performances; the pattern Reader Is Writer is rare.
Reference: [15] <author> Doug Lea. </author> <title> Concurrent Programming in Java : Design Principles and Patterns. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1996. </year>
Reference-contexts: Examples: It is common to include references to textbooks for unusual algorithms. With the coming of Java, concurrent programming has become widespread, but not widely understood. Books such as Concurrent Programming in Java <ref> [15] </ref> help, but inexperienced developers underestimate the subtleties of concurrent programming. 4.6 Open Sesame The right names for objects and operations help make complex designs understandable. Therefore: Consider books like Smalltalk Best Practices Patterns [1] that suggest ways to choose good names. Use style guides for selecting names of variables.
Reference: [16] <author> Robert Cecil Martin. </author> <title> Designing Object-Oriented C++ Applications : Using the Booch Method Discipline. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1995. </year>
Reference-contexts: Therefore: Ensure that program units are cohesive: that is, their subcomponents implement a clearly defined aspect of the overall program. Motivate and document the decomposition you have chosen. Follow the rules of your programming culture. Examples: Booch [2], Martin <ref> [16] </ref> and others argue the importance of units for program understanding, deployment, and release. 4.3 Why This And Not That Often, a particular design is easier understand when contrasted with other plausible designs that are not applicable.
Reference: [17] <author> Scott Meyers. </author> <title> Effective C++ : 50 Specific Ways to Improve Your Programs and Designs. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1997. </year>
Reference-contexts: They are not shy about recursive control structures, despite the presence of iterative ones. Overuse of iteration in a lisp program feels awkward. Over time, books and tools support these artifacts. For example, the C lint tool, similar tools that include the Scott Meyers <ref> [17] </ref> C++ guidelines. 4.12 Environment and Tool Idioms Programming environments entail their own idioms. A skilled reader uses these without a second thought. For instance, in interpretive environments, a common way to understand programs is to follow its execution in a debugger. <p> Examples: There are many examples: the Kernighan and Ritchie [10], C bible, followed by books from Andrew Koenig [13] and later Peter van der Linden [24], documenting best practices and pitfalls. Similar C++ pairs include Stroustrup [22], and Scott Meyers <ref> [17] </ref>. For Smalltalk, the combination might be the "Blue" Book [7], the Smalltalk image itself, and Beck [1]. 5.2 Naming conventions Naming conventions are important as shorthand, and sometimes to avoid obscure bugs. Often, tools in the environment will depend on them. Readers associate semantics with names in certain forms. <p> This idiom helps detect the common typing mistake where you type = instead of ==. Another idiom involves embedding macros as do macro while (0) so that the the semicolon after the macro is gobbled up. C++ has equally strange idioms, enough to fill books <ref> [17] </ref>. 5.6 Organization culture This pattern involves support documentation. It is included primararily for completeness, because I think proper discussion requires the context of organization issues discussed in organization patterns. The program development organization needs documents that are important to readers other than programmers; see Reader is Other.
Reference: [18] <author> David L. Parnas. </author> <title> A Rational Design Process: How and Why to Fake it. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> February </month> <year> 1986. </year>
Reference-contexts: Therefore: Record the design decisions. The structure of pattern descriptions suggests a suitable form. Discuss the pro-and-con aspects, and the forces that motivate the decision. Include consequences. Examples: Parnas <ref> [18] </ref> has argued for the need for rationalizing designs. Design Patterns are examples of code-level design decisions that are typically explained by contrasting the bad practice against good practice.
Reference: [19] <author> Norman Ramsey. </author> <title> Literate programming on a team project. </title> <journal> Software Practice and Experience, </journal> <month> July </month> <year> 1991. </year>
Reference-contexts: Typically, literate programming has seen use in situations where Reader is User and and Reader is Not Writer, so that the code stabilizes. These cases include Knuth's "T E X The Program" [11], Fraser and Hanson's [5] book on compiler construction. There are reports of industrial practice <ref> [19] </ref>, to bring users up to speed | Reader is proto-Expert. The Java libraries, where again Reader is User, practice semi-literate programming.
Reference: [20] <author> Mohlalefi Sefika, Aamod Sane, and Roy Campbell. </author> <title> Monitoring compliance of a software system with its high-level design models. </title> <booktitle> In 18th International Conference on Software Engineering, </booktitle> <year> 1996. </year>
Reference-contexts: It follows that programs ought to be un-analyzable to reveal their connection to analysis and design artifacts. Pattern recognition tools <ref> [20] </ref> have been built to aid in program analysis. It is commonplace to use tests as examples of the use of programs.
Reference: [21] <author> Mary Shaw and David Garlan. </author> <title> Software Architecture: Perspectives on an Emerging Discipline. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1996. </year>
Reference-contexts: Often, the test driver of a program will reveal the overall program organization. Examples: The importance of overall architecture is well known. There are efforts underway to classify and formalize software architectures <ref> [21] </ref>. 4.2 Units Are Cohesive The structure of program units like packages (Java, Ada), directories and makefiles (Unix), categories (Smalltalk), suggest a suitable program decomposition for a reader. Therefore: Ensure that program units are cohesive: that is, their subcomponents implement a clearly defined aspect of the overall program. <p> Another such convention is to use all capitals for preprocessor macros. Beyond mere conventions, good names are critical in understand programs: see Open Sesame. 5.3 Programming styles Programs may be written in different styles, such as functional, generic, or use architecture styles <ref> [21] </ref> like pipe-and-filter, implicit invocation, and so on. To maintain coherence as the program evolves, the changes should respect the styles. Therefore: Where possible, refer to standard sources of architectural styles, such as Buschmann [3]. Garlan [21]. Use "bibles" that describe, for instance, functional or logic programming. <p> may be written in different styles, such as functional, generic, or use architecture styles <ref> [21] </ref> like pipe-and-filter, implicit invocation, and so on. To maintain coherence as the program evolves, the changes should respect the styles. Therefore: Where possible, refer to standard sources of architectural styles, such as Buschmann [3]. Garlan [21]. Use "bibles" that describe, for instance, functional or logic programming. Use idioms of the style in standard ways. Examples: The C++ Standard Template Library [4] is intended to be an extensible library framework. It uses a functional style, in a way that elegantly extends the basic C++ imperative style.
Reference: [22] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1997. </year>
Reference-contexts: Examples: There are many examples: the Kernighan and Ritchie [10], C bible, followed by books from Andrew Koenig [13] and later Peter van der Linden [24], documenting best practices and pitfalls. Similar C++ pairs include Stroustrup <ref> [22] </ref>, and Scott Meyers [17]. For Smalltalk, the combination might be the "Blue" Book [7], the Smalltalk image itself, and Beck [1]. 5.2 Naming conventions Naming conventions are important as shorthand, and sometimes to avoid obscure bugs. Often, tools in the environment will depend on them.
Reference: [23] <author> William Strunk and E. B. White. </author> <title> Elements of Style. </title> <publisher> Allyn and Bacon, </publisher> <year> 1995. </year>
Reference-contexts: For this paper, skim the section titles. Try the details of pages 1-3, 4-8, and 13-14 2 Introduction Effective writing fulfils reader expectations. So writing recommendations <ref> [23, 26] </ref> include knowledge about reader expectations codified as rules of thumb. One such rule, for example, is that readers emphasize material that arrives at the end of a sentence. Therefore, writers should place new material near the end of a sentence to engage the readers attention.
Reference: [24] <author> Peter van der Linden. </author> <title> Expert C Programming : Deep C Secrets. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1994. </year>
Reference-contexts: Other texts include collections of advice, traps and pitfalls that become apparent after long use. Examples: There are many examples: the Kernighan and Ritchie [10], C bible, followed by books from Andrew Koenig [13] and later Peter van der Linden <ref> [24] </ref>, documenting best practices and pitfalls. Similar C++ pairs include Stroustrup [22], and Scott Meyers [17]. For Smalltalk, the combination might be the "Blue" Book [7], the Smalltalk image itself, and Beck [1]. 5.2 Naming conventions Naming conventions are important as shorthand, and sometimes to avoid obscure bugs.
Reference: [25] <author> Timothy van Zandt and Denis Girou. </author> <title> Inside pstricks. </title> <journal> TUGboat, </journal> <volume> 15(3) </volume> <pages> 239-246, </pages> <month> September </month> <year> 1994. </year>
Reference-contexts: This leads to the evolution of a few wizards, who perform acts of magic such as emulating structured programming within T E X [14], getting T E X and postscript to cooperate to produce versatile figure drawing macros <ref> [25] </ref> and so on. However, virtually all these feats are individual performances; the pattern Reader Is Writer is rare. As for reading methods, there are countless books on using T E X (and its successor, L A T E X.
Reference: [26] <author> Joseph M. Williams. </author> <title> Style: Ten Lessons in Clarity and Grace. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1996. </year> <month> 18 </month>
Reference-contexts: For this paper, skim the section titles. Try the details of pages 1-3, 4-8, and 13-14 2 Introduction Effective writing fulfils reader expectations. So writing recommendations <ref> [23, 26] </ref> include knowledge about reader expectations codified as rules of thumb. One such rule, for example, is that readers emphasize material that arrives at the end of a sentence. Therefore, writers should place new material near the end of a sentence to engage the readers attention.
References-found: 26

