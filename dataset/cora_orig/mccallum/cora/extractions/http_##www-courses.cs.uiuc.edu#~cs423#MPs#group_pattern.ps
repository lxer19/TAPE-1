URL: http://www-courses.cs.uiuc.edu/~cs423/MPs/group_pattern.ps
Refering-URL: http://www-courses.cs.uiuc.edu/~cs423/MPs/MP2.html
Root-URL: http://www.cs.uiuc.edu
Email: maffeis@acm.org  
Title: The Object Group Design Pattern  
Author: Silvano Maffeis Olsen Associates 
Keyword: Distributed Systems, Design Patterns, Replication, Group Communication, Virtual Synchrony.  
Address: Switzerland  
Affiliation: Zurich,  
Abstract: This paper describes "Object Group", an object behavioral pattern for group communication and fault-tolerance in distributed systems. The Object Group pattern supports the implementation of replicated objects, of load sharing, and of efficient multicast communication over protocols such as IP-multicast or UDP-broadcast. Application areas of the pattern are fault-tolerant client/server systems, groupware and parallel text retrieval engines. Events within an Object Group honor the Virtual Synchrony model. With Virtual Synchrony, the size of an object group can be varied at run-time while client applications are interacting with the group. A replicated state remains consistent in spite of objects entering and leaving the group dynamically and in spite of failures. The Object Group pattern has been implemented in the Electra and in the Orbix+Isis CORBA Object Request Broker. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Amir, Y., Dolev, D., Kramer, S., and Malki, D. Transis: </author> <title> A Communication SubSystem for High Availability. </title> <booktitle> In 22nd International Symposium on Fault-Tolerant Computing (July 1992), IEEE. </booktitle>
Reference-contexts: In this paper, we assume that the communication subsystem is part of a CORBA object request broker. We suggest implementing the communication subsystem on top of toolkits such as Horus [19], Isis [2], Consul [12], Phoenix [11], Totem [13], or Transis <ref> [1] </ref> as these provide low-level system support for process groups, reliable multicast and Virtual Synchrony. For the sake of flexibility and portability, the communication subsystem implements a generic interface. An Adaptor Object is used to map the generic interface onto the real interface provided by the toolkit (Figure 4). <p> A view is an ordered set of object references; there is one reference per group member. The first entry of a view (view [0]) represents the oldest member, the second entry (view <ref> [1] </ref>) the second oldest and so forth. Each group member knows its own index in the view. This ranking is consistent among all group members. Join and leave operations trigger the installation of a new view at each group member's runtime system. <p> The view is stable and the members may continue to submit requests. If the coordinator fails, the group members receive a failure notification from the runtime and the member with object reference view <ref> [1] </ref> becomes the new coordinator. The view transfer is then restarted with the new coordinator. The view management mechanisms are mostly transparent to the user of the object group pattern. However, by overloading specific member functions, an application dependent action can be triggered whenever a new view is installed.
Reference: [2] <author> Birman, K. P., and van Renesse, R., Eds. </author> <title> Reliable Distributed Computing with the Isis Toolkit. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1994. </year>
Reference-contexts: The underlying group management protocol guarantees a consistent replicated state of the Directory even when several clients fire install and remove operations while a new object is joining the group. This execution style is called Virtual Synchrony <ref> [2] </ref>. 4 Applicability The object group pattern can be very effective when there is a need for fault-tolerance, efficient dissemination of data, load-sharing or a combination thereof. Some interesting application areas are: * Fault-tolerant client/server systems. The proposed pattern supports the implementation of highly available objects. <p> Moreover, the notion of consistent management of group membership information is a fundamental component of the Virtual Synchrony model. The motivation behind Virtual Synchrony is to allow programmers to assume a closely synchronized style of distributed execution, even though the underlying system is asynchronous <ref> [2] </ref>: * The execution of an object consists of a sequence of events which may be internal computations, request transmissions, request dispatch, failure notifications or changes to the membership of groups of which the object is a member. * A global execution of the system consists of a set of object <p> In this paper, we assume that the communication subsystem is part of a CORBA object request broker. We suggest implementing the communication subsystem on top of toolkits such as Horus [19], Isis <ref> [2] </ref>, Consul [12], Phoenix [11], Totem [13], or Transis [1] as these provide low-level system support for process groups, reliable multicast and Virtual Synchrony. For the sake of flexibility and portability, the communication subsystem implements a generic interface. <p> For more information contact info@isis.com. 12 Related Patterns Proxy Pattern A Proxy provides a surrogate or placeholder for another object to control access to it [16, 3]. Analogously, an Object Group Reference provides a surrogate or placeholder for a group of objects. Coordinator/Cohort Pattern Coordinator/Cohort <ref> [2, 10] </ref> is a form of redundant computation in which only one object (the coordinator) performs the computations associated with the client requests. Several cohort objects are associated with a coordinator, acting as "hot standbys". When the coordinator fails, one of its cohorts takes over.
Reference: [3] <author> Gamma, E., Helm, R., Johnson, R., and Vlissides, J. </author> <title> Design Patterns: Elements of Reusable Object-Oriented Software. </title> <publisher> Addison Wesley, </publisher> <year> 1995. </year>
Reference-contexts: The Active Replica object group offers three communication styles: Multicast, Client's Choice, and Coordinator/Cohort. Orbix+Isis is a commercial product available from Isis Inc. For more information contact info@isis.com. 12 Related Patterns Proxy Pattern A Proxy provides a surrogate or placeholder for another object to control access to it <ref> [16, 3] </ref>. Analogously, an Object Group Reference provides a surrogate or placeholder for a group of objects. Coordinator/Cohort Pattern Coordinator/Cohort [2, 10] is a form of redundant computation in which only one object (the coordinator) performs the computations associated with the client requests.
Reference: [4] <author> Golding, R. A., and Taylor, K. </author> <title> Group Membership in the Epidemic Style. </title> <type> Tech. rep., </type> <institution> University of California, Santa Cruz, </institution> <year> 1992. </year>
Reference-contexts: The view management mechanisms are mostly transparent to the user of the object group pattern. However, by overloading specific member functions, an application dependent action can be triggered whenever a new view is installed. Variations of this view management protocol are discussed in <ref> [17, 15, 7, 4] </ref>. 8 Consequences The object group pattern offers the following main benefits: * Fault-tolerance through active replication, passive replication or multi-versioning. This makes possible fault-tolerant client/server systems. * Efficient group communication over Ethernet, IP-multicast and other facilities that enable mul-ticast.
Reference: [5] <author> Hadzilacos, V., and Toueg, S. </author> <title> Fault-Tolerant Broadcasts and Related Problems. In Distributed Systems, </title> <editor> S. Mullender, Ed., second ed. </editor> <publisher> Addison Wesley, </publisher> <year> 1993. </year>
Reference-contexts: The reference can be installed in a name server or converted to a human-readable string by the ORB::object to string operation. The policy argument tells the underlying toolkit what kind of mul-ticast protocol to employ; for example, total ordering or causal ordering <ref> [8, 5] </ref>. If the BOA is configured to run on Isis, the policy object selects one of the Isis abcast, cbcast , fbcast or gbcast protocols. In the Horus configuration, the policy object selects a Ho-rus protocol stack 2 [18] .
Reference: [6] <institution> Isis Distributed Systems, Inc., Iona Technologies, Ltd. </institution> <note> Orbix+Isis Programmer's Guide, 1995. Document D071-00. </note>
Reference-contexts: Smith is " &lt;< number &lt;< "nn"; g; delete entries; g 11 Known Uses The object group pattern has been implemented in the Electra [9, 10] and in the Orbix+Isis <ref> [6] </ref> ORB. Electra Electra is a flexible CORBA-2 Object Request Broker based on the object group paradigm. In Elec-tra, the object group pattern is implemented as an extension of the CORBA Basic Object Adapter (BOA), as was proposed in Section 9.
Reference: [7] <author> Jahanian, F., Fakhouri, S., and Rajku-mar, R. </author> <title> Processor Group Membership Protocols: Specification, </title> <booktitle> Design and Implementation. In Proceedings of the 12th Symposium on Reliable Distributed Systems (Princeton, </booktitle> <address> New Jersey, </address> <month> Oct. </month> <year> 1993), </year> <note> IEEE. </note>
Reference-contexts: The view management mechanisms are mostly transparent to the user of the object group pattern. However, by overloading specific member functions, an application dependent action can be triggered whenever a new view is installed. Variations of this view management protocol are discussed in <ref> [17, 15, 7, 4] </ref>. 8 Consequences The object group pattern offers the following main benefits: * Fault-tolerance through active replication, passive replication or multi-versioning. This makes possible fault-tolerant client/server systems. * Efficient group communication over Ethernet, IP-multicast and other facilities that enable mul-ticast.
Reference: [8] <author> Lamport, L. </author> <title> Time, Clocks and the Ordering of Events in a Distributed System. </title> <journal> Communications of the ACM 21, </journal> <month> 7 (July </month> <year> 1978). </year>
Reference-contexts: The reference can be installed in a name server or converted to a human-readable string by the ORB::object to string operation. The policy argument tells the underlying toolkit what kind of mul-ticast protocol to employ; for example, total ordering or causal ordering <ref> [8, 5] </ref>. If the BOA is configured to run on Isis, the policy object selects one of the Isis abcast, cbcast , fbcast or gbcast protocols. In the Horus configuration, the policy object selects a Ho-rus protocol stack 2 [18] .
Reference: [9] <author> Maffeis, S. </author> <title> Adding Group Communication and Fault-Tolerance to CORBA. </title> <booktitle> In Proceedings of the 1995 USENIX Conference on Object-Oriented Technologies (Monterey, </booktitle> <address> CA, June 1995), </address> <publisher> USENIX. </publisher>
Reference-contexts: Smith", entries, envs); for (i =0; i &lt; entries-&gt;length (); i++)f (*entries)[i] &gt;>= number; cout &lt;< "A phone number of J. Smith is " &lt;< number &lt;< "nn"; g; delete entries; g 11 Known Uses The object group pattern has been implemented in the Electra <ref> [9, 10] </ref> and in the Orbix+Isis [6] ORB. Electra Electra is a flexible CORBA-2 Object Request Broker based on the object group paradigm. In Elec-tra, the object group pattern is implemented as an extension of the CORBA Basic Object Adapter (BOA), as was proposed in Section 9.
Reference: [10] <author> Maffeis, S. </author> <title> Run-Time Support for Object--Oriented Distributed Programming. </title> <type> PhD thesis, </type> <institution> University of Zurich, Department of Computer Science, </institution> <year> 1995. </year>
Reference-contexts: Smith", entries, envs); for (i =0; i &lt; entries-&gt;length (); i++)f (*entries)[i] &gt;>= number; cout &lt;< "A phone number of J. Smith is " &lt;< number &lt;< "nn"; g; delete entries; g 11 Known Uses The object group pattern has been implemented in the Electra <ref> [9, 10] </ref> and in the Orbix+Isis [6] ORB. Electra Electra is a flexible CORBA-2 Object Request Broker based on the object group paradigm. In Elec-tra, the object group pattern is implemented as an extension of the CORBA Basic Object Adapter (BOA), as was proposed in Section 9. <p> For more information contact info@isis.com. 12 Related Patterns Proxy Pattern A Proxy provides a surrogate or placeholder for another object to control access to it [16, 3]. Analogously, an Object Group Reference provides a surrogate or placeholder for a group of objects. Coordinator/Cohort Pattern Coordinator/Cohort <ref> [2, 10] </ref> is a form of redundant computation in which only one object (the coordinator) performs the computations associated with the client requests. Several cohort objects are associated with a coordinator, acting as "hot standbys". When the coordinator fails, one of its cohorts takes over.
Reference: [11] <author> Malloth, C. P., Felber, P., Schiper, A., and Wilhelm, U. </author> <title> Phoenix: A Toolkit for Building Fault-Tolerant, Distributed Applications in Large Scale. </title> <booktitle> In IEEE SPDP-7 Workshop on Parallel and Distributed Platforms in Industrial Products (San Antonio, </booktitle> <address> TX, </address> <month> Oct. </month> <year> 1995), </year> <note> IEEE. </note>
Reference-contexts: In this paper, we assume that the communication subsystem is part of a CORBA object request broker. We suggest implementing the communication subsystem on top of toolkits such as Horus [19], Isis [2], Consul [12], Phoenix <ref> [11] </ref>, Totem [13], or Transis [1] as these provide low-level system support for process groups, reliable multicast and Virtual Synchrony. For the sake of flexibility and portability, the communication subsystem implements a generic interface.
Reference: [12] <author> Mishra, S., Peterson, L. L., and Schlicht-ing, R. D. </author> <title> Consul: A Communication Substrate for Fault-Tolerant Distributed Programs. </title> <journal> Distributed Systems Engineering Journal 1, </journal> <month> 2 (Dec. </month> <year> 1993). </year>
Reference-contexts: In this paper, we assume that the communication subsystem is part of a CORBA object request broker. We suggest implementing the communication subsystem on top of toolkits such as Horus [19], Isis [2], Consul <ref> [12] </ref>, Phoenix [11], Totem [13], or Transis [1] as these provide low-level system support for process groups, reliable multicast and Virtual Synchrony. For the sake of flexibility and portability, the communication subsystem implements a generic interface.
Reference: [13] <author> Moser, L. E., Melliar-Smith, P. M., Agarwal, D. A., Budhia, R. K., Lingley-Papadopoulos, C. A., and Archambault, T. P. </author> <title> The Totem System. </title> <booktitle> In Proc. of the 25th Annual International Symposium on Fault-Tolerant Computing (Pasadena, </booktitle> <address> CA, </address> <month> June </month> <year> 1995). </year>
Reference-contexts: In this paper, we assume that the communication subsystem is part of a CORBA object request broker. We suggest implementing the communication subsystem on top of toolkits such as Horus [19], Isis [2], Consul [12], Phoenix [11], Totem <ref> [13] </ref>, or Transis [1] as these provide low-level system support for process groups, reliable multicast and Virtual Synchrony. For the sake of flexibility and portability, the communication subsystem implements a generic interface.
Reference: [14] <author> Object Management Group. </author> <title> Common Object Services Specification Volume I. OMG Document 94-1-1. </title>
Reference-contexts: When the coordinator fails, the cohorts receive a view change notification from the ORB and the oldest cohort becomes the new coordinator. New cohorts can be included at run-time. Event Channel Pattern The Event Channel Pattern <ref> [14] </ref> provides the abstraction of a highly available, persistent message bus. The Event Channel allows an object to "post" requests and to "subscribe" for requests it is interested in 3 . Posting and subscription can be by ASCII strings that represent topics of interest.
Reference: [15] <author> Ricciardi, A. M. </author> <title> The Group Membership Problem in Asynchronous Systems. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Cornell University, </institution> <address> Ithaca, New York, </address> <month> Nov. </month> <journal> 1992. </journal> <volume> No. </volume> <pages> 92-1313. </pages>
Reference-contexts: The view management mechanisms are mostly transparent to the user of the object group pattern. However, by overloading specific member functions, an application dependent action can be triggered whenever a new view is installed. Variations of this view management protocol are discussed in <ref> [17, 15, 7, 4] </ref>. 8 Consequences The object group pattern offers the following main benefits: * Fault-tolerance through active replication, passive replication or multi-versioning. This makes possible fault-tolerant client/server systems. * Efficient group communication over Ethernet, IP-multicast and other facilities that enable mul-ticast.
Reference: [16] <author> Shapiro, M., et al. </author> <title> SOS: An Object-oriented Operating System Assessment and Perspectives. </title> <booktitle> Computing Systems 2, </booktitle> <month> 4 (Dec. </month> <year> 1989). </year> <title> [17] van Renesse, R. The Horus Uniform Group Interface. Horus Documentation. [18] van Renesse, </title> <editor> R., and Birman, K. P. </editor> <title> Protocol Composition in Horus. </title> <booktitle> In Proceedings of the 14th Annual ACM Symposium on Principles of Distributed Computing (Ottawa, </booktitle> <address> Ontario Canada, </address> <month> Aug. </month> <year> 1995). </year> <note> [19] van Renesse, </note> <author> R., Birman, K. P., and Maf-feis, S. Horus: </author> <title> A Flexible Group Communication System. </title> <journal> Communications of the ACM 39, </journal> <month> 4 (Apr. </month> <year> 1996). </year>
Reference-contexts: The Active Replica object group offers three communication styles: Multicast, Client's Choice, and Coordinator/Cohort. Orbix+Isis is a commercial product available from Isis Inc. For more information contact info@isis.com. 12 Related Patterns Proxy Pattern A Proxy provides a surrogate or placeholder for another object to control access to it <ref> [16, 3] </ref>. Analogously, an Object Group Reference provides a surrogate or placeholder for a group of objects. Coordinator/Cohort Pattern Coordinator/Cohort [2, 10] is a form of redundant computation in which only one object (the coordinator) performs the computations associated with the client requests.
References-found: 16

