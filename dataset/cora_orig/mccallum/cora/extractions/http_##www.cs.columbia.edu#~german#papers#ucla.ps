URL: http://www.cs.columbia.edu/~german/papers/ucla.ps
Refering-URL: http://www.cs.columbia.edu/~german/mbd.html
Root-URL: http://www.cs.columbia.edu
Title: Distributed System Management via Elastic Servers (Position Paper)  
Author: German Goldszmidt 
Address: Los Angeles, California)  
Note: (In Proceedings of the IEEE First International Workshop on Systems Management, April 1993,  
Affiliation: Distributed Computing and Communication Lab Computer Science Department, Columbia University  
Abstract: Most distributed management applications are implemented as client server systems. The traditional client server paradigm fixes the functionality and interfaces provided by server processes at compile time. We propose the use of a more flexible paradigm: management by delegation to elastic servers. Elasticity, the ability to dynamically add and remove functionality of a server while it is executing is necessary for many distributed system management applications. An example application which utilizes elastic servers to compress large amounts of real-time operational data and to accomplish autonomous management decisions is de scribed.
Abstract-found: 1
Intro-found: 1
Reference: [ Autrata, 1991 ] <author> Matthias Autrata. </author> <title> OSF Distributed Management Environment. </title> <booktitle> In Proceedings of the IFIP/IEEE International Workshop on Distributed Systems: Operations and Management, </booktitle> <address> Santa Barbara, CA, </address> <month> Oc-tober </month> <year> 1991. </year>
Reference-contexts: An integrated management environment should enable managers to make timely management decisions. To be effective, managers must overcome the volume and complexity of information which characterize large heterogeneous distributed systems. Given the plethora of manageable resources, the hodgepodge of administrative approaches, inconsistent tools, and inadequate facilities <ref> [ Autrata, 1991 ] </ref> , system management has become a difficult task. Most distributed management applications are designed and implemented following the traditional client server process interaction paradigm, e.g. RPC [ Birrell and Nelson, 1984 ] . This paradigm enforces a rigid association of functionality with servers.
Reference: [ Birrell and Nelson, 1984 ] <author> Andrew D. Birrell and Bruce J. Nelson. </author> <title> Implementing Remote Procedure Calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1), </volume> <month> February </month> <year> 1984. </year>
Reference-contexts: Given the plethora of manageable resources, the hodgepodge of administrative approaches, inconsistent tools, and inadequate facilities [ Autrata, 1991 ] , system management has become a difficult task. Most distributed management applications are designed and implemented following the traditional client server process interaction paradigm, e.g. RPC <ref> [ Birrell and Nelson, 1984 ] </ref> . This paradigm enforces a rigid association of functionality with servers. Services can not be modified without recompilation, reinstallation and reinstantiation of the server process. Static fixing of service interfaces induces an abnormal distribution of functionality between requesters and providers of management services.
Reference: [ Black, 1992 ] <author> Uyless Black. </author> <title> Network Management Standards The OSI, SNMP and CMOL Protocols. </title> <publisher> McGraw Hill, </publisher> <year> 1992. </year>
Reference-contexts: The platform-centered approach becomes a limitation in handling the problems arising in such complex distributed systems. Network management agents, for example, are designed as servers that export a fixed set of services, and perform restricted support roles for manager clients. Network management standards <ref> [ Black, 1992 ] </ref> define agent services such as access to device data and primitive control functions. Responsibilities are centralized in client manager processes which contain the logic for evaluating and controlling the behavior of network devices.
Reference: [ Case et al., 1990 ] <author> Jeffrey D. Case, Mark S. Fedor, Martin L. Schoffstall, and James R. Davin. </author> <title> A Simple Network Management Protocol (SNMP). </title> <type> RFC 1157, </type> <month> May </month> <year> 1990. </year> <institution> DDN Network Information Center, SRI International. </institution>
Reference-contexts: Such concentration of functionality goes against the desired apportionment of responsibilities in a distributed environment. A rigid client/server paradigm, does not provide support to dynamically transfer functionality between clients and servers as conditions require it. For example, monitoring 2 applications built using SNMP <ref> [ Case et al., 1990 ] </ref> poll agent servers to re-trieve MIB values associated with devices, and compute functions based on those values. Such servers can not dynamically assume the task of computing such functions. Often, the tradeoffs of allocating computation resources and network bandwidth, make such reapportionment cost effective.
Reference: [ Goldszmidt and Yemini, 1993 ] <author> German Goldszmidt and Yechiam Yemini. </author> <title> Evaluating Management Decisions via Delegation. </title> <booktitle> In The Third International Symposium on Integrated Network Management, </booktitle> <address> San Francisco, CA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Such indexes are similar to the different indexes used to evaluate the state of a security market, or an economy. The theoretical framework for evaluating health indexes and applying management decisions via elastic servers is described in <ref> [ Goldszmidt and Yemini, 1993 ] </ref> . The health application provides means to overcome the complexity of measurements which characterize large, heterogeneous distributed systems. It consists of a collection of elastic servers that cooperate by exchanging generic program objects.
Reference: [ Goldszmidt, 1993 ] <author> German Goldszmidt. </author> <title> The Design of the Management By Delegation Environment. In Preparation, </title> <institution> Columbia University, </institution> <year> 1993. </year>
Reference-contexts: For example, when a given server becomes overloaded or its host fails, an application can dynamically delegate some of its services to a elastic server on another host. The Manager By Delegation (MBD) environment <ref> [ Goldszmidt, 1993 ] </ref> , implements a prototype elastic server. MBD enables distribution of management functionality, e.g., a process may dynamically delegate (transfer) services to another process, while keeping control over the execution of the delegated functions. Delegated programs are instantiated by the manager as either threads or processes.
Reference: [ Goscinski, 1991 ] <author> Andrzej Goscinski. </author> <title> Distributed Operating Systems The Logical Design. </title> <publisher> Addison Wesley, </publisher> <year> 1991. </year>
Reference-contexts: 1 INTRODUCTION Users of large distributed systems have many expectations. For instance, they want to complete their computation tasks in the shortest possible time, and to take advantage of the special capabilities of different computational fl Research supported by NSF contract # NCR-91-06127. 1 environments <ref> [ Goscinski, 1991 ] </ref> . To fulfill such requirements, a distributed system must be equipped with mechanisms and policies that allow for efficient management of its resources. An integrated management environment should enable managers to make timely management decisions.
Reference: [ Yemini et al., 1991 ] <author> Yechiam Yemini, German Goldszmidt, and Shaula Yemini. </author> <title> Network Management by Delegation. </title> <booktitle> In The Second International Symposium on Integrated Network Management, </booktitle> <address> Washington, DC, </address> <month> April </month> <year> 1991. </year> <month> 7 </month>
Reference-contexts: To perform their tasks, distributed application processes must often engage in abnormally fine grain and complex interactions. Since managers can only invoke agent services defined in general purpose interfaces, many management procedures require large number of interactions. Thus, for any nontrivial management task, manager processes must micromanage agent servers <ref> [ Yemini et al., 1991 ] </ref> . Micromanagement produces high communication costs and delays in responding to critical situations, resulting in intrinsically inefficient and unreliable management systems.
References-found: 8

