URL: ftp://ftp.win.tue.nl/pub/techreports/pi/automata/taxonomy/2nd.edition/constax.ps.gz
Refering-URL: http://www.win.tue.nl/cs/pa/research/tax-n-tool.html
Root-URL: http://www.win.tue.nl
Email: e-mail: watson@win.tue.nl  
Phone: Tel: +31 40 474319  
Title: A taxonomy of finite automata construction algorithms  
Author: Bruce W. Watson 
Note: Reprinted with corrections.  
Address: P.O. Box 513, 5600 MB Eindhoven The Netherlands  
Affiliation: Faculty of Mathematics and Computing Science Eindhoven University of Technology  
Abstract: This paper presents a taxonomy of finite automata construction algorithms. Each algorithm is classified into one of two families: those based upon the structure of regular expressions, and those based upon the automata-theoretic work of Myhill and Nerode. Many of the algorithms appearing in the literature are based upon the structure of regular expressions. In this paper, we make this term precise by defining regular expressions as a -term algebra, and automata constructions as various -algebras of automata. Each construction algorithm is then presented as the unique natural homomorphism from the - term algebra of regular expressions to the appropriate -algebra of automata. The concept of duality is introduced and used to derive more practical construction algorithms. In this way, we successfully present (and relate) algorithms given by Thompson, Berry and Sethi, McNaughton and Yamada, Glushkov, and Aho, Sethi, and Ullman. Efficient implementations (including those due to Chang and Paige, and Bruggemann-Klein) are also treated. As a side-effect we derive several new algorithms. A pair of impractical, but theoretically interesting, construction algorithms were presented by Myhill and Nerode. Some encoding techniques are used to make the algorithms practical | giving Brzozowski's algorithm based upon derivatives. DeRemer's algorithm is derived as an encoding of Brzozowski's algorithm. Two new algorithms, related to DeRemer's, are derived. Lastly, this family of algorithms is related to the first family. In addition to classifying the algorithms, we identify (and abstract from) the coding tricks and implementation details present in many of the published algorithms. This paper also presents an introduction to finite automata, -algebras, and their properties. 
Abstract-found: 1
Intro-found: 1
Reference: [ASU86] <author> Aho, A.V., R. Sethi, and J.D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools, </booktitle> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, M.A., </address> <year> 1988. </year>
Reference-contexts: The first family of constructions is presented in Section 4: * Thompson's construction as presented in [Thom68]. This algorithm constructs a (possibly nondeterministic) finite automaton (possibly with *-transitions). The description in this paper (Construction 4.3) is based upon those given in <ref> [AU92, HU79, Wood87, ASU86] </ref> as they are usually considered more readable than Thompson's original paper. Additionally, a more practical (top-down) version of Thompson's construction is presented (Construction 4.5). * The *-lookahead finite automaton construction. This algorithm (Construction 4.11) constructs finite automata that are similar to those constructed by Thompson's construction. <p> This construction (Construction 4.39) produces a deterministic finite automaton. * The dual of the Berry-Sethi construction. This construction (Construction 4.45) is the "mirror image" of Berry and Sethi's construction. A variant of this construction was also mentioned in passing by Aho, Sethi, and Ullman <ref> [ASU86, Example 3.22, pg. 140] </ref>; it appears in this paper as Construction 4.48. In our presentation of this construction, we correct an error appearing in Aho, Sethi, and Ullman's version (see Construction 4.48 of this paper). * Aho, Sethi, and Ullman's construction as presented in [ASU86, Alg. 3.5, Fig. 3.44]. <p> In our presentation of this construction, we correct an error appearing in Aho, Sethi, and Ullman's version (see Construction 4.48 of this paper). * Aho, Sethi, and Ullman's construction as presented in <ref> [ASU86, Alg. 3.5, Fig. 3.44] </ref>. This construction (Construction 4.50) produces a deterministic finite automaton. It is the "mirror image" of the McNaughton-Yamada construction. The second family of constructions (from regular expressions) are those based upon the automata theoretic results of Myhill and Nerode [RS59]. <p> We also consider methods of efficiently implementing some of the constructions, and methods of constructing FA's from extended regular expressions (see Definition 4.53). 4.1 Thompson's construction One -algebra is based upon an RE to FA construction given by Thompson in [Thom68]. The explanations given in textbooks such as <ref> [HU79, Wood87, AU92, ASU86] </ref> are generally considered more readable than Thompson's original paper. None of those presentations made use of - algebras. Definition 4.1 (Thompson's -algebra of FA's): The carrier set is [FA] = . <p> the following construction. 4.3 The dual of the Berry-Sethi construction 43 a; b Construction 4.48 (The dual of the variation on the Berry-Sethi construction): The construction is: R ffi convert ffi R ffi rfa ffi marker e (E) This construction is also presented very informally by Aho, Sethi, and Ullman <ref> [ASU86, Example 3.22, pg. 140] </ref>. There appears to be an error in item two of the three steps describing the construction in [ASU86]. <p> There appears to be an error in item two of the three steps describing the construction in <ref> [ASU86] </ref>. <p> The Aho-Sethi-Ullman algorithm is given in <ref> [ASU86, Alg. 3.5, Fig. 3.44] </ref>. 2 Example 4.51 (Aho-Sethi-Ullman): We give a representative DFA of the isomorphism class ASU ((a [ *)b fl ). The state graph is shown in Figure 7. 2 We compose useful s ffi subsetopt (as implemented by Algorithm 2.46) with R ffi convert ffi R. <p> 0 )(a) 6= ; do d := (Follow (E 0 ))(a); if d 62 D ! U := U [ fdg [] d 2 D ! skip fi; rof F := fd : d 2 D ^ $ 2 dg This algorithm is very similar to the one given in <ref> [ASU86] </ref>. The only problem remaining is how to deal with an E 2 RE when E 62 RRE . The method usually used is to "mark" the symbols of E (perhaps with an integer subscript), making each symbol unique. <p> The approach presented in this subsection is essentially due to McNaughton and Yamada [MY60], Glushkov [Glus61], and Berry and Sethi [BS86]. The presentations in [B-K93a, Section 2], [BS86], [tEvG93], and <ref> [ASU86, Fig. 3.40, pp. 134-141] </ref> are particularly clear. Those interested in a rigorous treatment of this approach to RFA's can refer to the paper of ten Eikelder and van Geldrop [tEvG93]. 4.5.2 More efficient RFA operators The definition of the RFA operators may still result in inefficient implementation. <p> constructions were found to be related by duality: The Berry-Sethi nondeterministic finite automaton construction (also known in the literature as the McNaughton-Yamada or the Glushkov nondeterministic finite automata construction) and the dual of the Berry-Sethi construction (a variant of which is also known as the Aho-Sethi-Ullman nondeterministic finite automata contruction <ref> [ASU86, Example 3.22, pg. 140] </ref>). <p> In the first one, being "at a mark" (Aho, Sethi, and Ullman use the phrase "at a position" <ref> [ASU86] </ref>) means to be in the state resulting from making a transition on the alphabet symbol associated with the particular mark 14 . <p> The missing fourth rule (that * is the unit of concatenation) is not required in the definition of similarity for the correctness of our presentation of Brzozowski's construction. 15 This is the interpretation taken by Aho, Sethi, and Ullman <ref> [ASU86] </ref>. 16 Which is therefore an improvement to the McNaughton-Yamada-Glushkov and the Aho-Sethi-Ullman nonde terministic finite automaton constructions. 75 * We defined the equivalence and the similarity of regular expressions as equivalence relations on regular expressions.
Reference: [AU92] <author> Aho, A.V. and J.D. Ullman. </author> <booktitle> Foundations of Computer Science, </booktitle> <publisher> Computer Science Press, </publisher> <address> New York, N.Y. </address> <year> 1992. </year>
Reference-contexts: The first family of constructions is presented in Section 4: * Thompson's construction as presented in [Thom68]. This algorithm constructs a (possibly nondeterministic) finite automaton (possibly with *-transitions). The description in this paper (Construction 4.3) is based upon those given in <ref> [AU92, HU79, Wood87, ASU86] </ref> as they are usually considered more readable than Thompson's original paper. Additionally, a more practical (top-down) version of Thompson's construction is presented (Construction 4.5). * The *-lookahead finite automaton construction. This algorithm (Construction 4.11) constructs finite automata that are similar to those constructed by Thompson's construction. <p> We also consider methods of efficiently implementing some of the constructions, and methods of constructing FA's from extended regular expressions (see Definition 4.53). 4.1 Thompson's construction One -algebra is based upon an RE to FA construction given by Thompson in [Thom68]. The explanations given in textbooks such as <ref> [HU79, Wood87, AU92, ASU86] </ref> are generally considered more readable than Thompson's original paper. None of those presentations made use of - algebras. Definition 4.1 (Thompson's -algebra of FA's): The carrier set is [FA] = .
Reference: [BL77] <author> Backhouse, R.C. and R.K. Lutz. </author> <title> "Factor graphs, failure functions and bi-trees," </title> <booktitle> in Fourth Colloquium on Automata, Languages and Programming, </booktitle> <editor> (G. Goos and J. Hartmanis, </editor> <booktitle> eds.), </booktitle> <pages> pp. 61-75, </pages> <booktitle> Lecture Notes in Computer Science 52, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1977. </year>
Reference: [BS86] <author> Berry, G. and R. Sethi. </author> <title> "From regular expressions to deterministic automata," </title> <journal> Theoretical Computer Science, </journal> <volume> 48: </volume> <pages> 117-126, </pages> <year> 1986. </year>
Reference-contexts: These two constructions (Constructions 4.22 and 4.43 respectively) are related by being the mirror images (or duals) of one another. They both construct an *-free (possibly nondeterministic) finite automaton. * Berry and Sethi's construction as presented in <ref> [BS86, Glus61, MY60] </ref>. This construction (Construction 4.32) uses some precomputation of sets to construct the same finite automaton as the left-biased construction. <p> This construction is implicitly given by Glushkov [Glus61] and McNaughton and Yamada [MY60], where it is used as the nondeterministic finite automaton construction underlying a deterministic finite automaton construction. Berry and Sethi <ref> [BS86] </ref> explicitly present this algorithm, and they relate it to Brzozowski's construction 1 An extended regular expression is one that includes either the intersection or complementation operator. 4 1 INTRODUCTION Myhill-Nerode (5.11) Myhill-Nerode minimal (5.19) Item sets (5.69) DeRemer (5.75) Brzozowski (5.34) Aho-Sethi-Ullman (4.50) Improved item sets (5.82) (4.5) (4.3) (4.22) <p> Unfortunately, neither of them present the *-free FA construction (without the subset construction) explicitly. The underlying *-free FA construction was presented in some depth (with correctness arguments) by Berry and Sethi in <ref> [BS86, Alg. 4.4] </ref>. In their paper, Berry and Sethi also relate the construction to the Brzozowski construction (Brzozowski's construction appears as Construction 5.34 in this paper). <p> Unfortunately, their informal presentation is difficult to understand. Subsequent presentations of the RFA operators have all omitted intersection. For example, Berry and Sethi note (in <ref> [BS86, Remark 3.1] </ref>): "The approach : : : does not extend to regular expressions with intersection and complementation operators." We can construct an RFA operator for any regular operator (an operator on languages that preserves the regularity property) for which we can construct an LBFA operator. <p> In Section 4.4 we saw how these operators can be readily implemented with RFA's (without the encoding scheme of this section). The approach presented in this subsection is essentially due to McNaughton and Yamada [MY60], Glushkov [Glus61], and Berry and Sethi <ref> [BS86] </ref>. The presentations in [B-K93a, Section 2], [BS86], [tEvG93], and [ASU86, Fig. 3.40, pp. 134-141] are particularly clear. <p> In Section 4.4 we saw how these operators can be readily implemented with RFA's (without the encoding scheme of this section). The approach presented in this subsection is essentially due to McNaughton and Yamada [MY60], Glushkov [Glus61], and Berry and Sethi <ref> [BS86] </ref>. The presentations in [B-K93a, Section 2], [BS86], [tEvG93], and [ASU86, Fig. 3.40, pp. 134-141] are particularly clear. <p> The function encderiv L maps these left languages (equivalence classes) to their corresponding right languages (the derivatives). The right language (encderiv L (U )) of a particular equivalence class U 2 [V fl ] R L is called the continuation of U (in language L) by Berry and Sethi <ref> [BS86] </ref>. 2 Property 5.18 (Derivatives and function encderiv L ): Note that (for a 2 V , w 2 V fl ): * encderiv L ([*] R L ) = * 1 L = L, * encderiv L ([wa] R L ) = (wa) 1 L = a 1 (w 1 <p> In this section, we consider only RRE's. Berry and Sethi first presented this result in <ref> [BS86] </ref>. We will be using the following version of Brzozowski's construction (for E 2 RRE ), which does not introduce a sink state (the sink state is equivalent ( : =) to ; 2 RRE | its language under L RE is ;). <p> Cham-parnaud calls such regular expressions local. 2 Theorem 5.45 (Characterizing derivatives of RRE's): For any E 2 RRE , E is unambiguous. This theorem is also given by Berry and Sethi <ref> [BS86, Theorem 3.4] </ref>. Proof: We proceed by induction on the number of operators in E 2 RRE . Basis: The theorem is trivially true for the RRE base cases * and ; since Occ (*) = Occ (;) = ;. <p> Their informal descriptions are difficult to understand, and more recent papers use marking and have abandoned trying to define intersection or complementation. See Section 4.4. 14 This is the interpretation taken by Glushkov, McNaughton and Yamada, and Berry and Sethi <ref> [Glus61, MY60, BS86] </ref>. 74 6 CONCLUSIONS has an out-transition on the alphabet symbol associated with the particular mark (that is, the marked symbol is valid as the next input symbol) 15 . <p> The Berry-Sethi construction (and therefore the McNaughton-Yamada-Glushkov DFA construction) and the Brzozowski construction (under an appropriate encoding) produce isomorphic finite automata for restricted regular expressions. This result was originally presented by Berry and Sethi <ref> [BS86] </ref>. The conclusions about the Myhill-Nerode, Brzozowski, and DeRemer constructions (Section 5) are: * Deriving the second major family of constructions from the Myhill-Nerode theorem proved useful in a number of ways: The use of equivalence classes makes the correctness argument for the Myhill-Nerode construction particularly clear.
Reference: [B-K93a] <author> Br uggemann-Klein, A. </author> <title> "Regular expressions into finite automata," </title> <note> to appear in Theoretical Computer Science. </note>
Reference-contexts: In Section 4.4 we saw how these operators can be readily implemented with RFA's (without the encoding scheme of this section). The approach presented in this subsection is essentially due to McNaughton and Yamada [MY60], Glushkov [Glus61], and Berry and Sethi [BS86]. The presentations in <ref> [B-K93a, Section 2] </ref>, [BS86], [tEvG93], and [ASU86, Fig. 3.40, pp. 134-141] are particularly clear. <p> In particular, Bruggemann-Klein and Chang and Paige found that the implementation of the ([) in the RFA operators may require more than constant time <ref> [B-K93a, Chan92, CP92] </ref>. In most cases the arguments (of [) are disjoint; the only possible exception is the union follow [ (last fi first ), appearing in the C fl;RF A and C +;RF A operators. Two solutions to this problem will be presented here. <p> A regular expression E is first transformed into star normal-form E * ; the RFA image of E * has similar properties to the RFA 00 image of E. The details of the star normal-form transformations (and the running time improvements resulting from them) are described in <ref> [B-K93a] </ref>. 2 53 5 The Myhill-Nerode, Brzozowski and DeRemer construc tions In this section, we explore a DFA construction method | due to Myhill and Nerode | from which we derive Brzozowski's construction. First, we make some observations about determinism in finite automata. <p> For example, the interpretations give rise to the duality between McNaughton, Yamada and Glushkov's DFA and Aho, Sethi, and Ullman's DFA constructions. * The improvements to the Berry-Sethi construction 16 due to Bruggemann-Klein <ref> [B-K93a] </ref> and Chang and Paige [Chan92, CP92] have been difficult to compare. This has been largely due to the fact that Chang and Paige's improvements are to the finite automaton construction itself, while Bruggemann-Klein's improvements involve transforming the regular expression.
Reference: [B-K93b] <author> Br uggemann-Klein, A. </author> <title> Private communication, </title> <month> July </month> <year> 1993. </year>
Reference-contexts: In practice, function BS is cheaper to compute than lbfa. 2 Remark 4.33: The history of this algorithm is somewhat complicated. The following account is given by Bruggemann-Klein <ref> [B-K93b] </ref>. Glushkov and McNaughton and Yamada simultaneously (and independently) discovered the same DFA construction [Glus61, MY60]. These papers use the same underlying *-free FA construction to which they apply the subset construction 8 . Unfortunately, neither of them present the *-free FA construction (without the subset construction) explicitly.
Reference: [Brzo64] <author> Brzozowski, J.A. </author> <title> "Derivatives of regular expressions," </title> <editor> J. </editor> <booktitle> ACM 11(4): </booktitle> <pages> 481-494, </pages> <year> 1964. </year>
Reference-contexts: Some of the dotted edges are labeled with the name of the relationship or refinement. Vertices that are connected by a dashed edge are related by duality (they are the "mirror images" of one another). 5 <ref> [Brzo64] </ref>. We also present (in Construction 4.38) a variant of the Berry-Sethi construction that is more easily implemented in practice. * McNaughton, Yamada and Glushkov's construction as presented in [MY60, Glus61]. This construction (Construction 4.39) produces a deterministic finite automaton. * The dual of the Berry-Sethi construction. <p> Certain encoding schemes can be used to represent these infinite sets, making the construction practical. Brzozowski's and DeRemer's constructions are two such encoding schemes. * Brzozowski's construction as presented in <ref> [Brzo64] </ref>. This construction (Construction 5.34) gives a deterministic finite automaton. We derive it as an encoding of the Myhill-Nerode construction, although Brzozowski's derivation was entirely independent. * The item set construction. <p> We give it to point out that the techniques of this section are not also usable in constructing non-Complete DFA's (as Brzozowski demonstrated in <ref> [Brzo64] </ref>). 2 5.1 The Myhill-Nerode construction Before considering how to construct finite automata, we first present the Myhill-Nerode theorem. A good text book introduction to the theorem is [HU79]. Theorem 5.7 (Myhill-Nerode): The Myhill-Nerode theorem states that the following state ments are equivalent [Myhi57, Nero58, RS59, HU79]: 1. <p> Proof: ]R L is finite (from the Myhill-Nerode theorem), and since jderiv (L)j = ]R L , jderiv (L)j is also finite. 2 This theorem has also been given by Brzozowski <ref> [Brzo64] </ref>. His proof is, however, somewhat more complicated, and is by induction on the structure of language L. <p> More formally, jf [w 1 E] : = : w 2 V fl gj is finite. Brzozowski gave the same result by induction on the structure of a ERE in <ref> [Brzo64, Theorem 4.3a] </ref>. 2 Definition 5.26 (Similarity () of regular expressions): Similarity (written ) is an equivalence relation on ERE's. Two ERE's are similar if and only if they are identical or one can be transformed into the other using the following rules: 1. <p> Proof: This proof is similar to the one given in Brzozowski's original paper <ref> [Brzo64, Theorem 5.2] </ref>. <p> * The construction satisfies the property (8 E : E 2 ERE : L FA (Brz (E)) = L ERE (E)) Remark 5.35: Any equivalence relation G (on ERE's) such that G : = can be used in place of in Brzozowski's construction. 2 Remark 5.36: In Brzozowski's original paper <ref> [Brzo64] </ref>, the sink state (corresponding to derivative ; 2 ERE ) was always omitted from the constructed DFA, producing a possibly non-Complete DFA. 2 Example 5.37 (Brzozowski's construction): We construct a Complete DFA corresponding to regular expression (a [ *)b fl (the regular expression from Example 3.15). <p> to recognize equivalence of ERE's, we would have had a smaller DFA since (* [ ;)b fl [ ;b fl : = ;b fl [ *b fl , and we could have identified states d 1 and d 2 . 2 5.3.1 Computing derivatives of an ERE Brzozowski also shows <ref> [Brzo64] </ref> if E 2 ERE has n derivatives (including E, under any equivalence relation G such that G : =) then they are all of the form v 1 E where jvj &lt; n [Brzo64, Theorem 4.3b]. <p> d 1 and d 2 . 2 5.3.1 Computing derivatives of an ERE Brzozowski also shows [Brzo64] if E 2 ERE has n derivatives (including E, under any equivalence relation G such that G : =) then they are all of the form v 1 E where jvj &lt; n <ref> [Brzo64, Theorem 4.3b] </ref>. <p> For more on this see <ref> [Brzo64] </ref>. 5.4 Relating the Brzozowski and Berry-Sethi constructions It turns out that for RRE's (recall from Definition 4.58 that an E 2 RRE is an RE such that each symbol of V occurs at most once in E), the Brzozowski construction (with sink state removal | as in Brzozowski's original paper
Reference: [Cham93] <author> Champarnaud, J.M. </author> <title> "From a regular expression to an automaton," </title> <type> Technical report, </type> <institution> IBP, LITP, Universite Paris 7, Paris, France, </institution> <note> Working document 23 September 1993. </note>
Reference-contexts: E 2 RE is unambiguous, its derivatives are either E or ;, or can be characterized by an element of Occ (E). 2 Remark 5.43: The regular expression (a [ a) is unambiguous, but is not an RRE . 2 Remark 5.44: Unambiguous regular expressions are also defined by Champarnaud <ref> [Cham93] </ref>, although he characterizes them quite differently, and he does not make use of derivatives. Cham-parnaud calls such regular expressions local. 2 Theorem 5.45 (Characterizing derivatives of RRE's): For any E 2 RRE , E is unambiguous. This theorem is also given by Berry and Sethi [BS86, Theorem 3.4].
Reference: [Chan92] <author> Chang, C.-H. </author> <title> "From regular expressions to DFAs using compressed NFAs," </title> <type> PhD thesis, </type> <institution> Computer Science Department, Courant Institute of Mathematical Sciences, </institution> <address> New York University, N.Y., </address> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: In particular, Bruggemann-Klein and Chang and Paige found that the implementation of the ([) in the RFA operators may require more than constant time <ref> [B-K93a, Chan92, CP92] </ref>. In most cases the arguments (of [) are disjoint; the only possible exception is the union follow [ (last fi first ), appearing in the C fl;RF A and C +;RF A operators. Two solutions to this problem will be presented here. <p> the symbol ] to denote union where the arguments to ] are assumed to be disjoint. 2 11 Here we assume, for the moment, that L RE can deal with the intersection operator. 50 4 CONSTRUCTIONS BASED ON REGULAR EXPRESSION STRUCTURE The first solution was proposed by Chang and Paige <ref> [Chan92, CP92] </ref>. <p> The running-time and space savings, along with implementation details are given in <ref> [Chan92, CP92] </ref>. The second solution also involves adding an eighth tuple element to RFA's, giving RFA 00 . <p> For example, the interpretations give rise to the duality between McNaughton, Yamada and Glushkov's DFA and Aho, Sethi, and Ullman's DFA constructions. * The improvements to the Berry-Sethi construction 16 due to Bruggemann-Klein [B-K93a] and Chang and Paige <ref> [Chan92, CP92] </ref> have been difficult to compare. This has been largely due to the fact that Chang and Paige's improvements are to the finite automaton construction itself, while Bruggemann-Klein's improvements involve transforming the regular expression.
Reference: [CP92] <author> Chang, C.-H. and R. Paige. </author> <title> "From regular expressions to DFAs using compressed NFAs," </title> <institution> Computer Science Department, Courant Institute of Mathematical Sciences, </institution> <address> New York University, N.Y., </address> <year> 1992. </year>
Reference-contexts: In particular, Bruggemann-Klein and Chang and Paige found that the implementation of the ([) in the RFA operators may require more than constant time <ref> [B-K93a, Chan92, CP92] </ref>. In most cases the arguments (of [) are disjoint; the only possible exception is the union follow [ (last fi first ), appearing in the C fl;RF A and C +;RF A operators. Two solutions to this problem will be presented here. <p> the symbol ] to denote union where the arguments to ] are assumed to be disjoint. 2 11 Here we assume, for the moment, that L RE can deal with the intersection operator. 50 4 CONSTRUCTIONS BASED ON REGULAR EXPRESSION STRUCTURE The first solution was proposed by Chang and Paige <ref> [Chan92, CP92] </ref>. <p> The running-time and space savings, along with implementation details are given in <ref> [Chan92, CP92] </ref>. The second solution also involves adding an eighth tuple element to RFA's, giving RFA 00 . <p> For example, the interpretations give rise to the duality between McNaughton, Yamada and Glushkov's DFA and Aho, Sethi, and Ullman's DFA constructions. * The improvements to the Berry-Sethi construction 16 due to Bruggemann-Klein [B-K93a] and Chang and Paige <ref> [Chan92, CP92] </ref> have been difficult to compare. This has been largely due to the fact that Chang and Paige's improvements are to the finite automaton construction itself, while Bruggemann-Klein's improvements involve transforming the regular expression.
Reference: [DeRe74] <author> DeRemer, F.L. </author> <title> "Lexical analysis," in Compiler Construction: an Advanced Course, (F.L. </title> <editor> Bauer and J. Eickel, </editor> <booktitle> eds.), </booktitle> <pages> pp. 109-120, </pages> <booktitle> Lecture Notes in Computer Science 21, </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1974. </year>
Reference-contexts: In this paper, we present it as an encoding of the Myhill and Nerode construction. * DeRemer's construction as presented in <ref> [DeRe74] </ref>. This construction (Construction 5.75) produces a deterministic finite automaton. In this paper, it is derived from the item set construction, although DeRemer made use of LR parsing in his derivation. * An improvement of the item set construction. <p> Construction 5.75 (DeRemer's construction): DeRemer's construction is function DeRemer , which is exactly as Iconstr , except that the composite function X ffi C is used as the closure function wherever C was used in Iconstr . This construction is due to DeRemer <ref> [DeRe74] </ref>, where he attributes the idea behind the definition of X to Earley [Earl70]. 2 Remark 5.76: DeRemer presented this construction in a slightly different context: he extended an LR parser to deal with grammar production rules with regular expression as right hand sides [DeRe74]. <p> This construction is due to DeRemer <ref> [DeRe74] </ref>, where he attributes the idea behind the definition of X to Earley [Earl70]. 2 Remark 5.76: DeRemer presented this construction in a slightly different context: he extended an LR parser to deal with grammar production rules with regular expression as right hand sides [DeRe74]. Remark 5.78 points out a slight problem with the original presentation by DeRemer. 2 Example 5.77 (DeRemer ): We use DeRemer to construct a DFA for b fl 2 RE .
Reference: [Dijk76] <author> Dijkstra, </author> <title> E.W. A discipline of programming, </title> <publisher> Prentice-Hall Inc., </publisher> <address> N.J., </address> <year> 1976. </year>
Reference-contexts: This algorithm will yield a Complete DFA. In the case that the language of the automaton (being subset constructed) is not V fl , then there will be a state ; 2 D which is the sink state. The algorithm is implemented in Dijkstra's guarded command language <ref> [Dijk76] </ref>. 2.2 Transformations on finite automata 13 Algorithm 2.45: f (Q; V; T; ;; S; F ) 2 FAg D; U := ;; S 0 ; let u : u 2 U ; for a : a 2 V do if d 62 D ! U := U [ fdg [] <p> We now describe a mapping N 2 RE fi P (V ) ! GCL, where GCL denotes the set of all guarded commands programs <ref> [Dijk76] </ref>. This construction is based upon the LAFA construction. The created programs are correct when the determinism conditions of Definition 4.14 hold. <p> = rg f [w 1 E] : w 2 V fl ^ jwj &lt; rg f [w 1 E] : w 2 V fl ^ jwj rg f [w 1 E] : w 2 V fl ^ jwj &lt; rg This gives the following algorithm (in the guarded commands of <ref> [Dijk76] </ref>) which computes the derivatives of a regular expression E (D [ERE ] and next [ERE ] ): Algorithm 5.39: fE 2 ERE g D; next; k := ;; f [E] g; 0; finvariant: D = f [w 1 E] : w 2 V fl ^ jwj &lt; kg ^ next
Reference: [Earl70] <author> Earley, J. </author> <title> "An efficient context-free parsing algorithm," </title> <editor> C. </editor> <booktitle> ACM 13(2): </booktitle> <pages> 94-102, </pages> <month> Feb. </month> <year> 1970. </year>
Reference-contexts: This construction is due to DeRemer [DeRe74], where he attributes the idea behind the definition of X to Earley <ref> [Earl70] </ref>. 2 Remark 5.76: DeRemer presented this construction in a slightly different context: he extended an LR parser to deal with grammar production rules with regular expression as right hand sides [DeRe74].
Reference: [EM85] <author> Ehrig, E. and B. Mahr. </author> <title> Fundamentals of Algebraic Specification 1: Equations and Initial Semantics, </title> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1985. </year> <title> [tEvG93] ten Eikelder, H.M.M. </title> <editor> and H.P.J. van Geldrop. </editor> <title> "On the correctness of some algorithms to generate finite automata for regular expressions," </title> <note> Computing Science Note 93/32, </note> <institution> Eindhoven University of Technology, </institution> <address> The Netherlands, </address> <year> 1993. </year>
Reference-contexts: Regular expressions are then defined as a -algebra. 3.1 Some basic definitions This subsection provides the basic definitions required for -algebras. Most of these definitions are taken, with slight modification, from <ref> [EM85] </ref>. Definition 3.1 (Sorts): Given set S (the elements of which are called sorts), a set of sets X is called S-sorted if the elements of X correspond one-to-one with S.
Reference: [Glus61] <author> Glushkov, </author> <title> V.M. "The abstract theory of automata," </title> <journal> Russian Mathematical Surveys 16: </journal> <pages> 1-53, </pages> <year> 1961. </year>
Reference-contexts: These two constructions (Constructions 4.22 and 4.43 respectively) are related by being the mirror images (or duals) of one another. They both construct an *-free (possibly nondeterministic) finite automaton. * Berry and Sethi's construction as presented in <ref> [BS86, Glus61, MY60] </ref>. This construction (Construction 4.32) uses some precomputation of sets to construct the same finite automaton as the left-biased construction. <p> They both construct an *-free (possibly nondeterministic) finite automaton. * Berry and Sethi's construction as presented in [BS86, Glus61, MY60]. This construction (Construction 4.32) uses some precomputation of sets to construct the same finite automaton as the left-biased construction. This construction is implicitly given by Glushkov <ref> [Glus61] </ref> and McNaughton and Yamada [MY60], where it is used as the nondeterministic finite automaton construction underlying a deterministic finite automaton construction. <p> We also present (in Construction 4.38) a variant of the Berry-Sethi construction that is more easily implemented in practice. * McNaughton, Yamada and Glushkov's construction as presented in <ref> [MY60, Glus61] </ref>. This construction (Construction 4.39) produces a deterministic finite automaton. * The dual of the Berry-Sethi construction. This construction (Construction 4.45) is the "mirror image" of Berry and Sethi's construction. <p> In practice, function BS is cheaper to compute than lbfa. 2 Remark 4.33: The history of this algorithm is somewhat complicated. The following account is given by Bruggemann-Klein [B-K93b]. Glushkov and McNaughton and Yamada simultaneously (and independently) discovered the same DFA construction <ref> [Glus61, MY60] </ref>. These papers use the same underlying *-free FA construction to which they apply the subset construction 8 . Unfortunately, neither of them present the *-free FA construction (without the subset construction) explicitly. <p> In Section 4.4 we saw how these operators can be readily implemented with RFA's (without the encoding scheme of this section). The approach presented in this subsection is essentially due to McNaughton and Yamada [MY60], Glushkov <ref> [Glus61] </ref>, and Berry and Sethi [BS86]. The presentations in [B-K93a, Section 2], [BS86], [tEvG93], and [ASU86, Fig. 3.40, pp. 134-141] are particularly clear. <p> Their informal descriptions are difficult to understand, and more recent papers use marking and have abandoned trying to define intersection or complementation. See Section 4.4. 14 This is the interpretation taken by Glushkov, McNaughton and Yamada, and Berry and Sethi <ref> [Glus61, MY60, BS86] </ref>. 74 6 CONCLUSIONS has an out-transition on the alphabet symbol associated with the particular mark (that is, the marked symbol is valid as the next input symbol) 15 .
Reference: [GJ90] <author> Grune, D. and C.J.H. Jacobs. </author> <title> Parsing Techniques: A Practical Guide, </title> <publisher> Ellis Hor-wood Ltd., </publisher> <address> West Sussex, England, </address> <year> 1990. </year>
Reference: [HU79] <author> Hopcroft, J.E. and J.D. Ullman. </author> <title> Introduction to Automata Theory, Languages, and Computation, </title> <publisher> Addison-Wesley Publishing Co., </publisher> <address> Reading, M.A., </address> <year> 1979. </year> <note> 82 REFERENCES </note>
Reference-contexts: The first family of constructions is presented in Section 4: * Thompson's construction as presented in [Thom68]. This algorithm constructs a (possibly nondeterministic) finite automaton (possibly with *-transitions). The description in this paper (Construction 4.3) is based upon those given in <ref> [AU92, HU79, Wood87, ASU86] </ref> as they are usually considered more readable than Thompson's original paper. Additionally, a more practical (top-down) version of Thompson's construction is presented (Construction 4.5). * The *-lookahead finite automaton construction. This algorithm (Construction 4.11) constructs finite automata that are similar to those constructed by Thompson's construction. <p> We also consider methods of efficiently implementing some of the constructions, and methods of constructing FA's from extended regular expressions (see Definition 4.53). 4.1 Thompson's construction One -algebra is based upon an RE to FA construction given by Thompson in [Thom68]. The explanations given in textbooks such as <ref> [HU79, Wood87, AU92, ASU86] </ref> are generally considered more readable than Thompson's original paper. None of those presentations made use of - algebras. Definition 4.1 (Thompson's -algebra of FA's): The carrier set is [FA] = . <p> These properties are symmetrical because the operators are symmetrical. Hopcroft and Ullman have shown <ref> [HU79] </ref> that in practice these properties facilitate the quick simulation of M . <p> A good text book introduction to the theorem is <ref> [HU79] </ref>. Theorem 5.7 (Myhill-Nerode): The Myhill-Nerode theorem states that the following state ments are equivalent [Myhi57, Nero58, RS59, HU79]: 1. L is a regular language. 2. L is the union of some of the equivalence classes of a right-invariant equivalence relation (on V fl ) of finite index. 3. <p> A good text book introduction to the theorem is [HU79]. Theorem 5.7 (Myhill-Nerode): The Myhill-Nerode theorem states that the following state ments are equivalent <ref> [Myhi57, Nero58, RS59, HU79] </ref>: 1. L is a regular language. 2. L is the union of some of the equivalence classes of a right-invariant equivalence relation (on V fl ) of finite index. 3. <p> Let R L be the right-invariant equivalence relation defined by (x; y) 2 R L j (8 z : z 2 V fl : (xz 2 L) j (yz 2 L)) Relation R L is of finite index. Proof: A following proof is given in <ref> [HU79, Theorem 3.9] </ref>. (1) ) (2): Assume L is accepted by M 2 DFA such that Complete (M ).
Reference: [Knut65] <author> Knuth, D.E. </author> <title> "On the translation of languages from left to right," </title> <journal> Inform. Control 8: </journal> <pages> 607-639, </pages> <year> 1965. </year>
Reference-contexts: We derive it as an encoding of the Myhill-Nerode construction, although Brzozowski's derivation was entirely independent. * The item set construction. This construction (Construction 5.69, not appearing in the literature) produces a deterministic finite automaton, and is based upon the concept of "items" which is borrowed from LR parsing <ref> [Knut65] </ref>. In this paper, we present it as an encoding of the Myhill and Nerode construction. * DeRemer's construction as presented in [DeRe74]. This construction (Construction 5.75) produces a deterministic finite automaton. <p> Nothing else is a DRE. A dotted regular expression is also known as an item, from LR parsing <ref> [Knut65] </ref>; we will frequently use this name. 2 We also require a function mapping a regular expression to all of its dottings.
Reference: [MY60] <author> McNaughton, R. and H. Yamada. </author> <title> "Regular expressions and state graphs for automata," </title> <journal> IEEE Trans. on Electronic Computers 9(1): </journal> <pages> 39-47, </pages> <year> 1960. </year>
Reference-contexts: These two constructions (Constructions 4.22 and 4.43 respectively) are related by being the mirror images (or duals) of one another. They both construct an *-free (possibly nondeterministic) finite automaton. * Berry and Sethi's construction as presented in <ref> [BS86, Glus61, MY60] </ref>. This construction (Construction 4.32) uses some precomputation of sets to construct the same finite automaton as the left-biased construction. <p> This construction (Construction 4.32) uses some precomputation of sets to construct the same finite automaton as the left-biased construction. This construction is implicitly given by Glushkov [Glus61] and McNaughton and Yamada <ref> [MY60] </ref>, where it is used as the nondeterministic finite automaton construction underlying a deterministic finite automaton construction. <p> We also present (in Construction 4.38) a variant of the Berry-Sethi construction that is more easily implemented in practice. * McNaughton, Yamada and Glushkov's construction as presented in <ref> [MY60, Glus61] </ref>. This construction (Construction 4.39) produces a deterministic finite automaton. * The dual of the Berry-Sethi construction. This construction (Construction 4.45) is the "mirror image" of Berry and Sethi's construction. <p> In practice, function BS is cheaper to compute than lbfa. 2 Remark 4.33: The history of this algorithm is somewhat complicated. The following account is given by Bruggemann-Klein [B-K93b]. Glushkov and McNaughton and Yamada simultaneously (and independently) discovered the same DFA construction <ref> [Glus61, MY60] </ref>. These papers use the same underlying *-free FA construction to which they apply the subset construction 8 . Unfortunately, neither of them present the *-free FA construction (without the subset construction) explicitly. <p> A practical implementation is given in Algorithm 4.42 (given below), which implements useful s ffi subset ffi decode. Homomorphism rfa can be implemented using the techniques described in Section 4.5. This algorithm is the same 9 as that given by McNaughton and Yamada <ref> [MY60, Construction method on pg. 44] </ref>. 2 Example 4.40 (McNaughton-Yamada-Glushkov): In the case of (a [ *)b fl 2 RE , the Berry-Sethi construction produces a deterministic FA. Function MYG produces a similar DFA, with a sink state added to make it Complete. <p> if (null ) then S else ; fi f [(D; V; T; ;; S; F )] = = useful s ffi subset ffi decode ([(Q; V; follow; first; last; null ; Qmap)] = )g fComplete (D; V; T; ;; S; F )g This algorithm is used in the McNaughton-Yamada construction <ref> [MY60] </ref>. 4.3 The dual of the Berry-Sethi construction The following commuting diagram gives a property of regular expressions and regular languages that will prove to be useful: RE R 6 RE In this diagram, the two reversal operators are different: one is reversal of RE's, while the other is reversal of <p> " Q 0 ; null 0 ^ null 1 ; Qmap 0 )] = end Note that this operator is symmetrical. 2 10 The definition presented here is intentionally clumsy, making it easier to present intersection of RFA's 46 4 CONSTRUCTIONS BASED ON REGULAR EXPRESSION STRUCTURE In their original paper <ref> [MY60, Section IV] </ref>, McNaughton and Yamada attempt to define intersection. Unfortunately, their informal presentation is difficult to understand. Subsequent presentations of the RFA operators have all omitted intersection. <p> In Section 4.4 we saw how these operators can be readily implemented with RFA's (without the encoding scheme of this section). The approach presented in this subsection is essentially due to McNaughton and Yamada <ref> [MY60] </ref>, Glushkov [Glus61], and Berry and Sethi [BS86]. The presentations in [B-K93a, Section 2], [BS86], [tEvG93], and [ASU86, Fig. 3.40, pp. 134-141] are particularly clear. <p> The second interpretation equates being "at a mark" with being in the state which 12 Here we assume that the sink state (if it exists) is removed from a DFA produced by the McNaughton-Yamada Glushkov construction. 13 Actually, McNaughton and Yamada <ref> [MY60] </ref> attempted to define intersection and complementation. Their informal descriptions are difficult to understand, and more recent papers use marking and have abandoned trying to define intersection or complementation. <p> Their informal descriptions are difficult to understand, and more recent papers use marking and have abandoned trying to define intersection or complementation. See Section 4.4. 14 This is the interpretation taken by Glushkov, McNaughton and Yamada, and Berry and Sethi <ref> [Glus61, MY60, BS86] </ref>. 74 6 CONCLUSIONS has an out-transition on the alphabet symbol associated with the particular mark (that is, the marked symbol is valid as the next input symbol) 15 .
Reference: [Myhi57] <author> Myhill, J. </author> <title> "Finite automata and the representation of events," </title> <booktitle> WADD TR-57-624, </booktitle> <pages> pp. 112-137, </pages> <institution> Wright Patterson AFB, Ohio, </institution> <year> 1957. </year>
Reference-contexts: A good text book introduction to the theorem is [HU79]. Theorem 5.7 (Myhill-Nerode): The Myhill-Nerode theorem states that the following state ments are equivalent <ref> [Myhi57, Nero58, RS59, HU79] </ref>: 1. L is a regular language. 2. L is the union of some of the equivalence classes of a right-invariant equivalence relation (on V fl ) of finite index. 3.
Reference: [Nero58] <author> Nerode, A. </author> <title> "Linear automaton transformations," </title> <booktitle> Proc. AMS 9: </booktitle> <pages> 541-544, </pages> <year> 1958. </year>
Reference-contexts: A good text book introduction to the theorem is [HU79]. Theorem 5.7 (Myhill-Nerode): The Myhill-Nerode theorem states that the following state ments are equivalent <ref> [Myhi57, Nero58, RS59, HU79] </ref>: 1. L is a regular language. 2. L is the union of some of the equivalence classes of a right-invariant equivalence relation (on V fl ) of finite index. 3.
Reference: [RS59] <author> Rabin, M.O and D. Scott. </author> <title> "Finite automata and their decision problems," </title> <journal> IBM J. Res. </journal> <volume> 3(2): </volume> <pages> 115-125, </pages> <year> 1959. </year>
Reference-contexts: This construction (Construction 4.50) produces a deterministic finite automaton. It is the "mirror image" of the McNaughton-Yamada construction. The second family of constructions (from regular expressions) are those based upon the automata theoretic results of Myhill and Nerode <ref> [RS59] </ref>. They are presented in Section 5: * Myhill and Nerode's construction as presented in [RS59]. This construction (Construction 5.11, which is given as part of the proof of the Myhill-Nerode theorem) uses some language theoretical results to construct a deterministic finite automaton. <p> It is the "mirror image" of the McNaughton-Yamada construction. The second family of constructions (from regular expressions) are those based upon the automata theoretic results of Myhill and Nerode <ref> [RS59] </ref>. They are presented in Section 5: * Myhill and Nerode's construction as presented in [RS59]. This construction (Construction 5.11, which is given as part of the proof of the Myhill-Nerode theorem) uses some language theoretical results to construct a deterministic finite automaton. A version of this construction (Construction 5.19) gives the unique (up to isomorphism) minimal finite automaton. <p> A good text book introduction to the theorem is [HU79]. Theorem 5.7 (Myhill-Nerode): The Myhill-Nerode theorem states that the following state ments are equivalent <ref> [Myhi57, Nero58, RS59, HU79] </ref>: 1. L is a regular language. 2. L is the union of some of the equivalence classes of a right-invariant equivalence relation (on V fl ) of finite index. 3.
Reference: [SS-S88] <author> Sippu, S. and E. Soisalon-Soininen. </author> <title> Parsing Theory: </title> <booktitle> Languages and Parsing, </booktitle> <volume> Vol. 1, </volume> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1988. </year>
Reference: [Thom68] <author> Thompson, K. </author> <title> "Regular expression search algorithms," </title> <editor> C. </editor> <booktitle> ACM 11(6): </booktitle> <pages> 419-422, </pages> <year> 1968. </year>
Reference-contexts: The first family of constructions is presented in Section 4: * Thompson's construction as presented in <ref> [Thom68] </ref>. This algorithm constructs a (possibly nondeterministic) finite automaton (possibly with *-transitions). The description in this paper (Construction 4.3) is based upon those given in [AU92, HU79, Wood87, ASU86] as they are usually considered more readable than Thompson's original paper. <p> The best known (and perhaps the easiest to understand) is Thompson's construction <ref> [Thom68] </ref>. We would like to formalize the notion of "following the syntactic structure." This is done by introducing -algebras in this section. Regular expressions are then defined as a -algebra. 3.1 Some basic definitions This subsection provides the basic definitions required for -algebras. <p> We also consider methods of efficiently implementing some of the constructions, and methods of constructing FA's from extended regular expressions (see Definition 4.53). 4.1 Thompson's construction One -algebra is based upon an RE to FA construction given by Thompson in <ref> [Thom68] </ref>. The explanations given in textbooks such as [HU79, Wood87, AU92, ASU86] are generally considered more readable than Thompson's original paper. None of those presentations made use of - algebras. Definition 4.1 (Thompson's -algebra of FA's): The carrier set is [FA] = .
Reference: [Wats93] <author> Watson, B.W. </author> <title> "A taxonomy of finite automata minimization algorithms," </title> <note> Computing Science Note 93/44, </note> <institution> Eindhoven University of Technology, </institution> <address> The Netherlands, </address> <year> 1993. </year>
Reference-contexts: In order to differentiate these algorithms, a taxonomy of construction algorithms would be useful. This report presents such a taxonomy. A related taxonomy of finite automata minimization algorithms appears in <ref> [Wats93] </ref>. In developing a taxonomy, we have the luxury of rearranging the relationships between the algorithms, possibly introducing relationships that are not present in the history of an algorithm's development. In this paper, for example, we derive DeRemer's construction from Myhill and Nerode's construction.

References-found: 25

