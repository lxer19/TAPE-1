URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/er1p/www/gems/papers/ecoop/ecoop.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/er1p/www/ErikRiedel.html
Root-URL: 
Email: (bruegge, riedel)@cs.cmu.edu  
Title: A Geographic Environmental Modeling System: Towards an ObjectOriented Framework 1  
Author: Bernd Bruegge and Erik Riedel 
Address: Pittsburgh PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract: This paper describes our experience in developing a software system for use in the environmental modeling community. The primary user of this software is intended to be a scientist or regulator working in the area of air quality management and pollution control strategies. The main objective of GEMS is to support the end user in performing various types of analysis requiring the processing of large amounts of data and the interaction between several high-performance computing platforms. The work described here provides the basis for an applicationspecific framework to support this and similar applications, including other areas of environmental modeling, chemical process control, earthquake modeling, and weather prediction. We developed our system by drawing on our experience with the objectoriented development paradigm and by using the concept of rapid prototyping. We describe the initial results of our development activities, talk about our successes, and about some of the problems we have encountered. 2 
Abstract-found: 1
Intro-found: 1
Reference: [Beguelin 1991] <author> Beguelin, A.; Dongarra, J. J.; Geist, G. A.; Manchek, R.; & Sunderam, V. S. </author> <title> A Users Guide to OVM Parallel Virtual Machine . Oak Ridge National Laboratory, </title> <year> 1991. </year> <month> ORNL/TM-11826. </month>
Reference-contexts: What we have developed is an event-based architecture whereby the different processes and machines interact via a set of well-known messages or events. The underlying system used to facilitate communication is the PVM (Parallel Virtual Machine) software developed at Oak Ridge National Laboratories <ref> [Beguelin 1991] </ref>. PVM provides primitives for spawning process on remote machines and for communication and synchronization between processes on different, physically distributed, and heterogeneous systems. What we have added on top on the PVM library is a mechanism for providing callbacks in response to particular messages (events).
Reference: [Beguelin 1993] <author> Beguelin, A.; Dongarra, J.; Geist, A.; & Sunderam, V. </author> <title> Visualization and Debugging in a Heteroge--nous Environment. </title> <booktitle> Computer 26,6 (June 1993): </booktitle> <pages> 88-95. </pages>
Reference: [Bruegge 1993] <author> Bruegge, B.; Gottschalk, T.; & Luo, B. </author> <title> A Framework For Dynamic Program Analyzers, 65-82. </title> <booktitle> Proceedings of OOPSLA 1993 . Washington, </booktitle> <address> DC: </address> <publisher> ACM Press, </publisher> <month> September </month> <year> 1993. </year>
Reference-contexts: It would also be difficult to integrate the use of an OODBMS system with an interface built on PV-Wave since we would be limited to the primitives PV-Wave provided. 7. Monitoring The Monitoring subsystem makes use of the BEE++ distributed event environment <ref> [Bruegge 1993] </ref> to support the software-based distributed dynamic performance analysis of the application. Similar to the Execution subsystem, the Monitoring subsystem takes an event-based approach by viewing the execution of a distributed program as a stream of events. <p> Applicationspecific frameworks support the design of applications in a specific application domain. BEE++ is an domainspecific framework for the development of software-based distributed dynamic analysis tools <ref> [Bruegge 1993] </ref>. The domainspecific software architecture (DSSA) work at IBM provides a process for reuse of domainspe-cific software frameworks and design rationales [Tracz 1993]. The eventual goal of GEMS is to provide an application-specific framework to support software development in the environmental modeling community.
Reference: [Bureau 1990] <institution> Bureau of the Census. TIGER: The Coast-to-Coast Digital Map Data Base . Washington, DC: U.S. Department of Commerce, </institution> <year> 1990. </year>
Reference-contexts: Each layer can be made up of different sets of screen objects (from the Graphical_Entity hierarchy) and each has its own scaling system. This allows us to have a Census_Layer which consists of Polygons representing TIGER <ref> [Bureau 1990] </ref> counties or districts or tract specified in latitude and longitude coordinates, a Grid_Layer which consists of a uniform set of rectangles specified by giving the lower right corner in Universal Transverse Mercator (UTM) coordinates and specifying how many grids across and down there should be, and a Source_Layer where
Reference: [DEC 1991] <institution> DEC Visual User Interface Tool (SPD 42.51.00). Maynard, MA: Digital Equipment Corporation 1991. </institution>
Reference-contexts: We see a need for a generalized system that can provide a consistent interface to the analysis and experimentation necessary. Our prototype system was developed in C++ using the X Window System and the Motif toolkit for user interface design and implementation. We explored several options <ref> [Linton 1991, DEC 1991] </ref> for using user interface builders to develop the interface to our system, but we were unsatisfied with the lack of flexibility these systems provided.
Reference: [Fekete 1991] <author> Fekete, Jean-Daniel. WWL: </author> <title> Widget Wrapper Library for C++ . Orsay Cedex, </title> <institution> France: Laboratoire de Recherche en Informatique, </institution> <month> February </month> <year> 1991. </year>
Reference-contexts: In order to fit the user interface within the rest of the system we made use of a set of widget wrappers developed by a research group at the Universite de Paris-Sud in France <ref> [Fekete 1991] </ref>. These widget wrappers served to encapsulate Motif widgets and callbacks in a set of objects that interacted well with the rest of the system. An example of the use of the WWL (widget wrapper library) system is given in Figure 1.
Reference: [Gorlen 1990] <author> Gorlen, K.; Orlow, S.; & Plexico, P. </author> <title> Data Abstraction and ObjectOriented Programming in C++ . Chichester, </title> <address> England: </address> <publisher> John Wiley & Sons Ltd., </publisher> <year> 1990. </year>
Reference-contexts: We classify existing frameworks into three categories - code-level, user interface, and applicationspecific. Code-level frameworks provide class libraries covering general data structures such as collections, search tables or trees. The first such framework was the Smalltalk class library. Another example is the NIH library <ref> [Gorlen 1990] </ref> which is a reimplementation of the Smalltalk class library in C++. User Interface frameworks are designed to support the development of general applications that can provide a consistent look and feel across different applications.
Reference: [IBM 1992] <institution> IBM Visualization Data Explorer Users Guide . Yorktown Heights, NY: IBM Corporation, Thomas J. Watson Research Center, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: Our main difficulty in this direction was that PV-Wave (and most of the commercial visualization systems we have so far come across) expect to be the main driver of what a user sees <ref> [IBM 1992, PV-Wave 1992] </ref>. Since we wanted users to remain within our own user interface we were essentially pushing PV-Wave in a direction it was not intended to go.
Reference: [Johnson 1991] <author> Johnson, Ralph E.; & Russo, Vincent F. </author> <title> Reusing ObjectOriented Designs (UIUCDCS-R-91-1696). </title> <institution> Urbana, IL: University of Illinois at Urbana-Champaign, Department of Computer Science, </institution> <year> 1991. </year>
Reference-contexts: Objectoriented development permits the reuse of design as well as specific pieces of code. A distinction has been made between abstract classes that provide reusable designs for individual components, and frameworks which provide reusable designs for entire applications or subsystems. <ref> [Johnson 1991] </ref> Frameworks provide a higher level of reuse than abstract classes and allow considerable leverage in the rapid development of software systems.
Reference: [Linton 1989] <author> Linton, M.A.; Vlissides, J. M.; & Calder, P. R. </author> <title> Composing User interfaces with Interviews. </title> <booktitle> Computer 22, </booktitle> <month> 2 (February </month> <year> 1989): </year> <pages> 8-22. </pages>
Reference-contexts: Other examples of user interface specific frameworks for the construction of user interfaces include the Andrew Toolkit (ATK) [Palay 1988], the X Toolkit (Xt) [Nye 1990], Interviews <ref> [Linton 1989] </ref> and ET++ [Weinand 1989]. Applicationspecific frameworks support the design of applications in a specific application domain. BEE++ is an domainspecific framework for the development of software-based distributed dynamic analysis tools [Bruegge 1993].
Reference: [MacApp 1990] <institution> Macapp 2.0 General Reference Manual . Cupertina, CA: Apple Computer 1990. </institution>
Reference-contexts: User Interface frameworks are designed to support the development of general applications that can provide a consistent look and feel across different applications. MacApp, for example, is a user interface-level framework that makes the task of building applications programs for the Macintosh faster and easier <ref> [MacApp 1990] </ref>. Other examples of user interface specific frameworks for the construction of user interfaces include the Andrew Toolkit (ATK) [Palay 1988], the X Toolkit (Xt) [Nye 1990], Interviews [Linton 1989] and ET++ [Weinand 1989]. Applicationspecific frameworks support the design of applications in a specific application domain.
Reference: [McRae 1990] <author> McRae, Gregory J.; & Russell, Armistead G. Smog, </author> <title> Supercomputers, </title> <booktitle> and Society. Computers in Physics (May/June 1990): </booktitle> <pages> 227-232. </pages>
Reference: [McRae 1982] <author> McRae, G. J.; Goodin, W. R.; & Seinfeld, J. H. </author> <title> Development of a Second Generation Mathematical Model for Urban Air Pollution: I. Model Formulation. </title> <booktitle> Atmospheric Environment 16 (1982): </booktitle> <pages> 679-696. </pages>
Reference-contexts: The models that are being used from within GEMS - the CIT (California/Carnegie Institute of Technology) Airshed Model, the UAM (Urban Airshed Model) from the U.S. EPA and the URM developed at Carn--egie Mellon University <ref> [McRae 1982] </ref> - are all implemented in Fortran and are available for a number of machine architectures. The purpose of the Execution subsystem of GEMS is to provide transparent access to these models and the underlying computational resources.
Reference: [Milford 1989] <author> Milford, J. B.; Russell, A. G.; & McRae, G. J. </author> <title> A New Approach to Photochemical Pollution Control: Implications of Spatial Patterns in Pollutant Responses to Reductions in Nitrogen Oxides and Reactive Organics. </title> <booktitle> Environmental Science and Technology 23 (1989): </booktitle> <pages> 1290-1301. </pages>
Reference-contexts: A one-day simulation requires 20 megabytes of input data and produces 10 megabytes of output data. This means that a one-year scenario would require 7 gigabytes of input and produce 4 gigabytes of output data each time it is run. In the course of performing sensitivity analysis <ref> [Milford 1989] </ref> using the model, it will be necessary to perform up to 100 such runs, thereby reaching terabyte storage capacities.
Reference: [Nye 1990] <author> Nye, A.; & O'Reilly, T. </author> <title> X Toolkit Intrinsics Programming Manual . O'Reilly & Associates, </title> <publisher> Inc., </publisher> <year> 1990. </year>
Reference-contexts: MacApp, for example, is a user interface-level framework that makes the task of building applications programs for the Macintosh faster and easier [MacApp 1990]. Other examples of user interface specific frameworks for the construction of user interfaces include the Andrew Toolkit (ATK) [Palay 1988], the X Toolkit (Xt) <ref> [Nye 1990] </ref>, Interviews [Linton 1989] and ET++ [Weinand 1989]. Applicationspecific frameworks support the design of applications in a specific application domain. BEE++ is an domainspecific framework for the development of software-based distributed dynamic analysis tools [Bruegge 1993].
Reference: [OMG 1992] <institution> Object Management Group. Object Services Architecture (OMG Document 92.8.4). Framingham, MA: Object Management Group, Inc., </institution> <year> 1992. </year>
Reference-contexts: Interesting work has been done in this area by the Object Management Group in their architecture for object services and the CORBA standard <ref> [OMG 1992] </ref> and by the Open Software Foundation in their work on the Distributed Computing Environment (DCE) [OSF 1991]. We will be closely examining both of these approaches to see how we might leverage this existing work in the GEMS system. 5.
Reference: [Objectivity 1992] <institution> Objectivity/DB Documentation . Menlo Park, CA: Objectivity, Inc. </institution> <year> 1992. </year>
Reference-contexts: Performance of the data management subsystem is also very important on machines such as the Cray YMP-C90 since we do not want this system to be bottlenecked in performing I/O operations. In our current prototype system, we are using Objectivity as our OODBMS <ref> [Objectivity 1992] </ref>. We are currently managing the Map, Population, and Emission data and pointers to the Imagery, Elevation, and Gridded data with Objectivity.
Reference: [OSF 1991] <author> Open Software Foundation. </author> <title> Remote Procedure Call in a Distributed Computing Environment . Cam-bridge, MA: Open Software Foundation. </title> <month> August </month> <year> 1991. </year>
Reference-contexts: Interesting work has been done in this area by the Object Management Group in their architecture for object services and the CORBA standard [OMG 1992] and by the Open Software Foundation in their work on the Distributed Computing Environment (DCE) <ref> [OSF 1991] </ref>. We will be closely examining both of these approaches to see how we might leverage this existing work in the GEMS system. 5.
Reference: [Palay 1988] <author> Palay, A.; Hansen, W.; Kazar, N.; Sherman, M.; Wadlow, M.; Neuendorffer, N.; Stern, Z.; Bader, M.; & Peters, T. </author> <title> The Andrew Toolkit: An Overview. </title> <booktitle> Proceedings of the USENIX Technical Conference , 1988. </booktitle>
Reference-contexts: MacApp, for example, is a user interface-level framework that makes the task of building applications programs for the Macintosh faster and easier [MacApp 1990]. Other examples of user interface specific frameworks for the construction of user interfaces include the Andrew Toolkit (ATK) <ref> [Palay 1988] </ref>, the X Toolkit (Xt) [Nye 1990], Interviews [Linton 1989] and ET++ [Weinand 1989]. Applicationspecific frameworks support the design of applications in a specific application domain. BEE++ is an domainspecific framework for the development of software-based distributed dynamic analysis tools [Bruegge 1993].
Reference: [PV-Wave 1992] <institution> PV-Wave Command Language Users Guide . Boulder, CO: Precision Visuals, Inc. </institution> <year> 1992. </year>
Reference-contexts: In order for this data to provide useful insight into the workings of the atmosphere it must be visualized in a form that users can readily interpret. We have made use of an existing visualization system - PV-Wave from Precision Numerics, Inc. <ref> [PV-Wave 1992] </ref> - to produce a visual representation of the model outputs. The PV-Wave product provides a command language that can be used to control the functioning of PV-Wave from an external program. <p> Our main difficulty in this direction was that PV-Wave (and most of the commercial visualization systems we have so far come across) expect to be the main driver of what a user sees <ref> [IBM 1992, PV-Wave 1992] </ref>. Since we wanted users to remain within our own user interface we were essentially pushing PV-Wave in a direction it was not intended to go.
Reference: [Riedel 1993] <author> Riedel, Erik; & Segall, Edward. </author> <title> Demonstration of Geographic Environmental Modeling System . Port--land, OR: </title> <booktitle> Supercomputing 93, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: one day of simulation took 8 hours of CPU time to compute on a DECstation 5000 machine, today the same day of simulation runs in 1.5 hours on a DEC Alpha AXP and as little as 15 minutes on a set of loosely-coupled Alpha AXP machines working together in parallel <ref> [Riedel 1993] </ref>. With further advances in parallel machine architectures and parallel programming systems, we hope to see a 100-fold increase in performance in one or two years time. This means that a one day simulation will take less than 10 seconds of wall clock time.
Reference: [Richardson 1989] <author> Richardson, J.; & Carey, M. </author> <title> Persistence in the E Language: Issues and Implementation. </title> <note> Software Practice and Experience 19 (December 1989). </note>
Reference-contexts: We are currently managing the Map, Population, and Emission data and pointers to the Imagery, Elevation, and Gridded data with Objectivity. In evaluating systems for use to provide Data Management, we also looked at the Exodus OODBMS software from the University of Wisconsin <ref> [Richardson 1989] </ref>, and the POSTGRES system from the University of California - Berkeley [Stonebraker 1987].
Reference: [Rumbaugh 1991] <author> Rumbaugh, J.; Blaha, M.; Premerlani, W.; Eddy, F.; & Lorenson, W. </author> <title> ObjectOriented Modeling and Design . Englewood Cliffs, </title> <address> NJ: </address> <publisher> Prentice-Hall, </publisher> <year> 1991. </year>
Reference: [Rumbaugh 1992] <author> Rumbaugh, James. </author> <title> Object Modeling Tool (OMTool) Users Manual . Version 3.14. </title> <institution> Scenectady, NY: GE Corporate Research and Development, </institution> <month> February </month> <year> 1992. </year>
Reference: [Stonebraker 1987] <author> Stonebraker, M. R.; & Rowe, L. A. </author> <note> The POSTGRES Papers (Research Memo UCB/ERL M86/ 85) Berkeley, </note> <institution> CA: University of California - Berkeley, </institution> <year> 1987. </year>
Reference-contexts: In evaluating systems for use to provide Data Management, we also looked at the Exodus OODBMS software from the University of Wisconsin [Richardson 1989], and the POSTGRES system from the University of California - Berkeley <ref> [Stonebraker 1987] </ref>. We were very impressed with the performance of the Exodus system but we eliminated it from further consideration due to the fact that the Exodus development group has moved on to other projects and is no longer supporting Exodus or extending that work.
Reference: [Tracz 1993] <author> Tracz, W.; Coglianese, L.; & Young, P. </author> <title> A DomainSpecific Software Architecture Engineering Process Outline. </title> <booktitle> SIGSOFT Software Engineering Notes 18,2 (April 1993): </booktitle> <pages> 40-49. </pages>
Reference-contexts: Applicationspecific frameworks support the design of applications in a specific application domain. BEE++ is an domainspecific framework for the development of software-based distributed dynamic analysis tools [Bruegge 1993]. The domainspecific software architecture (DSSA) work at IBM provides a process for reuse of domainspe-cific software frameworks and design rationales <ref> [Tracz 1993] </ref>. The eventual goal of GEMS is to provide an application-specific framework to support software development in the environmental modeling community.
Reference: [Weinand 1989] <author> Weinand, A.; Gamma, E.; & Marty, R. </author> <title> Design and Implementation of ET++, a Seamless Object-Oriented Application Framework. Structured Programming 10, </title> <booktitle> 2 (1989): </booktitle> <pages> 63-87. </pages>
Reference-contexts: Other examples of user interface specific frameworks for the construction of user interfaces include the Andrew Toolkit (ATK) [Palay 1988], the X Toolkit (Xt) [Nye 1990], Interviews [Linton 1989] and ET++ <ref> [Weinand 1989] </ref>. Applicationspecific frameworks support the design of applications in a specific application domain. BEE++ is an domainspecific framework for the development of software-based distributed dynamic analysis tools [Bruegge 1993].
References-found: 27

