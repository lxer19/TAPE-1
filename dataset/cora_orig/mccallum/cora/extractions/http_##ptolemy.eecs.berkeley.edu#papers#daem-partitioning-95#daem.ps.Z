URL: http://ptolemy.eecs.berkeley.edu/papers/daem-partitioning-95/daem.ps.Z
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/daem-partitioning-95/
Root-URL: 
Title: Partitioning Problem: Hardware/Software Mapping, Scheduling, and Implementation-bin Selection Journal of Design Automation of Embedded Systems,
Author: Asawaree Kalavade Edward A. Lee 
Address: Berkeley, California 94720  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California  Cadence, Dolby, Hitachi, Lucky-Goldstar, Mentor Graphics, Mitsubishi, Motorola, NEC, Phil-ips, and Rockwell.  
Note: 1 of 40  The Extended  This research is part of the Ptolemy project, which is supported by the Advanced Research Projects Agency and the U.S. Air Force (under the RASSP program F33615-93-C-1317), the Semiconductor Research Corporation (SRC) (project 95-DC-324-016), the National Science Foundation (MIP-9201605), the State of California MICRO program, and the following companies: Bell Northern Research,  Submitted to  
Abstract: In system-level design, applications are represented as task graphs where tasks (called nodes) have moderate to large granularity and each node has several implementation options differing in area and execution time. We define the extended partitioning problem as the joint determination of the mapping (hardware or software), the implementation option (called implementation bin), as well as the schedule, for each node, so that the overall area allocated to nodes in hardware is minimum and a deadline constraint is met. This problem is considerably harder (and richer) than the traditional binary partitioning problem that determines just the best mapping and schedule. Both binary and extended partitioning problems are constrained optimization problems and are NP-hard. We first present an efficient (O(N 2 )) heuristic, called GCLP, to solve the binary partitioning problem. The heuristic reduces the greediness associated with traditional list-scheduling algorithms by formulating a global measure, called global criticality (GC). The GC measure also permits an adaptive selection of the optimization objective at each step of the algorithm; since the optimization problem is constrained by a deadline, either area or time is optimized at a given step based on the value of GC. The selected objective is used to determine the mapping of nodes that are normal, i.e. nodes that do not exhibit affinity for a particular mapping. To account for nodes that are not normal, we define extremities and repel-lers. Extremities consume disproportionate amounts of resources in hardware and software. Repellers are inherently unsuitable to either hardware or software based on certain structural properties. The mapping of extremities and repellers is determined jointly by GC and their local preference. We then present an efficient (O(N 3 + N 2 B), for N nodes and B bins per node) heuristic for extended partitioning, called MIBS, that alternately uses GCLP and an implementation-bin selection procedure. The implementation-bin selection procedure chooses, for a node with already determined mapping, an implementation bin that maximizes the area-reduction gradient of as-yet unmapped nodes. Solutions generated by both heuristics are shown to be reasonably close to optimal. Extended partitioning generates considerably smaller overall hardware as compared to binary partitioning. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Kalavade, </author> <title> System-level Codesign of Mixed Hardware-Software Systems, </title> <publisher> Ph. </publisher> <address> D. </address> <institution> Dissertation, University of Cali-fornia, Berkeley, </institution> <address> CA, Sept. 1995 (http://ptolemy.eecs.berkeley.edu/~kalavade). </address>
Reference-contexts: P1 is NP-hard and can be formulated exactly as an ILP <ref> [1] </ref>. j NH i Related Work The Extended Partitioning Problem 7 of 40 The extended partitioning problem (P2): Given a DAG, hardware and software implementation curves for all the nodes, communication costs, resource capacity constraints, and a required deadline D, find a hardware or software mapping (M i ), the implementation <p> It is obvious that P2 is a much harder problem than P1. It has (2B) |N| alternatives, given B implementation bins per mapping. P2 can be formulated exactly as an integer linear program, similar to P1. An ILP formulation for P2 is given in <ref> [1] </ref>. The motivation for solving the extended partitioning problem is two-fold. First, the exibility of selecting an appropriate implementation bin for a node, instead of assuming a fixed implementation, is likely to reduce the overall hardware area. <p> For the hardware resource, the resource area required by the node is divided by the available hardware area (AH remaining ). Obj2 thus favors software allocation as the algorithm proceeds. GCLP has a quadratic complexity in the number of nodes <ref> [1] </ref>. The performance of the algorithm is analyzed in the next section. 4.0 Performance of the GCLP Algorithm We first describe the two classes of examples used to analyze the performance of the algorithm: practical examples, and random graphs. Next, we present two sets of experiments. <p> The hardware-software area and time estimates of the nodes in the random graph are generated by taking into account the trend observed in real examples. Details of the techniques used to generate the random graphs are given in <ref> [1, Appendix A7] </ref>. For each size, we generate 10 random graphs differing in topology and area and time metrics. The heuristic is applied for each random graph and the average value of the result is reported for that size. 4.1 Experiment 1: GCLP vs. <p> The bin selection pro cedure has complexity O (B (|N| + |A|)), as shown in <ref> [1] </ref>.
Reference: [2] <author> M. Potkonjak, J. Rabaey, </author> <title> Optimizing Resource Utilization using Transformations, </title> <journal> IEEE Transactions of Computer-Aided Design of Integrated Circuits and Systems, March 1994, </journal> <volume> vol. 13, no. 3, </volume> <pages> pp. 277-292. </pages>
Reference: [3] <author> P. Hilfinger, </author> <title> A High-level Language and Silicon Compiler for Digital Signal Processing, </title> <booktitle> Proc. of IEEE 1985 Custom Integrated Circuits Conference, </booktitle> <address> Portland, OR, </address> <month> May 20-23, </month> <year> 1985, </year> <pages> pp 213-216. </pages>
Reference: [4] <author> J. M. Rabaey et al. </author> <title> Fast Prototyping of Datapath-intensive Architectures, </title> <booktitle> IEEE Design & Test, </booktitle> <pages> pp. 40-51, </pages> <month> June </month> <year> 1991 </year>
Reference: [5] <author> E. A. Lee, D. G. Messerschmitt, </author> <title> Synchronous Data Flow, </title> <booktitle> Proc. of the IEEE, Sept. 1987, </booktitle> <volume> vol. 75, no. 9, </volume> <pages> pp. 1235-1245. </pages>
Reference: [6] <author> R. Gupta, G. DeMicheli, </author> <title> System-level Synthesis Using Re-programmable Components, </title> <booktitle> Proceedings of the European Conference on Design Automation, </booktitle> <address> Brussels, Belgium, </address> <publisher> Feb.1992, </publisher> <pages> pp 2-7. </pages>
Reference-contexts: The bin selection procedure is described in Section 6.0. The details of the MIBS algorithm are described in Section 7.0, and its performance is analyzed in Section 8.0. 2.0 Related Work Binary Partitioning Gupta et al. <ref> [6] </ref> discuss a scheme where all data-independent nodes are initially mapped to hardware. Nodes are at an instruction level of granularity. Nodes are progressively moved from hardware to software if the resultant solution is feasible and the cost of the new partition is smaller than the earlier cost.
Reference: [7] <author> R. Ernst, J. Henkel, </author> <title> Hardware/software Codesign of Embedded Controllers based on Hardware Extraction, </title> <booktitle> Handouts of the 1st Intl. Workshop on Hardware/Software Codesign, </booktitle> <address> Estes Park, Colorado, </address> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: Nodes are at an instruction level of granularity. Nodes are progressively moved from hardware to software if the resultant solution is feasible and the cost of the new partition is smaller than the earlier cost. The scheme proposed by Henkel et al. <ref> [7] </ref> also assumes an instruction level of granularity. All the nodes are mapped to software at the start and then moved to hardware (using simulated annealing) until timing Related Work The Extended Partitioning Problem 8 of 40 constraints are met.
Reference: [8] <author> E. Baros, W. Rosential, </author> <title> A Method for Hardware/Software Partitioning, </title> <booktitle> Proc. of COMPEURO92, IEEE Intl. Conference on Computer and Software Engineering, </booktitle> <month> May 4-8, </month> <year> 1992, </year> <title> The Hague, </title> <booktitle> The Netherlands, </booktitle> <pages> pp 580-585. </pages>
Reference-contexts: All the nodes are mapped to software at the start and then moved to hardware (using simulated annealing) until timing Related Work The Extended Partitioning Problem 8 of 40 constraints are met. Baros et al. <ref> [8] </ref> present a two-stage clustering approach to the mapping problem. Clusters are characterized by attribute values and are assigned hardware and software mappings based on their attribute values. DAmbrosio et al. [9] describe an approach for partitioning applications where each node has a deadline constraint.
Reference: [9] <author> J. G. DAmbrosio, X. Hu, </author> <title> Configuration-level Hardware/Software Partitioning for Real-Time Embedded Systems, </title> <booktitle> Proc. of Third Intl. Workshop on Hardware/Software Codesign, </booktitle> <address> Grenoble, France, </address> <month> Sept. </month> <year> 1994, </year> <pages> pp. 34-41. </pages>
Reference-contexts: Baros et al. [8] present a two-stage clustering approach to the mapping problem. Clusters are characterized by attribute values and are assigned hardware and software mappings based on their attribute values. DAmbrosio et al. <ref> [9] </ref> describe an approach for partitioning applications where each node has a deadline constraint. The input specification is transformed into a set of constraints that is solved by an optimizing tool called GOPS, which uses a branch and bound approach, to determine the mapping.
Reference: [10] <author> D. E. Thomas et al, </author> <title> A Model and Methodology for Hardware/Software Codesign, </title> <booktitle> IEEE Design & Test, </booktitle> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: The input specification is transformed into a set of constraints that is solved by an optimizing tool called GOPS, which uses a branch and bound approach, to determine the mapping. Thomas et al. <ref> [10] </ref> propose a manual partitioning approach for task-level specifications. They discuss the properties of tasks that render them suitable to either hardware or software mapping. In their approach, the designer has to qualitatively evaluate these properties and make a mapping decision.
Reference: [11] <author> G. Sih, E. A. Lee, </author> <title> A Compile-Time Scheduling Heuristic for Interconnection-Constrained Heterogeneous Processor Architectures, </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> Vol. 4, No. 2, </volume> <month> Feb. </month> <year> 1993, </year> <pages> pp 175-187. </pages>
Reference: [12] <author> T. Hamada et al., </author> <title> Macropipelining based heterogeneous multiprocessor scheduling, </title> <booktitle> Proc. of IEEE Intl. Conference on Acoustics, Speech and Signal Processing (ICASSP), </booktitle> <address> San Francisco, CA, USA, </address> <month> 23-26 March </month> <year> 1992, </year> <booktitle> vol 5, </booktitle> <pages> pp. </pages> <month> 597-600. </month> <title> References The Extended Partitioning Problem 40 of 40 </title>
Reference: [13] <author> E. D. Lagnese, D. E. Thomas, </author> <title> Architectural Partitioning for System-level Synthesis of ICs, </title> <journal> IEEE Transactions on Computer Aided Design, </journal> <volume> Vol. 10, no. 7, </volume> <month> July </month> <year> 1991, </year> <pages> pp 847-860. </pages>
Reference: [14] <author> M. C. McFarland, T. J. Kowalski, </author> <title> Incorporating Bottom-up Design into Hardware Synthesis, </title> <journal> IEEE Transactions on Computer Aided Design, </journal> <volume> Vol. 9, no. 9, </volume> <month> Sept. </month> <year> 1990, </year> <pages> pp 938-950. </pages>
Reference: [15] <author> R. Camposano, R. K. Brayton, </author> <title> Partitioning before Logic Synthesis, </title> <booktitle> Proc. of the Intl. Conference on Computer Aided Design (ICCAD), </booktitle> <year> 1987, </year> <pages> pp 324-326. </pages>
Reference-contexts: The goal in most cases is to meet the chip capacity constraints; timing constraints are not considered. Most of the proposed schemes (for example, [13][14]) use a clustering-based approach first presented by Camposano et al. <ref> [15] </ref>. The approaches used to solve the throughput-constrained scheduling problem in high-level hardware synthesis, (such as force directed scheduling by Paulin et al. [16]), do not directly extend to the hardware/software mapping and scheduling problem.
Reference: [16] <author> P. G. Paulin, J. P. Knight, </author> <title> Force-Directed Scheduling for the Behavioral Synthesis of ASICs, </title> <journal> IEEE Trans. on CAD, </journal> <volume> Vol. 8, no. 6, </volume> <month> June 89, </month> <pages> pp 661-679. </pages>
Reference-contexts: Most of the proposed schemes (for example, [13][14]) use a clustering-based approach first presented by Camposano et al. [15]. The approaches used to solve the throughput-constrained scheduling problem in high-level hardware synthesis, (such as force directed scheduling by Paulin et al. <ref> [16] </ref>), do not directly extend to the hardware/software mapping and scheduling problem. Extended Partitioning The authors are not aware of any published work that formulates or solves the extended hardware/ software partitioning problem in system-level design.
Reference: [17] <author> R. K. Brayton et al. </author> <title> Multilevel Logic Synthesis, </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 78 </volume> (2):264-300, February 1990. 
Reference-contexts: Extended Partitioning The authors are not aware of any published work that formulates or solves the extended hardware/ software partitioning problem in system-level design. The problem of selecting an appropriate bin from the area-time trade-off curve is reminiscent of the technology mapping problem in physical CAD <ref> [17] </ref>, and the module selection (also called resource-type selection) problem in high-level synthesis [18], both of which are known to be NP-hard problems.
Reference: [18] <author> G. De Micheli, </author> <title> Synthesis and Optimization of Digital Circuits, </title> <address> New York, </address> <publisher> McGraw-Hill, </publisher> <year> 1994. </year>
Reference-contexts: The problem of selecting an appropriate bin from the area-time trade-off curve is reminiscent of the technology mapping problem in physical CAD [17], and the module selection (also called resource-type selection) problem in high-level synthesis <ref> [18] </ref>, both of which are known to be NP-hard problems. The technology mapping problem is to bind nodes in a Boolean network, representing a combinational logic circuit, to gates in the library such that the area of the circuit is minimized while meeting timing constraints.
Reference: [19] <author> K. Chaudhary, M. Pedram, </author> <title> A Near Optimal Algorithm for Technology Mapping Minimizing Area under Delay Constraints, </title> <booktitle> Proc. of 29th Design Automation Conference, </booktitle> <address> Anaheim, CA, </address> <month> June </month> <year> 1992, </year> <pages> pp 492-498. </pages>
Reference: [20] <author> M. Ishikawa, G. De Micheli, </author> <title> A Module Selection Algorithm for High-level Synthesis, </title> <booktitle> Proc. of 1991 IEEE International Symposium on Circuits and Systems, </booktitle> <address> Singapore, </address> <month> 11-14 June </month> <year> 1991, </year> <pages> vol.3, pp. 1777-80. </pages>
Reference: [21] <author> T. C. Hu, </author> <title> Parallel Sequencing and Assembly Line Problems, </title> <note> Operations Research 9(6), </note> <month> Nov. </month> <year> 1961, </year> <pages> pp 841-848. </pages>
Reference-contexts: among others) have been proposed to solve this problem. 3.0 The Binary Partitioning Problem: GCLP Algorithm In this section, we present the Global Criticality/Local Phase (GCLP) algorithm to solve the binary partitioning problem (P1). 3.1 Algorithm Foundation The underlying scheduling framework in the GCLP algorithm is based on list scheduling <ref> [21] </ref>. The general approach in list scheduling is to serially traverse a node list (usually from the source node to the sink node in the DAG 3 ) and for each node to select a mapping that minimizes an objective function.
Reference: [22] <author> J. Buck et al., Ptolemy: </author> <title> a Framework for Simulating and Prototyping Heterogeneous Systems, </title> <journal> International Journal of Computer Simulation, special issue on Simulation Software Development, </journal> <volume> v4, </volume> <pages> 155-182, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: Two examples are used: 32KHz 2-PSK modem, and 8 KHz bidirectional telephone channel simulator (TCS). These applications are specified in Ptolemy <ref> [22] </ref>. Figure 8 shows the receiver section of the modem example. A DAG is generated from the SDF graph representation. Nodes in the DAG are at a task level of granularity.
References-found: 22

