URL: http://www.icsi.berkeley.edu/~luby/PAPERS/blind.ps
Refering-URL: http://www.icsi.berkeley.edu/~luby/crypto.html
Root-URL: http://www.icsi.berkeley.edu
Email: ari@rsa.com.  Email: luby@pa.dec.com.  Email: rafail@bellcore.com.  
Phone: 2  3  
Title: Security of Blind Digital Signatures (Extended Abstract)  
Author: Ari Juels ? Michael Luby Rafail Ostrovsky 
Address: Email:  130 Lytton Avenue, Palo Alto, CA 94301-1044.  445 South St., MCC 1C-365B, Morristown, NJ 07960-6438, USA.  
Affiliation: 1 RSA Laboratories.  Digital Equipment Corporation,  Bell Communications Research,  
Abstract: Blind digital signatures were introduced by Chaum. In this paper, we show how security and blindness properties for blind digital signatures, can be simultaneously defined and satisfied, assuming an arbitrary one-way trapdoor permutation family. Thus, this paper presents the first complexity-based proof of security for blind signatures.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> S.A. Brands. </author> <title> Untraceable Off-line Electronic Cash Based on Secret-key Certificates. </title> <type> Latin 95. </type>
Reference-contexts: Blind/untraceable signatures have attracted considerable attention in the literature (see, for example, <ref> [7, 20, 1, 22] </ref> and references therein), and are used in several proposed electronic digital cash systems. <p> We refer to this as the atomic signature property. Recall that the Forger may request at most a polynomial number of signatures, say p (k), before producing her forgery. The Inverter therefore chooses a number r uniformly at random from <ref> [1; p (k)] </ref>. This specifies the interaction with the Forger in which she will try to plant her trap. The Inverter also chooses a height a of a tree uniformly at random at which to plant her trap.
Reference: 2. <author> M. Bellare and S. Micali. </author> <title> "How to Sign Given Any Trapdoor Function". </title> <note> STOC 88. </note>
Reference-contexts: They also demonstrated the first scheme which is secure against such an attack 4 assuming the existence of claw-free permutations, which in turn may be based on the hardness of factoring. Subsequently, signatures secure against existential adaptive chosen-message attacks were shown assuming the existence of trapdoor permutations <ref> [2] </ref>, one-way permutations [19], and general one-way functions [24]. More efficient schemes secure against such an attack were shown in [8], and schemes with additional properties were considered in [11, 3, 16]. <p> Researchers use two 4 We remark that [23] is not secure against existential adaptive chosen-message attacks since there are signatures that can be forged under this attack. different approaches for proving the security of signature schemes: complexity--based proofs of security <ref> [9, 15, 2, 19, 24, 3, 16, 8] </ref> and random-oracle model proofs of security [10, 4, 21, 22]. Let us elaborate on these two notions of security: Two Notions of Security for Digital Signatures: - Complexity-based proofs: The complexity-based approach was put forth by Diffie and Hellman [9].
Reference: 3. <author> M. Bellare and S. Goldwasser. </author> <title> "New Paradigms for Digital Signatures and Message Authentication Based on Non-Interactive Zero Knowledge Proofs". </title> <type> Crypto 89. </type>
Reference-contexts: Subsequently, signatures secure against existential adaptive chosen-message attacks were shown assuming the existence of trapdoor permutations [2], one-way permutations [19], and general one-way functions [24]. More efficient schemes secure against such an attack were shown in [8], and schemes with additional properties were considered in <ref> [11, 3, 16] </ref>. Blind Signatures: Chaum [6] proposed the notion of "blind digital signatures" as a key tool for constructing various anonymous electronic cash instruments. These are instruments for which the bank cannot trace where (and hence for what purpose) a user spends her electronic currency. <p> Researchers use two 4 We remark that [23] is not secure against existential adaptive chosen-message attacks since there are signatures that can be forged under this attack. different approaches for proving the security of signature schemes: complexity--based proofs of security <ref> [9, 15, 2, 19, 24, 3, 16, 8] </ref> and random-oracle model proofs of security [10, 4, 21, 22]. Let us elaborate on these two notions of security: Two Notions of Security for Digital Signatures: - Complexity-based proofs: The complexity-based approach was put forth by Diffie and Hellman [9].
Reference: 4. <author> M. Bellare and P. Rogaway. </author> <title> "The Exact Security of Digital Signatures How to Sign with RSA and Rabin". </title> <publisher> Eurocrypt-96. </publisher>
Reference-contexts: We remark that [23] is not secure against existential adaptive chosen-message attacks since there are signatures that can be forged under this attack. different approaches for proving the security of signature schemes: complexity--based proofs of security [9, 15, 2, 19, 24, 3, 16, 8] and random-oracle model proofs of security <ref> [10, 4, 21, 22] </ref>. Let us elaborate on these two notions of security: Two Notions of Security for Digital Signatures: - Complexity-based proofs: The complexity-based approach was put forth by Diffie and Hellman [9]. <p> Proofs based on random oracle model: In the case when complexity-based proofs seem to be difficult to attain, the approach used, for example in <ref> [10, 4, 21, 22] </ref>, is to assume that a cryptographic primitive (such as DES or MD5) behaves like a truly random function. The security of the scheme is then shown under the assumption that the underlying primitive behaves in a near ideal fashion.
Reference: 5. <author> R. </author> <note> Canetti "De-mystifying Random Oracles" CRYPTO-97 (this proceedings). </note>
Reference-contexts: The security of the scheme is then shown under the assumption that the underlying primitive behaves in a near ideal fashion. Such proofs are weaker than complexity-based proofs. (For a related discussion see <ref> [5] </ref>). Clearly, the complexity-based proofs of security are preferable to random-oracle model proofs of security. Until now, however, the only proofs of security for blind digital signature schemes have been in the random oracle model. This paper presents the first blind signature scheme with complexity-based proof of security.
Reference: 6. <author> D. Chaum. </author> <title> "Blind Signatures for Untraceable Payments". </title> <publisher> Crypto-82. </publisher>
Reference-contexts: More efficient schemes secure against such an attack were shown in [8], and schemes with additional properties were considered in [11, 3, 16]. Blind Signatures: Chaum <ref> [6] </ref> proposed the notion of "blind digital signatures" as a key tool for constructing various anonymous electronic cash instruments. These are instruments for which the bank cannot trace where (and hence for what purpose) a user spends her electronic currency. <p> Our Result: In the next section, we formally define the notion of security of a blind digital signature scheme. Informally, a blind digital signature scheme is secure if it satisfies both a blindness and a non-forgeability property. The blindness property was formulated in the original paper of Chaum <ref> [6] </ref>, and non-forgeability was considered in the paper of Pointeval and Stern [22] (where it is called called "one more" forgery).
Reference: 7. <author> D. Chaum, A. Fiat, and M. Naor. </author> <title> "Untraceable Electronic Cash", </title> <publisher> Crypto-89. </publisher>
Reference-contexts: Blind/untraceable signatures have attracted considerable attention in the literature (see, for example, <ref> [7, 20, 1, 22] </ref> and references therein), and are used in several proposed electronic digital cash systems. <p> An early example of an electronic cash scheme of this sort is a paper by Chaum, Naor, and Fiat <ref> [7] </ref>. (Their system has in fact been deployed with some additional apparatus in a real-world implementation.) Here a coin assumes the form (d; f 1=3 (d)), where f is a suitable hash function, such as MD5.
Reference: 8. <author> C. Dwork and M. Naor. </author> <title> "An Efficient Existentially Unforgeable Signature Scheme and its Applications". </title> <type> Crypto 94. </type>
Reference-contexts: Subsequently, signatures secure against existential adaptive chosen-message attacks were shown assuming the existence of trapdoor permutations [2], one-way permutations [19], and general one-way functions [24]. More efficient schemes secure against such an attack were shown in <ref> [8] </ref>, and schemes with additional properties were considered in [11, 3, 16]. Blind Signatures: Chaum [6] proposed the notion of "blind digital signatures" as a key tool for constructing various anonymous electronic cash instruments. <p> Researchers use two 4 We remark that [23] is not secure against existential adaptive chosen-message attacks since there are signatures that can be forged under this attack. different approaches for proving the security of signature schemes: complexity--based proofs of security <ref> [9, 15, 2, 19, 24, 3, 16, 8] </ref> and random-oracle model proofs of security [10, 4, 21, 22]. Let us elaborate on these two notions of security: Two Notions of Security for Digital Signatures: - Complexity-based proofs: The complexity-based approach was put forth by Diffie and Hellman [9]. <p> The key idea of their proof is to replace the Signer with an Inverter which is able to set a "trap" in this tree as follows: in order to forge a signature, the Forger must diverge from the path of previous signatures in the tree (see, for example, <ref> [19, 11, 8] </ref>), and if the Inverter can guess where in the path this divergence takes place (which she can do with 1=poly probability) then it can place an output of a one-way permutation at this point and force the forger to invert.
Reference: 9. <author> W. Diffie and M. Hellman. </author> <title> "New Directions in Cryptography". </title> <journal> IEEE Trans. on Inf. Theory, </journal> <volume> IT-22, </volume> <pages> pp. 644-654, </pages> <year> 1976. </year>
Reference-contexts: Digital signatures were originally defined by Diffie and Hellman <ref> [9] </ref>, and the first implementation was based on the RSA trapdoor function [23]. Goldwasser, Micali, and Rivest [15] defined the strongest known "existential adaptive chosen-message attack" against digital signature schemes. <p> Researchers use two 4 We remark that [23] is not secure against existential adaptive chosen-message attacks since there are signatures that can be forged under this attack. different approaches for proving the security of signature schemes: complexity--based proofs of security <ref> [9, 15, 2, 19, 24, 3, 16, 8] </ref> and random-oracle model proofs of security [10, 4, 21, 22]. Let us elaborate on these two notions of security: Two Notions of Security for Digital Signatures: - Complexity-based proofs: The complexity-based approach was put forth by Diffie and Hellman [9]. <p> Let us elaborate on these two notions of security: Two Notions of Security for Digital Signatures: - Complexity-based proofs: The complexity-based approach was put forth by Diffie and Hellman <ref> [9] </ref>. They suggested that the security of a cryptographic primitive could be reduced to a hardness assumptions of certain fundamental problems, such as the existence of one-way functions.
Reference: 10. <author> A. Fiat and A. Shamir. </author> <title> "How to Prove Yourself: Practical Solutions of Identification and Signature Problems, </title> <type> CRYPTO 86. </type>
Reference-contexts: We remark that [23] is not secure against existential adaptive chosen-message attacks since there are signatures that can be forged under this attack. different approaches for proving the security of signature schemes: complexity--based proofs of security [9, 15, 2, 19, 24, 3, 16, 8] and random-oracle model proofs of security <ref> [10, 4, 21, 22] </ref>. Let us elaborate on these two notions of security: Two Notions of Security for Digital Signatures: - Complexity-based proofs: The complexity-based approach was put forth by Diffie and Hellman [9]. <p> Proofs based on random oracle model: In the case when complexity-based proofs seem to be difficult to attain, the approach used, for example in <ref> [10, 4, 21, 22] </ref>, is to assume that a cryptographic primitive (such as DES or MD5) behaves like a truly random function. The security of the scheme is then shown under the assumption that the underlying primitive behaves in a near ideal fashion.
Reference: 11. <author> O. </author> <title> Goldreich."Two Remarks Concerning the GMR Signature Scheme" MIT Tech. </title> <type> Report 715, </type> <year> 1986. </year> <note> CRYPTO 86. </note>
Reference-contexts: Subsequently, signatures secure against existential adaptive chosen-message attacks were shown assuming the existence of trapdoor permutations [2], one-way permutations [19], and general one-way functions [24]. More efficient schemes secure against such an attack were shown in [8], and schemes with additional properties were considered in <ref> [11, 3, 16] </ref>. Blind Signatures: Chaum [6] proposed the notion of "blind digital signatures" as a key tool for constructing various anonymous electronic cash instruments. These are instruments for which the bank cannot trace where (and hence for what purpose) a user spends her electronic currency. <p> This "solution" suffers from several problems, which we now elaborate upon. Problem 1: The scheme of Naor-Yung is not "memoryless", and future signatures reveal previous signatures, which violates the blindness property. Solution to Problem 1: Goldreich <ref> [11] </ref> showed how to make any signature scheme (including the signature scheme of Naor and Yung) "memoryless" [11], using pseudo-random functions of [12]. <p> Problem 1: The scheme of Naor-Yung is not "memoryless", and future signatures reveal previous signatures, which violates the blindness property. Solution to Problem 1: Goldreich <ref> [11] </ref> showed how to make any signature scheme (including the signature scheme of Naor and Yung) "memoryless" [11], using pseudo-random functions of [12]. In our setting, the key-generation algorithm can add to the secret key a seed s for pseudo-random function and add to a public key a commitment [18] of this seed. <p> In our setting, the key-generation algorithm can add to the secret key a seed s for pseudo-random function and add to a public key a commitment [18] of this seed. Then, during secure two-party computation, the Signer must generate all of her random choices (and a random tree of <ref> [19, 11] </ref>) using an agreed-upon pseudo-random function with the committed seed. Problem 2: Let us take a closer look at the proof of security of Naor-Yung scheme [19]. <p> The key idea of their proof is to replace the Signer with an Inverter which is able to set a "trap" in this tree as follows: in order to forge a signature, the Forger must diverge from the path of previous signatures in the tree (see, for example, <ref> [19, 11, 8] </ref>), and if the Inverter can guess where in the path this divergence takes place (which she can do with 1=poly probability) then it can place an output of a one-way permutation at this point and force the forger to invert. <p> Problem 3: In the scheme of <ref> [11] </ref> for rendering the signature scheme memory-less, it was not necessary for the Signer to prove that she is only using coin-flips that come from a pseudo-random function. <p> The Inverter must therefore be able to specify a point in the exposed sub-tree of signatures (see <ref> [19, 11] </ref>) at which to insert her trap. <p> Y the Signer/ Inverter can insert arbitrary values at an arbitrary point (i.e. it does not commit where to insert the trap) and thus can consistently do so during parallel interleaving sessions in the same fashion as before, i.e. consistently at some point in an exposed sub-tree of signatures (see <ref> [19, 11] </ref>) We now give details how this can be done. Recall that we use a secure computation protocol in such a way that the User/Forger receives no information about the signature prior to the last round from the signer. We refer to this as the atomic signature property. <p> The memoryless property <ref> [11] </ref> is incorporated into our our scheme as follows. <p> The ability of algorithm Q to invert f now follows from the security of the memoryless version of Naor and Yung's memoryless analog <ref> [11, 19] </ref>. When signatures are issued over the course of multiple, interleaved executions of the blind signature protocol, the same "trap" may be planted consistently over many executions using the method described in Section 3 (in response to Problem 4).
Reference: 12. <author> O. Goldreich, S. Goldwasser, and S. Micali. </author> <title> "How to Construct Random Functions". </title> <editor> JASM V. </editor> <volume> 33 No 4. </volume> <month> (October </month> <year> 1986) </year> <month> pp. </month> <pages> 792-807. </pages>
Reference-contexts: Problem 1: The scheme of Naor-Yung is not "memoryless", and future signatures reveal previous signatures, which violates the blindness property. Solution to Problem 1: Goldreich [11] showed how to make any signature scheme (including the signature scheme of Naor and Yung) "memoryless" [11], using pseudo-random functions of <ref> [12] </ref>. In our setting, the key-generation algorithm can add to the secret key a seed s for pseudo-random function and add to a public key a commitment [18] of this seed. <p> The memoryless property [11] is incorporated into our our scheme as follows. The secure two-party computation protocol produces a choice of leaf in which to insert the message m; this is computed to be the output of the pseudo-random generation function g of <ref> [12] </ref> with secret seed s and index m (truncated appropriately to yield a uniform selection of leaves).
Reference: 13. <author> S. Goldwasser, S. Micali and C. Rackoff, </author> <title> "The Knowledge Complexity of Interactive Proof-Systems". </title> <journal> SIAM J. Comput. </journal> <volume> 18 (1989), </volume> <pages> pp. </pages> <note> 186-208; (also in STOC 85, pp. 291-304.) </note>
Reference-contexts: In the definition below, digital signatures are treated as an interactive protocols between two players: a Signer (who "blindly" signs a document m) and the User (who obtains the signature of her document m). We rely on the formalism of Interactive Turing machines, defined by Goldwasser, Micali and Rackoff <ref> [13] </ref>. The security of a blind digital signature consists of two requirements: the blindness property and the non-forgeability of additional signatures.
Reference: 14. <author> O. Goldreich, S. Micali, and A. Wigderson. </author> <title> "How to Play Any Mental Game". </title> <booktitle> Proc. of 19th STOC, </booktitle> <pages> pp. 218-229, </pages> <year> 1987. </year>
Reference-contexts: Basic Ingredients: The two basic ingredients we start with are the secure signature scheme of Naor-Yung [19], and the two-party completeness theorem of Yao and Goldreich, Micali and Widgerson <ref> [26, 14] </ref>. Let us briefly recall both ingredients. <p> attack and can be built based on any one-way permutation f [19] (we remark that we do not need the result of [24] which is based on weaker assumptions since other tools in our protocol require one-way permutations anyway.) The two-party completeness theorem of Yao and Goldreich, Micali and Wigderson <ref> [26, 14] </ref> basically says that for any two parties A, and B, where A is given a secret input x and B is given a secret input y, and for any polynomial-time computable function g (; ) there exists a protocol for computing g (x; y) such that nothing except the <p> can be learned by one of the players only as the last message of the protocol, with the condition that if the protocol is aborted before this last message, then again no information is revealed (i.e. all interactions are com-putationally indistinguishable.) In fact, we use a stronger definition, used by <ref> [26, 14] </ref>: that there exists a polynomial-time simulator which can simulate the views of the players, even in the case of Byzantine (i.e. malicious) faults. (For details see the above references.) Furthermore, the two-party protocol can be augmented to leave part of the input of one of the players unspecified, and <p> We should point out that since both commitments (and their decommit-ments) are now part of the input (public and private) of the secure two-party completeness protocol, they are included in the execution of the two-party completeness protocol and hence force correct behavior of both players (see <ref> [26, 14] </ref>). Problem 3: In the scheme of [11] for rendering the signature scheme memory-less, it was not necessary for the Signer to prove that she is only using coin-flips that come from a pseudo-random function. <p> two-party computation protocol, these two commitments are passed in the clear to the Signer. (Recall that in the Inverter/Forger scenario, these commitments enable the Inverter, by rewinding the Forger, to learn X and m, thereby effectively circumventing the blindness of the scheme.) The Signer provides to the secure computation (of <ref> [26, 14] </ref>) her private information as well as information respecting the trap she may wish to plant (when she plays the role of the Inverter). In particular, the Signer provides to the computation her secret signing key sk and her secret pseudorandom seed s. <p> is followed.) On successful completion of the protocol (i.e., if cheating during secure computation was not detected) the decodinbg of signature (m) (with or without trap) is sent to the User. 5 Security of our scheme The blindness of the scheme follows from the properties of two-party secure computation of <ref> [26, 14] </ref>. The security of the computation is violated only when the guess Y of the Signer is correct, and consequently X = Y . This happens with negligible probability.
Reference: 15. <author> S. Goldwasser, S. Micali, and R. Rivest. </author> <title> "A Digital Signature Scheme Secure Against Adaptive Chosen-Message Attacks". </title> <journal> SIAM Journal of Computing Vol. </journal> <volume> 17, No 2, </volume> <month> (April </month> <year> 1988), </year> <pages> pp. 281-308. </pages>
Reference-contexts: The strongest definition of security for a digital signature scheme was put forth by Goldwasser, Micali, and Rivest <ref> [15] </ref>. Several schemes, based on both specific and general complexity assumptions, were subsequently shown to satisfy this strongest definition. A variation on basic digital signatures, known as blind digital signatures, was proposed by Chaum. <p> Digital signatures were originally defined by Diffie and Hellman [9], and the first implementation was based on the RSA trapdoor function [23]. Goldwasser, Micali, and Rivest <ref> [15] </ref> defined the strongest known "existential adaptive chosen-message attack" against digital signature schemes. They also demonstrated the first scheme which is secure against such an attack 4 assuming the existence of claw-free permutations, which in turn may be based on the hardness of factoring. <p> Researchers use two 4 We remark that [23] is not secure against existential adaptive chosen-message attacks since there are signatures that can be forged under this attack. different approaches for proving the security of signature schemes: complexity--based proofs of security <ref> [9, 15, 2, 19, 24, 3, 16, 8] </ref> and random-oracle model proofs of security [10, 4, 21, 22]. Let us elaborate on these two notions of security: Two Notions of Security for Digital Signatures: - Complexity-based proofs: The complexity-based approach was put forth by Diffie and Hellman [9]. <p> We conclude in section 6 with a brief discussion of the significance of our result to the area of anonymous electronic cash. 2 Definitions In the proof and the construction of blind digital signatures, we will use the security of standard digital signatures, as defined by Goldwasser, Micali, and Rivest <ref> [15] </ref>. Hence, before we give the definition of blind digital signatures, we remind the reader of the standard signature definitions. <p> As mentioned above, security against the existential adaptive chosen-message attack of Goldwasser, Micali, and Rivest is the strongest known security measure for signatures <ref> [15] </ref>. Security of Signature Schemes: In this attack, an adversary A, which is a probabilistic polynomial-time machine, is given a public key pk generated by the key-generation algorithm. The adversary A can request in an adaptive fashion a polynomial number of signatures of his choice.
Reference: 16. <author> Goldwasser S., and R. </author> <title> Ostrovsky "Invariant Signatures and Non-Interactive Zero-Knowledge Proofs are Equivalent" CRYPTO 92. </title>
Reference-contexts: Subsequently, signatures secure against existential adaptive chosen-message attacks were shown assuming the existence of trapdoor permutations [2], one-way permutations [19], and general one-way functions [24]. More efficient schemes secure against such an attack were shown in [8], and schemes with additional properties were considered in <ref> [11, 3, 16] </ref>. Blind Signatures: Chaum [6] proposed the notion of "blind digital signatures" as a key tool for constructing various anonymous electronic cash instruments. These are instruments for which the bank cannot trace where (and hence for what purpose) a user spends her electronic currency. <p> Researchers use two 4 We remark that [23] is not secure against existential adaptive chosen-message attacks since there are signatures that can be forged under this attack. different approaches for proving the security of signature schemes: complexity--based proofs of security <ref> [9, 15, 2, 19, 24, 3, 16, 8] </ref> and random-oracle model proofs of security [10, 4, 21, 22]. Let us elaborate on these two notions of security: Two Notions of Security for Digital Signatures: - Complexity-based proofs: The complexity-based approach was put forth by Diffie and Hellman [9].
Reference: 17. <author> L.C. Guillou and J.J. Quisquater. </author> <title> "A Practical Zero-Knowledge Protocol Fitter to Security Microprocessor Minimizing Both Transmission and Memory". </title> <address> EURO-CRYPT 88. </address>
Reference-contexts: This paper presents the first blind signature scheme with complexity-based proof of security. Pointcheval and Stern [22] address the security of several blind digital signatures schemes, including blind variants of the Okamoto [20], Schnorr [25], and Guillou-Quisquater <ref> [17] </ref> signature schemes. In particular, [22] proves the security of Okamoto-Schnorr and Okamoto-Guillou-Quisquater blind signatures in the random oracle model. Thus, Pointcheval and Stern consider blind signatures which rely on number-theoretic assumptions and show proofs of security only in the random-oracle model.
Reference: 18. <author> M. Naor. </author> <title> "Bit Commitment Using Pseudo-Randomness". </title> <publisher> Crypto-89. </publisher>
Reference-contexts: In our setting, the key-generation algorithm can add to the secret key a seed s for pseudo-random function and add to a public key a commitment <ref> [18] </ref> of this seed. Then, during secure two-party computation, the Signer must generate all of her random choices (and a random tree of [19, 11]) using an agreed-upon pseudo-random function with the committed seed.
Reference: 19. <author> M. Naor and M. Yung. </author> <title> "Universal One-Way Hash Functions and their Cryptographic Applications". </title> <note> STOC 89. </note>
Reference-contexts: Subsequently, signatures secure against existential adaptive chosen-message attacks were shown assuming the existence of trapdoor permutations [2], one-way permutations <ref> [19] </ref>, and general one-way functions [24]. More efficient schemes secure against such an attack were shown in [8], and schemes with additional properties were considered in [11, 3, 16]. <p> Researchers use two 4 We remark that [23] is not secure against existential adaptive chosen-message attacks since there are signatures that can be forged under this attack. different approaches for proving the security of signature schemes: complexity--based proofs of security <ref> [9, 15, 2, 19, 24, 3, 16, 8] </ref> and random-oracle model proofs of security [10, 4, 21, 22]. Let us elaborate on these two notions of security: Two Notions of Security for Digital Signatures: - Complexity-based proofs: The complexity-based approach was put forth by Diffie and Hellman [9]. <p> Our aim is twofold: (1) to explain why the complications in our the scheme are necessary and (2) to elaborate on the subtleties of the problem, even when using general completeness results. Basic Ingredients: The two basic ingredients we start with are the secure signature scheme of Naor-Yung <ref> [19] </ref>, and the two-party completeness theorem of Yao and Goldreich, Micali and Widgerson [26, 14]. Let us briefly recall both ingredients. The signature scheme of Naor-Yung is secure against existential adaptive chosen-message attack and can be built based on any one-way permutation f [19] (we remark that we do not need <p> are the secure signature scheme of Naor-Yung <ref> [19] </ref>, and the two-party completeness theorem of Yao and Goldreich, Micali and Widgerson [26, 14]. Let us briefly recall both ingredients. The signature scheme of Naor-Yung is secure against existential adaptive chosen-message attack and can be built based on any one-way permutation f [19] (we remark that we do not need the result of [24] which is based on weaker assumptions since other tools in our protocol require one-way permutations anyway.) The two-party completeness theorem of Yao and Goldreich, Micali and Wigderson [26, 14] basically says that for any two parties A, and B, <p> In our setting, the key-generation algorithm can add to the secret key a seed s for pseudo-random function and add to a public key a commitment [18] of this seed. Then, during secure two-party computation, the Signer must generate all of her random choices (and a random tree of <ref> [19, 11] </ref>) using an agreed-upon pseudo-random function with the committed seed. Problem 2: Let us take a closer look at the proof of security of Naor-Yung scheme [19]. <p> Then, during secure two-party computation, the Signer must generate all of her random choices (and a random tree of [19, 11]) using an agreed-upon pseudo-random function with the committed seed. Problem 2: Let us take a closer look at the proof of security of Naor-Yung scheme <ref> [19] </ref>. Their scheme takes as its basis a tree; messages are inserted in the leaves of this tree, and a signature involves the construction of a path from the root of the tree to the appropriate leaf. <p> The key idea of their proof is to replace the Signer with an Inverter which is able to set a "trap" in this tree as follows: in order to forge a signature, the Forger must diverge from the path of previous signatures in the tree (see, for example, <ref> [19, 11, 8] </ref>), and if the Inverter can guess where in the path this divergence takes place (which she can do with 1=poly probability) then it can place an output of a one-way permutation at this point and force the forger to invert. <p> The Inverter must therefore be able to specify a point in the exposed sub-tree of signatures (see <ref> [19, 11] </ref>) at which to insert her trap. <p> Y the Signer/ Inverter can insert arbitrary values at an arbitrary point (i.e. it does not commit where to insert the trap) and thus can consistently do so during parallel interleaving sessions in the same fashion as before, i.e. consistently at some point in an exposed sub-tree of signatures (see <ref> [19, 11] </ref>) We now give details how this can be done. Recall that we use a secure computation protocol in such a way that the User/Forger receives no information about the signature prior to the last round from the signer. We refer to this as the atomic signature property. <p> The Signer publishes c (s), that is, a commitment of her secret pseudo-random key s, along with her public key pk, and the one-way permutation f used in the Naor and Yung <ref> [19] </ref> scheme. (Also made public are the pseudo-random generation function g, as well as a set of public hash functions required by the scheme of Naor and Yung.) Each time a signature is to be issued, the Signer and User engage in a secure two-party computation. <p> The ability of algorithm Q to invert f now follows from the security of the memoryless version of Naor and Yung's memoryless analog <ref> [11, 19] </ref>. When signatures are issued over the course of multiple, interleaved executions of the blind signature protocol, the same "trap" may be planted consistently over many executions using the method described in Section 3 (in response to Problem 4).
Reference: 20. <author> T. Okamoto. </author> <title> "Provably Secure and Practical Identification Schemes and Corresponding Signature Schemes" CRYPTO 92. </title>
Reference-contexts: Blind/untraceable signatures have attracted considerable attention in the literature (see, for example, <ref> [7, 20, 1, 22] </ref> and references therein), and are used in several proposed electronic digital cash systems. <p> This paper presents the first blind signature scheme with complexity-based proof of security. Pointcheval and Stern [22] address the security of several blind digital signatures schemes, including blind variants of the Okamoto <ref> [20] </ref>, Schnorr [25], and Guillou-Quisquater [17] signature schemes. In particular, [22] proves the security of Okamoto-Schnorr and Okamoto-Guillou-Quisquater blind signatures in the random oracle model. Thus, Pointcheval and Stern consider blind signatures which rely on number-theoretic assumptions and show proofs of security only in the random-oracle model.
Reference: 21. <author> D. Pointcheval and J. Stern. </author> <title> "Security Proofs for Signature Schemes". </title> <booktitle> Eurocrypt 96. </booktitle>
Reference-contexts: We remark that [23] is not secure against existential adaptive chosen-message attacks since there are signatures that can be forged under this attack. different approaches for proving the security of signature schemes: complexity--based proofs of security [9, 15, 2, 19, 24, 3, 16, 8] and random-oracle model proofs of security <ref> [10, 4, 21, 22] </ref>. Let us elaborate on these two notions of security: Two Notions of Security for Digital Signatures: - Complexity-based proofs: The complexity-based approach was put forth by Diffie and Hellman [9]. <p> Proofs based on random oracle model: In the case when complexity-based proofs seem to be difficult to attain, the approach used, for example in <ref> [10, 4, 21, 22] </ref>, is to assume that a cryptographic primitive (such as DES or MD5) behaves like a truly random function. The security of the scheme is then shown under the assumption that the underlying primitive behaves in a near ideal fashion.
Reference: 22. <author> D. Pointcheval and J. Stern. </author> <title> "Provably Secure Blind Signature Schemes". </title> <address> Asi-acrypt 96. </address>
Reference-contexts: Blind/untraceable signatures have attracted considerable attention in the literature (see, for example, <ref> [7, 20, 1, 22] </ref> and references therein), and are used in several proposed electronic digital cash systems. <p> We remark that [23] is not secure against existential adaptive chosen-message attacks since there are signatures that can be forged under this attack. different approaches for proving the security of signature schemes: complexity--based proofs of security [9, 15, 2, 19, 24, 3, 16, 8] and random-oracle model proofs of security <ref> [10, 4, 21, 22] </ref>. Let us elaborate on these two notions of security: Two Notions of Security for Digital Signatures: - Complexity-based proofs: The complexity-based approach was put forth by Diffie and Hellman [9]. <p> Proofs based on random oracle model: In the case when complexity-based proofs seem to be difficult to attain, the approach used, for example in <ref> [10, 4, 21, 22] </ref>, is to assume that a cryptographic primitive (such as DES or MD5) behaves like a truly random function. The security of the scheme is then shown under the assumption that the underlying primitive behaves in a near ideal fashion. <p> Until now, however, the only proofs of security for blind digital signature schemes have been in the random oracle model. This paper presents the first blind signature scheme with complexity-based proof of security. Pointcheval and Stern <ref> [22] </ref> address the security of several blind digital signatures schemes, including blind variants of the Okamoto [20], Schnorr [25], and Guillou-Quisquater [17] signature schemes. In particular, [22] proves the security of Okamoto-Schnorr and Okamoto-Guillou-Quisquater blind signatures in the random oracle model. <p> This paper presents the first blind signature scheme with complexity-based proof of security. Pointcheval and Stern <ref> [22] </ref> address the security of several blind digital signatures schemes, including blind variants of the Okamoto [20], Schnorr [25], and Guillou-Quisquater [17] signature schemes. In particular, [22] proves the security of Okamoto-Schnorr and Okamoto-Guillou-Quisquater blind signatures in the random oracle model. Thus, Pointcheval and Stern consider blind signatures which rely on number-theoretic assumptions and show proofs of security only in the random-oracle model. <p> Informally, a blind digital signature scheme is secure if it satisfies both a blindness and a non-forgeability property. The blindness property was formulated in the original paper of Chaum [6], and non-forgeability was considered in the paper of Pointeval and Stern <ref> [22] </ref> (where it is called called "one more" forgery). <p> Our scheme and proof of security are fully polynomial in all suitable parameters, including the number of blind signatures requested before the break. (We thus resolve in the affirmative the open question posed by Pointcheval and Stern <ref> [22] </ref>.) Disadvantages: Our scheme, while polynomial in all suitable parameters, is inefficient. Thus, it should be viewed merely as a proof of existence which should pave the way for efficient future implementations. Organization of the Paper: The remainder of this paper is organized as follows. <p> We say the blind digital signature scheme is secure if it satisfies both properties, as defined below. (We remark that our non-forgeability definition follows the definition of "one-more" forgery by Pointcheval and Stern <ref> [22] </ref>) Blind Digital Signatures: A blind digital signature scheme is a four-tuple, consisting of two Interactive Turing machines (Signer,User) and two algorithms (Gen,Verify). <p> This and similar weaknesses appear to vex many implementations of anonymous digital cash. Although a proof of security of several blind digital signature schemes based on the random oracle model was given by Pointcheval and Stern <ref> [22] </ref>, the current paper gives the first complexity-based proof for this important primitive. We have therefore shown that secure anonymous digital cash is possible to achieve in a complexity-based sense, i.e. we have shown that it may be as secure as, say, factoring.
Reference: 23. <author> R.L. Rivest, A. Shamir, and L. Adleman. </author> <title> "A Method for Obtaining Digital Signatures and Public Key Cryptosystems". </title> <journal> Comm. ACM, </journal> <volume> Vol 21, No 2, </volume> <year> 1978. </year>
Reference-contexts: Digital signatures were originally defined by Diffie and Hellman [9], and the first implementation was based on the RSA trapdoor function <ref> [23] </ref>. Goldwasser, Micali, and Rivest [15] defined the strongest known "existential adaptive chosen-message attack" against digital signature schemes. They also demonstrated the first scheme which is secure against such an attack 4 assuming the existence of claw-free permutations, which in turn may be based on the hardness of factoring. <p> Blind/untraceable signatures have attracted considerable attention in the literature (see, for example, [7, 20, 1, 22] and references therein), and are used in several proposed electronic digital cash systems. Researchers use two 4 We remark that <ref> [23] </ref> is not secure against existential adaptive chosen-message attacks since there are signatures that can be forged under this attack. different approaches for proving the security of signature schemes: complexity--based proofs of security [9, 15, 2, 19, 24, 3, 16, 8] and random-oracle model proofs of security [10, 4, 21, 22].
Reference: 24. <author> J. Rompel. </author> <title> "One-way Functions are Necessary and Sufficient for Secure Signatures". </title> <note> STOC 90. </note>
Reference-contexts: Subsequently, signatures secure against existential adaptive chosen-message attacks were shown assuming the existence of trapdoor permutations [2], one-way permutations [19], and general one-way functions <ref> [24] </ref>. More efficient schemes secure against such an attack were shown in [8], and schemes with additional properties were considered in [11, 3, 16]. Blind Signatures: Chaum [6] proposed the notion of "blind digital signatures" as a key tool for constructing various anonymous electronic cash instruments. <p> Researchers use two 4 We remark that [23] is not secure against existential adaptive chosen-message attacks since there are signatures that can be forged under this attack. different approaches for proving the security of signature schemes: complexity--based proofs of security <ref> [9, 15, 2, 19, 24, 3, 16, 8] </ref> and random-oracle model proofs of security [10, 4, 21, 22]. Let us elaborate on these two notions of security: Two Notions of Security for Digital Signatures: - Complexity-based proofs: The complexity-based approach was put forth by Diffie and Hellman [9]. <p> Let us briefly recall both ingredients. The signature scheme of Naor-Yung is secure against existential adaptive chosen-message attack and can be built based on any one-way permutation f [19] (we remark that we do not need the result of <ref> [24] </ref> which is based on weaker assumptions since other tools in our protocol require one-way permutations anyway.) The two-party completeness theorem of Yao and Goldreich, Micali and Wigderson [26, 14] basically says that for any two parties A, and B, where A is given a secret input x and B is
Reference: 25. <author> C.P. Schnorr. </author> <title> "Efficient Identification and Signatures for Smart Cards". </title> <type> CRYPTO 89. </type>
Reference-contexts: This paper presents the first blind signature scheme with complexity-based proof of security. Pointcheval and Stern [22] address the security of several blind digital signatures schemes, including blind variants of the Okamoto [20], Schnorr <ref> [25] </ref>, and Guillou-Quisquater [17] signature schemes. In particular, [22] proves the security of Okamoto-Schnorr and Okamoto-Guillou-Quisquater blind signatures in the random oracle model. Thus, Pointcheval and Stern consider blind signatures which rely on number-theoretic assumptions and show proofs of security only in the random-oracle model.
Reference: 26. <author> A. C. Yao. </author> <title> "How to Generate and Exchange Secrets". </title> <booktitle> Proc. of 27th FOCS, </booktitle> <year> 1986, </year> <pages> pp. </pages> <month> 162-167. </month> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: Basic Ingredients: The two basic ingredients we start with are the secure signature scheme of Naor-Yung [19], and the two-party completeness theorem of Yao and Goldreich, Micali and Widgerson <ref> [26, 14] </ref>. Let us briefly recall both ingredients. <p> attack and can be built based on any one-way permutation f [19] (we remark that we do not need the result of [24] which is based on weaker assumptions since other tools in our protocol require one-way permutations anyway.) The two-party completeness theorem of Yao and Goldreich, Micali and Wigderson <ref> [26, 14] </ref> basically says that for any two parties A, and B, where A is given a secret input x and B is given a secret input y, and for any polynomial-time computable function g (; ) there exists a protocol for computing g (x; y) such that nothing except the <p> can be learned by one of the players only as the last message of the protocol, with the condition that if the protocol is aborted before this last message, then again no information is revealed (i.e. all interactions are com-putationally indistinguishable.) In fact, we use a stronger definition, used by <ref> [26, 14] </ref>: that there exists a polynomial-time simulator which can simulate the views of the players, even in the case of Byzantine (i.e. malicious) faults. (For details see the above references.) Furthermore, the two-party protocol can be augmented to leave part of the input of one of the players unspecified, and <p> We should point out that since both commitments (and their decommit-ments) are now part of the input (public and private) of the secure two-party completeness protocol, they are included in the execution of the two-party completeness protocol and hence force correct behavior of both players (see <ref> [26, 14] </ref>). Problem 3: In the scheme of [11] for rendering the signature scheme memory-less, it was not necessary for the Signer to prove that she is only using coin-flips that come from a pseudo-random function. <p> two-party computation protocol, these two commitments are passed in the clear to the Signer. (Recall that in the Inverter/Forger scenario, these commitments enable the Inverter, by rewinding the Forger, to learn X and m, thereby effectively circumventing the blindness of the scheme.) The Signer provides to the secure computation (of <ref> [26, 14] </ref>) her private information as well as information respecting the trap she may wish to plant (when she plays the role of the Inverter). In particular, the Signer provides to the computation her secret signing key sk and her secret pseudorandom seed s. <p> is followed.) On successful completion of the protocol (i.e., if cheating during secure computation was not detected) the decodinbg of signature (m) (with or without trap) is sent to the User. 5 Security of our scheme The blindness of the scheme follows from the properties of two-party secure computation of <ref> [26, 14] </ref>. The security of the computation is violated only when the guess Y of the Signer is correct, and consequently X = Y . This happens with negligible probability.
References-found: 26

