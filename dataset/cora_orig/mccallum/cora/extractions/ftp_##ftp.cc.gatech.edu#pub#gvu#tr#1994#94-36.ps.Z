URL: ftp://ftp.cc.gatech.edu/pub/gvu/tr/1994/94-36.ps.Z
Refering-URL: http://www.cs.gatech.edu/gvu/reports/1994/
Root-URL: 
Title: Integrating status and event phenomena in formal specifications of interactive systems  
Author: Gregory D. Abowd Alan J. Dix 
Keyword: formal specification, interactive system design, multi-user systems, mixed control interaction  
Address: Atlanta, GA 30332-0280 USA  Queensgate, Huddersfield HD1 3DH United Kingdom  
Affiliation: College of Computing Georgia Institute of Technology  School of Computing and Mathematics The University of Huddersfield  
Abstract: In this paper we investigate the appropriateness of formal specification languages for the description of user interface phenomena. Specifically, we are concerned with the distinction between continuously available information, which we call status, and atomic, non-persistent information, which we call events. We propose a hybrid model and notation to address status and event phenomena symmetrically. We demonstrate the effectiveness of this model for designing and understanding mixed control interaction, an especially important topic in the design of multi-user systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Abowd, G. D. </author> <title> Agents: Communicating interactive processes. In Human-Computer Interaction| INTERACT'90 (1990), </title> <editor> D. Diaper, D. Gilmore, G. Cockton, and B. Shackel, Eds., </editor> <publisher> Elsevier Science Publishers, </publisher> <pages> pp. 143-148. </pages>
Reference-contexts: We will consider the components of the slider specification by first indicating the static description, or signature, followed by rules defining the behavior associated with events and finally the interstitial behavior between events. 3 We use the name agent to reflect the extension to Abowd's agent model and notation <ref> [1, 2] </ref>. 3.3 Slider signature First, we look at the internal state, inputs and outputs of the slider. All of these inputs come from the mouse agent. The state variable position indicates the location of the slider handle when it is not being dragged. <p> Developing specification languages that are a mix of existing languages is not novel. For example, several researchers have recognized the advantage of mixing event-based process algebras with model-oriented notations <ref> [1, 5, 18, 20, 24] </ref>. Our work is similar in spirit, except that we have concentrated on the phenomena of status rather than internal state, as status is a concept of great importance in describing interactive systems naturally from the perspective of the user.
Reference: [2] <author> Abowd, G. D. </author> <title> Formal aspects of human-computer interaction. </title> <type> Technical Monograph PRG-97, </type> <institution> Oxford University, Programming Research Group, </institution> <year> 1991. </year> <title> D.Phil. </title> <type> thesis. </type>
Reference-contexts: 5, we will relate our work on specification languages to implementation mechanisms in interactive system builders and programming languages. 2 A classification of specification approaches for in teractive systems A number of researchers have used formal specification notations to describe and analyze interactive systems (for reviews of this work, see <ref> [2, 3, 15] </ref>). In this section, we provide a slightly different classification of those approaches in terms of how they handle the description of both status and event information. <p> State refers to the internal information of an entity, whereas status refers to information externally available. An entity might provide status as output that reflects some of its internal state Notation Input Output Event Status Event Status grammars [22, 23] p p process algebras <ref> [2, 5, 24] </ref> actors [4] p p CNUCE interactors [21] York interactors [12] statecharts [14] p p PIE model [11, 10] p p modified PIE [10] p p p p p object-oriented Z p p p * NEW MODEL * p p p p Table 1: A classification of user interface <p> We will consider the components of the slider specification by first indicating the static description, or signature, followed by rules defining the behavior associated with events and finally the interstitial behavior between events. 3 We use the name agent to reflect the extension to Abowd's agent model and notation <ref> [1, 2] </ref>. 3.3 Slider signature First, we look at the internal state, inputs and outputs of the slider. All of these inputs come from the mouse agent. The state variable position indicates the location of the slider handle when it is not being dragged.
Reference: [3] <author> Abowd, G. D., Bowen, J., Dix, A., Harrison, M., and Took, R. </author> <title> User interface languages: A survey of existing methods. </title> <type> Technical Report PRG-TR-5-89, </type> <institution> Oxford University Computing Laboratory Programming Research Group, </institution> <month> October </month> <year> 1989. </year> <note> Also published as internal report 2487-TN-PRG-1008 Issue 1.0 for ESPRIT project 2487 (REDO). </note>
Reference-contexts: 5, we will relate our work on specification languages to implementation mechanisms in interactive system builders and programming languages. 2 A classification of specification approaches for in teractive systems A number of researchers have used formal specification notations to describe and analyze interactive systems (for reviews of this work, see <ref> [2, 3, 15] </ref>). In this section, we provide a slightly different classification of those approaches in terms of how they handle the description of both status and event information.
Reference: [4] <author> Agha, G. A. </author> <title> Actors: a Model of Concurrent Computation in Distributed Systems. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference-contexts: State refers to the internal information of an entity, whereas status refers to information externally available. An entity might provide status as output that reflects some of its internal state Notation Input Output Event Status Event Status grammars [22, 23] p p process algebras [2, 5, 24] actors <ref> [4] </ref> p p CNUCE interactors [21] York interactors [12] statecharts [14] p p PIE model [11, 10] p p modified PIE [10] p p p p p object-oriented Z p p p * NEW MODEL * p p p p Table 1: A classification of user interface specification nota-tionss with respect
Reference: [5] <author> Alexander, H. </author> <title> Executable specifications as an aid to dialogue design. In Human-Computer Interaction | INTERACT'87 (1987), </title> <editor> H. J. Bullinger and B. Shackel, Eds., </editor> <publisher> North Holland, </publisher> <pages> pp. 739-744. </pages>
Reference-contexts: State refers to the internal information of an entity, whereas status refers to information externally available. An entity might provide status as output that reflects some of its internal state Notation Input Output Event Status Event Status grammars [22, 23] p p process algebras <ref> [2, 5, 24] </ref> actors [4] p p CNUCE interactors [21] York interactors [12] statecharts [14] p p PIE model [11, 10] p p modified PIE [10] p p p p p object-oriented Z p p p * NEW MODEL * p p p p Table 1: A classification of user interface <p> Developing specification languages that are a mix of existing languages is not novel. For example, several researchers have recognized the advantage of mixing event-based process algebras with model-oriented notations <ref> [1, 5, 18, 20, 24] </ref>. Our work is similar in spirit, except that we have concentrated on the phenomena of status rather than internal state, as status is a concept of great importance in describing interactive systems naturally from the perspective of the user.
Reference: [6] <author> Dewan, P. </author> <title> A tour of the Suite user interface software. </title> <booktitle> In UIST'90: Proceedings of the ACM Symposium on User Interface Software and Technology (1990), ACM, </booktitle> <pages> pp. 57-65. </pages>
Reference-contexts: In languages that do not have events, such as constraint systems, this mediation is hidden from the designer and can result in undesirable delays or unanticipated inconsistencies. A second implementation mechanism, used for example in the Suite system <ref> [6, 7] </ref>, is the active variable. Active variables automatically generate appropriate change events in order to sustain status-status mappings.
Reference: [7] <author> Dewan, P., and Choudhary, R. </author> <title> A high-level ,and flexible framework for implementing mulituser interfaces. </title> <booktitle> ACM Transaction on Information Systems 10, </booktitle> <month> 4 (October </month> <year> 1992), </year> <pages> 345-380. </pages>
Reference-contexts: In languages that do not have events, such as constraint systems, this mediation is hidden from the designer and can result in undesirable delays or unanticipated inconsistencies. A second implementation mechanism, used for example in the Suite system <ref> [6, 7] </ref>, is the active variable. Active variables automatically generate appropriate change events in order to sustain status-status mappings.
Reference: [8] <author> Dix, A., and Abowd, G. </author> <title> Integrating status and event in formal models for interactive systems. In Formal Methods in Human-Computer Interaction, </title> <editor> M. Harri-son and C. Johnson, Eds. </editor> <address> Cambridge University Press. </address> <note> Draft chapter in preparation. </note>
Reference-contexts: Elsewhere, we have fully explored the space of formal specification languages applied to interactive systems and user interfaces with respect to the status/event distinction <ref> [8] </ref>. We summarize the results of this classification in Table 1. Where possible, we have included references to work that specifically relate to the specification of interactive systems or user interfaces. There are a couple of important points to make in reference to Table 1.
Reference: [9] <author> Dix, A., Finlay, J., Abowd, G., and Beale, R. </author> <title> Human-Computer Interaction. </title> <publisher> Prentice Hall International, </publisher> <year> 1993. </year>
Reference-contexts: In this paper, we distinguish between status and event phenomena that occur at the user interface. The dichotomy between status and event phenomena has been pointed out by the authors previously <ref> [9, 10] </ref>. Events are atomic, non-persistent occurrences in the world, that is, we sense that they happen at a particular point in time. Status refers to things that persist and we observe in the world, that is, they have a measurable value at any moment.
Reference: [10] <author> Dix, A. J. </author> <title> Formal Methods for Interactive Systems. </title> <publisher> Academic Press, </publisher> <year> 1991. </year>
Reference-contexts: In this paper, we distinguish between status and event phenomena that occur at the user interface. The dichotomy between status and event phenomena has been pointed out by the authors previously <ref> [9, 10] </ref>. Events are atomic, non-persistent occurrences in the world, that is, we sense that they happen at a particular point in time. Status refers to things that persist and we observe in the world, that is, they have a measurable value at any moment. <p> An entity might provide status as output that reflects some of its internal state Notation Input Output Event Status Event Status grammars [22, 23] p p process algebras [2, 5, 24] actors [4] p p CNUCE interactors [21] York interactors [12] statecharts [14] p p PIE model <ref> [11, 10] </ref> p p modified PIE [10] p p p p p object-oriented Z p p p * NEW MODEL * p p p p Table 1: A classification of user interface specification nota-tionss with respect to status and event. to build larger entities from smaller entities, the approach must provide <p> provide status as output that reflects some of its internal state Notation Input Output Event Status Event Status grammars [22, 23] p p process algebras [2, 5, 24] actors [4] p p CNUCE interactors [21] York interactors [12] statecharts [14] p p PIE model [11, 10] p p modified PIE <ref> [10] </ref> p p p p p object-oriented Z p p p * NEW MODEL * p p p p Table 1: A classification of user interface specification nota-tionss with respect to status and event. to build larger entities from smaller entities, the approach must provide a way to compose input and
Reference: [11] <author> Dix, A. J., and Runciman, C. </author> <title> Abstract models of interactive systems. In People and Computers: Designing the interface (1985), </title> <editor> P. Johnson and S. Cook, Eds., </editor> <publisher> Cambridge University Press, </publisher> <pages> pp. 13-22. </pages>
Reference-contexts: An entity might provide status as output that reflects some of its internal state Notation Input Output Event Status Event Status grammars [22, 23] p p process algebras [2, 5, 24] actors [4] p p CNUCE interactors [21] York interactors [12] statecharts [14] p p PIE model <ref> [11, 10] </ref> p p modified PIE [10] p p p p p object-oriented Z p p p * NEW MODEL * p p p p Table 1: A classification of user interface specification nota-tionss with respect to status and event. to build larger entities from smaller entities, the approach must provide
Reference: [12] <author> Duke, D. J., and Harrison, M. D. </author> <title> Abstract inter-actin objects. </title> <journal> Computer Graphics Forum 12, </journal> <volume> 3 (1993), </volume> <pages> 25-36. </pages>
Reference-contexts: An entity might provide status as output that reflects some of its internal state Notation Input Output Event Status Event Status grammars [22, 23] p p process algebras [2, 5, 24] actors [4] p p CNUCE interactors [21] York interactors <ref> [12] </ref> statecharts [14] p p PIE model [11, 10] p p modified PIE [10] p p p p p object-oriented Z p p p * NEW MODEL * p p p p Table 1: A classification of user interface specification nota-tionss with respect to status and event. to build larger entities
Reference: [13] <author> Freeman-Benson, B.-N., and Borning, A. </author> <title> The design and implementation of Kaleidoscope'90 | a constraint imperative language. </title> <booktitle> In Proceedings of the 1992 International Conference on Computer Languages (1992), </booktitle> <publisher> IEEE Computer Society Press, </publisher> <pages> pp. 174-180. </pages>
Reference-contexts: In the programming language arena, the status/event distinction could be compared to the distinction between the imperative and declarative programming paradigms. The combination of these two paradigms has been called constraint imperative programming <ref> [13] </ref>. Though our motivation for arriving at the status/event distinction is very different, these constraint imperative programming languages 7 might provide a suitable implementation language for our specification notation.
Reference: [14] <author> Harel, D. Statecharts: </author> <title> a visual formalism for complex systems. </title> <booktitle> Science of Computer Programming 8, </booktitle> <month> 3 (June </month> <year> 1987), </year> <pages> 231-274. </pages>
Reference-contexts: An entity might provide status as output that reflects some of its internal state Notation Input Output Event Status Event Status grammars [22, 23] p p process algebras [2, 5, 24] actors [4] p p CNUCE interactors [21] York interactors [12] statecharts <ref> [14] </ref> p p PIE model [11, 10] p p modified PIE [10] p p p p p object-oriented Z p p p * NEW MODEL * p p p p Table 1: A classification of user interface specification nota-tionss with respect to status and event. to build larger entities from smaller
Reference: [15] <author> Harrison, M. D., and Duke, D. J. </author> <title> A review of formalisms for describing interactive behaviour. </title> <booktitle> In ICSE-16 Workshop on Software Engineering and Human-Computer Interactino: Joint Research Issues (1994), </booktitle> <editor> R. N. Taylor and J. Coutaz, </editor> <publisher> Eds. </publisher>
Reference-contexts: 5, we will relate our work on specification languages to implementation mechanisms in interactive system builders and programming languages. 2 A classification of specification approaches for in teractive systems A number of researchers have used formal specification notations to describe and analyze interactive systems (for reviews of this work, see <ref> [2, 3, 15] </ref>). In this section, we provide a slightly different classification of those approaches in terms of how they handle the description of both status and event information.
Reference: [16] <author> Hill, R. </author> <title> The Rendezvous constraint management system. </title> <booktitle> In UIST'93: Proceedings of the ACM Symposium on User Interface Software and Technology (1993), ACM, </booktitle> <pages> pp. 225-234. </pages>
Reference-contexts: An important concept used in this paper is the status-status mapping that can be used to express interstitial behavior. There are at least two popular implementation mechanisms for realizing these mappings. The first mechanism is the constraint, as used in the Garnet [19], Rendezvous <ref> [16] </ref> and other systems. Constraints are used for high-level descriptions of user interfaces and they are very similar to status-status mappings.
Reference: [17] <author> Jacob, R. J. K. </author> <title> Using formal specifications in the design of a human-computer interface. </title> <journal> Communications of the ACM 26, </journal> <volume> 4 (1983), </volume> <pages> 259-264. </pages>
Reference: [18] <author> Marshall, L. S. </author> <title> A Formal Description Method for User Interfaces. </title> <type> PhD thesis, </type> <institution> University of Manchester, </institution> <address> United Kingdom, </address> <year> 1986. </year> <note> Also published as technical report UMCS-87-1-2. 8 </note>
Reference-contexts: Developing specification languages that are a mix of existing languages is not novel. For example, several researchers have recognized the advantage of mixing event-based process algebras with model-oriented notations <ref> [1, 5, 18, 20, 24] </ref>. Our work is similar in spirit, except that we have concentrated on the phenomena of status rather than internal state, as status is a concept of great importance in describing interactive systems naturally from the perspective of the user.
Reference: [19] <author> Myers, B. A., Giuse, D. A., Dannenberg, R. B., Zanden, B. V., Kosbie, D. S., Pervin, E., Mick-ish, A., and Marchal, P. Garnet: </author> <title> Comprehensive support for graphical, highly interactive user interfaces. </title> <booktitle> IEEE Computer 23, </booktitle> <month> 11 (November </month> <year> 1990), </year> <pages> 71-85. </pages>
Reference-contexts: An important concept used in this paper is the status-status mapping that can be used to express interstitial behavior. There are at least two popular implementation mechanisms for realizing these mappings. The first mechanism is the constraint, as used in the Garnet <ref> [19] </ref>, Rendezvous [16] and other systems. Constraints are used for high-level descriptions of user interfaces and they are very similar to status-status mappings.
Reference: [20] <author> Nielsen, M., Havelund, K., Wagner, K. R., and George, C. </author> <title> The RAISE language, method and tools. </title> <journal> Formal Aspects of Computing 1, </journal> <volume> 1 (1989), </volume> <pages> 85-114. </pages>
Reference-contexts: Developing specification languages that are a mix of existing languages is not novel. For example, several researchers have recognized the advantage of mixing event-based process algebras with model-oriented notations <ref> [1, 5, 18, 20, 24] </ref>. Our work is similar in spirit, except that we have concentrated on the phenomena of status rather than internal state, as status is a concept of great importance in describing interactive systems naturally from the perspective of the user.
Reference: [21] <author> Patern o, F., and Faconti, G. </author> <title> On the use of LO-TOS to describe graphical interaction. </title> <booktitle> In People and Computers VII, HCI'92 Conference (1992), </booktitle> <editor> A. Monk, D. Diaper, and M. Harrison, Eds., </editor> <publisher> Cambridge University Press, </publisher> <pages> pp. 155-174. </pages>
Reference-contexts: An entity might provide status as output that reflects some of its internal state Notation Input Output Event Status Event Status grammars [22, 23] p p process algebras [2, 5, 24] actors [4] p p CNUCE interactors <ref> [21] </ref> York interactors [12] statecharts [14] p p PIE model [11, 10] p p modified PIE [10] p p p p p object-oriented Z p p p * NEW MODEL * p p p p Table 1: A classification of user interface specification nota-tionss with respect to status and event. to
Reference: [22] <author> Reisner, P. </author> <title> Formal grammar and human factors design of an interactive graphics system. </title> <journal> IEEE Transactions on Software Engineering SE-7, </journal> <volume> 2 (1981), </volume> <pages> 229-240. </pages>
Reference-contexts: State refers to the internal information of an entity, whereas status refers to information externally available. An entity might provide status as output that reflects some of its internal state Notation Input Output Event Status Event Status grammars <ref> [22, 23] </ref> p p process algebras [2, 5, 24] actors [4] p p CNUCE interactors [21] York interactors [12] statecharts [14] p p PIE model [11, 10] p p modified PIE [10] p p p p p object-oriented Z p p p * NEW MODEL * p p p p Table
Reference: [23] <author> Schiele, F., and Green, T. </author> <title> HCI formalisms and cognitive psychology: the case of task-action grammars. In Formal methods in Human-Computer Interaction, </title> <editor> M. D. Harrison and H. W. Thimbleby, Eds., </editor> <title> Cam-bridge Series on Human-Computer Interaction. </title> <publisher> Cam-bridge University Press, </publisher> <year> 1990, </year> <note> ch. 2. </note>
Reference-contexts: State refers to the internal information of an entity, whereas status refers to information externally available. An entity might provide status as output that reflects some of its internal state Notation Input Output Event Status Event Status grammars <ref> [22, 23] </ref> p p process algebras [2, 5, 24] actors [4] p p CNUCE interactors [21] York interactors [12] statecharts [14] p p PIE model [11, 10] p p modified PIE [10] p p p p p object-oriented Z p p p * NEW MODEL * p p p p Table
Reference: [24] <author> Sufrin, B., and He, J. </author> <title> Specification, refinement and analysis of interactive processes. In Formal methods in Human-Computer Interaction, </title> <editor> M. D. Harrison and H. W. Thimbleby, Eds., </editor> <title> Cambridge Series on Human-Computer Interaction. </title> <publisher> Cambridge University Press, </publisher> <year> 1990, </year> <note> ch. 6. </note>
Reference-contexts: State refers to the internal information of an entity, whereas status refers to information externally available. An entity might provide status as output that reflects some of its internal state Notation Input Output Event Status Event Status grammars [22, 23] p p process algebras <ref> [2, 5, 24] </ref> actors [4] p p CNUCE interactors [21] York interactors [12] statecharts [14] p p PIE model [11, 10] p p modified PIE [10] p p p p p object-oriented Z p p p * NEW MODEL * p p p p Table 1: A classification of user interface <p> Developing specification languages that are a mix of existing languages is not novel. For example, several researchers have recognized the advantage of mixing event-based process algebras with model-oriented notations <ref> [1, 5, 18, 20, 24] </ref>. Our work is similar in spirit, except that we have concentrated on the phenomena of status rather than internal state, as status is a concept of great importance in describing interactive systems naturally from the perspective of the user.
Reference: [25] <author> Zave, P., and Jackson, M. </author> <title> Conjunction as composition. </title> <journal> ACM Transactions on Software Engineering and Methodology 2, </journal> <volume> 4 (1993), </volume> <pages> 379-411. 9 </pages>
Reference-contexts: More recently, Zave and Jackson have coined the term multiparadigm specification for this activity of specification through a mixture of languages with different semantic domains <ref> [25] </ref>. In that work, the concern is the development of a common semantic domain in which to embed all others. Our emphasis here is on establishing the importance of status and event in interactive system development.
References-found: 25

