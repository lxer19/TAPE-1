URL: ftp://ftp.cse.cuhk.edu.hk/pub/techreports/94/tr-94-8.ps.gz
Refering-URL: ftp://ftp.cs.cuhk.hk/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: An Eclectic Survey of Bounding Methods for Markov Chain Models  
Author: Edward G. Coffman, Jr. R. R. Muntz John C.S. Lui 
Address: Los Angeles, CA 90024 New Territory, Hong Kong  
Affiliation: Computer Science Department Computer Science Department UCLA Chinese University of Hong Kong  
Note: Invited paper, presented to honor  on his 60th Birthday  
Abstract: Markov models are often used for performance modeling. However most models do not have closed form solutions, and numerical solutions are often not feasible due to the large (or even infinite) state space of models of practical interest. One can sometimes take advantage of special structures such as nearly completely decomposable models or models with matrix analytic solutions. This paper presents a brief survey of some work over the past few years on finding bounds on performance measures for models that are otherwise intractable. The bounds are found by modifying the original model such that: (a) the modified model is efficiently solvable and (b) the modified model is proven to provide an upper (lower) bound on the value of the performance measure in the original model. We have successfully applied this methodology in a number of studies which are briefly surveyed here. This is not meant to be a broad, inclusive survey but rather we concentrate on an approach that the authors' have been exploring. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. J. Courtois. </author> <title> Decomposability | queueing and computer system applications. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1977. </year>
Reference-contexts: Also, lumping is only valid for models that have certain very limited types of structure. Another method for dealing with a large state space is aggregation/disaggregation <ref> [1] </ref>. This applies particularly well to cases in which the system model can be viewed as an interacting set of tightly coupled subsystems.
Reference: [2] <author> P.J. Courtois and P. Semal. </author> <title> Bounds for the Positive Eigenvectors of Nonnegative Matrices and for Their Approximations. </title> <journal> JACM, </journal> <volume> Vol. 31, No. 4, </volume> <month> Oct. </month> <year> 1984, </year> <pages> pp. </pages> <address> 804- 825. </address>
Reference-contexts: Among these are: * the method of Courtois and Semal <ref> [2, 3] </ref>. * the methods based on sample path analysis and stochastic ordering [12, 16]. * the bias terms approach of van Dijk [4]. Space limitations prohibit a discussion of these methods.
Reference: [3] <author> P. J. Courtois, P. Semal. </author> <title> Computable Bounds for Conditional Steady-State Probabilities in Large Markov Chains and Queueing Models. </title> <journal> IEEE JSAC, </journal> <volume> Vol 4, number 6, </volume> <month> September, </month> <year> 1986. </year>
Reference-contexts: Among these are: * the method of Courtois and Semal <ref> [2, 3] </ref>. * the methods based on sample path analysis and stochastic ordering [12, 16]. * the bias terms approach of van Dijk [4]. Space limitations prohibit a discussion of these methods.
Reference: [4] <author> Nico M. van Dijk. </author> <title> The Importance of Bias-terms for Error Bounds and Comparison Results. </title> <booktitle> Proceedings of the 1st International Conference on Numerical Solutions of the Markov Chains, </booktitle> <institution> North Carolina State University, </institution> <month> January, </month> <year> 1989. </year>
Reference-contexts: Among these are: * the method of Courtois and Semal [2, 3]. * the methods based on sample path analysis and stochastic ordering [12, 16]. * the bias terms approach of van Dijk <ref> [4] </ref>. Space limitations prohibit a discussion of these methods.
Reference: [5] <author> D.D. Dimitrijevic and M. Chen. </author> <title> An Integrated Algorithm for Probabilistic Protocol Verification and Evaluation. </title> <type> Technical Report RC 13901, </type> <institution> IBM, </institution> <year> 1988. </year>
Reference-contexts: For dependability models a simple heuristic might be to discard all states in which the system has more than a certain number of failed components. A more sophisticated heuristic for determining which states to retain is described in <ref> [5] </ref>. There is also the issue of how much error is introduced by state space truncation. For some transient measures, error bounds are easily obtained by introducing trap states [13]. For example, in dependability analysis we may be interested in interval reliability.
Reference: [6] <author> J. G. Kemeny and J. L. Snell. </author> <title> Finite Markov Chains. </title> <publisher> Van Nostrand Reinhold, </publisher> <address> New Jersey, </address> <year> 1960. </year>
Reference-contexts: Without being able to bound the error introduced, an approximation is much less satisfying. 2 State Space Reduction Techniques There are several methods of state space reduction that are applicable to Markov chain models. One such method is coalescing "lumpable states" <ref> [6] </ref>.
Reference: [7] <author> John C.S. Lui, R.R. Muntz and D. Towsley. </author> <title> Bounding the Response Time of a Minimum Expected Delay Routing System: An Algorithmic Approach. </title> <note> Accepted for publication in IEEE Trans. on Computers. </note>
Reference-contexts: The major extension is a block iterative method that enables the bounds to be iteratively tightened to an arbitrary relative accuracy and where the computation can be organized to limit the block size, so that memory limitations can be respected. 4.2 Shortest Delay Routing In <ref> [7] </ref> bounds are obtained on mean response time for shortest delay routing models with heterogeneous, exponential servers with unbounded queues. The state space is clearly infinite and these models have, in their full generality, defied exact solution. <p> Efficient solutions are obtained with upper and lower error bounds within a few percent of each other. See <ref> [7] </ref> for details. 4.3 Fork-Join Queueing Model In [9] we have explored the application of the above methodology to fork-join queues with exponential service times and unbounded queues. In these models, each job splits into statistically identical tasks, one for each server.
Reference: [8] <author> John C.S. Lui, R.R. Muntz. </author> <title> Computing Bounds on Steady State Availability of Repairable Computer Systems. </title> <journal> Journal of ACM, </journal> <volume> Vol 41, No. 4, </volume> <pages> pp. 676-707, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Not only is this wasteful, but there is generally a limitation on the size of the submodel that can be solved in any step. This limitation and several other extensions are reported in <ref> [8] </ref>. <p> It is therefore of interest to be able to have the flexibility to select the portion of the state space that corresponds to the more "popular" states no matter which they might be. In <ref> [8] </ref> we have shown that the bounding methodology for steady state availability can be generalized to accommodate any ordering of state generation. For other problems the situation is different, but there still appears to be an opportunity to exploit the dynamic state generation idea.
Reference: [9] <author> John C.S. Lui, R.R. Muntz and D. Towsley. </author> <title> Computing Performance Bounds for Fork-join Queueing Models Technical Report CSD-940034, </title> <institution> Computer Science Dept. UCLA, </institution> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: Efficient solutions are obtained with upper and lower error bounds within a few percent of each other. See [7] for details. 4.3 Fork-Join Queueing Model In <ref> [9] </ref> we have explored the application of the above methodology to fork-join queues with exponential service times and unbounded queues. In these models, each job splits into statistically identical tasks, one for each server. A job completes when all of its tasks have been completed. <p> These modifications are also carefully constructed such that the resulting aggregated process has a tree-typed structure so that efficient solution of the models can be obtained. As with the other studies, numerical studies showed that tight bounds were possible with reasonable computation costs. The reader is referred to <ref> [9] </ref> for further details. 5 A Suggestion for Further Research. A complex model is usually defined via some specification language or notation (e.g., stochastic Petri nets).
Reference: [10] <author> A.M.Johnson and M. Malek. </author> <title> Survey of Software Tools for Evaluating Reliability, </title> <journal> Availability and Serviceability ACM Computing Surveys, </journal> <month> Dec. </month> <year> 1988, </year> <pages> pp. 227-271. </pages>
Reference-contexts: 1 Introduction The complexity of the new generation of highly concurrent systems that are now being developed has made the use of sophisticated modeling tools for performance and dependability analysis a high priority enterprise <ref> [10] </ref>. This is particularly true in life critical situations, e.g., air traffic control, or in situations where the economic stakes are high.
Reference: [11] <author> R.R. Muntz, E. De Souza E Silva and A. Goyal. </author> <title> Bounding Availability of Repairable Computer Systems. </title> <booktitle> In Proceedings of 1989 ACM SIGMETRICS and PERFORMANCE '89, also in special issue of IEEE Trans. Computers, </booktitle> <month> Dec. </month> <year> 1989, </year> <pages> pp. 19-30. </pages>
Reference-contexts: Space limitations prohibit a discussion of these methods. We have found all three methods useful, although we have most often used the first two. 4 Example Applications 4.1 Steady State Availability for Re pairable Systems A method is presented in <ref> [11] </ref> by which steady state availability can be approximated, and moreover the error introduced by the approximation can be bounded. In addition, this method provides the means for avoiding generation of the entire state transition matrix; often only a small fraction of the transition rate matrix is required. <p> This simplified representation of the complement is achieved by aggregation (i.e., coalescing) of states. As was demonstrated in <ref> [11] </ref>, the aggregates and transitions between aggregates can be chosen such that upper and lower bounds are obtained for steady state availability. A typical example is given in [11] in which the complete model has more than 10 9 states, but bounds that have a spread of only 10 6 can <p> This simplified representation of the complement is achieved by aggregation (i.e., coalescing) of states. As was demonstrated in <ref> [11] </ref>, the aggregates and transitions between aggregates can be chosen such that upper and lower bounds are obtained for steady state availability. A typical example is given in [11] in which the complete model has more than 10 9 states, but bounds that have a spread of only 10 6 can be obtained by solving models with only 1800 states [11]. The basic method described in [11] has a drawback that it is a "one shot" bound, i.e., a <p> A typical example is given in <ref> [11] </ref> in which the complete model has more than 10 9 states, but bounds that have a spread of only 10 6 can be obtained by solving models with only 1800 states [11]. The basic method described in [11] has a drawback that it is a "one shot" bound, i.e., a portion of the transition rate matrix is generated, the bounds computed, and if they are not tight enough for the purposes at hand the only remedy is to start over and generate <p> A typical example is given in <ref> [11] </ref> in which the complete model has more than 10 9 states, but bounds that have a spread of only 10 6 can be obtained by solving models with only 1800 states [11]. The basic method described in [11] has a drawback that it is a "one shot" bound, i.e., a portion of the transition rate matrix is generated, the bounds computed, and if they are not tight enough for the purposes at hand the only remedy is to start over and generate more of the model.
Reference: [12] <author> S.M. Ross. </author> <title> Stochastic Processes. </title> <publisher> John Wiley and Sons, </publisher> <year> 1983. </year>
Reference-contexts: Among these are: * the method of Courtois and Semal [2, 3]. * the methods based on sample path analysis and stochastic ordering <ref> [12, 16] </ref>. * the bias terms approach of van Dijk [4]. Space limitations prohibit a discussion of these methods.
Reference: [13] <author> E. de Souza e Silva and H. R. Gail. </author> <title> Calculating Availability and Performability Measures of Repairable Computer Systems Using Randomization. </title> <journal> JACM, </journal> <volume> Vol. 36, No 1, </volume> <month> Jan. </month> <year> 1989, </year> <pages> pp. 419-430. </pages>
Reference-contexts: A more sophisticated heuristic for determining which states to retain is described in [5]. There is also the issue of how much error is introduced by state space truncation. For some transient measures, error bounds are easily obtained by introducing trap states <ref> [13] </ref>. For example, in dependability analysis we may be interested in interval reliability. For this purpose one can introduce a trap state and change all transitions to "discarded states" into transitions to the trap state.
Reference: [14] <author> E. de Souza e Silva and P. Mejia. </author> <title> State Space Exploration in Markov Models. </title> <booktitle> SIGMET-RICS/Performance '92, </booktitle> <pages> pp. 152-166. </pages>
Reference-contexts: The underlying Markov chain has to be generated, and in the case of highly skewed stationary state distributions, we would like to be able to dynamically generate the "most popular" states first. Recent work reported in <ref> [14] </ref> explores alternative methods with two (not independent) goals: (a) consuming less resources (both CPU time and memory) and (b) more accurately selecting the states with the higher probabilities.
Reference: [15] <author> W.J. Stewart and A. Goyal. </author> <title> Matrix Methods in Large Dependability Models. </title> <type> Technical Report RC 11485, </type> <institution> IBM T. J. Watson Research Center, </institution> <year> 1985. </year>
Reference-contexts: Unfortunately the characteristics of many models (complex interactions between components, sophisticated scheduling policies, synchronization among parallel tasks, etc.) preclude the possibility of closed form solutions, in general. Numerical solution methods are the most general solution methods <ref> [15] </ref>. The most pervasive practical limitation to the use of numerical solution techniques is the size of the state space of realistic models.
Reference: [16] <author> D. </author> <title> Stoyan. Comparison Methods for Queues and Other Stochastic Models. </title> <publisher> John Wiley and Sons, </publisher> <year> 1983. </year>
Reference-contexts: Among these are: * the method of Courtois and Semal [2, 3]. * the methods based on sample path analysis and stochastic ordering <ref> [12, 16] </ref>. * the bias terms approach of van Dijk [4]. Space limitations prohibit a discussion of these methods.
References-found: 16

