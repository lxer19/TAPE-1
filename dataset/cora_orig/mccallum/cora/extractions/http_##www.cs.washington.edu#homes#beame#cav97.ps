URL: http://www.cs.washington.edu/homes/beame/cav97.ps
Refering-URL: http://www.cs.washington.edu/homes/beame/papers.html
Root-URL: 
Email: fwchan,anderson,beame,notking@cs.washington.edu  
Title: Combining Constraint Solving and Symbolic Model Checking for a Class of Systems with Non-linear Constraints  
Author: William Chan Richard Anderson, Paul Beame, David Notkin 
Address: Box 352350 Seattle, WA 98195-2350, U.S.A.  
Affiliation: Computer Science and Engineering, University of Washington,  
Abstract: We extend the conventional BDD-based model checking algorithms to verify systems with non-linear arithmetic constraints. We represent each constraint as a BDD variable, using the information from a constraint solver to prune the BDDs by removing paths that correspond to infeasible constraints. We illustrate our technique with a simple example, which has been analyzed with our prototype implementation. 
Abstract-found: 1
Intro-found: 1
Reference: [ABB + 96] <author> R. J. Anderson, P. Beame, S. Burns, W. Chan, F. Modugno, D. Notkin, and J. D. Reese. </author> <title> Model checking large software specifications. </title> <booktitle> In Pro 11 ceedings of the Fourth ACM SIGSOFT Symposium on the Foundations of Software Engineering, </booktitle> <pages> pages 156-166, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: We have been studying the practicality of model checking for specifications of large and complex reactive software systems of this type. Our major effort has been directed at the preliminary requirements of one such system, TCAS II, an airborne collision avoidance system used on many commercial aircraft. In <ref> [ABB + 96] </ref> we applied BDD-based model checking to about one third of the TCAS II specification, discovering a number of violations of desirable properties. The full specification|expressed in RSML [LHHR94], a dialect of Statecharts [Har87]|comprises about 400 pages.
Reference: [AG93] <author> J. M. Atlee and J. Gannon. </author> <title> State-based model checking of event-driven system requirements. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-19(1):24-40, </volume> <month> January </month> <year> 1993. </year>
Reference-contexts: The idea is that when the automobile is too close to the vehicle in front, the cruise control system will automatically deactivate itself. (In addition to TCAS, the example was influenced by the one used by Atlee and Gannon <ref> [AG93] </ref>.) Three inputs to the system are s o , the velocity of the vehicle; s f , the velocity of the front vehicle; and d 0, the distance between the vehicles. (In reality, s f may be estimated from the current and previous values of s o and d.) The
Reference: [BC95] <author> R. E. Bryant and Y.-A. Chen. </author> <title> Verification of arithmetic circuits with Binary Moment Diagrams. </title> <booktitle> In Proceedings of the 32nd ACM/IEEE Design Automation Conference, </booktitle> <pages> pages 535-541, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: The high dependence between control and data paths also prevents us from separating them for verification, a technique that is sometimes used in microprocessor verification. Most work on handling non-linearity in verification has been focused on arithmetic circuits. One approach is to use BMDs or *BMDs <ref> [BC95] </ref> and their variants, such as HDDs [CFZ95]. Although they can represent the product xy concisely, representing the constraint xy = z still requires exponential size. In fact, Thathachar [Tha96] shows that small variations of these representations are not likely to solve the problem.
Reference: [BCG88] <author> M. C. Browne, E. M. Clarke, and O. Grumberg. </author> <title> Characterizing finite Kripke structures in propositional temporal logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 59 </volume> <pages> 115-131, </pages> <year> 1988. </year>
Reference-contexts: CTL* is strictly more expressive than CTL and LTL, commonly used in model checking. For our methods we need the following theorem (see, for example, <ref> [BCG88] </ref> for a proof of a similar theorem): Theorem 1.
Reference: [BCM + 90] <author> J. R. Burch, E. M. Clarke, K. L. McMillan, D. L. Dill, and L. J. Hwang. </author> <title> Symbolic model checking: 10 20 states and beyond. </title> <booktitle> In Proceedings of the Fifth Annual Symposium on Logic in Computer Science, </booktitle> <pages> pages 428-439. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> June </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Although symbolic model checking <ref> [BCM + 90] </ref> based on Binary Decision Diagrams [Bry86], or BDDs, has been remarkably successful for verifying finite state systems, it fails when complex arithmetic constraints are present. <p> In general, we have (S ^ Feas) Filter Feas S S (the inclusion is referring to the sets represented by the Boolean functions). Although Filter Feas S still contains some infeasible states, we will show that it is sufficient for model checking. The algorithms for symbolic model checking <ref> [BCM + 90] </ref> involve four types of operations on sets of states: Boolean operations, emptiness checking, image (or pre-image) computation, and finding elements in non-empty sets (for counterexample traces).
Reference: [Bry86] <author> R. E. Bryant. </author> <title> Graph-based algorithms for boolean function manipulation. </title> <journal> IEEE Transactions on Computers, </journal> <volume> C-35(6):677-691, </volume> <month> August </month> <year> 1986. </year>
Reference-contexts: 1 Introduction Although symbolic model checking [BCM + 90] based on Binary Decision Diagrams <ref> [Bry86] </ref>, or BDDs, has been remarkably successful for verifying finite state systems, it fails when complex arithmetic constraints are present. For example, if the bits of the integers x, y and z are represented as BDD variables, the BDD for the non-linear constraint xy = z has exponential size [LS81].
Reference: [CDV96] <author> J. Crow and B. L. Di Vito. </author> <title> Formalizing space shuttle software requirements. </title> <booktitle> In Proceedings of the ACM SIGSOFT Workshop on Formal Methods in Software Practice, </booktitle> <pages> pages 40-48, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: Our approach can deal with not only integral multiplicative constraints but also arbitrarily complex (e.g. trigonometric) constraints over finite or infinite domains, provided an appropriate constraint solver is available. Abstracting a constraint as a single Boolean variable is not a new idea (e.g., <ref> [CDV96] </ref>). However, since infeasible combinations of constraints are not automatically detected, either the approach is incomplete for safety properties, or it requires substantial manual abstraction. Wang et al. [WME93] also represent certain timing constraints in distributed real-time systems as BDD variables.
Reference: [CFZ95] <author> E. M. Clarke, M. Fujita, and X. Zhao. </author> <title> Hybrid Decision Diagrams overcoming the limitations of MTBDDs and BMDs. </title> <booktitle> In 1995 IEEE/ACM International Conference on Computer-Aided Design, Digest of Technical Papers, </booktitle> <pages> pages 159-163. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1995. </year>
Reference-contexts: Most work on handling non-linearity in verification has been focused on arithmetic circuits. One approach is to use BMDs or *BMDs [BC95] and their variants, such as HDDs <ref> [CFZ95] </ref>. Although they can represent the product xy concisely, representing the constraint xy = z still requires exponential size. In fact, Thathachar [Tha96] shows that small variations of these representations are not likely to solve the problem.
Reference: [EH86] <author> E. A. Emerson and J. Y. Halpern. </author> <title> "Sometimes" and "Not Never" revisited: On branching versus linear time temporal logic. </title> <journal> Journal of the ACM, </journal> <volume> 33(1) </volume> <pages> 151-178, </pages> <year> 1986. </year>
Reference-contexts: We say that is finite if Q is finite. Many properties of hQ; Q 0 ; !; ; Li can be expressed in the temporal logic CTL* <ref> [EH86] </ref> as formulas whose atomic propositions are taken from . CTL* is strictly more expressive than CTL and LTL, commonly used in model checking. For our methods we need the following theorem (see, for example, [BCG88] for a proof of a similar theorem): Theorem 1.
Reference: [Har87] <author> D. Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8 </volume> <pages> 231-274, </pages> <year> 1987. </year>
Reference: [HH95] <author> T. A. Henzinger and P.-H. Ho. </author> <title> Algorithmic analysis of nonlinear hybrid systems. </title> <booktitle> In Proceedings of the 7th International Conference on Computer Aided Verification, </booktitle> <pages> pages 225-238. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1995. </year>
Reference-contexts: We try to avoid a similar preprocessing by restricting the class of systems that we deal with and by filtering the BDDs on the fly. 2 Note that the work on nonlinear hybrid systems <ref> [HH95] </ref> differs from ours since it is concerned with constraints that are non-linear differential equations. 2 Models We first give the definitions of basic transition systems, bisimulation equivalence, and quotient systems.
Reference: [LHHR94] <author> N. G. Leveson, M. P. E. Heimdahl, H. Hildreth, and J. D. Reese. </author> <title> Requirements specification for process-control systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-20(9), </volume> <month> September </month> <year> 1994. </year>
Reference-contexts: In [ABB + 96] we applied BDD-based model checking to about one third of the TCAS II specification, discovering a number of violations of desirable properties. The full specification|expressed in RSML <ref> [LHHR94] </ref>, a dialect of Statecharts [Har87]|comprises about 400 pages. Our approach for handling constraints exploited finiteness of the data input domains, representing each bit of data input as a BDD variable and constraints by BDDs in these variables.
Reference: [LS81] <author> R. J. Lipton and R. Sedgewick. </author> <title> Lower bounds for VLSI. </title> <booktitle> In Conference Proceedings of the Thirteenth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 300-307, </pages> <month> May </month> <year> 1981. </year>
Reference-contexts: For example, if the bits of the integers x, y and z are represented as BDD variables, the BDD for the non-linear constraint xy = z has exponential size <ref> [LS81] </ref>. In this paper, we tightly couple a constraint solver with a BDD-based model checker to verify systems with possibly non-linear arithmetic constraints. A large class of embedded, reactive systems consist of a finite-state control component together with numeric data inputs that measure quantities such as velocity, temperature, etc.
Reference: [McM93] <author> K. L. McMillan. </author> <title> Symbolic Model Checking. </title> <publisher> Kluwer, </publisher> <year> 1993. </year>
Reference-contexts: 0 )) V (v 0 ; k) = 9v: Filter Feas (k) (S (v; k) ^ R 2 (v; k; v 0 )) : So we compute U _ V , handling the constraint k = k 0 implicitly. 4 Implementation and Example We implemented the above algorithms in SMV <ref> [McM93] </ref>. The constraint solver used was QUAD-CLP (IR) [PB94], a less incomplete solver than CLP (IR) for quadratic constraints.
Reference: [Mil80] <author> R. Milner. </author> <title> A Calculus of Communicating Systems. </title> <publisher> Springer-Verlag, </publisher> <year> 1980. </year>
Reference-contexts: Intuitively, an observer sees the label of the current state, but not the state itself. Two states are indistinguishable if their labels are the same and their successors are again indistinguishable. Formally, we say that an equivalence relation of Q is a bisimulation (cf. <ref> [Mil80, pp. 42] </ref>) if for all states q 1 and q 2 , we have that q 1 q 2 implies (1) L (q 1 ) equals L (q 2 ) and (2) for all q 0 1 in Q with q 1 ! q 0 1 , there exists a
Reference: [PB94] <author> G. Pesant and M. Boyer. QUAD-CLP(IR): </author> <title> Adding the power of quadratic constraints. </title> <booktitle> In Second International Workshop, Principles and Practice of Constraint Programming, </booktitle> <pages> pages 95-108. </pages> <publisher> Springer-Verlag, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: The constraint solver used was QUAD-CLP (IR) <ref> [PB94] </ref>, a less incomplete solver than CLP (IR) for quadratic constraints.
Reference: [Tha96] <author> J. S. Thathachar. </author> <title> On the limitations of ordered representations of functions. </title> <type> Technical Report CSE-96-09-03, </type> <institution> University of Washington, </institution> <month> September </month> <year> 1996. </year>
Reference-contexts: One approach is to use BMDs or *BMDs [BC95] and their variants, such as HDDs [CFZ95]. Although they can represent the product xy concisely, representing the constraint xy = z still requires exponential size. In fact, Thathachar <ref> [Tha96] </ref> shows that small variations of these representations are not likely to solve the problem. Our approach can deal with not only integral multiplicative constraints but also arbitrarily complex (e.g. trigonometric) constraints over finite or infinite domains, provided an appropriate constraint solver is available.
Reference: [WME93] <author> F. Wang, A. Mok, and E. A. Emerson. </author> <title> Symbolic model checking for distributed real-time systems. </title> <booktitle> In Proceedings of the First International Symposium of Formal Methods Europe, </booktitle> <pages> pages 632-651, </pages> <month> April </month> <year> 1993. </year> <title> This article was processed using the L a T E X macro package with LLNCS style 12 </title>
Reference-contexts: Abstracting a constraint as a single Boolean variable is not a new idea (e.g., [CDV96]). However, since infeasible combinations of constraints are not automatically detected, either the approach is incomplete for safety properties, or it requires substantial manual abstraction. Wang et al. <ref> [WME93] </ref> also represent certain timing constraints in distributed real-time systems as BDD variables. However, to ensure soundness and completeness, their method requires building a BDD in exponential time before running the fixed-point algorithm.
References-found: 18

