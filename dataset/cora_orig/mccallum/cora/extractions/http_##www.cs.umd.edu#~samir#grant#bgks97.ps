URL: http://www.cs.umd.edu/~samir/grant/bgks97.ps
Refering-URL: http://www.cs.umd.edu/~samir/grant/career.html
Root-URL: 
Email: Email addr: randeep@cs.umd.edu  Email addr: sudipto@cs.stanford.edu  Email addr: samir@cs.umd.edu  Email addr: yoram@cs.umd.edu  
Phone: 9501355.  
Title: Facility Location with Dynamic Distance Functions  
Author: Randeep Bhatia Sudipto Guha Samir Khuller Yoram J. Sussmann 
Note: 1 Also with LCC Inc., 7925 Jones  2 This work was done while this author was at the University of Maryland and his research was supported by NSF Research Initiation Award CCR-9307462. Author's current address is Stanford University.  3 Research supported by NSF Research Initiation Award CCR-9307462, and NSF CAREER Award CCR  4 Research supported by NSF CAREER Award CCR-9501355.  
Address: College Park, MD 20742  Drive, McLean VA 22102.  
Affiliation: Dept. of Computer Science University of Maryland  Branch  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> J. Bar-Ilan, G. Kortsarz and D. Peleg, </author> <title> "How to allocate network centers", </title> <journal> J. Algorithms, </journal> <volume> 15 </volume> <pages> 385-415, </pages> <year> (1993). </year>
Reference-contexts: Approximation algorithms for the basic K-center problem [5, 8] that achieve an approximation factor of 2 are known to be optimal [5, 10, 8, 9]. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well <ref> [3, 9, 17, 1, 13, 12, 2, 11] </ref>. The generalizations include cases when each node v has an associated cost c (v) for placing a center on it, and rather than limiting the number of centers, we have a limited budget K [9, 17]. <p> More formally, min max ffi (ff) (u; S) where ffi (ff) (u; S) = min max d (u; a): The (unweighted) capacitated K-center problem with costs <ref> [1, 12] </ref> requires us to place centers of total cost at most K and assign at most L vertices to each center so that (1) all nodes are assigned to a center, and (2) every vertex is "close" to its assigned center (not its closest center). <p> This guarantees that we cover each vertex within a distance of (1 + fi)ffi. Time-Invariant Bounded K-centers (G; ffi). 1 S = ;. 3 for all v 4 marked t (v) = FALSE. 5 while 9v =2 S; t 2 <ref> [1; T ] </ref> with marked t (v) = FALSE do 6 let v; t be such a pair for which w (v) is maximized. 7 create center at v and set S = S [ v. 8 for (v; u) 2 E t 9 for 1 t 0 T 10 set
Reference: [2] <author> S. Chaudhuri, N. Garg, and R. Ravi, </author> <title> "Best possible approximation algorithms for generalized k-Center problems", </title> <type> Technical Report MPI-I-96-1-021, </type> <institution> Max-Planck-Institut fur Informatik, Im Stadtwald, 66123 Saarbrucken, Germany, </institution> <year> (1996). </year>
Reference-contexts: Approximation algorithms for the basic K-center problem [5, 8] that achieve an approximation factor of 2 are known to be optimal [5, 10, 8, 9]. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well <ref> [3, 9, 17, 1, 13, 12, 2, 11] </ref>. The generalizations include cases when each node v has an associated cost c (v) for placing a center on it, and rather than limiting the number of centers, we have a limited budget K [9, 17]. <p> Recently, we have learned that Hochbaum and Pathria [7] motivated by [19] have obtained a factor 3 approximation for the basic K-center problem as well (for 2 time-slots). 2. Preliminaries The ff-all-neighbor K-center problem with weights and costs <ref> [11, 2] </ref> is defined as follows: Given an edge-weighted graph G = (V; E) with weight and cost functions defined on the vertices, find a subset S V of total cost at most K so that every vertex is "close" to at least ff vertices in S. <p> More formally, min max ffi (ff) (u; S) where ffi (ff) (u; S) = min max w (u)d (u; a): The ff-neighbor K-suppliers problem with weights and costs <ref> [11, 2] </ref> is defined as follows: Given an edge-weighted bipartite graph G = (U; V; E) with a weight function defined on V and cost function defined on U , find a subset S U of total cost at most K such that each vertex in V is "close" to at <p> More formally, min max ffi (ff) (v; S): The (unweighted) ff-neighbor K-center problem with costs <ref> [13, 11, 2] </ref> is defined as follows: Given an edge-weighted graph G = (V; E) with a cost function defined on the vertices, find a subset S V of total cost at most K so that every vertex in V S is "close" to at least ff vertices in S.
Reference: [3] <author> M. Dyer and A. M. Frieze, </author> <title> "A simple heuristic for the p-center problem", </title> <journal> Operations Research Letters, </journal> <volume> Vol 3 </volume> <pages> 285-288, </pages> <year> (1985). </year>
Reference-contexts: Approximation algorithms for the basic K-center problem [5, 8] that achieve an approximation factor of 2 are known to be optimal [5, 10, 8, 9]. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well <ref> [3, 9, 17, 1, 13, 12, 2, 11] </ref>. The generalizations include cases when each node v has an associated cost c (v) for placing a center on it, and rather than limiting the number of centers, we have a limited budget K [9, 17]. <p> property c (S) = P s2S c (s) K, with the objective function min max min d (u; v): Other generalizations include cases where each node v has a weight w (v) associated with it and we want to minimize the weighted distance from a node to its closest center <ref> [3, 17] </ref>. More formally we want to find a subset S V of size at most K, where the objective function is min max min w (u)d (u; v): For the basic K-center problems, w (v) = c (v) = 1 for every node v.
Reference: [4] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability: A guide to the theory of NP-completeness, </title> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1978. </year>
Reference-contexts: For example, one may wish to install K fire stations and minimize the maximum distance (response time) from a location to its closest fire station. Some applications are mentioned in [14, 15]. The problem is known to be NP-hard <ref> [4] </ref>. 1 1.1. Basic Notation An approximation algorithm with a factor of , for a minimization problem, is a polynomial time algorithm that guarantees a solution with cost at most times the optimal solution. <p> Proof. For contradiction let us assume that a polynomial time -approximation algorithm exists, for some constant . We show that we can use this algorithm to solve the 3-dimensional matching problem <ref> [4] </ref> in polynomial time. 4 Let the instance of the 3-dimensional matching problem (3DM ) be the three sets A; B; C and a set of m ordered triples over A fi B fi C, where jAj = jBj = jCj = K.
Reference: [5] <author> T. Gonzalez, </author> <title> "Clustering to minimize the maximum inter-cluster distance", </title> <journal> Theoretical Computer Science, </journal> <volume> Vol 38 </volume> <pages> 293-306, </pages> <year> (1985). </year>
Reference-contexts: In addition, the techniques used for solving these problems on a static network do not easily extend to the general model. We first discuss the basic K-center problem and then discuss our specific model and results. K-Center Problem: The basic K-center problem is a fundamental facility location problem <ref> [20, 5, 10, 8, 9] </ref> and is defined as follows: given an edge-weighted graph G = (V; E) find a subset S V of size at most K such that each vertex in V is "close" to some vertex in S. <p> The problem is known to be NP-hard [4]. 1 1.1. Basic Notation An approximation algorithm with a factor of , for a minimization problem, is a polynomial time algorithm that guarantees a solution with cost at most times the optimal solution. Approximation algorithms for the basic K-center problem <ref> [5, 8] </ref> that achieve an approximation factor of 2 are known to be optimal [5, 10, 8, 9]. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well [3, 9, 17, 1, 13, 12, 2, 11]. <p> Approximation algorithms for the basic K-center problem [5, 8] that achieve an approximation factor of 2 are known to be optimal <ref> [5, 10, 8, 9] </ref>. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well [3, 9, 17, 1, 13, 12, 2, 11].
Reference: [6] <author> R. Hassin, </author> <title> "Approximation schemes for the restricted shortest path problems", </title> <journal> Mathematics of Operations Research, </journal> <volume> Vol 17 36-42, No 1. </volume> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: Ravi et. al. [18] studied this problem in the context of bicriterion approximation and their results imply a 1 + * approximation for this problem when there are only two "time-slots". Similar bicriterion approximation results are known for the shortest path problem <ref> [6] </ref>. Some of the other fundamental problems, such as finding a matching whose maximum weight over time is minimized, are completely open. Our experience with this general model has convinced us that even the simplest network problems are quite complex when studied under this model.
Reference: [7] <author> D. Hochbaum, </author> <type> personal communication, </type> <month> Oct </month> <year> (1996). </year>
Reference-contexts: Recently, we have learned that Hochbaum and Pathria <ref> [7] </ref> motivated by [19] have obtained a factor 3 approximation for the basic K-center problem as well (for 2 time-slots). 2.
Reference: [8] <author> D. Hochbaum and D. B. Shmoys, </author> <title> "A best possible heuristic for the k-center problem", </title> <journal> Mathematics of Operations Research, </journal> <volume> Vol 10 </volume> <pages> 180-184, </pages> <year> (1985). </year>
Reference-contexts: In addition, the techniques used for solving these problems on a static network do not easily extend to the general model. We first discuss the basic K-center problem and then discuss our specific model and results. K-Center Problem: The basic K-center problem is a fundamental facility location problem <ref> [20, 5, 10, 8, 9] </ref> and is defined as follows: given an edge-weighted graph G = (V; E) find a subset S V of size at most K such that each vertex in V is "close" to some vertex in S. <p> The problem is known to be NP-hard [4]. 1 1.1. Basic Notation An approximation algorithm with a factor of , for a minimization problem, is a polynomial time algorithm that guarantees a solution with cost at most times the optimal solution. Approximation algorithms for the basic K-center problem <ref> [5, 8] </ref> that achieve an approximation factor of 2 are known to be optimal [5, 10, 8, 9]. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well [3, 9, 17, 1, 13, 12, 2, 11]. <p> Approximation algorithms for the basic K-center problem [5, 8] that achieve an approximation factor of 2 are known to be optimal <ref> [5, 10, 8, 9] </ref>. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well [3, 9, 17, 1, 13, 12, 2, 11]. <p> The algorithms for arbitrary time-slots are based on a clever extension of the Hochbaum-Shmoys method <ref> [8, 9] </ref>. We also apply the matching approach to obtain a bicriteria approximation for the asymmetric K-center problem, in which G is a directed graph. For this problem d t (u; v) = d t (v; u) may not hold. <p> High-Level Description: We will use the standard approach of constructing a threshold graph as pioneered by Hochbaum and Shmoys <ref> [8, 9] </ref>. We describe the algorithm for the most general case, when each node has a weight and an associated cost to construct centers. The algorithm operates as follows. <p> We will use the standard approach of constructing a threshold graph as pioneered by Hochbaum and Shmoys <ref> [8, 9] </ref>. The main idea behind the algorithm is to fix a distance threshold ffi = ` i for increasing values of i, and to then consider the directed graph G t ffi .
Reference: [9] <author> D. Hochbaum and D. B. Shmoys, </author> <title> "A unified approach to approximation algorithms for bottleneck problems", </title> <journal> Journal of the ACM, </journal> <volume> Vol 33(3) </volume> <pages> 533-550, </pages> <year> (1986). </year>
Reference-contexts: In addition, the techniques used for solving these problems on a static network do not easily extend to the general model. We first discuss the basic K-center problem and then discuss our specific model and results. K-Center Problem: The basic K-center problem is a fundamental facility location problem <ref> [20, 5, 10, 8, 9] </ref> and is defined as follows: given an edge-weighted graph G = (V; E) find a subset S V of size at most K such that each vertex in V is "close" to some vertex in S. <p> Approximation algorithms for the basic K-center problem [5, 8] that achieve an approximation factor of 2 are known to be optimal <ref> [5, 10, 8, 9] </ref>. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well [3, 9, 17, 1, 13, 12, 2, 11]. <p> Approximation algorithms for the basic K-center problem [5, 8] that achieve an approximation factor of 2 are known to be optimal [5, 10, 8, 9]. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well <ref> [3, 9, 17, 1, 13, 12, 2, 11] </ref>. The generalizations include cases when each node v has an associated cost c (v) for placing a center on it, and rather than limiting the number of centers, we have a limited budget K [9, 17]. <p> The generalizations include cases when each node v has an associated cost c (v) for placing a center on it, and rather than limiting the number of centers, we have a limited budget K <ref> [9, 17] </ref>. <p> For the weighted (cost) problems c (v) = 1 (w (v) = 1) for every node v. The K-suppliers problem <ref> [9] </ref> is a variant of the K-center problem in which we are given an edge-weighted bipartite graph G = (U; V; E), and we are required to find a subset S U of size at most K such that each vertex in V is "close" to some vertex of S. <p> These results are summarized in the table below. The only known lower bound for any of the K-center problems is 2, the lower bound for the basic K-center problem. A lower bound of 3 due to Karloff for the K-suppliers problem appears in <ref> [9] </ref>. It can be shown that the K-center problem with weights and costs is a generalization of the K-suppliers problem, which implies a lower bound of 3 for this problem. <p> The algorithms for arbitrary time-slots are based on a clever extension of the Hochbaum-Shmoys method <ref> [8, 9] </ref>. We also apply the matching approach to obtain a bicriteria approximation for the asymmetric K-center problem, in which G is a directed graph. For this problem d t (u; v) = d t (v; u) may not hold. <p> High-Level Description: We will use the standard approach of constructing a threshold graph as pioneered by Hochbaum and Shmoys <ref> [8, 9] </ref>. We describe the algorithm for the most general case, when each node has a weight and an associated cost to construct centers. The algorithm operates as follows. <p> We will use the standard approach of constructing a threshold graph as pioneered by Hochbaum and Shmoys <ref> [8, 9] </ref>. The main idea behind the algorithm is to fix a distance threshold ffi = ` i for increasing values of i, and to then consider the directed graph G t ffi .
Reference: [10] <author> W. L. Hsu and G. L. Nemhauser, </author> <title> "Easy and hard bottleneck location problems", </title> <journal> Discrete Applied Mathematics, </journal> <volume> Vol 1 </volume> <pages> 209-216, </pages> <year> (1979). </year>
Reference-contexts: In addition, the techniques used for solving these problems on a static network do not easily extend to the general model. We first discuss the basic K-center problem and then discuss our specific model and results. K-Center Problem: The basic K-center problem is a fundamental facility location problem <ref> [20, 5, 10, 8, 9] </ref> and is defined as follows: given an edge-weighted graph G = (V; E) find a subset S V of size at most K such that each vertex in V is "close" to some vertex in S. <p> Approximation algorithms for the basic K-center problem [5, 8] that achieve an approximation factor of 2 are known to be optimal <ref> [5, 10, 8, 9] </ref>. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well [3, 9, 17, 1, 13, 12, 2, 11].
Reference: [11] <author> S. Khuller, R. Pless, and Y. J. Sussmann, </author> <title> "Fault tolerant K-Center problems", </title> <booktitle> Proc. of the 3 rd Italian Conference on Algorithms and Complexity, </booktitle> <volume> LNCS 1203, </volume> <pages> pages 37-48, </pages> <year> (1997). </year>
Reference-contexts: Approximation algorithms for the basic K-center problem [5, 8] that achieve an approximation factor of 2 are known to be optimal [5, 10, 8, 9]. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well <ref> [3, 9, 17, 1, 13, 12, 2, 11] </ref>. The generalizations include cases when each node v has an associated cost c (v) for placing a center on it, and rather than limiting the number of centers, we have a limited budget K [9, 17]. <p> Recently, we have learned that Hochbaum and Pathria [7] motivated by [19] have obtained a factor 3 approximation for the basic K-center problem as well (for 2 time-slots). 2. Preliminaries The ff-all-neighbor K-center problem with weights and costs <ref> [11, 2] </ref> is defined as follows: Given an edge-weighted graph G = (V; E) with weight and cost functions defined on the vertices, find a subset S V of total cost at most K so that every vertex is "close" to at least ff vertices in S. <p> More formally, min max ffi (ff) (u; S) where ffi (ff) (u; S) = min max w (u)d (u; a): The ff-neighbor K-suppliers problem with weights and costs <ref> [11, 2] </ref> is defined as follows: Given an edge-weighted bipartite graph G = (U; V; E) with a weight function defined on V and cost function defined on U , find a subset S U of total cost at most K such that each vertex in V is "close" to at <p> More formally, min max ffi (ff) (v; S): The (unweighted) ff-neighbor K-center problem with costs <ref> [13, 11, 2] </ref> is defined as follows: Given an edge-weighted graph G = (V; E) with a cost function defined on the vertices, find a subset S V of total cost at most K so that every vertex in V S is "close" to at least ff vertices in S. <p> First construct approximate solutions S 1 and S 2 independently for the graphs G 1 ffi and G 2 ffi using the algorithm for the ff-neighbor K-center problem given in <ref> [11] </ref>. (Each vertex either has a center placed on it, or at least ff centers within distance two.) 7 adjacent to z Nodes in S 1 adjacent to z Nodes in S 2 z 1 z 2 v w y We now construct an auxiliary graph G 0 using the vertex <p> Thus the cost of the solution returned is at most the cost of the optimal solution. To prove the distance bound, first note that the algorithm in <ref> [11] </ref> returns a solution to the ff-neighbor K-center problem with an approximation factor of 2. The solution returned by the above matching procedure selects new centers in the neighborhoods of the original centers. <p> We can obtain an algorithm for the ff-neighbor K-suppliers problem with weights and costs, with an approximation ratio of 1 + 2fi, where fi = max e max t d t (e) 5.3.3. ff-neighbor K-centers By only considering the edge weights in one time-slot, and running the algorithm given in <ref> [11] </ref>, we can obtain the following result. Theorem 5.6: We can obtain an algorithm for the ff-neighbor K-center problem with weights and costs, with an approximation ratio of 4fi, where fi = max e max t d t (e) Proof. The algorithm given in [11] gives a 4-approximation to the ff-neighbor <p> and running the algorithm given in <ref> [11] </ref>, we can obtain the following result. Theorem 5.6: We can obtain an algorithm for the ff-neighbor K-center problem with weights and costs, with an approximation ratio of 4fi, where fi = max e max t d t (e) Proof. The algorithm given in [11] gives a 4-approximation to the ff-neighbor K-center problem with weights and costs for one time-slot. Each edge weight increases by at most a factor of fi in any time-slot, resulting in a 4-approximation for all time-slots. 14 5.4.
Reference: [12] <author> S. Khuller and Y. J. Sussmann, </author> <title> "The capacitated K-Center problem", </title> <booktitle> Proc. of the 4 th Annual European Symposium on Algorithms, </booktitle> <volume> LNCS 1136, </volume> <pages> pages 152-166, </pages> <year> (1996). </year>
Reference-contexts: Approximation algorithms for the basic K-center problem [5, 8] that achieve an approximation factor of 2 are known to be optimal [5, 10, 8, 9]. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well <ref> [3, 9, 17, 1, 13, 12, 2, 11] </ref>. The generalizations include cases when each node v has an associated cost c (v) for placing a center on it, and rather than limiting the number of centers, we have a limited budget K [9, 17]. <p> More formally, min max ffi (ff) (u; S) where ffi (ff) (u; S) = min max d (u; a): The (unweighted) capacitated K-center problem with costs <ref> [1, 12] </ref> requires us to place centers of total cost at most K and assign at most L vertices to each center so that (1) all nodes are assigned to a center, and (2) every vertex is "close" to its assigned center (not its closest center).
Reference: [13] <author> S. O. Krumke, </author> <title> "On a generalization of the p-center problem", </title> <journal> Information Processing Letters, </journal> <volume> Vol 56 </volume> <pages> 67-71, </pages> <year> (1995). </year>
Reference-contexts: Approximation algorithms for the basic K-center problem [5, 8] that achieve an approximation factor of 2 are known to be optimal [5, 10, 8, 9]. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well <ref> [3, 9, 17, 1, 13, 12, 2, 11] </ref>. The generalizations include cases when each node v has an associated cost c (v) for placing a center on it, and rather than limiting the number of centers, we have a limited budget K [9, 17]. <p> More formally, min max ffi (ff) (v; S): The (unweighted) ff-neighbor K-center problem with costs <ref> [13, 11, 2] </ref> is defined as follows: Given an edge-weighted graph G = (V; E) with a cost function defined on the vertices, find a subset S V of total cost at most K so that every vertex in V S is "close" to at least ff vertices in S.
Reference: [14] <author> H. L. Morgan and K. D. Levin, </author> <title> "Optimal program and data locations in computer networks", </title> <journal> Communications of the ACM, </journal> <volume> Vol 20 </volume> <pages> 315-322, </pages> <year> (1977). </year>
Reference-contexts: For example, one may wish to install K fire stations and minimize the maximum distance (response time) from a location to its closest fire station. Some applications are mentioned in <ref> [14, 15] </ref>. The problem is known to be NP-hard [4]. 1 1.1. Basic Notation An approximation algorithm with a factor of , for a minimization problem, is a polynomial time algorithm that guarantees a solution with cost at most times the optimal solution.
Reference: [15] <author> K. Murthy and J. Kam, </author> <title> "An approximation algorithm to the file allocation problem in computer networks", </title> <booktitle> Proc. of the 2 nd ACM Symposium on Principles of Database Systems, </booktitle> <pages> pages 258-266, </pages> <year> (1983). </year>
Reference-contexts: For example, one may wish to install K fire stations and minimize the maximum distance (response time) from a location to its closest fire station. Some applications are mentioned in <ref> [14, 15] </ref>. The problem is known to be NP-hard [4]. 1 1.1. Basic Notation An approximation algorithm with a factor of , for a minimization problem, is a polynomial time algorithm that guarantees a solution with cost at most times the optimal solution.
Reference: [16] <author> R. Panigrahy, </author> <title> "An O(log n) approximation algorithm for the asymmetric p-center problem", </title> <type> manuscript, </type> <year> 1995. </year>
Reference-contexts: We use a variant of the algorithm described in [22] to solve the asymmetric K center problem for each time-slot that guarantees a factor of O (log fl n). The algorithm developed by Panigrahy <ref> [16] </ref> (also described in [22]) uses a set cover approach to obtain a solution with 2K centers with an approximation factor of O (log fl n). We refer to the vertices chosen to be centers for the two time-slots as S 1 and S 2 respectively.
Reference: [17] <author> J. Plesnik, </author> <title> "A heuristic for the p-center problem in graphs", </title> <journal> Discrete Applied Mathematics, </journal> <volume> Vol 17 </volume> <pages> 263-268, </pages> <year> (1987) </year>
Reference-contexts: Approximation algorithms for the basic K-center problem [5, 8] that achieve an approximation factor of 2 are known to be optimal [5, 10, 8, 9]. Several approximation algorithms are known for interesting generalizations of the basic K-center problem as well <ref> [3, 9, 17, 1, 13, 12, 2, 11] </ref>. The generalizations include cases when each node v has an associated cost c (v) for placing a center on it, and rather than limiting the number of centers, we have a limited budget K [9, 17]. <p> The generalizations include cases when each node v has an associated cost c (v) for placing a center on it, and rather than limiting the number of centers, we have a limited budget K <ref> [9, 17] </ref>. <p> property c (S) = P s2S c (s) K, with the objective function min max min d (u; v): Other generalizations include cases where each node v has a weight w (v) associated with it and we want to minimize the weighted distance from a node to its closest center <ref> [3, 17] </ref>. More formally we want to find a subset S V of size at most K, where the objective function is min max min w (u)d (u; v): For the basic K-center problems, w (v) = c (v) = 1 for every node v.
Reference: [18] <author> R. Ravi, M. X. Goemans, </author> <title> "The constrained minimum spanning tree problem", </title> <booktitle> SWAT 1996, </booktitle> <pages> 66-75. </pages>
Reference-contexts: In this paper we initiate this study for the facility location problem and leave open a host of other problems. For example it is natural to study the problem of finding a spanning tree of the network whose maximum weight over time is minimum. Ravi et. al. <ref> [18] </ref> studied this problem in the context of bicriterion approximation and their results imply a 1 + * approximation for this problem when there are only two "time-slots". Similar bicriterion approximation results are known for the shortest path problem [6].
Reference: [19] <author> D. Serra and V. Marianov, </author> <title> "The P-median problem in a changing network: The case of Barcelona", </title> <booktitle> paper presented at the International Symposium in Locational Decisions VII, </booktitle> <address> (ISOLDE), Edmonton, Canada, </address> <year> (1996). </year>
Reference-contexts: Recently, we have learned that Hochbaum and Pathria [7] motivated by <ref> [19] </ref> have obtained a factor 3 approximation for the basic K-center problem as well (for 2 time-slots). 2.
Reference: [20] <author> C. Toregas, R. Swain, C. Revelle and L. Bergman, </author> <title> "The location of emergency service facilities", </title> <journal> Operations Research, </journal> <volume> Vol 19 </volume> <pages> 1363-1373, </pages> <year> (1971). </year>
Reference-contexts: In addition, the techniques used for solving these problems on a static network do not easily extend to the general model. We first discuss the basic K-center problem and then discuss our specific model and results. K-Center Problem: The basic K-center problem is a fundamental facility location problem <ref> [20, 5, 10, 8, 9] </ref> and is defined as follows: given an edge-weighted graph G = (V; E) find a subset S V of size at most K such that each vertex in V is "close" to some vertex in S.
Reference: [21] <editor> J. Van Leeuwen, Ed., </editor> <booktitle> Handbook of Theoretical Computer Science, Vol. A: Algorithms and Complexity, </booktitle> <publisher> The MIT Press/Elsevier, </publisher> <year> 1990. </year>
Reference-contexts: An edge cover S in a graph is a subset of edges such that every vertex is incident to at least one edge in S. A minimum-cost edge cover can be found in polynomial time <ref> [21, pages 580-583] </ref>. 3. Hardness of Approximation for 3 time-slots Lemma 3.1: With three time-slots and no restriction on how the distance function can change with time, no approximation ratio for the K-center problem is possible unless P = N P . Proof. <p> Such a cover will provide a solution in which every vertex has at least ff centers within a distance 3 times that of optimal. Since the ff-edge cover problem can be solved in polynomial time even with costs <ref> [21, pages 580-583] </ref>, we can find a minimum cost ff-edge cover in G 0 and obtain an approximate solution to the ff-all-neighbor K-center problem with weights and costs.
Reference: [22] <author> S. Vishwanathan, </author> <title> "An O(log fl n) approximation algorithm for the asymmetric p-Center problem", </title> <booktitle> Proc. of the 7 th Annual ACM-SIAM Symposium on Discrete Algorithms, </booktitle> <pages> pages 1-5, </pages> <year> (1996). </year>
Reference-contexts: We give an algorithm that, for any nonegative integer -, uses at most K -+1 centers and covers all nodes within distance c log fl n + times the optimal distance, where c is the constant from the set cover phase of the algorithm in <ref> [22] </ref>. Recently, we have learned that Hochbaum and Pathria [7] motivated by [19] have obtained a factor 3 approximation for the basic K-center problem as well (for 2 time-slots). 2. <p> Since we can try all possible threshold values (there are at most 2n 2 distinct distances), we assume that we construct the threshold digraphs G 1 and G 2 for time-slots 1 and 2 respectively with the optimal radius. We use a variant of the algorithm described in <ref> [22] </ref> to solve the asymmetric K center problem for each time-slot that guarantees a factor of O (log fl n). The algorithm developed by Panigrahy [16] (also described in [22]) uses a set cover approach to obtain a solution with 2K centers with an approximation factor of O (log fl n). <p> We use a variant of the algorithm described in <ref> [22] </ref> to solve the asymmetric K center problem for each time-slot that guarantees a factor of O (log fl n). The algorithm developed by Panigrahy [16] (also described in [22]) uses a set cover approach to obtain a solution with 2K centers with an approximation factor of O (log fl n). We refer to the vertices chosen to be centers for the two time-slots as S 1 and S 2 respectively.
References-found: 22

