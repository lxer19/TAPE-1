URL: ftp://ftp.cse.ucsc.edu/pub/tr/ucsc-crl-94-15.ps.Z
Refering-URL: ftp://ftp.cse.ucsc.edu/pub/tr/README.html
Root-URL: http://www.cse.ucsc.edu
Title: UDS: A Universal Data Structure  
Author: Robert Levinson 
Keyword: RETE, pattern matching, conceptual structures, relational database, machine learning, conceptual graphs, state space search, rule matching.  
Address: Santa Cruz, CA 95064  
Affiliation: Board of Studies in Computer and Information Sciences University of California, Santa Cruz  
Pubnum: UCSC-CRL-94-15  
Email: E-mail: levinson@cse.ucsc.edu  
Phone: (408)459-2087  
Date: June 10, 1994  
Abstract: This paper gives a data structure (UDS) for supporting database retrieval, inference and machine learning that attempts to unify and extend previous work in relational databases, semantic networks, conceptual graphs, RETE, neural networks and case-based reasoning. Foundational to this view is that all data can be viewed as a primitive set of objects and mathematical relations (as sets of tuples) over those objects. The data is stored in three partially-ordered hierarchies: a node hierarchy, a relation hierarchy, and a conceptual graphs hierarchy. All three hierarchies can be stored as "levels" in the conceptual graphs hierarchy. These multiple hierarchies support multiple views of the data with advantages over any of the individual methods. In particular, conceptual graphs are stored in a relation-based compact form that facilitates matching. UDS is currently being implemented in the Peirce conceptual graphs workbench and is being used as a domain-independent monitor for state-space search domains at a level that is faster than previous implementations designed specifically for those domains.In addition it provides a useful environment for pattern-based machine learning. 
Abstract-found: 1
Intro-found: 1
Reference: <institution> References </institution>
Reference: [1] <author> J.M. Barnard. </author> <title> Problems of substructure search and their solution. </title> <editor> In Wendy Warr, editor, </editor> <booktitle> Chemical Structures the International Language of Chemistry,. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1988. </year>
Reference-contexts: That is, the first stage of most subgraph-isomorphism tests <ref> [1] </ref> in which one finds which nodes could bind (as "candidates") to other nodes can be performed by simply reading off correspondences from the hierarchy, or comparing bit encodings [4]. <p> Obviously, Join is a critical operation and must be as efficient as possible. A join of an individual tuple is similar to a traditional subgraph-isomorphism test <ref> [1] </ref>, but by working at the table (or schema) level a large number of subgraph bindings are found simultaneously, illustrating another advantage of the UDS organization. Further advantages are accrued due to the incrementality. For each table T, Join is called once for each pre-condition table P that has changed.
Reference: [2] <author> H. Boley. </author> <title> Declarative operations on nets. Computers and Mathematics with Applications, </title> <booktitle> 23(6-9):601-638, 1992. Part 2 of Special Issue on Semantic Networks in Artificial Intelligence, </booktitle> <editor> Fritz Lehmann, editor. </editor> <booktitle> Also reprinted on pages 601-638 of the book, Semantic Networks in Artificial Intelligence, </booktitle> <editor> Fritz Lehmann, editor, </editor> <publisher> Pergammon Press, </publisher> <year> 1992. </year>
Reference-contexts: For example, a 3-ary relation in a diagrammatic conceptual graph requires 3 concept nodes, 1 relation node and 3 argument arcs. Taking the view <ref> [2] </ref> that conceptual graphs are nested directed hypergraphs, the 3-ary relation becomes simply 3 nodes and 1 labeled hyperedge. This is certainly an improvement. But there is yet farther to go, if one takes the relational view of UDS.
Reference: [3] <author> G. Ellis. </author> <title> Compiled hierarchical retrieval. </title> <editor> In E. Way, editor, </editor> <booktitle> Proceedings of Sixth Annual Workshop on Conceptual Structures), </booktitle> <pages> pages 187-208, </pages> <address> SUNY-Binghamton, </address> <year> 1991. </year> <note> To Appear. </note>
Reference-contexts: Redundancy has been removed. Similar ideas involving storage based on canonical rules are given in <ref> [3] </ref>. * Conceptual graph matching can make use of the chunks provided by processing the graphs at the relational level rather than at the node level. * Method V retrieval can also proceed naturally.
Reference: [4] <author> G. Ellis. </author> <title> Efficient retrieval from hierarchies of objects using lattice operations. </title> <editor> In G. Mineau and B. Moulin, editors, </editor> <booktitle> Proceedings of First International Conference on Conceptual Structures (ICCS-93), </booktitle> <address> Montreal, </address> <year> 1993. </year> <note> To Appear. </note>
Reference-contexts: Introduction Also associated with each hierarchy is an additional data structure that allows subsumption testing in the hierarchy to be done in constant time. The three standard data structures for this purpose are sparse arrays, hash tables and bitcodes <ref> [4] </ref>. Which scheme is selected depends on storage costs. This use of multiple hierarchies is reminiscent of the data structure used in multi-level hierarchical retrieval [13]. <p> For example, the Method III retrieval scheme [11, 12] and associated enhancements <ref> [13, 4] </ref> can operate directly on this hierarchy. Graph matching will be much faster than before due to the compact nature of the graphs (see below). <p> That is, the first stage of most subgraph-isomorphism tests [1] in which one finds which nodes could bind (as "candidates") to other nodes can be performed by simply reading off correspondences from the hierarchy, or comparing bit encodings <ref> [4] </ref>. The same abstraction mechanism that goes from nodes to relations to graphs can be taken one step further to facilitate the storage and retrieval of nested-context conceptual graphs. A graph will point to nested-graphs in which it serves as a context.
Reference: [5] <author> R. Elmasri and S.B. Navathe. </author> <title> Fundamentals of Database Systems. </title> <address> Benjamin/Cummings, Redwood City, California, 2 edition, </address> <year> 1994. </year>
Reference-contexts: In particular, conceptual graphs can be used to store complex relational database queries for faster processing in the future, much in the same way as views <ref> [5] </ref> do currently.
Reference: [6] <author> S. Fahlman. </author> <title> NETL: A System for Representing and Using Real-World Knowledge. </title> <publisher> MIT Press, </publisher> <address> Massachusetts, </address> <year> 1979. </year>
Reference-contexts: UDS also incorporates ideas from the original universal graph method [11] proposed by us in 1984 and the universal relational model [19, 22]. Here we add some new twists that take advantage of a better understanding of the relationship between conceptual graphs, relational databases and marker-passing semantic networks <ref> [9, 6] </ref>.
Reference: [7] <author> C.L. Forgy. </author> <title> Rete: A fast algorithm for the many pattern/many object patern match problem. </title> <journal> Artificial Intelligence, </journal> <volume> 19(1) </volume> <pages> 17-37, </pages> <year> 1982. </year>
Reference-contexts: As it turns out, due to the relation-based perspective of UDS the following ideas from the RETE algorithm <ref> [7, 17] </ref> can be exploited with little adjustment to UDS as defined above: * The firing of an individual operator does not affect the current state radically. * If an operator did not match in the previous cycle it most likely will not match in the current cycle. * On each
Reference: [8] <author> J. Gould and R. Levinson. </author> <title> Experience-based adaptive search. </title> <editor> In R. Michalski and G. Tecuci, editors, </editor> <booktitle> Machine Learning:A Multi-Strategy Approach, </booktitle> <volume> volume 4, </volume> <pages> pages 579-604. </pages> <publisher> Morgan Kauffman, </publisher> <year> 1994. </year>
Reference-contexts: This information is used to reason by analogy with the past, perhaps by retrieving the previous situations themselves. Other systems such as Morph <ref> [8, 15] </ref> construct an evaluation function that is a combination of the weights of the most-specific patterns that match a state. Both types of reasoning require matching a large database of patterns against the current state. Methods III-V were designed exactly with this operation in mind.
Reference: [9] <author> J.A. Hendler. </author> <title> Massively-parallel marker-passing in semantic networks. </title> <editor> In Fritz Lehmann, editor, </editor> <booktitle> Semantic Networks in Artificial Intelligence, </booktitle> <pages> pages 277-292. </pages> <publisher> Pergamon Press, </publisher> <year> 1992. </year>
Reference-contexts: UDS also incorporates ideas from the original universal graph method [11] proposed by us in 1984 and the universal relational model [19, 22]. Here we add some new twists that take advantage of a better understanding of the relationship between conceptual graphs, relational databases and marker-passing semantic networks <ref> [9, 6] </ref>.
Reference: [10] <author> R. E. Korf. </author> <title> Planning as search. </title> <journal> Artificial Intelligence, </journal> <year> 1987. </year>
Reference-contexts: We now show how all state space search problems as they are normally formalized <ref> [10] </ref> can be viewed as relation-based transformations over hypergraphs (which are a special case of conceptual graphs). In the next section we show how this relation-based view can allow these problems to be monitored incrementally and efficiently.
Reference: [11] <author> R. Levinson. </author> <title> A self-organizing retrieval system for graphs. </title> <booktitle> In AAAI-84, </booktitle> <pages> pages 203-206. </pages> <publisher> Morgan Kaufman, </publisher> <year> 1984. </year>
Reference-contexts: The major difference is that the node descriptor hierarchy is being replaced by a relation hierarchy that better facilitates CG matching by incorporating the power of a relational database. UDS also incorporates ideas from the original universal graph method <ref> [11] </ref> proposed by us in 1984 and the universal relational model [19, 22]. Here we add some new twists that take advantage of a better understanding of the relationship between conceptual graphs, relational databases and marker-passing semantic networks [9, 6]. <p> For example, the Method III retrieval scheme <ref> [11, 12] </ref> and associated enhancements [13, 4] can operate directly on this hierarchy. Graph matching will be much faster than before due to the compact nature of the graphs (see below). <p> be determined by simply checking that the fields on which the relations are joined correspond (given that the endpoints of the edges are known to correspond). 5 Method V retrieval algorithm Method V retrieval is a previously unpublished algorithm that is designed to have the simplicity of Method III retrieval <ref> [11] </ref> coupled with the benefits of Method IV. We discuss it here since it can be used to even further enhance the efficiency of retrieval over the conceptual graph hierarchy.
Reference: [12] <author> R. Levinson. </author> <title> Pattern associativity and the retrieval of semantic networks. Computers and Mathematics with Applications, </title> <booktitle> 23(6-9):573-600, 1992. Part 2 of Special Issue on Semantic Networks in Artificial Intelligence, </booktitle> <editor> Fritz Lehmann, editor. </editor> <booktitle> Also reprinted on pages 573-600 of the book, Semantic Networks in Artificial Intelligence, </booktitle> <editor> Fritz Lehmann, editor, </editor> <publisher> Pergammon Press, </publisher> <year> 1992. </year>
Reference-contexts: For example, the Method III retrieval scheme <ref> [11, 12] </ref> and associated enhancements [13, 4] can operate directly on this hierarchy. Graph matching will be much faster than before due to the compact nature of the graphs (see below). <p> We discuss it here since it can be used to even further enhance the efficiency of retrieval over the conceptual graph hierarchy. Method IV <ref> [12, 13] </ref> introduced the notion of "node descriptors" which are more specific descriptions of nodes in graphs that support matching due to their specificity much in the way that relation nodes do so in the above discussion.
Reference: [13] <author> R. Levinson and G. Ellis. </author> <title> Multilevel hierarchical retrieval. </title> <journal> Knowledge-Based Systems, </journal> <volume> 5(3) </volume> <pages> 233-244, </pages> <month> September </month> <year> 1992. </year> <note> Special Issue on Conceptual Graphs. </note>
Reference-contexts: The three standard data structures for this purpose are sparse arrays, hash tables and bitcodes [4]. Which scheme is selected depends on storage costs. This use of multiple hierarchies is reminiscent of the data structure used in multi-level hierarchical retrieval <ref> [13] </ref>. The major difference is that the node descriptor hierarchy is being replaced by a relation hierarchy that better facilitates CG matching by incorporating the power of a relational database. <p> For example, the Method III retrieval scheme [11, 12] and associated enhancements <ref> [13, 4] </ref> can operate directly on this hierarchy. Graph matching will be much faster than before due to the compact nature of the graphs (see below). <p> We discuss it here since it can be used to even further enhance the efficiency of retrieval over the conceptual graph hierarchy. Method IV <ref> [12, 13] </ref> introduced the notion of "node descriptors" which are more specific descriptions of nodes in graphs that support matching due to their specificity much in the way that relation nodes do so in the above discussion.
Reference: [14] <author> R. Levinson and K. Karplus. </author> <title> Graph-isomorphism and experience-based planning. </title> <editor> In D. Sub-ramaniam, editor, </editor> <booktitle> Proceedings of Workshop on Knowledge Compilation and Speed-Up Learning, </booktitle> <address> Amherst, MA., </address> <month> June </month> <year> 1993. </year>
Reference-contexts: To reach a definition of generic search problem we consider notions of domain objects, static relations, dynamic relations, variables and bindings. The framework is inspired by Peirce's existential graphs [18], conceptual graphs, and our own work in experience-based planning <ref> [14] </ref>. The following is a description of the components of a search problem, with running examples taken from Tic-Tac-Toe 4 and Towers-of-Hanoi on three disks: 5 * Each domain will have a finite set of domain objects. In Tic-Tac-Toe the objects will be squares fS1,S2,S3,S4,S5,S6,S7,S8,S9g and pieces fX,O,B (for blank)g.
Reference: [15] <author> R. Levinson and R. Snyder. </author> <title> Adaptive pattern oriented chess. </title> <booktitle> In Proceedings of AAAI-91, </booktitle> <pages> pages 601-605. </pages> <address> Morgan-Kaufman, </address> <year> 1991. </year>
Reference-contexts: This information is used to reason by analogy with the past, perhaps by retrieving the previous situations themselves. Other systems such as Morph <ref> [8, 15] </ref> construct an evaluation function that is a combination of the weights of the most-specific patterns that match a state. Both types of reasoning require matching a large database of patterns against the current state. Methods III-V were designed exactly with this operation in mind.
Reference: [16] <author> R.A. Levinson. </author> <title> Exploiting the physics of state-space search. </title> <booktitle> In Proceedings of AAAI Symposium on Games:Planning and Learning, </booktitle> <pages> pages 157-165. </pages> <publisher> AAAI Press, </publisher> <year> 1993. </year>
Reference-contexts: The conclusion is significant, however, in that it suggests the potential for graph-theoretic analysis of the rules of a domain and ensuing experience for uncovering powerful heuristics and decision-making strategies. <ref> [16] </ref> It also suggests that state-space search can be monitored in a uniform manner, we take up this topic in the next section. 7 Monitoring state-space search incrementally using UDS To claim universality for UDS we must show that it is an effective monitor and executor of the specifications of any <p> Such savings due to incrementality should provide great benefits in most inference settings. 9 Support for machine learning Not only does UDS support retrieval, problem-space monitoring and pattern-matching, it also provides a structure that is highly convenient for developing machine learning algorithms for learning evaluation functions <ref> [16] </ref>. The multi-level hierarchical view of UDS shows directly how nodes are combined into relations and in turn how relations are combined into conceptual graphs. This hierarchical decomposition into wholes-and-parts is also fundamental in machine learning. <p> The table for this relation will sit below (in the CG hierarchy) the tables for the relations it is composed of. The APSII domain-independent game-playing system <ref> [16] </ref> uses UDS to evaluate a BETWEEN-KING-ATTACKER tuple, say (10,11,12,br,wp) as follows: 14 9. Support for machine learning MONITORING AND EXECUTION TIME FOR VARIOUS DOMAINS SINGLE AGENT GAMES (IN MOVES TAKEN): TOWERS-OF-HANOI 100 Turns 500 Turns (With Game Restarts) -------- --------- total | ave total | ave (min:secs).
Reference: [17] <author> D. P. Miranker. </author> <title> Treat: A better match algorithm for ai production systems. </title> <booktitle> In Proceedings of AAAI-87, </booktitle> <pages> pages 42-47, </pages> <year> 1987. </year>
Reference-contexts: As it turns out, due to the relation-based perspective of UDS the following ideas from the RETE algorithm <ref> [7, 17] </ref> can be exploited with little adjustment to UDS as defined above: * The firing of an individual operator does not affect the current state radically. * If an operator did not match in the previous cycle it most likely will not match in the current cycle. * On each
Reference: [18] <author> D.D. Roberts. </author> <title> The existential graphs. </title> <booktitle> In Semantic Networks in Artificial Intelligence, </booktitle> <pages> pages 639-664. Roberts, </pages> <year> 1992. </year>
Reference-contexts: In the next section we show how this relation-based view can allow these problems to be monitored incrementally and efficiently. To reach a definition of generic search problem we consider notions of domain objects, static relations, dynamic relations, variables and bindings. The framework is inspired by Peirce's existential graphs <ref> [18] </ref>, conceptual graphs, and our own work in experience-based planning [14]. The following is a description of the components of a search problem, with running examples taken from Tic-Tac-Toe 4 and Towers-of-Hanoi on three disks: 5 * Each domain will have a finite set of domain objects.
Reference: [19] <author> E. Sciore. </author> <title> A complete axiomatization for join dependencies. </title> <journal> JACM, </journal> <volume> 29(2) </volume> <pages> 373-393, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: UDS also incorporates ideas from the original universal graph method [11] proposed by us in 1984 and the universal relational model <ref> [19, 22] </ref>. Here we add some new twists that take advantage of a better understanding of the relationship between conceptual graphs, relational databases and marker-passing semantic networks [9, 6].
Reference: [20] <author> J. F. Sowa. </author> <title> Conceptual Structures. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: This small additional cost is outweighed by the benefits gained due to more efficient matching in the conceptual graphs hierarchy. 4 Compaction of Conceptual Graphs The standard diagrammatic representation of conceptual graphs <ref> [20] </ref> makes these graphs appear to have more complexity than they actually do. If one were to implement a conceptual graph based on the diagrammatic representation the costs associated with storage and matching would be much higher than they need to be.
Reference: [21] <author> P. Suppes. </author> <title> Models of data. </title> <booktitle> In Logic, Methodology and Philosophy of Science, </booktitle> <pages> pages 252-261. </pages> <address> Stanford, East Lansing, </address> <year> 1962. </year>
Reference: [22] <author> J.D. Ullman. </author> <title> The u.r. strikes back. </title> <booktitle> In Proceedings of the ACM SIGACT-SIGMOD Symposium on Principles of Database Systems, </booktitle> <pages> pages 10-22, </pages> <year> 1982. </year>
Reference-contexts: UDS also incorporates ideas from the original universal graph method [11] proposed by us in 1984 and the universal relational model <ref> [19, 22] </ref>. Here we add some new twists that take advantage of a better understanding of the relationship between conceptual graphs, relational databases and marker-passing semantic networks [9, 6].
Reference: [23] <author> S. Watanabe. </author> <title> Pattern Recognition:Human and Mechanical. </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: This hierarchical decomposition into wholes-and-parts is also fundamental in machine learning. Much of the work in neural networks, statistics and pattern recognition deals directly with "how" the values of parts combine to create the value of the whole. Such methods include gradient-descent, linear-regression and nearest neighbor algorithms <ref> [23] </ref>. UDS gives one the capability of employing these methods to produce a combining rule for each decomposition as one traverses the hierarchy. For example, in chess one might like to determine the value of having a piece between the king and an attacking piece.
References-found: 24

