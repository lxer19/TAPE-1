URL: http://www.cse.ogi.edu/~walidt/docs/logic/ML-notes.ps.gz
Refering-URL: http://www.cse.ogi.edu/~walidt/docs/logic/
Root-URL: http://www.cse.ogi.edu
Email: moggi@disi.unige.it  
Title: Metalanguages and Applications  
Author: Eugenio Moggi 
Address: Dodecaneso 35, 16146 Genova, Italy  
Affiliation: DISI, Univ. of Genova v.  
Abstract-found: 0
Intro-found: 1
Reference: [CM93] <author> P. Cenciarelli and E. Moggi. </author> <title> A syntactic approach to modularity in deno-tational semantics. </title> <booktitle> In Proceedings of the Conference on Category Theory and Computer Science, </booktitle> <address> Amsterdam, </address> <month> Sept. </month> <year> 1993, 1993. </year> <type> CWI Tech. Report. </type>
Reference-contexts: We will discuss how the monadic approach can help in structuring the translation from P L to M L by the introduction of auxiliary notation (see [Mos90a, Mog91]) transl - M L () transl - M L and in incrementally defining the semantics of auxiliary notation (see <ref> [CM93] </ref>) P L transl - M L ( n ) transl - : : : transl - M L ( 0 ) transl - M L Remark 4.1 The metalanguages we consider can be described in terms of LF-signatures.
Reference: [CP88] <author> T. Coquand and C. Paulin. </author> <title> Inductively defined types. </title> <booktitle> In Conference on Computer Logic, volume 417 of LNCS. </booktitle> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: M; n) axioms X: T ype; x: X; f : (X ! X):f 0 (x) = x X: T ype; x: X; f : (X ! X); h: (N ! X); n: N: 22 Remark 4.4 there are stronger axiomatizations of natural numbers (and other types) as inductive types (see <ref> [CP88] </ref>), which introduce also additional conversion rules on pseudo-terms: types NNO N : T ype operations zero 0: N successor s: N ! N induction R: P : N ! T ype:P (0); (n: N:P (n) ! P (sn)) ! n: N:P (n) axioms P : N ! T ype; x:
Reference: [CP92] <editor> R.L. Crole and A.M. Pitts. </editor> <title> New foundations for fixpoint computations: Fix hyperdoctrines and the fix logic. </title> <journal> Information and Computation, </journal> <volume> 98, </volume> <year> 1992. </year>
Reference-contexts: In fact, most metalanguages for denotational semantics avoid the problem by working with a restricted form of type expressions, which are guaranteed to have a corresponding functor. At this point we can introduce some constructions with universal properties, whose existence follows from algebraic compactness: the fix-type (introduce by <ref> [CP92] </ref>) and a uniform fix-point combinator (see [Sim92]). 5.4.1 The fix-type The monad L extends to an endofunctor L 0 on the category C L of predomains and partial maps, namely L 0 f = Lf ; Y ; Y whenever f : X ! LY . <p> Let L : L () ! be the free L 0 -algebra in C L , then one can prove that it is also the free L-algebra in C. In fact, <ref> [CP92] </ref> introduces the equivalent (but apparently weaker) notion of fix-type, which is enough for defining a uniform fix-point combinator and prove the consistent algebraic compactness of C L and C L (see [Sim92]). * LF-signature extension for the fix-type types fix-type : P dom operations : L ! !: we write <p> When LX + 1 the initial L-algebra exists, but s has no fix-points. 5.4.2 The fix-point combinator Following <ref> [CP92] </ref>, we use the fix-type to define a canonical fix-point for a map f : X ! X over a domain X, namely fix (f ) = f fl (!), where f fl : ! X is the unique map s.t.
Reference: [Fre90] <author> P. Freyd. </author> <title> Recursive types reduced to inductive types. </title> <editor> In J. Mitchell, editor, </editor> <booktitle> Proc. 5th Symposium in Logic in Computer Science, </booktitle> <address> Philadelphia, 1990. </address> <publisher> I.E.E.E. Computer Society. </publisher>
Reference-contexts: The more traditional approach to recursive definitions works in the context of Cpo-categories (see [SP82, Ten91]). More recently Freyd has identified algebraic compactness as the general abstract property to give semantics to recursive definitions (see <ref> [Fre90, Fre92] </ref>).
Reference: [Fre92] <author> P. Freyd. </author> <title> Algebraically complete categories. </title> <editor> In A. Carboni, M.C. Pedic-chio, and G. Rosolini, editors, </editor> <booktitle> Category Theory '90, volume 1144 of Lecture Notes in Mathematics, </booktitle> <address> Como, 1992. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: and the predicative uni verses T ype i ; * axioms for lifting as the classifier of partial computable functions, at this point we introduce the derived notion of partial map, domain and strict map; * axioms asserting that the category of predomains and partial maps is algebraically compact (see <ref> [Fre92] </ref>), from which one derives the existence of a fix-type and a unique uniform fix-point combinator. <p> The more traditional approach to recursive definitions works in the context of Cpo-categories (see [SP82, Ten91]). More recently Freyd has identified algebraic compactness as the general abstract property to give semantics to recursive definitions (see <ref> [Fre90, Fre92] </ref>).
Reference: [Geu92] <author> H. </author> <title> Geuvers. The church-rosser property for fi-reduction in typed lambda calculi. </title> <editor> In A. Scedrov, editor, </editor> <booktitle> Proc. 7th Symposium in Logic in Computer Science, </booktitle> <address> Santa Cruz, 1992. </address> <publisher> I.E.E.E. Computer Society. </publisher>
Reference-contexts: Remark 3.1 The meta-theory of LF is rather delicate because of the (conv) rule and the failure of the Church-Rosser property for fi-reduction on pseudo-terms, anyway one can prove the following properties (see <ref> [HHP87, Geu92, Luo94] </ref>): * it is decidable whether ` M : A is derivable * if ` M i : A (for i = 1; 2) is derivable, then M 1 = fi M 2 is decidable.
Reference: [Gor79] <author> M.J.C. Gordon. </author> <title> The Denotational Description of Programming Languages. </title> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference-contexts: for translating specification languages; - M L may be chosen as the internal language for a class of categories (e.g. cartesian closed or order-enriched categories) or for a specific semantic category (e.g. the category of sets or cpos). * to use M L for hiding details of semantic categories (see <ref> [Gor79] </ref>).
Reference: [GS89] <author> C. Gunter and D.S. Scott. </author> <title> Semantic domains. </title> <type> Technical Report MS-CIS-89-16, </type> <institution> Dept. of Comp. and Inf. Science, Univ. of Pennsylvania, </institution> <year> 1989. </year> <note> to appear in North Holland Handbook of Theoretical Computer Science. </note>
Reference-contexts: One could give further examples (in the category of cpos) based on the denotational semantics for various programming languages (see <ref> [Sch86, GS89, Mos89] </ref>). To exemplify the use of computational types, for each of the programming languages introduced in Section 1 we define a translation into a metalanguage M L T () with computational types, for a suitable choice of , and indicate a possible interpretation for computational types and .
Reference: [GW94] <author> H. Geuvers and B. Werner. </author> <title> On the church-rosser property for expressive type systems and its consequences for their metatheory. </title> <editor> In S. Abramsky, editor, </editor> <booktitle> Proc. 9th Symposium in Logic in Computer Science, </booktitle> <address> Paris, 1994. </address> <publisher> I.E.E.E. Computer Society. </publisher>
Reference-contexts: Remark 3.2 Because of the (conv) rule one may have different derivations of the same judgement, therefore the interpretation of a judgement cannot be defined by induction on the derivation. In any case, for defining the interpretation it is better to work with an equivalent semantic system (see <ref> [GW94] </ref>), in which one has also judgements of the form ` M 1 = M 2 : A.
Reference: [HHP87] <author> R. Harper, F. Honsell, and G. Plotkin. </author> <title> A framework for defining logics. </title> <editor> In R. Constable, editor, </editor> <booktitle> Proc. 2th Symposium in Logic in Computer Science, </booktitle> <address> Ithaca, NY, 1987. </address> <publisher> I.E.E.E. Computer Society. </publisher>
Reference-contexts: Remark 3.1 The meta-theory of LF is rather delicate because of the (conv) rule and the failure of the Church-Rosser property for fi-reduction on pseudo-terms, anyway one can prove the following properties (see <ref> [HHP87, Geu92, Luo94] </ref>): * it is decidable whether ` M : A is derivable * if ` M i : A (for i = 1; 2) is derivable, then M 1 = fi M 2 is decidable. <p> X 2 : T:Exp (X 1 )X 2 ); Exp (X 1 ) ! Exp (X 2 ) The correspondence between the syntax of the functional language and the LF-signature fun is expressed by the following adequacy result (more examples of encodings and similar adequacy results can be found in <ref> [HHP87] </ref>).
Reference: [Luo94] <author> Z. Luo. </author> <title> Computation and Reasoning: A Type Theory for Computer Science. </title> <booktitle> International Series of Monographs on Computer Science. </booktitle> <publisher> Oxford University Press, </publisher> <year> 1994. </year>
Reference-contexts: Remark 3.1 The meta-theory of LF is rather delicate because of the (conv) rule and the failure of the Church-Rosser property for fi-reduction on pseudo-terms, anyway one can prove the following properties (see <ref> [HHP87, Geu92, Luo94] </ref>): * it is decidable whether ` M : A is derivable * if ` M i : A (for i = 1; 2) is derivable, then M 1 = fi M 2 is decidable.
Reference: [MC88] <author> A.R. Meyer and S.S. Cosmodakis. </author> <title> Semantic paradigms: </title> <booktitle> Notes for an invited lecture. In 3rd LICS Conf. IEEE, </booktitle> <year> 1988. </year>
Reference-contexts: Remark 2.8 A broader and deeper discussion on "good fit criteria" between operational and denotational semantics can be found in <ref> [MC88] </ref>. 2.3 Equational calculi A simple way to prove observational equivalence is to identify inference rules which are admissible w.r.t. denotational equivalence, and use them to derive formally ` e 1 = e 2 : Exp [t ].
Reference: [Mog91] <author> E. Moggi. </author> <title> Notions of computation and monads. </title> <journal> Information and Computation, </journal> <volume> 93(1), </volume> <year> 1991. </year>
Reference-contexts: We will discuss how the monadic approach can help in structuring the translation from P L to M L by the introduction of auxiliary notation (see <ref> [Mos90a, Mog91] </ref>) transl - M L () transl - M L and in incrementally defining the semantics of auxiliary notation (see [CM93]) P L transl - M L ( n ) transl - : : : transl - M L ( 0 ) transl - M L Remark 4.1 The metalanguages <p> In [Mos90b] this problem is identified very clearly, and it is stressed how the use of auxiliary notation may help in making semantic definitions more reusable. <ref> [Mog91] </ref> identifies monads as an important structuring device for denotational semantics (but not for operational semantics!).
Reference: [Mos89] <author> P. Mosses. </author> <title> Denotational semantics. </title> <type> Technical Report DAIMI-PB-276, </type> <institution> CS Dept., Aarhus University, </institution> <year> 1989. </year> <note> to appear in North Holland Handbook of Theoretical Computer Science. </note>
Reference-contexts: One could give further examples (in the category of cpos) based on the denotational semantics for various programming languages (see <ref> [Sch86, GS89, Mos89] </ref>). To exemplify the use of computational types, for each of the programming languages introduced in Section 1 we define a translation into a metalanguage M L T () with computational types, for a suitable choice of , and indicate a possible interpretation for computational types and .
Reference: [Mos90a] <author> P. Mosses. </author> <title> Action Semantics. </title> <booktitle> Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <year> 1990. </year> <month> 47 </month>
Reference-contexts: We will discuss how the monadic approach can help in structuring the translation from P L to M L by the introduction of auxiliary notation (see <ref> [Mos90a, Mog91] </ref>) transl - M L () transl - M L and in incrementally defining the semantics of auxiliary notation (see [CM93]) P L transl - M L ( n ) transl - : : : transl - M L ( 0 ) transl - M L Remark 4.1 The metalanguages
Reference: [Mos90b] <author> P. Mosses. </author> <title> Denotational semantics. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science. </booktitle> <publisher> North Holland, </publisher> <year> 1990. </year>
Reference-contexts: The problem remains even when the semantics is given via translation in a typed lambda-calculus (like the one introduce so far): one would keep redefining the translation of the functional part. In <ref> [Mos90b] </ref> this problem is identified very clearly, and it is stressed how the use of auxiliary notation may help in making semantic definitions more reusable. [Mog91] identifies monads as an important structuring device for denotational semantics (but not for operational semantics!).
Reference: [Sch86] <author> D.A. Schmidt. </author> <title> Denotational Semantics: a Methodology for Language Development. </title> <publisher> Allyn & Bacon, </publisher> <year> 1986. </year>
Reference-contexts: One could give further examples (in the category of cpos) based on the denotational semantics for various programming languages (see <ref> [Sch86, GS89, Mos89] </ref>). To exemplify the use of computational types, for each of the programming languages introduced in Section 1 we define a translation into a metalanguage M L T () with computational types, for a suitable choice of , and indicate a possible interpretation for computational types and .
Reference: [Sco93] <author> D.S. Scott. </author> <title> A type-theoretic alternative to CUCH, </title> <journal> ISWIM, OWHY. Theoretical Computer Science, </journal> <volume> 121, </volume> <year> 1993. </year>
Reference-contexts: The general idea is to define the denotational semantics of a programming language P L by translating it into a typed metalanguage M L. The idea is as old as denotational semantics (see <ref> [Sco93] </ref>), so the main issue is whether it can be made into a viable technique capable of dealing with complex programming languages. <p> From ADT we take equational reasoning principles, which are valid in many categories used in Denotational Semantics, such as the category of cpos. We have not taken the more traditional approach of LCF (see <ref> [Sco93] </ref>), in which predomains come equipped with a partial order, because in some semantic categories (e.g. complete extensional PERs and effective morphisms) the order structure is not the most important one, while in others (e.g. in dI-domains and stable functions) some of the LCF axioms fail.
Reference: [Sim92] <author> A.K. Simpson. </author> <title> Recursive types in kleisli categories. </title> <note> available via FTP from theory.doc.ic.ac.uk, </note> <year> 1992. </year>
Reference-contexts: At this point we can introduce some constructions with universal properties, whose existence follows from algebraic compactness: the fix-type (introduce by [CP92]) and a uniform fix-point combinator (see <ref> [Sim92] </ref>). 5.4.1 The fix-type The monad L extends to an endofunctor L 0 on the category C L of predomains and partial maps, namely L 0 f = Lf ; Y ; Y whenever f : X ! LY . <p> In fact, [CP92] introduces the equivalent (but apparently weaker) notion of fix-type, which is enough for defining a uniform fix-point combinator and prove the consistent algebraic compactness of C L and C L (see <ref> [Sim92] </ref>). * LF-signature extension for the fix-type types fix-type : P dom operations : L ! !: we write ff y for I L (X; ff), 0 axioms :1 X: P dom; ff: (LX ! X); c: L:ff y (c) = ff (L (ff y )c) (c: L:f (c) = ff <p> x: F:( 1 x) = x F : Endo L ; x: F (F ): 1 (x) = x special F : Endo L :fix (f : F ! L (F ):(L) ffi (F f) ffi 1 ) = Remark 5.12 The definition of special invariant object is taken from <ref> [Sim92] </ref> (which differs from Freyd's definition). In the presence of a fix-type, one can prove that for any endofunctor F over C L an isomorphism : F X ! X is a free F -algebra (a global property) iff it is a special invariant object (a local property).
Reference: [SP82] <author> M. Smyth and G. Plotkin. </author> <title> The category-theoretic solution of recursive domain equations. </title> <journal> SIAM Journal of Computing, </journal> <volume> 11, </volume> <year> 1982. </year>
Reference-contexts: Recursive definitions comes in two forms: x = f (x) where f is a function on a domain, or X ~ = F X where F is a type constructor. The more traditional approach to recursive definitions works in the context of Cpo-categories (see <ref> [SP82, Ten91] </ref>). More recently Freyd has identified algebraic compactness as the general abstract property to give semantics to recursive definitions (see [Fre90, Fre92]). <p> Cpo-functors, where F : C ? ! C ? is a Cpo-functor iff its action on morphisms is given by continuous maps F : (LY ) X ! L (F Y ) F X . Proof This follows from a general result on Cpo-categories (see <ref> [SP82] </ref>). <p> In the presence of a fix-type, one can prove that for any endofunctor F over C L an isomorphism : F X ! X is a free F -algebra (a global property) iff it is a special invariant object (a local property). This correspondence generalizes the equivalence, established in <ref> [SP82] </ref>, between O-limits and !-colimits for an !-chain of embeddings. 5.5 Computational types revised Once the monad L has been introduced, it is natural to revise the axioms for computational types given in Section 4.2.
Reference: [Ten91] <author> R.D. Tennent. </author> <title> Semantics of Programming Languages. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year> <month> 48 </month>
Reference-contexts: Recursive definitions comes in two forms: x = f (x) where f is a function on a domain, or X ~ = F X where F is a type constructor. The more traditional approach to recursive definitions works in the context of Cpo-categories (see <ref> [SP82, Ten91] </ref>). More recently Freyd has identified algebraic compactness as the general abstract property to give semantics to recursive definitions (see [Fre90, Fre92]).
References-found: 21

