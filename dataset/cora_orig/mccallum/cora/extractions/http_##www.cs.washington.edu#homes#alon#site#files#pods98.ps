URL: http://www.cs.washington.edu/homes/alon/site/files/pods98.ps
Refering-URL: http://www.cs.washington.edu/homes/alon/site/PaperAbstractPresentation_bib32.html
Root-URL: 
Email: Daniela.Florescu@inria.fr  alon@cs.washington.edu  suciu@research.att.com  
Title: Query Containment for Conjunctive Queries With Regular Expressions  
Author: Daniela Florescu Alon Levy Dan Suciu 
Address: France  USA  USA  
Affiliation: INRIA,  Univ. of Washington,  AT&T Labs,  
Abstract: The management of semistructured data has recently received significant attention because of the need of several applications to model and query large volumes of irregular data. This paper considers the problem of query containment for a query language over semistructured data, StruQL 0 , that contains the essential feature common to all such languages, namely the ability to specify regular path expressions over the data. We show here that containment of StruQL 0 queries is decidable. First, we give a semantic criterion for StruQL 0 query containment: we show that it suffices to check containment on only finitely many canonical databases. Second, we give a syntactic criteria for query containment, based on a notion of query mappings, which extends containment mappings for conjunctive queries. Third, we consider a certain fragment of StruQL 0 , obtained by imposing restrictions on the regular path expressions, and show that query containment for this fragment of StruQL 0 is NP complete. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Serge Abiteboul. </author> <title> Querying semi-structured data. </title> <booktitle> In Proceedings of the ICDT, </booktitle> <year> 1997. </year>
Reference-contexts: 1 Introduction The management of semistructured data has recently received significant attention because of the need of several applications to model and query large volumes of irregular data <ref> [1, 5] </ref>. For example, researchers in biology store their data in structured files in various data exchange formats. Similarly, large volumes of online documentation, document collections and program libraries are available in structured files. Several characteristics distinguish semistructured data from relational and object-oriented data. <p> Furthermore, the schema of semistructured data, even if it exists, is often unknown in advance. Because of these characteristics, models of semistructured data have been shown to be very valuable for data integration <ref> [28, 1] </ref>. The focus of the research on semistructured data has been on formulating appropriate models for such data, and designing appropriate query languages (e.g., [12, 3, 6]).
Reference: [2] <author> Serge Abiteboul, Richard Hull, and Victor Vianu. </author> <title> Foundations of Databases. </title> <publisher> Addison Weseley, </publisher> <year> 1995. </year>
Reference-contexts: The fragment StruQL 0 can be briefly described as the union-free, negation-free subset of StruQL and therefore plays a similar role for StruQL as conjunctive queries for the relational calculus <ref> [2] </ref>. The language StruQL 0 allows expressing regular path expressions over attributes in a graph and permits arc variables that range over attribute names. <p> We construct from that a canonical database which contradicts the assumption. Since u 2 Q (DB), there exists a substitution 2 A conjunctive query is a First Order Logic formula which is conjunction of positive atomic literals, preceeded by some exis tentail quantifier. See <ref> [2] </ref>. ' : Q ! DB, s.t. '( X) = u.
Reference: [3] <author> Serge Abiteboul, Dallan Quass, Jason McHugh, Jennifer Widom, and Janet Wiener. </author> <title> The Lorel query language for semistructured data, </title> <note> 1996. Manuscript available from http://www-db.stanford.edu/lore/. </note>
Reference-contexts: Because of these characteristics, models of semistructured data have been shown to be very valuable for data integration [28, 1]. The focus of the research on semistructured data has been on formulating appropriate models for such data, and designing appropriate query languages (e.g., <ref> [12, 3, 6] </ref>). The data model that has been generally adopted is based on labeled directed graphs, where nodes correspond to objects, and the labels on the edges correspond to attributes. <p> Ignoring the restructuring capabilities of languages for querying semistructured data, StruQL 0 is more expressive than UnQL [6] 1 , and is equivalent to a certain fragment of Lorel <ref> [3] </ref>. Considering the restructuring capabilities, the full StruQL language is more expressive than both UnQL and Lorel: however, we do not discuss the restructuring aspects in this paper. Furthermore, StruQL 0 is a subset of datalog with a limited yet interesting form of recursion.
Reference: [4] <author> Alfred Aho, Yehoshua Sagiv, and Jeffrey D. Ull-man. </author> <title> Equivalence of relational expressions. </title> <journal> SIAM Journal of Computing, </journal> (8)2:218-246, 1979. 
Reference-contexts: In particular, StruQL 0 identifies a subset of datalog for which containment is decidable. Algorithms for query containment are important in several contexts. Originally, algorithms for containment have been developed in the context of query optimization <ref> [8, 29, 4] </ref>. For example, query containment can 1 UnQL does not handle oid equalities. be used to find redundant subgoals in a query and to test whether two formulations of a query are equivalent. <p> This is a surprising result, since it offers the first example of a query language with recursion for which checking containment of a pair of recursive queries is no harder than for a pair of conjunctive queries. Query containment for first order conjunctive queries is decidable <ref> [8, 29, 4] </ref>. Several works have considered the extension of containment algorithms for queries involving order [22, 34, 25, 37, 21], and queries over complex objects [26]. Queries in StruQL (and, hence, in StruQL 0 ) can be translated into datalog.
Reference: [5] <author> Peter Buneman. </author> <title> Semistructured data. </title> <booktitle> In Proceedings of the 16th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> Tucson, Arizona, </address> <pages> pages 117-121, </pages> <year> 1997. </year>
Reference-contexts: 1 Introduction The management of semistructured data has recently received significant attention because of the need of several applications to model and query large volumes of irregular data <ref> [1, 5] </ref>. For example, researchers in biology store their data in structured files in various data exchange formats. Similarly, large volumes of online documentation, document collections and program libraries are available in structured files. Several characteristics distinguish semistructured data from relational and object-oriented data.
Reference: [6] <author> Peter Buneman, Susan Davidson, Gerd Hillebrand, and Dan Suciu. </author> <title> A query language and optimization techniques for unstructured data. </title> <booktitle> In Proceedings of SIGMOD-96, </booktitle> <pages> pages 505-516, </pages> <year> 1996. </year>
Reference-contexts: Because of these characteristics, models of semistructured data have been shown to be very valuable for data integration [28, 1]. The focus of the research on semistructured data has been on formulating appropriate models for such data, and designing appropriate query languages (e.g., <ref> [12, 3, 6] </ref>). The data model that has been generally adopted is based on labeled directed graphs, where nodes correspond to objects, and the labels on the edges correspond to attributes. <p> The language StruQL 0 allows expressing regular path expressions over attributes in a graph and permits arc variables that range over attribute names. Ignoring the restructuring capabilities of languages for querying semistructured data, StruQL 0 is more expressive than UnQL <ref> [6] </ref> 1 , and is equivalent to a certain fragment of Lorel [3]. Considering the restructuring capabilities, the full StruQL language is more expressive than both UnQL and Lorel: however, we do not discuss the restructuring aspects in this paper.
Reference: [7] <author> Diego Calvanese, Giuseppe De Giacomo, and Mau-rizio Lenzerini. </author> <title> On the decidability of query containment under constraints. </title> <booktitle> In PODS, </booktitle> <year> 1998. </year> <note> (this volume). </note>
Reference-contexts: Their technique can be extended to show decidability of StruQL 0 query con tainment (see Remark 3.5): however, the resulting algorithm has non-elementary time complexity. Finally, we note that decidability for StruQL 0 query containment also follows from a result proven independently in <ref> [7] </ref>. This paper is organized as follows. We describe the data model and query language in Section 2, and define the query containment problem. We give the semantic criteria equivalent to query containment in Section 3, and show that containment is decidable.
Reference: [8] <author> A.K. Chandra and P.M. Merlin. </author> <title> Optimal implementation of conjunctive queries in relational databases. </title> <booktitle> In Proceedings of the Ninth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 77-90, </pages> <year> 1977. </year>
Reference-contexts: In particular, StruQL 0 identifies a subset of datalog for which containment is decidable. Algorithms for query containment are important in several contexts. Originally, algorithms for containment have been developed in the context of query optimization <ref> [8, 29, 4] </ref>. For example, query containment can 1 UnQL does not handle oid equalities. be used to find redundant subgoals in a query and to test whether two formulations of a query are equivalent. <p> This is a surprising result, since it offers the first example of a query language with recursion for which checking containment of a pair of recursive queries is no harder than for a pair of conjunctive queries. Query containment for first order conjunctive queries is decidable <ref> [8, 29, 4] </ref>. Several works have considered the extension of containment algorithms for queries involving order [22, 34, 25, 37, 21], and queries over complex objects [26]. Queries in StruQL (and, hence, in StruQL 0 ) can be translated into datalog. <p> Hence, from item 3, W Q must be included in one of those simple regular expressions: the latter can be checked in PTIME [27]. Finally, to prove NP-hardness, we reduce the containment problem for simple StruQL 0 queries to that of conjunctive queries, for which query containment is NP-complete <ref> [8] </ref>. 2 6 Conclusions We have discussed query containment for the query language StruQL 0 , consisting of conjunctive queries with regular path expressions, from two angles: a semantic angle, where we showed that query containment is equivalent to containment on certain canonical databases, and a syntactic angle, where we showed
Reference: [9] <author> Surajit Chaudhuri, Ravi Krishnamurthy, Spyros Potamianos, and Kyuseok Shim. </author> <title> Optimizing queries with materialized views. </title> <booktitle> In Proceedings of International Conference on Data Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: Also, query containment has been used to determine when queries are independent of updates to the database [25], rewriting queries using views <ref> [9, 23] </ref>, and maintenance of integrity constraints [21]. More recently, query containment, applied in the context of rewriting queries using views, have been used as a tool in data integration [24, 18, 33, 19]. We show here that containment of StruQL 0 queries is decidable.
Reference: [10] <author> Surajit Chaudhuri and Moshe Vardi. </author> <title> On the equivalence of recursive and nonrecursive datalog programs. </title> <booktitle> In The Proceedings of the Eleventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> San Diego, CA., </address> <pages> pages 55-66, </pages> <year> 1992. </year>
Reference-contexts: Shmueli [31] showed that containment of datalog programs is undecidable. Sa-giv [30] shows that containment is decidable for the weaker condition of uniform containment. All positive results for containment so far are restricted to the particular case when one of the datalog programs is non-recursive. Namely, Chaudhuri and Vardi <ref> [10] </ref> show that the equivalence of a recursive and a non-recursive dat-alog program is decidable in triple exponential time, and improve the complexity bounds for certain particular cases in [11]. <p> A remarkable positive result was shown by Cour-celle [14], who proved that any property expressible in monadic second order logic on the syntactic expansions of a datalog program is decidable. Chaudhuri and Vardi <ref> [10] </ref> show how to apply this result to prove that containment of a datalog program in a non-recursive datalog program is decidable. Their technique can be extended to show decidability of StruQL 0 query con tainment (see Remark 3.5): however, the resulting algorithm has non-elementary time complexity.
Reference: [11] <author> Surajit Chaudhuri and Moshe Vardi. </author> <title> On the complexity of equivalence between recursive and non-recursive datalog programs. </title> <booktitle> In The Proceedings of the Thirteenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 55-66, </pages> <year> 1994. </year>
Reference-contexts: Namely, Chaudhuri and Vardi [10] show that the equivalence of a recursive and a non-recursive dat-alog program is decidable in triple exponential time, and improve the complexity bounds for certain particular cases in <ref> [11] </ref>.
Reference: [12] <author> Sudarshan Chawathe, Hector Garcia-Molina, Joachim Hammer, Kelly Ireland, Yannis Papakonstantinou, Jef-frey Ullman, and Jennifer Widom. </author> <title> The TSIMMIS project: Integration of heterogenous information sources. </title> <booktitle> In proceedings of IPSJ, </booktitle> <address> Tokyo, Japan, </address> <month> Oc-tober </month> <year> 1994. </year>
Reference-contexts: Because of these characteristics, models of semistructured data have been shown to be very valuable for data integration [28, 1]. The focus of the research on semistructured data has been on formulating appropriate models for such data, and designing appropriate query languages (e.g., <ref> [12, 3, 6] </ref>). The data model that has been generally adopted is based on labeled directed graphs, where nodes correspond to objects, and the labels on the edges correspond to attributes.
Reference: [13] <author> Stavros Cosmadakis, Haim Gaifman, Paris Kanel-lakis, and Moshe Vardi. </author> <title> Decidable optimization problems for database logic programs. </title> <booktitle> In STOC, </booktitle> <pages> pages 477-490, </pages> <year> 1988. </year>
Reference-contexts: A related problem is the boundedness problem, asking whether a recursive datalog program is equivalent to some non-recursive one: undecidability is shown by Gaifman et al. [20] for general datalog programs, and by Vardi [35] for linear datalog programs, while decidability is shown by Cosmadakis et al. <ref> [13] </ref> for unary datalog programs, and by Wang [36] for other particular cases. Containment of bounded queries is of course decidable, but, in the context of StruQL 0 , we are mostly interested in unbounded queries.
Reference: [14] <author> B. Courcelle. </author> <title> Recursive queries and context-free graph grammars. </title> <journal> Theoretical Computer Science, </journal> <volume> 78 </volume> <pages> 217-244, </pages> <year> 1991. </year>
Reference-contexts: Containment of bounded queries is of course decidable, but, in the context of StruQL 0 , we are mostly interested in unbounded queries. A remarkable positive result was shown by Cour-celle <ref> [14] </ref>, who proved that any property expressible in monadic second order logic on the syntactic expansions of a datalog program is decidable. Chaudhuri and Vardi [10] show how to apply this result to prove that containment of a datalog program in a non-recursive datalog program is decidable. <p> The complexity of the algorithm following from the proof is high: triple exponential space. We will describe an exponential space algorithm in the next section. Remark 3.5 The (possible infinite) set of canonical databases for some query Q can be described by a context free graph grammar <ref> [14] </ref>. Moreover, one can show that any StruQL 0 query Q 0 can be expressed in monadic second order logic. Then, the containment Q Q 0 is equivalent to checking a certain formula in monadic second order logic on all graphs generated by a graph grammar: Courcelle [14] showed that this <p> free graph grammar <ref> [14] </ref>. Moreover, one can show that any StruQL 0 query Q 0 can be expressed in monadic second order logic. Then, the containment Q Q 0 is equivalent to checking a certain formula in monadic second order logic on all graphs generated by a graph grammar: Courcelle [14] showed that this problem is decidable. This implies Corollary 3.4. However the resulting algorithm has non-elementary complexity. 4 Query Containment and Query Mappings We give in this section a syntactic criteria for query containment, similar in spirit to query mappings for conjunctive queries.
Reference: [15] <author> Mary Fernandez, Daniela Florescu, Jaewoo Kang, Alon Levy, and Dan Suciu. </author> <title> Catching the boat with strudel: experience with a web-site management system. </title> <note> Submitted for publication, </note> <year> 1997. </year>
Reference-contexts: The restricted form described here actually captures a class of queries very frequently used in practice. Indeed, in the experience we had so far with the Strudel system <ref> [15] </ref>, all queries had regular expressions conforming to these restriction. Before giving the definition, we make the following convention: we abbreviate the regular expression fl as fl.
Reference: [16] <author> Mary Fernandez, Daniela Florescu, Jaewoo Kang, Alon Levy, and Dan Suciu. </author> <title> System demonstration strudel: A web-site management system. </title> <booktitle> In ACM SIGMOD Conference on Management of Data, </booktitle> <year> 1997. </year>
Reference-contexts: This paper considers the problem of query containment for a query language over semistructured data that contains the essential feature explained above. We consider the language StruQL 0 , a subset of the StruQL language implemented in the Strudel web-site management system <ref> [16, 17] </ref>. The fragment StruQL 0 can be briefly described as the union-free, negation-free subset of StruQL and therefore plays a similar role for StruQL as conjunctive queries for the relational calculus [2].
Reference: [17] <author> Mary Fernandez, Daniela Florescu, Alon Levy, and Dan Suciu. </author> <title> A query language for a web-site management system. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 26(3) </volume> <pages> 4-11, </pages> <month> September </month> <year> 1997. </year>
Reference-contexts: This paper considers the problem of query containment for a query language over semistructured data that contains the essential feature explained above. We consider the language StruQL 0 , a subset of the StruQL language implemented in the Strudel web-site management system <ref> [16, 17] </ref>. The fragment StruQL 0 can be briefly described as the union-free, negation-free subset of StruQL and therefore plays a similar role for StruQL as conjunctive queries for the relational calculus [2]. <p> Figure 1 contains an example of a graph database. In this paper we consider a subset StruQL 0 of the StruQL language <ref> [17] </ref>. Informally, we consider conjunctive queries with two distinct features. First, some of the conjuncts may describe regular path expressions over the edge labels in the graph. Second, some of the variables are arc variables, and range over the labels of edges in the graph.
Reference: [18] <author> Daniela Florescu, Louiqa Rashid, and Patrick Val-duriez. </author> <title> Answering queries using OQL view expressions. In Workshop on Materialized Views, </title> <booktitle> in cooperation with ACM SIGMOD, </booktitle> <address> Montreal, Canada, </address> <year> 1996. </year>
Reference-contexts: More recently, query containment, applied in the context of rewriting queries using views, have been used as a tool in data integration <ref> [24, 18, 33, 19] </ref>. We show here that containment of StruQL 0 queries is decidable. Specifically, we make the following contributions.
Reference: [19] <author> Marc Friedman and Dan Weld. </author> <title> Efficient execution of information gathering plans. </title> <booktitle> In Proceedings of the 15th International Joint Conference on Artificial Intelligence, </booktitle> <year> 1997. </year>
Reference-contexts: More recently, query containment, applied in the context of rewriting queries using views, have been used as a tool in data integration <ref> [24, 18, 33, 19] </ref>. We show here that containment of StruQL 0 queries is decidable. Specifically, we make the following contributions.
Reference: [20] <author> H. Gaifman, H. Mairson, Y. Sagiv, and M. Vardi. </author> <title> Undecidable optimization problems for database logic programs. </title> <journal> Journal of the ACM, </journal> <volume> 40(3) </volume> <pages> 683-713, </pages> <year> 1993. </year>
Reference-contexts: A related problem is the boundedness problem, asking whether a recursive datalog program is equivalent to some non-recursive one: undecidability is shown by Gaifman et al. <ref> [20] </ref> for general datalog programs, and by Vardi [35] for linear datalog programs, while decidability is shown by Cosmadakis et al. [13] for unary datalog programs, and by Wang [36] for other particular cases.
Reference: [21] <author> Ashish Gupta, Yehoshua Sagiv, Jeffrey D. Ullman, and Jennifer Widom. </author> <title> Constraint checking with partial information. </title> <booktitle> In Proceedings of the Thirteenth Symposium on Principles of Database Systems (PODS), </booktitle> <pages> pages 45-55, </pages> <year> 1994. </year>
Reference-contexts: Also, query containment has been used to determine when queries are independent of updates to the database [25], rewriting queries using views [9, 23], and maintenance of integrity constraints <ref> [21] </ref>. More recently, query containment, applied in the context of rewriting queries using views, have been used as a tool in data integration [24, 18, 33, 19]. We show here that containment of StruQL 0 queries is decidable. Specifically, we make the following contributions. <p> Query containment for first order conjunctive queries is decidable [8, 29, 4]. Several works have considered the extension of containment algorithms for queries involving order <ref> [22, 34, 25, 37, 21] </ref>, and queries over complex objects [26]. Queries in StruQL (and, hence, in StruQL 0 ) can be translated into datalog.
Reference: [22] <author> A. Klug. </author> <title> On conjunctive queries containing inequalities. </title> <journal> Journal of the ACM, </journal> <pages> pages 35(1): 146-160, </pages> <year> 1988. </year>
Reference-contexts: Query containment for first order conjunctive queries is decidable [8, 29, 4]. Several works have considered the extension of containment algorithms for queries involving order <ref> [22, 34, 25, 37, 21] </ref>, and queries over complex objects [26]. Queries in StruQL (and, hence, in StruQL 0 ) can be translated into datalog.
Reference: [23] <author> Alon Y. Levy, Alberto O. Mendelzon, Yehoshua Sagiv, and Divesh Srivastava. </author> <title> Answering queries using views. </title> <booktitle> In Proceedings of the 14th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> San Jose, CA, </address> <year> 1995. </year>
Reference-contexts: Also, query containment has been used to determine when queries are independent of updates to the database [25], rewriting queries using views <ref> [9, 23] </ref>, and maintenance of integrity constraints [21]. More recently, query containment, applied in the context of rewriting queries using views, have been used as a tool in data integration [24, 18, 33, 19]. We show here that containment of StruQL 0 queries is decidable.
Reference: [24] <author> Alon Y. Levy, Anand Rajaraman, and Joann J. Or-dille. </author> <title> Querying heterogeneous information sources using source descriptions. </title> <booktitle> In Proceedings of the 22nd VLDB Conference, </booktitle> <address> Bombay, India., </address> <year> 1996. </year>
Reference-contexts: More recently, query containment, applied in the context of rewriting queries using views, have been used as a tool in data integration <ref> [24, 18, 33, 19] </ref>. We show here that containment of StruQL 0 queries is decidable. Specifically, we make the following contributions.
Reference: [25] <author> Alon Y. Levy and Yehoshua Sagiv. </author> <title> Queries independent of updates. </title> <booktitle> In Proceedings of the 19th VLDB Conference, Dublin, Ireland, </booktitle> <pages> pages 171-181, </pages> <year> 1993. </year>
Reference-contexts: For example, query containment can 1 UnQL does not handle oid equalities. be used to find redundant subgoals in a query and to test whether two formulations of a query are equivalent. Also, query containment has been used to determine when queries are independent of updates to the database <ref> [25] </ref>, rewriting queries using views [9, 23], and maintenance of integrity constraints [21]. More recently, query containment, applied in the context of rewriting queries using views, have been used as a tool in data integration [24, 18, 33, 19]. We show here that containment of StruQL 0 queries is decidable. <p> Query containment for first order conjunctive queries is decidable [8, 29, 4]. Several works have considered the extension of containment algorithms for queries involving order <ref> [22, 34, 25, 37, 21] </ref>, and queries over complex objects [26]. Queries in StruQL (and, hence, in StruQL 0 ) can be translated into datalog.
Reference: [26] <author> Alon Y. Levy and Dan Suciu. </author> <title> Deciding containment for queries with complex objects and aggregations. </title> <booktitle> In Proceedings of the 16th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> Tucson, Arizona., </address> <year> 1997. </year>
Reference-contexts: Query containment for first order conjunctive queries is decidable [8, 29, 4]. Several works have considered the extension of containment algorithms for queries involving order [22, 34, 25, 37, 21], and queries over complex objects <ref> [26] </ref>. Queries in StruQL (and, hence, in StruQL 0 ) can be translated into datalog. Hence, our containment result for StruQL 0 is related to the problem of testing containment of datalog programs and, indirectly, to the more general problem of checking properties of datalog programs.
Reference: [27] <author> Tova Milo and Dan Suciu. </author> <title> Index structures for path expressions. </title> <note> In preparation, </note> <year> 1997. </year>
Reference-contexts: R R i . 4. Given two simple regular expressions R; R 0 , one can check in PTIME whether R R 0 <ref> [27] </ref>. Proof: (Sketch) To prove 1, let A; A 0 be the canonical automata for R; R 0 , and let fs 1 ; : : : ; s n g, fs 0 1 ; : : : ; s 0 be their sets of states. <p> Hence, from item 3, W Q must be included in one of those simple regular expressions: the latter can be checked in PTIME <ref> [27] </ref>.
Reference: [28] <author> Y. Papakonstantinou, S. Abiteboul, and H. Garcia-Molina. </author> <title> Object fusion in mediator systems. </title> <booktitle> In Proceedings of the 22nd VLDB Conference, </booktitle> <address> Bombay, India., </address> <year> 1996. </year>
Reference-contexts: Furthermore, the schema of semistructured data, even if it exists, is often unknown in advance. Because of these characteristics, models of semistructured data have been shown to be very valuable for data integration <ref> [28, 1] </ref>. The focus of the research on semistructured data has been on formulating appropriate models for such data, and designing appropriate query languages (e.g., [12, 3, 6]).
Reference: [29] <author> Y. Sagiv and M. Yannakakis. </author> <title> Equivalence among relational expressions with the union and difference operators. </title> <journal> Journal of the ACM, </journal> <volume> 27(4) </volume> <pages> 633-655, </pages> <year> 1981. </year>
Reference-contexts: In particular, StruQL 0 identifies a subset of datalog for which containment is decidable. Algorithms for query containment are important in several contexts. Originally, algorithms for containment have been developed in the context of query optimization <ref> [8, 29, 4] </ref>. For example, query containment can 1 UnQL does not handle oid equalities. be used to find redundant subgoals in a query and to test whether two formulations of a query are equivalent. <p> This is a surprising result, since it offers the first example of a query language with recursion for which checking containment of a pair of recursive queries is no harder than for a pair of conjunctive queries. Query containment for first order conjunctive queries is decidable <ref> [8, 29, 4] </ref>. Several works have considered the extension of containment algorithms for queries involving order [22, 34, 25, 37, 21], and queries over complex objects [26]. Queries in StruQL (and, hence, in StruQL 0 ) can be translated into datalog.
Reference: [30] <author> Yehoshua Sagiv. </author> <title> Optimizing datalog programs. </title> <editor> In Jack Minker, editor, </editor> <booktitle> Foundations of Deductive Databases and Logic Programming, </booktitle> <pages> pages 659-698. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1988. </year>
Reference-contexts: Hence, our containment result for StruQL 0 is related to the problem of testing containment of datalog programs and, indirectly, to the more general problem of checking properties of datalog programs. Shmueli [31] showed that containment of datalog programs is undecidable. Sa-giv <ref> [30] </ref> shows that containment is decidable for the weaker condition of uniform containment. All positive results for containment so far are restricted to the particular case when one of the datalog programs is non-recursive.
Reference: [31] <author> Oded Shmueli. </author> <title> Equivalence of datalog queries is undecidable. </title> <journal> Journal of Logic Programming, </journal> <volume> 15 </volume> <pages> 231-241, </pages> <year> 1993. </year>
Reference-contexts: Queries in StruQL (and, hence, in StruQL 0 ) can be translated into datalog. Hence, our containment result for StruQL 0 is related to the problem of testing containment of datalog programs and, indirectly, to the more general problem of checking properties of datalog programs. Shmueli <ref> [31] </ref> showed that containment of datalog programs is undecidable. Sa-giv [30] shows that containment is decidable for the weaker condition of uniform containment. All positive results for containment so far are restricted to the particular case when one of the datalog programs is non-recursive. <p> These features are the presence of regular path expressions in the query and the ability to query the schema via the arc variables. The queries we consider in this paper can be translated into datalog. The problem of query containment for datalog is known to be undecidable <ref> [31] </ref>, and none of the restricted cases for containment that have been considered in the literature apply to StruQL 0 . However, StruQL 0 is an interesting subset of datalog with a limited form of recursion for which we show that containment is decidable.
Reference: [32] <author> L. J. Stockmeyer and A.R. Meyer. </author> <title> Word problems requiring exponential time. </title> <booktitle> In 5th STOC, </booktitle> <pages> pages 1-9. </pages> <publisher> ACM, </publisher> <year> 1973. </year>
Reference-contexts: Also let W Q be the regular language encoding all canonical databases for Q. Then Q Q 0 iff W Q S Finally, we comment on the complexity of checking StruQL 0 query containment. It is known that containment of regular expressions is PSPACE complete <ref> [32] </ref>, hence StruQL 0 query containment is PSPACE hard. The algorithm resulting from Theorem 4.8 has exponen tial space complexity however.
Reference: [33] <author> Jeffrey D. Ullman. </author> <title> Information integration using logical views. </title> <booktitle> In Proceedings of the International Conference on Database Theory, </booktitle> <year> 1997. </year>
Reference-contexts: More recently, query containment, applied in the context of rewriting queries using views, have been used as a tool in data integration <ref> [24, 18, 33, 19] </ref>. We show here that containment of StruQL 0 queries is decidable. Specifically, we make the following contributions.
Reference: [34] <author> Ron van der Meyden. </author> <title> The complexity of querying indefinite data about linearly ordered domains. </title> <booktitle> In The Proceedings of the Eleventh ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <address> San Diego, CA., </address> <pages> pages 331-345, </pages> <year> 1992. </year>
Reference-contexts: Query containment for first order conjunctive queries is decidable [8, 29, 4]. Several works have considered the extension of containment algorithms for queries involving order <ref> [22, 34, 25, 37, 21] </ref>, and queries over complex objects [26]. Queries in StruQL (and, hence, in StruQL 0 ) can be translated into datalog.
Reference: [35] <author> Moshe Vardi. </author> <title> Decidability and undecidability results for boundedness of linear recursive queries. </title> <booktitle> In Proceedings of the ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems, </booktitle> <pages> pages 341-351, </pages> <year> 1988. </year>
Reference-contexts: A related problem is the boundedness problem, asking whether a recursive datalog program is equivalent to some non-recursive one: undecidability is shown by Gaifman et al. [20] for general datalog programs, and by Vardi <ref> [35] </ref> for linear datalog programs, while decidability is shown by Cosmadakis et al. [13] for unary datalog programs, and by Wang [36] for other particular cases. Containment of bounded queries is of course decidable, but, in the context of StruQL 0 , we are mostly interested in unbounded queries.
Reference: [36] <author> Ke Wang. </author> <title> Some positive results for boundedness of multiple recursive rules. </title> <booktitle> In Proceedings of the International Conference on Database Theory, </booktitle> <pages> pages 383-396, </pages> <year> 1995. </year>
Reference-contexts: boundedness problem, asking whether a recursive datalog program is equivalent to some non-recursive one: undecidability is shown by Gaifman et al. [20] for general datalog programs, and by Vardi [35] for linear datalog programs, while decidability is shown by Cosmadakis et al. [13] for unary datalog programs, and by Wang <ref> [36] </ref> for other particular cases. Containment of bounded queries is of course decidable, but, in the context of StruQL 0 , we are mostly interested in unbounded queries.
Reference: [37] <author> X. Zhang and M. Z. Ozsoyoglu. </author> <title> On efficient reasoning with implication constraints. </title> <booktitle> In Proceedings of the International Conference on Deductive and Object-Oriented Databases, </booktitle> <pages> pages 236-252, </pages> <year> 1993. </year>
Reference-contexts: Query containment for first order conjunctive queries is decidable [8, 29, 4]. Several works have considered the extension of containment algorithms for queries involving order <ref> [22, 34, 25, 37, 21] </ref>, and queries over complex objects [26]. Queries in StruQL (and, hence, in StruQL 0 ) can be translated into datalog.
References-found: 37

