URL: file://theory.lcs.mit.edu/pub/people/rosario/rsa.ps.Z
Refering-URL: http://theory.lcs.mit.edu/~rosario/research.html
Root-URL: 
Email: Email: rosario@  Email: stasio@theory.lcs.mit.edu.  Email: hugo@  Email: talr@  
Title: Robust and Efficient Sharing of RSA Functions  
Author: Rosario Gennaro Stanislav Jarecki Hugo Krawczyk Tal Rabin watson.ibm.com. watson.ibm.com. 
Note: watson.ibm.com.  
Address: PO Box 704, Yorktown Heights, New York 10598, USA.  Square, Cambridge, MA 02139, USA.  PO Box 704, Yorktown Heights, New York 10598, USA.  PO Box 704, Yorktown Heights, New York 10598, USA.  
Affiliation: IBM T.J. Watson Research Center,  Lab. of Computer Science, Massachusetts Institute of Technology, 545 Tech  IBM T.J. Watson Research Center,  IBM T.J. Watson Research Center,  
Abstract: We present two efficient protocols which implement robust threshold RSA signature schemes, where the power to sign is shared by N players such that any subset of T or more signers can collaborate to produce a valid RSA signature on any given message, but no subset of fewer than T corrupted players can forge a signature. Our protocols are robust in the sense that the correct signature is computed even if up to T 1 players behave in arbitrarily malicious way during the signature protocol. This in particular includes the cases of players that refuse to participate or that introduce erroneous values into the computation. Our robust protocols achieve optimal resiliency as they can tolerate up to (N 1)=2 faults, and their efficiency is comparable to the efficiency of the underlying threshold RSA signature scheme. Robust threshold signature schemes have very important applications, since they provide increased security and availability for a signing server (e.g. a certification authority or an electronic cash provider). Solutions for the case of the RSA signature scheme are especially important because of its widespread use. In addition, these techniques apply to shared RSA decryption as well and, in consequence, to key escrow schemes based on RSA. Our schemes are based on some interesting extensions that we devised for the information checking protocol of T. Rabin and Ben-Or [Rab94, RB89], and the undeniable signature work initiated by Chaum and van Antwerpen [CA89]. These extensions have some attractive properties, and hence are of independent interest. 
Abstract-found: 1
Intro-found: 1
Reference: [BCC88] <author> G. Brassard, D. Chaum, and C. Crepeau. </author> <title> Minimum disclosure proofs of knowledge. </title> <journal> JCSS, </journal> <volume> 37(2) </volume> <pages> 156-189, </pages> <year> 1988. </year>
Reference-contexts: The protocol as presented is not zero-knowledge. (For example, a cheating verifier V fl can choose R in a different way than specified and then learn S R , which V fl could not compute by himself.) However, there are well-known techniques <ref> [GMW91, BCC88, Gol95] </ref> to add the zero-knowledge property to the above protocol using the notion of a commitment function: Instead of P sending A in Step 2, he sends a commitment commit (A), after which V reveals to P the values of i and j.
Reference: [BCDP90] <author> J. Boyar, D. Chaum, I. Damg-ard, and T. Pedersen. </author> <title> Convertible undeniable signatures. </title> <editor> In A. J. Menezes and S. Vanstone, editors, </editor> <booktitle> Advances in Cryptology | Crypto '90, </booktitle> <pages> pages 189-205, </pages> <address> Berlin, </address> <year> 1990. </year> <note> Springer-Verlag. Lecture Notes in Computer Science No. 537. </note>
Reference-contexts: In addition, we prove this protocol to be zero-knowledge, thus even corrupted verifiers do not learn any information from the execution of this protocol that may help in forging signatures. Our solution is based on a protocol due to Chaum and van Antwerpen [CA89], and further developed in <ref> [Cha90, BCDP90] </ref>, designed to prove in zero-knowledge the equality of the discrete 12 logarithms of two elements over a prime field Z p relative to two different bases.
Reference: [BGW88] <author> M. Ben-Or, S. Goldwasser, and A. Wigderson. </author> <title> Completeness Theorems for Noncryp-tographic Fault-Tolerant Distributed Computations. </title> <booktitle> In Proc. 20th Annual Symp. on the Theory of Computing, </booktitle> <pages> pages 1-10. </pages> <publisher> ACM, </publisher> <year> 1988. </year>
Reference-contexts: Unfortunately it is not known how to efficiently generate in a distributed manner a shared RSA key without the help of a trusted party 2 (in principle, one could use generic results for secure multiparty computation <ref> [GMW87, BGW88, CCD88] </ref>, but those are outside the realm of practicality). Hence, at this stage of knowledge, we need to assume that a single dealer generates the public/private RSA keys, and then this dealer needs to be trusted for the secrecy of these keys.
Reference: [BK89] <author> M. Blum and S. Kannan. </author> <title> Program correctness checking and the design of programs that check their work. </title> <booktitle> In Proc. 21st Annual Symp. on the Theory of Computing. ACM, </booktitle> <year> 1989. </year>
Reference-contexts: In a recent and independent work, Frankel, Gemmel, and Yung [FGY96], have extended the notion of result-checking introduced by Blum and Kanan <ref> [BK89] </ref>, to the setting of witness-based cryptographic checking. Among the main motivations for that work is the generation of a robust threshold RSA signature scheme. While [FGY96] provides a more general theoretical framework, our techniques, specifically designed for RSA, result in much more efficient and practical solutions.
Reference: [Boy86] <editor> C. Boyd. Digital Multisignatures. In H. Baker and F. Piper, editors, </editor> <booktitle> Cryptography and Coding, </booktitle> <pages> pages 241-246. </pages> <publisher> Claredon Press, </publisher> <year> 1986. </year>
Reference-contexts: Threshold signatures are part of the general approach known as threshold cryptography introduced through the works of Boyd <ref> [Boy86] </ref>, Desmedt [Des94], and Desmedt and Frankel [DF89]. Solutions for the case of the RSA signature scheme are especially important because of its widespread use (a de-facto standard).
Reference: [BR94] <author> M. Bellare and P. Rogaway. </author> <title> Optimal asymmetric encryption. </title> <editor> In A. De Santis, editor, </editor> <booktitle> Advances in Cryptology | Eurocrypt '94, </booktitle> <pages> pages 92-111, </pages> <address> Berlin, </address> <year> 1994. </year> <note> Springer-Verlag. Lecture Notes in Computer Science No. 950. </note>
Reference-contexts: Commitment functions can be implemented in many ways. For example, in the above 13 protocol commit (A) can be implemented as a probabilistic RSA encryption of A (the encryption is required to be semantically secure, see <ref> [GM84, BR94] </ref>), using a public key for which the private key is not known to V (and possibly, not even known to P ). To open the commitment, P reveals both A and the string r used for the probabilistic encryption.
Reference: [CA89] <editor> David Chaum and Hans Van Antwerpen. Undeniable signatures. In G. Brassard, editor, </editor> <booktitle> Advances in Cryptology | Crypto '89, </booktitle> <pages> pages 212-217, </pages> <address> Berlin, </address> <year> 1989. </year> <note> Springer-Verlag. Lecture Notes in Computer Science No. 435. </note>
Reference-contexts: We use the solution of [DDFY94] as the basic threshold RSA scheme. We achieve the additional property of fault-tolerance by employing extensions which we developed of the Information Checking Protocol of T. Rabin and Ben-Or [Rab94, RB89], and the 2 undeniable signature work initiated by Chaum and van Antwerpen <ref> [CA89] </ref>. These extensions have desirable properties, and hence can be used in other applications as well, and have been recently used in a paper by Gennaro et al [GKR96] to achieve RSA based undeniable signatures. <p> In addition, we prove this protocol to be zero-knowledge, thus even corrupted verifiers do not learn any information from the execution of this protocol that may help in forging signatures. Our solution is based on a protocol due to Chaum and van Antwerpen <ref> [CA89] </ref>, and further developed in [Cha90, BCDP90], designed to prove in zero-knowledge the equality of the discrete 12 logarithms of two elements over a prime field Z p relative to two different bases. <p> Both protocols are low on computation and communication. Thus, achieving an efficient, robust, threshold-RSA signature scheme. Our techniques are closely related to the notion of undeniable signatures <ref> [CA89] </ref>. Recently, [GKR96] achieve RSA based undeniable signatures which builds on the interactive verification pro tocol presented and analyzed here (previous undeniable signature schemes were based on discrete 4 Another option is to test only w. If ord (w) = (n)=2 then no cheating for D is possible.
Reference: [CCD88] <author> D. Chaum, C. Crepeau, and I. Damgard. </author> <title> Multiparty Unconditionally Secure Protocols. </title> <booktitle> In Proc. 20th Annual Symp. on the Theory of Computing, </booktitle> <pages> pages 11-19. </pages> <publisher> ACM, </publisher> <year> 1988. </year> <month> 19 </month>
Reference-contexts: Unfortunately it is not known how to efficiently generate in a distributed manner a shared RSA key without the help of a trusted party 2 (in principle, one could use generic results for secure multiparty computation <ref> [GMW87, BGW88, CCD88] </ref>, but those are outside the realm of practicality). Hence, at this stage of knowledge, we need to assume that a single dealer generates the public/private RSA keys, and then this dealer needs to be trusted for the secrecy of these keys.
Reference: [CEvdG87] <author> D. Chaum, J.-H. Evertse, and J. van der Graaf. </author> <title> An improved protocol for demonstrat-ing possession of a discrete logarithm and some generalizations. </title> <editor> In D. Chaum, editor, </editor> <booktitle> Advances in Cryptology | Eurocrypt '87, </booktitle> <pages> pages 127-141, </pages> <address> Berlin, </address> <year> 1987. </year> <note> Springer-Verlag. Lecture Notes in Computer Science No. 304. </note>
Reference-contexts: To verify that the values w i are indeed exponents of w we use the following sub-protocol <ref> [CEvdG87] </ref>. For each i 2 [N ] the dealer D chooses a value r 2 R [(n)] and broadcasts w 0 = w r . The players collectively choose a random bit b.
Reference: [Cha90] <author> D. Chaum. </author> <title> Zero-knowledge undeniable signatures. </title> <editor> In I. Damg-ard, editor, </editor> <booktitle> Advances in Cryptology | Eurocrypt '90, </booktitle> <pages> pages 458-464, </pages> <address> Berlin, </address> <year> 1990. </year> <note> Springer-Verlag. Lecture Notes in Computer Science No. 473. </note>
Reference-contexts: In addition, we prove this protocol to be zero-knowledge, thus even corrupted verifiers do not learn any information from the execution of this protocol that may help in forging signatures. Our solution is based on a protocol due to Chaum and van Antwerpen [CA89], and further developed in <ref> [Cha90, BCDP90] </ref>, designed to prove in zero-knowledge the equality of the discrete 12 logarithms of two elements over a prime field Z p relative to two different bases.
Reference: [DDFY94] <author> Alfredo De Santis, Yvo Desmedt, Yair Frankel, and Moti Yung. </author> <title> How to share a function securely. </title> <booktitle> In Proc. 26th Annual Symp. on the Theory of Computing, </booktitle> <pages> pages 522-533. </pages> <publisher> ACM, </publisher> <year> 1994. </year>
Reference-contexts: Desmedt and Frankel initiated the study of threshold-RSA [DF91], which was followed by De Santis, Desmedt, Frankel, and Yung <ref> [DDFY94] </ref>. These papers provide solutions for the problem of threshold RSA signatures, however, they lack the robustness property. In this paper, we present an efficient solution for robust (T; N )-threshold RSA signatures, for any threshold value T dN=2e. We use the solution of [DDFY94] as the basic threshold RSA scheme. <p> De Santis, Desmedt, Frankel, and Yung <ref> [DDFY94] </ref>. These papers provide solutions for the problem of threshold RSA signatures, however, they lack the robustness property. In this paper, we present an efficient solution for robust (T; N )-threshold RSA signatures, for any threshold value T dN=2e. We use the solution of [DDFY94] as the basic threshold RSA scheme. We achieve the additional property of fault-tolerance by employing extensions which we developed of the Information Checking Protocol of T. Rabin and Ben-Or [Rab94, RB89], and the 2 undeniable signature work initiated by Chaum and van Antwerpen [CA89]. <p> In reality, the actual techniques used in the known solutions to the threshold RSA problem are more involved. We further elaborate on the techniques of <ref> [DDFY94] </ref> in Section 3.1. All of the existing schemes require, in order for the generated signature to be correct, that all partial signatures i be correct as well. Consequently, these schemes cannot tolerate faults. <p> If the result is a proper signature, there is no need for the verification of the partial signatures. Only if the combined signature fails should the verification protocols that we provide be triggered. In the known threshold RSA solutions (in particular, <ref> [DDFY94] </ref>), the shares d 1 ; :::; d N of the secret key d can be viewed themselves as RSA secret keys. Yet, for each of these keys the corresponding public exponent, e i , is unknown even to the signer, P i . <p> We assume a computationally bounded adversary which is unable to forge (regular) RSA signatures. We omit the formal definitions. See [GJKR96] for the definition of secure threshold signature schemes (based on [GMR88]). 3.1 Threshold Sharing of RSA functions In <ref> [DDFY94] </ref> the authors show how to perform threshold sharing of RSA functions. <p> The main problem is that it is not possible to use Shamir's (T ; N )-threshold secret sharing [Sha79] in a straightforward way, as the secret key d belongs to the ring Z (n) where polynomial interpolation is not always possible. De Santis et al. <ref> [DDFY94] </ref> solve this problem by extending the ring of integers modulo (n) to a structure (a module) where interpolation is always possible. A sketch of their work is presented here, but readers are referred to [DDFY94] for complete details. <p> De Santis et al. <ref> [DDFY94] </ref> solve this problem by extending the ring of integers modulo (n) to a structure (a module) where interpolation is always possible. A sketch of their work is presented here, but readers are referred to [DDFY94] for complete details. Let G be Z (n) and H be Z fl n , where n is an RSA modulus. Let &gt; N be a small prime and let u be a root of the cyclotomic polynomial p (x) = P 1 j=0 x j . <p> This might result in the final interpolated signature being "correct up to its sign", but this can be easily checked (and corrected) using the public exponent e. 6 Remark 3: We describe threshold RSA signatures in terms of the solution presented in <ref> [DDFY94] </ref>. However, our techniques for adding the robustness property to these shared RSA signatures apply to other threshold solutions as well. In particular, to the simpler (though heuristically claimed) solution of Desmedt and Frankel [DF91]. 3.2 Notation For a positive integer k we denote [k] def = f1; ; kg. <p> The values w i are correct if they correspond to the partial signatures w d i for the verified shares d i . Let x 1 ; : : :; x N be the values used for polynomial evaluation in the share generation procedure of <ref> [DDFY94] </ref>, and let x 0 = 0.
Reference: [Des94] <author> Yvo G. Desmedt. </author> <title> Threshold cryptography. </title> <journal> European Transactions on Telecommunications, </journal> <volume> 5(4) </volume> <pages> 449-457, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Threshold signatures are part of the general approach known as threshold cryptography introduced through the works of Boyd [Boy86], Desmedt <ref> [Des94] </ref>, and Desmedt and Frankel [DF89]. Solutions for the case of the RSA signature scheme are especially important because of its widespread use (a de-facto standard).
Reference: [DF89] <author> Yvo Desmedt and Yair Frankel. </author> <title> Threshold cryptosystems. </title> <editor> In G. Brassard, editor, </editor> <booktitle> Advances in Cryptology | Crypto '89, </booktitle> <pages> pages 307-315, </pages> <address> Berlin, </address> <year> 1989. </year> <note> Springer-Verlag. Lecture Notes in Computer Science No. 435. </note>
Reference-contexts: Threshold signatures are part of the general approach known as threshold cryptography introduced through the works of Boyd [Boy86], Desmedt [Des94], and Desmedt and Frankel <ref> [DF89] </ref>. Solutions for the case of the RSA signature scheme are especially important because of its widespread use (a de-facto standard).
Reference: [DF91] <author> Y. Desmedt and Y. Frankel. </author> <title> Shared generation of authenticators and signatures. </title> <editor> In J. Feigenbaum, editor, </editor> <booktitle> Advances in Cryptology | Crypto '91, </booktitle> <pages> pages 457-469, </pages> <address> Berlin, </address> <year> 1991. </year> <note> Springer-Verlag. Lecture Notes in Computer Science No. 576. </note>
Reference-contexts: In addition, since in the RSA cryptosystem the signing algorithm coincides with the decryption algorithm, solutions to shared RSA signatures usually lead to shared RSA decryption procedures which have applications to key escrow (cf. [Mic92]). Desmedt and Frankel initiated the study of threshold-RSA <ref> [DF91] </ref>, which was followed by De Santis, Desmedt, Frankel, and Yung [DDFY94]. These papers provide solutions for the problem of threshold RSA signatures, however, they lack the robustness property. In this paper, we present an efficient solution for robust (T; N )-threshold RSA signatures, for any threshold value T dN=2e. <p> However, our techniques for adding the robustness property to these shared RSA signatures apply to other threshold solutions as well. In particular, to the simpler (though heuristically claimed) solution of Desmedt and Frankel <ref> [DF91] </ref>. 3.2 Notation For a positive integer k we denote [k] def = f1; ; kg. The public modulus is denoted by n.
Reference: [Fel87] <author> P. Feldman. </author> <title> A Practical Scheme for Non-Interactive Verifiable Secret Sharing. </title> <booktitle> In Proc. 28th Annual Symp. on Foundations of Computer Science, </booktitle> <pages> pages 427-437. </pages> <publisher> IEEE, </publisher> <year> 1987. </year>
Reference-contexts: The Adversary. We assume an adversary, A, who can corrupt up to T 1 of the N players in the network. We consider the worse possible kind of adversary, i.e. a malicious adversary that learns all 2 Such results are known for discrete log based signature schemes <ref> [Fel87, Ped91, GJKR96] </ref>. 5 the information held by the corrupted players and hears the broadcasted messages. He may cause corrupted players to behave in any (possibly malicious) way. We assume a computationally bounded adversary which is unable to forge (regular) RSA signatures. We omit the formal definitions.
Reference: [FGY96] <author> Y. Frankel, P. Gemmell, and M. Yung. </author> <title> Witness-based Cryptographic Program Checking and Robust Function Sharing. </title> <booktitle> In Proc. 28th Annual Symp. on the Theory of Computing, </booktitle> <pages> pages 499-508. </pages> <publisher> ACM, </publisher> <year> 1996. </year>
Reference-contexts: These extensions have desirable properties, and hence can be used in other applications as well, and have been recently used in a paper by Gennaro et al [GKR96] to achieve RSA based undeniable signatures. In a recent and independent work, Frankel, Gemmel, and Yung <ref> [FGY96] </ref>, have extended the notion of result-checking introduced by Blum and Kanan [BK89], to the setting of witness-based cryptographic checking. Among the main motivations for that work is the generation of a robust threshold RSA signature scheme. While [FGY96] provides a more general theoretical framework, our techniques, specifically designed for RSA, <p> In a recent and independent work, Frankel, Gemmel, and Yung <ref> [FGY96] </ref>, have extended the notion of result-checking introduced by Blum and Kanan [BK89], to the setting of witness-based cryptographic checking. Among the main motivations for that work is the generation of a robust threshold RSA signature scheme. While [FGY96] provides a more general theoretical framework, our techniques, specifically designed for RSA, result in much more efficient and practical solutions. In particular, our basic protocols involve just a small constant number of modular exponentiations while in [FGY96] a very large number of such costly exponentiations is required. 2 Our results <p> While <ref> [FGY96] </ref> provides a more general theoretical framework, our techniques, specifically designed for RSA, result in much more efficient and practical solutions. In particular, our basic protocols involve just a small constant number of modular exponentiations while in [FGY96] a very large number of such costly exponentiations is required. 2 Our results The basic construction underlying the existing threshold RSA schemes can be roughly described as follows: given n = pq, where p and q are big primes and (n) = (p 1)(q 1), the public RSA key is
Reference: [GJKR96] <author> R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin. </author> <title> Robust threshold dss signatures. </title> <editor> In Ueli Maurer, editor, </editor> <booktitle> Advances in Cryptology | Eurocrypt '96, </booktitle> <pages> pages 354-371, </pages> <address> Berlin, </address> <year> 1996. </year> <note> Springer-Verlag. Lecture Notes in Computer Science No. 1070. </note>
Reference-contexts: The Adversary. We assume an adversary, A, who can corrupt up to T 1 of the N players in the network. We consider the worse possible kind of adversary, i.e. a malicious adversary that learns all 2 Such results are known for discrete log based signature schemes <ref> [Fel87, Ped91, GJKR96] </ref>. 5 the information held by the corrupted players and hears the broadcasted messages. He may cause corrupted players to behave in any (possibly malicious) way. We assume a computationally bounded adversary which is unable to forge (regular) RSA signatures. We omit the formal definitions. <p> He may cause corrupted players to behave in any (possibly malicious) way. We assume a computationally bounded adversary which is unable to forge (regular) RSA signatures. We omit the formal definitions. See <ref> [GJKR96] </ref> for the definition of secure threshold signature schemes (based on [GMR88]). 3.1 Threshold Sharing of RSA functions In [DDFY94] the authors show how to perform threshold sharing of RSA functions.
Reference: [GKR96] <author> R. Gennaro, H. Krawczyk, and T. Rabin. </author> <title> RSA-based Undeniable Signatures. </title> <note> Submitted for publication, </note> <year> 1996. </year>
Reference-contexts: Rabin and Ben-Or [Rab94, RB89], and the 2 undeniable signature work initiated by Chaum and van Antwerpen [CA89]. These extensions have desirable properties, and hence can be used in other applications as well, and have been recently used in a paper by Gennaro et al <ref> [GKR96] </ref> to achieve RSA based undeniable signatures. In a recent and independent work, Frankel, Gemmel, and Yung [FGY96], have extended the notion of result-checking introduced by Blum and Kanan [BK89], to the setting of witness-based cryptographic checking. <p> Both protocols are low on computation and communication. Thus, achieving an efficient, robust, threshold-RSA signature scheme. Our techniques are closely related to the notion of undeniable signatures [CA89]. Recently, <ref> [GKR96] </ref> achieve RSA based undeniable signatures which builds on the interactive verification pro tocol presented and analyzed here (previous undeniable signature schemes were based on discrete 4 Another option is to test only w. If ord (w) = (n)=2 then no cheating for D is possible.
Reference: [GM84] <author> S. Goldwasser and S. Micali. </author> <title> Probabilistic encryption. </title> <journal> JCSS, </journal> <volume> 28(2) </volume> <pages> 270-299, </pages> <month> April </month> <year> 1984. </year>
Reference-contexts: Commitment functions can be implemented in many ways. For example, in the above 13 protocol commit (A) can be implemented as a probabilistic RSA encryption of A (the encryption is required to be semantically secure, see <ref> [GM84, BR94] </ref>), using a public key for which the private key is not known to V (and possibly, not even known to P ). To open the commitment, P reveals both A and the string r used for the probabilistic encryption.
Reference: [GMR88] <author> Shafi Goldwasser, Silvio Micali, and Ronald L. Rivest. </author> <title> A digital signature scheme secure against adaptive chosen-message attacks. </title> <journal> SIAM J. Computing, </journal> <volume> 17(2) </volume> <pages> 281-308, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: He may cause corrupted players to behave in any (possibly malicious) way. We assume a computationally bounded adversary which is unable to forge (regular) RSA signatures. We omit the formal definitions. See [GJKR96] for the definition of secure threshold signature schemes (based on <ref> [GMR88] </ref>). 3.1 Threshold Sharing of RSA functions In [DDFY94] the authors show how to perform threshold sharing of RSA functions.
Reference: [GMW87] <author> O. Goldreich, S. Micali, and A. Wigderson. </author> <title> How to Play Any Mental Game. </title> <booktitle> In Proc. 19th Annual Symp. on the Theory of Computing, </booktitle> <pages> pages 218-229. </pages> <publisher> ACM, </publisher> <year> 1987. </year> <month> 20 </month>
Reference-contexts: Unfortunately it is not known how to efficiently generate in a distributed manner a shared RSA key without the help of a trusted party 2 (in principle, one could use generic results for secure multiparty computation <ref> [GMW87, BGW88, CCD88] </ref>, but those are outside the realm of practicality). Hence, at this stage of knowledge, we need to assume that a single dealer generates the public/private RSA keys, and then this dealer needs to be trusted for the secrecy of these keys. <p> We need to check that the dealer chooses the modulus n of the right form, i.e. n = pq with p = 2p 0 + 1 and q = 2q 0 + 1. Although this choice can be theoretically checked using the general results of <ref> [GMW87] </ref> on secure computation, the resultant solution would be hardly practical. To alleviate this problem one could have the dealer generate a large set of moduli n 1 ; n 2 ; from which the players collectively choose a random element, say n i .
Reference: [GMW91] <author> O. Goldreich, S. Micali, and A. Wigderson. </author> <title> Proofs that Yield Nothing But Their Validity or All Languages in NP Have Zero-Knowledge Proof Systems . Journal of the ACM, </title> <booktitle> 38(1) </booktitle> <pages> 691-729, </pages> <year> 1991. </year>
Reference-contexts: The protocol as presented is not zero-knowledge. (For example, a cheating verifier V fl can choose R in a different way than specified and then learn S R , which V fl could not compute by himself.) However, there are well-known techniques <ref> [GMW91, BCC88, Gol95] </ref> to add the zero-knowledge property to the above protocol using the notion of a commitment function: Instead of P sending A in Step 2, he sends a commitment commit (A), after which V reveals to P the values of i and j.
Reference: [Gol95] <author> Oded Goldreich. </author> <title> Foundation of Cryptography Fragments of a Book. </title> <booktitle> Electronic Colloquium on Computational Complexity, </booktitle> <month> February </month> <year> 1995. </year> <note> Available online from http://www.eccc.uni-trier.de/eccc/. </note>
Reference-contexts: The protocol as presented is not zero-knowledge. (For example, a cheating verifier V fl can choose R in a different way than specified and then learn S R , which V fl could not compute by himself.) However, there are well-known techniques <ref> [GMW91, BCC88, Gol95] </ref> to add the zero-knowledge property to the above protocol using the notion of a commitment function: Instead of P sending A in Step 2, he sends a commitment commit (A), after which V reveals to P the values of i and j.
Reference: [Mic92] <author> Silvio Micali. </author> <title> Fair public-key cryptosystems. </title> <editor> In E. Brickell, editor, </editor> <booktitle> Advances in Cryptology | Crypto '92, </booktitle> <pages> pages 113-138, </pages> <address> Berlin, </address> <year> 1992. </year> <note> Springer-Verlag. Lecture Notes in Computer Science No. 740. </note>
Reference-contexts: In addition, since in the RSA cryptosystem the signing algorithm coincides with the decryption algorithm, solutions to shared RSA signatures usually lead to shared RSA decryption procedures which have applications to key escrow (cf. <ref> [Mic92] </ref>). Desmedt and Frankel initiated the study of threshold-RSA [DF91], which was followed by De Santis, Desmedt, Frankel, and Yung [DDFY94]. These papers provide solutions for the problem of threshold RSA signatures, however, they lack the robustness property.
Reference: [Ped91] <author> T. Pedersen. </author> <title> Non-interactive and information-theoretic secure verifiable secret sharing. </title> <editor> In J. Feigenbaum, editor, </editor> <booktitle> Advances in Cryptology | Crypto '91, </booktitle> <pages> pages 129-140, </pages> <address> Berlin, </address> <year> 1991. </year> <note> Springer-Verlag. Lecture Notes in Computer Science No. 576. </note>
Reference-contexts: The Adversary. We assume an adversary, A, who can corrupt up to T 1 of the N players in the network. We consider the worse possible kind of adversary, i.e. a malicious adversary that learns all 2 Such results are known for discrete log based signature schemes <ref> [Fel87, Ped91, GJKR96] </ref>. 5 the information held by the corrupted players and hears the broadcasted messages. He may cause corrupted players to behave in any (possibly malicious) way. We assume a computationally bounded adversary which is unable to forge (regular) RSA signatures. We omit the formal definitions.
Reference: [Rab94] <author> T. Rabin. </author> <title> Robust Sharing of Secrets When the Dealer is Honest or Faulty. </title> <journal> Journal of the ACM, </journal> <volume> 41(6) </volume> <pages> 1089-1109, </pages> <year> 1994. </year>
Reference-contexts: We use the solution of [DDFY94] as the basic threshold RSA scheme. We achieve the additional property of fault-tolerance by employing extensions which we developed of the Information Checking Protocol of T. Rabin and Ben-Or <ref> [Rab94, RB89] </ref>, and the 2 undeniable signature work initiated by Chaum and van Antwerpen [CA89]. These extensions have desirable properties, and hence can be used in other applications as well, and have been recently used in a paper by Gennaro et al [GKR96] to achieve RSA based undeniable signatures. <p> during the Dealing Phase, while in Section 4.3 we describe the protocol for verification of partial signatures during the Signature Phase. (See the schema in Section 2 for the role of these components in the full threshold signature protocol.) Our solution is based on the Information Checking Protocol (ICP) from <ref> [Rab94, RB89] </ref>. The original ICP technique is intended for one-time verification of information provided by an untrusted party. In our case we extend this technique to verification of multiple partial signatures; in particular, we extend ICP to work over the integers rather than over a prime field as originally designed.
Reference: [RB89] <author> T. Rabin and M. Ben-Or. </author> <title> Verifiable Secret Sharing and Multiparty Protocols with Honest Majority. </title> <booktitle> In Proc. 21st Annual Symp. on the Theory of Computing, </booktitle> <pages> pages 73-85. </pages> <publisher> ACM, </publisher> <year> 1989. </year>
Reference-contexts: We use the solution of [DDFY94] as the basic threshold RSA scheme. We achieve the additional property of fault-tolerance by employing extensions which we developed of the Information Checking Protocol of T. Rabin and Ben-Or <ref> [Rab94, RB89] </ref>, and the 2 undeniable signature work initiated by Chaum and van Antwerpen [CA89]. These extensions have desirable properties, and hence can be used in other applications as well, and have been recently used in a paper by Gennaro et al [GKR96] to achieve RSA based undeniable signatures. <p> during the Dealing Phase, while in Section 4.3 we describe the protocol for verification of partial signatures during the Signature Phase. (See the schema in Section 2 for the role of these components in the full threshold signature protocol.) Our solution is based on the Information Checking Protocol (ICP) from <ref> [Rab94, RB89] </ref>. The original ICP technique is intended for one-time verification of information provided by an untrusted party. In our case we extend this technique to verification of multiple partial signatures; in particular, we extend ICP to work over the integers rather than over a prime field as originally designed.
Reference: [Sha79] <author> A. Shamir. </author> <title> How to Share a Secret. </title> <journal> Communications of the ACM, </journal> <volume> 22 </volume> <pages> 612-613, </pages> <year> 1979. </year> <month> 21 </month>
Reference-contexts: The main problem is that it is not possible to use Shamir's (T ; N )-threshold secret sharing <ref> [Sha79] </ref> in a straightforward way, as the secret key d belongs to the ring Z (n) where polynomial interpolation is not always possible. De Santis et al. [DDFY94] solve this problem by extending the ring of integers modulo (n) to a structure (a module) where interpolation is always possible.
References-found: 28

