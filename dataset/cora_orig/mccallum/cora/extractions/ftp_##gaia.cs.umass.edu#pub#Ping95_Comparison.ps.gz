URL: ftp://gaia.cs.umass.edu/pub/Ping95:Comparison.ps.gz
Refering-URL: http://www-net.cs.umass.edu/papers/papers.html
Root-URL: 
Email: pingali@cs.umass.edu  -towsley,kurose-@cs.umass.edu  
Title: A Comparison of Sender-Initiated and Receiver-Initiated Reliable Multicast Protocols  
Author: Sridhar Pingali Don Towsley and James F. Kurose 
Address: Amherst, MA 01003  Amherst, MA 01003  
Affiliation: Dept. of Electrical and Computer Engineering University of Massachusetts  Dept. of Computer Science University of Massachusetts  
Abstract: Sender-initiated reliable multicast protocols, based on the use of positive acknowledgments (ACKs), lead to an ACK implosion problem at the sender as the number of receivers increases. Briefly, the ACK implosion problem refers to the significant overhead incurred by the sending host due to the processing of ACKs from each receiver. A potential solution to this problem is to shift the burden of providing reliable data transfer to the receivers thus resulting in a receiver-initiated multicast error control protocol based on the use of negative acknowledgments (NAKs). In this paper we determine the maximum throughputs of the sending and receiving hosts for generic sender-initiated and receiver-initiated protocols. We show that the receiver-initiated error control protocols provide substantially higher throughputs than their sender-initiated counterparts. We further demonstrate that the introduction of random delays prior to generating NAKs coupled with the multicasting of NAKs to all receivers has the potential for an additional substantial increase in the throughput of receiver-initiated error control protocols over sender-initiated protocols. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Casner, </author> <title> First IETF Internet Audiocast, </title> <journal> ACM SIG-COMM Computer Communication Review, </journal> <volume> 22 </volume> <pages> 92-97, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: The last term corresponds to processing of the timer when it expires. Again, this is only required after the first transmission (if lost) up to, but not including, the first correct reception of a given packet. From the distribution of M r , it follows that E <ref> [M r jM r &gt; 1] </ref> = (2 p)=(1 p); Substitution into (12) yields E [Y N1 ] = E [Y f ] + E [M ](1 p)E [Y p ] and the receiver packet processing rate is fl N1 r = 1=E [Y N1 ]. <p> In other words, if ! [R]; ! 2 fA; N 1; N 2g is the speed of a processor that can support at most R recievers under protocol !, we set A <ref> [1] </ref> = 1. Since E [M ]j R=1 = 1=(1 p), we can fl N2 r vs R write E [X A ]j R=1;p=0:01 = A [1] 1 p Using such a processor as the baseline, we can readily write using Equations (4), (11) and (12) A [R] = 0:33 fi <p> fA; N 1; N 2g is the speed of a processor that can support at most R recievers under protocol !, we set A <ref> [1] </ref> = 1. Since E [M ]j R=1 = 1=(1 p), we can fl N2 r vs R write E [X A ]j R=1;p=0:01 = A [1] 1 p Using such a processor as the baseline, we can readily write using Equations (4), (11) and (12) A [R] = 0:33 fi E [M ](2 + R fi 0:99); and The plots of Figure 9 are obtained from the above expressions and by treating processor speed as the
Reference: [2] <author> R. Frederick, </author> <title> nv, Manual Pages, </title> <institution> Xerox Palo Alto Research Center. </institution>
Reference-contexts: 1 Introduction There has recently been the widespread introduction of applications that support real-time interactive group collaborations over wide area networks (WANs). These include fl This research was supported in part by the National Science Foundation under grants NCR-9116183 and CCR-9119922. applications that support video (nv <ref> [2] </ref>) and voice (vat [3], NeVot [4]) which do not require reliable multicast as well as applications such as shared whiteboards (e.g., wb [5], shdr [6]) which do require reliable multicast. <p> We focus next on the mean per packet processing time at a receiver. Similar to the analysis leading to (2), we have E [Y N1 ] = E [Y f ] + E [M ](1 p)E [Y p ] + P <ref> [M r &gt; 2] </ref>(E [M r jM r &gt; 2] 2)E [Y t ]: Here the first two terms correspond to the processing required to correctly receive packets and send them to the next layer. The third term corresponds to the processing required to prepare and return NAKs. <p> We focus next on the mean per packet processing time at a receiver. Similar to the analysis leading to (2), we have E [Y N1 ] = E [Y f ] + E [M ](1 p)E [Y p ] + P [M r &gt; 2](E <ref> [M r jM r &gt; 2] </ref> 2)E [Y t ]: Here the first two terms correspond to the processing required to correctly receive packets and send them to the next layer. The third term corresponds to the processing required to prepare and return NAKs. <p> With these modifications, it is easy to see that 1=fl N2 + (E [M ] 1)E [X n ] (12) 1=fl N2 + (E [M ] 1)E [Y n ]=R + (R 1)E <ref> [Y 0 + P [M r &gt; 2] </ref>(E [M r jM r &gt; 2] 2)E [Y t ] Last, fl N2 = minffl N2 s ; fl N2 Note that E [X N2 ] = O (1 + p ln R=(1 p)) and E [Y N2 ] = O (1 p <p> With these modifications, it is easy to see that 1=fl N2 + (E [M ] 1)E [X n ] (12) 1=fl N2 + (E [M ] 1)E [Y n ]=R + (R 1)E [Y 0 + P <ref> [M r &gt; 2] </ref>(E [M r jM r &gt; 2] 2)E [Y t ] Last, fl N2 = minffl N2 s ; fl N2 Note that E [X N2 ] = O (1 + p ln R=(1 p)) and E [Y N2 ] = O (1 p + p ln R). <p> With these modifications, it is easy to see that 1=fl N2 + (E [M ] 1)E [X n ] (12) 1=fl N2 + (E [M ] 1)E [Y n ]=R + (R 1)E [Y 0 + P [M r &gt; 2](E <ref> [M r jM r &gt; 2] </ref> 2)E [Y t ] Last, fl N2 = minffl N2 s ; fl N2 Note that E [X N2 ] = O (1 + p ln R=(1 p)) and E [Y N2 ] = O (1 p + p ln R).
Reference: [3] <author> V. Jacobson and S. McCanne, vat, </author> <title> Manual Pages, </title> <institution> Lawrence Berkeley Laboratory, Berkeley, </institution> <address> CA. </address>
Reference-contexts: 1 Introduction There has recently been the widespread introduction of applications that support real-time interactive group collaborations over wide area networks (WANs). These include fl This research was supported in part by the National Science Foundation under grants NCR-9116183 and CCR-9119922. applications that support video (nv [2]) and voice (vat <ref> [3] </ref>, NeVot [4]) which do not require reliable multicast as well as applications such as shared whiteboards (e.g., wb [5], shdr [6]) which do require reliable multicast.
Reference: [4] <author> H. Schulzrinne, </author> <title> Voice Communication Across the Internet: A Network Voice Terminal, </title> <type> Reseach Report, </type> <institution> Dept. of C.S., UMass, Amherst, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: These include fl This research was supported in part by the National Science Foundation under grants NCR-9116183 and CCR-9119922. applications that support video (nv [2]) and voice (vat [3], NeVot <ref> [4] </ref>) which do not require reliable multicast as well as applications such as shared whiteboards (e.g., wb [5], shdr [6]) which do require reliable multicast.
Reference: [5] <author> V. Jacobson and S. McCanne, </author> <title> Using the LBL Network `Whiteboard', </title> <institution> Lawrence Berkeley Laboratory, </institution> <address> Berke-ley, CA. </address>
Reference-contexts: These include fl This research was supported in part by the National Science Foundation under grants NCR-9116183 and CCR-9119922. applications that support video (nv [2]) and voice (vat [3], NeVot [4]) which do not require reliable multicast as well as applications such as shared whiteboards (e.g., wb <ref> [5] </ref>, shdr [6]) which do require reliable multicast. This requirement of reliable data transfer for this last set of applications poses a difficult challenge to network designers namely how to design and implement a reliable multicast protocol that can handle 100s or 1000s of participants 1 .
Reference: [6] <author> L. Padmanabhan, </author> <title> Design and Implementation of a Shared White-Board, </title> <institution> M.S. Project, Dept. of Computer Science, </institution> <address> UMass, Amherst, MA 01003, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: These include fl This research was supported in part by the National Science Foundation under grants NCR-9116183 and CCR-9119922. applications that support video (nv [2]) and voice (vat [3], NeVot [4]) which do not require reliable multicast as well as applications such as shared whiteboards (e.g., wb [5], shdr <ref> [6] </ref>) which do require reliable multicast. This requirement of reliable data transfer for this last set of applications poses a difficult challenge to network designers namely how to design and implement a reliable multicast protocol that can handle 100s or 1000s of participants 1 .
Reference: [7] <author> S.E. Deering and D.R. Cheriton, </author> <title> Multicast Routing in Datagram Internetworks and Extended LANs, </title> <journal> ACM Trans. on Computer Systems, </journal> <volume> 8 </volume> <pages> 85-110, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: This has led to the proposal of a number of receiver-oriented transport and connection establishment protocols such as IP mul-ticast <ref> [7] </ref> and RSVP [17]. In the area of reliable multicast transport protocols, most early work focussed on sender initiated protocols, e.g., [11, 12, 13, 14, 15]. There have been a few exceptions to this rule.
Reference: [8] <author> I. Gopal and J. Jaffe, </author> <title> Point-to-Multipoint Communication over Broadcast Links, </title> <journal> IEEE Trans. on Communications, </journal> <volume> 32 </volume> <pages> 1034-1044, </pages> <month> September </month> <year> 1984. </year>
Reference-contexts: Most traditional point-to-point protocols (e.g., TCP, HDLC, TP4) and many early multicast/broadcast protocols <ref> [13, 12, 8, 10, 14] </ref> are based on this approach.
Reference: [9] <author> V. Jacobson, </author> <booktitle> 1993 ARPA Networking PI Meeting, </booktitle> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: There have been a few exceptions to this rule. For example, Ramakrishnan and Jain, [10] designed and evaluated, through simulation, a receiver-initiated window based reliable multicast protocol suitable for a local area network. Jacobson has used similar ideas to implement a reliable multicast protocol suitable for the Internet <ref> [9] </ref>. Our work differs from previous work on reliable mul-ticast protocols in three significant ways. First, rather than provide a detailed design and analysis of a specific reliable multicast protocol, we study three generic protocols, one that is sender-initiated and two that are receiver-oriented. <p> a NAK to the sender over a point-to-point channel and starts a timer, * the expiration of a timer without prior reception of the corresponding packet serves as the detection of a lost packet. and the following variation (N2) suggested by Ramakrishnan and Jain [10] for a LAN and Jacobson <ref> [9] </ref> for a WAN * the sender broadcasts all packets and state information * the sender gives priority to retransmissions over trans missions of new packets, * whenever a receiver detects a lost packet, it waits for a random period of time and then broadcasts a NAK to the sender and
Reference: [10] <author> S. Ramakrishnan and B. N. Jain, </author> <title> A Negative Acknowledgement with Periodic Polling Protocol for Multicast over LANs, </title> <booktitle> Proc. IEEE Infocom'87, </booktitle> <pages> pp 502-511, </pages> <month> Mar-Apr </month> <year> 1987. </year>
Reference-contexts: In the area of reliable multicast transport protocols, most early work focussed on sender initiated protocols, e.g., [11, 12, 13, 14, 15]. There have been a few exceptions to this rule. For example, Ramakrishnan and Jain, <ref> [10] </ref> designed and evaluated, through simulation, a receiver-initiated window based reliable multicast protocol suitable for a local area network. Jacobson has used similar ideas to implement a reliable multicast protocol suitable for the Internet [9]. Our work differs from previous work on reliable mul-ticast protocols in three significant ways. <p> Most traditional point-to-point protocols (e.g., TCP, HDLC, TP4) and many early multicast/broadcast protocols <ref> [13, 12, 8, 10, 14] </ref> are based on this approach. <p> detects a lost packet, it transmits a NAK to the sender over a point-to-point channel and starts a timer, * the expiration of a timer without prior reception of the corresponding packet serves as the detection of a lost packet. and the following variation (N2) suggested by Ramakrishnan and Jain <ref> [10] </ref> for a LAN and Jacobson [9] for a WAN * the sender broadcasts all packets and state information * the sender gives priority to retransmissions over trans missions of new packets, * whenever a receiver detects a lost packet, it waits for a random period of time and then broadcasts <p> Hence, the first NAK generated usually arrives to all other receivers prior to their generating additional NAKs. As with the sender-initiated protocols, there are numerous optimizations possible which we will not explore in this paper (see <ref> [10] </ref> for an example). 2.3 Network and Error Model We assume that one sender transmits a continuous stream of packets to R receivers.
Reference: [11] <author> S. Ram Chandran and S. Lin, </author> <title> Selective-repeat-ARQ Schemes for Broadcast Links, </title> <journal> IEEE Trans. on Communications, </journal> <volume> 40 </volume> <pages> 12-19, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: This has led to the proposal of a number of receiver-oriented transport and connection establishment protocols such as IP mul-ticast [7] and RSVP [17]. In the area of reliable multicast transport protocols, most early work focussed on sender initiated protocols, e.g., <ref> [11, 12, 13, 14, 15] </ref>. There have been a few exceptions to this rule. For example, Ramakrishnan and Jain, [10] designed and evaluated, through simulation, a receiver-initiated window based reliable multicast protocol suitable for a local area network.
Reference: [12] <author> K. Sabnani and M. Schwartz, </author> <title> Multidestination Protocols for Satellite Broadcast Channels, </title> <journal> IEEE Trans. on Communications, </journal> <volume> 33 </volume> <pages> 232-240, </pages> <month> March </month> <year> 1985. </year>
Reference-contexts: This has led to the proposal of a number of receiver-oriented transport and connection establishment protocols such as IP mul-ticast [7] and RSVP [17]. In the area of reliable multicast transport protocols, most early work focussed on sender initiated protocols, e.g., <ref> [11, 12, 13, 14, 15] </ref>. There have been a few exceptions to this rule. For example, Ramakrishnan and Jain, [10] designed and evaluated, through simulation, a receiver-initiated window based reliable multicast protocol suitable for a local area network. <p> Most traditional point-to-point protocols (e.g., TCP, HDLC, TP4) and many early multicast/broadcast protocols <ref> [13, 12, 8, 10, 14] </ref> are based on this approach. <p> This will be referred to as protocol (A). This protocol can be optimized in numerous ways, such as grouping ACK's for different packets into a single control packet (see <ref> [13, 12] </ref> for examples of such optimizations). We will not pursue them in this paper. 2.2 Receiver-Initiated Protocols A receiver-initiated protocol places the responsibility for ensuring reliable packet delivery on the receivers. The sender continues to transmits new data packets until it receives a negative acknowledgment (NAK) from a receiver.
Reference: [13] <author> D. Towsley, </author> <title> An Analysis of a Point-to-Multipoint Channel Using a Go-Back-N Error Control Protocol, </title> <journal> IEEE Trans. on Communications, </journal> <volume> 33 </volume> <pages> 282-285, </pages> <month> March </month> <year> 1985. </year>
Reference-contexts: This has led to the proposal of a number of receiver-oriented transport and connection establishment protocols such as IP mul-ticast [7] and RSVP [17]. In the area of reliable multicast transport protocols, most early work focussed on sender initiated protocols, e.g., <ref> [11, 12, 13, 14, 15] </ref>. There have been a few exceptions to this rule. For example, Ramakrishnan and Jain, [10] designed and evaluated, through simulation, a receiver-initiated window based reliable multicast protocol suitable for a local area network. <p> Most traditional point-to-point protocols (e.g., TCP, HDLC, TP4) and many early multicast/broadcast protocols <ref> [13, 12, 8, 10, 14] </ref> are based on this approach. <p> This will be referred to as protocol (A). This protocol can be optimized in numerous ways, such as grouping ACK's for different packets into a single control packet (see <ref> [13, 12] </ref> for examples of such optimizations). We will not pursue them in this paper. 2.2 Receiver-Initiated Protocols A receiver-initiated protocol places the responsibility for ensuring reliable packet delivery on the receivers. The sender continues to transmits new data packets until it receives a negative acknowledgment (NAK) from a receiver. <p> The assumption that ACKs/NAKs are never lost is reasonable as control packets are small and typically given better treatment in a network. If desired, this assumption can be relaxed by following the analysis given in <ref> [13] </ref>. 3 Throughput Analysis of Sender Initiated Protocols We consider a single sender broadcasting to R identical receivers. As the behavior of the sender differs from that of a receiver, we consider their behaviors separately. Throughout our analysis we will introduce a number of different parameters as we need them.
Reference: [14] <author> D. Towsley and S. Mithal, </author> <title> A Selective Repeat ARQ Protocol for a Point to Multipoint Channel, </title> <booktitle> Proc. IEEE Infocom'87, </booktitle> <pages> pp 521-526, </pages> <month> Mar-Apr </month> <year> 1987. </year>
Reference-contexts: This has led to the proposal of a number of receiver-oriented transport and connection establishment protocols such as IP mul-ticast [7] and RSVP [17]. In the area of reliable multicast transport protocols, most early work focussed on sender initiated protocols, e.g., <ref> [11, 12, 13, 14, 15] </ref>. There have been a few exceptions to this rule. For example, Ramakrishnan and Jain, [10] designed and evaluated, through simulation, a receiver-initiated window based reliable multicast protocol suitable for a local area network. <p> Most traditional point-to-point protocols (e.g., TCP, HDLC, TP4) and many early multicast/broadcast protocols <ref> [13, 12, 8, 10, 14] </ref> are based on this approach.
Reference: [15] <author> J.L. Wang and J.A. Silvester, </author> <title> Delay Minimization of the Adaptive Go-Back-N ARQ Protocols for Point-to-Multipoint Communication, </title> <booktitle> Proc. IEEE Infocom'89, </booktitle> <pages> pp 584-593, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: This has led to the proposal of a number of receiver-oriented transport and connection establishment protocols such as IP mul-ticast [7] and RSVP [17]. In the area of reliable multicast transport protocols, most early work focussed on sender initiated protocols, e.g., <ref> [11, 12, 13, 14, 15] </ref>. There have been a few exceptions to this rule. For example, Ramakrishnan and Jain, [10] designed and evaluated, through simulation, a receiver-initiated window based reliable multicast protocol suitable for a local area network.
Reference: [16] <author> R. Yavatkar and L. Manoj, </author> <title> Optimistic Approaches to Large-Scale Dissemination of Multimedia Information, </title> <booktitle> Proc. ACM Multimedia '93, </booktitle> <month> August </month> <year> 1993. </year>
Reference: [17] <author> L. Zhang, S. Deering, D. Estrin, S. Shenker and D. Zap-pala, RSVP: </author> <title> A New Resource ReSerVation Protocol, </title> <journal> IEEE Network, </journal> <pages> pp 8-18, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: This has led to the proposal of a number of receiver-oriented transport and connection establishment protocols such as IP mul-ticast [7] and RSVP <ref> [17] </ref>. In the area of reliable multicast transport protocols, most early work focussed on sender initiated protocols, e.g., [11, 12, 13, 14, 15]. There have been a few exceptions to this rule.
References-found: 17

