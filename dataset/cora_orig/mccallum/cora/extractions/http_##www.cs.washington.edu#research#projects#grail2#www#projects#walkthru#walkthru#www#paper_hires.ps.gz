URL: http://www.cs.washington.edu/research/projects/grail2/www/projects/walkthru/walkthru/www/paper_hires.ps.gz
Refering-URL: http://www.cs.washington.edu/research/projects/grail2/www/projects/walkthru/
Root-URL: 
Title: Hierarchical Image Caching for Accelerated Walkthroughs of Complex Environments  
Author: Jonathan Shade Dani Lischinski David H. Salesin Tony DeRose John Snyder 
Keyword: CR Categories and Subject Descriptors: I.3.3 [Computer Graphics]: Picture/Image Generation Display algorithms; I.3.7 [Computer Graphics]: Three-Dimensional Graphics and Realism. Additional Key Words: BSP-tree, image-based rendering, level-of-detail (LOD), path coherence, spatial hierarchy, texture mapping.  
Affiliation: University of Washington Microsoft Research  
Abstract: We present a new method that utilizes path coherence to accelerate walkthroughs of geometrically complex static scenes. As a preprocessing step, our method constructs a BSP-tree that hierarchically partitions the geometric primitives in the scene. In the course of a walkthrough, images of nodes at various levels of the hierarchy are cached for reuse in subsequent frames. A cached image is reused by texture-mapping it onto a single quadrilateral that is drawn instead of the geometry contained in the corresponding node. Visual artifacts are kept under control by using an error metric that quantifies the discrepancy between the appearance of the geometry contained in a node and the cached image. The new method is shown to achieve speedups of an order of magnitude for walkthroughs of a complex outdoor scene, with little or no loss in rendering quality. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> John M. Airey, John H. Rohlf, and Frederick P. Brooks, Jr. </author> <title> Towards image realism with interactive update rates in complex virtual building environments. </title> <booktitle> Computer Graphics (1990 Symposium on Interactive 3D Graphics), </booktitle> <volume> 24(2) </volume> <pages> 41-50, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: View-frustum culling techniques are most effective when only a small part of the scene's geometry is inside the view frustum at any single frame. In a complex environment enough geometry remains inside the view frustum to overload the graphics pipeline, and additional acceleration techniques are required. Airey et al. <ref> [1] </ref> and Teller [19] described methods for interactive walkthroughs of complex buildings that compute the potentially visible set of polygons for each room in a building. Only the potentially visible set of polygons for the room currently containing the viewer needs to be rendered at each frame.
Reference: [2] <author> Bradford Chamberlain, Tony DeRose, Dani Lischinski, David Salesin, and John Snyder. </author> <title> Fast rendering of complex environments using a spatial hierarchy. </title> <booktitle> In Proceedings of Graphics Interface '96, </booktitle> <month> May </month> <year> 1996. </year>
Reference-contexts: Such an approach has been used since the early days of flight simulators, and has more recently been incorporated in walkthrough systems for complex environments by Funkhouser and Sequin [7], Maciel and Shirley [12], and Chamberlain et al. <ref> [2] </ref>. One of the chief difficulties with the LOD approach is the problem of generating the various coarse-level representations of a model. Funkhouser and Sequin [7] created the different LOD models manually. <p> Eck et al. [5] described methods based on wavelet analysis that can be used to automatically create reasonably accurate low-detail models of surfaces. Maciel and Shirley [12] used a number of LOD representations, including geometric simplifications created by hand, texture maps, and colored bounding boxes. Chamberlain et al. <ref> [2] </ref> partitioned the scene into a spatial hierarchy of cells and associated with each cell a colored box representing its contents. <p> Thus, instead of drawing such objects in full detail, we could draw a coarser model of the same object, using a multi-resolution representation such as the one by Eck et al. [5] or Chamberlain et al. <ref> [2] </ref>. Using a multi-resolution representation could also accelerate rendering of objects for which no cached images were created. * Persistent caches. As regions of the scene pass out of the view frustum, the images cached for the newly culled nodes are invalidated, and the memory is released.
Reference: [3] <author> Shenchang Eric Chen and Lance Williams. </author> <title> View interpolation for image synthesis. </title> <booktitle> In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pp. 279-288, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Image-based rendering A different approach for interactive scene display is based on the idea of view interpolation, in which different views of a scene are rendered as a pre-processing step, and intermediate views are generated by morphing between the precomputed images in real time. Chen and Williams <ref> [3] </ref> and McMillan and Bishop [13] have demonstrated two variants of this approach for restricted movement in three-dimensional environments. Although not general purpose, these algorithms provide a viable method of rendering complex environments on machines that do not have fast graphics hardware.
Reference: [4] <author> James H. Clark. </author> <title> Hierarchical geometric models for visible surface algorithms. </title> <journal> Communications of the ACM, </journal> 19(10) 547-554, October 1976. 
Reference-contexts: Visibility culling Visibility culling algorithms attempt to avoid drawing objects that are not visible in the image. This approach was first investigated by Clark <ref> [4] </ref>, who used an object hierarchy to rapidly cull surfaces that lie outside the viewing frustum. Garlick et al. [8] applied this idea to spatial subdivisions of scenes.
Reference: [5] <author> Matthias Eck, Tony DeRose, Tom Duchamp, Hugues Hoppe, Michael Lounsbery, and Werner Stuetzle. </author> <title> Multiresolution analysis for arbitrary meshes. </title> <booktitle> In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pp. 173-182, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: One of the chief difficulties with the LOD approach is the problem of generating the various coarse-level representations of a model. Funkhouser and Sequin [7] created the different LOD models manually. Eck et al. <ref> [5] </ref> described methods based on wavelet analysis that can be used to automatically create reasonably accurate low-detail models of surfaces. Maciel and Shirley [12] used a number of LOD representations, including geometric simplifications created by hand, texture maps, and colored bounding boxes. <p> Thus, instead of drawing such objects in full detail, we could draw a coarser model of the same object, using a multi-resolution representation such as the one by Eck et al. <ref> [5] </ref> or Chamberlain et al. [2]. Using a multi-resolution representation could also accelerate rendering of objects for which no cached images were created. * Persistent caches.
Reference: [6] <author> Henry Fuchs, Zvi M. Kedem, and Bruce Naylor. </author> <title> On visible surface generation by a priori tree structures. </title> <journal> Computer Graphics, </journal> <volume> 14(3) </volume> <pages> 175-181, </pages> <month> June </month> <year> 1980. </year>
Reference-contexts: We exploit this path coherence by caching images created in one frame for possible reuse in many subsequent frames. fshade j danix j salesing@cs.washington.edu derose@pixar.com, johnsny@microsoft.com Our method starts with a preprocessing stage. Given an unstructured set of objects comprising a scene, we construct a BSP-tree <ref> [6] </ref> by placing splitting planes inside gaps between objects. This construction produces a hierarchical spatial partitioning of the scene with geometry stored only at the leaves of the hierarchy. <p> An image can be computed and cached for any node in the hierarchy; hence the name hierarchical image caching. We construct the hierarchy as a preprocessing step by computing a BSP-tree <ref> [6] </ref> partitioning of the environment, as described in Section 4. We chose to use a BSP-tree since it allows us to traverse the scene in back-to-front order, which is necessary to ensure that the partially-transparent textured quadrilaterals are composited correctly in the frame-buffer. <p> This threshold is converted to an angular error threshold using the current resolution and field-of-view angle. If either the resolution or the field-of-view change in the course of a walkthrough, the angular error threshold must be adjusted accordingly. 4 Partitioning As a preprocessing step, we construct a BSP-tree <ref> [6] </ref> partitioning of the scene.
Reference: [7] <author> Thomas A. Funkhouser and Carlo H. Sequin. </author> <title> Adaptive display algorithm for interactive frame rates during visualization of complex virtual environments. </title> <booktitle> In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pp. 247-254, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: The idea is to render progressively coarser representations of a model as it moves further from the viewer. Such an approach has been used since the early days of flight simulators, and has more recently been incorporated in walkthrough systems for complex environments by Funkhouser and Sequin <ref> [7] </ref>, Maciel and Shirley [12], and Chamberlain et al. [2]. One of the chief difficulties with the LOD approach is the problem of generating the various coarse-level representations of a model. Funkhouser and Sequin [7] created the different LOD models manually. <p> and has more recently been incorporated in walkthrough systems for complex environments by Funkhouser and Sequin <ref> [7] </ref>, Maciel and Shirley [12], and Chamberlain et al. [2]. One of the chief difficulties with the LOD approach is the problem of generating the various coarse-level representations of a model. Funkhouser and Sequin [7] created the different LOD models manually. Eck et al. [5] described methods based on wavelet analysis that can be used to automatically create reasonably accurate low-detail models of surfaces.
Reference: [8] <author> B. Garlick, D. Baum, and J. Winget. </author> <title> Interactive viewing of large geometric databases using multiprocessor graphics workstations. SIG-GRAPH `90 Course Nores: Parallel Algorithms and Architectures for 3D Image Generation, </title> <year> 1990. </year>
Reference-contexts: Visibility culling Visibility culling algorithms attempt to avoid drawing objects that are not visible in the image. This approach was first investigated by Clark [4], who used an object hierarchy to rapidly cull surfaces that lie outside the viewing frustum. Garlick et al. <ref> [8] </ref> applied this idea to spatial subdivisions of scenes. View-frustum culling techniques are most effective when only a small part of the scene's geometry is inside the view frustum at any single frame.
Reference: [9] <author> Ned Greene, Michael Kass, and Gavin Miller. </author> <title> Hierarchical z-buffer visibility. </title> <booktitle> In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pp. 231-238, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: More recently, Lue-bke and Georges [11] developed a dynamic version of this algorithm that eliminates the preprocessing. Such methods can be very effective for densely occluded polyhedral environments, such as building interiors, but they are not suited for mostly unoccluded outdoor scenes. The hierarchical Z-buffer <ref> [9] </ref> is another approach to fast visibility culling that allows a region of the scene to be culled whenever its closest depth value is greater than those of the pixels that have al-ready been drawn at its projected screen location.
Reference: [10] <author> Timothy L. Kay and James T. Kajiya. </author> <title> Ray tracing complex scenes. </title> <journal> Computer Graphics, </journal> <volume> 20(4) </volume> <pages> 269-278, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: To facilitate finding the gaps between objects, we compute their extents with a method similar to the parallelepiped bounding volumes of Kay and Kajiya <ref> [10] </ref>. For each object, we compute its extent along each of N different directions on the unit sphere. Each splitting plane in the BSP-tree is constrained to be perpendicular to one of the N vectors.
Reference: [11] <author> Daivid Luebke and Chris Georges. </author> <title> Portals and mirrors: Simple, fast evaluation of potentially visible sets. </title> <booktitle> In 1995 Symposium on Interactive 3D Graphics, </booktitle> <pages> pp. 105-106, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Only the potentially visible set of polygons for the room currently containing the viewer needs to be rendered at each frame. Both of these methods require a lengthy preprocessing step for large models. More recently, Lue-bke and Georges <ref> [11] </ref> developed a dynamic version of this algorithm that eliminates the preprocessing. Such methods can be very effective for densely occluded polyhedral environments, such as building interiors, but they are not suited for mostly unoccluded outdoor scenes.
Reference: [12] <author> Paulo W. C. Maciel and Peter Shirley. </author> <title> Visual navigation of large environments using textured clusters. </title> <booktitle> In 1995 Symposium on Interactive 3D Graphics, </booktitle> <pages> pp. 95-102, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: Such an approach has been used since the early days of flight simulators, and has more recently been incorporated in walkthrough systems for complex environments by Funkhouser and Sequin [7], Maciel and Shirley <ref> [12] </ref>, and Chamberlain et al. [2]. One of the chief difficulties with the LOD approach is the problem of generating the various coarse-level representations of a model. Funkhouser and Sequin [7] created the different LOD models manually. <p> Funkhouser and Sequin [7] created the different LOD models manually. Eck et al. [5] described methods based on wavelet analysis that can be used to automatically create reasonably accurate low-detail models of surfaces. Maciel and Shirley <ref> [12] </ref> used a number of LOD representations, including geometric simplifications created by hand, texture maps, and colored bounding boxes. Chamberlain et al. [2] partitioned the scene into a spatial hierarchy of cells and associated with each cell a colored box representing its contents.
Reference: [13] <author> Leonard McMillan and Gary Bishop. </author> <title> Plenoptic modeling: An image-based rendering system. </title> <booktitle> In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pp. 39-46, </pages> <month> August </month> <year> 1995. </year>
Reference-contexts: Chen and Williams [3] and McMillan and Bishop <ref> [13] </ref> have demonstrated two variants of this approach for restricted movement in three-dimensional environments. Although not general purpose, these algorithms provide a viable method of rendering complex environments on machines that do not have fast graphics hardware.
Reference: [14] <author> Jackie Neider, Tom Davis, and Mason Woo. </author> <title> OpengGL Programming Guide. </title> <publisher> Addison Wesley, </publisher> <year> 1993. </year>
Reference-contexts: This extra geometry makes the overhead of creating a cached image for the node substantially larger. An important limiting factor on the performance of image caching is the constraint imposed by OpenGL <ref> [14] </ref> that texture maps have dimensions in powers of 2. Because of these limitations on texture size, almost half of the pixels in the textures defined by our method go unused.
Reference: [15] <author> Matthew Regan and Ronald Pose. </author> <title> Priority rendering with a virtual reality address recalculation pipeline. </title> <booktitle> In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <pages> pp. 155-162, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Images provide a method of rendering arbitrarily complex scenes in a constant amount of time. This idea is central to both of these papers and to the method we present here. Another image-based approach, described by Regan and Pose <ref> [15] </ref>, renders the scene onto the faces of a cube centered around the viewer location. Their method allows the display to be updated very rapidly when the viewer is standing in place and looking about. <p> In the case that the viewer is simply looking around, these culled caches are still valid representations of their regions. Suspending invalidation of image caches in this case could potentially save a great deal of computation, in much the same way as the method of Regan and Pose <ref> [15] </ref>. * Talisman. Image caching should prove even more effective in an architecture that optimizes the reuse of rendered images as texture maps or sprites, such as the Tasliman architecture [20].
Reference: [16] <author> Jarek Rossignac and Paul Borrel. </author> <title> Multi-resolution 3D approximations for rendering complex scenes. </title> <type> Research Report RC 17697 (#77951), </type> <institution> IBM, </institution> <address> Yorktown Heights, New York 10598, </address> <year> 1992. </year> <note> Also appeared in the IFIP TC 5.WG 5.10. </note>
Reference-contexts: Chamberlain et al. [2] partitioned the scene into a spatial hierarchy of cells and associated with each cell a colored box representing its contents. Another approach to creating LOD models is described by Rossignac and Borrel <ref> [16] </ref>, in which objects of arbitrary topology are simplified by collapsing groups of nearby vertices into a single representative vertex, regardless of whether they belong to the same logical part. Another problem with geometric LOD approaches is that the shading function becomes undersampled, as geometry is decimated.
Reference: [17] <author> Gernot Schaufler. </author> <title> Exploiting frame to frame coherence in a virtual reality system. </title> <booktitle> In Proceedings of VRAIS '96, </booktitle> <pages> pp. 95-102, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: Another important difference is that instead of simply reusing an object's image over several consecutive frames, we use texture-mapping hardware to compensate for motion parallax. Schaufler and Sturzlinger <ref> [17, 18] </ref> have concurrently and independently investigated ideas similar to our own.
Reference: [18] <author> Gernot Schaufler and Wolfgang St urzlinger. </author> <title> A three dimensional image cache for virtual reality. </title> <booktitle> In Proceedings of Eurographics '96, </booktitle> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: Another important difference is that instead of simply reusing an object's image over several consecutive frames, we use texture-mapping hardware to compensate for motion parallax. Schaufler and Sturzlinger <ref> [17, 18] </ref> have concurrently and independently investigated ideas similar to our own.
Reference: [19] <author> Seth J. Teller. </author> <title> Visibility Computations in Densely Occluded Polyhedral Environments. </title> <type> PhD thesis, </type> <institution> Computer Science Division (EECS), UC Berkeley, Berkeley, </institution> <address> California 94720, </address> <month> October </month> <year> 1992. </year> <note> Available as Report No. UCB/CSD-92-708. </note>
Reference-contexts: In a complex environment enough geometry remains inside the view frustum to overload the graphics pipeline, and additional acceleration techniques are required. Airey et al. [1] and Teller <ref> [19] </ref> described methods for interactive walkthroughs of complex buildings that compute the potentially visible set of polygons for each room in a building. Only the potentially visible set of polygons for the room currently containing the viewer needs to be rendered at each frame.
Reference: [20] <author> Jay Torborg and Jim Kajiya. Talisman: </author> <title> Commodity realtime 3D graphics for the PC. </title> <booktitle> In Computer Graphics Proceedings, Annual Conference Series, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: Image caching should prove even more effective in an architecture that optimizes the reuse of rendered images as texture maps or sprites, such as the Tasliman architecture <ref> [20] </ref>. To make the best use of Talisman's capabilities, an affine warp of the cached image should be computed rather than the more general perspective warp resulting from texture-map the cached im age onto a quadrilateral in 3D.
References-found: 20

