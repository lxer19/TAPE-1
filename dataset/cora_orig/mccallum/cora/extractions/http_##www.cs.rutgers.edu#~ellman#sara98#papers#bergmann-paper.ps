URL: http://www.cs.rutgers.edu/~ellman/sara98/papers/bergmann-paper.ps
Refering-URL: http://www.cs.rutgers.edu/~ellman/sara98/papers/
Root-URL: http://www.cs.rutgers.edu
Email: bergmann@informatik.uni-kl.de  
Title: Efficient Retrieval of Abstract Cases for Case-Based Planning  
Author: Ralph Bergmann 
Address: PO-Box 3049 D-67653 Kaiserslautern, Germany  
Affiliation: University of Kaiserslautern Centre for Learning Systems and Applications (LSA)  
Abstract: Recently, the use of abstraction in case-based reasoning (CBR) is getting more and more popular. The basic idea is to supply a CBR system with cases at many different levels of abstraction. When a new problem must be solved, one (or several) 'appropriate' concrete or abstract case are retrieved from the case base and the solution that the case contains is reused to derive a solution for the current problem, e.g. by filling in the details that a retrieved case at some higher level of abstraction does not contain. A major problem that occurs when using this approach is, that for a given new problem, usually several cases, e.g., from different levels of abstraction could be reused to solve the new problem. Choosing a wrong abstract case can slow down the problem solving process or even prevents the problem from being solved. This paper presents a new approach for selecting abstract cases from a case base within in the context of the case-based planning system Paris. Based on a general analysis of the efforts involved in abstraction-based CBR, the new retrieval technique is developed. Cases are organized in an abstraction hierarchy that is constructed during the retain phase. Abstract cases at higher levels of abstraction are located above abstract cases at lower levels. The leaf nodes of this hierarchy contain the concrete cases. Further, this abstraction hierarchy is pruned based on a cost model of the expected problem solving time in order to optimze the retrieval structure. Several experiments conducted in the domain of manufacturing planning shows clearly the advantage of the presented retrieval approach. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Aamodt, A. and Plaza, E. </author> <year> (1994). </year> <title> Case-based reasoning: Foundational issues, methodological variations, and system approaches. </title> <journal> AI Communications, </journal> <volume> 7(1) </volume> <pages> 39-59. </pages>
Reference: <author> Bergmann, R. </author> <year> (1996). </year> <title> Effizientes Problemlosen durch flexible Wiederverwendung von Fallen auf verschiede-nen Abstraktionsebenen (in German). DISKI 138, </title> <publisher> Infix Verlag, </publisher> <address> Sankt Augustin (Germany). </address>
Reference-contexts: As a result, an abstract solution to the new problem is obtained. Then, this adapted abstract solution is refined to a concrete solution to the problem. During this refinement process (which can be either done by a generative hierarchical problem solver or in a case-based manner, see <ref> (Bergmann and Wilke, 1996) </ref>) the details that the abstract case does not contain are added. The refined solution is then presented to the user. <p> The refined solution is then presented to the user. For her/him it is transparent, whether the solution presented by the system stems directly from a matching concrete cases or whether the solution is obtained through the refinement of an abstract case. In <ref> (Bergmann and Wilke, 1996) </ref> we have shown that in general abstraction can support the CBR process * by reducing the complexity of the case representa tion, * by reducing the size of the case base, * by increasing the flexibility of solution reuse, and * by providing a means for solution <p> The task of a case-based planning system in this domain is to produce a manufacturing plan (solution) for a new workpiece (problem) by reusing previous manufacturing cases. We have identified, a set of CBR specific requirements that are important in this domain <ref> (Bergmann, 1996) </ref>: * ability to cope with vast space of solution plans, * construction of correct solutions, * flexible reuse due to large spectrum of target prob lems, * processing of highly complex cases, and * only concrete planning cases available (e.g. in archives of a company). <p> Such classes are realized by introducing variables into the initial and goal state as well as into the plan. Additionally, a generalized case contains a set of constraints that restricts the instantiation of these variables. Paris includes an algorithm for automatically generalizing concrete or abstract cases into schemas <ref> (Bergmann, 1996) </ref> by applying explanation-based generalization (Mitchell et al., 1986). Adaptation with generalized cases is done by finding an instantiation of the variables such that instantiated generalized case matches the target problem to be solved. In Paris, matching (similarity assessment) and adaptation is done by a constraint satisfaction problem solver.
Reference: <author> Bergmann, R., Munoz-Avila, H., Veloso, M., and Melis, E. </author> <year> (1998). </year> <title> Case-based reasoning applied to planning tasks. </title> <editor> In Lenz, M., Bartsch-Spoerl, B., Burkhard, H.-D., and Wess, S., editors, </editor> <title> Case-Based Reasonig Technology from Foundations to Applications. </title> <publisher> Springer (in press). </publisher>
Reference-contexts: Since finding such a plan is known to be a NP-complete problem, several case-based approaches have been developed already that allow to make use of additional knowledge (in the form of previous cases) during planning <ref> (Bergmann et al., 1998) </ref>. The task of a case-based planning system in this domain is to produce a manufacturing plan (solution) for a new workpiece (problem) by reusing previous manufacturing cases.
Reference: <author> Bergmann, R. and Wilke, W. </author> <year> (1995). </year> <title> Building and refining abstract planning cases by change of representation language. </title> <journal> Journal of Artificial Intelligence Research, </journal> <volume> 3 </volume> <pages> 53-118. </pages>
Reference-contexts: Each abstract operator that occurs in an abstract case stands for a sub-sequence of concrete operators of the corresponding concrete case. In <ref> (Bergmann and Wilke, 1995) </ref> a comprehensive formal model of case abstraction is explained in detail. cases. Example detailed contour of workpieces and individual manufacturing operations (e.g., cutting a certain area) that must be performed. <p> Experimental Results We now present the results of an experimental study which shows the benefits of the developed retrieval approach. This study was done using the fully implemented Paris system in the domain of manufacturing planning for rotary symmetric workpieces on a lathe (see <ref> (Bergmann and Wilke, 1995) </ref> for details of the do main). For the experiments, 100 concrete cases were generated randomly. From these concrete cases a set of Table 1: Cases in the Case Base Selected Case average problem solving time Best case 12 sec.
Reference: <author> Bergmann, R. and Wilke, W. </author> <year> (1996). </year> <title> On the role of abstraction in case-based reasoning. </title> <editor> In Smith, I. and Faltings, B., editors, </editor> <booktitle> Advances in Case-Based Reasoning, Lecture Notes in Artificial Intelligence, </booktitle> <volume> 1186, </volume> <pages> pages 28-43. </pages> <publisher> Springer Verlag. </publisher>
Reference-contexts: As a result, an abstract solution to the new problem is obtained. Then, this adapted abstract solution is refined to a concrete solution to the problem. During this refinement process (which can be either done by a generative hierarchical problem solver or in a case-based manner, see <ref> (Bergmann and Wilke, 1996) </ref>) the details that the abstract case does not contain are added. The refined solution is then presented to the user. <p> The refined solution is then presented to the user. For her/him it is transparent, whether the solution presented by the system stems directly from a matching concrete cases or whether the solution is obtained through the refinement of an abstract case. In <ref> (Bergmann and Wilke, 1996) </ref> we have shown that in general abstraction can support the CBR process * by reducing the complexity of the case representa tion, * by reducing the size of the case base, * by increasing the flexibility of solution reuse, and * by providing a means for solution <p> The task of a case-based planning system in this domain is to produce a manufacturing plan (solution) for a new workpiece (problem) by reusing previous manufacturing cases. We have identified, a set of CBR specific requirements that are important in this domain <ref> (Bergmann, 1996) </ref>: * ability to cope with vast space of solution plans, * construction of correct solutions, * flexible reuse due to large spectrum of target prob lems, * processing of highly complex cases, and * only concrete planning cases available (e.g. in archives of a company). <p> Such classes are realized by introducing variables into the initial and goal state as well as into the plan. Additionally, a generalized case contains a set of constraints that restricts the instantiation of these variables. Paris includes an algorithm for automatically generalizing concrete or abstract cases into schemas <ref> (Bergmann, 1996) </ref> by applying explanation-based generalization (Mitchell et al., 1986). Adaptation with generalized cases is done by finding an instantiation of the variables such that instantiated generalized case matches the target problem to be solved. In Paris, matching (similarity assessment) and adaptation is done by a constraint satisfaction problem solver.
Reference: <author> Branting, K. and Aha, D. </author> <year> (1995). </year> <title> Stratified case-based reasoning: Reusing hierarchical problem solving episodes. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 384-390. </pages>
Reference-contexts: For these kind of approaches the terms hierarchical case-based reasoning (Smyth and Cunningham, 1992), stratified case-based reasoning <ref> (Branting and Aha, 1995) </ref>, and reasoning with abstract cases (Bergmann and Wilke, 1995; Bergmann, 1996; Bergmann and Wilke, 1996) have been used so far.
Reference: <author> Etzioni, O. and Etzioni, R. </author> <year> (1994). </year> <title> Statistical methods for analyzing speedup learning. </title> <journal> Machine Learning, </journal> <volume> 14 </volume> <pages> 333-347. </pages>
Reference-contexts: The respective curves are also plotted in Fig. 7. Table 1 summarizes the average problem solving time over the problems that could be solved for the three conditions. Additionally, the maximally conservative sign text as described in <ref> (Etzioni and Etzioni, 1994) </ref> was performed to determine whether the performance gain when selecting the retrieved case over selecting the average case was significant. As expected, it was significant with a p-value p &lt; 0:000001.
Reference: <author> Fikes, R. E. and Nilsson, N. J. </author> <year> (1971). </year> <title> Strips: A new approach to the application of theorem proving to problem solving. </title> <journal> Artificial Intelligence, </journal> <volume> 2 </volume> <pages> 189-208. </pages>
Reference-contexts: Here, a plan is a sequence of manufacturing steps that must be performed in order to produce a particular mechanical workpiece. Planning in this domain can be viewed as classical Strips <ref> (Fikes and Nilsson, 1971) </ref> planning: a (manufacturing) operator transforms a certain state (current workpiece) into a successor state (workpiece after the manufacturing step). The planning task is to find a sequence of operators which transform a mold (initial state) into the desired workpiece (goal state).
Reference: <author> Giunchiglia, F. and Walsh, T. </author> <year> (1992). </year> <title> A theory of abstraction. </title> <journal> Artificial Intelligence, </journal> <volume> 57 </volume> <pages> 323-389. </pages>
Reference-contexts: Introduction In AI, the use of abstraction was originally inspired by human problem solving (cf. (Minsky, 1963)) and has already been successfully used in different fields such as theorem proving, model-based diagnosis or planning <ref> (Giunchiglia and Walsh, 1992) </ref>. Recently, some researchers have started to investigate the use of abstraction in case-based reasoning (CBR).
Reference: <author> Holte, R. C., Mkadmi, T., Zimmer, R. M., and Mac-Donald, A. J. </author> <year> (1995). </year> <title> Speeding up problem solving by abstraction: A graph-oriented approach. </title> <type> Technical report, </type> <institution> University of Ottawa, </institution> <address> Ontario, Canada. </address>
Reference: <author> Kolodner, J. L. </author> <year> (1993). </year> <title> Case-based reasoning. </title> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Minsky, M. </author> <year> (1963). </year> <title> Steps toward artificial intelligence. </title> <editor> In Feigenbaum, E., editor, </editor> <booktitle> Computers and Thought. </booktitle> <publisher> McGraw-Hill, </publisher> <address> New York, NY. </address>
Reference-contexts: Introduction In AI, the use of abstraction was originally inspired by human problem solving (cf. <ref> (Minsky, 1963) </ref>) and has already been successfully used in different fields such as theorem proving, model-based diagnosis or planning (Giunchiglia and Walsh, 1992). Recently, some researchers have started to investigate the use of abstraction in case-based reasoning (CBR).
Reference: <author> Mitchell, T. M., Keller, R. M., and Kedar-Cabelli, S. T. </author> <year> (1986). </year> <title> Explanation-based generalization: A unifying view. </title> <journal> Machine Learning, </journal> <volume> 1(1) </volume> <pages> 47-80. </pages>
Reference-contexts: Additionally, a generalized case contains a set of constraints that restricts the instantiation of these variables. Paris includes an algorithm for automatically generalizing concrete or abstract cases into schemas (Bergmann, 1996) by applying explanation-based generalization <ref> (Mitchell et al., 1986) </ref>. Adaptation with generalized cases is done by finding an instantiation of the variables such that instantiated generalized case matches the target problem to be solved. In Paris, matching (similarity assessment) and adaptation is done by a constraint satisfaction problem solver.
Reference: <author> Sacerdoti, E. </author> <year> (1974). </year> <title> Planning in a hierarchy of abstraction spaces. </title> <journal> Artificial Intelligence, </journal> <volume> 5 </volume> <pages> 115-135. </pages>
Reference-contexts: Moreover, abstract levels model the world in a less precise way, but still capture certain, important properties. In traditional hierarchical problem solving (e.g., Abstrips <ref> (Sacerdoti, 1974) </ref>), abstraction levels are constructed by simply dropping certain features of the more concrete representation levels. However, it has been shown that this view of abstraction is too restrictive and representation dependent (Bergmann and Wilke, 1995; Holte et al., 1995) to make full use of the abstraction idea.
Reference: <author> Smyth, B. and Cunningham, P. </author> <year> (1992). </year> <title> Deja vu: A hierarchical case-based reasoning system for software design. </title> <editor> In Neumann, B., editor, </editor> <booktitle> ECAI-92, </booktitle> <pages> pages 587-589. </pages>
Reference-contexts: For these kind of approaches the terms hierarchical case-based reasoning <ref> (Smyth and Cunningham, 1992) </ref>, stratified case-based reasoning (Branting and Aha, 1995), and reasoning with abstract cases (Bergmann and Wilke, 1995; Bergmann, 1996; Bergmann and Wilke, 1996) have been used so far.
Reference: <author> Veloso, M. M. </author> <year> (1992). </year> <title> Learning by analogical reasoning in general problem solving. </title> <type> PhD thesis, </type> <institution> Carnegie Mellon University, </institution> <address> Pittsburgh, PA. </address>
Reference-contexts: Besides the selection of an abstract case that can be reused efficiently, the retrieval process itself must be efficient as well. A trade-off between the objective to find the best case and the objective of minimizing the retrieval time exists as depicted in Figure 5 (adapted from <ref> (Veloso, 1992) </ref>). As the number of cases visited during retrieval increases, more time must be spent for retrieval (see curve 2) but better cases resulting in a shorter adaptation time will be found (see curve 1).
References-found: 16

