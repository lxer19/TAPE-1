URL: http://www.daimi.aau.dk/~mis/popl94.ps
Refering-URL: http://www.daimi.aau.dk/~mis/teaching.html
Root-URL: http://www.daimi.aau.dk
Email: mis@daimi.aau.dk  
Title: Developments in Object-Oriented Type Systems  Programming Languages  
Author: Michael I. Schwartzbach c Michael I. Schwartzbach 
Note: Tutorial presentation at POPL'94 21st Annual ACM SIGACT SIGPLAN Symposium on Principles of  
Address: Ny Munkegade, 8000 Arhus C, Denmark  
Affiliation: Computer Science Department Aarhus University  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> Martin Abadi and Luca Cardelli. </author> <title> A theory of primitive objects: Second-order systems. </title> <booktitle> In Proc. ESOP'94, European Symposium on Programming. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: Slide 74-78 Multiple inheritance is discussed in [99, 8, 17, 81, 58]. Slide 80-83 The basic encoding is from [17, 21]. The update problem is made clear in [12]. Mutable types are from [18]. Simpler, specialized subtyping systems are presented in <ref> [109, 88, 70, 68, 71, 2, 1, 52] </ref>. Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in [20]. Recursion and inheritance is analyzed in [33, 14, 15, 5]. A calculus with covariant specialization is proposed in [41, 22, 23].
Reference: [2] <author> Martin Abadi and Luca Cardelli. </author> <title> A theory of primitive objects: Untyped and first-order systems. </title> <booktitle> In Proc. TACS'94, Theoretical Aspects of Computing Software. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <note> To appear. </note>
Reference-contexts: Slide 74-78 Multiple inheritance is discussed in [99, 8, 17, 81, 58]. Slide 80-83 The basic encoding is from [17, 21]. The update problem is made clear in [12]. Mutable types are from [18]. Simpler, specialized subtyping systems are presented in <ref> [109, 88, 70, 68, 71, 2, 1, 52] </ref>. Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in [20]. Recursion and inheritance is analyzed in [33, 14, 15, 5]. A calculus with covariant specialization is proposed in [41, 22, 23].
Reference: [3] <author> Ole Agesen, Lars Bak, Craig Chambers, Bay-Wei Chang, Urs Holzle, John Maloney, Randall B. Smith, and David Ungar. </author> <title> The SELF programmer's reference manual. </title> <type> Technical report, </type> <institution> Sun Microsystems, Inc, </institution> <address> 2550 Garcia Avenue, Mountain View, CA 94043, USA, </address> <year> 1992. </year> <note> Version 2.0. </note>
Reference-contexts: Slide 96 ML modules are described in [67, 106]. Slide 97 Approaches to genericity are discussed in [63, 49, 61, 73, 83]. Annotated Bibliography 104 Slide 98 Multi-methods are presented in [53, 72, 24, 25]. Slide 99 The Self language is described in <ref> [108, 26, 27, 28, 48, 3] </ref>.
Reference: [4] <author> Ole Agesen, Jens Palsberg, and Michael I. Schwartzbach. </author> <title> Type inference of Self: Analysis of objects with dynamic and multiple inheritance. </title> <booktitle> In Proc. ECOOP'93, Seventh European Conference on Object-Oriented Programming, </booktitle> <pages> pages 247-267, </pages> <address> Kaiserslautern, Germany, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: Abstract data types are employed in [86, 85]; their relation to classes is discussed earlier in [31]. Large languages are presented in [13, 11]. Slide 86 Type inference for simple subtyping is developed in [69, 102, 59, 74, 105, 55, 104]. Slide 88-94 Class inference is developed in <ref> [101, 45, 79, 76, 4] </ref>. Slide 96 ML modules are described in [67, 106]. Slide 97 Approaches to genericity are discussed in [63, 49, 61, 73, 83]. Annotated Bibliography 104 Slide 98 Multi-methods are presented in [53, 72, 24, 25].
Reference: [5] <author> Roberto M. Amadio and Luca Cardelli. </author> <title> Subtyping recursive types. </title> <booktitle> In Eighteenth Symposium on Principles of Programming Languages, </booktitle> <pages> pages 104-118. </pages> <publisher> ACM Press, </publisher> <month> January </month> <year> 1991. </year> <note> To appear in ACM TOPLAS, Transactions on Programming Languages and Systems. </note>
Reference-contexts: Mutable types are from [18]. Simpler, specialized subtyping systems are presented in [109, 88, 70, 68, 71, 2, 1, 52]. Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in [20]. Recursion and inheritance is analyzed in <ref> [33, 14, 15, 5] </ref>. A calculus with covariant specialization is proposed in [41, 22, 23]. Undecidability of bounded polymorphism is shown in [84]. Abstract data types are employed in [86, 85]; their relation to classes is discussed earlier in [31]. Large languages are presented in [13, 11].
Reference: [6] <author> Andrew Black, Norman Hutchinson, Eric Jul, Henry Levy, and Larry Carter. </author> <title> Distribution and abstract types in Emerald. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 13(1) </volume> <pages> 65-76, </pages> <year> 1987. </year> <note> Also Technical Report 86-02-04, </note> <institution> Department of Computer Science, University of Washington. </institution> <note> Annotated Bibliography 105 </note>
Reference: [7] <author> Andrew P. Black and Norman Hutchinson. </author> <title> Typechecking poly--morphism in Emerald. </title> <type> Technical report, </type> <institution> Digital Cambridge Research Laboratory, One Kendall Square, </institution> <address> Building 700, Cam-bridge, MA 02139, </address> <month> December </month> <year> 1990. </year> <type> Technical Report CRL 91/1. </type>
Reference: [8] <author> Alan H. Borning and Daniel H. H. Ingalls. </author> <title> Multiple inheritance in Smalltalk80. </title> <booktitle> In Proc. AAAI, </booktitle> <year> 1982. </year>
Reference-contexts: introduction or conclusion of most of the referenced papers. See also archives of the objecttypes@daimi.aau.dk mailing list. Arguments from both sides of the debate are presented in [19]. Slide 73 Proposals in [13, 11, 10] have coexisting inheritance and subtyping hierarchies. Slide 74-78 Multiple inheritance is discussed in <ref> [99, 8, 17, 81, 58] </ref>. Slide 80-83 The basic encoding is from [17, 21]. The update problem is made clear in [12]. Mutable types are from [18]. Simpler, specialized subtyping systems are presented in [109, 88, 70, 68, 71, 2, 1, 52]. Minimal calculi are proposed in [40, 92, 16].
Reference: [9] <author> Gilad Bracha and William Cook. </author> <title> Mixin-based inheritance. </title> <booktitle> In Proc. OOPSLA/ECOOP'90, ACM SIGPLAN Fifth Annual Conference on Object-Oriented Programming Systems, Languages and Applications; European Conference on Object-Oriented Programming, </booktitle> <pages> pages 303-311, </pages> <year> 1990. </year>
Reference: [10] <author> Gilad Bracha and David Griswold. Strongtalk: </author> <title> Typechecking Smalltalk in a production environment. </title> <booktitle> In Proc. OOPSLA'93, Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 215-230, </pages> <year> 1993. </year>
Reference-contexts: introduction or conclusion of most of the referenced papers. See also archives of the objecttypes@daimi.aau.dk mailing list. Arguments from both sides of the debate are presented in [19]. Slide 73 Proposals in <ref> [13, 11, 10] </ref> have coexisting inheritance and subtyping hierarchies. Slide 74-78 Multiple inheritance is discussed in [99, 8, 17, 81, 58]. Slide 80-83 The basic encoding is from [17, 21]. The update problem is made clear in [12]. Mutable types are from [18].
Reference: [11] <author> K. Bruce, J. Crabtree, A. Dimock, R. Muller, T. Murtagh, and R. van Gent. </author> <title> Safe and decidable type checking in an object-oriented language. </title> <booktitle> In Proc. OOPSLA'93, Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 29-46, </pages> <year> 1993. </year>
Reference-contexts: introduction or conclusion of most of the referenced papers. See also archives of the objecttypes@daimi.aau.dk mailing list. Arguments from both sides of the debate are presented in [19]. Slide 73 Proposals in <ref> [13, 11, 10] </ref> have coexisting inheritance and subtyping hierarchies. Slide 74-78 Multiple inheritance is discussed in [99, 8, 17, 81, 58]. Slide 80-83 The basic encoding is from [17, 21]. The update problem is made clear in [12]. Mutable types are from [18]. <p> A calculus with covariant specialization is proposed in [41, 22, 23]. Undecidability of bounded polymorphism is shown in [84]. Abstract data types are employed in [86, 85]; their relation to classes is discussed earlier in [31]. Large languages are presented in <ref> [13, 11] </ref>. Slide 86 Type inference for simple subtyping is developed in [69, 102, 59, 74, 105, 55, 104]. Slide 88-94 Class inference is developed in [101, 45, 79, 76, 4]. Slide 96 ML modules are described in [67, 106].
Reference: [12] <author> Kim B. Bruce and Giuseppe Longo. </author> <title> A modest model of records, inheritance, and bounded quatification. </title> <journal> Information and Computation, </journal> <volume> 87 </volume> <pages> 196-240, </pages> <year> 1990. </year>
Reference-contexts: Slide 73 Proposals in [13, 11, 10] have coexisting inheritance and subtyping hierarchies. Slide 74-78 Multiple inheritance is discussed in [99, 8, 17, 81, 58]. Slide 80-83 The basic encoding is from [17, 21]. The update problem is made clear in <ref> [12] </ref>. Mutable types are from [18]. Simpler, specialized subtyping systems are presented in [109, 88, 70, 68, 71, 2, 1, 52]. Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in [20]. Recursion and inheritance is analyzed in [33, 14, 15, 5].
Reference: [13] <author> Kim B. Bruce and Robert van Gent. </author> <title> TOIL: A new type-safe object-oriented imperative language. </title> <note> To appear, </note> <year> 1993. </year>
Reference-contexts: introduction or conclusion of most of the referenced papers. See also archives of the objecttypes@daimi.aau.dk mailing list. Arguments from both sides of the debate are presented in [19]. Slide 73 Proposals in <ref> [13, 11, 10] </ref> have coexisting inheritance and subtyping hierarchies. Slide 74-78 Multiple inheritance is discussed in [99, 8, 17, 81, 58]. Slide 80-83 The basic encoding is from [17, 21]. The update problem is made clear in [12]. Mutable types are from [18]. <p> A calculus with covariant specialization is proposed in [41, 22, 23]. Undecidability of bounded polymorphism is shown in [84]. Abstract data types are employed in [86, 85]; their relation to classes is discussed earlier in [31]. Large languages are presented in <ref> [13, 11] </ref>. Slide 86 Type inference for simple subtyping is developed in [69, 102, 59, 74, 105, 55, 104]. Slide 88-94 Class inference is developed in [101, 45, 79, 76, 4]. Slide 96 ML modules are described in [67, 106].
Reference: [14] <author> Peter S. Canning, William R. Cook, Walter L. Hill, John Mitchell, and Walter G. Olthoff. </author> <title> F-bounded polymorphism for object-oriented programming. </title> <booktitle> In Proc. Conference on Functional Programming Languages and Computer Architecture, </booktitle> <pages> pages 273-280, </pages> <year> 1989. </year>
Reference-contexts: Mutable types are from [18]. Simpler, specialized subtyping systems are presented in [109, 88, 70, 68, 71, 2, 1, 52]. Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in [20]. Recursion and inheritance is analyzed in <ref> [33, 14, 15, 5] </ref>. A calculus with covariant specialization is proposed in [41, 22, 23]. Undecidability of bounded polymorphism is shown in [84]. Abstract data types are employed in [86, 85]; their relation to classes is discussed earlier in [31]. Large languages are presented in [13, 11].
Reference: [15] <author> Peter S. Canning, William R. Cook, Walter L. Hill, and Wal-ter G. Olthoff. </author> <title> Interfaces for strongly-typed object-oriented Annotated Bibliography 106 programming. </title> <booktitle> In Proc. OOPSLA'89, Fourth Annual Confer--ence on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 457-467. </pages> <publisher> ACM, </publisher> <year> 1989. </year>
Reference-contexts: Mutable types are from [18]. Simpler, specialized subtyping systems are presented in [109, 88, 70, 68, 71, 2, 1, 52]. Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in [20]. Recursion and inheritance is analyzed in <ref> [33, 14, 15, 5] </ref>. A calculus with covariant specialization is proposed in [41, 22, 23]. Undecidability of bounded polymorphism is shown in [84]. Abstract data types are employed in [86, 85]; their relation to classes is discussed earlier in [31]. Large languages are presented in [13, 11].
Reference: [16] <author> L. Cardelli, J. C. Mitchell, S. Martini, and A. Scedrov. </author> <title> An extension of system F with subtyping. </title> <booktitle> In Proc. </booktitle> <address> TACS'91, </address> <year> 1991. </year>
Reference-contexts: Slide 80-83 The basic encoding is from [17, 21]. The update problem is made clear in [12]. Mutable types are from [18]. Simpler, specialized subtyping systems are presented in [109, 88, 70, 68, 71, 2, 1, 52]. Minimal calculi are proposed in <ref> [40, 92, 16] </ref>. A speciale case of the update problem is tackled in [20]. Recursion and inheritance is analyzed in [33, 14, 15, 5]. A calculus with covariant specialization is proposed in [41, 22, 23]. Undecidability of bounded polymorphism is shown in [84].
Reference: [17] <author> Luca Cardelli. </author> <title> A semantics of multiple inheritance. </title> <editor> In Gilles Kahn, David MacQueen, and Gordon Plotkin, editors, </editor> <booktitle> Semantics of Data Types, </booktitle> <pages> pages 51-68. </pages> <publisher> Springer-Verlag (LNCS 173), </publisher> <year> 1984. </year>
Reference-contexts: introduction or conclusion of most of the referenced papers. See also archives of the objecttypes@daimi.aau.dk mailing list. Arguments from both sides of the debate are presented in [19]. Slide 73 Proposals in [13, 11, 10] have coexisting inheritance and subtyping hierarchies. Slide 74-78 Multiple inheritance is discussed in <ref> [99, 8, 17, 81, 58] </ref>. Slide 80-83 The basic encoding is from [17, 21]. The update problem is made clear in [12]. Mutable types are from [18]. Simpler, specialized subtyping systems are presented in [109, 88, 70, 68, 71, 2, 1, 52]. Minimal calculi are proposed in [40, 92, 16]. <p> Arguments from both sides of the debate are presented in [19]. Slide 73 Proposals in [13, 11, 10] have coexisting inheritance and subtyping hierarchies. Slide 74-78 Multiple inheritance is discussed in [99, 8, 17, 81, 58]. Slide 80-83 The basic encoding is from <ref> [17, 21] </ref>. The update problem is made clear in [12]. Mutable types are from [18]. Simpler, specialized subtyping systems are presented in [109, 88, 70, 68, 71, 2, 1, 52]. Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in [20].
Reference: [18] <author> Luca Cardelli. </author> <title> Typeful programming. </title> <type> Technical Report No. 45, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <year> 1989. </year>
Reference-contexts: Slide 73 Proposals in [13, 11, 10] have coexisting inheritance and subtyping hierarchies. Slide 74-78 Multiple inheritance is discussed in [99, 8, 17, 81, 58]. Slide 80-83 The basic encoding is from [17, 21]. The update problem is made clear in [12]. Mutable types are from <ref> [18] </ref>. Simpler, specialized subtyping systems are presented in [109, 88, 70, 68, 71, 2, 1, 52]. Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in [20]. Recursion and inheritance is analyzed in [33, 14, 15, 5].
Reference: [19] <author> Luca Cardelli, Jim Donahue, Mick Jordan, Bill Kaslow, and Greg Nelson. </author> <title> The modula-3 type system. </title> <booktitle> In Proc. POPL'89, Sixteenth Annual SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 202-212, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: introduction or conclusion of most of the referenced papers. See also archives of the objecttypes@daimi.aau.dk mailing list. Arguments from both sides of the debate are presented in <ref> [19] </ref>. Slide 73 Proposals in [13, 11, 10] have coexisting inheritance and subtyping hierarchies. Slide 74-78 Multiple inheritance is discussed in [99, 8, 17, 81, 58]. Slide 80-83 The basic encoding is from [17, 21]. The update problem is made clear in [12]. Mutable types are from [18].
Reference: [20] <author> Luca Cardelli and John C. Mitchell. </author> <title> Operations on records. </title> <booktitle> In Proc. Mathmatical Foundations of Programming Semantics, </booktitle> <pages> pages 22-52. </pages> <publisher> Springer-Verlag (LNCS 442), </publisher> <year> 1989. </year>
Reference-contexts: The update problem is made clear in [12]. Mutable types are from [18]. Simpler, specialized subtyping systems are presented in [109, 88, 70, 68, 71, 2, 1, 52]. Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in <ref> [20] </ref>. Recursion and inheritance is analyzed in [33, 14, 15, 5]. A calculus with covariant specialization is proposed in [41, 22, 23]. Undecidability of bounded polymorphism is shown in [84]. Abstract data types are employed in [86, 85]; their relation to classes is discussed earlier in [31].
Reference: [21] <author> Luca Cardelli and Peter Wegner. </author> <title> On understanding types, data abstraction, and polymorphism. </title> <journal> ACM Computing Surveys, </journal> <volume> 17(4) </volume> <pages> 471-522, </pages> <month> December </month> <year> 1985. </year>
Reference-contexts: Arguments from both sides of the debate are presented in [19]. Slide 73 Proposals in [13, 11, 10] have coexisting inheritance and subtyping hierarchies. Slide 74-78 Multiple inheritance is discussed in [99, 8, 17, 81, 58]. Slide 80-83 The basic encoding is from <ref> [17, 21] </ref>. The update problem is made clear in [12]. Mutable types are from [18]. Simpler, specialized subtyping systems are presented in [109, 88, 70, 68, 71, 2, 1, 52]. Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in [20].
Reference: [22] <author> Giuseppe Castagna, Giorgio Ghelli, and Giuseppe Longo. </author> <title> A calculus for overloaded functions with subtyping. </title> <journal> Information and Computation. </journal> <note> To appear. </note>
Reference-contexts: Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in [20]. Recursion and inheritance is analyzed in [33, 14, 15, 5]. A calculus with covariant specialization is proposed in <ref> [41, 22, 23] </ref>. Undecidability of bounded polymorphism is shown in [84]. Abstract data types are employed in [86, 85]; their relation to classes is discussed earlier in [31]. Large languages are presented in [13, 11].
Reference: [23] <author> Guiseppe Castagna. </author> <title> F & : Integrating parametric and "ad hoc" second order polymorphism. </title> <booktitle> In Proc. 4th International Workshop on Database Programming Languages, </booktitle> <pages> pages 335-355. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in [20]. Recursion and inheritance is analyzed in [33, 14, 15, 5]. A calculus with covariant specialization is proposed in <ref> [41, 22, 23] </ref>. Undecidability of bounded polymorphism is shown in [84]. Abstract data types are employed in [86, 85]; their relation to classes is discussed earlier in [31]. Large languages are presented in [13, 11].
Reference: [24] <author> Craig Chambers. </author> <title> Object-oriented multi-methods in cecil. </title> <booktitle> In Proc. ECOOP'92, Sixth European Conference on Object-Oriented Programming. </booktitle> <publisher> Springer-Verlag (LNCS 615), </publisher> <month> July </month> <year> 1992. </year> <title> Annotated Bibliography 107 </title>
Reference-contexts: Slide 88-94 Class inference is developed in [101, 45, 79, 76, 4]. Slide 96 ML modules are described in [67, 106]. Slide 97 Approaches to genericity are discussed in [63, 49, 61, 73, 83]. Annotated Bibliography 104 Slide 98 Multi-methods are presented in <ref> [53, 72, 24, 25] </ref>. Slide 99 The Self language is described in [108, 26, 27, 28, 48, 3].
Reference: [25] <author> Craig Chambers. </author> <title> The cecil language specification and ratio-nale. </title> <type> Technical Report 93-03-05, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <year> 1993. </year>
Reference-contexts: Slide 88-94 Class inference is developed in [101, 45, 79, 76, 4]. Slide 96 ML modules are described in [67, 106]. Slide 97 Approaches to genericity are discussed in [63, 49, 61, 73, 83]. Annotated Bibliography 104 Slide 98 Multi-methods are presented in <ref> [53, 72, 24, 25] </ref>. Slide 99 The Self language is described in [108, 26, 27, 28, 48, 3].
Reference: [26] <author> Craig Chambers and David Ungar. </author> <title> Customization: Optimizing compiler technology for self, a dynamically-typed object-oriented programming language. </title> <booktitle> In Proc. SIGPLAN'89 Conference on Programming Language Design and Implementation, </booktitle> <year> 1989. </year> <note> Published as SIGPLAN Notices 24(7), </note> <month> July, </month> <year> 1989. </year>
Reference-contexts: Slide 96 ML modules are described in [67, 106]. Slide 97 Approaches to genericity are discussed in [63, 49, 61, 73, 83]. Annotated Bibliography 104 Slide 98 Multi-methods are presented in [53, 72, 24, 25]. Slide 99 The Self language is described in <ref> [108, 26, 27, 28, 48, 3] </ref>.
Reference: [27] <author> Craig Chambers and David Ungar. </author> <title> Iterative type analysis and extended message splitting: Optimizing dynamically-typed object-oriented programs a dynamically-typed object-oriented programming language. </title> <booktitle> In Proc. SIGPLAN'90 Conference on Programming Language Design and Implementation, </booktitle> <year> 1990. </year> <note> Published as SIGPLAN Notices 25(6), </note> <month> June, </month> <year> 1990. </year>
Reference-contexts: Slide 96 ML modules are described in [67, 106]. Slide 97 Approaches to genericity are discussed in [63, 49, 61, 73, 83]. Annotated Bibliography 104 Slide 98 Multi-methods are presented in [53, 72, 24, 25]. Slide 99 The Self language is described in <ref> [108, 26, 27, 28, 48, 3] </ref>.
Reference: [28] <author> Craig Chambers and David Ungar. </author> <title> Making pure object-oriented languages practical. </title> <booktitle> In Proc. OOPSLA'89, ACM SIGPLAN Sixth Annual Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 1-15, </pages> <year> 1991. </year>
Reference-contexts: Slide 96 ML modules are described in [67, 106]. Slide 97 Approaches to genericity are discussed in [63, 49, 61, 73, 83]. Annotated Bibliography 104 Slide 98 Multi-methods are presented in [53, 72, 24, 25]. Slide 99 The Self language is described in <ref> [108, 26, 27, 28, 48, 3] </ref>.
Reference: [29] <author> Craig Chambers, David Ungar, Bay-Wei Chang, and Urs Holzle. </author> <title> Parents are shared parts of objects: Inheritance and encapsulation in Self. </title> <journal> Lisp and Symbolic Computation, </journal> <volume> 4(3) </volume> <pages> 207-222, </pages> <month> June </month> <year> 1991. </year>
Reference: [30] <editor> W. Clinger and J.Rees (editors). </editor> <title> Revised report on the algorithmic language Scheme. LISP Pointers, </title> <address> IV(3):1-55, </address> <year> 1991. </year>
Reference: [31] <author> William Cook. </author> <title> Object-oriented programming versus abstract data types. </title> <booktitle> In Proc. REX Workshop/School on the Foundations of Object-Oriented Languages. </booktitle> <publisher> Springer-Verlag (LNCS 489), </publisher> <year> 1990. </year>
Reference-contexts: Recursion and inheritance is analyzed in [33, 14, 15, 5]. A calculus with covariant specialization is proposed in [41, 22, 23]. Undecidability of bounded polymorphism is shown in [84]. Abstract data types are employed in [86, 85]; their relation to classes is discussed earlier in <ref> [31] </ref>. Large languages are presented in [13, 11]. Slide 86 Type inference for simple subtyping is developed in [69, 102, 59, 74, 105, 55, 104]. Slide 88-94 Class inference is developed in [101, 45, 79, 76, 4]. Slide 96 ML modules are described in [67, 106].
Reference: [32] <author> William Cook, Walter Hill, and Peter Canning. </author> <title> Inheritance is not subtyping. </title> <booktitle> In Seventeenth Symposium on Principles of Programming Languages, </booktitle> <pages> pages 125-135. </pages> <publisher> ACM Press, </publisher> <month> January </month> <year> 1990. </year>
Reference: [33] <author> William Cook and Jens Palsberg. </author> <title> A denotational semantics of inheritance and its correctness. Information and Computa Annotated Bibliography 108 tion. </title> <note> To appear. Also in Proc. </note> <editor> OOPSLA'89, </editor> <booktitle> ACM SIGPLAN Fourth Annual Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 433-443, </pages> <address> New Orleans, Louisiana, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: Mutable types are from [18]. Simpler, specialized subtyping systems are presented in [109, 88, 70, 68, 71, 2, 1, 52]. Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in [20]. Recursion and inheritance is analyzed in <ref> [33, 14, 15, 5] </ref>. A calculus with covariant specialization is proposed in [41, 22, 23]. Undecidability of bounded polymorphism is shown in [84]. Abstract data types are employed in [86, 85]; their relation to classes is discussed earlier in [31]. Large languages are presented in [13, 11].
Reference: [34] <author> William R. Cook. </author> <title> A proposal for making Eiffel type-safe. </title> <journal> The Computer Journal, </journal> <volume> 32(4) </volume> <pages> 305-311, </pages> <year> 1989. </year>
Reference: [35] <author> William R. Cook. </author> <title> Interfaces and specifications for the Smalltalk-80 collection classes. </title> <booktitle> In Proc. OOPSLA'92, ACM SIGPLAN Seventh Annual Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 1-15, </pages> <year> 1992. </year>
Reference: [36] <author> Ole-Johan Dahl, Bjorn Myhrhaug, and Kristen Nygaard. </author> <title> Sim-ula 67 common base language. </title> <type> Technical report, </type> <institution> Norwegian Computing Center, Oslo, Norway, </institution> <year> 1968. </year>
Reference: [37] <author> Ole-Johan Dahl and Kristen Nygaard. </author> <title> Simula|an Algol-based simulation language. </title> <journal> Communications of the ACM, </journal> <volume> 9(9) </volume> <pages> 671-678, </pages> <month> September </month> <year> 1966. </year>
Reference: [38] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C ++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <year> 1990. </year>
Reference: [39] <author> Bertrand Meyer et al. </author> <title> Eiffel: The Language, </title> <type> Version 2.2. </type> <institution> Interactive Software Engineering Inc., </institution> <year> 1989. </year>
Reference: [40] <author> J. Fairbairn. </author> <title> Ponder and its type system. </title> <type> Technical Report 31, </type> <institution> University of Cambridge Computer Laboratory, </institution> <year> 1982. </year>
Reference-contexts: Slide 80-83 The basic encoding is from [17, 21]. The update problem is made clear in [12]. Mutable types are from [18]. Simpler, specialized subtyping systems are presented in [109, 88, 70, 68, 71, 2, 1, 52]. Minimal calculi are proposed in <ref> [40, 92, 16] </ref>. A speciale case of the update problem is tackled in [20]. Recursion and inheritance is analyzed in [33, 14, 15, 5]. A calculus with covariant specialization is proposed in [41, 22, 23]. Undecidability of bounded polymorphism is shown in [84].
Reference: [41] <author> Giorgio Ghelli. </author> <title> A static type system for message passing. </title> <booktitle> In Proc. OOPSLA'91, ACM SIGPLAN Sixth Annual Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 129-145, </pages> <year> 1991. </year>
Reference-contexts: Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in [20]. Recursion and inheritance is analyzed in [33, 14, 15, 5]. A calculus with covariant specialization is proposed in <ref> [41, 22, 23] </ref>. Undecidability of bounded polymorphism is shown in [84]. Abstract data types are employed in [86, 85]; their relation to classes is discussed earlier in [31]. Large languages are presented in [13, 11].
Reference: [42] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80|The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference: [43] <author> Adele Goldberg and David Robson. </author> <title> Smalltalk-80|The Language. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year> <title> Annotated Bibliography 109 </title>
Reference: [44] <author> Justin O. Graver and Ralph E. Johnson. </author> <title> A type system for Smalltalk. </title> <booktitle> In Seventeenth Symposium on Principles of Programming Languages, </booktitle> <pages> pages 136-150. </pages> <publisher> ACM Press, </publisher> <month> January </month> <year> 1990. </year>
Reference: [45] <author> Justin Owen Graver. </author> <title> Type-Checking and Type-Inference for Object-Oriented Programming Languages. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> August </month> <year> 1989. </year> <month> UIUCD-R-89-1539. </month>
Reference-contexts: Abstract data types are employed in [86, 85]; their relation to classes is discussed earlier in [31]. Large languages are presented in [13, 11]. Slide 86 Type inference for simple subtyping is developed in [69, 102, 59, 74, 105, 55, 104]. Slide 88-94 Class inference is developed in <ref> [101, 45, 79, 76, 4] </ref>. Slide 96 ML modules are described in [67, 106]. Slide 97 Approaches to genericity are discussed in [63, 49, 61, 73, 83]. Annotated Bibliography 104 Slide 98 Multi-methods are presented in [53, 72, 24, 25].
Reference: [46] <author> Daniel C. Halbert and Patrick D. O'Brian. </author> <title> Using types and inheritance in object-oriented programming. </title> <journal> IEEE Software, </journal> <month> September </month> <year> 1987. </year>
Reference: [47] <author> J. Roger Hindley. </author> <title> The principal type scheme of an object in combinatory logic. </title> <journal> Transactions of the American Mathmatical Society, </journal> <volume> 146 </volume> <pages> 29-60, </pages> <year> 1969. </year>
Reference: [48] <author> Urs Holzle, Craig Chambers, and David Ungar. </author> <title> Optimizing dynamically-typed object-oriented languages with polymorphic inline caches. </title> <booktitle> In Proc. ECOOP'91, Fifth European Conference on Object-Oriented Programming, </booktitle> <pages> pages 21-38, </pages> <year> 1991. </year>
Reference-contexts: Slide 96 ML modules are described in [67, 106]. Slide 97 Approaches to genericity are discussed in [63, 49, 61, 73, 83]. Annotated Bibliography 104 Slide 98 Multi-methods are presented in [53, 72, 24, 25]. Slide 99 The Self language is described in <ref> [108, 26, 27, 28, 48, 3] </ref>.
Reference: [49] <author> Chris Horn. </author> <title> Conformance, genericity, inheritance, and enhancement. </title> <booktitle> In Proc. ECOOP'87, European Conference on Object-Oriented Programming, </booktitle> <pages> pages 223-233. </pages> <publisher> Springer-Verlag (LNCS 276), </publisher> <year> 1987. </year>
Reference-contexts: Slide 86 Type inference for simple subtyping is developed in [69, 102, 59, 74, 105, 55, 104]. Slide 88-94 Class inference is developed in [101, 45, 79, 76, 4]. Slide 96 ML modules are described in [67, 106]. Slide 97 Approaches to genericity are discussed in <ref> [63, 49, 61, 73, 83] </ref>. Annotated Bibliography 104 Slide 98 Multi-methods are presented in [53, 72, 24, 25]. Slide 99 The Self language is described in [108, 26, 27, 28, 48, 3].
Reference: [50] <author> Norman Hutchinson. </author> <title> Emerald: An Object-Oriented Language for Distributed Programming. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, University of Washington, </institution> <month> January </month> <year> 1987. </year>
Reference: [51] <author> Ralph E. Johnson. </author> <title> Type-checking Smalltalk. </title> <booktitle> In Proc. OOP-SLA'86, Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 315-321. </pages> <booktitle> Sigplan Notices, </booktitle> <volume> 21(11), </volume> <month> November </month> <year> 1986. </year>
Reference: [52] <author> Dinesh Katiyar, David Luckham, and John Mitchell. </author> <title> A type system for prototyping languages. </title> <booktitle> In Proc. POPL'94, 21st Annual Symposium on Principles of Programming Languages, </booktitle> <year> 1994. </year> <title> Annotated Bibliography 110 </title>
Reference-contexts: Slide 74-78 Multiple inheritance is discussed in [99, 8, 17, 81, 58]. Slide 80-83 The basic encoding is from [17, 21]. The update problem is made clear in [12]. Mutable types are from [18]. Simpler, specialized subtyping systems are presented in <ref> [109, 88, 70, 68, 71, 2, 1, 52] </ref>. Minimal calculi are proposed in [40, 92, 16]. A speciale case of the update problem is tackled in [20]. Recursion and inheritance is analyzed in [33, 14, 15, 5]. A calculus with covariant specialization is proposed in [41, 22, 23].
Reference: [53] <author> S.E. Keene. </author> <title> Object-Oriented Programming in Common Lisp </title>
Reference-contexts: Slide 88-94 Class inference is developed in [101, 45, 79, 76, 4]. Slide 96 ML modules are described in [67, 106]. Slide 97 Approaches to genericity are discussed in [63, 49, 61, 73, 83]. Annotated Bibliography 104 Slide 98 Multi-methods are presented in <ref> [53, 72, 24, 25] </ref>. Slide 99 The Self language is described in [108, 26, 27, 28, 48, 3].
References-found: 53

