URL: ftp://ftp.eecs.umich.edu/techreports/cse/1995/CSE-TR-252-95.ps.Z
Refering-URL: http://www.eecs.umich.edu/~kuno/
Root-URL: http://www.cs.umich.edu
Title: Using Object-Oriented Principles to Optimize Update Propagation to Materialized Views  
Author: Harumi A. Kuno and Elke A. Rundensteiner 
Keyword: Incremental view maintenance, object-oriented views, distributed registration, classifica tion, view updatability.  
Note: This work was supported in part by the NSF RIA grant #IRI-9309076, NSF NYI grant #IRI 94-57609, and the University of Michigan Faculty Award Program, Intel, and AT&T. Harumi Kuno is also grateful for support from the NASA Graduate Student Researchers Program.  
Address: 1301 Beal Avenue Ann Arbor, MI 48109-2122  
Affiliation: Dept. of Elect. Engineering and Computer Science Software Systems Research Laboratory The University of Michigan,  University of Michigan  
Pubnum: Technical Report CSE-TR-252-95  
Email: e-mail: kuno@umich.edu, rundenst@eecs.umich.edu  
Phone: fax: (313) 763-1503 phone: (313) 936-2971  
Abstract: View materialization is known to be a valuable technique for performance optimization in relational databases, and much work has been done addressing the problem of consistently maintaining relational views under update operations. However, little progress has been made thus far regarding the topic of view materialization in object-oriented databases (OODBs). In this paper, we demonstrate that there are several significant differences between the relational and object-oriented paradigms that can be exploited when addressing the object-oriented view materialization problem. For example, we can use the subsumption relationships between classes to identify branches of classes to which we do not need to propagate updates. Similarly, we can use encapsulated interfaces combined with the fact that any unique database property is inherited from a single location to provide a "registration" service by which virtual classes can register their interest in specific properties and be notified upon modification of those properties. We describe a number of techniques that take advantage of such data model differences to optimize the maintenance of materialized views in the object-oriented model. We have successfully implemented all proposed techniques in the MultiView system, which provides updatable materialized classes and virtual schemata on top of the GemStone OODBMS. In this paper, we also report results from the experimental studies we have run on the MultiView system measuring the impact of various optimization strategies incorporated into our materialization update algorithms. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Abiteboul and A. Bonner. </author> <title> Objects and views. </title> <booktitle> SIGMOD, </booktitle> <pages> pages 238-247, </pages> <year> 1991. </year>
Reference-contexts: If the view is materialized, then its contents must be maintained in the face of updates to the view's sources. While a number of researchers have proposed view systems in the context of object-oriented databases (OODBs) <ref> [1, 11, 17, 27, 24, 25, 26] </ref>, little work has been done on the support of materialized OODB views. Here at the University of Michigan, we are developing MultiView, a view management system capable of supporting updatable materialized object-oriented views [24, 16, 25, 26, 19]. <p> Classification of virtual classes, as shown in Figure 1, may lead to the problem of select upwards and downwards inheritance <ref> [1] </ref>.
Reference: [2] <author> T. Atwood, R. Cattell, J. Duhl, G. Ferran, and D. Wade. </author> <title> The ODMG object model. </title> <journal> Journal of Object Oriented Programming, </journal> <pages> pages 64-69, </pages> <month> June </month> <year> 1993. </year>
Reference-contexts: Value predicates, used by select queries, are predicate terms 3 Although there is no general agreement on whether classes in OODBs should incorporate their own extents or require users to maintain their own collections of class-instances, several systems follow this philosophy, including [13, 12]. Furthermore, the proposed ODMG standard <ref> [2] </ref> recently formulated by several key OODB vendors also follows this approach. 4 Set operations are the most typical type of queries using class membership predicates, because they function by using the presence of objects in source classes rather than by checking value-based predicates. 3 constraining instances based on the values
Reference: [3] <author> J. Blakeley, P. Larson, and F. Tompa. </author> <title> Efficiently updating materialized views. </title> <booktitle> SIGMOD, </booktitle> <pages> pages 61-71, </pages> <year> 1986. </year>
Reference-contexts: Third, we discuss experimental studies we have conducted to evaluate the performance impact of our optimizations on the MultiView prototype. We draw upon several techniques from previous relational work in the area. For example, [6] perform incremental view maintenance using production rules that are triggered by update operations. <ref> [3, 4] </ref> test modified tuples to see if they fulfill view predicates. We also use these strategies of triggering incremental view maintenance and filtering irrelevant updates. However, our current work exploits unique features of the object-oriented paradigm to adapt these solutions to the OODB view materialization problem. <p> Our research on view materialization in OODBs borrows several techniques from the relational arena. <ref> [3, 4] </ref> tests modified tuples to see if they fulfill view predicates, thereby detecting irrelevant and autonomously computable updates.
Reference: [4] <author> J. A. Blakeley, N. Coburn, and P-A Larson. </author> <title> Updating derived relations: Detecting irrelevant and autonomously computable updates. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 14(3) </volume> <pages> 369-400, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: Third, we discuss experimental studies we have conducted to evaluate the performance impact of our optimizations on the MultiView prototype. We draw upon several techniques from previous relational work in the area. For example, [6] perform incremental view maintenance using production rules that are triggered by update operations. <ref> [3, 4] </ref> test modified tuples to see if they fulfill view predicates. We also use these strategies of triggering incremental view maintenance and filtering irrelevant updates. However, our current work exploits unique features of the object-oriented paradigm to adapt these solutions to the OODB view materialization problem. <p> Our research on view materialization in OODBs borrows several techniques from the relational arena. <ref> [3, 4] </ref> tests modified tuples to see if they fulfill view predicates, thereby detecting irrelevant and autonomously computable updates.
Reference: [5] <author> M. J. Carey, D. J. DeWitt, and J. F. Naughton. </author> <title> The OO7 benchmark. </title> <type> Technical report, </type> <institution> University of Wisconsin-Madison, </institution> <month> January </month> <year> 1994. </year>
Reference-contexts: Instead, the reader is referred to our technical reports on this subject [17, 18, 22]. The experiments described below were carried out using MultiView on a Sun4m running SunOS 4.1.3 with 32 megabytes of memory. We employ a 10,000 object implementation of the OO7 benchmark schema for our tests <ref> [5] </ref>. Figure 5 shows the three class subschema of the OO7 Benchmark's example database that is central to our models. For our analysis we consider each update operation to be the modification of a single object.
Reference: [6] <author> S. Ceri and J. Widom. </author> <title> Deriving production rules for incremental view maintenance. </title> <booktitle> In International Conference on Very Large Data Bases, </booktitle> <pages> pages 577-589, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Second, we propose new techniques to propagate updates efficiently using object-oriented principles. Third, we discuss experimental studies we have conducted to evaluate the performance impact of our optimizations on the MultiView prototype. We draw upon several techniques from previous relational work in the area. For example, <ref> [6] </ref> perform incremental view maintenance using production rules that are triggered by update operations. [3, 4] test modified tuples to see if they fulfill view predicates. We also use these strategies of triggering incremental view maintenance and filtering irrelevant updates. <p> This resembles our solution of filtering irrelevant updates by exploiting the generalization hierarchy 1 The current MultiView prototype has been built on top of Servio Corporation's GemStone OODBB product. 1 and the derivation structure. The system provided by <ref> [6] </ref> performs incremental view maintenance using production rules that are triggered by update operations. Similarly, we override generic-update operations with type-specific update operators for virtual classes.
Reference: [7] <author> D.H. Fishman. </author> <title> Iris: An object oriented database management system. </title> <journal> In ACM Transactions on Office Information Systems, </journal> <volume> volume 5, </volume> <pages> pages 48-69, </pages> <month> January </month> <year> 1987. </year>
Reference-contexts: With the exception of the IRIS functional DBMS <ref> [7] </ref>, which uses a relational database as storage structure, storing data from single objects across many relations, most commercial OODB systems represent each database object as a chunk of contiguous storage determined at object creation time and do not support the features identified as required for view support.
Reference: [8] <author> G. Gottlob, M. Schrefl, and B. Rock. </author> <title> Extending object-oriented systems with roles. </title> <type> manuscript, </type> <year> 1993. </year>
Reference-contexts: Our research is also unique in studying incremental updates in the context of the object-slicing paradigm. Although the object-slicing techniques underlying the current implementation of MultiView can be compared to mechanisms used in role modeling approaches <ref> [28, 21, 8] </ref>, no other research in the literature discusses 2 Note that some materialized RDB views may be implemented using techniques such as view indices that resemble mem bership materialization. 2 the application of the object-slicing paradigm regarding the support of object-oriented views. <p> The role sys-tem proposed by Gottlob et al. was implemented using techniques similar to object-slicing <ref> [8] </ref>. This system, like ours, is implemented in Smalltalk. The difference between [8] and our implementation is that [8] is a role system, whereas we are developing a view system. Role systems strive to increase the flexibility of objects by enabling them to dynamically change types and class membership. <p> The role sys-tem proposed by Gottlob et al. was implemented using techniques similar to object-slicing <ref> [8] </ref>. This system, like ours, is implemented in Smalltalk. The difference between [8] and our implementation is that [8] is a role system, whereas we are developing a view system. Role systems strive to increase the flexibility of objects by enabling them to dynamically change types and class membership. <p> The role sys-tem proposed by Gottlob et al. was implemented using techniques similar to object-slicing <ref> [8] </ref>. This system, like ours, is implemented in Smalltalk. The difference between [8] and our implementation is that [8] is a role system, whereas we are developing a view system. Role systems strive to increase the flexibility of objects by enabling them to dynamically change types and class membership. <p> Role systems strive to increase the flexibility of objects by enabling them to dynamically change types and class membership. View systems, on the other hand, enable users to restructure the types and class membership of complete classes|based on content-based queries. For example, unlike <ref> [8] </ref>, we do not permit entities to occur several times in the same type of role. Also, the [8] system does not permit the derivation of new virtual classes, and thus does not address issues related to view management. 3 The MultiView Model and System In this section, we review the <p> View systems, on the other hand, enable users to restructure the types and class membership of complete classes|based on content-based queries. For example, unlike <ref> [8] </ref>, we do not permit entities to occur several times in the same type of role. Also, the [8] system does not permit the derivation of new virtual classes, and thus does not address issues related to view management. 3 The MultiView Model and System In this section, we review the basic object model principles of the MultiView system and outline the architectural model underlying our implementation. 3.1 Basic
Reference: [9] <author> E. N. Hanson. </author> <title> A performance analysis of view materialization strategies. </title> <booktitle> SIGMOD, </booktitle> <pages> pages 440-453, </pages> <year> 1987. </year>
Reference-contexts: Typically, the contents of a view are derived using the view's stored query, in which case each query upon the extent of a view must be translated into a query upon the view's source classes. In relational systems, this is known as query modification <ref> [9] </ref>. View materialization, i.e., the maintenance of derived extents of views as opposed to recomputing them upon demand, has been demonstrated in the relational model to improve the performance of queries.
Reference: [10] <author> M. Hardwick and B. R. Downie. </author> <title> On object-oriented databases, materialized views, </title> <booktitle> and concurrent engineering. In Proceedings of the 1991 ASME International Computers for Engineering Conference and Exposition. Engineering Databases: An Engineering Resource, </booktitle> <year> 1991. </year>
Reference-contexts: In fact, this provides us with a basis for the arbitrary restructuring of an object's look and feel without compromising its identity. Only a few published papers address issues of view materialization in OODBs. <ref> [10] </ref> provide a view materialization model in which updates are propagated by use of change files, representing histories of design sessions. However, [10] duplicate objects (including identifiers) for virtual classes rather than merely storing references to objects. [14] address maintaining consistency for a particular type of join class formed along an <p> Only a few published papers address issues of view materialization in OODBs. <ref> [10] </ref> provide a view materialization model in which updates are propagated by use of change files, representing histories of design sessions. However, [10] duplicate objects (including identifiers) for virtual classes rather than merely storing references to objects. [14] address maintaining consistency for a particular type of join class formed along an existing path in the aggregation graph.
Reference: [11] <author> S. Heiler and S. B. Zdonik. </author> <title> Object views: Extending the vision. </title> <booktitle> In IEEE International Conference on Data Engineering, </booktitle> <pages> pages 86-93, </pages> <year> 1990. </year>
Reference-contexts: If the view is materialized, then its contents must be maintained in the face of updates to the view's sources. While a number of researchers have proposed view systems in the context of object-oriented databases (OODBs) <ref> [1, 11, 17, 27, 24, 25, 26] </ref>, little work has been done on the support of materialized OODB views. Here at the University of Michigan, we are developing MultiView, a view management system capable of supporting updatable materialized object-oriented views [24, 16, 25, 26, 19].
Reference: [12] <institution> Itasca Systems, Inc. </institution> <note> Technical Summary Release, 2.0 edition, </note> <year> 1991. </year>
Reference-contexts: Value predicates, used by select queries, are predicate terms 3 Although there is no general agreement on whether classes in OODBs should incorporate their own extents or require users to maintain their own collections of class-instances, several systems follow this philosophy, including <ref> [13, 12] </ref>.
Reference: [13] <author> H. J. Kim. </author> <title> Issues in Object-Oriented Database Systems. </title> <type> PhD thesis, </type> <institution> University of Texas at Austin, </institution> <month> May </month> <year> 1988. </year>
Reference-contexts: Value predicates, used by select queries, are predicate terms 3 Although there is no general agreement on whether classes in OODBs should incorporate their own extents or require users to maintain their own collections of class-instances, several systems follow this philosophy, including <ref> [13, 12] </ref>.
Reference: [14] <author> S. Konomi, T. Furukawa, and Y. Kambayashi. </author> <title> Super-key classes for updating materialized derived classes in object bases. </title> <booktitle> In International Conference on Deductive and Object-Oriented Databases, </booktitle> <month> July </month> <year> 1993. </year>
Reference-contexts: Only a few published papers address issues of view materialization in OODBs. [10] provide a view materialization model in which updates are propagated by use of change files, representing histories of design sessions. However, [10] duplicate objects (including identifiers) for virtual classes rather than merely storing references to objects. <ref> [14] </ref> address maintaining consistency for a particular type of join class formed along an existing path in the aggregation graph. Our work instead focuses on the exploitation of the structure of the schema hierarchy and derivation dependency graph in order to reduce update propagations.
Reference: [15] <author> H. A. Kuno, Y. G. Ra, and E. A. Rundensteiner. </author> <title> The object-slicing technique: A flexible object representation and its evaluation. </title> <type> Technical Report CSE-TR-241-95, </type> <institution> University of Michigan, </institution> <year> 1995. </year>
Reference-contexts: The object-slicing technique is thus subject to the intrinsic problem of view materialization how to update materialized views so as to keep their extents consistent with the rest of the database. Details on implementation issues in our model such as method resolution, inheritance mechanisms, etc., can be found elsewhere <ref> [15, 22] </ref>. Object-slicing overhead. As would be expected, extending an existing system with object-slicing techniques involves a certain amount of overhead, including additional data structures, maintenance costs, and processing time. <p> Object-slicing overhead. As would be expected, extending an existing system with object-slicing techniques involves a certain amount of overhead, including additional data structures, maintenance costs, and processing time. In a separate paper <ref> [15] </ref>, we describe our experimental results evaluating the relative costs and benefits of adopting the object-slicing technique, including an analytical assessment of the storage overhead of the object-slicing representation and its comparison against the conventional representational models. This work was done in the context of regular base classes only [15]. <p> paper <ref> [15] </ref>, we describe our experimental results evaluating the relative costs and benefits of adopting the object-slicing technique, including an analytical assessment of the storage overhead of the object-slicing representation and its comparison against the conventional representational models. This work was done in the context of regular base classes only [15]. In the current paper we strive to isolate the impact of our propagation techniques for views from the effects of the object-slicing architecture. <p> In fact, our propagation algorithms should work even more efficiently in the absence of an object-slicing architecture. In a related paper, we explore the use of clustering to ameliorate the overhead of the object-slicing technique employed by our implementation <ref> [15] </ref>. In the future, we plan to study more powerful query languages for view definition. We also plan to study issues related to the support of deferred updates and multiple (batched) updates for materialized views.
Reference: [16] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> Developing an object-oriented view management system. </title> <booktitle> In Centre for Advanced Studies Conference, </booktitle> <pages> pages 548-562, </pages> <month> October </month> <year> 1993. </year>
Reference-contexts: Here at the University of Michigan, we are developing MultiView, a view management system capable of supporting updatable materialized object-oriented views <ref> [24, 16, 25, 26, 19] </ref>. In a previous paper [19], we introduced our implementation (using object-slicing techniques) of the MultiView model for object-oriented view materialization. In this paper, we present the results of our research regarding the optimization of update propagation. <p> In order to maintain this global class hierarchy, our view management system supports a flexible classification mechanism that is able to make dynamic changes to the class hierarchy, e.g., inserting a new class between two existing classes. We have proposed elsewhere <ref> [16, 26] </ref> algorithms and techniques to automatically maintain the global class hierarchy.
Reference: [17] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> Implementation experience with building an object-oriented view management system. </title> <type> Technical Report CSE-TR-191-93, </type> <institution> University of Michigan, </institution> <address> Ann Arbor, </address> <year> 1993. </year>
Reference-contexts: If the view is materialized, then its contents must be maintained in the face of updates to the view's sources. While a number of researchers have proposed view systems in the context of object-oriented databases (OODBs) <ref> [1, 11, 17, 27, 24, 25, 26] </ref>, little work has been done on the support of materialized OODB views. Here at the University of Michigan, we are developing MultiView, a view management system capable of supporting updatable materialized object-oriented views [24, 16, 25, 26, 19]. <p> This includes the object-slicing representation, as well as the incremental update propagation algorithms as outlined in this paper. A description of the implementation is, however, beyond the scope of this paper. Instead, the reader is referred to our technical reports on this subject <ref> [17, 18, 22] </ref>. The experiments described below were carried out using MultiView on a Sun4m running SunOS 4.1.3 with 32 megabytes of memory. We employ a 10,000 object implementation of the OO7 benchmark schema for our tests [5].
Reference: [18] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> The MultiView OODB view system: Design and implementation. </title> <type> Technical Report CSE-TR-246-95, </type> <institution> University of Michigan, </institution> <address> Ann Arbor, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: This includes the object-slicing representation, as well as the incremental update propagation algorithms as outlined in this paper. A description of the implementation is, however, beyond the scope of this paper. Instead, the reader is referred to our technical reports on this subject <ref> [17, 18, 22] </ref>. The experiments described below were carried out using MultiView on a Sun4m running SunOS 4.1.3 with 32 megabytes of memory. We employ a 10,000 object implementation of the OO7 benchmark schema for our tests [5]. <p> New techniques we introduce include distributed registration, subsumption-based propagation termination, and derivation-ordered prevention of the self-cancelling effect. We have implemented a prototype (version 1.0) of the MultiView system <ref> [18] </ref>, which supports updatable materialized object-oriented views. Our system incorporates the incremental update propagation strategies introduced in this paper. We present experimental results that demonstrate the performance gains derived from our proposed view materialization strategies.
Reference: [19] <author> H. A. Kuno and E. A. Rundensteiner. </author> <title> Materialized object-oriented views in MultiView. </title> <booktitle> In ACM Research Issues in Data Engineering Workshop, </booktitle> <pages> pages 78-85, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: Here at the University of Michigan, we are developing MultiView, a view management system capable of supporting updatable materialized object-oriented views <ref> [24, 16, 25, 26, 19] </ref>. In a previous paper [19], we introduced our implementation (using object-slicing techniques) of the MultiView model for object-oriented view materialization. In this paper, we present the results of our research regarding the optimization of update propagation. <p> Here at the University of Michigan, we are developing MultiView, a view management system capable of supporting updatable materialized object-oriented views [24, 16, 25, 26, 19]. In a previous paper <ref> [19] </ref>, we introduced our implementation (using object-slicing techniques) of the MultiView model for object-oriented view materialization. In this paper, we present the results of our research regarding the optimization of update propagation. <p> We thus could not directly use existing OODB technology to implement MultiView . As described elsewhere <ref> [22, 19] </ref>, we adopt an object-slicing technique to provide a means of supporting these required features [20]. <p> The existence of a single point of inheritance combined with the object-slicing approach guarantees that no more than two classes (the original class where the properties currently reside, and the new class to which they are being moved) will ever be involved in such a migration <ref> [19] </ref>.
Reference: [20] <author> J. Martin and J. Odell. </author> <title> Object-Oriented Analysis and Design. </title> <publisher> Prentice-Hall, Inc., </publisher> <year> 1992. </year>
Reference-contexts: We thus could not directly use existing OODB technology to implement MultiView . As described elsewhere [22, 19], we adopt an object-slicing technique to provide a means of supporting these required features <ref> [20] </ref>. In object-slicing, a real-world object corresponds to a hierarchy of implementation objects (one for each class whose type the object possesses) linked to a conceptual object (used to represent the object-itself) rather than associating one implementation with each conceptual object as is commonly assumed in OODBs.
Reference: [21] <author> M. P. Papazoglou. </author> <title> Roles: A methodology for representing multifaceted objects. </title> <booktitle> In International Conference on Database and Expert Systems Applications, </booktitle> <pages> pages 7-12. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: Our research is also unique in studying incremental updates in the context of the object-slicing paradigm. Although the object-slicing techniques underlying the current implementation of MultiView can be compared to mechanisms used in role modeling approaches <ref> [28, 21, 8] </ref>, no other research in the literature discusses 2 Note that some materialized RDB views may be implemented using techniques such as view indices that resemble mem bership materialization. 2 the application of the object-slicing paradigm regarding the support of object-oriented views.
Reference: [22] <author> Y. G. Ra, H. A. Kuno, and E. A. Rundensteiner. </author> <title> A flexible object-oriented database model and implementation for capacity-augmenting views. </title> <type> Technical Report CSE-TR-215-94, </type> <institution> University of Michigan, </institution> <year> 1994. </year>
Reference-contexts: We thus could not directly use existing OODB technology to implement MultiView . As described elsewhere <ref> [22, 19] </ref>, we adopt an object-slicing technique to provide a means of supporting these required features [20]. <p> The object-slicing technique is thus subject to the intrinsic problem of view materialization how to update materialized views so as to keep their extents consistent with the rest of the database. Details on implementation issues in our model such as method resolution, inheritance mechanisms, etc., can be found elsewhere <ref> [15, 22] </ref>. Object-slicing overhead. As would be expected, extending an existing system with object-slicing techniques involves a certain amount of overhead, including additional data structures, maintenance costs, and processing time. <p> This includes the object-slicing representation, as well as the incremental update propagation algorithms as outlined in this paper. A description of the implementation is, however, beyond the scope of this paper. Instead, the reader is referred to our technical reports on this subject <ref> [17, 18, 22] </ref>. The experiments described below were carried out using MultiView on a Sun4m running SunOS 4.1.3 with 32 megabytes of memory. We employ a 10,000 object implementation of the OO7 benchmark schema for our tests [5].
Reference: [23] <author> Y. G. Ra and E. A. Rundensteiner. </author> <title> A transparent object-oriented schema change approach using view schema evolution. </title> <booktitle> In IEEE International Conference on Data Engineering, </booktitle> <pages> pages 165-172, </pages> <month> March </month> <year> 1995. </year>
Reference: [24] <author> E. A. Rundensteiner. </author> <title> MultiView: A methodology for supporting multiple views in object-oriented databases. </title> <booktitle> In 18th VLDB Conference, </booktitle> <pages> pages 187-198, </pages> <year> 1992. </year>
Reference-contexts: If the view is materialized, then its contents must be maintained in the face of updates to the view's sources. While a number of researchers have proposed view systems in the context of object-oriented databases (OODBs) <ref> [1, 11, 17, 27, 24, 25, 26] </ref>, little work has been done on the support of materialized OODB views. Here at the University of Michigan, we are developing MultiView, a view management system capable of supporting updatable materialized object-oriented views [24, 16, 25, 26, 19]. <p> Here at the University of Michigan, we are developing MultiView, a view management system capable of supporting updatable materialized object-oriented views <ref> [24, 16, 25, 26, 19] </ref>. In a previous paper [19], we introduced our implementation (using object-slicing techniques) of the MultiView model for object-oriented view materialization. In this paper, we present the results of our research regarding the optimization of update propagation.
Reference: [25] <author> E. A. Rundensteiner. </author> <title> Tools for view generation in OODBs. </title> <booktitle> In CIKM, </booktitle> <pages> pages 635-644, </pages> <month> November </month> <year> 1993. </year>
Reference-contexts: If the view is materialized, then its contents must be maintained in the face of updates to the view's sources. While a number of researchers have proposed view systems in the context of object-oriented databases (OODBs) <ref> [1, 11, 17, 27, 24, 25, 26] </ref>, little work has been done on the support of materialized OODB views. Here at the University of Michigan, we are developing MultiView, a view management system capable of supporting updatable materialized object-oriented views [24, 16, 25, 26, 19]. <p> Here at the University of Michigan, we are developing MultiView, a view management system capable of supporting updatable materialized object-oriented views <ref> [24, 16, 25, 26, 19] </ref>. In a previous paper [19], we introduced our implementation (using object-slicing techniques) of the MultiView model for object-oriented view materialization. In this paper, we present the results of our research regarding the optimization of update propagation.
Reference: [26] <author> E. A. Rundensteiner. </author> <title> A classification algorithm for supporting object-oriented views. </title> <booktitle> In CIKM, </booktitle> <pages> pages 18-25, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: If the view is materialized, then its contents must be maintained in the face of updates to the view's sources. While a number of researchers have proposed view systems in the context of object-oriented databases (OODBs) <ref> [1, 11, 17, 27, 24, 25, 26] </ref>, little work has been done on the support of materialized OODB views. Here at the University of Michigan, we are developing MultiView, a view management system capable of supporting updatable materialized object-oriented views [24, 16, 25, 26, 19]. <p> Here at the University of Michigan, we are developing MultiView, a view management system capable of supporting updatable materialized object-oriented views <ref> [24, 16, 25, 26, 19] </ref>. In a previous paper [19], we introduced our implementation (using object-slicing techniques) of the MultiView model for object-oriented view materialization. In this paper, we present the results of our research regarding the optimization of update propagation. <p> In order to maintain this global class hierarchy, our view management system supports a flexible classification mechanism that is able to make dynamic changes to the class hierarchy, e.g., inserting a new class between two existing classes. We have proposed elsewhere <ref> [16, 26] </ref> algorithms and techniques to automatically maintain the global class hierarchy.
Reference: [27] <author> M. H. Scholl, C. Laasch, and M. Tresch. </author> <title> Updatable views in object-oriented databases. </title> <booktitle> In Proceedings of the Second DOOD Conference, </booktitle> <month> December </month> <year> 1991. </year>
Reference-contexts: If the view is materialized, then its contents must be maintained in the face of updates to the view's sources. While a number of researchers have proposed view systems in the context of object-oriented databases (OODBs) <ref> [1, 11, 17, 27, 24, 25, 26] </ref>, little work has been done on the support of materialized OODB views. Here at the University of Michigan, we are developing MultiView, a view management system capable of supporting updatable materialized object-oriented views [24, 16, 25, 26, 19].
Reference: [28] <author> E. Sciore. </author> <title> Object specialization. </title> <journal> ACM Transactions on Information Systems, </journal> <pages> pages 103-122, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Our research is also unique in studying incremental updates in the context of the object-slicing paradigm. Although the object-slicing techniques underlying the current implementation of MultiView can be compared to mechanisms used in role modeling approaches <ref> [28, 21, 8] </ref>, no other research in the literature discusses 2 Note that some materialized RDB views may be implemented using techniques such as view indices that resemble mem bership materialization. 2 the application of the object-slicing paradigm regarding the support of object-oriented views.
References-found: 28

