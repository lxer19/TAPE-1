URL: http://kmi.open.ac.uk/techreports/papers/kmi-tr-6.ps.gz
Refering-URL: http://kmi.open.ac.uk/techreports/kmi-tr-list.html
Root-URL: 
Email: a.stutt, e.motta@open.ac.uk  
Title: Recording the design decisions of knowledge engineers to facilitate reuse of design models.  
Author: Arthur Stutt and Enrico Motta 
Note: 1 INTRODUCTION  
Address: Walton Hall, Milton Keynes MK7 6AA, United Kingdom  
Affiliation: Knowledge Media Institute, The Open University,  
Abstract: In this paper we focus on the process of constructing reusable knowledge level models by augmenting an explicit process model of KBS design with a means of recording the argumentation about design decisions. Our method includes a set of design principles and an expressive design language for representing design components (such as tasks and roles) with an extension for decision descriptions. We present a concrete example of the application of our design methodology which illustrates how our design language can be used to produce a communicable and re It is generally accepted among researchers that knowledge engineering (KE) involves the creation of models. Van de Velde (1994b: 727) calls this the Modeling hypothesis. Since he views models as the result of a series of arguments, negotiations and circumstances involving knowledge engineers, domain experts, clients, system developers, managers and so forth that need to agree on its acceptability for their different purposes (ibid.) he proposes the creation of modeling libraries which will include modeling operations. A modeling operation (728) is an operation (relation) over models that transforms a generic model into another one. Taken collectively, they realize library support in the construction of a model, i.e., as a store of model construction steps and episodes (ibid.). This is an attractive view. However, while Van de Veldes modeling operations are capable of capturing the different sorts of design processes which transform one design model into another, they do not serve to capture the series of argumentations among interested parties for which it [the model] serves as a common ground for discussion (730). We propose therefore that, in order to capture the best practices on knowledge engineering of a community (731), Van de Veldes proposed library needs to be complemented by a means of storing the argumentation surrounding designs. To do this we will suggest that work on capturing what has been called the design rationale should be adapted to the design of knowledge based systems (KBSs). This provides the best means for storing modeling episodes with the argumentations that annotate them (728) since there are several well-tried techniques availabletechniques which elevate argumentation from mere annotation to its rightful place (the one Van de Velde seems otherwise to accept) at the centre of the modelling process. In this paper, then, we focus on the process of constructing reusable knowledge level design models. By knowledge level model we mean the structured, solution-oriented models identified by Van de Velde (1994a: 38-4). By design model we mean both the representation of design components such as tasks, roles and methods (see next section), and the design rationale. Reuse is aided by augmenting design models in this way with a means of recording argumentation. In particular we discuss an explicit process model of KBS design at the knowledge level and highlight usable design model.
Abstract-found: 1
Intro-found: 1
Reference: <author> Breuker, J. A. and Van de Velde, W. </author> <year> (1993). </year> <title> The CommonKADS Library. ESPRIT Project P5248 Deliverable M2, </title> <institution> University of Amsterdam and Free University of Bruxelles. </institution>
Reference-contexts: Map task roles to domain knowledge and instantiate domain requirements in the given domain. This step might require acquiring the relevant domain knowledge structures if they have not yet been acquired. 4a. Select suitable PSM from librarye.g. from <ref> (Breuker & Van De Velde, 1993) </ref> or (Le Roux at el., 1993). The PSM doesnt need to be fully specified. For instance, one could decide to tackle VT by using Propose&Revise.
Reference: <author> Buckingham Shum, S. and Hammond, N. </author> <year> (1994). </year> <title> Argumentation-based design rationale: what use at what cost? International Journal of Human-Computer Studies, </title> <booktitle> 40(4), </booktitle> <pages> 603-652, </pages> <month> April </month> <year> 1994. </year>
Reference: <author> Chandrasekaran, B. </author> <year> (1990). </year> <title> Design Problem Solving: A Task Analysis. </title> <journal> AI Magazine, </journal> <volume> 11(4). </volume> <pages> 59-71. </pages>
Reference-contexts: DESIGN AND ARGUMENTATION The propose-evaluate-revise schema used in discussing design as a generic task <ref> (Chandrasekaran, 1990) </ref> makes explicit its non-monotonic character. This schema operates at many different levels. <p> In this case the choice is relatively simple. As pointed out in <ref> (Chandrasekaran, 1990) </ref> all design methods can be seen as variations of the propose-evaluate-revise schema, whose I/O specification is shown below.
Reference: <author> Chandrasekaran, B., Johnson, T.R. and Smith, J.W. </author> <year> (1992). </year> <title> TaskStructure Analysis for Knowledge Modelling. </title> <journal> Communications of the ACM, </journal> <volume> 35(9), </volume> <month> Sept. </month> <year> 1992. </year> <pages> 124-137. </pages>
Reference-contexts: When applied to a task, structured methods decompose it into a number of new subtasks, i.e. provide method-mediated task to subtask decomposition <ref> (Chandrasekaran et al., 1992) </ref>. Primitive methodsalso called mechanisms (Gennari et al, 1994)are low-level methods which can be directly applied to solve a task. method, which can be used to solve parametric design problems.
Reference: <author> Conklin, J. and Begeman, </author> <title> M.L. (1988). gIBIS: A Hypertext Tool for Exploratory Policy Discussion. </title> <journal> ACM Trans. on Office Information Systems, </journal> <volume> 6(4). </volume> <pages> 303-331. </pages>
Reference-contexts: In the most loosely coupled systems a generic hypertext based on the IBIS approach is utilised as a means of articulating the design rationalee.g., gIBIS <ref> (Conklin and Begeman, 1988) </ref>. In KONEX+ (Rathke and Negele, 1991), a design environment for CNC-machines design experts are utilised as cooperative agents which can provide design advice and critique user designs.
Reference: <author> Eisenberg, M. and Fischer, G. </author> <year> (1994). </year> <title> Programmable Design Environments: Integrating End-User Programming with Domain-Oriented Assistance. </title> <booktitle> Proc. CHI94 (Human Factors in Computing Systems). </booktitle> <address> Boston, Mass: </address> <publisher> ACM. </publisher> <pages> 431-7. </pages>
Reference: <author> Fischer, G., Girgensohn, A., Nakakoji, K. and Redmiles, D. </author> <year> (1992). </year> <title> Supporting Software designers with Integrated Domain-Oriented design Environments. </title> <journal> IEEE Trans. on Software Engineering, </journal> <volume> 18(6), </volume> <month> June </month> <year> 1992. </year> <pages> 511-52. </pages>
Reference: <author> Fischer, G., Lemke, A.C., McCall, R. and Morch, A. I. </author> <year> (1991). </year> <title> Making Argumentation Serve Design. </title> <journal> Human-Computer Interaction. </journal> <volume> 6. </volume> <pages> 393-419. </pages>
Reference-contexts: In KONEX+ (Rathke and Negele, 1991), a design environment for CNC-machines design experts are utilised as cooperative agents which can provide design advice and critique user designs. In systems such as JANUS (McCall, Fischer and Morch, 1990)which integrates the CRACK critiquing design system with support for argumentationand JANUS-ARGUMENTATION <ref> (Fischer et al., 1991) </ref> an attempt is made to produce an architecture which embodies Schns ideas on design as a continual alternation between two radically different and mutually exclusive types of design processes: knowing in action and reflection in action (ibid. 408).
Reference: <author> Fischer, G., McCall, R. and Morch, A. </author> <year> (1989). </year> <title> Design Environments for Constructive and Argumentative Design. </title> <booktitle> Proceedings of the ACM conference on Human Factors in Computing Systems (CHI-89), </booktitle> <month> May </month> <year> 1989. </year> <pages> 269-275. </pages>
Reference: <author> Gennari, J. H., Tu, S. W., Rothenfluh, T. E., Musen, M. A. </author> <year> (1994). </year> <title> Mapping Domains to Methods in Support of Reuse. </title> <booktitle> Proceedings of the 8th Banff Knowledge Acquisition Workshop, </booktitle> <address> Banff, </address> <institution> Canada Gruber, T. R. </institution> <year> (1993). </year> <title> A Translation Approach to Portable Ontology Specifications. </title> <journal> Knowledge Acquisition, </journal> <volume> 5(2). </volume>
Reference-contexts: When applied to a task, structured methods decompose it into a number of new subtasks, i.e. provide method-mediated task to subtask decomposition (Chandrasekaran et al., 1992). Primitive methodsalso called mechanisms <ref> (Gennari et al, 1994) </ref>are low-level methods which can be directly applied to solve a task. method, which can be used to solve parametric design problems. The method takes as input, parameters, constraints, proposesteps (also called model extension procedures), and fixes, and produces a target model.
Reference: <author> Gruber, T. R., Runkel, J. T., and Olsen, G. R. </author> <year> (1994). </year> <title> VT Domain Ontology. </title> <note> Available by FTP from ksl.stanford.edu/pub/knowledge-sharing/ontologies/. </note> <institution> Stanford: Knowledge Systems Lab., Computer Science Dept. Stanford University. </institution>
Reference-contexts: For instance, the document describing the VT problem illustrates one particular approach to solving VT, which is called Propose&Revise (Marcus et al., 1988). Finally, a domain ontology describes information about a particular domain, in a task and method independent way. For instance the VT domain ontology <ref> (Gruber et al., 1994) </ref> contains the information about parts of an elevator and associated constraints which is required to configure an elevator. <p> In order to make this design process more interesting we assume that the only information available to us is instead the Ontolingua specification of the VT KB (VT-Onto), which is described in <ref> (Gruber et al., 1994) </ref>. This specification describes VT as a parametric design task, in terms of components, parameters, and constraintssee Figure 7.
Reference: <author> Gruber, T.R. and Russell, D.M. </author> <year> (1991). </year> <title> Design Knowledge and Design Rationale: A Framework for Representation, Capture, and Use. </title> <type> Technical Report KSL 90-45. </type> <institution> Stanford: Knowledge Systems Lab., Computer Science Dept. Stanford University. </institution>
Reference: <author> Jarczyk, A.P.J., Lffler, P. and Shipman, F.M. </author> <year> (1992). </year> <title> Design Rationale for Software Engineering: A Survey. </title> <booktitle> Proceedings of the 25th Hawaii Int. Conf. on System Sciences, </booktitle> <month> Jan </month> <year> 1992. </year> <pages> 577-586. </pages>
Reference: <author> Jonker, W. and Spee, J. W. </author> <year> (1992). </year> <title> Yet another formalization of KADS conceptual models. </title> <editor> In Wetter et al. (Eds.), </editor> <booktitle> Current Developments in Knowledge Acquisition. Lecture Notes in Artificial Intelligence, 599, </booktitle> <address> Berlin: </address> <publisher> Springer-Verlag. </publisher>
Reference: <author> Landes, D. and Studer, R. </author> <year> (1994). </year> <title> The Design Process in MIKE. </title> <booktitle> Proceedings of the 8th Banff Knowledge Acquisition Workshop, Banff, Canada, </booktitle> <volume> Vol 2. </volume> <pages> 33-1 - 33-20. </pages>
Reference-contexts: This process is continued until the full problemsolving model (discussed in Motta et al., 1995) is reached. 6 . RELATED WORK DesignKARL OCML-DDL seeks to support the process of designing KBSs as well as the recording of design rationales. This process-based philosophy also underlies the DesignKARL formalism <ref> (Landes and Studer, 1994) </ref>. DesignKARL uses a logic-based formalism for the representation of design components. OCML-DDL aims to provide an operational, upward-compatible subset of Ontolingua.
Reference: <author> Lemke, A.C. </author> <year> (1990). </year> <title> FRAMER-HYPERTEXT: An Active Issue-Based Hypertext System. </title> <type> Technical Report. </type> <institution> Dept. of Computer Science, University of Colorado, Boulder. </institution>
Reference: <author> Le Roux B., OHara K., Outtandy S., Shadbolt N., Laublet P. and Motta E. </author> <year> (1993). </year> <title> The VITAL Library of Knowledge Modelling. VITAL document DD215. Project VITAL (ESPRIT II Project P5365). </title> <publisher> Onera. </publisher>
Reference-contexts: Map task roles to domain knowledge and instantiate domain requirements in the given domain. This step might require acquiring the relevant domain knowledge structures if they have not yet been acquired. 4a. Select suitable PSM from librarye.g. from (Breuker & Van De Velde, 1993) or <ref> (Le Roux at el., 1993) </ref>. The PSM doesnt need to be fully specified. For instance, one could decide to tackle VT by using Propose&Revise.
Reference: <author> Lee, J. and Lai, K.-Y. </author> <year> (1991). </year> <title> Whats in Design rationale? Human-Computer Interaction, </title> <booktitle> 6. </booktitle> <pages> 251-280. </pages>
Reference: <author> Marcus, S., Stout J. and McDermott J. </author> <year> (1988). </year> <title> VT: an expert elevator designer that uses knowledge-based backtracking. </title> <journal> AI Magazine, </journal> <volume> 9(1). </volume> <pages> 95-112. </pages>
Reference-contexts: A method ontology specifies the knowledge used and required by a problem solving method, which provides a way of tackling a task. For instance, the document describing the VT problem illustrates one particular approach to solving VT, which is called Propose&Revise <ref> (Marcus et al., 1988) </ref>. Finally, a domain ontology describes information about a particular domain, in a task and method independent way. For instance the VT domain ontology (Gruber et al., 1994) contains the information about parts of an elevator and associated constraints which is required to configure an elevator.
Reference: <author> McCall, R., Fischer, G. and Morch, </author> <year> (1990). </year> <title> A. Supporting Reflection-in-Action in the Janus Design Environment. </title> <editor> In: eds. McCullough et al. </editor> <booktitle> The Electronic Design Studio. </booktitle> <address> Cambridge, MA: </address> <publisher> MIT Press. </publisher> <pages> 247-259. </pages>
Reference-contexts: In KONEX+ (Rathke and Negele, 1991), a design environment for CNC-machines design experts are utilised as cooperative agents which can provide design advice and critique user designs. In systems such as JANUS <ref> (McCall, Fischer and Morch, 1990) </ref>which integrates the CRACK critiquing design system with support for argumentationand JANUS-ARGUMENTATION (Fischer et al., 1991) an attempt is made to produce an architecture which embodies Schns ideas on design as a continual alternation between two radically different and mutually exclusive types of design processes: knowing in
Reference: <author> McCall, R.J. </author> <year> (1991). </year> <title> PHI: A Conceptual Foundation for Design Hypermedia. </title> <booktitle> Design Studies, </booktitle> <volume> 12(1). </volume> <pages> 30-41. </pages>
Reference: <author> Minton, S., Johnson M.D., Philips A.B. and Laird P. </author> <year> (1992). </year> <title> Minimising conflicts: a heuristic repair method for constraint satisfaction and scheduling problems. </title> <journal> Artificial Intelligence 58. </journal> <volume> 161205. </volume>
Reference-contexts: As discussed in detail in <ref> (Minton et al., 1992) </ref> this strategy can produce significant improvements in the performance of the problemsolver, especially when the number of interdependencies between constraints is high.
Reference: <author> Motta, E. </author> <year> (1995). </year> <title> KBS Modelling in OCML. </title> <booktitle> Proceedings on the Workshop on Modelling Languages for KBS , Vrije Universiteit Amsterdam, </booktitle> <month> January 30-31, </month> <year> 1995. </year>
Reference-contexts: As an example we show the definition of the class of parametric design tasks. This definition is expressed in OCML <ref> (Motta, 1995) </ref>, our own language for knowledge-level KBS modelling. The expression in Figure 1 describes the task of parametric design as taking a set of constraints, components, and parameters as input and producing a design model 1 . <p> Figure 2 shows an example of mapping a task role to a domain. In the example, the input role parameters of the VT design task has been mapped to the set of parameters specified in an OCML-based model of the VT domain <ref> (Motta et al., 1995) </ref>. (def-task-type parametric-design (design-task) ?task "A parametric design task is defined as the task of assigning values to parameters so that each parameter has a value and each constraint is satisfied. Parameters can be organized around components. <p> Since the design agenda has pending design goals (Expand subtask Evaluate Expand subtask Revise) the designer chooses the former. This process is continued until the full problemsolving model <ref> (discussed in Motta et al., 1995) </ref> is reached. 6 . RELATED WORK DesignKARL OCML-DDL seeks to support the process of designing KBSs as well as the recording of design rationales. This process-based philosophy also underlies the DesignKARL formalism (Landes and Studer, 1994).
Reference: <author> Motta, E., O'Hara, K., Shadbolt, N., Stutt, A. and Zdrahal, Z. </author> <year> (1994). </year> <title> A VITAL Solution to the Sisyphus II Elevator Design Problem. </title> <booktitle> Proceedings of the 8th Banff KA for KBS Workshop, </booktitle> <volume> Vol 3. </volume>
Reference-contexts: The solution described in <ref> (Motta et al., 1994) </ref> was based on the Yost specification of the VT problem (Yost, 1994) which provides a description of the VT domain which maps very easily to a Propose&Revise schema.
Reference: <author> Motta, E., O'Hara, K., Shadbolt, N., Stutt, A. and Zdrahal, Z. </author> <year> (1995). </year> <title> Solving VT in VITAL: A Study in Model Construction and Knowledge Reuse. </title> <note> Submitted for publication. </note>
Reference-contexts: As an example we show the definition of the class of parametric design tasks. This definition is expressed in OCML <ref> (Motta, 1995) </ref>, our own language for knowledge-level KBS modelling. The expression in Figure 1 describes the task of parametric design as taking a set of constraints, components, and parameters as input and producing a design model 1 . <p> Figure 2 shows an example of mapping a task role to a domain. In the example, the input role parameters of the VT design task has been mapped to the set of parameters specified in an OCML-based model of the VT domain <ref> (Motta et al., 1995) </ref>. (def-task-type parametric-design (design-task) ?task "A parametric design task is defined as the task of assigning values to parameters so that each parameter has a value and each constraint is satisfied. Parameters can be organized around components. <p> Since the design agenda has pending design goals (Expand subtask Evaluate Expand subtask Revise) the designer chooses the former. This process is continued until the full problemsolving model <ref> (discussed in Motta et al., 1995) </ref> is reached. 6 . RELATED WORK DesignKARL OCML-DDL seeks to support the process of designing KBSs as well as the recording of design rationales. This process-based philosophy also underlies the DesignKARL formalism (Landes and Studer, 1994).
Reference: <author> Puerta, A. R., Egar, J. W., Tu, S. W., and Musen, M. A. </author> <year> (1992). </year> <title> A multiple-method knowledge-acquisition shell for the automatic generation of knowledge-acquisition tools. </title> <journal> Knowledge Acquisition, </journal> <volume> 4(2). </volume> <pages> 171-196. </pages>
Reference: <author> Ramesh, B. and Dhar, V. </author> <year> (1994). </year> <title> Representing and Maintaining Process Knowledge for Large-Scale Systems Development. </title> <journal> IEEE Expert, </journal> <volume> 9(2), </volume> <month> April </month> <year> 1994. </year> <pages> 54-59. </pages>
Reference: <author> Ramesh, B. and Dhar, V. </author> <year> (1992). </year> <title> Supporting Systems Development by Capturing Deliberations During Requirements Engineering. </title> <journal> IEEE Trans. on Software Engineering. </journal> <volume> 18(6), </volume> <month> June </month> <year> 1992. </year> <pages> 498-510. </pages>
Reference: <author> Rathke, C. and Negele, A. </author> <year> (1991). </year> <title> KONEX+: A Knowledge-Based Design Environment. </title> <booktitle> Proc. of the Eleventh Int. Workshop on Expert Systems and Their Applications. General Conference: Tools, Techniques and Methods, </booktitle> <volume> Vol 1, </volume> <pages> Avignon, </pages> <address> France. </address> <pages> 147-159. </pages>
Reference-contexts: In the most loosely coupled systems a generic hypertext based on the IBIS approach is utilised as a means of articulating the design rationalee.g., gIBIS (Conklin and Begeman, 1988). In KONEX+ <ref> (Rathke and Negele, 1991) </ref>, a design environment for CNC-machines design experts are utilised as cooperative agents which can provide design advice and critique user designs.
Reference: <author> Runkel, J. T., Birmingham, W. B., Balkany, A. </author> <year> (1994). </year> <title> Separation of Knowledge: a Key to Reusability. </title> <booktitle> Proceedings of the 8th Banff Knowledge Acquisition Workshop, </booktitle> <address> Banff, Canada. </address>
Reference: <author> Schreiber, G. </author> <year> (1994). </year> <title> Reference Model for the VT Domain. </title> <note> Unpublished draft memo. </note>
Reference-contexts: A task specification describes what needs to be achieved. For instance in the VT problem (Yost, 1994) the task is to assign values to the design parameter in a way which satisfies all given constraints. VT can therefore be seen as an instance of a parametric design problem <ref> (Schreiber, 1994) </ref>. A method ontology specifies the knowledge used and required by a problem solving method, which provides a way of tackling a task. For instance, the document describing the VT problem illustrates one particular approach to solving VT, which is called Propose&Revise (Marcus et al., 1988).
Reference: <author> Steels, L. </author> <year> (1990). </year> <title> Components of Expertise. </title> <journal> AI Magazine. </journal> <volume> 11(2). </volume> <pages> 29-49. </pages>
Reference-contexts: A knowledge level model can be seen as comprising three loci of interest. These consist of the task, method, and domain perspectives. To our knowledge this view was clearly stated for the first time in <ref> (Steels, 1990) </ref> and since thento a smaller or larger extentall of the most significant contributions to knowledge-level modeling have subscribed to it (Chandrasekaran et al., 1992; Wielinga et al., 1992a; 1992b; Puerta et al., 1992; Runkel et al., 1994). A task specification describes what needs to be achieved. <p> Static roles denote structures which do not get modified during problem solving, while dynamic roles denote structures which can be modified during problem solving. Dynamic roles further divide into intermediate and solution roles. Solution roles point to the case models <ref> (Steels, 1990) </ref> which provide the solution to the application problem in hand. Intermediate roles denote instead structures which can change during problem solving but only play a support role during the construction of the solution.
Reference: <author> Stutt, A. </author> <year> (1989). </year> <title> Argument in the humanities: a knowledge-based approach. </title> <type> Unpublished PhD Thesis. </type> <note> (Available as Technical Report No. 49. HCRL, The Open University.) </note> <author> Toulmin, S. </author> <year> (1958). </year> <title> The Uses of Argument. </title> <publisher> Cambridge: Cambridge University Press. </publisher>
Reference-contexts: This model can be extended to include design methodologies as backing theories. Since Toulmins model only deals with single claims (or argument steps) the basic model needs to be augmented to deal with the relationships between the argument claims. Stutts extended Toulmin model <ref> (Stutt, 1989) </ref> identifies the basic Toulmin structure as level 0 in a three level model which also includes: Argument-1s.
Reference: <author> Toulmin, S., Rieke, R. and Janik, A. </author> <year> (1979). </year> <title> An Introduction to Reasoning. </title> <address> New York: </address> <publisher> Macmillan Publishing Co. </publisher>
Reference: <author> Van de Velde, W. </author> <year> (1994a). </year> <title> Issues in Knowledge Level Modelling. </title> <booktitle> Proceedings of the 8th Banff KA for KBS Workshop, </booktitle> <volume> Vol 2. </volume> <month> 38-138-11. </month>
Reference: <author> Van de Velde, W. </author> <year> (1994b). </year> <title> A Constructivist View on Knowledge Engineering. </title> <booktitle> Proc. 11th European Conf. on AI. </booktitle>
Reference: <editor> Ed. Cohn, A. </editor> <publisher> London: Wiley and Sons. </publisher> <pages> 727-731. </pages>
Reference: <author> Wielinga B. J., Schreiber A.Th. and Breuker J. </author> <year> (1992a). </year> <title> KADS: A Modelling Approach to Knowledge Engineering. </title> <booktitle> In Knowledge Acquisition 4(1). </booktitle> <pages> 5-53. </pages>
Reference: <author> Wielinga, B., Van de Velde, W., Schreiber, G. and Akkermans, H. </author> <year> (1992b). </year> <title> The CommonKADS Framework for Knowledge Modelling. </title> <booktitle> Proceedings of the 7th Banff KA for KBS Workshop, </booktitle> <volume> Vol 2. </volume>
Reference-contexts: The categorisation described here is based on the approach used in CoE, which distinguishes between static and dynamic roles (which are called models in CoE), and on the typology of case models in CommonKADS, which distinguishes between initial case data, user input, intermediate case data, and case solutions <ref> (Wielinga et al., 1992b) </ref>. 3. DESIGN AND ARGUMENTATION The propose-evaluate-revise schema used in discussing design as a generic task (Chandrasekaran, 1990) makes explicit its non-monotonic character. This schema operates at many different levels.
Reference: <author> Yost, G. R. </author> <year> (1994). </year> <note> Configuring Elevator Systems . DEC Project Report. Available through anonymous ftp from ftp://camis.stanford.edu/pub/protege/s2-word.sea.hqx Zdrahal, </note> <author> Z. and Motta, E. </author> <year> (1994). </year> <title> An In-depth Study of Propose & Revise Problem Solving. Proceedings of the Japanese Knowledge Acquisition Workshop, </title> <address> JKAW 94, Hatoyama, Japan. </address>
Reference-contexts: A task specification describes what needs to be achieved. For instance in the VT problem <ref> (Yost, 1994) </ref> the task is to assign values to the design parameter in a way which satisfies all given constraints. VT can therefore be seen as an instance of a parametric design problem (Schreiber, 1994). <p> The solution described in (Motta et al., 1994) was based on the Yost specification of the VT problem <ref> (Yost, 1994) </ref> which provides a description of the VT domain which maps very easily to a Propose&Revise schema.
References-found: 40

