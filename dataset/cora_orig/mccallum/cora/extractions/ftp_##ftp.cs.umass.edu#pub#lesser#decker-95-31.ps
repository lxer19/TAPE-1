URL: ftp://ftp.cs.umass.edu/pub/lesser/decker-95-31.ps
Refering-URL: http://dis.cs.umass.edu/research/gpgp.html
Root-URL: 
Email: DECKER@CS.UMASS.EDU  
Title: Coordination Assistance for Mixed Human and Computational Agent Systems 1  
Author: Keith S. Decker and Victor R. Lesser 
Address: Amherst, MA 01003  
Affiliation: Department of Computer Science University of Massachusetts,  
Abstract: UMass Computer Science Technical Report 95-31 May 18, 1995 Abstract In many application areas (such as concurrent engineering, software development, hospital scheduling, manufacturing scheduling, and military planning), individuals are responsible for an agenda of tasks and face choices about the best way to locally handle each task, in what order to do tasks, and when to do them. Such decisions are often hard to make because of coordination problems: individual tasks are related to the tasks of others in complex ways, and there are many sources of uncertainty (no one has a complete view of the task structure at arbitrary levels of detail, the situation may be changing dynamically, and no one is entirely sure of the outcomes of all of their actions). The focus of this paper is the development of support tools for distributed, cooperative work by groups (collaborative teams) of human and computational agents. We will discuss the design of a set of distributed autonomous computer programs (agents) that assist people in coordinating their activities by helping them to manage their agendas. Our approach can also supply coordination and scheduling facilities to computational domain agents (such as autonomous design checkers or databases). We briefly describe an initial implementation of these ideas using only computational agents and abstract task environments. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. Castelfranchi. </author> <title> Commitments:from individual intentions to groups and organizations. </title> <editor> In Michael Prietula, editor, </editor> <title> AI and theories of groups & organizations: Conceptual and Empirical Research. </title> <booktitle> AAAI Workshop, </booktitle> <year> 1993. </year> <note> Working Notes. </note>
Reference-contexts: The GPGP approach of recognizing and reacting to the characteristics of certain coordination relationships is shared with Von Martial's work on the favor relationship [28]. The use of commitments in the GPGP family of algorithms is based on the ideas of many other researchers <ref> [3, 24, 1, 17] </ref>. Each agent also has a heuristic local scheduler that decides what actions the agent should take and when, based on its current view of the problem solving situation (including the commitments it has made), and a utility function.
Reference: [2] <author> CHECKMATE. </author> <title> Air campaign planningan approach for the future. </title> <type> White Paper. </type>
Reference-contexts: Coordination Assistant Agents (UCAAs) and Agent Coordination Modules (ACMs) 2 Air Campaign Planning Example We will describe a system in the Air Campaign Planning Domain that consists of several planning tools used concurrently by the JFACC, his staff, and associated humans, computational agents, and smart databases, based on information in <ref> [2, 4] </ref>. Figure 2 shows a portion of the global task structure in this environment. <p> We'll begin with the JFACC, who is using air campaign planning tools to refine general objectives into the selection of specific objectives, and a course-of-action for achieving the objective (such as disrupting aircraft manufacture). Inherent in this process is the analysis of enemy strengths and vulnerabilities <ref> [2] </ref>; such analysis is tied to ongoing situation analysis and assessment done remotely and by the JFACC intelligence staff (at remote workstations). Along with the air campaign planning tools, the JFACC has a window on his workstation that displays his current agenda of tasks.
Reference: [3] <author> Philip R. Cohen and Hector J. Levesque. </author> <title> Intention is choice with commitment. </title> <journal> Artificial Intelligence, </journal> <volume> 42(3) </volume> <pages> 213-261, </pages> <year> 1990. </year>
Reference-contexts: The GPGP approach of recognizing and reacting to the characteristics of certain coordination relationships is shared with Von Martial's work on the favor relationship [28]. The use of commitments in the GPGP family of algorithms is based on the ideas of many other researchers <ref> [3, 24, 1, 17] </ref>. Each agent also has a heuristic local scheduler that decides what actions the agent should take and when, based on its current view of the problem solving situation (including the commitments it has made), and a utility function.
Reference: [4] <author> ISX Corporation. </author> <title> ACPTthe air campaign planning tool. </title> <type> White Paper. </type>
Reference-contexts: Coordination Assistant Agents (UCAAs) and Agent Coordination Modules (ACMs) 2 Air Campaign Planning Example We will describe a system in the Air Campaign Planning Domain that consists of several planning tools used concurrently by the JFACC, his staff, and associated humans, computational agents, and smart databases, based on information in <ref> [2, 4] </ref>. Figure 2 shows a portion of the global task structure in this environment.
Reference: [5] <author> Keith S. Decker. </author> <title> Environment Centered Analysis and Design of Coordination Mechanisms. </title> <type> PhD thesis, </type> <institution> University of Massachusetts, </institution> <year> 1995. </year>
Reference-contexts: Note that quite a bit of detail can be captured in just the `computational' aspects of the environmentin this case, the tasks use peoples' time, not a computer's. However, TMS can model in more detail the physical resources and job shop characteristics of the ancillaries 8 if necessary <ref> [5] </ref>. Such detail is not necessary for us to analyze the protocols developed by [23], who propose a primary unit-ancillary protocol and a secondary ancillary-ancillary protocol. <p> The TMS framework (Task Analysis, Environment Modeling, and Simulation) [8] represents coordination problems in a formal, domain-independent way. We have used it to represent coordination problems in distributed sensor networks, hospital patient scheduling, airport resource management, distributed information retrieval, pilot's associate, local area net 9 work diagnosis, etc. <ref> [5] </ref>. For the subject of this paper, there are two unique features of TMS. The first is the explicit, quantitative representation of task interrelationships that describe the effect on performance of activity choices and temporal orderings. The second is the representation of task structures at multiple levels of abstraction. <p> The relationships between tasks may also depend on physical resources. This notation and associated semantics are formally defined in <ref> [8, 5] </ref>. See also the air campaign planning system example in Section 2 and the hospital patient scheduling example in Section 3. <p> We have examined general performance issues, shown how to decide which mechanisms are useful in an environment (and that, in fact, different environments require different sets of mechanisms), a sixth mechanism for load balancing, and we've recreated some experiments in computational organizational design. This work is described in <ref> [5] </ref>. 6 Conclusions and Future Work The most important thing to be clear about the results of our approach is that we are not building tools for solving a particular domain problem like crisis management or manufacturing planning problemwe are building tools to support the use of these domain tools by
Reference: [6] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Generalizing the partial global planning algorithm. </title> <journal> International Journal of Intelligent and Cooperative Information Systems, </journal> <volume> 1(2) </volume> <pages> 319-346, </pages> <month> June </month> <year> 1992. </year> <month> 14 </month>
Reference-contexts: tasks to his staff example) or within portions controllable by multiple agents (as in the case of the overlapping tasks in the JFACC example). 4 The five mechanisms we described in [9] form a basic set that provides similar functionality to the original partial global planning algorithm as explained in <ref> [6] </ref>. Mechanism 1 exchanges useful private views of task structures; Mechanism 2 communicates results; Mechanism 3 handles redundant methods; Mechanisms 4 and 5 handle hard and soft coordination relationships. More mechanisms can be added, such as a load balancing mechanism.
Reference: [7] <author> Keith S. Decker and Victor R. Lesser. </author> <title> An approach to analyzing the need for meta-level communication. </title> <booktitle> In Proceedings of the Thirteenth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 360-366, </pages> <address> Chamb ery, France, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: The observation that no single organization or coordination algorithm is `the best' across environments, problem-solving instances, or even particular situations is a common one in the study of both human organizational theory (especially contingency theory) [19, 13, 25] and cooperative distributed problem solving <ref> [12, 11, 10, 7] </ref>.
Reference: [8] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Quantitative modeling of complex computational task environments. </title> <booktitle> In Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <pages> pages 217-224, </pages> <address> Washington, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: The TMS framework (Task Analysis, Environment Modeling, and Simulation) <ref> [8] </ref> represents coordination problems in a formal, domain-independent way. We have used it to represent coordination problems in distributed sensor networks, hospital patient scheduling, airport resource management, distributed information retrieval, pilot's associate, local area net 9 work diagnosis, etc. [5]. <p> The relationships between tasks may also depend on physical resources. This notation and associated semantics are formally defined in <ref> [8, 5] </ref>. See also the air campaign planning system example in Section 2 and the hospital patient scheduling example in Section 3.
Reference: [9] <author> Keith S. Decker and Victor R. Lesser. </author> <title> Designing a family of coordination algorithms. </title> <booktitle> In Proceedings of the First International Conference on Multi-Agent Systems, </booktitle> <address> San Francisco, </address> <month> June </month> <year> 1995. </year> <note> AAAI Press. Longer version available as UMass CS-TR 94-14. </note>
Reference-contexts: Each component or mechanism can be added as required in reaction to the environment in which the agents find themselves a part. An individual algorithm in the family is defined by a particular set of active mechanisms and their associated parameters. In <ref> [9] </ref> we discuss the interactions between these mechanisms and how to decide when each mechanism should be used, drawing data from simulation experiments of multiple agent teams working in abstract task environments. <p> respond to coordination relationships between portions of the task structure controllable by different agents (as in the JFACC assigning tasks to his staff example) or within portions controllable by multiple agents (as in the case of the overlapping tasks in the JFACC example). 4 The five mechanisms we described in <ref> [9] </ref> form a basic set that provides similar functionality to the original partial global planning algorithm as explained in [6]. Mechanism 1 exchanges useful private views of task structures; Mechanism 2 communicates results; Mechanism 3 handles redundant methods; Mechanisms 4 and 5 handle hard and soft coordination relationships. <p> The mechanisms are independent in the sense that they can be used in any combination. If inconsistent constraints are introduced, the local scheduler would return at least one violated constraint in all its schedules, which would be dealt with so as to maximize subjective utility <ref> [9] </ref>.
Reference: [10] <author> E. H. Durfee and T. A. Montgomery. </author> <title> Coordination as distributed search in a hierarchical behavior space. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(6) </volume> <pages> 1363-1378, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: The observation that no single organization or coordination algorithm is `the best' across environments, problem-solving instances, or even particular situations is a common one in the study of both human organizational theory (especially contingency theory) [19, 13, 25] and cooperative distributed problem solving <ref> [12, 11, 10, 7] </ref>.
Reference: [11] <author> Edmund H. Durfee, Victor R. Lesser, and Daniel D. Corkill. </author> <title> Coherent cooperation among communicating problem solvers. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 36(11) </volume> <pages> 1275-1291, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: The observation that no single organization or coordination algorithm is `the best' across environments, problem-solving instances, or even particular situations is a common one in the study of both human organizational theory (especially contingency theory) [19, 13, 25] and cooperative distributed problem solving <ref> [12, 11, 10, 7] </ref>.
Reference: [12] <author> Mark S. Fox. </author> <title> An organizational view of distributed systems. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 11(1) </volume> <pages> 70-80, </pages> <month> January </month> <year> 1981. </year>
Reference-contexts: The observation that no single organization or coordination algorithm is `the best' across environments, problem-solving instances, or even particular situations is a common one in the study of both human organizational theory (especially contingency theory) [19, 13, 25] and cooperative distributed problem solving <ref> [12, 11, 10, 7] </ref>.
Reference: [13] <author> J. </author> <title> Galbraith. Organizational Design. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1977. </year>
Reference-contexts: The observation that no single organization or coordination algorithm is `the best' across environments, problem-solving instances, or even particular situations is a common one in the study of both human organizational theory (especially contingency theory) <ref> [19, 13, 25] </ref> and cooperative distributed problem solving [12, 11, 10, 7].
Reference: [14] <author> Alan Garvey, Keith Decker, and Victor Lesser. </author> <title> A negotiation-based interface between a real-time scheduler and a decision-maker. </title> <type> CS Technical Report 94-08, </type> <institution> University of Massachusetts, </institution> <year> 1994. </year>
Reference-contexts: We have developed an initial implementation of the ACM that we will discuss in Section 4.2. The interface between the coordination module and the local scheduler is well defined, and the local scheduling component can be replaced if a domain-specific scheduler or schedulers is available <ref> [14] </ref>. 1.3 A Task Structure Specification Tool The final facility we are developing is a knowledge acquisition tool for the UCAAs and ACMs.
Reference: [15] <author> Carl Hewitt. </author> <title> Offices are open systems. </title> <journal> ACM Transactions on Office Information Systems, </journal> <volume> 4(3) </volume> <pages> 271-287, </pages> <month> July </month> <year> 1986. </year>
Reference-contexts: For example, in an office or concurrent engineering environment, both independent computerized agents (usually controlling access to resources) and intelligent assistants to office workers can exist [21]. In real offices, activity is taking place semi-autonomously, and centralized control and detailed global views are rarely available or socially possible <ref> [15, 22] </ref>.
Reference: [16] <author> K. E. Huff and V. R. Lesser. </author> <title> A plan-based intelligent assistant that supports the software development process. </title> <booktitle> In Proceedings of the Third ACM Symposium on Software Development Environments, </booktitle> <address> Boston, MA, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: To summarize, our vision is to provide direct support for the goal of concurrent, mixed-initiative planning by groups of humans and computational agents <ref> [16] </ref>. We will do this by providing an interface that helps to user to schedule their agenda of activities in a sensible way given how those activities interrelate with the activities of other humans and agents in the system.
Reference: [17] <author> N. R. Jennings. </author> <title> Commitments and conventions: The foundation of coordination in multi-agent systems. </title> <journal> The Knowledge Engineering Review, </journal> <volume> 8(3) </volume> <pages> 223-250, </pages> <year> 1993. </year>
Reference-contexts: The GPGP approach of recognizing and reacting to the characteristics of certain coordination relationships is shared with Von Martial's work on the favor relationship [28]. The use of commitments in the GPGP family of algorithms is based on the ideas of many other researchers <ref> [3, 24, 1, 17] </ref>. Each agent also has a heuristic local scheduler that decides what actions the agent should take and when, based on its current view of the problem solving situation (including the commitments it has made), and a utility function.
Reference: [18] <author> R. Kadia. </author> <title> Issues encountered in building a flexible software development environment: Lessons from the Arcadia project. </title> <booktitle> In Proceedings of the Fifth ACM SIGSOFT Symposium on Software Development Environments (SDE5), </booktitle> <pages> pages 169-180, </pages> <address> Tyson's Corner, VA, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: We have already been exploring the use of our technology in the representation and management of large software engineering 7 projects to help schedule tasks being performed by many different programmers using many different resources. The development, integration, and evaluation of this technology for the ARPA-sponsored ARCADIA <ref> [18, 26] </ref> software engineering development environment. Part of the ARCADIA environment is directly concerned with representing and tracking the state of: software development processes (including interrelationships), the products being produced, and the resources available.
Reference: [19] <author> Paul Lawrence and Jay Lorsch. </author> <title> Organization and Environment. </title> <publisher> Harvard University Press, </publisher> <address> Cambridge, MA, </address> <year> 1967. </year> <month> 15 </month>
Reference-contexts: The observation that no single organization or coordination algorithm is `the best' across environments, problem-solving instances, or even particular situations is a common one in the study of both human organizational theory (especially contingency theory) <ref> [19, 13, 25] </ref> and cooperative distributed problem solving [12, 11, 10, 7].
Reference: [20] <author> R.E. Levitt, P.G. Cohen, J.C. Kunz, C. Nass, T. Christiansen, and Y. Jin. </author> <title> The virtual design team: Simulating how organizational structure and communication tools affect team performance. </title> <editor> In K.M. Carley and M.J. Prietula, editors, </editor> <title> Computational Organization Theory. </title> <publisher> Lawrence Erlbaum Associates, </publisher> <year> 1994. </year>
Reference-contexts: The simulation and analysis components of the task structure specification tool allow staff to simulate the effect of adding a new domain-level tool, or perhaps more importantly, to examine the effect of changing organizational coordination mechanismsallowing them to ask and answer `what if ' questions <ref> [20] </ref>.
Reference: [21] <author> Thomas W. Malone. </author> <booktitle> What is coordination theory? In Proceedings of the National Science Foundation Coordination Theory Workshop, </booktitle> <month> February </month> <year> 1988. </year>
Reference-contexts: We will briefly describe the application of this technology to concurrent engineering, software engineering project management, and hospital scheduling. For example, in an office or concurrent engineering environment, both independent computerized agents (usually controlling access to resources) and intelligent assistants to office workers can exist <ref> [21] </ref>. In real offices, activity is taking place semi-autonomously, and centralized control and detailed global views are rarely available or socially possible [15, 22].
Reference: [22] <author> Sergei Nirenburg and Victor Lesser. </author> <title> Providing intelligent assistance in distributed office environments. </title> <editor> In Alan H. Bond and Les Gasser, editors, </editor> <booktitle> Readings in Distributed Artificial Intelligence, </booktitle> <pages> pages 590-598. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1988. </year>
Reference-contexts: For example, in an office or concurrent engineering environment, both independent computerized agents (usually controlling access to resources) and intelligent assistants to office workers can exist [21]. In real offices, activity is taking place semi-autonomously, and centralized control and detailed global views are rarely available or socially possible <ref> [15, 22] </ref>.
Reference: [23] <author> P. S. Ow, M. J. Prietula, and W. Hsu. </author> <title> Configuring knowledge-based systems to organizational structures: Issues and examples in multiple agent support. </title> <editor> In L. F. Pau, J. Motiwalla, Y. H. Pao, and H. H. Teh, editors, </editor> <booktitle> Expert Systems in Economics, Banking, and Management, </booktitle> <pages> pages 309-318. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1989. </year>
Reference-contexts: Let's look at a brief example of a task structure model of this environment expressed with TMS, our framework for reasoning about multi-agent task environments (see Section 4.1) The following description is from an actual case study <ref> [23] </ref>: Patients in General Hospital reside in units that are organized by branches of medicine, such as orthopedics or neurosurgery. <p> However, TMS can model in more detail the physical resources and job shop characteristics of the ancillaries 8 if necessary [5]. Such detail is not necessary for us to analyze the protocols developed by <ref> [23] </ref>, who propose a primary unit-ancillary protocol and a secondary ancillary-ancillary protocol. In this type of environment, scheduling agents would interact with nurses and each other, using the mechanisms, facilities, and tools suggested here, to assist in the efficient and effective scheduling of patient tests and treatments.
Reference: [24] <author> Yoav Shoham. AGENT0: </author> <title> A simple agent language and its interpreter. </title> <booktitle> In Proceedings of the Ninth National Conference on Artificial Intelligence, </booktitle> <pages> pages 704-709, </pages> <address> Anaheim, </address> <month> July </month> <year> 1991. </year>
Reference-contexts: The GPGP approach of recognizing and reacting to the characteristics of certain coordination relationships is shared with Von Martial's work on the favor relationship [28]. The use of commitments in the GPGP family of algorithms is based on the ideas of many other researchers <ref> [3, 24, 1, 17] </ref>. Each agent also has a heuristic local scheduler that decides what actions the agent should take and when, based on its current view of the problem solving situation (including the commitments it has made), and a utility function.
Reference: [25] <author> Arthur L. Stinchcombe. </author> <title> Information and Organizations. </title> <publisher> University of California Press, </publisher> <address> Berkeley, CA, </address> <year> 1990. </year>
Reference-contexts: The observation that no single organization or coordination algorithm is `the best' across environments, problem-solving instances, or even particular situations is a common one in the study of both human organizational theory (especially contingency theory) <ref> [19, 13, 25] </ref> and cooperative distributed problem solving [12, 11, 10, 7].
Reference: [26] <author> R.N. Taylor, F.C. Belz, L.A. Clarke, L. Osterweil, W.W. Selby, J.C. Wileden, A.L. Wolfe, and M. Young. </author> <title> Foundations for the Arcadia environment architecture. </title> <booktitle> In Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, </booktitle> <pages> pages 1-12, </pages> <address> Boston, MA, </address> <month> November </month> <year> 1988. </year>
Reference-contexts: We have already been exploring the use of our technology in the representation and management of large software engineering 7 projects to help schedule tasks being performed by many different programmers using many different resources. The development, integration, and evaluation of this technology for the ARPA-sponsored ARCADIA <ref> [18, 26] </ref> software engineering development environment. Part of the ARCADIA environment is directly concerned with representing and tracking the state of: software development processes (including interrelationships), the products being produced, and the resources available.
Reference: [27] <author> Frank v. Martial. </author> <title> A conversation model for resolving conflicts among distributed office activities. </title> <booktitle> In Proceedings of the Fifth Conference on Office Information Systems, </booktitle> <pages> pages 99-108, </pages> <address> Cambridge, MA, </address> <month> April </month> <year> 1990. </year>
Reference: [28] <author> Frank v. Martial. </author> <title> Coordinating Plans of Autonomous Agents. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year> <booktitle> Lecture Notes in Artificial Intelligence no. </booktitle> <pages> 610. </pages>
Reference-contexts: The GPGP approach of recognizing and reacting to the characteristics of certain coordination relationships is shared with Von Martial's work on the favor relationship <ref> [28] </ref>. The use of commitments in the GPGP family of algorithms is based on the ideas of many other researchers [3, 24, 1, 17].
Reference: [29] <author> D.L. Westbrook, S.D. Anderson, D.M. Hart, and P.R. Cohen. </author> <title> Common lisp instrumentation package: User manual. </title> <type> Technical Report 94-26, </type> <institution> Department of Computer Science, University of Massachusetts, </institution> <year> 1994. </year> <month> 16 </month>
Reference-contexts: The simulator supports the graphical display of generated task structures, agent actions, and statistical data collection via CLIP <ref> [29] </ref> in CLOS (the Common Lisp Object System) on the DEC Alpha. 4.2 A Framework for Coordination: GPGP Many researchers have shown that there is no single best organization or coordination mechanism for all environments.
References-found: 29

