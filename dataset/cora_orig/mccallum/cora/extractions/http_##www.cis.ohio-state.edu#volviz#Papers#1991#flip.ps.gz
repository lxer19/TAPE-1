URL: http://www.cis.ohio-state.edu/volviz/Papers/1991/flip.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/volviz/papers_subject.html
Root-URL: 
Title: The Flipping Cube: A Device for Rotating 3D  
Author: Rasters Roni Yagel 
Note: 1.1 Introduction  
Abstract: Driven by the prospect of three-dimensional rasters as a primary vehicle for future 3D graphics and volumetric imaging, this paper introduces an architecture for real-time rendering of high-resolution volumetric images. The Flipping Cube Architecture utilizes parallel memory organization and a unique data orientation scheme in order to support contention free access to viewing rays. The swift advances in performance, availability and price of computing power, memory, and disk-space are transforming long thought techniques into reality. One typical example to this trend is the revolution taking place in the field of volume graphics. Grasping the feeling of this revolution requires no more than three decades of perspective. The display of computer graphics in the sixties was based on vector drawing devices and an 'object based' approach to scene representation and rendering. A symbolic representation of the scene objects was stored in a display-list and managed by the computer. Refreshing the screen was accomplished by rendering the vectors comprising the objects in the display-list. An alternative approach, termed raster graphics utilizes a 2D frame-buffer of pixels for scene representation and a 'raster based' renderer. This renderer colors the pixels in the frame-buffer that correspond to the discrete representation of the symbolic objects. Screen-refresh is performed by re-displaying the frame-buffer on the screen, thus there is no need to save the symbolic object representation. The main disadvantage of this approach is the memory and processing power it requires, which delayed its appearance until the early seventies when the technology was able to provide cheap and fast hardware to support it. The major advantages of vector-graphics are its ability to perform object related operations on the display-list and the fact that the lines it draws are continuous (i.e., without aliasing). On the other hand, the main appeal of raster-graphics is that it decouples rendering from screen-refresh which makes it insensitive to the scene complexity. It is also able to perform block operations, and it is suitable for the display of sampled images, that is, graphics and digitized images can be intermixed. Moreover, the 'object based' approach can still be imitated by maintaining a display-list which is redrawn to the frame-buffer as a result of each change in the scene. The above discussion describes the state-of-the-art in 2D graphics. In 3D graphics, however, the ruling majority of rendering methods still employ an 'object based' approach called surface graphics rather than employing a three dimensional 'raster based' approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Bakalash and A. Kaufman, MediCube: </author> <title> a 3D Medical Imaging Architecture. </title> <journal> Computers & Graph ics, </journal> <volume> 13(2) </volume> <pages> 151-157, </pages> <year> 1989. </year>
Reference: [2] <author> R. Bakalash and X. Zhang, </author> <title> Barrel Shift Microsystem for Parallel Processing. </title> <booktitle> In Proceedings Micro 23, 23rd Symposium and Workshop on Microprogramming and Microarchitecture, </booktitle> <address> Orlando, FA, </address> <month> November </month> <year> 1990. </year>
Reference-contexts: Moreover, the restrictiveness of this communication paradigm makes it suitable for our synchronous SIMD approach and allows a simple yet efficient hardware implementation, such as the conveyor <ref> [2, 4] </ref>. Projection Mechanism. The system is equipped with a mechanism to perform fast projection of a ray of voxels. This projection mechanism accepts N voxels, one from each module, and performs hidden voxel removal.
Reference: [3] <author> J. G. Cleary and G. Wyvill, </author> <title> Analysis of an Algorithm for Fast Ray Tracing using Uniform Space Subdivision. </title> <journal> The Visual Computer, </journal> <volume> 4 </volume> <pages> 65-83, </pages> <year> 1988. </year>
Reference-contexts: These fields still provide most of the applications for volume visualization [22, 24]. The obvious advantages are recently attracting also traditional surface-graphics-based applications such as rendering fractals [12, 21], rendering gaseous phenomena [7], modeling and rendering of growth processes [10], rendering complex objects containing surface tessellation <ref> [23, 3] </ref>, constructive solid geometry and CAD [28, 5, 27], and applications that benefit from the intermixing of the two approaches in medicine [16, 19], cell biology [28], and molecular biology [9]. The major drawback of the volumetric approach to computer graphics is the memory and processing power it requires.
Reference: [4] <author> D. Cohen and R. Bakalash, </author> <title> The Conveyor an Interconnection Device for Parallel Volumetric Transformations. </title> <booktitle> In 6th EG Workshop on Graphics Hardware, </booktitle> <address> Viena, Austria, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: Moreover, the restrictiveness of this communication paradigm makes it suitable for our synchronous SIMD approach and allows a simple yet efficient hardware implementation, such as the conveyor <ref> [2, 4] </ref>. Projection Mechanism. The system is equipped with a mechanism to perform fast projection of a ray of voxels. This projection mechanism accepts N voxels, one from each module, and performs hidden voxel removal.
Reference: [5] <author> D. Cohen, A. Kaufman and R. Yagel, </author> <title> Volumetric Graphics. </title> <type> Technical Report TR 91.01.30, </type> <institution> Depart ment of Computer Science, SUNY at Stony Brook, </institution> <month> January, </month> <year> 1991. </year>
Reference-contexts: Any change to the scene, viewing parameters, or rendering parameters requires re-rendering this list of surfaces. The 3D equivalent to 2D raster graphics is volumetric graphics which utilizes a 3D raster for 3D scene representation by coloring the voxels that correspond to the discrete representation of the scene objects <ref> [5] </ref>. The same appeal that drove the transfer of the graphics world from vector graphics to raster graphics, once the hardware and processing power became available, is already driving the migration of a variety of applications from 3D surface graphics to volume graphics. <p> The obvious advantages are recently attracting also traditional surface-graphics-based applications such as rendering fractals [12, 21], rendering gaseous phenomena [7], modeling and rendering of growth processes [10], rendering complex objects containing surface tessellation [23, 3], constructive solid geometry and CAD <ref> [28, 5, 27] </ref>, and applications that benefit from the intermixing of the two approaches in medicine [16, 19], cell biology [28], and molecular biology [9]. The major drawback of the volumetric approach to computer graphics is the memory and processing power it requires.
Reference: [6] <author> R. A. Drebin, L. Carpenter, and P. Hanrahan, </author> <title> Volume Rendering. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 64-75, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: This projection mechanism accepts N voxels, one from each module, and performs hidden voxel removal. The exact method of hidden voxel removal may vary from traditional first/last opaque projection [14], through maximum/minimum projection [25], weighted additive projection [18], and semitransparent composition <ref> [6] </ref>. An example of a first/last opaque projection mechanism is the voxel multiple-write bus (VMWB) used in the Cube architecture [14].
Reference: [7] <author> D. S. Ebert and R. E. Parent, </author> <title> Rendering and Animation of Gaseous Phenomena by Combining Fast Volume and Scanline A-buffer Techniques. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 367-376, </pages> <month> August </month> <year> 1990. </year> <month> 8 </month>
Reference-contexts: These fields still provide most of the applications for volume visualization [22, 24]. The obvious advantages are recently attracting also traditional surface-graphics-based applications such as rendering fractals [12, 21], rendering gaseous phenomena <ref> [7] </ref>, modeling and rendering of growth processes [10], rendering complex objects containing surface tessellation [23, 3], constructive solid geometry and CAD [28, 5, 27], and applications that benefit from the intermixing of the two approaches in medicine [16, 19], cell biology [28], and molecular biology [9].
Reference: [8] <author> S. M. Goldwasser, R. A. Reynolds, D. A. Talton, and E. S. Walsh, </author> <title> High Performance Graphics Processors for Medical Imaging Applications. </title> <editor> In P. M. Dew, R. A. Earnshaw, and T. R. Heywood, editors, </editor> <booktitle> Parallel Processing for Computer Vision and Display, </booktitle> <pages> pages 461-470. </pages> <publisher> Addison Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year>
Reference-contexts: The PAR-CUM system [13] is based on interleaved memory that allows parallel fetch of a macro voxel. Hidden voxel removal is performed by fetching macro voxels in a "ray-casting" fashion combined with Z-buffer based hidden-voxel inside each macro voxel. The Voxel Processor architecture <ref> [8] </ref> is based on the partition of voxel space into equal sub-cubes. Each sub-cube is projected by applying recursive BTF and the multiple 2D mini-pictures are merged into a final image.
Reference: [9] <author> D. S. Goodsell, S. Mian, and A. J. Olson, </author> <title> Rendering of Volumetric Data in Molecular Systems. </title> <journal> Journal of Molecular Graphics, </journal> <volume> 7 </volume> <pages> 41-47, </pages> <month> March </month> <year> 1989. </year>
Reference-contexts: [12, 21], rendering gaseous phenomena [7], modeling and rendering of growth processes [10], rendering complex objects containing surface tessellation [23, 3], constructive solid geometry and CAD [28, 5, 27], and applications that benefit from the intermixing of the two approaches in medicine [16, 19], cell biology [28], and molecular biology <ref> [9] </ref>. The major drawback of the volumetric approach to computer graphics is the memory and processing power it requires. Viewing of a moderate size volume requires the solution of the hidden voxel removal problem for millions of voxels.
Reference: [10] <author> N. Greene, </author> <title> Voxel Space Automata: Modeling with Stochastic Growth Processes in Voxel Space. </title> <journal> Computer Graphics, </journal> <volume> 23(3) </volume> <pages> 175-184, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: These fields still provide most of the applications for volume visualization [22, 24]. The obvious advantages are recently attracting also traditional surface-graphics-based applications such as rendering fractals [12, 21], rendering gaseous phenomena [7], modeling and rendering of growth processes <ref> [10] </ref>, rendering complex objects containing surface tessellation [23, 3], constructive solid geometry and CAD [28, 5, 27], and applications that benefit from the intermixing of the two approaches in medicine [16, 19], cell biology [28], and molecular biology [9].
Reference: [11] <author> J. F. Greenleaf, T. S. Tu, and E. H. Wood, </author> <title> Computer-Generated Three-Dimensional Oscilloscopic Images and Associated Techniques for Display and Study of Spatial Distribution of Pulmonary Blood Flow. </title> <journal> IEEE Transaction on Nuclear Science, </journal> <volume> NS-17:353-359, </volume> <year> 1970. </year>
Reference-contexts: Examples of this trend started to appear in the beginning of the seventies in applications involving 3D rasters (volumes) such as in medical and scientific visualization <ref> [11] </ref>. These fields still provide most of the applications for volume visualization [22, 24].
Reference: [12] <author> J. C. Hart, D. J. Sandin, and L. H. Kauffman, </author> <title> Ray Tracing Deterministic 3-D Fractals. </title> <journal> Computer Graphics, </journal> <volume> 23(3) </volume> <pages> 289-296, </pages> <month> July </month> <year> 1989. </year>
Reference-contexts: These fields still provide most of the applications for volume visualization [22, 24]. The obvious advantages are recently attracting also traditional surface-graphics-based applications such as rendering fractals <ref> [12, 21] </ref>, rendering gaseous phenomena [7], modeling and rendering of growth processes [10], rendering complex objects containing surface tessellation [23, 3], constructive solid geometry and CAD [28, 5, 27], and applications that benefit from the intermixing of the two approaches in medicine [16, 19], cell biology [28], and molecular biology [9].
Reference: [13] <author> D. Jackel and W. Strasser, </author> <title> Reconstructing Solids from Tomographic Scans The PARCUM II System. </title> <editor> In A. Kaufman, editor, </editor> <booktitle> Volume Visualization, </booktitle> <pages> pages 358-371. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: In the late 1980's, we witnessed the appearance of several special-purpose voxel based architectures for volume visualization. The Cube architecture [14] is based on simultaneous processing an axial beam of voxels. The octree based Insight system [20] performs recursive back-to-front (BTF) projection. The PAR-CUM system <ref> [13] </ref> is based on interleaved memory that allows parallel fetch of a macro voxel. Hidden voxel removal is performed by fetching macro voxels in a "ray-casting" fashion combined with Z-buffer based hidden-voxel inside each macro voxel.
Reference: [14] <author> A. Kaufman and R. Bakalash, </author> <title> Memory and Processing Architecture for 3-D Voxel-Based Imagery. </title> <journal> IEEE Computer Graphics & Applications, </journal> <volume> 8(11) </volume> <pages> 10-23, </pages> <month> November </month> <year> 1988. </year>
Reference-contexts: The design of a system with a real-time interactive capabilities must employ high performance hardware based on multiprocessing and parallel memory organization. In the late 1980's, we witnessed the appearance of several special-purpose voxel based architectures for volume visualization. The Cube architecture <ref> [14] </ref> is based on simultaneous processing an axial beam of voxels. The octree based Insight system [20] performs recursive back-to-front (BTF) projection. The PAR-CUM system [13] is based on interleaved memory that allows parallel fetch of a macro voxel. <p> Projection Mechanism. The system is equipped with a mechanism to perform fast projection of a ray of voxels. This projection mechanism accepts N voxels, one from each module, and performs hidden voxel removal. The exact method of hidden voxel removal may vary from traditional first/last opaque projection <ref> [14] </ref>, through maximum/minimum projection [25], weighted additive projection [18], and semitransparent composition [6]. An example of a first/last opaque projection mechanism is the voxel multiple-write bus (VMWB) used in the Cube architecture [14]. <p> The exact method of hidden voxel removal may vary from traditional first/last opaque projection <ref> [14] </ref>, through maximum/minimum projection [25], weighted additive projection [18], and semitransparent composition [6]. An example of a first/last opaque projection mechanism is the voxel multiple-write bus (VMWB) used in the Cube architecture [14]. Each module at each memory cycle can either read a voxel data from its shift register or the bus into the memory, write a voxel from the memory onto the bus or the shift register, or send a voxel from the memory to the projection mechanism.
Reference: [15] <author> A. Kaufman, R. Bakalash, D. Cohen, and R. Yagel, </author> <title> Architectures for Volume Rendering Survey. </title> <journal> IEEE Engineering in Medicine and Biology, </journal> <volume> 9(4) </volume> <pages> 18-23, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Each sub-cube is projected by applying recursive BTF and the multiple 2D mini-pictures are merged into a final image. The spreading recognition of the importance of volume visualization drove numerous manufactures to add volume rendering capabilities to their general purpose graphics engines. The reader is referred to <ref> [15] </ref> for a broader comparative survey of both special and general purpose architectures for volume rendering. This paper describes a memory organization for volumetric graphics that can support real-time rendering of high-resolution volumes.
Reference: [16] <author> A. Kaufman, R. Yagel, and D. Cohen, </author> <title> Intermixing Surface and Volume Rendering. </title> <editor> In K. H. Hoehne, H. Fuchs, and S. M. Pizer, editors, </editor> <booktitle> 3D Imaging in Medicine, Algorithms, Systems, Applications, volume F/60 of NATO ASI Series, </booktitle> <pages> pages = 217-227, </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: also traditional surface-graphics-based applications such as rendering fractals [12, 21], rendering gaseous phenomena [7], modeling and rendering of growth processes [10], rendering complex objects containing surface tessellation [23, 3], constructive solid geometry and CAD [28, 5, 27], and applications that benefit from the intermixing of the two approaches in medicine <ref> [16, 19] </ref>, cell biology [28], and molecular biology [9]. The major drawback of the volumetric approach to computer graphics is the memory and processing power it requires. Viewing of a moderate size volume requires the solution of the hidden voxel removal problem for millions of voxels.
Reference: [17] <author> C. Kornfeld, </author> <title> The Image Prism: A Device for Rotating and Mirroring Bitmap Images. </title> <journal> IEEE Com puter Graphics & Application, </journal> <volume> 7(5) </volume> <pages> 21-30, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: M do column write (u; v; v); column write (u; v; v); end for; end for; row read (u; M v; v); row read (M u; v; u); end for; end for; The actual implementation of the Flip-Buffer can be achieved by a special purpose memory such as the Prism <ref> [17] </ref>, however, this requires high linkage complexity all memory module have to be connected to this auxiliary device. We propose here a solution based on a skewed memory organization that better adapts to the Flipping Cube architecture and requires merely an additional mechanism for a trivial address mapping.
Reference: [18] <author> R. Lenz, P. E. Danielsson, S. Cronstrom, and B. Gudmundson, </author> <title> Interactive Display of 3D Medical Objects. </title> <editor> In K. H. Hoehne, editor, </editor> <booktitle> Pictorial Information Systems Medicine, volume F19 of the NATO ASI Series, </booktitle> <pages> pages 459-468. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1986. </year>
Reference-contexts: This projection mechanism accepts N voxels, one from each module, and performs hidden voxel removal. The exact method of hidden voxel removal may vary from traditional first/last opaque projection [14], through maximum/minimum projection [25], weighted additive projection <ref> [18] </ref>, and semitransparent composition [6]. An example of a first/last opaque projection mechanism is the voxel multiple-write bus (VMWB) used in the Cube architecture [14].
Reference: [19] <author> M. Levoy, </author> <title> A Hybrid Ray Tracer for Rendering Polygon and Volume Data. </title> <journal> IEEE Computer Graphics & Applications, </journal> <volume> 10(3) </volume> <pages> 33-40, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: also traditional surface-graphics-based applications such as rendering fractals [12, 21], rendering gaseous phenomena [7], modeling and rendering of growth processes [10], rendering complex objects containing surface tessellation [23, 3], constructive solid geometry and CAD [28, 5, 27], and applications that benefit from the intermixing of the two approaches in medicine <ref> [16, 19] </ref>, cell biology [28], and molecular biology [9]. The major drawback of the volumetric approach to computer graphics is the memory and processing power it requires. Viewing of a moderate size volume requires the solution of the hidden voxel removal problem for millions of voxels.
Reference: [20] <author> D. J. Meagher, </author> <title> Applying Solids Processing Methods to Medical Planning. </title> <booktitle> In Proceedings NCGA'85, National Computer Graphics Association, </booktitle> <address> Dallas, TX, </address> <pages> pages 101-109, </pages> <month> April </month> <year> 1985. </year>
Reference-contexts: In the late 1980's, we witnessed the appearance of several special-purpose voxel based architectures for volume visualization. The Cube architecture [14] is based on simultaneous processing an axial beam of voxels. The octree based Insight system <ref> [20] </ref> performs recursive back-to-front (BTF) projection. The PAR-CUM system [13] is based on interleaved memory that allows parallel fetch of a macro voxel. Hidden voxel removal is performed by fetching macro voxels in a "ray-casting" fashion combined with Z-buffer based hidden-voxel inside each macro voxel.
Reference: [21] <author> A. Norton, </author> <title> Generation and Display of Geometric Fractals in 3-D. </title> <journal> Computer Graphics, </journal> <volume> 16(3) </volume> <pages> 61-67, </pages> <month> July </month> <year> 1982. </year>
Reference-contexts: These fields still provide most of the applications for volume visualization [22, 24]. The obvious advantages are recently attracting also traditional surface-graphics-based applications such as rendering fractals <ref> [12, 21] </ref>, rendering gaseous phenomena [7], modeling and rendering of growth processes [10], rendering complex objects containing surface tessellation [23, 3], constructive solid geometry and CAD [28, 5, 27], and applications that benefit from the intermixing of the two approaches in medicine [16, 19], cell biology [28], and molecular biology [9].
Reference: [22] <author> P. Shirley and H. Neeman, </author> <title> Volume Visualization at the Center for Supercomputing Research and Development. </title> <editor> In C. Upson, editor, </editor> <booktitle> Proceedings of the Chapel Hill Workshop on Volume Visualization, </booktitle> <pages> pages 17-20, </pages> <address> Chapel Hill, NC, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: Examples of this trend started to appear in the beginning of the seventies in applications involving 3D rasters (volumes) such as in medical and scientific visualization [11]. These fields still provide most of the applications for volume visualization <ref> [22, 24] </ref>.
Reference: [23] <author> J. M. Snyder and A. H. Barr, </author> <title> Ray Tracing Complex Models Containing Surface Tessellations. </title> <journal> Computer Graphics, </journal> <volume> 21(4) </volume> <pages> 119-124, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: These fields still provide most of the applications for volume visualization [22, 24]. The obvious advantages are recently attracting also traditional surface-graphics-based applications such as rendering fractals [12, 21], rendering gaseous phenomena [7], modeling and rendering of growth processes [10], rendering complex objects containing surface tessellation <ref> [23, 3] </ref>, constructive solid geometry and CAD [28, 5, 27], and applications that benefit from the intermixing of the two approaches in medicine [16, 19], cell biology [28], and molecular biology [9]. The major drawback of the volumetric approach to computer graphics is the memory and processing power it requires.
Reference: [24] <author> C. Upson and M. Keeler, V-BUFFER: </author> <title> Visible Volume Rendering. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 59-64, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Examples of this trend started to appear in the beginning of the seventies in applications involving 3D rasters (volumes) such as in medical and scientific visualization [11]. These fields still provide most of the applications for volume visualization <ref> [22, 24] </ref>.
Reference: [25] <author> J. W. Wallis, T. R. Miller, C. A. Lerner, and E. C. Kleerup, </author> <title> Three-Dimensional Display in Nuclear Medicine. </title> <journal> IEEE Transactions on Medical Imaging, </journal> <volume> 8(4) </volume> <pages> 297-303, </pages> <month> December </month> <year> 1989. </year>
Reference-contexts: The system is equipped with a mechanism to perform fast projection of a ray of voxels. This projection mechanism accepts N voxels, one from each module, and performs hidden voxel removal. The exact method of hidden voxel removal may vary from traditional first/last opaque projection [14], through maximum/minimum projection <ref> [25] </ref>, weighted additive projection [18], and semitransparent composition [6]. An example of a first/last opaque projection mechanism is the voxel multiple-write bus (VMWB) used in the Cube architecture [14].
Reference: [26] <author> R. Yagel, </author> <title> Efficient Methods for Volume Graphics. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, State University of New York at Stony Brook, </institution> <month> December </month> <year> 1991. </year> <month> 9 </month>
Reference-contexts: The following section describes one possible method for the implementation of the +U and V flipping operations which is based on an additional N 2 voxel memory in a skewed organization. Another method, utilizing a 3D shearing algorithm is described elsewhere <ref> [26] </ref>. 1.5 The Flip-Buffer The Flip-Buffer is a piece of 2D memory array of N 2 voxels. The Flip-Buffer supports two parallel operations: writing a column of N voxels simultaneously and reading a row of N voxels simultaneously.
Reference: [27] <author> R. Yage, D. Cohen, and A. Kaufman, </author> <title> Discrete Ray Tracing. </title> <type> Technical Report TR 91.28.06, </type> <institution> Depart ment of Computer Science, SUNY at Stony Brook, </institution> <month> June </month> <year> 1991. </year> <note> Submitted for publication. </note>
Reference-contexts: The obvious advantages are recently attracting also traditional surface-graphics-based applications such as rendering fractals [12, 21], rendering gaseous phenomena [7], modeling and rendering of growth processes [10], rendering complex objects containing surface tessellation [23, 3], constructive solid geometry and CAD <ref> [28, 5, 27] </ref>, and applications that benefit from the intermixing of the two approaches in medicine [16, 19], cell biology [28], and molecular biology [9]. The major drawback of the volumetric approach to computer graphics is the memory and processing power it requires.
Reference: [28] <author> R. Yagel, A. Kaufman and Q. Zhang, </author> <title> Realistic Volume Imaging, </title> <booktitle> In Visualization'91 Proceedings, </booktitle> <address> San Diego, CA, </address> <month> October </month> <year> 1991. </year> <title> 10 Fig. 1.1. Block diagram of the Flipping Cube Architecture. 11 Fig. 1.2. Memory modulation and axes notation. 12 Fig. 1.3. The three data parallelism schemes. 13 Fig. 1.4. The set of flipping operations. 14 Fig. 1.5. (a) 2D Skewed memory organization of the values in (b). </title> <type> 15 </type>
Reference-contexts: The obvious advantages are recently attracting also traditional surface-graphics-based applications such as rendering fractals [12, 21], rendering gaseous phenomena [7], modeling and rendering of growth processes [10], rendering complex objects containing surface tessellation [23, 3], constructive solid geometry and CAD <ref> [28, 5, 27] </ref>, and applications that benefit from the intermixing of the two approaches in medicine [16, 19], cell biology [28], and molecular biology [9]. The major drawback of the volumetric approach to computer graphics is the memory and processing power it requires. <p> such as rendering fractals [12, 21], rendering gaseous phenomena [7], modeling and rendering of growth processes [10], rendering complex objects containing surface tessellation [23, 3], constructive solid geometry and CAD [28, 5, 27], and applications that benefit from the intermixing of the two approaches in medicine [16, 19], cell biology <ref> [28] </ref>, and molecular biology [9]. The major drawback of the volumetric approach to computer graphics is the memory and processing power it requires. Viewing of a moderate size volume requires the solution of the hidden voxel removal problem for millions of voxels.
References-found: 28

