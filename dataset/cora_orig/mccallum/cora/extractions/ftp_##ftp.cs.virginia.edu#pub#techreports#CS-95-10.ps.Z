URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-95-10.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: mark@virginia.edu jwd@virginia.edu  
Author: W. Bailey Jack W. Davidson 
Address: Charlottesville, VA 22903  
Affiliation: Department of Computer Science University of Virginia  
Note: Mark  
Abstract: Technical Report: CS-95-10 - 1 - September 29, 1995 Computing System Descriptions for Systems Software Abstract The proliferation of high-performance microprocessors in recent years has made the development of systems software, such as compilers, assemblers, linkers, debuggers, simulators, and other related tools, more challenging than ever. When a new processor is introduced, each of these applications must be rewritten or retar-geted to the new machine. This paper describes a description system, called CSDL, that permits the specificationin a concise, easily understood notationof all aspects of a computing system that must be known in order to automate the construction of high-quality systems software. Unlike past machine description languages, and as the term computing system indicates, this new description system spans the boundary between hardware and software. CSDL descriptions are modular and extensible, providing a exible system for specifying computing system information that can be shared among many different applications.
Abstract-found: 1
Intro-found: 1
Reference: [BD95a] <author> Mark W. Bailey and Jack W. Davidson. </author> <title> Describing the representation of oating-point values. </title> <type> Technical report 95-43, </type> <institution> Department of Computer Science, University of Virginia, Charlottes-ville, VA, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: Then, special interpretations for selected bit patterns, such as the denormal format (where the exponent is constant) for specifying extremely small numbers, NaN (Not a number), and infinity may be included. More detailed information about this description component may be found in <ref> [BD95a] </ref>. Amongst other purposes, these descriptions may be used for: automatically generating conversion routines for cross compilers, oating-point constant folding for cross compilers, transmission of oating-point values between heterogenous architectures, and automatic generation of I/O routines for high-level language run-time libraries. 3.
Reference: [BD95b] <author> Mark W. Bailey and Jack W. Davidson. </author> <title> Exhaustive testing of procedure calling sequence generation in compilers. </title> <type> Technical report 95-44, </type> <institution> Department of Computer Science, University of Virginia, </institution> <address> Charlottesville, VA, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: The compiler table generator uses information in the CCL description to build tables that are used to automati cally generate sequences of instructions that implement the described calling convention, while the test case generator is used for generating programs that exercise a compilers implementation of the described calling convention <ref> [BD95b] </ref>. Cconv C Procedure Calling Convention CSDL Description Presenter Test Case Generator Compiler Table Generator CCL Front End inst instruction module CSDL Description Presenter Comp. Inst. Front End Compiler Sim. Inst. Front End Debugger Simulator Debug. Inst.
Reference: [BD95c] <author> Mark W. Bailey and Jack W. Davidson. </author> <title> A formal model and specification language for procedure calling conventions. </title> <booktitle> In Proceedings of the 22nd SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 298310, </pages> <month> January </month> <year> 1995. </year> <note> Computing System Descriptions for Systems Software Technical Report: CS-95-10 - 16 - September 29, </note> <year> 1995 </year>
Reference-contexts: Additional information about the latter can be found in <ref> [BD95c] </ref>. 5 Implementation CSDL is a framework for building computing system descriptions for use by systems software. The frame work itself does not mandate the format, or language of the modules that it contains. <p> The convention descriptions are written in a language called CCL <ref> [BD95c] </ref>. First, the CCL description is run through the CSDL description presenter. The presenters job is to provide the view of the CSDL module that the participating application desires.
Reference: [Ben89] <author> Manuel E. Benitez. </author> <title> A global object code optimizer. </title> <type> Master' s thesis, </type> <institution> Department of Computer Science, University of Virginia, </institution> <address> Charlottesville, VA, </address> <month> January </month> <year> 1989. </year>
Reference-contexts: Although machine descriptions and CHDLs may appear to be similar, they differ in two important ways: their purpose and level of abstraction. Traditionally, machine descriptions have been used with systems software <ref> [Fra77, GG78, GH84, Cat78, DF84, Ben89, BHE91, RF95] </ref>, while CHDLs have been used, primarily, for simulation or synthesis of hardware designs [Coe89, Das89]. <p> In our previous version of RTLs, we solved this problem by having different names for registers depending on the type of information they held <ref> [Ben89] </ref>. So, for example, on the R2010, a oating-point register is a logical register than can hold either single or double-precision oat-ing-point values, so f [2] and d [2] might be used to name oating-point register two.
Reference: [BHE91] <author> David G. Bradlee, Robert R. Henry, and Susan J. Eggers. </author> <title> The marion system for retargetable instruction scheduling. </title> <booktitle> In Proceedings of the ACM SIGPLAN ' 91 Conference on Programming Language Design and Implementation, </booktitle> <pages> pages 229240, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Although machine descriptions and CHDLs may appear to be similar, they differ in two important ways: their purpose and level of abstraction. Traditionally, machine descriptions have been used with systems software <ref> [Fra77, GG78, GH84, Cat78, DF84, Ben89, BHE91, RF95] </ref>, while CHDLs have been used, primarily, for simulation or synthesis of hardware designs [Coe89, Das89].
Reference: [Cat78] <author> Roderic G. G. Cattell. </author> <title> Using machine descriptions for automatic derivation of code generators. </title> <booktitle> In Proceedings Third Jerusalem Conference on Information Technology, </booktitle> <pages> pages 503507, </pages> <year> 1978. </year>
Reference-contexts: Although machine descriptions and CHDLs may appear to be similar, they differ in two important ways: their purpose and level of abstraction. Traditionally, machine descriptions have been used with systems software <ref> [Fra77, GG78, GH84, Cat78, DF84, Ben89, BHE91, RF95] </ref>, while CHDLs have been used, primarily, for simulation or synthesis of hardware designs [Coe89, Das89].
Reference: [Coe89] <author> David R. Coelho. </author> <title> The VHDL Handbook. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1989. </year>
Reference-contexts: Traditionally, machine descriptions have been used with systems software [Fra77, GG78, GH84, Cat78, DF84, Ben89, BHE91, RF95], while CHDLs have been used, primarily, for simulation or synthesis of hardware designs <ref> [Coe89, Das89] </ref>. This difference in purpose is reected in the kind of information the description language provides and the way that it is presented. 1.1 Motivation Machines can be described at many levels of detail, as shown in Figure 3. Each level is represented as a cross-section of the machine.
Reference: [Das89] <author> Subrata Dasgupta. </author> <title> Computer Architecture: A Modern Synthesis, </title> <booktitle> Volume 2: Advanced Topics. </booktitle> <publisher> John Wiley and Sons, </publisher> <year> 1989. </year>
Reference-contexts: Traditionally, machine descriptions have been used with systems software [Fra77, GG78, GH84, Cat78, DF84, Ben89, BHE91, RF95], while CHDLs have been used, primarily, for simulation or synthesis of hardware designs <ref> [Coe89, Das89] </ref>. This difference in purpose is reected in the kind of information the description language provides and the way that it is presented. 1.1 Motivation Machines can be described at many levels of detail, as shown in Figure 3. Each level is represented as a cross-section of the machine.
Reference: [DF80] <author> Jack W. Davidson and Christopher W. Fraser. </author> <title> The design and application of a retargetable peephole optimizer. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 2(2):191 202, </volume> <month> April </month> <year> 1980. </year>
Reference-contexts: The core contains the description of the instructions for a target machine. An instruction definition consists of two fields. The first field names the instruction (for reference in other modules), the second field gives the RTL (Register Transfer List) description of the instruction <ref> [DF80] </ref>. Although these two fields are the only required ones, additional information about each instruction may be attached using CSDL aspects. Figure 11 contains an example core instruction description for a subset of the MIPS R2000 instruction set.
Reference: [DF84] <author> Jack W. Davidson and Christopher W. Fraser. </author> <title> Code selection through object code optimization. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 6(4):505526, </volume> <month> October </month> <year> 1984. </year>
Reference-contexts: Although machine descriptions and CHDLs may appear to be similar, they differ in two important ways: their purpose and level of abstraction. Traditionally, machine descriptions have been used with systems software <ref> [Fra77, GG78, GH84, Cat78, DF84, Ben89, BHE91, RF95] </ref>, while CHDLs have been used, primarily, for simulation or synthesis of hardware designs [Coe89, Das89].
Reference: [Fra77] <author> Christopher Warwick Fraser. </author> <title> Automatic Generation of Code Generators. </title> <type> Ph.D. thesis, </type> <institution> Department of Computer Science, Yale University, </institution> <address> New Haven, CT, </address> <year> 1977. </year>
Reference-contexts: Although machine descriptions and CHDLs may appear to be similar, they differ in two important ways: their purpose and level of abstraction. Traditionally, machine descriptions have been used with systems software <ref> [Fra77, GG78, GH84, Cat78, DF84, Ben89, BHE91, RF95] </ref>, while CHDLs have been used, primarily, for simulation or synthesis of hardware designs [Coe89, Das89].
Reference: [GG78] <author> Susan L. Graham and R. Steven Glanville. </author> <title> The use of a machine description for compiler code generation. </title> <booktitle> In Proceedings Third Jerusalem Conference on Information Technology, </booktitle> <pages> pages 509514, </pages> <year> 1978. </year>
Reference-contexts: Although machine descriptions and CHDLs may appear to be similar, they differ in two important ways: their purpose and level of abstraction. Traditionally, machine descriptions have been used with systems software <ref> [Fra77, GG78, GH84, Cat78, DF84, Ben89, BHE91, RF95] </ref>, while CHDLs have been used, primarily, for simulation or synthesis of hardware designs [Coe89, Das89].
Reference: [GH84] <author> Susan L. Graham and Robert R. Henry. </author> <title> Machine descriptions for compiler code generation: Experience since jcit-3. </title> <booktitle> In Proceedings Ninth Jerusalem Conference on Information Technology, </booktitle> <pages> pages 236250, </pages> <year> 1984. </year>
Reference-contexts: Although machine descriptions and CHDLs may appear to be similar, they differ in two important ways: their purpose and level of abstraction. Traditionally, machine descriptions have been used with systems software <ref> [Fra77, GG78, GH84, Cat78, DF84, Ben89, BHE91, RF95] </ref>, while CHDLs have been used, primarily, for simulation or synthesis of hardware designs [Coe89, Das89].
Reference: [IEE85] <author> IEEE. </author> <title> IEEE standard for binary oating-point arithmetic. </title> <journal> SIGPLAN Notices, </journal> <volume> 22(2):925, </volume> <month> Feb-ruary </month> <year> 1985. </year>
Reference-contexts: A radix and radix point are not specified, but rather, implied. Despite this fairly standard method of representing oating-point numbers, numerous formats persist. The oating-point format shown here specifies the IEEE format for single-precision oating-point numbers <ref> [IEE85] </ref>. First the locations and format (sign-magnitude, twos-complement, bias, etc.) of the exponent and significand, and assumed radix are stated.
Reference: [KH92] <author> Gerry Kane and Joe Heinrich. </author> <title> MIPS RISC Architecture. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1992. </year>
Reference-contexts: Kane contains a complete description of the R2010 oating-point coprocessor <ref> [KH92] </ref>.
Reference: [RF95] <author> Norman Ramsey and Mary F. Fernandez. </author> <title> The new jersey machine-code toolkit. </title> <booktitle> In 1995 Usenix Technical Conference, </booktitle> <pages> pages 289301, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: Although machine descriptions and CHDLs may appear to be similar, they differ in two important ways: their purpose and level of abstraction. Traditionally, machine descriptions have been used with systems software <ref> [Fra77, GG78, GH84, Cat78, DF84, Ben89, BHE91, RF95] </ref>, while CHDLs have been used, primarily, for simulation or synthesis of hardware designs [Coe89, Das89].
References-found: 16

