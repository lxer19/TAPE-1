URL: http://www.icsi.berkeley.edu/~yairb/pubs/ABF-extra-space-DP.ps
Refering-URL: http://www.icsi.berkeley.edu/~yairb/
Root-URL: http://www.icsi.berkeley.edu
Email: E-Mail: baruch@theory.lcs.mit.edu.  E-mail: yairb@math.tau.ac.il, fiat@math.tau.ac.il  
Title: Distributed Paging for General Networks  
Author: Baruch Awerbuch Yair Bartal Amos Fiat 
Address: Tel-Aviv 69978, Israel.  
Note: Supported by Air Force Contract TNDGAFOSR-86-0078, ARO contract DAAL03-86-K-0171, NSF contract 9114440-CCR, DARPA contract N00014 J-92-1799, and a special grant from IBM.  Supported by a grant from the Israeli Academy of Sciences.  
Affiliation: Johns Hopkins University and Lab. for Computer Science, MIT.  Department of Computer Science, School of Mathematics, Tel-Aviv University,  
Abstract: Most previous work deals with the file allocation problem [BS89, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94] where infinite nodal memory capacity is assumed. In contrast the distributed paging problem makes the more realistic assumption that nodal memory capacity is limited. Former work on distributed paging deals with the problem only in the case of a uniform network topology. This paper gives the first distributed paging algorithm for general networks. The algorithm is competitive in storage and communication. The competitive ratios are poly-logarithmic in the total number of network nodes and the diameter of the network. 
Abstract-found: 1
Intro-found: 1
Reference: [AADW94] <author> M. Ajtai, J. Aspnes, C. Dwork, and O. Waarts. </author> <title> A Theory of Competitive Analysis for Distributed Algorithms. </title> <booktitle> In Proc. of the 35th Ann. IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 401-411, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: We design competitive distributed algorithms <ref> [BFR92, AADW94] </ref> for the distributed paging problem, i.e. distributed algorithms such that their total communication cost for both data management and control-messages is not much larger than the cost of any adversary. Our goal is giving an algorithm for distributed paging on arbitrary network topologies.
Reference: [ABF93a] <author> Baruch Awerbuch, Yair Bartal, and Amos Fiat. </author> <title> Competitive distributed file allocation. </title> <booktitle> In Proc. 25th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 164-173, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: In theory community, only special restricted versions of the problem have been previously addressed, such as 1 * Uniprocessor paging [ST85, KMRS88, FKL + 88, RS89]: the underlying communication net- works consists of a single link from memory to cache. * File allocation <ref> [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94] </ref>: infinite nodal capacity is assumed. * Uniform network topology [BFR92, ABF93b, AK95]: network with clique topology where distances between any pair of nodes are the same. 2 The Model and the Problem 2.1 Basics Network Model. <p> Moreover the reduction we give uses as a black box a file allocation algorithm <ref> [ABF93a] </ref>. Considerations, arising from memory constraints may conflict with file allocation strategies, this motivates the following problem: 5.1 File Allocation on Dynamic Networks We consider the file allocation problem in a network where processors become active and inactive over time. <p> Since s (i) c (i) then 0. We conclude that DEL 2 O (minflog n; log (ffi)g) INS: 19 5.4 The Solution for File Allocation on Dynamic Networks The file allocation algorithm on dynamic networks, DynDFA, is a modification of the distributed file allocation algorithm, DFA, of <ref> [ABF93a] </ref>, designed to deal with inclusions and exclusions of active processors.
Reference: [ABF93b] <author> Baruch Awerbuch, Yair Bartal, and Amos Fiat. </author> <title> Heat & Dump: Randomized competitive distributed paging. </title> <booktitle> In Proc. 34rd IEEE Symp. on Foundations of Computer Science. IEEE, </booktitle> <month> November </month> <year> 1993. </year> <note> to appear. </note>
Reference-contexts: been previously addressed, such as 1 * Uniprocessor paging [ST85, KMRS88, FKL + 88, RS89]: the underlying communication net- works consists of a single link from memory to cache. * File allocation [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94]: infinite nodal capacity is assumed. * Uniform network topology <ref> [BFR92, ABF93b, AK95] </ref>: network with clique topology where distances between any pair of nodes are the same. 2 The Model and the Problem 2.1 Basics Network Model. <p> This can also be viewed as a solution for the problem where the cache size may vary (cf. [Young91]), but the algorithm should pay for enlarging its cache size. This slackness alleviates one of complications in <ref> [ABF93b] </ref>, namely what to do with the last copy of the data being erased.
Reference: [ACJ + 91] <author> Agarwal, Chaiken, Johnson, Kranz, Kubiatowicz, Kurihara, Lim, Maa, and Nuss-baum. </author> <title> The mit-alewife machine: A large-scale distributed memory multiprocessor. Mit/lcs/tm 454, </title> <publisher> MIT, </publisher> <year> 1991. </year> <month> 32 </month>
Reference-contexts: The contribution of this paper is designing first competitive centralized and distributed solution for general networks, with poly-logarithmic overheads in space and communication. Existing work. Certainly, locality-exploiting data management has been actively discussed in the context of parallel architectures <ref> [ACJ + 91, D + 89, John92] </ref> and compilers [LW91, LW92, Coop92], as well in more general context of data organization, say, in a distributed object store [Lisk92, RD90, Stam84, LMW91, PZ91], distributed databases and services in computer networks.
Reference: [AK94] <author> S. Albers and H. Koga. </author> <title> New On-line Algorithms for the Page Replication Problem. </title> <booktitle> In Proceedings of the 4th Scandinavian Workshop on Algorithmic Theory, </booktitle> <address> Aarhus, Denmark, </address> <month> July </month> <year> 1994. </year>
Reference-contexts: In theory community, only special restricted versions of the problem have been previously addressed, such as 1 * Uniprocessor paging [ST85, KMRS88, FKL + 88, RS89]: the underlying communication net- works consists of a single link from memory to cache. * File allocation <ref> [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94] </ref>: infinite nodal capacity is assumed. * Uniform network topology [BFR92, ABF93b, AK95]: network with clique topology where distances between any pair of nodes are the same. 2 The Model and the Problem 2.1 Basics Network Model.
Reference: [AK95] <author> S. Albers and H. Koga. </author> <title> Page Migration with Limited Local Memory Capacity. </title> <booktitle> To appear in Proc. of the 4th Workshop on Algorithms and Data Structures, </booktitle> , <month> August </month> <year> 1995. </year>
Reference-contexts: been previously addressed, such as 1 * Uniprocessor paging [ST85, KMRS88, FKL + 88, RS89]: the underlying communication net- works consists of a single link from memory to cache. * File allocation [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94]: infinite nodal capacity is assumed. * Uniform network topology <ref> [BFR92, ABF93b, AK95] </ref>: network with clique topology where distances between any pair of nodes are the same. 2 The Model and the Problem 2.1 Basics Network Model.
Reference: [AP89] <author> Baruch Awerbuch and David Peleg. </author> <title> On-line tracking of mobile users. </title> <type> Technical Memo TM-410, </type> <institution> MIT, Lab. for Computer Science, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: First we need to define the hierarchical graph decomposition and the distributed data structures used by algorithm HP. 4.1 Distributed Data Structures: Data Tracking The data tracking mechanism of [BFR92] is a generalization of the mobile user tracking mechanism of <ref> [AP89, AP91] </ref>. In a network over a set P of n processors, the data tracking problem allows to maintain a subset Q of processors holding copies of the file with the following operations on Q: Insert (u,v), initiated at u 2 Q, inserts v to the set Q.
Reference: [AP90] <author> Baruch Awerbuch and David Peleg. </author> <title> Sparse partitions. </title> <booktitle> In Proc. 31st IEEE Symp. on Foundations of Computer Science, </booktitle> <pages> pages 503-513, </pages> <year> 1990. </year>
Reference-contexts: Specifically, the algorithm and it proof are constructed in stages as follows: 4 * In Section 4 we give the read-only distributed paging algorithm Hierarchical Paging. The major idea is to use uni-processor paging on "areas of activity". These areas are defined using the sparse partitions of <ref> [AP90] </ref>. After sufficiently many accesses to a file have been issued by processors within such an "area of activity", a copy of the file is fetched into this area. <p> The algorithm uses the hierarchical graph decomposition of <ref> [AP90] </ref>, and runs in every cluster of the decomposition a simulation of some uniprocessor paging algorithm, U. For simplicity of description we assume that algorithm U is defined for any cache size, and that the same algorithm is used for all clusters, although these assumptions are not important. <p> The memory needed for the algorithm is at most O (log 2 (ffi)) per processor. If no memory considerations are made then the approximation factor can be reduced to ff = O (1). 4.2 Hierarchical Graph Decompositions The hierarchical network decomposition <ref> [AP90] </ref> defines the notion of clusters, partitions, and a hierarchy of partitions. All these definitions are a function of some parameter k. (Usually k = log n.) A cluster C is a set of vertices. A partition is a set of (possibly overlapping) clusters.
Reference: [AP91] <author> Baruch Awerbuch and David Peleg. </author> <title> Concurrent online tracking of mobile users. </title> <booktitle> In Proceedings of the Annual ACM SIGCOMM Symposium on Communication Architectures and Protocols, </booktitle> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1991. </year>
Reference-contexts: First we need to define the hierarchical graph decomposition and the distributed data structures used by algorithm HP. 4.1 Distributed Data Structures: Data Tracking The data tracking mechanism of [BFR92] is a generalization of the mobile user tracking mechanism of <ref> [AP89, AP91] </ref>. In a network over a set P of n processors, the data tracking problem allows to maintain a subset Q of processors holding copies of the file with the following operations on Q: Insert (u,v), initiated at u 2 Q, inserts v to the set Q.
Reference: [BFR92] <author> Yair Bartal, Amos Fiat, and Yuval Rabani. </author> <title> Competitive algorithms for distributed data management. </title> <booktitle> In Proc. 24th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 39-50, </pages> <year> 1992. </year>
Reference-contexts: In theory community, only special restricted versions of the problem have been previously addressed, such as 1 * Uniprocessor paging [ST85, KMRS88, FKL + 88, RS89]: the underlying communication net- works consists of a single link from memory to cache. * File allocation <ref> [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94] </ref>: infinite nodal capacity is assumed. * Uniform network topology [BFR92, ABF93b, AK95]: network with clique topology where distances between any pair of nodes are the same. 2 The Model and the Problem 2.1 Basics Network Model. <p> been previously addressed, such as 1 * Uniprocessor paging [ST85, KMRS88, FKL + 88, RS89]: the underlying communication net- works consists of a single link from memory to cache. * File allocation [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94]: infinite nodal capacity is assumed. * Uniform network topology <ref> [BFR92, ABF93b, AK95] </ref>: network with clique topology where distances between any pair of nodes are the same. 2 The Model and the Problem 2.1 Basics Network Model. <p> We design competitive distributed algorithms <ref> [BFR92, AADW94] </ref> for the distributed paging problem, i.e. distributed algorithms such that their total communication cost for both data management and control-messages is not much larger than the cost of any adversary. Our goal is giving an algorithm for distributed paging on arbitrary network topologies. <p> Our goal is giving an algorithm for distributed paging on arbitrary network topologies. However, similarly to the case of the k-server problem [MMS88] (which can be reduced to distributed paging), the best competitive ratio possible for deterministic algorithms is (m) <ref> [BFR92] </ref> (where m is the total size of the aggregate virtual memory). This leads us to using a somewhat different model by defining a weaker but reasonable adversary, for which we can present a distributed paging algorithm with poly-logarithmic competitive ratio. <p> The general case follows from the discussion in the previous section. First we need to define the hierarchical graph decomposition and the distributed data structures used by algorithm HP. 4.1 Distributed Data Structures: Data Tracking The data tracking mechanism of <ref> [BFR92] </ref> is a generalization of the mobile user tracking mechanism of [AP89, AP91]. <p> The optimal cost of Delete (v) is 0. The optimal cost of Find (u) is the cost of sending a message from u to the closest processor in Q; i.e., d (Q; u) <ref> [BFR92] </ref> present a distributed on-line data tracking algorithm, named TRACK, dealing with arbitrary sequences of Insert, Delete and Find operations, such that the following theorem holds. Theorem 4.1 For every n-processor network, for every sequence of operations , 7 1. <p> For any sequence of insertions and deletions, let INS denote the total insertions cost and let DEL denote the total deletions cost. Then DEL O (minflog n; log (ffi)g) INS: To prove theorem 5.5 we use make use of another basic combinatorial problem defined in <ref> [BFR92] </ref> called the cover problem. The Cover Problem. The k-cover problem is that of maintaining a partition of a set of vertices Q of a graph G, into s disjoint non empty covering subsets of Q such that the diameter of each subset at most k. <p> Let the number of of covering sets maintained by the i-level cover algorithm be denoted s (i). Let INS denote the total optimal cost over a sequence of insertions and deletions. The following theorem is due to <ref> [BFR92] </ref>: Theorem 5.6 The following holds for the hierarchical cover algorithm log (ffi) X 2 i (s (i) 1) i=0 2 i (c (i) 1) O (minflog n; log (ffi)g) INS: Proof of Theorem 5.5.
Reference: [BLS87] <author> A. Borodin, N. Linial, and M. Saks. </author> <title> An Optimal On-Line Algorithm for Metrical Task Systems. </title> <booktitle> In Proc. of the 19th Ann. ACM Symp on Theory of Computing, </booktitle> <pages> pages 373-382, </pages> <month> May </month> <year> 1987. </year>
Reference: [BS89] <author> D.L. Black and D.D. Sleator. </author> <title> Competitive Algorithms for Replication and Migration Problems. </title> <type> Technical Report CMU-CS-89-201, </type> <institution> Department of Computer Science, Carnegie-Mellon University, </institution> <year> 1989. </year>
Reference-contexts: In theory community, only special restricted versions of the problem have been previously addressed, such as 1 * Uniprocessor paging [ST85, KMRS88, FKL + 88, RS89]: the underlying communication net- works consists of a single link from memory to cache. * File allocation <ref> [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94] </ref>: infinite nodal capacity is assumed. * Uniform network topology [BFR92, ABF93b, AK95]: network with clique topology where distances between any pair of nodes are the same. 2 The Model and the Problem 2.1 Basics Network Model.
Reference: [Coop92] <author> Keith D. Cooper. </author> <title> Using compiler technology to drive advanced microprocessors. </title> <booktitle> In DARPA Software Technology Conference, </booktitle> <pages> pages 42-49, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: The contribution of this paper is designing first competitive centralized and distributed solution for general networks, with poly-logarithmic overheads in space and communication. Existing work. Certainly, locality-exploiting data management has been actively discussed in the context of parallel architectures [ACJ + 91, D + 89, John92] and compilers <ref> [LW91, LW92, Coop92] </ref>, as well in more general context of data organization, say, in a distributed object store [Lisk92, RD90, Stam84, LMW91, PZ91], distributed databases and services in computer networks. The amount of work on the subject in the systems community is overwhelming.
Reference: [CLRW93] <author> M. Chrobak, L. Larmore, N. Reingold, and J. Westbrook. </author> <title> Optimal Multiprocessor Migration Algorithms Using Work Functions. </title> <booktitle> In Proc. of the 4th International Symp. on Algorithms and Computation. Also Lecture Notes in Computer Science, </booktitle> <volume> vol. 762, </volume> <pages> pages 406-415, </pages> <address> Hong Kong, 1993, </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In theory community, only special restricted versions of the problem have been previously addressed, such as 1 * Uniprocessor paging [ST85, KMRS88, FKL + 88, RS89]: the underlying communication net- works consists of a single link from memory to cache. * File allocation <ref> [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94] </ref>: infinite nodal capacity is assumed. * Uniform network topology [BFR92, ABF93b, AK95]: network with clique topology where distances between any pair of nodes are the same. 2 The Model and the Problem 2.1 Basics Network Model.
Reference: [D + 89] <author> William J. Dally et al. </author> <title> The J-Machine: A fine-grain concurrent computer. </title> <editor> In G.X. Ritter, editor, </editor> <booktitle> Proceedings of the IFIP Congress, </booktitle> <pages> pages 1147-1153. </pages> <publisher> North-Holland, </publisher> <month> August </month> <year> 1989. </year> <month> 33 </month>
Reference-contexts: The contribution of this paper is designing first competitive centralized and distributed solution for general networks, with poly-logarithmic overheads in space and communication. Existing work. Certainly, locality-exploiting data management has been actively discussed in the context of parallel architectures <ref> [ACJ + 91, D + 89, John92] </ref> and compilers [LW91, LW92, Coop92], as well in more general context of data organization, say, in a distributed object store [Lisk92, RD90, Stam84, LMW91, PZ91], distributed databases and services in computer networks.
Reference: [DF82] <author> D. Dowdy and D. Foster. </author> <title> Comparative models of the file assignment problem. </title> <journal> Com--puting Surveys, </journal> <volume> 14(2), </volume> <month> Jun </month> <year> 1982. </year>
Reference-contexts: The amount of work on the subject in the systems community is overwhelming. For example, the 1981 survey paper by Dowdy and Foster <ref> [DF82] </ref>, and 1990 survey paper by Gavish and Sheng [GS90] dealing with the file allocation problem, cite close to a hundred references.
Reference: [FKL + 88] <author> A. Fiat, R.M. Karp, M. Luby, L.A. McGeoch, D.d. Sleator , and N.E. Young. </author> <title> Competitive Paging Algorithms. </title> <type> Technical Report, </type> <institution> Carnegie Mellon University, </institution> <year> 1988. </year>
Reference-contexts: In theory community, only special restricted versions of the problem have been previously addressed, such as 1 * Uniprocessor paging <ref> [ST85, KMRS88, FKL + 88, RS89] </ref>: the underlying communication net- works consists of a single link from memory to cache. * File allocation [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94]: infinite nodal capacity is assumed. * Uniform network topology [BFR92, ABF93b, AK95]: network with clique topology where distances between
Reference: [GS90] <author> B. Gavish and O.R.L. Sheng. </author> <title> Dynamic File Migration in Distributed Computer Systems. </title> <journal> In Communications of the ACM, </journal> <volume> 33(2) </volume> <pages> 177-189, </pages> <year> 1990. </year>
Reference-contexts: The amount of work on the subject in the systems community is overwhelming. For example, the 1981 survey paper by Dowdy and Foster [DF82], and 1990 survey paper by Gavish and Sheng <ref> [GS90] </ref> dealing with the file allocation problem, cite close to a hundred references.
Reference: [John92] <author> Kirk Johnson. </author> <title> The impact of communication locality on large-scale multiprocessor performance. </title> <booktitle> In 19th International Symposium on Computer Architecture. IEEE, </booktitle> <month> May </month> <year> 1992. </year> <note> To appear. </note>
Reference-contexts: The contribution of this paper is designing first competitive centralized and distributed solution for general networks, with poly-logarithmic overheads in space and communication. Existing work. Certainly, locality-exploiting data management has been actively discussed in the context of parallel architectures <ref> [ACJ + 91, D + 89, John92] </ref> and compilers [LW91, LW92, Coop92], as well in more general context of data organization, say, in a distributed object store [Lisk92, RD90, Stam84, LMW91, PZ91], distributed databases and services in computer networks.
Reference: [Koga93] <author> H. Koga. </author> <title> Randomized On-line Algorithms for the Page Replication Problem. </title> <booktitle> In Proc. of the 4th International Symp. on Algorithms and Computation. Also Lecture Notes in Computer Science, </booktitle> <volume> vol. 762, </volume> <pages> pages 436-445, </pages> <address> Hong Kong, 1993, </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In theory community, only special restricted versions of the problem have been previously addressed, such as 1 * Uniprocessor paging [ST85, KMRS88, FKL + 88, RS89]: the underlying communication net- works consists of a single link from memory to cache. * File allocation <ref> [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94] </ref>: infinite nodal capacity is assumed. * Uniform network topology [BFR92, ABF93b, AK95]: network with clique topology where distances between any pair of nodes are the same. 2 The Model and the Problem 2.1 Basics Network Model.
Reference: [KMRS88] <author> Anna Karlin, Mark Manasse, Larry Rudolpoh, and Daniel Sleator. </author> <title> Competitive snoopy caching. </title> <journal> Algorithmica, </journal> <volume> 3(1) </volume> <pages> 79-119, </pages> <year> 1988. </year>
Reference-contexts: In theory community, only special restricted versions of the problem have been previously addressed, such as 1 * Uniprocessor paging <ref> [ST85, KMRS88, FKL + 88, RS89] </ref>: the underlying communication net- works consists of a single link from memory to cache. * File allocation [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94]: infinite nodal capacity is assumed. * Uniform network topology [BFR92, ABF93b, AK95]: network with clique topology where distances between <p> from p, at a zero cost, and Replicate F into p, at the cost of transmitting a file copy between the closest replica of F and p, D d (Q F ; p). 2.2 Complexity Measures and Competitive Framework We will use, as a measure of performance, the "competitive ratio" <ref> [ST85, KMRS88] </ref> which is defined as the ratio between the costs associated with a on-line algorithm versus the costs expended by an optimal dynamic policy (referred to as "adversary"), who has perfect knowledge of the future, to deal with same sequence of events. <p> A similar situation occurs for the uniprocessor paging problem where the cache size, k, is a lower bound on the competitiveness of any deterministic paging algorithm. The model we adopt here is the one suggested in <ref> [ST85, KMRS88, MMS88, RS89, Young91] </ref> for uniprocessor paging, where the adversary has a smaller cache size than the on-line algorithm. This can also be viewed as a solution for the problem where the cache size may vary (cf. [Young91]), but the algorithm should pay for enlarging its cache size. <p> Let c and s be constants at least 1. If for any adversary, Adv such that for all p, k p s h p , the algorithm is c-competitive against Adv, then we say the algorithm is (c; s)-competitive. In this terminology, the following theorem was proved in <ref> [ST85, KMRS88, RS89] </ref>: Theorem 2.1 There exist deterministic (2,2)-competitive uniprocessor paging algorithms. Thus, in the uniprocessor case the assumption of some small advantage in memory for the on-line algorithm reduces the competitive ratio dramatically.
Reference: [Lisk92] <author> Barbara Liskov. </author> <title> Preliminary design of the thor object-oriented database system. </title> <booktitle> In DARPA Software Technology Conference, </booktitle> <pages> pages 50-62, </pages> <month> april </month> <year> 1992. </year>
Reference-contexts: Existing work. Certainly, locality-exploiting data management has been actively discussed in the context of parallel architectures [ACJ + 91, D + 89, John92] and compilers [LW91, LW92, Coop92], as well in more general context of data organization, say, in a distributed object store <ref> [Lisk92, RD90, Stam84, LMW91, PZ91] </ref>, distributed databases and services in computer networks. The amount of work on the subject in the systems community is overwhelming.
Reference: [LLG + 90] <author> L. Lenoski, J. Laundo, K. Gharachorloo, A. Gupta, and J.Hennessy. </author> <title> The directory-based cache coherence protocol for the dash multiprocessor. </title> <booktitle> In Proc. of 17th Intern. Symp. on Computer Architecture, </booktitle> <pages> pages 148-159, </pages> <year> 1990. </year>
Reference: [LMW91] <author> Michael Lam, and Thomas G.Moher, Paul Wilson. </author> <title> Effective "static-graph" reorganization to improve locality in garbage-collected systems. </title> <booktitle> In Proceedings of ACM SIGPLAN, jun 1991. Conference on Programming Language Design and Implementation. </booktitle>
Reference-contexts: Existing work. Certainly, locality-exploiting data management has been actively discussed in the context of parallel architectures [ACJ + 91, D + 89, John92] and compilers [LW91, LW92, Coop92], as well in more general context of data organization, say, in a distributed object store <ref> [Lisk92, RD90, Stam84, LMW91, PZ91] </ref>, distributed databases and services in computer networks. The amount of work on the subject in the systems community is overwhelming.
Reference: [LRWY94] <author> C. Lund, N. Reingold, J. Westbrook, and D. Yan. </author> <title> On-Line Distributed Data Management. </title> <booktitle> In Proc. of European Symp. on Algorithms, </booktitle> <year> 1994. </year>
Reference-contexts: In theory community, only special restricted versions of the problem have been previously addressed, such as 1 * Uniprocessor paging [ST85, KMRS88, FKL + 88, RS89]: the underlying communication net- works consists of a single link from memory to cache. * File allocation <ref> [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94] </ref>: infinite nodal capacity is assumed. * Uniform network topology [BFR92, ABF93b, AK95]: network with clique topology where distances between any pair of nodes are the same. 2 The Model and the Problem 2.1 Basics Network Model.
Reference: [LW91] <author> Monica S. Lam and Michael E. Wolf. </author> <title> Loop transformation theory and algorithm to maximize parallelism. </title> <journal> In IEEE Transactions on Parallel and Distributed Systems, </journal> <year> 1991. </year>
Reference-contexts: The contribution of this paper is designing first competitive centralized and distributed solution for general networks, with poly-logarithmic overheads in space and communication. Existing work. Certainly, locality-exploiting data management has been actively discussed in the context of parallel architectures [ACJ + 91, D + 89, John92] and compilers <ref> [LW91, LW92, Coop92] </ref>, as well in more general context of data organization, say, in a distributed object store [Lisk92, RD90, Stam84, LMW91, PZ91], distributed databases and services in computer networks. The amount of work on the subject in the systems community is overwhelming.
Reference: [LW92] <author> Monica S. Lam and Michael E. Wolf. </author> <title> Compilation techniques to achieve parallelism and locality. </title> <booktitle> In DARPA Software Technology Conference, </booktitle> <pages> pages 150-158, </pages> <address> Los Angeles, CA, </address> <month> april </month> <year> 1992. </year> <month> 34 </month>
Reference-contexts: The contribution of this paper is designing first competitive centralized and distributed solution for general networks, with poly-logarithmic overheads in space and communication. Existing work. Certainly, locality-exploiting data management has been actively discussed in the context of parallel architectures [ACJ + 91, D + 89, John92] and compilers <ref> [LW91, LW92, Coop92] </ref>, as well in more general context of data organization, say, in a distributed object store [Lisk92, RD90, Stam84, LMW91, PZ91], distributed databases and services in computer networks. The amount of work on the subject in the systems community is overwhelming.
Reference: [ML88] <author> H.L. Morgan and K.D. Levin. </author> <title> Optimal program and data locations in computer net-works. </title> <journal> CACM, </journal> <volume> 20(5) </volume> <pages> 124-130, </pages> <year> 1988. </year>
Reference: [MMS88] <author> M.S. Manasse, L.A. McGeoch, and D.D. Sleator. </author> <title> Competitive Algorithms for On-Line Problems. </title> <booktitle> In Proc. of the 20th Ann. ACM Symp. on Theory of Computing, </booktitle> <pages> pages 322-333, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Our goal is giving an algorithm for distributed paging on arbitrary network topologies. However, similarly to the case of the k-server problem <ref> [MMS88] </ref> (which can be reduced to distributed paging), the best competitive ratio possible for deterministic algorithms is (m) [BFR92] (where m is the total size of the aggregate virtual memory). <p> A similar situation occurs for the uniprocessor paging problem where the cache size, k, is a lower bound on the competitiveness of any deterministic paging algorithm. The model we adopt here is the one suggested in <ref> [ST85, KMRS88, MMS88, RS89, Young91] </ref> for uniprocessor paging, where the adversary has a smaller cache size than the on-line algorithm. This can also be viewed as a solution for the problem where the cache size may vary (cf. [Young91]), but the algorithm should pay for enlarging its cache size.
Reference: [PZ91] <author> Mark Palmer and Stanley B. Zdonik. </author> <title> Fido:a cache that learns to fetch. </title> <booktitle> In Proceedings of 17th InternationalConference on Very Large Data Bases,Barcelona, </booktitle> <pages> pages 255-264, </pages> <month> sept </month> <year> 1991. </year>
Reference-contexts: Existing work. Certainly, locality-exploiting data management has been actively discussed in the context of parallel architectures [ACJ + 91, D + 89, John92] and compilers [LW91, LW92, Coop92], as well in more general context of data organization, say, in a distributed object store <ref> [Lisk92, RD90, Stam84, LMW91, PZ91] </ref>, distributed databases and services in computer networks. The amount of work on the subject in the systems community is overwhelming.
Reference: [RD90] <author> John T. Robinson and Murthy V. Devarankonda. </author> <title> Data cache management using frequency-based replacement. </title> <booktitle> In SIGMETRICS, </booktitle> <address> Boulder, </address> <publisher> CO, </publisher> <pages> pages 134-142, </pages> <month> may </month> <year> 1990. </year> <note> Published as Performance Evaluation Review 18. </note>
Reference-contexts: Existing work. Certainly, locality-exploiting data management has been actively discussed in the context of parallel architectures [ACJ + 91, D + 89, John92] and compilers [LW91, LW92, Coop92], as well in more general context of data organization, say, in a distributed object store <ref> [Lisk92, RD90, Stam84, LMW91, PZ91] </ref>, distributed databases and services in computer networks. The amount of work on the subject in the systems community is overwhelming.
Reference: [RS89] <author> P. Raghavan and M. Snir. </author> <title> Memory versus Randomization in On-Line Algorithms. </title> <booktitle> In 16th International Colloquium on Automata, Languages, and Programming, volume 372 of Lecture Notes in Computer Science, </booktitle> <pages> pages 687-703. </pages> <publisher> Springer-Verlag, </publisher> <month> July </month> <year> 1989. </year>
Reference-contexts: In theory community, only special restricted versions of the problem have been previously addressed, such as 1 * Uniprocessor paging <ref> [ST85, KMRS88, FKL + 88, RS89] </ref>: the underlying communication net- works consists of a single link from memory to cache. * File allocation [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94]: infinite nodal capacity is assumed. * Uniform network topology [BFR92, ABF93b, AK95]: network with clique topology where distances between <p> A similar situation occurs for the uniprocessor paging problem where the cache size, k, is a lower bound on the competitiveness of any deterministic paging algorithm. The model we adopt here is the one suggested in <ref> [ST85, KMRS88, MMS88, RS89, Young91] </ref> for uniprocessor paging, where the adversary has a smaller cache size than the on-line algorithm. This can also be viewed as a solution for the problem where the cache size may vary (cf. [Young91]), but the algorithm should pay for enlarging its cache size. <p> Let c and s be constants at least 1. If for any adversary, Adv such that for all p, k p s h p , the algorithm is c-competitive against Adv, then we say the algorithm is (c; s)-competitive. In this terminology, the following theorem was proved in <ref> [ST85, KMRS88, RS89] </ref>: Theorem 2.1 There exist deterministic (2,2)-competitive uniprocessor paging algorithms. Thus, in the uniprocessor case the assumption of some small advantage in memory for the on-line algorithm reduces the competitive ratio dramatically.
Reference: [ST85] <author> D.D. Sleator and R.E. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Comm. of the ACM, </journal> <volume> 28(2) </volume> <pages> 202-208, </pages> <year> 1985. </year>
Reference-contexts: In theory community, only special restricted versions of the problem have been previously addressed, such as 1 * Uniprocessor paging <ref> [ST85, KMRS88, FKL + 88, RS89] </ref>: the underlying communication net- works consists of a single link from memory to cache. * File allocation [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94]: infinite nodal capacity is assumed. * Uniform network topology [BFR92, ABF93b, AK95]: network with clique topology where distances between <p> from p, at a zero cost, and Replicate F into p, at the cost of transmitting a file copy between the closest replica of F and p, D d (Q F ; p). 2.2 Complexity Measures and Competitive Framework We will use, as a measure of performance, the "competitive ratio" <ref> [ST85, KMRS88] </ref> which is defined as the ratio between the costs associated with a on-line algorithm versus the costs expended by an optimal dynamic policy (referred to as "adversary"), who has perfect knowledge of the future, to deal with same sequence of events. <p> A similar situation occurs for the uniprocessor paging problem where the cache size, k, is a lower bound on the competitiveness of any deterministic paging algorithm. The model we adopt here is the one suggested in <ref> [ST85, KMRS88, MMS88, RS89, Young91] </ref> for uniprocessor paging, where the adversary has a smaller cache size than the on-line algorithm. This can also be viewed as a solution for the problem where the cache size may vary (cf. [Young91]), but the algorithm should pay for enlarging its cache size. <p> Let c and s be constants at least 1. If for any adversary, Adv such that for all p, k p s h p , the algorithm is c-competitive against Adv, then we say the algorithm is (c; s)-competitive. In this terminology, the following theorem was proved in <ref> [ST85, KMRS88, RS89] </ref>: Theorem 2.1 There exist deterministic (2,2)-competitive uniprocessor paging algorithms. Thus, in the uniprocessor case the assumption of some small advantage in memory for the on-line algorithm reduces the competitive ratio dramatically.
Reference: [Stam84] <author> John W. Stamos. </author> <title> Static grouping of small objects to enhance performance of a paged virtual memory. </title> <journal> In ACM Transactions on Computer Systems, </journal> <volume> volume 2, number 2, </volume> <pages> pages 155-180, </pages> <month> May </month> <year> 1984. </year>
Reference-contexts: Existing work. Certainly, locality-exploiting data management has been actively discussed in the context of parallel architectures [ACJ + 91, D + 89, John92] and compilers [LW91, LW92, Coop92], as well in more general context of data organization, say, in a distributed object store <ref> [Lisk92, RD90, Stam84, LMW91, PZ91] </ref>, distributed databases and services in computer networks. The amount of work on the subject in the systems community is overwhelming.
Reference: [KELS62] <author> T.Kilburn, D.Edwards, M.Lanigan, and F.Summer. </author> <title> One-level storage system. </title> <journal> IRE Transactions on Electronic Computers, </journal> <volume> 2 </volume> <pages> 223-235, </pages> <year> 1962. </year>
Reference: [West91] <author> J. Westbrook. </author> <title> Randomized Algorithms for Multiprocessor Pa ge Migration. </title> <booktitle> In Proc. of DIMACS Workshop on On-Line Algorithms. </booktitle> <publisher> American Mathematical Society, </publisher> <address> Febru-ary, </address> <year> 1991. </year>
Reference-contexts: In theory community, only special restricted versions of the problem have been previously addressed, such as 1 * Uniprocessor paging [ST85, KMRS88, FKL + 88, RS89]: the underlying communication net- works consists of a single link from memory to cache. * File allocation <ref> [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94] </ref>: infinite nodal capacity is assumed. * Uniform network topology [BFR92, ABF93b, AK95]: network with clique topology where distances between any pair of nodes are the same. 2 The Model and the Problem 2.1 Basics Network Model.
Reference: [WY93] <author> J. Westbrook. and D.K. Yan. </author> <title> Greedy On-Line Steiner Tree and Generalized Steiner Problems. </title> <booktitle> In Proc. of the 3rd Workshop in Algorithms and Data Structures, Also Lecture Notes in Computer Science, </booktitle> <volume> vol. 709, </volume> <pages> pages 622-633, </pages> <address> Montreal, Canada, 1993, </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: In theory community, only special restricted versions of the problem have been previously addressed, such as 1 * Uniprocessor paging [ST85, KMRS88, FKL + 88, RS89]: the underlying communication net- works consists of a single link from memory to cache. * File allocation <ref> [BS89, BFR92, West91, CLRW93, ABF93a, WY93, Koga93, AK94, LRWY94] </ref>: infinite nodal capacity is assumed. * Uniform network topology [BFR92, ABF93b, AK95]: network with clique topology where distances between any pair of nodes are the same. 2 The Model and the Problem 2.1 Basics Network Model.
Reference: [Young91] <author> N.E. Young. </author> <title> Competitive Paging as Cache Size Varies. </title> <booktitle> In Proc. 2nd ACM-SIAM Symp. on Discrete Algorithms, </booktitle> <month> January </month> <year> 1991. </year> <month> 35 </month>
Reference-contexts: A similar situation occurs for the uniprocessor paging problem where the cache size, k, is a lower bound on the competitiveness of any deterministic paging algorithm. The model we adopt here is the one suggested in <ref> [ST85, KMRS88, MMS88, RS89, Young91] </ref> for uniprocessor paging, where the adversary has a smaller cache size than the on-line algorithm. This can also be viewed as a solution for the problem where the cache size may vary (cf. [Young91]), but the algorithm should pay for enlarging its cache size. <p> The model we adopt here is the one suggested in [ST85, KMRS88, MMS88, RS89, Young91] for uniprocessor paging, where the adversary has a smaller cache size than the on-line algorithm. This can also be viewed as a solution for the problem where the cache size may vary (cf. <ref> [Young91] </ref>), but the algorithm should pay for enlarging its cache size. This slackness alleviates one of complications in [ABF93b], namely what to do with the last copy of the data being erased.

References-found: 38

