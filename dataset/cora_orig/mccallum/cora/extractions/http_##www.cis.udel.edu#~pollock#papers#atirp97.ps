URL: http://www.cis.udel.edu/~pollock/papers/atirp97.ps
Refering-URL: http://www.cis.udel.edu/~jochen/passages/pubs.htm
Root-URL: http://www.cis.udel.edu
Title: IDENTIFYING REDUNDANT TEST CASES FOR TESTING PARALLEL LANGUAGE CONSTRUCTS  
Author: Cheer-Sun Yang Lori L. Pollock 
Keyword: software testing, parallelized protocol implementations, multithreaded programs, software tool  
Address: 19716  
Affiliation: Department of Computer and Information Sciences University of Delaware Newark, DE  
Abstract: Based on the successes of others in utilizing parallelism to enhance the performance of communication protocol implementations, we have been investigating various approaches to exploiting parallelism to improve the performance of implementations of the MIL-STD 188-220A protocol standard. Simultaneously, we have been investigating ways of providing automatic testing of the parallel aspects of the parallelized protocol implementations. This paper describes some of our research efforts towards building a software tool for automatic, program-based testing of the resulting multithreaded software. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. V. Aho, Ravi Sethi, and J. D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison Wesley, </publisher> <year> 1986. </year>
Reference-contexts: By formulating the computation in terms of a data flow analysis framework, the sets can be computed by executing the iterative data flow analysis algorithm <ref> [1] </ref>.
Reference: [2] <author> Torsten Braun and Martina Zitterbart. </author> <title> Parallel transport system design. In High Performance Networking, </title> <booktitle> IV, </booktitle> <pages> pages 397-412. </pages> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1993. </year>
Reference-contexts: Army Research Laboratory under Cooperative Agreement DAAL01-96-2-0002. There has been some research and experimentation in the parallelization of various protocols <ref> [3, 6, 8, 2, 5] </ref>, with encouraging success. We are currently investigating the application of parallelization techniques to the data link and intranet layers of MIL-STD 188-220A, the proposed standard for interoperability over Combat Net Radio.
Reference: [3] <author> Toong Shoon Chan and Ian Gorton. </author> <title> A parallel approach to high-speed protocol processing. </title> <type> Technical report, </type> <institution> University of New South Wales, </institution> <month> March </month> <year> 1994. </year>
Reference-contexts: Army Research Laboratory under Cooperative Agreement DAAL01-96-2-0002. There has been some research and experimentation in the parallelization of various protocols <ref> [3, 6, 8, 2, 5] </ref>, with encouraging success. We are currently investigating the application of parallelization techniques to the data link and intranet layers of MIL-STD 188-220A, the proposed standard for interoperability over Combat Net Radio.
Reference: [4] <author> Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. </author> <title> Introduction to algorithms. </title> <publisher> Mc-Graw-Hill Book Company, </publisher> <year> 1990. </year>
Reference-contexts: GENERATING TEST SUITES For the purpose of developing an automated testing tool, we propose to use a binomial heap to represent combinations of delay points. By definition, a binomial heap is a collection of binomial trees <ref> [4] </ref>. The main reason for choosing a binomial heap to represent the timing-related test case suite is the desirable property that there are exactly D (n,i) nodes at depth i, where D (n,i) represents all possible combinations of i elements taken from n elements.
Reference: [5] <author> Dario Giarrizzo, Matthias Kaiserswerth, Thomas Wicki, and Robin C. Williamson. </author> <title> High-speed parallel protocol implementation. </title> <booktitle> In Protocols for High-Speed Networks, </booktitle> <pages> pages 165-181. </pages> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1989. </year>
Reference-contexts: Army Research Laboratory under Cooperative Agreement DAAL01-96-2-0002. There has been some research and experimentation in the parallelization of various protocols <ref> [3, 6, 8, 2, 5] </ref>, with encouraging success. We are currently investigating the application of parallelization techniques to the data link and intranet layers of MIL-STD 188-220A, the proposed standard for interoperability over Combat Net Radio.
Reference: [6] <author> Murry W. Goldberg, Gerald W. Neufeld, and Mabo R. Ito. </author> <title> A parallel approach to OSI connection-oriented protocols. </title> <booktitle> In IFIP Workshop: Protocols for High Speed Networks, </booktitle> <pages> pages 219-232. </pages> <publisher> Elsevier Science Publishers B.V., </publisher> <year> 1993. </year>
Reference-contexts: Army Research Laboratory under Cooperative Agreement DAAL01-96-2-0002. There has been some research and experimentation in the parallelization of various protocols <ref> [3, 6, 8, 2, 5] </ref>, with encouraging success. We are currently investigating the application of parallelization techniques to the data link and intranet layers of MIL-STD 188-220A, the proposed standard for interoperability over Combat Net Radio.
Reference: [7] <author> R. Gupta and M. Spezialetti. </author> <title> Towards a nonintrusive approach for monitoring distributed computations through perturbation analysis. </title> <booktitle> In Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 586-501. </pages> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Hence, reducing the total number of timing-related test cases is crucial to reducing the total cost of the testing process. To represent multithreaded programs for static analysis purposes, we have extended the graph representation defined by Gupta and Spezialetti <ref> [7] </ref> to support shared memory systems with a different way to represent the uni-directed intertasking edges. We call the graph representation a parallel program flow graph. Nodes represent program statements. Directed edges in the graph are of two kinds.
Reference: [8] <author> Mabo R. Ito, Y. Takeuchi, and Gerald W. Neufeld. </author> <title> A multiprocessor approach for meeting the processing requirements for OSI. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 11(2) </volume> <pages> 220-227, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Army Research Laboratory under Cooperative Agreement DAAL01-96-2-0002. There has been some research and experimentation in the parallelization of various protocols <ref> [3, 6, 8, 2, 5] </ref>, with encouraging success. We are currently investigating the application of parallelization techniques to the data link and intranet layers of MIL-STD 188-220A, the proposed standard for interoperability over Combat Net Radio.
Reference: [9] <author> Pramod V. Koppol and Kuo-Chung Tai. </author> <title> An incremental approach to structural testing of concurrent software. </title> <booktitle> In Proceedings of the International Symposium on Software Testing and Analysis, </booktitle> <pages> pages 14-23, </pages> <address> San Diego, California, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: There has also been some research investigating the issues involved in the testing of concurrent programs [14] [12] [10] <ref> [9] </ref>, in which a program uses rendezvous as the synchronization mechanism and usually runs on a single processor achieving virtual parallelism through the interleaving of execution supported by the operating system.
Reference: [10] <author> Sandro Morasca and Mauro Pezze. </author> <title> Using high-level petri nets for testing concurrent and real-time systems. </title> <editor> In H. Zedan, editor, </editor> <booktitle> Real-Time Systems: Theory and Applications, Proceedings of the conference organized by the British Computer Society, </booktitle> <pages> pages 119-131. </pages> <address> Elsevier Science Publishings, </address> <year> 1990. </year>
Reference-contexts: There has also been some research investigating the issues involved in the testing of concurrent programs [14] [12] <ref> [10] </ref> [9], in which a program uses rendezvous as the synchronization mechanism and usually runs on a single processor achieving virtual parallelism through the interleaving of execution supported by the operating system.
Reference: [11] <author> M. Spezialetti and P. Kearns. </author> <title> Simultaneous regions: A framework for the consistent monitoring of distributed computations. </title> <booktitle> In Proceedings of the Ninth IEEE International Conference on Distributed Computing Systems, </booktitle> <pages> pages 61-68, </pages> <year> 1989. </year>
Reference-contexts: The use of software tools to automatical 1 ly generate test cases, i.e., software testing, has been studied extensively for sequential programs as well as distributed systems <ref> [11] </ref> [13], in which several computer programs communicate with each other through a communication network.
Reference: [12] <author> K. C. Tai. </author> <title> Testing of concurrent software. </title> <booktitle> In Proceedings of the 13th Annual International Computer Software and Applications Conference, </booktitle> <pages> pages 62-64, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: There has also been some research investigating the issues involved in the testing of concurrent programs [14] <ref> [12] </ref> [10] [9], in which a program uses rendezvous as the synchronization mechanism and usually runs on a single processor achieving virtual parallelism through the interleaving of execution supported by the operating system. <p> Instead of ordering event sequences explicitly, we extend and improve Tai's method <ref> [12] </ref> for delaying execution of concurrent programs in order to test parallel language constructs in parallel programs. In particular, we delay various events, i.e., synchronization events, communication events, and thread creations, and execute the program multiple times with various durations for each test case. Thus, various execution schedules are simulated.
Reference: [13] <author> S. Venkatesan and Brahma Dathan. </author> <title> Testing and debugging distributed programs using global predicates. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 163-177, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: The use of software tools to automatical 1 ly generate test cases, i.e., software testing, has been studied extensively for sequential programs as well as distributed systems [11] <ref> [13] </ref>, in which several computer programs communicate with each other through a communication network.
Reference: [14] <author> Stewart N. Weiss. </author> <title> A formal framework for studying concurrent program testing. </title> <booktitle> In Proceedings of the 4th Symposium on Testing, Analysis, and Verification, </booktitle> <pages> pages 106-113, </pages> <month> July </month> <year> 1988. </year> <month> 5 </month>
Reference-contexts: There has also been some research investigating the issues involved in the testing of concurrent programs <ref> [14] </ref> [12] [10] [9], in which a program uses rendezvous as the synchronization mechanism and usually runs on a single processor achieving virtual parallelism through the interleaving of execution supported by the operating system.
References-found: 14

