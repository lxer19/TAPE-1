URL: ftp://ftp.cse.ucsc.edu/pub/hsnlab/ucsc-crl-95-36.ps.Z
Refering-URL: http://www.cse.ucsc.edu/research/ccrg/projects/internet.html
Root-URL: http://www.cse.ucsc.edu
Title: ARIES: A Rearrangeable Inexpensive Edge-based On-line Steiner Algorithm  
Author: Fred Bauer Anujan Varma 
Keyword: multicast algorithms, on-line Steiner problem, rearrangeable multicast algorithms.  
Address: Santa Cruz, CA 95064  
Affiliation: Computer Engineering Department University of California  
Pubnum: UCSC-CRL-95-36  
Email: E-mail: ffred,varmag@cse.ucsc.edu  
Date: July 18, 1995  
Abstract: In this paper, we propose and evaluate ARIES, a heuristic for updating multicast trees dynamically in large point-to-point networks. The algorithm is based on monitoring the accumulated damage to the multicast tree within local regions of the tree as nodes are added and deleted, and triggering a rearrangement when the number of changes within a connected subtree crosses a set threshold. We derive an analytical upper-bound on the competitiveness of the algorithm. We also present simulation results to compare the average-case performance of the algorithm with two other known algorithms for the dynamic multicast problem, GREEDY and EBA (Edge-Bounded Algorithm). Our results show that ARIES provides the best balance among competitiveness, computational effort, and changes in the multicast tree after each update. This research is supported by the Advanced Research Projects Agency (ARPA) under Contract No. F19628-93-C-0175 and by the NSF Young Investigator Award No. MIP-9257103. A shortened version of this paper will appear in the proceedings of INFOCOM '96. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> F. Bauer and A. Varma. </author> <title> "Degree-constrained multicasting in point-to-point networks," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> Boston, </address> <month> Apr. </month> <year> 1995, </year> <pages> pp. 369-376. </pages>
Reference-contexts: Supporting such applications efficiently requires the ability to alter an existing multicast tree to accommodate membership changes as nodes join and leave the multicast session. While much has been written on the subject of establishing a static multicast tree in point-to-point networks <ref> [1, 4, 10] </ref>, algorithms to modify an existing multicast tree by adding and deleting members is a relatively unexplored area of research. Since many multicast applications are delay-sensitive, the efficiency of the algorithm used to maintain the multicast tree assumes special significance. <p> A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [1, 5, 7, 10, 11, 12, 13, 16] </ref>. This paper addresses the problem of modifying an existing multicast tree when new members enter or existing members leave the multicast group. <p> Although any static Steiner heuristic can be used to perform the rearrangement, we use the Kruskal shortest-path heuristic (KSPH) for a number of reasons. First, it is naturally suited to constructing multicast trees by combining fragments of the tree <ref> [1, 11, 16] </ref>. Second, the algorithm lends itself to distributed, asynchronous implementation [2]. <p> k do c u;k c u;k + 1 + m c v;m if c u;j threshold, u 2 R j then rearrange merged region end if end case 9 be among the best of Steiner heuristics in terms of the cost of the multicast trees produced in our previous evaluations <ref> [1, 2] </ref>. Using K-SPH, the rearrangement algorithm proceeds as follows. If R j is the region in which the rearrangement was triggered, the algorithm removes all the D-nodes and edges in R j . This fragments left behind are then combined into a new multicast tree by the K-SPH algorithm.
Reference: [2] <author> F. Bauer and A. Varma. </author> <title> "Distributed algorithms for multicast path setup in data networks," </title> <booktitle> in Proc. IEEE GLOBECOM, </booktitle> <address> Singapore, </address> <month> Nov. </month> <year> 1995, </year> <note> to appear. </note>
Reference-contexts: First, it is naturally suited to constructing multicast trees by combining fragments of the tree [1, 11, 16]. Second, the algorithm lends itself to distributed, asynchronous implementation <ref> [2] </ref>. <p> k do c u;k c u;k + 1 + m c v;m if c u;j threshold, u 2 R j then rearrange merged region end if end case 9 be among the best of Steiner heuristics in terms of the cost of the multicast trees produced in our previous evaluations <ref> [1, 2] </ref>. Using K-SPH, the rearrangement algorithm proceeds as follows. If R j is the region in which the rearrangement was triggered, the algorithm removes all the D-nodes and edges in R j . This fragments left behind are then combined into a new multicast tree by the K-SPH algorithm. <p> To be practical, however, the algorithm must have a distributed implementation. The rearrangement heuristic we have chosen, heuristic K-SPH, already has a published distributed implementation <ref> [2] </ref>. The remaining portion of ARIES may be implemented as shown by the finite state machine in Figure 7. Each tree node would run the finite state machine shown. When a node joins the multicast tree, it enters the state wait. <p> If the updated edge counter meets or exceeds the threshold value, it then enters the rearrange state. While in this state, the node initiates and participates in a distributed Steiner heuristic such as distributed K-SPH <ref> [2] </ref> to rearrange the nodes and edges in the modified region. At the conclusion of a rearrangement, participating nodes return to state wait. 4 Algorithm Analysis We now turn to an analysis of heuristic ARIES to evaluate its worst-case behavior.
Reference: [3] <author> J. Beasley. </author> <title> "An SST-based algorithm for the Steiner problem in graphs," </title> <journal> Networks, </journal> <volume> vol. 19, </volume> <pages> pp. 1-16, </pages> <year> 1989. </year>
Reference-contexts: This paper presents a new, efficient heuristic for updating the multicast tree for dynamic multicast groups. Previous authors have established that determining an optimal multicast tree for a static multicast group may be modeled as the NP-complete Steiner problem in networks <ref> [3, 4, 5, 7, 16] </ref>. Consequently. its explicit solutions are prohibitively expensive.
Reference: [4] <author> L. Berry. </author> <title> "Graph theoretic models for multicast communications," in Traffic theories for new telecommunications services ITC Specialists Seminar, </title> <address> Adelaide, Australia, </address> <month> Sep. </month> <year> 1989, </year> <pages> pp. 95-99. </pages>
Reference-contexts: Supporting such applications efficiently requires the ability to alter an existing multicast tree to accommodate membership changes as nodes join and leave the multicast session. While much has been written on the subject of establishing a static multicast tree in point-to-point networks <ref> [1, 4, 10] </ref>, algorithms to modify an existing multicast tree by adding and deleting members is a relatively unexplored area of research. Since many multicast applications are delay-sensitive, the efficiency of the algorithm used to maintain the multicast tree assumes special significance. <p> This paper presents a new, efficient heuristic for updating the multicast tree for dynamic multicast groups. Previous authors have established that determining an optimal multicast tree for a static multicast group may be modeled as the NP-complete Steiner problem in networks <ref> [3, 4, 5, 7, 16] </ref>. Consequently. its explicit solutions are prohibitively expensive.
Reference: [5] <author> K. Bharath-Kumar and Jaffe. </author> <title> "Routing to multiple destinations in computer networks," </title> <journal> IEEE Transactions on Communications, </journal> <volume> vol. COM-31, no. 3, </volume> <pages> pp. 343-351, </pages> <month> Mar. </month> <year> 1983. </year>
Reference-contexts: This paper presents a new, efficient heuristic for updating the multicast tree for dynamic multicast groups. Previous authors have established that determining an optimal multicast tree for a static multicast group may be modeled as the NP-complete Steiner problem in networks <ref> [3, 4, 5, 7, 16] </ref>. Consequently. its explicit solutions are prohibitively expensive. <p> A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [1, 5, 7, 10, 11, 12, 13, 16] </ref>. This paper addresses the problem of modifying an existing multicast tree when new members enter or existing members leave the multicast group.
Reference: [6] <author> M. Doar and I. Leslie. </author> <title> "How bad is naive multicast routing?," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> San Francisco, CA, </address> <month> Apr. </month> <year> 1993, </year> <pages> pp. 82-89. 27 </pages>
Reference-contexts: In our simulations, each request was presented to the network only after the previous request was completely serviced. The 50 test graphs were generated to resemble real networks in a manner similar to that of Doar <ref> [6] </ref>. Each of the 200 nodes is distributed across a Cartesian coordinate plane with minimum and maximum coordinates (0; 0) and (400; 400), creating a forest of 200 nodes spread across this plane. The nodes are then connected by a random spanning tree. <p> Each edge's distance is its rectilinear distance. We used the probability function P (x; y) = fie 400ff ; where d x;y is the rectilinear distance between nodes x and y <ref> [6] </ref>. The parameters ff and fi govern the density of the graph. Increasing ff increases the number of connections to nodes far away and increasing fi increases the number of edges from each node.
Reference: [7] <author> F. Hwang and D. Richards. </author> <title> "Steiner tree problems," </title> <journal> Networks, </journal> <volume> vol. 22, </volume> <pages> pp. 55-89, </pages> <year> 1992. </year>
Reference-contexts: This paper presents a new, efficient heuristic for updating the multicast tree for dynamic multicast groups. Previous authors have established that determining an optimal multicast tree for a static multicast group may be modeled as the NP-complete Steiner problem in networks <ref> [3, 4, 5, 7, 16] </ref>. Consequently. its explicit solutions are prohibitively expensive. <p> A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [1, 5, 7, 10, 11, 12, 13, 16] </ref>. This paper addresses the problem of modifying an existing multicast tree when new members enter or existing members leave the multicast group.
Reference: [8] <author> M. Imase and B. Waxman. </author> <title> "Dynamic Steiner tree problem," </title> <journal> SIAM J. Disc. Math., </journal> <volume> vol. 4, no. 3, </volume> <pages> pp. 369-384, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: We know, however, that the Steiner problem in graphs is NP-complete and no such ideal algorithm exists which runs in polynomial time. The on-line multicast problem was first presented by Waxman [14] and has received little attention since <ref> [8, 9, 15] </ref>. We present a new heuristic for the on-line Steiner problem, balancing heuristic run-time 1 against competitiveness, that is, the ratio between the cost of the heuristic tree and the cost of an optimal tree. <p> In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type <ref> [8, 14] </ref>. We summarize both heuristics below for the reader's convenience. 2 2.1 Heuristic GREEDY The non-rearrangement on-line heuristic, GREEDY [8, 14], perturbs the existing tree as little as possible. For each add request, it connects the new member to the nearest tree node using the shortest path. <p> In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type <ref> [8, 14] </ref>. We summarize both heuristics below for the reader's convenience. 2 2.1 Heuristic GREEDY The non-rearrangement on-line heuristic, GREEDY [8, 14], perturbs the existing tree as little as possible. For each add request, it connects the new member to the nearest tree node using the shortest path. For each delete request, GREEDY deletes only leaf nodes. If this deletion creates a non-member leaf, GREEDY also deletes the new leaf. <p> For each delete request, GREEDY deletes only leaf nodes. If this deletion creates a non-member leaf, GREEDY also deletes the new leaf. This continues until no non-member leaves remain. 2.2 The Edge Bounded Algorithm The rearrangement heuristic EBA (the edge-bounded algorithm) <ref> [8] </ref> enforces bounds on the distance between nodes in the tree after each change. In addition, every tree T i must also be an extension tree for its set of multicast members. <p> This edge represents their shortest path. If the new tree now contains non-members of degree less than three, these non-member nodes are deleted as described in the next paragraph. Since Imase and Waxman use constant k = 2 in <ref> [8] </ref>, we also use k = 2 in our simulations. For each delete request, EBA's actions are related to the deleted node's degree with respect to the multicast tree. If the node has degree three or more, no action is taken. <p> If more than one cheapest alternative exists, GDSM chooses the one with greatest geographic spread [9]. For each delete request, GDSM behaves exactly as GREEDY does. 3 2.4 Bounds for On-Line Heuristics Waxman and Imase <ref> [8] </ref> provide bounds for the competitiveness of all non-rearrangement heuristics in general and GREEDY in specific when only add requests are honored. Here competitiveness is defined as the ratio between the cost of a multicast tree found by the heuristic and that of an optimal tree. <p> Imase and Waxman have shown that no such finite bound exists if delete requests are also honored <ref> [8] </ref>. A rearrangeable heuristic, however, can have a finite bound for competitiveness for both add and delete requests. Heuristic EBA's upper bound is 4ffi where ffi is EBA's constant as described in Section 2.2. <p> Heuristic EBA's upper bound is 4ffi where ffi is EBA's constant as described in Section 2.2. In both our simulations and Imase and Waxman's paper ffi = 2 and the upper bound is therefore 8 <ref> [8] </ref>. 4 No similar bounds are given for GDSM. <p> Our primary objective is to derive an upper bound on its competitiveness between rearrangements. Between rearrangements, ARIES behaves the same as GREEDY and shares its bounds. From Imase and Waxman <ref> [8] </ref>, we know that the upper bound considering only add requests is log 2 (n i ), where n i is the number of nodes in the tree after request r i . However, no such finite bounds exist for GREEDY with respect to delete requests.
Reference: [9] <author> J. Kadirire. </author> <title> "Comparison of dynamic multicast routing algorithms for wide-area packet switched (Asynchronous Transfer Mode) networks," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> Boston, </address> <month> Apr. </month> <year> 1995, </year> <pages> pp. 212-219. </pages>
Reference-contexts: We know, however, that the Steiner problem in graphs is NP-complete and no such ideal algorithm exists which runs in polynomial time. The on-line multicast problem was first presented by Waxman [14] and has received little attention since <ref> [8, 9, 15] </ref>. We present a new heuristic for the on-line Steiner problem, balancing heuristic run-time 1 against competitiveness, that is, the ratio between the cost of the heuristic tree and the cost of an optimal tree. <p> If this deletion results in a non-member edge of degree two, the non-member is deleted and the process repeats until all non-member nodes in the tree have degree three or more. 2.3 The Geographic-Spread Dynamic Multicast Heuristic A second rearrangement heuristic is Kadirire's GDSM, the geographic-spread dynamic multicast routing algorithm <ref> [9] </ref>. When adding nodes, this heuristic relies on exploring four explicit connection configurations between nodes in the tree and the new member. <p> The heuristic then chooses one of four ways to connect the new member through the three identified nodes. If more than one cheapest alternative exists, GDSM chooses the one with greatest geographic spread <ref> [9] </ref>. For each delete request, GDSM behaves exactly as GREEDY does. 3 2.4 Bounds for On-Line Heuristics Waxman and Imase [8] provide bounds for the competitiveness of all non-rearrangement heuristics in general and GREEDY in specific when only add requests are honored.
Reference: [10] <author> V. Kompella, J. Pasquale, and G. Polyzos. </author> <title> "Multicasting for multimedia applications," </title> <booktitle> in Proc. IEEE INFOCOM, </booktitle> <address> New York, NY, </address> <month> May </month> <year> 1992, </year> <pages> pp. 2078-2085. </pages>
Reference-contexts: Supporting such applications efficiently requires the ability to alter an existing multicast tree to accommodate membership changes as nodes join and leave the multicast session. While much has been written on the subject of establishing a static multicast tree in point-to-point networks <ref> [1, 4, 10] </ref>, algorithms to modify an existing multicast tree by adding and deleting members is a relatively unexplored area of research. Since many multicast applications are delay-sensitive, the efficiency of the algorithm used to maintain the multicast tree assumes special significance. <p> A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [1, 5, 7, 10, 11, 12, 13, 16] </ref>. This paper addresses the problem of modifying an existing multicast tree when new members enter or existing members leave the multicast group.
Reference: [11] <author> M. Smith and P. Winter. </author> <title> "Path-distance heuristics for the Steiner problem in undirected networks," </title> <journal> Algorithmica, </journal> <volume> vol. 7, no. </volume> <pages> 2-3, pp. 309-327, </pages> <year> 1992. </year>
Reference-contexts: A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [1, 5, 7, 10, 11, 12, 13, 16] </ref>. This paper addresses the problem of modifying an existing multicast tree when new members enter or existing members leave the multicast group. <p> Although any static Steiner heuristic can be used to perform the rearrangement, we use the Kruskal shortest-path heuristic (KSPH) for a number of reasons. First, it is naturally suited to constructing multicast trees by combining fragments of the tree <ref> [1, 11, 16] </ref>. Second, the algorithm lends itself to distributed, asynchronous implementation [2].
Reference: [12] <author> H. Takahashi and A. </author> <title> Matsuyama. "An approximate solution for the Steiner problem in graphs," </title> <journal> Math. Japonica, </journal> <volume> vol. 24, no. 6, </volume> <pages> pp. 573-577, </pages> <year> 1980. </year>
Reference-contexts: A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [1, 5, 7, 10, 11, 12, 13, 16] </ref>. This paper addresses the problem of modifying an existing multicast tree when new members enter or existing members leave the multicast group.
Reference: [13] <author> S. Voss. </author> <title> "Steiner's problem in graphs: Heuristic methods," </title> <journal> Discrete Applied Mathematics, </journal> <volume> vol. 40, </volume> <pages> pp. 45-72, </pages> <year> 1992. </year>
Reference-contexts: A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [1, 5, 7, 10, 11, 12, 13, 16] </ref>. This paper addresses the problem of modifying an existing multicast tree when new members enter or existing members leave the multicast group. <p> This is because the heuristic runs on a complete distance graph. This means that each Steiner tree resembles a merged shortest path tree when translated back to its real-world equivalent and we know merged shortest-path trees to be sub-optimal <ref> [13] </ref>. This disadvantage is exaggerated because EBA requires internal, non-member nodes to have degree greater than two. Heuristic GREEDY has the lightest computation requirements and finishes all cases well within the 1.2 CPU seconds shown.
Reference: [14] <author> B. Waxman. </author> <title> "Routing of multipoint connections," </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> vol. 6, no. 9, </volume> <pages> pp. 1617-1622, </pages> <month> Dec. </month> <year> 1988. </year>
Reference-contexts: We know, however, that the Steiner problem in graphs is NP-complete and no such ideal algorithm exists which runs in polynomial time. The on-line multicast problem was first presented by Waxman <ref> [14] </ref> and has received little attention since [8, 9, 15]. We present a new heuristic for the on-line Steiner problem, balancing heuristic run-time 1 against competitiveness, that is, the ratio between the cost of the heuristic tree and the cost of an optimal tree. <p> In his original paper on the on-line multicast problem (referred to as the dynamic multipoint problem), Waxman divides on-line heuristics into two types: those that allow rearrangement of the tree and those that do not <ref> [14] </ref>. In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type [8, 14]. We summarize both heuristics below for the reader's convenience. 2 2.1 Heuristic GREEDY The non-rearrangement on-line heuristic, GREEDY [8, 14], perturbs the existing tree as little as possible. <p> In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type <ref> [8, 14] </ref>. We summarize both heuristics below for the reader's convenience. 2 2.1 Heuristic GREEDY The non-rearrangement on-line heuristic, GREEDY [8, 14], perturbs the existing tree as little as possible. For each add request, it connects the new member to the nearest tree node using the shortest path. <p> In this first paper and a subsequent one, Waxman and Imase describe a heuristic of each type <ref> [8, 14] </ref>. We summarize both heuristics below for the reader's convenience. 2 2.1 Heuristic GREEDY The non-rearrangement on-line heuristic, GREEDY [8, 14], perturbs the existing tree as little as possible. For each add request, it connects the new member to the nearest tree node using the shortest path. For each delete request, GREEDY deletes only leaf nodes. If this deletion creates a non-member leaf, GREEDY also deletes the new leaf. <p> Each heuristic received 100 requests to add or delete a multicast member for each test network. The probability of an add request is related to t, the number of nodes in the tree, by the function <ref> [14] </ref>: fl (200 t) : The value of fl determines the equilibrium point at which the probability of an add or delete is equally likely. In our simulations fl was set to 0:3, the fraction of multicast members.
Reference: [15] <author> J. Westbrook and D. Yan. </author> <title> "Greedy algorithms for the on-line Steiner tree and generalized Steiner problems," in Algorithms and data structures. </title> <booktitle> Third Workshop, WADS '93., </booktitle> <address> Montreal, Quebec, Canada, </address> <month> Aug. </month> <year> 1993, </year> <pages> pp. 621-633. </pages>
Reference-contexts: The problem of updating the multicast tree after each addition and deletion is known as the on-line multicast problem in networks. This paper focuses on its Steiner equivalent, the on-line Steiner problem in networks <ref> [15] </ref>. <p> We know, however, that the Steiner problem in graphs is NP-complete and no such ideal algorithm exists which runs in polynomial time. The on-line multicast problem was first presented by Waxman [14] and has received little attention since <ref> [8, 9, 15] </ref>. We present a new heuristic for the on-line Steiner problem, balancing heuristic run-time 1 against competitiveness, that is, the ratio between the cost of the heuristic tree and the cost of an optimal tree. <p> These bounds are shown in Figure 1. Westbrook <ref> [15] </ref> provides a tighter upper bound for heuristic GREEDY when only add requests are honored.
Reference: [16] <author> P. Winter. </author> <title> "Steiner problem in networks: A survey," </title> <journal> Networks, </journal> <volume> vol. 17, no. 2, </volume> <pages> pp. 129-167, </pages> <year> 1987. </year> <month> 28 </month>
Reference-contexts: This paper presents a new, efficient heuristic for updating the multicast tree for dynamic multicast groups. Previous authors have established that determining an optimal multicast tree for a static multicast group may be modeled as the NP-complete Steiner problem in networks <ref> [3, 4, 5, 7, 16] </ref>. Consequently. its explicit solutions are prohibitively expensive. <p> Consequently. its explicit solutions are prohibitively expensive. For example, two popular explicit algorithms, the spanning tree enumeration algorithm and the dynamic programming algorithm <ref> [16] </ref>, have algorithmic complexities of O (p 2 2 (np) + n 3 ) and O (n3 p + n 2 2 p + n 3 ), respectively, where n is the number of nodes in the graph and p the number of multicast members. <p> A number of good, inexpensive heuristics exist for the Steiner problem in networks and have been reviewed extensively elsewhere <ref> [1, 5, 7, 10, 11, 12, 13, 16] </ref>. This paper addresses the problem of modifying an existing multicast tree when new members enter or existing members leave the multicast group. <p> Although any static Steiner heuristic can be used to perform the rearrangement, we use the Kruskal shortest-path heuristic (KSPH) for a number of reasons. First, it is naturally suited to constructing multicast trees by combining fragments of the tree <ref> [1, 11, 16] </ref>. Second, the algorithm lends itself to distributed, asynchronous implementation [2].
References-found: 16

