URL: http://www.cs.tamu.edu/research/robotics/Sean/Papers/ieee92.ps.gz
Refering-URL: http://www.cs.tamu.edu/research/robotics/Sean/Papers/sean_bib.html
Root-URL: http://www.cs.tamu.edu
Title: A Modular Software System for Distributed Telerobotics  
Author: Sean Graves Larry Ciscon J. D. Wise 
Date: August 25, 1994  
Abstract: This paper describes a new control architecture for telerobotics research. The architecture described is object oriented and data driven, and can be distributed over many processors on a wide-area network. The basic capabilities of this testbed have already been demonstrated in tests distributed over four cities. The data distribution techniques of this control architecture are described, as well as details of the current implementation and experimental results. This work has been carried out by the Universities Space Automation/Robotics Consortium (USA/RC), which includes four universities (Texas A&M University, the University of Texas at Austin, Rice University, and the University of Texas at Arlington) in conjunction with NASA's Johnson Space Center. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. P. Paul, </author> <title> Robot Manipulators: Mathematics, Programming, and Control, </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1981. </year>
Reference: [2] <author> T. B. Sheridan, </author> <title> "Human supervisory control of robot systems," </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation [16], </booktitle> <pages> pp. 808-812. </pages>
Reference-contexts: 1 This link will be upgraded to T1 in October, 1991. rates; these fluctuations also create difficulties for classic tight-loop control strategies <ref> [2] </ref>. We overcome this problem by using a combination of strategies. These include simulations to give immediate feedback about the robot's commanded position; using time and position clutches [3], and transmitting complete command sequences [4]. <p> This combination of commanded and actual simulations provides an effective means of actively controlling the robot even in the presence of delays on the order of a few seconds <ref> [6, 2] </ref>. Simulations can also serve other useful purposes. By running a simulation in place of the actual robot, a complete telerobotic system can be tested and debugged without risk of physical damage. <p> Currently, motion may be specified in one of two ways: as a single target point, or a continuous trajectory. A 8 #define G_COMMAND 0x4201 struct g_command - long gc_code; long gc_param <ref> [2] </ref>; string gc_description; section gc_data; -; continuous motion may be specified either as a stream of single points, or as a complete trajectory.
Reference: [3] <author> L. Conway, R. A. Volz, and M. W. Walker, </author> <title> "Teleau-tonomous systems: Projecting and coordinating intelligent action at a distance," </title> <journal> IEEE Transactions on Robotics and Automation, </journal> <volume> vol. 6, no. 2, </volume> <pages> pp. 146-158, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: 1 This link will be upgraded to T1 in October, 1991. rates; these fluctuations also create difficulties for classic tight-loop control strategies [2]. We overcome this problem by using a combination of strategies. These include simulations to give immediate feedback about the robot's commanded position; using time and position clutches <ref> [3] </ref>, and transmitting complete command sequences [4]. These strategies, and the philosophies behind them, will be discussed in more depth in the following sections. III. Methodology A. <p> Actually, the operator is only performing operations on the simulated manipulator, which is shown as a solid shaded model. The current configuration of the actual manipulator is shown as a wireframe display superimposed over the simulated manipulator <ref> [3] </ref>. The decision to represent the simulated manipulator as a solid model, while the actual manipulator is shown as a wireframe is based on the fact that the operator should have the highest fidelity image with which to work. <p> A.4 Manual Controllers Just as the movement commands presented to the robot are subject to semantic interpretation, so are the outputs from manual controllers. For example, do the forces and moments that the operator applies represent positions or velocities? One useful hand controller mode is the time clutch <ref> [3] </ref>, where the operator is allowed to move the simulated manipulator at a faster rate than the actual manipulator can move. Once again, the semantic interpretation of these data objects can be sent between user modules as TelRIP objects, making the system more versatile and modular. <p> These motion objects, which are passed between control station and robot by TelRIP, instruct the actual manipulator how it is expected to perform the motion action. One possible semantic interpretation, called position clutch mode <ref> [3] </ref>, instructs the remote robot to not move until the operator signals it to do so. Then, the actual robot moves to the point indicated by the current configuration of the simulated robot. This allows the operator to perform fine positioning in real time, seamingly without time delay.
Reference: [4] <author> J. Funda and R. P. Paul, </author> <title> "Remote control of a robotic system by teleprogramming," </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <address> Sacra-mento, CA, </address> <month> May </month> <year> 1991, </year> <note> IEEE. </note>
Reference-contexts: We overcome this problem by using a combination of strategies. These include simulations to give immediate feedback about the robot's commanded position; using time and position clutches [3], and transmitting complete command sequences <ref> [4] </ref>. These strategies, and the philosophies behind them, will be discussed in more depth in the following sections. III. Methodology A. Modularity An initial difficulty in the design of the distributed teler-obotic system was the great variety of software, computers, robots, teachballs, and display devices to utilize.
Reference: [5] <author> S. Hayati, T. Lee, et al., </author> <title> "A unified teleoperated autonomous dual-arm robotic system," </title> <journal> IEEE Transactions on Control Systems, </journal> <volume> vol. 11, no. 2, </volume> , <month> February </month> <year> 1991. </year>
Reference-contexts: These modules can be added and removed simply by invoking and terminating the corresponding process. Each process may contain one or more modules, depending on the particular implementation of that code, but usually each process contains a single processing module <ref> [5, 10, 11] </ref>. Given that each module is an independent process running on any of a number of processors, how do we insure that these modules can interconnect, communicate with each other, and share information? The goal is to define the Data Exchange Mechanism independently from the processing modules.
Reference: [6] <author> M. Noyes and T. B. Sheridan, </author> <title> "A novel predictor for telemanipulation through a time delay," </title> <booktitle> In Proc. 1984 Annual Conf. on Manual Control. </booktitle> <institution> NASA Ames Research Center, </institution> <year> 1984. </year>
Reference-contexts: This combination of commanded and actual simulations provides an effective means of actively controlling the robot even in the presence of delays on the order of a few seconds <ref> [6, 2] </ref>. Simulations can also serve other useful purposes. By running a simulation in place of the actual robot, a complete telerobotic system can be tested and debugged without risk of physical damage.
Reference: [7] <author> D. Tesar and M. Butler, </author> <title> "A generalized modular architecture for robot structures," </title> <journal> Manufacturing Review, </journal> <volume> vol. 2, </volume> <pages> pp. 91-117, </pages> <month> June </month> <year> 1989. </year>
Reference: [8] <institution> NASA Handcontroller Chair User Hardware and Software Interface, NASA Johnson Space Center, </institution> <year> 1990. </year>
Reference-contexts: The format of an error object is shown in Figure 12. 9 #define ARM_JOINT_STATE 0x4301 #define EFF_CARTESIAN_STATE 0x4302 struct arm_joint_state - struct eff_cartesian_state-short js_status; short cs_status; short js_gripper; short cs_gripper; short js_joints <ref> [8] </ref>; short cs_x,cs_y,cs_z; -; short cs_roll,cs_pitch,cs_yaw; -; #define ARM_JOINT_TRAJ 0x4311 #define EFF_CARTESIAN_TRAJ 0x4312 struct arm_joint_traj- struct eff_cartesian_traj-short jt_status; short ct_status; short jt_gripper; short ct_gripper; short jt_numpts; short ct_numpts; short jt_pad; short ct_pad; short jt_joints [VARIABLE][8]; por_val ct_points [VARIABLE]; -; -; #define CMD_STOP 0x3301 /* immediately stop all motion */ #define CMD_PWR_OFF
Reference: [9] <author> D. Corkill, K. Gallagher, and K. Murray, </author> <title> "Gbb: A generic blackboard development system," </title> <booktitle> In Proc. of the National Conference on Artificial Intelligence, AAAI, </booktitle> <year> 1986. </year>
Reference-contexts: This could be implemented with a single process on each processor that includes the functionality of all the modules for that particular site. Such an implementation would be similar to distributed systems such as GBBS <ref> [9] </ref>. In this case, modules can only be added or removed by either recompiling the code or by loading a new routine in an interpretive language, such as Lisp or Prolog.
Reference: [10] <author> G. Miller, </author> <title> "Goal-directed animation of tubular articulated figures or how snakes play golf," In Making Them Move: Mechanics, Control, and Animation of Articulated Figures, </title> <editor> N. Badler et al., editors, </editor> <volume> chapter 11, </volume> <pages> pp. 233-241, </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: These modules can be added and removed simply by invoking and terminating the corresponding process. Each process may contain one or more modules, depending on the particular implementation of that code, but usually each process contains a single processing module <ref> [5, 10, 11] </ref>. Given that each module is an independent process running on any of a number of processors, how do we insure that these modules can interconnect, communicate with each other, and share information? The goal is to define the Data Exchange Mechanism independently from the processing modules. <p> In a data centered system, programs communicate with one another by specifying the types of data they want to receive (and send) rather than the address of a particular process which with they must communicate. This approach is used in blackboard systems [12] and object oriented programming languages <ref> [10] </ref>. Since each module is concerned only with the data it sends and receives, it is not affected when other modules are replaced, added and removed.
Reference: [11] <author> R. Ganglanello and H. Katseff, </author> <title> "A distributed computing environment for robotics," </title> <booktitle> In Proc. IEEE Intl. Conf. on Robotics and Automation [16]. </booktitle>
Reference-contexts: These modules can be added and removed simply by invoking and terminating the corresponding process. Each process may contain one or more modules, depending on the particular implementation of that code, but usually each process contains a single processing module <ref> [5, 10, 11] </ref>. Given that each module is an independent process running on any of a number of processors, how do we insure that these modules can interconnect, communicate with each other, and share information? The goal is to define the Data Exchange Mechanism independently from the processing modules.
Reference: [12] <author> B. Hayes-Roth, </author> <title> "A blackboard architecture for control," </title> <journal> Artificial Intelligence, </journal> <volume> vol. 26, </volume> <pages> pp. 251-321, </pages> <year> 1985. </year>
Reference-contexts: In a data centered system, programs communicate with one another by specifying the types of data they want to receive (and send) rather than the address of a particular process which with they must communicate. This approach is used in blackboard systems <ref> [12] </ref> and object oriented programming languages [10]. Since each module is concerned only with the data it sends and receives, it is not affected when other modules are replaced, added and removed.
Reference: [13] <author> A. Aristides and G. Requicha, </author> <title> "Representations for rigid solids: Theory, methods, </title> <journal> and systems," ACM Computing Surveys, </journal> <volume> vol. 12, no. 4, </volume> , <month> December </month> <year> 1980. </year>
Reference-contexts: By running a simulation in place of the actual robot, a complete telerobotic system can be tested and debugged without risk of physical damage. To model unknown environments or unexpected obstacles, a 4 vision processing system can be used to provide dynamic scene information to the simulation <ref> [13] </ref>. For computer graphics simulations to provide useful operator feedback, scene fidelity is very important. The operator should be able to see the results of his actions in real time, with realistic three dimensional shaded models. These models must encompass not only the environment but also the robot.
Reference: [14] <institution> TDM Tree Display Manager User's Guide, NASA Johnson Space Center. </institution>
Reference-contexts: A.1 Graphical Simulation In the current implementation of our architecture, graphics simulation is performed on Silicon Graphics Personal IRIS workstations running the TDM/SSM (Tree Display Manager/Solid Surface Modeler) modeling and rendering system <ref> [14, 15] </ref>. This system was developed by the Integrated Graphics Operations and Analysis Laboratory at NASA Johnson Space Center. TDM/SSM was chosen primarily because it met the aforementioned criteria as well as being publicly available. Also a set of prebuilt robot models already exits.
Reference: [15] <institution> Solid Surface Modeler User's Guide, NASA Johnson Space Center, </institution> <month> October </month> <year> 1990. </year>
Reference-contexts: A.1 Graphical Simulation In the current implementation of our architecture, graphics simulation is performed on Silicon Graphics Personal IRIS workstations running the TDM/SSM (Tree Display Manager/Solid Surface Modeler) modeling and rendering system <ref> [14, 15] </ref>. This system was developed by the Integrated Graphics Operations and Analysis Laboratory at NASA Johnson Space Center. TDM/SSM was chosen primarily because it met the aforementioned criteria as well as being publicly available. Also a set of prebuilt robot models already exits.
Reference: [16] <editor> IEEE, </editor> <booktitle> Proc. IEEE Intl. Conf. on Robotics and Automation, </booktitle> <address> San Francisco, CA, </address> <month> April </month> <year> 1986. </year> <month> 12 </month>
References-found: 16

