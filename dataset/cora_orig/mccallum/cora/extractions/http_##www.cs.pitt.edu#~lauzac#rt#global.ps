URL: http://www.cs.pitt.edu/~lauzac/rt/global.ps
Refering-URL: http://www.cs.pitt.edu/~melhem/research/parallel/rt.html
Root-URL: 
Email: (lauzac, melhem, mosse)@cs.pitt.edu  
Title: Comparison of Global and Partitioning Schemes for Scheduling Rate Monotonic Tasks on a Multiprocessor  
Author: Sylvain Lauzac, Rami Melhem, Daniel Mosse 
Address: Pittsburgh, PA 15260  
Affiliation: University of Pittsburgh Department of Computer Science  
Abstract: In this paper we study GRMS, a global scheduling scheme for rate monotonic tasks on a multiprocessor. Several admission control algorithms for GRMS are presented, both for hard and soft real-time tasks. The average performance of these admission control algorithms is compared with the performance of known partitioning schemes. The result of these comparisons outlines some situations where one scheme is preferable over the other. Partitioning schemes are better suited for hard real-time systems, while a global scheme is preferable for soft real-time systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Burchard, J. Liebeherr, Y. Oh, and S. H. Son. </author> <title> New strategies for assigning real-time tasks to multiprocessor systems. </title> <journal> IEEE Trans. on Computers, </journal> <volume> 44(12):14291442, </volume> <year> 1995. </year>
Reference-contexts: It is shown that in this case, GRMS outperforms the best partitioning scheme. The conclusion is presented in Section 5. 2 Motivation Most multiprocessor scheduling techniques proposed in the literature are based on a partitioning scheme <ref> [4, 3, 1, 9] </ref>. Because a global scheduling scheme relaxes the constraint that a task must always execute on the same processor, one would expect global schemes to achieve a higher processor utilization than partitioning schemes. However, this is not the case. <p> Each task has a period T that is randomly drawn from <ref> [1, T max ] </ref> with a uniform distribution and a worst case computation time C, which is randomly drawn from [T U min , T U max ] with a uniform distribution. <p> This bound takes into account the ratio between tasks period and is tighter than the one from [8]. * BETA: This scheduling algorithm is presented in <ref> [1] </ref>.
Reference: [2] <author> T. Carpenter, K. Driscoll, K. Hoyme, and J. Carciofini. ARINC659 acheduling: </author> <title> Problem definition. </title> <booktitle> In Pro ceedings of the Real Time Systems Symposium, </booktitle> <pages> pages 165169, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: An admission control for a soft real-time system aims at admitting as many tasks as possible while minimizing the number of instances that miss a deadline. Since multiprocessor systems are becoming more common for real-time applications <ref> [2] </ref>, scheduling real-time tasks on multiprocessor systems is also an important problem. Tasks can be scheduled on multiprocessor systems by doing global scheduling or partitioning [4]. In a global scheduling scheme, tasks can execute on any processor and, after being preempted, can be resumed on a different processor.
Reference: [3] <author> S. Davari and S. K. Dhall. </author> <title> An on line algorithm for real-time tasks allocation. </title> <booktitle> IEEE Real-time Systems Symposium, </booktitle> <pages> pages 194200, </pages> <year> 1986. </year>
Reference-contexts: It is shown that in this case, GRMS outperforms the best partitioning scheme. The conclusion is presented in Section 5. 2 Motivation Most multiprocessor scheduling techniques proposed in the literature are based on a partitioning scheme <ref> [4, 3, 1, 9] </ref>. Because a global scheduling scheme relaxes the constraint that a task must always execute on the same processor, one would expect global schemes to achieve a higher processor utilization than partitioning schemes. However, this is not the case.
Reference: [4] <author> S. K. Dhall and C. L. Liu. </author> <title> On a real-time scheduling problem. </title> <journal> Operations Research, </journal> <volume> 26(1):127140, </volume> <year> 1978. </year>
Reference-contexts: Since multiprocessor systems are becoming more common for real-time applications [2], scheduling real-time tasks on multiprocessor systems is also an important problem. Tasks can be scheduled on multiprocessor systems by doing global scheduling or partitioning <ref> [4] </ref>. In a global scheduling scheme, tasks can execute on any processor and, after being preempted, can be resumed on a different processor. In a partitioning scheme, each task is assigned to a processor and is only executed on this processor. <p> It is shown that in this case, GRMS outperforms the best partitioning scheme. The conclusion is presented in Section 5. 2 Motivation Most multiprocessor scheduling techniques proposed in the literature are based on a partitioning scheme <ref> [4, 3, 1, 9] </ref>. Because a global scheduling scheme relaxes the constraint that a task must always execute on the same processor, one would expect global schemes to achieve a higher processor utilization than partitioning schemes. However, this is not the case. <p> Because a global scheduling scheme relaxes the constraint that a task must always execute on the same processor, one would expect global schemes to achieve a higher processor utilization than partitioning schemes. However, this is not the case. In <ref> [4] </ref>, Dhall and Liu showed that a multiprocessor running GRMS can fail to schedule a task set with an arbitrary low utilization. <p> First, GRMS has complex behavior that makes it difficult to design an admission control that is not too pessimistic. Second, even if one is willing to use the complex optimal admission control for GRMS, the processor utilization achieved by GRMS-OPT is lower both in the worst-case <ref> [4] </ref> and in the average-case (Figure 2) than the processor utilization achieved by partitioning schemes. Therefore, partitioning schemes should be used for hard real-time tasks on a multiprocessor system. 4 Global scheduling for soft real-time Section 3 has shown that global scheduling is not suitable for hard-real time system.
Reference: [5] <author> S. Lauzac, R. Melhem, and D. Mosse. </author> <title> An efficient RMS admission control and its application to multiprocessor scheduling. </title> <type> Technical Report CS-TR-97-11, </type> <institution> University of Pittsburgh, </institution> <year> 1997. </year>
Reference-contexts: The first three are based on a partitioning scheme, the last two are based on global scheduling. * FF-LL: This scheduling algorithm uses a first fit packing technique with the bound developed in [8]. * FF-RB: This scheduling algorithm uses a first fit packing technique with a bound developed in <ref> [5] </ref>. This bound takes into account the ratio between tasks period and is tighter than the one from [8]. * BETA: This scheduling algorithm is presented in [1].
Reference: [6] <author> J. Lehoczky, L. Sha, and Y. Ding. </author> <title> The rate monotonic scheduling: Exact characterization and average case behavior. </title> <booktitle> IEEE Real-time Systems Symposium, </booktitle> <pages> pages 166171, </pages> <year> 1989. </year>
Reference-contexts: GRMS-OPT is based on the same principle as the exact characterization of RMS for uniprocessors presented in <ref> [6] </ref>. This admission control checks at each point in time that no instance misses a deadline. In [6] the admission control only needs to check from time 0 to the maximum period in the task set, since the critical instant for uniprocessors is known. <p> GRMS-OPT is based on the same principle as the exact characterization of RMS for uniprocessors presented in <ref> [6] </ref>. This admission control checks at each point in time that no instance misses a deadline. In [6] the admission control only needs to check from time 0 to the maximum period in the task set, since the critical instant for uniprocessors is known. However, as explained in Section 3.1, the critical instant for uniprocessors does not apply to multiprocessors.
Reference: [7] <author> J. Y.-T. Leung and J. Whitehead. </author> <title> On the complexity of fixed-priority scheduling of periodic real-time tasks. Performance Evaluation, </title> <address> 2:237250, </address> <year> 1982. </year>
Reference-contexts: When a partitioning scheme is used, the admission control must not only decide which tasks can be accepted, but also create an assignment of tasks to processors. Finding an optimal assignment of tasks to processors is known to be NP-hard <ref> [7] </ref>. Therefore it is important that the complexity of the admission control remains low. Partitioning schemes are usually based on a bin-packing algorithm and a schedulability bound. The bin-packing algorithm assigns tasks to processors and uses the schedulability bound to determine if a processor can accept a task.
Reference: [8] <author> C. L. Liu and J. Layland. </author> <title> Scheduling algorithms for multiprogramming in a hard real-time environment. </title> <journal> Journal of the ACM, </journal> <volume> 20(1):4761, </volume> <year> 1973. </year>
Reference-contexts: This implies that a stringent admission control is required for hard real-time systems. In this section, we present two admission control algorithms for GRMS and discuss their performance. 3.1 Critical instant From <ref> [8] </ref>, the first step in designing an admission control for RMS on a uniprocessor is to determine the critical instant. A critical instant is defined to be the instant at which a request for a task will have the largest response time. <p> A critical instant is defined to be the instant at which a request for a task will have the largest response time. The critical instant for a uniprocessor occurs when all tasks are submitted simultaneously <ref> [8] </ref>. If each task meets its first deadline when all tasks are submitted simultaneously, the task set is schedulable. We show below that, unlike for RMS in a uniprocessor, the critical instant for GRMS is not when all tasks arrive at the same time. <p> The performance of the following algorithms are examined. The first three are based on a partitioning scheme, the last two are based on global scheduling. * FF-LL: This scheduling algorithm uses a first fit packing technique with the bound developed in <ref> [8] </ref>. * FF-RB: This scheduling algorithm uses a first fit packing technique with a bound developed in [5]. This bound takes into account the ratio between tasks period and is tighter than the one from [8]. * BETA: This scheduling algorithm is presented in [1]. <p> FF-LL: This scheduling algorithm uses a first fit packing technique with the bound developed in <ref> [8] </ref>. * FF-RB: This scheduling algorithm uses a first fit packing technique with a bound developed in [5]. This bound takes into account the ratio between tasks period and is tighter than the one from [8]. * BETA: This scheduling algorithm is presented in [1]. It based on a next fit with a bound tighter than the one from [8]. * GRMS-OPT: This admission control presented in Section 3.3 is used to determine how many proces sors are required by GRMS. * GRMS-A: This method is <p> This bound takes into account the ratio between tasks period and is tighter than the one from <ref> [8] </ref>. * BETA: This scheduling algorithm is presented in [1]. It based on a next fit with a bound tighter than the one from [8]. * GRMS-OPT: This admission control presented in Section 3.3 is used to determine how many proces sors are required by GRMS. * GRMS-A: This method is based on the schedulability analysis presented in Theorem 2. 3.4.2 Average processor utilization gorithms for increasingly large task sets. varies.
Reference: [9] <author> Y. Oh and S. Son. </author> <title> Allocating fixed-priority periodic tasks on multiprocessor systems. </title> <journal> Real-Time Systems Journal, </journal> <volume> 9:207239, </volume> <year> 1995. </year>
Reference-contexts: It is shown that in this case, GRMS outperforms the best partitioning scheme. The conclusion is presented in Section 5. 2 Motivation Most multiprocessor scheduling techniques proposed in the literature are based on a partitioning scheme <ref> [4, 3, 1, 9] </ref>. Because a global scheduling scheme relaxes the constraint that a task must always execute on the same processor, one would expect global schemes to achieve a higher processor utilization than partitioning schemes. However, this is not the case.
Reference: [10] <author> C. Shen, K. Ramamritham, and J. Stankovic. </author> <title> Resource Reclaiming in Multiprocessor Real-Time Systems. </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 4(4):382397, </volume> <month> April </month> <year> 1993. </year>
Reference-contexts: This section examines how global scheduling performs when the worst-case computation time is inaccurate (i.e, can be over or under-estimated) and some deadlines can be missed. This should typically increases the utilization of the processors <ref> [10, 11] </ref>. 4.1 Admission control Although some tasks may sometimes miss a deadline in a soft real-time system, an admission control is still useful. This admission control should reject tasks that are likely to miss their deadlines.
Reference: [11] <author> P. Thambidurai and K.S. Trivedi. </author> <title> Transient overloads in fault-tolerant real-time systems. </title> <booktitle> In Real-Time Systems Symposium, </booktitle> <pages> pages 126133, </pages> <month> Dec </month> <year> 1989. </year>
Reference-contexts: This section examines how global scheduling performs when the worst-case computation time is inaccurate (i.e, can be over or under-estimated) and some deadlines can be missed. This should typically increases the utilization of the processors <ref> [10, 11] </ref>. 4.1 Admission control Although some tasks may sometimes miss a deadline in a soft real-time system, an admission control is still useful. This admission control should reject tasks that are likely to miss their deadlines.
References-found: 11

