URL: http://ballade.cs.ucla.edu:8080/~cong/papers/iccad96_wba.ps.gz
Refering-URL: http://ballade.cs.ucla.edu/~cong/publications.html
Root-URL: http://www.cs.ucla.edu
Email: okamoto@sbl.cl.nec.co.jp  cong@cs.ucla.edu  
Title: Buffered Steiner Tree Construction with Wire Sizing for Interconnect Layout Optimization  
Author: Takumi Okamoto Jason Cong 
Address: Corp.,Kawasaki 216, Japan  Los Angeles, CA 90095  
Affiliation: C&C Research Laboratories, NEC  Dept. of Computer Science, Univ. of California,  
Abstract: This paper presents an efficient algorithm for buffered Steiner tree construction with wire sizing. Given a source and n sinks of a signal net, with given positions and a required arrival time associated with each sink, the algorithm finds a Steiner tree with buffer insertion and wire sizing so that the required arrival time (or timing slack) at the source is maximized. The unique contribution of our algorithm is that it performs Steiner tree construction, buffer insertion, and wire sizing simultaneously with consideration of both critical delay and total capacitance minimization by combining the performance-driven A-tree construction and dynamic programming based buffer insertion and wire sizing, while tree construction and the other delay minimization techniques were carried out independently in the past. Experimental results show the effectiveness of our approach. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. L. Berman, J. L. Carter, and K. F. Day, </author> <title> "The fanout problem: From theory to practice," </title> <booktitle> Advanced Research in VLSI: Proc. 1989 Decennial Caltech Conf., </booktitle> <address> pp.69-99, </address> <year> 1989. </year>
Reference-contexts: On fanout optimization problem, most of previous work focused on buffer tree construction in logic synthesis <ref> [1, 19, 18] </ref>. The timing model used during this stage mainly consists of gate delay and roughly approximated interconnect delay, which is assumed to be piecewise linear with the number of fanouts. <p> In the combination, the concepts of critical path isolation (Figure 4 (a)) and balanced load decomposition (Figure 4 (b)) are also applied, which are techniques used for fanout optimization in logic synthesis <ref> [1, 19, 18] </ref>. In logic synthesis, when one or several sinks are timing-critical, the critical path isolation technique generates a fanout tree so that the root gate drives only the critical sinks and a smaller additional load due to buffered non-critical paths.
Reference: [2] <author> J. Cong and C.-K. Koh, </author> <title> "Simultaneous Driver and Wire Sizing for Performance and Power Optimization," </title> <journal> IEEE Trans. VLSI, </journal> <volume> 2(4), pp.408-423, </volume> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: It was also shown in <ref> [2, 13] </ref> that simultaneous driver/gate and wire sizing can achieve further delay reduction.
Reference: [3] <author> J. Cong and K. S. Leung, </author> <title> "Optimal Wiresizing Under the Distributed Elmore Delay Model," </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 14(3), pp.321-336, </volume> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: To cope with this situation, topology optimization algorithms for deep submicron VLSI design have been proposed [8]. Moreover, the wire sizing algorithms <ref> [4, 3, 17, 21] </ref> can achieve further interconnect delay minimization by optimally assigning different wire width to each wire segment. [10] has integrated wire sizing and power minimization with the buffer insertion algorithm in [6] under a more accurate delay model taking signal slew into account.
Reference: [4] <author> J. Cong, K. S. Leung, and D. Zhou, </author> <title> "Performance-Driven Interconnect Design Based on Distributed RC Delay Mode," </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <month> pp.606-611. </month>
Reference-contexts: In [6], an efficient algorithm using dynamic programming was proposed for buffer insertion on a given Steiner tree. On interconnect topology optimization problem, the analysis in [22] and <ref> [4] </ref> showed that as we reduce the device dimension, the distributed nature of the interconnect structure must be considered, and conventional algorithms fl This work is partially supported by National Science Foundation Young Investigator Award MIP9357582. y This work was done while the author was in UCLA as a visiting scholar. <p> To cope with this situation, topology optimization algorithms for deep submicron VLSI design have been proposed [8]. Moreover, the wire sizing algorithms <ref> [4, 3, 17, 21] </ref> can achieve further interconnect delay minimization by optimally assigning different wire width to each wire segment. [10] has integrated wire sizing and power minimization with the buffer insertion algorithm in [6] under a more accurate delay model taking signal slew into account. <p> Recently, [7, 11, 14] explored the possibility of combining these steps. A simple greedy algorithm was used in [7] for tree construction with wire sizing. [14] and [11] used A-tree <ref> [4] </ref> and P-tree [12], respectively, for tree construction combined with the buffer insertion in [6]. This paper presents an efficient simultaneous algorithm for Steiner tree construction, buffer insertion, and wire sizing. <p> We shall point out how to generalize our algorithm to handle multiple types of buffers and signal polarity at the end of Section 4.3. 3. Related Work We briefly review the A-tree algorithm in <ref> [4] </ref> and the buffer insertion and wire sizing algorithm in [6, 10], which are basis of our proposed algorithm. 1 "dc-connected" means "directly connected by wires". 2 Other objectives, such as minimization of c total (T s 0 ) under the constraints of q (T s 0 ) 0, can also <p> A-tree Algorithm In <ref> [4] </ref>, it was shown that a routing tree which minimizes the Elmore delay upper bound in [16] can be achieved by minimizing a weighted combination of the objectives of the minimum Steiner tree, the shortest path tree, and the "quadratic minimum Steiner tree" (a tree that minimizes the summation of source-node <p> Definition 1: A rectilinear Steiner tree T is called an A-tree if every path connecting the source s 0 and any node p on the tree is a shortest path. An A-tree is optimal if its total wire length is minimum. In <ref> [4] </ref>, an efficient algorithm based on bottom-up tree construction from the sinks (or iterative subtrees merge starting with the set of sinks as the initial set of subtrees) was proposed for optimal A-trees, which extends the algorithm in [15]. While [4] is using safe moves which cannot "worsen the sub-optimality" of <p> In <ref> [4] </ref>, an efficient algorithm based on bottom-up tree construction from the sinks (or iterative subtrees merge starting with the set of sinks as the initial set of subtrees) was proposed for optimal A-trees, which extends the algorithm in [15]. While [4] is using safe moves which cannot "worsen the sub-optimality" of an existing set of subtrees and heuristic moves that may not lead to an optimal solution (see [4] for formal definition) for the subtrees merge, we use only the heuristic moves in the A-tree algorithm for simplicity (essentially the algorithm <p> While <ref> [4] </ref> is using safe moves which cannot "worsen the sub-optimality" of an existing set of subtrees and heuristic moves that may not lead to an optimal solution (see [4] for formal definition) for the subtrees merge, we use only the heuristic moves in the A-tree algorithm for simplicity (essentially the algorithm in [15]). In most cases, [15] has similar performance as the A-tree algorithm in [4]. <p> subtrees and heuristic moves that may not lead to an optimal solution (see <ref> [4] </ref> for formal definition) for the subtrees merge, we use only the heuristic moves in the A-tree algorithm for simplicity (essentially the algorithm in [15]). In most cases, [15] has similar performance as the A-tree algorithm in [4]. The algorithm works as follows: it maintains a set named ROOT consisting of the roots of current subtrees which will be eventually merged to form a single Steiner tree; initially, ROOT contains the roots of n trivial trees, each consisting of a single sink. <p> This has proven to be a very effective technique for wire length minimization <ref> [4, 15] </ref>. In order to consider both delay and total wire length min imization, we introduce the following definition of the merging cost for u and w.
Reference: [5] <author> W. C. </author> <title> Elmore, "The Transient Response of Damped Linear Network with Particular Regard to Wideband Amplifier," </title> <journal> J. Applied Physics, </journal> <volume> 19, </volume> <pages> pp. 55-63, </pages> <year> 1948. </year>
Reference-contexts: Experimental results show that our approach outperforms existing approaches by up to 16% in terms of the maximum delay in trees. 2. Delay Models and Problem Formulation 2.1. Delay Models As in most previous work on interconnect layout optimization, we adopt the Elmore delay model <ref> [5] </ref> for interconnects and a commonly used RC model for buffers. For wire e, let l e , w e , c e and r e denote length, width, capacitance, and resistance, respectively. Further, let e v denote the wire entering node v from its parent.
Reference: [6] <author> L.P.P.P. van Ginneken, </author> <title> "Buffer Placement in Distributed RC-tree Networks for Minimal Elmore Delay," </title> <booktitle> Proc. IEEE Int. Symp. Circuits Syst., </booktitle> <year> 1990, </year> <month> pp.865-868. </month>
Reference-contexts: As a result, although the total gate area of the synthesized netlist is quite small, it may not result in small layout. Recently, fanout optimization algorithms using layout information have been proposed <ref> [20, 9, 6] </ref>. [20] and [9] presented algorithms for fanout tree generation based on alphabetic trees and minimum spanning trees, respectively. In [6], an efficient algorithm using dynamic programming was proposed for buffer insertion on a given Steiner tree. <p> Recently, fanout optimization algorithms using layout information have been proposed [20, 9, 6]. [20] and [9] presented algorithms for fanout tree generation based on alphabetic trees and minimum spanning trees, respectively. In <ref> [6] </ref>, an efficient algorithm using dynamic programming was proposed for buffer insertion on a given Steiner tree. <p> Moreover, the wire sizing algorithms [4, 3, 17, 21] can achieve further interconnect delay minimization by optimally assigning different wire width to each wire segment. [10] has integrated wire sizing and power minimization with the buffer insertion algorithm in <ref> [6] </ref> under a more accurate delay model taking signal slew into account. It was also shown in [2, 13] that simultaneous driver/gate and wire sizing can achieve further delay reduction. <p> Recently, [7, 11, 14] explored the possibility of combining these steps. A simple greedy algorithm was used in [7] for tree construction with wire sizing. [14] and [11] used A-tree [4] and P-tree [12], respectively, for tree construction combined with the buffer insertion in <ref> [6] </ref>. This paper presents an efficient simultaneous algorithm for Steiner tree construction, buffer insertion, and wire sizing. The algorithm maximizes the required time at source in the tree with consideration of the total capacitance minimization by combining the performance-driven A-tree construction and dynamic programming based buffer insertion and wire sizing. <p> We shall point out how to generalize our algorithm to handle multiple types of buffers and signal polarity at the end of Section 4.3. 3. Related Work We briefly review the A-tree algorithm in [4] and the buffer insertion and wire sizing algorithm in <ref> [6, 10] </ref>, which are basis of our proposed algorithm. 1 "dc-connected" means "directly connected by wires". 2 Other objectives, such as minimization of c total (T s 0 ) under the constraints of q (T s 0 ) 0, can also be handled by our algorithm. 3.1. <p> Buffer Insertion and Wire Sizing For given required arrival times at the sinks of a given Steiner tree, the buffer insertion algorithm in <ref> [6] </ref> chooses the buffering position on the tree such that the required arrival time at the source is maximized, where the delay is calculated with the definitions in Section 2. In [10], wire sizing and the total capacitance minimization are integrated with the algorithm. <p> Such information is not available to existing logic synthesis tools for fanout optimization. Note that, however, the resultant buffered trees are not necessarily planar. 4.3. Summary of the WBA-tree Algorithm The algorithm consists of two phases in the same way as the buffer insertion and wire sizing <ref> [6, 10] </ref>: the first phase is the bottom-up tree construction with option computation; the second phase is the top down buffer insertion and wire-width assignment. Formal description for the first phase is shown in Figure 8. <p> The second phase is the same with the one in the buffer insertion and wire sizing algorithm in <ref> [6, 10] </ref>. The option which gives the maximum required time and the minimum total capacitance at root is chosen, then traces back the computations of the first phase that led to this option. During the backtrace, the buffer positions and wire width for each segments are determined. <p> The required time at the sinks were set to 0 in order to evaluate the results with the maximum delay in the tree. We compared results obtained by the following four methods: T+B+W: Sequential A-tree construction [15], buffer in sertion <ref> [6] </ref>, and wire sizing [10]. T+BW: A-tree construction [15] followed by simultaneous buffer insertion and wire sizing [10]. TB+W: Simultaneous Steiner tree construction and buffer insertion (BA-tree [14] with ff = 0:6 in mcost) followed by wire sizing [10].
Reference: [7] <author> T. D. Hodes, B. A. McCoy, and G. Robins, </author> <title> "Dynamically-Wiresized Elmore-Based Routing Constructions," </title> <booktitle> Proc. IEEE Int. Symp. Circuits Syst., </booktitle> <year> 1994, </year> <month> pp.463-466. </month>
Reference-contexts: In the case of Steiner tree construction followed by buffer insertion and wire sizing, a Steiner tree optimized for delay does not necessarily result in a minimum-delay wire-sized buffered Steiner tree. Recently, <ref> [7, 11, 14] </ref> explored the possibility of combining these steps. A simple greedy algorithm was used in [7] for tree construction with wire sizing. [14] and [11] used A-tree [4] and P-tree [12], respectively, for tree construction combined with the buffer insertion in [6]. <p> In the case of Steiner tree construction followed by buffer insertion and wire sizing, a Steiner tree optimized for delay does not necessarily result in a minimum-delay wire-sized buffered Steiner tree. Recently, [7, 11, 14] explored the possibility of combining these steps. A simple greedy algorithm was used in <ref> [7] </ref> for tree construction with wire sizing. [14] and [11] used A-tree [4] and P-tree [12], respectively, for tree construction combined with the buffer insertion in [6]. This paper presents an efficient simultaneous algorithm for Steiner tree construction, buffer insertion, and wire sizing.
Reference: [8] <author> A. B. Kahng and G. Robins, </author> <title> On Optimal Interconnection for VLSI, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1995. </year>
Reference-contexts: To cope with this situation, topology optimization algorithms for deep submicron VLSI design have been proposed <ref> [8] </ref>.
Reference: [9] <author> L. N. Kannan, P. R. Suaris, and H. G. Fang, </author> <title> "A Methodology and Algorithms for Post-Placement Delay Optimization," </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1994, </year> <month> pp.327-332. </month>
Reference-contexts: As a result, although the total gate area of the synthesized netlist is quite small, it may not result in small layout. Recently, fanout optimization algorithms using layout information have been proposed <ref> [20, 9, 6] </ref>. [20] and [9] presented algorithms for fanout tree generation based on alphabetic trees and minimum spanning trees, respectively. In [6], an efficient algorithm using dynamic programming was proposed for buffer insertion on a given Steiner tree. <p> As a result, although the total gate area of the synthesized netlist is quite small, it may not result in small layout. Recently, fanout optimization algorithms using layout information have been proposed [20, 9, 6]. [20] and <ref> [9] </ref> presented algorithms for fanout tree generation based on alphabetic trees and minimum spanning trees, respectively. In [6], an efficient algorithm using dynamic programming was proposed for buffer insertion on a given Steiner tree.
Reference: [10] <author> J. Lillis, C. K. Cheng, and T. T. Lin, </author> <title> "Optimal Wire Sizing and Buffer Insertion for Low Power and a Generalized Delay Model," </title> <booktitle> Proc. IEEE Int. Conf. Computer-Aided Design, </booktitle> <year> 1995, </year> <month> pp.138-143. </month>
Reference-contexts: To cope with this situation, topology optimization algorithms for deep submicron VLSI design have been proposed [8]. Moreover, the wire sizing algorithms [4, 3, 17, 21] can achieve further interconnect delay minimization by optimally assigning different wire width to each wire segment. <ref> [10] </ref> has integrated wire sizing and power minimization with the buffer insertion algorithm in [6] under a more accurate delay model taking signal slew into account. It was also shown in [2, 13] that simultaneous driver/gate and wire sizing can achieve further delay reduction. <p> We shall point out how to generalize our algorithm to handle multiple types of buffers and signal polarity at the end of Section 4.3. 3. Related Work We briefly review the A-tree algorithm in [4] and the buffer insertion and wire sizing algorithm in <ref> [6, 10] </ref>, which are basis of our proposed algorithm. 1 "dc-connected" means "directly connected by wires". 2 Other objectives, such as minimization of c total (T s 0 ) under the constraints of q (T s 0 ) 0, can also be handled by our algorithm. 3.1. <p> In <ref> [10] </ref>, wire sizing and the total capacitance minimization are integrated with the algorithm. These algorithms assume that the topology of the routing tree (or Steiner tree) is given, as well as the possible positions for the buffer insertion and wire-width change, which are called candidate points hereafter. <p> a bottom-up manner from the sinks as the A-tree, buffer insertion, and wire siz 3 Irredundant set has no two options, (q; p; c) and (q 0 ; p 0 ; c 0 ), such that q &gt; q 0 , p &lt; p 0 , and c c 0 <ref> [10] </ref>. 4 For simplicity, a binary tree is assumed here, but the algorithm is easily applied to general trees by addition of dummy nodes and 0 length wires [10]. <p> p 0 ; c 0 ), such that q &gt; q 0 , p &lt; p 0 , and c c 0 <ref> [10] </ref>. 4 For simplicity, a binary tree is assumed here, but the algorithm is easily applied to general trees by addition of dummy nodes and 0 length wires [10]. Nodes which have only one child with either Z u or Z w being NULL in Figure 3, can also be handled by a simple extension. <p> Such information is not available to existing logic synthesis tools for fanout optimization. Note that, however, the resultant buffered trees are not necessarily planar. 4.3. Summary of the WBA-tree Algorithm The algorithm consists of two phases in the same way as the buffer insertion and wire sizing <ref> [6, 10] </ref>: the first phase is the bottom-up tree construction with option computation; the second phase is the top down buffer insertion and wire-width assignment. Formal description for the first phase is shown in Figure 8. <p> The second phase is the same with the one in the buffer insertion and wire sizing algorithm in <ref> [6, 10] </ref>. The option which gives the maximum required time and the minimum total capacitance at root is chosen, then traces back the computations of the first phase that led to this option. During the backtrace, the buffer positions and wire width for each segments are determined. <p> Signal polarity also can be handled by adding signal polarity into the options and considering only the merge of options with the same polarity at line 6 in bottom up () <ref> [10] </ref>. 5. Experimental Results We implemented the WBA-tree algorithm under the C/UNIX environment and used HSPICE to verify the results with accurate timing and power simulation. <p> The required time at the sinks were set to 0 in order to evaluate the results with the maximum delay in the tree. We compared results obtained by the following four methods: T+B+W: Sequential A-tree construction [15], buffer in sertion [6], and wire sizing <ref> [10] </ref>. T+BW: A-tree construction [15] followed by simultaneous buffer insertion and wire sizing [10]. TB+W: Simultaneous Steiner tree construction and buffer insertion (BA-tree [14] with ff = 0:6 in mcost) followed by wire sizing [10]. <p> We compared results obtained by the following four methods: T+B+W: Sequential A-tree construction [15], buffer in sertion [6], and wire sizing <ref> [10] </ref>. T+BW: A-tree construction [15] followed by simultaneous buffer insertion and wire sizing [10]. TB+W: Simultaneous Steiner tree construction and buffer insertion (BA-tree [14] with ff = 0:6 in mcost) followed by wire sizing [10]. TBW: Simultaneous Steiner tree construction, buffer insertion, and wire sizing (our WBA-tree construction with ff = 0:6 in mcost). <p> the following four methods: T+B+W: Sequential A-tree construction [15], buffer in sertion [6], and wire sizing <ref> [10] </ref>. T+BW: A-tree construction [15] followed by simultaneous buffer insertion and wire sizing [10]. TB+W: Simultaneous Steiner tree construction and buffer insertion (BA-tree [14] with ff = 0:6 in mcost) followed by wire sizing [10]. TBW: Simultaneous Steiner tree construction, buffer insertion, and wire sizing (our WBA-tree construction with ff = 0:6 in mcost). Table 1 shows the maximum delay, power dissipation, and wire length, where n, d, p, w denotes the number of sinks, maximum delay, power dissipation, and wire length, respectively.
Reference: [11] <author> J. Lillis, C. K. Cheng, and T. T. Lin, </author> <title> "Simultaneous Routing and Buffer Insertion for High Performance Interconnect," </title> <booktitle> Proc. the Sixth Great Lakes Symp. on VLSI, </booktitle> <year> 1996 </year>
Reference-contexts: In the case of Steiner tree construction followed by buffer insertion and wire sizing, a Steiner tree optimized for delay does not necessarily result in a minimum-delay wire-sized buffered Steiner tree. Recently, <ref> [7, 11, 14] </ref> explored the possibility of combining these steps. A simple greedy algorithm was used in [7] for tree construction with wire sizing. [14] and [11] used A-tree [4] and P-tree [12], respectively, for tree construction combined with the buffer insertion in [6]. <p> Recently, [7, 11, 14] explored the possibility of combining these steps. A simple greedy algorithm was used in [7] for tree construction with wire sizing. [14] and <ref> [11] </ref> used A-tree [4] and P-tree [12], respectively, for tree construction combined with the buffer insertion in [6]. This paper presents an efficient simultaneous algorithm for Steiner tree construction, buffer insertion, and wire sizing.
Reference: [12] <author> J. Lillis, C. K. Cheng, T. T. Lin, and C. Y. Ho, </author> <title> "New Performance Driven Routing Techniques with Explicit Area/Delay Tradeoff and Simultaneous Wire Sizing," </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1996, </year> <pages> pp. 395-400. </pages>
Reference-contexts: Recently, [7, 11, 14] explored the possibility of combining these steps. A simple greedy algorithm was used in [7] for tree construction with wire sizing. [14] and [11] used A-tree [4] and P-tree <ref> [12] </ref>, respectively, for tree construction combined with the buffer insertion in [6]. This paper presents an efficient simultaneous algorithm for Steiner tree construction, buffer insertion, and wire sizing.
Reference: [13] <author> N. Menezes, R. Baldick, and L. T. Pileggi, </author> <title> "A Sequential Quadratic Programming Approach to Concurrent Gate and Wire Sizing," </title> <booktitle> Proc. IEEE Int. Conf. Computer-Aided Design, </booktitle> <year> 1995, </year> <month> pp.144-151. </month>
Reference-contexts: It was also shown in <ref> [2, 13] </ref> that simultaneous driver/gate and wire sizing can achieve further delay reduction.
Reference: [14] <author> T. Okamoto and J. Cong, </author> <title> "Interconnect Layout Optimization by Simultaneous Steiner Tree Construction and Buffer Insertion," </title> <booktitle> Proc. Fifth ACM/SIGDA Physical Design Workshop, </booktitle> <year> 1996, </year> <month> pp.1-6. </month>
Reference-contexts: In the case of Steiner tree construction followed by buffer insertion and wire sizing, a Steiner tree optimized for delay does not necessarily result in a minimum-delay wire-sized buffered Steiner tree. Recently, <ref> [7, 11, 14] </ref> explored the possibility of combining these steps. A simple greedy algorithm was used in [7] for tree construction with wire sizing. [14] and [11] used A-tree [4] and P-tree [12], respectively, for tree construction combined with the buffer insertion in [6]. <p> Recently, [7, 11, 14] explored the possibility of combining these steps. A simple greedy algorithm was used in [7] for tree construction with wire sizing. <ref> [14] </ref> and [11] used A-tree [4] and P-tree [12], respectively, for tree construction combined with the buffer insertion in [6]. This paper presents an efficient simultaneous algorithm for Steiner tree construction, buffer insertion, and wire sizing. <p> We compared results obtained by the following four methods: T+B+W: Sequential A-tree construction [15], buffer in sertion [6], and wire sizing [10]. T+BW: A-tree construction [15] followed by simultaneous buffer insertion and wire sizing [10]. TB+W: Simultaneous Steiner tree construction and buffer insertion (BA-tree <ref> [14] </ref> with ff = 0:6 in mcost) followed by wire sizing [10]. TBW: Simultaneous Steiner tree construction, buffer insertion, and wire sizing (our WBA-tree construction with ff = 0:6 in mcost).
Reference: [15] <author> S. K. Rao, P. Sadayappan, F. K. Hwang, and P. W. Shor, </author> <title> "The Rectilinear Steiner Arborescence Problem," </title> <address> Algorith-mica 7, pp.277-288, </address> <year> 1992. </year>
Reference-contexts: Therefore, a minimum-cost rectilinear arborescence (A-tree) formulated in <ref> [15] </ref> is of interest since it addresses all of these terms in the delay upper bound formulation at once. Definition 1: A rectilinear Steiner tree T is called an A-tree if every path connecting the source s 0 and any node p on the tree is a shortest path. <p> In [4], an efficient algorithm based on bottom-up tree construction from the sinks (or iterative subtrees merge starting with the set of sinks as the initial set of subtrees) was proposed for optimal A-trees, which extends the algorithm in <ref> [15] </ref>. <p> using safe moves which cannot "worsen the sub-optimality" of an existing set of subtrees and heuristic moves that may not lead to an optimal solution (see [4] for formal definition) for the subtrees merge, we use only the heuristic moves in the A-tree algorithm for simplicity (essentially the algorithm in <ref> [15] </ref>). In most cases, [15] has similar performance as the A-tree algorithm in [4]. <p> cannot "worsen the sub-optimality" of an existing set of subtrees and heuristic moves that may not lead to an optimal solution (see [4] for formal definition) for the subtrees merge, we use only the heuristic moves in the A-tree algorithm for simplicity (essentially the algorithm in <ref> [15] </ref>). In most cases, [15] has similar performance as the A-tree algorithm in [4]. <p> This has proven to be a very effective technique for wire length minimization <ref> [4, 15] </ref>. In order to consider both delay and total wire length min imization, we introduce the following definition of the merging cost for u and w. <p> The required time at the sinks were set to 0 in order to evaluate the results with the maximum delay in the tree. We compared results obtained by the following four methods: T+B+W: Sequential A-tree construction <ref> [15] </ref>, buffer in sertion [6], and wire sizing [10]. T+BW: A-tree construction [15] followed by simultaneous buffer insertion and wire sizing [10]. TB+W: Simultaneous Steiner tree construction and buffer insertion (BA-tree [14] with ff = 0:6 in mcost) followed by wire sizing [10]. <p> The required time at the sinks were set to 0 in order to evaluate the results with the maximum delay in the tree. We compared results obtained by the following four methods: T+B+W: Sequential A-tree construction <ref> [15] </ref>, buffer in sertion [6], and wire sizing [10]. T+BW: A-tree construction [15] followed by simultaneous buffer insertion and wire sizing [10]. TB+W: Simultaneous Steiner tree construction and buffer insertion (BA-tree [14] with ff = 0:6 in mcost) followed by wire sizing [10]. TBW: Simultaneous Steiner tree construction, buffer insertion, and wire sizing (our WBA-tree construction with ff = 0:6 in mcost).
Reference: [16] <author> J. Rubinstein, P. Penfield, and M. A. Horowitz, </author> <title> "Signal Delay in RC Tree Networks," </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 2(3), pp.202-211, </volume> <year> 1983. </year>
Reference-contexts: A-tree Algorithm In [4], it was shown that a routing tree which minimizes the Elmore delay upper bound in <ref> [16] </ref> can be achieved by minimizing a weighted combination of the objectives of the minimum Steiner tree, the shortest path tree, and the "quadratic minimum Steiner tree" (a tree that minimizes the summation of source-node path lengths, taken over all possible node locations).
Reference: [17] <author> S. S. Sapatnekar, </author> <title> "RC Interconnect Optimization under the Elmore Delay Model," </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1994, </year> <pages> pp. 387-391. </pages>
Reference-contexts: To cope with this situation, topology optimization algorithms for deep submicron VLSI design have been proposed [8]. Moreover, the wire sizing algorithms <ref> [4, 3, 17, 21] </ref> can achieve further interconnect delay minimization by optimally assigning different wire width to each wire segment. [10] has integrated wire sizing and power minimization with the buffer insertion algorithm in [6] under a more accurate delay model taking signal slew into account.
Reference: [18] <author> K. J. Singh and A. Sangiovanni-Vincentelli, </author> <title> "A Heuristic Algorithm for the Fanout Problem," </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1990, </year> <month> pp.357-360. </month>
Reference-contexts: On fanout optimization problem, most of previous work focused on buffer tree construction in logic synthesis <ref> [1, 19, 18] </ref>. The timing model used during this stage mainly consists of gate delay and roughly approximated interconnect delay, which is assumed to be piecewise linear with the number of fanouts. <p> In the combination, the concepts of critical path isolation (Figure 4 (a)) and balanced load decomposition (Figure 4 (b)) are also applied, which are techniques used for fanout optimization in logic synthesis <ref> [1, 19, 18] </ref>. In logic synthesis, when one or several sinks are timing-critical, the critical path isolation technique generates a fanout tree so that the root gate drives only the critical sinks and a smaller additional load due to buffered non-critical paths.
Reference: [19] <author> H. J. Touati, C. W. Moon, R. K. Brayton, and A. Wang, </author> <title> "Performance Oriented Technology Mapping," </title> <booktitle> Proc. sixth MIT VLSI Conf., </booktitle> <address> pp.79-97, </address> <year> 1990. </year>
Reference-contexts: On fanout optimization problem, most of previous work focused on buffer tree construction in logic synthesis <ref> [1, 19, 18] </ref>. The timing model used during this stage mainly consists of gate delay and roughly approximated interconnect delay, which is assumed to be piecewise linear with the number of fanouts. <p> In the combination, the concepts of critical path isolation (Figure 4 (a)) and balanced load decomposition (Figure 4 (b)) are also applied, which are techniques used for fanout optimization in logic synthesis <ref> [1, 19, 18] </ref>. In logic synthesis, when one or several sinks are timing-critical, the critical path isolation technique generates a fanout tree so that the root gate drives only the critical sinks and a smaller additional load due to buffered non-critical paths.
Reference: [20] <author> H. Vaishnav and M. Pedram, </author> <title> "Routability-Driven Fanout Optimization," </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <month> pp.230-235. </month>
Reference-contexts: As a result, although the total gate area of the synthesized netlist is quite small, it may not result in small layout. Recently, fanout optimization algorithms using layout information have been proposed <ref> [20, 9, 6] </ref>. [20] and [9] presented algorithms for fanout tree generation based on alphabetic trees and minimum spanning trees, respectively. In [6], an efficient algorithm using dynamic programming was proposed for buffer insertion on a given Steiner tree. <p> As a result, although the total gate area of the synthesized netlist is quite small, it may not result in small layout. Recently, fanout optimization algorithms using layout information have been proposed [20, 9, 6]. <ref> [20] </ref> and [9] presented algorithms for fanout tree generation based on alphabetic trees and minimum spanning trees, respectively. In [6], an efficient algorithm using dynamic programming was proposed for buffer insertion on a given Steiner tree.
Reference: [21] <author> T. Xue, and E. S. Kuh, </author> <title> "Post Routing Performance Optimization via Multi-Link Insertion and Non-Uniform Wiresiz-ing," </title> <booktitle> Proc. IEEE Int. Conf. Computer-Aided Design, </booktitle> <year> 1995, </year> <pages> pp. 575-580. </pages>
Reference-contexts: To cope with this situation, topology optimization algorithms for deep submicron VLSI design have been proposed [8]. Moreover, the wire sizing algorithms <ref> [4, 3, 17, 21] </ref> can achieve further interconnect delay minimization by optimally assigning different wire width to each wire segment. [10] has integrated wire sizing and power minimization with the buffer insertion algorithm in [6] under a more accurate delay model taking signal slew into account.
Reference: [22] <author> D. Zhou, F. P. Preparata, and S. M. Kang, </author> <title> "Interconnection Delay in Very High-Speed VLSI," </title> <journal> IEEE Trans. Circuits Syst., </journal> <volume> 38(7), pp.779-790, </volume> <month> July </month> <year> 1991. </year>
Reference-contexts: In [6], an efficient algorithm using dynamic programming was proposed for buffer insertion on a given Steiner tree. On interconnect topology optimization problem, the analysis in <ref> [22] </ref> and [4] showed that as we reduce the device dimension, the distributed nature of the interconnect structure must be considered, and conventional algorithms fl This work is partially supported by National Science Foundation Young Investigator Award MIP9357582. y This work was done while the author was in UCLA as a
References-found: 22

