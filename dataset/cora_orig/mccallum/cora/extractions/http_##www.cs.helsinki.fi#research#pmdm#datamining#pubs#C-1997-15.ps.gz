URL: http://www.cs.helsinki.fi/research/pmdm/datamining/pubs/C-1997-15.ps.gz
Refering-URL: http://www.cs.helsinki.fi/~verkamo/
Root-URL: 
Title: of frequent episodes in event sequences  
Author: Heikki Mannila, Hannu Toivonen, and A. Inkeri Verkamo 
Address: Finland  
Affiliation: University of Helsinki  
Note: Discovery  
Abstract: Department of Computer Science Series of Publications C Report C-1997-15 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. A., B. P., and H. K. </author> <title> The PROSITE database, its status in 1995. </title> <journal> Nucleic Acids Research, </journal> <volume> 24:189 196, </volume> <year> 1995. </year>
Reference-contexts: The array is denoted by the name of the episode and the items in the array are referred to with the square bracket notation. For example, a parallel episode ff with events of types A; C; C; and F is represented as an array ff with ff <ref> [1] </ref> = A; ff [2] = C; ff [3] = C, and ff [4] = F . Collections of episodes are also represented as lexicographically sorted arrays, i.e., the ith episode of a collection F is denoted by F [i]. <p> Now the events in the array representing an episode are in the order imposed by a total order . For instance, a serial episode fi with events of types C; A; F; and C, in that order, is represented as an array fi with fi <ref> [1] </ref> = C, fi [2] = A, fi [3] = F , and fi [4] = C. <p> Method: 1. /* Initialization: */ 2. for each ff in C do 3. for i := 1 to jffj do 4. ff:initialized [i] := 0; 5. waits (ff [i]) := ;; 6. for each ff 2 C do 7. waits (ff <ref> [1] </ref>) := waits (ff [1]) [ f (ff; 1)g; 8. ff.freq_count := 0; 9. for t := T s win to T s 1 do beginsat (t) := ;; 10. /* Recognition: */ 11. for start := T s win + 1 to T e do 12. /* Bring in new <p> Method: 1. /* Initialization: */ 2. for each ff in C do 3. for i := 1 to jffj do 4. ff:initialized [i] := 0; 5. waits (ff [i]) := ;; 6. for each ff 2 C do 7. waits (ff <ref> [1] </ref>) := waits (ff [1]) [ f (ff; 1)g; 8. ff.freq_count := 0; 9. for t := T s win to T s 1 do beginsat (t) := ;; 10. /* Recognition: */ 11. for start := T s win + 1 to T e do 12. /* Bring in new events to the window: <p> The results in Figure 11 show that the time requirement is roughly linear with respect to the length of the input sequence, as could be expected. Finally, we experimented with protein sequences. We used data in the PROSITE database <ref> [1] </ref> of the ExPASy WWW molecular biology server of the Geneva University Hospital and the University of Geneva [11].
Reference: [2] <author> R. Agrawal, T. Imielinski, and A. Swami. </author> <title> Mining association rules between sets of items in large databases. </title> <booktitle> In Proceedings of ACM SIG-MOD Conference on Management of Data (SIGMOD'93), </booktitle> <pages> pages 207 216, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: For example, a parallel episode ff with events of types A; C; C; and F is represented as an array ff with ff [1] = A; ff <ref> [2] </ref> = C; ff [3] = C, and ff [4] = F . Collections of episodes are also represented as lexicographically sorted arrays, i.e., the ith episode of a collection F is denoted by F [i]. <p> Now the events in the array representing an episode are in the order imposed by a total order . For instance, a serial episode fi with events of types C; A; F; and C, in that order, is represented as an array fi with fi [1] = C, fi <ref> [2] </ref> = A, fi [3] = F , and fi [4] = C. <p> The strongest rules in the original text involve either the word gawk, or 35 0 10000 20000 Episodes Window width (s) episodes as a function of the window width; Winepi, compressed text data (text2), frequency threshold 0:02. common phrases such as the, value <ref> [2] </ref> ) of [3] (contdence 0.90) meaning that in 90 % of the cases where the words the value are consecutive, they are immediately followed by the preposition of. These rules were not found in the condensed text since all prepositions and articles have been stripped o. <p> the pattern class used in PROSITE but, to our suprise, these longer patterns are not reported in the PROSITE database. 6 Extensions and related work The task of discovering frequent parallel episodes can be stated as a task of discovering all frequent sets, a central phase of discovering assocation rules <ref> [2] </ref>, the rule generation methods are also basically the same for association rules and Winepi. The levelwise main algorithm has also been used successfully in the search of frequent sets [3]. Technical problems related to the recognition of episodes have been researched in several telds.
Reference: [3] <author> R. Agrawal, H. Mannila, R. Srikant, H. Toivonen, and A. I. Verkamo. </author> <title> Fast discovery of association rules. </title> <editor> In U. M. Fayyad, G. Piatetsky-Shapiro, P. Smyth, and R. Uthurusamy, editors, </editor> <booktitle> Advances in Knowledge Discovery and Data Mining, </booktitle> <pages> pages 307 328. </pages> <publisher> AAAI Press, </publisher> <address> Menlo Park, CA, </address> <year> 1996. </year>
Reference-contexts: For example, a parallel episode ff with events of types A; C; C; and F is represented as an array ff with ff [1] = A; ff [2] = C; ff <ref> [3] </ref> = C, and ff [4] = F . Collections of episodes are also represented as lexicographically sorted arrays, i.e., the ith episode of a collection F is denoted by F [i]. <p> For instance, a serial episode fi with events of types C; A; F; and C, in that order, is represented as an array fi with fi [1] = C, fi [2] = A, fi <ref> [3] </ref> = F , and fi [4] = C. <p> The contdence of an episode rule fi [win 1 ] ) ff [win 2 ] is now jmo win 1 (fi)j Example 8 Continuing the previous example, we have, e.g., the following rules and contdences. For the rule fi <ref> [3] </ref> ) fl [4] we have 20 jf [35; 38); [46; 48); [57; 60)gj in the denominator and jf [35; 38)gj in the nu-merator, so the contdence is 1=3. For the rule fi [3] ) fl [5] the contdence is 1. <p> For the rule fi <ref> [3] </ref> ) fl [4] we have 20 jf [35; 38); [46; 48); [57; 60)gj in the denominator and jf [35; 38)gj in the nu-merator, so the contdence is 1=3. For the rule fi [3] ) fl [5] the contdence is 1. <p> The strongest rules in the original text involve either the word gawk, or 35 0 10000 20000 Episodes Window width (s) episodes as a function of the window width; Winepi, compressed text data (text2), frequency threshold 0:02. common phrases such as the, value [2] ) of <ref> [3] </ref> (contdence 0.90) meaning that in 90 % of the cases where the words the value are consecutive, they are immediately followed by the preposition of. These rules were not found in the condensed text since all prepositions and articles have been stripped o. <p> The levelwise main algorithm has also been used successfully in the search of frequent sets <ref> [3] </ref>. Technical problems related to the recognition of episodes have been researched in several telds.
Reference: [4] <author> R. Agrawal and R. Srikant. </author> <title> Mining sequential patterns. </title> <booktitle> In Proceedings of the Eleventh International Conference on Data Engineering (ICDE'95), </booktitle> <pages> pages 3 14, </pages> <address> Taipei, Taiwan, </address> <month> Mar. </month> <year> 1995. </year>
Reference-contexts: For example, a parallel episode ff with events of types A; C; C; and F is represented as an array ff with ff [1] = A; ff [2] = C; ff [3] = C, and ff <ref> [4] </ref> = F . Collections of episodes are also represented as lexicographically sorted arrays, i.e., the ith episode of a collection F is denoted by F [i]. Since the episodes and episode collections are sorted, all episodes that share the same trst event types are consecutive in the episode collection. <p> For instance, a serial episode fi with events of types C; A; F; and C, in that order, is represented as an array fi with fi [1] = C, fi [2] = A, fi [3] = F , and fi <ref> [4] </ref> = C. By replacing line 6 by 6: for (j := F l :block_start [i]; F l :block_start [j] = F l :block_start [i]; j := j + 1) do Algorithm 3 generates candidates for serial episodes. 10 There are further options with the algorithm. <p> The contdence of an episode rule fi [win 1 ] ) ff [win 2 ] is now jmo win 1 (fi)j Example 8 Continuing the previous example, we have, e.g., the following rules and contdences. For the rule fi [3] ) fl <ref> [4] </ref> we have 20 jf [35; 38); [46; 48); [57; 60)gj in the denominator and jf [35; 38)gj in the nu-merator, so the contdence is 1=3. For the rule fi [3] ) fl [5] the contdence is 1. <p> Recent results on the pattern matching aspects of recognizing episodes can be found in [6]. The work most closely related to ours is perhaps <ref> [4] </ref>. There multiple sequences are searched for patterns that are similar to the serial episodes with some extra restrictions and an event taxonomy. Our methods can be extended with a taxonomy by a direct application of the similar extensions to association rules [13, 14, 22]. <p> Also, our methods can be applied on analyzing several sequencies; there is actually a variety of choices for the detnition of frequency of an episode in a set of sequencies. More recently, the pattern class of <ref> [4] </ref> has been extended with windowing, some extra time constraints, 39 and an event taxonomy [23]. For a survey on patterns in sequential data, see [17]. In stochastics, event sequence data is often called a marked point process [16].
Reference: [5] <author> C. Bettini, X. S. Wang, and S. Jajodia. </author> <title> Testing complex temporal relationships involving multiple granularities and its application to data mining. </title> <booktitle> In Proceedings of the Fifteenth ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems (PODS'96), </booktitle> <pages> pages 68 78, </pages> <address> Montreal, Canada, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: Examples of such data are alarms in a telecommunication network, user interface actions, crimes committed by a person, occurrences of recurrent illnesses, etc. Recently, interest in knowledge discovery from sequential data has increased: see, e.g., <ref> [5, 8, 17, 19, 24] </ref>. Abstractly, such data can be viewed as a sequence of events, where each event has an associated time of occurrence. An example of an event sequence is represented in Figure 1. <p> For the rule fi [3] ) fl [4] we have 20 jf [35; 38); [46; 48); [57; 60)gj in the denominator and jf [35; 38)gj in the nu-merator, so the contdence is 1=3. For the rule fi [3] ) fl <ref> [5] </ref> the contdence is 1.
Reference: [6] <author> G. Das, R. Fleischer, L. Gasieniec, D. Gunopulos, and J. Krkkinen. </author> <title> Episode matching. </title> <type> Manuscript, </type> <year> 1997. </year>
Reference-contexts: The described algorithm tnds patterns that are similar to serial episodes; however, the patterns have a given minimum length, and the occurrences can be within a given edit distance. Recent results on the pattern matching aspects of recognizing episodes can be found in <ref> [6] </ref>. The work most closely related to ours is perhaps [4]. There multiple sequences are searched for patterns that are similar to the serial episodes with some extra restrictions and an event taxonomy.
Reference: [7] <author> P. J. Denning. </author> <title> The working set model of program behavior. </title> <journal> Communications of the ACM, </journal> <volume> 11(5):323 333, </volume> <year> 1968. </year> <month> 42 </month>
Reference-contexts: Also, comparable strategies using a sliding window have been used, e.g., to study the locality of reference in virtual memory <ref> [7] </ref>. Our setting diers from these in that our window is a queue with the special property that we know in advance when an event will leave the window; this knowledge is used by Winepi in the recognition of serial episodes.
Reference: [8] <author> C. Dousson, P. Gaborit, and M. Ghallab. </author> <title> Situation recognition: </title> <booktitle> Repres--entation and algorithms. In Proceedings of the Thirteenth International Joint Conference on Artitcial Intelligence (IJCAI-93), </booktitle> <pages> pages 166 172, </pages> <address> Chambery, France, </address> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: Examples of such data are alarms in a telecommunication network, user interface actions, crimes committed by a person, occurrences of recurrent illnesses, etc. Recently, interest in knowledge discovery from sequential data has increased: see, e.g., <ref> [5, 8, 17, 19, 24] </ref>. Abstractly, such data can be viewed as a sequence of events, where each event has an associated time of occurrence. An example of an event sequence is represented in Figure 1.
Reference: [9] <author> C. L. Forgy. </author> <title> Rete: A fast algorithm for the many pattern/many object pattern match problem. </title> <journal> Artitcial Intelligence, </journal> <volume> 19:17 37, </volume> <year> 1982. </year>
Reference-contexts: Taking advantage of the slowly changing contents of the group of recent events has been studied, e.g., in artitcial intelligence, where a similar problem in spirit is the many pattern/many object pattern match problem in production system interpreters <ref> [9] </ref>. Also, comparable strategies using a sliding window have been used, e.g., to study the locality of reference in virtual memory [7].
Reference: [10] <author> N. Gehani, H. Jagadish, and O. Shmueli. </author> <title> Composite event specitca-tion in active databases. </title> <booktitle> In Proceedings of the Eightteenth International Conference on Very Large Data Bases (VLDB'92), </booktitle> <pages> pages 327 338, </pages> <address> Vancouver, Canada, </address> <month> Aug. </month> <year> 1992. </year>
Reference-contexts: A problem similar to the computation of frequencies occurs also in the area of active databases. There triggers can be specited as composite events, somewhat similar to episodes. In <ref> [10] </ref> it is shown how tnite automata can be constructed from composite events to recognize when a trigger should be tred. This method is not practical for episodes since the deterministic automata could be very large.
Reference: [11] <institution> Geneva University Hospital and University of Geneva, Switzerland. </institution> <note> Ex-PASy Molecular Biology Server. http://expasy.hcuge.ch/. </note>
Reference-contexts: Finally, we experimented with protein sequences. We used data in the PROSITE database [1] of the ExPASy WWW molecular biology server of the Geneva University Hospital and the University of Geneva <ref> [11] </ref>.
Reference: [12] <author> R. Grossi and F. Luccio. </author> <title> Simple and ecient string matching with k mismatches. </title> <journal> Information Processing Letters, </journal> <volume> 33:113 120, </volume> <year> 1989. </year>
Reference-contexts: This method is not practical for episodes since the deterministic automata could be very large. The methods for matching sets of episodes against a sequence have some similarities to the algorithms used in string matching (e.g., <ref> [12] </ref>). In particular, recognizing serial episodes in a sequence can be seen as locating all occurrences of subsequences, or matches of patterns with variable length don't care symbols, where the length of the occurrences is limited by the window width.
Reference: [13] <author> J. Han and Y. Fu. </author> <title> Discovery of multiple-level association rules from large databases. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases (VLDB'95), </booktitle> <pages> pages 420 431, </pages> <address> Zurich, Swizerland, </address> <year> 1995. </year>
Reference-contexts: There multiple sequences are searched for patterns that are similar to the serial episodes with some extra restrictions and an event taxonomy. Our methods can be extended with a taxonomy by a direct application of the similar extensions to association rules <ref> [13, 14, 22] </ref>. Also, our methods can be applied on analyzing several sequencies; there is actually a variety of choices for the detnition of frequency of an episode in a set of sequencies.
Reference: [14] <author> M. Holsheimer, M. Kersten, H. Mannila, and H. Toivonen. </author> <title> A perspective on databases and data mining. </title> <booktitle> In Proceedings of the First International Conference on Knowledge Discovery and Data Mining (KDD'95), </booktitle> <pages> pages 150 155, </pages> <address> Montreal, Canada, </address> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: There multiple sequences are searched for patterns that are similar to the serial episodes with some extra restrictions and an event taxonomy. Our methods can be extended with a taxonomy by a direct application of the similar extensions to association rules <ref> [13, 14, 22] </ref>. Also, our methods can be applied on analyzing several sequencies; there is actually a variety of choices for the detnition of frequency of an episode in a set of sequencies.
Reference: [15] <author> I. Jonassen, J. F. Collins, and D. G. Higgins. </author> <title> Finding exible patterns in unaligned protein sequences. </title> <journal> Protein Science, </journal> <volume> 4(8):1587 1595, </volume> <year> 1995. </year>
Reference-contexts: The classes of patterns dier from ours; they can be, e.g., substrings with txed length don't care symbols <ref> [15] </ref>. Closer to our patterns are those considered in [24]. The described algorithm tnds patterns that are similar to serial episodes; however, the patterns have a given minimum length, and the occurrences can be within a given edit distance.
Reference: [16] <author> J. D. Kalbeisch and R. L. Prentice. </author> <title> The Statistical Analysis of Failure Time Data. </title> <publisher> John Wiley Inc., </publisher> <address> New York, NY, </address> <year> 1980. </year> <month> 43 </month>
Reference-contexts: More recently, the pattern class of [4] has been extended with windowing, some extra time constraints, 39 and an event taxonomy [23]. For a survey on patterns in sequential data, see [17]. In stochastics, event sequence data is often called a marked point process <ref> [16] </ref>. It should be noted that traditional methods for analyzing marked point processes are ill suited for the cases where the number of event types is large.
Reference: [17] <author> P. Laird. </author> <title> Identifying and using patterns in sequential data. </title> <editor> In K. Jantke, S. Kobayashi, E. Tomita, and T. Yokomori, editors, </editor> <booktitle> Algorithmic Learning Theory, 4th International Workshop, </booktitle> <pages> pages 1 18, </pages> <address> Berlin, 1993. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Examples of such data are alarms in a telecommunication network, user interface actions, crimes committed by a person, occurrences of recurrent illnesses, etc. Recently, interest in knowledge discovery from sequential data has increased: see, e.g., <ref> [5, 8, 17, 19, 24] </ref>. Abstractly, such data can be viewed as a sequence of events, where each event has an associated time of occurrence. An example of an event sequence is represented in Figure 1. <p> More recently, the pattern class of [4] has been extended with windowing, some extra time constraints, 39 and an event taxonomy [23]. For a survey on patterns in sequential data, see <ref> [17] </ref>. In stochastics, event sequence data is often called a marked point process [16]. It should be noted that traditional methods for analyzing marked point processes are ill suited for the cases where the number of event types is large.
Reference: [18] <author> H. Mannila and H. Toivonen. </author> <title> Discovering generalized episodes using minimal occurrences. </title> <booktitle> In Proceedings of the Second International Conference on Knowledge Discovery and Data Mining (KDD'96), </booktitle> <pages> pages 146 151, </pages> <address> Portland, Oregon, Aug. 1996. </address> <publisher> AAAI Press. </publisher>
Reference-contexts: Other types of patterns could also be searched for, e.g., substrings with txed length don't care symbols; searching for episodes in several sequences is no problem. A more general framework for episode discovery has been presented in <ref> [18] </ref>. There episodes are detned as combinations of events satisfying certain user specited unary of binary conditions. 7 Conclusions We presented a framework for discovering frequent episodes in sequential data. The framework consists of detning episodes as partially ordered sets of events, and looking at windows on the sequence.
Reference: [19] <author> R. A. Morris, W. D. Shoa, and L. Khatib. </author> <title> An algebraic formulation of temporal knowledge for reasoning about recurring events. </title> <booktitle> In Proceedings of the International Workshop on Temporal Representation and Reasoning (TIME-94), </booktitle> <pages> pages 29 34, </pages> <address> Pensacola, FL, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Examples of such data are alarms in a telecommunication network, user interface actions, crimes committed by a person, occurrences of recurrent illnesses, etc. Recently, interest in knowledge discovery from sequential data has increased: see, e.g., <ref> [5, 8, 17, 19, 24] </ref>. Abstractly, such data can be viewed as a sequence of events, where each event has an associated time of occurrence. An example of an event sequence is represented in Figure 1.
Reference: [20] <author> S. Muggleton. </author> <title> Inductive Logic Programming. </title> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1992. </year>
Reference-contexts: There are also some interesting similarities between the discovery of frequent episodes and the work done on inductive logic programming (see, e.g., <ref> [20] </ref>); a noticeable dierence is caused by the sequentiality of the underlying data model, and the emphasis on time-limited occurrences. Similarly, the problem of looking for one occurrence of an episode can be viewed as a constraint satisfaction problem.
Reference: [21] <author> P. Seshadri, M. Livny, and R. Ramakrishnan. SEQ: </author> <title> Design & implementation of a sequence database system. </title> <booktitle> In Proceedings of the 22nd International Conference on Very Large Data Bases (VLDB'96), </booktitle> <pages> pages 99 110, </pages> <address> Mumbay, India, </address> <month> Sept. </month> <year> 1996. </year>
Reference-contexts: In Minepi, we take advantage of the fact that we know where subepisodes of candidates have occurred. The recent work on sequence data in databases (see <ref> [21] </ref>) provides inter 38 esting openings towards the use of database techniques in the processing of queries on sequences. A problem similar to the computation of frequencies occurs also in the area of active databases. There triggers can be specited as composite events, somewhat similar to episodes.
Reference: [22] <author> R. Srikant and R. Agrawal. </author> <title> Mining generalized association rules. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases (VLDB'95), </booktitle> <pages> pages 407 419, </pages> <address> Zurich, Swizerland, </address> <year> 1995. </year>
Reference-contexts: There multiple sequences are searched for patterns that are similar to the serial episodes with some extra restrictions and an event taxonomy. Our methods can be extended with a taxonomy by a direct application of the similar extensions to association rules <ref> [13, 14, 22] </ref>. Also, our methods can be applied on analyzing several sequencies; there is actually a variety of choices for the detnition of frequency of an episode in a set of sequencies.
Reference: [23] <author> R. Srikant and R. Agrawal. </author> <title> Mining sequential patterns: Generalizations and performance improvements. </title> <booktitle> In Advances in Database Technology5th International Conference on Extending Database Technology (EDBT'96), </booktitle> <pages> pages 3 17, </pages> <address> Avignon, France, </address> <year> 1996. </year> <month> 44 </month>
Reference-contexts: More recently, the pattern class of [4] has been extended with windowing, some extra time constraints, 39 and an event taxonomy <ref> [23] </ref>. For a survey on patterns in sequential data, see [17]. In stochastics, event sequence data is often called a marked point process [16]. It should be noted that traditional methods for analyzing marked point processes are ill suited for the cases where the number of event types is large.
Reference: [24] <author> J. T.-L. Wang, G.-W. Chirn, T. G. Marr, B. Shapiro, D. Shasha, and K. Zhang. </author> <title> Combinatorial pattern discovery for scientitc data: Some preliminary results. </title> <booktitle> In Proceedings of ACM SIGMOD Conference on Management of Data (SIGMOD'94), </booktitle> <pages> pages 115 125, </pages> <month> June </month> <year> 1994. </year> <month> 45 </month>
Reference-contexts: Examples of such data are alarms in a telecommunication network, user interface actions, crimes committed by a person, occurrences of recurrent illnesses, etc. Recently, interest in knowledge discovery from sequential data has increased: see, e.g., <ref> [5, 8, 17, 19, 24] </ref>. Abstractly, such data can be viewed as a sequence of events, where each event has an associated time of occurrence. An example of an event sequence is represented in Figure 1. <p> The classes of patterns dier from ours; they can be, e.g., substrings with txed length don't care symbols [15]. Closer to our patterns are those considered in <ref> [24] </ref>. The described algorithm tnds patterns that are similar to serial episodes; however, the patterns have a given minimum length, and the occurrences can be within a given edit distance. Recent results on the pattern matching aspects of recognizing episodes can be found in [6].
References-found: 24

