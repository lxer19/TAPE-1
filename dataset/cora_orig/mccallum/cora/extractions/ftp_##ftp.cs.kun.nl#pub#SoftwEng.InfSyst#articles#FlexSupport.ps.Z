URL: ftp://ftp.cs.kun.nl/pub/SoftwEng.InfSyst/articles/FlexSupport.ps.Z
Refering-URL: http://www.sci.kun.nl/afdis/publist.html
Root-URL: 
Title: Flexible Support of Information Modelling: Is the Game worth the Candle Flexible Support of Information
Author: A.H.M. ter Hofstede and T.F. Verhoef A.H.M. ter Hofstede and T.F. Verhoef. 
Keyword: Computer-aided software engineering (CASE), meta-modelling, early phases, CASE shell  
Note: Published as:  
Address: Toernooiveld 1 NL-3833 AN Leusden NL-6525 ED Nijmegen The Netherlands The Netherlands  Nijmegen, Nijmegen, The Netherlands,  
Affiliation: 1 Department of Information Systems 2 ID Research University of Nijmegen Kastanjelaan 4  Institute, University of  
Pubnum: Technical Report CSI-R9406, Computing Science  
Email: e-mail: DVerhoef@idresearch.iaf.nl e-mail: arthur@zeus.cs.kun.nl  
Date: May 1994.  
Abstract: The necessity of CASE tools for system development is beyond dispute. The current generation of CASE tools, however, is too inflexible to provide adequate modelling support. One of the proposed solutions to this problem is the development of so-called CASE-shells. A CASE shell is a method independent CASE tool, which may be instantiated with a specific method to become a CASE tool supporting that method. As such, a CASE shell provides complete flexibility. This paper does not address the benefits of CASE shells, as they are completely clear, but focuses on the feasibility of this concept from a theoretical as well as a practical point of view. 
Abstract-found: 1
Intro-found: 1
Reference: [ Araujo and Carapu~ca, 1992 ] <author> T. Araujo and R. Carapu~ca. </author> <title> Issues for a Future CASE. </title> <editor> In B. Theodoulidis and A. Sutcliffe, editors, </editor> <booktitle> Proceedings of the Third Workshop on the Next Generation of CASE tools, </booktitle> <pages> pages 225-243, </pages> <address> Manchester, United Kingdom, </address> <year> 1992. </year>
Reference-contexts: Terminology is often fuzzy and not standardised. Therefore, a prerequisite for dealing with the first research question is a 2 language in which information modelling concepts can be adequately expressed, i.e. an adequate meta-modelling technique. State-of-the-art meta-modelling techniques, as described in <ref> [ Araujo and Carapu~ca, 1992 ] </ref> , [ Heym and Osterle, 1992 ] , [ Brinkkemper, 1990 ] , and [ Smolander et al., 1991 ] , are not fully suited for this purpose.
Reference: [ Avison and Fitzgerald, 1988 ] <author> D.E. Avison and G. Fitzgerald. </author> <title> Information Systems Development: Methodologies, Techniques and Tools. </title> <publisher> Blackwell Scientific Publications, Oxford, </publisher> <address> United Kingdom, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction CASE tools are currently considered to be an indispensable part of the systems engineer's toolkit. Justification of CASE tools is no longer subject of debate. It is believed that CASE tools are becoming the most important contributors to the continuing development in information systems development methods, see <ref> [ Avison and Fitzgerald, 1988 ] </ref> and [ Bubenko, 1988 ] . In [ Martin, 1986 ] engineering-like methods are introduced, characterised by a coherent integrated set of techniques covering the complete development process.
Reference: [ Ballay, 1987 ] <author> J.M. Ballay. </author> <title> An experimental view of the design process. </title> <editor> In W.B. Rouse and K.R. Boff, editors, </editor> <booktitle> System Design: Behavioral Perspectives on Designers, Tools and Organizations, </booktitle> <pages> pages 65-82, </pages> <address> Amsterdam, The Netherlands, 1987. </address> <publisher> North-Holland. </publisher>
Reference-contexts: Empirical studies reported in the literature (e.g. [ Guindon, 1990a ] , [ Guindon, 1990b ] , <ref> [ Ballay, 1987 ] </ref> , [ Wijers, 1991 ] and [ Bansler and Btdker, 1993 ] ) show that information modelling knowledge as applied by experienced information engineers turns out to deviate from modelling knowledge described in textbooks, regarding both modelling concepts and the way models using these concepts are constructed.
Reference: [ Bansler and Btdker, 1993 ] <author> J.P. Bansler and K. Btdker. </author> <title> A Reappraisal of Structured Analysis: Design in an Organizational Context. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 11(2) </volume> <pages> 165-193, </pages> <year> 1993. </year>
Reference-contexts: Empirical studies reported in the literature (e.g. [ Guindon, 1990a ] , [ Guindon, 1990b ] , [ Ballay, 1987 ] , [ Wijers, 1991 ] and <ref> [ Bansler and Btdker, 1993 ] </ref> ) show that information modelling knowledge as applied by experienced information engineers turns out to deviate from modelling knowledge described in textbooks, regarding both modelling concepts and the way models using these concepts are constructed.
Reference: [ Belady, 1985 ] <author> L. Belady. </author> <title> MCC: Planning the Revolution in Software. </title> <journal> IEEE Software, </journal> <volume> 2(6), </volume> <year> 1985. </year>
Reference-contexts: With respect to the first research question, it can be remarked that the early phases of systems development are still poorly understood (cf. [ Guindon and Curtis, 1988 ] ). Activities in these stages are characterised by incompleteness and vagueness <ref> [ Belady, 1985 ] </ref> . Terminology is often fuzzy and not standardised. Therefore, a prerequisite for dealing with the first research question is a 2 language in which information modelling concepts can be adequately expressed, i.e. an adequate meta-modelling technique.
Reference: [ Benyon and Skidmore, 1987 ] <author> D. Benyon and S. Skidmore. </author> <title> Towards a Tool Kit for the Systems Analyst. </title> <journal> The Computer Journal, </journal> <volume> 30(1) </volume> <pages> 2-7, </pages> <year> 1987. </year>
Reference-contexts: Guidelines on why and how to perform various tasks (i.e. how to perform the modelling process), and how to determine the specification's quality, are not part of automated tools. Naturally, the range of the required facilities should be thoroughly understood before using automated tools, see also <ref> [ Benyon and Skidmore, 1987 ] </ref> . In this reference an environment (automated or not) is proposed supporting the practising information engineer in the use of suitable techniques, depending on the current situation.
Reference: [ Bergsten et al., 1989 ] <author> P. Bergsten, J.A. Bubenko, R. Dahl, M. Gustafsson, and L A. Johansson. </author> <title> RAMATIC a CASE shell for implementation of specific CASE tools. </title> <type> Technical report, </type> <institution> SISU, Stockholm, Sweden, </institution> <year> 1989. </year> <note> First draft of a contribution to section 4.4 of the TEMPORA T6.1 report. </note>
Reference-contexts: The concept of a CASE shell is not new. Commercial products such as Toolbuilder of IPSYS Software, Virtual Software Factory of Systematica and MetaDesign of Meta Software Corporation or academic products such as RAMATIC <ref> [ Bergsten et al., 1989 ] </ref> , Metaview [ Sorenson et al., 1988 ] and MetaPlex [ Chen and Nunamaker Jr, 1989 ] , claim to generate CASE tools tailored to specific methods and organisations.
Reference: [ Brinkkemper, 1990 ] <author> S. Brinkkemper. </author> <title> Formalisation of Information Systems Modelling. </title> <type> PhD thesis, </type> <institution> University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <year> 1990. </year>
Reference-contexts: Therefore, a prerequisite for dealing with the first research question is a 2 language in which information modelling concepts can be adequately expressed, i.e. an adequate meta-modelling technique. State-of-the-art meta-modelling techniques, as described in [ Araujo and Carapu~ca, 1992 ] , [ Heym and Osterle, 1992 ] , <ref> [ Brinkkemper, 1990 ] </ref> , and [ Smolander et al., 1991 ] , are not fully suited for this purpose. They do not have sufficient expressive power to capture information modelling concepts and relations between these concepts, and tend to neglect the modelling process.
Reference: [ Bubenko, 1986 ] <author> J.A. Bubenko. </author> <title> Information System Methodologies A Research View. </title> <editor> In T.W. Olle, H.G. Sol, and A.A. Verrijn-Stuart, editors, </editor> <booktitle> Information Systems Design Methodologies: Improving the Practice, </booktitle> <pages> pages 289-318. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1986. </year> <month> 23 </month>
Reference-contexts: We suspect that this limited usage is largely due to the design of the tools not paying appropriate attention to the information engineer's modelling needs. Undoubtedly automated tools support consistency in the development process, but Bubenko and Floyd identify the danger of computerising unsuitable methods ( <ref> [ Bubenko, 1986 ] </ref> and [ Floyd, 1986 ] ). Guidelines on why and how to perform various tasks (i.e. how to perform the modelling process), and how to determine the specification's quality, are not part of automated tools.
Reference: [ Bubenko, 1988 ] <author> J.A. Bubenko. </author> <title> Selecting a Strategy for Computer-Aided Software Engineering (CASE). </title> <type> Technical Report 59, </type> <institution> SYSLAB, University of Stockholm, Stockholm, Sweden, </institution> <year> 1988. </year>
Reference-contexts: Justification of CASE tools is no longer subject of debate. It is believed that CASE tools are becoming the most important contributors to the continuing development in information systems development methods, see [ Avison and Fitzgerald, 1988 ] and <ref> [ Bubenko, 1988 ] </ref> . In [ Martin, 1986 ] engineering-like methods are introduced, characterised by a coherent integrated set of techniques covering the complete development process. Such methods depend on the availability of automated tools, because manual verification of the required consistency between various specifications would be difficult.
Reference: [ Butler Cox, 1987 ] <author> Butler Cox. </author> <title> Using System Development Knowledge. </title> <type> Technical Report 57, </type> <institution> Butler Cox Foundation, </institution> <address> London, United Kingdom, </address> <year> 1987. </year>
Reference-contexts: In [ Martin, 1986 ] engineering-like methods are introduced, characterised by a coherent integrated set of techniques covering the complete development process. Such methods depend on the availability of automated tools, because manual verification of the required consistency between various specifications would be difficult. In <ref> [ Butler Cox, 1987 ] </ref> and [ Yourdon, 1986 ] , techniques such as entity-relationship diagrams, dataflow diagrams, and structured English are described as tedious, time-consuming, and even impractical , if their use is not supported by automated tools.
Reference: [ Chen and Nunamaker Jr, 1989 ] <author> M. Chen and J.F. Nunamaker Jr. MetaPlex: </author> <title> An integrated environment for organization and information systems development. </title> <editor> In J.I. DeGross, J.C. Hen-derson, and B.R. Konsynski, editors, </editor> <booktitle> Proceedings of the Tenth International Conference on Information Systems, </booktitle> <pages> pages 141-151, </pages> <address> Boston, Massachusetts, </address> <month> December </month> <year> 1989. </year>
Reference-contexts: Commercial products such as Toolbuilder of IPSYS Software, Virtual Software Factory of Systematica and MetaDesign of Meta Software Corporation or academic products such as RAMATIC [ Bergsten et al., 1989 ] , Metaview [ Sorenson et al., 1988 ] and MetaPlex <ref> [ Chen and Nunamaker Jr, 1989 ] </ref> , claim to generate CASE tools tailored to specific methods and organisations. Even a tool that supports the modification of meta-models exists (MetaEdit [ Smolander et al., 1991 ] ).
Reference: [ Davis, 1990 ] <author> A.M. Davis. </author> <title> Software Requirements: Analysis & Specification. </title> <publisher> Prentice-Hall, </publisher> <address> En-glewood Cliffs, New Jersey, </address> <year> 1990. </year>
Reference-contexts: are considered to be the bottleneck of systems development, since the acquisition of requirements is notoriously difficult. 1 Furthermore, it is a well-known fact that the later in the development process an error is detected, the more expensive it is to correct it (see e.g. [ Dunn, 1984 ] and <ref> [ Davis, 1990 ] </ref> ). Adequate support of these phases is therefore imperative. CASE tools supporting the early phases of systems development are referred to as upper CASE tools.
Reference: [ Dunn, 1984 ] <author> R. Dunn. </author> <title> Software Defect Removal. </title> <publisher> McGraw-Hill, </publisher> <address> New York, New York, </address> <year> 1984. </year>
Reference-contexts: These early phases are considered to be the bottleneck of systems development, since the acquisition of requirements is notoriously difficult. 1 Furthermore, it is a well-known fact that the later in the development process an error is detected, the more expensive it is to correct it (see e.g. <ref> [ Dunn, 1984 ] </ref> and [ Davis, 1990 ] ). Adequate support of these phases is therefore imperative. CASE tools supporting the early phases of systems development are referred to as upper CASE tools.
Reference: [ Floyd, 1986 ] <author> C. Floyd. </author> <title> A Comparative Evaluation of System Development Methods. </title> <editor> In T.W. Olle, H.G. Sol, and A.A. Verrijn-Stuart, editors, </editor> <booktitle> Information Systems Design Methodologies: Improving the Practice, </booktitle> <pages> pages 19-54. </pages> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1986. </year>
Reference-contexts: Undoubtedly automated tools support consistency in the development process, but Bubenko and Floyd identify the danger of computerising unsuitable methods ( [ Bubenko, 1986 ] and <ref> [ Floyd, 1986 ] </ref> ). Guidelines on why and how to perform various tasks (i.e. how to perform the modelling process), and how to determine the specification's quality, are not part of automated tools.
Reference: [ Guindon and Curtis, 1988 ] <author> R. Guindon and B. Curtis. </author> <title> Control of Cognitive Processes during Software Design: </title> <booktitle> What Tools are Needed? In Proceedings of the Conference on Human Factors in Computing Systems CHI'88, </booktitle> <pages> pages 263-268, </pages> <year> 1988. </year>
Reference-contexts: With respect to the first research question, it can be remarked that the early phases of systems development are still poorly understood (cf. <ref> [ Guindon and Curtis, 1988 ] </ref> ). Activities in these stages are characterised by incompleteness and vagueness [ Belady, 1985 ] . Terminology is often fuzzy and not standardised.
Reference: [ Guindon, 1990a ] <author> R. Guindon. </author> <title> Designing the Design Process: Exploiting Opportunistic Thoughts. </title> <journal> Human-Computer Interaction, </journal> <volume> 5 </volume> <pages> 305-344, </pages> <year> 1990. </year>
Reference-contexts: With respect to the second research question, it can be remarked that relatively little is known about the diversity of information modelling processes in practice and the corresponding degree of flexibility needed for adequate support. Empirical studies reported in the literature (e.g. <ref> [ Guindon, 1990a ] </ref> , [ Guindon, 1990b ] , [ Ballay, 1987 ] , [ Wijers, 1991 ] and [ Bansler and Btdker, 1993 ] ) show that information modelling knowledge as applied by experienced information engineers turns out to deviate from modelling knowledge described in textbooks, regarding both modelling
Reference: [ Guindon, 1990b ] <author> R. Guindon. </author> <title> Knowledge exploited by experts during software system design. </title> <journal> International Journal of Man-Machine Studies, </journal> <volume> 33 </volume> <pages> 279-304, </pages> <year> 1990. </year>
Reference-contexts: With respect to the second research question, it can be remarked that relatively little is known about the diversity of information modelling processes in practice and the corresponding degree of flexibility needed for adequate support. Empirical studies reported in the literature (e.g. [ Guindon, 1990a ] , <ref> [ Guindon, 1990b ] </ref> , [ Ballay, 1987 ] , [ Wijers, 1991 ] and [ Bansler and Btdker, 1993 ] ) show that information modelling knowledge as applied by experienced information engineers turns out to deviate from modelling knowledge described in textbooks, regarding both modelling concepts and the way models
Reference: [ Halpin and Orlowska, 1992 ] <author> T.A. Halpin and M.E. Orlowska. </author> <title> Fact-oriented modelling for data analysis. </title> <journal> Journal of Information Systems, </journal> <volume> 2(2) </volume> <pages> 97-119, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Tasks can be large tasks: "Perform the Business Area Analysis" within the Information Engineering method, and can be minor tasks: "Add a total role constraint to an Information Structure Diagram" within the NIAM method ( [ Nijssen and Halpin, 1989 ] , <ref> [ Halpin and Orlowska, 1992 ] </ref> ). These examples show that decomposition is a key concept too: tasks may be decomposed into subtasks.
Reference: [ Heym and Osterle, 1992 ] <author> M. Heym and H. Osterle. </author> <title> A Reference Model for Information Systems Development. </title> <editor> In K.E. Kendell, K. Lyytinen, and J.I. DeGross, editors, </editor> <booktitle> Proceedings of the IFIP WG 8.2 Working Conference on the Impact of Computer Supported Technologies on Information Systems Development, </booktitle> <pages> pages 215-239, </pages> <address> Minneapolis, </address> <year> 1992. </year>
Reference-contexts: Terminology is often fuzzy and not standardised. Therefore, a prerequisite for dealing with the first research question is a 2 language in which information modelling concepts can be adequately expressed, i.e. an adequate meta-modelling technique. State-of-the-art meta-modelling techniques, as described in [ Araujo and Carapu~ca, 1992 ] , <ref> [ Heym and Osterle, 1992 ] </ref> , [ Brinkkemper, 1990 ] , and [ Smolander et al., 1991 ] , are not fully suited for this purpose.
Reference: [ Hofstede and Nieuwland, 1993 ] <author> A.H.M. ter Hofstede and E.R. Nieuwland. </author> <title> Task structure semantics through process algebra. </title> <journal> Software Engineering Journal, </journal> <volume> 8(1) </volume> <pages> 14-20, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: To represent knowledge about information modelling processes adequately, constructs are needed that allow for the description of moments of choice, sequence, parallelism, synchronisation, and iteration. Task structures (formally defined in <ref> [ Hofstede and Nieuwland, 1993 ] </ref> ) contain constructs for expressing these task dependencies. In figure 12, the main concepts of task structures are graphically represented. They are discussed subsequently. The central notion in task structures is the notion of a task.
Reference: [ Hofstede and Weide, 1992 ] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Formalisation of techniques: chopping down the methodology jungle. </title> <journal> Information and Software Technology, </journal> <volume> 34(1) </volume> <pages> 57-65, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: In addition to that they rarely have a formal semantics and therefore only tend to add to the current confusion with respect to information modelling (see also <ref> [ Hofstede and Weide, 1992 ] </ref> ). In section 2, focus is on the various aspects of information modelling and their relations, essential for flexible support. In section 3, techniques are described that are capable of formally describing the aspects described in section 2. <p> This implies that a meta-modelling technique should have sufficient expressive power . There are, however, other requirements that meta-modelling techniques have to fulfil. As a meta-model should not be ambiguous, a meta-modelling technique should be formally defined (both syntax and semantics, see also <ref> [ Hofstede and Weide, 1992 ] </ref> ). It has to abstract from implementation details. Meta-models often need to be validated with modelling experts, therefore a meta-modelling technique should support the construction of comprehensible meta-models (e.g. offer graphical representations, decomposition mechanisms etc.).
Reference: [ Hofstede and Weide, 1993 ] <author> A.H.M. ter Hofstede and Th.P. van der Weide. </author> <title> Expressiveness in conceptual data modelling. </title> <journal> Data & Knowledge Engineering, </journal> <volume> 10(1) </volume> <pages> 65-100, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: The Predicator Set Modelling technique (PSM) has been specifically defined with the representation of complex structures, often needed for meta-modelling, in mind. PSM is defined in <ref> [ Hofstede and Weide, 1993 ] </ref> , and LISA-D in [ Hofstede et al., 1993 ] . First, the elementary notions of object type, relationship, and role are addressed. Subsequently, the necessity of complex objects and object inheritance is illustrated by several meta-modelling problems.
Reference: [ Hofstede et al., 1992a ] <author> A.H.M. ter Hofstede, T.F. Verhoef, E.R. Nieuwland, and G.M. Wijers. </author> <title> Integrated Specification of Method and Graphic Knowledge. </title> <booktitle> In Proceedings of the Fourth International Conference on Software Engineering and Knowledge Engineering, </booktitle> <pages> pages 307-316, </pages> <address> Capri, Italy, June 1992. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: In DFDs for example, the number of a process always appears in the circle representing that process. In <ref> [ Hofstede et al., 1992a ] </ref> and [ Hofstede et al., 1992b ] , a technique is described in which these kinds of constraints can be formally expressed. The technique uses LISA-D information descriptors to relate instances on which specific requirements have to be imposed. <p> This reference also offers the complete formal definitions for the representation mechanisms within the conceptual part of the cube. The formal definitions for the representation mechanisms within the graphical product oriented part of the cube are given in <ref> [ Hofstede et al., 1992a ] </ref> and [ Hofstede et al., 1992b ] . 17 4 Diversity of Information Modelling This section focuses on the second research question which is dealt with in this paper.
Reference: [ Hofstede et al., 1992b ] <author> A.H.M. ter Hofstede, T.F. Verhoef, E.R. Nieuwland, and G.M. Wijers. </author> <title> Specification of Graphic Conventions in Methods. </title> <editor> In B. Theodoulidis and A. Sutcliffe, editors, </editor> <booktitle> Proceedings of the Third Workshop on the Next Generation of CASE Tools, </booktitle> <pages> pages 185-215, </pages> <address> Manchester, United Kingdom, </address> <month> May </month> <year> 1992. </year> <month> 24 </month>
Reference-contexts: In DFDs for example, the number of a process always appears in the circle representing that process. In [ Hofstede et al., 1992a ] and <ref> [ Hofstede et al., 1992b ] </ref> , a technique is described in which these kinds of constraints can be formally expressed. The technique uses LISA-D information descriptors to relate instances on which specific requirements have to be imposed. <p> This reference also offers the complete formal definitions for the representation mechanisms within the conceptual part of the cube. The formal definitions for the representation mechanisms within the graphical product oriented part of the cube are given in [ Hofstede et al., 1992a ] and <ref> [ Hofstede et al., 1992b ] </ref> . 17 4 Diversity of Information Modelling This section focuses on the second research question which is dealt with in this paper.
Reference: [ Hofstede et al., 1993 ] <author> A.H.M. ter Hofstede, H.A. Proper, and Th.P. van der Weide. </author> <title> Formal def-inition of a conceptual language for the description and manipulation of information models. </title> <journal> Information Systems, </journal> <volume> 18(7) </volume> <pages> 489-523, </pages> <year> 1993. </year>
Reference-contexts: The Predicator Set Modelling technique (PSM) has been specifically defined with the representation of complex structures, often needed for meta-modelling, in mind. PSM is defined in [ Hofstede and Weide, 1993 ] , and LISA-D in <ref> [ Hofstede et al., 1993 ] </ref> . First, the elementary notions of object type, relationship, and role are addressed. Subsequently, the necessity of complex objects and object inheritance is illustrated by several meta-modelling problems.
Reference: [ Hofstede, 1993 ] <author> A.H.M. ter Hofstede. </author> <title> Information Modelling in Data Intensive Domains. </title> <type> PhD thesis, </type> <institution> University of Nijmegen, Nijmegen, </institution> <address> The Netherlands, </address> <year> 1993. </year>
Reference-contexts: Furthermore, many interrelationships exist between these items. At the same time, we have deliberately used the term "flavour". To offer one coherent toolkit for an adequate representation of modelling knowledge, even more representation mechanisms are required, see <ref> [ Hofstede, 1993 ] </ref> . This reference also offers the complete formal definitions for the representation mechanisms within the conceptual part of the cube.
Reference: [ Knuth et al., 1986 ] <author> E. Knuth, J. Demetrovics, and A. Hernadi. </author> <title> Information System Design: On Conceptual Foundations. </title> <editor> In H.J. Kugler, editor, </editor> <booktitle> Information Processing 86, </booktitle> <pages> pages 635-640, </pages> <address> Amsterdam, The Netherlands, 1986. </address> <publisher> North-Holland. </publisher>
Reference-contexts: Even a tool that supports the modification of meta-models exists (MetaEdit [ Smolander et al., 1991 ] ). However, all these shells focus on the support of modelling techniques and hardly pay attention to the modelling process (the importance of which is stressed in <ref> [ Knuth et al., 1986 ] </ref> , [ Potts, 1989 ] , [ Wijers and Heijes, 1990 ] , and [ Lockemann and Mayr, 1986 ] , among others).
Reference: [ Kusters and Wijers, 1992 ] <editor> R.J. Kusters and G.M. Wijers. Het gebruik van CASE-tools in Ned-erland. </editor> <publisher> Kluwer Bedrijfswetenschappen, </publisher> <address> Deventer, The Netherlands, </address> <year> 1992. </year> <note> (In Dutch). </note>
Reference-contexts: Adequate support of these phases is therefore imperative. CASE tools supporting the early phases of systems development are referred to as upper CASE tools. Upper CASE tools tend to be strongly product oriented, as confirmed by the study of [ Wijers and Dort, 1990 ] and more recently <ref> [ Kusters and Wijers, 1992 ] </ref> . These studies among Dutch users of CASE tools concluded that these tools are mainly used for documentation and verification purposes. After a model had been constructed, it was specified by the use of an automated tool, and then verified.
Reference: [ Lockemann and Mayr, 1986 ] <author> P.C. Lockemann and H.C. Mayr. </author> <title> Information System Design: Techniques and Software Support. </title> <editor> In H.J. Kugler, editor, </editor> <booktitle> Information Processing 86, </booktitle> <address> Amsterdam, The Netherlands, 1986. </address> <publisher> North-Holland. </publisher>
Reference-contexts: However, all these shells focus on the support of modelling techniques and hardly pay attention to the modelling process (the importance of which is stressed in [ Knuth et al., 1986 ] , [ Potts, 1989 ] , [ Wijers and Heijes, 1990 ] , and <ref> [ Lockemann and Mayr, 1986 ] </ref> , among others). Furthermore, the degree of support of modelling techniques which they offer is limited, due to the low expressive power of the meta-modelling techniques used.
Reference: [ Martin, 1986 ] <author> J. Martin. </author> <title> Introduction to Information Engineering, </title> <booktitle> volume 1 of Information Engineering. Savant Research Studies, </booktitle> <address> Lancashire,United Kingdom, </address> <year> 1986. </year>
Reference-contexts: Justification of CASE tools is no longer subject of debate. It is believed that CASE tools are becoming the most important contributors to the continuing development in information systems development methods, see [ Avison and Fitzgerald, 1988 ] and [ Bubenko, 1988 ] . In <ref> [ Martin, 1986 ] </ref> engineering-like methods are introduced, characterised by a coherent integrated set of techniques covering the complete development process. Such methods depend on the availability of automated tools, because manual verification of the required consistency between various specifications would be difficult.
Reference: [ Nijssen and Halpin, 1989 ] <author> G.M. Nijssen and T.A. Halpin. </author> <title> Conceptual Schema and Relational Database Design: a fact oriented approach. </title> <publisher> Prentice-Hall, </publisher> <address> Sydney, Australia, </address> <year> 1989. </year>
Reference-contexts: Tasks can be large tasks: "Perform the Business Area Analysis" within the Information Engineering method, and can be minor tasks: "Add a total role constraint to an Information Structure Diagram" within the NIAM method ( <ref> [ Nijssen and Halpin, 1989 ] </ref> , [ Halpin and Orlowska, 1992 ] ). These examples show that decomposition is a key concept too: tasks may be decomposed into subtasks.
Reference: [ Potts, 1989 ] <author> C. Potts. </author> <title> A Generic Model for Representing Design Methods. </title> <booktitle> In Proceedings of the 11th International Conference on Software Engineering, </booktitle> <pages> pages 199-210, </pages> <address> Pittsburgh, Pennsylva-nia, </address> <year> 1989. </year>
Reference-contexts: However, all these shells focus on the support of modelling techniques and hardly pay attention to the modelling process (the importance of which is stressed in [ Knuth et al., 1986 ] , <ref> [ Potts, 1989 ] </ref> , [ Wijers and Heijes, 1990 ] , and [ Lockemann and Mayr, 1986 ] , among others). Furthermore, the degree of support of modelling techniques which they offer is limited, due to the low expressive power of the meta-modelling techniques used.
Reference: [ Smolander et al., 1991 ] <author> K. Smolander, K. Lyytinen, V-P. Tahvanainen, and P. Marttiin. MetaEdit: </author> <title> A Flexible Graphical Environment for Methodology Modelling. </title> <editor> In R. Andersen, J.A. Bubenko, and A. Stlvberg, editors, </editor> <booktitle> Proceedings of the Third International Conference CAiSE'91 on Advanced Information Systems Engineering, volume 498 of Lecture Notes in Computer Science, </booktitle> <pages> pages 168-193, </pages> <address> Trondheim, Norway, May 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Even a tool that supports the modification of meta-models exists (MetaEdit <ref> [ Smolander et al., 1991 ] </ref> ). <p> State-of-the-art meta-modelling techniques, as described in [ Araujo and Carapu~ca, 1992 ] , [ Heym and Osterle, 1992 ] , [ Brinkkemper, 1990 ] , and <ref> [ Smolander et al., 1991 ] </ref> , are not fully suited for this purpose. They do not have sufficient expressive power to capture information modelling concepts and relations between these concepts, and tend to neglect the modelling process.
Reference: [ Sorenson et al., 1988 ] <author> P.G. Sorenson, J.-P. Tremblay, and A.J. McAllister. </author> <title> The Metaview System for Many Specification Environments. </title> <journal> IEEE Software, </journal> <pages> pages 30-38, </pages> <month> March </month> <year> 1988. </year>
Reference-contexts: The concept of a CASE shell is not new. Commercial products such as Toolbuilder of IPSYS Software, Virtual Software Factory of Systematica and MetaDesign of Meta Software Corporation or academic products such as RAMATIC [ Bergsten et al., 1989 ] , Metaview <ref> [ Sorenson et al., 1988 ] </ref> and MetaPlex [ Chen and Nunamaker Jr, 1989 ] , claim to generate CASE tools tailored to specific methods and organisations. Even a tool that supports the modification of meta-models exists (MetaEdit [ Smolander et al., 1991 ] ).
Reference: [ Sutcliffe et al., 1989 ] <author> A.G. Sutcliffe, W.J. Black, and P. Loucopoulos. </author> <title> System Specification Semantics: Defining the knowledge captured by structured system development methods in conceptual models. </title> <editor> In E.D. Falkenberg and P. Lindgreen, editors, </editor> <booktitle> Information Systems Concepts: an In-depth Analysis, </booktitle> <pages> pages 53-77, </pages> <address> Amsterdam, The Netherlands, 1989. </address> <publisher> North-Holland. </publisher>
Reference-contexts: The third dichotomy concerns the difference between conceptual and graphical knowledge. Evidently, models must be represented in one way or another: diagrams, matrices, tables, lists, and program specifications are examples. A clear distinction should be made between the modelling concepts and their external notation. In <ref> [ Sutcliffe et al., 1989 ] </ref> it is argued that some methods allow alternative equivalent notations for one and the same modelling concept, but that on the other hand similar graphical and textual topologies can represent different types of modelling concepts.
Reference: [ Verhoef et al., 1991 ] <author> T.F. Verhoef, A.H.M. ter Hofstede, and G.M. Wijers. </author> <title> Structuring modelling knowledge for CASE shells. </title> <editor> In R. Andersen, J.A. Bubenko, and A. Stlvberg, editors, </editor> <booktitle> Proceedings of the Third International Conference CAiSE'91 on Advanced Information Systems Engineering, volume 498 of Lecture Notes in Computer Science, </booktitle> <pages> pages 502-524, </pages> <address> Trondheim, Norway, May 1991. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: For example, by not paying attention to the modelling process or by not paying attention to representational aspects. This approach has been used in the development of all "state-of-the-art" meta-modelling techniques mentioned in section 1. None of these techniques address the modelling process. In <ref> [ Verhoef et al., 1991 ] </ref> , the modelling process has been addressed. This reference, however, neglects the representational aspects of information modelling. A more promising approach would be to exchange complete freedom for "controlled flexibility".
Reference: [ Verhoef, 1991 ] <author> T.F. Verhoef. </author> <title> Structuring Yourdon's Modern Structured Analysis. </title> <editor> In V.-P. Tah-vanainen and K. Lyytinen, editors, </editor> <booktitle> Proceedings of the Second Workshop on the Next Generation of CASE Tools, </booktitle> <pages> pages 219-313, </pages> <address> Trondheim, Norway, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Additionally, the modelling knowledge as it is prescribed in the Yourdon method handbook of [ Yourdon, 1989 ] has been represented, in order to compare the individual experts to their stick of reference. These results are presented in detail in <ref> [ Verhoef, 1991 ] </ref> and [ Verhoef, 1993 ] , for the Yourdon meta-model as-it-should-be-applied, and 19 for the six meta-models as-they-have-been-applied, respectively. The next section summarises the main observations. 4.2 Results This section discusses the insights gained in prescribed and applied modelling knowledge, based upon these seven meta-models.
Reference: [ Verhoef, 1993 ] <author> T.F. Verhoef. </author> <title> Effective Information Modelling Support. </title> <type> PhD thesis, </type> <institution> Delft University of Technology, Delft, </institution> <address> The Netherlands, </address> <year> 1993. </year>
Reference-contexts: This section discusses our approach towards getting insight in information modelling processes in practice, and discusses the insight gained. For a detailed discussion of both the approach and the results, see <ref> [ Verhoef, 1993 ] </ref> . 4.1 Approach To achieve insight in individual information modelling processes, we have observed the behaviour of several information engineers in practice. To structure this observation process, we have developed an approach for the acquisition of information modelling knowledge which is based upon several starting points. <p> Finally, the resulting text-based model is transformed into a meta-model during the con-ceptualisation task. This approach has been developed for a more general purpose, see [ Wijers, 1991 ] , and has been refined for the purpose of this paper in <ref> [ Verhoef, 1993 ] </ref> . This observation study has involved three expert information engineers. Selection of these experts has taken place according to a number of requirements. <p> Finally, the problem owners should be able to be available whilst the information modelling task is being dealt with. Particulars on the real-life cases can be found in <ref> [ Verhoef, 1993 ] </ref> . These six modelling knowledge sessions have taken place in the experimental setting of figure 21. Thus, the modelling knowledge acquisition approach has been applied six times, resulting in six protocol transcripts. <p> Additionally, the modelling knowledge as it is prescribed in the Yourdon method handbook of [ Yourdon, 1989 ] has been represented, in order to compare the individual experts to their stick of reference. These results are presented in detail in [ Verhoef, 1991 ] and <ref> [ Verhoef, 1993 ] </ref> , for the Yourdon meta-model as-it-should-be-applied, and 19 for the six meta-models as-they-have-been-applied, respectively. The next section summarises the main observations. 4.2 Results This section discusses the insights gained in prescribed and applied modelling knowledge, based upon these seven meta-models.
Reference: [ Welke, 1988 ] <author> R.J. Welke. </author> <title> The CASE Repository: More than another database application. </title> <booktitle> In Proceedings of 1988 INTEC Symposium Systems Analysis and Design: A Research Strategy, </booktitle> <address> Atlanta, Georgia, </address> <year> 1988. </year> <month> 25 </month>
Reference-contexts: Schema types are particularly important for meta-modelling as they allow for a natural representation of decomposition constructs in modelling techniques. The importance of schema types has also been stressed by <ref> [ Welke, 1988 ] </ref> (although the term window type is used). 3.1.3 Object inheritance PSM offers two representation mechanisms for the representation of inheritance of properties between modelling concepts: specialisation and generalisation.
Reference: [ Wijers and Dort, 1990 ] <author> G.M. Wijers and H.E. van Dort. </author> <title> Experiences with the use of CASE--tools in the Netherlands. </title> <editor> In B. Steinholz, A. Stlvberg, and L. Bergman, editors, </editor> <booktitle> Proceedings of the Second Nordic Conference CAiSE'90 on Advanced Information Systems Engineering, volume 436 of Lecture Notes in Computer Science, </booktitle> <pages> pages 5-20, </pages> <address> Stockholm, Sweden, May 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: Adequate support of these phases is therefore imperative. CASE tools supporting the early phases of systems development are referred to as upper CASE tools. Upper CASE tools tend to be strongly product oriented, as confirmed by the study of <ref> [ Wijers and Dort, 1990 ] </ref> and more recently [ Kusters and Wijers, 1992 ] . These studies among Dutch users of CASE tools concluded that these tools are mainly used for documentation and verification purposes.
Reference: [ Wijers and Heijes, 1990 ] <author> G.M. Wijers and H. Heijes. </author> <title> Automated Support of the Modelling Process: A view based on experiments with expert information engineers. </title> <editor> In B. Steinholz, A. Stlvberg, and L. Bergman, editors, </editor> <booktitle> Proceedings of the Second Nordic Conference CAiSE'90 on Advanced Information Systems Engineering, volume 436 of Lecture Notes in Computer Science, </booktitle> <pages> pages 88-108, </pages> <address> Stockholm, Sweden, 1990. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: However, all these shells focus on the support of modelling techniques and hardly pay attention to the modelling process (the importance of which is stressed in [ Knuth et al., 1986 ] , [ Potts, 1989 ] , <ref> [ Wijers and Heijes, 1990 ] </ref> , and [ Lockemann and Mayr, 1986 ] , among others). Furthermore, the degree of support of modelling techniques which they offer is limited, due to the low expressive power of the meta-modelling techniques used.
Reference: [ Wijers, 1991 ] <author> G.M. Wijers. </author> <title> Modelling Support in Information Systems Development. </title> <type> PhD thesis, </type> <institution> Delft University of Technology, Delft, </institution> <address> The Netherlands, </address> <year> 1991. </year>
Reference-contexts: Empirical studies reported in the literature (e.g. [ Guindon, 1990a ] , [ Guindon, 1990b ] , [ Ballay, 1987 ] , <ref> [ Wijers, 1991 ] </ref> and [ Bansler and Btdker, 1993 ] ) show that information modelling knowledge as applied by experienced information engineers turns out to deviate from modelling knowledge described in textbooks, regarding both modelling concepts and the way models using these concepts are constructed. <p> In other words, both questions "what should be produced?" and "how should it be produced?" should 3 be answered. In <ref> [ Wijers, 1991 ] </ref> , the process side is referred to as the way of working , while the product side is referred to as the way of modelling . Knowledge about information modelling processes is structured by several key concepts. <p> Specific textual fragments in the protocol transcript are marked during the interpretation task, e.g. as "decision", "modelling concept", or "modelling 18 task". Finally, the resulting text-based model is transformed into a meta-model during the con-ceptualisation task. This approach has been developed for a more general purpose, see <ref> [ Wijers, 1991 ] </ref> , and has been refined for the purpose of this paper in [ Verhoef, 1993 ] . This observation study has involved three expert information engineers. Selection of these experts has taken place according to a number of requirements.
Reference: [ Yourdon, 1986 ] <author> E. Yourdon. </author> <title> What ever happened to structured analysis. </title> <journal> Datamation, </journal> <pages> pages 133-138, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: Such methods depend on the availability of automated tools, because manual verification of the required consistency between various specifications would be difficult. In [ Butler Cox, 1987 ] and <ref> [ Yourdon, 1986 ] </ref> , techniques such as entity-relationship diagrams, dataflow diagrams, and structured English are described as tedious, time-consuming, and even impractical , if their use is not supported by automated tools.
Reference: [ Yourdon, 1989 ] <author> E. Yourdon. </author> <title> Modern Structured Analysis. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year> <month> 26 </month>
Reference-contexts: Examples can be found in the meta-model of Yourdon DFDs presented in figure 11. This meta-model also demonstrates the need for the many type construction mechanisms in PSM. First the DFD concepts which appear in this meta-model are clarified. According to <ref> [ Yourdon, 1989 ] </ref> , a DFD pictures a system as a network of functional processes. The main components of a DFD are processes, flows, data stores, and terminators. A process transforms input into output. Processes have a process specification or are decomposed into a DFD. <p> In figure 12 the task named H can only start when the tasks with names C and G have terminated. As a concrete example of a task structure, consider figure 13. This task structure models the overall way of working of the Yourdon method <ref> [ Yourdon, 1989 ] </ref> . This structure is self-explanatory. The decomposition of the task "Perform database conversion if necessary" is shown in figure 14. From this decomposition, it follows that a database conversion only has to be performed if a current database exists. <p> These three criteria supported the choice of the Yourdon method <ref> [ Yourdon, 1989 ] </ref> . The modelling knowledge acquisition approach aims at acquiring a detailed understanding, in particular of applied modelling knowledge. This approach consists of four tasks: preparation, elicitation, conceptualisation, and interpretation, see figure 20. <p> Thus, the modelling knowledge acquisition approach has been applied six times, resulting in six protocol transcripts. The interpretation task has led to six text-based models, which, finally, have been transformed into six meta-models. Additionally, the modelling knowledge as it is prescribed in the Yourdon method handbook of <ref> [ Yourdon, 1989 ] </ref> has been represented, in order to compare the individual experts to their stick of reference. These results are presented in detail in [ Verhoef, 1991 ] and [ Verhoef, 1993 ] , for the Yourdon meta-model as-it-should-be-applied, and 19 for the six meta-models as-they-have-been-applied, respectively.
References-found: 45

