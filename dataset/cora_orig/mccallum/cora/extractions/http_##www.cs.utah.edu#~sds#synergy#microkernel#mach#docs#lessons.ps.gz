URL: http://www.cs.utah.edu/~sds/synergy/microkernel/mach/docs/lessons.ps.gz
Refering-URL: http://www.cs.utah.edu/~sds/synergy/microkernel/mach/docs.html
Root-URL: 
Degree: Authenticated by Approved by  
Address: 2675 Long Lake Road Roseville, Minnesota 55113  
Affiliation: Secure Computing Corporation  
Date: 27 June 1997  
Note: Part Number 87-0902025A006 Version Date  DTOS LESSONS LEARNED REPORT CONTRACT NO. MDA904-93-C-4209 CDRL SEQUENCE NO. A008 Prepared for: Maryland Procurement Office Prepared by:  (Contracting Agency) (Contractor) Date Date Distribution limited to U.S. Government Agencies Only. This document contains NSA information (27 June 1997). Request for the document must be referred to the Director, NSA. Not releasable to the Defense Technical Information Center per DOD Instruction 3200.12. c Copyright, 1993, Secure Computing Corporation. All Rights Reserved. This material may be reproduced by or for the U.S. Government pursuant to the copyright license under the clause at DFARS 252.227-7013 (OCT.88).  
Abstract-found: 0
Intro-found: 0
Reference: [1] <author> Mart in Abadi, Michael Burrows, Butler Lampson, and Gordon Plotkin. </author> <title> A calculus for access control in distributed systems. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 15(4) </volume> <pages> 706-734, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Another way to control changes is to include the ACL as part of the object and to make changing the ACL one of the controlled accesses. Variations to the IBAC policies include groups, roles, negative accesses, and delegation <ref> [1] </ref>. In the simplest case, a group is a set of individuals and accesses are authorized for groups rather than individuals. <p> This facility is provided using principals `B for A', where B and A are principals. The ability to become this principal is restricted to B and requires the permission of A. Also, delegated permissions should expire after some time limit, possibly defined when the delegation occurs. Abadi et al. <ref> [1] </ref> have created an access control calculus that includes groups, roles, and delegation. It also allows for operations that require permission from multiple principals.
Reference: [2] <author> Mart n Abadi and Leslie Lamport. </author> <title> Conjoining specifications. </title> <type> Technical Report 118, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: Only now, we have a precise definition of what the proven theorem claims about the implementation. 87-0902025A006 1.20, 27 June 1997 Secure Computing Corporation CAGE Code 0HDC7 CDRL A008 Lessons Report 85 Section 9 Composability Study The Composability Study report describes a variation of Lamport's TLA specification language <ref> [2] </ref> and provides a framework for composition of specifications based on the work of Abadi and Lamport [2] and Shankar [88]. Composition is a technique for constructing more complex specifications by building upon simpler specifications. <p> implementation. 87-0902025A006 1.20, 27 June 1997 Secure Computing Corporation CAGE Code 0HDC7 CDRL A008 Lessons Report 85 Section 9 Composability Study The Composability Study report describes a variation of Lamport's TLA specification language <ref> [2] </ref> and provides a framework for composition of specifications based on the work of Abadi and Lamport [2] and Shankar [88]. Composition is a technique for constructing more complex specifications by building upon simpler specifications. Viewed from the other direction, the composition framework allows the specification and verification of a complex system to be decomposed into the specification and verification of simpler components. <p> This has resulted in a general framework that can be used in analyzing and comparing other approaches. Finally, although our framework was inspired by the work of Abadi and Lamport <ref> [2] </ref> and Shankar [88] we have not merely incorporated their results as axioms of our composition framework. The framework has been built from basic definitions of concepts such as component and behavior using a mechanical proof checker (PVS).
Reference: [3] <author> Marshall D. Abrams. </author> <title> Renewed understanding of access control policies. </title> <booktitle> In Proceedings 16th National Computer Security Conference, </booktitle> <pages> pages 87-96, </pages> <address> Baltimore, MD, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: This discretionary aspect of an IBAC policy can be eliminated by using an Originator Controlled (ORCON) policy <ref> [3] </ref>. With an ORCON policy [37, 43], the allowed accesses for an object are used to determine the allowed accesses for any object derived from it (shared memory segments must be treated as objects in this policy). In the simplest version, each process has a Propagated Access Control List (PACL). <p> This discretionary aspect of an IBAC policy can be eliminated by using an ORCON policy <ref> [3] </ref>. With an ORCON policy, only those processes allowed to read an object are able to read from any objects that may have been derived from that object.
Reference: [4] <author> D. Elliott Bell and Leonard J. La Padula. </author> <title> Secure computer systems: Mathematical foundations and model. </title> <type> Technical Report M74-244, </type> <institution> The MITRE Corporation, </institution> <month> May </month> <year> 1973. </year>
Reference-contexts: Each access is classified as a read and/or a write. The Bell-LaPadula version of MLS policies <ref> [4] </ref> allows a process to perform a read access only if its level dominates that of the object, and a write access only if its level is dominated by that of the object. <p> Each subject is assigned a level representing its level of trust and each object is assigned a level representing the sensitivity of the information that it contains. Each access is classified as a read and/or a write. The Bell-LaPadula version of MLS <ref> [4] </ref> allows a subject to perform a read access only if its level dominates that of the object, and a write access only if its level is dominated by that of the object.
Reference: [5] <author> Terry C. Vickers Benzel, E. John Sebes, and Homayoon Tajalli. </author> <title> Identification of subjects and objects in a trusted extensible client server architecture. </title> <booktitle> In Proceedings of the 1995 National Information Systems Security Conference, </booktitle> <pages> pages 83-99, </pages> <year> 1995. </year>
Reference-contexts: Two microkernel systems designed to meet DoD multilevel security policies, KeyKOS/KeySAFE [34, 40] and Trusted Mach <ref> [93, 5] </ref>, have kernels which provide essentially the minimal amount of security function required to meet the policies for which they were designed, while still remaining free of any explicit dependencies on the particular policy.
Reference: [6] <author> Brian Bershad, Stefan Savage, Przemyslaw Pardyak, Emin Gun Sirer, David Becker, Marc Fiuczynski, Craig Chambers, and Susan Eggers. </author> <title> Extensibility, safety and performance in the SPIN operating system. </title> <booktitle> In Proceedings of the 15th ACM Symposium on Operating System Principles, </booktitle> <pages> pages 267-284, </pages> <month> December </month> <year> 1995. </year>
Reference-contexts: If other systems are considered, the criteria would probably need to be expanded. This is especially true of systems which rely upon very different processing or security models, such as SPIN <ref> [6] </ref>. The security criteria do not consider some categories of criteria which are very important to secure systems, generally because of the lack of documentation (or implementation) of the relevant features in any of the systems studied.
Reference: [7] <author> Brian N. Bershad, Richard P. Draves, and Alessandro Forin. </author> <title> Using microbenchmarks to evaluate system performance. </title> <booktitle> In Proceedings of the Third Workshop on Workstation Operating Systems, </booktitle> <pages> pages 148-153, </pages> <year> 1992. </year>
Reference-contexts: This made it impossible to gain any insight into actual impact of the DTOS changes. The cause of these inconsistencies was unclear, though a paper by Brian Bershad, et al <ref> [7] </ref> suggests several reasons why it may be difficult to achieve consistent and meaningful microtest results.
Reference: [8] <author> William R. Bevier, Richard M. Cohen, and William D. Young. </author> <title> Connection policies and controlled interference. </title> <booktitle> In Proceedings of the 8th Computer Security Foundations Workshop, </booktitle> <month> June </month> <year> 1995. </year>
Reference-contexts: valuable to control not only the subjects but the particular objects through which information flows from one subject to another. 87-0902025A006 1.20, 27 June 1997 Secure Computing Corporation CAGE Code 0HDC7 CDRL A008 Lessons Report 123 An alternative definition of noninterference which begins to address this issue is presented in <ref> [8] </ref>. The proposed algorithm does not directly support this alternative definition, though it may be possible to support it through a somewhat more complicated algorithm.
Reference: [9] <author> William R. Bevier and Lawrence M. Smith. </author> <title> A mathematical model of the Mach kernel: Atomic actions and locks. </title> <type> Technical report, </type> <institution> Computational Logic, Incorporated, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: Mach specifications written by Computational Logic, Incorporated (CLI) <ref> [11, 12, 9, 10] </ref> The DTMach FTLS [65], which was written based upon some of the previous documenta tion. These sources turned out to be completely inadequate, as the documentation was incomplete, and more seriously, sometimes inaccurate. In retrospect, neither of these inadequacies are surprising.
Reference: [10] <author> William R. Bevier and Lawrence M. Smith. </author> <title> A mathematical model of the Mach kernel: Entities and relations. </title> <type> Technical report, </type> <institution> Computational Logic, Incorporated, </institution> <month> February </month> <year> 1993. </year>
Reference-contexts: Mach specifications written by Computational Logic, Incorporated (CLI) <ref> [11, 12, 9, 10] </ref> The DTMach FTLS [65], which was written based upon some of the previous documenta tion. These sources turned out to be completely inadequate, as the documentation was incomplete, and more seriously, sometimes inaccurate. In retrospect, neither of these inadequacies are surprising.
Reference: [11] <author> William R. Bevier and Lawrence M. Smith. </author> <title> A mathematical model of the Mach kernel. </title> <type> Technical report, </type> <institution> Computational Logic, Incorporated, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: Mach specifications written by Computational Logic, Incorporated (CLI) <ref> [11, 12, 9, 10] </ref> The DTMach FTLS [65], which was written based upon some of the previous documenta tion. These sources turned out to be completely inadequate, as the documentation was incomplete, and more seriously, sometimes inaccurate. In retrospect, neither of these inadequacies are surprising.
Reference: [12] <author> William R. Bevier and Lawrence M. Smith. </author> <title> A mathematical model of the Mach kernel: Kernel requests. </title> <type> Technical report, </type> <institution> Computational Logic, Incorporated, </institution> <month> August </month> <year> 1994. </year>
Reference-contexts: Mach specifications written by Computational Logic, Incorporated (CLI) <ref> [11, 12, 9, 10] </ref> The DTMach FTLS [65], which was written based upon some of the previous documenta tion. These sources turned out to be completely inadequate, as the documentation was incomplete, and more seriously, sometimes inaccurate. In retrospect, neither of these inadequacies are surprising.
Reference: [13] <author> K. J. Biba. </author> <title> Integrity considerations for secure computer systems. </title> <type> Technical Report TR-3153, </type> <institution> Mitre Corp., Bedford, </institution> <address> MA, </address> <year> 1977. </year> <note> Also available through Nat'l Technical Information Service, Springfield, Va., Report No. NTIS AD-A039324. Secure Computing Corporation CAGE Code 0HDC7 87-0902025A006 1.20, 27 June 1997 136 CDRL A008 Bibliography </note>
Reference-contexts: Data from sources known to be reliable have greater integrity than rumors. Integrity policies proposed by Biba <ref> [13] </ref> and by Clark and Wilson [19] have been especially well studied. The Biba policy is based on the premise that the integrity of the output from an execution can be no better than the integrity of the inputs and of the code.
Reference: [14] <author> Kirk Joseph Bittler. </author> <title> A policy-independent secure X server. </title> <type> Master's thesis, </type> <institution> Portland State University, </institution> <year> 1997. </year>
Reference-contexts: At least three of these sites had significant active development efforts, including an RBAC project at NIST 8 , a secure X Window System at Portland State University <ref> [14, 23] </ref>, and a secure database management system at Penn State University [57, 56]. DTOS was also used as a platform for class projects at Penn State University in a graduate level computer security class.
Reference: [15] <author> W. E. Boebert and R. Y. Kain. </author> <title> A practical alternative to hierarchical integrity policies. </title> <booktitle> In Proceedings 8th National Computer Security Conference, </booktitle> <pages> pages 18-27, </pages> <address> Gaithersburg, MD, </address> <month> October </month> <year> 1985. </year>
Reference-contexts: In the purchasing department example, any of the processes could record the arrival of an invoice. However, if a supervisor did so, it could not then also authorize payment; another supervisor would have to do this. 10.1.3 Type Enforcement Another form of access control policy is Type Enforcement <ref> [15, 52] </ref>. Allowed accesses are specified with a Domain Definition Table (DDT), which is a coarse version of the access control matrix in which objects that have equal access privileges are clustered into groups called types and the principals that have equal access privileges are clustered into groups called domains. <p> if either it is permitted by both the MLS and type enforcement policies (as in the simple combination), or trusted write is permitted by the type enforcement policy (a trusted write is only allowed to those processes with the authority to declassify information or to extract nonsensitive from sensitive information) <ref> [15, 52] </ref>. This is an example of a policy in which permission in one subpolicy overrides lack of permission in another subpolicy. Another form of combination is to use different policies for different objects. <p> The Bell-LaPadula version of MLS [4] allows a subject to perform a read access only if its level dominates that of the object, and a write access only if its level is dominated by that of the object. In Type Enforcement <ref> [15, 52] </ref>, allowed accesses are specified with a Domain Definition Table (DDT), which is a coarse version of the access control matrix in which objects that have equal access privileges are clustered into groups called types and the environments, that may represent a cluster of individuals, are called domains.
Reference: [16] <author> Thomas C. Bressoud and Fred B. Schneider. </author> <title> Hypervisor-based fault tolerance. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 14(1) </volume> <pages> 80-107, </pages> <month> February </month> <year> 1996. </year>
Reference-contexts: Assessing tradeoffs between different mechanisms for implementing policy changes. Hypervisors for Security and Robustness (August 1996 to present) This program explores a concept similar to that of a hypervisor in the work of Bressoud and Schneider <ref> [16] </ref>, but implements the hypervisor on top of an operating system kernel rather than on top of the hardware. These kernel hypervisors are constructed from wrappers placed around system calls for selected system components.
Reference: [17] <author> David F. C. Brewer and Michael J. Nash. </author> <title> The Chinese wall security policy. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 206-214, </pages> <address> Oakland, CA, </address> <month> May </month> <year> 1989. </year>
Reference-contexts: However, when the capability is delivered to a process that is allowed to amplify its rights, the recipient can gain the needed permissions. 10.1.7 Chinese Wall A Chinese Wall policy constrains accesses based on the history of previous accesses <ref> [17] </ref>. It was motivated by the need to restrict insider information, such as using knowledge about one firm's activities in the analysis of a competitor's best course of action. It can also be used for cases in which an aggregate of information is more sensitive than individual pieces [46].
Reference: [18] <author> Maureen Harris Cheheyl, Morrie Gasser, George A. Huff, and Jonathan K. Millen. </author> <title> Verifying security. </title> <journal> ACM Computing Surveys, </journal> <volume> 13(3) </volume> <pages> 279-339, </pages> <month> September </month> <year> 1981. </year>
Reference-contexts: Thus, unreliable data with integrity levels high in the lattice cannot be used by a reliable computation with an integrity level low in the lattice. Likewise, an unreliable computation cannot produce reliable data. Related to this is a Low-Water-Mark policy <ref> [18] </ref> in which the level of an object of lowered when it is written to that of the writer. Another form of integrity policy was defined by Clark and Wilson [19].
Reference: [19] <author> David D. Clark and David R. Wilson. </author> <title> A comparison of commercial and military computer security policies. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 184-194, </pages> <address> Oakland, CA, </address> <month> April </month> <year> 1987. </year>
Reference-contexts: Data from sources known to be reliable have greater integrity than rumors. Integrity policies proposed by Biba [13] and by Clark and Wilson <ref> [19] </ref> have been especially well studied. The Biba policy is based on the premise that the integrity of the output from an execution can be no better than the integrity of the inputs and of the code. <p> Likewise, an unreliable computation cannot produce reliable data. Related to this is a Low-Water-Mark policy [18] in which the level of an object of lowered when it is written to that of the writer. Another form of integrity policy was defined by Clark and Wilson <ref> [19] </ref>. These policies guarantee that a protected object, known as a Constrained Data Item (CDI), can only be modified by a well-formed transaction, known as a Transformation Procedure (TP). <p> The concept of the well-formed transaction is that a user should not manipulate data arbitrarily, but only in constrained ways that preserve or ensure the integrity of the data. <ref> [19, p. 186] </ref> Each of these TPs corresponds to an access and the set of TPs that may be applied to a particular CDI defines its type. Another goal of some integrity policies is separation of duty in which different subparts of an operation are executed by different processes.
Reference: [20] <author> Ellis Cohen and David Jefferson. </author> <title> Protection in the Hydra operating system. </title> <booktitle> In Proceedings of the Fifth Symposium on Operating Systems Principles, Operating Systems Review 9,5, </booktitle> <pages> pages 141-160, </pages> <address> Austin, TX, </address> <month> November </month> <year> 1975. </year>
Reference-contexts: Each element in an environment is called a capability and consists of an object identifier and a set of accesses (referred to as rights) <ref> [20, 39] </ref>. An access to an object is allowed if the process's environment contains a capability with that object and the desired access. Included in the accesses are controls on the use and transfer of the capability. <p> Other controls can be set before one process passes a copy to another process. Capability systems can be enhanced with rights amplification, which provides a means of implementing protected subsystems <ref> [20, 39] </ref>. For example, assume that a file system process provides support for a virtual memory.
Reference: [21] <author> Judy Crow, Sam Owre, Natarajan Shankar, and Mandayam Srivas. </author> <title> A tutorial introduction to PVS. </title> <booktitle> Presented at WIFT '95: Workshop on Industrial-Strength Formal Specification Techniques, </booktitle> <address> Boca Raton, Florida, </address> <month> April </month> <year> 1995. </year> <note> Available from the WEB page WWW://www.csl.sri.com/sri-csl-fm.html. </note>
Reference-contexts: Since no sufficient theorem prover had been found for Z (Z/Eves was not even available yet), and PVS <ref> [55, 21] </ref> was already familiar to Secure Computing through its use on other programs, it was chosen for use in the composability study. PVS was designed from the beginning to support efficient mechanized proofs as the primary goal.
Reference: [22] <author> Dorothy E. Denning. </author> <title> A lattice model of secure information flow. </title> <journal> Communications of the ACM, </journal> <volume> 19(5) </volume> <pages> 236-243, </pages> <month> May </month> <year> 1976. </year>
Reference-contexts: The set of objects depends on the system and may include such things as memory, files, message buffers, and processes. 10.1.1 MLS A MultiLevel Secure (MLS) policy is defined using a lattice of levels <ref> [22] </ref>. Level a is said to dominate, or be greater than, level b if a is higher than or the same as b in the lattice. <p> In this section we summarize these three policies and outline the conclusions of the GSPS regarding the level of support provided by DTOS for each. 10.3.1 MLS/TE A MultiLevel Secure (MLS) policy is defined using a lattice of levels <ref> [22] </ref>. The lattice defines a partial ordering on levels called a dominance relation. Each subject is assigned a level representing its level of trust and each object is assigned a level representing the sensitivity of the information that it contains. Each access is classified as a read and/or a write.
Reference: [23] <institution> Department of Computer Science, Portland State University. </institution> <month> DX: </month> <title> A Secure Window System User's Manual, </title> <month> February </month> <year> 1997. </year>
Reference-contexts: At least three of these sites had significant active development efforts, including an RBAC project at NIST 8 , a secure X Window System at Portland State University <ref> [14, 23] </ref>, and a secure database management system at Penn State University [57, 56]. DTOS was also used as a platform for class projects at Penn State University in a graduate level computer security class.
Reference: [24] <author> Francois Barbou des Places, Phillippe Bernadat, G. N. Madhusudan, Yves Paindaveine, and Nick Stephen. </author> <title> OSF Microkernel Performance Test Suite. </title> <institution> OSF Research Institute, </institution> <month> April </month> <year> 1996. </year>
Reference-contexts: However, Bershad and David Black have both reported success in obtaining consistent results in microtesting of Mach, and OSF has even released a suite of microtests for its Mach kernel <ref> [24] </ref>. 4.2.2 Baseline Reestablished for Every Release The DTOS prototype was developed as a series of releases marking incremental change to the CMU Mach microkernel. Performance testing was performed on each release with the goal of measuring the effect of each relatively small set of kernel modifications.
Reference: [25] <author> David F. Ferraiolo, Janet A. Cugini, and D. Richard Kuhn. </author> <title> Role-Based Access Control (RBAC): Features and motivations. </title> <booktitle> In Proceedings of the Eleventh Annual Computer Security Applications Conference, </booktitle> <month> December </month> <year> 1995. </year>
Reference-contexts: Efforts to expand support for dynamic policies should have two elements, though they can each be pursued somewhat independently: Development of a security server to implement dynamic policies. Perhaps the best candidates for dynamic policies to implement are dynamic role based access control (RBAC) policies <ref> [25] </ref>, because these policies are of interest to many people and because RBAC policies integrate very well with type enforcement, which has been implemented in the DTOS prototype security server.
Reference: [26] <author> Todd Fine. </author> <title> Constructively using noninterference to analyze systems. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 162-169, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: A covert channel analysis by its very nature requires implementation details that may be uninteresting for most other uses. Based upon Secure Computing's earlier experience with covert channel analysis for the LOCK system <ref> [29, 26] </ref>, the philosophy adopted for the DTOS FTLS was to model the state to include enough detail so that the exact output of any request is completely determined by that state in combination with inputs to the request. In only a few places was this approach abandoned. <p> Among the other requirements, tradeoffs are possible and probably necessary. For example, if an algorithm can be automated, then the desire to reuse the results of earlier analysis is not as strong. The starting point for developing such an algorithm was <ref> [26] </ref>, which presents an algorithm meeting these requirements (other than policy flexibility) for noninterference analysis of a multilevel security policy. For DTOS, this algorithm was adapted to work with the general noninterference framework (see Section 5.2 of [82]). <p> If no such operation exists, then the algorithm will still be successful since this decision will never need to be made. However, it is also possible to remove this problem altogether by revising the algorithm to more closely resemble the algorithm in <ref> [26] </ref>. Such a change solves the automation problem but also requires introduction of the security policy into the algorithm at an earlier stage, so that the algorithm is less policy independent.
Reference: [27] <author> Todd Fine. </author> <title> Defining noninterference in the temporal logic of actions. </title> <booktitle> In IEEE Symposium on Research in Security and Privacy, </booktitle> <pages> pages 12-21, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: It begins with a discussion of the basic architecture and the control philosophy for DTOS. It describes the structure of the security policy document, and discusses the range of policies supportable by DTOS. Defining Noninterference in the Temporal Logic of Actions <ref> [27] </ref> This paper is an output of the DTOS Composability Study. It describes an approach for using Lamport's Temporal Logic of Actions to specify noninterference properties.
Reference: [28] <author> Todd Fine. </author> <title> A framework for composition. </title> <booktitle> In Proceedings of the Eleventh Annual Conference on Computer Assurance, </booktitle> <pages> pages 199-212, </pages> <month> June </month> <year> 1996. </year>
Reference-contexts: Finally, this paper discusses how prior work on specification refinement and composition might be applied to the noninterference problem within the framework provided by TLA. A Framework for Composition <ref> [28] </ref> This paper is also an output of the DTOS Composabil-ity Study. It describes an interim version of the composability framework developed as part of the study.
Reference: [29] <author> Todd Fine, J. Thomas Haigh, Richard C. O'Brien, and Dana L. Toups. </author> <title> Noninterference and unwinding for LOCK. </title> <booktitle> In Proceedings of Computer Security Foundations Workshop II, </booktitle> <pages> pages 22-28, </pages> <month> June </month> <year> 1989. </year> <note> 87-0902025A006 1.20, 27 June 1997 Secure Computing Corporation CAGE Code 0HDC7 CDRL A008 Lessons Report 137 </note>
Reference-contexts: A covert channel analysis by its very nature requires implementation details that may be uninteresting for most other uses. Based upon Secure Computing's earlier experience with covert channel analysis for the LOCK system <ref> [29, 26] </ref>, the philosophy adopted for the DTOS FTLS was to model the state to include enough detail so that the exact output of any request is completely determined by that state in combination with inputs to the request. In only a few places was this approach abandoned.
Reference: [30] <author> Todd Fine, J. Thomas Haigh, Richard C. O'Brien, and Dana L. Toups. </author> <title> Noninterference and unwinding for LOCK. </title> <booktitle> In Proceedings of Computer Security Foundations Workshop II, </booktitle> <pages> pages 22-28, </pages> <address> Franconia, NH, </address> <month> June </month> <year> 1989. </year> <note> IEEE. </note>
Reference-contexts: The advantage to a noninterference formulation is that the policy can be stated formally and a model of the system can be proved to satisfy the policy. Several versions, differing in what having an effect on what can be seen formally means, have been given <ref> [30, 44, 45] </ref>. There seems to be general agreement, however, that the formalization must be composable in that if two systems are both noninterfering, then the larger system formed by composing them also is noninterfering [44]. 10.2 Security Policy Lattice In this section we describe a lattice of security policies.
Reference: [31] <author> David Finkel, Robert E. Kinicki, Aju John, Bradford Nichols, and Somesh Rao. </author> <title> Developing benchmarks to measure the performance of the Mach operating system. </title> <booktitle> In Proceedings of the USENIX Mach Workshop, </booktitle> <pages> pages 83-100, </pages> <year> 1990. </year>
Reference-contexts: an overview of the results of the performance testing and discusses some of the difficult problems that were encountered during the testing. 4.1 Testing Methodology and Results System performance was measured in two ways: with a Mach performance test suite developed at the Worcester Polytechnic Institute (WPI) Computer Science Department <ref> [31, 32] </ref>, and a simple kernel compilation test. The latter measures system time to compile the IPC portion of the Mach kernel. All tests were executed on a PC-clone with a 486DX2-66MHZ processor, 8 MB of memory and a 1 GB SCSI disk.
Reference: [32] <author> David Finkel, Robert E. Kinicki, Jonas A. Lehmann, and Joseph CaraDonna. </author> <title> Comparisons of distributed operating system performance using the WPI benchamark suite. </title> <type> Technical Report WPI-CS-TR-92-2, </type> <institution> Worchester Polytechnic Institute, Worcester, </institution> <address> MA 10609, </address> <year> 1992. </year>
Reference-contexts: an overview of the results of the performance testing and discusses some of the difficult problems that were encountered during the testing. 4.1 Testing Methodology and Results System performance was measured in two ways: with a Mach performance test suite developed at the Worcester Polytechnic Institute (WPI) Computer Science Department <ref> [31, 32] </ref>, and a simple kernel compilation test. The latter measures system time to compile the IPC portion of the Mach kernel. All tests were executed on a PC-clone with a 486DX2-66MHZ processor, 8 MB of memory and a 1 GB SCSI disk.
Reference: [33] <author> Bryan Ford and Mike Hibler. </author> <title> Fluke Version 2.1 Application Programming Interface Reference (DRAFT). </title> <institution> University of Utah, Department of Computer Science, </institution> <month> February </month> <year> 1997. </year>
Reference-contexts: Currently, the prototype is being maintained while other Synergy efforts remain dependent upon it, but no longer than required for that purpose. It is expected that the next generation Synergy microkernel will be ready for distribution to Synergy research sites soon. This microkernel will be based on the Fluke <ref> [33] </ref> microkernel which is being developed at the University of Utah as the logical successor to Mach within the operating systems research community.
Reference: [34] <author> Bill Frantz. </author> <title> KeyKOS a secure, high-performance environment for S/370. </title> <booktitle> In Proceedings of SHARE 70, </booktitle> <pages> pages 465-471. </pages> <publisher> SHARE Inc., </publisher> <address> Chicago, </address> <month> February </month> <year> 1988. </year>
Reference-contexts: Testing to determine the performance impacts of the DTOS kernel enhancements is dis cussed in Section 4. 3.1 Architecture A key distinction among microkernel-based secure operating systems is the amount of explicit security functionality within the microkernel itself. Two microkernel systems designed to meet DoD multilevel security policies, KeyKOS/KeySAFE <ref> [34, 40] </ref> and Trusted Mach [93, 5], have kernels which provide essentially the minimal amount of security function required to meet the policies for which they were designed, while still remaining free of any explicit dependencies on the particular policy.
Reference: [35] <author> Joseph A. Goguen and Jos e Meseguer. </author> <title> Security policy and security models. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 11-20, </pages> <address> Oakland, CA, </address> <month> April </month> <year> 1982. </year>
Reference-contexts: Secure Computing Corporation CAGE Code 0HDC7 87-0902025A006 1.20, 27 June 1997 96 CDRL A008 Generalized Security Policy Specification 10.1.9 Information Flow The policies given above have been stated in terms of allowed accesses. An alternative is to state them as noninterference requirements <ref> [35] </ref>. One group of subjects is noninterfering with another group if what the first group does has no effect on what the second group can see.
Reference: [36] <author> G. Scott Graham and Peter J. Denning. </author> <title> Protection principles and practice. </title> <booktitle> In Proceedings AFIPS 1972 SJCC, </booktitle> <volume> volume 40, </volume> <pages> pages 417-429. </pages> <publisher> AFIPS Press, </publisher> <year> 1972. </year>
Reference-contexts: of the accesses that processes may make to the information on the system. 24 The accesses permitted by a security policy can generally be described using an access control matrix with a row for each principal that requests accesses, and a column for each object to which access is controlled <ref> [36] </ref>. Each entry in the matrix is the set of the accesses that are permitted from a principal to an object. Policies differ in how a process is mapped to a principal, the objects that are protected, the accesses in the matrix, and how the matrix can be modified. <p> Each row in the matrix is a list of (object, permitted access set) pairs and is called an execution environment [39]. Similarly, each column is a list of (principal, permitted access set) pairs and is called an Access Control List (ACL) <ref> [36] </ref>. The set of objects depends on the system and may include such things as memory, files, message buffers, and processes. 10.1.1 MLS A MultiLevel Secure (MLS) policy is defined using a lattice of levels [22].
Reference: [37] <author> Richard Graubart. </author> <title> On the need for a third form of access control. </title> <booktitle> In Proceedings 12th National Computer Security Conference, </booktitle> <pages> pages 147-156, </pages> <address> Baltimore, MD, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: This discretionary aspect of an IBAC policy can be eliminated by using an Originator Controlled (ORCON) policy [3]. With an ORCON policy <ref> [37, 43] </ref>, the allowed accesses for an object are used to determine the allowed accesses for any object derived from it (shared memory segments must be treated as objects in this policy). In the simplest version, each process has a Propagated Access Control List (PACL). <p> If so, the new permission is granted. Otherwise, it is denied. 10.3.3 ORCON Finally, the GSPS considers the implementation of an Originator Controlled (ORCON) <ref> [37, 43] </ref> policy on a DTOS system. An IBAC security policy usually allows a process that is able to read information from an object, as identified by the object's Access Control List (ACL), to make that information available to other processes at its discretion.
Reference: [38] <author> Ian Hayes. </author> <title> Specification Case Studies. </title> <publisher> Prentice Hall International, </publisher> <year> 1993. </year>
Reference-contexts: The most distinctive quality of the Z specification language has perhaps less to do with the language itself than with the way in which the language is often used. A typical Z specification consists of small elements of Z interspersed within a text document (see <ref> [38] </ref>, for several examples). The Z language supports this use by providing for very concise statements of complex properties and a rich collection of operations for combining elements within a specification.
Reference: [39] <author> Anita K. Jones and William A. Wulf. </author> <title> Towards the design of secure systems. </title> <journal> Software - Practice and Experience, </journal> <volume> 5 </volume> <pages> 321-336, </pages> <year> 1975. </year>
Reference-contexts: Policies differ in how a process is mapped to a principal, the objects that are protected, the accesses in the matrix, and how the matrix can be modified. Each row in the matrix is a list of (object, permitted access set) pairs and is called an execution environment <ref> [39] </ref>. Similarly, each column is a list of (principal, permitted access set) pairs and is called an Access Control List (ACL) [36]. <p> Each element in an environment is called a capability and consists of an object identifier and a set of accesses (referred to as rights) <ref> [20, 39] </ref>. An access to an object is allowed if the process's environment contains a capability with that object and the desired access. Included in the accesses are controls on the use and transfer of the capability. <p> Other controls can be set before one process passes a copy to another process. Capability systems can be enhanced with rights amplification, which provides a means of implementing protected subsystems <ref> [20, 39] </ref>. For example, assume that a file system process provides support for a virtual memory.
Reference: [40] <author> Key Logic, Inc. </author> <title> Introduction to KeySAFE. Key Logic Document SEC009. </title>
Reference-contexts: Testing to determine the performance impacts of the DTOS kernel enhancements is dis cussed in Section 4. 3.1 Architecture A key distinction among microkernel-based secure operating systems is the amount of explicit security functionality within the microkernel itself. Two microkernel systems designed to meet DoD multilevel security policies, KeyKOS/KeySAFE <ref> [34, 40] </ref> and Trusted Mach [93, 5], have kernels which provide essentially the minimal amount of security function required to meet the policies for which they were designed, while still remaining free of any explicit dependencies on the particular policy.
Reference: [41] <author> Keith Loepere. </author> <title> Mach 3 Kernel Interfaces. </title> <institution> Open Software Foundation and Carnegie Mellon University, </institution> <month> November </month> <year> 1992. </year>
Reference-contexts: The DTOS prototype effort was almost exclusively limited to two components in this design, the microkernel and the security server. The microkernel was designed as a collection of enhancements to the existing Mach 3.0 design <ref> [41, 42] </ref>. One purpose of starting from an existing microkernel was to demonstrate that security need not be incompatible with other desired features. <p> Secure Computing Corporation CAGE Code 0HDC7 87-0902025A006 1.20, 27 June 1997 8 CDRL A008 Program Summary DTOS Kernel Interface Document (KID), CDRL A003 [85] This document defines the interfaces to the prototype kernel and security server. It is based upon the OSF KID <ref> [41] </ref> for the OSF MK14 version of the kernel. In addition to defining the data structures visible at the interface, the KID defines the privileges required to be held by users of each interface. <p> of the obstacles which were encountered while writing the specification, and how they were dealt with. 7.3.1 Existing Documentation was Inadequate Initial plans for writing of the DTOS specifications called for using the following existing documentation as the main source of information about the Mach kernel: The Kernel Interfaces Document <ref> [41] </ref> and Kernel Principles [42] written for OSF's version of Mach. Mach specifications written by Computational Logic, Incorporated (CLI) [11, 12, 9, 10] The DTMach FTLS [65], which was written based upon some of the previous documenta tion.
Reference: [42] <author> Keith Loepere. </author> <title> OSF Mach Kernel Principles. </title> <institution> Open Software Foundation and Carnegie Mellon University, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: The DTOS prototype effort was almost exclusively limited to two components in this design, the microkernel and the security server. The microkernel was designed as a collection of enhancements to the existing Mach 3.0 design <ref> [41, 42] </ref>. One purpose of starting from an existing microkernel was to demonstrate that security need not be incompatible with other desired features. <p> were encountered while writing the specification, and how they were dealt with. 7.3.1 Existing Documentation was Inadequate Initial plans for writing of the DTOS specifications called for using the following existing documentation as the main source of information about the Mach kernel: The Kernel Interfaces Document [41] and Kernel Principles <ref> [42] </ref> written for OSF's version of Mach. Mach specifications written by Computational Logic, Incorporated (CLI) [11, 12, 9, 10] The DTMach FTLS [65], which was written based upon some of the previous documenta tion.
Reference: [43] <author> Catherine Jensen McCollum, Judith R. Messing, and LouAnna Notargiacomo. </author> <title> Beyond the pale of MAC and DAC defining new forms of access control. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 190-200, </pages> <address> Oakland, CA, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: This discretionary aspect of an IBAC policy can be eliminated by using an Originator Controlled (ORCON) policy [3]. With an ORCON policy <ref> [37, 43] </ref>, the allowed accesses for an object are used to determine the allowed accesses for any object derived from it (shared memory segments must be treated as objects in this policy). In the simplest version, each process has a Propagated Access Control List (PACL). <p> If so, the new permission is granted. Otherwise, it is denied. 10.3.3 ORCON Finally, the GSPS considers the implementation of an Originator Controlled (ORCON) <ref> [37, 43] </ref> policy on a DTOS system. An IBAC security policy usually allows a process that is able to read information from an object, as identified by the object's Access Control List (ACL), to make that information available to other processes at its discretion.
Reference: [44] <author> Daryl McCullough. </author> <title> Noninterference and the composability of security properties. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 177-186, </pages> <address> Oakland, CA, </address> <month> April </month> <year> 1988. </year>
Reference-contexts: The advantage to a noninterference formulation is that the policy can be stated formally and a model of the system can be proved to satisfy the policy. Several versions, differing in what having an effect on what can be seen formally means, have been given <ref> [30, 44, 45] </ref>. There seems to be general agreement, however, that the formalization must be composable in that if two systems are both noninterfering, then the larger system formed by composing them also is noninterfering [44]. 10.2 Security Policy Lattice In this section we describe a lattice of security policies. <p> There seems to be general agreement, however, that the formalization must be composable in that if two systems are both noninterfering, then the larger system formed by composing them also is noninterfering <ref> [44] </ref>. 10.2 Security Policy Lattice In this section we describe a lattice of security policies. We begin by defining a list of policy characteristics. This set of characteristics defines a lattice of policies.
Reference: [45] <author> John McLean. </author> <title> A general theory of composition for trace sets closed under selective interleaving functions. </title> <booktitle> In Proceedings IEEE Computer Society Symposium on Research in Security and Privacy, </booktitle> <address> Oakland, CA, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The advantage to a noninterference formulation is that the policy can be stated formally and a model of the system can be proved to satisfy the policy. Several versions, differing in what having an effect on what can be seen formally means, have been given <ref> [30, 44, 45] </ref>. There seems to be general agreement, however, that the formalization must be composable in that if two systems are both noninterfering, then the larger system formed by composing them also is noninterfering [44]. 10.2 Security Policy Lattice In this section we describe a lattice of security policies.
Reference: [46] <author> Catherine Meadows. </author> <title> Extending the Brewer-Nash model to a multilevel context. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 95-102, </pages> <address> Oakland, CA, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: It was motivated by the need to restrict insider information, such as using knowledge about one firm's activities in the analysis of a competitor's best course of action. It can also be used for cases in which an aggregate of information is more sensitive than individual pieces <ref> [46] </ref>. The objects of interest are partitioned into data sets and the data sets are partitioned into conflict of interest classes. For example, all objects containing information about a single firm would form a data set.
Reference: [47] <author> Irwin Meisels and Mark Saaltink. </author> <title> The Z/EVES Reference Manual. </title> <address> ORA Canada, </address> <month> April </month> <year> 1996. </year> <title> Secure Computing Corporation CAGE Code 0HDC7 87-0902025A006 1.20, </title> <note> 27 June 1997 138 CDRL A008 Bibliography </note>
Reference-contexts: Balzac did not use the same format for input as required by f UZZ, so significant effort would have been required to convert existing specifications for use with Balzac. Moreover, Balzac did not appear to have a very sophisticated theorem prover. Z/Eves <ref> [47] </ref>. This was investigated near the end of the program. It was significantly better than Balzac in both compatibility with existing specifications and the sophistication of the theorem prover.
Reference: [48] <author> Spence Minear, Dick O'Brien, and Lynn Te Winkel. </author> <title> Supporting a Secure DBMS on the DTOS Microkernel. </title> <type> Technical report, </type> <institution> Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: Strengths and weaknesses of DTOS in supporting these features were identified. The results of this program are documented in <ref> [48] </ref>. Adaptive Security Policy Experience (August 1996 to present) This program continues the experimentation with adaptive security policies which was begun on the Adaptive Security Policies program discussed above. Particular areas of interest include: Assessing the impact on system assurance of switching between policies.
Reference: [49] <author> Spencer E. Minear. </author> <title> Providing policy control over object operations in a Mach based system. </title> <booktitle> In Proceedings of the Fifth USENIX UNIX Security Symposium, </booktitle> <pages> pages 141-156, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Secure Computing Corporation CAGE Code 0HDC7 87-0902025A006 1.20, 27 June 1997 10 CDRL A008 Program Summary Providing Policy Control Over Object Operations in a Mach Based System <ref> [49] </ref> This paper provides an overview of the DTOS prototype and control mechanisms. It begins by describing the basic elements of the Mach kernel and the Mach access controls. It then describes the controls added to the kernel under the DTOS program and interactions with the security server.
Reference: [50] <author> Michael J. Nash and Keith R. </author> <title> Poland. Some conundrums concerning separation of duty. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 201-207, </pages> <address> Oakland, CA, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: Separation of duty is equivalent to the n-person policies discussed in [92] with each principal performing a different duty. In Clark-Wilson policies, separation of duty is implemented by allowing each process to invoke only some of the TPs. An example of this is discussed in <ref> [50] </ref> for the processing of an invoice in a purchasing department. The TPs for this example are: 1. Record the arrival of an invoice. Secure Computing Corporation CAGE Code 0HDC7 87-0902025A006 1.20, 27 June 1997 92 CDRL A008 Generalized Security Policy Specification 2. <p> Only a data entry clerk could record the arrival, only a purchasing officer could verify receipt, and only a supervisor could authorize payment. A special form of Clark-Wilson policy is the dynamic assignment of duties to principals <ref> [50] </ref>. These policies, called dynamic n-person policies, allow a principal to execute at most one of several TPs on a CDI. In the purchasing department example, any of the processes could record the arrival of an invoice.
Reference: [51] <author> NCSC. </author> <title> Trusted computer systems evaluation criteria. Standard, </title> <institution> DOD 5200.28-STD, US National Computer Security Center, Fort George G. Meade, Maryland 20755-6000, </institution> <month> December </month> <year> 1985. </year>
Reference-contexts: Formal methods do however provide the strongest guarantee of completeness in an assurance argument. Completeness is especially important when verifying security properties, when even a single failure can have potentially devastating consequences. This is reflected in the TCSEC <ref> [51] </ref>, where the only distinction between the highest rating (A1) and the second highest rating (B3) is the extent to which formal methods are used for system verification. 2.2 Significant Results and Accomplishments The DTOS prototype was successful as a proof of concept. <p> On the FTLS we took advantage of this feature and attempted to create a specification which could be largely understood through the text alone by an individual unfamiliar or only vaguely familiar with Z. In terms of TCSEC <ref> [51] </ref> terminology, the goal was to present the FTLS and DTLS within the same document so as to decrease the overall specification effort and increase confidence in the consistency of the specifications. <p> A security policy is the set of laws, rules, and practices that regulate how an organization manages, protects, and distributes sensitive information <ref> [51] </ref>. For a computer system, the security policy must define what information is to be protected, the accesses that the various processes in the system are permitted to make to that information, and how these permissions may be modified. <p> Note that if having an effect includes more than being able to write to an object that the other group can read, this MLS policy is stronger than the Bell-LaPadula policy in Section 10.1.1 and prohibits certain covert channels <ref> [51] </ref>. The advantage to a noninterference formulation is that the policy can be stated formally and a model of the system can be proved to satisfy the policy. Several versions, differing in what having an effect on what can be seen formally means, have been given [30, 44, 45].
Reference: [52] <author> Richard C. O'Brien and Clyde Rogers. </author> <title> Developing applications on LOCK. </title> <booktitle> In Proceedings 14th National Computer Security Conference, </booktitle> <pages> pages 147-156, </pages> <address> Washington, DC, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: In the purchasing department example, any of the processes could record the arrival of an invoice. However, if a supervisor did so, it could not then also authorize payment; another supervisor would have to do this. 10.1.3 Type Enforcement Another form of access control policy is Type Enforcement <ref> [15, 52] </ref>. Allowed accesses are specified with a Domain Definition Table (DDT), which is a coarse version of the access control matrix in which objects that have equal access privileges are clustered into groups called types and the principals that have equal access privileges are clustered into groups called domains. <p> if either it is permitted by both the MLS and type enforcement policies (as in the simple combination), or trusted write is permitted by the type enforcement policy (a trusted write is only allowed to those processes with the authority to declassify information or to extract nonsensitive from sensitive information) <ref> [15, 52] </ref>. This is an example of a policy in which permission in one subpolicy overrides lack of permission in another subpolicy. Another form of combination is to use different policies for different objects. <p> The Bell-LaPadula version of MLS [4] allows a subject to perform a read access only if its level dominates that of the object, and a write access only if its level is dominated by that of the object. In Type Enforcement <ref> [15, 52] </ref>, allowed accesses are specified with a Domain Definition Table (DDT), which is a coarse version of the access control matrix in which objects that have equal access privileges are clustered into groups called types and the environments, that may represent a cluster of individuals, are called domains.
Reference: [53] <author> Duane Olawsky, Todd Fine, Edward Schneider, and Ray Spencer. </author> <title> Developing and using a policy neutral access control policy. In New Security Paradigms '96, </title> <month> September </month> <year> 1996. </year>
Reference-contexts: It then describes the controls added to the kernel under the DTOS program and interactions with the security server. It concludes with analysis of some preliminary performance figures. Developing and Using a Policy Neutral Access Control Policy <ref> [53] </ref> This paper describes the DTOS security policy flexibility. It begins with a discussion of the basic architecture and the control philosophy for DTOS. It describes the structure of the security policy document, and discusses the range of policies supportable by DTOS.
Reference: [54] <author> Open Software Foundation, Inc. </author> <title> MK++ Kernel High Level Design, </title> <month> January </month> <year> 1996. </year>
Reference-contexts: It is important to recognize that this conclusion may not apply to all implementations of Mach, even though at the design level these are the two most complex portions of the Mach system. For instance, a more recent implementation of Mach, the MK++ implementation from OSF <ref> [54] </ref>, was developed specifically to meet the needs of assurance concurrent with performance goals.
Reference: [55] <author> S. Owre, N. Shankar, and J.M. Rushby. </author> <title> The PVS Specification Language. </title> <institution> Computer Science Laboratory, SRI International, </institution> <address> Menlo Park, CA 94025. </address>
Reference-contexts: Since no sufficient theorem prover had been found for Z (Z/Eves was not even available yet), and PVS <ref> [55, 21] </ref> was already familiar to Secure Computing through its use on other programs, it was chosen for use in the composability study. PVS was designed from the beginning to support efficient mechanized proofs as the primary goal. <p> Verifies that the declared type of the operands in all operations is correct according to the declaration of the operation. It is interesting to compare this to the typecheck operation performed by PVS, a popular specification tool developed at SRI <ref> [55] </ref>.
Reference: [56] <author> Vikram R. Pesati. </author> <title> The Design and Implementation of a Multilevel Secure Log Manager. </title> <institution> Department of Computer Science and Engineering, Pennsylvania State University, </institution> <month> De-cember </month> <year> 1996. </year> <type> Master's Paper. </type>
Reference-contexts: At least three of these sites had significant active development efforts, including an RBAC project at NIST 8 , a secure X Window System at Portland State University [14, 23], and a secure database management system at Penn State University <ref> [57, 56] </ref>. DTOS was also used as a platform for class projects at Penn State University in a graduate level computer security class. After the initial release, DTOS was released approximately quarterly with a full set of updated documents.
Reference: [57] <author> Vikram R. Pesati, Thomas F. Keefe, and Shankar Pal. </author> <title> The design and implementation of a multilevel secure log manager. </title> <booktitle> In Proceedings of the 1997 IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 55-64, </pages> <month> May </month> <year> 1997. </year>
Reference-contexts: At least three of these sites had significant active development efforts, including an RBAC project at NIST 8 , a secure X Window System at Portland State University [14, 23], and a secure database management system at Penn State University <ref> [57, 56] </ref>. DTOS was also used as a platform for class projects at Penn State University in a graduate level computer security class. After the initial release, DTOS was released approximately quarterly with a full set of updated documents.
Reference: [58] <author> John Rushby. Noninterference, </author> <title> transitivity, and channel-control security policies. </title> <type> Technical report, </type> <institution> SRI International, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: Therefore intransitive policies also should be considered, especially for a system like DTOS which is intended to support a range of security policies. In <ref> [58] </ref>, John Rushby presents a high-level framework for general information flow policies. This framework was the first formal definition of information flow which is applicable to intransitive information flow policies and which includes proofs for the sufficiency of the unwinding conditions. It was therefore the starting point for our investigations. <p> Such a change solves the automation problem but also requires introduction of the security policy into the algorithm at an earlier stage, so that the algorithm is less policy independent. This alternative algorithm is described in Section 6.3 of [82]. 11.2.1.2 Equivalence of Unwinding Conditions and Noninterference In <ref> [58] </ref>, it is shown that if the unwinding conditions are satisfied by a system, then the system satisfies the noninterference statement of its information flow policy. It is also shown that for transitive policies, if noninterference holds, then the unwinding conditions must also be satisfied. <p> Secure Computing Corporation CAGE Code 0HDC7 87-0902025A006 1.20, 27 June 1997 122 CDRL A008 Covert Channel Analysis 11.2.2 Issues With The Definition of Noninterference Here we describe three shortcomings of the basic definition of noninterference from <ref> [58] </ref>, and potential solutions. 11.2.2.1 Output Redirection The definition of noninterference is based upon a model of a system which assumes that all output from an operation is returned to the subject which made the request.
Reference: [59] <author> John Rushby. </author> <title> Mechanizing formal methods: Opportunities and challenges. </title> <editor> In Jonathan P. Bowen and Michael G. Hinchey, editors, </editor> <booktitle> ZUM '95: The Z Formal Specification Notation; 9th International Conference of Z Users, volume 967 of Lecture Notes in Computer Science, </booktitle> <pages> pages 105-113. </pages> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1995. </year>
Reference-contexts: PVS was designed from the beginning to support efficient mechanized proofs as the primary goal. The specification language itself was chosen to be expressive, yet mechanically tractable <ref> [59] </ref>. The language does not lend itself as easily as Z to integration of text and formal specification, though tools are available which make it relatively easy to include PVS theories 13 within a L A T E X document.
Reference: [60] <author> O. Sami Saydjari, S. Jeffrey Turner, D. Elmo Peele, John F. Farrell, Peter A. Loscocco, William Kutz, and Gregory L. Bock. </author> <title> Synergy: A distributed, microkernel-based security architecture. </title> <type> Technical report, </type> <institution> INFOSEC Research and Technology, R231, </institution> <month> November </month> <year> 1993. </year>
Reference-contexts: Appendix A, Bibliography, provides citations for all referenced documents. 87-0902025A006 1.20, 27 June 1997 Secure Computing Corporation CAGE Code 0HDC7 CDRL A008 Lessons Report 3 Section 2 Program Summary 2.1 DTOS Objectives and Approach The DTOS program is part of a broad operating systems research program known as Synergy <ref> [60] </ref>, the objective of which is to develop a flexible, microkernel-based architecture for secure distributed systems. The current Synergy efforts are part of a long term strategy to encourage operating system vendors to include strong security mechanisms in the next generation of commercially available operating systems. <p> in Section 13. 2 The resulting security enhanced microkernel has been termed Flask, for Fluke advanced security kernel. 87-0902025A006 1.20, 27 June 1997 Secure Computing Corporation CAGE Code 0HDC7 CDRL A008 Lessons Report 13 Section 3 Prototype DTOS is part of a broader operating systems research program known as Synergy <ref> [60] </ref>, the objective of which is to develop a flexible, microkernel-based architecture for secure systems. The main emphasis of the DTOS prototype effort was to develop a prototype security enhanced version of the CMU Mach microkernel as the base for the Synergy operating system project.
Reference: [61] <author> Edward A. Schneider, William Kalsow, Lynn Te Winkel, and Michael Carney. </author> <title> Experimentation with Adaptive Security Policies. ASP CDRL A005, Secure Computing Corporation, </title> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: The program also studied dynamic security lattices and task-based access control, and the issue of trade-offs between security and fault tolerance. These studies were presented in the context of the Synergy architecture. The results of this program are documented in <ref> [61] </ref>. Adding Security to Commercial Microkernel Based Systems (June 1995 to January 1996) As mentioned earlier, one result of the DTOS program was the determination that the CMU Mach code base used on DTOS was too complex and poorly structured to meet the requirements of an assured, secure system.
Reference: [62] <author> Edward A. Schneider, Stanley Perlo, and David Rosenthal. </author> <title> Discretionary access control mechanisms for distributed systems. </title> <type> Technical Report RADC-TR-90-275, </type> <institution> Rome Air Development Center, </institution> <month> June </month> <year> 1990. </year> <note> 87-0902025A006 1.20, 27 June 1997 Secure Computing Corporation CAGE Code 0HDC7 CDRL A008 Lessons Report 139 </note>
Reference-contexts: Such a principal is referred to as a role. Assumption of a role by a process can be controlled by treating roles as system objects with accesses assume, create process in, and delegate (see below) <ref> [62] </ref>. Another variation of IBAC is to allow negative accesses to an object by some groups. The set of accesses permitted to a process is the union of the positive accesses for each of its associated groups, minus the union of the negative accesses for those groups.
Reference: [63] <author> Secure Computing Corporation. </author> <title> Software Requirements Specification for Distributed Trusted Mach. </title> <institution> DTMach CDRL A005, v1, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> October </month> <year> 1992. </year>
Reference-contexts: The missing CDRLs in this list are for the prototype itself and program management documents. DTOS Software Requirements Specification (SRS), CDRL A001 [78] This document is an updated version of the DTMach SRS <ref> [63] </ref>. In addition to requirements on the kernel and security server, it contains requirements for several other components of a secure distributed operating system. For these other components, the requirements have not been updated from the DTMach SRS since those components are not part of the DTOS prototype effort.
Reference: [64] <author> Secure Computing Corporation. </author> <title> Final Report for the Distributed Trusted Mach Program. </title> <type> Technical Report RL-TR-93-235, </type> <institution> Rome Laboratory, Griffiss Air Force Base, </institution> <address> NY, </address> <month> December </month> <year> 1993. </year>
Reference-contexts: The DTOS program began in October 1993, as a direct successor to the Distributed Trusted Mach (DTMach) program <ref> [64] </ref>. It is scheduled to complete in June 1997. 1.2 Document Overview This report includes the final report for the DTOS program and provides an overview of all of the technical efforts on the program. <p> The reason for not considering this subject under the DTOS program was simply a lack of resources. 5.2 Assurability of the DTOS Prototype and Impact on Assurance Tasks One of the results <ref> [64] </ref> of the DTMach program was a determination that it would be possible to develop a highly-assured secure microkernel implementing the Mach interface.
Reference: [65] <author> Secure Computing Corporation. </author> <title> Formal Top Level Specification for Distributed Trusted Mach. </title> <institution> DTMach CDRL A012, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Mach specifications written by Computational Logic, Incorporated (CLI) [11, 12, 9, 10] The DTMach FTLS <ref> [65] </ref>, which was written based upon some of the previous documenta tion. These sources turned out to be completely inadequate, as the documentation was incomplete, and more seriously, sometimes inaccurate. In retrospect, neither of these inadequacies are surprising. <p> Therefore it is reasonable to assume that the state model within the FSPM would be at a higher level of abstraction than the state model within the FTLS. On DTOS, both state models were initially derived from the state model written for the DTMach program <ref> [65] </ref>. Because of the assumption about the required level of detail, the state models diverged for the first few drafts of each document.
Reference: [66] <author> Secure Computing Corporation. </author> <title> System/Segment Design Document for Distributed Trusted Mach. </title> <institution> DTMach CDRL A006, v2, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: DTOS Kernel and Security Server Software Design Document (SDD), CDRL A002 [76] This document provides a design for the DTOS enhancements to the CMU Mach microker-nel. It is derived from the DTMach System Segment Design Document (SSDD) <ref> [66] </ref>, but the level of detail is much more focused. To provide the detailed information required to support the prototype work, the format of the document was changed from the high-level design format of an SSDD to the more detailed level of design work called for by an SDD.
Reference: [67] <institution> Secure Computing Corporation. DTOS Covert Channel Analysis Report. DTOS CDRL A007, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: DTOS Formal Top-Level Specification (FTLS), CDRL A005 [74] This document provides a partial formal specification of the DTOS microkernel. It describes the system behavior both in English and in the Z specification language. DTOS Covert Channel Analysis Report, CDRL A007 <ref> [67] </ref> This classified document contains the informal description and analysis of each of the interference channels identified in the Journal Level Proofs (CDRL A016) [69]. The analysis includes descriptions of possible implementation scenarios, bandwidth estimation and techniques for slowing or closing the channel. <p> This is discussed further in Section 11.3. Some simple examples of analysis performed on the DTOS prototype. These are presented in the Journal Level Proofs [69] and Covert Channel Analysis Report <ref> [67] </ref>, and are not discussed any further here.
Reference: [68] <author> Secure Computing Corporation. </author> <title> DTOS Demonstration Software Design Document. </title> <type> Technical report, </type> <institution> Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: DTOS Users Manual [80] This document is the user's manual for the DTOS prototype system. It provides background concepts, procedures, and reference information needed for installing and using the DTOS prototype. It should be consulted by anyone who plans to use the DTOS system. DTOS Demonstration Software Design Document <ref> [68] </ref> This document defines the design of the DTOS demonstration software. This example application simulates a hospital database and demonstrates how the security policy can be used to control access to medical records. DTOS Notebook of Technical Issues [77] This document records various technical discussions from the program.
Reference: [69] <institution> Secure Computing Corporation. DTOS Journal Level Proofs and Conclusions. DTOS CDRL A016, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> May </month> <year> 1995. </year>
Reference-contexts: It describes the system behavior both in English and in the Z specification language. DTOS Covert Channel Analysis Report, CDRL A007 [67] This classified document contains the informal description and analysis of each of the interference channels identified in the Journal Level Proofs (CDRL A016) <ref> [69] </ref>. The analysis includes descriptions of possible implementation scenarios, bandwidth estimation and techniques for slowing or closing the channel. DTOS Lessons Learned Report, CDRL A008 [86] This report includes the final report for the DTOS program and provides an overview of all of the technical efforts on the program. <p> The most significant risks from this database have been incorporated in some form into the discussion within this Lessons Learned document. DTOS Journal Level Proofs, CDRL A016 <ref> [69] </ref> This classified document contains the formal analysis of the noninterference properties of the DTOS system. The methods for performing the analysis are described and justified in the DTOS Covert Channel Analysis Plan (CDRL A017) [82]. <p> A discussion of some of the basic issues involved in performing an information flow analysis of a multiserver operating system. This is discussed further in Section 11.3. Some simple examples of analysis performed on the DTOS prototype. These are presented in the Journal Level Proofs <ref> [69] </ref> and Covert Channel Analysis Report [67], and are not discussed any further here.
Reference: [70] <author> Secure Computing Corporation. </author> <title> DTOS Software System Development Test and Evaluation Plan. </title> <institution> DTOS CDRL A012, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: Five systems are then assessed against these criteria. The goal of this report is to provide guidance for future secure system development by providing the design criteria and examples of designs which meet and do not meet those criteria. DTOS Software System Development Test and Evaluation Plan, CDRL A012 <ref> [70] </ref> This document defines the performance and functional tests which were performed on the development releases of the DTOS kernel. DTOS Software Test Report, CDRL A013 [71] This document describes the results of the performance and functional tests defined in CDRL A012.
Reference: [71] <institution> Secure Computing Corporation. DTOS Software Test Report. DTOS CDRL A013, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: DTOS Software System Development Test and Evaluation Plan, CDRL A012 [70] This document defines the performance and functional tests which were performed on the development releases of the DTOS kernel. DTOS Software Test Report, CDRL A013 <ref> [71] </ref> This document describes the results of the performance and functional tests defined in CDRL A012. It has two volumes, one documenting results of the performance tests and one documenting results of the functional tests.
Reference: [72] <author> Secure Computing Corporation. </author> <title> DTOS Formal Security Policy Model. </title> <institution> DTOS CDRL A004, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: It is based upon the OSF KID [41] for the OSF MK14 version of the kernel. In addition to defining the data structures visible at the interface, the KID defines the privileges required to be held by users of each interface. DTOS Formal Security Policy Model (FSPM), CDRL A004 <ref> [72] </ref> This document defines the security policy enforced by the DTOS prototype kernel. The policy is defined formally using the Z specification language, however, there is also a version available [73], written only in English for readers that want an overview but are not interested in the formalization. <p> The DTOS Formal Security Policy Model (FSPM) <ref> [72] </ref> describes security requirements on the DTOS kernel which are intended to be general so that the requirements can support a wide range of security objectives on a complete system using the DTOS kernel as a base.
Reference: [73] <author> Secure Computing Corporation. </author> <title> DTOS Formal Security Policy Model (Non-Z Version). </title> <type> Technical report, </type> <institution> Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Min-nesota 55113-2536, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: DTOS Formal Security Policy Model (FSPM), CDRL A004 [72] This document defines the security policy enforced by the DTOS prototype kernel. The policy is defined formally using the Z specification language, however, there is also a version available <ref> [73] </ref>, written only in English for readers that want an overview but are not interested in the formalization.
Reference: [74] <institution> Secure Computing Corporation. DTOS Formal Top-Level Specification. DTOS CDRL A005, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: Security requirements are stated governing when each service may be provided, in terms of permissions granted by the security server. DTOS Formal Top-Level Specification (FTLS), CDRL A005 <ref> [74] </ref> This document provides a partial formal specification of the DTOS microkernel. It describes the system behavior both in English and in the Z specification language. <p> This is discussed further in Section 7.3.2. Note that the model defines only the state of the kernel, and not the transitions which occur in the kernel. The possible transitions are modeled in the DTOS FTLS <ref> [74] </ref> (also see Section 7). The definition of the services controlled by the DTOS kernel. This is contained in Section 6 of the FSPM. <p> it is part of the design. 87-0902025A006 1.20, 27 June 1997 Secure Computing Corporation CAGE Code 0HDC7 CDRL A008 Lessons Report 67 Section 7 Formal Top Level Specification This section discusses the DTOS formal specification task, the output of which is captured in the DTOS Formal Top Level Specification (FTLS) <ref> [74] </ref>. After providing an overview of the task, the following topics are covered: Section 7.1 discusses some of the decisions which must be made for any specification effort and the way in which these decisions were made on DTOS. <p> Initially, the goal for the task was to write a plan for a complete covert channel analysis of the DTOS prototype and to perform a design level search for covert channels based upon the DTOS FTLS <ref> [74] </ref>. As the goal of providing assurance evidence for the DTOS prototype diminished in importance, more opportunities arose for extending the understanding of information flow policies.
Reference: [75] <institution> Secure Computing Corporation. DTOS FTLS Plan. </institution> <type> Technical report, </type> <institution> Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> November </month> <year> 1996. </year>
Reference-contexts: In particular, different logical elements of the specification were easily identifiable by their appearance. The following are some simple examples of the kinds of standards adopted. The complete set of standards are described in the DTOS FTLS Plan <ref> [75] </ref> (not a program deliverable). Capitalization and underscore usage in identifiers.
Reference: [76] <author> Secure Computing Corporation. </author> <title> DTOS Kernel and Security Server Software Design Document. </title> <institution> DTOS CDRL A002, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Ro-seville, Minnesota 55113-2536, </address> <month> December </month> <year> 1996. </year> <title> Secure Computing Corporation CAGE Code 0HDC7 87-0902025A006 1.20, </title> <note> 27 June 1997 140 CDRL A008 Bibliography </note>
Reference-contexts: For these other components, the requirements have not been updated from the DTMach SRS since those components are not part of the DTOS prototype effort. DTOS Kernel and Security Server Software Design Document (SDD), CDRL A002 <ref> [76] </ref> This document provides a design for the DTOS enhancements to the CMU Mach microker-nel. It is derived from the DTMach System Segment Design Document (SSDD) [66], but the level of detail is much more focused. <p> The kernel request control requirements are another important piece of the DTOS security policy which will be discussed in this section, though these requirements are documented within the DTOS SDD <ref> [76] </ref> rather than the FSPM. The kernel request control requirements define which permissions must be checked for each DTOS kernel request. These are similar to the service control requirements, but are at a somewhat lower level of abstraction.
Reference: [77] <institution> Secure Computing Corporation. DTOS Notebook of Technical Issues. </institution> <type> Technical report, </type> <institution> Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> June </month> <year> 1996. </year>
Reference-contexts: DTOS Demonstration Software Design Document [68] This document defines the design of the DTOS demonstration software. This example application simulates a hospital database and demonstrates how the security policy can be used to control access to medical records. DTOS Notebook of Technical Issues <ref> [77] </ref> This document records various technical discussions from the program. The purpose is to record rationale for decisions that have been made, track technical issues to closure, and record discussion on technical issues that have not yet been resolved. <p> Since the initial state is dependent upon the higher level operating system environment, this approach is consistent with keeping all explicit operating system dependencies out of the kernel. 4 The DTOS Notebook <ref> [77] </ref> contains a record of the various techniques considered. 87-0902025A006 1.20, 27 June 1997 Secure Computing Corporation CAGE Code 0HDC7 CDRL A008 Lessons Report 19 3.2.5 IPC Extensions The Mach IPC interface was extended to incorporate sender and recipient SIDs in the following ways: The recipient of a message can retrieve <p> Completeness requires attention to details that are often tedious to address and contribute little to an understanding of a system or its ability to meet the desired properties. 10 These interactions are discussed at length in entry 38 in the DTOS Notebook <ref> [77] </ref>. Secure Computing Corporation CAGE Code 0HDC7 87-0902025A006 1.20, 27 June 1997 46 CDRL A008 Assurance Overview Formal verification was used on the DTOS program primarily within the Composability Study. <p> The real difficulties arise when dealing with relationships between entities managed by different servers, which is probably the most common case since often a task will be one of the entities. Related issues are discussed in entry 9 of the DTOS Notebook <ref> [77] </ref>. 6.3.2.6 Control Requirements Involving Special SIDs The simple model for determining the control requirements is to identify which entities are relevant to a service, and requiring a permission check between the SIDs of each pair of relevant entities.
Reference: [78] <institution> Secure Computing Corporation. DTOS Software Requirements Specification. DTOS CDRL A001, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: The missing CDRLs in this list are for the prototype itself and program management documents. DTOS Software Requirements Specification (SRS), CDRL A001 <ref> [78] </ref> This document is an updated version of the DTMach SRS [63]. In addition to requirements on the kernel and security server, it contains requirements for several other components of a secure distributed operating system.
Reference: [79] <author> Secure Computing Corporation. </author> <title> DTOS Specification to Code Correspondence. </title> <institution> DTOS CDRL A018, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> September </month> <year> 1996. </year>
Reference-contexts: The document contains discussion of deficiencies in current theory and practice for performing such analysis in general and for multiserver operating systems in particular. DTOS Specification to Code Correspondence, CDRL A018 <ref> [79] </ref> This document contains an analysis of the correspondence between the DTOS FTLS and the implementation. It includes a data correspondence that maps components of the FTLS state to data structures in the implementation and a functional correspondence that correlates FTLS state transitions to the implementation of corresponding kernel requests.
Reference: [80] <author> Secure Computing Corporation. </author> <title> DTOS Users Manual. </title> <type> Technical report, </type> <institution> Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: It explains the advantages of the new framework, and illustrates the use of the framework through a simple example. 2.3.3 Other Technical Documents This section describes technical documents which were developed on the program but not officially identified as contract deliverables. DTOS Users Manual <ref> [80] </ref> This document is the user's manual for the DTOS prototype system. It provides background concepts, procedures, and reference information needed for installing and using the DTOS prototype. It should be consulted by anyone who plans to use the DTOS system.
Reference: [81] <institution> Secure Computing Corporation. DTOS Composability Study. DTOS CDRL A020, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: The DTOS kernel and security servers for several example policies are specified within this framework and the resulting systems analyzed. The report also identifies a list of policy characteristics and classifies a variety of policies with respect to these characteristics. DTOS Composability Study, CDRL A020 <ref> [81] </ref> This document studies existing composabil-ity techniques and applies them to analyzing DTOS. The goal is to assess these techniques for specifying and verifying modular systems by composing specifications and proofs for the individual system components and to develop new techniques as necessary. <p> The DTOS microkernel is specified as an instance of the generic object manager, and each of three selected security policies is specified as an instance of the generic security server (see Section 10.3 in this report). For each policy, a composability analysis <ref> [81] </ref> is performed to demonstrate that the combination of the security server with the DTOS microkernel implements the policy. Any weaknesses in the ability of DTOS to support these policies are identified.
Reference: [82] <author> Secure Computing Corporation. </author> <title> DTOS Covert Channel Analysis Plan. </title> <institution> DTOS CDRL A017, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> May </month> <year> 1997. </year>
Reference-contexts: DTOS Journal Level Proofs, CDRL A016 [69] This classified document contains the formal analysis of the noninterference properties of the DTOS system. The methods for performing the analysis are described and justified in the DTOS Covert Channel Analysis Plan (CDRL A017) <ref> [82] </ref>. The result of the analysis is the identification of design level interface flows according to the Formal Top Level Specification (FTLS) of the system. Due to the experimental nature of the analysis, it is only performed on a small part of the system for a proof-of-concept. <p> Due to the experimental nature of the analysis, it is only performed on a small part of the system for a proof-of-concept. DTOS Covert Channel Analysis Plan, CDRL A017 <ref> [82] </ref> This document describes an approach for performing analysis of a system's ability to satisfy information flow security policies. Although the plan addresses source and object code level analysis, it focuses on design level analysis, considering development of both a theoretical framework and a specific methodology. <p> The complete plan is presented in Section 4 of the Covert Channel Secure Computing Corporation CAGE Code 0HDC7 87-0902025A006 1.20, 27 June 1997 118 CDRL A008 Covert Channel Analysis Analysis Plan <ref> [82] </ref>. An outline of the plan is shown in Figure 4, which is a particular instance of the general outline for an assurance analysis depicted in Figure 2. Accompanying each arrow is the title a task described in the plan. <p> The starting point for developing such an algorithm was [26], which presents an algorithm meeting these requirements (other than policy flexibility) for noninterference analysis of a multilevel security policy. For DTOS, this algorithm was adapted to work with the general noninterference framework (see Section 5.2 of <ref> [82] </ref>). The resulting algorithm satisfies the four requirements above with one potentially significant weakness; one of the steps in the algorithm presents a choice of two actions. <p> Such a change solves the automation problem but also requires introduction of the security policy into the algorithm at an earlier stage, so that the algorithm is less policy independent. This alternative algorithm is described in Section 6.3 of <ref> [82] </ref>. 11.2.1.2 Equivalence of Unwinding Conditions and Noninterference In [58], it is shown that if the unwinding conditions are satisfied by a system, then the system satisfies the noninterference statement of its information flow policy. <p> This system includes an operation similar to the one described above which violates Weak Step Consistency. Details of the example can be found in Section 6.1.3 of <ref> [82] </ref>. The significance of this example to actual analysis of a system is that it demonstrates that an attempt to prove a system is secure may fail due to the fact that the unwinding conditions are too strong rather than due to an actual insecurity. <p> This model precludes many kinds of operations which occur in real systems, including asynchronous events, broadcasting and even signaling. In Section 6.1.1 of <ref> [82] </ref>, the system model is extended to allow outputs to be presented to multiple subjects. Noninterference is stated and an unwinding theorem is proven. A fourth unwinding condition must be added, but it is straightforward. <p> Because operations do not depend upon the output of previous operations, this may result in a completely different meaning for the shorter sequence. These concerns are elaborated on briefly in Section 6.1.6 of <ref> [82] </ref>. <p> Section 6.1.2 of <ref> [82] </ref> discusses four kinds of policies which are not completely supported by this definition. The two limitations which appear to be most significant are the following: The policy must be predefined. <p> Unfortunately, the information flow property which can be proven about the composition of two servers modeled in this way is much weaker than what is needed. Section 7 of <ref> [82] </ref> elaborates on these problems and presents some preliminary thoughts for possible solutions. <p> Another fundamental reason that covert channels have not been addressed is that covert channel analysis for security policies other than multilevel security is still poorly understood. Even for multilevel security, covert channel analysis in multiserver systems can be difficult. The DTOS Covert Channel Analysis Plan <ref> [82] </ref> discusses some of the open issues in this area (these issues are also summarized in Section 11). Least Privilege and Granularity Implementations of mandatory access control often label subjects and objects with security attributes and make security decisions based entirely upon those attributes.
Reference: [83] <author> Secure Computing Corporation. </author> <title> DTOS General System Security and Assurability Assessment Report. </title> <institution> DTOS CDRL A011, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: It describes significant accomplishments and obstacles encountered during these efforts and lessons learned while carrying out the program. Finally, it provides suggestions for future efforts which build upon the successes of the program or address deficiencies. DTOS General System Security and Assurability Assessment Report, CDRL A011 <ref> [83] </ref> This document contains the results of the DTOS Essential Requirements Study. It presents criteria for assessing microkernel based systems in their ability to be configured to meet a range of security policies and the feasibility of assuring that a system meets the security requirements of the policies. <p> The failure to provide read access without simultaneously supporting execute privilege is a characteristic of most operating systems though it is sometimes considered to be a significant shortcoming for supporting a secure system (see for instance Section 3.3.2 of <ref> [83] </ref>). 3.2.4 Task Creation Interfaces In Mach, when a task creates a second task it is given total control over the state of the second task throughout its existence, and it similarly receives any privileges granted to the second task. <p> The output of this study is a report <ref> [83] </ref> which presents criteria for assessing microkernel based systems in their ability to be configured to meet a range of security policies, and the feasibility of assuring that a system meets the security requirements of the policies. <p> This was primarily due to limitations on the resources available. This section concludes with a summary of the criteria which are not satisfied by any system considered in the study. The criteria are organized by the categories in <ref> [83] </ref>, beginning with the high-level security policy characteristics. General Characteristics The only criteria in this category which is not addressed substantially in any of the individual system assessments is the covert channel criteria for information flow security policies. <p> In conjunction with the development of such tools, the ASPE additions to DTOS should be evaluated in their ability to provide the necessary information. 13.3 Dynamic Security Policies The General System Security and Assurability Assessment Report <ref> [83] </ref> identifies support for dynamic security policies as a significant weaknesses across all systems studied. <p> Testing of the security server will require kernel modifications to provide stub routines to satisfy the interface requirements. Changes to the kernel to support dynamic security policies. The DTOS Generalized Security Policy Specification [84] and General System Security and Assurability Assessment <ref> [83] </ref> identify several issues with the ability of the DTOS prototype to support dynamic security policies. The most significant issues concern the kernel's ability to identify permissions which are in-use and to revoke those permissions when asked.
Reference: [84] <author> Secure Computing Corporation. </author> <title> DTOS Generalized Security Policy Specification. </title> <institution> DTOS CDRL A019, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: Section 9, Composability Study, provides an overview of the results of this task. Section 10, Generalized Security Policy Specification, provides an overview of the results of this task. This overview incorporates significant portions of the report <ref> [84] </ref> generated under the task, especially those portions expected to be of interest to a more general audience than the report itself. <p> It also discusses some serious shortcomings of current practices and the need for additional research and tool development. DTOS Generalized Security Policy Specification, CDRL A019 <ref> [84] </ref> This document analyzes the policy flexibility of the DTOS architecture and records insights into the effect that the goal of policy flexibility has on the design of an object manager and its interface with the rest of the system. <p> Testing of the security server will require kernel modifications to provide stub routines to satisfy the interface requirements. Changes to the kernel to support dynamic security policies. The DTOS Generalized Security Policy Specification <ref> [84] </ref> and General System Security and Assurability Assessment [83] identify several issues with the ability of the DTOS prototype to support dynamic security policies. The most significant issues concern the kernel's ability to identify permissions which are in-use and to revoke those permissions when asked.
Reference: [85] <author> Secure Computing Corporation. </author> <title> DTOS Kernel Interfaces Document. </title> <institution> DTOS CDRL A003, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: Secure Computing Corporation CAGE Code 0HDC7 87-0902025A006 1.20, 27 June 1997 8 CDRL A008 Program Summary DTOS Kernel Interface Document (KID), CDRL A003 <ref> [85] </ref> This document defines the interfaces to the prototype kernel and security server. It is based upon the OSF KID [41] for the OSF MK14 version of the kernel. <p> However, the definition of inputs and outputs can be considered at many different interface levels. For the specification of the DTOS kernel, three possible interface levels were considered: The client interface through the MIG routines. This is the interface which is defined in the Kernel Interface Document <ref> [85] </ref>. If clients using this interface are to be analyzed against a set of application requirements, then this is the logical interface level to consider. However, because clients are not limited to using this interface, it is not sufficient for analyzing the potential actions of all clients.
Reference: [86] <institution> Secure Computing Corporation. DTOS Lessons Learned Report. DTOS CDRL A008, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> June </month> <year> 1997. </year>
Reference-contexts: The analysis includes descriptions of possible implementation scenarios, bandwidth estimation and techniques for slowing or closing the channel. DTOS Lessons Learned Report, CDRL A008 <ref> [86] </ref> This report includes the final report for the DTOS program and provides an overview of all of the technical efforts on the program. It describes significant accomplishments and obstacles encountered during these efforts and lessons learned while carrying out the program.
Reference: [87] <institution> Secure Computing Corporation. DTOS Risks and Mitigators Report. DTOS CDRL A015, Secure Computing Corporation, </institution> <address> 2675 Long Lake Road, Roseville, Minnesota 55113-2536, </address> <month> January </month> <year> 1997. </year>
Reference-contexts: It has two volumes, one documenting results of the performance tests and one documenting results of the functional tests. Note that performance testing was discontinued before the end of the program because of the difficulty of obtaining consistent results. DTOS Risks and Mitigators Report, CDRL A015 <ref> [87] </ref> This document provides a biannual listing of a database recording risks associated with the development of a distributed, trusted operating system based upon the DTOS conceptual model.
Reference: [88] <author> N. Shankar. </author> <title> A lazy approach to compositional verification. </title> <type> Technical Report TSL-93-08, </type> <institution> SRI International, </institution> <month> December </month> <year> 1993. </year>
Reference-contexts: 27 June 1997 Secure Computing Corporation CAGE Code 0HDC7 CDRL A008 Lessons Report 85 Section 9 Composability Study The Composability Study report describes a variation of Lamport's TLA specification language [2] and provides a framework for composition of specifications based on the work of Abadi and Lamport [2] and Shankar <ref> [88] </ref>. Composition is a technique for constructing more complex specifications by building upon simpler specifications. Viewed from the other direction, the composition framework allows the specification and verification of a complex system to be decomposed into the specification and verification of simpler components. <p> This has resulted in a general framework that can be used in analyzing and comparing other approaches. Finally, although our framework was inspired by the work of Abadi and Lamport [2] and Shankar <ref> [88] </ref> we have not merely incorporated their results as axioms of our composition framework. The framework has been built from basic definitions of concepts such as component and behavior using a mechanical proof checker (PVS).
Reference: [89] <author> J. M. Spivey. </author> <title> The fuzz Manual. </title> <month> July </month> <year> 1992. </year>
Reference-contexts: The tools that were readily available for use with Z at the onset of the DTOS program reflected the common usage of the language. Several tools existed for formatting specifications, but few for performing any kind of analysis on the specifications. The DTOS program used the f UZZ <ref> [89] </ref> tools for formatting and typechecking Z specifications. For formatting, f UZZ does an excellent job of making it easy to incorporate Z specifications into a L A T E X document.
Reference: [90] <author> J. M. Spivey. </author> <title> The Z Notation: A Reference Manual. </title> <publisher> Prentice Hall International, </publisher> <year> 1992. </year>
Reference-contexts: There were two families of tools used, and each is discussed in a separate section. 87-0902025A006 1.20, 27 June 1997 Secure Computing Corporation CAGE Code 0HDC7 CDRL A008 Lessons Report 47 5.4.1 The Z Specification Language and Tools The Z specification language <ref> [90] </ref> was the primary specification language used for DTOS assurance tasks. It was also used exclusively on the DTMach program which preceded DTOS. <p> Secure Computing Corporation CAGE Code 0HDC7 87-0902025A006 1.20, 27 June 1997 114 CDRL A008 Generalized Security Policy Specification 10.4 Conclusions of the GSPS In the GSPS, we used a formal specification language, Z <ref> [90] </ref>, to model a generic framework for systems containing an object manager that enforces policy decisions made by a security server. The DTOS microkernel was specified as an instance of the generic manager and three example security servers were modeled and analyzed.
Reference: [91] <author> Lynn Te Winkel, Ray Spencer, and Todd Fine. </author> <title> Adding Security to Commercial Microkernel-Based Systems. </title> <type> Technical Report RL-TR-96-75, </type> <institution> Rome Laboratory, Griffiss Air Force Base, </institution> <address> NY, </address> <month> January </month> <year> 1996. </year>
Reference-contexts: Moreover, SunSoft's lack of interest in the Spring system itself eliminated the possibility of any cooperative effort to use Spring as a base for a secure system. The results of this program are documented in <ref> [91] </ref>. Supporting a Secure DBMS on the DTOS Microkernel (August 1995 to August 1996) This program investigated the possibility of supporting a secure distributed database management system (DBMS) on the DTOS microkernel.
Reference: [92] <author> Phil Terry and Simon Wiseman. </author> <title> A `new' security policy model. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 215-228, </pages> <address> Oakland, CA, </address> <month> May </month> <year> 1989. </year> <note> 87-0902025A006 1.20, 27 June 1997 Secure Computing Corporation CAGE Code 0HDC7 CDRL A008 Lessons Report 141 </note>
Reference-contexts: Another goal of some integrity policies is separation of duty in which different subparts of an operation are executed by different processes. Separation of duty is equivalent to the n-person policies discussed in <ref> [92] </ref> with each principal performing a different duty. In Clark-Wilson policies, separation of duty is implemented by allowing each process to invoke only some of the TPs. An example of this is discussed in [50] for the processing of an invoice in a purchasing department.
Reference: [93] <institution> Trusted Information Systems, Inc. Trusted Mach System Architecture, </institution> <month> October </month> <year> 1995. </year>
Reference-contexts: Two microkernel systems designed to meet DoD multilevel security policies, KeyKOS/KeySAFE [34, 40] and Trusted Mach <ref> [93, 5] </ref>, have kernels which provide essentially the minimal amount of security function required to meet the policies for which they were designed, while still remaining free of any explicit dependencies on the particular policy.
Reference: [94] <author> Thomas Y. C. Woo and Simon S. Lam. </author> <title> Authorization in distributed systems: A new approach. </title> <journal> Journal of Computer Security, </journal> <year> 1994. </year> <institution> Secure Computing Corporation CAGE Code 0HDC7 87-0902025A006 1.20, </institution> <month> 27 June </month> <year> 1997 </year>
Reference-contexts: Furthermore, although much of the work in these areas has been within the context of discretionary control, Type Enforcement can implement them in mandatory control. 10.1.4 IBAC An Identity-Based Access Control (IBAC) policy <ref> [94] </ref> defines the allowed accesses to an object according to the identity of the individual making the access. Each row in the matrix represents the accesses allowed to processes operating on behalf of some particular individual, and the row is named by that individual's identity.
References-found: 94

