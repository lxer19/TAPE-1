URL: http://www.daimi.aau.dk/kursus/dArk/kildetekster/MicMac/doc/mic1.simulator.ps
Refering-URL: http://www.daimi.aau.dk/kursus/dArk/kildetekster/MicMac/doc/
Root-URL: http://www.daimi.aau.dk
Title: The Mic-1 Simulator  
Author: Kell Sonnichsen 
Date: January 26, 1993  
Abstract: This document describes the design and implementation of a simulator for the Mic-1 machine as described in [Tan90]. The simulator is developed as one of a set of tools for programming and simulation of the Mac-1 and Mic-1 machines of [Tan90]. These tools are made for use in an introductionary class of computer architecture (dArk1) at the Computer Science 
Abstract-found: 1
Intro-found: 1
Reference: [Arb81] <author> Moll Arbib, Kfoury. </author> <title> A Basis for Theoretical Computer Science. Texts and Monographs in Computer Science. </title> <publisher> Springer-Verlag, </publisher> <year> 1981. </year>
Reference-contexts: Shortly a transition system S can be described as being a couple of the form S = (K; T ) where K is the set of possible configurations and T K fi K is a binary relation, the transition-relation. The properties of binary relations are described in <ref> [Arb81] </ref>. When two configurations, k 1 and k 2 , are members of T , i.e. (k 1 ; k 2 ) 2 T , then there is said to be a transition between k 1 and k 2 : k 1 . k 2 .
Reference: [Fis92a] <author> Kim Fisker. </author> <title> The mac-1 simulator. </title> <type> Technical report, </type> <institution> DAIMI Computer Science Dept., Aarhus University, </institution> <year> 1992. </year>
Reference-contexts: given in [Tan90], section 4.4. 3.2 Mic-1 simulator: The line-oriented frontend The main reason making a line-oriented frontend was, in the Computer Architecture classes, to be able to test the Mic-1 interpretation-program of Mac-1 programs ([Tan90], Fig. 4-16) and compare it with the Mac-1 simulator, mac1, which is described in <ref> [Fis92a] </ref>. The output of the line-oriented frontend mic1 is a detailed snapshot describing the current state of the machine.
Reference: [Fis92b] <author> Kim Fisker. </author> <title> Microscope. </title> <type> Technical report, </type> <institution> DAIMI Computer Science Dept., Aarhus University, </institution> <year> 1992. </year>
Reference-contexts: As a consequence of that we decided to split the Mic-1 simulator in two parts: * A graphic simulator in the same style as microscope. This product is de scribed in <ref> [Fis92b] </ref>. * A line-oriented simulator. This product is described below. Both simulators - frontends had some common features, e.g. the simulation itself, and these were placed in a shared part a common backend, also described below.
Reference: [Or92] <author> Peter Orbaek. </author> <title> The mal language. </title> <type> Technical report, </type> <institution> DAIMI Computer Science Dept., Aarhus University, </institution> <year> 1992. </year>
Reference-contexts: 1 Introduction The Mic-1 machine as described in [Tan90] is a micro-architecture controlled by a 32-bit word micro-program. The MAL language is a symbolic language for programming Mic-1 and is described in [Tan90] and <ref> [Or92] </ref>.
Reference: [So92] <author> Kell Sonnichsen. Tanenbaums mikroarkitektur. </author> <type> Technical report, </type> <institution> DAIMI - Computer Science Dept., Aarhus University, </institution> <year> 1992. </year>
Reference-contexts: For that reason we spent some time with defining the Mic-1 machine. An additional discussion in danish of the Mic-1 machine can be found in <ref> [So92] </ref>.
Reference: [Tan90] <author> Andrew S. Tanenbaum. </author> <title> Structured Computer Organization. </title> <booktitle> Prentice-Hall International, </booktitle> <address> 3 edition, </address> <year> 1990. </year> <month> 14 </month>
Reference-contexts: 1 Introduction The Mic-1 machine as described in <ref> [Tan90] </ref> is a micro-architecture controlled by a 32-bit word micro-program. The MAL language is a symbolic language for programming Mic-1 and is described in [Tan90] and [Or92]. <p> 1 Introduction The Mic-1 machine as described in <ref> [Tan90] </ref> is a micro-architecture controlled by a 32-bit word micro-program. The MAL language is a symbolic language for programming Mic-1 and is described in [Tan90] and [Or92]. <p> The path of flow of the micro-program is controlled by the micro-program counter and micro sequence logic which again is determined by the result of the ALU and two bits of the microinstruction. The outlook of the micro-architecture can be found in Fig. 4-10 of <ref> [Tan90] </ref>. In addition to the functions described in [Tan90] we have added a 'halt' function to make it possible to stop the micro-machine. <p> The outlook of the micro-architecture can be found in Fig. 4-10 of <ref> [Tan90] </ref>. In addition to the functions described in [Tan90] we have added a 'halt' function to make it possible to stop the micro-machine. <p> To meet this criteria we programmed the simulators in Standard C which should ensure a great deal of portability. 1 UNIX is a trademark of AT&T Bell Labs. 2 3.1 The Mic-1 simulator: Backend The description of the micro-architecture in <ref> [Tan90] </ref> leaves some problems behind, e.g. what happens if you write to and read from the RAM at the same time. For that reason we spent some time with defining the Mic-1 machine. An additional discussion in danish of the Mic-1 machine can be found in [So92]. <p> We have chosen at least to ensure that the constant scratch-pad registers, e.g. +1 and amask, are properly initialized. Considering the Mac-1 interpreter of Fig. 4-16 in <ref> [Tan90] </ref> it is also necessary for the mpc and pc to be initialized to 0. The Control Store and Macro Memory are undefined, except that the input/output status registers at the bottom of Macro Memory ([Tan90], section 4.3.2) are set in a neutral state, i.e. <p> Macro Memory (<ref> [Tan90] </ref>, section 4.3.2) are set in a neutral state, i.e. Mic-1 is ready to receive input in the input buffer and it has written no output in the output buffer. 3.1.3 Interface with the RAM Writing to and reading from the RAM isn't described in much detail in [Tan90]. Problems arising from the many possibilities of combining the MAR, MBR, RD and WR bits of mir appeared to be tenacious. The fact that the RD or WR bits must be set in two succeding clock-cycles for a succesfull read or write made it even worse. <p> A succesfull write is made if the following conditions are met: 3 RD WR MAR MBR previous cycle 0 1 1 X this cycle 0 1 0 0 These requirements are in accordance with the examples of micro-programs given in <ref> [Tan90] </ref>, section 4.4. 3.2 Mic-1 simulator: The line-oriented frontend The main reason making a line-oriented frontend was, in the Computer Architecture classes, to be able to test the Mic-1 interpretation-program of Mac-1 programs ([Tan90], Fig. 4-16) and compare it with the Mac-1 simulator, mac1, which is described in [Fis92a]. <p> This option should not be used with the -a or -s options. Option -a make the simulator produce a snapshot after the interpretation of each Mac-1 opcode, i.e. when MPC is 0 (an assumption caused by the interpreter of Fig. 4-16 in <ref> [Tan90] </ref>). This option should not be used with the -i or -s options. This is the default option. If a tracefile is specified the snapshot is written onto the tracefile, otherwise to the standard output.
References-found: 6

