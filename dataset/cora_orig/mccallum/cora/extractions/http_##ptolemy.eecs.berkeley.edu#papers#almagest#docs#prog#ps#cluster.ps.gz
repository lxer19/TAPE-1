URL: http://ptolemy.eecs.berkeley.edu/papers/almagest/docs/prog/ps/cluster.ps.gz
Refering-URL: http://ptolemy.eecs.berkeley.edu/papers/almagest/prog.html
Root-URL: http://www.cs.berkeley.edu
Title: Chapter 6. Using the Cluster Class for Scheduling Galaxies and their relationship to Adjacency Lists
Author: Authors: Jos Luis Pino 
Note: 6.3  
Date: 6.1 Introduction  
Abstract: The Ptolemy kernel has three main facilities to aid in the implementation of scheduling algorithms: generic clustering mechanisms, graph iterators, and classical graph algorithms. In this chapter, we will cover the use of these facilities and some of the important methods currently available in Ptolemy to implement new scheduling algorithms. User-specifications done in Ptolemy are represented internally as a collection of annotated directed graphs that may contain cycles. Nodes in these directed graphs may themselves contain other directed graphs. An atomic node is either a Star, which defines code to implement the node operation, or a WormHole, which has an internal graph that is hidden from the outside. A WormHole is used when there is a change in the semantics between the internal and external graphs, such as a change in the Domain or Scheduler. For purposes of the outside graph, a WormHole is equivalent to a Star. A non-atomic node, or Galaxy, is a node which contains an internal graph which is visible from the outside. This internal graph is stored in a Galaxys BlockList. Finally, a Scheduler is a class that determines the firing order of atomic nodes in a graph. WormHoles, Galaxies and Stars are all derived from the class Block. A Block contains PortLists, which store a list of PortHoles that provide locations to connect input or output arcs to the Block. Blocks also contain StateLists, which may either be user-specified parameters or run-time states that are used when a graph is executed. A user specification is compiled into an internal representation known as an interpreted universe (InterpUniverse). Currently, the user specifications are in the form of ptcl or oct facets. In the future there will probably be also a Tycho specification format. An InterpUniverse captures the user hierarchy in the form of a directed graph of WormHoles, Galaxies and Stars. The InterpUniverse is derived from Galaxy and contains the top-level user-specification in its BlockList. Every other level of the user specified hierarchy is represented by either a Wormhole or Galaxy embedded inside of its parent Galaxy. All Blocks have a parent Block pointer. The parent of a Block is the Galaxy or WormHole in which the Block is embedded. The InterpUniverse, which is the top-level Galaxy user specification, has its parent pointer set to NULL. 
Abstract-found: 1
Intro-found: 0
Reference: [Cor90] <author> Cormen, Leiserson and Rivest, </author> <title> Introduction to Algorithms, </title> <address> New York: </address> <publisher> MIT Press, </publisher> <year> 1990. </year>
Reference-contexts: The InterpUniverse, which is the top-level Galaxy user specification, has its parent pointer set to NULL. 6.3 Galaxies and their relationship to Adjacency Lists To define graph algorithms, adjacency-lists and adjacency-matrices are commonly used to represent a directed graph <ref> [Cor90] </ref>. An adjacency-matrix is a square matrix where 6-2 Using the Cluster Class for Scheduling U. C. Berkeley Department of EECS there is one column, i, and one row, j, for each node, i, the graph.
Reference: [Mur94] <author> Murthy, Bhattacharyya, and Lee, </author> <title> Combined code and data minimization for synchronous dataow programs, </title> <institution> Memorandum UCB/ERL M94/93, University of California at Berkeley, </institution> <address> December,1994. (http://ptolemy.eecs.berkeley.edu/ papers/jointCodeDataMinimize) </address>
Reference-contexts: The HierScheduler in the current version of Ptolemy is a prototype of the hierarchical parallel scheduler detailed in [Pin95]. In addition, we have a specialized loop scheduler <ref> [Mur94] </ref> which also uses the new cluster facilities. The class Cluster is derived from the DynamicGalaxy and as such manages its own memory. The Cluster classes use ClusterPorts which are derived from GalPort. The main difference between the ClusterPorts and GalPorts is that ClusterPorts maintain a farSidePort pointer.
Reference: [Pin95] <author> Pino, Bhattacharyya, and Lee, </author> <title> A Hierarchical Multiprocessor Scheduling Framework for Synchronous Dataow Graphs Memorandum UCB/ERL M95/ 36, </title> <institution> University of California at Berkeley, </institution> <month> May, </month> <year> 1995. </year> <title> (http://ptolemy.eecs.ber keley.edu/papers/hierStaticSched) 6-8 Using the Cluster Class for Scheduling U. </title> <address> C. </address> <institution> Berkeley Department of EECS </institution>
Reference-contexts: The HierScheduler in the current version of Ptolemy is a prototype of the hierarchical parallel scheduler detailed in <ref> [Pin95] </ref>. In addition, we have a specialized loop scheduler [Mur94] which also uses the new cluster facilities. The class Cluster is derived from the DynamicGalaxy and as such manages its own memory. The Cluster classes use ClusterPorts which are derived from GalPort.
References-found: 3

