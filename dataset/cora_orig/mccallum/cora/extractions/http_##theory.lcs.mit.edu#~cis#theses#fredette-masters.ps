URL: http://theory.lcs.mit.edu/~cis/theses/fredette-masters.ps
Refering-URL: http://theory.lcs.mit.edu/~cis/theses.html
Root-URL: 
Title: An Implementation of SDSI The Simple Distributed Security Infrastructure  
Author: by Matthew H. Fredette Ronald L. Rivest Arthur C. Smith 
Degree: Submitted to the Department of Electrical Engineering and Computer Science in partial fulfillment of the requirements for the degree of Master of Engineering in Electrical Engineering and Computer Science at the  All Rights Reserved. The author hereby grants to M.I.T. permission to reproduce and distribute publicly paper and electronic copies of this thesis and to grant others the right to do so. Author  Certified by  Edwin Sibley Webster Professor of Computer Science and Engineering Thesis Supervisor Accepted by  Chairman, Department Committee on Graduate Theses  
Note: c fl1997  
Date: May 1997  May 20, 1997  
Affiliation: MASSACHUSETTS INSTITUTE OF TECHNOLOGY  Massachusetts Institute of Technology.  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Gillian D. Elcock. </author> <title> A web-based user interface for a simple distributed security infrastructure (SDSI). </title> <type> Master's thesis, </type> <institution> M.I.T., </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: The most important of these tools is a command-line shell that can be used to perform SDSI queries, sign and issue certificates, and that also serves as the anchor point for the SDSI user interface <ref> [1] </ref>. <p> SDSI library cipher and signature functions. 2.7 Performance notes This SDSI library is a concrete, working implementation that has seen some tinkering use by its developer, and some more involved use by the developer of the SDSI user 4 Professor David Gifford introduced me to this great term. 42 interface <ref> [1] </ref>. As such, there are some performance notes to relate, as well as some retrospection about the how the library was written. Concern for the library's speed came from the sluggish response times seen from the SDSI servers brought up during the user interface development. <p> This principal definition should then be placed in a new directory, created to contain it and the directories for the server's object cache and localities. Registering new principals as clients of the server involves using the SDSI shell or its user interface <ref> [1] </ref>, to sign and cache new membership certificates as the server principal. Each new Membership.Cert: will assert that one new client principal is a member of a special group belonging to the server 2 . <p> This "SDSI shell" is a command-line interface to the SDSI library, and allows the user to type commands to manipulate, sign, and encrypt SDSI objects and execute queries. It also has hooks in it to enable a larger, more user-friendly World Wide Web interface <ref> [1] </ref> to execute its shell commands automatically. 4.1 The PGP-to-SDSI converter The PGP-to-SDSI converter is quite possibly the most significant of the tools, because, as its name implies, it forges a link from PGP [2] to SDSI. <p> Once generated through this process, a user's principal definition can be stored in a file and be used in interactions with the SDSI shell or user interface <ref> [1] </ref>. Normally, this is the case, and the user will proceed immediately to use the shell or user interface to sign and issue the selected certificates formed from his PGP public keyring. <p> The command environment is rather flexible: named variables are used with all commands, and command results are returned in new named variables. sdsish also serves to support the SDSI Web-based graphical user interface <ref> [1] </ref>. It does this by running as a network daemon, allowing certain locally-running Perl scripts to connect to it and issue shell commands. <p> The shell also has a graphical user interface (GUI) mode, which exists to support Gillian Elcock's Web-based user interface <ref> [1] </ref>, by providing its command set to Perl scripts triggered by a user's interactions with a Web browser. The GUI mode is started by invoking the shell as sdsiui. <p> Once a connection from a GUI Perl script is successfully established, the shell executes the commands presented to it, and returns their results. More detail about the GUI, its architecture, and the authentication mechanism described loosely above, can be found in <ref> [1] </ref>. 4.3.3 The code, adding new commands The code that makes up sdsish, like that for sdsi-rebuild-cleanup, isn't the prettiest. This is because sdsish was originally conceived more as a tool for testing, and not as a prime-time program.
Reference: [2] <author> Simson Garfinkel. PGP: </author> <title> Pretty Good Privacy. </title> <publisher> O'Reilly & Associates, </publisher> <year> 1994. </year>
Reference-contexts: The most important of these tools is a command-line shell that can be used to perform SDSI queries, sign and issue certificates, and that also serves as the anchor point for the SDSI user interface [1]. Other tools include a utility that converts PGP <ref> [2] </ref> public key rings to signable SDSI certificates, and PGP private key rings to SDSI principal definitions, and a utility that rebuilds and cleans up structures based on the SDSI object cache. 9 Chapter 2 The SDSI Library The SDSI library is the heart of this SDSI implementation; the SDSI server <p> Currently, the only members of these two sections are the Principal: and Private-Key: objects, respectively. The private section is encrypted, or sealed, in a passphrase, much like private keyring data is sealed in PGP <ref> [2] </ref>. A passphrase is turned into an IDEA [5] key using MD5 [9], which is then used by the library to unseal the private section of the definition. principal in SDSI, whether it represents a human, a server, or something else, has a principal definition. <p> It also has hooks in it to enable a larger, more user-friendly World Wide Web interface [1] to execute its shell commands automatically. 4.1 The PGP-to-SDSI converter The PGP-to-SDSI converter is quite possibly the most significant of the tools, because, as its name implies, it forges a link from PGP <ref> [2] </ref> to SDSI. It can do two things: given a PGP private key ring, it will make a SDSI principal definition (Section 2.1.6), and given a PGP public key ring, it will make crude SDSI name-binding certificates, that the user can finish and sign at his convenience.
Reference: [3] <author> Arne Helme. </author> <title> File formats used by PGP 2.6. </title> <note> http://www.gildea.com/pgp/pgformat/pgformat.html, May 1994. </note>
Reference-contexts: When those other PGP-savvy friends, relatives, and colleagues do the same, immediately a sizeable number of SDSI linked local namespaces will exist. Virtually no choices were involved in the design of this converter; once the PGP keyring format <ref> [3] </ref> was found, writing the converter was more of an exercise in using and an opportunity to test the cryptographic routines in the SDSI library.
Reference: [4] <author> Stephen T. Kent. </author> <title> Internet privacy enhanced mail. </title> <journal> Communications of the ACM, </journal> <volume> 36(8) </volume> <pages> 48-60, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: Introduction The Simple Distributed Security Infrastructure [10] is a simple public-key infrastructure being developed by Professors Rivest and Lampson, in response to the complexity of proposed infrastructures like X.509 <ref> [4] </ref>. In SDSI, a public key that is used to sign statements is called a principal. Any principal can be a certificate authority, signing certificates and other objects that are then distributed from the principal's one or more online Internet servers.
Reference: [5] <author> Xuejia Lai. </author> <title> On the design and security of block ciphers. </title> <editor> In J.L. Massey, editor, </editor> <booktitle> ETH Series on Information Processing, </booktitle> <volume> volume 1. </volume> <publisher> Hartung-Gorre Verlag, </publisher> <address> Konstanz, Switzerland, </address> <year> 1992. </year>
Reference-contexts: Currently, the only members of these two sections are the Principal: and Private-Key: objects, respectively. The private section is encrypted, or sealed, in a passphrase, much like private keyring data is sealed in PGP [2]. A passphrase is turned into an IDEA <ref> [5] </ref> key using MD5 [9], which is then used by the library to unseal the private section of the definition. principal in SDSI, whether it represents a human, a server, or something else, has a principal definition. <p> glues SHA to us: */ typedef _SDSI_TYPE_8_UINT BYTE; typedef _SDSI_TYPE_32_UINT LONG; #if (_SDSI_TYPE_32_BYTEORDER != 0x4321) #define LITTLE_ENDIAN #endif #else /* _SDSI_CRYPTO_PRIMITIVES */ /* this glues us to SHA: */ #define BYTE _SDSI_TYPE_8_UINT #define LONG _SDSI_TYPE_32_UINT #endif /* _SDSI_CRYPTO_PRIMITIVES */ #define SHA_BLOCKSIZE 64 #define SHA_DIGESTSIZE 20 typedef struct - LONG digest <ref> [5] </ref>; /* message digest */ LONG count_lo, count_hi; /* 64-bit bit count */ LONG data [16]; /* SHA data buffer */ - SHA_INFO; void sha_init (SHA_INFO *); void sha_update (SHA_INFO *, BYTE *, int); void sha_final (SHA_INFO *); void sha_stream (SHA_INFO *, FILE *); void sha_print (SHA_INFO *); /* lose any
Reference: [6] <author> David Gadbois, et al. </author> <note> GC FAQ draft. http://www.centerline.com/people/chase/GC/GC-faq.html. </note>
Reference-contexts: These points go into great detail about how the heap is operated. They do not discuss the decision-making process that yielded these details, however, as that process consisted mostly of trial-and-error until something that worked was obtained. Definitions of much of the terminology used below can be found in <ref> [6] </ref>. * A heap block is an individually allocated buffer, meant to hold a single C struc ture. * Heap blocks are allocated one at a time, and a sorted linked list of all currently allocated blocks is kept, with the most recently allocated block at the front of the list. <p> * All of the greatest living frame values on the blocks list are interpreted as a monotonically decreasing lower bound on the allocation frame that, for the remainder of the blocks list, has not closed yet. * The garbage collector itself is technically characterized as a mostly-precise mark-and-sweep garbage collector <ref> [6] </ref>. To be mostly-precise means a garbage collector 1 The need for the idea of an object's top is best seen by the top-description of a sdsiList. 26 : : : permits a mixture of precisely and conservatively identified val-ues.
Reference: [7] <author> Matthew Fredette. </author> <title> A SDSI 1.0 Implementation. </title> <note> http://theory.lcs.mit.edu/~cis/sdsi.html, (to appear) 1997. </note>
Reference-contexts: Time constraints prevent giving full attention to all of the more than 10,000 lines that make up the library. The SDSI library documentation [8] includes a documented prototype and description of each function, and, since one of the chief goals was to make the library code <ref> [7] </ref> well-commented and readable, code fragments usually follow straight from the English comments that precede them. <p> speed the process of determining if a sdsiSimpleString holds a SDSI reserved word. (See Section 2.1.4 for an explanation of SDSI reserved words.) The remainder of this library's common data structures will not be presented in 12 such detail here, since their actual definitions can be found in the code <ref> [7] </ref>. Instead, just the name of each abstraction, and English descriptions of its purpose and important contents are given. This is done to provide some justification for the structures used by this library, and guidance for similar decisions in other implementations.
Reference: [8] <author> Matthew Fredette. </author> <title> SDSI Library Documentation. </title> <note> http://theory.lcs.mit.edu/~cis/sdsi/library-documentation.html, May 1997. </note>
Reference-contexts: Time constraints prevent giving full attention to all of the more than 10,000 lines that make up the library. The SDSI library documentation <ref> [8] </ref> includes a documented prototype and description of each function, and, since one of the chief goals was to make the library code [7] well-commented and readable, code fragments usually follow straight from the English comments that precede them. <p> This value corresponds directly to the flags value passed in to the sdsi sign object library function; refer to the SDSI library documentation <ref> [8] </ref> for more information on this and other functions' possible flag values. 62 sdsish&gt; help command summary: help or ? displays help define defines a new variable print prints a variable get executes a Get query lookup performs a namespace lookup hash hashes an object eval evaluates an object eval-to-cert -
Reference: [9] <author> Ronald L. Rivest. </author> <title> The MD5 message digest algorithm. Internet Request for Comments, </title> <type> RFC 1321, </type> <month> April </month> <year> 1992. </year> <month> 79 </month>
Reference-contexts: Currently, the only members of these two sections are the Principal: and Private-Key: objects, respectively. The private section is encrypted, or sealed, in a passphrase, much like private keyring data is sealed in PGP [2]. A passphrase is turned into an IDEA [5] key using MD5 <ref> [9] </ref>, which is then used by the library to unseal the private section of the definition. principal in SDSI, whether it represents a human, a server, or something else, has a principal definition.
Reference: [10] <author> Ronald L. Rivest and Butler Lampson. </author> <title> SDSI a simple distributed security in-frastructure. </title> <note> http://theory.lcs.mit.edu/~rivest/sdsi10.html, September 1996. </note>
Reference-contexts: Introduction The Simple Distributed Security Infrastructure <ref> [10] </ref> is a simple public-key infrastructure being developed by Professors Rivest and Lampson, in response to the complexity of proposed infrastructures like X.509 [4]. In SDSI, a public key that is used to sign statements is called a principal.
Reference: [11] <author> Bruce Schneier. </author> <title> Applied Cryptography. </title> <publisher> John Wiley & Sons, </publisher> <year> 1996. </year> <month> 80 </month>
Reference-contexts: Like the IDEA module, this has been glued to the SDSI machine-dependent header files, so no configuration of this module is necessary. md5/md5.h, the glue header file, is a modified version of the original md5.h. sha This directory contains a implementation of SHA derivative of one found in <ref> [11] </ref>. It has has been glued to the SDSI machine-dependent header files, so no 76 configuration of this module is necessary. sha/sha.h, the glue header file, is a modified version of the original sha.h.
References-found: 11

