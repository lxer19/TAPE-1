URL: ftp://ftp.csd.abdn.ac.uk/pub/byrne/abs.ps
Refering-URL: http://www.csd.abdn.ac.uk/~byrne/publications.html
Root-URL: 
Title: AUCS/TR9405 Building Agent-Based Systems  
Author: Ciara Byrne and Peter Edwards 
Note: December 2, 1994  
Address: King's College ABERDEEN, AB9 2UE, Scotland, UK.  
Affiliation: Department of Computing Science University of Aberdeen  
Abstract: One major focus of effort in Distributed Artificial Intelligence (DAI) research has been the development of software environments which support the construction of systems involving multiple interacting agents. Such systems can be divided into experimental testbeds and frameworks for building agent-based applications. This document reviews and compares a number of systems from both categories. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E.M. Allen. Yaps: </author> <title> Yet Another Production System. </title> <type> Technical Report 85-22, </type> <institution> Dept of Computer Science, University of Maryland, </institution> <year> 1983. </year>
Reference-contexts: The contractor sends reports to indicate its status. A manager sends a termination message to interrupt a process. Idle nodes may broadcast node availability announcements. Languages and Applications A prototype of YAMS has been implemented in YAPS (Yet Another Production System) <ref> [1] </ref> and Franz Lisp and runs on a VAX 11/785 and 2 Sun Workstations which communicate over Ethernet. 2.2 GRATE* GRATE* [21] [22] is described as a general-purpose cooperation framework based on the idea of Joint Responsibility. It is an expanded version of the earlier GRATE system [21].
Reference: [2] <author> N. Avouris, M. H. V. Liederkerke, and L. Sommaruga. </author> <title> Evaluating the CooperA Experiment : The Transition from an Expert System Module to a Distributed Artificial Intelligence Testbed for Cooperating Expert Systems. </title> <booktitle> In Proceedings of the 9th Workshop on Distributed AI, </booktitle> <year> 1989. </year>
Reference-contexts: Individual agents have a number of operators which are used as actions in plans, a set of goals and a set of beliefs about their own state and those of other agents. The system is written in Prolog and runs on Sun workstations. CooperA (COOPERating Agents) <ref> [2] </ref> is a software environment that supports the cooperation of heterogeneous knowledge-based systems.
Reference: [3] <author> T. Bouron, J. Ferber, and F. Samuels. MAGES: </author> <title> A Multi-Agent Testbed for Heterogeneous Agents. </title> <editor> In Y. Damanzeau and J-P Muller, editors, </editor> <booktitle> Decentralised A.I. 2 - Proceedings of MAAMAW'90. </booktitle> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: Cooperation and Community Organisation There are no pre-defined cooperation strategies in TRUCKWORLD and agents are peers. Languages and Platforms Most of the TRUCKWORLD simulator is written in Com- mon Lisp. Additional components such as a graphics display require CLX and CLIM. 3.4 MAGES MAGES (Multi AGEent System) <ref> [3] </ref> is a testbed designed to investigate interactions between heterogeneous agents, i.e. agents with different architectures and behaviours. Form of an Agent Agents are defined according to a hierarchy of agent classes.
Reference: [4] <author> J-P Briot. Actalk: </author> <title> A Testbed for Classifying and Designing Actor Languages in the Smalltalk-80 Environment. </title> <booktitle> In ECOOP, </booktitle> <year> 1989. </year>
Reference-contexts: Many types of organisation are possible including hierarchical and democratic. Experimentation MAGES has been tested on simple applications such as a predator- prey problem and a simulation of a Dungeons and Dragons role-playing game. Languages and Platforms used The testbed is implemented in an extension of ACTALK <ref> [4] </ref>, a generic actor language defined in SMALLTALK [16]. 3.5 RATMAN RATMAN (The Rational Agents Testbed for Multi Agent Networks) [6] is a logic-based testbed for heterogeneous or homogeneous, rational agents.
Reference: [5] <author> B. Burmeister and K. Sundermeyer. </author> <title> Cooperative Problem Solving Guided by Intentions and Perception. </title> <booktitle> In Decentralized A.I. 3 Proceedings of MAAMAW'91, </booktitle> <pages> pages 77-92. </pages> <publisher> North-Holland, </publisher> <year> 1991. </year>
Reference-contexts: DASEDIS (Development and Simulation Environment for Distributed Intelligent Sys- tems) <ref> [5] </ref> is a multi-agent testbed centred around the idea of long and short-term intentions. The latter type are directly bound to actions. There are seperate components in each agent for performing local and social actions. Communication is by message-passing.
Reference: [6] <author> H. Burxhert and J. Muller. RATMAN: </author> <title> Rational Agents Testbed for Multi-Agent Networks. </title> <booktitle> In Decentralized A.I. 3 Proceedings of MAAMAW'91, </booktitle> <pages> pages 243-257. </pages> <publisher> North-Holland, </publisher> <year> 1990. </year>
Reference-contexts: Languages and Platforms used The testbed is implemented in an extension of ACTALK [4], a generic actor language defined in SMALLTALK [16]. 3.5 RATMAN RATMAN (The Rational Agents Testbed for Multi Agent Networks) <ref> [6] </ref> is a logic-based testbed for heterogeneous or homogeneous, rational agents. A rational agent is one which will not take any actions which it believes will impede the achievement of its goals.
Reference: [7] <author> P.R. Cohen, M.L. Greenberg, D.M. Hart, and A.E. Howe. </author> <title> Trial by Fire: Requirements for Agents in Complex Environments. </title> <journal> AI Magazine, </journal> <pages> pages 33-48, 10(3), </pages> <year> 1989. </year>
Reference-contexts: Languages and Platforms There have been five different implementations of DVMT on platforms ranging from the DEC VAX to the TI Explorer Lisp Machine and the Sequent multiprocessor. 3.2 PHOENIX Research Problem PHOENIX [17] <ref> [7] </ref> is a testbed designed to investigate a range of issues including the coordination of multiple planning activities and the design of distributing planning algorithms. PHOENIX is a dedicated testbed based on a fire-fighting domain. Domain The agents' world is represented by a map with varying terrain and weather.
Reference: [8] <author> D.D. Corkill and V. R. Lesser. </author> <title> A Goal-Directed Hearsay-II Architecture: Unifying Data and Goal-Directed Control. </title> <type> Technical Report 81-15, </type> <institution> Department of Computing Information Science, University of Massachusetts, </institution> <year> 1981. </year>
Reference-contexts: Spatially distributed nodes develop partial maps in parallel and exchange them in order to converge on a complete map. Form of a Agent Agents in DVMT have a structure based on the Hearsay-II <ref> [8] </ref> blackboard architecture 2 . As shown in Figure 3, the core elements of a DVMT agent are a goal blackboard, data blackboard, goal processor, scheduler, blackboard monitor and a set of knowledge sources (KSs). An agent executes a KS in order to post hypotheses on the data blackboard.
Reference: [9] <author> J. Doran, H. Caravajal, Y.J. Choo, and Y. Li. </author> <title> The MCS Multi-Agent Testbed: Developments and Experiments. </title> <editor> In S. M. Deen, editor, </editor> <booktitle> Cooperating Knowledge-Based Systems 1990, </booktitle> <pages> pages 240-251. </pages> <publisher> Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: It simulates a 2-dimensional environment in which a population of mobile agents initially compete for resources and over time form cooperative organisations. The system is written in Prolog. MCS <ref> [9] </ref> is a testbed based around the IPEM non-linear, non-hierarchical planner which interleaves plan generation, elaboration, monitoring and execution. Each agent has a copy of the planner.
Reference: [10] <author> J. Doran, M. Palmer, N. Gilbert, and P. Mellars. </author> <title> The EOS Project: Modelling Upper Palaeolithic Social Change. </title> <editor> In N. Gilbert and J. Doran, editors, </editor> <title> Simulating Societies. </title> <publisher> UCL Press. </publisher>
Reference-contexts: Cooperation and Community Organisation No cooperation protocols are built into MYWORLD. If cooperation is required, the programmer has to incorporate his/her own protocol. Experimentation Experiments have concentrated on recreating limited parts of the EOS project <ref> [10] </ref>. Languages and Platforms MYWORLD is written in Pop-11 and runs on Sun Sparc- stations. 4 Other Systems Only brief descriptions of the following testbeds and frameworks are given because at present, we have insufficient information to give fuller descriptions. 4 OTHER SYSTEMS 19 EOS [10] is a specialised testbed designed <p> parts of the EOS project <ref> [10] </ref>. Languages and Platforms MYWORLD is written in Pop-11 and runs on Sun Sparc- stations. 4 Other Systems Only brief descriptions of the following testbeds and frameworks are given because at present, we have insufficient information to give fuller descriptions. 4 OTHER SYSTEMS 19 EOS [10] is a specialised testbed designed to model the growth of social complexity in the Upper Palaeolithic period of Southwestern Europe. It simulates a 2-dimensional environment in which a population of mobile agents initially compete for resources and over time form cooperative organisations. The system is written in Prolog.
Reference: [11] <author> E.D. Durfee, V.R. Lesser, and D.E. Corkill. </author> <title> Cooperation Through Communication in a Distributed Problem Solving Network. </title> <editor> In M. N. Huhns, editor, </editor> <booktitle> Distributed Artificial Intelligence. </booktitle> <publisher> Pitman Publishers, </publisher> <year> 1987. </year>
Reference-contexts: The objective of this kind of experimentation is to interpret and generalise experimental results in order to apply them when building agent-based applications. 3.1 DVMT Research Problem The Distributed Vehicle Monitoring Testbed <ref> [11] </ref> [23] was one of the earliest testbeds developed. It aimed to provide a means of investigating a wide range of DAI issues through experimentation. Domain The task addressed by DVMT is that of distributed vehicle monitoring.
Reference: [12] <author> R. Fikes, M. Cutkosky, T. Gruber, and J. V. Baalen. </author> <title> Knowledge Sharing Technology Project Overview. </title> <type> Technical Report KSL-91-71, </type> <institution> Knowledge Systems Laboratory, Stanford University, </institution> <year> 1991. </year>
Reference-contexts: is the best way to support user interaction in a multi-agent system? For example, should users participate as agents and if so, should they act as peers with system agents? * How can agents with different knowledge representations communicate? One of the initiatives of the DARPA Knowledge Sharing Effort [15], <ref> [12] </ref>, [13] involves the design of an interlingua for knowledge interchange. An interlingua is a common language which two heterogeneous systems can use to express their knowledge and therefore to share knowledge.
Reference: [13] <author> T. Finin, R. Fritzson, and D. McKay et al. </author> <title> An Overview of KQML: A Knowledge Query and Manipulation Language. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Maryland, </institution> <year> 1992. </year>
Reference-contexts: the best way to support user interaction in a multi-agent system? For example, should users participate as agents and if so, should they act as peers with system agents? * How can agents with different knowledge representations communicate? One of the initiatives of the DARPA Knowledge Sharing Effort [15], [12], <ref> [13] </ref> involves the design of an interlingua for knowledge interchange. An interlingua is a common language which two heterogeneous systems can use to express their knowledge and therefore to share knowledge.
Reference: [14] <author> L. Gasser, C. Braganza, and R. Herman. MACE: </author> <title> A Flexible Testbed for Distributed AI Research. </title> <booktitle> In Distributed Artificial Intelligence, </booktitle> <pages> pages 119-153. </pages> <publisher> Pitman Publishers, </publisher> <year> 1987. </year> <note> REFERENCES 29 </note>
Reference-contexts: Platforms and Languages The PCM component of ARCHON agents is constructed using an object-oriented, rule-based system called MIKIC-II. The IS layer may be written in any language. 2.4 MACE The dominant metaphor of MACE <ref> [14] </ref> is that of a collection of intelligent, semi-autonomous agents interacting in an organised fashion; an organisation which solves problems. Form of an Agent Agents have three aspects: they contain knowledge, sense their environment and take actions. They are self-contained, active message-passing objects.
Reference: [15] <author> M.R. Genesereth and R.E. Fikes et al. </author> <title> Knowledge Interchange Format Reference Manual. </title> <type> Technical Report Logic-92-1, </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1992. </year>
Reference-contexts: What is the best way to support user interaction in a multi-agent system? For example, should users participate as agents and if so, should they act as peers with system agents? * How can agents with different knowledge representations communicate? One of the initiatives of the DARPA Knowledge Sharing Effort <ref> [15] </ref>, [12], [13] involves the design of an interlingua for knowledge interchange. An interlingua is a common language which two heterogeneous systems can use to express their knowledge and therefore to share knowledge.
Reference: [16] <author> A. Goldberg. </author> <title> Smalltalk-80: The Language and its Implementation. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: Experimentation MAGES has been tested on simple applications such as a predator- prey problem and a simulation of a Dungeons and Dragons role-playing game. Languages and Platforms used The testbed is implemented in an extension of ACTALK [4], a generic actor language defined in SMALLTALK <ref> [16] </ref>. 3.5 RATMAN RATMAN (The Rational Agents Testbed for Multi Agent Networks) [6] is a logic-based testbed for heterogeneous or homogeneous, rational agents. A rational agent is one which will not take any actions which it believes will impede the achievement of its goals.
Reference: [17] <author> M. Greenberg and L. Westbrook. </author> <title> The PHOENIX Testbed. </title> <type> Technical Report COINS TR 90-19, </type> <institution> Department of Computer and Information Science, University of Massachusetts, </institution> <year> 1990. </year>
Reference-contexts: Languages and Platforms There have been five different implementations of DVMT on platforms ranging from the DEC VAX to the TI Explorer Lisp Machine and the Sequent multiprocessor. 3.2 PHOENIX Research Problem PHOENIX <ref> [17] </ref> [7] is a testbed designed to investigate a range of issues including the coordination of multiple planning activities and the design of distributing planning algorithms. PHOENIX is a dedicated testbed based on a fire-fighting domain. Domain The agents' world is represented by a map with varying terrain and weather.
Reference: [18] <author> S. Hanks, M.E. Pollack, and P.R. Cohen. </author> <title> Benchmarks, Testbeds, Controlled Experimentation, and the Design of Agent Architectures. </title> <journal> AI Magazine, </journal> <pages> pages 17-42, 14(3), </pages> <year> 1993. </year>
Reference-contexts: The fireboss does not completely control the activities of the other agents since they decide how to interpret and execute its directives. Platforms and Languages Phoenix is implemented in Common Lisp and runs on the Explorer II. 3.3 TRUCKWORLD Research Problem TRUCKWORLD [25] <ref> [18] </ref> is a planning testbed designed to be used in studying the behaviour of reactive agents in dynamic worlds. Domain TRUCKWORLD agents live in an world consisting of objects, which exist in locations, and roads which connect locations. <p> In this case, the testbed should record the total number of actions taken and the number of successful actions. The following have been suggested <ref> [18] </ref> as desirable features in a testbed: * A realistic world with many features and complex causal relations. * Sensors and effectors which are neither completely reliable nor cost-free. * Exogeneous events, i.e. unplanned events, occur periodically in the simulated world.
Reference: [19] <editor> M. N. Huhns, editor. </editor> <booktitle> Distributed Artificial Intelligence. </booktitle> <publisher> Pitman Publishers, </publisher> <year> 1987. </year>
Reference-contexts: Reusability: A small, independent expert system could be a part of many distributed expert systems its expertise would not need to be reimple <br>- mented for each by integrating them into distributed systems. <ref> [19] </ref> Communication: All the frameworks discussed use asynchronous message-passing as a communication mechanism and assume that all agents use the same communication language. Pre-Existing Systems: Some of the frameworks described, e.g. ARCHON and MECCA provide facilities for the "agentification" of existing systems.
Reference: [20] <author> N. R. Jennings and J.A. Pople. </author> <title> Design and Implementation of ARCHON's Coordination Module. In S.M. </title> <editor> Deen, editor, </editor> <booktitle> Proceedings of the Special Interest Group on Cooperating Knowledge Based Systems 1993, </booktitle> <pages> pages 61-82. </pages> <institution> University of Keele, </institution> <year> 1993. </year>
Reference-contexts: However, we have described a selection of recent systems, as well as some important early ones. 2 Frameworks As mentioned above, frameworks are divided into dedicated frameworks, e.g. the domain of YAMS [26] is distributed factory control, and general-purpose frameworks, e.g. ARCHON <ref> [20] </ref>. Another difference between frameworks is that some systems require all agents to be built from first principles. Other systems, e.g. GRATE* [21] and ARCHON [20], are more flexible and may be used either to custom-build agents or expand existing problem-solvers in order to incorporate them into an ABS. 2.1 YAMS <p> ARCHON <ref> [20] </ref>. Another difference between frameworks is that some systems require all agents to be built from first principles. Other systems, e.g. GRATE* [21] and ARCHON [20], are more flexible and may be used either to custom-build agents or expand existing problem-solvers in order to incorporate them into an ABS. 2.1 YAMS YAMS (Yet Another Manufacturing System) [26] is a prototype, distributed factory control system in which tasks are allocated to nodes using the Contract Net negotiation <p> Platforms and Languages GRATE* is written in Allegro Common Lisp CLOS and runs on a Sun Sparcstation. 2.3 ARCHON The ARchitecture for Cooperative Heterogeneous ON-line systems <ref> [20] </ref> is designed for use in building complex, industrial control applications.
Reference: [21] <author> N.R. Jennings. </author> <title> Joint Intentions as a Model of Multi-Agent Cooperation. </title> <type> PhD thesis, </type> <institution> Queen Mary and Westfield College, University of London, </institution> <year> 1992. </year>
Reference-contexts: ARCHON [20]. Another difference between frameworks is that some systems require all agents to be built from first principles. Other systems, e.g. GRATE* <ref> [21] </ref> and ARCHON [20], are more flexible and may be used either to custom-build agents or expand existing problem-solvers in order to incorporate them into an ABS. 2.1 YAMS YAMS (Yet Another Manufacturing System) [26] is a prototype, distributed factory control system in which tasks are allocated to nodes using the <p> Idle nodes may broadcast node availability announcements. Languages and Applications A prototype of YAMS has been implemented in YAPS (Yet Another Production System) [1] and Franz Lisp and runs on a VAX 11/785 and 2 Sun Workstations which communicate over Ethernet. 2.2 GRATE* GRATE* <ref> [21] </ref> [22] is described as a general-purpose cooperation framework based on the idea of Joint Responsibility. It is an expanded version of the earlier GRATE system [21]. The system is intended to produce robust industrial applications for use in dynamic and unpredictable environments. <p> Another Production System) [1] and Franz Lisp and runs on a VAX 11/785 and 2 Sun Workstations which communicate over Ethernet. 2.2 GRATE* GRATE* <ref> [21] </ref> [22] is described as a general-purpose cooperation framework based on the idea of Joint Responsibility. It is an expanded version of the earlier GRATE system [21]. The system is intended to produce robust industrial applications for use in dynamic and unpredictable environments.
Reference: [22] <editor> N.R. Jennings and E.H. Mamdani. </editor> <title> Using Joint Responsibility to Coordinate Collaborative Problem Solving in Dynamic Environments. </title> <booktitle> In Proceedings of the Tenth National Conference on Artificial Intelligence, </booktitle> <pages> pages 269-275, </pages> <year> 1992. </year>
Reference-contexts: Idle nodes may broadcast node availability announcements. Languages and Applications A prototype of YAMS has been implemented in YAPS (Yet Another Production System) [1] and Franz Lisp and runs on a VAX 11/785 and 2 Sun Workstations which communicate over Ethernet. 2.2 GRATE* GRATE* [21] <ref> [22] </ref> is described as a general-purpose cooperation framework based on the idea of Joint Responsibility. It is an expanded version of the earlier GRATE system [21]. The system is intended to produce robust industrial applications for use in dynamic and unpredictable environments.
Reference: [23] <author> V.R. Lesser and M.E. Connell. </author> <title> The Distributed Vehicle Monitoring Testbed: A Tool for Investigating Distributed Problem-Solving networks. </title> <journal> AI Magazine, </journal> <pages> pages 15-33, 4(3), </pages> <year> 1983. </year>
Reference-contexts: The objective of this kind of experimentation is to interpret and generalise experimental results in order to apply them when building agent-based applications. 3.1 DVMT Research Problem The Distributed Vehicle Monitoring Testbed [11] <ref> [23] </ref> was one of the earliest testbeds developed. It aimed to provide a means of investigating a wide range of DAI issues through experimentation. Domain The task addressed by DVMT is that of distributed vehicle monitoring.
Reference: [24] <author> T.A. Montgomery, J. Less, D.J. Musliner, and E.H. Durfee et al. </author> <title> MICE Users Guide. </title> <institution> University of Michigan Distributed Intelligent Agents Group, Department of Electrical Engineering and Computer Science, University of Michigan, </institution> <year> 1992. </year>
Reference-contexts: Agents may work together using negotiation, one-way or mutual cooperation, or in a master-slave relationship. Platforms and Languages Any representation language based on first order logic may be used to define an agent's knowledge-base. 3.6 MICE The MICE (Michigan Intelligent Coordination Experiment) <ref> [24] </ref> testbed is intended for use in experimentation with the coordination of heterogeneous intelligent systems. Form of an Agent The testbed is only concerned with the "physical agent", i.e. the part that interacts with the outside world.
Reference: [25] <author> D. Nguyen, S. Hanks, and C. Thomas. </author> <title> The TRUCKWORLD Manual. </title> <type> Technical Report TR-FIA-91-04, </type> <institution> Department of Engineering, University of Washington, </institution> <year> 1993. </year>
Reference-contexts: The fireboss does not completely control the activities of the other agents since they decide how to interpret and execute its directives. Platforms and Languages Phoenix is implemented in Common Lisp and runs on the Explorer II. 3.3 TRUCKWORLD Research Problem TRUCKWORLD <ref> [25] </ref> [18] is a planning testbed designed to be used in studying the behaviour of reactive agents in dynamic worlds. Domain TRUCKWORLD agents live in an world consisting of objects, which exist in locations, and roads which connect locations.
Reference: [26] <author> H. Van Dyke Parunak. </author> <title> Manufacturing Experience with the Contract Net. </title> <editor> In M. N. Huhns, editor, </editor> <booktitle> Distributed Artificial Intelligence, </booktitle> <pages> pages 285-310. </pages> <publisher> Pitman Publishers, </publisher> <year> 1987. </year>
Reference-contexts: This report does not claim to be an exhaustive survey of agent-based software. However, we have described a selection of recent systems, as well as some important early ones. 2 Frameworks As mentioned above, frameworks are divided into dedicated frameworks, e.g. the domain of YAMS <ref> [26] </ref> is distributed factory control, and general-purpose frameworks, e.g. ARCHON [20]. Another difference between frameworks is that some systems require all agents to be built from first principles. Other systems, e.g. <p> Other systems, e.g. GRATE* [21] and ARCHON [20], are more flexible and may be used either to custom-build agents or expand existing problem-solvers in order to incorporate them into an ABS. 2.1 YAMS YAMS (Yet Another Manufacturing System) <ref> [26] </ref> is a prototype, distributed factory control system in which tasks are allocated to nodes using the Contract Net negotiation protocol [30].
Reference: [27] <author> J.S. Rosenscein and G. Zlotkin. </author> <title> Designing Conventions for Automated Negotiation. </title> <journal> Byte Magazine, </journal> <pages> pages 29-46, </pages> <month> Fall </month> <year> 1994. </year>
Reference-contexts: Rather than trying to generalise results to apply to all DAI domains, a more realistic objective may be to determine results which are valid for particular classes of domains. Similarly, we believe that rather than being completely general-purpose, frameworks should be oriented towards particular domain classes. Rosenschein and Zlotkin <ref> [27] </ref> provide a hierarchical classification of DAI domains into task-oriented, state-oriented and worth-oriented domains. In a task-oriented domain 6 DISCUSSION 27 agents perform non-conflicting tasks. State-oriented domains are a superset of task- oriented domains. Agents in a state-oriented domain have goals that specify acceptable final states. <p> Agents push tiles into locations in a grid, some of which belong to particular agents. The optimal state for an agent is the one in which all the tiles are in its locations. Rosenschein and Zlotkin <ref> [27] </ref> also provide further more specialised classifications of domains. It is likely that cooperation strategy, organisation and other aspects of a DAI system which are effective in one class of domain will not be so in another, hence the need to determine which strategies are suitable for particular domains.
Reference: [28] <author> J.R. Searle. </author> <title> Speech Acts: An Essay on the Philosophy of Language. </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge, </address> <year> 1969. </year>
Reference-contexts: A machine agent is a primitive agent with no body and a generic command set. Such an agent is used as a foundation for building more complex agents. 2 FRAMEWORKS 9 Communication Communication is by message-passing. Message types are drawn from speech act theory <ref> [28] </ref>. Propose, Accept, Refine, Order and Modify messages are known as cooperation primitives because they are used to initiate and carry out cooperation. Request and Tell messages are used to exchange information between agents. <p> Each agent has a perception rating which determines how far it can see. Similarly, the success or failure of actions which agents attempt is determined by the world-manager. Communication Agents exchange messages which are based on speech act theory <ref> [28] </ref>. Messages may be broadcast to all agents, to a limited number of agents or sent to individual agents. Cooperation and Community Organisation No cooperation protocols are built into MYWORLD. If cooperation is required, the programmer has to incorporate his/her own protocol.
Reference: [29] <author> Y. Shoham. </author> <title> Agent-Oriented Programming. </title> <type> Technical Report STAN-CS-1335-90, </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1990. </year>
Reference-contexts: negotiate using the Contract Net protocol [30]. 4 OTHER SYSTEMS 18 Languages and Platforms MICE is written in Common Lisp and versions exist for Unix Platforms, Macintosh Computers and TI Explorers. 3.7 MYWORLD MYWORLD [33] is an attempt to construct a testbed based on the ideas of Agent Oriented Programming <ref> [29] </ref>. An agent's behaviour is determined by its beliefs and intentions. A MYWORLD system is a simulated grid-world containing agents and perhaps other objects. The user defines characteristics of the world such as the grid-size. All MYWORLD entities have one characteristic in common: a location in the grid.
Reference: [30] <author> R.G. Smith. </author> <title> The Contract Net Protocol: High-Level Communication and Control in a Distributed Problem Solver. </title> <journal> IEEE Transactions on Computers, </journal> <pages> pages 1104-1113, </pages> <month> C-29:12 (December) </month> <year> 1980. </year> <note> REFERENCES 30 </note>
Reference-contexts: more flexible and may be used either to custom-build agents or expand existing problem-solvers in order to incorporate them into an ABS. 2.1 YAMS YAMS (Yet Another Manufacturing System) [26] is a prototype, distributed factory control system in which tasks are allocated to nodes using the Contract Net negotiation protocol <ref> [30] </ref>. <p> Agents broadcast information to acquaintances who may find it useful. They also respond to requests for specific information. Any agent can delegate tasks to another. When performing task allocation an agent decides between using the client-server protocol and the contract net protocol <ref> [30] </ref>. With the former, the request is directed to just one acquaintance. With the 2 FRAMEWORKS 6 latter, the agent broadcasts a request to all acquaintances who are capable of carrying out the task. <p> Propose, Accept, Refine, Order and Modify messages are known as cooperation primitives because they are used to initiate and carry out cooperation. Request and Tell messages are used to exchange information between agents. Cooperation and Community Organisation Several domain-independent cooperation methods are predefined in MECCA: Contract Net <ref> [30] </ref>, a negotiation method and a master/slave protocol. Other cooperation methods may be easily specified. A method is proposed by one agent who then requests the participation of other agents. Applications MECCA has been tested within two application areas: office automation (scheduling meetings) and urban traffic (traffic guidance). <p> These authority values can be used to determine what happens, for example, in the case of a collision between two agents. Experimentation Various predator-prey scenarios have been implemented, including one in which agents negotiate using the Contract Net protocol <ref> [30] </ref>. 4 OTHER SYSTEMS 18 Languages and Platforms MICE is written in Common Lisp and versions exist for Unix Platforms, Macintosh Computers and TI Explorers. 3.7 MYWORLD MYWORLD [33] is an attempt to construct a testbed based on the ideas of Agent Oriented Programming [29].
Reference: [31] <author> D. Steiner, D. Mahling, and H. Haugeneder. </author> <booktitle> Human Computer Cooperative Work. In Proceedings of the 10th AAAI International Workshop on Distributed Artificial Intelligence, </booktitle> <year> 1990. </year>
Reference-contexts: Platforms and Languages Versions of MACE are now running on an Intel SYM-1 concurrent processor ("hypercube") and TI Explorer LISP machines. The system is written in Common Lisp. 2.5 MECCA The Multi-agent Environment for Constructing Cooperative Applications (MECCA) <ref> [31] </ref> is a framework for building agent-based systems which include both human and software agents. Existing intelligent systems and custom-built agents can both be accommodated into MECCA systems. Form of an Agent An agent consists of a body, head and communicator.
Reference: [32] <author> E. Werner. </author> <title> Toward a Theory of Communication and Cooperation for Multiagent Planning. </title> <booktitle> In RAK88, </booktitle> <pages> pages 129-143, </pages> <year> 1988. </year>
Reference-contexts: Systems may be designed with no communication at all. If communication is incorporated, its level of sophistication can vary from primitive, e.g. setting and resetting bits in a vector, to a high-level linguisitic form <ref> [32] </ref>. Cooperation and Community Organisation When building a multi-agent system using RATMAN the system designer specifies general features of the system.
Reference: [33] <author> M. Wooldridge and D. Vandekerckhove. MYWORLD: </author> <title> An Agent-Oriented Testbed for Distributed Artificial Intelligence. In S.M. </title> <editor> Deen, editor, </editor> <booktitle> Proceedings of the Special Interest Group on Cooperating Knowledge Based Systems 1993, </booktitle> <pages> pages 263-274. </pages> <institution> University of Keele, </institution> <year> 1993. </year>
Reference-contexts: Experimentation Various predator-prey scenarios have been implemented, including one in which agents negotiate using the Contract Net protocol [30]. 4 OTHER SYSTEMS 18 Languages and Platforms MICE is written in Common Lisp and versions exist for Unix Platforms, Macintosh Computers and TI Explorers. 3.7 MYWORLD MYWORLD <ref> [33] </ref> is an attempt to construct a testbed based on the ideas of Agent Oriented Programming [29]. An agent's behaviour is determined by its beliefs and intentions. A MYWORLD system is a simulated grid-world containing agents and perhaps other objects.
References-found: 33

