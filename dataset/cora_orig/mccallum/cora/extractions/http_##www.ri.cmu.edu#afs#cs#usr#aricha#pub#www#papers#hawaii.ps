URL: http://www.ri.cmu.edu/afs/cs/usr/aricha/pub/www/papers/hawaii.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/aricha/pub/www/home.html
Root-URL: 
Email: ftl@math.mit.edu  bmm@cs.cmu.edu  aricha@cs.cmu.edu  
Phone: (617) 253-5876  FAX: (412) 268-5576  (412) 268-3052  
Title: Fast Algorithms for Finding O(Congestion+Dilation) Packet Routing Schedules  
Author: Tom Leighton Bruce Maggs Andrea W. Richa 
Address: Cambridge, MA 02139  Pittsburgh, PA 15213  Pittsburgh, PA 15213  
Affiliation: Mathematics Department, and Laboratory for Computer Science Massachusetts Institute of Technology  School of Computer Science Carnegie Mellon University  School of Computer Science Carnegie Mellon University  
Abstract: In 1988, Leighton, Maggs, and Rao showed that for any network and any set of packets whose paths through the network are fixed and edge-simple, there exists a schedule for routing the packets to their destinations in O(c + d) steps using constant-size queues, where c is the congestion of the paths in the network, and d is the length of the longest path. The proof, however, used the Lovasz Local Lemma and was not constructive. In this paper, we show how to find such a schedule in O(P(log log P) log P) time, with probability 1 1=P fi , for any positive constant fi, where P is the sum of the lengths of the paths taken by the packets in the network. We also show how to parallelize the algorithm so that it runs in N C. The method that we use to construct the schedules is based on the algorithmic form of the Lovasz Local Lemma discovered by Beck. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> N. Alon. </author> <title> A parallel algorithmic version of the Local Lemma. Random Structures and Algorithms, </title> <booktitle> 2(4) </booktitle> <pages> 367-378, </pages> <year> 1991. </year>
Reference-contexts: In particular, a packet is deferred (i.e., not assigned a delay) if and only if it might be involved in an event that became critical because of the delays assigned to prior packets. In <ref> [1] </ref>, Alon describes a parallel version of Beck's algorithm which proceeds by assigning values to all random variables (in this case delays to all packets) in parallel, and then unassigning values to those variables that are involved in bad events.
Reference: [2] <author> D. Angluin and L. G. Valiant. </author> <title> Fast probabilistic algorithms for hamiltonian circuits and matchings. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 18(2) </volume> <pages> 155-193, </pages> <month> April </month> <year> 1979. </year>
Reference-contexts: Suppose that there are x independent Bernoulli trials, each of which is successful with probability p 0 . Let S denote the number of successes in the x trials, and let = E [S] = xp 0 . Following Angluin and Valiant <ref> [2] </ref>, we have Pr [S (1 + fl)] e fl 2 =3 In our application, x = (I ff 2 + T ), p 0 = T =I ff 2 , and = (I ff 2 + T )T =I ff 2 .
Reference: [3] <author> J. Beck. </author> <title> An algorithmic approach to the Lovasz Local Lemma I. Random Structures and Algorithms, </title> <booktitle> 2(4) </booktitle> <pages> 343-365, </pages> <year> 1991. </year>
Reference-contexts: The algorithm for producing the schedules is based on an algorithmic form of the Lovasz Local Lemma (see [6] or [13, pp. 57-58]) discovered by Beck <ref> [3] </ref>. Showing how to modify Beck's arguments so that they can be applied to scheduling problems is the main contribution of the paper. Once this is done, the construction of optimal routing schedules is accomplished using the methods of [9]. The result has several applications.
Reference: [4] <author> R. P. Brent. </author> <title> The parallel evaluation of general arithmetic expressions. </title> <journal> Journal of the ACM, </journal> <volume> 21(2) </volume> <pages> 201-208, </pages> <month> April </month> <year> 1974. </year>
Reference-contexts: Each edge is directed towards the node corresponding to the packet of lesser priority. By Brent's Theorem <ref> [4] </ref>, the parallel running time of the algorithm is then at most twice the length of the longest directed path in G 0 . Let D denote the maximum degree of G 0 . There are at most N D L paths of length L in G 0 .
Reference: [5] <author> H. Chernoff. </author> <title> A measure of asymptotic efficiency for tests of a hypothesis based on the sum of observations. </title> <journal> American Mathematical Society, </journal> <volume> 23 </volume> <pages> 493-507, </pages> <year> 1952. </year>
Reference-contexts: or more packets use an edge g during a particular T frame t is at most p k= 0 (I ff 2 + T ) I ff 2 1 I ff 2 : To estimate the area under the tails of this binomial distribution, we use the following Chernoff-type bound <ref> [5] </ref>. Suppose that there are x independent Bernoulli trials, each of which is successful with probability p 0 . Let S denote the number of successes in the x trials, and let = E [S] = xp 0 .
Reference: [6] <author> P. Erdos and L. Lovas. </author> <title> Problems and results on 3-chromatic hypergraphs and some related questions. </title> <editor> In A. Hajnal et al., editor, </editor> <title> Infinite and Finite Sets.Volume 11 of Col-loq. </title> <journal> Math. Soc. J. Bolyai, </journal> <pages> pages 609-627. </pages> <publisher> North Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1975. </year>
Reference-contexts: The schedules can also be found in polylogarithmic time on a parallel computer using O (P (log log P) log P) work, with probability at least 1 1=P fi . The algorithm for producing the schedules is based on an algorithmic form of the Lovasz Local Lemma (see <ref> [6] </ref> or [13, pp. 57-58]) discovered by Beck [3]. Showing how to modify Beck's arguments so that they can be applied to scheduling problems is the main contribution of the paper. Once this is done, the construction of optimal routing schedules is accomplished using the methods of [9].
Reference: [7] <author> R. Koch, T. Leighton, B. Maggs, S. Rao, and A. Rosenberg. </author> <booktitle> Work-preserving emula tions of fixed-connection networks. In Proceedings of the 21st Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 227-240, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: This situation arises in network emulation problems. Typically, a guest network G is emulated by a host network H by embedding G into H. (For a more complete discussion of emulations and embeddings, see <ref> [7] </ref>.) An embedding maps nodes of G to nodes of H, and edges of G to paths in H. There are three important measures of an embedding: the load, congestion, and dilation.
Reference: [8] <author> F. T. Leighton, B. M. Maggs, A. G. Ranade, and S. B. Rao. </author> <title> Randomized routing and sorting on fixed-connection networks. </title> <journal> Journal of Algorithms, </journal> <volume> 17(1) </volume> <pages> 157-205, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: In other words, the fastest known algorithms for producing schedules of length O (c + d) with constant-size edge queues require time that is exponential in the number of packets. For the class of leveled networks, Leighton, Maggs, Ranade, and Rao <ref> [8] </ref> showed that there is a simple on-line randomized algorithm for routing the packets to their destinations within O (c + L + log N ) steps, with high probability, where L is the number of levels in the network, and N is the total number of packets. (In a leveled
Reference: [9] <author> F. T. Leighton, B. M. Maggs, and S. B. Rao. </author> <title> Packet routing and job-shop scheduling in O(congestion + dilation) steps. </title> <journal> Combinatorica, </journal> <volume> 14(2) </volume> <pages> 167-180, </pages> <year> 1994. </year>
Reference-contexts: In this case the queues are big enough that a packet can never be delayed by a full queue in front, so each packet can be delayed at most c 1 steps at each of at most d edges on the way to its destination. In <ref> [9] </ref>, Leighton, Maggs, and Rao showed that there are much better schedules. In particular, they established the existence of a schedule using O (c + d) steps and constant-size queues at every edge, thereby achieving the naive lower bounds for any routing problem. <p> Showing how to modify Beck's arguments so that they can be applied to scheduling problems is the main contribution of the paper. Once this is done, the construction of optimal routing schedules is accomplished using the methods of <ref> [9] </ref>. The result has several applications. For example, if a particular routing problem is to be performed many times over, then it may be feasible to compute the optimal schedule once using global control. This situation arises in network emulation problems. <p> The queue of jobs waiting for any machine will also always be at most a constant. 4 1.3 Outline The remainder of the paper is divided into sections as follows. In Section 2, we give a very brief overview of the non-constructive proof in <ref> [9] </ref>. Also we introduce some definitions, and present two important lemmas which will be of later use. In Section 3, we describe how to make the non-constructive method in [9] constructive, and analyze its running time. In Section 4, we show how to parallelize the scheduling algorithm. <p> In Section 2, we give a very brief overview of the non-constructive proof in <ref> [9] </ref>. Also we introduce some definitions, and present two important lemmas which will be of later use. In Section 3, we describe how to make the non-constructive method in [9] constructive, and analyze its running time. In Section 4, we show how to parallelize the scheduling algorithm. We conclude with some remarks in Section 5. 2 Preliminaries In [9], Leighton, Maggs, and Rao proved that for any set of packets whose paths are edge-simple 1 and have congestion c and <p> In Section 3, we describe how to make the non-constructive method in <ref> [9] </ref> constructive, and analyze its running time. In Section 4, we show how to parallelize the scheduling algorithm. We conclude with some remarks in Section 5. 2 Preliminaries In [9], Leighton, Maggs, and Rao proved that for any set of packets whose paths are edge-simple 1 and have congestion c and dilation d, there is a schedule of length O (c + d) in which at most one packet traverses each edge of the network at each step, and at <p> The relative congestion, R, in a T -frame is the ratio C f =T of the congestion in the frame to the size of the frame. 2.1 A pair of tools for later use In this section we re-state Lemma 3.5 of <ref> [9] </ref> and we prove Proposition 3.6, which replaces Lemma 3.6 of [9]. Both will be used in the proofs through Section 3. 1 An edge-simple path uses no edge more than once. 5 Lemma 3.5 [9] In any schedule, if the number of packets that use a particular edge g in <p> R, in a T -frame is the ratio C f =T of the congestion in the frame to the size of the frame. 2.1 A pair of tools for later use In this section we re-state Lemma 3.5 of <ref> [9] </ref> and we prove Proposition 3.6, which replaces Lemma 3.6 of [9]. Both will be used in the proofs through Section 3. 1 An edge-simple path uses no edge more than once. 5 Lemma 3.5 [9] In any schedule, if the number of packets that use a particular edge g in any y-frame is at most Ry, for all y between T <p> A pair of tools for later use In this section we re-state Lemma 3.5 of <ref> [9] </ref> and we prove Proposition 3.6, which replaces Lemma 3.6 of [9]. Both will be used in the proofs through Section 3. 1 An edge-simple path uses no edge more than once. 5 Lemma 3.5 [9] In any schedule, if the number of packets that use a particular edge g in any y-frame is at most Ry, for all y between T and 2T 1, then the number of packets that use g in any y-frame is at most Ry, for all y T . <p> In each of these frames, at most RT packets use g. The remainder of the T 0 -frame t consists of a single y-frame, where T y 2T 1, in which at most Ry packets use g. The following proposition will be used in place of Lemma 3.6 of <ref> [9] </ref>. <p> Setting k 0 = ~ + ff 1 + 2 completes the proof. 3 An algorithm for constructing optimal schedules In this section, we describe the key ideas required to make the non-constructive proof of <ref> [9] </ref> constructive. There are many details in that proof, but changes are required only where the Lovasz Local Lemma is used, in Lemmas 3.2, 3.7 and 3.9 of [9]. <p> 3 An algorithm for constructing optimal schedules In this section, we describe the key ideas required to make the non-constructive proof of <ref> [9] </ref> constructive. There are many details in that proof, but changes are required only where the Lovasz Local Lemma is used, in Lemmas 3.2, 3.7 and 3.9 of [9]. The non-constructive proof showed that a schedule can be modified by assigning delays to the packets in such a way that in the new schedule the relative congestion can be bounded in much smaller frames than in the old schedule. <p> In this paper, we show how to find the assignment of delays quickly. We will not regurgitate the entire proof in <ref> [9] </ref>, but only reprove those lemmas, trying to state the replacement propositions in a way as close as possible to the original lemmas. In Section 3.1, we provide a proposition, Proposition 3.2, that is a constructive version of Lemma 3.2 of [9]. <p> We will not regurgitate the entire proof in <ref> [9] </ref>, but only reprove those lemmas, trying to state the replacement propositions in a way as close as possible to the original lemmas. In Section 3.1, we provide a proposition, Proposition 3.2, that is a constructive version of Lemma 3.2 of [9]. In Sections 3.2 and 3.3, we provide three propositions that are meant to replace Lemma 3.7 of [9]. Lemma 3.7 is applied O (log fl (c + d)) times in [9]. <p> In Section 3.1, we provide a proposition, Proposition 3.2, that is a constructive version of Lemma 3.2 of <ref> [9] </ref>. In Sections 3.2 and 3.3, we provide three propositions that are meant to replace Lemma 3.7 of [9]. Lemma 3.7 is applied O (log fl (c + d)) times in [9]. In this paper we will use Propositions 3.7.1 and 3.7.2 to replace the first two applications of Lemma 3.7. The remaining applications will be replaced by Proposition 3.7.3. <p> In Section 3.1, we provide a proposition, Proposition 3.2, that is a constructive version of Lemma 3.2 of <ref> [9] </ref>. In Sections 3.2 and 3.3, we provide three propositions that are meant to replace Lemma 3.7 of [9]. Lemma 3.7 is applied O (log fl (c + d)) times in [9]. In this paper we will use Propositions 3.7.1 and 3.7.2 to replace the first two applications of Lemma 3.7. The remaining applications will be replaced by Proposition 3.7.3. In Section 3.4, we present the three replacement propositions for Lemma 3.9 of [9]. <p> O (log fl (c + d)) times in <ref> [9] </ref>. In this paper we will use Propositions 3.7.1 and 3.7.2 to replace the first two applications of Lemma 3.7. The remaining applications will be replaced by Proposition 3.7.3. In Section 3.4, we present the three replacement propositions for Lemma 3.9 of [9]. Our belief is that a reader who understands the structure of the proof in [9] and the propositions in this paper can easily see how to make the original proof constructive. <p> The remaining applications will be replaced by Proposition 3.7.3. In Section 3.4, we present the three replacement propositions for Lemma 3.9 of <ref> [9] </ref>. Our belief is that a reader who understands the structure of the proof in [9] and the propositions in this paper can easily see how to make the original proof constructive. <p> Let m be the number of edges traversed by the packets (we can ignore the edges not traversed by any packet in the network). Note that m P mc. The following proposition is meant to replace Lemma 3.2 of <ref> [9] </ref>. It is used just once in the proof, to reduce the frame size from d to log P . <p> If it fails, we simply try again. 3.2 A randomized algorithm to reduce the frame size In this section, we prove two very similar propositions, Propositions 3.7.1 and 3.7.2, that are meant to replace the first two applications of Lemma 3.7 of <ref> [9] </ref>, which we state below. Let I 0. We break a schedule S into blocks of 2I 3 + 2I 2 I consecutive time steps. Lemma 3.7 [9] In a block of size 2I 3 + 2I 2 I, let the relative congestion in any frame of size I or greater <p> we prove two very similar propositions, Propositions 3.7.1 and 3.7.2, that are meant to replace the first two applications of Lemma 3.7 of <ref> [9] </ref>, which we state below. Let I 0. We break a schedule S into blocks of 2I 3 + 2I 2 I consecutive time steps. Lemma 3.7 [9] In a block of size 2I 3 + 2I 2 I, let the relative congestion in any frame of size I or greater be at most r, where 1 r I. <p> Unlike Lemma 3.7 of <ref> [9] </ref>, Propositions 3.7.1 and 3.7.2 may increase the relative congestion by a constant factor. In general, we cannot afford to pay a constant factor at each of the O (log fl (c + d)) applications of Lemma 3.7 of [9], but we can afford to pay it twice. <p> Unlike Lemma 3.7 of <ref> [9] </ref>, Propositions 3.7.1 and 3.7.2 may increase the relative congestion by a constant factor. In general, we cannot afford to pay a constant factor at each of the O (log fl (c + d)) applications of Lemma 3.7 of [9], but we can afford to pay it twice. For the application of Proposition 3.7.1, I = log P and r = 1. <p> large as the sum of the two relative congestions, that is 2r (1 + O (1)= p log I), with probability at least 1 1=P fi , for any fixed fi &gt; 0. 3.3 Applying exhaustive search The remaining O (log fl (c + d)) applications of Lemma 3.7 in <ref> [9] </ref> are replaced by applications of the following proposition, which uses the same technique as Propositions 3.7.1 and 3.7.2 except that instead of using Proposition 3.6 for each component of the subgraph induced by critical and endangered nodes in the dependence graph, it uses the Lovasz Local Lemma and exhaustive search <p> Hence the overall time taken is bounded by Q (log log log log P) O (1) log P. 3.4 Moving the block boundaries Now we present the three replacement propositions for Lemma 3.9 of <ref> [9] </ref>, which bounds the relative congestion after we move the block boundaries (see [9]). The three propositions that follow are analogous to the three replacement propositions, Propositions 3.7.1-3, for Lemma 3.7 of [9]. <p> Hence the overall time taken is bounded by Q (log log log log P) O (1) log P. 3.4 Moving the block boundaries Now we present the three replacement propositions for Lemma 3.9 of <ref> [9] </ref>, which bounds the relative congestion after we move the block boundaries (see [9]). The three propositions that follow are analogous to the three replacement propositions, Propositions 3.7.1-3, for Lemma 3.7 of [9]. <p> log P. 3.4 Moving the block boundaries Now we present the three replacement propositions for Lemma 3.9 of <ref> [9] </ref>, which bounds the relative congestion after we move the block boundaries (see [9]). The three propositions that follow are analogous to the three replacement propositions, Propositions 3.7.1-3, for Lemma 3.7 of [9]. Suppose we have a block of size 2I 3 + 3I 2 , obtained after we inserted delays into the schedule as described in Propositions 3.6 and 3.7.1-3, and moved the block boundaries as described in [9]. Each proposition refers to a specific size of I. Note that in [9], <p> are analogous to the three replacement propositions, Propositions 3.7.1-3, for Lemma 3.7 of <ref> [9] </ref>. Suppose we have a block of size 2I 3 + 3I 2 , obtained after we inserted delays into the schedule as described in Propositions 3.6 and 3.7.1-3, and moved the block boundaries as described in [9]. Each proposition refers to a specific size of I. Note that in [9], the steps between steps I 3 and I 3 + 3I 2 in the block are called the "fuzzy region" of the block. <p> <ref> [9] </ref>. Suppose we have a block of size 2I 3 + 3I 2 , obtained after we inserted delays into the schedule as described in Propositions 3.6 and 3.7.1-3, and moved the block boundaries as described in [9]. Each proposition refers to a specific size of I. Note that in [9], the steps between steps I 3 and I 3 + 3I 2 in the block are called the "fuzzy region" of the block. We assume that the relative congestion in any frame of size I or greater in the block is at most r, where 1 r I. <p> Proof: Note that each of the propositions in the previous sections dealt only with a single block. For any I, partitioning the schedule into disjoint blocks and moving the block boundaries as described in <ref> [9] </ref> take O (P) time. Let n I be the number of blocks in the schedule for the given I. Assume the blocks are numbered from 1 to n I .
Reference: [10] <author> Y. Mansour and B. Patt-Shamir. </author> <title> Greedy packet scheduling on shortest paths. </title> <journal> Journal of Algorithms, </journal> <volume> 14 </volume> <pages> 449-65, </pages> <year> 1993. </year>
Reference-contexts: number of packets. (In a leveled network with L levels, each node is labeled with a level number between 0 and L 1, and every edge that has its tail on level i has its head on level i + 1, for 0 i &lt; L 1.) Mansour and Patt-Shamir <ref> [10] </ref> then showed that if packets are routed greedily on shortest paths, then all of the packets reach their destinations within d+N steps, where N is the total number of packets. These schedules may be much longer than optimal, however, because N may be much larger than c.
Reference: [11] <editor> F. Meyer auf der Heide and B. Vocking. </editor> <title> A packet routing protocol for arbitrary net works. </title> <booktitle> In Proceedings of the 12th Symposium on Theoretical Aspects of Computer Science, </booktitle> <pages> pages 291-302, </pages> <month> March </month> <year> 1995. </year> <month> 17 </month>
Reference-contexts: These schedules may be much longer than optimal, however, because N may be much larger than c. Recently Meyer auf der Heide and Vocking <ref> [11] </ref> devised a simple on-line randomized 3 algorithm that routes all packets to their destinations in O (c + d + log N ) steps, with high probability, provided that the paths taken by the packets are short-cut free (e.g., shortest paths). 1.2 Our results In this paper, we show how
Reference: [12] <author> P. Raghavan. </author> <title> Probabilistic construction of deterministic algorithms: approximate pack ing integer programs. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 37(4) </volume> <pages> 130-143, </pages> <month> Octo-ber </month> <year> 1988. </year>
Reference-contexts: Hence, the parallel algorithm runs in N C, as claimed. 5 Remarks The algorithms described in this paper are randomized, but they can be derandomized using the method of conditional probabilities <ref> [12, 13] </ref>.
Reference: [13] <author> J. Spencer. </author> <title> Ten Lectures on the Probabilistic Method. </title> <publisher> SIAM, </publisher> <address> Philadelphia, PA, </address> <year> 1987. </year> <month> 18 </month>
Reference-contexts: The algorithm for producing the schedules is based on an algorithmic form of the Lovasz Local Lemma (see [6] or <ref> [13, pp. 57-58] </ref>) discovered by Beck [3]. Showing how to modify Beck's arguments so that they can be applied to scheduling problems is the main contribution of the paper. Once this is done, the construction of optimal routing schedules is accomplished using the methods of [9]. <p> Each refinement will bring us closer to meeting this requirement. The proof uses the Lovasz Local Lemma ([6] or <ref> [13, pp. 57-58] </ref>) at each refinement step. Given a set of "bad" events in a probability space, the lemma provides a simple inequality which, when satisfied, guarantees that with probability greater than zero, no bad event occurs. <p> Hence, the parallel algorithm runs in N C, as claimed. 5 Remarks The algorithms described in this paper are randomized, but they can be derandomized using the method of conditional probabilities <ref> [12, 13] </ref>.
References-found: 13

