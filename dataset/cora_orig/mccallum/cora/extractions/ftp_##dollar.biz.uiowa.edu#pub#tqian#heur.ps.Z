URL: ftp://dollar.biz.uiowa.edu/pub/tqian/heur.ps.Z
Refering-URL: http://dollar.biz.uiowa.edu/~tqian/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Efficient and Stable Heuristics For Lot Sizing Problems With Variable Unit Costs  
Author: Philip C. Jones and Tianbing Qian 
Date: January 1996  
Address: Iowa City, IA 52242  
Affiliation: Department of Management Sciences College of Business Administration The University of Iowa  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Aggarwal, A.M., and J.K. Park, </author> <title> Improved Algorithms for Economic Lot-Size Problems, </title> <type> Working Paper, </type> <institution> IBM Thomas J. Watson Research Center, </institution> <address> Yorktown Heights, NY. </address> <year> 1990. </year>
Reference-contexts: The very first optimal algorithm is the well known Wagner-Whitin Algorithm which has been regarded as a "slow" algorithm due to its O (n 2 ) worst case running time. Recently, several researchers (Aggarwal and Park <ref> [1] </ref>, Federgruen and Tzur [7], Wagelmans, Van Hoesel, and Kolen [15]) have developed different types of O (n log n) optimal lot-sizing algorithms. More recently, Qian and Jones [12] showed that the Wagner-Whitin Algorithm itself is in fact an O (n) algorithm under very realistic assumptions. <p> Third, since this problem contains the constant unit cost case as a special case, a study of it will enhance our understanding of the DLSP. While exact algorithms [17] [6] [7] <ref> [1] </ref> [15] can produce optimal solutions to the DLSP with variable unit costs, they typically don't possess the stability property. On the other hand, no stable heuristics are known for the general variable cost case. <p> Later Section 4 will give a multi-pass version. The pseudo code of Heuristic A is as follows: Heuristic A <ref> [1] </ref> p [i] = 0, f [i] = 0 for i = 1; 2; ; T . t = 1 [3] last = t, t = t + 1 [4] while ( t T ) [5] f [t] = min lastit ff [i 1] + s i + c i P <p> The observation immediately results in the following multi-pass lot-sizing algorithm: Heuristic B <ref> [1] </ref> p [i] = 0, f [i] = 0 for i = 1; 2; ; T . t = 1 [3] start = t, last = t, t = t + 1, pass = 0, limit = k. [4] while ( t T ) [5] f [t] = min lastit ff
Reference: [2] <author> Axsater, S., </author> <title> Worst Case Performance for Lot-Sizing Heuristics, Euro. </title> <journal> J. Oper. Res., </journal> <volume> 9, </volume> <pages> 339-343. </pages> <year> 1982. </year>
Reference-contexts: Goto <ref> [2] </ref> [11] else 5 [12] t = t + 1 [13] endif [14] endwhile [15] p [last] = P T i=last d i The algorithm works as follows: Line 1 initializes the code. Line 2-3 sets the current production period last to period 1. <p> Now we turn to the study of the solution quality returned by our algorithm when the unit costs are not restricted to be constants. Previous studies <ref> [2] </ref> indicate that worst-case analysis is generally not a good indicator of the actual performance of the algorithm. <p> [10] endif [11] if pass = limit [12] pass = 0 [13] backtrack finding the ending period of first production l [14] p [start] = P l i=start d i [15] f [i] = 0 for i = l; l + 1; ; t, t = l + 1, goto <ref> [2] </ref> [16] else [17] t = t + 1 [18] endif [19] endwhile 17 Table 6: Performance Comparison constant unit cost Silver-Meal LUC PPB Heur B Average Ratio 1.015 1.103 1.032 1.011 Worst Ratio 1.029 1.377 1.060 1.022 Number of best 11 4 4 29 Table 7: Performance Comparison variable unit
Reference: [3] <author> Baker, K. R., </author> <title> Lot-sizing Procedures and A Standard Data Set: A Reconciliation of the Liter--ature, </title> <journal> J. Mfg. Oper. Mgt., </journal> <volume> 2, </volume> <pages> 199-221, </pages> <year> 1989. </year>
Reference-contexts: For this reason, many heuristics have been developed for the DLSP, among which are the Silver-Meal Heuristic [13], Least-Unit-Cost [9] and Part-Period Balancing [5]. For a complete survey of the lot-sizing heuristics literature, see Baker <ref> [3] </ref>. Common features of these heuristics are: they 3 are all myopic in nature, run in linear time, and are stable. Due to these reasons, they have been frequently used in practice. <p> Later Section 4 will give a multi-pass version. The pseudo code of Heuristic A is as follows: Heuristic A [1] p [i] = 0, f [i] = 0 for i = 1; 2; ; T . t = 1 <ref> [3] </ref> last = t, t = t + 1 [4] while ( t T ) [5] f [t] = min lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t [7] if j <p> For details, see [11]. There have been different cost conventions in the lot-sizing literature. For a detailed summary and analysis, see <ref> [3] </ref>. Here for simplicity we use EI (ending inventory) in all the decision rules and cost calculations. 4.2 Computational Results The datasets are generated from uniform distributions with parameters and seeds presented in Table 1. <p> The observation immediately results in the following multi-pass lot-sizing algorithm: Heuristic B [1] p [i] = 0, f [i] = 0 for i = 1; 2; ; T . t = 1 <ref> [3] </ref> start = t, last = t, t = t + 1, pass = 0, limit = k. [4] while ( t T ) [5] f [t] = min lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s
Reference: [4] <author> Blackburn, J.D., Millen, R.A., </author> <title> Heuristic Lot-Sizing Performance In A Rolling-Schedule Environment, </title> <journal> Decision Sciences, </journal> <volume> 11, </volume> <pages> 691-701, </pages> <year> 1990. </year>
Reference-contexts: Later Section 4 will give a multi-pass version. The pseudo code of Heuristic A is as follows: Heuristic A [1] p [i] = 0, f [i] = 0 for i = 1; 2; ; T . t = 1 [3] last = t, t = t + 1 <ref> [4] </ref> while ( t T ) [5] f [t] = min lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last [8] p [t] = i=last d i <p> Several conclusions can be drawn immediately from this definition. Lemma 1 Heuristic A is a stable algorithm. Proof: If at iteration t, j is chosen to be the period of last production within the loop at line <ref> [4] </ref>, then last = j. And during iteration t + 1 to T , production can only occur at j or some t 0 &gt; j, which implies that all p (t), t &lt; j won't change. <p> The observation immediately results in the following multi-pass lot-sizing algorithm: Heuristic B [1] p [i] = 0, f [i] = 0 for i = 1; 2; ; T . t = 1 [3] start = t, last = t, t = t + 1, pass = 0, limit = k. <ref> [4] </ref> while ( t T ) [5] f [t] = min lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last [8] last = j [9] pass =
Reference: [5] <author> Dematteis, J.J. </author> <title> The Part-Period Algorithm, </title> <journal> IBM Systems Journal, </journal> <volume> 7, </volume> <pages> 30-39, </pages> <year> 1968. </year>
Reference-contexts: On the other hand, optimal algorithms usually don't possess the stability or the so-called insulation property which will be defined rigorously in Section 3. For this reason, many heuristics have been developed for the DLSP, among which are the Silver-Meal Heuristic [13], Least-Unit-Cost [9] and Part-Period Balancing <ref> [5] </ref>. For a complete survey of the lot-sizing heuristics literature, see Baker [3]. Common features of these heuristics are: they 3 are all myopic in nature, run in linear time, and are stable. Due to these reasons, they have been frequently used in practice. <p> The pseudo code of Heuristic A is as follows: Heuristic A [1] p [i] = 0, f [i] = 0 for i = 1; 2; ; T . t = 1 [3] last = t, t = t + 1 [4] while ( t T ) <ref> [5] </ref> f [t] = min lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last [8] p [t] = i=last d i [9] f [i] = 0 for <p> The benchmark heuristics chosen are: Least Unit Cost (LUC, [9]), Least Period Cost (also called Silver-Meal,[13]) and Part Period Balancing <ref> [5] </ref>. Also included are Modified-Silver-Meal (MSM) and Modified-Least-Unit-Cost proposed by Liao and Hsu [11]. These heuristics all work in the same fashion: first let period 1 be the starting period t 0 , proceed until some stopping rule is satisfied at period t. <p> following multi-pass lot-sizing algorithm: Heuristic B [1] p [i] = 0, f [i] = 0 for i = 1; 2; ; T . t = 1 [3] start = t, last = t, t = t + 1, pass = 0, limit = k. [4] while ( t T ) <ref> [5] </ref> f [t] = min lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last [8] last = j [9] pass = pass + 1 [10] endif [11]
Reference: [6] <author> Evans, J.R., </author> <title> An Efficient Implementation of the Wagner-Whitin Algorithm for Dynamic Lot-Sizing. </title> <journal> J. of Opns. Mgmt., </journal> <volume> 5, </volume> <pages> 229-235, </pages> <year> 1985. </year>
Reference-contexts: Third, since this problem contains the constant unit cost case as a special case, a study of it will enhance our understanding of the DLSP. While exact algorithms [17] <ref> [6] </ref> [7] [1] [15] can produce optimal solutions to the DLSP with variable unit costs, they typically don't possess the stability property. On the other hand, no stable heuristics are known for the general variable cost case. <p> [i] = 0, f [i] = 0 for i = 1; 2; ; T . t = 1 [3] last = t, t = t + 1 [4] while ( t T ) [5] f [t] = min lastit ff [i 1] + s i + c i P t <ref> [6] </ref> j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last [8] p [t] = i=last d i [9] f [i] = 0 for i = j; ; t. [10] t = j. <p> = 1; 2; ; T . t = 1 [3] start = t, last = t, t = t + 1, pass = 0, limit = k. [4] while ( t T ) [5] f [t] = min lastit ff [i 1] + s i + c i P t <ref> [6] </ref> j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last [8] last = j [9] pass = pass + 1 [10] endif [11] if pass = limit [12] pass = 0 [13] backtrack finding the ending period of first production
Reference: [7] <author> Federgruen, A. and M. Tzur, </author> <title> A Simple Forward Algorithm to Solve General Dynamic Lot Sizing Models with n periods in O(n log n) OR O(n) Time. </title> <journal> Mgmt. Sci., </journal> <volume> 37, </volume> <pages> 909-925, </pages> <year> 1991. </year>
Reference-contexts: In this paper we consider the case where demands are nonnegative and all the cost coefficients are positive. For surveys of the complete literature on the DLSP and its variants, see <ref> [7] </ref> [10]. The DLSP is one of the fundamental models in single-level production planning, serving as a basic subroutine to more complex multi-level production/inventory systems. From the practical point of view, there are three important criteria to any lot-sizing algorithm: speed, solution quality, and stability. <p> The very first optimal algorithm is the well known Wagner-Whitin Algorithm which has been regarded as a "slow" algorithm due to its O (n 2 ) worst case running time. Recently, several researchers (Aggarwal and Park [1], Federgruen and Tzur <ref> [7] </ref>, Wagelmans, Van Hoesel, and Kolen [15]) have developed different types of O (n log n) optimal lot-sizing algorithms. More recently, Qian and Jones [12] showed that the Wagner-Whitin Algorithm itself is in fact an O (n) algorithm under very realistic assumptions. <p> Third, since this problem contains the constant unit cost case as a special case, a study of it will enhance our understanding of the DLSP. While exact algorithms [17] [6] <ref> [7] </ref> [1] [15] can produce optimal solutions to the DLSP with variable unit costs, they typically don't possess the stability property. On the other hand, no stable heuristics are known for the general variable cost case. <p> = 1 [3] last = t, t = t + 1 [4] while ( t T ) [5] f [t] = min lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t <ref> [7] </ref> if j &gt; last [8] p [t] = i=last d i [9] f [i] = 0 for i = j; ; t. [10] t = j. <p> t = t + 1, pass = 0, limit = k. [4] while ( t T ) [5] f [t] = min lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t <ref> [7] </ref> if j &gt; last [8] last = j [9] pass = pass + 1 [10] endif [11] if pass = limit [12] pass = 0 [13] backtrack finding the ending period of first production l [14] p [start] = P l i=start d i [15] f [i] = 0 for
Reference: [8] <author> Federgruen, A. and M. Tzur, </author> <title> Minimal Forecast Horizons and A New Planning Procedure for the General Dynamic Lot Sizing Model: Nervousness Revisited. </title> <journal> Opns. Res., </journal> <volume> 42, 3, </volume> <pages> 456-468, </pages> <year> 1994. </year>
Reference-contexts: t, t = t + 1 [4] while ( t T ) [5] f [t] = min lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last <ref> [8] </ref> p [t] = i=last d i [9] f [i] = 0 for i = j; ; t. [10] t = j. <p> pass = 0, limit = k. [4] while ( t T ) [5] f [t] = min lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last <ref> [8] </ref> last = j [9] pass = pass + 1 [10] endif [11] if pass = limit [12] pass = 0 [13] backtrack finding the ending period of first production l [14] p [start] = P l i=start d i [15] f [i] = 0 for i = l; l +
Reference: [9] <author> Gorham, T., </author> <title> Dynamic Order Quantities, Production and Inventory Management, </title> <booktitle> 1st Quarter, </booktitle> <pages> 75-81, </pages> <year> 1968, </year>
Reference-contexts: On the other hand, optimal algorithms usually don't possess the stability or the so-called insulation property which will be defined rigorously in Section 3. For this reason, many heuristics have been developed for the DLSP, among which are the Silver-Meal Heuristic [13], Least-Unit-Cost <ref> [9] </ref> and Part-Period Balancing [5]. For a complete survey of the lot-sizing heuristics literature, see Baker [3]. Common features of these heuristics are: they 3 are all myopic in nature, run in linear time, and are stable. Due to these reasons, they have been frequently used in practice. <p> while ( t T ) [5] f [t] = min lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last [8] p [t] = i=last d i <ref> [9] </ref> f [i] = 0 for i = j; ; t. [10] t = j. Goto [2] [11] else 5 [12] t = t + 1 [13] endif [14] endwhile [15] p [last] = P T i=last d i The algorithm works as follows: Line 1 initializes the code. <p> The benchmark heuristics chosen are: Least Unit Cost (LUC, <ref> [9] </ref>), Least Period Cost (also called Silver-Meal,[13]) and Part Period Balancing [5]. Also included are Modified-Silver-Meal (MSM) and Modified-Least-Unit-Cost proposed by Liao and Hsu [11]. <p> = k. [4] while ( t T ) [5] f [t] = min lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last [8] last = j <ref> [9] </ref> pass = pass + 1 [10] endif [11] if pass = limit [12] pass = 0 [13] backtrack finding the ending period of first production l [14] p [start] = P l i=start d i [15] f [i] = 0 for i = l; l + 1; ; t, t
Reference: [10] <author> Lee, H.L. and S. Nahmias, Single-Product, </author> <title> Single-Location Models, in Logistics of Production and Inventory, </title> <editor> ed. by GRAVES, S.G. , A.H.G. RINNOOY KAN and P.H. ZIPKIN, </editor> <publisher> North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: In this paper we consider the case where demands are nonnegative and all the cost coefficients are positive. For surveys of the complete literature on the DLSP and its variants, see [7] <ref> [10] </ref>. The DLSP is one of the fundamental models in single-level production planning, serving as a basic subroutine to more complex multi-level production/inventory systems. From the practical point of view, there are three important criteria to any lot-sizing algorithm: speed, solution quality, and stability. Speed and solution quality are self-explanatory. <p> ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last [8] p [t] = i=last d i [9] f [i] = 0 for i = j; ; t. <ref> [10] </ref> t = j. Goto [2] [11] else 5 [12] t = t + 1 [13] endif [14] endwhile [15] p [last] = P T i=last d i The algorithm works as follows: Line 1 initializes the code. Line 2-3 sets the current production period last to period 1. <p> T ) [5] f [t] = min lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last [8] last = j [9] pass = pass + 1 <ref> [10] </ref> endif [11] if pass = limit [12] pass = 0 [13] backtrack finding the ending period of first production l [14] p [start] = P l i=start d i [15] f [i] = 0 for i = l; l + 1; ; t, t = l + 1, goto [2]
Reference: [11] <author> Liao, C.J. and Hsu, </author> <title> T.S., The Dynamic Lot-Sizing Problem with Variable Unit Costs, </title> <journal> Int. J. Syst. Sci., </journal> <volume> 26, 9, </volume> <pages> 1593-1600, </pages> <year> 1995. </year>
Reference-contexts: These heuristics were proposed for the case where there is zero (or constant) production cost, and constant unit holding and set up cost, i.e. c t = c; s t = s; h t = h for all t. Liao and Hsu <ref> [11] </ref> proposed variants of classical heuristics that allow varied unit production cost. The setup and unit inventory holding costs in their model, however, are assumed to be constants. The study of more general lot-sizing problems with variable unit costs is important for several reasons. <p> Goto [2] <ref> [11] </ref> else 5 [12] t = t + 1 [13] endif [14] endwhile [15] p [last] = P T i=last d i The algorithm works as follows: Line 1 initializes the code. Line 2-3 sets the current production period last to period 1. <p> The benchmark heuristics chosen are: Least Unit Cost (LUC, [9]), Least Period Cost (also called Silver-Meal,[13]) and Part Period Balancing [5]. Also included are Modified-Silver-Meal (MSM) and Modified-Least-Unit-Cost proposed by Liao and Hsu <ref> [11] </ref>. These heuristics all work in the same fashion: first let period 1 be the starting period t 0 , proceed until some stopping rule is satisfied at period t. Set the production quantity at period 1 to be the cumulative demand from period t 0 to t. <p> For details, see <ref> [11] </ref>. There have been different cost conventions in the lot-sizing literature. For a detailed summary and analysis, see [3]. <p> [5] f [t] = min lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last [8] last = j [9] pass = pass + 1 [10] endif <ref> [11] </ref> if pass = limit [12] pass = 0 [13] backtrack finding the ending period of first production l [14] p [start] = P l i=start d i [15] f [i] = 0 for i = l; l + 1; ; t, t = l + 1, goto [2] [16] else
Reference: [12] <author> Qian, T. AND P. Jones, </author> <note> Wagner-Whitin Is Almost O(n), working paper, </note> <institution> Dept. of Mgmt. Sci., Univ. of Iowa, </institution> <year> 1995. </year>
Reference-contexts: Recently, several researchers (Aggarwal and Park [1], Federgruen and Tzur [7], Wagelmans, Van Hoesel, and Kolen [15]) have developed different types of O (n log n) optimal lot-sizing algorithms. More recently, Qian and Jones <ref> [12] </ref> showed that the Wagner-Whitin Algorithm itself is in fact an O (n) algorithm under very realistic assumptions. Therefore, in terms of the first two goals, i.e. the solution quality and the speed, progress is quite satisfactory. <p> This paper proposes a class of stable heuristics for lot-sizing problems with variable costs. It can be described as a myopic implementation of the forward Wagner-Whitin algorithm with rolling horizons (Qian and Jones, <ref> [12] </ref>). The running time of our algorithms, as will be shown later, is O (n) under assumptions that are almost always true in practice. In the variable unit cost case, our heuristics considerably outperform other well known lot-sizing heuristics and produce close-to-optimal solutions in large scale computational experiments. <p> Goto [2] [11] else 5 <ref> [12] </ref> t = t + 1 [13] endif [14] endwhile [15] p [last] = P T i=last d i The algorithm works as follows: Line 1 initializes the code. Line 2-3 sets the current production period last to period 1. The algorithm starts the main loop at line 4. <p> In practice, typical lot-sizing problems will use future information on the order of two to three order cycles. 6 2.2 Running Time In this section, we study the running time of the proposed heuristic. The analysis here is similar to that in <ref> [12] </ref>. For completeness, we will present the main results here. The worst case running time of this algorithm can be very bad theoretically. <p> The following theorem characterizes the performance of Heuristic A under the bounded data assumption. Theorem 1 Under assumption 1, Heuristic A runs in linear time. 7 Proof The proof is similar to that in <ref> [12] </ref> and the detail is omitted here. <p> Remark: This assumption is more general than the bounded data assumption. It applies to the case where data go up and down together in many cases (with inflation or deflation, for example). The practical running time of Heuristic A is similar to the forward Wagner-Whitin algorithm with rolling horizons <ref> [12] </ref>. It can solve large scale problems within seconds on a common PC. 3 Stability The stability of a lot-sizing algorithm is important because most real world applications of dynamic lot-sizing algorithms are implemented on a rolling horizon basis. <p> lastit ff [i 1] + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last [8] last = j [9] pass = pass + 1 [10] endif [11] if pass = limit <ref> [12] </ref> pass = 0 [13] backtrack finding the ending period of first production l [14] p [start] = P l i=start d i [15] f [i] = 0 for i = l; l + 1; ; t, t = l + 1, goto [2] [16] else [17] t = t +
Reference: [13] <author> Silver, E.A. AND H.C. Meal, </author> <title> A Heuristic for Selecting Lot-Size Quantities for the Case of a Deterministic Time-Varying Demand Rate and Discrete Opportunities for Replenishment, Prod. </title> <journal> and Inv. Mgmt. </journal> <volume> 14, </volume> <pages> 64-74, </pages> <year> 1973. </year> <month> 20 </month>
Reference-contexts: On the other hand, optimal algorithms usually don't possess the stability or the so-called insulation property which will be defined rigorously in Section 3. For this reason, many heuristics have been developed for the DLSP, among which are the Silver-Meal Heuristic <ref> [13] </ref>, Least-Unit-Cost [9] and Part-Period Balancing [5]. For a complete survey of the lot-sizing heuristics literature, see Baker [3]. Common features of these heuristics are: they 3 are all myopic in nature, run in linear time, and are stable. Due to these reasons, they have been frequently used in practice. <p> Goto [2] [11] else 5 [12] t = t + 1 <ref> [13] </ref> endif [14] endwhile [15] p [last] = P T i=last d i The algorithm works as follows: Line 1 initializes the code. Line 2-3 sets the current production period last to period 1. The algorithm starts the main loop at line 4. <p> + s i + c i P t [6] j = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last [8] last = j [9] pass = pass + 1 [10] endif [11] if pass = limit [12] pass = 0 <ref> [13] </ref> backtrack finding the ending period of first production l [14] p [start] = P l i=start d i [15] f [i] = 0 for i = l; l + 1; ; t, t = l + 1, goto [2] [16] else [17] t = t + 1 [18] endif [19]
Reference: [14] <author> Silver, E.A. and Peterson, R., </author> <title> Decision Systems for Inventory Management and Production Planning, </title> <address> New York: </address> <publisher> Wiley, </publisher> <year> 1985. </year>
Reference-contexts: Goto [2] [11] else 5 [12] t = t + 1 [13] endif <ref> [14] </ref> endwhile [15] p [last] = P T i=last d i The algorithm works as follows: Line 1 initializes the code. Line 2-3 sets the current production period last to period 1. The algorithm starts the main loop at line 4. <p> = arcmin lastit ff [i 1] + s i + c i P t [7] if j &gt; last [8] last = j [9] pass = pass + 1 [10] endif [11] if pass = limit [12] pass = 0 [13] backtrack finding the ending period of first production l <ref> [14] </ref> p [start] = P l i=start d i [15] f [i] = 0 for i = l; l + 1; ; t, t = l + 1, goto [2] [16] else [17] t = t + 1 [18] endif [19] endwhile 17 Table 6: Performance Comparison constant unit cost Silver-Meal
Reference: [15] <author> Wagelmans, A. , S. Van Hoesel and A. Kolen, </author> <title> Economic Lot Sizing: An O(n log n) Algorithm That Runs In Linear Time In The Wagner-Whitin Case. </title> <journal> Opns. Res., </journal> <volume> 40, </volume> <editor> Supp. No.1, Jan.-Feb., S145-156, </editor> <year> 1992. </year>
Reference-contexts: The very first optimal algorithm is the well known Wagner-Whitin Algorithm which has been regarded as a "slow" algorithm due to its O (n 2 ) worst case running time. Recently, several researchers (Aggarwal and Park [1], Federgruen and Tzur [7], Wagelmans, Van Hoesel, and Kolen <ref> [15] </ref>) have developed different types of O (n log n) optimal lot-sizing algorithms. More recently, Qian and Jones [12] showed that the Wagner-Whitin Algorithm itself is in fact an O (n) algorithm under very realistic assumptions. <p> Third, since this problem contains the constant unit cost case as a special case, a study of it will enhance our understanding of the DLSP. While exact algorithms [17] [6] [7] [1] <ref> [15] </ref> can produce optimal solutions to the DLSP with variable unit costs, they typically don't possess the stability property. On the other hand, no stable heuristics are known for the general variable cost case. <p> Goto [2] [11] else 5 [12] t = t + 1 [13] endif [14] endwhile <ref> [15] </ref> p [last] = P T i=last d i The algorithm works as follows: Line 1 initializes the code. Line 2-3 sets the current production period last to period 1. The algorithm starts the main loop at line 4. <p> + c i P t [7] if j &gt; last [8] last = j [9] pass = pass + 1 [10] endif [11] if pass = limit [12] pass = 0 [13] backtrack finding the ending period of first production l [14] p [start] = P l i=start d i <ref> [15] </ref> f [i] = 0 for i = l; l + 1; ; t, t = l + 1, goto [2] [16] else [17] t = t + 1 [18] endif [19] endwhile 17 Table 6: Performance Comparison constant unit cost Silver-Meal LUC PPB Heur B Average Ratio 1.015 1.103 1.032
Reference: [16] <author> Wagner, H.M. </author> <title> and T.M. Whitin, Dynamic Version of the Economic Lot-Size Model. </title> <journal> Mgmt. Sci., </journal> <volume> 5, </volume> <pages> 89-96, </pages> <year> 1958. </year>
Reference-contexts: 1 Introduction The DLSP (Dynamic Lot Sizing Problem), introduced by H.M. Wagner and T.M. Whitin in 1958 <ref> [16] </ref>, considers a finite period production planning problem with deterministic demands in each period, a linear holding cost per unit per period, fixed setup cost per production run, and a linear production cost per unit. All costs are non-negative and time-varying. <p> endif [11] if pass = limit [12] pass = 0 [13] backtrack finding the ending period of first production l [14] p [start] = P l i=start d i [15] f [i] = 0 for i = l; l + 1; ; t, t = l + 1, goto [2] <ref> [16] </ref> else [17] t = t + 1 [18] endif [19] endwhile 17 Table 6: Performance Comparison constant unit cost Silver-Meal LUC PPB Heur B Average Ratio 1.015 1.103 1.032 1.011 Worst Ratio 1.029 1.377 1.060 1.022 Number of best 11 4 4 29 Table 7: Performance Comparison variable unit cost
Reference: [17] <author> Wagner, H. M., </author> <title> A Postscript to Dynamic Problems in the Theory of the Firm. </title> <journal> Naval Res. Logist. Quart. </journal> <volume> 7, </volume> <pages> 7-12, </pages> <year> 1960. </year> <month> 21 </month>
Reference-contexts: Third, since this problem contains the constant unit cost case as a special case, a study of it will enhance our understanding of the DLSP. While exact algorithms <ref> [17] </ref> [6] [7] [1] [15] can produce optimal solutions to the DLSP with variable unit costs, they typically don't possess the stability property. On the other hand, no stable heuristics are known for the general variable cost case. <p> if pass = limit [12] pass = 0 [13] backtrack finding the ending period of first production l [14] p [start] = P l i=start d i [15] f [i] = 0 for i = l; l + 1; ; t, t = l + 1, goto [2] [16] else <ref> [17] </ref> t = t + 1 [18] endif [19] endwhile 17 Table 6: Performance Comparison constant unit cost Silver-Meal LUC PPB Heur B Average Ratio 1.015 1.103 1.032 1.011 Worst Ratio 1.029 1.377 1.060 1.022 Number of best 11 4 4 29 Table 7: Performance Comparison variable unit cost SM MSM
References-found: 17

