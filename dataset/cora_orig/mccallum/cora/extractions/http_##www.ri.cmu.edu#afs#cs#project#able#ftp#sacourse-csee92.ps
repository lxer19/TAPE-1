URL: http://www.ri.cmu.edu/afs/cs/project/able/ftp/sacourse-csee92.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/able/www/paper_abstracts/sacourse-csee92.html
Root-URL: 
Phone: 2  
Title: Experience with a Course on Architectures for Software Systems  
Author: David Garlan Mary Shaw Chris Okasaki Curtis M. Scott and Roy F. Swonger 
Address: Pittsburgh, PA 14213  NH 03062  
Affiliation: 1 School of Computer Science Carnegie Mellon University  Digital Equipment Corporation Nashua,  
Abstract: As software systems grow in size and complexity their design problem extends beyond algorithms and data structures to issues of system design. This area receives little or no treatment in existing computer science curricula. Although courses about specific systems are usually available, there is no systematic treatment of the organizations used to assemble components into systems. These issues the software architecture level of software design are the subject of a new course that we taught for the first time in Spring 1992. This paper describes the motivation for the course, the content and structure of the current version, and our plans for improving the next version. 
Abstract-found: 1
Intro-found: 1
Reference: [AG92] <author> Robert Allen and David Garlan. </author> <title> A formal approach to software architectures. </title> <note> Submitted for publication, </note> <month> January </month> <year> 1992. </year>
Reference-contexts: Formal model of event systems. Specialization of abstract formal models to describe specific systems. [GN91] Pipes and Filters. Abstract model of pipes and filters. Use of formalism to explain what a software architecture is and to analyze its properties. <ref> [AG92] </ref> Domain-Specific Architectures (5 lectures) Data Processing. Architectures for management information systems. [Fis91, RC86] Distributed, Heterogeneous Computing. Applied pipe and filter architectures. Ar chitectures to support flexible processor allocation and reconfiguration. [BWW88, D + 91] Real-Time System Architectures. Real-time schedulers: rate-monotonic scheduling, cyclic executives, and others.
Reference: [And91] <author> Gregory R. Andrews. </author> <title> Paradigms for process interaction in distributed programs. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(1) </volume> <pages> 49-90, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Many of the readings were quite good; others should be replaced. The best of the readings included Nii's survey of Blackboard Systems [Nii86a, Nii86b], Andrews' survey of distributed architectures <ref> [And91] </ref>, Shaw's overview of architectural styles [Sha90a], Parnas' classic "Criteria" [Par72] and A7 papers [PCW85], the Perry In-scape paper [Per87], a paper on implicit invocation by Garlan, Kaiser, and Notkin [GKN88], Lampson's hints on system design [Lam84], and Lane's paper on the concept of the design space [Lan90].
Reference: [Bac86] <author> Maurice J. Bach. </author> <title> The Design of the UNIX Operating System, </title> <booktitle> chapter 5.12, </booktitle> <pages> pages 111-119. </pages> <booktitle> Software Series. </booktitle> <publisher> Prentice-Hall, </publisher> <year> 1986. </year>
Reference: [BAP87] <author> J. M. Bishop, S. R. Adams, and D. J. Pritchard. </author> <title> Distributing concurrent Ada programs by source translation. </title> <journal> Software|Practice and Experience, </journal> <volume> 17(12) </volume> <pages> 859-884, </pages> <month> December </month> <year> 1987. </year>
Reference-contexts: This example of a system shows how to make the structural design of a user interface explicitly dependent on the functional requirements. [Lan90] Architecture Transformers. Semi-automatic conversion of the uniprocessor ver-sion of a system to a multiprocesor version; not fully general, but works under clearly stated conditions. <ref> [Bis87, BAP87] </ref> System Generators. Automatic production of certain classes of systems from their specifications. [LS86, Joh86, BO91] Environment Generators.
Reference: [Bis87] <author> Judy M. Bishop. </author> <title> Ada profile charts in software development. Journal of Pascal, Ada and Modula-2, </title> <type> 8(2), </type> <month> October </month> <year> 1987. </year>
Reference-contexts: This example of a system shows how to make the structural design of a user interface explicitly dependent on the functional requirements. [Lan90] Architecture Transformers. Semi-automatic conversion of the uniprocessor ver-sion of a system to a multiprocesor version; not fully general, but works under clearly stated conditions. <ref> [Bis87, BAP87] </ref> System Generators. Automatic production of certain classes of systems from their specifications. [LS86, Joh86, BO91] Environment Generators.
Reference: [BO91] <author> Don Batory and Sean O'Malley. </author> <title> The design and implementation of hierarchi-cal software systems using reusable components. </title> <type> Technical Report TR-91-22, </type> <institution> Department of Computer Science, University of Texas, Austin, </institution> <month> June </month> <year> 1991. </year>
Reference-contexts: Semi-automatic conversion of the uniprocessor ver-sion of a system to a multiprocesor version; not fully general, but works under clearly stated conditions. [Bis87, BAP87] System Generators. Automatic production of certain classes of systems from their specifications. <ref> [LS86, Joh86, BO91] </ref> Environment Generators. Automatic production of environments from descrip tions of the tasks to be performed. [HGN91] 5 Assignments 5.1 Purpose The purpose of the assignments, as in any course, is to help students master the material.
Reference: [Boo86] <author> Grady Booch. </author> <title> Object-oriented development. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-12(2):211-221, </volume> <month> February </month> <year> 1986. </year>
Reference: [Boo87] <author> Grady Booch. </author> <title> Software Components with Ada: Structures, Tools and Subsystems. </title> <address> Benjamin/Cummings, Menlo Park, CA, </address> <year> 1987. </year>
Reference-contexts: Overall this was a good approach, although it takes a lot of preparation to make it successful. We attempted to use Booch components <ref> [Boo87] </ref> for the first and third assignments, and the standard Unix tools for the second assignment. However, many of the software needed in the solutions to the problems could not be found in these standard collections.
Reference: [BWW88] <author> M. R. Barbacci, C. B. Weinstock, and J. M. Wing. </author> <booktitle> Programming at the processor-memory-switch level. In Proceedings of the 10th International Conference on Software Engineering, </booktitle> <pages> pages 19-28, </pages> <address> Singapore, April 1988. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Use of formalism to explain what a software architecture is and to analyze its properties. [AG92] Domain-Specific Architectures (5 lectures) Data Processing. Architectures for management information systems. [Fis91, RC86] Distributed, Heterogeneous Computing. Applied pipe and filter architectures. Ar chitectures to support flexible processor allocation and reconfiguration. <ref> [BWW88, D + 91] </ref> Real-Time System Architectures. Real-time schedulers: rate-monotonic scheduling, cyclic executives, and others. Conditions under which a particular real-time architecture can be applied. [SG90, Sta88] Architectures for Mobile Robotics. Software organization of reactor-effector systems that operate in an uncertain environment.
Reference: [D + 91] <editor> Doubleday et al. </editor> <title> Building distributed Ada applications from specifications and functional components. </title> <booktitle> In Proceedings of TRI-Ada'91, </booktitle> <pages> pages 143-154, </pages> <address> San Jose, CA, </address> <month> October </month> <year> 1991. </year> <note> ACM Press. </note>
Reference-contexts: Use of formalism to explain what a software architecture is and to analyze its properties. [AG92] Domain-Specific Architectures (5 lectures) Data Processing. Architectures for management information systems. [Fis91, RC86] Distributed, Heterogeneous Computing. Applied pipe and filter architectures. Ar chitectures to support flexible processor allocation and reconfiguration. <ref> [BWW88, D + 91] </ref> Real-Time System Architectures. Real-time schedulers: rate-monotonic scheduling, cyclic executives, and others. Conditions under which a particular real-time architecture can be applied. [SG90, Sta88] Architectures for Mobile Robotics. Software organization of reactor-effector systems that operate in an uncertain environment.
Reference: [DK76] <author> Frank DeRemer and Hans H. Kron. </author> <title> Programming-in-the-large versus programming-in-the-small. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-2(2):80-86, </volume> <month> June </month> <year> 1976. </year>
Reference: [DSS90] <institution> Proceedings of the Workshop on Domain-Specific Software Architectures, </institution> <month> July </month> <year> 1990. </year>
Reference: [Ear90] <author> Anthony Earl. </author> <title> A reference model for computer assisted software engineering environment frameworks. </title> <type> Technical Report HPL-SEG-TN-90-11, </type> <institution> Hewlett Packard Laboratories, Bristol, </institution> <address> England, </address> <month> August </month> <year> 1990. </year>
Reference: [Fi87] <author> Bill Flinn and ib Holm Sorensen. CAVIAR: </author> <title> A Case Study in Specification. </title> <publisher> Prentice Hall International, </publisher> <year> 1987. </year>
Reference: [Fis91] <author> Gary Fisher. </author> <title> Application portability profile -APP- The U.S. Government's open system environment profile. </title> <institution> US Department of Commerce, </institution> <month> April </month> <year> 1991. </year> <note> National Technical Information Service Special Report, 500-187. </note>
Reference-contexts: Specialization of abstract formal models to describe specific systems. [GN91] Pipes and Filters. Abstract model of pipes and filters. Use of formalism to explain what a software architecture is and to analyze its properties. [AG92] Domain-Specific Architectures (5 lectures) Data Processing. Architectures for management information systems. <ref> [Fis91, RC86] </ref> Distributed, Heterogeneous Computing. Applied pipe and filter architectures. Ar chitectures to support flexible processor allocation and reconfiguration. [BWW88, D + 91] Real-Time System Architectures. Real-time schedulers: rate-monotonic scheduling, cyclic executives, and others. Conditions under which a particular real-time architecture can be applied. [SG90, Sta88] Architectures for Mobile Robotics.
Reference: [FO85] <author> Marek Fridrich and William Older. </author> <title> Helix: The architecture of the XMS distributed file system. </title> <journal> IEEE Software, </journal> <volume> 2(3) </volume> <pages> 21-29, </pages> <month> May </month> <year> 1985. </year>
Reference: [GD90] <author> David Garlan and Norman Delisle. </author> <title> Formal specifications as reusable frameworks. In VDM'90: VDM and Z Formal Methods in Software Development, </title> <address> Kiel, Germany, 1990. </address> <publisher> Springer-Verlag, LNCS 428. </publisher>
Reference-contexts: Introduction to Z. Basic notation of the Z Specification Language. The schema calculus. [Spi89b, Sha85] Industrial Experience with Formal Models. Use of formal models to understand, document, and analyze system architectures in two major industrial case studies. <ref> [GD90, HK91] </ref> Paisley. Executable specification language that supports some elementary per formance analysis. [Zav91] Event Systems. Formal model of event systems. Specialization of abstract formal models to describe specific systems. [GN91] Pipes and Filters. Abstract model of pipes and filters.
Reference: [GKN88] <author> David Garlan, Gail E. Kaiser, and David Notkin. </author> <title> On the criteria to be used in composing tools into systems. </title> <type> Technical Report 88-08-09, </type> <institution> Department of Computer Science, University of Washington, </institution> <month> August </month> <year> 1988. </year>
Reference-contexts: These presentations were performed during class time, and their schedule is presented in Figure 1. The core task chosen was the KWIC indexing problem <ref> [Par72, GKN88] </ref>. In this problem, a set of lines (sequences of words) is extended to include all circular shifts of each line, and the resulting extended set is alphabetized. <p> The best of the readings included Nii's survey of Blackboard Systems [Nii86a, Nii86b], Andrews' survey of distributed architectures [And91], Shaw's overview of architectural styles [Sha90a], Parnas' classic "Criteria" [Par72] and A7 papers [PCW85], the Perry In-scape paper [Per87], a paper on implicit invocation by Garlan, Kaiser, and Notkin <ref> [GKN88] </ref>, Lampson's hints on system design [Lam84], and Lane's paper on the concept of the design space [Lan90].
Reference: [GN91] <author> David Garlan and David Notkin. </author> <title> Formalizing design spaces: Implicit invocation mechanisms. </title> <booktitle> In VDM'91: Formal Software Development Methods, </booktitle> <pages> pages 31-44. </pages> <publisher> Springer-Verlag, LNCS 551, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: Use of formal models to understand, document, and analyze system architectures in two major industrial case studies. [GD90, HK91] Paisley. Executable specification language that supports some elementary per formance analysis. [Zav91] Event Systems. Formal model of event systems. Specialization of abstract formal models to describe specific systems. <ref> [GN91] </ref> Pipes and Filters. Abstract model of pipes and filters. Use of formalism to explain what a software architecture is and to analyze its properties. [AG92] Domain-Specific Architectures (5 lectures) Data Processing. Architectures for management information systems. [Fis91, RC86] Distributed, Heterogeneous Computing. Applied pipe and filter architectures. <p> As with the architectural development tasks the formal modelling task builds on an existing base|in this case the formal model developed by Garlan and Notkin of event systems <ref> [GN91] </ref>. In this work the authors showed how a simple model of systems based on event broadcast could be specialized for a number of common systems, including Smalltalk MVC, Gandalf programming environments, the Field programming environment, and APPL/A.
Reference: [Gro91] <author> MIF Working Group. </author> <title> Master: A prototech module interconnection formalism. </title> <note> Draft of December 1991, </note> <year> 1991. </year>
Reference: [H + 88] <author> Robert Harper et al. </author> <title> Introduction to Standard ML. </title> <type> Technical report, </type> <institution> Laboratory for Foundations of Computer Science, Computer Science Department, University of Edinburgh, </institution> <month> March </month> <year> 1988. </year>
Reference: [HGN91] <author> A. Nico Habermann, David Garlan, and David Notkin. </author> <title> Generation of integrated task-specific software environments. </title> <editor> In Richard F. Rashid, editor, </editor> <booktitle> CMU Computer Science: A 25th Commemorative, Anthology Series, </booktitle> <pages> pages 69-98. </pages> <publisher> ACM Press, </publisher> <year> 1991. </year>
Reference-contexts: Automatic production of certain classes of systems from their specifications. [LS86, Joh86, BO91] Environment Generators. Automatic production of environments from descrip tions of the tasks to be performed. <ref> [HGN91] </ref> 5 Assignments 5.1 Purpose The purpose of the assignments, as in any course, is to help students master the material. Assignments serve the additional purpose of demonstrating the students' mastery of the material, thereby establishing a basis for evaluation.
Reference: [HK91] <author> Iain Houston and Steve King. </author> <title> Experiences and results from the use of Z in IBM. </title> <booktitle> In VDM'91: Formal Software Development Methods, number 551 in Lecture Notes in Computer Science, </booktitle> <pages> pages 588-595. </pages> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: Introduction to Z. Basic notation of the Z Specification Language. The schema calculus. [Spi89b, Sha85] Industrial Experience with Formal Models. Use of formal models to understand, document, and analyze system architectures in two major industrial case studies. <ref> [GD90, HK91] </ref> Paisley. Executable specification language that supports some elementary per formance analysis. [Zav91] Event Systems. Formal model of event systems. Specialization of abstract formal models to describe specific systems. [GN91] Pipes and Filters. Abstract model of pipes and filters.
Reference: [HR90] <author> Barbara Hayes-Roth. </author> <title> Architectural foundations for real-time performance in intelligent agents. The Journal of Real-Time Systems, </title> <publisher> Kluwer Academic Publishers, </publisher> <pages> 2 99-125, </pages> <year> 1990. </year>
Reference-contexts: Real-time schedulers: rate-monotonic scheduling, cyclic executives, and others. Conditions under which a particular real-time architecture can be applied. [SG90, Sta88] Architectures for Mobile Robotics. Software organization of reactor-effector systems that operate in an uncertain environment. The CMU task control architec ture. <ref> [HR90, SST86] </ref> Layered Architectures for Communication. Network protocols based on layered model of communication abstractions. Special emphasis on ISO Open System Interconnection (OSI) standard. [Tan81] Tools, Environments, and Automated Design Guidance (5 lectures) Hints on System Design.
Reference: [I + 83] <author> J. D. Ichbiah et al. </author> <title> Rationale for the design of the Ada programming language. </title> <journal> SIGPLAN Notices, </journal> <volume> 14(16 (Part B)):8:1-16, 13 </volume> <pages> 1-21, </pages> <month> June </month> <year> 1983. </year> <title> Chapters 8 (Modules) and 13 (Generic Program Units). </title>
Reference: [Joh86] <author> Stephen C. Johnson. </author> <title> YACC: yet another compiler-compiler. In UNIX Programmer's Supplementary Documents, </title> <booktitle> volume PS1, </booktitle> <pages> pages 15 1-33. </pages> <institution> University of California, Berkeley, </institution> <year> 1986. </year>
Reference-contexts: Semi-automatic conversion of the uniprocessor ver-sion of a system to a multiprocesor version; not fully general, but works under clearly stated conditions. [Bis87, BAP87] System Generators. Automatic production of certain classes of systems from their specifications. <ref> [LS86, Joh86, BO91] </ref> Environment Generators. Automatic production of environments from descrip tions of the tasks to be performed. [HGN91] 5 Assignments 5.1 Purpose The purpose of the assignments, as in any course, is to help students master the material.
Reference: [Lam84] <author> Butler W. Lampson. </author> <title> Hints for computer system design. </title> <journal> IEEE Software, </journal> <volume> 1(1) </volume> <pages> 11-28, </pages> <month> January </month> <year> 1984. </year>
Reference-contexts: Network protocols based on layered model of communication abstractions. Special emphasis on ISO Open System Interconnection (OSI) standard. [Tan81] Tools, Environments, and Automated Design Guidance (5 lectures) Hints on System Design. Sage guidance and rules of thumb about designing good systems. <ref> [Lam84] </ref> Automated Design Guidance. The selection of a software architecture should depend on the requirements of the application. This example of a system shows how to make the structural design of a user interface explicitly dependent on the functional requirements. [Lan90] Architecture Transformers. <p> readings included Nii's survey of Blackboard Systems [Nii86a, Nii86b], Andrews' survey of distributed architectures [And91], Shaw's overview of architectural styles [Sha90a], Parnas' classic "Criteria" [Par72] and A7 papers [PCW85], the Perry In-scape paper [Per87], a paper on implicit invocation by Garlan, Kaiser, and Notkin [GKN88], Lampson's hints on system design <ref> [Lam84] </ref>, and Lane's paper on the concept of the design space [Lan90]. The course syllabus would have been much better if we had been able to find good readings about Unix pipes, management information system architectures, the ISO Open Systems Interconnection model, and architectural tools.
Reference: [Lan90] <author> Thomas G. Lane. </author> <title> A design space and design rules for user interface software architecture. </title> <type> Technical Report CMU/SEI-90-TR-22 ESD-90-TR-223, </type> <institution> Carnegie Mellon University, Software Engineering Institute, </institution> <month> November </month> <year> 1990. </year>
Reference-contexts: The selection of a software architecture should depend on the requirements of the application. This example of a system shows how to make the structural design of a user interface explicitly dependent on the functional requirements. <ref> [Lan90] </ref> Architecture Transformers. Semi-automatic conversion of the uniprocessor ver-sion of a system to a multiprocesor version; not fully general, but works under clearly stated conditions. [Bis87, BAP87] System Generators. Automatic production of certain classes of systems from their specifications. [LS86, Joh86, BO91] Environment Generators. <p> of distributed architectures [And91], Shaw's overview of architectural styles [Sha90a], Parnas' classic "Criteria" [Par72] and A7 papers [PCW85], the Perry In-scape paper [Per87], a paper on implicit invocation by Garlan, Kaiser, and Notkin [GKN88], Lampson's hints on system design [Lam84], and Lane's paper on the concept of the design space <ref> [Lan90] </ref>. The course syllabus would have been much better if we had been able to find good readings about Unix pipes, management information system architectures, the ISO Open Systems Interconnection model, and architectural tools.
Reference: [Lin87] <author> Mark A. Linton. </author> <title> Distributed management of a software database. </title> <journal> IEEE Software, </journal> <volume> 4(6) </volume> <pages> 70-76, </pages> <month> November </month> <year> 1987. </year>
Reference: [LS79] <author> Hugh C. Lauer and Edwin H. Satterthwaite. </author> <title> Impact of MESA on system design. </title> <booktitle> In Proceedings of the Third International Conference on Software Engineering, </booktitle> <pages> pages 174-175. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1979. </year>
Reference: [LS86] <author> M. E. Lesk and E. Schmidt. </author> <title> LEX|a lexical analyzer generator. In UNIX Programmer's Supplementary Documents, </title> <booktitle> volume PS1, </booktitle> <pages> pages 16 1-13. </pages> <institution> University of California, Berkeley, </institution> <year> 1986. </year>
Reference-contexts: Semi-automatic conversion of the uniprocessor ver-sion of a system to a multiprocesor version; not fully general, but works under clearly stated conditions. [Bis87, BAP87] System Generators. Automatic production of certain classes of systems from their specifications. <ref> [LS86, Joh86, BO91] </ref> Environment Generators. Automatic production of environments from descrip tions of the tasks to be performed. [HGN91] 5 Assignments 5.1 Purpose The purpose of the assignments, as in any course, is to help students master the material.
Reference: [Nii86a] <author> H. Penny Nii. </author> <title> Blackboard systems Part 1: The blackboard model of problem solving and the evolution of blackboard architectures. </title> <journal> AI Magazine, </journal> <volume> 7(3) </volume> <pages> 38-53, </pages> <month> Summer </month> <year> 1986. </year> <title> Reprinted with corrections by AI Magazine. </title>
Reference-contexts: The section on tools and environments was reasonably successful, but suffered from the fact that there is relatively little material directly applicable to software architectures. Many of the readings were quite good; others should be replaced. The best of the readings included Nii's survey of Blackboard Systems <ref> [Nii86a, Nii86b] </ref>, Andrews' survey of distributed architectures [And91], Shaw's overview of architectural styles [Sha90a], Parnas' classic "Criteria" [Par72] and A7 papers [PCW85], the Perry In-scape paper [Per87], a paper on implicit invocation by Garlan, Kaiser, and Notkin [GKN88], Lampson's hints on system design [Lam84], and Lane's paper on the concept of <p> We would like to see more papers presenting architectural analysis techniques, and more worked examples in specific architectures. We would also like to see more mature distributed systems architectures and more papers like Nii's <ref> [Nii86a, Nii86b] </ref> that survey a class of systems against a single architectural paradigm. We think this will come with a better understanding of the idioms that comprise software architecture. It is tempting to treat the subject of software architectures abstractly and present only idealized views of the various architectural idioms.
Reference: [Nii86b] <author> H. Penny Nii. </author> <title> Blackboard systems Part 2: Blackboard application systems and a knowledge engineering perspective. </title> <journal> AI Magazine, </journal> <volume> 7(4) </volume> <pages> 82-107, </pages> <month> August </month> <year> 1986. </year> <title> Reprinted with corrections by AI Magazine. </title>
Reference-contexts: The section on tools and environments was reasonably successful, but suffered from the fact that there is relatively little material directly applicable to software architectures. Many of the readings were quite good; others should be replaced. The best of the readings included Nii's survey of Blackboard Systems <ref> [Nii86a, Nii86b] </ref>, Andrews' survey of distributed architectures [And91], Shaw's overview of architectural styles [Sha90a], Parnas' classic "Criteria" [Par72] and A7 papers [PCW85], the Perry In-scape paper [Per87], a paper on implicit invocation by Garlan, Kaiser, and Notkin [GKN88], Lampson's hints on system design [Lam84], and Lane's paper on the concept of <p> We would like to see more papers presenting architectural analysis techniques, and more worked examples in specific architectures. We would also like to see more mature distributed systems architectures and more papers like Nii's <ref> [Nii86a, Nii86b] </ref> that survey a class of systems against a single architectural paradigm. We think this will come with a better understanding of the idioms that comprise software architecture. It is tempting to treat the subject of software architectures abstractly and present only idealized views of the various architectural idioms.
Reference: [Par72] <author> D. L. Parnas. </author> <title> On the criteria to be used in decomposing systems into modules. </title> <journal> Communications of the ACM, </journal> <volume> 15(12) </volume> <pages> 1053-1058, </pages> <month> December </month> <year> 1972. </year>
Reference-contexts: These presentations were performed during class time, and their schedule is presented in Figure 1. The core task chosen was the KWIC indexing problem <ref> [Par72, GKN88] </ref>. In this problem, a set of lines (sequences of words) is extended to include all circular shifts of each line, and the resulting extended set is alphabetized. <p> Many of the readings were quite good; others should be replaced. The best of the readings included Nii's survey of Blackboard Systems [Nii86a, Nii86b], Andrews' survey of distributed architectures [And91], Shaw's overview of architectural styles [Sha90a], Parnas' classic "Criteria" <ref> [Par72] </ref> and A7 papers [PCW85], the Perry In-scape paper [Per87], a paper on implicit invocation by Garlan, Kaiser, and Notkin [GKN88], Lampson's hints on system design [Lam84], and Lane's paper on the concept of the design space [Lan90].
Reference: [Pau85] <author> Mark C. Paulk. </author> <title> The arc network: A case study. </title> <journal> IEEE Software, </journal> <volume> 2(3) </volume> <pages> 61-69, </pages> <month> May </month> <year> 1985. </year>
Reference: [PCW85] <author> David L. Parnas, Paul C. Clements, and David M. Weiss. </author> <title> The modular structure of complex systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-11(3):259-266, </volume> <month> March </month> <year> 1985. </year>
Reference-contexts: Many of the readings were quite good; others should be replaced. The best of the readings included Nii's survey of Blackboard Systems [Nii86a, Nii86b], Andrews' survey of distributed architectures [And91], Shaw's overview of architectural styles [Sha90a], Parnas' classic "Criteria" [Par72] and A7 papers <ref> [PCW85] </ref>, the Perry In-scape paper [Per87], a paper on implicit invocation by Garlan, Kaiser, and Notkin [GKN88], Lampson's hints on system design [Lam84], and Lane's paper on the concept of the design space [Lan90].
Reference: [PDN86] <author> Ruben Prieto-Diaz and James M. Neighbors. </author> <title> Module interconnection languages. </title> <journal> The Journal of Systems and Software, </journal> <volume> 6(4) </volume> <pages> 307-334, </pages> <month> November </month> <year> 1986. </year>
Reference: [Per87] <author> Dewayne E. Perry. </author> <title> Software interconnection models. </title> <booktitle> In Proceedings of the Ninth International Conference on Software Engineering, </booktitle> <pages> pages 61-68, </pages> <address> Monterey, CA, March 1987. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Many of the readings were quite good; others should be replaced. The best of the readings included Nii's survey of Blackboard Systems [Nii86a, Nii86b], Andrews' survey of distributed architectures [And91], Shaw's overview of architectural styles [Sha90a], Parnas' classic "Criteria" [Par72] and A7 papers [PCW85], the Perry In-scape paper <ref> [Per87] </ref>, a paper on implicit invocation by Garlan, Kaiser, and Notkin [GKN88], Lampson's hints on system design [Lam84], and Lane's paper on the concept of the design space [Lan90].
Reference: [PW91] <author> Dewayne E. Perry and Alexander L. Wolf. </author> <title> Software architecture. </title> <note> Submitted for publication, </note> <month> January </month> <year> 1991. </year>
Reference: [RC86] <author> Sridhar A. Raghavan and Donald R. Chand. </author> <title> Applications generators & fourth generation languages. </title> <type> Technical Report TR-86-02, </type> <institution> Wang Institute and Bentley College, </institution> <month> February </month> <year> 1986. </year>
Reference-contexts: Specialization of abstract formal models to describe specific systems. [GN91] Pipes and Filters. Abstract model of pipes and filters. Use of formalism to explain what a software architecture is and to analyze its properties. [AG92] Domain-Specific Architectures (5 lectures) Data Processing. Architectures for management information systems. <ref> [Fis91, RC86] </ref> Distributed, Heterogeneous Computing. Applied pipe and filter architectures. Ar chitectures to support flexible processor allocation and reconfiguration. [BWW88, D + 91] Real-Time System Architectures. Real-time schedulers: rate-monotonic scheduling, cyclic executives, and others. Conditions under which a particular real-time architecture can be applied. [SG90, Sta88] Architectures for Mobile Robotics.
Reference: [S + 87] <author> Alfred Z. Spector et al. Camelot: </author> <title> A distributed transaction facility for Mach and the Internet an interim report. </title> <type> Technical Report CMU-CS-87-129, </type> <institution> Carnegie Mellon University, </institution> <month> June </month> <year> 1987. </year>
Reference: [S + 88] <author> V. Seshadri et al. </author> <title> Semantic analysis in a concurrent compiler. </title> <booktitle> In Proceedings of ACM SIGPLAN '88 Conference on Programming Language Design and Implementation. ACM SIGPLAN Notices, </booktitle> <year> 1988. </year>
Reference: [SG86] <author> Robert W. Scheifler and Jim Gettys. </author> <title> The X window system. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5(2) </volume> <pages> 79-109, </pages> <month> April </month> <year> 1986. </year>
Reference: [SG90] <author> Lui Sha and John B. Goodenough. </author> <title> Real-time scheduling theory and Ada. </title> <booktitle> Computer, </booktitle> <pages> pages 53-62, </pages> <month> April </month> <year> 1990. </year>
Reference-contexts: Architectures for management information systems. [Fis91, RC86] Distributed, Heterogeneous Computing. Applied pipe and filter architectures. Ar chitectures to support flexible processor allocation and reconfiguration. [BWW88, D + 91] Real-Time System Architectures. Real-time schedulers: rate-monotonic scheduling, cyclic executives, and others. Conditions under which a particular real-time architecture can be applied. <ref> [SG90, Sta88] </ref> Architectures for Mobile Robotics. Software organization of reactor-effector systems that operate in an uncertain environment. The CMU task control architec ture. [HR90, SST86] Layered Architectures for Communication. Network protocols based on layered model of communication abstractions.
Reference: [Sha85] <author> Mary Shaw. </author> <title> What can we specify? Questions in the domains of software specifications. </title> <booktitle> In Proceedings of the Third International Workshop on Software Specification and Design, </booktitle> <pages> pages 214-215. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> August </month> <year> 1985. </year>
Reference-contexts: Introduction to Z. Basic notation of the Z Specification Language. The schema calculus. <ref> [Spi89b, Sha85] </ref> Industrial Experience with Formal Models. Use of formal models to understand, document, and analyze system architectures in two major industrial case studies. [GD90, HK91] Paisley. Executable specification language that supports some elementary per formance analysis. [Zav91] Event Systems. Formal model of event systems.
Reference: [Sha90a] <author> Mary Shaw. </author> <title> Elements of a design language for software architecture. </title> <note> Unpublished position paper, </note> <year> 1990. </year>
Reference-contexts: Many of the readings were quite good; others should be replaced. The best of the readings included Nii's survey of Blackboard Systems [Nii86a, Nii86b], Andrews' survey of distributed architectures [And91], Shaw's overview of architectural styles <ref> [Sha90a] </ref>, Parnas' classic "Criteria" [Par72] and A7 papers [PCW85], the Perry In-scape paper [Per87], a paper on implicit invocation by Garlan, Kaiser, and Notkin [GKN88], Lampson's hints on system design [Lam84], and Lane's paper on the concept of the design space [Lan90].
Reference: [Sha90b] <author> Mary Shaw. </author> <title> Toward higher-level abstractions for software systems. </title> <journal> In Data & Knowledge Engineering, </journal> <volume> volume 5, </volume> <pages> pages 119-128. </pages> <publisher> Elsevier Science Publishers B.V., North Holland, </publisher> <year> 1990. </year>
Reference: [Sha91] <author> Mary Shaw. </author> <title> Heterogeneous design idioms for software architecture. </title> <booktitle> In Proceedings of the Sixth International Workshop on Software Specification and Design, IEEE Computer Society, Software Engineering Notes, </booktitle> <pages> pages 158-165, </pages> <address> Como, Italy, </address> <month> October 25-26 </month> <year> 1991. </year>
Reference: [Spi88] <author> J. Michael Spivey. </author> <title> The Fuzz Manual. </title> <booktitle> Computing Science Consultancy, 2 Willow Close, </booktitle> <address> Garsington, Oxford OX9 9AN, UK, </address> <year> 1988. </year>
Reference: [Spi89a] <author> J. M. Spivey. </author> <title> The Z Notation: A Reference Manual. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference: [Spi89b] <author> J.M. Spivey. </author> <title> An introduction to Z and formal specification. </title> <journal> Software Engineering Journal, </journal> <volume> 4(1) </volume> <pages> 40-50, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: Introduction to Z. Basic notation of the Z Specification Language. The schema calculus. <ref> [Spi89b, Sha85] </ref> Industrial Experience with Formal Models. Use of formal models to understand, document, and analyze system architectures in two major industrial case studies. [GD90, HK91] Paisley. Executable specification language that supports some elementary per formance analysis. [Zav91] Event Systems. Formal model of event systems.
Reference: [SST86] <author> Steven A. Shafer, Anthony Stentz, and Charles E. Thorpe. </author> <title> An architecture for sensor fursion in a mobile robot. </title> <booktitle> In Proceedings of the IEEE International Conference on Robotics and Automation, </booktitle> <pages> pages 2002-2010, </pages> <address> San Franciso, CA, </address> <month> April </month> <year> 1986. </year>
Reference-contexts: Real-time schedulers: rate-monotonic scheduling, cyclic executives, and others. Conditions under which a particular real-time architecture can be applied. [SG90, Sta88] Architectures for Mobile Robotics. Software organization of reactor-effector systems that operate in an uncertain environment. The CMU task control architec ture. <ref> [HR90, SST86] </ref> Layered Architectures for Communication. Network protocols based on layered model of communication abstractions. Special emphasis on ISO Open System Interconnection (OSI) standard. [Tan81] Tools, Environments, and Automated Design Guidance (5 lectures) Hints on System Design.
Reference: [Sta88] <author> John A. Stankovic. </author> <title> Misconceptions about real-time computing. </title> <booktitle> Computer, </booktitle> <address> Vol.21(10):10-19, </address> <month> October </month> <year> 1988. </year>
Reference-contexts: Architectures for management information systems. [Fis91, RC86] Distributed, Heterogeneous Computing. Applied pipe and filter architectures. Ar chitectures to support flexible processor allocation and reconfiguration. [BWW88, D + 91] Real-Time System Architectures. Real-time schedulers: rate-monotonic scheduling, cyclic executives, and others. Conditions under which a particular real-time architecture can be applied. <ref> [SG90, Sta88] </ref> Architectures for Mobile Robotics. Software organization of reactor-effector systems that operate in an uncertain environment. The CMU task control architec ture. [HR90, SST86] Layered Architectures for Communication. Network protocols based on layered model of communication abstractions.
Reference: [Tan81] <author> Andrew S. Tannenbaum. </author> <title> Network protocols. </title> <journal> ACM Computing Surveys, </journal> <volume> 13(4) </volume> <pages> 453-489, </pages> <month> December </month> <year> 1981. </year>
Reference-contexts: Software organization of reactor-effector systems that operate in an uncertain environment. The CMU task control architec ture. [HR90, SST86] Layered Architectures for Communication. Network protocols based on layered model of communication abstractions. Special emphasis on ISO Open System Interconnection (OSI) standard. <ref> [Tan81] </ref> Tools, Environments, and Automated Design Guidance (5 lectures) Hints on System Design. Sage guidance and rules of thumb about designing good systems. [Lam84] Automated Design Guidance. The selection of a software architecture should depend on the requirements of the application.
Reference: [WBJ90] <author> Rebecca J. Wirfs-Brock and Ralph E. Johnson. </author> <title> Surveying current research in object-oriented design. </title> <journal> Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 104-124, </pages> <month> September </month> <year> 1990. </year>
Reference: [Zav91] <author> Pamela Zave. </author> <title> An insider's evaluation of PAISLey. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 17(3) </volume> <pages> 212-225, </pages> <month> March </month> <year> 1991. </year>
Reference-contexts: Introduction to Z. Basic notation of the Z Specification Language. The schema calculus. [Spi89b, Sha85] Industrial Experience with Formal Models. Use of formal models to understand, document, and analyze system architectures in two major industrial case studies. [GD90, HK91] Paisley. Executable specification language that supports some elementary per formance analysis. <ref> [Zav91] </ref> Event Systems. Formal model of event systems. Specialization of abstract formal models to describe specific systems. [GN91] Pipes and Filters. Abstract model of pipes and filters. Use of formalism to explain what a software architecture is and to analyze its properties. [AG92] Domain-Specific Architectures (5 lectures) Data Processing.
References-found: 56

