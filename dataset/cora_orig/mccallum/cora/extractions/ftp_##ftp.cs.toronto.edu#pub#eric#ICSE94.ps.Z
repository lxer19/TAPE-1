URL: ftp://ftp.cs.toronto.edu/pub/eric/ICSE94.ps.Z
Refering-URL: http://www.cs.toronto.edu/~eric/
Root-URL: 
Title: Understanding Why in Software Process Modelling, Analysis, and Design (Research Paper)  
Author: Eric S. K. Yu and John Mylopoulos 
Keyword: software process modelling, requirements engineering, organization modelling, actor dependency.  
Address: Toronto, Ontario, Canada M5S 1A4  
Affiliation: Department of Computer Science, University of Toronto  
Note: Proc. 16th Int. Conf. Software Engineering May 16-21, 1994, Sorrento, Italy. (to appear).  
Abstract: In trying to understand and redesign software processes, it is often necessary to have an understanding of the whys that underlie the whats the motivations, intents, and rationales behind the activities and input-output flows. This paper presents a model which captures the intentional structure of a software process and its embedding organization, in terms of dependency relationships among actors. Actors depend on each other for goals to be achieved, tasks to be performed, and resources to be furnished. The model is embedded in the conceptual modelling language Telos. We outline some analytical tools to be developed for the model, and illustrate how the model can help in the systematic design of software processes. The examples used are adaptations of the ISPW-6/7 benchmark example. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Bandinelli and A. Fuggetta, </author> <title> Computational Reflection in Software Process Modeling: the SLANG Approach, </title> <booktitle> Proc. 15th Int. Conf. Soft. </booktitle> <address> Eng., </address> <year> 1993, </year> <pages> pp. 144-154. </pages>
Reference-contexts: More flexible formalisms include models with rules and triggers, and extensions of Petri nets (e.g., <ref> [5, 1] </ref>). These may be viewed as providing the how, to better support or automate process enactment. The intentional model proposed in this paper focuses on the why, in order to support reasoning about process improvement and redesign.
Reference: [2] <author> P. R. Cohen and H. J. Levesque, </author> <title> Intention is Choice with Commitment, </title> <journal> Artif. Intell., </journal> <volume> 42 (3), </volume> <year> 1990. </year>
Reference-contexts: The model is embedded in the conceptual modelling language Telos [18]. The semantics of the mod-elling concepts are characterized using intentional concepts developed in agent modelling in AI (e.g., <ref> [2] </ref>). <p> Actor Dependency concepts are defined in terms of more basic intentional concepts such as belief, goal, ability, and commitment. These concepts have been formalized in modal logic for modelling agents in AI (e.g., <ref> [2, 23] </ref>). We have adapted these for formalizing the dependency relationships between actors. For example, we characterize a committed dependency as a commitment on the depender side plus the depender's belief that the dependee is committed.
Reference: [3] <author> W. Curtis, M. I. Kellner and J. </author> <title> Over, Process Modelling, </title> <journal> Comm. ACM, </journal> <volume> 35 (9), </volume> <year> 1992, </year> <pages> pp. 75-90. </pages>
Reference-contexts: Current process models have been proposed to address a variety of needs, e.g., to improve understanding, to facilitate communication or management, or to support and sometimes automate process enactment <ref> [3] </ref>. Most of these models aim to express what steps a process consists of, or how they are to be performed. <p> We sketched how the formal properties of the model can be specified, and showed how it can be embedded in a conceptual modelling language. Analysis and design tools were illustrated by example, but remain to be implemented and tested. Curtis et al. <ref> [3] </ref> have identified formality, granularity, and scriptiveness as important issues for software process modelling research. The Actor Dependency model is formal without being deterministic. Intentional concepts are used to model actors' expectations about each other's be-haviour, and their provisions for unmet expectations.
Reference: [4] <author> A. Dardenne, A. van Lamsweerde and S. Fickas, </author> <title> Goal Directed Requirements Acquisition, </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 20, </volume> <pages> pp. 3-50, </pages> <year> 1993. </year>
Reference-contexts: In requirements engineering, there has been recognition for some time that understanding and modelling the environment is an important part of systems development. More recently, frameworks have been proposed that treat system and environment as a whole to be jointly modelled, analyzed, and designed (e.g., <ref> [7, 4, 8, 6, 19] </ref>). In our approach, we emphasize the need to model how actors deal with problems on an on-going basis, by mod-elling how they relate to each other at an intentional level. <p> Most requirements models of organizational environments employ some notions of entities, activities, and assertions, or variations, e.g., [9]. Concepts of goals, rules, methods, and tactics are used variously in a number of requirements frameworks, e.g., <ref> [7, 4, 8, 6, 19] </ref>. The distinguishing feature of the present framework is its introduction of Actor Dependency concepts. <p> Expecta tions are not always met, so that analyses of enforcement, assurance, and insurance are of interest. A comparable concept of ensuring has been proposed in <ref> [4] </ref> for more controllable environments. The AD model embodies a distributed conception of intentionality. The intentional dimension is represented as relationships between actors, with dependency chains propagating in all directions, criss-crossing the organization in the form of a network. <p> The concepts of role, position, agent, and association reflect how organizations group and manage complex patterns of social relationships. The need for multiple views is well recognized in requirements engineering (e.g., [20]). A view-directed strategy for requirements acquisition was suggested in <ref> [4] </ref>. The role/position/agent distinction suggests the possibility of role-centred, position-centred, and agent-centred design strategies, making use of the abstraction underlying the distinction which is reminiscent of layered independence in system architectures.
Reference: [5] <author> W. Deiters and V. Gruhn, </author> <title> Managing Software Processes in the Environment MELMAC, </title> <booktitle> Proc. 4th Int. Symp. Practical Software Development Environments, Irvine 1990, SIG-SOFT Notes 15, </booktitle> <volume> no. 6., </volume> <pages> pp. 193-205. </pages>
Reference-contexts: More flexible formalisms include models with rules and triggers, and extensions of Petri nets (e.g., <ref> [5, 1] </ref>). These may be viewed as providing the how, to better support or automate process enactment. The intentional model proposed in this paper focuses on the why, in order to support reasoning about process improvement and redesign.
Reference: [6] <author> E. Dubois, Ph. Du Bois and A. Rifaut, Elaborating, </author> <title> Struc turing and Expressing Formal Requirements of Composite Systems, </title> <booktitle> Proc. Fourth Conf. Advanced Info. Sys. </booktitle> <address> Eng., Manchester, U.K., </address> <month> May 12-15, </month> <year> 1992. </year>
Reference-contexts: In requirements engineering, there has been recognition for some time that understanding and modelling the environment is an important part of systems development. More recently, frameworks have been proposed that treat system and environment as a whole to be jointly modelled, analyzed, and designed (e.g., <ref> [7, 4, 8, 6, 19] </ref>). In our approach, we emphasize the need to model how actors deal with problems on an on-going basis, by mod-elling how they relate to each other at an intentional level. <p> Most requirements models of organizational environments employ some notions of entities, activities, and assertions, or variations, e.g., [9]. Concepts of goals, rules, methods, and tactics are used variously in a number of requirements frameworks, e.g., <ref> [7, 4, 8, 6, 19] </ref>. The distinguishing feature of the present framework is its introduction of Actor Dependency concepts.
Reference: [7] <author> M. S. Feather, </author> <title> Language Support for the Specification and Development of Composite Systems, </title> <journal> ACM Trans. Prog. Lang. and Sys. </journal> <volume> 9, 2, </volume> <month> April </month> <year> 1987, </year> <pages> pp. 198-234. </pages>
Reference-contexts: In requirements engineering, there has been recognition for some time that understanding and modelling the environment is an important part of systems development. More recently, frameworks have been proposed that treat system and environment as a whole to be jointly modelled, analyzed, and designed (e.g., <ref> [7, 4, 8, 6, 19] </ref>). In our approach, we emphasize the need to model how actors deal with problems on an on-going basis, by mod-elling how they relate to each other at an intentional level. <p> Most requirements models of organizational environments employ some notions of entities, activities, and assertions, or variations, e.g., [9]. Concepts of goals, rules, methods, and tactics are used variously in a number of requirements frameworks, e.g., <ref> [7, 4, 8, 6, 19] </ref>. The distinguishing feature of the present framework is its introduction of Actor Dependency concepts.
Reference: [8] <author> S. Fickas and R. Helm, </author> <title> Knowledge Representation and Rea soning in the Design of Composite Systems, </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> 18, 6, </volume> <month> June </month> <year> 1992, </year> <pages> pp. 470-482. </pages>
Reference-contexts: In requirements engineering, there has been recognition for some time that understanding and modelling the environment is an important part of systems development. More recently, frameworks have been proposed that treat system and environment as a whole to be jointly modelled, analyzed, and designed (e.g., <ref> [7, 4, 8, 6, 19] </ref>). In our approach, we emphasize the need to model how actors deal with problems on an on-going basis, by mod-elling how they relate to each other at an intentional level. <p> Most requirements models of organizational environments employ some notions of entities, activities, and assertions, or variations, e.g., [9]. Concepts of goals, rules, methods, and tactics are used variously in a number of requirements frameworks, e.g., <ref> [7, 4, 8, 6, 19] </ref>. The distinguishing feature of the present framework is its introduction of Actor Dependency concepts.
Reference: [9] <author> S. J. Greenspan, </author> <title> Requirements Modelling: A Knowledge Representation Approach to Software Requirements Definition, </title> <type> Ph.D. Thesis, </type> <institution> Dept. Comp. Sci., Univ. of Toronto, </institution> <year> 1984. </year>
Reference-contexts: The user depends on the project manager for a user-friendly and high performance system. The Actor Dependency model distinguishes among three main types of dependencies, based on the ontological category of the dependum, namely, assertion, activity, or entity <ref> [9] </ref>. In a Goal Dependency, an actor depends on another to make a condition in the world come true. Because only an end state or outcome (expressed as an assertion about the world) is specified, the dependee is given the freedom to choose how to achieve it. <p> Furthermore, by applying the framework to a complex environment, the power of the features of the AD model to capture subtle organizational issues are more fully illustrated. Most requirements models of organizational environments employ some notions of entities, activities, and assertions, or variations, e.g., <ref> [9] </ref>. Concepts of goals, rules, methods, and tactics are used variously in a number of requirements frameworks, e.g., [7, 4, 8, 6, 19]. The distinguishing feature of the present framework is its introduction of Actor Dependency concepts.
Reference: [10] <author> K. E. Huff and V. R. Lesser, </author> <title> A plan-based intelligent assis tant that supports the software development process, </title> <booktitle> Proc. 3rd Symp. Practical Softw. </booktitle> <institution> Dev. Envs., Soft. Eng. Not. </institution> <month> 13(5) </month> <year> 1989, </year> <month> pp.97-106. </month>
Reference-contexts: Further constraints are needed to reduce the requirements to a design specification, and from there to an implementation expressed in a non-intentional representation such as procedural or Petri net formalisms [15]. Computer-based agents with planning and problem-solving ability (e.g., <ref> [10] </ref>), will require less reduction to reach an implementation. This paper extends our earlier work [24, 25] by embedding the AD model in the Telos language, outlining some analytical concepts for use with the AD model, and further develops the concepts of role, position, agent, and association.
Reference: [11] <author> W. Humphrey, </author> <title> Managing the Software Process, </title> <publisher> Addison Wesley, </publisher> <address> Reading, Mass., </address> <year> 1989. </year>
Reference-contexts: 1 Introduction A software process refers to the set of tools, methods, and practices used to produce a software product <ref> [11] </ref>. Historically, software development have largely been product-centered. Recently, many researchers and practitioners have refocused their efforts on the process dimension of software engineering (e.g.,[12, 13, 14]). At the core of most of these efforts is some way of describing or modelling a software process.
Reference: [12] <editor> Proc. </editor> <booktitle> 8th International Software Process Workshop, </booktitle> <year> 1993. </year>
Reference: [13] <editor> Proc. </editor> <booktitle> 2nd International Conference on the Software Pro cess, </booktitle> <address> Berlin, Germany, </address> <month> Feb. </month> <year> 1993. </year>
Reference: [14] <editor> Proc. </editor> <booktitle> 15th Int. Conf. Soft. </booktitle> <address> Eng., Baltimore, </address> <month> May </month> <year> 1993. </year>
Reference: [15] <author> M. Jarke, J. Mylopoulos, J. W. Schmidt, Y. Vassiliou, DAIDA: </author> <title> An Environment for Evolving Information Systems, </title> <journal> ACM Trans. Info. Sys., </journal> <month> 10(1) Jan. </month> <year> 1992, </year> <month> pp.1-50. </month>
Reference-contexts: The need for different types of software process models for different purposes may be compared to the need for different languages to represent software products at different levels requirements (providing the why), design (specifying the what), and implementation (giving the how) (e.g., <ref> [15] </ref>). The need to capture design rationales behind software products is well recognized (e.g., [21]). However, to address process rationale, we need to face up to the distributed, organizational nature of processes. <p> For computer-based agents, the AD model serves as a requirements level model. Further constraints are needed to reduce the requirements to a design specification, and from there to an implementation expressed in a non-intentional representation such as procedural or Petri net formalisms <ref> [15] </ref>. Computer-based agents with planning and problem-solving ability (e.g., [10]), will require less reduction to reach an implementation.
Reference: [16] <author> M. Kellner, P. Feiler, A. Finkelstein, T. Katayama, L. Os terweil, M. Penedo, and H. Rombach, </author> <title> Software Process Modeling Example Problem, </title> <booktitle> from 7th Int. Software Process Workshop, </booktitle> <address> Yountville, California, </address> <month> Oct. </month> <year> 1991. </year>
Reference-contexts: Section 2.2 extends the basic model by distinguishing roles and positions from agents. Dependencies across role/position/agent relationships reflect the more elaborate and subtle aspects of software processes. The example used is an adaptation of the ISPW 6/7 benchmark example <ref> [16] </ref>. 2.1 The basic model An Actor Dependency model consists of a set of nodes and links. Each node represents an actor, and each link between two actors indicates that one actor depends on the other for something in order that the former may attain some goal. <p> For example, the position of project manager covers the two roles of Scheduling And Assigning Tasks, and Monitoring Progress. We say that an agent occupies a position. model of a software engineering process organization with agents, roles, and positions. It is an adaptation of the ISPW-6/7 benchmark example <ref> [16] </ref>. The organization includes a project manager, design engineers and quality assurance engineers. <p> The model is formal so that tools can be developed. The modelling concepts were illustrated with examples drawn from the software process literature <ref> [16] </ref>. We sketched how the formal properties of the model can be specified, and showed how it can be embedded in a conceptual modelling language. Analysis and design tools were illustrated by example, but remain to be implemented and tested.
Reference: [17] <author> N. Madhavji, </author> <title> The Process Cycle, </title> <journal> IEE Software Engineering Journal, </journal> <note> Spec. Issue on Software Process and Its Support, </note> <author> N. Madhavji, W. Schafer, eds., </author> <month> 6(5) Sept. </month> <year> 1991, </year> <month> pp.234-242. </month>
Reference-contexts: In the Actor Dependency model, actors depend on each other for goals to be achieved, tasks to be performed, and resources to be furnished. By modelling the structure of these intentional dependencies among actors, we provide a higher level characterization of a software 1 We follow <ref> [17] </ref> in distinguishing these three classes of users of software process models. process. The model distinguishes among four types of dependencies, reflecting the types of freedom allowed by one actor on the other in a dependency relationship. Commitment and criticality characterize the strength of a dependency.
Reference: [18] <author> J. Mylopoulos, A. Borgida, M. Jarke, M. Koubarakis, </author> <title> Telos: Representing Knowledge about Information Systems, </title> <journal> ACM Trans. Info. Sys., </journal> <volume> 8 (4), </volume> <year> 1991. </year>
Reference-contexts: Commitment and criticality characterize the strength of a dependency. Dependencies are threaded through roles and positions, as well as physical agents, creating an intricate web of relationships that we call the intentional structure of the software process. The model is embedded in the conceptual modelling language Telos <ref> [18] </ref>. The semantics of the mod-elling concepts are characterized using intentional concepts developed in agent modelling in AI (e.g., [2]). <p> Embedding the Actor Dependency model into a formal conceptual modelling framework would allow the potentially large amounts of knowledge about software processes to be managed and used effectively. We have chosen to embed the concepts of the Actor Dependency model into the conceptual modelling language Telos <ref> [18] </ref>. In doing so, we obtain an object-oriented representational framework, with classification, generalization, aggregation, attribution, and time.
Reference: [19] <author> J. Mylopoulos, L. Chung, B. Nixon, </author> <title> Representing and Us ing Non-Functional Requirements: A Process-Oriented Approach, </title> <journal> IEEE Trans. Soft. Eng., </journal> <volume> 18 (6), </volume> <month> June </month> <year> 1992. </year>
Reference-contexts: In requirements engineering, there has been recognition for some time that understanding and modelling the environment is an important part of systems development. More recently, frameworks have been proposed that treat system and environment as a whole to be jointly modelled, analyzed, and designed (e.g., <ref> [7, 4, 8, 6, 19] </ref>). In our approach, we emphasize the need to model how actors deal with problems on an on-going basis, by mod-elling how they relate to each other at an intentional level. <p> Most requirements models of organizational environments employ some notions of entities, activities, and assertions, or variations, e.g., [9]. Concepts of goals, rules, methods, and tactics are used variously in a number of requirements frameworks, e.g., <ref> [7, 4, 8, 6, 19] </ref>. The distinguishing feature of the present framework is its introduction of Actor Dependency concepts.
Reference: [20] <author> B. Nuseibeh, J. Kramer, A. Finkelstein, </author> <title> Expressing the Re lationships Between Multiple Views in Requirements Specification, </title> <booktitle> 15th Int. Conf. Soft. </booktitle> <address> Eng., Baltimore, </address> <year> 1993, </year> <month> pp.187-196. </month>
Reference-contexts: The concepts of role, position, agent, and association reflect how organizations group and manage complex patterns of social relationships. The need for multiple views is well recognized in requirements engineering (e.g., <ref> [20] </ref>). A view-directed strategy for requirements acquisition was suggested in [4]. The role/position/agent distinction suggests the possibility of role-centred, position-centred, and agent-centred design strategies, making use of the abstraction underlying the distinction which is reminiscent of layered independence in system architectures.
Reference: [21] <author> C. Potts and G. Bruns, </author> <title> Recording the Reasons for Design Decisions, </title> <booktitle> Proc. Int. Conf. Soft. </booktitle> <address> Eng., </address> <year> 1988, </year> <pages> pp. 418-427. </pages>
Reference-contexts: The need to capture design rationales behind software products is well recognized (e.g., <ref> [21] </ref>). However, to address process rationale, we need to face up to the distributed, organizational nature of processes.
Reference: [22] <author> L. Suchman, </author> <title> Office Procedures as Practical Action: Mod els of Work and System Design, </title> <journal> ACM Trans. Office Info. Systems, </journal> <month> 1(4) Oct. </month> <year> 1983, </year> <month> pp.320-328. </month>
Reference-contexts: The distinguishing feature of the present framework is its introduction of Actor Dependency concepts. The motivation for these concepts comes from the area of organizational computing, where it has been recognized that computing system design needs to take into account the problematic and contingent nature of work <ref> [22] </ref>. The AD model accommodates uncertainty in organizational environments, and acknowledges actors' flexibility in coping with uncertainty, by not requiring design goals to be fully reduced to non-intentional activities and flows.
Reference: [23] <author> B. Thomas, Y. Shoham, A. Schwartz, and S. Kraus, </author> <title> Prelim inary Thoughts on an Agent Description Language, </title> <journal> Int. J. Intell. Sys., </journal> <volume> Vol. 6, </volume> <year> 1991, </year> <pages> pp. 498-508. </pages>
Reference-contexts: Actor Dependency concepts are defined in terms of more basic intentional concepts such as belief, goal, ability, and commitment. These concepts have been formalized in modal logic for modelling agents in AI (e.g., <ref> [2, 23] </ref>). We have adapted these for formalizing the dependency relationships between actors. For example, we characterize a committed dependency as a commitment on the depender side plus the depender's belief that the dependee is committed.
Reference: [24] <author> E. Yu, </author> <title> Modelling Organizations for Information Systems Requirements Engineering, </title> <booktitle> Proc. 1st IEEE Symp. on Requirements Engineering, </booktitle> <address> San Diego, </address> <month> Jan. </month> <year> 1993, </year> <month> pp.34-41. </month>
Reference-contexts: In our approach, we emphasize the need to model how actors deal with problems on an on-going basis, by mod-elling how they relate to each other at an intentional level. The basic Actor Dependency model has been proposed in the context of information systems requirements engineering <ref> [24] </ref>. This present paper applies the model to the software process domain, and extends our earlier results in several ways. It shows how the model can be embedded in a conceptual modelling framework, making use of structuring mechanisms such as classification and generalization. <p> Section 6 discusses the proposed approach in relation to existing research. Section 7 draws some conclusions from our work and outlines future work. 2 An Actor Dependency model The basic features of the Actor Dependency (AD) model have been presented in an earlier paper <ref> [24] </ref>, and are briefly reviewed in section 2.1. The concepts are illustrated using a simple example of a software project organization. Section 2.2 extends the basic model by distinguishing roles and positions from agents. Dependencies across role/position/agent relationships reflect the more elaborate and subtle aspects of software processes. <p> A preliminary version appeared in <ref> [24] </ref>. Software processes typically involve many roles, agents, and positions, with complex networks of dependencies. Embedding the Actor Dependency model into a formal conceptual modelling framework would allow the potentially large amounts of knowledge about software processes to be managed and used effectively. <p> Computer-based agents with planning and problem-solving ability (e.g., [10]), will require less reduction to reach an implementation. This paper extends our earlier work <ref> [24, 25] </ref> by embedding the AD model in the Telos language, outlining some analytical concepts for use with the AD model, and further develops the concepts of role, position, agent, and association.
Reference: [25] <author> E. Yu, </author> <title> An Organization Modelling Framework for Infor mation Systems Requirements Engineering, </title> <booktitle> Proc. 3rd Ws. Info. Techs. & Sys., </booktitle> <address> Orlando, </address> <month> Dec. </month> <year> 1993, </year> <pages> pp. 172-179. </pages>
Reference-contexts: A framework for software process 8 modelling, analysis, and design is suggested in the longer version of this paper [26], based on a proposed framework for requirements engineering <ref> [25] </ref>. 6 Related work In the Software Process Modelling research area, non-intentional models that focus on activities and input-output flow are the most common. More flexible formalisms include models with rules and triggers, and extensions of Petri nets (e.g., [5, 1]). <p> Computer-based agents with planning and problem-solving ability (e.g., [10]), will require less reduction to reach an implementation. This paper extends our earlier work <ref> [24, 25] </ref> by embedding the AD model in the Telos language, outlining some analytical concepts for use with the AD model, and further develops the concepts of role, position, agent, and association.
Reference: [26] <author> E. Yu and J. Mylopoulos, </author> <title> Understanding Why in Soft ware Process Modelling, Analysis, and Design, </title> <type> Tech. Report DKBS-TR-94-3, </type> <institution> Dept. Comp. Sci., Univ. of Toronto, </institution> <month> Feb. </month> <year> 1994. </year>
Reference-contexts: Criticality is defined analogously. Because Telos allows integrity constraints on any class, the semantics of the Actor Dependency model can be incorporated and enforced by stating them as integrity constraints in the appropriate metaclasses. Examples of the syntactic representation of the AD model in Telos are given in <ref> [26] </ref>. 4 Analyzing software processes A software process model that captures actors' motivations, intents, and rationales provides a better basis for an analyst to explore the broader implications of a process. <p> A framework for software process 8 modelling, analysis, and design is suggested in the longer version of this paper <ref> [26] </ref>, based on a proposed framework for requirements engineering [25]. 6 Related work In the Software Process Modelling research area, non-intentional models that focus on activities and input-output flow are the most common. More flexible formalisms include models with rules and triggers, and extensions of Petri nets (e.g., [5, 1]).
Reference: [27] <author> E. Yu, </author> <title> A Framework for Organization Modelling, </title> <type> Ph.D. Thesis, </type> <institution> Dept. Comp. Sci., Univ. of Toronto, forthcoming. </institution> <month> 10 </month>
Reference-contexts: is reflected by the depender's belief that the dependee has a plan which will result in being true, and that everything that the plan depends on are viable. 5 DependeeCommitted (b; ) Believes (b; 9p (result (p; ) ^ allDepV iable (b; p))) These axioms are presented in detail in <ref> [27] </ref>. A preliminary version appeared in [24]. Software processes typically involve many roles, agents, and positions, with complex networks of dependencies. Embedding the Actor Dependency model into a formal conceptual modelling framework would allow the potentially large amounts of knowledge about software processes to be managed and used effectively.
References-found: 27

