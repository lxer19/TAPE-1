URL: ftp://ftp.cs.utexas.edu/pub/boyer/diss/kim.ps.Z
Refering-URL: http://www.cs.utexas.edu/users/boyer/students.html
Root-URL: http://www.cs.utexas.edu
Title: On Automatically Generating and Using Examples in a Computational Logic System  
Abstract: shortTitle(Generating and Using Examples ) @authorbox(Myung Won Kim) @reportnumbox(Technical Report #57 March 1987) The contents of this technical report originally appeared as the author's dissertation. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Aubin, R. </author> <title> Mechanizing Structural Induction. </title> <type> Ph.D. </type> <institution> Th., University of Edinburgh, </institution> <year> 1976. </year>
Reference-contexts: by a context several operations can be applied to further refine 12 Ballantyne and Bledsoe have discussed higher order example generation in functional analysis and topology [2, 4]. 13 In his theorem prover, Aubin has employed simplification in evaluating "structures" assigned to variables for checking the non-provability of generalized conjectures <ref> [1] </ref>. A similar approach has been adopted by Cohen in LTP [12]. 14 A formula must be reducible. For detail refer to Boyer and Moore [6]. EXAMPLE GENERATION IN THE BOYER-MOORE THEORY 22 the subproblem. <p> Using diagrams he succeeded in reducing the search space of his geometry machine by several orders of magnitude. Several other researchers also have experimented with using examples in theorem proving. They include Ballantyne and Bledsoe, Reiter, Aubin, and Brotz <ref> [2, 40, 1, 9] </ref>. EGS: AN APPLICATION 67 5.1.2 Referencing Problem in the Boyer-Moore Theorem Prover The referencing problem also arises in the Boyer-Moore theorem prover. Theorem proving is carried out primarily by lemma-driven simplification and induction.
Reference: 2. <author> Ballantyne, A. M. and Bledsoe, W. W. </author> <title> "On Generating and Using Examples in Proof Discovery". </title> <booktitle> Machine Intelligence 10 (1982). </booktitle>
Reference-contexts: For a given subproblem represented by a context several operations can be applied to further refine 12 Ballantyne and Bledsoe have discussed higher order example generation in functional analysis and topology <ref> [2, 4] </ref>. 13 In his theorem prover, Aubin has employed simplification in evaluating "structures" assigned to variables for checking the non-provability of generalized conjectures [1]. A similar approach has been adopted by Cohen in LTP [12]. 14 A formula must be reducible. For detail refer to Boyer and Moore [6]. <p> Using diagrams he succeeded in reducing the search space of his geometry machine by several orders of magnitude. Several other researchers also have experimented with using examples in theorem proving. They include Ballantyne and Bledsoe, Reiter, Aubin, and Brotz <ref> [2, 40, 1, 9] </ref>. EGS: AN APPLICATION 67 5.1.2 Referencing Problem in the Boyer-Moore Theorem Prover The referencing problem also arises in the Boyer-Moore theorem prover. Theorem proving is carried out primarily by lemma-driven simplification and induction. <p> RELATED WORK 84 7. Related Work Various attempts have been made to generate and apply examples. Examples have long been used for many AI tasks, especially for automated reasoning <ref> [19, 20, 2, 40] </ref> and machine learning [33, 10, 52, 32, 34]. They are also used in the areas of intelligent computer-assisted instruction and tutoring and intelligent human interfaces [54, 41]. However, in many cases examples are given by the user interactively or stored initially in the system. <p> She also groups mathematical examples into epistemological classes - start-up examples, reference examples, model examples, and counter-examples each of which plays a different role in understanding mathematics. The interested reader should refer to Rissland [42]. 7.3 GRAPHER Ballantyne and Bledsoe's GRAPHER <ref> [2] </ref> generates counter-examples for non-trivial topological conjectures within the domain of finite point sets. Given a conjecture, GRAPHER constructs a set-theoretic relationship graph which serves as a global constraint specification. GRAPHER employs its fairly extensive knowledge in set theory and topology in constructing the graph. <p> Example generation in GRAPHER is of higher-order in the sense that the domain of examples involves sets. Ballantyne and Bledsoe have also experimented with constructing counter-examples and using them as a subgoal filter in proof discovery in analysis <ref> [2] </ref>. In the experiment linear examples (linear or piecewise linear functions) for function variables are automatically constructed and used as counterexamples in actual proofs [4]. <p> However, it may be the case that such implicit conditions should not explicitly be added into the constraint because if added, they may be removed as subsumed when the constraint is simplified. In GRAPHER <ref> [2] </ref> implicit information about set objects is contained in the graph representation of the global constraint. It is used as additional constraint when variables corresponding to set objects are instantiated during example generation for topological conjectures.
Reference: 3. <author> Bledsoe, W. W. </author> <title> The SUP-INF Method in Presburger Arithmetic. </title> <type> Tech. </type> <institution> Rept. ATP-18, Department of Mathematics, Unversity of Texas at Austin, </institution> <year> 1974. </year>
Reference-contexts: X (TIMES 3 Y))) (NOT (EQUAL X Y))) soft-list: NIL info-list: (MODE LINEAR POLY-LST ((LEQ ((X . 1) (Y . -1)) 7) The polynomial representation can be rewritten in the arithmetical form: X - Y &lt;_ 7 ..... (1) These simultaneous inequalities are simplified by the method of variable elimination <ref> [3, 8] </ref>. For example, (1) + (2) gives us 2Y &lt;_ 7 which is further simplified, considering the fact that Y is a natural number, to yield 0 &lt;_ Y &lt;_ 3. We also have 0 &lt;_ X &lt;_ 10, by substituting the value range for Y. <p> Increased knowledge should improve a system's performance; however, it typically expands the search space and may cause inefficient search because of the larger search space. Bledsoe has named this the referencing problem <ref> [3] </ref>. The referencing problem arises not only in theorem proving but in many systems whose functions are based on their internal knowledge where such knowledge is extensible. Resolution theorem proving suffers considerably from this problem. To avoid or reduce this problem, knowledge can be divided into different groups.
Reference: 4. <author> Bledsoe, W. W. </author> <title> "Using Examples to Generate Instantiations for Set Variables". </title> <booktitle> Proc. of IJCAI-83 (1983), </booktitle> <pages> 892-901. </pages>
Reference-contexts: For a given subproblem represented by a context several operations can be applied to further refine 12 Ballantyne and Bledsoe have discussed higher order example generation in functional analysis and topology <ref> [2, 4] </ref>. 13 In his theorem prover, Aubin has employed simplification in evaluating "structures" assigned to variables for checking the non-provability of generalized conjectures [1]. A similar approach has been adopted by Cohen in LTP [12]. 14 A formula must be reducible. For detail refer to Boyer and Moore [6]. <p> Ballantyne and Bledsoe have also experimented with constructing counter-examples and using them as a subgoal filter in proof discovery in analysis [2]. In the experiment linear examples (linear or piecewise linear functions) for function variables are automatically constructed and used as counterexamples in actual proofs <ref> [4] </ref>.
Reference: 5. <author> Boyer, R. S. and Moore, J S. </author> <title> A Computational Logic. </title> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: The theorem proving environment serves as a rich source of problems for the application of examples [19, 40, 47, 29, 30]. We assume that the reader is familiar with the Boyer-Moore theory; those who are not familiar to the theory should refer to Boyer and Moore <ref> [5, 6] </ref>. In this chapter we sketch the Boyer-Moore theorem prover; our example generation system shares several facilities with the theorem prover and our application of examples is closely tied with its structure. <p> This cross fertilization heuristic is closely related to the way that induction arguments are formulated; it is designed to allow use of the induction hypothesis. For further details the reader should refer to Boyer and Moore <ref> [5] </ref>. For example, consider the theorem (IMPLIES (PLISTP L) (EQUAL (REVERSE (REVERSE L)) L)). Simplification of the induction formula yields (IMPLIES (AND (PLISTP L) (EQUAL (REVERSE (REVERSE L)) L)) (EQUAL (REVERSE (APPEND (REVERSE L) (CONS A NIL))) (CONS A L))). <p> The Boyer-Moore theorem prover has adopted a few simple heuristics for identifying irrelevant hypotheses. The reader should refer Boyer and Moore <ref> [5] </ref> for details. 2.1.3.6 Induction The theorem prover automatically generates induction arguments employing various heuristics. An important fact about the Boyer-Moore logic is that objects are constructed inductively. Its induction principle allows us to prove theorems by inducting on the construction of these objects. This is called "structural induction". <p> Various heuristics are employed for formulating induction schemes, manipulating those schemes and finally producing the induction formula. Boyer and Moore <ref> [5] </ref> discussed them in detail. 2.2 An Example of Theorem Proving by the Boyer-Moore Theorem Prover The following is an example of actually running the Boyer-Moore theorem prover - the user input to the prover is underlined. <p> EGS: IMPLEMENTATION 48 heuristic information for computing the plausibility score of tasks and selecting terms to expand for the EXPAND task. The information of type prescription and controller pocket is also used in simplification. For details the reader should refer to Boyer and Moore <ref> [5] </ref>. 4.8.2.5 Stored Examples Three different types of known examples - typical, boundary, and counter examples - are associated with each defined function 33 . These known examples of a function are classified by the user and stored as indexed by the function name in the knowledge base.
Reference: 6. <author> Boyer, R. S. and Moore, J S. Metafunctions: </author> <title> Proving Them Correct and Using Them Efficiently as New Proof Procedures. In The Correctness Problem in Computer Science, </title> <editor> Boyer, R. S. and Moore, J S., Eds., </editor> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1981. </year>
Reference-contexts: The theorem proving environment serves as a rich source of problems for the application of examples [19, 40, 47, 29, 30]. We assume that the reader is familiar with the Boyer-Moore theory; those who are not familiar to the theory should refer to Boyer and Moore <ref> [5, 6] </ref>. In this chapter we sketch the Boyer-Moore theorem prover; our example generation system shares several facilities with the theorem prover and our application of examples is closely tied with its structure. <p> The set of all possible QUOTEd constants together with the reduction mechanism corresponds to a formal model of the Boyer-Moore theory. For details the reader should refer to Boyer and Moore <ref> [6] </ref>. 2.3.2 The Constructiveness of the Boyer-Moore Logic An important characteristic of the Boyer-Moore logic, especially, related to example generation, is its constructiveness. <p> A similar approach has been adopted by Cohen in LTP [12]. 14 A formula must be reducible. For detail refer to Boyer and Moore <ref> [6] </ref>. EXAMPLE GENERATION IN THE BOYER-MOORE THEORY 22 the subproblem. A refinement operation associated with a subproblem is called a task; performing a task means the actual execution of the attached operation with the corresponding context. <p> For some primitive functions such as EQUAL and IF the LISP code has been hand-coded. It may also be the case that some LISP code is hand-coded for efficiency, such as the PRIME function. The details of the LISP code is described in <ref> [6] </ref>.
Reference: 7. <author> Boyer, R. S. and Moore, J S. </author> <title> Proof Checking the RSA Public Key Encryption Algorithm. </title> <type> Tech. </type> <institution> Rept. ICSCA-CMP-33, Institute for Computing Science and Computer Applications, University of Texas at Austin, </institution> <year> 1982. </year>
Reference-contexts: The following briefly describes each of the above libraries. 1. PROVEALL contains basic definitions and theorems about numbers and lists; 2. RSA includes definitions and theorems about the invertibility of the Rivest-Shamir-Adleman public key encryption algorithm <ref> [7] </ref>; 3. WILSON contains definitions and theorems for Wilson's theorem [45]; 4. GAUSS contains definitions and theorems for Gauss's law of quadratic reciprocity; 5. ZTAK includes definitions and theorems for the termination of Takeuchi's function [35].
Reference: 8. <author> Boyer, R. S. and Moore, J S. </author> <title> Integrating Decision Procedures into Heuristic Theorem Provers: A Case Study of Linear Arithmetic. </title> <type> Tech. </type> <institution> Rept. ICSCA-CMP-44, Institute for Computing Science and Computer Applications, University of Texas at Austin, </institution> <year> 1985. </year>
Reference-contexts: X (TIMES 3 Y))) (NOT (EQUAL X Y))) soft-list: NIL info-list: (MODE LINEAR POLY-LST ((LEQ ((X . 1) (Y . -1)) 7) The polynomial representation can be rewritten in the arithmetical form: X - Y &lt;_ 7 ..... (1) These simultaneous inequalities are simplified by the method of variable elimination <ref> [3, 8] </ref>. For example, (1) + (2) gives us 2Y &lt;_ 7 which is further simplified, considering the fact that Y is a natural number, to yield 0 &lt;_ Y &lt;_ 3. We also have 0 &lt;_ X &lt;_ 10, by substituting the value range for Y.
Reference: 9. <author> Brotz, D. </author> <title> Proving Theorems by Mathematical Induction. </title> <type> Ph.D. </type> <institution> Th., Stanford University, </institution> <year> 1974. </year>
Reference-contexts: Using diagrams he succeeded in reducing the search space of his geometry machine by several orders of magnitude. Several other researchers also have experimented with using examples in theorem proving. They include Ballantyne and Bledsoe, Reiter, Aubin, and Brotz <ref> [2, 40, 1, 9] </ref>. EGS: AN APPLICATION 67 5.1.2 Referencing Problem in the Boyer-Moore Theorem Prover The referencing problem also arises in the Boyer-Moore theorem prover. Theorem proving is carried out primarily by lemma-driven simplification and induction.
Reference: 10. <author> Buchanan, B. G. and Feigenbaum, E. A. </author> <title> "DENDRAL and META-DENDRAL: Their Applications Dimension". </title> <booktitle> Artificial Intelligence 11 (1978), </booktitle> <pages> 5-24. </pages>
Reference-contexts: RELATED WORK 84 7. Related Work Various attempts have been made to generate and apply examples. Examples have long been used for many AI tasks, especially for automated reasoning [19, 20, 2, 40] and machine learning <ref> [33, 10, 52, 32, 34] </ref>. They are also used in the areas of intelligent computer-assisted instruction and tutoring and intelligent human interfaces [54, 41]. However, in many cases examples are given by the user interactively or stored initially in the system.
Reference: 11. <editor> Bundy, Alan. </editor> <booktitle> Artificial Mathematicians: The Computer Modelling of Mathematical Reasoning. </booktitle> , <year> 1982. </year>
Reference-contexts: Inheritance of examples: Positive examples of more specialized concepts can be inherited up to a more generalized concept. Similarly, negative examples can be inherited down the generalization hierarchy of concepts. 45 Gilmore [21] and Bundy <ref> [11] </ref> have discussed a rational reconstruction of the geometry machine. 46 In AM a concept is represented as a frame, collection of slot and value pairs. RELATED WORK 85 Those generated examples are used further to develop new concepts and conjectures.
References-found: 11

