URL: http://www.cs.colorado.edu/serl/cm/Papers/Dock/icsm98.ps.gz
Refering-URL: http://www.cs.colorado.edu/serl/cm/Papers.html
Root-URL: http://www.cs.colorado.edu
Email: frickhall,dennis,alwg@cs.colorado.edu  
Title: Evaluating Software Deployment Languages and Schema An Experience Report  
Author: Richard S. Hall, Dennis M. Heimbigner, Alexander L. Wolf 
Address: Boulder, CO 80309 USA  
Affiliation: Department of Computer Science University of Colorado  
Abstract: Software distribution is evolving from a physical media approach to one where it is practical and advantageous to leverage the connectivity of networks. Network distribution of software systems provides timeliness and continuity of evolution not possible with physical media distribution methods. To support network-based software distribution, companies and organizations such as Microsoft, Marimba, and the Desktop Management Task Force (DMTF) are strengthening their efforts to package software systems in a way that is conducive to network distribution and management. The result of these efforts has led to the creation of software description languages and schema such as the Open Software Description format created by Microsoft and Marimba and the Management Information Format created by DMTF. While these efforts are steps in the right direction, they do not address deployment issues in a complete and systematic fashion. The contribution of this paper is to evaluate these leading software description technologies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> T. Bray. </author> <title> Extensible Markup Lanuage (XML): Part I. Syn tax. </title> <address> Textuality, Vancouver, BC, Canada. (http://www.w3.org/pub/WWW/TR/WD-xml-lang.html). </address>
Reference-contexts: The two standards combined are intended to be used in conjunction with push technologies to enable software systems to automatically install and update themselves. The syntax for both OSD and CDF are based on the Extensible Markup Language (XML) <ref> [1] </ref>. Refer to Appendix A for a simple OSD specification. 3.1. Detailed description The OSD syntax is organized hierarchically with very few keywords.
Reference: [2] <institution> Desktop Management Task Force. </institution> <note> Software Standard Groups Definition, Version 2.0, 29 Nov. 1995. (http://www.dmtf.org/tech/apps.html). </note>
Reference-contexts: Specific efforts such as the Software Dock [4], the Open Software Description (OSD) [8], and the Desktop Management Task Force (DMTF) <ref> [2] </ref> are trying to create a standard syntax and semantic for describing software systems in order to facilitate deployment and related activities. The purpose of this paper is to discuss two specific high-profile deployment language efforts. <p> The purpose of this paper is to discuss two specific high-profile deployment language efforts. One is Microsoft's and Marimba's joint proposal named OSD [8] that was submitted to the W3 Consortium. The other is the DTMF consortium's Software MIF standard <ref> [2] </ref>. In order to discuss these technologies, the next section briefly introduces the requirements and issues of software deployment. Sections 3 and 4 discuss OSD and MIF, respectively, and specifically address their solutions with respect to the requirements and issues outlined in Section 2. 2. <p> For the sake of brevity, the attributes associated with each group will not be discussed in detail; only the purpose of each group will be presented. For a more detailed view of the group attributes refer to <ref> [2] </ref> and to Appendix B. Four groups, ComponentID, Software Component Information, Software Signature, and Verification, are used to identify and verify a software component. These groups describe the manufacturer, the specific product configuration, the means with which to detect the product's existence, and the product's level of operation, respectively.
Reference: [3] <author> C. Ellerman. </author> <title> Channel Definition Format. </title> <institution> Microsoft Corp, </institution> <address> Redmond, WA. (http://www.w3.org/TR/NOTE-CDFsubmit.html). </address>
Reference: [4] <author> R. S. Hall, D. Heimbigner, A. van der Hoek, and A. L. Wolf. </author> <title> An architecture for Post-Development Configuration Man agement in a Wide-Area Network. </title> <booktitle> In Proc. of the 1997 Intl. Conf. on Distributed Computing Systems, </booktitle> <pages> pages 269 278. </pages> <publisher> IEEE Computing Society, </publisher> <month> May </month> <year> 1997. </year>
Reference-contexts: The purpose of these languages and schema is to provide enough semantic information about a given software system so that many standard deployment tasks can be automated or simplified. Specific efforts such as the Software Dock <ref> [4] </ref>, the Open Software Description (OSD) [8], and the Desktop Management Task Force (DMTF) [2] are trying to create a standard syntax and semantic for describing software systems in order to facilitate deployment and related activities. The purpose of this paper is to discuss two specific high-profile deployment language efforts. <p> Research work that is directly related to this topic is being performed by the authors in the form of the Software Dock <ref> [4] </ref>. The Software Dock is a distributed, agent-based framework for supporting the entire software deployment life cycle. One major aspect of the Software Dock research is the creation of a standard schema to meet the requirements outlined in this paper.
Reference: [5] <author> R. S. Hall, D. Heimbigner, and A. L. Wolf. </author> <title> Software De ployment Languages and Schema. </title> <type> Technical Report CU SERL-203-97, </type> <institution> University of Colorado Software Engineering Research Laboratory, </institution> <note> 18 Dec. 1997. (http://www.cs.colorado.edu/serl/cm/Papers.html#Schema). </note>
Reference-contexts: These activities are collectively referred to as the software deployment life cycle and their relationships are depicted in Figure 1. For a more detailed description of the software deployment life cycle see <ref> [5] </ref>. <p> The responsibility of describing a software system lies solely with the producer of the software system since the producer has the most knowledge about the system. We have identified minimally <ref> [6, 5] </ref> five classes of semantic information that must be described for a software system or component, these are: * Assert constraints: These are predicates over required attribute values where the predicate must evaluate to true or else an unresolvable conflict is indicated.
Reference: [6] <author> R. S. Hall, D. Heimbigner, and A. L. Wolf. </author> <title> Requirements for Software Deployment Languages and Schema. </title> <booktitle> In Proc. of the 8th Intl. Symposium on System Configuration Manage ment (SCM-8), </booktitle> <address> Brussels, </address> <month> July </month> <year> 1998. </year>
Reference-contexts: The responsibility of describing a software system lies solely with the producer of the software system since the producer has the most knowledge about the system. We have identified minimally <ref> [6, 5] </ref> five classes of semantic information that must be described for a software system or component, these are: * Assert constraints: These are predicates over required attribute values where the predicate must evaluate to true or else an unresolvable conflict is indicated.
Reference: [7] <institution> Microsoft Corp, Redmond, WA. Zero Administration Initia tive. </institution> <note> (http://www.microsoft.com/windows/innovation/). </note>
Reference-contexts: In general, OSD provides a vocabulary for packaging software; this includes describing software components, their versions, their underlying structure, and relationships among components. OSD, which is one piece of Microsoft's Zero Administration Initiative <ref> [7] </ref>, is related to Microsoft's Channel Definition Format (CDF)[3] for push content. The two standards combined are intended to be used in conjunction with push technologies to enable software systems to automatically install and update themselves.
Reference: [8] <author> A. van Hoff, H. Partovi, and T. </author> <title> Thai. The Open Software Description Format (OSD). Microsoft Corp. and Marimba, </title> <publisher> Inc. </publisher> <address> (http://www.w3.org/TR/NOTE-OSD.html). </address>
Reference-contexts: The purpose of these languages and schema is to provide enough semantic information about a given software system so that many standard deployment tasks can be automated or simplified. Specific efforts such as the Software Dock [4], the Open Software Description (OSD) <ref> [8] </ref>, and the Desktop Management Task Force (DMTF) [2] are trying to create a standard syntax and semantic for describing software systems in order to facilitate deployment and related activities. The purpose of this paper is to discuss two specific high-profile deployment language efforts. <p> The purpose of this paper is to discuss two specific high-profile deployment language efforts. One is Microsoft's and Marimba's joint proposal named OSD <ref> [8] </ref> that was submitted to the W3 Consortium. The other is the DTMF consortium's Software MIF standard [2]. In order to discuss these technologies, the next section briefly introduces the requirements and issues of software deployment. <p> As it stands, OSD currently addresses only a limited form of installation and update in the software deployment life cycle. Inspecting the OSD specification <ref> [8] </ref>, it is clear that there are two halves to the specification: the Microsoft half and the Marimba half.
References-found: 8

