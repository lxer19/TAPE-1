URL: ftp://ftp.cse.unsw.edu.au/pub/users/andrewt/publications/1997/80.ps.Z
Refering-URL: http://www.cse.unsw.edu.au/school/publications/1997/SCSE_publications.html
Root-URL: 
Email: Email: norman@cse.unsw.edu.au  Email: pavlos@mpce.mq.edu.au.  E-mail: yan@st.nepean.uws.edu.au.  
Phone: 2  3  
Title: Inductive Properties of States  
Author: Norman Foo Pavlos Peppas and Yan Zhang 
Keyword: situation calculus, states, induction, automaton, actions.  
Address: NSW 2052, Australia.  NSW 2109, Australia.  Sydney, Nepean NSW 2747, Australia.  
Affiliation: 1 Knowledge Systems Group, School of Computer Science and Engineering, University of New South Wales,  Knowledge Systems Group, Department of Computing, School of MPCE, Macquarie University,  Knowledge Systems Group, Department of Computing, University of Western  
Abstract: In the situation calculus states are often distinguished from situations by the assumption that situations are paths in a rooted tree while a state is a particular truth assignment to the fluents. It is then possible that two situations have end points that agree on all fluents, i.e., are the same state, and yet be distinct from the perspective of situations. This has the merit of making inductive proofs simple as it introduces two axioms amounting to enforcing the rooted tree structure that are used as trivial bases for the inductions. In this paper we show that the tree structure is dispensable for induction when the underlying system is deterministic, thus elevating the state perspective to equal status. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> Arbib, M.A., </author> <title> "Automata theory: </title> <booktitle> the rapprochement with control theory" (Chapter 6, </booktitle> <pages> pp 163-184), </pages> <booktitle> and "Basic notions of automata and semigroups" (Chapter 7, </booktitle> <pages> pp 185-20), </pages> <note> in Topics in Mathematical Systems Theory, </note> <editor> ed. R.E.Kalman, P.L.Falb, and M.A.Arbib, </editor> <publisher> McGraw-Hill, </publisher> <year> 1969. </year>
Reference-contexts: The starting situation s 0 is intuitively the initial state of the system prior to any action. The literature on the situation calculus seems to be ambivalent about the interpretation of situations as states. We see our first task to be one that clears up this confusion. Systems theory <ref> [1] </ref> is the appropriate machinery for this clarification. Consider the term algebra generated by the operations s 0 and do. Two examples of these terms are s 0 and do (a; (do (b; s 0 )) where a and b are in Act. <p> Definition 2. Two (situation) terms ! 1 ,! 2 in Sit are Nerode equivalent, written ! 1 N ! 2 iff for all fluents F and all action sequences !, F (! 1 ffi !) = F (! 2 ffi !). It is well-known <ref> [1] </ref> that the equivalence N is in fact a right-congruence relation respecting the composition operation ffi. Moreover, it induces a minimal state representation for the system describable in a style familiar from automata theory [1] that is perhaps necessary to recall. <p> It is well-known <ref> [1] </ref> that the equivalence N is in fact a right-congruence relation respecting the composition operation ffi. Moreover, it induces a minimal state representation for the system describable in a style familiar from automata theory [1] that is perhaps necessary to recall. <p> The identification in item 3 is well-defined due to the right conguence property of the Nerode equivalence. The following is a consequence of a well-known result in systems theory <ref> [1] </ref>. Theorem 3. The identification above defines a minimal automaton whose input-output behavior coincides with the system described by situations, actions and fluents. The potentially reachable states should be distinguished from the actually reachable by introducing "tests" on the applicability of actions a in situations s via the poss predicate. <p> Presumably these are desired in the interpretation of states as situations | which are really paths in a rooted tree (with S 0 as root). If states are more traditionally interpreted in accordance with systems theory <ref> [1] </ref>, the foundational axioms will not hold. The question then is how many of the fundamental results of Reiter's can be established using the T (or N) schemas without appeal to the foundational axioms. The main purpose of this paper is to show that nothing is lost.
Reference: 2. <author> Boolos, G. and Jeffrey, R. </author> <title> "Computability and Logic", </title> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference: 3. <author> Baral, C., Gelfond, M. and Provetti, A., </author> <title> "Representing Actions: Laws, Observations, and Hypotheses", </title> <note> To appear in the Journal of Logic Programming, </note> <year> 1997. </year>
Reference-contexts: In one direction the enhancements classify constraints into different kinds, e.g., passive vs. causal. In another direction, time intervals are introduced. The direction that we examine in this paper is one that is intended to model deterministic actions <ref> [3, 5] </ref>, and has applications in reasoning about constraints, databases, and situated robotics. The organization of the paper is as follows. In section 2 we show how to reduce the deterministic situation calculus to classical automata theory, thereby clarifying a widespread confusion between situations and states.
Reference: 4. <author> Lloyd, J., </author> <title> "Foundations of Logic Programming", </title> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference-contexts: The Appendix reviews the well-known argument for this. Consequently, its transitive closure &lt; is also not first-order definable. In logic programming, the way to meet this difficulty is to resort to the second-order notion of fixed points <ref> [4] </ref> which has a natural operational (proof-theoretic) interpretation. Indeed an alternative way to define &lt; exploiting fixed points is the following: Definition 5.
Reference: 5. <author> Reiter, R., </author> <title> "Proving Properties of States in the Situation Calculus", </title> <journal> Artificial Intelligence, </journal> <volume> 64 (1993), </volume> <pages> 337-351. </pages>
Reference-contexts: In one direction the enhancements classify constraints into different kinds, e.g., passive vs. causal. In another direction, time intervals are introduced. The direction that we examine in this paper is one that is intended to model deterministic actions <ref> [3, 5] </ref>, and has applications in reasoning about constraints, databases, and situated robotics. The organization of the paper is as follows. In section 2 we show how to reduce the deterministic situation calculus to classical automata theory, thereby clarifying a widespread confusion between situations and states. <p> In section 3 we examine three induction postulates for proving properties of states to compare their strengths. Section 4 shows that by adopting the state-transition perspective we can reproduce the basic results of <ref> [5] </ref> without appeal to the foundational axioms used in that paper; as a consequence the tran-sition graphs of the systems being modelled are not constrained to be acyclic. <p> Corollary 6. s 1 s 2 iff either s 1 = s 2 or there is a finite chain trans (s 1 ; a 1 ; t 1 ); : : : ; trans (t n1 ; a n ; s 2 ): 3 Three Induction Postulates In <ref> [5] </ref> Reiter inroduced an induction postulate (called R-induction below) to mirror the usual inductive postulate on numbers (called N-induction below). He showed that his postulate can be used with two foundational axioms (see section 4) to establish inductive properties of states. <p> Reiter's work <ref> [5] </ref> allows P to be strong enough to eliminate non-standard models. In this spirit, in schema N can denote any subset of the natural numbers, and not necessarily just the first-order expressible ones. <p> The principal use of theorem 10 and its corollaries is in establishing system constraints as indicated at the end of section 4. In that section we will use either schema T or N in re-establishing the main results proved by Reiter <ref> [5] </ref> using schema R. In using schema N, we will be reasoning about the number n in the relation &lt; n , which will be seen to be equivalent to reasoning about the number of invocations of the logic program rules assumed in the propositions or theorems. <p> As this assumes the least fixed point semantics for such programs it is not first-order; but on the other hand it is computable, i.e., the &lt; relation is recursively enumerable and indeed recursive when the reachable set is finite. 4 Consequences of Induction In <ref> [5] </ref> Reiter established a number of fundamental results using schema R and two foundational axioms: 8s (:s &lt; S 0 ) (1) 8a; s; s 0 (s &lt; do (a; s 0 ) poss (a; s 0 ) ^ s s 0 (2) These have the respective effects of preventing looping <p> The main purpose of this paper is to show that nothing is lost. In order to make comparisons and reference easy, we will cite the propositions in <ref> [5] </ref> that we will re-establish in the form "R-proposition (R-theorem) X.Y" where X.Y is the proposition (theorem) number as it appears in [5]. <p> The main purpose of this paper is to show that nothing is lost. In order to make comparisons and reference easy, we will cite the propositions in <ref> [5] </ref> that we will re-establish in the form "R-proposition (R-theorem) X.Y" where X.Y is the proposition (theorem) number as it appears in [5]. We will take some liberties with the re-statement of these propositions (theorems) using our terminology and notation, and rely on the reader to verify the faithfulnes of the translation.
Reference: 6. <author> Shananhan, M., </author> <title> "Solving the Frame Problem", </title> <type> book manuscript, </type> <year> 1996. </year>
Reference-contexts: 1 Introduction The situation calculus approach to reasoning about actions is so deeply entrenched that other approaches have difficulty in being accepted as viable alternatives. Yet, a recent monograph <ref> [6] </ref> has shown that this calculus has to be enhanced and refined in several directions in order for it to be practically useful. In one direction the enhancements classify constraints into different kinds, e.g., passive vs. causal. In another direction, time intervals are introduced.
References-found: 6

