URL: ftp://wilma.cs.brown.edu/pub/techreports/93/cs93-50.ps.Z
Refering-URL: http://www.cs.brown.edu/research/graphics/research/pub/
Root-URL: http://www.cs.brown.edu
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Kurt Akeley. </author> <title> RealityEngine graphics. </title> <editor> In James T. Kajiya, editor, </editor> <booktitle> Computer Graphics (SIGGRAPH '93 Proceedings), </booktitle> <volume> volume 27, </volume> <pages> pages 109-116, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: It is therefore also susceptible to hardware assistance, which complicates the time-critical rendering problem considerably [25]. I do not address time-critical rendering, since I assume that rendering can be contained to be fast [27] <ref> [1] </ref> compared to the data inquiry and computation time, e.g., by restraining myself to wire-frame representations. In contrast, multimedia systems, being based on presampled data types that are inherently wall-time based, are aware of sampling rates and real time display of results [40].
Reference: [2] <author> ANSI (American National Standards Institute). </author> <title> American national standard for information processing systems - programmer's hierarchical interactive graphics system (PHIGS) functional description, archive file format, clear-text encoding of archive file. </title> <type> Technical Report ANSI, </type> <institution> X3.144-1988, ANSI, </institution> <address> New York, </address> <year> 1988. </year>
Reference-contexts: The last subsection (Section 4.4) then shows how the requirements proposed in Section 3 fit into the context of these high-level graphics models and how the proposed new model advances the state-of-the-art. 4.1 Retained-Mode Model since it represents the retained mode in PHIGS <ref> [2] </ref> [17]. As shown in the figure, three key components are coordinated: the graphics database, the renderer, and the application. The graphics database in the retained-mode model is conceptually simple.
Reference: [3] <author> Michael Bajura, Henry Fuchs, and Ryutarou Ohbuchi. </author> <title> Merging virtual objects with the real world: Seeing ultrasound imagery within the patient. </title> <booktitle> Computer Graphics (SIGGRAPH '92 Proceedings), </booktitle> <volume> 26(2) </volume> <pages> 203-210, </pages> <month> July </month> <year> 1992. </year> <month> 26 </month>
Reference-contexts: Each application highlights various features introduced by the proposed system. They all share the need for a time-critical computing paradigm. 3 2.1 The Virtual Office The virtual office is an augmented-reality application that combines reality with computer-generated images <ref> [3] </ref> [13]. Users wear head-mounted, see-through displays. In the view of the user, the actual office is augmented with computer-generated icons that provide 3D interfaces to computer applications.
Reference: [4] <author> Chuck Blanchard, Scott Burgess, Young Harvill, Jaron Lanier, Ann Lasko, Mark Oberman, and Michael Teitel. </author> <title> Reality built for two: A virtual reality tool. </title> <booktitle> volume 24, </booktitle> <pages> pages 35-36, </pages> <month> March </month> <year> 1990. </year>
Reference-contexts: Notable exceptions are the Alice & DIVER system [31], the MR Toolkit [33], and VPL's RB2 <ref> [4] </ref>; all these systems distinguish frame rate from the overall scene update rate. Nonetheless, all these systems update all objects 1 I am assuming a unique frame rate associated with a single display.
Reference: [5] <author> Frederick P. Brooks, Jr. </author> <title> Grasping reality through illusion interactive graphics serving science. </title> <booktitle> In Human Factors in Computing Systems, </booktitle> <pages> pages 1-11, </pages> <month> May </month> <year> 1988. </year> <note> Special Issue of the SIGCHI Bulletin. </note>
Reference-contexts: Instead, I will integrate and synchronize multimedia data with the 3D graphics primitives. The system is intended to demonstrate the advantages of the time-critical approach: first, guaranteed, fixed response times heighten the user's perception of reality in dynamic, computer-generated scenes <ref> [5] </ref>. Second, low-latency feedback becomes possible, improving application-specific task performances. 2 Third and last, incorporating time into the system eases the inclusion of real time dependent data, such as multimedia. Such a time-critical graphics system integrates three main characteristics that are not addressed by traditional graphics systems.
Reference: [6] <author> Frederick P. Brooks Jr. </author> <title> Walkthrough | a dynamic graphics system for simulating virtual buildings. </title> <address> pages 9-21, </address> <month> October </month> <year> 1986. </year>
Reference-contexts: I focus on only a few of these problems: the tight integration of video data with computer graphics, time-critical computation of object behavior, and incorporation of external signals, such as user actions, into a larger framework. 2.2 Walk-Throughs of Dynamic Environments Interactive, architectural walk-throughs <ref> [6] </ref> [15] place a user, who wears a head-mounted display, inside a virtual environment, typically an architectural model. The user interactively explores the environment by moving through the data set.
Reference: [7] <author> Samuel J. Cardman. </author> <title> Time management in a real-time animation/graphics environment. </title> <booktitle> Computer Graphics (SIGGRAPH '75 Proceedings), </booktitle> <volume> 9(1) </volume> <pages> 201-207, </pages> <month> June </month> <year> 1975. </year>
Reference-contexts: As long as frame-computation times are all at least roughly of the same length t, the displayed stream of frames is synchronized to the external signal with a lag of t. Both Cardman's system <ref> [7] </ref> and TBAG [12] [11] work in this manner. To eliminate the lag, or to handle situations in which frame-computation times vary substantially, the underlying system needs to be able to predict how long the computation of a frame takes.
Reference: [8] <author> Michael Cohen, Shenchang Eric Chen, John R. Wallace, and Donald P. Greenberg. </author> <title> A progressive refinement approach to fast radiosity image generation. </title> <booktitle> 22(4) </booktitle> <pages> 75-84, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: The objective there is to create realistic, static images, regardless of computation cost. Presentation quality takes absolute priority over computation time. Performance/presentation-quality tradeoffs are neglected, even though the advantages of iterative computing, i.e., progressive refinement rendering methods <ref> [8] </ref>, are valued for their faster feedback time. The emerging field of virtual reality | an inherently real time bound, interactive domain | has made researchers aware of the need for explicitly balancing computation speed with quality. 1.1 Outline I intend to design and build a time-critical graphics system.
Reference: [9] <author> Michael Cohen and Donald P. Greenberg. </author> <title> The hemi-cube: a radiosity solution for complex environments. </title> <booktitle> 19(3) </booktitle> <pages> 31-40, </pages> <month> August </month> <year> 1985. </year>
Reference-contexts: This time-critical approach differs from the traditional computer graphics outlook, displayed, for example, in the field of photorealistic rendering [24] <ref> [9] </ref>. The objective there is to create realistic, static images, regardless of computation cost. Presentation quality takes absolute priority over computation time. Performance/presentation-quality tradeoffs are neglected, even though the advantages of iterative computing, i.e., progressive refinement rendering methods [8], are valued for their faster feedback time.
Reference: [10] <author> D. Brookshire Conner, Scott S. Snibbe, Kenneth P. Herndon, Daniel C. Robbins, Robert C. Zeleznik, and Andries van Dam. </author> <title> Three-dimensional widgets. </title> <booktitle> Computer Graphics (1992 Symposium on Interactive 3D Graphics), </booktitle> <volume> 25(2) </volume> <pages> 183-188, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Since this model represents the current state-of-the-art, only a few systems currently exist that use it [12] [38] [37] [39] <ref> [10] </ref> 4 [36]. The availability of external signals to the controller, as shown in Figure 4, causes conceptual changes in the roles of the database, the controller, and the application, which I describe in the following. <p> Therefore, input parameters need to be specified explicitly. Furthermore, an object can depend on multiple parameters simultaneously. The controller's main function remains the inquiry and evaluation of the 4 The system described in <ref> [10] </ref> evolved from the previous implementation [42] to fit the external signal model. 20 parameterized, abstract data stored in the graphics database. However, the ap-plication no longer supplies the controller with parameter values.
Reference: [11] <author> Conal Elliott, Greg Schechter, Salim Abi-Ezzi, and Michael Deering. TBAG: </author> <title> Time, behavior, and geometry. Available from the authors upon request, </title> <year> 1991. </year>
Reference-contexts: As long as frame-computation times are all at least roughly of the same length t, the displayed stream of frames is synchronized to the external signal with a lag of t. Both Cardman's system [7] and TBAG [12] <ref> [11] </ref> work in this manner. To eliminate the lag, or to handle situations in which frame-computation times vary substantially, the underlying system needs to be able to predict how long the computation of a frame takes.
Reference: [12] <author> Conal Elliott, Greg Schechter, Ricky Yeung, and Salim Abi-Ezzi. </author> <title> A system for interactive, animated 3D graphics based on continuous high level constraints. Available from the authors upon request, </title> <month> January </month> <year> 1993. </year>
Reference-contexts: More often, the dependencies are functionally mapped, i.e., the graphical objects use offset-based, scaled, or warped versions of the external signal values. Systems already exist that functionally map wall-time to objects [38] <ref> [12] </ref>. Since the system explicitly incorporates an external signal model, the resulting relationships between objects, i.e., temporal and interactive relations, are explicit as well. Multimedia and other time-dependent data rely on this feature to stay in synchronization with the real world. <p> As long as frame-computation times are all at least roughly of the same length t, the displayed stream of frames is synchronized to the external signal with a lag of t. Both Cardman's system [7] and TBAG <ref> [12] </ref> [11] work in this manner. To eliminate the lag, or to handle situations in which frame-computation times vary substantially, the underlying system needs to be able to predict how long the computation of a frame takes. <p> Since this model represents the current state-of-the-art, only a few systems currently exist that use it <ref> [12] </ref> [38] [37] [39] [10] 4 [36]. The availability of external signals to the controller, as shown in Figure 4, causes conceptual changes in the roles of the database, the controller, and the application, which I describe in the following. <p> The external signal model addresses interactive behavior by storing behaviors of objects in the database which are explicitly parameterized to depend on user input devices. When the controller evaluates these behaviors, it supplies them with the current, appropriate values as provided by the external signal module <ref> [12] </ref> [29]. Since the application is not required to intervene during this process, interactive behaviors are efficient.
Reference: [13] <author> Steven Feiner, Blair MacIntyre, and Doree Seligmann. </author> <title> Annotating the real world with knowledge-based graphics on a see-through head-mounted display. </title> <address> pages 78-85, </address> <month> May </month> <year> 1992. </year>
Reference-contexts: Each application highlights various features introduced by the proposed system. They all share the need for a time-critical computing paradigm. 3 2.1 The Virtual Office The virtual office is an augmented-reality application that combines reality with computer-generated images [3] <ref> [13] </ref>. Users wear head-mounted, see-through displays. In the view of the user, the actual office is augmented with computer-generated icons that provide 3D interfaces to computer applications.
Reference: [14] <author> Thomas A. Funkhouser and Carlo H. Sequin. </author> <title> Adaptive display algorithm for interactive frame rates during visiualization of complex virtual environments. </title> <booktitle> Computer Graphics (SIGGRAPH '93 Proceedings), </booktitle> <pages> pages 247-254, </pages> <month> August </month> <year> 1993. </year>
Reference-contexts: High sampling rates result in smooth motion; low sampling rates save computation time, but produce low-quality behavior. The system therefore inherently supports degradation for dynamic or interactive objects. In contrast to the work described in <ref> [14] </ref>, I apply prediction, scheduling, and degradation to the computation of dynamic environments, not to the rendering of static environments. 2.3 Architecture-Independent Applications One goal of software engineering principles is to make an application architecture-independent. <p> A cost-benefit model needs to be formulated. Benefit of an object can be measured, for example, by relative size, direct user specification, or relative position to the camera (foreground/background, center/off-center, etc.). Such a cost-benefit model should penalize the rapid flip-flopping of attribute settings to avoid visual ringing <ref> [14] </ref>. Once these questions are answered, a system has a variety of ways to improve performance by degrading the various quality parameters. <p> The general problem of finding the optimal schedule for a given set of degrad 14 able computations in a predetermined amount of time is hard. Since it is equiv-alent to the Continuous Multiple Choice Knapsack Problem, it is NP-complete <ref> [14] </ref>. Like the prediction mechanism described in Section 3.3.1, the scheduler runs in real time. Therefore, I cannot hope to find the optimal solution; I need to make fast approximations [16]. The scheduler bases its decisions on a broad collection of global information. <p> Even though I believe these capabilities to be essential in next generation graphics systems, no graphics architectures I know of incorporate them. 21 However, such efforts exist in related fields. Several researchers [30] [25] [19] [31] <ref> [14] </ref> have independently started to address the problem of time-critical rendering. A time-critical renderer is supposed to produce frames in prespec-ified amounts of time, degrading various render-specific attributes to achieve its goal.
Reference: [15] <author> Thomas A. Funkhouser, Carlo H. Sequin, and Seth J. Teller. </author> <title> Management of large amounts of data in interactive building walkthroughs. </title> <booktitle> Computer Graphics (1992 Symposium on Interactive 3D Graphics), </booktitle> <volume> 25(2) </volume> <pages> 11-20, </pages> <month> March </month> <year> 1992. </year> <month> 27 </month>
Reference-contexts: I focus on only a few of these problems: the tight integration of video data with computer graphics, time-critical computation of object behavior, and incorporation of external signals, such as user actions, into a larger framework. 2.2 Walk-Throughs of Dynamic Environments Interactive, architectural walk-throughs [6] <ref> [15] </ref> place a user, who wears a head-mounted display, inside a virtual environment, typically an architectural model. The user interactively explores the environment by moving through the data set.
Reference: [16] <author> Michael R. Garey and David S. Johnson. </author> <title> Computers and Intractibility: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: Since it is equiv-alent to the Continuous Multiple Choice Knapsack Problem, it is NP-complete [14]. Like the prediction mechanism described in Section 3.3.1, the scheduler runs in real time. Therefore, I cannot hope to find the optimal solution; I need to make fast approximations <ref> [16] </ref>. The scheduler bases its decisions on a broad collection of global information. First, it knows about all current computation requests. Second, to avoid bottlenecks, the scheduler should also be aware of future compute requests, allowing the scheduling over ranges of time.
Reference: [17] <author> Tom Gaskins. </author> <title> PHIGS Programming Manual. </title> <publisher> O'Reilly & Associates, Inc., </publisher> <year> 1992. </year>
Reference-contexts: The last subsection (Section 4.4) then shows how the requirements proposed in Section 3 fit into the context of these high-level graphics models and how the proposed new model advances the state-of-the-art. 4.1 Retained-Mode Model since it represents the retained mode in PHIGS [2] <ref> [17] </ref>. As shown in the figure, three key components are coordinated: the graphics database, the renderer, and the application. The graphics database in the retained-mode model is conceptually simple.
Reference: [18] <author> Simon Gibbs. </author> <title> Composite multimedia and active objects. </title> <booktitle> In Proceedings of OOPSLA'91, </booktitle> <pages> pages 97-112, </pages> <year> 1991. </year>
Reference-contexts: In contrast, multimedia systems, being based on presampled data types that are inherently wall-time based, are aware of sampling rates and real time display of results [40]. Recent work <ref> [18] </ref> [23] also addresses issues in degrading 22 the data stream in order to stay synchronized to wall-time. However, since the involved data types are presampled, thus prespecified and often sampled at regular intervals, there is no need for complex sampling rate models or complex degradation schemes.
Reference: [19] <author> Rich Gossweiler. </author> <title> Time-critical rendering in an immersive virtual environment. </title> <type> Thesis Proposal, </type> <note> available from author on request, </note> <year> 1993. </year>
Reference-contexts: Even though I believe these capabilities to be essential in next generation graphics systems, no graphics architectures I know of incorporate them. 21 However, such efforts exist in related fields. Several researchers [30] [25] <ref> [19] </ref> [31] [14] have independently started to address the problem of time-critical rendering. A time-critical renderer is supposed to produce frames in prespec-ified amounts of time, degrading various render-specific attributes to achieve its goal.
Reference: [20] <author> Mark Green. </author> <title> A survey of three dialogue models. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5(3) </volume> <pages> 244-275, </pages> <year> 1986. </year>
Reference-contexts: Note that it is therefore possible to inquire an external signal anywhere in time, even if the associated sensor or user input device supplies samples only at discrete time points. This functionality contrasts with traditional user input models <ref> [20] </ref>, which are event-based and therefore discrete in time. However, 6 a continuous model of external signals is of advantage for the continuous-time models prevalent in computer graphics.
Reference: [21] <author> Lawrence J. Hettinger, Kevin S. Berbaum, and Robert S. Kennedy. </author> <title> Vection and simulator sickness. </title> <journal> Military Psychology, </journal> <volume> 2(3) </volume> <pages> 171-181, </pages> <year> 1990. </year>
Reference-contexts: Timely delivery of computation results is the most important attribute in these fields; presentation quality is only a secondary concern. For instance, 1 virtual-reality applications require fixed, relatively high frame rates with little lag, since otherwise the user becomes disoriented, or worse, motion-sick <ref> [21] </ref> [32]. It is of comparatively less relevance whether the rendered objects are Gourad-shaded, flat-shaded, or wire-frame. Presentation quality is expendable: to be wrong and on time is more valuable than to be right and late.
Reference: [22] <author> Philip M. Hubbard, Matthias M. Wloka, and Robert C. Zeleznik. UGA: </author> <title> A unified graphics architecture. </title> <type> Technical Report CS-91-30, </type> <institution> Brown University, Providence, RI, </institution> <year> 1991. </year>
Reference-contexts: An additional component, the controller shown in shortcomings of the retained-mode model, most of today's graphics systems [34] [42] <ref> [22] </ref> employ it as their graphics subsystem. As in the previous section, I describe the abstract database model by explaining its key components, i.e., the database, the controller, the renderer, and the application, and their relationship to each other.
Reference: [23] <institution> IMA Services Focus Group and Architectural Technical Working Group. Request for technology: Multimedia system services. </institution> <note> Available via anonymous ftp from world.std.com:/pub/IMA, </note> <month> December </month> <year> 1992. </year>
Reference-contexts: In contrast, multimedia systems, being based on presampled data types that are inherently wall-time based, are aware of sampling rates and real time display of results [40]. Recent work [18] <ref> [23] </ref> also addresses issues in degrading 22 the data stream in order to stay synchronized to wall-time. However, since the involved data types are presampled, thus prespecified and often sampled at regular intervals, there is no need for complex sampling rate models or complex degradation schemes.
Reference: [24] <author> J. T. Kajiya. </author> <title> The rendering equation. </title> <booktitle> Computer Graphics (SIGGRAPH '86 Proceedings), </booktitle> <volume> 20(4) </volume> <pages> 143-150, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: This time-critical approach differs from the traditional computer graphics outlook, displayed, for example, in the field of photorealistic rendering <ref> [24] </ref> [9]. The objective there is to create realistic, static images, regardless of computation cost. Presentation quality takes absolute priority over computation time. Performance/presentation-quality tradeoffs are neglected, even though the advantages of iterative computing, i.e., progressive refinement rendering methods [8], are valued for their faster feedback time.
Reference: [25] <author> George Kyriazis. </author> <title> Time-critical rendering and the temporal behavior of graphics systems. </title> <type> Master's thesis, </type> <institution> Rensselaer Polytechnic Institute, VTP Program, Rensselaer Design Research Center, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Even though I believe these capabilities to be essential in next generation graphics systems, no graphics architectures I know of incorporate them. 21 However, such efforts exist in related fields. Several researchers [30] <ref> [25] </ref> [19] [31] [14] have independently started to address the problem of time-critical rendering. A time-critical renderer is supposed to produce frames in prespec-ified amounts of time, degrading various render-specific attributes to achieve its goal. <p> In addition, because for certain applications rendering constitutes the computational bottleneck, it is susceptible to being improved by new techniques such as time-critical computing. It is therefore also susceptible to hardware assistance, which complicates the time-critical rendering problem considerably <ref> [25] </ref>. I do not address time-critical rendering, since I assume that rendering can be contained to be fast [27] [1] compared to the data inquiry and computation time, e.g., by restraining myself to wire-frame representations.
Reference: [26] <author> L. Edwin McKenzie, Jr. and Richard T. Snodgrass. </author> <title> Evaluation of relational algebras incorporating the time dimension in databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(4) </volume> <pages> 501-543, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: History) 8wt now 1 c t : ext sig (wt; now 0 ) ext sig (wt; now 1 ) Transaction-time, a term borrowed from temporal databases <ref> [26] </ref>, describes which version of the external signal description is accessed. A new version is created every time the newest sample value overwrites an old sample.
Reference: [27] <author> Steven Molnar, John Eyles, and John Poulton. Pixelflow: </author> <title> High-speed rendering using image composition. </title> <booktitle> Computer Graphics (SIGGRAPH '92 Proceedings), </booktitle> <volume> 26(2) </volume> <pages> 231-240, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: It is therefore also susceptible to hardware assistance, which complicates the time-critical rendering problem considerably [25]. I do not address time-critical rendering, since I assume that rendering can be contained to be fast <ref> [27] </ref> [1] compared to the data inquiry and computation time, e.g., by restraining myself to wire-frame representations. In contrast, multimedia systems, being based on presampled data types that are inherently wall-time based, are aware of sampling rates and real time display of results [40].
Reference: [28] <author> T. Myer and I. Sutherland. </author> <title> On the design of display processors. </title> <journal> Communications of the ACM, </journal> <volume> 11(6) </volume> <pages> 410-414, </pages> <month> June </month> <year> 1968. </year>
Reference-contexts: The "wheel of reincarnation," common in graphics hardware <ref> [28] </ref>, is introduced to the graphics subsystem, a software architecture. 6 In case that the application modifies the update rate of an object, it is necessary to notify the controller of the change as well.
Reference: [29] <author> Brad A. Myers, Dario A. Guise, Roger B. Dannenberg, Brad Vander Zan-den, David S. Kosbie, Edward Pervin, Andrew Mickish, and Philippe Mar-chal. </author> <title> GARNET comprehensive support for graphical, highly interactive user interfaces. </title> <journal> IEEE COMPUTER magazine, </journal> <volume> 23(11) </volume> <pages> 71-85, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: The external signal model addresses interactive behavior by storing behaviors of objects in the database which are explicitly parameterized to depend on user input devices. When the controller evaluates these behaviors, it supplies them with the current, appropriate values as provided by the external signal module [12] <ref> [29] </ref>. Since the application is not required to intervene during this process, interactive behaviors are efficient.
Reference: [30] <author> Robert O'Bara. </author> <title> Time rendering research. Draft of a thesis proposal, </title> <booktitle> avail-able from author on request, </booktitle> <year> 1992. </year>
Reference-contexts: Even though I believe these capabilities to be essential in next generation graphics systems, no graphics architectures I know of incorporate them. 21 However, such efforts exist in related fields. Several researchers <ref> [30] </ref> [25] [19] [31] [14] have independently started to address the problem of time-critical rendering. A time-critical renderer is supposed to produce frames in prespec-ified amounts of time, degrading various render-specific attributes to achieve its goal.
Reference: [31] <author> Randy Pausch, Matthew Conway, Robert DeLine, Rich Gossweiler, Steve Miale, Jonathan Ashton, and Richard Stoakley. </author> <title> An interdisciplinary approach to building virtual reality environments. </title> <year> 1992. </year>
Reference-contexts: Frame rate, on the other hand, is the update rate of the renderer, i.e., the frequency with which it generates new frames. 1 Graphics systems commonly equate an object's update rate with the overall frame rate. Notable exceptions are the Alice & DIVER system <ref> [31] </ref>, the MR Toolkit [33], and VPL's RB2 [4]; all these systems distinguish frame rate from the overall scene update rate. Nonetheless, all these systems update all objects 1 I am assuming a unique frame rate associated with a single display. <p> Even though I believe these capabilities to be essential in next generation graphics systems, no graphics architectures I know of incorporate them. 21 However, such efforts exist in related fields. Several researchers [30] [25] [19] <ref> [31] </ref> [14] have independently started to address the problem of time-critical rendering. A time-critical renderer is supposed to produce frames in prespec-ified amounts of time, degrading various render-specific attributes to achieve its goal.
Reference: [32] <author> Randy Pausch, Tom Crea, and Matthew Conway. </author> <title> A literature survey for virtual environments: Military flight simulator visual systems and simulator sickness. Presence: Teleoperators and Virtual Environments, </title> <type> 1(3), </type> <month> January </month> <year> 1993. </year> <note> In press. </note>
Reference-contexts: Timely delivery of computation results is the most important attribute in these fields; presentation quality is only a secondary concern. For instance, 1 virtual-reality applications require fixed, relatively high frame rates with little lag, since otherwise the user becomes disoriented, or worse, motion-sick [21] <ref> [32] </ref>. It is of comparatively less relevance whether the rendered objects are Gourad-shaded, flat-shaded, or wire-frame. Presentation quality is expendable: to be wrong and on time is more valuable than to be right and late.
Reference: [33] <author> Chris Shaw, Jiandong Liang, Mark Green, and Yunqi Sun. </author> <title> The decoupled simulation model for virtual reality systems. </title> <booktitle> Proceedings of CHI'92, </booktitle> <pages> pages 321-328, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Frame rate, on the other hand, is the update rate of the renderer, i.e., the frequency with which it generates new frames. 1 Graphics systems commonly equate an object's update rate with the overall frame rate. Notable exceptions are the Alice & DIVER system [31], the MR Toolkit <ref> [33] </ref>, and VPL's RB2 [4]; all these systems distinguish frame rate from the overall scene update rate. Nonetheless, all these systems update all objects 1 I am assuming a unique frame rate associated with a single display.
Reference: [34] <author> SoftImage Inc. </author> <note> SoftImage Manual. </note>
Reference-contexts: In effect, all traditional (and in particular batch-) animation systems <ref> [34] </ref> [42] operate on this principle: an animation scripting language defines behaviors by linking actions or operations to time lines or time variables. These abstract time lines or time variables, called animation time, are independent of external signals. <p> An additional component, the controller shown in shortcomings of the retained-mode model, most of today's graphics systems <ref> [34] </ref> [42] [22] employ it as their graphics subsystem. As in the previous section, I describe the abstract database model by explaining its key components, i.e., the database, the controller, the renderer, and the application, and their relationship to each other.
Reference: [35] <author> John A. Stankovic and Krithi Ramamritham. </author> <title> Advances in Real-Time Systems. </title> <publisher> IEEE Computer Society Press, </publisher> <year> 1993. </year>
Reference-contexts: Simply starting to compute the requests as they arrive is insufficient, because it is likely that the later requests are then not able to finish in time. The scheduling task in a time-critical graphics system is comparable to the scheduling tasks found in hard real time operating systems <ref> [35] </ref>. It is simpler, because the deadlines imposed by the graphics system are not as critical, yet it is also more complex, because of the added degrees of freedom.
Reference: [36] <author> Paul S. Strauss and Rikk Carey. </author> <title> An object-oriented 3D graphics toolkit. </title> <booktitle> Computer Graphics (SIGGRAPH '92 Proceedings), </booktitle> <volume> 26(2) </volume> <pages> 341-349, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Since this model represents the current state-of-the-art, only a few systems currently exist that use it [12] [38] [37] [39] [10] 4 <ref> [36] </ref>. The availability of external signals to the controller, as shown in Figure 4, causes conceptual changes in the roles of the database, the controller, and the application, which I describe in the following.
Reference: [37] <author> Mark A. Tarlton and P. Nong Tarlton. </author> <title> Visualization substrate: Animation, simulation and interaction in the user-interface. </title> <type> Technical Report ACT-HI-270-91(Q), </type> <institution> Microelectronics and Computer Technology Corporation (MCC), </institution> <year> 1991. </year>
Reference-contexts: Since this model represents the current state-of-the-art, only a few systems currently exist that use it [12] [38] <ref> [37] </ref> [39] [10] 4 [36]. The availability of external signals to the controller, as shown in Figure 4, causes conceptual changes in the roles of the database, the controller, and the application, which I describe in the following.
Reference: [38] <author> Mark A. Tarlton and P. Nong Tarlton. </author> <title> A framework for dynamic visual applications. </title> <booktitle> Computer Graphics (1992 Symposium on Interactive 3D Graphics), </booktitle> <volume> 25(2) </volume> <pages> 161-164, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: More often, the dependencies are functionally mapped, i.e., the graphical objects use offset-based, scaled, or warped versions of the external signal values. Systems already exist that functionally map wall-time to objects <ref> [38] </ref> [12]. Since the system explicitly incorporates an external signal model, the resulting relationships between objects, i.e., temporal and interactive relations, are explicit as well. Multimedia and other time-dependent data rely on this feature to stay in synchronization with the real world. <p> Since this model represents the current state-of-the-art, only a few systems currently exist that use it [12] <ref> [38] </ref> [37] [39] [10] 4 [36]. The availability of external signals to the controller, as shown in Figure 4, causes conceptual changes in the roles of the database, the controller, and the application, which I describe in the following.
Reference: [39] <author> Mark Alan Tarlton. </author> <title> A Declarative Representation System for Dynamic Visualization. </title> <type> PhD thesis, </type> <institution> University of Texas at Austin, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: Since this model represents the current state-of-the-art, only a few systems currently exist that use it [12] [38] [37] <ref> [39] </ref> [10] 4 [36]. The availability of external signals to the controller, as shown in Figure 4, causes conceptual changes in the roles of the database, the controller, and the application, which I describe in the following.
Reference: [40] <editor> D. Tsichritzis, editor. </editor> <title> Visual Objects. </title> <institution> Centre Universitaire d'Informatique, Universite de Geneve, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: In contrast, multimedia systems, being based on presampled data types that are inherently wall-time based, are aware of sampling rates and real time display of results <ref> [40] </ref>. Recent work [18] [23] also addresses issues in degrading 22 the data stream in order to stay synchronized to wall-time. However, since the involved data types are presampled, thus prespecified and often sampled at regular intervals, there is no need for complex sampling rate models or complex degradation schemes.
Reference: [41] <author> Matthias M. Wloka. </author> <title> Incorporating update rates into today's graphics systems. In preparation; available upon request from the author, </title> <month> November </month> <year> 1993. </year>
Reference-contexts: It will provide evidence of the validity of my 25 approach to the general problem area of highly interactive, real time 3D graphics systems. 5.3 Approach So far, I completed the literature survey, and I addressed problems associated with incorporating update rates into a graphics system <ref> [41] </ref>. I have started to design the envisioned 3D graphics system; the next step consists of programming these preliminary results into a working prototype system. Concurrently, I will investigate the required prediction, degradation, and scheduling components of such a system.
Reference: [42] <author> Robert C. Zeleznik, D. Brookshire Conner, Matthias M. Wloka, Daniel G. Aliaga, Nathan T. Huang, Philip M. Hubbard, Brian Knep, Henry Kauf-man, John F. Hughes, and Andries van Dam. </author> <title> An object-oriented framework for the integration of interactive animation techniques. </title> <journal> Computer Graphics (SIGGRAPH'91 Proceedings), </journal> <volume> 25(4) </volume> <pages> 105-112, </pages> <month> July </month> <year> 1991. </year> <month> 29 </month>
Reference-contexts: In effect, all traditional (and in particular batch-) animation systems [34] <ref> [42] </ref> operate on this principle: an animation scripting language defines behaviors by linking actions or operations to time lines or time variables. These abstract time lines or time variables, called animation time, are independent of external signals. <p> An additional component, the controller shown in shortcomings of the retained-mode model, most of today's graphics systems [34] <ref> [42] </ref> [22] employ it as their graphics subsystem. As in the previous section, I describe the abstract database model by explaining its key components, i.e., the database, the controller, the renderer, and the application, and their relationship to each other. <p> Therefore, input parameters need to be specified explicitly. Furthermore, an object can depend on multiple parameters simultaneously. The controller's main function remains the inquiry and evaluation of the 4 The system described in [10] evolved from the previous implementation <ref> [42] </ref> to fit the external signal model. 20 parameterized, abstract data stored in the graphics database. However, the ap-plication no longer supplies the controller with parameter values. Instead, the controller receives these values directly from the external devices (e.g., clock, user input devices), as depicted in Figure 4.
References-found: 42

