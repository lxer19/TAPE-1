URL: http://www.cse.ogi.edu/~lingliu/tam/cikm-final.ps
Refering-URL: http://www.cse.ogi.edu/~lingliu/tam/index.html
Root-URL: http://www.cse.ogi.edu
Email: ftzhou,calton,lingliug@cse.ogi.edu  
Title: Dynamic Restructuring of Transactional Workflow Activities: A Practical Implementation Method  
Author: Tong Zhou Calton Pu Ling Liu 
Address: P.O.Box 91000 Portland, OR 97291-1000, USA  
Affiliation: Department of Computer Science Engineering Oregon Graduate Institute  
Abstract: We describe a practical method to implement the dynamic restructuring of distributed transactional activities with several main advantages. First, it guarantees the correctness of dynamic restructuring operations as well as that of ongoing transactional activities. Second, it is general enough to accommodate a wide range of workflow activities' dynamic restructuring requirements. Third, it facilitates the deployment of dynamic restructuring operations on production systems. Our method combines adaptors, microprotocols, and incremental specialization, building modularly on the system components (e.g., RTF [1], OCP [28], MARS [4]) that we previously developed to support distributed extended transaction processing [19]. A prototype implementation based on this method is built on top of Transarc Encina, a commercial online transaction processing (OLTP) monitor. To our knowledge, this is the first implementation of dynamic restructuring on top of commercial OLTP systems. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. S. Barga and C. Pu. </author> <title> A practical and modular method to implement extended transaction models. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Microprotocol composition further facilitates the adoption of incremental specialization [21] to create specific and efficient instances of activity restructuring operations. Our method also builds modularly on the system components (e.g., RTF <ref> [1] </ref>, OCP [28], MARS [4]) that we previously developed to support distributed extended transaction processing [19]. To demonstrate the method, our additional contribution is an implemented prototype system on top of Transarc Encina, a commercial online transaction processing (OLTP) monitor. <p> Such activity dependencies are generated and processed by a special Activity Concurrency Adapter plus the relevant adapters in RTF (e.g., Lock Adapter and Conflict Adapter) <ref> [1] </ref> that together are capable of carrying out both traditional and advanced concurrency control (CC) algorithms (e.g., semantic CC, divergence control, etc.). <p> Rather than purely waiting for activity instances to request state change condition checkings, our dependency component might actively invoking activity instances that are involved in a specification change. There have been several work on transaction restructuring, like chopping transactions [23, 12] and split/join transactions <ref> [20, 1] </ref>. But they either are statically done at compile-time, or only work on flat structures. In comparison, our work supports dynamic activity restructuring with transactional considerations, and work on structured activities. <p> Specialization was proposed by the Synthetix project [21], and is closely related with partial evaluation [6] in programming language research. Our approach to system extensibility continues to follow the Open Implementation (OI) principle [13] as in <ref> [1, 28] </ref>. On the other hand, our implementation method and prototype system leverage and build directly on our own experience and mechanisms. <p> Our approach to system extensibility continues to follow the Open Implementation (OI) principle [13] as in [1, 28]. On the other hand, our implementation method and prototype system leverage and build directly on our own experience and mechanisms. Specifically, our transactional activity processing framework builds on RTF <ref> [1] </ref>, OCP [28], and MARS [4], which systematically extend commercial TP monitors to make the implementation of a wide range of distributed extended transaction models practically available [19]. 6 Conclusion Workflow systems are an important part of many business applications today, particularly in the capture and execution of business processes. <p> In this paper, we have presented a practical method to implement dynamic restructuring operations for distributed transactional activities. The method modularly decomposes the restructuring operations into microprotocols, and maps them into the system components (RTF <ref> [1] </ref>, OCP [28], MARS [4]) we previously developed to support distributed extended transactions [19], as well as a set of adaptors on top of production transaction processing (TP) monitors. Incremental specialization [21] is applied to improve operation performance.
Reference: [2] <author> F. Casati, S. Ceri, B. Pernice, and G. Pozzi. </author> <title> Workflow Evolution. </title> <booktitle> In Proceedings of the 15th International Conference on Conceptual Modeling (ER'96), volume 1157 of Lecture Notes in Computer Science, Cottbus, </booktitle> <address> Germany, </address> <month> October </month> <year> 1996. </year> <note> Springer-Verlag. </note>
Reference-contexts: After all such conflict resolutions are done, the splitting activity instance's appearance in all relevant data structures are eliminated. Note that the dependency conflict resolution in general is an NP-hard problem. Therefore, TAM adopts an approach similar to those in <ref> [11, 2] </ref>. Specifically, we only check dependency conflicts for a restricted class of dependencies, which is built into the TAM system. This microprotocol would reject new activity dependencies that conflict with this built-in class but may be conflict-free under other interpretations. <p> Some of these products allow dynamic modifications of workflow process specifications [9]. However, the lack of rigorous transactional guarantees in these products inherently limits the value of such functionality; yet also, these support only deal with specification-level changes with simplistic policies <ref> [2] </ref>, which is not flexible enough to support the wide range of activity restructuring needs. For exam ple, the problem of instance-specific activity restructuring, which frequently arises due to unexpected situations during each activity instance's execution, is left unaddressed.
Reference: [3] <author> Q. Chen and U. Dayal. </author> <title> A Transactional Nested Process Managemnet System. </title> <booktitle> In Proceedings of the 1996 IEEE Conference on Data Engineering, </booktitle> <address> New Or-leans, Louisiana, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: Because of the length restriction, we refer interested readers to [29] for further technical details. 2 Dynamic Activity Restructuring Primitives 2.1 Transactional Activity Model We first describe a general activity model as our basis for discussion. This model encompasses features from previously published activity models <ref> [22, 3, 15] </ref>. Activities are structured programs that exchange information with other activities, databases, files, and users. In our base model, we distinguish between parameterized activity specifications and their run-time instantiated activity instances. <p> In comparison with the commercial effort, transactional work-flow (TWF) research [7, 25, 22, 26, 17] aims at providing transactional support for business workflow processes. But to date, few have adequately addressed the issue of handling dynamic transactional workflows, either <ref> [22, 3] </ref>. Managing dynamic workflow activities with rigorous support for transactional guarantees (e.g., general recoverability, flexible con-currency constraints) remains an important open problem in both research and industry sectors [9, 24]. We believe we have made a concrete step towards providing such dynamic restructuring support on production systems.
Reference: [4] <author> S.-W. Chen. </author> <title> Recovery for Extended Transaction Models. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Columbia University, </institution> <month> February </month> <year> 1997. </year>
Reference-contexts: Microprotocol composition further facilitates the adoption of incremental specialization [21] to create specific and efficient instances of activity restructuring operations. Our method also builds modularly on the system components (e.g., RTF [1], OCP [28], MARS <ref> [4] </ref>) that we previously developed to support distributed extended transaction processing [19]. To demonstrate the method, our additional contribution is an implemented prototype system on top of Transarc Encina, a commercial online transaction processing (OLTP) monitor. <p> On the other hand, our implementation method and prototype system leverage and build directly on our own experience and mechanisms. Specifically, our transactional activity processing framework builds on RTF [1], OCP [28], and MARS <ref> [4] </ref>, which systematically extend commercial TP monitors to make the implementation of a wide range of distributed extended transaction models practically available [19]. 6 Conclusion Workflow systems are an important part of many business applications today, particularly in the capture and execution of business processes. <p> In this paper, we have presented a practical method to implement dynamic restructuring operations for distributed transactional activities. The method modularly decomposes the restructuring operations into microprotocols, and maps them into the system components (RTF [1], OCP [28], MARS <ref> [4] </ref>) we previously developed to support distributed extended transactions [19], as well as a set of adaptors on top of production transaction processing (TP) monitors. Incremental specialization [21] is applied to improve operation performance.
Reference: [5] <author> C. Consel and F. Noel. </author> <title> A general approach for run-time specialization and its application to C. </title> <booktitle> In Proceedings of the 23rd Symposium on Principles of Programming Languages, </booktitle> <address> Florida, </address> <year> 1996. </year>
Reference: [6] <author> C. Consel, C. Pu, and J. Walpole. </author> <title> Incremental specialization: The key to high performance, modularity and portability in operating systems. </title> <booktitle> In ACM Symposium on Partial Evaluation and Semantics-Based Program Manipulation, </booktitle> <pages> pages 44-46, </pages> <year> 1993. </year> <type> Invited paper. </type>
Reference-contexts: The idea of mi croprotocol decomposition comes from the x-kernel work [18] on building flexible network protocols. Specialization was proposed by the Synthetix project [21], and is closely related with partial evaluation <ref> [6] </ref> in programming language research. Our approach to system extensibility continues to follow the Open Implementation (OI) principle [13] as in [1, 28]. On the other hand, our implementation method and prototype system leverage and build directly on our own experience and mechanisms.
Reference: [7] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> Organizing long-running activities with triggers and transactions. </title> <booktitle> In Proceedings of 1990 ACM SIGMOD, </booktitle> <pages> pages 204-214, </pages> <address> Atlantic City, New Jersey, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: For exam ple, the problem of instance-specific activity restructuring, which frequently arises due to unexpected situations during each activity instance's execution, is left unaddressed. In comparison with the commercial effort, transactional work-flow (TWF) research <ref> [7, 25, 22, 26, 17] </ref> aims at providing transactional support for business workflow processes. But to date, few have adequately addressed the issue of handling dynamic transactional workflows, either [22, 3].
Reference: [8] <editor> A. K. Elmagarmid, editor. </editor> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference: [9] <author> D. Georgakopoulos, M. Hornick, and A. Sheth. </author> <title> An Overview of Workflow Management: From Process Modelling to Workflow Automation Infrastructure. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3(2) </volume> <pages> 119-153, </pages> <month> Apr. </month> <year> 1995. </year>
Reference-contexts: Action 5 Related work Recent years have seen a wide range of commercial work-flow products (e.g., FlowMark, InConcert, Lotus Notes, etc.), which primarily aim at automating document-driven business processes. The functionalities of these products are currently too limited to effectively support enterprise-wide workflows <ref> [9, 24] </ref>. For example, they may not ensure workflow correctness in presence of concurrency or failures. Some of these products allow dynamic modifications of workflow process specifications [9]. <p> The functionalities of these products are currently too limited to effectively support enterprise-wide workflows [9, 24]. For example, they may not ensure workflow correctness in presence of concurrency or failures. Some of these products allow dynamic modifications of workflow process specifications <ref> [9] </ref>. However, the lack of rigorous transactional guarantees in these products inherently limits the value of such functionality; yet also, these support only deal with specification-level changes with simplistic policies [2], which is not flexible enough to support the wide range of activity restructuring needs. <p> But to date, few have adequately addressed the issue of handling dynamic transactional workflows, either [22, 3]. Managing dynamic workflow activities with rigorous support for transactional guarantees (e.g., general recoverability, flexible con-currency constraints) remains an important open problem in both research and industry sectors <ref> [9, 24] </ref>. We believe we have made a concrete step towards providing such dynamic restructuring support on production systems. Our dependency handling component adopts a temporal logic based approach, similar to that in [11]. Because of the execution model we assume, our dependency management policy is more active in comparison.
Reference: [10] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: Each TAM adapter encapsulates and extends the functionalities of its underlying layer. Like the transaction adapters in RTF, TAM adapters are based on the commands and functionality of the well-documented TP monitor reference architecture <ref> [10] </ref> for practicality. Furthermore, our implementation of the TAM adapters relied only on a small but widely supported set of API in the TP monitor reference architecture. adapters, RTF, OCP, and TP monitors in a distributed setting.
Reference: [11] <author> R. Gunthor. </author> <title> The Dependency Manager: A Base Service for Transactional Workflow Management. </title> <booktitle> In Proceedings of the 6th International Workshop on Research Issues in Data Engineering Interoperability of Nontraditional Database Systems (RIDE-NDS'96), </booktitle> <address> New Orleans, Louisiana, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: After all such conflict resolutions are done, the splitting activity instance's appearance in all relevant data structures are eliminated. Note that the dependency conflict resolution in general is an NP-hard problem. Therefore, TAM adopts an approach similar to those in <ref> [11, 2] </ref>. Specifically, we only check dependency conflicts for a restricted class of dependencies, which is built into the TAM system. This microprotocol would reject new activity dependencies that conflict with this built-in class but may be conflict-free under other interpretations. <p> We believe we have made a concrete step towards providing such dynamic restructuring support on production systems. Our dependency handling component adopts a temporal logic based approach, similar to that in <ref> [11] </ref>. Because of the execution model we assume, our dependency management policy is more active in comparison. Rather than purely waiting for activity instances to request state change condition checkings, our dependency component might actively invoking activity instances that are involved in a specification change.
Reference: [12] <author> W. Hseush and C. Pu. </author> <title> A Practical Technique for Asynchronous Transaction Processing. </title> <booktitle> In Proceedings of the 15th International Conference on Distributed Computing Systems, </booktitle> <month> May </month> <year> 1995. </year>
Reference-contexts: Rather than purely waiting for activity instances to request state change condition checkings, our dependency component might actively invoking activity instances that are involved in a specification change. There have been several work on transaction restructuring, like chopping transactions <ref> [23, 12] </ref> and split/join transactions [20, 1]. But they either are statically done at compile-time, or only work on flat structures. In comparison, our work supports dynamic activity restructuring with transactional considerations, and work on structured activities.
Reference: [13] <author> G. Kiczales. </author> <title> Towards a new model of abstraction in software engineering. </title> <booktitle> In Proceedings of the IMSA'92 Workshop on Reflection and Meta-level Architectures, </booktitle> <year> 1992. </year> <note> http://www.parc.xerox.com/spl/groups/eca/pubs/complete.html. </note>
Reference-contexts: We achieve this by combining microprotocols [18], open implementation <ref> [13] </ref>, and incremental specialization [21]. <p> Specialization was proposed by the Synthetix project [21], and is closely related with partial evaluation [6] in programming language research. Our approach to system extensibility continues to follow the Open Implementation (OI) principle <ref> [13] </ref> as in [1, 28]. On the other hand, our implementation method and prototype system leverage and build directly on our own experience and mechanisms.
Reference: [14] <author> L. Liu and R. Meersman. </author> <title> The Basic Building Blocks for Modeling Communication Behavior of Complex Objects: an Activity-driven Approach. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 21(3) </volume> <pages> 157-207, </pages> <year> 1996. </year>
Reference: [15] <author> L. Liu and C. Pu. </author> <title> A Transactional Activity Model for Organizing Open-ended Cooperative Activities. </title> <booktitle> In Proceedings of the 31st Annual Hawaii International Conference on System Sciences (HICSS-31), Big Island of Hawai'i, </booktitle> <address> HI, </address> <month> January </month> <year> 1998. </year>
Reference-contexts: Because of the length restriction, we refer interested readers to [29] for further technical details. 2 Dynamic Activity Restructuring Primitives 2.1 Transactional Activity Model We first describe a general activity model as our basis for discussion. This model encompasses features from previously published activity models <ref> [22, 3, 15] </ref>. Activities are structured programs that exchange information with other activities, databases, files, and users. In our base model, we distinguish between parameterized activity specifications and their run-time instantiated activity instances. <p> The system covers a family of dynamic activity restructuring operations, as well as other important features of the Transactional Activity Model (TAM) <ref> [15] </ref>. The implementation of the activity restructuring operations exactly followed our method described in previous section. The complete system is client-server oriented. The backend server features a set of transactional activity management primitives, and is built on Transarc's transaction processing (TP) monitor Encina 3 . <p> Based on above method, we have implemented a prototype system on top of Transarc's transaction processing (TP) monitor Encina. Our current system covers a family of dynamic restructuring operations from [16], as well as many other features of the Transactional Activity Model (TAM) <ref> [15] </ref>. To our knowledge, this is the first implementation of dynamic restructuring on top of commercial TP systems. We hope our work will encourage and lead to more implementations of transactional activity restructurings in commercial systems.
Reference: [16] <author> L. Liu and C. Pu. </author> <title> Methodical Restructuring of Complex Workflow Activities. </title> <booktitle> In Proceedings of the 1998 IEEE Conference on Data Engineering, </booktitle> <address> Orlando, Florida, </address> <month> February </month> <year> 1998. </year>
Reference-contexts: In order to optimize the structure of business workflows and their execution performance in anticipation of various uncertainties, we have introduced a family of operations (e.g., Activity-Split and Activity-Join) for dynamic restructuring of ongoing workflow activities <ref> [16] </ref>. These activity restructuring operations build on a formal notion of validity so that they guarantee a rich set of correctness criteria (that extend serializability) of the resulting distributed, dynamic, and sophisticated new activities. <p> For example, suppose C 1 and C 2 are independent of each other, we refer to such type of Activity-Split operations as parallel Activity-Split, denoted by ASplit (C; p; C 1 ; C 2 ). N-way Activity-Split can be easily constructed using the two-way Activity-Split <ref> [16] </ref>; and for presentation clarity, we restrict our discussion to two-way Activity-Split in this paper. <p> Based on above method, we have implemented a prototype system on top of Transarc's transaction processing (TP) monitor Encina. Our current system covers a family of dynamic restructuring operations from <ref> [16] </ref>, as well as many other features of the Transactional Activity Model (TAM) [15]. To our knowledge, this is the first implementation of dynamic restructuring on top of commercial TP systems. We hope our work will encourage and lead to more implementations of transactional activity restructurings in commercial systems.
Reference: [17] <author> C. Mohan, G. Alonso, R. Gunthor, and M. Kamath. Exotica: </author> <title> A Research Perspective on Workflow Management Systems. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> 18(1), </volume> <year> 1995. </year>
Reference-contexts: For exam ple, the problem of instance-specific activity restructuring, which frequently arises due to unexpected situations during each activity instance's execution, is left unaddressed. In comparison with the commercial effort, transactional work-flow (TWF) research <ref> [7, 25, 22, 26, 17] </ref> aims at providing transactional support for business workflow processes. But to date, few have adequately addressed the issue of handling dynamic transactional workflows, either [22, 3].
Reference: [18] <author> S. W. O'Malley and L. L. Peterson. </author> <title> A dynamic network architecture. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(2) </volume> <pages> 110-143, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: We achieve this by combining microprotocols <ref> [18] </ref>, open implementation [13], and incremental specialization [21]. <p> On one hand, our implementation method benefits from several system development techniques and principles that have been demonstrated successfully in other fields like operating systems and programming languages. The idea of mi croprotocol decomposition comes from the x-kernel work <ref> [18] </ref> on building flexible network protocols. Specialization was proposed by the Synthetix project [21], and is closely related with partial evaluation [6] in programming language research. Our approach to system extensibility continues to follow the Open Implementation (OI) principle [13] as in [1, 28].
Reference: [19] <author> C. Pu, R. Barga, T. Zhou, and S.-W. Chen. </author> <title> Implementing Extended Transaction Models. </title> <booktitle> In High Performance Transaction Systems (HPTS) Workshop 1997, </booktitle> <address> Pacific Grove, California, </address> <month> September </month> <year> 1997. </year>
Reference-contexts: Microprotocol composition further facilitates the adoption of incremental specialization [21] to create specific and efficient instances of activity restructuring operations. Our method also builds modularly on the system components (e.g., RTF [1], OCP [28], MARS [4]) that we previously developed to support distributed extended transaction processing <ref> [19] </ref>. To demonstrate the method, our additional contribution is an implemented prototype system on top of Transarc Encina, a commercial online transaction processing (OLTP) monitor. To our knowledge, this is the first implementation of dynamic restructuring of transactional activities on top of commercial TP systems. <p> We also employ incremental specialization techniques to build restructuring primitives that are optimized with respect to special application situations. The second building block of our implementation method is the system components developed in our previous effort on supporting distributed extended transactions <ref> [19] </ref>. In particular, the Reflective Transaction Framework (RTF) supports different extended transaction models on top of production transaction processing (TP) systems; the Open Coordination Protocol (OCP) is a flexible coordination facility for building different distributed coordination protocols for distributed extended transaction processing. <p> Specifically, our transactional activity processing framework builds on RTF [1], OCP [28], and MARS [4], which systematically extend commercial TP monitors to make the implementation of a wide range of distributed extended transaction models practically available <ref> [19] </ref>. 6 Conclusion Workflow systems are an important part of many business applications today, particularly in the capture and execution of business processes. The execution of workflows are usually straightforward, without considering alternative executions. <p> In this paper, we have presented a practical method to implement dynamic restructuring operations for distributed transactional activities. The method modularly decomposes the restructuring operations into microprotocols, and maps them into the system components (RTF [1], OCP [28], MARS [4]) we previously developed to support distributed extended transactions <ref> [19] </ref>, as well as a set of adaptors on top of production transaction processing (TP) monitors. Incremental specialization [21] is applied to improve operation performance.
Reference: [20] <author> C. Pu, G. E. Kaiser, and N. Hutchinson. </author> <title> Split-transactions for open-ended activities. </title> <booktitle> In Proceedings of the 14th International Conference on Very Large Data Bases, </booktitle> <pages> 26-37, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: For activity splits that involve activity instances across different hierarchical levels, a combination of the Activity-Split operations are used. To split an elementary activity (EACT) instance, the Split-transaction operation <ref> [20] </ref> will be used as Activity-Split. <p> Rather than purely waiting for activity instances to request state change condition checkings, our dependency component might actively invoking activity instances that are involved in a specification change. There have been several work on transaction restructuring, like chopping transactions [23, 12] and split/join transactions <ref> [20, 1] </ref>. But they either are statically done at compile-time, or only work on flat structures. In comparison, our work supports dynamic activity restructuring with transactional considerations, and work on structured activities.
Reference: [21] <author> C. Pu, T. Autrey, A. Black et al. </author> <title> Optimistic incremental specialization: Streamlining a commercial operating system. </title> <booktitle> In Proceedings of the Fifteenth Symposium on Operating Systems Principles, </booktitle> <address> Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: Third, our method facilitates the deployment of dynamic restructuring operations on production software systems. The method divides the restructuring operations into microprotocols, and builds adaptors on top of commercial transaction processing (TP) systems. Microprotocol composition further facilitates the adoption of incremental specialization <ref> [21] </ref> to create specific and efficient instances of activity restructuring operations. Our method also builds modularly on the system components (e.g., RTF [1], OCP [28], MARS [4]) that we previously developed to support distributed extended transaction processing [19]. <p> We achieve this by combining microprotocols [18], open implementation [13], and incremental specialization <ref> [21] </ref>. <p> The idea of mi croprotocol decomposition comes from the x-kernel work [18] on building flexible network protocols. Specialization was proposed by the Synthetix project <ref> [21] </ref>, and is closely related with partial evaluation [6] in programming language research. Our approach to system extensibility continues to follow the Open Implementation (OI) principle [13] as in [1, 28]. <p> The method modularly decomposes the restructuring operations into microprotocols, and maps them into the system components (RTF [1], OCP [28], MARS [4]) we previously developed to support distributed extended transactions [19], as well as a set of adaptors on top of production transaction processing (TP) monitors. Incremental specialization <ref> [21] </ref> is applied to improve operation performance. Our method is general enough to accommodate a wide range of workflow activities' characteristics and dynamic restructuring needs (e.g., dynamic requirements, transactional requirements, dependency enforcement requirements, etc.), and provides valuable insights into how dynamic activity restructuring can be practically supported on production systems.
Reference: [22] <author> M. Rusinkiewicz, W. Klas, T. Tesch, J. Wasch, and P. Muth. </author> <title> Towards a Cooperative Transaction Model: the Cooperative Activity Model. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Databases, </booktitle> <pages> pages 194-205, </pages> <address> Zurich, Switzerland, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Because of the length restriction, we refer interested readers to [29] for further technical details. 2 Dynamic Activity Restructuring Primitives 2.1 Transactional Activity Model We first describe a general activity model as our basis for discussion. This model encompasses features from previously published activity models <ref> [22, 3, 15] </ref>. Activities are structured programs that exchange information with other activities, databases, files, and users. In our base model, we distinguish between parameterized activity specifications and their run-time instantiated activity instances. <p> For exam ple, the problem of instance-specific activity restructuring, which frequently arises due to unexpected situations during each activity instance's execution, is left unaddressed. In comparison with the commercial effort, transactional work-flow (TWF) research <ref> [7, 25, 22, 26, 17] </ref> aims at providing transactional support for business workflow processes. But to date, few have adequately addressed the issue of handling dynamic transactional workflows, either [22, 3]. <p> In comparison with the commercial effort, transactional work-flow (TWF) research [7, 25, 22, 26, 17] aims at providing transactional support for business workflow processes. But to date, few have adequately addressed the issue of handling dynamic transactional workflows, either <ref> [22, 3] </ref>. Managing dynamic workflow activities with rigorous support for transactional guarantees (e.g., general recoverability, flexible con-currency constraints) remains an important open problem in both research and industry sectors [9, 24]. We believe we have made a concrete step towards providing such dynamic restructuring support on production systems.
Reference: [23] <author> D. Shasha, E. Simon, and P. Valduriez. </author> <title> Simple Rational Guidance for Chopping up Transactions. </title> <booktitle> In Proceedings of 1992 SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 298-307, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Rather than purely waiting for activity instances to request state change condition checkings, our dependency component might actively invoking activity instances that are involved in a specification change. There have been several work on transaction restructuring, like chopping transactions <ref> [23, 12] </ref> and split/join transactions [20, 1]. But they either are statically done at compile-time, or only work on flat structures. In comparison, our work supports dynamic activity restructuring with transactional considerations, and work on structured activities.
Reference: [24] <author> A. Sheth, D. Georgakopoulos, S. Joosten, M. Rusinkiewicz, W. Scacchi, J. Wileden, and A. Wolf. </author> <title> Report from the NSF Workshop on Workflow and Process Automation in Information Systems. </title> <institution> Computer Science Department Technical Report UGA-CS-TR-96-003, University of Georgia, Athens, Georgia, </institution> <year> 1996. </year>
Reference-contexts: 1 Introduction Many of today's business workflows execute in distributed environments, exhibit dynamic structure, and involve sophisticated interaction dependencies, making them vulnerable to uncertain duration and unpredictable development. Handling dynamic transactional workflows in practice is considered one of the challenging open problems in workflow research <ref> [24] </ref>. In order to optimize the structure of business workflows and their execution performance in anticipation of various uncertainties, we have introduced a family of operations (e.g., Activity-Split and Activity-Join) for dynamic restructuring of ongoing workflow activities [16]. <p> Action 5 Related work Recent years have seen a wide range of commercial work-flow products (e.g., FlowMark, InConcert, Lotus Notes, etc.), which primarily aim at automating document-driven business processes. The functionalities of these products are currently too limited to effectively support enterprise-wide workflows <ref> [9, 24] </ref>. For example, they may not ensure workflow correctness in presence of concurrency or failures. Some of these products allow dynamic modifications of workflow process specifications [9]. <p> But to date, few have adequately addressed the issue of handling dynamic transactional workflows, either [22, 3]. Managing dynamic workflow activities with rigorous support for transactional guarantees (e.g., general recoverability, flexible con-currency constraints) remains an important open problem in both research and industry sectors <ref> [9, 24] </ref>. We believe we have made a concrete step towards providing such dynamic restructuring support on production systems. Our dependency handling component adopts a temporal logic based approach, similar to that in [11]. Because of the execution model we assume, our dependency management policy is more active in comparison.
Reference: [25] <author> H. Wachter and A. Reuter. </author> <title> The ConTract Model. </title> <editor> In A. K. Elmagarmid, editor, </editor> <title> Database Transaction Models for Advanced Applications. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: For exam ple, the problem of instance-specific activity restructuring, which frequently arises due to unexpected situations during each activity instance's execution, is left unaddressed. In comparison with the commercial effort, transactional work-flow (TWF) research <ref> [7, 25, 22, 26, 17] </ref> aims at providing transactional support for business workflow processes. But to date, few have adequately addressed the issue of handling dynamic transactional workflows, either [22, 3].
Reference: [26] <author> D. Wodtke, J. Weissenfels, G. Weikum, and A. K. Dittrich. </author> <title> The Mentor Project: Steps Towards Enterprise-Wide Workflow Management. </title> <booktitle> In Proceedings of the 1996 IEEE Conference on Data Engineering, </booktitle> <address> New Orleans, Louisiana, </address> <month> February </month> <year> 1996. </year>
Reference-contexts: For exam ple, the problem of instance-specific activity restructuring, which frequently arises due to unexpected situations during each activity instance's execution, is left unaddressed. In comparison with the commercial effort, transactional work-flow (TWF) research <ref> [7, 25, 22, 26, 17] </ref> aims at providing transactional support for business workflow processes. But to date, few have adequately addressed the issue of handling dynamic transactional workflows, either [22, 3].
Reference: [27] <author> T. Zhou and C. Pu. </author> <title> Recovery Methods for Dynamic Transactional Activities. </title> <type> Technical report, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> October </month> <year> 1997. </year>
Reference-contexts: There are several other aspects of transactional workflow activities that are not addressed in this paper. For example, the recovery issues in association with the dynamic restructuring operations are addressed in a separate paper <ref> [27] </ref>. Other examples include further formal development of transactional activities, exploration of activity composition, and interoperation of autonomous and heterogeneous transactional workflow systems. Nevertheless, we believe that our implementation method constitutes an important building block of and takes another concrete step towards making practical transactional workflow activities into reality.
Reference: [28] <author> T. Zhou, C. Pu, and L. Liu. </author> <title> Adaptable, Efficient, and Modular Coordination of Distributed Extended Transactions. </title> <booktitle> In Proceedings of the 4th International Conference on Parallel and Distributed Information Systems, </booktitle> <address> Miami Beach, Florida, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: Microprotocol composition further facilitates the adoption of incremental specialization [21] to create specific and efficient instances of activity restructuring operations. Our method also builds modularly on the system components (e.g., RTF [1], OCP <ref> [28] </ref>, MARS [4]) that we previously developed to support distributed extended transaction processing [19]. To demonstrate the method, our additional contribution is an implemented prototype system on top of Transarc Encina, a commercial online transaction processing (OLTP) monitor. <p> Distribution Control When activity instances involved in a dynamic restructuring are distributed, we might need to use a distributed protocol to coordinate them to guarantee the correctness of the restructuring operation. For such, we use the Open Coordination Protocol (OCP) <ref> [28] </ref> to build appropriate coordination protocol instances. Figure 3 and 4 illustrates a simple two-phase Activity-Split composition, with Preparation and Action being the interfaces of the two phases. Preparation 3.4 Activity-Join Implementation The microprotocol composition for Activity-Join is very similar to that for Activity-Split. <p> Specialization was proposed by the Synthetix project [21], and is closely related with partial evaluation [6] in programming language research. Our approach to system extensibility continues to follow the Open Implementation (OI) principle [13] as in <ref> [1, 28] </ref>. On the other hand, our implementation method and prototype system leverage and build directly on our own experience and mechanisms. <p> Our approach to system extensibility continues to follow the Open Implementation (OI) principle [13] as in [1, 28]. On the other hand, our implementation method and prototype system leverage and build directly on our own experience and mechanisms. Specifically, our transactional activity processing framework builds on RTF [1], OCP <ref> [28] </ref>, and MARS [4], which systematically extend commercial TP monitors to make the implementation of a wide range of distributed extended transaction models practically available [19]. 6 Conclusion Workflow systems are an important part of many business applications today, particularly in the capture and execution of business processes. <p> In this paper, we have presented a practical method to implement dynamic restructuring operations for distributed transactional activities. The method modularly decomposes the restructuring operations into microprotocols, and maps them into the system components (RTF [1], OCP <ref> [28] </ref>, MARS [4]) we previously developed to support distributed extended transactions [19], as well as a set of adaptors on top of production transaction processing (TP) monitors. Incremental specialization [21] is applied to improve operation performance.
Reference: [29] <author> T. Zhou, C. Pu, and L. Liu. </author> <title> A Practical Method to Implement the Restructuring of Transactional Activities. </title> <type> Technical report, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <month> May </month> <year> 1997. </year>
Reference-contexts: Section 4 describes our prototype system that supports transactional activities and these dynamic activity restructuring operations. Related work are reviewed in Section 5, and Section 6 concludes the paper. Because of the length restriction, we refer interested readers to <ref> [29] </ref> for further technical details. 2 Dynamic Activity Restructuring Primitives 2.1 Transactional Activity Model We first describe a general activity model as our basis for discussion. This model encompasses features from previously published activity models [22, 3, 15]. <p> A, D, and F are composite activities, while all the rest are elementary activities. Also note that the figures here do not particularly show activities' normal execution dependencies, like serial dependency. For space limitation, we do not include the complete activity specification <ref> [29] </ref> here; however, we would explain relevant dependencies as such where necessary in the following sections. 3.3 Activity-Split Implementation Now we present a detailed implementation description of Activity-Split. As mentioned in Section 2, we only illustrate the implementation with that of two-way Activity-Split. <p> Preparation 3.4 Activity-Join Implementation The microprotocol composition for Activity-Join is very similar to that for Activity-Split. For the lack of space, we refer the readers to the longer version of this paper <ref> [29] </ref> for details. 4 System Prototype We have implemented a prototype system for transactional activity management. The system covers a family of dynamic activity restructuring operations, as well as other important features of the Transactional Activity Model (TAM) [15].
Reference: [30] <author> T. Zhou, C. Pu, and L. Liu. </author> <title> Using OCP to Build Flexible Coordination Protocols: A Transactional Multimedia Application. </title> <booktitle> In Proceedings of International Symposium on Digital Media Information Base (DMIB'97), </booktitle> <address> Nara, Japan, </address> <month> November </month> <year> 1997. </year>
References-found: 30

