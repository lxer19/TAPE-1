URL: http://www.cs.chalmers.se/pub/cs-reports/techreports/TR-75.ps.Z
Refering-URL: http://www.cs.chalmers.se/pub/cs-reports/techreports/
Root-URL: 
Title: BROADCASTING WITH PRIORITY both strong and weak bisimulation are congru-ences, and capture the intuitively desired
Author: K. V. S. PRASAD 
Keyword: Key words and phrases. Broadcast, priority, process calculi, bisimulation, functional programming.  
Note: As in unprioritised CBS,  
Abstract: Adding priorities to CCS is difficult, and involves two-stage operational semantics or other complications. By contrast, priorities can be added very simply to a calculus of broadcasting systems (CBS). The reason is the input/output distinction made in CBS, with output actions being autonomous. Priority makes sense only for autonomous actions. The public address system at an airport can give bomb alerts, say, priority over flight announcements. Everyone hears messages read out over the system, but individual responses vary. Priority assignment cannot depend on the actual public responses to the contending messages, even if expectations about responses play a role. Priority here is only a matter of choosing between the messages themselves. Priorities in the marketplace are more complex, because buyer and seller must agree for a sale to take place. Sellers' minimum prices and buyers' maximum prices must be met, but further preferences for advantageous prices are not relevant unless there are competing parties to do business with. A broker arranging sales that respect everybody's priorities has a harder task than the announcer at the airport. The handshake (or rendezvous) model of communication is similar to the market model. An indication of the difficulty of respecting priorities in this model is the "priority inversion" problem in Ada [BA90]. This model is also predominant in process calculus. The several papers [BBK85, CH88, CW91] that add priority to process calculus have all used this model, and therefore suffer from the broker's difficulties. In [CH88], an a priori semantics works out what might happen, and a second stage works out what actually happens. In [CW91], transitions are predicated on what the environment can do. This paper adds priorities to a calculus of broadcasting systems (CBS) [Pra93c]. The resulting CBS with priorities (PCBS) is strikingly simple, and compares very favourably with CCS with priorities. This confirms the intuition above, since the Author's address: Department of Computing Science, Chalmers University of Technology, S 412 96 Gothenburg, Sweden. E-mail: prasad@cs.chalmers.se. Funding: From the Swedish Government agencies TFR and NUTEK, the latter supporting Chalmers' membership of the Esprit Basic Research Action CONCUR2. Reference: This paper is to be presented at ESOP'94. 
Abstract-found: 1
Intro-found: 1
Reference: [AJ93] <author> Lennart Augustsson and Thomas Johnsson. </author> <title> Lazy ML user's manual. </title> <type> Technical report, </type> <institution> Department of Computer Science, Chalmers University of Technology, </institution> <year> 1993. </year>
Reference-contexts: But it does appear that the complexity of [CW91] comes from the handshake model. 8. A PCBS simulator in Lazy ML Table 2 shows the correspondence between CBS notation and the Lazy ML (LML for short) programming notation <ref> [AJ93] </ref>. Types and constructors are capitalised, while processes and process constructors are entirely in upper case. The process type, Proc *a, is given in Table 3. Recursion and conditionals are not part of it. These are taken from LML.
Reference: [BA90] <author> M. Ben-Ari. </author> <title> Principles of Concurrent and Distributed Programming. </title> <publisher> Prentice-Hall, </publisher> <year> 1990. </year>
Reference: [BBK85] <author> J. C. M. Baeten, J. A. Bergstra, and J. W. Klop. </author> <title> Syntax and defining equations for an interrupt mechanism in process algebra. </title> <type> Technical Report CSR8503, </type> <institution> Centre for Mathematics and Computer Science, </institution> <address> Amsterdam, </address> <year> 1985. </year>
Reference: [BG92] <author> Gerard Berry and Georges Gonthier. </author> <title> The ESTEREL synchronous programming language: Design, semantics, </title> <booktitle> implementation. Science of Computer Programming, </booktitle> <volume> 19, </volume> <year> 1992. </year>
Reference-contexts: Future work for CBS includes the development of a proof system, further development of implementations, and comparison with such systems as LINDA [CG89], GAMMA [BM91] and I/O automata [LT87]. These will be extended to PCBS. Statecharts [Har87] and ESTEREL <ref> [BG92] </ref> both use broadcast communication, and deal with interrupts and timeouts. However, the models are different enough that comparison is difficult. ESTEREL, for example, allows multiple signals to be broadcast simultaneously, and the receiver chooses which to act on. Acknowledgements.
Reference: [BM91] <editor> J.-P. Ban^atre and D. Le Metayer, editors. </editor> <booktitle> Research Directions in High-Level Parallel Programming Languages. </booktitle> <publisher> Springer Verlag LNCS 574, </publisher> <year> 1991. </year>
Reference-contexts: V. S. PRASAD Adding probabilities to CCS (CBS) is difficult (easy) for the same reasons as adding priorities is. Future work for CBS includes the development of a proof system, further development of implementations, and comparison with such systems as LINDA [CG89], GAMMA <ref> [BM91] </ref> and I/O automata [LT87]. These will be extended to PCBS. Statecharts [Har87] and ESTEREL [BG92] both use broadcast communication, and deal with interrupts and timeouts. However, the models are different enough that comparison is difficult.
Reference: [Bur88] <author> F. W. Burton. </author> <title> Nondeterminism with referential transparency in functional languages. </title> <journal> The Computer Journal, </journal> <volume> 31(3) </volume> <pages> 243-247, </pages> <year> 1988. </year>
Reference-contexts: The user interface of the simulator and some abbreviations Clearly, say has to be nondeterministic. One way <ref> [Bur88] </ref> to achieve nondeter-minism with functions is to put the nondeterminism in the data. say is given an extra boolean argument, an oracle, whose value will be determined at run time, but once fixed will not change. The oracle chooses between the parallel components.
Reference: [CC93] <author> Linda Christoff and Ivan Christoff. </author> <title> Observational equivalence for processes with priorities. </title> <type> Technical report, </type> <institution> Dept. of Computer Systems, Uppsala Univ., </institution> <year> 1993. </year>
Reference-contexts: The authors of [CH88] say that such a possibility would be useful; they also point out that then such actions cannot be restricted! This is precisely the scenario of PCBS. Defining weak bisimulation for this model is non-trivial <ref> [CC93] </ref>; it is done by abstracting t s from sequences of actions in a priority sensitive way. (Remember that t s preceding a matching action in PCBS have to be of equal or higher priority). 8 K. V. S.
Reference: [CG89] <author> Nicholas Carriero and David Gelernter. </author> <title> Linda in context. </title> <journal> Communications of the ACM, </journal> <volume> 32(4) </volume> <pages> 444-458, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: V. S. PRASAD Adding probabilities to CCS (CBS) is difficult (easy) for the same reasons as adding priorities is. Future work for CBS includes the development of a proof system, further development of implementations, and comparison with such systems as LINDA <ref> [CG89] </ref>, GAMMA [BM91] and I/O automata [LT87]. These will be extended to PCBS. Statecharts [Har87] and ESTEREL [BG92] both use broadcast communication, and deal with interrupts and timeouts. However, the models are different enough that comparison is difficult.
Reference: [CH88] <author> Rance Cleaveland and Matthew Hennessy. </author> <title> Priorities in process algebras. </title> <booktitle> In Symposium on Logic in Computer Science. IEEE, </booktitle> <year> 1988. </year>
Reference-contexts: This confirms that the deprioritisation operator of PCBS, which seems anyway adequate, is as powerful as it can be. 7. CCS with priorities The difficulties in adding priorities to CCS can be traced to the fact that hand shake communication makes an autonomous action out of two controlled ones. <ref> [CH88] </ref> begins with an a priori semantics which labels transitions with actions and their priorities. The second stage then says that prioritised actions are unconstrained, but unprioritised actions can only take place if they are not preempted by prioritised t 's|the negative premise. <p> But the result is not entirely satisfactory even at the cost of a two stage operational semantics, for a: P + b: Q 6~ b: Q if b is of higher priority than a|the basic difficulty mentioned in the introduction. The authors of <ref> [CH88] </ref> say that such a possibility would be useful; they also point out that then such actions cannot be restricted! This is precisely the scenario of PCBS. <p> This cannot be done within CBS. However, says and pipe can detect termination (in this and other simple cases), signalling it by returning a finite list. See [Pra93c] for examples of use of this kind of termination detection. Example 18. [TALK is an interrupt operator] The motivating example from <ref> [CH88] </ref> and [CW91] is a counter that accepts "Up" and "Down" commands until interrupted. Here is a variation, a clock that counts off intervals until interrupted by any signal at priority 0 or 1. rec CLOCK n = TALK (n,1) (CLOCK (n+1)) ("x. <p> Strong and weak bisimulations in PCBS are congruences, and yield observation-ally meaningful equivalences. Putting deprioritisation aside, only only law distinguishes PCBS from CBS: outranked output guards in a sum cannot be used. This corresponds to a similar law in <ref> [CH88] </ref>. Interestingly, neither the expansion theorem nor the law of distribution of translation over j need change. Priorities make a useful addition to the CBS paradigm.
Reference: [CW91] <author> Juanito Camilleri and Glynn Winskel. </author> <title> CCS with priority choice. </title> <booktitle> In Symposium on Logic in Computer Science. IEEE, </booktitle> <year> 1991. </year>
Reference-contexts: Correspondence between programming and calculus notation <ref> [CW91] </ref> presents a priority sum + 0 similar to Occam's PRIALT; a: P + 0 b: Q can perform a b only if the environment will not do a. <p> Lastly, a ready function is needed to adjust the environment parameter upon communication in a parallel composition. It is almost as though <ref> [CW91] </ref> declared output actions autonomous, input actions controlled, and dealt semantically with what could (autonomously) happen. Unfortunately for this interpretation, output actions can be restricted. <p> Unfortunately for this interpretation, output actions can be restricted. Worse, t is independent of the environment as are output actions, but is classified as input, since it can be an initial action in a prisum! Since <ref> [CW91] </ref> deals with process pri ority rather than action priority, comparison with PCBS cannot be exact. But it does appear that the complexity of [CW91] comes from the handshake model. 8. <p> t is independent of the environment as are output actions, but is classified as input, since it can be an initial action in a prisum! Since <ref> [CW91] </ref> deals with process pri ority rather than action priority, comparison with PCBS cannot be exact. But it does appear that the complexity of [CW91] comes from the handshake model. 8. A PCBS simulator in Lazy ML Table 2 shows the correspondence between CBS notation and the Lazy ML (LML for short) programming notation [AJ93]. Types and constructors are capitalised, while processes and process constructors are entirely in upper case. <p> However, says and pipe can detect termination (in this and other simple cases), signalling it by returning a finite list. See [Pra93c] for examples of use of this kind of termination detection. Example 18. [TALK is an interrupt operator] The motivating example from [CH88] and <ref> [CW91] </ref> is a counter that accepts "Up" and "Down" commands until interrupted. Here is a variation, a clock that counts off intervals until interrupted by any signal at priority 0 or 1. rec CLOCK n = TALK (n,1) (CLOCK (n+1)) ("x.
Reference: [Har87] <author> David Harel. Statecharts: </author> <title> A visual formalism for complex systems. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 8, </volume> <year> 1987. </year>
Reference-contexts: Future work for CBS includes the development of a proof system, further development of implementations, and comparison with such systems as LINDA [CG89], GAMMA [BM91] and I/O automata [LT87]. These will be extended to PCBS. Statecharts <ref> [Har87] </ref> and ESTEREL [BG92] both use broadcast communication, and deal with interrupts and timeouts. However, the models are different enough that comparison is difficult. ESTEREL, for example, allows multiple signals to be broadcast simultaneously, and the receiver chooses which to act on. Acknowledgements.
Reference: [Jef92] <author> Alan Jeffrey. </author> <title> Translating timed process algebra into prioritised process algebra. </title> <booktitle> In Ni-jmegen Symposium on Real-Time and Fault-Tolerant Systems, </booktitle> <year> 1992. </year>
Reference-contexts: Related and future work [Pra93a] develops a Timed CBS. It shows that the same aspects of broadcast communication are again useful, and that PCBS can be derived from Timed CBS. Most of Timed CBS can be derived from PCBS. <ref> [Jef92] </ref> suggests that a (discrete) timed calculus can be derived from a prioritised calculus; one relevant aspect here is that PCBS appears to extend to dense priorities with no change. 16 K. V. S.
Reference: [LT87] <author> Nancy Lynch and Mark Tuttle. </author> <title> Hierarchical correctness proofs for distributed algorithms. </title> <type> Technical Report MIT/LCS/TR-387, </type> <institution> Laboratory for Computer Science, Massachusetts Institute of Technology, </institution> <year> 1987. </year>
Reference-contexts: V. S. PRASAD Adding probabilities to CCS (CBS) is difficult (easy) for the same reasons as adding priorities is. Future work for CBS includes the development of a proof system, further development of implementations, and comparison with such systems as LINDA [CG89], GAMMA [BM91] and I/O automata <ref> [LT87] </ref>. These will be extended to PCBS. Statecharts [Har87] and ESTEREL [BG92] both use broadcast communication, and deal with interrupts and timeouts. However, the models are different enough that comparison is difficult. ESTEREL, for example, allows multiple signals to be broadcast simultaneously, and the receiver chooses which to act on.
Reference: [Mil89] <author> Robin Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference: [Pra91] <author> K. V. S. Prasad. </author> <title> A calculus of broadcasting systems. </title> <booktitle> In TAPSOFT'91 Volume 1: CAAP, </booktitle> <address> April 1991. </address> <publisher> Springer Verlag LNCS 493. </publisher>
Reference: [Pra93a] <author> K. V. S. Prasad. </author> <title> Broadcasting in time. </title> <type> Technical report, </type> <institution> Department of Computer Science, Chalmers University of Technology, </institution> <year> 1993. </year>
Reference-contexts: Proofs were dropped in favour of more examples, but it should be clear that the usual techniques of process calculus are applicable. [Pra93b, Pra93c] suggest that CBS could be a practical programming language. This paper records a further step, experiments with a parallelism profiler. 12. Related and future work <ref> [Pra93a] </ref> develops a Timed CBS. It shows that the same aspects of broadcast communication are again useful, and that PCBS can be derived from Timed CBS.
Reference: [Pra93b] <author> K. V. S. Prasad. </author> <title> A calculus of value broadcasts. </title> <booktitle> In PARLE'93, </booktitle> <address> June 1993. </address> <publisher> Springer Verlag LNCS 694. </publisher>
Reference-contexts: Proposition 12 (Expansion theorem). Let r 2 f0; 1g. Then P 0 j P 1 ~ r;w;k w! k (P 0 r j P 1r =w) +? x: (P 0 =x j P 1 =x) where P r w!k ! P 0 CBS + , the calculus of <ref> [Pra93b] </ref>, is an unprioritised calculus with ? and ! prefixes, 0 and + as primitive constructors. The equations 1 (a) and 1 (b) of Proposition 11 together with the expansion theorem constitute a complete axiom system for finite processes of CBS + . <p> Earlier definitions of bisimulation for PCBS prescribed that t s preceding the matching action had to be of equal or higher priority. Interestingly, the apparently more liberal definition above captures the same effect. <ref> [Pra93b] </ref> devises tests to tell unequal processes apart, and suggests that is therefore a meaningful equivalence for CBS. The same argument can be made for PCBS. Because sums are guarded, the following pleasant property holds. Proposition 16. is a congruence for PCBS. 6. <p> Neither complexity nor correctness are dealt with in these examples; their purpose is to demonstrate the power of the language. Some proofs were sketched in <ref> [Pra93b, Pra93c] </ref> and it is clear that the usual techniques of process calculus apply. The examples all use value passing, and the formal integration of proofs about processes with proofs about data is still being worked out. <p> To see how a proof of correctness would go, see <ref> [Pra93b] </ref>. <p> They provide atomic sequences (detecting termination, absence of response, etc.), preemption of default actions by exceptions (or interrupts), and a means of doing some actions immediately. Proofs were dropped in favour of more examples, but it should be clear that the usual techniques of process calculus are applicable. <ref> [Pra93b, Pra93c] </ref> suggest that CBS could be a practical programming language. This paper records a further step, experiments with a parallelism profiler. 12. Related and future work [Pra93a] develops a Timed CBS.
Reference: [Pra93c] <author> K. V. S. Prasad. </author> <title> Programming with broadcasts. In CONCUR'93, August 1993. </title> <publisher> Springer Verlag LNCS 715. </publisher>
Reference-contexts: The equations 1 (a) and 1 (b) of Proposition 11 together with the expansion theorem constitute a complete axiom system for finite processes of CBS + . This result has not yet been adapted to the CBS of <ref> [Pra93c] </ref>. PCBS was earlier built on CBS + , and it was then clear that 1 (c) was the only law that distinguished the two. It seems a reasonable conjecture that this is the case in the present calculus as well. Definition 13 (Priority abstracted bisimulation for closed processes). <p> The number of priority levels this program needs depends on I. Hardware implementations typically provide only a limited number of priority levels, so the programs that follow use only a bounded number of them, independent of the input. Two similar disciplines that are followed both here and in <ref> [Pra93c] </ref> are that the memory needed by any process, and the size of the transmitted values, are both independent of the input data (counting integers as one "word", and making other such traditional assumptions). <p> Neither complexity nor correctness are dealt with in these examples; their purpose is to demonstrate the power of the language. Some proofs were sketched in <ref> [Pra93b, Pra93c] </ref> and it is clear that the usual techniques of process calculus apply. The examples all use value passing, and the formal integration of proofs about processes with proofs about data is still being worked out. <p> This cannot be done within CBS. However, says and pipe can detect termination (in this and other simple cases), signalling it by returning a finite list. See <ref> [Pra93c] </ref> for examples of use of this kind of termination detection. Example 18. [TALK is an interrupt operator] The motivating example from [CH88] and [CW91] is a counter that accepts "Up" and "Down" commands until interrupted. <p> The CBS formulation is then valuable for its structure rather than parallelism. By contrast, the distributed search above allows significant parallelism and meaningful experiments in optimisation and load balancing by varying grain and n. 10. Implementation; integration of evaluation and communication <ref> [Pra93c] </ref> presents an extended calculus with both evaluation and communication transitions that is the basis for an implementation by a simulator in a functional language. Evaluation is borrowed from the host language, and accounts for recursion and conditionals. All of this can be extended to PCBS. <p> They provide atomic sequences (detecting termination, absence of response, etc.), preemption of default actions by exceptions (or interrupts), and a means of doing some actions immediately. Proofs were dropped in favour of more examples, but it should be clear that the usual techniques of process calculus are applicable. <ref> [Pra93b, Pra93c] </ref> suggest that CBS could be a practical programming language. This paper records a further step, experiments with a parallelism profiler. 12. Related and future work [Pra93a] develops a Timed CBS.
Reference: [RW93] <author> C. Runciman and D. Wakeling. </author> <title> Profiling parallelism. </title> <type> Internal report, </type> <institution> Department of Computer Science, University of York, </institution> <year> 1993. </year>
Reference-contexts: CELL (k,n) Fresh y range) [1..n]))) (randtrees r) BROADCASTING WITH PRIORITY 15 Of the examples in this section, the first two might be called "concurrent" programs, and the rest "parallel". (P)CBS has an implementation on top of a quasi-parallel evaluator <ref> [RW93] </ref>, which shows parallelism profiles. This shows that most of the programs here are so fine grain that communication overheads drown the parallelism, at least in this implementation. The CBS formulation is then valuable for its structure rather than parallelism.
References-found: 19

