URL: http://www.eecs.umich.edu/~grbarret/bisim.ps
Refering-URL: http://www.eecs.umich.edu/~grbarret/
Root-URL: http://www.cs.umich.edu
Title: Bisimulation, the Supervisory Control Problem and Strong Model Matching for Finite State Machines  
Author: George Barrett and Stephane Lafortune 
Degree: ALL RIGHTS RESERVED  
Address: Room 4234, EECS Building Ann Arbor, MI 48109-2122 USA  
Affiliation: THE UNIVERSITY OF MICHIGAN SYSTEM SCIENCE AND ENGINEERING DIVISION DEPARTMENT OF ELECTRICAL ENGINEERING AND COMPUTER SCIENCE  
Date: (Revised) October 1997  
Pubnum: Report No. CGR-97-05  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A. Arnold, </author> <title> Finite transition systems, </title> <publisher> Prentice Hall, </publisher> <address> NJ, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction This paper presents the results of an investigation of the relationship between supervisory control of discrete-event systems (DES) [24], bisimulation relations <ref> [1, 2] </ref>, and strong input/output finite-state machine model matching [7, 9, 8, 10]. The approach taken throughout this text is from the point of view of automata as DES models [6]. A basic understanding of DES supervisory control is assumed, for the introductory material given here is brief. <p> This generalization is discussed as parameterized states in <ref> [1] </ref>; thus, a single automaton can be viewed as marking several languages. <p> Definition 2.8 Let H and G be as in Subsection 2.2. A bisimulation relation of H and G with respect to B H [ G is a binary relation X H fi X G satisfying <ref> [1, 2] </ref>: 1. If (x H ; x G ), 2 B and x H ! x 0 H , then there is a x 0 G such that x G G and (x 0 G ). <p> For fixed parameter B , bisimulation relations are closed under arbitrary unions <ref> [1, 2] </ref>, so there exists a greatest bisimulation relation. 8 Automata H and G are bisimilar with respect to B , denoted H $ B G, if there exists a bisimulation relation of H and G with respect to B such that each state of H and each state of G <p> Definition 2.9 Let H and G be as in Subsection 2.2. A simulation relation of H and G with respect to S H is a binary relation X H fi X G satisfying <ref> [1] </ref>: 1. <p> Bisimulation is a more detailed semantics than the trajectory model semantics in [17] and ready (accepting trace <ref> [1] </ref>), ready trace, failure (refusing trace [1]), failure trace, and trace semantics in [2], that is, bisimulation equivalence implies equivalence in all of the above listed semantics. <p> Bisimulation is a more detailed semantics than the trajectory model semantics in [17] and ready (accepting trace <ref> [1] </ref>), ready trace, failure (refusing trace [1]), failure trace, and trace semantics in [2], that is, bisimulation equivalence implies equivalence in all of the above listed semantics. Indeed, bisimulation is too detailed [5] for many purposes, i.e., it distinguishes DES that are indistinguishable given the observation of a sequence of events. <p> From the above description of input/output sequences, it is evident that the behavior of a FSM in the framework of DiBenedetto et al. [7, 9, 8] is identified with its set of extended traces <ref> [1] </ref> of the form i j 0 O j 0 i j 1 O j 1 : : : i j k1 O j k1 ; where i j fl 2 I and O j fl O, k 1. <p> In SCT, the marking of a state generally represents some particular action of interest such as a completed task. The notion of state marking is a special case of the state parameters discussed in <ref> [1] </ref>. Here, as in [27], state marking will be generalized to a class of possible state markings. Instead of considering a single set of marked states, X m , we will consider several sets of marked states associated with each automaton. <p> A family of marked languages is called a multitrace set in <ref> [1] </ref> where the state parameters of the multitrace set are the marking classes used here. <p> See <ref> [1, pages 148-158] </ref> for a thorough discussion and generalization of trace equivalences.
Reference: [2] <author> J. C. M. Baeten and W. P. Weijland, </author> <title> Process algebra, </title> <booktitle> Cambridge Tracts in Theoretical Computer Science, </booktitle> <volume> vol. 18, </volume> <publisher> Cambridge University Press, </publisher> <address> Great Britain, </address> <year> 1990. </year> <month> 43 </month>
Reference-contexts: 1 Introduction This paper presents the results of an investigation of the relationship between supervisory control of discrete-event systems (DES) [24], bisimulation relations <ref> [1, 2] </ref>, and strong input/output finite-state machine model matching [7, 9, 8, 10]. The approach taken throughout this text is from the point of view of automata as DES models [6]. A basic understanding of DES supervisory control is assumed, for the introductory material given here is brief. <p> Understanding how bisimulation, as the descriptive semantics, relates to supervisory control lends insight toward utilizing weaker semantics, e.g., trajectory model [17], failure, failure trace, ready, ready trace, and trace (language) <ref> [2] </ref>. 2. Section 5 reviews I/O FSM model matching as presented in [7, 9, 8, 10]. In addition, we present a precise relationship between "behavioral equivalence" of FSMs in the I/O FSM model matching framework and bisimulation between two FSMs. 3. <p> Definition 2.8 Let H and G be as in Subsection 2.2. A bisimulation relation of H and G with respect to B H [ G is a binary relation X H fi X G satisfying <ref> [1, 2] </ref>: 1. If (x H ; x G ), 2 B and x H ! x 0 H , then there is a x 0 G such that x G G and (x 0 G ). <p> For fixed parameter B , bisimulation relations are closed under arbitrary unions <ref> [1, 2] </ref>, so there exists a greatest bisimulation relation. 8 Automata H and G are bisimilar with respect to B , denoted H $ B G, if there exists a bisimulation relation of H and G with respect to B such that each state of H and each state of G <p> The normal form of G, denoted by N (G), is the automaton generated by using the equivalence classes of as the states of N (G) <ref> [2] </ref>. The states of N (G) inherit marking information and all incoming and outgoing event transitions from the previous states of G. N (G) can be called the minimum state realization of G. <p> The bisimulation semantics, however, has a more detailed requirement for DES equivalence. Within the bisimulation semantics two DES modeled by automata A 1 and A 2 , are equivalent if their normal forms are equal (isomorphic), i.e., N (A 1 ) = N (A 2 ) <ref> [2] </ref>. Figure 2 shows a case where two automata are equivalent in the trace semantics but not equivalent in the bisimulation semantics. <p> Bisimulation is a more detailed semantics than the trajectory model semantics in [17] and ready (accepting trace [1]), ready trace, failure (refusing trace [1]), failure trace, and trace semantics in <ref> [2] </ref>, that is, bisimulation equivalence implies equivalence in all of the above listed semantics. Indeed, bisimulation is too detailed [5] for many purposes, i.e., it distinguishes DES that are indistinguishable given the observation of a sequence of events.
Reference: [3] <author> G. Barrett and S. Lafortune, </author> <title> A bisimulation approach to the supervisory control of discrete event systems, </title> <booktitle> Proc. of 34th Annual Allerton Conference on Communication, Control and Computing (Allerton Park, </booktitle> <address> IL), </address> <month> October </month> <year> 1996. </year> <title> [4] , Using bisimulation to solve discrete event control problems, </title> <booktitle> Proc. 1997 American Control Conf. </booktitle> <address> (Albuquerque, NM), </address> <month> June </month> <year> 1997, </year> <pages> pp. 2337-2341. </pages>
Reference-contexts: The paper concludes with Section 8 3 where the basic ideas are summarized. Parts of this paper, in its preliminary form, have appeared in <ref> [3, 4] </ref>. 2 2 Preliminaries 2.1 Automata and Languages For the investigation and discussion of discrete-event systems at a logical level of abstraction, the automaton will be used as the primary descriptive model.
Reference: [5] <author> B. Bloom, S. Istrail, and A. Meyer, </author> <title> Bisimulation can't be traced: Preliminary report, </title> <booktitle> Proc. of 15th Annual SIGACT-SIGPLAN Symposium on Principles of Programming Languages, </booktitle> <year> 1988. </year>
Reference-contexts: Bisimulation is a more detailed semantics than the trajectory model semantics in [17] and ready (accepting trace [1]), ready trace, failure (refusing trace [1]), failure trace, and trace semantics in [2], that is, bisimulation equivalence implies equivalence in all of the above listed semantics. Indeed, bisimulation is too detailed <ref> [5] </ref> for many purposes, i.e., it distinguishes DES that are indistinguishable given the observation of a sequence of events.
Reference: [6] <author> C. Cassandras, S. Lafortune, and G. Olsder, </author> <title> Introduction to the modelling, control and optimization of discrete event systems, Trends in Control. A European Perspective (A. </title> <editor> Isidori, ed.), </editor> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1995, </year> <pages> pp. 217-291. </pages>
Reference-contexts: The approach taken throughout this text is from the point of view of automata as DES models <ref> [6] </ref>. A basic understanding of DES supervisory control is assumed, for the introductory material given here is brief. One of the main focal points of this paper is the exploitation of the level of information contained in a finite-state automaton model when solving the supervisory control problem. <p> Parts of this paper, in its preliminary form, have appeared in [3, 4]. 2 2 Preliminaries 2.1 Automata and Languages For the investigation and discussion of discrete-event systems at a logical level of abstraction, the automaton will be used as the primary descriptive model. Definition 2.1 <ref> [6] </ref> 3 A deterministic finite-state automaton (DFSA), denoted G, is a six-tuple G = (X G ; G ; ffi G ; act G ; x G0 ; X Gm ) that generates the language L (G) and marks the language L m (G) where X G = finite set of <p> The notion of language mentioned above is now formally defined. Definition 2.2 <ref> [6] </ref> The language generated by G is: L (G) = ft 2 fl G : ffi G (x G0 ; t) is definedg: Likewise, the special subset of L (G) that represents the marked language of G is defined as: L m (G) = ft 2 L (G) : ffi G <p> In all of these cases, references to the literature are given. 3 Reference <ref> [6] </ref> is not the original reference for the concepts reviewed in this section, but rather a tutorial intro duction to these concepts. 4 The notion of a set of marked states can be generalized to several sets of marked states fX m;1 ; : : : ; X m;k g. <p> Such a generalization was first used in the context of supervisory control in [27]. Two common operations on automata are the product, denoted fi, and the parallel composition, denoted jj. These two operations are designed to describe the interactions between discrete-event systems modeled as automata. Definition 2.3 <ref> [6] </ref> The product of two automata G 1 and G 2 where: G 1 = (X G1 ; G1 ; ffi G1 ; act G1 ; x G01 ; X Gm1 ) is where ffi ((x G1 ; x G2 ); ) = (ffi G1 (x G1 ; ); ffi G2 <p> Definition 2.4 <ref> [6] </ref> The parallel composition of two automata G 1 and G 2 is G 1 jjG 2 = (X G1 fi X G2 ; G1 [ G2 ; ffi; act G 1jj2 ; (x G01 ; x G02 ); X Gm1 fi X Gm2 ) where ffi ((x G1 ; x <p> In addition to the above operations, it is convenient to define the natural projection operator which "removes" events from a trace which do not belong to a particular event set. 5 Definition 2.5 <ref> [6] </ref> The natural projections P i : ( 1 [ 2 ) fl ! fl i for i = 1; 2 are P i () := if 2 i P i (s) := P i (s)P i () for s 2 ( 1 [ 2 ) fl ; 2 ( 1 <p> (A; a); (A; b); (A; c); (A; d); (B; a); (B; b); (B; c); (B; d); 4.4 Discussion of Computational Complexity Off-Line Inspection of the off-line solution of Section 4.2 to the Basic Supervisory Control Problem reveals that finding a partition that constrains the state-pairings allowed for the standard realization <ref> [6] </ref> of the supervisor can be done in O (j uc j (n H + n G ) log (n H + n G )).
Reference: [7] <author> M. D. DiBenedetto, A. Saldanha, and A. Sangiovanni-Vincentelli, </author> <title> Model matching for finite state machines, </title> <booktitle> Proc. of 33rd Conf. Decision and Control (Lake Buena Vista, </booktitle> <address> FL, USA), </address> <month> December </month> <year> 1994, </year> <pages> pp. </pages> <month> 3117-3124. </month> <title> [8] , Strong model matching for finite state machines, </title> <booktitle> Proc. of 3rd European Control Conference (Rome, </booktitle> <address> Italy), </address> <month> September </month> <year> 1995, </year> <pages> pp. </pages> <year> 2027-2034. </year> <title> [9] , Strong model matching for finite state machines with non-deterministic reference model, </title> <booktitle> Proc. of 34rd Conf. Decision and Control (New Orleans, </booktitle> <address> LA, USA), </address> <month> December </month> <year> 1995, </year> <pages> pp. </pages> <month> 422-426. </month> <title> [10] , Model matching for finite state machines, </title> <month> August </month> <year> 1996, </year> <institution> Cadence Berkeley Laboratories Technical Report. </institution>
Reference-contexts: 1 Introduction This paper presents the results of an investigation of the relationship between supervisory control of discrete-event systems (DES) [24], bisimulation relations [1, 2], and strong input/output finite-state machine model matching <ref> [7, 9, 8, 10] </ref>. The approach taken throughout this text is from the point of view of automata as DES models [6]. A basic understanding of DES supervisory control is assumed, for the introductory material given here is brief. <p> A discussion of bisimulation is given and results are presented for its application to the supervisory control problem. Supervisory control is not the only system-theoretic problem for which bisimulations can apply. One other such class of problems is strong input/output (I/O) finite-state machine (FSM) model matching introduced in <ref> [7] </ref>. This model matching problem is closely related to supervisory control, 1 This research was supported in part by NSF grant ECS-9057967 and ARO grant DAAH04-96-1-0377. The authors can be reached by email at grbarret@eecs.umich.edu, and stephane@eecs.umich.edu. Final version. 2 hence bisimulation is also related to I/O FSM model matching. <p> Understanding how bisimulation, as the descriptive semantics, relates to supervisory control lends insight toward utilizing weaker semantics, e.g., trajectory model [17], failure, failure trace, ready, ready trace, and trace (language) [2]. 2. Section 5 reviews I/O FSM model matching as presented in <ref> [7, 9, 8, 10] </ref>. In addition, we present a precise relationship between "behavioral equivalence" of FSMs in the I/O FSM model matching framework and bisimulation between two FSMs. 3. The behavior of I/O FSMs is related to the language properties of associated Moore automata in section 7.1. <p> On-line storage is O (jj (n H + n G )). 5 Input/Output Finite-State Machine Model Matching The problem of strong model matching for finite-state machines (FSMs), as posed by DiBenedetto et al. <ref> [7, 9, 8, 10] </ref>, consists of finding a controller for a given open loop system that results in a desired closed loop behavior (cf. precise statement in Section 5.1). The resulting controller maps command signals in some command set V to control signals in some control set U. <p> associated with strong I/O FSM model matching are presented in Subsection 5.2, and Subsection 5.3 presents some behavioral inclusion problems associated with strong I/O FSM model matching. 5.1 Input/Output FSMs, Behavioral Equivalence, and Bisimulation This section deals primarily with basic definitions for FSMs and operations between FSMs as given in <ref> [7, 9, 8, 10] </ref>. As in [8, 10], Greek letters are used for functions or relations, capital English letters represent sets, and lower case represent elements. <p> given in <ref> [7, 9, 8, 10] </ref>. As in [8, 10], Greek letters are used for functions or relations, capital English letters represent sets, and lower case represent elements. The numbers associated with definitions and theorems correspond to section numbers used in this paper and are not necessarily those given in [7, 9, 8, 10] unless otherwise stated. <p> From the above description of input/output sequences, it is evident that the behavior of a FSM in the framework of DiBenedetto et al. <ref> [7, 9, 8] </ref> is identified with its set of extended traces [1] of the form i j 0 O j 0 i j 1 O j 1 : : : i j k1 O j k1 ; where i j fl 2 I and O j fl O, k 1. <p> Hereafter all FSMs will be assumed to have a dead state and every transition defined at every state; the dead state is always identifiable among the elements of S (we will call it ), and I (s) is implicitly defined by the knowledge of . To compare FSMs in <ref> [7, 9, 8, 10] </ref> the notion of FSM behavioral equivalence is introduced: Definition 5.2 [8] 11 Given DFSM F 1 = (I; O; S 1 ; 1 ; fl 1 ; r 1 ) and NDFSM F 2 = (I; O; S 2 ; 2 ; fl 2 ; r 2 <p> that is, there must be some way to cast model matching decision problems as optimization problems. 5.3 Strong Model Matching Inclusion Problems As discussed in the previous section, the case of exact model matching is not enough to allow supervisory control problems to be solved using the formalisms discussed in <ref> [7, 9, 8, 10] </ref>. Additionally, there must exist some methodology of dealing with matching some maximal set of desired behaviors. <p> This relationship will be described in detail later in the proofs of Theorem 7.1 in Section 7.2 and Theorem 7.2 in Section 7.3. 7.2 Solving BSCP as FSM Model Matching This section describes how the model matching formalism proposed by M. DiBenedetto et al. <ref> [7, 9, 8, 10] </ref> can be used to solve the Basic Supervisory Control Problem. More specifically, it is shown that the BSCP posed in the framework of supervisory control can be translated to the I/O FSM modeling framework of [7, 9, 8, 10] and solved as the SMMP-D-MB. <p> DiBenedetto et al. <ref> [7, 9, 8, 10] </ref> can be used to solve the Basic Supervisory Control Problem. More specifically, it is shown that the BSCP posed in the framework of supervisory control can be translated to the I/O FSM modeling framework of [7, 9, 8, 10] and solved as the SMMP-D-MB. Theorem 7.1 Let H and G be as in Definition 3.1, and let M and M 1 be such that H IO G 7! M 1 ; hence V = U and W = uc . <p> The conjecture of DiBenedetto et al. <ref> [7, 8, 10] </ref> that the BSCP can be solved in the I/O FSM model matching framework has been verified. This is insufficient, however, to conclude that the strong model matching paradigm is more general than the feedback loop of supervisory control. <p> The Supervisory Control Theory initiated by Ramadge and Wonham [24] was carefully compared to the Strong I/O FSM Model Matching Theory of DiBenedetto, Saldanha, and Sangiovanni-Vincentelli <ref> [7, 9, 8, 10] </ref>. It was formally established that, in deterministic settings, the "Strong I/O FSM Model Matching with Measurable Disturbances to A Maximal Set of Reference Behaviors Problem" can be solved by mapping it to an instance of the "Basic Supervisory Control Problem" and vice-versa. <p> The generality of I/O FSM Model Matching was compared to that of Supervisory Control. Being posed in a "stronger" semantics will allow nondeterministic problems to be solved in the I/O FSM Model Matching framework without altering the meaning of machine equivalence; however, all of the problems presented in <ref> [7, 9, 8, 10] </ref> are based on deterministic "plants". Supervisory Control Theory bases equivalence on languages, and therefore, must be altered to handle nondeterministic settings; recent work in that regard can be found in [11, 16, 18, 21, 26].
Reference: [11] <author> M. Fabian, </author> <title> On object oriented nondeterministic supervisory control, </title> <type> Ph.D. thesis, </type> <institution> Chalmers University of Technology, </institution> <year> 1995. </year>
Reference-contexts: Supervisory Control Theory bases equivalence on languages, and therefore, must be altered to handle nondeterministic settings; recent work in that regard can be found in <ref> [11, 16, 18, 21, 26] </ref>. Acknowledgments We gratefully acknowledge Maria DiBenedetto and Alberto Sangiovanni-Vincentelli for the many enlightening discussions on the topics of bisimulation relations and I/O FSM model matching, and for sharing with us a copy of their report [10].
Reference: [12] <author> J. Fernandez, </author> <title> An implementation of an efficient algorithm for bisimulation equivalence, </title> <institution> Sci. Comput. </institution> <note> Programming 13 (1990), 219-236. [13] , Personal communications, </note> <month> August </month> <year> 1996. </year>
Reference-contexts: Furthermore, it has been shown that the problem of finding the greatest autobisimula-tion relation of an automaton with respect to an event set A is equivalent to the coarsest relational partition problem <ref> [12, 22] </ref>. The algorithm of Paige and Tarjan [22] for solving the coarsest relational partition problem considers the case of a single relation, i.e., j A j = 1. Fernandez [12] generalizes the algorithm of Paige and Tarjan to handle the case when j A j 1. <p> The algorithm of Paige and Tarjan [22] for solving the coarsest relational partition problem considers the case of a single relation, i.e., j A j = 1. Fernandez <ref> [12] </ref> generalizes the algorithm of Paige and Tarjan to handle the case when j A j 1. <p> (j A j (n H + n G ) log (n H + n G )) where n H and n G are the number of states in H and G respectively. 2.4.1 Example of Finding Coarsest Stable Relational Partition The details of the efficient algorithm can be found in <ref> [12] </ref>. Here, a simple example of a "nave" implementation of the algorithm in tabular form is presented. Consider the problem of finding a bisimulation relation between the two automata, A 1 and A 2 , shown in Figure 3. <p> In this case, block I is also a splitter. (Splitters are common to both the nave algorithm shown here and the efficient algorithms in <ref> [12] </ref> and [22]. The key to the efficiency of the improved algorithms is the intelligent chosing of splitters.) Because the partition contains blocks that can be split by the splitters, the partition is not stable with respect to the splitters. <p> The greatest bisimulation relation between H and G with respect to uc , uc , can be found by partition refinement in time bounded by O (j uc j (n H + n G ) log (n H + n G )) <ref> [12] </ref>, where n H and n G are the number of states in H and G respectively. <p> Off-Line Algorithm: Bisim-BSCP Step 1. Find the coarsest stable relational partition, , of G and H with respect to the set of uncontrollable events, uc , using the algorithm in <ref> [12] </ref>. Denote by the greatest bisimulation relation of H and G (with respect to uc ) induced by . Step 2. If (x H0 ; x G0 ) is not in the equivalence relation represented by , then let R be the empty automaton. <p> X G such that (x H ; x G ) 2 i1 g ffi i ( H undefined otherwise X i H : Find the coarsest stable relational partition, i , of G and H i with respect to the set of uncontrollable events, uc , using the algorithm in <ref> [12] </ref>. Step 2. If (x H0 ; x G0 ) is not in the greatest bisimulation relation of H i and G (with respect to uc ) induced by i , then let R i be the empty automaton. <p> It was shown that, given language inclusion of deterministic automata, controllability of languages is the same as bisimulation of automata with respect to uncontrollable events. Further, these bisimulation relations can be found by partition refinement for which there exist very efficient algorithms. One such algorithm by Fernandez <ref> [12] </ref>, based on Paige and Tarjan's famous algorithm [22], finds the coarsest partition of a family of binary relations on a set, S, with complexity O (c m log (n)) where m is the size of the relation, n is the 42 size of S, and c is a bound on
Reference: [14] <author> N. B. Hadj-Alouane, S. Lafortune, and F. Lin, </author> <title> Variable lookahead supervisory control with state information, </title> <journal> IEEE Trans. Automat. Contr. </journal> <volume> 39 (1994), no. 12, </volume> <pages> 2398-2410. </pages>
Reference-contexts: If n H and n G are the number of states in H and G respectively, then the worst-case running time of this type of algorithm is O (jjn H n G ) using the technique in [20] for cleverly pruning the state space or using the constructive approach in <ref> [14] </ref>. 6 More "efficient" 7 algorithms exist which are based on an interesting relation between controllability and bisimulation.
Reference: [15] <author> J. P. Hayes, </author> <title> Introduction to digital logic design, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1993. </year>
Reference-contexts: The procedure described below explicitly uses the "classical" method of converting a Mealy machine to a Moore machine <ref> [15, 19] </ref>. Converting a Mealy machine to a Moore machine is slightly more complicated than renaming transitions as in the Moore-to-Mealy case. <p> Because it does not add information to the model, we will assume the dead state of the Mealy-type machine is not kept in the resulting Moore-type automaton. Figure 10 shows the conversion of a Mealy LIFO stack control unit state diagram to a Moore type diagram <ref> [15] </ref>. The resulting Moore LIFO machine has four marking classes: f; ERR; LS; RSg, one for each distinct output of the Mealy LIFO control unit.
Reference: [16] <author> M. Heymann and F. Lin, </author> <title> Discrete event control of nondeterministic systems, </title> <type> Tech. Report # CIS 9601, </type> <institution> Department of Computer Science Technion, Israel Institute of Technology, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: Supervisory Control Theory bases equivalence on languages, and therefore, must be altered to handle nondeterministic settings; recent work in that regard can be found in <ref> [11, 16, 18, 21, 26] </ref>. Acknowledgments We gratefully acknowledge Maria DiBenedetto and Alberto Sangiovanni-Vincentelli for the many enlightening discussions on the topics of bisimulation relations and I/O FSM model matching, and for sharing with us a copy of their report [10].
Reference: [17] <author> M. Heymann and G. Meyer, </author> <title> An algebra of discrete event processes, </title> <type> Tech. Report NASA Memorandum 102848, </type> <institution> NASA, Ames Research Center, Moffett Field, </institution> <address> CA, USA, </address> <month> June </month> <year> 1991. </year>
Reference-contexts: Understanding how bisimulation, as the descriptive semantics, relates to supervisory control lends insight toward utilizing weaker semantics, e.g., trajectory model <ref> [17] </ref>, failure, failure trace, ready, ready trace, and trace (language) [2]. 2. Section 5 reviews I/O FSM model matching as presented in [7, 9, 8, 10]. <p> Bisimulation is a more detailed semantics than the trajectory model semantics in <ref> [17] </ref> and ready (accepting trace [1]), ready trace, failure (refusing trace [1]), failure trace, and trace semantics in [2], that is, bisimulation equivalence implies equivalence in all of the above listed semantics.
Reference: [18] <author> K. Inan, </author> <title> Nondeterministic supervision under partial observation, </title> <booktitle> 11th International Conference on Analysis and Optimization of Systems: Discrete Event Systems (G. </booktitle> <editor> Cohen and J. Quadrat, eds.), </editor> <publisher> Springer-Verlag, </publisher> <month> June </month> <year> 1994, </year> <pages> pp. 39-48. </pages>
Reference-contexts: Supervisory Control Theory bases equivalence on languages, and therefore, must be altered to handle nondeterministic settings; recent work in that regard can be found in <ref> [11, 16, 18, 21, 26] </ref>. Acknowledgments We gratefully acknowledge Maria DiBenedetto and Alberto Sangiovanni-Vincentelli for the many enlightening discussions on the topics of bisimulation relations and I/O FSM model matching, and for sharing with us a copy of their report [10].
Reference: [19] <author> Z. Kohavi, </author> <title> Switching and finite automata theory, 2nd ed., </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1978. </year> <month> 44 </month>
Reference-contexts: The procedure described below explicitly uses the "classical" method of converting a Mealy machine to a Moore machine <ref> [15, 19] </ref>. Converting a Mealy machine to a Moore machine is slightly more complicated than renaming transitions as in the Moore-to-Mealy case.
Reference: [20] <author> R. Kumar, V. Garg, and S. I. Marcus, </author> <title> On controllability and normality of discrete-event dynamical systems, </title> <journal> Syst. Contr. Lett. </journal> <volume> 17 (1991), </volume> <pages> 157-168. </pages>
Reference-contexts: If n H and n G are the number of states in H and G respectively, then the worst-case running time of this type of algorithm is O (jjn H n G ) using the technique in <ref> [20] </ref> for cleverly pruning the state space or using the constructive approach in [14]. 6 More "efficient" 7 algorithms exist which are based on an interesting relation between controllability and bisimulation. <p> Because the blocking behavior of a system is of interest, we define a nonblocking supervisor as one which allows the closed loop system to complete any trace in its generated language to a marked trace. 5 L denotes the prefix-closure of the language L. 6 Reference <ref> [20] </ref> also shows that the bound O (jj (n H n G )) is tight for constructing an automaton that generates K " . 7 In a sense to be made more precise in Section 4; refer to the discussion in Section 4.4. 7 Definition 2.7 Nonblocking Version of BSCP (BSCP-NB)
Reference: [21] <author> A. Overkamp, </author> <title> Supervisory control using failure semantics and partial specifications, </title> <journal> IEEE Trans. Automat. Contr. </journal> <volume> 42 (1997), no. 4, </volume> <pages> 498-510. </pages>
Reference-contexts: Supervisory Control Theory bases equivalence on languages, and therefore, must be altered to handle nondeterministic settings; recent work in that regard can be found in <ref> [11, 16, 18, 21, 26] </ref>. Acknowledgments We gratefully acknowledge Maria DiBenedetto and Alberto Sangiovanni-Vincentelli for the many enlightening discussions on the topics of bisimulation relations and I/O FSM model matching, and for sharing with us a copy of their report [10].
Reference: [22] <author> R. Paige and R. Tarjan, </author> <title> Three partition refinement algorithms, </title> <journal> SIAM J. Comput. </journal> <volume> 16 (1987), no. 6, </volume> <pages> 973-989. </pages>
Reference-contexts: Furthermore, it has been shown that the problem of finding the greatest autobisimula-tion relation of an automaton with respect to an event set A is equivalent to the coarsest relational partition problem <ref> [12, 22] </ref>. The algorithm of Paige and Tarjan [22] for solving the coarsest relational partition problem considers the case of a single relation, i.e., j A j = 1. Fernandez [12] generalizes the algorithm of Paige and Tarjan to handle the case when j A j 1. <p> Furthermore, it has been shown that the problem of finding the greatest autobisimula-tion relation of an automaton with respect to an event set A is equivalent to the coarsest relational partition problem [12, 22]. The algorithm of Paige and Tarjan <ref> [22] </ref> for solving the coarsest relational partition problem considers the case of a single relation, i.e., j A j = 1. Fernandez [12] generalizes the algorithm of Paige and Tarjan to handle the case when j A j 1. <p> The refined partition is (here, block names are being reused): 1 = fI,IIg = ffA; C; 1; 3; 4g; fB; 2gg: Repeating this process yields the tabular transition relation: a b c C I I ; 3 II I ; B II I I In the terminology of <ref> [22] </ref> block II is a splitter of blocks I and II. In this case, block I is also a splitter. (Splitters are common to both the nave algorithm shown here and the efficient algorithms in [12] and [22]. <p> ; 3 II I ; B II I I In the terminology of <ref> [22] </ref> block II is a splitter of blocks I and II. In this case, block I is also a splitter. (Splitters are common to both the nave algorithm shown here and the efficient algorithms in [12] and [22]. The key to the efficiency of the improved algorithms is the intelligent chosing of splitters.) Because the partition contains blocks that can be split by the splitters, the partition is not stable with respect to the splitters. <p> Further, these bisimulation relations can be found by partition refinement for which there exist very efficient algorithms. One such algorithm by Fernandez [12], based on Paige and Tarjan's famous algorithm <ref> [22] </ref>, finds the coarsest partition of a family of binary relations on a set, S, with complexity O (c m log (n)) where m is the size of the relation, n is the 42 size of S, and c is a bound on the largest image set of any element of
Reference: [23] <author> P. J. Ramadge and W. M. Wonham, </author> <title> Supervisory control of a class of discrete event processes, </title> <journal> SIAM J. Control Optim. </journal> <volume> 25 (1987), no. 1, </volume> <pages> 206-230. </pages>
Reference-contexts: A point of view is assumed that some behavior of a plant modeled as a DES is illegal and must be disabled by a controller called a supervisor <ref> [23, 24] </ref>. This control scheme is depicted in Figure 1. <p> These conditions indicate that controllability can be viewed as a relation on the set of states of H fi G. This state interpretation is explored later in Section 3. Definition 2.6 Basic Supervisory Control Problem (BSCP) <ref> [23] </ref> Given a DES modeled by DFSA G, uc G , and desired legal language, K = K L (G), build supervisor S such that: 1. L (S=G) K 2. <p> also shows that the bound O (jj (n H n G )) is tight for constructing an automaton that generates K " . 7 In a sense to be made more precise in Section 4; refer to the discussion in Section 4.4. 7 Definition 2.7 Nonblocking Version of BSCP (BSCP-NB) <ref> [23] </ref> Given DES G, uc G , and desired legal marked language, K L m (G), with K assumed to be L m (G)-closed, build nonblocking supervisor S such that: 1. L m (S=G) K 2. <p> This claim suggests I/O FSM model matching may be more general than the feedback loop of supervisory control in the Ramadge-Wonham paradigm <ref> [23, 24] </ref>. This section introduces strong I/O FSM model matching. In Section 7, the above claim will be formally investigated. The remainder of this section is organized as follows. Subsection 5.1 provides introductory material covering I/O finite-state machines, FSM behavior and how behavioral equivalence relates to bisimulation.
Reference: [24] <author> P.J. Ramadge and W.M. Wonham, </author> <title> The control of discrete event systems, </title> <booktitle> Proc. of the IEEE 77 (1989), </booktitle> <volume> no. 1, </volume> <pages> 81-98. </pages>
Reference-contexts: 1 Introduction This paper presents the results of an investigation of the relationship between supervisory control of discrete-event systems (DES) <ref> [24] </ref>, bisimulation relations [1, 2], and strong input/output finite-state machine model matching [7, 9, 8, 10]. The approach taken throughout this text is from the point of view of automata as DES models [6]. <p> A point of view is assumed that some behavior of a plant modeled as a DES is illegal and must be disabled by a controller called a supervisor <ref> [23, 24] </ref>. This control scheme is depicted in Figure 1. <p> This claim suggests I/O FSM model matching may be more general than the feedback loop of supervisory control in the Ramadge-Wonham paradigm <ref> [23, 24] </ref>. This section introduces strong I/O FSM model matching. In Section 7, the above claim will be formally investigated. The remainder of this section is organized as follows. Subsection 5.1 provides introductory material covering I/O finite-state machines, FSM behavior and how behavioral equivalence relates to bisimulation. <p> Thus, the size of the on-line supervisor is O (jj (n H + n G )) (compare to O (jj (n H n G ))). The Supervisory Control Theory initiated by Ramadge and Wonham <ref> [24] </ref> was carefully compared to the Strong I/O FSM Model Matching Theory of DiBenedetto, Saldanha, and Sangiovanni-Vincentelli [7, 9, 8, 10].
Reference: [25] <author> A. </author> <title> Sangiovanni-Vincentelli, </title> <type> Personal communications, </type> <month> December </month> <year> 1995. </year>
Reference-contexts: in Section 6.1, the output marking of a particular state s is denoted h (s), e.g., in Figure 10 (b) (outputs are in bold) it can be seen that h (s 00 1 ) = RS 16 . 15 This is a modified version of a conversion method suggested in <ref> [25] </ref>. While the method suggested in [25] may work, the method presented here maintains the intuitive notion of assigning the set of uncontrollable events uc to be the set of disturbances W . 16 With some abuse of notation, the curly braces are not shown for singleton outputs, and we will <p> of a particular state s is denoted h (s), e.g., in Figure 10 (b) (outputs are in bold) it can be seen that h (s 00 1 ) = RS 16 . 15 This is a modified version of a conversion method suggested in <ref> [25] </ref>. While the method suggested in [25] may work, the method presented here maintains the intuitive notion of assigning the set of uncontrollable events uc to be the set of disturbances W . 16 With some abuse of notation, the curly braces are not shown for singleton outputs, and we will not distinguish an output class from
Reference: [26] <author> M. Shayman and R. Kumar, </author> <title> Supervisory control of nondeterministic systems with driven events via prioritized synchronization and trajectory models, </title> <journal> SIAM J. Control Optim. </journal> <volume> 33 (1995), no. 2, </volume> <pages> 469-497. </pages>
Reference-contexts: Supervisory Control Theory bases equivalence on languages, and therefore, must be altered to handle nondeterministic settings; recent work in that regard can be found in <ref> [11, 16, 18, 21, 26] </ref>. Acknowledgments We gratefully acknowledge Maria DiBenedetto and Alberto Sangiovanni-Vincentelli for the many enlightening discussions on the topics of bisimulation relations and I/O FSM model matching, and for sharing with us a copy of their report [10].
Reference: [27] <author> J. G. Thistle, R. P. Malhame, H. H. Hoang, and S. Lafortune, </author> <title> Blocking, modularity, and feature interactions in distributed systems, March 1995, </title> <type> Preprint. </type>
Reference-contexts: Such a generalization was first used in the context of supervisory control in <ref> [27] </ref>. Two common operations on automata are the product, denoted fi, and the parallel composition, denoted jj. These two operations are designed to describe the interactions between discrete-event systems modeled as automata. <p> In SCT, the marking of a state generally represents some particular action of interest such as a completed task. The notion of state marking is a special case of the state parameters discussed in [1]. Here, as in <ref> [27] </ref>, state marking will be generalized to a class of possible state markings. Instead of considering a single set of marked states, X m , we will consider several sets of marked states associated with each automaton.
Reference: [28] <author> W.M. Wonham and P.J. Ramadge, </author> <title> On the supremal controllable sublanguage of a given language, </title> <journal> SIAM J. Control Optim. </journal> <volume> 25 (1987), no. 3, </volume> <pages> 637-659. </pages>
Reference-contexts: The solution to the BSCP is called the minimally restrictive solution (MRS): L (S=G) = K " , where K " is the supremal controllable sublanguage of K with respect to L (G) and uc <ref> [28] </ref>. A common solution technique, the "standard" algorithm [28], for the BSCP is to form the automaton product H fi G and iteratively remove states which violate the controllability condition or are not reachable. <p> The solution to the BSCP is called the minimally restrictive solution (MRS): L (S=G) = K " , where K " is the supremal controllable sublanguage of K with respect to L (G) and uc <ref> [28] </ref>. A common solution technique, the "standard" algorithm [28], for the BSCP is to form the automaton product H fi G and iteratively remove states which violate the controllability condition or are not reachable. <p> Denote by [H fi G] " the automaton formed using the standard algorithm <ref> [28] </ref> for computing the supremal controllable sublanguage of L (H) with respect to L (G) and uc , i.e., forming the product H fi G and iteratively pruning states which 1) violate the controllability condition or 2) are unreachable; hence, L ([H fiG] " ) = L (H fiG) " . <p> If R i" is the empty automaton, then L m (H) " = ;; otherwise L m (R i" ) = L m (H) " . Proof 4.2 Follows from the results of Section 3 and the standard algorithm <ref> [28] </ref> for solving the BSCP-NB. 4.3 BSCP Solution Example This subsection demonstrates the off-line solution of the Basic Supervisory Control Problem using the greatest bisimulation with respect to the set of uncontrollable events. An automaton that represents a desired language is shown in Figure 4.
References-found: 23

