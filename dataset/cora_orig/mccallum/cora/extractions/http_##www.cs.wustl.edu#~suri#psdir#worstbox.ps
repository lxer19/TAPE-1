URL: http://www.cs.wustl.edu/~suri/psdir/worstbox.ps
Refering-URL: http://www.cs.wustl.edu/~suri/research.html
Root-URL: http://www.cs.wustl.edu
Title: Analyzing Bounding Boxes for Object Intersection  
Author: Subhash Suri Philip M. Hubbard John F. Hughes 
Keyword: oe).  
Address: St. Louis.  
Affiliation: at Washington Univ.,  Computer Science, Brown University, Providence, RI  Science Technology Center for Computer Graphics and Scientific Visualization, Sun, Microsoft, and NASA.  
Note: Interval Research Corporation, Palo Alto, CA 94304. Research conducted while  02912. Research supported in part by the NSF  
Abstract: Heuristics that exploit bounding boxes are common in algorithms for rendering, modeling and animation. While experience has shown that bounding boxes improve the performance of these algorithms in practice, the previous theoretical analysis has concluded that bounding boxes perform poorly in the worst case. This paper reconciles this discrepancy by analyzing intersections among n polyhedral objects in terms of two parameters: ff, an upper bound on the aspect ratio or elongatedness of each object; and oe, an upper bound on the scale factor or size disparity between the largest and smallest objects. Letting K o be the number of object pairs that intersect, and K b be the number of bounding box pairs that intersect, we prove that ae = K b =(n + K o ) = O(ff One important consequence is that if ff and oe are small constants (as is often the case in practice) then K b = O(K o ) + O(n), so an algorithm that uses bounding boxes has time complexity proportional to the number of actual object intersections. This theoretical result validates the efficiency that bounding boxes have demonstrated in practice. Another consequence of our analysis is an output-sensitive algorithm for reporting all intersecting pairs in a set of n convex polyhedra with constant ff and oe. The algorithm takes time O(n log d1 n + K o log d1 n) for dimension d = 2; 3. This running time improves on the performance of previous algorithms, which make no assumptions about ff and oe. fl A preliminary version of this paper was presented at the 9th Symposium on Discrete Algorithms, San Francisco, 1998. y Computer Science, Washington Univ., St. Louis, MO 63130. Research supported in part by NSF Grant CCR-9501494. oe log 2 oe), and ae = (ff
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Chazelle. </author> <title> An optimal algorithm for intersecting three-dimensional convex polyhedra. </title> <journal> SIAM Journal on Computing, </journal> <volume> 21(4), </volume> <pages> pp. 671-696, </pages> <year> 1992. </year> <month> 18 </month>
Reference-contexts: This algorithm preprocesses the polyhedra in a separate phase that runs in linear time. Using this preprocessing, one can also compute an explicit representation of the intersection of two convex polyhedra in time O (m), as shown by Chazelle <ref> [1] </ref>. If only one of the objects in the pair is convex, then intersection detection can be performed in time O (m log m) [5].
Reference: [2] <author> J. D. Cohen, M. C. Lin, D. Manocha and M. K. Ponamgi. I-COLLIDE: </author> <title> An in-teractive and exact collision detection system for large-scale environments. </title> <booktitle> Proc. of ACM Interactive 3D Graphics Conference, </booktitle> <pages> pp. 189-196, </pages> <year> 1995. </year>
Reference-contexts: Animation algorithms also exploit bounding boxes, especially collision detection algorithms for path planning [21] and the simulation of physically based motion <ref> [2, 20, 25] </ref>. While empirical evidence demonstrates that the bounding box heuristic improves performance in practice, the goal of proving that bounding boxes maintain high performance in the worst case has remained elusive. <p> Edelsbrunner [8] and Mehlhorn [24] describe provably efficient algorithms for axis-aligned bounding boxes in d-space, algorithms that find the k intersecting pairs in O (n log d1 n + k) time and O (n log d2 n) space. A variety of heuristic methods are used in practice <ref> [2, 19] </ref>, and empirical evidence suggest that these algorithms perform well; the "sweep-and-prune" algorithm implemented in the I-COLLIDE package of Cohen et al. [2] currently appears to be the method of choice. <p> A variety of heuristic methods are used in practice [2, 19], and empirical evidence suggest that these algorithms perform well; the "sweep-and-prune" algorithm implemented in the I-COLLIDE package of Cohen et al. <ref> [2] </ref> currently appears to be the method of choice. It might seem desirable to use a broad phase the replaces axis-aligned bounding boxes with objects' convex hulls, which provide a tighter form of bound.
Reference: [3] <author> M. de Berg. </author> <title> Linear size binary space partitions for fat objects. </title> <booktitle> Proc. 3rd European Symposium on Algorithms, </booktitle> <pages> pp. 252-263, </pages> <year> 1995. </year>
Reference-contexts: Additional results on fat or uncluttered objects can be found in <ref> [3, 15, 29] </ref>. 3 Analysis Overview Our proof for the upper bound on ae consists of three steps. We first consider the case of arbitrary ff but fixed oe (Section 4).
Reference: [4] <author> M. de Berg, M. Katz, A. F. van der Stappen and J. Vleugels. </author> <title> Realistic input models for geometric algorithms. </title> <booktitle> Proc. 13th ACM Symposium on Computational Geometry, </booktitle> <pages> pp/ 294-303, </pages> <year> 1997. </year>
Reference-contexts: These methods use hierarchies of bounding volumes and tree-descent schemes to determine intersections. Our analysis of the bounding box heuristic is related to the idea of "realistic input models," which has become a topic of recent interest in computational geometry. In a recent paper, de Berg et al. <ref> [4] </ref> have suggested classifying various models of realistic input models into four main classes: fatness, density, clutter, and cover complexity.
Reference: [5] <author> D. Dobkin, J. Hershberger, D. Kirkpatrick and S. Suri. </author> <title> Computing the intersection-depth of polyhedra. </title> <journal> Algorithmica, </journal> <volume> 9, </volume> <pages> pp. 518-533, </pages> <year> 1993. </year>
Reference-contexts: Using this preprocessing, one can also compute an explicit representation of the intersection of two convex polyhedra in time O (m), as shown by Chazelle [1]. If only one of the objects in the pair is convex, then intersection detection can be performed in time O (m log m) <ref> [5] </ref>. The problem is more difficult if both polyhedra are nonconvex, and only recently has a subquadratic time algorithm been discovered for deciding if two nonconvex polyhedra intersect [27].
Reference: [6] <author> D. P. Dobkin and D. G. Kirkpatrick. </author> <title> Determining the separation of preprocessed polyhedra|a unified approach. </title> <booktitle> Proc. 17th ICALP, </booktitle> <volume> LNCS 443, </volume> <pages> pp. 400-413, </pages> <year> 1990. </year>
Reference-contexts: in O (n log d1 n + ff p oeK o log 2 oe log d1 m) time, for d = 2; 3, where m is the maximum number of vertices in a polyhedron. (We assume that each polyhedron has been preprocessed in linear time for efficient pairwise intersection detection <ref> [6] </ref>.) Without the aspect and scale bounds, we are not aware of any output-sensitive algorithm for this problem in three dimensions. Even in two dimensions, the best algorithm for finding all intersecting pairs in a set of n convex polygons takes O (n 4=3 + K o ) time [14]. <p> Thus, the performance of a narrow phase algorithm does not depend on n, the number of objects in the set, but rather on the complexity of each object. If the objects are convex polyhedra, then a method due to Dobkin and Kirkpatrick <ref> [6] </ref> can decide whether two objects intersect in O (log d1 m) time, where m is the total number of edges in the two polyhedra, and d 3 is the dimension. This algorithm preprocesses the polyhedra in a separate phase that runs in linear time. <p> If the polyhedra are convex, then the narrow phase intersection test can be performed in O (log d1 m) time <ref> [6] </ref>, assuming that all polyhedra have been preprocessed in linear time; m is the maximum number of vertices in a polyhedron.
Reference: [7] <author> K. Dobrindt, K. Mehlhorn and M. Yvinec. </author> <title> A complete and efficient algorithm for the intersection of a general and a convex polyhedron. </title> <booktitle> Proc. 3rd Workshop on Algorithms and Data Structures, </booktitle> <volume> LNCS 709, </volume> <pages> pp. 314-324, </pages> <year> 1993. </year>
Reference: [8] <author> H. Edelsbrunner. </author> <title> A new approach to rectangle intersections (Parts I and II). </title> <journal> Int. J. of Computer Math., </journal> <volume> 13, </volume> <pages> pp. 209-229, </pages> <year> 1983. </year>
Reference-contexts: Efficient algorithms for the broad phase must avoid looking at all O (n 2 ) pairs of bounding boxes, and they do so by exploiting the specialized structure of bounding boxes. Edelsbrunner <ref> [8] </ref> and Mehlhorn [24] describe provably efficient algorithms for axis-aligned bounding boxes in d-space, algorithms that find the k intersecting pairs in O (n log d1 n + k) time and O (n log d2 n) space. <p> Given n polyhedra in two or three dimensions, we can report all pairs whose bounding boxes intersect in time O (n log d1 n + K b ) <ref> [8, 24] </ref>, where K b is the number of intersecting bounding box pairs.
Reference: [9] <author> A. Efrat and M. Sharir. </author> <title> On the complexity of the union of fat objects in the plane. </title> <booktitle> Proc. 13th ACM Symposium on Computational Geometry, </booktitle> <pages> pp. 104-112, </pages> <year> 1997. </year>
Reference-contexts: Efrat and Sharir <ref> [9] </ref> generalize this result to show that the union of n convex objects has complexity O (n 1+" ) provided that each object is fat and each pair of objects intersects only in a constant number of points.
Reference: [10] <author> J. D. Foley, A. van Dam, S. K. Feiner, J. F. </author> <title> Hughes Computer Graphics: </title> <booktitle> Principles and Practice (2nd Edition in C). </booktitle> <publisher> Addison Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Thus, bounding boxes allow an algorithm to quickly perform a "trivial reject" test that prevents more costly processing in unnecessary cases. This heuristic appears in algorithms for rendering, from traditional algorithms for visible-surface determination <ref> [10] </ref>, to algorithms that optimize clipping through view-frustum culling [13], and recent image-based techniques that reconstruct new images from the reprojected pixels of reference images [23].
Reference: [11] <author> A. Garcia-Alonso, N. Serrano and J. Flaquer. </author> <title> Solving the Collision Detection Problem. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 14, </volume> <pages> pp. 36-43, </pages> <year> 1995. </year>
Reference-contexts: Bounding boxes are also common in algorithms for modeling, from techniques that define complex shapes as Boolean combinations of simpler shapes [18] to techniques that verify the clearance of parts in an assembly <ref> [11] </ref>. Animation algorithms also exploit bounding boxes, especially collision detection algorithms for path planning [21] and the simulation of physically based motion [2, 20, 25].
Reference: [12] <author> S. Gottschalk, M. C. Lin and D. Manocha. OBBTree: </author> <title> A hierarchical structure for rapid interference detection. </title> <booktitle> Proc. ACM SIGGRAPH, </booktitle> <pages> pp. 171-180, </pages> <year> 1996. </year>
Reference-contexts: While the provable running times of these algorithms are 5 important results, they are primarily of theoretical interest because the algorithms are too complicated to be practical. As an alternative, a variety of heuristic methods have been developed that tend to work well in practice <ref> [12, 20] </ref>. These methods use hierarchies of bounding volumes and tree-descent schemes to determine intersections. Our analysis of the bounding box heuristic is related to the idea of "realistic input models," which has become a topic of recent interest in computational geometry.
Reference: [13] <author> N. Greene. </author> <title> Detecting Intersection of a Rectangular Solid and a Convex Polyhedron. </title> <booktitle> Graphics Gems IV, </booktitle> <pages> pp. 83-110, </pages> <year> 1994. </year>
Reference-contexts: Thus, bounding boxes allow an algorithm to quickly perform a "trivial reject" test that prevents more costly processing in unnecessary cases. This heuristic appears in algorithms for rendering, from traditional algorithms for visible-surface determination [10], to algorithms that optimize clipping through view-frustum culling <ref> [13] </ref>, and recent image-based techniques that reconstruct new images from the reprojected pixels of reference images [23].
Reference: [14] <author> P. Gupta, R. Janardan and M. Smid. </author> <title> Efficient algorithms for counting and reporting pairwise intersection between convex polygons. </title> <type> Technical report, </type> <institution> Computer Science, King's College, UK, </institution> <year> 1996. </year>
Reference-contexts: Even in two dimensions, the best algorithm for finding all intersecting pairs in a set of n convex polygons takes O (n 4=3 + K o ) time <ref> [14] </ref>. <p> Unfortunately, no provably efficient algorithm is known for finding the intersections between n convex polyhedra in three dimensions. In two dimensions, though, a recent algorithm of Gupta et al. <ref> [14] </ref> can report the intersecting pairs of convex polygons in time O (n 4=3 + k). The narrow phase solves the problem of determing the contact or interpenetration between two objects. <p> We are aware of only one non-trivial result for this problem, which holds in two dimensions. Gupta et al. <ref> [14] </ref> give an O (n 4=3 + K o ) time algorithm for reporting K o pairs of intersecting convex polygons in the plane. The problem is wide open in three and higher dimensions.
Reference: [15] <author> D. Halperin and M. H. Overmars. </author> <title> Spheres, Molecules, and Hidden Surface Removal. </title> <booktitle> Proc. 10th ACM Symposium on Computational Geometry, </booktitle> <pages> pp. 113-122, </pages> <year> 1994. </year>
Reference-contexts: Additional results on fat or uncluttered objects can be found in <ref> [3, 15, 29] </ref>. 3 Analysis Overview Our proof for the upper bound on ae consists of three steps. We first consider the case of arbitrary ff but fixed oe (Section 4).
Reference: [16] <author> H. Hardy, J. E. Littlewood and G. Polya. </author> <title> Inequalities. </title> <publisher> Cambridge University Press, </publisher> <year> 1988. </year>
Reference-contexts: Proof. We observe the following equalities: n X 2 = i=1 2 1 n X x 2 ! Thus, P n i 2 is minimized when P n x 2 2 is minimized. Using Cauchy's Inequality <ref> [16] </ref>, the latter is minimized when x i = z=n. The lemma follows. 2 Since no square box of size ff can have more than 2dffe lattice points in it, we get a lower bound on L i by setting m (q) = M i 2dffe , for all q.
Reference: [17] <author> M. Held, J. T. Klosowski and J. S. B. Mitchell. </author> <title> Collision detection for fly-throughs in virtual environments. </title> <booktitle> Video Presentation at ACM Symposium on Computation Geometry, </booktitle> <year> 1996. </year>
Reference: [18] <author> C. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1989. </year>
Reference-contexts: Bounding boxes are also common in algorithms for modeling, from techniques that define complex shapes as Boolean combinations of simpler shapes <ref> [18] </ref> to techniques that verify the clearance of parts in an assembly [11]. Animation algorithms also exploit bounding boxes, especially collision detection algorithms for path planning [21] and the simulation of physically based motion [2, 20, 25].
Reference: [19] <author> P. M. Hubbard. </author> <title> Collision detection for interactive graphics applications. </title> <journal> IEEE Trans. Visualization and Computer Graphics, </journal> <volume> 1(3), </volume> <pages> pp. 218-230, </pages> <year> 1995. </year>
Reference-contexts: Edelsbrunner [8] and Mehlhorn [24] describe provably efficient algorithms for axis-aligned bounding boxes in d-space, algorithms that find the k intersecting pairs in O (n log d1 n + k) time and O (n log d2 n) space. A variety of heuristic methods are used in practice <ref> [2, 19] </ref>, and empirical evidence suggest that these algorithms perform well; the "sweep-and-prune" algorithm implemented in the I-COLLIDE package of Cohen et al. [2] currently appears to be the method of choice.
Reference: [20] <author> J. T. Klosowski, M. Held, J. S. B. Mitchell, H. Sowizral, and K. Zikan. </author> <title> Real-time collision detection for motion simulation within complex environments. </title> <note> Submitted for journal publication. A preliminary version appeared in ACM SIG-GRAPH'96 Visual Proceedings, pp. 151, </note> <year> 1996. </year>
Reference-contexts: Animation algorithms also exploit bounding boxes, especially collision detection algorithms for path planning [21] and the simulation of physically based motion <ref> [2, 20, 25] </ref>. While empirical evidence demonstrates that the bounding box heuristic improves performance in practice, the goal of proving that bounding boxes maintain high performance in the worst case has remained elusive. <p> While the provable running times of these algorithms are 5 important results, they are primarily of theoretical interest because the algorithms are too complicated to be practical. As an alternative, a variety of heuristic methods have been developed that tend to work well in practice <ref> [12, 20] </ref>. These methods use hierarchies of bounding volumes and tree-descent schemes to determine intersections. Our analysis of the bounding box heuristic is related to the idea of "realistic input models," which has become a topic of recent interest in computational geometry.
Reference: [21] <author> J.-C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year>
Reference-contexts: Bounding boxes are also common in algorithms for modeling, from techniques that define complex shapes as Boolean combinations of simpler shapes [18] to techniques that verify the clearance of parts in an assembly [11]. Animation algorithms also exploit bounding boxes, especially collision detection algorithms for path planning <ref> [21] </ref> and the simulation of physically based motion [2, 20, 25]. While empirical evidence demonstrates that the bounding box heuristic improves performance in practice, the goal of proving that bounding boxes maintain high performance in the worst case has remained elusive.
Reference: [22] <author> J. Matousek, J. Pach, M. Sharir, S. Sifrony and E. Welzl. </author> <title> Fat triangles determine linearly many holes. </title> <journal> SIAM J. on Computing, </journal> <volume> 23, </volume> <pages> pp. 154-169, </pages> <year> 1994. </year>
Reference-contexts: One of the first nontrivial results in this direction is by Matousek et al. <ref> [22] </ref>, who showed that the union of n fat triangles has complexity O (n log log n), as opposed to fi (n 2 ) for arbitrary triangles; a triangle is fat if its minimum angle exceeds ffi, for a constant ffi &gt; 0.
Reference: [23] <author> L. McMillan. </author> <title> An Image-Based Approach to Three-Dimensional Computer Graphics. </title> <type> Ph.D. Thesis, </type> <institution> University of North Carolina at Chapel Hill, </institution> <year> 1997. </year>
Reference-contexts: This heuristic appears in algorithms for rendering, from traditional algorithms for visible-surface determination [10], to algorithms that optimize clipping through view-frustum culling [13], and recent image-based techniques that reconstruct new images from the reprojected pixels of reference images <ref> [23] </ref>. Bounding boxes are also common in algorithms for modeling, from techniques that define complex shapes as Boolean combinations of simpler shapes [18] to techniques that verify the clearance of parts in an assembly [11].
Reference: [24] <author> K. Mehlhorn. </author> <title> Data Structures and Algorithms 3: Multi-dimensional Searching and Computational Geometry. </title> <booktitle> EATCS Monographs on Theoretical Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <address> West Germany, </address> <year> 1984. </year>
Reference-contexts: Efficient algorithms for the broad phase must avoid looking at all O (n 2 ) pairs of bounding boxes, and they do so by exploiting the specialized structure of bounding boxes. Edelsbrunner [8] and Mehlhorn <ref> [24] </ref> describe provably efficient algorithms for axis-aligned bounding boxes in d-space, algorithms that find the k intersecting pairs in O (n log d1 n + k) time and O (n log d2 n) space. <p> Given n polyhedra in two or three dimensions, we can report all pairs whose bounding boxes intersect in time O (n log d1 n + K b ) <ref> [8, 24] </ref>, where K b is the number of intersecting bounding box pairs.
Reference: [25] <author> M. P. Moore and J. Wilhelms. </author> <title> Collision Detection and Response for Computer Animation. </title> <booktitle> Proc. of SIGGRAPH '88, published as Computer Graphics, </booktitle> <volume> 22, </volume> <pages> pp. 289-298, </pages> <year> 1988. </year>
Reference-contexts: Animation algorithms also exploit bounding boxes, especially collision detection algorithms for path planning [21] and the simulation of physically based motion <ref> [2, 20, 25] </ref>. While empirical evidence demonstrates that the bounding box heuristic improves performance in practice, the goal of proving that bounding boxes maintain high performance in the worst case has remained elusive.
Reference: [26] <author> F. P. Preparata and M. I. Shamos. </author> <title> Computational Geometry: An Introduction. </title> <publisher> Springer-Verlag, </publisher> <address> New York, NY, </address> <year> 1985. </year>
Reference: [27] <author> E. Schomer and C. Thiel. </author> <title> Efficient collision detection for moving polyhedra. </title> <booktitle> Proc. 11th ACM Symposium on Computational Geometry, </booktitle> <pages> pp. 51-60, </pages> <year> 1995. </year>
Reference-contexts: The problem is more difficult if both polyhedra are nonconvex, and only recently has a subquadratic time algorithm been discovered for deciding if two nonconvex polyhedra intersect <ref> [27] </ref>. This algorithm takes O (m 8=5+" ) time to determine the first collision between two polyhedra, one of which is stationary and the other is translating.
Reference: [28] <author> A. Smith, Y. Kitamura, H. Takemura and F. Kishino. </author> <title> A Simple and Efficient Method for Accurate Collision Detection among Deformable Objects in Arbitrary Motion. </title> <booktitle> Proc. of the IEEE Virtual Reality Annual International Symposium, </booktitle> <pages> pp. 136-145, </pages> <year> 1995. </year>
Reference: [29] <author> A. F. van der Stappen, D. Halperin and M. H. Overmars. </author> <title> Efficient algorithms for exact motion planning amidst fat obstacles. </title> <booktitle> Proc. IEEE International Conference on Robotics and Automation, </booktitle> <pages> pp. 297-304, </pages> <year> 1993. </year> <month> 20 </month>
Reference-contexts: Additional results on fat or uncluttered objects can be found in <ref> [3, 15, 29] </ref>. 3 Analysis Overview Our proof for the upper bound on ae consists of three steps. We first consider the case of arbitrary ff but fixed oe (Section 4).
References-found: 29

