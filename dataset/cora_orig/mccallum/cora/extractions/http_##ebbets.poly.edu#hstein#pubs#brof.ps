URL: http://ebbets.poly.edu/hstein/pubs/brof.ps
Refering-URL: http://ebbets.poly.edu/hstein/journal.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: e-mail: bshouty@cpsc.ucalgary.ca  e-mail: hancock@learning.siemens.com  e-mail: hstein@eecs.nwu.edu  
Title: Learning Boolean Read-Once Formulas over Generalized Bases  
Author: Nader H. Bshouty Thomas R. Hancock Lisa Hellerstein 
Note: This research was supported in part by the NSERC of Canada. This research took place while Tom Hancock was a graduate student at Harvard University, supported by ONR grant N00014-85-K-0445 and NSF grant NSF-CCR-89-02500.  
Address: 2500 University Drive N.W. Calgary, Alberta, Canada T2N 1N4  755 College Road East Princeton, NJ 08540  2145 Sheridan Road Evanston, IL 60208-3118  
Affiliation: Department of Computer Science The University of Calgary  Siemens Corporate Research  Department of EECS Northwestern University  
Abstract: A read-once formula is one in which each variable appears on at most a single input. Angluin, Hellerstein, and Karpinski give a polynomial time algorithm that uses membership and equivalence queries to identify exactly read-once boolean formulas over the basis fAND; OR; NOTg [AHK93]. The goal of this work is to consider natural generalizations of these gates, in order to develop exact identification algorithms for more powerful classes of formulas. We show that read-once formulas over a basis of arbitrary boolean functions of constant fan-in k or less (i.e. any f : f0; 1g 1ck ! f0; 1g) are exactly identifiable in polynomial time using membership and equivalence queries. We show that read-once formulas over the basis of arbitrary symmetric boolean functions are also exactly identifiable in polynomial time in this model. Given standard cryptographic assumptions, there is no polynomial time identification algorithm for read-twice formulas over either of these bases using membership and equivalence queries. We further show that for any basis class B meeting certain technical conditions, any polynomial time identification algorithm for read-once formulas over B can be extended to a polynomial time identification algorithm for read-once formulas over the union of B and the arbitrary functions of fan-in k or less. As a result, read-once formulas over the union of arbitrary symmetric and arbitrary constant fan-in gates are also exactly identifiable in polynomial time using membership and equivalence queries. 
Abstract-found: 1
Intro-found: 1
Reference: [AP91] <author> H. Aizenstein and L. Pitt. </author> <title> Exact learning of read-twice DNF formulas. </title> <booktitle> In 32nd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 170-179, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: While this is not possible over our basis, this remains open for simpler bases such as fAND; ORg. Although this problem is solved for depth two formulas (i.e. DNF or CNF) <ref> [Han91, AP91] </ref>, it remains open for depth three or greater, even in the monotone case. Also learning the conjunction or disjunction of two read-once formulas is an open problem.
Reference: [A88] <author> D. Angluin. </author> <title> Queries and concept learning. </title> <journal> Machine Learning, </journal> <volume> 2(4) </volume> <pages> 319-342, </pages> <year> 1988. </year>
Reference-contexts: Angluin, Hellerstein, and Karpinski give a polynomial time algorithm that uses membership and equivalence queries to exactly identify a hidden target read-once boolean formulas over the basis fAND; OR; NOTg [AHK93]. (In this learning model proposed by Angluin <ref> [A88] </ref>, a membership query allows the learner to present an arbitrary input instance and be told the target formula's true value on that input, and an equivalence query allows the learner to propose a candidate formula and either be told that indeed this hypothesis is correct, or else be given a <p> We shall refer to a partial assignment as prime (or symmetric, or asymmetric) to mean that the projection it induces is a prime (or symmetric, or asymmetric) function. 2.5 Identification with queries We consider learning in a model developed by Angluin <ref> [A88] </ref>. The learning goal is exact identification. There is a formula f called the target formula, which is a member of a class of formulas C defined over the variable set V .
Reference: [AFP90] <author> D. Angluin, M. Frazier, and L. Pitt. </author> <title> Learning conjunctions of horn clauses. </title> <booktitle> In 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 186-192, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: This leads to the interesting open question of whether it is in fact possible to perform efficient exact identification of ROF (B) for any basis B for which the class B has an efficient exact identification algorithm (e.g. a basis of Horn sentences <ref> [AFP90] </ref> or of k-term DNF formulas [BR92]). Or alternatively, can a counterexample to this conjecture be found? Another key open question is that mentioned above of learning read-twice formulas. While this is not possible over our basis, this remains open for simpler bases such as fAND; ORg.
Reference: [AHK93] <author> D. Angluin, L. Hellerstein, and M. Karpinski. </author> <title> Learning read-once formulas with queries. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 40 </volume> <pages> 185-210, </pages> <year> 1993. </year> <month> 35 </month>
Reference-contexts: The basis of a formula is the set of functions computed by its gates. Angluin, Hellerstein, and Karpinski give a polynomial time algorithm that uses membership and equivalence queries to exactly identify a hidden target read-once boolean formulas over the basis fAND; OR; NOTg <ref> [AHK93] </ref>. (In this learning model proposed by Angluin [A88], a membership query allows the learner to present an arbitrary input instance and be told the target formula's true value on that input, and an equivalence query allows the learner to propose a candidate formula and either be told that indeed this <p> We do not 7 include these oracles, or the set V , as inputs to the procedures, but specify them when the procedures are called. We follow Angluin, Hellerstein, and Karpinski <ref> [AHK93] </ref> in determining how much time to charge for making a query. We charge both for setting up the query and for invoking the oracle. In a membership query consisting of an assignment to n variables, we charge unit time for specifying each of the n assignments. <p> Much of this machinery is carried over from previous work on read-once formulas <ref> [AHK93, BHHK91] </ref> and is also used in other read-once formula algorithms [HGM91, BHH92]. <p> The following lemma (which is a variation of a lemma used in Angluin et. al. <ref> [AHK93] </ref>) states that if we can determine the type of the lca of all pairs of variables in f , then we can construct the meta-skeleton of f in polynomial time. <p> We learn formulas over this basis by finding a meta-skeleton with respect to the bases fAND,OR,NOTg and fXOR,NOTg. We already know how to learn read-once formulas over fAND, OR, NOTg <ref> [AHK93] </ref>, and learning formulas over fXOR,NOTg is trivial since all such formulas collapse to compute either XOR, its negation, or a constant. <p> If B contains NOT then the claim is trivial if B contains any unate binary functions. If B contains no unate binary functions, Lemma 16 implies that B fNOT; XOR; :XORg. In the latter case B [fAND; ORg fAND,OR,NOT,XOR,:XORg, and an identification algorithm follows from Angluin, Hellerstein, and Karpinski <ref> [AHK93] </ref> and Lemma 13.2 5.3 Adding fan-in 3 c k functions to a basis The previous sections dealt with adding the two input functions to the basis. Here we consider adding arbitrary functions of fan-in c for 3 c k. <p> over a Symmetric Basis The problem of learning read-once formulas over a symmetric basis presents some difficulties that are not encountered in learning read-once formulas over the basis of gates of fan-in k, or over any of the bases (such as fAND, OR, NOTg and threshold) considered in previous work <ref> [AHK93, BHHK91] </ref>. By Lemma 8 we can learn read-once formulas over the symmetric basis provided that we can 21 1. learn those formulas that contain at most one non-unary gate, and 2. either build skeletons or find partitions.
Reference: [AK91] <author> D. Angluin and M. Kharitonov. </author> <booktitle> When won't membership queries help? In Proceedings of the Twenty Third Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 444-454, </pages> <year> 1991. </year>
Reference-contexts: Under certain cryptographic assumptions (such as the hardness of factoring Blum integers), Angluin and Kharitonov have shown that there is no polynomial time algorithm to identify boolean formulas in this query model (or to PAC learn them with membership queries), even when each variable appears at most three times <ref> [AK91] </ref>. For our bases we show that this is true even if variables appear at most twice. The key new basis function for this argument is the function that computes whether three values are equal. <p> Thus we have reduced the problem of identifying arbitrary formulas to identifying read-twice formulas.2 A dual of this lemma with OR instead of AND also holds. Combining this with the results of Angluin and Kharitonov <ref> [AK91] </ref>, we obtain the following. <p> If we allow only fan-in two basis functions (e.g. the basis fAND; ORg), it is unknown whether read-twice formulas are identifiable (although under the same cryptographic assumptions it is known that read-thrice formulas are not <ref> [AK91] </ref>). 8 Conclusions The learning algorithms presented in this paper show that the class of read-once formulas is learnable in the membership and equivalence query model for much more powerful families of basis functions than one might initially suspect.
Reference: [BR92] <author> A. Blum and S. Rudich. </author> <title> Fast learning of k-term DNF formulas with queries. </title> <booktitle> In Proceedings of the Twenty Fourth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 382-389, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: This leads to the interesting open question of whether it is in fact possible to perform efficient exact identification of ROF (B) for any basis B for which the class B has an efficient exact identification algorithm (e.g. a basis of Horn sentences [AFP90] or of k-term DNF formulas <ref> [BR92] </ref>). Or alternatively, can a counterexample to this conjecture be found? Another key open question is that mentioned above of learning read-twice formulas. While this is not possible over our basis, this remains open for simpler bases such as fAND; ORg.
Reference: [BHH92] <author> N. H. Bshouty, T. Hancock, and L. Hellerstein. </author> <title> Learning arithmetic read-once formulas. </title> <booktitle> In Proceedings of the Twenty Fourth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 370-381, </pages> <year> 1992. </year>
Reference-contexts: Much of this machinery is carried over from previous work on read-once formulas [AHK93, BHHK91] and is also used in other read-once formula algorithms <ref> [HGM91, BHH92] </ref>. We first observe a standard reduction stated in Lemma 4, showing that as long as the target class is projection closed, we may assume without loss of generality that the learning algorithm has a justifying assignment for each relevant variable.
Reference: [BHH92a] <author> N. H. Bshouty, T. Hancock, and L. Hellerstein. </author> <title> Learning Boolean Read-Once Formulas with Arbitrary Symmetric and Constant Fan-in Gates. </title> <booktitle> In Proceedings of the Fifth Annual ACM Workshop on Computational Learning Theory (COLT 92), </booktitle> <pages> pp. 1-15, </pages> <year> 1992. </year>
Reference: [BHHK91] <author> N. H. Bshouty, T. Hancock, L. Hellerstein, and M. Karpinski. </author> <title> Read-once threshold formulas, justifying assignments, and transformations. </title> <type> Technical report, </type> <institution> International Computer Science Institute TR-92-020, </institution> <year> 1991. </year> <note> To appear, Computational Complexity. </note>
Reference-contexts: be told that indeed this hypothesis is correct, or else be given a counterexample on which the hypothesis and the target disagree.) An early generalization of their result shows that in this model the more general class of read-once formulas over the basis of arbitrary threshold functions remains efficiently learnable <ref> [BHHK91] </ref>. In this paper we consider much more powerful sets of boolean basis functions and show that read-once formulas over these generalized bases remain learnable. These results are the culmination of a line of research on learning boolean read-once formulas with queries. <p> They then present an exact identification algorithm that uses just membership queries and justifying assignments. The same approach is used in the threshold basis algorithm <ref> [BHHK91] </ref>. This approach is not adequate for the symmetric basis, since one can show that there is no polynomial time identification algorithm for such read-once formulas using only membership queries and justifying assignments. <p> Much of this machinery is carried over from previous work on read-once formulas <ref> [AHK93, BHHK91] </ref> and is also used in other read-once formula algorithms [HGM91, BHH92]. <p> over a Symmetric Basis The problem of learning read-once formulas over a symmetric basis presents some difficulties that are not encountered in learning read-once formulas over the basis of gates of fan-in k, or over any of the bases (such as fAND, OR, NOTg and threshold) considered in previous work <ref> [AHK93, BHHK91] </ref>. By Lemma 8 we can learn read-once formulas over the symmetric basis provided that we can 21 1. learn those formulas that contain at most one non-unary gate, and 2. either build skeletons or find partitions.
Reference: [Han90] <author> T. Hancock. </author> <title> Identifying -formula decision trees with queries. </title> <booktitle> In Proceedings of the Third Annual ACM Workshop on Computational Learning Theory (COLT 90), </booktitle> <pages> pages 23-37, </pages> <year> 1990. </year>
Reference-contexts: Boolean formulas over the constant fan-in basis can simulate decision trees, using the three input if-then-else function that evaluates either its second or third argument depending on the value of the first argument. Thus our results generalize earlier work on -formula decision trees <ref> [Han90] </ref>. There are a number of technical challenges involved in learning read-once formulas over our bases.
Reference: [Han91] <author> T. Hancock. </author> <title> Learning 2 DNF formulas and k decision trees. </title> <booktitle> In Proceedings of the Fourth Annual Workshop on Computational Learning Theory, </booktitle> <pages> pages 199-209, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: While this is not possible over our basis, this remains open for simpler bases such as fAND; ORg. Although this problem is solved for depth two formulas (i.e. DNF or CNF) <ref> [Han91, AP91] </ref>, it remains open for depth three or greater, even in the monotone case. Also learning the conjunction or disjunction of two read-once formulas is an open problem.
Reference: [HGM91] <author> T. Hancock, M. Golea, and M. Marchand. </author> <title> Learning nonoverlapping perceptron networks from examples and membership queries. </title> <type> Technical report, </type> <institution> Harvard University TR-26-91, </institution> <year> 1991. </year> <note> To appear, Machine Learning. </note>
Reference-contexts: We can therefore extend a number other learning results by choosing B to be either binary matroid port functions [HC93] (a generalization of switch configurations [RS90]), read-once perceptron networks <ref> [HGM91] </ref>, or branching programs [RW93]. Boolean formulas over the constant fan-in basis can simulate decision trees, using the three input if-then-else function that evaluates either its second or third argument depending on the value of the first argument. Thus our results generalize earlier work on -formula decision trees [Han90]. <p> Much of this machinery is carried over from previous work on read-once formulas [AHK93, BHHK91] and is also used in other read-once formula algorithms <ref> [HGM91, BHH92] </ref>. We first observe a standard reduction stated in Lemma 4, showing that as long as the target class is projection closed, we may assume without loss of generality that the learning algorithm has a justifying assignment for each relevant variable. <p> The next three results follow from other work. The first is a consequence of the work of Hancock, Golea, and Marchand <ref> [HGM91] </ref> and the fact that Lemmas 4 and 8 have analogues in the PAC and membership query model of learning. The second is a consequence of the work of Hellerstein and Coullard [HC93] on binary matroid ports (a generalization of switch configurations studied by Raghavan and Schach [RS90]).
Reference: [HH91] <author> T. Hancock and L. Hellerstein. </author> <title> Learning read-once formulas over fields and extended bases. </title> <booktitle> In Proceedings of the Fourth Annual ACM Workshop on Computational Learning Theory (COLT 91), </booktitle> <pages> pages 326-336, </pages> <year> 1991. </year>
Reference: [HC93] <author> L. Hellerstein and C. Coullard. </author> <title> Learning Binary Matroid Ports. </title> <type> Unpublished manuscript. </type>
Reference-contexts: We can therefore extend a number other learning results by choosing B to be either binary matroid port functions <ref> [HC93] </ref> (a generalization of switch configurations [RS90]), read-once perceptron networks [HGM91], or branching programs [RW93]. Boolean formulas over the constant fan-in basis can simulate decision trees, using the three input if-then-else function that evaluates either its second or third argument depending on the value of the first argument. <p> The first is a consequence of the work of Hancock, Golea, and Marchand [HGM91] and the fact that Lemmas 4 and 8 have analogues in the PAC and membership query model of learning. The second is a consequence of the work of Hellerstein and Coullard <ref> [HC93] </ref> on binary matroid ports (a generalization of switch configurations studied by Raghavan and Schach [RS90]). The third results is a consequence of the work of Raghavan and Wilkins on -branching programs.
Reference: [RS90] <author> V. Raghavan and S. R. Schach. </author> <title> Learning switch configurations. </title> <booktitle> In Proceedings of the Third Annual ACM Workshop on Computational Learning Theory (COLT 90), </booktitle> <pages> pages 38-51, </pages> <year> 1990. </year>
Reference-contexts: We can therefore extend a number other learning results by choosing B to be either binary matroid port functions [HC93] (a generalization of switch configurations <ref> [RS90] </ref>), read-once perceptron networks [HGM91], or branching programs [RW93]. Boolean formulas over the constant fan-in basis can simulate decision trees, using the three input if-then-else function that evaluates either its second or third argument depending on the value of the first argument. <p> The second is a consequence of the work of Hellerstein and Coullard [HC93] on binary matroid ports (a generalization of switch configurations studied by Raghavan and Schach <ref> [RS90] </ref>). The third results is a consequence of the work of Raghavan and Wilkins on -branching programs. Corollary 20 In the PAC model augmented with membership queries there is a polynomial time algorithm for learning read-once formulas over the basis of half-spaces and arbitrary functions of fan-in k or less.
Reference: [RW93] <author> V. Raghavan and D. Wilkins. </author> <booktitle> Learning branching programs with queries In Proceedings of the Sixth Annual ACM Workshop on Computational Learning Theory (COLT 93), </booktitle> <year> 1993. </year>
Reference-contexts: We can therefore extend a number other learning results by choosing B to be either binary matroid port functions [HC93] (a generalization of switch configurations [RS90]), read-once perceptron networks [HGM91], or branching programs <ref> [RW93] </ref>. Boolean formulas over the constant fan-in basis can simulate decision trees, using the three input if-then-else function that evaluates either its second or third argument depending on the value of the first argument. Thus our results generalize earlier work on -formula decision trees [Han90].
References-found: 16

