URL: ftp://ftp.cis.ufl.edu/cis/tech-reports/tr95/tr95-028.ps
Refering-URL: http://www.cis.ufl.edu/tech-reports/tech-reports/tr95-abstracts.html
Root-URL: http://www.cis.ufl.edu
Abstract-found: 0
Intro-found: 1
Reference: [AMC93] <author> E. Anwar, L. Maugis, and S. Chakravarthy. </author> <title> A New Perspective on Rule Support for Object-Oriented Databases. </title> <booktitle> In Proceedings, International Conference on Management of Data, </booktitle> <pages> pages 99-108, </pages> <address> Washington, D.C., </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Section 4 describes the implementation aspects. In section 5 we show several screen dumps produced by the tool at different stages of a sample application execution. Section 6 contains conclusions. 2 Sentinel Architecture In this section, we briefly discuss the overall architecture of Sentinel <ref> [CM94, AMC93, Bad93, CKAK94, CKTB95, Tam94] </ref> and its functional modules. The Sentinel architecture shown in Figure 1 extends the passive Open OODB system [WBT92, OOD93]. The Open OODB toolkit uses Exodus as the storage manager and supports persistence of C++ objects.
Reference: [AWH92] <author> A. Aiken, J. Widom, and J. M. Hellerstein. </author> <title> Behavior of Database Production Rules: Termination, Confluence, and Observable Determinism. </title> <booktitle> In Proceedings, International Conference on Management of Data, </booktitle> <pages> pages 59-68, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: Our next step is to support runtime visualization as well. We also plan on incorporating static analysis tools as part of the visualization toolkit so that runtime execution can be compared with static analysis. Both static analyzers for checking the termination, confluence, and observable determinism characteristics <ref> [AWH92] </ref> and debuggers (or visualization tool) for observing the run time behavior are extremely useful. In addition to rule execution, the composite event detection in various parameter contexts will also require feedback for ascertaining the correctness of parameter context used.
Reference: [Bad93] <author> R. Badani. </author> <title> Nested Transactions for Concurrent Execution of Rules: Design and Implementation. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> Gainesville, FL 32611, </address> <month> October </month> <year> 1993. </year>
Reference-contexts: Unlike an imperative programming environment, rules are triggered in the context of the transaction execution and hence both the order and the rules triggered vary from one transaction/application to another. Use of the nested transaction model for rule execution in Sentinel <ref> [Bad93, Tam94] </ref> provides such a context. Our graphics visualization tool (which uses Motif) displays transaction and rule execution by using directed graphs to indicate both the context (i.e., transactions/composite events) and the execution of (cascading) rules. <p> Section 4 describes the implementation aspects. In section 5 we show several screen dumps produced by the tool at different stages of a sample application execution. Section 6 contains conclusions. 2 Sentinel Architecture In this section, we briefly discuss the overall architecture of Sentinel <ref> [CM94, AMC93, Bad93, CKAK94, CKTB95, Tam94] </ref> and its functional modules. The Sentinel architecture shown in Figure 1 extends the passive Open OODB system [WBT92, OOD93]. The Open OODB toolkit uses Exodus as the storage manager and supports persistence of C++ objects. <p> Also there is a clean separation between event detection and application execution. To support rule execution, we have extended the skeletal transaction manager of the Open OODB to a full-fledged transaction manager supporting the nested transaction model. The design of this transaction manager was described in <ref> [Bad93] </ref> and implemented on a previous version of Open OODB (Zeitgeist). The nested transaction manager has been redesigned and implemented for Sentinel [Tam94]. It is beyond the scope of this paper to describe the implementation of the nested transaction manager.
Reference: [CKAK94] <author> S. Chakravarthy, V. Krishnaprasad, E. Anwar, and S.-K. Kim. </author> <title> Composite Events for Active Databases: Semantics, Contexts, and Detection. </title> <booktitle> In Proceedings, International Conference on Very Large Data Bases, </booktitle> <pages> pages 606-617, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: Section 4 describes the implementation aspects. In section 5 we show several screen dumps produced by the tool at different stages of a sample application execution. Section 6 contains conclusions. 2 Sentinel Architecture In this section, we briefly discuss the overall architecture of Sentinel <ref> [CM94, AMC93, Bad93, CKAK94, CKTB95, Tam94] </ref> and its functional modules. The Sentinel architecture shown in Figure 1 extends the passive Open OODB system [WBT92, OOD93]. The Open OODB toolkit uses Exodus as the storage manager and supports persistence of C++ objects. <p> This allows the specification of class level and instance level definition of rules and events. Additional (Open OODB has its own pre-processor) Sentinel pre-processors were written to preprocess and translate the event and rule definitions into appropriate C++ code for event detection and rule execution. Detection of primitive events <ref> [CKAK94] </ref> was incorporated by adding Notify (a method call to the event detector class) into the wrapper method of the Open OODB. The wrapper method permits us to invoke a notification when an event occurs and conveys it to the composite event detector. <p> The wrapper method permits us to invoke a notification when an event occurs and conveys it to the composite event detector. To detect composite events a composite event detector <ref> [CM94, CKAK94] </ref> has been implemented. Each Open OODB application has a composite event detector. The event detector is implemented as a class and we have a single instance of this class per application. This is shown in Figure 1 as the local composite event detector. <p> The input to the debugger consists of: The class level and the instance level rule and event definitions: This information is supplied by the user in the application program using the event [CM94] and rule definition <ref> [CKAK94] </ref> language. Since we have incorporated the event and rule definition language as extensions of C++ language, we preprocess the definitions. During this process, the preprocessor gathers this static information in the form of a file to the visualization tool.
Reference: [CKTB95] <author> S. Chakravarthy, V. Krishnaprasad, Z. Tamizuddin, and R. Badani. </author> <title> ECA Rule Integration into an OODBMS: </title> <booktitle> Architecture and Implementation. In Proceedings, International Conference on Data Engineering, </booktitle> <month> Feb. </month> <year> 1995. </year>
Reference-contexts: Section 4 describes the implementation aspects. In section 5 we show several screen dumps produced by the tool at different stages of a sample application execution. Section 6 contains conclusions. 2 Sentinel Architecture In this section, we briefly discuss the overall architecture of Sentinel <ref> [CM94, AMC93, Bad93, CKAK94, CKTB95, Tam94] </ref> and its functional modules. The Sentinel architecture shown in Figure 1 extends the passive Open OODB system [WBT92, OOD93]. The Open OODB toolkit uses Exodus as the storage manager and supports persistence of C++ objects.
Reference: [CM94] <author> S. Chakravarthy and D. Mishra. Snoop: </author> <title> An Expressive Event Specification Language for Active Databases. </title> <journal> Data and Knowledge Engineering, </journal> <volume> 14(10) </volume> <pages> 1-26, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Section 4 describes the implementation aspects. In section 5 we show several screen dumps produced by the tool at different stages of a sample application execution. Section 6 contains conclusions. 2 Sentinel Architecture In this section, we briefly discuss the overall architecture of Sentinel <ref> [CM94, AMC93, Bad93, CKAK94, CKTB95, Tam94] </ref> and its functional modules. The Sentinel architecture shown in Figure 1 extends the passive Open OODB system [WBT92, OOD93]. The Open OODB toolkit uses Exodus as the storage manager and supports persistence of C++ objects. <p> The wrapper method permits us to invoke a notification when an event occurs and conveys it to the composite event detector. To detect composite events a composite event detector <ref> [CM94, CKAK94] </ref> has been implemented. Each Open OODB application has a composite event detector. The event detector is implemented as a class and we have a single instance of this class per application. This is shown in Figure 1 as the local composite event detector. <p> The input to the debugger consists of: The class level and the instance level rule and event definitions: This information is supplied by the user in the application program using the event <ref> [CM94] </ref> and rule definition [CKAK94] language. Since we have incorporated the event and rule definition language as extensions of C++ language, we preprocess the definitions. During this process, the preprocessor gathers this static information in the form of a file to the visualization tool.
Reference: [DJP93] <author> O. Diaz, A. Jaime, and N. W. Paton. Dear: </author> <title> A debugger for active rules in an object-oriented context. </title> <booktitle> In Proc. of the 1st International Conference on Rules in Database Systems, </booktitle> <month> September </month> <year> 1993. </year>
Reference-contexts: Due to the event-based nature of active database systems, special attention has to be paid for making the context of rule execution explicit <ref> [DJP93] </ref>. Unlike an imperative programming environment, rules are triggered in the context of the transaction execution and hence both the order and the rules triggered vary from one transaction/application to another. Use of the nested transaction model for rule execution in Sentinel [Bad93, Tam94] provides such a context. <p> The rule manager supports the event-condition-action paradigm as mentioned before. Apart from tracing the execution of rules, the visualization tool also keeps track of the events (both primitive and composite). As mentioned in <ref> [DJP93] </ref>, the tracing of events gives important hints to the user. The event-rule cycle allows the user to not only to know which rules are fired but also which event (s) caused the rule (s) to fire. The occurrence of the events sets the context for the rule execution.
Reference: [OOD93] <author> OODB. </author> <title> Open OODB Toolkit, Release 0.2 (Alpha) Document. </title> <institution> Texas Instruments, Dallas, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: Section 6 contains conclusions. 2 Sentinel Architecture In this section, we briefly discuss the overall architecture of Sentinel [CM94, AMC93, Bad93, CKAK94, CKTB95, Tam94] and its functional modules. The Sentinel architecture shown in Figure 1 extends the passive Open OODB system <ref> [WBT92, OOD93] </ref>. The Open OODB toolkit uses Exodus as the storage manager and supports persistence of C++ objects. Concurrency control and recovery for the top level transactions are provided by the Exodus storage manager.
Reference: [Tam94] <author> Z. Tamizuddin. </author> <title> Rule Execution and Visualization in Active OODBMS. </title> <type> Master's thesis, </type> <institution> Database Systems R&D Center, CIS Department, University of Florida, </institution> <address> Gainesville, FL 32611, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Unlike an imperative programming environment, rules are triggered in the context of the transaction execution and hence both the order and the rules triggered vary from one transaction/application to another. Use of the nested transaction model for rule execution in Sentinel <ref> [Bad93, Tam94] </ref> provides such a context. Our graphics visualization tool (which uses Motif) displays transaction and rule execution by using directed graphs to indicate both the context (i.e., transactions/composite events) and the execution of (cascading) rules. <p> Section 4 describes the implementation aspects. In section 5 we show several screen dumps produced by the tool at different stages of a sample application execution. Section 6 contains conclusions. 2 Sentinel Architecture In this section, we briefly discuss the overall architecture of Sentinel <ref> [CM94, AMC93, Bad93, CKAK94, CKTB95, Tam94] </ref> and its functional modules. The Sentinel architecture shown in Figure 1 extends the passive Open OODB system [WBT92, OOD93]. The Open OODB toolkit uses Exodus as the storage manager and supports persistence of C++ objects. <p> The design of this transaction manager was described in [Bad93] and implemented on a previous version of Open OODB (Zeitgeist). The nested transaction manager has been redesigned and implemented for Sentinel <ref> [Tam94] </ref>. It is beyond the scope of this paper to describe the implementation of the nested transaction manager. As shown in the Sentinel architecture we have designed and implemented a Rule visualization/debugger module to provide feedback about event detection and rule execution.
Reference: [WBT92] <author> D. Wells, J. A. Blakeley, and C. W. Thompson. </author> <title> Architecture of an Open Object-Oriented Database Management System. </title> <journal> IEEE Computer, </journal> <volume> 25(10) </volume> <pages> 74-81, </pages> <month> October </month> <year> 1992. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: Section 6 contains conclusions. 2 Sentinel Architecture In this section, we briefly discuss the overall architecture of Sentinel [CM94, AMC93, Bad93, CKAK94, CKTB95, Tam94] and its functional modules. The Sentinel architecture shown in Figure 1 extends the passive Open OODB system <ref> [WBT92, OOD93] </ref>. The Open OODB toolkit uses Exodus as the storage manager and supports persistence of C++ objects. Concurrency control and recovery for the top level transactions are provided by the Exodus storage manager.
References-found: 10

