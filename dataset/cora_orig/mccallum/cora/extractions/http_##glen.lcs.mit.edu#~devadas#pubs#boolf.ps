URL: http://glen.lcs.mit.edu/~devadas/pubs/boolf.ps
Refering-URL: http://glen.lcs.mit.edu/~devadas/pubs/logic.html
Root-URL: 
Title: Boolean Factorization Using Multiple-Valued Minimization  
Author: Stan Liao, Srinivas Devadas Abhijit Ghosh 
Address: Cambridge, MA  Sunnyvale, CA  
Affiliation: Department of EECS MIT,  Mitsubishi Electric Research Laboratories  
Abstract: We show that the problem of factoring a sum-of-products representation of a logic function can be transformed into one of multiple-valued prime generation followed by branch-and-bound covering. We give a factorization method that generates potential Boolean factors by generating the primes of a multiple-valued function with an associated don't-care set. A covering problem is solved wherein a set of primes with minimal cost is selected to obtain a Boolean factorization. This method can exploit Boolean identities in factorization such as a a = 0 and a a = a. Common factors across a set of Boolean functions can be identified by using multiple-output prime generation and covering. We show how all the kernels of an expression can be generated by generating the primes of a multiple-valued function. A covering step can be used to arrive at an algebraic factorization. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. Bartlett, R. K. Brayton, G. D. Hachtel, R. M. Ja coby, C. R. Morrison, R. L. Rudell, A. Sangiovanni-Vincentelli, and A. R. Wang. </author> <title> Multi-level Logic Minimization Using Implicit Don't Cares. </title> <booktitle> In IEEE Transactions on Computer-Aided Design, </booktitle> <pages> pages 723-740, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: However, they are CPU time efficient and can be repeatedly used on large circuits. To augment the capabilities of algebraic methods, don't-care-based optimization methods have been proposed. Observability and satisfiability don't-care sets can be defined for each node in a Boolean network <ref> [1] </ref>. Two-level logic minimization of the function at any node with an appropriate don't-care set can result in additional simplifications of the network that are not possible using purely algebraic techniques [6]. Boolean resubstitution methods can also be used to augment algebraic optimization.
Reference: [2] <author> R. Brayton, R. Rudell, A. Sangiovanni-Vincentelli, and A. Wan g. </author> <title> MIS: A Multiple-Level Logic Optimization System. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> CAD-6(6):1062-1081, </volume> <month> November </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Multilevel logic synthesis has been an active research area in the past two decades [4]. Several programs exist today (e.g. <ref> [2] </ref>, [6]) that are capable of optimizing large multilevel circuits for area, delay or testability. The optimization methods used most often in existing optimization systems are algebraic in nature. <p> This procedure generates co 0100 0011 0010 1010 1010 1000 1010 1000 0110 0010 0110 0010 kernel/kernel pairs and then performs covering to determine the factorization. All possible co-kernel/kernel pairs for a given expression can be generated using the methods proposed in <ref> [2] </ref>. Here, we construct a multiple-valued function such that the primes of the function correspond to kernels of the given expression. Given any matrix, a multiple-valued function can be constructed so that its prime implicants correspond to the prime rectangles [4] of the matrix. <p> The functions were recursively factored using the methods described. We compare this method to the algebraic factorization methods implemented in the misII program <ref> [2] </ref>. We emphasize that we are comparing the two different factorization methods in isolation from other multilevel minimization techniques. In Table 1, we have the number of inputs (inp), outputs (out) and the literal counts of some arithmetic circuits when each output is represented in single-output minimized sum-of-products form (SOP).
Reference: [3] <author> R. K. Brayton, G. D. Hachtel, C. McMullen, and A. Sangiovanni-Vincentelli. </author> <title> Logic Minimization Algorithms for VLSI Synthesis. </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1984. </year>
Reference-contexts: A covering step can be used to algebraically factor the function given its kernels. 2 Preliminaries For basic terminology pertaining to Boolean functions, the reader is referred to <ref> [3] </ref>. We will give the terminology for multiple-valued functions here. A multiple-valued variable m p can take on values 0; 1; : : : ; p 1. In particular, a binary-valued variable m 2 can take on values of 0 or 1.
Reference: [4] <author> R. K. Brayton, G. D. Hachtel, and A. L. Sangiovanni-Vincentelli. </author> <title> Multilevel Logic Synthesis. </title> <booktitle> In Proceedings of the IEEE, </booktitle> <pages> pages 264-300, </pages> <month> Febru-ary </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Multilevel logic synthesis has been an active research area in the past two decades <ref> [4] </ref>. Several programs exist today (e.g. [2], [6]) that are capable of optimizing large multilevel circuits for area, delay or testability. The optimization methods used most often in existing optimization systems are algebraic in nature. <p> Here, we construct a multiple-valued function such that the primes of the function correspond to kernels of the given expression. Given any matrix, a multiple-valued function can be constructed so that its prime implicants correspond to the prime rectangles <ref> [4] </ref> of the matrix. This formulation allows for the use symbolic prime generation methods for multiple-valued functions [7]. We construct a multiple-valued function similar to the cube-literal matrix in [4]. <p> Given any matrix, a multiple-valued function can be constructed so that its prime implicants correspond to the prime rectangles <ref> [4] </ref> of the matrix. This formulation allows for the use symbolic prime generation methods for multiple-valued functions [7]. We construct a multiple-valued function similar to the cube-literal matrix in [4]. This function has two multiple-valued variables, where the first has a number of values equaling the number of distinct literals in the original expression, and the second has a number of values given by the number of cubes in the expression.
Reference: [5] <author> S. Devadas, A. R. Wang, A. R. Newton, and A. Sangiovanni-Vincentelli. </author> <title> Boolean Decomposition in Multi-Level Logic Optimization. </title> <journal> In Journal of Solid State Circuits, </journal> <volume> volume 24, </volume> <pages> pages 399-408, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: While Boolean resubstitution is a well-defined operation, finding appropriate g functions that will result in a minimized f 0 with a significantly smaller cost than f is a much harder problem. An effort to identify good Boolean factors of a logic expression using multiple-valued minimization was presented in <ref> [5] </ref>. As we will show in Section 3, this method is incapable of finding certain useful Boolean factors of a logic expression because it does not exploit Boolean identities such as a a = 0. <p> Since A = a and B = b and C = c, we can write f = (a + b + c) (a + b + c). The Boolean factorization of Figure 4 cannot be discovered by the method of <ref> [5] </ref> because inputs are not duplicated and the don't-care set corresponding to conditions like a A are not used in that method. We will now give another example, this time of an algebraic factorization of a function.
Reference: [6] <author> D. Bostick et. al. </author> <title> The Boulder Optimal Logic De sign System. </title> <booktitle> In Proceedings of the Int'l Conference on Computer-Aided Design, </booktitle> <pages> pages 62-65, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: 1 Introduction Multilevel logic synthesis has been an active research area in the past two decades [4]. Several programs exist today (e.g. [2], <ref> [6] </ref>) that are capable of optimizing large multilevel circuits for area, delay or testability. The optimization methods used most often in existing optimization systems are algebraic in nature. <p> Observability and satisfiability don't-care sets can be defined for each node in a Boolean network [1]. Two-level logic minimization of the function at any node with an appropriate don't-care set can result in additional simplifications of the network that are not possible using purely algebraic techniques <ref> [6] </ref>. Boolean resubstitution methods can also be used to augment algebraic optimization.
Reference: [7] <author> B. Lin, O. Coudert, and J-C. Madre. </author> <title> Symbolic Prime Generation for Multiple-Valued Functions. </title> <booktitle> In Proceedings of the 29 th Design Automation Conference, </booktitle> <pages> pages 40-44, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Given any matrix, a multiple-valued function can be constructed so that its prime implicants correspond to the prime rectangles [4] of the matrix. This formulation allows for the use symbolic prime generation methods for multiple-valued functions <ref> [7] </ref>. We construct a multiple-valued function similar to the cube-literal matrix in [4].
Reference: [8] <author> R. Rudell and A. Sangiovanni-Vincentelli. </author> <title> Multiple Valued Minimization for PLA Optimization. </title> <booktitle> In IEEE Transactions on Computer-Aided Design, </booktitle> <pages> pages 727-751, </pages> <month> September </month> <year> 1987. </year>
Reference-contexts: cost of the cover is: cost (F m ) = M + B (4) The number of literals in the factorization of Eqn. 1 is given by Eqn. 4. 4.3 Prime Generation and Covering The prime generation and covering steps we use are similar to the corresponding steps in espresso-mv <ref> [8] </ref>. The modifications required for our problem are explained below. 1. Only a subset of primes of the multiple-valued function are generated. In particular, only those primes whose binary-valued parts strictly contain the prime implicants of the original binary-valued function are generated. <p> In our example we will only generate the last seven primes of Figure 3. Primes whose binary-valued parts are the universe are discarded. This selective generation can be done without generating the entire set of primes <ref> [8] </ref>. 2. The cost of a partial selection of primes is computed using Eqn. 4. The problem with only using prime im-plicants, and checking for strict equality of multiple-valued literals in evaluating Eqn. 4 was illustrated with an example in Section 3. <p> Costs may have to be recomputed when the ranges are altered. 3. Given a partial selection of primes, a lower bound on the required number of primes to cover the uncovered minterms can be found using the maximal independent set heuristic <ref> [8] </ref>. We can also use the maximal independent set to obtain a lower bound on the number of literals we will add to the current cost in the process of obtaining a complete cover.
References-found: 8

