URL: file://ftp.cs.ucla.edu/pub/ficus/reiher/tw.papers/tw_determ.ps.gz
Refering-URL: http://ficus-www.cs.ucla.edu/project-members/reiher/available_papers.html
Root-URL: http://www.cs.ucla.edu
Title: Providing Determinism In the Time Warp Operating System Costs, Benefits, and Implications  
Author: Peter L. Reiher Frederick Wieland Philip Hontalas 
Address: 4800 Oak Grove Drive Pasadena, CA 91109  
Affiliation: Jet Propulsion Laboratory  
Abstract: The Time Warp Operating System runs discrete event simulations on parallel hardware. One requirement of the system is that simulations produce deterministic results identical to sequential runs of the same programs. Providing this level of determinism on parallel hardware has required care in designing the system and discipline by applications writers, but also has benefits. It has assisted in detecting a number of errors in both the system and its applications, and allowed the use of a special debugging tool that has proven valuable in dealing with such errors. This paper discusses some of the reasons for providing determinism, the problems of doing so, and the benefits of determinism. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Jefferson, B. Beckman, F. Wieland, L. Blume, M. Di Loreto, P. Hontalas, P. Laroche, K. Sturdevant, J. Tupman, V. Warren, J. Wedel, H. Younger, and S. Bellenot, </author> <title> Distributed Simulation and the Time Warp Operating System, </title> <journal> ACM Operating Systems Review , vol. </journal> <volume> 21, no. 4, </volume> <year> 1987. </year>
Reference-contexts: The Time Warp Operating System (TWOS) is a special purpose operating system that runs discrete event simulations on parallel hardware, with the central goal of speedup <ref> [1] </ref>. It uses the theory of virtual time [2] to provide synchronization without compromising speed by blocking processes.
Reference: [2] <author> D. Jefferson,, </author> <title> Virtual Time, </title> <journal> ACM Transactions on Programming Languages and Systems , vol. </journal> <volume> 7, no. 3, </volume> <year> 1985. </year>
Reference-contexts: The Time Warp Operating System (TWOS) is a special purpose operating system that runs discrete event simulations on parallel hardware, with the central goal of speedup [1]. It uses the theory of virtual time <ref> [2] </ref> to provide synchronization without compromising speed by blocking processes. TWOS has had great success in speeding up discrete event simulations by the virtual time method [3], [4], while at the same time guaranteeing the same results as if the simulation had been run sequentially.
Reference: [3] <author> F. Wieland, L. Hawley, A. Feinberg, M. Di Loreto, L. Blume, J. Ruffles, P. Reiher, B. Beckman, P. Hontalas, S. Bellenot, </author> <title> The Performance of a Distributed Combat Simulation With the Time Warp Operating System, </title> <journal> Concurrency: Practice and Experience , vol. </journal> <volume> 1, no. 1, </volume> <editor> p. </editor> <volume> 35, </volume> <year> 1989. </year>
Reference-contexts: It uses the theory of virtual time [2] to provide synchronization without compromising speed by blocking processes. TWOS has had great success in speeding up discrete event simulations by the virtual time method <ref> [3] </ref>, [4], while at the same time guaranteeing the same results as if the simulation had been run sequentially. The virtual machine provided by TWOS gives a high degree of determinism. <p> TWOS has achieved speedups in excess of 40 times the speed of the same simulation performed by TWSIM [4]. TWOS is being used to develop real simulations, and has been tested with a variety of simulations, including military simulations <ref> [3] </ref>, physics simulations [4], simulations of computer networks [6], and biological simulations [7]. Determinism at the User Level TWOS users want their parallel machine to behave exactly like a single sequential machine, but faster.
Reference: [4] <author> P. Hontalas and B. Beckman, </author> <title> Performance of the Colliding Pucks Simulation On the Time Warp Operating System (Part 2: A Detailed Analysis), </title> <booktitle> In Proceedings of the 1989 Summer Computer Simulation Conference , Clema, </booktitle> <editor> J., Ed., </editor> <booktitle> Society For Computer Simulation, </booktitle> <address> San Diego, CA, p. 91, </address> <year> 1989. </year>
Reference-contexts: It uses the theory of virtual time [2] to provide synchronization without compromising speed by blocking processes. TWOS has had great success in speeding up discrete event simulations by the virtual time method [3], <ref> [4] </ref>, while at the same time guaranteeing the same results as if the simulation had been run sequentially. The virtual machine provided by TWOS gives a high degree of determinism. <p> Experience with TWOS has shown that optimistic execution can provide excellent speedup of discrete event simulation, despite fairly frequent rollbacks of work done improperly. TWOS has achieved speedups in excess of 40 times the speed of the same simulation performed by TWSIM <ref> [4] </ref>. TWOS is being used to develop real simulations, and has been tested with a variety of simulations, including military simulations [3], physics simulations [4], simulations of computer networks [6], and biological simulations [7]. <p> TWOS has achieved speedups in excess of 40 times the speed of the same simulation performed by TWSIM <ref> [4] </ref>. TWOS is being used to develop real simulations, and has been tested with a variety of simulations, including military simulations [3], physics simulations [4], simulations of computer networks [6], and biological simulations [7]. Determinism at the User Level TWOS users want their parallel machine to behave exactly like a single sequential machine, but faster.
Reference: [5] <author> Reiher, P. and Jefferson, D. </author> <year> (1990), </year> <title> Virtual Time Based Dynamic Load Management In the Time Warp Operating System, </title> <journal> Transactions of the Society for Computer Simulation, vol.7, </journal> <volume> no. 2, </volume> <month> July </month> <year> 1990. </year>
Reference-contexts: The current version of TWOS even guarantees determinism despite dynamically migrating processes from processor to processor during execution <ref> [5] </ref>. Performing actions in the proper order is an absolute requirement for most discrete event simulations. The correct ordering of a simulations events is completely defined by the simulation times at which events occur. An event with an earlier simulation time may affect an event with a later simulation time.
Reference: [6] <author> M. Presley, M. Ebling, F. Wieland, D. Jefferson, </author> <title> Benchmarking the Time Warp Operating System With a Computer Network Simulation, </title> <booktitle> In Proceedings of the SCS Multiconference on Distributed Simulation , Unger, </booktitle> <editor> B. and Fujimoto, R., Eds., </editor> <booktitle> Society For Computer Simulation, </booktitle> <address> San Diego, CA, p. 8, </address> <year> 1989. </year>
Reference-contexts: TWOS has achieved speedups in excess of 40 times the speed of the same simulation performed by TWSIM [4]. TWOS is being used to develop real simulations, and has been tested with a variety of simulations, including military simulations [3], physics simulations [4], simulations of computer networks <ref> [6] </ref>, and biological simulations [7]. Determinism at the User Level TWOS users want their parallel machine to behave exactly like a single sequential machine, but faster.
Reference: [7] <author> M. Ebling, M. Di Loreto, M. Presley, F. Wieland, and D. Jefferson, </author> <title> An Ant Foraging Model Implemented On the Time Warp Operating System, </title> <booktitle> In Proceedings of the SCS Multiconference on Distributed Simulation , Unger, </booktitle> <editor> B. and Fujimoto, R., Eds., </editor> <booktitle> Society For Computer Simulation, </booktitle> <address> San Diego, CA, p. 21, </address> <year> 1989. </year>
Reference-contexts: TWOS is being used to develop real simulations, and has been tested with a variety of simulations, including military simulations [3], physics simulations [4], simulations of computer networks [6], and biological simulations <ref> [7] </ref>. Determinism at the User Level TWOS users want their parallel machine to behave exactly like a single sequential machine, but faster.
Reference: [8] <author> K. Chandy and J. Misra, </author> <title> Asynchronous Distributed Simulation Via a Sequence of Parallel Computations, </title> <journal> Communications of the ACM , vol. </journal> <volume> 24, no. 4, </volume> <editor> p. </editor> <volume> 198, </volume> <month> Apr. </month> <year> 1981. </year> . 
Reference-contexts: Two methods are known for handling the problem. One is to use a protocol to ensure that the earlier message is handled first, regardless of which message physically arrives first <ref> [8] </ref>. This method performs poorly for many types of simulations. The second method is to handle whichever message comes in first immediately, and undo the results if the ordering was incorrect.
References-found: 8

