URL: http://vlsicad.cs.ucla.edu/~abk/papers/conference/c54.ps
Refering-URL: http://vlsicad.cs.ucla.edu/~abk/publications.html
Root-URL: http://www.cs.ucla.edu
Phone: 2  
Title: A HYBRID MULTILEVEL/GENETIC APPROACH FOR CIRCUIT PARTITIONING  
Author: Charles J. Alpert Lars W. Hagen Andrew B. Kahng 
Address: Los Angeles, CA 90095-1596  San Jose, CA 94135  
Affiliation: 1 UCLA Computer Science Department,  Cadence Design Systems,  
Abstract: We present a genetic circuit partitioning algorithm that integrates the Metis graph partitioning package [15] originally designed for sparse matrix computations. Metis is an extremely fast iterative partitioner that uses multilevel clustering. We have adapted Metis to partition circuit netlists, and have applied a genetic technique that uses previous Metis solutions to help construct new Metis solutions. Our hybrid technique produces better results than Metis alone, and also produces bipartitionings that are competitive with previous methods [20] [18] [6] while using less CPU time. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C. J. Alpert and A. B. Kahng, </author> <title> "A General Framework for Vertex Orderings, with Applications to Netlist Clustering", </title> <note> to appear in IEEE Trans. on VLSI. </note>
Reference-contexts: Since there are many implementations of FM (some of which are better than others), we compare to the best FM results found in the literature. Test Minimum cut (100 runs) CPU (s) Case Metis FM FM 2-FM Metis FM [6] [9] <ref> [1] </ref> [9] [6] balu 34 32 23 21 bm1 53 55 52 22 24 primary1 55 57 56 53 22 24 test04 53 86 56 37 41 test03 61 72 60 39 56 test02 99 115 97 43 46 test06 94 71 68 53 50 struct 36 45 36 43 41 <p> Finally, we compare to various two-phase FM strategies. In the fifth column, we give the best two-phase FM results observed for various clustering algorithms as reported in <ref> [1] </ref> and [9]. Metis does not appear to be faster than FM for circuits with less than two thousand modules, but for larger circuits with five to twelve thousand modules, Metis is 2-3 times faster.
Reference: [2] <author> C. J. Alpert and A. B. Kahng, </author> <title> "Recent Directions in Netlist Partitioning: A Survey", Integration, </title> <journal> the VLSI Journal, </journal> <pages> 19(1-2), pp. 1-81, </pages> <year> 1995. </year>
Reference-contexts: FM is then run a second time on H 0 (V 0 ; E 0 ) using P 0 as the initial solution. Many clustering algorithms for two-phase FM have appeared in the literature (see <ref> [2] </ref> for an overview of clustering methods and for a general netlist partitioning survey).
Reference: [3] <author> C. J. Alpert and S.-Z. Yao, </author> <title> "Spectral Partitioning: The More Eigenvectors, the Better," </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1995, </year> <pages> pp. 195-200. </pages>

Reference: [5] <author> T. Bui, C. Heigham, C. Jones, and T. Leighton, </author> <title> "Improving the Performance of the Kernighan-Lin and Simulated Annealing Graph Bisection Algorithms", </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 775-778, </pages> <year> 1989. </year>
Reference-contexts: Many clustering algorithms for two-phase FM have appeared in the literature (see [2] for an overview of clustering methods and for a general netlist partitioning survey). Bui et al. <ref> [5] </ref> find a random maximal matching in the netlist and compact the matched pairs of modules into n 2 clusters; the matching can then be repeated to generate clusterings of size n 4 , n 8 , etc. <p> To cluster, Karypis and Kumar suggest Heavy-Edge Matching (HEM), which is a variant of the random matching algorithm of <ref> [5] </ref>. A matching M of H i is a subset of E i such that no module is incident to more than one edge in M .
Reference: [6] <author> S. Dutt and W. Deng, </author> <title> "A Probability-Based Approach to VLSI Circuit Partitioning", </title> <booktitle> to appear in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1996. </year>
Reference-contexts: However, instead of simply calling Metis 100 times, we propose to integrate Metis into a genetic algorithm; our experiments show that this approach produces better average and minimum cuts than Metis alone. Overall, our approach generates bipartitioning solutions that are competitive with the recent approaches of [20] [18] <ref> [6] </ref> while requiring much less CPU time. The rest of our paper is as follows. Section 2 reviews the Metis partitioning package and presents our modifications for circuit netlists. Section 3 presents our Metis-based ge netic algorithm. <p> Since there are many implementations of FM (some of which are better than others), we compare to the best FM results found in the literature. Test Minimum cut (100 runs) CPU (s) Case Metis FM FM 2-FM Metis FM <ref> [6] </ref> [9] [1] [9] [6] balu 34 32 23 21 bm1 53 55 52 22 24 primary1 55 57 56 53 22 24 test04 53 86 56 37 41 test03 61 72 60 39 56 test02 99 115 97 43 46 test06 94 71 68 53 50 struct 36 45 36 <p> Since there are many implementations of FM (some of which are better than others), we compare to the best FM results found in the literature. Test Minimum cut (100 runs) CPU (s) Case Metis FM FM 2-FM Metis FM <ref> [6] </ref> [9] [1] [9] [6] balu 34 32 23 21 bm1 53 55 52 22 24 primary1 55 57 56 53 22 24 test04 53 86 56 37 41 test03 61 72 60 39 56 test02 99 115 97 43 46 test06 94 71 68 53 50 struct 36 45 36 43 41 46 test05 <p> Comparison of Metis with FM. Dutt and Deng <ref> [6] </ref> have implemented very efficient FM code; their exact bisection results for the best of 100 FM runs are given in the third column of Table 3 and the corresponding Sparc 5 run times are given in the last column. <p> Genetic Metis vs. Other Approaches Finally, we compare GMetis to other recent partitioning works in the literature, namely PROP <ref> [6] </ref>, Paraboli [20], and GFM [19], the results of which are quoted from the original sources and presented in Table 5. All these works use r = 0:1, i.e., each cluster contains between 45% and 55% of the total number of modules.
Reference: [7] <author> S. Dutt and W. Deng, </author> <title> "VLSI Circuit Partitioning by Cluster-Removal Using Iterative Improvement Techniques", </title> <type> Technical Report, </type> <institution> Department of Electrical Engineering, University of Minnesota, </institution> <month> Nov. </month> <year> 1995. </year>
Reference-contexts: Hagen, Huang, and Kahng [9] have shown that a "last-in-first-out" scheme based on the order that modules are moved in FM is significantly better than random or "first-in-first-out" tie-breaking schemes. More recently, Dutt and Deng <ref> [7] </ref> independently reached the same conclusion. Finally, Saab [21] has also exploited the order in which modules are moved to produce an improved FM variant. A second significant improvement to FM integrates clustering into a "two-phase" methodology.
Reference: [8] <author> C. M. Fiduccia and R. M. Mattheyses, </author> <title> "A Linear Time Heuristic for Improving Network Partitions", </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 175-181, </pages> <year> 1982. </year>
Reference-contexts: tolerance r, the min-cut bipartitioning problem seeks a solution P = fX; Y g that minimizes cut (P ) such that n (1r) 2 jXj; jY j n (1+r) The standard bipartitioning approach is iterative improvement based on the Kernighan-Lin (KL) [16] algorithm, which was later improved by Fiduccia-Mattheyses (FM) <ref> [8] </ref>. The FM algorithm begins with some initial solution fX; Y g and proceeds in a series of passes. During a pass, modules are successively moved between X and Y until each module has been moved exactly once.
Reference: [9] <author> L. W. Hagen, D. J.-H. Huang, and A. B. Kahng, </author> <title> "On Implementation Choices for Iterative Improvement Partitioning Algorithms", </title> <note> to appear in IEEE Trans. Computer-Aided Design (see also Proc. Euro-pean Design Automation Conf., </note> <month> Sept. </month> <year> 1995, </year> <pages> pp. 144-149). </pages>
Reference-contexts: One significant improvement to FM addresses the tie-breaking used to choose among alternate moves that have the same gain. Krishnamurthy [17] proposed a looka-head tie-breaking mechanism, and Sanchis [22] extended this approach to multi-way partitioning. Hagen, Huang, and Kahng <ref> [9] </ref> have shown that a "last-in-first-out" scheme based on the order that modules are moved in FM is significantly better than random or "first-in-first-out" tie-breaking schemes. More recently, Dutt and Deng [7] independently reached the same conclusion. <p> Since there are many implementations of FM (some of which are better than others), we compare to the best FM results found in the literature. Test Minimum cut (100 runs) CPU (s) Case Metis FM FM 2-FM Metis FM [6] <ref> [9] </ref> [1] [9] [6] balu 34 32 23 21 bm1 53 55 52 22 24 primary1 55 57 56 53 22 24 test04 53 86 56 37 41 test03 61 72 60 39 56 test02 99 115 97 43 46 test06 94 71 68 53 50 struct 36 45 36 43 <p> Since there are many implementations of FM (some of which are better than others), we compare to the best FM results found in the literature. Test Minimum cut (100 runs) CPU (s) Case Metis FM FM 2-FM Metis FM [6] <ref> [9] </ref> [1] [9] [6] balu 34 32 23 21 bm1 53 55 52 22 24 primary1 55 57 56 53 22 24 test04 53 86 56 37 41 test03 61 72 60 39 56 test02 99 115 97 43 46 test06 94 71 68 53 50 struct 36 45 36 43 41 46 <p> Dutt and Deng [6] have implemented very efficient FM code; their exact bisection results for the best of 100 FM runs are given in the third column of Table 3 and the corresponding Sparc 5 run times are given in the last column. Hagen et al. <ref> [9] </ref> have run FM with an efficient LIFO tie breaking strategy and a new lookahead function that outperforms [17]; their bisection results are reported in the fourth column. Finally, we compare to various two-phase FM strategies. <p> Finally, we compare to various two-phase FM strategies. In the fifth column, we give the best two-phase FM results observed for various clustering algorithms as reported in [1] and <ref> [9] </ref>. Metis does not appear to be faster than FM for circuits with less than two thousand modules, but for larger circuits with five to twelve thousand modules, Metis is 2-3 times faster.
Reference: [10] <author> S. Hauck and G. Borriello, </author> <title> "An Evaluation of Biparti-tioning Techniques", </title> <booktitle> Proc. Chapel Hill Conf. on Adv. Research in VLSI, </booktitle> <year> 1995. </year>
Reference-contexts: This uncoarsening process continues until a partitioning of the original netlist H 0 is derived. Multilevel clustering methods have been virtually unexplored in the physical design literature; the work of Hauck and Borriello <ref> [10] </ref> is the notable exception. [10] performed a detailed study of multilevel partitioning for FPGAs and found that simple connectivity-based clustering combined with a KL and FM multilevel approach produced excellent solutions. <p> This uncoarsening process continues until a partitioning of the original netlist H 0 is derived. Multilevel clustering methods have been virtually unexplored in the physical design literature; the work of Hauck and Borriello <ref> [10] </ref> is the notable exception. [10] performed a detailed study of multilevel partitioning for FPGAs and found that simple connectivity-based clustering combined with a KL and FM multilevel approach produced excellent solutions.
Reference: [11] <author> B. Hendrickson and R. Leland, </author> <title> "A Multilevel Algorithm for Partitioning Graphs", </title> <type> Technical Report SAND93-1301, </type> <institution> Sandia National Laboratories, </institution> <year> 1993. </year>
Reference-contexts: However, multilevel partitioning has been well-studied in the scientific computing community, e.g., Hen-drickson and Leland <ref> [11] </ref> [12] and Karypis and Kumar [13] [14] [15] have respectively developed the Chaco and Metis partitioning packages.
Reference: [12] <author> B. Hendrickson and R. Leland, </author> <title> "The Chaco User's Guide", </title> <type> Technical Report SAND93-2339, </type> <institution> Sandia National Laboratories, </institution> <year> 1993. </year>
Reference-contexts: However, multilevel partitioning has been well-studied in the scientific computing community, e.g., Hen-drickson and Leland [11] <ref> [12] </ref> and Karypis and Kumar [13] [14] [15] have respectively developed the Chaco and Metis partitioning packages.
Reference: [13] <author> G. Karypis and V. Kumar, </author> <title> "A Fast and High Quality Multilevel Scheme for Partitioning Irregular Graphs", </title> <type> Technical Report #95-035, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1995. </year>
Reference-contexts: However, multilevel partitioning has been well-studied in the scientific computing community, e.g., Hen-drickson and Leland [11] [12] and Karypis and Kumar <ref> [13] </ref> [14] [15] have respectively developed the Chaco and Metis partitioning packages. <p> For example, one can choose among eight different matching-based clustering schemes including random, heavy-edge, light-edge, and heavy-clique matching. The methodology we use follows the general recommendations of <ref> [13] </ref>, even though their algorithm choices are based on extensive empirical studies of finite-element graphs and not circuit netlists. Before multilevel partitioning is performed, the adjacency lists for each module are randomly permuted. <p> Despite its simplicity, the GGGP heuristic proved at least as effective as other heuristics for partitioning finite element graphs <ref> [13] </ref>. The refinement steps use the Boundary Kernighan-Lin Greedy Refinement (BGKLR) scheme. Despite its name, the heuristic actually uses the FM single-module neighborhood structure.
Reference: [14] <author> G. Karypis and V. Kumar, </author> <title> "Multilevel k-Way Partitioning Scheme for Irregular Graphs", </title> <type> Technical Report #95-035, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <year> 1995. </year>
Reference-contexts: However, multilevel partitioning has been well-studied in the scientific computing community, e.g., Hen-drickson and Leland [11] [12] and Karypis and Kumar [13] <ref> [14] </ref> [15] have respectively developed the Chaco and Metis partitioning packages.
Reference: [15] <author> G. Karypis and V. Kumar, </author> <title> "Unstructured Graph Partitioning and Sparse Matrix Ordering", </title> <type> Technical Report, </type> <institution> Department of Computer Science, University of Minnesota, </institution> <note> 1995 (see http://www.cs.umn.edu/~kumar for postscript and code). </note>
Reference-contexts: The "two-phase" approach can be extended to include more phases; such a multilevel approach is illustrated in Figure 1 (following <ref> [15] </ref>). In a multilevel algorithm, a clustering of the initial netlist H 0 induces the coarser netlist H 1 , then a clustering of H 1 induces H 2 , etc. until the coarsest netlist H m is constructed (m = 4 in the Figure). <p> However, multilevel partitioning has been well-studied in the scientific computing community, e.g., Hen-drickson and Leland [11] [12] and Karypis and Kumar [13] [14] <ref> [15] </ref> have respectively developed the Chaco and Metis partitioning packages. The Metis package of [15] has produced very good partitioning results for finite-element graphs and is extremely efficient, requiring only 2.8 seconds of CPU time on a Sun Sparc 5 to bipartition a graph with more than 15,000 vertices and 91,000 <p> However, multilevel partitioning has been well-studied in the scientific computing community, e.g., Hen-drickson and Leland [11] [12] and Karypis and Kumar [13] [14] <ref> [15] </ref> have respectively developed the Chaco and Metis partitioning packages. The Metis package of [15] has produced very good partitioning results for finite-element graphs and is extremely efficient, requiring only 2.8 seconds of CPU time on a Sun Sparc 5 to bipartition a graph with more than 15,000 vertices and 91,000 edges. <p> This greedy algorithm by no means guarantees a maximum sum of edge weights in M , but it runs in O (jE i j) time. Following <ref> [15] </ref>, our methodology iteratively coarsens until jV m j 100. An initial bipartitioning for H m is formed by the Greedy Graph Growing Partitioning (GGGP) algorithm. Initially, one "fixed" module v is in its own cluster X m and the rest of the modules are in Y m . <p> For golem3, we only ran 2 generations since the results do not improve with subsequent generations; the solution with cost 2144 was achieved after only 210 seconds of CPU time. 5. CONCLUSIONS This work integrates the Metis multilevel partitioning algorithm of <ref> [15] </ref> into a genetic algorithm. We showed (i) Metis outperforms previous FM-based approaches, (ii) GMetis improves upon Metis alone for large benchmarks, and (iii) GMetis is competitive with previous approaches while using less CPU time.
Reference: [16] <author> B. W. Kernighan and S. Lin, </author> <title> "An Efficient Heuristic Procedure for Partitioning Graphs", </title> <journal> Bell Systems Tech. J., </journal> <volume> 49(2), </volume> <pages> pp. 291-307, </pages> <year> 1970. </year>
Reference-contexts: Given a balance tolerance r, the min-cut bipartitioning problem seeks a solution P = fX; Y g that minimizes cut (P ) such that n (1r) 2 jXj; jY j n (1+r) The standard bipartitioning approach is iterative improvement based on the Kernighan-Lin (KL) <ref> [16] </ref> algorithm, which was later improved by Fiduccia-Mattheyses (FM) [8]. The FM algorithm begins with some initial solution fX; Y g and proceeds in a series of passes. During a pass, modules are successively moved between X and Y until each module has been moved exactly once.
Reference: [17] <author> B. Krishnamurthy, </author> <title> "An Improved Min-Cut Algorithm for Partitioning VLSI Networks", </title> <journal> IEEE Trans. Computers, </journal> <volume> 33(5), </volume> <pages> pp. 438-446, </pages> <year> 1984. </year>
Reference-contexts: FM has been widely adopted due to its short runtimes and ease of implementation. One significant improvement to FM addresses the tie-breaking used to choose among alternate moves that have the same gain. Krishnamurthy <ref> [17] </ref> proposed a looka-head tie-breaking mechanism, and Sanchis [22] extended this approach to multi-way partitioning. Hagen, Huang, and Kahng [9] have shown that a "last-in-first-out" scheme based on the order that modules are moved in FM is significantly better than random or "first-in-first-out" tie-breaking schemes. <p> Hagen et al. [9] have run FM with an efficient LIFO tie breaking strategy and a new lookahead function that outperforms <ref> [17] </ref>; their bisection results are reported in the fourth column. Finally, we compare to various two-phase FM strategies. In the fifth column, we give the best two-phase FM results observed for various clustering algorithms as reported in [1] and [9].
Reference: [18] <author> J. Li, J. Lillis, and C.-K. Cheng, </author> <title> "Linear Decomposition Algorithm for VLSI Design Applications", </title> <booktitle> Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 223-228, </pages> <year> 1995. </year>
Reference-contexts: However, instead of simply calling Metis 100 times, we propose to integrate Metis into a genetic algorithm; our experiments show that this approach produces better average and minimum cuts than Metis alone. Overall, our approach generates bipartitioning solutions that are competitive with the recent approaches of [20] <ref> [18] </ref> [6] while requiring much less CPU time. The rest of our paper is as follows. Section 2 reviews the Metis partitioning package and presents our modifications for circuit netlists. Section 3 presents our Metis-based ge netic algorithm.
Reference: [19] <author> L.-T. Liu, M.-T. Kuo, S.-C. Huang, and C.-K. Cheng, </author> <title> "A Gradient Method on the Initial Partition of Fiduccia-Mattheyses Algorithm", </title> <booktitle> Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <pages> pp. 229-234, </pages> <year> 1995. </year>
Reference-contexts: Genetic Metis vs. Other Approaches Finally, we compare GMetis to other recent partitioning works in the literature, namely PROP [6], Paraboli [20], and GFM <ref> [19] </ref>, the results of which are quoted from the original sources and presented in Table 5. All these works use r = 0:1, i.e., each cluster contains between 45% and 55% of the total number of modules.
Reference: [20] <author> B. M. Riess, K. Doll, and F. M. Johannes, </author> <title> "Partitioning Very Large Circuits Using Analytical Placement Techniques", </title> <booktitle> Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> pp. 646-651, </pages> <year> 1994. </year>
Reference-contexts: However, instead of simply calling Metis 100 times, we propose to integrate Metis into a genetic algorithm; our experiments show that this approach produces better average and minimum cuts than Metis alone. Overall, our approach generates bipartitioning solutions that are competitive with the recent approaches of <ref> [20] </ref> [18] [6] while requiring much less CPU time. The rest of our paper is as follows. Section 2 reviews the Metis partitioning package and presents our modifications for circuit netlists. Section 3 presents our Metis-based ge netic algorithm. <p> Genetic Metis vs. Other Approaches Finally, we compare GMetis to other recent partitioning works in the literature, namely PROP [6], Paraboli <ref> [20] </ref>, and GFM [19], the results of which are quoted from the original sources and presented in Table 5. All these works use r = 0:1, i.e., each cluster contains between 45% and 55% of the total number of modules.
Reference: [21] <author> Y. Saab, </author> <title> "A Fast and Robust Network Bisection Algorithm", </title> <journal> IEEE Trans. Computers, </journal> <volume> 44(7), </volume> <pages> pp. 903-913, </pages> <year> 1995. </year>
Reference-contexts: Hagen, Huang, and Kahng [9] have shown that a "last-in-first-out" scheme based on the order that modules are moved in FM is significantly better than random or "first-in-first-out" tie-breaking schemes. More recently, Dutt and Deng [7] independently reached the same conclusion. Finally, Saab <ref> [21] </ref> has also exploited the order in which modules are moved to produce an improved FM variant. A second significant improvement to FM integrates clustering into a "two-phase" methodology.
Reference: [22] <author> L. A. Sanchis, </author> <title> "Multiple-Way Network Partitioning", </title> <journal> IEEE Trans. Computers, </journal> <volume> 38(1), </volume> <pages> pp. 62-81, </pages> <year> 1989. </year>
Reference-contexts: FM has been widely adopted due to its short runtimes and ease of implementation. One significant improvement to FM addresses the tie-breaking used to choose among alternate moves that have the same gain. Krishnamurthy [17] proposed a looka-head tie-breaking mechanism, and Sanchis <ref> [22] </ref> extended this approach to multi-way partitioning. Hagen, Huang, and Kahng [9] have shown that a "last-in-first-out" scheme based on the order that modules are moved in FM is significantly better than random or "first-in-first-out" tie-breaking schemes. More recently, Dutt and Deng [7] independently reached the same conclusion.
References-found: 21

