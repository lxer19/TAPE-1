URL: http://www.cs.washington.edu/homes/fix/papers/fix-ladner-CGTA99.ps.Z
Refering-URL: http://www.cs.washington.edu/homes/fix/papers/
Root-URL: http://www.cs.washington.edu
Title: Multiresolution Banded Refinement to Accelerate Surface Reconstruction from Polygons 1;4  
Author: James D. Fix Richard E. Ladner 
Keyword: Key words: Polygon tiling; Multiresolution; Surface reconstruction; Dynamic programming; Shape correspondence.  
Address: Seattle, WA 98195  
Affiliation: Department of Computer Science and Engineering, University of Washington,  
Abstract: We propose a method for constructing a tiling between a pair of planar polygons. Our technique uses multiresolution: tilings of lower resolution polygons are used to construct a tiling for the full resolution polygons. The tilings are constructed using banded refinement, by restricted dynamic programming, in roughly linear time and space. By contrast, the optimal dynamic programming method requires quadratic time and space. In our empirical study of surface reconstruction of brain contours our algorithm exhibited significant speedup over the optimal dynamic program, yet nearly always found an optimal reconstruction. Our approach appears to be generalizable to other geometric problems solvable by dynamic programming, and flexible enough to be tuned for varying data set characteristics. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Alt and M. Godau. </author> <title> Measuring the resemblance of polygonal curves. </title> <booktitle> In Proceedings of the 8th ACM Symposium on Computational Geometry, </booktitle> <pages> pages 102-109, </pages> <year> 1992. </year>
Reference-contexts: The formulation of Alt and Godau for determining whether two polygonal curves resemble each other shares some features with these problems, and might also benefit from a multiresolution approach <ref> [1] </ref>. 1.2 Paper Overview We begin by defining the parallel polygon tiling problem and describe its solution using dynamic programming. In section 3 we describe multiresolution analysis of polygons and motivate its application to the polygon tiling problem by giving a high-level overview of our algorithm.
Reference: [2] <author> C.L. Bajaj, E.J. Coyle, and K-N. Lin. </author> <title> Arbitrary topology shape reconstruction from planar cross sections. Graphical Models and Image Processing, </title> <booktitle> 58(6) </booktitle> <pages> 524-543, </pages> <month> November </month> <year> 1996. </year>
Reference-contexts: Meyers et al. [16] provide a good survey of these methods. When a pair of polygons to be tiled is dissimilar, the surface computed by polygon tiling is often of poor quality, and many of the above techniques fail to generate good solutions <ref> [2] </ref>. Other general techniques exist that do not rely on solution of the polygon tiling problem. Boissonnat [5], and Boissonnat and Geiger [6] compute a tiling by Delauney triangulation. <p> Barequet and Sharir [4] and Barequet et al. [3] use curve similarity techniques to tile portions of contours, then decompose the remaining untiled portions into three-dimensional polygons and tile them using polygon triangulation. This methodology is followed by Bajaj et al. <ref> [2] </ref>, providing a rigorous formulation and techniques for handling dissimilar contours. Oliva et al. [17] introduce intermediate contour and branch segments to provide better interpolation whenever branching occurs.
Reference: [3] <author> G. Barequet, D. Shapiro, and A. Tal. </author> <title> History consideration in reconstructing polyhedral surfaces from parallel slices. </title> <booktitle> In Proceedings of Visualization, </booktitle> <pages> pages 149-156, </pages> <month> October </month> <year> 1996. </year>
Reference-contexts: Other general techniques exist that do not rely on solution of the polygon tiling problem. Boissonnat [5], and Boissonnat and Geiger [6] compute a tiling by Delauney triangulation. Barequet and Sharir [4] and Barequet et al. <ref> [3] </ref> use curve similarity techniques to tile portions of contours, then decompose the remaining untiled portions into three-dimensional polygons and tile them using polygon triangulation. This methodology is followed by Bajaj et al. [2], providing a rigorous formulation and techniques for handling dissimilar contours.
Reference: [4] <author> G. Barequet and M. Sharir. </author> <title> Piecewise-linear interpolation between polygonal slices. </title> <booktitle> Computer Vision and Image Understanding, </booktitle> <volume> 63(2) </volume> <pages> 251-272, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Other general techniques exist that do not rely on solution of the polygon tiling problem. Boissonnat [5], and Boissonnat and Geiger [6] compute a tiling by Delauney triangulation. Barequet and Sharir <ref> [4] </ref> and Barequet et al. [3] use curve similarity techniques to tile portions of contours, then decompose the remaining untiled portions into three-dimensional polygons and tile them using polygon triangulation. This methodology is followed by Bajaj et al. [2], providing a rigorous formulation and techniques for handling dissimilar contours.
Reference: [5] <author> J.D. Boissonnat. </author> <title> Shape reconstruction from planar cross sections. Computer Vision, </title> <journal> Graphics and Image Processing, </journal> <volume> 44 </volume> <pages> 1-29, </pages> <year> 1988. </year>
Reference-contexts: When a pair of polygons to be tiled is dissimilar, the surface computed by polygon tiling is often of poor quality, and many of the above techniques fail to generate good solutions [2]. Other general techniques exist that do not rely on solution of the polygon tiling problem. Boissonnat <ref> [5] </ref>, and Boissonnat and Geiger [6] compute a tiling by Delauney triangulation. Barequet and Sharir [4] and Barequet et al. [3] use curve similarity techniques to tile portions of contours, then decompose the remaining untiled portions into three-dimensional polygons and tile them using polygon triangulation.
Reference: [6] <author> J.D. Boisssonnat and B. Geiger. </author> <title> Three dimensional reconstruction of complex shapes based on the Delauney triangulation. </title> <booktitle> In Procedings of Biomedical Image Processing and Biomedical Visualization, volume 1905, </booktitle> <pages> pages 964-975. </pages> <publisher> SPIE Press, </publisher> <year> 1993. </year>
Reference-contexts: Other general techniques exist that do not rely on solution of the polygon tiling problem. Boissonnat [5], and Boissonnat and Geiger <ref> [6] </ref> compute a tiling by Delauney triangulation. Barequet and Sharir [4] and Barequet et al. [3] use curve similarity techniques to tile portions of contours, then decompose the remaining untiled portions into three-dimensional polygons and tile them using polygon triangulation.
Reference: [7] <author> H.N. Christiansen and T.W. </author> <title> Sederberg. Conversion of complex contour line definitions into polygonal element mosaics. </title> <journal> Computer Graphics, </journal> <volume> 12(2) </volume> <pages> 187-192, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: Optimal: our implementation of the optimal dynamic programming tiling algorithm [9]. Local search: our implementation of the multiresolution algorithm that re fines using local search by edge flip operations [14]. Greedy: our implementation of the greedy tiling heuristic of Christiansen et al. <ref> [7] </ref>. This algorithm builds a tiling by starting with a single corresponding edge between the two contours, then choosing a tile adjoining that edge that has the shorter edge between the contours. It repeats this process of adding adjoining tiles with shorter edges until a legal tiling is found.
Reference: [8] <author> M. Cohen, T. DeRose, D. Salesin, P. Schroder, and W. Sweldens. </author> <title> Wavelets in computer graphics, </title> <booktitle> 1996. ACM SIGGRAPH Course Notes. </booktitle>
Reference: [9] <author> H. Fuchs, Z.M. Kedem, and S.P. Uselton. </author> <title> Optimal surface reconstruction from planar contours. </title> <journal> Communications of the ACM, </journal> 20(10) 693-702, October 1977. 
Reference-contexts: In this case, surface reconstruction from contours is reduced to the polygon tiling problem: find a surface composed of triangular tiles between a pair of planar polygons subject to some optimization criteria. Finding a polygon tiling is the main focus of this paper. Fuchs, Kedem, and Uselton <ref> [9] </ref> devised a dynamic programming algorithm that computes an optimal tiling in O (n 2 log n) time and O (n 2 ) space using minimum surface area as their criterion. <p> Based on local search, it finds near-optimal tilings quickly but often fails to find optimal ones. We propose an approximation methodology for computing a polygon tiling using multiresolution techniques that is based on the dynamic programming formulation of Fuchs et al. <ref> [9] </ref>. The method proceeds as follows: we model the inputs as piecewise linear curves and perform a wavelet decomposition. This yields a sequence of approximations of decreasing resolution, hence fewer sample points. We compute an optimal tiling of the lowest resolution curves using dynamic programming. <p> When applied to numerical optimization problems, multiresolution methods find solutions quickly by providing a coarse solution which can then be refined with higher levels of detail [13]. Our method is a synthesis of the optimal tiling algorithm of Fuchs et al. <ref> [9] </ref> and the multiresolution tiling method of Meyers [14]. Meyers' tiling algorithm was one of the first compelling applications of multiresolution and wavelet analysis to computational geometry and computer graphics. <p> Our discussion of the polygon tiling problem and its optimal solution follows that of Fuchs et al. <ref> [9] </ref>. Let P = fp 0 ; : : : ; p m1 g and Q = fq 0 ; : : : ; q n1 g be polygons in R 3 lying in parallel planes. <p> The tiling graph is an unfolded representation of such a toroidal graph. 2.2 Dynamic programming solution Given this graph formulation we are now able to describe the optimal tiling algorithm of Fuchs, Kedem, and Uselton <ref> [9] </ref>. If we associate weights to edges in the tiling graph equal to the weights of the corresponding tiles, a minimum tiling can be found by finding the shortest tiling path from v i0 for 0 i &lt; m. <p> the tiling graph hence O (mn) space. (This dynamic programming method also works with maximization formulations, in which case we find the longest tiling path.) Using observations about optimal paths in the tiling graph Fuchs et al. developed a dynamic programming strategy that uses only O (mn log m) time <ref> [9] </ref>. <p> The band width was fixed at some value b at all resolution levels, and the number of resolution levels k was (log n)=2. Optimal: our implementation of the optimal dynamic programming tiling algorithm <ref> [9] </ref>. Local search: our implementation of the multiresolution algorithm that re fines using local search by edge flip operations [14]. Greedy: our implementation of the greedy tiling heuristic of Christiansen et al. [7].
Reference: [10] <author> S. Ganapathy and T.G. Dennehy. </author> <title> A new general triangulation method for planar contours. </title> <journal> Computer Graphics, </journal> <volume> 16(3) </volume> <pages> 69-75, </pages> <month> July </month> <year> 1982. </year>
Reference: [11] <author> A. Kalvin, E. Schonberg, J.T. Schwartz, and M. Sharir. </author> <title> Two-dimensional model-based boundary matching using footprints. </title> <journal> International Journal of Robotics Research, </journal> <volume> 5 </volume> <pages> 38-55, </pages> <year> 1986. </year> <month> 17 </month>
Reference: [12] <author> E. Keppel. </author> <title> Approximating complex surfaces by triangulation of contour lines. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 19 </volume> <pages> 2-15, </pages> <year> 1975. </year>
Reference: [13] <author> Z. Liu, S. Gortler, and M. Cohen. </author> <title> Heirarchical spacetime control. </title> <booktitle> In Computer Graphics Proceedings. ACM SIGGRAPH, </booktitle> <year> 1994. </year>
Reference-contexts: Used for compression and function approximation, multiresolution analyses and wavelet decompositions yield compact representations that mostly characterize the original functions. When applied to numerical optimization problems, multiresolution methods find solutions quickly by providing a coarse solution which can then be refined with higher levels of detail <ref> [13] </ref>. Our method is a synthesis of the optimal tiling algorithm of Fuchs et al. [9] and the multiresolution tiling method of Meyers [14]. Meyers' tiling algorithm was one of the first compelling applications of multiresolution and wavelet analysis to computational geometry and computer graphics.
Reference: [14] <author> D. Meyers. </author> <title> Multiresolution tiling. </title> <journal> Computer Graphics Forum, </journal> <volume> 13(5) </volume> <pages> 325-340, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: As a result, faster methods were proposed that use greedy heuristics to find approximate solutions [7,10]. While extremely efficient, the surfaces found by the heuristic methods are often unsatisfactory, even on simple inputs [15]. Meyers <ref> [14] </ref> proposed a multiresolution method that uses an optimal tiling of low resolution approximations of the polygons to guide a search for an optimal tiling. Based on local search, it finds near-optimal tilings quickly but often fails to find optimal ones. <p> When applied to numerical optimization problems, multiresolution methods find solutions quickly by providing a coarse solution which can then be refined with higher levels of detail [13]. Our method is a synthesis of the optimal tiling algorithm of Fuchs et al. [9] and the multiresolution tiling method of Meyers <ref> [14] </ref>. Meyers' tiling algorithm was one of the first compelling applications of multiresolution and wavelet analysis to computational geometry and computer graphics. Like our method, his method computed tilings from lower resolution tilings, but employed a local search heuristic to refine the tilings. <p> Sweldens and Schroder [22] describe techniques for designing analysis filters a for various applications. For polygons, we use the analysis filter of Meyers: fa 0 = 19=28; a 1 = 9=28; a 2 = 1=8; a 3 = 1=14; a 4 = 1=28g <ref> [14] </ref>. This was chosen so that the polygon P l is nearly a least squares approximation of P l+1 . Example approximations given by this scheme can be seen in the polygons of figure 1. A multiresolution analysis of P can be computed quickly. <p> In our multiresolution tiling algorithm we use the path of a lower resolution tiling to guide dynamic programming to construct a higher resolution tiling. Meyers <ref> [14] </ref> multiresolution tiling algorithm provides a framework for our technique. The algorithm works as follows: let P and Q be polygons with m and n points, and let k be a non-negative integer. Assume that m and n are divisible by 2 k . <p> Meyers gave a straightforward way of tiling P l and Q l by splitting each tile of T l1 <ref> [14] </ref>. For example, let superscripts of p i and q j denote the resolution levels of polygon vertices as before. <p> The RefineTiling step remedies this. One approach to refinement would be to make local improvements to a tiling|for example, one could apply "edge flips" (see figure 4) that improve the tiling until no improvement can be made. This was the method applied by Meyers <ref> [14] </ref>. The right half of figure 4 illustrates the weakness of this technique: it is possible for a tiling to be close to an optimal tiling, yet have an edge flip operation lead the refinement to a sub-optimal tiling that is locally optimal with respect to the edge flip operation. <p> Optimal: our implementation of the optimal dynamic programming tiling algorithm [9]. Local search: our implementation of the multiresolution algorithm that re fines using local search by edge flip operations <ref> [14] </ref>. Greedy: our implementation of the greedy tiling heuristic of Christiansen et al. [7]. This algorithm builds a tiling by starting with a single corresponding edge between the two contours, then choosing a tile adjoining that edge that has the shorter edge between the contours.
Reference: [15] <author> D. Meyers. </author> <title> Reconstruction of Surfaces from Planar Contours. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <month> July </month> <year> 1994. </year>
Reference-contexts: As a result, faster methods were proposed that use greedy heuristics to find approximate solutions [7,10]. While extremely efficient, the surfaces found by the heuristic methods are often unsatisfactory, even on simple inputs <ref> [15] </ref>. Meyers [14] proposed a multiresolution method that uses an optimal tiling of low resolution approximations of the polygons to guide a search for an optimal tiling. Based on local search, it finds near-optimal tilings quickly but often fails to find optimal ones.
Reference: [16] <author> D. Meyers, S. Skinner, and K. Sloan. </author> <title> Surfaces from contours. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 11(3) </volume> <pages> 228-258, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Structures are added that bridge merging or branching contours so that they form one polygon and can be tiled as a single pair of polygons. Our polygon tiling algorithm can be invoked to perform this tiling. Meyers et al. <ref> [16] </ref> provide a good survey of these methods. When a pair of polygons to be tiled is dissimilar, the surface computed by polygon tiling is often of poor quality, and many of the above techniques fail to generate good solutions [2].
Reference: [17] <author> J-M. Oliva, M. Perrin, and S. Coquillart. </author> <title> 3d reconstruction of complex polyhedral shapes from contours using a simplified generalized voronoi diagram. </title> <journal> Computer Graphics Forum, </journal> <volume> 15(3):C-396-408, </volume> <month> August </month> <year> 1996. </year> <booktitle> Proceedings of Eurographics '96. </booktitle>
Reference-contexts: This methodology is followed by Bajaj et al. [2], providing a rigorous formulation and techniques for handling dissimilar contours. Oliva et al. <ref> [17] </ref> introduce intermediate contour and branch segments to provide better interpolation whenever branching occurs. While we have not developed this idea, multiresolution techniques similar to ours might be applied to accelerate the matching and polygon triangulation portions of these algorithms.
Reference: [18] <author> D. Sankoff and J. Kruskal, </author> <title> editors. Time Warps, String Edits, and Macromolecules: the Theory and Practice of Sequence Comparison. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1983. </year>
Reference-contexts: There are many problems that are closely related to the polygon tiling problem as we formulate it here. Most similar are those that arise in curve comparison applications: finding figure correspondences for polygon morphing [19], matching curve features [11,24], dynamic time-warping for handwriting and speech recognition <ref> [18] </ref>. All of these can be formulated and solved using dynamic programming|there seems to be great potential in generalizing our method to accelerate these applications as well.
Reference: [19] <author> T.W. Sederberg and E. Greenwood. </author> <title> A physically based approach to 2D shape blending. </title> <booktitle> In Computer Graphics Proceedings. ACM SIGGRAPH, </booktitle> <year> 1992. </year>
Reference-contexts: There are many problems that are closely related to the polygon tiling problem as we formulate it here. Most similar are those that arise in curve comparison applications: finding figure correspondences for polygon morphing <ref> [19] </ref>, matching curve features [11,24], dynamic time-warping for handwriting and speech recognition [18]. All of these can be formulated and solved using dynamic programming|there seems to be great potential in generalizing our method to accelerate these applications as well. <p> Helens 40% 20% Fig. 8. Distribution of band widths required to maintain optimality in a banded refinement. proposed by Sederberg and Greenwood <ref> [19] </ref> for finding solutions to dynamic programs similar to what arise in polygon tiling. They suggest searching in a band surrounding the diagonal of the dynamic program graph.
Reference: [20] <author> M. Shantz. </author> <title> Surface definition for branching contour defined objects. </title> <journal> Computer Graphics, </journal> <volume> 15 </volume> <pages> 242-270, </pages> <month> July </month> <year> 1981. </year>
Reference: [21] <author> E. Stollnitz, T. DeRose, and D. Salesin. </author> <title> Wavelets for computer graphics: Theory and Applications. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, </address> <year> 1996. </year>
Reference: [22] <author> W. Sweldens and P. Schroder. </author> <title> Building your own wavelets at home. </title> <type> Technical Report 1995:5, </type> <institution> Department of Mathematics, University of South Carolina, </institution> <year> 1995. </year>
Reference-contexts: For example, in the "midpoint" multiresolution scheme above, a would be defined by: fa 1 = 0; a 0 = 1=2; a 1 = 1=2g. Sweldens and Schroder <ref> [22] </ref> describe techniques for designing analysis filters a for various applications. For polygons, we use the analysis filter of Meyers: fa 0 = 19=28; a 1 = 9=28; a 2 = 1=8; a 3 = 1=14; a 4 = 1=28g [14].
Reference: [23] <author> E. Welzl and B. Wolfers. </author> <title> Surface reconstruction between simple polygons via angle criteria. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 17 </volume> <pages> 351-369, </pages> <month> July </month> <year> 1994. </year>
Reference: [24] <author> H.J. Wolfson. </author> <title> On curve matching. </title> <journal> IEEE Transactions on Pattern Matching and Machine Intelligence, </journal> <volume> 12(5) </volume> <pages> 483-489, </pages> <month> May </month> <year> 1990. </year> <title> 18 Fig. 9. Set of contours from the St. Helens data set. Fig. 10. Reconstruction of the St. Helens data set rendered as tiles. Elevations have been scaled slightly to demonstrate the tiles. 19 Fig. 11. Reconstruction of the brain data set rendered as tiles. Fig. 12. Reconstruction of the brain data set rendered with smooth shading. </title> <type> 20 </type>
References-found: 24

