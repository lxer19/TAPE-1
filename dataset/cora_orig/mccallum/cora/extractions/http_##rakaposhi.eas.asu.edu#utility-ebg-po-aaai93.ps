URL: http://rakaposhi.eas.asu.edu/utility-ebg-po-aaai93.ps
Refering-URL: http://rakaposhi.eas.asu.edu/yochan.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: Email: rao@asuvax.asu.edu  
Title: Relative Utility of EBG based Plan Reuse in Partial Ordering vs. Total Ordering Planning  
Author: Subbarao Kambhampati and Jengchin Chen 
Address: Tempe, AZ 85287-5406  
Affiliation: Department of Computer Science and Engineering Arizona State University,  
Note: To appear in Proceedings of AAAI-93  
Abstract: This paper provides a systematic analysis of the relative utility of basing EBG based plan reuse techniques in partial ordering vs. total ordering planning frameworks. We separate the potential advantages into those related to storage compaction, and those related to the ability to exploit stored plans. We observe that the storage compactions provided by partially ordered partially instantiated plans can, to a large extent, be exploited regardless of the underlying planner. We argue that it is in the ability to exploit stored plans during planning that partial ordering planners have some distinct advantages. In particular, to be able to flexibly reuse and extend the retrieved plans, a planner needs the ability to arbitrarily and efficiently ``splice in'' new steps and sub-plans into the retrieved plan. This is where partial ordering planners, with their least-commitment strategy, and flexible plan representations, score significantly over state-based planners as well as planners that search in the space of totally ordered plans. We will clarify and support this hypothesis through an empirical study of three planners and two reuse strategies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Barrett and D. Weld. </author> <title> Partial order planning: Evaluating possible efficiency gains. </title> <type> Technical Report 92-05-01, </type> <institution> Department of Computer Science and Engineering, University of Washington, </institution> <month> June </month> <year> 1992. </year>
Reference-contexts: generalization) based plan reuse has concentrated almost exclusively on state-based planners (i.e., planners which search in the space of world states, and produce totally ordered plans;[3, 14, 11, 20].) In contrast, the common wisdom in the planning community (vindicated to a large extent by the recent formal and empirical evaluations <ref> [1, 12, 15] </ref>), has held that search in the space of plans, especially in the space of partially ordered plans provides a more flexible and efficient means of plan generation. <p> Many current-day planners such as NOAH, NONLIN, SIPE belong to the latter class, called partial order or PO planners 2 are generally more efficient as they avoid premature commitment to inter-operator orderings, there by improving efficiency over corresponding planners that search in the space of totally ordered plans <ref> [1, 15] </ref>. 3. Advantages of Partial Order planning in plan reuse 3.1. Storage Compaction A PO plan provides a compact representation for the possibly exponential number of its underlying linearizations by specifying just the steps, the partial ordering between steps and the codesignation and non-codesignation constrains between the variables. <p> There are many situations when the macros are not sequenceable but only interleavable with respect to the outstanding goals of the planner. Consider the simple artificial domains, ART-IND, ART-MD and ART-MD-NS (originally described in <ref> [1] </ref>) shown in Figure 2. These domains differ in terms of the serializability [10] of the goals in the domain. ART-IND contains only independent goals (notice that none of the actions have delete lists). <p> Experimental Setup Performance Systems: Our performance systems consisted of three simple planners implemented by Barrett and Weld <ref> [1] </ref>: SNLP, TOCL and TOPI. SNLP is a causal-link based partial ordering planner, which can arbitrarily interleave subplans. <p> Although this can happen both in domains with serializable subgoals and domains with non-serializable subgoals, our experiments show that the effect is particularly strong in the latter. When taken in the context of recent work on comparative advantages of PO planners in plan generation <ref> [1, 12, 15] </ref>, our study strongly argues for situating EBG based plan reuse strategies within the context of PO planning framework. We believe that such a move would also benefit other learning strategies such as search control rules and abstractions [4], and are currently working towards verifying these intuitions.
Reference: [2] <author> O. Etzioni and R. Etzioni. </author> <title> Statistical methods for analyzing speedup learning experiments. </title> <journal> Machine Learning. </journal> <note> (To Appear). </note>
Reference-contexts: To eliminate any bias introduced by the time bound (c.f. [16]), we used the maximally conservative statistical tests for censored data, described by Etzioni and Etzioni in <ref> [2] </ref>, to assess the significance of all speedups. All experiments were performed in interpreted Lucid Commonlisp running on a Sun Sparc-II. 4.2. Experimental Results Table 1 shows the cumulative statistics for solving the 30 test problems from each domain for all three planners and all three reuse modes. <p> IEBG strategy is also the best strategy for TOCL, but turns out to be considerably less effective than the IEBG strategy for SNLP. More interestingly, we see that the 8 Using the statistical tests for censored data advocated by Etzioni in <ref> [2] </ref>, we find that the hypothesis that SNLP+IEBG is faster than SNLP as well as the hypothesis that SNLP+IEBG is faster than TOCL+IEBG are both supported with very high significance levels by our experimental data.
Reference: [3] <author> R. Fikes, P. Hart, and N. Nilsson. </author> <title> Learning and executing generalized robot plans. </title> <journal> Artificial Intelligence, </journal> <volume> 3(4):251--288, </volume> <year> 1972. </year>
Reference: [4] <author> S. Kambhampati. </author> <title> Utility tradeoffs in incremental plan modification and reuse. </title> <booktitle> In Proc. AAAI Spring Symp. on Computational Considerations in Supporting Incremental Modification and Reuse, </booktitle> <year> 1992 </year>
Reference-contexts: While modifiability is not the focus of the current work, in our previous work [5], we have shown that PO planners do provide a flexible framework for plan modification. More recently, we have been investigating the utility tradeoffs involved in incorporating a flexible modification capability in plan reuse <ref> [4] </ref>. 5 From the domain descriptions, it can be seen that a conjunctive goal SNLP TOCL TOPI scratch +SEBG +IEBG scratch +SEBG +IEBG scratch +SEBG ART-MD % Solved 100% 100% 100% 100% 100% 100% 100% 100% Cum. time 80 306 136 92 177 2250 1843 3281 % Macro usage - 20% <p> We believe that such a move would also benefit other learning strategies such as search control rules and abstractions <ref> [4] </ref>, and are currently working towards verifying these intuitions. Acknowledgements: We wish to thank Tony Barrett and Dan Weld for distributing the code for SNLP, TOCL and TOPI planners.
Reference: [5] <author> S. Kambhampati and J.A. Hendler. </author> <title> A validation structure based theory of plan modification and reuse. </title> <booktitle> Artificial Intelligence, </booktitle> <pages> 55(2-3), </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: The retraction itself can be facilitated by justifying individual planning decisions in terms of the plan causal structures. Once such a justification framework is in place, the retraction of irrelevant constraints can be accomplished with the help of a polynomial time greedy algorithm (c.f. <ref> [5, 8] </ref>). However, all the advantages of storage compaction and plan editing will hold whether the underlying planner generates a totally ordered or partially ordered (PO) plans. <p> This is distinct from the ability to interleave subgoals. In particular state-based planners that don't use linearity assumption can interleave subgoals, but cannot interleave plan steps 4 Interleavability of macros, as defined here differs from modifiability (c.f. <ref> [5, 6] </ref>) in that the latter also allows retraction of steps and/or constraints from the macro, once it is introduced into the plan. <p> While modifiability is not the focus of the current work, in our previous work <ref> [5] </ref>, we have shown that PO planners do provide a flexible framework for plan modification.
Reference: [6] <author> S. Kambhampati. </author> <title> Exploiting causal structure to control retrieval and refitting during plan reuse. </title> <note> Computational Intelligence (To appear). </note>
Reference-contexts: This is distinct from the ability to interleave subgoals. In particular state-based planners that don't use linearity assumption can interleave subgoals, but cannot interleave plan steps 4 Interleavability of macros, as defined here differs from modifiability (c.f. <ref> [5, 6] </ref>) in that the latter also allows retraction of steps and/or constraints from the macro, once it is introduced into the plan. <p> Although, there is much scope for improvement in these phases (for example, retrieval could have been done with a more sophisticated causal-structure based similarity metric, such as the one described in <ref> [6] </ref>), our choices do ensure a fair comparison between the various planners in terms of their ability to exploit stored plans.
Reference: [7] <author> S. Kambhampati and D.S. Nau. </author> <title> On the Nature and Role of Modal Truth Criteria in Planning. </title> <institution> University of Maryland Inst. for Systems Res. </institution> <type> Tech. Rep. </type> <institution> ISR-TR-93-30, </institution> <year> 1993. </year>
Reference-contexts: Secondly, the argument regarding the relative difficulty of scaling up the partial ordering planners to more expressive action representations is based on the (mistaken) premise that a PO planner has to interpret the full (necessary and sufficient) modal truth criterion for PO plans during each search iteration. Recent work <ref> [7, 12, 15] </ref> amply demonstrates that sound and complete partial ordering planners do not necessarily have to interpret the full-blown modal truth criterion at each iteration (since they only need completeness in the space of ground operator sequences rather than in the space of PO plans), and thus can retain their
Reference: [8] <author> S. Kambhampati and S. Kedar. </author> <title> A unified framework for explanation-based generalizationof partially ordered and partially instantiated plans. </title> <type> Technical Report (ASU-CS-TR 92-008), </type> <institution> Arizona State University, </institution> <year> 1992. </year> <note> (A preliminary version appears in Proc. 9th AAAI, </note> <year> 1991). </year>
Reference-contexts: It is natural to enquire, therefore, whether partial order (PO) planning retains its advantages in the context of EBG based plan reuse. In our previous work <ref> [8] </ref>, we have shown that the explanation-based generalization techniques can indeed be extended in a systematic fashion to partially ordered partially instantiated plans, to give rise to a spectrum of generalization strategies. <p> This flexible plan representation allows for a spectrum of order, precondition and structure generalizations. Our previous work <ref> [8] </ref> provides a systematic basis for generating these generalizations. Storing plans in PO form also allows for more sophisticated editing operations at retrieval time, when the macro is only partly applicable. Specifically, any irrelevant steps and constraints of the plan can be edited out by retracting the corresponding planning decisions. <p> The retraction itself can be facilitated by justifying individual planning decisions in terms of the plan causal structures. Once such a justification framework is in place, the retraction of irrelevant constraints can be accomplished with the help of a polynomial time greedy algorithm (c.f. <ref> [5, 8] </ref>). However, all the advantages of storage compaction and plan editing will hold whether the underlying planner generates a totally ordered or partially ordered (PO) plans. <p> However, all the advantages of storage compaction and plan editing will hold whether the underlying planner generates a totally ordered or partially ordered (PO) plans. For example, generalization techniques described in our previous work on EBG for PO plans <ref> [8] </ref> can be used whether the plan was initially produced by a partial ordering or a total ordering planner.
Reference: [9] <author> Craig Knoblock. </author> <title> Learning abstraction hierarchies for problem solving. </title> <booktitle> In Proc. 8th AAAI, </booktitle> <pages> pages 923--928, </pages> <year> 1990. </year>
Reference-contexts: Similarly, in [17] Smith and Peot argue that may of the static abstractions generated with state-based planners in mind (e.g. <ref> [9] </ref>), impose unnecessary and sometimes detrimental ordering constraints, when used in conjunction with the more flexible and efficient partial order planning strategies.
Reference: [10] <author> R. Korf. </author> <title> Planning as Search: A quantitative approach. </title> <journal> Artificial Intelligence, </journal> <volume> 33(1), </volume> <year> 1987. </year>
Reference-contexts: There are many situations when the macros are not sequenceable but only interleavable with respect to the outstanding goals of the planner. Consider the simple artificial domains, ART-IND, ART-MD and ART-MD-NS (originally described in [1]) shown in Figure 2. These domains differ in terms of the serializability <ref> [10] </ref> of the goals in the domain. ART-IND contains only independent goals (notice that none of the actions have delete lists).
Reference: [11] <author> J. Allen and P. Langley and S. Matwin. </author> <title> Knowledge and Regularity in Planning. </title> <booktitle> In Proc. AAAI Symp. on Computational Consideration in Supporting Incremental Modification and Reuse, </booktitle> <year> 1992. </year>
Reference: [12] <author> D. McAllester and D. Rosenblitt. </author> <title> Systematic nonlinear planning. </title> <booktitle> In Proc. 9th AAAI, </booktitle> <year> 1991. </year>
Reference-contexts: generalization) based plan reuse has concentrated almost exclusively on state-based planners (i.e., planners which search in the space of world states, and produce totally ordered plans;[3, 14, 11, 20].) In contrast, the common wisdom in the planning community (vindicated to a large extent by the recent formal and empirical evaluations <ref> [1, 12, 15] </ref>), has held that search in the space of plans, especially in the space of partially ordered plans provides a more flexible and efficient means of plan generation. <p> Secondly, the argument regarding the relative difficulty of scaling up the partial ordering planners to more expressive action representations is based on the (mistaken) premise that a PO planner has to interpret the full (necessary and sufficient) modal truth criterion for PO plans during each search iteration. Recent work <ref> [7, 12, 15] </ref> amply demonstrates that sound and complete partial ordering planners do not necessarily have to interpret the full-blown modal truth criterion at each iteration (since they only need completeness in the space of ground operator sequences rather than in the space of PO plans), and thus can retain their <p> Although this can happen both in domains with serializable subgoals and domains with non-serializable subgoals, our experiments show that the effect is particularly strong in the latter. When taken in the context of recent work on comparative advantages of PO planners in plan generation <ref> [1, 12, 15] </ref>, our study strongly argues for situating EBG based plan reuse strategies within the context of PO planning framework. We believe that such a move would also benefit other learning strategies such as search control rules and abstractions [4], and are currently working towards verifying these intuitions.
Reference: [13] <author> D. McDermott. </author> <title> Regression Planning. </title> <booktitle> Intl. Jour. Intell. Systems, </booktitle> <volume> 6 </volume> <pages> 357-416, </pages> <year> 1991. </year>
Reference-contexts: Interestingly enough, this was one of the original reasons for the shift from state based planning of STRIPS to plan-space based partial-order planning of NOAH, within the planning community. As McDermott <ref> [13, p. 413] </ref> remarks, if you want the ability improve performance by piecing large canned plans together, postponing decisions about how these plans will interact, then partial order planning is in some sense the inevitable choice.
Reference: [14] <author> S. Minton, J.G. Carbonell, C.A. Knoblock, D.R. Kuokka, O. Etzioni and Y. Gil. </author> <title> Explanation-based Learning: A problem solving perspective. </title> <journal> Artificial Intelligence, </journal> <volume> vol 40, </volume> <year> 1989. </year>
Reference-contexts: We believe that this was largely due to the limitations imposed by the underlying state-based planners. It is of course possible to get the effect of reuse of interleavable macros within state-based planning indirectly through the use of single operator macros (aka preference search control rules <ref> [14] </ref>). However, it is not clear what are the advantages of starting with a simplistic planner and get interleavability indirectly, when more sophisticated planners, such as PO planners, allow interleavability naturally. <p> The concentration on state-based planning has also been true of much of the speedup learning work within planning, including search control rules and precondition abstraction. In <ref> [14, p. 83] </ref> Minton et. al. seem to justify this by the observation: ``[..] the more clever the underlying problem solver is, the more difficult the job will be for the learning component''.
Reference: [15] <author> S. Minton, M. Drummond, J. Bresina, and A. Philips. </author> <title> Total order vs. partial order planning: Factors influencing performance. </title> <booktitle> In Proc. </booktitle> <address> KR-92 </address>
Reference-contexts: generalization) based plan reuse has concentrated almost exclusively on state-based planners (i.e., planners which search in the space of world states, and produce totally ordered plans;[3, 14, 11, 20].) In contrast, the common wisdom in the planning community (vindicated to a large extent by the recent formal and empirical evaluations <ref> [1, 12, 15] </ref>), has held that search in the space of plans, especially in the space of partially ordered plans provides a more flexible and efficient means of plan generation. <p> Many current-day planners such as NOAH, NONLIN, SIPE belong to the latter class, called partial order or PO planners 2 are generally more efficient as they avoid premature commitment to inter-operator orderings, there by improving efficiency over corresponding planners that search in the space of totally ordered plans <ref> [1, 15] </ref>. 3. Advantages of Partial Order planning in plan reuse 3.1. Storage Compaction A PO plan provides a compact representation for the possibly exponential number of its underlying linearizations by specifying just the steps, the partial ordering between steps and the codesignation and non-codesignation constrains between the variables. <p> Secondly, the argument regarding the relative difficulty of scaling up the partial ordering planners to more expressive action representations is based on the (mistaken) premise that a PO planner has to interpret the full (necessary and sufficient) modal truth criterion for PO plans during each search iteration. Recent work <ref> [7, 12, 15] </ref> amply demonstrates that sound and complete partial ordering planners do not necessarily have to interpret the full-blown modal truth criterion at each iteration (since they only need completeness in the space of ground operator sequences rather than in the space of PO plans), and thus can retain their <p> Although this can happen both in domains with serializable subgoals and domains with non-serializable subgoals, our experiments show that the effect is particularly strong in the latter. When taken in the context of recent work on comparative advantages of PO planners in plan generation <ref> [1, 12, 15] </ref>, our study strongly argues for situating EBG based plan reuse strategies within the context of PO planning framework. We believe that such a move would also benefit other learning strategies such as search control rules and abstractions [4], and are currently working towards verifying these intuitions.
Reference: [16] <author> A. Segre, C. Elkan, and A. Russell. </author> <title> A critical look at experimental evaluation of EBL. </title> <journal> Machine Learning, </journal> <volume> 6(2), </volume> <year> 1991. </year>
Reference-contexts: To eliminate any bias introduced by the time bound (c.f. <ref> [16] </ref>), we used the maximally conservative statistical tests for censored data, described by Etzioni and Etzioni in [2], to assess the significance of all speedups. All experiments were performed in interpreted Lucid Commonlisp running on a Sun Sparc-II. 4.2.
Reference: [17] <author> D.E. Smith and M.A. Peot. </author> <title> A critical look at Knoblock's hierarchy mechanism. </title> <booktitle> In Proc. 1st Intl. Conf. on AI Planning Systems, </booktitle> <year> 1992. </year>
Reference-contexts: As an example, ``goal order preference rules'' of the type ``work on on (y; z) before on (x; y)'', learned by EBL strategies in blocks world, are not that useful for partial order planners, which avoid premature step orderings to begin with. Similarly, in <ref> [17] </ref> Smith and Peot argue that may of the static abstractions generated with state-based planners in mind (e.g. [9]), impose unnecessary and sometimes detrimental ordering constraints, when used in conjunction with the more flexible and efficient partial order planning strategies.
Reference: [18] <author> P. Tadepalli and R. Isukapalli. </author> <title> Learning plan knowledge from simulators. </title> <booktitle> In Proc. workshop on Knowledge compilation and speedup learning. </booktitle>
Reference-contexts: For example, generalization techniques described in our previous work on EBG for PO plans [8] can be used whether the plan was initially produced by a partial ordering or a total ordering planner. Similarly, even in reuse frameworks based on total ordering planners (e.g. <ref> [20, 18] </ref>), order generalization has been used as a way to separate independent parts of the plan and store them separately, thereby containing the proliferation of macros by reducing the redundancy among them.
Reference: [19] <author> M. M. Veloso, M. A. Perez, and J. G. Carbonell. </author> <title> Nonlinear planning with parallel resource allocation. </title> <booktitle> In Proc. DARPA Planning workshop pages 207--212, </booktitle> <month> November </month> <year> 1990. </year>
Reference-contexts: On the other hand, planners 1 Notice that the so called linearity assumption, which specifies whether the planner manages its list of outstanding goals as a stack or an arbitrary list, has no effect on this. In particular, both PRODIGY, which makes linearity assumption, and its extension NOLIMIT <ref> [19] </ref> which doesn't (and thus allows interleaving of subgoals), are both capable only of refining a partial plan by adding operators to the end of the current plan. which do backward search in the space of world states, will only add new operators to the beginning of the partial solution during <p> From our discussion in Section 2., it should be clear that planners that search in the space of world states, such as STRIPS, PRODIGY, and NOLIMIT <ref> [19] </ref>, which refine plans only by adding steps to the beginning (or end, in the case of backward search in the space of states) of the plan, can reuse macros only when they are sequenceable with respect to the outstanding goals. <p> As McDermott [13, p. 413] remarks, if you want the ability improve performance by piecing large canned plans together, postponing decisions about how these plans will interact, then partial order planning is in some sense the inevitable choice. In <ref> [19, 20] </ref>, Veloso et. al. advocate basing learning techniques within state-based (total ordering) planning without linearity assumption, rather than within partial order planning.
Reference: [20] <author> M.M. Veloso. </author> <title> Learning by Analogical Reasoning in General Problem Solving. </title> <type> PhD thesis, </type> <institution> Carnegie-Mellon University, </institution> <year> 1992. </year>
Reference-contexts: For example, generalization techniques described in our previous work on EBG for PO plans [8] can be used whether the plan was initially produced by a partial ordering or a total ordering planner. Similarly, even in reuse frameworks based on total ordering planners (e.g. <ref> [20, 18] </ref>), order generalization has been used as a way to separate independent parts of the plan and store them separately, thereby containing the proliferation of macros by reducing the redundancy among them. <p> As McDermott [13, p. 413] remarks, if you want the ability improve performance by piecing large canned plans together, postponing decisions about how these plans will interact, then partial order planning is in some sense the inevitable choice. In <ref> [19, 20] </ref>, Veloso et. al. advocate basing learning techniques within state-based (total ordering) planning without linearity assumption, rather than within partial order planning.
References-found: 20

