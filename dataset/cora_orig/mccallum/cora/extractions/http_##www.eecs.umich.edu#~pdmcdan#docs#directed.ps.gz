URL: http://www.eecs.umich.edu/~pdmcdan/docs/directed.ps.gz
Refering-URL: http://www.eecs.umich.edu/~pdmcdan/papers.html
Root-URL: http://www.cs.umich.edu
Title: Secure High Performance Group Communication  
Author: Patrick McDaniel 
Date: September 8, 1997  
Abstract:  
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Deering. </author> <title> Host extensions for ip multicasting. </title> <type> Technical Report RFC1112, </type> <institution> Internet Engineering Task Force, </institution> <month> August </month> <year> 1989. </year>
Reference-contexts: One solution to address the network bandwidth requirement is the use of multicast messaging. Multicast messages are used to communicate with a (possibly large) number of hosts with one physical network transmission. The most widely supported transport mechanism for multicast communication is defined for the Internet Protocols (IP) in <ref> [1] </ref>. This specification defines the semantics for unreliable delivery of messages sent to a specific range of IP group addresses. Many solutions for augmenting this protocol to provide reliability, security, fault tolerance, and ordering semantics have been proposed in the literature [2, 3, 4, 5, 6, 7, 8, 9, 10].
Reference: [2] <author> W. Jia, J. Kaiser, and E. Nett. Rmp: </author> <title> fault-tolerant group communication. </title> <journal> IEEE Micro, </journal> <volume> 16(2) </volume> <pages> 59-67, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: This specification defines the semantics for unreliable delivery of messages sent to a specific range of IP group addresses. Many solutions for augmenting this protocol to provide reliability, security, fault tolerance, and ordering semantics have been proposed in the literature <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. In all cases, these facilities come at cost in either bandwidth or latency, or both. We propose a solution in which we avoid these additional costs where possible. <p> Authentication tokens are passed to an admitted member which are presented to other group members as needed. There are several reliable multicast protocols which have been accepted in industry and are being used to build commercial applications. One of the most popular protocols is the RMP protocol <ref> [2] </ref>. The RMP protocol defines totally ordered, atomic, reliable group communication based on a logical token ring. Possession of the token provides a member with opportunity to transmit a message to the group.
Reference: [3] <author> L. Gong. Enclaves: </author> <title> Enabling secure collaboration over the internet. </title> <booktitle> In Proceedings of the Sixth USENIX Security Symposium, </booktitle> <pages> pages 149-159. </pages> <publisher> USENIX Association, </publisher> <month> July </month> <year> 1996. </year>
Reference-contexts: This specification defines the semantics for unreliable delivery of messages sent to a specific range of IP group addresses. Many solutions for augmenting this protocol to provide reliability, security, fault tolerance, and ordering semantics have been proposed in the literature <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. In all cases, these facilities come at cost in either bandwidth or latency, or both. We propose a solution in which we avoid these additional costs where possible.
Reference: [4] <author> R. Van Renesse, K. Birman, and S. Maffeis. Horus: </author> <title> a flexible group communication system. </title> <journal> Communications of the ACM, </journal> <volume> 39(4) </volume> <pages> 76-83, </pages> <month> April </month> <year> 1996. </year>
Reference-contexts: This specification defines the semantics for unreliable delivery of messages sent to a specific range of IP group addresses. Many solutions for augmenting this protocol to provide reliability, security, fault tolerance, and ordering semantics have been proposed in the literature <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. In all cases, these facilities come at cost in either bandwidth or latency, or both. We propose a solution in which we avoid these additional costs where possible. <p> The advantage to using virtually synchronous communication is performance; less latency is incurred for messages sent at approximately the same time. The message traffic within ISIS is protected by an optional encryption service. A direct descendent of ISIS is the HORUS system <ref> [4] </ref>, which is built on many of the same principals and technologies developed in ISIS. One important enhancement was the introduction of a comprehensive security architecture [11] for securing group communication. A key element to this architecture is the fault-tolerant key distribution scheme. <p> Public key certificates are used to authenticate message traffic, which are retrieved from a certification authority. The costs of using this architecture for group communication is large. The authors show that a group of 4 members can process &lt; 100kb/sec <ref> [4] </ref>, which is far below the requirements for a high bandwidth system such as videoconferencing. In Horus, implementations without the security feature are very fast; using packing [12] the authors have been able to transmit 7500 messages per second.
Reference: [5] <author> M. Kaashoek and A. Tanenbaum. </author> <title> Group communication in the amoeba distributed operating system. </title> <booktitle> In Proceedings of the 11th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 222-230. </pages> <publisher> IEEE, </publisher> <month> May </month> <year> 1991. </year>
Reference-contexts: This specification defines the semantics for unreliable delivery of messages sent to a specific range of IP group addresses. Many solutions for augmenting this protocol to provide reliability, security, fault tolerance, and ordering semantics have been proposed in the literature <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. In all cases, these facilities come at cost in either bandwidth or latency, or both. We propose a solution in which we avoid these additional costs where possible. <p> When the network recovers, all messages sent to the members in the local view are then transmitted to the members of the original group that were unavailable. In this way, the divergent states of the partitioned groups can be reconciled. The Amoeba distributed operating system <ref> [5] </ref> uses the group abstraction as a primitive under which services can be implemented. In this system, all traffic within the group is forwarded via an unicast message to an elected member, called the sequencer. <p> The messages are totally ordered; all processes receive the messages in the same order. A good overview of the many documented approaches to achieve these properties can be found in [22] and [23]. Originally described in [10] and later implemented in <ref> [8, 5] </ref>, we based our design on token site, two phase commit scheme. The token site, similar to the sequencer in the Amoeba system, is responsible for maintaining the sequencing of messages, by broadcasting message sequence numbers. <p> We make no attempt to recover from the loss of the token server. This is the major drawback to this protocol, in that the server is a single point of failure. There are well documented ways to recover from this type of failure <ref> [8, 5] </ref>. We did not feel these issues were central to this work and are thus omitted. If a client does not receive the original message, but does receive the subsequent commit message, it appeals to the token site for the message by sending a negative acknowledgement.
Reference: [6] <author> The Transis Approach to High Availibility Cluster Communication. D. dolev and d. </author> <title> malki. </title> <journal> Communications of the ACM, </journal> <volume> 39(4), </volume> <month> April </month> <year> 1996. </year>
Reference-contexts: This specification defines the semantics for unreliable delivery of messages sent to a specific range of IP group addresses. Many solutions for augmenting this protocol to provide reliability, security, fault tolerance, and ordering semantics have been proposed in the literature <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. In all cases, these facilities come at cost in either bandwidth or latency, or both. We propose a solution in which we avoid these additional costs where possible. <p> In Horus, implementations without the security feature are very fast; using packing [12] the authors have been able to transmit 7500 messages per second. A solution to fault tolerant group communication that endures network partitioning is outlined in the Transis <ref> [6] </ref> system. The goals of this system are similar to those of ISIS and HORUS, and in and fact later versions of the HORUS system have incorporated some of the mechanisms. Transis provides reliable, atomic, totally ordered group communication that can tolerate a network partition failures.
Reference: [7] <author> M. Reiter. </author> <title> Secure agreement protocols: Reliable and atomic group multicast in rampart. </title> <booktitle> In Proceedings of 2nd ACM Conference on Computer and Communications Security, </booktitle> <pages> pages 68-80. </pages> <publisher> ACM, </publisher> <month> November </month> <year> 1994. </year>
Reference-contexts: This specification defines the semantics for unreliable delivery of messages sent to a specific range of IP group addresses. Many solutions for augmenting this protocol to provide reliability, security, fault tolerance, and ordering semantics have been proposed in the literature <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. In all cases, these facilities come at cost in either bandwidth or latency, or both. We propose a solution in which we avoid these additional costs where possible. <p> Failures are detected through timeouts and retransmissions sent by the sender. In this system, group communication is fault tolerant. After processor or network failures, the group can reform with or without the assistance of the sequencer. The RAMPART system <ref> [7] </ref> provides secure communication in the presence of actively malicious 2 processes. The system uses secure channels between two members of the protocol to provide a maximum of security and authenticity. Protocols depend greatly on the consensus of processes to reach agreement on the course of action. <p> Traffic is encrypted before transmission. Note that we provide no facilities for determining message authenticity, but simple existing technologies could be used to achieve this. Described in figure 1, the system architecture consists of three protocol layers. This is a similar approach taken by the systems described in <ref> [8, 7] </ref>. In these systems broadcast semantics are used to simplify the group management and security services use the group abstraction to optimize key management. In [8], a developer selects those layers which are required by the application. <p> The group communication systems found in the literature provide varying levels of support for secure communication. The simplest form of secure communication can be found in [8], where group communication is encrypted via a session key. The other end of the spectrum is described in <ref> [7] </ref>, where a highly sophisticated fault-tolerant framework is presented to enable secure group communication in the presence of actively malicious processes. In this work, we attempt to optimize group communication for high performance systems. This has lead us to less ambitious security goals. <p> The possible threat models applicable to group systems is innumerable, and general solutions will prove valuable. Finally, there may be a need for greater fault tolerance. It is pointed out in the literature that distributed systems have much to gain from group based communication <ref> [7] </ref>. The solutions presented in this paper have single point of failure, and thus provide limited availability assurances. The application of the techniques presented in this paper may enhance the performance of these services, but without stronger fault tolerance will not be useful.
Reference: [8] <institution> The Process Group Approach to Reliable Distributed Computing. </institution> <month> K. </month> <title> birman. </title> <journal> Communications of the ACM, </journal> <volume> 36(12) </volume> <pages> 37-53, </pages> <month> December </month> <year> 1993. </year> <month> 16 </month>
Reference-contexts: This specification defines the semantics for unreliable delivery of messages sent to a specific range of IP group addresses. Many solutions for augmenting this protocol to provide reliability, security, fault tolerance, and ordering semantics have been proposed in the literature <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. In all cases, these facilities come at cost in either bandwidth or latency, or both. We propose a solution in which we avoid these additional costs where possible. <p> Section 3 describes the architecture and protocols. In section 4 we analyze the performance 1 of our implementation. In section 5 we conclude with an analysis of the achieved goals and identify future work. 2 Related Work The ISIS system <ref> [8] </ref> defines a suite of protocols that provide varying delivery semantics for multi-cast communication. A key ingredient to these protocols is that they define semantics for atomic broadcast. Intuitively, atomicity of message traffic states that all members of the group receive a message or none do. <p> Traffic is encrypted before transmission. Note that we provide no facilities for determining message authenticity, but simple existing technologies could be used to achieve this. Described in figure 1, the system architecture consists of three protocol layers. This is a similar approach taken by the systems described in <ref> [8, 7] </ref>. In these systems broadcast semantics are used to simplify the group management and security services use the group abstraction to optimize key management. In [8], a developer selects those layers which are required by the application. <p> Described in figure 1, the system architecture consists of three protocol layers. This is a similar approach taken by the systems described in [8, 7]. In these systems broadcast semantics are used to simplify the group management and security services use the group abstraction to optimize key management. In <ref> [8] </ref>, a developer selects those layers which are required by the application. When security is enabled, the security services layer generates and distributes session keys and encrypts the application traffic. When security is disabled, messages are passed to the adjacent layers unmodified. <p> We assume a malicious party, called an adversary may add, modify, or delete any message traffic. The group communication systems found in the literature provide varying levels of support for secure communication. The simplest form of secure communication can be found in <ref> [8] </ref>, where group communication is encrypted via a session key. The other end of the spectrum is described in [7], where a highly sophisticated fault-tolerant framework is presented to enable secure group communication in the presence of actively malicious processes. <p> The messages are totally ordered; all processes receive the messages in the same order. A good overview of the many documented approaches to achieve these properties can be found in [22] and [23]. Originally described in [10] and later implemented in <ref> [8, 5] </ref>, we based our design on token site, two phase commit scheme. The token site, similar to the sequencer in the Amoeba system, is responsible for maintaining the sequencing of messages, by broadcasting message sequence numbers. <p> We make no attempt to recover from the loss of the token server. This is the major drawback to this protocol, in that the server is a single point of failure. There are well documented ways to recover from this type of failure <ref> [8, 5] </ref>. We did not feel these issues were central to this work and are thus omitted. If a client does not receive the original message, but does receive the subsequent commit message, it appeals to the token site for the message by sending a negative acknowledgement.
Reference: [9] <author> L. Gong. Enclaves: </author> <title> enabling secure collaboration over the internet. </title> <booktitle> In Proceedings of 6th USENIX UNIX Security Symposium, </booktitle> <pages> pages 149-159. </pages> <publisher> USENIX Association, </publisher> <month> July </month> <year> 1996. </year>
Reference-contexts: This specification defines the semantics for unreliable delivery of messages sent to a specific range of IP group addresses. Many solutions for augmenting this protocol to provide reliability, security, fault tolerance, and ordering semantics have been proposed in the literature <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. In all cases, these facilities come at cost in either bandwidth or latency, or both. We propose a solution in which we avoid these additional costs where possible. <p> Virtual networks provide developers an abstraction to build applications designed for (logically) local network traffic, but executed across across larger networks. The Enclaves system <ref> [9] </ref> extends this model to include secure group communication. Group communication in the Enclaves system is controlled at a finer grain, where group membership is controlled not only by authentication, but by policies defined by a group definition.
Reference: [10] <author> J. Chang and N.F. Maxemchuk. </author> <title> Reliable broadcast protocols. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(3) </volume> <pages> 252-273, </pages> <month> August </month> <year> 1984. </year>
Reference-contexts: This specification defines the semantics for unreliable delivery of messages sent to a specific range of IP group addresses. Many solutions for augmenting this protocol to provide reliability, security, fault tolerance, and ordering semantics have been proposed in the literature <ref> [2, 3, 4, 5, 6, 7, 8, 9, 10] </ref>. In all cases, these facilities come at cost in either bandwidth or latency, or both. We propose a solution in which we avoid these additional costs where possible. <p> The messages are totally ordered; all processes receive the messages in the same order. A good overview of the many documented approaches to achieve these properties can be found in [22] and [23]. Originally described in <ref> [10] </ref> and later implemented in [8, 5], we based our design on token site, two phase commit scheme. The token site, similar to the sequencer in the Amoeba system, is responsible for maintaining the sequencing of messages, by broadcasting message sequence numbers.
Reference: [11] <author> A Secrity Architecture for Fault Tolerant Systems. M. reiter and k. birman and r. </author> <title> van renesse. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(4) </volume> <pages> 340-371, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: The message traffic within ISIS is protected by an optional encryption service. A direct descendent of ISIS is the HORUS system [4], which is built on many of the same principals and technologies developed in ISIS. One important enhancement was the introduction of a comprehensive security architecture <ref> [11] </ref> for securing group communication. A key element to this architecture is the fault-tolerant key distribution scheme. The process group semantics are used to facilitate secure communication. As the group membership changes, new session keys are distributed.
Reference: [12] <author> Roy Friedman and Robbert van Renesse. </author> <title> Packing messages as a tool for boosting the performance of total ordering protocols. </title> <type> Technical Report TR95-1527, </type> <institution> Cornell University, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: The authors show that a group of 4 members can process &lt; 100kb/sec [4], which is far below the requirements for a high bandwidth system such as videoconferencing. In Horus, implementations without the security feature are very fast; using packing <ref> [12] </ref> the authors have been able to transmit 7500 messages per second. A solution to fault tolerant group communication that endures network partitioning is outlined in the Transis [6] system.
Reference: [13] <author> T. Leighton and S. Micali. </author> <title> Secret-key agreement without public-key cryptography. </title> <booktitle> In Advances in Cryptology: Proceedings of Crypto 93, </booktitle> <year> 1994. </year>
Reference-contexts: Possession of the session key for one group view provides no information in which to infer the key for the next view. Because of our lightweight mechanism, the impact of the potentially large number key distributions is minimal. We have chosen a variant of the Leighton-Micali key distribution algorithm <ref> [13] </ref> to authenticate and transmit the authentication token to the joining member. The advantage of this algorithm is its low cost: Leighton-Micali uses symmetric key encryption throughout, with none of the modular exponentiation operations associated with public key cryptosystems. Public key cryptography 5 requires significantly more computation than symmetric algorithms.
Reference: [14] <author> Bruce Schneier. </author> <title> Applied Cryptography. </title> <publisher> John Wiley & Sons, Inc., </publisher> <address> New York, Chichester, Brisbane, Toronto, Singapore, </address> <note> second edition, </note> <year> 1996. </year>
Reference-contexts: Public key cryptography 5 requires significantly more computation than symmetric algorithms. The de-facto standard for public-key cryptography, RSA, can be up to 100 times slower in software and 1000 times slower in hardware <ref> [14] </ref>. It is required that each potential member of a group, A, including the server has a shared secret K A registered with a trusted third party called the certification authority (CA). This secret key is generated and registered with the CA before the party attempts to join any session.
Reference: [15] <author> R. Rivest. </author> <title> The md5 message digest algorithm. </title> <type> Technical Report RFC1321, </type> <institution> Internet Engineering Task Force, </institution> <month> April </month> <year> 1992. </year>
Reference-contexts: Key distribution protocols based on Leighton-Micali define a term A;B , called the pair key, used to support secret communication between collaborating members (A and B). The view identifier, G, is used to uniquely tag the changing views of group membership. A MD5 hash <ref> [15] </ref> for the text x is described by H x . A session is started by the initial member called the session leader. The session leader initializes the session by generating a session key and starting the process group management protocol.
Reference: [16] <institution> Federal Information Processing Standards Publication. Data encryption standard. </institution> <type> Technical report, </type> <institution> National Bureau of Standards, </institution> <year> 1977. </year>
Reference-contexts: The session leader initializes the session by generating a session key and starting the process group management protocol. The session leader will server as the arbiter of group membership for that session (the session leader will be the lock server, see section 3.2). We use the DES encryption standard <ref> [16] </ref> for all encryption in the system. This standard uses 56-bit keys, the strength of which has been in debate. If needed, other symmetric algorithms such as triple-DES [17] or DES-X [18] may be used to strengthen security.
Reference: [17] <author> American Bankers Association. </author> <title> American national standard for financial institution key management. </title> <type> Technical Report ANSI X.917, </type> <institution> ANSI, </institution> <year> 1985. </year>
Reference-contexts: We use the DES encryption standard [16] for all encryption in the system. This standard uses 56-bit keys, the strength of which has been in debate. If needed, other symmetric algorithms such as triple-DES <ref> [17] </ref> or DES-X [18] may be used to strengthen security. A prospective member initiates the session join by sending a message to the session leader containing her identity and a nonce value. The session leader then obtains the pair key A;B from the CA.
Reference: [18] <author> J. Kilian and P. Rogaway. </author> <title> How to protect des against exhaustive key search. </title> <booktitle> In Proceedings of Crypto '96, </booktitle> <month> August </month> <year> 1996. </year>
Reference-contexts: We use the DES encryption standard [16] for all encryption in the system. This standard uses 56-bit keys, the strength of which has been in debate. If needed, other symmetric algorithms such as triple-DES [17] or DES-X <ref> [18] </ref> may be used to strengthen security. A prospective member initiates the session join by sending a message to the session leader containing her identity and a nonce value. The session leader then obtains the pair key A;B from the CA.
Reference: [19] <author> Flaviu Cristian. </author> <title> Reaching agreement on processor group membership in synchronous distributed system. </title> <journal> Distributed Computing, </journal> (4):175-187, October 1991. 
Reference-contexts: These error conditions may be caused by a myriad of problems including hardware, software, or network failures. There are many approaches to process group membership in the literature. We have decided to design a hybrid or two such protocols <ref> [19, 20] </ref>, which leverages the properties of the underlying broadcast protocol (see section 3.3). In [20], the authors describe a lightweight solution for processor group membership in a unreliable broadcast network. <p> The protocol is complicated by the error detection and recovery, much of which is due to the unreliable transport mechanism. We propose a solution where we discard the error detection facilities, but use the group membership ideas. The protocol described in <ref> [19] </ref> has strong theoretic foundations, which are formally stated in [21]. This protocol is based on a global locking mechanism, wherein group consistency is maintained by installation of negotiated views of the membership. Because of performance considerations, we 8 only apply error detection principals described in this work.
Reference: [20] <author> L. Rodrigues, P. Verissimo, and J. Rufino. </author> <title> A low level processor group membership protocol for lans. </title> <booktitle> In 13th International Conference on Distributed Computing Systems, </booktitle> <year> 1993. </year>
Reference-contexts: These error conditions may be caused by a myriad of problems including hardware, software, or network failures. There are many approaches to process group membership in the literature. We have decided to design a hybrid or two such protocols <ref> [19, 20] </ref>, which leverages the properties of the underlying broadcast protocol (see section 3.3). In [20], the authors describe a lightweight solution for processor group membership in a unreliable broadcast network. <p> There are many approaches to process group membership in the literature. We have decided to design a hybrid or two such protocols [19, 20], which leverages the properties of the underlying broadcast protocol (see section 3.3). In <ref> [20] </ref>, the authors describe a lightweight solution for processor group membership in a unreliable broadcast network. The consistency of membership is protected by a locking mechanism, allowing only one process to alter the group membership at a time. <p> This protocol is based on a global locking mechanism, wherein group consistency is maintained by installation of negotiated views of the membership. Because of performance considerations, we 8 only apply error detection principals described in this work. It is this scheme that is combined with the relevant pieces of <ref> [20] </ref> that comprises our protocol. We begin our description of the protocol by outlining the state held at each host process. Each member process contains a group identifier and a list of the current membership. One distinct member, called the lock server, maintains a lock for group view.
Reference: [21] <author> Yuri Gurevich and Raghu Mani. </author> <title> Group membership protocol: Specification and verification. </title> <editor> In Ed. E. Brger, editor, </editor> <title> Specification and Validation Methods. </title> <publisher> Oxford University Press. </publisher>
Reference-contexts: We propose a solution where we discard the error detection facilities, but use the group membership ideas. The protocol described in [19] has strong theoretic foundations, which are formally stated in <ref> [21] </ref>. This protocol is based on a global locking mechanism, wherein group consistency is maintained by installation of negotiated views of the membership. Because of performance considerations, we 8 only apply error detection principals described in this work.
Reference: [22] <author> Andrew Tanenbaum. </author> <title> Distributed Operating Systems. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, first edition, </address> <year> 1995. </year>
Reference-contexts: The messages are atomic; either all processes receive a message or 10 with a commit. none do. The messages are totally ordered; all processes receive the messages in the same order. A good overview of the many documented approaches to achieve these properties can be found in <ref> [22] </ref> and [23]. Originally described in [10] and later implemented in [8, 5], we based our design on token site, two phase commit scheme. The token site, similar to the sequencer in the Amoeba system, is responsible for maintaining the sequencing of messages, by broadcasting message sequence numbers.
Reference: [23] <author> Sape Mullender. </author> <title> Distributed Systems. </title> <publisher> Addison-Wesley, </publisher> <address> New York, New York, first edition, </address> <year> 1993. </year>
Reference-contexts: The messages are atomic; either all processes receive a message or 10 with a commit. none do. The messages are totally ordered; all processes receive the messages in the same order. A good overview of the many documented approaches to achieve these properties can be found in [22] and <ref> [23] </ref>. Originally described in [10] and later implemented in [8, 5], we based our design on token site, two phase commit scheme. The token site, similar to the sequencer in the Amoeba system, is responsible for maintaining the sequencing of messages, by broadcasting message sequence numbers.
Reference: [24] <author> P. Honeyman, A. Adamson, K. Coffman, J. Janakiraman, R. Jerdonek, and J. Rees. </author> <title> Provably secure videoconferencing. </title> <type> Technical report, </type> <institution> Center for Information Technology, University of Michigan, </institution> <month> January </month> <year> 1997. </year>
Reference-contexts: Modifications may be made to remove this latency by pre-encrypting each message while a previous message is being transmitted. Secondly, faster encryption schemes may be used to decrease this cost. In the PSV system <ref> [24] </ref> the authors have implemented two fast ciphers, RC4 and VRA, which have been found to be four and eight times faster than DES, respectively. In integrating with PSV, we will add support for these ciphers.
Reference: [25] <author> S. Paul, K. Sabnani, J. Lin, and S. Bhattacharyya. </author> <title> Reliable multicast transport protocol (rmtp). </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 15(3) </volume> <pages> 407-421, </pages> <month> April </month> <year> 1997. </year> <month> 17 </month>
Reference-contexts: At some undetermined point, the overhead of this NAK processing begins to significantly effect the total throughput. This problem is known as acknowledgement implosion. In <ref> [25] </ref>, the authors define a protocol in which a tree of multicast subgroups is connected. In each subgroup, a distinct member, known as the primary receiver performs acknowledgements for the group as a whole to a parent subgroup in the tree.
References-found: 25

