URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/tcm/www/tcm_papers/mowry_luk_micro30.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/user/tcm/www/Papers.html
Root-URL: 
Email: tcm@cs.cmu.edu luk@eecg.toronto.edu  
Title: Predicting Data Cache Misses in Non-Numeric Applications Through Correlation Profiling  
Author: Todd C. Mowry Chi-Keung Luk 
Address: Pittsburgh, PA 15213 Toronto, Canada M5S 3G4  
Affiliation: Department of Computer Science Department of Computer Science Carnegie Mellon University University of Toronto  
Abstract: To maximize the benefit and minimize the overhead of software-based latency tolerance techniques, we would like to apply them precisely to the set of dynamic references that suffer cache misses. Unfortunately, the information provided by the state-of-the-art cache miss profiling technique (summary profiling) is inadequate for references with intermediate miss ratios|it results in either failing to hide latency, or else inserting unnecessary overhead. To overcome this problem, we propose and evaluate a new technique| correlation profiling|which improves predictability by correlating the caching behavior with the associated dynamic context. Our experimental results demonstrate that roughly half of the 22 non-numeric applications we study can potentially enjoy significant reductions in memory stall time by exploiting at least one of the three forms of correlation profiling we consider. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. G. Abraham and B. R. Rau. </author> <title> Predicting load latencies using cache profiling. </title> <type> Technical Report HPL-94-110, </type> <institution> Hewlett-Packard Company, </institution> <month> November </month> <year> 1994. </year>
Reference-contexts: They used this approach to reduce the cache miss ratios of nine SPEC89 benchmarks, in-cluding both integer and floating-point programs. In a follow-up study <ref> [1] </ref>, they also report the improvement in effective cache miss ratio. In contrast with this earlier work, our study has focused on correlation profiling, which is a novel technique that provides superior prediction accuracy relative to summary profiling.
Reference: [2] <author> S. G. Abraham, R. A. Sugumar, D. Windheiser, B. R. Rau, and R. Gupta. </author> <title> Predictability of load/store instruction latencies. </title> <booktitle> In MICRO-26, </booktitle> <pages> pages 139-152, </pages> <month> De-cember </month> <year> 1993. </year>
Reference-contexts: state-of-the-art approach for dealing with inter with the dynamic context may improve predictability. (X=Y means X misses out of Y dynamic references.) mediate miss ratios is to treat all static memory references with miss ratios above or below a certain threshold as though they always miss or always hit, respectively <ref> [2] </ref>. However, this all-or-nothing strategy will fail to hide latency when references are predicted to hit but actually miss, and will induce unnecessary overhead when references are predicted to miss but actually hit. <p> We applied this technique to software-controlled prefetching, and observed that correlation profiling offers superior performance over summary profiling when prefetching on a modern superscalar processor [8]. 5 Related Work Abraham et al. <ref> [2] </ref> investigated using summary profiling to associate a single latency tolerance strategy (i.e. either attempt to tolerate the latency or not) with each profiled load. They used this approach to reduce the cache miss ratios of nine SPEC89 benchmarks, in-cluding both integer and floating-point programs.
Reference: [3] <author> G. Ammons, T. Ball, and J. Larus. </author> <title> Exploiting hardware performance counters with flow and context sensitive profiling. </title> <booktitle> In PLDI'97, </booktitle> <month> June </month> <year> 1997. </year>
Reference: [4] <author> P. Chang, E. Hao, T. Yeh, and Y. Patt. </author> <title> Branch classification: a new mechanism for improving branch predictor performance. </title> <booktitle> In MICRO-27, </booktitle> <month> November </month> <year> 1994. </year>
Reference-contexts: Note that analogous forms of all three types of correlation profiling have been explored previously in the context of branch prediction <ref> [4, 9, 14, 15] </ref> 1.3 Objectives and Overview The goal of this paper is to determine whether correlation profiling can predict data cache misses more accurately in non-numeric codes than summary profiling, and if so, can we translate this into significant performance improvements by applying software-based latency tolerance techniques with greater <p> The three forms of correlation explored in this study (control-flow, self, and global) were inspired by earlier work on using correlation to enhance branch prediction accuracies <ref> [4, 9, 14, 15] </ref>.
Reference: [5] <author> K.D. Cooper, M.W. Hall, and K. Kennedy. </author> <title> A methodology for procedure cloning. </title> <journal> Computer Languages, </journal> <volume> 19(2), </volume> <month> April </month> <year> 1993. </year>
Reference-contexts: This is good news, since control-flow correlation profiling is the easiest case to exploit in practice by using procedure cloning <ref> [5] </ref> to distinguish call-chain dependent behavior.
Reference: [6] <author> M. Horowitz, M. Martonosi, T. C. Mowry, and M. D. Smith. </author> <title> Informing memory operations: Providing memory performance feedback in modern processors. </title> <booktitle> In ISCA'96, </booktitle> <pages> pages 260-270, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: Rather than settling for this sub-optimal performance, we would prefer to predict dynamic hits and misses more accurately. 1.2 Correlation Profiling By exposing caching behavior directly to the user, informing memory operations <ref> [6] </ref> enable new classes of lightweight profiling tools which can collect more sophisticated information than simply the per-reference miss ratios. For example, cache misses can be correlated with information such as recent control-flow paths, the cache outcomes of previous references, etc., to help predict dynamic cache miss behavior. <p> Although we rely on simulation to capture our profiling information in this study, correlation profiling is a practical technique since it could be performed with relatively little overhead using informing memory operations <ref> [6] </ref>. The remainder of this paper is organized as follows. We begin in Section 2 by discussing the three different types of history information that we use for correlation profiling. Sections 3 and 4 present our experimental methodology and our experimental results which quantify the performance advantages of correlation profiling.
Reference: [7] <author> T. C. Mowry, M. S. Lam, and A. Gupta. </author> <title> Design and evaluation of a compiler algorithm for prefetching. </title> <booktitle> In ASPLOS-V, </booktitle> <pages> pages 62-73, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: To further tolerate latency, a number of promising software-based techniques have been proposed. For example, the compiler can tolerate modest latencies by scheduling non-blocking loads early relative to when their results are consumed [11], and can tolerate larger latencies by inserting prefetch instructions <ref> [7] </ref>. While these software-based techniques provide latency-hiding benefits, they also typically incur run-time overheads. For example, aggressive scheduling of non-blocking loads increases register lifetimes 0 Copyright 1997 IEEE. <p> Therefore to maximize overall performance, we would like to apply a latency-tolerance technique only to the precise set of dynamic references that would suffer misses. While previous work has addressed this problem for numeric codes <ref> [7] </ref>, this paper focuses on the more difficult but important case of isolating dynamic miss instances in non-numeric applications. 1.1 Predicting Data Cache Misses in Non-Numeric Applications To overcome the compiler's inability to analyze data locality in non-numeric codes, we can instead make use of profiling information.
Reference: [8] <author> T. C. Mowry and C.-K. Luk. </author> <title> Predicting data cache misses in non-numeric applications through correlation profiling. </title> <type> Technical Report CMU-CS-97-175, </type> <institution> Carnegie Mellon University, </institution> <month> September </month> <year> 1997. </year>
Reference-contexts: For control-flow correlation, we typically maintained a path length of 200 basic blocks|in some cases this resulted in such a large number of distinct paths that we were forced to measure only 50 basic blocks. For the self and global 1 In our technical report <ref> [8] </ref>, we also model a modern superscalar processor (the MIPS R10000), but space constraints prevent us from showing that data here. Table 1: Benchmark characteristics. <p> Due to space constraints, we show only the eleven cases most significant cases (the other cases can be found in our technical report <ref> [8] </ref>). Each bar profiling, C = control-flow correlation, S = self correlation, G = global correlation). <p> Although space constraints prevent us from presenting the full details here, we briefly summarize the major results (for more detail, we refer the reader to an earlier publication <ref> [8] </ref>). Although global correlation makes excellent predictions in some cases by correlating behavior across different load instructions (e.g., eqntott), in most cases it essentially assimilates self correlation, but does not perform quite as well since it records less history for a given load. <p> We applied this technique to software-controlled prefetching, and observed that correlation profiling offers superior performance over summary profiling when prefetching on a modern superscalar processor <ref> [8] </ref>. 5 Related Work Abraham et al. [2] investigated using summary profiling to associate a single latency tolerance strategy (i.e. either attempt to tolerate the latency or not) with each profiled load.
Reference: [9] <author> S. Pan, K. So, and J. Rahmeh. </author> <title> Improving the accuracy of dynamic branch prediction using branch correlation. </title> <booktitle> In ASPLOS-V, </booktitle> <pages> pages 76-84, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Note that analogous forms of all three types of correlation profiling have been explored previously in the context of branch prediction <ref> [4, 9, 14, 15] </ref> 1.3 Objectives and Overview The goal of this paper is to determine whether correlation profiling can predict data cache misses more accurately in non-numeric codes than summary profiling, and if so, can we translate this into significant performance improvements by applying software-based latency tolerance techniques with greater <p> The three forms of correlation explored in this study (control-flow, self, and global) were inspired by earlier work on using correlation to enhance branch prediction accuracies <ref> [4, 9, 14, 15] </ref>.
Reference: [10] <author> A. Rogers, M. Carlisle, J. Reppy, and L. Hendren. </author> <title> Supporting dynamic data structures on distributed memory machines. </title> <journal> ACM Trans. on Programming Languages and Systems, </journal> <volume> 17(2), </volume> <month> March </month> <year> 1995. </year>
Reference-contexts: In this case, we might expect a strong correlation between whether htab [i] (the list head pointer) misses and whether subsequent accesses to curr!data (the list elements) also miss. Similarly, if the same entry is accessed twice within a short interval (e.g., htab <ref> [10] </ref>), the fact that the head pointer hits is a strong indicator that the list elements (e.g., A!data and B!data) will also hit. <p> 3 Experimental Methodology To evaluate the potential performance benefit of correlation profiling, we measured its impact on the following 22 non-numeric applications: the entire SPEC95 integer benchmark suite, the additional integer benchmarks contained in the SPEC92 suite, uniprocessor versions of two graphics applications from SPLASH-2 [13], eight applications from Olden <ref> [10] </ref> (a suite of pointer-intensive benchmarks), and the standard UNIX utility awk. Table 1 briefly summarizes these applications, including the input data sets that were run to completion in each case. We compiled each application with -O2 optimization using the standard MIPS C compilers under IRIX 5.3.
Reference: [11] <author> A. Rogers and K. Li. </author> <title> Software support for speculative loads. </title> <booktitle> In ASPLOS-V, </booktitle> <pages> pages 38-50, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: To further tolerate latency, a number of promising software-based techniques have been proposed. For example, the compiler can tolerate modest latencies by scheduling non-blocking loads early relative to when their results are consumed <ref> [11] </ref>, and can tolerate larger latencies by inserting prefetch instructions [7]. While these software-based techniques provide latency-hiding benefits, they also typically incur run-time overheads. For example, aggressive scheduling of non-blocking loads increases register lifetimes 0 Copyright 1997 IEEE.
Reference: [12] <author> M. D. Smith. </author> <title> Tracing with pixie. </title> <type> Technical Report CSL-TR-91-497, </type> <institution> Stanford University, </institution> <month> November </month> <year> 1991. </year>
Reference-contexts: Table 1 briefly summarizes these applications, including the input data sets that were run to completion in each case. We compiled each application with -O2 optimization using the standard MIPS C compilers under IRIX 5.3. We used the MIPS pixie utility <ref> [12] </ref> to instrument these binaries, and piped the resulting trace into our detailed performance simulator.
Reference: [13] <author> S. C. Woo, M. Ohara, E. Torrie, J. P. Singh, and A. Gupta. </author> <title> The SPLASH-2 programs: Characterization and methodological considerations. </title> <booktitle> In ISCA'95, </booktitle> <pages> pages 24-38, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: possible with summarized miss ratios. 3 Experimental Methodology To evaluate the potential performance benefit of correlation profiling, we measured its impact on the following 22 non-numeric applications: the entire SPEC95 integer benchmark suite, the additional integer benchmarks contained in the SPEC92 suite, uniprocessor versions of two graphics applications from SPLASH-2 <ref> [13] </ref>, eight applications from Olden [10] (a suite of pointer-intensive benchmarks), and the standard UNIX utility awk. Table 1 briefly summarizes these applications, including the input data sets that were run to completion in each case.
Reference: [14] <author> T.-Y. Yeh and Y. Patt. </author> <title> A comparison of dynamic branch predictors that use two levels of branch history. </title> <booktitle> In ISCA'93, </booktitle> <pages> pages 257-266, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Note that analogous forms of all three types of correlation profiling have been explored previously in the context of branch prediction <ref> [4, 9, 14, 15] </ref> 1.3 Objectives and Overview The goal of this paper is to determine whether correlation profiling can predict data cache misses more accurately in non-numeric codes than summary profiling, and if so, can we translate this into significant performance improvements by applying software-based latency tolerance techniques with greater <p> The three forms of correlation explored in this study (control-flow, self, and global) were inspired by earlier work on using correlation to enhance branch prediction accuracies <ref> [4, 9, 14, 15] </ref>.
Reference: [15] <author> C. Young and M. Smith. </author> <title> Improving the accuracy of static branch prediction using branch correlation. </title> <booktitle> In ASPLOS-VI, </booktitle> <pages> pages 232-241, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: Note that analogous forms of all three types of correlation profiling have been explored previously in the context of branch prediction <ref> [4, 9, 14, 15] </ref> 1.3 Objectives and Overview The goal of this paper is to determine whether correlation profiling can predict data cache misses more accurately in non-numeric codes than summary profiling, and if so, can we translate this into significant performance improvements by applying software-based latency tolerance techniques with greater <p> The three forms of correlation explored in this study (control-flow, self, and global) were inspired by earlier work on using correlation to enhance branch prediction accuracies <ref> [4, 9, 14, 15] </ref>.
References-found: 15

