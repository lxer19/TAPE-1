URL: ftp://ftp.csd.uu.se/pub/papers/reports/0108.ps.gz
Refering-URL: http://www.csd.uu.se/papers/reports.html
Root-URL: 
Phone: Phone: +461818 25 00 Fax: +461851 19 25  
Title: Semantical Properties of Encodings in Logic Programming  
Author: Jonas Barklund, Stefania Costantini Pierangelo Dell'Acqua and Gaetano A. Lanzarone 
Address: Box 311, S-751 05 Uppsala, Sweden  
Affiliation: Uppsala University Computing Science Department  Dipartimento di Scienze dell'Informazione, Universita degli Studi di Milano  
Abstract: UPMAIL Technical Report No. 108 1 June, 1995 Abstract A metaprogram is a program where data denotes another (object) program. The relation between the metalevel data and the object program is specified through encodings. In this paper we discuss the expressi-vity of various forms of encodings (both ground and non-ground) that have appeared in literature. This is done in a context where encodings are expressed by means of equational theories, and the related unification facility by means of a rewrite system. Then we analyze the formal properties that the associated rewrite systems must satisfy when integrated into a computational framework. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Barklund, J., Boberg, K. and Dell'Acqua, P., </author> <title> A Basis for a Multilevel Met-alogic Programming Language, </title> <editor> in: F. Turini (ed.), </editor> <booktitle> Proc. 4th Intl. Workshop on Metaprogramming in Logic, </booktitle> <publisher> LNCS 883, Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference-contexts: Many applications have been developed by means of meta-programs, in areas such as knowledge representation and reasoning, synthesis and analysis of programs and for modeling evaluation strategies. This has led to the development of various metalogic programming languages <ref> [1, 4, 5, 6, 10, 15, 18, 21] </ref>. Therefore, analysis and comparison of metalevel systems is useful for evaluating the proposed approaches, for designing future systems and for a possible integration of metaprogramming with other extensions to logic programming, such as, for example, constraint logic programming.
Reference: [2] <author> Barklund, J., Costantini, S., Dell'Acqua, P. and Lanzarone, G. A., </author> <title> SLD-Resolution with Reflection, </title> <editor> in: M. Bruynooghe (ed.), </editor> <booktitle> Logic Programming - Proc. 1994 Intl. Symp., </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1994. </year>
Reference-contexts: It can be explicit (if it is specified in the program) or, more generally, implicit (if conditions for communications are specified in the definition of the proof-theoretical device). Previously, we have formalized the definition of encodings as equational theories, and the integration of the associated rewrite system in SLD-resolution <ref> [2] </ref>, and we have analyzed the resulting extension from the proof-theoretical point of view [3]. <p> The following examples show the formalization of some encodings appearing in literature. (For an overview of encodings, cf. van Harmelen [23].) Example 3.1 The following axioms characterize name terms and compo sitional names for L, forming a part of the Horn clause equality theory UN <ref> [2] </ref>. (1) For each constant or metaconstant c n , n 0, "c n = c n+1 . (2) For each function symbol f (having some arity k), 8x 1 : : : 8x k ("(f (x 1 ; : : : ; x k )) = [f 1 ; "x <p> The idea of reflective SLD-resolution is that metalevel clauses having a conclusion of the form solve (ff) play the role of introducing additional clauses for every predicate whose instances match ff. The following definition of SLD fl -resolution is slightly different from the one presented elsewhere <ref> [2] </ref>.
Reference: [3] <author> Barklund, J., Costantini, S., Dell'Acqua, P. and Lanzarone, G. A., </author> <title> Integrating Reflection into SLD-Resolution, </title> <editor> in: A. Momigliano and M. Ornaghi (eds.), </editor> <booktitle> Proc. Post-Conf. Ws. on Proof-Theoretical Extensions of Logic Programming, </booktitle> <year> 1994. </year>
Reference-contexts: Previously, we have formalized the definition of encodings as equational theories, and the integration of the associated rewrite system in SLD-resolution [2], and we have analyzed the resulting extension from the proof-theoretical point of view <ref> [3] </ref>. The aim of this paper is instead (i) to discuss and compare the expressivity of various forms of encodings appeared in literature, and (ii) to analyze the properties that the corresponding rewrite systems have to satisfy when integrated into a computational framework.
Reference: [4] <author> Bowen, K. A. and Kowalski, R. A., </author> <title> Amalgamating Language and Metalan-guage in Logic Programming, </title> <editor> in: K. L. Clark and S. A. Tarnlund (eds.), </editor> <booktitle> Logic Programming, </booktitle> <publisher> Academic Press, </publisher> <address> London, </address> <year> 1982. </year>
Reference-contexts: Many applications have been developed by means of meta-programs, in areas such as knowledge representation and reasoning, synthesis and analysis of programs and for modeling evaluation strategies. This has led to the development of various metalogic programming languages <ref> [1, 4, 5, 6, 10, 15, 18, 21] </ref>. Therefore, analysis and comparison of metalevel systems is useful for evaluating the proposed approaches, for designing future systems and for a possible integration of metaprogramming with other extensions to logic programming, such as, for example, constraint logic programming. <p> To achieve our aim, we introduce an extension to SLD-resolution which allows metalevel computation based on the linking rules introduced by Bowen & Kowalski <ref> [4] </ref>. We take as basis the reflective SLD-resolution of Reflective Prolog, where the linking rules are integrated into the definition of the resolution.
Reference: [5] <author> Cervesato, I. and Rossi, G., </author> <title> Logic Meta-Programming Facilities in 0 Log, </title> <editor> in: A. Pettorossi (ed.), </editor> <booktitle> Meta-Programming in Logic, </booktitle> <publisher> LNCS 649, Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year> <month> 14 </month>
Reference-contexts: Many applications have been developed by means of meta-programs, in areas such as knowledge representation and reasoning, synthesis and analysis of programs and for modeling evaluation strategies. This has led to the development of various metalogic programming languages <ref> [1, 4, 5, 6, 10, 15, 18, 21] </ref>. Therefore, analysis and comparison of metalevel systems is useful for evaluating the proposed approaches, for designing future systems and for a possible integration of metaprogramming with other extensions to logic programming, such as, for example, constraint logic programming.
Reference: [6] <author> Christiansen, H., </author> <title> Efficient and Complete Demo Predicates for Definite Clause Languages, Datalogiske Skrifter, </title> <type> Technical Report 51, </type> <institution> Dept. of Computer Science, Roskilde University, </institution> <year> 1994. </year>
Reference-contexts: Many applications have been developed by means of meta-programs, in areas such as knowledge representation and reasoning, synthesis and analysis of programs and for modeling evaluation strategies. This has led to the development of various metalogic programming languages <ref> [1, 4, 5, 6, 10, 15, 18, 21] </ref>. Therefore, analysis and comparison of metalevel systems is useful for evaluating the proposed approaches, for designing future systems and for a possible integration of metaprogramming with other extensions to logic programming, such as, for example, constraint logic programming.
Reference: [7] <author> Clark, K. L., </author> <title> Negation as Failure, </title> <editor> in: H. Gallaire and J. Minker (eds.), </editor> <booktitle> Logic and Data Bases, </booktitle> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1978. </year>
Reference-contexts: If P is a program and E a Horn clause equality theory, then (P; E) is a logic program. E contains axioms characterizing = (for example, the equality interpretation of = and the freeness axioms proposed by Clark <ref> [7] </ref>), and P contains clauses representing the problem at hand. 3 Formalizing Encodings using Equality Theories and Corresponding Rewrite Systems Given L as a language having names for its own expressions, what we need now is a way to formalize (i) the relation between terms and the corresponding name terms, and
Reference: [8] <author> Costantini, S., Dell'Acqua, P. and Lanzarone, G. A., </author> <title> Extending Horn Clause Theories by Reflection Principles, </title> <editor> in: C. MacNish, D. Pearce and L. M. Pereira (eds.), </editor> <booktitle> Logics in Artificial Intelligence, </booktitle> <publisher> LNAI 838, Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference-contexts: Such additional axioms of the form ff e 1 ; : : : ; e q ; solve (fi) are called reflection axioms. In the field of AI, a number of forms of reasoning can be modeled by means of different kinds of reflection axioms <ref> [8] </ref>. In this approach, we define the reflection axioms in such a way that whenever solve (ff) is provable at the metalevel, ff is provable at the object level.
Reference: [9] <author> Costantini, S. and Lanzarone, G. A., </author> <title> A Metalogic Programming Language, </title> <editor> in: G. Levi and M. Martelli (eds.), </editor> <booktitle> Proc. 6th Intl. Conf. on Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1989. </year>
Reference-contexts: In the most general form, this communication provides full visibility of the object level on the metalevel, while the policy of knowledge interchange from the metalevel to the object level can change, from no visibility (e.g., in Prolog metainterpreters) to full visibility (e.g., in Reflective Prolog <ref> [9, 10] </ref>). The dynamic communication of knowledge between levels has usually been called reflection. It can be explicit (if it is specified in the program) or, more generally, implicit (if conditions for communications are specified in the definition of the proof-theoretical device).
Reference: [10] <author> Costantini, S. and Lanzarone, G. A., </author> <title> A Metalogical Programming Approach: Language, Semantics and Applications, </title> <journal> J. Exper. Theor. Artificial Intelligence, </journal> <month> 6 </month> <year> (1994). </year>
Reference-contexts: Many applications have been developed by means of meta-programs, in areas such as knowledge representation and reasoning, synthesis and analysis of programs and for modeling evaluation strategies. This has led to the development of various metalogic programming languages <ref> [1, 4, 5, 6, 10, 15, 18, 21] </ref>. Therefore, analysis and comparison of metalevel systems is useful for evaluating the proposed approaches, for designing future systems and for a possible integration of metaprogramming with other extensions to logic programming, such as, for example, constraint logic programming. <p> In the most general form, this communication provides full visibility of the object level on the metalevel, while the policy of knowledge interchange from the metalevel to the object level can change, from no visibility (e.g., in Prolog metainterpreters) to full visibility (e.g., in Reflective Prolog <ref> [9, 10] </ref>). The dynamic communication of knowledge between levels has usually been called reflection. It can be explicit (if it is specified in the program) or, more generally, implicit (if conditions for communications are specified in the definition of the proof-theoretical device). <p> The second reason concerns the fact that encodings influence the semantics of metalogic languages. In fact, metalanguages that are based on formally defined encodings have clear and well-defined declarative semantics <ref> [10, 21, 22] </ref>. In contrast, in order to give a semantic account of a metalogic programming language that employs a trivial encoding (for example, the one outlined in Example 3.2), two main possibilities have been considered up to now.
Reference: [11] <author> De Schreye, D. and Martens, B., </author> <title> A Sensible Least Herbrand Semantics for Untyped Vanilla Meta-Programming and its Extension to a Limited Form of Amalgamation, </title> <editor> in: A. Pettorossi (ed.), </editor> <booktitle> Meta-Programming in Logic, </booktitle> <publisher> LNCS 649, Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: In contrast, in order to give a semantic account of a metalogic programming language that employs a trivial encoding (for example, the one outlined in Example 3.2), two main possibilities have been considered up to now. De Schreye & Martens <ref> [11] </ref> characterize a class of programs for which the least Herbrand model semantics still holds for the vanilla metainterpreter and a limited form of amalgamation. This is the class of language-independent programs, where language independence extends both domain independence and range restrictedness.
Reference: [12] <author> Dell'Acqua, P., </author> <title> SLD-Resolution with Reflection, </title> <type> Ph.L Thesis, </type> <institution> Uppsala University, Uppsala, </institution> <year> 1995. </year>
Reference-contexts: We have proved the rewrite system R UN to be correct and canonical <ref> [12] </ref>. The equality theory of the next example axiomatizes a kind of encoding that is similar to the one proposed for Reflective Prolog. Example 3.8 Let UN 0 be the equality theory of Example 3.4.
Reference: [13] <author> Falaschi, M., Levi, G., Martelli, M. and Palamidessi, C., </author> <title> A new Declarative Semantics for Logic Languages, </title> <editor> in: R. A. Kowalski and K. A. Bowen (eds.), </editor> <booktitle> Proc. 5th Intl. Conf. Symp. on Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1988. </year>
Reference-contexts: Instead they point out another possibility for giving a declarative semantics to the vanilla metainterpreter and 13 some enhanced metainterpreters, by abandoning the least Herbrand seman-tics in favour of the S-semantics <ref> [13] </ref>. Besides resorting to a different semantics, that approach can be applied (as the authors recognize) to enhanced metainterpreters only when there exists a corresponding pure object-level solution. Again, this restricts the power of the language, undermining, in our view, the motivation for using metalevel systems altogether.
Reference: [14] <author> Hill, P. M. and Lloyd, J. W., </author> <title> Analysis of Metaprograms, </title> <editor> in: H. Abramson and M. H. Rogers (eds.), </editor> <booktitle> Meta-Programming in Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1988. </year>
Reference-contexts: Many kinds of metaprograms need to reason about the computational behaviour of the object program. In that case, a ground encoding appears to be more suitable. Example 3.3 A more expressive encoding (this is reminiscent of the encoding proposed by Hill & Lloyd <ref> [14] </ref>) could be axiomatized as follows. 4 (1) For each constant c, "c = constant name (c 1 ). (2) For each function symbol f (having some arity k), 8x 1 : : : 8x k ("(f (x 1 ; : : : ; x k )) = function (functor (f
Reference: [15] <author> Hill, P. M. and Lloyd, J. W., </author> <title> The Godel Programming Language, </title> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1994. </year>
Reference-contexts: Many applications have been developed by means of meta-programs, in areas such as knowledge representation and reasoning, synthesis and analysis of programs and for modeling evaluation strategies. This has led to the development of various metalogic programming languages <ref> [1, 4, 5, 6, 10, 15, 18, 21] </ref>. Therefore, analysis and comparison of metalevel systems is useful for evaluating the proposed approaches, for designing future systems and for a possible integration of metaprogramming with other extensions to logic programming, such as, for example, constraint logic programming.
Reference: [16] <author> Jaffar, J., Lassez, J.-L. and Maher, M. J., </author> <title> A Theory of Complete Logic Programs with Equality, </title> <journal> J. Logic Programming, </journal> <volume> 3 </volume> <month> 211-223 </month> <year> (1984). </year>
Reference-contexts: To generalize the equality, Jaffar et al. <ref> [16] </ref> proposed the use of quotient universes.
Reference: [17] <author> Jaffar, J., Lassez, J.-L. and Maher, M. J., </author> <title> A Logic Programming Language Scheme, </title> <editor> in: D. DeGroot and G. Lindstrom (eds.), </editor> <title> Logic Programming| Functions, Relations, and Equations, </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1986. </year>
Reference-contexts: An extension of SLD-resolution, which allows metalevel computation and interlevel communication through reflection, is described in Section 4. Then, in Section 5 we define the declarative semantics of the extended SLD-resolution in the general framework defined by Jaffar et al. <ref> [17] </ref>. In Section 6, finally, we investigate what requirements must be fulfilled by the chosen encoding in order to obtain soundness and completeness of the extended SLD-resolution. 2 A Metalanguage In this section we introduce a metalogic definite clause language L. <p> In this approach, we define the reflection axioms in such a way that whenever solve (ff) is provable at the metalevel, ff is provable at the object level. Reflective E-models are clearly models in the usual sense <ref> [17] </ref>, as they are obtained by extending a given logic program with a set of definite clauses. Therefore the model intersection property still holds, and there exists a least reflective E-model of (P; E), indicated in the following as LRM (P;E) .
Reference: [18] <author> Jiang, Y. J., </author> <title> Ambivalent Logic as the Semantic Basis of Metalogic Programming: I, </title> <editor> in: P. Van Hentenryck (ed.), </editor> <booktitle> Proc. 11th Intl. Conf. on Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1994. </year>
Reference-contexts: Many applications have been developed by means of meta-programs, in areas such as knowledge representation and reasoning, synthesis and analysis of programs and for modeling evaluation strategies. This has led to the development of various metalogic programming languages <ref> [1, 4, 5, 6, 10, 15, 18, 21] </ref>. Therefore, analysis and comparison of metalevel systems is useful for evaluating the proposed approaches, for designing future systems and for a possible integration of metaprogramming with other extensions to logic programming, such as, for example, constraint logic programming. <p> Then we have an ambiguity because it could be either a name term of the form [f; x 1 ; : : : ; x k ] or a term of the form f (x 1 ; : : : ; x k ). (Jiang introduces an ambivalent logic <ref> [18] </ref> where he tackles this problem by making no distinction between sentences and terms.) However, for many metaprograms such a representation is inadequate because it does not allow investigating on the instantiation of variables in queries.
Reference: [19] <author> Levi, G. and Ramundo, D., </author> <title> A Formalization of Metaprogramming for Real, </title> <editor> in: D. S. Warren (ed.), </editor> <booktitle> Logic Programming | Proc. 10th Intl. Conf. on Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, </address> <year> 1993. </year> <month> 15 </month>
Reference-contexts: This is the class of language-independent programs, where language independence extends both domain independence and range restrictedness. As already noted by Levi & Ramundo <ref> [19] </ref>, however, the class of language independent programs is too small: it includes deductive database programs, but rules out any logic program computing partially determined data structures.
Reference: [20] <author> Lloyd, J. W., </author> <title> Foundations of Logic Programming, Second Edition, </title> <publisher> Springer--Verlag, </publisher> <address> Berlin, </address> <year> 1987. </year>
Reference-contexts: The language is that of definite programs, as defined by Lloyd <ref> [20] </ref>, except that terms are defined differently, in order to include names that are intended to represent the expressions of the language itself. The alphabet of L differs from the usual alphabet of definite programs by making a distinction between variables and metavariables and through the presence of metaconstants. <p> Hence, this SLD fl -derivation ends with a failure state. 11 We begin our argument for completeness by appropriately rephrasing the Lifting lemma <ref> [20] </ref>. Lemma 6.9 (Lifting lemma) Let E be a Horn clause equality theory and R E a canonical rewrite system for E. Let (P; E) be a logic program, H a Herbrand assignment and G a goal clause.
Reference: [21] <author> Sato, T., </author> <title> Meta-Programming through a Truth Predicate, </title> <editor> in: K. Apt (ed.), </editor> <booktitle> Proc. Joint Intl. Conf. Symp. on Logic Programming 1992, </booktitle> <publisher> MIT Press, </publisher> <address> Cam-bridge, Mass., </address> <year> 1992. </year>
Reference-contexts: Many applications have been developed by means of meta-programs, in areas such as knowledge representation and reasoning, synthesis and analysis of programs and for modeling evaluation strategies. This has led to the development of various metalogic programming languages <ref> [1, 4, 5, 6, 10, 15, 18, 21] </ref>. Therefore, analysis and comparison of metalevel systems is useful for evaluating the proposed approaches, for designing future systems and for a possible integration of metaprogramming with other extensions to logic programming, such as, for example, constraint logic programming. <p> The second reason concerns the fact that encodings influence the semantics of metalogic languages. In fact, metalanguages that are based on formally defined encodings have clear and well-defined declarative semantics <ref> [10, 21, 22] </ref>. In contrast, in order to give a semantic account of a metalogic programming language that employs a trivial encoding (for example, the one outlined in Example 3.2), two main possibilities have been considered up to now.
Reference: [22] <author> Subrahmanian, V. S., </author> <title> Foundations of Metalogic Programming, </title> <editor> in: H. Abram-son and M. H. Rogers (eds.), </editor> <booktitle> Meta-Programming in Logic Programming, </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <year> 1988. </year> <title> [23] van Harmelen, F., Definable Naming Relations in Meta-level Systems, </title> <editor> in: A. Pettorossi (ed.), </editor> <booktitle> Meta-Programming in Logic, </booktitle> <publisher> LNCS 649, Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1992. </year>
Reference-contexts: The second reason concerns the fact that encodings influence the semantics of metalogic languages. In fact, metalanguages that are based on formally defined encodings have clear and well-defined declarative semantics <ref> [10, 21, 22] </ref>. In contrast, in order to give a semantic account of a metalogic programming language that employs a trivial encoding (for example, the one outlined in Example 3.2), two main possibilities have been considered up to now.
Reference: [24] <author> Yalcinap, L. U., </author> <title> Meta-Programming for Knowledge Based Systems in Pro-log, </title> <type> Ph.D. Thesis, </type> <institution> Dept. of Computer Engineering and Science, Case Western Reserve University, Cleveland, USA, </institution> <year> 1991. </year> <month> 16 </month>
Reference-contexts: Again, this restricts the power of the language, undermining, in our view, the motivation for using metalevel systems altogether. In fact, a fully corresponding object-level solution does not exist for every metalogic program, as pointed out, for instance, by Yalcinap <ref> [24] </ref>. Therefore, in order to exploit the full potential of metalogic programming, this kind of "no naming", although simple and efficient, must give place to more expressive forms of encoding.
References-found: 23

