URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-94-56/s2k-94-56.ps.Z
Refering-URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-94-56/
Root-URL: http://www.cs.berkeley.edu
Title: High-Concurrency Locking in R-Trees  consistency with an inexpensive predicate locking mechanism.  
Author: Douglas Banks Marcel Kornacker Michael Stonebraker 
Note: 3  
Address: Berkeley, California 94720  
Affiliation: Computer Science Div., Dept. of EECS University of California  
Abstract: In this paper we present a solution to the problem of concurrent operations in R-trees, a dynamic access structure capable of storing multidimensional and spatial data. We describe the R-link tree, a variant of the R-tree that adds sibling pointers to nodes, a technique first deployed in B-link trees, to compensate for concurrent structure modifications. The main obstacle to the use of sibling pointers is the lack of linear ordering among the keys in an R-tree; we overcome this by assigning sequence numbers to nodes that let us reconstruct the "lineage" of a node at any point in time. The search, insertion and deletion algorithms for R-link trees are designed to lock at most two nodes at a time and the locking can be shown to be deadlock-free. In addition, we describe how R-link trees can be made recoverable so that they are instantly available after a crash and we further describe how to achieve degree 
Abstract-found: 1
Intro-found: 1
Reference: [BaMc72] <author> R. Bayer and E. McCreight, </author> <title> "Organization and Maintenance of Large Ordered Indexes," </title> <journal> Acta Informatica, </journal> <volume> Vol. 1, No. 3, </volume> <pages> pp. 173-189, </pages> <year> 1972. </year>
Reference-contexts: A fundamental aspect of support for spatial data is efficient handling of range queries along multiple dimensions; one example is the retrieval of points that intersect a given query rectangle. The most widespread access method, the B-tree <ref> [BaMc72] </ref>, does not handle multi-dimensional data very well. [Gutt84] proposed a spatial access method designed to handle multidimensional point and spatial data.
Reference: [BaSc77] <author> R. Bayer and M. Schkolnick, </author> <title> "Concurrency of Operations on B-Trees," </title> <journal> Acta Inf., </journal> <volume> Vol. 9(1977), </volume> <pages> pp. 1-21. </pages>
Reference-contexts: Simple solutions to this problem have the insertion process lock the entire tree or the subtree that needs to be modified due to anticipated splits. Variations thereof lock the upper levels of the subtree so that only readers can still access it <ref> [BaSc77] </ref>. In essence all of these methods employ top-down lock-coupling: when descending the tree a lock on a parent node can only be released after the lock on the child node is granted. Consequently, locks are held during an I/O operations, which reduces concurrency. <p> Because an insertion never performs a split itself, there is no need for concurrent search processes to do lock-coupling. The highest-concurrency algorithm is modeled after one presented in <ref> [BaSc77] </ref> for B-trees. Readers do top-down lock-coupling when descending the tree in order to avoid having to deal with splitting pages. Insertions lock the entire subtree that needs modification on their way to the leaf. Biliris [Bili89] presents an approach to B-tree locking that can be applied to R-trees.
Reference: [Bent75] <author> J. L. Bentley, </author> <title> "Multidimensional Binary Search Trees Used for Associative Searching," </title> <journal> CACM, September 1975, </journal> <volume> Vol. 18, No. 9, </volume> <pages> pp. 509-517. </pages>
Reference-contexts: The most widespread access method, the B-tree [BaMc72], does not handle multi-dimensional data very well. [Gutt84] proposed a spatial access method designed to handle multidimensional point and spatial data. Unlike other spatial access methods <ref> [Bent75, Niev84, Robi81, LoSa90] </ref>, R-trees are not restricted to storing multidimensional points, but can directly store multidimensional spatial objects, which are represented by their minimal bounding box. R-trees have not benefited greatly from the many refinements and optimizations of concurrency mechanisms that have been designed for B-trees.
Reference: [Bili89] <author> A. Biliris, </author> <title> "Operation-Specific Locking in Balanced Structures," </title> <journal> Information Sciences, </journal> <month> June </month> <year> 1989, </year> <note> Vol.48, (No.1):27-51. </note>
Reference-contexts: The highest-concurrency algorithm is modeled after one presented in [BaSc77] for B-trees. Readers do top-down lock-coupling when descending the tree in order to avoid having to deal with splitting pages. Insertions lock the entire subtree that needs modification on their way to the leaf. Biliris <ref> [Bili89] </ref> presents an approach to B-tree locking that can be applied to R-trees. The structure of a regular B-tree node is modified to contain left and rightlink pointers.
Reference: [BKSS90] <author> N. Beckmann, H.-P. Kriegel, R. Schneider and B. Seeger, </author> <title> "The R*-tree: An Efficient and Robust Access Method for Points and Rectangles," </title> <booktitle> Proc. 1990 ACM SIGMOD Conf., </booktitle> <pages> pp. 322-331. 14 </pages>
Reference-contexts: The strategy for placing entries on leaf nodes should therefore create an efficient index structure that optimizes retrieval performance. The literature has identified a variety of parameters for the layout of keys on nodes that affect retrieval performance <ref> [BKSS90, SRF87] </ref>. These pa 2 rameters are: minimal node area, minimal overlap between nodes, minimal node margins or maximized node utilization. It is impossible to optimize all of these parameters simultaneously. <p> These pa 2 rameters are: minimal node area, minimal overlap between nodes, minimal node margins or maximized node utilization. It is impossible to optimize all of these parameters simultaneously. For instance, the original R-tree proposal [Gutt84] minimized overlap between nodes; the R*- Tree variation <ref> [BKSS90] </ref> minimizes overlap for internal nodes and minimizes the covered area for leaf nodes. When a new key has to be inserted in an R-tree, it is necessary to descend to the leaf that optimizes the parameter chosen by the particular R-tree variant.
Reference: [EGLT76] <author> K. Eswaren, J. Gray, R. Lorie and I. Traiger, </author> <title> "On the Notions of Consistency and Predicate Locks in a Database System," </title> <journal> Comm. ACM, November 1976, </journal> <volume> Vol. 19, No. 11, </volume> <pages> pp. 624-633. </pages>
Reference-contexts: A searcher descending the tree can now collide with an inserter propagating changes up the tree. A more effective solution to the phantom problem is to use a simplified form of predicate locks <ref> [EGLT76] </ref>, where exclusive predicates consist of a single key value and shared predicates consist of a query rectangle and scan operation such as inclusion or overlap.
Reference: [Gray78] <author> J. Gray, </author> <title> "Notes on Data Base Operation Systems," Operating Systems, </title> <editor> R. Bayer et al. (Eds.), </editor> <volume> LNCS Volume 60, </volume> <publisher> Springer-Verlag, </publisher> <year> 1978. </year>
Reference-contexts: Since the frequency of crashes is typically very low, we do not expect temporary unfinished splits in the tree to become a performance problem. 5 Consistency A common requirement for concurrenct access in database systems is degree 3 consistency, or repeatable read (RR) <ref> [Gray78] </ref>. A simple solution employed for B-trees is to keep all leaf pages that were read by an index scan locked until the end of the transaction.
Reference: [Gutt84] <author> A. Guttman, "R-Trees: </author> <title> A Dynamic Index Structure for Spatial Searching," </title> <booktitle> Proc. 1984 ACM SIGMOD Conf., </booktitle> <pages> pp. 47-57. </pages>
Reference-contexts: A fundamental aspect of support for spatial data is efficient handling of range queries along multiple dimensions; one example is the retrieval of points that intersect a given query rectangle. The most widespread access method, the B-tree [BaMc72], does not handle multi-dimensional data very well. <ref> [Gutt84] </ref> proposed a spatial access method designed to handle multidimensional point and spatial data. Unlike other spatial access methods [Bent75, Niev84, Robi81, LoSa90], R-trees are not restricted to storing multidimensional points, but can directly store multidimensional spatial objects, which are represented by their minimal bounding box. <p> These pa 2 rameters are: minimal node area, minimal overlap between nodes, minimal node margins or maximized node utilization. It is impossible to optimize all of these parameters simultaneously. For instance, the original R-tree proposal <ref> [Gutt84] </ref> minimized overlap between nodes; the R*- Tree variation [BKSS90] minimizes overlap for internal nodes and minimizes the covered area for leaf nodes.
Reference: [JoSh93] <author> T. Johnson and D. Shasha, </author> <title> "The Performance of Current B-Tree Algorithms," </title> <journal> ACM TODS, </journal> <volume> Vol. 18, No. 1, </volume> <pages> pp. 51-101, </pages> <month> March </month> <year> 1993. </year>
Reference-contexts: It has recently been shown that this technique offers the highest performance among concurrency mechanisms for B-trees <ref> [SrCa91, JoSh93] </ref>. Unfortunately, the B-link tree technique expects the underlying key space to have a linear order and therefore cannot be directly applied to R-trees.
Reference: [LaSh86] <author> V. Lanin and D. Shasha, </author> <title> "A Symmetric Concurrent B-Tree Algorithm," </title> <booktitle> 1986 Fall Joint Computer Conference (Dallas, Tex., </booktitle> <month> Nov. </month> <year> 1986), </year> <pages> pp. 380-389. </pages>
Reference-contexts: Likewise, an insertion process does not have to employ lock-coupling when descending the tree to the correct leaf. If the leaf has to be split, it is also possible to avoid lock-coupling when installing a new entry in the parent, as is shown in <ref> [LaSh86] </ref> and [Sagi86]. <p> This is problematic when the remaining inserters have to change the bounding rectangle of what they believe is the root or if the "root" has to be split a second time. A solution can be found in <ref> [LaSh86] </ref> and [Sagi86]; both suggest using an anchor page to make root splits visible to other insertion processes and allow for compensating actions. 3.4 Deletion Deleting a key from an R-tree can be implemented by allowing each leaf to have fewer than its lower bound of m entries.
Reference: [LeYa81] <author> P. Lehman and S. Yao, </author> <title> "Efficient Locking for Concurrent Operations on B-Trees," </title> <journal> ACM TODS, </journal> <volume> Vol 6, No. 4, </volume> <month> December </month> <year> 1981. </year>
Reference-contexts: R-trees have not benefited greatly from the many refinements and optimizations of concurrency mechanisms that have been designed for B-trees. A particular modification of B-trees, the B-link tree <ref> [LeYa81] </ref>, connects fl This research was sponsored by the National Science Foundation under grant IRI-9107455, the Defense Advanced Research Projects Agency under grant T63-92-C-0007, and the Army Research Office under grant 91-G-0183. Additional support was provided by the University of California and Digital Equipment Corporation under Research Grant 1243. <p> Consequently, locks are held during an I/O operations, which reduces concurrency. A radically different approach was proposed in <ref> [LeYa81] </ref>. Instead of avoiding possible conflicts by lock-coupling, the tree structure is modified so that the search process has the opportunity to compensate for a missed split. <p> processes only need to hold one node locked at a time. 3 R-Link Trees We would like to achieve high concurrency for operations on R-trees, and given the similarities in structure and functionality between B-trees and R-trees, it would seem natural to try to apply the ideas and algorithms of <ref> [LeYa81] </ref> to create an "R-link tree." This is not a trivial matter, however, because R-trees differ from B-trees on a number of important points and the B-link tree strategy itself is insufficient. The source of this problem is the lack of ordering on R-tree keys. <p> Insertions lock the entire subtree that needs modification on their way to the leaf. Biliris [Bili89] presents an approach to B-tree locking that can be applied to R-trees. The structure of a regular B-tree node is modified to contain left and rightlink pointers. Unlike in <ref> [LeYa81] </ref>, a search process does top-down lock-coupling in order to descend to a leaf and does not make use of the link pointers to account for splits. The link pointers are used to link side branches|the left or right halves of overflowing pages|into the tree.
Reference: [LoSa90] <author> D. Lomet and B. Salzberg, </author> <title> "The hB-Tree: A Multiattribute Indexing Method with Good Guaranteed Performance," </title> <journal> ACM TODS, </journal> <volume> Vol 15, No. 4, </volume> <pages> pp. 625-685, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: The most widespread access method, the B-tree [BaMc72], does not handle multi-dimensional data very well. [Gutt84] proposed a spatial access method designed to handle multidimensional point and spatial data. Unlike other spatial access methods <ref> [Bent75, Niev84, Robi81, LoSa90] </ref>, R-trees are not restricted to storing multidimensional points, but can directly store multidimensional spatial objects, which are represented by their minimal bounding box. R-trees have not benefited greatly from the many refinements and optimizations of concurrency mechanisms that have been designed for B-trees. <p> Again, this is not applicable in R-trees because the key space is not linearly ordered and the notion of a next-highest key does not exist. The -tree presented in <ref> [LoSa90] </ref> is a generalization of a B-link tree where nodes can have multiple parents, which turns the tree structure into a DAG. Their solution for recoverability 13 capitalizes a the property of link-type trees, namely, that unfinished splits leave all parts of the tree accessible.
Reference: [LoSa92] <author> D. Lomet and B. Salzberg, </author> <title> "Access Method Concurrency with Recovery," </title> <booktitle> Proc. 1992 ACM SIGMOD Conf., </booktitle> <pages> pp. 351-360. </pages>
Reference-contexts: The author mentions that, for R-trees, the algorithm also must address the case where bounding rectangles have to be changed. This can easily be incorporated into the algorithm. [Moha90, MoLe92] and <ref> [LoSa92] </ref> discuss making access structures recoverable in a write-ahead logging environment; the former papers also present a solution for guaranteeing degree 3 consistency with row-level locking.
Reference: [Moha90] <author> C. Mohan, "ARIES/KVL: </author> <title> A Key-Value Locking Method for Concurrency Control of Multiaction Transactions," </title> <booktitle> Proc. 16th Int'l Conf. on Very Large Databases (VLDB), </booktitle> <address> Brisbane, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: The author mentions that, for R-trees, the algorithm also must address the case where bounding rectangles have to be changed. This can easily be incorporated into the algorithm. <ref> [Moha90, MoLe92] </ref> and [LoSa92] discuss making access structures recoverable in a write-ahead logging environment; the former papers also present a solution for guaranteeing degree 3 consistency with row-level locking.
Reference: [MoLe92] <author> C. Mohan and F. Levine, "ARIES/IM: </author> <title> An Efficient and High Concurrency Index Management Method Using Write-Ahead Logging," </title> <booktitle> Proc. 1992 ACM SIGMOD Conf., </booktitle> <address> San Diego, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: The author mentions that, for R-trees, the algorithm also must address the case where bounding rectangles have to be changed. This can easily be incorporated into the algorithm. <ref> [Moha90, MoLe92] </ref> and [LoSa92] discuss making access structures recoverable in a write-ahead logging environment; the former papers also present a solution for guaranteeing degree 3 consistency with row-level locking. <p> Their solution for recoverability 13 capitalizes a the property of link-type trees, namely, that unfinished splits leave all parts of the tree accessible. As in <ref> [MoLe92] </ref>, modifications of the tree structure are done separately from inserting or deleting transactions in order to avoid holding commit-duration locks on nodes.
Reference: [NgKa93] <author> V. Ng and T. Kameda, </author> <title> "Concurrent Accesses to R-Trees," </title> <booktitle> Proceedings of Symposium on Large Spatial Databases, </booktitle> <pages> pp. 142-61, </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin 1993. </address>
Reference-contexts: None of the algorithms known to us attempt to adapt the B-link tree strategy to R-trees in order to achieve higher concurrency. Ng and Kameda <ref> [NgKa93] </ref> present three algorithms varying in complexity and possible con-currency. The simplest of the three algorithms locks the entire tree so that an insertion would 12 exclude all searchers. The second algorithm postpones page splits by adding buffer space to each node to accommodate overflows.
Reference: [Niev84] <author> J. Nievergelt, H. Hinterberger and K. C. Sevcik, </author> <title> "The Grid File: An Adaptable, Symmetric Multikey File Structure," </title> <journal> ACM TODS, </journal> <volume> Vol. 9, No. 1, </volume> <month> March </month> <year> 1984. </year>
Reference-contexts: The most widespread access method, the B-tree [BaMc72], does not handle multi-dimensional data very well. [Gutt84] proposed a spatial access method designed to handle multidimensional point and spatial data. Unlike other spatial access methods <ref> [Bent75, Niev84, Robi81, LoSa90] </ref>, R-trees are not restricted to storing multidimensional points, but can directly store multidimensional spatial objects, which are represented by their minimal bounding box. R-trees have not benefited greatly from the many refinements and optimizations of concurrency mechanisms that have been designed for B-trees.
Reference: [Robi81] <author> J. T. Robinson, </author> <title> "The K-D-B-Tree: A Search Structure for Large Multidimensional Dynamic Indexes," </title> <booktitle> Proc. 1981 ACM SIGMOD Conf., </booktitle> <pages> pp. 10-18. </pages>
Reference-contexts: The most widespread access method, the B-tree [BaMc72], does not handle multi-dimensional data very well. [Gutt84] proposed a spatial access method designed to handle multidimensional point and spatial data. Unlike other spatial access methods <ref> [Bent75, Niev84, Robi81, LoSa90] </ref>, R-trees are not restricted to storing multidimensional points, but can directly store multidimensional spatial objects, which are represented by their minimal bounding box. R-trees have not benefited greatly from the many refinements and optimizations of concurrency mechanisms that have been designed for B-trees.
Reference: [Sagi86] <author> Y. Sagiv, </author> <title> "Concurrent Operations on B*-Trees with Overtaking," </title> <journal> Journal of Computer and System Sciences, </journal> <volume> Vol. 33, No. 2, </volume> <pages> pp. 275-296, </pages> <year> 1986. </year>
Reference-contexts: Likewise, an insertion process does not have to employ lock-coupling when descending the tree to the correct leaf. If the leaf has to be split, it is also possible to avoid lock-coupling when installing a new entry in the parent, as is shown in [LaSh86] and <ref> [Sagi86] </ref>. <p> This is problematic when the remaining inserters have to change the bounding rectangle of what they believe is the root or if the "root" has to be split a second time. A solution can be found in [LaSh86] and <ref> [Sagi86] </ref>; both suggest using an anchor page to make root splits visible to other insertion processes and allow for compensating actions. 3.4 Deletion Deleting a key from an R-tree can be implemented by allowing each leaf to have fewer than its lower bound of m entries.
Reference: [SrCa91] <author> V. Srinivasan and M. Carey, </author> <title> "Performance of B-Tree Concurrency Control Algorithms," </title> <booktitle> Proc. 1991 ACM SIGMOD conf., </booktitle> <pages> pp. 416-425. </pages>
Reference-contexts: It has recently been shown that this technique offers the highest performance among concurrency mechanisms for B-trees <ref> [SrCa91, JoSh93] </ref>. Unfortunately, the B-link tree technique expects the underlying key space to have a linear order and therefore cannot be directly applied to R-trees.
Reference: [SRF87] <author> T. Sellis, N. Roussopoulos, and C. Faloutsos, </author> <title> "The R+-tree: A Dynamic Index for Multidimensional Objects," </title> <booktitle> Proc. 13th Int'l Conf. on Very Large Databases (VLDB), </booktitle> <month> Sep. </month> <year> 1987, </year> <pages> pp. 507-518. 15 </pages>
Reference-contexts: The strategy for placing entries on leaf nodes should therefore create an efficient index structure that optimizes retrieval performance. The literature has identified a variety of parameters for the layout of keys on nodes that affect retrieval performance <ref> [BKSS90, SRF87] </ref>. These pa 2 rameters are: minimal node area, minimal overlap between nodes, minimal node margins or maximized node utilization. It is impossible to optimize all of these parameters simultaneously.
References-found: 21

