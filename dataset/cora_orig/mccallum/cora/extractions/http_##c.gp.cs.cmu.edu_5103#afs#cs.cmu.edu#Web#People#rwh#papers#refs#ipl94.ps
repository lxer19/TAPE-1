URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/Web/People/rwh/papers/refs/ipl94.ps
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/Web/People/rwh/papers.html
Root-URL: http://www.cs.cmu.edu
Title: A Simplified Account of Polymorphic References  
Author: Robert Harper 
Keyword: formal semantics, functional programming, programming languages, type theory, refer ences and assignment.  
Address: Pittsburgh, PA 15213-3891  
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract: A proof of the soundness of Tofte's imperative type discipline with respect to a structured operational semantics is given. The presentation is based on a semantic formalism that combines the benefits of the approaches considered by Wright and Felleisen, and by Tofte, leading to a particularly simple proof of soundness of Tofte's type discipline. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Andrew W. Appel and David B. MacQueen. </author> <title> Standard ML of New Jersey. </title> <editor> In J. Maluszynski and M. Wirsing, editors, </editor> <booktitle> Third Int'l Symp. on Prog. Lang. Implementation and Logic Programming, </booktitle> <pages> pages 1-13, </pages> <address> New York, </address> <month> August </month> <year> 1991. </year> <note> Springer-Verlag. </note>
Reference-contexts: The main contribution is the elimination of the need for the maximal fixed point argument used by Tofte [11]. The methods considered here have been subsequently employed by Greiner to establish the soundness of the "weak polymorphism" type discipline implemented in the Standard ML of New Jersey compiler <ref> [1] </ref>. Our approach was influenced by the work of Wright and Felleisen [13] who pioneered the use of reduction semantics to prove soundness of type assignment systems. Several important studies of the problem of combining polymorphic type inference and computational effects (including mutable references) have been conducted in recent years.
Reference: [2] <author> Luis Damas and Robin Milner. </author> <title> Principal type schemes for functional programs. </title> <booktitle> In Ninth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 207-212, </pages> <year> 1982. </year>
Reference-contexts: 1 Introduction The extension of Damas and Milner's polymorphic type system for pure functional programs <ref> [2] </ref> to accomo-date mutable cells has proved to be problematic. The nave extension of the pure language with operations to allocate a cell, and to retrieve and modify its contents is unsound [11].
Reference: [3] <author> Luis Manuel Martins Damas. </author> <title> Type Assignment in Programming Languages. </title> <type> PhD thesis, </type> <institution> Edinburgh University, </institution> <year> 1985. </year>
Reference-contexts: The nave extension of the pure language with operations to allocate a cell, and to retrieve and modify its contents is unsound [11]. The problem has received considerable attention, notably by Damas <ref> [3] </ref>, Tofte [10, 11], and Leroy and Weiss [7]. Tofte's solution is based on a greatest fixed point construction to define the semantic typing relation [11] (see also [8]). This method has been subsequently used by Leroy and Weiss [7] and Talpin and Jouvelot [9]. <p> Unfortunately in any interesting language this condition is recursively undecidable, and hence some conservative approximation must be used. Tofte chooses the simple and memorable condition that e 1 be a (syntactic) value. The requirement that polymorphic let's bind values is rather restrictive. Following ideas of MacQueen (unpublished) and Damas <ref> [3] </ref>, Tofte introduced a modification to the type system that admits a more flexible use of polymorphism, without sacrificing soundness.
Reference: [4] <author> John Greiner. </author> <title> Standard ml weak polymorphism can be sound. </title> <type> Technical Report CMU-CS-93-160, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <address> Pittsburgh, PA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: The interested reader is referred to the work of Gifford, Jouvelot and Talpin [6, 9], Leroy and Weiss [7], Wright [12], Hoang, Mitchell, and Viswanathan [5], and Greiner <ref> [4] </ref> for further details and references. The author is grateful to Matthias Felleisen, Andrew Wright, and John Greiner for their comments and suggestions.
Reference: [5] <author> My Hoang, John Mitchell, and Ramesh Viswanathan. </author> <title> Standard ML-NJ weak polymorphism and imperative constructs. </title> <booktitle> In Eighth Symposium on Logic in Computer Science, </booktitle> <year> 1993. </year>
Reference-contexts: Several important studies of the problem of combining polymorphic type inference and computational effects (including mutable references) have been conducted in recent years. The interested reader is referred to the work of Gifford, Jouvelot and Talpin [6, 9], Leroy and Weiss [7], Wright [12], Hoang, Mitchell, and Viswanathan <ref> [5] </ref>, and Greiner [4] for further details and references. The author is grateful to Matthias Felleisen, Andrew Wright, and John Greiner for their comments and suggestions.
Reference: [6] <author> Pierre Jouvelot and David Gifford. </author> <title> Algebraic reconstruction of types and effects. </title> <booktitle> In Eighteenth ACM Symposium on Principles of Programming Languages, </booktitle> <pages> pages 303-310, </pages> <year> 1991. </year> <month> 5 </month>
Reference-contexts: Several important studies of the problem of combining polymorphic type inference and computational effects (including mutable references) have been conducted in recent years. The interested reader is referred to the work of Gifford, Jouvelot and Talpin <ref> [6, 9] </ref>, Leroy and Weiss [7], Wright [12], Hoang, Mitchell, and Viswanathan [5], and Greiner [4] for further details and references. The author is grateful to Matthias Felleisen, Andrew Wright, and John Greiner for their comments and suggestions.
Reference: [7] <author> Xavier Leroy and Pierre Weis. </author> <title> Polymorphic type inference and assignment. </title> <booktitle> In Eighteenth ACM Sym--posium on Principles of Programming Languages, </booktitle> <pages> pages 291-302, </pages> <address> Orlando, FL, </address> <month> January </month> <year> 1991. </year> <note> ACM SIGACT/SIGPLAN. </note>
Reference-contexts: The nave extension of the pure language with operations to allocate a cell, and to retrieve and modify its contents is unsound [11]. The problem has received considerable attention, notably by Damas [3], Tofte [10, 11], and Leroy and Weiss <ref> [7] </ref>. Tofte's solution is based on a greatest fixed point construction to define the semantic typing relation [11] (see also [8]). This method has been subsequently used by Leroy and Weiss [7] and Talpin and Jouvelot [9]. <p> The problem has received considerable attention, notably by Damas [3], Tofte [10, 11], and Leroy and Weiss <ref> [7] </ref>. Tofte's solution is based on a greatest fixed point construction to define the semantic typing relation [11] (see also [8]). This method has been subsequently used by Leroy and Weiss [7] and Talpin and Jouvelot [9]. It was subsequently noted by Wright and Felleisen [13] that the proof of soundness can be substantially simplified if the argument is made by induction on the length of an execution sequence, rather than on the structure of the typing derivation. <p> Several important studies of the problem of combining polymorphic type inference and computational effects (including mutable references) have been conducted in recent years. The interested reader is referred to the work of Gifford, Jouvelot and Talpin [6, 9], Leroy and Weiss <ref> [7] </ref>, Wright [12], Hoang, Mitchell, and Viswanathan [5], and Greiner [4] for further details and references. The author is grateful to Matthias Felleisen, Andrew Wright, and John Greiner for their comments and suggestions.
Reference: [8] <author> Robin Milner and Mads Tofte. </author> <title> Co-induction in relational semantics. </title> <type> Technical Report ECS-LFCS-88-65, </type> <institution> Laboratory for the Foundations of Computer Science, Edinburgh University, Edinburgh, </institution> <month> October </month> <year> 1988. </year>
Reference-contexts: The problem has received considerable attention, notably by Damas [3], Tofte [10, 11], and Leroy and Weiss [7]. Tofte's solution is based on a greatest fixed point construction to define the semantic typing relation [11] (see also <ref> [8] </ref>). This method has been subsequently used by Leroy and Weiss [7] and Talpin and Jouvelot [9].
Reference: [9] <author> Jean-Pierre Talpin and Pierre Jouvelot. </author> <title> The type and effect discipline. </title> <booktitle> In Seventh Symposium on Logic in Computer Science, </booktitle> <pages> pages 162-173, </pages> <year> 1992. </year>
Reference-contexts: Tofte's solution is based on a greatest fixed point construction to define the semantic typing relation [11] (see also [8]). This method has been subsequently used by Leroy and Weiss [7] and Talpin and Jouvelot <ref> [9] </ref>. It was subsequently noted by Wright and Felleisen [13] that the proof of soundness can be substantially simplified if the argument is made by induction on the length of an execution sequence, rather than on the structure of the typing derivation. <p> Several important studies of the problem of combining polymorphic type inference and computational effects (including mutable references) have been conducted in recent years. The interested reader is referred to the work of Gifford, Jouvelot and Talpin <ref> [6, 9] </ref>, Leroy and Weiss [7], Wright [12], Hoang, Mitchell, and Viswanathan [5], and Greiner [4] for further details and references. The author is grateful to Matthias Felleisen, Andrew Wright, and John Greiner for their comments and suggestions.
Reference: [10] <author> Mads Tofte. </author> <title> Operational Semantics and Polymorphic Type Inference. </title> <type> PhD thesis, </type> <institution> Edinburgh University, </institution> <year> 1988. </year> <note> Available as Edinburgh University Laboratory for Foundations of Computer Science Technical Report ECS-LFCS-88-54. </note>
Reference-contexts: The nave extension of the pure language with operations to allocate a cell, and to retrieve and modify its contents is unsound [11]. The problem has received considerable attention, notably by Damas [3], Tofte <ref> [10, 11] </ref>, and Leroy and Weiss [7]. Tofte's solution is based on a greatest fixed point construction to define the semantic typing relation [11] (see also [8]). This method has been subsequently used by Leroy and Weiss [7] and Talpin and Jouvelot [9].
Reference: [11] <author> Mads Tofte. </author> <title> Type inference for polymorphic references. </title> <journal> Information and Computation, </journal> <volume> 89 </volume> <pages> 1-34, </pages> <month> Novem-ber </month> <year> 1990. </year>
Reference-contexts: 1 Introduction The extension of Damas and Milner's polymorphic type system for pure functional programs [2] to accomo-date mutable cells has proved to be problematic. The nave extension of the pure language with operations to allocate a cell, and to retrieve and modify its contents is unsound <ref> [11] </ref>. The problem has received considerable attention, notably by Damas [3], Tofte [10, 11], and Leroy and Weiss [7]. Tofte's solution is based on a greatest fixed point construction to define the semantic typing relation [11] (see also [8]). <p> The nave extension of the pure language with operations to allocate a cell, and to retrieve and modify its contents is unsound [11]. The problem has received considerable attention, notably by Damas [3], Tofte <ref> [10, 11] </ref>, and Leroy and Weiss [7]. Tofte's solution is based on a greatest fixed point construction to define the semantic typing relation [11] (see also [8]). This method has been subsequently used by Leroy and Weiss [7] and Talpin and Jouvelot [9]. <p> with operations to allocate a cell, and to retrieve and modify its contents is unsound <ref> [11] </ref>. The problem has received considerable attention, notably by Damas [3], Tofte [10, 11], and Leroy and Weiss [7]. Tofte's solution is based on a greatest fixed point construction to define the semantic typing relation [11] (see also [8]). This method has been subsequently used by Leroy and Weiss [7] and Talpin and Jouvelot [9]. <p> Notice that the typing relation is defined so that (l) may mention locations whose type is defined by . (Compare Tofte's account <ref> [11] </ref>.) For example, suppose that is the memory sending location l 0 to x:x + 1, and location l 1 to y:(! l 0 ) y + 1, and suppose that is the location typing assigning the type int!int to both l 0 and l 1 . <p> The verification that : requires checking that ` y:(! l 0 ) y + 1 : int!int, which requires determining the type assigned to location l 0 by . As pointed out by Tofte <ref> [11] </ref>, the memory 0 which assigns (l 1 ) to both l 0 and l 1 can arise as a result of an assignment statement. <p> = ref (x:x) and t 1 has the form (t!t) ref, where t does not occur in , then Close (t 1 ) generalizes t, whereas Close 1 (t 1 ) does not. (This observation is due to Tofte, who also goes on to provide a counterexample to the theorem <ref> [11] </ref>.) The simplest approach to recovering soundness is to preclude polymorphic generalization on the type of a let-bound expression unless that expression is a value. <p> Consequently, Close 1 (t 1 ) = Close (t 1 ) in the above proof sketch, and this is sufficient to complete the proof. Following Tofte <ref> [11] </ref>, we deem an expression e non-expansive iff ` e ) v; 0 implies 0 = . By restricting the bind rule so that e 1 is non-expansive, we ensure that 1 = , which suffices for the proof. <p> This is sufficient to complete the proof. 4 Conclusion We have presented a simplified proof of the soundness of Tofte's type discipline for combining polymorphism and mutable references in ML. The main contribution is the elimination of the need for the maximal fixed point argument used by Tofte <ref> [11] </ref>. The methods considered here have been subsequently employed by Greiner to establish the soundness of the "weak polymorphism" type discipline implemented in the Standard ML of New Jersey compiler [1].
Reference: [12] <author> Andrew Wright. </author> <title> Typing references by effect inference. </title> <booktitle> In Proceedings of the European Symposium on Programming, </booktitle> <year> 1992. </year>
Reference-contexts: Several important studies of the problem of combining polymorphic type inference and computational effects (including mutable references) have been conducted in recent years. The interested reader is referred to the work of Gifford, Jouvelot and Talpin [6, 9], Leroy and Weiss [7], Wright <ref> [12] </ref>, Hoang, Mitchell, and Viswanathan [5], and Greiner [4] for further details and references. The author is grateful to Matthias Felleisen, Andrew Wright, and John Greiner for their comments and suggestions.
Reference: [13] <author> Andrew K. Wright and Matthias Felleisen. </author> <title> A syntactic approach to type soundness. </title> <type> Technical Report TR91-160, </type> <institution> Department of Computer Science, Rice University, </institution> <month> July </month> <year> 1991. </year> <note> To appear, Information and Computation. 6 </note>
Reference-contexts: Tofte's solution is based on a greatest fixed point construction to define the semantic typing relation [11] (see also [8]). This method has been subsequently used by Leroy and Weiss [7] and Talpin and Jouvelot [9]. It was subsequently noted by Wright and Felleisen <ref> [13] </ref> that the proof of soundness can be substantially simplified if the argument is made by induction on the length of an execution sequence, rather than on the structure of the typing derivation. <p> This is the principal advantage of our formalism. (A similar advantage accrues to Wright and Felleisen's approach <ref> [13] </ref> and was suggested to us by them.) We now turn to the question of soundness of the type system. <p> The methods considered here have been subsequently employed by Greiner to establish the soundness of the "weak polymorphism" type discipline implemented in the Standard ML of New Jersey compiler [1]. Our approach was influenced by the work of Wright and Felleisen <ref> [13] </ref> who pioneered the use of reduction semantics to prove soundness of type assignment systems. Several important studies of the problem of combining polymorphic type inference and computational effects (including mutable references) have been conducted in recent years.
References-found: 13

