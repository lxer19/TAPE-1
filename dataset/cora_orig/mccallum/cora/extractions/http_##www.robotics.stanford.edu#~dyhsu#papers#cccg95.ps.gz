URL: http://www.robotics.stanford.edu/~dyhsu/papers/cccg95.ps.gz
Refering-URL: http://www.robotics.stanford.edu/~dyhsu/publications.html
Root-URL: http://www.robotics.stanford.edu
Title: Computing the largest inscribed isothetic rectangle  
Author: Helmut Alt David Hsu Jack Snoeyink 
Affiliation: Freie Universitat Berlin  University of British Columbia  University of British Columbia  
Abstract: This paper describes an algorithm to compute, in fi(log n) time, a rectangle that is contained in a convex n-gon, has sides parallel to the coordinate axes, and has maximum area. With a slight modification it will compute the smallest perimeter. The algorithm uses a tentative prune-and-search approach, even though this problem does not appear to fit into the functional framework of Kirkpatrick and Snoeyink.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Edelsbrunner and E. P. Mucke. </author> <title> Simulation of simplicity: A technique to cope with degenerate cases in geometric algorithms. </title> <journal> ACM Trans. Graph., </journal> <volume> 9(1) </volume> <pages> 66-104, </pages> <year> 1990. </year>
Reference-contexts: This technique makes tentative decisions that are later be certified or revoked. Suppose that P is in general position: no two vertices on the same vertical or horizontal line and no two boundary edges parallel. (This can be simulated by perturbation methods if necessary <ref> [1] </ref>.) We can decompose @P , the boundary of P , into four pieces by breaking at the horizontally and vertically extreme points. We name the pieces A, B, C, and D in counterclockwise order, starting from the southwest.
Reference: [2] <author> P. Fischer and K.-U. Hoffgen. </author> <title> Computing a maximum axis-aligned rectangle in a convex polygon. </title> <journal> Info. Proc. Let., </journal> <volume> 51 </volume> <pages> 189-194, </pages> <year> 1994. </year>
Reference-contexts: Fischer and Hoffgen <ref> [2] </ref> solved the maximum area problem by a nested binary search in O (log 2 n) time. To obtain a fi (log n) algorithm, we characterize the maximum rectangles, then use the tentative prune-and-search technique of Kirkpatrick and Snoeyink [4].
Reference: [3] <author> L. Guibas, L. Ramshaw, and J. Stolfi. </author> <title> A kinetic framework for computational geometry. </title> <booktitle> In Proc. 24th FOCS, </booktitle> <pages> pages 100-111, </pages> <year> 1983. </year>
Reference-contexts: Then not only are A and C be continuous trails <ref> [3] </ref> where a point moving along a line alternates with a line rotating about a point, they are also differentiable.) Lemma 3 We can find the two-corner rectangle with maximum area or perimeter in O (log n) time.
Reference: [4] <author> D. Kirkpatrick and J. Snoeyink. </author> <title> Tentative prune-and-search for computing fixed-points with applications to geometric computation. </title> <note> Fund. Infor., 1994. 6 </note>
Reference-contexts: Fischer and Hoffgen [2] solved the maximum area problem by a nested binary search in O (log 2 n) time. To obtain a fi (log n) algorithm, we characterize the maximum rectangles, then use the tentative prune-and-search technique of Kirkpatrick and Snoeyink <ref> [4] </ref>. In some cases we are able to frame the search for a rectangle as a problem of computing a fixed-point and apply a theorem of [4]; in others we must use tentative prune-and-search directly. <p> To obtain a fi (log n) algorithm, we characterize the maximum rectangles, then use the tentative prune-and-search technique of Kirkpatrick and Snoeyink <ref> [4] </ref>. In some cases we are able to frame the search for a rectangle as a problem of computing a fixed-point and apply a theorem of [4]; in others we must use tentative prune-and-search directly. In general, the prune-and-search technique for multiple lists looks at local information in O (1) time to discard a fraction of some list. Tentative prune-and-search can sometimes be used when local information is insufficient to determine which fraction to discard. <p> If A and C are both reduced to single segments or vertices, then the computation can be completed by simple algebra. Therefore, by a lemma of Kirkpatrick and Snoeyink <ref> [4] </ref>, we can compute the fixed-point in O (log n) steps. <p> Table 1 lists the conclusions from all test combinations. In six cases, our constant-time tests are sufficient to discard half of one of the boundary chains A, B, or C. In the remaining two cases, we can use Kirkpatrick and Snoeyink's technique <ref> [4] </ref> of making tentative discards with the assurance that we are making at most one mistake. Notice that these two cases are complements|all test outcomes are opposite. Suppose that we have f T , g T , and h F . <p> Therefore, all tentative discards done on B can be certified as correct and those on A and C revoked. To evaluate the total cost of the algorithm, we can use the potential function of Kirkpatrick and Snoeyink <ref> [4] </ref>. For chain A, let A T denote the number of segments tentatively discarded and A R denote the number remaining. Define the chain potential A = 2 log A R + 4 log (A R + A T ). <p> Our algorithm used a tentative prune-and-search approach, even though this problem did not fit into the fixed-point framework of Kirkpatrick and Snoeyink <ref> [4] </ref>. We applied constant-time tests to discover boolean predicates on the locations of corners of the maximum rectangle. Sometimes predicates combined to eliminate half of a chain that contained a corner.
References-found: 4

