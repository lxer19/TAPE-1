URL: http://www.eecs.umich.edu/~bradc/papers/oralqual.ps
Refering-URL: http://www.eecs.umich.edu/~bradc/
Root-URL: http://www.cs.umich.edu
Email: bradc@umich.edu  
Title: Scheduling High-Level Tasks Among Cooperative Agents  
Author: Bradley J. Clement 
Address: Ann Arbor, MI 48109  
Affiliation: Artificial Intelligence Laboratory University of Michigan  
Abstract: Scheduling tasks among cooperative agents requires tradeoffs between various factors including task priorities and context-dependent execution times. We have specifically been investigating the space of functions for evaluating alternative distributed task schedules for multi-operator applications. In this paper, we describe some candidate functions and converge on intuitively appealing functions, which we show to lead to equivalent preferences over distributed schedules. We then look at the computational complexity of finding schedules that (approximately) optimize this function. When contextswitching costs are thrown into the mix, moreover, the complexity becomes even more daunting. To address these problems, this paper summarizes our work on forging correspondences between our problems and those studied in operations research. Moreover, we have developed a new hill-climbing strategy for solving these problems, and in this paper we show that these strategies yield very good performance within the range of parameter settings that are representative of our application domain. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Ishfaq Ahmad, Arif Ghafoor. </author> <title> SemiDistributed Load Balancing for Massively Parallel Multicomputer Systems. </title> <journal> IEEE Transactions on Software Engineering , 17(10) </journal> <pages> 987-1004, </pages> <month> October </month> <year> 1991. </year>
Reference: [2] <author> Avrim Blum, Prasad Chalasani, Don Coppersmith, Bill Pulleyblank, Prabhakar Raghavan, Madhu Sudan. </author> <title> The Minimum Latency Problem. </title> <booktitle> Proceedings of the 26 th Symposium on the Theory of Computing, </booktitle> <pages> pp. 163-171, </pages> <year> 1994. </year>
Reference-contexts: Performance Evaluation Function m Machs. Single Machine No Priorities No Exec. Times Precedence Constrs. Context Switch 1 U priority response time i i _ O (nlogn) [3] O (nlogn) ? NP-hard <ref> [2] </ref> U priority response time i i _ O (nlogn) [3] O (nlogn) ? NP-hard [2] 3 C pri resp time i i = _ U cum priority t dt time period = _ j j || a = 1.2 1|| w C j Smiths Rule O (nlogn) [15] j || <p> Performance Evaluation Function m Machs. Single Machine No Priorities No Exec. Times Precedence Constrs. Context Switch 1 U priority response time i i _ O (nlogn) [3] O (nlogn) ? NP-hard <ref> [2] </ref> U priority response time i i _ O (nlogn) [3] O (nlogn) ? NP-hard [2] 3 C pri resp time i i = _ U cum priority t dt time period = _ j j || a = 1.2 1|| w C j Smiths Rule O (nlogn) [15] j || O (nlogn) [3] j j j | | = 1 O (nlogn) P prec w <p> U cum priority t dt time period = _ j j || a = 1.2 1|| w C j Smiths Rule O (nlogn) [15] j || O (nlogn) [3] j j j | | = 1 O (nlogn) P prec w C j j | | a = 1.58 NP-hard <ref> [2] </ref> Table 1 In addition, recent results for approximation algorithms are given. An a approximation algorithm guarantees that the performance will be a factor a of the optimal solution. In recent years, many constant factor approximations for schedule optimization (such as those in the table) have been discovered [2,4,9]. <p> Minimizing the cost function (Function 3) for the cumulative priority strategy for the case where context switches are computed in proportion to the number of mismatched attribute values is related to the NP-hard minimum latency problem (MLT), also referred to as the delivery man problem and/or the traveling repairman problem <ref> [2] </ref>. This is the problem of finding a tour that minimizes the sum of the latencies (distances from the starting point) of all points. There is a constant factor 29-approximation for MLT in the case of a distance matrix adhering to the triangle inequality [2]. <p> problem and/or the traveling repairman problem <ref> [2] </ref>. This is the problem of finding a tour that minimizes the sum of the latencies (distances from the starting point) of all points. There is a constant factor 29-approximation for MLT in the case of a distance matrix adhering to the triangle inequality [2]. The context switching problem is the same in the relaxed case of a single operator and equal processing times for tasks.
Reference: [3] <author> Peter Brucker. </author> <title> Scheduling Algorithms. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1995. </year>
Reference-contexts: The optimal policy is to order all tasks according to ascending processing times and then to deal them out to the operators such that the next task is assigned to the operator that is assigned the shortest total processing time. <ref> [3] </ref>. If we assume uniform execution times, the best schedule never has a higher priority task begin after a lower priority task. <p> Performance Evaluation Function m Machs. Single Machine No Priorities No Exec. Times Precedence Constrs. Context Switch 1 U priority response time i i _ O (nlogn) <ref> [3] </ref> O (nlogn) ? NP-hard [2] U priority response time i i _ O (nlogn) [3] O (nlogn) ? NP-hard [2] 3 C pri resp time i i = _ U cum priority t dt time period = _ j j || a = 1.2 1|| w C j Smiths Rule <p> Performance Evaluation Function m Machs. Single Machine No Priorities No Exec. Times Precedence Constrs. Context Switch 1 U priority response time i i _ O (nlogn) <ref> [3] </ref> O (nlogn) ? NP-hard [2] U priority response time i i _ O (nlogn) [3] O (nlogn) ? NP-hard [2] 3 C pri resp time i i = _ U cum priority t dt time period = _ j j || a = 1.2 1|| w C j Smiths Rule O (nlogn) [15] j || O (nlogn) [3] j j j | | = 1 <p> response time i i _ O (nlogn) <ref> [3] </ref> O (nlogn) ? NP-hard [2] 3 C pri resp time i i = _ U cum priority t dt time period = _ j j || a = 1.2 1|| w C j Smiths Rule O (nlogn) [15] j || O (nlogn) [3] j j j | | = 1 O (nlogn) P prec w C j j | | a = 1.58 NP-hard [2] Table 1 In addition, recent results for approximation algorithms are given.
Reference: [4] <author> C. Chekuri, R. Motwani, B. Natarajan, C. Stein. </author> <title> Approximation Techniques for Average Completion Time Scheduling. </title> <booktitle> Proceedings of the Annual ACM-SIAM Symposium on Discrete Algorithms. </booktitle> <pages> pp. 609-618, </pages> <year> 1997. </year>
Reference: [5] <author> Keith Decker, Victor Lesser. </author> <title> Quantitative Modeling of Complex Environments. </title> <journal> International Journal of Intelligent Systems in Accounting, Finance, and Management, </journal> <volume> 2(4), </volume> <year> 1994. </year>
Reference-contexts: Context switches between tasks can also be viewed as a hindering relationship between tasks. Task relationships, such as hinders, enables, facilitates, and precedence are computationally described in the TMS (Task Analysis, Environment Modeling, and Simulation) framework <ref> [5] </ref>. TMS provides a method for modeling complex computational task environments. A TMS model aims to analyze, explain, or predict the performance of a system or some part of it.
Reference: [6] <author> Edmund Durfee, Jaeho Lee, Marcus Huber, Michael Kurnow. TAIPE: </author> <title> Tactical Assistants for Interaction Planning and Execution. </title> <booktitle> Proceedings of the International Conference on Autonomous Agents, </booktitle> <address> pp.443-450, </address> <year> 1997. </year>
Reference-contexts: Specifically, we are looking at the latter application domain; TAIPE (Tactical Assistants for Interaction Planning and Execution) is a system designed for the Navy to help automate ship operation <ref> [6] </ref>. In TAIPE interaction plans determine the functional components that must be used to manage a display dialogue for operators to process tasks. A crew of operators needs to apply their abilities to process the most important tasks quickly while considering the inherent difficulty of jump ing between dissimilar tasks.
Reference: [7] <author> Michael R. Garey, David S. Johnson. </author> <title> A Guide to the Theory of NP-Completeness . W. </title> <editor> H. </editor> <publisher> Freeman, </publisher> <address> San Francisco, </address> <year> 1979. </year>
Reference-contexts: The corresponding decision problem, Scheduling to Minimize Weighted Completion Time, is 9 strongly NP-complete for an arbitrary number of machines and is pseudopolynomial for a fixed number of machines <ref> [7] </ref>. What this means is that we need to consider techniques for simplifying or approximating the calculations. 4.1 Simplifying Strategies Several simplifications of the problem ignore factors that introduce complexity. These factors include the distribution across multiple operators, the nonuniform priorities, and the nonuniform execution times.
Reference: [8] <author> Fred Glover. </author> <title> Tabu SearchPart I, </title> <journal> ORSA Journal of Computing , 1(3) </journal> <pages> 190-206, </pages> <year> 1989. </year>
Reference-contexts: The idea stems from Tabu Search where tabu moves may be taken if they exceed an aspiration level <ref> [8] </ref>. Some other proposed suboptimal and optimal clustering algorithms are described in Appendix C.
Reference: [9] <author> Leslie A. Hall, Andreas S. Schultz, David B. Shmoys, Joel Wein. </author> <title> Scheduling to Minimize Average Completion Time: Offline and OnLine Approximation Algorithms, </title> <note> http://brutus.mts.jhu.edu/~leslie/#papers. revised March 1997. </note>
Reference: [10] <author> Reinhard Hanxleden, L. Ridgway Scott. </author> <title> Load Balancing on Message Passing Architectures. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 13 </volume> <pages> 312-324, </pages> <year> 1991. </year>
Reference: [11] <author> Tsuyoshi Kawaguchi, Seiki Kyan. </author> <title> Worst Case Bound of an (LRF) Schedule for the Mean-Weighted Flow-Time Problem. </title> <journal> Siam Journal on Computing . 15(4) </journal> <pages> 1106-1118, </pages> <year> 1986. </year>
Reference: [12] <author> J. Mohan Kumar, L. M. Patnaik, A. Das. </author> <title> Load balancing algorithms for an extended hypercube. IEE ProceedingsComput. Digit. </title> <journal> Tech., </journal> <volume> 5 </volume> <pages> 298-306, </pages> <month> September </month> <year> 1994. </year>
Reference: [13] <author> Jyi-Shane Liu, Katia Sycara. </author> <title> Multiagent Coordination in Tightly Coupled Task Scheduling. </title> <booktitle> Proceedings Second International Conference on Multi-Agent Systems, </booktitle> <pages> pp. 181-188, </pages> <year> 1996. </year>
Reference: [14] <author> Ashwani Ramani, Pradip Chande, Pramod Sharma. </author> <title> A General Model for Performance Investigations of Priority Based Multiprocessor System. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 41(6) </volume> <pages> 747-754, </pages> <month> June </month> <year> 1992. </year>
Reference: [15] <author> W. Smith. </author> <title> Various Optimizers for SingleStage Production. </title> <journal> Naval Res. Logist. Quart. </journal> <volume> 3 </volume> <pages> 59-66, </pages> <year> 1956. </year>
Reference-contexts: If we can relax one of these, we can generate simpler strategies for generating optimal schedules. If we assume there is no distribution, the problem becomes very easy. For the single machine case, schedules are optimized by applying Smiths Rule <ref> [15] </ref>, which orders tasks according to priority / execution_time ratios. A proof of this is given in Appendix A. If we assume uniform priorities, computing a distributed schedule is similarly easy. <p> ? NP-hard [2] U priority response time i i _ O (nlogn) [3] O (nlogn) ? NP-hard [2] 3 C pri resp time i i = _ U cum priority t dt time period = _ j j || a = 1.2 1|| w C j Smiths Rule O (nlogn) <ref> [15] </ref> j || O (nlogn) [3] j j j | | = 1 O (nlogn) P prec w C j j | | a = 1.58 NP-hard [2] Table 1 In addition, recent results for approximation algorithms are given.
Reference: [16] <author> Marc Willebeek-LeMair, Anthony Reeves. </author> <title> Strategies for Load Balancing on Highly Parallel Computers. </title> <journal> IEEE Transactions on Parallel and Distributed Systems , 4(9) </journal> <pages> 979-993, </pages> <month> September </month> <year> 1993. </year> <month> 20 </month>
Reference: [17] <author> Hua Wu, David Chang, William Oldham. </author> <title> Dynamic Task Allocation Strategies. </title> <journal> IEEE Transactions on Parallel and Distributed Systems , 6(12) </journal> <pages> 1301-1306, </pages> <month> December </month> <year> 1995. </year> <month> 21 </month>
References-found: 17

