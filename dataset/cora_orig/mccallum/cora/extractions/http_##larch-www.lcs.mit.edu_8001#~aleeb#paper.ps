URL: http://larch-www.lcs.mit.edu:8001/~aleeb/paper.ps
Refering-URL: http://larch-www.lcs.mit.edu:8001/~aleeb/
Root-URL: 
Email: kaih@siemens.co.at  
Title: How to Use Limited Memory in Heuristic Search  
Author: Hermann Kaindl Gerhard Kainz Angelika Leeb Harald Smetana 
Address: Geusaugasse 17 A-1030 Wien, Austria  A-1130 Wien Austria  545 Technology Square Cambridge, MA 02139 U.S.A.  A-3430 Tulln Austria  
Affiliation: Siemens AG Osterreich  Gemeindeberggasse 14  MIT Lab. f. Comp. Sc.  Lerchengasse 12  
Abstract: Traditional best-first search for optimal solutions quickly runs out of space even for problem instances of moderate size, and linear-space search has unnecessarily long running times since it cannot make use of available memory. For using available memory effectively, we developed a new generic approach to heuristic search. It integrates various strategies and includes ideas from bidirectional search. Due to insights into different utilizations of available memory, it allows the search to use limited memory effectively. Instantiations of this approach for two different benchmark domains showed excellent results that are statistically significant improvements over previously reported results: for finding optimal solutions in the 15-Puzzle we achieved the fastest searches of all those using the Manhattan distance heuristic as the only knowledge source, and for a scheduling domain our approach can solve much more difficult problems than the best competitor. The most important lessons we learned from the experiments are first, that also in domains with symmetric graph topology selecting the right search direction can be very important, and second, that memory can| under certain conditions|be used much more effectively than by traditional best-first search.
Abstract-found: 1
Intro-found: 1
Reference: [ Chakrabarti et al., 1989 ] <author> P.P. Chakrabarti, S. Ghose, A. Acharya, </author> <title> and S.C. DeSarkar. Heuristic search in restricted memory. </title> <journal> Artificial Intelligence, </journal> <volume> 41(2) </volume> <pages> 197-221, </pages> <year> 1989. </year>
Reference-contexts: Apart from bidirectional search there are some relations to unidirectional search algorithms with reduced space requirements: MREC [ Sen and Bagchi, 1989 ] , MA fl <ref> [ Chakrabarti et al., 1989 ] </ref> , SMA fl [ Russell, 1992 ] , ITS [ Ghosh et al., 1994 ] , and the approach of using certain tables for IDA fl [ Reinefeld and Marsland, 1994 ] .
Reference: [ de Champeaux, 1983 ] <author> D. de Champeaux. </author> <title> Bidirectional heuristic search again. </title> <journal> J. ACM, </journal> <volume> 30 </volume> <pages> 22-32, </pages> <year> 1983. </year>
Reference-contexts: In particular, the recently proposed perimeter search [ Dillenburg and Nelson, 1994 ] fits into it. However, we explicitly do not propose to use a wave-shaping strategy 1 (see also <ref> [ de Champeaux, 1983 ] </ref> ), since it is inefficient in terms of running time. Under certain circumstances to be discussed below, one or more of the steps can also be omitted during in-stantiation. <p> In particular, our approach can solve much more difficult problems with the same amount of memory and within reasonable time. 6 Related work Originally, bidirectional heuristic search did not work as expected <ref> [ de Champeaux, 1983; Kwa, 1989; Pohl, 1971 ] </ref> . Recent results show that bidirectional search has the potential to improve on unidirectional search [ Kaindl and Khorsand, 1994; Koll and Kaindl, 1993 ] . Unfortunately, traditional bidirectional search requires rather complicated mechanisms that make it difficult to implement.
Reference: [ Dechter and Pearl, 1985 ] <author> R. Dechter and J. Pearl. </author> <title> Generalized best-first strategies and the optimality of A fl . J. </title> <journal> ACM, </journal> <volume> 32(3) </volume> <pages> 505-536, </pages> <year> 1985. </year>
Reference-contexts: Under this condition, it is reasonable to select IDA fl for the linear-space search part. Moreover, we can assume to have a monotone evaluation function: the Manhattan distance. Since A fl makes good use of monotone heuristics <ref> [ Dechter and Pearl, 1985 ] </ref> , we select it for the part of the best-first search. Based on the key idea of bidirectional search, we let A fl and IDA fl search in opposite directions in steps 2 and 3 of our generic approach, respectively.
Reference: [ Dillenburg and Nelson, 1994 ] <author> J.F. Dillenburg and P.C. Nelson. </author> <title> Perimeter search. </title> <journal> Artificial Intelligence, </journal> <volume> 65 </volume> <pages> 165-178, </pages> <year> 1994. </year>
Reference-contexts: Since this approach does not allow for changing the search direction more than once, it can be viewed as a non-traditional form of bidirectional search. In particular, the recently proposed perimeter search <ref> [ Dillenburg and Nelson, 1994 ] </ref> fits into it. However, we explicitly do not propose to use a wave-shaping strategy 1 (see also [ de Champeaux, 1983 ] ), since it is inefficient in terms of running time. <p> We compare our new algorithms BAI and BAITrans on these problems with other algorithms that achieve the best results known here yet without using domain-specific knowledge about the puzzle other than the Manhattan distance heuristic: IDA fl , Trans [ Reinefeld and Marsland, 1994 ] and IDPS fl (perimeter search) <ref> [ Dillenburg and Nelson, 1994 ] </ref> . RBFS has the potential to be better than IDA fl on the sliding-tile puzzle, but actually its results are slightly worse on this specific problem set according to [ Korf, 1993 ] due to noise in the tie-breaking on the last iteration. <p> Using it would still generate 64 percent of IDA fl 's nodes, i.e., IDA fl Probing with an overhead in generated nodes for determining the not re-implement Trans+Move and cannot include it into the figure, lacking data on the running times. 7 The results reported in <ref> [ Dillenburg and Nelson, 1994 ] </ref> are based on runs using a different sample set of the 15-Puzzle, and a different perimeter depth. <p> A bidirectional algorithm sketched in [ Korf, 1985 ] employs DFID (depth-first iterative-deepening without using heuristic knowledge). Since its space requirement is still O (b d=2 ), it cannot solve difficult problems. Perimeter search <ref> [ Dillenburg and Nelson, 1994 ] </ref> is a non-traditional approach to bidirectional search that may look very similar to our algorithm BAI. However, the key difference is the use of a form of wave shaping in perimeter search, that makes it inefficient in terms of running time.
Reference: [ Ghosh et al., 1994 ] <author> S. Ghosh, A. Mahanti, and D.S. Nau. </author> <title> ITS: an efficient limited-memory heuristic tree search algorithm. </title> <booktitle> In Proc. AAAI-94, </booktitle> <pages> pages 1353-1358, </pages> <year> 1994. </year>
Reference-contexts: Apart from bidirectional search there are some relations to unidirectional search algorithms with reduced space requirements: MREC [ Sen and Bagchi, 1989 ] , MA fl [ Chakrabarti et al., 1989 ] , SMA fl [ Russell, 1992 ] , ITS <ref> [ Ghosh et al., 1994 ] </ref> , and the approach of using certain tables for IDA fl [ Reinefeld and Marsland, 1994 ] .
Reference: [ Hart et al., 1968 ] <author> P.E. Hart, N.J. Nilsson, and B. Raphael. </author> <title> A formal basis for the heuristic determination of minimum cost paths. </title> <journal> IEEE Transactions on Systems Science and Cybernetics (SSC), </journal> <volume> SSC-4(2):100-107, </volume> <year> 1968. </year>
Reference-contexts: 1 Introduction Best-first search in the tradition of A fl <ref> [ Hart et al., 1968 ] </ref> typically requires exponential space. Therefore, it quickly runs out of space even for problem instances of moderate size when searching for optimal solutions.
Reference: [ Kaindl and Khorsand, 1994 ] <author> H. Kaindl and A. Khorsand. </author> <title> Memory-bounded bidirectional search. </title> <booktitle> In Proc. AAAI-94, </booktitle> <pages> pages 1359-1364, </pages> <year> 1994. </year>
Reference-contexts: Recent results show that bidirectional search has the potential to improve on unidirectional search <ref> [ Kaindl and Khorsand, 1994; Koll and Kaindl, 1993 ] </ref> . Unfortunately, traditional bidirectional search requires rather complicated mechanisms that make it difficult to implement.
Reference: [ Kaindl and Smetana, 1994 ] <author> H. Kaindl and H. Smetana. </author> <title> Experimental comparison of heuristic search algorithms. </title> <booktitle> In AAAI-94 Workshop on Experimental Evaluation of Reasoning and Search Methods, </booktitle> <pages> pages 11-14, </pages> <year> 1994. </year>
Reference-contexts: Since smaller perimeter depth means fewer stored nodes and therefore less overhead through wave shaping, the perimeter depth 2 results in better running time, and consequently we show these data in our figure. 8 More details on the statistic tests used can be found in <ref> [ Kaindl et al., 1994; Kaindl and Smetana, 1994 ] </ref> . 0.1 10 10 20 30 40 50 60 u n n t m i s c n s Number of Jobs A fl DFBB fi fi fi DFBB-Reverse ? ? ? ? A fl 2 2 A fl Reverse 3
Reference: [ Kaindl et al., 1994 ] <author> H. Kaindl, A. Leeb, and H. Smetana. </author> <title> Improvements on linear-space search algorithms. </title> <booktitle> In Proc. ECAI-94, </booktitle> <pages> pages 155-159, </pages> <year> 1994. </year>
Reference-contexts: Since smaller perimeter depth means fewer stored nodes and therefore less overhead through wave shaping, the perimeter depth 2 results in better running time, and consequently we show these data in our figure. 8 More details on the statistic tests used can be found in <ref> [ Kaindl et al., 1994; Kaindl and Smetana, 1994 ] </ref> . 0.1 10 10 20 30 40 50 60 u n n t m i s c n s Number of Jobs A fl DFBB fi fi fi DFBB-Reverse ? ? ? ? A fl 2 2 A fl Reverse 3
Reference: [ Kainz, 1995 ] <author> G. </author> <month> Kainz. </month> <institution> Heuristische Suche mit begrenz-tem Speicherbedarf. Doctoral dissertation, Technische Universitat Wien, </institution> <year> 1995. </year> <month> Forthcoming. </month>
Reference-contexts: From the derivations of our algorithms, it should be intuitively clear that these algorithms are admissible, i.e., if a solution exists, they terminate with an optimal solution. Formal proofs can be found in <ref> [ Kainz, 1995 ] </ref> . a i and penalty constants p i (associated with completing a job at time t i ) are submitted to a one-machine job-shop. t i is the sum of the times a j of all jobs j on the currently evaluated path.
Reference: [ Koll and Kaindl, 1993 ] <author> A.L. Koll and H. Kaindl. </author> <title> Bidirectional best-first search with bounded error: Summary of results. </title> <booktitle> In Proc. IJCAI-93, </booktitle> <pages> pages 217-223, </pages> <address> Chambery, France, </address> <year> 1993. </year>
Reference-contexts: heuristic information computed between two search frontiers: wave-shaping approaches to bidirectional search utilize memory to store such values computed during the search; 5. for finding solutions: two cases can be distinguished here: (a) finding solutions at all: traditional bidirectional search like BHPA [ Pohl, 1971 ] and IBS fl " <ref> [ Koll and Kaindl, 1993 ] </ref> needs the memory to find solutions by recognizing meetings of the search frontiers; (b) finding solutions earlier: the non-traditional approach to bidirectional search described below uses memory to find so lutions earlier than without the memory. 6. for proving solution quality: bidirectional heuristic search utilizes <p> Recent results show that bidirectional search has the potential to improve on unidirectional search <ref> [ Kaindl and Khorsand, 1994; Koll and Kaindl, 1993 ] </ref> . Unfortunately, traditional bidirectional search requires rather complicated mechanisms that make it difficult to implement.
Reference: [ Korf, 1985 ] <author> R.E. Korf. </author> <title> Depth-first iterative deepening: An optimal admissible tree search. </title> <journal> Artificial Intelligence, </journal> <volume> 27(1) </volume> <pages> 97-109, </pages> <year> 1985. </year>
Reference-contexts: 1 Introduction Best-first search in the tradition of A fl [ Hart et al., 1968 ] typically requires exponential space. Therefore, it quickly runs out of space even for problem instances of moderate size when searching for optimal solutions. In contrast, linear-space search like IDA fl <ref> [ Korf, 1985 ] </ref> , RBFS [ Korf, 1993 ] and DFBB [ Lawler and Wood, 1966 ] does not suffer from memory limitations. Typically, there is even much more memory available than needed by such algorithms. <p> half of the nodes compared to IDA fl , and although the effort for hashing slows it down, Trans is faster than IDA fl since it utilizes its memory well. 6 IDPS fl saves even 73 percent of the nodes 4 We used the complete set of 100 instances from <ref> [ Korf, 1985 ] </ref> . 5 In an efficient implementation of the 15-Puzzle, even checking of whether a node generated by IDA fl is in the opposing search frontier means a measurable overhead, although this can be done efficiently via hashing. <p> Therefore, the generic approach in this paper tries to utilize key ideas of bidirectional search in an efficient manner. A bidirectional algorithm sketched in <ref> [ Korf, 1985 ] </ref> employs DFID (depth-first iterative-deepening without using heuristic knowledge). Since its space requirement is still O (b d=2 ), it cannot solve difficult problems.
Reference: [ Korf, 1993 ] <author> R.E. Korf. </author> <title> Linear-space best-first search. </title> <journal> Artificial Intelligence, </journal> <volume> 62(1) </volume> <pages> 41-78, </pages> <year> 1993. </year>
Reference-contexts: Therefore, it quickly runs out of space even for problem instances of moderate size when searching for optimal solutions. In contrast, linear-space search like IDA fl [ Korf, 1985 ] , RBFS <ref> [ Korf, 1993 ] </ref> and DFBB [ Lawler and Wood, 1966 ] does not suffer from memory limitations. Typically, there is even much more memory available than needed by such algorithms. Since they cannot make use of such memory, however, their running time is unnecessarily long. <p> RBFS has the potential to be better than IDA fl on the sliding-tile puzzle, but actually its results are slightly worse on this specific problem set according to <ref> [ Korf, 1993 ] </ref> due to noise in the tie-breaking on the last iteration. Fig. 3 shows a comparison of these algorithms in terms of the average number of node generations and their running times. 5 The data are normalized to the respective search effort of IDA fl . <p> The reason is that node generation and evaluation can be done very efficiently for the sliding-tile puzzles <ref> [ Korf, 1993 ] </ref> . Even the machine architecture can influence the relative running time up to a certain degree. Therefore, we note that our data were gained using a Convex C3220.
Reference: [ Kwa, 1989 ] <author> J.B.H. Kwa. </author> <title> BS fl : An Admissible Bidirectional Staged Heuristic Search Algorithm. </title> <journal> Artificial Intelligence, </journal> <volume> 38(2) </volume> <pages> 95-109, </pages> <year> 1989. </year>
Reference-contexts: More technically, when the depth-first search invoked by IDA fl meets a Closed node of the opposing A fl search frontier, this branch can be cut off (meeting an Open node is in general insufficient). We call this nipping according to an analogous method described in <ref> [ Kwa, 1989 ] </ref> . In an efficient implementation of the 15-Puzzle even the effort of hashing at every node causes an overhead that cannot be ignored. <p> In particular, our approach can solve much more difficult problems with the same amount of memory and within reasonable time. 6 Related work Originally, bidirectional heuristic search did not work as expected <ref> [ de Champeaux, 1983; Kwa, 1989; Pohl, 1971 ] </ref> . Recent results show that bidirectional search has the potential to improve on unidirectional search [ Kaindl and Khorsand, 1994; Koll and Kaindl, 1993 ] . Unfortunately, traditional bidirectional search requires rather complicated mechanisms that make it difficult to implement.
Reference: [ Lawler and Wood, 1966 ] <author> E.L. Lawler and D. Wood. </author> <title> Branch-and-bound methods: a survey. </title> <journal> Operations Research, </journal> <volume> 14 </volume> <pages> 699-719, </pages> <year> 1966. </year>
Reference-contexts: Therefore, it quickly runs out of space even for problem instances of moderate size when searching for optimal solutions. In contrast, linear-space search like IDA fl [ Korf, 1985 ] , RBFS [ Korf, 1993 ] and DFBB <ref> [ Lawler and Wood, 1966 ] </ref> does not suffer from memory limitations. Typically, there is even much more memory available than needed by such algorithms. Since they cannot make use of such memory, however, their running time is unnecessarily long.
Reference: [ Pohl, 1971 ] <author> I. Pohl. </author> <title> Bi-directional search. </title> <booktitle> In Machine Intelligence 6, </booktitle> <pages> pages 127-140, </pages> <address> Edinburgh, 1971. </address> <publisher> Edinburgh University Press. </publisher>
Reference-contexts: the stored part of the search graph; (c) heuristic information computed between two search frontiers: wave-shaping approaches to bidirectional search utilize memory to store such values computed during the search; 5. for finding solutions: two cases can be distinguished here: (a) finding solutions at all: traditional bidirectional search like BHPA <ref> [ Pohl, 1971 ] </ref> and IBS fl " [ Koll and Kaindl, 1993 ] needs the memory to find solutions by recognizing meetings of the search frontiers; (b) finding solutions earlier: the non-traditional approach to bidirectional search described below uses memory to find so lutions earlier than without the memory. 6. <p> According to step 1 of our generic approach, the search directions must be assigned to the A fl and the IDA fl part, respectively. For traditional bidirectional search, Pohl <ref> [ Pohl, 1971 ] </ref> proposed and used a cardinality criterion for the problem of determining the frontier from which to select a node for expansion: continue searching from the frontier with fewer Open nodes. <p> In particular, our approach can solve much more difficult problems with the same amount of memory and within reasonable time. 6 Related work Originally, bidirectional heuristic search did not work as expected <ref> [ de Champeaux, 1983; Kwa, 1989; Pohl, 1971 ] </ref> . Recent results show that bidirectional search has the potential to improve on unidirectional search [ Kaindl and Khorsand, 1994; Koll and Kaindl, 1993 ] . Unfortunately, traditional bidirectional search requires rather complicated mechanisms that make it difficult to implement.
Reference: [ Rao et al., 1991 ] <author> V.N. Rao, V. Kumar, and R.E. Korf. </author> <title> Depth-first vs best-first search. </title> <booktitle> In Proc. AAAI-91, </booktitle> <pages> pages 434-440, </pages> <address> Anaheim, 1991. Los Altos, CA.: Kauf-mann. </address>
Reference-contexts: Of course, an instantiation should make use of any domain-specific information available. In particular, it should combine those unidirectional search algorithms that best suit the properties of the domain (see, e.g., <ref> [ Rao et al., 1991; Zhang and Korf, 1993 ] </ref> ).
Reference: [ Reinefeld and Marsland, 1994 ] <author> A. Reinefeld and T.A. Marsland. </author> <title> Enhanced iterative-deepening search. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence (PAMI), </journal> <volume> 16(12) </volume> <pages> 701-709, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Fig. 2 shows a useful specialization of our generic approach that uses memory on both sides of the search space: a transposition table <ref> [ Reinefeld and Marsland, 1994 ] </ref> on one side, and the memory of a traditional best-first search on the other. The former is used for finding transpositions and caching more accurate heuristic evaluations closer to the goal. <p> finding optimal solutions to a set of (sliding-tile) 15-Puzzle problems. 4 We compare our new algorithms BAI and BAITrans on these problems with other algorithms that achieve the best results known here yet without using domain-specific knowledge about the puzzle other than the Manhattan distance heuristic: IDA fl , Trans <ref> [ Reinefeld and Marsland, 1994 ] </ref> and IDPS fl (perimeter search) [ Dillenburg and Nelson, 1994 ] . <p> Note the different way of presenting the results: absolute data in our figure vs. relative to problem difficulty in <ref> [ Reinefeld and Marsland, 1994 ] </ref> . We had to re-implement Trans, since the detailed data in terms of node generation numbers provided by Alexander Reinefeld and the data reported in [ Reinefeld and Marsland, 1994 ] were insufficient to get comparable data on the running times. <p> Note the different way of presenting the results: absolute data in our figure vs. relative to problem difficulty in <ref> [ Reinefeld and Marsland, 1994 ] </ref> . We had to re-implement Trans, since the detailed data in terms of node generation numbers provided by Alexander Reinefeld and the data reported in [ Reinefeld and Marsland, 1994 ] were insufficient to get comparable data on the running times. Actually, Trans+Move is the best algorithm described in [ Reinefeld and Marsland, 1994 ] , but its absolute results are less than one percent better than those of Trans. <p> We had to re-implement Trans, since the detailed data in terms of node generation numbers provided by Alexander Reinefeld and the data reported in <ref> [ Reinefeld and Marsland, 1994 ] </ref> were insufficient to get comparable data on the running times. Actually, Trans+Move is the best algorithm described in [ Reinefeld and Marsland, 1994 ] , but its absolute results are less than one percent better than those of Trans. <p> to unidirectional search algorithms with reduced space requirements: MREC [ Sen and Bagchi, 1989 ] , MA fl [ Chakrabarti et al., 1989 ] , SMA fl [ Russell, 1992 ] , ITS [ Ghosh et al., 1994 ] , and the approach of using certain tables for IDA fl <ref> [ Reinefeld and Marsland, 1994 ] </ref> . From these, Trans and Trans+Move [ Reinefeld and Marsland, 1994 ] gave the best results on the 15-Puzzle in terms of running time that we are aware of. <p> Bagchi, 1989 ] , MA fl [ Chakrabarti et al., 1989 ] , SMA fl [ Russell, 1992 ] , ITS [ Ghosh et al., 1994 ] , and the approach of using certain tables for IDA fl <ref> [ Reinefeld and Marsland, 1994 ] </ref> . From these, Trans and Trans+Move [ Reinefeld and Marsland, 1994 ] gave the best results on the 15-Puzzle in terms of running time that we are aware of. Similarly to some of this referenced work, our BAI algorithm can be viewed as saving nodes otherwise searched by IDA fl .
Reference: [ Russell, 1992 ] <author> S. Russell. </author> <title> Efficient memory-bounded search methods. </title> <booktitle> In Proc. ECAI-92, </booktitle> <pages> pages 1-5, </pages> <address> Vienna, Austria, 1992. Chichester: </address> <publisher> Wiley. </publisher>
Reference-contexts: Apart from bidirectional search there are some relations to unidirectional search algorithms with reduced space requirements: MREC [ Sen and Bagchi, 1989 ] , MA fl [ Chakrabarti et al., 1989 ] , SMA fl <ref> [ Russell, 1992 ] </ref> , ITS [ Ghosh et al., 1994 ] , and the approach of using certain tables for IDA fl [ Reinefeld and Marsland, 1994 ] .
Reference: [ Sen and Bagchi, 1989 ] <author> A.K. Sen and A. Bagchi. </author> <title> Fast recursive formulations for best-first search that allow controlled use of memory. </title> <booktitle> In Proc. IJCAI-89, </booktitle> <pages> pages 297-302, </pages> <year> 1989. </year>
Reference-contexts: extra memory (which may also be used as in [ Taylor and Korf, 1993 ] ); 4. for caching information about heuristic estimates: three cases can be distinguished here: (a) static heuristic value: storing such values avoids recomputation; (b) more accurate information closer to a goal: memory-bounded algorithms like MREC <ref> [ Sen and Bagchi, 1989 ] </ref> propagate better heuristic estimates found during their linear-space searches back to the stored part of the search graph; (c) heuristic information computed between two search frontiers: wave-shaping approaches to bidirectional search utilize memory to store such values computed during the search; 5. for finding solutions: <p> However, the key difference is the use of a form of wave shaping in perimeter search, that makes it inefficient in terms of running time. Apart from bidirectional search there are some relations to unidirectional search algorithms with reduced space requirements: MREC <ref> [ Sen and Bagchi, 1989 ] </ref> , MA fl [ Chakrabarti et al., 1989 ] , SMA fl [ Russell, 1992 ] , ITS [ Ghosh et al., 1994 ] , and the approach of using certain tables for IDA fl [ Reinefeld and Marsland, 1994 ] .
Reference: [ Sen and Bagchi, 1993 ] <author> A.K. Sen and A. Bagchi. </author> <title> Job sequencing with quadratic penalties: an A fl -based graph search approach. </title> <booktitle> In Proc. CAIA-93, </booktitle> <pages> pages 190-196, </pages> <address> Orlando, FL, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: than pure IDA fl . 4 Instantiating for a Domain with Many Distinct Cost Values: Single Machine Scheduling Now let us show how our generic approach can be instantiated for a domain that is characterized by having many distinct cost values: a scheduling domain described and used for experiments in <ref> [ Sen and Bagchi, 1993; Townsend, 1978 ] </ref> . 3 3 Since this benchmark domain is not widely known, we sketch it shortly. It deals with one-machine job sequence problems of the following form. <p> As compared in <ref> [ Sen and Bagchi, 1993 ] </ref> , these results signified a very strong improvement over previous approaches that did not utilize the graph structure of the search space. <p> We used the same 100 randomly generated problem instances per "number of jobs" as <ref> [ Sen and Bagchi, 1993 ] </ref> , since Anup Sen made the generator available to us. The figure shows the results in terms of running time, but the numbers of generated nodes are quite the same, since computing the heuristic values dominates the running time.
Reference: [ Taylor and Korf, 1993 ] <author> L.A. Taylor and R.E. Korf. </author> <title> Pruning duplicate nodes in depth-first search. </title> <booktitle> In Proc. AAAI-93, </booktitle> <pages> pages 756-761, </pages> <address> Washington, D.C., 1993. Los Altos, CA.: </address> <publisher> Kaufmann. </publisher>
Reference-contexts: and all nodes in the other, i.e., the effort is proportional to the cross product of the numbers of nodes in the frontiers. 2 Transpositions arise when different paths lead to the same node. and DFBB normally cannot recognize transpositions without extra memory (which may also be used as in <ref> [ Taylor and Korf, 1993 ] </ref> ); 4. for caching information about heuristic estimates: three cases can be distinguished here: (a) static heuristic value: storing such values avoids recomputation; (b) more accurate information closer to a goal: memory-bounded algorithms like MREC [ Sen and Bagchi, 1989 ] propagate better heuristic estimates
Reference: [ Townsend, 1978 ] <author> W. Townsend. </author> <title> The single machine problem with quadratic penalty function of completion times: a branch-and-bound solution. </title> <journal> Management Science, </journal> <volume> 24(5) </volume> <pages> 530-534, </pages> <year> 1978. </year>
Reference-contexts: than pure IDA fl . 4 Instantiating for a Domain with Many Distinct Cost Values: Single Machine Scheduling Now let us show how our generic approach can be instantiated for a domain that is characterized by having many distinct cost values: a scheduling domain described and used for experiments in <ref> [ Sen and Bagchi, 1993; Townsend, 1978 ] </ref> . 3 3 Since this benchmark domain is not widely known, we sketch it shortly. It deals with one-machine job sequence problems of the following form.
Reference: [ Zhang and Korf, 1993 ] <author> W. Zhang and R.E. Korf. </author> <title> Depth-first vs. best-first search: new results. </title> <booktitle> In Proc. AAAI-93, </booktitle> <pages> pages 769-775, </pages> <address> Washington, D.C., 1993. Los Altos, CA.: </address> <publisher> Kaufmann. </publisher>
Reference-contexts: Of course, an instantiation should make use of any domain-specific information available. In particular, it should combine those unidirectional search algorithms that best suit the properties of the domain (see, e.g., <ref> [ Rao et al., 1991; Zhang and Korf, 1993 ] </ref> ).
References-found: 24

