URL: http://simon.cs.cornell.edu/home/selman/papers-ftp/kc-gen.ps
Refering-URL: http://simon.cs.cornell.edu/home/selman/papers-ftp/index.html
Root-URL: 
Email: kautz@research.att.com selman@research.att.com  
Title: A General Framework for Knowledge Compilation  
Author: Henry Kautz and Bart Selman 
Address: Murray Hill, NJ 07974 USA  
Affiliation: AI Principles Research Department AT&T Bell Laboratories  
Abstract: Computational efficiency is a central concern in the design of knowledge representation systems. In order to obtain efficient systems it has been suggested that one should limit the form of the statements in the knowledge base or use an incomplete inference mechanism. The former approach is often too restrictive for practical applications, whereas the latter leads to uncertainty about exactly what can and cannot be inferred from the knowledge base. We present a third alternative, in which knowledge given in a general representation language is translated (compiled) into a tractable form | allowing for efficient subsequent query answering. We show how propositional logical theories can be compiled into Horn theories that approximate the original information. The approximations bound the original theory from below and above in terms of logical strength. The procedures are extended to other tractable languages (for example, binary clauses) and to the first-order case. Finally, we demonstrate the generality of our approach by compiling concept descriptions in a general frame-based language into a tractable form. This paper appears in the Proceedings of the International Workshop on Processing Declarative Knowledge, Kaiserlautern, Germany, July 1991. Book version of the proceedings forthcoming from Springer-Verlag. 
Abstract-found: 1
Intro-found: 1
Reference: [ Boddy and Dean, 1988 ] <author> Mark Boddy and Thomas Dean. </author> <title> Solving time dependent planning problems. </title> <type> Technical report, </type> <institution> Department of Computer Science, Brown University, </institution> <year> 1988. </year>
Reference-contexts: Since the approximations may be needed for query answering before the compilation process finishes, it is desirable to employ procedures that can output lower- and upper-bounds as intermediate results, generating better and better bounds over time. That is, the approximation algorithms should be "anytime" procedures <ref> [ Boddy and Dean, 1988 ] </ref> . Central to our algorithm for computing the GLB (Figure 1) is the following notion.
Reference: [ Brachman et al., 1990 ] <author> Ronald J. Brachman, Deborah L. McGuinness, Peter F. Patel-Schneider, Lori Alperin Resnick, and Alexander Borgida. </author> <title> Living with classic: When and how to use a kl-one-like language. </title> <editor> In J. Sowa, editor, </editor> <title> Formal Aspects of Semantic Networks. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1990. </year>
Reference-contexts: In general, a KB will of course contain a hierarchy of concepts <ref> [ Brachman et al., 1990 ] </ref> . In that case, we simply store bounds with each concept. When given a concept, the system can use those bounds in determining the appropriate place of the new concept in the hierarchy. 5 Conclusions We introduced the notion of knowledge compilation.
Reference: [ Cook, 1971 ] <author> S. A. Cook. </author> <title> The complexity of theorem-proving procedures. </title> <booktitle> In Proceedings of the 3rd Annual ACM Symposium on the Theory of Computing, </booktitle> <pages> pages 151-158, </pages> <year> 1971. </year>
Reference-contexts: Formulas are given in 1 conjunctive normal form (a conjunction of disjuncts), so they can be represented by a set of clauses. In general, determining whether a given formula (the query) follows from a set of formulas in a knowledge base is intractable (provided P 6= N P ) <ref> [ Cook, 1971 ] </ref> . However, when the knowledge base contains only Horn clauses the problem can be solved in linear time [ Dowling and Gallier, 1984 ] .
Reference: [ Craig, 1955 ] <author> W. Craig. </author> <title> Three uses of the herbrand-gentzen theorem in relating model theory and proof theory. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 22, </volume> <year> 1955. </year>
Reference-contexts: Given this sense of what is irrelevant, knowledge compilation can then be used as way to remove the irrelevant information and simplify the theory. The class of clauses not containing a given set of letters has the following special property, which follows from Craig's Interpolation Lemma <ref> [ Craig, 1955 ] </ref> : The LUB is just as good as the original theory for answering queries not containing the prohibited letters. Formally: Theorem 3 Let be a set of clauses and both and L Q sets of clauses not containing a given set of propositional letters.
Reference: [ Dowling and Gallier, 1984 ] <author> William F. Dowling and Jean H. Gallier. </author> <title> Linear time algorithms for testing the satisfiability of propositional horn formula. </title> <journal> Journal of Logic Programming, </journal> <volume> 3 </volume> <pages> 267-284, </pages> <year> 1984. </year>
Reference-contexts: In general, determining whether a given formula (the query) follows from a set of formulas in a knowledge base is intractable (provided P 6= N P ) [ Cook, 1971 ] . However, when the knowledge base contains only Horn clauses the problem can be solved in linear time <ref> [ Dowling and Gallier, 1984 ] </ref> . We therefore take as the goal of our knowledge compilation process the translation of an arbitrary set of clauses into a logically equivalent set of Horn clauses.
Reference: [ Doyle and Patil, 1991 ] <author> J. Doyle and R. Patil. </author> <title> Two theses of knowledge representation: Language restrictions, taxonomic classification, and the utility of representation services. </title> <journal> Artificial Intelligence, </journal> <volume> 48(3) </volume> <pages> 261-298, </pages> <year> 1991. </year>
Reference-contexts: One way to make the logicist approach more computationally attractive is to restrict the expressive power of the representation language, so that fast, special-purpose inference algorithms can be employed. But this usually renders the language too limited for practical application <ref> [ Doyle and Patil, 1991 ] </ref> , and leaves unanswered the question of what to do with information that cannot be represented in the restricted form. This paper describes an approach to efficient symbolic inference called knowledge compilation, which overcomes these objections.
Reference: [ Forbus, 1984 ] <author> K.D. Forbus. </author> <title> Qualitative process theory. </title> <journal> Artificial Intelligence, </journal> <volume> 24 </volume> <pages> 85-168, </pages> <year> 1984. </year>
Reference-contexts: Currently we are working on empirical evaluation of our knowledge compilation approach. The domain under study is a small part of Forbus's qualitative process theory <ref> [ Forbus, 1984 ] </ref> . Qualitative axiomatizations of the physical world can be used to reason about everyday activities such as boiling water, rolling balls, or perhaps even the steeplechasing crocodile mentioned in the introduction.
Reference: [ Forbus, 1990 ] <author> Kenneth D. Forbus. </author> <title> The qualitative process engine. </title> <editor> In Deaniel S. Weld and Johan de Kleer, editors, </editor> <booktitle> Readings in Qualitative Reasoning About Physical Systems, </booktitle> <pages> pages 220-235. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1990. </year>
Reference-contexts: We hope to automatically convert the original non-Horn axiomization of qualitative process theory into Horn approximations; in essence, automating part of the work that Forbus performed when implementing his theory using the ATMS <ref> [ Forbus, 1990 ] </ref> .
Reference: [ Heintze and Jaffar, 1990 ] <author> Nevin Heintze and Joxan Jaffar. </author> <title> A finite presentation theorem for approximating logic programs. </title> <booktitle> In Proceedings of POPL-90, </booktitle> <pages> page 197, </pages> <year> 1990. </year>
Reference-contexts: Some recent research on the analysis of Prolog programs (for use in, for example, optimization and program specification) can be viewed as a kind of knowledge compilation. For example, <ref> [ Heintze and Jaffar, 1990 ] </ref> describes how to construct a recursive (i.e., decidable) approximation to a potentially non-recursive logic program. Their method is based on modifying each predicate by relaxing the relationship between the arguments to the predicate.
Reference: [ Lee, 1967 ] <author> R. C. T. Lee. </author> <title> A Completeness Theorem and a Computer Program for Finding Theorems Derivable From Given Axioms. </title> <type> PhD thesis, </type> <institution> University of California at Berkeley, Berkeley, </institution> <address> CA, </address> <year> 1967. </year> <month> 12 </month>
Reference-contexts: Suppose such a is closed under resolution (i.e., the resolvents of two -clauses is a -clause). Then the completeness theorem for resolution <ref> [ Lee, 1967 ] </ref> tells us that any (non-tautologous) clause C entailed by a set of -clauses must be subsumed by a clause C 0 which has a resolution proof from ; and therefore C 0 is a -clause itself. In other words, entails a -strengthening of C.
Reference: [ Levesque and Brachman, 1985 ] <author> H.J. Levesque and R.J. Brachman. </author> <title> A fundamental tradeoff in knowledge representation and reasoning (revised version). </title> <editor> In R.J. Brachman and H.J. Levesque, editors, </editor> <booktitle> Readings in Knowledge Representation, </booktitle> <pages> pages 41-70. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Los Altos, CA, </address> <year> 1985. </year>
Reference-contexts: Thus their method computes a lower-bound of the theory (but not in general the greatest lower-bound). 4.4 Terminological Reasoning We now consider frame-based knowledge representation languages as studied in <ref> [ Levesque and Brachman, 1985 ] </ref> (see also [ Patel-Schneider et al., 1990 ] ). Levesque and Brachman consider a language F L in which one can describe structured concepts in terms of other concepts, either complex or primitive.
Reference: [ Levesque, 1989 ] <author> Hector J. Levesque. </author> <title> Logic and the complexity of reasoning. </title> <type> Technical Report KRR-TR-89-2, </type> <institution> Department of Computer Science, University of Toronto, Toronto, </institution> <address> Ontario, Canada, </address> <month> Jan </month> <year> 1989. </year>
Reference: [ Patel-Schneider et al., 1990 ] <author> P. Patel-Schneider, B. Owsnicki-Klewe, A. Kobsa, N. Guarino, R. MacGregor, W.S. Mark, D.L. McGuinness, B. Nebel, A. Schmiedel, and J. Yen. </author> <title> Term subsumption languages in knowledge representation. </title> <journal> AI Magazine, </journal> <volume> 11(2) </volume> <pages> 16-23, </pages> <year> 1990. </year>
Reference-contexts: Thus their method computes a lower-bound of the theory (but not in general the greatest lower-bound). 4.4 Terminological Reasoning We now consider frame-based knowledge representation languages as studied in [ Levesque and Brachman, 1985 ] (see also <ref> [ Patel-Schneider et al., 1990 ] </ref> ). Levesque and Brachman consider a language F L in which one can describe structured concepts in terms of other concepts, either complex or primitive.
Reference: [ Selman and Kautz, 1991a ] <author> Bart Selman and Henry Kautz. </author> <title> Knowledge compilation using horn approximations. </title> <booktitle> In Proceedings of AAAI-91, </booktitle> <address> Anaheim, CA, </address> <year> 1991. </year>
Reference-contexts: This form of knowledge compilation was first introduced in <ref> [ Selman and Kautz, 1991a ] </ref> . <p> As shown in <ref> [ Selman and Kautz, 1991a ] </ref> , there does not exist a polynomial time procedure for generating such approximations (provided P6=NP). Computing the Horn approximations is therefore treated as a compilation process in which the computational cost is amortized over the total set of subsequent queries to the KB. <p> A unique advantage of our approach is the use of both lower and upper bounds can speed reasoning without giving up correctness or completeness. We discussed various concrete examples of our approach. In particular, we showed how the procedures for compiling propositional theories into Horn theories <ref> [ Selman and Kautz, 1991a ] </ref> can be generalized to apply to other tractable classes of clauses. Those classes were characterized using various closure conditions.
Reference: [ Selman and Kautz, 1991b ] <author> Bart Selman and Henry Kautz. </author> <title> Methods of knowledge compilation. </title> <note> In Preparation, </note> <year> 1991. </year>
Reference-contexts: Since even a Horn theory can have exponentially many resolvents (all Horn), it is very inefficient to simply generate all resolvents of the original theory while collecting the Horn ones. It sufficient, however, to resolve only pairs of clauses containing at least one non-Horn clause <ref> [ Selman and Kautz, 1991b ] </ref> . 3 General Framework Computing Horn approximations is just one kind of knowledge compilation. This section defines a general framework for approximating a knowledge base. The next section presents a number of different instances of this general framework. <p> Theorem 4 A set of first-order clauses lub is the least Horn upper-bound of a set of first-order clauses iff lub is equivalent to the set of Horn clauses subsumed by resolvants of . Similar conditions apply to the reverse Horn case. In <ref> [ Selman and Kautz, 1991b ] </ref> we present an algorithm for generating the LUB based on theorem 4. Finally, we note that the query language L Q should be such that the negation of a query falls in L T .
Reference: [ Subramanian and Genesereth, 1987 ] <author> Devika Subramanian and Michael R. Genesereth. </author> <title> The relevance of irrelevance. </title> <booktitle> In Proceedings of IJCAI-87, </booktitle> <volume> volume 1, </volume> <pages> page 416, </pages> <year> 1987. </year>
Reference-contexts: Subramanian and Genesereth <ref> [ Subramanian and Genesereth, 1987 ] </ref> present a formal system for inferring that certain propositions are irrelevant to the computation of a given class of queries. Given this sense of what is irrelevant, knowledge compilation can then be used as way to remove the irrelevant information and simplify the theory.
Reference: [ Ullman, 88 ] <author> Jeffrey D. Ullman. </author> <title> Principles of Database and Knowledge-Base Systems, Volume I. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, 88. </address> <month> 13 </month>
Reference-contexts: Languages based on definite clauses can be efficiently implemented and have found widespread practical applications. For example, function-free first-order definite clauses form the basis of the database language "dat-alog" <ref> [ Ullman, 88 ] </ref> , and general first-order definite clauses form the basis of the programming language Prolog. (In both cases, non-logical operators such as "cut" and "failure to prove" extend the logical basis.) It is not possible, in general, to find a definite clause lower-bound of a general theory.
References-found: 17

