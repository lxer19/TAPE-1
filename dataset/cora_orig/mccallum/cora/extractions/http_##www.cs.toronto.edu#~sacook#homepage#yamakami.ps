URL: http://www.cs.toronto.edu/~sacook/homepage/yamakami.ps
Refering-URL: http://www.cs.toronto.edu/~sacook/homepage/
Root-URL: http://www.cs.toronto.edu
Email: E-mail: sacook@cs.toronto.edu  E-mail: russell@cs.ucsd.edu  E-mail: yamakami@cs.toronto.edu  
Title: A Tight Relationship between Generic Oracles and Type-2 Complexity Theory  
Author: Stephen Cook Russell Impagliazzo and Tomoyuki Yamakami 
Note: Research supported by an NSERC operating grant and the Information Technology Research Centre. Research supported by NSF YI Award CCR-92-570979, Sloan Research Fellowship BR-3311, grant #93025 of the joint US-Czechoslovak Science and Technology Program, and USA-Israel BSF grant 92 00043.  
Address: Toronto, Toronto, Ontario, Canada M5S 3G4  San Diego, La Jolla, CA 92093  Toronto, Toronto, Ontario, Canada M5S 3G4  
Affiliation: Department of Computer Science, University of  Department of Computer Science, University of  Department of Computer Science, University of  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Baker, T. J., Gill, J., and Solovay, R. </author> <year> (1975), </year> <title> Relativizations of the P =?NP question, </title> <journal> SIAM J. Computing 4, </journal> <pages> 431-442. </pages>
Reference-contexts: Such machines have long been used in complexity theory to represent reductions (as in Cook [6]) or relativized complexity classes (as in Baker, Gill, and Solovay <ref> [1] </ref>). The alternative point of view is to use the OTM to define a type-2 relation (or function), in which the oracle is one of the arguments of the relation. <p> For the case of NP search classes, this was done by Beame et al [2]. Baker, Gill, and Solovay <ref> [1] </ref> defined the polynomial- time hierarchy PH A relativized to an oracle A. By taking our second point of view, their work defines the type-2 polynomial time hierarchy PH, in which each member relation takes an oracle A as an argument, in addition to a string argument. <p> Thus it suffices to construct A so that NP A " coNP A 6 P SAT A , where SAT is any NP-complete problem. Baker, Gill, and Solovay <ref> [1] </ref> construct an oracle A separating P A and NP A " coNP A . This construction is easily relativized so that we can make the separating oracle A have the form SAT B for some B.
Reference: [2] <author> Beame, P., Cook, S., Edmonds, J., Impagliazzo, R., and Pitassi T. </author> <year> (1995), </year> <title> The relative complexity of NP search problems, </title> <booktitle> in "Proceedings, 27th ACM Symposium on Theory of Computing", </booktitle> <pages> pp. 303-314. </pages>
Reference-contexts: Kaltofen and Trager [16] give efficient algorithms for such things as computing greatest common divisors, when the input polynomials are accessed only through queries. Another example is NP search problems, where the input is an exponentially large search space. Beame et al <ref> [2] </ref> give a natural type-2 description of such problems. For a third example, Cook and Urquhart [7] show how to use higher-type polynomial-time functions to give constructive meaning to number theory theorems proved in a certain formal system. <p> For the case of the polynomial hierarchy, where the oracle represents a function whose growth does not affect the input size, this point of view was taken by Townsend [27], (see also [28] and [29]). For the case of NP search classes, this was done by Beame et al <ref> [2] </ref>. Baker, Gill, and Solovay [1] defined the polynomial- time hierarchy PH A relativized to an oracle A. <p> Fortnow and Yamakami [10] strengthen this result to show that p p k properly contains p k relative to a generic oracle. From the above theorem we can conclude proper containment for the corresponding type-2 classes. 11 6 Search Classes For this section we follow the treatment in <ref> [2] </ref> of type-2 search problems, motivated by Papadimitriou's NP search classes [21]. In general, a type-2 search problem Q assigns a set Q (x; ff) of strings to (x; ff), representing the set of possible solutions to problem instance (x; ff). <p> Proceed as in the proof of Theorem 3.2 to handle the case in which the function argument ff is a set A, and then apply the technique of the proof of Theorem 5.2 to handle the general case. 2 The above result is used to prove Theorem 1 of <ref> [2] </ref> (there stated without proof). It follows from this and other results in [2] that a number of NP search problems are distinct relative to a generic oracle. <p> in which the function argument ff is a set A, and then apply the technique of the proof of Theorem 5.2 to handle the general case. 2 The above result is used to prove Theorem 1 of <ref> [2] </ref> (there stated without proof). It follows from this and other results in [2] that a number of NP search problems are distinct relative to a generic oracle.
Reference: [3] <author> Blum, M., and Impagliazzo, R. </author> <year> (1987), </year> <title> Generic oracles and oracle classes, </title> <booktitle> in "Proceedings, 28th IEEE Symposium on Foundations of Computer Science", </booktitle> <pages> pp. 118-126. </pages>
Reference-contexts: It follows that all levels in PH are absolutely distinct. Generic sets were introduced by Cohen [4] as a tool for proving independence results in set theory. A general treatment of complexity theory relative to a generic oracle was developed by Blum and Impagliazzo <ref> [3] </ref>, and Fenner et al [8] contains a recent survey of the subject. 4 In general if two complexity classes coincide relative to a generic oracle, then they coincide absolutely. This follows from a result in [3], reproduced as Theorem 2.2 below. <p> of complexity theory relative to a generic oracle was developed by Blum and Impagliazzo <ref> [3] </ref>, and Fenner et al [8] contains a recent survey of the subject. 4 In general if two complexity classes coincide relative to a generic oracle, then they coincide absolutely. This follows from a result in [3], reproduced as Theorem 2.2 below. The converse does not always hold, since for example IP = PSPACE [19], [24], but the classes are distinct relative to a generic oracle [9]. However, the question of whether a generic oracle separates two classes is natural and robust . <p> However, the question of whether a generic oracle separates two classes is natural and robust . In general, one generic oracle separates the classes iff all generic oracles separate them <ref> [3] </ref>. We prove in Theorem 3.2 below that if two type-2 classes are closed under polynomial-time many-one reductions, then they are distinct iff they are distinct when the set arguments are fixed to be some generic oracle. <p> The special case in which the classes are members of the type-2 polynomial-time hierarchy was proved by Poizat [22]. It follows from our earlier remark that the polynomial-time hierarchy does not collapse relative to a generic oracle, a fact pointed out in <ref> [3] </ref>. In section 2 we provide basic definitions concerning type-2 classes and generic oracles, and prove an important lemma about generic oracles which is needed for our later results. In section 3, we prove the main separation theorem mentioned above. In section 4 we discuss relativized classes. <p> Furthermore, generic oracles are all alike from the point of view of separating complexity classes: if two classes are distinct relative to some generic oracle G, then they are distinct relative to any generic oracle. This is made precise in Theorem 1.8 of <ref> [3] </ref>. Finally, allowing access to a generic oracle does not reduce the time or space required to recognize a recursive set (see [3] and Theorem 2.2 below). <p> This is made precise in Theorem 1.8 of <ref> [3] </ref>. Finally, allowing access to a generic oracle does not reduce the time or space required to recognize a recursive set (see [3] and Theorem 2.2 below). A k-ary type-2 relation R assigns to each k-tuple ~x of strings and oracle X a value R (~x; X) in f0,1g, where we identify 1 with "true" and 0 with "false". <p> By assumption R (G) holds, so Q (oe) holds, and since oe 2 D, it follows that oe forces R. 2 As an application of this lemma, we prove a slight strengthening of Theorem 1.5 from <ref> [3] </ref>. Theorem 2.2 Let f be any recursive function, L any recursive language, and G a generic oracle. If L (x) can be computed by an oracle Turing machine with oracle G in time f (jxj), then L (x) is computable without an oracle in time f (jxj).
Reference: [4] <author> Cohen, P. </author> <year> (1963; 1964), </year> <title> The independence of the continuum hypothesis I, II, </title> <booktitle> in "Proceedings, </booktitle> <institution> Nat. Acad. Sci. U.S.A." </institution> <month> 50, </month> <pages> pp. 1143-1148; 51, pp. 105-110. </pages>
Reference-contexts: Yao [30], using results from Sipser [25] and Furst, Saxe, and Sipser [11], constructed an oracle A in which all levels in PH A are distinct. It follows that all levels in PH are absolutely distinct. Generic sets were introduced by Cohen <ref> [4] </ref> as a tool for proving independence results in set theory.
Reference: [5] <author> Constable, R. L. </author> <year> (1973), </year> <title> Type two computable functionals, </title> <booktitle> in "Proceedings, 5th ACM Symposium on Theory of Computing", </booktitle> <pages> pp. 108-121. </pages>
Reference-contexts: For the case of polynomial time, where the oracle represents a function whose growth affects the input size, this point of view was taken by Constable <ref> [5] </ref> and Mehlhorn [20], (see also [18] and [17]). For the case of the polynomial hierarchy, where the oracle represents a function whose growth does not affect the input size, this point of view was taken by Townsend [27], (see also [28] and [29]). <p> Townsend [27] defined a type-2 version of the polynomial hierarchy based on this idea (see also [28, 29]). We follow Townsend (in contrast to Mehlhorn [20]; see also <ref> [5] </ref>, [17] and [12]) in ignoring the oracle ff in allotting time to a Turing machine with oracle ff.
Reference: [6] <author> Cook, S. </author> <year> (1971), </year> <title> The complexity of theorem-proving procedures, </title> <booktitle> in "Proceedings, 3rd ACM Symposium on Theory of Computing", </booktitle> <pages> pp. 151-158. </pages>
Reference-contexts: An oracle Turing machine (OTM) is a Turing machine that is able to make queries at unit cost to its "oracle", representing a set or function. Such machines have long been used in complexity theory to represent reductions (as in Cook <ref> [6] </ref>) or relativized complexity classes (as in Baker, Gill, and Solovay [1]). The alternative point of view is to use the OTM to define a type-2 relation (or function), in which the oracle is one of the arguments of the relation.
Reference: [7] <author> Cook, S. and, Urquhart, A. </author> <title> (1993) Functional interpretaions of feasibly constructive arithmetic, </title> <journal> Annals of Pure and Applied Logic 63, </journal> <pages> 103-200. </pages>
Reference-contexts: Another example is NP search problems, where the input is an exponentially large search space. Beame et al [2] give a natural type-2 description of such problems. For a third example, Cook and Urquhart <ref> [7] </ref> show how to use higher-type polynomial-time functions to give constructive meaning to number theory theorems proved in a certain formal system. An oracle Turing machine (OTM) is a Turing machine that is able to make queries at unit cost to its "oracle", representing a set or function.
Reference: [8] <author> Fenner, S., Fortnow, L., Kurtz, S. A., and Li, L. </author> <year> (1993), </year> <title> An oracle builder's toolkit, </title> <booktitle> in "Proceedings, 8th IEEE Conference on Structure in Complexity Theory", </booktitle> <pages> pp. 120-131. </pages>
Reference-contexts: It follows that all levels in PH are absolutely distinct. Generic sets were introduced by Cohen [4] as a tool for proving independence results in set theory. A general treatment of complexity theory relative to a generic oracle was developed by Blum and Impagliazzo [3], and Fenner et al <ref> [8] </ref> contains a recent survey of the subject. 4 In general if two complexity classes coincide relative to a generic oracle, then they coincide absolutely. This follows from a result in [3], reproduced as Theorem 2.2 below.
Reference: [9] <author> Fortnow, L., and Sipser, M. </author> <year> (1988), </year> <title> Are there interactive protocols for co-NP languages?, </title> <journal> Information Processing Letters 28, </journal> <pages> 249-251. </pages>
Reference-contexts: This follows from a result in [3], reproduced as Theorem 2.2 below. The converse does not always hold, since for example IP = PSPACE [19], [24], but the classes are distinct relative to a generic oracle <ref> [9] </ref>. However, the question of whether a generic oracle separates two classes is natural and robust . In general, one generic oracle separates the classes iff all generic oracles separate them [3].
Reference: [10] <author> Fortnow, L., and Yamakami, T. </author> <title> (1996) Generic separations, </title> <journal> J. Comput. System Sci. </journal> <volume> 52, </volume> <pages> 191-197. </pages>
Reference-contexts: Therefore R 2 D. 2 It follows from the above theorem that the Townsend polynomial hierarchy does not collapse relative to a generic oracle, because Yao's oracle [30] separates the type-2 hier archy. Fortnow and Yamakami <ref> [10] </ref> strengthen this result to show that p p k properly contains p k relative to a generic oracle.
Reference: [11] <author> Furst, M., Saxe, J. B., and Sipser, M. </author> <year> (1984), </year> <title> Parity, circuits, and the polynomial time hierarchy, </title> <journal> Math. Systems Theory 17, </journal> <pages> 13-27. </pages>
Reference-contexts: By taking our second point of view, their work defines the type-2 polynomial time hierarchy PH, in which each member relation takes an oracle A as an argument, in addition to a string argument. Yao [30], using results from Sipser [25] and Furst, Saxe, and Sipser <ref> [11] </ref>, constructed an oracle A in which all levels in PH A are distinct. It follows that all levels in PH are absolutely distinct. Generic sets were introduced by Cohen [4] as a tool for proving independence results in set theory.
Reference: [12] <author> Harnik, V. </author> <year> (1992), </year> <title> Provably total functions of intuitionistic bounded arithmetic, </title> <journal> J. Symbolic Logic 57, </journal> <pages> 466-477. 13 </pages>
Reference-contexts: Townsend [27] defined a type-2 version of the polynomial hierarchy based on this idea (see also [28, 29]). We follow Townsend (in contrast to Mehlhorn [20]; see also [5], [17] and <ref> [12] </ref>) in ignoring the oracle ff in allotting time to a Turing machine with oracle ff.
Reference: [13] <author> Hartmanis, J., and Hemachandra, L. A. </author> <year> (1987), </year> <title> One-way functions, robustness, and the non-isomorphism of NP-complete sets, </title> <booktitle> in "Proceedings, 2nd Conference on Structure in Complexity Theory", </booktitle> <pages> pp. 160-174. </pages>
Reference: [14] <author> Hartmanis, J., and Hemachandra, L. A. </author> <year> (1990), </year> <title> Robust machines accept easy sets, </title> <journal> Theoret. Comput. Sci. </journal> <volume> 74, </volume> <pages> 217-225. </pages>
Reference: [15] <author> Impagliazzo, R., and Naor, M. </author> <year> (1988), </year> <title> Decision trees and downward closures, </title> <booktitle> in "Proceedings, 3rd IEEE Conference on Structure in Complexity Theory", </booktitle> <pages> pp. 29-38. </pages>
Reference-contexts: Thus NP A " coNP A 6 P A , and since P A = P SAT A , A meets our requirements. The argument that BPP is irregular is similar, but we use the fact <ref> [15] </ref> that BPP [B] P PSPACEB for any oracle B. <p> This shows, for example, that P G = NP G " coNP G for generic G iff P = N P " coN P, which is part of Theorem 2.2 of <ref> [15] </ref>. Proposition 4.2 For any generic oracle G, NP G " coNP G = (N P " coN P)[G], and BPP G = BPP [G]. Proof. The right sides are clearly subsets of the left sides. We prove the reverse inclusion for the first equation.
Reference: [16] <author> Kaltofen, E., and Trager, B. </author> <title> (1990) Computing with polynomials give by black boxes for their evaluations: Greatest common divisors, factorization, separation of numerators and denominators, </title> <journal> J. Symbolic Computation 9, </journal> <pages> 301-320. </pages>
Reference-contexts: The black box paradigm is appropriate whenever a complete description of the input function is large compared to the time alloted for the computation. For example, multi-variate polynomials have a number of coefficients exponential in their degree. Kaltofen and Trager <ref> [16] </ref> give efficient algorithms for such things as computing greatest common divisors, when the input polynomials are accessed only through queries. Another example is NP search problems, where the input is an exponentially large search space. Beame et al [2] give a natural type-2 description of such problems.
Reference: [17] <author> Kapron, B. M., and Cook, S. A. </author> <year> (1996), </year> <title> A new characterization of type-2 feasibility, </title> <journal> SIAM J. Computing 25, </journal> <pages> 117-132. </pages>
Reference-contexts: For the case of polynomial time, where the oracle represents a function whose growth affects the input size, this point of view was taken by Constable [5] and Mehlhorn [20], (see also [18] and <ref> [17] </ref>). For the case of the polynomial hierarchy, where the oracle represents a function whose growth does not affect the input size, this point of view was taken by Townsend [27], (see also [28] and [29]). <p> Townsend [27] defined a type-2 version of the polynomial hierarchy based on this idea (see also [28, 29]). We follow Townsend (in contrast to Mehlhorn [20]; see also [5], <ref> [17] </ref> and [12]) in ignoring the oracle ff in allotting time to a Turing machine with oracle ff.
Reference: [18] <author> Ko, K. </author> <year> (1985), </year> <title> On some natural complete operators, </title> <journal> Theor. Comput. Sci. </journal> <volume> 37, </volume> <pages> 1-30. </pages>
Reference-contexts: For the case of polynomial time, where the oracle represents a function whose growth affects the input size, this point of view was taken by Constable [5] and Mehlhorn [20], (see also <ref> [18] </ref> and [17]). For the case of the polynomial hierarchy, where the oracle represents a function whose growth does not affect the input size, this point of view was taken by Townsend [27], (see also [28] and [29]).
Reference: [19] <author> Lund, C., Fortnow, L., Karloff, H., and Nisan, N. </author> <year> (1992), </year> <title> Algebraic methods for interactive proof systems, </title> <editor> J. </editor> <booktitle> ACM 39, </booktitle> <pages> 859-868. </pages>
Reference-contexts: This follows from a result in [3], reproduced as Theorem 2.2 below. The converse does not always hold, since for example IP = PSPACE <ref> [19] </ref>, [24], but the classes are distinct relative to a generic oracle [9]. However, the question of whether a generic oracle separates two classes is natural and robust . In general, one generic oracle separates the classes iff all generic oracles separate them [3].
Reference: [20] <author> Mehlhorn, K. </author> <year> (1976), </year> <title> Polynomial and abstract subrecursive classes, </title> <journal> J. Comput. System Sci. </journal> <volume> 12, </volume> <pages> 147-178. </pages>
Reference-contexts: For the case of polynomial time, where the oracle represents a function whose growth affects the input size, this point of view was taken by Constable [5] and Mehlhorn <ref> [20] </ref>, (see also [18] and [17]). For the case of the polynomial hierarchy, where the oracle represents a function whose growth does not affect the input size, this point of view was taken by Townsend [27], (see also [28] and [29]). <p> Townsend [27] defined a type-2 version of the polynomial hierarchy based on this idea (see also [28, 29]). We follow Townsend (in contrast to Mehlhorn <ref> [20] </ref>; see also [5], [17] and [12]) in ignoring the oracle ff in allotting time to a Turing machine with oracle ff.
Reference: [21] <author> Papadimitriou, C. H. </author> <year> (1990), </year> <title> On graph-theoretic lemmata and complexity classes, </title> <booktitle> in "Proceedings, 31st Symposium on Foundations of Computer Science", </booktitle> <pages> pp. 794-801. </pages>
Reference-contexts: From the above theorem we can conclude proper containment for the corresponding type-2 classes. 11 6 Search Classes For this section we follow the treatment in [2] of type-2 search problems, motivated by Papadimitriou's NP search classes <ref> [21] </ref>. In general, a type-2 search problem Q assigns a set Q (x; ff) of strings to (x; ff), representing the set of possible solutions to problem instance (x; ff).
Reference: [22] <author> Poizat, B. </author> <year> (1986), </year> <title> Q = N Q?, </title> <journal> J. Symbolic Logic 51, </journal> <pages> 22-32. </pages>
Reference-contexts: The special case in which the classes are members of the type-2 polynomial-time hierarchy was proved by Poizat <ref> [22] </ref>. It follows from our earlier remark that the polynomial-time hierarchy does not collapse relative to a generic oracle, a fact pointed out in [3].
Reference: [23] <author> Rackoff, C. </author> <year> (1982), </year> <title> Relativized questions involving probabilistic algorithms, </title> <editor> J. </editor> <booktitle> ACM 29, </booktitle> <pages> 261-268. </pages>
Reference-contexts: The argument that BPP is irregular is similar, but we use the fact [15] that BPP [B] P PSPACEB for any oracle B. We then relativize the construction <ref> [23] </ref> of an oracle B separating BPP from P to apply to an oracle B of the form QBF C, where QBF is any PSPACE-complete problem (such as the quantified Boolean formula problem). 2 Even though NP " coNP and BPP are irregular, we now show that (1) holds for the
Reference: [24] <author> Shamir, A. </author> <year> (1991), </year> <title> IP = PSPACE, </title> <editor> J. </editor> <booktitle> ACM 39, </booktitle> <pages> 869-877. </pages>
Reference-contexts: This follows from a result in [3], reproduced as Theorem 2.2 below. The converse does not always hold, since for example IP = PSPACE [19], <ref> [24] </ref>, but the classes are distinct relative to a generic oracle [9]. However, the question of whether a generic oracle separates two classes is natural and robust . In general, one generic oracle separates the classes iff all generic oracles separate them [3].
Reference: [25] <author> Sipser, M. </author> <year> (1983), </year> <title> Borel sets and circuit complexity, </title> <booktitle> in "Proceedings, 15th ACM Symposium on Theory of Computing", </booktitle> <pages> pp. 61-69. </pages>
Reference-contexts: By taking our second point of view, their work defines the type-2 polynomial time hierarchy PH, in which each member relation takes an oracle A as an argument, in addition to a string argument. Yao [30], using results from Sipser <ref> [25] </ref> and Furst, Saxe, and Sipser [11], constructed an oracle A in which all levels in PH A are distinct. It follows that all levels in PH are absolutely distinct. Generic sets were introduced by Cohen [4] as a tool for proving independence results in set theory.
Reference: [26] <author> Tardos, G. </author> <year> (1989), </year> <title> Query complexity, or why is it difficult to separate NP A " co-NP A from P A by random oracle A ?, Combinatorica 9, </title> <type> 385-392. </type>
Reference: [27] <author> Townsend, M. </author> <year> (1990), </year> <title> Complexity for type-2 relations, </title> <journal> Notre Dame J. Formal Logic 31, </journal> <pages> 241-262. </pages>
Reference-contexts: For the case of the polynomial hierarchy, where the oracle represents a function whose growth does not affect the input size, this point of view was taken by Townsend <ref> [27] </ref>, (see also [28] and [29]). For the case of NP search classes, this was done by Beame et al [2]. Baker, Gill, and Solovay [1] defined the polynomial- time hierarchy PH A relativized to an oracle A. <p> Townsend <ref> [27] </ref> defined a type-2 version of the polynomial hierarchy based on this idea (see also [28, 29]). We follow Townsend (in contrast to Mehlhorn [20]; see also [5], [17] and [12]) in ignoring the oracle ff in allotting time to a Turing machine with oracle ff. <p> We say that R is a Townsend relation iff R has dependency bounded by some polynomial p. For example, each class of the Townsend polynomial hierarchy <ref> [27] </ref> is a class of Townsend relations. We can translate back and forth from functions to sets as follows.
Reference: [28] <author> Yamakami, T. </author> <year> (1995), </year> <title> Feasible computability and resource bounded topology, </title> <booktitle> Information and Computation 116, </booktitle> <pages> 214-230. 14 </pages>
Reference-contexts: For the case of the polynomial hierarchy, where the oracle represents a function whose growth does not affect the input size, this point of view was taken by Townsend [27], (see also <ref> [28] </ref> and [29]). For the case of NP search classes, this was done by Beame et al [2]. Baker, Gill, and Solovay [1] defined the polynomial- time hierarchy PH A relativized to an oracle A. <p> Townsend [27] defined a type-2 version of the polynomial hierarchy based on this idea (see also <ref> [28, 29] </ref>). We follow Townsend (in contrast to Mehlhorn [20]; see also [5], [17] and [12]) in ignoring the oracle ff in allotting time to a Turing machine with oracle ff.
Reference: [29] <author> Yamakami, T. </author> <year> (1992), </year> <title> Structural properties for feasibly computable classes of type two, </title> <journal> Math. Systems Theory 25, </journal> <pages> 177-201. </pages>
Reference-contexts: For the case of the polynomial hierarchy, where the oracle represents a function whose growth does not affect the input size, this point of view was taken by Townsend [27], (see also [28] and <ref> [29] </ref>). For the case of NP search classes, this was done by Beame et al [2]. Baker, Gill, and Solovay [1] defined the polynomial- time hierarchy PH A relativized to an oracle A. <p> Thus there exist ora-cles A and B such that NP A " coNP A 6= (N P " coN P)[A] and BPP B 6= BPP [B]. Proof. To show that NP"coNP is irregular, we use the fact ([3],[14],[26], <ref> [29] </ref>) that (N P"coN P)[A] P NPA for any oracle set A, where A B = df f0x j x 2 Ag [ f1x j x 2 Bg. <p> Townsend [27] defined a type-2 version of the polynomial hierarchy based on this idea (see also <ref> [28, 29] </ref>). We follow Townsend (in contrast to Mehlhorn [20]; see also [5], [17] and [12]) in ignoring the oracle ff in allotting time to a Turing machine with oracle ff.
Reference: [30] <author> Yao, A. </author> <year> (1985), </year> <title> Separating the polynomial-time hierarchy by oracles, </title> <booktitle> in "Proceedings, 26th IEEE Symposium on Foundations of Computer Science", </booktitle> <pages> pp. 1-10. 15 </pages>
Reference-contexts: By taking our second point of view, their work defines the type-2 polynomial time hierarchy PH, in which each member relation takes an oracle A as an argument, in addition to a string argument. Yao <ref> [30] </ref>, using results from Sipser [25] and Furst, Saxe, and Sipser [11], constructed an oracle A in which all levels in PH A are distinct. It follows that all levels in PH are absolutely distinct. <p> Therefore R 2 D. 2 It follows from the above theorem that the Townsend polynomial hierarchy does not collapse relative to a generic oracle, because Yao's oracle <ref> [30] </ref> separates the type-2 hier archy. Fortnow and Yamakami [10] strengthen this result to show that p p k properly contains p k relative to a generic oracle.
References-found: 30

