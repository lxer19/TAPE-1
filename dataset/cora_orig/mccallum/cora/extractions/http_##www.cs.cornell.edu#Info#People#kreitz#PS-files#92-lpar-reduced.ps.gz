URL: http://www.cs.cornell.edu/Info/People/kreitz/PS-files/92-lpar-reduced.ps.gz
Refering-URL: http://www.cs.cornell.edu/Info/People/kreitz/Abstracts/92-lpar.html
Root-URL: 
Phone: 2  
Title: Building Proofs by Analogy via the Curry-Howard Isomorphism  
Author: Thierry Boy de la Tour and Christoph Kreitz 
Address: 46, avenue Felix Viallet, 38031 Grenoble cedex, France  Alexanderstrae 10, D-6100 Darmstadt, Germany  
Affiliation: 1 Laboratoire d'Informatique Fondamentale et d'Intelligence Artificielle IMAG CNRS  Fachgebiet Intellektik, Fachbereich Informatik, Technische Hochschule Darmstadt  
Note: Voronkov, ed., Proceedings of the Conference on Logic Programming and Automated Reasoning, LNAI 624, pp. 202-213. Springer Verlag, 1992.  
Abstract: We present a formal method for building proofs by analogy and its implementation as a proof tactic for the NuPRL proof development system. The Curry-Howard Isomorphism is used to represent proof constructions in a term-functional language and to specify analogies by transformation rules on these terms. The method has the advantage to admit complete formalization and to make use of well-known techniques like higher-order unification.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> B. Brock, S. Cooper, and W. Pierce. </author> <title> Analogical reasoning and proof discovery. </title> <booktitle> In Proc. CADE-9, </booktitle> <volume> LNCS 310, </volume> <pages> pages 454-468. </pages> <publisher> Springer Verlag, </publisher> <year> 1988. </year>
Reference-contexts: It is a mechanism operating on the meta-level of proofs. Apart from very general approaches not leading to practical applications there has been only little research on analogy in theorem proving. Pioneer works are the ones by Kling [12] and Plaisted [14]. More recently Brook, Cooper, and Pierce <ref> [1] </ref> have experimented with an analogy mechanism for guiding proof discovery in real analysis. However, these works have not been deepened and remain isolated achievements.
Reference: 2. <author> T. Boy de la Tour and R. Caferra. </author> <title> Proof analogy in interactive theorem proving: A method to express and use it via second order matching. </title> <booktitle> In Proc. AAAI-87, </booktitle> <pages> pages 95-99. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1987. </year>
Reference-contexts: The most natural solution is to define analogies as mathematical objects thus making explicit all the information involved in the reasoning process. We shall define analogies as objects specifying proof transformations. This has already been proposed in <ref> [2, 3] </ref>, but within a simpler framework. Up to this point, we have split the "problem of analogy" in two subproblems: 1. the definition of analogies as objects specifying transformations of proofs; the meaning and use of these specifications, 2. the automated computation of analogies. <p> An earlier example mentioned from <ref> [2] </ref> has been tested successfully. It is simpler than the one presented in this paper although it contains an incomplete analogy. The results show that the Curry-Howard isomorphism provides the most adequate proof representation for performing analogy proof transformations.
Reference: 3. <author> T. Boy de la Tour and R. Caferra. </author> <title> A formal approach to some usually informal techniques used in mathematical reasoning. </title> <booktitle> In Proc. Int`l Symposium on Symbolic and Algebraic Computation, </booktitle> <pages> pages 402-406. </pages> <publisher> LNCS 358, Springer, </publisher> <year> 1988. </year>
Reference-contexts: The most natural solution is to define analogies as mathematical objects thus making explicit all the information involved in the reasoning process. We shall define analogies as objects specifying proof transformations. This has already been proposed in <ref> [2, 3] </ref>, but within a simpler framework. Up to this point, we have split the "problem of analogy" in two subproblems: 1. the definition of analogies as objects specifying transformations of proofs; the meaning and use of these specifications, 2. the automated computation of analogies.
Reference: 4. <author> R. L. Constable et.al. </author> <title> Implementing Mathematics with the NuPRL proof development system. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1986. </year>
Reference-contexts: We have combined these algorithms with the NuPRL proof development system <ref> [4] </ref> which allowed invoking the analogy mechanism as a transformation tactic and conducting experiments with it. Section 2 explains the method by a simple example used in such an experiment which | due to complete formalization can be developed in full detail. This also illustrates the practicality of our method. <p> The names of the individual predicates are rather unimportant and the isomorphism provides a term giving structural information. A call of the analogy mechanism will apply a built-in function of the NuPRL system <ref> [4] </ref> to extract this term from the proof of thm 1 and convert it into a term of an intermediate language (section 3.2). 204 (LAMBDA (@ (il) (SPREAD (VAR il) (@ (cl cr) (SPREAD (VAR cr) (@ (cl0 cr0) (DECIDE (VAR cr0) (@ (dl) (APPLY (LAMBDA (@ (ar) | |(APPLY (LAMBDA <p> The calculus is an intuitionistic one since the Curry-Howard interpretation of intuitionistic logic is the most straightforward one. It can, however, be extended to other logics (see [7]). Thus our analogy reasoning mechanism is independent of a specific logic. The above calculus is strongly supported by the NuPRL system <ref> [4] </ref> used in our implementation. NuPRL is an interactive proof development system based on a constructive (higher-order) type theory similar to the one of Martin-L of [13].
Reference: 5. <author> H. B. Curry, R. Feys, and W. Craig. </author> <booktitle> Combinatory Logic, </booktitle> <volume> volume 1. </volume> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1958. </year>
Reference-contexts: On the other hand a representation should depend as little as possible on theorems, so that it may correspond to proofs of other theorems. The Curry-Howard isomorphism <ref> [5, 16] </ref> provides an adequate representation of proof constructions by terms: the last requirement is matched since essentially these terms only record names of the rules used in a proof; the first requirement is also matched since proofs can be obtained from terms simply by computing the type of each subterm. <p> Rules can operate on the conclusion (introduction-rules) or on a hypothesis (elimination-rules). For the latter we need labels l i to identify the hypotheses to be used and some rules have to give labels to newly generated hypotheses. The Curry-Howard isomorphism <ref> [5, 16] </ref> between proofs and terms of an extended -calculus admits a compact representation of proofs which is also adequate for applying analogy transformations. A proof term describes in which way the hypotheses are being used to prove the conclusion.
Reference: 6. <author> R. L. Constable and D. J. Howe. </author> <title> NuPRL as a general logic. </title> <editor> In P. Odifreddi, editor, </editor> <booktitle> Logic and Computer Science, </booktitle> <pages> pages 77-90. </pages> <publisher> Academic Press, </publisher> <year> 1990. </year>
Reference-contexts: The above calculus is strongly supported by the NuPRL system [4] used in our implementation. NuPRL is an interactive proof development system based on a constructive (higher-order) type theory similar to the one of Martin-L of [13]. Many logics have a natural representation in this theory <ref> [6] </ref> and the system itself provides a highly visual proof editor for refinement proofs, a mechanism to program proofs on the meta-level (a tactics concept similar to the one of LCF [9]) and a general definition facility which allows mathematical formulas to have a display nearly as compact as in mathematical
Reference: 7. <author> D. M. Gabbay and R. de Queiroz. </author> <title> Extending the Curry-Howard interpretation to linear, relevant and other resource logics. </title> <booktitle> In Logic Colloquium`90, </booktitle> <year> 1990. </year>
Reference-contexts: The calculus is an intuitionistic one since the Curry-Howard interpretation of intuitionistic logic is the most straightforward one. It can, however, be extended to other logics (see <ref> [7] </ref>). Thus our analogy reasoning mechanism is independent of a specific logic. The above calculus is strongly supported by the NuPRL system [4] used in our implementation. NuPRL is an interactive proof development system based on a constructive (higher-order) type theory similar to the one of Martin-L of [13].
Reference: 8. <author> G. </author> <title> Gentzen. Untersuchungen uber das logische Schlieen. </title> <journal> Math. Zeitschrift, </journal> <volume> 39 </volume> <pages> 176-210, 405-431, </pages> <year> 1935. </year>
Reference-contexts: This rules out efficient low level calculi like resolution or the connection method which blur the links between proofs and theorems, and favors calculi closer to human reasoning like the sequent calculus <ref> [8] </ref> which we have chosen for our implementation. Sequents are objects of the form "l 1 :H 1 ,: : : ,l n :H n `` C" which should be read as `from the hypotheses H i we can conclude C'. We construct proofs in a top-down fashion.
Reference: 9. <author> M. J. Gordon, R. Milner, and C. P. Wadsworth. </author> <title> Edinburgh LCF: A mechanized Logic of Computation. </title> <publisher> LNCS 78. Springer Verlag, </publisher> <year> 1979. </year>
Reference-contexts: Many logics have a natural representation in this theory [6] and the system itself provides a highly visual proof editor for refinement proofs, a mechanism to program proofs on the meta-level (a tactics concept similar to the one of LCF <ref> [9] </ref>) and a general definition facility which allows mathematical formulas to have a display nearly as compact as in mathematical textbooks. NuPRL is not a theorem prover but a system intended to interact with a user.
Reference: 10. <author> G. P. Huet and B. Lang. </author> <title> Proving and applying program transformations expressed with second-order patterns. </title> <journal> Acta Informatica, </journal> <volume> 11 </volume> <pages> 31-55, </pages> <year> 1978. </year>
Reference-contexts: This completeness property has well-known drawbacks: higher-order unification is not decidable and complete sets of matches may not be finite. However, some sub-languages of the typed -calculus have a terminating pattern matching algorithm, as is the case for terms including at most second-order variables and no fourth-order constants (see <ref> [10] </ref>). We do have similar conditions on our intermediate language: there are only abstractions over variables of order 1. Hence symbols have at most order 3, having terms of order 2 as arguments.
Reference: 11. <author> G. P. Huet. </author> <title> A unification algorithm for typed -calculus. </title> <journal> TCS, </journal> <volume> 1 </volume> <pages> 27-57, </pages> <year> 1975. </year>
Reference-contexts: Proofs are represented in a term-functional language and proof transformations are specified as rewriting rules on this language. To implement this method we have adopted Huet's higher-order unification algorithm <ref> [11] </ref> to match the left hand side of a transformation rule against a term representing a proof and created algorithms computing proof representations from proofs and building proofs from terms. <p> Therefore we allow more variables on the right-hand side than on the left, representing placeholders for a prover to fill in the details. We have used a Common Lisp implementation of Huet's higher-order unification algorithm <ref> [11] </ref> to find the matches between the scheme and the term of figure 2. The algorithm (see section 3.4) generates 49 matches and a filter eliminates all but 6 matches (see figure 3) which are relevant for the intended transformation. <p> This is not the place to present details of Huet's higher-order unification algorithm <ref> [11] </ref> but we mention some of its properties. First, Huet's algorithm is not complete in the sense that it may not compute any unifier of two terms.
Reference: 12. <author> R. E. Kling. </author> <title> A paradigm for reasoning by analogy. </title> <journal> AI-Journal, </journal> <volume> 2 </volume> <pages> 147-178, </pages> <year> 1971. </year>
Reference-contexts: But it is a mistake to consider analogy an inference rule. It is a mechanism operating on the meta-level of proofs. Apart from very general approaches not leading to practical applications there has been only little research on analogy in theorem proving. Pioneer works are the ones by Kling <ref> [12] </ref> and Plaisted [14]. More recently Brook, Cooper, and Pierce [1] have experimented with an analogy mechanism for guiding proof discovery in real analysis. However, these works have not been deepened and remain isolated achievements.
Reference: 13. <author> P. </author> <title> Martin-L of. </title> <booktitle> Constructive mathematics and computer programming. In 6-th International Congress for Logic, Methodology and Philosophy of Science, </booktitle> <pages> pages 153-175. </pages> <publisher> North-Holland, </publisher> <year> 1982. </year>
Reference-contexts: Thus our analogy reasoning mechanism is independent of a specific logic. The above calculus is strongly supported by the NuPRL system [4] used in our implementation. NuPRL is an interactive proof development system based on a constructive (higher-order) type theory similar to the one of Martin-L of <ref> [13] </ref>.
Reference: 14. <author> D. A. Plaisted. </author> <title> Theorem proving with abstraction. </title> <journal> AI-Journal, </journal> <volume> 16 </volume> <pages> 47-108, </pages> <year> 1981. </year>
Reference-contexts: It is a mechanism operating on the meta-level of proofs. Apart from very general approaches not leading to practical applications there has been only little research on analogy in theorem proving. Pioneer works are the ones by Kling [12] and Plaisted <ref> [14] </ref>. More recently Brook, Cooper, and Pierce [1] have experimented with an analogy mechanism for guiding proof discovery in real analysis. However, these works have not been deepened and remain isolated achievements.
Reference: 15. <author> W. Snyder and J. Gallier. </author> <title> Higher-order unification revisited: Complete sets of transformations. </title> <journal> Journal of Symbolic Computation, </journal> 8(1&2):101-140, 1989. 
Reference-contexts: First, Huet's algorithm is not complete in the sense that it may not compute any unifier of two terms. However, it is complete with respect to preunifiers: it produces all the possible presolved systems (see <ref> [15] </ref>), each defining a preunifier from which a unifier can be built. The only difference between solved and presolved systems is the possibility for the latter to contain flexible-flexible pairs | pairs of terms whose head symbol is a variable.
Reference: 16. <author> W. W. Tait. </author> <title> Intensional interpretation of functionals of finite type. </title> <journal> Journal of Symbolic Logic, </journal> <volume> 32(2) </volume> <pages> 187-199, </pages> <year> 1967. </year> <title> This article was processed using the L a T E X macro package with LLNCS style 213 </title>
Reference-contexts: On the other hand a representation should depend as little as possible on theorems, so that it may correspond to proofs of other theorems. The Curry-Howard isomorphism <ref> [5, 16] </ref> provides an adequate representation of proof constructions by terms: the last requirement is matched since essentially these terms only record names of the rules used in a proof; the first requirement is also matched since proofs can be obtained from terms simply by computing the type of each subterm. <p> Rules can operate on the conclusion (introduction-rules) or on a hypothesis (elimination-rules). For the latter we need labels l i to identify the hypotheses to be used and some rules have to give labels to newly generated hypotheses. The Curry-Howard isomorphism <ref> [5, 16] </ref> between proofs and terms of an extended -calculus admits a compact representation of proofs which is also adequate for applying analogy transformations. A proof term describes in which way the hypotheses are being used to prove the conclusion.
References-found: 16

