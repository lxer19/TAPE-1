URL: http://www.cs.purdue.edu/homes/spaf/tech-reps/ncsc.ps
Refering-URL: http://www.cs.purdue.edu/coast/coast-tools.html
Root-URL: http://www.cs.purdue.edu
Email: fkumar,spafg@cs.purdue.edu  
Title: A PATTERN MATCHING MODEL FOR MISUSE INTRUSION DETECTION  
Author: Sandeep Kumar Eugene H. Spafford 
Keyword: intrusion detection, misuse, anomaly.  
Address: West Lafayette, IN 47907-1398  
Affiliation: The COAST Project Department of Computer Sciences Purdue University  
Abstract: This paper describes a generic model of matching that can be usefully applied to misuse intrusion detection. The model is based on Colored Petri Nets. Guards define the context in which signatures are matched. The notion of start and final states, and paths between them define the set of event sequences matched by the net. Partial order matching can also be specified in this model. The main benefits of the model are its generality, portability and flexibility.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. A. Baeza-Yates and G. H. Gonnet. </author> <title> A New Approach to Text Searching. </title> <booktitle> In Proceedings of the 12th Annual ACM-SIGIR Conference on Information Retrieval, </booktitle> <pages> pages 168-175, </pages> <address> Cambridge, MA, </address> <month> June </month> <year> 1989. </year>
Reference-contexts: Sequence O (mn) O (mn) O (1) all [22] Using dynamic programming a . Sequence O (n) O (m) O (1) all endpts <ref> [1, 23] </ref> Pattern fits within a word of the computer. Small integer values of costs. RE O (mn) O (m) O (m) all endpts [15] Using dynamic programming.
Reference: [2] <author> Daniel Farmer and Eugene H. Spafford. </author> <title> The COPS Security Checker System. </title> <booktitle> In Proceedings of the Summer Usenix Conference, </booktitle> <pages> pages 165-170, </pages> <month> June </month> <year> 1990. </year>
Reference-contexts: After studying common numerous UNIX vulnerability descriptions from such sources as the CERT security advisories, and those detected by the COPS <ref> [2] </ref> and TIGER [17] tools, we noted a temporally-related partitioning. We were able to classify intrusion attacks on UNIX as follows: 1. Existence. The fact that something (s) ever existed is sufficient to detect the intrusion attempt. Simple existence can often be found by static scanning of the file system.
Reference: [3] <author> Charles L. Forgy. </author> <title> RETE: A Fast Algorithm for the Many Pattern/Many Object Pattern Match Problem. </title> <journal> In Artificial Intelligence, </journal> <volume> volume 19. </volume> <year> 1982. </year>
Reference-contexts: As evidence for some scenarios accumulates, and decreases for others, the active models list is up 1 Even though facts are numbered consecutively in current expert system shells, introducing fact numbering constraints within rules to enforce an order makes the Rete match <ref> [3] </ref> procedure very inefficient. A Pattern Matching Model for Misuse Intrusion Detection dated. The evidential reasoning calculus built into the system permits the update of the likelihood of occurrence of the attack scenarios in the active models list.
Reference: [4] <author> T. D. Garvey and T. F. Lunt. </author> <title> Model based Intrusion Detection. </title> <booktitle> In Proceedings of the 14th National Computer Security Conference, </booktitle> <pages> pages 372-385, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: within the natural framework of expert system shells. 1 Other problems include software engineering concerns with the maintenance of the knowledge base [13] and the quality of the rules, which can be only as good as the human devising them [13]. 2.2 Model Based Systems This approach was proposed in <ref> [4] </ref> and is a variation on misuse intrusion detection. It combines models of misuse with evidential reasoning to support conclusions about its occurrence. There is a database of attack scenarios, where each scenario comprises a sequence of behaviors making up the attack.
Reference: [5] <author> L. T. Heberlein, K. N. Levitt, and B. Mukherjee. </author> <title> A Method To Detect Intrusive Activity in a Networked Environment. </title> <booktitle> In Proceedings of the 14th National Computer Security Conference, </booktitle> <pages> pages 362-371, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: This approach has been studied extensively and implemented in a large number of systems <ref> [19, 18, 12, 14, 5, 8] </ref>. It attempts to quantify the acceptable behavior and thus identify abnormal behavior as intrusive. The other technique of detecting intrusions, misuse detection, attempts to encode knowledge about attacks as well defined patterns and monitors for the occurrence of these patterns.
Reference: [6] <author> Koral Ilgun. USTAT: </author> <title> A Real-Time Intrusion Detection System for UNIX. </title> <type> Master's thesis, </type> <institution> Computer Science Department, University of California, Santa Barbara, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: Model Based Reasoning Systems, which combine models of misuse with evidential reason ing to support conclusions about the occurrence of a misuse. 3. State Transition Analysis, which represents attacks as a sequence of state transitions of the monitored system <ref> [16, 6] </ref>. 4. Key Stroke Monitoring, which uses user key strokes to determine the occurrence of an attack. <p> This, however, is not a weakness of the model per se, but a consideration for successful implementation. 2.3 State Transition Analysis In this approach <ref> [16, 6] </ref> attacks are represented as a sequence of state transitions of the monitored system. States in the attack pattern correspond to system states and have Boolean assertions associated with them that must be satisfied to transit to that state. <p> Our examples here, however, are taken from the domain of misuse detection in the UNIX environment using audit trails as input. Consider, as an example, the attack scenario in figure 2 <ref> [6] </ref>. Its CPA is translated verbatim from the attack scenario for purposes of illustration only. s1 and s4 are the initial states of the CPA, and s7 is its final state.
Reference: [7] <author> Peter Jackson. </author> <title> Introduction to Expert Systems. </title> <booktitle> International Computer Science Series. </booktitle> <publisher> Addison Wesley, </publisher> <year> 1986. </year>
Reference-contexts: Key Stroke Monitoring, which uses user key strokes to determine the occurrence of an attack. These methods are summarized in the following sections. 2.1 Expert Systems An expert system is defined in <ref> [7] </ref> as a computing system capable of representing and reasoning about some knowledge-rich domain with a view to solving problems and giving advice. Expert system detectors code knowledge about attacks as if-then implication rules. Rules specify the conditions requisite for an attack in their if part.
Reference: [8] <author> R. Jagannathan, Teresa Lunt, Debra Anderson, Chris Dodd, Fred Gilham, Caveh Jalali, Hal Javitz, Peter Neumann, Ann Tamaru, and Alfonso Valdes. </author> <title> System Design Document: Next-Generation Intrusion Detection Expert System (NIDES). </title> <type> Technical Report A007/A008/A009/A011/A012/A014, </type> <institution> SRI International, </institution> <month> March </month> <year> 1993. </year>
Reference-contexts: This approach has been studied extensively and implemented in a large number of systems <ref> [19, 18, 12, 14, 5, 8] </ref>. It attempts to quantify the acceptable behavior and thus identify abnormal behavior as intrusive. The other technique of detecting intrusions, misuse detection, attempts to encode knowledge about attacks as well defined patterns and monitors for the occurrence of these patterns.
Reference: [9] <author> Kurt Jensen. </author> <title> Coloured Petri Nets Basic Concepts I. </title> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
Reference-contexts: This paper proposes a variation of one approach to misuse detection, state transition analysis, by using pattern matching to detect system attacks. Knowledge about attacks is represented as specialized graphs. These graphs are an adaptation of Colored Petri Nets <ref> [9] </ref> with guards representing signature context and vertices representing system states. The graph represents the transition of system states along paths that lead to intruded states. Patterns may have user-specifiable actions associated with them that are executed when patterns are matched. <p> Regular expressions and context-free grammars do not permit matching to be conditional on the value of specified expressions. Attribute grammars allow conditional matching only in an indirect way. We settled on basing our model of matching on an extension of Colored Petri Nets <ref> [9] </ref> as they suffer none of these problems. We refer to each signature represented as an instantiation of a Colored Petri Automaton (CPA). The notion of one or more start states and a unique final state defines the set of strings matched by the CPA.
References-found: 9

