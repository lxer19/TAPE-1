URL: http://www.cs.umd.edu/users/gagan/papers/icde92.ps
Refering-URL: http://www.cs.umd.edu/users/gagan/pub.html
Root-URL: 
Title: Using Coding to Support Data Resiliency in Distributed Systems  
Author: Pankaj Jalote Gagan Agrawal 
Address: Kanpur, India 208016 College Park, MD 20742  
Affiliation: Dept. of Computer Sc. and Engg. Dept. of Computer Science Indian Institute of Technology University of Maryland  
Abstract: Data is often replicated in distributed systems to improve availability and performance. This replication is expensive in terms of disk storage since the existing schemes generally require full files to be stored at each site. In this paper, we present how the coding scheme suggested by Rabin can be used to store replicated data and how the voting algorithm and the quorum requirements change to manage this replication. We show that the disk storage space required to achieve a given availability is significantly lower than that for the conventional scheme with full file replication. Since coding is used, this scheme also provides a high degree of data security. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. Agrawal and A. El Abbadi, </author> <title> "Reducing Storage for Quorum Consensus Algorithms", </title> <booktitle> in proc. of 14 th Very Large Databases Conf. </booktitle> , <pages> pp. 419-430, </pages> <year> 1988. </year>
Reference-contexts: For maintaining availability of data against failure of one node at a time, the data has to be replicated at 3 nodes [13], bringing in two times extra cost of disk storage. The only known scheme for reducing disk storage in replicated distributed databases is <ref> [1] </ref>. However, this requires a propagation based mechanism for maintaining sufficient resiliency. Also, it can reduce the disk storage at the most by a factor of two.
Reference: [2] <author> G.Agrawal and P. Jalote, </author> <title> "An efficient protocol for voting in dist. </title> <journal> systems", </journal> <note> submitted to 12 th Int. Conf. on Dist. Computing Sys.. </note>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Many extensions to the voting method have been proposed <ref> [2, 8, 11, 12, 13, 18] </ref>. Performance and reliability issues of these schemes have been studied in [3, 4, 5]. A major drawback of replication based schemes is the high degree of disk storage requirement.
Reference: [3] <author> M.Ahamad and M.H.Amnar, </author> <title> "Performance characterization of quorum consensus algorithms for replicated data", </title> <journal> IEEE trans. on Software Engg., </journal> <volume> vol. 15, no. 36, </volume> <pages> pp. 492-496, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: Many extensions to the voting method have been proposed [2, 8, 11, 12, 13, 18]. Performance and reliability issues of these schemes have been studied in <ref> [3, 4, 5] </ref>. A major drawback of replication based schemes is the high degree of disk storage requirement.
Reference: [4] <author> D.Barbara and H.Garcia Molina, </author> <title> "Vulnerability of voting mechanisms", </title> <journal> ACM trans. on Computer Systems, </journal> <volume> vol. 4, no. 3, </volume> <pages> pp. 187-213, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: Many extensions to the voting method have been proposed [2, 8, 11, 12, 13, 18]. Performance and reliability issues of these schemes have been studied in <ref> [3, 4, 5] </ref>. A major drawback of replication based schemes is the high degree of disk storage requirement.
Reference: [5] <author> D.Barbara and H.Garcia-Molina, </author> <title> "Reliability of voting mechanisms",IEEE trans. </title> <journal> on Computers,vol. </journal> <volume> 36, no. 10, </volume> <pages> pp. 1197-1208, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: Many extensions to the voting method have been proposed [2, 8, 11, 12, 13, 18]. Performance and reliability issues of these schemes have been studied in <ref> [3, 4, 5] </ref>. A major drawback of replication based schemes is the high degree of disk storage requirement.
Reference: [6] <author> P.Bernstein and N. Goodman, </author> <title> "An algorithm for concurrency control and recovery in replicated distributed databases", </title> <journal> ACM trans on Database Systems, </journal> <volume> vol. 9, no. 4, </volume> <pages> pp. 596-615, </pages> <year> 1984. </year>
Reference-contexts: In this paper, we have considered only simple voting. However, our method can be extended to modify extensions of voting like voting with ghosts [18], voting with witnesses [11, 12], dynamic voting [10]. Some other approaches to replica control like the available copy method <ref> [6] </ref>, regeneration [14] can also be modified. Acknowledgements We are grateful to the referees for their comments which helped in improving the presentation of the paper. We will also like to thank Dheeraj Sanghi for his kind help in preparation of final copy of this paper.
Reference: [7] <author> S.Davidson and H.Garcia Molina, </author> <title> "Consistency in partitioned networks", </title> <journal> ACM Computing surveys,vol. </journal> <volume> 17, no. 3, </volume> <pages> pp. 341-370, </pages> <year> 1985. </year>
Reference-contexts: 1 Introduction In a distributed system, data can be replicated to provide fault-tolerance against site failures and network partitions and to improve performance. This data replication requires a replica control algorithm to maintain consistency of the data. A survey of such methods can be seen in <ref> [7] </ref>. One such method for replica control is the weighted voting scheme suggested by Gifford [9]. In this algorithm, each node is assigned a number of votes.
Reference: [8] <author> H.Garcia Molina and D.Barbara, </author> <title> "How to assign votes in a distributed system", </title> <journal> Journal of the ACM, </journal> <volume> vol. 32, no. 4, </volume> <pages> pp. 841-860, </pages> <month> October </month> <year> 1985. </year>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Many extensions to the voting method have been proposed <ref> [2, 8, 11, 12, 13, 18] </ref>. Performance and reliability issues of these schemes have been studied in [3, 4, 5]. A major drawback of replication based schemes is the high degree of disk storage requirement.
Reference: [9] <author> D.K.Gifford, </author> <title> "Weighted voting", </title> <booktitle> in proc. of 7th ACM sym. on OS principles, </booktitle> <pages> pp. 150-162, </pages> <year> 1979. </year>
Reference-contexts: This data replication requires a replica control algorithm to maintain consistency of the data. A survey of such methods can be seen in [7]. One such method for replica control is the weighted voting scheme suggested by Gifford <ref> [9] </ref>. In this algorithm, each node is assigned a number of votes. <p> With this scheme we need proper read and update mechanisms such that data consistency is maintained and high availability is supported. We modify the vot-ing scheme <ref> [9] </ref> for this purpose. In our (m; n; N ) system, we assume that n N i.e. number of CPFs does not exceed the number of nodes. Exactly one CPF is stored at each node. <p> Whereas, changing the system from (m; n; N ) to (m; n; N + 1) may be an easier task, involving only change in the quorum requirements <ref> [9, 12] </ref>. The system shall then be operating with lower n as compared to N . Example: Consider an ( 3, 10, 12 ) system. The value of r 00 + w 00 is 17, provided n 0 w 0 2.
Reference: [10] <author> S.Jajodia and D.Mutchler, </author> <title> "Dynamic voting", </title> <booktitle> in proc. of ACM SIGMOD, </booktitle> <pages> pp. 227-238, </pages> <year> 1987. </year>
Reference-contexts: In this paper, we have considered only simple voting. However, our method can be extended to modify extensions of voting like voting with ghosts [18], voting with witnesses [11, 12], dynamic voting <ref> [10] </ref>. Some other approaches to replica control like the available copy method [6], regeneration [14] can also be modified. Acknowledgements We are grateful to the referees for their comments which helped in improving the presentation of the paper.
Reference: [11] <author> J.F.Paris, </author> <title> "Voting with witnesses: a consistency scheme for replicated files", </title> <booktitle> in proc. of sixth IEEE Int. Conf. on Dist. Computing Sys. </booktitle> , <pages> pp. 606-612, </pages> <year> 1986. </year>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Many extensions to the voting method have been proposed <ref> [2, 8, 11, 12, 13, 18] </ref>. Performance and reliability issues of these schemes have been studied in [3, 4, 5]. A major drawback of replication based schemes is the high degree of disk storage requirement. <p> In this paper, we have considered only simple voting. However, our method can be extended to modify extensions of voting like voting with ghosts [18], voting with witnesses <ref> [11, 12] </ref>, dynamic voting [10]. Some other approaches to replica control like the available copy method [6], regeneration [14] can also be modified. Acknowledgements We are grateful to the referees for their comments which helped in improving the presentation of the paper.
Reference: [12] <author> J.F.Paris, </author> <title> "Voting with a variable number of copies", </title> <booktitle> in proc. of sixteenth IEEE Fault-Tolerant Computing Sym., </booktitle> <pages> pp. 50-55, </pages> <year> 1986. </year>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Many extensions to the voting method have been proposed <ref> [2, 8, 11, 12, 13, 18] </ref>. Performance and reliability issues of these schemes have been studied in [3, 4, 5]. A major drawback of replication based schemes is the high degree of disk storage requirement. <p> Whereas, changing the system from (m; n; N ) to (m; n; N + 1) may be an easier task, involving only change in the quorum requirements <ref> [9, 12] </ref>. The system shall then be operating with lower n as compared to N . Example: Consider an ( 3, 10, 12 ) system. The value of r 00 + w 00 is 17, provided n 0 w 0 2. <p> In this paper, we have considered only simple voting. However, our method can be extended to modify extensions of voting like voting with ghosts [18], voting with witnesses <ref> [11, 12] </ref>, dynamic voting [10]. Some other approaches to replica control like the available copy method [6], regeneration [14] can also be modified. Acknowledgements We are grateful to the referees for their comments which helped in improving the presentation of the paper.
Reference: [13] <author> J.F.Paris, </author> <title> "Voting with bystanders", </title> <booktitle> in proc. of ninth Int. Conf. on Dist. Computing Systems, </booktitle> <pages> pp. 394-401, </pages> <year> 1989. </year>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Many extensions to the voting method have been proposed <ref> [2, 8, 11, 12, 13, 18] </ref>. Performance and reliability issues of these schemes have been studied in [3, 4, 5]. A major drawback of replication based schemes is the high degree of disk storage requirement. <p> If the file is replicated at N nodes, the disk storage requirement increases N fold. For maintaining availability of data against failure of one node at a time, the data has to be replicated at 3 nodes <ref> [13] </ref>, bringing in two times extra cost of disk storage. The only known scheme for reducing disk storage in replicated distributed databases is [1]. However, this requires a propagation based mechanism for maintaining sufficient resiliency. Also, it can reduce the disk storage at the most by a factor of two.
Reference: [14] <author> C.Pu , J.D.Noe and A.Proudfoot, </author> <title> "Regeneration of replicated objects : a technique and its eden implementation", </title> <booktitle> in proc. of third IEEE Int. Conf. on Data Engg., </booktitle> <pages> pp. 175-187, </pages> <year> 1987. </year>
Reference-contexts: In this paper, we have considered only simple voting. However, our method can be extended to modify extensions of voting like voting with ghosts [18], voting with witnesses [11, 12], dynamic voting [10]. Some other approaches to replica control like the available copy method [6], regeneration <ref> [14] </ref> can also be modified. Acknowledgements We are grateful to the referees for their comments which helped in improving the presentation of the paper. We will also like to thank Dheeraj Sanghi for his kind help in preparation of final copy of this paper.
Reference: [15] <author> M. O.Rabin, </author> <title> "Efficient Dispersal of information for security, load balancing and fault-tolerance", </title> <publisher> TR-02-87, Harvard university,April 1987. </publisher>
Reference-contexts: A scheme for maintaining replicated files is suggested in this paper, which significantly reduces the amount of storage space required to maintain the files with a given availability. This scheme uses the coding suggested by Rabin <ref> [15, 16] </ref> to store the files. In this coding a file F is encoded and broken into n parts, each of size jF j=m. Only one such part of the file, called Coded Partial File ( CPF ), is stored at each node. <p> We suggest an improvement strategy in section 4. The performance issues are considered in section 5. We briefly discuss security aspects in section 6. 2 Coding Scheme In the coding scheme suggested by Rabin <ref> [15, 16] </ref>, a file F of size jF j is broken into n parts of size jF j=m such that any m of these n parts are sufficient to reconstruct the file, where, n m. <p> The calculations for reconstruction require m additions and m multiplications per byte in the original file. An important prerequisite for this coding is a set of n m dimensional vectors, such that any m of them are linearly independent. Finding such a set may not be easy. In <ref> [15] </ref>, a method has been suggested, which generates such a set, with a high probability. No general method exists, however, to construct such a set with probability 1. The problem becomes increasingly difficult for large n.
Reference: [16] <author> M.O.Rabin, </author> <title> "Efficient dispersal of information for security, load balancing and fault-tolerance", </title> <journal> Journal of the ACM, </journal> <volume> vol. 36, no. 2,pp. </volume> <pages> 335-348, </pages> <year> 1989. </year>
Reference-contexts: A scheme for maintaining replicated files is suggested in this paper, which significantly reduces the amount of storage space required to maintain the files with a given availability. This scheme uses the coding suggested by Rabin <ref> [15, 16] </ref> to store the files. In this coding a file F is encoded and broken into n parts, each of size jF j=m. Only one such part of the file, called Coded Partial File ( CPF ), is stored at each node. <p> We suggest an improvement strategy in section 4. The performance issues are considered in section 5. We briefly discuss security aspects in section 6. 2 Coding Scheme In the coding scheme suggested by Rabin <ref> [15, 16] </ref>, a file F of size jF j is broken into n parts of size jF j=m such that any m of these n parts are sufficient to reconstruct the file, where, n m. <p> A set of CPFs are said to be all distinct if no two of them are the same. A version number denoting the number of successful updates made on the CPF at that node is maintained at each node. We assume that the nodes can fail only by stopping <ref> [16] </ref>. We consider only the simplest form of voting, in which each node ( which has exactly one CPF ) is assigned one vote each. 3.1 Quorum Requirements Using coding for storing replicated data requires several modifications in the voting algorithm and the quorum requirements.
Reference: [17] <author> F.Schneider and Schilitchling, </author> <title> "Fail-stop processors: an approach to designing fault-tolerant distributed systems", </title> <journal> ACM trans. on Computer systems, </journal> <volume> vol. 1,no. 3, </volume> <pages> pp. 222-238, </pages> <month> August </month> <year> 1983. </year>
Reference: [18] <author> R. van Renesse and A.S.Tannenbaum, </author> <title> "Voting with Ghosts", </title> <booktitle> in proc. of Eighth IEEE Int. Conf. on Dist. Computing Sys., </booktitle> <pages> pp. 456-461, </pages> <year> 1988. </year>
Reference-contexts: The quorum conditions ensure that the node with the highest of the version numbers in a read/write quorum has the latest copy of the data. Many extensions to the voting method have been proposed <ref> [2, 8, 11, 12, 13, 18] </ref>. Performance and reliability issues of these schemes have been studied in [3, 4, 5]. A major drawback of replication based schemes is the high degree of disk storage requirement. <p> In this paper, we have considered only simple voting. However, our method can be extended to modify extensions of voting like voting with ghosts <ref> [18] </ref>, voting with witnesses [11, 12], dynamic voting [10]. Some other approaches to replica control like the available copy method [6], regeneration [14] can also be modified. Acknowledgements We are grateful to the referees for their comments which helped in improving the presentation of the paper.
References-found: 18

