URL: http://www.cs.uoregon.edu/~jens/pdcs.ps
Refering-URL: http://www.cs.uoregon.edu/~jens/research.html
Root-URL: http://www.cs.uoregon.edu
Email: kurtwg@cs.uoregon.edu  
Title: Minimizing Message-Passing Contention in Fragmentation-Free Processor Allocation  
Author: Jens Mache, Virginia Lo and Kurt Windisch fjens, lo, 
Address: OR 97403  
Affiliation: Department of Computer and Information Science University of Oregon, Eugene,  
Abstract: Processor allocation, the spatial assignment of a set of processors to each scheduled job, is an important issue in the drive to fully realize the performance potential of massively parallel supercomputers. With the advent of non-contiguous processor allocation strategies, the fragmentation problem has been solved and system utilization has improved. However, message-passing contention is the current performance bottleneck in fragmentation-free processor allocation. In this paper, we present MC, a new processor allocation strategy for mesh-connected parallel computers that (1) is fragmentation-free, (2) yields compact allocations and thus (3) is very successful at minimizing message-passing contention. Moreover, MC is inherently parallelizable, employing just the idle nodes and needing only limited communication. We test MC's performance using a message-passing simulator and workload traces from the San Diego Supercomputing Center. The results show that MC outperforms all other published strategies, reducing average job response time up to 97% and being capable of sustaining higher system loads. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. H. Bokhari and D. M. Nicol. </author> <title> Balancing contention and synchronization on the Intel Paragon. </title> <journal> IEEE Concurrency, </journal> <volume> 5(2) </volume> <pages> 74-83, </pages> <year> 1997. </year>
Reference-contexts: These fragmentation-free strategies allocate idle nodes that are possibly dispersed throughout the system and thus reach utilizations of up to 78% for common work-loads [4, 11]. However, the new performance bottleneck in fragmentation-free processor allocation is message-passing contention <ref> [4, 1, 8] </ref>. External contention [7] occurs if communication between nodes of a given job needs a communication link that is used by another job's communication. <p> Previous research on contention in fragmentation-free allocation strategies modeled internal and external contention [7], studied whether the advantages of non-contiguity overcome the disadvantage of external contention [4], studied under what conditions contention matters [8] and investigated the trade-off between synchronization and contention <ref> [1] </ref>. All these studies found that message-passing contention can be a severe performance problem. It adversely affects the overall communication time of messages, the execution time of jobs, and ultimately job throughput of the system.
Reference: [2] <author> J. Ding and L. N. Bhuyan. </author> <title> An adaptive submesh allocation strategy for two-dimensional mesh-connected systems. </title> <booktitle> In Proceedings of International Conference on Parallel Processing, </booktitle> <pages> pages 193-200, </pages> <year> 1993. </year>
Reference-contexts: However, if there are choices, it satisfies subrequests with blocks (from the corresponding free lists) that are at minimal distance from the block allocated to the biggest subrequest. (4) "AS&MB" [10] is a hybrid strategy employing the fragmentation-free MBS strategy if the contiguous Adaptive Scan strategy <ref> [2] </ref> fails. All these strategies can cause significant amounts of external message-passing contention due to placing nodes of one job between (i.e. on the communication path of) nodes belonging to other jobs. If all jobs in Fig. 1 do an all-to-all communication, messages of different jobs contend on many links.
Reference: [3] <author> D. G. Feitelson. </author> <title> A survey of scheduling in multipro-grammed parallel systems. </title> <type> Technical Report RC 19790 (87657), </type> <institution> IBM Research Division, T.J. Watson Research Center, </institution> <address> Yorktown Heights, NY 10598, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: Taking on this challenge, our contribution is MC, a new allocation strategy. 2 Assumptions and related work Our focus is on space sharing (which may be supplemented by time sharing of nodes using a gang-scheduling scheme <ref> [3] </ref>). Our assumptions are that each job gets as many nodes as it requested and that jobs are not reallocated once they have started running.
Reference: [4] <author> W. Liu, V. Lo, K. Windisch, and B. Nitzberg. </author> <title> Noncontiguous processor allocation algorithms for distributed memory multicomputers. </title> <booktitle> In Proceedings of Supercomputing '94, </booktitle> <pages> pages 227-236, </pages> <year> 1994. </year> <note> Best student paper award, also in IEEE Transactions on Parallel and Distributed Systems, </note> <month> July </month> <year> 1997. </year>
Reference-contexts: Early allocation strategies were contiguous and internal and external fragmentation were serious problems. Using first-come, first-served scheduling, maximum system utilizations of only 34% to 66% were reported <ref> [14, 4] </ref>. With the advent of non-contiguous processor allocation strategies, the fragmentation problem has been solved and system utilization has improved. These fragmentation-free strategies allocate idle nodes that are possibly dispersed throughout the system and thus reach utilizations of up to 78% for common work-loads [4, 11]. <p> With the advent of non-contiguous processor allocation strategies, the fragmentation problem has been solved and system utilization has improved. These fragmentation-free strategies allocate idle nodes that are possibly dispersed throughout the system and thus reach utilizations of up to 78% for common work-loads <ref> [4, 11] </ref>. However, the new performance bottleneck in fragmentation-free processor allocation is message-passing contention [4, 1, 8]. External contention [7] occurs if communication between nodes of a given job needs a communication link that is used by another job's communication. <p> These fragmentation-free strategies allocate idle nodes that are possibly dispersed throughout the system and thus reach utilizations of up to 78% for common work-loads [4, 11]. However, the new performance bottleneck in fragmentation-free processor allocation is message-passing contention <ref> [4, 1, 8] </ref>. External contention [7] occurs if communication between nodes of a given job needs a communication link that is used by another job's communication. <p> Results in [8] showed no significant difference between message-passing contention in direct and indirect networks. Moreover, we assume the current technologies strategies and resulting message-passing contention of dimension-ordered routing and wormhole switching [9]. The following fragmentation-free strategies were previously proposed: (1) "Paging" <ref> [4] </ref> simply scans the topology in row-major order for unallocated nodes. (2) "Multiple Buddy Strategy" (MBS) [4] typically allocates several contiguous blocks to a job. <p> Moreover, we assume the current technologies strategies and resulting message-passing contention of dimension-ordered routing and wormhole switching [9]. The following fragmentation-free strategies were previously proposed: (1) "Paging" <ref> [4] </ref> simply scans the topology in row-major order for unallocated nodes. (2) "Multiple Buddy Strategy" (MBS) [4] typically allocates several contiguous blocks to a job. It is a hierarchical strategy and maintains free lists, i.e list of blocks that consist of idle nodes of sizes 2 i fi 2 i , 0 i logN 2 . <p> If all jobs in Fig. 1 do an all-to-all communication, messages of different jobs contend on many links. Previous research on contention in fragmentation-free allocation strategies modeled internal and external contention [7], studied whether the advantages of non-contiguity overcome the disadvantage of external contention <ref> [4] </ref>, studied under what conditions contention matters [8] and investigated the trade-off between synchronization and contention [1]. All these studies found that message-passing contention can be a severe performance problem. <p> It adversely affects the overall communication time of messages, the execution time of jobs, and ultimately job throughput of the system. Only under certain conditions has contention been shown to be negligible: in case of small messages <ref> [4, 8] </ref> or high software latency [8]. In [5], we found that low message-passing contention strongly correlates with high allocation compactness. <p> Dispersal is a measure of allocation compactness where for each job, the spatial layout of nodes allo cated to the job is measured. In the results reported, we use minimal enclosing rectangle [5]. To allow for both easy comparison with previous experiments <ref> [4, 10] </ref> and for a realistic evaluation of MC, our performance evaluation includes the use of three different workloads: one synthetic workload and two trace-derived workloads. Workload I is a synthetic workload, a stream of 1000 jobs whose sizes are exponentially distributed.
Reference: [5] <author> J. Mache and V. Lo. </author> <title> The effects of dispersal on message-passing contention in processor allocation strategies. </title> <booktitle> In Proceedings of the 3rd Joint Conference on Information Sciences, Volume 3, Sessions on Parallel and Distributed Processing, </booktitle> <year> 1997. </year>
Reference-contexts: It adversely affects the overall communication time of messages, the execution time of jobs, and ultimately job throughput of the system. Only under certain conditions has contention been shown to be negligible: in case of small messages [4, 8] or high software latency [8]. In <ref> [5] </ref>, we found that low message-passing contention strongly correlates with high allocation compactness. <p> Motivated by our observations about allocation compactness <ref> [5] </ref>, MC tries to assign to each new job a cluster of idle nodes that is as compact as possible. We first discuss MC as applied to two-dimensional mesh topologies and two-dimensional job requests w fi h. <p> Dispersal is a measure of allocation compactness where for each job, the spatial layout of nodes allo cated to the job is measured. In the results reported, we use minimal enclosing rectangle <ref> [5] </ref>. To allow for both easy comparison with previous experiments [4, 10] and for a realistic evaluation of MC, our performance evaluation includes the use of three different workloads: one synthetic workload and two trace-derived workloads. <p> Compact allocations help minimizing message-passing contention, in agreement with previous research <ref> [5] </ref>. * MC outperforms previous allocation strategies, reducing average response time up to 97% (when communication costs dominate runtimes) and being capable of sustaining higher system loads. These performance results are based on message-passing simulations using workload traces from the San Diego Supercomputing Center.
Reference: [6] <author> J. Mache, V. Lo, and K. Windisch. </author> <title> Design and performance evaluation of MC, a high-performance processor allocation strategy. </title> <type> Technical Report CIS-TR-97-07, </type> <institution> University of Oregon, </institution> <year> 1997. </year>
Reference-contexts: More details as well as the performance graphs for workloads I and III (that look similar to those of workload II) can be found in <ref> [6] </ref>. Fig. 5 and 6 help to explain the outstanding performance of MC: up to a certain interarrival time (800 in case of workload II), MC succeeds at allocating jobs very compactly (as measured by dispersal in Fig. 5b) and thus at keeping contention low (Fig. 6a).
Reference: [7] <author> D. Min and M. W. </author> <title> Mutka. A multipath contention model for analyzing job interactions in 2-D mesh multicomputers. </title> <booktitle> In Proceedings of the 8th International Parallel Processing Symposium, </booktitle> <pages> pages 744-751, </pages> <year> 1994. </year>
Reference-contexts: These fragmentation-free strategies allocate idle nodes that are possibly dispersed throughout the system and thus reach utilizations of up to 78% for common work-loads [4, 11]. However, the new performance bottleneck in fragmentation-free processor allocation is message-passing contention [4, 1, 8]. External contention <ref> [7] </ref> occurs if communication between nodes of a given job needs a communication link that is used by another job's communication. <p> If all jobs in Fig. 1 do an all-to-all communication, messages of different jobs contend on many links. Previous research on contention in fragmentation-free allocation strategies modeled internal and external contention <ref> [7] </ref>, studied whether the advantages of non-contiguity overcome the disadvantage of external contention [4], studied under what conditions contention matters [8] and investigated the trade-off between synchronization and contention [1]. All these studies found that message-passing contention can be a severe performance problem.
Reference: [8] <author> S. Q. Moore and L. M. Ni. </author> <title> The effects of network contention on processor allocation strategies. </title> <booktitle> In Proceedings of the 10th International Parallel Processing Symposium, </booktitle> <pages> pages 268-274, </pages> <year> 1996. </year>
Reference-contexts: These fragmentation-free strategies allocate idle nodes that are possibly dispersed throughout the system and thus reach utilizations of up to 78% for common work-loads [4, 11]. However, the new performance bottleneck in fragmentation-free processor allocation is message-passing contention <ref> [4, 1, 8] </ref>. External contention [7] occurs if communication between nodes of a given job needs a communication link that is used by another job's communication. <p> Regarding interconnection networks, we concentrate on direct networks having mesh or k-ary n-cube topologies as found in the Intel TFLOPS, In-tel Paragon, iPSC/860, Cray T3E or Cray T3D. Results in <ref> [8] </ref> showed no significant difference between message-passing contention in direct and indirect networks. Moreover, we assume the current technologies strategies and resulting message-passing contention of dimension-ordered routing and wormhole switching [9]. <p> Previous research on contention in fragmentation-free allocation strategies modeled internal and external contention [7], studied whether the advantages of non-contiguity overcome the disadvantage of external contention [4], studied under what conditions contention matters <ref> [8] </ref> and investigated the trade-off between synchronization and contention [1]. All these studies found that message-passing contention can be a severe performance problem. It adversely affects the overall communication time of messages, the execution time of jobs, and ultimately job throughput of the system. <p> It adversely affects the overall communication time of messages, the execution time of jobs, and ultimately job throughput of the system. Only under certain conditions has contention been shown to be negligible: in case of small messages <ref> [4, 8] </ref> or high software latency [8]. In [5], we found that low message-passing contention strongly correlates with high allocation compactness. <p> It adversely affects the overall communication time of messages, the execution time of jobs, and ultimately job throughput of the system. Only under certain conditions has contention been shown to be negligible: in case of small messages [4, 8] or high software latency <ref> [8] </ref>. In [5], we found that low message-passing contention strongly correlates with high allocation compactness.
Reference: [9] <author> L. M. Ni and P. K. McKinley. </author> <title> A survey of wormhole routing techniques in direct networks. </title> <journal> IEEE Transactions on Computers, </journal> <pages> pages 62-76, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: Results in [8] showed no significant difference between message-passing contention in direct and indirect networks. Moreover, we assume the current technologies strategies and resulting message-passing contention of dimension-ordered routing and wormhole switching <ref> [9] </ref>. The following fragmentation-free strategies were previously proposed: (1) "Paging" [4] simply scans the topology in row-major order for unallocated nodes. (2) "Multiple Buddy Strategy" (MBS) [4] typically allocates several contiguous blocks to a job.
Reference: [10] <author> K. Suzaki, H. Tanuma, S. Hirano, Y. Ichisugi, C. Connelly, and M. Tukamoto. </author> <title> Multi-tasking method on parallel computers which combines a contiguous and a non-contiguous processor partitioning algorithm. </title> <booktitle> In Lecture Notes in Computer Science 1184, </booktitle> <pages> pages 641-650, </pages> <year> 1996. </year>
Reference-contexts: However, if there are choices, it satisfies subrequests with blocks (from the corresponding free lists) that are at minimal distance from the block allocated to the biggest subrequest. (4) "AS&MB" <ref> [10] </ref> is a hybrid strategy employing the fragmentation-free MBS strategy if the contiguous Adaptive Scan strategy [2] fails. All these strategies can cause significant amounts of external message-passing contention due to placing nodes of one job between (i.e. on the communication path of) nodes belonging to other jobs. <p> Dispersal is a measure of allocation compactness where for each job, the spatial layout of nodes allo cated to the job is measured. In the results reported, we use minimal enclosing rectangle [5]. To allow for both easy comparison with previous experiments <ref> [4, 10] </ref> and for a realistic evaluation of MC, our performance evaluation includes the use of three different workloads: one synthetic workload and two trace-derived workloads. Workload I is a synthetic workload, a stream of 1000 jobs whose sizes are exponentially distributed.
Reference: [11] <author> M. Wan, R. Moore, G. Kremenek, and K. Steube. </author> <title> A batch scheduler for the Intel Paragon MPP system with a noncontiguous node allocation algorithm. </title> <booktitle> In Proceedings of the 2nd Workshop on Job Scheduling Strategies for Parallel Processing, IPPS '96, </booktitle> <year> 1996. </year>
Reference-contexts: With the advent of non-contiguous processor allocation strategies, the fragmentation problem has been solved and system utilization has improved. These fragmentation-free strategies allocate idle nodes that are possibly dispersed throughout the system and thus reach utilizations of up to 78% for common work-loads <ref> [4, 11] </ref>. However, the new performance bottleneck in fragmentation-free processor allocation is message-passing contention [4, 1, 8]. External contention [7] occurs if communication between nodes of a given job needs a communication link that is used by another job's communication. <p> The next job requests 3 fi 2 = 6 = 4 + 1 + 1 nodes, and thus one 2 fi 2 and both 1 fi 1 blocks are assigned. (3) "Modified 2-dimensional Buddy" (M2DB) <ref> [11] </ref>, in use on the SDSC Paragon, is similar to MBS.
Reference: [12] <author> K. Windisch, V. Lo, D. Feitelson, B. Nitzberg, and R. Moore. </author> <title> A comparison of workload traces from two production parallel machines. </title> <booktitle> In Proceedings of the Sixth Symposium on the Frontiers of Massively Parallel Computation, </booktitle> <year> 1996. </year>
Reference-contexts: The traced job stream is taken only from the 352 node NQS partition <ref> [12] </ref> of the machine, through which all batch jobs were scheduled.
Reference: [13] <author> K. Windisch, J. V. Miller, and V. Lo. ProcSimity: </author> <title> an experimental tool for processor allocation and scheduling in highly parallel systems. </title> <booktitle> In Proceedings of the Fifth Symposium on the Frontiers of Massively Parallel Computation, </booktitle> <pages> pages 414-421, </pages> <year> 1995. </year>
Reference-contexts: Moreover, MC easily extends to higher dimensional and toroidal topologies because extending the shell-like scan and the definition of shells is straightforward. 4 Performance evaluation We conducted experiments to compare MC to previous fragmentation-free allocation strategies. We use ProcSimity <ref> [13] </ref>, a discrete-event simulator that models the arrival, service and departure of a stream of jobs on a massively parallel processing system. The detailed message-passing behavior is simulated down to the level of individual flits and message-passing buffers.
Reference: [14] <author> Y. Zhu. </author> <title> Efficient processor allocation strategies for mesh-connected parallel computers. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 16 </volume> <pages> 328-337, </pages> <year> 1992. </year>
Reference-contexts: Early allocation strategies were contiguous and internal and external fragmentation were serious problems. Using first-come, first-served scheduling, maximum system utilizations of only 34% to 66% were reported <ref> [14, 4] </ref>. With the advent of non-contiguous processor allocation strategies, the fragmentation problem has been solved and system utilization has improved. These fragmentation-free strategies allocate idle nodes that are possibly dispersed throughout the system and thus reach utilizations of up to 78% for common work-loads [4, 11].
References-found: 14

