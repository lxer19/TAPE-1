URL: http://www.win.tue.nl/~hooman/BEB.ps
Refering-URL: http://www.win.tue.nl/~hooman/BEB.html
Root-URL: http://www.win.tue.nl
Email: hooman@win.tue.nl  
Title: Formal Verification of the Binary Exponential Backoff Protocol  
Author: Jozef Hooman 
Web: http://www.tue.nl/hooman  
Address: P.O. Box 513, NL-5600 MB Eindhoven, The Netherlands.  
Affiliation: Department of Mathematics and Computing Science, Eindhoven University of Technology,  
Abstract: We present a formal framework for the specification and verification of distributed real-time systems. To obtain mechanical support, this framework has been defined in the language of the proof checker PVS. Intermediate stages of the design are represented by mixed terms where specifications and programming constructs can be combined. Compositional proof rules allow the verification of design steps. Here we focus on rules for parallel composition and hiding. Their use during protocol verification is illustrated by a part of the HTTP protocol, the binary exponential backoff protocol. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <editor> de Bakker, Huizing, de Roever, and Rozenberg, editors. </editor> <booktitle> Proceedings REX Workshop on Real-Time: Theory in Practice. </booktitle> <publisher> LNCS 600. Springer-Verlag, </publisher> <year> 1992. </year> <month> 18 </month>
Reference-contexts: Formal specification of real-time systems requires a formalism in which the timed occurrence of events can be expressed. A large number of formalisms has been devised, often extending non-real-time frameworks such as temporal logic, process algebra, automata, and Hoare logic (see, for instance, <ref> [1, 10] </ref>). Here we consider a basic framework in which a component is simply specified by spec (Eset; A), where Eset is the alphabet of the component (the set of events that form the static interface) and A is an assertion expressing its timed behaviour.
Reference: [2] <author> R. Fielding, J. Gettys, J. Mogul, H. Frysryk, and T. Berners-Lee. </author> <title> Hypertext transfer protocol - http/1.1. Request for Comments (RFC) 2068, </title> <note> http://ds.internic.net/ds/rfc-index.html, 1997. </note>
Reference-contexts: The hiding construct can be used to encapsulate internal events. As an application of our formal framework, we present a general approach to verify distributed real-time protocols. This is illustrated by the verification of a Binary Exponential Backoff algorithm, which is part of the HTTP protocol <ref> [2] </ref>. Tool support for our mixed framework is obtained by formulating it in the language of the verification system PVS (Prototype Verification System) [13, 14]. The language of PVS is based on typed higher-order logic and contains a large number of pre-defined types. <p> It is often convenient to be able to write o (read)(t) and then, using the primitives of TimePrim, also o (read) in <ref> [2; 7] </ref>. This is achieved by means of a conversion. <p> This protocol is a proposed standard, described in RFC 2068 <ref> [2] </ref>. It organizes the transfer of data between a client (e.g. a network browser) and a server. Client and server communicate by means of a TCP connection. Document RFC 2068 describes only the client part of the protocol, along the following lines. 1.
Reference: [3] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: For the alphabet we simply take the union of the alphabets of the components. Hiding of internal events is considered as a seperate operation, defined in the next section. Inspired by the trace-based untimed semantics of parallel composition <ref> [3] </ref>, we define the timed behaviour by means of so-called projections, here represented by intersection. Main requirement is that the projection of an observation of the parallel composition onto the alphabet of one component, should lead to an observation of this component.
Reference: [4] <author> J. Hooman. </author> <title> Compositional verification of a distributed real-time arbitration protocol. </title> <booktitle> Real-Time Systems, </booktitle> <volume> 6(2) </volume> <pages> 173-205, </pages> <year> 1994. </year>
Reference-contexts: correctness of the client protocol described in section 7 requires R &gt; 1.) A related refinement can be found in the work on a distributed real-time arbitration protocol, where first the protocol is verified on an abstract level, and next the nodes are implemented in isolation according to their specification <ref> [4] </ref>. Other applications of our approach to protocol verification in PVS concern part of the ACCESS.bus protocol [5] and a membership protocol, with a dynamically changing network and local clocks [6].
Reference: [5] <author> J. Hooman. </author> <title> Verifying part of the ACCESS.bus protocol using PVS. </title> <booktitle> In Proceedings 15th Conference on the Foundations of Software Technology and Theoretical Computer Science, </booktitle> <pages> pages 96-110. </pages> <publisher> LNCS 1026, Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: Other applications of our approach to protocol verification in PVS concern part of the ACCESS.bus protocol <ref> [5] </ref> and a membership protocol, with a dynamically changing network and local clocks [6]. In [9] an alternative approach has been applied to the specification and verification of the link layer of the serial bus protocol P1394.
Reference: [6] <author> J. Hooman. </author> <title> Verification of distributed real-time and fault-tolerant protocols. </title> <booktitle> In Algebraic Methodology and Software Technology (AMAST'97), </booktitle> <pages> pages 261-275. </pages> <publisher> LNCS 1349, Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Other applications of our approach to protocol verification in PVS concern part of the ACCESS.bus protocol [5] and a membership protocol, with a dynamically changing network and local clocks <ref> [6] </ref>. In [9] an alternative approach has been applied to the specification and verification of the link layer of the serial bus protocol P1394. Since the informal specification is based on communicating state machines, this framework has been formalized in PVS.
Reference: [7] <author> J. Hooman. </author> <title> Compositional verification of real-time applications. In Proceedings COMPOS '97, Compositionality The Significant Difference, to appear. </title> <publisher> LNCS, Springer-Verlag, </publisher> <year> 1998. </year>
Reference-contexts: Moreover, we omit the structure of theory names and imported theories, but focus on the main ideas. For more details about the formal framework we refer to <ref> [7] </ref>. 3 Semantic Primitives Program semantics is defined in terms of the events that can be observed at any point of time. For simplicity, to emphasize the main concepts, we do not consider the local state of a component here. <p> It is often convenient to be able to write o (read)(t) and then, using the primitives of TimePrim, also o (read) in <ref> [2; 7] </ref>. This is achieved by means of a conversion. <p> ^ o " ff (comp2) = o 2 ^ o ff (comp1) [ ff (comp2)) #) The definition above is convenient for the soundness proof of the verification rule that will be presented in the next section; other equivalent versions, e.g. using the intersection of behaviours, can be found in <ref> [7] </ref>. We have proved that parallel composition is commutative and associative. <p> It can be considered as an extension and a modification of mixed frameworks for untimed systems [11, 12, 15]. Alternatives for the semantics and an application to hybrid systems can be found in <ref> [7] </ref>. The treatment of parallel composition for components with a local state has been studied in [8]. 17 The formalism has been applied to a distributed real-time protocol, the Binary Exponential Backoff protocol.
Reference: [8] <author> J. Hooman. </author> <title> Developing proof rules for distributed real-time systems with PVS. In Proceedings of the Workshop on Tool Support for System Development and Verification, </title> <note> to appear, </note> <year> 1998. </year>
Reference-contexts: For simplicity, to emphasize the main concepts, we do not consider the local state of a component here. More details on the incorporation of a local state can be found in <ref> [8] </ref>. Events are represented by a non-empty type; particular events can later be defined as constants of this type. Basic primitive is an observation function, which assigns to each point in time the set of events that occur at that time. <p> It can be considered as an extension and a modification of mixed frameworks for untimed systems [11, 12, 15]. Alternatives for the semantics and an application to hybrid systems can be found in [7]. The treatment of parallel composition for components with a local state has been studied in <ref> [8] </ref>. 17 The formalism has been applied to a distributed real-time protocol, the Binary Exponential Backoff protocol. It has been verified on an abstract level, abstracting for instance from the algorithm which is used to compute the distance in time between request and subsequent data dynamically.
Reference: [9] <author> L. Kuhne, J. Hooman, and W.P. de Roever. </author> <title> Towards mechanical verification of parts of the IEEE P1394 serial bus. </title> <editor> In I. Lovrek, editor, </editor> <booktitle> 2nd International Workshop on Applied Formal Methods in System Design, </booktitle> <pages> pages 73-85. </pages> <institution> University of Zagreb, Faculty of Electrical Engineering and Computing, </institution> <year> 1997. </year>
Reference-contexts: Other applications of our approach to protocol verification in PVS concern part of the ACCESS.bus protocol [5] and a membership protocol, with a dynamically changing network and local clocks [6]. In <ref> [9] </ref> an alternative approach has been applied to the specification and verification of the link layer of the serial bus protocol P1394. Since the informal specification is based on communicating state machines, this framework has been formalized in PVS.
Reference: [10] <editor> H. Langmaack, W.-P. de Roever, and J. Vytopil, editors. </editor> <title> Formal Techniques in Real-Time and Fault-Tolerant Systems. </title> <publisher> LNCS 863. Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: Formal specification of real-time systems requires a formalism in which the timed occurrence of events can be expressed. A large number of formalisms has been devised, often extending non-real-time frameworks such as temporal logic, process algebra, automata, and Hoare logic (see, for instance, <ref> [1, 10] </ref>). Here we consider a basic framework in which a component is simply specified by spec (Eset; A), where Eset is the alphabet of the component (the set of events that form the static interface) and A is an assertion expressing its timed behaviour.
Reference: [11] <author> E.-R. Olderog. </author> <title> Process theory: Semantics, specification and verification. </title> <booktitle> In Current Trends in Concurrency, </booktitle> <pages> pages 442-509. </pages> <publisher> LNCS 224, Springer-Verlag, </publisher> <year> 1985. </year>
Reference-contexts: It can be considered as an extension and a modification of mixed frameworks for untimed systems <ref> [11, 12, 15] </ref>. Alternatives for the semantics and an application to hybrid systems can be found in [7]. The treatment of parallel composition for components with a local state has been studied in [8]. 17 The formalism has been applied to a distributed real-time protocol, the Binary Exponential Backoff protocol.
Reference: [12] <author> E.-R. Olderog. </author> <title> Nets, Terms and Formulas, </title> <booktitle> volume 23 of Camebridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Camebridge University Press, </publisher> <year> 1991. </year> <month> 19 </month>
Reference-contexts: It can be considered as an extension and a modification of mixed frameworks for untimed systems <ref> [11, 12, 15] </ref>. Alternatives for the semantics and an application to hybrid systems can be found in [7]. The treatment of parallel composition for components with a local state has been studied in [8]. 17 The formalism has been applied to a distributed real-time protocol, the Binary Exponential Backoff protocol.
Reference: [13] <author> S. Owre, J. Rushby, and N. Shankar. PVS: </author> <title> A prototype verification system. </title> <booktitle> In 11th Conference on Automated Deduction, volume 607 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 748-752. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: This is illustrated by the verification of a Binary Exponential Backoff algorithm, which is part of the HTTP protocol [2]. Tool support for our mixed framework is obtained by formulating it in the language of the verification system PVS (Prototype Verification System) <ref> [13, 14] </ref>. The language of PVS is based on typed higher-order logic and contains a large number of pre-defined types. Typechecking is not decidable, but might generate proof obligations (so-called Type Check Conditions). Moreover PVS contains an interactive theorem prover which contains powerful decision procedures to prove simple properties automatically.
Reference: [14] <author> S. Owre, J. Rushby, N. Shankar, and F. von Henke. </author> <title> Formal verification for fault-tolerant architectures: Prolegomena to the design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2) </volume> <pages> 107-125, </pages> <year> 1995. </year>
Reference-contexts: This is illustrated by the verification of a Binary Exponential Backoff algorithm, which is part of the HTTP protocol [2]. Tool support for our mixed framework is obtained by formulating it in the language of the verification system PVS (Prototype Verification System) <ref> [13, 14] </ref>. The language of PVS is based on typed higher-order logic and contains a large number of pre-defined types. Typechecking is not decidable, but might generate proof obligations (so-called Type Check Conditions). Moreover PVS contains an interactive theorem prover which contains powerful decision procedures to prove simple properties automatically.
Reference: [15] <author> J. Zwiers. </author> <title> Compositionality, Concurrency and Partial Correctness. </title> <publisher> LNCS 321, Springer-Verlag, </publisher> <year> 1989. </year> <month> 20 </month>
Reference-contexts: It can be considered as an extension and a modification of mixed frameworks for untimed systems <ref> [11, 12, 15] </ref>. Alternatives for the semantics and an application to hybrid systems can be found in [7]. The treatment of parallel composition for components with a local state has been studied in [8]. 17 The formalism has been applied to a distributed real-time protocol, the Binary Exponential Backoff protocol.
References-found: 15

