URL: http://www.cs.purdue.edu/homes/palsberg/paper/toplas95-po.ps.gz
Refering-URL: http://www.cs.purdue.edu/homes/palsberg/publications.html
Root-URL: http://www.cs.purdue.edu
Title: A Type System Equivalent to Flow Analysis  
Author: JENS PALSBERG and PATRICK O'KEEFE 
Keyword: Categories and Subject Descriptors: D.3.2 [Programming Languages]: Language Classifications|applicative languages; F.3.3 [Logics and Meanings of Programs]: Studies of Program Constructs|type structure General Terms: Algorithms, Languages, Theory Additional Key Words and Phrases: Constraints, flow analysis  
Affiliation: Massachusetts Institute of Technology  
Abstract: Flow-based safety analysis of higher-order languages has been studied by Shivers, and Palsberg and Schwartzbach. Open until now is the problem of finding a type system that accepts exactly the same programs as safety analysis. In this article we prove that Amadio and Cardelli's type system with subtyping and recursive types accepts the same programs as a certain safety analysis. The proof involves mappings from types to flow information and back. As a result, we obtain an inference algorithm for the type system, thereby solving an open problem. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Amadio, R. M. and Cardelli, L. </author> <year> 1993. </year> <title> Subtyping recursive types. </title> <journal> ACM Trans. Program. </journal>
Reference: <author> Lang. </author> <booktitle> Syst. </booktitle> <volume> 15, 4, </volume> <pages> 575-631. </pages> <note> Also in Proc. POPL'91. </note>
Reference: <author> Amtoft, T. </author> <year> 1993. </year> <title> Minimal thunkification. </title> <booktitle> In Proceedings of WSA'93, 3rd International Workshop on Static Analysis. Lecture Notes in Computer Science, </booktitle> <volume> vol. 724. </volume> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 218-229. </pages>
Reference: <author> Bondorf, A. </author> <year> 1991. </year> <title> Automatic autoprojection of higher order recursive equations. </title> <institution> Sci. Comput. Program. </institution> <month> 17, 1-3 (Dec.), </month> <pages> 3-34. </pages>
Reference: <author> Bondorf, A. and Jtrgensen, J. </author> <year> 1993. </year> <title> Efficient analyses for realistic off-line partial evaluation. </title>
Reference: <author> J. </author> <title> Funct. </title> <booktitle> Program. </booktitle> <volume> 3, 3, </volume> <pages> 315-346. </pages>
Reference: <author> Consel, C. </author> <year> 1993. </year> <title> A tour of Schism: A partial evaluation system for higher-order applicative languages. </title> <booktitle> In Proceedings of PEPM'93, 2nd ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. ACM, </booktitle> <address> New York, </address> <pages> 145-154. </pages>
Reference: <author> Heintze, N. </author> <year> 1994. </year> <title> Set-based analysis of ML programs. </title> <booktitle> In Proceedings of the ACM Conference on LISP and Functional Programming. ACM, </booktitle> <address> New York, </address> <pages> 306-317. </pages>
Reference-contexts: On the flow analysis side, it would result in an analysis resembling the one of Bondorf and Jtrgensen [1993]. Current work addresses obtaining an equivalence between two such systems <ref> (personal communication, N. Heintze, 1994) </ref>. In conclusion, we find that a type system and a flow analysis can in some cases be equivalent ways of looking at the same problem. Acknowledgments We thank Mitchell Wand for encouragement and helpful discussions.
Reference: <author> Kozen, D., Palsberg, J., and Schwartzbach, M. I. </author> <year> 1994. </year> <title> Efficient inference of partial types. </title>
Reference: <author> J. </author> <title> Comput. </title> <journal> Syst. Sci. </journal> <volume> 49, 2, </volume> <pages> 306-324. </pages> <note> Also in Proc. </note> <editor> FOCS'92, </editor> <booktitle> 33rd IEEE Symposium on Foundations of Computer Science, </booktitle> <pages> pages 363-371, </pages> <address> Pittsburgh, Pennsylvania, </address> <month> October </month> <year> 1992. </year>
Reference: <author> Kozen, D., Palsberg, J., and Schwartzbach, M. I. </author> <year> 1995. </year> <title> Efficient recursive subtyping. </title> <note> In Mathematical Structures in Computer Science. To be published. Also in Proc. </note> <editor> POPL'93, </editor> <booktitle> 20th Annual SIGPLAN-SIGACT Symposium on Principles of Programming Languages, </booktitle> <pages> pages 419-428, </pages> <address> Charleston, South Carolina, </address> <month> January </month> <year> 1993. </year>
Reference: <author> Kuo, T.-M. and Mishra, P. </author> <year> 1989. </year> <title> Strictness analysis: A new perspective based on type inference. </title> <booktitle> In Proceedings of the Conference on Functional Programming Languages and Computer Architecture. ACM, </booktitle> <address> New York, </address> <pages> 260-272. </pages>
Reference: <author> Palsberg, J. </author> <year> 1995. </year> <title> Closure analysis in constraint form. </title> <journal> ACM Trans. Program. Lang. Syst. </journal> <volume> 17, 1 (Jan.), </volume> <pages> 47-62. </pages>
Reference: <author> Palsberg, J. and Schwartzbach, M. I. </author> <year> 1992. </year> <title> Safety analysis versus type inference for partial types. </title> <journal> Inf. Process. Lett. </journal> <volume> 43, </volume> <pages> 175-180. </pages>
Reference: <author> Palsberg, J. and Schwartzbach, M. I. </author> <year> 1994a. </year> <title> Binding-time analysis: Abstract interpretation versus type inference. </title> <booktitle> In Proceedings of ICCL'94, 5th IEEE International Conference on Computer Languages. IEEE, </booktitle> <address> New York, </address> <pages> 289-298. </pages>
Reference: <author> Palsberg, J. and Schwartzbach, M. I. </author> <year> 1994b. </year> <title> Object-Oriented Type Systems. </title> <publisher> John Wiley & Sons, </publisher> <address> New York. </address>
Reference: <author> Palsberg, J. and Schwartzbach, M. I. </author> <year> 1995. </year> <title> Safety analysis versus type inference. </title> <journal> Inf. Com-put. </journal> <volume> 118, 1, </volume> <pages> 128-141. </pages>
Reference: <author> Sestoft, P. </author> <year> 1991. </year> <title> Analysis and efficient implementation of functional programs. </title> <type> Ph.D. thesis, </type> <institution> DIKU, Univ. of Copenhagen, </institution> <note> Denmark. </note> <author> 24 Jens Palsberg and Patrick O'Keefe Shivers, O. </author> <year> 1991a. </year> <title> Control-flow analysis of higher-order languages. </title> <type> Ph.D. thesis, </type> <institution> CMU-CS-91-145, Carnegie Mellon Univ., </institution> <address> Pittsburgh, Pa. </address>
Reference: <author> Shivers, O. </author> <year> 1991b. </year> <title> Data-flow analysis and type recovery in Scheme. </title> <booktitle> In Topics in Advanced Language Implementation, </booktitle> <editor> P. Lee, Ed. </editor> <publisher> MIT Press, </publisher> <address> Cambridge, Mass., </address> <pages> 47-87. </pages>
Reference: <author> Tang, Y. M. and Jouvelot, P. </author> <year> 1994. </year> <title> Separate abstract interpretation for control-flow analysis. </title> <booktitle> In Proceedings of TACS'94, Theoretical Aspects of Computing Sofware. Lecture Notes in Computer Science, </booktitle> <volume> vol. 789. </volume> <publisher> Springer-Verlag, Berlin, </publisher> <pages> 224-243. </pages>
Reference: <author> Wand, M. </author> <year> 1986. </year> <title> Finding the source of type errors. </title> <booktitle> In the 13th Symposium on Principles of Programming Languages. ACM, </booktitle> <address> New York, </address> <pages> 38-43. </pages>
Reference: <author> Wand, M. </author> <year> 1991. </year> <title> Type inference for record concatenation and multiple inheritance. </title> <journal> Inf. Com-put. </journal> <volume> 93, 1, </volume> <pages> 1-15. </pages>
Reference: <author> Wand, M. and Steckler, P. </author> <year> 1994. </year> <title> Selective and lightweight closure conversion. </title> <booktitle> In Proceedings of POPL'94, 21st Annual Symposium on Principles of Programming Languages. ACM, </booktitle> <address> New York, 434-445. </address> <note> Received February 1995; revised May 1995; accepted June 1995 </note>
References-found: 23

