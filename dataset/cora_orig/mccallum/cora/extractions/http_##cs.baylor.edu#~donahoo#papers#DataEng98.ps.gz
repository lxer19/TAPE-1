URL: http://cs.baylor.edu/~donahoo/papers/DataEng98.ps.gz
Refering-URL: http://cs.baylor.edu/~donahoo/
Root-URL: http://cs.baylor.edu
Title: Grouping Techniques for Update Propagation in Intermittently Connected Databases  
Author: Sameer Mahajan Michael Donahoo Shamkant Navathe Mostafa Ammar Sanjoy Malik 
Address: Atlanta, GA 30332, USA Atlanta, GA 30332, USA  
Affiliation: College of Computing Advanced Technology Development Center Georgia Institute of Technology Georgia Institute of Technology  
Abstract: We consider an environment where one or more servers carry databases that are of interest to a community of clients. The clients are only intermittently connected to the server for brief periods of time. Clients carry a part of the database for their own processing and accumulate local updates while disconnected. We call this the Intermittently Connected Database (ICDB) environment. ICDBs have a wide variety of applications including sales force automation, insurance claim processing, and mobile work forces. Our focus in the paper is on the problem of update propagation at the server in ICDBs and the associated processing at the clients. The typical client-centric approach involves the communication and processing of updates and transactions on a per-client basis, ignoring the overlap of data between clients. The complexity of this approach is on the order of the number of connecting clients, thereby limiting the scalability of the server. We propose a data-centric approach which clusters data into groups and assigns to each client one or more of these groups. The proposed scheme results in server processing complexity on the order of the number of groups, which we control. We propose various techniques for grouping and discuss the processing required at the clients to enable the grouping approach. While the client-centric approach is expected to significantly degrade with the increasing number of clients, we expect that a properly designed grouping scheme will sustain a number of clients that is significantly larger. A prototype has been developed and performance studies are currently in progress. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. J. Kistler, </author> <title> Disconnected Operation in a Distributed File System. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> May </month> <year> 1993. </year> <month> CMU-CS-93-156. </month>
Reference-contexts: 1 Introduction The growing trend towards mobile computing has resulted in the adaptation of many traditional applications to intermittently connected <ref> [1, 2, 3, 4] </ref> environments, including replicated database views.
Reference: [2] <author> J. J. Kistler and M. Satyanarayanan, </author> <title> "Disconnected operation in the CODA file system," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 10, </volume> <pages> pp. 3-25, </pages> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: 1 Introduction The growing trend towards mobile computing has resulted in the adaptation of many traditional applications to intermittently connected <ref> [1, 2, 3, 4] </ref> environments, including replicated database views.
Reference: [3] <author> L. B. Mummert, M. R. Ebling, and M. Satya-narayanan, </author> <title> "Exploiting weak connectivity for mobile file access," </title> <booktitle> in Proceedings of the 15th ACM Symposium on Operating Systems Principles, </booktitle> <address> (Copper Mountain Resort, CO), </address> <month> Dec. </month> <year> 1995. </year>
Reference-contexts: 1 Introduction The growing trend towards mobile computing has resulted in the adaptation of many traditional applications to intermittently connected <ref> [1, 2, 3, 4] </ref> environments, including replicated database views.
Reference: [4] <author> M. Satyanarayanan, J. Kistler, L. Mummert, M. Ebling, P. Kumar, and Q. Lu, </author> <title> "Experience with disconnected operation in a mobile computing environment," </title> <booktitle> in Proceedings of the USENIX Symposium on Mobile and Location-Independent Computing, </booktitle> <address> (Boston, MA), </address> <month> June </month> <year> 1993. </year>
Reference-contexts: 1 Introduction The growing trend towards mobile computing has resulted in the adaptation of many traditional applications to intermittently connected <ref> [1, 2, 3, 4] </ref> environments, including replicated database views.
Reference: [5] <author> S. E. Deering and D. R. Cheriton, </author> <title> "Multicast routing in datagram internetworks and extended LANs," </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> vol. 8, </volume> <pages> pp. 85-110, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: For example, if two professors connect at the same time, both will be sent the same data, and since each professor has his own update file, the same data will be sent twice on the network. We propose reducing network duplication by utilizing multicast <ref> [5] </ref> to send the same shared data once to a set of clients. In the University Database example, if multiple Professor clients attempt to simultaneously 3 access the 3 Discussion of how client request synchronicity is accomplished beyond the scope of this paper.
Reference: [6] <author> R. J. Clark and M. H. Ammar, </author> <title> "Providing scalable Web services using multicast," </title> <booktitle> in Proceedings of the 2nd International Workshop on Services in Distributed and Networked Environments (SDNE 95), </booktitle> <month> June </month> <year> 1995. </year> <note> To appear in Computer Networks and ISDN systems. </note>
Reference-contexts: Under-Students update file, the server could send this file once using multicast, and the network would handle delivering a copy to each client. This concept of aggregating and multicasting data bound for individuals has been tried in the context of web pages <ref> [6] </ref> and broadcast databases [7]. In this paper, we focus exclusively on processing scalability; consequently, the issue of using multicast communication to further improve the performance of ICDBs is the subject of ongoing research. Section 2 describes related work in this area. <p> This work does not address the issue of multiple differential update files, as required by our approach. Related work in aggregation of data for broadcast has been performed in many areas. This approach has been used to reduce bandwidth consumption of web servers <ref> [26, 6] </ref>. In [27], the authors analyzed data aggregation techniques for broadcasting data in Videotex systems. Our approach of dissemination of updates from server to the clients is similar to that in broadcast disks [28].
Reference: [7] <author> G. E. Herman, G. Gopal, K. C. Lee, and A. Weinrib, </author> <title> "The datacycle architecture for very high throughput database systems," </title> <booktitle> in SIGMOD 1987, </booktitle> <pages> pp. 97-103, </pages> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: Under-Students update file, the server could send this file once using multicast, and the network would handle delivering a copy to each client. This concept of aggregating and multicasting data bound for individuals has been tried in the context of web pages [6] and broadcast databases <ref> [7] </ref>. In this paper, we focus exclusively on processing scalability; consequently, the issue of using multicast communication to further improve the performance of ICDBs is the subject of ongoing research. Section 2 describes related work in this area.
Reference: [8] <author> A. Gupta and I. S. Mumick, </author> <title> "Maintenance of materialized views: Problems, techniques and applications," </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> vol. 18, </volume> <pages> pp. 3-18, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: View maintenance has been a long standing research problem in database systems. The incremental techniques and algorithms are classified and thoroughly surveyed in <ref> [8] </ref>. Most of the techniques [9, 10, 11, 12, 13, 14, 15, 16] make use of complete information (i.e. base relations as well as materialized views) for the maintenance. They are almost directly applicable for our server processing.
Reference: [9] <author> S. Ceri and J. Widom, </author> <title> "Deriving production rules for incremental view maintenance," </title> <booktitle> VLDB, </booktitle> <year> 1991. </year>
Reference-contexts: View maintenance has been a long standing research problem in database systems. The incremental techniques and algorithms are classified and thoroughly surveyed in [8]. Most of the techniques <ref> [9, 10, 11, 12, 13, 14, 15, 16] </ref> make use of complete information (i.e. base relations as well as materialized views) for the maintenance. They are almost directly applicable for our server processing.
Reference: [10] <author> T. Griffin and L. Libkin, </author> <title> "Incremental maintenance of views with duplicates," </title> <booktitle> ACM SIGMOD, </booktitle> <year> 1995. </year>
Reference-contexts: View maintenance has been a long standing research problem in database systems. The incremental techniques and algorithms are classified and thoroughly surveyed in [8]. Most of the techniques <ref> [9, 10, 11, 12, 13, 14, 15, 16] </ref> make use of complete information (i.e. base relations as well as materialized views) for the maintenance. They are almost directly applicable for our server processing.
Reference: [11] <author> A. Gupta, H. V. Jagdish, and I. S. Mumick, </author> <title> "Data integration using self-maintainable views," </title> <note> Technical Memorandum 113880-941101-32, </note> <month> Nov. </month> <year> 1994. </year>
Reference-contexts: View maintenance has been a long standing research problem in database systems. The incremental techniques and algorithms are classified and thoroughly surveyed in [8]. Most of the techniques <ref> [9, 10, 11, 12, 13, 14, 15, 16] </ref> make use of complete information (i.e. base relations as well as materialized views) for the maintenance. They are almost directly applicable for our server processing. <p> Sometimes it is not possible to have all the information (e.g. in case of the intermittently connecting clients in the system under consideration). A view is not always maintainable for a modification by using only the view. Some work <ref> [11] </ref> concentrates on self-maintainable views, while other work [23] looks at how additional information in terms of some base relations along with the view can facilitate view maintenance. There are some other approaches [24, 25] that study propagation of updates on a materialized view to other materialized views.
Reference: [12] <author> A. Gupta, I. S. Mumick, and V. Subrahmaniam, </author> <title> "Maintaining views incrementally," </title> <booktitle> ACM SIG-MOD, </booktitle> <pages> pp. 157-167, </pages> <year> 1993. </year>
Reference-contexts: View maintenance has been a long standing research problem in database systems. The incremental techniques and algorithms are classified and thoroughly surveyed in [8]. Most of the techniques <ref> [9, 10, 11, 12, 13, 14, 15, 16] </ref> make use of complete information (i.e. base relations as well as materialized views) for the maintenance. They are almost directly applicable for our server processing.
Reference: [13] <author> J. V. Harrison and S. Dietrich, </author> <title> "Maintenance of materialized views in a deductive database: An update propagation approach," </title> <booktitle> Workshop on Deductive Databases, JICSLP, </booktitle> <year> 1992. </year>
Reference-contexts: View maintenance has been a long standing research problem in database systems. The incremental techniques and algorithms are classified and thoroughly surveyed in [8]. Most of the techniques <ref> [9, 10, 11, 12, 13, 14, 15, 16] </ref> make use of complete information (i.e. base relations as well as materialized views) for the maintenance. They are almost directly applicable for our server processing.
Reference: [14] <author> A. Y. Levy, A. O. Mendelzon, Y. Sagiv, and D. Srivastava, </author> <title> "Answering queries using views," </title> <booktitle> PODS, </booktitle> <pages> pp. 95-104, </pages> <year> 1995. </year>
Reference-contexts: View maintenance has been a long standing research problem in database systems. The incremental techniques and algorithms are classified and thoroughly surveyed in [8]. Most of the techniques <ref> [9, 10, 11, 12, 13, 14, 15, 16] </ref> make use of complete information (i.e. base relations as well as materialized views) for the maintenance. They are almost directly applicable for our server processing.
Reference: [15] <author> B. Mitschang, H. Pirahesh, P. Pistor, B. Lindsay, and N. Sudkamp, </author> <title> "Sql/xnf processing composite objects as abstractions over relational data," </title> <booktitle> IEEE Data Engineering Conference, </booktitle> <year> 1993. </year>
Reference-contexts: View maintenance has been a long standing research problem in database systems. The incremental techniques and algorithms are classified and thoroughly surveyed in [8]. Most of the techniques <ref> [9, 10, 11, 12, 13, 14, 15, 16] </ref> make use of complete information (i.e. base relations as well as materialized views) for the maintenance. They are almost directly applicable for our server processing.
Reference: [16] <author> X. Qian and G. Weiderhold, </author> <title> "Incremental recomputation of active relational expressions," </title> <journal> IEEE TKDE, </journal> <volume> vol. 3, </volume> <pages> pp. 337-341, </pages> <year> 1991. </year>
Reference-contexts: View maintenance has been a long standing research problem in database systems. The incremental techniques and algorithms are classified and thoroughly surveyed in [8]. Most of the techniques <ref> [9, 10, 11, 12, 13, 14, 15, 16] </ref> make use of complete information (i.e. base relations as well as materialized views) for the maintenance. They are almost directly applicable for our server processing.
Reference: [17] <author> M. E. Adiba and B. G. Lindsay, </author> <title> "Database snapshots," </title> <booktitle> VLDB, </booktitle> <pages> pp. 88-91, </pages> <month> Oct. </month> <year> 1980. </year>
Reference-contexts: They are almost directly applicable for our server processing. The difference is that the intermittent connectivity forces us to refresh the views on-demand regardless of the query-issued times <ref> [17, 18] </ref>, rather than immediately after each update [19, 20] or to defer view updates until issuing a related query to the view [21, 22]. Sometimes it is not possible to have all the information (e.g. in case of the intermittently connecting clients in the system under consideration).
Reference: [18] <author> B. G. Lindsay, L. Haas, C. Mohan, H. Pirahesh, and P. Wilms, </author> <title> "A snapshot differential refresh algorithm," </title> <booktitle> ACM SIGMOD, </booktitle> <pages> pp. 53-60, </pages> <month> June </month> <year> 1986. </year>
Reference-contexts: They are almost directly applicable for our server processing. The difference is that the intermittent connectivity forces us to refresh the views on-demand regardless of the query-issued times <ref> [17, 18] </ref>, rather than immediately after each update [19, 20] or to defer view updates until issuing a related query to the view [21, 22]. Sometimes it is not possible to have all the information (e.g. in case of the intermittently connecting clients in the system under consideration).
Reference: [19] <author> J. A. Blakeley, P. Larson, and F. W. Tompa, </author> <title> "Efficiently updating materialized views," </title> <booktitle> ACM SIGMOD, </booktitle> <pages> pp. 61-71, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: They are almost directly applicable for our server processing. The difference is that the intermittent connectivity forces us to refresh the views on-demand regardless of the query-issued times [17, 18], rather than immediately after each update <ref> [19, 20] </ref> or to defer view updates until issuing a related query to the view [21, 22]. Sometimes it is not possible to have all the information (e.g. in case of the intermittently connecting clients in the system under consideration).
Reference: [20] <author> S. Horowitz and T. Teitelbaum, </author> <title> "Generating editing environment based on relations and attributes," </title> <journal> ACM Trns. Programming Languages Syst., </journal> <volume> vol. 8, </volume> <month> Oct. </month> <year> 1986. </year>
Reference-contexts: They are almost directly applicable for our server processing. The difference is that the intermittent connectivity forces us to refresh the views on-demand regardless of the query-issued times [17, 18], rather than immediately after each update <ref> [19, 20] </ref> or to defer view updates until issuing a related query to the view [21, 22]. Sometimes it is not possible to have all the information (e.g. in case of the intermittently connecting clients in the system under consideration).
Reference: [21] <author> E. R. Hanson, </author> <title> "A performance analysis of view materialization strategies," </title> <booktitle> ACM SIGMOD, </booktitle> <pages> pp. 440-453, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: The difference is that the intermittent connectivity forces us to refresh the views on-demand regardless of the query-issued times [17, 18], rather than immediately after each update [19, 20] or to defer view updates until issuing a related query to the view <ref> [21, 22] </ref>. Sometimes it is not possible to have all the information (e.g. in case of the intermittently connecting clients in the system under consideration). A view is not always maintainable for a modification by using only the view.
Reference: [22] <author> N. Roussopoulos and H. Kang, </author> <booktitle> "Principles and techniques in the design of ADMS," IEEE Computer, </booktitle> <month> Dec. </month> <year> 1986. </year>
Reference-contexts: The difference is that the intermittent connectivity forces us to refresh the views on-demand regardless of the query-issued times [17, 18], rather than immediately after each update [19, 20] or to defer view updates until issuing a related query to the view <ref> [21, 22] </ref>. Sometimes it is not possible to have all the information (e.g. in case of the intermittently connecting clients in the system under consideration). A view is not always maintainable for a modification by using only the view.
Reference: [23] <author> H. V. Jagdish, I. S. Mumick, and A. Silberschatz, </author> <title> "View maintenance issues in the chronicle data model," </title> <booktitle> PODS, </booktitle> <pages> pp. 113-124, </pages> <year> 1995. </year>
Reference-contexts: Sometimes it is not possible to have all the information (e.g. in case of the intermittently connecting clients in the system under consideration). A view is not always maintainable for a modification by using only the view. Some work [11] concentrates on self-maintainable views, while other work <ref> [23] </ref> looks at how additional information in terms of some base relations along with the view can facilitate view maintenance. There are some other approaches [24, 25] that study propagation of updates on a materialized view to other materialized views.
Reference: [24] <author> A. Segev and W. Fang, </author> <title> "Currency-based updates to distributed materialized views," </title> <booktitle> ICDE, </booktitle> <pages> pp. 512-520, </pages> <year> 1990. </year>
Reference-contexts: A view is not always maintainable for a modification by using only the view. Some work [11] concentrates on self-maintainable views, while other work [23] looks at how additional information in terms of some base relations along with the view can facilitate view maintenance. There are some other approaches <ref> [24, 25] </ref> that study propagation of updates on a materialized view to other materialized views. This work does not address the issue of multiple differential update files, as required by our approach. Related work in aggregation of data for broadcast has been performed in many areas.
Reference: [25] <author> A. Segev and J. Park, </author> <title> "Updating distributed materialized views," </title> <journal> TKDE, </journal> <volume> vol. 1, </volume> <pages> pp. 173-184, </pages> <month> June </month> <year> 1989. </year>
Reference-contexts: A view is not always maintainable for a modification by using only the view. Some work [11] concentrates on self-maintainable views, while other work [23] looks at how additional information in terms of some base relations along with the view can facilitate view maintenance. There are some other approaches <ref> [24, 25] </ref> that study propagation of updates on a materialized view to other materialized views. This work does not address the issue of multiple differential update files, as required by our approach. Related work in aggregation of data for broadcast has been performed in many areas.
Reference: [26] <author> K. Almeroth and M. Ammar, </author> <title> "Scalable delivery of web pages using cyclic best-effort (UDP) mul-ticast." </title> <note> To appear in Infocom 98, </note> <year> 1998. </year>
Reference-contexts: This work does not address the issue of multiple differential update files, as required by our approach. Related work in aggregation of data for broadcast has been performed in many areas. This approach has been used to reduce bandwidth consumption of web servers <ref> [26, 6] </ref>. In [27], the authors analyzed data aggregation techniques for broadcasting data in Videotex systems. Our approach of dissemination of updates from server to the clients is similar to that in broadcast disks [28].
Reference: [27] <author> J. W. Wong and M. H. Ammar, </author> <title> "Analysis of broadcast delivery in the Videotex system," </title> <journal> IEEE Transactions on Computers, </journal> <volume> vol. 34, </volume> <pages> pp. 863-866, </pages> <month> Sept. </month> <year> 1985. </year>
Reference-contexts: This work does not address the issue of multiple differential update files, as required by our approach. Related work in aggregation of data for broadcast has been performed in many areas. This approach has been used to reduce bandwidth consumption of web servers [26, 6]. In <ref> [27] </ref>, the authors analyzed data aggregation techniques for broadcasting data in Videotex systems. Our approach of dissemination of updates from server to the clients is similar to that in broadcast disks [28].
Reference: [28] <author> S. Acharya, M. Franklin, and S. Zdonik, </author> <title> "Disseminating updates on broadcast disks," </title> <booktitle> in VLDB, </booktitle> <address> (Bombay, India), </address> <month> Sept. </month> <year> 1996. </year>
Reference-contexts: This approach has been used to reduce bandwidth consumption of web servers [26, 6]. In [27], the authors analyzed data aggregation techniques for broadcasting data in Videotex systems. Our approach of dissemination of updates from server to the clients is similar to that in broadcast disks <ref> [28] </ref>. The motivation for this related work is to operate in asymmetric network environments where downstream (server to client) bandwidth is much higher than upstream bandwidth. We look at this approach mainly in terms of scalability provided at the server to support a higher number of clients.
Reference: [29] <author> M. R. Garey and D. S. Johnson, </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. </title> <publisher> Freeman, </publisher> <year> 1979. </year>
Reference-contexts: This problem is related to the Exact Cover Set problem which is known to be NP-Complete; however, useful approximations exist <ref> [29] </ref>. A Transaction-Set server must communicate with each client individually to handle sending the transactions only to the relevant clients.
Reference: [30] <author> V. R. Narasayya, </author> <title> "Distributed transactions in a mobile computing system," </title> <booktitle> in IEEE Workshop on Mobile Computing, Systems and Applications, </booktitle> <address> (Santa Cruz, CA, USA), </address> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: The server processes the updates <ref> [30] </ref> received from the clients in some serial order 4 and creates an update file for every client, based on its knowledge of data sharing. This update file (called a "delta" file) for each client contains all the operations on the data shared with the client.
Reference: [31] <author> C. Batini, M. Lenzerini, and S. B. Navathe, </author> <title> "A comparative analysis of methodologies for database schema integration," </title> <journal> in ACM Computing Surveys, </journal> <month> Dec. </month> <year> 1986. </year>
Reference-contexts: If an undergrad user wishes to rename the Students relation to UnderGrads in her local database, the client filtering must convert references to Students into UnderGrads references. In general, schema mapping can get very complex and work has been done to address the related problems <ref> [31, 32] </ref>; therefore, in this paper, we do not discuss how the schema mapping or translation can be performed. We only assume that it is performed at the respective clients.
Reference: [32] <author> S. Navathe, S. Mahajan, and E. Omiecinski, </author> <title> "Rule based database integration in HIPED: </title> <booktitle> Heterogeneous intelligent processing in engineering design," in Proceedings of International Symposium on Cooperative Database Systems for Advanced Applications, </booktitle> <address> (Kyoto, Japan), </address> <month> Dec. </month> <year> 1996. </year>
Reference-contexts: If an undergrad user wishes to rename the Students relation to UnderGrads in her local database, the client filtering must convert references to Students into UnderGrads references. In general, schema mapping can get very complex and work has been done to address the related problems <ref> [31, 32] </ref>; therefore, in this paper, we do not discuss how the schema mapping or translation can be performed. We only assume that it is performed at the respective clients.
References-found: 32

