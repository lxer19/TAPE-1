URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/95-038.ps.Z
Refering-URL: ftp://ftp.cs.unc.edu/pub/publications/techreports/FILE.html
Root-URL: http://www.cs.unc.edu
Email: krishnas@cs.unc.edu  manocha@cs.unc.edu  
Title: Algebraic Loop Detection and Evaluation Algorithms for Curve and Surface Interrogations  
Author: Shankar Krishnan Dinesh Manocha 
Keyword: Graphics and Scientific Visualization  
Note: Supported in part by a Alfred P. Sloan Foundation Fellowship, ARO Contract P-34982-MA, NSF Grant CCR-9319957, ONR Contract N00014-94-1-0738, ARPA Contract DABT63-93-C-0048 and NSF/ARPA Center for Computer  
Address: #3175, Sitterson Hall, Chapel Hill, NC 27599-3175 USA  #3175, Sitterson Hall, Chapel Hill, NC 27599-3175 USA  
Affiliation: Univ. of North Carolina CB  Univ. of North Carolina CB  
Abstract: Evaluating curves on surfaces is a frequently occurring operation in a number of applications involving surface interrogations. For example, evaluating the intersection curve of two surfaces is critical to boundary (B-rep) computation, and in applications involving visibility and rendering, the ability to evaluate the silhouette curve of surfaces is important. While dealing with high degree surfaces, these curves usually consist of a number of components, including loops. We present a new algebraic loop characterization algorithm that can be applied in a number of applications. In particular, we discuss its application to the intersection curve of two surfaces and the silhouette curve of a surface. Unlike some other loop detection algorithms, our method can be applied even when the curve contain(s) singularities. 
Abstract-found: 1
Intro-found: 1
Reference: [ABB + 92] <author> E. Anderson, Z. Bai, C. Bischof, J. Demmel, J. Dongarra, J. Du Croz, A. Greenbaum, S. Hammar-ling, and D. Sorensen. </author> <title> LAPACK User's Guide, Release 1.0. </title> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1992. </year>
Reference-contexts: This is used as an initial guess to converge to the turning point using inverse power iterations. 14 ... 4 Implementation, Performance and Applications The loop detection algorithm has been implemented and its performance was measured on a number of models. The algorithm uses existing EISPACK [GBDM77] and LAPACK <ref> [ABB + 92] </ref> routines for some of the matrix computations. At each stage of the algorithm, we can compute bounds on the accuracy of the results obtained based on the accuracy, condition numbers and convergence of numerical methods used like eigenvalue computation, power iterations and Gaussian elimination.
Reference: [ACM84] <author> D. S. Arnon, G.E. Collins, and S. McCallum. </author> <title> Cylindrical algebraic decomposition. </title> <journal> SIAM J. on Computing, </journal> <volume> 13 </volume> <pages> 878-889, </pages> <year> 1984. </year>
Reference-contexts: In particular, the problem of determining all the loops of an algebraic curve can be solved robustly using symbolic methods. One such method is the cylindrical algebraic decomposition <ref> [ACM84] </ref>, which can determine the topological type of a curve. 2 Other techniques are based on posing the problem as computing roots of two algebraic equations in two unknowns and solving them using zero-dimensional solvers.
Reference: [BFJP87] <author> R. Barnhill, G. Farin, M. Jordan, and B. Piper. </author> <title> Surface/surface intersection. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 4(3) </volume> <pages> 3-16, </pages> <year> 1987. </year>
Reference-contexts: The biggest drawback in this approach is the lack of robustness. Small loops could easily be missed depending on the frequency with which the curves are evaluated. In the last decade, techniques based on curve tracing have been widely used to evaluate high degree curves <ref> [BFJP87, BHHL88, KPP90, MC91] </ref>. The main idea is to compute at least one point on every component of the curve and use the local geometry of the curve to evaluate successive points.
Reference: [BHHL88] <author> C.L. Bajaj, C.M. Hoffmann, J.E.H. Hopcroft, and R.E. Lynch. </author> <title> Tracing surface intersections. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5 </volume> <pages> 285-307, </pages> <year> 1988. </year>
Reference-contexts: The biggest drawback in this approach is the lack of robustness. Small loops could easily be missed depending on the frequency with which the curves are evaluated. In the last decade, techniques based on curve tracing have been widely used to evaluate high degree curves <ref> [BFJP87, BHHL88, KPP90, MC91] </ref>. The main idea is to compute at least one point on every component of the curve and use the local geometry of the curve to evaluate successive points.
Reference: [Buc85] <author> B. </author> <title> Buchberger. Groebner bases: An algorithmic method in ideal theory. In N.K. Bose, editor, </title> <booktitle> Multidimensional Systems Theory, </booktitle> <pages> pages 184-232. </pages> <address> D. </address> <publisher> Reidel Publishing Co., </publisher> <year> 1985. </year>
Reference-contexts: One such method is the cylindrical algebraic decomposition [ACM84], which can determine the topological type of a curve. 2 Other techniques are based on posing the problem as computing roots of two algebraic equations in two unknowns and solving them using zero-dimensional solvers. These include Grobner basis <ref> [Buc85] </ref>, resultants and eigenvalue methods [Man94b], homotopy methods [Mor92] or interval arithmetic [Moo79]. However, the complexity of the resulting algebraic systems is quadratic in the degree of the curve.
Reference: [Che89] <author> K.P Cheng. </author> <title> Using plane vector fields to obtain all the intersection curves of two general surfaces. </title> <booktitle> In Theory and Practice of Geometric Modeling, </booktitle> <pages> pages 187-204, </pages> <year> 1989. </year>
Reference-contexts: The problem of evaluating all the curve components has been extensively studied in the literature. In the last decade, a number of algorithms have been proposed to test for closed loops for intersection curve of two surfaces <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90, ZS93, FS90] </ref> and offset curves and surfaces [FN90, Hof90, MP93]. These techniques are based on symbolic methods, evaluation of Gauss maps, subdivision techniques, differential methods and vector field approaches. In practice, they can be slow or restrictive. <p> In these class of methods, identifying a point on every loop is significantly harder than that on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90] </ref>. However, most of these efforts were targeted towards developing loop detection methods for a special type of curve, the intersection curve of two surfaces. All the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected.
Reference: [Dix08] <author> A.L. Dixon. </author> <title> The eliminant of three quantics in two independent variables. </title> <journal> Proceedings of London Mathematical Society, </journal> <volume> 6 </volume> <pages> 49-69, 209-236, </pages> <year> 1908. </year>
Reference-contexts: There are different formulations of resultants for tensor product surfaces and triangular surfaces. It turns out that the resultant of these three equations can always be expressed as the determinant of a matrix <ref> [Dix08] </ref>. Let us denote that matrix as M (x; y; z; w). Furthermore, each entry of the matrix is of the form a ij x+b ij y +c ij z +d ij w. The order of M (x; y; z; w) is a function of the degrees of the equations.
Reference: [EC94] <author> G. Elber and E. Cohen. </author> <title> Exact computation of gauss maps and visibility sets for freefrom surfaces. </title> <type> Technical report CIS #9414, </type> <institution> Computer Science Department, Technion, </institution> <year> 1994. </year> <month> 18 </month>
Reference-contexts: This is continued until all patch pairs fail the test. The number of levels of subdivision depends on how tightly the Gauss maps <ref> [EC94] </ref> are bounded. For example, application of Hohmeyer's [Hoh91] loop detection criterion on the surfaces in Fig. 1 takes 8 levels of subdivision. Furthermore, these algorithms may not work well if the intersection curve is self-intersecting. The algorithms based on Gauss maps are generic.
Reference: [Far93] <author> G. Farin. </author> <title> Curves and Surfaces for Computer Aided Geometric Design: A Practical Guide. </title> <publisher> Academic Press Inc., </publisher> <year> 1993. </year>
Reference-contexts: The property of the silhouette curve is that it subdivides the surface into front and back facing regions. In this section, we describe our formulation of the silhouette curve on a parametric (represented as a tensor product Bezier <ref> [Far93] </ref>) patch. We assume for the sake of simplicity that the viewpoint is located at (0; 0; 1). It is easy to see that even if this is not the case, one can always achieve it by applying an appropriate perspective transformation to the parametric surface F (u; v).
Reference: [FF92] <author> D.A. Field and R. </author> <title> Field. A new family of curves for industrial applications. </title> <type> Technical report GMR-7571, </type> <institution> General Motors Research Laboratories, </institution> <year> 1992. </year>
Reference-contexts: Existing numerical methods for curve evaluation perform tracing in these dimensions using techniques such as quasi-Newton's iteration. However, the convergence of these methods may not be good in higher dimensions <ref> [FF92] </ref>. Our approach is based on a classical result in algebraic geometry that states that any algebraic space curve has a one-to-one correspondence with an algebraic plane curve, after suitable linear transformations. The plane curves with one-to-one correspondence with the intersection curve in space are shown in Fig.2.
Reference: [FN90] <author> R.T. Farouki and C.A. Neff. </author> <title> Analytic properties of plane offset curves. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 7 </volume> <pages> 83-99, </pages> <year> 1990. </year>
Reference-contexts: In the last decade, a number of algorithms have been proposed to test for closed loops for intersection curve of two surfaces [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90, ZS93, FS90] and offset curves and surfaces <ref> [FN90, Hof90, MP93] </ref>. These techniques are based on symbolic methods, evaluation of Gauss maps, subdivision techniques, differential methods and vector field approaches. In practice, they can be slow or restrictive.
Reference: [FS90] <author> R.T. Farouki and T. Sakkalis. </author> <title> Singular points of algebraic curves. </title> <journal> Journal of Symbolic Computation, </journal> <volume> 9(4) </volume> <pages> 457-483, </pages> <year> 1990. </year>
Reference-contexts: The problem of evaluating all the curve components has been extensively studied in the literature. In the last decade, a number of algorithms have been proposed to test for closed loops for intersection curve of two surfaces <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90, ZS93, FS90] </ref> and offset curves and surfaces [FN90, Hof90, MP93]. These techniques are based on symbolic methods, evaluation of Gauss maps, subdivision techniques, differential methods and vector field approaches. In practice, they can be slow or restrictive.
Reference: [GBDM77] <author> B.S. Garbow, J.M. Boyle, J. Dongarra, and C.B. Moler. </author> <title> Matrix Eigensystem Routines - EISPACK Guide Extension, volume 51. </title> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1977. </year>
Reference-contexts: This is used as an initial guess to converge to the turning point using inverse power iterations. 14 ... 4 Implementation, Performance and Applications The loop detection algorithm has been implemented and its performance was measured on a number of models. The algorithm uses existing EISPACK <ref> [GBDM77] </ref> and LAPACK [ABB + 92] routines for some of the matrix computations. At each stage of the algorithm, we can compute bounds on the accuracy of the results obtained based on the accuracy, condition numbers and convergence of numerical methods used like eigenvalue computation, power iterations and Gaussian elimination.
Reference: [Gei83] <author> A. Geisow. </author> <title> Surface Interrogations. </title> <type> PhD thesis, </type> <institution> School of Computing Studies and Accountancy, University of East Anglia, </institution> <year> 1983. </year>
Reference-contexts: The approaches based on symbolic methods and algebraic solvers are not practical for such high degree curves. The subdivision based algorithms subdivide the domain up to a user-specified tolerance and evaluate the curves accordingly <ref> [Gei83, LR80, MP93] </ref>. In general, the two components of a curve can be very close and no good methods are known for computing a good tolerance value. As a result, most implementations use a conservative value for the tolerance. The resulting methods can be slow and lead to data proliferation.
Reference: [GL89] <author> G.H. Golub and C.F. Van Loan. </author> <title> Matrix Computations. </title> <publisher> John Hopkins Press, </publisher> <address> Baltimore, </address> <year> 1989. </year>
Reference-contexts: In case M d is singular or ill-conditioned, the intersection problem is reduced to a generalized eigenvalue problem [Man94a]. Algorithms to compute all the eigenvalues are based on QR orthogonal transformations <ref> [GL89] </ref>. They compute all the real and complex eigenvalues. Tracing: Given the starting complex on the boundary of the surface, we use tracing in the complex domain to reach the turning points on every loop. The general tracing step proceeds as follows.
Reference: [Hof89] <author> C.M. Hoffmann. </author> <title> Geometric and Solid Modeling. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, California, </address> <year> 1989. </year>
Reference-contexts: We compare its performance with the earlier approaches as well. 1.1 Previous Work The problem of evaluating all the curve components has been extensively studied in the literature and a number of techniques based on subdivision methods, marching methods, algebraic and symbolic techniques and lattice evaluations <ref> [Hof89, RR92] </ref>. In particular, the problem of determining all the loops of an algebraic curve can be solved robustly using symbolic methods. <p> F (s; t) = (X (s; t); Y (s; t); Z (s; t); W (s; t)) and G (u; v) = (X (u; v); Y (u; v); Z (u; v); W (u; v)) in homogeneous coordinates, implicitize F (s; t) to the form f (x; y; z; w) = 0 <ref> [Sed83, Hof89] </ref> and substitute the parameterization of G (u; v) into f to get an algebraic plane curve of the form f (X (u; v); Y (u; v); Z (u; v); W (u; v)) = 0: The implicit representation of the patch is obtained by eliminating s and t from the
Reference: [Hof90] <author> C.M. Hoffmann. </author> <title> A dimensionality paradigm for surface interrogations. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 7 </volume> <pages> 517-532, </pages> <year> 1990. </year>
Reference-contexts: In the last decade, a number of algorithms have been proposed to test for closed loops for intersection curve of two surfaces [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90, ZS93, FS90] and offset curves and surfaces <ref> [FN90, Hof90, MP93] </ref>. These techniques are based on symbolic methods, evaluation of Gauss maps, subdivision techniques, differential methods and vector field approaches. In practice, they can be slow or restrictive.
Reference: [Hoh91] <author> M.E. Hohmeyer. </author> <title> A surface intersection algorithm based on loop detection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 473-490, </pages> <year> 1991. </year> <note> Special issue on Solid Modeling. </note>
Reference-contexts: The problem of evaluating all the curve components has been extensively studied in the literature. In the last decade, a number of algorithms have been proposed to test for closed loops for intersection curve of two surfaces <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90, ZS93, FS90] </ref> and offset curves and surfaces [FN90, Hof90, MP93]. These techniques are based on symbolic methods, evaluation of Gauss maps, subdivision techniques, differential methods and vector field approaches. In practice, they can be slow or restrictive. <p> In these class of methods, identifying a point on every loop is significantly harder than that on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90] </ref>. However, most of these efforts were targeted towards developing loop detection methods for a special type of curve, the intersection curve of two surfaces. All the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected. <p> Sederberg et. al. [SM88, ZS93] developed an efficient way to bound the normals and tangents of a surface using (bounding cones) and pyramidal surfaces, thereby giving a faster way to achieve the no loop condition. Hohmeyer <ref> [Hoh91] </ref> bounded the Gauss maps using pseudo-normal patches and used an efficient algorithm for linear programming [Sei90] to test the separability criterion. <p> This is continued until all patch pairs fail the test. The number of levels of subdivision depends on how tightly the Gauss maps [EC94] are bounded. For example, application of Hohmeyer's <ref> [Hoh91] </ref> loop detection criterion on the surfaces in Fig. 1 takes 8 levels of subdivision. Furthermore, these algorithms may not work well if the intersection curve is self-intersecting. The algorithms based on Gauss maps are generic. However, they become quite inefficient when applied to other surface interrogations. <p> Let's assume that the viewing direction is along the positive z-axis. Hohmeyer uses a pseudo-normal patch to bound the Gauss map of the patch <ref> [Hoh91] </ref>. The parametric degree of the pseudo-normal patch can be as high as 3m fi 3n. We can pose the silhouette curve as the intersection curve of the Gauss map with the plane z = 0 for orthographic projections. <p> This strategy could be used to speed up the tracing step depending on the robustness requirements of the application. In order to compare our algebraic method with the Gauss map based approaches to loop detection, we implemented Hohmeyer's algorithm (in the context of surface intersection) using pseudo-normal patches <ref> [Hoh91] </ref>. His algorithm performed slightly slower than our algorithm on the example in Fig. 1. Eight levels of subdivision were performed, and most of the time was consumed in the repeated computation of the Gauss map and application of linear programming.
Reference: [KPP90] <author> G.A. Kriezis, P.V. Prakash, and N.M. Patrikalakis. </author> <title> Method for intersecting algebraic surfaces with rational polynomial patches. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 22(10) </volume> <pages> 645-654, </pages> <year> 1990. </year>
Reference-contexts: The problem of evaluating all the curve components has been extensively studied in the literature. In the last decade, a number of algorithms have been proposed to test for closed loops for intersection curve of two surfaces <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90, ZS93, FS90] </ref> and offset curves and surfaces [FN90, Hof90, MP93]. These techniques are based on symbolic methods, evaluation of Gauss maps, subdivision techniques, differential methods and vector field approaches. In practice, they can be slow or restrictive. <p> The biggest drawback in this approach is the lack of robustness. Small loops could easily be missed depending on the frequency with which the curves are evaluated. In the last decade, techniques based on curve tracing have been widely used to evaluate high degree curves <ref> [BFJP87, BHHL88, KPP90, MC91] </ref>. The main idea is to compute at least one point on every component of the curve and use the local geometry of the curve to evaluate successive points. <p> In these class of methods, identifying a point on every loop is significantly harder than that on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90] </ref>. However, most of these efforts were targeted towards developing loop detection methods for a special type of curve, the intersection curve of two surfaces. All the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected. <p> Patriakalakis et. al. <ref> [KPP90] </ref> precomputed the most significant points of the intersection curve between an algebraic surface and a parametric patch to identify the main 3 features of the curve.
Reference: [KPW90] <institution> G.A. Kriezis, N.M. Patrikalakis, and F.E. </institution> <month> Wolter. </month> <title> Topological and differential equation methods for surface intersections. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 24(1) </volume> <pages> 41-55, </pages> <year> 1990. </year>
Reference-contexts: The problem of evaluating all the curve components has been extensively studied in the literature. In the last decade, a number of algorithms have been proposed to test for closed loops for intersection curve of two surfaces <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90, ZS93, FS90] </ref> and offset curves and surfaces [FN90, Hof90, MP93]. These techniques are based on symbolic methods, evaluation of Gauss maps, subdivision techniques, differential methods and vector field approaches. In practice, they can be slow or restrictive. <p> In these class of methods, identifying a point on every loop is significantly harder than that on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90] </ref>. However, most of these efforts were targeted towards developing loop detection methods for a special type of curve, the intersection curve of two surfaces. All the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected.
Reference: [LR80] <author> J.M. Lane and R.F. Riesenfeld. </author> <title> A theoretical development for the computer generation and display of piecewise polynomial surfaces. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 2(1) </volume> <pages> 150-159, </pages> <year> 1980. </year>
Reference-contexts: The approaches based on symbolic methods and algebraic solvers are not practical for such high degree curves. The subdivision based algorithms subdivide the domain up to a user-specified tolerance and evaluate the curves accordingly <ref> [Gei83, LR80, MP93] </ref>. In general, the two components of a curve can be very close and no good methods are known for computing a good tolerance value. As a result, most implementations use a conservative value for the tolerance. The resulting methods can be slow and lead to data proliferation.
Reference: [Man94a] <author> D. Manocha. </author> <title> Computing selected solutions of polynomial equations. </title> <booktitle> In Proceedings of International Symposium on Symbolic and Algebraic Computation, </booktitle> <pages> pages 1-8, </pages> <address> Oxford, England, 1994. </address> <publisher> ACM Press. </publisher>
Reference-contexts: M 0 M 1 M 2 : : : M d1 7 7 7 5 where M i = M 1 d M i . In case M d is singular or ill-conditioned, the intersection problem is reduced to a generalized eigenvalue problem <ref> [Man94a] </ref>. Algorithms to compute all the eigenvalues are based on QR orthogonal transformations [GL89]. They compute all the real and complex eigenvalues. Tracing: Given the starting complex on the boundary of the surface, we use tracing in the complex domain to reach the turning points on every loop.
Reference: [Man94b] <author> D. Manocha. </author> <title> Solving systems of polynomial equations. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 46-55, </pages> <month> March </month> <year> 1994. </year> <note> Special Issue on Solid Modeling. </note>
Reference-contexts: These include Grobner basis [Buc85], resultants and eigenvalue methods <ref> [Man94b] </ref>, homotopy methods [Mor92] or interval arithmetic [Moo79]. However, the complexity of the resulting algebraic systems is quadratic in the degree of the curve.
Reference: [MC91] <author> D. Manocha and J.F. Canny. </author> <title> A new approach for surface intersection. </title> <journal> International Journal of Computational Geometry and Applications, </journal> <volume> 1(4) </volume> <pages> 491-516, </pages> <year> 1991. </year> <journal> Special issue on Solid Modeling. </journal> <volume> 19 </volume>
Reference-contexts: The biggest drawback in this approach is the lack of robustness. Small loops could easily be missed depending on the frequency with which the curves are evaluated. In the last decade, techniques based on curve tracing have been widely used to evaluate high degree curves <ref> [BFJP87, BHHL88, KPP90, MC91] </ref>. The main idea is to compute at least one point on every component of the curve and use the local geometry of the curve to evaluate successive points. <p> We represent the plane curve as an unevaluated matrix determinant <ref> [MC91] </ref>. Matrix Formulation: In this paper, we shall assume that the parametric surface is given in the form of a tensor product Bezier patch.
Reference: [Moo79] <author> R.E. Moore. </author> <title> Methods and applications of interval analysis. </title> <note> SIAM studies in applied mathematics. Siam, </note> <year> 1979. </year>
Reference-contexts: These include Grobner basis [Buc85], resultants and eigenvalue methods [Man94b], homotopy methods [Mor92] or interval arithmetic <ref> [Moo79] </ref>. However, the complexity of the resulting algebraic systems is quadratic in the degree of the curve. The algebraic degree of the intersection curve of two bicubic Bezier patches can be as high as 324 in space and the corresponding curve in the domain can be of degree 108.
Reference: [Mor92] <author> A. P. Morgan. </author> <title> Polynomial continuation and its relationship to the symbolic reduction of polynomial systems. </title> <booktitle> In Symbolic and Numerical Computation for Artificial Intelligence, </booktitle> <pages> pages 23-45, </pages> <year> 1992. </year>
Reference-contexts: These include Grobner basis [Buc85], resultants and eigenvalue methods [Man94b], homotopy methods <ref> [Mor92] </ref> or interval arithmetic [Moo79]. However, the complexity of the resulting algebraic systems is quadratic in the degree of the curve.
Reference: [MP93] <author> T. Maekawa and N. M. Patrikalakis. </author> <title> Computation of singularities and intersections of offsets of planar curves. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 10, </volume> <year> 1993. </year>
Reference-contexts: In the last decade, a number of algorithms have been proposed to test for closed loops for intersection curve of two surfaces [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90, ZS93, FS90] and offset curves and surfaces <ref> [FN90, Hof90, MP93] </ref>. These techniques are based on symbolic methods, evaluation of Gauss maps, subdivision techniques, differential methods and vector field approaches. In practice, they can be slow or restrictive. <p> The approaches based on symbolic methods and algebraic solvers are not practical for such high degree curves. The subdivision based algorithms subdivide the domain up to a user-specified tolerance and evaluate the curves accordingly <ref> [Gei83, LR80, MP93] </ref>. In general, the two components of a curve can be very close and no good methods are known for computing a good tolerance value. As a result, most implementations use a conservative value for the tolerance. The resulting methods can be slow and lead to data proliferation.
Reference: [RR92] <author> A.A.G. Requicha and J.R. Rossignac. </author> <title> Solid modeling and beyond. </title> <journal> IEEE Computer Graphics and Applications, </journal> <pages> pages 31-44, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: We compare its performance with the earlier approaches as well. 1.1 Previous Work The problem of evaluating all the curve components has been extensively studied in the literature and a number of techniques based on subdivision methods, marching methods, algebraic and symbolic techniques and lattice evaluations <ref> [Hof89, RR92] </ref>. In particular, the problem of determining all the loops of an algebraic curve can be solved robustly using symbolic methods.
Reference: [Sed83] <author> T.W. </author> <title> Sederberg. Implicit and Parametric Curves and Surfaces. </title> <type> PhD thesis, </type> <institution> Purdue University, </institution> <year> 1983. </year>
Reference-contexts: F (s; t) = (X (s; t); Y (s; t); Z (s; t); W (s; t)) and G (u; v) = (X (u; v); Y (u; v); Z (u; v); W (u; v)) in homogeneous coordinates, implicitize F (s; t) to the form f (x; y; z; w) = 0 <ref> [Sed83, Hof89] </ref> and substitute the parameterization of G (u; v) into f to get an algebraic plane curve of the form f (X (u; v); Y (u; v); Z (u; v); W (u; v)) = 0: The implicit representation of the patch is obtained by eliminating s and t from the <p> f (X (u; v); Y (u; v); Z (u; v); W (u; v)) = 0: The implicit representation of the patch is obtained by eliminating s and t from the equations xW (s; t) X (s; t) = 0 ... yW (s; t) Y (s; t) = 0 using resultants <ref> [Sed83] </ref>. There are different formulations of resultants for tensor product surfaces and triangular surfaces. It turns out that the resultant of these three equations can always be expressed as the determinant of a matrix [Dix08]. Let us denote that matrix as M (x; y; z; w).
Reference: [Sei90] <author> R. Seidel. </author> <title> Linear programming and convex hulls made easy. </title> <booktitle> In Proc. 6th Annu. ACM Sympos. Comput. Geom., </booktitle> <pages> pages 211-215, </pages> <year> 1990. </year>
Reference-contexts: Hohmeyer [Hoh91] bounded the Gauss maps using pseudo-normal patches and used an efficient algorithm for linear programming <ref> [Sei90] </ref> to test the separability criterion. In these algorithms, if the loop detection criterion is not satisfied, each surface is divided into a pair of sub-patches and the criterion is recursively tested on each pair combination. This is continued until all patch pairs fail the test.
Reference: [SKW85] <author> P. Sinha, E. Klassen, and K.K. Wang. </author> <title> Exploiting topological and geometric properties for selective subdivision. </title> <booktitle> In ACM Symposium on Computationl Geometry, </booktitle> <pages> pages 39-45, </pages> <year> 1985. </year>
Reference-contexts: The problem of evaluating all the curve components has been extensively studied in the literature. In the last decade, a number of algorithms have been proposed to test for closed loops for intersection curve of two surfaces <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90, ZS93, FS90] </ref> and offset curves and surfaces [FN90, Hof90, MP93]. These techniques are based on symbolic methods, evaluation of Gauss maps, subdivision techniques, differential methods and vector field approaches. In practice, they can be slow or restrictive. <p> In these class of methods, identifying a point on every loop is significantly harder than that on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90] </ref>. However, most of these efforts were targeted towards developing loop detection methods for a special type of curve, the intersection curve of two surfaces. All the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected. <p> However, most of these efforts were targeted towards developing loop detection methods for a special type of curve, the intersection curve of two surfaces. All the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected. Sinha et. al. <ref> [SKW85] </ref> had shown that if two (at least C 1 ) surfaces intersect in a closed loop, there exists a normal vector on one surface that is parallel to a normal vector of the other surface.
Reference: [SM88] <author> T.W. Sederberg and R.J. Meyers. </author> <title> Loop detection in surface patch intersections. </title> <booktitle> Computer Aided Geometric Design, </booktitle> <volume> 5 </volume> <pages> 161-171, </pages> <year> 1988. </year>
Reference-contexts: The problem of evaluating all the curve components has been extensively studied in the literature. In the last decade, a number of algorithms have been proposed to test for closed loops for intersection curve of two surfaces <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90, ZS93, FS90] </ref> and offset curves and surfaces [FN90, Hof90, MP93]. These techniques are based on symbolic methods, evaluation of Gauss maps, subdivision techniques, differential methods and vector field approaches. In practice, they can be slow or restrictive. <p> In these class of methods, identifying a point on every loop is significantly harder than that on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90] </ref>. However, most of these efforts were targeted towards developing loop detection methods for a special type of curve, the intersection curve of two surfaces. All the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected. <p> Sinha et. al. [SKW85] had shown that if two (at least C 1 ) surfaces intersect in a closed loop, there exists a normal vector on one surface that is parallel to a normal vector of the other surface. Sederberg et. al. <ref> [THS89, SM88] </ref> strengthened the above work by proving that if two (at least C 1 ) surfaces intersect in a closed loop, there exists a line which is perpendicular to both surfaces (collinear normal vectors), provided the inner product between any normal on one surface and any other normal on the <p> Patriakalakis et. al. [KPP90] precomputed the most significant points of the intersection curve between an algebraic surface and a parametric patch to identify the main 3 features of the curve. Sederberg et. al. <ref> [SM88, ZS93] </ref> developed an efficient way to bound the normals and tangents of a surface using (bounding cones) and pyramidal surfaces, thereby giving a faster way to achieve the no loop condition.
Reference: [THS89] <author> Sederberg T.W, Christiansen H.N, and Katz S. </author> <title> An improved test for closed loops in surface intersections. </title> <booktitle> Computer-Aided Design, </booktitle> <volume> 21(8) </volume> <pages> 505-508, </pages> <year> 1989. </year>
Reference-contexts: The problem of evaluating all the curve components has been extensively studied in the literature. In the last decade, a number of algorithms have been proposed to test for closed loops for intersection curve of two surfaces <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90, ZS93, FS90] </ref> and offset curves and surfaces [FN90, Hof90, MP93]. These techniques are based on symbolic methods, evaluation of Gauss maps, subdivision techniques, differential methods and vector field approaches. In practice, they can be slow or restrictive. <p> In these class of methods, identifying a point on every loop is significantly harder than that on open components. As a result, simultaneously with the development of new ideas for evaluating such curves, number of techniques for loop detection have been proposed <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90] </ref>. However, most of these efforts were targeted towards developing loop detection methods for a special type of curve, the intersection curve of two surfaces. All the loop detection criteria are based on bounds on the Gauss map of the surfaces being intersected. <p> Sinha et. al. [SKW85] had shown that if two (at least C 1 ) surfaces intersect in a closed loop, there exists a normal vector on one surface that is parallel to a normal vector of the other surface. Sederberg et. al. <ref> [THS89, SM88] </ref> strengthened the above work by proving that if two (at least C 1 ) surfaces intersect in a closed loop, there exists a line which is perpendicular to both surfaces (collinear normal vectors), provided the inner product between any normal on one surface and any other normal on the
Reference: [ZS93] <author> A. Zundel and T. </author> <title> Sederberg. Using pyramidal surfaces to detect and isolate surface/surface intersections. </title> <booktitle> In SIAM Conference on Geometric Design, </booktitle> <address> Tempe, AZ, </address> <year> 1993. </year> <month> 20 </month>
Reference-contexts: The problem of evaluating all the curve components has been extensively studied in the literature. In the last decade, a number of algorithms have been proposed to test for closed loops for intersection curve of two surfaces <ref> [SKW85, SM88, THS89, Che89, Hoh91, KPP90, KPW90, ZS93, FS90] </ref> and offset curves and surfaces [FN90, Hof90, MP93]. These techniques are based on symbolic methods, evaluation of Gauss maps, subdivision techniques, differential methods and vector field approaches. In practice, they can be slow or restrictive. <p> Patriakalakis et. al. [KPP90] precomputed the most significant points of the intersection curve between an algebraic surface and a parametric patch to identify the main 3 features of the curve. Sederberg et. al. <ref> [SM88, ZS93] </ref> developed an efficient way to bound the normals and tangents of a surface using (bounding cones) and pyramidal surfaces, thereby giving a faster way to achieve the no loop condition.
References-found: 34

