URL: http://www.cs.nyu.edu/phd_students/wyckoff/tspaces.ps
Refering-URL: http://www.cs.nyu.edu/phd_students/wyckoff/index.html
Root-URL: http://www.cs.nyu.edu
Email: toby@almaden.ibm.com stephen@cs.uoregon.edu wyckoff@bellcore.com  
Title: T Spaces: The Next Wave  
Author: Tobin J. Lehman Stephen W. McLaughry Peter Wyckoff 
Affiliation: IBM Almaden Research Center University of Oregon Bellcore  
Abstract: Millions of small heterogeneous computers are poised to spread into the infrastructure of our society. Though mostly inconspicuous today, disguised as nothing more than PIM (personal information management) computers, these tiny processors will eventually pervade most aspects of civilized life. The one thing holding them back from being everyone's portal to the new electronic society and the access point to an infinite store of information is the lack of a high-quality logical link to the world's network backbone. Enter T Spaces, a network middleware package for the new age of ubiquitous computing. T Spaces is a tuplespace-based network communication buffer with database capabilities that enables communication between applications and devices in a network of heterogeneous computers and operating systems. With T Spaces, it is possible to connect all computers together, which leads the way towards an infinitely large cluster of cooperating machines. In this paper we describe the T Spaces package and explore some distributed applications that use T Spaces. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Sudhir Ahuja, Nicholas Carriero, and David Gel-ernter, Linda and friends, </author> <booktitle> Computer, </booktitle> <pages> pp 26-34, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: By 1985, the term "tuplespace" had replaced "global buffer" in the literature [19], and Gelernter had begun work on porting Linda to different architectures. The next year, Linda evolved into a set of communication primitives and C-Linda appeared in the literature (see <ref> [1] </ref>). Despite many changes in implementation and use, tuplespace has remained essentially unchanged since that time. 2.4 Tuplespace projects For many years, Tuplespace research was restricted to the parallel programming community. Tuplespace systems were available in the form of commercial products and freely available research projects.
Reference: [2] <author> Brian Anderson and Dennis Shasha, </author> <title> Persistent Linda: Linda + transactions + query processing, </title> <booktitle> Workshop on Research Directions in High-Level Parallel Programming Languages, </booktitle> <address> Mont Saint-Michel, France June 1991. </address> <note> Published as Springer-Verlag Lecture Notes in Computer Science 574. </note>
Reference: [3] <institution> Blackboard Technology Group, Inc. </institution> <note> http://www.bbtech.com </note>
Reference-contexts: The blackboard architecture was widely recognized as an interesting and flexible approach to the problem of integrating diverse independent agents into a cooperative system. However, until the early 1990s, few general-purpose blackboard systems were available, and each project that used this approach designed an ad-hoc solution <ref> [11, 3] </ref>.
Reference: [4] <author> David E. Bakken and Richard D. Schlichting, </author> <title> Supporting fault-tolerant parallel programming in Linda, </title> <journal> IEEE Transactions on Parallel and Distributed Systems, </journal> <volume> 6(3), </volume> <pages> pp. 287-302, </pages> <month> March </month> <year> 1995. </year>
Reference-contexts: Finally, the 1990s was also a period in which Linda became a target for fault tolerant systems, such as FT-Linda <ref> [4] </ref>, MOM [6], and Persistent Linda 2.0 (PLinda2.0)[2, 24]. 2.5 Discussion Tuplespace was a hot research area in the 1980s, but since then interest has dwindled. Its rise and fall in popularity was strongly correlated with the rise and fall of research on parallel processing, and parallel hardware in particular.
Reference: [5] <author> Arthur J. Bernstein and David Gelernter, </author> <title> Storing and retrieving the network state: a survey and a proposal, </title> <type> SUNY at Stony Brook Technical Report #80-011, </type> <month> October </month> <year> 1980. </year>
Reference-contexts: This system, the Stony Brook microcomputer Network (SBN), was a parallel computer composed of a set of processors in a torus-shaped communication grid. In order to support distributed computations on the network, a scheme was devised <ref> [5] </ref> to communicate the global state of the system to each node. The supported operations were read and write, which a node could use to find or update information about the network state.
Reference: [6] <author> S. Cannon and D. Dunn, </author> <title> Adding fault-tolerant transaction processing to LINDA, </title> <journal> Journal of Software, Practice and Experience, </journal> <volume> 24(5) </volume> <pages> 449-466, </pages> <year> 1994. </year>
Reference-contexts: Finally, the 1990s was also a period in which Linda became a target for fault tolerant systems, such as FT-Linda [4], MOM <ref> [6] </ref>, and Persistent Linda 2.0 (PLinda2.0)[2, 24]. 2.5 Discussion Tuplespace was a hot research area in the 1980s, but since then interest has dwindled. Its rise and fall in popularity was strongly correlated with the rise and fall of research on parallel processing, and parallel hardware in particular.
Reference: [7] <author> Nicholas Carriero, Eric Freeman, David Gelern-ter, David Kaminsky, </author> <title> Adaptive parallelism and Piranha, </title> <journal> Computer, </journal> <volume> 28(1), </volume> <pages> pp. 40-49, </pages> <month> January </month> <year> 1995. </year>
Reference: [8] <author> Nicholas Carriero and David Gelernter, </author> <title> Linda in context, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 32, No. 4, </volume> <month> April </month> <year> 1989. </year>
Reference: [9] <author> P. Ciancarini, A. Knoche, R. Tolksdorf, F. Vi--tali, PageSpace: </author> <title> an architecture to coordinate distributed applications on the Web, </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> Volume 28, </volume> <pages> Number 7-11, </pages> <month> May </month> <year> 1996. </year>
Reference-contexts: With time, the tu-plespace work expanded from pure parallel applications into the more diverse area of distributed computing. A number of projects, including Laura [30], JavaSpaces [32] and Jada [22] (which was part of Pagespace <ref> [27, 9, 10] </ref>), showed that decoupling clients and servers is easily accomplished using Tuplespace. Then, as Tuplespace implementations in C++ became more common, the opportunity to enhance the matching process became obvious.
Reference: [10] <author> P. Ciancarini, A. Knoche, R. Tolks-dorf, F. Vitali, PageSpace: </author> <title> an architecture to coordinate distributed applications on the web, </title> <address> http://grunge.cs.tu-berlin.de:7500/www5/www350/overview.html </address>
Reference-contexts: With time, the tu-plespace work expanded from pure parallel applications into the more diverse area of distributed computing. A number of projects, including Laura [30], JavaSpaces [32] and Jada [22] (which was part of Pagespace <ref> [27, 9, 10] </ref>), showed that decoupling clients and servers is easily accomplished using Tuplespace. Then, as Tuplespace implementations in C++ became more common, the opportunity to enhance the matching process became obvious.
Reference: [11] <author> Daniel D. Corkill, </author> <title> Blackboard Systems, </title> <journal> AI Expert, </journal> <volume> Vol. 6, no. 9, pp40-47, </volume> <month> September </month> <year> 1991. </year>
Reference-contexts: The blackboard architecture was widely recognized as an interesting and flexible approach to the problem of integrating diverse independent agents into a cooperative system. However, until the early 1990s, few general-purpose blackboard systems were available, and each project that used this approach designed an ad-hoc solution <ref> [11, 3] </ref>.
Reference: [12] <author> A. Douglas, A. Wood, A. Rowstron, </author> <title> Linda implementation revisited, </title> <booktitle> Transputer and Occam Developments, </booktitle> <pages> pp 125-138. </pages> <publisher> IOS Press, </publisher> <year> 1995. </year>
Reference: [13] <author> L. D. Erman, F. Hayes-Rogh, V. R. Lesser, D. R. Reddy, </author> <title> The Hearsay-II speech-understanding system: integrating knowledge to resolve uncertainty, </title> <journal> ACM Computing Surveys, </journal> <volume> Vol. 12, No. 2, </volume> <month> June </month> <year> 1980. </year>
Reference-contexts: Blackboard systems used the idea of a global slate (the blackboard) on which experts from various backgrounds could collaborate to solve difficult problems. The first and most famous of these systems was the Hearsay-II speech-understanding system developed at Carnegie Mellon University <ref> [13] </ref>. The system was structured as a group of diverse and independent agents called knowledge sources, which communicate through the blackboard (a global database).
Reference: [14] <author> Kevin Eustice, Tobin Lehman, Armando Morales, </author> <title> "The Universal Information Appliance", </title> <journal> IBM Systems Journal, </journal> <year> 1999. </year>
Reference-contexts: This model is extremely powerful. By being connected to T Spaces, which is connected to everything else, a device is empowered to contact any other device or service in the entire electronic universe. The architecture details of this system will be available in a future journal article <ref> [14] </ref>. 4.3 Cluster Computing Discussion The Berkeley NOW project [26] is a good example of today's cluster computing a set of machines connected via a high-speed switched network.
Reference: [15] <author> Daniel Ford, Qi Lu, Tobin Lehman, Matthias Eich-staedt, Peter Lazarus, John Thomas, </author> <title> Grand Central Station: </title> <note> Information From Anywhere To Anywhere, IBM Research Technical Report, 1997. [16] http://www.fryselectronics.com </note>
Reference-contexts: Two main efforts were undertaken to build substantial infrastructure on top of T Spaces. The first effort was performed by a sibling group at the IBM Almaden Research Center, the Grand Central Station (GCS) project <ref> [15] </ref>. The GCS group used T Spaces for two types of communication duties: client data delivery and workstation coordinator for collaborative web crawling. The second effort is being performed by the T Spaces team.
Reference: [17] <author> David Gelernter, </author> <title> An integrated microprocessor network for experiments in distributed programming, </title> <type> SUNY at Stony Brook Technical Report #81-024, </type> <month> May </month> <year> 1981. </year>
Reference-contexts: was a useful and constructive one, the global communication buffer didn't catch on as a general distributed programming tool. 2.3 The Original Tuplespace Although not mentioned in the literature by name until 1985, Tuplespace originated from a system developed at SUNY Stony Brook in the late '70s and early '80s <ref> [17] </ref>. This system, the Stony Brook microcomputer Network (SBN), was a parallel computer composed of a set of processors in a torus-shaped communication grid. In order to support distributed computations on the network, a scheme was devised [5] to communicate the global state of the system to each node.
Reference: [18] <author> David Gelernter and Arthur J. </author> <title> Bernstein Distributed communication via global buffer, </title> <booktitle> Proceedings of the ACM Symposium on Principles of Distributed Computing, </booktitle> <pages> pp. 10-18, </pages> <month> August </month> <year> 1982. </year>
Reference-contexts: Linda also contained some novel parallel language constructs which later evolved into the study of "symmetric" programming languages but which will not be discussed here. As Linda evolved, a non-destructive read primitive was added (see <ref> [18] </ref>), and the concept of associative addressing by structured name was introduced. By 1985, the term "tuplespace" had replaced "global buffer" in the literature [19], and Gelernter had begun work on porting Linda to different architectures.
Reference: [19] <author> David Gelernter, </author> <title> Generative communication in Linda, </title> <journal> ACM TOPLAS, </journal> <volume> Vol. 7, No. 1, </volume> <month> January </month> <year> 1985. </year>
Reference-contexts: As Linda evolved, a non-destructive read primitive was added (see [18]), and the concept of associative addressing by structured name was introduced. By 1985, the term "tuplespace" had replaced "global buffer" in the literature <ref> [19] </ref>, and Gelernter had begun work on porting Linda to different architectures. The next year, Linda evolved into a set of communication primitives and C-Linda appeared in the literature (see [1]).
Reference: [20] <author> David Gelernter and Nicholas Carriero, </author> <title> Coordination languages and their significance, </title> <journal> Communications of the ACM, </journal> <volume> Vol. 35, No. 2, </volume> <month> February </month> <year> 1992. </year>
Reference: [21] <author> Y. Gutfreund, J. Nicol, R. Sasnett, V. Phuah, </author> <title> WWWinda: An Orchestration Service for WWW Browsers and Accessories, </title> <booktitle> 2nd Int. World Wide Web Conference, </booktitle> <year> 1994. </year> <note> [22] http://www.cs.unibo.it/ rossi/jada/ </note>
Reference: [23] <author> Keld K. Jensen and Gorm E. Riksted, Linda, </author> <title> a Distributed Programming Paradigm, </title> <type> Master's Thesis, </type> <institution> Department of Mathematics & Computer Science, University of Aalborg, Denmark, </institution> <month> June </month> <year> 1989. </year>
Reference: [24] <author> K. Jeong, S. Talla, D. Shasha, P. Wyckoff, </author> <title> An approach to fault tolerant parallel processing on intermittently idle, heterogeneous workstations, </title> <booktitle> Proceedings of The Twenty-Seventh International Symposium on Fault-Tolerant Computing (FTCS'97), </booktitle> <pages> pp. 11-20, </pages> <publisher> IEEE, </publisher> <month> June </month> <year> 1997. </year>
Reference: [25] <author> Thilo Kielmann, </author> <title> Object-Oriented Distributed Programming with Objective Linda, </title> <booktitle> Proceeding of the First International Workshop on High Speed Networks and Open Distributed Platforms, </booktitle> <month> June </month> <year> 1995. </year> <note> [26] http://now.cs.berkeley.edu/ [27] http://flp.cs.tu-berlin.de/ pagespc/ </note>
Reference-contexts: Then, as Tuplespace implementations in C++ became more common, the opportunity to enhance the matching process became obvious. Object Space [28] and Objective Linda <ref> [25] </ref> added the basic ideas of object orientation to the standard Linda model. At the same time, other researchers investigated combinations of tuplespace and database systems. Although the similarities between Tuplespace and databases has long been recognized, surprisingly few projects have explored the connections between the two subjects.
Reference: [28] <author> Andreas Polze, </author> <title> Using the Object Space: A Distributed Parallel Make, </title> <booktitle> 4th IEEE Workshop on Future Trends of Distributed Computing Systems, </booktitle> <pages> pp. 234-239(6), </pages> <address> Lisbon, </address> <month> September </month> <year> 1993. </year>
Reference-contexts: Then, as Tuplespace implementations in C++ became more common, the opportunity to enhance the matching process became obvious. Object Space <ref> [28] </ref> and Objective Linda [25] added the basic ideas of object orientation to the standard Linda model. At the same time, other researchers investigated combinations of tuplespace and database systems.
Reference: [29] <author> W. Schoenfeldinger, </author> <title> WWW Meets Linda: Linda for Global WWW-Based Transaction Processing Systems, World Wide Web Journal, </title> <year> 1995. </year>
Reference-contexts: Perl-Linda did not extend Linda with database operations per se, but did combine Linda primitives and the Perl scripting language, creating a system for web developers who need a simple data repository <ref> [29] </ref>. Finally, the 1990s was also a period in which Linda became a target for fault tolerant systems, such as FT-Linda [4], MOM [6], and Persistent Linda 2.0 (PLinda2.0)[2, 24]. 2.5 Discussion Tuplespace was a hot research area in the 1980s, but since then interest has dwindled.
Reference: [30] <author> Robert Tolksdorf, Laura: </author> <title> A Coordination Language for Open Distributed Systems, </title> <booktitle> 13th IEEE International Conference on Distributed Computing Systems ICDCS 93 , pp 39-46, </booktitle> <year> 1993. </year>
Reference-contexts: With time, the tu-plespace work expanded from pure parallel applications into the more diverse area of distributed computing. A number of projects, including Laura <ref> [30] </ref>, JavaSpaces [32] and Jada [22] (which was part of Pagespace [27, 9, 10]), showed that decoupling clients and servers is easily accomplished using Tuplespace. Then, as Tuplespace implementations in C++ became more common, the opportunity to enhance the matching process became obvious.
Reference: [31] <author> Antony Rowstron and Alan Wood, </author> <title> An efficient distributed tuple space implementation for networks of workstations, </title> <address> Euro-Par'96, </address> <year> 1996. </year>
Reference: [32] <author> SUN Microsystems, JavaSpace Specification, </author> <year> 1997. </year> <note> http://java.sun.com/products/javaspaces </note>
Reference-contexts: With time, the tu-plespace work expanded from pure parallel applications into the more diverse area of distributed computing. A number of projects, including Laura [30], JavaSpaces <ref> [32] </ref> and Jada [22] (which was part of Pagespace [27, 9, 10]), showed that decoupling clients and servers is easily accomplished using Tuplespace. Then, as Tuplespace implementations in C++ became more common, the opportunity to enhance the matching process became obvious.
Reference: [33] <author> Shang-Hua Teng, Qi Lu, Matthias Eichstaedt, Daniel Ford, Toby Lehman, </author> <title> "Collaborative Web Crawling: Information Gathering/Processing over Internet," </title> <booktitle> The 1999 Hawaii International Conference on Systems Sciences. </booktitle>
Reference: [34] <author> Peter Wyckoff, Stephen McLaughry, Tobin Lehman. </author> <title> "A History of TupleSpace Systems", </title> <type> IBM Research Technical Report. </type> <year> 1998 </year>
Reference-contexts: The most famous tuplespace project, Linda, was trademarked by Scientific Computing Associates, and marketed to large financial enterprises as the simple solution to their parallel computing needs. However, there were many other tuplespace systems that were created for parallel computer. Since we describe them in a previous paper <ref> [34] </ref>, we will simply list them here: POSYBL, Glenda, P4-Linda, The University of York Linda implementations, Javelin, Piranha, and Linder. With time, the tu-plespace work expanded from pure parallel applications into the more diverse area of distributed computing.
Reference: [35] <author> Peter Wyckoff, Stephen McLaughry, Tobin Lehman, Daniel Ford, </author> <title> "T Spaces", </title> <journal> IBM Systems Journal, </journal> <month> August </month> <year> 1998. </year> <pages> pp 454-474 </pages>
Reference-contexts: Section 3 presents an overview of the function of T Spaces. Note that we do not discuss the internal implementation of T Spaces, as that is covered in detail in the T Spaces architecture paper <ref> [35] </ref>. Section 4 shows some applications built on top of T Spaces, namely the network and mobile computing applications and the cluster of web crawlers. <p> It is also possible to specify a range of values to be found in the index. More detailed examples of these and other tuplespace enhancements, including a description of the T Spaces event mechanism, can be found in the T Spaces architecture paper <ref> [35] </ref>. 3.3 Database dependability T Spaces employs a real data management layer, with functions similar to heavy-weight relational database systems, to manage its data. T Space operations are performed in a transactional context, which ensures the integrity of the data.
References-found: 31

