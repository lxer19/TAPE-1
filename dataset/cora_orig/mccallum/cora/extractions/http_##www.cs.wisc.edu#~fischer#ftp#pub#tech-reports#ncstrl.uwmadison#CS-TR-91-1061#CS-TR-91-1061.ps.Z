URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-91-1061/CS-TR-91-1061.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/CS-TR-91-1061/
Root-URL: http://www.cs.wisc.edu
Title: Polynomial Root-Finding Analysis and Computational Investigation of a Parallel Algorithm  
Author: B. Narendran P. Tiwari 
Address: Madison, Wisconsin-53706.  
Affiliation: Computer Sciences Department University of Wisconsin-Madison  
Abstract: A practical version of a parallel algorithm that approximates the roots of a polynomial whose roots are all real is developed using the ideas of an existing NC algorithm. An new elementary proof of correctness is provided and the complexity of the algorithm is analyzed. A particular implementation of the algorithm that performs well in practice is described and its run-time behaviour is compared with the analytical predictions.
Abstract-found: 1
Intro-found: 1
Reference: [AHU74] <author> A. V. Aho, J. E. Hopcroft, and J. D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA., </address> <year> 1974. </year>
Reference-contexts: polynomial F i (x). * F 0 (x) = p 0 (x); F 1 (x) = p 0 * F 2 (x) = Q 1 (x)F 1 (x) c 2 1 This is similar to the remainder sequence computed by the Euclidean algorithm to compute polynomial gcds (see, for instance <ref> [AHU74] </ref>. 3 * F i+1 (x) is a constant multiple of the negative of the remainder poly- nomial when c 2 i F i1 (x) is divided by F i (x) i.e., F i+1 (x) = i F i1 (x) i1 ; where deg (F i+1 ) &lt; deg (F i
Reference: [BBCO91] <author> C. Batut, D. Bernardi, H. Cohen, and M. Olivier. </author> <note> User's Guide to PARI-GP, </note> <month> February </month> <year> 1991. </year>
Reference-contexts: However, these estimates may still be used to provide weak upper bounds on the run-times. We also compared the one-processor run-times of our implementation with the performance of a sequential root-finding algorithm in the PARI multi-precision package <ref> [BBCO91] </ref>.
Reference: [BT90] <author> M. Ben-Or and P. Tiwari. </author> <title> Simple Algorithms for Approximating All Roots of a Polynomial with Real Roots. </title> <journal> Journal of Complexity, </journal> <volume> 6 </volume> <pages> 417-442, </pages> <year> 1990. </year>
Reference-contexts: In Section 2, we describe the algorithm and provide an elementary proof of correctness. Section 3 discusses some of the implementation details. Section 4 analyzes the time complexity of the implementation and Section 5 presents the actual running times obtained from the implementation. 2 The Algorithm Ben-Or and Tiwari <ref> [BT90] </ref> describe an NC algorithm for the root approximation problem being considered. Our implementation is based on the ideas used in this algorithm. We have not, however, implemented the NC version, which, although theoretically efficient, is impractical due to the overheads associated with its fine-grained parallelism. <p> We will call any pair (p 1 (x); p 2 (x)) that 2 has this property an interleaving pair for p 0 (x). If p 2 (x) is of degree zero, then p 1 (x) is said to interleave p 0 (x). Ben-Or and Tiwari <ref> [BT90] </ref> define and describe the computation of a class of possible choices of p 1 (x) and p 2 (x) that satisfy these properties. <p> The method of bisection converges to the root by performing a binary search on the interval. Newton's method can be guaranteed to converge quadratically if we start close enough to the root. Other methods are described in <ref> [BT90] </ref>. The two steps described above can be applied recursively to compute the roots of the two new polynomials p 1 (x) and p 2 (x). This recursive process gives rise to a binary tree whose nodes correspond to polynomials with the root corresponding to p 0 (x). <p> If ff satisfies j~ ffj 5n 2 , then Newton's iteration, starting at ff, converges quadratically from the start. In view of Lemma 2.1, we follow the strategy outlined in <ref> [BT90] </ref> to determine a subinterval (^a; ^ b) of (a; b) that contains the desired root ~, and such that there is no other root of p (x) within 10 (~ ^a)n 2 of ^a or within 10 (~ ^ b)n 2 of ^ b. <p> Using this fact, we have the following for i 2 : kF i (x)k (i 1)m + i (m + log n) + (2i 1) log (2i 1) kQ i (x)k kF i (x)k + kF i1 (x)k + 1 It can further be shown (see [Col67], <ref> [BT90] </ref>) that the coefficients of A i (x) and B i (x) are similarly bounded by determinants of (2i 2) fi (2i 2) matrices whose first i2 rows contain as entries the coefficients of F 0 (x) and whose last i rows contain as entries the coefficients of F 1 (x). <p> d) evaluations of the polynomial, where I (X; d) = 2 ~ 2 where the three terms in Eq. (38) correspond to the number of evaluations performed in each of the three phases of the algorithm : "double exponential sieve", binary search and Newton's method respectively (see Section 2.2 and <ref> [BT90] </ref>).
Reference: [Col67] <author> G. E. Collins. </author> <title> Subresultants and Reduced Remainder Sequences. </title> <journal> Journal of the Association for Computing Machinery, </journal> <volume> 14 </volume> <pages> 128-142, </pages> <year> 1967. </year>
Reference-contexts: The algorithm used to solve the interval problems is described in Section 2.2. 2.1 Computing the tree polynomials The standard remainder sequence corresponding to the polynomial p 0 (x) is the sequence F 0 (x); F 1 (x); . . .; F s (x) defined as follows (see, for instance <ref> [Col67] </ref>). 1 In the following definition, c i is the leading coefficient of the polynomial F i (x). * F 0 (x) = p 0 (x); F 1 (x) = p 0 * F 2 (x) = Q 1 (x)F 1 (x) c 2 1 This is similar to the remainder <p> If the original polynomial p 0 (x) had distinct roots, then it is easily verified that each Q i (x) is a linear polynomial, s = n, and that the degree of F i (x) is n i (see Theorem 1, Appendix A). Further, <ref> [Col67] </ref> shows that all the F i (x)'s and Q i (x)'s have integer coefficients. <p> For i 1, we have the following bounds. kF 0 (x)k = m; 0 (x)k m + log n; kQ 1 (x)k 2m + log n: For i 2, we use a result of Collins <ref> [Col67] </ref> that bounds the sizes of the coefficients of F i (x) by the determinants of certain (2i 1) fi (2i 1) matrices, whose first i 1 rows contain as entries the coefficients of F 0 (x) and whose last i rows contain as entries the coefficients of F 1 (x). <p> Using this fact, we have the following for i 2 : kF i (x)k (i 1)m + i (m + log n) + (2i 1) log (2i 1) kQ i (x)k kF i (x)k + kF i1 (x)k + 1 It can further be shown (see <ref> [Col67] </ref>, [BT90]) that the coefficients of A i (x) and B i (x) are similarly bounded by determinants of (2i 2) fi (2i 2) matrices whose first i2 rows contain as entries the coefficients of F 0 (x) and whose last i rows contain as entries the coefficients of F 1
Reference: [Hou70] <author> A. S. </author> <title> Householder. The Numerical Treatment of Single Nonlinear Equation. </title> <publisher> McGraw-Hill, </publisher> <address> New York, </address> <year> 1970. </year>
Reference-contexts: If the coefficients of the given polynomial F 0 (x) are at most m bit integers, it is well known that all its roots (and consequently the roots of all interleaving polynomials in the tree) lie in the interval [2 m ; 2 m ] (see, for instance <ref> [Hou70] </ref>). In the rest of this section, we restrict ourselves to the following situation. P 0 (x) is a polynomial of degree n and P 1 (x) and P 2 (x) are a pair of interleaving polynomials for P 0 (x).
Reference: [Ren87] <author> J. Renegar. </author> <title> On the Worst-Case Arithmetic Complexity of Approximating Zeros of Polynomials. </title> <type> Manuscript, </type> <year> 1987. </year> <month> 33 </month>
Reference-contexts: We will call any such starting point a good one. Our algorithm has two phases; the first phase serves to narrow the given interval appropriately, so that any point in the resulting interval is a good starting point. The following Lemma due to Renegar <ref> [Ren87] </ref> makes precise the notion of being "sufficiently close" to the root ~. Lemma 2.1 Let p (x) be a polynomial of degree n, p (~) = 0, and let be the smallest of the distances from ~ to the other roots of p (x).
References-found: 6

