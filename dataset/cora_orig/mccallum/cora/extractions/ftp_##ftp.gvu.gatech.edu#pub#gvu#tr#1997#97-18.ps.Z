URL: ftp://ftp.gvu.gatech.edu/pub/gvu/tr/1997/97-18.ps.Z
Refering-URL: http://www.cs.gatech.edu/fce/cyberdesk/index.html
Root-URL: 
Email: fabowd,anindg@cc.gatech.edu  amw@cs.bham.ac.uk  
Title: Applying Dynamic Integration as a Software Infrastructure for Context-Aware Computing  
Author: Gregory D. Abowd Anind Dey Andy M. Wood 
Keyword: ubiquitous computing, mobile computing, context-aware computing, software integration, personal information management  
Address: Atlanta, GA 30332-0280 USA  Edgbaston, Birmingham, B15 2TT UK  
Affiliation: College of Computing GVU Center Georgia Institute of Technology  School of Computer Science University of Birmingham  
Abstract: Much of the software engineering literature examines techniques and practices that help us to build systems that we have been building for many years already. While there is merit in seeking ways to raise the floor of software engineering practice, we also have an obligation to research software design issues that push the envelope of existing computing technology. One of the features of future interactive computing environments is that they will provide context-aware services that leverage off of knowledge of a person's physical state and surrounding environment. With the proliferation of network-based computing services that are a characteristic of an emerging ubiquitous computing society, there is a real issue with providing a software infrastructure that will support context-aware services. In this paper, we examine software engineering work on component integration and introduce a prototype infrastructure that provides a dynamic and scalable context-aware computing environment. We will describe how we have applied this component infrastructure to build a futuristic personal information management system involving automatic cooperation between desktop, network and mobile services. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. D. Abowd. </author> <title> Ubiquitous computing: Research themes and open issues from an applications perspective. </title> <type> Technical Report GIT-GVU 96-24, </type> <institution> GVU Center, Georgia Institute of Technology, </institution> <month> October </month> <year> 1996. </year>
Reference-contexts: Software engineering needs to become once again a leading indicator for the rapid pace of technology change. Interest in ubiquitous computing has risen over the past few years [25, 26, 3] and one of the emerging research themes is context-aware computing <ref> [1] </ref>. In a computing environment with universal access to information anywhere and at any time, the end user will need leverage to help tame the deluge of technology.
Reference: [2] <author> G. D. Abowd, C. G. Atkeson, J. Hong, S. Long, R. Kooper, and M. Pinkerton. Cyberguide: </author> <title> A mobile context-aware tour guide. </title> <journal> ACM Wireless Networks, </journal> <volume> 3, </volume> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Picard's work on affective computing [16] suggests a similar objective, only through the use bio-electric signals, coupled with theories on emotion and cognition. A significant body of work in mobile computing takes advantage of the most significantly changing context of a mobile user |location <ref> [2, 12, 24, 6] </ref>. The initial ubiquitous computing research at PARC provided location-aware services for a handheld device called the PARCTab [24], and resulted in a generalized programming framework for describing location-aware objects [20].
Reference: [3] <author> G. D. Abowd and B. Schilit. Ubiquitous-computing: </author> <title> The impact on future interaction paradigms and hci research. </title> <booktitle> CHI'97 workshop, </booktitle> <month> March </month> <year> 1997. </year> <note> Materials for the workshop are available via http://www.cc.gatech .edu/fac/Gregory.Abowd/ubi-workshop/. </note>
Reference-contexts: Software engineering needs to become once again a leading indicator for the rapid pace of technology change. Interest in ubiquitous computing has risen over the past few years <ref> [25, 26, 3] </ref> and one of the emerging research themes is context-aware computing [1]. In a computing environment with universal access to information anywhere and at any time, the end user will need leverage to help tame the deluge of technology.
Reference: [4] <institution> Apple Enterprise Software. </institution> <note> Topics in openstep programming. Available at http:www.next.com/Pubs /Documents/OPENSTEP/ProgrammingTopics/, </note> <year> 1997. </year>
Reference-contexts: We depend on the use of component software accessible across a network connection, similar to CORBA (Common Object Request Broker Architecture) [14], Microsoft's Common Object Model (COM) and Object Linking and Embedding (OLE) [13]. OpenStep <ref> [4] </ref> and others. A main distinction in our work is the requirement for a dynamic registry that records the presence of interacting components. At a higher semantic level, the agent research community has also spawned efforts to provide for integration of large-scale software systems [10].
Reference: [5] <institution> Apple Research Laboratories. Apple data detectors homepage. </institution> <note> Available at http://www.research.apple .com/research/tech/AppleDataDetectors/, </note> <year> 1997. </year>
Reference-contexts: Using informational context, such as what is shown on a user's graphical display (as depicted in the scenario of Section 2.1) has also been the subject of work done at Apple <ref> [5] </ref> and Intel [15]. This work is the most closely related work to our own and we will discuss it further in the next section on software integration. 3.2 Software Integration The general topic of software integration is well researched. <p> There are two systems in particular that provide func tionality in the domain of personal information manage-ment similar to the scenario described in Section 2.1. They are Intel's Selection Recognition Agent [15] and Apple Research Lab's Data Detectors <ref> [5] </ref>. Intel's Selection Recognition Agent uses a fixed data type-action pair, allowing for only a static set of actions for each data type recognized. The actions performed by the agent are limited to launching an application.
Reference: [6] <author> A. Asthana, M. Cravatts, and P. Krzyzanouski. </author> <title> An indoor wireless system for personalized shopping assistance. </title> <editor> In L.-F. Cabrera and M. Sattyanarayanan, editors, </editor> <booktitle> Workshop on Mobile Computing Systems and Applications, </booktitle> <pages> pages 69-74. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> December </month> <year> 1994. </year>
Reference-contexts: Picard's work on affective computing [16] suggests a similar objective, only through the use bio-electric signals, coupled with theories on emotion and cognition. A significant body of work in mobile computing takes advantage of the most significantly changing context of a mobile user |location <ref> [2, 12, 24, 6] </ref>. The initial ubiquitous computing research at PARC provided location-aware services for a handheld device called the PARCTab [24], and resulted in a generalized programming framework for describing location-aware objects [20].
Reference: [7] <author> D. G. Bobrow, L. G. DeMichiel, R. P. Gabriel, S. E. Keene, G. Kiczales, and D. A. Moon. </author> <title> Common lisp object system specification x3j13. </title> <journal> In SIGPLAN Notices 23 (special issue), </journal> <month> September </month> <year> 1988. </year>
Reference-contexts: This provides for the kind of flexible coordination or mediation between different components. We can compare our integration infrastructure with some other well-known systems, such as UNIX pipes, Field [18, 19], Smalltalk-80 MVC [11], Common Lisp Object System (CLOS) <ref> [7] </ref>. UNIX pipes act as mediators that integrate UNIX programs. They are limited to reading and writing streams of data, stream outputs can only be input to one stream, and they use only a single event.
Reference: [8] <author> A. Dey, G. D. Abowd, and A. Wood. Cyberdesk: </author> <title> A framework for providing self-integrating context-aware services. </title> <booktitle> In Proceedings of the 1998 Intelligent User Interfaces Conference | IUI'98, </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: Further information on CyberDesk is provided later in this paper and other publications <ref> [28, 8] </ref>. 1 The following scenario is illustrated in Figure 1. As seen in the figure, a user is checking e-mail, and reads a message from a friend about some interesting research. The user decides to find out more and highlights the name of the person mentioned in the message.
Reference: [9] <author> I. Essa and A. Pentland. </author> <title> Facial expression recognition using a dynamic model and motion energy. </title> <booktitle> In Proceedings of the International Conference on Computer Vision, </booktitle> <pages> pages 360-367. </pages> <publisher> IEEE Computer Society, </publisher> <address> Cam-bridge, MA, </address> <year> 1995. </year>
Reference-contexts: Computer vision researchers have used computational perception techniques in an attempt to match actual facial expressions with some prescribed expressions indicating the state of the human (e.g., smiling, frowning, surprised, etc.) <ref> [9] </ref>. Though this work does not claim to be a way to predict human emotions, there is a clear suggestion of how this and related perception research can improve the quality of contextual information that can be gathered.
Reference: [10] <author> T. Finin, R. Fritzson, and D. McKay. </author> <title> A language and protocol to support intelligent agent interoperability. </title> <booktitle> In Proceedings of the CE & CALS Washington'92 Conference, </booktitle> <year> 1992. </year>
Reference-contexts: OpenStep [4] and others. A main distinction in our work is the requirement for a dynamic registry that records the presence of interacting components. At a higher semantic level, the agent research community has also spawned efforts to provide for integration of large-scale software systems <ref> [10] </ref>. Such efforts have been sponsored by the DARPA Knowledge Sharing Effort and have produced specification languages such as the Knowledge Query and Manipulation Language (KQML) and the Knowledge Interchange Format (KIF).
Reference: [11] <author> G. E. Krasner and S. T. Pope. </author> <title> A cookbook for using the model-view-controler user interface paradigm in smalltalk-80. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 1(3) </volume> <pages> 26-49, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Such mediation consists of two basic steps: registration of components and handling of events. This provides for the kind of flexible coordination or mediation between different components. We can compare our integration infrastructure with some other well-known systems, such as UNIX pipes, Field [18, 19], Smalltalk-80 MVC <ref> [11] </ref>, Common Lisp Object System (CLOS) [7]. UNIX pipes act as mediators that integrate UNIX programs. They are limited to reading and writing streams of data, stream outputs can only be input to one stream, and they use only a single event.
Reference: [12] <author> A. C. Long, Jr., S. Narayanaswamy, A. Burstein, R. Han, K. Lutz, B. Richards, S. Sheng, R. W. Broder-sen, and J. Rabaey. </author> <title> A prototype user interface for a mobile multimedia terminal. </title> <booktitle> In Proceedings of the 1995 conference on Human Factors in Computing Systems | CHI'95, </booktitle> <year> 1995. </year> <title> Interactive experience demonstration. </title>
Reference-contexts: Picard's work on affective computing [16] suggests a similar objective, only through the use bio-electric signals, coupled with theories on emotion and cognition. A significant body of work in mobile computing takes advantage of the most significantly changing context of a mobile user |location <ref> [2, 12, 24, 6] </ref>. The initial ubiquitous computing research at PARC provided location-aware services for a handheld device called the PARCTab [24], and resulted in a generalized programming framework for describing location-aware objects [20].
Reference: [13] <institution> Microsoft Corporation. Ole development homepage. </institution> <note> Available at http://www.microsoft.com/oledev, 1997. </note>
Reference-contexts: However, their system allows only one-to-one relationships between components and requires explicit registration of event-action pairs. We depend on the use of component software accessible across a network connection, similar to CORBA (Common Object Request Broker Architecture) [14], Microsoft's Common Object Model (COM) and Object Linking and Embedding (OLE) <ref> [13] </ref>. OpenStep [4] and others. A main distinction in our work is the requirement for a dynamic registry that records the presence of interacting components. At a higher semantic level, the agent research community has also spawned efforts to provide for integration of large-scale software systems [10].
Reference: [14] <author> OMG. </author> <title> The Common Object Request Broker: Architecture and Specification V2.0. Object Management Group, </title> <publisher> Inc., </publisher> <address> formal/97-02-25 edition, </address> <month> July </month> <year> 1996. </year>
Reference-contexts: However, their system allows only one-to-one relationships between components and requires explicit registration of event-action pairs. We depend on the use of component software accessible across a network connection, similar to CORBA (Common Object Request Broker Architecture) <ref> [14] </ref>, Microsoft's Common Object Model (COM) and Object Linking and Embedding (OLE) [13]. OpenStep [4] and others. A main distinction in our work is the requirement for a dynamic registry that records the presence of interacting components.
Reference: [15] <author> M. Pandit and S. Kalbag. </author> <title> The selection recognition agent: Instant access to relevant information and operations. </title> <booktitle> In Proceedings of Intelligent User Interfaces '97. </booktitle> <publisher> ACM Press, </publisher> <year> 1997. </year>
Reference-contexts: Using informational context, such as what is shown on a user's graphical display (as depicted in the scenario of Section 2.1) has also been the subject of work done at Apple [5] and Intel <ref> [15] </ref>. This work is the most closely related work to our own and we will discuss it further in the next section on software integration. 3.2 Software Integration The general topic of software integration is well researched. <p> There are two systems in particular that provide func tionality in the domain of personal information manage-ment similar to the scenario described in Section 2.1. They are Intel's Selection Recognition Agent <ref> [15] </ref> and Apple Research Lab's Data Detectors [5]. Intel's Selection Recognition Agent uses a fixed data type-action pair, allowing for only a static set of actions for each data type recognized. The actions performed by the agent are limited to launching an application.
Reference: [16] <author> R. </author> <title> Picard. Affective computing. </title> <type> Technical Report 321, </type> <institution> MIT Media Lab, Perceptual Computing, </institution> <month> November </month> <year> 1995. </year> <note> Available as MIT Media Lab Perceptual Computing Techreport # 362 from http://vismod.www.media.mit.edu/vismod/. </note>
Reference-contexts: Though this work does not claim to be a way to predict human emotions, there is a clear suggestion of how this and related perception research can improve the quality of contextual information that can be gathered. Picard's work on affective computing <ref> [16] </ref> suggests a similar objective, only through the use bio-electric signals, coupled with theories on emotion and cognition. A significant body of work in mobile computing takes advantage of the most significantly changing context of a mobile user |location [2, 12, 24, 6].
Reference: [17] <author> M. Pinkerton. </author> <title> Ubiquitous computing: Extending access to mobile data. </title> <type> Technical Report GIT-GVU-97-09, </type> <institution> GVU Center, Georgia Institute of Technology, </institution> <month> June </month> <year> 1997. </year> <type> Master's thesis. </type>
Reference-contexts: We emphasize some important features of this simple scenario. The services being accessed can reside anywhere |on the user's desktop machine, on the Internet, or even on a mobile device such as a personal digital assistant (PDA) that is connected via wireless network <ref> [17] </ref>. Also, the user does not need to know what services 1 We are limited in this paper to describing only a few possible scenarios. To aid the reader, we have provided a Web-accessible location for experiencing more of the behavior of CyberDesk.
Reference: [18] <author> S. P. Reiss. </author> <title> Integration mechanisms in the FIELD environment. </title> <type> Technical Report CS-88-18, </type> <institution> Brown University, </institution> <month> October </month> <year> 1988. </year>
Reference-contexts: Such mediation consists of two basic steps: registration of components and handling of events. This provides for the kind of flexible coordination or mediation between different components. We can compare our integration infrastructure with some other well-known systems, such as UNIX pipes, Field <ref> [18, 19] </ref>, Smalltalk-80 MVC [11], Common Lisp Object System (CLOS) [7]. UNIX pipes act as mediators that integrate UNIX programs. They are limited to reading and writing streams of data, stream outputs can only be input to one stream, and they use only a single event.
Reference: [19] <author> S. P. Reiss. </author> <title> Connecting tools using message passing in the FIELD environment. </title> <journal> IEEE Software, </journal> <volume> 7(4) </volume> <pages> 57-66, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: Such mediation consists of two basic steps: registration of components and handling of events. This provides for the kind of flexible coordination or mediation between different components. We can compare our integration infrastructure with some other well-known systems, such as UNIX pipes, Field <ref> [18, 19] </ref>, Smalltalk-80 MVC [11], Common Lisp Object System (CLOS) [7]. UNIX pipes act as mediators that integrate UNIX programs. They are limited to reading and writing streams of data, stream outputs can only be input to one stream, and they use only a single event.
Reference: [20] <author> W. N. Schilit. </author> <title> System architecture for context-aware mobile computing. </title> <type> PhD thesis, </type> <institution> Columbia University, </institution> <year> 1995. </year>
Reference-contexts: The initial ubiquitous computing research at PARC provided location-aware services for a handheld device called the PARCTab [24], and resulted in a generalized programming framework for describing location-aware objects <ref> [20] </ref>. Using informational context, such as what is shown on a user's graphical display (as depicted in the scenario of Section 2.1) has also been the subject of work done at Apple [5] and Intel [15].
Reference: [21] <author> M. Schneider-Hufschmidt, T. Kuhme, and U. Mali-nowski, </author> <title> editors. Adaptive User Interfaces: </title> <booktitle> Principles and Practice. </booktitle> <publisher> North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: The user interface community also has a sub-area of research called adaptive systems, which typically involves building a model of user behavior that can be codified and used as a building block in a software system to provide services such as help or self-adapting menus <ref> [21] </ref>. Computer vision researchers have used computational perception techniques in an attempt to match actual facial expressions with some prescribed expressions indicating the state of the human (e.g., smiling, frowning, surprised, etc.) [9].
Reference: [22] <author> K. Sullivan and D. Notkin. </author> <title> Reconciling environment integration and component independence. </title> <booktitle> In Proceedings of SIGSOFT 90: Fourth Symposium on Software Development Environments. </booktitle> <publisher> ACM Press, </publisher> <year> 1990. </year>
Reference-contexts: CLOS uses wrappers to access data and methods within objects, as we do, but it limits the action a component can perform to a simple method call and return, thereby limiting its usefulness. Sullivan and Notkin <ref> [22, 23] </ref> have developed a very flexible dynamic mediation system. However, their system allows only one-to-one relationships between components and requires explicit registration of event-action pairs.
Reference: [23] <author> K. J. Sullivan. Mediators: </author> <title> Easing the design and evolution of integrated systems. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <year> 1994. </year>
Reference-contexts: CLOS uses wrappers to access data and methods within objects, as we do, but it limits the action a component can perform to a simple method call and return, thereby limiting its usefulness. Sullivan and Notkin <ref> [22, 23] </ref> have developed a very flexible dynamic mediation system. However, their system allows only one-to-one relationships between components and requires explicit registration of event-action pairs.
Reference: [24] <author> R. Want, A. Hopper, V. Falcao, and J. Gibbons. </author> <title> The active badge location system. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 10(1) </volume> <pages> 91-102, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: Picard's work on affective computing [16] suggests a similar objective, only through the use bio-electric signals, coupled with theories on emotion and cognition. A significant body of work in mobile computing takes advantage of the most significantly changing context of a mobile user |location <ref> [2, 12, 24, 6] </ref>. The initial ubiquitous computing research at PARC provided location-aware services for a handheld device called the PARCTab [24], and resulted in a generalized programming framework for describing location-aware objects [20]. <p> A significant body of work in mobile computing takes advantage of the most significantly changing context of a mobile user |location [2, 12, 24, 6]. The initial ubiquitous computing research at PARC provided location-aware services for a handheld device called the PARCTab <ref> [24] </ref>, and resulted in a generalized programming framework for describing location-aware objects [20]. Using informational context, such as what is shown on a user's graphical display (as depicted in the scenario of Section 2.1) has also been the subject of work done at Apple [5] and Intel [15].
Reference: [25] <author> M. Weiser. </author> <booktitle> The computer of the 21st century. Scientific American, </booktitle> <volume> 265(3) </volume> <pages> 66-75, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: Software engineering needs to become once again a leading indicator for the rapid pace of technology change. Interest in ubiquitous computing has risen over the past few years <ref> [25, 26, 3] </ref> and one of the emerging research themes is context-aware computing [1]. In a computing environment with universal access to information anywhere and at any time, the end user will need leverage to help tame the deluge of technology. <p> The vision of ubiquitous computing |first expressed by Weiser <ref> [25] </ref> and grounded in experimental work done at Xerox PARC| holds the promise of yet another paradigm shift. The defining characteristic of ubiquitous computing is the attempt to break away from the traditional desktop interaction paradigm and move computational power into the network and environment that surrounds the user.
Reference: [26] <author> M. Weiser. </author> <title> Some computer science issues in ubiquitous computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(7) </volume> <pages> 75-84, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: Software engineering needs to become once again a leading indicator for the rapid pace of technology change. Interest in ubiquitous computing has risen over the past few years <ref> [25, 26, 3] </ref> and one of the emerging research themes is context-aware computing [1]. In a computing environment with universal access to information anywhere and at any time, the end user will need leverage to help tame the deluge of technology.
Reference: [27] <author> G. Wiederhold. </author> <booktitle> Mediators in the architecture of future information systems. IEEE Computer, </booktitle> <pages> pages 38-49, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: From a software perspective, context-aware computing demands an infrastructure to allow intelligent mediation between software components, allowing them to act together in ways that might not have been predicted by the original designers <ref> [27] </ref>. The software engineering technique that shows much promise for context-aware computing is dynamic component integration. The remainder of this paper will demonstrate how dynamic integration techniques can support context-aware computing for future interactive 1 environments.
Reference: [28] <author> A. Wood, A. Dey, and G. D. Abowd. Cyberdesk: </author> <title> Automated integration of desktop and network services. </title> <booktitle> In Proceedings of the 1997 conference on Human Factors in Computing Systems | CHI'97, </booktitle> <pages> pages 552-553, </pages> <year> 1997. </year> <note> Technical note. </note>
Reference-contexts: Further information on CyberDesk is provided later in this paper and other publications <ref> [28, 8] </ref>. 1 The following scenario is illustrated in Figure 1. As seen in the figure, a user is checking e-mail, and reads a message from a friend about some interesting research. The user decides to find out more and highlights the name of the person mentioned in the message.
Reference: [29] <author> A. M. Wood. CAMEO: </author> <title> Supporting observable APIs. Position paper for the WWW'5 Programming the Web Workshop, </title> <month> May </month> <year> 1996. </year>
Reference-contexts: The starting point of our Java implementation was an infrastructure called CAMEO, a C++ toolkit developed by Andy Wood <ref> [29] </ref>. 2 The CAMEO infrastracture defines a component-based framework in which individual components can observe the activities of other components and manipulate their interfaces.
References-found: 29

