URL: http://www.cs.wustl.edu/cs/techreports/1994/wucs-94-17.ps.Z
Refering-URL: http://www.cs.wustl.edu/cs/cs/publications.html
Root-URL: 
Title: Efficient Fair Queuing using Deficit Round Robin  
Author: M. Shreedhar and George Varghese 
Address: in St. Louis.  
Affiliation: Washington University  
Date: November 18, 1994  
Abstract: Fair queuing is a technique that allows each flow passing through a network device to have a fair share of network resources. Previous schemes for fair queuing that achieved nearly perfect fairness were expensive to implement: specifically, the work required to process a packet in these schemes was O(log(n)), where n is the number of active flows. This is expensive at high speeds. On the other hand, cheaper approximations of fair queuing that have been reported in the literature exhibit unfair behavior. In this paper, we describe a new approximation of fair queuing, that we call Deficit Round Robin. Our scheme achieves nearly perfect fairness in terms of throughput, requires only O(1) work to process a packet, and is simple enough to implement in hardware. Deficit Round Robin is also applicable to other scheduling problems where servicing cannot be broken up into smaller units, and to distributed queues. 
Abstract-found: 1
Intro-found: 1
Reference: [CLR90] <author> Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. </author> <title> Introduction to Algorithms. </title> <publisher> MIT Press/McGraw-Hill, </publisher> <year> 1990. </year>
Reference-contexts: Our scheme is simple and therefore inexpensive to implement at high-speeds at a router (or gateway). Further we provide analytical results that do not depend on assumptions about traffic distributions; we do so by providing worst-case results across sequences of inputs. Such amortized <ref> [CLR90] </ref> and competitive [ST85] analyses have been a major influence in the analysis of sequential algorithms because they finesse the need to make assumptions about probability distributions of inputs. However, these approaches seem to have had less impact on the performance community. <p> If we combine DRR with hashing, FairnessIndex must be adjusted by the average number of collisions. The average number of other flows that collide with a flow is n Q <ref> [CLR90] </ref>, where, n is the number of flows and Q is the number of queues. For example, if we have 1000 concurrent flows and 10,000 queues (a factor of 10, which is achievable with modest amounts of memory) the average number of collisions is 0:1.
Reference: [DKS89] <author> Alan Demers, Srinivasan Keshav, and Scott Shenker. </author> <title> Analysis and simulation of a fair queueing algorithm. </title> <booktitle> Proceedings of the Sigcomm '89 Symposium on Communications Archtectures and Protocols, </booktitle> <volume> 19(4) </volume> <pages> 1-12, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: An isolation mechanism called Fair Queuing <ref> [DKS89] </ref> has been proposed and has been proved [GM90] to have nearly perfect isolation and fairness. Unfortunately, Fair Queuing (FQ) appears to be somewhat expensive to implement.
Reference: [Flo93a] <author> Sally Floyd. </author> <title> Notes on guaranteed service in resource management. Unpublished note. </title> <year> 1993. </year>
Reference-contexts: Van Jacobson and Sally Floyd have proposed a resource allocation scheme called Class-based queuing that has been implemented. In the context of that scheme, and independent of our work, Sally Floyd has proposed a queuing algorithm that is similar to our Deficit-Round-Robin <ref> [Flo93a, Flo93b] </ref> scheme described below. Her work does not have our theorems about the throughput properties of various flows; however, it does have interesting results on delay bounds and also considers the more general case of multiple priority classes.
Reference: [Flo93b] <author> Sally Floyd. </author> <type> Personal communication. </type> <year> 1993. </year>
Reference-contexts: Van Jacobson and Sally Floyd have proposed a resource allocation scheme called Class-based queuing that has been implemented. In the context of that scheme, and independent of our work, Sally Floyd has proposed a queuing algorithm that is similar to our Deficit-Round-Robin <ref> [Flo93a, Flo93b] </ref> scheme described below. Her work does not have our theorems about the throughput properties of various flows; however, it does have interesting results on delay bounds and also considers the more general case of multiple priority classes.
Reference: [GM90] <author> A. Greenberg and N. </author> <title> Madras. How fair is fair queueing. </title> <booktitle> In Proc. Performance '90, </booktitle> <year> 1990. </year>
Reference-contexts: An isolation mechanism called Fair Queuing [DKS89] has been proposed and has been proved <ref> [GM90] </ref> to have nearly perfect isolation and fairness. Unfortunately, Fair Queuing (FQ) appears to be somewhat expensive to implement. Specifically, FQ requires O (log (n)) work per packet to implement fair queuing, where n is the number of packet streams that are concurrently active at the gateway or router. <p> The packet is then inserted into a queue of packets sorted on departure times. Unfortunately, it is expensive to insert into a sorted queue. The best known algorithms for inserting and deleting from queues require a time complexity of O (log (n)). While this scheme guarantees absolute fairness <ref> [GM90] </ref>, the packet processing cost makes it hard to implement cheaply at high speeds. A naive FQ server would require O (log (m)), where m is the number of packets in the router.
Reference: [Gol94] <author> S. Jamaloddin Golestani. </author> <title> A self clocked fair queueing scheme for broadband applications. </title> <booktitle> In Proceedings of IEEE Infocomm '94, </booktitle> <year> 1994. </year>
Reference-contexts: The major contributions of McKen--ney's scheme are the buffer stealing algorithm, and the idea of using hashing and ignoring collisions. However, his scheme does nothing about the inherent unfairness of Nagle's round-robin scheme. Other Relevant Work: Golestani introduced <ref> [Gol94] </ref> a fair queuing scheme, called self-clocked fair queuing. This scheme uses a virtual time function which makes the computation of the departure times simpler than in ordinary Fair Queuing. However, his approach retains the O (log (n)) sorting bottleneck.
Reference: [JR86] <author> Raj Jain and Shawn Routhier. </author> <title> Packet trains measurement and a new model for computer netwoek traffic. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <month> Septem-ber </month> <year> 1986. </year>
Reference: [Kes91] <author> Srinivasan Keshav. </author> <title> On the efficient implementation of fair queueing. In Internet-working: </title> <journal> Research and Experience Vol.2, </journal> <pages> 157-173, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: While this scheme guarantees absolute fairness [GM90], the packet processing cost makes it hard to implement cheaply at high speeds. A naive FQ server would require O (log (m)), where m is the number of packets in the router. However Keshav <ref> [Kes91] </ref> has shown that only one entry per flow need be inserted into a sorted queue. This still results in O (log (n)) overhead. Keshav's other implementation ideas [Kes91] take at least O (log (n)) time in the worst case. <p> A naive FQ server would require O (log (m)), where m is the number of packets in the router. However Keshav <ref> [Kes91] </ref> has shown that only one entry per flow need be inserted into a sorted queue. This still results in O (log (n)) overhead. Keshav's other implementation ideas [Kes91] take at least O (log (n)) time in the worst case. Stochastic Fair Queuing (SFQ): SFQ was proposed by McKenney [McK91] to address the inefficiencies of Nagle's algorithm. McKenney uses a hashing scheme to map incoming packets to corresponding queues.
Reference: [McK91] <author> Paul E. McKenney. </author> <title> Stochastic fairness queueing. In Internetworking: </title> <journal> Research and Experience Vol.2, </journal> <pages> 113-131, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: This still results in O (log (n)) overhead. Keshav's other implementation ideas [Kes91] take at least O (log (n)) time in the worst case. Stochastic Fair Queuing (SFQ): SFQ was proposed by McKenney <ref> [McK91] </ref> to address the inefficiencies of Nagle's algorithm. McKenney uses a hashing scheme to map incoming packets to corresponding queues. Normally, one would use hashing with chaining to map the flow ID in a packet to the corresponding queue. <p> all i, Quantum i Max. 11 Proof : Enqueuing a packet requires finding the queue used by the flow (O (1) time complexity using hashing since we ignore collisions), appending the packet to the head of the queue, and possibly stealing a buffer (O (1) time using the technique in <ref> [McK91] </ref>). Dequeuing a packet requires determining the next queue to service by examining the head of ActiveList, and then doing a constant number of operations (per packet sent from the queue) in order to update the deficit counter and ActiveList.
Reference: [Nag87] <author> John Nagle. </author> <title> On packet switches with infinite storage. </title> <journal> IEEE Transactions on Communications, </journal> <volume> COM-35(4), </volume> <month> April </month> <year> 1987. </year>
Reference-contexts: Organization: The rest of the paper is organized as follows. In the next section, we review the relevant previous work in more detail. A new technique for avoiding the unfairness of round-robin scheduling called deficit round-robin is described in Section 3. Round-robin scheduling <ref> [Nag87] </ref> can be unfair if different flows use different packet sizes; our scheme avoids this problem by keeping state, per flow, that measures the "deficit" or past unfairness. We analyze the behavior of our scheme using both analysis and simulation in Sections 4-6. <p> Thus at router D, F 4 is offered the same bandwidth as flows F 1, F 2 and F 3 put together. It is unfair to allocate bandwidth based on topology. A better idea is to distinguish flows at a router and treat them separately. Nagle <ref> [Nag87] </ref> proposed an approximate solution to this problem for datagram networks by having routers discriminate flows and then providing round-robin service to flows for every output link. Nagle proposed identifying flows using source-destination addresses, and using separate output queues for each flow; the queues are then serviced in round-robin fashion.
Reference: [PG93] <author> A. K. Parekh and R. G. Gallagher. </author> <title> A generalized processor sharing approach to flow control in integrated services networks. </title> <booktitle> In Proceedings of IEEE Infocomm '93, </booktitle> <year> 1993. </year>
Reference-contexts: Her work does not have our theorems about the throughput properties of various flows; however, it does have interesting results on delay bounds and also considers the more general case of multiple priority classes. A paper by Parekh and Gallagher <ref> [PG93] </ref> showed that fair queuing could be used in conjunction with a leaky bucket admission policy to provide maximum delay guarantees in a packet network. This work showed that FQ provided more than isolation; it could also provide end-to-end latency bounds. <p> In terms of isolation, the proofs given in the previous section indicate that Deficit Round Robin is competitive with Fair Queuing. However, the additional latency properties of BR and DKS have attracted considerable interest. In particular, Parekh and Gallager <ref> [PG93] </ref> have calculated bounds for end-to-end delay assuming the use of DKS fair queuing at routers and token bucket traffic shaping at sources. As communication and computing continue to converge, and real-time (especially video) traffic gets sent over datagram networks, there is an increasing need for latency bounds.
Reference: [ST85] <author> D.D. Sleator and R.E. Tarjan. </author> <title> Amortized efficiency of list update and paging rules. </title> <journal> Communications of the ACM, </journal> <volume> 28(2) </volume> <pages> 202-208, </pages> <year> 1985. </year>
Reference-contexts: Our scheme is simple and therefore inexpensive to implement at high-speeds at a router (or gateway). Further we provide analytical results that do not depend on assumptions about traffic distributions; we do so by providing worst-case results across sequences of inputs. Such amortized [CLR90] and competitive <ref> [ST85] </ref> analyses have been a major influence in the analysis of sequential algorithms because they finesse the need to make assumptions about probability distributions of inputs. However, these approaches seem to have had less impact on the performance community. <p> We can, however, avoid the need for postulating a priori probability distributions, by comparing the performance of DRR to a supposedly fair scheme like BR for an arbitrary execution. This notion of competitive analysis was introduced by Sleator and Tarjan in a seminal paper <ref> [ST85] </ref>. Consider a set of n flows. Consider an arrival pattern F which specifies the interarrival times of packets to flows and identifies the size of each arriving packet and which flow it belongs to. Consider any arbitrary arrival patterns F .
Reference: [Zha91] <author> Lixia Zhang. </author> <title> Virtual clock: A new traffic control algorithm for packet switched networks. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(2) </volume> <pages> 101-125, </pages> <month> May </month> <year> 1991. </year> <month> 21 </month>
Reference-contexts: Thus we hope that our analytical approach will be of independent interest. Flows a generalization of datagram and VC networks: Our intent is to provide firewalls between different packet streams. We define the intuitive notion of a packet stream using the more precise notion of a flow <ref> [Zha91] </ref>.
References-found: 13

