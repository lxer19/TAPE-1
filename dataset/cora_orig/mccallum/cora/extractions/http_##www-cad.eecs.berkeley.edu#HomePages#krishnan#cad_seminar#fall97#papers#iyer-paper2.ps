URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/fall97/papers/iyer-paper2.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/krishnan/cad_seminar/fall97/abstract/iyer.html
Root-URL: http://www.cs.berkeley.edu
Title: Surprises in Sequential Redundancy Identification  
Author: Mahesh A. Iyer David E. Long and Miron Abramovici 
Address: Mountain View, CA 94043, USA.  Murray Hill, NJ 07974, USA.  
Affiliation: Synopsys, Inc.,  AT&T Bell Laboratories,  
Abstract: This paper addresses some misconceptions about redundancy in synchronous sequential circuits. We provide examples to illustrate the differences between untestability and redundancy and discuss existing techniques to identify sequential redundancy. We show that some of these methods are based on incorrect theoretical results. Specifically, we show that untestable faults in balanced pipeline circuits are not necessarily redundant, and that a constant function (i.e. a signal that is always 0 or 1 after initialization) does not always indicate a redundancy. We also show that adding a global reset mechanism or retiming synchronous circuitry may introduce redundancies. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. Abramovici, M. A. Breuer, and A. D. Friedman, </author> <title> ``Digital Systems Testing and Testable Design,'' </title> <publisher> IEEE Press, </publisher> <year> 1994. </year>
Reference-contexts: Identifying these redundancies may provide useful feedback for designers, helping them in locating design errors or finding ways to simplify the circuit. Redundancy identification (RID) can be very useful in synthesis, since every redundant fault defines a region that can be eliminated from the circuit <ref> [1] </ref> [2] . Automatic test generation (ATG) has often been used to identify redundancy. While this is correct for a combinational circuit, where an untestable fault is always caused by a redundancy, an untestable fault in a sequential circuit is not necessarily redundant [3] . <p> Moreover, a practical sequential test generator cannot even be trusted to reliably identify untestable faults. It is well known that because of the pessimism involved in the use of the unknown logic value, a test generator may not find tests for some testable faults <ref> [1] </ref> . While in ATG this pessimism may only lead to fewer faults being detected, it has serious implications when identifying redundancy, because removing the region associated with an irredundant fault results in a circuit whose behavior is different from that of the original circuit.
Reference: [2] <author> K. T. Cheng, </author> <title> ``On Removing Redundancy in Sequential Circuits,'' </title> <booktitle> Proc. 28th. Design Automation Conf., </booktitle> <pages> pp. 164-169, </pages> <month> June </month> <year> 1991. </year>
Reference-contexts: Identifying these redundancies may provide useful feedback for designers, helping them in locating design errors or finding ways to simplify the circuit. Redundancy identification (RID) can be very useful in synthesis, since every redundant fault defines a region that can be eliminated from the circuit [1] <ref> [2] </ref> . Automatic test generation (ATG) has often been used to identify redundancy. While this is correct for a combinational circuit, where an untestable fault is always caused by a redundancy, an untestable fault in a sequential circuit is not necessarily redundant [3] . <p> In recent years, several methods to identify (and remove) sequential redundancies have been proposed in the literature <ref> [2] </ref> [4] [5] [6] [7] [8] [9] [10] [11] [12] . In this paper we first present some classes of sequentially untestable but irredundant faults. Next, we discuss the existing methods for sequential RID and show with examples that some of them are in fact based on incorrect theoretical results. <p> Hence the fault is irredundant. It is an FPI because, as shown in Figure 4 (b), no initialization sequence exists for the faulty circuit. Cheng conjectured that partial detection may be possible when the fault-free and the faulty circuits are initialized by different sequences <ref> [2] </ref> [5] . Now we present a real circuit example to confirm that this conjecture is indeed true and show that the untestable faults which exhibit this behavior form a different class of untestable but irredundant faults. <p> Howev er, as shown in Example 2, the fault is partially testable and irredundant. The faulty circuit is uninitializable. 4. Limitations of Other Solutions to Identify Sequential Redundancy 4.1 The Method of Cheng <ref> [2] </ref> [5] Cheng addressed the problem of identifying and removing sequential redundancies without assuming a global reset mechanism. He proposed a procedure to identify a subset of sequential redundancies (called feedback-free sequential redundancies). <p> He proposed a procedure to identify a subset of sequential redundancies (called feedback-free sequential redundancies). The method relies on converting a sequential circuit into a feedback-free model and uses a modified sequential test generator to identify sequentially untestable and redundant faults <ref> [2] </ref> . Howev er, the procedure used to verify whether an untestable fault is indeed redundant is highly complex and is not applicable to large circuits. 4.2 The Assumption of a Fault-free Global Reset Mechanism Cho et al. proposed a sequential RID technique based on implicit state enumeration [7] .
Reference: [3] <author> M. Abramovici and M. A. Breuer, </author> <title> ``On Redundancy and Fault Detection in Sequential Circuits,'' </title> <journal> IEEE Tr ans. on Computers, </journal> <volume> vol. C-28, </volume> <pages> pp. 864-865, </pages> <month> Nov. </month> <year> 1979. </year>
Reference-contexts: Automatic test generation (ATG) has often been used to identify redundancy. While this is correct for a combinational circuit, where an untestable fault is always caused by a redundancy, an untestable fault in a sequential circuit is not necessarily redundant <ref> [3] </ref> . The sequential test generation problem is very complex. Identifying sequential redundancy using ATG has the added complexity of verifying whether an untestable fault is indeed redundant. In general, any practical state-of-the-art sequential test generator cannot distinguish between untestable and redundant faults. <p> This is contrary to the wide belief that irredundant sequentially untestable faults always affect the initialization of the circuit. 2.2 Irredundant Sequentially Untestable Faults One class of sequentially untestable but irredundant faults consists of faults that prevent initialization (FPIs) <ref> [3] </ref> . A method to identify untestable FPIs was introduced in [14] . We now present an example of an untestable FPI that is irredundant. Example 2: Consider the circuit in Figure 3 and the fault a sa-0.
Reference: [4] <author> K. T. Cheng, </author> <title> ``An ATPG-Based Approach to Sequential Logic Optimization,'' </title> <booktitle> Proc. Intn'l. Conf. on CAD, </booktitle> <pages> pp. 372-375, </pages> <year> 1991. </year>
Reference-contexts: In recent years, several methods to identify (and remove) sequential redundancies have been proposed in the literature [2] <ref> [4] </ref> [5] [6] [7] [8] [9] [10] [11] [12] . In this paper we first present some classes of sequentially untestable but irredundant faults. Next, we discuss the existing methods for sequential RID and show with examples that some of them are in fact based on incorrect theoretical results. <p> It can be verified that the fault is untestable. However, the fault is an irredundant FMI because a different initialization sequence (0, 1, 0) is required for the faulty circuit. 3. Incorrect Solutions to Identify Sequential Redundancy 3.1 The Method of Cheng <ref> [4] </ref> [5] Cheng identified special classes of untestable faults that are guaranteed to be redundant. He showed that in a balanced pipeline circuit, every untestable fault is redundant, and that in a general sequential circuit, unactivat-able and unpropagatable faults are redundant [4] [5] balanced pipeline circuit is a feedback-free circuit such <p> to Identify Sequential Redundancy 3.1 The Method of Cheng <ref> [4] </ref> [5] Cheng identified special classes of untestable faults that are guaranteed to be redundant. He showed that in a balanced pipeline circuit, every untestable fault is redundant, and that in a general sequential circuit, unactivat-able and unpropagatable faults are redundant [4] [5] balanced pipeline circuit is a feedback-free circuit such that, for any signal s in the circuit, every path from any primary input to s has the same number of ip-ops.) He devised special procedures to identify these subsets of redundant faults. <p> Hence this fault is an unactivatable fault and a always assumes the value 0 after initialization. (This is often referred to as a constant function.) However, as shown in Example 2 and Figure 4, the fault is partially testable and irredundant. Cheng's method <ref> [4] </ref> [5] will classify this fault as redundant and remove its region from the circuit. But this changes the behavior of the circuit, since the new circuit is uninitializable. Next we show that an untestable fault in a balanced pipeline circuit is not necessarily redundant.
Reference: [5] <author> K. T. Cheng, </author> <title> ``Redundancy Removal for Sequential Circuits Without Reset States,'' </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 12, no. 1, </volume> <pages> pp. 13-24, </pages> <month> Jan. </month> <year> 1993. </year>
Reference-contexts: In recent years, several methods to identify (and remove) sequential redundancies have been proposed in the literature [2] [4] <ref> [5] </ref> [6] [7] [8] [9] [10] [11] [12] . In this paper we first present some classes of sequentially untestable but irredundant faults. Next, we discuss the existing methods for sequential RID and show with examples that some of them are in fact based on incorrect theoretical results. <p> Hence the fault is irredundant. It is an FPI because, as shown in Figure 4 (b), no initialization sequence exists for the faulty circuit. Cheng conjectured that partial detection may be possible when the fault-free and the faulty circuits are initialized by different sequences [2] <ref> [5] </ref> . Now we present a real circuit example to confirm that this conjecture is indeed true and show that the untestable faults which exhibit this behavior form a different class of untestable but irredundant faults. <p> It can be verified that the fault is untestable. However, the fault is an irredundant FMI because a different initialization sequence (0, 1, 0) is required for the faulty circuit. 3. Incorrect Solutions to Identify Sequential Redundancy 3.1 The Method of Cheng [4] <ref> [5] </ref> Cheng identified special classes of untestable faults that are guaranteed to be redundant. He showed that in a balanced pipeline circuit, every untestable fault is redundant, and that in a general sequential circuit, unactivat-able and unpropagatable faults are redundant [4] [5] balanced pipeline circuit is a feedback-free circuit such that, <p> Identify Sequential Redundancy 3.1 The Method of Cheng [4] <ref> [5] </ref> Cheng identified special classes of untestable faults that are guaranteed to be redundant. He showed that in a balanced pipeline circuit, every untestable fault is redundant, and that in a general sequential circuit, unactivat-able and unpropagatable faults are redundant [4] [5] balanced pipeline circuit is a feedback-free circuit such that, for any signal s in the circuit, every path from any primary input to s has the same number of ip-ops.) He devised special procedures to identify these subsets of redundant faults. <p> Hence this fault is an unactivatable fault and a always assumes the value 0 after initialization. (This is often referred to as a constant function.) However, as shown in Example 2 and Figure 4, the fault is partially testable and irredundant. Cheng's method [4] <ref> [5] </ref> will classify this fault as redundant and remove its region from the circuit. But this changes the behavior of the circuit, since the new circuit is uninitializable. Next we show that an untestable fault in a balanced pipeline circuit is not necessarily redundant. <p> Howev er, as shown in Example 2, the fault is partially testable and irredundant. The faulty circuit is uninitializable. 4. Limitations of Other Solutions to Identify Sequential Redundancy 4.1 The Method of Cheng [2] <ref> [5] </ref> Cheng addressed the problem of identifying and removing sequential redundancies without assuming a global reset mechanism. He proposed a procedure to identify a subset of sequential redundancies (called feedback-free sequential redundancies).
Reference: [6] <author> J. Moondanos and J. A. Abraham, </author> <title> ``Sequential Redundancy Identification using Verification Techniques,'' </title> <booktitle> Proc. Intn'l. Test Conf., </booktitle> <pages> pp. 197-205, </pages> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: In recent years, several methods to identify (and remove) sequential redundancies have been proposed in the literature [2] [4] [5] <ref> [6] </ref> [7] [8] [9] [10] [11] [12] . In this paper we first present some classes of sequentially untestable but irredundant faults. Next, we discuss the existing methods for sequential RID and show with examples that some of them are in fact based on incorrect theoretical results. <p> Thus, checking that the subcircuit still has an initialization sequence is not sufficient. 4.4 Sequential RID Using Verification Formal verification techniques were used for sequential RID by Moondanos and Abraham in <ref> [6] </ref> . Their method relies on verifying that the fault-free and the faulty circuit (for a redundant fault) have equivalent state tables. This definition of sequential redundancy is rather restrictive, since circuit equivalence is not necessary for redundancy.
Reference: [7] <author> H. Cho, G. D. Hachtel and F. Somenzi, </author> <title> ``Redundancy Identification/Removal and Test Generation for Sequential Circuits Using Implicit State Enumeration,'' </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 12, no. 7, </volume> <pages> pp. 935-945, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: In recent years, several methods to identify (and remove) sequential redundancies have been proposed in the literature [2] [4] [5] [6] <ref> [7] </ref> [8] [9] [10] [11] [12] . In this paper we first present some classes of sequentially untestable but irredundant faults. Next, we discuss the existing methods for sequential RID and show with examples that some of them are in fact based on incorrect theoretical results. <p> Howev er, the procedure used to verify whether an untestable fault is indeed redundant is highly complex and is not applicable to large circuits. 4.2 The Assumption of a Fault-free Global Reset Mechanism Cho et al. proposed a sequential RID technique based on implicit state enumeration <ref> [7] </ref> . The method relies on the simplifying assumption that the circuit has a fault-free global reset mechanism. The algorithm uses an implicit representation of the STG and determines states that are not reachable from the reset state. This information is used by an ATG algorithm to identify sequential redundancies. <p> This information is used by an ATG algorithm to identify sequential redundancies. The approach uses binary decision diagrams (BDDs) as a platform to deal with the reachability information of sequential circuits. Because of the limitations of BDDs, this procedure cannot handle some large circuits. The methods of <ref> [7] </ref> [15] assume a fault-free global reset mechanism. Using this assumption, all untestable faults are considered redundant. But the following example shows that this assumption alone does not imply that -- -- ev ery untestable fault is redundant. <p> This is an important point, because, in general, a circuit in test mode does not have to follow the rules of the normal mode of operation. The results of <ref> [7] </ref> with respect to RID will be correct only if it is also assumed that every test sequence will always start by activating the global reset. <p> Example 8 illustrates that imposing the additional constraint that the circuit's operation always starts by activating the global reset can in fact create a redundancy (a sa-0 is irredundant in the original circuit, but becomes redundant in the circuit with global reset). Thus the method of <ref> [7] </ref> or any other method that identifies sequential redundancies by assuming a fault-free global reset mechanism (which is always used to start the operation of the circuit), cannot be used to identify redundancies in a circuit without a global reset mechanism, such as data-path circuits. 4.3 The Methods of Pomeranz and
Reference: [8] <author> I. Pomeranz and S. M. Reddy, </author> <title> ``On Identifying Undetectable and Redundant Faults in Synchronous Sequential Circuits,'' </title> <booktitle> 12th. IEEE VLSI Test Symp., </booktitle> <pages> pp. 8-14, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: In recent years, several methods to identify (and remove) sequential redundancies have been proposed in the literature [2] [4] [5] [6] [7] <ref> [8] </ref> [9] [10] [11] [12] . In this paper we first present some classes of sequentially untestable but irredundant faults. Next, we discuss the existing methods for sequential RID and show with examples that some of them are in fact based on incorrect theoretical results. <p> any other method that identifies sequential redundancies by assuming a fault-free global reset mechanism (which is always used to start the operation of the circuit), cannot be used to identify redundancies in a circuit without a global reset mechanism, such as data-path circuits. 4.3 The Methods of Pomeranz and Reddy <ref> [8] </ref> [9] Pomeranz and Reddy have proposed a method to identify sequential redundancy, based on combinational ATG for multiple faults, which is not practical for large circuits [8] . Their method is an extension of the multi-fault theorem for sequential untestability that was presented in [16] [17] . <p> used to identify redundancies in a circuit without a global reset mechanism, such as data-path circuits. 4.3 The Methods of Pomeranz and Reddy <ref> [8] </ref> [9] Pomeranz and Reddy have proposed a method to identify sequential redundancy, based on combinational ATG for multiple faults, which is not practical for large circuits [8] . Their method is an extension of the multi-fault theorem for sequential untestability that was presented in [16] [17] . More recently, they proposed a method to determine whether a sequentially untestable fault prevents the initialization of the circuit [9] .
Reference: [9] <author> I. Pomeranz and S. M. Reddy, </author> <title> ``On Achieving Complete Testability of Synchronous Sequential Circuits with Synchronizing Sequences,'' </title> <booktitle> Proc. Intn'l. Test Conf., </booktitle> <pages> pp. 1007-1016, </pages> <month> Oct. </month> <year> 1994. </year>
Reference-contexts: In recent years, several methods to identify (and remove) sequential redundancies have been proposed in the literature [2] [4] [5] [6] [7] [8] <ref> [9] </ref> [10] [11] [12] . In this paper we first present some classes of sequentially untestable but irredundant faults. Next, we discuss the existing methods for sequential RID and show with examples that some of them are in fact based on incorrect theoretical results. <p> We will now show that both these claims are incorrect. Pomeranz and Reddy have conjectured that the first claim is incorrect and have provided an example to show that the second claim is incorrect <ref> [9] </ref> . <p> other method that identifies sequential redundancies by assuming a fault-free global reset mechanism (which is always used to start the operation of the circuit), cannot be used to identify redundancies in a circuit without a global reset mechanism, such as data-path circuits. 4.3 The Methods of Pomeranz and Reddy [8] <ref> [9] </ref> Pomeranz and Reddy have proposed a method to identify sequential redundancy, based on combinational ATG for multiple faults, which is not practical for large circuits [8] . Their method is an extension of the multi-fault theorem for sequential untestability that was presented in [16] [17] . <p> Their method is an extension of the multi-fault theorem for sequential untestability that was presented in [16] [17] . More recently, they proposed a method to determine whether a sequentially untestable fault prevents the initialization of the circuit <ref> [9] </ref> . They propose that faults which do not exhibit this behavior can be considered as redundant and the circuit simplified accordingly. <p> Example 9: Consider again the STGs in Figure 5. A detailed gate-level implementation of this sequential circuit and a fault is shown in [12] . The fault was shown to be a partially testable FMI in Example 3. The method of Pomeranz and Reddy <ref> [9] </ref> will consider this fault as redundant and remove its region from the circuit. The original (fault-free) circuit required only one initialization vector (a = 0). This vector will not initialize the new simplified circuit. <p> A c-cycle redundant fault is different from an FMI, since removing a c-cycle redundant fault only requires the application of c arbitrary input vectors before the existing initialization sequence, while removing an FMI <ref> [9] </ref> requires the computation of a new initialization sequence. Another advantage of c-cycle redundancy is that it is compositional.
Reference: [10] <author> L. Entrena and K. T. Cheng, </author> <title> ``Sequential Logic Optimization By Redundancy Addition and Removal,'' </title> <booktitle> Proc. Intn'l. Conf. on CAD, </booktitle> <pages> pp. 310-315, </pages> <month> Nov. </month> <year> 1993. </year>
Reference-contexts: In recent years, several methods to identify (and remove) sequential redundancies have been proposed in the literature [2] [4] [5] [6] [7] [8] [9] <ref> [10] </ref> [11] [12] . In this paper we first present some classes of sequentially untestable but irredundant faults. Next, we discuss the existing methods for sequential RID and show with examples that some of them are in fact based on incorrect theoretical results. <p> Thus this fault is also an irredundant FMI. a1 D Q b e e2 s a- 1 CLK a e1 CLK untestable and irredundant fault 3.2 The Method of Entrena and Cheng <ref> [10] </ref> The sequential optimization method of Entrena and Cheng [10] identifies a redundant fault when the mandatory assignments required to detect it cannot be consistently justified. <p> Thus this fault is also an irredundant FMI. a1 D Q b e e2 s a- 1 CLK a e1 CLK untestable and irredundant fault 3.2 The Method of Entrena and Cheng <ref> [10] </ref> The sequential optimization method of Entrena and Cheng [10] identifies a redundant fault when the mandatory assignments required to detect it cannot be consistently justified. <p> Pomeranz and Reddy have conjectured that the first claim is incorrect and have provided an example to show that the second claim is incorrect [9] . Howev er, their example is not a true counterexample to the second claim in <ref> [10] </ref> , because the mandatory assignment y1 = 1 (in their example) is required only in the faulty circuit. a Clk a2 Clk s a- 0 Clk b g Example 6: Consider the circuit in Figure 7 and the fault f 2 sa-0. <p> The fault is untestable because the requirements in the fault-free circuit to detect it lead to a conict on stem a. Hence the method of Entrena and Cheng <ref> [10] </ref> will claim this fault as redundant. However, f 2 sa-0 is irredundant under either test strategy for the following reason. <p> As shown by the fault-free STG in Figure 4, state A in the fault-free circuit can only be justified by reaching state A. Clearly the fault is untestable. The method of Entrena and Cheng <ref> [10] </ref> will claim it as redundant because the state justification procedure in the fault-free circuit starts looping over the previously unjustified state A. Howev er, as shown in Example 2, the fault is partially testable and irredundant. The faulty circuit is uninitializable. 4.
Reference: [11] <author> M. A. Iyer, D. E. Long, and M. Abramovici, </author> <title> ``Identifying Sequential Redundancies Without Search,'' </title> <type> Technical Report No. </type> <institution> IIT-ECE-TR-017-0495, ECE Department, Illinois Institute of Technology, </institution> <address> Chicago, IL 60616, </address> <month> April </month> <year> 1995. </year>
Reference-contexts: In recent years, several methods to identify (and remove) sequential redundancies have been proposed in the literature [2] [4] [5] [6] [7] [8] [9] [10] <ref> [11] </ref> [12] . In this paper we first present some classes of sequentially untestable but irredundant faults. Next, we discuss the existing methods for sequential RID and show with examples that some of them are in fact based on incorrect theoretical results. <p> Next, we discuss the existing methods for sequential RID and show with examples that some of them are in fact based on incorrect theoretical results. We also briey review the recently proposed notion of c-cycle redundancy <ref> [11] </ref> [12] and discuss its relation with existing RID methods. 2. <p> Dey and Chakradhar [22] observed that retiming can be used to convert sequential reconvergences to combinational reconvergences, and that in the process sequentially redundant faults become combinationally redundant. Example 10 shows that retiming can also transform some irredundant sequentially untestable faults into combinationally redundant faults. 6. c-Cycle Redundancy <ref> [11] </ref> [12] Consider any arbitrary input sequence I . <p> Thus, this fault is a 1-cycle redundant fault. It can be verified that c1 sa-1 in Figure 2 and b2 s a-1 in Figure 6 are also 1-cycle redundant. A polynomial-time fault-independent algorithm to identify c-cycle redundancies is described in <ref> [11] </ref> [12] -- -- 7. Conclusions This paper has revealed many surprises encountered when trying to solve the sequential RID problem. Since sequentially untestable faults are often mislabeled as redundant faults, we provided examples to illustrate the differences between the two.
Reference: [12] <author> M. A. Iyer, </author> <title> ``On Redundancy and Untestability in Sequential Circuits,'' </title> <type> Ph.D. Thesis, </type> <institution> ECE Department, Illinois Institute of Technology, </institution> <address> Chicago, IL - 60616, </address> <month> July </month> <year> 1995. </year>
Reference-contexts: In recent years, several methods to identify (and remove) sequential redundancies have been proposed in the literature [2] [4] [5] [6] [7] [8] [9] [10] [11] <ref> [12] </ref> . In this paper we first present some classes of sequentially untestable but irredundant faults. Next, we discuss the existing methods for sequential RID and show with examples that some of them are in fact based on incorrect theoretical results. <p> Next, we discuss the existing methods for sequential RID and show with examples that some of them are in fact based on incorrect theoretical results. We also briey review the recently proposed notion of c-cycle redundancy [11] <ref> [12] </ref> and discuss its relation with existing RID methods. 2. <p> C is the reset state. A detailed gate-level implementation of this circuit can be found in <ref> [12] </ref> be the only primary input of this circuit. A single vector, a = 0, initializes the fault-free circuit to state C, with output z = 0 (see the fault-free STG in Figure 5). In the gate-level implementation of this circuit [12] fault is shown that modifies the STG as illustrated <p> gate-level implementation of this circuit can be found in <ref> [12] </ref> be the only primary input of this circuit. A single vector, a = 0, initializes the fault-free circuit to state C, with output z = 0 (see the fault-free STG in Figure 5). In the gate-level implementation of this circuit [12] fault is shown that modifies the STG as illustrated in sequence ( 0, 1 ) brings the fault-free circuit to state A (a) Fault-free STG 0/0 0/0 0/0 1/0 1/1 C F 0/0 1/1 0/0 1/0 1/0 1/1 1/1 0/0 A B D E G 0/0 0/0 1/0 (b) Faulty <p> We illustrate this with an example. Example 9: Consider again the STGs in Figure 5. A detailed gate-level implementation of this sequential circuit and a fault is shown in <ref> [12] </ref> . The fault was shown to be a partially testable FMI in Example 3. The method of Pomeranz and Reddy [9] will consider this fault as redundant and remove its region from the circuit. The original (fault-free) circuit required only one initialization vector (a = 0). <p> Dey and Chakradhar [22] observed that retiming can be used to convert sequential reconvergences to combinational reconvergences, and that in the process sequentially redundant faults become combinationally redundant. Example 10 shows that retiming can also transform some irredundant sequentially untestable faults into combinationally redundant faults. 6. c-Cycle Redundancy [11] <ref> [12] </ref> Consider any arbitrary input sequence I . <p> Thus, this fault is a 1-cycle redundant fault. It can be verified that c1 sa-1 in Figure 2 and b2 s a-1 in Figure 6 are also 1-cycle redundant. A polynomial-time fault-independent algorithm to identify c-cycle redundancies is described in [11] <ref> [12] </ref> -- -- 7. Conclusions This paper has revealed many surprises encountered when trying to solve the sequential RID problem. Since sequentially untestable faults are often mislabeled as redundant faults, we provided examples to illustrate the differences between the two.
Reference: [13] <author> I. Pomeranz and S. M. Reddy, </author> <title> ``Classification of Faults in Synchronous Sequential Circuits,'' </title> <journal> IEEE Trans. on Computers, </journal> <volume> vol. 42, </volume> <pages> pp. 1066-1077, </pages> <month> Sept. </month> <year> 1993. </year>
Reference-contexts: We also briey review the recently proposed notion of c-cycle redundancy [11] [12] and discuss its relation with existing RID methods. 2. Untestability and Redundancy in Sequential Circuits We use the following definitions from <ref> [13] </ref> : Definition 1: A fault f is said to be testable if there exists an input sequence I such that for every pair of initial states S and S f of the fault-free and faulty circuit, respectively, the response Z (I , S) of the fault-free circuit to the input <p> an input sequence I such that for every fault-free initial state S, the response of the fault-free circuit to I starting from S, Z (I , S), is different from the response of the faulty circuit starting from S f f f ). (This definition differs slightly from that in <ref> [13] </ref> , in that it includes testable faults. <p> When generating tests, we may restrict ourselves to using only a specified initialization sequence (the one intended for use with the circuit), or we may have the freedom to choose an arbitrary sequence. Pomeranz and Reddy <ref> [13] </ref> define two test strategies based on this distinction. Under the unrestricted test strategy, tests and partial tests may consist of any sequence of input vectors. Definitions 1-4 as given assume the unrestricted test strategy.
Reference: [14] <author> M. Abramovici and P. S. Parikh, </author> <title> ``Warning: 100% Fault Coverage May be Misleading!!'' Proc. </title> <booktitle> Intn'l. Test Conf., </booktitle> <pages> pp. 662-668, </pages> <month> Sept. </month> <year> 1992. </year>
Reference-contexts: A method to identify untestable FPIs was introduced in <ref> [14] </ref> . We now present an example of an untestable FPI that is irredundant. Example 2: Consider the circuit in Figure 3 and the fault a sa-0. The state transition graphs (STGs) for the fault-free and faulty circuits and the state assignment are shown in Figure 4.
Reference: [15] <author> S. Devadas, H. K. T. Ma, and A. R. </author> <title> Newton, "Redundancies and Don't Cares in Sequential Logic Synthesis." </title> <journal> J. Electronic Testing: Theory and Application (JETTA), </journal> <volume> vol. </volume> <pages> 1-1, pp. 15-30, </pages> <month> Feb. </month> <year> 1990. </year>
Reference-contexts: This information is used by an ATG algorithm to identify sequential redundancies. The approach uses binary decision diagrams (BDDs) as a platform to deal with the reachability information of sequential circuits. Because of the limitations of BDDs, this procedure cannot handle some large circuits. The methods of [7] <ref> [15] </ref> assume a fault-free global reset mechanism. Using this assumption, all untestable faults are considered redundant. But the following example shows that this assumption alone does not imply that -- -- ev ery untestable fault is redundant. Example 8: Consider again the circuit and fault a sa-0 in Figure 3.
Reference: [16] <author> V. D. Agrawal and S. T. Chakradhar, </author> <title> "Combinational ATPG Theorems for Identifying Untestable Faults in Sequential Circuits." </title> <booktitle> Proc. European Test Conf., </booktitle> <pages> pp. 249-253, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Their method is an extension of the multi-fault theorem for sequential untestability that was presented in <ref> [16] </ref> [17] . More recently, they proposed a method to determine whether a sequentially untestable fault prevents the initialization of the circuit [9] . They propose that faults which do not exhibit this behavior can be considered as redundant and the circuit simplified accordingly.
Reference: [17] <author> V. D. Agrawal and S. T. Chakradhar, </author> <title> "Combinational ATPG Theorems for Identifying Untestable Faults in Sequential Circuits." </title> <journal> IEEE Trans. on CAD, </journal> <volume> vol. 14, no. 9, </volume> <pages> pp. 1155-1160, </pages> <month> April </month> <year> 1993. </year>
Reference-contexts: Their method is an extension of the multi-fault theorem for sequential untestability that was presented in [16] <ref> [17] </ref> . More recently, they proposed a method to determine whether a sequentially untestable fault prevents the initialization of the circuit [9] . They propose that faults which do not exhibit this behavior can be considered as redundant and the circuit simplified accordingly.
Reference: [18] <author> C. E. Leiserson and J. B. Saxe, </author> <title> ``Retiming Synchronous Circuitry,'' </title> <journal> Algorithmica, </journal> <volume> vol. 6, </volume> <pages> pp. 5-35, </pages> <year> 1991. </year>
Reference-contexts: Though their work is of theoretical importance, it is not practical for large circuits, because it relies on building the STGs for the fault-free and the -- -- faulty circuits for each modeled fault. 5. Retiming and Redundancy Circuit retiming <ref> [18] </ref> consists of changing the position of ip-ops in the circuit without changing the behavior of the circuit. It has been shown that retiming preserves testability [19] [20] [21] . Thus an untestable fault in a retimed circuit will also be untestable in the original circuit.
Reference: [19] <author> T. E. Marchok, A. El-Maleh, W. Maly, and J. Rajski, </author> <title> ``Complexity of Sequential ATPG,'' </title> <booktitle> European Design and Test Conf., </booktitle> <year> 1994. </year>
Reference-contexts: Retiming and Redundancy Circuit retiming [18] consists of changing the position of ip-ops in the circuit without changing the behavior of the circuit. It has been shown that retiming preserves testability <ref> [19] </ref> [20] [21] . Thus an untestable fault in a retimed circuit will also be untestable in the original circuit.
Reference: [20] <author> A. El-Maleh, T. E. Marchok, J. Rajski, and W. Maly, </author> <title> ``Behavior and Testability Preservation Under the Retiming Transformation,'' </title> <institution> McGill University Technical Report #94-R3, </institution> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: Retiming and Redundancy Circuit retiming [18] consists of changing the position of ip-ops in the circuit without changing the behavior of the circuit. It has been shown that retiming preserves testability [19] <ref> [20] </ref> [21] . Thus an untestable fault in a retimed circuit will also be untestable in the original circuit.
Reference: [21] <author> A. El-Maleh, T. Marchok, J. Rajski, and W. Maly, </author> <title> ``On Test Set Preservation of Retimed Circuits,'' </title> <booktitle> Proc. Design Automation Conf., </booktitle> <pages> pp. 176-182, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Retiming and Redundancy Circuit retiming [18] consists of changing the position of ip-ops in the circuit without changing the behavior of the circuit. It has been shown that retiming preserves testability [19] [20] <ref> [21] </ref> . Thus an untestable fault in a retimed circuit will also be untestable in the original circuit. El-Maleh et al. [21] claim that retiming cannot introduce new redundancies; the following is a counterexample to this claim. a1 D Q c f f2 s a- 1 CLK a c1 f1 CLK <p> It has been shown that retiming preserves testability [19] [20] <ref> [21] </ref> . Thus an untestable fault in a retimed circuit will also be untestable in the original circuit. El-Maleh et al. [21] claim that retiming cannot introduce new redundancies; the following is a counterexample to this claim. a1 D Q c f f2 s a- 1 CLK a c1 f1 CLK Example 10: Consider the circuit in Figure 8 and the fault c2 sa-1.
Reference: [22] <author> S. Dey and S. T. Chakradhar, </author> <title> ``Retiming Sequential Circuits to Enhance Testability,'' </title> <booktitle> 12th. IEEE VLSI Test Symp., </booktitle> <pages> pp. 28-33, </pages> <month> April </month> <year> 1994. </year>
Reference-contexts: However, forward or backward retiming can be used to convert this sequential reconvergence into a combinational one. The fault c2 sa-1 then becomes combinationally redundant in the retimed circuit. Dey and Chakradhar <ref> [22] </ref> observed that retiming can be used to convert sequential reconvergences to combinational reconvergences, and that in the process sequentially redundant faults become combinationally redundant.
References-found: 22

