URL: http://www.cse.ogi.edu/~barga/papers/hpts97_grp.ps
Refering-URL: http://www.cse.ogi.edu/~barga/
Root-URL: http://www.cse.ogi.edu
Email: email: calton@cse.ogi.edu  
Title: Implementing Extended Transaction Models  
Author: Calton Pu, Roger Barga, Tong Zhou Shu-Wie Chen 
Address: P.O. BOX 91000 Portland, OR 97291-1000  New York, NY 10027  
Affiliation: Dept. of Computer Science and Engineering Oregon Graduate Institute  Dept. of Computer Science Columbia University  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> R. Barga and C. Pu. </author> <title> Evolving applications and extended transaction processing: How can conventional transaction processing systems catch up? Department of Computer Science and Engineering, </title> <institution> Oregon Graduate Institute; March 1997. </institution>
Reference-contexts: The details of RTF and how it helps bridge the gap between ETMs and current OLTP monitors are described in a companion submission <ref> [1] </ref> to HPTS'97. We summarize the main ideas here to make this paper self-contained. The Reflective Transaction Framework is a software framework that systematically extends both functionality and interface of a conventional transaction processing system.
Reference: [2] <author> R. Barga and C. Pu. </author> <title> A practical and modular implementation technique of extended transaction models. </title> <booktitle> In Proceedings of the 21st International Conference on Very Large Data Bases, </booktitle> <address> Zurich, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: In the following section, we outline three basic components of an extended TP system that supports ETMs. The first component extends primarily con-currency control, using the Reflective Transaction Framework <ref> [2, 3] </ref>, to implement adaptors to add functionality to a TP system such as Transarc Encina. The other two components extend distributed coordination [27] and crash recovery [6], which use micro-protocols and specialization, to restructure the two-phase commit protocol and TP recovery system, respectively. <p> Together, the three components form the basic foundation of ETM support on production software. Of course this does not mean shrink-wrapped ETM support tomorrow. Instead, we consider these results to be the beginning of ETM support for real world applications. 3 Summary of Results 3.1 RTF Barga and Pu <ref> [2] </ref> proposed the Reflective Transaction Framework (RTF) to implement a number of ETMs and semantic-based concurrency control, including the split and join of transactions, cooperative groups, and Epsilon Serializability.
Reference: [3] <author> R. Barga and C. Pu. </author> <title> Reflection on a legacy transaction processing monitor. </title> <booktitle> In Proceedings of the ACM Reflection'96 Conference, </booktitle> <address> San Francisco, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: In the following section, we outline three basic components of an extended TP system that supports ETMs. The first component extends primarily con-currency control, using the Reflective Transaction Framework <ref> [2, 3] </ref>, to implement adaptors to add functionality to a TP system such as Transarc Encina. The other two components extend distributed coordination [27] and crash recovery [6], which use micro-protocols and specialization, to restructure the two-phase commit protocol and TP recovery system, respectively.
Reference: [4] <author> P.A. Bernstein. </author> <title> Transaction processing monitors. </title> <journal> Communications of ACM, </journal> <volume> 33(11) </volume> <pages> 75-86, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: To alleviate the dependency of the implementability test on specific TP monitor products, we adopted the commonly accepted TP monitor architecture <ref> [4, 9] </ref> as a product-independent yardstick for measuring the implementability of ETMs over the range of TP products that conform to the architecture in some way. In our efforts to demonstrate the implementability of ETMs, we have adopted several techniques previously used in other areas of database and software research.
Reference: [5] <author> S-W. Chen and C. Pu. </author> <title> Recovery for extended transaction models. </title> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute; March 1997. </institution>
Reference-contexts: The details of MARS are described in a companion submission <ref> [5] </ref> to HPTS'97. We summarize the main ideas of MARS here to make this paper self-contained.
Reference: [6] <author> Shu-Wie Chen. </author> <title> Recovery for Extended Transaction Models. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Columbia University, </institution> <month> February </month> <year> 1997. </year>
Reference-contexts: The first component extends primarily con-currency control, using the Reflective Transaction Framework [2, 3], to implement adaptors to add functionality to a TP system such as Transarc Encina. The other two components extend distributed coordination [27] and crash recovery <ref> [6] </ref>, which use micro-protocols and specialization, to restructure the two-phase commit protocol and TP recovery system, respectively. Together, the three components form the basic foundation of ETM support on production software. Of course this does not mean shrink-wrapped ETM support tomorrow. <p> During specialization, we first compose those microprotocols and quasi-invariants in previous steps, and then apply specialization (e.g., invoke a specializer) to produce opti mized protocol instances. 3 3.3 MARS Chen <ref> [6] </ref> introduced the Modular Architecture for Recovery Systems (MARS) to build flexible and efficient recovery systems to support extended transactions. The details of MARS are described in a companion submission [5] to HPTS'97. We summarize the main ideas of MARS here to make this paper self-contained.
Reference: [7] <author> C. Consel, C. Pu, and J. Walpole. </author> <title> Incremental specialization: The key to high performance, modularity and portability in operating systems. </title> <booktitle> In Proceedings of ACM Symposium on Partial Evaluation and Semantics-Based Program Manipulation, </booktitle> <address> Copenhagen, </address> <month> June </month> <year> 1993. </year> <month> 5 </month>
Reference-contexts: For example, meta interfaces are particularly useful in the composition of the existing interface for the classic atomic transaction model, ETMs, and the user control of all models. Second, from the operating systems community we have adopted the concepts of microprotocols [17] and specialization <ref> [7, 18] </ref> for the restructuring of TP monitor components. In the following section, we outline three basic components of an extended TP system that supports ETMs.
Reference: [8] <author> Jeffrey L. Eppinger, Lily B. Mummert, and Alfred Z. Spector, </author> <title> editors. Camelot and Avalon: A Distributed Transaction Facility. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1991. </year>
Reference-contexts: The program started with our experimentation [20] using the Camelot software <ref> [8] </ref> and continued with the Transarc Encina TP monitor when it became available.
Reference: [9] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1993. </year>
Reference-contexts: To alleviate the dependency of the implementability test on specific TP monitor products, we adopted the commonly accepted TP monitor architecture <ref> [4, 9] </ref> as a product-independent yardstick for measuring the implementability of ETMs over the range of TP products that conform to the architecture in some way. In our efforts to demonstrate the implementability of ETMs, we have adopted several techniques previously used in other areas of database and software research.
Reference: [10] <author> T. Haerder and A. Reuter. </author> <title> Principles of transaction-oriented database recovery. </title> <journal> ACM Computing Surveys, </journal> <volume> 15(4) </volume> <pages> 287-317, </pages> <month> December </month> <year> 1983. </year>
Reference-contexts: 1 Introduction After some initial resistance, atomic transactions have been accepted as the standard building block for data-centric applications that involve updates. The initial resistance was due to the complaints by the application designers that ACID properties <ref> [10] </ref>, in particular serializability, are unnecessarily strong (or sometimes too weak) for their specific application. Transactions prevailed primarily because of the high degree of data integrity and software maturity offered by OLTP (online transaction processing) systems and RDBMSs (relational database management systems).
Reference: [11] <author> Meichun Hsu and Abraham Silberschatz. </author> <title> Unilateral commit: A new paradigm for reliable distributed transaction processing. </title> <booktitle> In Proceedings of the 1991 IEEE Conference on Data Engineering, </booktitle> <month> February </month> <year> 1991. </year>
Reference-contexts: By applying OCP, both existing coordination protocols and new protocols could be developed. For example, presumed-abort (PA) variant of the two-phase commit protocol [16, 15], open commit protocol [23], optimistic commit protocol [13], unilateral commit <ref> [11] </ref>, etc. And, existing optimizations or new optimizations could be incorporated into these protocols as well. For instance, read-only, last-agent, voting reliable, etc. [24, 25]. We have developed new coordination protocols for a variety of distributed extended transaction management primitives, like Delegate, Split tran, Join tran group, etc.
Reference: [12] <author> Gregor Kiczales. </author> <title> Towards a new model of abstraction in software engineering. </title> <booktitle> In Proceedings of the IMSA'92 Workshop on Reflection and Meta-level Architectures, </booktitle> <year> 1992. </year> <note> See http://www.xerox.com/PARC/spl/eca/oi.html for updates. </note>
Reference-contexts: In our efforts to demonstrate the implementability of ETMs, we have adopted several techniques previously used in other areas of database and software research. First, from the programming language and software engineering communities we have found the concepts of reflection, meta interfaces, and open implementation <ref> [12] </ref> very useful in the definition of new interfaces for ETMs. For example, meta interfaces are particularly useful in the composition of the existing interface for the classic atomic transaction model, ETMs, and the user control of all models.
Reference: [13] <author> Eliezer Levy, Henry F. Korth, and Abraham Sil-berschatz. </author> <title> An optimistic commit protocol for distributed transaction management. </title> <booktitle> In Proceedings of 1991 ACM SIGMOD, </booktitle> <pages> pages 88-97, </pages> <address> Denver, Col-orado, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: By applying OCP, both existing coordination protocols and new protocols could be developed. For example, presumed-abort (PA) variant of the two-phase commit protocol [16, 15], open commit protocol [23], optimistic commit protocol <ref> [13] </ref>, unilateral commit [11], etc. And, existing optimizations or new optimizations could be incorporated into these protocols as well. For instance, read-only, last-agent, voting reliable, etc. [24, 25].
Reference: [14] <author> L. Liu and C. Pu. </author> <title> A reflective framework for organizing and restructuring complex open-ended activities. </title> <institution> Department of Computing Sciences, University of Alberta; February 1997. </institution>
Reference-contexts: In contrast to atomic transactions, many ETMs are designed to support complex applications with long activities with sophisticated internal structure. Perhaps not surprisingly, these applications benefit from both the management of workflow and customizable correctness properties provided by ETMs. Liu and Pu <ref> [14] </ref> have recently combined split and join transactions with an activity model to form the Transactional Activity composition Model (TAM). TAM supports the restructuring, e.g., split and join, of activities (which include workflow as a subcase) with customizable correctness properties.
Reference: [15] <author> C. Mohan, B. Lindsay, and R. Obermark. </author> <title> Transaction management in the R* distributed database management system. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 11(4) </volume> <pages> 378-396, </pages> <year> 1986. </year>
Reference-contexts: By applying OCP, both existing coordination protocols and new protocols could be developed. For example, presumed-abort (PA) variant of the two-phase commit protocol <ref> [16, 15] </ref>, open commit protocol [23], optimistic commit protocol [13], unilateral commit [11], etc. And, existing optimizations or new optimizations could be incorporated into these protocols as well. For instance, read-only, last-agent, voting reliable, etc. [24, 25].
Reference: [16] <author> C. Mohan and Bruce Lindsay. </author> <title> Efficient commit protocols for the tree of processes model of distributed transactions. </title> <booktitle> In Proceedings of 2nd ACM SIGACT/SIGOPS Symposium on PODC, </booktitle> <address> Montreal, Canada, </address> <month> August </month> <year> 1983. </year>
Reference-contexts: By applying OCP, both existing coordination protocols and new protocols could be developed. For example, presumed-abort (PA) variant of the two-phase commit protocol <ref> [16, 15] </ref>, open commit protocol [23], optimistic commit protocol [13], unilateral commit [11], etc. And, existing optimizations or new optimizations could be incorporated into these protocols as well. For instance, read-only, last-agent, voting reliable, etc. [24, 25].
Reference: [17] <author> S. O'Malley and L. Peterson. </author> <title> A dynamic network architecture. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 10(2) </volume> <pages> 110-143, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: For example, meta interfaces are particularly useful in the composition of the existing interface for the classic atomic transaction model, ETMs, and the user control of all models. Second, from the operating systems community we have adopted the concepts of microprotocols <ref> [17] </ref> and specialization [7, 18] for the restructuring of TP monitor components. In the following section, we outline three basic components of an extended TP system that supports ETMs.
Reference: [18] <author> C. Pu, T. Autrey, A. Black, C. Consel, C. Cowan, J. Inouye, L. Kethana, J. Walpole, and K. Zhang. </author> <title> Optimistic incremental specialization: Streamlining a commercial operating system. </title> <booktitle> In Proceedings of the Fifteenth Symposium on Operating Systems Principles, </booktitle> <address> Colorado, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: For example, meta interfaces are particularly useful in the composition of the existing interface for the classic atomic transaction model, ETMs, and the user control of all models. Second, from the operating systems community we have adopted the concepts of microprotocols [17] and specialization <ref> [7, 18] </ref> for the restructuring of TP monitor components. In the following section, we outline three basic components of an extended TP system that supports ETMs.
Reference: [19] <author> C. Pu, G.E. Kaiser, and N. Hutchinson. </author> <title> Split-transactions for open-ended activities. </title> <booktitle> In Proceedings of the Fourteenth International Conference on Very Large Data Bases, </booktitle> <pages> pages 27-36, </pages> <address> Los Angeles, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: Gradually, application designers accepted the OLTP/RDBMS packages and tailored their applications around them. Partially in response to the need for customization and extension of TP systems for new complex applications, many extended transaction models (ETMs) have been proposed, e.g., split/join of transactions <ref> [19] </ref> and Epsilon Serializability [21, 22]. These ETMs typically address a subset of problems raised by application designers by extending or relaxing the ACID properties in specific ways. Both split/join transactions and Epsilon Serializability are examples of "pure extensions" that augment the ACID properties and remain compatible with ACID.
Reference: [20] <author> C. Pu, F. Korz, and R. Lehman. </author> <title> An experiment on measuring application performance over the Internet. </title> <booktitle> In Proceedings of the 1991 ACM SIG-METRICS Conference on Measurement and Modeling of Computer Systems, </booktitle> <address> San Diego, </address> <month> May </month> <year> 1991. </year> <month> ACM/SIGMETRICS. </month>
Reference-contexts: To resolve this tradeoff, of ACID properties with mature software on the one hand, and flexible ETMs without mature software on the other hand, we embarked on a long term program to develop and implement ETMs on top of production TP monitors. The program started with our experimentation <ref> [20] </ref> using the Camelot software [8] and continued with the Transarc Encina TP monitor when it became available.
Reference: [21] <author> C. Pu and A. Leff. </author> <title> Replica control in distributed systems: An asynchronous approach. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 377-386, </pages> <address> Denver, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Gradually, application designers accepted the OLTP/RDBMS packages and tailored their applications around them. Partially in response to the need for customization and extension of TP systems for new complex applications, many extended transaction models (ETMs) have been proposed, e.g., split/join of transactions [19] and Epsilon Serializability <ref> [21, 22] </ref>. These ETMs typically address a subset of problems raised by application designers by extending or relaxing the ACID properties in specific ways. Both split/join transactions and Epsilon Serializability are examples of "pure extensions" that augment the ACID properties and remain compatible with ACID.
Reference: [22] <author> K. Ramamrithan and C. Pu. </author> <title> A formal characterization of epsilon serializability. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 7(6), </volume> <month> December </month> <year> 1995. </year>
Reference-contexts: Gradually, application designers accepted the OLTP/RDBMS packages and tailored their applications around them. Partially in response to the need for customization and extension of TP systems for new complex applications, many extended transaction models (ETMs) have been proposed, e.g., split/join of transactions [19] and Epsilon Serializability <ref> [21, 22] </ref>. These ETMs typically address a subset of problems raised by application designers by extending or relaxing the ACID properties in specific ways. Both split/join transactions and Epsilon Serializability are examples of "pure extensions" that augment the ACID properties and remain compatible with ACID.
Reference: [23] <author> Kurt Rothermel and Stefan Pappe. </author> <title> Open commit protocols for the tree of processes model. </title> <booktitle> In Proceedings of the 10th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 236-244, </pages> <year> 1990. </year>
Reference-contexts: By applying OCP, both existing coordination protocols and new protocols could be developed. For example, presumed-abort (PA) variant of the two-phase commit protocol [16, 15], open commit protocol <ref> [23] </ref>, optimistic commit protocol [13], unilateral commit [11], etc. And, existing optimizations or new optimizations could be incorporated into these protocols as well. For instance, read-only, last-agent, voting reliable, etc. [24, 25].
Reference: [24] <author> G. Samaras, K. Britton, A. Citron, and C. Mohan. </author> <title> Two-phase commit optimizations and tradeoffs in the commercial environment. </title> <booktitle> In Proceedings of the 1993 IEEE Conference on Data Engineering, </booktitle> <address> Vi-enna, Austria, </address> <month> February </month> <year> 1993. </year>
Reference-contexts: For example, presumed-abort (PA) variant of the two-phase commit protocol [16, 15], open commit protocol [23], optimistic commit protocol [13], unilateral commit [11], etc. And, existing optimizations or new optimizations could be incorporated into these protocols as well. For instance, read-only, last-agent, voting reliable, etc. <ref> [24, 25] </ref>. We have developed new coordination protocols for a variety of distributed extended transaction management primitives, like Delegate, Split tran, Join tran group, etc. When applying OCP to build a specific distributed coordination protocol, four steps are followed: in-stantiation, adaptation, specialization preparation, and specialization.
Reference: [25] <author> G. Samaras, K. Britton, A. Citron, and C. Mohan. </author> <title> Two-phase commit optimizations in a commercial distributed environment. </title> <booktitle> Distributed and Parallel Databases, </booktitle> <volume> 3(4) </volume> <pages> 325-360, </pages> <year> 1995. </year>
Reference-contexts: For example, presumed-abort (PA) variant of the two-phase commit protocol [16, 15], open commit protocol [23], optimistic commit protocol [13], unilateral commit [11], etc. And, existing optimizations or new optimizations could be incorporated into these protocols as well. For instance, read-only, last-agent, voting reliable, etc. <ref> [24, 25] </ref>. We have developed new coordination protocols for a variety of distributed extended transaction management primitives, like Delegate, Split tran, Join tran group, etc. When applying OCP to build a specific distributed coordination protocol, four steps are followed: in-stantiation, adaptation, specialization preparation, and specialization.
Reference: [26] <author> T. Zhou and C. Pu. </author> <title> Ocp a coordination facility for distributed extended transactions and transactional workflows. </title> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute; March 1997. </institution>
Reference-contexts: The details of OCP are described in a companion submission <ref> [26] </ref> to HPTS'97. We summarize the main ideas here to make this paper self-contained. Open Coordination Protocol (OCP) is a flexible coordination facility for systematically building optimized coordination protocols for distributed extended transactions and transactional workflows [28].
Reference: [27] <author> T. Zhou, C. Pu, and L. Liu. </author> <title> Open commit protocol. </title> <booktitle> In Proceedings of the 1996 Conference on Parallel and Distributed Information Systems, </booktitle> <address> Miami, </address> <month> December </month> <year> 1996. </year>
Reference-contexts: The first component extends primarily con-currency control, using the Reflective Transaction Framework [2, 3], to implement adaptors to add functionality to a TP system such as Transarc Encina. The other two components extend distributed coordination <ref> [27] </ref> and crash recovery [6], which use micro-protocols and specialization, to restructure the two-phase commit protocol and TP recovery system, respectively. Together, the three components form the basic foundation of ETM support on production software. Of course this does not mean shrink-wrapped ETM support tomorrow. <p> What is more, the framework preserves the original TP monitor functionality and application interfaces, so extended transaction functionality can be introduced without requiring changes to existing applications. 3.2 Open Commit Protocol Zhou and Pu <ref> [27] </ref> introduced the Open Commit Protocol (OCP) to support distributed extended transactions. The details of OCP are described in a companion submission [26] to HPTS'97. We summarize the main ideas here to make this paper self-contained.
Reference: [28] <author> Tong Zhou, Calton Pu, and Ling Liu. </author> <title> Adaptable, Efficient, and Modular Coordination of Distributed Extended Transactions. </title> <booktitle> In Proceedings of the 4th International Conference on Parallel and Distributed Information Systems, </booktitle> <address> Miami Beach, Florida, </address> <month> De-cember </month> <year> 1996. </year> <month> 6 </month>
Reference-contexts: The details of OCP are described in a companion submission [26] to HPTS'97. We summarize the main ideas here to make this paper self-contained. Open Coordination Protocol (OCP) is a flexible coordination facility for systematically building optimized coordination protocols for distributed extended transactions and transactional workflows <ref> [28] </ref>. OCP's "openness" stands for its general functionalities: (1) it can be used to build coordination protocols for different [extended] transaction or workflow management primitives, (2) it can be used to ensure different global correctness criteria, and (3) it allows different optimization combinations.
References-found: 28

