URL: ftp://ftp.cs.washington.edu/tr/1994/04/UW-CSE-94-04-02.PS.Z
Refering-URL: http://www.cs.washington.edu/research/tr/tr-by-title.html
Root-URL: 
Title: A Group Structuring Mechanism for a Distributed Object-oriented Language  
Author: Przemysaw Pardyak and Brian N. Bershad 
Affiliation: Department of Computer Science and Engineering University of Washington  
Abstract: Seattle, WA 98195, USA A version of this paper appeared in Proceedings of the 14th International Conference on Distributed Computing Systems, Poznan, Poland, 1994 Abstract This paper describes a structuring mechanism for grouping objects in a distributed object-oriented language. A group structuring mechanism provides a single flexible method for managing distributed applications that involve complicated communication protocols and sophisticated structure. We have added such a mechanism to the Emerald distributed object-oriented language and its runtime system. Our group structuring mechanism fits entirely within the context of object-oriented programming, so similar mechanisms could be added to other distributed object-oriented languages. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> K. P. Birman. </author> <title> The Process Group Approach to Reli able Distributed Computing. </title> <journal> Communications of the ACM, </journal> <volume> 36(12) </volume> <pages> 36-53, </pages> <month> December </month> <year> 1993. </year>
Reference-contexts: Pardyak performed this work while at the University of Mining and Metallurgy, Cracow, Poland. protocols provide support for structuring techniques like replication and load sharing and may be used as a basis for fault tolerance <ref> [1] </ref>. Group communication protocols are themselves complex, difficult to write, and hard to manage. They require that the client programmer specify the properties of message ordering, policies for handling faults, and methods for interpreting a multiplicity of results following single invocations.
Reference: [2] <author> K. P. Birman and R. Cooper. </author> <title> The ISIS Project: Real Experi ence with a Fault Tolerant Programming System. </title> <journal> Operating Systems Review, </journal> <volume> 25(2) </volume> <pages> 103-107, </pages> <month> April </month> <year> 1991. </year> <month> 7 </month>
Reference-contexts: Elaborate protocols are used to maintain (at least partial) consistency among components of a distributed system. Replication and recovery mechanisms are used to provide higher availability and fault-tolerance. Group communication is another recognized technique for managing the complexity of distributed systems <ref> [2, 10] </ref>. It is used to simplify communication by enabling simultaneous addressing of all members of a group. It helps maintain consistency by ordering messages. Group communication This research was supported by Komitet Badan Naukowych under grant no. 8.0077.91.01 and by a National Science Foundation Presidential Young Investigator Award. <p> Systems like V [5] and Amoeba [10] use process groups for replicated and distributed services. Multicast is used to simplify and expedite communication for process groups. The ISIS reliable distributed toolkit <ref> [2] </ref>, also based on process groups and multicast, enables group communication to increase fault-tolerance. Remote Procedure Call has been enhanced to handle communication with multiple processes simultaneously [16] and to support replication [6].
Reference: [3] <author> A. D. Birrell and B. J. Nelson. </author> <title> Implementing Remote Pro cedure Calls. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 2(1) </volume> <pages> 39-59, </pages> <month> February </month> <year> 1984. </year>
Reference-contexts: These and other constraints can be expressed entirely within the framework of an object-oriented system, so no new programming paradigm is required. Successful distributed programming models have equivalents in traditional programming languages, for example, RPC <ref> [3] </ref> and distributed shared memory [11]. In this paper, we propose a set of cooperating objects as a programming technique that provides a structuring mechanism for using groups and group communication. The technique is expressed in terms of the object-oriented programming paradigm.
Reference: [4] <author> A. P. Black and M. P. Immel. </author> <title> Encapsulating Plurality. </title> <booktitle> In Proceedings of the 7th European Conference on Object-Oriented Programming, </booktitle> <pages> pages 57-79, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: These libraries are not a general language construct because their semantics depends on the system they are based on. They are not transparent because multiple responses to an invocation must be explicitly handled by a client. We are aware of one other effort to add group mechanisms to Emerald <ref> [4] </ref>. Their approach supports a simple form of group structuring, whereby new members can be added to an existing group. Group invocation results in one member of the group receiving the invocation. Otherwise, there is no support for group communication.
Reference: [5] <author> D. R. Cheriton and W. Zwaenepoel. </author> <title> Distributed Process Groups in the V Kernel. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 3(2) </volume> <pages> 77-107, </pages> <month> May </month> <year> 1985. </year>
Reference-contexts: Systems like V <ref> [5] </ref> and Amoeba [10] use process groups for replicated and distributed services. Multicast is used to simplify and expedite communication for process groups. The ISIS reliable distributed toolkit [2], also based on process groups and multicast, enables group communication to increase fault-tolerance.
Reference: [6] <author> E. C. Cooper. </author> <title> Replicated Procedure Call. </title> <journal> Operating Systems Review, </journal> <volume> 20(1) </volume> <pages> 44-56, </pages> <month> January </month> <year> 1986. </year>
Reference-contexts: Multicast is used to simplify and expedite communication for process groups. The ISIS reliable distributed toolkit [2], also based on process groups and multicast, enables group communication to increase fault-tolerance. Remote Procedure Call has been enhanced to handle communication with multiple processes simultaneously [16] and to support replication <ref> [6] </ref>. The success of group communication in distributed systems provoked research into adopting the concept as a programming technique.
Reference: [7] <author> N. M. Gehani. </author> <title> Broadcasting Sequential Processes (BSP). </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-10(4):343-351, </volume> <month> July </month> <year> 1984. </year>
Reference-contexts: Remote Procedure Call has been enhanced to handle communication with multiple processes simultaneously [16] and to support replication [6]. The success of group communication in distributed systems provoked research into adopting the concept as a programming technique. Broadcasting Sequential Processes <ref> [7] </ref> enabled sequential processes similar to those in Hoare's CSP [9] to broadcast messages to all others although there was no support for groups or transparency (messages were explicitly broadcast and received).
Reference: [8] <author> O. Hagsand, H. Herzog, K. Birman, and R. Cooper. </author> <title> Object oriented Reliable Distributed Programming. </title> <booktitle> In Proceedings of the 2nd International Workshop on Object-Orientation in Operating Systems IWOOOS'92, </booktitle> <address> Dourdan, France, </address> <month> Septem-ber </month> <year> 1992. </year>
Reference-contexts: Another approach relies on class libraries to abstract the group communication primitives of the underlying operating system <ref> [8, 12] </ref>. These libraries are not a general language construct because their semantics depends on the system they are based on. They are not transparent because multiple responses to an invocation must be explicitly handled by a client.
Reference: [9] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <journal> Com munications of the ACM, </journal> <volume> 21(8) </volume> <pages> 666-677, </pages> <month> August </month> <year> 1978. </year>
Reference-contexts: The success of group communication in distributed systems provoked research into adopting the concept as a programming technique. Broadcasting Sequential Processes [7] enabled sequential processes similar to those in Hoare's CSP <ref> [9] </ref> to broadcast messages to all others although there was no support for groups or transparency (messages were explicitly broadcast and received). Another approach relies on class libraries to abstract the group communication primitives of the underlying operating system [8, 12].
Reference: [10] <author> M. F. Kaashoek and A. S. Tanenbaum. </author> <title> Group Commu nication in the Amoeba Distributed Operating System. </title> <booktitle> In Proceedings of the 11th International Conference on Distributed Computer Systems, </booktitle> <pages> pages 222-230, </pages> <address> Arlington, VA, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Elaborate protocols are used to maintain (at least partial) consistency among components of a distributed system. Replication and recovery mechanisms are used to provide higher availability and fault-tolerance. Group communication is another recognized technique for managing the complexity of distributed systems <ref> [2, 10] </ref>. It is used to simplify communication by enabling simultaneous addressing of all members of a group. It helps maintain consistency by ordering messages. Group communication This research was supported by Komitet Badan Naukowych under grant no. 8.0077.91.01 and by a National Science Foundation Presidential Young Investigator Award. <p> Systems like V [5] and Amoeba <ref> [10] </ref> use process groups for replicated and distributed services. Multicast is used to simplify and expedite communication for process groups. The ISIS reliable distributed toolkit [2], also based on process groups and multicast, enables group communication to increase fault-tolerance.
Reference: [11] <author> Kai Li and Paul Hudak. </author> <title> Memory Coherence in Shared Vir tual Memory Systems. </title> <booktitle> In Proceedings of the 6th International Conference on Distributed Computing Systems, </booktitle> <pages> pages 229-239, </pages> <month> August </month> <year> 1986. </year>
Reference-contexts: These and other constraints can be expressed entirely within the framework of an object-oriented system, so no new programming paradigm is required. Successful distributed programming models have equivalents in traditional programming languages, for example, RPC [3] and distributed shared memory <ref> [11] </ref>. In this paper, we propose a set of cooperating objects as a programming technique that provides a structuring mechanism for using groups and group communication. The technique is expressed in terms of the object-oriented programming paradigm.
Reference: [12] <author> M. Makpangou, Y. Gourhant, and M. Shapiro. BOAR: </author> <title> A Library of Fragmented Object Types for Distributed Ab-stracitons. </title> <booktitle> In Proceedings of the International Workshop on Object Orientation in Operating Systems IWOOOS'91, </booktitle> <pages> pages 164-172, </pages> <month> October </month> <year> 1991. </year>
Reference-contexts: Another approach relies on class libraries to abstract the group communication primitives of the underlying operating system <ref> [8, 12] </ref>. These libraries are not a general language construct because their semantics depends on the system they are based on. They are not transparent because multiple responses to an invocation must be explicitly handled by a client.
Reference: [13] <author> P. Pardyak. </author> <title> Group Communication in an Object-based Dis tributed System. </title> <type> Master's thesis, </type> <institution> University of Mining and Metallurgy, Cracow, Poland, </institution> <year> 1992. </year>
Reference-contexts: By encapsulating group communication in such a mechanism, we can achieve a simple interface to a group without exposing the complexity of its structure and internal communication. 1.2 Goals A group mechanism should be flexible to enable the specification of all aspects of group interactions <ref> [14, 13] </ref> and transparent to hide the complexity of these interactions.
Reference: [14] <author> P. Pardyak. </author> <title> Group Communication in an Object-Based Envi ronment. </title> <booktitle> In Proceedings of the 2nd International Workshop on Object Orientation in Operating Systems IWOOOS'92, </booktitle> <pages> pages 106-116, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: By encapsulating group communication in such a mechanism, we can achieve a simple interface to a group without exposing the complexity of its structure and internal communication. 1.2 Goals A group mechanism should be flexible to enable the specification of all aspects of group interactions <ref> [14, 13] </ref> and transparent to hide the complexity of these interactions. <p> Finally, in Section 8 we present our conclusions. 2 Characteristics of groups In this section we present our model of a group structure, discuss the different roles served by a group, and advocate encapsulation of the group structure and communication. Structure of a group In <ref> [14] </ref> we proposed a general model of a group structure. According to this model, a group consists of two kinds of objects: group objects that interface the group with the outside world, and member objects that perform the group's tasks (see Figure 1). <p> We first show the issues of group communication that affect the design and then present a group structure that takes these issues into account. 3.1 Group communication for objects Multiple Object Invocation (MOI) <ref> [14] </ref> is a method of providing group communication among objects.
Reference: [15] <author> R. K. Raj, E. D. Tempero, H. M. Levy, A. P. Black, N. C. Hutchinson, and E. </author> <month> Jul. </month> <title> Emerald: A General-Purpose Programming Language. </title> <journal> Software Practice and Experience, </journal> <volume> 21(1) </volume> <pages> 91-118, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Monitor objects are notified of group events such as failures and changes in membership. can be achieved by enabling interactions between clients and the internal group objects. 4 Adding groups to Emerald In this section we describe the implementation of our group mechanisms in Emerald <ref> [15] </ref>. Emerald is an object-based programming language and a distributed runtime system for objects. The language is strongly typed and supports distribution. Emerald's objects are mobile and may be invoked in a location independent manner. 4.1 Group structure The central objects in an Emerald group are group coordinators (Figure 4).
Reference: [16] <author> M. Satanarayananand E. H. Siegel. </author> <title> Parallel Communication in a Large Distributed Environment. </title> <journal> IEEE Transactions on Computers, </journal> <volume> 39(3) </volume> <pages> 328-348, </pages> <month> March </month> <year> 1990. </year> <month> 8 </month>
Reference-contexts: Multicast is used to simplify and expedite communication for process groups. The ISIS reliable distributed toolkit [2], also based on process groups and multicast, enables group communication to increase fault-tolerance. Remote Procedure Call has been enhanced to handle communication with multiple processes simultaneously <ref> [16] </ref> and to support replication [6]. The success of group communication in distributed systems provoked research into adopting the concept as a programming technique.
References-found: 16

