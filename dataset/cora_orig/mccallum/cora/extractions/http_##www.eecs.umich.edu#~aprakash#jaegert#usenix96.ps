URL: http://www.eecs.umich.edu/~aprakash/jaegert/usenix96.ps
Refering-URL: http://www.eecs.umich.edu/~aprakash/jaegert/pubs.html
Root-URL: http://www.eecs.umich.edu
Email: Emails: fjaegertjaprakashg@eecs.umich.edu rubin@bellcore.com  
Title: Building Systems That Flexibly Control Downloaded Executable Content  
Author: Trent Jaegery Aviel D. Rubinz Atul Prakashy 
Address: 445 South Street Ann Arbor, MI 48105 Morristown, NJ 07960  
Affiliation: Software Systems Research Laby Security Research Groupz EECS Department Bellcore University of Michigan  
Abstract: Downloading executable content, which enables principals to run programs from remote sites, is a key technology in a number of emerging applications, including collaborative systems, electronic commerce, and web information services. However, the use of downloaded executable content also presents serious security problems because it enables remote principals to execute programs on behalf of the downloading principal. Unless downloaded executable content is properly controlled, a malicious remote principal may obtain unauthorized access to the downloading principal's resources. Current solutions either attempt to strictly limit the capabilities of downloaded content or require complete trust in the remote principal, so applications which require intermediate amounts of sharing, such as collaborative applications, cannot be constructed over insecure networks. In this paper, we describe an architecture that flexibly controls the access rights of downloaded content by: (1) authenticating content sources; (2) determining content access rights based on its source and the application that it is implementing; and (3) enforcing these access rights over a wide variety of objects and for the entire computation, even if external software is used. We describe the architecture in the context of an infrastructure for supporting collaborative applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. Badger, D. F. Sterne, D. L. Sherman, K. M. Walker, and S. A. Haghighat. </author> <title> Practical domain and type enforcement for UNIX. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 66-77, </pages> <year> 1995. </year>
Reference-contexts: Recent research has yielded systems which provide support for defining limited access control domains, but it is not possible to generate a new domain at run-time. Role-based access control (RBAC) <ref> [1, 9, 33, 35] </ref> models permit a user to execute processes using different principals, called roles, which are associated with different access control domains. Thus, two processes run by the same user can have different access rights. <p> In order to execute this transform, the principal must have permission to run both x.load and swg.add, so restricting this operation such that only authorized principals can make access rights modifications is straightforward. This model is influenced most strongly by the access control models of Hydra [36] and DTE <ref> [1] </ref>. Like Hydra, access control on the operations of abstract data types are possible, but access rights in our model are associated with principals rather than the content itself (procedures in Hydra). Therefore, management of rights is simpler and consistent with our applications. <p> Note that the service can only obtain the downloading principal's rights if the EPAC is presented to the DFS. The DFS ACL manager can interpret the rights, so it can authorize actions given those rights. Note that using a DTE <ref> [1] </ref> makes the specification of rights much simpler, and enables the computation of intersections to be done at runtime. This is because access rights can be expressed more concisely. Therefore, we would prefer to use a DTE-style access control model in the future.
Reference: [2] <author> M. Blaze, J. Feigenbaum, and J. Lacy. </author> <title> Decentralized trust management. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <year> 1996. </year>
Reference-contexts: We would express this rights as a domain right fscientists; communicate; scientists certsg. Definition of the UARC scientists group is simply a listing of their public key certificate identifiers (a more general specification is proposed in PolicyMaker <ref> [2] </ref>). File system objects are different because these objects already have access rights. We would like to use these existing rights to express a subset of the downloading principal's rights. We describe a set of file system objects by a path and a sharing type.
Reference: [3] <author> N. S. Borenstein. </author> <title> Email with a mind of its own: The Safe-Tcl language for enabled mail. </title> <note> In UL-PAA '94, 1994. Available via anonymous ftp from ics.uci.edu in the file mrose/safe-tcl/safe-tcl.tar.Z. </note>
Reference-contexts: Current interpreters for executing downloaded content, such as Java-enabled Netscape, Java's ap 2 O/S Process Interacts Executes 1 Composes Sends to Reader Mobile Agent Mobile Agent Remote Principal Downloading Principal pletviewer [10], and Tcl's safe interpreter <ref> [3, 16] </ref>, strictly limit the access rights of content to prevent these attacks. For example, content run using Java-enabled Netscape is prevented from performing any file system I/O and communicating with third parties (in theory anyway, see [5]). <p> In this architecture, executable content is downloaded to a principal who executes the program using one of a variety of "safe" interpreters, such as Java-enabled Netscape [10], Java's appletviewer, and Tcl's safe interpreter <ref> [3, 16] </ref>. To prevent attacks, these interpreters strictly limit the access rights of content. By default, all these interpreters only grant content (remote content in the case of Java) the right to communicate to only ports at the IP address of the content. <p> Therefore, we can build a hierarchy of interpreters where: (1) the browser is the master of the application-specific interpreters and (2) application-specific interpreters are masters of the content interpreters. In addition, Tcl 7.5 implements the "safe" interpreters of the style of Safe-Tcl <ref> [3] </ref>. Therefore, security is enforced by removing unsafe commands from slave interpreters. However, some unsafe commands may be needed to complete the application, so Tcl provides a mechanism for masters to execute unsafe commands on behalf of slaves (called alias).
Reference: [4] <author> E. Born and H. Stiegler. </author> <title> Discretionary access control by means of usage conditions. </title> <journal> Computers & Security, </journal> <volume> 13(5) </volume> <pages> 437-450, </pages> <year> 1994. </year>
Reference-contexts: Therefore, we believe it is possible, from a performance perspective, to dynamically generate limited domains using DTE, but users and their processes are prevented from generating domains because DTE is used as a mandatory access control model. Other RBAC models permit evolution of access rights using rules <ref> [4, 17] </ref>. However, the rules, like the domains, must be specified in advance, but the rights of content depend on the goals of the content's application which are large in number and are often not known until runtime. In [30], the DTE RBAC model is applied to controlling content.
Reference: [5] <author> D. Dean, E. Felten, and D. Wallach. </author> <title> Java security: From HotaJava to Netscape and beyond. </title> <booktitle> In Proceedings of the IEEE Symposium on Security and Privacy, </booktitle> <year> 1996. </year>
Reference-contexts: In addition, a remote principal may be spoofed into integrating malicious content from an attacker to mobile agent which would then give a third party access to the information provided above <ref> [5] </ref>. Current interpreters for executing downloaded content, such as Java-enabled Netscape, Java's ap 2 O/S Process Interacts Executes 1 Composes Sends to Reader Mobile Agent Mobile Agent Remote Principal Downloading Principal pletviewer [10], and Tcl's safe interpreter [3, 16], strictly limit the access rights of content to prevent these attacks. <p> For example, content run using Java-enabled Netscape is prevented from performing any file system I/O and communicating with third parties (in theory anyway, see <ref> [5] </ref>). The Java appletviewer permits some access rights to be granted to content (as specified in the /.hotjava/properties file). However, these rights must be shared with any remote principal whose content is downloaded. <p> Cryptographic authentication identifies the source of content and also prevents some of the attacks that have plagued current interpreters, such as the DNS attack described in <ref> [5] </ref>. Also, in addition to the source, the application of the content is also used to determine the access rights of content. For example, we can remove the limitation that content can only communicate with ports at the server, by knowing the authorized remote principals in the application. <p> These objects can be used by content to attack the downloading principal. For example, an attack on alpha version Java involves opening socket connections to an unauthorized third party to send information shared between the two legitimate principals <ref> [5] </ref>. 4 Related Work The current architecture for executing downloaded content is shown in Figure 2.
Reference: [6] <author> R. Clauer et. al. </author> <title> A prototype upper atmospheric collaboratory (UARC). AGU Monograph: Visualization Techniques in Space and Atmospheric Sciences. </title> <publisher> In press. </publisher>
Reference-contexts: In Section 7, we describe the architectural details and their implementation. In Section 8, we conclude the paper and present future work. 2 Example At the University of Michigan, we are developing a system called the Upper Atmospheric Research Collaboratory (UARC) <ref> [6] </ref>. UARC provides its geographically-distributed users with a wide variety of applications which support collaborative analysis of atmospheric test data.
Reference: [7] <author> S. Foley and J. Jacob. </author> <title> Specifying security for CSCW systems. </title> <booktitle> In Proceedings of the 8th IEEE Computer Security Foundations Workshop, </booktitle> <pages> pages 136-145, </pages> <year> 1995. </year>
Reference-contexts: Thus, in the access control model, certain operations are associated with changes in object group membership, called transforms. The idea that operations modify the set of access rights, and that high-level specifications should be used to represent these access rights is adapted from Foley and Jacob <ref> [7] </ref>. However, our implementation specifies changes in rights rather than the complete set of rights. For example, the operation x.load returns a window object y upon load of test data x.
Reference: [8] <author> A. O. Freier, P. Karlton, and P. C. Kocher. </author> <title> The ssl protocol version 3.0. </title> <type> Internet Draft, </type> <month> March, </month> <year> 1996. </year>
Reference-contexts: It is fairly straightforward for two principals to exchange a symmetric key given that the two principals have securely obtained each other's public keys (e.g., SSL protocol <ref> [8] </ref>). If symmetric cryptography is used, i is a message authentication code (MAC) computed with a hash function (e.g., SHA [18]) rather than a digital signature (the same message is used, however).
Reference: [9] <author> M. Gasser and E. McDermott. </author> <title> An architecture for practical delegation in a distributed system. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 20-30, </pages> <year> 1990. </year>
Reference-contexts: Recent research has yielded systems which provide support for defining limited access control domains, but it is not possible to generate a new domain at run-time. Role-based access control (RBAC) <ref> [1, 9, 33, 35] </ref> models permit a user to execute processes using different principals, called roles, which are associated with different access control domains. Thus, two processes run by the same user can have different access rights.
Reference: [10] <author> J. Gosling and H. McGilton. </author> <title> The Java language environment: </title> <note> A white paper, 1995. Available at URL http://java.sun.com/whitePaper/java-whitepaper-1.html. </note>
Reference-contexts: Current interpreters for executing downloaded content, such as Java-enabled Netscape, Java's ap 2 O/S Process Interacts Executes 1 Composes Sends to Reader Mobile Agent Mobile Agent Remote Principal Downloading Principal pletviewer <ref> [10] </ref>, and Tcl's safe interpreter [3, 16], strictly limit the access rights of content to prevent these attacks. For example, content run using Java-enabled Netscape is prevented from performing any file system I/O and communicating with third parties (in theory anyway, see [5]). <p> In this architecture, executable content is downloaded to a principal who executes the program using one of a variety of "safe" interpreters, such as Java-enabled Netscape <ref> [10] </ref>, Java's appletviewer, and Tcl's safe interpreter [3, 16]. To prevent attacks, these interpreters strictly limit the access rights of content. By default, all these interpreters only grant content (remote content in the case of Java) the right to communicate to only ports at the IP address of the content.
Reference: [11] <author> R. Hall, A. Mathur, F. Jahanian, A. Prakash, and C. Rasmussen. Corona: </author> <title> A communication service for scalable, reliable group collaboration systems. </title> <booktitle> In Proceedings of the Sixth ACM Conference on Computer-Supported Cooperative Work, </booktitle> <month> Novem-ber </month> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: Most of the applications in UARC involve synchronous interaction among users. Since collaborative applications have many common requirements, we are building an application-independent infrastructure called the Collaboratory Builders' Environment (CBE) [15]. The CBE provides services that are common to collaborative applications, such as replicated object management [22], multicast communication <ref> [11] </ref>, and security. The goal of the security infrastructure is to provide the security services necessary to support a variety of collaborative applications. UARC applications are to be implemented as downloaded executable content.
Reference: [12] <author> T. Jaeger and A. Prakash. </author> <title> Support for the file system security requirements of computational email systems. </title> <booktitle> In Proceedings of the 2nd ACM Conference on Computer and Communications Security, </booktitle> <pages> pages 1-9, </pages> <year> 1994. </year>
Reference-contexts: Also, like other interpreters, the Telescript engine cannot control the execution of external software. Operating systems can control the access rights of external software it executes, but current operating systems are not designed to flexibly restrict a principal's rights. For example, we showed in <ref> [12] </ref> that current file systems, such as Unix [24] and AFS [27], only provide limited mechanisms for a principal to dynamically restrict the access rights of one of his processes.
Reference: [13] <author> T. Jaeger and A. Prakash. </author> <title> Implementation of a discretionary access control model for script-based systems. </title> <booktitle> In Proceedings of the 8th IEEE Computer Security Foundations Workshop, </booktitle> <pages> pages 70-84, </pages> <year> 1995. </year>
Reference-contexts: Since these commands are only available in the browser and are protected by the authorization operation, only authorized accesses to system objects are possible. An example is the implementation of the open command in <ref> [13] </ref> (called safe open). The browser also provides support for controlled execution of external software and network services.
Reference: [14] <author> J. T. Kohl and B. C. Neuman. </author> <title> The Kerberos network authentication service. Internet RFC 1510, </title> <month> September, </month> <year> 1993. </year>
Reference-contexts: Delegation is advantageous in that cryptographic credentials are used to represent the rights being delegated, but flexibility, standardization, and trust are problematic. Some systems, such as Taos [35], delegate rights via roles, so they suffer from the same flexibility limitations as RBAC. Kerberos version 5 <ref> [14, 29] </ref> provides a field for storing access control domains in the delegated credentials, so flexible delegation of rights over a variety of objects is possible. However, access rights must be transferred to servers in a language that the server can understand and enforce. <p> tickets to Service 4 -- Service requests PAC for DFS; EPAC = DFS ticket 5 -- Service authenticates to DFS using PAC+EPAC File System Objects to grant a service rights to his objects in DCE's Distributed File System (DFS) DCE [21] utilizes an extended version of Kerberos version 5 tickets <ref> [14, 20] </ref> called Privilege Attribute Certificates (PACs) and further extensions to those tickets called Extended PACs (EPACs) for authentication. Kerberos documentation suggests that the authorization-data field be used to represent authorization information.
Reference: [15] <author> J. Lee, A. Prakash, and T. Jaeger. </author> <title> A software architecture to support open distributed collabroa-tories. </title> <booktitle> In Proceedings of the Sixth ACM Conference on Computer-Supported Cooperative Work, </booktitle> <month> November </month> <year> 1996. </year> <note> To appear. </note>
Reference-contexts: Most of the applications in UARC involve synchronous interaction among users. Since collaborative applications have many common requirements, we are building an application-independent infrastructure called the Collaboratory Builders' Environment (CBE) <ref> [15] </ref>. The CBE provides services that are common to collaborative applications, such as replicated object management [22], multicast communication [11], and security. The goal of the security infrastructure is to provide the security services necessary to support a variety of collaborative applications.
Reference: [16] <author> J. Levy and J. Ousterhout. </author> <title> Safe Tcl: A toolbox for constructing electronic meeting places. </title> <booktitle> In The First USENIX Workshop on Electronic Commerce, </booktitle> <year> 1995. </year> <note> To appear. </note>
Reference-contexts: Current interpreters for executing downloaded content, such as Java-enabled Netscape, Java's ap 2 O/S Process Interacts Executes 1 Composes Sends to Reader Mobile Agent Mobile Agent Remote Principal Downloading Principal pletviewer [10], and Tcl's safe interpreter <ref> [3, 16] </ref>, strictly limit the access rights of content to prevent these attacks. For example, content run using Java-enabled Netscape is prevented from performing any file system I/O and communicating with third parties (in theory anyway, see [5]). <p> In this architecture, executable content is downloaded to a principal who executes the program using one of a variety of "safe" interpreters, such as Java-enabled Netscape [10], Java's appletviewer, and Tcl's safe interpreter <ref> [3, 16] </ref>. To prevent attacks, these interpreters strictly limit the access rights of content. By default, all these interpreters only grant content (remote content in the case of Java) the right to communicate to only ports at the IP address of the content. <p> This includes any external software or network services that are executed by the content. In this section, we detail these tasks and discuss their implementation. We have developed a prototype architecture using Tcl version 7.5. We chose this version of Tcl because of its interpreter model and security model <ref> [16] </ref>. The interpreter model of Tcl 7.5 permits a hierarchy of interpreters to be constructed where one can be the master of another which is referred to as the slave.
Reference: [17] <author> I. Mohammed and D. M. Dilts. </author> <title> Design for dynamic user-role-based security. </title> <journal> Computers & Security, </journal> <volume> 13(8) </volume> <pages> 661-671, </pages> <year> 1994. </year>
Reference-contexts: Therefore, we believe it is possible, from a performance perspective, to dynamically generate limited domains using DTE, but users and their processes are prevented from generating domains because DTE is used as a mandatory access control model. Other RBAC models permit evolution of access rights using rules <ref> [4, 17] </ref>. However, the rules, like the domains, must be specified in advance, but the rights of content depend on the goals of the content's application which are large in number and are often not known until runtime. In [30], the DTE RBAC model is applied to controlling content.
Reference: [18] <institution> National Institute of Standards and Technology, U.S. Department of Commerce. </institution> <note> NIST FIPS PUB 186, Secure Hash Standard, </note> <month> May </month> <year> 1993. </year>
Reference-contexts: It is fairly straightforward for two principals to exchange a symmetric key given that the two principals have securely obtained each other's public keys (e.g., SSL protocol [8]). If symmetric cryptography is used, i is a message authentication code (MAC) computed with a hash function (e.g., SHA <ref> [18] </ref>) rather than a digital signature (the same message is used, however). We prefer using a hash function MAC over a DES CBC MIC [28] because a DES CBC MIC is not guaranteed to be collision-free.
Reference: [19] <institution> National Institute of Standards and Technology, U.S. Department of Commerce. </institution> <note> NIST FIPS PUB 186, Digital Signature Standard, </note> <month> May </month> <year> 1994. </year>
Reference-contexts: Using a public key algorithm, such as RSA [25] or DSA <ref> [19] </ref>), i is a digital signature of a message created from the concatenation of the remote principal name, content, type, and the nonce. Some applications involve a number of interactions, so to improve the performance of the message authen tication in these applications, symmetric key cryptography should be used.
Reference: [20] <author> B. C. Neuman. </author> <title> Proxy-based authorization and accounting for distributed systems. </title> <booktitle> In International Conference on Distributed Computing Systems, </booktitle> <pages> pages 283-291, </pages> <year> 1993. </year>
Reference-contexts: tickets to Service 4 -- Service requests PAC for DFS; EPAC = DFS ticket 5 -- Service authenticates to DFS using PAC+EPAC File System Objects to grant a service rights to his objects in DCE's Distributed File System (DFS) DCE [21] utilizes an extended version of Kerberos version 5 tickets <ref> [14, 20] </ref> called Privilege Attribute Certificates (PACs) and further extensions to those tickets called Extended PACs (EPACs) for authentication. Kerberos documentation suggests that the authorization-data field be used to represent authorization information.
Reference: [21] <author> Open Software Foundation. </author> <title> Introduction to OSF DCE, revision 1.0 edition, </title> <month> December </month> <year> 1992. </year>
Reference-contexts: Unfortunately, current operating systems are not designed to permit a principal to run a process with limited access rights. We describe a technique for limiting the access rights of a service in the Distributed Computing Environment (DCE) <ref> [21] </ref>. DCE has the advantage that its authorization model is very flexible. DCE associates ACL managers with services to implement the authorization mechanism of those services. Therefore, each service can use its own ACL manager. <p> rights 2 -- Obtain ticket for Service 3 -- Send tickets to Service 4 -- Service requests PAC for DFS; EPAC = DFS ticket 5 -- Service authenticates to DFS using PAC+EPAC File System Objects to grant a service rights to his objects in DCE's Distributed File System (DFS) DCE <ref> [21] </ref> utilizes an extended version of Kerberos version 5 tickets [14, 20] called Privilege Attribute Certificates (PACs) and further extensions to those tickets called Extended PACs (EPACs) for authentication. Kerberos documentation suggests that the authorization-data field be used to represent authorization information.
Reference: [22] <author> A. Prakash and H. Shim. Distview: </author> <title> Support for building efficient collabroative applications using replicated objects. </title> <booktitle> In Proceedings of the Fifth ACM Conference on Computer-Supported Cooperative Work, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: Most of the applications in UARC involve synchronous interaction among users. Since collaborative applications have many common requirements, we are building an application-independent infrastructure called the Collaboratory Builders' Environment (CBE) [15]. The CBE provides services that are common to collaborative applications, such as replicated object management <ref> [22] </ref>, multicast communication [11], and security. The goal of the security infrastructure is to provide the security services necessary to support a variety of collaborative applications. UARC applications are to be implemented as downloaded executable content.
Reference: [23] <author> M. Reiter. </author> <title> A secure group membership protocol. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(1) </volume> <pages> 31-42, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: A secure operating system, such as Trusted Mach [32], satisfies these requirements. Lastly, for applications involving three or more principals, we assume the existence of a secure group membership protocol, such as that described by Reiter <ref> [23] </ref>, to ensure that all valid correctly-behaving principals share the same view of the application's group.
Reference: [24] <author> D. M. Ritchie and K. Thompson. </author> <title> The UNIX timesharing system. </title> <journal> Communications of the ACM, </journal> <volume> 17(7) </volume> <pages> 365-375, </pages> <month> July </month> <year> 1974. </year>
Reference-contexts: Operating systems can control the access rights of external software it executes, but current operating systems are not designed to flexibly restrict a principal's rights. For example, we showed in [12] that current file systems, such as Unix <ref> [24] </ref> and AFS [27], only provide limited mechanisms for a principal to dynamically restrict the access rights of one of his processes. Additionally, in Unix-based systems, the command chroot is available to limit the execution scope of a process to a file system subtree.
Reference: [25] <author> R. Rivest, A. Shamir, and L. Adleman. </author> <title> On digital signatures and public-key cryptosystems. </title> <journal> Communications of the ACM, </journal> <volume> 21(2) </volume> <pages> 120-126, </pages> <month> Febru-ary </month> <year> 1978. </year>
Reference-contexts: Using a public key algorithm, such as RSA <ref> [25] </ref> or DSA [19]), i is a digital signature of a message created from the concatenation of the remote principal name, content, type, and the nonce.
Reference: [26] <author> A. D. Rubin. </author> <title> Trusted distribution of software over the internet. </title> <booktitle> In Proceedings of the Internet Society Symposium on Network and Distributed System Security, </booktitle> <year> 1995. </year>
Reference-contexts: If only the content is malicious, then it can only affect the dynamically-generated domain. Therefore, authentication of application-specific interpreters is vital, to obtain assurance that the interpreter is being granted the proper trust. We use the BETSI protocol to authenticate application-specific interpreters <ref> [26] </ref>. We would prefer that the downloading principal delegate rights to the application-specific interpreter and remote principals using the browser because it is trusted. However, we want delegation to be implicit relative to some application rather than require the downloading principal to specify access rights at runtime.
Reference: [27] <author> M. Satyanarayanan. </author> <title> Integrating security in a large distributed system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 7(3) </volume> <pages> 247-280, </pages> <month> August </month> <year> 1989. </year>
Reference-contexts: Operating systems can control the access rights of external software it executes, but current operating systems are not designed to flexibly restrict a principal's rights. For example, we showed in [12] that current file systems, such as Unix [24] and AFS <ref> [27] </ref>, only provide limited mechanisms for a principal to dynamically restrict the access rights of one of his processes. Additionally, in Unix-based systems, the command chroot is available to limit the execution scope of a process to a file system subtree.
Reference: [28] <author> B. Schneier. </author> <title> Applied Cryptography. </title> <publisher> Wiley & Sons, </publisher> <year> 1994. </year>
Reference-contexts: If symmetric cryptography is used, i is a message authentication code (MAC) computed with a hash function (e.g., SHA [18]) rather than a digital signature (the same message is used, however). We prefer using a hash function MAC over a DES CBC MIC <ref> [28] </ref> because a DES CBC MIC is not guaranteed to be collision-free. In addition, some applications involve more than two principals and a number of interactions, so using symmetric cryptography for authentication becomes more complicated.
Reference: [29] <author> J. G. Steiner, B. C. Neuman, and J. J. Schiller. </author> <title> Kerberos: An authentication service for open network systems. </title> <booktitle> In Proceedings of the Usenix Conference, </booktitle> <pages> pages 191-202, </pages> <year> 1988. </year>
Reference-contexts: Delegation is advantageous in that cryptographic credentials are used to represent the rights being delegated, but flexibility, standardization, and trust are problematic. Some systems, such as Taos [35], delegate rights via roles, so they suffer from the same flexibility limitations as RBAC. Kerberos version 5 <ref> [14, 29] </ref> provides a field for storing access control domains in the delegated credentials, so flexible delegation of rights over a variety of objects is possible. However, access rights must be transferred to servers in a language that the server can understand and enforce.
Reference: [30] <author> D. F. Sterne, T.V. Benzel, L. Badger, K. M. Walker, K. A. Oostendorp, D. L. Sherman, and M. J. Petkac. </author> <title> Browsing the web safely with Domain and Type Enforcement. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <year> 1996. </year> <note> Abstract for a 5-minute presentation. </note>
Reference-contexts: Other RBAC models permit evolution of access rights using rules [4, 17]. However, the rules, like the domains, must be specified in advance, but the rights of content depend on the goals of the content's application which are large in number and are often not known until runtime. In <ref> [30] </ref>, the DTE RBAC model is applied to controlling content. A domain that includes the objects needed by the browser to run and a "scratchpad," public directory are defined. While this permits an extension of current interpreter access domains, it still lacks the flexibility and per-content access control we desire.
Reference: [31] <author> Computer Emergency Response Team. </author> <title> Java implementations can allow connections to an arbitrary host. </title> <note> CERT Advisory CA:96:05, 1996. Available at URL ftp://info.cert.org/pub/cert advisories/CA-96.05.java applet security mgr. </note>
Reference-contexts: By using this architecture, a variety of attacks can be avoided. For example, attacks in which data is sent to unauthorized principals (e.g., <ref> [31] </ref>) can be avoided because principals are authenticated and applications can identify the set of authorized remote principals. The use of services with poor security records, such as sendmail, can be avoided entirely.
Reference: [32] <institution> Trusted Information Systems, Inc. Trusted Mach System Architecture, </institution> <address> TIS TMACH Edoc-0001-94A edition, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: Without trust in the operating system, it is not possible to build trusted applications that run on that operating system. A secure operating system, such as Trusted Mach <ref> [32] </ref>, satisfies these requirements. Lastly, for applications involving three or more principals, we assume the existence of a secure group membership protocol, such as that described by Reiter [23], to ensure that all valid correctly-behaving principals share the same view of the application's group. <p> The Taos kernel is integrated with the authentication service, so all communication is authenticated. The ability to dynamically restrict the access rights of a Taos process is not possible given the current design. Similar services are also being developed for Trusted Mach <ref> [32] </ref> (upon which DTE is the access control model), so a nearly sufficient system environment is not that far off. 8 Future Work and Conclusions We define an architecture that flexibly controls the access rights of downloaded executable content.
Reference: [33] <author> S. T. Vinter. </author> <title> Extended discretionary access controls. </title> <booktitle> In IEEE Symposium on Security and Privacy, </booktitle> <pages> pages 39-49, </pages> <year> 1988. </year>
Reference-contexts: Recent research has yielded systems which provide support for defining limited access control domains, but it is not possible to generate a new domain at run-time. Role-based access control (RBAC) <ref> [1, 9, 33, 35] </ref> models permit a user to execute processes using different principals, called roles, which are associated with different access control domains. Thus, two processes run by the same user can have different access rights.
Reference: [34] <author> J. E. White. </author> <title> Telescript technology: The foundation for the electronic marketplace. General Magic White Paper. </title>
Reference-contexts: On the other hand, custom applications require their own authentication, access control specification, and authorization infrastructure. Therefore, ad hoc security services need to be constructed which is an arduous and error-prone. The Telescript engine <ref> [34] </ref> is another mobile agent interpreter. The Telescript engine differs from the interpreters described above in its use of credentials for authentication and permits for authorization. Credentials are cryptographic representations of the identity of the principal responsible for the content. Permits list the access rights of content.
Reference: [35] <author> E. Wobber, M. Abadi, M. Burrows, and B. Lamp-son. </author> <title> Authentication in the Taos operating system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 12(1) </volume> <pages> 3-32, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: Recent research has yielded systems which provide support for defining limited access control domains, but it is not possible to generate a new domain at run-time. Role-based access control (RBAC) <ref> [1, 9, 33, 35] </ref> models permit a user to execute processes using different principals, called roles, which are associated with different access control domains. Thus, two processes run by the same user can have different access rights. <p> Another mechanism for granting limited rights to a process is delegation. Delegation is advantageous in that cryptographic credentials are used to represent the rights being delegated, but flexibility, standardization, and trust are problematic. Some systems, such as Taos <ref> [35] </ref>, delegate rights via roles, so they suffer from the same flexibility limitations as RBAC. Kerberos version 5 [14, 29] provides a field for storing access control domains in the delegated credentials, so flexible delegation of rights over a variety of objects is possible. <p> Therefore, the kernel should be able to interact with DCE as well to enforce strong authentication on all communications. As a proof of concept, this model of communication has been implemented in the Taos operating system <ref> [35] </ref>. In Taos, processes are associated with authenticators for proving the identity of the owner of a process to other processes. The Taos kernel is integrated with the authentication service, so all communication is authenticated.
Reference: [36] <author> W. Wulf, E. Cohen, W. Corwin, A. Jones, R. Levin, C. Pierson, and F. Pollack. HYDRA: </author> <title> The kernel of a multiprocessor operating system. </title> <journal> Communications of the ACM, </journal> <volume> 17(6) </volume> <pages> 337-345, </pages> <month> June </month> <year> 1974. </year>
Reference-contexts: In order to execute this transform, the principal must have permission to run both x.load and swg.add, so restricting this operation such that only authorized principals can make access rights modifications is straightforward. This model is influenced most strongly by the access control models of Hydra <ref> [36] </ref> and DTE [1]. Like Hydra, access control on the operations of abstract data types are possible, but access rights in our model are associated with principals rather than the content itself (procedures in Hydra). Therefore, management of rights is simpler and consistent with our applications.
References-found: 36

