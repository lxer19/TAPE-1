URL: http://www.research.att.com/library/trs/TRs/98/98.8/98.8.1.body.ps
Refering-URL: http://www.research.att.com/library/trs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: edith@research.att.com  bala@research.att.com  jrex@research.att.com  
Title: subject: Improving End-to-End Performance of the Web Using Server Volumes and Proxy Filters  
Author: Edith Cohen Balachander Krishnamurthy Jennifer Rexford 
Keyword: Web, piggybacking, caching, coherency, prefetching, volumes, filters  
Date: February 6, 1998  
Note: L AT&T Labs Research  date:  from:  
Pubnum: TECHNICAL MEMORANDUM  
Abstract: The rapid growth of the World Wide Web has caused serious performance degradation on the Internet. This paper offers an end-to-end framework by collectively examining the Web components clients, proxies, servers, and the network. Our goal is to reduce user-perceived latency and the number of TCP connections, improve cache coherency and cache replacement, and enable prefetching of resources that are likely to be accessed in the near future. In our scheme, server response messages include piggybacked information customized to the requesting proxy. Our enhancement to the existing request-response protocol does not require per-proxy state at server or per-server state at the proxy, and can be implemented without changes to HTTP 1.1. The server groups related resources into volumes (based on access patterns and the file system's directory structure) and applies a proxy-generated filter (indicating the type of information of interest to the proxy) to tailor the piggyback information. We present efficient data structures for constructing server volumes and applying proxy filters, and a transparent way to perform volume maintenance and piggyback generation at a router along the path between the proxy and the server. We demonstrate the effectiveness of our end-to-end approach by evaluating various volume construction and filtering techniques across a collection of large client and server logs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. M. Duska, D. Marwood, and M. J. Feeley, </author> <title> "The measured access characteristics of WorldWide-Web client proxy caches," </title> <booktitle> in Proceedings of the USENIX Symposium on Internet Technologies and Systems, </booktitle> <address> (Monterey, California), </address> <pages> pp. 23-35, </pages> <month> December </month> <year> 1997. </year> <note> http://www.usenix.org/events/usits97. [2] "Squid internet object cache." http://squid.nlanr.net/Squid. </note>
Reference-contexts: Since many resources are requested multiple times by one or more clients, proxy caching can greatly reduce user-perceived latency, as well as the load on the network and the server. Recent performance studies have shown that proxy caches have a 30-50% hit rate <ref> [1, 2] </ref> . New cache allocation and replacement schemes improve cache performance by extending the conventional LRU policy to incorporate resource size and other notions of cost [3-5] .
Reference: [3] <author> A. Bestavros, R. L. Carter, and M. E. Crovella, </author> <title> "Application-level document caching in the Internet," </title> <booktitle> in Proceedings of the International Workshop on Services in Distributed and Networked Environments, </booktitle> <month> June </month> <year> 1995. </year> <note> http://www.cs.bu.edu/faculty/best/res/papers/Home.html. </note>
Reference: [4] <author> S. Williams, M. Abrams, C. R. Standbridge, G. Abdulla, and E. A. Fox, </author> <title> "Removal policies in network caches for World Wide Web documents," </title> <booktitle> in Proceedings of ACM SIGCOMM, </booktitle> <pages> pp. 293-305, </pages> <month> August </month> <year> 1996. </year> <note> http://www.acm.org/sigcomm/sigcomm96/program.html. </note>
Reference: [5] <author> P. Cao and S. Irani, </author> <title> "Cost-aware WWW proxy caching algorithms," </title> <booktitle> in Proceedings of the USENIX Symposium on Internet Technologies and Systems, </booktitle> <address> (Monterey, California), </address> <pages> pp. 193-206, </pages> <month> December </month> <year> 1997. </year> <note> http://www.usenix.org/events/usits97. </note>
Reference: [6] <author> V. Cate, </author> <title> "Alex A global filesystem," </title> <booktitle> in Proceedings of the USENIX File System Workshop, </booktitle> <pages> pp. 1-12, </pages> <publisher> USENIX Association, </publisher> <month> May </month> <year> 1992. </year>
Reference-contexts: Even when the cache can satisfy the client request, the proxy often has to validate the cached resource to avoid returning out-of-date information. Often, the proxy enforces a time-to-live on the cached resource to limit the likelihood of returning a stale copy <ref> [6, 7] </ref> . Beyond the time-to-live period, the proxy must check with the server to see if the resource has changed, which imposes additional load on the server and increases user-perceived latency.
Reference: [7] <author> A. Dingle and T. Partl, </author> <title> "Web cache coherence," </title> <booktitle> in Proceedings of the International World Wide Web Conference, </booktitle> <month> May </month> <year> 1996. </year> <note> http://www5conf.inria.fr/fich_html/papers/P2/Overview.html. </note>
Reference-contexts: Even when the cache can satisfy the client request, the proxy often has to validate the cached resource to avoid returning out-of-date information. Often, the proxy enforces a time-to-live on the cached resource to limit the likelihood of returning a stale copy <ref> [6, 7] </ref> . Beyond the time-to-live period, the proxy must check with the server to see if the resource has changed, which imposes additional load on the server and increases user-perceived latency.
Reference: [8] <author> S. D. Gribble and E. A. Brewer, </author> <title> "System design issues for Internet middleware services: Deductions from a large client trace," </title> <booktitle> in Proceedings of the USENIX Symposium on Internet Technologies and Systems, </booktitle> <address> (Monterey, California), </address> <month> December </month> <year> 1997. </year> <note> http://www.usenix.org/events/usits97. </note>
Reference-contexts: Beyond the time-to-live period, the proxy must check with the server to see if the resource has changed, which imposes additional load on the server and increases user-perceived latency. In fact, studies show that 15-25% of all server response messages are simply Not Modified responses to validate cached resources <ref> [8, 9] </ref> . To avoid the latency and overhead of establishing a TCP connection for each Web transfer, extensions to HTTP permit proxies to maintain persistent connections to servers, which enable pipelining of multiple requests and responses [10-12] .
Reference: [9] <author> B. Krishnamurthy and C. E. Wills, </author> <title> "Study of piggyback cache validation for proxy caches in the World Wide Web," </title> <booktitle> in Proceedings of the USENIX Symposium on Internet Technologies and Systems, </booktitle> <address> (Monterey, California), </address> <pages> pp. 1-12, </pages> <month> December </month> <year> 1997. </year> <note> http://www.usenix.org/events/usits97. </note>
Reference-contexts: Beyond the time-to-live period, the proxy must check with the server to see if the resource has changed, which imposes additional load on the server and increases user-perceived latency. In fact, studies show that 15-25% of all server response messages are simply Not Modified responses to validate cached resources <ref> [8, 9] </ref> . To avoid the latency and overhead of establishing a TCP connection for each Web transfer, extensions to HTTP permit proxies to maintain persistent connections to servers, which enable pipelining of multiple requests and responses [10-12] . <p> In addition, the server can improve cache coherency by sending a list of resources that have been modified [18, 19] or validating a list of cached resources at the proxy <ref> [9] </ref> . <p> Based on the pseudo-proxy traces extracted from the server logs, we evaluate directory-based and probability-based volumes using the performance metrics discussed in Section 3 and estimate the usefulness of the piggyback information for various proxy policies. We used client logs from AT&T and Digital <ref> [9] </ref> and server logs from Amnesty International USA, Marimba Inc., Apache Group, and Sun Microsystems. <p> In the AT&T log the top 1% of the servers were responsible for over 55% of the resources accessed, and 5.6% of the servers accounted for over half the unique resources accessed <ref> [9] </ref> . <p> Web Proxy Applications The information in server piggyback messages can be used to improve the effectiveness of a variety of proxy policies, with different cost-performance trade-offs: Cache coherency: Using the Last-Modified time information in the piggyback message, the proxy can remove stale items from the cache and freshen valid entries <ref> [9, 19] </ref> . This lowers the likelihood of returning out-of-date resources to clients, and avoids the latency and TCP overheads of generating If-Modified-Since requests to the server on future client requests.
Reference: [10] <author> V. N. Padmanabhan and J. C. Mogul, </author> <title> "Improving HTTP latency," </title> <journal> Computer Networks and ISDN Systems, </journal> <volume> vol. 28, </volume> <pages> pp. 25-35, </pages> <month> December </month> <year> 1995. </year>
Reference: [11] <author> H. F. Nielsen, J. Gettys, A. Baird-Smith, E. Prud'hommeaux, H. W. Lie, and C. Lilley, </author> <title> "Network performance effects of HTTP/1.1, CSS1, </title> <booktitle> and PNG," in Proceedings of ACM SIGCOMM, (Cannes, France), </booktitle> <pages> pp. 155-166, </pages> <month> August </month> <year> 1997. </year> <note> http://www.inria.fr/rodeo/sigcomm97/program.html. </note>
Reference: [12] <author> S. Manley and M. Seltzer, </author> <title> "Web facts and fantasy," </title> <booktitle> in Proceedings of the USENIX Symposium on Internet Technologies and Systems, </booktitle> <address> (Monterey, California), </address> <pages> pp. 125-133, </pages> <month> December </month> <year> 1997. </year> <note> http://www.eecs.harvard.edu/~vino/web/sits.97.html. </note>
Reference: [13] <author> J. C. Mogul, </author> <title> "Hinted caching in the Web," </title> <booktitle> in Proceedings of the ACM SIGOPS European Workshop, </booktitle> <year> 1996. </year> <title> http://mosquitonet.stanford.edu/sigops96/papers/mogul.ps. Improving End-to-End Performance of the Web Using Server Volumes and Proxy Filters 24 </title>
Reference-contexts: Recent studies have begun to consider the potential benefits of using server information to enhance the proxy's policies. For example, the server can aid the proxy in cache allocation and replacement decisions by sending estimates of the time between successive accesses to a resource <ref> [13] </ref> . Similarly, using access patterns to predict future requests, the server can speculatively disseminate resources to the proxy [14] or guide proxy prefetching decisions [15-17] , at the expense of increasing the load on the network and the server.
Reference: [14] <author> A. Bestavros, </author> <title> "Using speculation to reduce server load and service time on the WWW," in Proceedings of the ACM International Conference on Information and Knowledge Management, </title> <note> 1995. http://www.cs.bu.edu/faculty/best/res/papers/Home.html. </note>
Reference-contexts: For example, the server can aid the proxy in cache allocation and replacement decisions by sending estimates of the time between successive accesses to a resource [13] . Similarly, using access patterns to predict future requests, the server can speculatively disseminate resources to the proxy <ref> [14] </ref> or guide proxy prefetching decisions [15-17] , at the expense of increasing the load on the network and the server. <p> Previous work has also suggested and evaluated the use of pairwise dependencies to guide prefetching decisions <ref> [14, 15] </ref> . We extend this work by presenting efficient techniques for constructing and thinning probability-based volumes.
Reference: [15] <author> V. N. Padmanabhan and J. C. Mogul, </author> <title> "Using predictive prefetching to improve World Wide Web latency," </title> <journal> Computer Communication Review, </journal> <volume> vol. 26, no. 3, </volume> <pages> pp. 22-36, </pages> <year> 1996. </year> <note> http://daedalus.cs.berkeley.edu/publications/ccr-july96.ps.gz. </note>
Reference-contexts: Previous work has also suggested and evaluated the use of pairwise dependencies to guide prefetching decisions <ref> [14, 15] </ref> . We extend this work by presenting efficient techniques for constructing and thinning probability-based volumes. <p> Prefetching: The piggyback message can be used by the proxy to prefetch resources <ref> [15] </ref> , or by the server to automatically send resources that are likely to be accessed soon.
Reference: [16] <author> T. M. Kroeger, D. D. E. Long, and J. C. Mogul, </author> <title> "Exploring the bounds of Web latency reduction from caching and prefetching," </title> <booktitle> in Proceedings of the USENIX Symposium on Internet Technologies and Systems, </booktitle> <address> (Monterey, California), </address> <pages> pp. 13-22, </pages> <month> December </month> <year> 1997. </year> <note> http://www.usenix.org/events/usits97. </note>
Reference: [17] <author> M. Crovella and P. Barford, </author> <title> "The network effects of prefetching." </title> <note> To appear in Proceedings of IEEE INFOCOM, April 1998. http://www.cs.bu.edu/faculty/crovella/papers.html. </note>
Reference: [18] <author> C. Liu and P. Cao, </author> <title> "Maintaining strong cache consistency in the World Wide Web," </title> <booktitle> in Proceedings of the IEEE International Conference on Distributed Computing Systems, </booktitle> <pages> pp. 326-334, </pages> <month> May </month> <year> 1997. </year> <note> http://www.cs.wisc.edu/~cao/papers/icache.html. </note>
Reference-contexts: In addition, the server can improve cache coherency by sending a list of resources that have been modified <ref> [18, 19] </ref> or validating a list of cached resources at the proxy [9] .
Reference: [19] <author> B. Krishnamurthy and C. E. Wills, </author> <title> "Piggyback server invalidation for proxy cache coherency," </title> <booktitle> in Proceedings of the World Wide Web-7 Conference, </booktitle> <address> (Brisbane, Australia), </address> <month> April </month> <year> 1998. </year>
Reference-contexts: In addition, the server can improve cache coherency by sending a list of resources that have been modified <ref> [18, 19] </ref> or validating a list of cached resources at the proxy [9] . <p> The simplest approach to maximizing the fraction of requests that are predicted Improving End-to-End Performance of the Web Using Server Volumes and Proxy Filters 7 in advance is to combine all of the server's resources into a single site-wide volume <ref> [19] </ref> . To reduce the volume size, the server can group resources with the same directory prefix in their pathnames, up to some number of levels. <p> We used client logs from AT&T and Digital [9] and server logs from Amnesty International USA, Marimba Inc., Apache Group, and Sun Microsystems. Table 1 summarizes the key information about the client logs, which have been described in detail in previous work <ref> [19, 20] </ref> . 15.80% and 18.7% of the requests resulted in Not Modified responses while validating cached resources, for the Digital and AT&T logs, respectively. The average response size was 12279 bytes in Digital log and 8822 in AT&T. <p> Web Proxy Applications The information in server piggyback messages can be used to improve the effectiveness of a variety of proxy policies, with different cost-performance trade-offs: Cache coherency: Using the Last-Modified time information in the piggyback message, the proxy can remove stale items from the cache and freshen valid entries <ref> [9, 19] </ref> . This lowers the likelihood of returning out-of-date resources to clients, and avoids the latency and TCP overheads of generating If-Modified-Since requests to the server on future client requests.
Reference: [20] <author> J. C. Mogul, F. Douglis, A. Feldmann, and B. Krishnamurthy, </author> <title> "Potential benefits of delta encoding and data compression for HTTP," in Proceedings of ACM SIGCOMM, </title> <booktitle> (Cannes, France), </booktitle> <pages> pp. 181-194, </pages> <month> August </month> <year> 1997. </year> <note> http://www.inria.fr/rodeo/sigcomm97/program.html. </note>
Reference-contexts: We used client logs from AT&T and Digital [9] and server logs from Amnesty International USA, Marimba Inc., Apache Group, and Sun Microsystems. Table 1 summarizes the key information about the client logs, which have been described in detail in previous work <ref> [19, 20] </ref> . 15.80% and 18.7% of the requests resulted in Not Modified responses while validating cached resources, for the Digital and AT&T logs, respectively. The average response size was 12279 bytes in Digital log and 8822 in AT&T. <p> Instead of simply removing stale resources from the cache, the proxy could construct an updated version by requesting that the server transmit the difference between the old and new versions; this proposed enhancement to HTTP <ref> [20] </ref> should be very effective in reducing the amount of data transfer, since most changes are small, relative to the size of the resource [20] . The update fraction metric allows us to estimate the impact of volumes. <p> the proxy could construct an updated version by requesting that the server transmit the difference between the old and new versions; this proposed enhancement to HTTP <ref> [20] </ref> should be very effective in reducing the amount of data transfer, since most changes are small, relative to the size of the resource [20] . The update fraction metric allows us to estimate the impact of volumes. About 40%-50% of requests to cached objects are made to resources previously requested within 5 minutes.
Reference: [21] <author> F. Douglis, A. Feldmann, B. Krishnamurthy, and J. Mogul, </author> <title> "Rate of change and other metrics: a live study of the World Wide Web," </title> <booktitle> in Proceedings of the USENIX Symposium on Internet Technologies and Systems, </booktitle> <address> (Monterey, California), </address> <pages> pp. 147-158, </pages> <month> December </month> <year> 1997. </year> <note> http://www.usenix.org/events/usits97. </note>
Reference-contexts: For resources that were accessed at least twice, about 15% of the responses in the AT&T log reflected that a response had changed <ref> [21] </ref> Improving End-to-End Performance of the Web Using Server Volumes and Proxy Filters 11 Log (days) Number of Number of Requests Unique Resources Requests Clients per Source Considered AIUSA (28) 180,324 7,627 23.64 1,102 Marimba (21) 222,393 24,103 9.23 94 Apache (49) 2,916,549 271,687 10.73 788 Sun (9) 13,037,895 218,518 59.66
Reference: [22] <author> M. F. Arlitt and C. L. Williamson, </author> <title> "Internet Web servers: Workload characterization and implications," </title> <journal> IEEE/ACM Transactions on Networking, </journal> <volume> vol. 5, </volume> <pages> pp. 631-644, </pages> <month> October </month> <year> 1997. </year> <note> http://www.cs.usask.ca/homepages/faculty/carey/research.html. </note>
Reference-contexts: Most of the requests were also for a small number of resources (around 85% of the requests were for less than 10% of the unique resources). These trends are consistent with studies of other Web server logs <ref> [22] </ref> . The Marimba server log was obtained from a site that served small amounts of data with practically all requests using the POST method rather than GET. This gives the Marimba logs a different traffic mix than more traditional server logs.
Reference: [23] <author> R. Fielding, J. Gettys, J. C. Mogul, L. Masinter, P. Leach, H. Frystyk, and T. Berners-Lee, </author> <title> "Hypertext transfer protocol - HTTP/1.1 (draft-ietf-http-v11-spec-rev-01.txt)," </title> <month> November </month> <year> 1997. </year> <note> ftp://ftp.ietf.org/internet-drafts. [24] "Cisco cache engine." http://www.cisco.com/warp/public/751/cache. </note>
Reference-contexts: The relevant metric is the fraction predicted. Our best volumes (Section 4.3) inform the client with meta-attributes prior to issuing 55-80% of requests, while using very small average piggyback sizes. 6 Protocol Deployment Our piggybacking protocol can be incorporated into HTTP 1.1 <ref> [23] </ref> . The performance improvements can be attained by deploying our changes at the popular proxies and servers, since a significant percentage of Web traffic stems from a small portion of proxies and servers (as discussed in Section 4.1). We present an example exchange and quantify the actual overheads.
References-found: 22

