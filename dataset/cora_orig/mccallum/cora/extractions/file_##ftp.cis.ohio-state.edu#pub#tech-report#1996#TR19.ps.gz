URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1996/TR19.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Title: Universal Constructs in Distributed Computations  
Author: Ajay D. Kshemkalyani P. O. Mukesh Singhal 
Keyword: Key words: Causality, Crown, Distributed computation, Path, Segment, Zigzag path.  
Date: March 18, 1996  
Address: Box 12195  Triangle Park NC 27709  2015 Neil Avenue Columbus, OH 43210  
Affiliation: IBM Corporation  Research  Dept of Comp. Info. Sci. The Ohio State University  
Abstract: This paper presents two classes of universal constructs that occur in distributed computations and explores their properties. It first examines a pair of universal constructs termed IO and OI intervals that occur at nodes in distributed computations. These universal constructs are used as building blocks to design two global universal constructs, termed segments and paths, that occur across nodes in distributed computations. These constructs are a generalization of causal chains in a distributed computation. While a causal chain only captures the causal relation, it turns out that message chains in a distributed computation that do not capture causality play a significant role in the analysis of a distributed computation. We show that a number of key concepts and structures characterizing distributed computations are special cases of and can be expressed in terms of the two proposed constructs. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Bhargava and S.R. Lian, </author> <title> Checkpointing and Rollback Recovery in Distributed Systems An Optimistic Approach, </title> <booktitle> in Proc. of the 7th Symp. on Reliable Distributed Systems, </booktitle> <address> Columbus, OH, </address> <month> October </month> <year> 1988, </year> <pages> pp. 3-12. </pages>
Reference-contexts: These constructs are shown to be useful in various applications such as synchronous and causally ordered communication [5], transfer of knowledge [12], necessary and sufficient conditions for a consistent global state [11] which has applications in checkpointing and recovery <ref> [7, 1] </ref> and distributed deadlock detection [8]. The ideas in this paper stemmed from a generalization of the constructs identified in [8] in connection with a characterization of distributed deadlocks. The rest of the paper is organized as follows: Section 2 gives the system model. <p> We now show an application of segments and paths in computations with a monotonically nonde creasing function. 4.2.1 Necessary and Sufficient Conditions for a Global Snapshot: Zigzag Paths Checkpointing [7] is widely used in fault-tolerant computing <ref> [1, 17] </ref>, parallel and distributed debugging [18], and stable property detection [13]. For checkpointing purposes, each node takes local checkpoints asynchronously and a consistent global checkpoint is constructed by chosing a set of local checkpoints, one from each node. Checkpoints are the distinguished events which demarkate consecutive durations at nodes.
Reference: [2] <author> K. M. Chandy, L. Lamport, </author> <title> Distributed Snapshots: Global States of a Distributed System, </title> <journal> ACM Trans. Comput. Systems, </journal> <volume> 3(1) </volume> <pages> 63-75, </pages> <year> 1985. </year>
Reference-contexts: A consistent cut that is recorded is also known as a global snapshot <ref> [2] </ref>. 3 Local Universal Constructs: Intervals on a Node This section introduces terminology and formalizes the local universal constructs that occur at nodes as a result of message sends and receives. <p> Example 1 (contd.): In the crown in Figure 3, s 2 and r 3 lie on the same node, and s 3 and r 4 lie on the same node. Since a range of consecutive integers [x; y] = <ref> [2; 3] </ref> such that for each integer i in the range, s i and r (i+1)mod k lie on the same node, from the above algorithm, segments S g (s 2 ; r 3 ) and S g (s 3 ; r 4 ) can be replaced by path hs 4
Reference: [3] <author> B. Charron-Bost, </author> <title> Measure of Parallelism of Distributed Computations, </title> <booktitle> Proc. of the 6th Annual Symp. on Theoretical Aspects of Computer Science, </booktitle> <year> 1989, </year> <pages> 434-445, </pages> <booktitle> in Lecture Notes in Computer Science 349, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: The higher the number of OI intervals, the higher the concurrency in the computation. The average of the sizes of maximal paths and maximal segments in a distributed compuation is a good indicator of the concurrency in the computation <ref> [3] </ref>. <p> Example 1 (contd.): In the crown in Figure 3, s 2 and r 3 lie on the same node, and s 3 and r 4 lie on the same node. Since a range of consecutive integers [x; y] = <ref> [2; 3] </ref> such that for each integer i in the range, s i and r (i+1)mod k lie on the same node, from the above algorithm, segments S g (s 2 ; r 3 ) and S g (s 3 ; r 4 ) can be replaced by path hs 4
Reference: [4] <author> B. Charron-Bost, </author> <title> Combinatorics and Geometry of Consistent Cuts: Application to Concurrency Theory, </title> <booktitle> Proc. of the International Workshop on Distributed Algorithms, </booktitle> <year> 1989, </year> <pages> 45-56, </pages> <booktitle> in Lecture Notes in Computer Science 392, </booktitle> <publisher> Springer-Verlag. </publisher>
Reference-contexts: A run of a computation <ref> [4] </ref>: C = ( S C i ) is a run of a computation if (C; ) is acyclic. It is observed that all real computations are acyclic and (C; ) is a strict partial order. <p> A run of a computation [4]: C = ( S C i ) is a run of a computation if (C; ) is acyclic. It is observed that all real computations are acyclic and (C; ) is a strict partial order. A partial run of a computation <ref> [4, 10] </ref>: Any C 0 C is a partial run of a computation if C 0 is left-closed 1 under . Let C 0 i denote the projection of C 0 on node i. Clearly, C 0 = S i .
Reference: [5] <author> B. Charron-Bost, F. Mattern, G. Tel, </author> <title> Synchronous and Asynchronous Communication in Distributed Computation, </title> <note> Distributed Computing (to appear). 18 </note>
Reference-contexts: A number of key concepts and structures characterizing distributed computations are special cases of and can be expressed in terms of these universal constructs. These constructs are shown to be useful in various applications such as synchronous and causally ordered communication <ref> [5] </ref>, transfer of knowledge [12], necessary and sufficient conditions for a consistent global state [11] which has applications in checkpointing and recovery [7, 1] and distributed deadlock detection [8]. <p> We next show how segments and paths can be used to express some structures important in analyzing distributed computations. 4.1.1 Realizable Synchronous Computations: The Crown Criterion In their classification of a hierarchy of communication patterns, Charron-Bost et al. <ref> [5] </ref> discovered that a distributed algorithm designed to run correctly on asynchronous systems (called A-computations) may not run correctly when executed on a synchronous system an algorithm that works correctly on an asynchronous system may deadlock when run on a synchronous system. <p> A-computations that can be realized under synchronous communication are called Realizable with Synchronous Communication (RSC) computations. 3 Charron-Bost et al. <ref> [5] </ref> showed that RSC computa 3 Formally, a computation C is RSC if there exists a non-separated linear extension of the poset (C; &lt;). <p> Charron-Bost et al. <ref> [5] </ref> developed a criterion (called the crown criterion) to determine if an A-computation can be realized on a system with synchronous communication. This criterion makes use of a structure in a distributed computation, called crown, that is defined next. Definition 3 Let C be a computation. <p> Charron-Bost et al. <ref> [5] </ref> showed that a computation is RSC, i.e., it can be realized under synchronous communication, iff it contains no crown (called the crown criterion). (s i ; r i ), i 2 [0; 5]. <p> Charron-Bost et al. [5] showed that a computation is RSC, i.e., it can be realized under synchronous communication, iff it contains no crown (called the crown criterion). (s i ; r i ), i 2 <ref> [0; 5] </ref>. There is also a causal chain from s i to r (i+1)mod 6 , for i 2 [0; 5]. Definition 3 specifies the contraints between s i and r (i+1)mod k , for i 2 [0; k 1]. <p> showed that a computation is RSC, i.e., it can be realized under synchronous communication, iff it contains no crown (called the crown criterion). (s i ; r i ), i 2 <ref> [0; 5] </ref>. There is also a causal chain from s i to r (i+1)mod 6 , for i 2 [0; 5]. Definition 3 specifies the contraints between s i and r (i+1)mod k , for i 2 [0; k 1]. Note that each such constraint is simply a segment S g (s i , r (i+1)mod k ). <p> that: 8i 2 [0; k 1] : S g (s i ; r (i+1)mod k ) Example 1: The crown of size 6, illustrated in Figure 3, can be expressed in terms of segments as: CROW N = fS g (s i ; r (i+1)mod k ) : i 2 <ref> [0; 5] </ref>g Refinement of Definition 4: Definition 4 expresses a crown of size k in a computation in terms of k segments. We now show that a crown of size k can generally be expressed in terms of less than k segments and paths.
Reference: [6] <author> C. A. Fidge, </author> <title> Timestamps in Message-Passing Systems That Preserve Partial Ordering, </title> <journal> Australian Computer Science Communications, </journal> <volume> Vol. 10, No. 1, </volume> <pages> 56-66, </pages> <month> February </month> <year> 1988. </year>
Reference: [7] <author> R. Koo, S. Toueg, </author> <title> Checkpointing and Rollback Recovery for Distributed Systems, </title> <journal> IEEE Trans. Software Engg., </journal> <volume> 13(1), </volume> <pages> 23-31, </pages> <month> Jan. </month> <year> 1987. </year>
Reference-contexts: These constructs are shown to be useful in various applications such as synchronous and causally ordered communication [5], transfer of knowledge [12], necessary and sufficient conditions for a consistent global state [11] which has applications in checkpointing and recovery <ref> [7, 1] </ref> and distributed deadlock detection [8]. The ideas in this paper stemmed from a generalization of the constructs identified in [8] in connection with a characterization of distributed deadlocks. The rest of the paper is organized as follows: Section 2 gives the system model. <p> We now show an application of segments and paths in computations with a monotonically nonde creasing function. 4.2.1 Necessary and Sufficient Conditions for a Global Snapshot: Zigzag Paths Checkpointing <ref> [7] </ref> is widely used in fault-tolerant computing [1, 17], parallel and distributed debugging [18], and stable property detection [13]. For checkpointing purposes, each node takes local checkpoints asynchronously and a consistent global checkpoint is constructed by chosing a set of local checkpoints, one from each node.
Reference: [8] <author> A. D. Kshemkalyani, M. Singhal, </author> <title> On Characterization and Correctness of Distributed Deadlock Detection, </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 22(1), </volume> <pages> 44-59, </pages> <month> July </month> <year> 1994. </year> <note> (Also appears as Tech. Rep. </note> <institution> TR-06/90-TR15, Comp. Sci., The Ohio State University, </institution> <month> June </month> <year> 1990.) </year>
Reference-contexts: These constructs are shown to be useful in various applications such as synchronous and causally ordered communication [5], transfer of knowledge [12], necessary and sufficient conditions for a consistent global state [11] which has applications in checkpointing and recovery [7, 1] and distributed deadlock detection <ref> [8] </ref>. The ideas in this paper stemmed from a generalization of the constructs identified in [8] in connection with a characterization of distributed deadlocks. The rest of the paper is organized as follows: Section 2 gives the system model. <p> such as synchronous and causally ordered communication [5], transfer of knowledge [12], necessary and sufficient conditions for a consistent global state [11] which has applications in checkpointing and recovery [7, 1] and distributed deadlock detection <ref> [8] </ref>. The ideas in this paper stemmed from a generalization of the constructs identified in [8] in connection with a characterization of distributed deadlocks. The rest of the paper is organized as follows: Section 2 gives the system model. Section 3 defines the local constructs in terms of message send and receive events, and presents their properties. <p> Paths and segments based on this semantics are treated in Section 4.3. The next section defines the global constructs using the IO and OI intervals and shows their applications. 4 Global Universal Constructs: Paths and Segments This section defines and analyses global universal constructs, namely, paths and segments <ref> [8] </ref>, that span nodes in a computation. It shows that several key concepts and structures characterizing distributed computations are special cases of and can be expressed in terms of these constructs. <p> The notion of path is discussed next to characterize such a sequence of events. Thus, successive events in a sequence at which outward dependencies are established satisfy a weaker causal relationship in a path than in a segment <ref> [8] </ref>. <p> Examples of such properties are deadlocks, termination of a computation, etc. In this section, segments and paths are defined for stable properties, with special emphasis on deadlocks <ref> [8] </ref>. A similar approach can be used to define segments and paths for other stable properties. 4.3.1 Conditions for Deadlocks We consider deadlocks in the request-reply model in a distributed system. In this model, a process sends a request and blocks until it receives a reply to its request. <p> This predicate becomes true at the start of the duration between two distinguished events and becomes false at some time before the next distinguished event on the receipt of the reply. In this context, the definitions of segment S d and path P d are defined next <ref> [8] </ref>.
Reference: [9] <author> L. Lamport, </author> <title> Time, Clocks, and the Ordering of Events in a Distributed System, </title> <journal> Communications of the ACM, </journal> <volume> 558-565, 21(7), </volume> <month> July </month> <year> 1978. </year>
Reference-contexts: The state of a node is defined by the values of the variables associated with its computation. The state of a node is defined by the history of events executed by it at any time. Some definitions from the literature are presented next. Causality <ref> [9, 14] </ref>: For events in C, the causality (or happens before) relation is defined as the smallest transitive relation satisfying the following two conditions: (i) if a; b 2 C i and a occurs before b, then a b; (ii) if a is the sending of a message and b is
Reference: [10] <author> F. Mattern, </author> <title> Virtual Time and Global States of Distributed Systems, Parallel and Distributed Algorithms, </title> <publisher> North-Holland, </publisher> <pages> 215-226, </pages> <year> 1989. </year>
Reference-contexts: A run of a computation [4]: C = ( S C i ) is a run of a computation if (C; ) is acyclic. It is observed that all real computations are acyclic and (C; ) is a strict partial order. A partial run of a computation <ref> [4, 10] </ref>: Any C 0 C is a partial run of a computation if C 0 is left-closed 1 under . Let C 0 i denote the projection of C 0 on node i. Clearly, C 0 = S i .
Reference: [11] <author> R. Netzer, J. Xu, </author> <title> Necessary and Sufficient Conditions for Consistent Global Snapshots, </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <volume> 6(2), </volume> <pages> 165-169, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: These constructs are shown to be useful in various applications such as synchronous and causally ordered communication [5], transfer of knowledge [12], necessary and sufficient conditions for a consistent global state <ref> [11] </ref> which has applications in checkpointing and recovery [7, 1] and distributed deadlock detection [8]. The ideas in this paper stemmed from a generalization of the constructs identified in [8] in connection with a characterization of distributed deadlocks. <p> The xth duration (also called the xth checkpoint interval) at a process is the computation from its xth checkpoint till its x + 1st checkpoint. It is an important problem to efficiently determine if an arbitrary set of local checkpoints belong to a consistent global checkpoint. Netzer and Xu <ref> [11] </ref> introduced the concept of zigzag path as a generalization of Lamport's causality relation, and showed that two local checkpoints cannot lie on a consistent global checkpoint iff a zigzag path exists between the two checkpoints. A zigzag path is defined next.
Reference: [12] <author> P. Panengaden, K. Taylor, </author> <title> Concurrent Common Knowledge: A New Definition Of Agreement for Asynchronous Systems, </title> <booktitle> Proc. of the 5th ACM Symposium on Principles of Distributed Computing, </booktitle> <year> 1988, </year> <pages> pp. 197-209. </pages>
Reference-contexts: A number of key concepts and structures characterizing distributed computations are special cases of and can be expressed in terms of these universal constructs. These constructs are shown to be useful in various applications such as synchronous and causally ordered communication [5], transfer of knowledge <ref> [12] </ref>, necessary and sufficient conditions for a consistent global state [11] which has applications in checkpointing and recovery [7, 1] and distributed deadlock detection [8]. The ideas in this paper stemmed from a generalization of the constructs identified in [8] in connection with a characterization of distributed deadlocks.
Reference: [13] <author> A. Schiper, A. Sandoz, </author> <title> Strong Stable Properties in Distributed Systems, </title> <journal> Distributed Computing, </journal> <volume> 8 </volume> <pages> 93-103, </pages> <year> 1994. </year>
Reference-contexts: We now show an application of segments and paths in computations with a monotonically nonde creasing function. 4.2.1 Necessary and Sufficient Conditions for a Global Snapshot: Zigzag Paths Checkpointing [7] is widely used in fault-tolerant computing [1, 17], parallel and distributed debugging [18], and stable property detection <ref> [13] </ref>. For checkpointing purposes, each node takes local checkpoints asynchronously and a consistent global checkpoint is constructed by chosing a set of local checkpoints, one from each node. Checkpoints are the distinguished events which demarkate consecutive durations at nodes. <p> Note that a Z-cycle is nothing but a cyclic path. 14 4.3 Segments and Paths for Stable Properties A stable property is a property of the system state such that once it becomes true, it continues to hold unless there is an intervention in the system state <ref> [13] </ref>. Examples of such properties are deadlocks, termination of a computation, etc. In this section, segments and paths are defined for stable properties, with special emphasis on deadlocks [8].
Reference: [14] <author> R. Schwarz, F. Mattern, </author> <title> Detecting Causal Relationships in Distributed Computations: In Search of the Holy Grail, </title> <journal> Distributed Computing, </journal> <volume> 7, </volume> <pages> 149-174, </pages> <year> 1994. </year>
Reference-contexts: The state of a node is defined by the values of the variables associated with its computation. The state of a node is defined by the history of events executed by it at any time. Some definitions from the literature are presented next. Causality <ref> [9, 14] </ref>: For events in C, the causality (or happens before) relation is defined as the smallest transitive relation satisfying the following two conditions: (i) if a; b 2 C i and a occurs before b, then a b; (ii) if a is the sending of a message and b is
Reference: [15] <author> M. Spezialetti and R. Gupta, </author> <title> Perturbation Analysis: A Static Analysis Approach for Non-intrusive Monitoring of Parallel Programs, </title> <booktitle> Int'l Conf. on Parallel Processing, </booktitle> <pages> pp. 81-88, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: Knowledge plays a significant role in the evaluation of global predicates, debugging and establishing breakpoints in distributed programs, evaluating triggers, industrial process control, and most of all, in monitoring, analyzing, and controlling a distributed execution <ref> [15, 16] </ref>. The knowledge is transferred among processes through send and receive events and the extent of knowledge dissemination is determined by the message communication pattern among nodes. Flow of knowledge among processes is identified by the causality relation between events on the nodes.
Reference: [16] <author> M. Spezialetti, </author> <title> An Approach to Reducing Delays in Recognizing Distributed Event Occurrences, </title> <booktitle> Proc. of the ACM/ONR Workshop on Parallel and Distributed Debugging, </booktitle> <pages> pp. 151-161, </pages> <year> 1991. </year>
Reference-contexts: Knowledge plays a significant role in the evaluation of global predicates, debugging and establishing breakpoints in distributed programs, evaluating triggers, industrial process control, and most of all, in monitoring, analyzing, and controlling a distributed execution <ref> [15, 16] </ref>. The knowledge is transferred among processes through send and receive events and the extent of knowledge dissemination is determined by the message communication pattern among nodes. Flow of knowledge among processes is identified by the causality relation between events on the nodes.
Reference: [17] <author> S. Venkatesan, T. Juang, </author> <title> Optimistic Crash Recovery Without Rolling back Nonfaulty Processors, </title> <journal> Information Science, </journal> <volume> Vol 78, </volume> <year> 1994, </year> <pages> pp. 49-68. </pages>
Reference-contexts: We now show an application of segments and paths in computations with a monotonically nonde creasing function. 4.2.1 Necessary and Sufficient Conditions for a Global Snapshot: Zigzag Paths Checkpointing [7] is widely used in fault-tolerant computing <ref> [1, 17] </ref>, parallel and distributed debugging [18], and stable property detection [13]. For checkpointing purposes, each node takes local checkpoints asynchronously and a consistent global checkpoint is constructed by chosing a set of local checkpoints, one from each node. Checkpoints are the distinguished events which demarkate consecutive durations at nodes.
Reference: [18] <author> S. Venkatesan, B. Dathan, </author> <title> Testing and Debugging Programs Using Global Predicates, </title> <journal> IEEE Trans. on Software Engineering, </journal> <month> February </month> <year> 1985, </year> <pages> pp. 163-177. 19 </pages>
Reference-contexts: We now show an application of segments and paths in computations with a monotonically nonde creasing function. 4.2.1 Necessary and Sufficient Conditions for a Global Snapshot: Zigzag Paths Checkpointing [7] is widely used in fault-tolerant computing [1, 17], parallel and distributed debugging <ref> [18] </ref>, and stable property detection [13]. For checkpointing purposes, each node takes local checkpoints asynchronously and a consistent global checkpoint is constructed by chosing a set of local checkpoints, one from each node. Checkpoints are the distinguished events which demarkate consecutive durations at nodes.
References-found: 18

