URL: http://www.cs.washington.edu/homes/ruzzo/papers/bag-sicomp.ps
Refering-URL: http://www.cs.washington.edu/homes/ruzzo/
Root-URL: 
Title: A Time-Space Tradeoff for Undirected Graph Traversal by Walking Automata  
Author: Paul Beame Allan Borodin Prabhakar Raghavan Walter L. Ruzzo Martin Tompa 
Address: Box 352350, Seattle, WA, U.S.A. 98195  Toronto, Toronto, Ontario, Canada M5S 1A4  P. O. Box 218, Yorktown Heights, NY, U.S.A. 10598  
Affiliation: Department of Computer Science and Engineering, University of Washington,  Department of Computer Science, University of  IBM Research Division, Thomas J. Watson Research Center,  
Date: March 5, 1997  
Abstract: We prove a time-space tradeoff for traversing undirected graphs, using a structured model that is a nonjumping variant of Cook and Rackoff's "Jumping Automata for Graphs". fl This material is based upon work supported in part by the Natural Sciences and Engineering Research Council of Canada, by the National Science Foundation under Grants CCR-8703196, CCR-8858799, CCR-8907960, and CCR-9002891, and by IBM under Research Contract 16980043. A portion of this work was performed while the fourth author was visiting the University of Toronto, whose hospitality is gratefully acknowledged. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> L. M. Adleman. </author> <title> Two theorems on random polynomial time. </title> <booktitle> In 19th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 75-83, </pages> <address> Ann Arbor, MI, </address> <month> Oct. </month> <year> 1978. </year> <note> IEEE. </note>
Reference-contexts: More interestingly, they also prove a lower bound of (log 2 n= log log n) on the space required by JAGs solving this problem, nearly matching the upper bound. Standard techniques (Adleman <ref> [1] </ref>, Aleli-unas et al. [2]) extend this result to any randomized JAG whose time bound is at most exponential in its space bound. Berman and Simon [11] extend this space lower bound to probabilistic JAGs with even larger time bounds, namely exponential in log O (1) n.
Reference: [2] <author> R. Aleliunas, R. M. Karp, R. J. Lipton, L. Lovasz, and C. W. Rackoff. </author> <title> Random walks, universal traversal sequences, and the complexity of maze problems. </title> <booktitle> In 20th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 218-223, </pages> <address> San Juan, Puerto Rico, </address> <month> Oct. </month> <year> 1979. </year> <note> IEEE. </note>
Reference-contexts: deterministically in polynomial time and small space simultaneously. (See Tompa [32] and Edmonds and Poon [22] for lower bounds, and Barnes et al. [5] for an upper bound.) In contrast, undirected graphs can be traversed in polynomial time and logarithmic space probabilistically by using a random walk (Aleliunas et al. <ref> [2] </ref>, Borodin et al. [15]); this implies similar resource bounds on (nonuniform) deterministic algorithms (Aleliunas et al. [2]). <p> lower bounds, and Barnes et al. [5] for an upper bound.) In contrast, undirected graphs can be traversed in polynomial time and logarithmic space probabilistically by using a random walk (Aleliunas et al. <ref> [2] </ref>, Borodin et al. [15]); this implies similar resource bounds on (nonuniform) deterministic algorithms (Aleliunas et al. [2]). <p> Depth-first or breadth-first search can traverse any n vertex, m edge undirected graph in O (m + n) time, but requires (n) space. Alternatively, a random walk can traverse an undirected graph using only O (log n) space, but requires fi (mn) expected time (Aleliunas et al. <ref> [2] </ref>). <p> More interestingly, they also prove a lower bound of (log 2 n= log log n) on the space required by JAGs solving this problem, nearly matching the upper bound. Standard techniques (Adleman [1], Aleli-unas et al. <ref> [2] </ref>) extend this result to any randomized JAG whose time bound is at most exponential in its space bound. Berman and Simon [11] extend this space lower bound to probabilistic JAGs with even larger time bounds, namely exponential in log O (1) n. <p> Several authors have considered traversal of undirected regular graphs by a WAG with an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. <ref> [2] </ref>, Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa [16], Bridgland [17], Buss and Tompa [19], Istrail [25], Karloff et al. [26], Tompa [33]).
Reference: [3] <author> N. Alon, Y. Azar, and Y. Ravid. </author> <title> Universal sequences for complete graphs. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 27 </volume> <pages> 25-28, </pages> <year> 1990. </year>
Reference-contexts: Several authors have considered traversal of undirected regular graphs by a WAG with an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. <ref> [3] </ref>, Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa [16], Bridgland [17], Buss and Tompa [19], Istrail [25], Karloff et al. [26], Tompa [33]).
Reference: [4] <author> A. Bar-Noy, A. Borodin, M. Karchmer, N. Linial, and M. Werman. </author> <title> Bounds on universal sequences. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(2) </volume> <pages> 268-277, </pages> <month> Apr. </month> <year> 1989. </year>
Reference-contexts: Several authors have considered traversal of undirected regular graphs by a WAG with an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. <ref> [4] </ref>, Borodin, Ruzzo, and Tompa [16], Bridgland [17], Buss and Tompa [19], Istrail [25], Karloff et al. [26], Tompa [33]). A result of Borodin, Ruzzo, and Tompa [16] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n).
Reference: [5] <author> G. Barnes, J. F. Buss, W. L. Ruzzo, and B. Schieber. </author> <title> A sublinear space, polynomial time algorithm for directed s-t connectivity. </title> <booktitle> In Proceedings, Structure in Complexity Theory, Seventh Annual Conference, </booktitle> <pages> pages 27-33, </pages> <address> Boston, MA, </address> <month> June </month> <year> 1992. </year> <note> IEEE. To appear, SIAM Journal on Computing. </note>
Reference-contexts: For instance, although directed graphs can be traversed nondeterministically in polynomial time and logarithmic space simultaneously, it is not widely believed that they can be traversed deterministically in polynomial time and small space simultaneously. (See Tompa [32] and Edmonds and Poon [22] for lower bounds, and Barnes et al. <ref> [5] </ref> for an upper bound.) In contrast, undirected graphs can be traversed in polynomial time and logarithmic space probabilistically by using a random walk (Aleliunas et al. [2], Borodin et al. [15]); this implies similar resource bounds on (nonuniform) deterministic algorithms (Aleliunas et al. [2]).
Reference: [6] <author> G. Barnes and J. A. Edmonds. </author> <title> Time-space lower bounds for directed s-t connectivity on JAG models. </title> <booktitle> In Proceedings 34th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 228-237, </pages> <address> Palo Alto, CA, </address> <month> Nov. </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: Following the preliminary appearance of these results, Edmonds [21] proved a much stronger result for traversing undirected graphs, and Barnes and Edmonds <ref> [6] </ref> and Edmonds and Poon [22] proved even more dramatic tradeoffs for traversing directed graphs. 2.
Reference: [7] <author> G. Barnes and U. Feige. </author> <title> Short random walks on graphs. </title> <booktitle> In Proceedings of the Twenty-Fifth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 728-737, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Alternatively, a random walk can traverse an undirected graph using only O (log n) space, but requires fi (mn) expected time (Aleliunas et al. [2]). In fact, Feige [23], based on earlier work of Broder et al. [18] and Barnes and Feige <ref> [7] </ref>, has shown that there is a spectrum of compromises between time and space for this problem: any graph can be traversed in space S and expected time T , where ST mn (log n) O (1) .
Reference: [8] <author> G. Barnes and W. L. Ruzzo. </author> <title> Deterministic algorithms for undirected s-t connectivity using polynomial time and sublinear space. </title> <booktitle> In Proceedings of the Twenty-Third Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 43-53, </pages> <address> New Orleans, LA, </address> <month> May </month> <year> 1991. </year> <note> To appear, Computational Complexity. 23 </note>
Reference-contexts: More recent work presents uniform deterministic polynomial time algorithms for the undirected case using sublinear space (Barnes and Ruzzo <ref> [8] </ref>), and even O (log 2 n) space (Nisan [28]), as well as a deterministic algorithm using O (log 1:5 n) space, but more than polynomial time (Nisan et al. [29]). In this paper we concentrate on the undirected case.
Reference: [9] <author> P. W. Beame, A. Borodin, P. Raghavan, W. L. Ruzzo, and M. Tompa. </author> <title> Time-space tradeoffs for undirected graph traversal. </title> <booktitle> In Proceedings 31st Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 429-438, </pages> <address> St. Louis, MO, </address> <month> Oct. </month> <year> 1990. </year> <note> IEEE. </note>
Reference-contexts: In time fi (d), this has touched all fi (d) connecting edges incident to that entry vertex, which was impossible in the construction above. 22 4. Open Problem The obvious important problem is to strengthen and generalize these lower bounds. Following an earlier version of this paper <ref> [9] </ref>, Edmonds [21] proved a much stronger time-space tradeoff on general JAGs: for every z 2, a JAG with at most 1 28z log log n pebbles and at most 2 log z n states requires time n 2 ((log n)=(log log n)) to traverse 3-regular graphs.
Reference: [10] <author> P. W. Beame, A. Borodin, P. Raghavan, W. L. Ruzzo, and M. Tompa. </author> <title> Time-space tradeoffs for undirected graph traversal by graph automata. </title> <journal> Information and Computation, </journal> <volume> 130(2) </volume> <pages> 101-129, </pages> <month> Nov. </month> <year> 1996. </year>
Reference-contexts: Furthermore, as Savitch [31] shows, a JAG with the additional power to move a pebble from vertex i to vertex i + 1 can simulate an arbitrary Turing machine on directed graphs. Even without this extra feature, we have shown <ref> [10] </ref> that JAGs are as powerful as Turing machines for the purposes of solving undirected graph problems (our main focus). <p> linear time when m = O (n) since the families of regular graphs mentioned above have degree d = !(1) and hence m = !(n); see Sections 3 and 4.) We prove upper and lower bounds for undirected graph problems on other variants of the JAG in a companion paper <ref> [10] </ref>. Following the preliminary appearance of these results, Edmonds [21] proved a much stronger result for traversing undirected graphs, and Barnes and Edmonds [6] and Edmonds and Poon [22] proved even more dramatic tradeoffs for traversing directed graphs. 2. <p> This gives a lower bound of (m log d) = (m log (n=P )) on time. When P &lt; n 1=3 , a similar analysis suffices, choosing d = log n. 2 Corollary 4 is tight: time O (m) is possible with O (n) pebbles <ref> [10, Theorem 15] </ref>. Note also that, when P = fi (n), the time is still (m log (n=P )) [10, Theorem 3]. <p> When P &lt; n 1=3 , a similar analysis suffices, choosing d = log n. 2 Corollary 4 is tight: time O (m) is possible with O (n) pebbles [10, Theorem 15]. Note also that, when P = fi (n), the time is still (m log (n=P )) <ref> [10, Theorem 3] </ref>. Various constants in the Theorem can be improved by slight modification to the construction and/or its analysis, but in the interest of clarity we will not present these refinements.
Reference: [11] <author> P. Berman and J. Simon. </author> <title> Lower bounds on graph threading by probabilistic machines. </title> <booktitle> In 24th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 304-311, </pages> <address> Tucson, AZ, </address> <month> Nov. </month> <year> 1983. </year> <note> IEEE. </note>
Reference-contexts: Standard techniques (Adleman [1], Aleli-unas et al. [2]) extend this result to any randomized JAG whose time bound is at most exponential in its space bound. Berman and Simon <ref> [11] </ref> extend this space lower bound to probabilistic JAGs with even larger time bounds, namely exponential in log O (1) n. In this paper we use a variant of the JAG to study the tradeoff between time and space for the problem of undirected graph traversal.
Reference: [12] <author> M. Blum and D. C. Kozen. </author> <title> On the power of the compass (or, why mazes are easier to search than graphs). </title> <booktitle> In 19th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 132-142, </pages> <address> Ann Arbor, MI, </address> <month> Oct. </month> <year> 1978. </year> <note> IEEE. </note>
Reference-contexts: The pebbles represent vertex names that a structured algorithm might record in its workspace. Walking represents replacing a vertex name by some adjacent vertex found in the input. Jumping represents copying a previously recorded vertex name. Rabin (see [20]), Savitch [31], Blum and Sakoda [13], Blum and Kozen <ref> [12] </ref>, Hemmerling [24] and others have considered similar models; see Hemmerling's monograph for an extensive bibliography (going back over a century) emphasizing results for "labyrinths" | graphs embedded in two- or three-dimensional Euclidean space. 2 The JAG is a structured model, but not a weak one. <p> The JAG variant we consider is more restricted than the model introduced by Cook and Rackoff, because the pebbles are not permitted to jump. This nonjumping model is closer to the one studied by Blum and Sakoda [13], Blum and Kozen <ref> [12] </ref> and Hemmerling [24]. We will distinguish this nonjumping variant by referring to it as a WAG | "walking automaton for graphs".
Reference: [13] <author> M. Blum and W. J. Sakoda. </author> <title> On the capability of finite automata in 2 and 3 dimensional space. </title> <booktitle> In 18th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 147-161, </pages> <address> Providence, RI, </address> <month> Oct. </month> <year> 1977. </year> <note> IEEE. </note>
Reference-contexts: The pebbles represent vertex names that a structured algorithm might record in its workspace. Walking represents replacing a vertex name by some adjacent vertex found in the input. Jumping represents copying a previously recorded vertex name. Rabin (see [20]), Savitch [31], Blum and Sakoda <ref> [13] </ref>, Blum and Kozen [12], Hemmerling [24] and others have considered similar models; see Hemmerling's monograph for an extensive bibliography (going back over a century) emphasizing results for "labyrinths" | graphs embedded in two- or three-dimensional Euclidean space. 2 The JAG is a structured model, but not a weak one. <p> The JAG variant we consider is more restricted than the model introduced by Cook and Rackoff, because the pebbles are not permitted to jump. This nonjumping model is closer to the one studied by Blum and Sakoda <ref> [13] </ref>, Blum and Kozen [12] and Hemmerling [24]. We will distinguish this nonjumping variant by referring to it as a WAG | "walking automaton for graphs".
Reference: [14] <author> A. Borodin. </author> <title> Structured vs. general models in computational complexity. </title> <editor> L'Enseignement Mathematique, XXVIII(3-4):171-190, July-Dec. </editor> <booktitle> 1982. Also in [27, </booktitle> <pages> pages 47-65]. </pages>
Reference-contexts: Although it would be desirable to show a tradeoff for a general model of computation such as a random access machine, obtaining such a tradeoff is beyond the reach of current techniques. Thus it is natural to consider a "structured" model (Borodin <ref> [14] </ref>), that is, one whose basic move is based on the adjacencies of the graph, as opposed to one whose basic move is based on the bits in the graph's encoding.
Reference: [15] <author> A. Borodin, S. A. Cook, P. W. Dymond, W. L. Ruzzo, and M. Tompa. </author> <title> Two applications of inductive counting for complementation problems. </title> <journal> SIAM Journal on Computing, </journal> <volume> 18(3) </volume> <pages> 559-578, </pages> <month> June </month> <year> 1989. </year> <note> See also 18(6): 1283, </note> <month> Dec. </month> <year> 1989. </year>
Reference-contexts: and small space simultaneously. (See Tompa [32] and Edmonds and Poon [22] for lower bounds, and Barnes et al. [5] for an upper bound.) In contrast, undirected graphs can be traversed in polynomial time and logarithmic space probabilistically by using a random walk (Aleliunas et al. [2], Borodin et al. <ref> [15] </ref>); this implies similar resource bounds on (nonuniform) deterministic algorithms (Aleliunas et al. [2]).
Reference: [16] <author> A. Borodin, W. L. Ruzzo, and M. Tompa. </author> <title> Lower bounds on the length of universal traversal sequences. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 45(2) </volume> <pages> 180-203, </pages> <month> Oct. </month> <year> 1992. </year>
Reference-contexts: authors have considered traversal of undirected regular graphs by a WAG with an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa <ref> [16] </ref>, Bridgland [17], Buss and Tompa [19], Istrail [25], Karloff et al. [26], Tompa [33]). A result of Borodin, Ruzzo, and Tompa [16] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n). <p> (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa <ref> [16] </ref>, Bridgland [17], Buss and Tompa [19], Istrail [25], Karloff et al. [26], Tompa [33]). A result of Borodin, Ruzzo, and Tompa [16] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n). Thus, for the particularly weak version of logarithmic space corresponding to the case P = 1, a quadratic lower bound on time is known. <p> Proposition 1: d-regular, n vertex graphs exist if and only if dn is even and d n 1. (See <ref> [16, Proposition 1] </ref>, for example, for a proof.) To allow use of -notation in expressing our lower bounds, however, the "time" used by a WAG must be defined for all sufficiently large n. <p> On the other hand, higher degree reduces the graph's maximum possible diameter, which perhaps helps. It is known that the length of universal traversal sequences is not monotonic in d, although it may be monotonic up to some large threshold, perhaps d = bn=2c 1. (See Borodin et al. <ref> [16] </ref> for a discussion.) Similarly, the complexity of st-connectivity is not monotone in d, since regular graphs of degree d &gt; bn=2c 1 are necessarily connected, but it is plausibly monotone for d up to cn, for some constant 0 &lt; c &lt; 1=2. <p> Theorem 2 applies, specifically case (1). This gives a time lower bound of (md) = (m 1+1=(3P +3) ). 2 For P = 1 the (m 7=6 ) bound given above is not as strong as the (m 2 ) bound given by Borodin et al. <ref> [16] </ref>, but is included for comparative purposes. Also, the (m 2 ) lower bound for universal traversal sequences holds for degree up to n=3 2, so the decrease in the ratio of bound (2) to m noted above certainly is an artifact of our proof when P = 1. <p> Such a regular graph exists by Proposition 1, since dn, d (n ), and hence d are even; since, as shown below, d &lt; and u d 2 =4 &lt; ; and since the proof of Proposition 1 given in Borodin et al. <ref> [16] </ref> constructs a regular graph that is Hamiltonian and hence has a u=2-matching. (That construction is similar to the construction of cross edges in one layer of our gadgets, where the 0-labels form a Hamiltonian cycle.) The nonconnected graph G 0 is built similarly, except that d+1 of the extra vertices,
Reference: [17] <author> M. F. Bridgland. </author> <title> Universal traversal sequences for paths and cycles. </title> <journal> Journal of Algorithms, </journal> <volume> 8(3) </volume> <pages> 395-404, </pages> <year> 1987. </year>
Reference-contexts: considered traversal of undirected regular graphs by a WAG with an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa [16], Bridgland <ref> [17] </ref>, Buss and Tompa [19], Istrail [25], Karloff et al. [26], Tompa [33]). A result of Borodin, Ruzzo, and Tompa [16] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n).
Reference: [18] <author> A. Z. Broder, A. R. Karlin, P. Raghavan, and E. Upfal. </author> <title> Trading space for time in undirected s-t connectivity. </title> <journal> SIAM Journal on Computing, </journal> <volume> 23(2) </volume> <pages> 324-334, </pages> <month> Apr. </month> <year> 1994. </year>
Reference-contexts: Alternatively, a random walk can traverse an undirected graph using only O (log n) space, but requires fi (mn) expected time (Aleliunas et al. [2]). In fact, Feige [23], based on earlier work of Broder et al. <ref> [18] </ref> and Barnes and Feige [7], has shown that there is a spectrum of compromises between time and space for this problem: any graph can be traversed in space S and expected time T , where ST mn (log n) O (1) .
Reference: [19] <author> J. Buss and M. Tompa. </author> <title> Lower bounds on universal traversal sequences based on chains of length five. </title> <journal> Information and Computation, </journal> <volume> 120(2) </volume> <pages> 326-329, </pages> <month> Aug. </month> <year> 1995. </year>
Reference-contexts: regular graphs by a WAG with an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa [16], Bridgland [17], Buss and Tompa <ref> [19] </ref>, Istrail [25], Karloff et al. [26], Tompa [33]). A result of Borodin, Ruzzo, and Tompa [16] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n).
Reference: [20] <author> S. A. Cook and C. W. Rackoff. </author> <title> Space lower bounds for maze threadability on restricted machines. </title> <journal> SIAM Journal on Computing, </journal> <volume> 9(3) </volume> <pages> 636-652, </pages> <month> Aug. </month> <year> 1980. </year>
Reference-contexts: An appropriate structured model for proving such a tradeoff is some variant of the JAG ("jumping automaton for graphs") of Cook and Rackoff <ref> [20] </ref>. Such an automaton has a set of states, and a limited supply of pebbles that it can move from vertex to adjacent vertex ("walk") or directly to a vertex containing another pebble ("jump"). <p> The pebbles represent vertex names that a structured algorithm might record in its workspace. Walking represents replacing a vertex name by some adjacent vertex found in the input. Jumping represents copying a previously recorded vertex name. Rabin (see <ref> [20] </ref>), Savitch [31], Blum and Sakoda [13], Blum and Kozen [12], Hemmerling [24] and others have considered similar models; see Hemmerling's monograph for an extensive bibliography (going back over a century) emphasizing results for "labyrinths" | graphs embedded in two- or three-dimensional Euclidean space. 2 The JAG is a structured model, <p> It will sometimes be convenient to treat an undirected edge as a pair of directed half edges, each labeled by a single label. For example, the half edge directed from u to v is labeled u;v . Following Cook and Rackoff <ref> [20] </ref>, a WAG is an automaton with Q states and P distinguishable pebbles, where both P and Q may depend on n and d. For the st-connectivity problem, two vertices s and t of its input graph are distinguished. The P pebbles are initially placed on s.
Reference: [21] <author> J. A. Edmonds. </author> <title> Time-space trade-offs for undirected ST -connectivity on a JAG. </title> <booktitle> In Proceedings of the Twenty-Fifth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 718-727, </pages> <address> San Diego, CA, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: Following the preliminary appearance of these results, Edmonds <ref> [21] </ref> proved a much stronger result for traversing undirected graphs, and Barnes and Edmonds [6] and Edmonds and Poon [22] proved even more dramatic tradeoffs for traversing directed graphs. 2. <p> In time fi (d), this has touched all fi (d) connecting edges incident to that entry vertex, which was impossible in the construction above. 22 4. Open Problem The obvious important problem is to strengthen and generalize these lower bounds. Following an earlier version of this paper [9], Edmonds <ref> [21] </ref> proved a much stronger time-space tradeoff on general JAGs: for every z 2, a JAG with at most 1 28z log log n pebbles and at most 2 log z n states requires time n 2 ((log n)=(log log n)) to traverse 3-regular graphs.
Reference: [22] <author> J. A. Edmonds and C. K. Poon. </author> <title> A nearly optimal time-space lower bound for directed st-connectivity on the NNJAG model. </title> <booktitle> In Proceedings of the Twenty-Seventh Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 147-156, </pages> <address> Las Vegas, NV, </address> <month> May </month> <year> 1995. </year> <month> 24 </month>
Reference-contexts: For instance, although directed graphs can be traversed nondeterministically in polynomial time and logarithmic space simultaneously, it is not widely believed that they can be traversed deterministically in polynomial time and small space simultaneously. (See Tompa [32] and Edmonds and Poon <ref> [22] </ref> for lower bounds, and Barnes et al. [5] for an upper bound.) In contrast, undirected graphs can be traversed in polynomial time and logarithmic space probabilistically by using a random walk (Aleliunas et al. [2], Borodin et al. [15]); this implies similar resource bounds on (nonuniform) deterministic algorithms (Aleliunas et <p> Following the preliminary appearance of these results, Edmonds [21] proved a much stronger result for traversing undirected graphs, and Barnes and Edmonds [6] and Edmonds and Poon <ref> [22] </ref> proved even more dramatic tradeoffs for traversing directed graphs. 2. Walking Automata for Graphs The problem we will be considering is "undirected st-connectivity": given an undirected graph G and two distinguished vertices s and t, determine if there is a path from s to t.
Reference: [23] <author> U. Feige. </author> <title> A randomized time-space tradeoff of ~ O(m ^ R) for USTCON. </title> <booktitle> In Proceedings 34th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 238-246, </pages> <address> Palo Alto, CA, </address> <month> Nov. </month> <year> 1993. </year> <note> IEEE. </note>
Reference-contexts: Alternatively, a random walk can traverse an undirected graph using only O (log n) space, but requires fi (mn) expected time (Aleliunas et al. [2]). In fact, Feige <ref> [23] </ref>, based on earlier work of Broder et al. [18] and Barnes and Feige [7], has shown that there is a spectrum of compromises between time and space for this problem: any graph can be traversed in space S and expected time T , where ST mn (log n) O (1)
Reference: [24] <author> A. Hemmerling. </author> <title> Labyrinth Problems: Labyrinth-Searching Abilities of Automata, volume 114 of Teubner-Texte zur Mathematik. </title> <editor> B. G. </editor> <publisher> Teubner Verlagsgesellschaft, </publisher> <address> Leipzig, </address> <year> 1989. </year>
Reference-contexts: Walking represents replacing a vertex name by some adjacent vertex found in the input. Jumping represents copying a previously recorded vertex name. Rabin (see [20]), Savitch [31], Blum and Sakoda [13], Blum and Kozen [12], Hemmerling <ref> [24] </ref> and others have considered similar models; see Hemmerling's monograph for an extensive bibliography (going back over a century) emphasizing results for "labyrinths" | graphs embedded in two- or three-dimensional Euclidean space. 2 The JAG is a structured model, but not a weak one. <p> The JAG variant we consider is more restricted than the model introduced by Cook and Rackoff, because the pebbles are not permitted to jump. This nonjumping model is closer to the one studied by Blum and Sakoda [13], Blum and Kozen [12] and Hemmerling <ref> [24] </ref>. We will distinguish this nonjumping variant by referring to it as a WAG | "walking automaton for graphs".
Reference: [25] <author> S. Istrail. </author> <title> Polynomial universal traversing sequences for cycles are constructible. </title> <booktitle> In Proceedings of the Twentieth Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 491-503, </pages> <address> Chicago, IL, </address> <month> May </month> <year> 1988. </year>
Reference-contexts: by a WAG with an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa [16], Bridgland [17], Buss and Tompa [19], Istrail <ref> [25] </ref>, Karloff et al. [26], Tompa [33]). A result of Borodin, Ruzzo, and Tompa [16] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n).
Reference: [26] <author> H. J. Karloff, R. Paturi, and J. Simon. </author> <title> Universal traversal sequences of length n O(log n) for cliques. </title> <journal> Information Processing Letters, </journal> <volume> 28 </volume> <pages> 241-243, </pages> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: an unlimited number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa [16], Bridgland [17], Buss and Tompa [19], Istrail [25], Karloff et al. <ref> [26] </ref>, Tompa [33]). A result of Borodin, Ruzzo, and Tompa [16] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n).
Reference: [27] <editor> Logic and Algorithmic, </editor> <booktitle> An International Symposium Held in Honor of Ernst Specker, </booktitle> <address> Zurich, </address> <month> Feb. </month> <pages> 5-11, </pages> <year> 1980. </year> <note> Monographie No. </note> <institution> 30 de L'Enseignement Mathematique, Universite de Geneve, </institution> <year> 1982. </year>
Reference: [28] <author> N. </author> <title> Nisan. </title> <journal> RL SC . Computational Complexity, </journal> <volume> 4(1) </volume> <pages> 1-11, </pages> <year> 1994. </year>
Reference-contexts: More recent work presents uniform deterministic polynomial time algorithms for the undirected case using sublinear space (Barnes and Ruzzo [8]), and even O (log 2 n) space (Nisan <ref> [28] </ref>), as well as a deterministic algorithm using O (log 1:5 n) space, but more than polynomial time (Nisan et al. [29]). In this paper we concentrate on the undirected case. The simultaneous time and space requirements of the best known algorithms for undirected graph traversal are as follows.
Reference: [29] <author> N. Nisan, E. Szemeredi, and A. Wigderson. </author> <title> Undirected connectivity in O(log 1:5 n) space. </title> <booktitle> In Proceedings 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 24-29, </pages> <address> Pittsburgh, PA, </address> <month> Oct. </month> <year> 1992. </year> <note> IEEE. </note>
Reference-contexts: More recent work presents uniform deterministic polynomial time algorithms for the undirected case using sublinear space (Barnes and Ruzzo [8]), and even O (log 2 n) space (Nisan [28]), as well as a deterministic algorithm using O (log 1:5 n) space, but more than polynomial time (Nisan et al. <ref> [29] </ref>). In this paper we concentrate on the undirected case. The simultaneous time and space requirements of the best known algorithms for undirected graph traversal are as follows.
Reference: [30] <author> W. J. Savitch. </author> <title> Relationships between nondeterministic and deterministic tape complexities. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 4(2) </volume> <pages> 177-192, </pages> <year> 1970. </year>
Reference-contexts: of the location of each pebble requires log 2 n bits of memory, and keeping track of the state requires log 2 Q.) It is well known that st-connectivity for directed graphs can be solved by a deterministic Turing machine in O (log 2 n) space, by applying Savitch's Theorem <ref> [30] </ref> to the obvious O (log n) space nondeterministic algorithm for the problem. Cook and Rackoff show that the same O (log 2 n) space upper bound holds for deterministic JAGs by direct construction of an O (log n) pebble, n O (1) state deterministic JAG for directed st-connectivity.
Reference: [31] <author> W. J. Savitch. </author> <title> Maze recognizing automata and nondeterministic tape complexity. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 7(4) </volume> <pages> 389-403, </pages> <year> 1973. </year>
Reference-contexts: The pebbles represent vertex names that a structured algorithm might record in its workspace. Walking represents replacing a vertex name by some adjacent vertex found in the input. Jumping represents copying a previously recorded vertex name. Rabin (see [20]), Savitch <ref> [31] </ref>, Blum and Sakoda [13], Blum and Kozen [12], Hemmerling [24] and others have considered similar models; see Hemmerling's monograph for an extensive bibliography (going back over a century) emphasizing results for "labyrinths" | graphs embedded in two- or three-dimensional Euclidean space. 2 The JAG is a structured model, but not <p> For instance, a JAG can execute a depth-first or breadth-first search, provided it has one pebble for each vertex, by leaving a pebble on each visited vertex in order to avoid revisiting it, and keeping the stack or queue of pebble names in its state. Furthermore, as Savitch <ref> [31] </ref> shows, a JAG with the additional power to move a pebble from vertex i to vertex i + 1 can simulate an arbitrary Turing machine on directed graphs.
Reference: [32] <author> M. Tompa. </author> <title> Two familiar transitive closure algorithms which admit no polynomial time, sub-linear space implementations. </title> <journal> SIAM Journal on Computing, </journal> <volume> 11(1) </volume> <pages> 130-137, </pages> <month> Feb. </month> <year> 1982. </year>
Reference-contexts: For instance, although directed graphs can be traversed nondeterministically in polynomial time and logarithmic space simultaneously, it is not widely believed that they can be traversed deterministically in polynomial time and small space simultaneously. (See Tompa <ref> [32] </ref> and Edmonds and Poon [22] for lower bounds, and Barnes et al. [5] for an upper bound.) In contrast, undirected graphs can be traversed in polynomial time and logarithmic space probabilistically by using a random walk (Aleliunas et al. [2], Borodin et al. [15]); this implies similar resource bounds on
Reference: [33] <author> M. Tompa. </author> <title> Lower bounds on universal traversal sequences for cycles and other low degree graphs. </title> <journal> SIAM Journal on Computing, </journal> <volume> 21(6) </volume> <pages> 1153-1160, </pages> <month> Dec. </month> <year> 1992. </year> <month> 25 </month>
Reference-contexts: number of states but only the minimum number (one) of pebbles, a model better known as a universal traversal sequence (Aleliunas et al. [2], Alon et al. [3], Bar-Noy et al. [4], Borodin, Ruzzo, and Tompa [16], Bridgland [17], Buss and Tompa [19], Istrail [25], Karloff et al. [26], Tompa <ref> [33] </ref>). A result of Borodin, Ruzzo, and Tompa [16] shows that such an automaton requires (m 2 ) time (on regular graphs with 3n=2 m n 2 =6 n).
References-found: 33

