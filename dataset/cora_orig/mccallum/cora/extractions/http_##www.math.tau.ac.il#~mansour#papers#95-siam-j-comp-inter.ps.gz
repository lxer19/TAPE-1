URL: http://www.math.tau.ac.il/~mansour/papers/95-siam-j-comp-inter.ps.gz
Refering-URL: 
Root-URL: 
Title: RANDOMIZED INTERPOLATION AND APPROXIMATION OF SPARSE POLYNOMIALS  
Author: YISHAY MANSOUR 
Abstract: We present a randomized algorithm that interpolates a sparse polynomial in polynomial time in the bit complexity model. The algorithm can be also applied to approximate polynomials that can be approximated by sparse polynomials (the approximation is in the L 2 norm). 1. Introduction. We consider the problem of interpolating a sparse polynomial 
Abstract-found: 1
Intro-found: 1
Reference: [BOT88] <author> M. Ben-Or and P. Tiwari. </author> <title> A deterministic algorithm for sparse multivariate polynomial interpolation. </title> <booktitle> In Proceedings of the 20 th Annual ACM Symposium on Theory of Computing, </booktitle> <pages> pages 301-309, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Grigoriev and Karpinski [GK87] showed a deterministic N C algorithm to compute a matching, in the case that the permanent is sparse. (The permanent can be viewed as a generic multivariate polynomial.) Ben-Or and Tiwari <ref> [BOT88] </ref> gave a deterministic algorithm to compute a sparse multivariate polynomial that runs in time poly (n; t; log d). The algorithm evaluates the polynomial at points of size O (t log n) bits and requires accuracy of O (td log n+log L) bits.
Reference: [GK87] <author> D. Y. Grigoriev and M. Karpinski. </author> <title> The matching problem for bipartite graphs with polynomially bounded permanents is in nc. </title> <booktitle> In 28 th Annual Symposium on Foundations of Computer Science, </booktitle> <address> Los Angeles, California, </address> <pages> pages 166-172, </pages> <month> October </month> <year> 1987. </year>
Reference-contexts: His algorithm evaluates the polynomial at points of size fi (log ntd) bits and requires fi (d log ntd + log L) bits, which implies that the running time in the bit complexity model is poly (n; t; d; log L). Grigoriev and Karpinski <ref> [GK87] </ref> showed a deterministic N C algorithm to compute a matching, in the case that the permanent is sparse. (The permanent can be viewed as a generic multivariate polynomial.) Ben-Or and Tiwari [BOT88] gave a deterministic algorithm to compute a sparse multivariate polynomial that runs in time poly (n; t; log
Reference: [GKS90a] <author> D. Y. Grigoriev, M. Karpinski, and M. Singer. </author> <title> Fast parallel algorithms for sparse multi-variate polynomial interpolation over finite fields. </title> <journal> SIAM J. Comput., </journal> <volume> 19(6) </volume> <pages> 1059-1063, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: Algorithms for interpolation of sparse polynomials over finite field appears in <ref> [GKS90a, Kar89] </ref>. The work here extends the technique developed in [GL89, KM91] for the Fourier transform over the hypercube. The extension handles a ring of integers modulo an integer (i.e. Z d ).
Reference: [GKS90b] <author> D. Y. Grigoriev, M. Karpinski, and M. Singer. </author> <title> Interpolation of sparse rational functions without knowing bounds on exponents. </title> <booktitle> In 31 th Annual Symposium on Foundations of Computer Science, </booktitle> <address> St. Louis, </address> <pages> pages 840-846, </pages> <month> October </month> <year> 1990. </year>
Reference-contexts: The algorithm evaluates the polynomial at points of size O (t log n) bits and requires accuracy of O (td log n+log L) bits. Therefore, the running time of their algorithm in the bit complexity model requires time poly (n; t; d; log L). Grigoriev, Karpinski and Singer <ref> [GKS90b] </ref> showed how to interpolate a rational function with O (nt t ) points, which is independent of the degree d ! However in the bit complexity model the running time is poly (n; t t ; d; log L).
Reference: [GL89] <author> O. Goldreich and L. Levin. </author> <title> A hard-core predicate for all one-way functions. </title> <booktitle> In Proc. 21st ACM Symposium on Theory of Computing, </booktitle> <pages> pages 25-32. </pages> <publisher> ACM, </publisher> <year> 1989. </year>
Reference-contexts: Algorithms for interpolation of sparse polynomials over finite field appears in [GKS90a, Kar89]. The work here extends the technique developed in <ref> [GL89, KM91] </ref> for the Fourier transform over the hypercube. The extension handles a ring of integers modulo an integer (i.e. Z d ). After we show how to handle Z d , we use the previous techniques and extend the result to handle Z n d . <p> Univariate polynomials. In this section we discuss interpolation of t-sparse polynomials with integer coefficients. The result is based on a searching technique that we develop to search in the space of the possible coefficients. The search technique is similar to the one in <ref> [GL89, KM91] </ref>. Given a polynomial P (x) we split it into two polynomials. One that includes the coefficients of odd degrees (denoted by P 1;1 ), while the other includes the coefficients of even degrees (denoted by P 0;1 ). <p> This implies that the polynomial P (x) fl (t=*) has a good approximation by an integer polynomial R 0 . 7. Multi-variate polynomials. The technique that we developed for univariate polynomials extends to multi-variate polynomials, and uses ideas similar to <ref> [GL89, KM91] </ref> and [Zip79]. In this Section we give a sketch of the ideas of the extension. The idea for multi-variate polynomials is the following. As before, We first recover all the "large coefficients". We proceed variable by variable, and find the exponents of the "large coefficients".
Reference: [HR89] <author> Torben Hagerup and Christine Rub. </author> <title> A guided tour to chernoff bounds. </title> <journal> Info. Proc. Lett., </journal> <volume> 33 </volume> <pages> 305-308, </pages> <year> 1989. </year>
Reference-contexts: Section 7 extends the case of univariate polynomials to multivariate polynomials. 2. Preliminaries. Chernoff bounds: In the analysis of our randomized algorithms we use Chernoff bounds. The following theorem formalizes the bounds in a way which would be most useful for us. (See <ref> [HR89] </ref>.) 2 Theorem 2.1. (Chernoff bound) Let X 1 ; : : : ; X m be i.i.d with E [X i ] = p, jX i j H and let S m = X 1 + + X m .
Reference: [Kar89] <author> M. Karpinski. </author> <title> Boolean circuit complexity of algebraic interpolation problems. </title> <type> Technical Report TR-89-027, ICSI, </type> <year> 1989. </year>
Reference-contexts: Algorithms for interpolation of sparse polynomials over finite field appears in <ref> [GKS90a, Kar89] </ref>. The work here extends the technique developed in [GL89, KM91] for the Fourier transform over the hypercube. The extension handles a ring of integers modulo an integer (i.e. Z d ).
Reference: [KM91] <author> Eyal Kushilevitz and Yishay Mansour. </author> <title> Learning decision trees using the fourier spectrum. </title> <booktitle> In Proceedings of STOC '91, </booktitle> <pages> pages 455-464, </pages> <month> may </month> <year> 1991. </year>
Reference-contexts: Algorithms for interpolation of sparse polynomials over finite field appears in [GKS90a, Kar89]. The work here extends the technique developed in <ref> [GL89, KM91] </ref> for the Fourier transform over the hypercube. The extension handles a ring of integers modulo an integer (i.e. Z d ). After we show how to handle Z d , we use the previous techniques and extend the result to handle Z n d . <p> Univariate polynomials. In this section we discuss interpolation of t-sparse polynomials with integer coefficients. The result is based on a searching technique that we develop to search in the space of the possible coefficients. The search technique is similar to the one in <ref> [GL89, KM91] </ref>. Given a polynomial P (x) we split it into two polynomials. One that includes the coefficients of odd degrees (denoted by P 1;1 ), while the other includes the coefficients of even degrees (denoted by P 0;1 ). <p> This implies that the polynomial P (x) fl (t=*) has a good approximation by an integer polynomial R 0 . 7. Multi-variate polynomials. The technique that we developed for univariate polynomials extends to multi-variate polynomials, and uses ideas similar to <ref> [GL89, KM91] </ref> and [Zip79]. In this Section we give a sketch of the ideas of the extension. The idea for multi-variate polynomials is the following. As before, We first recover all the "large coefficients". We proceed variable by variable, and find the exponents of the "large coefficients".
Reference: [Zip79] <author> R. E. Zippel. </author> <title> Probabilistic algorithms for sparse polynomials. </title> <booktitle> In EUROSAM, </booktitle> <pages> pages 216-226. </pages> <booktitle> Springer Lecture notes in computer science, </booktitle> <volume> vol. 72, </volume> <year> 1979. </year> <month> 14 </month>
Reference-contexts: When considering those works in the bit complexity model one has to take into account the number of bits which were given to the polynomial, and also the size of the result of the polynomial and the required accuracy on the result. Zippel <ref> [Zip79] </ref> gave a probabilistic algorithm that runs in time poly (n; t; d). <p> This implies that the polynomial P (x) fl (t=*) has a good approximation by an integer polynomial R 0 . 7. Multi-variate polynomials. The technique that we developed for univariate polynomials extends to multi-variate polynomials, and uses ideas similar to [GL89, KM91] and <ref> [Zip79] </ref>. In this Section we give a sketch of the ideas of the extension. The idea for multi-variate polynomials is the following. As before, We first recover all the "large coefficients". We proceed variable by variable, and find the exponents of the "large coefficients".
References-found: 9

