URL: ftp://ftp.eecs.umich.edu/people/aprakash/collaboration/papers/cscw92.ps.Z
Refering-URL: http://www.eecs.umich.edu/~aprakash/csrg_pub.html
Root-URL: http://www.cs.umich.edu
Title: Nothing relevant. nothing relevant  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Ellis, </author> <title> C.A. and Gibbs, S.J. Concurrency Control in Groupware Systems, </title> <booktitle> in Proceedings of the ACM SIGMOD '89 Conference on the Management of Data (Seattle, </booktitle> <address> Washington, May 1989), </address> <publisher> ACM Press, </publisher> <pages> pp. 399-407. </pages>
Reference-contexts: Quite often, but not always, operation A will be identical to A 0 , and B to B 0 , except that the position data may be different. Our notion of transpose is similar to the one described in <ref> [1] </ref>. However, we require transpose function to be defined only when the operations do not conflict.
Reference: [2] <author> Ellis, C.A., Gibbs, S.J., and Rein, G.L. </author> <title> Design and Use of a Group Editor. In Engineering for Human-Computer Interaction, </title> <editor> G. Cockton, Ed., </editor> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1990, </year> <pages> pp. 13-25. </pages>
Reference-contexts: Availability of undo can also encourage users to experiment, acting not only as a safety net, but also allowing users to try out different approaches to solving problems using backtracking [9]. Unfortunately at present, though many collaborative editors and other group applications have been built, such as GROVE <ref> [2] </ref>, ShrEdit [5], and Dis-tEdit [4], almost all lack undo capabilities.
Reference: [3] <author> Ellis, C.A., Gibbs, S.J., and Rein, G.L. </author> <title> Groupware: Some Issues and Experiences. </title> <booktitle> Communications of the ACM(January 1991), </booktitle> <pages> 38-58. </pages>
Reference: [4] <author> Knister, M. and Prakash, A. DistEdit: </author> <title> A Distributed Toolkit for Supporting Multiple Group Editors, </title> <booktitle> in Proceedings of the Third Conference on Computer-Supported Cooperative Work, </booktitle> <address> Los Angeles, California, </address> <month> October </month> <year> 1990, </year> <pages> pp. 343-355. </pages>
Reference-contexts: Unfortunately at present, though many collaborative editors and other group applications have been built, such as GROVE [2], ShrEdit [5], and Dis-tEdit <ref> [4] </ref>, almost all lack undo capabilities. <p> Do-undo pointers need to go between correspond ing operations, which could be high-level. 8 CONCLUSIONS We have presented a framework for group undo which is simple and generally applicable to a variety of documents. The techniques proposed in this paper are presently being implemented in the DistEdit toolkit <ref> [4] </ref>. The techniques are presented in the context of history undo; however, many aspects of the techniques, such as the notions of Transpose and Conflict, are also applicable to implementing undo based on linear and US&R models.
Reference: [5] <author> McGuffin, L. and Olson, G.M. ShrEdit: </author> <title> A Shared Electronic Workspace. </title> <type> CSMIL Technical Report No. 45, </type> <institution> The University of Michigan, </institution> <address> Ann Arbor, </address> <year> 1992. </year>
Reference-contexts: Unfortunately at present, though many collaborative editors and other group applications have been built, such as GROVE [2], ShrEdit <ref> [5] </ref>, and Dis-tEdit [4], almost all lack undo capabilities.
Reference: [6] <author> Prakash, A. and Knister, M.. </author> <title> Undoing Actions in Collaborative Work. </title> <type> Technical Report CSE-TR-125-92, </type> <institution> Computer Science and Engineering Division, The University of Michigan, </institution> <address> Ann Arbor, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: We leave it to the reader to determine the Conflict and Transpose definitions for the other three combinations of these two operations. A complete definition of these two functions for general string insert and delete operations can be found in <ref> [6] </ref>. Example 2: Document Model Applied to Graphics Editors Let's assume that two of the commands that are stored on the history list of a graphical editor are * DrawCircle (x,y, radius, CircleID): Draw a circle at position (x,y) of the specified radius. <p> For multiple history lists and editor states, the communication protocol between editors should ensure that all editors eventually reach the same state even when operations are being done in parallel at various sites. <ref> [6] </ref>. 6.1 Limited Selective Undo To demonstrate the principles of our undo technique, we first describe a limited version of the algorithm and present an example. <p> When an operation other than another undo is performed, the stored pointer is deleted, making the undo operations appear as normal operations which can be undone. If the undo algorithm fails due to a conflict, a simple Conflict List Generation <ref> [6] </ref> algorithm can be used to locate the conflicting operations, which must belong to other users. At this point, the interface can inform the user of the problem and show whose work must be undone.
Reference: [7] <author> Stallman, R. </author> <title> GNU Emacs Manual, </title> <year> 1985. </year>
Reference-contexts: Furthermore, the models do not address the issue that simply redoing operations may not semantically make sense or may lead to unexpected results if an earlier operation is skipped. 3.3 History Undo The history undo scheme, used in the Gnu Emacs editor <ref> [7] </ref>, also allows undoing of a sequence of operations but, unlike the linear undo and US&R schemes, it appends the undo operations to the end of the history list. The undo operations in the history list are treated as any other operations, allowing them to be undone later if desired.
Reference: [8] <author> Teitelman, W. </author> <title> Interlisp Reference Manual, </title> <institution> Xerox Palo Alto Research Center, </institution> <year> 1978. </year>
Reference-contexts: Usually redo of the last undo is also allowed (often implemented as an undo of the last undo) so that, in the above example, E can be redone. 3.2 Linear Undo Model and US&R Model The Interlisp system <ref> [8] </ref>, one of the early systems to provide undo, used the linear undo model. The linear undo model allows undoing of a sequence of operations and keeps a pointer which tracks the last operation undone. Operations can then be redone, after possibly doing some new operations.
Reference: [9] <author> Thimbleby, H. </author> <title> User Interface Design. </title> <publisher> ACM Press, </publisher> <address> New York, </address> <year> 1990, </year> <pages> pp. 261-286. </pages>
Reference-contexts: Availability of undo can also encourage users to experiment, acting not only as a safety net, but also allowing users to try out different approaches to solving problems using backtracking <ref> [9] </ref>. Unfortunately at present, though many collaborative editors and other group applications have been built, such as GROVE [2], ShrEdit [5], and Dis-tEdit [4], almost all lack undo capabilities. <p> We discuss them here. A more detailed discussion of these techniques can be found in <ref> [9] </ref>, and a formalization of undo and redo facilities can be found in [11]. 3.1 Single-step Undo Single-step undo is common in most Macintosh and Windows applications, as well as editors such as vi. It allows undo of the last operation.
Reference: [10] <author> Vitter, J.S. US&R: </author> <title> A New Framework for Redoing. </title> <booktitle> In IEEE Software (October 1984), </booktitle> <pages> pp. 39-52. </pages>
Reference-contexts: So, if one wants to back to the original sequence without the F , it is not possible. One could undo F , but then D and E must be done manually. The Undo, Skip, Redo (US&R) model <ref> [10] </ref> supports redo like the linear undo model, but also allows a more user-friendly skipping of some operations during the redo.
Reference: [11] <author> Yang, Y. </author> <title> A New Conceptual Model for Interactive User Recovery and and Command Reuse Facilities, </title> <booktitle> in Proc. CHI'88 Conference on Human Factors in Computing Systems (Washington, </booktitle> <address> D.C., May 15-19, 1988), </address> <publisher> ACM Press, </publisher> <pages> pp. 165-170. </pages>
Reference-contexts: We discuss them here. A more detailed discussion of these techniques can be found in [9], and a formalization of undo and redo facilities can be found in <ref> [11] </ref>. 3.1 Single-step Undo Single-step undo is common in most Macintosh and Windows applications, as well as editors such as vi. It allows undo of the last operation.
References-found: 11

