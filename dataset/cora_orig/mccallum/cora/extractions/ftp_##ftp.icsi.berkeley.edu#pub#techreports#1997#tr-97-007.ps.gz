URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1997/tr-97-007.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1997.html
Root-URL: http://www.icsi.berkeley.edu
Email: Email:berman@cse.psu.edu  
Title: On-line Load Balancing for Related Machines  
Author: Piotr Berman Moses Charikar Marek Karpinski 
Note: This research was partially supported by the DFG Grant KA 673/4-1, by the ESPRIT BR Grants 7097 and EC-US 030. Email:marek@cs.uni-bonn.de  
Address: Park, PA16802, USA  
Affiliation: Dept. of Computer Science Eng., Pennsylvania State University, University  Dept. of Computer Science, University of Bonn, 53117 Bonn, and International Computer Science Institute, Berkeley.  
Date: January 1997  
Pubnum: TR-97-007  
Abstract: We consider the problem of scheduling permanent jobs on related machines in an on-line fashion. We design a new algorithm that achieves the competitive ratio of 3 + p 8 5:828 for the deterministic version, and 3:31= ln 2:155 4:311 for its randomized variant, improving the previous competitive ratios of 8 and 2e 5:436. We also prove lower bounds of 2:4380 on the competitive ratio of deterministic algorithms and 1:8372 on the competitive ratio of randomized algorithms for this problem. y Department of Computer Science, Stanford University, Stanford, CA 94305-9045. Supported by Stanford School of Engineering Groswith Fellowship, an ARO MURI Grant DAAH04-96-1-0007 and NSF Award CCR-9357849, with matching funds from IBM, Schlumberger Foundation, Shell Foundation, and Xerox Corporation. E-mail: moses@cs.stanford.edu. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> S. Albers, </author> <title> Better bounds for online scheduling, </title> <note> to appear in Proc. 29th ACM STOC (1997). </note>
Reference-contexts: Later, it was noticed by Indyk [6] that by randomizing properly the key parameter of the original algorithm the expected competitive ratio can be reduced to 2e. For the version of the problem where the speeds of all the machines are the same, Albers <ref> [1] </ref> proved a lower bound of 1:852 on the competitive ratio of deterministic algorithms and Chen et al. [5] proved a lower bound of 1:5819 on the competitive ratio of randomized algorithms.
Reference: [2] <author> J. Aspnes, Y. Azar, A. Fiat, S. Plotkin and O. Waarts, </author> <title> On-line load balancing with applications to machine scheduling and virtual circuit routing, </title> <booktitle> Proc. 25th ACM STOC(1993), </booktitle> <pages> pp. 623-631. </pages>
Reference-contexts: 1 Introduction The problem of on-line load balancing was studied extensively over the years (cf., e.g., [7], [3], [4], and <ref> [2] </ref>). In this paper we study the on-line load balancing problem for related machines (cf. [2]). We are given a set of machines that differ in speed but are related in the following sense: a job of size p requires time p=v on a machine with speed v. <p> 1 Introduction The problem of on-line load balancing was studied extensively over the years (cf., e.g., [7], [3], [4], and <ref> [2] </ref>). In this paper we study the on-line load balancing problem for related machines (cf. [2]). We are given a set of machines that differ in speed but are related in the following sense: a job of size p requires time p=v on a machine with speed v. <p> Our task is to allocate a sequence of jobs to the machines in an on-line fashion, while minimizing the maximum load of the machines. This problem was solved with a competitive ratio 8 by Aspnes et al. <ref> [2] </ref>. Later, it was noticed by Indyk [6] that by randomizing properly the key parameter of the original algorithm the expected competitive ratio can be reduced to 2e.
Reference: [3] <author> Y. Azar, A. Broder, A. Karlin, </author> <title> On-line load balancing, </title> <booktitle> Proc. 33rd IEEE FOCS (1992), </booktitle> <pages> pp. 218-225. </pages>
Reference-contexts: 1 Introduction The problem of on-line load balancing was studied extensively over the years (cf., e.g., [7], <ref> [3] </ref>, [4], and [2]). In this paper we study the on-line load balancing problem for related machines (cf. [2]).
Reference: [4] <author> Y. Azar, J. Naor, R. </author> <title> Rom,The competitiveness of on-line assignment, </title> <booktitle> Proc. 3rd ACM-SIAM SODA (1992), </booktitle> <pages> pp. 203-210. 10 </pages>
Reference-contexts: 1 Introduction The problem of on-line load balancing was studied extensively over the years (cf., e.g., [7], [3], <ref> [4] </ref>, and [2]). In this paper we study the on-line load balancing problem for related machines (cf. [2]). We are given a set of machines that differ in speed but are related in the following sense: a job of size p requires time p=v on a machine with speed v.
Reference: [5] <author> B. Chen, A. van Vliet and G. J. Woeginger, </author> <title> A lower bound for randomized on-line scheduling algorithms, </title> <journal> Information Processing Letters, vol.51, </journal> <volume> no.5, </volume> <pages> pp. 219-22. </pages>
Reference-contexts: For the version of the problem where the speeds of all the machines are the same, Albers [1] proved a lower bound of 1:852 on the competitive ratio of deterministic algorithms and Chen et al. <ref> [5] </ref> proved a lower bound of 1:5819 on the competitive ratio of randomized algorithms.
Reference: [6] <author> P. Indyk, </author> <type> personal communication. </type>
Reference-contexts: Our task is to allocate a sequence of jobs to the machines in an on-line fashion, while minimizing the maximum load of the machines. This problem was solved with a competitive ratio 8 by Aspnes et al. [2]. Later, it was noticed by Indyk <ref> [6] </ref> that by randomizing properly the key parameter of the original algorithm the expected competitive ratio can be reduced to 2e.
Reference: [7] <author> R. L. Graham, </author> <title> Bounds for certain multiprocessing anomalies, </title> <journal> Bell System Technical Journal 45 (1966), </journal> <pages> pp. 1563-1581. 11 </pages>
Reference-contexts: 1 Introduction The problem of on-line load balancing was studied extensively over the years (cf., e.g., <ref> [7] </ref>, [3], [4], and [2]). In this paper we study the on-line load balancing problem for related machines (cf. [2]).
References-found: 7

