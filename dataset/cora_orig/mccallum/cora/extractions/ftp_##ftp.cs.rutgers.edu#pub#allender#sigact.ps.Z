URL: ftp://ftp.cs.rutgers.edu/pub/allender/sigact.ps.Z
Refering-URL: http://www.cs.rutgers.edu/~allender/publications/
Root-URL: http://www.cs.rutgers.edu
Email: lane@cs.rochester.edu  
Title: SIGACT News Complexity Theory Column 19 Introduction to Complexity Theory Column 19 This issue's expert
Author: Lane A. Hemaspaandra Eric Allender 
Note: Guest Column:  
Address: Rochester, NY 14627, USA  
Affiliation: Dept. of Computer Science, University of Rochester  
Abstract: Regarding "Journals to Die For" (SIGACT News Complexity Theory Column 16), Joachim von zur Gathen, the editor-in-chief of computational complexity, has written me pointing out, quite correctly, that I cheated his journal of a point. His journal, in the issue checked, does include the email address of each author. I apologize for the missing point. Joachim also asked me to mention that, while the journal does not require the "alpha" citation style, it does strongly advise authors to use that style. 
Abstract-found: 1
Intro-found: 1
Reference: [A97] <author> E. Allender. </author> <title> A comment on the logspace counting hierarchy. </title> <address> http://www.cs.rutgers.edu/ allender/publications/lh.html </address>
Reference-contexts: Are there other interesting problems that lie in this class? 5 This is stated without proof in [AO96]. Recently, Mahajan (personal communication) pointed out that this actually requires some proof. More information is available in <ref> [A97] </ref>. 7 7 #NC #NC 1 coincides with the class of functions that have arithmetic formulae of polynomial size. As such, it has been studied as a complexity class at least since [V79a]. Evaluating arithmetic formulae over N (Z) is complete for #N C 1 (GapNC 1 , respectively) [BCGR92].
Reference: [AAD97] <author> M. Agrawal, E. Allender, and S. Datta. </author> <title> On TC 0 , AC 0 , and Arithmetic Circuits. </title> <booktitle> In Proc. 12th Annual IEEE Conference on Computational Complexity, </booktitle> <year> 1997, </year> <pages> pp. 134-148. </pages>
Reference-contexts: It is actually still an open question if every function in GapAC 0 can be expressed as the difference of two #AC 0 functions (see <ref> [AAD97] </ref>), but all of the other "Gap" classes can be expressed as the difference of the corresponding "#" function classes. GapP was originally introduced in [FFK94] as a tool for studying classes of languages that can be defined using GapP. <p> Next, let's mention the cases where it is trivial to prove. Any function computed by NC 1 circuits or by AC 0 circuits is easily seen to be computed by "unambiguous" circuits of the same type <ref> [CMTV96, AAD97] </ref>, and thus for these classes, arithmetic circuits over N are easily seen to be at least as powerful as Boolean circuits. <p> On the other hand it is shown in <ref> [AAD97] </ref> that the zero-one-valued functions in GapAC 0 are exactly the languages in AC 0 [2] (that is, the languages accepted by constant-depth polynomial-size circuits of AND, OR, and PARITY gates). <p> The results of [R87, S87] show that there are many simple languages (such as the Mod 3 function) that are not in AC 0 [2], and thus current lower bound techniques apply to these very small arithmetic circuit classes. However, the main result of <ref> [AAD97] </ref> is that TC 0 is exactly C = AC 0 (at least in the non-uniform and logspace-uniform settings). (This then establishes the assertion made back in Section 4.1, that Arith.Bool (AC 0 ; Z) coincides with the functions computable by constant-depth threshold circuits.) Thus, if we could expand our repertoire <p> There are a great many more open questions involving #AC 0 discussed in <ref> [AAD97] </ref> but for the sake of brevity I will refer the reader thither. 9 Conclusions I began this survey by apologizing for not mentioning the great bulk of work on arithmetic circuits, and concentrating only on the small part of the field that seems to be heading in a completely different <p> Further references can be found there. There is also a wealth of interesting material about arithmetic circuits over finite fields that fits very nicely into the framework described here. As an example, I mention [GW96], as well as the work in <ref> [AAD97] </ref> characterizing ACC 0 in terms of arithmetic circuits over finite fields. I'm sure that, in my rush to finish this by deadline, I have left out other important material. The classes defined and discussed here help classify the complexity of real-world computational problems.
Reference: [ABO96] <author> E. Allender, R. Beals, and M. Ogihara. </author> <title> The complexity of matrix rank and feasible systems of linear equations. </title> <note> DIMACS Technical report 97-40 (submitted for publication). A preliminary version appears in ACM Symposium on Theory of Computing (STOC), </note> <year> 1996. </year>
Reference-contexts: The first two of these hierarchies collapse, and they coincide with NC 1 reducibility. * AC 0 (C = L) = L C = L = NC 1 (C = L) <ref> [ABO96] </ref>. (These hierarchies are defined using "Ruzzo-Simon-Tompa" reducibility [RST], which is the usual notion of oracle access for space-bounded nondeterministic Turing machines.) It seems natural to conjecture that AC 0 and NC 1 -reducibility coincide on #L, too. <p> For instance, the set of singular matrices (matrices with determinant zero) is complete for C = L, and a variety of other problems regarding computation of the rank and determining if a system of linear equations is feasible are complete for L C = L <ref> [ABO96] </ref>. Some other problems in linear algebra and problems involving Markov decision processes were shown to be complete for PL in [J84, MGA97]. One important problem whose complexity remains unresolved is the perfect matching problem. <p> No deterministic NC algorithm is known for matching at all, but the probabilistic NC algorithm of [MVV87] can be used to show that, in the nonuniform setting, perfect matching is in coC = L and in L. (See <ref> [ABO96, BGW96] </ref> for details.) Recently, by combining use of the "isolating lemma" of [MVV87] with the new algorithm for the determinant of [MV97], it has been shown that the perfect matching problem is in SPL [AR97], which improves the previous upper bounds. <p> Since the matching problem is hard for NL (see <ref> [ABO96, KUW86] </ref>), this "sandwiches" the complexity of this problem between NL and SPL (at least in the nonuniform setting). Further investigation of SPL may be useful in approaching the question of whether or not the #L hierarchy collapses.
Reference: [AJ93a] <author> E. Allender and J. Jiao. </author> <title> Depth reduction for noncommutative arithmetic circuits. </title> <booktitle> In Proc. 25th ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pages 515-522, </pages> <year> 1993. </year>
Reference: [AJ92] <author> C. Alvarez and B. Jenner. </author> <title> A note on log space optimization. </title> <note> Computational Complexity 5 (1995) 155-166. </note>
Reference-contexts: Now, I must apologize for not even covering all of that field. The paper [AJMV] contains a number of results about arithmetic circuits over some noncommutative semirings (in particular ( fl ,max,concat)) that characterize the optimization classes OptL and related classes <ref> [AJ92, V91] </ref>. Further references can be found there. There is also a wealth of interesting material about arithmetic circuits over finite fields that fits very nicely into the framework described here.
Reference: [AJ93b] <author> C. Alvarez and B. Jenner. </author> <title> A very hard log-space counting class. </title> <journal> Theoretical Computer Science, </journal> <volume> 107 </volume> <pages> 3-30, </pages> <year> 1993. </year>
Reference-contexts: Probably #P is also familiar to the reader as the class of functions of the form #acc M (x), counting the number of accepting paths of an NP machine M on input x [V79b]. The class #L is defined similarly, but for NL machines M <ref> [AJ93b] </ref>. There is another way of arriving at the classes #P and #L, starting with NP and NL, using circuits instead of Turing machines.
Reference: [AJMV] <author> E. Allender, J. Jiao, M. Mahajan, and V. Vinay. </author> <title> Non-commutative arithmetic circuits: depth reduction and size lower bounds. </title> <note> To appear in Theoretical Computer Science. Preliminary versions appeared as [AJ93a, MV94]. </note>
Reference-contexts: A general proof that works in the uniform setting over any commutative semiring appears in <ref> [AJMV] </ref>. All of the functions in #SAC 1 can be computed by threshold circuits of logarithmic depth (known as TC 1 circuits). (In fact, it is observed in [AJMV] that if gates for integer division (throwing the remainder away) are added to #SAC 1 circuits, then one obtains an exact characterization <p> A general proof that works in the uniform setting over any commutative semiring appears in <ref> [AJMV] </ref>. All of the functions in #SAC 1 can be computed by threshold circuits of logarithmic depth (known as TC 1 circuits). (In fact, it is observed in [AJMV] that if gates for integer division (throwing the remainder away) are added to #SAC 1 circuits, then one obtains an exact characterization of TC 1 .) On the other hand, nothing is known about the relative power of #SAC 1 and AC 1 (the class of problems accepted by logarithmic <p> It is not even known if the functions in #NC 1 have AC 1 circuits. A possible first step toward answering this question is taken in <ref> [AJMV] </ref>, where it is shown that problems in AC 1 are reducible to questions about arithmetic circuits of polynomial size and degree n O (log log n) , improving the trivial upper bound of n O (log n) . <p> Now, I must apologize for not even covering all of that field. The paper <ref> [AJMV] </ref> contains a number of results about arithmetic circuits over some noncommutative semirings (in particular ( fl ,max,concat)) that characterize the optimization classes OptL and related classes [AJ92, V91]. Further references can be found there.
Reference: [AO96] <author> E. Allender and M. Ogihara. </author> <title> Relationships among PL, #L, and the determinant. RAIRO Theoretical Information and Application, </title> <booktitle> 30 (1996), </booktitle> <pages> 1-21. </pages>
Reference-contexts: For a great many important problems A, the class of problems reducible to A under NC 1 reductions coincides with the problems reducible to A under AC 0 reductions. Is this also the case for the determinant? This question was first posed in <ref> [AO96] </ref>, where the following hierarchies were defined: 6 * The Exact Counting Logspace Hierarchy = C = L C = L : :C = L = the class of problems AC 0 -reducible to the set of singular integer matrices. * The PL hierarchy = PL PL : :PL = AC <p> By analogy with a result of [FFK94] (showing that SPP = fA : GapP A = GapPg), one can show that SPL = fA : GapL A = GapLg. Are there other interesting problems that lie in this class? 5 This is stated without proof in <ref> [AO96] </ref>. Recently, Mahajan (personal communication) pointed out that this actually requires some proof. More information is available in [A97]. 7 7 #NC #NC 1 coincides with the class of functions that have arithmetic formulae of polynomial size.
Reference: [AR97] <author> E. Allender and K. Reinhardt. </author> <title> Work in preparation, </title> <year> 1997. </year>
Reference-contexts: in the nonuniform setting, perfect matching is in coC = L and in L. (See [ABO96, BGW96] for details.) Recently, by combining use of the "isolating lemma" of [MVV87] with the new algorithm for the determinant of [MV97], it has been shown that the perfect matching problem is in SPL <ref> [AR97] </ref>, which improves the previous upper bounds. Since the matching problem is hard for NL (see [ABO96, KUW86]), this "sandwiches" the complexity of this problem between NL and SPL (at least in the nonuniform setting).
Reference: [B89] <author> D.A. Barrington. </author> <title> Bounded-width polynomial size branching programs recognize exactly those languages in NC 1 , Journal of Computer and System Sciences 38 (1989), </title> <type> 150-164. </type>
Reference-contexts: SAC 1 Size n O (1) , Degree n O (1) Context-free Languages [R80, S78, V91] NL Size n O (1) , Skew 4 [V92] Shortest paths, Transitive Closure, etc. NC 1 Depth O (log n), Bounded fan-in Regular sets, Boolean Formulae <ref> [B93, B89] </ref> AC 0 Depth O (1), Size n O (1) , f1g Unbounded fan-in under AC 0 reductions. arithmetic complexity classes: #AC 0 #NC 1 #L #SAC 1 #P The remainder of this paper describes the complete problems that motivate interest in these classes, discusses some surprising recent discoveries, and <p> Thus it is sandwiched between NC 1 and C = NC 1 . If the log fl n factor can be removed, then its complexity will be resolved. One of the most surprising and important results about Boolean NC 1 is Barrington's theorem <ref> [B89] </ref>, characterizing NC 1 in terms of width-5 branching programs. It is natural to wonder if this characterization also gives an equivalent characterization of #N C 1 . The authors of [CMTV96] investigated this question, by defining the class of functions corresponding to counting paths through bounded-width branching programs, #BWBP.
Reference: [B93] <author> S. Buss. </author> <title> Algorithm for Boolean formula evaluation and for tree contraction. In Arithmetic, Proof Theory, and Computational Complexity (P. </title> <editor> Clote and J. Krajcek, ed), </editor> <booktitle> Oxford Logic Guides, </booktitle> <volume> Vol. 23, </volume> <year> 1993, </year> <pages> pp. 96-115. </pages>
Reference-contexts: SAC 1 Size n O (1) , Degree n O (1) Context-free Languages [R80, S78, V91] NL Size n O (1) , Skew 4 [V92] Shortest paths, Transitive Closure, etc. NC 1 Depth O (log n), Bounded fan-in Regular sets, Boolean Formulae <ref> [B93, B89] </ref> AC 0 Depth O (1), Size n O (1) , f1g Unbounded fan-in under AC 0 reductions. arithmetic complexity classes: #AC 0 #NC 1 #L #SAC 1 #P The remainder of this paper describes the complete problems that motivate interest in these classes, discusses some surprising recent discoveries, and
Reference: [B97] <author> D. A. </author> <title> Mix Barrington, </title> <type> Personal Communication, </type> <year> 1997. </year>
Reference-contexts: However, showing hardness under many-one reducibility would show that #BWBP is equal to #NC 1 .) * It has been shown by Barrington <ref> [B97] </ref> that even multiplying 2 fi 2 matrices over N is hard for NC 1 under ACC 0 -Turing reducibility. Can this be improved? 9 8 #AC 0 The main reason to be interested in #AC 0 is because it may offer an avenue toward lower bounds for threshold circuits.
Reference: [BC92] <author> M. Ben-Or and R. Cleve. </author> <title> Computing algebraic formulas using a constant number of registers. </title> <journal> SIAM J. Comput. </journal> <month> 21 </month> <year> (1992) </year> <month> 54-58. </month>
Reference-contexts: Jung's proof is somewhat complicated. Here is a short and simple proof that came up in discussion with M. Agrawal and S. Datta. Proof It is observed in [CMTV96] that the techniques of Ben-Or and Cleve <ref> [BC92] </ref> show that the following problem is complete for GapNC 1 : Input: A sequence of 3 fi 3 integer matrices, M 1 ; M 2 ; : : : ; M n . <p> On the other hand, the authors of [CMTV96] did show (using the techniques of Ben-Or and Cleve <ref> [BC92] </ref>) that GapNC 1 is equal to the class of functions that are the difference of two #BWBP functions.
Reference: [BCGR92] <author> S. Buss, S. Cook, A. Gupta, and V. Ramachandran. </author> <title> An optimal parallel algorithm for formula evaluation. </title> <journal> SIAM J. Comput. </journal> <volume> 21 (1992), </volume> <pages> 755-780. </pages>
Reference-contexts: Analogous results hold for #SAC 1 . 4.1 Arithmetic-Boolean Circuits Another model that has received extensive study is the model of Arithmetic-Boolean Circuits of von zur Gathen. (For instance, see <ref> [vzG93, vzG87, GS91, BCGR92] </ref>.) These are circuits with both Boolean gates and arithmetic gates, as well as two additional types of gates (test: R ! f0; 1g and select: R 2 fi f0; 1g ! R) that provide an interface between the Boolean and arithmetic parts: test (x) = ( 1 <p> As such, it has been studied as a complexity class at least since [V79a]. Evaluating arithmetic formulae over N (Z) is complete for #N C 1 (GapNC 1 , respectively) <ref> [BCGR92] </ref>. Probably the most important and fascinating open question regarding #NC 1 is the question of whether or not it is identical to the class of functions having Boolean NC 1 circuits. We have already observed that #NC 1 is at least as powerful as Boolean NC 1 .
Reference: [BCH86] <author> P. Beame, S. Cook, and H. J. </author> <title> Hoover. Log depth circuits for division and related problems. </title> <journal> SIAM J. Comput., </journal> <volume> 15 </volume> <pages> 994-1003, </pages> <year> 1986. </year>
Reference-contexts: Then compute Q i M i (mod p), and finally, using the Chinese Remainder Theorem, recover our answer Q i M i (mod m). Except for the problem of computing Q i M i (mod p), this can all be done in depth O (log n) <ref> [BCH86] </ref>. How can we compute Q If we divide the sequence M 1 ; M 2 ; : : : M n into subsequences consisting of log n matrices, then we have an instance of our original problem f of size log n.
Reference: [BF97] <author> R. Beigel and B. Fu. </author> <title> Circuits over PP and PL. </title> <booktitle> In IEEE Conference on Computational Complexity, </booktitle> <pages> pages 24-35, </pages> <year> 1997. </year> <month> 11 </month>
Reference: [BGW96] <author> L. Babai, A. Gal, and A. Wigderson. </author> <title> Superpolynomial lower bounds for monotone span programs. </title> <type> DIMACS Technical Report 96-37. </type> <note> (Submitted for publication.) </note>
Reference-contexts: No deterministic NC algorithm is known for matching at all, but the probabilistic NC algorithm of [MVV87] can be used to show that, in the nonuniform setting, perfect matching is in coC = L and in L. (See <ref> [ABO96, BGW96] </ref> for details.) Recently, by combining use of the "isolating lemma" of [MVV87] with the new algorithm for the determinant of [MV97], it has been shown that the perfect matching problem is in SPL [AR97], which improves the previous upper bounds.
Reference: [BIS90] <author> D. A. Mix Barrington, N. Immerman, and H. </author> <title> Straubing. </title> <journal> On uniformity within NC 1 . Journal of Computer and System Sciences, </journal> <volume> 41 </volume> <pages> 274-306, </pages> <year> 1990. </year>
Reference-contexts: deterministic linear-time Turing machine that, given n and the name of gates g, can determine all of the desired information about gate g (such as whether g is a + gate or a fi gate, what the gates are that feed into g, etc.) Detailed definitions can be found in <ref> [V92, BIS90, R81] </ref>. 2 NP Size 2 n O (1) , Degree n O (1) [V92] SAT, etc. SAC 1 Size n O (1) , Degree n O (1) Context-free Languages [R80, S78, V91] NL Size n O (1) , Skew 4 [V92] Shortest paths, Transitive Closure, etc. <p> The reader is referred to <ref> [BIS90, R81] </ref> for more background on uniformity.) Some of the most interesting results about arithmetic circuits are known only to hold in the setting of nonuniform circuit complexity - although some people believe that they should hold also in the uniform setting.
Reference: [BM75] <author> A. Borodin and I. Munro. </author> <title> The Computational Complexity of Algebraic and Numeric Problems. </title> <address> New York: </address> <publisher> Elsevier, </publisher> <year> 1975. </year>
Reference-contexts: Usually the term "arithmetic circuit" is used only when R is an algebraic structure other than the Boolean ring.) The field of arithmetic circuit complexity has a large literature, and it is not our attempt to survey the entire field in these few pages. The reader is referred to <ref> [vzG93, BM75, Bo82, vzG87, GS91] </ref> (among others) for this purpose. The salient fact that we require here is that arithmetic circuits have been studied as a restricted (or structured) model of computation in contrast to Boolean circuits or Turing machines, which are "unrestricted" or "general" models of computation.
Reference: [Bo82] <author> A. Borodin. </author> <title> Structured versus general models in computational complexity. </title> <booktitle> In Logic and Algorithms, Symposium in honour of Ernst Specker. </booktitle> <address> L'Enseignement Mathematique 30 (1982) 47-65. </address>
Reference-contexts: Usually the term "arithmetic circuit" is used only when R is an algebraic structure other than the Boolean ring.) The field of arithmetic circuit complexity has a large literature, and it is not our attempt to survey the entire field in these few pages. The reader is referred to <ref> [vzG93, BM75, Bo82, vzG87, GS91] </ref> (among others) for this purpose. The salient fact that we require here is that arithmetic circuits have been studied as a restricted (or structured) model of computation in contrast to Boolean circuits or Turing machines, which are "unrestricted" or "general" models of computation.
Reference: [C85] <author> S. Cook. </author> <title> A taxonomy of problems with a fast parallel algorithms. </title> <booktitle> Information and Computation 64 (1985), </booktitle> <pages> 2-22. </pages>
Reference-contexts: A recent paper by Mahajan and Vinay [MV97] gives a new and beautiful proof of this theorem, and also provides references for the various places where this theorem was first proved independently. Cook first focused attention on the class of problems reducible to the determinant in <ref> [C85] </ref>. He defined this class in terms of NC 1 reducibility, and he observed that many of the problems for which fast parallel algorithms are known are in this class.
Reference: [CMTV96] <author> H. Caussinus, P. McKenzie, D. Therien, and H. Vollmer. </author> <title> Nondeterministic NC 1 computation. </title> <booktitle> In Proceedings, 11th Annual IEEE Conference on Computational Complexity, </booktitle> <pages> pages 12-21, </pages> <year> 1996. </year>
Reference-contexts: Next, let's mention the cases where it is trivial to prove. Any function computed by NC 1 circuits or by AC 0 circuits is easily seen to be computed by "unambiguous" circuits of the same type <ref> [CMTV96, AAD97] </ref>, and thus for these classes, arithmetic circuits over N are easily seen to be at least as powerful as Boolean circuits. <p> Jung's proof is somewhat complicated. Here is a short and simple proof that came up in discussion with M. Agrawal and S. Datta. Proof It is observed in <ref> [CMTV96] </ref> that the techniques of Ben-Or and Cleve [BC92] show that the following problem is complete for GapNC 1 : Input: A sequence of 3 fi 3 integer matrices, M 1 ; M 2 ; : : : ; M n . <p> For example, consider the class of languages accepted by probabilistic finite automata. It follows from <ref> [CMTV96] </ref> that all of these languages are in PNC 1 , and that there are some such languages that are complete for this class. <p> It has been known since the work of Lipton and Zalcstein [LZ76] that this problem is in L. It was shown by Robinson that it is hard for NC 1 . It was observed in <ref> [CMTV96] </ref> that the problem is in C = NC 1 . Thus it is sandwiched between NC 1 and C = NC 1 . If the log fl n factor can be removed, then its complexity will be resolved. <p> One of the most surprising and important results about Boolean NC 1 is Barrington's theorem [B89], characterizing NC 1 in terms of width-5 branching programs. It is natural to wonder if this characterization also gives an equivalent characterization of #N C 1 . The authors of <ref> [CMTV96] </ref> investigated this question, by defining the class of functions corresponding to counting paths through bounded-width branching programs, #BWBP. They showed that #BWBP is contained in #NC 1 , but it remains an open question if these classes are equal. <p> There has even been some speculation in the community that these two classes may really be different, since the techniques used to prove Barrington's theorem do not seem to help in this setting. On the other hand, the authors of <ref> [CMTV96] </ref> did show (using the techniques of Ben-Or and Cleve [BC92]) that GapNC 1 is equal to the class of functions that are the difference of two #BWBP functions. <p> .) This leads naturally to the following questions: * What about 2 fi 2 integer matrices? (This problem is hard for Boolean NC 1 by [R93], but not known to be hard for #N C 1 .) * What about k fi k matrices over N? (It is shown in <ref> [CMTV96] </ref> that for 6 fi 6 matrices, this is hard under AC 0 Turing reducibility, by computing the difference of two #BWBP functions.
Reference: [F97] <author> L. Fortnow. </author> <title> Counting Complexity. In Complexity Theory Retrospective II, </title> <editor> (L. Hema-spaandra and A. Selman, ed), </editor> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1997. </year>
Reference-contexts: It turns out that Arith (NP; Z) has been studied quite a lot; it is equal to the class GapP studied in [FFK94] (see also <ref> [F97] </ref>); GapP was originally defined as the class of all functions that are the difference of two #P functions, but it is not hard to show that this is an equivalent definition. By analogy to GapP, the other "Gap" classes have also been studied.
Reference: [FFK94] <author> Stephen A. Fenner, Lance J. Fortnow, and Stuart A. Kurtz. </author> <title> Gap-definable counting classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 48(1) </volume> <pages> 116-148, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: It turns out that Arith (NP; Z) has been studied quite a lot; it is equal to the class GapP studied in <ref> [FFK94] </ref> (see also [F97]); GapP was originally defined as the class of all functions that are the difference of two #P functions, but it is not hard to show that this is an equivalent definition. By analogy to GapP, the other "Gap" classes have also been studied. <p> GapP was originally introduced in <ref> [FFK94] </ref> as a tool for studying classes of languages that can be defined using GapP. <p> Further investigation of SPL may be useful in approaching the question of whether or not the #L hierarchy collapses. By analogy with a result of <ref> [FFK94] </ref> (showing that SPP = fA : GapP A = GapPg), one can show that SPL = fA : GapL A = GapLg. Are there other interesting problems that lie in this class? 5 This is stated without proof in [AO96].
Reference: [FSS84] <author> M. Furst, J. Saxe, and M. Sipser. </author> <title> Parity, circuits, and the polynomial-time hierarchy. </title> <booktitle> Mathematical Systems Theory 17 (1984), </booktitle> <pages> 13-27. </pages>
Reference-contexts: Furthermore, since AC 0 circuits are too weak even to compute the sum of their inputs (i.e., to count the number of 1's) <ref> [FSS84] </ref>, #AC 0 is a strictly more powerful class. The two remaining classes, #L and #SAC 1 , are more problematic. If every language in NL has its characteristic function in #L, then NL = UL.
Reference: [vzG87] <author> J. von zur Gathen. </author> <title> Feasible arithmetic computations: Valiant's hypothesis. </title> <journal> J. </journal> <note> Symbolic Computation 4 (1987) 137-172. </note>
Reference-contexts: Usually the term "arithmetic circuit" is used only when R is an algebraic structure other than the Boolean ring.) The field of arithmetic circuit complexity has a large literature, and it is not our attempt to survey the entire field in these few pages. The reader is referred to <ref> [vzG93, BM75, Bo82, vzG87, GS91] </ref> (among others) for this purpose. The salient fact that we require here is that arithmetic circuits have been studied as a restricted (or structured) model of computation in contrast to Boolean circuits or Turing machines, which are "unrestricted" or "general" models of computation. <p> Analogous results hold for #SAC 1 . 4.1 Arithmetic-Boolean Circuits Another model that has received extensive study is the model of Arithmetic-Boolean Circuits of von zur Gathen. (For instance, see <ref> [vzG93, vzG87, GS91, BCGR92] </ref>.) These are circuits with both Boolean gates and arithmetic gates, as well as two additional types of gates (test: R ! f0; 1g and select: R 2 fi f0; 1g ! R) that provide an interface between the Boolean and arithmetic parts: test (x) = ( 1
Reference: [vzG93] <author> J. von zur Gathen. </author> <title> Parallel linear algebra. In Synthesis of Parallel Algorithms, </title> <editor> ed. J. Reif. </editor> <publisher> Morgan Kaufmann, </publisher> <year> 1993, </year> <pages> 574-615. </pages>
Reference-contexts: Usually the term "arithmetic circuit" is used only when R is an algebraic structure other than the Boolean ring.) The field of arithmetic circuit complexity has a large literature, and it is not our attempt to survey the entire field in these few pages. The reader is referred to <ref> [vzG93, BM75, Bo82, vzG87, GS91] </ref> (among others) for this purpose. The salient fact that we require here is that arithmetic circuits have been studied as a restricted (or structured) model of computation in contrast to Boolean circuits or Turing machines, which are "unrestricted" or "general" models of computation. <p> Analogous results hold for #SAC 1 . 4.1 Arithmetic-Boolean Circuits Another model that has received extensive study is the model of Arithmetic-Boolean Circuits of von zur Gathen. (For instance, see <ref> [vzG93, vzG87, GS91, BCGR92] </ref>.) These are circuits with both Boolean gates and arithmetic gates, as well as two additional types of gates (test: R ! f0; 1g and select: R 2 fi f0; 1g ! R) that provide an interface between the Boolean and arithmetic parts: test (x) = ( 1 <p> By analogy to the definition of Arith (C; R), one can define classes Arith.Bool (C; R). (For instance, the class we would denote by Arith.Bool (SAC 1 ; N) is denoted by SAC 1 N in <ref> [vzG93] </ref>.) It is easy to verify that Arith.Bool (AC 0 ; N) = Arith (AC 0 ; N); and Arith.Bool (NC 1 ; N) = Arith (NC 1 ; N): One consequence of [RA97] is that, in the nonuniform setting, Arith.Bool (SAC 1 ; N) = Arith (SAC 1 ; N);
Reference: [GS91] <author> J. von zur Gathen and G. Seroussi. </author> <title> Boolean circuits versus arithmetic circuits. </title> <note> Information and Computation 91 (1991) 142-154. </note>
Reference-contexts: Usually the term "arithmetic circuit" is used only when R is an algebraic structure other than the Boolean ring.) The field of arithmetic circuit complexity has a large literature, and it is not our attempt to survey the entire field in these few pages. The reader is referred to <ref> [vzG93, BM75, Bo82, vzG87, GS91] </ref> (among others) for this purpose. The salient fact that we require here is that arithmetic circuits have been studied as a restricted (or structured) model of computation in contrast to Boolean circuits or Turing machines, which are "unrestricted" or "general" models of computation. <p> Analogous results hold for #SAC 1 . 4.1 Arithmetic-Boolean Circuits Another model that has received extensive study is the model of Arithmetic-Boolean Circuits of von zur Gathen. (For instance, see <ref> [vzG93, vzG87, GS91, BCGR92] </ref>.) These are circuits with both Boolean gates and arithmetic gates, as well as two additional types of gates (test: R ! f0; 1g and select: R 2 fi f0; 1g ! R) that provide an interface between the Boolean and arithmetic parts: test (x) = ( 1
Reference: [GW96] <author> A. Gal and A. Wigderson. </author> <title> Boolean vs. arithmetic complexity classes: randomized reductions. Random Structures and Algorithms, </title> <booktitle> 9 </booktitle> <pages> 99-111, </pages> <year> 1996. </year>
Reference-contexts: Further references can be found there. There is also a wealth of interesting material about arithmetic circuits over finite fields that fits very nicely into the framework described here. As an example, I mention <ref> [GW96] </ref>, as well as the work in [AAD97] characterizing ACC 0 in terms of arithmetic circuits over finite fields. I'm sure that, in my rush to finish this by deadline, I have left out other important material.
Reference: [J84] <author> H. Jung. </author> <title> On probabilistic tape complexity and fast circuits for matrix inversion problems. </title> <booktitle> In Proc. ICALP '84, Lecture Notes in Computer Science 172, </booktitle> <pages> pp. 281-291, </pages> <year> 1984. </year>
Reference-contexts: Some other problems in linear algebra and problems involving Markov decision processes were shown to be complete for PL in <ref> [J84, MGA97] </ref>. One important problem whose complexity remains unresolved is the perfect matching problem.
Reference: [J85] <author> H. Jung. </author> <title> Depth efficient transformations of arithmetic into Boolean circuits. </title> <booktitle> In Proc. FCT '85, Lecture Notes in Computer Science 199, </booktitle> <pages> pp. 167-173. </pages>
Reference-contexts: We have already observed that #NC 1 is at least as powerful as Boolean NC 1 . A hint that they might be the same class of functions is provided by the following theorem. Theorem 7.1 <ref> [J85] </ref> Let f 2 GapNC 1 . Then f is computed by a family of Boolean circuits having bounded fan-in, polynomial size, and depth O (log n log fl n). Jung's proof is somewhat complicated. Here is a short and simple proof that came up in discussion with M.
Reference: [LZ76] <author> R. Lipton and Y. Zalcstein. </author> <title> Word problems solvable in logspace. </title> <journal> J. </journal> <note> ACM 24 (1977) 522-526. </note>
Reference-contexts: Another well-studied example is the two-sided Dyck language (also known as the word problem for the free group with two generators). It has been known since the work of Lipton and Zalcstein <ref> [LZ76] </ref> that this problem is in L. It was shown by Robinson that it is hard for NC 1 . It was observed in [CMTV96] that the problem is in C = NC 1 . Thus it is sandwiched between NC 1 and C = NC 1 .
Reference: [M94] <author> I. Macarie. </author> <title> Space-efficient deterministic simulation of probabilistic automata. </title> <booktitle> In 11th Symposium on Theoretical Aspects of Computing (STACS), volume 775 of Lecture Notes in Computer Science, </booktitle> <pages> pages 109-122. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <month> 12 </month>
Reference-contexts: Since arithmetic circuits must "play by the rules", a number of strong lower bounds are known for various classes of arithmetic circuits (see the survey articles mentioned above, as well as <ref> [M94] </ref>). In contrast, we have painfully few lower bounds for general Boolean circuits. Traditional arithmetic circuit complexity is still an active field. The upper and lower bounds produced there are interesting both theoretically as well as from the practical standpoint of symbolic manipulation packages.
Reference: [M97] <author> I. Macarie. </author> <title> Space-efficient deterministic simulation of probabilistic automata. </title> <note> To appear in SIAM J. Comput. Preliminary version appeared as [M94]. </note>
Reference-contexts: For example, consider the class of languages accepted by probabilistic finite automata. It follows from [CMTV96] that all of these languages are in PNC 1 , and that there are some such languages that are complete for this class. From <ref> [M97] </ref>, it now follows that PNC 1 is contained in deterministic logspace. (Macarie's paper [M97] also provides a number of references for more information about probabilistic finite automata. <p> It follows from [CMTV96] that all of these languages are in PNC 1 , and that there are some such languages that are complete for this class. From <ref> [M97] </ref>, it now follows that PNC 1 is contained in deterministic logspace. (Macarie's paper [M97] also provides a number of references for more information about probabilistic finite automata. In spite of a large literature on these languages, their complexity has only recently become better understood.) If the log fl n factor can be removed, then their complexity will be resolved.
Reference: [MGA97] <author> M. Mundhenk, J. Goldsmith, and E. Allender. </author> <title> The complexity of policy evaluation for finite-horizon partially-observable Markov decision processes, </title> <booktitle> In Proc. 25th International Symposium on Mathematical Foundations of Computer Science (MFCS), Lecture Notes in Computer Science 1295, </booktitle> <pages> pp. 129-138, </pages> <year> 1997. </year>
Reference-contexts: Some other problems in linear algebra and problems involving Markov decision processes were shown to be complete for PL in <ref> [J84, MGA97] </ref>. One important problem whose complexity remains unresolved is the perfect matching problem.
Reference: [KUW86] <author> R. Karp and E. Upfal and A. Wigderson. </author> <title> Constructing a perfect matching is in random NC. </title> <booktitle> Combinatorica 6 (1986), </booktitle> <pages> 35-48. </pages>
Reference-contexts: Since the matching problem is hard for NL (see <ref> [ABO96, KUW86] </ref>), this "sandwiches" the complexity of this problem between NL and SPL (at least in the nonuniform setting). Further investigation of SPL may be useful in approaching the question of whether or not the #L hierarchy collapses.
Reference: [LR90] <author> K.-J. Lange and P. Rossmanith. </author> <title> Characterizing Unambiguous Augmented Pushdown Automata by Circuits. </title> <booktitle> In Proc. of 15th Symposium on Mathematical Foundations of Computer Science, Lecture Notes in Computer Science 452, </booktitle> <year> 1990, </year> <pages> 399-406. </pages>
Reference-contexts: There are some very nontrivial relationships between #SAC 1 and the related machine model (auxiliary pushdown machines) and classes of circuits. The reader is referred to <ref> [NR95, LR90, V91] </ref> for further information. 6 #L #L and GapL have received a great deal of attention, because of the following important fact: Computing the determinant of integer matrices is complete for GapL.
Reference: [M94] <author> K. Mulmuley. </author> <title> Lower bounds for parallel linear programming and other problems. </title> <booktitle> In Proceedings, 26th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 603-614, </pages> <year> 1994. </year>
Reference-contexts: Since arithmetic circuits must "play by the rules", a number of strong lower bounds are known for various classes of arithmetic circuits (see the survey articles mentioned above, as well as <ref> [M94] </ref>). In contrast, we have painfully few lower bounds for general Boolean circuits. Traditional arithmetic circuit complexity is still an active field. The upper and lower bounds produced there are interesting both theoretically as well as from the practical standpoint of symbolic manipulation packages.
Reference: [MV97] <author> M. Mahajan and V. Vinay. </author> <title> Determinant: Combinatorics, Algorithms, and Complexity. </title> <note> To appear in Chicago Journal of Theoretical Computer Science (http://www.cs.uchicago.edu/publications/cjtcs/). A preliminary version appeared as: A combinatorial algorithm for the determinant. In Proc. 8th ACM-SIAM Symposium on Discrete Algorithms (SODA), ACM Press, </note> <year> 1997, </year> <pages> pp. 730-738. </pages>
Reference-contexts: The reader is referred to [NR95, LR90, V91] for further information. 6 #L #L and GapL have received a great deal of attention, because of the following important fact: Computing the determinant of integer matrices is complete for GapL. A recent paper by Mahajan and Vinay <ref> [MV97] </ref> gives a new and beautiful proof of this theorem, and also provides references for the various places where this theorem was first proved independently. Cook first focused attention on the class of problems reducible to the determinant in [C85]. <p> but the probabilistic NC algorithm of [MVV87] can be used to show that, in the nonuniform setting, perfect matching is in coC = L and in L. (See [ABO96, BGW96] for details.) Recently, by combining use of the "isolating lemma" of [MVV87] with the new algorithm for the determinant of <ref> [MV97] </ref>, it has been shown that the perfect matching problem is in SPL [AR97], which improves the previous upper bounds. Since the matching problem is hard for NL (see [ABO96, KUW86]), this "sandwiches" the complexity of this problem between NL and SPL (at least in the nonuniform setting).
Reference: [MV94] <author> M. Mahajan and V. Vinay. </author> <title> Non-commutative computation, depth reduction and skew circuits. </title> <booktitle> In Proc. 14th FST&TCS, volume 880 of Lecture Notes in Computer Science, </booktitle> <pages> pages 48-59. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference: [MVV87] <author> K. Mulmuley, U. Vazirani, and V. Vazirani. </author> <title> Matching is as easy as matrix inversion. </title> <journal> Combinatorica, </journal> <volume> 7 </volume> <pages> 105-113, </pages> <year> 1987. </year>
Reference-contexts: One important problem whose complexity remains unresolved is the perfect matching problem. No deterministic NC algorithm is known for matching at all, but the probabilistic NC algorithm of <ref> [MVV87] </ref> can be used to show that, in the nonuniform setting, perfect matching is in coC = L and in L. (See [ABO96, BGW96] for details.) Recently, by combining use of the "isolating lemma" of [MVV87] with the new algorithm for the determinant of [MV97], it has been shown that the <p> deterministic NC algorithm is known for matching at all, but the probabilistic NC algorithm of <ref> [MVV87] </ref> can be used to show that, in the nonuniform setting, perfect matching is in coC = L and in L. (See [ABO96, BGW96] for details.) Recently, by combining use of the "isolating lemma" of [MVV87] with the new algorithm for the determinant of [MV97], it has been shown that the perfect matching problem is in SPL [AR97], which improves the previous upper bounds.
Reference: [NR95] <author> R. Niedermeier and P. Rossmanith. </author> <title> Unambiguous auxiliary pushdown automata and semi-unbounded fan-in circuits. </title> <journal> Information and Computation, </journal> <volume> 118(2) </volume> <pages> 227-245, </pages> <year> 1995. </year>
Reference-contexts: There are some very nontrivial relationships between #SAC 1 and the related machine model (auxiliary pushdown machines) and classes of circuits. The reader is referred to <ref> [NR95, LR90, V91] </ref> for further information. 6 #L #L and GapL have received a great deal of attention, because of the following important fact: Computing the determinant of integer matrices is complete for GapL.
Reference: [NR97] <author> M. Naor and O. Reingold. </author> <title> Number-Theoretic constructions of efficient pseudo-random functions. To appear in: </title> <booktitle> Proc. 38th IEEE Symp. on Foundations of Computer Science, </booktitle> <year> 1997. </year>
Reference-contexts: Razborov and Rudich show that, if strong enough pseudorandom generators are computable in TC 0 , then no "natural" proof can show that NP is not contained in TC 0 [RR94]. Furthermore, the results of <ref> [NR97] </ref> show that, if some popular cryptographic assumptions are correct, then strong enough pseudorandom generators are computable in TC 0 .
Reference: [O96] <author> M. Ogihara. </author> <title> The PL hierarchy collapses. </title> <booktitle> In ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pages 84-88, </pages> <year> 1996. </year>
Reference: [R93] <author> D. Robinson. </author> <title> Parallel algorithms for group word problems. </title> <type> Doctoral Dissertation, </type> <institution> Mathematics Dept., University of California, </institution> <address> San Diego, </address> <year> 1993. </year>
Reference-contexts: of 3 fi 3 integer matrices M i , and g (x) is equal to the (1,1) entry of the product of the M i .) This leads naturally to the following questions: * What about 2 fi 2 integer matrices? (This problem is hard for Boolean NC 1 by <ref> [R93] </ref>, but not known to be hard for #N C 1 .) * What about k fi k matrices over N? (It is shown in [CMTV96] that for 6 fi 6 matrices, this is hard under AC 0 Turing reducibility, by computing the difference of two #BWBP functions.
Reference: [RA97] <author> K. Reinhardt and E. Allender. </author> <title> Making nondeterminism unambiguous. </title> <booktitle> To appear in Proc. 38th IEEE Conference on Foundations of Computer Science (FOCS), </booktitle> <year> 1997. </year>
Reference-contexts: The two remaining classes, #L and #SAC 1 , are more problematic. If every language in NL has its characteristic function in #L, then NL = UL. However, since it was recently shown that NL/poly = UL/poly <ref> [RA97] </ref>, it is no longer clear if this should be considered unlikely. In fact, the results of [RA97] show that, in the nonuniform setting, every function that can be computed by Boolean NL circuits is in #L, and thus the arithmetic circuits are at least as powerful as the Boolean circuits. <p> If every language in NL has its characteristic function in #L, then NL = UL. However, since it was recently shown that NL/poly = UL/poly <ref> [RA97] </ref>, it is no longer clear if this should be considered unlikely. In fact, the results of [RA97] show that, in the nonuniform setting, every function that can be computed by Boolean NL circuits is in #L, and thus the arithmetic circuits are at least as powerful as the Boolean circuits. <p> class we would denote by Arith.Bool (SAC 1 ; N) is denoted by SAC 1 N in [vzG93].) It is easy to verify that Arith.Bool (AC 0 ; N) = Arith (AC 0 ; N); and Arith.Bool (NC 1 ; N) = Arith (NC 1 ; N): One consequence of <ref> [RA97] </ref> is that, in the nonuniform setting, Arith.Bool (SAC 1 ; N) = Arith (SAC 1 ; N); 5 and Arith.Bool (NL; N) = Arith (NL; N): In contrast, we shall see in Section 8 that Arith.Bool (AC 0 ; Z) coincides with the functions computable by constant-depth threshold circuits (TC <p> With the original definition of "skew" circuits, this is not obvious.) This is useful for showing that GapL is closed under some forms of reducibility. However, neither these results, nor the techniques of <ref> [RA97] </ref>, seem to be sufficient to prove any sort of collapse of the #L hierarchy. One of the main reasons to be interested in these classes is this: They characterize the complexity of some important and natural problems.
Reference: [R87] <author> A. A. Razborov. </author> <title> Lower bounds on the size of bounded depth networks over a complete basis with logical addition. </title> <journal> Mathematicheskie Zametki, </journal> <volume> 41 </volume> <pages> 598-607, </pages> <year> 1987. </year> <booktitle> English translation in Mathematical Notes of the Academy of Sciences of the USSR </booktitle> 41:333-338, 1987. 
Reference-contexts: On the other hand it is shown in [AAD97] that the zero-one-valued functions in GapAC 0 are exactly the languages in AC 0 [2] (that is, the languages accepted by constant-depth polynomial-size circuits of AND, OR, and PARITY gates). The results of <ref> [R87, S87] </ref> show that there are many simple languages (such as the Mod 3 function) that are not in AC 0 [2], and thus current lower bound techniques apply to these very small arithmetic circuit classes.
Reference: [RR94] <author> A. A. Razborov and S. Rudich. </author> <title> Natural proofs. </title> <booktitle> In Proceedings, 26th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 204-213, </pages> <year> 1994. </year> <month> 13 </month>
Reference-contexts: Razborov and Rudich show that, if strong enough pseudorandom generators are computable in TC 0 , then no "natural" proof can show that NP is not contained in TC 0 <ref> [RR94] </ref>. Furthermore, the results of [NR97] show that, if some popular cryptographic assumptions are correct, then strong enough pseudorandom generators are computable in TC 0 . <p> Thus, if popular cryptographic assumptions are correct, this attempt to prove lower bounds for TC 0 is doomed to failure, unless expanding our repertoire of lower bounds for GapL leads us outside the framework of "natural proofs" as considered in <ref> [RR94] </ref>.
Reference: [R80] <author> W. Ruzzo. </author> <title> Tree-size bounded alternation. </title> <journal> Journal of Computer and System Sciences, </journal> <month> 21 </month> <year> (1980) </year> <month> 218-235. </month>
Reference-contexts: SAC 1 Size n O (1) , Degree n O (1) Context-free Languages <ref> [R80, S78, V91] </ref> NL Size n O (1) , Skew 4 [V92] Shortest paths, Transitive Closure, etc.
Reference: [R81] <author> W. Ruzzo. </author> <title> On uniform circuit complexity. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 21 </volume> <pages> 365-383, </pages> <year> 1981. </year>
Reference-contexts: deterministic linear-time Turing machine that, given n and the name of gates g, can determine all of the desired information about gate g (such as whether g is a + gate or a fi gate, what the gates are that feed into g, etc.) Detailed definitions can be found in <ref> [V92, BIS90, R81] </ref>. 2 NP Size 2 n O (1) , Degree n O (1) [V92] SAT, etc. SAC 1 Size n O (1) , Degree n O (1) Context-free Languages [R80, S78, V91] NL Size n O (1) , Skew 4 [V92] Shortest paths, Transitive Closure, etc. <p> The reader is referred to <ref> [BIS90, R81] </ref> for more background on uniformity.) Some of the most interesting results about arithmetic circuits are known only to hold in the setting of nonuniform circuit complexity - although some people believe that they should hold also in the uniform setting. <p> to circuits of depth O (log n), where the fi gates have fan-in two, and + gates have unbounded fan-in. (These are called semi-unbounded fan-in circuits.) This was first proved in the nonuniform setting in [VSBR83], and related depth-reduction results for uniform circuits were proved for the Boolean ring in <ref> [R81] </ref>, and for N in [V91]. A general proof that works in the uniform setting over any commutative semiring appears in [AJMV].
Reference: [RST] <author> W. Ruzzo, J. Simon, and M. Tompa. </author> <title> Space-bounded hierarchies and probabilistic computation. </title> <journal> Journal of Computer and System Sciences 28, </journal> <year> 1984, </year> <pages> 216-230. </pages>
Reference-contexts: The first two of these hierarchies collapse, and they coincide with NC 1 reducibility. * AC 0 (C = L) = L C = L = NC 1 (C = L) [ABO96]. (These hierarchies are defined using "Ruzzo-Simon-Tompa" reducibility <ref> [RST] </ref>, which is the usual notion of oracle access for space-bounded nondeterministic Turing machines.) It seems natural to conjecture that AC 0 and NC 1 -reducibility coincide on #L, too.
Reference: [S78] <author> I. H. Sudborough. </author> <title> On the tape complexity of deterministic context-free languages. </title> <journal> J. Association of Computing Machinery, </journal> <volume> 25 </volume> <pages> 405-414, </pages> <year> 1978. </year>
Reference-contexts: SAC 1 Size n O (1) , Degree n O (1) Context-free Languages <ref> [R80, S78, V91] </ref> NL Size n O (1) , Skew 4 [V92] Shortest paths, Transitive Closure, etc.
Reference: [S87] <author> R. Smolensky. </author> <title> Algebraic methods in the theory of lower bounds for Boolean circuit complexity. </title> <booktitle> In Proceedings, 19th ACM Symposium on Theory of Computing, </booktitle> <pages> pages 77-82, </pages> <year> 1987. </year>
Reference-contexts: On the other hand it is shown in [AAD97] that the zero-one-valued functions in GapAC 0 are exactly the languages in AC 0 [2] (that is, the languages accepted by constant-depth polynomial-size circuits of AND, OR, and PARITY gates). The results of <ref> [R87, S87] </ref> show that there are many simple languages (such as the Mod 3 function) that are not in AC 0 [2], and thus current lower bound techniques apply to these very small arithmetic circuit classes.
Reference: [T92] <author> S. </author> <title> Toda. Classes of arithmetic circuits capturing the complexity of computing the determinant. </title> <journal> IEICE Trans. Inf. and Syst., </journal> <volume> E75-D:116-124, </volume> <year> 1992. </year>
Reference-contexts: If they do, then the #L hierarchy collapses. 5 One of the first papers to explicitly study GapL in terms of arithmetic circuits was <ref> [T92] </ref>. One of the contributions of [T92] is an argument showing that some extensions of the class of "skew" arithmetic circuits also yield exactly GapL. (For instance, using Toda's generalization, it is obvious that all GapNC 1 functions are in GapL. <p> If they do, then the #L hierarchy collapses. 5 One of the first papers to explicitly study GapL in terms of arithmetic circuits was <ref> [T92] </ref>. One of the contributions of [T92] is an argument showing that some extensions of the class of "skew" arithmetic circuits also yield exactly GapL. (For instance, using Toda's generalization, it is obvious that all GapNC 1 functions are in GapL.
Reference: [V79a] <author> L. Valiant. </author> <title> Completeness classes in algebra. </title> <booktitle> In Proc. 11th ACM Symposium on Theory of Computing (STOC), </booktitle> <pages> pages 249-261, </pages> <year> 1979. </year>
Reference-contexts: Recently, Mahajan (personal communication) pointed out that this actually requires some proof. More information is available in [A97]. 7 7 #NC #NC 1 coincides with the class of functions that have arithmetic formulae of polynomial size. As such, it has been studied as a complexity class at least since <ref> [V79a] </ref>. Evaluating arithmetic formulae over N (Z) is complete for #N C 1 (GapNC 1 , respectively) [BCGR92]. Probably the most important and fascinating open question regarding #NC 1 is the question of whether or not it is identical to the class of functions having Boolean NC 1 circuits.
Reference: [V79b] <author> L. Valiant. </author> <title> The complexity of computing the Permanent. </title> <journal> Theoretical Computer Science, </journal> <volume> 8 </volume> <pages> 189-201, </pages> <year> 1979. </year>
Reference-contexts: Probably #P is also familiar to the reader as the class of functions of the form #acc M (x), counting the number of accepting paths of an NP machine M on input x <ref> [V79b] </ref>. The class #L is defined similarly, but for NL machines M [AJ93b]. There is another way of arriving at the classes #P and #L, starting with NP and NL, using circuits instead of Turing machines.
Reference: [V91] <author> H. Venkateswaran. </author> <title> Properties that characterize LOGCFL. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 43 </volume> <pages> 380-404, </pages> <year> 1991. </year>
Reference-contexts: SAC 1 Size n O (1) , Degree n O (1) Context-free Languages <ref> [R80, S78, V91] </ref> NL Size n O (1) , Skew 4 [V92] Shortest paths, Transitive Closure, etc. <p> (log n), where the fi gates have fan-in two, and + gates have unbounded fan-in. (These are called semi-unbounded fan-in circuits.) This was first proved in the nonuniform setting in [VSBR83], and related depth-reduction results for uniform circuits were proved for the Boolean ring in [R81], and for N in <ref> [V91] </ref>. A general proof that works in the uniform setting over any commutative semiring appears in [AJMV]. <p> There are some very nontrivial relationships between #SAC 1 and the related machine model (auxiliary pushdown machines) and classes of circuits. The reader is referred to <ref> [NR95, LR90, V91] </ref> for further information. 6 #L #L and GapL have received a great deal of attention, because of the following important fact: Computing the determinant of integer matrices is complete for GapL. <p> Now, I must apologize for not even covering all of that field. The paper [AJMV] contains a number of results about arithmetic circuits over some noncommutative semirings (in particular ( fl ,max,concat)) that characterize the optimization classes OptL and related classes <ref> [AJ92, V91] </ref>. Further references can be found there. There is also a wealth of interesting material about arithmetic circuits over finite fields that fits very nicely into the framework described here.
Reference: [V92] <author> H. Venkateswaran. </author> <title> Circuit definitions of nondeterministic complexity classes. </title> <journal> SIAM Journal on Computing, </journal> <volume> 21 </volume> <pages> 655-670, </pages> <year> 1992. </year>
Reference-contexts: There is another way of arriving at the classes #P and #L, starting with NP and NL, using circuits instead of Turing machines. Although NP and NL are usually defined in terms of nondeterministic Turing machines, these classes can also be defined in terms of uniform 3 Boolean circuits <ref> [V92] </ref>. <p> the most straightforward way, replacing each AND gate by a fi gate, and each OR gate by a + gate (and each negated input gate x i is replaced by 1 x i ), then we now obtain precisely #P and #L, when the arithmetic operations are defined on N <ref> [V92] </ref>. #P and #L are our first two "arithmetic complexity classes". There are three more arithmetic classes that will concern us, based on the Boolean circuit classes SAC 1 , NC 1 , and AC 0 , respectively. problems motivating their study. <p> deterministic linear-time Turing machine that, given n and the name of gates g, can determine all of the desired information about gate g (such as whether g is a + gate or a fi gate, what the gates are that feed into g, etc.) Detailed definitions can be found in <ref> [V92, BIS90, R81] </ref>. 2 NP Size 2 n O (1) , Degree n O (1) [V92] SAT, etc. SAC 1 Size n O (1) , Degree n O (1) Context-free Languages [R80, S78, V91] NL Size n O (1) , Skew 4 [V92] Shortest paths, Transitive Closure, etc. <p> all of the desired information about gate g (such as whether g is a + gate or a fi gate, what the gates are that feed into g, etc.) Detailed definitions can be found in [V92, BIS90, R81]. 2 NP Size 2 n O (1) , Degree n O (1) <ref> [V92] </ref> SAT, etc. SAC 1 Size n O (1) , Degree n O (1) Context-free Languages [R80, S78, V91] NL Size n O (1) , Skew 4 [V92] Shortest paths, Transitive Closure, etc. <p> g, etc.) Detailed definitions can be found in [V92, BIS90, R81]. 2 NP Size 2 n O (1) , Degree n O (1) <ref> [V92] </ref> SAT, etc. SAC 1 Size n O (1) , Degree n O (1) Context-free Languages [R80, S78, V91] NL Size n O (1) , Skew 4 [V92] Shortest paths, Transitive Closure, etc.
Reference: [V91] <author> V. Vinay. </author> <title> Counting auxiliary pushdown automata and semi-unbounded arithmetic circuits. </title> <booktitle> In Proc. 6th IEEE Structure in Complexity Theory Conference, </booktitle> <pages> pages 270-284, </pages> <year> 1991. </year>
Reference-contexts: SAC 1 Size n O (1) , Degree n O (1) Context-free Languages <ref> [R80, S78, V91] </ref> NL Size n O (1) , Skew 4 [V92] Shortest paths, Transitive Closure, etc. <p> (log n), where the fi gates have fan-in two, and + gates have unbounded fan-in. (These are called semi-unbounded fan-in circuits.) This was first proved in the nonuniform setting in [VSBR83], and related depth-reduction results for uniform circuits were proved for the Boolean ring in [R81], and for N in <ref> [V91] </ref>. A general proof that works in the uniform setting over any commutative semiring appears in [AJMV]. <p> There are some very nontrivial relationships between #SAC 1 and the related machine model (auxiliary pushdown machines) and classes of circuits. The reader is referred to <ref> [NR95, LR90, V91] </ref> for further information. 6 #L #L and GapL have received a great deal of attention, because of the following important fact: Computing the determinant of integer matrices is complete for GapL. <p> Now, I must apologize for not even covering all of that field. The paper [AJMV] contains a number of results about arithmetic circuits over some noncommutative semirings (in particular ( fl ,max,concat)) that characterize the optimization classes OptL and related classes <ref> [AJ92, V91] </ref>. Further references can be found there. There is also a wealth of interesting material about arithmetic circuits over finite fields that fits very nicely into the framework described here.
Reference: [VSBR83] <author> L. Valiant, S. Skyum, S. Berkowitz, and C. Rackoff. </author> <title> Fast parallel computation of polynomials using few processors. </title> <journal> SIAM J. Comput. </journal> <volume> 12 (1983) 641-644. </volume> <pages> 14 </pages>
Reference-contexts: important facts about arithmetic circuits of polynomial size and degree is that they are equivalent to circuits of depth O (log n), where the fi gates have fan-in two, and + gates have unbounded fan-in. (These are called semi-unbounded fan-in circuits.) This was first proved in the nonuniform setting in <ref> [VSBR83] </ref>, and related depth-reduction results for uniform circuits were proved for the Boolean ring in [R81], and for N in [V91]. A general proof that works in the uniform setting over any commutative semiring appears in [AJMV].
References-found: 60

