URL: http://http.cs.berkeley.edu/~fateman/papers/newpse.ps
Refering-URL: http://http.cs.berkeley.edu/~fateman/algebra.html
Root-URL: 
Title: on Programming Environments and Tools for Advanced Scientific Computation that support problem solving, code development,
Author: Richard J. Fateman 
Keyword: 2.1 Mathematical Modeling and Symbolic Computing  
Address: 1 Summary  
Affiliation: Computer Science Division Department of Electrical Engineering and Computer Sciences Electronics Research Laboratory  
Note: Excerpts from a proposal to the National Science Foundation  2 New Experiments  
Abstract: We propose to concentrate on investigations of technology in support of advanced scientific computation, based on a higher-level view of the relationship of mathematical modeling to computation. This is based on the following considerations: 5. Extending the use of remote computation. We are now using standard network connections for the In this section we discuss a variety of topics of of current interest. The (by now) traditional approach to mathematical modeling is to formulate "by hand" mathematical models whose consequences can be simulated by running computer programs. These programs are typically written in Fortran, but are increasingly being written in C, C++, or other languages that have better tools for abstraction and data structures. In part, the computational approach we advocate involves the use of computers in that earlier "by hand" stage of model formulation, using symbolic mathematics. The blossoming of this area via commercial programs typified by Mathematica and Maple, as well as some less widely used but still viable competitors (Axiom, Macsyma, MuPAD) might suggests that this approach is (a) successful and (b) needs no more academic research. Actually, the relatively higher level of activity (and funding) in Europe has demonstrated that important results remain to be found in advancement of algorithms and building systems. Work at RISC-Linz (Austria), ETH (Zurich), CAN (Netherlands), INRIA (France) and the multi-national POSSO project are just a few sample programs. Their activities overshadow the limited work in US universities, and point to the fact acquisition of complex data (in this case, symbolic solution of definite integrals).
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Yannis Avgoustis. </author> <title> "Symbolic Laplace Transforms of Special Functions" in Proc. </title> <booktitle> of the 1977 Macsyma Users' Conference, </booktitle> <address> Berkeley. CA 1977. </address> <publisher> (NASA CP-2012). </publisher> <pages> 21-41. </pages>
Reference-contexts: in a complex analysis text [4] (page 24, exercises 13a and 13b) 2 Discuss the branch-cut and Riemann-surface situation for each of the following functions: p p and ln (1 + z 2 + 1) The Cuts program works as follows (the somewhat obscure syntax is inherited from Mathematica): In <ref> [1] </ref>:= Cuts [Sqrt [1 + Sqrt [#]]&] Out [1]= --Cut [-Infinity, 0, Identity], Sqrt [1 - Sqrt [#1]] & -- In [2]:= Cuts [Log [1 + Sqrt [#^2 + 1]]&] 2 Out [2]= --Cut [-Infinity, -1, -Sqrt [#1] & ], Log [1 - Sqrt [1 + #1 ]] & -, 2 <p> exercises 13a and 13b) 2 Discuss the branch-cut and Riemann-surface situation for each of the following functions: p p and ln (1 + z 2 + 1) The Cuts program works as follows (the somewhat obscure syntax is inherited from Mathematica): In <ref> [1] </ref>:= Cuts [Sqrt [1 + Sqrt [#]]&] Out [1]= --Cut [-Infinity, 0, Identity], Sqrt [1 - Sqrt [#1]] & -- In [2]:= Cuts [Log [1 + Sqrt [#^2 + 1]]&] 2 Out [2]= --Cut [-Infinity, -1, -Sqrt [#1] & ], Log [1 - Sqrt [1 + #1 ]] & -, 2 &gt; -Cut [-Infinity, -1, Sqrt [#1] & ], <p> Consider this example: In [3]:= Cuts [Log [# + 1] Log [#- 1]&] Out [3]= --Cut <ref> [-1, 1, Identity] </ref>, 2 I Pi - Log [-1 + #1] + Log [1 + #1] & -- An example demonstrating the usefulness of conformal mapping is that of the well-known Joukowski "airfoil." Manipulations of this transform pose a puzzle to every existing computer algebra system: if R (z) = (z
Reference: [2] <author> D. Barton, K. M. Willers, and R. V. M.Zahar. </author> <title> "Taylor Series Methods for Ordinary Differential Equations An evaluation," </title> <note> in Mathematical Software J. </note> <editor> R. Rice (ed). </editor> <publisher> Academic Press (1971) 369-390. </publisher>
Reference-contexts: of the following functions: p p and ln (1 + z 2 + 1) The Cuts program works as follows (the somewhat obscure syntax is inherited from Mathematica): In [1]:= Cuts [Sqrt [1 + Sqrt [#]]&] Out [1]= --Cut [-Infinity, 0, Identity], Sqrt [1 - Sqrt [#1]] & -- In <ref> [2] </ref>:= Cuts [Log [1 + Sqrt [#^2 + 1]]&] 2 Out [2]= --Cut [-Infinity, -1, -Sqrt [#1] & ], Log [1 - Sqrt [1 + #1 ]] & -, 2 &gt; -Cut [-Infinity, -1, Sqrt [#1] & ], Log [1 - Sqrt [1 + #1 ]] & -- The notation Sqrt <p> 2 + 1) The Cuts program works as follows (the somewhat obscure syntax is inherited from Mathematica): In [1]:= Cuts [Sqrt [1 + Sqrt [#]]&] Out [1]= --Cut [-Infinity, 0, Identity], Sqrt [1 - Sqrt [#1]] & -- In <ref> [2] </ref>:= Cuts [Log [1 + Sqrt [#^2 + 1]]&] 2 Out [2]= --Cut [-Infinity, -1, -Sqrt [#1] & ], Log [1 - Sqrt [1 + #1 ]] & -, 2 &gt; -Cut [-Infinity, -1, Sqrt [#1] & ], Log [1 - Sqrt [1 + #1 ]] & -- The notation Sqrt [1 + Sqrt [#]]& is used to represent the function z: <p> Some of the more immediate results seem quite pleasing. We suspect they are totally ignored by the numerical computing establishment. The basic idea is quite simple and elegant, and an excellent account may be found in a paper by Barton et al <ref> [2] </ref>. <p> How good are these methods? It is hard to evaluate them against routines whose measure of goodness is "number of function evaluations" because the Taylor series does not evaluate the function at all! To quote from Barton <ref> [2] </ref>, "[The method of Taylor series] has been restricted and its numerical theory neglected merely because adequate software in the form of automatic programs for the method has been nonexistent.
Reference: [3] <author> Benjamin Berman and Richard Fateman. </author> <title> "Optical Character Recognition for Typeset Mathematics," </title> <booktitle> Proc. of Int'l Symp. on Symbolic and Algebraic Computation (ACM Press) (ISSAC-94) Oxford, </booktitle> <address> UK. </address> <month> July, </month> <year> 1994. </year> <month> 348|353. </month>
Reference-contexts: The notation -Cut [-Infinity, 0, Identity], Sqrt [1 - Sqrt [#1]] & represents the branch cut fxj1 &lt; x &lt;= 0g, with alternate branch function z: p p Our implementation will eliminate many instances of what we call "removable branch cuts," where cuts cancel. Consider this example: In <ref> [3] </ref>:= Cuts [Log [# + 1] Log [#- 1]&] Out [3]= --Cut [-1, 1, Identity], 2 I Pi - Log [-1 + #1] + Log [1 + #1] & -- An example demonstrating the usefulness of conformal mapping is that of the well-known Joukowski "airfoil." Manipulations of this transform pose a <p> Consider this example: In <ref> [3] </ref>:= Cuts [Log [# + 1] Log [#- 1]&] Out [3]= --Cut [-1, 1, Identity], 2 I Pi - Log [-1 + #1] + Log [1 + #1] & -- An example demonstrating the usefulness of conformal mapping is that of the well-known Joukowski "airfoil." Manipulations of this transform pose a puzzle to every existing computer algebra system: if R (z)
Reference: [4] <author> G. F. Carrier, M. Krook, and C. E. Pearson. </author> <title> Functions of a Complex Variable: Theory and Techniques, </title> <publisher> McGraw-Hill, </publisher> <year> 1966. </year>
Reference-contexts: Dingle's work (incidentally, written using Mathematica, but not without considerable hacking), can solve many problems such as the following, which appear as exercises in a complex analysis text <ref> [4] </ref> (page 24, exercises 13a and 13b) 2 Discuss the branch-cut and Riemann-surface situation for each of the following functions: p p and ln (1 + z 2 + 1) The Cuts program works as follows (the somewhat obscure syntax is inherited from Mathematica): In [1]:= Cuts [Sqrt [1 + Sqrt
Reference: [5] <author> B. Char, K. Geddes, G. Gonnet, and S. Watt. </author> <title> Maple User's Guide, 4th ed. </title> <publisher> WATCOM Publ. Ltd., </publisher> <address> Waterloo, Ontario, Canada, </address> <year> 1985. </year>
Reference: [6] <author> Grant O. Cook, Jr. </author> <title> Code Generation in ALPAL using Symbolic Techniques, </title> <booktitle> in Proceedings of the International Symposium on Symbolic and Algebraic Computation, </booktitle> <year> 1992, </year> <editor> P. Wang, Ed., </editor> <address> Berkeley CA, 1992, </address> <publisher> ACM, </publisher> <address> New York, </address> <month> 27|35. </month>
Reference-contexts: Finite element code is but one example of an area where symbolic manipulation seems plausible as an adjunct to numerical code generation. Other systems (e.g. <ref> [6] </ref>) aimed at other application techniques or even specific problems are under investigation, and there is a substantial literature developing here. 9 2.5 Data Modeling and IEEE floating-point number representations An idea that has emerged from discussion with earth-science numerical simulation consumers has been the idea that keeping track of program
Reference: [7] <author> Adam Dingle and Richard Fateman. </author> <title> "Branch Cuts in Computer Algebra" Proc. </title> <booktitle> of Int'l Symp. on Symbolic and Algebraic Computation (ACM Press) (ISSAC-94) Oxford, </booktitle> <address> UK. </address> <month> July, </month> <year> 1994. </year> <month> 250|257. </month>
Reference-contexts: The damage done to algebraic manipulation systems' reputations by their incorrect implementation of a r b r ! (ab) r and its consequences, is not inevitable. Adam Dingle's masters' project, a summary of which appeared in <ref> [7] </ref> implements a simple portion of our branch cut computation algorithm. The program can provide representations of results that are still lacking in computer algebra system today, even though it would seem to be quite basic to many advanced algorithms.
Reference: [8] <author> Richard J. Fateman. </author> <booktitle> "Advances and Trends in the Design of Algebraic Manipulation Systems," in: </booktitle> <editor> S. Watanabe, M. Nagata (eds), </editor> <booktitle> Proc. Int'l Symp. on Symbolic and Algebraic Computation (ACM/ Addison-Wesley), (ISSAC-90) invited paper, </booktitle> <address> Tokyo, </address> <month> August, </month> <pages> 20-24, </pages> <year> 1990, </year> <pages> 60-67. </pages>
Reference: [9] <author> R. Fateman. </author> <title> "Symbolic Mathematical Computing: Orbital dynamics and applications to accelerators," </title> <booktitle> Particle Accelerators 19 Nos.1-4, </booktitle> <pages> pp. 237-245. </pages>
Reference-contexts: Example: Generating perturbation expansions 5 A common task for some computational scientists is the generation (perhaps at considerable mental expense) of a formula to be inserted into a Fortran or other program. An example from celestial mechanics (or equivalently, accelerator physics <ref> [9] </ref>) is the solution to the "Euler equation" E = u + e sin (E) which is solved iteratively to form an expansion in powers of the small quantity e. Let A 0 be 0.
Reference: [10] <author> R. Fateman and W. Kahan. </author> <title> "Improving Exact Integrals from Symbolic Computation Systems," </title> <type> Tech. </type> <institution> Rept. Ctr. for Pure and Appl. Math. Univ. Calif. Berkeley, PAM 386, </institution> <year> 1987. </year>
Reference: [11] <author> E.L. Ince, </author> <title> Ordinary differential equations, </title> <publisher> Dover, </publisher> <address> NY, </address> <year> 1956. </year> <note> 3 http://www.rrz.uni-koeln.de/REDUCE/spde/spde.html 4 http://www.gmd.de/SCAI/alg/cade/lodef/lodef.html 13 </note>
Reference: [12] <author> R. Fateman, T. Tokuyasu, B. Berman, N. Mitchell. </author> <title> Optical Character Recognition and Parsing of Typeset Mathematics, </title> <journal> J. Visual Commun. </journal> <volume> and Image Representation vol 7 no 1, </volume> <month> March, </month> <year> 1996. </year> <month> 2|15. </month>
Reference: [13] <author> R. Fateman, "FRPOLY: </author> <title> A Benchmark Revisited," </title> <booktitle> Lisp and Symbolic Programming, </booktitle> <month> 4 </month> <year> (1991) </year> <month> 153|162. </month>
Reference: [14] <author> R. Fateman, </author> <title> Lisp and Symbolic Programming, 4 (1991) 153|162. "Review of Mathematica," </title> <journal> J. Symbolic Comp. </journal> <volume> 13 no. </volume> <month> 5 (May </month> <year> 1992) </year> <month> 545|579. </month>
Reference: [15] <author> R. Fateman. </author> <title> "Canonical Representations in Lisp and Applications to Computer Algebra Systems" Proc. </title> <booktitle> Int'l Symp. on Symbolic and Algebraic Computation (ACM/ Addison-Wesley), </booktitle> <address> (ISSAC-91) Bonn, Germany, </address> <month> July, </month> <year> 1991. </year> <pages> 360-369. </pages>
Reference: [16] <author> R. Fateman. </author> <title> Review of "A Guide to Computer Algebra Systems," </title> <editor> D. Harper, C. Wolf, D. Hodgkinson (J. </editor> <publisher> Wiley). Math. </publisher> <address> Comp. </address> <note> (book review). </note>
Reference: [17] <author> R. Fateman and Derek T. Lai. </author> <title> "A Simple Display Package for Polynomials and Rational Functions in Common Lisp," </title> <note> SIGSAM Bulletin 98 (vol 24 no. </note> <month> 4 Oct. </month> <year> 1991) </year> <month> 1|3. </month>
Reference: [18] <author> R. Fateman. </author> <title> "Honest Plotting, Global Extrema, and Interval Arithmetic," </title> <booktitle> Proc. Int'l Symp. on Symbolic and Algebraic Computation (ACM Press), </booktitle> <address> (ISSAC-92) Berkeley, CA. </address> <month> July, </month> <year> 1992. </year> <month> 216|223. </month>
Reference: [19] <author> R. Fateman. </author> <title> Review of Automatic Differentiation of Algorithms: Theory, Implementation, and Application, A. Griewank, G. </title> <journal> Corliss (SIAM) SIAM Rev 35, </journal> <volume> no 4. </volume> <month> (Dec. </month> <year> 1993) </year> <month> 659-660. </month> <note> (book review). </note>
Reference: [20] <author> R. Fateman. </author> <title> Review of The Maple V Handbook (Abel, Braselton), </title> <journal> Computing Reviews, </journal> <month> Feb. </month> <year> 1995. </year> <note> (book review) </note>
Reference: [21] <author> R. Fateman, Kevin A. Broughan, Diane K. Willcock, and Duane Rettig. </author> <title> "Fast Floating-Point Processing in Common Lisp", </title> <journal> ACM Trans. on Math. Software, </journal> <volume> vol 21 no. 1, </volume> <month> March </month> <year> 1995, </year> <month> 26|62. </month>
Reference-contexts: It is appalling that one sees in C, C++, Perl, the repeated reprogramming of common interfaces that are missing from the language. Typically the repeated poor implementations do not include sufficient error detection and recovery to provide confidence in the package. We have been experimenting with Common Lisp <ref> [21] </ref> as a language that provides enormous (perhaps too much) support for the many ancillary tasks for computing|including nearly every feature of sequential and parallel programming languages today|in scientific programming tasks as well.
Reference: [22] <author> R. Fateman and T. H. Einwohner. </author> <title> "Searching Techniques for Integral Tables," </title> <booktitle> Proc. of Int'l Symp. on Symbolic and Algebraic Computation (ACM Press) (ISSAC-95) Montreal CA. </booktitle> <month> July, </month> <year> 1995. </year> <month> 133|139. </month>
Reference: [23] <author> R. Fateman and H-C (Phil) Liao. </author> <title> "Evaluation of the Heuristic Polynomial GCD." </title> <booktitle> Proc. of Int'l Symp. on Symbolic and Algebraic Computation (ACM Press) (ISSAC-95) Montreal CA. </booktitle> <month> July, </month> <year> 1995. </year> <title> 240|247. [24] "Symbolic Mathematical System Evaluators", </title> <booktitle> Proc. of Int'l Symp. on Symbolic and Algebraic Computation (ACM Press) (ISSAC-96) Zurich, </booktitle> <address> Switzerland. </address> <month> July, </month> <year> 1996. </year> <month> 86|94. </month>
Reference: [25] <author> R. Fateman, T. Tokuyasu, B. Berman, N. Mitchell. </author> <title> Optical Character Recognition and Parsing of Typeset Mathematics, </title> <journal> J. Visual Commun. and Image Representation vol. </journal> <volume> 7 no 1, </volume> <month> March, </month> <year> 1996. </year> <month> 2|15. </month>
Reference: [26] <author> R. Fateman and W. Kahan. </author> <title> Improving Exact Integrals from Symbolic Algebra Systems. </title> <type> Ctr. </type> <institution> for Pure and Appl. Math. </institution> <type> Report 386, </type> <institution> U.C. Berkeley. </institution> <year> 1986. </year>
Reference-contexts: Even a moment's thought suggests a better answer is log (b=a). Or if we are going to do this right, a numerically-preferable formula would be something like "if 0:5 &lt; b=a &lt; 2:0 then 7 2 arctanh ((b a)=(b + a)) else log (b=a)." <ref> [26] </ref>. Consider, in IEEE double precision, b = 10 15 and a = b + 1: the first formula gives 7:1 10 15, the second gives the far more accurate 10: 10 15 .
Reference: [27] <author> Simon Gray, Norbert Kajler, Paul Wang. </author> <title> "MP: A Protocol for efficient exchange of mathematical expressions" Proc. </title> <type> ISSAC 94 330-335. </type>
Reference: [28] <author> P. Henrici. </author> <title> Applied and Computational Complex Analysis vol. 1 (Power series, integration, conformal mapping, location of zeros) Wiley-Interscience, </title> <year> 1974. </year>
Reference-contexts: Almost all of it concerns numerical solutions, but there is a small corner of it devoted to solution by power series and analytic continuation. There is a detailed exposition by Henrici <ref> [28] </ref> of the background including "applications" of analytic continuation. In fact his results are somewhat theoretical, but they provide a rigorous if pessimistic foundation. Some of the more immediate results seem quite pleasing. We suspect they are totally ignored by the numerical computing establishment.
Reference: [29] <author> W. Kahan. </author> <title> "Handheld Calculator Evaluates Integrals," </title> <journal> Hewlett-Packard Journal 31, </journal> <volume> 8, </volume> <year> 1980, </year> <month> 23|32. </month>
Reference-contexts: Example: f (x) = 1=(1 + z 64 ) whose integral is F (z) = 32 k=1 c k arctanh z + 1=z s k arctan z 1=z where c k := cos ((2k 1)=64) and s k := sin ((2k 1)=64). <ref> [29] </ref> Other examples abound when the closed form, at least under usual numerical evaluation rules, is either not stable for computing, or inefficient. Perhaps the most trivial example is R b a x 1 dx which most computer algebra systems give as log b log a.
Reference: [30] <author> E. Kamke. </author> <title> Differentialgleichungen, </title> <booktitle> Losungsmethoden und Losungen, Akademische Verlagsgesellschaft, Leipzig 1961. </booktitle>
Reference-contexts: This approach requires encoding material such as Zwillinger's Handbook [45], Polyanin's Handbook [34] or Kamke's Differential-Gleichgungen <ref> [30] </ref> in TILU-compatible electronic form. This, in turn, involves addressing some ticklish engineering issues of encoding and allowed transformations. We expect that we will have to augment the relatively uniform lookup method that has already been refined and tested for integrands. <p> In such a circumstance, a shared client/server approach is plausible, and we may use a CAS framework for the canonical transformations, and TILU for lookup. As an example of the value of this approach, we considered some 316 first-order ODES extracted from Kamke <ref> [30] </ref>, and provided to us in REDUCE syntax, by Alain Mossiaux, tested them in Mathematica 2.2, 3.0, Macsyma 2 and MuPad (via Paul Zimmermann 2 ) Using Kamke as a benchmark is something of a tradition in computer algebra.
Reference: [31] <author> I. S. Gradshteyn and I. M. Ryzhik. </author> <title> Table of Integrals, Series, and Products, Corrected and Enlarged, 5th edition, </title> <publisher> Academic Press, </publisher> <year> 1996. </year> <month> 14 </month>
Reference: [32] <author> A. Griewank and G. F. Corliss (eds.) </author> <title> Automatic Differentiation of Algorithms: Theory, Implementation, and Application. </title> <booktitle> Proc. of the First SIAM Workshop on Automatic Differentiation. </booktitle> <publisher> SIAM, </publisher> <address> Philadelphia, </address> <year> 1991. </year>
Reference-contexts: Especially if you do not wish to waste time, the task is rather more difficult. A recent book edited by Griewank and Corliss <ref> [32] </ref>. considers a wide range of tools: from numerical differentiation, through pre-processing of languages to produce Fortran, to new language designs entirely (for example, embodying Taylor-series representations of scalar values).
Reference: [33] <author> A.C. Hearn. </author> <title> "Computer Algebra on the Net," </title> <booktitle> Proc. DISCO 96, </booktitle>
Reference: [34] <author> Andrei D. Polyanin and Valentin F. Zaitsev, </author> <title> Handbook of Exact Solutions for Ordinary Differential Equations, </title> <publisher> CRC Press, </publisher> <year> 1995. </year>
Reference-contexts: This approach requires encoding material such as Zwillinger's Handbook [45], Polyanin's Handbook <ref> [34] </ref> or Kamke's Differential-Gleichgungen [30] in TILU-compatible electronic form. This, in turn, involves addressing some ticklish engineering issues of encoding and allowed transformations. We expect that we will have to augment the relatively uniform lookup method that has already been refined and tested for integrands.
Reference: [35] <author> Douglas H. Lanam, </author> <title> "An Algebraic Front-end for the Production and Use of Numeric Programs", </title> <booktitle> Proc. ACM-SYMSAC-81 Conference, </booktitle> <address> Snowbird, UT,August, </address> <year> 1981 </year> <month> (223|227). </month>
Reference-contexts: As an example of the code that has been produced, we have been able to "write" fortran code for optimization (derivatives, etc.) and for finite-element cells, compile this code, and then invoke it "untouched by humans." This work at Berkeley dates back to before Douglas Lanam's <ref> [35] </ref> 1981 MS project; earlier significant work includes the previously mentioned work by Wirth [43]. A stream of similar programs has emerged as a major thrust in symbolic system applications [42]. We do not yet see it emerging in the larger numerical simulation community.
Reference: [36] <author> H-C (Phil) Liao. </author> <title> Automated Techniques for Proving Geometry Theorems 52 pages, </title> <type> typeset (MS Report, </type> <institution> UC Berkeley). </institution>
Reference: [37] <author> Peter Schmidt. </author> <title> "Automatic symbolic solution of differential equations of first order and first degree" ACM Proc. </title> <booktitle> SYMSAC 76, </booktitle> <address> 114-125 Karlsruhe, Germany, </address> <year> 1996. </year>
Reference-contexts: Peter Schmidt <ref> [37] </ref> used it in 1976, where he claimed a solution rate of 90% on Kamke's first order equations, although it appears that Schmidt counted as a solution results in terms of unresolved integrals.
Reference: [38] <author> Ramon E. Moore. </author> <title> Methods and applications of interval analysis. </title> <note> SIAM studies in applied mathematics, 1979 also, Reliability in computing: the role of interval methods in scientific computing,Academic Press, </note> <year> 1988. </year>
Reference-contexts: There is a substantial literature on such testing, as well as tools based on interval arithmetic (e.g. <ref> [38] </ref>). CAS provide an easy handle to go beyond ordinary fixed-precision floating-point arithmetic that may be inadequate for computation. CAS provide exact integer and rational evaluation of polynomial and rational functions.
Reference: [39] <author> W. H. Press, B. P. Flannery, S. A. Teukolsky and W. T. Vetterling. </author> <title> Numerical Recipes (Fortran), </title> <publisher> Cambridge University Press, </publisher> <address> Cambridge UK, </address> <year> 1989. </year>
Reference-contexts: It seems that handling this with a program is like swatting a fly with a cannon. Nevertheless, even polynomial evaluation has its subtleties, and we will start with a nearly real-life exercise related to this. Consider the Fortran program segment from <ref> [39] </ref> (p. 178) computing an approximation to a Bessel function: ... DATA Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9/0.39894228D0,-0.3988024D-1, * -0.362018D-2,0.163801D-2,-0.1031555D-1,0.2282967D-1, ...
Reference: [40] <author> Warren Teitelman. </author> <title> Pilot: A Step toward Man-computer Symbiosis, MAC-TR-32 Project Mac, </title> <publisher> MIT Sept. </publisher> <year> 1966, </year> <pages> 193 pages. </pages>
Reference-contexts: Often we see experimentation in program manipulation within the Lisp programming language because the data representations and the program representations have been so close 1 . For example, in his PhD dissertation, Warren Teitelman <ref> [40] </ref> at MIT in 1966 described the use of an interactive environment to assist in developing a high-level view of the programming task itself. His PILOT system showed how the user could "advise" arbitrary programs|generally without knowing their internal structure at all|to modify their behavior.
Reference: [41] <author> A. P. Prudnikov, Yu.A. Brychkov, O. I. Marichev. </author> <title> Integrals and Series, three volumes, </title> <publisher> Gordon and Breach Science Publishers, N.Y. </publisher> <pages> 1986-1990. </pages>
Reference: [42] <author> P. S. Wang. </author> <title> "FINGER: A Symbolic System for Automatic Generation of Numerical Programs in Finite Element Analysis," </title> <journal> J. </journal> <note> Symbolic Computing 2 no. 3 Sept. </note> <year> 1986. </year> <pages> 305-316. </pages>
Reference-contexts: High-speed and even parallel computation of functions represented by Taylor series is perhaps worth considering. 2.4 Finite element analysis, and similar environments Formula generation needed to automate the use of finite element analysis code has been a target for several packages using symbolic mathematics (see Wang <ref> [42] </ref> for example). It is notable that even though some of the manipulations would seem to be routine|differentiation and integration|there are nevertheless subtleties that make naive versions of algorithms inadequate to solve large problems. <p> A stream of similar programs has emerged as a major thrust in symbolic system applications <ref> [42] </ref>. We do not yet see it emerging in the larger numerical simulation community.
Reference: [43] <author> Michael C. Wirth. </author> <title> On the Automation of Computational Physics. </title> <type> PhD. </type> <institution> diss. Univ. Calif., Davis School of Aplied Science, Lawrence Livermore Lab., </institution> <month> Sept. </month> <year> 1980. </year>
Reference-contexts: We can date some significant efforts back to at least the late 1970s, with ambitious efforts using symbolic mathematics systems (e.g. M. Wirth's PhD dissertation <ref> [43] </ref> who used Macsyma to automate work in computational physics). Here we give some sample manipulations from our recent work. <p> we have been able to "write" fortran code for optimization (derivatives, etc.) and for finite-element cells, compile this code, and then invoke it "untouched by humans." This work at Berkeley dates back to before Douglas Lanam's [35] 1981 MS project; earlier significant work includes the previously mentioned work by Wirth <ref> [43] </ref>. A stream of similar programs has emerged as a major thrust in symbolic system applications [42]. We do not yet see it emerging in the larger numerical simulation community.
Reference: [44] <author> Paul Zimmermann. </author> <title> "Using Tilu to improve the MuPAD integrator," </title> <institution> INRIA, Lorraine, </institution> <month> Sept. </month> <year> 1996. </year>
Reference-contexts: We have hooked this program up to a web page, and to date several thousand web queries have been handled by this prototype TILU server. It is natural to wonder if this is necessary|Don't computer algebra systems do this? We are grateful for some testing information from Paul Zimmerman <ref> [44] </ref> (INRIA, Lorraine) who started with our sample of 2145 artificially generated TILU inputs (generated by substitutions into our current table contents), and used some 1382 of them as testing inputs to various systems.
Reference: [45] <author> Daniel Zwillinger. </author> <title> Handbook of Differential Equations, </title> <publisher> Harcourt Brace, </publisher> <year> 1996. </year> <month> 15 </month>
Reference-contexts: Our server relies on the fact that the time for lookup is not very heavily dependent on the size of the lookup table, so ODEs may be stored in several different transformed forms to see if one matches. This approach requires encoding material such as Zwillinger's Handbook <ref> [45] </ref>, Polyanin's Handbook [34] or Kamke's Differential-Gleichgungen [30] in TILU-compatible electronic form. This, in turn, involves addressing some ticklish engineering issues of encoding and allowed transformations. We expect that we will have to augment the relatively uniform lookup method that has already been refined and tested for integrands.
References-found: 44

