URL: ftp://ftp.cs.man.ac.uk/pub/applied_logic/PeterAczel/fup.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~petera/ftp_papers.html
Root-URL: http://www.cs.man.ac.uk
Email: email: petera@cs.man.ac.uk  
Title: Final Universes of Processes  
Author: Peter Aczel 
Date: February 3, 1994  
Address: Manchester M13 9PL, U.K.  
Affiliation: Departments of Mathematics and Computer Science Manchester University  
Abstract: We describe the final universe approach to the character-isation of semantic universes and illustrate it by giving char-acterisations of the universes of CCS and CSP processes. Keywords: Final Universe, Process, Coalgebra, Labelled Transition System, CCS, CSP . 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Aczel, </author> <title> Non-Well-Founded Sets, </title> <booktitle> CSLI Lecture Notes, </booktitle> <volume> No. </volume> <pages> 14, </pages> <address> 27 Stanford University, </address> <year> 1988. </year>
Reference-contexts: Further investigation is needed to see what the relationships are, if any. 3 1.3 Outline The rest of this paper is organised as follows. In the next section we review the general mathematical apparatus for final coalgebras that has been developed in <ref> [1] </ref> and [2]. There is one new result, Theorem 2.2 that plays a useful unifying role here. This theory is very general, and in section 3 we specialise to the key application for process algebra, labelled transition systems. <p> Although not traditional, this approach would seem to be rather natural from the category-theoretic perspective. 2.3 Standard Functors Let Class be the category of classes. This is a superlarge category. But we shall not worry here about making our use of this rigorous. From previous experience (e.g. see <ref> [1] </ref>) there is no serious problem with a careful handling of it. If A is a subclass of B then the identity map from A to B will be called an inclusion map A ,! B. <p> A key result about the category of coalgebras for a standard functor is: Theorem 2.1 (Final Coalgebra Theorem) Every standard functor on the category of classes has a final coalgebra. A weaker result was first proved in <ref> [1] </ref>, where it was assumed that the functor preserved weak pullbacks. <p> Theorem 3.1 There is a final LT S. Theorem 3.2 Any image-closed and union-closed, full subcategory of the category of LT Ss has a final object. In chapter 8 of <ref> [1] </ref> I showed that any final LT S gives a universe for the SCCS processes, up to the strong bisimulation equivalence that is the natural one to consider for SCCS. There I also showed how the SCCS combinators could be defined as operations on any final LT S.
Reference: [2] <author> P. Aczel and Nax Mendler, </author> <title> A Final Coalgebra Theorem, </title> <booktitle> in Springer Lecture Notes in Computer Science No. 389, Category Theory and Computer Science, edited by D.H. Pitt et al., </booktitle> <pages> pp 357-365. </pages>
Reference-contexts: Further investigation is needed to see what the relationships are, if any. 3 1.3 Outline The rest of this paper is organised as follows. In the next section we review the general mathematical apparatus for final coalgebras that has been developed in [1] and <ref> [2] </ref>. There is one new result, Theorem 2.2 that plays a useful unifying role here. This theory is very general, and in section 3 we specialise to the key application for process algebra, labelled transition systems. <p> A weaker result was first proved in [1], where it was assumed that the functor preserved weak pullbacks. A slightly stronger result was proved in <ref> [2] </ref>, where it was only assumed that the functor was set-based, a better assumption from the category-theoretic purists point of view, but not much weaker than the assumption that the functor is standard. An interesting new generalisation of the above theorem will be useful in this paper. <p> If each C i is image-closed (union-closed) then so is their intersection. This observation can be useful in applying the above theorem. The following further weakening of the notion of a weakly final coalgebra will be useful. It was used in <ref> [2] </ref> when proving the Final Coalgebra Theorem. Given a standard functor on the category of classes, a coalgebra (A; ) is small if A is a set. <p> A coalgebra (A; ) is weakly complete if, for every small coalgebra (A 0 ; 0 ) there is at least one coalgebra map (A 0 ; 0 ) ! (A; ). We have the following results from <ref> [2] </ref>:- Proposition 2.3 Every weakly complete strongly extensional coal-gebra is final. Proposition 2.4 For every coalgebra there is a surjective map from it onto a strongly extensional coalgebra.
Reference: [3] <author> J.C.M. Baeten and W.P. Weijland, </author> <title> Process Algebra, </title> <publisher> Cambridge University Press, </publisher> <year> 1990. </year>
Reference: [4] <author> M. Hennessy, </author> <title> Algebraic Theory of Processes, </title> <publisher> MIT Press, </publisher> <year> 1988. </year>
Reference: [5] <author> C.A.R. Hoare, </author> <title> Communicating Sequential Processes, </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: One major strand of this work may perhaps be put under the general title of `process agebra'. The process algebra approach originated from the seminal ideas of Milner and Hoare. They have presented developments of their ideas in the books <ref> [5] </ref> and [6]. <p> I will illustrate the approach by applying it to the two versions of process algebra that appear in <ref> [5] </ref> and [6]; i.e. CCS and CSP . <p> For all e 2 E K ff 2. For all e 1 ; e 2 2 E K 23 5 C SP Processes 5.1 The notion of a CSP -system We will give a characterisation of the CSP notion of process in terms of CSP -systems. In <ref> [5] </ref> event names play roughly the same role for CSP that atomic actions play in CCS. We shall assume given a fixed set N of event names. Earlier we formulated a coloured version of the notion of an LT S. <p> We shall assume given a fixed set N of event names. Earlier we formulated a coloured version of the notion of an LT S. We now specialise to the colours needed for the version of CSP presented in <ref> [5] </ref>. A feature of CSP is that processes can have varying alphabets, the alphabet of a process being the set of the event names that ever make sense for the process. This will be one aspect of CSP colouring. <p> It is easy to check that Proposition 5.2 C CSP is image and union closed and hence there is a final CSP -system. 24 5.2 The CSP system of non-chaotic CSP pro- cesses We give the mathematical definition of the notion of CSP process that is in <ref> [5] </ref>, using our notation and terminology. We have incorporated an extra condition that is needed as we do not make the simplifying assumption, made in [5], that the alphabet of a process must be finite. <p> -system. 24 5.2 The CSP system of non-chaotic CSP pro- cesses We give the mathematical definition of the notion of CSP process that is in <ref> [5] </ref>, using our notation and terminology. We have incorporated an extra condition that is needed as we do not make the simplifying assumption, made in [5], that the alphabet of a process must be finite.
Reference: [6] <author> Robin Milner, </author> <title> Communication and Concurrency, </title> <publisher> Prentice Hall, </publisher> <year> 1989. </year>
Reference-contexts: One major strand of this work may perhaps be put under the general title of `process agebra'. The process algebra approach originated from the seminal ideas of Milner and Hoare. They have presented developments of their ideas in the books [5] and <ref> [6] </ref>. <p> I will illustrate the approach by applying it to the two versions of process algebra that appear in [5] and <ref> [6] </ref>; i.e. CCS and CSP . There are many variants of the ideas of CCS and CSP so it should be emphasised that it is the presentations in those books that will be used, although I shall find it convenient to use my own notation and definitions to some extent. <p> In particular we call a CLT S deterministic if its underlying LT S is deterministic. 4 C C S Processes 4.1 Review of CCS Here we want to summarise the syntax and operational semantics of CCS, as it is presented in the book <ref> [6] </ref>. 4.1.1 Syntax of CCS We assume given a set fl of names, with an associated disjoint set fl of conames, one coname, a for each name a. Each name a forms a complementary pair with its coname a. <p> We will call the pair K = (K; ) a system of constants for CCS. As envisioned in the book <ref> [6] </ref>, constants with their defining equations can be introduced as needed. We can capture this idea of an open language with an expanding system of constants by using a fixed system of constants that is universal in the following sense. <p> But this LT S does not incorporate any special treatment of the distinguished action o to reflect the intended intuition that o should not be externally observable. To capture this <ref> [6] </ref> introduces relations ^ff ) on E K and uses them, instead of the relations ff imal bisimulation relation , called weak bisimulation equivalence. <p> In <ref> [6] </ref> weak bisimulation congruence is the fundamental equivalence relation for CCS. So it will be our main concern. In proposition 4.14 we will give a reformulation of the definition of o , on certain LT Ss A, as a maximal bisimulation on an associated LT S A o .
Reference: [7] <author> Lawrence S. Moss and Satish R. Thatte, </author> <title> Generalisation of Final Algebra Semantics by Relativisation, </title> <booktitle> LNCS 442 (1990), </booktitle> <pages> 284-300. </pages>
Reference-contexts: The paper [8] is a useful complement to the present paper. It is concerned with essentially the same idea of final semantics as presented here. A different, but possibly related topic is `final algebra semantics' in the theory of abstract data types. See, for example <ref> [7] </ref> and the references cited there. Further investigation is needed to see what the relationships are, if any. 3 1.3 Outline The rest of this paper is organised as follows.
Reference: [8] <author> J.J.M.M. Rutten and D. Turi, </author> <title> On the Foundations of Final Semantics: Non-standard sets, Metric Spaces, Partial Orders, </title> <type> Technical Report CS-R9241, </type> <institution> CWI (Centre for Mathematics and Computer Science), </institution> <address> Amsterdam, </address> <year> 1992. </year> <month> 28 </month>
Reference-contexts: An object F in a category is weakly final/strongly extensional if for every object A there is at least/most one map A ! F . Clearly an object is final if and only if it is both weakly final and strongly extensional. The paper <ref> [8] </ref> is a useful complement to the present paper. It is concerned with essentially the same idea of final semantics as presented here. A different, but possibly related topic is `final algebra semantics' in the theory of abstract data types. See, for example [7] and the references cited there.
References-found: 8

