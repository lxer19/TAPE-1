URL: http://www.cs.virginia.edu/~robins/papers/arbor_tcad_final.ps
Refering-URL: http://www.cs.virginia.edu/brochure/profs/robins.html
Root-URL: http://www.cs.virginia.edu
Title: New Performance-Driven FPGA Routing Algorithms  
Author: Michael J. Alexander and Gabriel Robins 
Address: Pullman, WA 99165-2752  Charlottesville, VA 22903-2442  
Affiliation: School of Electrical Engineering and Computer Science, Washington State University,  Department of Computer Science, University of Virginia,  
Abstract: Motivated by the goal of increasing the performance of FPGA-based designs, we propose new Steiner and arborescence FPGA routing algorithms. Our Steiner tree constructions significantly outperform the best known ones and have provably-good performance bounds. Our arborescence heuristics produce routing solutions with optimal source-sink pathlengths, and with wirelength on par with the best existing Steiner tree heuristics. We have incorporated these algorithms into an actual FPGA router, which routed a number of industrial circuits using channel width considerably smaller than is achievable by previous routers. Our routing results for both the 3000 and 4000 -series Xilinx parts are currently the best known in the literature.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> M. J. Alexander, J. P. Cohoon, J. L. Coleflesh, J. Karro, E. L. Peters, and G. Robins, </author> <title> Placement and Routing for Three-Dimensional FPGSs, </title> <booktitle> in Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <address> Reston, VA, </address> <month> April </month> <year> 1996, </year> <pages> pp. 142-149. </pages>
Reference-contexts: Our routing algorithms easily integrate into existing layout frameworks to yield combined place-and route tools [3, 5]. Moreover, all of our methods generalize to three-dimensional FPGAs <ref> [1, 2] </ref>.
Reference: [2] <author> M. J. Alexander, J. P. Cohoon, J. L. Coleflesh, J. Karro, and G. Robins, </author> <title> Three-Dimensional Field-Programmable Gate Arrays, </title> <booktitle> in Proc. IEEE Intl. ASIC Conf., </booktitle> <address> Austin, TX, </address> <month> September </month> <year> 1995, </year> <pages> pp. 253-256. </pages>
Reference-contexts: Our routing algorithms easily integrate into existing layout frameworks to yield combined place-and route tools [3, 5]. Moreover, all of our methods generalize to three-dimensional FPGAs <ref> [1, 2] </ref>.
Reference: [3] <author> M. J. Alexander, J. P. Cohoon, J. L. Ganley, and G. Robins, </author> <title> Placement and Routing for Performance-Oriented FPGA Layout, VLSI Design (to appear). </title> <type> 23 </type>
Reference-contexts: Our FPGA router based on these algorithms effectively routes industrial benchmarks using reduced maximum channel width, and our experimental results are currently the best known in the literature. Our routing algorithms easily integrate into existing layout frameworks to yield combined place-and route tools <ref> [3, 5] </ref>. Moreover, all of our methods generalize to three-dimensional FPGAs [1, 2].
Reference: [4] <author> M. J. Alexander, J. P. Cohoon, J. L. Ganley, and G. Robins, </author> <title> An Architecture-Independent Approach to FPGA Routing Based on Multi-Weighted Graphs, </title> <booktitle> in Proc. European Design Automation Conf., </booktitle> <address> Grenoble, France, </address> <month> September </month> <year> 1994, </year> <pages> pp. 259-264. </pages>
Reference-contexts: Other research has adopted a more abstract model of FPGA routing connections [28], studied FPGA routing with switch blocks of limited flexibility [37], or explored modified architectures [34] in order to reduce the number of programmable switches required. More recently, <ref> [4, 7] </ref> developed a routing framework where mutually competing objectives (such as congestion, wirelength, and jog minimization) may be simultaneously optimized. However, none of these works directly minimizes the source-sink signal propagation delays.
Reference: [5] <author> M. J. Alexander, J. P. Cohoon, J. L. Ganley, and G. Robins, </author> <title> Performance-Oriented Placement and Routing for Field-Programmable Gate Arrays, </title> <booktitle> in Proc. European Design Automation Conf., </booktitle> <address> Brighton, England, </address> <month> September </month> <year> 1995, </year> <pages> pp. 80-85. </pages>
Reference-contexts: Our FPGA router based on these algorithms effectively routes industrial benchmarks using reduced maximum channel width, and our experimental results are currently the best known in the literature. Our routing algorithms easily integrate into existing layout frameworks to yield combined place-and route tools <ref> [3, 5] </ref>. Moreover, all of our methods generalize to three-dimensional FPGAs [1, 2].
Reference: [6] <author> M. J. Alexander and G. Robins, </author> <title> High-Performance Routing for Field-Programmable Gate Arrays, </title> <booktitle> in Proc. IEEE Intl. ASIC Conf., </booktitle> <address> Rochester, NY, </address> <month> September </month> <year> 1994, </year> <pages> pp. 138-141. </pages>
Reference-contexts: Section 3 describes our graph Steiner routing construction for routing non-critical nets, while Section 4 presents our graph Steiner arborescence algorithms for critical-net routing. Section 5 outlines the experimental results, and Section 6 concludes with future research directions. Parts of this work appeared in preliminary form in <ref> [6, 7, 8] </ref>. 2 Problem Formulation An FPGA architecture typically consists of a symmetrical array of user configurable logic "blocks", and a set of programmable interconnection resources used for routing [12, 36] (See Figure 1).
Reference: [7] <author> M. J. Alexander and G. Robins, </author> <title> A New Approach to FPGA Routing Based on Multi-Weighted Graphs, </title> <booktitle> in Proc. ACM/SIGDA Intl. Workshop on Field-Programmable Gate Arrays, </booktitle> <address> Berkeley, CA, </address> <month> February </month> <year> 1994. </year>
Reference-contexts: Section 3 describes our graph Steiner routing construction for routing non-critical nets, while Section 4 presents our graph Steiner arborescence algorithms for critical-net routing. Section 5 outlines the experimental results, and Section 6 concludes with future research directions. Parts of this work appeared in preliminary form in <ref> [6, 7, 8] </ref>. 2 Problem Formulation An FPGA architecture typically consists of a symmetrical array of user configurable logic "blocks", and a set of programmable interconnection resources used for routing [12, 36] (See Figure 1). <p> Other research has adopted a more abstract model of FPGA routing connections [28], studied FPGA routing with switch blocks of limited flexibility [37], or explored modified architectures [34] in order to reduce the number of programmable switches required. More recently, <ref> [4, 7] </ref> developed a routing framework where mutually competing objectives (such as congestion, wirelength, and jog minimization) may be simultaneously optimized. However, none of these works directly minimizes the source-sink signal propagation delays.
Reference: [8] <author> M. J. Alexander and G. Robins, </author> <title> New Performance-Driven FPGA Routing Algorithms, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <address> San Francisco, CA, </address> <month> June </month> <year> 1995, </year> <pages> pp. 562-567. </pages>
Reference-contexts: Section 3 describes our graph Steiner routing construction for routing non-critical nets, while Section 4 presents our graph Steiner arborescence algorithms for critical-net routing. Section 5 outlines the experimental results, and Section 6 concludes with future research directions. Parts of this work appeared in preliminary form in <ref> [6, 7, 8] </ref>. 2 Problem Formulation An FPGA architecture typically consists of a symmetrical array of user configurable logic "blocks", and a set of programmable interconnection resources used for routing [12, 36] (See Figure 1).
Reference: [9] <author> C. J. Alpert, T. C. Hu, J. H. Huang, A. B. Kahng, and D. Karger, </author> <title> Prim-Dijkstra Tradeoffs for Improved Performance-Driven Routing Tree Design, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 14 (1995), </volume> <pages> pp. 890-896. </pages>
Reference-contexts: While these approaches implicitly equate delay minimization with wirelength optimization [23, 31], it has recently become clear that these 3 two goals are not synonymous [11], especially for deep submicron VLSI technologies. The bounded-radius bounded-cost (BRBC) method of [14] and the AHHK method of <ref> [9] </ref> both achieve wirelength-radius tradeoffs in weighted graphs, but can not directly produce a shortest paths tree with minimum wirelength. Rather, with the tradeoff parameter tuned completely towards pathlength minimization, the methods of [14] and [9] both produce the same shortest-paths tree as would Dijkstra's algorithm [16]. <p> The bounded-radius bounded-cost (BRBC) method of [14] and the AHHK method of <ref> [9] </ref> both achieve wirelength-radius tradeoffs in weighted graphs, but can not directly produce a shortest paths tree with minimum wirelength. Rather, with the tradeoff parameter tuned completely towards pathlength minimization, the methods of [14] and [9] both produce the same shortest-paths tree as would Dijkstra's algorithm [16]. The recent A-Tree algorithm of [15] for rectilinear arborescence Steiner trees depends heavily on the Man-hattan norm, and is therefore not suitable for the graph-based domains that arise naturally in FPGA routing.
Reference: [10] <author> N. B. Bhat and D. D. Hill, </author> <title> Routable Technology Mapping for LUT FPGAs, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <year> 1992, </year> <pages> pp. 95-98. </pages>
Reference-contexts: On the other hand, less attention has been focused on the actual routing, which is surprising since it was observed that FPGA performance is frequently limited by routing delays, rather than by combinational logic delays <ref> [10, 18] </ref>. Routing affects the performance of FPGA-based systems in two major ways. First, a typical design must be partitioned and mapped onto several FPGAs. Since off-chip signal propagation delays are significantly longer than on-chip delays, we seek to minimize the number of such partitions.
Reference: [11] <author> K. D. Boese, A. B. Kahng, B. A. McCoy, and G. Robins, </author> <title> Near-Optimal Critical Sink Routing Tree Constructions, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 14 (1995), </volume> <pages> pp. 1417-1436. </pages>
Reference-contexts: Our second arborescence heuristic iteratively selects Steiner nodes which improve the total wirelength with respect to an optimal spanning arborescence algorithm. Our constructions can be easily tuned to the specific parasitics of the underlying technology (the advantages of technology-sensitive routing were discussed and analyzed in, e.g., <ref> [11, 15] </ref>). Finally, we incorporated our algorithms into an actual FPGA router, and successfully routed several large industry benchmark circuits, using considerably less channel width than is achievable by other routers (e.g., the CGE/SEGA routers of [12, 27] require channel width 22% larger than our own router). <p> However, none of these works directly minimizes the source-sink signal propagation delays. While these approaches implicitly equate delay minimization with wirelength optimization [23, 31], it has recently become clear that these 3 two goals are not synonymous <ref> [11] </ref>, especially for deep submicron VLSI technologies. The bounded-radius bounded-cost (BRBC) method of [14] and the AHHK method of [9] both achieve wirelength-radius tradeoffs in weighted graphs, but can not directly produce a shortest paths tree with minimum wirelength.
Reference: [12] <author> S. D. Brown, R. J. Francis, J. Rose, and Z. G. Vranesic, </author> <title> Field-Programmable Gate Arrays, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1992. </year>
Reference-contexts: Finally, we incorporated our algorithms into an actual FPGA router, and successfully routed several large industry benchmark circuits, using considerably less channel width than is achievable by other routers (e.g., the CGE/SEGA routers of <ref> [12, 27] </ref> require channel width 22% larger than our own router). Our routing benchmarks on both 3000- and 4000- series Xilinx parts are currently the best known among all published results. <p> Parts of this work appeared in preliminary form in [6, 7, 8]. 2 Problem Formulation An FPGA architecture typically consists of a symmetrical array of user configurable logic "blocks", and a set of programmable interconnection resources used for routing <ref> [12, 36] </ref> (See Figure 1). Each logic block implements a portion of the design logic, and the routing resources are used to interconnect the logic blocks. <p> This paper focuses on the routing phase of FPGA design; thus, we assume that partitioning, technology mapping, and placement have already been performed. grammable interconnection resources. Previous work on FPGA routing has primarily concentrated on producing feasible solutions that use the fewest routing resources. For example, the CGE <ref> [12] </ref>, and SEGA [27] detailed routing algorithms route nets based on demand and assign critical nets a higher routing priority. <p> Prior to routing, nets may be classified as either critical or non-critical based on timing information from the higher-level design stages. The technology-mapping phase of FPGA design transforms a boolean network (the output from a high-level design tool) into a circuit consisting of logic blocks <ref> [12] </ref>, where the goal is typically to minimize the maximum input-to-output circuit depth, thereby improving the overall 4 circuit performance. To a first approximation, nets through which long input-to-output paths pass may be designated as critical nets, with the remaining nets designated as non-critical. <p> In particular, we have modeled two distinct FPGA architectures, the first corresponding to Xilinx 3000-series parts [38] (Table 2), and the second corresponding to 4000-series parts [38] (Table 3); these architectures are identical to those used by the CGE router <ref> [12] </ref>, and the SEGA [27] and GBP [37] routers, respectively. The switch block flexibility (denoted by F s ) reflects the pre-specified fanout of a channel edge inside a switch block, i.e., the number of different channel edges to which it may be connected [12]. <p> those used by the CGE router <ref> [12] </ref>, and the SEGA [27] and GBP [37] routers, respectively. The switch block flexibility (denoted by F s ) reflects the pre-specified fanout of a channel edge inside a switch block, i.e., the number of different channel edges to which it may be connected [12]. Similarly, the connection flexibility (denoted by F c ) refers to the number of adjacent channel edges to which a logic-block pin may connect; finally, W denotes the channel width. <p> We found that typically only a few (i.e., less than five) such passes are required to completely route each of the benchmark circuits. 18 A common criteria used to evaluate the quality of FPGA routers is the maximum channel width required to successfully route all nets of a design <ref> [12] </ref>. This is important for designs which span multiple FPGAs since a router which requires smaller maximum channel width has the ability to pack larger portions of the overall circuit design onto a single FPGA, which tends to reduce the total number of FPGAs required. <p> For each of the circuits, we compared the maximum channel width required by our router using the IKMB algorithm to the best reported results from CGE <ref> [12] </ref> using the 3000-series architecture (See Table 2), as well as to the best reported values for SEGA [27] and GBP [37] using the 4000-series architecture (See Table 3). <p> On the right are the maximum channel widths required to route all nets using the CGE router of <ref> [12] </ref>, as well as our own router using the IKMB algorithm. For each of the benchmark circuits our router requires a significantly smaller channel width than CGE; on average, CGE requires 22% more channel width than our router.
Reference: [13] <author> K. C. Chen, J. Cong, Y. Ding, A. B. Kahng, and P. Trajmar, DAG-Map: </author> <title> Graph-Based FPGA Technology Mapping for Delay Optimization, </title> <booktitle> IEEE Design & Test of Computers, 9 (1992), </booktitle> <pages> pp. 7-20. </pages>
Reference-contexts: In order to increase FPGA performance, partitioning and technology mapping have been extensively studied by e.g. <ref> [13, 20, 33] </ref>, where a typical goal is to minimize the length of critical paths.
Reference: [14] <author> J. Cong, A. B. Kahng, G. Robins, M. Sarrafzadeh, and C. K. Wong, </author> <title> Provably Good Performance-Driven Global Routing, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. 739-752. </pages>
Reference-contexts: While these approaches implicitly equate delay minimization with wirelength optimization [23, 31], it has recently become clear that these 3 two goals are not synonymous [11], especially for deep submicron VLSI technologies. The bounded-radius bounded-cost (BRBC) method of <ref> [14] </ref> and the AHHK method of [9] both achieve wirelength-radius tradeoffs in weighted graphs, but can not directly produce a shortest paths tree with minimum wirelength. Rather, with the tradeoff parameter tuned completely towards pathlength minimization, the methods of [14] and [9] both produce the same shortest-paths tree as would Dijkstra's <p> The bounded-radius bounded-cost (BRBC) method of <ref> [14] </ref> and the AHHK method of [9] both achieve wirelength-radius tradeoffs in weighted graphs, but can not directly produce a shortest paths tree with minimum wirelength. Rather, with the tradeoff parameter tuned completely towards pathlength minimization, the methods of [14] and [9] both produce the same shortest-paths tree as would Dijkstra's algorithm [16]. The recent A-Tree algorithm of [15] for rectilinear arborescence Steiner trees depends heavily on the Man-hattan norm, and is therefore not suitable for the graph-based domains that arise naturally in FPGA routing.
Reference: [15] <author> J. Cong, K. S. Leung, and D. Zhou, </author> <title> Performance-Driven Interconnect Design Based on Distributed RC Delay Model, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <address> Dallas, </address> <month> June </month> <year> 1993, </year> <pages> pp. 606-611. </pages>
Reference-contexts: Our second arborescence heuristic iteratively selects Steiner nodes which improve the total wirelength with respect to an optimal spanning arborescence algorithm. Our constructions can be easily tuned to the specific parasitics of the underlying technology (the advantages of technology-sensitive routing were discussed and analyzed in, e.g., <ref> [11, 15] </ref>). Finally, we incorporated our algorithms into an actual FPGA router, and successfully routed several large industry benchmark circuits, using considerably less channel width than is achievable by other routers (e.g., the CGE/SEGA routers of [12, 27] require channel width 22% larger than our own router). <p> Rather, with the tradeoff parameter tuned completely towards pathlength minimization, the methods of [14] and [9] both produce the same shortest-paths tree as would Dijkstra's algorithm [16]. The recent A-Tree algorithm of <ref> [15] </ref> for rectilinear arborescence Steiner trees depends heavily on the Man-hattan norm, and is therefore not suitable for the graph-based domains that arise naturally in FPGA routing.
Reference: [16] <author> E. W. Dijkstra, </author> <title> A Note on Two Problems in Connection With Graphs, </title> <journal> Numerische Mathematik, </journal> <volume> 1 (1959), </volume> <pages> pp. 269-271. </pages>
Reference-contexts: Rather, with the tradeoff parameter tuned completely towards pathlength minimization, the methods of [14] and [9] both produce the same shortest-paths tree as would Dijkstra's algorithm <ref> [16] </ref>. The recent A-Tree algorithm of [15] for rectilinear arborescence Steiner trees depends heavily on the Man-hattan norm, and is therefore not suitable for the graph-based domains that arise naturally in FPGA routing. <p> Figure 4 (a) depicts the Steiner tree produced by the KMB heuristic of [26], while Figure 4 (b) depicts the optimal solution produced by our new IGMST construction of Section 3 below. Figure 4 (c) depicts the arborescence produced by DJKA, a variant of Dijkstra's algorithm <ref> [16] </ref>, while Figure 4 (d) depicts an optimal arborescence produced by our new IDOM construction of Section 4.2. Note that KMB uses 12:5% more wirelength than either of the solutions produced by IGMST or IDOM. <p> An arborescence is constructed by using a shortest path to connect each sink to the closest sink/source that it dominates, and then computing (Dijkstra's <ref> [16] </ref>) shortest paths tree over the graph formed by the union of these paths. 12 (a) (b) is the gray-shaded circle n 0 , the sinks are darkened circles, potential Steiner points are white circles, and all edges have unit length except those marked as zero. (a) The input weighted graph; <p> On the other hand, IDOM can select a logarithmic number of boxes shown in (d) (the boxes from left to right, in order of exponentially decreasing size), resulting in an arborescence solution with cost (log N ) times optimal. * DJKA This is an adaptation of Dijkstra's shortest-paths tree algorithm <ref> [16] </ref> to the GSA problem (Dijkstra's algorithm spans all of V , while the GSA problem seeks to span only N V ). DJKA first computes a shortest-paths tree rooted at the source using Dijkstra's algorithm [16], and then deletes edges from this tree which are not contained in any source-to-sink <p> ) times optimal. * DJKA This is an adaptation of Dijkstra's shortest-paths tree algorithm <ref> [16] </ref> to the GSA problem (Dijkstra's algorithm spans all of V , while the GSA problem seeks to span only N V ). DJKA first computes a shortest-paths tree rooted at the source using Dijkstra's algorithm [16], and then deletes edges from this tree which are not contained in any source-to-sink path. We compared all of these methods (KMB, ZEL, IKMB, IZEL, DJKA, DOM, PFA, IDOM) on the same inputs, both in terms of total wirelength as well as maximum source-sink pathlength.
Reference: [17] <author> U. Feige, </author> <title> A Threshold of ln n for Approximating Set Cover, </title> <booktitle> in Proc. ACM Symp. the Theory of Computing, </booktitle> <month> May </month> <year> 1996, </year> <pages> pp. 314-318. </pages>
Reference-contexts: Secondly, it is known that the Set Cover problem can not be approximated within a factor of better than log e n unless every problem in NP can be solved in deterministic time O (n log logn ) <ref> [17, 29] </ref>. This means that the GSA problem is also not likely to be polynomial-time approximable better than O (log N ) times optimal, and thus worst-case examples such as those of Figure 14 are to be expected.
Reference: [18] <author> J. Frankle, </author> <title> Iterative and Adaptive Slack Allocation for Performance-driven Layout and FPGA Routing, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1992, </year> <pages> pp. 536-542. </pages>
Reference-contexts: On the other hand, less attention has been focused on the actual routing, which is surprising since it was observed that FPGA performance is frequently limited by routing delays, rather than by combinational logic delays <ref> [10, 18] </ref>. Routing affects the performance of FPGA-based systems in two major ways. First, a typical design must be partitioned and mapped onto several FPGAs. Since off-chip signal propagation delays are significantly longer than on-chip delays, we seek to minimize the number of such partitions.
Reference: [19] <author> J. L. Ganley, </author> <title> private communication, </title> <month> April, </month> <year> 1994. </year>
Reference-contexts: Since the GSA problem is NP-complete (a reduction from Exact 3-Cover is straightforward <ref> [19] </ref>), and the size of FPGA routing graphs is generally large (typically jV j &gt; 5000), solving the GSA problem optimally is not feasible. In Section 4 we address the GSA problem with two new effective constructions.
Reference: [20] <author> T. Gao, K. C. Chen, J. Cong, Y. Ding, and C. L. Liu, </author> <title> Placement and Placement Driven Technology Mapping for FPGA Synthesis, </title> <booktitle> in Proc. IEEE Intl. ASIC Conf., </booktitle> <address> Rochester, NY, </address> <month> September </month> <year> 1993, </year> <pages> pp. 87-91. </pages>
Reference-contexts: In order to increase FPGA performance, partitioning and technology mapping have been extensively studied by e.g. <ref> [13, 20, 33] </ref>, where a typical goal is to minimize the length of critical paths.
Reference: [21] <author> J. Griffith, G. Robins, J. S. Salowe, and T. Zhang, </author> <title> Closing the Gap: Near-Optimal Steiner Trees in Polynomial Time, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 13 (1994), </volume> <pages> pp. 1351-1365. </pages>
Reference-contexts: Figure 6 illustrates how the IKMB method greedily adds Steiner points to construct the solution. Note that IGMST generalizes the Iterated 1-Steiner heuristic of Kahng and Robins <ref> [21, 24, 25] </ref> where H is an ordinary rectilinear minimum spanning tree construction. Experimental results in Section 5 indicate that iterating a heuristic H in this fashion yields significantly improved solutions as compared with the non-iterated version of H. <p> Another way of reducing the time complexity follows from the observation that rather than adding Steiner points one at a time, they may be added in "batches" based on a non-interference criterion similar to the one proposed by Kahng and Robins <ref> [21, 24, 25] </ref>. <p> For uncon-gested graphs, both PFA and IDOM yield optimal maximum pathlength at almost no wirelength penalty over IZEL; thus, these seem to afford favorable tradeoffs between wirelength and maximum pathlength. Note that IKMB and the Iterated 1-Steiner heuristic of Kahng and Robins <ref> [21, 24, 25] </ref> yield identical solutions for geometric instances (i.e., when using the Hanan grid as the underlying graph).
Reference: [22] <author> F. K. Hwang, D. S. Richards, and P. Winter, </author> <title> The Steiner Tree Problem, </title> <publisher> North-Holland, </publisher> <year> 1992. </year>
Reference-contexts: Any node in V N may be used as a potential Steiner point in order to optimize the overall wirelength. The GMST problem is known to be NP-complete <ref> [22] </ref>. In Section 3 we address the GMST problem using an effective greedy strategy. The high-performance requirement of critical nets dictates a shortest source-sink paths objective, with wirelength minimization being a secondary optimization criteria. <p> A number of heuristics were proposed over the years for the GMST problem <ref> [22] </ref>, two of which have performance bounds of a constant factor from optimal (in order to streamline the exposition, we defer the detailed description of these two methods to the Appendix): * KMB the heuristic of Kou, Markowsky and Berman [26] with a performance bound of 2 (1 1 L )
Reference: [23] <author> M. A. B. Jackson, E. S. Kuh, and M. Marek-Sadowska, </author> <title> Timing-Driven Routing for Building Block Layout, </title> <booktitle> in Proc. IEEE Intl. Symp. Circuits and Systems, </booktitle> <year> 1987, </year> <pages> pp. 518-519. </pages>
Reference-contexts: More recently, [4, 7] developed a routing framework where mutually competing objectives (such as congestion, wirelength, and jog minimization) may be simultaneously optimized. However, none of these works directly minimizes the source-sink signal propagation delays. While these approaches implicitly equate delay minimization with wirelength optimization <ref> [23, 31] </ref>, it has recently become clear that these 3 two goals are not synonymous [11], especially for deep submicron VLSI technologies.
Reference: [24] <author> A. B. Kahng and G. Robins, </author> <title> A New Class of Iterative Steiner Tree Heuristics With Good Performance, </title> <journal> IEEE Trans. Computer-Aided Design, </journal> <volume> 11 (1992), </volume> <pages> pp. 893-902. </pages>
Reference-contexts: Figure 6 illustrates how the IKMB method greedily adds Steiner points to construct the solution. Note that IGMST generalizes the Iterated 1-Steiner heuristic of Kahng and Robins <ref> [21, 24, 25] </ref> where H is an ordinary rectilinear minimum spanning tree construction. Experimental results in Section 5 indicate that iterating a heuristic H in this fashion yields significantly improved solutions as compared with the non-iterated version of H. <p> Another way of reducing the time complexity follows from the observation that rather than adding Steiner points one at a time, they may be added in "batches" based on a non-interference criterion similar to the one proposed by Kahng and Robins <ref> [21, 24, 25] </ref>. <p> For uncon-gested graphs, both PFA and IDOM yield optimal maximum pathlength at almost no wirelength penalty over IZEL; thus, these seem to afford favorable tradeoffs between wirelength and maximum pathlength. Note that IKMB and the Iterated 1-Steiner heuristic of Kahng and Robins <ref> [21, 24, 25] </ref> yield identical solutions for geometric instances (i.e., when using the Hanan grid as the underlying graph).
Reference: [25] <author> A. B. Kahng and G. Robins, </author> <title> On Optimal Interconnections for VLSI, </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1995. </year>
Reference-contexts: Figure 6 illustrates how the IKMB method greedily adds Steiner points to construct the solution. Note that IGMST generalizes the Iterated 1-Steiner heuristic of Kahng and Robins <ref> [21, 24, 25] </ref> where H is an ordinary rectilinear minimum spanning tree construction. Experimental results in Section 5 indicate that iterating a heuristic H in this fashion yields significantly improved solutions as compared with the non-iterated version of H. <p> Another way of reducing the time complexity follows from the observation that rather than adding Steiner points one at a time, they may be added in "batches" based on a non-interference criterion similar to the one proposed by Kahng and Robins <ref> [21, 24, 25] </ref>. <p> For uncon-gested graphs, both PFA and IDOM yield optimal maximum pathlength at almost no wirelength penalty over IZEL; thus, these seem to afford favorable tradeoffs between wirelength and maximum pathlength. Note that IKMB and the Iterated 1-Steiner heuristic of Kahng and Robins <ref> [21, 24, 25] </ref> yield identical solutions for geometric instances (i.e., when using the Hanan grid as the underlying graph).
Reference: [26] <author> L. Kou, G. Markowsky, and L. Berman, </author> <title> A Fast Algorithm for Steiner Trees, </title> <journal> Acta Informatica, </journal> <volume> 15 (1981), </volume> <pages> pp. 141-145. </pages>
Reference-contexts: This motivates Steiner arborescence constructions (i.e., shortest paths trees having minimum wirelength) for critical-net routing. Our first contribution is a new class of algorithms for non-critical-net routing, which in practice significantly outperform the best known graph Steiner tree heuristics, i.e., those of Kou, Markowsky and Berman <ref> [26] </ref>, and of Zelikovsky [39]. Our graph Steiner construction is based on an iterative template that utilizes an existing Steiner tree heuristic H by greedily selecting Steiner nodes that induce maximum wire-length savings with respect to H. <p> Figure 4 (a) depicts the Steiner tree produced by the KMB heuristic of <ref> [26] </ref>, while Figure 4 (b) depicts the optimal solution produced by our new IGMST construction of Section 3 below. <p> heuristics were proposed over the years for the GMST problem [22], two of which have performance bounds of a constant factor from optimal (in order to streamline the exposition, we defer the detailed description of these two methods to the Appendix): * KMB the heuristic of Kou, Markowsky and Berman <ref> [26] </ref> with a performance bound of 2 (1 1 L ) where L is the maximum number of leaves in any optimal solution; and * ZEL the more recent heuristic of Zelikovsky [39] with performance bound of 11 6 times optimal. 6 (a) KMB cost = 16 max path = 16 <p> 16 (b) IGMST cost = 14 max path = 12 (c) DJKA cost = 19 max path = 8 (d) IDOM cost = 14 max path = 8 source is the lightly-shaded square, while the dark squares are sinks): (a) the solution produced by the KMB graph Steiner heuristic of <ref> [26] </ref>; (b) the optimal Steiner tree solution (which is also the solution produced by our IGMST algorithm described below); (c) depicts a sub-optimal Steiner arborescence produce by a variant of Dijkstra's algorithm; (d) shows the optimal Steiner arborescence solution (which is also the solution produced by our IDOM algorithm described in <p> For example, we may use the KMB heuristic <ref> [26] </ref> as H inside the IGMST algorithm to yield the Iterated KMB (IKMB) method, which inherits the performance bound of 2 times optimal.
Reference: [27] <author> G. G. Lemieux and S. D. Brown, </author> <title> A Detailed Routing Algorithm for Allocating Wire Segments in Field-Programmable Gate Arrays, </title> <booktitle> in Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <address> Lake Arrowhead, CA, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: Finally, we incorporated our algorithms into an actual FPGA router, and successfully routed several large industry benchmark circuits, using considerably less channel width than is achievable by other routers (e.g., the CGE/SEGA routers of <ref> [12, 27] </ref> require channel width 22% larger than our own router). Our routing benchmarks on both 3000- and 4000- series Xilinx parts are currently the best known among all published results. <p> Previous work on FPGA routing has primarily concentrated on producing feasible solutions that use the fewest routing resources. For example, the CGE [12], and SEGA <ref> [27] </ref> detailed routing algorithms route nets based on demand and assign critical nets a higher routing priority. <p> In particular, we have modeled two distinct FPGA architectures, the first corresponding to Xilinx 3000-series parts [38] (Table 2), and the second corresponding to 4000-series parts [38] (Table 3); these architectures are identical to those used by the CGE router [12], and the SEGA <ref> [27] </ref> and GBP [37] routers, respectively. The switch block flexibility (denoted by F s ) reflects the pre-specified fanout of a channel edge inside a switch block, i.e., the number of different channel edges to which it may be connected [12]. <p> For each of the circuits, we compared the maximum channel width required by our router using the IKMB algorithm to the best reported results from CGE [12] using the 3000-series architecture (See Table 2), as well as to the best reported values for SEGA <ref> [27] </ref> and GBP [37] using the 4000-series architecture (See Table 3). <p> On the left are the total number of nets in each circuit, the FPGA size, and the number of nets of each pin count. On the right are the maximum channel width required to route all nets for the SEGA router of <ref> [27] </ref>, the GBP router of [37], and our own router using the IKMB algorithm. <p> To illustrate how minimizing maximum pathlength affects wirelength (and thus improve the maximum channel width), Table 4 shows the maximum channel width required for a successful routing using the IKMB, PFA and IDOM algorithms for each of the circuits (for comparison, the channel widths required by the SEGA <ref> [27] </ref> and GBP [37] routers are shown also). As expected, both PFA and IDOM require larger channel width than IKMB. However, neither PFA nor IDOM require larger channel width than SEGA or GBP, routers which do not directly minimize maximum source-to-sink pathlength. <p> Note that both PFA and IDOM minimize wirelength and maximum pathlength, while IKMB, SEGA <ref> [27] </ref> and GBP [37] minimize only wirelength. by the more circuitous routes which may be required with small channel widths.
Reference: [28] <author> F. D. Lewis and W. C. Pong, </author> <title> A Negative Reinforcement Method of PGA Routing, </title> <booktitle> in Proc. ACM/IEEE Design Automation Conf., </booktitle> <year> 1993, </year> <pages> pp. 601-605. </pages>
Reference-contexts: For example, the CGE [12], and SEGA [27] detailed routing algorithms route nets based on demand and assign critical nets a higher routing priority. Other research has adopted a more abstract model of FPGA routing connections <ref> [28] </ref>, studied FPGA routing with switch blocks of limited flexibility [37], or explored modified architectures [34] in order to reduce the number of programmable switches required. More recently, [4, 7] developed a routing framework where mutually competing objectives (such as congestion, wirelength, and jog minimization) may be simultaneously optimized.
Reference: [29] <author> C. Lund and M. Yannakakis, </author> <title> On the Hardness of Approximating Minimization Problems, </title> <booktitle> Proc. ACM Symp. the Theory of Computing, 25 (1993), </booktitle> <pages> pp. 286-293. </pages>
Reference-contexts: Secondly, it is known that the Set Cover problem can not be approximated within a factor of better than log e n unless every problem in NP can be solved in deterministic time O (n log logn ) <ref> [17, 29] </ref>. This means that the GSA problem is also not likely to be polynomial-time approximable better than O (log N ) times optimal, and thus worst-case examples such as those of Figure 14 are to be expected.
Reference: [30] <author> K. Mehlorn, </author> <title> A Faster Approximation Algorithm for the Steiner Problem in Graphs, </title> <journal> Information Processing Letters, </journal> <volume> 27 (1988), </volume> <pages> pp. 125-128. </pages>
Reference: [31] <author> S. Prasitjutrakul and W. J. Kubitz, </author> <title> A Timing-Driven Global Router for Custom Chip Design, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <address> Santa Clara, CA, </address> <month> November </month> <year> 1990, </year> <pages> pp. 48-51. </pages>
Reference-contexts: More recently, [4, 7] developed a routing framework where mutually competing objectives (such as congestion, wirelength, and jog minimization) may be simultaneously optimized. However, none of these works directly minimizes the source-sink signal propagation delays. While these approaches implicitly equate delay minimization with wirelength optimization <ref> [23, 31] </ref>, it has recently become clear that these 3 two goals are not synonymous [11], especially for deep submicron VLSI technologies.
Reference: [32] <author> S. K. Rao, P. Sadayappan, F. K. Hwang, and P. W. Shor, </author> <title> The Rectilinear Steiner Arborescence Problem, </title> <journal> Algorithmica, </journal> <year> (1992), </year> <pages> pp. 277-288. </pages>
Reference-contexts: For pointsets in the Manhattan plane, a particularly effective arborescence heuristic along these lines is the RSA construction of <ref> [32] </ref>, which has a performance ratio of 2 times optimal, as well as good empirical performance. However, this method relies on the underlying geometry of the Manhattan metric. <p> Even on rectilinear grid-graphs, PFA may still produce solutions with cost approaching 2 times the optimal, so its performance ratio of 2 is tight <ref> [32] </ref> (see Figure 11).
Reference: [33] <author> K. Roy, B. Guan, and C. Sechen, </author> <title> FPGA MCM Partitioning and Placement, </title> <booktitle> in Proc. ACM/SIGDA Physical Design Workshop, </booktitle> <address> Lake Arrowhead, CA, </address> <month> April </month> <year> 1993, </year> <pages> pp. 211-212. </pages>
Reference-contexts: In order to increase FPGA performance, partitioning and technology mapping have been extensively studied by e.g. <ref> [13, 20, 33] </ref>, where a typical goal is to minimize the length of critical paths.
Reference: [34] <author> Y. Sun, T. C. Wang, C. K. Wong, and C. L. Liu, </author> <title> Routing for Symmetric FPGAs and FPICs, </title> <booktitle> in Proc. IEEE Intl. Conf. Computer-Aided Design, </booktitle> <address> Santa Clara, CA, </address> <month> November </month> <year> 1993, </year> <pages> pp. 486-490. </pages>
Reference-contexts: Other research has adopted a more abstract model of FPGA routing connections [28], studied FPGA routing with switch blocks of limited flexibility [37], or explored modified architectures <ref> [34] </ref> in order to reduce the number of programmable switches required. More recently, [4, 7] developed a routing framework where mutually competing objectives (such as congestion, wirelength, and jog minimization) may be simultaneously optimized. However, none of these works directly minimizes the source-sink signal propagation delays.
Reference: [35] <author> S. Trimberger. </author> <title> Manager of Advanced Development, Xilinx Inc., </title> <type> private communication, </type> <month> February, </month> <year> 1994. </year>
Reference-contexts: Unfortunately, the flexibility provided by FPGAs is achieved at a substantial performance penalty due to signal delay through the programmable routing resources, and this is currently a primary concern to both FPGA designers and users <ref> [35] </ref>. In order to increase FPGA performance, partitioning and technology mapping have been extensively studied by e.g. [13, 20, 33], where a typical goal is to minimize the length of critical paths. <p> CPU times to completely route the industry benchmark circuits on a Sun/4 workstation varied from several minutes for the smallest circuit to several hours for the largest; these times are quite competitive with commercial routers, which sometimes require several days to route large circuits <ref> [35] </ref>.
Reference: [36] <author> S. M. Trimberger, </author> <title> Field-Programmable Gate Array Technology, </title> <editor> S. M. Trimberger, editor, </editor> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1994. </year>
Reference-contexts: Parts of this work appeared in preliminary form in [6, 7, 8]. 2 Problem Formulation An FPGA architecture typically consists of a symmetrical array of user configurable logic "blocks", and a set of programmable interconnection resources used for routing <ref> [12, 36] </ref> (See Figure 1). Each logic block implements a portion of the design logic, and the routing resources are used to interconnect the logic blocks.
Reference: [37] <author> Y.-L. Wu and M. Marek-Sadowska, </author> <title> An Efficient Router for 2-D Field Programmable Gate Arrays, </title> <booktitle> in European Design and Test Conf., </booktitle> <year> 1994, </year> <pages> pp. 412-416. </pages>
Reference-contexts: For example, the CGE [12], and SEGA [27] detailed routing algorithms route nets based on demand and assign critical nets a higher routing priority. Other research has adopted a more abstract model of FPGA routing connections [28], studied FPGA routing with switch blocks of limited flexibility <ref> [37] </ref>, or explored modified architectures [34] in order to reduce the number of programmable switches required. More recently, [4, 7] developed a routing framework where mutually competing objectives (such as congestion, wirelength, and jog minimization) may be simultaneously optimized. <p> In particular, we have modeled two distinct FPGA architectures, the first corresponding to Xilinx 3000-series parts [38] (Table 2), and the second corresponding to 4000-series parts [38] (Table 3); these architectures are identical to those used by the CGE router [12], and the SEGA [27] and GBP <ref> [37] </ref> routers, respectively. The switch block flexibility (denoted by F s ) reflects the pre-specified fanout of a channel edge inside a switch block, i.e., the number of different channel edges to which it may be connected [12]. <p> For each of the circuits, we compared the maximum channel width required by our router using the IKMB algorithm to the best reported results from CGE [12] using the 3000-series architecture (See Table 2), as well as to the best reported values for SEGA [27] and GBP <ref> [37] </ref> using the 4000-series architecture (See Table 3). <p> On the left are the total number of nets in each circuit, the FPGA size, and the number of nets of each pin count. On the right are the maximum channel width required to route all nets for the SEGA router of [27], the GBP router of <ref> [37] </ref>, and our own router using the IKMB algorithm. <p> illustrate how minimizing maximum pathlength affects wirelength (and thus improve the maximum channel width), Table 4 shows the maximum channel width required for a successful routing using the IKMB, PFA and IDOM algorithms for each of the circuits (for comparison, the channel widths required by the SEGA [27] and GBP <ref> [37] </ref> routers are shown also). As expected, both PFA and IDOM require larger channel width than IKMB. However, neither PFA nor IDOM require larger channel width than SEGA or GBP, routers which do not directly minimize maximum source-to-sink pathlength. <p> Note that both PFA and IDOM minimize wirelength and maximum pathlength, while IKMB, SEGA [27] and GBP <ref> [37] </ref> minimize only wirelength. by the more circuitous routes which may be required with small channel widths. We observe that the increase in wirelength for PFA and IDOM (18:21% and 12:79%, respectively) corresponds quite closely to the increase in channel width observed for PFA and IDOM in Table 4.
Reference: [38] <author> Xilinx, </author> <title> The Programmable Gate Array Data Book, </title> <publisher> Xilinx, Inc., </publisher> <address> San Jose, California, </address> <year> 1994. </year>
Reference-contexts: 1 Introduction Field-Programmable Gate Arrays (FPGAs) are flexible and reusable high-density circuits that can be easily (re)configured by the designer, enabling the VLSI design/validation/simulation cycle to be performed more quickly and cheaply <ref> [38] </ref>. Unfortunately, the flexibility provided by FPGAs is achieved at a substantial performance penalty due to signal delay through the programmable routing resources, and this is currently a primary concern to both FPGA designers and users [35]. <p> Our graph-based constructions easily adapt to a variety of PFGA architectures. In particular, we have modeled two distinct FPGA architectures, the first corresponding to Xilinx 3000-series parts <ref> [38] </ref> (Table 2), and the second corresponding to 4000-series parts [38] (Table 3); these architectures are identical to those used by the CGE router [12], and the SEGA [27] and GBP [37] routers, respectively. <p> Our graph-based constructions easily adapt to a variety of PFGA architectures. In particular, we have modeled two distinct FPGA architectures, the first corresponding to Xilinx 3000-series parts <ref> [38] </ref> (Table 2), and the second corresponding to 4000-series parts [38] (Table 3); these architectures are identical to those used by the CGE router [12], and the SEGA [27] and GBP [37] routers, respectively.
Reference: [39] <author> A. Z. Zelikovsky, </author> <title> An 11/6 Approximation Algorithm for the Network Steiner Problem, </title> <journal> Algorithmica, </journal> <volume> 9 (1993), </volume> <pages> pp. 463-470. </pages>
Reference-contexts: Our first contribution is a new class of algorithms for non-critical-net routing, which in practice significantly outperform the best known graph Steiner tree heuristics, i.e., those of Kou, Markowsky and Berman [26], and of Zelikovsky <ref> [39] </ref>. Our graph Steiner construction is based on an iterative template that utilizes an existing Steiner tree heuristic H by greedily selecting Steiner nodes that induce maximum wire-length savings with respect to H. <p> The performance bound of this new Steiner construction is guaranteed to be at least as good as that of the heuristic H thus used, and in particular we achieve a performance bound of 11 6 times optimal when using our template in concert with the graph Steiner heuristic of <ref> [39] </ref>. Our second contribution is a pair of arborescence-based constructions for critical-net routing. Given an arbitrary weighted routing graph, our arborescence algorithms produce a Steiner tree where all source-sink paths are the shortest possible, and where total wirelength is optimized as a secondary objective. <p> detailed description of these two methods to the Appendix): * KMB the heuristic of Kou, Markowsky and Berman [26] with a performance bound of 2 (1 1 L ) where L is the maximum number of leaves in any optimal solution; and * ZEL the more recent heuristic of Zelikovsky <ref> [39] </ref> with performance bound of 11 6 times optimal. 6 (a) KMB cost = 16 max path = 16 (b) IGMST cost = 14 max path = 12 (c) DJKA cost = 19 max path = 8 (d) IDOM cost = 14 max path = 8 source is the lightly-shaded square,

References-found: 39

