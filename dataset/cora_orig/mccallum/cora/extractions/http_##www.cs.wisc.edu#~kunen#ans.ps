URL: http://www.cs.wisc.edu/~kunen/ans.ps
Refering-URL: http://www.cs.wisc.edu/~kunen/kunen.html
Root-URL: 
Email: kunen@cs.wisc.edu  
Title: The Semantics of Answer Literals  
Author: Kenneth Kunen :p(; :p(; 
Note: D1. p(a; b) D3. gp(;  R0. :exception(; AN S(; R1. :bird() has wings() exception(; r1) R2. :bat() has wings() exception(; r2) R3. :has wings() can f ly() exception(; r3) F1. bird(tweety) F2. :can (tweety)  
Date: August 14, 1995  
Address: Wisconsin, Madison, WI 53706, U.S.A.  
Affiliation: University of  
Abstract: We describe a semantics for answer literals which is not tied to the specific details of the resolution proof procedure. We also describe a number of applications of answer literals to mathematical theorem proving. x1. Introduction. The use of answer literals is well-known in resolution. It was introduced in the 1960's by Green [5], and is now discussed in many texts on automated reasoning [2, 13] and on AI. This technique is usually presented as trick for keeping track of the variable bindings, thus simulating in a general resolution framework what Prolog would do with Horn clauses. For example, consider: We may think of D1,D2,D3 as the database; D1,D2 axiomatize the parenthood relation and D3 is an axiom about grandparenthood. The clause Q1 can be viewed as the negation of a theorem (or query), 9xz gp(x; z). If this negation is expressed simply as the clause :gp(x; z), then resolution will derive the empty clause, proving the theorem, but not actually producing an explicit x; z satisfying gp(x; z). Instead, we feed clause Q1 to the resolution prover, deriving AN S(a; c), meaning that in the course of the deduction, x got bound to a and z got bound to c, so gp(a; c) holds. Here, since all the clauses are Horn clauses, this particular example has an obvious translation into Prolog syntax. Non-Horn examples may produce disjunctive answers. For example, if we replaced D1 by p(a 1 ; b) _ p(a 2 ; b), then we could derive AN S(a 1 ; c) _ AN S(a 2 ; c), but we could not derive either AN S(a 1 ; c) or AN S(a 2 ; c). A completely different application with exactly the same semantics comes from reasoning about exceptions, as in the following famous example: 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. H. Bruck, </author> <title> A Survey of Binary Systems, </title> <publisher> Springer-Verlag, </publisher> <year> 1958. </year>
Reference-contexts: the 1930's, Moufang studied loops satisfying the following three Moufang identities: (x fl y) fl (z fl x) = (x fl (y fl z)) fl x: (M1) x fl (y fl (x fl z)) = ((x fl y) fl x) fl z: (M3) By the 1950's, Bruck and others (see <ref> [1] </ref>) had shown that these identities are actually equivalent in loops, a fact which is now trivial to derive on OTTER. See Chein [3] for more on the structure of finite Moufang loops, and Wos [12] for more on OTTER derivations involving these identities.
Reference: [2] <author> C-L. Chang and R. C-T. Lee, </author> <title> Symbolic Logic and Mechanical Theorem Proving, </title> <publisher> Aca demic Press, </publisher> <year> 1973. </year>
Reference-contexts: Because of this, and because of the introduction of Skolem constants and functions, one may begin to wonder exactly what the results of such derivations really say about solutions to the original query. Discussions in the literature <ref> [5, 8, 2] </ref> of the theory of answer literals are very much tied to the procedural details of the resolution format. They are also based on Herbrand models, so it is not clear how these discussions apply in the presence of equality. <p> That is, we prove from some algebraic theory that a solution exists, and we use the answer literal to retrieve the solution. Simple examples of this kind occur in the text of Chang and Lee <ref> [2] </ref>. More sophisticated examples from combinatory logic occur in [13] (see x10.6). We give two examples. In the first, we show how to use OTTER to produce all answers to a given problem. The second illustrates the interpretation of Skolem functions occurring in the solution. <p> If the answer obtained does not mention these Skolem functions, then it is still useful by part (2) of the following Lemma. Part (1), which is really a special case, is what justifies the Skolemization step when answer literals are not present (see Theorem 4.1 of <ref> [2] </ref>). 2.3. Lemma. Suppose is a set of sentences in vocabulary J and ^ is a set of universal sentences in ^ J J obtained by Skolemizing . Then: 1. is inconsistent iff ^ is. 2. If is a sentence of J , then j= iff ^ j= .
Reference: [3] <author> O. Chein, </author> <title> Moufang Loops of Small Order, </title> <journal> American Mathematical Society (Memoirs no. </journal> <volume> 197), </volume> <year> 1978. </year>
Reference-contexts: See Chein <ref> [3] </ref> for more on the structure of finite Moufang loops, and Wos [12] for more on OTTER derivations involving these identities. Note that an associative loop is a group, and in a group, the Moufang identities are trivial consequences of the associative law.
Reference: [4] <author> M. </author> <title> Fitting, First-Order Logic and Automated Theorem Proving, </title> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: In x2, we give a simple semantic explanation of the answer literal method which is not tied to resolution at all. Thus, answer literals could just as well be used with any other proof procedure, such as tableau-based systems, which have been advocated <ref> [4] </ref> as an alternative to resolution. The specifics of the deductive system only come in when we consider the issues of soundness and completeness.
Reference: [5] <author> C. Green, </author> <title> Theorem Proving by Resolution as a Basis for Question-Answering Systems, </title> <booktitle> in Machine Intelligence, </booktitle> <volume> Volume 4, </volume> <editor> B. Meltzer and D. Michie, eds, </editor> <year> 1969, </year> <pages> pp. </pages> <address> 183 -205. </address>
Reference-contexts: Because of this, and because of the introduction of Skolem constants and functions, one may begin to wonder exactly what the results of such derivations really say about solutions to the original query. Discussions in the literature <ref> [5, 8, 2] </ref> of the theory of answer literals are very much tied to the procedural details of the resolution format. They are also based on Herbrand models, so it is not clear how these discussions apply in the presence of equality. <p> That is, we may delete the AN S literals, find a proof of the empty clause, and then insert the ANS literals back in again. This examination of the proof structure is the content of the arguments in <ref> [5, 8] </ref>. Of course, one must be careful that the rules are phrased so that re-inserting the AN S literal results in a legitimate proof. For example, in negative hyper-resolution, it is important that, as does OTTER, we ignore the AN S literals when deciding whether a clause is negative.
Reference: [6] <author> E. Huntington, </author> <title> New Sets of Independent Postulates for the Algebra of Logic, with Spe cial Reference to Whitehead and Russell's Principia Mathematica, </title> <note> AMS Transactions 35 (1933) 274 - 304. </note>
Reference-contexts: the following four equations are valid in every Boolean algebra (we are using o for OR and n for NOT): A: x o (y o z) = (x o y) o z H: n (x o n (y)) o n (n (x) o n (y)) = y In 1933, Huntington <ref> [6] </ref> showed that in fact (A),(C), and (H) together imply all equations valid in Boolean algebras. Somewhat later, Robbins formulated (R). Let us call a Robbins algebra any system satisfying (A), (C), and (R). The Robbins algebra problem, whether every Robbins algebra must be Boolean, is still open.
Reference: [7] <author> K. Kunen, </author> <title> The Shortest Single Axioms for Groups of Exponent 4, </title> <note> Computers and Mathematics with Applications 29 (1995) 1 - 12. </note>
Reference-contexts: In practice, soundness is usually more important than completeness, since many resolution runs include some bound to clause or term size, which invalidates completeness anyway. However, occasionally (see, e.g., Lemma 2.3 of <ref> [7] </ref>), the completeness of the Knuth-Bendix procedure is taken as a proof of non-provability (that is, of the existence of a counter-model).
Reference: [8] <author> D. Luckham and N. J. Nilsson, </author> <title> Extracting Information from Resolution Proof Trees, </title> <booktitle> Artificial Intelligence 2 (1971) 27 - 54. </booktitle>
Reference-contexts: Because of this, and because of the introduction of Skolem constants and functions, one may begin to wonder exactly what the results of such derivations really say about solutions to the original query. Discussions in the literature <ref> [5, 8, 2] </ref> of the theory of answer literals are very much tied to the procedural details of the resolution format. They are also based on Herbrand models, so it is not clear how these discussions apply in the presence of equality. <p> That is, we may delete the AN S literals, find a proof of the empty clause, and then insert the ANS literals back in again. This examination of the proof structure is the content of the arguments in <ref> [5, 8] </ref>. Of course, one must be careful that the rules are phrased so that re-inserting the AN S literal results in a legitimate proof. For example, in negative hyper-resolution, it is important that, as does OTTER, we ignore the AN S literals when deciding whether a clause is negative.
Reference: [9] <author> W. W. McCune, </author> <title> OTTER 3.0 Reference Manual and Guide, </title> <type> Technical Report ANL 94/6, </type> <institution> Argonne National Laboratory, </institution> <year> 1994. </year>
Reference-contexts: As usual, soundness questions are easier, but even here we must be careful to distinguish between soundness and refutation soundness. These issues are also covered in x2. In xx3,4, we illustrate the abstract discussion in x2 with two classes of examples, obtained using McCune's system, OTTER <ref> [9] </ref>. 2 The first class, covered in x3, is, perhaps, obvious one can solve an equation. That is, we prove from some algebraic theory that a solution exists, and we use the answer literal to retrieve the solution. <p> The only case where full soundness fails is in the Skolem-ization step, which, if it is automated by the theorem prover (as does OTTER <ref> [9] </ref> if the user requests it), might be considered to be part of the deductive process. This step is refutation sound but not fully sound.
Reference: [10] <author> S. Winker, </author> <title> Robbins Algebra: Conditions That Make a Near-Boolean Algebra Boolean, </title> <journal> J. </journal> <note> Automated Reasoning 6 (1990) 465 - 489. </note>
Reference-contexts: That is, in a non-Boolean Robbins algebra, the map n is onto but not 1-1, which implies that A is infinite. A much deeper result is due to Winker <ref> [10, 11] </ref>, who showed that every non-Boolean Robbins algebra must satisfy the inequalities 8x8y (x o y 6= x) and 8x8y (n (x o y) 6= n (x)). Using this, one may derive other structural properties of these algebras.
Reference: [11] <author> S. Winker, </author> <title> Absorption and Idempotency Criteria for a Problem in Near-Boolean Al gebras, </title> <journal> J. </journal> <note> Algebra 153 (1992) 414 - 423. </note>
Reference-contexts: That is, in a non-Boolean Robbins algebra, the map n is onto but not 1-1, which implies that A is infinite. A much deeper result is due to Winker <ref> [10, 11] </ref>, who showed that every non-Boolean Robbins algebra must satisfy the inequalities 8x8y (x o y 6= x) and 8x8y (n (x o y) 6= n (x)). Using this, one may derive other structural properties of these algebras.
Reference: [12] <author> L. Wos, </author> <title> OTTER Solves the Moufang Axiom Problem, </title> <type> preprint. </type>
Reference-contexts: See Chein [3] for more on the structure of finite Moufang loops, and Wos <ref> [12] </ref> for more on OTTER derivations involving these identities. Note that an associative loop is a group, and in a group, the Moufang identities are trivial consequences of the associative law.
Reference: [13] <author> L. Wos, R. Overbeek, E. Lusk, and J. Boyle, </author> <title> Automated Reasoning, Second Edition, </title> <publisher> McGraw-Hill, </publisher> <year> 1992. </year> <month> 12 </month>
Reference-contexts: That is, we prove from some algebraic theory that a solution exists, and we use the answer literal to retrieve the solution. Simple examples of this kind occur in the text of Chang and Lee [2]. More sophisticated examples from combinatory logic occur in <ref> [13] </ref> (see x10.6). We give two examples. In the first, we show how to use OTTER to produce all answers to a given problem. The second illustrates the interpretation of Skolem functions occurring in the solution. In the second class, covered in x4, we solve an inequation. <p> possible that is, even in groups, no two of a 2 = e, b 2 = e, (ab) 2 = e implies that ab = ba. 10 A less elementary example regards Robbins algebras; this topic is discussed in some detail in the text of Wos, Overbeek, Lusk, and Boyle <ref> [13] </ref>. In a Boolean algebra, we may consider OR and NOT to be basic, with the other Boolean operations defined from them.
References-found: 13

