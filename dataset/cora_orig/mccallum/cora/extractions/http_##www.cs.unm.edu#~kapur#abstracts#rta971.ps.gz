URL: http://www.cs.unm.edu/~kapur/abstracts/rta971.ps.gz
Refering-URL: http://www.cs.unm.edu/~kapur/abstracts/rta971.html
Root-URL: http://www.cs.unm.edu
Email: kapur@cs.albany.edu  
Title: Shostak's Congruence Closure as Completion  
Author: Deepak Kapur 
Address: New York Albany, NY 12222  
Affiliation: Department of Computer Science State University of  
Abstract: Shostak's congruence closure algorithm is demystified, using the framework of ground completion on (possibly nonterminating, non-reduced) rewrite rules. In particular, the canonical rewriting relation induced by the algorithm on ground terms by a given set of ground equations is precisely constructed. The main idea is to extend the signature of the original input to include new constant symbols for nonconstant subterms appearing in the input. A byproduct of this approach is (i) an algorithm for associating a confluent rewriting system with possibly nonterminating ground rewrite rules, and (ii) a new quadratic algorithm for computing a canonical rewriting system from ground equations. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> D. Craigen, S. Kromodimoelijo, I. Meisels, W. Pase, and M. Saaltink, </author> <title> "Eves system description," </title> <booktitle> Proc. Automated Deduction - CADE 11, </booktitle> <publisher> LNAI 607 (ed. Kapur), Springer Verlag (1992), </publisher> <pages> 771-775. </pages>
Reference-contexts: Congruence closure has been used as a glue to tie different decision procedure for various theories arising in the application of verification and specification analyses. Two related but different approaches are discussed in [15, 11, 12]. These approaches have been implemented in verification systems, e.g., <ref> [1, 2] </ref>. In our theorem prover Rewrite Rule Laboratory (RRL) [8], congruence closure is used to implement contextual rewriting [17], which combines equality reasoning using rewrite rules with decision procedures for booleans, arithmetic and freely constructed data structures.
Reference: 2. <author> D. Cyrluk, P. Lincoln, and N. Shankar, </author> <title> "On Shostak's decision procedures for combination of theories," </title> <booktitle> Proc. Automated Deduction - CADE 13, LNAI 1104 (eds. </booktitle> <editor> McRobbie and Slaney), </editor> <publisher> Springer Verlag (1996), </publisher> <pages> 463-477. </pages>
Reference-contexts: Congruence closure has been used as a glue to tie different decision procedure for various theories arising in the application of verification and specification analyses. Two related but different approaches are discussed in [15, 11, 12]. These approaches have been implemented in verification systems, e.g., <ref> [1, 2] </ref>. In our theorem prover Rewrite Rule Laboratory (RRL) [8], congruence closure is used to implement contextual rewriting [17], which combines equality reasoning using rewrite rules with decision procedures for booleans, arithmetic and freely constructed data structures. <p> As the importance of decision procedures in verification systems is being recognized, interest in algorithms for combining decision procedures is reviving. ? Partially supported by the National Science Foundation Grant nos. CCR-9308016, and CCR-9404930. Particularly, in a recent paper <ref> [2] </ref>, Cyrluk et. al. resurrected Shostak's framework for combining decision procedures, and argued that this framework is better from efficiency considerations than the one proposed by Nelson and Oppen based on propagation of ground equations. Shostak's congruence closure algorithm serves as the core of his combination framework [14, 15]. <p> New equations deduced by the congruence closure are, in turn, passed back to the decision procedures. The interaction/cooperation among decision procedures is through the congruence closure and is not considered as tight as in Shostak's framework. According to <ref> [2] </ref>, this results in considerable redundancy in Nelson and Oppen's combination procedure, and the same ground equations being deduced repeatedly. <p> Shostak's algorithm computes canonical forms for ground terms with respect to the ground equations already processed. The algorithm implicitly computes a canonical rewriting system represented using its data structures, but what that canonical rewriting system is, is unclear from the original description of the algorithm or the discussion in <ref> [2] </ref>. In this paper, the canonical rewriting system implicitly computed by Shostak's congruence closure algorithm is made explicit. It is shown that Shostak's congruence closure algorithm can be easily couched in a rewriting framework, thus providing a new insight and better understanding. <p> An example is used to illustrate the main steps. For the original description of Shostak's algorithm, see [15] or <ref> [2] </ref>; the discussion below is based on [2]. <p> An example is used to illustrate the main steps. For the original description of Shostak's algorithm, see [15] or <ref> [2] </ref>; the discussion below is based on [2]. <p> The reader is invited to guess a canonical rewriting system for the above equation that would generate the above canonical forms as computed by Shostak's algorithm. It was this perplexing puzzle after reading <ref> [2] </ref> which led us to develop the approach proposed in this paper. 3 Reinterpreting Shostak's Algorithm as Completion In this section, we demystify the canonical rewriting system generated by Shostak's algorithm.
Reference: 3. <author> P.J. Downey, R. Sethi, and R.E. Tarjan, </author> <title> "Variations on the common subexpression problem," </title> <journal> JACM, </journal> <volume> 27(4) (1980), </volume> <pages> 758-771, </pages>
Reference-contexts: Significance of congruence closure algorithms on ground equations in compiler optimization and verification applications have long been recognized. Particularly, in the mid 70's and early 80's, a number of algorithms for computing congruence closure were reported in the literature <ref> [9, 3, 14] </ref>. Congruence closure has been used as a glue to tie different decision procedure for various theories arising in the application of verification and specification analyses. Two related but different approaches are discussed in [15, 11, 12]. These approaches have been implemented in verification systems, e.g., [1, 2]. <p> These algorithms first use a congruence closure algorithm on the subterm graph (e.g., using the algorithm of Downey, Sethi and Tarjan <ref> [3] </ref>) generated from ground equations for computing congruence classes. A unique representative from each congruence class is then picked to generate a complete reduced set of rewrite rules. If the signature can be extended by introducing new constants, generation of a complete rewrite system is relatively easy [4, 16].
Reference: 4. <author> Z. Fulop, and S. Vagvolgyi, </author> <title> "Ground term rewriting rules for the word problem of ground term equations," </title> <journal> Bulletin of the EATCS, </journal> <volume> 45 (1991), </volume> <pages> 186-201. </pages>
Reference-contexts: In contrast, in <ref> [4, 16] </ref>, algorithms are given by first constructing the congruence closure and then introducing a distinct new constant for each congruence class. 1.1 Related Work It has been well-known that the congruence closure of ground equations can be computed using a completion procedure [5]. <p> A unique representative from each congruence class is then picked to generate a complete reduced set of rewrite rules. If the signature can be extended by introducing new constants, generation of a complete rewrite system is relatively easy <ref> [4, 16] </ref>. Until recently, however, it has been quite a challenge to develop a completion algorithm of polynomial complexity for generating a complete rewrite system directly from ground equations without explicitly constructing the congruence closure using a graph-based congruence closure algorithm. Plaisted and Sattler-Klein [13] proposed two polynomial time algorithms. <p> The main idea is to extend the signature by introducing new constants for nonconstant subterms appearing in ground equations, and manipulating rewrite rules in the extended signature. This is equivalent to incrementally building a subterm graph, which is a directed acyclic graph (dag) (as in <ref> [16, 11, 4] </ref>), introducing names for pointers to nonconstant subterms, and rewriting the subterm graph using these rewrite rules. A table mapping the new constants to the sub-terms they represent in the original signature is also maintained. <p> Further, the algorithm is simpler. New constants are introduced first for all nonconstant subterms by including constant-introducing rules in R 1 . This is equivalent to first building a subterm graph (as in <ref> [16, 11, 4] </ref>). Propagation of equalities is done by processing each equation, which now relates two constants. For each such equation relating two distinct constants, a rule is added which inter-reduces R 1 [ R 2 as above.
Reference: 5. <author> G. Huet and D. Lankford, </author> <title> On the Uniform Halting Problem for Term Rewriting Systems. </title> <type> INRIA Report 283, </type> <month> March </month> <year> 1978. </year>
Reference-contexts: In contrast, in [4, 16], algorithms are given by first constructing the congruence closure and then introducing a distinct new constant for each congruence class. 1.1 Related Work It has been well-known that the congruence closure of ground equations can be computed using a completion procedure <ref> [5] </ref>. The main idea is to orient ground equations into terminating rewrite rules, and then normalize (inter-reduce) the rewriting system. Unlike nonground equations, ground equations can always be oriented into terminating rewrite systems. For instance, it is this algorithm which is used for implementing contextual rewriting in RRL.
Reference: 6. <author> D. Kapur and M. Subramaniam, </author> <title> "New uses of linear arithmetic in automated theorem proving for induction," </title> <editor> J. </editor> <booktitle> Automated Reasoning, </booktitle> <month> 16(1-2) </month> <year> (1996), </year> <pages> 39-78 </pages>
Reference-contexts: This tight integration of rewriting with decision procedures by the mechanism of contextual rewriting is perhaps a main reason for the success of RRL in automatically verifying arithmetic circuits such as multipliers and adders <ref> [6, 7] </ref>. As the importance of decision procedures in verification systems is being recognized, interest in algorithms for combining decision procedures is reviving. ? Partially supported by the National Science Foundation Grant nos. CCR-9308016, and CCR-9404930.
Reference: 7. <author> D. Kapur and M. Subramaniam, </author> <title> "Mechanically verifying a family of multiplier circuits," </title> <booktitle> Proc. Computer Aided Verification (CAV), </booktitle> <address> New Jersey, </address> <publisher> Springer LNCS 1102 (eds. </publisher> <editor> R. Alur and T.A. </editor> <booktitle> Henzinger) (1996), </booktitle> <pages> 135-146 </pages>
Reference-contexts: This tight integration of rewriting with decision procedures by the mechanism of contextual rewriting is perhaps a main reason for the success of RRL in automatically verifying arithmetic circuits such as multipliers and adders <ref> [6, 7] </ref>. As the importance of decision procedures in verification systems is being recognized, interest in algorithms for combining decision procedures is reviving. ? Partially supported by the National Science Foundation Grant nos. CCR-9308016, and CCR-9404930.
Reference: 8. <author> D. Kapur and H. Zhang, </author> <title> "An overview of Rewrite Rule Laboratory (RRL), </title> " <journal> Computers and Math. with Applications, </journal> <volume> 29(2) (1995), </volume> <pages> 91-114. </pages>
Reference-contexts: Two related but different approaches are discussed in [15, 11, 12]. These approaches have been implemented in verification systems, e.g., [1, 2]. In our theorem prover Rewrite Rule Laboratory (RRL) <ref> [8] </ref>, congruence closure is used to implement contextual rewriting [17], which combines equality reasoning using rewrite rules with decision procedures for booleans, arithmetic and freely constructed data structures.
Reference: 9. <author> D. Kozen, </author> <title> Complexity of Finitely Presented Algebras. </title> <type> Technical Report TR 76-294, </type> <institution> Dept. of Computer Science, Cornell Univ., </institution> <address> Ithaca, NY, </address> <year> 1976. </year>
Reference-contexts: Significance of congruence closure algorithms on ground equations in compiler optimization and verification applications have long been recognized. Particularly, in the mid 70's and early 80's, a number of algorithms for computing congruence closure were reported in the literature <ref> [9, 3, 14] </ref>. Congruence closure has been used as a glue to tie different decision procedure for various theories arising in the application of verification and specification analyses. Two related but different approaches are discussed in [15, 11, 12]. These approaches have been implemented in verification systems, e.g., [1, 2].
Reference: 10. <author> D. Knuth and P. Bendix, </author> <title> "Simple word problems in universal algebras," in Computational Problems in Abstract Algebra (ed. Leech), </title> <publisher> Pergamon Press (1970), </publisher> <pages> 263-297. </pages>
Reference: 11. <author> G. Nelson, </author> <title> and D.C. Oppen, "Simplification by cooperating decision procedures," </title> <booktitle> ACM Tran. on Programming Languages and Systems 1 (2) (1979) 245-257. </booktitle>
Reference-contexts: Congruence closure has been used as a glue to tie different decision procedure for various theories arising in the application of verification and specification analyses. Two related but different approaches are discussed in <ref> [15, 11, 12] </ref>. These approaches have been implemented in verification systems, e.g., [1, 2]. In our theorem prover Rewrite Rule Laboratory (RRL) [8], congruence closure is used to implement contextual rewriting [17], which combines equality reasoning using rewrite rules with decision procedures for booleans, arithmetic and freely constructed data structures. <p> Shostak's congruence closure algorithm serves as the core of his combination framework [14, 15]. Decision procedures satisfying certain properties can be tightly integrated with the basic congruence closure algorithm to give a combination of decision procedures. In contrast, Nelson and Oppen's approach <ref> [11, 12] </ref> relies on decision procedures working independently and deriving ground equations, which are passed to the congruence closure algorithm. New equations deduced by the congruence closure are, in turn, passed back to the decision procedures. <p> The main idea is to extend the signature by introducing new constants for nonconstant subterms appearing in ground equations, and manipulating rewrite rules in the extended signature. This is equivalent to incrementally building a subterm graph, which is a directed acyclic graph (dag) (as in <ref> [16, 11, 4] </ref>), introducing names for pointers to nonconstant subterms, and rewriting the subterm graph using these rewrite rules. A table mapping the new constants to the sub-terms they represent in the original signature is also maintained. <p> Further, the algorithm is simpler. New constants are introduced first for all nonconstant subterms by including constant-introducing rules in R 1 . This is equivalent to first building a subterm graph (as in <ref> [16, 11, 4] </ref>). Propagation of equalities is done by processing each equation, which now relates two constants. For each such equation relating two distinct constants, a rule is added which inter-reduces R 1 [ R 2 as above.
Reference: 12. <author> G. Nelson, </author> <title> and D.C. Oppen, "Fast decision procedures based on congruence closure," </title> <journal> JACM, </journal> <volume> 27(2) (1980), </volume> <pages> 356-364. </pages>
Reference-contexts: Congruence closure has been used as a glue to tie different decision procedure for various theories arising in the application of verification and specification analyses. Two related but different approaches are discussed in <ref> [15, 11, 12] </ref>. These approaches have been implemented in verification systems, e.g., [1, 2]. In our theorem prover Rewrite Rule Laboratory (RRL) [8], congruence closure is used to implement contextual rewriting [17], which combines equality reasoning using rewrite rules with decision procedures for booleans, arithmetic and freely constructed data structures. <p> Shostak's congruence closure algorithm serves as the core of his combination framework [14, 15]. Decision procedures satisfying certain properties can be tightly integrated with the basic congruence closure algorithm to give a combination of decision procedures. In contrast, Nelson and Oppen's approach <ref> [11, 12] </ref> relies on decision procedures working independently and deriving ground equations, which are passed to the congruence closure algorithm. New equations deduced by the congruence closure are, in turn, passed back to the decision procedures.
Reference: 13. <author> D. Plaisted, and A. Sattler-Klein, </author> <title> "Proof lengths for equational completion," </title> <journal> Information and Computation, </journal> <volume> 125 (1996), </volume> <pages> 154-170. </pages>
Reference-contexts: Until recently, however, it has been quite a challenge to develop a completion algorithm of polynomial complexity for generating a complete rewrite system directly from ground equations without explicitly constructing the congruence closure using a graph-based congruence closure algorithm. Plaisted and Sattler-Klein <ref> [13] </ref> proposed two polynomial time algorithms. The proposed work is different in spirit. Firstly, it is an attempt to explain a particular congruence closure algorithm due to Shostak [15] that has been found useful and implemented in theorem proving and verification systems. <p> Theorem 9. The congruence closure of S can be computed using ShostakR in O (jSj 2 ). A canonical rewrite system can be constructed from ground equations in O (jSj 2 ) using the above algorithm, which is the same order of complexity as the second algorithm given in <ref> [13] </ref>. To check whether s = t is in the congruence closure of S, it takes O (jsj + jtj + jSj) steps in addition to O (jSj 2 ) steps needed for constructing the congruence closure from input equations.
Reference: 14. <author> R.E. Shostak, </author> <title> "An algorithm for reasoning about equality," </title> <journal> Communications of ACM, </journal> <volume> 21(7) (1978), </volume> <pages> 583-585. </pages>
Reference-contexts: Significance of congruence closure algorithms on ground equations in compiler optimization and verification applications have long been recognized. Particularly, in the mid 70's and early 80's, a number of algorithms for computing congruence closure were reported in the literature <ref> [9, 3, 14] </ref>. Congruence closure has been used as a glue to tie different decision procedure for various theories arising in the application of verification and specification analyses. Two related but different approaches are discussed in [15, 11, 12]. These approaches have been implemented in verification systems, e.g., [1, 2]. <p> Shostak's congruence closure algorithm serves as the core of his combination framework <ref> [14, 15] </ref>. Decision procedures satisfying certain properties can be tightly integrated with the basic congruence closure algorithm to give a combination of decision procedures. In contrast, Nelson and Oppen's approach [11, 12] relies on decision procedures working independently and deriving ground equations, which are passed to the congruence closure algorithm.
Reference: 15. <author> R.E. Shostak, </author> <title> "Deciding combination of theories," </title> <journal> Journal of ACM 31 (1), </journal> <year> (1984) </year> <month> 1-12. </month>
Reference-contexts: Congruence closure has been used as a glue to tie different decision procedure for various theories arising in the application of verification and specification analyses. Two related but different approaches are discussed in <ref> [15, 11, 12] </ref>. These approaches have been implemented in verification systems, e.g., [1, 2]. In our theorem prover Rewrite Rule Laboratory (RRL) [8], congruence closure is used to implement contextual rewriting [17], which combines equality reasoning using rewrite rules with decision procedures for booleans, arithmetic and freely constructed data structures. <p> Shostak's congruence closure algorithm serves as the core of his combination framework <ref> [14, 15] </ref>. Decision procedures satisfying certain properties can be tightly integrated with the basic congruence closure algorithm to give a combination of decision procedures. In contrast, Nelson and Oppen's approach [11, 12] relies on decision procedures working independently and deriving ground equations, which are passed to the congruence closure algorithm. <p> Plaisted and Sattler-Klein [13] proposed two polynomial time algorithms. The proposed work is different in spirit. Firstly, it is an attempt to explain a particular congruence closure algorithm due to Shostak <ref> [15] </ref> that has been found useful and implemented in theorem proving and verification systems. Since the algorithm computes canonical forms of terms in an incremental fashion, there is a canonical rewrite system implicitly being computed. This paper demystifies this construction. <p> An example is used to illustrate the main steps. For the original description of Shostak's algorithm, see <ref> [15] </ref> or [2]; the discussion below is based on [2].
Reference: 16. <author> W. Snyder, </author> <title> "A fast algorithm for generating reduced ground rewriting system from a set of ground equations," </title> <journal> J. Symbolic Computation, </journal> <year> 1992. </year>
Reference-contexts: This translates to relaxing the requirement that the rewrite rules be terminating, i.e., they could be non-terminating. The requirement that rewriting rules be terminating has almost always been considered essential for generating a canonical system using completion <ref> [16] </ref>. A new method for generating a confluent rewriting system from nontermi-nating rewrite rules is a byproduct of this connection. We are not aware of any work on generating a confluent rewriting system from nonterminating rules other than a mention in [16] that Snyder's "first algorithm does not depend upon the <p> considered essential for generating a canonical system using completion <ref> [16] </ref>. A new method for generating a confluent rewriting system from nontermi-nating rewrite rules is a byproduct of this connection. We are not aware of any work on generating a confluent rewriting system from nonterminating rules other than a mention in [16] that Snyder's "first algorithm does not depend upon the ordering." The proposed reformulation of Shostak's algorithm also gives a new quadratic method (O (n 2 ), where n is the size of the ground equational system) for generating a canonical ground rewriting system from ground equations when the original signature <p> In contrast, in <ref> [4, 16] </ref>, algorithms are given by first constructing the congruence closure and then introducing a distinct new constant for each congruence class. 1.1 Related Work It has been well-known that the congruence closure of ground equations can be computed using a completion procedure [5]. <p> For instance, it is this algorithm which is used for implementing contextual rewriting in RRL. A number of papers on generating a complete system of ground rewrite rules in polynomial time from ground equations have been published (see <ref> [16] </ref> for such references and details). These algorithms first use a congruence closure algorithm on the subterm graph (e.g., using the algorithm of Downey, Sethi and Tarjan [3]) generated from ground equations for computing congruence classes. <p> A unique representative from each congruence class is then picked to generate a complete reduced set of rewrite rules. If the signature can be extended by introducing new constants, generation of a complete rewrite system is relatively easy <ref> [4, 16] </ref>. Until recently, however, it has been quite a challenge to develop a completion algorithm of polynomial complexity for generating a complete rewrite system directly from ground equations without explicitly constructing the congruence closure using a graph-based congruence closure algorithm. Plaisted and Sattler-Klein [13] proposed two polynomial time algorithms. <p> The main idea is to extend the signature by introducing new constants for nonconstant subterms appearing in ground equations, and manipulating rewrite rules in the extended signature. This is equivalent to incrementally building a subterm graph, which is a directed acyclic graph (dag) (as in <ref> [16, 11, 4] </ref>), introducing names for pointers to nonconstant subterms, and rewriting the subterm graph using these rewrite rules. A table mapping the new constants to the sub-terms they represent in the original signature is also maintained. <p> Further, the algorithm is simpler. New constants are introduced first for all nonconstant subterms by including constant-introducing rules in R 1 . This is equivalent to first building a subterm graph (as in <ref> [16, 11, 4] </ref>). Propagation of equalities is done by processing each equation, which now relates two constants. For each such equation relating two distinct constants, a rule is added which inter-reduces R 1 [ R 2 as above.
Reference: 17. <author> H. Zhang, </author> <title> "Implementing contextual rewriting," </title> <booktitle> Proc. Third International Workshop on Conditional Term Rewriting Systems, </booktitle> <publisher> Springer LNCS 656 (eds. </publisher> <editor> J. L. Remy and M. Rusinowitch), </editor> <year> (1992), </year> <pages> 363-377. </pages>
Reference-contexts: Two related but different approaches are discussed in [15, 11, 12]. These approaches have been implemented in verification systems, e.g., [1, 2]. In our theorem prover Rewrite Rule Laboratory (RRL) [8], congruence closure is used to implement contextual rewriting <ref> [17] </ref>, which combines equality reasoning using rewrite rules with decision procedures for booleans, arithmetic and freely constructed data structures.
References-found: 17

