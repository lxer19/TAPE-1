URL: http://ftp.eecs.umich.edu/people/tjs/icga95.ps
Refering-URL: http://ftp.eecs.umich.edu/people/tjs/
Root-URL: http://www.eecs.umich.edu
Title: A Parallel Genetic Algorithm for Multiobjective Microprocessor Design  
Author: Timothy J. Stanley and Trevor Mudge 
Address: Beal Street  Ann Arbor, MI 48109-2122  
Affiliation: 1301  Advanced Computer Architecture Laboratory University of Michigan  
Abstract: The microprocessor chip designer must solve the problem of partitioning millions of transistors into an arbitrary number of hardware structures within a finite chip area toward achieving maximum performance. This combinative complexity is compounded by a lengthy performance evaluation of each proposed design. We present the application of a real-valued multiobjective genetic algorithm on an asynchronous parallel workstation network as a optimization approach well suited to this problem. By casting design budget constraints as multiple design objectives, the need for penalty functions is eliminated. A microprocessor cache memory design problem is optimized with the genetic algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [Altman et al., 1993] <author> Altman, E. R., Agarwal, V. K., and Gao, G. R. </author> <year> (1993). </year> <title> A novel methodology using genetic algorithms for the design of caches and cache replacement policy. </title> <booktitle> In Proc. of the 5 th Int. Conf. on Genetic Algorithms. </booktitle>
Reference-contexts: More recent work has partitioned the problem and used simulated annealing as a global optimizer, neglecting interaction between independently optimized hardware structures [Conte, 1992] [Conte et al., 1993]. Other researchers have applied the GA to the specific problem of selecting optimal replacement policies for on-chip cache memories <ref> [Altman et al., 1993] </ref>. Our early experiments with simple iterative hill climbing show that the computer architecture design space is multimodal, and is composed of many local optima with similar performance. Only a sustained global convergent search technique is appropriate for this problem.
Reference: [Conte, 1992] <author> Conte, T. M. </author> <year> (1992). </year> <title> Systematic Computer Architecture Prototyping. </title> <type> PhD thesis, </type> <institution> University of Illi-nois, Urbana-Champaign IL USA. </institution>
Reference-contexts: Early systematic attempts at computer architecture design pruned the search space and had difficulty distinguishing between global and local optima [Kumar and Davidson, 1980]. More recent work has partitioned the problem and used simulated annealing as a global optimizer, neglecting interaction between independently optimized hardware structures <ref> [Conte, 1992] </ref> [Conte et al., 1993]. Other researchers have applied the GA to the specific problem of selecting optimal replacement policies for on-chip cache memories [Altman et al., 1993].
Reference: [Conte et al., 1993] <author> Conte, T. M., Menezes, K. N. P., and Sathaye, S. W. </author> <year> (1993). </year> <title> The impact of power and area efficiency on superscalar processor design. </title> <type> Technical report, </type> <institution> University of South Carolina. </institution>
Reference-contexts: Early systematic attempts at computer architecture design pruned the search space and had difficulty distinguishing between global and local optima [Kumar and Davidson, 1980]. More recent work has partitioned the problem and used simulated annealing as a global optimizer, neglecting interaction between independently optimized hardware structures [Conte, 1992] <ref> [Conte et al., 1993] </ref>. Other researchers have applied the GA to the specific problem of selecting optimal replacement policies for on-chip cache memories [Altman et al., 1993].
Reference: [Fonesca and Fleming, 1993] <author> Fonesca, C. M. and Fleming, P. J. </author> <year> (1993). </year> <title> Genetic algorithms for multiobjective optimization: Formulation, discussion and generalization. </title> <booktitle> In Proc. of the 5 th Int. Conf. on Genetic Algorithms. </booktitle>
Reference-contexts: However, assigning weights to each objective is problematic how do we determine what the relative weights should be? A formal method to rank such competing design points uses the concept of Pareto optimality [Goldberg, 1989] <ref> [Fonesca and Fleming, 1993] </ref>. Consider multiple competing points in the design space. A point is considered nondominated if and only if there is no other point in the design space that better satisfies all objectives. In this problem we are minimizing chip area, CPI, and power.
Reference: [Goldberg, 1989] <author> Goldberg, D. E. </author> <year> (1989). </year> <title> Genetic Algorithms in Search, Optimization, & Machine Learning. </title> <publisher> Addison-Wesley. </publisher>
Reference-contexts: However, assigning weights to each objective is problematic how do we determine what the relative weights should be? A formal method to rank such competing design points uses the concept of Pareto optimality <ref> [Goldberg, 1989] </ref> [Fonesca and Fleming, 1993]. Consider multiple competing points in the design space. A point is considered nondominated if and only if there is no other point in the design space that better satisfies all objectives. In this problem we are minimizing chip area, CPI, and power. From [Goldberg, 1989], <p> optimality <ref> [Goldberg, 1989] </ref> [Fonesca and Fleming, 1993]. Consider multiple competing points in the design space. A point is considered nondominated if and only if there is no other point in the design space that better satisfies all objectives. In this problem we are minimizing chip area, CPI, and power. From [Goldberg, 1989], a vector of objectives X having length i is partially less than (&lt; p) vector Y, (i.e., it better satisfies the minimization objectives and it dominates Y) when the following conditions are met: (X &lt; p Y ) , (8 i )(x i y i ) ^ (9 i
Reference: [Gordon and Whitley, 1993] <author> Gordon, V. and Whitley, D. </author> <year> (1993). </year> <title> Serial and parallel genetic algorithms as function optimizers. </title> <booktitle> In Proc. of the 5 th Int. Conf. on Genetic Algorithms. </booktitle>
Reference-contexts: It is the designer's specification of constraints and objectives that directs the GA to desirable regions of the design space. 4 GAIN: Parallel Network Evaluation Considerable research on parallel GA models has been performed, e.g., <ref> [Gordon and Whitley, 1993] </ref>. However, our problem is that of simply distributing one and only one chromosome per workstation and collating results. Several interesting issues arise related to the asynchronous nature of a loosely-coupled parallel workstation network.
Reference: [Hennessy and Patterson, 1990] <author> Hennessy, J. and Patter-son, D. </author> <year> (1990). </year> <title> Computer Architecture, A Quantitative Approach. </title> <publisher> Morgan Kaufman, </publisher> <address> San Mateo, California. </address>
Reference-contexts: This Genetic Algorithm running on the INternet is called GAIN. A microprocessor on-chip memory design problem is optimized using GAIN. 2 Background Computer architecture design has not traditionally been treated as a classic optimization problem. Much computer architecture work in the 1980s emphasized a quantitative approach to design <ref> [Hennessy and Patterson, 1990] </ref> over an "art and experience" approach. Early systematic attempts at computer architecture design pruned the search space and had difficulty distinguishing between global and local optima [Kumar and Davidson, 1980]. <p> The manufacturing cost of a microprocessor chip is directly proportional to its size, or area <ref> [Hennessy and Patterson, 1990] </ref>. As such, a design budget for this area/cost is specified early in the design. We quantify the hardware budget in Register Bit Equivalents, or RBEs [Mulder et al., 1991].
Reference: [Hennessy and Jouppi, 1991] <author> Hennessy, J. L. and Jouppi, N. P. </author> <year> (1991). </year> <title> Computer technology and architecture: An evolving interaction. </title> <journal> IEEE Computer, </journal> <volume> 24 </volume> <pages> 18-29. </pages>
Reference-contexts: Because locality of reference enables the hierarchy to statistically provide cache hits at the top of the hierarchy, the average memory hierarchy speed is approximated by the speed of the small fast top level. In modern microprocessors, performance is determined by the average memory access speed. <ref> [Hennessy and Jouppi, 1991] </ref>. The partition of finite chip area into a near-optimal cache hierarchy is critical. The microprocessor memory hierarchy shown in extensively described in [Stanley and Mudge, 1995].
Reference: [Kumar and Davidson, 1980] <author> Kumar, B. and Davidson, E. S. </author> <year> (1980). </year> <title> Computer system design using a hierarchical approach to performance evaluation. </title> <journal> Communications of the ACM, </journal> <volume> 23(9) </volume> <pages> 511-521. </pages>
Reference-contexts: Much computer architecture work in the 1980s emphasized a quantitative approach to design [Hennessy and Patterson, 1990] over an "art and experience" approach. Early systematic attempts at computer architecture design pruned the search space and had difficulty distinguishing between global and local optima <ref> [Kumar and Davidson, 1980] </ref>. More recent work has partitioned the problem and used simulated annealing as a global optimizer, neglecting interaction between independently optimized hardware structures [Conte, 1992] [Conte et al., 1993].
Reference: [Mulder et al., 1991] <author> Mulder, J. M., Quach, N. T., and Flynn, M. J. </author> <year> (1991). </year> <title> An area model for on-chip memories and its application. </title> <journal> IEEE Journal of Solid-state Circuits, </journal> <volume> 26(2) </volume> <pages> 98-105. </pages>
Reference-contexts: The manufacturing cost of a microprocessor chip is directly proportional to its size, or area [Hennessy and Patterson, 1990]. As such, a design budget for this area/cost is specified early in the design. We quantify the hardware budget in Register Bit Equivalents, or RBEs <ref> [Mulder et al., 1991] </ref>. The RBE is a technology-independent unit-less measure of the area consumed by an on-chip memory as a function of its design parameters.
Reference: [Powell and Skolnick, 1993] <author> Powell, D. and Skolnick, M. M. </author> <year> (1993). </year> <title> Using genetic algorithms in engineering design optimization with non-linear constraints. </title> <booktitle> In Proc. of the 5 th Int. Conf. on Genetic Algorithms. </booktitle>
Reference-contexts: It follows that a smaller cache memory consumes less design resources, but provides less performance. 3 Casting Constraints as Objectives A typical approach to constrained optimization problems is the assignment of a penalty function <ref> [Powell and Skolnick, 1993] </ref> [Smith and Tate, 1993] to configurations with constraint violations. In our case, microprocessor designs exceeding the chip area or power budget constraints would be penalized. We regard the assignment of a penalty function to over-budget configurations as undesirable. First, identifying the degree of penalization remains problematic.
Reference: [Smith and Tate, 1993] <author> Smith, A. E. and Tate, D. M. </author> <year> (1993). </year> <title> Genetic optimization using a penalty function. </title> <booktitle> In Proc. of the 5 th Int. Conf. on Genetic Algorithms. </booktitle>
Reference-contexts: It follows that a smaller cache memory consumes less design resources, but provides less performance. 3 Casting Constraints as Objectives A typical approach to constrained optimization problems is the assignment of a penalty function [Powell and Skolnick, 1993] <ref> [Smith and Tate, 1993] </ref> to configurations with constraint violations. In our case, microprocessor designs exceeding the chip area or power budget constraints would be penalized. We regard the assignment of a penalty function to over-budget configurations as undesirable. First, identifying the degree of penalization remains problematic. <p> A slightly over budget, but otherwise nondomi-nated, configuration will have its relative objective success properly rewarded with reproductive opportunity. Specifically, cross-breeding of over-budget configurations with at-budget configurations is permitted. As <ref> [Smith and Tate, 1993] </ref> have observed, optimal points in the design space tend to lie at the boundary of the feasible region, i.e., where a design budget is maximally consumed.
Reference: [Stanley and Mudge, 1995] <author> Stanley, T. J. and Mudge, T. </author> <year> (1995). </year> <title> Systematic objective-driven computer architec ture optimization. </title> <booktitle> In Proc. of the 16 th Conf. on Advanced Research in VLSI, </booktitle> <pages> pages 286-300. </pages>
Reference-contexts: In modern microprocessors, performance is determined by the average memory access speed. [Hennessy and Jouppi, 1991]. The partition of finite chip area into a near-optimal cache hierarchy is critical. The microprocessor memory hierarchy shown in extensively described in <ref> [Stanley and Mudge, 1995] </ref>. The 23 parameters used to describe this design space represent over 1:6 fi 10 19 possible configurations. 2.2 Design Constraints and Objectives We focus our design effort on satisfying two design budget constraints, chip area and chip power dissipation, and one design objective, maximal performance.
Reference: [Zeigler and Kim, 1993] <author> Zeigler, B. P. and Kim, J. </author> <year> (1993). </year> <title> Asynchronous genetic algorithms on parallel computers. </title> <booktitle> In Proc. of the 5 th Int. Conf. on Genetic Algorithms. </booktitle>
Reference-contexts: Two extensions to the serial GA are needed a method to handle the widely varying evaluation times, and a method to handle terminated chromosomes. Synchronous and asynchronous solutions exist to the problem of variable objective function evaluation times <ref> [Zeigler and Kim, 1993] </ref>. A synchronous approach forces the GA to wait until all evaluations belonging to generation G complete before proceeding to generation G + 1.
References-found: 14

