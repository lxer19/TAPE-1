URL: ftp://ftp.cs.toronto.edu/pub/eric/HICSS94.ps.Z
Refering-URL: http://www.cs.toronto.edu/~eric/
Root-URL: 
Title: Using Goals, Rules, and Methods to Support Reasoning in Business Process Reengineering  
Author: Eric S. K. Yu and John Mylopoulos 
Address: Toronto, Ontario, Canada M5S 1A4  
Affiliation: Department of Computer Science, University of Toronto  
Abstract: One step towards a more systematic approach to the design of business processes is to develop models that provide appropriate representations of the knowledge that is needed for understanding and for reasoning about business processes. We present a modelling framework which uses goals, rules, and methods to support the systematic analysis and design of business processes. The framework consists of two main components anActor Dependency model that describes a process organization in terms of intentional dependencies among actors, and an Issue Argumentation model that supports reasoning during process redesign. Formal representation of these models allows computer-based tools to be developed as extensions to, and eventually integrated with, other tools for supporting information systems development. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. R. Barber, </author> <title> Office Semantics, </title> <type> Ph.D. Dissertation, </type> <institution> Dept. of Elec. Eng. and Comp. Sci., M.I.T., </institution> <year> 1982. </year>
Reference-contexts: The final design is a set of activities assigned to agents, rather than a network of intentional dependencies among organizational actors. Goals and rules have also been used in a number of system architectures and models to provide more flexible capabilities in an information system (e.g., <ref> [1, 6] </ref>).
Reference: [2] <author> A. Borgida, S. Greenspan, J. Mylopoulos, </author> <title> Knowledge Representation as the Basis for Requirements Specifications, </title> <booktitle> IEEE Computer, </booktitle> <month> April </month> <year> 1985, </year> <pages> pp. 82-91. </pages>
Reference-contexts: Although software engineering and information system development have traditionally concentrated on technical aspects of system development, researchers have begun to develop concepts and techniques to address "upstream" issues, including frameworks for modelling the organizational environments within which information systems are embedded (e.g., <ref> [3, 2, 9] </ref>). In recent years, the business community has become increasingly aware of the important role that information technology can play in efforts to improve organizational effectiveness.
Reference: [3] <author> J. A. Bubenko, </author> <title> Information Modeling in the Context of System Development, </title> <booktitle> Proc. IFIP, </booktitle> <pages> pp. 395-411, </pages> <year> 1980. </year>
Reference-contexts: Although software engineering and information system development have traditionally concentrated on technical aspects of system development, researchers have begun to develop concepts and techniques to address "upstream" issues, including frameworks for modelling the organizational environments within which information systems are embedded (e.g., <ref> [3, 2, 9] </ref>). In recent years, the business community has become increasingly aware of the important role that information technology can play in efforts to improve organizational effectiveness.
Reference: [4] <author> K. L. Chung, </author> <title> Representing and Using Non-Functional Requirements for Information System Development: </title>
Reference-contexts: In other words, design goals are treated as soft-goals, as introduced in the AD model. This type of goal corresponds to the notion of non-functional requirements in software engineering. We follow the qualitative argumentation and reasoning approach that has been developed to deal with non-functional requirements <ref> [4] </ref>. Issues are treated as contributing factors toward other issues. Contributions can be positive or negative. The term satisficed is used to indicate that a contribution is strong enough to address an issue. "PayWhenGoodsReceived". An intermediate, "automation" option is represented by the rule associated with the activity "matchByComputer". <p> Graphically, we use a "+" or a "-" annotation adjacent to the arrowhead. * the extent or degree of the contribution - Following <ref> [4] </ref>, we only distinguish between enough contribution versus not enough (partial) contribution. These are called sup and sub links in [4], connoting above and below. <p> Graphically, we use a "+" or a "-" annotation adjacent to the arrowhead. * the extent or degree of the contribution - Following <ref> [4] </ref>, we only distinguish between enough contribution versus not enough (partial) contribution. These are called sup and sub links in [4], connoting above and below. <p> During a design process, the network of arguments will be dynamically constructed. Nodes will have one of four possible values - satisficed, denied, conflict, or unknown that indicates the decision status for that node. These values are propagated over the network through a labelling procedure <ref> [4] </ref>. The links in Figure 5 represent arguments pertaining to that particular example. Arguments used in a design process, however, often come from generic principles. <p> By being part of this larger framework, we take advantage of concepts and tools that have already been developed and implemented (e.g. [14]). A prototype of the NFR assistant has also been implemented <ref> [4, 24] </ref>. The Actor Dependency model draws on concepts of dependency from organization theory (e.g. [30, 25]). <p> Activity descriptions are used for means-ends reasoning and planning in [6], by allowing activities to have goals and to decompose into subgoals and/or subtasks. The Issue Argumentation model adopts the NFR framework of [22] and <ref> [4] </ref> for dealing with nonfunctional requirements, which is influenced by Lee's goal-oriented decision support framework [16], which in turn extends previous frameworks for argumentation and for design rationale support (e.g., [26, 18]).
References-found: 4

