URL: http://www.isi.edu/expect/papers/gil-tallis-kaw95.ps
Refering-URL: http://www.isi.edu/expect/papers/papers-ka.html
Root-URL: 
Email: gil@isi.edu, tallis@isi.edu  
Title: Transaction-Based Knowledge Acquisition: Complex Modifications Made Easier  
Author: Yolanda Gil and Marcelo Tallis 
Note: In Proceedings of the Ninth Knowledge Acquisition for Knowledge-Based Systems Workshop, February 26-March 3, 1995.  
Address: 4676 Admiralty Way Marina del Rey, CA 90292  Banff, Alberta, Canada.  
Affiliation: Information Sciences Institute and Computer Science Department University of Southern California  
Abstract: Our goal is to build knowledge acquisition tools that support users in making a broad range of changes to a knowledge base, including both factual and problem-solving knowledge. These changes may require several individual modifications to various parts of the knowledge base, that need to be carefully coordinated to prevent users from introducing errors in the knowledge base. Thus, it becomes essential that our KA tools understand the consequences of each kind of change that the user may initiate, detect any harmful side-effects that can be introduced in the system, and guide the user in resolving them. To address this issue, we have developed a transaction-based approach to knowledge acquisition that can support users in making complex modifications to a knowledge base. A transaction is a sequence of changes that together modify some aspect of the behavior of a knowledge-based system, and that when only partially carried out may leave the knowledge base in an undesirable state. If a user executes a transaction partially, the knowledge acquisition tool must provide guidance to finish it and support the user in achieving the desired modification. This paper also describes our work in extending EXPECT's knowledge acquisition tool to support transaction-based mechanisms. EXPECT tracks the possible problems that arise as a consequence of each individual change to the knowledge base, keeps information about the context of each change, and uses this context to resolve the problems detected and to request the user's intervention if additional information is needed. 
Abstract-found: 1
Intro-found: 1
Reference: [ Gil and Paris, 1994 ] <author> Y. Gil and C. Paris. </author> <title> Towards method-independent knowledge acquisition. </title> <journal> Knowledge acquisition, </journal> <volume> 6(2) </volume> <pages> 163-178, </pages> <year> 1994. </year>
Reference: [ Gil, 1994 ] <author> Yolanda Gil. </author> <title> Knowledge refinement in a reflective architecture. </title> <booktitle> In Proceedings of the Twelfth National Conference on Artificial Intelligence, </booktitle> <address> Seattle, WA, </address> <year> 1994. </year>
Reference-contexts: Throughout this process, EXPECT propagates the types of the arguments of the top-level goal performing an elaborate form of partial evaluation supported by Loom's reasoning capabilities. During this process, EXPECT derives the interdependencies between the domain facts and the problem-solving methods. See <ref> [ Swartout and Gil, 1995, Gil, 1994 ] </ref> for a description of how this process supports EXPECT's knowledge acquisition tool. 2.2 Modifying EXPECT's Knowledge Bases This section describes EXPECT's basic knowledge modification commands and a motivating example.
Reference: [ Ginsberg et al., 1988 ] <author> Allen Ginsberg, Sholom M. Weiss, and Peter Politakis. </author> <title> Automatic Knowledge Base Refinement for Classification Systems. </title> <journal> Artificial Intelligence, </journal> <volume> 35(5) </volume> <pages> 197-226, </pages> <year> 1988. </year>
Reference-contexts: While verification aims at ensuring that the system addresses the needs and requirements specified by the user, validation ensures that the implementation of the system functions appropriately. Most of the work on validation concentrates on rule-based systems <ref> [ Ginsberg et al., 1988, Loiseau, 1993 ] </ref> . For system validation, a suite of sample problems is 15 given to the system to be executed, and the tool provides support for users in fixing the knowledge that produces wrong results.
Reference: [ Kahn et al., 1985 ] <author> Gary Kahn, Steven Nowlan, and John McDermott. </author> <title> Strategies for Knowl--edge Acquistion. </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> PAMI-7(5):511-522, </volume> <month> September </month> <year> 1985. </year>
Reference: [ Klinker et al., 1991 ] <author> G. Klinker, C. Bhola, G. Dallemagne, D. Marques, and J McDermott. </author> <title> Usable and reusable programming constructs. </title> <journal> Knowledge Acquisition, </journal> <volume> 3(2) </volume> <pages> 117-135, </pages> <year> 1991. </year>
Reference: [ Loiseau, 1993 ] <author> Stephane Loiseau. </author> <title> A method for checking and restoring the consistency of knowledge bases. </title> <journal> International Journal of Human-Computer Studies, </journal> <volume> 40 </volume> <pages> 425-442, </pages> <year> 1993. </year>
Reference-contexts: While verification aims at ensuring that the system addresses the needs and requirements specified by the user, validation ensures that the implementation of the system functions appropriately. Most of the work on validation concentrates on rule-based systems <ref> [ Ginsberg et al., 1988, Loiseau, 1993 ] </ref> . For system validation, a suite of sample problems is 15 given to the system to be executed, and the tool provides support for users in fixing the knowledge that produces wrong results.
Reference: [ MacGregor, 1988 ] <author> R. MacGregor. </author> <title> A deductive pattern matcher. </title> <booktitle> In Proceedings of the 1988 National Conference on Artificial Intelligence, </booktitle> <address> St Paul, MN, </address> <month> August </month> <year> 1988. </year>
Reference-contexts: Domain facts specify relevant data about a domain. For example, insulin is an instance of a protein. The domain terminology (or domain ontology) models objects, definitions, and the relations among them. Domain terminology and facts are represented in Loom <ref> [ MacGregor, 1988, MacGregor, 1991 ] </ref> , a state-of-the-art knowledge representation system of the KL-ONE family. These descriptions represent concepts, instances, relations, and constraints on these relations. of aminoacid sequences. Genes (and vectors) are kinds of DNA structures.
Reference: [ MacGregor, 1991 ] <author> R. MacGregor. </author> <title> The evolving technology of classification-based knowledge representation systems. </title> <editor> In J. Sowa, editor, </editor> <booktitle> Principles of Semantic Networks: Explorations in the Representation of Knowledge. </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, CA, </address> <year> 1991. </year>
Reference-contexts: Domain facts specify relevant data about a domain. For example, insulin is an instance of a protein. The domain terminology (or domain ontology) models objects, definitions, and the relations among them. Domain terminology and facts are represented in Loom <ref> [ MacGregor, 1988, MacGregor, 1991 ] </ref> , a state-of-the-art knowledge representation system of the KL-ONE family. These descriptions represent concepts, instances, relations, and constraints on these relations. of aminoacid sequences. Genes (and vectors) are kinds of DNA structures.
Reference: [ Marcus and McDermott, 1989 ] <author> S. Marcus and J. McDermott. </author> <title> SALT: A knowledge acquisition language for propose-and-revise systems. </title> <journal> Artificial Intelligence, </journal> <volume> 39(1) </volume> <pages> 1-37, </pages> <month> May </month> <year> 1989. </year>
Reference: [ Musen, 1989 ] <author> M. A. Musen. </author> <title> Automated support for building and extending expert models. </title> <journal> Machine Learning, </journal> 4(3/4):347-375, 1989. 
Reference: [ Musen, 1992 ] <author> M. </author> <title> A Musen. Editorial. Overcoming the limitations of role-limiting methods. </title> <journal> Knowledge Acquisition, </journal> <volume> 4(2) </volume> <pages> 165-170, </pages> <year> 1992. </year>
Reference: [ O'Keefe and O'Leary, 1993 ] <author> Robert M. O'Keefe and Daniel E. O'Leary. </author> <title> Expert System Verification and Validation: A Survey and Tutorial. </title> <journal> Artificial Intelligence Review, </journal> <volume> 7 </volume> <pages> 3-42, </pages> <year> 1993. </year>
Reference-contexts: One area of research that is complementary to the work presented here on detecting and resolving errors is the verification and validation of knowledge bases <ref> [ O'Keefe and O'Leary, 1993 ] </ref> . While verification aims at ensuring that the system addresses the needs and requirements specified by the user, validation ensures that the implementation of the system functions appropriately.
Reference: [ Puerta et al., 1992 ] <author> A. R. Puerta, J. W. Egar, S. W. Tu, and M. </author> <title> A Musen. A multiple-method knowledge-acquisition shell for the automatic generation of knowledge-acquisition tools. </title> <journal> Knowledge Acquisition, </journal> <volume> 4(2) </volume> <pages> 171-196, </pages> <year> 1992. </year>
Reference: [ Stefik, 1981 ] <author> Mark Stefik. </author> <title> Planning with constraints (MOLGEN: Part 1.). </title> <journal> Artificial Intelligence, </journal> <volume> 16 </volume> <pages> 111-140, </pages> <year> 1981. </year>
Reference-contexts: Restriction enzymes are a kind of enzyme that cut DNA structures. Loom uses these definitions to classify instances into the classes where they belong based on the properties of each instance. 1 This domain models the design of gene cloning experiments and was based on the work on MOLGEN <ref> [ Stefik, 1981 ] </ref> . These experiments use bacteria as a biological system for synthesizing a protein (e.g., insulin).
Reference: [ Swartout and Gil, 1995 ] <author> Bill Swartout and Yolanda Gil. </author> <title> EXPECT: Explicit Representations for Flexible Acquisition. </title> <booktitle> In Proceedings of the Ninth Knowledge-Acquisition for Knowledge-Based Systems Workshop, </booktitle> <address> Banff, Alberta, Canada, </address> <year> 1995. </year> <month> 17 </month>
Reference-contexts: Thus, it becomes essential that our KA tools understand the consequences of each kind of change that the user may initiate, detect any harmful side-effects that can be introduced in the system, and guide the user in resolving them. We are developing the EXPECT framework <ref> [ Swartout and Gil, 1995 ] </ref> to support users in modifying both factual and problem-solving knowledge. In EXPECT, problem-solving methods are explicitly represented and users can make fine-grained changes to their definitions. <p> Throughout this process, EXPECT propagates the types of the arguments of the top-level goal performing an elaborate form of partial evaluation supported by Loom's reasoning capabilities. During this process, EXPECT derives the interdependencies between the domain facts and the problem-solving methods. See <ref> [ Swartout and Gil, 1995, Gil, 1994 ] </ref> for a description of how this process supports EXPECT's knowledge acquisition tool. 2.2 Modifying EXPECT's Knowledge Bases This section describes EXPECT's basic knowledge modification commands and a motivating example.
References-found: 15

