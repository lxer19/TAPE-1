URL: http://www-icparc.doc.ic.ac.uk/papers/an_instance_of_adaptive_constraint_propa.ps
Refering-URL: http://www-icparc.doc.ic.ac.uk/papers.html
Root-URL: 
Email: Email: fhhe,mgw,ebrg @doc.ic.ac.uk  
Title: An Instance of Adaptive Constraint Propagation  
Author: Hani El Sakkout, Mark G. Wallace, and E. Barry Richards 
Note: AFR and the validity of adaptive propagation in general.  
Address: College, London SW7 2AZ, United Kingdom.  
Affiliation: IC-Parc, Imperial  
Abstract: Constraint propagation algorithms vary in the strength of propagation they apply. This paper investigates a simple configuration for adaptive propagation the process of varying the strength of propagation to reflect the dynamics of search. We focus on two propagation methods, Arc Consistency (AC) and Forward Checking (FC). AC-based algorithms apply a stronger form of propagation than FC-based algorithms; they invest greater computational effort to detect inconsistent values earlier. The relative payoff of maintaining AC during search as against FC may vary for different constraints and for different intermediate search states. We present a scheme for Adaptive Arc Propagation (AAP) that allows the flexible combination of the two methods. Meta-level reasoning and heuristics are used to dynamically distribute propagation effort between the two. One instance of AAP, Anti-Functional Reduction (AFR), is described in detail here. AFR achieves precisely the same propagation as a pure AC algorithm while significantly improving its average performance. The strategy is to gradually reduce the scope of AC propagation during backtrack search to exclude those arcs that may be subsequently handled as effectively by FC. Experimental results confirm the power of 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> C. Bessiere. </author> <title> Arc-consistency and arc-consistency again. </title> <journal> Artificial Intelligence, </journal> <volume> 65 </volume> <pages> 179-190, </pages> <year> 1994. </year>
Reference-contexts: While AC-4's over-eager constraint checking has drawn deserved criticism, when used for maintaining arc consistency (MAC-4) it performs all constraint checking in the preprocessing phase avoiding the need for explicit constraint checks during the label-update steps of backtracking search <ref> [16, 1, 10, 11] </ref>. This is clearly advantageous when trying to minimize the backtrack search time. 3.1 AAP Initialization In addition to initialising the network and the propagation method data structures the initialization scheme of AAP applies the list creation function InitList inst for each arc (see Fig. 2).
Reference: 2. <author> C. Bessiere, E. Freuder, and J-C. Regin. </author> <title> Using inference to reduce arc consistency computation. </title> <booktitle> In IJCAI-95, </booktitle> <pages> pages 592-598, </pages> <address> Montreal, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: 1 Introduction 1.1 Background The strategy of utilizing meta-level knowledge inference to reduce the computation required to achieve full Arc Consistency in a constraint network has been shown to be successful <ref> [15, 5, 2] </ref>. However, the algorithms suggested assume that constraint characteristics are known at the start of the search. <p> In the interests of simplicity, the general AC-5 scheme has been adopted in AAP. An even more general scheme such as AC-Inference could have been used as a basis for AAP; it allows the possibility of the lazy evaluation of constraints to minimize constraint checks <ref> [2] </ref>. However, we do not explore this possibility here.
Reference: 3. <author> ECLiPSe version 3.4 user manual, </author> <month> july. </month> <type> Technical report, </type> <institution> ECRC, </institution> <year> 1995. </year>
Reference-contexts: Almost all timeouts were caused by FC solving relatively unconstrained problems (cf. exceptionally hard problems [12]). Timeouts were not penalized. The algorithms were implemented in the ECL i PS e Constraint Logic Programming environment <ref> [3] </ref>. 5.2 Results Figures 7-11 compare AC, FC and AFR in terms of average execution time in CPU seconds. AFR shows the smallest increase with increasing domain size and number of variables (Figs. 7, 8).
Reference: 4. <author> H. El Sakkout. </author> <title> Extending finite domain propagation for repair. </title> <type> Technical report, </type> <institution> IC-Parc, </institution> <year> 1995. </year>
Reference-contexts: Average time (10,000 trials) versus P constriction Fig. 12. Percentage improvement in time/operations versus average backtracks other variables and arcs to "wake up". This is another example of propagation realigning to reflect the dynamics of search, in this case the search for consistent repairs to an existing solution <ref> [4] </ref>. Acknowledgements. Many thanks to all those at IC-Parc who have contributed to the writing of this paper through their helpful discussions and criticism. Carmen Gervet and Robert Rodosek deserve particular thanks for their useful feedback.
Reference: 5. <author> E.C. Freuder. </author> <title> Using metalevel knowledge to reduce constraint checking. </title> <booktitle> In Constraint Processing: Selected Papers from the ECAI'94 Workshop. </booktitle> <publisher> Springer, </publisher> <year> 1995. </year>
Reference-contexts: 1 Introduction 1.1 Background The strategy of utilizing meta-level knowledge inference to reduce the computation required to achieve full Arc Consistency in a constraint network has been shown to be successful <ref> [15, 5, 2] </ref>. However, the algorithms suggested assume that constraint characteristics are known at the start of the search.
Reference: 6. <author> S.W. Golomb and L.D. Baumert. </author> <title> Backtrack programming. </title> <journal> Journal of the ACM, </journal> <volume> 12 </volume> <pages> 516-524, </pages> <year> 1965. </year>
Reference-contexts: Depth-first backtracking tree search enhanced with Forward Checking (FC) or maintained Arc Consistency (AC) comprises the repeated application of two alternating steps: labelling (the assignment to a variable of a value from its domain) and constraint propagation (the deletion of inconsistent values from the domains of unassigned variables) <ref> [6, 8, 9] </ref>. Hence a single application of the two-step label-propagate process results in a transformation of the original problem to a sub-problem with one or more reduced domains. Any search decisions (variable assignments) may render initial meta-knowledge (about structure, tightness, density, etc.) obsolete, since sub-problems have different characteristics.
Reference: 7. <author> O. Hansson and A. Mayer. </author> <title> A decision-theoretic scheduler for space telescope applications. In Intelligent Scheduling. </title> <publisher> Morgan Kaufmann, </publisher> <year> 1994. </year>
Reference-contexts: An instance demonstrating the effectiveness of using up-to-date meta-knowledge to improve the performance of the search algorithm is found in the popular first fail heuristic, often used in conjunction with FC [8]. Other dynamic meta-level heuristics have been found to achieve significant performance gains <ref> [13, 7] </ref>. All these have adapted algorithm behaviour by focussing search on promising sub-problems through variable and value ordering. As far as we know little or no research has been conducted into the utility of dynamically altering the extent of propagation deployed by the algorithm.
Reference: 8. <author> R.M. Haralick and G.L. Elliot. </author> <title> Increasing tree search efficiency for constraint satisfaction problems. </title> <journal> Artificial Intelligence, </journal> <volume> 14 </volume> <pages> 263-314, </pages> <month> October </month> <year> 1980. </year>
Reference-contexts: Depth-first backtracking tree search enhanced with Forward Checking (FC) or maintained Arc Consistency (AC) comprises the repeated application of two alternating steps: labelling (the assignment to a variable of a value from its domain) and constraint propagation (the deletion of inconsistent values from the domains of unassigned variables) <ref> [6, 8, 9] </ref>. Hence a single application of the two-step label-propagate process results in a transformation of the original problem to a sub-problem with one or more reduced domains. Any search decisions (variable assignments) may render initial meta-knowledge (about structure, tightness, density, etc.) obsolete, since sub-problems have different characteristics. <p> An instance demonstrating the effectiveness of using up-to-date meta-knowledge to improve the performance of the search algorithm is found in the popular first fail heuristic, often used in conjunction with FC <ref> [8] </ref>. Other dynamic meta-level heuristics have been found to achieve significant performance gains [13, 7]. All these have adapted algorithm behaviour by focussing search on promising sub-problems through variable and value ordering.
Reference: 9. <author> A.K. Mackworth. </author> <title> Consistency in networks of relations. </title> <journal> Artificial Intelligence, </journal> <volume> 8(1) </volume> <pages> 99-118, </pages> <year> 1977. </year>
Reference-contexts: Depth-first backtracking tree search enhanced with Forward Checking (FC) or maintained Arc Consistency (AC) comprises the repeated application of two alternating steps: labelling (the assignment to a variable of a value from its domain) and constraint propagation (the deletion of inconsistent values from the domains of unassigned variables) <ref> [6, 8, 9] </ref>. Hence a single application of the two-step label-propagate process results in a transformation of the original problem to a sub-problem with one or more reduced domains. Any search decisions (variable assignments) may render initial meta-knowledge (about structure, tightness, density, etc.) obsolete, since sub-problems have different characteristics.
Reference: 10. <author> R. Mohr and T.C. Henderson. </author> <title> Arc and path consistency revisited. </title> <journal> Artificial Intelligence, </journal> <volume> 28 </volume> <pages> 225-233, </pages> <year> 1986. </year>
Reference-contexts: In addition the example matrix is annotated with the quantities of ones in a given row. These are usually referred to in the Arc Consistency literature as the support and denoted here by S X (y i ) <ref> [10] </ref>. In our comparison of Arc Consistency and Forward Checking the important quantity is the number of zeros; we call this quantity the support-complement. <p> While AC-4's over-eager constraint checking has drawn deserved criticism, when used for maintaining arc consistency (MAC-4) it performs all constraint checking in the preprocessing phase avoiding the need for explicit constraint checks during the label-update steps of backtracking search <ref> [16, 1, 10, 11] </ref>. This is clearly advantageous when trying to minimize the backtrack search time. 3.1 AAP Initialization In addition to initialising the network and the propagation method data structures the initialization scheme of AAP applies the list creation function InitList inst for each arc (see Fig. 2).
Reference: 11. <author> D. Sabin and E.C. Freuder. </author> <title> Contradicting conventional wisdom in constraint satisfaction. </title> <booktitle> In ECAI-94. 11th European Conference on Artificial Intelligence, </booktitle> <pages> pages 125-129, </pages> <address> Amsterdam, </address> <month> August </month> <year> 1994. </year>
Reference-contexts: These hybridizations have been static in the sense that they apply FC and AC in specific phases or to specific sets of constraints, and do not update their configuration according to the dynamics of the search. Such hybridizations seem to be less effective than pure AC for hard problems <ref> [11] </ref>. One simple instance of the general framework, Anti-Functional Reduction (AFR), is described in detail here. The meta-level reasoning applied allows AAP to achieve precisely the same propagation as a pure AC algorithm while significantly improving its average performance. <p> While AC-4's over-eager constraint checking has drawn deserved criticism, when used for maintaining arc consistency (MAC-4) it performs all constraint checking in the preprocessing phase avoiding the need for explicit constraint checks during the label-update steps of backtracking search <ref> [16, 1, 10, 11] </ref>. This is clearly advantageous when trying to minimize the backtrack search time. 3.1 AAP Initialization In addition to initialising the network and the propagation method data structures the initialization scheme of AAP applies the list creation function InitList inst for each arc (see Fig. 2).
Reference: 12. <author> B.M. Smith and S. A. Grant. </author> <title> Sparse constraint graphs and exceptionally hard problems. </title> <booktitle> In IJCAI-95, </booktitle> <pages> pages 646-651, </pages> <address> Montreal, </address> <month> August </month> <year> 1995. </year>
Reference-contexts: Each possible combination of problem parameters was tested 100 times. All trials were conducted on a Sun Sparcstation 20 with 100 CPU seconds timeout per trial. Almost all timeouts were caused by FC solving relatively unconstrained problems (cf. exceptionally hard problems <ref> [12] </ref>). Timeouts were not penalized. The algorithms were implemented in the ECL i PS e Constraint Logic Programming environment [3]. 5.2 Results Figures 7-11 compare AC, FC and AFR in terms of average execution time in CPU seconds.
Reference: 13. <author> Andrew B. Philips Steven Minton, Mark D. Johnston and Philip Laird. </author> <title> Minimizing conflicts: a heuristic repair method for constraint satisfaction and scheduling problems. </title> <journal> Artificial Intelligence, </journal> <volume> 58 </volume> <pages> 161-205, </pages> <year> 1992. </year> <title> Minconfict heuristic, </title> <publisher> CSPs. </publisher>
Reference-contexts: An instance demonstrating the effectiveness of using up-to-date meta-knowledge to improve the performance of the search algorithm is found in the popular first fail heuristic, often used in conjunction with FC [8]. Other dynamic meta-level heuristics have been found to achieve significant performance gains <ref> [13, 7] </ref>. All these have adapted algorithm behaviour by focussing search on promising sub-problems through variable and value ordering. As far as we know little or no research has been conducted into the utility of dynamically altering the extent of propagation deployed by the algorithm.
Reference: 14. <author> Edward Tsang. </author> <title> Foundations of Constraint Satisfaction. </title> <publisher> Academic Press, </publisher> <year> 1993. </year>
Reference-contexts: We describe the exact conditions under which Arc Consistency is superior, restricting our analysis to binary constraint arcs. 2.1 Basic Notation For a definition of the Constraint Satisfaction Problem (CSP) see <ref> [14] </ref>.
Reference: 15. <author> P. Van Hentenryck, Y. Deville, and C. Teng. </author> <title> A generic arc-consistency algorithm and its specializations. </title> <journal> Artificial Intelligence, </journal> <volume> 57 </volume> <pages> 291-321, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction 1.1 Background The strategy of utilizing meta-level knowledge inference to reduce the computation required to achieve full Arc Consistency in a constraint network has been shown to be successful <ref> [15, 5, 2] </ref>. However, the algorithms suggested assume that constraint characteristics are known at the start of the search. <p> The class of constraints constr XY that have anti-functional arc XY and arc Y X are known as anti-functional constraints <ref> [15] </ref>. <p> This is justified from our point of view because our aim is to reduce the time spent on backtrack search and arc consistency maintenance while solving large-scale problems, and our focus has been on applying algorithms that are AC-4 instances of the AC-5 scheme <ref> [15] </ref>. While AC-4's over-eager constraint checking has drawn deserved criticism, when used for maintaining arc consistency (MAC-4) it performs all constraint checking in the preprocessing phase avoiding the need for explicit constraint checks during the label-update steps of backtracking search [16, 1, 10, 11].
Reference: 16. <author> R.J. Wallace. </author> <title> Why ac-3 is almost always better than ac-4 for establishing arc consistency in csps. </title> <booktitle> In IJCAI-93, </booktitle> <pages> pages 239-245, </pages> <address> Chambery, France, </address> <month> August </month> <year> 1993. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: While AC-4's over-eager constraint checking has drawn deserved criticism, when used for maintaining arc consistency (MAC-4) it performs all constraint checking in the preprocessing phase avoiding the need for explicit constraint checks during the label-update steps of backtracking search <ref> [16, 1, 10, 11] </ref>. This is clearly advantageous when trying to minimize the backtrack search time. 3.1 AAP Initialization In addition to initialising the network and the propagation method data structures the initialization scheme of AAP applies the list creation function InitList inst for each arc (see Fig. 2).
References-found: 16

