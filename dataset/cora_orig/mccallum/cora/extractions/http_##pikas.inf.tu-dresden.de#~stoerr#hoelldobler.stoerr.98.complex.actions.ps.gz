URL: http://pikas.inf.tu-dresden.de/~stoerr/hoelldobler.stoerr.98.complex.actions.ps.gz
Refering-URL: 
Root-URL: 
Email: Email: fsh,hapsg@inf.tu-dresden.de  
Title: Reasoning about Complex Actions  
Author: Steffen Holldobler and Hans-Peter Storr 
Address: D-01062 Dresden Germany  
Affiliation: Artificial Intelligence Institute Dresden University of Technology  
Abstract: Many problems addressed within the field of Cognitive Robotics and related areas can only be solved by complex plans including conditional and recursive actions as well as non-deterministic choice operators. In this paper we present a planning language which allows for the specification of complex plans. We define its semantics and give a provably complete and correct completed equational logic program with an unification complete equational theory. The approach is independent of the representation of states; they may be sets of propositional fluents as in the situation calculus or multisets of resources as in the fluent calculus. Finally, we give an instantiation within the fluent calculus. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Giacomo, G. D.; Reiter, R.; and Soutchanski, M. </author> <year> 1998. </year> <title> Execution monitoring of high-level robot programs. In Common Sense '98, </title> <booktitle> The Fourth Symposium on Logical Formalizations of Commonsense Reasoning, </booktitle> <pages> 277-297. </pages> <institution> University of London: Queen Mary and Westfield College. </institution>
Reference-contexts: What precisely should a robot do if it observes an unexpected state change in the middle of a plan execution? First solutions to this problem were presented in <ref> (Giacomo, Reiter, & Soutchanski 1998) </ref>. The problem itself is not trivial and good solutions depend very likely on specific domains since from a theoretical point of view replanning is as complex as planning in the worst case.
Reference: <author> Groe, G.; Holldobler, S.; and Schneeberger, J. </author> <year> 1996. </year> <title> Linear deductive planning. </title> <journal> Journal of Logic and Computation 6(2) </journal> <pages> 233-262. </pages>
Reference-contexts: Recently, White translated Golog into an extended linear logic (White 1998). While the transformation seems to be quite straightforward, the variant of linear logic used by White is non-standard. On the other hand, there is a close relation between the fluent calculus and linear logic as formally shown in <ref> (Groe, Holldobler, & Schneeberger 1996) </ref>. Since the fluent calculus admits a standard and well understood semantics it seems to be preferable to the corresponding fragments of linear logic. Open Problems and Future Research We intend to use the planning language presented in this paper to program autonomous robots.
Reference: <author> Holldobler, S., and Schneeberger, J. </author> <year> 1990. </year> <title> A new deductive approach to planning. New Generation Computing 8 225-244. </title> <booktitle> A short version appeared in the Proceedings of the German Workshop on Artificial Intelligence, Informatik Fachberichte 216, </booktitle> <pages> pages 63-73, </pages> <year> 1989. </year>
Reference-contexts: Up to this point the whole approach is developed independently of a concrete representation of states. We instantiate our approach by specifying states as multisets of fluents. This leads to a formalization of reasoning about complex plans in the fluent calculus <ref> (Holldobler & Schnee-berger 1990) </ref>. Finally, we relate our solution to other approaches known from the literature and discuss some open problems and outline future research. The Omelette Baking Problem A cook has a finite supply of eggs, at least one of which is good, and a saucer. <p> In order to completely solve the omelette baking problem, we have to choose an appropriate representation. We opt for the fluent calculus <ref> (Holldobler & Schneeberger 1990) </ref>, a purely first order formalization, in which the frame problem is solved without the need to state any frame axioms or laws of inertia. Within the fluent calculus, a state is a multiset of fluents.
Reference: <author> Holldobler, S., and Thielscher, M. </author> <year> 1995. </year> <title> Computing change and specificity with equational logic programs. </title> <journal> Annals of Mathematics and Artificial Intelligence 14 </journal> <pages> 99-133. </pages>
Reference-contexts: In order to reason about negated equalities, this theory is turned into a so-called unification complete theory AC1 fl . AC1 fl is then built into the unification computation and SLDENF-resolution can be used to determine whether a query follows from a normal logic program (see <ref> (Holldobler & Thielscher 1995) </ref>). There is a straightforward mapping t from multisets of fluents to their corresponding term representations.
Reference: <author> Kennedy, C. M. </author> <year> 1998. </year> <title> A conceptual foundation for autonomous learning in unforeseen situations. </title> <type> Technical Report WV-98-01, </type> <institution> Computer Science Department, Dresden University of Technology. (forthcoming). </institution>
Reference-contexts: While moving around a block, the block slips out of the robot's arm, hits the ground and breaks into three parts. What should the robot do if it has never learned anything about broken blocks? An approach to this problem can be found in <ref> (Kennedy 1998) </ref> which proposes an architecture for detecting the "unusualness" of an event on the basis of distinctions between model-based anticipations and ac tual reality.
Reference: <author> Levesque, H. J.; Reiter, R.; Lesperance, Y.; Lin, F.; and Scherl, R. B. </author> <year> 1994. </year> <title> Golog: a logic programming language for dynamic domains. </title> <journal> Journal of Logic Programming </journal> 19(20) 1-25. 
Reference-contexts: (s g ) : (The proof is straightforward by case analysis.) A Logical Formalization of Complex Plans Let T be a representation of states as terms and t be a mapping from S to T assigning to each state its 1: This is similar to the (x) construct of Golog <ref> (Levesque et al. 1994) </ref>. term representation. 2 Furthermore, assume that con-ditions are represented as terms and let the predicate holds (c; s) denote the fact that the condition c holds in the state s and let goalstate (s) represent the goal g of the planning problem. <p> They focus on the generation of recursive plans by refinement of domain specific plan schemata with the help of the interactive theorem prover KIV. A close relation exists to the situation calculus based Golog language defined by Levesque et al. <ref> (Levesque et al. 1994) </ref>. The core idea of Golog is to give the user a means of specifying high level programs, which is translated into a second order logic formula. <p> On the other hand, this avoids of complexity in comparison to (Manna & Waldinger 1987) and avoids the use of second order formulas as in <ref> (Levesque et al. 1994) </ref> for this purpose. * For the sceptical agent, who wants to know in advance that the plan execution terminates after n steps, it is sufficient to use the n -th approximation of the transitive closure of the ; relation describing the stepwise execution of the plan.
Reference: <author> Levesque, H. J. </author> <year> 1996. </year> <title> What is planning in the presence of sensing? Technical report, </title> <institution> Department of Computer Science, University of Toronto, Canada. email: hector@cs.toronto.edu. </institution>
Reference-contexts: His goal is to have a good egg in the saucer and nothing else. This is simplified version of a problem presented in <ref> (Levesque 1996) </ref>.
Reference: <author> Lloyd, J. W. </author> <year> 1987. </year> <title> Foundations of Logic Programming. </title> <publisher> Springer. </publisher>
Reference: <author> Manna, Z., and Waldinger, R. </author> <year> 1987. </year> <title> How to clear a block: A theory of plans. </title> <journal> Journal of Automated Reasoning 4(3) </journal> <pages> 343-377. </pages>
Reference-contexts: The Prolog program is given in the Appendix. Relation to Other Approaches There is a number of other approaches to the problem of reasoning about complex plans. The work of Manna and Waldinger <ref> (Manna & Waldinger 1987) </ref> is in a sense quite uncompromising. <p> Our approach avoids the use of second order con structs for two reasons: * The procedure definitions are translated into clauses of the logical formulas instead of being terms as in <ref> (Manna & Waldinger 1987) </ref>. With this translation one loses the possibility of quantification over procedure definitions and thus it is impossible to generate plans by proving a formula stating the existence of a plan. On the other hand, this avoids of complexity in comparison to (Manna & Waldinger 1987) and avoids <p> of being terms as in <ref> (Manna & Waldinger 1987) </ref>. With this translation one loses the possibility of quantification over procedure definitions and thus it is impossible to generate plans by proving a formula stating the existence of a plan. On the other hand, this avoids of complexity in comparison to (Manna & Waldinger 1987) and avoids the use of second order formulas as in (Levesque et al. 1994) for this purpose. * For the sceptical agent, who wants to know in advance that the plan execution terminates after n steps, it is sufficient to use the n -th approximation of the
Reference: <author> McCarthy, J., and Hayes, P. J. </author> <year> 1969. </year> <title> Some philosophical problems from the standpoint of Artificial Intelligence. </title> <editor> In Meltzer, B., and Michie, D., eds., </editor> <booktitle> Machine Intelligence 4. </booktitle> <publisher> Edinburgh University Press. </publisher> <pages> 463 - 502. </pages>
Reference: <author> McCarthy, J. </author> <year> 1963. </year> <title> Situations and actions and causal laws. </title> <booktitle> Stanford Artificial Intelligence Project: </booktitle> <volume> Memo 2. </volume>
Reference: <author> Reiter, R. </author> <year> 1991. </year> <title> The frame problem in the situation calculus: A simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In Lifschitz, V., ed., </editor> <booktitle> Artificial Intelligence and Mathematical Theory of Computation | Papers in Honor of John Mc-Carthy. </booktitle> <publisher> Academic Press. </publisher> <pages> 359-380. </pages>
Reference: <author> Stephan, W., and Biundo, S. </author> <year> 1993. </year> <title> A new logical framework for deductive planning. </title> <booktitle> In Proceedings of the International Joint Conference on Artificial Intelligence. </booktitle> <pages> 32. </pages>
Reference: <author> Stephan, W., and Biundo, S. </author> <year> 1995. </year> <title> Deduction-based refinement planning. </title> <type> Technical Report RR-95-13, </type> <institution> Germen Research Center for Artificial Intelligence (DFKI), fstephan,biundogddfki.uni-sb.de. </institution>
Reference: <author> Storr, H.-P. </author> <year> 1997. </year> <title> Bedingte und Rekursive Aktionen im Fluent-Kalkul. </title> <type> Master's thesis, </type> <institution> Dresden University of Technology. </institution> <note> (in German). </note>
Reference-contexts: The predicates causes and holds can now be represented by the clauses causes (c ffi r; a; e ffi r) action (c; a; e): (10) and holds (&gt;; s): holds (badegg ; e b ffi s): (11) 5: The full proof can be obtained along the lines presented in in <ref> (Storr 1997) </ref>. 6: The symbols used to denote sets and the usual operations on sets are also used here to denote multisets and the operations defined on multisets, but we stack a on top of them. respectively, where the constant &gt; represents the truth value "true".
Reference: <author> White, G. </author> <year> 1998. </year> <title> Golog and linear logic programming. </title> <type> Technical report, </type> <institution> Dept. Computer Science, Queen Mary and Westfield College, University of Lon-don. </institution> <note> http://www.dcs.qmw.ac.uk/~graham. </note>
Reference-contexts: Recently, White translated Golog into an extended linear logic <ref> (White 1998) </ref>. While the transformation seems to be quite straightforward, the variant of linear logic used by White is non-standard. On the other hand, there is a close relation between the fluent calculus and linear logic as formally shown in (Groe, Holldobler, & Schneeberger 1996).
References-found: 16

