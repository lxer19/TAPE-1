URL: http://www.daimi.aau.dk/~ocaprani/RayTrace/article/article.ps
Refering-URL: http://www.daimi.aau.dk/~ocaprani/RayTrace/RayTrace.html
Root-URL: http://www.daimi.aau.dk
Title: Robust and Efficient Ray Intersection of Implicit Surfaces  
Author: Ole Caprani, Lars Hvidegaard, Mikkel Mortensen, and Thomas Schneider 
Date: December 4, 1998  
Address: Denmark  
Affiliation: Computer Science Department Aarhus University,  
Abstract: The generation of ray traced images of a variety of surfaces plays a central role in computer graphics. One of the main operations in ray tracing is the calculation of intersections between rays and surfaces. In case of implicitly given surfaces the intersection problem can be formulated as that of finding the smallest non-negative root of an equation in one variable. If the root finding is carried out by means of conventional numerical methods based on point sampling (such as bisection, regula-falsi or Newton) the resulting image can be wrong, e.g. when the surface is thin the ray may "miss" the surface, which may result in an image with background color spots on the surface. To obtain robust intersection detection, methods based either on Lipschitz constants for the function and its derivative or on interval inclusions for the function and its derivative have been suggested. In this paper robust methods are obtained with interval inclusions in a variant of Alefeld-Hansens globally convergent method for computing and bounding all the roots of a single equation. Alefeld-Hansens method has been modified so instead of searching for all roots, a recursive depth-first search is carried out to obtain the smallest non-negative root. When compared to other methods suggested, it is found that this variant of Alefeld-Hansens method is not only robust but also an efficient method for finding the ray intersections. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> G. Alefeld, </author> <title> Eine Modifikation des Newtonverfarens zur Bestimmung der reellen Nullstellen einer reellen Funktion, </title> <journal> Numeriche Matematik, </journal> <volume> ZAMM 50, T32-T33, </volume> <year> 1970. </year>
Reference-contexts: This is called divergence and very often it occurs after only a few iterations as recently noted by Alefeld, [2]. In case 0 2 F 0 (X) and 0 =2 f (m (X)) Newtons method can be extended as suggested by Alefeld, <ref> [1] </ref>, and Hansen, [6]. <p> In case 0 2 F 0 (X) and 0 =2 f (m (X)) Newtons method can be extended as suggested by Alefeld, [1], and Hansen, [6]. With F 0 (X) = [c; d ] we can define: 1 = &lt; <ref> [ 1=d; 1 ] </ref> if c = 0 [ 1; 1=c ] [ [ d; 1 ] otherwise and by employing the extended interval arithmetic described in [7], we obtain the Alefeld-Hansen operator as follows: AH (X) = [ m (X) F 0 (X) The result of applying the operator to <p> In case 0 2 F 0 (X) and 0 =2 f (m (X)) Newtons method can be extended as suggested by Alefeld, [1], and Hansen, [6]. With F 0 (X) = [c; d ] we can define: 1 = &lt; [ 1=d; 1 ] if c = 0 <ref> [ 1; 1=c ] </ref> [ [ d; 1 ] otherwise and by employing the extended interval arithmetic described in [7], we obtain the Alefeld-Hansen operator as follows: AH (X) = [ m (X) F 0 (X) The result of applying the operator to an interval can be the empty set, a <p> With F 0 (X) = [c; d ] we can define: 1 = &lt; [ 1=d; 1 ] if c = 0 [ 1; 1=c ] <ref> [ [ d; 1 ] </ref> otherwise and by employing the extended interval arithmetic described in [7], we obtain the Alefeld-Hansen operator as follows: AH (X) = [ m (X) F 0 (X) The result of applying the operator to an interval can be the empty set, a single interval X 0 <p> With F 0 (X) = [c; d ] we can define: 1 = &lt; [ 1=d; 1 ] if c = 0 [ 1; 1=c ] [ <ref> [ d; 1 ] </ref> otherwise and by employing the extended interval arithmetic described in [7], we obtain the Alefeld-Hansen operator as follows: AH (X) = [ m (X) F 0 (X) The result of applying the operator to an interval can be the empty set, a single interval X 0 or
Reference: [2] <author> G. Alefeld, </author> <title> On the Speed of Divergence of some Newton-like Enclosure Methods, Extended Abstract, </title> <institution> Interval'98, Nanjing University, P. R. China. </institution>
Reference-contexts: If there is no root in X then N (X) " X will be empty after a finite number of steps, [6]. This is called divergence and very often it occurs after only a few iterations as recently noted by Alefeld, <ref> [2] </ref>. In case 0 2 F 0 (X) and 0 =2 f (m (X)) Newtons method can be extended as suggested by Alefeld, [1], and Hansen, [6].
Reference: [3] <author> G. Alefeld, J. Hertzberger, </author> <title> Introduction to Interval Computations, </title> <publisher> Academic Press, </publisher> <year> 1983. </year>
Reference-contexts: This is shown in Figure 7. This search method has also been suggested by Alefeld and Hertzberger, p.68, <ref> [3] </ref>, "In this manner we calculate the individual zeros of f in order from left to right".
Reference: [4] <author> A. S. Glassner(ed.), </author> <title> An Introduction to Ray Tracing, </title> <publisher> Academic Press, </publisher> <year> 1989. </year>
Reference-contexts: 1 Introduction Ray tracing is one of the most popular methods for generating photo-realistic computer graphics images, see <ref> [4] </ref>. The basic concept of the method is illustrated in Figure 1. Given a viewpoint and a 2D screen we want to generate a 2D image on the screen of a scene containing a number of 3D objects and light sources. <p> Second, the calculation should be efficient, because the ray intersection calculation is a major contribution to the computation time in the implementation of a ray tracing method. In the following we consider ray intersection calculation only for implicit given surfaces, <ref> [4] </ref>. We describe how robust and efficient ray intersection calculation can be performed based on interval methods, [13]. Throughout the paper we use a Steiner surface, [5], as the only object in our scene.
Reference: [5] <author> P. Hanrahan, </author> <title> A Survey of Ray-Surface Intersection Algorithms, </title> <booktitle> in [4]. </booktitle>
Reference-contexts: In the following we consider ray intersection calculation only for implicit given surfaces, [4]. We describe how robust and efficient ray intersection calculation can be performed based on interval methods, [13]. Throughout the paper we use a Steiner surface, <ref> [5] </ref>, as the only object in our scene. The Steiner surface is difficult to ray trace because it is very thin along the coordinate axes. A ray traced image of this surface is shown in Figure 2.
Reference: [6] <author> E. Hansen, </author> <title> Globally Convergent Interval Method for Computing and Bounding Real Roots , BIT, </title> <booktitle> p. </booktitle> <pages> 415-424, 18(1978). </pages>
Reference-contexts: Furthermore, any root in X is also in N (X) and hence the search for a ray intersection root in X will only have to consider N (X) " X. We also have that w (N (X) " X) &lt; 1=2 w (X), as e.g. proved in <ref> [6] </ref>, so the convergence to a root in X is always linear and often quadratic, [13]. If there is no root in X then N (X) " X will be empty after a finite number of steps, [6]. <p> w (N (X) " X) &lt; 1=2 w (X), as e.g. proved in <ref> [6] </ref>, so the convergence to a root in X is always linear and often quadratic, [13]. If there is no root in X then N (X) " X will be empty after a finite number of steps, [6]. This is called divergence and very often it occurs after only a few iterations as recently noted by Alefeld, [2]. In case 0 2 F 0 (X) and 0 =2 f (m (X)) Newtons method can be extended as suggested by Alefeld, [1], and Hansen, [6]. <p> finite number of steps, <ref> [6] </ref>. This is called divergence and very often it occurs after only a few iterations as recently noted by Alefeld, [2]. In case 0 2 F 0 (X) and 0 =2 f (m (X)) Newtons method can be extended as suggested by Alefeld, [1], and Hansen, [6].
Reference: [7] <author> E. Hansen, </author> <title> Global Optimization Using Interval Analysis, Pure and Applied Mathematics, </title> <publisher> Marcel Dekker, </publisher> <year> 1992. </year>
Reference-contexts: With F 0 (X) = [c; d ] we can define: 1 = &lt; [ 1=d; 1 ] if c = 0 [ 1; 1=c ] [ [ d; 1 ] otherwise and by employing the extended interval arithmetic described in <ref> [7] </ref>, we obtain the Alefeld-Hansen operator as follows: AH (X) = [ m (X) F 0 (X) The result of applying the operator to an interval can be the empty set, a single interval X 0 or two intervals X 0 and X 00 . <p> Alefeld-Hansen method, Figure 9. 3 min 13 sec Table 1: Calculation times for a 10800 pixel image of the Steiner surface obtained with the various ray trace methods. is similar to the method described by Hansen in <ref> [7] </ref> but instead of searching for all roots the recursive depth-first search of Figure 9 only results in the smallest root in the initial interval. <p> result := root (X 00 ) end end end ators. 12 6 Conclusion We have described how a robust and efficient ray intersection method can be obtained based on the interval method for computing and bounding real roots of a function of a single variable as described by Hansen in <ref> [7] </ref>. Furthermore, we have demonstrated that there is no reason not to use interval methods all the way, i.e. for both a safe isolation of the intersection root and for root refinement until the desired accuracy. The Alefeld-Hansen operator seems to be efficient for both root isolation and root refinement.
Reference: [8] <author> John C. Hart, </author> <title> Sphere tracing: a geometric method for the antialiased ray tracing of implicit surfaces, </title> <booktitle> The Visual Computer (1996) 12 </booktitle> <pages> 527-545. </pages>
Reference-contexts: This need for a robust ray intersection calculation has been argued e.g. by Toth, [17], for parametric surfaces and for implicit surfaces by Kalra and Barr, [10], Hart, <ref> [8] </ref>, and Mitchell, [12]. Second, the calculation should be efficient, because the ray intersection calculation is a major contribution to the computation time in the implementation of a ray tracing method. In the following we consider ray intersection calculation only for implicit given surfaces, [4].
Reference: [9] <author> D. W. Jensen, D. A. Reed, </author> <title> A Performance Analysis Exemplar: Parallel Ray Tracing, </title> <journal> Concurrency: Practice and Experience, </journal> <volume> vol. 4(2), </volume> <month> 119-141 (April </month> <year> 1992). </year>
Reference: [10] <author> D. Kalra, A. H. Barr, </author> <title> Guaranteed Ray Intersection with Implicit Surfaces, </title> <journal> Computer Graphics, </journal> <volume> Vol. 23, Nr. 3, </volume> <month> July </month> <year> 1989. </year>
Reference-contexts: The result is that the ray will "miss" the surface and the screen will show an image with holes in the surface. This need for a robust ray intersection calculation has been argued e.g. by Toth, [17], for parametric surfaces and for implicit surfaces by Kalra and Barr, <ref> [10] </ref>, Hart, [8], and Mitchell, [12]. Second, the calculation should be efficient, because the ray intersection calculation is a major contribution to the computation time in the implementation of a ray tracing method. In the following we consider ray intersection calculation only for implicit given surfaces, [4]. <p> A ray traced image of this surface is shown in Figure 2. This image was obtained using the interval based methods described in the following. 2 2 Ray Intersection Calculation Using the notation in <ref> [10] </ref>, the ray intersection calculation for an implicit surface can be formulated as follows. <p> drawing in two dimensions: very fine grained two-dimensional grids are needed to correctly locate the details of the contour curves. 4 Robust Intersection Methods for robust ray intersection calculation based on information about upper and lower bounds for the function and its derivative have been suggested by Kalra and Barr, <ref> [10] </ref>, and Mitchell, [12]. Kalra and Barr use Lipschitz constants for the function to make a robust test for non-existence of roots in a sample 5 method is based on root isolation by point sampling and root refinement by bisection.
Reference: [11] <author> O. Knuppel, </author> <title> PROFIL/BIAS A Fast Interval Library, </title> <booktitle> Computing 53, </booktitle> <month> 277-287 </month> <year> (1994). </year>
Reference-contexts: The implementation of the various methods has been carried out in C++ and the interval calculations have been based on the PROFIL/BIAS Interval Library, <ref> [11] </ref>. The same accuracy was used in all calculations. The calculation times for the different methods are shown in Table 1. The fastest method is the Alefeld-Hansen method. <p> This is because the explicit manipulation of floating point processor rounding modes takes only a small amount of time compared to the remaining parts of the interval routines in <ref> [11] </ref>.
Reference: [12] <author> Don P. Mitchell, </author> <title> Robust Ray Intersection with Interval Arithmetic, </title> <booktitle> In Proceedings of Graphics Interface '90, p. </booktitle> <pages> 68-74, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: This need for a robust ray intersection calculation has been argued e.g. by Toth, [17], for parametric surfaces and for implicit surfaces by Kalra and Barr, [10], Hart, [8], and Mitchell, <ref> [12] </ref>. Second, the calculation should be efficient, because the ray intersection calculation is a major contribution to the computation time in the implementation of a ray tracing method. In the following we consider ray intersection calculation only for implicit given surfaces, [4]. <p> in standard textbooks: Given a real function f of a single non-negative variable x, consider the equation: f (x) = 0 ; x 0: Determine if solutions exist to this equation and if solutions exist find the smallest solution, the ray intersection root. 3 Methods Based on Point Sampling Mitchell, <ref> [12] </ref>, has divided the ray intersection calculation into two steps: Root isolation and root refinement. Root isolation is that of finding an interval closest to zero known to contain one and only one root of the equation. <p> dimensions: very fine grained two-dimensional grids are needed to correctly locate the details of the contour curves. 4 Robust Intersection Methods for robust ray intersection calculation based on information about upper and lower bounds for the function and its derivative have been suggested by Kalra and Barr, [10], and Mitchell, <ref> [12] </ref>. Kalra and Barr use Lipschitz constants for the function to make a robust test for non-existence of roots in a sample 5 method is based on root isolation by point sampling and root refinement by bisection. <p> Mitchell use interval inclusions, [13], for the function and its derivative to obtain similar robust tests. The reason for Mitchell to choose the interval approach is that "it does not require a mathematical analysis of new surfaces to determine Lipschitz constants", p. 72, <ref> [12] </ref>. In both papers conventional numerical methods are used for the root refinement when the ray intersection root has been isolated. We will now describe the method suggested by Mitchell a little further. Mitchell's algorithm is shown in Figure 6.
Reference: [13] <author> R. Moore, </author> <title> Interval Analysis , Prentice Hall, </title> <address> Englewood Cliffs, NJ, </address> <year> 1966. </year>
Reference-contexts: In the following we consider ray intersection calculation only for implicit given surfaces, [4]. We describe how robust and efficient ray intersection calculation can be performed based on interval methods, <ref> [13] </ref>. Throughout the paper we use a Steiner surface, [5], as the only object in our scene. The Steiner surface is difficult to ray trace because it is very thin along the coordinate axes. A ray traced image of this surface is shown in Figure 2. <p> Mitchell use interval inclusions, <ref> [13] </ref>, for the function and its derivative to obtain similar robust tests. The reason for Mitchell to choose the interval approach is that "it does not require a mathematical analysis of new surfaces to determine Lipschitz constants", p. 72, [12]. <p> The non-existence test used by Mitchell in Step 1 was suggested by Moore in " a sort of "process of elimination" of regions or subintervals which we can determine do not contain any zeros of a given function.", <ref> [13] </ref>. The existence test of Step 2 based on opposite signs of an interval inclusion at the endpoints was also suggested by Moore and so was the recursive process of bisection in Step 3. So Mitchell's algorithm is very similar to interval methods already considered by Moore. <p> It will be demonstrated that this is not "more computational expensive" which was the reason Mitchell gave for using interval methods only for root isolation. In the following the notation of Moore, <ref> [13] </ref>, will be used. <p> By means of interval arithmetic, <ref> [13] </ref>, it is easy to obtain two interval inclusions F and F 0 for a rational function such as the one defining the Steiner surface. 4.1 Interval Bisection If we take only Step 1, Step 3 and Step 4 of Mitchell's algorithm we get an interval method that only use the <p> The reason is that the excess width in the estimate f (X) F (X) goes to zero linearly with the width of X, Theorem 4.4, <ref> [13] </ref>. In machine interval arithmetic we might reach the machine accuracy before we can disregard X, so in practise the result of the bisection search may be the left endpoint of an interval that does not contain a root of f. <p> 3D boxes similar to the 2D boxes used in Suffern and Fackerel, [16], for contour drawing in 2D. 4.2 Alefeld-Hansen Method If an interval inclusion F 0 of the derivative of f is available we can also base an interval ray intersection method on an interval version of Newtons method, <ref> [13] </ref>. When 0 =2 F 0 (X) we can define the interval Newton operator as: N (X) = m (X) F 0 (X) where m (X) is the midpoint of X. If N (X) " X = ; there is no root in X, [13]. <p> an interval version of Newtons method, <ref> [13] </ref>. When 0 =2 F 0 (X) we can define the interval Newton operator as: N (X) = m (X) F 0 (X) where m (X) is the midpoint of X. If N (X) " X = ; there is no root in X, [13]. This is a simple non-existence test. Furthermore, any root in X is also in N (X) and hence the search for a ray intersection root in X will only have to consider N (X) " X. <p> We also have that w (N (X) " X) &lt; 1=2 w (X), as e.g. proved in [6], so the convergence to a root in X is always linear and often quadratic, <ref> [13] </ref>. If there is no root in X then N (X) " X will be empty after a finite number of steps, [6]. This is called divergence and very often it occurs after only a few iterations as recently noted by Alefeld, [2].
Reference: [14] <author> S. P. Mudur, P. A. Koparkar, </author> <title> Interval Methods for Processing Geometric Objects, </title> <journal> IEEE Computer Graphics & Appl. </journal> <volume> 4, </volume> <pages> p. 7-17, </pages> <month> February </month> <year> 1984. </year> <month> 13 </month>
Reference: [15] <author> W. H. Press, et al., </author> <title> Numerical Recipies in C, </title> <publisher> Cambridge University Press, </publisher> <year> 1992. </year>
Reference-contexts: This will be called the ray intersection root of the equation. Figure 3 illustrates a ray intersection. Finding a root of a function in one variable is a standard numerical problem and methods can be found e.g. in <ref> [15] </ref>. <p> Root isolation is that of finding an interval closest to zero known to contain one and only one root of the equation. Root refinement is that of reducing the size of the isolated interval to any desired accuracy. In <ref> [15] </ref> methods for root isolation and root refinement rely on point sampling: Only use values of the function and perhaps its derivative at single points.
Reference: [16] <author> K. G. Suffern, E. D. Fackerell, </author> <title> Interval Methods in Computer Graphics, </title> <journal> Computers & Graphics, </journal> <volume> Vol. 15, Nr. 3, </volume> <pages> pp. 331-340, </pages> <year> 1991. </year>
Reference-contexts: The conclusion is obvious: Point sampling is no good. When we use a course grained one-dimensional grid we miss ray intersection roots, a fine grained grid results in a very inefficient root isolation.This observation is similar to the observation by Suffern and Fackerell, <ref> [16] </ref>, for contour drawing in two dimensions: very fine grained two-dimensional grids are needed to correctly locate the details of the contour curves. 4 Robust Intersection Methods for robust ray intersection calculation based on information about upper and lower bounds for the function and its derivative have been suggested by Kalra <p> One such method is to use intervals to bound the surface safely in a set of 3D boxes similar to the 2D boxes used in Suffern and Fackerel, <ref> [16] </ref>, for contour drawing in 2D. 4.2 Alefeld-Hansen Method If an interval inclusion F 0 of the derivative of f is available we can also base an interval ray intersection method on an interval version of Newtons method, [13].
Reference: [17] <author> D. L. Toth, </author> <title> On Ray Tracing Parametric Surfaces , SIGGRAPH 85, </title> <editor> p. </editor> <volume> 171-179, Vol 19, Nr. 3, </volume> <month> July </month> <year> 1985. </year> <month> 14 </month>
Reference-contexts: The result is that the ray will "miss" the surface and the screen will show an image with holes in the surface. This need for a robust ray intersection calculation has been argued e.g. by Toth, <ref> [17] </ref>, for parametric surfaces and for implicit surfaces by Kalra and Barr, [10], Hart, [8], and Mitchell, [12]. Second, the calculation should be efficient, because the ray intersection calculation is a major contribution to the computation time in the implementation of a ray tracing method.
References-found: 17

