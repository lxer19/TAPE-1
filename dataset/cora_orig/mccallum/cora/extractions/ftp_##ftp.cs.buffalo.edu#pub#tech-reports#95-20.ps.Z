URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/95-20.ps.Z
Refering-URL: ftp://ftp.cs.buffalo.edu/pub/tech-reports/README.html
Root-URL: 
Email: email: zaionc@cs.buffalo.edu  
Title: FIXPOINT TECHNIQUE FOR COUNTING TERMS IN TYPED CALCULUS 1  
Author: Marek Zaionc 
Abstract: Typed calculus with denumerable set of ground types is considered. The aim of the paper is to show procedure for counting closed terms in long normal forms. It is shown that there is a surprising correspondence between the number of closed terms and the fixpoint solution of the polynomial equation in some complete lattice. It is proved that counting of terms in typed lambda calculus can be reduced to the problem of finding least fixpoint for the system of polynomial equations. The algorithm for finding the least fixpoint of the system of polynomials is considered. By the well known Curry Howard isomorphism the result can be interpreted as a method for counting proofs in the implicational fragment of the propositional intuitionistic logic. The problem of number of terms was studied but never published by Ben- Yelles (see [3] ). Similarly in [4] it was proved that complexity of the question whether given type possess an infinite number of normal terms is polynomial space complete. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Arnold, D. Niwinski. </author> <title> Fixed point characterization of weak monadic logic definable sets of trees Tree Automata and Languages 1992, </title> <note> pp 159 -188. </note>
Reference-contexts: Proof: We start the proof with defining the sets DC (t ) of direct components of t . For ground type DC (A) = ;. For type t = n j=1 t [j] ! A DC (t ) = ft <ref> [1] </ref>; :::; t [n]g. The set C (t ) of all components of t is defined by allowing: t 2 C (t ) and if 2 C (t ) and arg () = n then [1]; :::; [n] 2 C (t ). <p> For type t = n j=1 t [j] ! A DC (t ) = ft <ref> [1] </ref>; :::; t [n]g. The set C (t ) of all components of t is defined by allowing: t 2 C (t ) and if 2 C (t ) and arg () = n then [1]; :::; [n] 2 C (t ). Obviously, for type t = n j=1 t [j] ! A we have C (t ) = 1 C (t [j])[ft g, and therefore for any type t C (t ) is finite. <p> Define x 0 0 = g ( ~ y 0 Thesis: (x 0 ; ~y 0 ) = (x 0 0 ; ~ y 0 Proof: This lemma is a well known fact in the fixpoint theory. Consult for example <ref> [1] </ref> (page 165, chapter 2.2 Vectorial Fixed Points) ( v ) Since g (~y) is a fixpoint of g ~y it means that g (~y) = f (g (~y); ~y). <p> There exists i arg (t ) such that t [i] ~ t and if k = arg (t [i]) &gt; 0 then there are closed terms G 1 ; :::; G k of types n j=1 t j ! t <ref> [i; 1] </ref>,..., n j=1 t j ! t [i; k], respectively, such that T = x 1 :::x n :x i (G 1 x 1 :::x n ):::(G k x 1 :::x n ) Proof. <p> By lemma 3.8 jt j = jt 0 j. Now, let we define the sequence of types -0 ; :::; -n by -0 = (<ref> [1] </ref>) i 1 ; :::; ([n]) i n ! A -j = [1]; :::; [j]; ([j + 1]) i j+1 ; :::; ([n]) i n ! A -n = ([1]); :::; ([n]) ! A We are going to prove by induction that all types -0 ; :::; -n are of the same size as t 0 = ([1]) i 1 ; :::; ([n]) <p> of the same size as t 0 = (<ref> [1] </ref>) i 1 ; :::; ([n]) i n ! A. Suppose it is true for -0 ; :::; -j . By appropriate per mutation we turn the type -j into form of type -0 j = ([j + 1]) i j+1 ; [1]; :::; [j]; ([j + 2]) i j+2 ; :::; ([n]) i n ! A. Utilizing lemma 3.7 we can turn -0 j into a same size type -00 j = ([j + 1]); [1]; :::; [j]; ([j + 2]) i j+2 ; :::; ([n]) i n ! A. <p> the type -j into form of type -0 j = ([j + 1]) i j+1 ; <ref> [1] </ref>; :::; [j]; ([j + 2]) i j+2 ; :::; ([n]) i n ! A. Utilizing lemma 3.7 we can turn -0 j into a same size type -00 j = ([j + 1]); [1]; :::; [j]; ([j + 2]) i j+2 ; :::; ([n]) i n ! A. The type -00 j can be per-mutated in to -j+1 .
Reference: [2] <author> W. Dekkers. </author> <title> Reducibility of types in Typed Lambda Calculus Information and Computation vol 77, </title> <note> No 2 (1988) pp 131- 137. </note>
Reference-contexts: Types t ' are equivalent if t and t . The relation ' is an equivalence relation. Equivalence classes are ordered by [t ] &gt; [] if t . Statman in [6] proved that equivalence classes are well ordered in ordinal !+3 (see also <ref> [2] </ref> ). It is easy to observe that equivalent types possess the same number of closed terms in normal forms. Therefore the following test is sufficient to decide the number of closed terms. First decide if the given type is an equivalent with respect to ' with type O.
Reference: [3] <institution> Private communication from Roger Hindlay. </institution> <note> Will appear in forthcoming book in 1995. </note>
Reference: [4] <author> S. Hirokawa. </author> <title> Infiniteness of Proof (ff) is polynomial space complete , private communication </title>
Reference: [5] <author> J.W. Lloyd. </author> <title> Foundations of Logic Programming, </title> <publisher> Springer- Verlag, </publisher> <year> 1984 </year>
Reference-contexts: But the least fixed point of F 0 may be characterized by T fx : F 0 (x) v xg (see <ref> [5] </ref> proposition 5.1 page 26). Hence ~ y 0 0 v y 0 .
Reference: [6] <author> R. Statman. </author> <title> On the existence of closed terms in the typed -calculus. </title> <editor> In: R. Hindley and J. Seldin, eds. </editor> <title> Combinatory Logic, Lambda Calculus and Formalism (Academic Press, </title> <address> New York, </address> <year> 1980). </year>
Reference-contexts: For a closed term T = x 1 :::x n :x i T 1 :::T k variable x i is called a heading. Long normal forms exist and are unique for fi conversions (compare <ref> [6] </ref>). 1 Supported by KBN research grant 0384/P4/93 2 Permanent address of the author is: Computer Science Department, Jagiellonian University Nawojki 11, 30-072 Krakow, Poland E-mail zaionc@ii.uj.edu.pl. <p> Counting closed terms in calculus with a single ground type The number of normal forms problem in the simplest case when the language of typed calculus is build over the type system based on single type can be reduced to the well known Statman hierarchy (see <ref> [6] </ref> ). Suppose the only ground type is O. <p> Types t ' are equivalent if t and t . The relation ' is an equivalence relation. Equivalence classes are ordered by [t ] &gt; [] if t . Statman in <ref> [6] </ref> proved that equivalence classes are well ordered in ordinal !+3 (see also [2] ). It is easy to observe that equivalent types possess the same number of closed terms in normal forms. Therefore the following test is sufficient to decide the number of closed terms.
Reference: [7] <author> R. Statman. </author> <title> On the Existence of closed terms in typed calculus II: </title> <booktitle> Transformations of unification problems Theoretical Computer Science 15 (1981) 329-338 </booktitle>
Reference: [8] <author> D.A. Wolfram. </author> <title> The Clausual Theory of Types, </title> <booktitle> Cambridge Tracts in Theoretical Computer Science 21, </booktitle> <publisher> Cambridge University Press 1993. </publisher>
Reference-contexts: For any ff 2 N by jt j ff we mean the number of closed terms T in long normal forms of the type t with the complexity (T ) not greater then ff. For more detailed treatment of typed lambda calculus see <ref> [8] </ref>. Definition 1.1 Type t is embeddable in if t ~ and there is a surjection f : f1; :::; arg (t )g ! f1; :::; arg ()g such that t [i] = [f (i)] for all i arg (t ).
Reference: [9] <author> M. Zaionc. </author> <title> Mechanical Procedure for Proof Construction via Closed Terms in Typed calculus Journal of Automated Reasoning 4 (1988) 173-190 13 </title>
References-found: 9

