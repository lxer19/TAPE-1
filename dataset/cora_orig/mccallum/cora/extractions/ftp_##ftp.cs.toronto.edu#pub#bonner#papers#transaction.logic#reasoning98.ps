URL: ftp://ftp.cs.toronto.edu/pub/bonner/papers/transaction.logic/reasoning98.ps
Refering-URL: http://www.cs.toronto.edu/~bonner/papers.html
Root-URL: http://www.cs.toronto.edu
Email: bonner@db.toronto.edu  kifer@cs.sunysb.edu  
Phone: 2  
Title: Logic  
Author: Anthony J. Bonner and Michael Kifer 
Affiliation: Department of Computer Science, SUNY at Stony Brook, Stony Brook, NY  
Address: M5S 1A4, Canada,  11794, U.S.A.,  
Note: Transaction  
Abstract: Results on Reasoning about Updates in Abstract. Transaction Logic was designed as a general logic of state change for deductive databases and logic programs. It has a model theory, a proof theory, and its Horn subset can be given a procedural interpretation. Previous work has demonstrated that the combination of declarative semantics and procedural interpretation turns the Horn subset of Transaction Logic into a powerful language for logic programming with updates [BK98,BK94,BK93,BK95]. In this paper, we focus not on the Horn subset, but on the full logic, and we explore its potential as a formalism for reasoning about logic programs with updates. We first develop a methodology for specifying properties of such programs, and then provide a sound inference system for reasoning about them, and conjecture a completeness result. Finally, we illustrate the power of the inference system through a series of examples of increasing difficulty. 
Abstract-found: 1
Intro-found: 1
Reference: [BK93] <author> A.J. Bonner and M. Kifer. </author> <title> Transaction logic programming. </title> <booktitle> In Intl. Conference on Logic Programming, </booktitle> <pages> pages 257-282, </pages> <address> Budapest, Hungary, June 1993. </address> <publisher> MIT Press. </publisher>
Reference: [BK94] <author> A.J. Bonner and M. Kifer. </author> <title> An overview of transaction logic. </title> <journal> Theoretical Computer Science, </journal> <volume> 133 </volume> <pages> 205-265, </pages> <month> October </month> <year> 1994. </year>
Reference: [BK95] <author> A.J. Bonner and M. Kifer. </author> <title> Transaction logic programming (or a logic of declarative and procedural knowledge). </title> <type> Technical Report CSRI-323, </type> <institution> University of Toronto, </institution> <month> November </month> <year> 1995. </year> <note> http://www.cs.toronto.edu/~bonner/ transaction-logic.html. </note>
Reference-contexts: However, it quickly became apparent that being a general logic for expressing change-related phenomena, Transaction Logic has applications in areas outside databases and logic programming. For instance, the logic can be used for such typical AI problems as plan generation <ref> [BK95] </ref>. Recently, it has also been applied to workflow analysis [DKRR98]. Although many other formalisms have been developed for reasoning about action and change, they all represent significant deviations from the logic-programming paradigm. Dynamic Logic [Har79], Temporal Logic [Pnu77], and the situation calculus [McC63] are three examples.
Reference: [BK96] <author> A.J. Bonner and M. Kifer. </author> <title> Concurrency and communication in transaction logic. </title> <booktitle> In Joint Intl. Conference and Symposium on Logic Programming, </booktitle> <pages> pages 142-156, </pages> <address> Bonn, Germany, September 1996. </address> <publisher> MIT Press. </publisher>
Reference: [BK98] <author> A.J. Bonner and M. Kifer. </author> <title> A logic for programming database transactions. </title> <editor> In J. Chomicki and G. Saake, editors, </editor> <booktitle> Logics for Databases and Information Systems, chapter 5, </booktitle> <pages> pages 117-166. </pages> <publisher> Kluwer Academic Publishers, </publisher> <month> March </month> <year> 1998. </year>
Reference: [Bon97a] <author> A.J. Bonner. </author> <title> The power of cooperating transactions. </title> <type> Manuscript, </type> <year> 1997. </year>
Reference-contexts: For the interested reader, an implementation of the logic-programming fragment of T R is described in [Hun96], and an implementation of the reasoning system is under development. Extensions of T R for dealing with concurrency and communication are described in [BK96,Bon97b], and complexity results are given in <ref> [Bon97a] </ref>.
Reference: [Bon97b] <author> A.J. Bonner. </author> <title> Transaction Datalog: a compositional language for transaction programming. </title> <booktitle> In Proceedings of the International Workshop on Database Programming Languages, </booktitle> <address> Estes Park, Colorado, </address> <month> August </month> <year> 1997. </year> <note> Springer Ver-lag. </note>
Reference-contexts: In this way, the theorem prover guarantees atomicity by implementing other transactional features, such as abort, rollback, and save-points <ref> [Bon97b] </ref>. These features are all supported by the implementation of serial-Horn T R described in [Hun96]. Example 1. (Financial Transactions) Suppose the balance of a bank ac-count is given by the base predicate balance (Acct; Amt).
Reference: [Cla78] <author> K.L. Clark. </author> <title> Negation as failure. </title> <editor> In H. Gallaire and J. Minker, editors, </editor> <booktitle> Logic and Data Bases, </booktitle> <pages> pages 292-322. </pages> <publisher> Plenum Press, </publisher> <year> 1978. </year>
Reference-contexts: The frame axioms say that inserting or deleting c does not affect b. The query axiom says that b is a query. The completion axiom is the analogue in T R of the Clark completion in classical logic programs <ref> [Cla78] </ref>. Theorem 6 (Soundness). Every transaction formula derivable in system T P is a property of P, i:e:, it is true in the minimal model of P. It is well-known that no inference system can be complete for proving properties of general programs, since such reasoning is not even semi-decidable.
Reference: [DKRR98] <author> H. Davulcu, M. Kifer, C.R. Ramakrishnan, and I.V. Ramakrishnan. </author> <title> Logic based modeling and analysis of workflows. </title> <booktitle> In ACM Symposium on Principles of Database Systems, </booktitle> <month> June </month> <year> 1998. </year>
Reference-contexts: For instance, the logic can be used for such typical AI problems as plan generation [BK95]. Recently, it has also been applied to workflow analysis <ref> [DKRR98] </ref>. Although many other formalisms have been developed for reasoning about action and change, they all represent significant deviations from the logic-programming paradigm. Dynamic Logic [Har79], Temporal Logic [Pnu77], and the situation calculus [McC63] are three examples.
Reference: [Har79] <author> D. Harel. </author> <title> First-Order Dynamic Logic, </title> <booktitle> volume 68 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference-contexts: Recently, it has also been applied to workflow analysis [DKRR98]. Although many other formalisms have been developed for reasoning about action and change, they all represent significant deviations from the logic-programming paradigm. Dynamic Logic <ref> [Har79] </ref>, Temporal Logic [Pnu77], and the situation calculus [McC63] are three examples. These formalisms were not intended for logic programming, and they are a world apart from Prolog with assert and retract.
Reference: [Hun96] <author> Samuel Y.K. Hung. </author> <title> Implementation and Performance of Transaction Logic in Prolog. </title> <type> Master's thesis, </type> <institution> Department of Computer Science, University of Toronto, </institution> <year> 1996. </year> <note> http://www.cs.toronto.edu/~bonner/ transaction-logic.html. </note>
Reference-contexts: This, we hope, will establish T R not only as a language for programming databases transactions, but also as a logic for reasoning about the properties of such programs. For the interested reader, an implementation of the logic-programming fragment of T R is described in <ref> [Hun96] </ref>, and an implementation of the reasoning system is under development. Extensions of T R for dealing with concurrency and communication are described in [BK96,Bon97b], and complexity results are given in [Bon97a]. <p> In this way, the theorem prover guarantees atomicity by implementing other transactional features, such as abort, rollback, and save-points [Bon97b]. These features are all supported by the implementation of serial-Horn T R described in <ref> [Hun96] </ref>. Example 1. (Financial Transactions) Suppose the balance of a bank ac-count is given by the base predicate balance (Acct; Amt).
Reference: [Kif95] <author> M. Kifer. </author> <title> Deductive and object-oriented data languages: A quest for integration. </title> <booktitle> In Intl. Conference on Deductive and Object-Oriented Databases, volume 1013 of Lecture Notes in Computer Science, </booktitle> <pages> pages 187-212, </pages> <address> Sin-gapore, </address> <month> December </month> <year> 1995. </year> <title> Springer-Verlag. Keynote address at the 3d Intl. </title> <booktitle> Conference on Deductive and Object-Oriented databases. </booktitle>
Reference-contexts: In object-oriented databases, T R can be combined with object-oriented logics, such as F-logic [KLW95], to provide a logical account of methods|procedures hidden inside objects that manipulate these objects' internal states <ref> [Kif95] </ref>. In AI, T R suggests a logical account of procedural knowledge and planning, and of subjunctive queries and counterfactuals. The results in this paper can be applied to reasoning about change in any of these areas.
Reference: [KLW95] <author> M. Kifer, G. Lausen, and J. Wu. </author> <title> Logical foundations of object-oriented and frame-based languages. </title> <journal> Journal of ACM, </journal> <pages> pages 741-843, </pages> <month> July </month> <year> 1995. </year>
Reference-contexts: In relational databases, T R provides a logical language for programming transactions, for updating database views, and for specifying active rules. In object-oriented databases, T R can be combined with object-oriented logics, such as F-logic <ref> [KLW95] </ref>, to provide a logical account of methods|procedures hidden inside objects that manipulate these objects' internal states [Kif95]. In AI, T R suggests a logical account of procedural knowledge and planning, and of subjunctive queries and counterfactuals.
Reference: [McC63] <author> J. McCarthy. </author> <title> Situations, actions, and clausal laws, </title> <type> memo 2. </type> <institution> Stanford Artificial Intelligence Project, </institution> <year> 1963. </year>
Reference-contexts: Recently, it has also been applied to workflow analysis [DKRR98]. Although many other formalisms have been developed for reasoning about action and change, they all represent significant deviations from the logic-programming paradigm. Dynamic Logic [Har79], Temporal Logic [Pnu77], and the situation calculus <ref> [McC63] </ref> are three examples. These formalisms were not intended for logic programming, and they are a world apart from Prolog with assert and retract.
Reference: [MH69] <author> J.M. McCarthy and P.J. Hayes. </author> <title> Some philosophical problems from the standpoint of artificial intelligence. </title> <editor> In B. Meltzer and D. Michie, editors, </editor> <booktitle> Machine Intelligence, </booktitle> <volume> volume 4, </volume> <pages> pages 463-502. </pages> <publisher> Edinburgh University Press, </publisher> <year> 1969. </year> <note> Reprinted in Readings in Artificial Intelligence, </note> <year> 1981, </year> <title> Tioga Publ. </title> <publisher> Co. </publisher>
Reference: [Pnu77] <author> A. Pnueli. </author> <title> A temporal logic of programs. </title> <booktitle> In Intl. Conference on Foundations of Computer Science, </booktitle> <pages> pages 46-57, </pages> <month> October </month> <year> 1977. </year>
Reference-contexts: Recently, it has also been applied to workflow analysis [DKRR98]. Although many other formalisms have been developed for reasoning about action and change, they all represent significant deviations from the logic-programming paradigm. Dynamic Logic [Har79], Temporal Logic <ref> [Pnu77] </ref>, and the situation calculus [McC63] are three examples. These formalisms were not intended for logic programming, and they are a world apart from Prolog with assert and retract.
Reference: [Rei91] <author> R. Reiter. </author> <title> The frame problem in the situation calculus: A simple solution (sometimes) and a completeness result for goal regression. </title> <editor> In V. Lifschitz, editor, </editor> <booktitle> Aritifial Intelligence and Mathematical Theory of Computation: Papers in Honor of John McCarty, </booktitle> <pages> pages 359-380. </pages> <publisher> Academic Press, </publisher> <year> 1991. </year>
References-found: 17

