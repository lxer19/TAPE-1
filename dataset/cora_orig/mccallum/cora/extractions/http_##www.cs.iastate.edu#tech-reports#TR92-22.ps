URL: http://www.cs.iastate.edu/tech-reports/TR92-22.ps
Refering-URL: http://www.cs.iastate.edu/tech-reports/catalog.html
Root-URL: http://www.cs.iastate.edu
Title: rtScript: A Scripting Language for Writing Real-Time Programs in C  
Author: Youngtae Kim 
Address: 226 Atanasoff Ames, IA 50011  
Affiliation: Iowa State University of Science and Technology Department of Computer Science  
Date: July 18, 1992  
Abstract-found: 0
Intro-found: 1
Reference: 1. <author> S. Cheng, J. A. Stankovic and K. Ramamritham, </author> <title> Scheduling Algorithms for Hard Real-Time Systems - A Brief Survey, in Tutorial on Hard Real-Time Systems, </title> <editor> J. A. Stankovic and K. Ramamritham (ed.), </editor> <publisher> IEEE Computer Society Press, </publisher> <year> 1988, </year> <pages> 150-173. </pages>
Reference-contexts: Examples of such applications are found in nuclear power plants, process control plants, and ight control systems. Also, many important applications, such as radar signal processing and airline reservation, have inherent real-time properties. There are two types of real-time systems: soft real-time systems and hard real-time systems <ref> [1] </ref>. In soft real-time systems, tasks are performed as fast as possible, but may not be constrained to finish by specific times. On the other hand, in hard real-time systems, tasks have to be performed with correct timing behavior, as well as with correct functional behavior. <p> Tasks in a real-time system are scheduled to satisfy these constraints. Usually, a number of different schedules satisfy these constraints. Task scheduling can be done in a static or dynamic fashion <ref> [1] </ref>. In static scheduling, scheduling is done before run time. A static scheduler uses the timing and constraint information for each task to determine the times during which the task will execute. <p> On the other hand, there are 4 different occurrences of SeekScheduler <ref> [1] </ref>, so this leads to 4 different restrictions in the rtScore translation. Similarly, - 24 - -- -- there are 8 instances of Seek and Optimizer, so there are 8 relationships between Seek and Opti mizer tasks in the rtScore code. - 25 - -- -- 7.
Reference: 2. <author> G. Raghavan, </author> <title> Design and Implementation of Language Features for Real-Time Programming, </title> <institution> Iowa State Univ. </institution> <type> Tech. Rep. </type> <pages> 90-07, </pages> <year> 1990. </year>
Reference-contexts: The scheduling table is finite in size. The run-time scheduler dispatches tasks according to the precomputed scheduling table. Upon completion of the tabulated schedule, the run-time scheduler starts over at the beginning of the table. Since the run-time cost of context switching is a small constant <ref> [2] </ref>, prescheduled real-time systems offer the potential of higher performance than dynamic schedules. Though the problem of prescheduling tasks with real-time constraints is known to be NP-hard in general, there are effective scheduling algorithms and heuristics for prescheduling [3, 4]. - 2 - -- -- 2. <p> The rtC functions are defined in rtC source files identified with rtScript source directives. The computation time of the task is predetermined analytically whenever possible by the rtC compiler <ref> [2] </ref>. If a task has a release time r and a deadline d, the computation time of the task must be less than (d - r).
Reference: 3. <author> J. Xu and D. L. Parnas, </author> <title> Scheduling Processes with Release Times, Deadlines, Precedence, and Exclusion Relations, </title> <journal> IEEE Transactions on Software Engineering 16, </journal> <month> 3 (March </month> <year> 1990), </year> <pages> 360-369. </pages>
Reference-contexts: Since the run-time cost of context switching is a small constant [2], prescheduled real-time systems offer the potential of higher performance than dynamic schedules. Though the problem of prescheduling tasks with real-time constraints is known to be NP-hard in general, there are effective scheduling algorithms and heuristics for prescheduling <ref> [3, 4] </ref>. - 2 - -- -- 2. System Overview rtScript is a scripting language used to specify periodic execution of tasks. Real-time programmers use rtScript to define the timing behavior of tasks. This behavior is specified in terms of task release times, deadlines, and permissible variances.
Reference: 4. <author> W. Zhao, K. Ramamritham and J. A. Stankovic, </author> <title> Scheduling Tasks with Resource Requirements in Hard Real-Time Systems, </title> <journal> IEEE Transactions on Software Engineering SE-13, </journal> <month> 5 (May </month> <year> 1987), </year> <pages> 564-577. </pages>
Reference-contexts: Since the run-time cost of context switching is a small constant [2], prescheduled real-time systems offer the potential of higher performance than dynamic schedules. Though the problem of prescheduling tasks with real-time constraints is known to be NP-hard in general, there are effective scheduling algorithms and heuristics for prescheduling <ref> [3, 4] </ref>. - 2 - -- -- 2. System Overview rtScript is a scripting language used to specify periodic execution of tasks. Real-time programmers use rtScript to define the timing behavior of tasks. This behavior is specified in terms of task release times, deadlines, and permissible variances.
Reference: 5. <author> J. W. S. L iu, W. Shih, A. C. Yu, J. Chung and W. Zhao, </author> <title> Algorithms for Scheduling Imprecise Computations, </title> <booktitle> IEEE computer, </booktitle> <month> May </month> <year> 1991, </year> <pages> 58-68. </pages>
Reference-contexts: Additionally, the schedule editor performs link editing and certain link-time optimization. Tasks in real-time systems can be separated into essential real-time tasks and optional real-time tasks. Such an organization is described in <ref> [5] </ref>. The time required to execute tasks in real-time systems varies greatly depending on the system's workload, cache state, and bus connection. When precomputing schedules, the static scheduler guarantees the worst-case resource requirements to each essential task. <p> Flex language J. W. S. Liu and other researchers provide imprecise computation techniques for scheduling exibility in the Flex language <ref> [5] </ref>. They decompose every real-time task into a mandatory subtask and an optional subtask. A mandatory subtask executes with timing constraints, but gives only an approximation of the desired result, not guaranteeing the precise result.
Reference: 6. <author> E. Kligerman and A. D. Stoyenko, </author> <title> Real-Time Euclid: A Language for Reliable Real-Time Systems, </title> <journal> IEEE Transactions on Software Engineering 12, </journal> <month> 9 (Sep. </month> <year> 1986), </year> <pages> 941-949. </pages>
Reference-contexts: Real-time Euclid Real-time Euclid is a Pascal-like language designed specifically for straightforward schedula-bility analysis. To support timing analysis of tasks, the language contains no recursion and all loops execute a constant number of iterations. To synchronize processes, Real-time Euclid uses various dynamic mechanisms: monitors, waits, and broadcasts <ref> [6] </ref>. Real-time Euclid supports a model where processes contend dynamically for access to shared resource, and the worst-case amount of time waiting for each shared resources is taken into account in computing the execution time.
Reference: 7. <author> D. Niehaus and C. Kuan, </author> <title> Spring Software Generation System, Spring Project Documentation, </title> <institution> University of Massachusetts-Amherst, </institution> <year> 1990. </year>
Reference-contexts: Spring-C Similar to our research, Spring system uses a scripting language called SDL (System Description Language) to describe periodic execution of tasks written in Spring-C <ref> [7] </ref>. In the Spring system, most timing constraints are specified in Spring-C rather than in SDL. Analysis of task execution times is done at the intermediate code level using instruction costs determined experimentally. Because of the unconstrained expressive power of SDL, some SDL/Spring-C programs cannot be analyzed for schedulability.
Reference: 8. <author> K. B. Kenny and K. Lin, </author> <title> Building Flexible real-Time Systems Using the Flex Language, </title> <booktitle> IEEE computer, </booktitle> <month> May </month> <year> 1991, </year> <pages> 70-78. - 28 </pages> - -- -- 
Reference-contexts: Although the concept of optional subtask is similar to our notion of optional task, our optional tasks are independent tasks not necessarily related to particular essential tasks. To support imprecise computation in Flex, automatic timing measurement of program execution times is introduced in the Flex environment <ref> [8] </ref>. This measurement uses statistical analysis to determine execution times empirically. One of Flex's innovations is the notion of Performance polymorphism. Multiple algorithms are executed in parallel for computation of a given function. These algorithms compute the same result with varying degrees of precision and different computation requirements.
References-found: 8

