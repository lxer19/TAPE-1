URL: http://www.cs.brown.edu/people/mph/podc94.ps
Refering-URL: http://www.cs.brown.edu/people/mph/podc94.html
Root-URL: http://www.cs.brown.edu/
Email: herlihy@crl.dec.com  rajsbaum@theory.lcs.mit.edu.  
Title: Set Consensus Using Arbitrary Objects (Preliminary Version)  
Author: Maurice Herlihy Sergio Rajsbaum 
Address: One Kendall Square Cambridge, MA 02139  545 Technology Square Cambridge, MA 02139  
Affiliation: Digital Equipment Corporation Cambridge Research Laboratory  MIT Laboratory for Computer Science  
Abstract: In the (N; k)-consensus task, each process in a group starts with a private input value, communicates with the others by applying operations to shared objects, and then halts after choosing a private output value. Each process is required to choose some process's input value, and the set of values chosen should have size at most k. This problem, first proposed by Chaudhuri in 1990, has been extensively studied using asynchronous read/write memory. In this paper, we investigate this problem in a more powerful asynchronous model in which processes may communicate through objects other than read/write memory, such as test&set variables. We prove two general theorems about the solvability of set consensus using objects other than read/write registers. The first theorem addresses the question of what kinds of shared objects are needed to solve (N; k)-consensus, and the second addresses the question of what kinds of tasks can be solved by N processes using (M; j)-consensus objects, for M N . Our proofs exploit a number of techniques from algebraic topology. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Hagit Attiya, Amotz Bar-Noy, Danny Dolev, David Peleg, and Rudiger Reischuk. </author> <title> Renaming in an asynchronous environment. </title> <journal> Journal of the ACM, </journal> <month> July </month> <year> 1990. </year>
Reference-contexts: It has already yielded a number of results, including, for read/write memory, a general characterization of tasks having wait-free solutions [11, 12], the impossibility of set consensus [11], and the impossibility of renaming <ref> [1] </ref> with a small number of names [11]. In the synchronous model, Chaudhuri, Herlihy, Lynch, and Tuttle [5] used this approach to give tight upper and lower bounds on the complexity of solving set consensus using message-passing.
Reference: [2] <author> E. Borowsky and E. Gafni. </author> <title> Generalized flp impossibility result for t-resilient asynchronous computations. </title> <booktitle> In Proceedings of the 1993 ACM Symposium on Theory of Computing, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: This conjecture was finally proved by three independent research teams in 1993 <ref> [2, 11, 15] </ref>. When the specific values of N and k are unimportant, we will refer to this problem as set consensus. In this paper we prove two general theorems about the solvability of set consensus using objects other than read/write registers.
Reference: [3] <author> E. Borowsky and E. Gafni. </author> <title> The implication of the Borowsky-Gafni simulation on the set consensus hierarchy. </title> <type> Technical Report 930021, </type> <institution> UCLA Computer Science Dept., </institution> <year> 1993. </year>
Reference-contexts: Finally, when the consensus number M = N , the complex becomes disconnected. Together, these theorems imply, for example, that it is impossible to implement (n + 1; k)-consensus using (m; j)-consensus objects if n=k &gt; m=j, an observation also made by Borowsky and Gafni <ref> [3] </ref>. One intriguing consequence of this result is that there exist objects whose computational powers are incomparable: there is no wait-free implementation of X by Y , and vice-versa. For example, (2; 1)-consensus cannot implement (6; 2)-consensus because 5=2 &gt; 2=1.
Reference: [4] <author> S. Chaudhuri. </author> <title> Agreement is harder than consensus: set consensus problems in totally asynchronous systems. </title> <booktitle> In Proceedings of the Ninth Annual ACM Symosium on Principles of Distributed Computing, </booktitle> <pages> pages 311-234, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: N processes starts with an integer input value, and each chooses some process's input value, such that the number of values chosen has size at most k. (When k = 1, this problem is the well-known consensus problem [6].) The (N; k)-consensus problem was first posed in 1990 by Chaudhuri <ref> [4] </ref> (who called it k-set agreement), along with a conjecture that it could not be solved in read/write memory. This conjecture was finally proved by three independent research teams in 1993 [2, 11, 15].
Reference: [5] <author> S. Chaudhuri, M.P. Herlihy, N. Lynch, </author> <title> and M.R. Tuttle. A tight lower bound for k-set agreement. </title> <booktitle> In Proceedings of the 34th IEEE Symposium on Foundations of Computer Science, </booktitle> <month> Oc-tober </month> <year> 1993. </year>
Reference-contexts: In the synchronous model, Chaudhuri, Herlihy, Lynch, and Tuttle <ref> [5] </ref> used this approach to give tight upper and lower bounds on the complexity of solving set consensus using message-passing. This paper is the first application of these techniques to objects other than read/write registers. 2 Model Our model is the same as [11].
Reference: [6] <author> M. Fischer, N.A. Lynch, </author> <title> and M.S. Paterson. Impossibility of distributed commit with one faulty process. </title> <journal> Journal of the ACM, </journal> <volume> 32(2), </volume> <month> April </month> <year> 1985. </year>
Reference-contexts: In the (N; k)-consensus task, each of N processes starts with an integer input value, and each chooses some process's input value, such that the number of values chosen has size at most k. (When k = 1, this problem is the well-known consensus problem <ref> [6] </ref>.) The (N; k)-consensus problem was first posed in 1990 by Chaudhuri [4] (who called it k-set agreement), along with a conjecture that it could not be solved in read/write memory. This conjecture was finally proved by three independent research teams in 1993 [2, 11, 15].
Reference: [7] <author> P.J. Giblin. </author> <title> Graphs, Surfaces, and Homology. </title> <publisher> Chapman and Hill, </publisher> <address> London and New York, </address> <year> 1981. </year> <note> Second edition. </note>
Reference-contexts: Many complexes of interest have a simple but important topological property: they have no "holes" in certain dimensions. Formally, this concept is captured by the notion of a homology group. (Readers completely unfamiliar with the notion may wish to consult any one of a number of standard textbooks <ref> [7, 8, 9, 13, 16] </ref>.) For our purposes, it suffices to note that an n-dimensional complex C n has n + 1 homology groups, H 0 (C n ); : : : ; H n (C n ), one for each dimension.
Reference: [8] <author> M.J. Greenberg and J.R. Harper. </author> <title> Algebraic Topology: A First Course. </title> <booktitle> Mathematics Lecture Notes Series. </booktitle> <publisher> The Benjamin/Cummings Publishing Company, </publisher> <address> Reading MA, </address> <year> 1981. </year>
Reference-contexts: Many complexes of interest have a simple but important topological property: they have no "holes" in certain dimensions. Formally, this concept is captured by the notion of a homology group. (Readers completely unfamiliar with the notion may wish to consult any one of a number of standard textbooks <ref> [7, 8, 9, 13, 16] </ref>.) For our purposes, it suffices to note that an n-dimensional complex C n has n + 1 homology groups, H 0 (C n ); : : : ; H n (C n ), one for each dimension. <p> It is simply connected if it is connected and every closed path can be continuously deformed to a point. (Any simply connected complex has a trivial first homology group ([8, Ch. 12], but not vice-versa <ref> [8, p.150] </ref>.) 3 Impossibility Consider a system of N = n + 1 processes sharing read/write variables and a collection of objects O.
Reference: [9] <author> M. Henle. </author> <title> Combinatorial Introduction to Topology. W.H. </title> <publisher> Freeman and Company, </publisher> <address> San Fran-cisco, </address> <year> 1979. </year>
Reference-contexts: Many complexes of interest have a simple but important topological property: they have no "holes" in certain dimensions. Formally, this concept is captured by the notion of a homology group. (Readers completely unfamiliar with the notion may wish to consult any one of a number of standard textbooks <ref> [7, 8, 9, 13, 16] </ref>.) For our purposes, it suffices to note that an n-dimensional complex C n has n + 1 homology groups, H 0 (C n ); : : : ; H n (C n ), one for each dimension.
Reference: [10] <author> M.P. Herlihy. </author> <title> Wait-free synchronization. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 13(1) </volume> <pages> 123-149, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: Under what circumstances does a task have a wait-free solution? It is known that the computational power of a concurrent system depends on the types of the shared objects. For example, every object can be assigned a consensus number <ref> [10] </ref> which partly characterizes its computational power: in a system of N or more concurrent processes, it is impossible to construct a wait-free implementation of an object with consensus number N from an object with a lower consensus number. <p> When j = 1, then M is the object's consensus number <ref> [10] </ref>. This theorem gives an intriguing topological interpretation to consensus numbers. At one extreme, when M = 1, the complex has no holes at all (i.e., it has trivial homology in all dimensions), reflecting a prior result of Herlihy and Shavit [11].
Reference: [11] <author> M.P. Herlihy and N. Shavit. </author> <title> The asynchronous computability theorem for t-resilient tasks. </title> <booktitle> In Proceedings of the 1993 ACM Symposium on Theory of Computing, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: On the other hand, any object with consensus number N is universal in a system of N processes: it implements any other concurrent object. More recently, Herlihy and Shavit <ref> [11, 12] </ref> have given a general combinatorial characterization of the decision tasks that can be solved in read/write memory (which has consensus number one). Nevertheless, relatively little is known about the computational power of objects with consensus number greater than one but less than N . <p> This conjecture was finally proved by three independent research teams in 1993 <ref> [2, 11, 15] </ref>. When the specific values of N and k are unimportant, we will refer to this problem as set consensus. In this paper we prove two general theorems about the solvability of set consensus using objects other than read/write registers. <p> The first theorem addresses the question of what kinds of shared objects are needed to solve set consensus. Any protocol employing shared objects of any kind has a characteristic geometric structure, called a simplicial complex <ref> [11] </ref>. The topological properties of this complex are determined by the types of the shared objects. In our first result, we show that a protocol cannot implement set consensus if the protocol's associated complex lacks holes of sufficiently small dimension (i.e., if certain low-dimensional homology groups are trivial). <p> This theorem gives an intriguing topological interpretation to consensus numbers. At one extreme, when M = 1, the complex has no holes at all (i.e., it has trivial homology in all dimensions), reflecting a prior result of Herlihy and Shavit <ref> [11] </ref>. For consensus numbers above one, however, the complex may have holes. If the consensus number is low, then holes appear only in higher dimensions, but as the consensus number grows, the holes spread into increasingly lower dimensions. <p> One intriguing consequence of this result is that there exist objects whose computational powers are incomparable: there is no wait-free implementation of X by Y , and vice-versa. For example, (2; 1)-consensus cannot implement (6; 2)-consensus because 5=2 &gt; 2=1. Conversely, Herlihy and Shavit <ref> [11] </ref> have shown that one cannot implement (2; 1)-consensus using (N; 2)- consensus for any N . It should be noted that our theorems extend to any variation of (N; k)-consensus which also places a lower bound on the number of values chosen. <p> We believe this topological approach has a great deal of promise for the theory of distributed and concurrent computation, and that it merits further investigation. It has already yielded a number of results, including, for read/write memory, a general characterization of tasks having wait-free solutions <ref> [11, 12] </ref>, the impossibility of set consensus [11], and the impossibility of renaming [1] with a small number of names [11]. In the synchronous model, Chaudhuri, Herlihy, Lynch, and Tuttle [5] used this approach to give tight upper and lower bounds on the complexity of solving set consensus using message-passing. <p> It has already yielded a number of results, including, for read/write memory, a general characterization of tasks having wait-free solutions [11, 12], the impossibility of set consensus <ref> [11] </ref>, and the impossibility of renaming [1] with a small number of names [11]. In the synchronous model, Chaudhuri, Herlihy, Lynch, and Tuttle [5] used this approach to give tight upper and lower bounds on the complexity of solving set consensus using message-passing. <p> It has already yielded a number of results, including, for read/write memory, a general characterization of tasks having wait-free solutions [11, 12], the impossibility of set consensus <ref> [11] </ref>, and the impossibility of renaming [1] with a small number of names [11]. In the synchronous model, Chaudhuri, Herlihy, Lynch, and Tuttle [5] used this approach to give tight upper and lower bounds on the complexity of solving set consensus using message-passing. <p> This paper is the first application of these techniques to objects other than read/write registers. 2 Model Our model is the same as <ref> [11] </ref>. An initial or final state of a process is modeled as a vertex, a pair consisting of a process id and a value (either input or output). A set of d + 1 mutually compatible initial or final states is modeled as a d-dimensional simplex , (or d-simplex).
Reference: [12] <author> M.P. Herlihy and N. Shavit. </author> <title> A simple constructive computability theorem for wait-free computation. </title> <booktitle> In Proceedings of the 1994 ACM Symposium on Theory of Computing, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: On the other hand, any object with consensus number N is universal in a system of N processes: it implements any other concurrent object. More recently, Herlihy and Shavit <ref> [11, 12] </ref> have given a general combinatorial characterization of the decision tasks that can be solved in read/write memory (which has consensus number one). Nevertheless, relatively little is known about the computational power of objects with consensus number greater than one but less than N . <p> We believe this topological approach has a great deal of promise for the theory of distributed and concurrent computation, and that it merits further investigation. It has already yielded a number of results, including, for read/write memory, a general characterization of tasks having wait-free solutions <ref> [11, 12] </ref>, the impossibility of set consensus [11], and the impossibility of renaming [1] with a small number of names [11]. In the synchronous model, Chaudhuri, Herlihy, Lynch, and Tuttle [5] used this approach to give tight upper and lower bounds on the complexity of solving set consensus using message-passing.
Reference: [13] <author> S. Lefschetz. </author> <title> Introduction to Topology. </title> <publisher> Princeton University Press, </publisher> <address> Princeton, New Jersey, </address> <year> 1949. </year>
Reference-contexts: Many complexes of interest have a simple but important topological property: they have no "holes" in certain dimensions. Formally, this concept is captured by the notion of a homology group. (Readers completely unfamiliar with the notion may wish to consult any one of a number of standard textbooks <ref> [7, 8, 9, 13, 16] </ref>.) For our purposes, it suffices to note that an n-dimensional complex C n has n + 1 homology groups, H 0 (C n ); : : : ; H n (C n ), one for each dimension.
Reference: [14] <author> M. Li, J. Tromp, </author> <title> and P.M. Vitanyi. How to share concurrent wait-free variables. </title> <type> Technical Report CT-91-02, </type> <institution> University of Amsterdam, Am-sterdam, Netherlands, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: We now undertake a case analysis to analyze how processes become disabled. We may assume without loss of generality that all read/write registers are single-reader and single-writer, since they are sufficient to construct wait-free implementations of multi-reader/multi-writer registers (e.g., <ref> [14] </ref>). Suppose U includes a process P about to write a register, while Q is about to read that register. Q is disabled, since it can observe the relative order of the two operations. Each such read/write conflict disables one process.
Reference: [15] <author> M. Saks and F. Zaharoglou. </author> <title> Wait-free k-set agreement is impossible: The topology of public knowledge. </title> <booktitle> In Proceedings of the 1993 ACM Symposium on Theory of Computing, </booktitle> <month> May </month> <year> 1993. </year>
Reference-contexts: This conjecture was finally proved by three independent research teams in 1993 <ref> [2, 11, 15] </ref>. When the specific values of N and k are unimportant, we will refer to this problem as set consensus. In this paper we prove two general theorems about the solvability of set consensus using objects other than read/write registers.
Reference: [16] <author> E.H. Spanier. </author> <title> Algebraic Topology. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1966. </year> <pages> Page 10 </pages>
Reference-contexts: Many complexes of interest have a simple but important topological property: they have no "holes" in certain dimensions. Formally, this concept is captured by the notion of a homology group. (Readers completely unfamiliar with the notion may wish to consult any one of a number of standard textbooks <ref> [7, 8, 9, 13, 16] </ref>.) For our purposes, it suffices to note that an n-dimensional complex C n has n + 1 homology groups, H 0 (C n ); : : : ; H n (C n ), one for each dimension. <p> When i = 0, there are two alternative ways to define H 0 (C n ). In this paper, H 0 (C n ) always denotes the reduced 0-th homology group <ref> [16, p.172] </ref>, which is trivial if and only if C n is connected. Our principal tool for computing homology groups for full-information complexes is the Mayer-Vietoris sequence [16, p.186]. <p> In this paper, H 0 (C n ) always denotes the reduced 0-th homology group [16, p.172], which is trivial if and only if C n is connected. Our principal tool for computing homology groups for full-information complexes is the Mayer-Vietoris sequence <ref> [16, p.186] </ref>. A sequence of groups G i is said to be exact if there exist group homomorphisms i : G i ! G i+1 such that the image of i is the kernel of i+1 . <p> If the complex has higher-dimensional holes, then we can still construct a subdivided simplex with a Sperner coloring, except that we need a higher-dimensional complex to avoid the holes. The proof of the following lemma (omitted) is based on the Hurewicz Isomorphism Theorem <ref> [16, p398] </ref>, which states that if C is simply connected with H q (C) = 0 for q &lt; k, then any continuous map of a (k 1)-sphere to C can be extended to a continuous map of the k-disk.
References-found: 16

