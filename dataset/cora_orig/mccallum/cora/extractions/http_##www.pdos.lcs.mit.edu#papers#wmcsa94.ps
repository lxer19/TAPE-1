URL: http://www.pdos.lcs.mit.edu/papers/wmcsa94.ps
Refering-URL: http://www.pdos.lcs.mit.edu/PDOS-papers.html
Root-URL: 
Email: fkaashoek, pinckney, joshg@lcs.mit.edu  
Title: Dynamic Documents: Mobile Wireless Access to the WWW  
Author: M. Frans Kaashoek, Tom Pinckney, and Joshua A. Tauber 
Address: 545 Technology Square Cambridge, MA 02139, USA  
Affiliation: MIT Laboratory for Computer Science  
Abstract: We propose dynamic documents as an approach to extending and customizing the WWW/Mosaic for mobile computing platforms. Dynamic documents are programs executed on a mobile platform to generate a document; they are implemented as Tcl scripts. We have modified the NCSA Mosaic web client to run the dynamic documents it retrieves through a modified Tcl interpreter. The interpreter is designed to execute only commands that do not violate safety. To hide the latencies of slow links we have modified the Mosaic client to perform caching and prefetching. The policies for caching and prefetching can be under control of dynamic documents, allowing the strategies to be document-specific. Using dynamic documents, we have built an adaptive email browser that employs application-specific caching and prefetching strategies. Both the browser and the displayed email messages are dynamically customized to the mobile computing environment in which they run. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> Common gateway interface. </institution> <note> http://hoohoo.ncsa.uiuc.edu/cgi/intro.html. </note>
Reference-contexts: A number of groups are addressing the problem of adapting the WWW/Mosaic by extending the HyperText Transfer Protocol (HTTP) (e.g. Common Gateway Interface), the HyperText Mark-up Language (HTML), or by introducing new protocols (e.g. HTTP+) <ref> [2, 3, 1, 20] </ref>. Unfortunately, these approaches are rigid and constrained because protocols function as standards for information exchange and, therefore, cannot be easily modified. We address this inflexibility by introducing dynamic documents.
Reference: [2] <institution> Http: a protocol for networked information. </institution> <note> http://info.cern.ch/hypertext/WWW/Protocols/HTTP/- HTTP2.html. </note>
Reference-contexts: A number of groups are addressing the problem of adapting the WWW/Mosaic by extending the HyperText Transfer Protocol (HTTP) (e.g. Common Gateway Interface), the HyperText Mark-up Language (HTML), or by introducing new protocols (e.g. HTTP+) <ref> [2, 3, 1, 20] </ref>. Unfortunately, these approaches are rigid and constrained because protocols function as standards for information exchange and, therefore, cannot be easily modified. We address this inflexibility by introducing dynamic documents.
Reference: [3] <institution> Hypertext markup language (html). </institution> <address> http://- info.cern.ch/hypertext/WWW/MarkUp/MarkUp.html. </address>
Reference-contexts: A number of groups are addressing the problem of adapting the WWW/Mosaic by extending the HyperText Transfer Protocol (HTTP) (e.g. Common Gateway Interface), the HyperText Mark-up Language (HTML), or by introducing new protocols (e.g. HTTP+) <ref> [2, 3, 1, 20] </ref>. Unfortunately, these approaches are rigid and constrained because protocols function as standards for information exchange and, therefore, cannot be easily modified. We address this inflexibility by introducing dynamic documents.
Reference: [4] <author> Mosaic. </author> <note> http://www.ncsa.uiuc.edu/SDG/Software/- Mosaic/NCSAMosaicHome.html. </note>
Reference-contexts: Popular information retrieval tools need to be supported on this new technology to allow users to have information at their fingertips everywhere. Recently, the World Wide Web (WWW) and NCSA Mosaic have become extremely popular information retrieval tools <ref> [7, 4] </ref>. Since, Mosaic has been designed for browsers running on workstations connected by high-speed networks, its fixed policies and fixed interfaces prevent it from easily incorporating new applications or running on other computing platforms.
Reference: [5] <institution> Uniform resource locators. </institution> <address> http://info.cern.ch/- hypertext/WWW/Addressing/URL/Overview.html. </address>
Reference-contexts: Later, when requests for this Uniform Resource Locator (URL) are made, the cached data is simply replayed as if it had come from the network layer <ref> [5] </ref>. When the document cache is full, a randomly picked entry is discarded. Since WWW servers do not provide callbacks, stale cache data cannot be detected. To attempt to maintain the correctness of cached data, entries are cached for only a document-specific period of time.
Reference: [6] <editor> Intelligent agents issues. CACM, </editor> <volume> 37(7), </volume> <month> July </month> <year> 1994. </year>
Reference-contexts: This approach has been adopted for some more recent mailers that defined a safe subset of Tcl to do flexible mail processing. Recent work uses scripting languages to implement intelligent agents <ref> [6] </ref>. A number of projects have been extending the applicability of the WWW and its clients. In particular, Houh et al. implemented capabilities for shipping code from the client to the server to implement, for example, queries [12].
Reference: [7] <author> T. Berners-Lee, R. Caililiau, A. Luotonen, H.F. Nielsen, and A. </author> <title> Secret. The world-wide web. </title> <journal> Comm. ACM, </journal> <volume> 37(8) </volume> <pages> 76-82, </pages> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: Popular information retrieval tools need to be supported on this new technology to allow users to have information at their fingertips everywhere. Recently, the World Wide Web (WWW) and NCSA Mosaic have become extremely popular information retrieval tools <ref> [7, 4] </ref>. Since, Mosaic has been designed for browsers running on workstations connected by high-speed networks, its fixed policies and fixed interfaces prevent it from easily incorporating new applications or running on other computing platforms.
Reference: [8] <author> N. Borenstein and N. Freed. </author> <title> Mime (multipurpose internet mail extensions) part one: Mechanisms for specifying and describing the format of internet message bodies. Internet RFC 1521, </title> <month> Sep </month> <year> 1993. </year> <note> Obsoletes RFC1341, Updated by RFC1590. </note>
Reference-contexts: Other documents may be fetched, new information may be generated, or information local to the client may be accessed. Safety is guaranteed by using an interpreter that executes only safe commands. We have implemented dynamic documents by storing documents as Tcl scripts and adding a new MIME content type <ref> [19, 8, 18] </ref>. We modified the NCSA Mosaic client to 1 run dynamic documents it retrieves through a Tcl interpreter. The resulting document is then displayed. In addition, we have altered the NCSA Mosaic client to hide the latency of wireless networks by caching and prefetching.
Reference: [9] <author> David H. Crocker. </author> <title> Standard for the format of arpa internet text messages. </title> <type> RFC 822, </type> <month> Aug. </month> <year> 1982. </year>
Reference-contexts: No changes are needed to the mobile Mosaic client. The browser employs caching and prefetching strategies based on the objects that are included in email messages. The browser understands the MIME standard for bundling and transporting sequences of multi-media objects in a normal RFC822 compliant mail message <ref> [9] </ref>. When a message is turned into a collection of links, the browser will prefetch the data in the background while displaying the messages. In this way the fetching of potentially large objects (e.g., GIF or PostScript images) can be overlapped with the user reading text.
Reference: [10] <author> S. Glassman. </author> <title> A caching relay for the world wibe web. </title> <booktitle> In Proc. First International World-Wide Web Conference, </booktitle> <pages> pages 60-76, </pages> <address> Geneva, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: We provide dynamic documents with the additional ability to explicitly flush items from the cache. This is the same basic method used by Glassman for the caching relay server <ref> [10] </ref>. This global caching policy is adequate. Several users have used our modified Mosaic on a SPARCstation 10 during the three-week period of our trace and have experienced a cache hit rate of about 40%. <p> One of the potential advantages that dynamic documents offer is that they allow document-specific caching and prefetch-ing. Such domain knowledge might reduce bandwidth consumption and might increase the number of cache hits. Glass-man reports on a relay server that caches documents and gives a detailed analysis of its performance <ref> [10] </ref>. 5 Conclusions We have described the design and implementation of a mobile web client in both stationary and mobile computing environments. It supports dynamic documents, caching, and 5 prefetching.
Reference: [11] <author> D. Goldberg and M. Tso. </author> <title> How to program networked portable computers. </title> <booktitle> In Proc. Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 30-33, </pages> <address> Napa, Califor-nia, </address> <month> Oct. </month> <year> 1993. </year>
Reference-contexts: In the mobile arena, a number of groups have been working on WWW clients (or other user interfaces) for mobile computers. Most of this work focuses on the question what part of the client to run on the mobile computer and what part to run on a stationary computer <ref> [11, 22] </ref>. Landay and Kauf-mann have used Scheme to ease the implementation of a split user interface [16]. Our work currently assumes that clients have enough processing power to run the client completely on the mobile computer.
Reference: [12] <author> H. Houh, C. Lindblad, and D. Wetherall. </author> <title> Active pages. </title> <booktitle> In Proc. First International World-Wide Web Conference, </booktitle> <pages> pages 265-270, </pages> <address> Geneva, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: Recent work uses scripting languages to implement intelligent agents [6]. A number of projects have been extending the applicability of the WWW and its clients. In particular, Houh et al. implemented capabilities for shipping code from the client to the server to implement, for example, queries <ref> [12] </ref>. Mallery discusses an implementation of an HTTP server in Common Lisp and argues for dynamically moving functionality from servers to client using fragments of Lisp code [17].
Reference: [13] <author> Adobe Systems Incorporated. </author> <title> PostScript Language Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1985. </year>
Reference-contexts: This is vastly better than relying on a general caching and invalidation policy built into Mosaic. 4 Related Work Using scripts for extending and customizing applications is not a new idea. Many examples of this approach can be found. A relatively successful example is PostScript <ref> [13] </ref>. Other examples include the Andrew Mail system, in which messages can contain fragments of LISP code that are executed at the receiver. This approach has been adopted for some more recent mailers that defined a safe subset of Tcl to do flexible mail processing.
Reference: [14] <author> Randy H. Katz. </author> <title> Adaptation and mobility in wireless information systems. </title> <journal> IEEE Personal Communications, </journal> <volume> 1(1) </volume> <pages> 6-17, </pages> <year> 1994. </year>
Reference-contexts: The combination of a slow processor, small memory, and a small disk is a particularly poor environment for the multi-media display common with web clients. Mobile computers often use wireless network links <ref> [14] </ref>. In general, we assume mobile clients will be connected to information rich networks. Only intermittently will mobile computers be wired or completely disconnected. Web traffic tends to consist of large bursts of activity during retrieval of multi-media documents alternating with quiescent periods while users examine the display.
Reference: [15] <author> J. J. Kistler and M. Satyanarayananan. </author> <title> Disconnected operation in the coda file system. </title> <booktitle> In Proc. Thirteenth Symposium on Operating System Principles, </booktitle> <pages> pages 213-225, </pages> <address> Pacific Grove, CA, </address> <month> Oct </month> <year> 1991. </year>
Reference-contexts: We have chosen to make the cache persistent across sessions in order to benefit from locality between Mosaic sessions. Additionally, a persistent cache may be pre-loaded for disconnected operation, as in the Coda file system <ref> [15] </ref>. We have implemented caching at the HTTP level for ease of implementation. When an HTTP request is made for a document that is not currently cached, the document is requested from the server, and an exact copy of the server's response is recorded. <p> Caching and prefetching have been used for mobile computers. In particular, the Coda project has worked on making a file system that runs well on mobile computers <ref> [15, 21] </ref>. One of the potential advantages that dynamic documents offer is that they allow document-specific caching and prefetch-ing. Such domain knowledge might reduce bandwidth consumption and might increase the number of cache hits.
Reference: [16] <author> J.A. Landay and T.R. </author> <title> Kaufmann. </title> <booktitle> User interface issues in mobile computing. In Proc. Fourth Workshop on Workstation Operating Systems, </booktitle> <pages> pages 40-48, </pages> <address> Napa, California, </address> <month> Oct </month> <year> 1993. </year>
Reference-contexts: Most of this work focuses on the question what part of the client to run on the mobile computer and what part to run on a stationary computer [11, 22]. Landay and Kauf-mann have used Scheme to ease the implementation of a split user interface <ref> [16] </ref>. Our work currently assumes that clients have enough processing power to run the client completely on the mobile computer.
Reference: [17] <author> J.C. Mallery. </author> <title> A common lisp hypermedia server. </title> <booktitle> In Proc. First International World-Wide Web Conference, </booktitle> <pages> pages 239-247, </pages> <address> Geneva, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: In particular, Houh et al. implemented capabilities for shipping code from the client to the server to implement, for example, queries [12]. Mallery discusses an implementation of an HTTP server in Common Lisp and argues for dynamically moving functionality from servers to client using fragments of Lisp code <ref> [17] </ref>. Our work differs from this work in that we propose dynamic documents as a general approach for customizing and extending the WWW clients, and apply them to a mobile computing environment.
Reference: [18] <author> K. Moore. Mime: </author> <title> Part two: Message header extensions for non-ascii text. Internet RFC 1522, </title> <month> Sep </month> <year> 1993. </year> <note> Obsoletes RFC1342. </note>
Reference-contexts: Other documents may be fetched, new information may be generated, or information local to the client may be accessed. Safety is guaranteed by using an interpreter that executes only safe commands. We have implemented dynamic documents by storing documents as Tcl scripts and adding a new MIME content type <ref> [19, 8, 18] </ref>. We modified the NCSA Mosaic client to 1 run dynamic documents it retrieves through a Tcl interpreter. The resulting document is then displayed. In addition, we have altered the NCSA Mosaic client to hide the latency of wireless networks by caching and prefetching.
Reference: [19] <author> J.K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Other documents may be fetched, new information may be generated, or information local to the client may be accessed. Safety is guaranteed by using an interpreter that executes only safe commands. We have implemented dynamic documents by storing documents as Tcl scripts and adding a new MIME content type <ref> [19, 8, 18] </ref>. We modified the NCSA Mosaic client to 1 run dynamic documents it retrieves through a Tcl interpreter. The resulting document is then displayed. In addition, we have altered the NCSA Mosaic client to hide the latency of wireless networks by caching and prefetching.
Reference: [20] <author> Dave Raggett. </author> <title> A review of the html+ document format. </title> <booktitle> In Proc. First International World-Wide Web Conference, </booktitle> <month> May </month> <year> 1994. </year>
Reference-contexts: A number of groups are addressing the problem of adapting the WWW/Mosaic by extending the HyperText Transfer Protocol (HTTP) (e.g. Common Gateway Interface), the HyperText Mark-up Language (HTML), or by introducing new protocols (e.g. HTTP+) <ref> [2, 3, 1, 20] </ref>. Unfortunately, these approaches are rigid and constrained because protocols function as standards for information exchange and, therefore, cannot be easily modified. We address this inflexibility by introducing dynamic documents.
Reference: [21] <author> M. Satyanarayanan, J. J. Kistler, L. B. Mummert, M. R. Ebling, P. Kumar, and Q. Lu. </author> <title> Experience with disconnected operation in a mobile environement. </title> <booktitle> In Proc. Symposium on Mobile and Location-Independent Computing, </booktitle> <pages> pages 11-28, </pages> <address> Cambridge, MA, </address> <month> Aug </month> <year> 1993. </year>
Reference-contexts: Caching and prefetching have been used for mobile computers. In particular, the Coda project has worked on making a file system that runs well on mobile computers <ref> [15, 21] </ref>. One of the potential advantages that dynamic documents offer is that they allow document-specific caching and prefetch-ing. Such domain knowledge might reduce bandwidth consumption and might increase the number of cache hits.
Reference: [22] <author> B. N. Schilit, M. M. Theimer, and B. B. Welch. </author> <title> Customizing mobile applications. </title> <booktitle> In Proc. Symposium on Mobile and Location-Independent Computing, </booktitle> <pages> pages 129-138, </pages> <address> Cambridge, MA, </address> <month> Aug </month> <year> 1993. </year> <month> 6 </month>
Reference-contexts: In the mobile arena, a number of groups have been working on WWW clients (or other user interfaces) for mobile computers. Most of this work focuses on the question what part of the client to run on the mobile computer and what part to run on a stationary computer <ref> [11, 22] </ref>. Landay and Kauf-mann have used Scheme to ease the implementation of a split user interface [16]. Our work currently assumes that clients have enough processing power to run the client completely on the mobile computer. <p> Schilit et al. propose dynamic environment variables for customizing mobile applications while they are moving around; this idea could easily be incorporated into dynamic documents <ref> [22] </ref>. Caching and prefetching have been used for mobile computers. In particular, the Coda project has worked on making a file system that runs well on mobile computers [15, 21]. One of the potential advantages that dynamic documents offer is that they allow document-specific caching and prefetch-ing.
References-found: 22

