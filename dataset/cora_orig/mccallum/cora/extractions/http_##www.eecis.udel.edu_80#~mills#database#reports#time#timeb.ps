URL: http://www.eecis.udel.edu:80/~mills/database/reports/time/timeb.ps
Refering-URL: http://www.eecis.udel.edu:80/~mills/reports.htm
Root-URL: http://www.cis.udel.edu
Abstract-found: 0
Intro-found: 1
Reference: [ALL74a] <author> Allan, D.W., J.H. Shoaf and D. Halford. </author> <title> Statistics of time and frequency data analysis. In: Blair, B.E. (Ed.). Time and Frequency Theory and Fundamentals . National Bureau of Standards Monograph 140, </title> <type> U.S. </type> <institution> Department of Commerce, </institution> <year> 1974, </year> <pages> 151-204. </pages>
Reference-contexts: A good estimator for R i ( t 0 + t) has been found to be the exponential average of these differences, which is given by <ref> [ALL74a] </ref> R ^ i ( t 0 ) + a i [ R ^ T i ( t 0 + t) - T i ( t 0 ) ] , where a i is an experimentally determined weight factor which depends on the estimated stability of the i th clock. <p> In order to calculate the weight factor w i (t) , it is necessary to determine the expected error e i (t) for each clock. An estimate of the magnitude of the unbiased error of the i th clock accumulated over the nominal interval t is <ref> [ALL74a] </ref> e i (t) = | T ^ 0.8 &lt; e e &lt; e i , where e i (t) and e e (t) are the accumulated error of the i th clock and entire clock ensemble, respectively. <p> Let t be the nominal interval over which these samples are averaged. The Allan variance s y 2 ( N , T , t) <ref> [ALL74a] </ref> is defined as &lt;s y 1 N 1 N A particularly useful formulation is N = 2 and T = t : &lt;s y 2 (t) = &lt; 2 so that s y 1 N -1 The Allan variance is particularly useful when comparing the intrinsic stability of the oscillators
Reference: [ALL74b] <author> Allan, D.W., J.E. Gray and H.E. Machlan. </author> <title> The National Bureau of Standards atomic time scale: generation, stability, accuracy and accessibility. In: Blair, B.E. (Ed.). Time and Frequency Theory and Fundamentals . National Bureau of Standards Monograph 140, </title> <type> U.S. </type> <institution> Department of Commerce, </institution> <year> 1974, </year> <pages> 205-231. </pages>
Reference-contexts: Clock Modelling The standard second (1 s) is defined as 9,192,631,770 periods of the radiation corresponding to the transition between the two hyperfine levels of the ground state of the cesium-133 atom <ref> [ALL74b] </ref>, which implies a granularity of about 1.1x10 -10 s. Other intervals can be determined as rational multiples of 1 s. Ordinary computer clocks have resolutions much larger than 1.1x10 -10 s, so the inherent error in resolving time relative to the standard second can be neglected.
Reference: [DAR81a] <institution> Defense Advanced Research Projects Agency. Internet Protocol. DARPA Network Working Group Report RFC-791, USC Information Sciences Institute, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: NTP and its implementations have evolved and proliferated in the Internet over the last decade, with NTP Version 2 adopted as an Internet Standard (Recommended) [MIL89] and NTP Version 3 adopted as a Proposed Standard [MIL92]. NTP is built on the Internet Protocol (IP) <ref> [DAR81a] </ref> and User Datagram Protocol (UDP) [POS80], which provide a connectionless transport mechanism; however, it is readily adaptable to other protocol suites. The protocol can operate in several modes appropriate to different scenarios involving private workstations, public servers and various subnet configurations.
Reference: [DAR81b] <institution> Defense Advanced Research Projects Agency. Internet Control Message Protocol. DARPA Network Working Group Report RFC-792, USC Information Sciences Institute, </institution> <month> September </month> <year> 1981. </year>
Reference-contexts: Network Time Protocol The Network Time Protocol (NTP) is used by Internet time servers and their peers to synchronize clocks, as well as automatically organize and maintain the time synchronization subnet itself. It is evolved from the Time Protocol [POS83] and the ICMP Timestamp Message <ref> [DAR81b] </ref>, but is specifically designed for high accuracy, stability and reliability, even when used over typical Internet paths involving multiple gateways and unreliable networks. This section contains an overview of the architecture and algorithms used in NTP. A formal description and error analysis of the protocol is contained in [MIL92].
Reference: [DEC89] <institution> Digital Time Service Functional Specification Version T.1.0.5. Digital Equipment Cor poration, </institution> <year> 1989. </year>
Reference-contexts: In this report the Network Time Protocol (NTP) developed for the Internet is used as an example, but others, such as the Digital Time Synchronization Service (DTSS) could be used as well. Section 3 gives an overview of NTP. The interested reader is directed to <ref> [DEC89] </ref> for a description of DTSS. A local clock is used in each computer in order to maintain the time. It includes an oscillator, clock counter and software support to provide the time in some format to the operating system and client processes.
Reference: [JON83] <author> Jones, R.H., and P.V. Tryon. </author> <title> Estimating time from atomic clocks. </title> <editor> J. </editor> <booktitle> Research of the National Bureau of Standards 88, 1 (January-February 1983), </booktitle> <pages> 17-24. </pages>
Reference: [LAM90] <author> Lamport, L. </author> <title> Concurrent reading and writing of clocks. </title> <journal> ACM Trans. Computing Systems 8, </journal> <month> 4 (November </month> <year> 1990), </year> <pages> 305-310. </pages>
Reference-contexts: If any word from the first read disagrees with the second, then read all the words again. While this is a simple and effective method, much more efficient and elegant methods are available <ref> [LAM90] </ref>. 4.1. The Fuzzball Clock Model The Fuzzball is an operating system for the PDP11 family of computers [MIL88]. It supports the Internet protocol suite and includes a number of hardware and software algorithms useful for precision timekeeping in the wide-area Internet.
Reference: [LIN80] <author> Lindsay, W.C., and A.V. Kantak. </author> <title> Network synchronization of random signals. </title> <journal> IEEE Trans. Communications COM-28, </journal> <month> 8 (August </month> <year> 1980), </year> <pages> 1260-1266. </pages>
Reference-contexts: Thus, both peers A and B can independently calculate delay and offset using a single bidirectional message stream. This is a symmetric, continuously sampled, time-transfer scheme similar to those used in some digital telephone networks <ref> [LIN80] </ref>. Among its advantages are that reliable message delivery is not required (see [MILL92] for an extended discussion of these issues).
Reference: [MAR85] <author> Marzullo, K., and S. Owicki. </author> <title> Maintaining the time in a distributed system. </title> <booktitle> ACM Operating Systems Review 19, </booktitle> <month> 3 (July </month> <year> 1985), </year> <pages> 44-54. 28 </pages>
Reference-contexts: The clockselection algorithm determines from among all peers a suitable subset of peers capable of providing the most accurate and trustworthy time using principles similar to those described in [VAS88]. This is done using a cascade of two subalgorithms, one based on interval intersections to cast out faulty peers <ref> [MAR85] </ref> and the other based on maximum-likelihood principles to improve accuracy [MIL91a].
Reference: [MIL88] <author> Mills, </author> <title> D.L. </title> <booktitle> The Fuzzball. Proc. ACM SIGCOMM 88 Symposium (Palo Alto, </booktitle> <address> CA, </address> <month> August </month> <year> 1988), </year> <pages> 115-122. </pages>
Reference-contexts: While this is a simple and effective method, much more efficient and elegant methods are available [LAM90]. 4.1. The Fuzzball Clock Model The Fuzzball is an operating system for the PDP11 family of computers <ref> [MIL88] </ref>. It supports the Internet protocol suite and includes a number of hardware and software algorithms useful for precision timekeeping in the wide-area Internet. The Fuzzball was instrumental in the design and testing of the Network Time Protocol and the related algorithms described in this report.
Reference: [MIL89] <author> Mills, </author> <title> D.L. Network Time Protocol (version 2) - specification and implementation. </title> <institution> DARPA Network Working Group Report RFC-1119, University of Delaware, </institution> <month> September </month> <year> 1989. </year>
Reference-contexts: NTP and its implementations have evolved and proliferated in the Internet over the last decade, with NTP Version 2 adopted as an Internet Standard (Recommended) <ref> [MIL89] </ref> and NTP Version 3 adopted as a Proposed Standard [MIL92]. NTP is built on the Internet Protocol (IP) [DAR81a] and User Datagram Protocol (UDP) [POS80], which provide a connectionless transport mechanism; however, it is readily adaptable to other protocol suites.
Reference: [MIL90] <author> Mills, </author> <title> D.L. Measured performance of the Network Time Protocol in the Internet system. </title> <journal> ACM Computer Communication Review 20, </journal> <month> 1 (January </month> <year> 1990), </year> <pages> 65-75. </pages>
Reference-contexts: The computer clocks of present operating systems such as Unix and Fuzzball are normally synchronized to within a few tens of milliseconds in the Internet of today <ref> [MIL90] </ref>. However, as workstations and networks become faster, there is every expectation that future applications will require timekeeping to the submillisecond regime. This requires in essence a complete reexamination of all elements of the timekeeping apparatus, including the clock design and its synchronization mechanism. <p> A formal description and error analysis of the protocol is contained in [MIL92]. A detailed description of the NTP architecture and protocols is contained in [MIL91a], while a summary of operational experience and performance is contained in <ref> [MIL90] </ref> and a detailed discussion on timescales is contained in [MIL91b]. NTP and its implementations have evolved and proliferated in the Internet over the last decade, with NTP Version 2 adopted as an Internet Standard (Recommended) [MIL89] and NTP Version 3 adopted as a Proposed Standard [MIL92]. <p> Therefore, errors accumulate at each level in the hierarchy due to local-clock errors and statistical transmission delays. In this report radio propagation phenomena and receiver inaccuracies at the primary server will be neglected. See <ref> [MIL90] </ref> for further discussion on these issues. It is necessary at the outset to identify two types of error bounds. Absolute error bounds establish the worst-case errors in a subnet where all time servers are operating correctly and synchronized to UTC.
Reference: [MIL91a] <author> Mills, </author> <title> D.L. Internet time synchronization: the Network Time Protocol. </title> <journal> IEEE Trans. Communications 39, </journal> <month> 10 (October </month> <year> 1991), </year> <pages> 1482-1493. </pages>
Reference-contexts: This section contains an overview of the architecture and algorithms used in NTP. A formal description and error analysis of the protocol is contained in [MIL92]. A detailed description of the NTP architecture and protocols is contained in <ref> [MIL91a] </ref>, while a summary of operational experience and performance is contained in [MIL90] and a detailed discussion on timescales is contained in [MIL91b]. <p> This is done using a cascade of two subalgorithms, one based on interval intersections to cast out faulty peers [MAR85] and the other based on maximum-likelihood principles to improve accuracy <ref> [MIL91a] </ref>. The resulting offsets of this subset are first combined on a weighted-average q 0 T 2 T 3 A 4 basis using an algorithm such as described later in this report and then processed by a phase-lock loop (PLL).
Reference: [MIL91b] <author> Mills, </author> <title> D.L. On the chronology and metrology of computer network timescales and their application to the Network Time Protocol. </title> <journal> ACM Computer Communications Review 21, </journal> <month> 5 (October </month> <year> 1991), </year> <pages> 8-17. </pages>
Reference-contexts: A formal description and error analysis of the protocol is contained in [MIL92]. A detailed description of the NTP architecture and protocols is contained in [MIL91a], while a summary of operational experience and performance is contained in [MIL90] and a detailed discussion on timescales is contained in <ref> [MIL91b] </ref>. NTP and its implementations have evolved and proliferated in the Internet over the last decade, with NTP Version 2 adopted as an Internet Standard (Recommended) [MIL89] and NTP Version 3 adopted as a Proposed Standard [MIL92].
Reference: [MIL92] <author> Mills, </author> <title> D.L. Network Time Protocol (Version 3) specification, implementation and analysis. </title> <institution> DARPA Network Working Group Report RFC-1305, University of Delaware, </institution> <month> March </month> <year> 1992, </year> <pages> 113 pp. </pages>
Reference-contexts: This section contains an overview of the architecture and algorithms used in NTP. A formal description and error analysis of the protocol is contained in <ref> [MIL92] </ref>. A detailed description of the NTP architecture and protocols is contained in [MIL91a], while a summary of operational experience and performance is contained in [MIL90] and a detailed discussion on timescales is contained in [MIL91b]. <p> NTP and its implementations have evolved and proliferated in the Internet over the last decade, with NTP Version 2 adopted as an Internet Standard (Recommended) [MIL89] and NTP Version 3 adopted as a Proposed Standard <ref> [MIL92] </ref>. NTP is built on the Internet Protocol (IP) [DAR81a] and User Datagram Protocol (UDP) [POS80], which provide a connectionless transport mechanism; however, it is readily adaptable to other protocol suites. <p> As shown in the figure, the computed delays and offsets for each peer are processed by the clock-filter algorithm to reduce incidental timing noise. As described in <ref> [MIL92] </ref>, this algorithm selects from among the last several samples the one with minimum delay and presents the associated offset as the output.
Reference: [NIS90] <institution> NIST Time and Frequency Dissemination Services . NBS Special Publication 432 (Revised 1990), National Institute of Science and Technology, U.S. Department of Commerce, </institution> <year> 1990. </year>
Reference-contexts: If these computers are to agree with Universal Coordinated Time (UTC), a means must be provided to synchronize the network time to UTC as disseminated by various means <ref> [NIS90] </ref>. The computer clocks of present operating systems such as Unix and Fuzzball are normally synchronized to within a few tens of milliseconds in the Internet of today [MIL90]. However, as workstations and networks become faster, there is every expectation that future applications will require timekeeping to the submillisecond regime.
Reference: [POS80] <author> Postel, J. </author> <title> User Datagram Protocol. </title> <institution> DARPA Network Working Group Report RFC-768, USC Information Sciences Institute, </institution> <month> August </month> <year> 1980. </year>
Reference-contexts: NTP is built on the Internet Protocol (IP) [DAR81a] and User Datagram Protocol (UDP) <ref> [POS80] </ref>, which provide a connectionless transport mechanism; however, it is readily adaptable to other protocol suites. The protocol can operate in several modes appropriate to different scenarios involving private workstations, public servers and various subnet configurations.
Reference: [POS83] <author> Postel, J. </author> <title> Time protocol. </title> <institution> DARPA Network Working Group Report RFC-868, USC Information Sciences Institute, </institution> <month> May </month> <year> 1983. </year>
Reference-contexts: Network Time Protocol The Network Time Protocol (NTP) is used by Internet time servers and their peers to synchronize clocks, as well as automatically organize and maintain the time synchronization subnet itself. It is evolved from the Time Protocol <ref> [POS83] </ref> and the ICMP Timestamp Message [DAR81b], but is specifically designed for high accuracy, stability and reliability, even when used over typical Internet paths involving multiple gateways and unreliable networks. This section contains an overview of the architecture and algorithms used in NTP.
Reference: [RAM90] <author> Ramanathan, P., K.G. Shin and R.W. Butler. </author> <title> Fault-tolerant clock synchronization in distributed systems. </title> <booktitle> IEEE Computer 23, </booktitle> <month> 10 (October </month> <year> 1990), </year> <pages> 33-42. </pages>
Reference-contexts: In practice each NTP server synchronizes with several other servers in order to survive outages and Byzantine failures using methods similar to those described in [SHI87]. with the phase-lock methods summarized in <ref> [RAM90] </ref>. Timestamps exchanged between the server and possibly many other subnet peers are used to determine individual roundtrip delays and clock offsets, as well as provide reliable error bounds.
Reference: [SHI87] <author> Shin, K.G., and P. Ramanathan. </author> <title> Clock synchronization of a large multiprocessor system in the presence of malicious faults. </title> <journal> IEEE Trans. Computers C-36, </journal> <month> 1 (January </month> <year> 1987), </year> <pages> 2-12. </pages>
Reference-contexts: In practice each NTP server synchronizes with several other servers in order to survive outages and Byzantine failures using methods similar to those described in <ref> [SHI87] </ref>. with the phase-lock methods summarized in [RAM90]. Timestamps exchanged between the server and possibly many other subnet peers are used to determine individual roundtrip delays and clock offsets, as well as provide reliable error bounds.
Reference: [SCH90] <author> Schneider, </author> <title> F.B. Implementing fault-tolerant services using the state machine approach: a tutorial. </title> <journal> ACM Computing Surveys 22, </journal> <month> 4 (December </month> <year> 1990), </year> <pages> 299-320. </pages>
Reference-contexts: With the fuzzball design it is necessary to provide a variable used to remember the last clock reading. At the next clock reading the value returned is the maximum of the previous and current clock readings. In fault-tolerant computer architectures using replicated finitestate machines <ref> [SCH90] </ref> it is necessary that every distinct event be assigned a unique timestamp. In the Fuzzball model this is assured as long as the minimum interval between successive clock readings is greater than 1 ms (one tick).
Reference: [SMI86] <author> Smith, J. </author> <title> Modern Communications Circuits . McGraw-Hill, </title> <address> New York, NY, </address> <year> 1986. </year>
Reference-contexts: The PLL provides the means to adjust the local-clock time and frequency in response to corrections delivered by the timesynchronization protocol. Its behavior can be described using an extensive body of mathematics developed for the purpose, such as given in <ref> [SMI86] </ref> and elaborated in this section. In addition, a design example is given for implementation guidance in operating-systems environments such as Unix and Fuzzball. Table 1 summarizes the quantities ordinarily treated as variables in the model.
Reference: [VAS88] <author> Vasanthavada, N., </author> <title> and P.N. Marinos. Synchronization of fault-tolerant clocks in the presence of malicious failures. </title> <journal> IEEE Trans. Computers C-37, </journal> <month> 4 (April </month> <year> 1988), </year> <pages> 440-448. </pages>
Reference-contexts: Among its advantages are that reliable message delivery is not required (see [MILL92] for an extended discussion of these issues). The clockselection algorithm determines from among all peers a suitable subset of peers capable of providing the most accurate and trustworthy time using principles similar to those described in <ref> [VAS88] </ref>. This is done using a cascade of two subalgorithms, one based on interval intersections to cast out faulty peers [MAR85] and the other based on maximum-likelihood principles to improve accuracy [MIL91a].
Reference: [WIL90] <author> Wilcox, </author> <title> D.R. Backplane bus distributed realtime clock synchronization. </title> <type> Technical Report 1400, </type> <institution> Naval Ocean Systems Center, </institution> <month> December </month> <year> 1990, </year> <pages> 52 pp. </pages>
Reference-contexts: The clock frequency is adjusted by changing the value of the increment, in order to make the counter run faster or slower. The precision of this simple clock model, which is a software emulation of the phase accumulation method described in <ref> [WIL90] </ref>, is limited to the value of the increment, usually about 10 ms. This software clock model requires a processor interrupt on every tick, which can cause significant overhead if the increment is much smaller than 1 ms with the newer RISC processors. <p> If it is not possible to vary the oscillator frequency, which might be the case if the oscillator is an external frequency standard, a design such as shown in Figure 5b may be used. This approach is similar to the periodic phase modification method described in <ref> [WIL90] </ref>. It includes an oscillator operating at a fixed frequency f c and a prescaler which divides the oscillator frequency to the working frequency of the clock. The prescaler includes a state machine to advance or retard the phase of the oscillator by one cycle. <p> This interval provides a maximum frequency adjustment range of -125 ppm. The adjustment opportunities are created using the interval-timer facility, which is a feature of most operating systems and independent of the time-of-day clock. This design is similar to the hidden offset method described in <ref> [WIL90] </ref>; however, that method avoids violating the monotonic requirement by using special hardware which is not commonly available in real-time clock interfaces. With the fuzzball design it is necessary to provide a variable used to remember the last clock reading.
Reference: [WIL91] <author> Wilcox, </author> <title> D.R. Local area network distributed realtime clock synchronization. </title> <type> Technical Report 1466, </type> <institution> Naval Ocean Systems Center, </institution> <month> November </month> <year> 1991, </year> <pages> 77 pp. 29 </pages>
Reference-contexts: It is interesting to conjecture on the design of a processor assist that could provide all of the above functions in a compact, general-purpose hardware interface. In a design similar to that described in <ref> [WIL91] </ref>, the interface might consist of a multifunction timer chip such as the AMD 9513A, which includes five 16-bit counters, each with programmable load and hold registers, plus an onboard crystal oscillator, prescaler and interface circuitry.
References-found: 25

