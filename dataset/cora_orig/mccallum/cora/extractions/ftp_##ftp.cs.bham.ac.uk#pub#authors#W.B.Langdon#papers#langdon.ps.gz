URL: ftp://ftp.cs.bham.ac.uk/pub/authors/W.B.Langdon/papers/langdon.ps.gz
Refering-URL: http://www.cs.bham.ac.uk/~wbl/WBL_papers.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Genetic Programming and Data Structures  
Author: William Benjamin Langdon 
Degree: A dissertation submitted in partial fulfillment of the requirements for the degree of Doctor of Philosophy of the  
Date: 27 September 1996  
Address: College London  
Affiliation: University of London. Department of Computer Science University  
Abstract-found: 0
Intro-found: 1
Reference: [ Abbott, 1991 ] <author> R. J. Abbott. </author> <title> Niches as a GA divide-and-conquer strategy. </title> <editor> In Art Chap-man and Leonard Myers, editors, </editor> <booktitle> Proceedings of the Second Annual AI Symposium for the California State University. </booktitle> <institution> California State University, </institution> <year> 1991. </year>
Reference: [ Aho and Ullman, 1995 ] <author> Alfred V. Aho and Jeffrey D. Ullman. </author> <booktitle> Foundations of Computer Science. </booktitle> <publisher> Computer Science Press, </publisher> <address> C edition, </address> <year> 1995. </year>
Reference: [ Aho et al., 1987 ] <author> A V Aho, J E Hopcroft, and J D Ullman. </author> <title> Data Structures and Algorithms. </title> <publisher> Addison-Wesley, </publisher> <year> 1987. </year>
Reference: [ Altenberg, 1994 ] <author> Lee Altenberg. </author> <title> The evolution of evolvability in genetic programming. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, </booktitle> <pages> pages 47-74. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: In particular it applies to genetic algorithms (GAs) <ref> [ Altenberg, 1994 ] </ref> . <p> Therefore restrictions on program size may on average reduce the number of such functions in the next generation compared to the number predicted by considering only fitness (i.e. by Price's Theorem). <ref> [ Altenberg, 1994, page 47 ] </ref> argues Price's theorem can be applied to genetic programming and we shall show experimental evidence for it based on genes composed of a single GP primitive. 7.1.5 Application of Price's Theorem to the GP Stack Problem In this section we experimentally test Price's Theorem by
Reference: [ Altenberg, 1995 ] <author> Lee Altenberg. </author> <title> The Schema Theorem and Price's Theorem. </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 23-49, </pages> <address> Estes Park, Colorado, USA, 31 July-2 August 1994 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Indeed <ref> [ Altenberg, 1995 ] </ref> shows Holland's schema theorem [ Holland, 1973; Holland, 1992 ] can be derived from Price's Theorem. This and other analysis, leads [ Altenberg, 1995, page 43 ] to conclude "the Schema Theorem has no implications for how well a GA is performing". <p> Indeed [ Altenberg, 1995 ] shows Holland's schema theorem [ Holland, 1973; Holland, 1992 ] can be derived from Price's Theorem. This and other analysis, leads <ref> [ Altenberg, 1995, page 43 ] </ref> to conclude "the Schema Theorem has no implications for how well a GA is performing". While the proof in [ Price, 1970 ] assumes discrete generations the result "can be applied to species with overlapping, inter-breeding generations".
Reference: [ Andre and Koza, 1995 ] <author> David Andre and John R. Koza. </author> <title> Parallel genetic programming on a network of transputers. </title> <editor> In Justinian P. Rosca, editor, </editor> <booktitle> Proceedings of the Workshop on Genetic Programming: From Theory to Real-World Applications, </booktitle> <pages> pages 111-120, </pages> <address> Tahoe City, California, USA, </address> <month> 9 July </month> <year> 1995. </year>
Reference: [ Andre and Teller, 1996 ] <author> David Andre and Astro Teller. </author> <title> A study in program response and the negative effects of introns in genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 12-20, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ Andre, 1994a ] <author> David Andre. </author> <title> Automatically defined features: The simultaneous evolution of 2-dimensional feature detectors and an algorithm for using them. </title> <editor> In Kenneth E. </editor> <volume> 229 230 Kinnear, </volume> <editor> Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 23, </booktitle> <pages> pages 477-494. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Andre, 1994b ] <author> David Andre. </author> <title> Evolution of mapmaking ability: Strategies for the evolution of learning, planning, and memory using genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <volume> volume 1, </volume> <pages> pages 250-255, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: Work so far <ref> [ Teller, 1994a; Andre, 1994b; Brave, 1995; Jannink, 1994 ] </ref> shows GP can automatically create programs which explicitly use directly addressable (indexed) memory to solve problems and Chapters 3, 4 and 5 demonstrate that GP can automatically generate abstract data structures such as stacks, queues and lists. <p> For example [ Raik and Browne, 1996 ] use indexed memory to show that on a reactive task, GP with explicit memory performs better than GP with implicit memory. Indexed memory, as it allows random access, provides little "structure" and could be problem independent, however in <ref> [ Andre, 1994b; Andre, 1995b; Andre, 1995a ] </ref> the indexed memory is made problem specific by treating it as two dimensional and sizing it so that it is isomorphic to a small problem "world". 171 That is the memory is given a structure appropriate to the problem. <p> Using this data structure the GP was able to solve a navigation problem which requires it to form a mental model of its world. This builds on <ref> [ Andre, 1994b ] </ref> but replaces a predetermined isomorphism between indexed memory and the problem "world" by a more complex data structure that is appropriate to the problem. 6.4.6 Linked List Data Structure [ Haynes and Wainwright, 1995 ] requires GP to evolve control programs for agents which have to survive
Reference: [ Andre, 1994c ] <author> David Andre. </author> <title> Learning and upgrading rules for an OCR system using genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: This may involve correcting bugs in existing code or adapting code to new requirements. In the software industry maintenance is a major task but has as yet attracted little interest from GP. [ Petry and Dunay, 1995 ] is one exception and <ref> [ Andre, 1994c ] </ref> considers using GP to extend the functionality of human written optical character recognition programs (i.e. maintain them).
Reference: [ Andre, 1995a ] <author> David Andre. </author> <title> The automatic programming of agents that learn mental models and create simple plans of action. </title> <booktitle> In IJCAI-95 Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, </booktitle> <volume> volume 1, </volume> <pages> pages 741-747, </pages> <address> Mon-treal, Quebec, Canada, 20-25 August 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: For example [ Raik and Browne, 1996 ] use indexed memory to show that on a reactive task, GP with explicit memory performs better than GP with implicit memory. Indexed memory, as it allows random access, provides little "structure" and could be problem independent, however in <ref> [ Andre, 1994b; Andre, 1995b; Andre, 1995a ] </ref> the indexed memory is made problem specific by treating it as two dimensional and sizing it so that it is isomorphic to a small problem "world". 171 That is the memory is given a structure appropriate to the problem.
Reference: [ Andre, 1995b ] <author> David Andre. </author> <title> The evolution of agents that build mental models and create simple plans using genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 248-255, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: For example [ Raik and Browne, 1996 ] use indexed memory to show that on a reactive task, GP with explicit memory performs better than GP with implicit memory. Indexed memory, as it allows random access, provides little "structure" and could be problem independent, however in <ref> [ Andre, 1994b; Andre, 1995b; Andre, 1995a ] </ref> the indexed memory is made problem specific by treating it as two dimensional and sizing it so that it is isomorphic to a small problem "world". 171 That is the memory is given a structure appropriate to the problem.
Reference: [ Andre, 1996 ] <author> David Andre. </author> <type> Personal communication, </type> <month> 15 Jul </month> <year> 1996. </year>
Reference-contexts: An alternative point typing allows crossover to move genetic material between trees). Branch typing means there are effectively 5 fi 12 = 60 primitives in the stack problem. <ref> [ Andre, 1996 ] </ref> also reports GP runs with similar numbers of primitives where one or more functions either evolved out of the population (i.e. became extinct) or became rare and suggests it was a factor in the decision to use mutation (albeit at a low rate).
Reference: [ Andrews and Prager, 1994 ] <author> Martin Andrews and Richard Prager. </author> <title> Genetic programming for the acquisition of double auction market strategies. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 16, </booktitle> <pages> pages 355-368. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Angeline and Pollack, 1993 ] <author> Peter J. Angeline and Jordan B. Pollack. </author> <title> Competitive environments evolve better solutions for complex tasks. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 264-270, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <month> 17-21 July </month> <year> 1993. </year> <note> Morgan Kauf-mann. </note>
Reference-contexts: If we continue to test all evolved programs on all the training set then GP machine resource usage will grow at least quadratically with task complexity. However techniques such as co-evolution <ref> [ Angeline and Pollack, 1993 ] </ref> , soft brood selection [ Tackett, 1995a ] and sparse training sets [ Francone et al., 1996 ] indicate it may not be necessary to exhaustively test every evolved program. 8.1 Recommendations A number of practical recommendations for GP work can be made.
Reference: [ Angeline and Pollack, 1994 ] <author> P. J. Angeline and J. B. Pollack. </author> <title> Coevolving high-level representations. </title> <editor> In Christopher G. Langton, editor, </editor> <booktitle> Artificial Life III, volume XVII of SFI Studies in the Sciences of Complexity, </booktitle> <pages> pages 55-71, </pages> <address> Sante Fe, New Mexico, 15-19 June 1992 1994. </address> <publisher> Addison-Wesley. </publisher> <pages> 231 </pages>
Reference: [ Angeline, 1993 ] <author> Peter John Angeline. </author> <title> Evolutionary Algorithms and Emergent Intelligence. </title> <type> PhD thesis, </type> <institution> Ohio State University, </institution> <year> 1993. </year>
Reference-contexts: Typically this serves only to increase the convergence of the population. An number of attempts to "scale up" GP have been made based upon imposing functional abstraction on individuals in the population <ref> [ Koza, 1994; Angeline, 1993; Rosca, 1995 ] </ref> . These have had a degree of success.
Reference: [ Angeline, 1994 ] <author> Peter John Angeline. </author> <title> Genetic programming and emergent intelligence. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 4, </booktitle> <pages> pages 75-98. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: There are a number of techniques which automatically change the representation. The following three techniques co-evolve the representation as the population itself evolves; The Genetic Library Builder (GLiB) <ref> [ Angeline, 1994 ] </ref> , Automatically Defined Functions (ADFs) [ Koza, 1994 ] and Adaptive Representations [ Rosca, 1995 ] . [ Koza, 1994, page 619 ] argues ADFs and other representations provide a different lens with which to view the solution space and that ADFs may help solve a problem
Reference: [ Angeline, 1996a ] <author> Peter J. Angeline. </author> <title> An investigation into the sensitivity of genetic programming to the frequency of leaf selection during subtree crossover. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 21-29, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ Angeline, 1996b ] <author> Peter J. Angeline. </author> <title> Two self-adaptive crossover operators for genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 5, </booktitle> <pages> pages 89-110. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference: [ Atlan et al., 1994 ] <author> Laurent Atlan, Jerome Bonnet, and Martine Naillon. </author> <title> Learning distributed reactive strategies by genetic programming for the general job shop problem. </title> <booktitle> In Proceedings of the 7th annual Florida Artificial Intelligence Research Symposium, </booktitle> <address> Pensacola, Florida, USA, May 1994. </address> <publisher> IEEE Press. </publisher>
Reference: [ Back et al., 1991 ] <editor> Thomas Back, Frank Hoffmeister, and Hans-Paul Schwefel. </editor> <title> A survey of evolution strategies. </title> <editor> In Richard K. Belew and Lashon B. Booker, editors, </editor> <booktitle> Proceedings of fourth International Conference on Genetic Algorithms, </booktitle> <pages> pages 2-10, </pages> <address> University of California - San Diego, La Jolla, CA, USA, 13-16 July 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Banzhaf, 1993 ] <editor> Wolfgang Banzhaf. </editor> <title> Genetic programming for pedestrians. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> page 628, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <month> 17-21 July </month> <year> 1993. </year> <note> Mor-gan Kaufmann. </note>
Reference: [ Beasley et al., 1993a ] <author> David Beasley, David R. Bull, and Ralph R. Martin. </author> <title> Reducing epistasis in combinatorial problems by expansive coding. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 400-407, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher> <pages> 232 </pages>
Reference: [ Beasley et al., 1993b ] <author> David Beasley, David R. Bull, and Ralph R. Martin. </author> <title> A sequential niche technique for multimodal function optimisation. </title> <journal> Evolutionary Computation, </journal> <volume> 1(2) </volume> <pages> 101-125, </pages> <year> 1993. </year>
Reference: [ Bettenhausen et al., 1995 ] <author> K. D. Bettenhausen, S. Gehlen, P. Marenbach, and H. Tolle. </author> <title> BioX++ New results and conceptions concerning the intelligent control of biotechno-logical processes. </title> <editor> In A. Munack and K. Schugerl, editors, </editor> <booktitle> 6th International Conference on Computer Applications in Biotechnology, </booktitle> <pages> pages 324-327. </pages> <publisher> Elsevier Science, </publisher> <year> 1995. </year>
Reference: [ Beyer, 1995 ] <author> Hans-Georg Beyer. </author> <title> Towards a theory of evolution strategies: </title> <booktitle> On the benefits of sex- the (u/u,l) theory. Evolutionary Computation, </booktitle> <volume> 3(1) </volume> <pages> 81-111, </pages> <year> 1995. </year>
Reference: [ Blickle and Thiele, 1994 ] <author> Tobias Blickle and Lothar Thiele. </author> <title> Genetic programming and redundancy. </title> <editor> In J. Hopf, editor, </editor> <booktitle> Genetic Algorithms within the Framework of Evolutionary Computation (Workshop at KI-94, Saarbrucken), </booktitle> <pages> pages 33-38, </pages> <address> Im Stadtwald, Building 44, D-66123 Saarbrucken, Germany, </address> <year> 1994. </year> <institution> Max-Planck-Institut fur Informatik (MPI-I-94-241). </institution>
Reference: [ Blickle and Thiele, 1995 ] <author> Tobias Blickle and Lothar Thiele. </author> <title> A comparison of selection schemes used in genetic algorithms. </title> <type> TIK-Report 11, </type> <institution> TIK Institut fur Technische In-formatik und Kommunikationsnetze, Computer Engineering and Networks Laboratory, ETH, Swiss Federal Institute of Technology, </institution> <address> Gloriastrasse 35, 8092 Zurich, Switzerland, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: created by reproduction (0.1) p c = Proportion of offspring created by crossover (0.9) p r + p c = 1 Tournament Selection in Steady State GA The fitness distribution of individuals selected by tournament selection (R i =N ) t (R i1 =N ) t can be derived following <ref> [ Blickle and Thiele, 1995, page 15 ] </ref> : * The chance the winner of a tournament will have fitness f i is the same as the chance all members of the tournament have fitness f i (if any of them have a fitness greater than f i then they would
Reference: [ Blickle, 1996 ] <author> Tobias Blickle. </author> <title> Evolving compact solutions in genetic programming: A case study. </title> <editor> In Hans-Michael Voigt, Werner Ebeling, Ingo Rechenberg, and Hans-Paul Schwe-fel, editors, </editor> <booktitle> Parallel Problem Solving From Nature IV. Proceedings of the International Conference on Evolutionary Computation, volume 1141 of LNCS, </booktitle> <address> Berlin, Germany, 22-26 September 1996. </address> <publisher> Springer-Verlag. </publisher>
Reference: [ Bohm and Geyer-Schulz, 1996 ] <author> Walter Bohm and Andreas Geyer-Schulz. </author> <title> Exact uniform initialization for genetic programming. </title> <editor> In Richard K. Belew and Michael Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms IV, </booktitle> <address> University of San Diego, CA, USA, </address> <month> 3-5 August </month> <year> 1996. </year>
Reference: [ Brave, 1995 ] <author> Scott Brave. </author> <title> Using genetic programming to evolve mental models. </title> <editor> In S. Louis, editor, </editor> <booktitle> Fourth Golden West Conference on Intelligent Systems, </booktitle> <pages> pages 91-96. </pages> <booktitle> International Society for Computers and their Applications - ISCA, </booktitle> <month> 12-14 June </month> <year> 1995. </year> <month> 233 </month>
Reference-contexts: Work so far <ref> [ Teller, 1994a; Andre, 1994b; Brave, 1995; Jannink, 1994 ] </ref> shows GP can automatically create programs which explicitly use directly addressable (indexed) memory to solve problems and Chapters 3, 4 and 5 demonstrate that GP can automatically generate abstract data structures such as stacks, queues and lists. <p> That is with strongly typed GP data structures appropriate to the problem are readily chosen (STGP also prevents some kinds of abuse of the data structures). 6.4.5 Graph Data Structures <ref> [ Brave, 1995; Brave, 1996a ] </ref> shows GP using a graph data structure which provides primitives to connect nodes and follow connections. Using this data structure the GP was able to solve a navigation problem which requires it to form a mental model of its world.
Reference: [ Brave, 1996a ] <author> Scott Brave. </author> <title> The evolution of memory and mental models using genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 261-266, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: That is with strongly typed GP data structures appropriate to the problem are readily chosen (STGP also prevents some kinds of abuse of the data structures). 6.4.5 Graph Data Structures <ref> [ Brave, 1995; Brave, 1996a ] </ref> shows GP using a graph data structure which provides primitives to connect nodes and follow connections. Using this data structure the GP was able to solve a navigation problem which requires it to form a mental model of its world.
Reference: [ Brave, 1996b ] <author> Scott Brave. </author> <title> Evolving deterministic finite automata using cellular encoding. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 39-44, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ Brave, 1996c ] <author> Scott Brave. </author> <title> Evolving recursive programs for tree search. </title> <editor> In Peter J. An-geline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 10, </booktitle> <pages> pages 203-220. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: A similar approach is taken in <ref> [ Brave, 1996c ] </ref> where memory is isomorphic to a full binary tree "world". The simple indexed memory used in [ Crepeau, 1995 ] is not obviously structured in a problem specific manner.
Reference: [ Brooks, 1991 ] <author> Rodney A. Brooks. </author> <title> Intelligence without reason. </title> <type> Technical report, </type> <institution> MIT AI Lab, </institution> <month> Apr </month> <year> 1991. </year> <note> AI Memo no 1293, Prepared for Computers and Thought. </note>
Reference: [ Bruce, 1995 ] <author> Wilker Shane Bruce. </author> <title> The Application of Genetic Programming to the Automatic Generation of Object-Oriented Programs. </title> <type> PhD thesis, </type> <institution> School of Computer and Information Sciences, Nova Southeastern University, </institution> <address> 3100 SW 9th Avenue, Fort Laud-erdale, Florida 33315, USA, </address> <month> December </month> <year> 1995. </year>
Reference-contexts: A smaller terminal/function set without special primitives to manipulate "aux", having only general primitives and indexed memory, might avoid the trapping by "deceptive solutions" but partial solutions of any sort might then not evolve in a reasonable time. (Interestingly <ref> [ Bruce, 1995 ] </ref> adopts a similar terminal/function set in his experiments on the evolution of stacks and other data structures). <p> It would be interesting to discover to what extend the problems are due to provision of the auxiliary registers which allow the evolution of stacks but also allow ready formation of deceptive partial solutions. If these were not used, would stacks still evolve? It is interesting that <ref> [ Bruce, 1995 ] </ref> uses very similar additional memory in his work. Alternatively perhaps cleverer genetic operations could avoid the trap by changing programs from using one type of memory to another in a consistent manner so new programs continue to work as before.
Reference: [ Bruce, 1996 ] <author> Wilker Shane Bruce. </author> <title> Automatic generation of object-oriented programs using genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 267-272, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Or 1=100 th of the effort to solve the whole problem. Whilst <ref> [ Bruce, 1996 ] </ref> does not deal with program maintenance, he reports a similar impressive reduction effort required to evolve a complete solution when individual (five) components are evolved sequentially rather than simultaneously.
Reference: [ Carroll, 1871 ] <author> Lewis Carroll. </author> <title> Through the Looking-Glass, and What Alice Found There. </title> <publisher> Macmillan, </publisher> <pages> 1871. </pages>
Reference-contexts: A dynamic fitness function would aim to continually stretch the population, keeping a carrot dangling in front of it. (This is also known as the "Red Queen" <ref> [ Carroll, 1871 ] </ref> approach where the population must continually improve itself).
Reference: [ Cartwright and Harris, 1993 ] <author> Hugh M. Cartwright and Stephen P. Harris. </author> <title> Analysis of the distribution of airborne pollution using genetic algorithms. Atmospheric Environment, </title> <address> 27A(12):1783-1791, </address> <year> 1993. </year>
Reference: [ Collins, 1992 ] <author> Robert J. Collins. </author> <title> Studies in Artificial Evolution. </title> <type> PhD thesis, </type> <institution> UCLA, Artificial Life Laboratory, Department of Computer Science, University of California, </institution> <address> Los Angeles, LA CA 90024, USA, </address> <year> 1992. </year>
Reference-contexts: Each time a new individual is created, a 3 fi 3 square neighbourhood on the torus (known as a deme) is selected at random. Parents and the individual their offspring will re place are selected from this deme rather than from the whole population <ref> [ Tackett, 1994; Collins, 1992 ] </ref> . 155 Table 6.2: Number of correctly nested and incorrectly nested bracket test sentences of each length used in the nested bracket test case. Longer incorrect sentences were chosen at random from all the possible incorrect sentences of the same length.
Reference: [ Cramer, 1985 ] <author> Nichael Lynn Cramer. </author> <title> A representation for the adaptive generation of simple sequential programs. </title> <editor> In John J. Grefenstette, editor, </editor> <booktitle> Proceedings of an In 234 ternational Conference on Genetic Algorithms and the Applications, </booktitle> <pages> pages 183-187, </pages> <institution> Carnegie-Mellon University, </institution> <address> Pittsburgh, PA, USA, </address> <month> 24-26 July </month> <year> 1985. </year>
Reference-contexts: However there are a number of papers where programs containing loops have been successfully evolved. They used a number of techniques to address the problem of indefinite loops; <ref> [ Cramer, 1985 ] </ref> aborts any program that fails to stop within a specified time, [ Teller, 1994b ] proposes two solutions: 131 "popcorn" which allows fitness testing to continue whilst it continues to do something interesting (which may increase its fitness) but imposes a maximum waiting time between interesting events, <p> The principle exception is Teller's signal processing system PADO. This section groups publications according to memory structure, starting with the simplest and finishes with consideration of PADO. 6.4.1 Scalars <ref> [ Cramer, 1985 ] </ref> showed programs which use simple scalar memory could be evolved, however the paper concentrates upon program representation not use of memory. [ Huelsber-gen, 1996 ] solved the same problem, albeit with different primitives etc., but also uses simple scalar memory.
Reference: [ Crepeau, 1995 ] <author> Ronald L. Crepeau. </author> <title> Genetic evolution of machine language software. </title> <editor> In Justinian P. Rosca, editor, </editor> <booktitle> Proceedings of the Workshop on Genetic Programming: From Theory to Real-World Applications, </booktitle> <pages> pages 121-134, </pages> <address> Tahoe City, California, USA, </address> <month> 9 July </month> <year> 1995. </year>
Reference-contexts: The random data patterns have the same distribution of values as that inserted into the list. In most other published work indexed memory is initialised to zero (as in Chapters 3 and 4) however [ Jannink, 1994, page 436 ] describes a regular non-zero initialization pattern. <ref> [ Crepeau, 1995, page 132 ] </ref> "memory locations (are) initially filled with random 8 bit values" as this makes it "highly probably" that problem specific values needed to solve the problem "are somewhere in memory". <p> A similar approach is taken in [ Brave, 1996c ] where memory is isomorphic to a full binary tree "world". The simple indexed memory used in <ref> [ Crepeau, 1995 ] </ref> is not obviously structured in a problem specific manner. The author suggests the success of GP at evolving a "Hello.World" program by manipulating (a subset of) Z80 machine code may in part be due to initialising memory with random 8 bit values. <p> The author suggests the success of GP at evolving a "Hello.World" program by manipulating (a subset of) Z80 machine code may in part be due to initialising memory with random 8 bit values. Thus it is "highly probable" <ref> [ Crepeau, 1995, page 132 ] </ref> that the needed ascii values are initially in the indexed memory.
Reference: [ Daida et al., 1996 ] <author> Jason M. Daida, Tommaso F. Bersano-Begey, Steven J. Ross, and John F. Vesecky. </author> <title> Computer-assisted design of image classification algorithms: Dynamic and static fitness evaluations in a scaffolded genetic programming environment. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 279-284, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ Das et al., 1994 ] <author> Sumit Das, Terry Franguidakis, Michael Papka, Thomas A. DeFanti, and Daniel J. Sandin. </author> <title> A genetic programming application in virtual reality. </title> <booktitle> In Proceedings of the first IEEE Conference on Evolutionary Computation, </booktitle> <volume> volume 1, </volume> <pages> pages 480-484, </pages> <address> Orlando, Florida, USA, </address> <month> 27-29 June </month> <year> 1994. </year> <title> IEEE Press. </title> <booktitle> Part of 1994 IEEE World Congress on Computational Intelligence, </booktitle> <address> Orlando, Florida. </address>
Reference: [ Davis, 1991 ] <editor> Lawrence Davis, editor. </editor> <booktitle> Handbook of Genetic Algorithms. </booktitle> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, </address> <year> 1991. </year>
Reference: [ Davis, 1994 ] <author> James Davis. </author> <title> Single populations v. co-evolution. </title> <editor> In John R. Koza, editor, </editor> <booktitle> Artificial Life at Stanford 1994, </booktitle> <pages> pages 20-27. </pages> <publisher> Stanford Bookstore, Stanford, </publisher> <address> California, 94305-3079 USA, </address> <month> June </month> <year> 1994. </year>
Reference: [ Dawkins, 1986 ] <author> Richard Dawkins. </author> <title> The blind Watchmaker. </title> <publisher> Harlow : Longman Scientific and Technical, </publisher> <year> 1986. </year>
Reference: [ De Jong and Sarma, 1993 ] <author> Kenneth A. De Jong and Jayshree Sarma. </author> <title> Generation gaps revisited. </title> <editor> In L. Darrell Whitley, editor, </editor> <booktitle> Foundations of Genetic Algorithms 2, </booktitle> <address> Vail, Colorado, USA, 26-29 July 1992 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: In GP-QUICK crossover produces one offspring at a time rather than two which is immediately inserted into the population displacing another, rather than collecting offspring until a complete replacement population has been produced, i.e. the generation gap is one <ref> [ De Jong and Sarma, 1993 ] </ref> . A separate tournament is held to decide which member of the population to remove.
Reference: [ De Jong, 1987 ] <author> Kenneth De Jong. </author> <title> On using genetic algorithms to search program spaces. </title> <editor> In John J. Grefenstette, editor, </editor> <booktitle> Genetic Algorithms and their Applications: Proceedings of the second international conference on Genetic Algorithms, </booktitle> <pages> pages 210-216, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, 28-31 July 1987. </address> <publisher> Lawrence Erlbaum Associates. </publisher> <pages> 235 </pages>
Reference: [ Deakin and Yates, 1996 ] <author> Anthony G. Deakin and Derek F. Yates. </author> <title> Genetic programming tools available on the web: A first encounter. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> page 420, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ D'haeseleer and Bluming, 1994 ] <author> Patrik D'haeseleer and Jason Bluming. </author> <title> Effects of locality in individual and population evolution. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 8, </booktitle> <pages> pages 177-198. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ D'haeseleer, 1994 ] <author> Patrik D'haeseleer. </author> <title> Context preserving crossover in genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <volume> volume 1, </volume> <pages> pages 256-261, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: As discussed in Section 2.3.6 a number of papers show (albeit on very different problems) benefits in using either current behaviour [ Rosca and Ballard, 1996 ] program syntax <ref> [ Gruau, 1996; D'haeseleer, 1994 ] </ref> or evolving program syntax [ Whigham, 1995b ] to bias crossover or other genetic operators. Our mechanism succeeds in dynamically redistributing crossover locations to code in need of improvement as the population evolves.
Reference: [ Dunay and Petry, 1995 ] <author> Bertrand Daniel Dunay and Frederic E. Petry. </author> <title> Solving complex problems with genetic algorithms. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 264-270, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: 6.1 Balanced Bracket Problem Other work on GP evolving language recognizers has concentrated upon using GP to evolve tree based specifications for abstract machines, such as finite state machines [ Dunay et al., 1994 ] , deterministic pushdown automata [ Zomorodian, 1995 ] , machines composed of simple Turing machines <ref> [ Dunay and Petry, 1995; Petry and Dunay, 1995 ] </ref> or special memory nodes within the tree [ Iba et al., 1995 ] .
Reference: [ Dunay et al., 1994 ] <author> B. D. Dunay, F. E. Petry, and W. P Buckles. </author> <title> Regular language induction with genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <pages> pages 396-400, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: Section 6.5 summarises this chapter. 6.1 Balanced Bracket Problem Other work on GP evolving language recognizers has concentrated upon using GP to evolve tree based specifications for abstract machines, such as finite state machines <ref> [ Dunay et al., 1994 ] </ref> , deterministic pushdown automata [ Zomorodian, 1995 ] , machines composed of simple Turing machines [ Dunay and Petry, 1995; Petry and Dunay, 1995 ] or special memory nodes within the tree [ Iba et al., 1995 ] .
Reference: [ Dunnett, 1993 ] <author> R. M. Dunnett. </author> <title> A proposal to use a genetic algorithm for maintenance planning. PSBM note, National Grid, </title> <institution> Technology and Science Laboratories, </institution> <month> July </month> <year> 1993. </year> <title> Private communication. </title>
Reference: [ Dunning and Davis, 1996 ] <author> Ted E. Dunning and Mark W. Davis. </author> <title> Evolutionary algorithms for natural language processing. </title> <editor> In John R. Koza, editor, </editor> <booktitle> Late Breaking Papers at the Genetic Programming 1996 Conference Stanford University July 28-31, </booktitle> <year> 1996, </year> <pages> pages 16-23, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> Stanford Bookstore. </publisher>
Reference: [ Esparcia Alcazar and Sharman, 1996 ] <author> Anna I. Esparcia Alcazar and Ken C. Sharman. </author> <title> Some applications of genetic programming in digital signal processing. </title> <editor> In John R. Koza, editor, </editor> <booktitle> Late Breaking Papers at the Genetic Programming 1996 Conference Stanford University July 28-31, </booktitle> <year> 1996, </year> <pages> pages 24-31, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> Stanford Bookstore. </publisher> <pages> 236 </pages>
Reference-contexts: While this structure is applicable to a range of signal processing problem, once again memory has been constrained for the GP into a structure appropriate to the problem. <ref> [ Sharman et al., 1995; Esparcia Alcazar and Sharman, 1996 ] </ref> similarly use memory terminals to hold values previously calculated at nodes within the program tree, however the mechanism for connecting terminals to inner nodes is different; explicit "psh" functions within the program tree save the value at that point in
Reference: [ Ewens, 1989 ] <author> W. J. Ewens. </author> <title> An interpretation and proof of the fundamental theorem of natural selection. </title> <journal> Theoretical Population Biology, </journal> <volume> 36(2) </volume> <pages> 167-180, </pages> <year> 1989. </year>
Reference-contexts: which might be beneficial). [ Price, 1972 ] makes the point that Fisher's publications on his fundamental theorem of natural selection "contains the most confusing published scientific writing I know of" [page 134] leading to "forty years of bewilderment about what he meant" [page 132]. [ Price, 1972 ] and <ref> [ Ewens, 1989; Ewens, 1992b; Ewens, 1992a ] </ref> argue that the usual interpretation of Fisher's theorem is incorrect and his "fitness" should be considered as just the component of fitness which varies linearly with gene frequency.
Reference: [ Ewens, 1992a ] <author> W. J. Ewens. </author> <title> Addendum to "The fundamental theorem of natural selection in Ewens' sense (case of many loci)" by Catilloux and Lessard. </title> <journal> Theoretical Population Biology, </journal> <volume> 48(3) </volume> <pages> 316-317, </pages> <year> 1992. </year>
Reference-contexts: which might be beneficial). [ Price, 1972 ] makes the point that Fisher's publications on his fundamental theorem of natural selection "contains the most confusing published scientific writing I know of" [page 134] leading to "forty years of bewilderment about what he meant" [page 132]. [ Price, 1972 ] and <ref> [ Ewens, 1989; Ewens, 1992b; Ewens, 1992a ] </ref> argue that the usual interpretation of Fisher's theorem is incorrect and his "fitness" should be considered as just the component of fitness which varies linearly with gene frequency.
Reference: [ Ewens, 1992b ] <author> W. J. Ewens. </author> <title> An optimizing principle of natural selection in evolutionary population genetics. </title> <journal> Theoretical Population Biology, </journal> <volume> 42(3) </volume> <pages> 333-346, </pages> <year> 1992. </year>
Reference-contexts: which might be beneficial). [ Price, 1972 ] makes the point that Fisher's publications on his fundamental theorem of natural selection "contains the most confusing published scientific writing I know of" [page 134] leading to "forty years of bewilderment about what he meant" [page 132]. [ Price, 1972 ] and <ref> [ Ewens, 1989; Ewens, 1992b; Ewens, 1992a ] </ref> argue that the usual interpretation of Fisher's theorem is incorrect and his "fitness" should be considered as just the component of fitness which varies linearly with gene frequency.
Reference: [ Fang et al., 1993 ] <author> Hsiao-Lan Fang, Peter Ross, and Dave Corne. </author> <title> A promising genetic algorithm approach to job-shop scheduling, rescheduling and open-shop scheduling problems. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 375-382, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Fang et al., 1994 ] <author> Hsiao-Lan Fang, Peter Ross, and Dave Corne. </author> <title> A promising hybrid GA/heuristic approach for open-shop scheduling problems. </title> <editor> In A. Cohn, editor, </editor> <booktitle> ECAI 94 Proceedings of the 11th European Conference on Artificial Intelligence, </booktitle> <pages> pages 590-594, </pages> <address> Amsterdam, The Netherlands, August 8-12 1994. </address> <publisher> John Wiley & Sons, Ltd. </publisher>
Reference: [ Feldman, 1993 ] <author> David S. Feldman. </author> <title> Fuzzy network synthesis with genetic algorithms. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 312-317, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Ferrer and Martin, 1995 ] <author> Gabriel J. Ferrer and Worthy N. Martin. </author> <title> Using genetic programming to evolve board evaluation functions for a boardgame. </title> <booktitle> In 1995 IEEE Conference on Evolutionary Computation, </booktitle> <volume> volume 2, </volume> <pages> page 747, </pages> <address> Perth, Australia, </address> <month> 29 November - 1 December </month> <year> 1995. </year> <note> IEEE Press. </note>
Reference-contexts: On a learning task (rather than maintenance) he shows it gives a performance improvement. <ref> [ Ferrer and Martin, 1995 ] </ref> also reports improved performance from seeding the initial population with previously found good solutions.
Reference: [ Fisher, 1958 ] <author> Ronald A. Fisher. </author> <title> The Genetical Theory of Natural Selection. </title> <publisher> Dover, </publisher> <year> 1958. </year> <note> Revision of first edition published 1930, OUP. </note>
Reference-contexts: Data collected every generation equivalent. 189 7.2 Fisher's Fundamental Theorem of Natural Selection Fisher's fundamental theorem of natural selection states "The rate of increase in fitness of any organism at any time is equal to its genetic variance in fitness at that time" <ref> [ Fisher, 1958, page 37 ] </ref> . "Under the usual interpretation the theorem is believed to say that the rate of increase in the mean fitness of a population is equal to the population's additive variance for fitness".
Reference: [ Fonseca and Fleming, 1993 ] <author> Carlos M. Fonseca and Peter J. Fleming. </author> <title> Genetic algorithms for multiobjective optimization: Formulation, discussion and generalization. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 416-423, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher> <pages> 237 </pages>
Reference: [ Fonseca and Fleming, 1995 ] <author> Carlos M. Fonseca and Peter J. Fleming. </author> <title> An overview of evolutionary algorithms in multiobjective optimization. </title> <journal> Evolutionary Computation, </journal> <volume> 3(1) </volume> <pages> 1-16, </pages> <year> 1995. </year>
Reference: [ Forsyth, 1981 ] <author> Richard Forsyth. </author> <title> BEAGLE A darwinian approach to pattern recognition. </title> <journal> Kybernetes, </journal> <volume> 10 </volume> <pages> 159-166, </pages> <year> 1981. </year>
Reference: [ Francone et al., 1996 ] <author> Frank D. Francone, Peter Nordin, and Wolfgang Banzhaf. </author> <title> Bench-marking the generalization capabilities of a compiling genetic programming system using sparse data sets. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 72-80, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: If we continue to test all evolved programs on all the training set then GP machine resource usage will grow at least quadratically with task complexity. However techniques such as co-evolution [ Angeline and Pollack, 1993 ] , soft brood selection [ Tackett, 1995a ] and sparse training sets <ref> [ Francone et al., 1996 ] </ref> indicate it may not be necessary to exhaustively test every evolved program. 8.1 Recommendations A number of practical recommendations for GP work can be made.
Reference: [ Frank, 1995 ] <author> S. A. Frank. </author> <title> George Price's contributions to evolutionary genetics. </title> <journal> Journal of Theoretical Biology, </journal> <volume> 175 </volume> <pages> 373-388, </pages> <year> 1995. </year>
Reference-contexts: Since the variance can never be negative "natural selection causes a continual increase in mean fitness of a population. This interpretation of the theorem is only true when the population mates randomly and there is no dominance or epistasis" <ref> [ Frank, 1995, page 382 ] </ref> .
Reference: [ Fukunaga and Kahng, 1995 ] <author> Alex S. Fukunaga and Andrew B. Kahng. </author> <title> Improving the performance of evolutionary optimization by dynamically scaling the evolution function. </title> <booktitle> In 1995 IEEE Conference on Evolutionary Computation, </booktitle> <volume> volume 1, </volume> <pages> pages 182-187, </pages> <address> Perth, Australia, </address> <month> 29 November - 1 December </month> <year> 1995. </year> <note> IEEE Press. </note>
Reference: [ Gathercole and Ross, 1996 ] <author> Chris Gathercole and Peter Ross. </author> <title> An adverse interaction between crossover and restricted tree depth in genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 291-296, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ Goldberg et al., 1991 ] <editor> David E. Goldberg, Kalyanmoy Deb, and James H. Clark. </editor> <title> Genetic algorithms, noise and the sizing of populations. </title> <type> IlliGAL 91010, </type> <institution> Department of General Engineering, University of Illinois, 117 Transportation Building, </institution> <address> 104 South Mathews Avenue, Urbana, Illinois 61801, USA, </address> <month> Dec </month> <year> 1991. </year>
Reference: [ Goldberg et al., 1992 ] <author> David E. Goldberg, Kalyanmoy Deb, and Jeffrey Horn. </author> <title> Massive multimodality, deception and genetic algorithms. </title> <editor> In R Manner and B Manderick, editors, </editor> <booktitle> Parallel Problem Solving from Nature 2, </booktitle> <pages> pages 37-46, </pages> <address> Brussels, Belgium, 1992. </address> <publisher> Elsevier Science. </publisher>
Reference: [ Goldberg, 1989 ] <author> David E. Goldberg. </author> <title> Genetic Algorithms in Search Optimization and Machine Learning. </title> <publisher> Addison-Wesley, </publisher> <year> 1989. </year> <month> 238 </month>
Reference: [ Gordon, 1995 ] <author> T. G. W. Gordon. </author> <title> Schedule optimisation using genetic algorithms. </title> <type> Master's thesis, </type> <institution> University College, </institution> <address> London, </address> <month> October </month> <year> 1995. </year>
Reference: [ Grefenstette, 1993 ] <author> John J Grefenstette. </author> <title> Deception considered harmful. </title> <editor> In L. Darrell Whitley, editor, </editor> <booktitle> Foundations of Genetic Algorithms 2, </booktitle> <address> Vail, Colorado, USA, 26-29 July 1992 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Grimes, 1995 ] <author> C. A. Grimes. </author> <title> Application of genetic techniques to the planning of railway track maintenance work. </title> <editor> In A. M. S. Zalzala, editor, </editor> <booktitle> First International Conference on Genetic Algorithms in Engineering Systems: Innovations and Applications, GALESIA, </booktitle> <volume> volume 414, </volume> <pages> pages 467-472, </pages> <address> Sheffield, UK, </address> <month> 12-14 September </month> <year> 1995. </year> <pages> IEE. </pages>
Reference: [ Gruau and Quatramaran, 1996 ] <author> Frederic Gruau and Kameel Quatramaran. </author> <title> Cellular encoding for interactive evolutionary robotics. </title> <institution> Cognitive Science Research Paper 425, School of Cognitive and Computing Sciences, University of Sussex, </institution> <address> Falmer, Brighton, Sussex, UK, </address> <year> 1996. </year>
Reference: [ Gruau, 1993 ] <author> Frederic Gruau. </author> <title> Genetic synthesis of modular neural networks. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 318-325, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Gruau, 1996 ] <author> Frederic Gruau. </author> <title> On using syntactic constraints with genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 19, </booktitle> <pages> pages 377-394. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: As discussed in Section 2.3.6 a number of papers show (albeit on very different problems) benefits in using either current behaviour [ Rosca and Ballard, 1996 ] program syntax <ref> [ Gruau, 1996; D'haeseleer, 1994 ] </ref> or evolving program syntax [ Whigham, 1995b ] to bias crossover or other genetic operators. Our mechanism succeeds in dynamically redistributing crossover locations to code in need of improvement as the population evolves.
Reference: [ Hampo et al., 1994 ] <author> Richard J. Hampo, Bruce D. Bryant, and Kenneth A. Marko. </author> <title> IC engine misfire detection algorithm generation using genetic programming. </title> <booktitle> In EUFIT'94, </booktitle> <pages> pages 1674-1678, </pages> <address> Promenade 9, D-52076, Aachen, Germany, </address> <month> 20-23 September </month> <year> 1994. </year> <pages> ELITE-Foundation. </pages>
Reference: [ Handley, 1993 ] <author> Simon Handley. </author> <title> Automatic learning of a detector for alpha-helices in protein sequences via genetic programming. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 271-278, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Handley, 1994a ] <author> S. Handley. </author> <title> On the use of a directed acyclic graph to represent a population of computer programs. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on 239 Computational Intelligence, </booktitle> <pages> pages 154-159, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: Where side-effects are controlled, retaining information on the evaluation of common subtrees within the population can also considerably reduce program execution time, c.f. Section E.5 and <ref> [ Handley, 1994a ] </ref> ). 221 Existing GP systems could be modified to: 1. Increase variety by disabling the production of clones by the reproduction operator, e.g. by setting p r to zero. 2. Detect when an offspring is identical to one of its parents.
Reference: [ Handley, 1994b ] <author> Simon G. Handley. </author> <title> The automatic generations of plans for a mobile robot via genetic programming with automatically defined functions. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 18, </booktitle> <pages> pages 391-407. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Harvey et al., 1993 ] <author> Inman Harvey, Philip Husbands, and Dave Cliff. </author> <title> Genetic convergence in a species of evolved robot control architectures. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> page 636, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Harvey, 1992 ] <author> Inman Harvey. </author> <title> Species adaptation genetic algorithms: A basis for a continuing SAGA. </title> <editor> In F. J. Varela and P. Bourgine, editors, </editor> <booktitle> Toward a Practice of Autonomous Systems, Proceeding of the first European Conference on Artificial Life (ECAL), </booktitle> <pages> pages 346-354. </pages> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: It also means almost all crossovers occur between disparate individuals. It is unclear how beneficial this is. [ Ryan, 1994 ] suggests benefits for disassortive mating, while <ref> [ Harvey, 1992 ] </ref> suggests (for a variable length but linear GA) better results may be obtained by breeding between similar programs. He suggests this will produce smaller improvements at each stage but more progress in the long run.
Reference: [ Haynes and Wainwright, 1995 ] <author> Thomas D. Haynes and Roger L. Wainwright. </author> <title> A simulation of adaptive agents in hostile environment. </title> <editor> In K. M. George, Janice H. Carroll, Ed Deaton, Dave Oppenheim, and Jim Hightower, editors, </editor> <booktitle> Proceedings of the 1995 ACM Symposium on Applied Computing, </booktitle> <pages> pages 318-323, </pages> <address> Nashville, USA, 1995. </address> <publisher> ACM Press. </publisher>
Reference-contexts: This builds on [ Andre, 1994b ] but replaces a predetermined isomorphism between indexed memory and the problem "world" by a more complex data structure that is appropriate to the problem. 6.4.6 Linked List Data Structure <ref> [ Haynes and Wainwright, 1995 ] </ref> requires GP to evolve control programs for agents which have to survive in a simulated world containing mines.
Reference: [ Haynes et al., 1995a ] <author> Thomas Haynes, Sandip Sen, Dale Schoenefeld, and Roger Wainwright. </author> <title> Evolving a team. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 23-30, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference: [ Haynes et al., 1995b ] <author> Thomas Haynes, Roger Wainwright, Sandip Sen, and Dale Schoene-feld. </author> <title> Strongly typed genetic programming in evolving cooperation strategies. </title> <editor> In L. Es-helman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 271-278, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Haynes et al., 1996 ] <author> Thomas D. Haynes, Dale A. Schoenefeld, and Roger L. Wainwright. </author> <title> Type inheritance in strongly typed genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 18, </booktitle> <pages> pages 359-376. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year> <month> 240 </month>
Reference: [ Hillis, 1992 ] <author> W. Daniel Hillis. </author> <title> Co-evolving parasites improve simulated evolution as an optimization procedure. </title> <editor> In Christopher G. Langton, Charles Taylor, J. Doyne Farmer, and Steen Rasmussen, editors, </editor> <booktitle> Artificial Life II, volume X of Sante Fe Institute Studies in the Sciences of Complexity, </booktitle> <pages> pages 313-324. </pages> <publisher> Addison-Wesley, </publisher> <address> Santa Fe Institute, New Mexico, USA, </address> <month> February </month> <year> 1990 1992. </year>
Reference-contexts: Co-evolution can provide an automatic means of dynamically changing the fitness function [ Siegel, 1994 ] . There is increasing interest in using co-evolution [ Sen, 1996; Reynolds, 1994a; Ryan, 1995 ] and improved performance has been claimed <ref> [ Hillis, 1992 ] </ref> . However a more dynamic framework makes analysis of population behaviour harder. 224 In GP runs the concentration of primitives and variety within the population should be monitored (both can be done with little overhead).
Reference: [ Holland et al., 1986 ] <author> John H. Holland, Keith J. Holyoak, Richard E. Nisbett, and Paul R. Thagard. </author> <title> Induction Processes of Inference, Learning, and Discovery. </title> <publisher> MIT Press, </publisher> <year> 1986. </year>
Reference: [ Holland, 1973 ] <author> John H. Holland. </author> <title> Genetic algorithms and the optimal allocation of trials. </title> <journal> SIAM Journal on Computation, </journal> <volume> 2 </volume> <pages> 88-105, </pages> <year> 1973. </year>
Reference-contexts: Indeed [ Altenberg, 1995 ] shows Holland's schema theorem <ref> [ Holland, 1973; Holland, 1992 ] </ref> can be derived from Price's Theorem. This and other analysis, leads [ Altenberg, 1995, page 43 ] to conclude "the Schema Theorem has no implications for how well a GA is performing".
Reference: [ Holland, 1992 ] <author> John H. Holland. </author> <title> Adaptation in Natural and Artificial Systems: An Introductory Analysis with Applications to Biology, </title> <booktitle> Control and Artificial Intelligence. </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year> <note> First Published by University of Michigan Press 1975. </note>
Reference-contexts: Indeed [ Altenberg, 1995 ] shows Holland's schema theorem <ref> [ Holland, 1973; Holland, 1992 ] </ref> can be derived from Price's Theorem. This and other analysis, leads [ Altenberg, 1995, page 43 ] to conclude "the Schema Theorem has no implications for how well a GA is performing".
Reference: [ Hondo et al., 1996a ] <author> Naohiro Hondo, Hitoshi Iba, and Yukinori Kakazu. </author> <title> COAST: An approach to robustness and reusability in genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> page 429, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ Hondo et al., 1996b ] <author> Naohiro Hondo, Hitoshi Iba, and Yukinori Kakazu. </author> <title> Sharing and refinement for reusable subroutines of genetic programming. </title> <booktitle> In Proceedings of the 1996 IEEE International Conference on Evolutionary Computation, </booktitle> <volume> volume 1, </volume> <pages> pages 565-570, </pages> <address> Nagoya, Japan, </address> <month> 20-22 May </month> <year> 1996. </year>
Reference: [ Horn et al., 1993 ] <author> Jeffrey Horn, Nicholas Nafpliotis, and David E. Goldberg. </author> <title> Multiobjec-tive optimization using the niched pareto genetic algorithm. </title> <type> IlliGAL Report no. 93005, </type> <institution> Illinois Genetic Algorithm Laboratory, University of Illinois at Urbana-Champaign, 117 Transportation Building, </institution> <address> 104 South Mathews Avenue, Urbana, IL 61801-2296, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: However unless there is some selection pressure to maintain multiple niches, the population will tend to reduce the number of niches it occupies. This is an aspect of "genetic drift" is particularly important in small populations <ref> [ Horn et al., 1993 ] </ref> . To maintain a large number of niches the fitness sharing scheme described in Section 2.3.8 was used. <p> Overlapping demes, which constrain mates to be selected only from near neighbours (similar to those in [ Tackett and Carmi, 1994 ] ) succeeded in delaying the lost of primitives but spreading the population out across the fitness landscape using a "fitness sharing function" <ref> [ Horn et al., 1993 ] </ref> was more effective in delaying the losses for longer and so was used.
Reference: [ Huelsbergen, 1996 ] <author> Lorenz Huelsbergen. </author> <title> Toward simulated evolution of machine language iteration. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 315-320, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher> <pages> 241 </pages>
Reference-contexts: Adf1); and a limit (32) on the number of iterations. The limit was set as low as possible but still allows loops to span all the available memory. The fear of long or indefinite loops appears to have restricted the use of iteration in GP, with <ref> [ Huelsbergen, 1996 ] </ref> reporting "for the most part : : : GP solutions are restricted to non-iterative (non-looping) programs". However there are a number of papers where programs containing loops have been successfully evolved.
Reference: [ Iba and de Garis, 1996 ] <author> Hitoshi Iba and Hugo de Garis. </author> <title> Extending genetic programming with recombinative guidance. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 4, </booktitle> <pages> pages 69-88. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference: [ Iba et al., 1993 ] <author> Hitoshi Iba, Takio Karita, Hugo de Garis, and Taisuke Sato. </author> <title> System identification using structured genetic algorithms. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 279-286, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <month> 17-21 July </month> <year> 1993. </year> <note> Morgan Kauf-mann. </note>
Reference: [ Iba et al., 1994a ] <author> H. Iba, T. Sato, and H. de Garis. </author> <title> System identification approach to genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <volume> volume 1, </volume> <pages> pages 401-406, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: It appears to be common practice for GP to "run out of steam" so after 20-30 generations no further improvement in the best fitness value in the population occurs or improvement occurs at a very low rate. Accordingly few GP runs are continued beyond 222 generation 50. ( <ref> [ Iba et al., 1994a ] </ref> 's STROGANOFF system provides a counter example with runs of 400 generations).
Reference: [ Iba et al., 1994b ] <author> Hitoshi Iba, Hugo de Garis, and Taisuke Sato. </author> <title> Genetic programming using a minimum description length principle. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 12, </booktitle> <pages> pages 265-284. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: to be the first use of an explicit CPU penalty in the fitness function, however both Teller's PADO and [ Maxwell III, 1994 ] include implicit run time as part of fitness evaluation and there are many case where program size is included as part of the fitness calculation, e.g. <ref> [ Iba et al., 1994b; Zhang and Muhlenbein, 1995a ] </ref> (where the language does not include program branching, subroutines or iteration, program size and number of primitives evaluated are the same, i.e. a CPU penalty is equivalent to a size penalty). <p> Perhaps general algorithms are easier for GP to find? It may be argued on the basis of the Minimum Description Length (MDL) principle or Occam's Razor that general programs tend to be shorter than programs which are specific to the test case and fail to generalise <ref> [ Iba et al., 1994b; Zhang and Muhlenbein, 1995b ] </ref> . Non-general program may "memorise" the tests and need to be longer and more complex to do this.
Reference: [ Iba et al., 1994c ] <author> Hitoshi Iba, Hugo de Garis, and Taisuke Sato. </author> <title> Genetic programming with local hill-climbing. </title> <editor> In Yuval Davidor, Hans-Paul Schwefel, and Reinhard Manner, editors, </editor> <booktitle> Parallel Problem Solving from Nature III, </booktitle> <pages> pages 334-343, </pages> <address> Jerusalem, 9-14 Oc-tober 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: operator would not be expected to solve this problem directly. (However mutation might be beneficial by allowing the population to retain them whilst it evolves beyond the deceptive local optima or via other effects such as incorporating an element of hill climbing, see [ O'Reilly and Oppacher, 1996 ] and <ref> [ Iba et al., 1994c ] </ref> ).
Reference: [ Iba et al., 1995 ] <author> Hitoshi Iba, Hugo de Garis, and Taisuke Sato. </author> <title> Temporal data processing using genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 279-286, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: evolve tree based specifications for abstract machines, such as finite state machines [ Dunay et al., 1994 ] , deterministic pushdown automata [ Zomorodian, 1995 ] , machines composed of simple Turing machines [ Dunay and Petry, 1995; Petry and Dunay, 1995 ] or special memory nodes within the tree <ref> [ Iba et al., 1995 ] </ref> . <p> NB the memory is structured in an appropriate fashion for the problem. 6.4.7 Tree Structured Memory for Temporal Data Processing <ref> [ Iba et al., 1995 ] </ref> introduces "special `memory terminals', which point at any nonterminal node within the tree." The value given by a memory terminal is the value at the indicated 173 point in the tree on the previous time step.
Reference: [ Iba, 1996a ] <editor> Hitoshi Iba. </editor> <title> Emergent cooperation for multiple agents using genetic programming. </title> <editor> In John R. Koza, editor, </editor> <booktitle> Late Breaking Papers at the Genetic Programming 1996 Conference Stanford University July 28-31, </booktitle> <year> 1996, </year> <pages> pages 66-74, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> Stanford Bookstore. </publisher>
Reference: [ Iba, 1996b ] <editor> Hitoshi Iba. </editor> <title> Random tree generation of genetic programming. </title> <editor> In Hans-Michael Voigt, Werner Ebeling, Ingo Rechenberg, and Hans-Paul Schwefel, editors, </editor> <booktitle> Parallel Problem Solving from Nature IV, Proceedings of the International Conference 242 on Evolutionary Computation, volume 1141 of LNCS, </booktitle> <address> Berlin, germany, 22-26 September 1996. </address> <publisher> Springer Verlag. </publisher>
Reference: [ Jannink, 1994 ] <editor> Jan Jannink. Cracking and co-evolving randomizers. In Kenneth E. Kin-near, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 20, </booktitle> <pages> pages 425-443. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: The random data patterns have the same distribution of values as that inserted into the list. In most other published work indexed memory is initialised to zero (as in Chapters 3 and 4) however <ref> [ Jannink, 1994, page 436 ] </ref> describes a regular non-zero initialization pattern. [ Crepeau, 1995, page 132 ] "memory locations (are) initially filled with random 8 bit values" as this makes it "highly probably" that problem specific values needed to solve the problem "are somewhere in memory". <p> Work so far <ref> [ Teller, 1994a; Andre, 1994b; Brave, 1995; Jannink, 1994 ] </ref> shows GP can automatically create programs which explicitly use directly addressable (indexed) memory to solve problems and Chapters 3, 4 and 5 demonstrate that GP can automatically generate abstract data structures such as stacks, queues and lists. <p> However other changes were simultaneously made which may have made the task more difficult. Therefore it is difficult to draw any conclusions regarding the benefits or otherwise of data structures from this paper. <ref> [ Jannink, 1994 ] </ref> includes 16 memory cells in one experiment to evolve programs which generate "random" numbers. This is said to give "the best average validation score", i.e. better than when the programs were not given access to memory.
Reference: [ Juille and Pollack, 1995 ] <author> Hugues Juille and Jordan B. Pollack. </author> <title> Parallel genetic programming and fine-grained SIMD architecture. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 31-37, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference: [ Keijzer, 1996 ] <author> Maarten Keijzer. </author> <title> Efficiently representing populations in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 13, </booktitle> <pages> pages 259-278. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: The opposite does not hold when it is high. (Other definitions include fitness based population entropy [ Rosca and Ballard, 1996, Section 9.5 ] and using the ratio of sum of the sizes of every program in the population to the number of distinct subtrees within the population <ref> [ Keijzer, 1996 ] </ref> ). In this section we consider the variety of GP populations using the 60 runs on the stack problem as examples. <p> Thus low variety reinforces itself. In one run (23) variety collapses to near zero but in most cases it eventually hovers near 60% of the population size. This is low compared to reports of 80% to 95% in [ Koza, 1992, pages 159, 609 and 614 ] and <ref> [ Keijzer, 1996 ] </ref> . 7.4.1 Loss of Variety in Stack Populations Measurements show variety starts in the initial population at its maximum value with every member of the population being different. This is despite the fact there is no uniqueness check to guarantee this. <p> Such overshooting also appears in [ Koza, 1992, page 159 ] on the artificial ant and on the six-multiplexor problems [pages 609 and 614] and in a simple symbolic regression in <ref> [ Keijzer, 1996, Figures 13.5 and 13.6 ] </ref> when hill climbing is used. Quadratic Chance of Crossover Producing a Unique Offspring As an alternative to assuming the chance of crossover producing a unique offspring is constant this subsection investigates solutions of Equation 7.10 assuming it depends upon the variety. <p> This would increase the degree of randomness in the search but might introduce a beneficial element of "hill climbing". While other GPs may not suffer from lack of variety, convergence of some sort is required if the GP is not to be random search. For example <ref> [ Keijzer, 1996 ] </ref> shows convergence in terms of subtrees with GP populations reusing subtrees in many individuals. (GP may take advantage of this by reducing the space taken to store the population in memory [ Keijzer, 1996 ] and on disk (by using file compression, see Section E.7). <p> For example <ref> [ Keijzer, 1996 ] </ref> shows convergence in terms of subtrees with GP populations reusing subtrees in many individuals. (GP may take advantage of this by reducing the space taken to store the population in memory [ Keijzer, 1996 ] and on disk (by using file compression, see Section E.7). Where side-effects are controlled, retaining information on the evaluation of common subtrees within the population can also considerably reduce program execution time, c.f. <p> Similarly if the number of unique individuals in the population falls below 90% this should also be investigated. <ref> [ Keijzer, 1996 ] </ref> provides a means to measure the concentration of groups of primitives (sub trees) but the implementation is not straightforward for most existing GP systems and the interpretation of the results is more complex.
Reference: [ Keith and Martin, 1994 ] <author> Mike J. Keith and Martin C. Martin. </author> <title> Genetic programming in C++: Implementation issues. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 13, </booktitle> <pages> pages 285-310. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Kernighan and Ritchie, 1988 ] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ 07632, USA, </address> <note> second edition, </note> <year> 1988. </year>
Reference: [ Kinnear, Jr., 1993a ] <author> Kenneth E. Kinnear, Jr. </author> <title> Evolving a sort: Lessons in genetic programming. </title> <booktitle> In Proceedings of the 1993 International Conference on Neural Networks, volume 2, </booktitle> <address> San Francisco, USA, 1993. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: The same approach is used in <ref> [ Kinnear, Jr., 1993a ] </ref> but with larger limits (200 and 2000). In [ Koza, 1994, Chapters 18 and 20 ] the indefinite loop problem is side stepped by predefining the loop and its limits so the loop contents are evolved but not its start or terminating conditions.
Reference: [ Kinnear, Jr., 1993b ] <author> Kenneth E. Kinnear, Jr. </author> <title> Generality and difficulty in genetic programming: Evolving a sort. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 287-294, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Kinnear, Jr., 1994a ] <author> Kenneth E. Kinnear, Jr. </author> <title> Alternatives in automatic function definition: A comparison of performance. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 6, </booktitle> <pages> pages 119-141. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Kinnear, Jr., 1994b ] <author> Kenneth E. Kinnear, Jr. </author> <title> Fitness landscapes and difficulty in genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Conference on Computational 243 Intelligence, </booktitle> <volume> volume 1, </volume> <pages> pages 142-147, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference: [ Kinnear, Jr., 1994c ] <author> Kenneth E. Kinnear, Jr. </author> <title> A perspective on the work in this book. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 1, </booktitle> <pages> pages 3-19. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: The principle counter example, where problem specific data structures have not been provided, is PADO, where better than random performance has been achieved on classification problems with no obvious structure. It has often been argued, e.g. <ref> [ Kinnear, Jr., 1994c, page 12 ] </ref> , that functional primitives used with GP should be as powerful as possible, in these examples we have shown appropriate data structures are advantageous, that is GP can benefit from data abstraction. <p> Any partial solutions are likely to require all of them and so none will become extinct. This is contrary to established GP wisdom <ref> [ Kinnear, Jr., 1994c, page 12 ] </ref> , however recently (at the fall 1995 AAAI GP symposium) Koza advocated the use of small function sets containing only five functions (+; ; fi; ffi and a conditional branch). 196 7.4 Loss of Variety We define variety as the number of unique individuals <p> To a large extent the advice in <ref> [ Kinnear, Jr., 1994c ] </ref> and [ Koza, 1992 ] remains sound, however a number of additional suggestions can be made: 1. GP populations should be closely studied as they evolve. There are several properties that can be easily measure which give indication of problems: 227 (a) Frequency of primitives.
Reference: [ Kirkpatrick et al., 1983 ] <author> S. Kirkpatrick, C. D. Gelatt Jr., and M. P. Vecchi. </author> <title> Optimization by simulated annealing. </title> <journal> Science, </journal> <volume> 220(4598) </volume> <pages> 671-680, </pages> <month> 13 May </month> <year> 1983. </year>
Reference: [ Kodjabachian and Meyer, 1994 ] <author> Jerome Kodjabachian and Jean-Arcady Meyer. </author> <title> Development, learning and evolution in animats. </title> <editor> In P. Gaussier and J-D Nicoud, editors, </editor> <booktitle> Perceptions to Action, </booktitle> <pages> pages 96-109, </pages> <address> Lausanne Switzerland, Sep 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference: [ Koza and Andre, 1995a ] <author> John R. Koza and David Andre. </author> <title> Evolution of both the architecture and the sequence of work-performing steps of a computer program using genetic programming with architecture-altering operations. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 50-60, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference: [ Koza and Andre, 1995b ] <author> John R. Koza and David Andre. </author> <title> Parallel genetic programming on a network of transputers. </title> <type> Technical Report CS-TR-95-1542, </type> <institution> Stanford University, Department of Computer Science, </institution> <month> January </month> <year> 1995. </year>
Reference: [ Koza et al., 1996a ] <author> John R. Koza, David Andre, Forrest H. Bennett III, and Martin A. Keane. </author> <title> Use of automatically defined functions and architecture-altering operations in automated circuit synthesis using genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 132-149, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ Koza et al., 1996b ] <author> John R. Koza, Forrest H. Bennett III David Andre, and Martin A. Keane. </author> <title> Automated WYWIWYG design of both the topology and component values of electrical circuits using genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 123-131, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher> <pages> 244 </pages>
Reference: [ Koza et al., 1996c ] <author> John R. Koza, Forrest H. Bennett III, David Andre, and Martin A. Keane. </author> <title> Four problems for which a computer program evolved by genetic programming is competitive with human performance. </title> <booktitle> In Proceedings of the 1996 IEEE International Conference on Evolutionary Computation, </booktitle> <volume> volume 1, </volume> <pages> pages 1-10. </pages> <publisher> IEEE Press, </publisher> <year> 1996. </year>
Reference: [ Koza, 1991 ] <author> John R. Koza. </author> <title> Genetic evolution and co-evolution of computer programs. </title> <editor> In Christopher Taylor Charles Langton, J. Doyne Farmer, and Steen Rasmussen, editors, </editor> <booktitle> Artificial Life II, volume X of SFI Studies in the Sciences of Complexity, </booktitle> <pages> pages 603-629. </pages> <publisher> Addison-Wesley, </publisher> <address> Santa Fe Institute, New Mexico, USA, </address> <month> February </month> <year> 1990 1991. </year>
Reference: [ Koza, 1992 ] <author> John R. Koza. </author> <title> Genetic Programming: On the Programming of Computers by Natural Selection. </title> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1992. </year>
Reference-contexts: 1996; Teller and Veloso, 1995c; Teller and Veloso, 1995d; Teller and Veloso, 1995b; Teller, 1995a; Teller, 1995b; Teller, 1996; Teller and Veloso, 1995a ] . [ Nordin and Banzhaf, 1995a, page 324 ] enforces a limit on the total number of times loops within a program may be executed while <ref> [ Koza, 1992, Chapter 18 ] </ref> applies both a limit on the total number of iterations (100) and a limit for each loop primitive (15 or 25). The same approach is used in [ Kinnear, Jr., 1993a ] but with larger limits (200 and 2000). <p> However <ref> [ Koza, 1992, page 442 ] </ref> recasts a simple language recognition problem in terms of classifying DNA sequences as introns or exons and shows GP can evolve a correct program for this task and [ Wyard, 1991; Wyard, 1994; Lucas, 1994 ] use GAs operating on formal grammar rules of various <p> Huelsbergen also shows the problem can be solved by random search in a practical time. <ref> [ Koza, 1992, page 470 ] </ref> presents an example where a single variable is used to maintain a running total during execution of a loop. <p> For example if a population contains three individuals A, B and C but A and B are identical (but different from C) then the variety of the population is 2 (A and B counting as one unique individual). ( <ref> [ Koza, 1992, page 93 ] </ref> defines variety as a ratio of the number of unique individuals to population size). <p> Thus low variety reinforces itself. In one run (23) variety collapses to near zero but in most cases it eventually hovers near 60% of the population size. This is low compared to reports of 80% to 95% in <ref> [ Koza, 1992, pages 159, 609 and 614 ] </ref> and [ Keijzer, 1996 ] . 7.4.1 Loss of Variety in Stack Populations Measurements show variety starts in the initial population at its maximum value with every member of the population being different. <p> However variety does not behave in the predicted exponential decay but in many runs "overshoots" in the first five generations or so before recovering and climbing back up. Such overshooting also appears in <ref> [ Koza, 1992, page 159 ] </ref> on the artificial ant and on the six-multiplexor problems [pages 609 and 614] and in a simple symbolic regression in [ Keijzer, 1996, Figures 13.5 and 13.6 ] when hill climbing is used. <p> Thus both changes 1. and 2.b) should be tried. The use of p r = 0:1 in this thesis stems from the decision to use parameters as similar to <ref> [ Koza, 1992 ] </ref> as possible. It is also the supplied default value with GP-QUICK [ Singleton, 1994 ] . However the use of reproduction is not universal, for example the CGPS [ Nordin, 1994a; Nordin and Banzhaf, 1995a; Francone et al., 1996 ] does not implement it. <p> As far as is known, GP systems do not currently detect that crossover has produced a child which is identical to one of its parents for the purposes of either reducing run time (2.a) or increasing variety (2.b). <ref> [ Koza, 1992, page 93 ] </ref> ensures every member of the initial population is unique but allows duplicates in subsequent generations. <p> To a large extent the advice in [ Kinnear, Jr., 1994c ] and <ref> [ Koza, 1992 ] </ref> remains sound, however a number of additional suggestions can be made: 1. GP populations should be closely studied as they evolve. There are several properties that can be easily measure which give indication of problems: 227 (a) Frequency of primitives.
Reference: [ Koza, 1994 ] <author> John R. Koza. </author> <title> Genetic Programming II: Automatic Discovery of Reusable Programs. </title> <publisher> MIT Press, </publisher> <address> Cambridge Massachusetts, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The same approach is used in [ Kinnear, Jr., 1993a ] but with larger limits (200 and 2000). In <ref> [ Koza, 1994, Chapters 18 and 20 ] </ref> the indefinite loop problem is side stepped by predefining the loop and its limits so the loop contents are evolved but not its start or terminating conditions. <p> Huelsbergen also shows the problem can be solved by random search in a practical time. [ Koza, 1992, page 470 ] presents an example where a single variable is used to maintain a running total during execution of a loop. While in <ref> [ Koza, 1994, page 512 ] </ref> a small number of variables are used in a protein classification problem where the program processes proteins sequentially, a residue at a time. <p> In the stack problem each terminal and function can appear in each of the five trees but crossover acts only between like trees so each tree is genetically isolated from each other. (This is known as branch typing and is commonly used with ADFs <ref> [ Koza, 1994, page 86 ] </ref> . An alternative point typing allows crossover to move genetic material between trees). <p> Typically this serves only to increase the convergence of the population. An number of attempts to "scale up" GP have been made based upon imposing functional abstraction on individuals in the population <ref> [ Koza, 1994; Angeline, 1993; Rosca, 1995 ] </ref> . These have had a degree of success. <p> There are a number of techniques which automatically change the representation. The following three techniques co-evolve the representation as the population itself evolves; The Genetic Library Builder (GLiB) [ Angeline, 1994 ] , Automatically Defined Functions (ADFs) <ref> [ Koza, 1994 ] </ref> and Adaptive Representations [ Rosca, 1995 ] . [ Koza, 1994, page 619 ] argues ADFs and other representations provide a different lens with which to view the solution space and that ADFs may help solve a problem by providing a better lens. <p> There are a number of techniques which automatically change the representation. The following three techniques co-evolve the representation as the population itself evolves; The Genetic Library Builder (GLiB) [ Angeline, 1994 ] , Automatically Defined Functions (ADFs) [ Koza, 1994 ] and Adaptive Representations [ Rosca, 1995 ] . <ref> [ Koza, 1994, page 619 ] </ref> argues ADFs and other representations provide a different lens with which to view the solution space and that ADFs may help solve a problem by providing a better lens. ADFs were used in Chapters 4, 5 and 6.
Reference: [ Kraft et al., 1994 ] <author> D. H. Kraft, F. E. Petry, W. P. Buckles, and T. Sadasivan. </author> <title> The use of genetic programming to build queries for information retrieval. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <pages> pages 468-473, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: On a learning task (rather than maintenance) he shows it gives a performance improvement. [ Ferrer and Martin, 1995 ] also reports improved performance from seeding the initial population with previously found good solutions. While <ref> [ Kraft et al., 1994 ] </ref> construct the initial population to contain a high proportion (80% or more) of terminals which the user has chosen as likely to be relevant. 5.9.1 Results In a group of 59 runs, five produced solutions which passed the first set of tests.
Reference: [ Langdon, 1995a ] <author> W. B. Langdon. </author> <title> Directed crossover within genetic programming. Research Note RN/95/71, </title> <address> University College London, Gower Street, London WC1E 6BT, UK, </address> <month> September </month> <year> 1995. </year>
Reference-contexts: Otherwise it is biased to choose trees that appear to fail most often (details given in <ref> [ Langdon, 1995a ] </ref> ). An alternative worth exploring would be a more incremental approach aiming program modification at code that is closest to working, avoiding code that is performing badly until other code is working.
Reference: [ Langdon, 1995b ] <author> W. B. Langdon. </author> <title> Evolving data structures using genetic programming. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 295-302, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Langdon, 1995c ] <author> W. B. Langdon. </author> <title> Evolving data structures using genetic programming. Research Note RN/95/1, </title> <publisher> UCL, </publisher> <address> Gower Street, London, WC1E 6BT, UK, </address> <month> January </month> <year> 1995. </year>
Reference: [ Langdon, 1995d ] <author> W. B. Langdon. </author> <title> Scheduling planned maintenance of the national grid. </title> <editor> In Terence C. Fogarty, editor, </editor> <booktitle> Evolutionary Computing, number 993 in Lecture Notes in Computer Science, </booktitle> <pages> pages 132-153. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [ Langdon, 1996a ] <author> W. B. Langdon. </author> <title> Scheduling maintenance of electrical power transmission networks using genetic programming. </title> <editor> In John Koza, editor, </editor> <booktitle> Late Breaking Papers 245 at the GP-96 Conference, </booktitle> <pages> pages 107-116, </pages> <address> Stanford, CA, USA, 28-31 July 1996. </address> <publisher> Stanford Bookstore. </publisher>
Reference: [ Langdon, 1996b ] <author> W. B. Langdon. </author> <title> Using data structures within genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 141-148, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: The better than random performance of PADO may be due to its many other features rather than its simple memory structure. 174 6.5 Summary The experiments described in Sections 6.1 to 6.3 (which were reported in part in <ref> [ Langdon, 1996b ] </ref> ) have shown GP can solve two new problems.
Reference: [ Langdon, 1996c ] <author> William B. Langdon. </author> <title> A bibliography for genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter B, </booktitle> <pages> pages 507-532. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference: [ Langdon, 1996d ] <author> William B. Langdon. </author> <title> Data structures and genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 20, </booktitle> <pages> pages 395-414. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: Our experiments (which were published in part in <ref> [ Langdon, 1996d ] </ref> ) show genetic programming, using indexed memory, can automatically implement integer list structures, co-evolving all ten components simultaneously. The list data structure is a generalisation of the stack and the queue data structures (which have already been evolved) however it is more complex than either.
Reference: [ Lankhorst, 1995 ] <author> Marc M. Lankhorst. </author> <title> A genetic algorithm for the induction of pushdown automata. </title> <booktitle> In 1995 IEEE Conference on Evolutionary Computation, </booktitle> <volume> volume 2, </volume> <pages> pages 741-746, </pages> <address> Perth, Australia, </address> <month> 29 November - 1 December </month> <year> 1995. </year> <note> IEEE Press. </note>
Reference-contexts: solve the balanced bracket problem directly when given an appropriate data structure ( [ Zomorodian, 1995 ] previously solved this problem using GP to evolve a specification for a pushdown automaton, [ Wyard, 1991 ] used a GA operating on formal grammar rules to induce a grammar for it and <ref> [ Lankhorst, 1995 ] </ref> used a fixed representation GA to specify a pushdown automaton, while [ Sun et al., 1990 ] solved it by training a neural network in combination with a stack).
Reference: [ Levine, 1994 ] <author> David Levine. </author> <title> A Parallel Genetic Algorithm for the Set Partitioning Problem. </title> <type> PhD thesis, </type> <institution> Illinois Institute of Technology, Mathematics and Computer Science Division, Argonne National Laboratory, </institution> <address> 9700 South Cass Avenue, Argonne, IL 60439, USA, </address> <month> May </month> <year> 1994. </year>
Reference: [ Louis and Rawlins, 1993 ] <editor> Sushil J. Louis and Gregory J. E. Rawlins. Pareto optimality, GA-easiness and deception. In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 118-123, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Lucas, 1994 ] <author> Simon Lucas. </author> <title> Structuring chromosomes for context-free grammar evolution. </title> <booktitle> In ICEC'94: Proceedings of The IEEE Conference on Evolutionary Computation, IEEE World Congress on Computational Intelligence, </booktitle> <volume> volume 1, </volume> <pages> pages 130-135, </pages> <address> Walt Disney World Dolphin Hotel, Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE. </publisher>
Reference-contexts: However [ Koza, 1992, page 442 ] recasts a simple language recognition problem in terms of classifying DNA sequences as introns or exons and shows GP can evolve a correct program for this task and <ref> [ Wyard, 1991; Wyard, 1994; Lucas, 1994 ] </ref> use GAs operating on formal grammar rules of various types to induce grammars for a number of regular and context free languages.
Reference: [ Luke and Spector, 1996 ] <author> Sean Luke and Lee Spector. </author> <title> Evolving teamwork and coordination with genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 150-156, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher> <pages> 246 </pages>
Reference: [ Maher and Kundu, 1993 ] <author> M. L. Maher and S. Kundu. </author> <title> Adaptive design using a genetic algorithm. </title> <editor> In John S. Gero and Fay Sudweeks, editors, </editor> <booktitle> Formal design methods for computer-aided design, </booktitle> <pages> pages 211-228, </pages> <institution> University of Sydney, NSW, Australia, </institution> <month> Jun </month> <year> 1993. </year> <title> Key Center of Design Computing, </title> <institution> University of Sydney. </institution>
Reference: [ Manela, 1993 ] <author> Mauro Manela. </author> <title> Contributions to the Theory and Applications of Genetic Algorithms. </title> <type> PhD thesis, </type> <institution> University College, </institution> <address> London, </address> <month> December </month> <year> 1993. </year>
Reference: [ Masand, 1994 ] <author> Brij Masand. </author> <title> Optimising confidence of text classification by evolution of symbolic expressions. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 21, </booktitle> <pages> pages 445-458. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Maxwell III, 1994 ] <author> Sidney R. Maxwell III. </author> <title> Experiments with a coroutine model for genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <address> Orlando, Florida, USA, volume 1, pages 413-417a, Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: In [ Koza, 1994, Chapters 18 and 20 ] the indefinite loop problem is side stepped by predefining the loop and its limits so the loop contents are evolved but not its start or terminating conditions. While Maxwell's co-routine model <ref> [ Maxwell III, 1994 ] </ref> avoids loop timeouts by allowing selection between executing programs (those that are stuck in an infinite loop are expected to have a low fitness and thus to be removed from the population even though they are still executing). 5.4.2 Syntax Restrictions Syntax rules were imposed with <p> Therefore the threshold was deliberately set high at about 8 fi fastest program that might evolve. This is thought to be the first use of an explicit CPU penalty in the fitness function, however both Teller's PADO and <ref> [ Maxwell III, 1994 ] </ref> include implicit run time as part of fitness evaluation and there are many case where program size is included as part of the fitness calculation, e.g. [ Iba et al., 1994b; Zhang and Muhlenbein, 1995a ] (where the language does not include program branching, subroutines or
Reference: [ Maxwell, 1996 ] <author> S. R. Maxwell. </author> <title> Why might some problems be difficult for genetic programming to find solutions? In John R. </title> <editor> Koza, editor, </editor> <booktitle> Late Breaking Papers at the Genetic Programming 1996 Conference Stanford University July 28-31, </booktitle> <year> 1996, </year> <pages> pages 125-128, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> Stanford Bookstore. </publisher>
Reference: [ McKay et al., 1995 ] <author> Ben McKay, Mark J. Willis, and Geoffrey W. Barton. </author> <title> Using a tree structured genetic algorithm to perform symbolic regression. </title> <editor> In A. M. S. Zalzala, editor, </editor> <booktitle> First International Conference on Genetic Algorithms in Engineering Systems: Innovations and Applications, GALESIA, </booktitle> <volume> volume 414, </volume> <pages> pages 487-492, </pages> <address> Sheffield, UK, </address> <month> 12-14 September </month> <year> 1995. </year> <pages> IEE. </pages>
Reference: [ Montana, 1993 ] <author> David J. Montana. </author> <title> Strongly typed genetic programming. </title> <type> BBN Technical Report #7866, </type> <institution> Bolt Beranek and Newman, Inc., </institution> <address> 10 Moulton Street, Cambridge, MA 02138, USA, </address> <month> 7 May </month> <year> 1993. </year>
Reference: [ Montana, 1994 ] <author> David J. Montana. </author> <title> Strongly typed genetic programming. </title> <type> BBN Technical Report #7866, </type> <institution> Bolt Beranek and Newman, Inc., </institution> <address> 10 Moulton Street, Cambridge, MA 02138, USA, </address> <month> March </month> <year> 1994. </year>
Reference: [ Montana, 1995 ] <author> David J. Montana. </author> <title> Strongly typed genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(2) </volume> <pages> 199-230, </pages> <year> 1995. </year> <month> 247 </month>
Reference-contexts: Only the output structure 172 may be written to. Various problem dependent functions are provided for cutting and splicing segments of melodies but data values within the data structures cannot be directly manipulated. 6.4.4 Strongly Typed Genetic Programming <ref> [ Montana, 1995 ] </ref> presents two examples where GP is provided with local variables which it uses to solve problems (the two other examples don't allow explicit use of evolvable memory). The use of the strong typing framework means the variables must be typed. <p> Alternatively perhaps cleverer genetic operations could avoid the trap by changing programs from using one type of memory to another in a consistent manner so new programs continue to work as before. While strongly typed GP can reduce the size of the search space <ref> [ Montana, 1995 ] </ref> , it may also transform it so that it is easier to search. There are a number of techniques which automatically change the representation.
Reference: [ Nachbar, 1995 ] <author> Robert B. Nachbar. </author> <title> Genetic programming. </title> <journal> The Mathematica Journal, </journal> <volume> 5(3) </volume> <pages> 44-55, </pages> <year> 1995. </year>
Reference: [ Nguyen and Huang, 1994 ] <author> Thang Nguyen and Thomas Huang. </author> <title> Evolvable 3D modeling for model-based object recognition systems. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 22, </booktitle> <pages> pages 459-475. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Nordin and Banzhaf, 1995a ] <author> Peter Nordin and Wolfgang Banzhaf. </author> <title> Evolving turing-complete programs for a register machine with self-modifying code. </title> <editor> In L. Eshelman, editor, </editor> <booktitle> Genetic Algorithms: Proceedings of the Sixth International Conference (ICGA95), </booktitle> <pages> pages 318-325, </pages> <address> Pittsburgh, PA, USA, 15-19 July 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: Teller's uses the anytime system in his PADO work [ Teller and Veloso, 1996; Teller and Veloso, 1995c; Teller and Veloso, 1995d; Teller and Veloso, 1995b; Teller, 1995a; Teller, 1995b; Teller, 1996; Teller and Veloso, 1995a ] . <ref> [ Nordin and Banzhaf, 1995a, page 324 ] </ref> enforces a limit on the total number of times loops within a program may be executed while [ Koza, 1992, Chapter 18 ] applies both a limit on the total number of iterations (100) and a limit for each loop primitive (15 or <p> Thus it is "highly probable" [ Crepeau, 1995, page 132 ] that the needed ascii values are initially in the indexed memory. Another GP system which evolves machine code, based this time on the SUN RISC architecture, allows large amounts of directly addressable memory, however <ref> [ Nordin and Banzhaf, 1995a ] </ref> does not describe experiments using it. [ Nordin and Banzhaf, 1996 ] describes experiments using the system for sound compression where indexed memory and structured memory (a stack) were tried.
Reference: [ Nordin and Banzhaf, 1995b ] <author> Peter Nordin and Wolfgang Banzhaf. </author> <title> Genetic programming controlling a miniature robot. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 61-67, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference: [ Nordin and Banzhaf, 1996 ] <author> Peter Nordin and Wolfgang Banzhaf. </author> <title> Programmatic compression of images and sound. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 345-350, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Another GP system which evolves machine code, based this time on the SUN RISC architecture, allows large amounts of directly addressable memory, however [ Nordin and Banzhaf, 1995a ] does not describe experiments using it. <ref> [ Nordin and Banzhaf, 1996 ] </ref> describes experiments using the system for sound compression where indexed memory and structured memory (a stack) were tried. In these experiments "programs took longer time to evolve and performed worse in fitness but had a softer sound with less overtones" than experiments without memory.
Reference: [ Nordin et al., 1995 ] <author> Peter Nordin, Frank Francone, and Wolfgang Banzhaf. </author> <title> Explicitly defined introns and destructive crossover in genetic programming. </title> <editor> In Justinian P. Rosca, editor, </editor> <booktitle> Proceedings of the Workshop on Genetic Programming: From Theory to Real-World Applications, </booktitle> <pages> pages 6-22, </pages> <address> Tahoe City, California, USA, </address> <month> 9 July </month> <year> 1995. </year>
Reference: [ Nordin et al., 1996 ] <author> Peter Nordin, Frank Francone, and Wolfgang Banzhaf. </author> <title> Explicitly defined introns and destructive crossover in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 6, </booktitle> <pages> pages 111-134. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: Their below average fitness may be associated with the CPU penalty, which introduces a small selection pressure against "introns" (see <ref> [ Nordin et al., 1996 ] </ref> ) or code of no immediate purpose and this may eventually succeed in removing all of certain primitives.
Reference: [ Nordin, 1994a ] <author> Peter Nordin. </author> <title> A compiling genetic programming system that directly manipulates the machine code. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 14, </booktitle> <pages> pages 311-331. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Nordin, 1994b ] <author> Peter Nordin. </author> <title> Two stage genetic programming using prolog. Electronic Correspondence, </title> <booktitle> 1994. </booktitle> <pages> 248 </pages>
Reference: [ Oakley, 1994 ] <author> Howard Oakley. </author> <title> Two scientific applications of genetic programming: Stack filters and non-linear equation fitting to chaotic data. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 17, </booktitle> <pages> pages 369-389. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Oei et al., 1991 ] <author> Christopher K. Oei, David E. Goldberg, and Shau-Jin Chang. </author> <title> Tournament selection, niching, and the preservation of diversity. </title> <type> IlliGAL Report No. 91011, </type> <institution> University of Illinois at Urbana-Champaign, Urbana, </institution> <address> Il 61801, USA, </address> <month> December </month> <year> 1991. </year>
Reference: [ Openshaw and Turton, 1994 ] <author> S. Openshaw and I. Turton. </author> <title> Building new spatial interaction models using genetic programming. </title> <editor> In T. C. Fogarty, editor, </editor> <booktitle> Evolutionary Computing, Lecture Notes in Computer Science, </booktitle> <address> Leeds, UK, 11-13 April 1994. </address> <publisher> Springer-Verlag. </publisher>
Reference: [ O'Reilly and Oppacher, 1994 ] <author> Una-May O'Reilly and Franz Oppacher. </author> <title> Program search with a hierarchical variable length representation: Genetic programming, simulated annealing and hill climbing. </title> <editor> In Yuval Davidor, Hans-Paul Schwefel, and Reinhard Manner, editors, </editor> <booktitle> Parallel Problem Solving from Nature - PPSN III, number 866 in Lecture Notes in Computer Science, </booktitle> <pages> pages 397-406, </pages> <address> Jerusalem, </address> <month> 9-14 October </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference: [ O'Reilly and Oppacher, 1995 ] <author> Una-May O'Reilly and Franz Oppacher. </author> <title> The troubling aspects of a building block hypothesis for genetic programming. </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 73-88, </pages> <address> Estes Park, Colorado, USA, 31 July-2 August 1994 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ O'Reilly and Oppacher, 1996 ] <author> Una-May O'Reilly and Franz Oppacher. </author> <title> A comparative analysis of GP. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 2, </booktitle> <pages> pages 23-44. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: them to the population via a mutation operator would not be expected to solve this problem directly. (However mutation might be beneficial by allowing the population to retain them whilst it evolves beyond the deceptive local optima or via other effects such as incorporating an element of hill climbing, see <ref> [ O'Reilly and Oppacher, 1996 ] </ref> and [ Iba et al., 1994c ] ).
Reference: [ O'Reilly, 1995 ] <author> Una-May O'Reilly. </author> <title> An Analysis of Genetic Programming. </title> <type> PhD thesis, </type> <institution> Carleton University, Ottawa-Carleton Institute for Computer Science, </institution> <address> Ottawa, Ontario, Canada, </address> <month> 22 September </month> <year> 1995. </year>
Reference: [ O'Reilly, 1996 ] <author> Una-May O'Reilly. </author> <title> Investigating the generality of automatically defined functions. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 351-356, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher> <pages> 249 </pages>
Reference: [ Park and Miller, 1988 ] <author> Stephen K. Park and Keith W. Miller. </author> <title> Random number generators: Good ones are hard to find. </title> <journal> Communications of the ACM, </journal> <volume> 32(10) </volume> <pages> 1192-1201, </pages> <month> Oct </month> <year> 1988. </year>
Reference-contexts: The 60 runs of the stack problem use identical parameters and differ only in the initial seed used by the <ref> [ Park and Miller, 1988 ] </ref> pseudo random number generator. For convenience individual runs are numbered (1) to (60).
Reference: [ Perkis, 1994 ] <author> Tim Perkis. </author> <title> Stack-based genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <pages> pages 148-153, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference: [ Perry, 1994 ] <author> J. E. Perry. </author> <title> The effect of population enrichment in genetic programming. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <pages> pages 456-461, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: The population is allowed to evolve as before. The directed crossover mechanism (Section 5.6) ensures crossovers are allowed in every tree but are weighted towards the newly introduced random code. This use of a substantially adapted population as a starting point can be compared to Perry's <ref> [ Perry, 1994 ] </ref> use of an initial population which is primarily random but also contains a small number of partially adapted individuals.
Reference: [ Petry and Dunay, 1995 ] <author> Frederick E. Petry and Bertrand Daniel Dunay. </author> <title> Automatic programming and program maintenance with genetic programming. </title> <journal> International Journal of Software Engineering and Knowledge Engineering, </journal> <volume> 5(2) </volume> <pages> 165-177, </pages> <year> 1995. </year>
Reference-contexts: This may involve correcting bugs in existing code or adapting code to new requirements. In the software industry maintenance is a major task but has as yet attracted little interest from GP. <ref> [ Petry and Dunay, 1995 ] </ref> is one exception and [ Andre, 1994c ] considers using GP to extend the functionality of human written optical character recognition programs (i.e. maintain them). <p> 6.1 Balanced Bracket Problem Other work on GP evolving language recognizers has concentrated upon using GP to evolve tree based specifications for abstract machines, such as finite state machines [ Dunay et al., 1994 ] , deterministic pushdown automata [ Zomorodian, 1995 ] , machines composed of simple Turing machines <ref> [ Dunay and Petry, 1995; Petry and Dunay, 1995 ] </ref> or special memory nodes within the tree [ Iba et al., 1995 ] .
Reference: [ Polani and Uthmann, 1993 ] <author> Daniel Polani and Thomas Uthmann. </author> <title> Training kohonen feature maps in different topologies: an analysis using genetic algorithms. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 326-333, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Price, 1970 ] <author> George R. Price. </author> <title> Selection and covariance. </title> <journal> Nature, </journal> <volume> 227, August 1 </volume> <pages> 520-521, </pages> <year> 1970. </year>
Reference-contexts: Section 7.5 concludes with measurements that show in the stack population crossover readily produces improvements in performance initially but later no improvements at all are made by crossover. 7.1 Price's Selection and Covariance Theorem Price's Covariance and Selection Theorem <ref> [ Price, 1970 ] </ref> from population genetics relates the change in frequency of a gene in a population from one generation to the next, to the covariance of the gene's frequency in the original population with the number of offspring produced by individuals in that population (see Equation 7.1). <p> any linear combination of genes at any number of loci, holds for any sort of dominance or epistasis (non-linear interaction between genes), for sexual or asexual 177 178 reproduction, for random or non-random mating, for diploid, haploid or polyploid species, and even for imaginary species with more than two sexes" <ref> [ Price, 1970 ] </ref> . In particular it applies to genetic algorithms (GAs) [ Altenberg, 1994 ] . <p> Cov = Covariance 7.1.1 Proof of Price's Theorem In this section we follow the proof of Price's Theorem given in <ref> [ Price, 1970 ] </ref> (which assumes sexual reproduction) and show it applies to Genetic Algorithms. In the next section (7.1.2), we extend the proof to cover asexual reproduction. This more general proof also applies to Genetic Algorithms, including GAs with asexual reproduction (i.e. copying and mutation). <p> re production is dependent upon fitness and in general dependent on the presence of specific genes but selection of crossover points is random and so independent of genes (Section 7.1.4 discusses this further for GPs). 7.1.2 Proof of Price's Theorem with Asexual Reproduction The proof of Price's theorem given in <ref> [ Price, 1970 ] </ref> (reproduced above) assumes sexual reproduction. For it to be applied to GAs and GP it needs to be extended to cover asexual reproduction (i.e. copying and mutation). <p> This and other analysis, leads [ Altenberg, 1995, page 43 ] to conclude "the Schema Theorem has no implications for how well a GA is performing". While the proof in <ref> [ Price, 1970 ] </ref> assumes discrete generations the result "can be applied to species with overlapping, inter-breeding generations". Thus the theorem can be applied to steady state GAs [ Syswerda, 1989; Syswerda, 1991b ] such as we use in Chapters 3, 4, 5 and 6.
Reference: [ Price, 1972 ] <author> George R. Price. </author> <title> Fisher's `fundamental theorem' made clear. </title> <journal> Annals of Human Genetics, </journal> <volume> 36 </volume> <pages> 129-140, </pages> <year> 1972. </year>
Reference-contexts: A high fitness variance may indicate a high degree of variation in the population, which might be beneficial). <ref> [ Price, 1972 ] </ref> makes the point that Fisher's publications on his fundamental theorem of natural selection "contains the most confusing published scientific writing I know of" [page 134] leading to "forty years of bewilderment about what he meant" [page 132]. [ Price, 1972 ] and [ Ewens, 1989; Ewens, 1992b; <p> of variation in the population, which might be beneficial). <ref> [ Price, 1972 ] </ref> makes the point that Fisher's publications on his fundamental theorem of natural selection "contains the most confusing published scientific writing I know of" [page 134] leading to "forty years of bewilderment about what he meant" [page 132]. [ Price, 1972 ] and [ Ewens, 1989; Ewens, 1992b; Ewens, 1992a ] argue that the usual interpretation of Fisher's theorem is incorrect and his "fitness" should be considered as just the component of fitness which varies linearly with gene frequency. <p> All other effects, such as "dominance, epistasis, population pressure, climate, and interactions with other species he regarded 190 as a matter of the environment" <ref> [ Price, 1972, page 130 ] </ref> . <p> Price and Ewens both give proofs for this interpretation of Fisher's theorem but conclude that it is "mathematically correct but less important than he thought it to be" <ref> [ Price, 1972, page 140 ] </ref> . 7.3 Evolution of Stack Problem Populations In this section we return to the stack problem of Chapter 3 and investigate why most runs failed to find a solution.
Reference: [ Qureshi, 1996 ] <author> Adil Qureshi. </author> <title> Evolving agents. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 369-374, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ Raik and Browne, 1996 ] <author> Simon E. Raik and David G. Browne. </author> <title> Implicit versus explicit: A comparison of state in genetic programming. </title> <editor> In John R. Koza, editor, </editor> <booktitle> Late Breaking Papers at the Genetic Programming 1996 Conference Stanford University July 28-31, </booktitle> <year> 1996, </year> <pages> pages 151-159, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> Stanford Bookstore. </publisher> <pages> 250 </pages>
Reference-contexts: For example <ref> [ Raik and Browne, 1996 ] </ref> use indexed memory to show that on a reactive task, GP with explicit memory performs better than GP with implicit memory.
Reference: [ Raik and Durnota, 1994 ] <author> Simon Raik and Bohdan Durnota. </author> <title> The evolution of sporting strategies. </title> <editor> In Russel J. Stonier and Xing Huo Yu, editors, </editor> <booktitle> Complex Systems: Mechanisms of Adaption, </booktitle> <pages> pages 85-92. </pages> <publisher> IOS Press, </publisher> <year> 1994. </year>
Reference: [ Ray, 1991 ] <author> Thomas S. Ray. </author> <title> Is it alive or is it GA. </title> <editor> In Richard K. Belew and Lashon B. Booker, editors, </editor> <booktitle> Proceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> pages 527-534, </pages> <address> University of California - San Diego, La Jolla, CA, USA, 13-16 July 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Reynolds, 1992 ] <author> Craig W. Reynolds. </author> <title> An evolved, vision-based behavioral model of coordinated group motion. </title> <editor> In Meyer and Wilson, editors, </editor> <booktitle> From Animals to Animats (Proceedings of Simulation of Adaptive Behaviour). </booktitle> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference: [ Reynolds, 1994a ] <author> Craig W. Reynolds. </author> <title> Competition, coevolution and the game of tag. </title> <editor> In Rodney A. Brooks and Pattie Maes, editors, </editor> <booktitle> Proceedings of the Fourth International Workshop on the Synthesis and Simulation of Living Systems, </booktitle> <pages> pages 59-69, </pages> <publisher> MIT, </publisher> <address> Cam-bridge, MA, USA, 6-8 July 1994. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Co-evolution can provide an automatic means of dynamically changing the fitness function [ Siegel, 1994 ] . There is increasing interest in using co-evolution <ref> [ Sen, 1996; Reynolds, 1994a; Ryan, 1995 ] </ref> and improved performance has been claimed [ Hillis, 1992 ] .
Reference: [ Reynolds, 1994b ] <author> Craig W. Reynolds. </author> <title> Evolution of obstacle avoidance behaviour:using noise to promote robust solutions. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 10, </booktitle> <pages> pages 221-241. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Reynolds, 1994c ] <author> Craig W. Reynolds. </author> <title> An evolved, vision-based behavioral model of obstacle avoidance behaviour. </title> <editor> In Christopher G. Langton, editor, </editor> <booktitle> Artificial Life III, volume XVII of SFI Studies in the Sciences of Complexity, </booktitle> <pages> pages 327-346. </pages> <publisher> Addison-Wesley, </publisher> <address> Santa Fe Institute, New Mexico, USA, </address> <month> 15-19 June </month> <year> 1992 1994. </year>
Reference: [ Reynolds, 1996 ] <author> Craig Reynolds. Boids. </author> <note> WWW home page, 12 August 1996. http://reality.sgi.com/craig/boids.html. </note>
Reference: [ Ribeiro Filho and Treleaven, 1994 ] <author> J. L. Ribeiro Filho and P. Treleaven. </author> <title> GAME: A framework for programming genetic algorithms applications. </title> <booktitle> In Proceedings of the First IEEE Conference on Evolutionary Computing Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <volume> volume 2, </volume> <pages> pages 840-845, </pages> <address> Orlando, USA, 26 June-2 July 1994. </address> <publisher> IEEE Press. </publisher>
Reference: [ Ribeiro Filho et al., 1994 ] <author> Jose L. Ribeiro Filho, Philip C. Treleaven, and Cesare Alippi. </author> <title> Genetic-algorithm programming environments. </title> <booktitle> Computer, </booktitle> <address> 27(6):28, </address> <month> June </month> <year> 1994. </year> <month> 251 </month>
Reference: [ Romaniak, 1993 ] <author> Steve G. Romaniak. </author> <title> Evolutionary growth perceptrons. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 334-341, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Rosca and Ballard, 1996 ] <author> Justinian P. Rosca and Dana H. Ballard. </author> <title> Discovery of subroutines in genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 9, </booktitle> <pages> pages 177-202. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference-contexts: As discussed in Section 2.3.6 a number of papers show (albeit on very different problems) benefits in using either current behaviour <ref> [ Rosca and Ballard, 1996 ] </ref> program syntax [ Gruau, 1996; D'haeseleer, 1994 ] or evolving program syntax [ Whigham, 1995b ] to bias crossover or other genetic operators. Our mechanism succeeds in dynamically redistributing crossover locations to code in need of improvement as the population evolves. <p> That is if the variety is low then any other measures of genetic, phenotypic or fitness diversity must also be 197 low. The opposite does not hold when it is high. (Other definitions include fitness based population entropy <ref> [ Rosca and Ballard, 1996, Section 9.5 ] </ref> and using the ratio of sum of the sizes of every program in the population to the number of distinct subtrees within the population [ Keijzer, 1996 ] ).
Reference: [ Rosca, 1995 ] <author> Justinian P. Rosca. </author> <title> Genetic programming exploratory power and the discovery of functions. </title> <editor> In John Robert McDonnell, Robert G. Reynolds, and David B. Fogel, editors, </editor> <booktitle> Evolutionary Programming IV Proceedings of the Fourth Annual Conference on Evolutionary Programming, </booktitle> <pages> pages 719-736, </pages> <address> San Diego, CA, USA, 1-3 March 1995. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Typically this serves only to increase the convergence of the population. An number of attempts to "scale up" GP have been made based upon imposing functional abstraction on individuals in the population <ref> [ Koza, 1994; Angeline, 1993; Rosca, 1995 ] </ref> . These have had a degree of success. <p> There are a number of techniques which automatically change the representation. The following three techniques co-evolve the representation as the population itself evolves; The Genetic Library Builder (GLiB) [ Angeline, 1994 ] , Automatically Defined Functions (ADFs) [ Koza, 1994 ] and Adaptive Representations <ref> [ Rosca, 1995 ] </ref> . [ Koza, 1994, page 619 ] argues ADFs and other representations provide a different lens with which to view the solution space and that ADFs may help solve a problem by providing a better lens. ADFs were used in Chapters 4, 5 and 6.
Reference: [ Rosca, 1996 ] <author> Justinian Rosca. </author> <title> GP population variety. GP electronic mailing list, </title> <month> 21 Jun </month> <year> 1996. </year>
Reference-contexts: That is genetically diverse individuals may behave similarly, or even identically. As <ref> [ Rosca, 1996 ] </ref> points out, in the absence of side effects, diverse programs with identical behaviour can be readily constructed if the function set contains functions that are associative or commutative by simple reordering of function arguments. * Even if programs behave differently, in general or when evaluating the given
Reference: [ Ross, 1994 ] <author> Peter Ross. About PGA 2.8, </author> <year> 1994. </year> <note> Available via ftp ftp.dai.ed.ac.uk directory pub/pga-2.8. </note>
Reference: [ Ryan, 1994 ] <editor> Conor Ryan. Pygmies and civil servants. In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 11, </booktitle> <pages> pages 243-263. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: It also means almost all crossovers occur between disparate individuals. It is unclear how beneficial this is. <ref> [ Ryan, 1994 ] </ref> suggests benefits for disassortive mating, while [ Harvey, 1992 ] suggests (for a variable length but linear GA) better results may be obtained by breeding between similar programs. He suggests this will produce smaller improvements at each stage but more progress in the long run. <p> Techniques based on biased mate selection to preserve diversity are discussed in <ref> [ Ryan, 1994 ] </ref> . Defocusing the search means the search is more random and will take longer, if indeed it succeeds.
Reference: [ Ryan, 1995 ] <author> Conor Ryan. GPRobots and GPTeams competition, </author> <title> co-evolution and cooperation in genetic programming. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 86-93, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference-contexts: Co-evolution can provide an automatic means of dynamically changing the fitness function [ Siegel, 1994 ] . There is increasing interest in using co-evolution <ref> [ Sen, 1996; Reynolds, 1994a; Ryan, 1995 ] </ref> and improved performance has been claimed [ Hillis, 1992 ] .
Reference: [ Schoenauer et al., 1995 ] <author> Marc Schoenauer, Bertrand Lamy, and Francois Jouve. </author> <title> Identification of mechanical behaviour by genetic programming part II: Energy formulation. </title> <type> Technical report, </type> <institution> Ecole Polytechnique, </institution> <address> 91128 Palaiseau, France, </address> <year> 1995. </year>
Reference: [ Self, 1992 ] <author> Steven Self. </author> <title> On the origin of effective procedures by means of artificial selection. </title> <type> Master's thesis, </type> <institution> Birkbeck College, University of London, UK, </institution> <month> September </month> <year> 1992. </year>
Reference: [ Sen, 1996 ] <author> Sandip Sen. </author> <title> Adaptation, coevolution and learning in multiagent systems. Technical Report SS-96-01, </title> <publisher> AAAI Press, Stanford, </publisher> <address> CA, </address> <month> March </month> <year> 1996. </year> <month> 252 </month>
Reference-contexts: Co-evolution can provide an automatic means of dynamically changing the fitness function [ Siegel, 1994 ] . There is increasing interest in using co-evolution <ref> [ Sen, 1996; Reynolds, 1994a; Ryan, 1995 ] </ref> and improved performance has been claimed [ Hillis, 1992 ] .
Reference: [ Shannon and Weaver, 1964 ] <author> Claude E. Shannon and Warren Weaver. </author> <title> The Mathematical Theory of Communication. </title> <publisher> The University of Illinois Press, </publisher> <address> Urbana, </address> <year> 1964. </year>
Reference: [ Sharman and Esparcia-Alcazar, 1993 ] <author> Ken C. Sharman and Anna I. Esparcia-Alcazar. </author> <title> Genetic evolution of symbolic signal models. </title> <booktitle> In Proceedings of the Second International Conference on Natural Algorithms in Signal Processing, </booktitle> <address> NASP'93, </address> <publisher> Essex University, </publisher> <month> 15-16 November </month> <year> 1993. </year>
Reference: [ Sharman et al., 1995 ] <author> Ken C. Sharman, Anna I. Esparcia Alcazar, and Yun Li. </author> <title> Evolving signal processing algorithms by genetic programming. </title> <editor> In A. M. S. Zalzala, editor, </editor> <booktitle> First International Conference on Genetic Algorithms in Engineering Systems: Innovations and Applications, GALESIA, </booktitle> <volume> volume 414, </volume> <pages> pages 473-480, </pages> <address> Sheffield, UK, </address> <month> 12-14 September </month> <year> 1995. </year> <pages> IEE. </pages>
Reference-contexts: While this structure is applicable to a range of signal processing problem, once again memory has been constrained for the GP into a structure appropriate to the problem. <ref> [ Sharman et al., 1995; Esparcia Alcazar and Sharman, 1996 ] </ref> similarly use memory terminals to hold values previously calculated at nodes within the program tree, however the mechanism for connecting terminals to inner nodes is different; explicit "psh" functions within the program tree save the value at that point in
Reference: [ Shaw, 1994 ] <author> Jane Shaw. </author> <title> References on the application of genetic algorithms to production scheduling, </title> <month> June </month> <year> 1994. </year> <note> Available via anonymous ftp site cs.ucl.ac.uk file genetic/biblio/ga-js-shed-bibliography.txt. </note>
Reference: [ Siegel, 1994 ] <author> Eric V. Siegel. </author> <title> Competitively evolving decision trees against fixed training cases for natural language processing. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 19, </booktitle> <pages> pages 409-423. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Co-evolution can provide an automatic means of dynamically changing the fitness function <ref> [ Siegel, 1994 ] </ref> . There is increasing interest in using co-evolution [ Sen, 1996; Reynolds, 1994a; Ryan, 1995 ] and improved performance has been claimed [ Hillis, 1992 ] .
Reference: [ Sims, 1994 ] <author> Karl Sims. </author> <title> Evolving 3D morphology and behaviour by competition. </title> <editor> In R. Brooks and P. Maes, editors, </editor> <booktitle> Artificial Life IV Proceedings, </booktitle> <pages> pages 28-39, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, 6-8 July 1994. </address> <publisher> MIT Press. </publisher>
Reference: [ Singleton, 1993 ] <author> Andrew Singleton. </author> <title> Meta GA, desktop supercomputing and object-orientated GP. </title> <booktitle> Notes from Genetic Programming Workshop at ICGA-93, </booktitle> <year> 1993. </year>
Reference: [ Singleton, 1994 ] <author> Andy Singleton. </author> <title> Genetic programming with C++. </title> <journal> BYTE, </journal> <pages> pages 171-176, </pages> <month> February </month> <year> 1994. </year>
Reference-contexts: crossover produces more duplicates shortly after each new improved solution is found (see Figure 7.17 on page 206). 198 sequent duplicates produced by crossover in stack selected runs. 199 200 7.4.2 Evolution of Variety in a Steady State GA The GA used in the experiments in this thesis is GP-QUICK <ref> [ Singleton, 1994 ] </ref> , which implements a steady-state GA [ Syswerda, 1989; Syswerda, 1991b ] . <p> Thus both changes 1. and 2.b) should be tried. The use of p r = 0:1 in this thesis stems from the decision to use parameters as similar to [ Koza, 1992 ] as possible. It is also the supplied default value with GP-QUICK <ref> [ Singleton, 1994 ] </ref> . However the use of reproduction is not universal, for example the CGPS [ Nordin, 1994a; Nordin and Banzhaf, 1995a; Francone et al., 1996 ] does not implement it.
Reference: [ Spector and Alpern, 1994 ] <author> Lee Spector and Adam Alpern. </author> <title> Criticism, culture, and the automatic generation of artworks. </title> <booktitle> In Proceedings of Twelfth National Conference on Artificial Intelligence, </booktitle> <pages> pages 3-8, </pages> <address> Seattle, Washington, USA, 1994. </address> <publisher> AAAI Press/MIT Press. </publisher>
Reference: [ Spector and Alpern, 1995 ] <author> Lee Spector and Adam Alpern. </author> <title> Induction and recapitulation of deep musical structure. </title> <booktitle> In Proceedings of International Joint Conference on Artificial 253 Intelligence, IJCAI'95 Workshop on Music and AI, </booktitle> <address> Montreal, Quebec, Canada, </address> <month> 20-25 August </month> <year> 1995. </year>
Reference-contexts: This is said to give "the best average validation score", i.e. better than when the programs were not given access to memory. Details of how the evolved programs use memory are not given and no comparison with other memory sizes or structures is provided. 6.4.3 Case Base <ref> [ Spector and Alpern, 1995 ] </ref> presents a system which attempts to evolve music-making programs, specifically producing jazz improvisation responses to supplied "single-measure calls". "While we (Spector and Alpern) have not yet succeeded in inducing and recapitulating the deep structure of jazz melody" promising music generating programs have been evolved and
Reference: [ Spector and Luke, 1996 ] <author> Lee Spector and Sean Luke. </author> <title> Cultural transmission of information in genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 209-214, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ Spector, 1995 ] <author> Lee Spector. </author> <title> Evolving control structures with automatically defined macros. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 99-105, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference: [ Spencer, 1994 ] <author> Graham F. Spencer. </author> <title> Automatic generation of programs for crawling and walking. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 15, </booktitle> <pages> pages 335-353. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference: [ Starkweather et al., 1991 ] <author> T. Starkweather, S. McDaniel, K. Mathias, D. Whitley, and C. Whitley. </author> <title> A comparison of genetic sequencing operators. </title> <editor> In Richard K. Belew and Lashon B. Booker, editors, </editor> <booktitle> Proceedings of the fourth international conference on Genetic Algorithms, </booktitle> <pages> pages 69-76, </pages> <address> University of California - San Diego, La Jolla, CA, USA, 13-16 July 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Stender, 1993 ] <editor> Joachim Stender, editor. </editor> <booktitle> Parallel Genetic Algorithms: Theory and Applications. </booktitle> <publisher> IOS press, </publisher> <year> 1993. </year>
Reference: [ Sun et al., 1990 ] <author> G. Z. Sun, H. H. Chen, C. L. Giles, Y. C. Lee, and D. Chen. </author> <title> Connectionist pushdown automata that learn context-free grammars. </title> <booktitle> In Proceedings of the International Joint Conference on Neural Networks 1990, </booktitle> <volume> volume I, </volume> <pages> pages 577-580, </pages> <address> Washington, DC, USA, 15-19 January 1990. </address> <publisher> Lawrence Erlbaum. </publisher>
Reference-contexts: 1995 ] previously solved this problem using GP to evolve a specification for a pushdown automaton, [ Wyard, 1991 ] used a GA operating on formal grammar rules to induce a grammar for it and [ Lankhorst, 1995 ] used a fixed representation GA to specify a pushdown automaton, while <ref> [ Sun et al., 1990 ] </ref> solved it by training a neural network in combination with a stack).
Reference: [ Syswerda, 1989 ] <author> Gilbert Syswerda. </author> <title> Uniform crossover in genetic algorithms. </title> <editor> In J. David Schaffer, editor, </editor> <booktitle> Proceedings of the third international conference on Genetic Algorithms, </booktitle> <pages> pages 2-9, </pages> <institution> George Mason University, </institution> <address> 4-7 June 1989. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: While the proof in [ Price, 1970 ] assumes discrete generations the result "can be applied to species with overlapping, inter-breeding generations". Thus the theorem can be applied to steady state GAs <ref> [ Syswerda, 1989; Syswerda, 1991b ] </ref> such as we use in Chapters 3, 4, 5 and 6. For the theorem to hold the genetic operations (crossover and mutation in GA terms) must be independent of the gene. <p> is found (see Figure 7.17 on page 206). 198 sequent duplicates produced by crossover in stack selected runs. 199 200 7.4.2 Evolution of Variety in a Steady State GA The GA used in the experiments in this thesis is GP-QUICK [ Singleton, 1994 ] , which implements a steady-state GA <ref> [ Syswerda, 1989; Syswerda, 1991b ] </ref> .
Reference: [ Syswerda, 1991a ] <author> Gilbert Syswerda. </author> <title> Schedule optimization using genetic algorithms. </title> <editor> In Lawrence Davis, editor, </editor> <booktitle> Handbook of Genetic Algorithms, </booktitle> <pages> pages 332-349. </pages> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, </address> <year> 1991. </year> <month> 254 </month>
Reference: [ Syswerda, 1991b ] <author> Gilbert Syswerda. </author> <title> A study of reproduction in generational and steady state genetic algorithms. </title> <editor> In Gregory J. E. Rawlings, editor, </editor> <booktitle> Foundations of genetic algorithms, </booktitle> <pages> pages 94-101. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Indiana University, </address> <month> 15-18 July </month> <year> 1990 1991. </year>
Reference-contexts: While the proof in [ Price, 1970 ] assumes discrete generations the result "can be applied to species with overlapping, inter-breeding generations". Thus the theorem can be applied to steady state GAs <ref> [ Syswerda, 1989; Syswerda, 1991b ] </ref> such as we use in Chapters 3, 4, 5 and 6. For the theorem to hold the genetic operations (crossover and mutation in GA terms) must be independent of the gene. <p> is found (see Figure 7.17 on page 206). 198 sequent duplicates produced by crossover in stack selected runs. 199 200 7.4.2 Evolution of Variety in a Steady State GA The GA used in the experiments in this thesis is GP-QUICK [ Singleton, 1994 ] , which implements a steady-state GA <ref> [ Syswerda, 1989; Syswerda, 1991b ] </ref> .
Reference: [ Tackett and Carmi, 1994 ] <author> Walter Alden Tackett and Aviram Carmi. </author> <title> The donut problem: Scalability and generalization in genetic programming. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 7, </booktitle> <pages> pages 143-176. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Overlapping demes, which constrain mates to be selected only from near neighbours (similar to those in <ref> [ Tackett and Carmi, 1994 ] </ref> ) succeeded in delaying the lost of primitives but spreading the population out across the fitness landscape using a "fitness sharing function" [ Horn et al., 1993 ] was more effective in delaying the losses for longer and so was used.
Reference: [ Tackett, 1993 ] <author> Walter Alden Tackett. </author> <title> Genetic programming for feature discovery and image discrimination. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 303-309, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <address> 17-21 July 1993. </address> <publisher> Morgan Kaufmann. </publisher>
Reference: [ Tackett, 1994 ] <author> Walter Alden Tackett. </author> <title> Recombination, Selection, and the Genetic Construction of Computer Programs. </title> <type> PhD thesis, </type> <institution> University of Southern California, Department of Electrical Engineering Systems, </institution> <year> 1994. </year>
Reference-contexts: Each time a new individual is created, a 3 fi 3 square neighbourhood on the torus (known as a deme) is selected at random. Parents and the individual their offspring will re place are selected from this deme rather than from the whole population <ref> [ Tackett, 1994; Collins, 1992 ] </ref> . 155 Table 6.2: Number of correctly nested and incorrectly nested bracket test sentences of each length used in the nested bracket test case. Longer incorrect sentences were chosen at random from all the possible incorrect sentences of the same length.
Reference: [ Tackett, 1995a ] <author> Walter Alden Tackett. </author> <title> Greedy recombination and genetic search on the space of computer programs. </title> <editor> In L. Darrell Whitley and Michael D. Vose, editors, </editor> <booktitle> Foundations of Genetic Algorithms 3, </booktitle> <pages> pages 271-297, </pages> <address> Estes Park, Colorado, USA, 31 July-2 August 1994 1995. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: This interpretation of the theorem is only true when the population mates randomly and there is no dominance or epistasis" [ Frank, 1995, page 382 ] . An example of this usage is given in <ref> [ Tackett, 1995a, page 289 ] </ref> which claims "According to Fisher's fundamental theory" (emphasis added) "of natural selection the ability of a population to increase in fitness is proportional to the variance in fitness of the population members." We would certainly expect epistasis (non-linear interaction between genes) to occur in most <p> We conclude that under the usual interpretation Fisher's theorem does not normally apply to GAs. This is important because this interpretation of Fisher's theorem has been used as an argument in favour of GA selection schemes which produce a high variance in population fitness <ref> [ Tackett, 1995a, pages 272 and 290 ] </ref> . (There may be other reasons for preferring these selection methods. <p> If we continue to test all evolved programs on all the training set then GP machine resource usage will grow at least quadratically with task complexity. However techniques such as co-evolution [ Angeline and Pollack, 1993 ] , soft brood selection <ref> [ Tackett, 1995a ] </ref> and sparse training sets [ Francone et al., 1996 ] indicate it may not be necessary to exhaustively test every evolved program. 8.1 Recommendations A number of practical recommendations for GP work can be made.
Reference: [ Tackett, 1995b ] <author> Walter Alden Tackett. </author> <title> Mining the genetic program. </title> <journal> IEEE Expert, </journal> <volume> 10(3) </volume> <pages> 28-38, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: This is in dramatic contrast to the queue (which had no CPU or space penalties, cf. Figure 4.29, page 120) where programs rapidly grew to the limit of the available space. This growth is widely seen in GP and is often referred to as "bloat" <ref> [ Tackett, 1995b, page 31 ] </ref> . However the threshold was chosen with care to avoid over penalizing constructs (like loops) which have a high CPU cost but may not appear to help achieve higher fitness levels until later in the evolutionary process.
Reference: [ Taylor, 1995 ] <author> Stewart N. Taylor. </author> <title> Evolution by genetic programming of a spatial robot juggling control algorithm. </title> <editor> In Justinian P. Rosca, editor, </editor> <booktitle> Proceedings of the Workshop on Genetic Programming: From Theory to Real-World Applications, </booktitle> <pages> pages 104-110, </pages> <address> Tahoe City, California, USA, </address> <month> 9 July </month> <year> 1995. </year>
Reference: [ Teller and Veloso, 1995a ] <author> Astro Teller and Manuela Veloso. </author> <title> Algorithm evolution for face recognition: What makes a picture difficult. </title> <booktitle> In International Conference on Evolutionary Computation, </booktitle> <pages> pages 608-613, </pages> <address> Perth, Australia, </address> <month> 1-3 December </month> <year> 1995. </year> <note> IEEE Press. </note>
Reference: [ Teller and Veloso, 1995b ] <author> Astro Teller and Manuela Veloso. </author> <title> A controlled experiment: Evolution for learning difficult image classification. </title> <booktitle> In Seventh Portuguese Conference On Artificial Intelligence, volume 990 of Lecture Notes in Computer Science, </booktitle> <pages> pages 165-176, </pages> <address> Funchal, Madeira Island, Portugal, </address> <month> October 3-6 </month> <year> 1995. </year> <note> Springer-Verlag. 255 </note>
Reference: [ Teller and Veloso, 1995c ] <author> Astro Teller and Manuela Veloso. </author> <title> PADO: Learning tree structured algorithms for orchestration into an object recognition system. </title> <type> Technical Report CMU-CS-95-101, </type> <institution> Department of Computer Science, Carnegie Mellon University, </institution> <address> Pitts-burgh, PA, USA, </address> <year> 1995. </year>
Reference: [ Teller and Veloso, 1995d ] <author> Astro Teller and Manuela Veloso. </author> <title> Program evolution for data mining. </title> <journal> The International Journal of Expert Systems, </journal> <volume> 8(3), </volume> <year> 1995. </year>
Reference: [ Teller and Veloso, 1996 ] <author> Astro Teller and Manuela Veloso. </author> <title> PADO: A new learning architecture for object recognition. </title> <editor> In Katsushi Ikeuchi and Manuela Veloso, editors, </editor> <booktitle> Symbolic Visual Learning, </booktitle> <pages> pages 81-116. </pages> <publisher> Oxford University Press, </publisher> <year> 1996. </year>
Reference: [ Teller, 1993 ] <author> A. Teller. </author> <title> Learning mental models. </title> <booktitle> In Proceedings of the Fifth Workshop on Neural Networks: An International Conference on Computational Intelligence: Neural Networks, Fuzzy Systems, Evolutionary Programming, and Virtual Reality, </booktitle> <year> 1993. </year>
Reference-contexts: NB in both cases programs were evolved using memory appropriate to the problem. 6.4.2 One Indexed Memory Most of the published work on using GP where use of memory is explicitly evolved follows <ref> [ Teller, 1993; Teller, 1994a ] </ref> which introduced "indexed memory", i.e. a single multiple celled directly addressable memory, to GP. For example [ Raik and Browne, 1996 ] use indexed memory to show that on a reactive task, GP with explicit memory performs better than GP with implicit memory.
Reference: [ Teller, 1994a ] <author> Astro Teller. </author> <title> The evolution of mental models. </title> <editor> In Kenneth E. Kinnear, Jr., editor, </editor> <booktitle> Advances in Genetic Programming, chapter 9, </booktitle> <pages> pages 199-219. </pages> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Work so far <ref> [ Teller, 1994a; Andre, 1994b; Brave, 1995; Jannink, 1994 ] </ref> shows GP can automatically create programs which explicitly use directly addressable (indexed) memory to solve problems and Chapters 3, 4 and 5 demonstrate that GP can automatically generate abstract data structures such as stacks, queues and lists. <p> NB in both cases programs were evolved using memory appropriate to the problem. 6.4.2 One Indexed Memory Most of the published work on using GP where use of memory is explicitly evolved follows <ref> [ Teller, 1993; Teller, 1994a ] </ref> which introduced "indexed memory", i.e. a single multiple celled directly addressable memory, to GP. For example [ Raik and Browne, 1996 ] use indexed memory to show that on a reactive task, GP with explicit memory performs better than GP with implicit memory.
Reference: [ Teller, 1994b ] <author> Astro Teller. </author> <title> Genetic programming, indexed memory, the halting problem, and other curiosities. </title> <booktitle> In Proceedings of the 7th annual Florida Artificial Intelligence Research Symposium, </booktitle> <pages> pages 270-274, </pages> <address> Pensacola, Florida, USA, May 1994. </address> <publisher> IEEE Press. </publisher>
Reference-contexts: However there are a number of papers where programs containing loops have been successfully evolved. They used a number of techniques to address the problem of indefinite loops; [ Cramer, 1985 ] aborts any program that fails to stop within a specified time, <ref> [ Teller, 1994b ] </ref> proposes two solutions: 131 "popcorn" which allows fitness testing to continue whilst it continues to do something interesting (which may increase its fitness) but imposes a maximum waiting time between interesting events, once this expires fitness testing stops.
Reference: [ Teller, 1994c ] <author> Astro Teller. </author> <title> Turing completeness in the language of genetic programming with indexed memory. </title> <booktitle> In Proceedings of the 1994 IEEE World Congress on Computational Intelligence, </booktitle> <volume> volume 1, </volume> <pages> pages 136-141, </pages> <address> Orlando, Florida, USA, 27-29 June 1994. </address> <publisher> IEEE Press. </publisher>
Reference: [ Teller, 1995a ] <author> Astro Teller. </author> <title> The discovery of algorithms for automatic database retrieval. </title> <editor> In Justinian P. Rosca, editor, </editor> <booktitle> Proceedings of the Workshop on Genetic Programming: From Theory to Real-World Applications, </booktitle> <pages> pages 76-88, </pages> <address> Tahoe City, California, USA, </address> <month> 9 July </month> <year> 1995. </year>
Reference: [ Teller, 1995b ] <author> Astro Teller. </author> <title> Language representation progression in genetic programming. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 106-113, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference: [ Teller, 1996 ] <author> Astro Teller. </author> <title> Evolving programmers: The co-evolution of intelligent recombination operators. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in 256 Genetic Programming 2, chapter 3, </booktitle> <pages> pages 45-68. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference: [ Tettamanzi, 1996 ] <author> Andrea G. B. Tettamanzi. </author> <title> Genetic programming without fitness. </title> <editor> In John R. Koza, editor, </editor> <booktitle> Late Breaking Papers at the Genetic Programming 1996 Conference Stanford University July 28-31, </booktitle> <year> 1996, </year> <pages> pages 193-195, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> Stanford Bookstore. </publisher>
Reference: [ Tufts, 1996 ] <author> Patrick Tufts. </author> <title> Genetic programming resources on the world-wide web. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter A, </booktitle> <pages> pages 499-506. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference: [ Uiterwijk et al., 1989 ] <author> J. W. H. M. Uiterwijk, H. J. van den Herik, and L. V. Allis. </author> <title> A knowledge-based approach to connect-four. </title> <editor> In David Levy and Don Beals, editors, </editor> <booktitle> Heuristic Programming in Artificial Intelligence: The First Computer Olympiad, </booktitle> <pages> pages 113-133. </pages> <publisher> Ellis Harwood; John Wiley, </publisher> <year> 1989. </year>
Reference: [ Valenzuela and Jones, 1993 ] <author> Christine L. Valenzuela and Antonia J. Jones. </author> <title> Evolutionary divide and conquer (I): novel genetic approach to the TSP. </title> <journal> Evolutionary Computation, </journal> <volume> 1(4) </volume> <pages> 313-333, </pages> <year> 1993. </year>
Reference: [ Whigham and McKay, 1995 ] <author> P. A. Whigham and R. I. McKay. </author> <title> Genetic approaches to learning recursive relations. </title> <editor> In X. Yao, editor, </editor> <booktitle> Progress in Evolutionary Computation, volume 956 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 17-27. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [ Whigham, 1995a ] <author> P. A. Whigham. </author> <title> Grammatically-based genetic programming. </title> <editor> In Jus-tinian P. Rosca, editor, </editor> <booktitle> Proceedings of the Workshop on Genetic Programming: From Theory to Real-World Applications, </booktitle> <pages> pages 33-41, </pages> <address> Tahoe City, California, USA, </address> <month> 9 July </month> <year> 1995. </year>
Reference: [ Whigham, 1995b ] <author> P. A. Whigham. </author> <title> Inductive bias and genetic programming. </title> <editor> In A. M. S. Zalzala, editor, </editor> <booktitle> First International Conference on Genetic Algorithms in Engineering Systems: Innovations and Applications, GALESIA, </booktitle> <volume> volume 414, </volume> <pages> pages 461-466, </pages> <address> Sheffield, UK, </address> <month> 12-14 September </month> <year> 1995. </year> <pages> IEE. </pages>
Reference-contexts: As discussed in Section 2.3.6 a number of papers show (albeit on very different problems) benefits in using either current behaviour [ Rosca and Ballard, 1996 ] program syntax [ Gruau, 1996; D'haeseleer, 1994 ] or evolving program syntax <ref> [ Whigham, 1995b ] </ref> to bias crossover or other genetic operators. Our mechanism succeeds in dynamically redistributing crossover locations to code in need of improvement as the population evolves. It only considers code at the level of individual operations or ADFs but could be refined.
Reference: [ Whigham, 1996 ] <author> P. A. Whigham. </author> <title> Search bias, language bias, and genetic programming. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> 257 Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 230-237, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ Whitley, 1991 ] <author> L. Darrell Whitley. </author> <title> Fundamental principles of deception in genetic search. </title> <editor> In Gregory J. E. Rawlings, editor, </editor> <booktitle> Foundations of genetic algorithms, </booktitle> <pages> pages 221-241. </pages> <publisher> Morgan Kaufmann, </publisher> <address> Indiana University, </address> <month> 15-18 July </month> <year> 1990 1991. </year>
Reference: [ Wineberg and Oppacher, 1994 ] <author> Mark Wineberg and Franz Oppacher. </author> <title> A representation scheme to perform program induction in a canonical genetic algorithm. </title> <editor> In Yuval Davi-dor, Hans-Paul Schwefel, and Reinhard Manner, editors, </editor> <booktitle> Parallel Problem Solving from Nature III, </booktitle> <pages> pages 292-301, </pages> <address> Jerusalem, </address> <month> 9-14 October </month> <year> 1994. </year> <note> Springer-Verlag. </note>
Reference: [ Wineberg and Oppacher, 1996 ] <author> Mark Wineberg and Franz Oppacher. </author> <title> The benefits of computing with introns. </title> <editor> In John R. Koza, David E. Goldberg, David B. Fogel, and Rick L. Riolo, editors, </editor> <booktitle> Genetic Programming 1996: Proceedings of the First Annual Conference, </booktitle> <pages> pages 410-415, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> MIT Press. </publisher>
Reference: [ Wong and Leung, 1995 ] <author> Man Leung Wong and Kwong Sak Leung. </author> <title> Applying logic grammars to induce sub-functions in genetic programming. </title> <booktitle> In 1995 IEEE Conference on Evolutionary Computation, </booktitle> <volume> volume 2, </volume> <pages> pages 737-740, </pages> <address> Perth, Australia, </address> <month> 29 November - 1 December </month> <year> 1995. </year> <note> IEEE Press. </note>
Reference: [ Wong and Leung, 1996 ] <author> Man Leung Wong and Kwong Sak Leung. </author> <title> Evolving recursive functions for the even-parity problem using genetic programming. </title> <editor> In Peter J. Angeline and K. E. Kinnear, Jr., editors, </editor> <booktitle> Advances in Genetic Programming 2, chapter 11, </booktitle> <pages> pages 221-240. </pages> <publisher> MIT Press, </publisher> <address> Cambridge, MA, USA, </address> <year> 1996. </year>
Reference: [ Wyard, 1991 ] <author> P. Wyard. </author> <title> Context free grammar induction using genetic algorithms. </title> <editor> In Richard K. Belew and Lashon B. Booker, editors, </editor> <booktitle> Procceedings of the Fourth International Conference on Genetic Algorithms, </booktitle> <pages> pages 514-518, </pages> <address> University of California - San Diego, La Jolla, CA, USA, 13-16 July 1991. </address> <publisher> Morgan Kaufmann. </publisher>
Reference-contexts: However [ Koza, 1992, page 442 ] recasts a simple language recognition problem in terms of classifying DNA sequences as introns or exons and shows GP can evolve a correct program for this task and <ref> [ Wyard, 1991; Wyard, 1994; Lucas, 1994 ] </ref> use GAs operating on formal grammar rules of various types to induce grammars for a number of regular and context free languages. <p> In this section we show GP can solve the balanced bracket problem directly when given an appropriate data structure ( [ Zomorodian, 1995 ] previously solved this problem using GP to evolve a specification for a pushdown automaton, <ref> [ Wyard, 1991 ] </ref> used a GA operating on formal grammar rules to induce a grammar for it and [ Lankhorst, 1995 ] used a fixed representation GA to specify a pushdown automaton, while [ Sun et al., 1990 ] solved it by training a neural network in combination with a
Reference: [ Wyard, 1994 ] <author> Peter Wyard. </author> <title> Representational issues for context free grammar induction using genetic algorithms. </title> <editor> In Rafael C. Carrasco and Jose Oncina, editors, </editor> <title> Grammatical Inference and Applications. </title> <booktitle> Second International Colloquium, ICGI-94, volume 862 of Lecture Notes in Artificial Intelligence, </booktitle> <pages> pages 222-235, </pages> <address> Pueblo Acantilado, Alicante, Spain, </address> <month> 21-23 September </month> <year> 1994. </year> <note> Springer-Verlag. 258 </note>
Reference-contexts: However [ Koza, 1992, page 442 ] recasts a simple language recognition problem in terms of classifying DNA sequences as introns or exons and shows GP can evolve a correct program for this task and <ref> [ Wyard, 1991; Wyard, 1994; Lucas, 1994 ] </ref> use GAs operating on formal grammar rules of various types to induce grammars for a number of regular and context free languages.
Reference: [ Yamada and Nakano, 1992 ] <author> Takeshi Yamada and Ryohei Nakano. </author> <title> A genetic algorithm applicable to large-scale job-shop problems. </title> <editor> In R Manner and B Manderick, editors, </editor> <booktitle> Parallel Problem Solving from Nature 2, </booktitle> <pages> pages 281-290, </pages> <address> Brussels, Belgium, </address> <year> 1992. </year> <note> Else-vier Science. </note>
Reference: [ Yang and Flockton, 1995 ] <author> Dekun Yang and Stuart J. Flockton. </author> <title> An evolutionary algorithm for parametric array signal processing. </title> <editor> In Terence C. Fogarty, editor, </editor> <booktitle> Evolutionary Computing, number 993 in Lecture Notes in Computer Science, </booktitle> <pages> pages 191-199. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference: [ Zhang and Muhlenbein, 1993 ] <author> Byoung-Tak Zhang and Heinz Muhlenbein. </author> <title> Genetic programming of minimal neural nets using Occam's razor. </title> <editor> In Stephanie Forrest, editor, </editor> <booktitle> Proceedings of the 5th International Conference on Genetic Algorithms, ICGA-93, </booktitle> <pages> pages 342-349, </pages> <institution> University of Illinois at Urbana-Champaign, </institution> <month> 17-21 July </month> <year> 1993. </year> <note> Morgan Kauf-mann. </note>
Reference: [ Zhang and Muhlenbein, 1995a ] <author> Byoung-Tak Zhang and Heinz Muhlenbein. </author> <title> Balancing accuracy and parsimony in genetic programming. </title> <journal> Evolutionary Computation, </journal> <volume> 3(1) </volume> <pages> 17-38, </pages> <year> 1995. </year>
Reference-contexts: to be the first use of an explicit CPU penalty in the fitness function, however both Teller's PADO and [ Maxwell III, 1994 ] include implicit run time as part of fitness evaluation and there are many case where program size is included as part of the fitness calculation, e.g. <ref> [ Iba et al., 1994b; Zhang and Muhlenbein, 1995a ] </ref> (where the language does not include program branching, subroutines or iteration, program size and number of primitives evaluated are the same, i.e. a CPU penalty is equivalent to a size penalty).
Reference: [ Zhang and Muhlenbein, 1995b ] <author> Byoung-Tak Zhang and Heinz Muhlenbein. </author> <title> Bayesian inference, minimum description length principle, and learning by genetic programming. </title> <editor> In Justinian P. Rosca, editor, </editor> <booktitle> Proceedings of the Workshop on Genetic Programming: From Theory to Real-World Applications, </booktitle> <pages> pages 1-5, </pages> <address> Tahoe City, California, USA, </address> <month> 9 July </month> <year> 1995. </year>
Reference-contexts: Perhaps general algorithms are easier for GP to find? It may be argued on the basis of the Minimum Description Length (MDL) principle or Occam's Razor that general programs tend to be shorter than programs which are specific to the test case and fail to generalise <ref> [ Iba et al., 1994b; Zhang and Muhlenbein, 1995b ] </ref> . Non-general program may "memorise" the tests and need to be longer and more complex to do this.
Reference: [ Zhang and Muhlenbein, 1995c ] <author> Byoung-Tak Zhang and Heinz Muhlenbein. </author> <title> MDL-based fitness functions for learning parsimonious programs. </title> <editor> In E. S. Siegel and J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 122-126, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. </note>
Reference: [ Zhang et al., 1996 ] <author> Byoung-Tak Zhang, Ju-Hyun Kwak, and Chang-Hoon Lee. </author> <title> Building software agents for information filtering on the internet: A genetic programming approach. </title> <editor> In John R. Koza, editor, </editor> <booktitle> Late Breaking Papers at the Genetic Programming 1996 Conference Stanford University July 28-31, </booktitle> <year> 1996, </year> <pages> page 196, </pages> <address> Stanford University, CA, USA, 28-31 July 1996. </address> <publisher> Stanford Bookstore. </publisher>
Reference: [ Zomorodian, 1995 ] <author> Afra Zomorodian. </author> <title> Context-free language induction by evolution of deterministic push-down automata using genetic programming. </title> <editor> In E. S. Siegel and 259 J. R. Koza, editors, </editor> <booktitle> Working Notes for the AAAI Symposium on Genetic Programming, </booktitle> <pages> pages 127-133, </pages> <publisher> MIT, </publisher> <address> Cambridge, MA, USA, </address> <month> 10-12 November </month> <year> 1995. </year> <note> AAAI. 260 </note>
Reference-contexts: Section 6.5 summarises this chapter. 6.1 Balanced Bracket Problem Other work on GP evolving language recognizers has concentrated upon using GP to evolve tree based specifications for abstract machines, such as finite state machines [ Dunay et al., 1994 ] , deterministic pushdown automata <ref> [ Zomorodian, 1995 ] </ref> , machines composed of simple Turing machines [ Dunay and Petry, 1995; Petry and Dunay, 1995 ] or special memory nodes within the tree [ Iba et al., 1995 ] . <p> In this section we show GP can solve the balanced bracket problem directly when given an appropriate data structure ( <ref> [ Zomorodian, 1995 ] </ref> previously solved this problem using GP to evolve a specification for a pushdown automaton, [ Wyard, 1991 ] used a GA operating on formal grammar rules to induce a grammar for it and [ Lankhorst, 1995 ] used a fixed representation GA to specify a pushdown automaton, <p> This is shown in Figure 6.1 and a simplified version is shown in Figure 6.2. In contrast to earlier work <ref> [ Zomorodian, 1995 ] </ref> , where GP was obliged to evolve pushdown automata, the evolved solution is effectively a finite state machine with a counter (NB less powerful than a pushdown automaton). The evolved solution (cf. <p> To find the solution given in Figure 6.1 required 19 fi 10; 000 = 190; 000 individuals to be processed. This is similar to that required in <ref> [ Zomorodian, 1995 ] </ref> where a solution was found in generation 24 with a population of 3,000. (24 fi 3; 000 = 72; 000).
References-found: 256

