URL: http://www.cs.cornell.edu/jyh/papers/tpcd94.ps
Refering-URL: http://www.cs.cornell.edu/jyh/cornell-papers.html
Root-URL: 
Phone: 2  
Title: Non-Restoring Integer Square Root: A Case Study in Design by Principled Optimization  
Author: John O'Leary Miriam Leeser Jason Hickey Mark Aagaard 
Address: Ithaca, NY 14853  Ithaca, NY 14853  
Affiliation: 1 School Of Electrical Engineering Cornell University  Department of Computer Science Cornell University  
Abstract: Theorem proving techniques are particularly well suited for reasoning about arithmetic above the bit level and for relating different levels of abstraction. In this paper we show how a non-restoring integer square root algorithm can be transformed to a very efficient hardware implementation. The top level is a Standard ML function that operates on unbounded integers. The bottom level is a structural description of the hardware consisting of an adder/subtracter, simple combinational logic and some registers. Looking at the hardware, it is not at all obvious what function the circuit implements. At the top level, we prove that the algorithm correctly implements the square root function. We then show a series of optimizing transformations that refine the top level algorithm into the hardware implementation. Each transformation can be verified, and in places the transformations are motivated by knowledge about the operands that we can guarantee through verification. By decomposing the verification effort into these transformations, we can show that the hardware design implements a square root. We have implemented the algorithm in hardware both as an Altera programmable device and in full-custom CMOS.
Abstract-found: 1
Intro-found: 1
Reference: [AL94] <author> Mark D. Aagaard and Miriam E. Leeser. </author> <title> A methodology for reusable hardware proofs. Formal Methods in System Design, </title> <note> 1994. To appear. </note>
Reference-contexts: Each of the steps identified in this paper can be mechanized with reasonable effort. At the bottom level, we have a library of verified hardware modules that correspond to the modules in the HML structural description <ref> [AL94] </ref>. In many cases the transformations we applied depend for their justification upon non-trivial properties of the square root algorithm: we are currently working on formally proving these obligations. Some of our other transformations are purely syntactic in nature and rely upon HML's semantics for their justification.
Reference: [BJP93] <author> Bhaskar Bose, Steve D. Johnson, and Shyamsundar Pullela. </author> <title> Integrating Boolean verification with formal derivation. </title> <editor> In David Agnew, Luc Claesen, and Raul Camposano, editors, </editor> <booktitle> Computer Hardware Description Languages and their Applications, IFIP Transactions A-32. </booktitle> <publisher> Elsevier, North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: Our work differs from these and similar efforts in that we justify the optimizations done in order to realize the square root design. The DDD system <ref> [BJP93] </ref> is based on the idea of design by verified transformation, and was used to derive an implementation of the FM9001 microprocessor. High level transformations in DDD are not verified by explicit use of theorem proving techniques. The most similar research is Verkest's proof of a non-restoring division algorithm [VCH94].
Reference: [BV85] <author> J. Bannur and A. Varma. </author> <title> A VLSI implementation of a square root algorithm. </title> <booktitle> In IEEE Symp. on Comp. Arithmetic, </booktitle> <pages> pages 159-165. </pages> <publisher> IEEE Comp. Soc. Press, </publisher> <address> Washington D.C., </address> <year> 1985. </year>
Reference-contexts: We have two implementations of square root chips based on this algorithm. The first is done as a full-custom CMOS implementation; the second uses Altera EPLD technology. Both are based on a design previously published by Bannur and Varma <ref> [BV85] </ref>. Implementing and verifying the design from the paper required clearing up a number of errors in the paper and clarifying many details. This is a good case study for theorem proving techniques. <p> We can write the specification for the integer square root as shown in Definition 1. Definition 1 Correct integer square root y is the correct integer square root of x ^= y 2 x &lt; (y + 1) 2 We have implemented a subtractive, non-restoring integer square root algorithm <ref> [BV85] </ref>. For radicands in the range x = f0::2 2n 1g, subtractive methods begin with an initial guess of y = 2 (n1) and then iterate from i = (n 1) : : : 0.
Reference: [CGM86] <author> Alberto Camilleri, Mike Gordon, and Tom Melham. </author> <title> Hardware verification using higher-order logic. </title> <editor> In D. Borrione, editor, </editor> <title> From HDL Descriptions to Guaranteed Correct Circuit Designs. </title> <publisher> Elsevier, </publisher> <month> September </month> <year> 1986. </year>
Reference-contexts: Similarly, specifications required for model checkers are difficult to define for arithmetic circuits. There have been several verifications of hardware designs which lift the reasoning about hardware to the level of integers, including the Sobel Image processing chip [NS88], and the factorial function <ref> [CGM86] </ref>. Our work differs from these and similar efforts in that we justify the optimizations done in order to realize the square root design. The DDD system [BJP93] is based on the idea of design by verified transformation, and was used to derive an implementation of the FM9001 microprocessor.
Reference: [Flo63] <author> Ivan Flores. </author> <title> The Logic of Computer Arithmetic. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1963. </year>
Reference-contexts: In each iteration we square the partial root (y), subtract the squared partial root from the radicand and revise the partial root based on the sign of the result. There are two major classes of algorithms: restoring and non-restoring <ref> [Flo63] </ref>. In restoring algorithms, we begin with a partial root for y = 0 and at the end of each iteration, y is never greater than the precise root (p).
Reference: [Lee92] <author> Miriam E. Leeser. </author> <title> Using Nuprl for the verification and synthesis of hardware. </title> <editor> In C. A. R. Hoare and M. J. C. Gordon, editors, </editor> <title> Mechanized Reasoning and Hardware Design. </title> <booktitle> Prentice-Hall International Series on Computer Science, </booktitle> <year> 1992. </year>
Reference-contexts: We show how the proof can be done by a series of transformations from the SML code to the optimized structural description. At the top level, we have used the Nuprl proof development system <ref> [Lee92] </ref> to verify that the SML function correctly produces the square root of the input. We then use Nuprl to verify that transformations to the implementation preserve the correctness of the initial algorithm. Intermediate levels use Hardware ML [OLLA93], a hardware description language based on Standard ML.
Reference: [NS88] <author> Paliath Narendran and Jonathan Stillman. </author> <title> Formal verification of the sobel image processing chip. </title> <booktitle> In DAC, </booktitle> <pages> pages 211-217. </pages> <publisher> IEEE Comp. Soc. Press, </publisher> <address> Washington D.C., </address> <year> 1988. </year>
Reference-contexts: Similarly, specifications required for model checkers are difficult to define for arithmetic circuits. There have been several verifications of hardware designs which lift the reasoning about hardware to the level of integers, including the Sobel Image processing chip <ref> [NS88] </ref>, and the factorial function [CGM86]. Our work differs from these and similar efforts in that we justify the optimizations done in order to realize the square root design.
Reference: [OLLA92] <author> John O'Leary, Mark Linderman, Miriam Leeser, and Mark Aagaard. HML: </author> <title> A hardware description language based on Standard ML. </title> <type> Technical Report EE-CEG-92-7, </type> <institution> Cornell School of Electrical Engineering, </institution> <month> October </month> <year> 1992. </year>
Reference-contexts: Earlier work has illustrated how Hardware ML can be used to describe the structure of hardware <ref> [OLLA93, OLLA92] </ref>. HML is based on SML and supports higher-order, polymorphic functions, allowing the concise description of regular structures such as arrays and trees. SML's powerful module system aids in creating parameterized designs and component libraries.
Reference: [OLLA93] <author> John O'Leary, Mark Linderman, Miriam Leeser, and Mark Aagaard. HML: </author> <title> A hardware description language based on SML. </title> <editor> In David Agnew, Luc Claesen, and Raul Camposano, editors, </editor> <booktitle> Computer Hardware Description Languages and their Applications, IFIP Transactions A-32. </booktitle> <publisher> Elsevier, North-Holland, </publisher> <year> 1993. </year>
Reference-contexts: We then use Nuprl to verify that transformations to the implementation preserve the correctness of the initial algorithm. Intermediate levels use Hardware ML <ref> [OLLA93] </ref>, a hardware description language based on Standard ML. Starting from a straightforward translation of the SML function into HML, a series of transformations are applied to obtain the hardware implementation. <p> Earlier work has illustrated how Hardware ML can be used to describe the structure of hardware <ref> [OLLA93, OLLA92] </ref>. HML is based on SML and supports higher-order, polymorphic functions, allowing the concise description of regular structures such as arrays and trees. SML's powerful module system aids in creating parameterized designs and component libraries.
Reference: [VCH94] <author> D. Verkest, L. Claesen, and H. </author> <title> De Man A proof of the nonrestoring division algorithm and its implementation on an ALU. </title> <booktitle> Formal Methods in System Design, </booktitle> <volume> 4(1) </volume> <pages> 5-31, </pages> <month> January </month> <year> 1994. </year> <title> This article was processed using the L a T E X macro package with LLNCS style </title>
Reference-contexts: High level transformations in DDD are not verified by explicit use of theorem proving techniques. The most similar research is Verkest's proof of a non-restoring division algorithm <ref> [VCH94] </ref>. This proof was also done by transforming a design description to an implementation. The top level of the division proof involves consideration of several cases, while our top level proof is done with a single loop invariant.
References-found: 10

