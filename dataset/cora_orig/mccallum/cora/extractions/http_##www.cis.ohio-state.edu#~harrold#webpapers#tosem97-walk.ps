URL: http://www.cis.ohio-state.edu/~harrold/webpapers/tosem97-walk.ps
Refering-URL: http://www.cis.ohio-state.edu/~harrold/allpapers.html
Root-URL: 
Email: grother@cs.orst.edu harrold@cis.ohio-state.edu  
Title: A Safe, Efficient Regression Test Selection Technique  
Author: Gregg Rothermel Mary Jean Harrold 
Keyword: software maintenance, regression testing, selective retest, regression test selection.  
Address: Dearborn Hall 307-A 395 Dreese Lab, 2015 Neil Avenue Corvallis, OR Columbus, OH 43210-1277  
Affiliation: Department of Computer Science Department of Computer and Information Science Oregon State University The Ohio State University  
Abstract: Regression testing is an expensive but necessary maintenance activity performed on modified software to provide confidence that changes are correct and do not adversely affect other portions of the software. A regression test selection technique chooses, from an existing test set, tests that are deemed necessary to validate modified software. We present a new technique for regression test selection. Our algorithms construct control flow graphs for a procedure or program and its modified version, and use these graphs to select tests that execute changed code from the original test suite. We prove that under certain conditions, the set of tests our technique selects includes every test from the original test suite that can expose faults in the modified procedure or program. Under these conditions our algorithms are safe. Moreover, although our algorithms may select some tests that cannot expose faults, they are at least as precise as other safe regression test selection algorithms. Unlike many other regression test selection algorithms, our algorithms handle all language constructs and all types of program modifications. We have implemented our algorithms; initial empirical studies indicate that our technique can significantly reduce the cost of regression testing modified software. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. Agrawal, J. Horgan, E. Krauser, and S. </author> <title> London. Incremental regression testing. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1993, </booktitle> <pages> pages 348-357. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> September </month> <year> 1993. </year>
Reference: [2] <author> A.V. Aho, R. Sethi, and J.D. Ullman. </author> <booktitle> Compilers: Principles, Techniques, and Tools. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1986. </year>
Reference-contexts: The CFG for 2 a procedure P has size, and can be constructed in time, linear in the number of simple and conditional statements in P <ref> [2] </ref>. Code Instrumentation Let P be a program with CFG G. P can be instrumented such that when the instrumented version of P is executed with test t, it records a branch trace that consists of the branches taken during this execution. <p> Let n be the number of statements in P , and n 0 the number of statements in P 0 . CFG construction is an O (n) operation <ref> [2] </ref>. An upper bound on the number of calls to Compare is obtained by assuming that Compare can be called with each pair of nodes N and N 0 in G and G 0 , respectively.
Reference: [3] <author> M. Balcer, W. Hasling, and T. </author> <title> Ostrand. Automatic generation of test scripts from formal test specifications. </title> <booktitle> In Proceedings of the Third Symposium on Software Testing, Analysis, and Verification, </booktitle> <pages> pages 210-218. </pages> <publisher> ACM Press, </publisher> <month> December </month> <year> 1989. </year> <month> 32 </month>
Reference-contexts: The Siemens researchers created test pools "according to good testing practices, based on the tester's understanding of the program's functionality and knowledge of . . . the code." The researchers initially generated tests using the category partition method and the Siemens TSL (Test Specification Language) tool <ref> [3, 38] </ref>; they then added additional tests to the test suites to ensure that each coverage unit (statement, edge, and du-pair) in the base program and versions was exercised by at least 30 tests.
Reference: [4] <author> S. Bates and S. Horwitz. </author> <title> Incremental program testing using program dependence graphs. </title> <booktitle> In Proceedings of the 20th ACM Symposium on Principles of Programming Languages. </booktitle> <publisher> ACM Press, </publisher> <month> January </month> <year> 1993. </year>
Reference-contexts: Many other regression test selection techniques <ref> [4, 6, 14, 18, 20, 23, 39, 51] </ref> omit t2 or t3. If, for avg and avg2, the deletion of S7 had been the only change, SelectTests would have returned only ft3g. If the addition of S5a had been the only change, SelectTests would have returned only ft2g.
Reference: [5] <author> B. Beizer. </author> <title> Software Testing Techniques. </title> <publisher> Van Nostrand Reinhold, </publisher> <address> New York, NY, </address> <year> 1990. </year>
Reference-contexts: One necessary maintenance activity, regression testing, is performed on modified software to provide confidence that the software behaves correctly and that modifications have not adversely impacted the software's quality. Regression testing is expensive; it can account for as much as one-half of the cost of software maintenance <ref> [5, 29] </ref>. An important difference between regression testing and development testing is that during regression testing, an established suite of tests may be available for reuse. One regression testing strategy reruns all such tests, but this retest all approach may consume inordinate time and resources. <p> Controlled regression testing applies the scientific method to regression testing: to determine whether code modifications cause errors, test the new code, holding all other factors that might affect program behavior constant. The importance of controlled regression testing is stated well by Beizer <ref> [5] </ref>, who writes: "It must be possible to precisely recreate the entire test situation or else it may be impossible to resolve some of the nastiest configuration dependent bugs that show up in the field." Controlled regression testing is further discussed in Reference [46]. <p> The first reason is economic. The cost of software maintenance dominates the overall cost of software [9, 34, 35]. Moreover, the cost of maintenance, measured in terms of the percentage of software budget spent on maintenance, is increasing <ref> [5, 37, 48] </ref>. Because regression testing constitutes a significant percentage of maintenance costs [5, 9, 29], improvements in regression testing processes can significantly lower the overall cost of software. The second reason for the importance of this work involves software quality. <p> The cost of software maintenance dominates the overall cost of software [9, 34, 35]. Moreover, the cost of maintenance, measured in terms of the percentage of software budget spent on maintenance, is increasing [5, 37, 48]. Because regression testing constitutes a significant percentage of maintenance costs <ref> [5, 9, 29] </ref>, improvements in regression testing processes can significantly lower the overall cost of software. The second reason for the importance of this work involves software quality. Regression testing is an important method both for building confidence in modified software and for increasing its reliability. <p> Regression testing is an important method both for building confidence in modified software and for increasing its reliability. At 31 present, however, regression testing is often overlooked or inadequately performed: either the testing of new features, or the revalidation of old features, or both, are sacrificed <ref> [5] </ref>. In one survey of 118 software development organizations, only 12 percent of these organizations were found to have mechanisms for assuring some level of adequacy in their regression testing [36]. Without adequate regression testing, the quality and reliability of a software system decrease over the system's lifetime.
Reference: [6] <author> P. Benedusi, A. Cimitile, and U. De Carlini. </author> <title> Post-maintenance testing based on path change analysis. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1988, </booktitle> <pages> pages 352-361, </pages> <address> Los Alamitos, CA, </address> <month> October </month> <year> 1988. </year>
Reference-contexts: Many other regression test selection techniques <ref> [4, 6, 14, 18, 20, 23, 39, 51] </ref> omit t2 or t3. If, for avg and avg2, the deletion of S7 had been the only change, SelectTests would have returned only ft3g. If the addition of S5a had been the only change, SelectTests would have returned only ft2g.
Reference: [7] <author> D. Binkley. </author> <title> Using semantic differencing to reduce the cost of regression testing. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1992, </booktitle> <pages> pages 41-50. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: in T traversed edge (n 1 ; n 2 ) in G. 3 2.2 Regression Testing Research on regression testing spans a wide variety of topics, including test environments and automation [10, 12, 24, 25, 58], capture-playback mechanisms [33], test suite management [16, 23, 33, 51, 56], program size reduction <ref> [7] </ref>, and regression testability [29]. Most recent research on regression testing, however, concerns selective retest techniques [1, 4, 6, 8, 11, 13, 14, 15, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 39, 41, 43, 44, 45, 49, 50, 51, 52, 54, 55, 57].
Reference: [8] <author> D. Binkley. </author> <title> Reducing the cost of regression testing by semantics guided test case selection. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1995. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1995. </year>
Reference: [9] <author> B. W. </author> <title> Boehm. </title> <journal> Software engineering. IEEE Transactions on Computers, </journal> <volume> C-25(12):1226-1241, </volume> <month> December </month> <year> 1976. </year>
Reference-contexts: However, we believe that our estimates understate the analysis time required by our technique. 5 Conclusions and Future Work This work is important for two reasons. The first reason is economic. The cost of software maintenance dominates the overall cost of software <ref> [9, 34, 35] </ref>. Moreover, the cost of maintenance, measured in terms of the percentage of software budget spent on maintenance, is increasing [5, 37, 48]. <p> The cost of software maintenance dominates the overall cost of software [9, 34, 35]. Moreover, the cost of maintenance, measured in terms of the percentage of software budget spent on maintenance, is increasing [5, 37, 48]. Because regression testing constitutes a significant percentage of maintenance costs <ref> [5, 9, 29] </ref>, improvements in regression testing processes can significantly lower the overall cost of software. The second reason for the importance of this work involves software quality. Regression testing is an important method both for building confidence in modified software and for increasing its reliability.
Reference: [10] <author> P.A. Brown and D. Hoffman. </author> <title> The application of module regression testing at TRIUMF. Nuclear Instruments and Methods in Physics Research, Section A, </title> <address> .A293(1-2):377-381, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: size jT j bits such that the kth bit in v is set if and only if test k in T traversed edge (n 1 ; n 2 ) in G. 3 2.2 Regression Testing Research on regression testing spans a wide variety of topics, including test environments and automation <ref> [10, 12, 24, 25, 58] </ref>, capture-playback mechanisms [33], test suite management [16, 23, 33, 51, 56], program size reduction [7], and regression testability [29].
Reference: [11] <author> Y.F. Chen, D.S. Rosenblum, and K.P. Vo. TestTube: </author> <title> A system for selective regression testing. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <pages> pages 211-222. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: We have also used our framework to evaluate our technique and compare it to other techniques. Reference [46] presents this framework and evaluation in detail; this section summarizes results reported in that work. Inclusiveness. Our test selection algorithms are safe for controlled regression testing. Only three other techniques <ref> [11, 23, 27] </ref> can make this claim. These three techniques each depend for their safety upon the same assumptions on which our algorithms depend. Thus, with existing regression test selection techniques, safe test selection is possible only for controlled regression testing. Precision. Our test selection algorithms are not 100% precise. <p> In cases where the multiply-visited-node con-dition does hold, we can prove that SelectTests and SelectInterTests are more precise than two of the other three safe test selection techniques <ref> [11, 23] </ref>, and we have strong evidence to suggest that our algorithms are more precise than the third safe technique [27]. Efficiency. <p> This is an improvement over the efficiency of two of the other safe techniques [23, 27]. Moreover, we expect our algorithms to run in time O (jT j (minfn; n 0 g)) in practice a bound comparable to the worst-case run time of the third safe technique <ref> [11] </ref>. Our algorithms are also as efficient as, if not more efficient than, existing non-safe algorithms. Our algorithms are fully automatable.
Reference: [12] <author> T. Dogsa and I. Rozman. </author> <title> CAMOTE computer aided module testing and design environment. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1988, </booktitle> <pages> pages 404-408. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1988. </year>
Reference-contexts: size jT j bits such that the kth bit in v is set if and only if test k in T traversed edge (n 1 ; n 2 ) in G. 3 2.2 Regression Testing Research on regression testing spans a wide variety of topics, including test environments and automation <ref> [10, 12, 24, 25, 58] </ref>, capture-playback mechanisms [33], test suite management [16, 23, 33, 51, 56], program size reduction [7], and regression testability [29].
Reference: [13] <author> K.F. Fischer. </author> <title> A test case selection method for the validation of software maintenance modifications. </title> <booktitle> In Proceedings of COMPSAC '77, </booktitle> <pages> pages 421-426. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1977. </year>
Reference: [14] <author> K.F. Fischer, F. Raji, and A. Chruscicki. </author> <title> A methodology for retesting modified software. </title> <booktitle> In Proceedings of the National Telecommunications Conference B-6-3, </booktitle> <pages> pages 1-6. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1981. </year>
Reference-contexts: Many other regression test selection techniques <ref> [4, 6, 14, 18, 20, 23, 39, 51] </ref> omit t2 or t3. If, for avg and avg2, the deletion of S7 had been the only change, SelectTests would have returned only ft3g. If the addition of S5a had been the only change, SelectTests would have returned only ft2g.
Reference: [15] <author> R. Gupta, M.J. Harrold, </author> <title> and M.L. Soffa. An approach to regression testing using slicing. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1992, </booktitle> <pages> pages 299-308. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1992. </year>
Reference: [16] <author> M.J. Harrold, R. Gupta, </author> <title> and M.L. Soffa. A methodology for controlling the size of a test suite. </title> <journal> ACM Transactions on Software Engineering and Methodology, </journal> <volume> 2(3) </volume> <pages> 270-285, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: is set if and only if test k in T traversed edge (n 1 ; n 2 ) in G. 3 2.2 Regression Testing Research on regression testing spans a wide variety of topics, including test environments and automation [10, 12, 24, 25, 58], capture-playback mechanisms [33], test suite management <ref> [16, 23, 33, 51, 56] </ref>, program size reduction [7], and regression testability [29].
Reference: [17] <author> M.J. Harrold, L. Larsen, J. Lloyd, D. Nedved, M. Page, G. Rothermel, M. Singh, and M. Smith. Aristotle: </author> <title> a system for the development of program-analysis-based tools. </title> <booktitle> In Proceedings of the 33rd Annual Southeast Conference, </booktitle> <pages> pages 110-119. </pages> <publisher> ACM Press, </publisher> <month> March </month> <year> 1995. </year>
Reference-contexts: Finally, the Siemens subjects have previously served as a basis for published empirical results. Empirical Procedure To obtain our empirical results, we initially used an analysis tool <ref> [17] </ref> on the base programs and modified versions to create control flow graphs for those versions. We then ran a code instrumentation tool to generate instrumented versions of the base programs.
Reference: [18] <author> M.J. Harrold and M.L. Soffa. </author> <title> An incremental approach to unit testing during maintenance. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1988, </booktitle> <pages> pages 362-367. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1988. </year>
Reference-contexts: Many other regression test selection techniques <ref> [4, 6, 14, 18, 20, 23, 39, 51] </ref> omit t2 or t3. If, for avg and avg2, the deletion of S7 had been the only change, SelectTests would have returned only ft3g. If the addition of S5a had been the only change, SelectTests would have returned only ft2g.
Reference: [19] <author> M.J. Harrold and M.L. Soffa. </author> <title> An incremental data flow testing tool. </title> <booktitle> In Proceedings of the Sixth International Conference on Testing Computer Software. Frontier Technologies, </booktitle> <month> May </month> <year> 1989. </year>
Reference: [20] <author> M.J. Harrold and M.L. Soffa. </author> <title> Interprocedural data flow testing. </title> <booktitle> In Proceedings of the Third Testing, Analysis, and Verification Symposium, </booktitle> <pages> pages 158-167. </pages> <publisher> ACM Press, </publisher> <month> December </month> <year> 1989. </year>
Reference-contexts: Many other regression test selection techniques <ref> [4, 6, 14, 18, 20, 23, 39, 51] </ref> omit t2 or t3. If, for avg and avg2, the deletion of S7 had been the only change, SelectTests would have returned only ft3g. If the addition of S5a had been the only change, SelectTests would have returned only ft2g.
Reference: [21] <author> J. Hartmann and D.J. Robson. </author> <title> Revalidation during the software maintenance phase. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1989, </booktitle> <pages> pages 70-79. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1989. </year>
Reference: [22] <author> J. Hartmann and D.J. Robson. </author> <title> RETEST development of a selective revalidation prototype environment for use in software maintenance. </title> <booktitle> In Proceedings of the Twenty-Third Hawaii International Conference on System Sciences, </booktitle> <pages> pages 92-101, </pages> <month> January </month> <year> 1990. </year>
Reference: [23] <author> J. Hartmann and D.J. Robson. </author> <title> Techniques for selective revalidation. </title> <journal> IEEE Software, </journal> <volume> 16(1) </volume> <pages> 31-38, </pages> <month> January </month> <year> 1990. </year>
Reference-contexts: is set if and only if test k in T traversed edge (n 1 ; n 2 ) in G. 3 2.2 Regression Testing Research on regression testing spans a wide variety of topics, including test environments and automation [10, 12, 24, 25, 58], capture-playback mechanisms [33], test suite management <ref> [16, 23, 33, 51, 56] </ref>, program size reduction [7], and regression testability [29]. <p> Many other regression test selection techniques <ref> [4, 6, 14, 18, 20, 23, 39, 51] </ref> omit t2 or t3. If, for avg and avg2, the deletion of S7 had been the only change, SelectTests would have returned only ft3g. If the addition of S5a had been the only change, SelectTests would have returned only ft2g. <p> We have also used our framework to evaluate our technique and compare it to other techniques. Reference [46] presents this framework and evaluation in detail; this section summarizes results reported in that work. Inclusiveness. Our test selection algorithms are safe for controlled regression testing. Only three other techniques <ref> [11, 23, 27] </ref> can make this claim. These three techniques each depend for their safety upon the same assumptions on which our algorithms depend. Thus, with existing regression test selection techniques, safe test selection is possible only for controlled regression testing. Precision. Our test selection algorithms are not 100% precise. <p> In cases where the multiply-visited-node con-dition does hold, we can prove that SelectTests and SelectInterTests are more precise than two of the other three safe test selection techniques <ref> [11, 23] </ref>, and we have strong evidence to suggest that our algorithms are more precise than the third safe technique [27]. Efficiency. <p> Efficiency. As discussed previously, our algorithms run in time O (jT jnn 0 ) for procedures or programs of n and n 0 statements, and test set size jT j. This is an improvement over the efficiency of two of the other safe techniques <ref> [23, 27] </ref>. Moreover, we expect our algorithms to run in time O (jT j (minfn; n 0 g)) in practice a bound comparable to the worst-case run time of the third safe technique [11]. Our algorithms are also as efficient as, if not more efficient than, existing non-safe algorithms.
Reference: [24] <author> D. Hoffman. </author> <title> A CASE study in module testing. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1989, </booktitle> <pages> pages 100-105. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1989. </year>
Reference-contexts: size jT j bits such that the kth bit in v is set if and only if test k in T traversed edge (n 1 ; n 2 ) in G. 3 2.2 Regression Testing Research on regression testing spans a wide variety of topics, including test environments and automation <ref> [10, 12, 24, 25, 58] </ref>, capture-playback mechanisms [33], test suite management [16, 23, 33, 51, 56], program size reduction [7], and regression testability [29].
Reference: [25] <author> D. Hoffman and C. Brealey. </author> <title> Module test case generation. </title> <booktitle> In Proceedings of the Third Workshop on Software Testing, Analysis, and Verification, </booktitle> <pages> pages 97-102. </pages> <publisher> ACM Press, </publisher> <month> December </month> <year> 1989. </year>
Reference-contexts: size jT j bits such that the kth bit in v is set if and only if test k in T traversed edge (n 1 ; n 2 ) in G. 3 2.2 Regression Testing Research on regression testing spans a wide variety of topics, including test environments and automation <ref> [10, 12, 24, 25, 58] </ref>, capture-playback mechanisms [33], test suite management [16, 23, 33, 51, 56], program size reduction [7], and regression testability [29].
Reference: [26] <author> M. Hutchins, H. Foster, T. Goradia, and T. </author> <title> Ostrand. Experiments on the effectiveness of dataflow- and controlflow-based test adequacy criteria. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <pages> pages 191-200. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> May </month> <year> 1994. </year> <month> 33 </month>
Reference-contexts: The primary objective of this study was to empirically investigate the extent to which our algorithms could reduce the cost of regression testing at the intraprocedural and interprocedural levels. Subjects Hutchins, et al. <ref> [26] </ref> report the results of an experiment on the effectiveness of dataflow- and controlflow-based test adequacy criteria. To conduct their study, the authors obtained seven C programs, that ranged in size from 141 to 512 lines of code, and contained between 8 and 21 procedures. <p> For our purposes, we shall consider these faulty versions as ill-fated attempts to create 2 SPARCstation is a trademark of Sun Microsystems, Inc. 3 There are a few differences between the numbers reported in Table 1 and the numbers reported in Reference <ref> [26] </ref>. Hutchins et al. report 39 versions of tcas; their distribution to us contained 41. <p> We number the procedures to facilitate subsequent references to them. modified versions of the base programs. The use of faulty versions also lets us make observations about error detection during regression testing. Hutchins et al. <ref> [26] </ref> describe the process used by the Siemens researchers to construct test suites and faulty program versions we paraphrase that description here. The Siemens researchers created faulty versions of base programs by manually seeding faults into those programs. Most faults involve single line changes; a few involve multiple changes.
Reference: [27] <author> J. Laski and W. Szermer. </author> <title> Identification of program modifications and its applications in software maintentance. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1992, </booktitle> <pages> pages 282-290. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1992. </year>
Reference-contexts: We have also used our framework to evaluate our technique and compare it to other techniques. Reference [46] presents this framework and evaluation in detail; this section summarizes results reported in that work. Inclusiveness. Our test selection algorithms are safe for controlled regression testing. Only three other techniques <ref> [11, 23, 27] </ref> can make this claim. These three techniques each depend for their safety upon the same assumptions on which our algorithms depend. Thus, with existing regression test selection techniques, safe test selection is possible only for controlled regression testing. Precision. Our test selection algorithms are not 100% precise. <p> In cases where the multiply-visited-node con-dition does hold, we can prove that SelectTests and SelectInterTests are more precise than two of the other three safe test selection techniques [11, 23], and we have strong evidence to suggest that our algorithms are more precise than the third safe technique <ref> [27] </ref>. Efficiency. As discussed previously, our algorithms run in time O (jT jnn 0 ) for procedures or programs of n and n 0 statements, and test set size jT j. This is an improvement over the efficiency of two of the other safe techniques [23, 27]. <p> Efficiency. As discussed previously, our algorithms run in time O (jT jnn 0 ) for procedures or programs of n and n 0 statements, and test set size jT j. This is an improvement over the efficiency of two of the other safe techniques <ref> [23, 27] </ref>. Moreover, we expect our algorithms to run in time O (jT j (minfn; n 0 g)) in practice a bound comparable to the worst-case run time of the third safe technique [11]. Our algorithms are also as efficient as, if not more efficient than, existing non-safe algorithms.
Reference: [28] <author> J.A.N. Lee and X. </author> <title> He. A Methodology for Test Selection. </title> <journal> The Journal of Systems and Software, </journal> <volume> 13(1) </volume> <pages> 177-185, </pages> <month> September </month> <year> 1990. </year>
Reference: [29] <author> H.K.N. Leung and L. White. </author> <title> Insights Into Regression Testing. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1989, </booktitle> <pages> pages 60-69. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1989. </year>
Reference-contexts: One necessary maintenance activity, regression testing, is performed on modified software to provide confidence that the software behaves correctly and that modifications have not adversely impacted the software's quality. Regression testing is expensive; it can account for as much as one-half of the cost of software maintenance <ref> [5, 29] </ref>. An important difference between regression testing and development testing is that during regression testing, an established suite of tests may be available for reuse. One regression testing strategy reruns all such tests, but this retest all approach may consume inordinate time and resources. <p> (n 1 ; n 2 ) in G. 3 2.2 Regression Testing Research on regression testing spans a wide variety of topics, including test environments and automation [10, 12, 24, 25, 58], capture-playback mechanisms [33], test suite management [16, 23, 33, 51, 56], program size reduction [7], and regression testability <ref> [29] </ref>. Most recent research on regression testing, however, concerns selective retest techniques [1, 4, 6, 8, 11, 13, 14, 15, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 39, 41, 43, 44, 45, 49, 50, 51, 52, 54, 55, 57]. <p> The cost of software maintenance dominates the overall cost of software [9, 34, 35]. Moreover, the cost of maintenance, measured in terms of the percentage of software budget spent on maintenance, is increasing [5, 37, 48]. Because regression testing constitutes a significant percentage of maintenance costs <ref> [5, 9, 29] </ref>, improvements in regression testing processes can significantly lower the overall cost of software. The second reason for the importance of this work involves software quality. Regression testing is an important method both for building confidence in modified software and for increasing its reliability.
Reference: [30] <author> H.K.N. Leung and L. White. </author> <title> Insights into testing and regression testing global variables. </title> <journal> Journal of Software Maintenance: Research and Practice, </journal> <volume> 2 </volume> <pages> 209-222, </pages> <month> December </month> <year> 1990. </year>
Reference: [31] <author> H.K.N. Leung and L.J. White. </author> <title> A study of integration testing and software regression at the integration level. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1990, </booktitle> <pages> pages 290-300. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1990. </year>
Reference-contexts: Section 4.1 presents an analytical evaluation and comparison; Section 4.2 presents empirical results. 4.1 Analytical Evaluation and Comparison Although some regression test selection techniques select tests based on information collected from program specifications <ref> [31, 52] </ref>, most techniques, including ours, select tests based on information about the code of the program and the modified version [1, 4, 6, 8, 11, 13, 14, 15, 18, 23, 27, 28, 31, 39, 43, 45, 50, 51, 54, 57]. These code-based techniques pursue various goals.
Reference: [32] <author> H.K.N. Leung and L.J. White. </author> <title> A cost model to compare regression test strategies. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1991, </booktitle> <pages> pages 201-208. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: Selective retest techniques reduce the cost of regression testing by reusing existing tests, and identifying portions of the modified program or its specification that should be tested. Selective retest techniques differ from the retest-all technique, which runs all tests in the existing test suite. Leung and White <ref> [32] </ref> show that a selective retest technique is more economical than the retest-all technique only if the cost of selecting a reduced subset of tests to run is less than the cost of running the tests that the selective retest technique omits.
Reference: [33] <author> R. Lewis, D.W. Beck, and J. Hartmann. </author> <title> Assay a tool to support regression testing. </title> <booktitle> In ESEC '89. 2nd European Software Engineering Conference Proceedings, </booktitle> <pages> pages 487-496. </pages> <publisher> Springer-Verlag, </publisher> <month> September </month> <year> 1989. </year>
Reference-contexts: kth bit in v is set if and only if test k in T traversed edge (n 1 ; n 2 ) in G. 3 2.2 Regression Testing Research on regression testing spans a wide variety of topics, including test environments and automation [10, 12, 24, 25, 58], capture-playback mechanisms <ref> [33] </ref>, test suite management [16, 23, 33, 51, 56], program size reduction [7], and regression testability [29]. <p> is set if and only if test k in T traversed edge (n 1 ; n 2 ) in G. 3 2.2 Regression Testing Research on regression testing spans a wide variety of topics, including test environments and automation [10, 12, 24, 25, 58], capture-playback mechanisms [33], test suite management <ref> [16, 23, 33, 51, 56] </ref>, program size reduction [7], and regression testability [29].
Reference: [34] <author> B.P. Lientz and E.B. Swanson. </author> <title> Software Maintenance Management: A Study of the Maintenance of Computer Applications Software in 487 Data Processing Organizations. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1980. </year>
Reference-contexts: However, we believe that our estimates understate the analysis time required by our technique. 5 Conclusions and Future Work This work is important for two reasons. The first reason is economic. The cost of software maintenance dominates the overall cost of software <ref> [9, 34, 35] </ref>. Moreover, the cost of maintenance, measured in terms of the percentage of software budget spent on maintenance, is increasing [5, 37, 48].
Reference: [35] <author> B.P. Lientz, E.B. Swanson, and G. E. Tompkins. </author> <title> Characteristics of application software maintenance. </title> <journal> Communications of the ACM, </journal> <volume> 21(6) </volume> <pages> 466-471, </pages> <month> June </month> <year> 1978. </year>
Reference-contexts: However, we believe that our estimates understate the analysis time required by our technique. 5 Conclusions and Future Work This work is important for two reasons. The first reason is economic. The cost of software maintenance dominates the overall cost of software <ref> [9, 34, 35] </ref>. Moreover, the cost of maintenance, measured in terms of the percentage of software budget spent on maintenance, is increasing [5, 37, 48].
Reference: [36] <author> F. Martinig. </author> <title> Software testing: Poor consideration. Testing Techniques Newsletter, </title> <month> October </month> <year> 1996. </year>
Reference-contexts: In one survey of 118 software development organizations, only 12 percent of these organizations were found to have mechanisms for assuring some level of adequacy in their regression testing <ref> [36] </ref>. Without adequate regression testing, the quality and reliability of a software system decrease over the system's lifetime. Practical, effective selective retest techniques promote software quality. There are several promising directions for future work in this area.
Reference: [37] <author> J. T. Nosek and P. Palvia. </author> <title> Software maintenance management: Changes in the last decade. </title> <journal> Journal of Software Maintenance Research and Practice, </journal> <volume> 2 </volume> <pages> 157-174, </pages> <year> 1990. </year>
Reference-contexts: The first reason is economic. The cost of software maintenance dominates the overall cost of software [9, 34, 35]. Moreover, the cost of maintenance, measured in terms of the percentage of software budget spent on maintenance, is increasing <ref> [5, 37, 48] </ref>. Because regression testing constitutes a significant percentage of maintenance costs [5, 9, 29], improvements in regression testing processes can significantly lower the overall cost of software. The second reason for the importance of this work involves software quality.
Reference: [38] <author> T.J. Ostrand and M.J. Balcer. </author> <title> The category-partition method for specifying and generating functional tests. </title> <journal> Communications of the ACM, </journal> <volume> 31(6), </volume> <month> June </month> <year> 1988. </year>
Reference-contexts: The Siemens researchers created test pools "according to good testing practices, based on the tester's understanding of the program's functionality and knowledge of . . . the code." The researchers initially generated tests using the category partition method and the Siemens TSL (Test Specification Language) tool <ref> [3, 38] </ref>; they then added additional tests to the test suites to ensure that each coverage unit (statement, edge, and du-pair) in the base program and versions was exercised by at least 30 tests.
Reference: [39] <author> T.J. Ostrand and E.J. Weyuker. </author> <title> Using dataflow analysis for regression testing. </title> <booktitle> In Sixth Annual Pacific Northwest Software Quality Conference, </booktitle> <pages> pages 233-247. </pages> <publisher> Lawrence and Craig, </publisher> <month> September </month> <year> 1988. </year>
Reference-contexts: Many other regression test selection techniques <ref> [4, 6, 14, 18, 20, 23, 39, 51] </ref> omit t2 or t3. If, for avg and avg2, the deletion of S7 had been the only change, SelectTests would have returned only ft3g. If the addition of S5a had been the only change, SelectTests would have returned only ft2g.
Reference: [40] <author> R. Pressman. </author> <title> Software Engineering: A Practitioner's Approach. </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY, </address> <year> 1987. </year>
Reference-contexts: 1 Introduction Software maintenance activities can account for as much as two-thirds of the overall cost of software production <ref> [40, 47] </ref>. One necessary maintenance activity, regression testing, is performed on modified software to provide confidence that the software behaves correctly and that modifications have not adversely impacted the software's quality.
Reference: [41] <author> D. S. Rosenblum and E. J. Weyuker. </author> <title> Predicting the cost-effectiveness of regression testing strategies. </title> <booktitle> In Proceedings of the ACM SIGSOFT '96 Fourth Symposium on the Foundations of Software Engineering. </booktitle> <publisher> ACM Press, </publisher> <month> October </month> <year> 1996. </year>
Reference: [42] <author> G. Rothermel. </author> <title> Efficient, effective regression testing using safe test selection techniques. </title> <type> Technical Report 96-101, </type> <institution> Clemson University, </institution> <month> January </month> <year> 1996. </year>
Reference-contexts: This is not surprising, because the problem of precisely identifying these tests in general is PSPACE-hard; thus unless P=NP, no efficient algorithm will always identify precisely the tests that are modification-traversing for P and P 0 <ref> [42] </ref>. Figure 6, which illustrates this possibility, depicts a C function, pathological, and a modified version of that function, pathological 0 , with the CFGs for the versions (declaration nodes omitted). <p> An algorithm that selects every fault-revealing test in T is safe. There is no effective procedure that, in general, precisely identifies the fault-revealing tests in T <ref> [42] </ref>. However, under controlled regression testing, the modification-traversing tests are a superset of the fault-revealing tests [42]. Thus, for controlled regression testing, a regression test selection algorithm that selects all modification-traversing tests is safe. <p> An algorithm that selects every fault-revealing test in T is safe. There is no effective procedure that, in general, precisely identifies the fault-revealing tests in T <ref> [42] </ref>. However, under controlled regression testing, the modification-traversing tests are a superset of the fault-revealing tests [42]. Thus, for controlled regression testing, a regression test selection algorithm that selects all modification-traversing tests is safe. This result is significant, because it supports the following theorem: Theorem 1: SelectTests is safe for controlled regression testing. Proof: We outline the logic of the proof here. See Reference [42] (pages 77-81) <p> fault-revealing tests <ref> [42] </ref>. Thus, for controlled regression testing, a regression test selection algorithm that selects all modification-traversing tests is safe. This result is significant, because it supports the following theorem: Theorem 1: SelectTests is safe for controlled regression testing. Proof: We outline the logic of the proof here. See Reference [42] (pages 77-81) for details. <p> See Reference <ref> [42] </ref> (pages 84-85) for details. <p> A final theorem is as follows: Theorem 3: SelectTests terminates. Proof: We outline the logic of the proof here. See reference <ref> [42] </ref> (page 81) for details. The proof proceeds by showing that (1) the number of recursive calls made to Compare is bounded, and (2) the work required by a call to Compare is bounded. <p> There are several ways in which to increase the efficiency or precision of that algorithm <ref> [42] </ref>. This section discusses two improvements. Handling variable and type declarations A change in a variable or type declaration may render a test fault-revealing, even though that test executes no changed program statements other than the declaration. <p> Thus, these results give us good reason to question the efficacy of minimization test selection techniques where fault detection is concerned. 4 Reference <ref> [42] </ref> lists results for all programs and modified versions individually. 30 4.2.4 Summary of empirical results, and limitations of the studies The major conclusions derived from our empirical studies can be summarized as follows: * Our algorithms can reduce the time required to regression test modified software, even when the cost
Reference: [43] <author> G. Rothermel and M.J. Harrold. </author> <title> A safe, efficient algorithm for regression test selection. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1993, </booktitle> <pages> pages 358-367. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> September </month> <year> 1993. </year>
Reference-contexts: Next, Compare considers C and 1 An earlier version of this algorithm <ref> [43] </ref> was based on control dependence graphs for P and P 0 . The possibility of performing that algorithm on CFGs was suggested by Weibao Wu (personal communication). <p> This work was partially supported by a grant from Microsoft, Inc., and by the National Science Foundation under Grant CCR-9357811 to Clemson University and The Ohio State University. A preliminary version of this work appeared in Reference <ref> [43] </ref>.
Reference: [44] <author> G. Rothermel and M.J. Harrold. </author> <title> Selecting regression tests for object-oriented software. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1994, </booktitle> <pages> pages 14-25. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> September </month> <year> 1994. </year>
Reference: [45] <author> G. Rothermel and M.J. Harrold. </author> <title> Selecting tests and identifying test coverage requirements for modified software. </title> <booktitle> In Proceedings of the 1994 International Symposium on Software Testing and Analysis (ISSTA 94). </booktitle> <publisher> ACM Press, </publisher> <month> August </month> <year> 1994. </year>
Reference: [46] <author> G. Rothermel and M.J. Harrold. </author> <title> Analyzing regression test selection techniques. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 22(8) </volume> <pages> 529-551, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: regression testing is stated well by Beizer [5], who writes: "It must be possible to precisely recreate the entire test situation or else it may be impossible to resolve some of the nastiest configuration dependent bugs that show up in the field." Controlled regression testing is further discussed in Reference <ref> [46] </ref>. For the purpose of regression test selection, we want to identify all tests t 2 T that reveal faults in P 0 - the fault-revealing tests. An algorithm that selects every fault-revealing test in T is safe. <p> We have used our framework to compare and evaluate all code-based regression test selection techniques that we have found descriptions of in the literature. We have also used our framework to evaluate our technique and compare it to other techniques. Reference <ref> [46] </ref> presents this framework and evaluation in detail; this section summarizes results reported in that work. Inclusiveness. Our test selection algorithms are safe for controlled regression testing. Only three other techniques [11, 23, 27] can make this claim.
Reference: [47] <author> S. Schach. </author> <title> Software Engineering. </title> <publisher> Aksen Associates, </publisher> <address> Boston, MA, </address> <year> 1992. </year>
Reference-contexts: 1 Introduction Software maintenance activities can account for as much as two-thirds of the overall cost of software production <ref> [40, 47] </ref>. One necessary maintenance activity, regression testing, is performed on modified software to provide confidence that the software behaves correctly and that modifications have not adversely impacted the software's quality.
Reference: [48] <author> D. Sharon. </author> <title> Meeting the challenge of software maintenance. </title> <journal> IEEE Software, </journal> <volume> 13(1) </volume> <pages> 122-125, </pages> <month> January </month> <year> 1996. </year>
Reference-contexts: The first reason is economic. The cost of software maintenance dominates the overall cost of software [9, 34, 35]. Moreover, the cost of maintenance, measured in terms of the percentage of software budget spent on maintenance, is increasing <ref> [5, 37, 48] </ref>. Because regression testing constitutes a significant percentage of maintenance costs [5, 9, 29], improvements in regression testing processes can significantly lower the overall cost of software. The second reason for the importance of this work involves software quality.
Reference: [49] <author> B. Sherlund and B. Korel. </author> <title> Modification oriented software testing. </title> <booktitle> In Conference Proceedings: Quality Week 1991, </booktitle> <pages> pages 1-17. </pages> <institution> Software Research, Inc., </institution> <year> 1991. </year>
Reference: [50] <author> B. Sherlund and B. Korel. </author> <title> Logical modification oriented software testing. </title> <booktitle> In Proceedings: Twelfth International Conference on Testing Computer Software. Frontier Technologies, </booktitle> <month> June </month> <year> 1995. </year> <month> 34 </month>
Reference: [51] <author> A.B. Taha, S.M. Thebaut, and S.S. Liu. </author> <title> An approach to software fault localization and revalidation based on incremental data flow analysis. </title> <booktitle> In Proceedings of the 13th Annual International Computer Software and Applications Conference, </booktitle> <pages> pages 527-534. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> September </month> <year> 1989. </year>
Reference-contexts: is set if and only if test k in T traversed edge (n 1 ; n 2 ) in G. 3 2.2 Regression Testing Research on regression testing spans a wide variety of topics, including test environments and automation [10, 12, 24, 25, 58], capture-playback mechanisms [33], test suite management <ref> [16, 23, 33, 51, 56] </ref>, program size reduction [7], and regression testability [29]. <p> Many other regression test selection techniques <ref> [4, 6, 14, 18, 20, 23, 39, 51] </ref> omit t2 or t3. If, for avg and avg2, the deletion of S7 had been the only change, SelectTests would have returned only ft3g. If the addition of S5a had been the only change, SelectTests would have returned only ft2g.
Reference: [52] <author> A. von Mayrhauser, R.T. Mraz, and J. </author> <title> Walls. Domain based regression testing. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1994, </booktitle> <pages> pages 26-35. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> September </month> <year> 1994. </year>
Reference-contexts: Section 4.1 presents an analytical evaluation and comparison; Section 4.2 presents empirical results. 4.1 Analytical Evaluation and Comparison Although some regression test selection techniques select tests based on information collected from program specifications <ref> [31, 52] </ref>, most techniques, including ours, select tests based on information about the code of the program and the modified version [1, 4, 6, 8, 11, 13, 14, 15, 18, 23, 27, 28, 31, 39, 43, 45, 50, 51, 54, 57]. These code-based techniques pursue various goals.
Reference: [53] <author> E.J. Weyuker. </author> <title> Empirical techniques for assessing testing strategies,. (Panel discussion at the International Symposium on Software Testing and Analysis), </title> <month> August </month> <year> 1994. </year>
Reference-contexts: scheduler tcas 8 141 89 87 41 1578 altitude separation Table 1: The 7 subject programs used for Study 1. select a fair cross-section of that population, nor do we know what it means to select a fair cross-section of the universe of modified versions or test suites for software <ref> [53] </ref>. Weyuker concludes that software engineers typically perform "empirical studies" rather than experiments. She insists, however, that such studies offer insight, and are valuable tools in understanding the topic studied. We agree with Weyuker; hence, this section outlines the results of empirical studies.
Reference: [54] <author> L.J. White and H.K.N. Leung. </author> <title> A firewall concept for both control-flow and data-flow in regression integration testing. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1992, </booktitle> <pages> pages 262-270. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> November </month> <year> 1992. </year>
Reference: [55] <author> L.J. White, V. Narayanswamy, T. Friedman, M. Kirschenbaum, P. Piwowarski, and M. Oha. </author> <title> Test Manager: a regression testing tool. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1993, </booktitle> <pages> pages 338-347. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> September </month> <year> 1993. </year>
Reference: [56] <author> W. E. Wong, J. R. Horgan, S. London, and A. P. Mathur. </author> <title> Effect of test set minimization on fault detection effectiveness. </title> <booktitle> In 17th International Conference on Software Engineering, </booktitle> <pages> pages 41-50. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> April </month> <year> 1995. </year>
Reference-contexts: is set if and only if test k in T traversed edge (n 1 ; n 2 ) in G. 3 2.2 Regression Testing Research on regression testing spans a wide variety of topics, including test environments and automation [10, 12, 24, 25, 58], capture-playback mechanisms [33], test suite management <ref> [16, 23, 33, 51, 56] </ref>, program size reduction [7], and regression testability [29].
Reference: [57] <author> S.S. Yau and Z. Kishimoto. </author> <title> A method for revalidating modified programs in the maintenance phase. </title> <booktitle> In COMP-SAC '87: The Eleventh Annual International Computer Software and Applications Conference, </booktitle> <pages> pages 272-277. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1987. </year>
Reference: [58] <author> J. Ziegler, J.M. Grasso, and L.G. Burgermeister. </author> <title> An Ada based real-time closed-loop integration and regression test tool. </title> <booktitle> In Proceedings of the Conference on Software Maintenance - 1989, </booktitle> <pages> pages 81-90. </pages> <publisher> IEEE Computer Society Press, </publisher> <month> October </month> <year> 1989. </year> <month> 35 </month>
Reference-contexts: size jT j bits such that the kth bit in v is set if and only if test k in T traversed edge (n 1 ; n 2 ) in G. 3 2.2 Regression Testing Research on regression testing spans a wide variety of topics, including test environments and automation <ref> [10, 12, 24, 25, 58] </ref>, capture-playback mechanisms [33], test suite management [16, 23, 33, 51, 56], program size reduction [7], and regression testability [29].
References-found: 58

