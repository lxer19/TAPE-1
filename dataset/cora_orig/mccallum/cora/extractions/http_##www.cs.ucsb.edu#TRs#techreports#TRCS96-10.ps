URL: http://www.cs.ucsb.edu/TRs/techreports/TRCS96-10.ps
Refering-URL: http://www.cs.ucsb.edu/TRs/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fomer, ashokg@cs.ucsb.edu  
Title: Parallelization of Particle Methods on the Sphere  
Author: Omer Egecioglu and Ashok Srinivasan 
Address: Santa Barbara, CA 93106  
Affiliation: Department of Computer Science University of California  
Abstract: We consider data structures and algorithms for efficient parallelization of particle methods when the domain is the surface of a sphere. Such applications typically arise when dealing with directional data. We propose a domain decomposition scheme based on geometric partitioning, that provides domains suitable for efficient implementation of requisite operations that are performed on the data in parallel. The algorithm has the advantage of being fast enough to be applied dynamically, and at the same time provides good partitions, comparable in quality to those produced by multilevel graph partitioning schemes.
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Barnes, J., Hut, P.: </author> <title> A hierarchical O(N log N ) force-calculation algorithm. </title> <note> Nature 3 (1986) 446-449 </note>
Reference-contexts: 1 Introduction Particle methods are widely used in several applications <ref> [1, 5, 4, 3] </ref>. These typically involve a set of particles represented as points in some space, and a function that describes the interaction between pairs of particles.
Reference: [2] <author> Berger, M.J., Bokhari, S.H.: </author> <title> A partitioning strategy for nonuniform problems on multiprocessors. </title> <journal> IEEE Transactions on Computers C-36 (1987) 570-80 </journal>
Reference-contexts: The outline of this paper is as follows. Sect. 2 describes graph-theoretical and geometric domain decomposition strategies as they apply to particle methods on the sphere. The algorithm we present in Sect. 3 is essentially a geometric partitioning based on Orthogonal Recursive Bisection <ref> [2] </ref>. However, we take advantage of the geometry of the sphere to produce partitions with quality comparable to sophisticated methods such as spectral partitioning. Experimental results and comparisons with other popular schemes available in Chaco, version 2.0 [9] and Metis, version 2.0.3 [11] are presented in Sect. 4. <p> The results are presented in Figure 8. Experiment 4: Our final comparison is with the distribution given by: cos () fi (; 6; 2) where the fi distribution is similar to the beta distribution, with the range scaled to <ref> [0; 2] </ref>. The value of h was taken to be 0:3. This is non-uniform in both the latitude and in the longitude. It should be noted that most of the points are concentrated near the equator of the sphere due to the cos () term.
Reference: [3] <author> Young, W.S., Brooks III, C.L.: </author> <title> Implementation of a Data Parallel, Logical Domain Decomposition Method for Interparticle Interaction in Molecular Dynamics of Structured Molecular Fluids. </title> <note> Journal of Computational Chemistry 15 (1994) 44-53 </note>
Reference-contexts: 1 Introduction Particle methods are widely used in several applications <ref> [1, 5, 4, 3] </ref>. These typically involve a set of particles represented as points in some space, and a function that describes the interaction between pairs of particles. <p> In many applications such as molecular dynamics and Smoothed Particle Hydrodynamics based methods, the interacting forces between the particles are short range and the effect of particles that are farther away than a certain cut-off distance can be ignored <ref> [4, 3] </ref>. In order to further mitigate high communication costs, one usually tries to overlap computation with communication. Hence, processors first send their shared data to the processors that need them, and following this perform their local computations.
Reference: [4] <author> Monaghan, J.J.: </author> <title> Particle Methods for Hydrodynamics. </title> <note> Computer Physics Reports 3 (1985) 71-124 </note>
Reference-contexts: 1 Introduction Particle methods are widely used in several applications <ref> [1, 5, 4, 3] </ref>. These typically involve a set of particles represented as points in some space, and a function that describes the interaction between pairs of particles. <p> In many applications such as molecular dynamics and Smoothed Particle Hydrodynamics based methods, the interacting forces between the particles are short range and the effect of particles that are farther away than a certain cut-off distance can be ignored <ref> [4, 3] </ref>. In order to further mitigate high communication costs, one usually tries to overlap computation with communication. Hence, processors first send their shared data to the processors that need them, and following this perform their local computations. <p> There are different options available to obtain a reasonable estimate of what the weight should be. A large class of problems involves compressible fluid flow calculations in which the density of the fluid has to be determined <ref> [4] </ref>. For sufficiently small h, the number of points within a distance h of any point is approximately proportional to the density at the point. Thus, one may take the weight to be proportional to the density.
Reference: [5] <author> Harlow, F.H.: </author> <title> The Particle-in-Cell Computing Method for Fluid Dynamics. </title> <type> Meth. </type> <institution> Comput. Phys. </institution> <month> 3 </month> <year> (1964) </year> <month> 319-343 </month>
Reference-contexts: 1 Introduction Particle methods are widely used in several applications <ref> [1, 5, 4, 3] </ref>. These typically involve a set of particles represented as points in some space, and a function that describes the interaction between pairs of particles.
Reference: [6] <author> Egecioglu O., Srinivasan, A.: </author> <title> Efficient Nonparametric Estimation of Probability Density Functions. </title> <type> Technical Report TRCS95-21, </type> <institution> University of California at Santa Barbara, </institution> <year> 1995 </year> <month> 14 </month>
Reference-contexts: Thus, one may take the weight to be proportional to the density. If such data is not available, one may use non-parametric density estimation techniques to estimate the density <ref> [6, 7] </ref>. In our implementation of the domain decomposition algorithm on the sphere we have used positive integral weights, though using floating point weights does not present any additional difficulty.
Reference: [7] <author> Egecioglu O., Srinivasan, A.: </author> <title> A Fast Nonparametric Density Estimation Algorithm. </title> <note> Communi--cations in Numerical Methods in Engineering (In Review) </note>
Reference-contexts: Thus, one may take the weight to be proportional to the density. If such data is not available, one may use non-parametric density estimation techniques to estimate the density <ref> [6, 7] </ref>. In our implementation of the domain decomposition algorithm on the sphere we have used positive integral weights, though using floating point weights does not present any additional difficulty.
Reference: [8] <author> Leighton, </author> <title> F.T.: Introduction to parallel algorithms and architectures : arrays, trees, hypercubes. </title> <editor> M. </editor> <publisher> Kaufmann Publishers, </publisher> <address> San Mateo, California, </address> <year> 1992 </year>
Reference-contexts: Our algorithm produces a mapping for a tree topology, with the processors located at the leaves of the tree. This is not unduly restrictive since efficient schemes exist for embedding trees into other topologies <ref> [8] </ref>. We use a recursive bisection procedure. At each stage, we first consider a cut on the subregion along the latitude that gives a balanced load, and also a longitudinal cut that gives a balanced load.
Reference: [9] <author> Hendrickson, B., Leland, R.: </author> <note> The Chaco User's Guide, Version 2.0. </note> <institution> SAND95-2344, Sandia National Laboratories </institution>
Reference-contexts: However, we take advantage of the geometry of the sphere to produce partitions with quality comparable to sophisticated methods such as spectral partitioning. Experimental results and comparisons with other popular schemes available in Chaco, version 2.0 <ref> [9] </ref> and Metis, version 2.0.3 [11] are presented in Sect. 4. These experiments show that our algorithm is an order of magnitude faster than even the relatively fast inertial method for large problem sizes, and demonstrate the high quality of the partitions obtained. <p> We show how our domain decomposition strategy facilitates efficient implementation of other operations on the data. Conclusions are given in Sect. 6. 2 Domain Decomposition Domain decomposition has been widely studied <ref> [9, 10, 11, 12, 13] </ref> and several types of methods for its solution have been proposed: graph-theoretical and geometric, for example. Graph-theoretical schemes ignore coordinate information and treat domain decomposition as a general graph partition 2 ing problem. <p> With cut-through routing being widely prevalent, this criteria seems justified. However, it should be noted that too many messages in the system could cause network congestion and the number of links traversed could affect the true communication cost <ref> [9] </ref>. Our communication measure also differs from the commonly used edge-cut metric in graph partitioning which tries to minimize the number of edges cut.
Reference: [10] <author> Hendrickson, B., Leland, R.: </author> <title> A Multilevel Algorithm for Partitioning Graphs. </title> <institution> SAND93-1301, Sandia National Laboratories </institution>
Reference-contexts: We show how our domain decomposition strategy facilitates efficient implementation of other operations on the data. Conclusions are given in Sect. 6. 2 Domain Decomposition Domain decomposition has been widely studied <ref> [9, 10, 11, 12, 13] </ref> and several types of methods for its solution have been proposed: graph-theoretical and geometric, for example. Graph-theoretical schemes ignore coordinate information and treat domain decomposition as a general graph partition 2 ing problem. <p> Graph-theoretical algorithms such as spectral methods produce high quality partitions especially when combined with a local refinement strategy [13], but require too much time. When combined with multilevel methods, these give good partitions much faster <ref> [10] </ref>, however, they are still not fast enough to be used frequently. Since the distribution of the points could change significantly in the types of application we are considering, the quality of the partitions may degrade quickly. <p> This was done on the basis of practical applications in which our scheme is particularly useful [14]. We compared our algorithm with general graph partitioning algorithms, since these have been found to give good quality partitions <ref> [10] </ref>. We also compared our scheme with the Inertial Method, since this is a geometric method which is much faster than the general graph partitioning methods. For problems of large size, even the multilevel graph partitioning algorithms were at least two orders 7 of magnitude slower than our algorithm.
Reference: [11] <author> Karypis, G., Kumar, V.: METIS, </author> <title> Unstructured Graph Partitioning and Sparse Matrix Ordering System, </title> <type> Version 2.0. </type> <institution> Dept. of Computer Science, University of Minnesota, </institution> <year> 1995 </year>
Reference-contexts: However, we take advantage of the geometry of the sphere to produce partitions with quality comparable to sophisticated methods such as spectral partitioning. Experimental results and comparisons with other popular schemes available in Chaco, version 2.0 [9] and Metis, version 2.0.3 <ref> [11] </ref> are presented in Sect. 4. These experiments show that our algorithm is an order of magnitude faster than even the relatively fast inertial method for large problem sizes, and demonstrate the high quality of the partitions obtained. <p> We show how our domain decomposition strategy facilitates efficient implementation of other operations on the data. Conclusions are given in Sect. 6. 2 Domain Decomposition Domain decomposition has been widely studied <ref> [9, 10, 11, 12, 13] </ref> and several types of methods for its solution have been proposed: graph-theoretical and geometric, for example. Graph-theoretical schemes ignore coordinate information and treat domain decomposition as a general graph partition 2 ing problem.
Reference: [12] <author> Williams, R.D.: </author> <title> Performance of Dynamic Load Balancing Algorithms for Unstructured Mesh Calculations. </title> <booktitle> Concurrency 3 (1991) 457-481 </booktitle>
Reference-contexts: We show how our domain decomposition strategy facilitates efficient implementation of other operations on the data. Conclusions are given in Sect. 6. 2 Domain Decomposition Domain decomposition has been widely studied <ref> [9, 10, 11, 12, 13] </ref> and several types of methods for its solution have been proposed: graph-theoretical and geometric, for example. Graph-theoretical schemes ignore coordinate information and treat domain decomposition as a general graph partition 2 ing problem.
Reference: [13] <author> Kernighan, B.W., Lin S.: </author> <title> An Efficient Heuristic Procedure for Partitioning Graphs. </title> <journal> Bell System Technical Journal, </journal> <year> 1970 </year>
Reference-contexts: We show how our domain decomposition strategy facilitates efficient implementation of other operations on the data. Conclusions are given in Sect. 6. 2 Domain Decomposition Domain decomposition has been widely studied <ref> [9, 10, 11, 12, 13] </ref> and several types of methods for its solution have been proposed: graph-theoretical and geometric, for example. Graph-theoretical schemes ignore coordinate information and treat domain decomposition as a general graph partition 2 ing problem. <p> The processor that receives the data can store this and reuse it when needed. In contrast to the edge-cut metric, our communication cost takes this factor into account as well. Graph-theoretical algorithms such as spectral methods produce high quality partitions especially when combined with a local refinement strategy <ref> [13] </ref>, but require too much time. When combined with multilevel methods, these give good partitions much faster [10], however, they are still not fast enough to be used frequently.
Reference: [14] <author> Chaubal, C., Leal, L.G.: </author> <title> The Effect of Flow Type on the Rheology of Liquid Crystalline Polymers. </title> <booktitle> Society of Rheology, 67th Annual Meeting, </booktitle> <address> Sacramento, CA Oct 8-12, </address> <year> 1995 </year>
Reference-contexts: This leads to an irregular computational problem in which the set of particles which interacts with any given particle changes with time in an unpredictable manner. Furthermore, in applications involving directional data such as complex fluid flow problems <ref> [21, 14] </ref>, the natural domain of representation is the unit sphere. In a parallel implementation, particles are assigned to processors by first breaking the domain into subdomains, and then mapping these subdomains to different processors. <p> We chose a value of h such that it gave a reasonably good estimate when using kernels for non-parametric estimation of the probability density. This was done on the basis of practical applications in which our scheme is particularly useful <ref> [14] </ref>. We compared our algorithm with general graph partitioning algorithms, since these have been found to give good quality partitions [10]. We also compared our scheme with the Inertial Method, since this is a geometric method which is much faster than the general graph partitioning methods. <p> This particular function arises in the solution of a certain problem in complex fluids <ref> [14] </ref>, and the distribution depends only on the latitude. Here, =2 latitude =2, and 0 longitude &lt; 2. In our experiments, we have used the special case of U = 4:6, A = 25:6. The value of h was taken to be 0:2.
Reference: [15] <author> Plimpton, S.: </author> <title> Fast Parallel Algorithms for Short-Range Molecular Dynamics. </title> <journal> J. Comp. Phys. </journal> <month> 117 </month> <year> (1995) </year> <month> 1-19 </month>
Reference-contexts: This method produces partitions which are usually of a higher quality than those produced by ORB, at the expense of a slight increase in the computational effort required to produce the partitions. Alternate approaches to parallelization of particle methods can be found in <ref> [15] </ref>. Our scheme resembles ORB, but takes advantage of certain metric properties of the surface of the sphere to give good partitions.
Reference: [16] <author> Preparata, </author> <title> F.P., Shamos, M.I.: Computational Geometry. </title> <publisher> Springer-Verlag, </publisher> <address> New York, </address> <year> 1985 </year>
Reference-contexts: We require two searches if the required region spans the 0 longitude. Range search in 2-D can be done in time O (n log n + K) time using the Willard-Lueker modification of the range 13 tree <ref> [16] </ref>. Since we are required to perform updates such as insertion and deletion, we can use any of the dynamic update methods reviewed in [17]. Algorithms also exist for searching on a disc [18]. However, often simpler procedures are sufficient.
Reference: [17] <author> Chiang, Y., Tamassia, R.: </author> <title> Dynamic Algorithms in Computational Geometry. </title> <booktitle> Proceedings of the IEEE 80 (1992) 1412-1434 </booktitle>
Reference-contexts: Range search in 2-D can be done in time O (n log n + K) time using the Willard-Lueker modification of the range 13 tree [16]. Since we are required to perform updates such as insertion and deletion, we can use any of the dynamic update methods reviewed in <ref> [17] </ref>. Algorithms also exist for searching on a disc [18]. However, often simpler procedures are sufficient. For example, a simple range searching strategy that fits in with the rest of the computations, is to project the data onto one dimension [19].
Reference: [18] <author> Chazelle, B.M., Edelsbrunner, H.: </author> <title> Optimal Solutions for a Class of Point Retrieval Problems. </title> <type> Tech. Rep. </type> <institution> CS-84-16, Dept. of Computer Science, Brown University, </institution> <year> 1984 </year>
Reference-contexts: Since we are required to perform updates such as insertion and deletion, we can use any of the dynamic update methods reviewed in [17]. Algorithms also exist for searching on a disc <ref> [18] </ref>. However, often simpler procedures are sufficient. For example, a simple range searching strategy that fits in with the rest of the computations, is to project the data onto one dimension [19]. Then we can sort this projected data and perform a range search based on the projected coordinates.
Reference: [19] <author> Friedman, J.H., Baskett, F., Shustek, L.J.: </author> <title> An Algorithm for Finding Nearest Neighbors. </title> <journal> IEEE Transactions on Computers C-24 (1975) 1000-1006 </journal>
Reference-contexts: Algorithms also exist for searching on a disc [18]. However, often simpler procedures are sufficient. For example, a simple range searching strategy that fits in with the rest of the computations, is to project the data onto one dimension <ref> [19] </ref>. Then we can sort this projected data and perform a range search based on the projected coordinates. Due to the triangle inequality, this will retrieve a superset of the true set.
Reference: [20] <author> Barnard, S.T., Simon, H.: </author> <title> A parallel implementation of multilevel recursive spectral bisection for application to adaptive unstructured meshes. </title> <booktitle> In: Proceedings of the Seventh SIAM Conference on Parallel Processing for Scientific Computing, </booktitle> <address> San Francisco, CA, USA, </address> <month> 15-17 Feb. </month> <year> 1995. </year> <title> Edited by: </title> <editor> Bailey, D.H.; Bjorstad, P.E.; Gilbert, J.R.; Mascagni, M.V.; and others. </editor> <address> Philadelphia, PA: </address> <publisher> SIAM, </publisher> <year> 1995, </year> <pages> 627-32 </pages>
Reference: [21] <author> Szeri, A., Leal, L.G.: </author> <title> A new computational method for the solution of flow problems of mi-crostructured fluids. Part 2. Inhomogeneous shear flow of a suspension. </title> <note> Journal of Fluid Mechanics 262 (1994) 171-204 15 </note>
Reference-contexts: This leads to an irregular computational problem in which the set of particles which interacts with any given particle changes with time in an unpredictable manner. Furthermore, in applications involving directional data such as complex fluid flow problems <ref> [21, 14] </ref>, the natural domain of representation is the unit sphere. In a parallel implementation, particles are assigned to processors by first breaking the domain into subdomains, and then mapping these subdomains to different processors.
References-found: 21

