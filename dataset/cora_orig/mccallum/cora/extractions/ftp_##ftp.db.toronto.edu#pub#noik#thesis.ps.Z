URL: ftp://ftp.db.toronto.edu/pub/noik/thesis.ps.Z
Refering-URL: http://www.cs.toronto.edu/~noik/cv.html
Root-URL: 
Title: Dynamic Fisheye Views: Combining Dynamic Queries and Mapping with Database Views  
Author: by Emanuel G. Noik 
Degree: A thesis submitted in conformity with the requirements for the degree of Doctor of Philosophy  
Note: c Copyright by Emanuel G. Noik 1996  
Address: Toronto  
Affiliation: Department of Computer Science University of  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> C. Ahlberg and B. Shneiderman. </author> <title> The Alpha Slider: A Rapid and Compact Selector. </title> <booktitle> In Proc. ACM CHI '94. ACM, </booktitle> <year> 1994. </year>
Reference-contexts: Regular expressions are submitted using the dialog box shown in Figure 2.6, which allows the user to choose that matching should be performed on the identifiers or labels of either the nodes or links in the graph. A related technique to select alphanumeric strings is the Alphaslider <ref> [1] </ref>. either the identifiers or labels of either the nodes or links in the graph. 2.6 Similarity Attributes The novel feature in Graphite is its support for dynamically evaluated similarity attributes a special class of attributes which can be used to pose similarity queries with DQ and to generate fisheye views <p> ) X E i and 8 : e i if s i 0 e i otherwise if attribute i is quantitative, or E i = &lt; s i if f i = p i 0 otherwise if attribute i is ordinal or nominal, where: 10 * mag (f ) 2 <ref> [1; 1] </ref> is a user-supplied focal point magnification (relevance) value of focal point f ; * I is a (sub)set of attributes; * s i 2 [1; 1] are scale factors; * e; e i 0 are exponent values; and, * f i and p i are the normalized (scaled to <p> s i if f i = p i 0 otherwise if attribute i is ordinal or nominal, where: 10 * mag (f ) 2 <ref> [1; 1] </ref> is a user-supplied focal point magnification (relevance) value of focal point f ; * I is a (sub)set of attributes; * s i 2 [1; 1] are scale factors; * e; e i 0 are exponent values; and, * f i and p i are the normalized (scaled to the interval [0; 1]) values of attribute i of the focal point and data point, respectively. <p> a user-supplied focal point magnification (relevance) value of focal point f ; * I is a (sub)set of attributes; * s i 2 [1; 1] are scale factors; * e; e i 0 are exponent values; and, * f i and p i are the normalized (scaled to the interval <ref> [0; 1] </ref>) values of attribute i of the focal point and data point, respectively. <p> To be fair, the histogram is a poor way to represent nominal data; however, even if we were to use scrolling lists or a better alphanumeric selection widget such as the the AlphaSlider <ref> [1] </ref>, DQ would still be inadequate at solving this task, as the user would still have to perform the above three actions repeatedly albeit with fewer errors. This is because both DQ and DM are attribute-centered rather than object-centered. <p> The filtering effects of the components are typically combined using AND logic (set intersection). 15 Data Type Component Numeric single or double-ended sliders [2, 3, 38, 84, 121] frequency distribution histograms [26, 27] Alphanumeric scrolling lists [38] Alpha slider <ref> [1] </ref> regular expression matching [84] Nominal/Categorical checkboxes, buttons [3, 38] scrolling lists [38] Aggregate Aggregate Manipulator [38] Table 3.1: Some common dynamic query components. A number of DQ component types have appeared in existing DQ systems and several common examples are summarized in Table 3.1. <p> The simplest type of derived attribute is the class of single-variable expressions (expressions that involve just one looping variable). Following the airline flights example, suppose arc attributes 0 and 1 are the price and duration of a one-way flight. Then: a:A a [2] := a [0] / a <ref> [1] </ref> declares arc attribute 2 to be the ratio of flight price to flight duration, which permits flight prices to be compared independently of their points of departure and arrival. <p> As an example, the following view captures the notion of Euclidean proximity (the 1 scale factor is used to invert Euclidean distance): v:V v [2] := -1 * AVG (f:VF,hypot (v [0]-f [0],v <ref> [1] </ref>-f [1])) which declares that for each vertex, attribute 2 is proportional to the average proximity of the vertex to the set of vertex focal points in the plane defined by vertex attributes 0 and 1 (note that hypot (x; y) = p 45 In addition, as shown in the class definition <p> For example, the following view is a variant of the above which uses magnification as a means to scale the contribution of each focal point: larger magnification values lead to higher proximity values. v:V v [2] := -1 * AVG (f:VF,hypot (v [0]-f [0],v <ref> [1] </ref>-f [1]) / mag (f)) Thus the provision of focal point magnification scale factors enables users to not only select arbitrary sets of focal points, but also to specify their relative importance (with a slider, for example) thereby causing objects that are similar to more important focal points to have higher similarity <p> will return the normalized value of an attribute, defined as: N (r [i]) = ( r [i] - MIN (s:R,s [i]) ) / ( MAX (s:R,s [i]) - MIN (s:R,s [i]) ) The above simply says that N (r [i]) is the value of r [i] scaled into the interval <ref> [0; 1] </ref>. <p> As an example, the following declaration is an alternative way to encode Euclidean proximity to the one given in the previous Section. v:V v [3] := AVG (f:VF,hypot (v [0]-f [0],v <ref> [1] </ref>-f [1])) v:V v [2] := 1 - N (v [3]) In this version, attribute 3 is the Euclidean distance, while attribute 2 is the Euclidean proximity in the range [0; 1]. 2 Path sources and sinks are selected interactively by pointing and clicking as discussed in Section 2.8. 47 Note that <p> encode Euclidean proximity to the one given in the previous Section. v:V v [3] := AVG (f:VF,hypot (v [0]-f [0],v [1]-f [1])) v:V v [2] := 1 - N (v [3]) In this version, attribute 3 is the Euclidean distance, while attribute 2 is the Euclidean proximity in the range <ref> [0; 1] </ref>. 2 Path sources and sinks are selected interactively by pointing and clicking as discussed in Section 2.8. 47 Note that in practice, the attribute extrema values are not repeatedly recomputed, but are stored and evaluated incrementally in response to database updates. <p> For example, the following view definition gives rise to the parse graph shown in the left portion of Figure 4.6. v [0] := CNT (a:UNION (IA (v),OA (v))) v <ref> [1] </ref> := AVG (a:UNION (IA (v),OA (v)),a [2]) v [2] := v [0] + v [1]; a:A a [2] := a [0] / a [1] Once we obtain a view parse graph, we compute its view dependency graph, which is the subgraph obtained by removing each vertex which does not refer <p> For example, the following view definition gives rise to the parse graph shown in the left portion of Figure 4.6. v [0] := CNT (a:UNION (IA (v),OA (v))) v <ref> [1] </ref> := AVG (a:UNION (IA (v),OA (v)),a [2]) v [2] := v [0] + v [1]; a:A a [2] := a [0] / a [1] Once we obtain a view parse graph, we compute its view dependency graph, which is the subgraph obtained by removing each vertex which does not refer to an attribute or set, and then adding a (u; v) arc between remaining vertices <p> following view definition gives rise to the parse graph shown in the left portion of Figure 4.6. v [0] := CNT (a:UNION (IA (v),OA (v))) v <ref> [1] </ref> := AVG (a:UNION (IA (v),OA (v)),a [2]) v [2] := v [0] + v [1]; a:A a [2] := a [0] / a [1] Once we obtain a view parse graph, we compute its view dependency graph, which is the subgraph obtained by removing each vertex which does not refer to an attribute or set, and then adding a (u; v) arc between remaining vertices u and v if there is at least one <p> For example, the expression: v:V v [2] := AVG (f:F,v [0]-f [0]) + SUM (f:F,v <ref> [1] </ref>-f [1]) + v [1] - v [0] can be rewritten as: 53 v:V - v [j] := SUM (f:F,v [1]-f [1]) - where i and j are two unused attribute numbers, and the three resulting attribute expressions are all either aggregate-free or consist of a single aggregate term. <p> For example, the expression: v:V v [2] := AVG (f:F,v [0]-f [0]) + SUM (f:F,v <ref> [1] </ref>-f [1]) + v [1] - v [0] can be rewritten as: 53 v:V - v [j] := SUM (f:F,v [1]-f [1]) - where i and j are two unused attribute numbers, and the three resulting attribute expressions are all either aggregate-free or consist of a single aggregate term. <p> For example, the expression: v:V v [2] := AVG (f:F,v [0]-f [0]) + SUM (f:F,v <ref> [1] </ref>-f [1]) + v [1] - v [0] can be rewritten as: 53 v:V - v [j] := SUM (f:F,v [1]-f [1]) - where i and j are two unused attribute numbers, and the three resulting attribute expressions are all either aggregate-free or consist of a single aggregate term. A related discussion of decomposable aggregate expressions appeared in [18]. <p> [grDiff -$o- $E]] set SE [grDiff $SE [grDiff -$o- $S]] As an example, consider the following extended version of the view specification presented in the previous subsection: 54 P := APSP (A,V,undirected,0,1) myF := SELECT (f:VF,f [0] &gt; 0) v:V - v [0] := CNT (a:UNION (IA (v),OA (v))) v <ref> [1] </ref> := AVG (a:UNION (IA (v),OA (v)),a [2]) v [2] := v [0] + v [1]; v [4] := NPATHS (P) v [5] := REGEXP () v [6] := USERSIM (-0,1-) v [7] := v [3] - v [4] a:A - a [3] := NPATHS (P) - This view definition gives <p> following extended version of the view specification presented in the previous subsection: 54 P := APSP (A,V,undirected,0,1) myF := SELECT (f:VF,f [0] &gt; 0) v:V - v [0] := CNT (a:UNION (IA (v),OA (v))) v <ref> [1] </ref> := AVG (a:UNION (IA (v),OA (v)),a [2]) v [2] := v [0] + v [1]; v [4] := NPATHS (P) v [5] := REGEXP () v [6] := USERSIM (-0,1-) v [7] := v [3] - v [4] a:A - a [3] := NPATHS (P) - This view definition gives rise to the dependency graph shown in Figure 4.9. <p> In particular, the route information is not explicitly stored in the base relations, but must be computed by evaluating APSP. We have constructed the following view on the database. 64 P0 := APSP (V,a:A,undirected,30,a <ref> [1] </ref>) % quickest routes P1 := APSP (V,a:A,undirected,25,a [0]) % cheapest routes P2 := APSP (V,A,undirected,0,1) % most-direct routes v:V - v [2] := CNT (UNION (IA (v),OA (v))) % busy destination v [3] := AVG (a:UNION (IA (v),OA (v)),a [2]) % expensive destination v [4] := AVG (f:VF,hypot (f (0) <p> [7] := AVG (f:VF,SP (P2,v,f)) % average trip legs v [8] := (NPATHS (P0) &gt; 0 ? 1 : 0) + % trip cities mask (NPATHS (P1) &gt; 0 ? 2 : 0) + (NPATHS (P2) &gt; 0 ? 4 : 0) - a [2] := a [0] / a <ref> [1] </ref> % price/time ratio a [3] := (NPATHS (P0) &gt; 0 ? 1 : 0) + % trip flights mask (NPATHS (P1) &gt; 0 ? 2 : 0) + (NPATHS (P2) &gt; 0 ? 4 : 0) - Notice that the v [8] and a [3] attributes are 3 bit masks <p> [8] &gt; 0 ? 2 : 0) v [10] := v [6] / v [0] % Purity: ratio of probes on common chrom v [11] := v [4] != 0 ? v [0] / v [4] : 0 % Evidence: avg no of probes per chrom v [12] := v <ref> [1] </ref> / v [0] % Coverage: percentage of assigned probes v [13] := CNT (UNION (IA (v),OA (v))) % Degree: vertex degree v [14] := USERSIM (-0-4,5:o,6-13-) % user-configurable similarity v [15] := NPATHS (P) &gt; 0 % PathNodes: nodes on shortest paths a:A a [1] := NPATHS (P) &gt; 0 <p> chrom v [12] := v <ref> [1] </ref> / v [0] % Coverage: percentage of assigned probes v [13] := CNT (UNION (IA (v),OA (v))) % Degree: vertex degree v [14] := USERSIM (-0-4,5:o,6-13-) % user-configurable similarity v [15] := NPATHS (P) &gt; 0 % PathNodes: nodes on shortest paths a:A a [1] := NPATHS (P) &gt; 0 % PathLinks: links on shortest paths Chromosome attribute has been mapped onto the node color hue and saturation properties, and the NoProbes attribute has been mapped on the node relative size property. Nodes have been positioned by the hierarchical (left-to-right) layout algorithm. <p> Figure 5.24 shows the resulting CATGraph with focal points Cincinnati and Laredo. 81 82 v:V - v [6] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v <ref> [1] </ref> - f [1]))) : v [1] v [7] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [2] - f [2]))) : v [2] v [8] := AVG (f:VF,abs (v [6] - f [6]) * -1) - 84 Graphical fisheye views can be generated in <p> Figure 5.24 shows the resulting CATGraph with focal points Cincinnati and Laredo. 81 82 v:V - v [6] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v <ref> [1] </ref> - f [1]))) : v [1] v [7] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [2] - f [2]))) : v [2] v [8] := AVG (f:VF,abs (v [6] - f [6]) * -1) - 84 Graphical fisheye views can be generated in exactly the same <p> Figure 5.24 shows the resulting CATGraph with focal points Cincinnati and Laredo. 81 82 v:V - v [6] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v <ref> [1] </ref> - f [1]))) : v [1] v [7] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [2] - f [2]))) : v [2] v [8] := AVG (f:VF,abs (v [6] - f [6]) * -1) - 84 Graphical fisheye views can be generated in exactly the same manner as CATGraphs, <p> Figure 5.25 shows a graphical fisheye view with focal point Dallas. 85 v:V v [6] := (mag (f) + 1) * dnorm * dmax / (mag (f) * dnorm * dmax) + f <ref> [1] </ref> where: dnorm is v [1] - f [1] and dmax is v [1] &gt;= f [1] ? MAX (u:V,u [1]) - f [1] : MIN (u:V,u [1]) - f [1] 5.5 Hierarchical Information File Directories Current personal computers and workstations are equipped with hard-disk drives that can typically store anywhere <p> Figure 5.25 shows a graphical fisheye view with focal point Dallas. 85 v:V v [6] := (mag (f) + 1) * dnorm * dmax / (mag (f) * dnorm * dmax) + f <ref> [1] </ref> where: dnorm is v [1] - f [1] and dmax is v [1] &gt;= f [1] ? MAX (u:V,u [1]) - f [1] : MIN (u:V,u [1]) - f [1] 5.5 Hierarchical Information File Directories Current personal computers and workstations are equipped with hard-disk drives that can typically store anywhere from 200 megabytes to as <p> Figure 5.25 shows a graphical fisheye view with focal point Dallas. 85 v:V v [6] := (mag (f) + 1) * dnorm * dmax / (mag (f) * dnorm * dmax) + f <ref> [1] </ref> where: dnorm is v [1] - f [1] and dmax is v [1] &gt;= f [1] ? MAX (u:V,u [1]) - f [1] : MIN (u:V,u [1]) - f [1] 5.5 Hierarchical Information File Directories Current personal computers and workstations are equipped with hard-disk drives that can typically store anywhere from 200 megabytes to as much as 4 <p> Figure 5.25 shows a graphical fisheye view with focal point Dallas. 85 v:V v [6] := (mag (f) + 1) * dnorm * dmax / (mag (f) * dnorm * dmax) + f <ref> [1] </ref> where: dnorm is v [1] - f [1] and dmax is v [1] &gt;= f [1] ? MAX (u:V,u [1]) - f [1] : MIN (u:V,u [1]) - f [1] 5.5 Hierarchical Information File Directories Current personal computers and workstations are equipped with hard-disk drives that can typically store anywhere from 200 megabytes to as much as 4 gigabytes of data. <p> Figure 5.25 shows a graphical fisheye view with focal point Dallas. 85 v:V v [6] := (mag (f) + 1) * dnorm * dmax / (mag (f) * dnorm * dmax) + f <ref> [1] </ref> where: dnorm is v [1] - f [1] and dmax is v [1] &gt;= f [1] ? MAX (u:V,u [1]) - f [1] : MIN (u:V,u [1]) - f [1] 5.5 Hierarchical Information File Directories Current personal computers and workstations are equipped with hard-disk drives that can typically store anywhere from 200 megabytes to as much as 4 gigabytes of data. <p> a graphical fisheye view with focal point Dallas. 85 v:V v [6] := (mag (f) + 1) * dnorm * dmax / (mag (f) * dnorm * dmax) + f <ref> [1] </ref> where: dnorm is v [1] - f [1] and dmax is v [1] &gt;= f [1] ? MAX (u:V,u [1]) - f [1] : MIN (u:V,u [1]) - f [1] 5.5 Hierarchical Information File Directories Current personal computers and workstations are equipped with hard-disk drives that can typically store anywhere from 200 megabytes to as much as 4 gigabytes of data. <p> view with focal point Dallas. 85 v:V v [6] := (mag (f) + 1) * dnorm * dmax / (mag (f) * dnorm * dmax) + f <ref> [1] </ref> where: dnorm is v [1] - f [1] and dmax is v [1] &gt;= f [1] ? MAX (u:V,u [1]) - f [1] : MIN (u:V,u [1]) - f [1] 5.5 Hierarchical Information File Directories Current personal computers and workstations are equipped with hard-disk drives that can typically store anywhere from 200 megabytes to as much as 4 gigabytes of data. <p> Dallas. 85 v:V v [6] := (mag (f) + 1) * dnorm * dmax / (mag (f) * dnorm * dmax) + f <ref> [1] </ref> where: dnorm is v [1] - f [1] and dmax is v [1] &gt;= f [1] ? MAX (u:V,u [1]) - f [1] : MIN (u:V,u [1]) - f [1] 5.5 Hierarchical Information File Directories Current personal computers and workstations are equipped with hard-disk drives that can typically store anywhere from 200 megabytes to as much as 4 gigabytes of data. Not surprisingly, large disks often lead to large and complex file directory structures. <p> v [6] := (mag (f) + 1) * dnorm * dmax / (mag (f) * dnorm * dmax) + f <ref> [1] </ref> where: dnorm is v [1] - f [1] and dmax is v [1] &gt;= f [1] ? MAX (u:V,u [1]) - f [1] : MIN (u:V,u [1]) - f [1] 5.5 Hierarchical Information File Directories Current personal computers and workstations are equipped with hard-disk drives that can typically store anywhere from 200 megabytes to as much as 4 gigabytes of data. Not surprisingly, large disks often lead to large and complex file directory structures. <p> We divide our discussion accordingly. 87 88 5.5.1 Flat Graph Representations We have defined the following view on the database: P := APSP (V,A,0,1) % shortest paths v:V - v <ref> [1] </ref> := CNT (TC (v,reverse,A)) - 1 % Depth in the hierarchy v [2] := AVG (f:VF,SP (P,v,f)) % Distance in the hierarchy v [3] := CNT (VF) &gt; 0 ? -1 * (v [1] + v [2]) : 0 - % Similarity based on depth and distance Notice that the <p> the following view on the database: P := APSP (V,A,0,1) % shortest paths v:V - v <ref> [1] </ref> := CNT (TC (v,reverse,A)) - 1 % Depth in the hierarchy v [2] := AVG (f:VF,SP (P,v,f)) % Distance in the hierarchy v [3] := CNT (VF) &gt; 0 ? -1 * (v [1] + v [2]) : 0 - % Similarity based on depth and distance Notice that the notion of similarity captured by attribute 3 is identical to the notion of degree of importance in the generalized fisheye view [34]. <p> Thus assuming that we are now given a graph with a set of blobs instead of arcs, we can create the following view: P := APSP (V,I,0,1) % shortest paths in nesting hierarchy v:V - v <ref> [1] </ref> := CNT (TC (v,reverse,I)) - 1 % Depth in nesting hierarchy v [2] := AVG (f:VF,SP (P,v,f)) % Distance in nesting hierarchy v [3] := CNT (VF) &gt; 0 ? -1 * (v [1] + v [2]) : 0 % Similarity based on depth and distance v [4] := MIN <p> the following view: P := APSP (V,I,0,1) % shortest paths in nesting hierarchy v:V - v <ref> [1] </ref> := CNT (TC (v,reverse,I)) - 1 % Depth in nesting hierarchy v [2] := AVG (f:VF,SP (P,v,f)) % Distance in nesting hierarchy v [3] := CNT (VF) &gt; 0 ? -1 * (v [1] + v [2]) : 0 % Similarity based on depth and distance v [4] := MIN (f:VF,((SP (P,v,f)+1) / mag (f)) * -1) - % Similarity based on distance only 89 The above view defines two similarity attributes; the first is identical to the notion degree of importance in the <p> Another important aspect of this technique was the ability to specify multiple variable-magnification focal 92 points. Next, we show that our view definition language can in fact simulate the layout independent fisheye view algorithm. One simplified (not exact) simulation can be obtained with the following view: v:V - v <ref> [1] </ref> := CNT (TC (v,reverse,I)) - 1 v [2] := AVG (f:INTERS (VF,TC (v,forward,I)),pow (mag (f),(v [1]+1)/(f [1]+1))) v [3] := v [2]=0 ? MAX (u:SELECT (w:TC (v,reverse,I),w [1] &gt; 0),u [2]) : u [2] - In the above, attribute 1 is the nesting depth, attribute 2 is the magnification computed <p> One simplified (not exact) simulation can be obtained with the following view: v:V - v <ref> [1] </ref> := CNT (TC (v,reverse,I)) - 1 v [2] := AVG (f:INTERS (VF,TC (v,forward,I)),pow (mag (f),(v [1]+1)/(f [1]+1))) v [3] := v [2]=0 ? MAX (u:SELECT (w:TC (v,reverse,I),w [1] &gt; 0),u [2]) : u [2] - In the above, attribute 1 is the nesting depth, attribute 2 is the magnification computed as the average propagated magnification over all focal points contained in the nesting subtree rooted at the vertex, and attribute 3 assigns a magnification to the rest of <p> To accomplish this, we must define the following view: 1 A synthetic focal point is a non-focal point vertex that contains several focal points in the subtree rooted at that node. 94 v:V - v <ref> [1] </ref> := CNT (TC (v,reverse,A)) - 1 % Depth in the hierarchy v [2] := CNT (CB (v)) = 0 ? 1 : 0 % unit value for each leaf node v [3] := SUM (u,TC (v,forward,I),u [2]) % sum of leaf values for internal node - v:SELECT (u:V,pb (u) != <p> [3] := SUM (u,TC (v,forward,I),u [2]) % sum of leaf values for internal node - v:SELECT (u:V,pb (u) != 0) v [4] := v [3] / pv (pb (v))[3] % ratio of child value to parent value v:SELECT (u:V,CNT (CB (u)) = 0) - v [5] := PROD (u:TC (v,reverse,I),u <ref> [1] </ref> % 2 = 0 ? u [4] : 1) * 500 v [6] := PROD (u:TC (v,reverse,I),u [1] % 2 = 0 ? u [4] : 1) * 500 - % final width and height of each leaf 95 To scale the leaf nodes to proper sizes we map vertex <p> != 0) v [4] := v [3] / pv (pb (v))[3] % ratio of child value to parent value v:SELECT (u:V,CNT (CB (u)) = 0) - v [5] := PROD (u:TC (v,reverse,I),u <ref> [1] </ref> % 2 = 0 ? u [4] : 1) * 500 v [6] := PROD (u:TC (v,reverse,I),u [1] % 2 = 0 ? u [4] : 1) * 500 - % final width and height of each leaf 95 To scale the leaf nodes to proper sizes we map vertex attributes 5 and 6 to absolute x and y sizes.
Reference: [2] <author> C. Ahlberg and B. Shneiderman. </author> <title> Visual Information Seeking: Tight Coupling of Dynamic Query Filters with Starfield Displays. </title> <booktitle> In Proc. ACM CHI '94, </booktitle> <pages> pages 313-317, </pages> <address> Boston, MA, </address> <month> April </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: User experiments have shown DQ to be superior to traditional query approaches for many searching tasks [3, 64, 66, 104, 121]. DQ and DM are complementary techniques and have been successfully integrated in a number of recent visualization (hereafter DQM) systems (e.g., <ref> [2, 3, 8, 11, 12, 26, 27] </ref>). However, both techniques share a common limitation: their effectiveness is inseparably tied to the availability of suitable multidimensional data (to query and map). <p> Notice that the histogram masking mechanism is more powerful than that of a simple slider. A slider can be used to mask elements with values less than the threshold chosen with the slider (simple range query). Even with a two-ended slider <ref> [2] </ref>, the user can only mask two contiguous subranges of a given attribute (range query with two inequalities). <p> The selected object's label is displayed in full on the graph, and its type and identifier are displayed in a message box. In this example node image was selected. 2.3 Dynamic Mapping In mapping, data attributes are mapped onto graphic properties <ref> [2, 7, 8, 14, 48, 84] </ref>. For example, the temperature of a data point is often mapped onto colour using a heat scale, the rate or volume of flow through a network is often depicted by link thickness, and the population of a city is often conveyed by node size. <p> Note that the Graphite pan-and-zoom features essentially reproduce the functionality of the Starfield display <ref> [2] </ref> (a 2-D scatterplot with pan-and-zoom feature), although our current implementation cannot generate smooth continuous zooming. <p> This feature is missing in existing DQ systems and was identified as a desirable extension to future systems <ref> [2] </ref>. Although our initial implementation of the user-defined similarity dialog box has limited expressiveness, a much broader class of similarity attributes can be expressed through explicit view definitions, as discussed in Chapter 4. <p> For example, dragging a slider can cause points to be added to the display (if enlarging the selected range), or it may cause points to be removed from the display (if narrowing the selected range). For this reason, such query components have also been called dynamic query filters <ref> [2] </ref>. <p> For this reason, such query components have also been called dynamic query filters [2]. The filtering effects of the components are typically combined using AND logic (set intersection). 15 Data Type Component Numeric single or double-ended sliders <ref> [2, 3, 38, 84, 121] </ref> frequency distribution histograms [26, 27] Alphanumeric scrolling lists [38] Alpha slider [1] regular expression matching [84] Nominal/Categorical checkboxes, buttons [3, 38] scrolling lists [38] Aggregate Aggregate Manipulator [38] Table 3.1: Some common dynamic query components. <p> In addition to masking, as users manipulate sliders corresponding to time or demographic variables, rapid colour changes help to identify trends. Filmfinder The Filmfinder incorporates dynamic queries with Starfield Displays (scatterplots with pan-and-zoom capability) as an aid to users in searching a large film database <ref> [2] </ref>. The inclusion of starfield displays prompted more careful treatment of tight coupling and display invariants (i.e., due to pan-and-zoom) in the context of visual information seeking. <p> Homefinder [121] 92 p p p Periodic Table of Elements [3] 92 p p p ASTER/COLOR/EXPAND [66] 92 p p p Health Statistics [85] 93 p p p HierNet [27] 93 p p p Seenet, NicheWorks [26] 93 p p p Filter/flow proposal [104, 105] 93 p p p Filmfinder <ref> [2] </ref> 94 p p p Aggregate Manipulator [38] 94 p p p Webviz [84] 94 p p p Network Configuration [65] 94 p p p SDM [11, 12] 95 p p p PDQ Tree Browser [64] 95 p p p Table 3.2: Summary of existing Dynamic Query system features. 3.1.4 Limitations <p> Next we present several examples. The simplest type of derived attribute is the class of single-variable expressions (expressions that involve just one looping variable). Following the airline flights example, suppose arc attributes 0 and 1 are the price and duration of a one-way flight. Then: a:A a <ref> [2] </ref> := a [0] / a [1] declares arc attribute 2 to be the ratio of flight price to flight duration, which permits flight prices to be compared independently of their points of departure and arrival. <p> Derived attributes can also be expressed using two or more looping variables by incorporating aggregate operators, as in: v:V v <ref> [2] </ref> := AVG (a:IA (v),a [2]) v:V v [3] := CNT (a:UNION (IA (v),OA (v))) which declares that for each vertex (city), attribute 2 is the average over the set of incoming arcs of arc attribute 2 (price to duration ratio) which indicates the relative cost of incoming flights, and vertex <p> Derived attributes can also be expressed using two or more looping variables by incorporating aggregate operators, as in: v:V v <ref> [2] </ref> := AVG (a:IA (v),a [2]) v:V v [3] := CNT (a:UNION (IA (v),OA (v))) which declares that for each vertex (city), attribute 2 is the average over the set of incoming arcs of arc attribute 2 (price to duration ratio) which indicates the relative cost of incoming flights, and vertex attribute 3 is the total <p> As an example, the following view captures the notion of Euclidean proximity (the 1 scale factor is used to invert Euclidean distance): v:V v <ref> [2] </ref> := -1 * AVG (f:VF,hypot (v [0]-f [0],v [1]-f [1])) which declares that for each vertex, attribute 2 is proportional to the average proximity of the vertex to the set of vertex focal points in the plane defined by vertex attributes 0 and 1 (note that hypot (x; y) = <p> For example, the following view is a variant of the above which uses magnification as a means to scale the contribution of each focal point: larger magnification values lead to higher proximity values. v:V v <ref> [2] </ref> := -1 * AVG (f:VF,hypot (v [0]-f [0],v [1]-f [1]) / mag (f)) Thus the provision of focal point magnification scale factors enables users to not only select arbitrary sets of focal points, but also to specify their relative importance (with a slider, for example) thereby causing objects that are <p> As an example, the following declaration is an alternative way to encode Euclidean proximity to the one given in the previous Section. v:V v [3] := AVG (f:VF,hypot (v [0]-f [0],v [1]-f [1])) v:V v <ref> [2] </ref> := 1 - N (v [3]) In this version, attribute 3 is the Euclidean distance, while attribute 2 is the Euclidean proximity in the range [0; 1]. 2 Path sources and sinks are selected interactively by pointing and clicking as discussed in Section 2.8. 47 Note that in practice, the <p> For example, the following view definition gives rise to the parse graph shown in the left portion of Figure 4.6. v [0] := CNT (a:UNION (IA (v),OA (v))) v [1] := AVG (a:UNION (IA (v),OA (v)),a <ref> [2] </ref>) v [2] := v [0] + v [1]; a:A a [2] := a [0] / a [1] Once we obtain a view parse graph, we compute its view dependency graph, which is the subgraph obtained by removing each vertex which does not refer to an attribute or set, and then <p> For example, the following view definition gives rise to the parse graph shown in the left portion of Figure 4.6. v [0] := CNT (a:UNION (IA (v),OA (v))) v [1] := AVG (a:UNION (IA (v),OA (v)),a <ref> [2] </ref>) v [2] := v [0] + v [1]; a:A a [2] := a [0] / a [1] Once we obtain a view parse graph, we compute its view dependency graph, which is the subgraph obtained by removing each vertex which does not refer to an attribute or set, and then adding a <p> For example, the following view definition gives rise to the parse graph shown in the left portion of Figure 4.6. v [0] := CNT (a:UNION (IA (v),OA (v))) v [1] := AVG (a:UNION (IA (v),OA (v)),a <ref> [2] </ref>) v [2] := v [0] + v [1]; a:A a [2] := a [0] / a [1] Once we obtain a view parse graph, we compute its view dependency graph, which is the subgraph obtained by removing each vertex which does not refer to an attribute or set, and then adding a (u; v) arc between remaining vertices u and v <p> For example, the expression: v:V v <ref> [2] </ref> := AVG (f:F,v [0]-f [0]) + SUM (f:F,v [1]-f [1]) + v [1] - v [0] can be rewritten as: 53 v:V - v [j] := SUM (f:F,v [1]-f [1]) - where i and j are two unused attribute numbers, and the three resulting attribute expressions are all either aggregate-free <p> [grDiff -$o- $S]] As an example, consider the following extended version of the view specification presented in the previous subsection: 54 P := APSP (A,V,undirected,0,1) myF := SELECT (f:VF,f [0] &gt; 0) v:V - v [0] := CNT (a:UNION (IA (v),OA (v))) v [1] := AVG (a:UNION (IA (v),OA (v)),a <ref> [2] </ref>) v [2] := v [0] + v [1]; v [4] := NPATHS (P) v [5] := REGEXP () v [6] := USERSIM (-0,1-) v [7] := v [3] - v [4] a:A - a [3] := NPATHS (P) - This view definition gives rise to the dependency graph shown in <p> $S]] As an example, consider the following extended version of the view specification presented in the previous subsection: 54 P := APSP (A,V,undirected,0,1) myF := SELECT (f:VF,f [0] &gt; 0) v:V - v [0] := CNT (a:UNION (IA (v),OA (v))) v [1] := AVG (a:UNION (IA (v),OA (v)),a <ref> [2] </ref>) v [2] := v [0] + v [1]; v [4] := NPATHS (P) v [5] := REGEXP () v [6] := USERSIM (-0,1-) v [7] := v [3] - v [4] a:A - a [3] := NPATHS (P) - This view definition gives rise to the dependency graph shown in Figure 4.9. <p> We have constructed the following view on the database. 64 P0 := APSP (V,a:A,undirected,30,a [1]) % quickest routes P1 := APSP (V,a:A,undirected,25,a [0]) % cheapest routes P2 := APSP (V,A,undirected,0,1) % most-direct routes v:V - v <ref> [2] </ref> := CNT (UNION (IA (v),OA (v))) % busy destination v [3] := AVG (a:UNION (IA (v),OA (v)),a [2]) % expensive destination v [4] := AVG (f:VF,hypot (f (0) - v (0),f (1) - v (1))) % average trip distance v [5] := AVG (f:VF,SP (P0,v,f)) % average trip duration v <p> following view on the database. 64 P0 := APSP (V,a:A,undirected,30,a [1]) % quickest routes P1 := APSP (V,a:A,undirected,25,a [0]) % cheapest routes P2 := APSP (V,A,undirected,0,1) % most-direct routes v:V - v <ref> [2] </ref> := CNT (UNION (IA (v),OA (v))) % busy destination v [3] := AVG (a:UNION (IA (v),OA (v)),a [2]) % expensive destination v [4] := AVG (f:VF,hypot (f (0) - v (0),f (1) - v (1))) % average trip distance v [5] := AVG (f:VF,SP (P0,v,f)) % average trip duration v [6] := AVG (f:VF,SP (P1,v,f)) % average trip cost v [7] := AVG (f:VF,SP (P2,v,f)) % average trip <p> (P1,v,f)) % average trip cost v [7] := AVG (f:VF,SP (P2,v,f)) % average trip legs v [8] := (NPATHS (P0) &gt; 0 ? 1 : 0) + % trip cities mask (NPATHS (P1) &gt; 0 ? 2 : 0) + (NPATHS (P2) &gt; 0 ? 4 : 0) - a <ref> [2] </ref> := a [0] / a [1] % price/time ratio a [3] := (NPATHS (P0) &gt; 0 ? 1 : 0) + % trip flights mask (NPATHS (P1) &gt; 0 ? 2 : 0) + (NPATHS (P2) &gt; 0 ? 4 : 0) - Notice that the v [8] and a <p> % document out-degree v [6] := AVG (f:VF,-1 * abs (v [4]-f [4]) / mag (f)) % document add neighbourhood v [7] := AVG (f:VF,-1 * abs (v [5]-f [5]) / mag (f)) % document browse neighbourhood v [8] := REGEXP () % document regular expression match - a:A a <ref> [2] </ref> := REGEXP () % link regular expression match The node browse time stamp attribute has been mapped onto node colour hue and saturation graphical properties and the link browse time stamp has been mapped onto link width and colour. <p> The former demonstrates Graphite's ability to zoom in and out of two-dimensional scatterplots as done in the Starfield display <ref> [2] </ref>, while the latter demonstrates a common dynamic mapping technique used in GIS visualizations. We now demonstrate how our approach can be used to simulate two well-known orthogonal geometric distorted view techniques: graphical fisheye views [96, 97] and compressed arctangent (CAT) graphs [60]. <p> CATGraph with focal points Cincinnati and Laredo. 81 82 v:V - v [6] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [1] - f [1]))) : v [1] v [7] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v <ref> [2] </ref> - f [2]))) : v [2] v [8] := AVG (f:VF,abs (v [6] - f [6]) * -1) - 84 Graphical fisheye views can be generated in exactly the same manner as CATGraphs, except that the formula for the distorted coordinates becomes considerably more complicated; the formula for the x <p> points Cincinnati and Laredo. 81 82 v:V - v [6] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [1] - f [1]))) : v [1] v [7] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v <ref> [2] </ref> - f [2]))) : v [2] v [8] := AVG (f:VF,abs (v [6] - f [6]) * -1) - 84 Graphical fisheye views can be generated in exactly the same manner as CATGraphs, except that the formula for the distorted coordinates becomes considerably more complicated; the formula for the x position is shown <p> Laredo. 81 82 v:V - v [6] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [1] - f [1]))) : v [1] v [7] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v <ref> [2] </ref> - f [2]))) : v [2] v [8] := AVG (f:VF,abs (v [6] - f [6]) * -1) - 84 Graphical fisheye views can be generated in exactly the same manner as CATGraphs, except that the formula for the distorted coordinates becomes considerably more complicated; the formula for the x position is shown below (the formula <p> We divide our discussion accordingly. 87 88 5.5.1 Flat Graph Representations We have defined the following view on the database: P := APSP (V,A,0,1) % shortest paths v:V - v [1] := CNT (TC (v,reverse,A)) - 1 % Depth in the hierarchy v <ref> [2] </ref> := AVG (f:VF,SP (P,v,f)) % Distance in the hierarchy v [3] := CNT (VF) &gt; 0 ? -1 * (v [1] + v [2]) : 0 - % Similarity based on depth and distance Notice that the notion of similarity captured by attribute 3 is identical to the notion of <p> on the database: P := APSP (V,A,0,1) % shortest paths v:V - v [1] := CNT (TC (v,reverse,A)) - 1 % Depth in the hierarchy v <ref> [2] </ref> := AVG (f:VF,SP (P,v,f)) % Distance in the hierarchy v [3] := CNT (VF) &gt; 0 ? -1 * (v [1] + v [2]) : 0 - % Similarity based on depth and distance Notice that the notion of similarity captured by attribute 3 is identical to the notion of degree of importance in the generalized fisheye view [34]. <p> Thus assuming that we are now given a graph with a set of blobs instead of arcs, we can create the following view: P := APSP (V,I,0,1) % shortest paths in nesting hierarchy v:V - v [1] := CNT (TC (v,reverse,I)) - 1 % Depth in nesting hierarchy v <ref> [2] </ref> := AVG (f:VF,SP (P,v,f)) % Distance in nesting hierarchy v [3] := CNT (VF) &gt; 0 ? -1 * (v [1] + v [2]) : 0 % Similarity based on depth and distance v [4] := MIN (f:VF,((SP (P,v,f)+1) / mag (f)) * -1) - % Similarity based on distance <p> P := APSP (V,I,0,1) % shortest paths in nesting hierarchy v:V - v [1] := CNT (TC (v,reverse,I)) - 1 % Depth in nesting hierarchy v <ref> [2] </ref> := AVG (f:VF,SP (P,v,f)) % Distance in nesting hierarchy v [3] := CNT (VF) &gt; 0 ? -1 * (v [1] + v [2]) : 0 % Similarity based on depth and distance v [4] := MIN (f:VF,((SP (P,v,f)+1) / mag (f)) * -1) - % Similarity based on distance only 89 The above view defines two similarity attributes; the first is identical to the notion degree of importance in the generalized fisheye view <p> Next, we show that our view definition language can in fact simulate the layout independent fisheye view algorithm. One simplified (not exact) simulation can be obtained with the following view: v:V - v [1] := CNT (TC (v,reverse,I)) - 1 v <ref> [2] </ref> := AVG (f:INTERS (VF,TC (v,forward,I)),pow (mag (f),(v [1]+1)/(f [1]+1))) v [3] := v [2]=0 ? MAX (u:SELECT (w:TC (v,reverse,I),w [1] &gt; 0),u [2]) : u [2] - In the above, attribute 1 is the nesting depth, attribute 2 is the magnification computed as the average propagated magnification over all focal <p> One simplified (not exact) simulation can be obtained with the following view: v:V - v [1] := CNT (TC (v,reverse,I)) - 1 v <ref> [2] </ref> := AVG (f:INTERS (VF,TC (v,forward,I)),pow (mag (f),(v [1]+1)/(f [1]+1))) v [3] := v [2]=0 ? MAX (u:SELECT (w:TC (v,reverse,I),w [1] &gt; 0),u [2]) : u [2] - In the above, attribute 1 is the nesting depth, attribute 2 is the magnification computed as the average propagated magnification over all focal points contained in the nesting subtree rooted at the vertex, and attribute 3 assigns a magnification to the rest of the vertices by <p> One simplified (not exact) simulation can be obtained with the following view: v:V - v [1] := CNT (TC (v,reverse,I)) - 1 v <ref> [2] </ref> := AVG (f:INTERS (VF,TC (v,forward,I)),pow (mag (f),(v [1]+1)/(f [1]+1))) v [3] := v [2]=0 ? MAX (u:SELECT (w:TC (v,reverse,I),w [1] &gt; 0),u [2]) : u [2] - In the above, attribute 1 is the nesting depth, attribute 2 is the magnification computed as the average propagated magnification over all focal points contained in the nesting subtree rooted at the vertex, and attribute 3 assigns a magnification to the rest of the vertices by choosing the maximum <p> To accomplish this, we must define the following view: 1 A synthetic focal point is a non-focal point vertex that contains several focal points in the subtree rooted at that node. 94 v:V - v [1] := CNT (TC (v,reverse,A)) - 1 % Depth in the hierarchy v <ref> [2] </ref> := CNT (CB (v)) = 0 ? 1 : 0 % unit value for each leaf node v [3] := SUM (u,TC (v,forward,I),u [2]) % sum of leaf values for internal node - v:SELECT (u:V,pb (u) != 0) v [4] := v [3] / pv (pb (v))[3] % ratio of <p> focal points in the subtree rooted at that node. 94 v:V - v [1] := CNT (TC (v,reverse,A)) - 1 % Depth in the hierarchy v <ref> [2] </ref> := CNT (CB (v)) = 0 ? 1 : 0 % unit value for each leaf node v [3] := SUM (u,TC (v,forward,I),u [2]) % sum of leaf values for internal node - v:SELECT (u:V,pb (u) != 0) v [4] := v [3] / pv (pb (v))[3] % ratio of child value to parent value v:SELECT (u:V,CNT (CB (u)) = 0) - v [5] := PROD (u:TC (v,reverse,I),u [1] % 2 = 0 ? <p> Second, as DQM systems become more complex, they become more difficult to construct and test. As such, it becomes increasingly important to be able to specify how various components are interrelated; this suggests a growing need for rules that describe display invariants (e.g., as suggested in <ref> [2] </ref>); one possible implementation strategy is to exploit active database features such as triggers [71].
Reference: [3] <author> C. Ahlberg, C. Williamson, and B. Shneiderman. </author> <title> Dynamic Queries for Information Exploration: An Implementation and Evaluation. </title> <booktitle> In Proc. ACM CHI '92, </booktitle> <pages> pages 619-626. </pages> <publisher> ACM, </publisher> <year> 1992. </year>
Reference-contexts: User experiments have shown DQ to be superior to traditional query approaches for many searching tasks <ref> [3, 64, 66, 104, 121] </ref>. DQ and DM are complementary techniques and have been successfully integrated in a number of recent visualization (hereafter DQM) systems (e.g., [2, 3, 8, 11, 12, 26, 27]). <p> User experiments have shown DQ to be superior to traditional query approaches for many searching tasks [3, 64, 66, 104, 121]. DQ and DM are complementary techniques and have been successfully integrated in a number of recent visualization (hereafter DQM) systems (e.g., <ref> [2, 3, 8, 11, 12, 26, 27] </ref>). However, both techniques share a common limitation: their effectiveness is inseparably tied to the availability of suitable multidimensional data (to query and map). <p> For this reason, such query components have also been called dynamic query filters [2]. The filtering effects of the components are typically combined using AND logic (set intersection). 15 Data Type Component Numeric single or double-ended sliders <ref> [2, 3, 38, 84, 121] </ref> frequency distribution histograms [26, 27] Alphanumeric scrolling lists [38] Alpha slider [1] regular expression matching [84] Nominal/Categorical checkboxes, buttons [3, 38] scrolling lists [38] Aggregate Aggregate Manipulator [38] Table 3.1: Some common dynamic query components. <p> The filtering effects of the components are typically combined using AND logic (set intersection). 15 Data Type Component Numeric single or double-ended sliders [2, 3, 38, 84, 121] frequency distribution histograms [26, 27] Alphanumeric scrolling lists [38] Alpha slider [1] regular expression matching [84] Nominal/Categorical checkboxes, buttons <ref> [3, 38] </ref> scrolling lists [38] Aggregate Aggregate Manipulator [38] Table 3.1: Some common dynamic query components. A number of DQ component types have appeared in existing DQ systems and several common examples are summarized in Table 3.1. <p> Periodic Table of Elements This educational program allowed users to interact with a periodic table of elements using dynamic queries <ref> [3] </ref>. The periodic table of elements data included 6 attributes: atomic number, atomic mass, electronegativity, atomic and ionic radius, and ionization energy. The dynamic query system allowed users to interactively highlight elements that satisfied the query which was specified through a set of sliders. <p> between data points), and non-flat data sets in which data points are related, as in hierarchical data sets. 21 System Year Mapping Views Inputs None Static Dynamic None Predefined User-defined Flat Hierarchical Graph Network Visualization [8] 90 p p p Homefinder [121] 92 p p p Periodic Table of Elements <ref> [3] </ref> 92 p p p ASTER/COLOR/EXPAND [66] 92 p p p Health Statistics [85] 93 p p p HierNet [27] 93 p p p Seenet, NicheWorks [26] 93 p p p Filter/flow proposal [104, 105] 93 p p p Filmfinder [2] 94 p p p Aggregate Manipulator [38] 94 p p <p> Derived attributes can also be expressed using two or more looping variables by incorporating aggregate operators, as in: v:V v [2] := AVG (a:IA (v),a [2]) v:V v <ref> [3] </ref> := CNT (a:UNION (IA (v),OA (v))) which declares that for each vertex (city), attribute 2 is the average over the set of incoming arcs of arc attribute 2 (price to duration ratio) which indicates the relative cost of incoming flights, and vertex attribute 3 is the total number of flights <p> Navigation through pointers is used to compute derived values involving related objects, as in: a:A a <ref> [3] </ref> := a [0] / AVG (b:IA (head (a)),b [0]) which declares that for each arc (flight), attribute 3 is the ratio of attribute 0 to the average value of attribute 0 over the set of arcs incident on an arc's head (destination city), which computes the ratio of a flight's <p> As an example, the following declaration is an alternative way to encode Euclidean proximity to the one given in the previous Section. v:V v <ref> [3] </ref> := AVG (f:VF,hypot (v [0]-f [0],v [1]-f [1])) v:V v [2] := 1 - N (v [3]) In this version, attribute 3 is the Euclidean distance, while attribute 2 is the Euclidean proximity in the range [0; 1]. 2 Path sources and sinks are selected interactively by pointing and clicking <p> As an example, the following declaration is an alternative way to encode Euclidean proximity to the one given in the previous Section. v:V v <ref> [3] </ref> := AVG (f:VF,hypot (v [0]-f [0],v [1]-f [1])) v:V v [2] := 1 - N (v [3]) In this version, attribute 3 is the Euclidean distance, while attribute 2 is the Euclidean proximity in the range [0; 1]. 2 Path sources and sinks are selected interactively by pointing and clicking as discussed in Section 2.8. 47 Note that in practice, the attribute extrema values are not repeatedly <p> For example, the dynamic attribute definition: v:V v <ref> [3] </ref> := SUM (f:F,abs (f [0]-v [0])) would give rise to the following Graphite update statement for an add event: grSet $v 3 [expr a ($v,3) + abs (a ($f,0) - a ($v,0))] and the following update statement for a remove event: grSet $v 3 [expr a ($v,3) - abs (a <p> (f:VF,f [0] &gt; 0) v:V - v [0] := CNT (a:UNION (IA (v),OA (v))) v [1] := AVG (a:UNION (IA (v),OA (v)),a [2]) v [2] := v [0] + v [1]; v [4] := NPATHS (P) v [5] := REGEXP () v [6] := USERSIM (-0,1-) v [7] := v <ref> [3] </ref> - v [4] a:A - a [3] := NPATHS (P) - This view definition gives rise to the dependency graph shown in Figure 4.9. Several features of the dependency graph require elaboration. <p> [0] := CNT (a:UNION (IA (v),OA (v))) v [1] := AVG (a:UNION (IA (v),OA (v)),a [2]) v [2] := v [0] + v [1]; v [4] := NPATHS (P) v [5] := REGEXP () v [6] := USERSIM (-0,1-) v [7] := v <ref> [3] </ref> - v [4] a:A - a [3] := NPATHS (P) - This view definition gives rise to the dependency graph shown in Figure 4.9. Several features of the dependency graph require elaboration. <p> We have constructed the following view on the database. 64 P0 := APSP (V,a:A,undirected,30,a [1]) % quickest routes P1 := APSP (V,a:A,undirected,25,a [0]) % cheapest routes P2 := APSP (V,A,undirected,0,1) % most-direct routes v:V - v [2] := CNT (UNION (IA (v),OA (v))) % busy destination v <ref> [3] </ref> := AVG (a:UNION (IA (v),OA (v)),a [2]) % expensive destination v [4] := AVG (f:VF,hypot (f (0) - v (0),f (1) - v (1))) % average trip distance v [5] := AVG (f:VF,SP (P0,v,f)) % average trip duration v [6] := AVG (f:VF,SP (P1,v,f)) % average trip cost v [7] <p> % average trip legs v [8] := (NPATHS (P0) &gt; 0 ? 1 : 0) + % trip cities mask (NPATHS (P1) &gt; 0 ? 2 : 0) + (NPATHS (P2) &gt; 0 ? 4 : 0) - a [2] := a [0] / a [1] % price/time ratio a <ref> [3] </ref> := (NPATHS (P0) &gt; 0 ? 1 : 0) + % trip flights mask (NPATHS (P1) &gt; 0 ? 2 : 0) + (NPATHS (P2) &gt; 0 ? 4 : 0) - Notice that the v [8] and a [3] attributes are 3 bit masks that permit the user to <p> := a [0] / a [1] % price/time ratio a <ref> [3] </ref> := (NPATHS (P0) &gt; 0 ? 1 : 0) + % trip flights mask (NPATHS (P1) &gt; 0 ? 2 : 0) + (NPATHS (P2) &gt; 0 ? 4 : 0) - Notice that the v [8] and a [3] attributes are 3 bit masks that permit the user to select cities or flights that partake in any combination of currently selected fastest, cheapest, or most direct routes. Reykjavik and Bergen are path sinks. <p> accordingly. 87 88 5.5.1 Flat Graph Representations We have defined the following view on the database: P := APSP (V,A,0,1) % shortest paths v:V - v [1] := CNT (TC (v,reverse,A)) - 1 % Depth in the hierarchy v [2] := AVG (f:VF,SP (P,v,f)) % Distance in the hierarchy v <ref> [3] </ref> := CNT (VF) &gt; 0 ? -1 * (v [1] + v [2]) : 0 - % Similarity based on depth and distance Notice that the notion of similarity captured by attribute 3 is identical to the notion of degree of importance in the generalized fisheye view [34]. <p> a set of blobs instead of arcs, we can create the following view: P := APSP (V,I,0,1) % shortest paths in nesting hierarchy v:V - v [1] := CNT (TC (v,reverse,I)) - 1 % Depth in nesting hierarchy v [2] := AVG (f:VF,SP (P,v,f)) % Distance in nesting hierarchy v <ref> [3] </ref> := CNT (VF) &gt; 0 ? -1 * (v [1] + v [2]) : 0 % Similarity based on depth and distance v [4] := MIN (f:VF,((SP (P,v,f)+1) / mag (f)) * -1) - % Similarity based on distance only 89 The above view defines two similarity attributes; the first <p> One simplified (not exact) simulation can be obtained with the following view: v:V - v [1] := CNT (TC (v,reverse,I)) - 1 v [2] := AVG (f:INTERS (VF,TC (v,forward,I)),pow (mag (f),(v [1]+1)/(f [1]+1))) v <ref> [3] </ref> := v [2]=0 ? MAX (u:SELECT (w:TC (v,reverse,I),w [1] &gt; 0),u [2]) : u [2] - In the above, attribute 1 is the nesting depth, attribute 2 is the magnification computed as the average propagated magnification over all focal points contained in the nesting subtree rooted at the vertex, and <p> point vertex that contains several focal points in the subtree rooted at that node. 94 v:V - v [1] := CNT (TC (v,reverse,A)) - 1 % Depth in the hierarchy v [2] := CNT (CB (v)) = 0 ? 1 : 0 % unit value for each leaf node v <ref> [3] </ref> := SUM (u,TC (v,forward,I),u [2]) % sum of leaf values for internal node - v:SELECT (u:V,pb (u) != 0) v [4] := v [3] / pv (pb (v))[3] % ratio of child value to parent value v:SELECT (u:V,CNT (CB (u)) = 0) - v [5] := PROD (u:TC (v,reverse,I),u [1] <p> 1 % Depth in the hierarchy v [2] := CNT (CB (v)) = 0 ? 1 : 0 % unit value for each leaf node v <ref> [3] </ref> := SUM (u,TC (v,forward,I),u [2]) % sum of leaf values for internal node - v:SELECT (u:V,pb (u) != 0) v [4] := v [3] / pv (pb (v))[3] % ratio of child value to parent value v:SELECT (u:V,CNT (CB (u)) = 0) - v [5] := PROD (u:TC (v,reverse,I),u [1] % 2 = 0 ? u [4] : 1) * 500 v [6] := PROD (u:TC (v,reverse,I),u [1] % 2 = 0 ? u
Reference: [4] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman. </author> <title> Data Structures and Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1983. </year>
Reference-contexts: The second returns the number of shortest paths between the current set of sources S and sinks E that object o partakes in. The APSP can be computed in O (jV j 3 ) time using a variant of Floyd's algorithm <ref> [4, 31] </ref> that considers not only arc weights but also vertex weights (see Section B.1). The function SP is just a table look-up and thus can be evaluated in constant time. <p> version of the view specification presented in the previous subsection: 54 P := APSP (A,V,undirected,0,1) myF := SELECT (f:VF,f [0] &gt; 0) v:V - v [0] := CNT (a:UNION (IA (v),OA (v))) v [1] := AVG (a:UNION (IA (v),OA (v)),a [2]) v [2] := v [0] + v [1]; v <ref> [4] </ref> := NPATHS (P) v [5] := REGEXP () v [6] := USERSIM (-0,1-) v [7] := v [3] - v [4] a:A - a [3] := NPATHS (P) - This view definition gives rise to the dependency graph shown in Figure 4.9. <p> 0) v:V - v [0] := CNT (a:UNION (IA (v),OA (v))) v [1] := AVG (a:UNION (IA (v),OA (v)),a [2]) v [2] := v [0] + v [1]; v <ref> [4] </ref> := NPATHS (P) v [5] := REGEXP () v [6] := USERSIM (-0,1-) v [7] := v [3] - v [4] a:A - a [3] := NPATHS (P) - This view definition gives rise to the dependency graph shown in Figure 4.9. Several features of the dependency graph require elaboration. <p> 64 P0 := APSP (V,a:A,undirected,30,a [1]) % quickest routes P1 := APSP (V,a:A,undirected,25,a [0]) % cheapest routes P2 := APSP (V,A,undirected,0,1) % most-direct routes v:V - v [2] := CNT (UNION (IA (v),OA (v))) % busy destination v [3] := AVG (a:UNION (IA (v),OA (v)),a [2]) % expensive destination v <ref> [4] </ref> := AVG (f:VF,hypot (f (0) - v (0),f (1) - v (1))) % average trip distance v [5] := AVG (f:VF,SP (P0,v,f)) % average trip duration v [6] := AVG (f:VF,SP (P1,v,f)) % average trip cost v [7] := AVG (f:VF,SP (P2,v,f)) % average trip legs v [8] := (NPATHS <p> 3:BrowseTS % browse logical time stamp ) Link (Id,SourceDocument,TargetDocument, 0:AddTS, % add logical time stamp 1:BrowseTS % browse logical time stamp ) We have defined the following view that is maintained dynamically as documents and links are inserted into the database during a Web browsing session: 68 v:V - v <ref> [4] </ref> := CNT (IA (v)) % document in-degree v [5] := CNT (OA (v)) % document out-degree v [6] := AVG (f:VF,-1 * abs (v [4]-f [4]) / mag (f)) % document add neighbourhood v [7] := AVG (f:VF,-1 * abs (v [5]-f [5]) / mag (f)) % document browse neighbourhood <p> following view that is maintained dynamically as documents and links are inserted into the database during a Web browsing session: 68 v:V - v <ref> [4] </ref> := CNT (IA (v)) % document in-degree v [5] := CNT (OA (v)) % document out-degree v [6] := AVG (f:VF,-1 * abs (v [4]-f [4]) / mag (f)) % document add neighbourhood v [7] := AVG (f:VF,-1 * abs (v [5]-f [5]) / mag (f)) % document browse neighbourhood v [8] := REGEXP () % document regular expression match - a:A a [2] := REGEXP () % link regular expression match The node browse time <p> v:V - v [9] := (v [7] &gt; 0 ? 1 : 0) + % Positions: a bitmask of avail. pos. data (v [8] &gt; 0 ? 2 : 0) v [10] := v [6] / v [0] % Purity: ratio of probes on common chrom v [11] := v <ref> [4] </ref> != 0 ? v [0] / v [4] : 0 % Evidence: avg no of probes per chrom v [12] := v [1] / v [0] % Coverage: percentage of assigned probes v [13] := CNT (UNION (IA (v),OA (v))) % Degree: vertex degree v [14] := USERSIM (-0-4,5:o,6-13-) % <p> 0 ? 1 : 0) + % Positions: a bitmask of avail. pos. data (v [8] &gt; 0 ? 2 : 0) v [10] := v [6] / v [0] % Purity: ratio of probes on common chrom v [11] := v <ref> [4] </ref> != 0 ? v [0] / v [4] : 0 % Evidence: avg no of probes per chrom v [12] := v [1] / v [0] % Coverage: percentage of assigned probes v [13] := CNT (UNION (IA (v),OA (v))) % Degree: vertex degree v [14] := USERSIM (-0-4,5:o,6-13-) % user-configurable similarity v [15] := NPATHS (P) &gt; <p> - v [1] := CNT (TC (v,reverse,I)) - 1 % Depth in nesting hierarchy v [2] := AVG (f:VF,SP (P,v,f)) % Distance in nesting hierarchy v [3] := CNT (VF) &gt; 0 ? -1 * (v [1] + v [2]) : 0 % Similarity based on depth and distance v <ref> [4] </ref> := MIN (f:VF,((SP (P,v,f)+1) / mag (f)) * -1) - % Similarity based on distance only 89 The above view defines two similarity attributes; the first is identical to the notion degree of importance in the generalized fisheye view [34] and the notion of priority in the Abridgment facility of <p> (TC (v,reverse,A)) - 1 % Depth in the hierarchy v [2] := CNT (CB (v)) = 0 ? 1 : 0 % unit value for each leaf node v [3] := SUM (u,TC (v,forward,I),u [2]) % sum of leaf values for internal node - v:SELECT (u:V,pb (u) != 0) v <ref> [4] </ref> := v [3] / pv (pb (v))[3] % ratio of child value to parent value v:SELECT (u:V,CNT (CB (u)) = 0) - v [5] := PROD (u:TC (v,reverse,I),u [1] % 2 = 0 ? u [4] : 1) * 500 v [6] := PROD (u:TC (v,reverse,I),u [1] % 2 = <p> sum of leaf values for internal node - v:SELECT (u:V,pb (u) != 0) v <ref> [4] </ref> := v [3] / pv (pb (v))[3] % ratio of child value to parent value v:SELECT (u:V,CNT (CB (u)) = 0) - v [5] := PROD (u:TC (v,reverse,I),u [1] % 2 = 0 ? u [4] : 1) * 500 v [6] := PROD (u:TC (v,reverse,I),u [1] % 2 = 0 ? u [4] : 1) * 500 - % final width and height of each leaf 95 To scale the leaf nodes to proper sizes we map vertex attributes 5 and 6 to absolute x <p> / pv (pb (v))[3] % ratio of child value to parent value v:SELECT (u:V,CNT (CB (u)) = 0) - v [5] := PROD (u:TC (v,reverse,I),u [1] % 2 = 0 ? u <ref> [4] </ref> : 1) * 500 v [6] := PROD (u:TC (v,reverse,I),u [1] % 2 = 0 ? u [4] : 1) * 500 - % final width and height of each leaf 95 To scale the leaf nodes to proper sizes we map vertex attributes 5 and 6 to absolute x and y sizes.
Reference: [5] <author> D. Bardon. </author> <title> Management of Color Usage in Dynamic Mapping Environments: Balancing Semantics, Visual Ordering and Discernability. </title> <editor> In T. Catarci, M.F. Costabile, and S. Levialdi, editors, </editor> <booktitle> Proc. of Advanced Visual Interfaces 1992, volume 36 of Series in Computer Science, </booktitle> <pages> pages 50-67. </pages> <publisher> World Scientific, </publisher> <year> 1992. </year>
Reference-contexts: In designing DM systems, it can be important to incorporate a variety of results relating to human perceptual abilities, such as those reported by Cleveland [13] and Tufte [111]. Several approaches for using colour and colour containers in DM environments are proposed by Bardon <ref> [5] </ref>. Csinger [17] provides a nice overview of the psychology of visualization. <p> The second limitation of existing approaches is evidenced by the nearly empty adorned emphasis technique column. Non-geometric graphic properties such as (colour) hue and saturation can be very effective for creating emphasis in a visualization, as shown in <ref> [5, 111] </ref>, for example. The table only tells part of the story, as only 2 of the 3 techniques that generate adorned views have dynamic mapping capability. The remaining techniques were primarily filtering-distorting hybrids. <p> presented in the previous subsection: 54 P := APSP (A,V,undirected,0,1) myF := SELECT (f:VF,f [0] &gt; 0) v:V - v [0] := CNT (a:UNION (IA (v),OA (v))) v [1] := AVG (a:UNION (IA (v),OA (v)),a [2]) v [2] := v [0] + v [1]; v [4] := NPATHS (P) v <ref> [5] </ref> := REGEXP () v [6] := USERSIM (-0,1-) v [7] := v [3] - v [4] a:A - a [3] := NPATHS (P) - This view definition gives rise to the dependency graph shown in Figure 4.9. Several features of the dependency graph require elaboration. <p> := APSP (V,A,undirected,0,1) % most-direct routes v:V - v [2] := CNT (UNION (IA (v),OA (v))) % busy destination v [3] := AVG (a:UNION (IA (v),OA (v)),a [2]) % expensive destination v [4] := AVG (f:VF,hypot (f (0) - v (0),f (1) - v (1))) % average trip distance v <ref> [5] </ref> := AVG (f:VF,SP (P0,v,f)) % average trip duration v [6] := AVG (f:VF,SP (P1,v,f)) % average trip cost v [7] := AVG (f:VF,SP (P2,v,f)) % average trip legs v [8] := (NPATHS (P0) &gt; 0 ? 1 : 0) + % trip cities mask (NPATHS (P1) &gt; 0 ? 2 <p> 0:AddTS, % add logical time stamp 1:BrowseTS % browse logical time stamp ) We have defined the following view that is maintained dynamically as documents and links are inserted into the database during a Web browsing session: 68 v:V - v [4] := CNT (IA (v)) % document in-degree v <ref> [5] </ref> := CNT (OA (v)) % document out-degree v [6] := AVG (f:VF,-1 * abs (v [4]-f [4]) / mag (f)) % document add neighbourhood v [7] := AVG (f:VF,-1 * abs (v [5]-f [5]) / mag (f)) % document browse neighbourhood v [8] := REGEXP () % document regular expression <p> Web browsing session: 68 v:V - v [4] := CNT (IA (v)) % document in-degree v <ref> [5] </ref> := CNT (OA (v)) % document out-degree v [6] := AVG (f:VF,-1 * abs (v [4]-f [4]) / mag (f)) % document add neighbourhood v [7] := AVG (f:VF,-1 * abs (v [5]-f [5]) / mag (f)) % document browse neighbourhood v [8] := REGEXP () % document regular expression match - a:A a [2] := REGEXP () % link regular expression match The node browse time stamp attribute has been mapped onto node colour hue and saturation graphical properties and the link browse <p> contains one relation: City: 79 City (Id,Name, 0:State, % state number in [0,54] 1:Longitude, % no. degrees longitude 2:Latitude, % no. degrees latitude 3:Elevation, % in feet above sea level 4:Population % in thousands, based on 1980 census ) We have created the following view on the database: v:V v <ref> [5] </ref> := USERSIM (-0:o,1-4-) % user-defined similarity relative x, Latitude is bound to relative y, Elevation is bound to relative z (stacking order) and color saturation, and Population is bound to relative size. ((dx 2 + dy 2 ) 2 ), and then use this attribute to mask cities that are <p> for each leaf node v [3] := SUM (u,TC (v,forward,I),u [2]) % sum of leaf values for internal node - v:SELECT (u:V,pb (u) != 0) v [4] := v [3] / pv (pb (v))[3] % ratio of child value to parent value v:SELECT (u:V,CNT (CB (u)) = 0) - v <ref> [5] </ref> := PROD (u:TC (v,reverse,I),u [1] % 2 = 0 ? u [4] : 1) * 500 v [6] := PROD (u:TC (v,reverse,I),u [1] % 2 = 0 ? u [4] : 1) * 500 - % final width and height of each leaf 95 To scale the leaf nodes to <p> However, the state of affairs is gradually improving. Work in data characterization (e.g., [67, 70, 90, 91]) now provides a better understanding of the role and importance of data classifications in generating meaningful and effective visualizations. Work in the psychophysics of visualization (e.g., <ref> [5, 13, 17, 111] </ref>) is gradually creating a set of principles that user interface designers (and adaptive user interfaces) can use to produce more effective visualizations.
Reference: [6] <author> L. Bartram, R. Ovans, J. Dill, M. Dyck, A. Ho, </author> <title> and W.S. Havens. Contextual Assistance in User Interfaces to Complex, Time-Critical Systems: </title> <booktitle> The Intelligent Zoom. In GI '94: Graphics Interface 1994, </booktitle> <address> Banff, AL, Canada, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: The generic measure of proximity is an approximation to a weighted nesting distance to the FPs. Both W t and P rox take into account the magnification strengths of the individual FPs. Continuous Zoom This EA generates hybrid filtering fisheye and globally scaled views <ref> [6] </ref>, which permit users to view and navigate hierarchically nested graphs by smoothly expanding and shrinking nodes. <p> FEVs [78, 79] 08/93 Continuous Zoom <ref> [6] </ref> 05/94 CATGraph [60] 11/94 Table 3.3: A comparison of existing fisheye view techniques. 4. <p> The following declaration, states that vertex attribute 6 is a user-defined similarity attribute which can be defined in terms of the quantitative attributes 0 through 4 and the ordinal attribute 5. v:V v <ref> [6] </ref> := USERSIM (-0-4,5:o-) Declarative Layout In the Graphite realization of Dye, each blob container has an internal layout field that can be manipulated to control how the nodes directly contained in the blob should be drawn. <p> 54 P := APSP (A,V,undirected,0,1) myF := SELECT (f:VF,f [0] &gt; 0) v:V - v [0] := CNT (a:UNION (IA (v),OA (v))) v [1] := AVG (a:UNION (IA (v),OA (v)),a [2]) v [2] := v [0] + v [1]; v [4] := NPATHS (P) v [5] := REGEXP () v <ref> [6] </ref> := USERSIM (-0,1-) v [7] := v [3] - v [4] a:A - a [3] := NPATHS (P) - This view definition gives rise to the dependency graph shown in Figure 4.9. Several features of the dependency graph require elaboration. <p> := CNT (UNION (IA (v),OA (v))) % busy destination v [3] := AVG (a:UNION (IA (v),OA (v)),a [2]) % expensive destination v [4] := AVG (f:VF,hypot (f (0) - v (0),f (1) - v (1))) % average trip distance v [5] := AVG (f:VF,SP (P0,v,f)) % average trip duration v <ref> [6] </ref> := AVG (f:VF,SP (P1,v,f)) % average trip cost v [7] := AVG (f:VF,SP (P2,v,f)) % average trip legs v [8] := (NPATHS (P0) &gt; 0 ? 1 : 0) + % trip cities mask (NPATHS (P1) &gt; 0 ? 2 : 0) + (NPATHS (P2) &gt; 0 ? 4 : <p> logical time stamp ) We have defined the following view that is maintained dynamically as documents and links are inserted into the database during a Web browsing session: 68 v:V - v [4] := CNT (IA (v)) % document in-degree v [5] := CNT (OA (v)) % document out-degree v <ref> [6] </ref> := AVG (f:VF,-1 * abs (v [4]-f [4]) / mag (f)) % document add neighbourhood v [7] := AVG (f:VF,-1 * abs (v [5]-f [5]) / mag (f)) % document browse neighbourhood v [8] := REGEXP () % document regular expression match - a:A a [2] := REGEXP () % <p> have defined the following view on the database: 76 P := APSP (V,A,undirected,0,1) % shortest paths v:V - v [9] := (v [7] &gt; 0 ? 1 : 0) + % Positions: a bitmask of avail. pos. data (v [8] &gt; 0 ? 2 : 0) v [10] := v <ref> [6] </ref> / v [0] % Purity: ratio of probes on common chrom v [11] := v [4] != 0 ? v [0] / v [4] : 0 % Evidence: avg no of probes per chrom v [12] := v [1] / v [0] % Coverage: percentage of assigned probes v [13] <p> The former are then mapped onto relative x and y position and the latter onto relative x and y size. Figure 5.24 shows the resulting CATGraph with focal points Cincinnati and Laredo. 81 82 v:V - v <ref> [6] </ref> := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [1] - f [1]))) : v [1] v [7] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [2] - f [2]))) : v [2] v [8] := AVG (f:VF,abs (v <p> := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [1] - f [1]))) : v [1] v [7] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [2] - f [2]))) : v [2] v [8] := AVG (f:VF,abs (v <ref> [6] </ref> - f [6]) * -1) - 84 Graphical fisheye views can be generated in exactly the same manner as CATGraphs, except that the formula for the distorted coordinates becomes considerably more complicated; the formula for the x position is shown below (the formula for y is the same with the <p> &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [1] - f [1]))) : v [1] v [7] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [2] - f [2]))) : v [2] v [8] := AVG (f:VF,abs (v <ref> [6] </ref> - f [6]) * -1) - 84 Graphical fisheye views can be generated in exactly the same manner as CATGraphs, except that the formula for the distorted coordinates becomes considerably more complicated; the formula for the x position is shown below (the formula for y is the same with the obvious substitutions). <p> Figure 5.25 shows a graphical fisheye view with focal point Dallas. 85 v:V v <ref> [6] </ref> := (mag (f) + 1) * dnorm * dmax / (mag (f) * dnorm * dmax) + f [1] where: dnorm is v [1] - f [1] and dmax is v [1] &gt;= f [1] ? MAX (u:V,u [1]) - f [1] : MIN (u:V,u [1]) - f [1] 5.5 <p> node - v:SELECT (u:V,pb (u) != 0) v [4] := v [3] / pv (pb (v))[3] % ratio of child value to parent value v:SELECT (u:V,CNT (CB (u)) = 0) - v [5] := PROD (u:TC (v,reverse,I),u [1] % 2 = 0 ? u [4] : 1) * 500 v <ref> [6] </ref> := PROD (u:TC (v,reverse,I),u [1] % 2 = 0 ? u [4] : 1) * 500 - % final width and height of each leaf 95 To scale the leaf nodes to proper sizes we map vertex attributes 5 and 6 to absolute x and y sizes.
Reference: [7] <editor> R.A. Becker and W.S. Cleveland. Brushing Scatterplots. Technometrics, </editor> <volume> 29(2) </volume> <pages> 127-142, </pages> <year> 1987. </year>
Reference-contexts: As proof of concept, we have implemented an extensive data visualization system (Graphite) that combines DQ, DM, flexible automatic graph layout, and an active database view component that implements Dye. Graphite depicts multidimensional data using several common techniques, including plots <ref> [7, 14] </ref> (that show relationships among data dimensions), node-and-link diagrams or graphs [22, 44] (that show relationships among individual data points), and nested graphs or hygraphs [16] (that show hierarchical relationships among points by visual containment). <p> The elements associated with a given histogram bar are said to be selected by the bar. Frequency distribution histograms support a number of brushing operations: <ref> [7] </ref> * highlighting: points contained in the brush are coloured differently from other points to make them stand out; * masking: points contained in the brush are not displayed; * linking: a special type of highlighting operation in which points that are highlighted in one display can be automatically highlighted in <p> The selected object's label is displayed in full on the graph, and its type and identifier are displayed in a message box. In this example node image was selected. 2.3 Dynamic Mapping In mapping, data attributes are mapped onto graphic properties <ref> [2, 7, 8, 14, 48, 84] </ref>. For example, the temperature of a data point is often mapped onto colour using a heat scale, the rate or volume of flow through a network is often depicted by link thickness, and the population of a city is often conveyed by node size. <p> For this reason, masking is often called dynamic filtering or interactive filtering. Also, note that a dynamic query which combines the effects of multiple components can be thought of as an n-ary brush <ref> [7] </ref>: if each component is a single brush, an n-ary brush is typically obtained by intersecting the individual brushes. <p> myF := SELECT (f:VF,f [0] &gt; 0) v:V - v [0] := CNT (a:UNION (IA (v),OA (v))) v [1] := AVG (a:UNION (IA (v),OA (v)),a [2]) v [2] := v [0] + v [1]; v [4] := NPATHS (P) v [5] := REGEXP () v [6] := USERSIM (-0,1-) v <ref> [7] </ref> := v [3] - v [4] a:A - a [3] := NPATHS (P) - This view definition gives rise to the dependency graph shown in Figure 4.9. Several features of the dependency graph require elaboration. <p> [3] := AVG (a:UNION (IA (v),OA (v)),a [2]) % expensive destination v [4] := AVG (f:VF,hypot (f (0) - v (0),f (1) - v (1))) % average trip distance v [5] := AVG (f:VF,SP (P0,v,f)) % average trip duration v [6] := AVG (f:VF,SP (P1,v,f)) % average trip cost v <ref> [7] </ref> := AVG (f:VF,SP (P2,v,f)) % average trip legs v [8] := (NPATHS (P0) &gt; 0 ? 1 : 0) + % trip cities mask (NPATHS (P1) &gt; 0 ? 2 : 0) + (NPATHS (P2) &gt; 0 ? 4 : 0) - a [2] := a [0] / a [1] <p> links are inserted into the database during a Web browsing session: 68 v:V - v [4] := CNT (IA (v)) % document in-degree v [5] := CNT (OA (v)) % document out-degree v [6] := AVG (f:VF,-1 * abs (v [4]-f [4]) / mag (f)) % document add neighbourhood v <ref> [7] </ref> := AVG (f:VF,-1 * abs (v [5]-f [5]) / mag (f)) % document browse neighbourhood v [8] := REGEXP () % document regular expression match - a:A a [2] := REGEXP () % link regular expression match The node browse time stamp attribute has been mapped onto node colour hue <p> % genetic mapping position ) The base arc relation in the genome map database is Connection: Connection (Id,Label,FromCluster,ToCluster, 0:NoYACs % number of YACs between two clusters ) We have defined the following view on the database: 76 P := APSP (V,A,undirected,0,1) % shortest paths v:V - v [9] := (v <ref> [7] </ref> &gt; 0 ? 1 : 0) + % Positions: a bitmask of avail. pos. data (v [8] &gt; 0 ? 2 : 0) v [10] := v [6] / v [0] % Purity: ratio of probes on common chrom v [11] := v [4] != 0 ? v [0] / <p> Figure 5.24 shows the resulting CATGraph with focal points Cincinnati and Laredo. 81 82 v:V - v [6] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [1] - f [1]))) : v [1] v <ref> [7] </ref> := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [2] - f [2]))) : v [2] v [8] := AVG (f:VF,abs (v [6] - f [6]) * -1) - 84 Graphical fisheye views can be generated in exactly the same manner as CATGraphs, except that <p> It was the realization that no hammer is good for all jobs that lead researchers to seek sufficiently simple yet useful tools that could be added to the growing toolbox of visualization techniques. Examples of such include brushing <ref> [7] </ref>, see-through tools [9, 106], selective dynamic manipulation [11, 12], and of course, dynamic mapping and dynamic queries. We too were motivated by this simpler is better philosophy, as evidenced in the product of this work.
Reference: [8] <author> R.A. Becker, S.G. Eick, E.O. Miller, and A.R. Wilks. </author> <title> Dynamic Graphics for Network Visualization. </title> <booktitle> In Proc of IEEE Visualization Conf., </booktitle> <year> 1990. </year>
Reference-contexts: User experiments have shown DQ to be superior to traditional query approaches for many searching tasks [3, 64, 66, 104, 121]. DQ and DM are complementary techniques and have been successfully integrated in a number of recent visualization (hereafter DQM) systems (e.g., <ref> [2, 3, 8, 11, 12, 26, 27] </ref>). However, both techniques share a common limitation: their effectiveness is inseparably tied to the availability of suitable multidimensional data (to query and map). <p> airline flights database visualization is shown in Figure 5.1 on page 66. 2.2 Dynamic Queries Since our specification of dynamic FEVs relies primarily on the use of quantitative attributes, the primary DQ component in Graphite is the frequency distribution histogram, which we've used in a similar manner to that in <ref> [8, 26, 27] </ref>. Each histogram represents the distribution of a single numeric attribute. The range of the attribute is divided into some (user-configurable) number of equal subranges. <p> The selected object's label is displayed in full on the graph, and its type and identifier are displayed in a message box. In this example node image was selected. 2.3 Dynamic Mapping In mapping, data attributes are mapped onto graphic properties <ref> [2, 7, 8, 14, 48, 84] </ref>. For example, the temperature of a data point is often mapped onto colour using a heat scale, the rate or volume of flow through a network is often depicted by link thickness, and the population of a city is often conveyed by node size. <p> and to propose a user interface technique that permits users to define a limited class of views. 3.1.3 Graph-oriented Systems Dynamic Graphics for Network Visualization This is one of the earliest papers that discussed the use of direct manipulation techniques including dynamic mapping and filtering for visualizing network (graph) data <ref> [8] </ref>. The dynamic mapping strategies mentioned include: symbol type, size (both uniform and non-uniform), and colour for nodes, and thickness, direction (wedge-shaped line segments), proportional length (don't draw line segments all the way to each node), and colour for links. <p> Both systems permit users to filter data by interacting with frequency distribution histograms linked to data attributes, and to dynamically map data attributes onto graphic properties such as node and link colour, node size (width and height could be controlled independently), and link thickness. As in <ref> [8] </ref> node attributes could be aggregations over incident links, but here too, such attributes apparently are precomputed. Webviz Webviz is a tool for visualizing and analyzing World-Wide Web access logs [84]. Webviz provides very rudimentary query capability, namely the capability to mask nodes by regular expression matching. <p> between flat data sets consisting of independent data points (in which there are no relationships between data points), and non-flat data sets in which data points are related, as in hierarchical data sets. 21 System Year Mapping Views Inputs None Static Dynamic None Predefined User-defined Flat Hierarchical Graph Network Visualization <ref> [8] </ref> 90 p p p Homefinder [121] 92 p p p Periodic Table of Elements [3] 92 p p p ASTER/COLOR/EXPAND [66] 92 p p p Health Statistics [85] 93 p p p HierNet [27] 93 p p p Seenet, NicheWorks [26] 93 p p p Filter/flow proposal [104, 105] 93 <p> Several instances of predefined views have appeared in the literature <ref> [8, 64, 65] </ref>. Generally, it is assumed that attribute values in a predefined view are precomputed an assumption that tends to simplify the task (and hence the architecture) of the visualization system. In particular, the visualization system does not have to evaluate or maintain views. <p> The PLUM system [88], for example, permitted a predefined priority attribute to be mapped onto any presentation property. Although some network visualization systems <ref> [8, 26] </ref> permitted data attributes to be mapped onto presentation properties, they did not possess the notion of focal points or similarity. this visualization, the Trip Duration similarity attribute is mapped onto the percentage fill node property, causing nodes that are temporally far from the selected focal points to appear filled <p> destination v [4] := AVG (f:VF,hypot (f (0) - v (0),f (1) - v (1))) % average trip distance v [5] := AVG (f:VF,SP (P0,v,f)) % average trip duration v [6] := AVG (f:VF,SP (P1,v,f)) % average trip cost v [7] := AVG (f:VF,SP (P2,v,f)) % average trip legs v <ref> [8] </ref> := (NPATHS (P0) &gt; 0 ? 1 : 0) + % trip cities mask (NPATHS (P1) &gt; 0 ? 2 : 0) + (NPATHS (P2) &gt; 0 ? 4 : 0) - a [2] := a [0] / a [1] % price/time ratio a [3] := (NPATHS (P0) &gt; 0 <p> - a [2] := a [0] / a [1] % price/time ratio a [3] := (NPATHS (P0) &gt; 0 ? 1 : 0) + % trip flights mask (NPATHS (P1) &gt; 0 ? 2 : 0) + (NPATHS (P2) &gt; 0 ? 4 : 0) - Notice that the v <ref> [8] </ref> and a [3] attributes are 3 bit masks that permit the user to select cities or flights that partake in any combination of currently selected fastest, cheapest, or most direct routes. Reykjavik and Bergen are path sinks. <p> CNT (IA (v)) % document in-degree v [5] := CNT (OA (v)) % document out-degree v [6] := AVG (f:VF,-1 * abs (v [4]-f [4]) / mag (f)) % document add neighbourhood v [7] := AVG (f:VF,-1 * abs (v [5]-f [5]) / mag (f)) % document browse neighbourhood v <ref> [8] </ref> := REGEXP () % document regular expression match - a:A a [2] := REGEXP () % link regular expression match The node browse time stamp attribute has been mapped onto node colour hue and saturation graphical properties and the link browse time stamp has been mapped onto link width and <p> (Id,Label,FromCluster,ToCluster, 0:NoYACs % number of YACs between two clusters ) We have defined the following view on the database: 76 P := APSP (V,A,undirected,0,1) % shortest paths v:V - v [9] := (v [7] &gt; 0 ? 1 : 0) + % Positions: a bitmask of avail. pos. data (v <ref> [8] </ref> &gt; 0 ? 2 : 0) v [10] := v [6] / v [0] % Purity: ratio of probes on common chrom v [11] := v [4] != 0 ? v [0] / v [4] : 0 % Evidence: avg no of probes per chrom v [12] := v [1] <p> 82 v:V - v [6] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [1] - f [1]))) : v [1] v [7] := CNT (VF) &gt; 0 ? AVG (f:VF,atan (0.5 / mag (f) * (v [2] - f [2]))) : v [2] v <ref> [8] </ref> := AVG (f:VF,abs (v [6] - f [6]) * -1) - 84 Graphical fisheye views can be generated in exactly the same manner as CATGraphs, except that the formula for the distorted coordinates becomes considerably more complicated; the formula for the x position is shown below (the formula for y
Reference: [9] <author> E.A. Bier, M.C. Stone, K. Fishkin, W. Buxton, and T. Baudel. </author> <title> A Taxonomy of See-Through Tools. </title> <booktitle> In Proc. ACM CHI '94, </booktitle> <pages> pages 358-364, </pages> <address> Boston, MA, </address> <month> April </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: hybrid position 8:GeneticPos % genetic mapping position ) The base arc relation in the genome map database is Connection: Connection (Id,Label,FromCluster,ToCluster, 0:NoYACs % number of YACs between two clusters ) We have defined the following view on the database: 76 P := APSP (V,A,undirected,0,1) % shortest paths v:V - v <ref> [9] </ref> := (v [7] &gt; 0 ? 1 : 0) + % Positions: a bitmask of avail. pos. data (v [8] &gt; 0 ? 2 : 0) v [10] := v [6] / v [0] % Purity: ratio of probes on common chrom v [11] := v [4] != 0 ? <p> It was the realization that no hammer is good for all jobs that lead researchers to seek sufficiently simple yet useful tools that could be added to the growing toolbox of visualization techniques. Examples of such include brushing [7], see-through tools <ref> [9, 106] </ref>, selective dynamic manipulation [11, 12], and of course, dynamic mapping and dynamic queries. We too were motivated by this simpler is better philosophy, as evidenced in the product of this work.
Reference: [10] <author> S. Ceri and J. Widom. </author> <title> Deriving Production Rules for Incremental View Maintenance. </title> <booktitle> In Proc. of the 17th VLDB Conf., </booktitle> <pages> pages 577-589, </pages> <address> Barcelona, Spain, </address> <year> 1991. </year>
Reference-contexts: Production rules derived from an analysis of the view definition can be used to determine changes to views [119, 120]. As recomputing views can be expensive, several incremental methods for view maintenance have been proposed <ref> [10, 41, 116] </ref>. <p> A more recent version of this approach is to generate production rules from view specifications [119, 120]; production rules are typically implemented as Event-Condition-Action rules [71]. Related incremental view maintenance techniques are also described in <ref> [10, 41, 116] </ref>. 49 4.5.1 Materializing Views from Scratch In order to generate a program to materialize a view from scratch, we begin by creating a view parse graph from the declarative view specification. <p> clusters ) We have defined the following view on the database: 76 P := APSP (V,A,undirected,0,1) % shortest paths v:V - v [9] := (v [7] &gt; 0 ? 1 : 0) + % Positions: a bitmask of avail. pos. data (v [8] &gt; 0 ? 2 : 0) v <ref> [10] </ref> := v [6] / v [0] % Purity: ratio of probes on common chrom v [11] := v [4] != 0 ? v [0] / v [4] : 0 % Evidence: avg no of probes per chrom v [12] := v [1] / v [0] % Coverage: percentage of assigned
Reference: [11] <author> M.C. Chuah and S.F. Roth. </author> <title> SDM: </title> <booktitle> Malleable Information Graphics. In Proc. of InfoViz '95, </booktitle> <year> 1995. </year>
Reference-contexts: User experiments have shown DQ to be superior to traditional query approaches for many searching tasks [3, 64, 66, 104, 121]. DQ and DM are complementary techniques and have been successfully integrated in a number of recent visualization (hereafter DQM) systems (e.g., <ref> [2, 3, 8, 11, 12, 26, 27] </ref>). However, both techniques share a common limitation: their effectiveness is inseparably tied to the availability of suitable multidimensional data (to query and map). <p> Note that our Graphite system already supports both of the above styles. Selective Dynamic Manipulation Selective dynamic manipulation (SDM) is a set of interactive techniques for 2-D and 3-D visualizations <ref> [11, 12] </ref>. Selective is meant to convey user control in selecting sets of objects, dynamic indicates real-time interactivity, and manipulation suggests that users can move objects and transform their appearance. <p> p p HierNet [27] 93 p p p Seenet, NicheWorks [26] 93 p p p Filter/flow proposal [104, 105] 93 p p p Filmfinder [2] 94 p p p Aggregate Manipulator [38] 94 p p p Webviz [84] 94 p p p Network Configuration [65] 94 p p p SDM <ref> [11, 12] </ref> 95 p p p PDQ Tree Browser [64] 95 p p p Table 3.2: Summary of existing Dynamic Query system features. 3.1.4 Limitations As evidenced by Table 3.2, the main limitation found in existing DQ systems is the lack of integrated flexible view definition facilities. <p> % shortest paths v:V - v [9] := (v [7] &gt; 0 ? 1 : 0) + % Positions: a bitmask of avail. pos. data (v [8] &gt; 0 ? 2 : 0) v [10] := v [6] / v [0] % Purity: ratio of probes on common chrom v <ref> [11] </ref> := v [4] != 0 ? v [0] / v [4] : 0 % Evidence: avg no of probes per chrom v [12] := v [1] / v [0] % Coverage: percentage of assigned probes v [13] := CNT (UNION (IA (v),OA (v))) % Degree: vertex degree v [14] := <p> It was the realization that no hammer is good for all jobs that lead researchers to seek sufficiently simple yet useful tools that could be added to the growing toolbox of visualization techniques. Examples of such include brushing [7], see-through tools [9, 106], selective dynamic manipulation <ref> [11, 12] </ref>, and of course, dynamic mapping and dynamic queries. We too were motivated by this simpler is better philosophy, as evidenced in the product of this work.
Reference: [12] <author> M.C. Chuah and S.F. Roth. </author> <title> SDM: Selective Dynamic Manipulation of Visualizations. </title> <booktitle> In Proc. of UIST '95, </booktitle> <year> 1995. </year>
Reference-contexts: User experiments have shown DQ to be superior to traditional query approaches for many searching tasks [3, 64, 66, 104, 121]. DQ and DM are complementary techniques and have been successfully integrated in a number of recent visualization (hereafter DQM) systems (e.g., <ref> [2, 3, 8, 11, 12, 26, 27] </ref>). However, both techniques share a common limitation: their effectiveness is inseparably tied to the availability of suitable multidimensional data (to query and map). <p> Note that our Graphite system already supports both of the above styles. Selective Dynamic Manipulation Selective dynamic manipulation (SDM) is a set of interactive techniques for 2-D and 3-D visualizations <ref> [11, 12] </ref>. Selective is meant to convey user control in selecting sets of objects, dynamic indicates real-time interactivity, and manipulation suggests that users can move objects and transform their appearance. <p> p p HierNet [27] 93 p p p Seenet, NicheWorks [26] 93 p p p Filter/flow proposal [104, 105] 93 p p p Filmfinder [2] 94 p p p Aggregate Manipulator [38] 94 p p p Webviz [84] 94 p p p Network Configuration [65] 94 p p p SDM <ref> [11, 12] </ref> 95 p p p PDQ Tree Browser [64] 95 p p p Table 3.2: Summary of existing Dynamic Query system features. 3.1.4 Limitations As evidenced by Table 3.2, the main limitation found in existing DQ systems is the lack of integrated flexible view definition facilities. <p> pos. data (v [8] &gt; 0 ? 2 : 0) v [10] := v [6] / v [0] % Purity: ratio of probes on common chrom v [11] := v [4] != 0 ? v [0] / v [4] : 0 % Evidence: avg no of probes per chrom v <ref> [12] </ref> := v [1] / v [0] % Coverage: percentage of assigned probes v [13] := CNT (UNION (IA (v),OA (v))) % Degree: vertex degree v [14] := USERSIM (-0-4,5:o,6-13-) % user-configurable similarity v [15] := NPATHS (P) &gt; 0 % PathNodes: nodes on shortest paths a:A a [1] := NPATHS <p> It was the realization that no hammer is good for all jobs that lead researchers to seek sufficiently simple yet useful tools that could be added to the growing toolbox of visualization techniques. Examples of such include brushing [7], see-through tools [9, 106], selective dynamic manipulation <ref> [11, 12] </ref>, and of course, dynamic mapping and dynamic queries. We too were motivated by this simpler is better philosophy, as evidenced in the product of this work.
Reference: [13] <author> W.S. Cleveland. </author> <title> The Elements of Graphing Data. </title> <publisher> Wadsworth Inc., </publisher> <address> Belmont, California, </address> <year> 1985. </year>
Reference-contexts: Dynamic mapping refers to the ability to assign and modify mappings at run-time rather than fixing mappings a priori. In designing DM systems, it can be important to incorporate a variety of results relating to human perceptual abilities, such as those reported by Cleveland <ref> [13] </ref> and Tufte [111]. Several approaches for using colour and colour containers in DM environments are proposed by Bardon [5]. Csinger [17] provides a nice overview of the psychology of visualization. <p> [6] / v [0] % Purity: ratio of probes on common chrom v [11] := v [4] != 0 ? v [0] / v [4] : 0 % Evidence: avg no of probes per chrom v [12] := v [1] / v [0] % Coverage: percentage of assigned probes v <ref> [13] </ref> := CNT (UNION (IA (v),OA (v))) % Degree: vertex degree v [14] := USERSIM (-0-4,5:o,6-13-) % user-configurable similarity v [15] := NPATHS (P) &gt; 0 % PathNodes: nodes on shortest paths a:A a [1] := NPATHS (P) &gt; 0 % PathLinks: links on shortest paths Chromosome attribute has been mapped <p> However, the state of affairs is gradually improving. Work in data characterization (e.g., [67, 70, 90, 91]) now provides a better understanding of the role and importance of data classifications in generating meaningful and effective visualizations. Work in the psychophysics of visualization (e.g., <ref> [5, 13, 17, 111] </ref>) is gradually creating a set of principles that user interface designers (and adaptive user interfaces) can use to produce more effective visualizations.
Reference: [14] <author> W.S. Cleveland and M.E. McGill. </author> <title> Dynamic Graphics for Statistics. </title> <publisher> Wadsworth Inc., </publisher> <address> Belmont, California, </address> <year> 1988. </year>
Reference-contexts: As proof of concept, we have implemented an extensive data visualization system (Graphite) that combines DQ, DM, flexible automatic graph layout, and an active database view component that implements Dye. Graphite depicts multidimensional data using several common techniques, including plots <ref> [7, 14] </ref> (that show relationships among data dimensions), node-and-link diagrams or graphs [22, 44] (that show relationships among individual data points), and nested graphs or hygraphs [16] (that show hierarchical relationships among points by visual containment). <p> The selected object's label is displayed in full on the graph, and its type and identifier are displayed in a message box. In this example node image was selected. 2.3 Dynamic Mapping In mapping, data attributes are mapped onto graphic properties <ref> [2, 7, 8, 14, 48, 84] </ref>. For example, the temperature of a data point is often mapped onto colour using a heat scale, the rate or volume of flow through a network is often depicted by link thickness, and the population of a city is often conveyed by node size. <p> v [11] := v [4] != 0 ? v [0] / v [4] : 0 % Evidence: avg no of probes per chrom v [12] := v [1] / v [0] % Coverage: percentage of assigned probes v [13] := CNT (UNION (IA (v),OA (v))) % Degree: vertex degree v <ref> [14] </ref> := USERSIM (-0-4,5:o,6-13-) % user-configurable similarity v [15] := NPATHS (P) &gt; 0 % PathNodes: nodes on shortest paths a:A a [1] := NPATHS (P) &gt; 0 % PathLinks: links on shortest paths Chromosome attribute has been mapped onto the node color hue and saturation properties, and the NoProbes attribute
Reference: [15] <author> E.F. Codd. </author> <title> A Relational Model of Data for Large Shared Data Banks. </title> <journal> Communications of the ACM, </journal> <volume> 13(6) </volume> <pages> 377-387, </pages> <month> June </month> <year> 1970. </year>
Reference-contexts: on relation R is: R 0 R i where R i is the subset of relation R selected by query component i; since R i F i R R ( F 1 R) " ( F 2 R) " : : : " ( F n R) in relational algebra <ref> [15, 114] </ref> notation, or: SELECT R.* FROM R WHERE Condition1 AND Condition2 AND ... AND ConditionN in SQL notation [19]. The exact form of each F i depends on the type of DQ component associated with attribute i. <p> Dye is an abstract declarative language that can be implemented in many ways. Graphite, summarized in Chapter 2, is a visualization system that contains a database component (see Appendix A) that implements Dye views. 4.2 Background The relational database model <ref> [15] </ref> is based on the concept of the set-theoretic relation, which is the subset of the Cartesian product of a list of domains. <p> v [0] / v [4] : 0 % Evidence: avg no of probes per chrom v [12] := v [1] / v [0] % Coverage: percentage of assigned probes v [13] := CNT (UNION (IA (v),OA (v))) % Degree: vertex degree v [14] := USERSIM (-0-4,5:o,6-13-) % user-configurable similarity v <ref> [15] </ref> := NPATHS (P) &gt; 0 % PathNodes: nodes on shortest paths a:A a [1] := NPATHS (P) &gt; 0 % PathLinks: links on shortest paths Chromosome attribute has been mapped onto the node color hue and saturation properties, and the NoProbes attribute has been mapped on the node relative size
Reference: [16] <author> M.P. Consens, F. Ch. Eigler, M.Z. Hasan, A.O. Mendelzon, E.G. Noik, A.G. Ryman, and D. </author> <title> Vista. Architecture and Applications of the Hy+ Visualization System. </title> <journal> IBM Systems Journal, </journal> <volume> 33(3) </volume> <pages> 458-476, </pages> <month> August </month> <year> 1994. </year> <month> 107 </month>
Reference-contexts: Graphite depicts multidimensional data using several common techniques, including plots [7, 14] (that show relationships among data dimensions), node-and-link diagrams or graphs [22, 44] (that show relationships among individual data points), and nested graphs or hygraphs <ref> [16] </ref> (that show hierarchical relationships among points by visual containment). While explicit Dye view definitions make it possible to encode a broad class of similarity functions, Graphite also allows users to define a restricted class of similarity attributes interactively. <p> Appendix A contains a more detailed description of the Graphite implementation and Appendix B a collection of selected algorithms. 3 Chapter 2 A Tour of the Graphite Visualization System Graphite is a system that we created to manipulate, visualize, and query multi-dimensional graphs (node-and-link diagrams) and hygraphs <ref> [16] </ref>. It combines structural visualization, which aids in understanding the topological structure of the graphs, and quantitative visualization of highly-dimensional data, which aids in exploring statistical relationships, trends, and exceptions in data. <p> There are a number of nested graph formalisms (graphs in which vertices may be nested inside other vertices). A hygraph <ref> [16] </ref>, is a triple G = hV (G); A (G); B (G)i, where B (G) V (G) fi 2 V (G) is a set of blobs. A blob associates a (container) vertex with a set of vertices that it contains; we assume that the containment relation is hierarchical.
Reference: [17] <author> A. Csinger. </author> <title> The Psychology of Visualization. </title> <type> Technical Report TR-92-28, </type> <institution> Dept. of Comp. Sci., U. of British Columbia, </institution> <month> November </month> <year> 1992. </year> <note> Avail. at http://www.cs.ubc.ca/tr/1992/TR-92-28. </note>
Reference-contexts: In designing DM systems, it can be important to incorporate a variety of results relating to human perceptual abilities, such as those reported by Cleveland [13] and Tufte [111]. Several approaches for using colour and colour containers in DM environments are proposed by Bardon [5]. Csinger <ref> [17] </ref> provides a nice overview of the psychology of visualization. <p> However, the state of affairs is gradually improving. Work in data characterization (e.g., [67, 70, 90, 91]) now provides a better understanding of the role and importance of data classifications in generating meaningful and effective visualizations. Work in the psychophysics of visualization (e.g., <ref> [5, 13, 17, 111] </ref>) is gradually creating a set of principles that user interface designers (and adaptive user interfaces) can use to produce more effective visualizations.
Reference: [18] <author> S. Dar, R. Agrawal, and H.V. Jagadish. </author> <title> Optimization of Generalized Transitive Closure. </title> <booktitle> In 7th IEEE Intl. Conf. on Data Engineering, </booktitle> <address> Kobe, Japan, </address> <year> 1991. </year>
Reference-contexts: A related discussion of decomposable aggregate expressions appeared in <ref> [18] </ref>. Each attribute that is expressed in terms of an aggregate-free expression, is updated by simply evaluating the corresponding expression, while each attribute that is expressed in terms of a single aggregate term is updated by using an incremental form of the corresponding aggregate operation (see Section B.5).
Reference: [19] <author> C.J. Date and H. Darwen. </author> <title> A Guide to the SQL Standard. </title> <publisher> Addison-Wesley, </publisher> <address> 3 edition, </address> <year> 1993. </year>
Reference-contexts: This approach stands in stark contrast to traditional database query approaches that typically employ form-based interfaces or textual query languages like SQL <ref> [19] </ref>, and in which output is formatted as a tabular list of tuples containing alphanumeric fields. The DQ approach offers many advantages for both novice and expert users, including reduced learning curves, fewer errors, increased levels of understanding, and, not to be ignored, user satisfaction. <p> AND ConditionN in SQL notation <ref> [19] </ref>. The exact form of each F i depends on the type of DQ component associated with attribute i.
Reference: [20] <author> J. Dausset, P. Ougen, H. Abderrahim, A. Billault, J.L. Sambucy, D. Cohen, and D. Le Paslier. </author> <title> The CEPH YAC Library. </title> <journal> Behring Inst Mitt, </journal> <volume> 91 </volume> <pages> 13-20, </pages> <year> 1992. </year> <note> March 1995 release of YAC data avail. by anon. ftp from ceph-genethon-map.genethon.fr. </note>
Reference-contexts: The graph algorithms used to convert adjacency graphs into structure graphs outlined in [46] have been applied to data from the CEPH YAC library <ref> [20] </ref> and data from the Human Physical Mapping Project at the Whitehead Institute/MIT Genome Center [53].
Reference: [21] <author> U. Dayal and P. A. Bernstein. </author> <title> On the Correct Translation of Update Operations on Relational Views. </title> <journal> ACM Transactions on Data Base Systems, </journal> <volume> 8(3) </volume> <pages> 381-416, </pages> <year> 1982. </year>
Reference-contexts: A view update is an update operation specified through a view. Not all views can be updated the problem of how updates on views can be translated into appropriate updates on the underlying relations is discussed in <ref> [21, 61] </ref>. View updates in object-oriented models 38 can be simplified if operations are object-preserving [101], meaning that the results of queries are pointers to the input objects (rather than new objects or tuples), allowing updates to immediately propagate from views to base objects and vice versa.
Reference: [22] <author> G. Di Battista, P. Eades, R. Tamassia, and I. G. Tollis. </author> <title> Algorithms for drawing graphs: an annotated bibliography. </title> <journal> Comput. Geom. Theory Appl., </journal> <note> to appear. Preprint avail. by anon. ftp from ftp.cs.brown.edu:pub/papers/compgeo/. </note>
Reference-contexts: Graphite depicts multidimensional data using several common techniques, including plots [7, 14] (that show relationships among data dimensions), node-and-link diagrams or graphs <ref> [22, 44] </ref> (that show relationships among individual data points), and nested graphs or hygraphs [16] (that show hierarchical relationships among points by visual containment). <p> In hygraphs, if the blob containment relation is hierarchical, blobs are easily depicted by visual containment (e.g.,by nesting closed rectangular or polygonal regions). Graph layouts may be hand-drawn or may be generated automatically by a graph layout algorithm <ref> [22] </ref>. Multidimensional graphs are graphs that arise from multidimensional data data in which each data point 4 has multiple attributes (or dimensions). <p> any quickest route originating in Honolulu and arriving in Reykjavik or Bergen. 2.9 Automatic Layout Facility Graphite permits users to interactively select and apply a number of configurable layout algorithms as shown in on its own an extensive overview of the field can be found in an ever-evolving annotated bibliography <ref> [22] </ref>. The combination of masking with dynamic queries and parametric layout algorithms provides a form of composite layout capability.
Reference: [23] <author> P. Eades. </author> <title> A Heuristic for Graph Drawing. </title> <journal> Congressus Numerantium, </journal> <volume> 42 </volume> <pages> 149-160, </pages> <year> 1990. </year>
Reference: [24] <author> P. Eades, W. Lai, K. Misue, and K. Sugiyama. </author> <title> Preserving the mental map of a diagram. </title> <type> Technical Report IIAS-RR-91-16E, </type> <institution> Fujitsu Laboratories, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: A related publication <ref> [24] </ref> describes three properties that should be preserved when a drawing is transformed: 1. Orthogonal ordering: preserve the vertical and horizontal ordering of points (e.g., if p is north-east of q in the normal view then p 0 must be north-east of q 0 in the distorted view). 2.
Reference: [25] <author> P. Eades and K. Sugiyama. </author> <title> How to Draw a Directed Graph. </title> <journal> Journal of Information Processing, </journal> <volume> 13(4), </volume> <year> 1990. </year>
Reference: [26] <author> S.G. Eick. </author> <title> Data Visualization at AT&T Bell Laboratories. An AT&T internal summary report. Contact eick@research.att.com, </title> <month> September </month> <year> 1994. </year>
Reference-contexts: User experiments have shown DQ to be superior to traditional query approaches for many searching tasks [3, 64, 66, 104, 121]. DQ and DM are complementary techniques and have been successfully integrated in a number of recent visualization (hereafter DQM) systems (e.g., <ref> [2, 3, 8, 11, 12, 26, 27] </ref>). However, both techniques share a common limitation: their effectiveness is inseparably tied to the availability of suitable multidimensional data (to query and map). <p> airline flights database visualization is shown in Figure 5.1 on page 66. 2.2 Dynamic Queries Since our specification of dynamic FEVs relies primarily on the use of quantitative attributes, the primary DQ component in Graphite is the frequency distribution histogram, which we've used in a similar manner to that in <ref> [8, 26, 27] </ref>. Each histogram represents the distribution of a single numeric attribute. The range of the attribute is divided into some (user-configurable) number of equal subranges. <p> For this reason, such query components have also been called dynamic query filters [2]. The filtering effects of the components are typically combined using AND logic (set intersection). 15 Data Type Component Numeric single or double-ended sliders [2, 3, 38, 84, 121] frequency distribution histograms <ref> [26, 27] </ref> Alphanumeric scrolling lists [38] Alpha slider [1] regular expression matching [84] Nominal/Categorical checkboxes, buttons [3, 38] scrolling lists [38] Aggregate Aggregate Manipulator [38] Table 3.1: Some common dynamic query components. <p> Another interactive technique takes advantage of the hierarchical nature of the data by allowing users to interactively expand and collapse subtrees. Seenet and NicheWorks Recent work on data visualization at Bell Labs <ref> [26] </ref> included two systems for visualizing graphs: Seenet, a system for displaying geographic networks graphs in which node placement is derived from domain-data (i.e., geographic position); and, NicheWorks, a system for visualizing abstract networks graphs that arise from applications in which there is no predetermined natural way to position nodes. <p> Dynamic None Predefined User-defined Flat Hierarchical Graph Network Visualization [8] 90 p p p Homefinder [121] 92 p p p Periodic Table of Elements [3] 92 p p p ASTER/COLOR/EXPAND [66] 92 p p p Health Statistics [85] 93 p p p HierNet [27] 93 p p p Seenet, NicheWorks <ref> [26] </ref> 93 p p p Filter/flow proposal [104, 105] 93 p p p Filmfinder [2] 94 p p p Aggregate Manipulator [38] 94 p p p Webviz [84] 94 p p p Network Configuration [65] 94 p p p SDM [11, 12] 95 p p p PDQ Tree Browser [64] 95 <p> The PLUM system [88], for example, permitted a predefined priority attribute to be mapped onto any presentation property. Although some network visualization systems <ref> [8, 26] </ref> permitted data attributes to be mapped onto presentation properties, they did not possess the notion of focal points or similarity. this visualization, the Trip Duration similarity attribute is mapped onto the percentage fill node property, causing nodes that are temporally far from the selected focal points to appear filled
Reference: [27] <author> S.G. Eick and G.J. Wills. </author> <title> Navigating Large Networks with Hierarchies. </title> <booktitle> In Proc. of 1993 IEEE Visualization Conf., </booktitle> <pages> pages 204-210. </pages> <publisher> IEEE Computer Society, IEEE Computer Society Press, </publisher> <address> New York, NY, </address> <year> 1993. </year>
Reference-contexts: User experiments have shown DQ to be superior to traditional query approaches for many searching tasks [3, 64, 66, 104, 121]. DQ and DM are complementary techniques and have been successfully integrated in a number of recent visualization (hereafter DQM) systems (e.g., <ref> [2, 3, 8, 11, 12, 26, 27] </ref>). However, both techniques share a common limitation: their effectiveness is inseparably tied to the availability of suitable multidimensional data (to query and map). <p> airline flights database visualization is shown in Figure 5.1 on page 66. 2.2 Dynamic Queries Since our specification of dynamic FEVs relies primarily on the use of quantitative attributes, the primary DQ component in Graphite is the frequency distribution histogram, which we've used in a similar manner to that in <ref> [8, 26, 27] </ref>. Each histogram represents the distribution of a single numeric attribute. The range of the attribute is divided into some (user-configurable) number of equal subranges. <p> For this reason, such query components have also been called dynamic query filters [2]. The filtering effects of the components are typically combined using AND logic (set intersection). 15 Data Type Component Numeric single or double-ended sliders [2, 3, 38, 84, 121] frequency distribution histograms <ref> [26, 27] </ref> Alphanumeric scrolling lists [38] Alpha slider [1] regular expression matching [84] Nominal/Categorical checkboxes, buttons [3, 38] scrolling lists [38] Aggregate Aggregate Manipulator [38] Table 3.1: Some common dynamic query components. <p> As we have already stated, it is precisely this type of similarity query (find points that are similar to the selected point (s)) that our proposed approach makes possible in a dynamic query setting. HierNet HierNet is a tool for visualizing and analyzing large hierarchical networks <ref> [27] </ref>, and has been used to understand electronic mail interaction patterns (who talks with whom, who sends how much email), and module subsystem hierarchies arising in software engineering. <p> Note that in systems like HierNet <ref> [27] </ref> described above, dynamic mapping is user configurable to the extent that users can control the degree of transformation when mapping to certain graphical properties such as node size (by using a slider), and the shape of the transformation through histogram smoothing. <p> System Year Mapping Views Inputs None Static Dynamic None Predefined User-defined Flat Hierarchical Graph Network Visualization [8] 90 p p p Homefinder [121] 92 p p p Periodic Table of Elements [3] 92 p p p ASTER/COLOR/EXPAND [66] 92 p p p Health Statistics [85] 93 p p p HierNet <ref> [27] </ref> 93 p p p Seenet, NicheWorks [26] 93 p p p Filter/flow proposal [104, 105] 93 p p p Filmfinder [2] 94 p p p Aggregate Manipulator [38] 94 p p p Webviz [84] 94 p p p Network Configuration [65] 94 p p p SDM [11, 12] 95 p
Reference: [28] <author> Margaret A. Ellis and Bjarne Stroustrup. </author> <title> The Annotated C++ Reference Manual. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1990. </year>
Reference: [29] <author> R. Elmasri and S.B. Navathe. </author> <title> Fundamentals of Database Systems. </title> <publisher> Benjamin/Cummings Publishing Company Inc., </publisher> <address> Redwood City, CA, 2 edition, </address> <year> 1994. </year>
Reference-contexts: Aggregation. Operations such as count, average, sum, minimum, or maximum can be applied to columns of a relation to obtain a single quantity. Although there is no agreed-upon notation for aggregate operators in relational algebra, one proposal is F AgOp R i (R) <ref> [29] </ref>, where AgOp is one of the standard aggregate functions (minimum, maximum, count, sum, average), R is a relation, and R i is the attribute of R being aggregated over. A less common feature of relational query languages is the ability to compute the transitive closure of a relation.
Reference: [30] <author> K.M. Fairchild, S.E. Poltrock, and G.W. Furnas. SemNet: </author> <title> Three-Dimensional Graphic Representations of Large Knowledge Bases. </title> <editor> In R. Guindon, editor, </editor> <booktitle> Cognitive Science and its Applications for Human-Computer Interaction, </booktitle> <pages> pages 201-233. </pages> <publisher> Lawrence Erlbaum Associates, </publisher> <year> 1988. </year>
Reference-contexts: A normal view is a layout in which all elements have identical priorities, or, equivalently, a view with no FPs. An implicit FEV arises from the effect of point perspective in 3-D, by which nearby points loom large and distant points appear small; implicit FEVs are usually static (e.g., <ref> [30, 63, 89] </ref>), but may be dynamic if the 3-D layout is permitted to be altered (e.g., by moving higher priority nodes to the foreground [88]). There are at least three types of emphasized views (EVs). <p> An adorned view emphasizes elements by varying other visual presentation variables such as colour, shading, line style and thickness, as well as audio [57], and motion (e.g., in-betweening animation [88], vertical oscillations and small random movements <ref> [30] </ref>, vibration or pulsing [100]). Figure 3.1 shows a normal view of this taxonomy, while Figures 3.2, 3.3, and 3.4 show examples of other views of the same taxonomy. <p> An nth order FEV is obtained by only displaying points with DOI (v) (Dist (v; root) + 2 n). SemNet Three EAs for the 3-D networks of SemNet were proposed: clustering (filtering FEV), 3-D point perspective (static implicit FEV), and sampling density (filtering FEV) <ref> [30] </ref>. In clustering, recursive subdivision of the 3-D graph volume yielded an 8-ary tree with SemNet nodes partitioned among its leaves; tree distance (an approximation of Euclidean distance) was used in the DOI function. <p> Cone Trees Cone trees display hierarchical information by using 3-D graphics and interactive animation [89]. By limiting the domain of inputs to hierarchies, Cone Tree visualizations were not exposed to many of the problems that complicated the design of SemNet <ref> [30] </ref> and increased cognitive load. Cone tree visualizations support two types of FEVs: distortion from 3-D point perspective (static implicit FEV), and filtering through interactive gardening operations (filtered view). <p> Approach Date Emphasis Priorities # of Inputs Technique FPs i/f /g/ng/a s/a/d 0/1/fl s/h/g/n/fl Non-graph-oriented: Generalized FEVs [34] 04/86 Aircraft maintenance [76] 08/90 Perspective Wall [68] 04/91 Tree-Maps [56, 57, 103, 112] 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) <ref> [30] </ref> 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97] 05/92 Abridgment [74] 05/93 Variable Zoom [100] 05/93 Fractal views of <p> Priorities # of Inputs Technique FPs i/f /g/ng/a s/a/d 0/1/fl s/h/g/n/fl Non-graph-oriented: Generalized FEVs [34] 04/86 Aircraft maintenance [76] 08/90 Perspective Wall [68] 04/91 Tree-Maps [56, 57, 103, 112] 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) <ref> [30] </ref> 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97] 05/92 Abridgment [74] 05/93 Variable Zoom [100] 05/93 Fractal views of trees [63] 08/93 PLUM
Reference: [31] <author> R.W. Floyd. </author> <title> Algorithm 97: Shortest Path. </title> <journal> Communications of the ACM, </journal> <volume> 5(6):345, </volume> <year> 1962. </year>
Reference-contexts: The second returns the number of shortest paths between the current set of sources S and sinks E that object o partakes in. The APSP can be computed in O (jV j 3 ) time using a variant of Floyd's algorithm <ref> [4, 31] </ref> that considers not only arc weights but also vertex weights (see Section B.1). The function SP is just a table look-up and thus can be evaluated in constant time.
Reference: [32] <author> R.H. Fowler, W.A.L. Fowler, and B.A. Wilson. </author> <title> Integrating query, thesaurus, and documents through a common visual representation. </title> <booktitle> In ACM SIGIR '91, </booktitle> <pages> pages 142-151. </pages> <publisher> ACM, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: Clusters: objects that are proximate in the normal view must also be proximate in the distorted view. Document Associative Networks This EA for simplifying the task of information retrieval <ref> [32] </ref>, generates hybrid filtering fisheye, globally scaled, and adorned views. The approach is centered around a common visually displayed network structure: an associative network. <p> [56, 57, 103, 112] 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks <ref> [32] </ref> 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97] 05/92 Abridgment [74] 05/93 Variable Zoom [100] 05/93 Fractal views of trees [63] 08/93 PLUM [88] 08/93 Layout-indep. FEVs [78, 79] 08/93 Continuous Zoom [6] 05/94 CATGraph [60] 11/94 Table 3.3: A comparison of existing fisheye view techniques. 4.
Reference: [33] <author> T. Fruchterman and E. Reingold. </author> <title> Graph Drawing By Force-Directed Placement. </title> <type> Technical Report UIUCDCS-R-90-1609, </type> <institution> Dept. of Comp. Sci., U. of Illinois at Urbana-Champaign, </institution> <month> June </month> <year> 1990. </year>
Reference: [34] <author> G.W. Furnas. </author> <title> Generalized Fisheye Views. </title> <booktitle> In Proc. ACM CHI '86, </booktitle> <pages> pages 16-23, </pages> <address> Boston, MA, </address> <month> April </month> <year> 1986. </year> <note> ACM. </note>
Reference-contexts: contains a relatively limited view definition facility, and the proposed filter/flow boolean query interface [104, 105] would similarly require a relatively simple view component; in particular, both approaches are limited to flat databases and are too weak to express similarity queries. 3.2 Fisheye Views 3.2.1 Definition The generalized FEV formalism <ref> [34] </ref> is based on the workings of the fisheye or very wide angle lens used in photography, which magnifies the image at multiple levels greatest near the focus and least in the periphery. <p> The review summarizes observations that we reported in [81]. 23 categories could be added. 3.2.3 Non-graph-oriented Techniques Generalized Fisheye Views This formalism for reducing the complexity of highly detailed visualizations by displaying subsets of the most relevant details <ref> [34] </ref>, generates filtering FEVs. As mentioned earlier, in a generalized FEV, DOI (p) = API (p) - Dist (p; f ), given FP f . 24 FPs: Dynamic and Global. <p> The generalized FEV formalism was extended to capture multiple FPs in a directed network by rewriting Dist as the sum of shortest path distances from a vertex to the FPs. The resulting vertex priorities enabled the construction of nth order FEVs, similar to the generalized FEVs of trees <ref> [34] </ref>. The Perspective Wall This EA for visualizing linear information [68] such as time, generates globally scaled views. It uses graphics hardware support to fold wide 2-D charts into 3-D visualizations consisting of a center panel for showing detail and two perspective panels for displaying context. <p> the demagnified ones. 1 In fact, the authors show an example of stretching screens generated by the prototype graph browser which was used to display graphical FEVs [96, 97]. 26 3.2.4 Graph-oriented Techniques Generalized FEVs of Trees This EA for simplifying the display of trees by suppressing less relevant nodes <ref> [34] </ref>, generates filtering FEVs. A generalized FEV of a tree is obtained by providing specific instantiations of the API and Dist functions. <p> The fractal filtering mechanism has one nice property that the generalized FEV of trees <ref> [34] </ref> does not: it guarantees that as the FP changes, the number of nodes whose fractal value exceeds a specified threshold will remain nearly constant regardless of branching factor. <p> Number of Focal Points number of FPs explicitly supported by the EA: None (0); Single (1); Multiple (fl). Approach Date Emphasis Priorities # of Inputs Technique FPs i/f /g/ng/a s/a/d 0/1/fl s/h/g/n/fl Non-graph-oriented: Generalized FEVs <ref> [34] </ref> 04/86 Aircraft maintenance [76] 08/90 Perspective Wall [68] 04/91 Tree-Maps [56, 57, 103, 112] 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) <p> Approach Date Emphasis Priorities # of Inputs Technique FPs i/f /g/ng/a s/a/d 0/1/fl s/h/g/n/fl Non-graph-oriented: Generalized FEVs <ref> [34] </ref> 04/86 Aircraft maintenance [76] 08/90 Perspective Wall [68] 04/91 Tree-Maps [56, 57, 103, 112] 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97] 05/92 Abridgment [74] 05/93 Variable Zoom [100] <p> Table 4.1 60 View Category View Def 'n DM Dynamic Implicit FEV PLUM [88] core -rel pos-Filtering FEV Generalized FEV of trees <ref> [34] </ref> core, tc, sp -- Geometric Distorting FEV CATGraphs [60] core -rel/abs pos, rel/abs size-Graphical FEV of Graphs [96, 97] core -rel/abs pos, rel/abs size-Non-geometric Distorting FEV D-ABDUCTOR [74] core, tc, sp -rel size-Layout-indep. <p> A more specific notion of filtering FEV is Furnas' FEV of trees <ref> [34] </ref>, in which the notion of similarity is given 61 by: DOI (p; f ) = 1 (Depth (p) + Dist (p; f )) where Depth (p) is the depth of point p in the tree, and Dist (p; f ) is the undirected path distance between p and (focal point) <p> hierarchy v [3] := CNT (VF) &gt; 0 ? -1 * (v [1] + v [2]) : 0 - % Similarity based on depth and distance Notice that the notion of similarity captured by attribute 3 is identical to the notion of degree of importance in the generalized fisheye view <ref> [34] </ref>. Directory size has been mapped onto the hue, saturation, and size node properties, and the nodes were positioned by a left-to-right hierarchical layout algorithm. been redrawn. nodes have been redrawn. <p> : 0 % Similarity based on depth and distance v [4] := MIN (f:VF,((SP (P,v,f)+1) / mag (f)) * -1) - % Similarity based on distance only 89 The above view defines two similarity attributes; the first is identical to the notion degree of importance in the generalized fisheye view <ref> [34] </ref> and the notion of priority in the Abridgment facility of the D-ABDUCTOR system [74], while the second is based on proximity (inverse distance) in the nesting hierarchy scaled by focal point magnification. 90 portion of the entire graph is visible. <p> while data is being visualized thereby making it possible to create powerful active visualizations such as network monitoring tools (Sections 4.3 and 4.5.3); 5. simulations and DM and view definition expressiveness requirements for existing fisheye view techniques: * Dynamic Implicit FEVs: PLUM [88] * Filtering FEVs: Generalized FEV of trees <ref> [34] </ref> * Geometric Distorting FEVs: CATGraphs [60] and Graphical FEV of Graphs [96, 97] * Non-geometric Distorting FEVs: D-ABDUCTOR [74] and Layout-indep.
Reference: [35] <author> E.R. Gansner, </author> <title> S.C. North, and K.P. Vo. DAG-A Program that Draws Directed Graphs. </title> <journal> Software-Practice and Experience, </journal> <volume> 18(11) </volume> <pages> 1047-1062, </pages> <month> November </month> <year> 1988. </year>
Reference: [36] <author> H. Garcia-Molina and K. Salem. </author> <title> Main Memory Database Systems: An Overview. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 4(6) </volume> <pages> 509-516, </pages> <year> 1992. </year> <month> 108 </month>
Reference: [37] <author> M.R. Garey and D.S. Johnson. </author> <title> Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. </title> <publisher> Freeman and Company, </publisher> <address> New York, NY, </address> <year> 1979. </year>
Reference: [38] <author> J. Goldstein and S.F. Roth. </author> <title> Using Aggregation and Dynamic Queries for Exploring Large Data Sets. </title> <booktitle> In Proc. ACM CHI '94, </booktitle> <pages> pages 23-29, </pages> <address> Boston, MA, </address> <month> April </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: An example of the former is the filter/flow boolean query interface [104, 105] which permits users to combine attributes with boolean operators; an example of the latter is the Aggregate Manipulator <ref> [38] </ref> which permits users to interactively define a limited class of derived attributes. 1 A second limitation of existing DQ systems stems from the fact that they do not incorporate similarity functions. <p> While explicit Dye view definitions make it possible to encode a broad class of similarity functions, Graphite also allows users to define a restricted class of similarity attributes interactively. By contrast, both the filter/flow boolean query interface [104, 105] and the Aggregate Manipulator <ref> [38] </ref> are too weak to express similarity attributes. The remainder of the dissertation is organized as follows. In Chapter 2 we introduce the main features of the Graphite visualization system through a set of examples. <p> For this reason, such query components have also been called dynamic query filters [2]. The filtering effects of the components are typically combined using AND logic (set intersection). 15 Data Type Component Numeric single or double-ended sliders <ref> [2, 3, 38, 84, 121] </ref> frequency distribution histograms [26, 27] Alphanumeric scrolling lists [38] Alpha slider [1] regular expression matching [84] Nominal/Categorical checkboxes, buttons [3, 38] scrolling lists [38] Aggregate Aggregate Manipulator [38] Table 3.1: Some common dynamic query components. <p> The filtering effects of the components are typically combined using AND logic (set intersection). 15 Data Type Component Numeric single or double-ended sliders [2, 3, 38, 84, 121] frequency distribution histograms [26, 27] Alphanumeric scrolling lists <ref> [38] </ref> Alpha slider [1] regular expression matching [84] Nominal/Categorical checkboxes, buttons [3, 38] scrolling lists [38] Aggregate Aggregate Manipulator [38] Table 3.1: Some common dynamic query components. A number of DQ component types have appeared in existing DQ systems and several common examples are summarized in Table 3.1. <p> The filtering effects of the components are typically combined using AND logic (set intersection). 15 Data Type Component Numeric single or double-ended sliders [2, 3, 38, 84, 121] frequency distribution histograms [26, 27] Alphanumeric scrolling lists [38] Alpha slider [1] regular expression matching [84] Nominal/Categorical checkboxes, buttons <ref> [3, 38] </ref> scrolling lists [38] Aggregate Aggregate Manipulator [38] Table 3.1: Some common dynamic query components. A number of DQ component types have appeared in existing DQ systems and several common examples are summarized in Table 3.1. <p> filtering effects of the components are typically combined using AND logic (set intersection). 15 Data Type Component Numeric single or double-ended sliders [2, 3, 38, 84, 121] frequency distribution histograms [26, 27] Alphanumeric scrolling lists <ref> [38] </ref> Alpha slider [1] regular expression matching [84] Nominal/Categorical checkboxes, buttons [3, 38] scrolling lists [38] Aggregate Aggregate Manipulator [38] Table 3.1: Some common dynamic query components. A number of DQ component types have appeared in existing DQ systems and several common examples are summarized in Table 3.1. <p> components are typically combined using AND logic (set intersection). 15 Data Type Component Numeric single or double-ended sliders [2, 3, 38, 84, 121] frequency distribution histograms [26, 27] Alphanumeric scrolling lists <ref> [38] </ref> Alpha slider [1] regular expression matching [84] Nominal/Categorical checkboxes, buttons [3, 38] scrolling lists [38] Aggregate Aggregate Manipulator [38] Table 3.1: Some common dynamic query components. A number of DQ component types have appeared in existing DQ systems and several common examples are summarized in Table 3.1. Note that some components, such as frequency distribution histograms can be used to both highlight and mask data points. <p> As we show, using database views to derive similarity attributes captures a broad class of such fuzzy queries. Aggregate Manipulator The aggregate manipulator is a user interface mechanism that allows users to create and decompose aggregates (groupings of data) and was designed to complement the dynamic query technique <ref> [38] </ref>. Although not presented as such, in essence the aggregate manipulator permits users to define limited views on the underlying data. Although the expressive power of the view definition mechanism was not formally defined, the aggregate manipulator can be used to create the following types of derived attributes: 1. <p> Table of Elements [3] 92 p p p ASTER/COLOR/EXPAND [66] 92 p p p Health Statistics [85] 93 p p p HierNet [27] 93 p p p Seenet, NicheWorks [26] 93 p p p Filter/flow proposal [104, 105] 93 p p p Filmfinder [2] 94 p p p Aggregate Manipulator <ref> [38] </ref> 94 p p p Webviz [84] 94 p p p Network Configuration [65] 94 p p p SDM [11, 12] 95 p p p PDQ Tree Browser [64] 95 p p p Table 3.2: Summary of existing Dynamic Query system features. 3.1.4 Limitations As evidenced by Table 3.2, the main <p> More specifically, an integrated view maintenance facility is a must in order to maintain derived attributes whose values change in response to user actions (i.e., dynamic attributes), as exemplified by our proposed use of similarity attributes. The Aggregate Manipulator <ref> [38] </ref> contains a relatively limited view definition facility, and the proposed filter/flow boolean query interface [104, 105] would similarly require a relatively simple view component; in particular, both approaches are limited to flat databases and are too weak to express similarity queries. 3.2 Fisheye Views 3.2.1 Definition The generalized FEV formalism <p> In particular, it is desirable to permit users to define views interactively, as with our user-defined similarity dialog box, the Aggregate Manipulator <ref> [38] </ref>, or the filter/flow boolean query interface [104, 105], although the expressive power of such approaches must be carefully weighed against their comparative ease of use and ease of implementation. 6.4 Summary of Contributions The key contributions of this thesis are: 1. to show that in addition to creating ordinary (static)
Reference: [39] <author> G. Golovchinsky and M.H. Chignell. Queries-R-Links: </author> <title> Graphical Markup for Text Navigation. </title> <booktitle> In InterCHI'93, </booktitle> <address> Amsterdam, Netherlands, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: In the following set of examples, we show a number of screen shots from the Multisurf prototype [47] a system that combines local (database) and global (Web) searching with the Queries-R-Links graphical markup of boolean queries technique <ref> [39] </ref>, and several graph visualizations realized with the Graphite system. graphs which we do not discuss here). The nodes in the graph represent documents and the links hypertext links among the documents. More specifically, the base database has the following schema: 67 BusyDestin attribute and the TripCost similarity attribute.
Reference: [40] <author> R.A.M. Gregson. </author> <title> Psychometrics of Similarity. </title> <publisher> Academic Press, </publisher> <year> 1975. </year>
Reference-contexts: This general form can be used to capture both geometric <ref> [40] </ref> (e.g., Minkowski metric [95]) and feature-based [113] notions of similarity, as well as domain-specific similarity functions such as those used in the Affinity Browser [83].
Reference: [41] <author> T. Griffin and L. Libkin. </author> <title> Incremental Maintenance of Views with Duplicates. </title> <journal> ACM SIGMOD Record, </journal> <volume> 24(2) </volume> <pages> 328-339, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: Production rules derived from an analysis of the view definition can be used to determine changes to views [119, 120]. As recomputing views can be expensive, several incremental methods for view maintenance have been proposed <ref> [10, 41, 116] </ref>. <p> A more recent version of this approach is to generate production rules from view specifications [119, 120]; production rules are typically implemented as Event-Condition-Action rules [71]. Related incremental view maintenance techniques are also described in <ref> [10, 41, 116] </ref>. 49 4.5.1 Materializing Views from Scratch In order to generate a program to materialize a view from scratch, we begin by creating a view parse graph from the declarative view specification.
Reference: [42] <author> A. Gupta, I.S. Mumick, and K.A. Ross. </author> <title> Adapting Materialized Views after Redefinitions. </title> <journal> ACM SIGMOD Record, </journal> <volume> 24(2) </volume> <pages> 211-222, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: View redefinition refers to a change in a view definition; the usual way to update a view upon redefinition is to compute the new view from scratch; a more efficient alternative may be to exploit existing views through view adaptation <ref> [42] </ref>. 4.3 Visualization System Architectures In this section we describe how the main components of DQM systems are interrelated through an evolving sequence of high-level event-action architectures depicted as directed acyclic graphs. In particular, this allows us to situate the view definition component within the framework of DQM systems. <p> The naive way to evaluate the dynamic selection query is simply to compute the result from scratch. A more efficient approach is to view this problem as an instance of view redefinition, which permits us to exploit the result of the previous query through view adaptation <ref> [42] </ref>.
Reference: [43] <author> F.G. </author> <title> Halasz. Reflections on Notecards: Seven Issues for the Next Generation of Hypermedia Systems. </title> <journal> Communications of the ACM, </journal> <volume> 31(7) </volume> <pages> 836-852, </pages> <month> July </month> <year> 1988. </year>
Reference-contexts: One of the oldest documented user-interface problems in hypertext systems is the lost-in-hyperspace phenomenon [77]. As a partial solution, many have proposed a variety of overview diagrams <ref> [43, 69, 77, 117] </ref>, and in earlier work, we showed how the layout-independent fisheye view approach [78, 79] can be applied to the visualization of nested hypertext networks.
Reference: [44] <author> D. Harel. </author> <title> On Visual Formalisms. </title> <journal> Communications of the ACM, </journal> <volume> 31(5) </volume> <pages> 514-530, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Graphite depicts multidimensional data using several common techniques, including plots [7, 14] (that show relationships among data dimensions), node-and-link diagrams or graphs <ref> [22, 44] </ref> (that show relationships among individual data points), and nested graphs or hygraphs [16] (that show hierarchical relationships among points by visual containment).
Reference: [45] <author> E. Harley and A.J. Bonner. </author> <title> A Flexible Approach to Genome Map Assembly. </title> <booktitle> In Proc. of the Second Intl. Conf. on Intelligent Systems for Molecular Biology, </booktitle> <pages> pages 161-169. </pages> <publisher> AAAI Press, </publisher> <year> 1994. </year>
Reference-contexts: A physical map is an assignment of DNA fragments to their locations on the genome. There have been a number of different approaches to solving this problem, including the use of logic programming and graph visualization with the Hy+ tool <ref> [45] </ref>. In this work, Hy+ was used to assemble contigs (partial maps) from real and simulated STS (Sequence Tagged Site) content mapping data with little programming effort. An STS probe is a very short piece of DNA that sticks (or hits) to a particular site on the chromosome. <p> This is accomplished by randomly cutting many copies of the chromosome into small fragments called YACs (Yeast Artificial Chromosomes), and looking for pairs of probes that hit the same YAC. By finding such pairs of probes, it is possible to construct an STS adjacency graph <ref> [45] </ref>, in which each node represents an STS probe, and a link between two nodes means that the two probes are adjacent.
Reference: [46] <author> E. Harley, N. Goodman, and A.J. Bonner. </author> <title> Graph Algorithms for Assembling Integrated Genome Maps. </title> <note> To be submitted for journal publication., </note> <year> 1996. </year>
Reference-contexts: Recent work has attempted to overcome two problems in map assembly: integration of overlap data, and detection of errors and anomalies in data <ref> [46] </ref>. Integration is achieved through the notion of a cluster, a maximal set of mutually overlapping fragments, while error detection is achieved by extracting and displaying the underlying structure of cluster or STS adjacency graphs. <p> The graph algorithms used to convert adjacency graphs into structure graphs outlined in <ref> [46] </ref> have been applied to data from the CEPH YAC library [20] and data from the Human Physical Mapping Project at the Whitehead Institute/MIT Genome Center [53].
Reference: [47] <author> M.Z. Hasan, G. Golovchinsky, E.G. Noik, N. Charoenkitkarn, M. Chignell, A.O. Mendelzon, and D. Mod-jeska. </author> <title> Browsing Local and Global Information. </title> <booktitle> In CASCON '95, Toronto, ON, </booktitle> <address> Canada, </address> <month> November </month> <year> 1995. </year>
Reference-contexts: In the following set of examples, we show a number of screen shots from the Multisurf prototype <ref> [47] </ref> a system that combines local (database) and global (Web) searching with the Queries-R-Links graphical markup of boolean queries technique [39], and several graph visualizations realized with the Graphite system. graphs which we do not discuss here).
Reference: [48] <author> L.S. Heath, D. Hix, L.T. Nowell, Wake W.C., G.A. Averboch, E. Labow, S.A. Guyer, Brueni D.J., R.K. France, K. Dalal, and E.A. Fox. Envision: </author> <title> A User-Centered Database of Computer Science Literature. </title> <journal> Communications of the ACM, </journal> <volume> 38(4) </volume> <pages> 52-53, </pages> <month> April </month> <year> 1995. </year>
Reference-contexts: The selected object's label is displayed in full on the graph, and its type and identifier are displayed in a message box. In this example node image was selected. 2.3 Dynamic Mapping In mapping, data attributes are mapped onto graphic properties <ref> [2, 7, 8, 14, 48, 84] </ref>. For example, the temperature of a data point is often mapped onto colour using a heat scale, the rate or volume of flow through a network is often depicted by link thickness, and the population of a city is often conveyed by node size.
Reference: [49] <author> T.R. Henry. </author> <title> Interactive Graph Layout: The Exploration of Large Graphs. </title> <type> Technical Report 92-03, </type> <institution> Dept. of Comp. Sci., U. of Arizona, </institution> <month> June </month> <year> 1992. </year> <type> Ph.D. </type> <note> dissertation published as Technical Report. </note>
Reference-contexts: The combination of masking with dynamic queries and parametric layout algorithms provides a form of composite layout capability. In addition, the Graphite view definition language, Dye, described in Chapter 4, may be just the missing component in Henry's Interactive Graph Layout approach <ref> [49, 50] </ref>, in which selected subgraphs could be drawn independently and the results combined to form fairly intricate composite layouts. The limitation of Henry's approach as it was presented, was the lack of automatic subgraph selection methods - subgraphs were primarily selected interactively. <p> This feature allows Dye to be used to declaratively describe complex composite layouts and is one way to automate Henry's interactive subgraph 48 selection scheme <ref> [49, 50] </ref>. In the following example, the child nodes of all blobs that contain more than 10 child nodes are drawn by the grid layout algorithm, otherwise by the circle layout algorithm. <p> hierarchy as 96 follows: b:B layout (b) := pv (b)[1] % 2 = 0 ? "1d x" : "1d y" Using this technique we can generate arbitrary composite layouts by declaratively assigning layout algorithms to the blobs of the hygraph and in doing so, automate Henry's Interactive Graph Layout approach <ref> [49, 50] </ref>. each leaf is set to the size of the corresponding directory. 97 98 99 Chapter 6 Summary 6.1 Lessons Learned Data visualization is still a relatively new research area. As such, there are still many avenues to explore.
Reference: [50] <author> T.R. Henry and S.E. Hudson. </author> <title> Interactive Graph Layout. </title> <booktitle> In Proc. ACM UIST '91, </booktitle> <pages> pages 55-64. </pages> <publisher> ACM, </publisher> <year> 1991. </year>
Reference-contexts: The combination of masking with dynamic queries and parametric layout algorithms provides a form of composite layout capability. In addition, the Graphite view definition language, Dye, described in Chapter 4, may be just the missing component in Henry's Interactive Graph Layout approach <ref> [49, 50] </ref>, in which selected subgraphs could be drawn independently and the results combined to form fairly intricate composite layouts. The limitation of Henry's approach as it was presented, was the lack of automatic subgraph selection methods - subgraphs were primarily selected interactively. <p> Interactive Graph Layout This approach comprises interactive or algorithmic subgraph selection, layout algorithm assignment, and sublayout composition <ref> [50] </ref>, and generates hybrid locally scaled and adorned views. The nodes in a selected subgraph can be enlarged to emphasize the subgraph. <p> Unlike StretchTools, however, which permits arbitrary distortions of the screen, the distortions obtained by this EA are more restrictive due to its use of the balance factor as described above. Furthermore, without explicit notions of DOI and decomposition into API and Dist, these and other techniques <ref> [50, 68, 75, 89] </ref> are less appropriate for automatic generation of EVs. Fractal Views of Trees This EA exploits fractal self-similarity to aid the visualization of large trees in 3-D [63], and generates hybrid filtered, static implicit fisheye, and globally scaled views. <p> the Intelligent Zoom interface to time-critical systems; unlike the Variable Zoom, however, this EA calculates priorities using four quantities: the node's API, alarm state, connectivity to other important nodes, and perceived user interest (determined by node open and close actions). 2 This layout strategy permits the generation of composite layouts <ref> [50] </ref> by assigning a possibly unique layout algorithm to each vertex. 31 CATGraphs This EA generates globally scaled views using the compressed arctangent function [60]: f (x) = arctan r given a region of interest of radius r centered about the focal point x i . <p> Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout <ref> [50] </ref> 1991 Graphical FEVs [96, 97] 05/92 Abridgment [74] 05/93 Variable Zoom [100] 05/93 Fractal views of trees [63] 08/93 PLUM [88] 08/93 Layout-indep. FEVs [78, 79] 08/93 Continuous Zoom [6] 05/94 CATGraph [60] 11/94 Table 3.3: A comparison of existing fisheye view techniques. 4. <p> This feature allows Dye to be used to declaratively describe complex composite layouts and is one way to automate Henry's interactive subgraph 48 selection scheme <ref> [49, 50] </ref>. In the following example, the child nodes of all blobs that contain more than 10 child nodes are drawn by the grid layout algorithm, otherwise by the circle layout algorithm. <p> hierarchy as 96 follows: b:B layout (b) := pv (b)[1] % 2 = 0 ? "1d x" : "1d y" Using this technique we can generate arbitrary composite layouts by declaratively assigning layout algorithms to the blobs of the hygraph and in doing so, automate Henry's Interactive Graph Layout approach <ref> [49, 50] </ref>. each leaf is set to the size of the corresponding directory. 97 98 99 Chapter 6 Summary 6.1 Lessons Learned Data visualization is still a relatively new research area. As such, there are still many avenues to explore.
Reference: [51] <author> J.G. Hollands. </author> <title> Presenting a Network Graphically: A Comparison of Performance Using Fisheye View and Scrolling. </title> <type> Master's thesis, </type> <institution> Dept. of Psychology, U. of Guelph, Guelph, </institution> <address> Ontario, Canada, </address> <year> 1988. </year>
Reference-contexts: All three EAs were defined in terms of a single FP. Topographic Networks This EA for displaying topographic networks <ref> [51, 52] </ref>, generates hybrid filtering fisheye and non-geometric distorted fisheye views. The FEV was formulated in terms of a single FP; the DOI function was used to both, determine the amount of detail to be displayed (e.g., omit node labels), and to distort the positions and sizes of nodes. <p> Technique FPs i/f /g/ng/a s/a/d 0/1/fl s/h/g/n/fl Non-graph-oriented: Generalized FEVs [34] 04/86 Aircraft maintenance [76] 08/90 Perspective Wall [68] 04/91 Tree-Maps [56, 57, 103, 112] 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks <ref> [51, 52] </ref> 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97] 05/92 Abridgment [74] 05/93 Variable Zoom [100] 05/93 Fractal views of trees [63] 08/93 PLUM [88] 08/93 Layout-indep.
Reference: [52] <author> J.G. Hollands, T.T. Carey, </author> <title> M.L. Matthews, and C.A. McCann. Presenting a Graphical Network: A Comparison of Performance Using Fisheye and Scrolling Views. </title> <editor> In G. Salvendy and Smith M.J., editors, </editor> <booktitle> Designing and Using Human-Computer Interfaces and Knowledge-Based Systems, </booktitle> <pages> pages 313-320. </pages> <publisher> Elsevier, </publisher> <year> 1989. </year>
Reference-contexts: All three EAs were defined in terms of a single FP. Topographic Networks This EA for displaying topographic networks <ref> [51, 52] </ref>, generates hybrid filtering fisheye and non-geometric distorted fisheye views. The FEV was formulated in terms of a single FP; the DOI function was used to both, determine the amount of detail to be displayed (e.g., omit node labels), and to distort the positions and sizes of nodes. <p> Technique FPs i/f /g/ng/a s/a/d 0/1/fl s/h/g/n/fl Non-graph-oriented: Generalized FEVs [34] 04/86 Aircraft maintenance [76] 08/90 Perspective Wall [68] 04/91 Tree-Maps [56, 57, 103, 112] 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks <ref> [51, 52] </ref> 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97] 05/92 Abridgment [74] 05/93 Variable Zoom [100] 05/93 Fractal views of trees [63] 08/93 PLUM [88] 08/93 Layout-indep.
Reference: [53] <institution> Human Physical Mapping Project at the Whitehead Institute/MIT Genome Center, </institution> <note> Release 8. Avail. via anon. ftp from genome.wi.mit.edu., </note> <month> September </month> <year> 1995. </year>
Reference-contexts: The graph algorithms used to convert adjacency graphs into structure graphs outlined in [46] have been applied to data from the CEPH YAC library [20] and data from the Human Physical Mapping Project at the Whitehead Institute/MIT Genome Center <ref> [53] </ref>.
Reference: [54] <author> D. Jablonowski and Guarna A.Jr. </author> <title> GMB: A Tool for Manipulating and Animating Graph Data Structures. </title> <journal> Software-Practice and Experience, </journal> <volume> 19(3) </volume> <pages> 283-301, </pages> <month> March </month> <year> 1989. </year>
Reference: [55] <author> V. Jain and B. Shneiderman. </author> <title> Data Structures for Dynamic Queries: An Analytical and Experimental Evaluation. </title> <type> Technical Report CAR-TR-715 CS-TR-3287, </type> <institution> Dept. of Comp. Sci., U. of Maryland, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: A number of data structures for evaluating range and partial-match queries (e.g., partitioned hash functions, k-d-trees) have been studied and compared <ref> [55, 93, 94] </ref>. An integrity constraint is a restriction on some aspect of a relation. There are two different kinds of restrictions: structural constraints such as functional dependencies, and semantic constraints that restrict the values of an attribute to some range or express arithmetic relationships among several attributes. <p> Another improvement can be achieved by exploiting the fact that DQ components are manipulated one at a time. One approach is to maintain a count for each object <ref> [55] </ref>; when a DQ component masks an object, its count 39 is incremented, and when it unmasks an object, its count is decremented; when the count changes from 1 to 0 the object is displayed, and when it changes from 0 to 1 it is masked. <p> Finally, note that even greater efficiency can be achieved by incorporating specialized data structures for evaluating range and partial-match queries; several alternatives are compared in <ref> [55] </ref>, however, most proposed data structures have considerable space overheads. Furthermore, in the above study [55] it was assumed that databases were static (database updates were not permitted), thus the cost of updating such structures in the presence of updates and its impact on the performance of DQ systems remains to <p> Finally, note that even greater efficiency can be achieved by incorporating specialized data structures for evaluating range and partial-match queries; several alternatives are compared in <ref> [55] </ref>, however, most proposed data structures have considerable space overheads. Furthermore, in the above study [55] it was assumed that databases were static (database updates were not permitted), thus the cost of updating such structures in the presence of updates and its impact on the performance of DQ systems remains to be studied. 4.3.2 Static DQM Systems The next more powerful architecture incorporates dynamic mapping in
Reference: [56] <author> B. Johnson. TreeViz: </author> <title> Treemap Visualization of Hierarchically Structured Information. </title> <booktitle> In Proc. ACM CHI '92, </booktitle> <pages> pages 369-370, </pages> <address> Monterey, CA, </address> <month> May </month> <year> 1992. </year> <journal> ACM. </journal> <volume> 109 </volume>
Reference-contexts: Webviz also supports a limited form of dynamic mapping: the frequency and recency of document accesses can be mapped onto node border width, node border colour, link colour, and 20 link thickness. Visual Information Management for Network Configuration This prototype network configuration management system employs colour-coded treemaps <ref> [56, 112] </ref> combined with dynamic queries that permit user-controlled filtering and animation of network configuration data [65]. The size and colour of treemaps was controlled by the user via dynamic mapping, and treemap slices could be grayed-out through dynamic queries. <p> The single FP is changed by scrolling the wall as one would a sheet in a player piano. 25 Treemaps This EA for presenting hierarchical information <ref> [56, 57, 103, 112] </ref>, generates hybrid locally scaled and adorned views. A hierarchy is drawn as a set of nested boxes in which each node is depicted as a rectangular region composed of the rectangular regions that represent its children. <p> Number of Focal Points number of FPs explicitly supported by the EA: None (0); Single (1); Multiple (fl). Approach Date Emphasis Priorities # of Inputs Technique FPs i/f /g/ng/a s/a/d 0/1/fl s/h/g/n/fl Non-graph-oriented: Generalized FEVs [34] 04/86 Aircraft maintenance [76] 08/90 Perspective Wall [68] 04/91 Tree-Maps <ref> [56, 57, 103, 112] </ref> 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] <p> FEV [78, 79] core, tc -rel size-Treemaps <ref> [56, 112] </ref> core, tc -rel size-Adorned FEV PLUM [88] core P -pos,size Table 4.1: Characterization of Dynamic Fisheye Views. View definition language requirements refer to the core component of Dye (including focal points), transitive closure (tc), and shortest paths (sp). <p> 79 and Figure 5.20 on page 84 the similarity attributes are mapped onto the node colour saturation property, which visually emphasizes nodes that are similar to the selected focal point (s). 4.6.6 Treemaps The Dye view definition language can also simulate a radically different hierarchical data visualization technique: the Treemap <ref> [56, 112] </ref>. The view definition is given on page 94, while Figures 5.35 and 5.36 show two resulting Treemap visualizations. An interesting aspect of the Treemap simulation is the use of layout algorithms to position nested nodes. <p> Figure 5.34 shows a layout-independent fisheye view with two focal points. We conclude this section on hierarchical data visualization by showing how our view definition language can simulate a radically different technique: the Treemap <ref> [56, 112] </ref>. <p> FEV [78, 79] * Treemaps <ref> [56, 112] </ref> 6. examples of powerful and flexible visualization strategies realized through the composition of simpler techniques - DQ, DM, and graph layout. 6.5 Conclusion Throughout this dissertation we have repeatedly argued that since the effectiveness of both DQ and DM techniques is fundamentally linked to the availability of suitable multidimensional
Reference: [57] <author> B. Johnson and B. Shneiderman. </author> <title> Tree-Maps: A Space-Filling Approach to the Visualization of Hierarchical Information Structures. </title> <booktitle> In IEEE Visualization '91, </booktitle> <pages> pages 284-291, </pages> <address> San Diego, CA, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: An adorned view emphasizes elements by varying other visual presentation variables such as colour, shading, line style and thickness, as well as audio <ref> [57] </ref>, and motion (e.g., in-betweening animation [88], vertical oscillations and small random movements [30], vibration or pulsing [100]). Figure 3.1 shows a normal view of this taxonomy, while Figures 3.2, 3.3, and 3.4 show examples of other views of the same taxonomy. <p> The single FP is changed by scrolling the wall as one would a sheet in a player piano. 25 Treemaps This EA for presenting hierarchical information <ref> [56, 57, 103, 112] </ref>, generates hybrid locally scaled and adorned views. A hierarchy is drawn as a set of nested boxes in which each node is depicted as a rectangular region composed of the rectangular regions that represent its children. <p> Number of Focal Points number of FPs explicitly supported by the EA: None (0); Single (1); Multiple (fl). Approach Date Emphasis Priorities # of Inputs Technique FPs i/f /g/ng/a s/a/d 0/1/fl s/h/g/n/fl Non-graph-oriented: Generalized FEVs [34] 04/86 Aircraft maintenance [76] 08/90 Perspective Wall [68] 04/91 Tree-Maps <ref> [56, 57, 103, 112] </ref> 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32]
Reference: [58] <author> J.G. Kalbfleisch. </author> <title> Probability and Statistical Inference, </title> <booktitle> volume 1 of Universitext. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1979. </year>
Reference-contexts: System-supplied statistical methods: which for quantitative data types include the familiar aggregate operations of sum, average, and count. The first method relies on user-selection and therefore is not a candidate for view definition. The second method, corresponds to computing statistical quantiles (percentiles) <ref> [58] </ref>, and can be potentially difficult to realize in a database setting; first, it requires that the distribution be sorted on the attribute in question (which is relatively common), and second, it requires the ability to obtain the position of each point in the sorted 18 view (which is relatively rare).
Reference: [59] <author> T. Kamada and S. Kawai. </author> <title> A General Framework for Visualizing Abstract Objects and Relations. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 10(1) </volume> <pages> 1-39, </pages> <month> January </month> <year> 1991. </year>
Reference: [60] <author> Karlis Kaugars, Juris Reinfelds, and Alvis Brazma. </author> <title> A Simple Algorithm for Drawing Large Graphs on Small Screens. </title> <booktitle> In Proc. of 1994 DIMACS Graph Drawing Workshop, </booktitle> <address> Princeton, NJ, </address> <booktitle> number 894 in Lecture Notes in Computer Science, </booktitle> <pages> pages 278-281. </pages> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: connectivity to other important nodes, and perceived user interest (determined by node open and close actions). 2 This layout strategy permits the generation of composite layouts [50] by assigning a possibly unique layout algorithm to each vertex. 31 CATGraphs This EA generates globally scaled views using the compressed arctangent function <ref> [60] </ref>: f (x) = arctan r given a region of interest of radius r centered about the focal point x i . This function is applied independently to nodes' center x and y coordinates. <p> FEVs [78, 79] 08/93 Continuous Zoom [6] 05/94 CATGraph <ref> [60] </ref> 11/94 Table 3.3: A comparison of existing fisheye view techniques. 4. <p> Table 4.1 60 View Category View Def 'n DM Dynamic Implicit FEV PLUM [88] core -rel pos-Filtering FEV Generalized FEV of trees [34] core, tc, sp -- Geometric Distorting FEV CATGraphs <ref> [60] </ref> core -rel/abs pos, rel/abs size-Graphical FEV of Graphs [96, 97] core -rel/abs pos, rel/abs size-Non-geometric Distorting FEV D-ABDUCTOR [74] core, tc, sp -rel size-Layout-indep. <p> In particular, as geometric distorting FEVs are primarily used to distort geographical maps, original node positions are typically obtained by mapping longitude and latitude data. This is precisely the case in the Geographic Information System application shown in Figure 5.18 on page 82. To generate a compressed arctangent graph <ref> [60] </ref> (orthogonal distorting FEV), we must define a view in which we derive attributes whose values correspond to the transformed x and y coordinates and the distorted sizes, and then map these attributes onto the relative x and y position and relative x and y size properties. <p> We now demonstrate how our approach can be used to simulate two well-known orthogonal geometric distorted view techniques: graphical fisheye views [96, 97] and compressed arctangent (CAT) graphs <ref> [60] </ref>. <p> making it possible to create powerful active visualizations such as network monitoring tools (Sections 4.3 and 4.5.3); 5. simulations and DM and view definition expressiveness requirements for existing fisheye view techniques: * Dynamic Implicit FEVs: PLUM [88] * Filtering FEVs: Generalized FEV of trees [34] * Geometric Distorting FEVs: CATGraphs <ref> [60] </ref> and Graphical FEV of Graphs [96, 97] * Non-geometric Distorting FEVs: D-ABDUCTOR [74] and Layout-indep.
Reference: [61] <author> A. M. Keller. </author> <title> Algorithms for Translating View Updates to Database Updates for Views Involving Selections, Projections, and Joins. </title> <booktitle> In Proceedings of the ACM SIGACT-SIGMOD Symposium on Principles of Database Systems, </booktitle> <pages> pages 154-163, </pages> <year> 1985. </year>
Reference-contexts: A view update is an update operation specified through a view. Not all views can be updated the problem of how updates on views can be translated into appropriate updates on the underlying relations is discussed in <ref> [21, 61] </ref>. View updates in object-oriented models 38 can be simplified if operations are object-preserving [101], meaning that the results of queries are pointers to the input objects (rather than new objects or tuples), allowing updates to immediately propagate from views to base objects and vice versa.
Reference: [62] <author> S. Koenig and R. Paige. </author> <title> A Transformational Framework for the Automatic Control of Derived Data. </title> <booktitle> In Proc. of the 7th VLDB Conf., </booktitle> <pages> pages 306-318, </pages> <year> 1981. </year>
Reference-contexts: Our approach is to generate update programs based on an analysis of the dependencies in the view definition. The basic approach presented here is not new; one of the earliest related proposals was based on the use of a transformational framework for maintaining derived data <ref> [62] </ref>. The idea described therein was to replace costly global computations first suggested as a means to materialize views [107], by efficient incremental modifications. A more recent version of this approach is to generate production rules from view specifications [119, 120]; production rules are typically implemented as Event-Condition-Action rules [71].
Reference: [63] <author> H. Koike and H. </author> <title> Yoshihara. Fractal Approaches for Visualizing Huge Hierarchies. </title> <booktitle> In VL '93: IEEE Symposium on Visual Languages, </booktitle> <pages> pages 55-60, </pages> <address> Bergen, Norway, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: A normal view is a layout in which all elements have identical priorities, or, equivalently, a view with no FPs. An implicit FEV arises from the effect of point perspective in 3-D, by which nearby points loom large and distant points appear small; implicit FEVs are usually static (e.g., <ref> [30, 63, 89] </ref>), but may be dynamic if the 3-D layout is permitted to be altered (e.g., by moving higher priority nodes to the foreground [88]). There are at least three types of emphasized views (EVs). <p> Furthermore, without explicit notions of DOI and decomposition into API and Dist, these and other techniques [50, 68, 75, 89] are less appropriate for automatic generation of EVs. Fractal Views of Trees This EA exploits fractal self-similarity to aid the visualization of large trees in 3-D <ref> [63] </ref>, and generates hybrid filtered, static implicit fisheye, and globally scaled views. <p> SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97] 05/92 Abridgment [74] 05/93 Variable Zoom [100] 05/93 Fractal views of trees <ref> [63] </ref> 08/93 PLUM [88] 08/93 Layout-indep. FEVs [78, 79] 08/93 Continuous Zoom [6] 05/94 CATGraph [60] 11/94 Table 3.3: A comparison of existing fisheye view techniques. 4.
Reference: [64] <author> H.P. Kumar, C. Plaisant, and B. Shneiderman. </author> <title> Browsing Hierarchical Data with Multi-Level Dynamic Queries and Pruning. </title> <type> Technical Report CAR-TR-772 CS-TR-3474 ISR-TR-95-53, </type> <institution> Dept. of Comp. Sci., U. of Maryland, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: User experiments have shown DQ to be superior to traditional query approaches for many searching tasks <ref> [3, 64, 66, 104, 121] </ref>. DQ and DM are complementary techniques and have been successfully integrated in a number of recent visualization (hereafter DQM) systems (e.g., [2, 3, 8, 11, 12, 26, 27]). <p> PDQ Tree Browser The Pruning with Dynamic Queries (PDQ) tree browser <ref> [64] </ref> presents trees in two tightly-coupled views: a detailed view and an overview. The tool allows users to filter nodes at each level of the tree, and prunes subtrees of unselected nodes. <p> NicheWorks [26] 93 p p p Filter/flow proposal [104, 105] 93 p p p Filmfinder [2] 94 p p p Aggregate Manipulator [38] 94 p p p Webviz [84] 94 p p p Network Configuration [65] 94 p p p SDM [11, 12] 95 p p p PDQ Tree Browser <ref> [64] </ref> 95 p p p Table 3.2: Summary of existing Dynamic Query system features. 3.1.4 Limitations As evidenced by Table 3.2, the main limitation found in existing DQ systems is the lack of integrated flexible view definition facilities. <p> Several instances of predefined views have appeared in the literature <ref> [8, 64, 65] </ref>. Generally, it is assumed that attribute values in a predefined view are precomputed an assumption that tends to simplify the task (and hence the architecture) of the visualization system. In particular, the visualization system does not have to evaluate or maintain views.
Reference: [65] <author> H.P. Kumar, C. Plaisant, M. Teittinen, and B. Shneiderman. </author> <title> Visual Information Management for Network Configuration. </title> <type> Technical Report CAR-TR-716 CS-TR-3288 ISR-TR-94-45, </type> <institution> Dept. of Comp. Sci., U. of Maryland, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Visual Information Management for Network Configuration This prototype network configuration management system employs colour-coded treemaps [56, 112] combined with dynamic queries that permit user-controlled filtering and animation of network configuration data <ref> [65] </ref>. The size and colour of treemaps was controlled by the user via dynamic mapping, and treemap slices could be grayed-out through dynamic queries. A conventional node-link tree browser was also used to show hardware containment hierarchies. <p> p Health Statistics [85] 93 p p p HierNet [27] 93 p p p Seenet, NicheWorks [26] 93 p p p Filter/flow proposal [104, 105] 93 p p p Filmfinder [2] 94 p p p Aggregate Manipulator [38] 94 p p p Webviz [84] 94 p p p Network Configuration <ref> [65] </ref> 94 p p p SDM [11, 12] 95 p p p PDQ Tree Browser [64] 95 p p p Table 3.2: Summary of existing Dynamic Query system features. 3.1.4 Limitations As evidenced by Table 3.2, the main limitation found in existing DQ systems is the lack of integrated flexible view <p> Several instances of predefined views have appeared in the literature <ref> [8, 64, 65] </ref>. Generally, it is assumed that attribute values in a predefined view are precomputed an assumption that tends to simplify the task (and hence the architecture) of the visualization system. In particular, the visualization system does not have to evaluate or maintain views.
Reference: [66] <author> H.S. Liao, M. Osada, and B. Shneiderman. </author> <title> Browsing Unix Directories with Dynamic Queries: An Evaluation of Three Information Display Techniques. </title> <type> Technical Report CAR-TR-605 CS-TR-2841, </type> <institution> Dept. of Comp. Sci., U. of Maryland, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: User experiments have shown DQ to be superior to traditional query approaches for many searching tasks <ref> [3, 64, 66, 104, 121] </ref>. DQ and DM are complementary techniques and have been successfully integrated in a number of recent visualization (hereafter DQM) systems (e.g., [2, 3, 8, 11, 12, 26, 27]). <p> Instead, the authors apparently assume that graph data is static and all attributes are precomputed. Browsing Unix Directories Three alternative user interfaces to support dynamic queries and (text-based) visualization were compared in user experiments <ref> [66] </ref>. <p> sets in which data points are related, as in hierarchical data sets. 21 System Year Mapping Views Inputs None Static Dynamic None Predefined User-defined Flat Hierarchical Graph Network Visualization [8] 90 p p p Homefinder [121] 92 p p p Periodic Table of Elements [3] 92 p p p ASTER/COLOR/EXPAND <ref> [66] </ref> 92 p p p Health Statistics [85] 93 p p p HierNet [27] 93 p p p Seenet, NicheWorks [26] 93 p p p Filter/flow proposal [104, 105] 93 p p p Filmfinder [2] 94 p p p Aggregate Manipulator [38] 94 p p p Webviz [84] 94 p p
Reference: [67] <author> J.D. Mackinlay. </author> <title> Automating the Design of Graphical Presentations of Relational Information. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 5(2) </volume> <pages> 110-141, </pages> <month> April </month> <year> 1986. </year>
Reference-contexts: Data attributes can be of different data types; there have been a number of efforts at characterizing data for the purpose of automatic design of graphical and textual displays. Among these A Presentation Tool (APT) <ref> [67] </ref> and SAGE [90, 91] use knowledge-based approaches for synthesizing appropriate visualizations by combining common business visualizations such as bar charts and x-y charts, as does A Network Diagram Designer (ANDD) [70] for node-and-link diagrams. <p> As such, there are still many avenues to explore. In particular, unlike more established and mature research areas, there is relatively little theoretical work in this area. However, the state of affairs is gradually improving. Work in data characterization (e.g., <ref> [67, 70, 90, 91] </ref>) now provides a better understanding of the role and importance of data classifications in generating meaningful and effective visualizations.
Reference: [68] <author> J.D. Mackinlay, G.G. Roberson, and S.K. Card. </author> <title> The Perspective Wall: Detail and Context Smoothly Integrated. </title> <booktitle> In ACM CHI '91, </booktitle> <pages> pages 173-179. </pages> <publisher> ACM, </publisher> <month> April </month> <year> 1991. </year>
Reference-contexts: The resulting vertex priorities enabled the construction of nth order FEVs, similar to the generalized FEVs of trees [34]. The Perspective Wall This EA for visualizing linear information <ref> [68] </ref> such as time, generates globally scaled views. It uses graphics hardware support to fold wide 2-D charts into 3-D visualizations consisting of a center panel for showing detail and two perspective panels for displaying context. <p> Unlike StretchTools, however, which permits arbitrary distortions of the screen, the distortions obtained by this EA are more restrictive due to its use of the balance factor as described above. Furthermore, without explicit notions of DOI and decomposition into API and Dist, these and other techniques <ref> [50, 68, 75, 89] </ref> are less appropriate for automatic generation of EVs. Fractal Views of Trees This EA exploits fractal self-similarity to aid the visualization of large trees in 3-D [63], and generates hybrid filtered, static implicit fisheye, and globally scaled views. <p> Number of Focal Points number of FPs explicitly supported by the EA: None (0); Single (1); Multiple (fl). Approach Date Emphasis Priorities # of Inputs Technique FPs i/f /g/ng/a s/a/d 0/1/fl s/h/g/n/fl Non-graph-oriented: Generalized FEVs [34] 04/86 Aircraft maintenance [76] 08/90 Perspective Wall <ref> [68] </ref> 04/91 Tree-Maps [56, 57, 103, 112] 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91
Reference: [69] <author> K.C. Malcolm, S.E. Poltrock, and D. Schuler. </author> <title> Industrial Strength Hypermedia: Requirements for a Large Engineering Enterprise. </title> <booktitle> In Proc. ACM Hypertext '91, </booktitle> <pages> pages 13-24, </pages> <address> San Antonio, Tx, </address> <month> December </month> <year> 1991. </year> <note> ACM. </note>
Reference-contexts: One of the oldest documented user-interface problems in hypertext systems is the lost-in-hyperspace phenomenon [77]. As a partial solution, many have proposed a variety of overview diagrams <ref> [43, 69, 77, 117] </ref>, and in earlier work, we showed how the layout-independent fisheye view approach [78, 79] can be applied to the visualization of nested hypertext networks.
Reference: [70] <author> Joe Marks. </author> <title> A Formal Specification Scheme For Network Diagrams That Facilitates Automated Design. </title> <journal> Journal of Visual Languages and Computing, </journal> <volume> 2(4) </volume> <pages> 395-414, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: Among these A Presentation Tool (APT) [67] and SAGE [90, 91] use knowledge-based approaches for synthesizing appropriate visualizations by combining common business visualizations such as bar charts and x-y charts, as does A Network Diagram Designer (ANDD) <ref> [70] </ref> for node-and-link diagrams. <p> As such, there are still many avenues to explore. In particular, unlike more established and mature research areas, there is relatively little theoretical work in this area. However, the state of affairs is gradually improving. Work in data characterization (e.g., <ref> [67, 70, 90, 91] </ref>) now provides a better understanding of the role and importance of data classifications in generating meaningful and effective visualizations.
Reference: [71] <author> D. McCarthy and U. Dayal. </author> <title> The Architecture of an Active Database Management System. </title> <booktitle> In Proc. of the ACM-SIGMOD 1989 Intl. Conf. on Management of Data, </booktitle> <pages> pages 215-224, </pages> <year> 1989. </year>
Reference-contexts: The idea described therein was to replace costly global computations first suggested as a means to materialize views [107], by efficient incremental modifications. A more recent version of this approach is to generate production rules from view specifications [119, 120]; production rules are typically implemented as Event-Condition-Action rules <ref> [71] </ref>. Related incremental view maintenance techniques are also described in [10, 41, 116]. 49 4.5.1 Materializing Views from Scratch In order to generate a program to materialize a view from scratch, we begin by creating a view parse graph from the declarative view specification. <p> As such, it becomes increasingly important to be able to specify how various components are interrelated; this suggests a growing need for rules that describe display invariants (e.g., as suggested in [2]); one possible implementation strategy is to exploit active database features such as triggers <ref> [71] </ref>. Third, we must not forget one of the main design goals of visualization systems, namely ease of use, and with that in mind, observe that there remains an unresolved issue regarding how database views for DQM systems should be defined.
Reference: [72] <author> K. Melhorn. </author> <title> Graph Algorithms and NP-Completeness. </title> <publisher> Springer-Verlag, </publisher> <year> 1984. </year>
Reference: [73] <author> E.B. Messinger, L.A. Rowe, and R.R. Henry. </author> <title> A Divide-and-Conquer Algorithm for the Automatic Layout of Large Directed Graphs. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(1) </volume> <pages> 1-12, </pages> <year> 1991. </year>
Reference: [74] <author> K. Misue. </author> <title> D-ABDUCTOR 2.0 User Manual. </title> <type> Technical Report IIAS-RR-93-9E, </type> <institution> Fujitsu Laboratories, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: Although graphical FEVs can be implemented efficiently using dedicated graphics hardware, the technique is limited to non-nested graphs with a single FP. Abridgment This EA, used in the D-ABDUCTOR system <ref> [74] </ref> for viewing and manipulating compound digraphs [109], generates hybrid filtering fisheye and non-geometric distorting fisheye views. Priorities are computed as a linear combination of three quantities: structural importance (vertex nesting depth); semantic importance (API); and focal importance (proximity to the set of FPs). <p> Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97] 05/92 Abridgment <ref> [74] </ref> 05/93 Variable Zoom [100] 05/93 Fractal views of trees [63] 08/93 PLUM [88] 08/93 Layout-indep. FEVs [78, 79] 08/93 Continuous Zoom [6] 05/94 CATGraph [60] 11/94 Table 3.3: A comparison of existing fisheye view techniques. 4. <p> Table 4.1 60 View Category View Def 'n DM Dynamic Implicit FEV PLUM [88] core -rel pos-Filtering FEV Generalized FEV of trees [34] core, tc, sp -- Geometric Distorting FEV CATGraphs [60] core -rel/abs pos, rel/abs size-Graphical FEV of Graphs [96, 97] core -rel/abs pos, rel/abs size-Non-geometric Distorting FEV D-ABDUCTOR <ref> [74] </ref> core, tc, sp -rel size-Layout-indep. FEV [78, 79] core, tc -rel size-Treemaps [56, 112] core, tc -rel size-Adorned FEV PLUM [88] core P -pos,size Table 4.1: Characterization of Dynamic Fisheye Views. <p> Several notions of similarity for this application are defined on page 89. The first is identical to the notion of similarity used in filtering fisheye views and similar to the notion of priority in the Abridgement facility of the D-ABDUCTOR system <ref> [74] </ref>. The resulting non-geometric distorting FEV is shown in Figure 5.32 on page 95. The second notion of similarity is defined in terms of the proximity in the nesting hierarchy and is scaled by focal point magnification; the result is shown in Figure 5.33 on page 96. <p> (P,v,f)+1) / mag (f)) * -1) - % Similarity based on distance only 89 The above view defines two similarity attributes; the first is identical to the notion degree of importance in the generalized fisheye view [34] and the notion of priority in the Abridgment facility of the D-ABDUCTOR system <ref> [74] </ref>, while the second is based on proximity (inverse distance) in the nesting hierarchy scaled by focal point magnification. 90 portion of the entire graph is visible. <p> (Sections 4.3 and 4.5.3); 5. simulations and DM and view definition expressiveness requirements for existing fisheye view techniques: * Dynamic Implicit FEVs: PLUM [88] * Filtering FEVs: Generalized FEV of trees [34] * Geometric Distorting FEVs: CATGraphs [60] and Graphical FEV of Graphs [96, 97] * Non-geometric Distorting FEVs: D-ABDUCTOR <ref> [74] </ref> and Layout-indep.
Reference: [75] <author> K. Misue and K. Sugiyama. </author> <title> Multi-viewpoint Perspective Display Methods: Formulation and Application to Compound Graphs. </title> <booktitle> In 4th Intl. Conf. on Human-Computer Interaction, </booktitle> <volume> volume 1, </volume> <pages> pages 834-838, </pages> <address> Stuttgart, Germany, </address> <month> September </month> <year> 1991. </year> <pages> Elsevier. </pages>
Reference-contexts: Ironically, the highly 27 interactive nature of the technique makes it less appropriate for exploring very large hierarchies amore automatic solution would be preferred (i.e., it is unrealistic to expect users to work hard to simplify visualizations of large hierarchies). Compound Digraph Display Methods Three multi-viewpoint perspective (MVP) EAs <ref> [75, 108] </ref> have been applied to drawings of compound digraphs [109]: the fisheye EA uses a polar transformation to map each point in the original drawing to the perimeter of a circle (polar distorting FEV); the orthogonal fisheye EA uses independent Cartesian transformations to map each point to the perimeter of <p> Animation can be used to reduce abrupt changes caused by a change in the set of FPs. Variable Zoom This EA [100] generates hybrid filtering fisheye and globally scaled views of hierarchically nested graphs. The EA is similar to the Biform Display Method <ref> [75] </ref>, and is limited to drawings in which the projections of nodes on the x and y axes do not overlap. The contents of each node are recursively rescaled in a top-down fashion. <p> Unlike StretchTools, however, which permits arbitrary distortions of the screen, the distortions obtained by this EA are more restrictive due to its use of the balance factor as described above. Furthermore, without explicit notions of DOI and decomposition into API and Dist, these and other techniques <ref> [50, 68, 75, 89] </ref> are less appropriate for automatic generation of EVs. Fractal Views of Trees This EA exploits fractal self-similarity to aid the visualization of large trees in 3-D [63], and generates hybrid filtered, static implicit fisheye, and globally scaled views. <p> Perspective Wall [68] 04/91 Tree-Maps [56, 57, 103, 112] 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods <ref> [75, 108] </ref> 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97] 05/92 Abridgment [74] 05/93 Variable Zoom [100] 05/93 Fractal views of trees [63] 08/93 PLUM [88] 08/93 Layout-indep. <p> The result is shown in Figure 5.24 on page 88 as is the associated Dye view definition. The same approach can be used to generate both graphical fisheye views [96, 97] and multi-viewpoint perspective techniques <ref> [75, 108] </ref>. A graphical fisheye view thus obtained is shown in Figure 5.25 on page 88. Several points require further elaboration. First, note that by employing relative size properties, the above approach does not compute the exact distorted sizes.
Reference: [76] <author> D.A. Mitta. </author> <title> A Fisheye Presentation Strategy: Aircraft Maintenance Data. </title> <booktitle> In INTERACT '90, </booktitle> <pages> pages 875-880. </pages> <publisher> IFIP, Elsevier, </publisher> <month> August </month> <year> 1990. </year>
Reference-contexts: As mentioned earlier, in a generalized FEV, DOI (p) = API (p) - Dist (p; f ), given FP f . 24 FPs: Dynamic and Global. Aircraft Maintenance Diagrams This EA, an extension of the generalized FEV strategy for presenting aircraft maintenance data <ref> [76] </ref>, generates filtering FEVs. The overall goal of this work was to enhance the usefulness and effectiveness of computer-based maintenance and diagnostic tools for aircraft repair technicians. <p> Number of Focal Points number of FPs explicitly supported by the EA: None (0); Single (1); Multiple (fl). Approach Date Emphasis Priorities # of Inputs Technique FPs i/f /g/ng/a s/a/d 0/1/fl s/h/g/n/fl Non-graph-oriented: Generalized FEVs [34] 04/86 Aircraft maintenance <ref> [76] </ref> 08/90 Perspective Wall [68] 04/91 Tree-Maps [56, 57, 103, 112] 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display
Reference: [77] <author> J. Nielsen. </author> <title> Hypertext and Hypermedia. </title> <publisher> Academic Press, </publisher> <address> San Diego, CA, 92101, </address> <year> 1990. </year>
Reference-contexts: One of the oldest documented user-interface problems in hypertext systems is the lost-in-hyperspace phenomenon <ref> [77] </ref>. As a partial solution, many have proposed a variety of overview diagrams [43, 69, 77, 117], and in earlier work, we showed how the layout-independent fisheye view approach [78, 79] can be applied to the visualization of nested hypertext networks. <p> One of the oldest documented user-interface problems in hypertext systems is the lost-in-hyperspace phenomenon [77]. As a partial solution, many have proposed a variety of overview diagrams <ref> [43, 69, 77, 117] </ref>, and in earlier work, we showed how the layout-independent fisheye view approach [78, 79] can be applied to the visualization of nested hypertext networks.
Reference: [78] <author> E.G. Noik. </author> <title> Exploring Large Hyperdocuments: Fisheye Views of Nested Networks. </title> <booktitle> In Proc. ACM Hypertext '93, </booktitle> <pages> pages 192-205, </pages> <address> Seattle, WA, </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Animation can be used to make this transition smoother enabling the user to perceive the desired change with less cognitive effort. Layout-independent FEVs This EA generates hybrid filtering fisheye, non-geometric distorting fisheye, and adorned views <ref> [78, 79] </ref>. While most distorting FEV EAs distort normal views, this EA uses built-in and client PAs to guide the drawing of the EV. The EA supports nested graphs with multiple variable magnification strength FPs, and generates EVs by a two step process. First vertex priorities are computed. <p> FEVs <ref> [78, 79] </ref> 08/93 Continuous Zoom [6] 05/94 CATGraph [60] 11/94 Table 3.3: A comparison of existing fisheye view techniques. 4. <p> FEV <ref> [78, 79] </ref> core, tc -rel size-Treemaps [56, 112] core, tc -rel size-Adorned FEV PLUM [88] core P -pos,size Table 4.1: Characterization of Dynamic Fisheye Views. View definition language requirements refer to the core component of Dye (including focal points), transitive closure (tc), and shortest paths (sp). <p> One of the oldest documented user-interface problems in hypertext systems is the lost-in-hyperspace phenomenon [77]. As a partial solution, many have proposed a variety of overview diagrams [43, 69, 77, 117], and in earlier work, we showed how the layout-independent fisheye view approach <ref> [78, 79] </ref> can be applied to the visualization of nested hypertext networks. <p> The previous two examples demonstrate the key idea of the layout-independent fisheye view <ref> [78, 79] </ref> a technique that we proposed several years ago. This key idea is that distorted views of nested graphs should be obtained by varying the relative sizes of nodes in the nesting hierarchy independently of the nodes' positions in the original layout. <p> FEV <ref> [78, 79] </ref> * Treemaps [56, 112] 6. examples of powerful and flexible visualization strategies realized through the composition of simpler techniques - DQ, DM, and graph layout. 6.5 Conclusion Throughout this dissertation we have repeatedly argued that since the effectiveness of both DQ and DM techniques is fundamentally linked to the
Reference: [79] <author> E.G. Noik. </author> <title> Layout-independent Fisheye Views of Nested Graphs. </title> <booktitle> In VL '93: IEEE Symposium on Visual Languages, </booktitle> <pages> pages 336-341, </pages> <address> Bergen, Norway, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: Animation can be used to make this transition smoother enabling the user to perceive the desired change with less cognitive effort. Layout-independent FEVs This EA generates hybrid filtering fisheye, non-geometric distorting fisheye, and adorned views <ref> [78, 79] </ref>. While most distorting FEV EAs distort normal views, this EA uses built-in and client PAs to guide the drawing of the EV. The EA supports nested graphs with multiple variable magnification strength FPs, and generates EVs by a two step process. First vertex priorities are computed. <p> FEVs <ref> [78, 79] </ref> 08/93 Continuous Zoom [6] 05/94 CATGraph [60] 11/94 Table 3.3: A comparison of existing fisheye view techniques. 4. <p> FEV <ref> [78, 79] </ref> core, tc -rel size-Treemaps [56, 112] core, tc -rel size-Adorned FEV PLUM [88] core P -pos,size Table 4.1: Characterization of Dynamic Fisheye Views. View definition language requirements refer to the core component of Dye (including focal points), transitive closure (tc), and shortest paths (sp). <p> The second notion of similarity is defined in terms of the proximity in the nesting hierarchy and is scaled by focal point magnification; the result is shown in Figure 5.33 on page 96. These examples demonstrate the key idea of the layout-independent fisheye view technique which we described in <ref> [79] </ref>. <p> One of the oldest documented user-interface problems in hypertext systems is the lost-in-hyperspace phenomenon [77]. As a partial solution, many have proposed a variety of overview diagrams [43, 69, 77, 117], and in earlier work, we showed how the layout-independent fisheye view approach <ref> [78, 79] </ref> can be applied to the visualization of nested hypertext networks. <p> The previous two examples demonstrate the key idea of the layout-independent fisheye view <ref> [78, 79] </ref> a technique that we proposed several years ago. This key idea is that distorted views of nested graphs should be obtained by varying the relative sizes of nodes in the nesting hierarchy independently of the nodes' positions in the original layout. <p> FEV <ref> [78, 79] </ref> * Treemaps [56, 112] 6. examples of powerful and flexible visualization strategies realized through the composition of simpler techniques - DQ, DM, and graph layout. 6.5 Conclusion Throughout this dissertation we have repeatedly argued that since the effectiveness of both DQ and DM techniques is fundamentally linked to the
Reference: [80] <author> E.G. Noik. </author> <title> Encoding Presentation Emphasis Algorithms for Graphs. </title> <booktitle> In Graph Drawing (Proc. GD '94), number 894 in Lecture Notes in Computer Science, </booktitle> <pages> pages 428-435. </pages> <publisher> Springer-Verlag, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: We first described the use of view definition languages to encode FEV degree of interest functions in <ref> [80] </ref>. At that time, however, we suggested that view definition languages should also be used to compute static mappings between attributes and graphic properties.
Reference: [81] <author> E.G. Noik. </author> <title> A Space of Presentation Emphasis Techniques for Visualizing Graphs. </title> <booktitle> In GI '94: Graphics Interface 1994, </booktitle> <pages> pages 225-234, </pages> <address> Banff, AL, Canada, </address> <month> May </month> <year> 1994. </year>
Reference-contexts: For brevity, throughout the following review Section we refer to an algorithm that generates an emphasized view as EA (emphasis algorithm), and an algorithm that computes priorities as PA (priority algorithm). The review summarizes observations that we reported in <ref> [81] </ref>. 23 categories could be added. 3.2.3 Non-graph-oriented Techniques Generalized Fisheye Views This formalism for reducing the complexity of highly detailed visualizations by displaying subsets of the most relevant details [34], generates filtering FEVs.
Reference: [82] <author> John K. Ousterhout. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference: [83] <author> X. Pintado. </author> <title> Selection and Exploration in an Object-Oriented Environment: The Affinity Browser. </title> <editor> In D. Tsichritzis, editor, </editor> <booktitle> Object Management, </booktitle> <pages> pages 79-88. </pages> <institution> Centre Universitaire d'Informatique, University of Geneva, </institution> <month> July </month> <year> 1990. </year> <note> See also http://cuiwww.unige.ch/OSG. </note>
Reference-contexts: This general form can be used to capture both geometric [40] (e.g., Minkowski metric [95]) and feature-based [113] notions of similarity, as well as domain-specific similarity functions such as those used in the Affinity Browser <ref> [83] </ref>.
Reference: [84] <author> J. Pitkow and K.A. Bharat. WebViz: </author> <title> A Tool for WWW Access Log Analysis. </title> <booktitle> In Proc. Second WWW Conference, </booktitle> <month> October </month> <year> 1994. </year>
Reference-contexts: The selected object's label is displayed in full on the graph, and its type and identifier are displayed in a message box. In this example node image was selected. 2.3 Dynamic Mapping In mapping, data attributes are mapped onto graphic properties <ref> [2, 7, 8, 14, 48, 84] </ref>. For example, the temperature of a data point is often mapped onto colour using a heat scale, the rate or volume of flow through a network is often depicted by link thickness, and the population of a city is often conveyed by node size. <p> For this reason, such query components have also been called dynamic query filters [2]. The filtering effects of the components are typically combined using AND logic (set intersection). 15 Data Type Component Numeric single or double-ended sliders <ref> [2, 3, 38, 84, 121] </ref> frequency distribution histograms [26, 27] Alphanumeric scrolling lists [38] Alpha slider [1] regular expression matching [84] Nominal/Categorical checkboxes, buttons [3, 38] scrolling lists [38] Aggregate Aggregate Manipulator [38] Table 3.1: Some common dynamic query components. <p> The filtering effects of the components are typically combined using AND logic (set intersection). 15 Data Type Component Numeric single or double-ended sliders [2, 3, 38, 84, 121] frequency distribution histograms [26, 27] Alphanumeric scrolling lists [38] Alpha slider [1] regular expression matching <ref> [84] </ref> Nominal/Categorical checkboxes, buttons [3, 38] scrolling lists [38] Aggregate Aggregate Manipulator [38] Table 3.1: Some common dynamic query components. A number of DQ component types have appeared in existing DQ systems and several common examples are summarized in Table 3.1. <p> As in [8] node attributes could be aggregations over incident links, but here too, such attributes apparently are precomputed. Webviz Webviz is a tool for visualizing and analyzing World-Wide Web access logs <ref> [84] </ref>. Webviz provides very rudimentary query capability, namely the capability to mask nodes by regular expression matching. Strictly speaking, this form of query is not direct-manipulation (and therefore not DQ), as it involves a relatively complex user task - filling in a textual regular expression. <p> p p ASTER/COLOR/EXPAND [66] 92 p p p Health Statistics [85] 93 p p p HierNet [27] 93 p p p Seenet, NicheWorks [26] 93 p p p Filter/flow proposal [104, 105] 93 p p p Filmfinder [2] 94 p p p Aggregate Manipulator [38] 94 p p p Webviz <ref> [84] </ref> 94 p p p Network Configuration [65] 94 p p p SDM [11, 12] 95 p p p PDQ Tree Browser [64] 95 p p p Table 3.2: Summary of existing Dynamic Query system features. 3.1.4 Limitations As evidenced by Table 3.2, the main limitation found in existing DQ systems <p> Note that the Graphite system could be easily customized to visualize Web server log statistics, in a fashion similar to WebViz <ref> [84] </ref>.
Reference: [85] <author> C. Plaisant. </author> <title> Dynamic Queries on a Health Statistics Map. </title> <booktitle> In Proc. Conf. American Statistical Assoc., </booktitle> <pages> pages 18-23, </pages> <address> Alexandria, VA, </address> <year> 1993. </year>
Reference-contexts: Performance results were measured in terms of the time required to answer questions and the number of correct answers. Results showed that the dynamic query interface was as good or superior in all five tasks. Health Statistics This application allows statisticians to study cancer rates throughout the United States <ref> [85] </ref>. The database contains annual statistics for each state sampled between 1950 and 1970; each data point consists of several attributes including cancer rate, per capita income, college education, and smoking habits. <p> as in hierarchical data sets. 21 System Year Mapping Views Inputs None Static Dynamic None Predefined User-defined Flat Hierarchical Graph Network Visualization [8] 90 p p p Homefinder [121] 92 p p p Periodic Table of Elements [3] 92 p p p ASTER/COLOR/EXPAND [66] 92 p p p Health Statistics <ref> [85] </ref> 93 p p p HierNet [27] 93 p p p Seenet, NicheWorks [26] 93 p p p Filter/flow proposal [104, 105] 93 p p p Filmfinder [2] 94 p p p Aggregate Manipulator [38] 94 p p p Webviz [84] 94 p p p Network Configuration [65] 94 p p
Reference: [86] <author> R. Ramakrishnan, K.A. Ross, D. Srivastava, and S. Sudarshan. </author> <title> Efficient Incremental Evaluation of Queries with Aggregation. </title> <booktitle> In Proc. ILPS '94, </booktitle> <pages> pages 204-218, </pages> <year> 1994. </year>
Reference: [87] <author> E. Reingold and J. Tilford. </author> <title> Tidier Drawings of Trees. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-7(2):223-228, </volume> <year> 1981. </year>
Reference: [88] <author> S.P. Reiss. </author> <title> A Framework for Abstract 3D Visualization. </title> <booktitle> In VL '93: IEEE Symposium on Visual Languages, </booktitle> <pages> pages 108-115, </pages> <address> Bergen, Norway, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: from the effect of point perspective in 3-D, by which nearby points loom large and distant points appear small; implicit FEVs are usually static (e.g., [30, 63, 89]), but may be dynamic if the 3-D layout is permitted to be altered (e.g., by moving higher priority nodes to the foreground <ref> [88] </ref>). There are at least three types of emphasized views (EVs). A filtered view displays a subset of elements and suppresses the rest this can be accomplished by zooming or by filtering according to elements' priorities (display elements with priorities above some threshold, suppress others). <p> An adorned view emphasizes elements by varying other visual presentation variables such as colour, shading, line style and thickness, as well as audio [57], and motion (e.g., in-betweening animation <ref> [88] </ref>, vertical oscillations and small random movements [30], vibration or pulsing [100]). Figure 3.1 shows a normal view of this taxonomy, while Figures 3.2, 3.3, and 3.4 show examples of other views of the same taxonomy. <p> In addition to this fractal pruning, each visible node is resized so that its size is proportional to its fractal value. PLUM This system supports the visualization of abstract data in 3-D <ref> [88] </ref>, and generates hybrid implicit fisheye (static and dynamic) and adorned views. Although it can generate a variety of static and dynamic visualizations, PLUM has been aimed primarily at displaying information about software structures and is best at visualizing graphs, as it provides a variety of 3-D graph layout algorithms. <p> 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97] 05/92 Abridgment [74] 05/93 Variable Zoom [100] 05/93 Fractal views of trees [63] 08/93 PLUM <ref> [88] </ref> 08/93 Layout-indep. FEVs [78, 79] 08/93 Continuous Zoom [6] 05/94 CATGraph [60] 11/94 Table 3.3: A comparison of existing fisheye view techniques. 4. <p> The former dictates the kinds of similarity (distance) attributes that must be expressed, while the latter states how the derived attributes are to be mapped onto graphic (or more generally, presentation) properties. Table 4.1 60 View Category View Def 'n DM Dynamic Implicit FEV PLUM <ref> [88] </ref> core -rel pos-Filtering FEV Generalized FEV of trees [34] core, tc, sp -- Geometric Distorting FEV CATGraphs [60] core -rel/abs pos, rel/abs size-Graphical FEV of Graphs [96, 97] core -rel/abs pos, rel/abs size-Non-geometric Distorting FEV D-ABDUCTOR [74] core, tc, sp -rel size-Layout-indep. <p> FEV [78, 79] core, tc -rel size-Treemaps [56, 112] core, tc -rel size-Adorned FEV PLUM <ref> [88] </ref> core P -pos,size Table 4.1: Characterization of Dynamic Fisheye Views. View definition language requirements refer to the core component of Dye (including focal points), transitive closure (tc), and shortest paths (sp). <p> The P in the bottom right cell refers to the set of all available DM properties. summarizes the requirements to simulate the 5 main categories of FEV techniques as defined in Section 3.2.2. 4.6.1 Dynamic Implicit FEVs One of the very few systems that generated dynamic implicit FEVs was PLUM <ref> [88] </ref>. In this system, a data attribute could be mapped onto the node relative z position in a three dimensional display. <p> The PLUM system <ref> [88] </ref>, for example, permitted a predefined priority attribute to be mapped onto any presentation property. <p> For example, Graphite could be used to generate Cone Tree visualizations [89] if its layout component were extended to include a three-dimensional cone tree layout algorithm. Similarly, many 3-D techniques (e.g., 3-D mapping strategies explored with PLUM <ref> [88] </ref>) could be realized if Graphite had 3-D graphics capability; the current Graphite implementation already supports 3-D versions of all available graph layout algorithms (see Section A.3) and 3-D DM. The last implementation-related limitation concerns how dynamic attribute expressions are evaluated. <p> visualization systems by permitting database updates to occur while data is being visualized thereby making it possible to create powerful active visualizations such as network monitoring tools (Sections 4.3 and 4.5.3); 5. simulations and DM and view definition expressiveness requirements for existing fisheye view techniques: * Dynamic Implicit FEVs: PLUM <ref> [88] </ref> * Filtering FEVs: Generalized FEV of trees [34] * Geometric Distorting FEVs: CATGraphs [60] and Graphical FEV of Graphs [96, 97] * Non-geometric Distorting FEVs: D-ABDUCTOR [74] and Layout-indep.
Reference: [89] <author> G.G. Robertson, J.D. Mackinlay, and S.K. Card. </author> <title> Cone Trees: Animated 3D Visualizations of Hierarchical Information. </title> <booktitle> In ACM CHI '91, </booktitle> <pages> pages 189-194. </pages> <publisher> ACM, </publisher> <month> April </month> <year> 1991. </year>
Reference-contexts: A normal view is a layout in which all elements have identical priorities, or, equivalently, a view with no FPs. An implicit FEV arises from the effect of point perspective in 3-D, by which nearby points loom large and distant points appear small; implicit FEVs are usually static (e.g., <ref> [30, 63, 89] </ref>), but may be dynamic if the 3-D layout is permitted to be altered (e.g., by moving higher priority nodes to the foreground [88]). There are at least three types of emphasized views (EVs). <p> Cone Trees Cone trees display hierarchical information by using 3-D graphics and interactive animation <ref> [89] </ref>. By limiting the domain of inputs to hierarchies, Cone Tree visualizations were not exposed to many of the problems that complicated the design of SemNet [30] and increased cognitive load. <p> Unlike StretchTools, however, which permits arbitrary distortions of the screen, the distortions obtained by this EA are more restrictive due to its use of the balance factor as described above. Furthermore, without explicit notions of DOI and decomposition into API and Dist, these and other techniques <ref> [50, 68, 75, 89] </ref> are less appropriate for automatic generation of EVs. Fractal Views of Trees This EA exploits fractal self-similarity to aid the visualization of large trees in 3-D [63], and generates hybrid filtered, static implicit fisheye, and globally scaled views. <p> s/h/g/n/fl Non-graph-oriented: Generalized FEVs [34] 04/86 Aircraft maintenance [76] 08/90 Perspective Wall [68] 04/91 Tree-Maps [56, 57, 103, 112] 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) <ref> [89] </ref> 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97] 05/92 Abridgment [74] 05/93 Variable Zoom [100] 05/93 Fractal views of trees [63] 08/93 PLUM [88] 08/93 Layout-indep. <p> 04/86 Aircraft maintenance [76] 08/90 Perspective Wall [68] 04/91 Tree-Maps [56, 57, 103, 112] 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) <ref> [89] </ref> 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97] 05/92 Abridgment [74] 05/93 Variable Zoom [100] 05/93 Fractal views of trees [63] 08/93 PLUM [88] 08/93 Layout-indep. <p> For example, Graphite could be used to generate Cone Tree visualizations <ref> [89] </ref> if its layout component were extended to include a three-dimensional cone tree layout algorithm.
Reference: [90] <author> S.F. Roth, J. Kolojejchick, J. Mattis, and J. Goldstein. </author> <title> Interactive Graphic Design using Automatic Presentation Knowledge. </title> <booktitle> In Proc. ACM CHI '94, </booktitle> <pages> pages 112-117, </pages> <address> Boston, MA, </address> <month> April </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: Data attributes can be of different data types; there have been a number of efforts at characterizing data for the purpose of automatic design of graphical and textual displays. Among these A Presentation Tool (APT) [67] and SAGE <ref> [90, 91] </ref> use knowledge-based approaches for synthesizing appropriate visualizations by combining common business visualizations such as bar charts and x-y charts, as does A Network Diagram Designer (ANDD) [70] for node-and-link diagrams. <p> As such, there are still many avenues to explore. In particular, unlike more established and mature research areas, there is relatively little theoretical work in this area. However, the state of affairs is gradually improving. Work in data characterization (e.g., <ref> [67, 70, 90, 91] </ref>) now provides a better understanding of the role and importance of data classifications in generating meaningful and effective visualizations.
Reference: [91] <author> S.F. Roth and J. Mattis. </author> <title> Data Characterization for Intelligent Graphics Presentation. </title> <booktitle> In Proc. ACM CHI '90, </booktitle> <pages> pages 193-200, </pages> <address> Seattle, WA, </address> <month> April </month> <year> 1990. </year> <note> ACM. </note>
Reference-contexts: Data attributes can be of different data types; there have been a number of efforts at characterizing data for the purpose of automatic design of graphical and textual displays. Among these A Presentation Tool (APT) [67] and SAGE <ref> [90, 91] </ref> use knowledge-based approaches for synthesizing appropriate visualizations by combining common business visualizations such as bar charts and x-y charts, as does A Network Diagram Designer (ANDD) [70] for node-and-link diagrams. <p> As such, there are still many avenues to explore. In particular, unlike more established and mature research areas, there is relatively little theoretical work in this area. However, the state of affairs is gradually improving. Work in data characterization (e.g., <ref> [67, 70, 90, 91] </ref>) now provides a better understanding of the role and importance of data classifications in generating meaningful and effective visualizations.
Reference: [92] <author> L.A. Rowe, M. Davis, E. Messinger, C. Meyer, C. Spirakis, and Tuan A. </author> <title> A Browser for Directed Graphs. </title> <journal> Software-Practice and Experience, </journal> <volume> 17(1) </volume> <pages> 61-76, </pages> <month> January </month> <year> 1987. </year>
Reference: [93] <author> H. Samet. </author> <title> The Quadtree and Related Hierarchical Data Structures. </title> <journal> ACM Computing Surveys, </journal> <volume> 16(2) </volume> <pages> 187-260, </pages> <month> June </month> <year> 1984. </year>
Reference-contexts: A number of data structures for evaluating range and partial-match queries (e.g., partitioned hash functions, k-d-trees) have been studied and compared <ref> [55, 93, 94] </ref>. An integrity constraint is a restriction on some aspect of a relation. There are two different kinds of restrictions: structural constraints such as functional dependencies, and semantic constraints that restrict the values of an attribute to some range or express arithmetic relationships among several attributes.
Reference: [94] <author> H. Samet. </author> <title> The Design and Analysis of Spatial Data Structures. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1989. </year> <month> 111 </month>
Reference-contexts: A number of data structures for evaluating range and partial-match queries (e.g., partitioned hash functions, k-d-trees) have been studied and compared <ref> [55, 93, 94] </ref>. An integrity constraint is a restriction on some aspect of a relation. There are two different kinds of restrictions: structural constraints such as functional dependencies, and semantic constraints that restrict the values of an attribute to some range or express arithmetic relationships among several attributes.
Reference: [95] <author> D. Sankoff and J.B. Kruskal. </author> <title> Time Warps, String Edits, and Macromolecules: The Theory and Practice of Sequence Comparison. </title> <publisher> Addison-Wesley, </publisher> <year> 1983. </year>
Reference-contexts: A family of reasonable similarity functions can be obtained with our interactive dialog box (next Section); an even more limited class of similarity functions can be obtained by restricting this technique to instances of the Minkowski metric <ref> [95] </ref>. Given one or more similarity attributes, users can interactively select subsets of nodes or links to be focal points by pointing and clicking. Each click that adds or removes a focal point causes the values of all similarity attributes to be dynamically and incrementally re-evaluated. <p> Notice that the general form of our similarity function for quantitative attributes is very similar to the more restrictive Minkowski metric <ref> [95] </ref>: i=1 p p When p = 2, the Minkowski metric gives rise to the Euclidean distance in n-dimensional space, and when p = 1 it is the city-block distance. <p> This general form can be used to capture both geometric [40] (e.g., Minkowski metric <ref> [95] </ref>) and feature-based [113] notions of similarity, as well as domain-specific similarity functions such as those used in the Affinity Browser [83].
Reference: [96] <author> M. Sarkar and M.H. Brown. </author> <title> Graphical Fisheye Views of Graphs. </title> <booktitle> In Proc. ACM CHI '92, </booktitle> <pages> pages 83-91, </pages> <address> Monterey, CA, </address> <month> May </month> <year> 1992. </year> <note> ACM. </note>
Reference-contexts: the interior of the selected regions while simultaneously adjusting the remainder of the layout so that the magnified areas are smoothly integrated with the demagnified ones. 1 In fact, the authors show an example of stretching screens generated by the prototype graph browser which was used to display graphical FEVs <ref> [96, 97] </ref>. 26 3.2.4 Graph-oriented Techniques Generalized FEVs of Trees This EA for simplifying the display of trees by suppressing less relevant nodes [34], generates filtering FEVs. A generalized FEV of a tree is obtained by providing specific instantiations of the API and Dist functions. <p> Since interactive layout algorithm assignment is required to specify multiple local scaling distortions, it is unclear whether the technique is appropriate for generating EVs of large graphs. Graphical FEVs of Graphs This technique <ref> [96, 97] </ref> generates hybrid filtering fisheye and distorting fisheye (polar and orthogonal) views. <p> Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs <ref> [96, 97] </ref> 05/92 Abridgment [74] 05/93 Variable Zoom [100] 05/93 Fractal views of trees [63] 08/93 PLUM [88] 08/93 Layout-indep. FEVs [78, 79] 08/93 Continuous Zoom [6] 05/94 CATGraph [60] 11/94 Table 3.3: A comparison of existing fisheye view techniques. 4. <p> Table 4.1 60 View Category View Def 'n DM Dynamic Implicit FEV PLUM [88] core -rel pos-Filtering FEV Generalized FEV of trees [34] core, tc, sp -- Geometric Distorting FEV CATGraphs [60] core -rel/abs pos, rel/abs size-Graphical FEV of Graphs <ref> [96, 97] </ref> core -rel/abs pos, rel/abs size-Non-geometric Distorting FEV D-ABDUCTOR [74] core, tc, sp -rel size-Layout-indep. FEV [78, 79] core, tc -rel size-Treemaps [56, 112] core, tc -rel size-Adorned FEV PLUM [88] core P -pos,size Table 4.1: Characterization of Dynamic Fisheye Views. <p> The result is shown in Figure 5.24 on page 88 as is the associated Dye view definition. The same approach can be used to generate both graphical fisheye views <ref> [96, 97] </ref> and multi-viewpoint perspective techniques [75, 108]. A graphical fisheye view thus obtained is shown in Figure 5.25 on page 88. Several points require further elaboration. First, note that by employing relative size properties, the above approach does not compute the exact distorted sizes. <p> We now demonstrate how our approach can be used to simulate two well-known orthogonal geometric distorted view techniques: graphical fisheye views <ref> [96, 97] </ref> and compressed arctangent (CAT) graphs [60]. <p> active visualizations such as network monitoring tools (Sections 4.3 and 4.5.3); 5. simulations and DM and view definition expressiveness requirements for existing fisheye view techniques: * Dynamic Implicit FEVs: PLUM [88] * Filtering FEVs: Generalized FEV of trees [34] * Geometric Distorting FEVs: CATGraphs [60] and Graphical FEV of Graphs <ref> [96, 97] </ref> * Non-geometric Distorting FEVs: D-ABDUCTOR [74] and Layout-indep.
Reference: [97] <author> M. Sarkar and M.H. Brown. </author> <title> Graphical Fisheye Views of Graphs. </title> <type> Technical Report 84, </type> <institution> DEC System Research Center, </institution> <address> Palo Alto, CA, </address> <month> March </month> <year> 1992. </year>
Reference-contexts: the interior of the selected regions while simultaneously adjusting the remainder of the layout so that the magnified areas are smoothly integrated with the demagnified ones. 1 In fact, the authors show an example of stretching screens generated by the prototype graph browser which was used to display graphical FEVs <ref> [96, 97] </ref>. 26 3.2.4 Graph-oriented Techniques Generalized FEVs of Trees This EA for simplifying the display of trees by suppressing less relevant nodes [34], generates filtering FEVs. A generalized FEV of a tree is obtained by providing specific instantiations of the API and Dist functions. <p> Since interactive layout algorithm assignment is required to specify multiple local scaling distortions, it is unclear whether the technique is appropriate for generating EVs of large graphs. Graphical FEVs of Graphs This technique <ref> [96, 97] </ref> generates hybrid filtering fisheye and distorting fisheye (polar and orthogonal) views. <p> Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs <ref> [96, 97] </ref> 05/92 Abridgment [74] 05/93 Variable Zoom [100] 05/93 Fractal views of trees [63] 08/93 PLUM [88] 08/93 Layout-indep. FEVs [78, 79] 08/93 Continuous Zoom [6] 05/94 CATGraph [60] 11/94 Table 3.3: A comparison of existing fisheye view techniques. 4. <p> Table 4.1 60 View Category View Def 'n DM Dynamic Implicit FEV PLUM [88] core -rel pos-Filtering FEV Generalized FEV of trees [34] core, tc, sp -- Geometric Distorting FEV CATGraphs [60] core -rel/abs pos, rel/abs size-Graphical FEV of Graphs <ref> [96, 97] </ref> core -rel/abs pos, rel/abs size-Non-geometric Distorting FEV D-ABDUCTOR [74] core, tc, sp -rel size-Layout-indep. FEV [78, 79] core, tc -rel size-Treemaps [56, 112] core, tc -rel size-Adorned FEV PLUM [88] core P -pos,size Table 4.1: Characterization of Dynamic Fisheye Views. <p> The result is shown in Figure 5.24 on page 88 as is the associated Dye view definition. The same approach can be used to generate both graphical fisheye views <ref> [96, 97] </ref> and multi-viewpoint perspective techniques [75, 108]. A graphical fisheye view thus obtained is shown in Figure 5.25 on page 88. Several points require further elaboration. First, note that by employing relative size properties, the above approach does not compute the exact distorted sizes. <p> We now demonstrate how our approach can be used to simulate two well-known orthogonal geometric distorted view techniques: graphical fisheye views <ref> [96, 97] </ref> and compressed arctangent (CAT) graphs [60]. <p> active visualizations such as network monitoring tools (Sections 4.3 and 4.5.3); 5. simulations and DM and view definition expressiveness requirements for existing fisheye view techniques: * Dynamic Implicit FEVs: PLUM [88] * Filtering FEVs: Generalized FEV of trees [34] * Geometric Distorting FEVs: CATGraphs [60] and Graphical FEV of Graphs <ref> [96, 97] </ref> * Non-geometric Distorting FEVs: D-ABDUCTOR [74] and Layout-indep.
Reference: [98] <author> M. Sarkar and S.P. Reiss. </author> <title> Manipulating Screen Space with Stretch Tools: Visualizing Large Structure on Small Screen. </title> <type> Technical Report CS-92-42, </type> <institution> Dept. of Comp. Sci., Brown U., Providence, RI, </institution> <month> September </month> <year> 1992. </year>
Reference-contexts: Notice that while Treemaps provides the mechanism to generate visualizations that incorporate emphasis, it does not solve the problem of assigning meaningful weights to nodes given a set of FPs. StretchTools This EA <ref> [98] </ref> used to manipulate 2-D screen space, generates locally scaled views. The user interface is based on the metaphor of stretching a rubber sheet by using handles and clamps. <p> It was proposed to overcome the difficulties associated with StretchTools <ref> [98] </ref>, and allows users to specify polygonal FP regions; global scaling is used to enlarge the interior of the selected regions while simultaneously adjusting the remainder of the layout so that the magnified areas are smoothly integrated with the demagnified ones. 1 In fact, the authors show an example of stretching <p> A balance factor is used to control the ratio of detail to context at each level in the hierarchy, meaning that all zoomed nodes at a given level are magnified equally. Variable Zoom, like StretchTools <ref> [98] </ref>, was designed for interactive rather than automatic operation the user interacts to selectively magnify and demagnify portions of the display. <p> Approach Date Emphasis Priorities # of Inputs Technique FPs i/f /g/ng/a s/a/d 0/1/fl s/h/g/n/fl Non-graph-oriented: Generalized FEVs [34] 04/86 Aircraft maintenance [76] 08/90 Perspective Wall [68] 04/91 Tree-Maps [56, 57, 103, 112] 10/91 Stretch Tools <ref> [98] </ref> 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical
Reference: [99] <author> M. Sarkar, S.S. Snibbe, and S.P. Reiss. </author> <title> Stretching the Rubber Sheet: A Metaphor for Visualizing Large Structures on Small Screens. </title> <booktitle> In Proc. ACM UIST '93, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: On the positive side, since the EA can be used to stretch a screen that contains arbitrary graphical objects, it follows that the approach can be used to manipulate drawings of graphs both flat and nested. 1 Morphing This EA <ref> [99] </ref> is based on image transformation technology and generates globally scaled views. <p> Approach Date Emphasis Priorities # of Inputs Technique FPs i/f /g/ng/a s/a/d 0/1/fl s/h/g/n/fl Non-graph-oriented: Generalized FEVs [34] 04/86 Aircraft maintenance [76] 08/90 Perspective Wall [68] 04/91 Tree-Maps [56, 57, 103, 112] 10/91 Stretch Tools [98] 09/92 Morphing <ref> [99] </ref> 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97]
Reference: [100] <author> D. Schaffer, Z. Zuo, L. Bartram, J. Dill, S. Dubs, S. Greenberg, and M. Roseman. </author> <title> Comparing Fisheye and Full-Zoom Techniques for Navigation of Hierarchically Clustered Networks. </title> <booktitle> In Graphics Interface '93, </booktitle> <pages> pages 87-96, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: An adorned view emphasizes elements by varying other visual presentation variables such as colour, shading, line style and thickness, as well as audio [57], and motion (e.g., in-betweening animation [88], vertical oscillations and small random movements [30], vibration or pulsing <ref> [100] </ref>). Figure 3.1 shows a normal view of this taxonomy, while Figures 3.2, 3.3, and 3.4 show examples of other views of the same taxonomy. Note that many algorithms described in the next Section generate hybrid views that exhibit the properties of two or more of these basic views. <p> Animation can be used to reduce abrupt changes caused by a change in the set of FPs. Variable Zoom This EA <ref> [100] </ref> generates hybrid filtering fisheye and globally scaled views of hierarchically nested graphs. The EA is similar to the Biform Display Method [75], and is limited to drawings in which the projections of nodes on the x and y axes do not overlap. <p> Continuous Zoom This EA generates hybrid filtering fisheye and globally scaled views [6], which permit users to view and navigate hierarchically nested graphs by smoothly expanding and shrinking nodes. The technique evolved from the Variable Zoom EA <ref> [100] </ref> and is part of the Intelligent Zoom interface to time-critical systems; unlike the Variable Zoom, however, this EA calculates priorities using four quantities: the node's API, alarm state, connectivity to other important nodes, and perceived user interest (determined by node open and close actions). 2 This layout strategy permits the <p> [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97] 05/92 Abridgment [74] 05/93 Variable Zoom <ref> [100] </ref> 05/93 Fractal views of trees [63] 08/93 PLUM [88] 08/93 Layout-indep. FEVs [78, 79] 08/93 Continuous Zoom [6] 05/94 CATGraph [60] 11/94 Table 3.3: A comparison of existing fisheye view techniques. 4.
Reference: [101] <author> M.H. Scholl, C. Laasch, and M. Tresch. </author> <title> Updatable Views in Object-Oriented Databases. </title> <booktitle> In DOOD '91, </booktitle> <pages> pages 189-207, </pages> <year> 1991. </year>
Reference-contexts: Not all views can be updated the problem of how updates on views can be translated into appropriate updates on the underlying relations is discussed in [21, 61]. View updates in object-oriented models 38 can be simplified if operations are object-preserving <ref> [101] </ref>, meaning that the results of queries are pointers to the input objects (rather than new objects or tuples), allowing updates to immediately propagate from views to base objects and vice versa. <p> The Dye language is an object-oriented algebra that employs schema-preserving relational algebra operations 1 with object-preserving semantics <ref> [101] </ref>. Objects (and their data) are created and destroyed by database insertions and deletions, and can be added to or removed from any number of sets. The idea of object-oriented algebras is not new; one similar model is employed in the COCOON system [101]. <p> relational algebra operations 1 with object-preserving semantics <ref> [101] </ref>. Objects (and their data) are created and destroyed by database insertions and deletions, and can be added to or removed from any number of sets. The idea of object-oriented algebras is not new; one similar model is employed in the COCOON system [101].
Reference: [102] <author> B. Shneiderman. </author> <title> Direct Manipulation: A Step Beyond Programming. </title> <journal> IEEE Computer, </journal> <volume> 16(8) </volume> <pages> 57-69, </pages> <month> August </month> <year> 1983. </year>
Reference-contexts: A set of generic graph layout parameters can be manipulated through an additional dialog box shown on the right. 14 Chapter 3 Related Work 3.1 Dynamic Queries 3.1.1 Definition The dynamic query approach [105] applies the principles of direct manipulation <ref> [102] </ref> to database searching: * visual presentation of the query's components (e.g., as sliders, radio buttons, check boxes, and frequency distribution histograms); * visual presentation of results (e.g., as two dimensional scatter plots); * rapid (100ms), incremental (outputs are inputs), and reversible control of the query; * selection by pointing, not
Reference: [103] <author> B. Shneiderman. </author> <title> Tree visualization with tree-maps: A 2-D space filling approach. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 11(1) </volume> <pages> 1-39, </pages> <month> January </month> <year> 1992. </year>
Reference-contexts: The single FP is changed by scrolling the wall as one would a sheet in a player piano. 25 Treemaps This EA for presenting hierarchical information <ref> [56, 57, 103, 112] </ref>, generates hybrid locally scaled and adorned views. A hierarchy is drawn as a set of nested boxes in which each node is depicted as a rectangular region composed of the rectangular regions that represent its children. <p> Number of Focal Points number of FPs explicitly supported by the EA: None (0); Single (1); Multiple (fl). Approach Date Emphasis Priorities # of Inputs Technique FPs i/f /g/ng/a s/a/d 0/1/fl s/h/g/n/fl Non-graph-oriented: Generalized FEVs [34] 04/86 Aircraft maintenance [76] 08/90 Perspective Wall [68] 04/91 Tree-Maps <ref> [56, 57, 103, 112] </ref> 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32]
Reference: [104] <author> B. Shneiderman. </author> <title> Dynamic Queries for Visual Information Seeking. </title> <type> Technical Report CAR-TR-655 CS-TR-3022 SCR-TR-93-3, </type> <institution> Dept. of Comp. Sci., U. of Maryland, </institution> <month> September </month> <year> 1993. </year>
Reference-contexts: User experiments have shown DQ to be superior to traditional query approaches for many searching tasks <ref> [3, 64, 66, 104, 121] </ref>. DQ and DM are complementary techniques and have been successfully integrated in a number of recent visualization (hereafter DQM) systems (e.g., [2, 3, 8, 11, 12, 26, 27]). <p> Two types of approaches have been proposed to overcome this limitation: to extend the expressive power of DQ (which permits existing attributes to be combined in more powerful ways); and to create additional derived attributes. An example of the former is the filter/flow boolean query interface <ref> [104, 105] </ref> which permits users to combine attributes with boolean operators; an example of the latter is the Aggregate Manipulator [38] which permits users to interactively define a limited class of derived attributes. 1 A second limitation of existing DQ systems stems from the fact that they do not incorporate similarity <p> While explicit Dye view definitions make it possible to encode a broad class of similarity functions, Graphite also allows users to define a restricted class of similarity attributes interactively. By contrast, both the filter/flow boolean query interface <ref> [104, 105] </ref> and the Aggregate Manipulator [38] are too weak to express similarity attributes. The remainder of the dissertation is organized as follows. In Chapter 2 we introduce the main features of the Graphite visualization system through a set of examples. <p> Network Visualization [8] 90 p p p Homefinder [121] 92 p p p Periodic Table of Elements [3] 92 p p p ASTER/COLOR/EXPAND [66] 92 p p p Health Statistics [85] 93 p p p HierNet [27] 93 p p p Seenet, NicheWorks [26] 93 p p p Filter/flow proposal <ref> [104, 105] </ref> 93 p p p Filmfinder [2] 94 p p p Aggregate Manipulator [38] 94 p p p Webviz [84] 94 p p p Network Configuration [65] 94 p p p SDM [11, 12] 95 p p p PDQ Tree Browser [64] 95 p p p Table 3.2: Summary of <p> The Aggregate Manipulator [38] contains a relatively limited view definition facility, and the proposed filter/flow boolean query interface <ref> [104, 105] </ref> would similarly require a relatively simple view component; in particular, both approaches are limited to flat databases and are too weak to express similarity queries. 3.2 Fisheye Views 3.2.1 Definition The generalized FEV formalism [34] is based on the workings of the fisheye or very wide angle lens used <p> In particular, it is desirable to permit users to define views interactively, as with our user-defined similarity dialog box, the Aggregate Manipulator [38], or the filter/flow boolean query interface <ref> [104, 105] </ref>, although the expressive power of such approaches must be carefully weighed against their comparative ease of use and ease of implementation. 6.4 Summary of Contributions The key contributions of this thesis are: 1. to show that in addition to creating ordinary (static) derived attributes, active database views can be
Reference: [105] <author> B. Shneiderman. </author> <title> Dynamic Queries for Visual Information Seeking. </title> <journal> IEEE Software, </journal> <volume> 11(6) </volume> <pages> 70-77, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: Two types of approaches have been proposed to overcome this limitation: to extend the expressive power of DQ (which permits existing attributes to be combined in more powerful ways); and to create additional derived attributes. An example of the former is the filter/flow boolean query interface <ref> [104, 105] </ref> which permits users to combine attributes with boolean operators; an example of the latter is the Aggregate Manipulator [38] which permits users to interactively define a limited class of derived attributes. 1 A second limitation of existing DQ systems stems from the fact that they do not incorporate similarity <p> While explicit Dye view definitions make it possible to encode a broad class of similarity functions, Graphite also allows users to define a restricted class of similarity attributes interactively. By contrast, both the filter/flow boolean query interface <ref> [104, 105] </ref> and the Aggregate Manipulator [38] are too weak to express similarity attributes. The remainder of the dissertation is organized as follows. In Chapter 2 we introduce the main features of the Graphite visualization system through a set of examples. <p> A set of generic graph layout parameters can be manipulated through an additional dialog box shown on the right. 14 Chapter 3 Related Work 3.1 Dynamic Queries 3.1.1 Definition The dynamic query approach <ref> [105] </ref> applies the principles of direct manipulation [102] to database searching: * visual presentation of the query's components (e.g., as sliders, radio buttons, check boxes, and frequency distribution histograms); * visual presentation of results (e.g., as two dimensional scatter plots); * rapid (100ms), incremental (outputs are inputs), and reversible control of <p> Network Visualization [8] 90 p p p Homefinder [121] 92 p p p Periodic Table of Elements [3] 92 p p p ASTER/COLOR/EXPAND [66] 92 p p p Health Statistics [85] 93 p p p HierNet [27] 93 p p p Seenet, NicheWorks [26] 93 p p p Filter/flow proposal <ref> [104, 105] </ref> 93 p p p Filmfinder [2] 94 p p p Aggregate Manipulator [38] 94 p p p Webviz [84] 94 p p p Network Configuration [65] 94 p p p SDM [11, 12] 95 p p p PDQ Tree Browser [64] 95 p p p Table 3.2: Summary of <p> The Aggregate Manipulator [38] contains a relatively limited view definition facility, and the proposed filter/flow boolean query interface <ref> [104, 105] </ref> would similarly require a relatively simple view component; in particular, both approaches are limited to flat databases and are too weak to express similarity queries. 3.2 Fisheye Views 3.2.1 Definition The generalized FEV formalism [34] is based on the workings of the fisheye or very wide angle lens used <p> For example, this figure is suggested as the maximum response time when users manipulate DQ components <ref> [105] </ref>. We believe that it is similarly important that system response to user actions such as selecting or deselecting a focal point, path source or sink, should be likewise efficient. <p> In particular, it is desirable to permit users to define views interactively, as with our user-defined similarity dialog box, the Aggregate Manipulator [38], or the filter/flow boolean query interface <ref> [104, 105] </ref>, although the expressive power of such approaches must be carefully weighed against their comparative ease of use and ease of implementation. 6.4 Summary of Contributions The key contributions of this thesis are: 1. to show that in addition to creating ordinary (static) derived attributes, active database views can be
Reference: [106] <author> M.C. Stone, K. Fishkin, and E.A. Bier. </author> <title> The Movable Filter as a User Interface Tool. </title> <booktitle> In Proc. ACM CHI '94, </booktitle> <pages> pages 306-312, </pages> <address> Boston, MA, </address> <month> April </month> <year> 1994. </year> <note> ACM. </note>
Reference-contexts: It was the realization that no hammer is good for all jobs that lead researchers to seek sufficiently simple yet useful tools that could be added to the growing toolbox of visualization techniques. Examples of such include brushing [7], see-through tools <ref> [9, 106] </ref>, selective dynamic manipulation [11, 12], and of course, dynamic mapping and dynamic queries. We too were motivated by this simpler is better philosophy, as evidenced in the product of this work.
Reference: [107] <author> M. Stonebreaker. </author> <title> Implementation of Integrity Constraints and Views by Query Modification. </title> <booktitle> In Proc. of ACM Conf. on Management of Data, </booktitle> <month> May </month> <year> 1975. </year>
Reference-contexts: The basic approach presented here is not new; one of the earliest related proposals was based on the use of a transformational framework for maintaining derived data [62]. The idea described therein was to replace costly global computations first suggested as a means to materialize views <ref> [107] </ref>, by efficient incremental modifications. A more recent version of this approach is to generate production rules from view specifications [119, 120]; production rules are typically implemented as Event-Condition-Action rules [71].
Reference: [108] <author> K. Sugiyama and K. Misue. </author> <title> `Good' Graphic Interfaces for `Good' Idea Organizers. </title> <booktitle> In Human-Computer Interaction INTERACT '90, </booktitle> <pages> pages 521-526. </pages> <publisher> IFIP, Elsevier, </publisher> <month> August </month> <year> 1990. </year>
Reference-contexts: Ironically, the highly 27 interactive nature of the technique makes it less appropriate for exploring very large hierarchies amore automatic solution would be preferred (i.e., it is unrealistic to expect users to work hard to simplify visualizations of large hierarchies). Compound Digraph Display Methods Three multi-viewpoint perspective (MVP) EAs <ref> [75, 108] </ref> have been applied to drawings of compound digraphs [109]: the fisheye EA uses a polar transformation to map each point in the original drawing to the perimeter of a circle (polar distorting FEV); the orthogonal fisheye EA uses independent Cartesian transformations to map each point to the perimeter of <p> Perspective Wall [68] 04/91 Tree-Maps [56, 57, 103, 112] 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods <ref> [75, 108] </ref> 09/91 Associative networks [32] 10/91 Interactive graph layout [50] 1991 Graphical FEVs [96, 97] 05/92 Abridgment [74] 05/93 Variable Zoom [100] 05/93 Fractal views of trees [63] 08/93 PLUM [88] 08/93 Layout-indep. <p> The result is shown in Figure 5.24 on page 88 as is the associated Dye view definition. The same approach can be used to generate both graphical fisheye views [96, 97] and multi-viewpoint perspective techniques <ref> [75, 108] </ref>. A graphical fisheye view thus obtained is shown in Figure 5.25 on page 88. Several points require further elaboration. First, note that by employing relative size properties, the above approach does not compute the exact distorted sizes.
Reference: [109] <author> K. Sugiyama and K. Misue. </author> <title> Visualization of Structural Information: Automatic Drawing of Compound Digraphs. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 21(4) </volume> <pages> 876-892, </pages> <year> 1991. </year>
Reference-contexts: Compound Digraph Display Methods Three multi-viewpoint perspective (MVP) EAs [75, 108] have been applied to drawings of compound digraphs <ref> [109] </ref>: the fisheye EA uses a polar transformation to map each point in the original drawing to the perimeter of a circle (polar distorting FEV); the orthogonal fisheye EA uses independent Cartesian transformations to map each point to the perimeter of a square (orthogonal distorting FEV) meaning that lines that were <p> Although graphical FEVs can be implemented efficiently using dedicated graphics hardware, the technique is limited to non-nested graphs with a single FP. Abridgment This EA, used in the D-ABDUCTOR system [74] for viewing and manipulating compound digraphs <ref> [109] </ref>, generates hybrid filtering fisheye and non-geometric distorting fisheye views. Priorities are computed as a linear combination of three quantities: structural importance (vertex nesting depth); semantic importance (API); and focal importance (proximity to the set of FPs).
Reference: [110] <author> K. Sugiyama, S. Tagawa, and M. </author> <title> Toda. Methods for Visual Understanding of Hierarchical System Structures. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics, </journal> <volume> 11(2) </volume> <pages> 109-125, </pages> <year> 1981. </year>
Reference: [111] <author> E.R. Tufte. </author> <title> Envisioning Information. </title> <publisher> Graphics Press, </publisher> <address> P.O. Box 430, Cheshire, Connecticut, 06410, </address> <year> 1990. </year>
Reference-contexts: Dynamic mapping refers to the ability to assign and modify mappings at run-time rather than fixing mappings a priori. In designing DM systems, it can be important to incorporate a variety of results relating to human perceptual abilities, such as those reported by Cleveland [13] and Tufte <ref> [111] </ref>. Several approaches for using colour and colour containers in DM environments are proposed by Bardon [5]. Csinger [17] provides a nice overview of the psychology of visualization. <p> The second limitation of existing approaches is evidenced by the nearly empty adorned emphasis technique column. Non-geometric graphic properties such as (colour) hue and saturation can be very effective for creating emphasis in a visualization, as shown in <ref> [5, 111] </ref>, for example. The table only tells part of the story, as only 2 of the 3 techniques that generate adorned views have dynamic mapping capability. The remaining techniques were primarily filtering-distorting hybrids. <p> However, the state of affairs is gradually improving. Work in data characterization (e.g., [67, 70, 90, 91]) now provides a better understanding of the role and importance of data classifications in generating meaningful and effective visualizations. Work in the psychophysics of visualization (e.g., <ref> [5, 13, 17, 111] </ref>) is gradually creating a set of principles that user interface designers (and adaptive user interfaces) can use to produce more effective visualizations.
Reference: [112] <author> D. Turo and B. Johnson. </author> <title> Improving the Visualization of Hierarchies with Treemaps: Design Issues and Experimentation. </title> <booktitle> In IEEE Visualization '92, </booktitle> <pages> pages 124-131, </pages> <address> Boston, MA, </address> <year> 1992. </year>
Reference-contexts: Webviz also supports a limited form of dynamic mapping: the frequency and recency of document accesses can be mapped onto node border width, node border colour, link colour, and 20 link thickness. Visual Information Management for Network Configuration This prototype network configuration management system employs colour-coded treemaps <ref> [56, 112] </ref> combined with dynamic queries that permit user-controlled filtering and animation of network configuration data [65]. The size and colour of treemaps was controlled by the user via dynamic mapping, and treemap slices could be grayed-out through dynamic queries. <p> The single FP is changed by scrolling the wall as one would a sheet in a player piano. 25 Treemaps This EA for presenting hierarchical information <ref> [56, 57, 103, 112] </ref>, generates hybrid locally scaled and adorned views. A hierarchy is drawn as a set of nested boxes in which each node is depicted as a rectangular region composed of the rectangular regions that represent its children. <p> Number of Focal Points number of FPs explicitly supported by the EA: None (0); Single (1); Multiple (fl). Approach Date Emphasis Priorities # of Inputs Technique FPs i/f /g/ng/a s/a/d 0/1/fl s/h/g/n/fl Non-graph-oriented: Generalized FEVs [34] 04/86 Aircraft maintenance [76] 08/90 Perspective Wall [68] 04/91 Tree-Maps <ref> [56, 57, 103, 112] </ref> 10/91 Stretch Tools [98] 09/92 Morphing [99] 11/93 Graph-oriented: Generalized FEVs of trees [34] 04/86 SemNet (implicit) [30] 1988 SemNet (clustering) [30] 1988 Topographic networks [51, 52] 1989 Cone trees (implicit/search) [89] 04/91 Cone trees (gardening) [89] 04/91 MVP display methods [75, 108] 09/91 Associative networks [32] <p> FEV [78, 79] core, tc -rel size-Treemaps <ref> [56, 112] </ref> core, tc -rel size-Adorned FEV PLUM [88] core P -pos,size Table 4.1: Characterization of Dynamic Fisheye Views. View definition language requirements refer to the core component of Dye (including focal points), transitive closure (tc), and shortest paths (sp). <p> 79 and Figure 5.20 on page 84 the similarity attributes are mapped onto the node colour saturation property, which visually emphasizes nodes that are similar to the selected focal point (s). 4.6.6 Treemaps The Dye view definition language can also simulate a radically different hierarchical data visualization technique: the Treemap <ref> [56, 112] </ref>. The view definition is given on page 94, while Figures 5.35 and 5.36 show two resulting Treemap visualizations. An interesting aspect of the Treemap simulation is the use of layout algorithms to position nested nodes. <p> Figure 5.34 shows a layout-independent fisheye view with two focal points. We conclude this section on hierarchical data visualization by showing how our view definition language can simulate a radically different technique: the Treemap <ref> [56, 112] </ref>. <p> FEV [78, 79] * Treemaps <ref> [56, 112] </ref> 6. examples of powerful and flexible visualization strategies realized through the composition of simpler techniques - DQ, DM, and graph layout. 6.5 Conclusion Throughout this dissertation we have repeatedly argued that since the effectiveness of both DQ and DM techniques is fundamentally linked to the availability of suitable multidimensional
Reference: [113] <author> A. Tversky and I. Gati. </author> <title> Studies of Similarity. </title> <editor> In E. Rosch and B.B. Lloyd, editors, </editor> <booktitle> Cognition and Categorization, </booktitle> <pages> pages 79-98. </pages> <publisher> Erlbaum, </publisher> <year> 1978. </year>
Reference-contexts: This general form can be used to capture both geometric [40] (e.g., Minkowski metric [95]) and feature-based <ref> [113] </ref> notions of similarity, as well as domain-specific similarity functions such as those used in the Affinity Browser [83].
Reference: [114] <author> J.D. Ullman. </author> <booktitle> Principles of Database and Knowledge-base Systems, </booktitle> <volume> volume 1. </volume> <publisher> Computer Science Press, </publisher> <address> 1803 Research Boulevard, Rockville, MD, 20850, </address> <year> 1988. </year> <month> 112 </month>
Reference-contexts: on relation R is: R 0 R i where R i is the subset of relation R selected by query component i; since R i F i R R ( F 1 R) " ( F 2 R) " : : : " ( F n R) in relational algebra <ref> [15, 114] </ref> notation, or: SELECT R.* FROM R WHERE Condition1 AND Condition2 AND ... AND ConditionN in SQL notation [19]. The exact form of each F i depends on the type of DQ component associated with attribute i. <p> F may involve operands that are constants or component numbers, the latter denoted $i, the arithmetic comparison operators &lt;; =; &gt;; ; 6=; and , and the logical operators ^ (and), _ (or), and : (not). A query language that can simulate relational algebra is said to be complete <ref> [114] </ref>. Most commercial relational query languages, however, are more than complete. Typical additional features include: 1. Arithmetic. Selections in algebraic expressions can involve arithmetic computation in addition to compari son. 2. Aggregation.
Reference: [115] <author> J.D. Ullman. </author> <booktitle> Principles of Database and Knowledge-base Systems, </booktitle> <volume> volume 2. </volume> <publisher> Computer Science Press, </publisher> <address> 1803 Research Boulevard, Rockville, MD, 20850, </address> <year> 1989. </year>
Reference-contexts: A less common feature of relational query languages is the ability to compute the transitive closure of a relation. One means to add this capability is to permit query languages to compute generalized transitive closure operations based on the closed semiring algebraic structure <ref> [115] </ref>. This approach can be used to compute three transitive closure-like operations: 1. transitive closure; 2. all-pairs-shortest-paths; and, 3. parts explosion.
Reference: [116] <author> T. Urpi and A. Olive. </author> <title> A Method for Change Computation in Deductive Databases. </title> <booktitle> In Proc. of the 18th VLDB Conf., </booktitle> <pages> pages 225-237, </pages> <address> Vancouver, BC, </address> <year> 1992. </year>
Reference-contexts: Production rules derived from an analysis of the view definition can be used to determine changes to views [119, 120]. As recomputing views can be expensive, several incremental methods for view maintenance have been proposed <ref> [10, 41, 116] </ref>. <p> A more recent version of this approach is to generate production rules from view specifications [119, 120]; production rules are typically implemented as Event-Condition-Action rules [71]. Related incremental view maintenance techniques are also described in <ref> [10, 41, 116] </ref>. 49 4.5.1 Materializing Views from Scratch In order to generate a program to materialize a view from scratch, we begin by creating a view parse graph from the declarative view specification.
Reference: [117] <author> K. Utting and N. Yankelovich. </author> <title> Context and Orientation in Hypermedia Networks. </title> <journal> ACM Transactions on Information Systems, </journal> <volume> 7(1) </volume> <pages> 58-84, </pages> <month> January </month> <year> 1989. </year>
Reference-contexts: One of the oldest documented user-interface problems in hypertext systems is the lost-in-hyperspace phenomenon [77]. As a partial solution, many have proposed a variety of overview diagrams <ref> [43, 69, 77, 117] </ref>, and in earlier work, we showed how the layout-independent fisheye view approach [78, 79] can be applied to the visualization of nested hypertext networks.
Reference: [118] <author> C. Wetherell and A. Shannon. </author> <title> Tidy Drawings of Trees. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-5(5):514-520, </volume> <year> 1979. </year>
Reference: [119] <author> F. Widom and S.J. Finkelstein. </author> <title> Set-oriented Production Rules in Relational Database Systems. </title> <booktitle> In Proc. ACM SIGMOD '90, </booktitle> <pages> pages 259-270, </pages> <month> May </month> <year> 1990. </year>
Reference-contexts: View maintenance is the inverse problem of how updates on database relations should be reflected in views defined in terms of these relations. Production rules derived from an analysis of the view definition can be used to determine changes to views <ref> [119, 120] </ref>. As recomputing views can be expensive, several incremental methods for view maintenance have been proposed [10, 41, 116]. <p> The idea described therein was to replace costly global computations first suggested as a means to materialize views [107], by efficient incremental modifications. A more recent version of this approach is to generate production rules from view specifications <ref> [119, 120] </ref>; production rules are typically implemented as Event-Condition-Action rules [71].
Reference: [120] <author> J. Widom, R.J. Cochrane, and B.G. Lindsay. </author> <title> Implementing Set-oriented Production Rules as an Extension to Starburst. </title> <booktitle> In Proc. of the 17th VLDB Conf., </booktitle> <pages> pages 275-285, </pages> <address> Barcelona, Spain, </address> <year> 1991. </year>
Reference-contexts: View maintenance is the inverse problem of how updates on database relations should be reflected in views defined in terms of these relations. Production rules derived from an analysis of the view definition can be used to determine changes to views <ref> [119, 120] </ref>. As recomputing views can be expensive, several incremental methods for view maintenance have been proposed [10, 41, 116]. <p> The idea described therein was to replace costly global computations first suggested as a means to materialize views [107], by efficient incremental modifications. A more recent version of this approach is to generate production rules from view specifications <ref> [119, 120] </ref>; production rules are typically implemented as Event-Condition-Action rules [71].
Reference: [121] <author> C. Williamson and B. Shneiderman. </author> <title> The Dynamic HomeFinder: Evaluating Dynamic Queries in a Real Estate Information Exploration System. </title> <booktitle> In Proc. ACM SIGIR '92, </booktitle> <pages> pages 338-346. </pages> <publisher> ACM, </publisher> <month> June </month> <year> 1992. </year> <month> 113 </month>
Reference-contexts: User experiments have shown DQ to be superior to traditional query approaches for many searching tasks <ref> [3, 64, 66, 104, 121] </ref>. DQ and DM are complementary techniques and have been successfully integrated in a number of recent visualization (hereafter DQM) systems (e.g., [2, 3, 8, 11, 12, 26, 27]). <p> For this reason, such query components have also been called dynamic query filters [2]. The filtering effects of the components are typically combined using AND logic (set intersection). 15 Data Type Component Numeric single or double-ended sliders <ref> [2, 3, 38, 84, 121] </ref> frequency distribution histograms [26, 27] Alphanumeric scrolling lists [38] Alpha slider [1] regular expression matching [84] Nominal/Categorical checkboxes, buttons [3, 38] scrolling lists [38] Aggregate Aggregate Manipulator [38] Table 3.1: Some common dynamic query components. <p> this bar is turned on: On ((R:A i R:A min )=(R:A max R:Amin)(n1)+1) : In what follows we review a number of existing systems that employ DQ, and summarize our findings. 3.1.2 Non-graph-oriented Systems Homefinder The Dynamic Homefinder was one of the earliest applications to use the dynamic query approach <ref> [121] </ref>. This system allowed novice users to explore a real-estate database that contained a number of attributes: number of bedrooms, price, type (house, apartment, condominium), features (fireplace, garage, central air conditioning, whether the property is new or resale), etc. <p> independent data points (in which there are no relationships between data points), and non-flat data sets in which data points are related, as in hierarchical data sets. 21 System Year Mapping Views Inputs None Static Dynamic None Predefined User-defined Flat Hierarchical Graph Network Visualization [8] 90 p p p Homefinder <ref> [121] </ref> 92 p p p Periodic Table of Elements [3] 92 p p p ASTER/COLOR/EXPAND [66] 92 p p p Health Statistics [85] 93 p p p HierNet [27] 93 p p p Seenet, NicheWorks [26] 93 p p p Filter/flow proposal [104, 105] 93 p p p Filmfinder [2] 94
References-found: 121

