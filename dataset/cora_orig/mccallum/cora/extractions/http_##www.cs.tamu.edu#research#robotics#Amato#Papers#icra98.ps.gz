URL: http://www.cs.tamu.edu/research/robotics/Amato/Papers/icra98.ps.gz
Refering-URL: http://www.cs.tamu.edu/faculty/amato/dsmft/publications.html
Root-URL: http://www.cs.tamu.edu
Email: famato,burchanb,dalel,cvj3341,dvallejog@cs.tamu.edu  
Title: Choosing Good Distance Metrics and Local Planners for Probabilistic Roadmap Methods  
Author: Nancy M. Amato, O. Burchan Bayazit, Lucia K. Dale, Christopher Jones, Daniel Vallejo 
Address: College Station, TX 77843-3112  
Affiliation: Department of Computer Science, Texas A&M University  
Note: To appear in Proc. of ICRA'98 1  
Abstract: This paper presents a comparative evaluation of different distance metrics and local planners within the context of probabilistic roadmap methods for motion planning. Both C-space and Workspace distance metrics and local planners are considered. The study concentrates on cluttered three-dimensional Workspaces typical, e.g., of mechanical designs. Our results include recommendations for selecting appropriate combinations of distance metrics and local planners for use in motion planning methods, particularly probabilistic roadmap methods. We find that each local planner makes some connections than none of the others do indicating that better connected roadmaps will be constructed using multiple local planners. We propose a new local planning method we call rotate-at-s that outperforms the common straight-line in C-space method in crowded environments. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. M. Ahuactzin and K. Gupta. </author> <title> A motion planning based approach for inverse kinematics of redundant robots: The kinematic roadmap. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 3609-3614, </pages> <year> 1997. </year>
Reference-contexts: In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist simple situations in which they can fail [6, 18]. Recently, a new class of randomized motion planning methods has gained much attention <ref> [1, 3, 12, 18, 20, 27] </ref>. fl This research supported in part by NSF CAREER Award CCR-9624315 (with REU Supplement), NSF Grant IRI-9619850, and by the Texas Higher Education Coordinating Board under grant ARP-036327-017. <p> Slightly more sophisticated approaches use weighted Euclidean distances (see, e.g., [9, 22]). The metric used in [12] is an upperbound on the maximum distance traveled by any point on the robot as it moves along a straight-line path between the two configurations. In <ref> [1] </ref>, a distance is computed based on the differences between unit vectors on the object's local reference frame in the two configurations. Many metrics have been defined that have not (yet) been used with PRMs (see, e.g., [23, 28, 33]). <p> Another approach is to move on Manhattan paths (one dof at a time) in C-space and to test for collision after moving each dof. Rebound methods reverse the direction of the current dof when a collision is found (e.g., <ref> [1, 10, 11, 24] </ref>). Many planners have been based on the A fl search strategy (see, e.g., [15, 21, 25]). These methods are not always suitable for use as dumb planners since they may have large running times. <p> a neighbor c 0 of c 1 that is one `step' (in one dimension) closer to c 2 and has maximum clearance To appear in Proc. of ICRA'98 4 STRAIGHT-LINE (c 1 ; c 2 ) INPUT: c 1 , c 2 OUTPUT: YES/NO nsteps := no. intermediate configs I <ref> [1; 6] </ref> := increment for each coord c := c 1 for step := 1 to nsteps c := c + I if (c in collision) return NO endfor return YES end ROTATE-AT-S (c 1 ; c 2 ; s;) INPUT: c 1 , c 2 , s OUTPUT: YES/NO (x
Reference: [2] <author> N. M. Amato, O. B. Bayazit, L. K. Dale, C. V. Jones, and D. Vallejo. OBPRM: </author> <title> An obstacle-based PRM for 3D workspaces. </title> <booktitle> In Proc. Intern. Workshop on Algorithmic Foundations of Robotics (WAFR), </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: The first PRM methods [20] generate nodes by uniformly sampling C-space (retaining collision-free configurations); roadmaps are enhanced by further sampling in `difficult' regions. Some methods use information about the environment to guide node generation. For example, the obstacle-based PRM, or OBPRM <ref> [2, 3] </ref>, samples points near C-obstacle surfaces, the method in [11] employs random reflections at C-obstacle surfaces, and a technique To appear in Proc. of ICRA'98 2 called geometric node adding is used in [27] to generate robot configurations near obstacle boundaries. <p> However, most of these analyzes make simplifying assumptions regarding the nature of the C-space and/or the PRM components (e.g., local planner), and therefore are not applicable to all PRMs (e.g., they cannot be applied to OBPRM <ref> [2, 3] </ref>.) 2 Distance Metrics Distance metrics are used in PRMs to determine which nodes one should attempt to connect using a local planner. Thus, they play a crucial role in both the efficiency and success of the PRM. <p> We ran the following test suite for each of the six environments studied. First, we generated 600 free configurations (RdmpCfgs) near C-object surfaces (as in <ref> [2, 3] </ref>), and 100 free configurations (TestCfgs), 50 near C-object surfaces (as in [2, 3]) and 50 at random (as in [20]). For the 6-cube environments, we generated 100 RdmpCfgs near each cube, and the cubes for the 50 surface TestCfgs were selected at random. <p> We ran the following test suite for each of the six environments studied. First, we generated 600 free configurations (RdmpCfgs) near C-object surfaces (as in <ref> [2, 3] </ref>), and 100 free configurations (TestCfgs), 50 near C-object surfaces (as in [2, 3]) and 50 at random (as in [20]). For the 6-cube environments, we generated 100 RdmpCfgs near each cube, and the cubes for the 50 surface TestCfgs were selected at random.
Reference: [3] <author> N. M. Amato and Y. Wu. </author> <title> A randomized roadmap method for path and manipulation planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 113-120, </pages> <address> Minneapolis, MN, </address> <month> April </month> <year> 1996. </year>
Reference-contexts: In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist simple situations in which they can fail [6, 18]. Recently, a new class of randomized motion planning methods has gained much attention <ref> [1, 3, 12, 18, 20, 27] </ref>. fl This research supported in part by NSF CAREER Award CCR-9624315 (with REU Supplement), NSF Grant IRI-9619850, and by the Texas Higher Education Coordinating Board under grant ARP-036327-017. <p> FIND PATH IN ROADMAP BETWEEN CONNECTION NODES PRMs have been shown to perform well in practice. In particular, after the roadmap is constructed during preprocessing, many difficult planning queries can be answered very quickly (in fractions of seconds) <ref> [3, 20] </ref>. Although PRMs are particularly suitable when multiple queries must be performed in the same static environment, the general PRM strategy can be used to solve single queries by only constructing `useful' portions of the roadmap [12, 27]. <p> The first PRM methods [20] generate nodes by uniformly sampling C-space (retaining collision-free configurations); roadmaps are enhanced by further sampling in `difficult' regions. Some methods use information about the environment to guide node generation. For example, the obstacle-based PRM, or OBPRM <ref> [2, 3] </ref>, samples points near C-obstacle surfaces, the method in [11] employs random reflections at C-obstacle surfaces, and a technique To appear in Proc. of ICRA'98 2 called geometric node adding is used in [27] to generate robot configurations near obstacle boundaries. <p> However, most of these analyzes make simplifying assumptions regarding the nature of the C-space and/or the PRM components (e.g., local planner), and therefore are not applicable to all PRMs (e.g., they cannot be applied to OBPRM <ref> [2, 3] </ref>.) 2 Distance Metrics Distance metrics are used in PRMs to determine which nodes one should attempt to connect using a local planner. Thus, they play a crucial role in both the efficiency and success of the PRM. <p> Perhaps the simplest, and also most common, approach has been to consider C-space as a Cartesian space, and to use Euclidean distance in this space (see, e.g., <ref> [3, 12, 17] </ref>). Slightly more sophisticated approaches use weighted Euclidean distances (see, e.g., [9, 22]). The metric used in [12] is an upperbound on the maximum distance traveled by any point on the robot as it moves along a straight-line path between the two configurations. <p> We ran the following test suite for each of the six environments studied. First, we generated 600 free configurations (RdmpCfgs) near C-object surfaces (as in <ref> [2, 3] </ref>), and 100 free configurations (TestCfgs), 50 near C-object surfaces (as in [2, 3]) and 50 at random (as in [20]). For the 6-cube environments, we generated 100 RdmpCfgs near each cube, and the cubes for the 50 surface TestCfgs were selected at random. <p> We ran the following test suite for each of the six environments studied. First, we generated 600 free configurations (RdmpCfgs) near C-object surfaces (as in <ref> [2, 3] </ref>), and 100 free configurations (TestCfgs), 50 near C-object surfaces (as in [2, 3]) and 50 at random (as in [20]). For the 6-cube environments, we generated 100 RdmpCfgs near each cube, and the cubes for the 50 surface TestCfgs were selected at random.
Reference: [4] <author> J. Barraquand and J.-C. Latombe. </author> <title> Robot motion planning: A distributed representation approach. </title> <journal> Internat. J. Robot. Res., </journal> <volume> 10(6) </volume> <pages> 628-649, </pages> <year> 1991. </year>
Reference-contexts: For this reason, attention has focussed on randomized or probabilistic motion planning methods. Notable among the randomized potential field methods is RPP <ref> [4] </ref>, which uses random walks to attempt to escape local minima. In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist simple situations in which they can fail [6, 18].
Reference: [5] <author> P. Bessiere, J. M.Ahuactzin, E.-G. Talbi, and E. Mazer. </author> <title> The ariadne's clew algorithm: Global planning with local methods. </title> <booktitle> In Proc. IEEE Internat. Conf. Intel. Rob. Syst. (IROS), </booktitle> <volume> volume 2, </volume> <pages> pages 1373-1380, </pages> <year> 1993. </year>
Reference-contexts: Although our study is motivated by our interest in PRMs, we believe our conclusions will be useful for other motion planning approaches as well particularly those employing `local planners' (e.g., <ref> [5, 24, 31] </ref>). We remark that the goal of our study is to provide empirical evidence that certain combinations of distance metrics and local planners perform well for PRMs for certain types of problems.
Reference: [6] <author> D. J. Challou, M. Gini, and V. Kumar. </author> <title> Parallel search algorithms for robot motion planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 2, </volume> <pages> pages 46-51, </pages> <year> 1993. </year>
Reference-contexts: Notable among the randomized potential field methods is RPP [4], which uses random walks to attempt to escape local minima. In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist simple situations in which they can fail <ref> [6, 18] </ref>. Recently, a new class of randomized motion planning methods has gained much attention [1, 3, 12, 18, 20, 27]. fl This research supported in part by NSF CAREER Award CCR-9624315 (with REU Supplement), NSF Grant IRI-9619850, and by the Texas Higher Education Coordinating Board under grant ARP-036327-017. <p> a neighbor c 0 of c 1 that is one `step' (in one dimension) closer to c 2 and has maximum clearance To appear in Proc. of ICRA'98 4 STRAIGHT-LINE (c 1 ; c 2 ) INPUT: c 1 , c 2 OUTPUT: YES/NO nsteps := no. intermediate configs I <ref> [1; 6] </ref> := increment for each coord c := c 1 for step := 1 to nsteps c := c + I if (c in collision) return NO endfor return YES end ROTATE-AT-S (c 1 ; c 2 ; s;) INPUT: c 1 , c 2 , s OUTPUT: YES/NO (x
Reference: [7] <author> H. Chang and T. Y. Li. </author> <title> Assembly maintainability study with motion planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 1012-1019, </pages> <year> 1995. </year>
Reference-contexts: In particular, we present a comparative evaluation of distance metrics and local planners. We consider both C-space and Workspace distance metrics and local planners. Our study concentrates on cluttered three-dimensional Workspaces typical, e.g., of mechanical designs <ref> [7] </ref>. The moving objects (robots) are rigid, non-articulated objects yielding six-dimensional C-spaces. The results of our study include recommendations for selecting appropriate combinations of distance metrics and local planners for use in PRMs.
Reference: [8] <author> P. C. Chen and Y. K. Hwang. SANDROS: </author> <title> A motion planner with performance proportional to task difficulty. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 2346-2353, </pages> <year> 1992. </year>
Reference-contexts: Many planners have been based on the A fl search strategy (see, e.g., [15, 21, 25]). These methods are not always suitable for use as dumb planners since they may have large running times. One class of A fl planners, the so-called local search with slide methods (see, e.g., <ref> [8, 9, 14, 16, 31] </ref>). iteratively tries to move between two configurations c 1 and c 2 by first moving to a neighbor c 0 of c 1 that is one `step' (in one dimension) closer to c 2 and has maximum clearance To appear in Proc. of ICRA'98 4 STRAIGHT-LINE
Reference: [9] <author> B. Glavina. </author> <title> Solving findpath by combination of directed and randomized search. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 1718-1723, </pages> <year> 1990. </year>
Reference-contexts: Perhaps the simplest, and also most common, approach has been to consider C-space as a Cartesian space, and to use Euclidean distance in this space (see, e.g., [3, 12, 17]). Slightly more sophisticated approaches use weighted Euclidean distances (see, e.g., <ref> [9, 22] </ref>). The metric used in [12] is an upperbound on the maximum distance traveled by any point on the robot as it moves along a straight-line path between the two configurations. <p> Many planners have been based on the A fl search strategy (see, e.g., [15, 21, 25]). These methods are not always suitable for use as dumb planners since they may have large running times. One class of A fl planners, the so-called local search with slide methods (see, e.g., <ref> [8, 9, 14, 16, 31] </ref>). iteratively tries to move between two configurations c 1 and c 2 by first moving to a neighbor c 0 of c 1 that is one `step' (in one dimension) closer to c 2 and has maximum clearance To appear in Proc. of ICRA'98 4 STRAIGHT-LINE
Reference: [10] <author> K. K. Gupta and Z. Guo. </author> <title> Motion planning for many degrees of freedom: Sequential search with backtracking. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 11(6) </volume> <pages> 897-906, </pages> <year> 1995. </year>
Reference-contexts: Another approach is to move on Manhattan paths (one dof at a time) in C-space and to test for collision after moving each dof. Rebound methods reverse the direction of the current dof when a collision is found (e.g., <ref> [1, 10, 11, 24] </ref>). Many planners have been based on the A fl search strategy (see, e.g., [15, 21, 25]). These methods are not always suitable for use as dumb planners since they may have large running times.
Reference: [11] <author> T. Horsch, F. Schwarz, and H. Tolle. </author> <title> Motion planning for many degrees of freedom random reflections at c-space obstacles. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 3318-3323, </pages> <year> 1994. </year>
Reference-contexts: Some methods use information about the environment to guide node generation. For example, the obstacle-based PRM, or OBPRM [2, 3], samples points near C-obstacle surfaces, the method in <ref> [11] </ref> employs random reflections at C-obstacle surfaces, and a technique To appear in Proc. of ICRA'98 2 called geometric node adding is used in [27] to generate robot configurations near obstacle boundaries. Although PRMs can vary in terms of high-level strategy, they all share several important primitive operations. <p> Another approach is to move on Manhattan paths (one dof at a time) in C-space and to test for collision after moving each dof. Rebound methods reverse the direction of the current dof when a collision is found (e.g., <ref> [1, 10, 11, 24] </ref>). Many planners have been based on the A fl search strategy (see, e.g., [15, 21, 25]). These methods are not always suitable for use as dumb planners since they may have large running times.
Reference: [12] <author> D. Hsu, J-C. Latombe, and R. Motwani. </author> <title> Path planning in expansive configuration spaces. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 2719-2726, </pages> <year> 1997. </year>
Reference-contexts: In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist simple situations in which they can fail [6, 18]. Recently, a new class of randomized motion planning methods has gained much attention <ref> [1, 3, 12, 18, 20, 27] </ref>. fl This research supported in part by NSF CAREER Award CCR-9624315 (with REU Supplement), NSF Grant IRI-9619850, and by the Texas Higher Education Coordinating Board under grant ARP-036327-017. <p> Although PRMs are particularly suitable when multiple queries must be performed in the same static environment, the general PRM strategy can be used to solve single queries by only constructing `useful' portions of the roadmap <ref> [12, 27] </ref>. PRMs can differ according to the high-level strategy decisions used during roadmap construction, that is, how nodes are generated and connected, and how the initial roadmaps are improved. <p> We seek empirical evidence due to the randomized nature of PRMs, which makes them difficult to analyze. Recently, a number of attempts have been made to theoretically explain the success of PRMs (see, e.g., <ref> [12, 17, 19] </ref>). <p> Perhaps the simplest, and also most common, approach has been to consider C-space as a Cartesian space, and to use Euclidean distance in this space (see, e.g., <ref> [3, 12, 17] </ref>). Slightly more sophisticated approaches use weighted Euclidean distances (see, e.g., [9, 22]). The metric used in [12] is an upperbound on the maximum distance traveled by any point on the robot as it moves along a straight-line path between the two configurations. <p> Perhaps the simplest, and also most common, approach has been to consider C-space as a Cartesian space, and to use Euclidean distance in this space (see, e.g., [3, 12, 17]). Slightly more sophisticated approaches use weighted Euclidean distances (see, e.g., [9, 22]). The metric used in <ref> [12] </ref> is an upperbound on the maximum distance traveled by any point on the robot as it moves along a straight-line path between the two configurations. In [1], a distance is computed based on the differences between unit vectors on the object's local reference frame in the two configurations. <p> We mention here just a few of the many methods that could potentially be used as (dumb) local planners in PRMs (see, e.g., [23]). Perhaps the most used local planner is the straight-line in C-space which tests configurations (at a sufficient resolution) along that line for collision (see, e.g., <ref> [12, 17, 30] </ref>). Another approach is to move on Manhattan paths (one dof at a time) in C-space and to test for collision after moving each dof. Rebound methods reverse the direction of the current dof when a collision is found (e.g., [1, 10, 11, 24]).
Reference: [13] <author> Y. K. Hwang and N. Ahuja. </author> <title> Gross motion planning a survey. </title> <journal> ACM Computing Surveys, </journal> <volume> 24(3) </volume> <pages> 219-291, </pages> <year> 1992. </year>
Reference-contexts: Although many different motion planning methods have been proposed, most are not used in practice since they are computationally infeasible except for some restricted cases, e.g., when the robot has very few degrees of freedom (dof) <ref> [13, 23] </ref>. Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) requires time exponential in the number of dof of the robot [29]. For this reason, attention has focussed on randomized or probabilistic motion planning methods.
Reference: [14] <author> Y. K. Hwang and N. Ahuja. </author> <title> A potential field approach to path planning. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 8(1) </volume> <pages> 23-32, </pages> <year> 1992. </year>
Reference-contexts: Many planners have been based on the A fl search strategy (see, e.g., [15, 21, 25]). These methods are not always suitable for use as dumb planners since they may have large running times. One class of A fl planners, the so-called local search with slide methods (see, e.g., <ref> [8, 9, 14, 16, 31] </ref>). iteratively tries to move between two configurations c 1 and c 2 by first moving to a neighbor c 0 of c 1 that is one `step' (in one dimension) closer to c 2 and has maximum clearance To appear in Proc. of ICRA'98 4 STRAIGHT-LINE
Reference: [15] <author> Y. K. Hwang and P. C. Chen. </author> <title> A heuristic and compete planner for the classical mover's problem. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 1, </volume> <pages> pages 729-736, </pages> <year> 1995. </year>
Reference-contexts: Rebound methods reverse the direction of the current dof when a collision is found (e.g., [1, 10, 11, 24]). Many planners have been based on the A fl search strategy (see, e.g., <ref> [15, 21, 25] </ref>). These methods are not always suitable for use as dumb planners since they may have large running times. <p> Most A fl -like planning methods are `stand-alone' planners that are too slow to be used as a dumb local planner in a PRM (see, e.g., <ref> [15, 21, 25] </ref>). However, they can be made faster by decreasing the number of neighbors checked and/or the maximum number of steps in the search. Our A fl -like methods do both.
Reference: [16] <author> Y. K. Hwang and P. C. Chen. </author> <title> A heuristic and complete planner for the classical mover's problem. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 729-736, </pages> <year> 1995. </year>
Reference-contexts: Many planners have been based on the A fl search strategy (see, e.g., [15, 21, 25]). These methods are not always suitable for use as dumb planners since they may have large running times. One class of A fl planners, the so-called local search with slide methods (see, e.g., <ref> [8, 9, 14, 16, 31] </ref>). iteratively tries to move between two configurations c 1 and c 2 by first moving to a neighbor c 0 of c 1 that is one `step' (in one dimension) closer to c 2 and has maximum clearance To appear in Proc. of ICRA'98 4 STRAIGHT-LINE
Reference: [17] <author> L. Kavraki, M. Kolountzakis, and J.-C. Latombe. </author> <title> Analysis of probabilistic roadmaps for path planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 4, </volume> <pages> pages 3020-3025, </pages> <year> 1996. </year>
Reference-contexts: We seek empirical evidence due to the randomized nature of PRMs, which makes them difficult to analyze. Recently, a number of attempts have been made to theoretically explain the success of PRMs (see, e.g., <ref> [12, 17, 19] </ref>). <p> Perhaps the simplest, and also most common, approach has been to consider C-space as a Cartesian space, and to use Euclidean distance in this space (see, e.g., <ref> [3, 12, 17] </ref>). Slightly more sophisticated approaches use weighted Euclidean distances (see, e.g., [9, 22]). The metric used in [12] is an upperbound on the maximum distance traveled by any point on the robot as it moves along a straight-line path between the two configurations. <p> We mention here just a few of the many methods that could potentially be used as (dumb) local planners in PRMs (see, e.g., [23]). Perhaps the most used local planner is the straight-line in C-space which tests configurations (at a sufficient resolution) along that line for collision (see, e.g., <ref> [12, 17, 30] </ref>). Another approach is to move on Manhattan paths (one dof at a time) in C-space and to test for collision after moving each dof. Rebound methods reverse the direction of the current dof when a collision is found (e.g., [1, 10, 11, 24]).
Reference: [18] <author> L. Kavraki and J. C. Latombe. </author> <title> Randomized preprocessing of configuration space for fast path planning. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 2138-2145, </pages> <year> 1994. </year>
Reference-contexts: Notable among the randomized potential field methods is RPP [4], which uses random walks to attempt to escape local minima. In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist simple situations in which they can fail <ref> [6, 18] </ref>. Recently, a new class of randomized motion planning methods has gained much attention [1, 3, 12, 18, 20, 27]. fl This research supported in part by NSF CAREER Award CCR-9624315 (with REU Supplement), NSF Grant IRI-9619850, and by the Texas Higher Education Coordinating Board under grant ARP-036327-017. <p> In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist simple situations in which they can fail [6, 18]. Recently, a new class of randomized motion planning methods has gained much attention <ref> [1, 3, 12, 18, 20, 27] </ref>. fl This research supported in part by NSF CAREER Award CCR-9624315 (with REU Supplement), NSF Grant IRI-9619850, and by the Texas Higher Education Coordinating Board under grant ARP-036327-017.
Reference: [19] <author> L. Kavraki, J. C. Latombe, R. Motwani, and P. Raghavan. </author> <title> Randomized query preprocessing in robot path planning. </title> <booktitle> In Proc. ACM Symp. Theory of Computing (STOC), </booktitle> <pages> pages 353-362, </pages> <year> 1995. </year>
Reference-contexts: We seek empirical evidence due to the randomized nature of PRMs, which makes them difficult to analyze. Recently, a number of attempts have been made to theoretically explain the success of PRMs (see, e.g., <ref> [12, 17, 19] </ref>).
Reference: [20] <author> L. Kavraki, P. Svestka, J. C. Latombe, and M. Overmars. </author> <title> Probabilistic roadmaps for path planning in high-dimensional configuration spaces. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 12(4) </volume> <pages> 566-580, </pages> <month> August </month> <year> 1996. </year>
Reference-contexts: In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist simple situations in which they can fail [6, 18]. Recently, a new class of randomized motion planning methods has gained much attention <ref> [1, 3, 12, 18, 20, 27] </ref>. fl This research supported in part by NSF CAREER Award CCR-9624315 (with REU Supplement), NSF Grant IRI-9619850, and by the Texas Higher Education Coordinating Board under grant ARP-036327-017. <p> FIND PATH IN ROADMAP BETWEEN CONNECTION NODES PRMs have been shown to perform well in practice. In particular, after the roadmap is constructed during preprocessing, many difficult planning queries can be answered very quickly (in fractions of seconds) <ref> [3, 20] </ref>. Although PRMs are particularly suitable when multiple queries must be performed in the same static environment, the general PRM strategy can be used to solve single queries by only constructing `useful' portions of the roadmap [12, 27]. <p> PRMs can differ according to the high-level strategy decisions used during roadmap construction, that is, how nodes are generated and connected, and how the initial roadmaps are improved. The first PRM methods <ref> [20] </ref> generate nodes by uniformly sampling C-space (retaining collision-free configurations); roadmaps are enhanced by further sampling in `difficult' regions. Some methods use information about the environment to guide node generation. <p> We ran the following test suite for each of the six environments studied. First, we generated 600 free configurations (RdmpCfgs) near C-object surfaces (as in [2, 3]), and 100 free configurations (TestCfgs), 50 near C-object surfaces (as in [2, 3]) and 50 at random (as in <ref> [20] </ref>). For the 6-cube environments, we generated 100 RdmpCfgs near each cube, and the cubes for the 50 surface TestCfgs were selected at random.
Reference: [21] <author> K. Kondo. </author> <title> Motion planning with six degrees of freedom by multi-strategic bidirectional heuristic free space enumeration. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 7(3) </volume> <pages> 267-277, </pages> <year> 1992. </year>
Reference-contexts: Rebound methods reverse the direction of the current dof when a collision is found (e.g., [1, 10, 11, 24]). Many planners have been based on the A fl search strategy (see, e.g., <ref> [15, 21, 25] </ref>). These methods are not always suitable for use as dumb planners since they may have large running times. <p> Most A fl -like planning methods are `stand-alone' planners that are too slow to be used as a dumb local planner in a PRM (see, e.g., <ref> [15, 21, 25] </ref>). However, they can be made faster by decreasing the number of neighbors checked and/or the maximum number of steps in the search. Our A fl -like methods do both.
Reference: [22] <author> E. Kruse, R. Gutsche, and F. Wahl. </author> <title> Efficient, iterative, sensor based 3-d map building using rating functions in configuration space. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 2, </volume> <pages> pages 1067-1072, </pages> <year> 1996. </year>
Reference-contexts: Perhaps the simplest, and also most common, approach has been to consider C-space as a Cartesian space, and to use Euclidean distance in this space (see, e.g., [3, 12, 17]). Slightly more sophisticated approaches use weighted Euclidean distances (see, e.g., <ref> [9, 22] </ref>). The metric used in [12] is an upperbound on the maximum distance traveled by any point on the robot as it moves along a straight-line path between the two configurations.
Reference: [23] <author> J. C. Latombe. </author> <title> Robot Motion Planning. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, MA, </address> <year> 1991. </year>
Reference-contexts: Although many different motion planning methods have been proposed, most are not used in practice since they are computationally infeasible except for some restricted cases, e.g., when the robot has very few degrees of freedom (dof) <ref> [13, 23] </ref>. Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) requires time exponential in the number of dof of the robot [29]. For this reason, attention has focussed on randomized or probabilistic motion planning methods. <p> In [1], a distance is computed based on the differences between unit vectors on the object's local reference frame in the two configurations. Many metrics have been defined that have not (yet) been used with PRMs (see, e.g., <ref> [23, 28, 33] </ref>). <p> We mention here just a few of the many methods that could potentially be used as (dumb) local planners in PRMs (see, e.g., <ref> [23] </ref>). Perhaps the most used local planner is the straight-line in C-space which tests configurations (at a sufficient resolution) along that line for collision (see, e.g., [12, 17, 30]).
Reference: [24] <author> A. McLean and I. Mazon. </author> <title> Incremental roadmaps and global path planning in evolving industrial environments. </title> <booktitle> In Proc. IEEE Inter-nat. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 1, </volume> <pages> pages 101-107, </pages> <year> 1996. </year>
Reference-contexts: Although our study is motivated by our interest in PRMs, we believe our conclusions will be useful for other motion planning approaches as well particularly those employing `local planners' (e.g., <ref> [5, 24, 31] </ref>). We remark that the goal of our study is to provide empirical evidence that certain combinations of distance metrics and local planners perform well for PRMs for certain types of problems. <p> Another approach is to move on Manhattan paths (one dof at a time) in C-space and to test for collision after moving each dof. Rebound methods reverse the direction of the current dof when a collision is found (e.g., <ref> [1, 10, 11, 24] </ref>). Many planners have been based on the A fl search strategy (see, e.g., [15, 21, 25]). These methods are not always suitable for use as dumb planners since they may have large running times.
Reference: [25] <author> C. Mirolo and E. Pagello. </author> <title> A practical motion planning strategy based on plane-sweep approach. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 2705-2712, </pages> <year> 1997. </year>
Reference-contexts: Rebound methods reverse the direction of the current dof when a collision is found (e.g., [1, 10, 11, 24]). Many planners have been based on the A fl search strategy (see, e.g., <ref> [15, 21, 25] </ref>). These methods are not always suitable for use as dumb planners since they may have large running times. <p> Most A fl -like planning methods are `stand-alone' planners that are too slow to be used as a dumb local planner in a PRM (see, e.g., <ref> [15, 21, 25] </ref>). However, they can be made faster by decreasing the number of neighbors checked and/or the maximum number of steps in the search. Our A fl -like methods do both.
Reference: [26] <author> C. J. Ong and E. G. Gilbert. </author> <title> Growth distances: New measures for object separation and penetration. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 12(6) </volume> <pages> 888-903, </pages> <year> 1996. </year>
Reference-contexts: C-space, P 12 (k) = jc 2 (k) c 1 (k)j, where k 2 fx; y; zg, and Q 12 (k) = n 12 jc 2 (k) c 1 (k)j, where k 2 fff; fi; flg and n 12 is the normalization factor. growth distance defined for convex polyhedra in <ref> [26] </ref> which is the amount objects must be grown from their internal seed points until their surfaces touch. Distance metrics evaluated. The moving objects (robots) considered in our study are rigid objects in three-space.
Reference: [27] <author> M. Overmars and P. Svestka. </author> <title> A probabilistic learning approach to motion planning. </title> <booktitle> In Proc. Workshop on Algorithmic Foundations of Robotics, </booktitle> <pages> pages 19-37, </pages> <year> 1994. </year>
Reference-contexts: In general, these methods can be quite effective when the configuration space (C-space) is relatively uncluttered, but there exist simple situations in which they can fail [6, 18]. Recently, a new class of randomized motion planning methods has gained much attention <ref> [1, 3, 12, 18, 20, 27] </ref>. fl This research supported in part by NSF CAREER Award CCR-9624315 (with REU Supplement), NSF Grant IRI-9619850, and by the Texas Higher Education Coordinating Board under grant ARP-036327-017. <p> Although PRMs are particularly suitable when multiple queries must be performed in the same static environment, the general PRM strategy can be used to solve single queries by only constructing `useful' portions of the roadmap <ref> [12, 27] </ref>. PRMs can differ according to the high-level strategy decisions used during roadmap construction, that is, how nodes are generated and connected, and how the initial roadmaps are improved. <p> For example, the obstacle-based PRM, or OBPRM [2, 3], samples points near C-obstacle surfaces, the method in [11] employs random reflections at C-obstacle surfaces, and a technique To appear in Proc. of ICRA'98 2 called geometric node adding is used in <ref> [27] </ref> to generate robot configurations near obstacle boundaries. Although PRMs can vary in terms of high-level strategy, they all share several important primitive operations.
Reference: [28] <author> A. Pamecha, I. Ebert-Uphoff, and G. Chirikjian. </author> <title> Useful metrics for modular robot motion planning. </title> <journal> IEEE Trans. Robot. Automat., </journal> <volume> 13(4) </volume> <pages> 531-545, </pages> <year> 1997. </year>
Reference-contexts: In [1], a distance is computed based on the differences between unit vectors on the object's local reference frame in the two configurations. Many metrics have been defined that have not (yet) been used with PRMs (see, e.g., <ref> [23, 28, 33] </ref>).
Reference: [29] <author> J. Reif. </author> <title> Complexity of the piano mover's problem and generalizations. </title> <booktitle> In Proc. IEEE Symp. Foundations of Computer Science (FOCS), </booktitle> <pages> pages 421-427, </pages> <year> 1979. </year>
Reference-contexts: Indeed, there is strong evidence that any complete planner (one that is guaranteed to find a solution or determine that none exists) requires time exponential in the number of dof of the robot <ref> [29] </ref>. For this reason, attention has focussed on randomized or probabilistic motion planning methods. Notable among the randomized potential field methods is RPP [4], which uses random walks to attempt to escape local minima.
Reference: [30] <author> M. Tarokh. </author> <title> Implementation of a fast path planner on an industrial manipulator. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 1, </volume> <pages> pages 436-441, </pages> <year> 1996. </year>
Reference-contexts: We mention here just a few of the many methods that could potentially be used as (dumb) local planners in PRMs (see, e.g., [23]). Perhaps the most used local planner is the straight-line in C-space which tests configurations (at a sufficient resolution) along that line for collision (see, e.g., <ref> [12, 17, 30] </ref>). Another approach is to move on Manhattan paths (one dof at a time) in C-space and to test for collision after moving each dof. Rebound methods reverse the direction of the current dof when a collision is found (e.g., [1, 10, 11, 24]).
Reference: [31] <author> P. Watterberg, P. Xavier, and Y. Hwang. </author> <title> Path planning for everyday robotics with sandros. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 1170-1175, </pages> <year> 1997. </year>
Reference-contexts: Although our study is motivated by our interest in PRMs, we believe our conclusions will be useful for other motion planning approaches as well particularly those employing `local planners' (e.g., <ref> [5, 24, 31] </ref>). We remark that the goal of our study is to provide empirical evidence that certain combinations of distance metrics and local planners perform well for PRMs for certain types of problems. <p> Many planners have been based on the A fl search strategy (see, e.g., [15, 21, 25]). These methods are not always suitable for use as dumb planners since they may have large running times. One class of A fl planners, the so-called local search with slide methods (see, e.g., <ref> [8, 9, 14, 16, 31] </ref>). iteratively tries to move between two configurations c 1 and c 2 by first moving to a neighbor c 0 of c 1 that is one `step' (in one dimension) closer to c 2 and has maximum clearance To appear in Proc. of ICRA'98 4 STRAIGHT-LINE
Reference: [32] <author> P. Xavier. </author> <title> Fast swept-volume distance for robust collision detection. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <pages> pages 1162-1169, </pages> <year> 1997. </year>
Reference-contexts: Intuitively, a good measure of the distance between two configurations is a measure of the workspace region swept by the robot as it moves between them (the swept volume <ref> [32] </ref>). Unfortunately, the computation of such a metric would be prohibitively expensive for a PRM (and would also rely explicitly on the local planner).
Reference: [33] <author> J. Xiao and L. Zhang. </author> <title> Computing rotation distance between contacting polyhedra. </title> <booktitle> In Proc. IEEE Internat. Conf. Robot. Autom. (ICRA), </booktitle> <volume> volume 1, </volume> <pages> pages 791-797, </pages> <year> 1996. </year>
Reference-contexts: In [1], a distance is computed based on the differences between unit vectors on the object's local reference frame in the two configurations. Many metrics have been defined that have not (yet) been used with PRMs (see, e.g., <ref> [23, 28, 33] </ref>).
References-found: 33

