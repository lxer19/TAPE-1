URL: ftp://may.cs.ucla.edu/pub/papers/wsc96-perils.ps.gz
Refering-URL: http://may.cs.ucla.edu/papers/
Root-URL: http://www.cs.ucla.edu
Title: AND PITFALLS OF PARALLEL DISCRETE-EVENT SIMULATION  
Author: J. M. Charnes and D. J. Morrice PERILS Rajive L. Bagrodia 
Address: Los Angeles Los Angeles, California 90095, U.S.A.  
Affiliation: Computer Science Department University of California,  
Note: In Proceedings of the 1996 Winter Simulation Conference, ed.  
Abstract: The design of efficient parallel discrete-event simulation (PDES) models often appears to be a mysterious art practiced primarily by academic researchers who have been rigorously ordained in this task. This tutorial attempts to unravel some of the mysteries. It describes the process of generating an efficient parallel implementation of a discrete-event simulation (DES) model. Common pitfalls in the parallel execution of the models are described together with suggestions on their avoidance. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bagrodia, R. </author> <year> 1994. </year> <title> Language support for parallel discrete-event simulations. </title> <booktitle> In Proc. 1994 Winter Simulation Conference, </booktitle> <editor> ed. J. D. Tew, S. Manivannan, </editor> <address> D. </address>
Reference-contexts: Section 4 addresses the range of issues that must be addressed in preparing a DES model for parallel execution. Section 5 is the conclusion. 2 PARALLEL SIMULATION PROTOCOLS Three primary types of synchronization protocols have been described in the literature: conservative (Misra 1986), optimistic (Jefferson 1985), and mixed <ref> (Jha and Bagrodia 1994) </ref>, where the latter may include sub-models that execute in either conservative or optimistic modes. <p> We assume that the following set of variables are defined for each SDES <ref> (Jha and Bagrodia 1994) </ref>: Earliest Output Time (EOT): For a given SDES s, EOT s refers to the (lower bound) on the future time at which s will cause an event to be scheduled at another SDES. <p> Given appropriate mechanisms to advance the EIT and EOT of the conservative or optimistic SDES, it is possible to implement a PDES model which contains sub-models that are executed using optimistic, conservative, or sequential synchronization mechanisms <ref> (Jha and Bagrodia 1994) </ref>. <p> From the perspective of this paper, an important concern in choosing a simulation language is its support for parallel execution of the model. Henceforth we refer to a language that supports parallel execution of the model as a Parallel Simulation Language (or PSL). <ref> (Bagrodia 1994) </ref> is a recent survey of languages and software to develop PDES models. 3 . 1 Parallel Simulation Languages Most extant PSLs provide a set of DES primitives (scheduling events, advancing simulation time, etc.) together with a set of parallel programming primitives for thread (or object) definition, creation and interprocess <p> For instance, the Apostle (Wonnacott and Bruce 1996) simulation language provides support for granularity control of a simulation object to reduce overheads for event handling, SPEEDES (Steinman 1991) requires user-directed checkpointing as a way to provide incremental state saving, Maisie <ref> (Bagrodia and Liao 1994) </ref> and U.P.S. (Nicol and Heidelberger 1996) support userspecified lookahead specification, and Maisie also provides a variety of other constructs to monitor and optimize parallel performance including dynamic topology information, a set of constructs to reduce rollback costs, and modifying the state saving interval or time window. <p> However, for a parallel simulation other factors may be more important: for instance, the communication topology has been found to have a significant impact on performance where models with an acyclic communication topology perform significantly better than ones that contain cycles <ref> (Cong, Li, and Bagrodia 1994) </ref>. In addition, although it may not be possible to eliminate cycles completely from a model, reductions in the number of cycles can also have a significant impact on the performance.
Reference: <author> Sadowski, and A. Seila, </author> <month> 1324-1331. </month>
Reference: <author> Bagrodia, R. and W.-T. Liao. </author> <year> 1994. </year> <title> MAISIE: A language for the design of efficient discrete-event simulations, </title> <journal> IEEE Trans. Software Eng., </journal> <volume> 20(4), </volume> <pages> 225-238. </pages>
Reference-contexts: Section 4 addresses the range of issues that must be addressed in preparing a DES model for parallel execution. Section 5 is the conclusion. 2 PARALLEL SIMULATION PROTOCOLS Three primary types of synchronization protocols have been described in the literature: conservative (Misra 1986), optimistic (Jefferson 1985), and mixed <ref> (Jha and Bagrodia 1994) </ref>, where the latter may include sub-models that execute in either conservative or optimistic modes. <p> We assume that the following set of variables are defined for each SDES <ref> (Jha and Bagrodia 1994) </ref>: Earliest Output Time (EOT): For a given SDES s, EOT s refers to the (lower bound) on the future time at which s will cause an event to be scheduled at another SDES. <p> Given appropriate mechanisms to advance the EIT and EOT of the conservative or optimistic SDES, it is possible to implement a PDES model which contains sub-models that are executed using optimistic, conservative, or sequential synchronization mechanisms <ref> (Jha and Bagrodia 1994) </ref>. <p> From the perspective of this paper, an important concern in choosing a simulation language is its support for parallel execution of the model. Henceforth we refer to a language that supports parallel execution of the model as a Parallel Simulation Language (or PSL). <ref> (Bagrodia 1994) </ref> is a recent survey of languages and software to develop PDES models. 3 . 1 Parallel Simulation Languages Most extant PSLs provide a set of DES primitives (scheduling events, advancing simulation time, etc.) together with a set of parallel programming primitives for thread (or object) definition, creation and interprocess <p> For instance, the Apostle (Wonnacott and Bruce 1996) simulation language provides support for granularity control of a simulation object to reduce overheads for event handling, SPEEDES (Steinman 1991) requires user-directed checkpointing as a way to provide incremental state saving, Maisie <ref> (Bagrodia and Liao 1994) </ref> and U.P.S. (Nicol and Heidelberger 1996) support userspecified lookahead specification, and Maisie also provides a variety of other constructs to monitor and optimize parallel performance including dynamic topology information, a set of constructs to reduce rollback costs, and modifying the state saving interval or time window. <p> However, for a parallel simulation other factors may be more important: for instance, the communication topology has been found to have a significant impact on performance where models with an acyclic communication topology perform significantly better than ones that contain cycles <ref> (Cong, Li, and Bagrodia 1994) </ref>. In addition, although it may not be possible to eliminate cycles completely from a model, reductions in the number of cycles can also have a significant impact on the performance.
Reference: <author> Baezner, D., G. Lomow, and B. W. Unger. </author> <year> 1990. </year> <title> Sim++: The transition to distributed simulation. </title> <booktitle> In Proc. 1990 SCS Multiconference on Distributed Simulation, </booktitle> <pages> 211-218. </pages>
Reference-contexts: PSLs also differ in their support for specific synchronization protocols. Many existing PSLs support only optimistic protocols Sim++ <ref> (Baezner, Lomow, and Unger 1990) </ref>, ModsimII (West and Mullarney 1988), Apostle, and SPEEDES to name a few. Relatively few support only conservative protocols; and even fewer, like Maisie, support conservative, optimistic, and mixed protocols.
Reference: <author> Bailey, M. L., J. V. Briner, Jr. and R. D. Chamberlain. </author> <year> 1994. </year> <title> Parallel logic simulation of VLSI systems. </title> <booktitle> 8 ACM Computing Surveys (26) 3 </booktitle> <pages> 255-294. </pages>
Reference-contexts: A majority of the load balancing research in PDES has been dedicated to VLSI simulations <ref> (Bailey, Briner, and Chamberlain 1994) </ref>. A parallel program is typically partitioned in a manner that minimizes message communications among the components.
Reference: <author> Cong, J., Z. Li, and R. Bagrodia. </author> <year> 1994. </year> <title> Acyclic multi-way partitioning of boolean networks. </title> <booktitle> In Proc. ACM/IEEE Design Automation Conf., </booktitle> <pages> 670-675. </pages>
Reference-contexts: However, for a parallel simulation other factors may be more important: for instance, the communication topology has been found to have a significant impact on performance where models with an acyclic communication topology perform significantly better than ones that contain cycles <ref> (Cong, Li, and Bagrodia 1994) </ref>. In addition, although it may not be possible to eliminate cycles completely from a model, reductions in the number of cycles can also have a significant impact on the performance.
Reference: <author> Cota, B. A. and R. G. Sargent. </author> <year> 1989. </year> <title> Automatic looka-head computation for conservative distributed simulation. </title> <type> Technical Report CASE Center 8916, </type> <institution> Simulation Research Group and CASE Center, Syracuse University, Syracuse, NY. </institution>
Reference: <author> Evans, J. B. </author> <year> 1988. </year> <title> Structures of discrete event simulation: an introduction to the engagement strategy. </title> <publisher> Elis Horwood Ltd. </publisher>
Reference-contexts: Among many others, these include the conceptual framework or world view adopted by the language <ref> (Evans 1988) </ref>, the availability of, or familiarity of the analyst with specific languages, and perhaps the simulation libraries and support facilities provided by the language. From the perspective of this paper, an important concern in choosing a simulation language is its support for parallel execution of the model.
Reference: <author> Fujimoto, R. </author> <year> 1988. </year> <title> Lookahead in parallel discrete event simulation. </title> <booktitle> Intl Conference on Parallel Processing. </booktitle>
Reference-contexts: It follows that to reduce synchronization overheads, the EIT of an SDES should be as high as possible. The EIT of an SDES is determined by the number and EOT of its predecessors. Given a model with a specific connectivity, we first examine techniques that improve the lookahead <ref> (Fujimoto 1988) </ref> for each component of the model. Subsequently we look at techniques to improve the performance of a model by reducing its connectivity.
Reference: <author> Fujimoto, R. </author> <year> 1990. </year> <title> Parallel discrete event simulation. </title> <journal> CACM, </journal> <volume> 33(10) </volume> <pages> 30-53. </pages>
Reference-contexts: 1 INTRODUCTION Parallel (or distributed) discrete-event simulation refers to the execution of a discrete-event simulation program on a parallel (or distributed) architecture <ref> (Fujimoto 1990) </ref>. In recent years, interest in exploiting parallelism in the execution of discrete-event simulations in a number of domains including network design and configuration, personal communication systems, parallel programs, digital battlefields, and digital circuits has been growing.
Reference: <author> Gerasoulis, A. and T. Yang. </author> <year> 1993. </year> <title> On the granularity and clustering of directed acyclic task graphs. </title> <journal> IEEE Trans. on Parallel and Distributed Systems, </journal> <pages> 686-701. </pages>
Reference-contexts: It may also be possible to tailor the decomposition of the entities in a model to improve its connectivity. For instance, it is often possible to use clustering in network and VLSI simulations to collapse strongly connected sub-models into a single SDES and reduce the connectivity among the SDES <ref> (Gerasoulis and Yang 1993) </ref>. Pitfall 6 Load Imbalance: Traditional techniques to decompose parallel programs (and hence paral 6 lel models) typically try to balance the computation among the partitions while minimizing the message communications among them (Sarkar and Hennessy 1988).
Reference: <author> Jefferson, D. </author> <year> 1985. </year> <title> Virtual Time, </title> <journal> ACM TOPLAS, </journal> <volume> 7(3) </volume> <pages> 404-425. </pages>
Reference-contexts: Section 4 addresses the range of issues that must be addressed in preparing a DES model for parallel execution. Section 5 is the conclusion. 2 PARALLEL SIMULATION PROTOCOLS Three primary types of synchronization protocols have been described in the literature: conservative (Misra 1986), optimistic <ref> (Jefferson 1985) </ref>, and mixed (Jha and Bagrodia 1994), where the latter may include sub-models that execute in either conservative or optimistic modes.
Reference: <author> Jefferson, D., B. Beckman, and F. Wieland. </author> <year> 1987. </year> <title> Distributed simulation and the time warp operating system. </title> <booktitle> In Symposium on Operating Systems Principles. </booktitle>
Reference-contexts: Server Processes Merge Process Some parallel simulation environments (e.g. TWOS) avoid zero-delay cycles by requiring that the receive timestamp of a message be strictly greater than the (simulation) time at which it is sent <ref> (Jefferson, Beckman and Wieland 1987) </ref>. This might be a significant restriction on the modeler particularly because sequential languages do not impose such constraints. A somewhat less restrictive approach is to ensure that at least one process in every cycle in the model has a nonzero lookahead (Misra, 1986).
Reference: <author> Jha, V. and R. Bagrodia. </author> <year> 1993. </year> <title> Transparent implementation of conservative algorithms in parallel simulation languages. </title> <booktitle> In Proc. 1993 Winter Simulation Conference, </booktitle> <editor> ed. G. W. Evans, M. Mollaghasemi, E. C. Rus-sell, and W. E. </editor> <booktitle> Biles, </booktitle> <pages> 677-686. </pages>
Reference-contexts: By default, the runtime system assumes that the model is fully connected, requiring each SDES to send information about its EOT to all other SDES in the system, considerably increasing the synchronization overhead. By providing dynamic connectivity information to the model, this overhead can be reduced significantly <ref> (Jha and Bagrodia 1993) </ref>. It may also be possible to tailor the decomposition of the entities in a model to improve its connectivity. <p> Although this policy will cause some events to be scheduled out of their timestamp order, it is easy to show that causality will not be violated. For queuing network and network simulation benchmarks <ref> (Jha and Bagrodia 1993) </ref>, this form of local scheduling has been shown to significantly improve overall execution times for a model. In general, the overhead costs tend to increase with the number of LPs.
Reference: <author> Jha, V. and R. Bagrodia. </author> <year> 1994. </year> <title> A unified framework for conservative and optimistic distributed simulation. </title> <booktitle> In Proc. 8th Workshop on Parallel and Distributed Simulation, </booktitle> <editor> ed. D. K. Arvind, R. Bagrodia, J. Y. </editor> <publisher> Lin, </publisher> <pages> 12-19, </pages> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Section 4 addresses the range of issues that must be addressed in preparing a DES model for parallel execution. Section 5 is the conclusion. 2 PARALLEL SIMULATION PROTOCOLS Three primary types of synchronization protocols have been described in the literature: conservative (Misra 1986), optimistic (Jefferson 1985), and mixed <ref> (Jha and Bagrodia 1994) </ref>, where the latter may include sub-models that execute in either conservative or optimistic modes. <p> We assume that the following set of variables are defined for each SDES <ref> (Jha and Bagrodia 1994) </ref>: Earliest Output Time (EOT): For a given SDES s, EOT s refers to the (lower bound) on the future time at which s will cause an event to be scheduled at another SDES. <p> Given appropriate mechanisms to advance the EIT and EOT of the conservative or optimistic SDES, it is possible to implement a PDES model which contains sub-models that are executed using optimistic, conservative, or sequential synchronization mechanisms <ref> (Jha and Bagrodia 1994) </ref>.
Reference: <author> Jha, V. and R. L. Bagrodia. </author> <year> 1996. </year> <title> A performance evaluation methodology for parallel simulation protocols. </title> <booktitle> In Proc. 10th Workshop on Parallel and Distributed Simulations, </booktitle> <pages> 180-183, </pages> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The critical path has limited practical utility because it ignores many common and often unavoidable sources of overhead including message latency, load imbalance etc. Recently, the notion of an Ideal Simulation Protocol or ISP <ref> (Jha and Bagrodia 1996) </ref> has been suggested to experimentally compute a realistic lower bound on parallel execution time. This protocol includes all overheads that arise in the parallel execution of a model other than those that are directly attributed to the synchronization protocol.
Reference: <author> Legedza, U. and W. E. Weihl. </author> <year> 1996. </year> <title> Reducing synchronization overhead in parallel simulation. </title> <booktitle> In Proc. Tenth Workshop on Parallel and Distributed Simulation, </booktitle> <pages> 86-95, </pages> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: A common approach to estimating the LBT is by direct execution where the physical time needed to execute the code is measured by the processor clock and used to advance the local simulation clock. Techniques like predictive barrier scheduling <ref> (Legedza and Weihl 1996) </ref> use compile and runtime analysis of the program to estimate a lower bound on the time between successive communication statements in a program.
Reference: <author> Lin, Y. </author> <year> 1990. </year> <title> Understanding the limits of optimistic and conservative parallel simulation. </title> <type> PhD thesis, </type> <institution> University of Washington, </institution> <address> Seattle. </address>
Reference-contexts: In general, it is a nontrivial problem for an analyst to identify the extent of parallelism that is present in a PDES model. Theoretical metrics like critical path have been used to provide a loose lower bound on the parallel execution time of a model <ref> (Lin 1990) </ref>. The critical path has limited practical utility because it ignores many common and often unavoidable sources of overhead including message latency, load imbalance etc.
Reference: <author> Lin, Y., B. R. Preiss, W. M. Loucks, and E. D. La-zowska. </author> <year> 1993. </year> <title> Selecting the checkpoint interval in time warp simulation. </title> <booktitle> In Proc. Seventh Workshop on Parallel and Distributed Simulation, </booktitle> <editor> ed. R. Bagrodia and D. </editor> <booktitle> Jefferson, </booktitle> <pages> 3-10. </pages> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: The checkpointing frequency that will yield optimal performance is a tradeoff between the preceding factors and is typically application-dependent. An analytical formulation to select an optimal checkpointing interval has been described in <ref> (Lin et al. 1993) </ref>. The preceding paper also describes an algorithm that can be used to select an optimal checkpoint interval during the execution of a model. Subsequent work has extended these results to use adaptive check-pointing intervals.
Reference: <author> Liu, W., C. Chiang, H. Wu, V. Jha, M. Gerla, and R. Bagrodia. </author> <year> 1996. </year> <title> Parallel simulation environment for mobile wireless networks. </title> <booktitle> In Proc. 1996 Winter Simulation Conference, </booktitle> <editor> ed. J. Charnes and D. </editor> <publisher> Morice. </publisher>
Reference-contexts: This tutorial describes the process of generating an efficient parallel implementation of a DES model. It outlines some of the common pitfalls in the design of the initial DES model that can make subsequent parallel-ization considerably harder, if not impossible. A companion paper in this volume <ref> (Liu et al. 1996) </ref> describes a case study in porting a model for wireless network simulation to a distributed memory architecture. The next section is an overview of parallel synchronization protocols. Section 3 discusses the role of simulation languages in the design of a PDES.
Reference: <author> Misra, J. </author> <year> 1986. </year> <title> Distributed discrete-event simulation, </title> <booktitle> ACM Computing Surveys 18 (1): </booktitle> <pages> 39-65. </pages>
Reference-contexts: Section 4 addresses the range of issues that must be addressed in preparing a DES model for parallel execution. Section 5 is the conclusion. 2 PARALLEL SIMULATION PROTOCOLS Three primary types of synchronization protocols have been described in the literature: conservative <ref> (Misra 1986) </ref>, optimistic (Jefferson 1985), and mixed (Jha and Bagrodia 1994), where the latter may include sub-models that execute in either conservative or optimistic modes. <p> If a path exists in the model from the merge process to a server process, and the server process has a lookahead of zero, the model could include a zero-delay cycle. A PDES 5 model cannot contain zero-delay cycles as they can cause deadlocks in a conservative simulation <ref> (Misra 1986) </ref> or instabilities in an optimistic system. Server Processes Merge Process Some parallel simulation environments (e.g. TWOS) avoid zero-delay cycles by requiring that the receive timestamp of a message be strictly greater than the (simulation) time at which it is sent (Jefferson, Beckman and Wieland 1987). <p> This might be a significant restriction on the modeler particularly because sequential languages do not impose such constraints. A somewhat less restrictive approach is to ensure that at least one process in every cycle in the model has a nonzero lookahead <ref> (Misra, 1986) </ref>.
Reference: <author> Nicol, D. M. </author> <year> 1988. </year> <title> Parallel discrete event simulation of FCFS stochastic queuing networks. In Parallel programming: experience with applications, </title> <booktitle> languages and systems, </booktitle> <pages> 124-137. </pages> <booktitle> ACM SIGPLAN. </booktitle>
Reference-contexts: A commonly used technique to improve lookahead for stochastic models is to presample random distributions that are used to model various temporal intervals <ref> (Nicol 1988) </ref>. For instance, consider a FIFO server that is idle at simulation time t 1 . In the absence of presampling, its EOT will only be t 1 + e, where e is some minimum value that can be generated by the corresponding random distribution.
Reference: <author> Nicol, D. M. and P. Heidelberger. </author> <year> 1996. </year> <title> On extending more parallelism to serial simulators. </title> <booktitle> In Proc. Tenth Workshop on Parallel and Distributed Simulation, </booktitle> <pages> 202-205, </pages> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: For instance, the Apostle (Wonnacott and Bruce 1996) simulation language provides support for granularity control of a simulation object to reduce overheads for event handling, SPEEDES (Steinman 1991) requires user-directed checkpointing as a way to provide incremental state saving, Maisie (Bagrodia and Liao 1994) and U.P.S. <ref> (Nicol and Heidelberger 1996) </ref> support userspecified lookahead specification, and Maisie also provides a variety of other constructs to monitor and optimize parallel performance including dynamic topology information, a set of constructs to reduce rollback costs, and modifying the state saving interval or time window. <p> Although a significant amount of research has been undertaken in the area of load balancing for parallel and distributed computing (Shirazi, Hurson, and Kavi 1996), there has been significantly less exploration of this issue in the context of PDES <ref> (Wilson and Nicol 1996) </ref>. A majority of the load balancing research in PDES has been dedicated to VLSI simulations (Bailey, Briner, and Chamberlain 1994). A parallel program is typically partitioned in a manner that minimizes message communications among the components.
Reference: <author> Palaniswamy A. C. and P. A. Wilsey. </author> <year> 1993. </year> <title> An analytical comparison of periodic checkpointing and incremental state saving. </title> <booktitle> In Proc. Seventh Workshop on Parallel and Distributed Sim., </booktitle> <editor> ed. R. </editor> <publisher> Bagrodia and D. </publisher>
Reference-contexts: Incremental state saving can reduce checkpointing costs but considerably increase rollback costs because the previous state of the object must now be reconstructed using the modification history or the incrementally saved states. Comparison of the two methods for check-pointing is an ongoing research area <ref> (Palaniswamy and Wilsey 1993) </ref>. 5 CONCLUSIONS The increasing complexity of many DES models has led to an increased the demand for PDES. However, the process of developing an efficient parallel model, even in languages that support PDES, remains a challenging task.
Reference: <author> Jefferson, </author> <title> 127-134. </title> <publisher> IEEE Computer Society Press. </publisher>
Reference: <author> Prakash, S. and R. Bagrodia. </author> <year> 1995. </year> <title> Parallel simulation of data parallel programs. </title> <booktitle> In Proc. Eighth Workshop on Languages and Compilers for Parallel Computing. </booktitle>
Reference-contexts: Further, semantic information can be used to identify the source of an incoming message in the receive statement allowing a thread to proceed as soon as the corresponding message is available locally rather than waiting for all messages to be synchronized <ref> (Prakash and Bagrodia 1995) </ref>. Pitfall 5 High Connectivity: Improving the connectivity information available for each SDES can improve the performance of a conservative SDES.
Reference: <author> Sarkar V. and J. Hennessy. </author> <year> 1988. </year> <title> Compile-time partitioning and scheduling scheme of parallel programs. </title> <booktitle> In Proc. SIGPLAN 88 Symposium on Compiler Con-truction, </booktitle> <pages> 17-26. </pages>
Reference-contexts: Pitfall 6 Load Imbalance: Traditional techniques to decompose parallel programs (and hence paral 6 lel models) typically try to balance the computation among the partitions while minimizing the message communications among them <ref> (Sarkar and Hennessy 1988) </ref>. The assignment of processes to processors may be accomplished using either static or dynamic algorithms. The primary advantage of static scheduling algorithms is the absence of any run time overheads in distributing the computation.
Reference: <author> Shirazi, B., A. R. Hurson, K. Kavi. </author> <year> 1996. </year> <title> Scheduling and Load Balancing in Parallel and Distributed Systems. </title> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Because of the significant run-time overhead of migrating objects, extant PDES systems generally use static model decompositions to assign LPs to an SDES. Although a significant amount of research has been undertaken in the area of load balancing for parallel and distributed computing <ref> (Shirazi, Hurson, and Kavi 1996) </ref>, there has been significantly less exploration of this issue in the context of PDES (Wilson and Nicol 1996). A majority of the load balancing research in PDES has been dedicated to VLSI simulations (Bailey, Briner, and Chamberlain 1994).
Reference: <author> Steinman, J. </author> <year> 1991. </year> <title> SPEEDES: synchronous parallel environment for emulation and discrete event simulation, </title> <booktitle> In Advances in Parallel and Distributed Simulation, </booktitle> <pages> 95-103. </pages> <publisher> SCS Multiconference, </publisher> <address> Anaheim, CA. </address>
Reference-contexts: Some PSLs additionally provide constructs to modify the attributes of a model that can affect the synchronization overheads and hence its parallel performance. For instance, the Apostle (Wonnacott and Bruce 1996) simulation language provides support for granularity control of a simulation object to reduce overheads for event handling, SPEEDES <ref> (Steinman 1991) </ref> requires user-directed checkpointing as a way to provide incremental state saving, Maisie (Bagrodia and Liao 1994) and U.P.S. (Nicol and Heidelberger 1996) support userspecified lookahead specification, and Maisie also provides a variety of other constructs to monitor and optimize parallel performance including dynamic topology information, a set of constructs
Reference: <author> West, J. and A. Mullarney. </author> <year> 1988. </year> <title> ModSim: a language for distributed simulation. </title> <booktitle> In Proceedings of 1988 SCS Multiconference on Distributed Simulation, </booktitle> <address> San Diego, CA, </address> <pages> 155-159. </pages>
Reference-contexts: PSLs also differ in their support for specific synchronization protocols. Many existing PSLs support only optimistic protocols Sim++ (Baezner, Lomow, and Unger 1990), ModsimII <ref> (West and Mullarney 1988) </ref>, Apostle, and SPEEDES to name a few. Relatively few support only conservative protocols; and even fewer, like Maisie, support conservative, optimistic, and mixed protocols.
Reference: <author> Wilson, L. F. and D. M. Nicol. </author> <year> 1996. </year> <title> Experiments in automated load balancing. </title> <booktitle> In Proc. Tenth Workshop on Parallel and Distributed Simulation, </booktitle> <pages> 4-11, </pages> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Although a significant amount of research has been undertaken in the area of load balancing for parallel and distributed computing (Shirazi, Hurson, and Kavi 1996), there has been significantly less exploration of this issue in the context of PDES <ref> (Wilson and Nicol 1996) </ref>. A majority of the load balancing research in PDES has been dedicated to VLSI simulations (Bailey, Briner, and Chamberlain 1994). A parallel program is typically partitioned in a manner that minimizes message communications among the components.
Reference: <author> Wonnacott, P. and D. Bruce. </author> <year> 1996. </year> <title> The APOSTLE simulation language: granularity control and performance data. </title> <booktitle> In Proc. Tenth Workshop on Parallel and Distributed Simulation, </booktitle> <pages> 114-123, </pages> <publisher> IEEE Computer Society Press. </publisher> <editor> AUTHOR BIOGRAPHY RAJIVE L. </editor> <title> BAGRODIA is an Associate Professor of Computer Science at UCLA. He obtained a Bachelor of Technology in Electrical Engineering from the Indian Institute of Technology, </title> <booktitle> Bombay, in 1981, and the M.A. and Ph.D. degrees in Computer Science from the University of Texas at Austin, in 1983 and 1987 respectively. His research interests include distributed algorithms, parallel languages, programming methodology and performance evaluation. Email: </booktitle> <address> rajive@cs.ucla.edu. </address>
Reference-contexts: In particular, some PSLs distinguish between processes on the same and different processors allowing the former to access shared variables. Some PSLs additionally provide constructs to modify the attributes of a model that can affect the synchronization overheads and hence its parallel performance. For instance, the Apostle <ref> (Wonnacott and Bruce 1996) </ref> simulation language provides support for granularity control of a simulation object to reduce overheads for event handling, SPEEDES (Steinman 1991) requires user-directed checkpointing as a way to provide incremental state saving, Maisie (Bagrodia and Liao 1994) and U.P.S. (Nicol and Heidelberger 1996) support userspecified lookahead specification, and
References-found: 32

