URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/reids/www/papers/tdl.ps.gz
Refering-URL: http://c.gp.cs.cmu.edu:5103/afs/cs.cmu.edu/user/reids/www/home/reidhome.html
Root-URL: http://www.cs.cmu.edu
Title: A Task Description Language for Robot Control  
Author: Reid Simmons and David Apfelbaum 
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science Carnegie Mellon University  
Abstract: Robot systems must achieve high level goals while remaining reactive to contingencies and new opportunities. This typically requires robot systems to coordinate concurrent activities, monitor the environment, and deal with exceptions. We have developed a new language to support such task-level control. The language, TDL, is an extension of C++ that provides syntactic support for task decomposition, synchronization, execution monitoring, and exception handling. A compiler transforms TDL into pure C++ code that utilizes a platform-independent task management library. This paper introduces TDL, describes the task tree representation that underlies the language, and presents some aspects of its implementation and use in an autonomous mobile robot. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> P. Bonasso, J. Firby, E. Gat, D. Kortenkamp, D. Miller, and M. Slack. </author> <title> A Proven Three-Tiered Architecture for Programming Autonomous Robots, </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 9:2, </volume> <year> 1997. </year>
Reference-contexts: They need to recover gracefully from exceptions and effectively manage their resources (such as actuators, sensors, and computation). These capabilities are referred to as task-level control [15], and they form the basis of the executive layer of modern three-tiered robot control architectures <ref> [1, 3, 4, 10] </ref>. In such architectures (Figure 1), the behavior (real-time control) layer interacts with the physical world, controlling actuators and collecting sensor data. The planning layer specifies, at an abstract level, how to achieve goals and how to deal with goal interactions.
Reference: [2] <author> E. Clarke, E. Emerson and A. Sistla. </author> <title> Automatic Verification of Finite-State Concurrent Systems Using Temporal Logic Specifications, </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 8:2, </volume> <pages> pp 244-263, </pages> <year> 1986. </year>
Reference-contexts: We are also using temporal logic to model state transitions and synchronization constraints between task tree nodes. The goal is to use model checking <ref> [2] </ref> to formally validate properties of task-level control programs, such as liveness and safety, and possibly to verify the implementation of the TCM library itself. Other research includes integrating TDL and TCM with resource management capabilities [11], another important aspect of task-level control.
Reference: [3] <author> R. James Firby. </author> <title> An Investigation into Reactive Planning in Complex Domains. </title> <booktitle> Proc. National Conference on Artificial Intelligence, </booktitle> <pages> pp 202-206, </pages> <address> Seattle, WA, </address> <month> July, </month> <year> 1987 </year>
Reference-contexts: They need to recover gracefully from exceptions and effectively manage their resources (such as actuators, sensors, and computation). These capabilities are referred to as task-level control [15], and they form the basis of the executive layer of modern three-tiered robot control architectures <ref> [1, 3, 4, 10] </ref>. In such architectures (Figure 1), the behavior (real-time control) layer interacts with the physical world, controlling actuators and collecting sensor data. The planning layer specifies, at an abstract level, how to achieve goals and how to deal with goal interactions. <p> Like TDL, most include explicit support for task decomposition, synchronization, monitoring and exception handling. RAP (Reactive Action Packages) was designed to support reactive planning and execution and also to be used as the representation language for a general-purpose planner <ref> [3] </ref>. RAP uses a Lisp-based interpreter to manage a task net and to interface with behavioral skills. RPL (Reactive Plan Language), which was inuenced by RAP, incorporates a richer set of control constructs [8]. <p> Our initial exploration, which focuses on the RAP <ref> [3] </ref> language, shows promising early results. Conclusions This paper has presented TDL, a new language for specifying task-level robot control. TDL is an extension of C++ that includes explicit synchronization constructs to support task decomposition, synchronization, execution monitoring and exception handling.
Reference: [4] <author> E. Gat. </author> <title> Integrating Planning and Reacting in a Heterogeneous Asynchronous Architecture for Controlling Real-World Mobile Robots, </title> <booktitle> Proc. National Conference on Artificial Intelligence, </booktitle> <pages> pp 809-815, </pages> <address> San Jose, CA, </address> <month> July </month> <year> 1992. </year>
Reference-contexts: They need to recover gracefully from exceptions and effectively manage their resources (such as actuators, sensors, and computation). These capabilities are referred to as task-level control [15], and they form the basis of the executive layer of modern three-tiered robot control architectures <ref> [1, 3, 4, 10] </ref>. In such architectures (Figure 1), the behavior (real-time control) layer interacts with the physical world, controlling actuators and collecting sensor data. The planning layer specifies, at an abstract level, how to achieve goals and how to deal with goal interactions.
Reference: [5] <author> E. Gat. ESL: </author> <title> A Language for Supporting Robust Plan Execution in Embedded Autonomous Agents, </title> <booktitle> Proc. AAAI Fall Symposium on Plan Execution, </booktitle> <address> Boston MA, </address> <month> October </month> <year> 1996. </year>
Reference-contexts: We feel that this gives developers more exibility in deciding how to design their systems, without precluding such architectural decisions. ESL (Executive Support Language) is the language most closely related to TDL, and TDL is inuenced by many of the ESL design concepts <ref> [5] </ref>. Like TDL, ESL is an extension of an existing language (in this case, Lisp). ESL is implemented as a set of macros that expand into Common Lisp and invoke Lisps multi-tasking library.
Reference: [6] <author> M. Georgeoff and A. Lansky. </author> <title> Reactive Reasoning and Planning. </title> <booktitle> Proc. National Conference on Artificial Intelligence, </booktitle> <pages> pp 972-978, </pages> <address> Seattle, WA, </address> <month> July, </month> <year> 1987. </year>
Reference-contexts: RPL (Reactive Plan Language), which was inuenced by RAP, incorporates a richer set of control constructs [8]. Like RAP, RPL was designed to be used by a planner, and runs using a Lisp-based interpreter. PRS (Procedural Reasoning System) is based around the concept of a procedural reasoning expert <ref> [6] </ref>. PRS facilitates deciding what actions an agent should be doing at any given time. Both Lisp-based and C-based interpreters for PRS have been implemented. PRS, like RAP, is tightly integrated with a world model knowledge base that is used to identify opportunities, exceptions, and when to transition between tasks.
Reference: [7] <author> K. Konolige. COLBERT: </author> <title> A Language for Reactive Control in Saphira, </title> <booktitle> Proc. German Conference on Artificial Intelligence, </booktitle> <address> Freiburg, Germany, </address> <year> 1997. </year>
Reference-contexts: In addition to the usual task-level control constructs, ESL provides for resource management and supports a Prolog-based data base. ESL is currently being used in the NASA New Millennium Remote Agent [10]. Colbert has a C-like syntax, but does not support the full C language <ref> [7] </ref>. Colbert supports concurrency and iteration, but does not provide explicit support for exception handling. It has well-defined semantics based on finite state automata, which makes it easy to determine how the system will behave. It has a compiler, but is mainly intended for interactive use, via an interpreter.
Reference: [8] <author> D. McDermott. </author> <title> Transformational Planning of Reactive Behavior, </title> <type> Tech Report YALEU/DCS/RR-941, </type> <institution> Yale University, </institution> <year> 1994. </year>
Reference-contexts: RAP uses a Lisp-based interpreter to manage a task net and to interface with behavioral skills. RPL (Reactive Plan Language), which was inuenced by RAP, incorporates a richer set of control constructs <ref> [8] </ref>. Like RAP, RPL was designed to be used by a planner, and runs using a Lisp-based interpreter. PRS (Procedural Reasoning System) is based around the concept of a procedural reasoning expert [6]. PRS facilitates deciding what actions an agent should be doing at any given time.

References-found: 8

