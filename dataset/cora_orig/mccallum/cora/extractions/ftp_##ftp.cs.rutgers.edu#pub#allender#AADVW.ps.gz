URL: ftp://ftp.cs.rutgers.edu/pub/allender/AADVW.ps.gz
Refering-URL: http://www.cs.rutgers.edu/~allender/publications/
Root-URL: http://www.cs.rutgers.edu
Email: manindra@iitk.ac.in  e-mail: allender@cs.rutgers.edu  e-mail: sdatta@paul.rutgers.edu  e-mail: vollmer@informatik.uni-wuerzburg.de  e-mail: wagner@informatik.uni-wuerzburg.de  
Title: Characterizing Small Depth and Small Space Classes by Operators of Higher Types  
Author: Manindra Agrawal Eric Allender Samir Datta Heribert Vollmer Klaus W. Wagner 
Note: Part of this research was done while visiting the University of Ulm under an Alexander von Humboldt Fellowship. Supported in part by NSF grant CCR-9734918. Supported in part by NSF grant CCR-9734918.  
Address: Kanpur, India  Piscataway, NJ 08855, USA  Piscataway, NJ 08855, USA  Am Exerzierplatz 3, D-97072 Wurzburg, Germany  Am Exerzierplatz 3, D-97072 Wurzburg, Germany  
Affiliation: Dept. of Computer Science Indian Institute of Technology  Department of Computer Science, Rutgers University  Department of Computer Science, Rutgers University  Lehrstuhl fur Theoretische Informatik, Universitat Wurzburg  Lehrstuhl fur Theoretische Informatik, Universitat Wurzburg  
Abstract-found: 0
Intro-found: 1
Reference: [ALM + 92] <author> S. Arora, C. Lund, R. Motwani, M. Sudan, and M. Szegedy. </author> <title> Proof verification and the intractability of approximation problems. </title> <booktitle> In Proceedings 33rd Symposium on the Foundations of Computer Science, </booktitle> <pages> pages 14-23. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: Observe that it was just this question which was part of the motivation for the PCP-characterization of NP <ref> [AS98, ALM + 92] </ref>, see also [BFLS91, FGL + 91, Bab93]. The PCP result can be formulated in terms of our operators as follows: Theorem 4.3 [AS98, ALM + 92]. <p> Observe that it was just this question which was part of the motivation for the PCP-characterization of NP <ref> [AS98, ALM + 92] </ref>, see also [BFLS91, FGL + 91, Bab93]. The PCP result can be formulated in terms of our operators as follows: Theorem 4.3 [AS98, ALM + 92]. <p> Safra, the proof of the PCP-theorem <ref> [ALM + 92] </ref> even yields the following stronger characterization of NP: 9 Theorem 4.6 [ALM + 92]. NP ' 9 2 [O (1)] R log POLYLOGTIME. From this statement one can easily conclude (by translation) the MIP theorem NEXPTIME = 9 2 R p P (equation (2)). <p> Safra, the proof of the PCP-theorem <ref> [ALM + 92] </ref> even yields the following stronger characterization of NP: 9 Theorem 4.6 [ALM + 92]. NP ' 9 2 [O (1)] R log POLYLOGTIME. From this statement one can easily conclude (by translation) the MIP theorem NEXPTIME = 9 2 R p P (equation (2)). <p> Acknowledgment. We thank S. Safra for pointing out that the proof of the PCP-theorem from <ref> [ALM + 92] </ref> yields Theorem 4.6.
Reference: [AS98] <author> Sanjeev Arora and Shmuel Safra. </author> <title> Probabilistic checking of proofs: A new characterization of NP. </title> <journal> Journal of the ACM, </journal> <volume> 45(1) </volume> <pages> 70-122, </pages> <month> January </month> <year> 1998. </year>
Reference-contexts: Observe that it was just this question which was part of the motivation for the PCP-characterization of NP <ref> [AS98, ALM + 92] </ref>, see also [BFLS91, FGL + 91, Bab93]. The PCP result can be formulated in terms of our operators as follows: Theorem 4.3 [AS98, ALM + 92]. <p> Observe that it was just this question which was part of the motivation for the PCP-characterization of NP <ref> [AS98, ALM + 92] </ref>, see also [BFLS91, FGL + 91, Bab93]. The PCP result can be formulated in terms of our operators as follows: Theorem 4.3 [AS98, ALM + 92].
Reference: [Bab93] <author> L. Babai. </author> <title> Transparent (holographic) proofs. </title> <booktitle> In Proceedings 10th Symposium on Theoretical Aspects of Computer Science, volume 665 of Lecture Notes in Computer Science, </booktitle> <pages> pages 525-534. </pages> <publisher> Springer Verlag, </publisher> <year> 1993. </year> <month> 17 </month>
Reference-contexts: Observe that it was just this question which was part of the motivation for the PCP-characterization of NP [AS98, ALM + 92], see also <ref> [BFLS91, FGL + 91, Bab93] </ref>. The PCP result can be formulated in terms of our operators as follows: Theorem 4.3 [AS98, ALM + 92]. <p> Instead, we are in need of a stronger PCP-like characterization of NP. As we shall see, this is possible. Fortunately, one can reduce the time bound in Theorem 4.3 to poly-logarithmic time if the input is encoded in an error-correcting code, see e.g. [BFLS91], <ref> [Bab93, Theorem 2] </ref> or [HPS95, Section 4.8]. The encoding is a polynomial time procedure, but one can hope that such an encoding is no more time consuming if an additional padding has to be encoded.
Reference: [Bar89] <author> D. A. </author> <title> Mix Barrington. Bounded-width polynomial size branching programs recognize exactly those languages in NC 1 . Journal of Computer and System Sciences, </title> <booktitle> 38 </booktitle> <pages> 150-164, </pages> <year> 1989. </year>
Reference-contexts: This leads us to a second scaled-down analogue of equation (3) as follows: Theorem 5.5. NC 1 = 9 1 [2] 8 log DLOGTIME = 9 1 8 log DLOGTIME Proof. The inclusion NC 1 9 1 [2] 8 log DLOGTIME is essentially Barring-ton's Theorem <ref> [Bar89] </ref>.
Reference: [BFL90] <author> L. Babai, L. Fortnow, and C. Lund. </author> <title> Non-deterministic exponential time has two-prover interactive protocols. </title> <booktitle> In Proceedings 31st Symposium on Foundations of Computer Science, </booktitle> <pages> pages 16-25. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1990. </year>
Reference-contexts: 1 Introduction Interactive proofs motivate complexity theorists to study new modes of computation. These modes have been studied to great effect in the setting of polynomial time (e.g. <ref> [Sha92, LFKN92, BFL90] </ref>) and small space-bounded classes (e.g. [FL93, CL95]).
Reference: [BFLS91] <author> L. Babai, L Fortnow, L. A. Levin, and M. Szegedy. </author> <title> Checking computations in polylogarithmic time. </title> <booktitle> In Proceedings 23rd Symposium on Theory of Computing, </booktitle> <pages> pages 21-32. </pages> <publisher> ACM Press, </publisher> <year> 1991. </year>
Reference-contexts: Observe that it was just this question which was part of the motivation for the PCP-characterization of NP [AS98, ALM + 92], see also <ref> [BFLS91, FGL + 91, Bab93] </ref>. The PCP result can be formulated in terms of our operators as follows: Theorem 4.3 [AS98, ALM + 92]. <p> Instead, we are in need of a stronger PCP-like characterization of NP. As we shall see, this is possible. Fortunately, one can reduce the time bound in Theorem 4.3 to poly-logarithmic time if the input is encoded in an error-correcting code, see e.g. <ref> [BFLS91] </ref>, [Bab93, Theorem 2] or [HPS95, Section 4.8]. The encoding is a polynomial time procedure, but one can hope that such an encoding is no more time consuming if an additional padding has to be encoded.
Reference: [BVW96] <author> R. V. Book, H. Vollmer, and K. W. Wagner. </author> <title> On type-2 probabilistic quantifiers. </title> <booktitle> In Proceedings 23rd International Colloquium on Automata, Languages and Programming, volume 1099 of Lecture Notes in Computer Science, </booktitle> <pages> pages 369-380. </pages> <publisher> Springer Verlag, </publisher> <year> 1996. </year>
Reference-contexts: B; and L 2 8 K iff there is a B 2 K such that (x; X 1 ; : : : ; X k ) 2 L () (8Y )(x; X 1 ; : : : ; X k ; Y ) 2 B: Book, Vollmer, and Wagner in <ref> [BVW96] </ref> examined the bounded-error probabilistic operator of type 2. We repeat their definition together with the definitions of the corresponding type 0 operator (see e.g. [Sch89]). We also consider a one-sided error operator in the case of type 0. Definition 2.3. <p> known: If K is a class defined by nondeterministic polynomial time machines (technically, K is leaf language definable, i.e, K = Leaf P (B) for some set B [HLS + 93, JMT96]), then Q 2 K = Q exp K (where Q can be any one of the above operators) <ref> [BVW96] </ref>. We remark that a connection between the BP 2 operator and ALMOST-classes has been established in [BVW96], see also [VW97a]. There it was shown that for a great number of classes K, the identities BP 2 K = BP exp K = ALMOST-K 5 hold. <p> definable, i.e, K = Leaf P (B) for some set B [HLS + 93, JMT96]), then Q 2 K = Q exp K (where Q can be any one of the above operators) <ref> [BVW96] </ref>. We remark that a connection between the BP 2 operator and ALMOST-classes has been established in [BVW96], see also [VW97a]. There it was shown that for a great number of classes K, the identities BP 2 K = BP exp K = ALMOST-K 5 hold.
Reference: [BW98a] <author> H. Baier and K. W. Wagner. </author> <title> The analytic polynomial-time hierarchy. </title> <journal> Mathematical Logic Quaterly, </journal> <note> 1998. To appear. </note>
Reference-contexts: How can one define a useful notion of interactive proof system for deterministic log time? In attempting to answer this and related questions, we take as our starting point the work of Baier and Wagner <ref> [BW98a] </ref>, where it was shown that (single-prover and multi-prover) interactive proof systems can be modeled by quantifying over oracles applied to P. This framework is defined quite elegantly in terms of operators acting on complexity classes, generalizing the framework initially presented by Schoning [Sch89]. <p> For sake of clarity we explicitly remark that resource bounds are measured in the length of the actual input. In the case of space bounds, all oracle/index tapes are subject to the space restriction. Now we define the following operators <ref> [BW98a] </ref>: Definition 2.2. Let K be a relativized class of type 1 k . <p> PSPACE = IP = 9 1 BP p P = 9 1 R p Because the first equality in both statements is not relativizable, this yields non-relativizable operator characterizations of NEXPTIME and PSPACE. In contrast to this, the following characterizations (obtained in <ref> [BW98a] </ref>, see also [VW97b]) are relativizable. Theorem 3.2. 1. NEXPTIME = 9 2 8 p P = 9 2 [3] 8 p P. 2. PSPACE = 9 1 8 p P = 9 1 [2] 8 p P.
Reference: [BW98b] <author> H. Baier and K. W. Wagner. </author> <title> Bounding queries in the analytical polynomial-time hierarchy. </title> <booktitle> Theoretical Computer Science, </booktitle> <year> 1998. </year> <note> To appear. </note>
Reference-contexts: In contrast to this, the following characterizations (obtained in [BW98a], see also [VW97b]) are relativizable. Theorem 3.2. 1. NEXPTIME = 9 2 8 p P = 9 2 [3] 8 p P. 2. PSPACE = 9 1 8 p P = 9 1 [2] 8 p P. In <ref> [BW98b] </ref> it has been proved that this presentation of PSPACE and NEXPTIME cannot be improved with respect to the number of queries. The main question of this paper is if characterizations of small space classes or small depth circuit classes similar to those above can be given.
Reference: [CKS81] <author> A. K. Chandra, D. Kozen, and L. J. Stockmeyer. </author> <title> Alternation. </title> <journal> Journal of the ACM, </journal> <volume> 28 </volume> <pages> 114-133, </pages> <year> 1981. </year>
Reference-contexts: For instance, the definition of alternating Turing machine given in <ref> [CKS81] </ref> does not allow an interesting notion of sublinear time complexity, whereas augmenting this model with random access to the input provides a useful model for studying circuit complexity classes such as NC 1 and AC 0 [Ruz81, Sip83].
Reference: [CL95] <author> Anne Condon and Richard Ladner. </author> <title> Interactive proof systems with polynomially bounded strategies. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 50(3) </volume> <pages> 506-518, </pages> <month> June </month> <year> 1995. </year>
Reference-contexts: 1 Introduction Interactive proofs motivate complexity theorists to study new modes of computation. These modes have been studied to great effect in the setting of polynomial time (e.g. [Sha92, LFKN92, BFL90]) and small space-bounded classes (e.g. <ref> [FL93, CL95] </ref>).
Reference: [FGL + 91] <author> U. Feige, S. Goldwasser, L. Lovasz, S. Safra, and M. Szegedy. </author> <title> Approximating clique is almost NP-complete. </title> <booktitle> In Proceedings 32nd Symposium on Foundations of Computer Science, </booktitle> <pages> pages 2-12. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: Observe that it was just this question which was part of the motivation for the PCP-characterization of NP [AS98, ALM + 92], see also <ref> [BFLS91, FGL + 91, Bab93] </ref>. The PCP result can be formulated in terms of our operators as follows: Theorem 4.3 [AS98, ALM + 92].
Reference: [FL93] <author> Lance Fortnow and Carsten Lund. </author> <title> Interactive proof systems and alternating time-space complexity. </title> <journal> Theoretical Computer Science, </journal> <volume> 113(1) </volume> <pages> 55-73, </pages> <month> 24 May </month> <year> 1993. </year> <month> 18 </month>
Reference-contexts: 1 Introduction Interactive proofs motivate complexity theorists to study new modes of computation. These modes have been studied to great effect in the setting of polynomial time (e.g. [Sha92, LFKN92, BFL90]) and small space-bounded classes (e.g. <ref> [FL93, CL95] </ref>).
Reference: [FRS94] <author> Lance Fortnow, John Rompel, and Michael Sipser. </author> <title> On the power of multi-prover interactive protocols. </title> <journal> Theoretical Computer Science, </journal> <volume> 134(2) </volume> <pages> 545-557, </pages> <month> 21 November </month> <year> 1994. </year>
Reference: [GJ79] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability, A Guide to the Theory of NP-Completeness. </title> <publisher> Freeman, </publisher> <address> New York, </address> <year> 1979. </year>
Reference-contexts: ^ s (n)+1 ^ r ^ 3 _ b 0 a (t;i;j;l) Here, b 0 is a binary string encoding both the Boolean vectors b (t; i; 1) b (t; i; m) plus the (constantly many) new variables that have to be introduced when transforming the formulas into 3-CNF (see <ref> [GJ79, p. 48] </ref>.) New variables introduced in clauses refering to particular choices of t; i will never be used in clauses responsible for other values of t; i. We refer to these variables as the (t; i)-variables.
Reference: [Gol97] <author> O. Goldreich. </author> <title> A taxonomy of proof systems. </title> <editor> In L. A. Hemaspaan-dra and A. L. Selman, editors, </editor> <booktitle> Complexity Theory Retrospective II, </booktitle> <pages> pages 109-134. </pages> <publisher> Springer Verlag, </publisher> <year> 1997. </year>
Reference-contexts: Translating this up shows NEXPTIME 9 2 R p In fact since we can restrict the number of queries to a constant in Theorem 4.6 the same applies for NEXPTIME, giving the following improvement of equation (2): Corollary 4.7 <ref> [Gol97] </ref>.
Reference: [HLS + 93] <author> U. Hertrampf, C. Lautemann, T. Schwentick, H. Vollmer, and K. W. Wagner. </author> <title> On the power of polynomial time bit-reductions. </title> <booktitle> In Proceedings 8th Structure in Complexity Theory, </booktitle> <pages> pages 200-207, </pages> <year> 1993. </year>
Reference-contexts: than the runtime of the underlying machine). 3 Known Results The following relation between type 2 oracle operators and word operators is known: If K is a class defined by nondeterministic polynomial time machines (technically, K is leaf language definable, i.e, K = Leaf P (B) for some set B <ref> [HLS + 93, JMT96] </ref>), then Q 2 K = Q exp K (where Q can be any one of the above operators) [BVW96]. We remark that a connection between the BP 2 operator and ALMOST-classes has been established in [BVW96], see also [VW97a].
Reference: [HPS95] <author> S. Hougardy, H.-J. Promel, and A. Steger. </author> <title> Probabilistically checkable proofs and their consequences for approximation algorithms. </title> <editor> In W. Deubner, H.-J. Promel, and B. Voigt, editors, </editor> <booktitle> Trends in Discrete Mathematics, volume 9 of Topics in Discrete Mathematics, </booktitle> <pages> pages 175-223. </pages> <publisher> North Holland, </publisher> <year> 1995. </year>
Reference-contexts: Instead, we are in need of a stronger PCP-like characterization of NP. As we shall see, this is possible. Fortunately, one can reduce the time bound in Theorem 4.3 to poly-logarithmic time if the input is encoded in an error-correcting code, see e.g. [BFLS91], [Bab93, Theorem 2] or <ref> [HPS95, Section 4.8] </ref>. The encoding is a polynomial time procedure, but one can hope that such an encoding is no more time consuming if an additional padding has to be encoded.
Reference: [Imm87] <author> N. Immerman. </author> <title> Languages that capture complexity classes. </title> <journal> SIAM Journal on Computing, </journal> <volume> 16 </volume> <pages> 760-778, </pages> <year> 1987. </year>
Reference-contexts: For the inclusion NP 9 2 [3] 8 log DLOGTIME, the proof relies on the fact that 3-SAT is NP-complete under DLOGTIME-uniform projections <ref> [Imm87] </ref>. To accept a 3-SAT formula, the existential quantifier guesses an assignment. The universal quantifier guesses a clause. The DLOGTIME computation checks that the clause is satisfied by the assignment.
Reference: [Imm88] <author> N. Immerman. </author> <title> Nondeterministic space is closed under complementation. </title> <journal> SIAM Journal on Computing, </journal> <volume> 17 </volume> <pages> 935-938, </pages> <year> 1988. </year>
Reference-contexts: As the next theorem shows, this is equivalent to the NL = NP question. Theorem 4.2. NL = 9 2 [2] 8 log DLOGTIME. Proof. The proof of NL 9 2 [2] 8 log DLOGTIME relies on the NL-completeness of 2-SAT under DLOGTIME reductions <ref> [Jon75, Imm88, Sze87] </ref>. The proof is exactly analogous to that showing 3-SAT 2 9 2 [3] 8 log DLOGTIME.
Reference: [JMT96] <author> B. Jenner, P. McKenzie, and D. Therien. </author> <title> Logspace and logtime leaf languages. </title> <journal> Information & Computation, </journal> <volume> 129 </volume> <pages> 21-33, </pages> <year> 1996. </year>
Reference-contexts: than the runtime of the underlying machine). 3 Known Results The following relation between type 2 oracle operators and word operators is known: If K is a class defined by nondeterministic polynomial time machines (technically, K is leaf language definable, i.e, K = Leaf P (B) for some set B <ref> [HLS + 93, JMT96] </ref>), then Q 2 K = Q exp K (where Q can be any one of the above operators) [BVW96]. We remark that a connection between the BP 2 operator and ALMOST-classes has been established in [BVW96], see also [VW97a].
Reference: [Jon75] <author> N. D. Jones. </author> <title> Space-bounded reducibility among combinatorial problems. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 15 </volume> <pages> 68-85, </pages> <year> 1975. </year>
Reference-contexts: As the next theorem shows, this is equivalent to the NL = NP question. Theorem 4.2. NL = 9 2 [2] 8 log DLOGTIME. Proof. The proof of NL 9 2 [2] 8 log DLOGTIME relies on the NL-completeness of 2-SAT under DLOGTIME reductions <ref> [Jon75, Imm88, Sze87] </ref>. The proof is exactly analogous to that showing 3-SAT 2 9 2 [3] 8 log DLOGTIME.
Reference: [LFKN92] <author> Carsten Lund, Lance Fortnow, Howard Karloff, and Noam Nisan. </author> <title> Algebraic methods for interactive proof systems. </title> <journal> Journal of the ACM, </journal> <volume> 39(4) </volume> <pages> 859-868, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: 1 Introduction Interactive proofs motivate complexity theorists to study new modes of computation. These modes have been studied to great effect in the setting of polynomial time (e.g. <ref> [Sha92, LFKN92, BFL90] </ref>) and small space-bounded classes (e.g. [FL93, CL95]).
Reference: [Ruz81] <author> W. L. Ruzzo. </author> <title> On uniform circuit complexity. </title> <journal> Journal of Computer and Systems Sciences, </journal> <volume> 21 </volume> <pages> 365-383, </pages> <year> 1981. </year> <month> 19 </month>
Reference-contexts: For instance, the definition of alternating Turing machine given in [CKS81] does not allow an interesting notion of sublinear time complexity, whereas augmenting this model with random access to the input provides a useful model for studying circuit complexity classes such as NC 1 and AC 0 <ref> [Ruz81, Sip83] </ref>.
Reference: [Sch89] <author> U. Schoning. </author> <title> Probabilistic complexity classes and lowness. </title> <journal> Jour--nal of Computer and System Sciences, </journal> <volume> 39 </volume> <pages> 84-100, </pages> <year> 1989. </year>
Reference-contexts: This framework is defined quite elegantly in terms of operators acting on complexity classes, generalizing the framework initially presented by Schoning <ref> [Sch89] </ref>. We present the formal definitions below in Section 2.1. After we present our definitions, we quickly review in Section 3 the main results that were known previously, regarding characterizations of complexity classes in terms of operators applied to P. <p> We repeat their definition together with the definitions of the corresponding type 0 operator (see e.g. <ref> [Sch89] </ref>). We also consider a one-sided error operator in the case of type 0. Definition 2.3. Let K be a relativized class of type 1 k 2.
Reference: [Sha92] <author> A. Shamir. </author> <title> IP = PSPACE. </title> <journal> Journal of the ACM, </journal> <volume> 39 </volume> <pages> 869-877, </pages> <year> 1992. </year>
Reference-contexts: 1 Introduction Interactive proofs motivate complexity theorists to study new modes of computation. These modes have been studied to great effect in the setting of polynomial time (e.g. <ref> [Sha92, LFKN92, BFL90] </ref>) and small space-bounded classes (e.g. [FL93, CL95]). <p> In this way, we obtain new characterizations of NC 1 and NSC. However, a number of open questions remain, regarding whether it is possible to obtain true "scaled down" versions of the characterization of PSPACE in terms of interactive proofs, as given in <ref> [Sha92] </ref>. 2 Definitions 2.1 Oracle Operators Let us start by formally defining the operators we will use in this paper.
Reference: [Sip83] <author> M. Sipser. </author> <title> Borel sets and circuit complexity. </title> <booktitle> In Proceedings of the 15th Symposium on Theory of Computing, </booktitle> <pages> pages 61-69. </pages> <publisher> ACM Press, </publisher> <year> 1983. </year>
Reference-contexts: For instance, the definition of alternating Turing machine given in [CKS81] does not allow an interesting notion of sublinear time complexity, whereas augmenting this model with random access to the input provides a useful model for studying circuit complexity classes such as NC 1 and AC 0 <ref> [Ruz81, Sip83] </ref>.
Reference: [Sze87] <author> R. Szelepcsenyi. </author> <title> The method of forcing for nondeterministic automata. </title> <journal> Bulletin of the European Association for Theoretical Computer Science, </journal> <volume> 33 </volume> <pages> 96-100, </pages> <year> 1987. </year>
Reference-contexts: As the next theorem shows, this is equivalent to the NL = NP question. Theorem 4.2. NL = 9 2 [2] 8 log DLOGTIME. Proof. The proof of NL 9 2 [2] 8 log DLOGTIME relies on the NL-completeness of 2-SAT under DLOGTIME reductions <ref> [Jon75, Imm88, Sze87] </ref>. The proof is exactly analogous to that showing 3-SAT 2 9 2 [3] 8 log DLOGTIME.
Reference: [VW97a] <author> H. Vollmer and K. W. Wagner. </author> <title> Measure one results in computational complexity theory. </title> <editor> In D.-Z. Du and K.-I. Ko, editors, </editor> <booktitle> Advances in Algorithms, Languages, and Complexity. </booktitle> <publisher> Kluwer Academic Publishers, </publisher> <year> 1997. </year>
Reference-contexts: We remark that a connection between the BP 2 operator and ALMOST-classes has been established in [BVW96], see also <ref> [VW97a] </ref>. There it was shown that for a great number of classes K, the identities BP 2 K = BP exp K = ALMOST-K 5 hold.
Reference: [VW97b] <author> H. Vollmer and K. W. Wagner. </author> <title> On operators of higher types. </title> <booktitle> In Proceedings 12th Conference on Computational Complexity, </booktitle> <pages> pages 174-184. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1997. </year> <month> 20 </month>
Reference-contexts: PSPACE = IP = 9 1 BP p P = 9 1 R p Because the first equality in both statements is not relativizable, this yields non-relativizable operator characterizations of NEXPTIME and PSPACE. In contrast to this, the following characterizations (obtained in [BW98a], see also <ref> [VW97b] </ref>) are relativizable. Theorem 3.2. 1. NEXPTIME = 9 2 8 p P = 9 2 [3] 8 p P. 2. PSPACE = 9 1 8 p P = 9 1 [2] 8 p P.
References-found: 30

