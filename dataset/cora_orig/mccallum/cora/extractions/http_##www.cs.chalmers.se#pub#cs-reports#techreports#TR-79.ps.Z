URL: http://www.cs.chalmers.se/pub/cs-reports/techreports/TR-79.ps.Z
Refering-URL: http://www.cs.chalmers.se/pub/cs-reports/techreports/
Root-URL: 
Email: e-mail: tammet@cs.chalmers.se  
Title: Completeness of Resolution for Definite Answers  
Author: Tanel Tammet 
Address: S-41296 Goteborg, Sweden  
Affiliation: Department of Computing Science Chalmers University of Technology and Goteborg University  
Date: 79, April 1994  
Note: Printed as: Programming Methodology Group report  
Abstract: A slightly modified version of this report will appear in the Journal of Logic and Computation. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> C.L.Chang, R.C.T Lee. </author> <title> Symbolic Logic and Mechanical Theorem Proving. </title> <publisher> Academic Press, </publisher> <year> 1973. </year>
Reference-contexts: One of the standard approaches to automated program construction is using intuitionistic logic with a suitable realizability interpretation to derive programs from proofs (see [5], [11], [8]). The programs derived in this way always enjoy an intuitionistic correctness proof. 1 Another approach (see [2], [6], <ref> [1] </ref>) is to use classical logic instead, with the addi-tional restrictions guaranteeing that the proof contains a single definite substitution t into a certain existentially bound variable, and this t is furthermore in a signature where all the function and predicate symbols are assumed to represent computable functions. <p> A large body of 3 theory concerning various modifications and special strategies of resolution has been developed. First we will define the standard notions of the resolution method. For further details see, for example, <ref> [1] </ref> or [3]. The Skolemization algorithm transforms any formula F to a formula F 0 such that all the variables in F 0 are assumed to be bound by the essentially existential quantifiers, F 0 contains no quantifiers and F is provable iff F 0 is provable. <p> Our presentation of the ANS-method differs slightly from the presentation in [4] and <ref> [1] </ref>. Definition A formula, clause set, clause, literal or a term is called ground iff it does not contain any variables. <p> For the correctness and completeness proofs of the ANS-method see [4] or <ref> [1] </ref>. Example Consider the formula F : (P (a) _ P (c)) ) 9yP (y) and the main variable y in F . Skolemization gives (P (a)_P (c)) ) P (y). The clause form S of F : ffP (a); P (c)g; f:P (y)gg. <p> For any clause C containing a literal L with the predicate symbol A, L may be resolved upon in C only if all literals in C have a predicate symbol A. Such a restricted resolution method is complete (see <ref> [1] </ref> or [3]) for any predicate symbol A. <p> The A (R)-calculus we give (it is based on the A-resolution calculus presented in <ref> [1] </ref>) is an extension of the D (R)-calculus which allows the derivation of answer literals containing the case analysis function if and predicate symbols. The function if is defined in the standard way: if (True; x; y) = x and if (False; x; y) = y. <p> As S does not contain nonparametric Skolem functions, g does not contain them either. Finally, use the fact that the A F algorithm performs only equivalent transformations and use the correctness lemma of the ANS-method from <ref> [1] </ref>. 2 The following completeness theorem for the general case is a main result of the paper. The idea of the proof is similar to the idea of the earlier D-completeness proof. Theorem 2 The A (R)-calculus is D if (R)-complete. <p> We restrict the resolution method by allowing resolution upon a literal L in a clause C only if C does not contain any literal R preferred over L. This restriction is a case of so-called ordered semantic resolution, see [3] or <ref> [1] </ref>. We will restrict resolution further by prohibiting the derivation of tautologies (clauses containing some literal L and its negation :L). This restriction preserves completeness for the semantic resolution. <p> This calculus is essentially the same as the A-resolution method introduced in [2] and <ref> [1] </ref>. Moreover, the A (R)-calculus corresponds to the clause fragment of the calculus used by Z.Manna and R.Waldinger, see [6] and [7] (Z.Manna and R.Waldinger use full first-order language).
Reference: [2] <author> C.L.Chang, R.C.T Lee, R.Waldinger. </author> <title> An Improved Program-Synthesizing Algorithm and its Correctness. </title> <journal> Comm. of ACM, (1974), V17, </journal> <volume> N4, </volume> <pages> 211-217. 28 </pages>
Reference-contexts: One of the standard approaches to automated program construction is using intuitionistic logic with a suitable realizability interpretation to derive programs from proofs (see [5], [11], [8]). The programs derived in this way always enjoy an intuitionistic correctness proof. 1 Another approach (see <ref> [2] </ref>, [6], [1]) is to use classical logic instead, with the addi-tional restrictions guaranteeing that the proof contains a single definite substitution t into a certain existentially bound variable, and this t is furthermore in a signature where all the function and predicate symbols are assumed to represent computable functions. <p> This calculus is essentially the same as the A-resolution method introduced in <ref> [2] </ref> and [1]. Moreover, the A (R)-calculus corresponds to the clause fragment of the calculus used by Z.Manna and R.Waldinger, see [6] and [7] (Z.Manna and R.Waldinger use full first-order language).
Reference: [3] <author> C.Fermuller, A.Leitsch, T.Tammet, N.Zamov. </author> <title> Resolution Methods for the De--cision Problem. </title> <booktitle> Lecture Notes in Artificial Intelligence 679, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1993. </year>
Reference-contexts: A large body of 3 theory concerning various modifications and special strategies of resolution has been developed. First we will define the standard notions of the resolution method. For further details see, for example, [1] or <ref> [3] </ref>. The Skolemization algorithm transforms any formula F to a formula F 0 such that all the variables in F 0 are assumed to be bound by the essentially existential quantifiers, F 0 contains no quantifiers and F is provable iff F 0 is provable. <p> For any clause C containing a literal L with the predicate symbol A, L may be resolved upon in C only if all literals in C have a predicate symbol A. Such a restricted resolution method is complete (see [1] or <ref> [3] </ref>) for any predicate symbol A. <p> We restrict the resolution method by allowing resolution upon a literal L in a clause C only if C does not contain any literal R preferred over L. This restriction is a case of so-called ordered semantic resolution, see <ref> [3] </ref> or [1]. We will restrict resolution further by prohibiting the derivation of tautologies (clauses containing some literal L and its negation :L). This restriction preserves completeness for the semantic resolution. <p> See <ref> [3] </ref> for the detailed analysis of ordering restrictions. Lemma 3 Let be an ordering of literals and let preserve completeness of reso lution.
Reference: [4] <author> C.Green. </author> <title> Application of theorem-proving to problem solving. </title> <booktitle> In Proc. 1st In-ternat. Joint. Conf. Artificial Intelligence, </booktitle> <pages> pages 219-239, </pages> <year> 1969. </year>
Reference-contexts: Our presentation of the ANS-method differs slightly from the presentation in <ref> [4] </ref> and [1]. Definition A formula, clause set, clause, literal or a term is called ground iff it does not contain any variables. <p> For the correctness and completeness proofs of the ANS-method see <ref> [4] </ref> or [1]. Example Consider the formula F : (P (a) _ P (c)) ) 9yP (y) and the main variable y in F . Skolemization gives (P (a)_P (c)) ) P (y). The clause form S of F : ffP (a); P (c)g; f:P (y)gg.
Reference: [5] <author> S.C.Kleene. </author> <title> Introduction to Metamathematics. </title> <publisher> North-Holland, </publisher> <address> Amsterdam, </address> <year> 1952. </year>
Reference-contexts: The specific aim of the paper is to present completeness results for certain simple relatively well-known program synthesis algorithms. One of the standard approaches to automated program construction is using intuitionistic logic with a suitable realizability interpretation to derive programs from proofs (see <ref> [5] </ref>, [11], [8]).
Reference: [6] <author> Z.Manna, R.Waldinger. </author> <title> A deductive approach to program synthesis. </title> <journal> ACM Trans. Programming Languages and Systems, (1980), </journal> <volume> N2(1), </volume> <pages> 91-121. </pages>
Reference-contexts: One of the standard approaches to automated program construction is using intuitionistic logic with a suitable realizability interpretation to derive programs from proofs (see [5], [11], [8]). The programs derived in this way always enjoy an intuitionistic correctness proof. 1 Another approach (see [2], <ref> [6] </ref>, [1]) is to use classical logic instead, with the addi-tional restrictions guaranteeing that the proof contains a single definite substitution t into a certain existentially bound variable, and this t is furthermore in a signature where all the function and predicate symbols are assumed to represent computable functions. <p> This calculus is essentially the same as the A-resolution method introduced in [2] and [1]. Moreover, the A (R)-calculus corresponds to the clause fragment of the calculus used by Z.Manna and R.Waldinger, see <ref> [6] </ref> and [7] (Z.Manna and R.Waldinger use full first-order language). We formulate and prove completeness of the A (R)-calculus, giving also a completeness-preserving criteria (strong liftability) for the special term restriction R necessary for program derivation. We give a completeness-preserving criteria and a counterexample for ordering restrictions of A (R)-calculus.
Reference: [7] <author> Z.Manna, R.Waldinger. </author> <title> Fundamentals of Deductive Program Synthesis. </title> <journal> IEEE Transactions on Software Engineering, (1992), V18, </journal> <volume> N8, </volume> <pages> 674-704. </pages>
Reference-contexts: This calculus is essentially the same as the A-resolution method introduced in [2] and [1]. Moreover, the A (R)-calculus corresponds to the clause fragment of the calculus used by Z.Manna and R.Waldinger, see [6] and <ref> [7] </ref> (Z.Manna and R.Waldinger use full first-order language). We formulate and prove completeness of the A (R)-calculus, giving also a completeness-preserving criteria (strong liftability) for the special term restriction R necessary for program derivation. We give a completeness-preserving criteria and a counterexample for ordering restrictions of A (R)-calculus.
Reference: [8] <author> G.Mints, E.Tyugu. </author> <title> Justification of the structural synthesis of programs. </title> <institution> Sci. of Comput. Program., </institution> <year> (1982),N2, </year> <pages> 215-240. </pages>
Reference-contexts: The specific aim of the paper is to present completeness results for certain simple relatively well-known program synthesis algorithms. One of the standard approaches to automated program construction is using intuitionistic logic with a suitable realizability interpretation to derive programs from proofs (see [5], [11], <ref> [8] </ref>).
Reference: [9] <author> G.Mints. </author> <title> Gentzen-type Systems and Resolution Rules. Part I. Propositional Logic. </title> <booktitle> In COLOG-88, </booktitle> <pages> pages 198-231. </pages> <booktitle> Lecture Notes in Computer Science vol. </booktitle> <volume> 417, </volume> <publisher> Springer Verlag, </publisher> <year> 1990. </year>
Reference: [10] <author> G.Mints. </author> <title> Gentzen-type Systems and Resolution Rules. Part II. Predicate Logic. </title> <booktitle> In Logic Colloquium '90. </booktitle>
Reference-contexts: the following formulas, while none of these formulas is intuitionistically provable: 8x9y ((A _ :A) & y = x) * The resolution method with Skolemization and/or conversion to a conjunctive normal form (CNF) cannot be used for intuitionistic logic, although there exist special resolution methods without Skolemization and CNF ([9], <ref> [10] </ref>) and a tableaux method with partial dynamic Skolemization ([15]) for intuitionistic logic. * There is a sizeable amount of theory for the resolution method, including different search strategies, decidable classes, etc, which can be used for program derivation by A-resolution. * The technology developed for automated theorem proving in classical
Reference: [11] <author> B.Nordstrom, K.Petersson, J.M.Smith. </author> <title> Programming in Martin-Lof's Type Theory. </title> <publisher> Clarendon Press, Oxford, </publisher> <year> 1990. </year>
Reference-contexts: The specific aim of the paper is to present completeness results for certain simple relatively well-known program synthesis algorithms. One of the standard approaches to automated program construction is using intuitionistic logic with a suitable realizability interpretation to derive programs from proofs (see [5], <ref> [11] </ref>, [8]). <p> We will present the program extracted from the proof of the basis and step formulas (see <ref> [11] </ref>) as two equalities, one for the constructor nil and one for the pair constructor c. The choice of the induction principle is not relevant for our aim of demonstrating the A (R)-calculus proofs of the first-order tasks.
Reference: [12] <author> G.Peterson. </author> <title> A technique for establishing completeness results in theorem proving with equality. </title> <journal> SIAM J. of Comput. (1983), </journal> <volume> N12, </volume> <pages> 82-100. </pages>
Reference-contexts: The equality predicate in the rule is assumed to be commutative, i.e. t 0 = g is the same as g = t 0 . The terms t and t 0 must be unifiable. The completeness theorem for paramodulation (see <ref> [12] </ref>) says that if a clause set S [ E is unsatisfiable, where E is an axiomatization of the equality predicate = for S, then the empty clause will be derived from the set S [ ffx = xgg by resolution, factorization and paramodulation steps.
Reference: [13] <author> J.A. Robinson. </author> <title> A Machine-oriented Logic Based on the Resolution Principle. </title> <journal> Journal of the ACM 12, </journal> <year> 1965, </year> <pages> pp 23-41. </pages>
Reference-contexts: The proof search is carried out in a modified resolution calculus. 2 The resolution calculus Since its introduction in <ref> [13] </ref> the resolution method has been the most popular method of automated theorem proving in classical predicate logic. A large body of 3 theory concerning various modifications and special strategies of resolution has been developed. First we will define the standard notions of the resolution method.
Reference: [14] <author> U.R.Schmerl. </author> <title> A Resolution Calculus Giving Definite Answers. </title> <type> Report Nr 9108, </type> <month> July </month> <year> 1991, </year> <institution> Fakultat fur Informatik, Universitat der Bundeswehr Munchen. </institution>
Reference-contexts: The analogue of the following D-completeness lemma is proved in <ref> [14] </ref>. We give our own proof with the principal idea similar to the idea of the proof of the forthcoming theorem 2 (the main result of the paper). Lemma 1 (D-completeness of the D-calculus) Let G be a clause set containing a variable y. <p> We formulate and prove completeness of the A (R)-calculus, giving also a completeness-preserving criteria (strong liftability) for the special term restriction R necessary for program derivation. We give a completeness-preserving criteria and a counterexample for ordering restrictions of A (R)-calculus. The earlier completeness result by U.Schmerl in <ref> [14] </ref> for the resolution-based calculus of deriving definite answers without conditions (ie. without if ) and without the R-restriction is a subcase of our result. Acknowledgements: We'd like to thank Jan Smith, Tarmo Uustalu and especially Grigori Mints for useful discussions, criticism, numerous ideas and suggestions.
Reference: [15] <author> N.Shankar. </author> <title> Proof Search in the Intuitionistic Sequent Calculus. </title> <booktitle> In CADE-11, </booktitle> <pages> pages 522-536, </pages> <booktitle> Lecture Notes in Artificial Intelligence 607, </booktitle> <publisher> Springer Verlag, </publisher> <year> 1992. </year>
References-found: 15

