URL: http://www.cs.umd.edu/projects/dimsum/papers/scramb-sigmod98.ps.gz
Refering-URL: http://www.cs.umd.edu/projects/dimsum/papers/
Root-URL: 
Email: urhan@cs.umd.edu  franklin@cs.umd.edu  Laurent.Amsaleg@irisa.fr  
Title: Cost-based Query Scrambling for Initial Delays  
Author: Tolga Urhan Michael J. Franklin Laurent Amsaleg 
Date: June 1998.  
Address: Seattle, WA,  
Note: Appears in ACM SIGMOD International Conference on the  This work was partially supported by the NSF under grant IRI-94-09575, by the Office of Naval Research under contract number N66001-97-C8539 (DARPA order number F475), by Bellcore, and by an IBM Shared University Research award. Laurent Amsaleg's work was partially supported by an INRIA fellowship. He performed this work while he was with the  
Affiliation: University of Maryland  University of Maryland  IRISA  Management of Data,  University of Maryland.  
Abstract: Remote data access from disparate sources across a wide-area network such as the Internet is problematic due to the unpredictable nature of the communications medium and the lack of knowledge about the load and potential delays at remote sites. Traditional, static, query processing approaches break down in this environment because they are unable to adapt in response to unexpected delays. Query scrambling has been proposed to address this problem. Scrambling modifies query execution plans on-the-fly when delays are encountered during runtime. In its original formulation, scrambling was based on simple heuristics, which although providing good performance in many cases, were also shown to be susceptible to problems resulting from bad scrambling decisions. In this paper we address these shortcomings by investigating ways to exploit query optimization technology to aid in making intelligent scrambling choices. We propose three different approaches to using query optimization for scrambling. These approaches vary, for example, in whether they optimize for total work or response-time, and whether they construct partial or complete alternative plans. Using a two-phase randomized query optimizer, a distributed query processing simulator, and a workload derived from queries of the TPC-D benchmark, we evaluate these different approaches and compare their ability to cope with initial delays in accessing remote sources. The results show that cost-based scrambling can effectively hide initial delays, but that in the absence of good predictions of expected delay durations, there are fundamental tradeoffs between risk aversion and effectiveness. 
Abstract-found: 1
Intro-found: 1
Reference: [ABF + 97] <author> L. Amsaleg, P. Bonnet, M. Franklin, A. Tomasic, and T. </author> <title> Urhan Improving Responsiveness for Wide-Area Data Access. </title> <journal> IEEE Data Engineering Bulletin, </journal> <volume> Vol. 20, No. </volume> <pages> 3. </pages>
Reference-contexts: As described in [AFT98] such delays introduce a number of scheduling and memory management issues that must be addressed by scrambling. In addition, we would like to investigate the use of delay prediction techniques in the scrambling approaches. Finally, as described in <ref> [ABF + 97] </ref>, additional techniques are required for dealing with very long periods of outage. Unlike scrambling, these techniques necessarily change the answer that is returned to the user, and thus, raise a number of interesting semantic questions in addition to the performance-oriented questions that we have addressed here.
Reference: [AFT98] <author> L. Amsaleg, M. J. .Franklin, and A. Tomasic. </author> <title> Dynamic Query Operator Scheduling for Wide-Area Remote Access. </title> <journal> Journal of Distributed and Parallel Databases, </journal> <volume> Vol. 6, No. 3, </volume> <month> July </month> <year> 1998. </year>
Reference-contexts: In general, the amount of delay that can be hidden by scrambling (in the absence of creating additional parallelism, as is discussed in <ref> [AFT98] </ref>) is limited by the normal response time of the query. This is because scrambling hides delays by performing other useful work, so its ability to hide delay is limited by the amount of useful work that can be done. <p> First, although not discussed in this paper, the scrambling techniques we have described here can be adapted for use with other types of delay, such as bursty arrival, in which sites repeatedly stall and recover. As described in <ref> [AFT98] </ref> such delays introduce a number of scheduling and memory management issues that must be addressed by scrambling. In addition, we would like to investigate the use of delay prediction techniques in the scrambling approaches.
Reference: [AFTU96] <author> L. Amsaleg, M. J. .Franklin, A. Tomasic, and T. Urhan. </author> <title> Scrambling Query Plans to Cope With Unexpected Delays. </title> <booktitle> PDIS Conf., </booktitle> <address> Miami, USA, </address> <year> 1996. </year>
Reference-contexts: statically optimized query plan is likely to be sub-optimal in the presence of the response time problems that will inevitably arise during the query run-time. 1.1 Query Scrambling To address the issue of unpredictable delays in the wide-area environment, we proposed a dynamic approach to query execution called query scrambling <ref> [AFTU96] </ref>. Query scrambling reacts to unexpected delays by rescheduling, on-the-fly, the operations of a query during its execution. <p> Query scrambling as defined in <ref> [AFTU96] </ref> consists of two different phases: a rescheduling phase, in which the scheduling of the operators of an active query plan is changed when a delay is detected, and an operator synthesis phase in which the query plan is restructured, typically by creating new operators that are not in the current <p> Likewise, if during scrambling, a delay arises when accessing a remote source, the current scrambling step is abandoned, and a new one is started. As discussed in Section 1.1, the original formulation of scrambling was heuristic-based <ref> [AFTU96] </ref>. In this paper, we address the shortcomings of that earlier approach by incorporating query optimization into the scrambling process. The focus of the paper is on Phase 2 of scrambling, but we also apply cost-based decision making in Phase 1. <p> This traversal picks up the other reducers in the query (the result computed in the first phase which contains the reducers REGION, and ORDER) before accessing the large LINEITEM relation. In contrast to the cost-based approaches, the original heuristic-based scrambling algorithm <ref> [AFTU96] </ref> follows the policy of executing the left-most runnable sub-tree of the query plan, which in this case, results in joining LINEITEM and ORDER in the absence of the other reducer, REGION (the heuristic-based algorithm is not shown in the figure).
Reference: [Ant93] <author> G. Antoshenkov. </author> <title> Dynamic Query Optimization in Rdb/VMS. </title> <booktitle> ICDE Conf., </booktitle> <address> Vienna, Austria, </address> <year> 1993. </year>
Reference-contexts: Neither of these approaches, however, can adapt to changes in the system parameters that occur during the query execution. Rdb/VMS uses a different approach as described in <ref> [Ant93] </ref>. In this approach, multiple different executions of the same logical operator are started at the same time. When one execution of an operator is determined to be better, the other execution is terminated, and the winner is executed to completion.
Reference: [Bro92] <author> K. Brown. Prpl: </author> <title> A database workload specification language. </title> <type> Master's thesis, </type> <institution> University of Winsconsin, Madison, Winsconsin, </institution> <year> 1992. </year>
Reference-contexts: Disks are modeled using a detailed characterization and settings adapted from the ZetaSim model <ref> [Bro92] </ref>. The disk model includes costs for random and sequential physical accesses and also charges for software operations implementing I/Os. The unit of disk I/O for the database is pages of size DskPageSize. The disks prefetch pages when reads are performed.
Reference: [CBTY89] <author> A. Chen, D. Brill, M. Templeton, and C. Yu. </author> <title> Distributed Query Processing in a Multiple Database System. </title> <journal> IEEE Journal on Selected Areas in Communications, </journal> <volume> 7(3), </volume> <year> 1989. </year>
Reference-contexts: Bushy plans are generally less vulnerable to delays since different branches of tree can be found that are not directly affected by the delayed relations; such subtrees can be executed independently. The research prototype Mermaid <ref> [CBTY89] </ref> and its commercial successor InterViso [THMB95] are heterogeneous distributed databases that perform dynamic query optimization. Mermaid constructs its query plan entirely at run-time, thus each step in query optimization is based on dynamic information such as the intermediate relation cardinalities and system performance.
Reference: [CD96] <author> M. J. Carey, D. J. DeWitt. </author> <title> Of Objects and Databases: </title>
Reference-contexts: The severity of such a limitation has been demonstrated before, most recently in the battle between object-oriented database (OODB) and object-relational database (ORDB) systems. To date, navigation-oriented OODB approaches have remained largely niche solutions, while the query-oriented ORDB approach has been embraced by most of the major database vendors <ref> [CD96] </ref>. Given the importance of declarative query processing for many applications, it is natural to investigate ways to provide such functionality over the wealth of data that is available across current wide-area networks. Query processing in wide-area distributed environments poses a number of difficult technical challenges.
References-found: 7

