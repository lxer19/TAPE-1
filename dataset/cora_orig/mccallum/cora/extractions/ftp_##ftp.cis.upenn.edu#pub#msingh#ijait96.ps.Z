URL: ftp://ftp.cis.upenn.edu/pub/msingh/ijait96.ps.Z
Refering-URL: http://www.cis.upenn.edu/~msingh/frames/papers_list.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: PATH CONSISTENCY REVISITED  
Author: MONINDER SINGH 
Keyword: Constraint satisfaction, Path consistency, Arc consistency, Backtracking, Con straint networks.  
Date: Received 12 April 1995 Revised 10 January 1996  
Address: Philadelphia, PA 19104-6389  
Affiliation: Department of Computer and Information Science University of Pennsylvania  
Note: International Journal on Artificial Intelligence Tools, (IJAIT) c World Scientific Publishing Company  
Abstract: One of the main factors limiting the use of path consistency algorithms in real life applications is their high space complexity. Han and Lee proposed a path consistency algorithm, PC-4, with O(n 3 a 3 ) space complexity, which makes it practicable only for small problems. I present a new path consistency algorithm, PC-5, which has an O(n 3 a 2 ) space complexity while retaining the worst-case time complexity of PC-4. Moreover, the new algorithm exhibits a much better average-case time complexity. The new algorithm is based on the idea (due to Bessiere) that, at any time, only a minimal amount of support has to be found and recorded for a labeling to establish its viability; one has to look for a new support only if the current support is eliminated. I also show that PC-5 can be improved further to yield an algorithm, PC5++, with even better average-case performance and the same space complexity. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. K. Mackworth, </author> <title> Consistency in networks of relations, </title> <booktitle> Artif. Intell. </booktitle> <month> 8 (1) </month> <year> (1977) </year> <month> 99-118. </month>
Reference-contexts: Most of the methods used to solve such problems are based on some backtracking scheme, which can be very inefficient with exponential run-time complexity for most nontrivial problems. One of the reasons for this is that backtracking suffers from "thrashing" <ref> [1] </ref> i.e. search in different parts of the space keeps failing for the same reasons. Mackworth [1] identified three main causes for thrashing node inconsistency, arc inconsistency and path inconsistency. <p> One of the reasons for this is that backtracking suffers from "thrashing" <ref> [1] </ref> i.e. search in different parts of the space keeps failing for the same reasons. Mackworth [1] identified three main causes for thrashing node inconsistency, arc inconsistency and path inconsistency. A number of methods have been developed to simplify constraint networks (before or during the search for solutions) by removing values that lead to such inconsistencies. <p> Node consistency can be achieved by checking the unary predicate on each node and removing from its domain values that do not satisfy this predicate <ref> [1] </ref>. Arc consistency involves binary constraints between pairs of variables, and can be achieved by removing values from the domains of each pair of variables that violate the direct constraint between them. A number of algorithms have been developed for achieving arc consistency in constraint networks including Mackworth's AC-3 algorithm [1], <p> <ref> [1] </ref>. Arc consistency involves binary constraints between pairs of variables, and can be achieved by removing values from the domains of each pair of variables that violate the direct constraint between them. A number of algorithms have been developed for achieving arc consistency in constraint networks including Mackworth's AC-3 algorithm [1], Mohr and Henderson's AC-4 algorithm [2] and Bessiere's AC-6 algorithm [3]. Path consistency implies that any node-value pair of labelings (i; b) (j; c) that is consistent with the direct constraint between i and j is also allowed by all paths between i and j. <p> Once again, a number of algorithms have been designed for achieving path consistency in constraint networks. Mackworth's PC-2 algorithm <ref> [1] </ref>, an improvement over Montanari's PC-1 algorithm [1, 4] has a worst case running time bounded above by O (n 3 a 5 ) [5]. <p> Once again, a number of algorithms have been designed for achieving path consistency in constraint networks. Mackworth's PC-2 algorithm [1], an improvement over Montanari's PC-1 algorithm <ref> [1, 4] </ref> has a worst case running time bounded above by O (n 3 a 5 ) [5]. Mohr and Henderson's path consistency algorithm [2], PC-3, uses the same ideas to improve PC-2 as they had used to design AC-4, an improvement over AC-3.
Reference: [2] <author> R. Mohr and T. Henderson, </author> <title> Arc and path consistency revisited, </title> <booktitle> Artif. Intell. </booktitle> <month> 28 </month> <year> (1986) </year> <month> 225-233. </month>
Reference-contexts: A number of algorithms have been developed for achieving arc consistency in constraint networks including Mackworth's AC-3 algorithm [1], Mohr and Henderson's AC-4 algorithm <ref> [2] </ref> and Bessiere's AC-6 algorithm [3]. Path consistency implies that any node-value pair of labelings (i; b) (j; c) that is consistent with the direct constraint between i and j is also allowed by all paths between i and j. <p> Mackworth's PC-2 algorithm [1], an improvement over Montanari's PC-1 algorithm [1, 4] has a worst case running time bounded above by O (n 3 a 5 ) [5]. Mohr and Henderson's path consistency algorithm <ref> [2] </ref>, PC-3, uses the same ideas to improve PC-2 as they had used to design AC-4, an improvement over AC-3. <p> Motivation PC-4, Han & Lee's corrected version of PC-3, has an O (n 3 a 3 ) space complexity. As noted by Mohr and Henderson <ref> [2] </ref>, the space complexity of the PC-3 algorithm (and hence of PC-4) makes it practicable only for small problems. Hence, it would be useful to reduce the space requirements of the PC-4 algorithm while keeping the same worst-case time complexity. <p> PC-5 can be further improved to yield another algorithm, PC5++, which has an even better average-case time complexity as compared to PC-5. The main feature of Mohr and Henderson's AC-4 algorithm <ref> [2] </ref> was that it made the "support" of a labeling (i; b) evident by storing the relevant support information in an explicit data structure. They had used the same idea in designing PC-3, as did Han and Lee [6] in designing PC-4, the corrected version of PC-3.
Reference: [3] <author> C. Bessiere, </author> <title> Arc-consistency and arc-consistency again, </title> <booktitle> Artif. Intell. </booktitle> <month> 65 (1) </month> <year> (1994) </year> <month> 179-190. </month>
Reference-contexts: A number of algorithms have been developed for achieving arc consistency in constraint networks including Mackworth's AC-3 algorithm [1], Mohr and Henderson's AC-4 algorithm [2] and Bessiere's AC-6 algorithm <ref> [3] </ref>. Path consistency implies that any node-value pair of labelings (i; b) (j; c) that is consistent with the direct constraint between i and j is also allowed by all paths between i and j. <p> Since it is not, it sets R ij (b; c) = False and R ji (c; b) = False. While this is correct, the a While PC-5 is based on AC-6 <ref> [3] </ref>, PC5++ can be regarded as an extension to AC6++ [8]. b I use R ij (b; c) to represent the binary relation R 2 (i; b; j; c) used earlier in the definition of a CSP (page 2). algorithm goes further and also eliminates R 13 (1; 3) (i.e. <p> They had used the same idea in designing PC-3, as did Han and Lee [6] in designing PC-4, the corrected version of PC-3. Bessiere's AC-6 algorithm <ref> [3] </ref> improves on AC-4 by reducing the space requirements while retaining its (optimal) worst-case time complexity. I use the same ideas as Bessiere to improve upon PC-4. 3. The PC-5 algorithm As pointed out in section 2, PC-4 is based on the notion of "support". <p> As noted by Bessiere <ref> [3] </ref>, computing the number of supports for each labeling (i; b) (j; c) and recording all of them implies an average-case time complexity and space complexity both increasing with the number of allowed pairs in the relations, since the number of supports is proportional to the number of pairs allowed in <p> The procedure nextsupport (Figure 3) is used to find the first as well as the next support of each labeling (i; b) (j; c) in the domain of k. This procedure is based on the nextsupport procedure used in AC-6 <ref> [3] </ref>. During the propagation phase (Figure 4), information about the invalid la-belings (recorded in the waiting list) has to be propagated to all the nodes.
Reference: [4] <author> U. Montanari, </author> <title> Networks of constraints: fundamental properties and applications to picture processing, </title> <institution> Inf. Sci. </institution> <month> 7 </month> <year> (1974) </year> <month> 95-132. </month>
Reference-contexts: To achieve path consistency in a constraint network, it is sufficient to make all length-2 paths consistent since path consistency in a complete graph is equivalent to path consistency of all length-2 paths <ref> [4] </ref>. Once again, a number of algorithms have been designed for achieving path consistency in constraint networks. Mackworth's PC-2 algorithm [1], an improvement over Montanari's PC-1 algorithm [1, 4] has a worst case running time bounded above by O (n 3 a 5 ) [5]. <p> Once again, a number of algorithms have been designed for achieving path consistency in constraint networks. Mackworth's PC-2 algorithm [1], an improvement over Montanari's PC-1 algorithm <ref> [1, 4] </ref> has a worst case running time bounded above by O (n 3 a 5 ) [5]. Mohr and Henderson's path consistency algorithm [2], PC-3, uses the same ideas to improve PC-2 as they had used to design AC-4, an improvement over AC-3.
Reference: [5] <author> A.K. </author> <title> Mackworth and E.C. Freuder, The complexity of some polynomial network consistency algorithms for constraint satisfaction problems, </title> <booktitle> Artif. Intell. </booktitle> <month> 25 </month> <year> (1985) </year> <month> 65-74. </month>
Reference-contexts: Once again, a number of algorithms have been designed for achieving path consistency in constraint networks. Mackworth's PC-2 algorithm [1], an improvement over Montanari's PC-1 algorithm [1, 4] has a worst case running time bounded above by O (n 3 a 5 ) <ref> [5] </ref>. Mohr and Henderson's path consistency algorithm [2], PC-3, uses the same ideas to improve PC-2 as they had used to design AC-4, an improvement over AC-3.
Reference: [6] <author> C. Han and C. Lee, </author> <title> Comments on Mohr and Henderson's path consistency algorithm, </title> <booktitle> Artif. Intell. </booktitle> <month> 36 </month> <year> (1988) </year> <month> 125-130. </month>
Reference-contexts: Mohr and Henderson's path consistency algorithm [2], PC-3, uses the same ideas to improve PC-2 as they had used to design AC-4, an improvement over AC-3. However, Han and Lee <ref> [6] </ref> showed that PC-3 is incorrect, and presented a corrected version, PC-4, with a worst case time and space complexity of O (n 3 a 3 ). Chen [7] attempted to modify PC4 in order to improve its average case performance while retaining its worst case complexity. <p> The main feature of Mohr and Henderson's AC-4 algorithm [2] was that it made the "support" of a labeling (i; b) evident by storing the relevant support information in an explicit data structure. They had used the same idea in designing PC-3, as did Han and Lee <ref> [6] </ref> in designing PC-4, the corrected version of PC-3. Bessiere's AC-6 algorithm [3] improves on AC-4 by reducing the space requirements while retaining its (optimal) worst-case time complexity. I use the same ideas as Bessiere to improve upon PC-4. 3.
Reference: [7] <author> Y. Chen, </author> <title> Improving Han and Lee's path consistency algorithm, </title> <booktitle> Proc. 3rd IEEE Int. Conf. on Tools for AI (1991) 346-350. </booktitle>
Reference-contexts: However, Han and Lee [6] showed that PC-3 is incorrect, and presented a corrected version, PC-4, with a worst case time and space complexity of O (n 3 a 3 ). Chen <ref> [7] </ref> attempted to modify PC4 in order to improve its average case performance while retaining its worst case complexity. However, I shall show in Section 2 that this algorithm is incorrect. <p> Hence, in many problems where path consistency will not remove many values, the initialization step will be fairly time consuming. Therefore, it is desirable to reduce the complexity of the initialization phase. Chen <ref> [7] </ref> attempted to modify the PC-4 algorithm in order to improve its average-case time and space complexity, while retaining its O (n 3 a 3 ) worst-case time and space complexity. <p> However, a labeling (i; b) (j; c) cannot be eliminated from the corresponding relation R ij b unless all values in the domain of some node k have been tested and found not to support the labeling. The error I have found in Chen's PC algorithm <ref> [7, procedure PC, page 347] </ref> is that, in lines 26-31, a labeling (i; b) (k; d) can be eliminated from R ik before all values in D j have been tested. A similar error follows from lines 32-37.
Reference: [8] <author> C. Bessiere and J. Regin, </author> <title> An arc-consistency algorithm optimal in the number of constraint checks, </title> <booktitle> Proc. 6th IEEE Int. Conf. on Tools with AI (1994) 397-403. </booktitle>
Reference-contexts: Since it is not, it sets R ij (b; c) = False and R ji (c; b) = False. While this is correct, the a While PC-5 is based on AC-6 [3], PC5++ can be regarded as an extension to AC6++ <ref> [8] </ref>. b I use R ij (b; c) to represent the binary relation R 2 (i; b; j; c) used earlier in the definition of a CSP (page 2). algorithm goes further and also eliminates R 13 (1; 3) (i.e.
Reference: [9] <author> M. Singh, </author> <title> Efficient path consistency algorithms for constraint satisfaction problems, </title> <type> Technical Report MS-CIS-95-30, </type> <institution> Department of Computer and Information Science, University of Pennsylvania, </institution> <address> Philadelphia, PA. </address> <note> Available via anonymous ftp from ftp.cis.upenn.edu:/pub/msingh/tech-report-95-30.ps.Z. </note>
Reference-contexts: The propagation phase remains the same as for PC-5. Complete details of the PC5++ algorithm are given in <ref> [9] </ref>. Since PC5++ requires only additional O (n 3 a 2 ) storage, the space complexity remains O (n 3 a 2 ). The procedure nextsupport still takes time O (a) (it examines each value in a domain at most once).
Reference: [10] <author> R. Dechter, </author> <title> Enhancement schemes for constraint processing: backjumping, learning, and cutset decomposition, </title> <booktitle> Artif. Intell. </booktitle> <month> 41 </month> <year> (1990) </year> <month> 273-312. </month>
Reference-contexts: I used the same encoding of the problem as used by Dechter <ref> [10] </ref>. As can be seen from Table 1, both PC-5 and PC5++ outperformed PC-4 substantially, both in terms of the number of constraint checks as well as the number of supports recorded (with PC5++ performing about 25% fewer constraint checks than PC5).
References-found: 10

