URL: http://www-graphics.stanford.edu/papers/vc/vc.ps.Z
Refering-URL: http://www-graphics.stanford.edu/papers/vc/
Root-URL: http://www.cs.stanford.edu
Email: fps,kruegerg@viswiz.gmd.de  
Author: Peter Schroder Wolfgang Kruger 
Keyword: algorithms. Keywords: Volume Rendering, Massively Parallel, Transport Theory  
Note: a Author's current address:  
Address: Sankt Augustin, Germany  Olden St., Princeton, NJ 08544  
Affiliation: Scientific Visualization Department of HLRZ Gesellschaft fur Mathematik und Datenverarbeitung  Department of Computer Science, Princeton University, 35  
Abstract: The increasing availability of parallel computing platforms has led to the development of parallel volume rendering algorithms. In the present paper we compare two algorithms for volume raytracing in a data parallel framework: a shearing technique and a line drawing technique. The two algorithms are primarily distinguished by the level of parallelism they exploit. Both algorithms have been implemented on the Connection Machine CM2 massively parallel computer and execute at speeds suitable for interactive volume rendering applications. Since considerable floating point resources are available on the CM2 we have used rendering algorithms based on transport theory. In the second part of the paper we examine some of the trade-offs involved between image quality and rendering speed when using high fidelity rendering 
Abstract-found: 1
Intro-found: 1
Reference: [Blelloch, 1990] <author> Blelloch, G. </author> <title> Vector Models for Data Parallel Computing. </title> <booktitle> Artificial Intelligence Series. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, MA, </address> <year> 1990. </year>
Reference-contexts: Once the shading has been computed for the resampled volume one still needs to perform the compositing operation along the view rays. For this fast parallel prefix operators <ref> [Blelloch, 1990] </ref> may be used, which evaluate the over operator typically used for compositing in O (ln 2 n) time, where n is the number of samples along the ray. On the CM2 these operators are only implemented along processor array axes and not along arbitrary chains through volumes.
Reference: [Braccini and Marino, 1980] <author> Braccini, C. and Marino, G. </author> <title> Fast Geometrical Manipulations of Digital Images. </title> <journal> Computer Graphics and Image Processing, </journal> <volume> 13 </volume> <pages> 127-141, </pages> <year> 1980. </year>
Reference-contexts: Since the mapping of samples onto voxels is not one-to-one|some voxels contain more than one ray-sample, others none|a SIMD implementation appears to require general communication. By using the idiom of line drawing on discrete grids <ref> [Braccini and Marino, 1980] </ref> and suitably chosing lines we can however give a mapping of ray-samples onto the volume, which is one-to-one. In this section we describe the object space algorithm which was implemented by Schroder and Stoll [Schroder and Stoll, 1992] on the CM2 and the Princeton Engine.
Reference: [Cameron and Undrill, 1992] <author> Cameron, G. G. and Undrill, P. E. </author> <title> Rendering Volumetric Medical Image Data on a SIMD-Architecture Computer. </title> <booktitle> In Proceedings of Third Eurographics Workshop on Rendering, </booktitle> <month> May </month> <year> 1992. </year>
Reference-contexts: Yagel and Kaufman made this observation when they considered the design of custom hardware for volume rendering [Yagel, 1991] and reported on a software implementation on a serial machine in [Yagel and Kaufman, 1991; Yagel and Kaufman, 1992]. Cameron and Undrill <ref> [Cameron and Undrill, 1992] </ref> 2 independently used the same idea for a volume rendering algorithm on the AMT DAP massively parallel computer. To simplify the discussion we will explain the algorithm in 2D. All arguments used readily generalize to the 3D case.
Reference: [Drebin et al., 1988] <author> Drebin, R. A., Carpenter, L., and Hanrahan, P. </author> <title> Volume Rendering. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 65-74, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Object space methods, which resample the volume at sample points along rays [Levoy, 1988]. 2. Image space methods, which transform the volume to be axis aligned with the view direction <ref> [Drebin et al., 1988] </ref>. * Splatting [Westover, 1989; Westover, 1990; Laur and Hanrahan, 1991] * Cell projection [Wilhelms and Gelder, 1991; Max et al., 1990; Shirley and Tuchman, 1990] While both splatting and cell projection can have efficient parallel implementations we are concerned only with ray tracing methods in the present
Reference: [Hanrahan, 1990] <author> Hanrahan, P. </author> <title> Three-Pass Affine Transforms for Volume Rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 71-78, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: They use a shearing technique to transform and resample the volume such that the view rays are in effect parallel to one of the coordinate axes. The particular shearing technique used is based on pure shears [Paeth, 1986; Tanaka et al., 1986] as opposed to shear/scale transforms <ref> [Hanrahan, 1990; Smith, 1987] </ref>.
Reference: [Hillis, 1985] <author> Hillis, D. W. </author> <title> The Connection Machine. </title> <publisher> MIT Press, </publisher> <year> 1985. </year>
Reference-contexts: The CM2 consists of 4k to 64k bitslice processors with one floating point unit for every 32 processors. The processors are organized in a hypercube with a toroidal topology <ref> [Hillis, 1985; Thi, 1987] </ref>. Each processor has from 256 kilo bits to 1024 kilo bits of local memory. The programming model supports virtual processors, allowing the programmer to abstract from the actual number of physical processors available.
Reference: [Kruger, 1991] <author> Kruger, W. </author> <title> The Application of Transport Theory to the Visualization of 3-D Scalar Fields. </title> <booktitle> Computers in Physics, </booktitle> <pages> pages 397-406, </pages> <month> July </month> <year> 1991. </year> <month> 22 </month>
Reference-contexts: These algorithms have been implemented on the CM2 massively parallel super computer and we will analyze their performance and discuss some of the distinguishing features of the algorithms. For both algorithms we use a rendering technique based on the transport theory model introduced in <ref> [Kruger, 1991] </ref> and analyse various speedup techniques useful in interactive applications. We begin with a short overview of the CM2 architecture and volume rendering in general. This is followed by one section each describing the two algorithms and a section comparing their respective features. <p> When tracing a single ray through the volume we are interested in evaluating a path integral along that ray <ref> [Kruger, 1991] </ref>. This is typically accomplished by discretizing the integral into a sum based on some step size along the ray. In this way each ray parameterizes a set of sample points along its length, some of which will lie inside the volume. <p> In this section we discuss the transport theory model which forms the basis of the rendering and shading module in both algorithms. Kruger has shown in <ref> [Kruger, 1991] </ref> that all known volume rendering modes can be understood as specializations of an underlying transport theory model of light propagation in a participating medium.
Reference: [Laur and Hanrahan, 1991] <author> Laur, D. and Hanrahan, P. </author> <title> Hierarchical Splat--ting: A Progressive Refinement Algorithm for Volume Rendering. </title> <journal> Computer Graphics, </journal> <volume> 25(4) </volume> <pages> 285-288, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: At the same time it has become desirable to make volume visualization interactive to match the speed of the scientific computations themselves and allow for such paradigms as interactive steering. While relatively fast algorithms for volume raytracing exist for workstations (see for example <ref> [Levoy, 1990; Westover, 1990; Laur and Hanrahan, 1991] </ref>) only little work has been published describing algorithms which run on massively parallel platforms [Schroder and Salem, 1991; Yoo et al., 1991; Neumann, 1992; Schroder and Stoll, 1992]. <p> Object space methods, which resample the volume at sample points along rays [Levoy, 1988]. 2. Image space methods, which transform the volume to be axis aligned with the view direction [Drebin et al., 1988]. * Splatting <ref> [Westover, 1989; Westover, 1990; Laur and Hanrahan, 1991] </ref> * Cell projection [Wilhelms and Gelder, 1991; Max et al., 1990; Shirley and Tuchman, 1990] While both splatting and cell projection can have efficient parallel implementations we are concerned only with ray tracing methods in the present discussion.
Reference: [Levoy, 1988] <author> Levoy, M. </author> <title> Display of Surfaces from Volume Data. </title> <journal> IEEE Computer Graphics and Applications, </journal> <volume> 8(3) </volume> <pages> 29-37, </pages> <month> May </month> <year> 1988. </year>
Reference-contexts: Object space methods, which resample the volume at sample points along rays <ref> [Levoy, 1988] </ref>. 2.
Reference: [Levoy, 1990] <author> Levoy, M. </author> <title> Efficient Ray Tracing of Volume Data. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 9(3) </volume> <pages> 245-261, </pages> <month> July </month> <year> 1990. </year>
Reference-contexts: At the same time it has become desirable to make volume visualization interactive to match the speed of the scientific computations themselves and allow for such paradigms as interactive steering. While relatively fast algorithms for volume raytracing exist for workstations (see for example <ref> [Levoy, 1990; Westover, 1990; Laur and Hanrahan, 1991] </ref>) only little work has been published describing algorithms which run on massively parallel platforms [Schroder and Salem, 1991; Yoo et al., 1991; Neumann, 1992; Schroder and Stoll, 1992].
Reference: [Max et al., 1990] <author> Max, N., Hanrahan, P., and Crawfis, R. </author> <title> Area and Volume Coherence for Efficient Visualization of 3D Scalar Functions. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 27-33, </pages> <month> November </month> <year> 1990. </year>
Reference: [Neumann, 1992] <author> Neumann, U. </author> <title> Interactive Volume Rendering on a Multi-computer. </title> <booktitle> In Proceedings of 1992 Symposium on Interactive 3D Graphics, </booktitle> <pages> pages 87-93. </pages> <publisher> ACM, ACM Siggraph, </publisher> <month> March </month> <year> 1992. </year>
Reference: [Paeth, 1986] <author> Paeth, A. W. </author> <title> A Fast Algorithm for General Raster Rotation. </title> <booktitle> Proceedings Graphics Interface, </booktitle> <pages> pages 77-81, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: They use a shearing technique to transform and resample the volume such that the view rays are in effect parallel to one of the coordinate axes. The particular shearing technique used is based on pure shears <ref> [Paeth, 1986; Tanaka et al., 1986] </ref> as opposed to shear/scale transforms [Hanrahan, 1990; Smith, 1987].
Reference: [Schroder and Salem, 1991] <author> Schroder, P. and Salem, J. B. </author> <title> Fast Rotation of Volume Data on Data Parallel Architectures. </title> <editor> In Nielson, G. M. and Rosen-blum, L., editors, </editor> <booktitle> Proceedings Visualization 1991, </booktitle> <pages> pages 50-57. </pages> <publisher> IEEE, IEEE Computer Science Press, </publisher> <month> October </month> <year> 1991. </year>
Reference-contexts: This is generally accomplished by using multi-pass transformations to rotate and scale the volume as a set of slices, before applying the over operator to yield the final image. Schroder and Salem used this approach in <ref> [Schroder and Salem, 1991] </ref> for a massively parallel volume rendering algorithm on the Connection Machine. They use a shearing technique to transform and resample the volume such that the view rays are in effect parallel to one of the coordinate axes. <p> In practice it is typically faster to execute only the first two viewing rotations on the volume itself and apply the last rotation in the image plane, where only a number of processors proportional to the image size is involved. With these arguments in mind the implementation in <ref> [Schroder and Salem, 1991] </ref> uses five shears on the volume and three shears in the image plane to affect any orthogonal viewing transform. 5 a a a r r r r r r r r a a aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa a a a a a a a a a a a a <p> In a SIMD framework these operations are expressed rather simply since one need only conceptualize a single voxel when writing out the algorithm. The semantics of data parallelism insure that the "right thing" happens everywhere in the volume. The implementation in <ref> [Schroder and Salem, 1991] </ref> did not actually move the data during the shear steps, but instead applied the equivalent computation to the associated 3D coordinates of each voxel. In this way no motion of data occurs during the resampling steps. <p> Since the CM2 implementation does not actually move the data during shearing but only manipulates the coordinate values accordingly the spatial neighbor relationships between voxels get "warped", requiring careful analysis to keep track of neighbors. In <ref> [Schroder and Salem, 1991] </ref> this analysis was performed only for immediate neighbors and proved fairly complicated. Keeping track of a larger neighborhood and its apparent motion under the same algorithm would be very difficult indeed. This is contrasted with the object space method, which leaves the volume undisturbed. <p> When exploiting voxel level parallelism logarithmic time parallel prefix operators can be used to rapidly evaluate Equation 3. This was the approach taken in <ref> [Schroder and Salem, 1991] </ref>. For ray level parallelism the equivalent recursive formulation (Equation 4) is better suited, since we are stepping along the length of the rays in a serial fashion. The latter was used in [Schroder and Stoll, 1992].
Reference: [Schroder and Stoll, 1992] <author> Schroder, P. and Stoll, G. W. </author> <title> Data Parallel Volume Rendering as Line Drawing. </title> <booktitle> In Proceedings of Workshop on Volume Visualization, </booktitle> <pages> pages 25-32. </pages> <publisher> ACM Siggraph, </publisher> <month> October </month> <year> 1992. </year>
Reference-contexts: By using the idiom of line drawing on discrete grids [Braccini and Marino, 1980] and suitably chosing lines we can however give a mapping of ray-samples onto the volume, which is one-to-one. In this section we describe the object space algorithm which was implemented by Schroder and Stoll <ref> [Schroder and Stoll, 1992] </ref> on the CM2 and the Princeton Engine. The current discussion will focus on the CM2. <p> When all path integrals have been computed in this fashion we still need to apply the final image rescale. In the CM2 imple mentation this is implemented using general communication, but the rescale has enough regularity that it can be expressed as a sequence of regular communication steps <ref> [Schroder and Stoll, 1992] </ref>. Table 2 shows some representative performance timings for the ray parallel method. The timings are for a rotation of 30 degrees. While the shearing algorithm is insensitive to the rotation angle, the line drawing method computes more samples along a diagonal ray. <p> This was the approach taken in [Schroder and Salem, 1991]. For ray level parallelism the equivalent recursive formulation (Equation 4) is better suited, since we are stepping along the length of the rays in a serial fashion. The latter was used in <ref> [Schroder and Stoll, 1992] </ref>. For the evaluation of the above equations it is important to note that the multiplicative factor of S in the definition of Q i is simply an overall scaling of the intensity. This is not true for the definition of ff i .
Reference: [Shirley and Tuchman, 1990] <author> Shirley, P. and Tuchman, A. </author> <title> A Polygonal Approximation to Direct Scalar Volume Rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 63-70, </pages> <month> November </month> <year> 1990. </year>
Reference: [Smith, 1987] <author> Smith, A. R. </author> <title> Planar 2-Pass Texture Mapping and Warping. </title> <journal> Computer Graphics, </journal> <volume> 21(4) </volume> <pages> 263-272, </pages> <month> July </month> <year> 1987. </year>
Reference-contexts: They use a shearing technique to transform and resample the volume such that the view rays are in effect parallel to one of the coordinate axes. The particular shearing technique used is based on pure shears [Paeth, 1986; Tanaka et al., 1986] as opposed to shear/scale transforms <ref> [Hanrahan, 1990; Smith, 1987] </ref>.
Reference: [Tanaka et al., 1986] <author> Tanaka, A., Kameyama, M., Kazama, S., and Watan-abe, O. </author> <title> A Rotation Method for Raster Image Using Skew Transformations. </title> <booktitle> In Proceedings IEEE Conference on Computer Vision and Pattern Recognition, </booktitle> <pages> pages 272-277, </pages> <month> June </month> <year> 1986. </year> <month> 23 </month>
Reference-contexts: They use a shearing technique to transform and resample the volume such that the view rays are in effect parallel to one of the coordinate axes. The particular shearing technique used is based on pure shears <ref> [Paeth, 1986; Tanaka et al., 1986] </ref> as opposed to shear/scale transforms [Hanrahan, 1990; Smith, 1987].
Reference: [Thi, 1987] <institution> Connection Machine Model CM-2 Technical Summary. </institution> <type> Techni--cal Report HA 87-4, </type> <institution> Thinking Machines Corporation, </institution> <month> April </month> <year> 1987. </year>
Reference-contexts: The CM2 consists of 4k to 64k bitslice processors with one floating point unit for every 32 processors. The processors are organized in a hypercube with a toroidal topology <ref> [Hillis, 1985; Thi, 1987] </ref>. Each processor has from 256 kilo bits to 1024 kilo bits of local memory. The programming model supports virtual processors, allowing the programmer to abstract from the actual number of physical processors available.
Reference: [Westover, 1989] <author> Westover, L. </author> <title> Interactive Volume Rendering. </title> <booktitle> In CH Volume Visualization Workshop, </booktitle> <pages> pages 9-16. </pages> <publisher> ACM Siggraph, ACM Press, </publisher> <month> May </month> <year> 1989. </year>
Reference-contexts: Object space methods, which resample the volume at sample points along rays [Levoy, 1988]. 2. Image space methods, which transform the volume to be axis aligned with the view direction [Drebin et al., 1988]. * Splatting <ref> [Westover, 1989; Westover, 1990; Laur and Hanrahan, 1991] </ref> * Cell projection [Wilhelms and Gelder, 1991; Max et al., 1990; Shirley and Tuchman, 1990] While both splatting and cell projection can have efficient parallel implementations we are concerned only with ray tracing methods in the present discussion.
Reference: [Westover, 1990] <author> Westover, L. </author> <title> Footprint Evaluation for Volume Rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(4) </volume> <pages> 367-376, </pages> <month> August </month> <year> 1990. </year>
Reference-contexts: At the same time it has become desirable to make volume visualization interactive to match the speed of the scientific computations themselves and allow for such paradigms as interactive steering. While relatively fast algorithms for volume raytracing exist for workstations (see for example <ref> [Levoy, 1990; Westover, 1990; Laur and Hanrahan, 1991] </ref>) only little work has been published describing algorithms which run on massively parallel platforms [Schroder and Salem, 1991; Yoo et al., 1991; Neumann, 1992; Schroder and Stoll, 1992]. <p> Object space methods, which resample the volume at sample points along rays [Levoy, 1988]. 2. Image space methods, which transform the volume to be axis aligned with the view direction [Drebin et al., 1988]. * Splatting <ref> [Westover, 1989; Westover, 1990; Laur and Hanrahan, 1991] </ref> * Cell projection [Wilhelms and Gelder, 1991; Max et al., 1990; Shirley and Tuchman, 1990] While both splatting and cell projection can have efficient parallel implementations we are concerned only with ray tracing methods in the present discussion.
Reference: [Wilhelms and Gelder, 1991] <author> Wilhelms, J. and Gelder, A. V. </author> <title> A Coherent Projection Approach for Direct Volume Rendering. </title> <journal> Computer Graphics, </journal> <volume> 25(4) </volume> <pages> 275-284, </pages> <month> July </month> <year> 1991. </year>
Reference: [Yagel and Kaufman, 1991] <author> Yagel, R. and Kaufman, A. </author> <title> Template-Based Volume Viewing. </title> <type> Technical Report TR.91.07.19, </type> <institution> SUNY Stony Brook, </institution> <year> 1991. </year>
Reference-contexts: Yagel and Kaufman made this observation when they considered the design of custom hardware for volume rendering [Yagel, 1991] and reported on a software implementation on a serial machine in <ref> [Yagel and Kaufman, 1991; Yagel and Kaufman, 1992] </ref>. Cameron and Undrill [Cameron and Undrill, 1992] 2 independently used the same idea for a volume rendering algorithm on the AMT DAP massively parallel computer. To simplify the discussion we will explain the algorithm in 2D.
Reference: [Yagel and Kaufman, 1992] <author> Yagel, R. and Kaufman, A. </author> <title> Template-Based Volume Viewing. </title> <journal> Eurographics, </journal> <volume> 11(3) </volume> <pages> 153-167, </pages> <year> 1992. </year> <note> Proceedings of Eu-rographics 92. </note>
Reference-contexts: Yagel and Kaufman made this observation when they considered the design of custom hardware for volume rendering [Yagel, 1991] and reported on a software implementation on a serial machine in <ref> [Yagel and Kaufman, 1991; Yagel and Kaufman, 1992] </ref>. Cameron and Undrill [Cameron and Undrill, 1992] 2 independently used the same idea for a volume rendering algorithm on the AMT DAP massively parallel computer. To simplify the discussion we will explain the algorithm in 2D.
Reference: [Yagel, 1991] <author> Yagel, R. </author> <title> Efficient Methods for Volumetric Graphics. </title> <type> PhD thesis, </type> <institution> SUNY Stony Brook, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: Furthermore, each ray is a translated version of a protytype ray with exactly the same stepping pattern through the volume. Yagel and Kaufman made this observation when they considered the design of custom hardware for volume rendering <ref> [Yagel, 1991] </ref> and reported on a software implementation on a serial machine in [Yagel and Kaufman, 1991; Yagel and Kaufman, 1992]. Cameron and Undrill [Cameron and Undrill, 1992] 2 independently used the same idea for a volume rendering algorithm on the AMT DAP massively parallel computer.

References-found: 25

