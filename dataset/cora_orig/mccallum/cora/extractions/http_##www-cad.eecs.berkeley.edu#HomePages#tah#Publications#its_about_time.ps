URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/its_about_time.ps
Refering-URL: http://www-cad.eecs.berkeley.edu/HomePages/tah/Publications/its_about_time.html
Root-URL: http://www.cs.berkeley.edu
Email: tah@eecs.berkeley.edu  
Title: It's About Time: Real-time Logics Reviewed  
Author: Thomas A. Henzinger 
Web: www.eecs.berkeley.edu/~tah  
Address: Berkeley  
Affiliation: Electrical Engineering Computer Sciences University of California at  
Abstract: We summarize and reorganize some of the last decade's research on real-time extensions of temporal logic. Our main focus is on tableau constructions for model checking linear temporal formulas with timing constraints. In particular, we find that a great deal of real-time verification can be performed in polynomial space, but also that considerable care must be exercised in order to keep the real-time verification problem in polynomial space, or even decidable.
Abstract-found: 1
Intro-found: 1
Reference: [ACD93] <author> R. Alur, C. Courcoubetis, and D.L. Dill. </author> <title> Model checking in dense real time. </title> <journal> Information and Computation, </journal> <volume> 104(1) </volume> <pages> 2-34, </pages> <year> 1993. </year>
Reference-contexts: In this paper, we are solely concerned with the linear view. For model checking with integer-time branching temporal logics, see [EMSS90, Eme92]; for model checking with real-time branching temporal logics, see <ref> [ACD93, HNSY94] </ref>. and with the addition of a (second-order) hiding operator, as expressive as Buchi automata [Buc62]. Second, temporal logic is reasonably efficient. In practice, model checkers have been successful both in hardware and protocol design [CK96].
Reference: [AD94] <author> R. Alur and D.L. Dill. </author> <title> A theory of timed automata. </title> <journal> Theoretical Computer Science, </journal> <volume> 126 </volume> <pages> 183-235, </pages> <year> 1994. </year>
Reference-contexts: The execution of a real-time system results in an infinite sequence of observations that are time-stamped with reals. A paradigmatic language for describing real-time systems is obtained by considering Alur-Dill automata with parallel composition <ref> [AD94] </ref>. Invariance checking for products of Alur-Dill automata can still be performed in polynomial space. We present several operators that refer to time stamps but can be added to temporal logic without increasing the polynomial-space complexity of model checking. <p> Bounded response have succinct languages not only for requirement specification but also for system description. A time-constrained system is naturally described by a product A S = A 1 fi fi A m of Alur-Dill automata <ref> [AD94] </ref>. An Alur-Dill automaton A = (B; X; ff; fi; fl) consists of a Buchi automaton B, a finite set X of clocks, and three labeling functions on the locations of B. <p> if each component automaton A i has l i locations, k i clocks, and contains no integer constants greater than d i , then the product automaton A S has Q m i=1 l i locations, P m clocks, and contains no constant greater than max m i=1 d i <ref> [AD94] </ref>. It follows that the integer-time model-checking problem can be solved in polynomial space for the constrained temporal formulas (and in exponential space for the overcon strained formulas). Clock tableaux. <p> locations: each location of R (A) consists of a location of A, a k-vector of integers between 1 and d + 1, which represent the integer parts of the clock values, and an ordered partition of the clocks, which represents the ordering of the fractional parts of the clock values <ref> [AD94] </ref>. It follows that the real-time emptiness problem for Alur-Dill automata can be solved in polynomial space. <p> It follows that the real-time universality problem for Alur-Dill automata is undecidable <ref> [AD94] </ref>. 11 Recall that the addition of hiding to temporal logic allows the definition of all !-regular trace sets.
Reference: [AFH94] <author> R. Alur, L. Fix, and T.A. Henzinger. </author> <title> A determinizable class of timed automata. </title> <editor> In D.L. Dill, editor, </editor> <booktitle> CAV 94: Computer-aided Verification, Lecture Notes in Computer Science 818, </booktitle> <pages> pages 1-13. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: The temporal operator &gt;, which is pronounced "earliest," was introduced in [RS97], motivated by the event-predicting clocks of <ref> [AFH94] </ref>. In words, the formula &gt; I is true at position p iff there is a later position r &gt; p at which is true, and the earliest such position lies in the interval p + I. <p> A more detailed discussion of various models for real time and their uses can be found in [AH92b]. Past temporal operators. While in integer time, past temporal operators add no expressive power, this is not the case in real time <ref> [AH92a, AFH94] </ref>. Hence, real-time logics are often defined with constrained past operators, in addition to the constrained future operators discussed in this paper. The tableau and clock-tableau constructions can naturally accommodate past operators.
Reference: [AFH96] <author> R. Alur, T. Feder, and T.A. Henzinger. </author> <title> The benefits of relaxing punctuality. </title> <journal> Journal of the ACM, </journal> <volume> 43(1) </volume> <pages> 116-146, </pages> <year> 1996. </year>
Reference-contexts: In particular, we leave it to the reader to define the complement of an (over)constrained temporal formula. This can be done, for example, by introducing duals of the constrained until and earliest operators that allow all negations to be pushed to the front of propositions <ref> [AFH96] </ref>. 7 If the integer constants that occur in (over)constrained temporal operators are written in unary notation, then the number of subformulas of remains linear in the length of , and all overconstrained temporal formulas can be model checked in polynomial space. 6 x 5 a x = 0 a reset <p> Clock tableaux. There is an alternative approach to integer-time model checking for constrained formulas: we can first construct a suitable Alur-Dill automaton A : and then check the emptiness of the Buchi automaton B (A S fi A : ) <ref> [AFH96] </ref>. Given a constrained temporal formula , the clock tableau A is an Alur-Dill automaton that accepts precisely the traces that satisfy . For each syntactic subformula of , we define two copies |the initial copy I , and the stale copy S | and a clock x . <p> This algorithm uses polynomial space. Theorem 1. <ref> [AFH96, RS97] </ref> The real-time model-checking problem for the constrained temporal formulas can be solved in polynomial space. In the case of real time, the restriction to constrained temporal formulas is essential: for the overconstrained formulas, where the integer-time model-checking problem requires exponential space, the real-time model-checking problem is undecidable. <p> The interval-based region construction R 0 has the same flavor and complexity as the point-based region construction R <ref> [AFH96] </ref>. All results we reported for point-based real time (timed traces) apply also to interval-based real time (interval traces). <p> In particular, the clock-tableau construction can be modified, so that the interval-based real-time model-checking problem (given a product A S of Alur-Dill automata and a constrained temporal formula , do all interval traces that are accepted by A S satisfy ?) can be solved in polynomial space <ref> [AFH96, RS97] </ref>. In the interval-based clock tableau A 0 , we use one additional clock, z, to distinguish singular from open locations: for every location `, we require that z 2 fl (`) and either (z = 0) 2 ff (`) or (z &lt; 0) 2 ff (`). <p> While singular intervals cause overconstraining, nonsingular interval constraints on until operators can be model checked in exponential space. The real-time model-checking algorithm for interval-constrained until formulas, however, is complicated, and not discussed in this paper; see <ref> [AFH96] </ref>. Clock-constrained temporal logics. As an alternative to constraining temporal operators, we can add clock-reset quantifiers (also called "freeze" quantifiers) and clock constraints to temporal logic [AH94]. Since clock constraints can express overconstrained requirements of the form 3 =c , the resulting real-time logics are undecidable. <p> formulas. 5 Conclusion Temporal logic with clock-reset quantifiers and clock constraints has been called Tptl (integer time: exponential space; real time: undecidable) [AH94] 12 , with overconstrained until operators, Mtl [Koy90] (integer time: exponential space; real time: undecidable) [AH93], with interval-constrained until operators, Mitl (integer or real time: exponential space) <ref> [AFH96] </ref>, with constrained until operators, Mitl 0;1 (integer or real time: polynomial space) [AFH96], with the earliest operator &gt; I and its past dual &lt; I , pronounced "latest," Ecl [HRS98] (integer or real time: polynomial space) [RS97]. <p> called Tptl (integer time: exponential space; real time: undecidable) [AH94] 12 , with overconstrained until operators, Mtl [Koy90] (integer time: exponential space; real time: undecidable) [AH93], with interval-constrained until operators, Mitl (integer or real time: exponential space) <ref> [AFH96] </ref>, with constrained until operators, Mitl 0;1 (integer or real time: polynomial space) [AFH96], with the earliest operator &gt; I and its past dual &lt; I , pronounced "latest," Ecl [HRS98] (integer or real time: polynomial space) [RS97].
Reference: [AH92a] <author> R. Alur and T.A. Henzinger. </author> <title> Back to the future: towards a theory of timed regular languages. </title> <booktitle> In Proceedings of the 33rd Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 177-186. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1992. </year>
Reference-contexts: A more detailed discussion of various models for real time and their uses can be found in [AH92b]. Past temporal operators. While in integer time, past temporal operators add no expressive power, this is not the case in real time <ref> [AH92a, AFH94] </ref>. Hence, real-time logics are often defined with constrained past operators, in addition to the constrained future operators discussed in this paper. The tableau and clock-tableau constructions can naturally accommodate past operators.
Reference: [AH92b] <author> R. Alur and T.A. Henzinger. </author> <title> Logics and models of real time: a survey. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> 14 Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 74-106. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: 2 O (k log d) locations: each location of B (A) consists of a location of A and a k-vector of integers between 1 and d + 1, which represent clock values (the exact value of a clock is immaterial if it is less than 0 or greater than d) <ref> [AH92b] </ref>. Hence, the emptiness problem for Alur-Dill automata can be solved in polynomial space. Integer-time model checking. <p> All results we reported carry over, with only minor modifications in the algorithms. A more detailed discussion of various models for real time and their uses can be found in <ref> [AH92b] </ref>. Past temporal operators. While in integer time, past temporal operators add no expressive power, this is not the case in real time [AH92a, AFH94]. Hence, real-time logics are often defined with constrained past operators, in addition to the constrained future operators discussed in this paper. <p> This and related issues are discussed in the earlier survey <ref> [AH92b] </ref>. 13 In integer time, all these logics are equally expressive: they define the counter--free !-regular trace sets, which can also be characterized by a certain first-order monadic logic on the natural numbers [Tho90].
Reference: [AH93] <author> R. Alur and T.A. Henzinger. </author> <title> Real-time logics: complexity and expressiveness. </title> <journal> Information and Computation, </journal> <volume> 104(1) </volume> <pages> 35-77, </pages> <year> 1993. </year>
Reference-contexts: Then, the overconstrained formula 3 (p ^ 3 =1 :p) encodes the fact that the contents of a tape cell is not properly maintained from one configuration of M to the next. Theorem 2. <ref> [AH93, AH94] </ref> The real-time model-checking problem for the over-constrained temporal formulas is undecidable. (The integer-time model-checking problem for the overconstrained temporal formulas is complete for exponential space.) The timed trace set that is defined by the overconstrained formula 3 (p ^ 3 =1 :p) can also be defined by an Alur-Dill <p> can be model checked in exponential space, just like the overconstrained temporal formulas. 5 Conclusion Temporal logic with clock-reset quantifiers and clock constraints has been called Tptl (integer time: exponential space; real time: undecidable) [AH94] 12 , with overconstrained until operators, Mtl [Koy90] (integer time: exponential space; real time: undecidable) <ref> [AH93] </ref>, with interval-constrained until operators, Mitl (integer or real time: exponential space) [AFH96], with constrained until operators, Mitl 0;1 (integer or real time: polynomial space) [AFH96], with the earliest operator &gt; I and its past dual &lt; I , pronounced "latest," Ecl [HRS98] (integer or real time: polynomial space) [RS97].
Reference: [AH94] <author> R. Alur and T.A. Henzinger. </author> <title> A really temporal logic. </title> <journal> Journal of the ACM, </journal> <volume> 41(1) </volume> <pages> 181-204, </pages> <year> 1994. </year>
Reference-contexts: Indeed, for every Turing machine M that uses space 2 n , we can construct an overconstrained temporal formula M of length polynomial in n which is satisfied precisely by the traces that do not encode accepting computations of M <ref> [AH94] </ref>. The key to the construction of M is the formula 3 (p ^ 3 =2 n :p), whose length is linear in n. By reducing satisfiability to model checking as in the unconstrained case, we conclude that exponential space is a lower bound for model checking overconstrained temporal formulas. <p> Given an arbitrary Turing machine M , we can construct an over-constrained temporal formula M that is satisfied precisely by the timed traces that do not encode accepting computations of M <ref> [AH94] </ref>. In real time, any finite number of observations may occur within a single time unit. In this way, Turing machine configurations of arbitrary length can be encoded within a time interval of length 1. <p> Then, the overconstrained formula 3 (p ^ 3 =1 :p) encodes the fact that the contents of a tape cell is not properly maintained from one configuration of M to the next. Theorem 2. <ref> [AH93, AH94] </ref> The real-time model-checking problem for the over-constrained temporal formulas is undecidable. (The integer-time model-checking problem for the overconstrained temporal formulas is complete for exponential space.) The timed trace set that is defined by the overconstrained formula 3 (p ^ 3 =1 :p) can also be defined by an Alur-Dill <p> The real-time model-checking algorithm for interval-constrained until formulas, however, is complicated, and not discussed in this paper; see [AFH96]. Clock-constrained temporal logics. As an alternative to constraining temporal operators, we can add clock-reset quantifiers (also called "freeze" quantifiers) and clock constraints to temporal logic <ref> [AH94] </ref>. Since clock constraints can express overconstrained requirements of the form 3 =c , the resulting real-time logics are undecidable. <p> However, in integer time, temporal logics with clock constraints can be model checked in exponential space, just like the overconstrained temporal formulas. 5 Conclusion Temporal logic with clock-reset quantifiers and clock constraints has been called Tptl (integer time: exponential space; real time: undecidable) <ref> [AH94] </ref> 12 , with overconstrained until operators, Mtl [Koy90] (integer time: exponential space; real time: undecidable) [AH93], with interval-constrained until operators, Mitl (integer or real time: exponential space) [AFH96], with constrained until operators, Mitl 0;1 (integer or real time: polynomial space) [AFH96], with the earliest operator &gt; I and its past
Reference: [BKP86] <author> H. Barringer, R. Kuiper, and A. Pnueli. </author> <title> A really abstract concurrent model and its temporal logic. </title> <booktitle> In Proceedings of the 13th Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 173-183. </pages> <publisher> ACM Press, </publisher> <year> 1986. </year>
Reference-contexts: Superdense models. In a timed trace, there are "gaps" between observations, which occur at discrete points in real time. Alternatively, we can define a timed trace as a function from the nonnegative reals to the observations <ref> [BKP86] </ref>. In this view, observations have duration, and correspond to intervals in real time. Without loss of generality, we assume that every even-numbered observation corresponds to a singular interval (i.e., a single point), and every odd-numbered observation corresponds to an open, bounded interval.
Reference: [Buc62] <author> J.R. Buchi. </author> <title> On a decision method in restricted second-order arithmetic. </title> <editor> In E. Nagel, P. Suppes, and A. Tarski, editors, </editor> <booktitle> Proceedings of the First International Congress on Logic, Methodology, and Philosophy of Science 1960, </booktitle> <pages> pages 1-11. </pages> <publisher> Stanford University Press, </publisher> <year> 1962. </year>
Reference-contexts: In this paper, we are solely concerned with the linear view. For model checking with integer-time branching temporal logics, see [EMSS90, Eme92]; for model checking with real-time branching temporal logics, see [ACD93, HNSY94]. and with the addition of a (second-order) hiding operator, as expressive as Buchi automata <ref> [Buc62] </ref>. Second, temporal logic is reasonably efficient. In practice, model checkers have been successful both in hardware and protocol design [CK96].
Reference: [CK96] <author> E.M. Clarke and R.P. Kurshan. </author> <title> Computer-aided verification. </title> <journal> IEEE Spectrum, </journal> <volume> 33(6) </volume> <pages> 61-67, </pages> <year> 1996. </year>
Reference-contexts: Second, temporal logic is reasonably efficient. In practice, model checkers have been successful both in hardware and protocol design <ref> [CK96] </ref>.
Reference: [Eme90] <author> E.A. Emerson. </author> <title> Temporal and modal logic. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> volume B, </volume> <pages> pages 995-1072. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1990. </year>
Reference-contexts: CCR-9501708, by the National Science Foundation grant CCR-9504469, by the Defense Advanced Research Projects Agency grant NAG2-1214, by the Army Research Office MURI grant DAAH-04-96-1-0341, and by the Semiconductor Research Cor poration contract 97-DC-324.041. 3 There are also other, branching varieties of temporal logic, for specifying requirements on execution trees <ref> [Eme90] </ref>. In this paper, we are solely concerned with the linear view. For model checking with integer-time branching temporal logics, see [EMSS90, Eme92]; for model checking with real-time branching temporal logics, see [ACD93, HNSY94]. and with the addition of a (second-order) hiding operator, as expressive as Buchi automata [Buc62].
Reference: [Eme92] <author> E.A. Emerson. </author> <title> Real time and the -calculus. </title> <editor> In J.W. de Bakker, K. Huizing, W.-P. de Roever, and G. Rozenberg, editors, </editor> <title> Real Time: </title> <booktitle> Theory in Practice, Lecture Notes in Computer Science 600, </booktitle> <pages> pages 176-194. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: In this paper, we are solely concerned with the linear view. For model checking with integer-time branching temporal logics, see <ref> [EMSS90, Eme92] </ref>; for model checking with real-time branching temporal logics, see [ACD93, HNSY94]. and with the addition of a (second-order) hiding operator, as expressive as Buchi automata [Buc62]. Second, temporal logic is reasonably efficient. In practice, model checkers have been successful both in hardware and protocol design [CK96].
Reference: [EMSS90] <author> E.A. Emerson, A.K. Mok, A.P. Sistla, and J. Srinivasan. </author> <title> Quantitative temporal reasoning. In R.P. Kurshan and E.M. </title> <editor> Clarke, editors, </editor> <booktitle> CAV 90: Computer-aided Verification, Lecture Notes in Computer Science 531, </booktitle> <pages> pages 136-145. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year>
Reference-contexts: In this paper, we are solely concerned with the linear view. For model checking with integer-time branching temporal logics, see <ref> [EMSS90, Eme92] </ref>; for model checking with real-time branching temporal logics, see [ACD93, HNSY94]. and with the addition of a (second-order) hiding operator, as expressive as Buchi automata [Buc62]. Second, temporal logic is reasonably efficient. In practice, model checkers have been successful both in hardware and protocol design [CK96]. <p> For the constrained temporal formulas, a powerful optimization is possible (as discussed for branching time in <ref> [EMSS90] </ref>). For given subformulas 1 and 2 of , a location of B needs to contain at most one formula of the form 1 U ~c 2 .
Reference: [GPSS80] <author> D. Gabbay, A. Pnueli, S. Shelah, and J. Stavi. </author> <title> On the temporal analysis of fairness. </title> <booktitle> In Proceedings of the Seventh Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 163-173. </pages> <publisher> ACM Press, </publisher> <year> 1980. </year>
Reference-contexts: First, temporal logic is reasonably expressive. In practice, temporal logic allows the specification of important requirements such as invariance and response [MP92]. In theory, the expressive power of temporal logic is robust: temporal logic is as expressive as a certain first-order monadic logic on the natural numbers <ref> [GPSS80] </ref>, ? To appear in the Proceedings of the Tenth International Conference on Concurrency Theory (CONCUR), Lecture Notes in Computer Science, Springer-Verlag, 1998. ?? This research was supported in part by the Office of Naval Research Young Investigator award N00014-95-1-0520, by the National Science Foundation CAREER award CCR-9501708, by the National
Reference: [HNSY94] <author> T.A. Henzinger, X. Nicollin, J. Sifakis, and S. Yovine. </author> <title> Symbolic model checking for real-time systems. </title> <journal> Information and Computation, </journal> <volume> 111(2) </volume> <pages> 193-244, </pages> <year> 1994. </year>
Reference-contexts: In this paper, we are solely concerned with the linear view. For model checking with integer-time branching temporal logics, see [EMSS90, Eme92]; for model checking with real-time branching temporal logics, see <ref> [ACD93, HNSY94] </ref>. and with the addition of a (second-order) hiding operator, as expressive as Buchi automata [Buc62]. Second, temporal logic is reasonably efficient. In practice, model checkers have been successful both in hardware and protocol design [CK96].
Reference: [HRS98] <author> T.A. Henzinger, J.-F. Raskin, and P.-Y. Schobbens. </author> <title> The regular real-time languages. </title> <booktitle> In ICALP 97: Automata, Languages, and Programming, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1998. </year>
Reference-contexts: This is in contrast to the case of integer time, where hiding increases the model-checking complexity for the constrained temporal formulas by an exponential. Theorem 3. <ref> [Wil94, HRS98] </ref> A set of timed traces is definable by an Alur-Dill automaton iff it is definable by a constrained temporal formula with hidden propositions. Corollary 4. <p> [Koy90] (integer time: exponential space; real time: undecidable) [AH93], with interval-constrained until operators, Mitl (integer or real time: exponential space) [AFH96], with constrained until operators, Mitl 0;1 (integer or real time: polynomial space) [AFH96], with the earliest operator &gt; I and its past dual &lt; I , pronounced "latest," Ecl <ref> [HRS98] </ref> (integer or real time: polynomial space) [RS97]. <p> In point-based real time, Mitl is strictly more expressive than both Mitl 0;1 and Ecl, which are equally expressive [Ras98]. In interval-based real time, all three logics are equally expressive <ref> [HRS98] </ref>. The interval trace sets that are definable in Mitl 0;1 /Ecl |that is, definable by constrained temporal formulas| have been called counter-free real-time !-regular ; they have also been characterized by a certain first-order monadic logic on the reals [HRS98]. <p> In interval-based real time, all three logics are equally expressive <ref> [HRS98] </ref>. The interval trace sets that are definable in Mitl 0;1 /Ecl |that is, definable by constrained temporal formulas| have been called counter-free real-time !-regular ; they have also been characterized by a certain first-order monadic logic on the reals [HRS98]. The observation that constrained until formulas (Mitl 0;1 ) and earliest formulas (Ecl) are interdefinable means that we could have omitted one or the other from our discussion.
Reference: [Koy90] <author> R. Koymans. </author> <title> Specifying real-time properties with metric temporal logic. </title> <booktitle> Real-time Systems, </booktitle> <volume> 2(4) </volume> <pages> 255-299, </pages> <year> 1990. </year>
Reference-contexts: in integer time, temporal logics with clock constraints can be model checked in exponential space, just like the overconstrained temporal formulas. 5 Conclusion Temporal logic with clock-reset quantifiers and clock constraints has been called Tptl (integer time: exponential space; real time: undecidable) [AH94] 12 , with overconstrained until operators, Mtl <ref> [Koy90] </ref> (integer time: exponential space; real time: undecidable) [AH93], with interval-constrained until operators, Mitl (integer or real time: exponential space) [AFH96], with constrained until operators, Mitl 0;1 (integer or real time: polynomial space) [AFH96], with the earliest operator &gt; I and its past dual &lt; I , pronounced "latest," Ecl [HRS98]
Reference: [LP85] <author> O. Lichtenstein and A. Pnueli. </author> <title> Checking that finite-state concurrent programs satisfy their linear specification. </title> <booktitle> In Proceedings of the 12th Annual Symposium on Principles of Programming Languages, </booktitle> <pages> pages 97-107. </pages> <publisher> ACM Press, </publisher> <year> 1985. </year>
Reference-contexts: In practice, model checkers have been successful both in hardware and protocol design [CK96]. In theory, the complexity of temporal logic is not dominant: if a reactive system is given as a product of Buchi automata, the model-checking problem can be solved in polynomial space <ref> [LP85] </ref>, and thus is no harder than the most basic of verification problems |invariance checking. 4 The efficiency of temporal logic is due to a careful choice of operators. For example, the addition of the hiding operator would cause an exponential increase in the complexity of model checking [Sis83]. <p> of the model-checking problem: given a product B S of Buchi automata and a temporal formula , do all traces that are accepted by B S satisfy ? The model-checking problem can be solved in polynomial space, by checking the emptiness of the product automaton B S fi B : <ref> [LP85] </ref>. This is again a lower bound [SC85]: the model-checking problem is no simpler than the satisfiability problem, because a temporal formula is unsatisfiable iff the negated formula : is satisfied by all infinite paths of the complete observation graph. Expressiveness.
Reference: [MP92] <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems: Specification. </title> <publisher> Springer-Verlag, </publisher> <year> 1992. </year>
Reference-contexts: Temporal logic is a popular specification language for two reasons. First, temporal logic is reasonably expressive. In practice, temporal logic allows the specification of important requirements such as invariance and response <ref> [MP92] </ref>.
Reference: [Ras98] <author> J.-F. Raskin. </author> <type> Personal communication, </type> <year> 1998. </year>
Reference-contexts: f (n) tape cells is not properly maintained from one configuration of M to the next. 5 The strictness of the until operator, which does not constrain the current state, will facilitate the move to real time: in real time, strict until cannot be defined from weak until and next <ref> [Ras98] </ref>. 3 Model checking. A finite-state reactive system is naturally described by a prod-uct B S = B 1 fi fi B m of Buchi automata, which represent the state-transition graphs and the fairness assumptions of the individual system components. <p> In real time, Tptl is strictly more expressive than Mtl, which is strictly more expressive than the other three logics |Mitl, Mitl 0;1 , and the future fragment of Ecl. In point-based real time, Mitl is strictly more expressive than both Mitl 0;1 and Ecl, which are equally expressive <ref> [Ras98] </ref>. In interval-based real time, all three logics are equally expressive [HRS98].
Reference: [RS97] <author> J.-F. Raskin and P.-Y. Schobbens. </author> <title> State-clock logic: a decidable real-time logic. </title> <editor> In O. Maler, editor, </editor> <title> HART 97: Hybrid and Real-time Systems, </title> <booktitle> Lecture Notes in Computer Science 1201, </booktitle> <pages> pages 33-47. </pages> <publisher> Springer-Verlag, </publisher> <year> 1997. </year>
Reference-contexts: The temporal operator &gt;, which is pronounced "earliest," was introduced in <ref> [RS97] </ref>, motivated by the event-predicting clocks of [AFH94]. In words, the formula &gt; I is true at position p iff there is a later position r &gt; p at which is true, and the earliest such position lies in the interval p + I. <p> This algorithm uses polynomial space. Theorem 1. <ref> [AFH96, RS97] </ref> The real-time model-checking problem for the constrained temporal formulas can be solved in polynomial space. In the case of real time, the restriction to constrained temporal formulas is essential: for the overconstrained formulas, where the integer-time model-checking problem requires exponential space, the real-time model-checking problem is undecidable. <p> In particular, the clock-tableau construction can be modified, so that the interval-based real-time model-checking problem (given a product A S of Alur-Dill automata and a constrained temporal formula , do all interval traces that are accepted by A S satisfy ?) can be solved in polynomial space <ref> [AFH96, RS97] </ref>. In the interval-based clock tableau A 0 , we use one additional clock, z, to distinguish singular from open locations: for every location `, we require that z 2 fl (`) and either (z = 0) 2 ff (`) or (z &lt; 0) 2 ff (`). <p> undecidable) [AH93], with interval-constrained until operators, Mitl (integer or real time: exponential space) [AFH96], with constrained until operators, Mitl 0;1 (integer or real time: polynomial space) [AFH96], with the earliest operator &gt; I and its past dual &lt; I , pronounced "latest," Ecl [HRS98] (integer or real time: polynomial space) <ref> [RS97] </ref>.
Reference: [Saf88] <author> S. Safra. </author> <title> On the complexity of !-automata. </title> <booktitle> In Proceedings of the 29th Annual Symposium on Foundations of Computer Science, </booktitle> <pages> pages 319-327. </pages> <publisher> IEEE Computer Society Press, </publisher> <year> 1988. </year> <month> 15 </month>
Reference-contexts: for a Buchi system B S and a formula (9 1 ; : : : ; n ) requires exponential space, by checking the emptiness of the automaton B S fi :(9 1 ; : : : ; n )B , whose construction involves the complementation of a Buchi automaton <ref> [Saf88] </ref>. This is also a lower bound [Sis83]. For the hidden propositions 1 ; : : : ; n , we can assert by a formula whose length is polynomial in n that each proposition i is true precisely at all positions that are multiples of 2 i .
Reference: [Sav70] <author> W.J. Savitch. </author> <title> Relationship between nondeterministic and deterministic tape classes. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 4 </volume> <pages> 177-194, </pages> <year> 1970. </year>
Reference-contexts: Since the number of subformulas of is linear in the length of , the number of locations of B is exponential in . Since Buchi emptiness can be checked in space polylogarithmic in the number of locations <ref> [Sav70, VW94] </ref>, the satisfiability problem for temporal logic can be solved in polynomial space. This is also a lower bound [SC85].
Reference: [SC85] <author> A.P. Sistla and E.M. Clarke. </author> <title> The complexity of propositional linear temporal logics. </title> <journal> Journal of the ACM, </journal> <volume> 32(3) </volume> <pages> 733-749, </pages> <year> 1985. </year>
Reference-contexts: Since Buchi emptiness can be checked in space polylogarithmic in the number of locations [Sav70, VW94], the satisfiability problem for temporal logic can be solved in polynomial space. This is also a lower bound <ref> [SC85] </ref>. Given a polynomial f and a Turing machine M that uses space f (n) for inputs of size n, we can construct a temporal formula M of length polynomial in n which is satisfied precisely by the traces that do not encode accepting computations of M . <p> This is again a lower bound <ref> [SC85] </ref>: the model-checking problem is no simpler than the satisfiability problem, because a temporal formula is unsatisfiable iff the negated formula : is satisfied by all infinite paths of the complete observation graph. Expressiveness. The expressive power of temporal logic is closely related to Buchi automata.
Reference: [Sis83] <author> A.P. Sistla. </author> <title> Theoretical Issues in the Design and Verification of Distributed Systems. </title> <type> PhD thesis, </type> <institution> Harvard University, </institution> <year> 1983. </year>
Reference-contexts: For example, the addition of the hiding operator would cause an exponential increase in the complexity of model checking <ref> [Sis83] </ref>. We illustrate that with a careful choice of operators, both pleasing properties of temporal logic |reasonable, robust expressiveness and reasonable, polynomial-space efficiency| can be maintained when moving from reactive to real-time systems. <p> This is also a lower bound <ref> [Sis83] </ref>. For the hidden propositions 1 ; : : : ; n , we can assert by a formula whose length is polynomial in n that each proposition i is true precisely at all positions that are multiples of 2 i .
Reference: [Tho90] <author> W. Thomas. </author> <title> Automata on infinite objects. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, </booktitle> <volume> volume B, </volume> <pages> pages 133-191. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1990. </year>
Reference-contexts: The tableau construction shows that if a trace set L is definable by a temporal formula, then L is !-regular. The converse is not necessarily true, and the gap between temporal definability and !-regularity can be closed in several ways <ref> [Tho90] </ref> |for example, via the operation of hiding propositions, which is an important operation in specification. A temporal formula with hidden propositions is has the form (9 1 ; : : : ; n ), where 1 ; : : : ; n are propositions and is a temporal formula. <p> This and related issues are discussed in the earlier survey [AH92b]. 13 In integer time, all these logics are equally expressive: they define the counter--free !-regular trace sets, which can also be characterized by a certain first-order monadic logic on the natural numbers <ref> [Tho90] </ref>. In real time, Tptl is strictly more expressive than Mtl, which is strictly more expressive than the other three logics |Mitl, Mitl 0;1 , and the future fragment of Ecl.
Reference: [VW94] <author> M.Y. Vardi and P. Wolper. </author> <title> Reasoning about infinite computations. </title> <journal> Information and Computation, </journal> <volume> 115(1) </volume> <pages> 1-37, </pages> <year> 1994. </year>
Reference-contexts: Since the number of subformulas of is linear in the length of , the number of locations of B is exponential in . Since Buchi emptiness can be checked in space polylogarithmic in the number of locations <ref> [Sav70, VW94] </ref>, the satisfiability problem for temporal logic can be solved in polynomial space. This is also a lower bound [SC85].
Reference: [Wil94] <author> T. Wilke. </author> <title> Specifying timed state sequences in powerful decidable logics and timed automata. </title> <editor> In H. Langmaack, W.-P. de Roever, and J. Vytopil, editors, </editor> <booktitle> FTRTFT 94: Formal Techniques in Real-time and Fault-tolerant Systems, Lecture Notes in Computer Science 863, </booktitle> <pages> pages 694-715. </pages> <publisher> Springer-Verlag, </publisher> <year> 1994. </year>
Reference-contexts: This is in contrast to the case of integer time, where hiding increases the model-checking complexity for the constrained temporal formulas by an exponential. Theorem 3. <ref> [Wil94, HRS98] </ref> A set of timed traces is definable by an Alur-Dill automaton iff it is definable by a constrained temporal formula with hidden propositions. Corollary 4.
Reference: [Wol82] <author> P. Wolper. </author> <title> Synthesis of Communicating Processes from Temporal-Logic Specifications. </title> <type> PhD thesis, </type> <institution> Stanford University, </institution> <year> 1982. </year> <month> 16 </month>
Reference-contexts: model-checking problem, it is useful to study the satisfiability problem for temporal logic: given a temporal formula , is there a trace that satisfies ? The satisfiability problem can be solved by constructing a Buchi automaton B , called the tableau of , which accepts precisely the traces that satisfy <ref> [Wol82] </ref>. Then, is satisfiable iff B is nonempty. In this method, it is the size of the tableau B which determines the efficiency of solving the satisfiability problem. Every location ` of the Buchi automaton B is a set of subformulas of .
References-found: 30

