URL: http://www.ri.cmu.edu/afs/cs.cmu.edu/project/able/ftp/armani-isaw2.ps
Refering-URL: http://www.ri.cmu.edu/afs/cs/project/able/www/paper_abstracts/armani-isaw2.html
Root-URL: 
Title: Capturing Design Expertise in Customized Software Architecture Design Environments Capturing Design Expertise in Customized Software
Author: Robert T. Monroe 
Address: Pittsburgh, PA 15213  
Affiliation: School of Computer Science, Carnegie Mellon University,  
Abstract: Software architecture is receiving increasing attention as a powerful way to deal with the complexity of large software systems. It has emerged as a distinct form of abstraction for software systems with its own set of design issues, vocabulary, and goals. Like designers in other disciplines, software architects can gain significant leverage by using powerful design environments and tools. Powerful design tools generally encapsulate a relatively small amount of design expertise that provides the important functionality of the tool within a relatively large support infrastructure. In this position paper I argue that in order to make the development of specialized architectural design tools practical it must be relatively easy and inexpensive to capture and make use of the desired design expertise. I then briey describe an emerging approach for capturing this design expertise so that it can be used to incrementally configure architectural design environments. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Gregory Abowd, Robert Allen, and David Garlan. </author> <title> Using Style to Understand Descriptions of Software Architecture. </title> <booktitle> In Proceedings of SIGSOFT 93: Foundations of Software Engineering, Software Engineering Notes 18(5), </booktitle> <pages> pages 9-20. </pages> <publisher> ACM Press, </publisher> <month> December </month> <year> 1993. </year>
Reference-contexts: Table 1 provides a brief overview of the vocabulary, composition constraints, and analyses available for three different styles that Aesop supports. For a more detailed and formal treatment of architectural style see <ref> [1] </ref>. 2.2 Limitations of a pure style-based approach Our experience building styles and using Aesop indicates that styles are a reasonably effec <p>- tive way to capture broad design expertise and make use of that expertise to customize architec <p>- tural design environments.
Reference: [2] <author> Robert Allen and David Garlan, </author> <title> Towards Formalized Software Architecture, </title> <institution> Carnegie Mellon University Technical Report CMU-CS-TR-92-163, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: The tight intermingling of vocabulary, composition constraints, and analyses also makes it difficult to reuse pieces of a style definition in the creation of a new style. a. For a detailed formal description of the Pipe-and-Filter style see <ref> [2] </ref>. b. For a full description of the Real-Time Producer/Consumer style see [6].
Reference: [3] <author> Don Batory, Vivek Singhal, Jeff Thomas, Sankar Dasari, Bart Geraci, Marty Sirkin. </author> <title> The GenVoca Model of Software System Generators. </title> <journal> IEEE Software, </journal> <month> September </month> <year> 1994, </year> <pages> pp. 89 - 94. </pages>
Reference-contexts: This expertise is hard-wired not only in terms of the tool and environment implementations but also in terms of the selection of design concepts and models that the finished tool will support. Examples of design tools using this approach include UniCon [8], GenVoca <ref> [3] </ref>, and the numerous commercial object-oriented design environments that support the Object Modeling Technique [7]. Because significant portions of design environments are developed on an ad-hoc basis, they are expensive, difficult, and time-consuming to build.
Reference: [4] <author> David Garlan, Robert Allen, and John Ockerbloom. </author> <title> Exploiting Style in Architectural Design Environments, </title> <booktitle> in Proc. of SIGSOFT 94 Symposium on the Foundations of Software Engineering, </booktitle> <month> Dec. </month> <year> 1994. </year>
Reference-contexts: Design rules can be applied to individual design instances or even individual elements within a specific design. 2.1 Style-based capture of design expertise The architectural style construct provides the conceptual framework for capturing design expertise and customizing the original Aesop architectural design environment <ref> [4] </ref>. Broadly, an architectural style specifies the vocabulary of design elements that can be used when designing in that style, composition constraints that specify topological and type constraints, and analyses that can be performed to evaluate emergent properties of a design.
Reference: [5] <institution> Proceedings of the First International Workshop on Architectures for Software Systems, Edited by David Garlan. </institution> <month> April, </month> <year> 1995. </year>
Reference-contexts: There is growing recognition in the software design community that one of the critical steps for the successful completion and fielding of a major software system is the creation of a well defined and documented architecture <ref> [5] </ref>. Given that architectural design is a critical step in the process of building a complex software system, one promising approach to improving the state of the practice of building software lies in providing software architects with powerful design environments and tools for specifying, analyzing, and reasoning about software architectures.
Reference: [6] <author> Kevin Jeffay. </author> <title> The Real-Time Producer/Consumer Paradigm: A Paradigm for the Construction of Efficient, Predictable Real-Time Systems, </title> <booktitle> in Proc. of the 1993 ACM/SIGAPP Symposium on Applied Computing, </booktitle> <pages> pp 796804, </pages> <address> Indianapolis, IN, Feb. 1993, </address> <publisher> ACM Press. </publisher>
Reference-contexts: For a detailed formal description of the Pipe-and-Filter style see [2]. b. For a full description of the Real-Time Producer/Consumer style see <ref> [6] </ref>. Style Design Vocabulary Composition Constraints Design Analyses Generic (null) generic components and connectors Any (component, component) pair can be attached with any connector. formal specifications consistency check (Wright language) Pipe-and-Filter a filter components and pipe connectors (filter.output to filter.input) is the only valid attachment pair.
Reference: [7] <author> James Rumbaugh et al. </author> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Examples of design tools using this approach include UniCon [8], GenVoca [3], and the numerous commercial object-oriented design environments that support the Object Modeling Technique <ref> [7] </ref>. Because significant portions of design environments are developed on an ad-hoc basis, they are expensive, difficult, and time-consuming to build.
Reference: [8] <author> Mary Shaw, Robert Deline, Daniel Klein, Theodore Ross, David Young, and Gregory Zelesnik. </author> <title> Abstractions for Software Architecture and Tools to Support Them. </title> <journal> IEEE Trans. on Software Engineering, </journal> <month> April </month> <year> 1995. </year>
Reference-contexts: This expertise is hard-wired not only in terms of the tool and environment implementations but also in terms of the selection of design concepts and models that the finished tool will support. Examples of design tools using this approach include UniCon <ref> [8] </ref>, GenVoca [3], and the numerous commercial object-oriented design environments that support the Object Modeling Technique [7]. Because significant portions of design environments are developed on an ad-hoc basis, they are expensive, difficult, and time-consuming to build.
References-found: 8

