URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-95-63/s2k-95-63.ps.Z
Refering-URL: http://s2k-ftp.cs.berkeley.edu:8000/sequoia/tech-reports/s2k-95-63/
Root-URL: http://www.cs.berkeley.edu
Email: mariposa@postgres.Berkeley.EDU  
Title: MARIPOSA: A WIDE-AREA DISTRIBUTED DAT ABASE SYSTEM  
Author: Michael Stonebraker, Paul M. Aoki, Avi Pfeffer, Adam Sah, Jeff Sidell, Carl Staelin and Andrew Yu 
Address: Berkeley, California 94720-1776  
Affiliation: Department of Electrical Engineering and Computer Sciences University of California  
Abstract: The requirements of wide-area distributed database systems differ dramatically from those of LAN systems. In a WAN configuration, individual sites usually report to different system administrators, have different access and charging algorithms, install site-specific data type extensions, and have different constraints on servicing remote requests. Typical of the last point are production transaction environments, which are fully engaged during normal business hours, and cannot take on additional load. Finally, there may be many sites participating in a WAN distributed DBMS. In this world a single program performing global query optimization using a cost-based optimizer will not work well. Cost-based optimization does not respond well to site-specific type extension, access constraints, charging algorithms, and time-of-day constraints. Furthermore, traditional cost-based distributed optimizers do not scale well to a large number of possible processing sites. Since traditional distributed DBMSs have all used cost-based optimizers, they are not appropriate in a WAN environment, and a new architecture is required. We have proposed and implemented an economic paradigm as the solution to these issues in a new distributed DBMS called Mariposa. In this paper, we present the architecture and implementation of Mariposa and discuss early feedback on its operating characteristics. * This research was sponsored by the Army Research Office under contract DAAH04-94-G-0223, the Advanced Research Projects Agency under contract DABT63-92-C-0007, the National Science Foundation under grant IRI-9107455 and Microsoft Corp. Author's current address: Department of Computer Science, Stanford University, Stanford, CA 94305. Author's current address: Hewlett-Packard Laboratories, M/S 1U-13 P.O. Box 10490, Palo Alto, CA 94303. Author's current address: Illustra Information Technologies, Inc., 1111 Broadway, Suite 2000, Oakland, CA 94607. 
Abstract-found: 1
Intro-found: 1
Reference: [BANE91] <author> Banerjea, A. and Mah, B. A., </author> <title> The Real-Time Channel Administration Protocol, </title> <booktitle> Proc. 2nd Int. Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> Heidelberg, Germany, </address> <month> Nov. </month> <year> 1991. </year>
Reference-contexts: Since network bandwidth is a distributed resource, the network bidders along the path from source to destination must calculate an aggregate bid for the entire path and must reserve network resources as a group. Mariposa will use a version of the Tenet network protocols RTIP [ZHAN92] and RCAP <ref> [BANE91] </ref> to perform bandwidth queries and network resource reservation. A network bid request will be made by the broker to transfer data between source/destination pairs in the query plan. The network bid request is sent to the destination node.
Reference: [BERN81] <author> Bernstein, P. A., Goodman, N., Wong, E., Reeve, C. L. and Rothnie, J., </author> <title> Query Processing in a System for Distributed Databases (SDD-1), </title> <journal> ACM Trans. on Database Sys. </journal> <volume> 6, 4, </volume> <month> Dec. </month> <year> 1981, </year> <pages> pp. 602-625. </pages>
Reference-contexts: Finally, we show how Mariposa can successfully apply the principles through its adoption of an entirely different paradigm for query and storage optimization. Traditional distributed relational database systems that offer location-transparent query languages, such as Distributed INGRES [STON86], R* [WILL81], SIRIUS [LITW82] and SDD-1 <ref> [BERN81] </ref>, all make a collection of underlying assumptions. These assumptions include: Static data allocation: In a traditional distributed DBMS, there is no mechanism whereby objects can quickly and easily change sites to reect changing access patterns.
Reference: [BITT83] <author> Bitton, D., DeWitt, D. J. and Turbyfill, C., </author> <title> Benchmarking Data Base Systems: A Systematic Approach, </title> <booktitle> Proc. 9th Int. Conf. on Very Large Data Bases, </booktitle> <address> Florence, Italy, </address> <month> Nov. </month> <year> 1983. </year>
Reference-contexts: The results in this section were generated using a simple synthetic dataset and workload. The database consists of three tables, R1, R2 and R3. The tables are part of the Wisconsin Benchmark database <ref> [BITT83] </ref>, modified to produce results of the sizes indicated in Table 5. We make available statistics that allow a query optimizer to estimate the size of (R1 join R2), (R2 join R3) and (R1 join R2 join R3) as 1 MB, 3 MB and 4.5 MB, respectively.
Reference: [CHER89] <author> Cheriton, D. and Mann T. P., </author> <title> Decentralizing a Global Naming Service for Improved Performance and Fault Tolerance, </title> <journal> ACM Trans. on Comp. Sys. </journal> <volume> 7, 2, </volume> <month> May </month> <year> 1989, </year> <pages> pp. 147-183. </pages>
Reference-contexts: Like other objects, a name context can also be named. In addition, like data fragments, it can be migrated between name servers and there can be multiple copies residing on different servers for better load balancing and availability. This scheme differs from another proposed decentralized name service <ref> [CHER89] </ref> that avoided a centralized name authority by relying upon each type of server to manage their own names without relying on a dedicated name service. 5.2. Name Resolution A name must be resolved to discover which object is bound to the name.
Reference: [COPE88] <author> Copeland, G., Alexander, W., Boughter, E. and Keller, T., </author> <title> Data Placement in Bubba, </title> <booktitle> Proc. 1988 ACM-SIGMOD Conf. on Management of Data, </booktitle> <address> Chicago, IL, </address> <month> June </month> <year> 1988, </year> <pages> pp. 99-108. </pages>
Reference-contexts: Clearly, if there are too few fragments in a class, then parallel execution of Mariposa queries will be hindered. On the other hand, if there are too many fragments, then the overhead of dealing with all the fragments will increase and response time will suffer, as noted in <ref> [COPE88] </ref>. The algorithms for splitting and coalescing fragments must strike the correct balance between these two effects. At the current time, our storage manager does not have general Rush rules to deal with splitting and coalescing fragments. Hence, this section indicates our current plans for the future.
Reference: [DEWA90] <author> Dewan S., and Mendelson, H., </author> <title> User Delay Costs and Internal Pricing for a Service Facility, </title> <journal> Management Sci. </journal> <volume> 36, 12, </volume> <month> Dec. </month> <year> 1990, </year> <pages> pp. 1502-1517. </pages>
Reference-contexts: In particular, [MEND85] proposes a microe-conomic model for studies of queueing effects of popular pricing policies, typically not considering the delays. The model shows that when delay cost is taken into account, a low utilization ratio of the center is often optimal. The model is refined in <ref> [DEWA90] </ref>. The authors assume a nonlinear delay cost structure, and present necessary and sufficient conditions for the optimality of pricing rules that charges out service resources at their marginal capacity cost. Although these and similar results were intended for human decision making, many apply to the Mariposa context as well.
Reference: [FERG93] <author> Ferguson, D., Nikolaou, C. and Yemini, Y., </author> <title> An Economy for Managing Replicated Data in Autonomous Decentralized Systems, </title> <booktitle> Proc. Int. Symp. on Autonomous Decentralized Sys. </booktitle> <address> (ISADS 93), Kaw asaki, Japan, </address> <month> Mar. </month> <year> 1993, </year> <pages> pp. 367-375. </pages>
Reference-contexts: His optimality results are clearly invalidated by the possible exclusion of optimal bidders. This suggests the importance of high-quality name service, to ensure that the winning bidders are usually solicited for bids. A model similar to ours is proposed in <ref> [FERG93] </ref>, where fragments can be moved and replicated between the nodes of a network of computers, although they are not allowed to be split or coalesced. Transactions, consisting of simple read/write requests for fragments, are given a budget when entering the system.
Reference: [HUBE88] <author> Huberman, B. A. (ed.), </author> <title> The Ecology of Computation, </title> <publisher> North-Holland, </publisher> <year> 1988. </year>
Reference-contexts: Table 7 shows a set of results which best illustrate the beneficial effects of the economic model. 7. RELATED WORK Currently, there are only a few systems documented in the literature that incorporate microeconomic approaches to resource sharing problems. <ref> [HUBE88] </ref> contains a collection of articles that cover the underlying principles and explore the behavior of those systems. [MILL88] uses the term Agoric Systems for software systems deploying market mechanisms for resource allocation among independent objects. The data-type agents proposed in that article are comparable to our brokers.
Reference: [KURO89] <author> Kurose, J. and Simha, R., </author> <title> A Microeconomic Approach to Optimal Resource Allocation in Distributed Computer Systems, </title> <journal> IEEE Trans. on Computers 38, </journal> <volume> 5, </volume> <month> May </month> <year> 1989, </year> <pages> pp. 705-717. </pages>
Reference-contexts: It takes 82 seconds to move R2 to site 1 at step 3 and 820 seconds to move R1 and R3 to site 3 at step 5. 29 <ref> [KURO89] </ref> presents a solution to the file allocation problem that makes use of microeconomic prin-ciples, but is based on a cooperative, not competitive, environment. The agents in this economy exchange fragments in order to minimize the cumulative system-wide access costs for all incoming requests.
Reference: [LITW82] <author> Litwin, W. et al., </author> <title> SIRIUS System for Distributed Data Management, in Distributed Data Bases, </title> <editor> H. J. Schneider (ed.), </editor> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands, </address> <year> 1982. </year>
Reference-contexts: Finally, we show how Mariposa can successfully apply the principles through its adoption of an entirely different paradigm for query and storage optimization. Traditional distributed relational database systems that offer location-transparent query languages, such as Distributed INGRES [STON86], R* [WILL81], SIRIUS <ref> [LITW82] </ref> and SDD-1 [BERN81], all make a collection of underlying assumptions. These assumptions include: Static data allocation: In a traditional distributed DBMS, there is no mechanism whereby objects can quickly and easily change sites to reect changing access patterns.
Reference: [LOHM86] <author> Mackert, L. F. and Lohman, G. M., </author> <title> R* Optimizer Validation and Performance Evaluation for Distributed Queries, </title> <booktitle> Proc. 12th Int. Conf. on Very Large Data Bases, </booktitle> <address> Kyoto, Japan, </address> <month> Aug. </month> <year> 1986, </year> <pages> pp. 149-159. </pages>
Reference-contexts: Moreover, it must convert site-independent resource usage numbers into ones specific to its site through a weighting function, as in <ref> [LOHM86] </ref>. In addition, it must assume that it would have successfully bid on the same set of queries as appeared in the revenue history. Since it will be faster or slower than the site from which the revenue history was collected, it must adjust the revenue collected for each query.
Reference: [MALO88] <author> Malone, T. W., Fikes, R. E., Grant, K. R. and Howard, M. T., </author> <title> Enterprise: A Market-like Task Scheduler for Distributed Computing Environments, </title> <booktitle> in [HUBE88]. </booktitle>
Reference-contexts: This is achieved by having the sites voluntarily cede fragments or portions thereof to other sites if it lowers access costs. In this model, all sites cooperate to achieve a global optimum instead of selfishly competing for resources to maximize their own utility. <ref> [MALO88] </ref> describes the implementation of a process migration facility for a pool of workstations connected through a LAN. In this system, a client broadcasts a request for bids that includes a task description.
Reference: [MEND85] <author> Mendelson, H. </author> <title> Pricing Computer Services: Queueing Effects, </title> <journal> Comm. of the ACM 28, </journal> <volume> 3, </volume> <month> Mar. </month> <year> 1985, </year> <pages> pp. 312-321. </pages>
Reference-contexts: The work focussed on the cost of the services, the required scale of the center given user needs, the cost of user delays, and the pricing structure. Several results are reported in the literature, in both computer and management sciences. In particular, <ref> [MEND85] </ref> proposes a microe-conomic model for studies of queueing effects of popular pricing policies, typically not considering the delays. The model shows that when delay cost is taken into account, a low utilization ratio of the center is often optimal. The model is refined in [DEWA90].
Reference: [MEND86] <author> Mendelson, H. and Saharia, A. N., </author> <title> Incomplete Information Costs and Database Design, </title> <journal> ACM Trans. on Database Sys. </journal> <volume> 11, 2, </volume> <month> June </month> <year> 1986, </year> <pages> pp. 159-85 32 </pages>
Reference-contexts: Although these and similar results were intended for human decision making, many apply to the Mariposa context as well. On the other hand, <ref> [MEND86] </ref> proposes a methodology for trading off the cost of incomplete information against data-related costs, and for constructing minimum-cost answers to a variety of query types. These results can be useful in the Mariposa context.
Reference: [MILL88] <author> Miller, M. S. and Drexler, K. E., </author> <title> Markets and Computation: Agoric Open Systems, </title> <booktitle> in [HUBE88]. </booktitle>
Reference-contexts: RELATED WORK Currently, there are only a few systems documented in the literature that incorporate microeconomic approaches to resource sharing problems. [HUBE88] contains a collection of articles that cover the underlying principles and explore the behavior of those systems. <ref> [MILL88] </ref> uses the term Agoric Systems for software systems deploying market mechanisms for resource allocation among independent objects. The data-type agents proposed in that article are comparable to our brokers. They mediate between consumer and supplier objects, helping to find the current best price and supplier for a service.
Reference: [OUST94] <author> Ousterhout, J. K., </author> <title> Tcl and the Tk Toolkit, </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1994. </year>
Reference-contexts: Based on space and revenue considerations, it engages in buying and selling fragments with storage managers at other Mariposa sites. The storage managers, bidders and brokers in our prototype are primarily coded in the rule language Rush. Rush is an embeddable programming language with syntax similar to Tcl <ref> [OUST94] </ref> that also includes rules of the form: on &lt;condition&gt; do <action> Every Mariposa entity embeds a Rush interpreter, calling it to execute code to determine the behavior of Mariposa. Rush conditions can involve any combination of primitive Mariposa events, described below, and computations on Rush variables.
Reference: [SAH94a] <author> Sah, A., Blow, J. and Dennis, B., </author> <title> An Introduction to the Rush Language, </title> <booktitle> Proc. Tcl'94 Workshop, </booktitle> <address> New Orleans, LA, </address> <month> June </month> <year> 1994, </year> <pages> pp. 105-116. </pages>
Reference-contexts: However, as conditions change over time, policy decisions must also change. Although the bidder and storage manager modules may be coded in any language desired, Mariposa provides a low lev el, very efficient embedded scripting language and rule system called Rush <ref> [SAH94a] </ref>. Using Rush, it is straightforward to change policy decisions; one simply modifies the rules by which these modules are implemented. The purpose of this paper is to report on the architecture, implementation, and operation of our current prototype.
Reference: [SAH94b] <author> Sah, A. and Blow, J., </author> <title> A New Architecture for the Implementation of Scripting Languages, </title> <booktitle> Proc. USENIX Symp. on Very High Level Languages, </booktitle> <address> Santa Fe, NM, </address> <month> Oct. </month> <year> 1994, </year> <pages> pp 21-38. </pages>
Reference-contexts: We chose to implement our own system, rather than use one of the packages available from the AI community, primarily for performance reasons. Rush rules are in the ``inner loop'' of many Mariposa activities, and as a result, rule interpretation must be very fast. A separate paper <ref> [SAH94b] </ref> discusses how we hav e achieved this goal. Mariposa contains a specific inter-site protocol by which Mariposa entities communicate. Requests for bids to execute subqueries and to buy and sell fragments can be sent between sites. Additionally, queries and data must be passed around. <p> The primitive actions shown in Table 1 have been implemented as RPCs and are available as Rush procedures for use in the action part of a Rush rule. Implementation of the Rush language itself has required careful design and performance engineering, as described in <ref> [SAH94b] </ref>. 23 We are presently extending the functionality of our prototype. At the current time, the fragmenter, coordinator and broker are fairly complete. However, the storage manager and the bidder are simplistic, as noted earlier. We are in the process of constructing more sophisticated routines in these modules.
Reference: [SELI79] <author> Selinger, P. G., Astrahan, M. M., Chamberlin, D. D., Lorie, R. A. and Price, T. G., </author> <title> Access Path Selection in a Relational Database Management System, </title> <booktitle> Proc. 1979 ACM-SIGMOD Conf. on Management of Data, </booktitle> <address> Boston, MA, </address> <month> June </month> <year> 1979. </year>
Reference-contexts: The parser hands the query, in the form of a parse tree, to the single-site optimizer. This is a conventional query optimizer along the lines of <ref> [SELI79] </ref>. The single-site optimizer generates a single-site query execution plan. The optimizer ignores data distribution and prepares a plan as if all the fragments were located at a single server site. The fragmenter accepts the plan produced by the single-site optimizer.
Reference: [SIDE95] <author> Sidell, J., Aoki, P. M., Barr, S., Sah, A., Staelin, C., Stonebraker, M., and Yu, A., </author> <title> Data Replication in Mariposa, </title> <type> Sequoia 2000 Technical Report 95-60, </type> <institution> University of California, Berkeley, </institution> <address> CA, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: Consequently, Mariposa fosters data mobility and the free trade of objects. Av oidance of global synchronization is simplified in many places by an economic paradigm. Replication is one such area. The details of the Mariposa replication system are contained in a separate paper <ref> [SIDE95] </ref>. In short, copy holders maintain the currency of their copies by contracting with other copy holders to deliver their updates. This contract specifies a payment stream for update information delivered within a specified time bound. <p> At the current time, the fragmenter, coordinator and broker are fairly complete. However, the storage manager and the bidder are simplistic, as noted earlier. We are in the process of constructing more sophisticated routines in these modules. In addition, we are implementing the replication system described in <ref> [SIDE95] </ref>. We plan to release a general Mariposa distribution when these tasks are completed later this year. The rest of this section presents details of a few simple experiments which we have conducted in both LAN and WAN environments.
Reference: [STON86] <author> Stonebraker, M., </author> <title> The Design and Implementation of Distributed INGRES, in The INGRES Papers, </title> <editor> M. Stone-braker (ed.), </editor> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1986. </year>
Reference-contexts: Finally, we show how Mariposa can successfully apply the principles through its adoption of an entirely different paradigm for query and storage optimization. Traditional distributed relational database systems that offer location-transparent query languages, such as Distributed INGRES <ref> [STON86] </ref>, R* [WILL81], SIRIUS [LITW82] and SDD-1 [BERN81], all make a collection of underlying assumptions. These assumptions include: Static data allocation: In a traditional distributed DBMS, there is no mechanism whereby objects can quickly and easily change sites to reect changing access patterns.
Reference: [STON91a] <author> Stonebraker, M. and Kemnitz, G., </author> <title> The POSTGRES Next-Generation Database Management System, </title> <journal> Comm. of the ACM 34, </journal> <volume> 10, </volume> <month> Oct. </month> <year> 1991, </year> <pages> pp. 78-92. </pages>
Reference-contexts: Alpha AXP workstations running Digital UNIX. The current system is a combination of old and new code. The basic server engine is that of POSTGRES <ref> [STON91a] </ref>, modified to accept SQL instead of POSTQUEL. In addition, we have implemented the fragmenter, broker, bidder and coordinator modules to form the complete Mariposa system portrayed in Figure 1. Building a functional distributed system has required the addition of a substantial amount of software infrastructure.
Reference: [STON91b] <author> Stonebraker, M., </author> <title> An Overview of the Sequoia 2000 Project, </title> <type> Sequoia 2000 Technical Report 91/5, </type> <institution> University of California, Berkeley, </institution> <address> CA, </address> <month> Dec. </month> <year> 1991. </year>
Reference-contexts: In LAN worlds, environment uniformity and a single administrative structure are common. Moreover, a high speed, reasonably uniform interconnect tends to mask performance problems caused by suboptimal data allocation. In a wide-area network environment, these assumptions are much less plausible. For example, the Sequoia 2000 project <ref> [STON91b] </ref> spans 6 sites around the state of California with a wide variety of hardware and storage capacities. Each site has its own database administrator, and the willingness of any site to perform work on behalf of users at another site varies widely. Furthermore, network connectivity is not uniform.
Reference: [STON94a] <author> Stonebraker, M., Aoki, P. M., Devine, R., Litwin, W. and Olson, M., Mariposa: </author> <title> A New Architecture for Distributed Data, </title> <booktitle> Proc. 10th Int. Conf. on Data Engineering, </booktitle> <address> Houston, TX, </address> <month> Feb. </month> <year> 1994, </year> <pages> pp. 54-65. </pages>
Reference-contexts: Using Rush, it is straightforward to change policy decisions; one simply modifies the rules by which these modules are implemented. The purpose of this paper is to report on the architecture, implementation, and operation of our current prototype. Preliminary discussions of Mariposa ideas have been previously reported in <ref> [STON94a, STON94b] </ref>. At this time (June 1995), we have a complete optimization and execution system running, and we will present performance results of some initial experiments. In the next section, we present the three major components of our economic system.
Reference: [STON94b] <author> Stonebraker, M., Devine, R., Kornacker, M., Litwin, W., Pfeffer, A., Sah, A. and Staelin, C. </author> <title> An Economic Paradigm for Query Processing and Data Migration in Mariposa, </title> <booktitle> Proc. 3rd Int. Conf. on Parallel and Distributed Information Sys., </booktitle> <address> Austin, TX, </address> <month> Sep. </month> <year> 1994, </year> <pages> pp. 58-67. </pages>
Reference-contexts: Using Rush, it is straightforward to change policy decisions; one simply modifies the rules by which these modules are implemented. The purpose of this paper is to report on the architecture, implementation, and operation of our current prototype. Preliminary discussions of Mariposa ideas have been previously reported in <ref> [STON94a, STON94b] </ref>. At this time (June 1995), we have a complete optimization and execution system running, and we will present performance results of some initial experiments. In the next section, we present the three major components of our economic system.
Reference: [WALD92] <author> Waldspurger, C. A., Hogg, T., Huberman, B., Kephart, J. and Stornetta, S., Spawn: </author> <title> A Distributed Computational Ecology, </title> <journal> IEEE Trans. on Software Engineering 18, </journal> <volume> 2, </volume> <month> Feb. </month> <year> 1992. </year>
Reference-contexts: The latter two parameters are supplied by the task description. No prices are charged for processing services and there is no provision for a shortcut to the bidding process by mechanisms like posting server characteristics or advertisements of servers. Another distributed process scheduling system is presented in <ref> [WALD92] </ref>. Here, CPU time on remote machines is auctioned off by the processing sites and applications hand in bids for time slices. This is is contrast to our system, where processing sites make bids for servicing requests.
Reference: [WELL93] <author> Wellman, M. P. </author> <title> A Market-Oriented Programming Environment and Its Applications to Distributed Multicom-modity Flow Problems, </title> <journal> Journal of AI Research 1, </journal> <volume> 1, </volume> <month> Aug. </month> <year> 1993. </year>
Reference-contexts: The managers are responsible for funding their workers and divide the available funds between them in an application-specific way. To adjust the degree of parallelism to the availability of idle CPUs, the manager changes the funding of individual workers. Wellman offers a simulation of multicommodity ow in <ref> [WELL93] </ref> that is quite close to our bidding model, but with a bid resolution model that converges with multiple rounds of messages. His clearinghouses violate our constraint against single points of failure. Mariposa name service can be thought of as clearinghouses with only a partial list of possible suppliers.
Reference: [WILL81] <author> Williams, R., Daniels, D., Haas, L., Lapis, G., Lindsay, B., Ng, P., Obermarck, R., Selinger, P., Walker, A., Wilms, P. and Yost, R., </author> <title> R*: An Overview of the Architecture, </title> <institution> IBM Research Report RJ3325, IBM Research Laboratory, </institution> <address> San Jose, CA, </address> <month> Dec. </month> <year> 1981. </year>
Reference-contexts: Finally, we show how Mariposa can successfully apply the principles through its adoption of an entirely different paradigm for query and storage optimization. Traditional distributed relational database systems that offer location-transparent query languages, such as Distributed INGRES [STON86], R* <ref> [WILL81] </ref>, SIRIUS [LITW82] and SDD-1 [BERN81], all make a collection of underlying assumptions. These assumptions include: Static data allocation: In a traditional distributed DBMS, there is no mechanism whereby objects can quickly and easily change sites to reect changing access patterns. <p> The advantage of a name context is that names do not have to be globally registered nor are the names tied to a physical resource to make them unique, such as the birth site used in <ref> [WILL81] </ref>. Like other objects, a name context can also be named. In addition, like data fragments, it can be migrated between name servers and there can be multiple copies residing on different servers for better load balancing and availability.
Reference: [ZHAN92] <author> Zhang, H. and Fisher, T. </author> <title> Preliminary Measurement of the RMTP/RTIP, </title> <booktitle> Proc. Third International Workshop on Network and Operating System Support for Digital Audio and Video, </booktitle> <address> San Diego, CA, </address> <month> Nov. </month> <year> 1992. </year> <month> 33 </month>
Reference-contexts: Since network bandwidth is a distributed resource, the network bidders along the path from source to destination must calculate an aggregate bid for the entire path and must reserve network resources as a group. Mariposa will use a version of the Tenet network protocols RTIP <ref> [ZHAN92] </ref> and RCAP [BANE91] to perform bandwidth queries and network resource reservation. A network bid request will be made by the broker to transfer data between source/destination pairs in the query plan. The network bid request is sent to the destination node.
References-found: 29

