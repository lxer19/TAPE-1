URL: http://www.cs.pitt.edu/~tsamard/aaai98.ps
Refering-URL: http://www.cs.pitt.edu/~tsamard/
Root-URL: 
Email: tsamard@cs.pitt.edu  mus@ptolemy.arc.nasa.gov  pmorris@ptolemy.arc.nasa.gov  
Title: Fast Transformation of Temporal Plans for Efficient Execution  
Author: Ioannis Tsamardinos Nicola Muscettola Paul Morris 
Address: Pittsburgh Pittsburgh, PA 15260  Moffett Field, CA 94035  Moffett Field, CA 94035  
Affiliation: Intelligent Systems Program University of  Recom Technologies. NASA Ames Research Center  Caelum Research. NASA Ames Research Center  
Abstract: Temporal plans permit significant flexibility in specifying the occurrence time of events. Plan execution can make good use of that flexibility. However, the advantage of execution flexibility is counterbalanced by the cost during execution of propagating the time of occurrence of events throughout the flexible plan. To minimize execution latency, this propagation needs to be very efficient. Previous work showed that every temporal plan can be reformulated as a dispatchable plan, i.e., one for which propagation to immediate neighbors is sufficient. A simple algorithm was given that finds a dispatchable plan with a minimum number of edges in cubic time and quadratic space. In this paper, we focus on the efficiency of the reformulation process, and improve on that result. A new algorithm is presented that uses linear space and has time complexity equivalent to Johnson's algorithm for all-pairs shortest-path problems. Experimental evidence confirms the practical effectiveness of the new algorithm. For example, on a large commercial application, the performance is improved by at least two orders of magnitude. We further show that the dispatch-able plan, already minimal in the total number of edges, can also be made minimal in the maximum number of edges incoming or outgoing at any node. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bonasso, R. P.; Kortenkamp, D.; Miller, D.; and Slack, M. </author> <year> 1997. </year> <title> Experiences with an architecture for intelligent, reactive agents. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence 9(1). </journal>
Reference: <author> Bresina, J.; Drummond, M.; ; and Kedar, S. </author> <year> 1993. </year> <title> Reactive, integrated systems pose new problems for machine learning. </title> <editor> In Minton, S., ed., </editor> <title> Machine Learning Methods for Planning. </title> <address> San Mateo, California: </address> <publisher> Morgan Kaufmann. </publisher>
Reference: <author> Carpenter, T.; Driscoll, K.; and Hoyme, K. C. J. </author> <year> 1994. </year> <title> Arinc 659 scheduling: Problem definition. </title> <booktitle> In Proceedings of 1994 IEEE Real Time System Symposium. IEEE. </booktitle>
Reference-contexts: Four out of the five natural plans were generated by the planner/scheduler of the Remote Agent control architecture (Pell et al. 1997) and were relatively small, averaging about 60 nodes. The fifth plan was taken from an an avionics processor schedule for a commercial aircraft provided by Honey-well <ref> (Carpenter, Driscoll, & Hoyme 1994) </ref> and was much larger, having about 60,000 nodes.
Reference: <author> Cherkassky, B.; Goldberg, A.; and Radzik, T. </author> <year> 1996. </year> <title> Shortest paths algorithms: Theory and experimental evaluation. </title> <booktitle> Mathematical Programming 73 </booktitle> <pages> 129-174. </pages>
Reference-contexts: The fifth plan was taken from an an avionics processor schedule for a commercial aircraft provided by Honey-well (Carpenter, Driscoll, & Hoyme 1994) and was much larger, having about 60,000 nodes. For the generation of the random networks we used the same code as in <ref> (Cherkassky, Goldberg, & Radzik 1996) </ref>, where a variety of shortest paths algorithms are evaluated on a number of different families of randomly generated networks. We chose the four families of networks that most approximate STNs found in natural plans: Grid-SSquare, Grid-SWide, Grid-SLong, and Grid-NHard.
Reference: <author> Cormen, T.; Leiserson, C.; and Rivest, R. </author> <year> 1990. </year> <title> Introduction to Algorithms. </title> <address> Cambridge, MA: </address> <publisher> MIT press. </publisher>
Reference-contexts: It has been shown (Dechter, Meiri, & Pearl 1991) that finding the ranges of execution times for each event's time bounds, is equivalent to solving two single-source shortest-path problems <ref> (Cormen, Leiserson, & Rivest 1990) </ref> on a simple transformation of the STN graph. simple plan with two tasks BD and CD of fixed durations, respectively 1 and 2 time units, that synchronize at the end (event D) and must start within 10 time units of a time origin (event A). <p> The STNs that can always be correctly executed by a dispatcher are called dispatchable. It is always possible to transform any STN into an equivalent dispatch-able STN. Trivially, it can be shown that the all-pairs shortest-path graph (APSP) <ref> (Cormen, Leiserson, & Rivest 1990) </ref> derived from the original STN is dispatch-able. However, this would be the largest dispatchable network for the problem. We are interested in finding small dispatchable networks, in fact, networks that contain the minimum total number of edges, or minimal dispatchable STNs. <p> The algorithm we propose is a modification of the Johnson's all-pairs shortest-path algorithm and its overall structure is described in figure 3. The references to lines of JOHNSON in the figure refer to the line numbering in the description of Johnson's algorithm at page 569 of <ref> (Cormen, Leiserson, & Rivest 1990) </ref>. In the rest of the paper we will discuss the formal details of how steps 2, 3.b, 3.c and 3.d work and why. Here we want to give some general observations that will help frame the rest of the discussion. <p> We will use XY to denote an edge from X to Y in APSP. Predecessor Graph The central data structure needed for steps 2 and 3 is the predecessor graph. The predecessor graph is a generalization of the predecessor tree generated by a single-source shortest-path algorithm <ref> (Cormen, Leiserson, & Rivest 1990) </ref>. The predecessor tree is constructed while finding some shortest-path from a source node to every other node. The predecessor graph, on the other hand, concisely represents information on all shortest-paths from the source node. <p> For this, we offer the following result. Theorem 6 Given a consistent distance graph, and a single-source propagation from an arbitrary node S that reaches every node in the graph, each RC of the distance graph coincides with a strongly-connected component <ref> (Cormen, Leiserson, & Rivest 1990) </ref> of the predecessor graph P (S) (and vice versa). Proof: Suppose X and Y are rigidly-related. Consider a shortest path from the source to X. This can be extended by a shortest path to Y and then back again to X. <p> Since Johnson's Algorithm requires an initial run of Bellman-Ford to set up a "potential-function" value at every node, it is convenient to use this to determine the strongly-connected components and hence RC subgraphs. There is a well-known algorithm <ref> (Cormen, Leiserson, & Rivest 1990) </ref> for computing strongly-connected components (SCCs) that runs in time linear in the number of edges. This has two parts, an initial depth-first search to collect the nodes in reverse-postorder, and a secondary traversal to trace out each SCC.
Reference: <author> Dechter, R.; Meiri, I.; and Pearl, J. </author> <year> 1991. </year> <title> Temporal constraint networks. </title> <booktitle> Artificial Intelligence 49 </booktitle> <pages> 61-95. </pages>
Reference-contexts: Fortunately for certain classes of constraints one can rely on the special nature of the execution constraint propagation process in order to significantly speed it up. In the rest of the paper we will focus on flexible plans that represent temporal information as a Simple Temporal Network (STN) <ref> (Dechter, Meiri, & Pearl 1991) </ref>. In previous work (Muscettola, Morris, & Tsamardinos 1998) we described a simple dispatcher, i.e., an execution algorithm that maximally localizes execution propagation in STNs. We showed that any STN can be transformed into an equivalent one that is both dis-patchable and minimum. <p> Temporal Network Dispatchability In this section we summarize the main results of our previous work. See (Muscettola, Morris, & Tsamardi-nos 1998) for details and proofs. Recall that Simple Temporal Networks <ref> (Dechter, Meiri, & Pearl 1991) </ref> are directed graphs where each node is an event or time point (e.g., time points A and B) and each edge AB is marked with a bound delay [d; D]. <p> The interpretation of each edge is that if T A and T B are the times of occurrence of A and B respectively, then in a consistent execution d T B T A D. It has been shown <ref> (Dechter, Meiri, & Pearl 1991) </ref> that finding the ranges of execution times for each event's time bounds, is equivalent to solving two single-source shortest-path problems (Cormen, Leiserson, & Rivest 1990) on a simple transformation of the STN graph. simple plan with two tasks BD and CD of fixed durations, respectively 1 <p> It has been shown in our previous paper that, for execution purposes, upper and lower bounds can be independently propagated. In fact, it is sufficient to propagate upper bounds through non-negative edges and lower bounds through negative edges (in the reverse direction <ref> (Dechter, Meiri, & Pearl 1991) </ref>). So, dominance relations between lower-bound links (lower-domination) can be checked separately from those between upper-bound links (upper-domination). It was also shown that removal of a dominated edge does not affect the dominance relation between other pairs of edges. The following fundamental filtering theorem applies.
Reference: <author> Drabble, B.; Tate, A.; and Dalton, J. </author> <year> 1996. </year> <title> O-plan project evaluation experiments and results. </title> <note> Oplan Technical Report ARPA-RL/O-Plan/TR/23 Version 1, AIAI. </note>
Reference: <author> Muscettola, N.; Morris, P.; Pell, B.; and Smith, B. </author> <year> 1998. </year> <title> Issues in temporal reasoning for autonomous control systems. </title> <editor> In Wooldridge, M., ed., </editor> <booktitle> Proceedings of the Second Int'l Conference on Autonomous Agents. </booktitle> <publisher> ACM Press. </publisher>
Reference-contexts: It can be shown that this decision time determines the intrinsic uncertainty on the exact time of occurrence of any event in the plan <ref> (Muscettola et al. 1998) </ref>. The more precise we want the execution of a plan to be, the less propagation an execution algorithm should perform. <p> In the rest of the paper we will focus on flexible plans that represent temporal information as a Simple Temporal Network (STN) (Dechter, Meiri, & Pearl 1991). In previous work <ref> (Muscettola, Morris, & Tsamardinos 1998) </ref> we described a simple dispatcher, i.e., an execution algorithm that maximally localizes execution propagation in STNs. We showed that any STN can be transformed into an equivalent one that is both dis-patchable and minimum. <p> A further section describes the additional transformation to yield the fastest dispatchable network, and the final section concludes the paper. Temporal Network Dispatchability In this section we summarize the main results of our previous work. See <ref> (Muscettola, Morris, & Tsamardi-nos 1998) </ref> for details and proofs. Recall that Simple Temporal Networks (Dechter, Meiri, & Pearl 1991) are directed graphs where each node is an event or time point (e.g., time points A and B) and each edge AB is marked with a bound delay [d; D].
Reference: <author> Muscettola, N.; Morris, P.; and Tsamardinos, I. </author> <year> 1998. </year> <title> Reformulating temporal plans for efficient execution. </title> <booktitle> In Proc. of Sixth Int. Conf. on Principles of Knowledge Representation and Reasoning (KR'98). </booktitle>
Reference-contexts: It can be shown that this decision time determines the intrinsic uncertainty on the exact time of occurrence of any event in the plan <ref> (Muscettola et al. 1998) </ref>. The more precise we want the execution of a plan to be, the less propagation an execution algorithm should perform. <p> In the rest of the paper we will focus on flexible plans that represent temporal information as a Simple Temporal Network (STN) (Dechter, Meiri, & Pearl 1991). In previous work <ref> (Muscettola, Morris, & Tsamardinos 1998) </ref> we described a simple dispatcher, i.e., an execution algorithm that maximally localizes execution propagation in STNs. We showed that any STN can be transformed into an equivalent one that is both dis-patchable and minimum. <p> A further section describes the additional transformation to yield the fastest dispatchable network, and the final section concludes the paper. Temporal Network Dispatchability In this section we summarize the main results of our previous work. See <ref> (Muscettola, Morris, & Tsamardi-nos 1998) </ref> for details and proofs. Recall that Simple Temporal Networks (Dechter, Meiri, & Pearl 1991) are directed graphs where each node is an event or time point (e.g., time points A and B) and each edge AB is marked with a bound delay [d; D].
Reference: <author> Musliner, D.; Durfee, E.; and Shin, K. </author> <year> 1993. </year> <title> Circa: A cooperative, intelligent, real-time control architecture. </title> <journal> IEEE Transactions on Systems, Man, and Cybernetics 23(6). </journal>
Reference: <author> Pell, B.; Bernard, D. E.; Chien, S.; Gat, E.; Muscet-tola, N.; Nayak, P. P.; Wagner, M.; and Williams, B. </author> <year> 1997. </year> <title> An autonomous spacecraft agent prototype. </title> <booktitle> Autonomous Robotics. </booktitle>
Reference-contexts: Experimental Results The algorithm was implemented in Lisp and the experiments were run on an Ultra-2 Sparc. We experimented with five natural temporal plans as well as 60 randomly generated ones. Four out of the five natural plans were generated by the planner/scheduler of the Remote Agent control architecture <ref> (Pell et al. 1997) </ref> and were relatively small, averaging about 60 nodes. The fifth plan was taken from an an avionics processor schedule for a commercial aircraft provided by Honey-well (Carpenter, Driscoll, & Hoyme 1994) and was much larger, having about 60,000 nodes.
Reference: <author> Simmons, R. </author> <year> 1990. </year> <title> An architecture for coordinating planning, sensing, and action. In Procs. DARPA Workshop on Innovative Approaches to Planning, </title> <journal> Scheduling and Control, </journal> <pages> 292-297. </pages> <address> San Mateo, CA: </address> <publisher> DARPA. </publisher>
Reference: <author> Wilkins, D. E.; Myers, K. L.; Lowrance, J. D.; and Wesley, L. P. </author> <year> 1995. </year> <title> Planning and reacting in uncertain and dynamic environments. </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence 7(1) </journal> <pages> 197-227. </pages>
References-found: 13

