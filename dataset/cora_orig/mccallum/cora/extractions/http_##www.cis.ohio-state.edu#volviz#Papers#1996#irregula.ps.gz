URL: http://www.cis.ohio-state.edu/volviz/Papers/1996/irregula.ps.gz
Refering-URL: http://www.cis.ohio-state.edu/volviz/papers_subject.html
Root-URL: 
Title: ABSTRACT  
Abstract: Some of the more important research results in computational science rely on the use of simulation methods that operate on unstructured grids. However, these grids, composed of a set of polyhedra, introduce exceptional problems with respect to data visualization. Volume rendering techniques, originally developed to handle rectangular grids, show significant promise for general use with unstructured grids as well. The main disadvantage of this approach, compared to isosurfaces, particles or other visualization tools is its non-interactive performance. We describe an efficient method for rendering unstructured grids that is based on incremental slicing and hardware polygon rendering. For a given view direction, the grid vertices are transformed to image space using available graphics hardware. We then incrementally compute the 2D polygon-meshes that result from letting a set of planes, parallel to the screen plane, intersect (slice) the transformed grid. Finally, we use the graphics hardware to render (interpolate-fill) the polygon-meshes and composite them in a front-to-back order. We show that, in addition to being faster than existing methods, our approach also provides adaptive control and progressive image generation. The adaptive method provides user control to ensure that the contribution of every cell is included in the final image or to limit the number of cells that are missed. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Akeley, K. </author> <title> Reality Engine Graphics. </title> <booktitle> Proceedings of SIGGRAPH 93 (Anaheim, </booktitle> <address> California, </address> <month> August 1-6, </month> <year> 1993). </year> <booktitle> In Computer Graphics Proceedings, Annual Conference Series, 1993, ACM SIGGRAPH, </booktitle> <address> New York, </address> <year> 1993, </year> <pages> pp. 109-116. </pages>
Reference-contexts: The vertex coordinates are already in image space so the matrix stack is loaded with an orthographic projection that maps the points onto a viewing window larger than the actual size of the image we are rendering. The points are mapped to a larger window, similar to <ref> [1] </ref>, to prevent holes along the sides of the image which can occur when one vertex of an edge was clipped during the original transformation from object to image space.
Reference: [2] <author> Ekaterinaris, J. and L. Schiff. </author> <title> Vortical Flows over Delta Wings and Numerical Prediction of Vortex Breakdown. AIAA Paper 90-0102, </title> <booktitle> AIAA Aerospace Sciences Conference, </booktitle> <address> Reno, NV, </address> <month> January </month> <year> 1990. </year>
Reference-contexts: Dataset Time (seconds) Memory (MB) Wing 6.64 14.1 Blunt fin 9.11 21.2 LOP 20.45 56.7 Delta wing 42.97 111.7 FIGURE 5. The density distribution of the Wing dataset, rendered using 125 slices. 38 76 38 interest are vortices and vortex breakdowns <ref> [2] </ref> (See Figure 9). This is a grid (204,120 data points) that yields 1,005,676 tetrahedra.
Reference: [3] <author> Feichtinger, H. and K. Grchenig. </author> <title> Theory and Practice of Irregular Sampling. </title> <editor> In Benedetto J. and Frazier M., editors, </editor> <booktitle> Wavelets: Mathematics and Applications, </booktitle> <publisher> CRC Press, </publisher> <year> 1993. </year> <pages> pp. 305-363. </pages>
Reference-contexts: When resampling regular grids, one can rely on the Shannon sampling theorem for the development of theoretically sound procedures [11]. While the corresponding theory for irregular data is being investigated <ref> [3] </ref>, several practical solutions have been developed. One method of resampling is to send rays and store the samples in a 3D buffer. Another possibility is to intersect the irregular grid with the boxes that comprise the regular grid.
Reference: [4] <author> Frhauf, T. </author> <title> Raycasting a Nonregularly Structured Volume Data. </title> <booktitle> Eurographics94, </booktitle> <pages> 13(3)294-303, </pages> <year> 1994. </year>
Reference-contexts: Reed, Asish Law, Po-Wen Shih, and Naeem Shareef Department of Computer and Information Science The Ohio State University 395 Dreese Lab, 2015 Neil Ave, Columbus, OH 43210 -yagel | reed-d | law | shih | shareef-@cis.ohio-state.edu tional space and map the sample locations into the physical grid <ref> [4] </ref>. These variations on the resampling approach have several difficulties. First, the resampling process has to be performed very carefully in order to maintain data integrity and quality. <p> Another difficulty stems from the fact that cells may vastly vary in their size; maintaining the resolution of the smallest cells may require an impractical resolution for the regular grid. Finally, this approach (except as described in <ref> [4] </ref>) calls for two resampling operations, once when mapping into the regular grid and once when the regular grid is rendered. The alternative is to directly render the irregular volume. Existing direct methods can be classified into object (voxel) order and image (pixel) order methods.
Reference: [5] <author> Garrity, M. </author> <title> Ray Tracing Irregular Grids. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 35-40, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: The timings provided do not include time for the lengthy preprocessing necessary when the viewpoint changes. In this paper we present a voxel-space approach that overcomes the difficulties discussed above. 1.2 Pixel-Space Methods Pixel-space methods are also called backward-feed methods or ray-casting <ref> [5] </ref>. The algorithm casts ray (s) from the eye through each screen-pixel. For each ray the algorithm performs the following: 1. Find the first cell the ray intersects 2. Search between the cell neighbors for the exit point. 3. <p> First, the calculation of step 1 as well as the determination if a cell is last (step 4) in the case of non-convex grids can be very difficult and time consuming. A possible solution is to embed the boundary cells in a regular space-subdivision grid <ref> [5] </ref>. Another major difficulty is that, in order to perform step 2 efficiently, neighborhood information is required. For unstructured grids, the algorithm must be preceded, therefore, by a process that finds and stores, within each cell, a list of all its neighbors.
Reference: [6] <author> Giertsen, C. </author> <title> Volume Visualization of Sparse Irregular Meshes. </title> <journal> IEEE Computer Graphics & Applications, </journal> <volume> 12(2) </volume> <pages> 40-48, </pages> <month> March </month> <year> 1992. </year>
Reference-contexts: Finally, pixel-space rendering is expected to be slow, especially when step 2 involves sampling in arbitrarily shaped cells. 1.3 Hybrid Methods A hybrid method has also been investigated for regular grids [17] and was extended to irregular grids <ref> [6] </ref>. In these methods, the volume is traversed in object order while the contribution of each voxel to the image is computed in image order. Each transformed cell is intersected by the planes defined by all the screen scan-lines. <p> Each transformed cell is intersected by the planes defined by all the screen scan-lines. The resulting polygon is divided into spans in which integration takes place. As in <ref> [6] </ref>, our approach is also based on incremental slicing; however, our method can employ available rendering hardware to achieve interactive rendering, is not sensitive to image resolution, and supports adaptive and progressive rendering. In the following section, we describe two variations of our slice-based approach.
Reference: [7] <author> Haimes, R. </author> <title> Techniques for Interactive and Interrogative Scientific Volumetric Visualization. </title> <note> unpublished manuscript available at http:// raphael.mit.edu/visual3/visual3.html </note>
Reference: [8] <author> Hung, C. and P. Buning. </author> <title> Simulation of Blunt-Fin Induced Shock Wave and Turbulent Boundary Layer Separation. Paper 84-0457, </title> <booktitle> AIAA Aerospace Sciences Conference, </booktitle> <address> Reno, NV, </address> <month> January </month> <year> 1984. </year>
Reference-contexts: The smallest dataset is the Wing dataset from the SGI Explorer package (See The second, is the Bluntfin data showing airow over a at plate with a blunt fin rising from the plate <ref> [8] </ref> (See Figure 7). This (40,960 points) grid is converted into a tetrahedral grid with 187,395 tetrahedra. The third dataset shows liquid oxygen (incompressible) ow across a at plate with a cylindrical post rising perpendicular to the plate.
Reference: [9] <author> Mao, X., L. Hong, A. Kaufman. </author> <title> Splatting of Curvilinear Volumes. </title> <booktitle> Proceedings Visualization 95, </booktitle> <address> Atlanta, GA, </address> <month> October </month> <year> 1995, </year> <pages> pp. 61-68. </pages>
Reference-contexts: Reasonable rendering times, quoted by [18], assume no change in view point or low image quality. A more serious difficulty is that the sort operation can be applied only to limited types of grids as mentioned above. The algorithm described by Mao <ref> [9] </ref> only applies to curvilinear grids. It uses a heuristic reconstruction method and it is difficult to verify its error performance. The timings provided do not include time for the lengthy preprocessing necessary when the viewpoint changes.
Reference: [10] <author> Max, N., P. Hanrahan, R. Crawfis. </author> <title> Area and Volume Coherence for Efficient Visualization of 3D Scalar Functions. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 27-33, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: In general, it is not always possible to sort a collection of tetrahedral cells and certainly not arbitrary (possibly concave) polyhedra. Only acyclic meshes and polyhedral meshes generated by Delaunay tetrahedration can be depth sorted. Max et al <ref> [10] </ref> have presented a topological sort for acyclic grids composed of convex polyhedra with planar faces. A similar algorithm is described in great detail in [20]. Step 3 can also be implemented in various ways.
Reference: [11] <author> Oppenheim, A. and R. Schafer. </author> <title> Digital Signal Processing. </title> <publisher> Prentice Hall Inc., </publisher> <address> Englewoods Cliffs, NJ, </address> <year> 1975. </year>
Reference-contexts: The most obvious way to render an irregular grid is to resample it into a regular grid and then render it with available methods. When resampling regular grids, one can rely on the Shannon sampling theorem for the development of theoretically sound procedures <ref> [11] </ref>. While the corresponding theory for irregular data is being investigated [3], several practical solutions have been developed. One method of resampling is to send rays and store the samples in a 3D buffer. Another possibility is to intersect the irregular grid with the boxes that comprise the regular grid.
Reference: [12] <author> Rogers, S., D. Kwak, U. Kau. </author> <title> A Numerical Study of Three-Dimensional Incompressible Flow Around Multiple Posts. AIAA Paper 86-0353, </title> <booktitle> AIAA Aerospace Sciences Conference, </booktitle> <address> Reno, Nevada, </address> <year> 1986. </year>
Reference-contexts: Structured grids can very easily be converted into tetrahedral grids where each hexahedral cell yields five tetrahedra [13]. Unstructured grids can also be converted into tetrahedral grids by applying a tetrahedration algorithm to the set of grid points. (e.g., a Delaunay tetrahedration) <ref> [12] </ref>. Our approach can be used to render any polyhedral grid and does not assume any specific cell type or connectivity. Our current implementation, however, assumes tetrahedral grids. <p> The third dataset shows liquid oxygen (incompressible) ow across a at plate with a cylindrical post rising perpendicular to the plate. Interesting features of the ow are velocity changes just upstream of the post, and two counter-rotating vortices downstream of the post, where the greatest mixing occurs <ref> [12] </ref> (See Figure 8). This grid with 109,744 vertices is represented by 513,375 tetrahedra. The last and largest dataset shows ow past a very simplified geometry representing a delta wing aircraft, at a moderately high angle of attack. Features of TABLE 1.
Reference: [13] <author> Shirley, P. and A. Tuchman. </author> <title> A Polygonal Approximation to Direct Scalar Volume Rendering. </title> <journal> Computer Graphics, </journal> <volume> 24(5) </volume> <pages> 63-70, </pages> <month> Decem-ber </month> <year> 1990. </year>
Reference-contexts: Another major advantage of a tetrahedral grid is that other types of grids can be converted to it. Structured grids can very easily be converted into tetrahedral grids where each hexahedral cell yields five tetrahedra <ref> [13] </ref>. Unstructured grids can also be converted into tetrahedral grids by applying a tetrahedration algorithm to the set of grid points. (e.g., a Delaunay tetrahedration) [12]. Our approach can be used to render any polyhedral grid and does not assume any specific cell type or connectivity. <p> Then, edge number 10, having endpoints with Z coordinates of 12 and 44 will be inserted into buckets 1 and 17. 0 17 47 23 15 231015 EdgeBuckets can be subdivided into tetrahedra. For example, we render hexahe--dral grids by coherently converting each cell into five tetrahedra as in <ref> [13] </ref>. This restriction implies, though, that more memory and time will be spent to render the tetrahedral grid, compared to directly rendering the polyhedral grid. 3.4 Rendering After the slicing, the graphics hardware is used to render the slices.
Reference: [14] <author> Speray, D. and S. Kennon. </author> <title> Volume Probes: Interactive Data Exploration on Arbitrary Grids. </title> <booktitle> Proceedings of San Diego Workshop on Volume Visualization, Computer Graphics, </booktitle> <volume> 24(5) </volume> <pages> 5-12, </pages> <month> December </month> <year> 1990. </year>
Reference-contexts: In this paper we assume that the grid is composed of cells that are bounded by a set of general simple polygons (i.e., non-intersecting, without holes, potentially concave, and possibly non-planar). We distinguish between rectilinear, structured, and unstructured grids <ref> [14] </ref>. Rectilinear grids are composed of a set of connected cells of rectangular prism (brick) shape. The set of cells completely tessellates a rectangular cartesian sub-space (Figure 1 (a-c)).
Reference: [15] <author> Stein C., B. Becker, N. Max. </author> <title> Sorting and Hardware Assisted Rendering fro Volume Visualization. </title> <booktitle> Proceedings of 1994 Symposium on Volume Visualization, </booktitle> <address> Washington D.C., </address> <month> October </month> <year> 1994, </year> <pages> pp. 83-89. </pages>
Reference: [16] <author> Swan, E. and R. Yagel. </author> <title> Slice-Based Volume Rendering. OSU-ACCAD-1/93-TR1, The Advanced Computing Center for the Arts and Design, </title> <institution> The Ohio State University, </institution> <month> January </month> <year> 1993. </year>
Reference-contexts: ACKNOWLEDGMENTS This project was started at NASA Lewis in Fall 1992 and some preliminary results were reported for regular grids <ref> [16] </ref> and FIGURE 8. The Liquid Oxygen post dataset rendered with 50 slices. The image shows the x-momentum (parallel to the plate) of the liquid oxygen. FIGURE 9. The y-momentum of the Deltawing dataset, rendered with 100 slices. irregular grids [22].
Reference: [17] <author> Upson, V. and M. Keeler. V-Buffer: </author> <title> Visible Volume Rendering. </title> <journal> Computer Graphics, </journal> <volume> 22(4) </volume> <pages> 59-64, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: Finally, pixel-space rendering is expected to be slow, especially when step 2 involves sampling in arbitrarily shaped cells. 1.3 Hybrid Methods A hybrid method has also been investigated for regular grids <ref> [17] </ref> and was extended to irregular grids [6]. In these methods, the volume is traversed in object order while the contribution of each voxel to the image is computed in image order. Each transformed cell is intersected by the planes defined by all the screen scan-lines.
Reference: [18] <author> Van Gelder, A. and J. Wilhelms. </author> <title> Rapid Exploration of Curvilinear Grids Using Direct Volume Rendering. </title> <booktitle> Proceedings of Visualization 93, </booktitle> <address> San Jose, CA, </address> <month> October </month> <year> 1995, </year> <pages> pp. 70-77. </pages>
Reference-contexts: Vertex transformation (step 1) can be done by graphics hardware as well as some rendering operations [13][21]. However, this approach suffers from a few disadvantages; first is that the whole process has to be repeated since the sorting (step 2) is view dependent. Reasonable rendering times, quoted by <ref> [18] </ref>, assume no change in view point or low image quality. A more serious difficulty is that the sort operation can be applied only to limited types of grids as mentioned above. The algorithm described by Mao [9] only applies to curvilinear grids.
Reference: [19] <author> Wilhelms, J. and A. Van Gelder. </author> <title> A Coherent Projection Approach for Direct Volume Rendering. </title> <journal> Computer Graphics, </journal> <volume> 25(4) </volume> <pages> 275-284, </pages> <month> July </month> <year> 1991. </year>
Reference-contexts: The task of determining how to render the few types of possible tetrahedra is an order of magnitude easier than figuring out all configurations of even hexahedral cells <ref> [19] </ref>, not to mention arbitrary polyhedra. Another major advantage of a tetrahedral grid is that other types of grids can be converted to it. Structured grids can very easily be converted into tetrahedral grids where each hexahedral cell yields five tetrahedra [13].
Reference: [20] <author> Williams, P. </author> <title> Visibility Ordering Meshed Polyhedra. </title> <journal> ACM Transactions on Graphics, </journal> <volume> 11(2) </volume> <pages> 103-126, </pages> <month> April </month> <year> 1992. </year>
Reference-contexts: Only acyclic meshes and polyhedral meshes generated by Delaunay tetrahedration can be depth sorted. Max et al [10] have presented a topological sort for acyclic grids composed of convex polyhedra with planar faces. A similar algorithm is described in great detail in <ref> [20] </ref>. Step 3 can also be implemented in various ways. One way is to render only the front faces of the polyhedra, assigning each vertex the value resulting from integrating the data from that vertex to the back of the polyhedra [21].
Reference: [21] <author> Williams, P. </author> <title> Interactive Splatting of Nonrectilinear Volumes. </title> <booktitle> Proceedings of Visualization92, </booktitle> <address> Boston, MA, </address> <month> October </month> <year> 1992, </year> <pages> pp. 37-44. </pages>
Reference-contexts: Step 3 can also be implemented in various ways. One way is to render only the front faces of the polyhedra, assigning each vertex the value resulting from integrating the data from that vertex to the back of the polyhedra <ref> [21] </ref>. Alternatively, front and back faces of the polyhedra are rendered separately and the value is integrated between the far and near points [10][18]. Finally, hardware assisted splatting can be employed where up to four polygons are rendered per polyhedral cell with non-zero opacity at the common vertex.
Reference: [22] <author> Yagel, R. </author> <title> Rendering Polyhedral Grids by Incremental Slicing. </title> <institution> OSU-CISRC-10/93-TR35, Department of Computer and Information Science, The Ohio State University, </institution> <month> October </month> <year> 1993. </year>
Reference-contexts: The Liquid Oxygen post dataset rendered with 50 slices. The image shows the x-momentum (parallel to the plate) of the liquid oxygen. FIGURE 9. The y-momentum of the Deltawing dataset, rendered with 100 slices. irregular grids <ref> [22] </ref>. We thank NASA Lewis, and Maureen Cain in particular, for their assistance. We thank Steve May and Ferdi Scheepers for the matrix inversion code and The Advanced Computing Center for the Arts and Design (ACCAD) for the use of the SGI Crimson machine.
References-found: 22

