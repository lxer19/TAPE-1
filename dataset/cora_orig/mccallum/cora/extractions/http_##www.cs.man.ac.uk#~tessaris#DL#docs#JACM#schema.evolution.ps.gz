URL: http://www.cs.man.ac.uk/~tessaris/DL/docs/JACM/schema.evolution.ps.gz
Refering-URL: http://www.cs.man.ac.uk/~tessaris/DL/papers.html
Root-URL: http://www.cs.man.ac.uk
Email: ron-@dcs.st-andrews.ac.uk  
Title: Using Persistence Technology to Control Schema Evolution  
Author: R.C.H. Connor, Q.I. Cutts, G.N.C. Kirby and R. Morrison richard, quintin, graham, 
Address: St Andrews, North Haugh, St Andrews, Fife KY16 9SS, Scotland.  
Affiliation: Department of Mathematical and Computational Sciences, University of  
Date: March 1994.  
Note: To appear in ACM SIGAP conference, Phoenix, Arizona,  
Abstract: Traditional database technology may be extended by taking advantage of the facilities of an integrated persistent programming environment. This paper focuses on how such an environment may be used to provide new solutions to a long standing problem in traditional databases, that of schema evolution. A general mechanism is first described, followed by a description of a specific schema editing tool. The persistent environment provides an underlying technology which allows the schema editor to locate and change, either manually or automatically, all affected program and data. The advantages of the mechanism are that it provides understandable semantics for evolution by controlling when the changes are made and by ensuring that changes to schema, program and data are consistent and made in lock step. It is shown how these changes together may be grouped as a transaction within a live system; furthermore, the accommodation of lazy data changes allows minimum loss of availability. 
Abstract-found: 1
Intro-found: 1
Reference: [AB87] <author> Atkinson, </author> <title> M.P. & Buneman, O.P. Types and Persistence in Database Programming Languages. </title> <journal> ACM Computing Surveys 19, </journal> <note> 2 (1987) pp 105-190. </note>
Reference-contexts: Thus data may remain under the control of a single persistent programming system for its entire lifetime. The benefits of orthogonal persistence have been described extensively in the literature <ref> [ABC+83, AB87, MBC+87, CDM+90] </ref>. These can be summarised as: improving programming productivity from simpler semantics; removing ad hoc arrangements for data translation and long term data storage; and providing protection mechanisms over the whole environment.
Reference: [ABC+83] <author> Atkinson, M.P., Bailey, P.J., Chisholm, K.J., Cockshott, W.P. & Morrison, R. </author> <title> An Approach to Persistent Programming. </title> <note> Computer Journal 26, 4 (1983) pp 360-365. </note>
Reference-contexts: Thus data may remain under the control of a single persistent programming system for its entire lifetime. The benefits of orthogonal persistence have been described extensively in the literature <ref> [ABC+83, AB87, MBC+87, CDM+90] </ref>. These can be summarised as: improving programming productivity from simpler semantics; removing ad hoc arrangements for data translation and long term data storage; and providing protection mechanisms over the whole environment. <p> In recent years considerable research has been devoted to the investigation of the concept of persistence and its application in the integration of database systems and programming languages <ref> [Atk78, ABC+83] </ref>. As a result a number of persistent systems have been developed including Pascal/R, PS-algol [PS88], Napier88 [MBC+89], DBPL [MS89], Galileo [ACO85], TI Persistent Memory System [Tha86], Amber [Car85] , Trellis/Owl [SCW85] and Tycoon [MS92].
Reference: [ACO85] <author> Albano, A., Cardelli, L. & Orsini, R. </author> <title> Galileo: a Strongly Typed, Interactive Conceptual Language. </title> <journal> ACM Transactions on Database Systems 10, </journal> <note> 2 (1985) pp 230-260. </note>
Reference-contexts: As a result a number of persistent systems have been developed including Pascal/R, PS-algol [PS88], Napier88 [MBC+89], DBPL [MS89], Galileo <ref> [ACO85] </ref>, TI Persistent Memory System [Tha86], Amber [Car85] , Trellis/Owl [SCW85] and Tycoon [MS92]. The persistence abstraction has been recognised as the appropriate underlying technology for long lived, concurrently accessed and potentially large bodies of data and programs.
Reference: [Atk78] <author> Atkinson, </author> <title> M.P. </title> <booktitle> Programming Languages and Databases. In Proc. 4th IEEE International Conference on Very Large Databases (1978) pp 408-419. </booktitle>
Reference-contexts: In recent years considerable research has been devoted to the investigation of the concept of persistence and its application in the integration of database systems and programming languages <ref> [Atk78, ABC+83] </ref>. As a result a number of persistent systems have been developed including Pascal/R, PS-algol [PS88], Napier88 [MBC+89], DBPL [MS89], Galileo [ACO85], TI Persistent Memory System [Tha86], Amber [Car85] , Trellis/Owl [SCW85] and Tycoon [MS92].
Reference: [BBB+88] <author> Bancilhon, F., Barbedette, G., Benzaken, V., Delobel, C., Gamerman, S., Lcluse, C., Pfeffer, P., Richard, P. & Valez, F. </author> <title> The Design and Implementation of O 2 , an ObjectOriented Database System. </title> <note> In Lecture Notes in Computer Science 334, Dittrich, K.R. (ed), Springer-Verlag (1988) pp 1-22. </note>
Reference-contexts: Typical examples of such systems are CAD/CAM systems, office automation, CASE tools and software engineering environments [MBB+85, MBC+87]. ObjectOriented Database Systems such as GemStone [BOP+89] and O 2 <ref> [BBB+88] </ref> have at their core a 2 persistent object store. Process modelling systems use a persistent base to preserve their modelling activities over execution sessions [BPR91].
Reference: [BOP+89] <author> Bretl, B., Otis, A., Penney, J., Schuchardt, B., Stein, J., Williams, E.H., Williams, M. & Maier, D. </author> <title> The GemStone Data Management System. In ObjectOriented Concepts, Applications, and Databases, </title> <editor> Kim, W. & Lochovsky, F. (ed), </editor> <month> Morgan-Kaufman </month> <year> (1989). </year>
Reference-contexts: The persistence abstraction has been recognised as the appropriate underlying technology for long lived, concurrently accessed and potentially large bodies of data and programs. Typical examples of such systems are CAD/CAM systems, office automation, CASE tools and software engineering environments [MBB+85, MBC+87]. ObjectOriented Database Systems such as GemStone <ref> [BOP+89] </ref> and O 2 [BBB+88] have at their core a 2 persistent object store. Process modelling systems use a persistent base to preserve their modelling activities over execution sessions [BPR91].
Reference: [BPR91] <author> Bruynooghe, R.F., Parker, J.M. & Rowles, J.S. PSS: </author> <title> A System for Process Enactment. </title> <booktitle> In Proc. 1st International Conference on the Software Process: Manufacturing Complex Systems (1991). </booktitle> <pages> 14 </pages>
Reference-contexts: ObjectOriented Database Systems such as GemStone [BOP+89] and O 2 [BBB+88] have at their core a 2 persistent object store. Process modelling systems use a persistent base to preserve their modelling activities over execution sessions <ref> [BPR91] </ref>. Recently, integrated persistent programming systems have been developed that allow the complete software and data process to take place entirely within the persistent environment [KCC+92, MBC+93]. The facilities provided by traditional databases may be extended by taking advantage of such an environment.
Reference: [Car85] <author> Cardelli, L. </author> <type> Amber. </type> <institution> AT&T Bell Labs, Murray Hill Technical Report AT7T (1985). </institution>
Reference-contexts: As a result a number of persistent systems have been developed including Pascal/R, PS-algol [PS88], Napier88 [MBC+89], DBPL [MS89], Galileo [ACO85], TI Persistent Memory System [Tha86], Amber <ref> [Car85] </ref> , Trellis/Owl [SCW85] and Tycoon [MS92]. The persistence abstraction has been recognised as the appropriate underlying technology for long lived, concurrently accessed and potentially large bodies of data and programs. Typical examples of such systems are CAD/CAM systems, office automation, CASE tools and software engineering environments [MBB+85, MBC+87].
Reference: [CDM+90] <author> Connor, R.C.H., Dearle, A., Morrison, R. & Brown, A.L. </author> <title> Existentially Quantified Types as a Database Viewing Mechanism. </title> <booktitle> In Lecture Notes in Computer Science 416, </booktitle> <editor> Bancilhon, F., Thanos, C. & Tsichritzis, D. (ed), </editor> <publisher> Springer-Verlag (1990) pp 301-315. </publisher>
Reference-contexts: Thus data may remain under the control of a single persistent programming system for its entire lifetime. The benefits of orthogonal persistence have been described extensively in the literature <ref> [ABC+83, AB87, MBC+87, CDM+90] </ref>. These can be summarised as: improving programming productivity from simpler semantics; removing ad hoc arrangements for data translation and long term data storage; and providing protection mechanisms over the whole environment.
Reference: [FDK+92] <author> Farkas, A.M., Dearle, A., Kirby, G.N.C., Cutts, Q.I., Morrison, R. & Connor, R.C.H. </author> <title> Persistent Program Construction through Browsing and User Gesture with some Typing. In Persistent Object Systems, </title> <editor> Albano, A. & Morrison, R. (ed), </editor> <publisher> Springer-Verlag (1992) pp 376-393. </publisher>
Reference-contexts: The advantages of integrated persistent environments are described elsewhere <ref> [FDK+92, KCC+92] </ref>.
Reference: [KCC+92] <author> Kirby, G.N.C., Connor, R.C.H., Cutts, Q.I., Dearle, A., Farkas, A.M. & Morrison, R. </author> <title> Persistent Hyper-Programs. In Persistent Object Systems, </title> <editor> Albano, A. & Morrison, R. (ed), </editor> <publisher> Springer-Verlag (1992) pp 86-106. </publisher>
Reference-contexts: Process modelling systems use a persistent base to preserve their modelling activities over execution sessions [BPR91]. Recently, integrated persistent programming systems have been developed that allow the complete software and data process to take place entirely within the persistent environment <ref> [KCC+92, MBC+93] </ref>. The facilities provided by traditional databases may be extended by taking advantage of such an environment. In particular, this paper focuses on how the persistent environment may be used to provide new solutions to a long standing problem in traditional databases, that of schema evolution. <p> The advantages of integrated persistent environments are described elsewhere <ref> [FDK+92, KCC+92] </ref>. <p> A prototype implementation of the schema editing tool described is under way at the University of St Andrews. It is built using the language Napier88 [MBC+89], on top of the hyper-programming environment <ref> [KCC+92] </ref> and using the WIN graphical user interface package [KCC+92]. These systems are all available from the authors; it is hoped that the schema editor will be made available some time in the near future. <p> A prototype implementation of the schema editing tool described is under way at the University of St Andrews. It is built using the language Napier88 [MBC+89], on top of the hyper-programming environment <ref> [KCC+92] </ref> and using the WIN graphical user interface package [KCC+92]. These systems are all available from the authors; it is hoped that the schema editor will be made available some time in the near future.
Reference: [KCC+92] <author> Kirby, G.N.C., Cutts, Q.I., Connor, R.C.H., Dearle, A. & Morrison, R. </author> <title> Programmers Guide to the Napier88 Standard Library, </title> <address> Edition 2.1. University of St Andrews (1992). </address>
Reference-contexts: Process modelling systems use a persistent base to preserve their modelling activities over execution sessions [BPR91]. Recently, integrated persistent programming systems have been developed that allow the complete software and data process to take place entirely within the persistent environment <ref> [KCC+92, MBC+93] </ref>. The facilities provided by traditional databases may be extended by taking advantage of such an environment. In particular, this paper focuses on how the persistent environment may be used to provide new solutions to a long standing problem in traditional databases, that of schema evolution. <p> The advantages of integrated persistent environments are described elsewhere <ref> [FDK+92, KCC+92] </ref>. <p> A prototype implementation of the schema editing tool described is under way at the University of St Andrews. It is built using the language Napier88 [MBC+89], on top of the hyper-programming environment <ref> [KCC+92] </ref> and using the WIN graphical user interface package [KCC+92]. These systems are all available from the authors; it is hoped that the schema editor will be made available some time in the near future. <p> A prototype implementation of the schema editing tool described is under way at the University of St Andrews. It is built using the language Napier88 [MBC+89], on top of the hyper-programming environment <ref> [KCC+92] </ref> and using the WIN graphical user interface package [KCC+92]. These systems are all available from the authors; it is hoped that the schema editor will be made available some time in the near future.
Reference: [Kir92] <author> Kirby, G.N.C. </author> <title> Reflection and Hyper-Programming in Persistent Programming Systems. </title> <type> Ph.D. Thesis, </type> <institution> University of St Andrews (1992). </institution>
Reference-contexts: In this case links to the objects can be included in the program instead of textual descriptions. By analogy with hypertext, a program containing both text and links to objects is called a hyper-program. Various benefits of hyper-program technology are detailed in <ref> [Kir92] </ref>. The most important benefit in the context of this paper is that it provides a mechanism for representing all executable programs, since free variables in closures may be represented as links within hyper-programs.
Reference: [MBB+85] <author> Morrison, R., Bailey, P.J., Brown, A.L., Dearle, A. & Atkinson, </author> <title> M.P. The Persistent Store as an Enabling Technology for an Integrated Project Support Environment. </title> <booktitle> In Proc. 8th IEEE International Conference on Software Engineering, </booktitle> <address> London (1985) pp 166-172. </address>
Reference-contexts: The persistence abstraction has been recognised as the appropriate underlying technology for long lived, concurrently accessed and potentially large bodies of data and programs. Typical examples of such systems are CAD/CAM systems, office automation, CASE tools and software engineering environments <ref> [MBB+85, MBC+87] </ref>. ObjectOriented Database Systems such as GemStone [BOP+89] and O 2 [BBB+88] have at their core a 2 persistent object store. Process modelling systems use a persistent base to preserve their modelling activities over execution sessions [BPR91].
Reference: [MBC+87] <author> Morrison, R., Brown, A.L., Connor, R.C.H. & Dearle, A. </author> <title> Polymorphism, Persistence and Software Reuse in a Strongly Typed ObjectOriented Environment. </title> <note> Software Engineering Journal December (1987) pp 199-204. </note>
Reference-contexts: Thus data may remain under the control of a single persistent programming system for its entire lifetime. The benefits of orthogonal persistence have been described extensively in the literature <ref> [ABC+83, AB87, MBC+87, CDM+90] </ref>. These can be summarised as: improving programming productivity from simpler semantics; removing ad hoc arrangements for data translation and long term data storage; and providing protection mechanisms over the whole environment. <p> The persistence abstraction has been recognised as the appropriate underlying technology for long lived, concurrently accessed and potentially large bodies of data and programs. Typical examples of such systems are CAD/CAM systems, office automation, CASE tools and software engineering environments <ref> [MBB+85, MBC+87] </ref>. ObjectOriented Database Systems such as GemStone [BOP+89] and O 2 [BBB+88] have at their core a 2 persistent object store. Process modelling systems use a persistent base to preserve their modelling activities over execution sessions [BPR91].
Reference: [MBC+89] <author> Morrison, R., Brown, A.L., Connor, R.C.H. & Dearle, A. </author> <title> The Napier88 Reference Manual. </title> <institution> University of St Andrews Technical Report PPRR-77-89 (1989). </institution>
Reference-contexts: In recent years considerable research has been devoted to the investigation of the concept of persistence and its application in the integration of database systems and programming languages [Atk78, ABC+83]. As a result a number of persistent systems have been developed including Pascal/R, PS-algol [PS88], Napier88 <ref> [MBC+89] </ref>, DBPL [MS89], Galileo [ACO85], TI Persistent Memory System [Tha86], Amber [Car85] , Trellis/Owl [SCW85] and Tycoon [MS92]. The persistence abstraction has been recognised as the appropriate underlying technology for long lived, concurrently accessed and potentially large bodies of data and programs. <p> This gives the ability for programs within the persistent environment to enforce that changes are performed in lock step. A prototype implementation of the schema editing tool described is under way at the University of St Andrews. It is built using the language Napier88 <ref> [MBC+89] </ref>, on top of the hyper-programming environment [KCC+92] and using the WIN graphical user interface package [KCC+92]. These systems are all available from the authors; it is hoped that the schema editor will be made available some time in the near future.
Reference: [MBC+93] <author> Morrison, R., Baker, C., Connor, R.C.H., Cutts, Q.I. & Kirby, G.N.C. </author> <title> Approaching Integration in Software Environments. </title> <institution> University of St Andrews Technical Report CS/93/10 (1993). </institution>
Reference-contexts: Process modelling systems use a persistent base to preserve their modelling activities over execution sessions [BPR91]. Recently, integrated persistent programming systems have been developed that allow the complete software and data process to take place entirely within the persistent environment <ref> [KCC+92, MBC+93] </ref>. The facilities provided by traditional databases may be extended by taking advantage of such an environment. In particular, this paper focuses on how the persistent environment may be used to provide new solutions to a long standing problem in traditional databases, that of schema evolution.
Reference: [MS89] <author> Matthes, F. & Schmidt, J.W. </author> <title> The Type System of DBPL. </title> <booktitle> In Proc. 2nd International Workshop on Database Programming Languages, Salishan, </booktitle> <pages> Oregon (1989) pp 219-225. </pages>
Reference-contexts: In recent years considerable research has been devoted to the investigation of the concept of persistence and its application in the integration of database systems and programming languages [Atk78, ABC+83]. As a result a number of persistent systems have been developed including Pascal/R, PS-algol [PS88], Napier88 [MBC+89], DBPL <ref> [MS89] </ref>, Galileo [ACO85], TI Persistent Memory System [Tha86], Amber [Car85] , Trellis/Owl [SCW85] and Tycoon [MS92]. The persistence abstraction has been recognised as the appropriate underlying technology for long lived, concurrently accessed and potentially large bodies of data and programs.
Reference: [MS92] <author> Matthes, F. & Schmidt, J.W. </author> <title> Definition of the Tycoon Language TL - A Preliminary Report. </title> <note> University of Hamburg Technical Report 062-92 (1992). </note>
Reference-contexts: As a result a number of persistent systems have been developed including Pascal/R, PS-algol [PS88], Napier88 [MBC+89], DBPL [MS89], Galileo [ACO85], TI Persistent Memory System [Tha86], Amber [Car85] , Trellis/Owl [SCW85] and Tycoon <ref> [MS92] </ref>. The persistence abstraction has been recognised as the appropriate underlying technology for long lived, concurrently accessed and potentially large bodies of data and programs. Typical examples of such systems are CAD/CAM systems, office automation, CASE tools and software engineering environments [MBB+85, MBC+87].
Reference: [PS88] <editor> PS-algol Reference Manual, </editor> <booktitle> 4th edition. Universities of Glasgow and St Andrews Technical Report PPRR-12-88 (1988). </booktitle>
Reference-contexts: In recent years considerable research has been devoted to the investigation of the concept of persistence and its application in the integration of database systems and programming languages [Atk78, ABC+83]. As a result a number of persistent systems have been developed including Pascal/R, PS-algol <ref> [PS88] </ref>, Napier88 [MBC+89], DBPL [MS89], Galileo [ACO85], TI Persistent Memory System [Tha86], Amber [Car85] , Trellis/Owl [SCW85] and Tycoon [MS92]. The persistence abstraction has been recognised as the appropriate underlying technology for long lived, concurrently accessed and potentially large bodies of data and programs.
Reference: [SCW85] <author> Schaffert, C., Cooper, T. & Wilpot, C. </author> <title> Trellis Object-Based Environment Language Reference Manual. </title> <note> DEC Systems Research Center Technical Report 372 (1985). </note>
Reference-contexts: As a result a number of persistent systems have been developed including Pascal/R, PS-algol [PS88], Napier88 [MBC+89], DBPL [MS89], Galileo [ACO85], TI Persistent Memory System [Tha86], Amber [Car85] , Trellis/Owl <ref> [SCW85] </ref> and Tycoon [MS92]. The persistence abstraction has been recognised as the appropriate underlying technology for long lived, concurrently accessed and potentially large bodies of data and programs. Typical examples of such systems are CAD/CAM systems, office automation, CASE tools and software engineering environments [MBB+85, MBC+87].
Reference: [SZ87] <author> Skarra, A.H. & Zdonik, </author> <title> S.B. Type Evolution in an ObjectOriented Database. In Research Directions in ObjectOriented Programming, </title> <editor> Shriver, B. & Wegner, P. (ed), </editor> <publisher> MIT Press (1987) pp 393-415. </publisher> <pages> 15 </pages>
Reference-contexts: This information may be kept in a central table, or a reserved value may be used. If the test fails then the system suspends the accessing process and causes the initialisation code to be executed <ref> [SZ87] </ref>. Delaying initial value calculations to the time of access may also cause problems. Peak calculation cost may occur at the same time as peak user load, causing efficiency problems.
Reference: [Tha86] <author> Thatte, </author> <title> S.M. Persistent Memory: A Storage Architecture for Object Oriented Database Systems. </title> <booktitle> In Proc. ACM/IEEE International Workshop on Object-Oriented Database Systems, </booktitle> <address> Pacific Grove, California (1986) pp 148-159. </address>
Reference-contexts: As a result a number of persistent systems have been developed including Pascal/R, PS-algol [PS88], Napier88 [MBC+89], DBPL [MS89], Galileo [ACO85], TI Persistent Memory System <ref> [Tha86] </ref>, Amber [Car85] , Trellis/Owl [SCW85] and Tycoon [MS92]. The persistence abstraction has been recognised as the appropriate underlying technology for long lived, concurrently accessed and potentially large bodies of data and programs.
References-found: 23

