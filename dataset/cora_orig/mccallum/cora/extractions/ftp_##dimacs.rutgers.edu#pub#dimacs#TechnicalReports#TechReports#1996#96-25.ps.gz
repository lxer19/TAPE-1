URL: ftp://dimacs.rutgers.edu/pub/dimacs/TechnicalReports/TechReports/1996/96-25.ps.gz
Refering-URL: http://dimacs.rutgers.edu/TechnicalReports/1996.html
Root-URL: http://www.cs.rutgers.edu
Email: koiran@lip.ens-lyon.fr  moore@santafe.edu  
Title: Closed-form Analytic Maps in One and Two Dimensions Can Simulate Turing Machines  
Author: by Pascal Koiran Cristopher Moore 
Affiliation: Ecole Normale Superieure de Lyon  Santa Fe Institute  
Abstract: DIMACS Technical Report 96-25 July 1996 DIMACS is a partnership of Rutgers University, Princeton University, AT&T Research, Bellcore, and Bell Laboratories. DIMACS is an NSF Science and Technology Center, funded under contract STC-91-19999; and also receives support from the New Jersey Commission on Science and Technology. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. Asarin, O. Maler and A. Pnueli, </author> <title> "Reachability analysos of dynamical systems have piecewise-constant derivatives." </title> <institution> Theor. Comp. Sci. </institution> <month> 138 </month> <year> (1995) </year> <month> 35-66. </month>
Reference-contexts: 1 Introduction Various authors have independently shown <ref> [9, 12, 4, 14, 1] </ref> that finite-dimensional piecewise-linear maps and flows can simulate Turing machines. The construction is simple: associate the digits of the x and y coordinates of a point with the left and right halves of a Turing machine's tape.
Reference: [2] <author> S. Burckel, </author> <title> "Functional equations associated with congruential functions." </title> <institution> Theor. Comp. Sci. </institution> <month> 123 </month> <year> (1994) </year> <month> 397-406. </month>
Reference-contexts: We will call any such f a Collatz function. J.H. Conway [3] showed that it is undecidable in general whether f t (x) = 1 for some t. Based on this fact, Burckel <ref> [2] </ref> has shown that it is undecidable whether certain functional equations have non-trivial solutions; in addition, the record-holding small Turing machines in the Busy Beaver competition calculate Collatz functions [8], another testament to their complexity. <p> This base of p = 30k is more compact than Conway's construction, which gives p = O (2 k ) <ref> [2] </ref>. At most 19k terms are actually needed, since the other 11 possibilities s + ck for c 2 f7; 11; 13; 14; 17; 19; 22; 23; 26; 28; 29g never happen. Furthermore, not all combinations of non-zero-ness of L, R and W occur for each state in the FSA.
Reference: [3] <author> J.H. Conway, </author> <title> "Unpredictable iterations." </title> <booktitle> In Proc. </booktitle> <institution> 1972 Number Theory University of Colorado (1972) 49-52. </institution>
Reference-contexts: Let f (x) = a i x + b i where x = i mod p (1) for some base p and constants a i , b i for 0 i &lt; p. We will call any such f a Collatz function. J.H. Conway <ref> [3] </ref> showed that it is undecidable in general whether f t (x) = 1 for some t.
Reference: [4] <author> P. Koiran, M. Cosnard, and M. Garzon, </author> <title> "Computability with low-dimensional dynamical systems." </title> <institution> Theor. Comp. Sci. </institution> <month> 132 </month> <year> (1994) </year> <month> 113-128. </month>
Reference-contexts: 1 Introduction Various authors have independently shown <ref> [9, 12, 4, 14, 1] </ref> that finite-dimensional piecewise-linear maps and flows can simulate Turing machines. The construction is simple: associate the digits of the x and y coordinates of a point with the left and right halves of a Turing machine's tape. <p> In one dimension this creates a contradiction <ref> [4] </ref>, since if f has an infinite number of periodic points of period t, then f t must be the identity; but such a simulation may still be possible in more than one dimension. 3.) What is the minimum number of terms in our two constructions needed to simulate a universal
Reference: [5] <author> P. </author> <month> Koiran, </month> <institution> "Puissance de calcul des reseaux de neurones artificiels." </institution> <type> Ph.D. Thesis, </type> <institution> Ecole Normale Superieure de Lyon, </institution> <year> 1993. </year>
Reference-contexts: In this paper, we construct two elementary functions: one in one dimension based on counter machines that simulates Turing machines with an exponential slowdown, and another in two dimensions that simulates TMs in real time. Preliminary versions of these results appeared in <ref> [5] </ref> and [10]. 2 One dimension: Minsky machines and Collatz functions Recall [6] the classic "3x + 1 problem." If f is the function on the integers f (x) = x=2 (x even) 3x + 1 (x odd) then, for all x, does there exist a t such that f t
Reference: [6] <author> J.C. Lagarias, </author> <title> "The 3x + 1 problem and its generalizations." </title> <journal> Amer. Math. </journal> <note> Monthly 92 (1985) 3-23. </note>
Reference-contexts: Preliminary versions of these results appeared in [5] and [10]. 2 One dimension: Minsky machines and Collatz functions Recall <ref> [6] </ref> the classic "3x + 1 problem." If f is the function on the integers f (x) = x=2 (x even) 3x + 1 (x odd) then, for all x, does there exist a t such that f t (x) = 1? In dynamical systems terms, is all of N in
Reference: [7] <author> K. Lindgren and M.G. Nordahl, </author> <title> "Universal computation in simple one-dimensional cellular automata." </title> <booktitle> Complex Systems 4 (1990) 299-318. </booktitle>
Reference-contexts: be possible in more than one dimension. 3.) What is the minimum number of terms in our two constructions needed to simulate a universal Turing machine? The figures given above (24 in two dimensions and p 19 130 = 2470 in one) can probably be reduced by noting as in <ref> [7] </ref> that not all combinations of state and symbol actually occur in the course of a properly initialized computation. Acknowledgements: C.M. is grateful to Mats Nordahl and Seth Lloyd for helpful discussions, and to an anonymous referee for pointing out that the functions in [10] are Lipschitz rather than differentiable.
Reference: [8] <author> P. Michel, </author> <title> "Busy beaver competition and Collatz-like problems." </title> <journal> Arch. Math. </journal> <note> Logic 32 (1993) 351-367. 8 </note>
Reference-contexts: Based on this fact, Burckel [2] has shown that it is undecidable whether certain functional equations have non-trivial solutions; in addition, the record-holding small Turing machines in the Busy Beaver competition calculate Collatz functions <ref> [8] </ref>, another testament to their complexity. Conway does this by simulating Minsky machines, which are finite-state automata (FSAs) that can increment, decrement, or branch on zero on a finite number of counters.
Reference: [9] <author> C. Moore, </author> <title> "Unpredictability and undecidability in dynamical systems." </title> <journal> Phys. Rev. Lett. </journal> <note> 64 (1990) 2354, and Nonlinearity 4 (1991) 199. </note>
Reference-contexts: 1 Introduction Various authors have independently shown <ref> [9, 12, 4, 14, 1] </ref> that finite-dimensional piecewise-linear maps and flows can simulate Turing machines. The construction is simple: associate the digits of the x and y coordinates of a point with the left and right halves of a Turing machine's tape. <p> These systems can be thought of as billiards or optical ray tracing in three dimensions, recurrent neural networks, or hybrid systems. However, piecewise-linear functions are not very realistic from a physical point of view, and although these maps can be smoothed into infinitely differentiable ones <ref> [9] </ref>, most physical dynamical systems are analytic, at least in a perfectly classical world.
Reference: [10] <author> C. Moore, </author> <title> "Smooth one-dimensional maps of the interval and the real line capable of universal computation." </title> <institution> Santa Fe Institute Working Paper 93-01-001 (1993). </institution>
Reference-contexts: In this paper, we construct two elementary functions: one in one dimension based on counter machines that simulates Turing machines with an exponential slowdown, and another in two dimensions that simulates TMs in real time. Preliminary versions of these results appeared in [5] and <ref> [10] </ref>. 2 One dimension: Minsky machines and Collatz functions Recall [6] the classic "3x + 1 problem." If f is the function on the integers f (x) = x=2 (x even) 3x + 1 (x odd) then, for all x, does there exist a t such that f t (x) = <p> 1 a 2 a 2 : : :) = 0:a 1 a 0 a 2 a 1 a 3 : : : ; that shifts x's digits as if it were a two-sided sequence folded up, is continuous and can be embedded in a Lipshitz map on a Cantor set <ref> [10] </ref>, but it is certainly not elementary. <p> Acknowledgements: C.M. is grateful to Mats Nordahl and Seth Lloyd for helpful discussions, and to an anonymous referee for pointing out that the functions in <ref> [10] </ref> are Lipschitz rather than differentiable.
Reference: [11] <author> M. Minsky, </author> <title> Computation: Finite and Infinite Machines. </title> <publisher> Prentice-Hall, </publisher> <year> 1967. </year>
Reference-contexts: Conway does this by simulating Minsky machines, which are finite-state automata (FSAs) that can increment, decrement, or branch on zero on a finite number of counters. Minsky showed <ref> [11] </ref> that two counters suffice to simulate an arbitrary Turing machine; however, this creates a doubly-exponential slowdown, so we use three counters instead.
Reference: [12] <author> J.H. Reif, J.D. Tygar, and A. Yoshida, </author> <title> "The computability and complexity of optical beam tracing." </title> <booktitle> In Proc. 31st Annual Symposium on Foundations of Computer Science (1990) 106-114. </booktitle>
Reference-contexts: 1 Introduction Various authors have independently shown <ref> [9, 12, 4, 14, 1] </ref> that finite-dimensional piecewise-linear maps and flows can simulate Turing machines. The construction is simple: associate the digits of the x and y coordinates of a point with the left and right halves of a Turing machine's tape.
Reference: [13] <author> Yu.V. Rogozhin, </author> <title> "Seven universal Turing machines" (Russian), </title> <journal> Systems and Theoretical Programming, </journal> <note> Mat. Issled 69 (1982) 76-90. </note>
Reference-contexts: As shown in figure 1, this FSA needs 4 states for each state/symbol pair that shifts right, m + 3 for each pair that shifts left, and two for a pair that halts. Using Rogozhin's 4-state, 6-symbol universal Turing machine <ref> [13] </ref>, which has 8 pairs that shift left and 14 that shift right, we get a total of 130 states. <p> Finally, we note that this function has essentially one term for each state symbol pair of the Turing machine. For Rogozhin's 4-state, 6-symbol machine <ref> [13] </ref> this is 24. 4 Conclusion We have extended previous results on the computation universality of piecewise-linear and C 1 functions in one and two dimensions to include analytic functions with elementary closed forms.
Reference: [14] <author> H. Siegelmann and E.D. Sontag, </author> <title> "Analog computation via neural networks." </title> <journal> Theor. Comp. Sci. </journal> <volume> 131 (1994) 331-360. </volume> <pages> 9 </pages>
Reference-contexts: 1 Introduction Various authors have independently shown <ref> [9, 12, 4, 14, 1] </ref> that finite-dimensional piecewise-linear maps and flows can simulate Turing machines. The construction is simple: associate the digits of the x and y coordinates of a point with the left and right halves of a Turing machine's tape.
References-found: 14

