URL: ftp://ftp.cs.arizona.edu/ftol/papers/isads.ps
Refering-URL: http://www.cs.arizona.edu/cactus/public.html
Root-URL: http://www.cs.arizona.edu
Title: Properties of Membership Services  
Author: Matti A. Hiltunen and Richard D. Schlichting 
Address: Tucson, AZ 85721, USA  
Affiliation: Department of Computer Science University of Arizona  
Abstract: A membership service is used in a distributed system to maintain information about which sites are functioning and which have failed at any given time. Such services have proven to be fundamental for constructing distributed applications, with many example services and algorithms defined in the literature. Despite these efforts, however, little has been done on examining the abstract properties important to membership independent of a given service. Here, these properties are identified and characterized. Message ordering graphs are used to specify the effect of each property on the message flow as seen by the application, and dependency graphs are used to characterize the relationship between properties. These graphs help differentiate existing services, as well as facilitate the design of new services in which only those properties actually required by an application are included. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Y. Amir, D. Dolev, S. Kramer, and D. Malki. Transis: </author> <title> A communication sub-system for high availability. </title> <booktitle> In 22nd FTCS, </booktitle> <pages> pp. 76-84, </pages> <month> Jul </month> <year> 1992. </year>
Reference-contexts: Finally, note that the concept of a graph of mes sages is very appealing as an implementation tool as well. For example, this technique is closely related to the causality graphs used in Psync [13] and Tran-sis <ref> [1] </ref>, which capture the causal ordering relationship between messages. 4 Properties In the following, we examine different properties enforced by membership protocols.
Reference: [2] <author> Y. Amir, L. Moser, P. Melliar-Smith, D. Agarwal, and P. Ciarfella. </author> <title> Fast message ordering and membership using a logical token-passing ring. </title> <booktitle> In 13th Conf. on Dist. Comp. Sys., </booktitle> <pages> pp. 551-560, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: Membership services and protocols have been extensively studied, both for synchronous systems where bounds are placed on network transmission time (e.g., [5, 10]), and for asynchronous system where no such assumption is made (e.g., <ref> [2, 11, 15, 16] </ref>). The properties enforced by the protocols also vary, ranging from ones that offer very weak properties [14] to others such as Isis that guarantee strong properties [3]. <p> This collection can range from all functioning sites to some subset depending on the particular algorithm used. The execution cost of the different variants can differ significantly. An example of membership services that provide Simple Agreement is Totem <ref> [2] </ref> and an example of membership services that provide Voted Agreement is Consul [11]. <p> This is acceptable in cases where the actual membership of the destination group is not important, but stronger guarantees are useful in some cases. Extended virtual synchrony guarantees that all messages sent under the old membership are also de-livered before any membership change messages <ref> [2] </ref>. Extended virtual synchrony can be defined more formally as follows. Let A, B, C and M (C) be defined as usual. <p> For example, Consul [11] combines live detection, voted agreement (consensus), FIFO order of membership change messages, agreement on last message, and agreement on successors. Totem <ref> [2] </ref>, on the other hand, combines live detection, simple agreement, FIFO order of membership change messages and extended virtual synchrony.
Reference: [3] <author> K. Birman, A. Schiper, and P. Stephenson. </author> <title> Lightweight causal and atomic group multicast. </title> <journal> ACM Trans. on Comp. Sys., </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> Aug. </month> <year> 1991. </year>
Reference-contexts: The properties enforced by the protocols also vary, ranging from ones that offer very weak properties [14] to others such as Isis that guarantee strong properties <ref> [3] </ref>. As might be expected, the semantics of the application has a strong influence on the type of membership protocol needed: some require strong properties, while others will execute correctly with something weaker. <p> An example of an accurate service that is not live is that of Mach, where the failed site notifies others about its own failure upon recovery [12]. However, most membership services for asynchronous systems have chosen to be live but not accurate, for example, Isis <ref> [3] </ref> and Consul [11]. The lack of accuracy in such systems comes from the use of timeouts to suspect the failure of a site, a technique that may trigger false suspicions. <p> also be defined. 4.7 Virtual Synchrony Virtual synchrony is a property that restricts the delivery order of application and membership change messages in such a way that it appears to the application as if events are occurring synchronously even though they are actually occurring on different sites at different times <ref> [3] </ref>. Virtual synchrony is easy to explain in the ordering graph, as illustrated in Figure 8.
Reference: [4] <author> K. Birman and B. Glade. </author> <title> Consistent failure reporting in reliable communication systems. </title> <type> Tech. Rep. 93-1349, </type> <institution> Dept. of Comp. Sci., Cornell Univ., </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: A membership service is live if any failure or recovery is eventually detected and reported. In an asynchronous system, a service can be either accurate or live, but not both <ref> [4] </ref>. An example of an accurate service that is not live is that of Mach, where the failed site notifies others about its own failure upon recovery [12]. However, most membership services for asynchronous systems have chosen to be live but not accurate, for example, Isis [3] and Consul [11].
Reference: [5] <author> F. Cristian. </author> <title> Reaching agreement on processor-group membership in synchronous distributed systems. </title> <journal> Distributed Computing, </journal> <volume> 4 </volume> <pages> 175-187, </pages> <year> 1991. </year>
Reference-contexts: Membership services and protocols have been extensively studied, both for synchronous systems where bounds are placed on network transmission time (e.g., <ref> [5, 10] </ref>), and for asynchronous system where no such assumption is made (e.g., [2, 11, 15, 16]). The properties enforced by the protocols also vary, ranging from ones that offer very weak properties [14] to others such as Isis that guarantee strong properties [3].
Reference: [6] <author> M. Fischer, N. Lynch, and M. Paterson. </author> <title> Impossibility of distributed consensus with one faulty process. </title> <journal> J. ACM, </journal> <volume> 32(2) </volume> <pages> 374-382, </pages> <month> Apr </month> <year> 1985. </year>
Reference-contexts: The protocol that maintains this information attempts to ensure two fundamental properties: * Precision: The information reflects the true phys ical situation. * Consistency: The information is identical across all sites. Of course, in an asynchronous system, these goals can only be approximated <ref> [6] </ref>. 3 Message Ordering Graphs The following notation is used in this and subsequent sections. Capital letters A, B, C, : : : are used to denote sites. Small letters with a subscript, for example a i , are used to indicate the i th message sent by site A.
Reference: [7] <author> M. Hiltunen and R. Schlichting. </author> <title> An approach to constructing modular fault-tolerant protocols. </title> <booktitle> In 12th Symp. on Reliable Dist. Sys., </booktitle> <pages> pp. 105-114, </pages> <month> Oct </month> <year> 1993. </year>
Reference-contexts: Such an approach can be realized by implementing each property as a separate software module and then combining the appropriate modules within a standard software infrastructure to produce a customized system <ref> [7] </ref>. 2 The Membership Problem Our system model consists of multiple sites connected by an asynchronous network. The sites are assumed to experience only crash failures in which a site either operates correctly or not at all.
Reference: [8] <author> M. Hiltunen and R. Schlichting. </author> <title> Understanding membership. </title> <type> Tech. Rep., </type> <institution> Dept. of Comp. Sci., Univ. of Arizona, </institution> <address> Tucson, AZ, </address> <year> 1994. </year> <note> In preparation. </note>
Reference-contexts: The sites are assumed to experience only crash failures in which a site either operates correctly or not at all. To simplify the presentation, we assume no network partitions oc-cur; an extended version of this paper considers the impact of partitions on membership services <ref> [8] </ref>. The membership problem given such a model involves maintaining information about the collection of sites involved in the computation at any given time. <p> A more thorough description of these properties, as well as those related to network partitions, can be found in <ref> [8] </ref>. 4.1 Accuracy versus Liveness A membership service is accurate if the failure of a site is only reported to the application if the site has actually failed, and the recovery (or startup) of a site is only reported if the site has actually recovered (or started up). <p> Using this approach, a large number of different membership services can be configured using the dependency graph shown in Figure 10. Adding different alternatives for handling network partitions, as done in <ref> [8] </ref>, expands this even further. 6 Conclusions Many membership services in the literature can be described in terms of these properties. For example, Consul [11] combines live detection, voted agreement (consensus), FIFO order of membership change messages, agreement on last message, and agreement on successors.
Reference: [9] <author> N. Hutchinson and L. Peterson. </author> <title> The x-kernel: An architecture for implementing network protocols. </title> <journal> IEEE Trans. on Softw. Eng., </journal> <volume> 17(1) </volume> <pages> 64-76, </pages> <month> Jan </month> <year> 1991. </year>
Reference-contexts: Research will also continue on a system that allows membership services to be implemented by configuring software modules realizing individual properties in a common software infrastructure. The current prototype runs on Mach-based DecStation 5000/240s and is based on extending the hierarchical model of the x-kernel <ref> [9] </ref> to support finer-grain composition.
Reference: [10] <author> H. Kopetz, G. Grunsteidl, and J. Reisinger. </author> <title> Fault-tolerant membership service in a synchronous distributed real-time system. </title> <editor> In A. Avizienis and J.C. Laprie, editors, </editor> <booktitle> Dependable Computing for Critical Applications, </booktitle> <pages> pp. 411-429, </pages> <year> 1991. </year>
Reference-contexts: Membership services and protocols have been extensively studied, both for synchronous systems where bounds are placed on network transmission time (e.g., <ref> [5, 10] </ref>), and for asynchronous system where no such assumption is made (e.g., [2, 11, 15, 16]). The properties enforced by the protocols also vary, ranging from ones that offer very weak properties [14] to others such as Isis that guarantee strong properties [3].
Reference: [11] <author> S. Mishra, L. Peterson, and R. Schlichting. </author> <title> Consul: A communication substrate for fault-tolerant distributed programs. </title> <journal> Dist. Sys. Eng., </journal> <volume> 1 </volume> <pages> 87-103, </pages> <year> 1993. </year>
Reference-contexts: Membership services and protocols have been extensively studied, both for synchronous systems where bounds are placed on network transmission time (e.g., [5, 10]), and for asynchronous system where no such assumption is made (e.g., <ref> [2, 11, 15, 16] </ref>). The properties enforced by the protocols also vary, ranging from ones that offer very weak properties [14] to others such as Isis that guarantee strong properties [3]. <p> An example of an accurate service that is not live is that of Mach, where the failed site notifies others about its own failure upon recovery [12]. However, most membership services for asynchronous systems have chosen to be live but not accurate, for example, Isis [3] and Consul <ref> [11] </ref>. The lack of accuracy in such systems comes from the use of timeouts to suspect the failure of a site, a technique that may trigger false suspicions. <p> The execution cost of the different variants can differ significantly. An example of membership services that provide Simple Agreement is Totem [2] and an example of membership services that provide Voted Agreement is Consul <ref> [11] </ref>. For the following properties, we assume that the agreement property is guaranteed. 4.3 FIFO Ordering of Membership Mes sages The FIFO ordering property requires that agreed membership changes concerning any given single site be delivered to the application at every site in the same order. <p> Adding different alternatives for handling network partitions, as done in [8], expands this even further. 6 Conclusions Many membership services in the literature can be described in terms of these properties. For example, Consul <ref> [11] </ref> combines live detection, voted agreement (consensus), FIFO order of membership change messages, agreement on last message, and agreement on successors. Totem [2], on the other hand, combines live detection, simple agreement, FIFO order of membership change messages and extended virtual synchrony.
Reference: [12] <author> H. Orman, E. Menze, S. O'Malley, and L. Peterson. </author> <title> A fast and general implementation of Mach IPC in a network. </title> <booktitle> In 3rd Usenix Mach Conf., </booktitle> <pages> pp. 75-88, </pages> <month> Apr </month> <year> 1993. </year>
Reference-contexts: In an asynchronous system, a service can be either accurate or live, but not both [4]. An example of an accurate service that is not live is that of Mach, where the failed site notifies others about its own failure upon recovery <ref> [12] </ref>. However, most membership services for asynchronous systems have chosen to be live but not accurate, for example, Isis [3] and Consul [11]. The lack of accuracy in such systems comes from the use of timeouts to suspect the failure of a site, a technique that may trigger false suspicions.
Reference: [13] <author> L. Peterson, N. Buchholz, and R. Schlichting. </author> <title> Preserving and using context information in interpro-cess communication. </title> <journal> ACM Trans. on Comp. Sys., </journal> <volume> 7(3) </volume> <pages> 217-246, </pages> <month> Aug </month> <year> 1989. </year>
Reference-contexts: Figure 2 illustrates the notation used for ordering graphs in the following sections. Finally, note that the concept of a graph of mes sages is very appealing as an implementation tool as well. For example, this technique is closely related to the causality graphs used in Psync <ref> [13] </ref> and Tran-sis [1], which capture the causal ordering relationship between messages. 4 Properties In the following, we examine different properties enforced by membership protocols. <p> CU T and (succ (M (C)) 2 N (O A )) = (succ (M (C)) 2 N (O B )) Among other things, this property is useful for determining message stability, where a message is stable at the sending site once it has been acknowledged by every other operational site <ref> [13] </ref>. If m is an agreed successor of R (C), every site will know that m will have to be acknowledged by site C in order for it to be stable.
Reference: [14] <author> R. Rajkumar, S. Fakhouri, and F. Jahanian. </author> <title> Processor group membership protocols: Specification, </title> <booktitle> design, and implementation. In 12th Symp. on Reliable Dist. Sys., </booktitle> <pages> pp. 2-11, </pages> <month> Oct </month> <year> 1993. </year>
Reference-contexts: The properties enforced by the protocols also vary, ranging from ones that offer very weak properties <ref> [14] </ref> to others such as Isis that guarantee strong properties [3]. As might be expected, the semantics of the application has a strong influence on the type of membership protocol needed: some require strong properties, while others will execute correctly with something weaker. <p> Agreement is a basic and important property of membership services, so with the exception of certain weak protocols such as <ref> [14] </ref>, most membership services guarantee agreement. Although there is only one definition of agreement in terms of ordering graphs, there are a number of different variants based on how agreement is reached.
Reference: [15] <author> A. Ricciardi and K. Birman. </author> <title> Using process groups to implement failure detection in asynchronous environments. </title> <booktitle> In 10th ACM Symp. on Prin. of Dist. Comp., </booktitle> <pages> pp. 341-353, </pages> <month> Aug </month> <year> 1991. </year>
Reference-contexts: Membership services and protocols have been extensively studied, both for synchronous systems where bounds are placed on network transmission time (e.g., [5, 10]), and for asynchronous system where no such assumption is made (e.g., <ref> [2, 11, 15, 16] </ref>). The properties enforced by the protocols also vary, ranging from ones that offer very weak properties [14] to others such as Isis that guarantee strong properties [3].
Reference: [16] <author> A. Schiper and A. Ricciardi. </author> <title> Virtually-synchronous communication based on a weak failure suspector. </title> <booktitle> In 23rd FTCS, </booktitle> <pages> pp. 534-543, </pages> <month> Jun </month> <year> 1993. </year>
Reference-contexts: Membership services and protocols have been extensively studied, both for synchronous systems where bounds are placed on network transmission time (e.g., [5, 10]), and for asynchronous system where no such assumption is made (e.g., <ref> [2, 11, 15, 16] </ref>). The properties enforced by the protocols also vary, ranging from ones that offer very weak properties [14] to others such as Isis that guarantee strong properties [3]. <p> For example, Consul [11] combines live detection, voted agreement (consensus), FIFO order of membership change messages, agreement on last message, and agreement on successors. Totem [2], on the other hand, combines live detection, simple agreement, FIFO order of membership change messages and extended virtual synchrony. With the exception of <ref> [16] </ref>, however, membership papers concentrate on describing the properties of a particular algorithm or system, rather than providing a more global view. [16] gives a decomposition of membership services into three components: Failure Suspector, Multicast Component, and View Component. <p> Totem [2], on the other hand, combines live detection, simple agreement, FIFO order of membership change messages and extended virtual synchrony. With the exception of <ref> [16] </ref>, however, membership papers concentrate on describing the properties of a particular algorithm or system, rather than providing a more global view. [16] gives a decomposition of membership services into three components: Failure Suspector, Multicast Component, and View Component. However, our classification is more extensive and addresses other issues such as configuring different membership services from the constituent properties.
References-found: 16

