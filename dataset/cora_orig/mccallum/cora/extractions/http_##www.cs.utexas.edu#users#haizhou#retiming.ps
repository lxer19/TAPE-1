URL: http://www.cs.utexas.edu/users/haizhou/retiming.ps
Refering-URL: http://www.cs.utexas.edu/users/haizhou/publications.html
Root-URL: 
Email: haizhou@cs.utexas.edu vigyan@cadence.com adnan@ece.utexas.edu  
Title: How Powerful is Retiming?  
Author: Hai Zhou Vigyan Singhal Adnan Aziz 
Abstract: This paper is about exploring the power of retiming and resynthesis. We show that there exists a pair of "sequentially equivalent" designs so that one cannot be obtained from another by a sequence of retiming and resynthesis operations; the notion of sequential equivalence itself is predicated on whether or not the designs are associated with designated initial states. Categorizing the power of retiming and resynthesis operations is closely related to the problem of verifying sequential equivalence. We show the complexity results for the sequential verification problem. However, our primary goal, namely determining sharp bounds on the power of retiming and resynthesis, and determining the complexity of the associated verification problem remains open, and we would like to present that as a challenge to the community. 
Abstract-found: 1
Intro-found: 1
Reference: [ASB93] <author> A. Aziz, V. Singhal, and R. K. Brayton. </author> <title> Verifying Interacting Finite State Machines. </title> <type> Technical Report UCB/ERL M93/52, </type> <institution> Electronics Research Lab, Univ. of California, Berkeley, </institution> <address> CA 94720, </address> <month> July </month> <year> 1993. </year>
Reference-contexts: complexity of this problem is PSPACE-complete: Theorem 3 (<ref> [ASB93] </ref>) Given two netlists C and D, and two states s from M C , t from M D , checking whether s and t are equivalent is PSPACE-complete in the size of the netlists. 6 A complete proof is given in [ASB93]; the idea is to use the "generic Turing machine reduction" [GJ79]: the halting problem for a PSPACE bounded Turing machine can be modeled using a set of linearly connected FSMs, one for each tape square used, which mimic the tape contents, the finite state control, and the head location. 4
Reference: [CHS91] <author> H. Cho, G. D. Hachtel, and F. Somenzi. </author> <title> Redundancy Identification and Removal Based on Implicit State Enumeration. </title> <booktitle> In Proc. Intl. Conf. on Computer Design, </booktitle> <pages> pages 77-80, </pages> <address> Cambridge, MA, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: Notice that in order to make 1-step equivalent transformations, a sequential optimization tool needs exactly one step of reachability information. This is much cheaper than doing more general sequential optimizations, e.g. extracting the set of equivalent state pairs and using them as don't cares <ref> [LTN90, CHS91] </ref>, extracting the set of unreachable states from an initial state and using them as don't cares [LTN90].
Reference: [DeM91] <author> G. DeMicheli. </author> <title> Synchronous Logic Synthesis: Algorithms for Cycle-Time Minimization. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 10(1) </volume> <pages> 63-73, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: This is the basis for the retiming and resynthesis (RnR) paradigm proposed in <ref> [DeM91, MSBSV91] </ref>. An example of a design transformation using this RnR paradigm is shown in Figure 2.
Reference: [ESS96] <author> G. Even, I. Y. Spillinger, and L. Stok. </author> <title> Retiming Revisited and Reversed. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 15(3) </volume> <pages> 348-357, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: If we do want to force a circuits into a designated initial state we can explicitly model the reset circuitry along with the latches: indeed, this is the approach suggested for retiming initial states in [SMB96], as opposed to the approach in <ref> [TB93, ESS96] </ref>, where the implicit initial state values have to be retimed across gates.
Reference: [GJ79] <author> M. R. Garey and D. S. Johnson. </author> <title> Computers and Intractability. </title> <editor> W. H. </editor> <publisher> Freeman and Co., </publisher> <year> 1979. </year>
Reference-contexts: netlists C and D, and two states s from M C , t from M D , checking whether s and t are equivalent is PSPACE-complete in the size of the netlists. 6 A complete proof is given in [ASB93]; the idea is to use the "generic Turing machine reduction" <ref> [GJ79] </ref>: the halting problem for a PSPACE bounded Turing machine can be modeled using a set of linearly connected FSMs, one for each tape square used, which mimic the tape contents, the finite state control, and the head location. 4 RnR equivalence vs steady-state equivalence The big question we are interested <p> This also means that s must be equivalent to t, that is, any input sequence can only lead (D; s) to 0. 11 Notice we actually prove FSM-equivalent is coPSPACE-complete, but coPSPACE is equal to PSPACE <ref> [GJ79] </ref>. <p> is PSPACE-complete. 5.2 Checking RnR equivalence is probably in NP coNP We have strong reason to believe that RnR equivalence checking problem is in NP coNP (the complexity class NP coNP , also known an p 2 , lies strictly between P [ NP and PSPACE in the polynomial hierarchy <ref> [GJ79] </ref>), thus indicating that RnR does not yield the entire space of steady-state-equivalent transformations (since verification for steady-state equivalence is PSPACE-complete, by Theorem 10) 2 . However, we could not establish the complexity of RnR equivalence. <p> However, if the conjecture is true, we can show that RnR is in NP coNP by using the following two results: Theorem 12 Combinational equivalence checking is in coNP. Proof: Follows from transforming tautology checking to combinational equivalence (the classic miter construction), and that tautology checking is coNP-complete <ref> [GJ79] </ref>. Theorem 13 Retiming verification is in coNP. Proof: Verifying whether a circuit is a legal transformation of another can be done in two sub-steps [SSBSV92]: * Verifying directed graph isomorphism. * Verifying that there is a consistent assignment of lags to each gate in the circuit. <p> Proof: Verifying whether a circuit is a legal transformation of another can be done in two sub-steps [SSBSV92]: * Verifying directed graph isomorphism. * Verifying that there is a consistent assignment of lags to each gate in the circuit. Directed graph isomorphism is in coNP <ref> [GJ79] </ref>, and Shenoy et al. [SSBSV92] show a polynomial algorithm for the second step. Conjecture 14 RnR equivalence is in NP coNP . Proof: If two circuits C and D are RnR equivalent, there exists a polynomial RnR transformation (Conjecture 11).
Reference: [LS83] <author> C. E. Leiserson and J. B. Saxe. </author> <title> Optimizing Synchronous Systems. </title> <journal> Journal of VLSI and Computer Systems, </journal> <volume> 1(1) </volume> <pages> 41-67, </pages> <month> Spring </month> <year> 1983. </year>
Reference: [LTN90] <author> B. Lin, H. J. Touati, and A. R. </author> <title> Newton. Don't Care Minimization of Multi-level Sequential Logic Networks. </title> <booktitle> In Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 414-417, </pages> <month> November </month> <year> 1990. </year>
Reference-contexts: However, it is easy to show that for designs which have designated initial state, RnR is strictly weaker than a sequential optimization algorithm which uses unreachability don't cares (for example, <ref> [LTN90] </ref>). Consider circuits C and D in Figure 3 with 00 as the designated initial state for both C and D. Clearly the two circuits C and D are equivalent from the initial state 00. <p> Notice that in order to make 1-step equivalent transformations, a sequential optimization tool needs exactly one step of reachability information. This is much cheaper than doing more general sequential optimizations, e.g. extracting the set of equivalent state pairs and using them as don't cares <ref> [LTN90, CHS91] </ref>, extracting the set of unreachable states from an initial state and using them as don't cares [LTN90]. <p> This is much cheaper than doing more general sequential optimizations, e.g. extracting the set of equivalent state pairs and using them as don't cares [LTN90, CHS91], extracting the set of unreachable states from an initial state and using them as don't cares <ref> [LTN90] </ref>. In hindsight, it may not be so surprising, that the power of RnR transformations has only been shown to be equivalent to 1-step equivalent transformations which are optimizations based on local information (1-step equivalence).
Reference: [LVW97] <author> C. Legl, P. Vanbekbergen, and A. Wang. </author> <title> Retiming of Edge-Triggerred Circuits with Multiple Clocks and Load Enables. </title> <booktitle> In Workshop Notes of Intl. Workshop on Logic Synthesis, </booktitle> <month> May </month> <year> 1997. </year>
Reference-contexts: Notice that if we consider input s as a load-enable, the three latches might be seen as modeling load-enable latches. This particular circuit transformation is very important because it shows retim-ing of load-enable latches <ref> [LVW97] </ref> can be obtained by simple RnR transformations; on the other 9 hand, Legl et al. [LVW97] enhance their set of transformations by directly retiming load enable latches. 4.3 RnR with sweep Actually, the two circuits in our first example (in Section 4.1) are related by a more general sequence of <p> This particular circuit transformation is very important because it shows retim-ing of load-enable latches <ref> [LVW97] </ref> can be obtained by simple RnR transformations; on the other 9 hand, Legl et al. [LVW97] enhance their set of transformations by directly retiming load enable latches. 4.3 RnR with sweep Actually, the two circuits in our first example (in Section 4.1) are related by a more general sequence of transformations (this has been shown by Somenzi [Som97] and also appears in [Ran97]).
Reference: [Mal90] <author> Sharad Malik. </author> <title> Combinational Logic Optimization Techniques in Sequential Logic Synthesis. </title> <type> PhD thesis, </type> <institution> University of California Berkeley, Electronics Research Laboratory, College of Engineering, University of California, Berkeley, </institution> <address> CA 94720, </address> <month> November </month> <year> 1990. </year> <note> Memorandum No. UCB/ERL M90/115. </note>
Reference-contexts: The first attempt to answer this question was made by Malik <ref> [Mal90] </ref> via the following result which relates designs with different state encoding: Theorem 5 ([Mal90]) If two circuits have the same symbolic FSM, then one circuit can be obtained from another by an RnR sequence.
Reference: [Mic94] <author> Giovanni De Micheli. </author> <title> Synthesis and Optimization of Digital Circuits. </title> <publisher> McGraw Hill, </publisher> <year> 1994. </year> <month> 14 </month>
Reference: [MSBSV91] <author> S. Malik, E. M. Sentovich, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> Retiming and Resynthesis: Optimization of Sequential Networks with Combinational Techniques. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 10(1) </volume> <pages> 74-84, </pages> <month> January </month> <year> 1991. </year>
Reference-contexts: This is the basis for the retiming and resynthesis (RnR) paradigm proposed in <ref> [DeM91, MSBSV91] </ref>. An example of a design transformation using this RnR paradigm is shown in Figure 2.
Reference: [Ran97] <author> Rajeev K. Ranjan. </author> <title> Design and Implementation Verification of Finite State Systems. </title> <type> PhD thesis, </type> <institution> Electronics Research Laboratory, University of California, Berkeley, </institution> <address> CA 94720, </address> <year> 1997. </year> <note> Memorandum No. UCB/ERL M97/99. </note>
Reference-contexts: However, there is a bug in his result. The corrected result is provided by Ranjan <ref> [Ran97] </ref>; it needs the two following definitions: Definition 6 States s and t are 1-step equivalent if and only if, for any input x, the next states ffi (s; x) and ffi (t; x) are identical. <p> Legl et al. [LVW97] enhance their set of transformations by directly retiming load enable latches. 4.3 RnR with sweep Actually, the two circuits in our first example (in Section 4.1) are related by a more general sequence of transformations (this has been shown by Somenzi [Som97] and also appears in <ref> [Ran97] </ref>). The new transformation we need is sweep: this allows removing circuitry which does not reach any primary output (notice that sweep is a not a combinational synthesis step since it can also remove latches from a circuit).
Reference: [SK97] <author> D. Stoffel and W. Kunz. </author> <title> Record and Play: a Structural Fixed Point Iteration for Sequential Circuit Verification. </title> <booktitle> In Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 394-399, </pages> <year> 1997. </year>
Reference-contexts: The verification question has important practical repercussions. For example, if it is easier to decide retiming and resynthesis equivalence, we may obtain more efficient solutions for equivalence checking when it is known that retiming is only permitted sequential transformation. Indeed, the recent sequential equivalence checking algorithms <ref> [SK97, vE98] </ref> effectively try to show that two circuits are equivalent by deriving the retiming relationships between the circuits.
Reference: [SMB96] <author> V. Singhal, S. Malik, and R. K. Brayton. </author> <title> The Case for Retiming with Explicit Reset Circuitry. </title> <booktitle> In Proc. Intl. Conf. on Computer-Aided Design, </booktitle> <pages> pages 618-625, </pages> <month> November </month> <year> 1996. </year>
Reference-contexts: If we do want to force a circuits into a designated initial state we can explicitly model the reset circuitry along with the latches: indeed, this is the approach suggested for retiming initial states in <ref> [SMB96] </ref>, as opposed to the approach in [TB93, ESS96], where the implicit initial state values have to be retimed across gates.
Reference: [Som97] <author> Fabio Somenzi. </author> <type> Personal communication, </type> <year> 1997. </year>
Reference-contexts: on the other 9 hand, Legl et al. [LVW97] enhance their set of transformations by directly retiming load enable latches. 4.3 RnR with sweep Actually, the two circuits in our first example (in Section 4.1) are related by a more general sequence of transformations (this has been shown by Somenzi <ref> [Som97] </ref> and also appears in [Ran97]). The new transformation we need is sweep: this allows removing circuitry which does not reach any primary output (notice that sweep is a not a combinational synthesis step since it can also remove latches from a circuit).
Reference: [SPRB95] <author> V. Singhal, C. Pixley, R. L. Rudell, and R. K. Brayton. </author> <title> The Validity of Retiming Sequential Circuits. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <pages> pages 316-321, </pages> <address> San Francisco, CA, </address> <month> June </month> <year> 1995. </year>
Reference-contexts: The remaining set of states is called the transient state set. 1 In order to avoid ambiguity, every "stem" (i.e., multi-fanout junction) is replaced by a buffer; see <ref> [SPRB95] </ref> for details. 4 5 For example, the steady state set for the design in Figure 1 is f00; 01; 10g and the transient state set is f11g.
Reference: [SSBSV92] <author> N. Shenoy, K. J. Singh, R. K. Brayton, and A. L. Sangiovanni-Vincentelli. </author> <title> On the Temporal Equivalence of Sequential Circuits. </title> <booktitle> In Proc. of the Design Automation Conf., </booktitle> <pages> pages 405-409, </pages> <address> Anaheim, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: Proof: Follows from transforming tautology checking to combinational equivalence (the classic miter construction), and that tautology checking is coNP-complete [GJ79]. Theorem 13 Retiming verification is in coNP. Proof: Verifying whether a circuit is a legal transformation of another can be done in two sub-steps <ref> [SSBSV92] </ref>: * Verifying directed graph isomorphism. * Verifying that there is a consistent assignment of lags to each gate in the circuit. Directed graph isomorphism is in coNP [GJ79], and Shenoy et al. [SSBSV92] show a polynomial algorithm for the second step. <p> Proof: Verifying whether a circuit is a legal transformation of another can be done in two sub-steps <ref> [SSBSV92] </ref>: * Verifying directed graph isomorphism. * Verifying that there is a consistent assignment of lags to each gate in the circuit. Directed graph isomorphism is in coNP [GJ79], and Shenoy et al. [SSBSV92] show a polynomial algorithm for the second step. Conjecture 14 RnR equivalence is in NP coNP . Proof: If two circuits C and D are RnR equivalent, there exists a polynomial RnR transformation (Conjecture 11).
Reference: [TB93] <author> H. J. Touati and R. K. Brayton. </author> <title> Computing the Initial States of Retimed Circuits. </title> <journal> IEEE Transactions on Computer-Aided Design of Integrated Circuits, </journal> <volume> 12(1) </volume> <pages> 157-162, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: If we do want to force a circuits into a designated initial state we can explicitly model the reset circuitry along with the latches: indeed, this is the approach suggested for retiming initial states in [SMB96], as opposed to the approach in <ref> [TB93, ESS96] </ref>, where the implicit initial state values have to be retimed across gates.
Reference: [vE98] <author> C. A. J. van Eijk. </author> <title> Sequential Equivalence Checking without State Space Traversal . In Proc. DATE: </title> <booktitle> Design Automation and Test in Europe, </booktitle> <pages> pages 618-623, </pages> <address> Paris, France, </address> <year> 1998. </year> <month> 15 </month>
Reference-contexts: The verification question has important practical repercussions. For example, if it is easier to decide retiming and resynthesis equivalence, we may obtain more efficient solutions for equivalence checking when it is known that retiming is only permitted sequential transformation. Indeed, the recent sequential equivalence checking algorithms <ref> [SK97, vE98] </ref> effectively try to show that two circuits are equivalent by deriving the retiming relationships between the circuits.
References-found: 19

