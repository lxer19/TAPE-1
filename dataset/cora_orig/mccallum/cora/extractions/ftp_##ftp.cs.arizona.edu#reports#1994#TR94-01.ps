URL: ftp://ftp.cs.arizona.edu/reports/1994/TR94-01.ps
Refering-URL: http://www.cs.arizona.edu/research/reports.html
Root-URL: http://www.cs.arizona.edu
Title: Towards an Infrastructure for Temporal Databases  
Author: Pissinou, Richard T. Snodgrass, Ramez Elmasri, Inderpal S. Mumick, M. Tamer Ozsu, Barbara Pernici, Arie Segev, Babis Theodoulidis and Umeshwar Dayal 
Date: March 1, 1994  
Note: Niki  
Pubnum: TR 94-01  
Abstract: Report of an Invitational ARPA/NSF Workshop 
Abstract-found: 1
Intro-found: 1
Reference: [Ahn93] <author> I. Ahn. SQL+T: </author> <title> a Temporal Query Language. </title> <booktitle> In Proceedings of the International Workshop on an Infrastructure for Temporal Databases, </booktitle> <address> Arlington, TX, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Temporal variations of the joins are defined using intersection semantics, and several new time-oriented operations are introduced. * The Structured Query Language plus Time (SQL+T) is based on the tuple-timestamped model, where each tuple is associated with four timestamps, to valid time and to transaction time <ref> [Ahn93] </ref>. It augments SQL with valid, when, and as of clauses. * TempSQL is based on an attribute timestamped, homogeneous data model, where temporal elements are used as the timestamps [Gad92].
Reference: [All83] <author> J.F. Allen. </author> <title> Maintaining Knowledge about Temporal Intervals. </title> <journal> CACM, </journal> <volume> 26(11) </volume> <pages> 832-843, </pages> <month> Novem-ber </month> <year> 1983. </year>
Reference-contexts: The issue of which set of formal operations to use in representing and optimizing temporal queries was not resolved. There were two main points of view. The first was that we should extend the standard relational algebra operations with the interval algebra <ref> [All83] </ref> so that we can proceed with prototype implementations and analysis of various optimization methods, indexing techniques, and execution algorithms.
Reference: [AMC93] <author> E. Anwar, L. Maugis, and S. Chakravarthy. </author> <title> A New Perspective on Rule Support for Object-Oriented Databases. </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 99-108, </pages> <year> 1993. </year>
Reference: [Ariav93] <author> G. Ariav. </author> <title> Tools for managing temporally oriented data: are they really prectically relevant? In Proceedings of the International Workshop on an Infrastructure for Temporal Databases, </title> <address> Arlington, TX, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Ariav started the discussion with a presentation based on a set of problems from case studies illustrated in his position paper at the workshop <ref> [Ariav93] </ref>. Other application domains were also considered, specifically geographical information systems (GIS), scientific applications, and planning and scheduling applications. The group isolated two needs not met in current TDBMS proposals. 1. Multiple time lines Traditionally, only one time line has been associated to a given entity, termed valid time.
Reference: [AS86] <author> I. Ahn and R. Snodgrass. </author> <title> Performance Evaluation of a Temporal Database Management System. </title> <booktitle> In Proceedings of the SIGMOD International Conference, </booktitle> <address> Washington, DC, </address> <pages> pp. 96-107, </pages> <month> May </month> <year> 1986. </year>
Reference-contexts: These benchmarks would be used to compare proposed indexing and storage structures for temporal databases. 5.2 Current Status of the Field Only a few generalized temporal database management systems have been implemented. The TQuel prototype <ref> [AS86] </ref> is perhaps the best known. However, because many applications of databases are inherently temporal, there have been countless implementations of ad-hoc temporal databases that either utilize existing commercial DBMSs or that build temporal databases over file systems.
Reference: [BB93] <author> A.P. Buchmann, H. Branding. </author> <title> On Combining Temporal and Real-Time Databases. </title> <booktitle> In Proceedings of the International Workshop on an Infrastructure for Temporal Databases, </booktitle> <address> Arlington, TX, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Work on integrating temporal and active database features has started appearing in the literature only recently. Examples of such works include [CK93, EGS92, EGS93a, DG93, GJMS93]. Some related issues have also been discussed in the context of real-time databases <ref> [BB93, Rama93a] </ref>. 4.3 Next Generation Temporal Data Modeling Concepts The purpose of this discussion was to identify the key concepts of the next generation of temporal data models and languages.
Reference: [BM91] <author> Catriel Beeri and Tova Milo. </author> <title> A model for active object oriented database. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Databases, </booktitle> <pages> pages 337-349, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference: [CC87] <author> J. Clifford and A. Croker. </author> <title> The historical relational data model (hrdm) and algebra based on lifespans. </title> <booktitle> In Proceedings of the International Conference on Data Engineering, </booktitle> <pages> pages 528-537, </pages> <address> Los Angeles, CA, </address> <month> Feb </month> <year> 1987. </year>
Reference-contexts: Tansel generalizes this model to nested (N1NF) relations and provides formal definitions of a temporal relational algebra and a temporal relational calculus which are shown to be equivalent [Tan91b]. Normal forms for nested temporal temporal relations have also been developed [TG89] * The Historical Relational Data Model <ref> [CC87] </ref>, a refinement of the model associated with a valid-time algebra (Clifford in [CT85], [Cli82]), is unique in that it associates timestamps with both individual tuples and with individual attribute values of the tuples. <p> We list a few examples, proposed by members of the working group. * The semantics of the algebra defined on the Historical Relational Data Model extends the relational operators union, difference, intersection, projection, and Cartesian product to handle lifespans directly <ref> [CC87] </ref>. Temporal variations of the joins are defined using intersection semantics, and several new time-oriented operations are introduced. * The Structured Query Language plus Time (SQL+T) is based on the tuple-timestamped model, where each tuple is associated with four timestamps, to valid time and to transaction time [Ahn93].
Reference: [CC88] <author> J. Clifford and A. Croker. </author> <title> "Objects in Time," </title> <journal> IEEE Database Engineering Bulletin, </journal> <volume> 11(4), </volume> <month> December </month> <year> 1988. </year>
Reference-contexts: One of the earliest attempts to introduce time into the object-oriented data model is reported in <ref> [CC88] </ref>, which proposed certain terminology and concepts.
Reference: [CCT93] <author> J. Clifford, A. Croker, and A. Tuzhilin. </author> <title> On completeness of historical relational query languages. </title> <type> Technical report STERN IS-93-8, </type> <institution> New York University Stern School of Business, </institution> <year> 1993. </year> <note> (to appear in TODS). </note>
Reference-contexts: Clifford, Croker and Tuzhilin present the calculus L h for a temporally grouped data model which they call M T G <ref> [CCT93] </ref>. The model M T G extends the traditional relational model by defining the domains of each attribute to be functions from a temporal domain into an ordinary domain, and thus each tuple contains the entire "history" of some real-world object. <p> The final issue discussed at length was that of ungrouped versus grouped completeness. These terms were presented by James Clifford at the workshop, based upon his previous research <ref> [CCT93] </ref>. In this work the authors attempt to contrast those models which employ tuple-time-stamping, which they term temporally ungrouped, and those which employ complex attribute values bearing the temporal dimension, which they term temporally grouped. <p> Snapshot equivalence provides one means of comparing 14 rather disparate representations. However, it can be demonstrated that a grouped relation can be snapshot equivalent to a large number of ungrouped relations, only one of which carries the same information content. Some argued that the notion of strong equivalence <ref> [CCT93] </ref>, somewhat (but not entirely) captured by the the term "history equivalence" in the glossary, provides a more appropriate means of comparing disparate representations. 3.6 Unresolved Issues Finally, there were a myriad of issues that were discussed briefly, or that were listed as important but not discussed. * Homogeneity|In some data
Reference: [CG93] <author> T.S. Cheng and S.K. Gadia. </author> <title> An Object-Oriented Model for Temporal Databases. </title> <booktitle> In Proceedings of the International Workshop on an Infrastructure for Temporal Databases, </booktitle> <address> Arlington, TX, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: object-oriented algebra [RS93a, RS92] and a temporal object-oriented SQL [RS93b]. * The OSAM*/T model model and its associated query language called OQL/T [SC91, SKL89], is based on notion of time-varying association. * The OODAPLEX model [DW92, WD93] accommodates temporal data modeling through the notion of function. * The OOTempDBM model <ref> [CG93] </ref> captures the temporal semantics of objects through type inheritance. * The [KRS90] extends a complex object model by adding transaction and valid times to tuples. * The TIGUKAT [GO93] model incorporates time as an abstract type. TIGUKAT models everything in the system as a first-class object.
Reference: [Cha92] <author> S. Chakravarthy. </author> <title> Architectures and monitoring techniques for active databases: An evaluation. </title> <journal> UF-CIS TR-92-041. </journal> <note> (Submitted to Applied Data and Knowledge Engineering Journal). </note>
Reference: [Chen76] <author> P.P.-C. Chen. </author> <title> The Entity-Relationship Model-Toward a Unified View of Data. </title> <journal> ACM TODS 1(1) </journal> <pages> 9-36, </pages> <month> March </month> <year> 1976. </year>
Reference-contexts: to be carried out in order to complete the infrastructure for the next generation of temporal databases. 16 4.2 Current Status of the Field 4.2.1 Temporal Object Based Modeling The two most prominent models that provided the basis for the development of temporal conceptual models are the entity-relationship (ER) model <ref> [Chen76] </ref> and the object based model. The ER model deals with the structural component and is founded on the notions of entity and relationship. The object model deals with both the structural and behavioral components and is founded on the notions of object, structure and behavior (method).
Reference: [Chom92] <author> Jan Chomicki. </author> <booktitle> Real-Time Integrity Constraints In Proceedings of the Eleventh Symposium on Principles of Database Systems, </booktitle> <pages> pp. 274-281, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: A composite event occurs at a time instant, as specified by the closed algebra in terms of the time instants of component basic events. 2 Several algebras for composite events have been proposed, e.g., Snoop [CM93], SAMOS [DG93], <ref> [Chom92] </ref>, and ODE [GJS92b, GJS92a, JMS92, GJMS93]. We permit simple conditions, such as X &gt; 10 on attribute X of an event, or a boolean predicate on attributes of events, to be included in the algebra for composite events. <p> Composite events thus represent simple forms of temporal queries, and can provide simple temporal features. Active rules using such event algebras must therefore be considered to be temporal rules. The composite algebras can be used in non-temporal databases, provided mechanisms to recognize these event patterns are provided <ref> [CM93, DG93, Chom92, GJS92a, JMS92] </ref>. While we will not discuss any particular algebra in this paper, we will illustrate their relationship to temporal databases through a representative syntax. EXAMPLE 4.1 Consider an inventory database in a store.
Reference: [CK93] <author> S. Chakravarthy and S.K. Kim. </author> <title> Semantics of Time-Varying Information and Resolution of Time Concepts in Temporal Databases. </title> <booktitle> In Proceedings of the International Workshop on an Infrastructure for Temporal Databases, </booktitle> <address> Arlington, Tx, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: The working group addressed this new aspect of temporal rules in addition to defining rule structure for active databases. Work on integrating temporal and active database features has started appearing in the literature only recently. Examples of such works include <ref> [CK93, EGS92, EGS93a, DG93, GJMS93] </ref>. Some related issues have also been discussed in the context of real-time databases [BB93, Rama93a]. 4.3 Next Generation Temporal Data Modeling Concepts The purpose of this discussion was to identify the key concepts of the next generation of temporal data models and languages.
Reference: [Cli82] <author> J. Clifford. </author> <title> A model for historical databases. </title> <booktitle> In Proceedings of Workshop on Logical Bases for Data Bases, </booktitle> <address> Toulouse, France, </address> <month> December </month> <year> 1982. </year> <month> 47 </month>
Reference-contexts: A boolean attribute, EXISTS, is also added to indicate whether the particular tuple exists for that state <ref> [Cli82, CW83] </ref>. Hence, this model timestamps tuples with valid-time events. * The Temporal Relational Model [LJ88, Lor88] was the first to support nested specification of timestamps using values of different granularity and to support periodic events. This model associates timestamps with individual attribute values rather than with tuples. <p> Normal forms for nested temporal temporal relations have also been developed [TG89] * The Historical Relational Data Model [CC87], a refinement of the model associated with a valid-time algebra (Clifford in [CT85], <ref> [Cli82] </ref>), is unique in that it associates timestamps with both individual tuples and with individual attribute values of the tuples.
Reference: [CM93] <author> S. Chakravarthy and D. Mishra. Snoop: </author> <title> An expressive event specification language for active databases. </title> <institution> UF-CIS-TR-93-007, University of Florida, </institution> <month> March </month> <year> 1993. </year> <note> (Revised and extended version of UF-CIS-TR-91-23). </note>
Reference-contexts: A composite event occurs at a time instant, as specified by the closed algebra in terms of the time instants of component basic events. 2 Several algebras for composite events have been proposed, e.g., Snoop <ref> [CM93] </ref>, SAMOS [DG93], [Chom92], and ODE [GJS92b, GJS92a, JMS92, GJMS93]. We permit simple conditions, such as X &gt; 10 on attribute X of an event, or a boolean predicate on attributes of events, to be included in the algebra for composite events. <p> Composite events thus represent simple forms of temporal queries, and can provide simple temporal features. Active rules using such event algebras must therefore be considered to be temporal rules. The composite algebras can be used in non-temporal databases, provided mechanisms to recognize these event patterns are provided <ref> [CM93, DG93, Chom92, GJS92a, JMS92] </ref>. While we will not discuss any particular algebra in this paper, we will illustrate their relationship to temporal databases through a representative syntax. EXAMPLE 4.1 Consider an inventory database in a store.
Reference: [CODD79] <author> E.F. Codd. </author> <title> Extending the Database Relational Model to Capture More Meaning. </title> <journal> ACM TODS, </journal> <volume> 4 </volume> <pages> 397-434, </pages> <year> 1979. </year>
Reference-contexts: The Conceptual Mod-elling Language (CML) which is based on the TAXIS model [GBM83] includes time as a primitive notion. 17 Other semantic data models that have addressed the introduction of time include the RM/T <ref> [CODD79] </ref>, which is an extension of the traditional relational model to handle among others sequencing of events, and the Functional Data Model [SHI81]. One of the earliest attempts to introduce time into the object-oriented data model is reported in [CC88], which proposed certain terminology and concepts.
Reference: [CS93] <author> R. Chandra and A. Segev. </author> <title> Managing Temporal Financial Data in an Extensible Database. </title> <booktitle> In Proceedings of the 19th Int. Conf. on Very Large Databases, </booktitle> <address> Dublin, Ireland, </address> <month> September, </month> <year> 1993. </year>
Reference-contexts: In many business applications, there is a need to reference times which are not standard Gregorian dates, e.g. "business days" or "trading days". Several proposals have been introduced recently of a database support for different calendric systems <ref> [SSD92, CS93, CSS93] </ref>. In the context of this position paper, a calendar is a semantic collection of time interval possibly with a cyclical structures. Calendars can be operated upon via an algebra (calendar expressions) and the result is also a calendar.
Reference: [CSS93] <author> R. Chandra, A. Segev, and M. Stonebraker. </author> <title> Implementing Calendars and Temporal Rules in Next-Generation Databases. </title> <type> Technical Report LBL-34229, </type> <institution> Lawrence Berkeley Laboratory, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: In many business applications, there is a need to reference times which are not standard Gregorian dates, e.g. "business days" or "trading days". Several proposals have been introduced recently of a database support for different calendric systems <ref> [SSD92, CS93, CSS93] </ref>. In the context of this position paper, a calendar is a semantic collection of time interval possibly with a cyclical structures. Calendars can be operated upon via an algebra (calendar expressions) and the result is also a calendar. <p> The collection of those Fridays is also a calendar. There is one base calendar (e.g., the Unix time system) to which all other defined calendars are mapped. It should be noted that such an algebra is more powerful than functions (such as DATE functions). We use Chandra's calendar algebra <ref> [CSS93] </ref> to illustrate the idea (a different language could be used). Assume that the calendars WEEKS, DAYS, Expiration Month, and AM BUS DAYS (American Business Days) were already defined. <p> If such an algebra is used it has to be part of the event composition algebra mentioned before. Incorporating such calendars expressions into rules require the design of parsers for such scripts that create an efficient evaluation plan. Chandra also describes the implementation of such temporal rules in POSTGRES <ref> [CSS93] </ref>. 4.5.2 Temporal Rules in Temporal Databases From the definition of temporal rules, it follows that an active rule in a temporal database is nontemporal if the event is basic and the condition contains a non-temporal query that could be expressed in a non-temporal query language.
Reference: [CT85] <author> J. Clifford and A.U. Tansel. </author> <title> On an algebra for historical relational databases: Two views. </title> <booktitle> In Proceedings of the International Conference on Management of Data, </booktitle> <pages> pages 247-265, </pages> <address> Austin, TX, </address> <month> May </month> <year> 1985. </year>
Reference-contexts: each relation: the transaction time of the transaction inserting the tuple, the transaction time of the transaction logically deleting the tuple, the time that the tuple started being valid in reality, and the time that the tuple stopped being valid in reality [Sno87, SGM93]. * Tansel's model ([Tan86], Tansel in <ref> [CT85] </ref>) was designed to support the calculus-based query language HQuel [TA86] and, later, the Time-by-Example language [TAO89]. The model allows only one type of object: the valid-time relation. However, four types of attributes are supported: Attributes may be either non-time-varying or time-varying, and they may be either atomic-valued or set-valued. <p> Normal forms for nested temporal temporal relations have also been developed [TG89] * The Historical Relational Data Model [CC87], a refinement of the model associated with a valid-time algebra (Clifford in <ref> [CT85] </ref>, [Cli82]), is unique in that it associates timestamps with both individual tuples and with individual attribute values of the tuples. <p> A more recent proposal showed how history variables could be added to SQL [GST93]. * HQuel is based on an attributed time-stamped valid-time data model (Tansel in <ref> [CT85] </ref>, [TA86, TG89, Tan91a]). The data model has four different kinds of attributes: elementary (atomic), set-valued, triplet-valued, and set triplet-valued. The first two are non time-varying; the other two are time-varying attributes.
Reference: [CW83] <author> J. Clifford and D. S. Warren. </author> <title> Formal semantics for time in databases. </title> <journal> ACM TODS, </journal> <volume> 8(2) </volume> <pages> 214-254, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: A boolean attribute, EXISTS, is also added to indicate whether the particular tuple exists for that state <ref> [Cli82, CW83] </ref>. Hence, this model timestamps tuples with valid-time events. * The Temporal Relational Model [LJ88, Lor88] was the first to support nested specification of timestamps using values of different granularity and to support periodic events. This model associates timestamps with individual attribute values rather than with tuples.
Reference: [Dat88] <author> C.J. Date. </author> <title> A proposal for adding date and time support to sql. </title> <journal> ACM SIGMOD Record, </journal> <volume> 17(2) </volume> <pages> 53-76, </pages> <month> June </month> <year> 1988. </year>
Reference-contexts: Support for time in conventional data base systems (e.g., [TC83, OC87]) is entirely at the level of user-defined time (i.e., attribute values drawn from a temporal domain). These implementations 9 are limited in scope and are, in general, unsystematic in their design <ref> [Dat88, DW90] </ref>. The standards bodies (e.g., ANSI) are somewhat behind the curve, in that SQL includes no time support. Date and time support very similar to that in DB2 is included in the SQL-92 standard [MS93].
Reference: [DBB+88] <author> U. Dayal, B. Blaustein, A. Buchmann, U. Chakravarthy, M. Hsu, R. Ladin, D.R. McCarthy, A. Rosenthal, S. Sarin, M.J. Carey, M. Livny, and R. Jauhari. </author> <title> The HIPAC project: Combining active databases and timing constraints. </title> <journal> ACM SIGMOD Record, </journal> <volume> 17(1) </volume> <pages> 51-70, </pages> <month> March </month> <year> 1988. </year>
Reference: [DG93] <author> K.R. Dittrich and S. Gatziu. </author> <title> Time Issues in Active Database Systems. </title> <booktitle> In Proceedings of the International Workshop on an Infrastructure for Temporal Databases, </booktitle> <address> Arlington, TX, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: The working group addressed this new aspect of temporal rules in addition to defining rule structure for active databases. Work on integrating temporal and active database features has started appearing in the literature only recently. Examples of such works include <ref> [CK93, EGS92, EGS93a, DG93, GJMS93] </ref>. Some related issues have also been discussed in the context of real-time databases [BB93, Rama93a]. 4.3 Next Generation Temporal Data Modeling Concepts The purpose of this discussion was to identify the key concepts of the next generation of temporal data models and languages. <p> A composite event occurs at a time instant, as specified by the closed algebra in terms of the time instants of component basic events. 2 Several algebras for composite events have been proposed, e.g., Snoop [CM93], SAMOS <ref> [DG93] </ref>, [Chom92], and ODE [GJS92b, GJS92a, JMS92, GJMS93]. We permit simple conditions, such as X &gt; 10 on attribute X of an event, or a boolean predicate on attributes of events, to be included in the algebra for composite events. <p> Composite events thus represent simple forms of temporal queries, and can provide simple temporal features. Active rules using such event algebras must therefore be considered to be temporal rules. The composite algebras can be used in non-temporal databases, provided mechanisms to recognize these event patterns are provided <ref> [CM93, DG93, Chom92, GJS92a, JMS92] </ref>. While we will not discuss any particular algebra in this paper, we will illustrate their relationship to temporal databases through a representative syntax. EXAMPLE 4.1 Consider an inventory database in a store.
Reference: [DH87] <author> E. Dubois and J. Hagelstein. </author> <title> Reasoning on Formal Requirements: A Lift Control System. </title> <booktitle> In Proceedings on S/W Specification and Design, </booktitle> <year> 1987. </year>
Reference-contexts: On this basis, the ERT model accommodates the explicit modeling of time, taxonomic hierarchies and complex objects. The ERT model together with the Conceptual Rule Language and the Process Interaction Diagrams provides a uniform formalism for developing temporal database applications. * The ERAE data model <ref> [DUB+86, DH87] </ref> is an attempt to extend the semantics of the ER model with a distinguished type Event as one of its basic constructs.
Reference: [DHL91] <author> U. Dayal, M. Hsu, and R. Ladin. </author> <title> A transaction model for long-running activities. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Databases, </booktitle> <pages> pp. 113-122, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference: [DUB+86] <author> E. Dubois, et al. </author> <title> The ERAE Model : A Case Study in Information Systems Design Methodologies : Improving the Practice (CRIS-3). </title> <editor> T.W. Olle, H.G. Sol and A.A. Verrijn-Stuart (eds), </editor> <publisher> North-Holland, </publisher> <year> 1986. </year>
Reference-contexts: On this basis, the ERT model accommodates the explicit modeling of time, taxonomic hierarchies and complex objects. The ERT model together with the Conceptual Rule Language and the Process Interaction Diagrams provides a uniform formalism for developing temporal database applications. * The ERAE data model <ref> [DUB+86, DH87] </ref> is an attempt to extend the semantics of the ER model with a distinguished type Event as one of its basic constructs.
Reference: [DW90] <author> C. J. Date and C. J. White. </author> <title> A Guide to DB2, </title> <booktitle> Volume 1, Third edition. </booktitle> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <month> September </month> <year> 1990. </year>
Reference-contexts: Support for time in conventional data base systems (e.g., [TC83, OC87]) is entirely at the level of user-defined time (i.e., attribute values drawn from a temporal domain). These implementations 9 are limited in scope and are, in general, unsystematic in their design <ref> [Dat88, DW90] </ref>. The standards bodies (e.g., ANSI) are somewhat behind the curve, in that SQL includes no time support. Date and time support very similar to that in DB2 is included in the SQL-92 standard [MS93].
Reference: [DW92] <author> U. Dayal and G.T.J. Wuu. </author> <title> A Uniform Approach to Processing Temporal Queries. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases, </booktitle> <address> Vancouver, Canada, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: object-oriented data model that supports multiple time lines and schema histories and incorporates a temporal object-oriented algebra [RS93a, RS92] and a temporal object-oriented SQL [RS93b]. * The OSAM*/T model model and its associated query language called OQL/T [SC91, SKL89], is based on notion of time-varying association. * The OODAPLEX model <ref> [DW92, WD93] </ref> accommodates temporal data modeling through the notion of function. * The OOTempDBM model [CG93] captures the temporal semantics of objects through type inheritance. * The [KRS90] extends a complex object model by adding transaction and valid times to tuples. * The TIGUKAT [GO93] model incorporates time as an abstract
Reference: [EGS92] <author> O. Etzion, A. Gal, and A. Segev. </author> <title> Temporal Support in Active Databases. </title> <booktitle> In Proceedings of the Second International Workshop on Technologies and Systems, </booktitle> <address> Dallas, TX, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: The working group addressed this new aspect of temporal rules in addition to defining rule structure for active databases. Work on integrating temporal and active database features has started appearing in the literature only recently. Examples of such works include <ref> [CK93, EGS92, EGS93a, DG93, GJMS93] </ref>. Some related issues have also been discussed in the context of real-time databases [BB93, Rama93a]. 4.3 Next Generation Temporal Data Modeling Concepts The purpose of this discussion was to identify the key concepts of the next generation of temporal data models and languages. <p> If we assume that the later commit is the right value, the snapshot value will be v 2 . There are situations where the snapshot value has to be determined based on more complex inference <ref> [EGS92] </ref>.
Reference: [EGS93a] <author> O. Etzion, A. Gal, and A. Segev. </author> <title> Retroactive and Proactive Database Processing. </title> <type> Technical Report LBL-34424, </type> <institution> Lawrence Berkeley Laboratory, </institution> <month> July </month> <year> 1993. </year>
Reference-contexts: The working group addressed this new aspect of temporal rules in addition to defining rule structure for active databases. Work on integrating temporal and active database features has started appearing in the literature only recently. Examples of such works include <ref> [CK93, EGS92, EGS93a, DG93, GJMS93] </ref>. Some related issues have also been discussed in the context of real-time databases [BB93, Rama93a]. 4.3 Next Generation Temporal Data Modeling Concepts The purpose of this discussion was to identify the key concepts of the next generation of temporal data models and languages. <p> Such updates are called retro-active and pro-active updates, respectively. If proactive or retroactive updates are allowed in a temporal database, rules can effect data in several ways. We will elaborate on the retroactive case only; dealing with proactive updates is 25 similar. In <ref> [EGS93a] </ref> the following characterization of retroactive effects is given.
Reference: [EGS93b] <author> O. Etzion, A. Gal, and A. Segev. </author> <title> Temporal Active Databases. </title> <booktitle> In Proceedings of the International Workshop on an Infrastructure for Temporal Databases, </booktitle> <address> Arlington, TX, </address> <month> June </month> <year> 1993. </year>
Reference: [EW90] <author> R. Elmasri and G.T.J Wuu, </author> <title> A Temporal Model and Query Language for ER Databases. </title> <booktitle> In Proceedings of the International Conference on Data Engineering, </booktitle> <month> May </month> <year> 1990, </year> <pages> pp. 76-83. 48 </pages>
Reference: [EWK93] <author> R. Elmasri, G. Wuu and V. Kouramajian. </author> <title> A Temporal Model and Query Language for EER Databases. Chapter 9, Temporal Databases: Theory, Design, and Implementation. </title> <address> Ben-jamin/Cummings, </address> <year> 1993, </year> <pages> pp. 212-229. </pages>
Reference-contexts: The notion of history structure introduced in the model, augments the basic ER constructs to create new constructs such as attribute-history and role-history. * The Temporal EER model <ref> [EWK93] </ref> is an extended ER model which accommodates temporal information for entities, relationships, superclasses/subclasses and attributes. * The Entity-Relationship-Time (ERT) model [TWL90, TLW91, TAL92, Theo93] is an ER-based formalism which makes a clear distinction between objects and relationships.
Reference: [Gad88] <author> S.K. Gadia. </author> <title> A homogeneous relational model and query languages for temporal databases. </title> <journal> ACM TODS, </journal> <volume> 13(4) </volume> <pages> 418-448, </pages> <month> dec </month> <year> 1988. </year>
Reference-contexts: The domain of chronons for each such function-valued attribute is defined as the the intersection of the lifespans of the particular attribute and tuple. * Gadia's homogeneous model <ref> [Gad88] </ref> allows two types of objects: valid-time elements [GV85] and valid-time relations. Valid-time elements, which were first proposed by Shashi Gadia, have the nice property that they are closed under union, difference, and complementation, unlike intervals. * Gadia's multihomogeneous model [GY88] is an extension of the homogeneous model.
Reference: [Gad92] <author> S.K. Gadia. </author> <title> A seamless generic extension of SQL for querying temporal data. </title> <type> Technical Report TR-92-02, </type> <institution> Computer Science Department, Iowa State University, </institution> <month> May </month> <year> 1992. </year>
Reference-contexts: It augments SQL with valid, when, and as of clauses. * TempSQL is based on an attribute timestamped, homogeneous data model, where temporal elements are used as the timestamps <ref> [Gad92] </ref>. The language augments SQL with a while clause, in which temporal expressions are used to specify temporal selection. * TQuel is based on a tuple timestamping bitemporal data model [Sno87, Sno93]. It is quite similar semantically to TSQL+T, and uses similar additional syntactic constructs.
Reference: [GBM83] <author> S.J. Greenspan, A. Borgida and J. Mylopoulos. </author> <title> A Knowledge Representation Approach to Software Engineering: The TAXIS Project. </title> <booktitle> In Proceedings of the Canadian Information Processing Society, </booktitle> <address> Ottava, Ontario, </address> <month> May </month> <year> 1983. </year>
Reference-contexts: The Conceptual Mod-elling Language (CML) which is based on the TAXIS model <ref> [GBM83] </ref> includes time as a primitive notion. 17 Other semantic data models that have addressed the introduction of time include the RM/T [CODD79], which is an extension of the traditional relational model to handle among others sequencing of events, and the Functional Data Model [SHI81].
Reference: [GJ91] <author> N. Gehani and H.V. Jagadish. </author> <title> Ode as an active database: Constraints and triggers. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Databases, </booktitle> <pages> pp. 327-336, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference: [GJS92a] <author> N. Gehani, H.V. Jagadish, and O. Shmueli. </author> <title> Composite event specification in active databases: Model and implementation. </title> <booktitle> In Proceedings of the Eighteenth International Conference on Very Large Databases, </booktitle> <pages> pp. 327-338, </pages> <address> Vancouver, Canada, </address> <month> August </month> <year> 1992. </year>
Reference-contexts: A composite event occurs at a time instant, as specified by the closed algebra in terms of the time instants of component basic events. 2 Several algebras for composite events have been proposed, e.g., Snoop [CM93], SAMOS [DG93], [Chom92], and ODE <ref> [GJS92b, GJS92a, JMS92, GJMS93] </ref>. We permit simple conditions, such as X &gt; 10 on attribute X of an event, or a boolean predicate on attributes of events, to be included in the algebra for composite events. <p> Composite events thus represent simple forms of temporal queries, and can provide simple temporal features. Active rules using such event algebras must therefore be considered to be temporal rules. The composite algebras can be used in non-temporal databases, provided mechanisms to recognize these event patterns are provided <ref> [CM93, DG93, Chom92, GJS92a, JMS92] </ref>. While we will not discuss any particular algebra in this paper, we will illustrate their relationship to temporal databases through a representative syntax. EXAMPLE 4.1 Consider an inventory database in a store.
Reference: [GJS92b] <author> N. Gehani, H.V. Jagadish, and O. Shmueli. </author> <title> Event specification in an active object-oriented database. </title> <booktitle> In Proceedings of ACM SIGMOD 1992 International Conference on Management of Data, </booktitle> <pages> pp. 81-90, </pages> <address> San Diego, CA, </address> <month> June </month> <year> 1992. </year>
Reference-contexts: A composite event occurs at a time instant, as specified by the closed algebra in terms of the time instants of component basic events. 2 Several algebras for composite events have been proposed, e.g., Snoop [CM93], SAMOS [DG93], [Chom92], and ODE <ref> [GJS92b, GJS92a, JMS92, GJMS93] </ref>. We permit simple conditions, such as X &gt; 10 on attribute X of an event, or a boolean predicate on attributes of events, to be included in the algebra for composite events.
Reference: [GJMS93] <author> N. Gehani, H.V. Jagadish, I.S. Mumick, and O. Shmueli. </author> <title> Temporal Queries for Active Database Support. </title> <booktitle> In Proceedings of the International Workshop on an Infrastructure for Temporal Databases, </booktitle> <address> Arlington, TX, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: The working group addressed this new aspect of temporal rules in addition to defining rule structure for active databases. Work on integrating temporal and active database features has started appearing in the literature only recently. Examples of such works include <ref> [CK93, EGS92, EGS93a, DG93, GJMS93] </ref>. Some related issues have also been discussed in the context of real-time databases [BB93, Rama93a]. 4.3 Next Generation Temporal Data Modeling Concepts The purpose of this discussion was to identify the key concepts of the next generation of temporal data models and languages. <p> A composite event occurs at a time instant, as specified by the closed algebra in terms of the time instants of component basic events. 2 Several algebras for composite events have been proposed, e.g., Snoop [CM93], SAMOS [DG93], [Chom92], and ODE <ref> [GJS92b, GJS92a, JMS92, GJMS93] </ref>. We permit simple conditions, such as X &gt; 10 on attribute X of an event, or a boolean predicate on attributes of events, to be included in the algebra for composite events. <p> These enhancements require that events have attributes, and that attributes of events be passed across time, to other events, and into the condition and action part <ref> [GJMS93] </ref>. The resulting rule may be written as follows. EXAMPLE 4.2 Let sale (I, Q, P) be an event representing the insertion of the monthly statistic "item I sold in quantity Q at an average price of P during the last month".
Reference: [GM91] <author> D. Gabbay and P. McBrien. </author> <title> Temporal logic and historical databases. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Databases, p. </booktitle> <pages> 423-430, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference: [GO93] <author> I. </author> <title> Goralwalla and M.T. Ozsu. Temporal Extensions to a Uniform Behavioral Object Model. </title> <booktitle> In Proceedings of the International Conference on Entity-Relationship Approach, </booktitle> <address> Dallas, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: time-varying association. * The OODAPLEX model [DW92, WD93] accommodates temporal data modeling through the notion of function. * The OOTempDBM model [CG93] captures the temporal semantics of objects through type inheritance. * The [KRS90] extends a complex object model by adding transaction and valid times to tuples. * The TIGUKAT <ref> [GO93] </ref> model incorporates time as an abstract type. TIGUKAT models everything in the system as a first-class object. Therefore, it is only natural to model time in the same manner. TIGUKAT associates temporality with individual objects.
Reference: [GST91] <author> F. Grandi, M. R. Scalas, and P. Tiberio. </author> <title> A History-oriented Data View and Operation Semantics for Temporal Relational Databases. </title> <type> Technical Report CIOC-CNR N. 76, </type> <institution> Universita di Bologna, Italy, </institution> <note> Revised April 1993. </note>
Reference-contexts: requests, are stamped with a single transaction-time value and an attribute with values that indicate whether an insertion, deletion, or modification is requested. * The "history-oriented" data model uses a unique key/surrogate as an object identifier and interval tuple time-stamping, with only start-time stored if versions are ordered along time <ref> [GST91] </ref>. * Clifford and Tuzhilin in [TC90] define a temporal algebra TA that is applicable to any temporal relational data model supporting discrete linear bounded time. This algebra has the five basic relational algebra operators extended to the temporal domain and a new operator of linear recursion. <p> Although the language L h was not proposed as an end-user query language, a more user-friendly, SQL-like syntactic variant, similar to the HOT-SQL presented by Fabio Grandi at the workshop (a variant of HoTQuel in <ref> [GST91] </ref>), could easily be designed. Most temporal data models are paired with a temporal query language proposal. Some two dozen temporal relational query languages have been proposed, including seven extending the 8 relational algebra, five extending Quel, seven extending SQL, and a few being based on other formalisms. <p> It is supported procedurally with an attribute-timestamped temporal algebra [MS91b]. * HoTQuel is based on a tuple timestamped valid-time data model, and provides two types of range variables: history variables which have histories as values and denote objects and tuple variables which have tuples as values and denote object versions <ref> [GST91] </ref>. A more recent proposal showed how history variables could be added to SQL [GST93]. * HQuel is based on an attributed time-stamped valid-time data model (Tansel in [CT85], [TA86, TG89, Tan91a]). The data model has four different kinds of attributes: elementary (atomic), set-valued, triplet-valued, and set triplet-valued.
Reference: [GST93] <author> F. Grandi, M. R. Scalas, and P. Tiberio. </author> <title> History and Tuple Variables for Temporal Query Languages. </title> <booktitle> In Proceedings of the International Workshop on an Infrastructure for Temporal Databases, </booktitle> <address> Arlington, TX, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: A more recent proposal showed how history variables could be added to SQL <ref> [GST93] </ref>. * HQuel is based on an attributed time-stamped valid-time data model (Tansel in [CT85], [TA86, TG89, Tan91a]). The data model has four different kinds of attributes: elementary (atomic), set-valued, triplet-valued, and set triplet-valued. The first two are non time-varying; the other two are time-varying attributes.
Reference: [GV85] <author> S.K. Gadia and J.H. Vaishnav. </author> <title> A query language for a homogeneous temporal database. </title> <booktitle> In Proceedings of the Symposium of Principles of Database Systems, </booktitle> <pages> pp. 51-56, </pages> <month> March </month> <year> 1985. </year>
Reference-contexts: The domain of chronons for each such function-valued attribute is defined as the the intersection of the lifespans of the particular attribute and tuple. * Gadia's homogeneous model [Gad88] allows two types of objects: valid-time elements <ref> [GV85] </ref> and valid-time relations. Valid-time elements, which were first proposed by Shashi Gadia, have the nice property that they are closed under union, difference, and complementation, unlike intervals. * Gadia's multihomogeneous model [GY88] is an extension of the homogeneous model.
Reference: [GY88] <author> S.K. Gadia and C.S. Yeung. </author> <title> A generalized model for a relational temporal database. </title> <booktitle> In Proceedings of the ACM International Conference on Management of Data, </booktitle> <pages> pp. 251-259, </pages> <address> Chicago, IL, </address> <month> June </month> <year> 1988. </year>
Reference-contexts: Valid-time elements, which were first proposed by Shashi Gadia, have the nice property that they are closed under union, difference, and complementation, unlike intervals. * Gadia's multihomogeneous model <ref> [GY88] </ref> is an extension of the homogeneous model. It lifts the restriction that all attribute values in a tuple be functions on the same temporal element, in part to be able to perform Cartesian product without loss of temporal information caused by merging two timestamps into one.
Reference: [JCG+92] <author> C.S. Jensen, J. Clifford, S.K. Gadia, A. Segev, and R.T. Snodgrass. </author> <title> A glossary of temporal database concepts. </title> <journal> ACM SIGMOD Record, </journal> <volume> 21(3) </volume> <pages> 35-43, </pages> <month> September </month> <year> 1992. </year>
Reference-contexts: Substantial effort over the two years preceding the workshop generated an initial glossary that was published in the ACM SIGMOD Record <ref> [JCG+92] </ref>, and its impact on standardizing terminology is now being felt. Christian S. Jensen headed an editorial board to complete the glossary. The glossary, containing 87 terms and their definitions, will appear in the March, 1994 issue of the ACM SIGMOD Record.
Reference: [JMR91] <author> C.S. Jensen, L. Mark, and N. Roussopoulos. </author> <title> Incremental implementation model for relational databases with transaction time. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <volume> 3(4) </volume> <pages> 461-473, </pages> <month> December </month> <year> 1991. </year> <month> 49 </month>
Reference-contexts: Attribute values are still functions from temporal elements onto attribute value domains, but attribute values need not be functions on the same temporal element. * The association of facts with time is implicit in the transaction-time data model DM/T <ref> [JMR91] </ref>. Instead, DM/T contains a special system-generated and maintained transaction-time relation, termed a backlog, for each user-defined transaction-time relation. This log-like backlog contains the full, timestamped change history of the associated user-defined relation.
Reference: [JMS92] <author> H.V. Jagadish, I.S. Mumick, and O. Shmueli. </author> <title> Events with attributes in an active database. </title> <type> Technical Report 921214-18-TM, </type> <institution> AT&T Bell Laboratories, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: A composite event occurs at a time instant, as specified by the closed algebra in terms of the time instants of component basic events. 2 Several algebras for composite events have been proposed, e.g., Snoop [CM93], SAMOS [DG93], [Chom92], and ODE <ref> [GJS92b, GJS92a, JMS92, GJMS93] </ref>. We permit simple conditions, such as X &gt; 10 on attribute X of an event, or a boolean predicate on attributes of events, to be included in the algebra for composite events. <p> Composite events thus represent simple forms of temporal queries, and can provide simple temporal features. Active rules using such event algebras must therefore be considered to be temporal rules. The composite algebras can be used in non-temporal databases, provided mechanisms to recognize these event patterns are provided <ref> [CM93, DG93, Chom92, GJS92a, JMS92] </ref>. While we will not discuss any particular algebra in this paper, we will illustrate their relationship to temporal databases through a representative syntax. EXAMPLE 4.1 Consider an inventory database in a store.
Reference: [JMS93] <author> H.V. Jagadish, I.S. Mumick, and O. Shmueli. </author> <title> Sequences with attributes. </title> <note> Submitted for Publication, </note> <year> 1993. </year>
Reference: [KLINE93] <author> N. Kline. </author> <title> An Update of the Temporal Database Bibliography. </title> <booktitle> SIGMOD Record, </booktitle> <volume> 22(4) </volume> <pages> 66-80, </pages> <month> December, </month> <year> 1993. </year>
Reference-contexts: 1 Introduction Temporal databases has been an active area of research for the last fifteen years, with a corpus nearing 700 papers <ref> [KLINE93] </ref>. Most database conferences include at least one paper on temporal databases (TDB). Temporal databases are now discussed in several undergraduate database textbooks. There are perhaps one hundred researchers actively studying temporal databases. During that time an astonishing diversity of temporal data models and query languages has arisen.
Reference: [KLO81] <author> M.R. Klopprogge. </author> <title> TERM: An Approach to Include the Time Dimension in the Entity-Relationship Model. </title> <booktitle> In Proceedings of the Second International Conference on the Entity Relationship Approach, </booktitle> <address> Washington, DC, </address> <year> 1981. </year>
Reference-contexts: Storing such an e-fact in the information system results in an elementary message (e-message), which includes the references to an object, a property (attribute or relation), and a time point or period. * The Time-extended Entity Relationship Model (TERM) <ref> [KLO81] </ref> focuses on a on a set of modeling primitives based on the constructs of the ER model.
Reference: [KRS90] <author> W. Kafer, N. Ritter and H. Schoning. </author> <title> Support for Temporal Data by Complex Objects. </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Data Bases, </booktitle> <address> Brisbane, Australia, </address> <year> 1990, </year> <pages> pp. 24-35. </pages>
Reference-contexts: OSAM*/T model model and its associated query language called OQL/T [SC91, SKL89], is based on notion of time-varying association. * The OODAPLEX model [DW92, WD93] accommodates temporal data modeling through the notion of function. * The OOTempDBM model [CG93] captures the temporal semantics of objects through type inheritance. * The <ref> [KRS90] </ref> extends a complex object model by adding transaction and valid times to tuples. * The TIGUKAT [GO93] model incorporates time as an abstract type. TIGUKAT models everything in the system as a first-class object. Therefore, it is only natural to model time in the same manner.
Reference: [LAN73] <author> B. Langefors. </author> <title> Theoretical Analysis of Information Systems. Student Literature and Auerbach, </title> <institution> Lund, Sweden, </institution> <year> 1973. </year>
Reference-contexts: To move in an independent direction, developing entirely new approaches. As examples of the diversity of data models, based on these three approaches, we briefly examine some of the proposed models: * The Infological data model <ref> [LAN73, LS75] </ref>, is one of the earliest of the conceptual data models that recognized time to be indeed a distinguished entity. It is based on the natural human perception of elementary facts (e-facts).
Reference: [LJ88] <author> N.A. Lorentzos and R.G. Johnson. </author> <title> Extending relational algebra to manipulate temporal data. </title> <journal> Information Systems, </journal> <volume> 13(3) </volume> <pages> 289-296, </pages> <year> 1988. </year>
Reference-contexts: A boolean attribute, EXISTS, is also added to indicate whether the particular tuple exists for that state [Cli82, CW83]. Hence, this model timestamps tuples with valid-time events. * The Temporal Relational Model <ref> [LJ88, Lor88] </ref> was the first to support nested specification of timestamps using values of different granularity and to support periodic events. This model associates timestamps with individual attribute values rather than with tuples. In this approach time is treated in all respects like any other domain type.
Reference: [LLPS91] <author> G.M. Lohman, B. Lindsay, H. Pirahesh, </author> <title> and K.B. Schiefer. Extensions to Starburst: Objects, types, functions, and rules. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 94-109, </pages> <month> October </month> <year> 1991. </year>
Reference: [Lor88] <author> N.A. Lorentzos. </author> <title> A Formal Extension of the Relational Model for the Representation and Manipulation of Generic Intervals. </title> <type> Ph.D. thesis, </type> <institution> Birkbeck College, University of London, </institution> <year> 1988. </year>
Reference-contexts: A boolean attribute, EXISTS, is also added to indicate whether the particular tuple exists for that state [Cli82, CW83]. Hence, this model timestamps tuples with valid-time events. * The Temporal Relational Model <ref> [LJ88, Lor88] </ref> was the first to support nested specification of timestamps using values of different granularity and to support periodic events. This model associates timestamps with individual attribute values rather than with tuples. In this approach time is treated in all respects like any other domain type. <p> Vacuuming is this notion and denotes the flexible, physical deletion, consistent with the semantics of transaction time, of data in a temporal database supporting transaction time. * Periodic Time|Lorentzos' data model is notable in its support for periodic events, such as an airline flight every day at a certain time <ref> [Lor88] </ref>.
Reference: [LM93] <author> N.A. Lorentzos and Y.G. Mitsopoulos. IXSQL: </author> <title> An Interval Extension to SQL. </title> <booktitle> In Proceedings of the International Workshop on an Infrastructure for Temporal Databases, </booktitle> <address> Arlington, TX, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: It augments the SELECT statement with temporal features and allows access to individual temporal values. * IXSQL is based on an interval-extended relational algebra <ref> [LM93] </ref>. In addition to the five primitive operations on the conventional relational model, it supports two more relational algebra operations, new comparison operators and new scalar functions. Again, no distinction is made between user-defined and valid time, or between explicit and implicit attributes.
Reference: [LS75] <editor> B. Langefors and B. Sundgren. </editor> <booktitle> Information Systems Architecture. </booktitle> <address> Petrocelli/Charter, New York, </address> <year> 1975. </year>
Reference-contexts: To move in an independent direction, developing entirely new approaches. As examples of the diversity of data models, based on these three approaches, we briefly examine some of the proposed models: * The Infological data model <ref> [LAN73, LS75] </ref>, is one of the earliest of the conceptual data models that recognized time to be indeed a distinguished entity. It is based on the natural human perception of elementary facts (e-facts).
Reference: [MD89] <author> D.R. McCarthy and U. Dayal. </author> <title> The architecture of an active database management system. </title> <booktitle> In Proceedings of ACM SIGMOD 1989 International Conference on Management of Data, </booktitle> <pages> pp. 215-224, </pages> <address> Portland, OR, </address> <month> May </month> <year> 1989. </year>
Reference: [MS93] <author> J. Melton and A.R. Simon. </author> <title> Understanding the New SQL: A Complete Guide. </title> <publisher> Morgan Kauf-mann, </publisher> <year> 1993. </year>
Reference-contexts: The standards bodies (e.g., ANSI) are somewhat behind the curve, in that SQL includes no time support. Date and time support very similar to that in DB2 is included in the SQL-92 standard <ref> [MS93] </ref>. SQL-92 corrects some of the inconsistencies in the time support provided by DB2 but inherits its basic design limitations [SS92]. The SQL3 draft proposal contains no additional temporal support over SQL-92.
Reference: [MS91a] <author> E. McKenzie and R. Snodgrass. </author> <title> An Evaluation of Relational Algebras Incorporating the Time Dimension in Databases. </title> <journal> ACM Computing Surveys, </journal> <volume> 23(4) </volume> <pages> 501-543, </pages> <month> December </month> <year> 1991. </year>
Reference-contexts: reduce the number of possibilities to a small set that can be further evaluated in the coming months. 3.2 Current Status of the Field Researchers have been prolific in developing temporal data models and query languages, in an attempt to find the right tradeoffs among a set of irreconcilable constraints <ref> [MS91a] </ref>. Over the last fifteen years of work, a total of over two dozen temporal extensions of the relational data model have been proposed. Approximately half of these models support only valid time; three models support only transaction time; and the remaining seven or so support bitemporal relations. <p> These operations would be the target internal representation for temporal queries and updates, and would serve as a basis for such system modules 29 as query processing and optimization. Unfortunately, there is no well-accepted temporal database algebra (there is, however, no shortage of candidates <ref> [MS91a] </ref>).
Reference: [MS91b] <author> E. McKenzie and R. T. Snodgrass. </author> <title> Supporting Valid Time in an Historical Relational Algebra: Proofs and Extensions. </title> <type> Technical Report TR-91-15, </type> <institution> Department of Computer Science, University of Arizona, </institution> <address> Tucson, AZ, </address> <month> August </month> <year> 1991. </year>
Reference-contexts: It is quite similar semantically to TSQL+T, and uses similar additional syntactic constructs. It is supported procedurally with an attribute-timestamped temporal algebra <ref> [MS91b] </ref>. * HoTQuel is based on a tuple timestamped valid-time data model, and provides two types of range variables: history variables which have histories as values and denote objects and tuple variables which have tuples as values and denote object versions [GST91].
Reference: [OC87] <author> Oracle Computer, Inc. </author> <title> ORACLE Terminal User's Guide. </title> <publisher> Oracle Corporation, </publisher> <year> 1987. </year>
Reference-contexts: Again, no distinction is made between user-defined and valid time, or between explicit and implicit attributes. Support for time in conventional data base systems (e.g., <ref> [TC83, OC87] </ref>) is entirely at the level of user-defined time (i.e., attribute values drawn from a temporal domain). These implementations 9 are limited in scope and are, in general, unsystematic in their design [Dat88, DW90].
Reference: [OO84] <author> Z.M. Ozsoyoglu and G. Ozsoyoglu. Summary-table-by-example: </author> <title> A database query language for manipulating summary data. </title> <booktitle> In Proceedings of the International Conference on Data Engineering, </booktitle> <pages> pp. 193-202, </pages> <address> Los Angeles, CA, </address> <month> April </month> <year> 1984. </year>
Reference-contexts: There is also an equivalent calculus for HQuel. * Time-by-Example (TBE) [TAO89] is a graphical query language similar to QBE that follows hierarchically arranged subqueries of the Summary-Table-by-Example (STBE) <ref> [OO84] </ref> database query language. For query processing and optimization TBE queries are converted to equivalent algebraic operations [Tan86]. * SQL T is based on nested relations that use attribute timestamping and allow inhomogeneous tuples [Tan93].
Reference: [P90] <author> N. Pissinou. </author> <title> A Conceptual Framework For Time In Object Databases. </title> <type> Technical Report, </type> <institution> Computer Research Institute, University of Southern California, </institution> <address> Los Angeles, California, </address> <year> 1990. </year> <month> 50 </month>
Reference-contexts: Other research in extending object based models to incorporate the semantics of time or the roles of temporal objects include the following. * The Time In Object Databases work <ref> [P90, P91, PM92, PM93b, PM94b, PM94c] </ref> addresses temporal problems at the finest level of granularity, viz., the object level, explores the semantics of time in the context of object databases, and identifies the temporal aspects of objects and temporal inter/intra-object relationships and changes to existing notions of temporal data that are
Reference: [P91] <author> N. Pissinou. </author> <title> Time In Object Databases. </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, University of Southern California, </institution> <month> December </month> <year> 1991. </year>
Reference-contexts: Other research in extending object based models to incorporate the semantics of time or the roles of temporal objects include the following. * The Time In Object Databases work <ref> [P90, P91, PM92, PM93b, PM94b, PM94c] </ref> addresses temporal problems at the finest level of granularity, viz., the object level, explores the semantics of time in the context of object databases, and identifies the temporal aspects of objects and temporal inter/intra-object relationships and changes to existing notions of temporal data that are
Reference: [PM92] <author> N. Pissinou and K. Makki. T-3DIS: </author> <title> An Approach to Temporal Object Databases. </title> <booktitle> In Proceedings of the International Conference on Information and Knowledge Management, </booktitle> <address> Baltimore, Maryland, </address> <month> November </month> <year> 1992. </year>
Reference-contexts: Other research in extending object based models to incorporate the semantics of time or the roles of temporal objects include the following. * The Time In Object Databases work <ref> [P90, P91, PM92, PM93b, PM94b, PM94c] </ref> addresses temporal problems at the finest level of granularity, viz., the object level, explores the semantics of time in the context of object databases, and identifies the temporal aspects of objects and temporal inter/intra-object relationships and changes to existing notions of temporal data that are
Reference: [PM93a] <author> N. Pissinou and K. Makki. </author> <title> A Framework for Temporal Object Databases. </title> <booktitle> Lecture Notes In Computer Science Series, Springer-Verlag, </booktitle> <volume> Volume 752, </volume> <year> 1993. </year>
Reference: [PM93b] <author> N. Pissinou and K. Makki. </author> <title> Separating Semantics From Representation in a Temporal Object Database Domain. </title> <booktitle> In Proceedings of the International Conference on Information and Knowledge Management, </booktitle> <address> Washington D.C., </address> <month> November </month> <year> 1993. </year>
Reference-contexts: Other research in extending object based models to incorporate the semantics of time or the roles of temporal objects include the following. * The Time In Object Databases work <ref> [P90, P91, PM92, PM93b, PM94b, PM94c] </ref> addresses temporal problems at the finest level of granularity, viz., the object level, explores the semantics of time in the context of object databases, and identifies the temporal aspects of objects and temporal inter/intra-object relationships and changes to existing notions of temporal data that are
Reference: [PM94a] <author> N. Pissinou and K. Makki. </author> <title> A Unified Model and Methodology for Temporal Object Databases. </title> <journal> The International Journal on Intelligent and Cooperative Information Systems, </journal> <volume> 2(2), </volume> <year> 1994. </year>
Reference: [PM94b] <author> N. Pissinou and K. Makki. </author> <title> A Coherent Architecture for a Temporal Object Database Management System. </title> <journal> International Journal of Systems and Software, </journal> <volume> 23, </volume> <year> 1994. </year>
Reference-contexts: Other research in extending object based models to incorporate the semantics of time or the roles of temporal objects include the following. * The Time In Object Databases work <ref> [P90, P91, PM92, PM93b, PM94b, PM94c] </ref> addresses temporal problems at the finest level of granularity, viz., the object level, explores the semantics of time in the context of object databases, and identifies the temporal aspects of objects and temporal inter/intra-object relationships and changes to existing notions of temporal data that are
Reference: [PM94c] <author> N. Pissinou and K. Makki. </author> <title> Separating Semantics From Representation in a Temporal Object Database Domain. </title> <journal> The Journal of Computer Information Systems, </journal> <month> Spring </month> <year> 1994. </year>
Reference-contexts: Other research in extending object based models to incorporate the semantics of time or the roles of temporal objects include the following. * The Time In Object Databases work <ref> [P90, P91, PM92, PM93b, PM94b, PM94c] </ref> addresses temporal problems at the finest level of granularity, viz., the object level, explores the semantics of time in the context of object databases, and identifies the temporal aspects of objects and temporal inter/intra-object relationships and changes to existing notions of temporal data that are
Reference: [Rama93a] <author> K. Ramamritham. </author> <title> Real-Time Databases. </title> <journal> Journal of Distributed and Parallel Databases, </journal> <volume> 1(2) </volume> <pages> 199-226, </pages> <year> 1993. </year>
Reference-contexts: Work on integrating temporal and active database features has started appearing in the literature only recently. Examples of such works include [CK93, EGS92, EGS93a, DG93, GJMS93]. Some related issues have also been discussed in the context of real-time databases <ref> [BB93, Rama93a] </ref>. 4.3 Next Generation Temporal Data Modeling Concepts The purpose of this discussion was to identify the key concepts of the next generation of temporal data models and languages.
Reference: [Rama93b] <author> K. Ramamritham. </author> <title> Time for Real-Time Temporal Databases? In Proceedings of the International Workshop on an Infrastructure for Temporal Databases, </title> <address> Arlington, TX, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: Even though the ECA model implies that an active database can be made to react to timeouts, time constraints are not explicitly considered by the underlying transaction processing mechanism. However, the primary goal of real-time database systems is to complete transactions on time <ref> [Rama93b] </ref>. One can thus state the main deficiency in active databases in relation to what is required for them to deal with time constraints on the completion of transactions: time constraints must be actively taken into consideration. Consider a system that controls the landing of an aircraft.
Reference: [Ric92] <author> J. Richardson. </author> <title> Supporting lists in a data model (a timely approach). </title> <booktitle> In Proceedings of the Eighteenth International Conference on Very Large Databases, </booktitle> <pages> pp. 127-138, </pages> <address> Vancouver, Canada, </address> <month> August </month> <year> 1992. </year>
Reference: [RS91] <author> E. Rose and A. Segev. </author> <booktitle> TOODM ATemporal Object-Oriented Data Model with Temporal Constraints In Proceedings of the 10th International Conference on The Entity-Relationship Approach October 1991, </booktitle> <address> San Mateo, California, </address> <pages> pp. 205-229. </pages>
Reference-contexts: The work specifically involves the design and development of a model that integrates time with object databases and demonstrates how the constructs and operations of this model may be used as the basis for the stepwise refinement of other models of increasing complexity. * TOODM <ref> [RS91] </ref> is a temporal object-oriented data model that supports multiple time lines and schema histories and incorporates a temporal object-oriented algebra [RS93a, RS92] and a temporal object-oriented SQL [RS93b]. * The OSAM*/T model model and its associated query language called OQL/T [SC91, SKL89], is based on notion of time-varying association. *
Reference: [RS92] <author> E. Rose and A. Segev. </author> <title> A Temporal Object-Oriented Algebra and Query Language. </title> <institution> Lawrence Berkeley Laboratory technical report LBL-32013, </institution> <year> 1992. </year>
Reference-contexts: databases and demonstrates how the constructs and operations of this model may be used as the basis for the stepwise refinement of other models of increasing complexity. * TOODM [RS91] is a temporal object-oriented data model that supports multiple time lines and schema histories and incorporates a temporal object-oriented algebra <ref> [RS93a, RS92] </ref> and a temporal object-oriented SQL [RS93b]. * The OSAM*/T model model and its associated query language called OQL/T [SC91, SKL89], is based on notion of time-varying association. * The OODAPLEX model [DW92, WD93] accommodates temporal data modeling through the notion of function. * The OOTempDBM model [CG93] captures the
Reference: [RS93a] <author> E. Rose and A. Segev. TOOA: </author> <title> A Temporal Object-Oriented Algebra. </title> <booktitle> In Proceedings of the 7th European Conference on Object-Oriented Programming, </booktitle> <address> Kaiserslautern Germany, </address> <month> July </month> <year> 1993, </year> <booktitle> Lecture Notes in Computer Science, Springer-Verlag, </booktitle> <volume> Vol. 707, </volume> <pages> pp. 297-325. </pages>
Reference-contexts: databases and demonstrates how the constructs and operations of this model may be used as the basis for the stepwise refinement of other models of increasing complexity. * TOODM [RS91] is a temporal object-oriented data model that supports multiple time lines and schema histories and incorporates a temporal object-oriented algebra <ref> [RS93a, RS92] </ref> and a temporal object-oriented SQL [RS93b]. * The OSAM*/T model model and its associated query language called OQL/T [SC91, SKL89], is based on notion of time-varying association. * The OODAPLEX model [DW92, WD93] accommodates temporal data modeling through the notion of function. * The OOTempDBM model [CG93] captures the
Reference: [RS93b] <author> E. Rose and A. Segev. </author> <title> TOOSQL ATemporal Object-oriented Query Language. </title> <booktitle> In Proceedings of the 10th International Conference on The Entity-Relationship Approach, </booktitle> <address> Dallas, Texas, </address> <year> 1993. </year>
Reference-contexts: operations of this model may be used as the basis for the stepwise refinement of other models of increasing complexity. * TOODM [RS91] is a temporal object-oriented data model that supports multiple time lines and schema histories and incorporates a temporal object-oriented algebra [RS93a, RS92] and a temporal object-oriented SQL <ref> [RS93b] </ref>. * The OSAM*/T model model and its associated query language called OQL/T [SC91, SKL89], is based on notion of time-varying association. * The OODAPLEX model [DW92, WD93] accommodates temporal data modeling through the notion of function. * The OOTempDBM model [CG93] captures the temporal semantics of objects through type inheritance.
Reference: [SA85] <author> R. Snodgrass and I. Ahn. </author> <title> A taxonomy of time in databases. </title> <booktitle> In Proceedings of the ACM International Conference on Management of Data, </booktitle> <pages> pp. 236-246, </pages> <address> Austin, TX, </address> <month> May </month> <year> 1985. </year>
Reference-contexts: Several timestamp attributes of nested granularity may also be used together in a specification of a chronon. The model can also handle intervals of types other than time. * In differentiating valid and transaction time, a four-dimensional data model was used <ref> [SA85, SA86] </ref>.
Reference: [SA86] <author> R.T. Snodgrass and I. Ahn. </author> <title> Temporal databases. </title> <journal> IEEE Computer, </journal> <volume> 19(9) </volume> <pages> 35-42, </pages> <month> September </month> <year> 1986. </year>
Reference-contexts: Several timestamp attributes of nested granularity may also be used together in a specification of a chronon. The model can also handle intervals of types other than time. * In differentiating valid and transaction time, a four-dimensional data model was used <ref> [SA85, SA86] </ref>. <p> We refer to an extension of SQL (-92 or 3) as TSQL, for convenience, keeping in mind the diversity of opinion listed in the previous section. There have been three types of time that may be used in a temporal database: user-defined time, valid time, and transaction time <ref> [SA86] </ref>. User-defined time has garnered support in most commercial DBMS's (and is present in the SQL-92 standard), and transaction time is supported 11 in some object-oriented databases (as version identifiers) and one relational database (Montage).
Reference: [SA91] <author> S.Y.W. Su and A.M. Alashqur. </author> <title> A Pattern-based Constraint specification Language for Object-oriented Databases. </title> <booktitle> In Proceedings of IEEE Spring COMPCON 91, </booktitle> <address> San Francisco, CA, </address> <month> Febru-ary </month> <year> 1991. </year>
Reference: [SC91] <author> S.Y.W. Su and H.H. Chen. </author> <title> A temporal Knowledge Representation Model OSAM*/T and Its Query Language OQL/T. </title> <booktitle> In Proceedings of the 17th International Conf. on Very Large Data Bases, </booktitle> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991, </year> <pages> pp. 431-442. 51 </pages>
Reference-contexts: refinement of other models of increasing complexity. * TOODM [RS91] is a temporal object-oriented data model that supports multiple time lines and schema histories and incorporates a temporal object-oriented algebra [RS93a, RS92] and a temporal object-oriented SQL [RS93b]. * The OSAM*/T model model and its associated query language called OQL/T <ref> [SC91, SKL89] </ref>, is based on notion of time-varying association. * The OODAPLEX model [DW92, WD93] accommodates temporal data modeling through the notion of function. * The OOTempDBM model [CG93] captures the temporal semantics of objects through type inheritance. * The [KRS90] extends a complex object model by adding transaction and valid
Reference: [SC93a] <author> S.Y.W. Su and H.H. Chen. </author> <title> Modeling and Management of Temporal Data in Object-oriented Knowledge Bases. </title> <booktitle> In Proceedings of the Workshop on an Infrastructure for Temporal Databases, </booktitle> <address> Arlington, TX, </address> <month> June </month> <year> 1993. </year>
Reference: [SC93b] <author> S.Y.W. Su and H.H. Chen. </author> <title> Temporal Rule Specification and Management in Object-oriented Knowledge Bases. </title> <booktitle> In Proceedings of the First International Workshop on Rules in Database Systems, </booktitle> <address> Edingburgh, Scotland, </address> <month> August </month> <year> 1993. </year>
Reference: [SGM93] <author> R. Snodgrass, S. Gomez, and E. McKenzie. </author> <title> Aggregates in the Temporal Query Language TQuel. </title> <journal> To appear in IEEE Transactions of Knowledge and Data Engineering, </journal> <year> 1993. </year>
Reference-contexts: with TQuel, four implicit attributes were added to each relation: the transaction time of the transaction inserting the tuple, the transaction time of the transaction logically deleting the tuple, the time that the tuple started being valid in reality, and the time that the tuple stopped being valid in reality <ref> [Sno87, SGM93] </ref>. * Tansel's model ([Tan86], Tansel in [CT85]) was designed to support the calculus-based query language HQuel [TA86] and, later, the Time-by-Example language [TAO89]. The model allows only one type of object: the valid-time relation.
Reference: [SHI81] <author> D.W. Shipman. </author> <title> The Functional Data Model and the Data Language DAPLEX, </title> <journal> ACM TODS 6(1) </journal> <pages> 140-173, </pages> <month> March </month> <year> 1981. </year>
Reference-contexts: is based on the TAXIS model [GBM83] includes time as a primitive notion. 17 Other semantic data models that have addressed the introduction of time include the RM/T [CODD79], which is an extension of the traditional relational model to handle among others sequencing of events, and the Functional Data Model <ref> [SHI81] </ref>. One of the earliest attempts to introduce time into the object-oriented data model is reported in [CC88], which proposed certain terminology and concepts.
Reference: [SK91] <author> M. Stonebraker and G. Kemnitz. </author> <title> The Postgres Next-generation Database Management System. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 78-93, </pages> <month> October </month> <year> 1991. </year>
Reference: [SKL89] <author> S.Y.W. Su, V. Krishnamurphy and H. Lam. </author> <title> An Object-oriented Semantic Association Model (OSAM*) for Modeling CAD/CAM Databases. </title> <booktitle> Chapter 17 in Artificial Intelligence: Manufacturing Theory and Practice, </booktitle> <address> S.T. Kumara, </address> <institution> A.L. Soyster, and R.L. Kashyap (eds.), Institute of Industrial Engineers, Industrial Engineering and Management Press, </institution> <address> Norcross, GA., </address> <year> 1989, </year> <pages> pp. 463-494. </pages>
Reference-contexts: refinement of other models of increasing complexity. * TOODM [RS91] is a temporal object-oriented data model that supports multiple time lines and schema histories and incorporates a temporal object-oriented algebra [RS93a, RS92] and a temporal object-oriented SQL [RS93b]. * The OSAM*/T model model and its associated query language called OQL/T <ref> [SC91, SKL89] </ref>, is based on notion of time-varying association. * The OODAPLEX model [DW92, WD93] accommodates temporal data modeling through the notion of function. * The OOTempDBM model [CG93] captures the temporal semantics of objects through type inheritance. * The [KRS90] extends a complex object model by adding transaction and valid
Reference: [Sno87] <author> R.T. Snodgrass. </author> <title> The Temporal Query Language TQuel. </title> <journal> ACM Tods, </journal> <volume> 12(2) </volume> <pages> 247-298, </pages> <month> June </month> <year> 1987. </year>
Reference-contexts: with TQuel, four implicit attributes were added to each relation: the transaction time of the transaction inserting the tuple, the transaction time of the transaction logically deleting the tuple, the time that the tuple started being valid in reality, and the time that the tuple stopped being valid in reality <ref> [Sno87, SGM93] </ref>. * Tansel's model ([Tan86], Tansel in [CT85]) was designed to support the calculus-based query language HQuel [TA86] and, later, the Time-by-Example language [TAO89]. The model allows only one type of object: the valid-time relation. <p> The language augments SQL with a while clause, in which temporal expressions are used to specify temporal selection. * TQuel is based on a tuple timestamping bitemporal data model <ref> [Sno87, Sno93] </ref>. It is quite similar semantically to TSQL+T, and uses similar additional syntactic constructs.
Reference: [Sno93] <author> R.T. Snodgrass. </author> <title> An Overview of TQuel. Chapter 6. Temporal Databases: Theory, Design, and Implementation. </title> <address> Benjamin/Cummings, </address> <year> 1993, </year> <pages> pp. 141-182. </pages>
Reference-contexts: The language augments SQL with a while clause, in which temporal expressions are used to specify temporal selection. * TQuel is based on a tuple timestamping bitemporal data model <ref> [Sno87, Sno93] </ref>. It is quite similar semantically to TSQL+T, and uses similar additional syntactic constructs.
Reference: [SPAM91] <author> U. Schreier, H. Pirahesh, R. Agrawal, and C. Mohan. Alert: </author> <title> An architecture for transforming a passive dbms into an active dbms. </title> <booktitle> In Proceedings of the Seventeenth International Conference on Very Large Databases, </booktitle> <pages> pp. 469-478, </pages> <address> Barcelona, Spain, </address> <month> September </month> <year> 1991. </year>
Reference: [SS91] <author> Y.M. Shyy and S.Y.W. Su. </author> <title> K: A High-level Knowledge Base Programming Language for Advanced Database Applications. </title> <booktitle> In Proceedings of the ACM International Conference on Management of Data, </booktitle> <address> Denver, CO., </address> <month> May </month> <year> 1991, </year> <pages> pp. 338-347. </pages>
Reference: [SS92] <author> M. Soo and R. Snodgrass. </author> <title> Mixed Calendar Query Language Support for Temporal Constants. </title> <type> TempIS Technical Report 29, </type> <institution> Computer Science Department, University of Arizona, Tucson, Arizona, </institution> <note> Revised May 1992. </note>
Reference-contexts: Date and time support very similar to that in DB2 is included in the SQL-92 standard [MS93]. SQL-92 corrects some of the inconsistencies in the time support provided by DB2 but inherits its basic design limitations <ref> [SS92] </ref>. The SQL3 draft proposal contains no additional temporal support over SQL-92.
Reference: [SSD92] <author> M. Soo, R.T. Snodgrass, C. Dyreson, C.S. Jensen and N. Kline. </author> <title> Architectural Extensions to Support Multiple Calendars. </title> <type> TempIS Technical Report 32, </type> <institution> Computer Science Department, University of Arizona, </institution> <note> Revised May 1992. </note>
Reference-contexts: In many business applications, there is a need to reference times which are not standard Gregorian dates, e.g. "business days" or "trading days". Several proposals have been introduced recently of a database support for different calendric systems <ref> [SSD92, CS93, CSS93] </ref>. In the context of this position paper, a calendar is a semantic collection of time interval possibly with a cyclical structures. Calendars can be operated upon via an algebra (calendar expressions) and the result is also a calendar.
Reference: [SSU91] <author> A. Silberschatz, M. Stonebraker, and J.D. Ullman. </author> <title> Database systems: Achievements and opportunities. </title> <journal> Communications of the ACM, </journal> <volume> 34(10) </volume> <pages> 110-120, </pages> <month> October </month> <year> 1991. </year>
Reference: [TA86] <author> A.U. Tansel and M.E. Arkun. Hquel, </author> <title> a query language for historical relational databases. </title> <booktitle> In Proceedings of the Third International Workshop on Statistical and Scientific Databases, </booktitle> <month> July </month> <year> 1986. </year>
Reference-contexts: tuple, the transaction time of the transaction logically deleting the tuple, the time that the tuple started being valid in reality, and the time that the tuple stopped being valid in reality [Sno87, SGM93]. * Tansel's model ([Tan86], Tansel in [CT85]) was designed to support the calculus-based query language HQuel <ref> [TA86] </ref> and, later, the Time-by-Example language [TAO89]. The model allows only one type of object: the valid-time relation. However, four types of attributes are supported: Attributes may be either non-time-varying or time-varying, and they may be either atomic-valued or set-valued. <p> A more recent proposal showed how history variables could be added to SQL [GST93]. * HQuel is based on an attributed time-stamped valid-time data model (Tansel in [CT85], <ref> [TA86, TG89, Tan91a] </ref>). The data model has four different kinds of attributes: elementary (atomic), set-valued, triplet-valued, and set triplet-valued. The first two are non time-varying; the other two are time-varying attributes.
Reference: [Tan86] <author> A.U. Tansel. </author> <title> Adding time dimension to relational model and extending relational algebra. </title> <journal> Information Systems, </journal> <volume> 11(4) </volume> <pages> 343-355, </pages> <year> 1986. </year>
Reference-contexts: There is also an equivalent calculus for HQuel. * Time-by-Example (TBE) [TAO89] is a graphical query language similar to QBE that follows hierarchically arranged subqueries of the Summary-Table-by-Example (STBE) [OO84] database query language. For query processing and optimization TBE queries are converted to equivalent algebraic operations <ref> [Tan86] </ref>. * SQL T is based on nested relations that use attribute timestamping and allow inhomogeneous tuples [Tan93]. It augments the SELECT statement with temporal features and allows access to individual temporal values. * IXSQL is based on an interval-extended relational algebra [LM93]. <p> split on this aspect, with very roughly half the data models adopting the former approach, which is viewed by some as being more "object-oriented," and half adopting the latter approach, which is viewed by some as being more efficient. * Levels of Nesting|Some attribute-value timestamped models, notably Tansel's data model <ref> [Tan86] </ref>, can be viewed as an extension of nested relational models.
Reference: [Tan91a] <author> A.U. Tansel. </author> <title> A Historical Query Language. </title> <journal> Information Sciences, </journal> <volume> 53 </volume> <pages> 101-133, </pages> <year> 1991. </year>
Reference-contexts: A more recent proposal showed how history variables could be added to SQL [GST93]. * HQuel is based on an attributed time-stamped valid-time data model (Tansel in [CT85], <ref> [TA86, TG89, Tan91a] </ref>). The data model has four different kinds of attributes: elementary (atomic), set-valued, triplet-valued, and set triplet-valued. The first two are non time-varying; the other two are time-varying attributes.
Reference: [Tan91b] <author> A.U. Tansel. </author> <title> Temporal relational data model. </title> <type> Technical report, </type> <institution> Baruch College, CUNY, </institution> <year> 1991. </year>
Reference-contexts: Tansel generalizes this model to nested (N1NF) relations and provides formal definitions of a temporal relational algebra and a temporal relational calculus which are shown to be equivalent <ref> [Tan91b] </ref>.
Reference: [Tan93] <author> A.U. Tansel. </author> <title> SQL T : A Temporal Extension to SQL. </title> <booktitle> In Proceedings of the International Workshop on an Infrastructure for Temporal Databases, </booktitle> <address> Arlington, TX, </address> <month> June </month> <year> 1993. </year> <month> 52 </month>
Reference-contexts: For query processing and optimization TBE queries are converted to equivalent algebraic operations [Tan86]. * SQL T is based on nested relations that use attribute timestamping and allow inhomogeneous tuples <ref> [Tan93] </ref>. It augments the SELECT statement with temporal features and allows access to individual temporal values. * IXSQL is based on an interval-extended relational algebra [LM93].
Reference: [TAO89] <author> A.U. Tansel, M.E. Arkun, and G. Ozsoyoglu. </author> <title> Time-by-example query language for historical databases. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 15(4) </volume> <pages> 464-478, </pages> <month> April </month> <year> 1989. </year>
Reference-contexts: transaction logically deleting the tuple, the time that the tuple started being valid in reality, and the time that the tuple stopped being valid in reality [Sno87, SGM93]. * Tansel's model ([Tan86], Tansel in [CT85]) was designed to support the calculus-based query language HQuel [TA86] and, later, the Time-by-Example language <ref> [TAO89] </ref>. The model allows only one type of object: the valid-time relation. However, four types of attributes are supported: Attributes may be either non-time-varying or time-varying, and they may be either atomic-valued or set-valued. <p> In addition to conventional algebraic operations, it includes operations to restructure temporal relations, to synchronize the time associated with attributes, and to form and decompose timestamped values. There is also an equivalent calculus for HQuel. * Time-by-Example (TBE) <ref> [TAO89] </ref> is a graphical query language similar to QBE that follows hierarchically arranged subqueries of the Summary-Table-by-Example (STBE) [OO84] database query language.
Reference: [TC83] <author> Tandem Computers. </author> <title> ENFORM Reference Manual. </title> <address> Cupertino, CA, </address> <year> 1983. </year>
Reference-contexts: Again, no distinction is made between user-defined and valid time, or between explicit and implicit attributes. Support for time in conventional data base systems (e.g., <ref> [TC83, OC87] </ref>) is entirely at the level of user-defined time (i.e., attribute values drawn from a temporal domain). These implementations 9 are limited in scope and are, in general, unsystematic in their design [Dat88, DW90].
Reference: [TC90] <author> A. Tuzhilin and J. Clifford. </author> <title> A Temporal Relational Algebra as a Basis for Temporal Relational Completeness. </title> <booktitle> In Proceedings of International Conference on Very Lanrge Databases, </booktitle> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: transaction-time value and an attribute with values that indicate whether an insertion, deletion, or modification is requested. * The "history-oriented" data model uses a unique key/surrogate as an object identifier and interval tuple time-stamping, with only start-time stored if versions are ordered along time [GST91]. * Clifford and Tuzhilin in <ref> [TC90] </ref> define a temporal algebra TA that is applicable to any temporal relational data model supporting discrete linear bounded time. This algebra has the five basic relational algebra operators extended to the temporal domain and a new operator of linear recursion.
Reference: [TG89] <author> A. Tansel and L. Garnett. </author> <title> Nested historical relations. </title> <booktitle> In Proceedings of the ACM International Conference on Management of Data, </booktitle> <pages> pp. 284-293, </pages> <month> May </month> <year> 1989. </year>
Reference-contexts: Tansel generalizes this model to nested (N1NF) relations and provides formal definitions of a temporal relational algebra and a temporal relational calculus which are shown to be equivalent [Tan91b]. Normal forms for nested temporal temporal relations have also been developed <ref> [TG89] </ref> * The Historical Relational Data Model [CC87], a refinement of the model associated with a valid-time algebra (Clifford in [CT85], [Cli82]), is unique in that it associates timestamps with both individual tuples and with individual attribute values of the tuples. <p> A more recent proposal showed how history variables could be added to SQL [GST93]. * HQuel is based on an attributed time-stamped valid-time data model (Tansel in [CT85], <ref> [TA86, TG89, Tan91a] </ref>). The data model has four different kinds of attributes: elementary (atomic), set-valued, triplet-valued, and set triplet-valued. The first two are non time-varying; the other two are time-varying attributes.
Reference: [TC90] <author> A. Tuzhilin and J. Clifford. </author> <title> A temporal relational algebra as a basis for temporal relational completeness. </title> <booktitle> In Proceedings of the International Conference on Very Large Databases, </booktitle> <pages> pp. 13-23, </pages> <year> 1990. </year>
Reference-contexts: transaction-time value and an attribute with values that indicate whether an insertion, deletion, or modification is requested. * The "history-oriented" data model uses a unique key/surrogate as an object identifier and interval tuple time-stamping, with only start-time stored if versions are ordered along time [GST91]. * Clifford and Tuzhilin in <ref> [TC90] </ref> define a temporal algebra TA that is applicable to any temporal relational data model supporting discrete linear bounded time. This algebra has the five basic relational algebra operators extended to the temporal domain and a new operator of linear recursion.
Reference: [TCG+93] <author> A. Tansel, J. Clifford, S. Gadia, S. Jajodia, A. Segev, and R. Snodgrass (eds.). </author> <title> Temporal Databases: Theory, Design, and Implementation. Database Systems and Applications Series. </title> <address> Benjamin/Cummings, Redwood City, CA, </address> <year> 1993. </year>
Reference-contexts: Jensen spearheaded the effort to complete "test suite of temporal query languages", as it is now called. This document is focused on SQL language extensions. Several other efforts contemporaneous with the planning of the workshop also contribute to an infrastructure for temporal databases. The first book on temporal databases <ref> [TCG+93] </ref> is a comprehensive volume covering modeling, languages, and implementation aspects of temporal databases. The book consists of 23 chapters that report the research results of leading researchers in temporal databases.
Reference: [Tuzh89] <author> A. Tuzhilin. </author> <title> Using Relational Discrete Event Systems and Models for Prediction of Future Behavior of Databases. </title> <type> Ph.D. thesis, </type> <address> New York University, </address> <month> October </month> <year> 1989. </year>
Reference-contexts: They prove that this algebra has the expressive power of a safe temporal calculus based on the predicate temporal logic with the until and since temporal operators, the language TC which was first proposed as a query language for valid-time databases in <ref> [Tuzh89] </ref>. Clifford, Croker and Tuzhilin present the calculus L h for a temporally grouped data model which they call M T G [CCT93].
Reference: [TAL92] <author> B. Theodoulidis, P. Alexakis and P. Loucopoulos. </author> <title> Verification and Validation of Temporal Business Rules. </title> <booktitle> In Proceeding of the 3rd International Workshop on the Deductive Approach to Information Systems and Databases, </booktitle> <address> Roses (Catalonia), Spain, </address> <month> September </month> <year> 1992. </year>
Reference-contexts: The notion of history structure introduced in the model, augments the basic ER constructs to create new constructs such as attribute-history and role-history. * The Temporal EER model [EWK93] is an extended ER model which accommodates temporal information for entities, relationships, superclasses/subclasses and attributes. * The Entity-Relationship-Time (ERT) model <ref> [TWL90, TLW91, TAL92, Theo93] </ref> is an ER-based formalism which makes a clear distinction between objects and relationships. On this basis, the ERT model accommodates the explicit modeling of time, taxonomic hierarchies and complex objects.
Reference: [Theo93] <author> C. Theodoulidis. </author> <title> Towards the First Generation of Temporal Information Servers. </title> <booktitle> In Proceedings of the 1st International Workshop on an Infrastructure for Temporal Databases, </booktitle> <address> Arlington, Texas, </address> <month> June </month> <year> 1993. </year>
Reference-contexts: The notion of history structure introduced in the model, augments the basic ER constructs to create new constructs such as attribute-history and role-history. * The Temporal EER model [EWK93] is an extended ER model which accommodates temporal information for entities, relationships, superclasses/subclasses and attributes. * The Entity-Relationship-Time (ERT) model <ref> [TWL90, TLW91, TAL92, Theo93] </ref> is an ER-based formalism which makes a clear distinction between objects and relationships. On this basis, the ERT model accommodates the explicit modeling of time, taxonomic hierarchies and complex objects.
Reference: [TLW91] <author> C. Theodoulidis, P. Loucopoulos and B. Wangler. </author> <title> The Entity Relationship Time Model and the Conceptual Rule Language. </title> <booktitle> In Proceedings of the 10th Conference on the Entity Relationship Approach, </booktitle> <address> San Mateo, CA, </address> <month> October </month> <year> 1991. </year>
Reference-contexts: The notion of history structure introduced in the model, augments the basic ER constructs to create new constructs such as attribute-history and role-history. * The Temporal EER model [EWK93] is an extended ER model which accommodates temporal information for entities, relationships, superclasses/subclasses and attributes. * The Entity-Relationship-Time (ERT) model <ref> [TWL90, TLW91, TAL92, Theo93] </ref> is an ER-based formalism which makes a clear distinction between objects and relationships. On this basis, the ERT model accommodates the explicit modeling of time, taxonomic hierarchies and complex objects.
Reference: [TWL90] <author> C. Theodoulidis, B. Wangler and p. </author> <booktitle> Loucopoulos Requirements Specification in TEMPORA In Proceedings of the 2nd Nordic Conference on Advanced Information Systems Engineering (CAiSE90), </booktitle> <address> Kista, Sweden, </address> <year> 1990. </year>
Reference-contexts: The notion of history structure introduced in the model, augments the basic ER constructs to create new constructs such as attribute-history and role-history. * The Temporal EER model [EWK93] is an extended ER model which accommodates temporal information for entities, relationships, superclasses/subclasses and attributes. * The Entity-Relationship-Time (ERT) model <ref> [TWL90, TLW91, TAL92, Theo93] </ref> is an ER-based formalism which makes a clear distinction between objects and relationships. On this basis, the ERT model accommodates the explicit modeling of time, taxonomic hierarchies and complex objects.
Reference: [WD92] <author> G. Wuu and U. Dayal. </author> <title> A Uniform Model for Temporal Object-Oriented Databases. </title> <booktitle> In Proceedings of the International Conference on Data Engineering, IEEE Computer Society, </booktitle> <year> 1992. </year>
Reference: [WD93] <author> G. Wuu and U. Dayal. </author> <title> A Uniform Model for Temporal and Versioned Object-oriented Databases. Chapter 10 of Temporal Databases: Theory, Design, and Implementation. </title> <address> Ben-jamin/Cummings, </address> <year> 1993, </year> <pages> pp. 230-247. </pages>
Reference-contexts: object-oriented data model that supports multiple time lines and schema histories and incorporates a temporal object-oriented algebra [RS93a, RS92] and a temporal object-oriented SQL [RS93b]. * The OSAM*/T model model and its associated query language called OQL/T [SC91, SKL89], is based on notion of time-varying association. * The OODAPLEX model <ref> [DW92, WD93] </ref> accommodates temporal data modeling through the notion of function. * The OOTempDBM model [CG93] captures the temporal semantics of objects through type inheritance. * The [KRS90] extends a complex object model by adding transaction and valid times to tuples. * The TIGUKAT [GO93] model incorporates time as an abstract
Reference: [WF90] <author> J. Widom and S.J. Finkelstein. </author> <title> Set-oriented production rules in a relational database system. </title> <booktitle> In Proceedings of ACM SIGMOD 1990 International Conference on Management of Data, </booktitle> <pages> pp. 259-270, </pages> <address> Atlantic City, NJ, </address> <month> May </month> <year> 1990. </year>
Reference: [WFW75] <author> G. Wiederhold, J.F. Fries and S. </author> <title> Weyl. Structured Organization of Clinical Databases. </title> <booktitle> In Proceedings of the NCC, </booktitle> <publisher> AFIPS Press, </publisher> <address> Montvale, New Jersey, </address> <year> 1975. </year> <note> 53 Workshop Call for Position Papers 54 </note>
References-found: 119

