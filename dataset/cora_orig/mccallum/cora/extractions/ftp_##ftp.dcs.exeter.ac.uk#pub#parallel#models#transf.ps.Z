URL: ftp://ftp.dcs.exeter.ac.uk/pub/parallel/models/transf.ps.Z
Refering-URL: http://www.dcs.exeter.ac.uk/reports/reports.html
Root-URL: 
Title: Transformations for the Optimistic Parallel Execution of Object-Oriented Programs  
Author: A. Back and S.J. Turner 
Address: Road, Exeter EX4 4PT England  
Affiliation: Department of Computer Science, University of Exeter, Prince of Wales  
Abstract: This paper discusses the use of optimistic execution as a mechanism for parallelizing sequential object-oriented programs. Most parallelizing compilers to date have used compile-time data-dependency analysis to determine independent sections of code. This reliance on static information presents an overly restrictive view of dependencies in a program. In this paper, a set of transformations is presented which allows the use of causality violation detection and roll-back. Selected objects are transformed into server objects, which are distributed across the nodes of a parallel computer. The asynchronous dispatch of server object methods introduces parallelism into the execution, in a way which preserves the semantics of the sequential code. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A Back and S Turner. </author> <title> Time-stamp generation for optimistic parallel computing. </title> <booktitle> In Proceedings of the 28th Annual Simulation Symposium, </booktitle> <address> Phoenix, AZ, </address> <pages> pages 144-53. </pages> <publisher> IEEE Press, </publisher> <month> April </month> <year> 1995. </year>
Reference-contexts: In general, the time-stamp allocation scheme must allow an arbitrary number of new time-stamps to be allocated between any pair of previously allocated time-stamps. An allocation scheme for generating and manipulating time-stamps efficiently is discussed in detail in <ref> [1] </ref>. 4 The Transformations There are three levels to the transformation system, as shown in figure 1: the heuristic level, the annotation level, and the underlying transformations. The annotation level provides an interface which will, in the future, allow the transformations to be directed by an heuristic analysis system. <p> Un bounded time-stamp generators are required for cases where it is not known how many time-stamps will be required for the range, for example, with loops with an exit condition which is determined at run-time. To meet these requirements, a variable length time-stamp scheme has been adopted <ref> [1] </ref>. Control Flow Objects For control constructs where the flow of control is determined by the result returned by a method of a server object, the control construct itself must be transformed to a replacement control flow object, which has the properties of a server object.
Reference: [2] <author> D F Bacon and R E Strom. </author> <title> Optimistic parallelization of communicating sequential processes. </title> <journal> ACM Sigplan notices, </journal> <volume> 26(7) </volume> <pages> 155-166, </pages> <year> 1991. </year>
Reference-contexts: To date, there has been little research in using such techniques to parallelize general purpose code: papers in this area have generally been proposals rather than descriptions of implementations. Bacon and Strom discuss the use of optimism in relation to CSP <ref> [2] </ref>. Fujimoto [7] has also suggested the use of optimism as a paralleliza-tion technique, using the Virtual Time Machine. Winter, Kalantery and Wilson [11] have proposed the use of mainly conservative synchronization techniques to provide a new parallel architecture model.
Reference: [3] <author> F Bodin, P Beckman, D Gannon, J Gotwals, S Narayana, S Srinivas, and B Winnicka. </author> <title> Sage ++ : An object-oriented toolkit and class library for building Fortran and C ++ restructuring tools. Object Oriented Numerics, </title> <year> 1994. </year>
Reference-contexts: The box marked "transformations" in figure 1 is the level which performs the parsing of C ++ code and the subsequent transformation of that code to allow optimistic execution. These transformations were implemented using the Sage ++ transformation tool <ref> [3] </ref>. The other components shown are a C ++ compiler and the run-time library, which is linked with the transformed code and provides the run-time support functions required for parallel execution. The run-time library is built on top of the p4 message passing system [4] which provides portability.
Reference: [4] <author> J Boyle, R Butler, T Disz, B Glickfeld, E Lusk, R Overbeek, J Patterson, and R Stevens. </author> <title> Portable Programs for Parallel Processors. </title> <publisher> Holt, Rinehart, and Winston, </publisher> <year> 1987. </year>
Reference-contexts: The other components shown are a C ++ compiler and the run-time library, which is linked with the transformed code and provides the run-time support functions required for parallel execution. The run-time library is built on top of the p4 message passing system <ref> [4] </ref> which provides portability.
Reference: [5] <author> K M Chandy and C Kesselman. </author> <title> Compositional C ++ : Compositional parallel programming. </title> <booktitle> In Proceedings of the Fourth Workshop on Parallel Computing and Compilers, </booktitle> <year> 1992. </year>
Reference-contexts: Winter, Kalantery and Wilson [11] have proposed the use of mainly conservative synchronization techniques to provide a new parallel architecture model. Our research also differs from the numerous parallel C ++ projects, for example CC ++ <ref> [5] </ref> or Mentat [9], in that these projects generally aim to define extensions to the C ++ language.
Reference: [6] <author> K M Chandy and J Misra. </author> <title> Distributed simulation: A case study in design and verification of distributed programs. </title> <journal> IEEE Trans. Software Engineering, </journal> <volume> S.E.5(5):440-452, </volume> <year> 1979. </year>
Reference-contexts: In PDES [8], there are broadly two approaches taken to ensuring that causality (the principle that events in the future cannot affect events in the past) is preserved in the simulation: conservative, and optimistic. The conservative approach <ref> [6] </ref> strictly avoids the possibility of any causality violation ever occurring. On the other hand, the optimistic approach allows causality violations to occur, but provides a recovery mechanism which is able to roll-back and undo the effect of such violations.
Reference: [7] <author> R M Fujimoto. </author> <title> The virtual time machine. </title> <booktitle> In SPAA (Symposium on Parallel Algorithms and Architectures), </booktitle> <pages> pages 199-208, </pages> <year> 1989. </year>
Reference-contexts: To date, there has been little research in using such techniques to parallelize general purpose code: papers in this area have generally been proposals rather than descriptions of implementations. Bacon and Strom discuss the use of optimism in relation to CSP [2]. Fujimoto <ref> [7] </ref> has also suggested the use of optimism as a paralleliza-tion technique, using the Virtual Time Machine. Winter, Kalantery and Wilson [11] have proposed the use of mainly conservative synchronization techniques to provide a new parallel architecture model.
Reference: [8] <author> R M Fujimoto. </author> <title> Parallel discrete event simulation. </title> <journal> Communications of the ACM, </journal> <volume> 33(10) </volume> <pages> 30-53, </pages> <year> 1990. </year>
Reference-contexts: With this approach, a parallel execution can be derived automatically and this execution can be guaranteed to have identical semantics to the sequential one. 2 Optimistic Execution The optimistic approach is based on ideas taken from parallel discrete event simulation (PDES). In PDES <ref> [8] </ref>, there are broadly two approaches taken to ensuring that causality (the principle that events in the future cannot affect events in the past) is preserved in the simulation: conservative, and optimistic. The conservative approach [6] strictly avoids the possibility of any causality violation ever occurring. <p> In the "Time Warp" mechanism, an event message that causes roll-back may require the mechanism to perform two actions: restoring the state of the object and canceling all intermediate side effects by "unsending" previously sent messages <ref> [8] </ref>. The first action is accomplished by regularly saving the object's state, and restoring an old state on roll-back. "Unsending" a previously sent message is accomplished by sending an anti-message that annihilates the original when it reaches its destination. <p> The state-saving method used is an object-oriented hybrid incremental state-saver. This can perform state-saving on objects at arbitrary levels in the object-oriented class hierarchy. The overhead of rollback may often be reduced or eliminated by applying one of a number of optimizations <ref> [8] </ref>: these include lazy cancellation, lazy re-evaluation, and avoidance of roll-back for methods which do not modify an object's state. The time-stamps required for the optimistic execution of general purpose code have more demanding requirements than those normally used for parallel discrete event simulation.
Reference: [9] <author> A Grimshaw and J Liu. </author> <title> Mentat an object-oriented macro data flow system. </title> <booktitle> In OOPSLA Conference on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <pages> pages 35-47, </pages> <year> 1987. </year>
Reference-contexts: Winter, Kalantery and Wilson [11] have proposed the use of mainly conservative synchronization techniques to provide a new parallel architecture model. Our research also differs from the numerous parallel C ++ projects, for example CC ++ [5] or Mentat <ref> [9] </ref>, in that these projects generally aim to define extensions to the C ++ language. Such extensions provide explicit ways of expressing parallelism, whereas our approach is to extract parallelism from an object-oriented program, whilst preserving the semantics of the original sequential execution through the use of optimistic methods.
Reference: [10] <author> D R Jefferson. </author> <title> Virtual time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(3) </volume> <pages> 404-425, </pages> <year> 1985. </year>
Reference-contexts: Such a system thus avoids the restrictions associated with compilers based on static data-dependency analysis alone. Optimistic methods such as the "Time Warp" <ref> [10] </ref> mechanism have been successfully used in parallel discrete event simulation, but to date there has been little research in using such techniques to parallelize general purpose programs.
Reference: [11] <author> S Winter, N Kalantery, and D Wilson. </author> <title> From BSP to a virtual von Neumann machine. </title> <booktitle> In BCS Parallel Processing Specialist Group Workshop, </booktitle> <pages> pages 92-99, </pages> <year> 1993. </year>
Reference-contexts: Bacon and Strom discuss the use of optimism in relation to CSP [2]. Fujimoto [7] has also suggested the use of optimism as a paralleliza-tion technique, using the Virtual Time Machine. Winter, Kalantery and Wilson <ref> [11] </ref> have proposed the use of mainly conservative synchronization techniques to provide a new parallel architecture model. Our research also differs from the numerous parallel C ++ projects, for example CC ++ [5] or Mentat [9], in that these projects generally aim to define extensions to the C ++ language.
References-found: 11

