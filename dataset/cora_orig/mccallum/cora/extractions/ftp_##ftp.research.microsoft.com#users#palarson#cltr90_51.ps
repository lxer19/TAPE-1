URL: ftp://ftp.research.microsoft.com/users/palarson/cltr90_51.ps
Refering-URL: http://www.research.microsoft.com/~palarson/publications.htm
Root-URL: http://www.research.microsoft.com
Title: Update Strategies for Derived Relations  
Author: Neil Coburn and Per -Ake Larson 
Address: Waterloo, Canada  
Affiliation: University of Waterloo  
Pubnum: Report CS-90-51 (Revised Report CS-89-25)  
Abstract: Consider a database containing not only base relations but also stored derived relations (also called materialized or concrete views). When a base relation is updated, it may also be necessary to update some of the derived relations. This paper gives sufficient and necessary conditions for detecting when an update of a base relation cannot affect a derived relation (an irrelevant update), and for detecting when a derived relation can be correctly updated using no data other than the derived relation itself and the given update operation (an autonomously computable update). The class of derived relations considered is restricted to those defined by PSJ-expressions, that is, any relational algebra expression constructed from an arbitrary number of project, select, and join operations (with no self-joins). The class of update operations consists of insertions, deletions, and modifications. This paper is more general, than previously reported work in this area, in two ways. First, the set of tuples to be deleted or modified is specified by a selection condition containing the attributes of an arbitrary set of relations not just attributes of the relation being updated. Second, the theory presented here incorporates knowledge of the functional dependencies implied by the key of a relation. fl This research was supported by Cognos, Inc., Ottawa under contract WRI 502-12; by a Natural Sciences and Engineering Research Council of Canada (NSERC) Postgraduate Scholarship; under NSERC grant No. A-2460; and by ITRC: Information Technology Research Centre. Authors' addresses: N. Coburn and P. A. Larson, Department of Computer Science, University of Waterloo, Waterloo, Ontario, N2L 3G1 Canada. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Michel E. Adiba and Bruce G. Lindsay. </author> <title> "Database Snapshots." In Update Strategies for Derived Relations 59 Proc. </title> <booktitle> of the 6th. International Conference on Very Large Databases, </booktitle> <address> (Montreal, </address> <year> 1980), </year> <pages> 86-91. </pages>
Reference-contexts: If the request is submitted at a remote site, then we need to send only the update request itself to the site of the derived relation. As well, the results presented here provide a starting point for devising a general mechanism for database snapshot refresh <ref> [1, 7, 17] </ref>. In the next section we outline the assumptions and notation used in this paper. Section 3 outlines some basic concepts which we will use later.
Reference: [2] <author> D.S. Batory. </author> <title> "Modeling the Storage Architectures of Commercial Database Systems." </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 10, No. 4, </volume> <month> (December </month> <year> 1985), </year> <pages> 463-528. </pages>
Reference-contexts: In current systems there is, typically, a one-to-one correspondence, in terms of data contents, between conceptual relations and stored relations. (However, an implementation may map stored relations into physical files in various ways, see Batory <ref> [2] </ref>.) This is a simple and straightforward solution, but its drawback is that the processing of a query often requires data to be collected from several stored relations. Instead of directly storing each conceptual relation, we propose structuring the stored database as a set of derived relations.
Reference: [3] <author> Philip A. Bernstein and Barbara T. Blaustein. </author> <title> "A Simplification Algorithm for Integrity Assertions and Concrete Views." </title> <booktitle> In Proc. </booktitle> <address> COMPSAC 81 , (Chicago, </address> <year> 1981), </year> <pages> 90-99. </pages>
Reference-contexts: However, determining whether it does, requires accessing the data in the database. The idea of detecting irrelevant updates has appeared previously in several forms. In Buneman and Clemons [8], on the support of triggers and alerters, they are called readily ignorable updates and in Bernstein and Blaustein <ref> [3] </ref>, on the support of integrity constraints, they are called trivial tests. Maier and Ullman [19] study updates to relation fragments. In their work a fragment may be a physical or virtual relation over a single relation schema, defined by selection and union operators on physical or other virtual relations.
Reference: [4] <author> Jose A. Blakeley. </author> <title> Updating Materialized Database Views. </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, University of Waterloo, </institution> <year> 1987. </year>
Reference-contexts: When a set of tuples is, say, inserted into f 1 only those tuples which satisfy fi 12 will be transferred to f 2 . Tuples not satisfying fi 12 are irrelevant to f 2 . This work improves upon previous work (including our own <ref> [4, 5, 6, 9] </ref>) in several respects: (1) the update operations we support are more general than the ones supported in any of the above related papers, (2) we provide necessary and sufficient conditions for the detection of irrelevant updates, and (3) we incorporate knowledge of the functional dependencies implied by <p> For results on conditionally autonomously computable updates the reader is referred to Blakeley <ref> [4] </ref> or Tompa and Blakeley [22]. Definition 8.1 Consider a derived relation definition E and an update operation U , both defined over the database schema D. Let d denote an instance of D before applying U and d 0 the corresponding instance after applying U .
Reference: [5] <author> Jose A. Blakeley, Neil Coburn, and Per -Ake Larson. </author> <title> "Updating Derived Relations: Detecting Irrelevant and Autonomously Computable Updates." </title> <booktitle> In Proc. of the 12th International Conference on Very Large Data Bases, </booktitle> <address> (Kyoto, </address> <year> 1986), </year> <pages> 457-466. </pages>
Reference-contexts: When a set of tuples is, say, inserted into f 1 only those tuples which satisfy fi 12 will be transferred to f 2 . Tuples not satisfying fi 12 are irrelevant to f 2 . This work improves upon previous work (including our own <ref> [4, 5, 6, 9] </ref>) in several respects: (1) the update operations we support are more general than the ones supported in any of the above related papers, (2) we provide necessary and sufficient conditions for the detection of irrelevant updates, and (3) we incorporate knowledge of the functional dependencies implied by <p> in F M (t 1 ) the value of L should be 21. 2 12 Discussion Necessary and sufficient conditions for detecting when an update operation is irrelevant to a derived relation (or view, or integrity constraint), for a nontrivial class of updates and derived relations, were first presented in <ref> [5] </ref> and more fully in [6]. The concept of autonomously computable updates was also introduced there. This paper expands on these by considering a broader class of update operations and by taking into account knowledge of the primary keys of relations.
Reference: [6] <author> Jose A. Blakeley, Neil Coburn, and Per -Ake Larson. </author> <title> "Updating Derived Relations: Detecting Irrelevant and Autonomously Computable Updates." </title> <journal> ACM Transactions on Database Systems), </journal> <volume> Vol. 14, No. 3, </volume> <month> (September </month> <year> 1989), </year> <pages> 369-400. </pages>
Reference-contexts: The special case where the selection query only refers to R u (the single relation case) has been reported previously and is not dealt with specifically in this paper; the interested reader is referred to Blakeley, Coburn, and Larson <ref> [6] </ref>. The set of expressions F M is assumed to contain an update expression for each attribute in R u . Further, we assume that all the attributes involved in the update expressions are from relation R u . <p> It is important to remember that the values used to test the satisfiability of a given condition must be drawn from the appropriate domains. Thus, the domain bound conditions will not be included in any expression. For a restricted class of conjunctive Boolean expressions, polynomial algorithms exist: <ref> [6, 9, 15, 24] </ref> are all based on an algorithm of Rosenkrantz Update Strategies for Derived Relations 9 and Hunt [20]. An expression not in conjunctive form can be handled by first converting it into disjunctive normal form and then testing each term of the disjunction separately. <p> When a set of tuples is, say, inserted into f 1 only those tuples which satisfy fi 12 will be transferred to f 2 . Tuples not satisfying fi 12 are irrelevant to f 2 . This work improves upon previous work (including our own <ref> [4, 5, 6, 9] </ref>) in several respects: (1) the update operations we support are more general than the ones supported in any of the above related papers, (2) we provide necessary and sufficient conditions for the detection of irrelevant updates, and (3) we incorporate knowledge of the functional dependencies implied by <p> In addition we have an algorithm, for actually testing these conditions, which handles a large and commonly occurring class of atomic conditions; see <ref> [6, 9] </ref>. 5 Irrelevant Insertions An insert operation INSERT (R u ; T ) is irrelevant to a derived relation if none of the new tuples will be visible in the derived relation. Note that this should hold regardless of the state of the database. <p> Consider a tuple that is to be modified. In <ref> [6] </ref> we proved that for R M = fR u g this tuple will not affect the derived relation if and only if one of the following conditions applies: * it does not qualify for the derived relation, neither before nor after the modification * it does qualify for the derived <p> ) the value of L should be 21. 2 12 Discussion Necessary and sufficient conditions for detecting when an update operation is irrelevant to a derived relation (or view, or integrity constraint), for a nontrivial class of updates and derived relations, were first presented in [5] and more fully in <ref> [6] </ref>. The concept of autonomously computable updates was also introduced there. This paper expands on these by considering a broader class of update operations and by taking into account knowledge of the primary keys of relations. In the model we use each (base) relation has one key; a primary key.
Reference: [7] <author> Jose A. Blakeley, Per -Ake Larson, and Frank Wm. Tompa. </author> <title> "Efficiently Updating Materialized Views." </title> <booktitle> In Proc. of the ACM SIGMOD International Conference on Management of Data, </booktitle> <address> (Washington, </address> <year> 1986), </year> <pages> 61-71. </pages>
Reference-contexts: If the request is submitted at a remote site, then we need to send only the update request itself to the site of the derived relation. As well, the results presented here provide a starting point for devising a general mechanism for database snapshot refresh <ref> [1, 7, 17] </ref>. In the next section we outline the assumptions and notation used in this paper. Section 3 outlines some basic concepts which we will use later. <p> Note that this should hold regardless of the state of the database. The following theorem was proven in <ref> [7] </ref> and is included here for completeness. Theorem 5.1 Consider an update operation U = INSERT (R u ; T ) and a derived relation defined by E = (A; R; C), where U is not trivially irrelevant to 14 Coburn and Larson E. <p> However, these results are only preliminary, much more work is still required on finding efficient ways to actually update the derived relations. Some related results are presented in <ref> [7, 22] </ref>.
Reference: [8] <author> O. Peter Buneman and Eric K. Clemons. </author> <title> "Efficiently Monitoring Relational Databases." </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 4, No. 3, </volume> <month> (September </month> <year> 1979), </year> <pages> 368-382. </pages>
Reference-contexts: The query transformation problem has been addressed in papers by Larson and Yang [15, 16, 24, 25]. Although our main motivation for studying the problem stems from the above project, its solution also has applications in other areas of relational databases. Buneman and Clemons <ref> [8] </ref> proposed using views (that is, virtual derived relations) for the support of alerters. An alerter monitors the database and reports when a certain state (defined by the view associated with the alerter) has been reached. Hammer and Sarin [13] proposed a method for detecting violations of integrity constraints. <p> However, determining whether it does, requires accessing the data in the database. The idea of detecting irrelevant updates has appeared previously in several forms. In Buneman and Clemons <ref> [8] </ref>, on the support of triggers and alerters, they are called readily ignorable updates and in Bernstein and Blaustein [3], on the support of integrity constraints, they are called trivial tests. Maier and Ullman [19] study updates to relation fragments.
Reference: [9] <author> Neil Coburn. </author> <title> Updating Derived Relations. </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, University of Waterloo, </institution> <year> 1988. </year>
Reference-contexts: We have implemented a simple prototype capable of detecting irrelevant and (serially) autonomously computable updates (see <ref> [9] </ref>). Testing the conditions eventually requires testing the satisfiability of certain Boolean expressions, which, in general, is an NP-complete problem. Even though we impose some restrictions on the atomic conditions from which the Boolean expressions are built, we cannot avoid the exponential growth characteristic of NP-complete problems. <p> It is important to remember that the values used to test the satisfiability of a given condition must be drawn from the appropriate domains. Thus, the domain bound conditions will not be included in any expression. For a restricted class of conjunctive Boolean expressions, polynomial algorithms exist: <ref> [6, 9, 15, 24] </ref> are all based on an algorithm of Rosenkrantz Update Strategies for Derived Relations 9 and Hunt [20]. An expression not in conjunctive form can be handled by first converting it into disjunctive normal form and then testing each term of the disjunction separately. <p> When a set of tuples is, say, inserted into f 1 only those tuples which satisfy fi 12 will be transferred to f 2 . Tuples not satisfying fi 12 are irrelevant to f 2 . This work improves upon previous work (including our own <ref> [4, 5, 6, 9] </ref>) in several respects: (1) the update operations we support are more general than the ones supported in any of the above related papers, (2) we provide necessary and sufficient conditions for the detection of irrelevant updates, and (3) we incorporate knowledge of the functional dependencies implied by <p> In addition we have an algorithm, for actually testing these conditions, which handles a large and commonly occurring class of atomic conditions; see <ref> [6, 9] </ref>. 5 Irrelevant Insertions An insert operation INSERT (R u ; T ) is irrelevant to a derived relation if none of the new tuples will be visible in the derived relation. Note that this should hold regardless of the state of the database. <p> The results obtained from experiments using the prototype are encouraging. It appears that, in practice, the tests for irrelevant and autonomously computable updates can be computed very efficiently. Interested readers are referred to <ref> [9] </ref> for more details on implementation issues and experimental results. An important open problem is to find efficient algorithms for more general types of atomic conditions. The core of such an algorithm is a procedure for testing whether a set of inequalities/equalities can all be simultaneously satisfied. <p> We have developed a naive algorithm for updating derived relations. Also, we have obtained some results which guarantee that we collect values for the minimum number of attributes for each derived relation <ref> [9] </ref>. However, these results are only preliminary, much more work is still required on finding efficient ways to actually update the derived relations. Some related results are presented in [7, 22].
Reference: [10] <author> C.J. Date. </author> <title> An Introduction To Database Systems, Fifth Edition. </title> <publisher> Addison-Wesley, </publisher> <address> Menlo Park, CA (1990). </address>
Reference-contexts: In a similar fashion, we deal with (serially) autonomously computable updates in Sections 8 to 11. We conclude the paper with a discussion in Section 12. 2 Notation and Basic Assumptions We assume that the reader is familiar with the basic concepts of relational databases as in Date <ref> [10] </ref>, Korth and Silberschatz [14], Maier [18], or Ull-man [23]. <p> selection condition C of a derived relation is C (H &gt; 30) ^ (I = J ), then C (F M ) (H + 20 &gt; 30) ^ (15 = J): Assuming that the domains of the variables H , I, and J are given by the ranges [0; 50], <ref> [10; 100] </ref>, and [0; 200], respectively, we obtain: C B (0 H )(H 50) ^ (10 I)(I 100) ^ (0 J)(J 200) ^ (10 15)(15 100) ^ (0 J)(J 200): Suppose we wish to partially evaluate condition C (F M ) using tuple t.
Reference: [11] <author> U. Dayal, B. Blaustein, A. Buchmann, U. Chakravarthy, M. Hsu, R. Ledin, D. McCarthy, A. Rosenthal, S. Sarin, M.J. Carey, M. Livny, and R. Jauhari. </author> <title> "The HiPAC Project: Combining Active Databases and Timing Constraints." </title> <booktitle> Sigmod Record , Vol. </booktitle> <volume> 17, No. 1, </volume> <month> (March </month> <year> 1988), </year> <pages> 51-70. </pages>
Reference-contexts: The use of derived relations for the support of real-time queries was suggested by Gardarin et al. [12] and by Dayal et al. <ref> [11] </ref>. Stonebraker et al. [21] suggest that the results of database procedures be stored for future use; updating the stored results is similar to updating a derived relation. Our results have direct application in each these areas.
Reference: [12] <author> G. Gardarin, E. Simon, and L. Verlaine. </author> <title> "Querying Real Time Relational Data Bases." </title> <booktitle> In IEEE-ICC International Conference, </booktitle> <address> (Amster-dam, </address> <year> 1984), </year> <pages> 757-761. </pages> <note> 60 Coburn and Larson </note>
Reference-contexts: The use of derived relations for the support of real-time queries was suggested by Gardarin et al. <ref> [12] </ref> and by Dayal et al. [11]. Stonebraker et al. [21] suggest that the results of database procedures be stored for future use; updating the stored results is similar to updating a derived relation. Our results have direct application in each these areas.
Reference: [13] <author> Michael Hammer and Sunil K. Sarin. </author> <title> "Efficient Monitoring of Database Assertions." </title> <booktitle> In Supplement Proc. ACM SIGMOD International Conference on Management of Data, </booktitle> <address> (Austin, </address> <year> 1978), </year> <month> 159. </month>
Reference-contexts: Buneman and Clemons [8] proposed using views (that is, virtual derived relations) for the support of alerters. An alerter monitors the database and reports when a certain state (defined by the view associated with the alerter) has been reached. Hammer and Sarin <ref> [13] </ref> proposed a method for detecting violations of integrity constraints. Certain types of integrity con 4 Coburn and Larson straints can be seen as defining a view.
Reference: [14] <author> H.F. Korth and A. Silberschatz. </author> <title> Database System Concepts. </title> <publisher> McGraw-Hill, </publisher> <address> New York, NY (1986). </address>
Reference-contexts: We conclude the paper with a discussion in Section 12. 2 Notation and Basic Assumptions We assume that the reader is familiar with the basic concepts of relational databases as in Date [10], Korth and Silberschatz <ref> [14] </ref>, Maier [18], or Ull-man [23].
Reference: [15] <author> Per -Ake Larson and H.Z. Yang. </author> <title> "Computing Queries from Derived Relations." </title> <booktitle> In Proc. of the 11th International Conference on Very Large Data Bases, </booktitle> <address> (Stockholm, </address> <year> 1985), </year> <pages> 259-269. </pages>
Reference-contexts: The same type of transformation is necessary to process user queries. That is, any query posed against the conceptual relations must be transformed into an equivalent query against the stored relations. The query transformation problem has been addressed in papers by Larson and Yang <ref> [15, 16, 24, 25] </ref>. Although our main motivation for studying the problem stems from the above project, its solution also has applications in other areas of relational databases. Buneman and Clemons [8] proposed using views (that is, virtual derived relations) for the support of alerters. <p> It is important to remember that the values used to test the satisfiability of a given condition must be drawn from the appropriate domains. Thus, the domain bound conditions will not be included in any expression. For a restricted class of conjunctive Boolean expressions, polynomial algorithms exist: <ref> [6, 9, 15, 24] </ref> are all based on an algorithm of Rosenkrantz Update Strategies for Derived Relations 9 and Hunt [20]. An expression not in conjunctive form can be handled by first converting it into disjunctive normal form and then testing each term of the disjunction separately. <p> Similar remarks apply to C B (F M ). Update Strategies for Derived Relations 11 3 Basic Concepts The concepts covered by the following definitions are required in the rest of this paper and were originally introduced by Larson and Yang <ref> [15] </ref>. Definition 3.1 Let C 0 and C 1 be Boolean expressions over the variables x 1 ; x 2 ; : : : ; x n . <p> Then A + = A ud is called the extended attribute set of E. 2 Larson and Yang <ref> [15] </ref> proved that A + is the maximal set of attributes for which values can be reconstructed for every tuple of E. <p> A procedure for computing uniquely determined values can be found in Larson <ref> [15] </ref> and in more detail in Yang [24]. As (f A ) gives the new value for attribute A, this means that the given condition and the visible attributes contain sufficient Update Strategies for Derived Relations 53 information to determine the updated values of A.
Reference: [16] <author> Per -Ake Larson and H.Z. Yang. </author> <title> "Computing Queries from Derived Relations: </title> <note> Theoretical Foundations." (to appear in ACM Transactions on Database Systems.). </note>
Reference-contexts: The same type of transformation is necessary to process user queries. That is, any query posed against the conceptual relations must be transformed into an equivalent query against the stored relations. The query transformation problem has been addressed in papers by Larson and Yang <ref> [15, 16, 24, 25] </ref>. Although our main motivation for studying the problem stems from the above project, its solution also has applications in other areas of relational databases. Buneman and Clemons [8] proposed using views (that is, virtual derived relations) for the support of alerters.
Reference: [17] <author> Bruce Lindsay, Laura Haas, C. Mohan, Hamid Pirahesh, and Paul Wilms. </author> <title> "A Snapshot Differential Refresh Algorithm." </title> <booktitle> In Proceedings of the ACM SIGMOD International Conference on Management of Data, </booktitle> <address> (Washington, </address> <year> 1986), </year> <pages> 53-60. </pages>
Reference-contexts: If the request is submitted at a remote site, then we need to send only the update request itself to the site of the derived relation. As well, the results presented here provide a starting point for devising a general mechanism for database snapshot refresh <ref> [1, 7, 17] </ref>. In the next section we outline the assumptions and notation used in this paper. Section 3 outlines some basic concepts which we will use later.
Reference: [18] <author> David Maier. </author> <title> The Theory of Relational Databases. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD (1983). </address>
Reference-contexts: We conclude the paper with a discussion in Section 12. 2 Notation and Basic Assumptions We assume that the reader is familiar with the basic concepts of relational databases as in Date [10], Korth and Silberschatz [14], Maier <ref> [18] </ref>, or Ull-man [23].
Reference: [19] <author> David Maier and Jeffrey D. </author> <title> Ullman "Fragments of Relations." </title> <booktitle> In SIG-MOD'83 Proc. of Annual Meeting, Sigmod Record , Vol. </booktitle> <volume> 13, No. 4, </volume> <month> (De-cember </month> <year> 1983), </year> <pages> 15-22. </pages>
Reference-contexts: In Buneman and Clemons [8], on the support of triggers and alerters, they are called readily ignorable updates and in Bernstein and Blaustein [3], on the support of integrity constraints, they are called trivial tests. Maier and Ullman <ref> [19] </ref> study updates to relation fragments. In their work a fragment may be a physical or virtual relation over a single relation schema, defined by selection and union operators on physical or other virtual relations.
Reference: [20] <author> Daniel J. Rosenkrantz and Harry B. Hunt III. </author> <title> "Processing Conjunctive Predicates and Queries." </title> <booktitle> In Proc. of the 6th International Conference on Very Large Data Bases, </booktitle> <address> (Montreal, </address> <year> 1980), </year> <pages> 64-72. </pages>
Reference-contexts: Thus, the domain bound conditions will not be included in any expression. For a restricted class of conjunctive Boolean expressions, polynomial algorithms exist: [6, 9, 15, 24] are all based on an algorithm of Rosenkrantz Update Strategies for Derived Relations 9 and Hunt <ref> [20] </ref>. An expression not in conjunctive form can be handled by first converting it into disjunctive normal form and then testing each term of the disjunction separately. In the worst case, this may cause the number of atomic conditions to grow exponentially.
Reference: [21] <author> Michael Stonebraker, Jeff Anton, and Eric Hanson. </author> <title> "Extending a Database System with Procedures." </title> <journal> ACM Transactions on Database Systems, </journal> <volume> Vol. 12, No. 3, </volume> <month> (September </month> <year> 1987), </year> <pages> 350-376. </pages>
Reference-contexts: The use of derived relations for the support of real-time queries was suggested by Gardarin et al. [12] and by Dayal et al. [11]. Stonebraker et al. <ref> [21] </ref> suggest that the results of database procedures be stored for future use; updating the stored results is similar to updating a derived relation. Our results have direct application in each these areas. The detection of irrelevant or autonomously computable updates also has applications in distributed databases.
Reference: [22] <author> Frank Wm. Tompa and Jose A. Blakeley. </author> <title> "Maintaining Materialized Views Without Accessing Base Data." </title> <journal> Information Systems, </journal> <volume> Vol. 13, No. 4, </volume> <year> (1988), </year> <pages> 393-406. </pages>
Reference-contexts: For results on conditionally autonomously computable updates the reader is referred to Blakeley [4] or Tompa and Blakeley <ref> [22] </ref>. Definition 8.1 Consider a derived relation definition E and an update operation U , both defined over the database schema D. Let d denote an instance of D before applying U and d 0 the corresponding instance after applying U . <p> However, these results are only preliminary, much more work is still required on finding efficient ways to actually update the derived relations. Some related results are presented in <ref> [7, 22] </ref>.
Reference: [23] <author> J.D. Ullman. </author> <title> Principles of Database and Knowledgebase Systems, Volume I. </title> <publisher> Computer Science Press, </publisher> <address> Rockville, MD (1988). </address>
Reference-contexts: We conclude the paper with a discussion in Section 12. 2 Notation and Basic Assumptions We assume that the reader is familiar with the basic concepts of relational databases as in Date [10], Korth and Silberschatz [14], Maier [18], or Ull-man <ref> [23] </ref>.
Reference: [24] <author> Hongzhi Yang. </author> <title> Query Transformation. </title> <type> Ph.D. Thesis, </type> <institution> Department of Computer Science, University of Waterloo, </institution> <year> 1987. </year>
Reference-contexts: The same type of transformation is necessary to process user queries. That is, any query posed against the conceptual relations must be transformed into an equivalent query against the stored relations. The query transformation problem has been addressed in papers by Larson and Yang <ref> [15, 16, 24, 25] </ref>. Although our main motivation for studying the problem stems from the above project, its solution also has applications in other areas of relational databases. Buneman and Clemons [8] proposed using views (that is, virtual derived relations) for the support of alerters. <p> We state the following without proof: Every valid PSJ-expression (without self-joins) can be transformed into an equivalent expression in a standard form consisting of a Cartesian product, followed by a selection, followed by a projection (for a proof see Yang <ref> [24] </ref>). It is easy to see this by considering the query tree corresponding to a PSJ-expression. The standard form is obtained by first pushing all projections to the root of the tree and thereafter all selection and join conditions. <p> It is important to remember that the values used to test the satisfiability of a given condition must be drawn from the appropriate domains. Thus, the domain bound conditions will not be included in any expression. For a restricted class of conjunctive Boolean expressions, polynomial algorithms exist: <ref> [6, 9, 15, 24] </ref> are all based on an algorithm of Rosenkrantz Update Strategies for Derived Relations 9 and Hunt [20]. An expression not in conjunctive form can be handled by first converting it into disjunctive normal form and then testing each term of the disjunction separately. <p> Yang <ref> [24] </ref> described a procedure for reconstructing the values of uniquely determined variables. If the variable y i is not uniquely determined, then we cannot guarantee that its value is reconstructible for every tuple. However, it may still be reconstructible for some tuples. <p> An attribute not mentioned in C cannot be uniquely determined and, thus, cannot be in A + . The complete proofs and procedures for determining surrogate values, uniquely determined attribute values, and extended attribute sets are given in Yang <ref> [24] </ref>. 4 Detecting Irrelevant Updates In certain cases, when an update operation is applied to a relation it has no effect on the state of a particular derived relation. When this occurs independently of the database state, we call the update operation irrelevant to the derived relation. <p> A procedure for computing uniquely determined values can be found in Larson [15] and in more detail in Yang <ref> [24] </ref>. As (f A ) gives the new value for attribute A, this means that the given condition and the visible attributes contain sufficient Update Strategies for Derived Relations 53 information to determine the updated values of A.
Reference: [25] <author> H.Z. Yang and Per -Ake Larson. </author> <title> "Query Transformation for PSJ-queries." </title> <booktitle> In Proc. of the 13th International Conference on Very Large Data Bases, </booktitle> <address> (Brighton, </address> <year> 1987), </year> <pages> 245-254. </pages>
Reference-contexts: The same type of transformation is necessary to process user queries. That is, any query posed against the conceptual relations must be transformed into an equivalent query against the stored relations. The query transformation problem has been addressed in papers by Larson and Yang <ref> [15, 16, 24, 25] </ref>. Although our main motivation for studying the problem stems from the above project, its solution also has applications in other areas of relational databases. Buneman and Clemons [8] proposed using views (that is, virtual derived relations) for the support of alerters.
References-found: 25

