URL: ftp://ftp.icsi.berkeley.edu/pub/techreports/1995/tr-95-050.ps.gz
Refering-URL: http://www.icsi.berkeley.edu/techreports/1995.html
Root-URL: http://www.icsi.berkeley.edu
Title: Imperative Concurrent Object-Oriented Languages combine both developments. Always the prime objective was to provide the
Author: Michael Philippsen 
Keyword: Categories and Subject Descriptors: General Terms: Languages, Object-Orientation, Parallelism, Concurrency  
Note: Part I, Version  Unnumbered proposals have been made to  On leave from  
Address: I 1947 Center St. Suite 600 Berkeley, California 94704-1198  
Affiliation: INTERNATIONAL COMPUTER SCIENCE INSTITUTE  Department of Computer Science, University of Karlsruhe, Germany  
Email: phlipp  
Phone: (510) 643-9153 FAX (510) 643-7684  
Web: icsi.berkeley.edu TR-95-050  
Date: 0, August 1995  
Abstract: During the last decade object-oriented programming has grown from marginal influence into widespread acceptance. During the same period of time, progress on the side of hardware and networking has changed the computing environment from sequential to parallel. Multi-processor workstations are state-of-the-art. However, combining both concepts has proven itself to be a notoriously difficult task. Depending on the approach, often key characteristics of either the object-oriented paradigm or key performance factors of parallelism are sacrificed, often resulting in unsatisfactory languages. This survey first recapitulates well-known characteristics of both the object-oriented paradigm and parallel programming, before the design space of a combination is marked out by identifying various interdependences of key concepts. The design space is then filled with data points: For proposed languages we provide brief characteristics and feature tables. Both feature tables and the comprehensive bibliography listing might help to identify open questions and to prevent re-inventions. For "Web-Surfers" we provide a wealth of interesting addresses. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Bruno Achauer. </author> <title> The DOWL distributed object-oriented language. </title> <journal> Communications of the ACM, </journal> <volume> 36(9) </volume> <pages> 48-55, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: S. Sunderam ! vss@mathcs.emory.edu Charles Hartley ! skip@mathcs.emory.edu DOWL, distributed Trellis/Owl <ref> [1, 2] </ref> y t i v i t c a y r a d n u o b Bruno Achauer ! bruno@tk.telematik.informatik.uni-karlsruhe.de dpSather [209] H H A A H H A A y t i v i t c a y r a d n u o b Heinz Schmidt !
Reference: [2] <author> Bruno Achauer. </author> <title> Implementation of distributed Trellis. </title> <booktitle> In Proc. of ECOOP'93 7th European Conf. on Object-Oriented Programming, number 707 in Lecture Notes in Computer Science, </booktitle> <pages> pages 103-117, </pages> <address> Kaiserslautern, Germany, July 26-30, 1993. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: S. Sunderam ! vss@mathcs.emory.edu Charles Hartley ! skip@mathcs.emory.edu DOWL, distributed Trellis/Owl <ref> [1, 2] </ref> y t i v i t c a y r a d n u o b Bruno Achauer ! bruno@tk.telematik.informatik.uni-karlsruhe.de dpSather [209] H H A A H H A A y t i v i t c a y r a d n u o b Heinz Schmidt !
Reference: [3] <author> W. B. Ackerman. </author> <title> Data flow languages. </title> <journal> Computer, </journal> <volume> 15(2) </volume> <pages> 15-25, </pages> <month> February </month> <year> 1982. </year>
Reference-contexts: For example in the expression f (g (1),g (2)) the compiler can execute both invocations of g concurrently. Several dataflow languages are based on this principle, e.g., VAL <ref> [3] </ref> and Id90 [80]. And/Or-Parallelism Logic programs consist of sequences of clauses as shown in the following example: A :- B, C Each of the clauses has a declarative meaning which results from the underlying Horn logic.
Reference: [4] <institution> The Programming Language Ada Reference Manual, </institution> <year> 1983. </year>
Reference-contexts: Object-based language that do not offer classes but offer a mechanism to clone objects, i.e., to make several objects that adhere to a common interface and implementation are called prototype-based languages (see for example [40]). The difference between classes and Ada's packages <ref> [4] </ref> is that classes determine types of the language. Objects of a class instantiate this type. Packages cannot be used to instantiate objects, but are only used to encapsulate types. Class-based programming languages enforce a programming style which is desirable from the software engineer's point of view.
Reference: [5] <author> Gul Agha and Christian J. Callsen. Ac-torSpaces: </author> <title> An open distributed programming paradigm. </title> <booktitle> In Proc. of the 4th ACM Symp. on Principles & Practice of Parallel Programming, </booktitle> <pages> pages 23-32, </pages> <month> May </month> <year> 1993. </year> <note> Appears also as ACM SIGPLAN Notices 28(7), </note> <month> July </month> <year> 1993. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b http://web.yl.is.s.u-tokyo.ac.jp/members/briot/actalk/actalk.html ftp://camille.is.s.u-tokyo.ac.jp/pub/members/briot/actalk ftp://ftp.ibp.fr/ibp/softs/litp/actalk Jean-Pierre Briot ! briot@is.s.u-tokyo.ac.jp ActorSpace <ref> [5, 49] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H
Reference: [6] <author> Gul A. Agha. </author> <title> ACTORS: A Model of Concurrent Computation in Distributed Systems. </title> <booktitle> Series in Artificial Intelligence. </booktitle> <publisher> MIT Press Cambridge, </publisher> <address> Massachusetts, London, England, </address> <year> 1986. </year>
Reference-contexts: Analogously, if the set of possible states is changed there are otherwise unaffected methods that must reflect this change in their case cascade. Again, unaffected code is duplicated only because the coordination code in this method must be changed slightly. Actor Model The pure Actor model <ref> [6] </ref> combines the concept of objects with the concept of dynamic interfaces: If the programmer wants to change the dynamic interface of an object (called actor), this actor becomes a new actor with a different behavior. In object-oriented terminology, the new actor can even be implemented by a different class.
Reference: [7] <author> Paulo Amaral, Christian Jacquemot, Peter Jensen, Rodger Lea, and Adam Mirowski. </author> <title> Transparent object migration in COOL2. </title> <booktitle> In Proc. of the Workshop on Dynamic Object Placement and Load Balancing in Parallel and Distributed Systems, </booktitle> <address> ECOOP'92, Utrecht, The Netherlands, </address> <month> June 29, </month> <year> 1992. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b ftp://isl.rdc.toshiba.co.jp/pub/toshiba group ! cooc@isl.rdc.toshiba.co.jp COOL (Chorus) <ref> [7, 153, 154] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d
Reference: [8] <author> P. </author> <title> America. Inheritance and subtyping in a parallel object-oriented language. </title> <booktitle> In Proc. of ECOOP'87 - European Conf. on Object-Oriented Programming, number 276 in Lecture Notes in Computer Science, </booktitle> <pages> pages 234-242, </pages> <address> Paris, France, June 15-17, 1987. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: Such changes might snowball up and down the inheritance hierarchy and require code changes in other classes as well. However, if methods that implement class functionality are separated from coordination code, the necessary changes can often be limited. This effect has been detected by several researchers, e.g. <ref> [8, 43, 133, 188, 225] </ref>. To our knowledge the most detailed analysis of the problem is due to Matsuoka and Yonezawa [170] who initially coined the term inheritance anomaly. <p> p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b ftp://ftp.erc.msstate.edu Donna Reese ! dreese@erc.msstate.edu 48 PO y t i v i t c a POOL, POOL-T, POOL-I <ref> [8, 9, 10, 11, 215, 236] </ref> y t i v i t c a Presto [33, 34] H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p
Reference: [9] <author> Pierre America. POOL-T: </author> <title> A parallel object-oriented language. </title> <editor> In A. Yonezawa and M. Tokoro, editors, </editor> <booktitle> Object-Oriented Concurrent Programming, </booktitle> <pages> pages 199-220. </pages> <publisher> MIT Press Cam-bridge, </publisher> <address> Massachusetts, London, England, </address> <year> 1987. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b ftp://ftp.erc.msstate.edu Donna Reese ! dreese@erc.msstate.edu 48 PO y t i v i t c a POOL, POOL-T, POOL-I <ref> [8, 9, 10, 11, 215, 236] </ref> y t i v i t c a Presto [33, 34] H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p
Reference: [10] <author> Pierre America. </author> <title> A parallel object-oriented lan-guag with inheritance and subtyping. </title> <booktitle> In Proc. of ECOOP OOPSLA'90, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 161-168, </pages> <address> Ottawa, Canada, </address> <month> October 21-25, </month> <year> 1990. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b ftp://ftp.erc.msstate.edu Donna Reese ! dreese@erc.msstate.edu 48 PO y t i v i t c a POOL, POOL-T, POOL-I <ref> [8, 9, 10, 11, 215, 236] </ref> y t i v i t c a Presto [33, 34] H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p
Reference: [11] <author> Pierre America. </author> <title> POOL: Design and experience. </title> <booktitle> In Proc. of the ECOOP OOPSLA Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 16-20, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b ftp://ftp.erc.msstate.edu Donna Reese ! dreese@erc.msstate.edu 48 PO y t i v i t c a POOL, POOL-T, POOL-I <ref> [8, 9, 10, 11, 215, 236] </ref> y t i v i t c a Presto [33, 34] H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p
Reference: [12] <author> Birger Andersen. </author> <title> Ellie a general, fine-grained, first class object based language. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 5(2) </volume> <pages> 35-42, </pages> <month> May </month> <year> 1992. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p - y r a d n u o b Denis Caromel ! caromel@mimosa.unice.fr Ellie <ref> [12, 13] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n
Reference: [13] <author> Birger Andersen. </author> <title> Efficiency by type-guided compilation. </title> <booktitle> In Proc. of the Workshop on Efficient Implementation of Concurrent Object-Oriented Languages, pages e1-e5, </booktitle> <address> OOPSLA'93, Washing-ton D.C., </address> <month> September 27, </month> <year> 1993. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p - y r a d n u o b Denis Caromel ! caromel@mimosa.unice.fr Ellie <ref> [12, 13] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n
Reference: [14] <author> Thomas E. Anderson, David E. Culler, David A. Patterson, </author> <title> and the NOW team. A case for NOW (networks of workstations). </title> <journal> IEEE Micro, </journal> <volume> 15(1) </volume> <pages> 54-64, </pages> <month> February </month> <year> 1995. </year> <month> 50 </month>
Reference-contexts: Similarly, in high-performance computers the number of processors is increasing. This development can be expected to continue in future, driven by growing markets for standard processor and network technology resulting in faster processors and stronger networks at lower prices <ref> [14] </ref>. Unnumbered proposals have been made to combine both developments. For this survey we have looked at about hundred Concurrent Object-Oriented Languages (COOLs) and we are sure that there exist a lot of COOL designs which we are not aware of.
Reference: [15] <author> Jean-Marc Andreoli, Remo Pareschi, and Marc Bourgois. </author> <title> Dynamic programming as multiagent programming. </title> <editor> In M. Tokoro, O. Nierstrasz, and P. Wegner, editors, </editor> <booktitle> Proc. of the ECOOP'91 Workshop on Object-Based Concurrent Computing, </booktitle> <pages> pages 163-176, </pages> <address> Geneva, Switzerland, July 15-16, 1991. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b <ref> [15] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u
Reference: [16] <author> Gregory R. Andrews. </author> <title> Synchronizing resources. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 3(4) </volume> <pages> 405-430, </pages> <month> October </month> <year> 1981. </year>
Reference-contexts: pp p p m y r a d n u o b [173] H H A A H H A A y t i v i t c a y r a d n u o b http://www.dsg.cs.tcd.ie/research/sos.html Alexis Donnelly ! donnelly@cs.tcd.ie Sean Baker ! baker@cs.tcd.ie Synchronizing Re sources, SR <ref> [17, 16, 186] </ref> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H A A y t i v i
Reference: [17] <author> Gregory R. Andrews and Ronald A. Olsson. </author> <title> The SR Programming Language: Concurrency in Practice. </title> <publisher> Benjamin/Cummings Publishing Company, </publisher> <year> 1993. </year>
Reference-contexts: pp p p m y r a d n u o b [173] H H A A H H A A y t i v i t c a y r a d n u o b http://www.dsg.cs.tcd.ie/research/sos.html Alexis Donnelly ! donnelly@cs.tcd.ie Sean Baker ! baker@cs.tcd.ie Synchronizing Re sources, SR <ref> [17, 16, 186] </ref> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H A A y t i v i
Reference: [18] <author> Gregory R. Andrews and Fred B. Schneider. </author> <title> Concepts and notations for concurrent programming. </title> <journal> ACM Computing Surveys, </journal> <volume> 15(1) </volume> <pages> 3-43, </pages> <month> March </month> <year> 1983. </year>
Reference-contexts: We restrict our consid-erations to those concepts that are relevant for concurrent object-oriented programming languages. A more detailed survey of concepts of concurrent programming can be found in <ref> [18] </ref>, programming languages for distributed computing are discussed in [28]. Instead of adding citations wherever a COOL is mentioned, we postpone all citations to a cross reference table at the end of the survey in section ??.
Reference: [19] <author> H. Assenmacher, T. Breitbach, P. Buhler, V. Hubsch, and R. Schwarz. </author> <title> PANDA supporting distributed programming in C++. </title> <booktitle> In Proc. of ECOOP'93 7th European Conf. on Object-Oriented Programming, number 707 in Lecture Notes in Computer Science, </booktitle> <pages> pages 361-383, </pages> <address> Kaiserslautern, Germany, July 26-30, 1993. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: Bal ! bal@cs.vu.nl Oz, Perdio [113, 211, 212, 213] H H A A H H A A hijklm y t i v i t c a y r a d n u o b ftp://ps-ftp.dfki.uni-sb.de http://ps-www.dfki.uni-sb.de/oz group ! oz@dfki.uni-sb.de Gerd Smolka ! smolka@dfki.uni-sb.de Panda <ref> [19] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p mhijklm y t i v i
Reference: [20] <author> W. C. Athas and N. J. Boden. Cantor: </author> <title> An Actor programming system for scientific computing. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 66-68, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: Larus ! larus@cs.wisc.edu 45 Cantor <ref> [20] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u
Reference: [21] <author> Colin Atkinson, Stephen Goldsack, Andrea Di Maio, and Rami Bayan. </author> <title> Object-oriented con-currency and distribution in DRAGOON. </title> <journal> Journal of Object Oriented Programming, </journal> <volume> 4(1) </volume> <pages> 11-20, </pages> <month> March/April </month> <year> 1991. </year>
Reference-contexts: t i v i t c a y r a d n u o b Bruno Achauer ! bruno@tk.telematik.informatik.uni-karlsruhe.de dpSather [209] H H A A H H A A y t i v i t c a y r a d n u o b Heinz Schmidt ! Heinz.Schmidt@fcit.monash.edu.au Dragoon <ref> [21, 22] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p - y r a d
Reference: [22] <author> Colin Atkinson, Andrea Di Maio, and Rami Bayan. Dragoon: </author> <title> an object-oriented notation supporting the reuse and distribution of ada software. </title> <booktitle> In Ada Letters, </booktitle> <pages> pages 50-59, </pages> <month> Fall </month> <year> 1990. </year>
Reference-contexts: t i v i t c a y r a d n u o b Bruno Achauer ! bruno@tk.telematik.informatik.uni-karlsruhe.de dpSather [209] H H A A H H A A y t i v i t c a y r a d n u o b Heinz Schmidt ! Heinz.Schmidt@fcit.monash.edu.au Dragoon <ref> [21, 22] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p - y r a d
Reference: [23] <author> David F. Bacon, Susan L. Graham, and Oliver J. Sharp. </author> <title> Compiler transformations for high-performance computing. </title> <journal> ACM Computing Surveys, </journal> <volume> 26(4) </volume> <pages> 345-420, </pages> <month> December </month> <year> 1994. </year>
Reference-contexts: A good survey of the relevant techniques can be found in <ref> [23] </ref>. Everybody can convince himself of the power of these techniques by switching on the optimizing option of his favorite compiler.
Reference: [24] <author> Henri E. Bal. </author> <title> A comparative study of five parallel programming languages. </title> <booktitle> In proc. of Spring '91 Conf. on Open Distributed Systems, Eu-rOpen, </booktitle> <pages> pages 209-228, </pages> <address> Tromso, Norway, </address> <month> May 20-24 </month> <year> 1991. </year>
Reference-contexts: In contrast to this approach, the languages discussed in this survey are targeted to write a single program that solves a problem with explicit parallelism. There are some survey articles on related topics. Bal discusses five parallel programming languages in <ref> [24] </ref>. Nuttal discusses systems that provide process or object migration in [184]. Cheng's contribution [72] is a collection of parallel programming languages and tools, some of which are object-oriented. Other collections are due to Turcotte [229] and Philippsen [193]. Gao and Kwong survey parallel and distributed Smalltalks in [241].
Reference: [25] <author> Henri E. Bal. </author> <title> Comparing data synchronization in Ada9X and Orca. </title> <type> Technical Report IR-345, </type> <institution> Vrije Universiteit, </institution> <address> Amsterdam, The Nether-lands, </address> <month> December </month> <year> 1993. </year>
Reference: [26] <author> Henri E. Bal and M. Frans Kaashoek. </author> <title> Object distribution in Orca using compile-time and run-time techniques. </title> <booktitle> In Proc. of OOPSLA'93, 8th Annual Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 162-177, </pages> <address> Washington D.C., </address> <month> 26 September - 1 October, </month> <year> 1993. </year> <journal> ACM SIGPLAN Notices 28(10). </journal>
Reference: [27] <author> Henri E. Bal, M. Frans Kaashoek, and An-drew S. Tanenbaum. Orca: </author> <title> A language for parallel programming of distributed systems. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 18(3) </volume> <pages> 190-205, </pages> <month> March </month> <year> 1992. </year>
Reference: [28] <author> Henry E. Bal, Jennifer S. Steiner, and Andrew S. Tanenbaum. </author> <title> Programming languages for distributed computing systems. </title> <journal> ACM Computing Surveys, </journal> <volume> 21(3) </volume> <pages> 261-322, </pages> <month> September </month> <year> 1989. </year>
Reference-contexts: We restrict our consid-erations to those concepts that are relevant for concurrent object-oriented programming languages. A more detailed survey of concepts of concurrent programming can be found in [18], programming languages for distributed computing are discussed in <ref> [28] </ref>. Instead of adding citations wherever a COOL is mentioned, we postpone all citations to a cross reference table at the end of the survey in section ??. This eases readability of the text and avoids unnecessary replications of citations, since most COOLs are mentioned more than once.
Reference: [29] <author> Utpal Banerjee. </author> <title> Dependence Analysis for Supercomputing. </title> <publisher> Kluwer Academic Publishers, </publisher> <address> Boston, Dordrecht, London, </address> <year> 1988. </year>
Reference-contexts: If the tool can prove to itself that there are no data dependences (and of course no control dependences) then the operations can be executed in parallel. Significant progress has been made on well defined sub-problems: Array based data dependence analysis <ref> [29, 239] </ref> and pointer or alias analysis techniques [30, 76, 142, 149] are used in various phases of compiler optimizations and to parallelize sequential code: target architectures are parallel machines, vector computers, and processors with instruction level parallelism. A good survey of the relevant techniques can be found in [23].
Reference: [30] <author> J. P. Banning. </author> <title> An efficient way to find the side-effects of procedure calls and the aliases of variables. </title> <booktitle> In Proc. of the 6th ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 29-41, </pages> <address> San Antonio, TX, </address> <month> January </month> <year> 1979. </year>
Reference-contexts: If the tool can prove to itself that there are no data dependences (and of course no control dependences) then the operations can be executed in parallel. Significant progress has been made on well defined sub-problems: Array based data dependence analysis [29, 239] and pointer or alias analysis techniques <ref> [30, 76, 142, 149] </ref> are used in various phases of compiler optimizations and to parallelize sequential code: target architectures are parallel machines, vector computers, and processors with instruction level parallelism. A good survey of the relevant techniques can be found in [23].
Reference: [31] <author> John K. Bennet. </author> <title> The design and implementation of distributed Smalltalk. </title> <booktitle> In Proc. of OOP-SLA'87, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 318-330, </pages> <address> Orlando, Florida, </address> <month> October 4-8, </month> <year> 1987. </year> <journal> ACM SIGPLAN Notices 22(12). </journal>
Reference-contexts: H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Distributed Smalltalk Object <ref> [31, 84, 172, 181, 208] </ref> y t i v i t c a 46 Distributed Smalltalk Process [157] H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p
Reference: [32] <author> Marc Benveniste and Valerie Issarny. </author> <title> Concurrent programming notations in the object-oriented language Arche. </title> <type> Technical Report 690, </type> <institution> IRISA, Institut de Recherche en Informatique et Systems Aleatoires, </institution> <month> December </month> <year> 1992. </year>
Reference-contexts: H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p hijklm y t i v i t c a Arche <ref> [32] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p H H A A H H
Reference: [33] <author> B. N. Bershad, E. D. Lazowska, and H. M. Levy. </author> <title> Presto: A system for object-oriented parallel programming. </title> <journal> Software Practice and Experience, </journal> <year> 1998. </year> <month> 51 </month>
Reference-contexts: p p p p p pp p p - y r a d n u o b ftp://ftp.erc.msstate.edu Donna Reese ! dreese@erc.msstate.edu 48 PO y t i v i t c a POOL, POOL-T, POOL-I [8, 9, 10, 11, 215, 236] y t i v i t c a Presto <ref> [33, 34] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n
Reference: [34] <author> Brian. N. Bershad. </author> <title> The PRESTO user's manual. </title> <type> Technical Report 88-01-04, </type> <institution> Department of Computer Science, University of Washington, Seat-tle, </institution> <month> January </month> <year> 1988. </year>
Reference-contexts: p p p p p pp p p - y r a d n u o b ftp://ftp.erc.msstate.edu Donna Reese ! dreese@erc.msstate.edu 48 PO y t i v i t c a POOL, POOL-T, POOL-I [8, 9, 10, 11, 215, 236] y t i v i t c a Presto <ref> [33, 34] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n
Reference: [35] <author> Guy E. Blelloch, Charles E. Leiserson, Bruce M. Maggs, C. Gregory Plaxton, Stephen J. Smith, and Marco Zagha. </author> <title> A comparison of sorting algorithms for the connection machine CM-2. </title> <booktitle> In 3rd Annual ACM Symp. on Parallel Algorithms and Architectures, </booktitle> <address> Hilton Head, South Carolina, </address> <month> July 21-24, </month> <year> 1991. </year>
Reference-contexts: when it is knowledgeable about a collection of problem specifications) will convert the sequential implementation in any of the most efficient parallel sorting algorithms, since except for the common problem specification sequential and parallel sorting algorithms are inherently different and often specifically tuned towards a particular architecture, see for example <ref> [35] </ref>. * Another well-known example is the performance of vectorizing compilers. If those are used on programs which have been written in the pre-vector era, the results are often poor.
Reference: [36] <author> T. Bloom. </author> <title> Evaluating synchronization macha-nisms. </title> <booktitle> In Proc. of the 7th Symp. on Operating Systems Principles, </booktitle> <pages> pages 24-32, </pages> <address> Pacific Grove, CA, </address> <month> December </month> <year> 1979. </year>
Reference-contexts: The coordination code is isolated and can be inherited separately. Although path expressions are elegant for expressing concurrency constraints inside of the class, they inherit the monitor's deficiency to properly express conditional synchronization <ref> [36] </ref>: it cannot be expressed, if an method can only be executed if the object's state fulfills certain conditions. Similarly, it is unclear which of several invocations of a particular method will be activated when the path expression allows one of them to proceed.
Reference: [37] <author> Fran~cois Bodin, Peter Beckman, Dennis Gan-non, Srinivas Narayana, and Shelby X. Yang. </author> <title> Distributed pC++: Basic ideas for an object parallel language. </title> <journal> Scientific Programming, </journal> <volume> 2(3), </volume> <year> 1993. </year>
Reference: [38] <author> Fran~cois Bodin, Peter Beckman, Dennis Gan-non, Shelby X. Yang, S. Kesavan, A. Malony, and B. Mohr. </author> <title> Implementing a parallel C++ runtime system for scalable parallel systems. </title> <booktitle> In Proc. of Supercomputing'93, </booktitle> <pages> pages 588-597, </pages> <address> Portland, Oregon, </address> <month> November 15-19, </month> <year> 1993. </year>
Reference: [39] <author> Dietrich Boles. </author> <title> Parallel object-oriented programming with QPC++. </title> <journal> Structured Programming, </journal> <volume> 14 </volume> <pages> 158-172, </pages> <year> 1993. </year>
Reference: [40] <author> A. H. Borning. </author> <title> Classes versus prototypes in object-oriented languages. </title> <booktitle> In Proc. of the ACM/IEEE Fall Joint Computer Conf., </booktitle> <year> 1986. </year>
Reference-contexts: Languages that offer both objects and classes are commonly referred to as class-based languages. Object-based language that do not offer classes but offer a mechanism to clone objects, i.e., to make several objects that adhere to a common interface and implementation are called prototype-based languages (see for example <ref> [40] </ref>). The difference between classes and Ada's packages [4] is that classes determine types of the language. Objects of a class instantiate this type. Packages cannot be used to instantiate objects, but are only used to encapsulate types.
Reference: [41] <author> Jan van den Bos and Chris Laffra. </author> <title> PROCOL: A parallel object language with protocols. </title> <booktitle> In Proc. of OOPSLA'89, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 95-102, </pages> <address> New Orleans, Louisiana, </address> <month> October 1-6, </month> <year> 1989. </year> <journal> ACM SIGPLAN Notices 24(10). </journal>
Reference-contexts: H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b ftp://ftp.cs.washington.edu/pub Procol <ref> [41, 147, 148] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H
Reference: [42] <author> Soren Brandt and Ole Lehrmann Madsen. </author> <title> Object-oriented distributed programming in BETA. </title> <editor> In R. Guerraoui, O. Nierstrasz, and M. Riveill, editors, </editor> <booktitle> Proc. of the ECOOPO'93 Workshop on Object-Based Distributed Programming, number 791 in Lecture Notes in Computer Science, </booktitle> <pages> pages 185-212, </pages> <address> Kaiserslautern, Germany, July 26-27, 1993. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: A'UM H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t c a BETA <ref> [42, 164, 163] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d
Reference: [43] <author> Jean-Piere Briot and Akinori Yonezawa. </author> <title> Inheritance and synchronization in concurrent oop. </title> <booktitle> In Proc. of ECOOP'87 - European Conf. on Object-Oriented Programming, number 276 in Lecture Notes in Computer Science, </booktitle> <pages> pages 33-40, </pages> <address> Paris, France, June 15-17, 1987. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: Such changes might snowball up and down the inheritance hierarchy and require code changes in other classes as well. However, if methods that implement class functionality are separated from coordination code, the necessary changes can often be limited. This effect has been detected by several researchers, e.g. <ref> [8, 43, 133, 188, 225] </ref>. To our knowledge the most detailed analysis of the problem is due to Matsuoka and Yonezawa [170] who initially coined the term inheritance anomaly.
Reference: [44] <author> Jean-Pierre Briot. </author> <title> From objects to Actors: Study of a limited symbiosis in Smalltalk-80. </title> <type> Technical Report 88-58, </type> <institution> Laboratoire Informa-tique Theorique et Programmation, LITP, Paris, France, </institution> <month> September </month> <year> 1988. </year>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b Actalk <ref> [44] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u
Reference: [45] <author> Peter A. Buhr. </author> <title> Are safe concurrency libraries possible? Communications of the ACM, </title> <booktitle> 38(2) </booktitle> <pages> 117-120, </pages> <month> February </month> <year> 1995. </year>
Reference-contexts: Some COOLs extend existing object-oriented languages by adding concur-rency in a library. Special classes are offered, that can be mixed-in to add for example semaphore operations. Buhr points out in <ref> [45] </ref> that there are reasons why such library extensions can in general not be implemented correctly. The basic idea of Buhr's argumentation is as follows.
Reference: [46] <author> Peter A. Buhr and Glen Ditchfield. </author> <title> Adding con-currency to a programming language. </title> <booktitle> In Proc. of USENIX C++ Technical Conference, </booktitle> <pages> pages 207-223, </pages> <address> Portland, OR, </address> <month> August 10-13, </month> <year> 1992. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b Betrand Meyer ! bertrand@eiffel.com Micro C++, C++ <ref> [47, 46, 48] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p H H A A
Reference: [47] <author> Peter A. Buhr, Glen Ditchfield, Richard A. Stroobosscher, B. M. Younger, and C. R. Zarnke. </author> <title> C++: concurrency in the object-oriented language C++. </title> <journal> Software Practice and Experience, </journal> <volume> 22(2) </volume> <pages> 137-172, </pages> <month> February </month> <year> 1992. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b Betrand Meyer ! bertrand@eiffel.com Micro C++, C++ <ref> [47, 46, 48] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p H H A A
Reference: [48] <author> Peter A. Buhr and Richard A. Stroobosscher. </author> <title> C++ Annotated Reference Manual, </title> <type> Version 3.7. </type> <institution> University of Waterloo, </institution> <month> June </month> <year> 1993. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b Betrand Meyer ! bertrand@eiffel.com Micro C++, C++ <ref> [47, 46, 48] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p H H A A
Reference: [49] <author> Christian J. Callsen and Gul Agha. </author> <title> Open heterogeneous computing in ActorSpace. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 21(3) </volume> <pages> 289-300, </pages> <month> June </month> <year> 1994. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b http://web.yl.is.s.u-tokyo.ac.jp/members/briot/actalk/actalk.html ftp://camille.is.s.u-tokyo.ac.jp/pub/members/briot/actalk ftp://ftp.ibp.fr/ibp/softs/litp/actalk Jean-Pierre Briot ! briot@is.s.u-tokyo.ac.jp ActorSpace <ref> [5, 49] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H
Reference: [50] <author> R. H. Campbell and A. N. Habermann. </author> <title> The specification of synchronization by path expressions. </title> <booktitle> Lecture Notes of Computer Science, </booktitle> <volume> 16 </volume> <pages> 89-102, </pages> <year> 1974. </year>
Reference-contexts: With respect to inheritance, this extension seems to perform better than classic Enable Sets. Path Expression Facing the problem that growing monitor implementations lead both to sequential bottlenecks and to code for conditional synchronization that is scattered throughout the class, path expressions have been invented <ref> [50] </ref>. The idea of path expressions is to express all dependences between potentially concurrent operations at one place in each class. With a construct like path path list end the programmer can specify, which monitor operations can be called in which order, and which operations can be executed concurrently.
Reference: [51] <author> Luca Cardelli. Obliq: </author> <title> A language with distributed scope. </title> <type> Technical Report 122, </type> <institution> Digital Equipment Corporation, Systems Research Center, </institution> <year> 1994. </year>
Reference-contexts: i t c a NAM p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Obliq <ref> [51, 52] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p mhijklm y t i v i
Reference: [52] <author> Luca Cardelli. </author> <title> A language with distributed scope. </title> <journal> Computing System, </journal> <volume> 8(1) </volume> <pages> 27-59, </pages> <month> January </month> <year> 1995. </year>
Reference-contexts: i t c a NAM p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Obliq <ref> [51, 52] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p mhijklm y t i v i
Reference: [53] <author> Luca Cardelli and Peter Wegner. </author> <title> On understanding types, data abstractions, </title> <journal> and polymor-phism. ACM Computing Surveys, </journal> <volume> 17(4) </volume> <pages> 471-522, </pages> <month> December </month> <year> 1985. </year> <month> 52 </month>
Reference-contexts: In this section we briefly discuss the underlying concepts. Our terminology is based on Wegner's influential article [232] and other surveying papers and text books <ref> [53, 143, 177, 200] </ref>. An object is the basic programming entity. It takes up a space in memory and thus has an associated address. The object stores a "state" and offers a set of routines or functions (also referred to as methods) to define meaningful operations on that state.
Reference: [54] <author> Peter Carlin, Mani Chandy, and Carl Kessel--man. </author> <title> The Compositional C++ Language Definition, Revision 0.9. </title> <institution> California Institute of Technology, Pasadena, </institution> <month> March 1, </month> <year> 1993. </year>
Reference: [55] <author> Denis Caromel. </author> <title> A general model for concurrent and distributed object-oriented programming. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 102-104, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p me y r a d n u o b Eiffel// <ref> [55, 56, 57, 58, 59, 60] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p -
Reference: [56] <author> Denis Caromel. </author> <title> Service, asynchrony and wait-by-necessity. </title> <journal> Journal of Object-Oriented Programming, </journal> <volume> 2(4) </volume> <pages> 12-22, </pages> <month> November </month> <year> 1989. </year>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p me y r a d n u o b Eiffel// <ref> [55, 56, 57, 58, 59, 60] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p -
Reference: [57] <author> Denis Caromel. </author> <title> Programming abstractions for concurrent programming. </title> <booktitle> In Proc. of Conf. on Technology of Object-Oriented Languages and Systems, TOOLS Pacific'90, </booktitle> <pages> pages 245-253, </pages> <address> Sydney, Australia, </address> <month> November </month> <year> 1990. </year>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p me y r a d n u o b Eiffel// <ref> [55, 56, 57, 58, 59, 60] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p -
Reference: [58] <author> Denis Caromel. </author> <title> A solution to the explicit/implicit control dilemma. </title> <booktitle> In Proc. of ECOOP OOPSLA'90, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 21-25, </pages> <address> Ottawa, Canada, </address> <month> October 21-25, </month> <year> 1990. </year>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p me y r a d n u o b Eiffel// <ref> [55, 56, 57, 58, 59, 60] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p -
Reference: [59] <author> Denis Caromel. </author> <title> Toward a method of object-oriented concurrent programming. </title> <journal> Communications of the ACM, </journal> <volume> 36(9) </volume> <pages> 90-102, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p me y r a d n u o b Eiffel// <ref> [55, 56, 57, 58, 59, 60] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p -
Reference: [60] <author> Denis Caromel and Manuel Rebuffel. </author> <title> Object-based concurrency: Ten language features to achieve reuse. </title> <booktitle> In Proc. of Conf. on Technology of Object-Oriented Languages and Systems, TOOLS USA'93, </booktitle> <pages> pages 205-214, </pages> <address> Santa Barbara, CA, </address> <month> August </month> <year> 1993. </year>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p me y r a d n u o b Eiffel// <ref> [55, 56, 57, 58, 59, 60] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p -
Reference: [61] <author> H. Carr, R. R. Kessler, and M. Swanson. </author> <title> Distributed C++. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 28(1):81, </volume> <month> January </month> <year> 1993. </year>
Reference: [62] <author> Harold Carr, Robert R. Kessler, and Mark Swanson. </author> <title> Compiling distributed C++. </title> <booktitle> In Proc. 5th Symp. on Parallel and Distributed Processing, </booktitle> <pages> pages 496-503. </pages> <publisher> IEEE Computer Society, </publisher> <month> December </month> <year> 1993. </year>
Reference: [63] <author> Sergio E. R. de Carvalho. </author> <title> The object and event oriented language TOOL. </title> <type> Technical Report MCC06-93, </type> <institution> Pontificia University, Rio de Janeiro, Brazil, </institution> <year> 1993. </year>
Reference-contexts: Andrews ! greg@cs.arizona.edu Tool <ref> [63] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t
Reference: [64] <author> Rohit Chandra, Anoop Gupta, and John L. Hen-nessy. </author> <title> COOL: A language for parallel programming. </title> <editor> In David Gelernter, Alexandru Nicolau, and David Padua, editors, </editor> <booktitle> Languages and Compilers for Parallel Computing, </booktitle> <pages> pages 126-148. </pages> <publisher> MIT Press Cambridge, </publisher> <address> Massachusetts, London, England, </address> <year> 1990. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t c a y r a d n u o b ftp://ftp.ntt.jp/pub/lang Katsumi Maruyama ! maruyama@nttmfs.ntt.jp COOL (Stanford) <ref> [64, 65, 66] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v
Reference: [65] <author> Rohit Chandra, Anoop Gupta, and John L. Hennessy. </author> <title> Data locality and load balancing in COOL. </title> <booktitle> In ACM Sigplan Symp. on Principles and Practice of Parallel Programming, </booktitle> <pages> pages 249-259. </pages> <publisher> ACM Press, </publisher> <address> New York, </address> <month> September 7-8, </month> <year> 1993. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t c a y r a d n u o b ftp://ftp.ntt.jp/pub/lang Katsumi Maruyama ! maruyama@nttmfs.ntt.jp COOL (Stanford) <ref> [64, 65, 66] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v
Reference: [66] <author> Rohit Chandra, Anoop Gupta, and John L. Hen-nessy. </author> <title> COOL: An object-based language for parallel programming. </title> <journal> IEEE Computer, </journal> <volume> 27(8) </volume> <pages> 13-26, </pages> <month> August </month> <year> 1994. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t c a y r a d n u o b ftp://ftp.ntt.jp/pub/lang Katsumi Maruyama ! maruyama@nttmfs.ntt.jp COOL (Stanford) <ref> [64, 65, 66] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v
Reference: [67] <author> K. Mani Chandy and C. Kesselman. </author> <title> Compositional C++: Compositional parallel programming. </title> <booktitle> In Proc. of the 5th Int. Workshop on Languages and Compilers for Parallel Computing, number 757 in Lecture Notes in Computer Science, </booktitle> <pages> pages 124-144, </pages> <address> New Haven, Connecticut, </address> <month> August 3-5, </month> <title> 1992. </title> <publisher> Springer-Verlag Berlin, </publisher> <address> Hei-delberg, New York. </address>
Reference: [68] <author> K. Mani Chandy and Carl Kesselman. </author> <title> CC++: A declarative concurrent object-oriented programming notation. </title> <editor> In Gul Agha, Peter Wegner, and Akinori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming, </booktitle> <pages> pages 281-313. </pages> <publisher> MIT Press Cambridge, </publisher> <address> Massachusetts, London, England, </address> <year> 1993. </year>
Reference: [69] <author> Daniel T. Chang. </author> <title> CORAL: A concurrent object-oriented system for constructing and executing sequential, </title> <booktitle> parallel and distributed applications. In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 26-30, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t c a y r a d n u o b ftp://cool.stanford.edu Rohit Chandra ! rohit@cool.stanford.edu Coral <ref> [69] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p ? y r a d n u
Reference: [70] <author> Jeffrey S. Chase, Franz G. Amador, Edward D. Lazowska, Henry M. Levy, and Richard J. Lit-tlefield. </author> <title> The Amber system: Parallel programming on a network of multiprocessors. </title> <type> Technical Report 89-04-01, </type> <institution> Department of Computer Science, University of Washington, </institution> <address> Seattle, </address> <month> Sep-tember </month> <year> 1989. </year>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b Amber <ref> [70] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t
Reference: [71] <author> Arun Chatterjee. </author> <title> Distributed execution of C++ programs. </title> <booktitle> In Proc. of the Workshop on Efficient 53 Implementation of Concurrent Object-Oriented Languages, pages b1-b6, </booktitle> <address> OOPSLA'93, Washing-ton D.C., </address> <month> September 27, </month> <year> 1993. </year>
Reference-contexts: A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b http://www.mcc.com ESP Extensible Software Platform <ref> [71] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t
Reference: [72] <author> Doreen Y. Cheng. </author> <title> A survey of parallel programming languages and tools. </title> <type> Technical Report RND-93-005, </type> <institution> NASA, Ames Research Center, Moffett Field, </institution> <address> CA, </address> <month> March </month> <year> 1993. </year>
Reference-contexts: There are some survey articles on related topics. Bal discusses five parallel programming languages in [24]. Nuttal discusses systems that provide process or object migration in [184]. Cheng's contribution <ref> [72] </ref> is a collection of parallel programming languages and tools, some of which are object-oriented. Other collections are due to Turcotte [229] and Philippsen [193]. Gao and Kwong survey parallel and distributed Smalltalks in [241].
Reference: [73] <author> P. Y. Chevalier, A. Freyssinet, D. Hagimont, S. Krakowiak, S. Lacourte, and X. Rousset de Pina. </author> <title> Experience with shared object support in the Guide system. </title> <booktitle> Symp. on Experiences on Distributed Systems and Multiprocessors, </booktitle> <pages> 93. </pages>
Reference: [74] <author> Andrew A. Chien. </author> <title> Concurrent Aggregates: Using multiple-access data abstractions to manage complexity in concurrent programs. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 31-36, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: Mani Chandy ! mani@vlsi.caltech.edu Carl Kesselman ! carl@vlsi.caltech.edu Concurrency Class for Eiffel [138, 139] y t i v i t c a y r a d n u o b Murat Karaorman ! murat@cs.ucsb.edu John Bruno ! bruno@cs.ucsb.edu Concurrent Aggre gates, CA <ref> [74] </ref> - [75], [137, 196] p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H A A y t i
Reference: [75] <author> Andrew A. Chien, Vijay Karamcheti, John Plevyak, and Xingbim Zhang. </author> <title> Concurrent Aggregates (CA) Language Report. Concurrent Systems Architecture Group, </title> <institution> Department of Computer Science, University of Illinois at Urbana-Champaign, </institution> <month> February </month> <year> 1994. </year>
Reference-contexts: Mani Chandy ! mani@vlsi.caltech.edu Carl Kesselman ! carl@vlsi.caltech.edu Concurrency Class for Eiffel [138, 139] y t i v i t c a y r a d n u o b Murat Karaorman ! murat@cs.ucsb.edu John Bruno ! bruno@cs.ucsb.edu Concurrent Aggre gates, CA [74] - <ref> [75] </ref>, [137, 196] p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H A A y t i v i
Reference: [76] <author> J.-D. Choi, M. Burke, and P. Carini. </author> <title> Efficient flow-sensitive interprocedural computation of pointer-induced aliases and side effects. </title> <booktitle> In Proc. of the 20th ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 232-245, </pages> <address> Charleston, SC, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: If the tool can prove to itself that there are no data dependences (and of course no control dependences) then the operations can be executed in parallel. Significant progress has been made on well defined sub-problems: Array based data dependence analysis [29, 239] and pointer or alias analysis techniques <ref> [30, 76, 142, 149] </ref> are used in various phases of compiler optimizations and to parallelize sequential code: target architectures are parallel machines, vector computers, and processors with instruction level parallelism. A good survey of the relevant techniques can be found in [23].
Reference: [77] <author> M. E. Conway. </author> <title> A multiprocessor system design. </title> <booktitle> In Proc. of the AFIPS Fall Joint Computer Conf., </booktitle> <pages> pages 139-146, </pages> <address> Las Vegas, </address> <month> Novem-ber </month> <year> 1963. </year>
Reference-contexts: In the "star-notation" we shade the lower left arm of the star for languages that have such constructs. Basic Fork and Join The fork statement is the earliest proposed construct to initiate parallelism at the language level <ref> [77, 86] </ref>. Similar to a routine call, a designated routine is started with the fork statement. However, the invoking routine and the invoked routine proceed concurrently.
Reference: [78] <author> Antonio Corradi and Letizia Leonardi. </author> <title> PO an object model to express parallelism. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 152-155, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference: [79] <author> Antonio Corradi, Letizia Leonardi, and Daniele Vigo. </author> <title> Massively parallel programming environments: How to map parallel objects on trans-puters. </title> <editor> In M. Becker, L. Litzler, and M. Trehel, editors, </editor> <booktitle> Proc. of Transputers '92, Advanced Research and Industrial Applications, </booktitle> <pages> pages 125-141, </pages> <address> Arc et Senans, France, May 20-22, 1992. </address> <publisher> IOS Press, </publisher> <address> Amsterdam, Netherlands. </address>
Reference: [80] <author> David E. Culler, Seth C. Goldstein, Klaus E. Schauser, and Thorsten von Eicken. </author> <title> TMA a compiler controlled threaded abstract machine. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 18(3) </volume> <pages> 347-370, </pages> <month> July </month> <year> 1993. </year>
Reference-contexts: For example in the expression f (g (1),g (2)) the compiler can execute both invocations of g concurrently. Several dataflow languages are based on this principle, e.g., VAL [3] and Id90 <ref> [80] </ref>. And/Or-Parallelism Logic programs consist of sequences of clauses as shown in the following example: A :- B, C Each of the clauses has a declarative meaning which results from the underlying Horn logic.
Reference: [81] <author> William J. Dally and Andrew A. Chien. </author> <title> Object-oriented concurrent programming in CST. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 28-31, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIG-PLAN Notices 24(4). </journal>
Reference-contexts: A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p ? y r a d n u o b CST, Concurrent Smalltalk (MIT) <ref> [81, 117] </ref> H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p mhijklm y t i v i t c a y
Reference: [82] <author> Andrew Davison. </author> <title> A survey of logic programming-based object-oriented languages. </title> <editor> In Gul Agha, Peter Wegner, and Akinori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming, </booktitle> <pages> pages 42-106. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The Mentat compiler exploits this fact to initiate parallelism automatically. We will not discuss logic-based object-oriented languages in this survey for two reasons. First, the reader can find an excellent survey of these languages in <ref> [82] </ref>. Second, Wegner has reasoned in [233] that object-oriented and logic-programming paradigms are incompatible. We only mention Fleng++ because of its mechanism for coordination of concurrency. 2.2 Fork, Join, and Equivalents In this section we present language constructs that start exactly one new concurrent activity at a time.
Reference: [83] <author> Peter de Jong. </author> <title> Concurrent organizational objects. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 40-44, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Ubik <ref> [83] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u
Reference: [84] <author> D. Decouchant. </author> <title> Design of a distributed object manager for the Smalltalk-80 system. </title> <booktitle> In Proc. of OOPSLA'86, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 444-452, </pages> <address> Portland, Oregon, </address> <month> September 29 - October 2 </month> <year> 1986. </year> <journal> ACM SIG-PLAN Notices 21(11). </journal>
Reference-contexts: H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Distributed Smalltalk Object <ref> [31, 84, 172, 181, 208] </ref> y t i v i t c a 46 Distributed Smalltalk Process [157] H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p
Reference: [85] <author> D. Decouchant, S. Krakowiak, M. Meysem-bourg, M. Riveill, and X. Rousset de Pina. </author> <title> A synchronization mechanism for typed objects in a distributed system. </title> <booktitle> ACM SIGPLAN Workshop on Concurrent Object-Based Language Design, in ACM SIGPLAN Notices, </booktitle> <volume> 24(4) </volume> <pages> 105-107, </pages> <month> April </month> <year> 1989. </year>
Reference: [86] <author> J. B. Dennis and E. C. Van Horn. </author> <title> Programming semantics for multiprogrammed computations. </title> <journal> Communications of the ACM, </journal> <volume> 9(3) </volume> <pages> 143-155, </pages> <month> March </month> <year> 1966. </year>
Reference-contexts: In the "star-notation" we shade the lower left arm of the star for languages that have such constructs. Basic Fork and Join The fork statement is the earliest proposed construct to initiate parallelism at the language level <ref> [77, 86] </ref>. Similar to a routine call, a designated routine is started with the fork statement. However, the invoking routine and the invoked routine proceed concurrently.
Reference: [87] <author> E. W. Dijkstra. </author> <title> Cooperating sequential processes. </title> <editor> In F. Genuys, editor, </editor> <booktitle> Programming Languages. </booktitle> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1968. </year> <month> 54 </month>
Reference-contexts: In the "star-notation" we shade the upper left arm of the star for languages that provide this construct. Cobegin The cobegin statement, which can be tracked back to Dijkstra <ref> [87] </ref> is a more structured form of initiating parallelism in a language. In contrast to fork-join and their equivalents this control structure obeys the single-entry-single-exit paradigm. <p> However, there is no special support for history proceed-criteria. If such criteria are needed they must manually be encoded into attributes. Semaphore, Mutex, Lock The second basic concept of organizing concurrent access to shared data is the semaphore, which again can be tracked back to Dijkstra <ref> [87, 88] </ref>. A semaphore is a non-negative integer variable with two atomic operations. One operation, commonly called P or wait , blocks until the variable is greater than zero in which case the variable is decreased atomically. The other operation, usually called V or signal, increases the variable atomically. <p> Monitor Although external control is frequently used in COOLs, the constellation has not been invented especially for COOLs. In fact, external control can be identified as an application of the classic monitor. From the point of view of a parallel programmer monitors <ref> [87, 109, 116] </ref> are a syntactic combination of resource definition and the operations that can be applied to the variables in the resource. Only one operation can be executed at a time.
Reference: [88] <author> E. W. Dijkstra. </author> <title> The structure of the `THE' mul-tiprogramming system. </title> <journal> Communications of the ACM, </journal> <volume> 11(5) </volume> <pages> 341-346, </pages> <month> May </month> <year> 1968. </year>
Reference-contexts: However, there is no special support for history proceed-criteria. If such criteria are needed they must manually be encoded into attributes. Semaphore, Mutex, Lock The second basic concept of organizing concurrent access to shared data is the semaphore, which again can be tracked back to Dijkstra <ref> [87, 88] </ref>. A semaphore is a non-negative integer variable with two atomic operations. One operation, commonly called P or wait , blocks until the variable is greater than zero in which case the variable is decreased atomically. The other operation, usually called V or signal, increases the variable atomically.
Reference: [89] <author> E. W. Dijkstra. </author> <title> Guarded commands, nonde-terminacy, and formal derivation of programs. </title> <journal> Communications of the ACM, </journal> <volume> 18(8) </volume> <pages> 453-457, </pages> <month> August </month> <year> 1975. </year>
Reference-contexts: A special form of this condition is to wait for a message from a particular sender (receive : : : from). Guarded Commands. Another well known proposal for coordination in life routines, called guarded commands, was introduced by Dijk stra <ref> [89] </ref>: if G 1 ! StmtList 1 [] G 2 ! StmtList 2 : : : [] G n ! StmtList n end If in the above if statement one of the boolean conditions (guards) G 1 -G n holds, the corresponding list of statements is executed, for example a particular
Reference: [90] <author> Takanobu Baba et al. </author> <title> A network-topology independent task allocation strategy for parallel computers. </title> <booktitle> In Proc. Supercomputing '90, </booktitle> <pages> pages 878-887, </pages> <year> 1990. </year>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t c a A-NETL <ref> [90, 246] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H
Reference: [91] <author> Ian Foster. </author> <title> Designing and Building Parallel Programs, </title> <address> pages 167-205. </address> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1994. </year>
Reference: [92] <author> Arne Frick, W. Zimmer, and Wolf Zimmermann. </author> <booktitle> On the design of reliable libraries. In TOOLS 17 Technology of Object-Oriented Programming, </booktitle> <pages> pages 13-23, </pages> <address> Santa Barbara, CA, </address> <month> August 2-4, </month> <title> 1995. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey. </address>
Reference-contexts: Similarly pre- and post-conditions of class and subclass must imply their counterparts along or against the lines of the inheritance hierarchy, depending on whether the subclass conforms to or specializes the original class or whether the classes are in a co-variance or contra-variance relation <ref> [92] </ref>. Pre- and post-conditions are determined by the algorithms and the abstract data type offered by the class or subclass. Different implementations of the same class in general have the same invariants, pre- and post-conditions. In contrast, proceed-criteria represent coordination constraints that are caused by the chosen implementation.
Reference: [93] <author> A. Goldberg and D. Robson. </author> <title> Smalltalk-80: The Language and Implementation. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1983. </year>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Smalltalk-80 <ref> [93] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u
Reference: [94] <author> Yvon Gourhant and Marc Shapiro. FOG/C++: </author> <title> a fragmented-object generator. </title> <booktitle> In C++ Conf., </booktitle> <pages> pages 63-74, </pages> <address> San Francisco, CA, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: p p hijklm y t i v i t c a y r a d n u o b David Croley ! croley@mcc.com Arun Chatterjee ! arun@mcc.com Fleng++ [217] H H A A H H A A hijklm y t i v i t c a Fragmented Ob jects, FOG/C++ <ref> [94, 165] </ref> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p hijklm y t i v i t c a y r a d
Reference: [95] <author> J. E. Grass and R. H. Campbell. Mediators: </author> <title> a synchronization mechanism. </title> <booktitle> In Proc. of the 6th Int. Conf. on Distributed Computing Systems, </booktitle> <pages> pages 468-477, </pages> <address> Cambridge, MA, May 19-23, 1986. </address> <publisher> IEEE Comput. Soc. Press. </publisher>
Reference-contexts: H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Maude ? Mediators <ref> [95] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H A
Reference: [96] <author> Andrew S. Grimshaw. </author> <title> Easy to use object-oriented parallel programming. </title> <journal> IEEE Computer, </journal> <volume> 26(5) </volume> <pages> 39-51, </pages> <month> May </month> <year> 1993. </year> <institution> Also University of Virginia, Charlottesville, VA, </institution> <note> Technical Report CS-92-32. </note>
Reference: [97] <author> Andrew S. Grimshaw. </author> <title> The Mentat computation model - data-driven support for object-oriented parallel processing. </title> <type> Technical Report CS-93-30, </type> <institution> University of Virginia, </institution> <address> Charlottesville, VA, </address> <month> May </month> <year> 1993. </year>
Reference: [98] <author> Andrew S. Grimshaw and V. E. Vivas. </author> <title> FALCON: A distributed scheduler for MIMD architectures. </title> <booktitle> In Proc. of the Symp. on Experiences with Distributed and Multiprocessor Systems, </booktitle> <pages> pages 149-163, </pages> <address> Atlanta, GA, </address> <month> March </month> <year> 1991. </year>
Reference: [99] <author> Andrew S. Grimshaw, Jon B. Weissan, and W. Timothy Strayer. </author> <title> Portable run-time support for dynamic object-oriented parallel processing. </title> <type> Technical Report CS-93-40, </type> <institution> University of Vir-ginia, </institution> <address> Charlottesville, VA, </address> <month> July </month> <year> 1993. </year>
Reference: [100] <author> Andrew S. Grimshaw, Jon B. Weissman, Emily A. West, and Ed C. Loyot, Jr. Meta-systems: </author> <title> An approach combining parallel processing and heterogeneous distributed computing systems. </title> <journal> Journal of Parallel and Distributed Computing, </journal> <volume> 21(3) </volume> <pages> 257-270, </pages> <month> June </month> <year> 1994. </year> <institution> Also University of Virginia, Charlottesville, VA, </institution> <note> Technical Report CS-92-43. </note>
Reference: [101] <author> Mentat Research Group. </author> <title> Mentat 2.5 programming language reference manual. </title> <type> Technical report, </type> <institution> University of Virginia, </institution> <address> Charlottesville, VA, </address> <year> 1995. </year>
Reference: [102] <author> R. Guerraoui. </author> <title> Dealing with atomicity in object-based distributed systems. </title> <journal> OOPS Messenger, </journal> <volume> 3(3) </volume> <pages> 10-13, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: p p p p p p p p p p p pp p p - y r a d n u o b Oscar Nierstrasz ! oscar@iam.unibe.ch 47 Java y t i v i t c a y r a d n u o b http://java.sun.com group ! java@java.sun.com Karos <ref> [102] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u
Reference: [103] <author> L. Gunaseelan and R. J. LeBland. </author> <title> Distributed Eiffel: A language for programming multi-granular distributed objects. </title> <booktitle> In Proc. of the 4th Int. Conf. on Computer Languages (IEEE), </booktitle> <address> San Francisco, CA, </address> <month> April </month> <year> 1992. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b ftp://cs.utah.edu/pub/dc++ Harold Carr ! carr@cs.utah.edu Distributed Eiffel <ref> [103] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p H H A A H H
Reference: [104] <author> B. K. Haddon. </author> <title> Nested monitor calls. </title> <journal> Operating Systems Review, </journal> <volume> 11(4) </volume> <pages> 18-23, </pages> <month> October </month> <year> 1977. </year>
Reference-contexts: Another disadvantage that monitors inherit from the underlying semaphore concept is that careless usage can still result in deadlocks. The problem is often referred to as the nested monitor call problem <ref> [104, 158, 237] </ref>, although not only in our opinion [192] it does not really deserve a new name.
Reference: [105] <author> Daniel Hagimont, P.-Y. Chevalier, A. Freyssinet, S. Krakowiak, S. Lacourte, J. Mossiere, and X. Rousset de Pina. </author> <title> Persistent shared object support in the Guide system: Evaluation & related work. </title> <booktitle> In Proc. of OOP-SLA'94, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 129-144, </pages> <address> Portland, OR, </address> <month> October 23-27, </month> <year> 1994. </year>
Reference: [106] <author> F. Hamelin, J.-M. Jezequel, and T. Priol. </author> <title> A multi-paradigm object oriented parallel environment. </title> <editor> In H. J. Siegel, editor, </editor> <booktitle> Proc. of the 8th Int. Parallel Processing Symp. </booktitle> <address> IPPS'94, Cancun, Mexico, April 1994. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p hijklm y t i v i t c a y r a d n u o b ftp://ftp.diku.dk/pub/diku/dists/emerald Eric Jul ! eric@diku.dk EPEE, Eiffel Paral lel Execution Env. <ref> [106, 124, 125, 126] </ref> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Jean-Marc Jezequel !
Reference: [107] <author> P. Brinch Hansen. </author> <title> Structured multiprogramming. </title> <journal> Communications of the ACM, </journal> <volume> 15(7) </volume> <pages> 574-578, </pages> <month> July </month> <year> 1972. </year>
Reference-contexts: Both mutex and locks can easily be implemented with semaphore operations. Conditional Critical Region The basic idea of conditional critical regions is to provide some syntactic support for conditional coordination of parallelism <ref> [107, 108, 115] </ref>. Whereas in the critical region defined by semaphores arbitrary code could be executed, and hence accesses to arbitrary sets of data elements could be coordinated, conditional critical regions make the purpose of coordinating of accesses more transparent. The idea is to collect variables in so-called resources.
Reference: [108] <author> P. Brinch Hansen. </author> <title> Concurrent programming concepts. </title> <journal> ACM Computing Surveys, </journal> <volume> 5(4) </volume> <pages> 223-245, </pages> <month> December </month> <year> 1973. </year> <month> 55 </month>
Reference-contexts: Both mutex and locks can easily be implemented with semaphore operations. Conditional Critical Region The basic idea of conditional critical regions is to provide some syntactic support for conditional coordination of parallelism <ref> [107, 108, 115] </ref>. Whereas in the critical region defined by semaphores arbitrary code could be executed, and hence accesses to arbitrary sets of data elements could be coordinated, conditional critical regions make the purpose of coordinating of accesses more transparent. The idea is to collect variables in so-called resources.
Reference: [109] <author> P. Brinch Hansen. </author> <title> Operating System Princi--ples. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1973. </year>
Reference-contexts: Monitor Although external control is frequently used in COOLs, the constellation has not been invented especially for COOLs. In fact, external control can be identified as an application of the classic monitor. From the point of view of a parallel programmer monitors <ref> [87, 109, 116] </ref> are a syntactic combination of resource definition and the operations that can be applied to the variables in the resource. Only one operation can be executed at a time.
Reference: [110] <author> C. L. Hartley and V. S. Sunderam. </author> <title> Concurrent programming with shared objects in networked environments. </title> <booktitle> In Proc. of the 7th Int. Parallel Processing Symp., </booktitle> <pages> pages 471-478, </pages> <address> Los Angeles, </address> <month> April </month> <year> 1993. </year>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b DoPVM <ref> [110] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u
Reference: [111] <author> Ernst A. Heinz. </author> <title> Modula-3*: An efficiently compilable extension of Modula-3 for explicitly parallel problem-oriented programming. </title> <booktitle> In Joint Symp. on Parallel Processing, </booktitle> <pages> pages 269-276, </pages> <institution> Waseda University, </institution> <address> Tokyo, </address> <month> May 17-19, </month> <year> 1993. </year>
Reference-contexts: Buhr ! Modula-3* <ref> [111] </ref> H H A A H H A A y t i v i t c a y r a d n u o b Ernst A.
Reference: [112] <author> Heinz-Peter Heinzle, Henri E. Bal, and Koen Langendoen. </author> <title> Implementing object-based distributed shared memory on Transputers. </title> <editor> In A. De Gloria, M. R. Jand, and D. Marini, editors, </editor> <booktitle> Transputer Applications and Systems '94. </booktitle> <publisher> IOS Press, </publisher> <year> 1994. </year>
Reference: [113] <author> Martin Henz. </author> <title> The Oz notation. </title> <type> Technical report, </type> <institution> DFKI, German Research Center for Artificial Intelligence, Saarbrucken, Germany, </institution> <year> 1994. </year>
Reference-contexts: Bal ! bal@cs.vu.nl Oz, Perdio <ref> [113, 211, 212, 213] </ref> H H A A H H A A hijklm y t i v i t c a y r a d n u o b ftp://ps-ftp.dfki.uni-sb.de http://ps-www.dfki.uni-sb.de/oz group ! oz@dfki.uni-sb.de Gerd Smolka ! smolka@dfki.uni-sb.de Panda [19] H H A A H H A A p p p
Reference: [114] <author> B. Hindel. </author> <title> An object-oriented programming language for distributed systems: </title> <booktitle> HERAKLIT. In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 114-116, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIG-PLAN Notices 24(4). </journal>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Heraklit <ref> [114] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t
Reference: [115] <author> C. A. R. Hoare. </author> <title> Towards a theory of parallel programming. </title> <editor> In C. A. R. Hoare and R. H. Perrott, editors, </editor> <booktitle> Operating Systems Techniques, </booktitle> <pages> pages 61-71. </pages> <publisher> Academic Press, </publisher> <address> New York, </address> <year> 1972. </year>
Reference-contexts: Both mutex and locks can easily be implemented with semaphore operations. Conditional Critical Region The basic idea of conditional critical regions is to provide some syntactic support for conditional coordination of parallelism <ref> [107, 108, 115] </ref>. Whereas in the critical region defined by semaphores arbitrary code could be executed, and hence accesses to arbitrary sets of data elements could be coordinated, conditional critical regions make the purpose of coordinating of accesses more transparent. The idea is to collect variables in so-called resources.
Reference: [116] <author> C. A. R. Hoare. </author> <title> Monitors: An operating system structuring concepts. </title> <journal> Communications of the ACM, </journal> <volume> 17(10) </volume> <pages> 549-557, </pages> <month> October </month> <year> 1974. </year>
Reference-contexts: Monitor Although external control is frequently used in COOLs, the constellation has not been invented especially for COOLs. In fact, external control can be identified as an application of the classic monitor. From the point of view of a parallel programmer monitors <ref> [87, 109, 116] </ref> are a syntactic combination of resource definition and the operations that can be applied to the variables in the resource. Only one operation can be executed at a time. <p> Some of them are relevant for this survey since they have been re-introduced into COOLs. Condition Variables Condition variables have been proposed by Hoare <ref> [116] </ref>. The idea of this extension of the monitor concept is that an activity that has entered a monitor can block inside of the monitor at the condition variable. While it is blocked, another method call can proceed.
Reference: [117] <author> W. Horwat, A. A. Chien, and W. J. Dally. </author> <title> Experience with CST: </title> <booktitle> programming and implementation. In Proc. of the ACM SIGPLAN '89 Conf. on Programming Language Design and Implementation PLDI, </booktitle> <pages> pages 101-109, </pages> <address> Portland, OR, </address> <month> June 21-23, </month> <year> 1989. </year> <journal> ACM SIGPLAN Notices 24(7). </journal>
Reference-contexts: A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p ? y r a d n u o b CST, Concurrent Smalltalk (MIT) <ref> [81, 117] </ref> H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p mhijklm y t i v i t c a y
Reference: [118] <author> Kaoru Hosokawa and Hiroaki Nakamura. </author> <title> Concurrent programming in COB. </title> <editor> In A. Yonezawa and T. Ito, editors, </editor> <booktitle> Proc. of the Japan/UK Workshop on Concurrency: Theory, Language and Architecture, </booktitle> <pages> pages 142-156, </pages> <address> Oxford, UK, September 25-27. 1989. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b <ref> [118] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p - y r a d n
Reference: [119] <author> Chris Houck and Gul Agha. HAL: </author> <title> A high-level Actor language and its distributed implementation. </title> <booktitle> In 21st Int. Conf. on Parallel Processing, ICPP '92, </booktitle> <volume> volume II, </volume> <pages> pages 158-165, </pages> <address> St. Charles, IL, </address> <month> August </month> <year> 1992. </year>
Reference: [120] <author> Jin H. Hur and Kilnam Chon. </author> <title> Overview of a parallel object-oriented language CLIX. </title> <booktitle> In Proc. of ECOOP'87 - European Conf. on Object-Oriented Programming, number 276 in Lecture Notes in Computer Science, </booktitle> <pages> pages 265-273, </pages> <address> Paris, France, June 15-17, 1987. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: Kale ! kale@cs.uiuc.edu Sanjeev Krishnan ! sanjeev@cs.uiuc.edu CLIX <ref> [120] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u
Reference: [121] <author> Norman C. Hutchinson, Rajeandra K. Raj, An-drew P. Black, Henry M. Levy, and Eric Jul. </author> <title> The Emerald programing lanuage report. </title> <type> Technical Report 87-10-07, </type> <institution> Department of Computer Science, University of Washington, </institution> <address> Seattle, </address> <month> Oc-tober </month> <year> 1987. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b ftp://ftp.diku.dk/diku/dists/ellie/papers Birger Andersen ! andersen@informatik.uni-kl.de Emerald <ref> [121, 127, 128] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p hijklm y t i
Reference: [122] <author> Yutaka Ishikawa. </author> <title> The MPC++ programming language v1.0 specification with commentary. </title> <type> Technical Report TR-94014, </type> <institution> Tsukuba Research Center, Real World Computing Partnership, </institution> <address> Japan, </address> <month> June </month> <year> 1994. </year>
Reference: [123] <author> Yutaka Ishikawa, Atsushi Hori, Hiroki Kon-aka, Munenori Maeda, and Takashi Tomokiyo. MPC++: </author> <title> A parallel programming language and its parallel objects support. </title> <booktitle> In Proc. of the Workshop on Efficient Implementation of Concurrent Object-Oriented Languages, pages j1-j5, </booktitle> <address> OOPSLA'93, Washington D.C., </address> <month> September 27, </month> <year> 1993. </year>
Reference: [124] <author> J.-M. Jezequel. EPEE: </author> <title> an Eiffel environment to program distributed memory parallel computers. </title> <booktitle> In Proc. of ECOOP'92 - European Conf. on Object-Oriented Programming, number 615 in Lecture Notes in Computer Science, </booktitle> <pages> pages 197-212, </pages> <address> Utrecht, The Netherlands, June 29 - July 3, 1992. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p hijklm y t i v i t c a y r a d n u o b ftp://ftp.diku.dk/pub/diku/dists/emerald Eric Jul ! eric@diku.dk EPEE, Eiffel Paral lel Execution Env. <ref> [106, 124, 125, 126] </ref> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Jean-Marc Jezequel !
Reference: [125] <author> J.-M. Jezequel. EPEE: </author> <title> an Eiffel environment to program distributed memory parallel computers. </title> <journal> Journal of Object Oriented Programming, </journal> <volume> 6(2) </volume> <pages> 48-54, </pages> <month> May </month> <year> 1993. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p hijklm y t i v i t c a y r a d n u o b ftp://ftp.diku.dk/pub/diku/dists/emerald Eric Jul ! eric@diku.dk EPEE, Eiffel Paral lel Execution Env. <ref> [106, 124, 125, 126] </ref> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Jean-Marc Jezequel !
Reference: [126] <author> J.-M. Jezequel. </author> <title> Transparent parallelisation through reuse: between a compiler and a library 56 approach. </title> <booktitle> In Proc. of ECOOP'93 7th Eu--ropean Conf. on Object-Oriented Programming, number 707 in Lecture Notes in Computer Science, </booktitle> <pages> pages 384-405, </pages> <address> Kaiserslautern, Germany, July 26-30, 1993. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Hei-delberg, New York. </address>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p hijklm y t i v i t c a y r a d n u o b ftp://ftp.diku.dk/pub/diku/dists/emerald Eric Jul ! eric@diku.dk EPEE, Eiffel Paral lel Execution Env. <ref> [106, 124, 125, 126] </ref> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Jean-Marc Jezequel !
Reference: [127] <author> Eric Jul. </author> <title> Migration of light-weight processes in Emerald. </title> <journal> IEEE Operating Sys. Technical Committee Newsletter, Special Issue on Process Migration, </journal> <volume> 3(1) </volume> <pages> 25-30, </pages> <year> 1989. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b ftp://ftp.diku.dk/diku/dists/ellie/papers Birger Andersen ! andersen@informatik.uni-kl.de Emerald <ref> [121, 127, 128] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p hijklm y t i
Reference: [128] <author> Eric Jul, Henry Levy, Norman Hutchinson, and Andrew Black. </author> <title> Fine-grained mobility in the Emerald system. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 6(1) </volume> <pages> 109-133, </pages> <month> February </month> <year> 1988. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b ftp://ftp.diku.dk/diku/dists/ellie/papers Birger Andersen ! andersen@informatik.uni-kl.de Emerald <ref> [121, 127, 128] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p hijklm y t i
Reference: [129] <author> Dennis Kafura. </author> <title> Concurrent object-oriented real-time systems research. </title> <booktitle> In ACM SIG-PLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 203-205, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference: [130] <author> Dennis Kafura and Greg Lavender. </author> <title> Recent progress in combining Actor based concurrency with object-oriented programming. </title> <booktitle> In Proc. of ECOOP OOPSLA'90, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 55-58, </pages> <address> Ottawa, Canada, </address> <month> October 21-25, </month> <year> 1990. </year>
Reference: [131] <author> Dennis Kafura and K. H. Lee. </author> <title> ACT++: Building a concurrent C++ with Actors. </title> <journal> Journal of Object Oriented Programming, </journal> <volume> 3(1) </volume> <pages> 25-37, </pages> <month> May </month> <year> 1990. </year>
Reference: [132] <author> Dennis Kafura, Manibrata Mukherji, and Greg Lavender. </author> <title> ACT++ 2.0: A class library for concurrent programming in C++ using Actors. </title> <journal> Journal of Object Oriented Programming, </journal> <volume> 6(6) </volume> <pages> 47-55, </pages> <month> October </month> <year> 1993. </year>
Reference: [133] <author> Dennis G. Kafura and Keung Hae Lee. </author> <title> Inheritance in Actor based concurrent object-oriented languages. </title> <booktitle> In ECOOP'89 - European Conf. on Object-Oriented Programming, </booktitle> <pages> pages 131-145. </pages> <publisher> Cambridge University Press, </publisher> <year> 1989. </year>
Reference-contexts: Such changes might snowball up and down the inheritance hierarchy and require code changes in other classes as well. However, if methods that implement class functionality are separated from coordination code, the necessary changes can often be limited. This effect has been detected by several researchers, e.g. <ref> [8, 43, 133, 188, 225] </ref>. To our knowledge the most detailed analysis of the problem is due to Matsuoka and Yonezawa [170] who initially coined the term inheritance anomaly.
Reference: [134] <author> Gail E. Kaiser, Wenwey Hseush, James C. Lee, Shyhtsun F. Wu, Esther Woo, Eric Hilsdale, and Scott Meyer. MeldC: </author> <title> A reflective object-oriented coordination language. </title> <type> Technical Report CUCS-001-93, </type> <institution> Dept. of Computer Science, Columbia University, </institution> <address> New York, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p - y r a d n u o b MeldC <ref> [134, 135, 197] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p mme y r a d
Reference: [135] <author> Gail E. Kaiser, Wenwey Hseush, Steven S. Popovich, and Shyhtsun F. Wu. </author> <title> Multiple con-currency control policies in an object-oriented programming system. </title> <editor> In Gul Agha, Peter Weg-ner, and Akinori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming, </booktitle> <pages> pages 195-210. </pages> <publisher> MIT Press Cam-bridge, </publisher> <address> Massachusetts, London, England, </address> <year> 1993. </year>
Reference-contexts: H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p - y r a d n u o b MeldC <ref> [134, 135, 197] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p mme y r a d
Reference: [136] <author> Laxmikant V. Kale and Sanjeev Krishnan. Charm++: </author> <title> A portable concurrent object oriented system based on C++. </title> <booktitle> In Proc. of OOP-SLA'93, 8th Annual Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 91-109, </pages> <address> Washington D.C., </address> <month> 26 September - 1 October, </month> <year> 1993. </year> <journal> ACM SIGPLAN Notices 28(10). </journal>
Reference-contexts: p p p p p p p p p p p p p p p p p - y r a d n u o b Klaus-Peter Lohr ! lohr@inf.fu-berlin.de CFM ? H H A A H H A A y t i v i t c a - CHARM++ <ref> [136] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H A
Reference: [137] <author> Vijay Karamcheti and Andrew Chien. </author> <title> Concert - efficient runtime support for concurrent object-oriented programming languages on stock hardware. </title> <booktitle> In Proc. of ACM Supercomputing'93, </booktitle> <pages> pages 598-607, </pages> <address> Portland, Oregon, </address> <month> November 15-19, </month> <year> 1993. </year>
Reference-contexts: Mani Chandy ! mani@vlsi.caltech.edu Carl Kesselman ! carl@vlsi.caltech.edu Concurrency Class for Eiffel [138, 139] y t i v i t c a y r a d n u o b Murat Karaorman ! murat@cs.ucsb.edu John Bruno ! bruno@cs.ucsb.edu Concurrent Aggre gates, CA [74] - [75], <ref> [137, 196] </ref> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H A A y t i v i t
Reference: [138] <author> Murat Karaorman and John Bruno. </author> <title> Design and implementation issues for object-oriented con-currency. </title> <booktitle> In Proc. of the Workshop on Efficient Implementation of Concurrent Object-Oriented Languages, pages m1-m9, </booktitle> <address> OOPSLA'93, Wash-ington D.C., </address> <month> September 27, </month> <year> 1993. </year>
Reference-contexts: Other collections are due to Turcotte [229] and Philippsen [193]. Gao and Kwong survey parallel and distributed Smalltalks in [241]. Wyatt et al. study several object-oriented languages and discuss whether the parallelism is appropriately integrated into the languages [240]. The paper by Karaorman and Bruno <ref> [138] </ref> elaborates on the design space of parallel object-oriented programming. The thesis of Papathomas [189] and an earlier paper [188] give a first classification of concurrent object-oriented languages. However, Papathomas focussed mainly on the way of combining concurrency with objects. <p> Mani Chandy ! mani@vlsi.caltech.edu Carl Kesselman ! carl@vlsi.caltech.edu Concurrency Class for Eiffel <ref> [138, 139] </ref> y t i v i t c a y r a d n u o b Murat Karaorman ! murat@cs.ucsb.edu John Bruno ! bruno@cs.ucsb.edu Concurrent Aggre gates, CA [74] - [75], [137, 196] p p p p p p p p p p p p p p p p
Reference: [139] <author> Murat Karaorman and John Bruno. </author> <title> Introduction of concurrency to a sequential language. </title> <journal> Communications of the ACM, </journal> <volume> 37(9) </volume> <pages> 103-116, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Mani Chandy ! mani@vlsi.caltech.edu Carl Kesselman ! carl@vlsi.caltech.edu Concurrency Class for Eiffel <ref> [138, 139] </ref> y t i v i t c a y r a d n u o b Murat Karaorman ! murat@cs.ucsb.edu John Bruno ! bruno@cs.ucsb.edu Concurrent Aggre gates, CA [74] - [75], [137, 196] p p p p p p p p p p p p p p p p
Reference: [140] <author> J. L. W. Kessels. </author> <title> An alternative to event queues for synchronization in monitors. </title> <journal> Communications of the ACM, </journal> <volume> 20(7) </volume> <pages> 500-503, </pages> <month> July </month> <year> 1977. </year>
Reference-contexts: Otherwise, i.e., if condition variables can be accessed from outside the class, an activity can get control over the coordination constraints. This would contradict the goal of callee-oriented coordination. Conditional Wait This variant of condition variables has been introduced by Kessels <ref> [140] </ref> to improve the conditional synchronization in monitors.
Reference: [141] <author> WooYoung Kim and Gul Agha. </author> <title> Compilation of a highly parallel Actor-based language. </title> <booktitle> In Proc. of the 5th Int. Workshop on Languages and Compilers for Parallel Computing, number 757 in Lecture Notes in Computer Science, </booktitle> <pages> pages 1-12, </pages> <address> New Haven, Connecticut, </address> <month> August 3-5, </month> <title> 1992. </title> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference: [142] <author> K. D. Kooper and K. Kennedy. </author> <title> Fast interproce-dural alias analysis. </title> <booktitle> In Proc. of the 16th ACM Symp. on Principles of Programming Languages, </booktitle> <pages> pages 49-59, </pages> <address> Austin, TX, </address> <month> January </month> <year> 1989. </year>
Reference-contexts: If the tool can prove to itself that there are no data dependences (and of course no control dependences) then the operations can be executed in parallel. Significant progress has been made on well defined sub-problems: Array based data dependence analysis [29, 239] and pointer or alias analysis techniques <ref> [30, 76, 142, 149] </ref> are used in various phases of compiler optimizations and to parallelize sequential code: target architectures are parallel machines, vector computers, and processors with instruction level parallelism. A good survey of the relevant techniques can be found in [23].
Reference: [143] <author> Tim Korson and John D. McGregor. </author> <title> Understanding object-oriented: A unifying paradigm. </title> <journal> 57 Communications of the ACM, </journal> <volume> 33(9) </volume> <pages> 40-60, </pages> <month> Sep--tember </month> <year> 1990. </year>
Reference-contexts: In this section we briefly discuss the underlying concepts. Our terminology is based on Wegner's influential article [232] and other surveying papers and text books <ref> [53, 143, 177, 200] </ref>. An object is the basic programming entity. It takes up a space in memory and thus has an associated address. The object stores a "state" and offers a set of routines or functions (also referred to as methods) to define meaningful operations on that state.
Reference: [144] <author> S. Krakowiak, M. Meysembourg, H. Nguyen Van, M. Riveill, C. Roisin, and X. Rous-set de Pina. </author> <title> Design and implementation of an object-oriented, strongly typed language for distributed applications. </title> <journal> Journal of Object Oriented Programming, </journal> <volume> 3(3) </volume> <pages> 11-22, </pages> <month> Septem-ber/October </month> <year> 1990. </year>
Reference: [145] <author> J. Kramer, J. Magee, M. Sloman, N. Dulay, S. Cheung, S. Crane, and K. Twidle. </author> <title> An introduction to distributed programming in Rex. </title> <booktitle> In Procedings of the 1991 Esprit Conf., </booktitle> <pages> pages 207-222, </pages> <address> Brussels, Belgium, </address> <month> November </month> <year> 1991. </year>
Reference-contexts: Similar to a routine call, a designated routine is started with the fork statement. However, the invoking routine and the invoked routine proceed concurrently. Today the fork statement is still very popular in thread packages (e.g. <ref> [?, 145] </ref>), where threads can be created on the fly that run in the address space of the caller. Similarly, on a more machine oriented level, operating system level processes can be forked dynamically. Together with the fork statement often a join statement is introduced for synchronization.
Reference: [146] <author> Serge Lacourte. </author> <title> Exceptions in Guide, an object-oriented language for distributed applications. </title> <booktitle> In Proc. of ECOOP'91 - European Conf. on Object-Oriented Programming, number 512 in Lecture Notes in Computer Science, </booktitle> <pages> pages 268-287, </pages> <address> Geneva, Switzerland, July 15-19, 1991. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference: [147] <author> Chris Laffra and Jan van den Bos. </author> <title> Constraints in concurrent object-oriented environments. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 64-67, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b ftp://ftp.cs.washington.edu/pub Procol <ref> [41, 147, 148] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H
Reference: [148] <author> Chris Laffra and Jan van den Bos. </author> <title> Propagators and concurrent constraints. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 68-72, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b ftp://ftp.cs.washington.edu/pub Procol <ref> [41, 147, 148] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H
Reference: [149] <author> W. Landi, B. G. Ryder, and S. Zhang. </author> <title> In-terprocedural modification side effect analysis with pointer aliasing. </title> <booktitle> In Proc. of the SIG-PLAN Conf. on Programming Language Design and Implementation, </booktitle> <pages> pages 56-67, </pages> <address> Albuquerque, New Mexico, </address> <month> June </month> <year> 1993. </year> <journal> ACM SIGPLAN Notices 28(6). </journal>
Reference-contexts: If the tool can prove to itself that there are no data dependences (and of course no control dependences) then the operations can be executed in parallel. Significant progress has been made on well defined sub-problems: Array based data dependence analysis [29, 239] and pointer or alias analysis techniques <ref> [30, 76, 142, 149] </ref> are used in various phases of compiler optimizations and to parallelize sequential code: target architectures are parallel machines, vector computers, and processors with instruction level parallelism. A good survey of the relevant techniques can be found in [23].
Reference: [150] <author> J. Larus. </author> <title> C**: A large-grain object-oriented, data-parallel programming language. </title> <booktitle> In Proc. of the 5th Int. Workshop on Languages and Compilers for Parallel Computing, number 757 in Lecture Notes in Computer Science, </booktitle> <pages> pages 326-341, </pages> <address> New Haven, Connecticut, </address> <month> August 3-5, </month> <title> 1992. </title> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference: [151] <author> James R. Larus, Brad Richards, and Guhan Viswanathan. </author> <title> C**: A large-grain object-oriented, data-parallel programming language. </title> <type> Technical Report UWTR-1126, </type> <institution> Computer Science Department, University of Wisconsin, Madison, </institution> <month> November </month> <year> 1992. </year>
Reference: [152] <author> James R. Larus, Brad Richards, and Guhan Viswanathan. </author> <title> LCM: Memory system support for parallel language implementation. </title> <booktitle> In Proc. of the 6th Int. Conf. on Architectural Support for Programming Languages and Operating Systems, ASPLOS'94, </booktitle> <pages> pages 208-218, </pages> <month> October 4-7, </month> <year> 1994. </year> <note> Also available as Computer Science Department, </note> <institution> University of Wisconsin, Madison, </institution> <note> Technical Report TR1237. </note>
Reference: [153] <author> Rodger Lea, Christian Jacquemot, and Eric Pillevesse. </author> <title> COOL: System support for distributed programming. </title> <journal> Communications of the ACM, </journal> <volume> 36(9) </volume> <pages> 37-46, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b ftp://isl.rdc.toshiba.co.jp/pub/toshiba group ! cooc@isl.rdc.toshiba.co.jp COOL (Chorus) <ref> [7, 153, 154] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d
Reference: [154] <author> Rodger Lea and James Weightman. </author> <title> Supporting object oriented languages in an distributed environment: The COOL approach. </title> <booktitle> In Proc. of Conf. on Technology of Object-Oriented Languages and Systems, TOOLS USA'91, </booktitle> <address> Santa Barbara, </address> <month> August 3-6, </month> <title> 1991. </title> <publisher> Prentice Hall, </publisher> <address> En-glewood Cliffs, New Jersey. </address>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b ftp://isl.rdc.toshiba.co.jp/pub/toshiba group ! cooc@isl.rdc.toshiba.co.jp COOL (Chorus) <ref> [7, 153, 154] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d
Reference: [155] <author> Jeng Kuen Lee and Yunn-Yen Chen. </author> <title> Compiler and library support for aggregate object communications on distributed memory machines. </title> <booktitle> In Proc. of the Workshop on Efficient Implementation of Concurrent Object-Oriented Languages, pages d1-d10, </booktitle> <address> OOPSLA'93, Washington D.C., </address> <month> September 27, </month> <year> 1993. </year>
Reference: [156] <author> Jenq Kuen Lee and Dennis Gannon. </author> <title> Object oriented parallel programming experiments and results. </title> <booktitle> In Proc. of Supercomputing'91, </booktitle> <pages> pages 273-282, </pages> <address> Albuquerque, NM, </address> <month> November 18-22, </month> <year> 1991. </year>
Reference: [157] <author> Y. S. Lee, J. H. Huang, and F. J. Wang. </author> <title> A distributed Smalltalk based on process-object model. </title> <editor> In G. J. Knafl, editor, </editor> <booktitle> Proc. of the 15th Annual Int. Computer Software and Applications Conf., </booktitle> <pages> pages 465-471, </pages> <address> Tokyo, Japan, September 11-13, 1991. </address> <publisher> IEEE Comput. Soc. Press. </publisher>
Reference-contexts: p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Distributed Smalltalk Object [31, 84, 172, 181, 208] y t i v i t c a 46 Distributed Smalltalk Process <ref> [157] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u
Reference: [158] <author> A. Lister. </author> <title> The problem of nested monitor calls. </title> <journal> Operating Systems Review, </journal> <volume> 11(3) </volume> <pages> 5-7, </pages> <month> July </month> <year> 1977. </year> <month> 58 </month>
Reference-contexts: Another disadvantage that monitors inherit from the underlying semaphore concept is that careless usage can still result in deadlocks. The problem is often referred to as the nested monitor call problem <ref> [104, 158, 237] </ref>, although not only in our opinion [192] it does not really deserve a new name.
Reference: [159] <author> Klaus-Peter Lohr. </author> <title> Concurrency annotations. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 27(10) </volume> <pages> 327-340, </pages> <month> Octo-ber </month> <year> 1992. </year>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b CEiffel <ref> [159, 160] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H
Reference: [160] <author> Klaus-Peter Lohr. </author> <title> Concurrency annotations for reusable software. </title> <journal> Communications of the ACM, </journal> <volume> 36(9) </volume> <pages> 81-89, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b CEiffel <ref> [159, 160] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H
Reference: [161] <author> Cristina Videira Lopes and Karl J. Lieberherr. </author> <title> Abstracting process-to-function relations in concurrent object-oriented applications. </title> <editor> In Mario Tokoro and Remo Pareschi, editors, </editor> <booktitle> Proc. of the 8th European Conf. on Object-Oriented Programming, ECOOP'94, number 821 in Lecture Notes in Computer Science, </booktitle> <pages> pages 81-99, </pages> <address> Bologne, Italy, July 4-8, 1994. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p pp p p mhijklm y t i v i t c a y r a d n u o b William Dally ! dally@ai.mit.edu Andrew Chien ! achien@cs.uiuc.edu Demeter <ref> [161] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u
Reference: [162] <author> S.A. MacKay, W.M. Gentleman, D.A. Stewart, and M. Wein. </author> <title> Harmony as an object-oriented operating system. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 209-211, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: A y t i v i t c a y r a d n u o b http://www.imag.fr ftp://ftp.imag.fr/pub/GUIDE HAL y t i v i t c a y r a d n u o b ftp://biobio.cs.uiuc.edu/pub/Hal Chris Houck ! chouck@ncsa.uiuc.edu Wooyoung Kim ! wooyoung@cs.uiuc.edu Gul Agha ! agha@cs.uiuc.edu Harmony <ref> [162] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u
Reference: [163] <author> Ole Lehrmann Madsen. </author> <title> Building abstractions for concurrent object-oriented programming. </title> <type> Technical report, </type> <institution> Computer Science Department, Aarhus University, Denmark, </institution> <month> Febru-ary </month> <year> 1993. </year>
Reference-contexts: A'UM H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t c a BETA <ref> [42, 164, 163] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d
Reference: [164] <author> Ole Lehrmann Madsen, Birger Moller-Pedersen, and Kristen Mygaard. </author> <title> Object-Oriented Programming in the BETA Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Mass., </address> <year> 1993. </year>
Reference-contexts: A'UM H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t c a BETA <ref> [42, 164, 163] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d
Reference: [165] <author> Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul, and Marc Shapiro. </author> <title> Fragmented objects for distributed abstractions. </title> <editor> In T. L. Casavant and M. Singhal, editors, </editor> <booktitle> Readings in Distributed Computing Systems. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1993. </year>
Reference-contexts: p p hijklm y t i v i t c a y r a d n u o b David Croley ! croley@mcc.com Arun Chatterjee ! arun@mcc.com Fleng++ [217] H H A A H H A A hijklm y t i v i t c a Fragmented Ob jects, FOG/C++ <ref> [94, 165] </ref> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p hijklm y t i v i t c a y r a d
Reference: [166] <author> Carl Manning. </author> <title> A peek at Acore, an Actor core language. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 84-86, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: p p p p p p p p p p p p p pp p p H H A A H H A A y t i v i t c a y r a d n u o b http://web.yl.is.s.u-tokyo.ac.jp group address ! abcl@is.s.u-tokyo.ac.jp Akinori Yonezawa ! yonezawa@is.s.u-tokyo.ac.jp Acore <ref> [166] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u
Reference: [167] <author> Katsumi Maruyama and Nicolas Raguideau. </author> <title> Concurrent object-oriented language COOL. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 29(9) </volume> <pages> 105-114, </pages> <month> Sep-tember </month> <year> 1994. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b ftp://ftp.chorus.fr/pub news:comp.os.chorus group ! info@chorus.com COOL (NTT), ACOOL <ref> [167] </ref> H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t c a y r
Reference: [168] <author> Hidehiko Masuhara, Satoshi Matsuoka, Takuo Watanabe, and Akinori Yonezawa. </author> <title> Object-oriented concurrent reflective languages can be implemented efficiently. </title> <booktitle> In Proc. of OOP-SLA'92, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <address> Vacnou-ver, Canada, </address> <month> October 18-22, </month> <year> 1992. </year> <journal> ACM SIG-PLAN Notices 27(10). </journal>
Reference-contexts: p p p p p p p p p p p p p pp p p H H A A H H A A y t i v i t c a y r a d n u o b http://web.yl.is.s.u-tokyo.ac.jp group address ! abcl@is.s.u-tokyo.ac.jp Akinori Yonezawa ! yonezawa@is.s.u-tokyo.ac.jp ABCL/R2 <ref> [168, 244] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H
Reference: [169] <author> Hidehiko Masuhara, Satoshi Matsuoka, and Aki-nori Yonezawa. </author> <title> An object-oriented concurrent reflective language for dynamic resource management in highly parallel computing. </title> <booktitle> In IPSJ SIG Notes, volume 94-PRG-18, </booktitle> <pages> pages 57-64, </pages> <year> 1994. </year>
Reference-contexts: p p p p p p p p p p p p pp p p H H A A H H A A y t i v i t c a y r a d n u o b http://web.yl.is.s.u-tokyo.ac.jp ftp://camille.is.s.u-tokyo.ac.jp group address ! abcl@is.s.u-tokyo.ac.jp Akinori Yonezawa ! yonezawa@is.s.u-tokyo.ac.jp ABCL/R3 <ref> [169] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H A
Reference: [170] <author> Satoshi Matsuoka and Akinori Yonezawa. </author> <title> Analysis of inheritance anomaly in object-oriented concurrent programming languages. </title> <editor> In Gul Agha, Peter Wegner, and Akinori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming, </booktitle> <pages> pages 107-150. </pages> <publisher> MIT Press Cambridge, </publisher> <address> Massachusetts, London, Eng-land, </address> <year> 1993. </year>
Reference-contexts: However, if methods that implement class functionality are separated from coordination code, the necessary changes can often be limited. This effect has been detected by several researchers, e.g. [8, 43, 133, 188, 225]. To our knowledge the most detailed analysis of the problem is due to Matsuoka and Yonezawa <ref> [170] </ref> who initially coined the term inheritance anomaly. Along the lines of the discussion of the mechanisms presented below, we will provide examples that will stress the fact that inheritance anomaly is a serious problem for the integration of concurrency coordination mechanisms and object-oriented languages.
Reference: [171] <author> Jeff McAffer and John Duimovich. </author> <title> Actra an industrial strength concurrent object oriented programming system. </title> <booktitle> In Proc. of ECOOP OOP-SLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 82-84, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: Callseen ! chris@iesd.auc.dk Gul Agha ! agha@cs.uiuc.edu Actra <ref> [171, 222] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n
Reference: [172] <author> Paul L. McCullough. </author> <title> Transparent forwarding: First steps. </title> <booktitle> In Proc. of OOPSLA'87, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 331-341, </pages> <address> Or-lando, Florida, </address> <month> October 4-8, </month> <year> 1987. </year> <journal> ACM SIG-PLAN Notices 22(12). </journal>
Reference-contexts: H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Distributed Smalltalk Object <ref> [31, 84, 172, 181, 208] </ref> y t i v i t c a 46 Distributed Smalltalk Process [157] H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p
Reference: [173] <author> Ciaran McHale. </author> <title> Synchronisation in Concurrent, Object-oriented Languages: Expressive Power, Genericity and Inheritance. </title> <type> PhD thesis, </type> <institution> Department of Computer Science, Trinity College, </institution> <address> Dublin 2, Ireland, </address> <month> October </month> <year> 1994. </year>
Reference-contexts: H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t c a Scheduling Predicates <ref> [173, 174] </ref> H H A A H H A A y t i v i t c a y r a d n u o b http://www.dsg.cs.tcd.ie/research/sos.html Alexis Donnelly ! donnelly@cs.tcd.ie Sean Baker ! baker@cs.tcd.ie Scoop [231] H H A A H H A A p p p p p p <p> A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b <ref> [173] </ref> H H A A H H A A y t i v i t c a y r a d n u o b http://www.dsg.cs.tcd.ie/research/sos.html Alexis Donnelly ! donnelly@cs.tcd.ie Sean Baker ! baker@cs.tcd.ie Synchronizing Re sources, SR [17, 16, 186] p p p p p p p p p p
Reference: [174] <author> Ciaran McHale, Bridget Walsh, Sean Baker, and Alexis Donnelly. </author> <title> Scheduling predicates. </title> <editor> In M. Tokoro, O. Nierstrasz, and P. Weg-ner, editors, </editor> <booktitle> Proc of the ECOOP'91 Workshop on Object-Based Concurrent Computing, </booktitle> <pages> pages 177-193, </pages> <address> Geneva, Switzerland, July 15-16, 1991. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address> <month> 59 </month>
Reference-contexts: H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t c a Scheduling Predicates <ref> [173, 174] </ref> H H A A H H A A y t i v i t c a y r a d n u o b http://www.dsg.cs.tcd.ie/research/sos.html Alexis Donnelly ! donnelly@cs.tcd.ie Sean Baker ! baker@cs.tcd.ie Scoop [231] H H A A H H A A p p p p p p
Reference: [175] <author> Piyush Mehrotra and John Van Rosendale. </author> <title> The BLAZE language: A parallel language for scientific programming. </title> <journal> Parallel Computing, </journal> <volume> 5 </volume> <pages> 339-361, </pages> <month> November </month> <year> 1987. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b http://www.daimi.aaudk/ beta news:comp.lang.beta http://www.mjolner.dk information ! info@mjolner.dk Blaze 2 <ref> [175, 176] </ref> H H A A H H A A y t i v i t c a y r a d n u o b Piyush Mehrotra ! pm@icase.edu Braid, Data Parallel Mentat [234, 235] p p p p p p p p p p p p p p p
Reference: [176] <author> Piyush Mehrotra and John Van Rosendale. </author> <title> Concurrent object access in BLAZE 2. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 40-42, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b http://www.daimi.aaudk/ beta news:comp.lang.beta http://www.mjolner.dk information ! info@mjolner.dk Blaze 2 <ref> [175, 176] </ref> H H A A H H A A y t i v i t c a y r a d n u o b Piyush Mehrotra ! pm@icase.edu Braid, Data Parallel Mentat [234, 235] p p p p p p p p p p p p p p p
Reference: [177] <author> Bertrand Meyer. </author> <title> Object-Oriented Software Construction. </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1988. </year>
Reference-contexts: In this section we briefly discuss the underlying concepts. Our terminology is based on Wegner's influential article [232] and other surveying papers and text books <ref> [53, 143, 177, 200] </ref>. An object is the basic programming entity. It takes up a space in memory and thus has an associated address. The object stores a "state" and offers a set of routines or functions (also referred to as methods) to define meaningful operations on that state. <p> Of course, clever compilers might be able to prove that only certain dynamic types may occur and therefore speed up the otherwise costly indirection of code selection. Other authors, e.g. <ref> [177] </ref>, claim that additional properties, e.g. automatic memory management are necessary for a language to become truly object-oriented. <p> The workshop [190] gives an overview on current research on debugging of parallel programs. To reason about the correctness of sequential object-oriented programs usually Meyer's principle of "design by contract" <ref> [177, 178] </ref> is applied.
Reference: [178] <author> Bertrand Meyer. </author> <title> Applying design by contract. </title> <journal> IEEE Computer, </journal> <volume> 25(10) </volume> <pages> 40-51, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: The workshop [190] gives an overview on current research on debugging of parallel programs. To reason about the correctness of sequential object-oriented programs usually Meyer's principle of "design by contract" <ref> [177, 178] </ref> is applied.
Reference: [179] <author> Bertrand Meyer. </author> <title> Systematic concurrent object-oriented programming. </title> <journal> Communications of the ACM, </journal> <volume> 36(9) </volume> <pages> 56-80, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Grimshaw ! grimshaw@virginia.edu Meyer's Proposal <ref> [179] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u
Reference: [180] <author> J. Elliot B. Moss and Walter H. Kohler. </author> <title> Con-currency features for the Trellis/Owl language. </title> <booktitle> In Proc. of ECOOP'87 - European Conf. on Object-Oriented Programming, number 276 in Lecture Notes in Computer Science, </booktitle> <pages> pages 171-180, </pages> <address> Paris, France, June 15-17, 1987. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: R. de Carvalho ! sergio@inf.puc-rio.br Trellis/Owl <ref> [180, 206, 207] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d
Reference: [181] <author> Claudio Nascimento and Jean Dollimore. </author> <title> Behavior maintenance of migrating objects in a distributed object-oriented environment. </title> <journal> IEEE Computer, </journal> <volume> 25(9), </volume> <month> September </month> <year> 1992. </year>
Reference-contexts: H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Distributed Smalltalk Object <ref> [31, 84, 172, 181, 208] </ref> y t i v i t c a 46 Distributed Smalltalk Process [157] H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p
Reference: [182] <author> Oscar Nierstrasz. </author> <title> Active objects in Hybrid. </title> <booktitle> In Proc. of OOPSLA'87, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 243-253, </pages> <address> Orlando, Florida, </address> <month> October 4-8, </month> <year> 1987. </year> <journal> ACM SIGPLAN Notices 22(12). </journal>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Hybrid <ref> [182, 183, 189] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d
Reference: [183] <author> Oscar Nierstrasz. </author> <title> A tour of Hybrid: A language for programming with active objects. </title> <editor> In D. Mandrioli and B. Meyer, editors, </editor> <booktitle> Advances in Object-Oriented Software Engineering, </booktitle> <pages> pages 167-182. </pages> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1992. </year>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Hybrid <ref> [182, 183, 189] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d
Reference: [184] <author> Mark Nuttal. </author> <title> A brief survey of systems providing process or object migration facilities. </title> <journal> Operating Systems Review, </journal> <volume> 28(4) </volume> <pages> 64-80, </pages> <month> October </month> <year> 1994. </year>
Reference-contexts: There are some survey articles on related topics. Bal discusses five parallel programming languages in [24]. Nuttal discusses systems that provide process or object migration in <ref> [184] </ref>. Cheng's contribution [72] is a collection of parallel programming languages and tools, some of which are object-oriented. Other collections are due to Turcotte [229] and Philippsen [193]. Gao and Kwong survey parallel and distributed Smalltalks in [241].
Reference: [185] <author> Kazuhiro Ogata, Satoshi Kurihara, Mikio Inari, and Norihisa Doi. </author> <title> The design and implementation of HoME. </title> <booktitle> In Proc. of the ACM SIG-PLAN Conf. on Programming Languages, Design and Implementation, PLDI'92, </booktitle> <pages> pages 44-54, </pages> <address> San Francisco, CA, </address> <month> June 17-19 </month> <year> 1992. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t c a y r a d n u o b http://www2.informatik.uni-erlangen.de/IMMD II/Research/Projects/HERAKLIT Peter Arius ! arius@informatik.uni-erlangen.de Wolfgang Betz ! betz@informatik.uni-erlangen.de HoME <ref> [185] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u
Reference: [186] <author> Ronald A. Olsson, Gregory R. Andrews, Michael H. Coffin, and Gregg M. Townsend. </author> <title> SR a language for parallel and distributed programming. </title> <type> Technical Report TR 92-09, </type> <institution> Dept. of Computer Science, University of Arizona, Tuc-son, </institution> <month> March </month> <year> 1992. </year>
Reference-contexts: pp p p m y r a d n u o b [173] H H A A H H A A y t i v i t c a y r a d n u o b http://www.dsg.cs.tcd.ie/research/sos.html Alexis Donnelly ! donnelly@cs.tcd.ie Sean Baker ! baker@cs.tcd.ie Synchronizing Re sources, SR <ref> [17, 16, 186] </ref> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H A A y t i v i
Reference: [187] <author> Joseph Pallas and David Ungar. </author> <title> Multiprocessor Smalltalk a case study of a multiprocessor-based programming environment. </title> <booktitle> In Proc. of SIGPLAN Conf., </booktitle> <pages> pages 268-277, </pages> <year> 1988. </year>
Reference-contexts: Heinz ! heinze@ira.uka.de MPC++ y t i v i t c a y r a d n u o b http://www.rwcp.or.jp Yutaka Ishikawa ! ishikawa@rwcp.or.jp Multiprocessor Smalltalk <ref> [187] </ref> y t i v i t c a NAM p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n
Reference: [188] <author> M. Papathomas. </author> <title> Concurrency issues in object-oriented programming languages. </title> <editor> In D. Tsichritzis, editor, </editor> <booktitle> Object Oriented Development, </booktitle> <pages> pages 207-245. </pages> <institution> University of Geneva, Switzerland, </institution> <year> 1989. </year>
Reference-contexts: Wyatt et al. study several object-oriented languages and discuss whether the parallelism is appropriately integrated into the languages [240]. The paper by Karaorman and Bruno [138] elaborates on the design space of parallel object-oriented programming. The thesis of Papathomas [189] and an earlier paper <ref> [188] </ref> give a first classification of concurrent object-oriented languages. However, Papathomas focussed mainly on the way of combining concurrency with objects. He does not classify the broad number of languages, we look at in this report. <p> Such changes might snowball up and down the inheritance hierarchy and require code changes in other classes as well. However, if methods that implement class functionality are separated from coordination code, the necessary changes can often be limited. This effect has been detected by several researchers, e.g. <ref> [8, 43, 133, 188, 225] </ref>. To our knowledge the most detailed analysis of the problem is due to Matsuoka and Yonezawa [170] who initially coined the term inheritance anomaly.
Reference: [189] <author> Michael Papathomas. </author> <title> Language Design Rationale and Semantic Framework for Concurrent Object-Oriented Programming. </title> <type> PhD thesis, </type> <institution> Uni-versite de Geneve, Department d'Informatique, </institution> <month> January </month> <year> 1992. </year>
Reference-contexts: Gao and Kwong survey parallel and distributed Smalltalks in [241]. Wyatt et al. study several object-oriented languages and discuss whether the parallelism is appropriately integrated into the languages [240]. The paper by Karaorman and Bruno [138] elaborates on the design space of parallel object-oriented programming. The thesis of Papathomas <ref> [189] </ref> and an earlier paper [188] give a first classification of concurrent object-oriented languages. However, Papathomas focussed mainly on the way of combining concurrency with objects. He does not classify the broad number of languages, we look at in this report. <p> A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Hybrid <ref> [182, 183, 189] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d
Reference: [190] <editor> Proc. </editor> <booktitle> of the 3rd ACM/ONR Workshop on Parallel and Distributed Debugging. ACM SIG-PLAN Notices 28(12), </booktitle> <address> San Diego, CA, </address> <month> May 17-18, </month> <year> 1993. </year>
Reference-contexts: Usually these errors are hard to detect because race-conditions can cause non-deterministic erratic behavior. This non-determinism makes debugging difficult, because the presense of a debugger or an enabled trace file output can easily change the behavior of the 17 temporal interleaving and thus hide the error. The workshop <ref> [190] </ref> gives an overview on current research on debugging of parallel programs. To reason about the correctness of sequential object-oriented programs usually Meyer's principle of "design by contract" [177, 178] is applied.
Reference: [191] <author> D. L. Parnas. </author> <title> On the criteria to be used in decomposing systems into modules. </title> <journal> Communications of the ACM, </journal> <volume> 15(12) </volume> <pages> 1053-1058, </pages> <month> December </month> <year> 1972. </year>
Reference-contexts: Class-based programming languages enforce a programming style which is desirable from the software engineer's point of view. Class implementations hide information regarding their internal details behind a well defined interface and hence support a modular system design <ref> [191] </ref>. A given class should be easy to replace by an alternative implementation that offers the same interface of routines and functions. A straightforward extension of the concept of classes leads to classes that have a type argument.
Reference: [192] <author> D. L. Parnas. </author> <title> The non-problem of nested monitor calls. </title> <journal> Operating Systems Review, </journal> <volume> 12(1) </volume> <pages> 12-14, </pages> <month> January </month> <year> 1978. </year>
Reference-contexts: Another disadvantage that monitors inherit from the underlying semaphore concept is that careless usage can still result in deadlocks. The problem is often referred to as the nested monitor call problem [104, 158, 237], although not only in our opinion <ref> [192] </ref> it does not really deserve a new name. Since the lack of expressive power of the monitor construct seems hard to overcome without a change of concept, several alternative concurrency coordination mechanisms have been proposed that are based on the monitor concept.
Reference: [193] <author> Michael Philippsen. </author> <title> Imperative concurrent object-oriented languages: An annotated bibliography. </title> <type> Technical Report TR-95-049, </type> <institution> International Computer Science Institute, Berkeley, </institution> <month> August </month> <year> 1995. </year>
Reference-contexts: Bal discusses five parallel programming languages in [24]. Nuttal discusses systems that provide process or object migration in [184]. Cheng's contribution [72] is a collection of parallel programming languages and tools, some of which are object-oriented. Other collections are due to Turcotte [229] and Philippsen <ref> [193] </ref>. Gao and Kwong survey parallel and distributed Smalltalks in [241]. Wyatt et al. study several object-oriented languages and discuss whether the parallelism is appropriately integrated into the languages [240]. The paper by Karaorman and Bruno [138] elaborates on the design space of parallel object-oriented programming.
Reference: [194] <author> Michael Philippsen and Ernst A. Heinz. </author> <title> Automatic synchronization elimination in synchronous foralls. </title> <booktitle> In Frontiers '95:The 5th Symp. on the Frontiers of Massively Parallel Computation, </booktitle> <pages> pages 350-357, </pages> <address> Mc Lean, VA, </address> <month> February 6-9, </month> <year> 1995. </year>
Reference-contexts: This allows the combination of both assignments in a single forall which avoids a costly synchronization barrier <ref> [194, 228] </ref>. But for sake of simplicity, let us assume that the compiler does access a [i-1] here. A similar effect can be noticed if class Element is used to construct a derived class by implementation inheritance.
Reference: [195] <author> Michael Philippsen and Walter F. Tichy. </author> <title> Modula-2* and its compilation. </title> <booktitle> In 1st Int. Conf. of the Austrian Center for Parallel Computation, </booktitle> <address> Salzburg, Austria, </address> <year> 1991, </year> <pages> pages 169-183. </pages> <publisher> Springer Verlag, Lecture Notes in Computer Science 591, </publisher> <year> 1992. </year>
Reference-contexts: From the beginning of parallel programming language design the star has repeatedly been used to indicate the fact that a language is capable of expressing parallelism; for example the (non object-oriented) languages *Lisp [220], C* [221], Modula-2* <ref> [195] </ref>, and the COOL C** follow this convention.
Reference: [196] <author> John Plevyak, Xingbin Zhang, and Andrew A. Chien. </author> <title> Obtaining sequential efficiency for concurrent object-oriented languages. </title> <booktitle> In Proc. of the 22nd Annual ACM SIGACT-SIGPLAN Symp. on Principles of Programming Languages POPL'95, </booktitle> <pages> pages 311-321, </pages> <address> San Francisco, CA, </address> <month> January 22-25, </month> <year> 1995. </year>
Reference-contexts: Mani Chandy ! mani@vlsi.caltech.edu Carl Kesselman ! carl@vlsi.caltech.edu Concurrency Class for Eiffel [138, 139] y t i v i t c a y r a d n u o b Murat Karaorman ! murat@cs.ucsb.edu John Bruno ! bruno@cs.ucsb.edu Concurrent Aggre gates, CA [74] - [75], <ref> [137, 196] </ref> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H A A y t i v i t
Reference: [197] <author> Steven S. Popovic, Gail E. Kaiser, and Shyht-sum F. Wu. </author> <title> MELDing transactions and objects. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 94-98, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference-contexts: H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p - y r a d n u o b MeldC <ref> [134, 135, 197] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p mme y r a d
Reference: [198] <author> Roland Pozo. </author> <title> A stream-based interface in C++ for programming heterogeneous systems. </title> <booktitle> In Proc. of the CRNS-NSF Workshop on Environment and Tools for Parallel Scientific Computing, </booktitle> <pages> pages 162-177, </pages> <address> Saint Hilaire du Tou-vet, France, </address> <month> September 7-8, </month> <year> 1992. </year> <title> Elsevier, </title> <booktitle> Advances in Parallel Computing, </booktitle> <volume> Vol. 6, </volume> <year> 1993. </year>
Reference: [199] <author> Myra Jean Prelle, Ann M. Wollrath, Thomas J. Brando, and Edward H. Bensley. </author> <title> The impact of selected concurrent language constructs on the SAM run-time system. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 99-103, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference: [200] <author> R. S. Pressmann. </author> <title> Software Engineering. </title> <publisher> McGraw-Hill Book Company, </publisher> <address> New York, </address> <year> 1987. </year>
Reference-contexts: In this section we briefly discuss the underlying concepts. Our terminology is based on Wegner's influential article [232] and other surveying papers and text books <ref> [53, 143, 177, 200] </ref>. An object is the basic programming entity. It takes up a space in memory and thus has an associated address. The object stores a "state" and offers a set of routines or functions (also referred to as methods) to define meaningful operations on that state.
Reference: [201] <author> Donna S. Reese and Ed Luke. </author> <title> Object oriented Fortran for development of portable parallel programs. </title> <booktitle> In Proc. of the 3rd IEEE Symp. on Parallel and Distributed Processing, </booktitle> <pages> pages 608-615, </pages> <address> Dallas, Texas, </address> <month> December 2-5, </month> <year> 1991. </year>
Reference-contexts: i t c a y r a d n u o b http://www.extreme.indiana.edu/sage Dennis Gannon ! gannon@cs.indiana.edu Parallel Computing Action [203, 204] y t i v i t c a y r a d n u o b Hayssam Saleh ! saleh@litp.ibp.fr Philippe Gautron ! gautron@litp.ibp.fr Parallel Object Oriented Fortran <ref> [201] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u
Reference: [202] <author> M. Riveill. </author> <title> An overview of the Guide language. </title> <booktitle> In 2nd Workshop on Objects in Large Distributed Applications, </booktitle> <address> Vancouver (Canada), </address> <month> 18 October </month> <year> 1992. </year>
Reference: [203] <author> Hayssam Saleh and Philippe Gautron. </author> <title> A con-currency control mechanism for C++ objects. </title> <editor> In M. Tokoro, O. Nierstrasz, and P. Wegner, editors, </editor> <booktitle> Proc. of the ECOOP'91 Workshop on object-based concurrent computing, </booktitle> <pages> pages 195-210, </pages> <address> Geneva, Switzerland, July 15-16, 1991. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: o b ftp://ftp.uni-kl.de/reports uni-kl/computer science/system software http://www.uni-kl.de/AG-Nehmer/panda/panda.html Holger Assenmacher ! assen@informatik.uni-kl.de Reinhard Schwarz ! schwarz@informatik.uni-kl.de Parallel C++, pC++ H H A A H H A A y t i v i t c a y r a d n u o b http://www.extreme.indiana.edu/sage Dennis Gannon ! gannon@cs.indiana.edu Parallel Computing Action <ref> [203, 204] </ref> y t i v i t c a y r a d n u o b Hayssam Saleh ! saleh@litp.ibp.fr Philippe Gautron ! gautron@litp.ibp.fr Parallel Object Oriented Fortran [201] H H A A H H A A p p p p p p p p p p p p
Reference: [204] <author> Hayssam Saleh and Philippe Gautron. </author> <title> A system library for C++ distributed applications on Transputer. </title> <booktitle> In Proc. of the 3rd Int. Conf. on Applications of Transputers, </booktitle> <pages> pages 638-643. </pages> <publisher> IOS Press, </publisher> <address> Amsterdam, Netherlands, </address> <month> August 28-30, </month> <year> 1991. </year>
Reference-contexts: o b ftp://ftp.uni-kl.de/reports uni-kl/computer science/system software http://www.uni-kl.de/AG-Nehmer/panda/panda.html Holger Assenmacher ! assen@informatik.uni-kl.de Reinhard Schwarz ! schwarz@informatik.uni-kl.de Parallel C++, pC++ H H A A H H A A y t i v i t c a y r a d n u o b http://www.extreme.indiana.edu/sage Dennis Gannon ! gannon@cs.indiana.edu Parallel Computing Action <ref> [203, 204] </ref> y t i v i t c a y r a d n u o b Hayssam Saleh ! saleh@litp.ibp.fr Philippe Gautron ! gautron@litp.ibp.fr Parallel Object Oriented Fortran [201] H H A A H H A A p p p p p p p p p p p p
Reference: [205] <author> Michele Di Santo and Giulio Iannello. </author> <title> Implementing actor-based primitives on distributed-memory architectures. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 45-49, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference: [206] <author> C. Schaffert, T. Cooper, B. Bullis, M. Kil-ian, and C. Wilpolt. </author> <title> An introduction to Trellis/Owl. </title> <booktitle> In Proc. of OOPSLA'86, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 9-16, </pages> <address> Portland, Oregon, </address> <month> September 29 - October 2, </month> <year> 1986. </year> <journal> ACM SIGPLAN Notices 21(11). </journal>
Reference-contexts: R. de Carvalho ! sergio@inf.puc-rio.br Trellis/Owl <ref> [180, 206, 207] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d
Reference: [207] <author> Craig Schaffert, Topher Cooper, and Carrie Wilpolt. </author> <title> Trellis - object-based environment: Language reference manual. </title> <type> Technical Report DEC-TR-372, </type> <institution> Eastern Research Lab, DEC, Hudson, Massachusetts, </institution> <month> November </month> <year> 1985. </year>
Reference-contexts: R. de Carvalho ! sergio@inf.puc-rio.br Trellis/Owl <ref> [180, 206, 207] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d
Reference: [208] <author> Marcel Schelvis and Eddy Bledoeg. </author> <title> The implementation of a Distributed Smalltalk. </title> <booktitle> In Proc. of the European Conf. on Object-Oriented Programming, ECOOP'88, number 322 in Lecture Notes in Computer Science, </booktitle> <pages> pages 212-232, </pages> <address> Oslo, Norway, </address> <month> August 15-17, </month> <title> 1988. </title> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Distributed Smalltalk Object <ref> [31, 84, 172, 181, 208] </ref> y t i v i t c a 46 Distributed Smalltalk Process [157] H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p
Reference: [209] <author> Heinz W. Schmidt. </author> <title> Data parallel object-oriented programming. </title> <booktitle> In Proc. of the 5th Australian Supercomputer Conf., </booktitle> <pages> pages 263-272, </pages> <address> Melbourne, </address> <month> December </month> <year> 1992. </year>
Reference-contexts: S. Sunderam ! vss@mathcs.emory.edu Charles Hartley ! skip@mathcs.emory.edu DOWL, distributed Trellis/Owl [1, 2] y t i v i t c a y r a d n u o b Bruno Achauer ! bruno@tk.telematik.informatik.uni-karlsruhe.de dpSather <ref> [209] </ref> H H A A H H A A y t i v i t c a y r a d n u o b Heinz Schmidt ! Heinz.Schmidt@fcit.monash.edu.au Dragoon [21, 22] H H A A H H A A p p p p p p p p p p p
Reference: [210] <author> Robert J. Smith. </author> <title> Experimental systems kit final project report. </title> <type> Technical report, </type> <institution> Microelectronics and Computer Technology Corporation, MCC, Austin, Texas, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Jean-Marc Jezequel ! jezequel@irisa.fr ES-Kit Software <ref> [210, 223] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n
Reference: [211] <author> Gert Smolka. </author> <title> The definition of kernal Oz. </title> <type> Technical report, </type> <institution> DFKI, German Research Center for 61 Artificial Intelligence, Saarbrucken, Germany, </institution> <year> 1994. </year>
Reference-contexts: Bal ! bal@cs.vu.nl Oz, Perdio <ref> [113, 211, 212, 213] </ref> H H A A H H A A hijklm y t i v i t c a y r a d n u o b ftp://ps-ftp.dfki.uni-sb.de http://ps-www.dfki.uni-sb.de/oz group ! oz@dfki.uni-sb.de Gerd Smolka ! smolka@dfki.uni-sb.de Panda [19] H H A A H H A A p p p
Reference: [212] <author> Gert Smolka. </author> <title> An Oz primer. </title> <type> Technical report, </type> <institution> DFKI, German Research Center for Artificial Intelligence, Saarbrucken, Germany, </institution> <month> April </month> <year> 1995. </year>
Reference-contexts: Bal ! bal@cs.vu.nl Oz, Perdio <ref> [113, 211, 212, 213] </ref> H H A A H H A A hijklm y t i v i t c a y r a d n u o b ftp://ps-ftp.dfki.uni-sb.de http://ps-www.dfki.uni-sb.de/oz group ! oz@dfki.uni-sb.de Gerd Smolka ! smolka@dfki.uni-sb.de Panda [19] H H A A H H A A p p p
Reference: [213] <author> Gert Smolka, Martin Henz, and Jorg Wurtz. </author> <title> Object-oriented concurrent constraint programming in Oz. </title> <editor> In P. van Hentenryck and V. Saraswat, editors, </editor> <booktitle> Principles and Practice of Constraint Programming, </booktitle> <pages> pages 27-48. </pages> <publisher> The MIT Press, </publisher> <year> 1995. </year>
Reference-contexts: Bal ! bal@cs.vu.nl Oz, Perdio <ref> [113, 211, 212, 213] </ref> H H A A H H A A hijklm y t i v i t c a y r a d n u o b ftp://ps-ftp.dfki.uni-sb.de http://ps-www.dfki.uni-sb.de/oz group ! oz@dfki.uni-sb.de Gerd Smolka ! smolka@dfki.uni-sb.de Panda [19] H H A A H H A A p p p
Reference: [214] <author> A. Snyder. </author> <title> Encapsulation and inheritance. </title> <booktitle> In Proc. of OOPSLA'86, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 38-45, </pages> <address> Portland, Oregon, </address> <month> Septem-ber 29 - October 2 </month> <year> 1986. </year> <journal> ACM SIGPLAN Notices 21(11). </journal>
Reference-contexts: Depending on the particular language design, different sub-type relations are required for parameters and arguments. The terminology differentiates between co-variance and contra-variance. Object based inheritance is often called delegation <ref> [214] </ref>; see the rightmost column of the above diagram. When a routine of an object is invoked which is not explicitly provided by that object's implementation, the object delegates the call to another object from which it was derived.
Reference: [215] <author> Jan van der Spek. </author> <title> POOL-X and its implementation. </title> <editor> In Pierre America, editor, </editor> <booktitle> Parallel Database Systems. PRISMA Workshop, </booktitle> <pages> pages 309-344, </pages> <address> Noordwijk, The Netherlands, Septem-ber 24-26, 1990. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidel-berg, New York. </address>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b ftp://ftp.erc.msstate.edu Donna Reese ! dreese@erc.msstate.edu 48 PO y t i v i t c a POOL, POOL-T, POOL-I <ref> [8, 9, 10, 11, 215, 236] </ref> y t i v i t c a Presto [33, 34] H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p
Reference: [216] <author> Kazunori Takashio and Mario Tokoro. DROL: </author> <title> An object-oriented programming language for distributed real-time systems. </title> <booktitle> In Proc. of OOP-SLA'92, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 276-294, </pages> <address> Vacnouver, Canada, </address> <month> October 18-22, </month> <year> 1992. </year> <journal> ACM SIGPLAN Notices 27(10). </journal>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p - y r a d n u o b Colin Atkinson ! atkinson@cl.uh.edu Marco De Michele ! demichel@txt.it DROL <ref> [216] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p me y r a d n u
Reference: [217] <author> Hidehiko Tanaka. </author> <title> A parallel object oriented language FLENG++ and its control system on the parallel machine PIE64. </title> <editor> In A. Yonezawa and T. Ito, editors, </editor> <booktitle> Concurrency: Theory, Language and Architecture. Japan/UK Workshop Proc., </booktitle> <pages> pages 157-172. </pages> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidel-berg, New York, </address> <year> 1991. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t c a y r a d n u o b David Croley ! croley@mcc.com Arun Chatterjee ! arun@mcc.com Fleng++ <ref> [217] </ref> H H A A H H A A hijklm y t i v i t c a Fragmented Ob jects, FOG/C++ [94, 165] p p p p p p p p p p p p p p p p p p p p p p p p p p p
Reference: [218] <author> Andrew S. Tanenbaum, M. Frans Kaashoek, and Henry E. Bal. </author> <title> Parallel programming using shared objects and braodcasting. </title> <journal> IEEE Computer, </journal> <volume> 25(18) </volume> <pages> 10-19, </pages> <month> August </month> <year> 1992. </year>
Reference: [219] <author> Kenjiro Taura, Satoshi Matsuoka, and Akinori Yonezawa. ABCL/f: </author> <title> A future-based polymorphic typed concurrent object-oriented language its design and implementation. </title> <editor> In G. Blel-loch, M. Chandy, and S. Jagannathan, editors, </editor> <booktitle> Proc. of the DIMACS workshop on Specification of Parallel Algorithms, </booktitle> <year> 1994. </year>
Reference-contexts: p p p p p p p p p p p p pp p p H H A A H H A A y t i v i t c a y r a d n u o b http://web.yl.is.s.u-tokyo.ac.jp ftp://camille.is.s.u-tokyo.ac.jp group address ! abcl@is.s.u-tokyo.ac.jp Akinori Yonezawa ! yonezawa@is.s.u-tokyo.ac.jp ABCL/f <ref> [219] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H A
Reference: [220] <institution> Thinking Machines Corporation, Cambridge, Massachusetts. </institution> <note> *Lisp Reference Manual, Version 5.0, </note> <year> 1988. </year>
Reference-contexts: From the beginning of parallel programming language design the star has repeatedly been used to indicate the fact that a language is capable of expressing parallelism; for example the (non object-oriented) languages *Lisp <ref> [220] </ref>, C* [221], Modula-2* [195], and the COOL C** follow this convention.
Reference: [221] <institution> Thinking Machines Corporation, Cambridge, Massachusetts. </institution> <note> C* Language Reference Manual, </note> <month> April </month> <year> 1991. </year>
Reference-contexts: From the beginning of parallel programming language design the star has repeatedly been used to indicate the fact that a language is capable of expressing parallelism; for example the (non object-oriented) languages *Lisp [220], C* <ref> [221] </ref>, Modula-2* [195], and the COOL C** follow this convention.
Reference: [222] <author> David A. Thomas, Wilf R. LaLonde, John Duimovich, Michael Wilson, Jeff McAffer, and Brian Barry. </author> <title> Actra amultitask-ing/multiprocessing Smalltalk. </title> <booktitle> In ACM SIG-PLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 87-89, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: Callseen ! chris@iesd.auc.dk Gul Agha ! agha@cs.uiuc.edu Actra <ref> [171, 222] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n
Reference: [223] <author> Michael D. Tiemann. </author> <title> Solving the RPC problem in GNU C++. </title> <type> Technical Report ESKIT-285-88, </type> <institution> Microelectronics and Computer Technology Corporation, MCC, Austin, Texas, </institution> <year> 1988. </year>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Jean-Marc Jezequel ! jezequel@irisa.fr ES-Kit Software <ref> [210, 223] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n
Reference: [224] <author> Chris Tomlinson, Won Kim, Marek Scheevel, Vi-neet Singh, Becky Will, and Gul Agha. Rosette: </author> <title> an object-oriented concurrent system architecture. </title> <booktitle> In ACM SIGPLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 91-93, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p m y r a d n u o b Dietrich Boles ! boles@informatik.uni-oldenburg.de Rosette <ref> [224, 225, 226] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H
Reference: [225] <author> Chris Tomlinson and Vineet Singh. </author> <title> Inheritance and synchronization with Enabled-sets. </title> <booktitle> In Proc. of OOPSLA'89, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 103-112, </pages> <address> New Orleans, Louisiana, </address> <month> October 1-6, </month> <year> 1989. </year> <journal> ACM SIGPLAN Notices (24)10. </journal>
Reference-contexts: Such changes might snowball up and down the inheritance hierarchy and require code changes in other classes as well. However, if methods that implement class functionality are separated from coordination code, the necessary changes can often be limited. This effect has been detected by several researchers, e.g. <ref> [8, 43, 133, 188, 225] </ref>. To our knowledge the most detailed analysis of the problem is due to Matsuoka and Yonezawa [170] who initially coined the term inheritance anomaly. <p> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p m y r a d n u o b Dietrich Boles ! boles@informatik.uni-oldenburg.de Rosette <ref> [224, 225, 226] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H
Reference: [226] <author> Christine Tomlinson, Mark Scheevel, and Vi-neet Singh. </author> <note> Report on Rosette 1.1, </note> <month> August </month> <year> 1991. </year> <title> Object-Oriented and Distributed Systems Laboratory, </title> <institution> Microelectronics and Computer Technology Corp., MCC. </institution>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p m y r a d n u o b Dietrich Boles ! boles@informatik.uni-oldenburg.de Rosette <ref> [224, 225, 226] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H
Reference: [227] <author> Rajiv Trehan, Nobuyuki Sawashima, Akira Morishita, Ichiro Tomoda, Toru Imai, and Ken ichi Maeda. </author> <title> Concurrent object oriented `C` (cooC). </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 28(2) </volume> <pages> 45-52, </pages> <month> February </month> <year> 1993. </year>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p mhijklm y t i v i t c a cooC <ref> [227] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u
Reference: [228] <author> Chau-Wen Tseng. </author> <title> Compiler optimizations for eliminating barrier synchronization. </title> <booktitle> In 5th ACM SIGPLAN Symp. on Principles and Practice of Parallel Programming, PPoPP, </booktitle> <pages> pages 144-155, </pages> <address> Santa Barbara, CA, </address> <month> July 19-21 </month> <year> 1995. </year> <month> 62 </month>
Reference-contexts: This allows the combination of both assignments in a single forall which avoids a costly synchronization barrier <ref> [194, 228] </ref>. But for sake of simplicity, let us assume that the compiler does access a [i-1] here. A similar effect can be noticed if class Element is used to construct a derived class by implementation inheritance.
Reference: [229] <author> Louis H. Turcotte. </author> <title> A survey of software envi-ronments for exploiting network computing resources. </title> <type> Technical report, </type> <institution> Mississippi State University, </institution> <month> June 11, </month> <year> 1993. </year>
Reference-contexts: Bal discusses five parallel programming languages in [24]. Nuttal discusses systems that provide process or object migration in [184]. Cheng's contribution [72] is a collection of parallel programming languages and tools, some of which are object-oriented. Other collections are due to Turcotte <ref> [229] </ref> and Philippsen [193]. Gao and Kwong survey parallel and distributed Smalltalks in [241]. Wyatt et al. study several object-oriented languages and discuss whether the parallelism is appropriately integrated into the languages [240]. The paper by Karaorman and Bruno [138] elaborates on the design space of parallel object-oriented programming.
Reference: [230] <author> Minoru Uehara and Mario Tokoro. </author> <title> An adaptive load balancing method in the computational field model. </title> <booktitle> In Proc. of ECOOP OOPSLA'90 Workshop on object-based concurrent programming, </booktitle> <pages> pages 109-113, </pages> <address> Ottawa, Canada, </address> <month> October 21-22, </month> <year> 1990. </year> <note> OOPS Messenger 2(2) April 1991. </note>
Reference: [231] <author> Jean Vaucher, Guy Lapalme, and Jacques Malenfant. </author> <title> SCOOP structured concurrent object-oriented prolog. </title> <booktitle> In ECOOP'88 Eu-ropean Conf. on Object-Oriented Programming, </booktitle> <pages> pages 191-210, </pages> <address> Oslo, Norway, </address> <month> August 15-17, </month> <title> 1988. </title> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: pp p p hijklm y t i v i t c a Scheduling Predicates [173, 174] H H A A H H A A y t i v i t c a y r a d n u o b http://www.dsg.cs.tcd.ie/research/sos.html Alexis Donnelly ! donnelly@cs.tcd.ie Sean Baker ! baker@cs.tcd.ie Scoop <ref> [231] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u
Reference: [232] <author> Peter Wegner. </author> <title> Dimensions of object.based language design. </title> <booktitle> In Proc. of OOPSLA'87, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 168-182, </pages> <address> Or-lando, Florida, </address> <month> October 4-8, </month> <year> 1987. </year> <journal> ACM SIG-PLAN Notices 22(12). </journal>
Reference-contexts: In this section we briefly discuss the underlying concepts. Our terminology is based on Wegner's influential article <ref> [232] </ref> and other surveying papers and text books [53, 143, 177, 200]. An object is the basic programming entity. It takes up a space in memory and thus has an associated address.
Reference: [233] <author> Peter Wegner. </author> <title> Tradeoffs between reasoning and modeling. </title> <editor> In Gul Agha, Peter Wegner, and Akinori Yonezawa, editors, </editor> <booktitle> Research Directions in Concurrent Object-Oriented Programming, </booktitle> <pages> pages 23-40. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The Mentat compiler exploits this fact to initiate parallelism automatically. We will not discuss logic-based object-oriented languages in this survey for two reasons. First, the reader can find an excellent survey of these languages in [82]. Second, Wegner has reasoned in <ref> [233] </ref> that object-oriented and logic-programming paradigms are incompatible. We only mention Fleng++ because of its mechanism for coordination of concurrency. 2.2 Fork, Join, and Equivalents In this section we present language constructs that start exactly one new concurrent activity at a time.
Reference: [234] <author> Emily A. West. </author> <title> Combining Control and Data Parallelism: Data Parallel Extensions to the Mentat Programming Language. </title> <type> PhD thesis, </type> <institution> University of Virginia, Department of Computer Science, </institution> <month> May </month> <year> 1994. </year> <note> Available as technical report CS-94-16. </note>
Reference-contexts: r a d n u o b http://www.daimi.aaudk/ beta news:comp.lang.beta http://www.mjolner.dk information ! info@mjolner.dk Blaze 2 [175, 176] H H A A H H A A y t i v i t c a y r a d n u o b Piyush Mehrotra ! pm@icase.edu Braid, Data Parallel Mentat <ref> [234, 235] </ref> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Andrew S.
Reference: [235] <author> Emily A. West and Andrew S. Grimshaw. </author> <title> Braid: Integrating task and data parallelism. </title> <booktitle> In Frontiers '95: The 5th Symp. on the Frontiers of Massively Parallel Computation, </booktitle> <pages> pages 211-219, </pages> <address> McLean, VA, </address> <month> February 6-9, </month> <year> 1995. </year>
Reference-contexts: r a d n u o b http://www.daimi.aaudk/ beta news:comp.lang.beta http://www.mjolner.dk information ! info@mjolner.dk Blaze 2 [175, 176] H H A A H H A A y t i v i t c a y r a d n u o b Piyush Mehrotra ! pm@icase.edu Braid, Data Parallel Mentat <ref> [234, 235] </ref> p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p m y r a d n u o b Andrew S.
Reference: [236] <author> R. H. H. Wester and B. J. A. Hulshof. </author> <title> The POOMA operating system. </title> <editor> In Pierre America, editor, </editor> <booktitle> Parallel Database Systems. PRISMA Workshop, </booktitle> <pages> pages 396-323, </pages> <address> Noordwijk, The Netherlands, September 24-26, 1990. </address> <publisher> Springer-Verlag Berlin, </publisher> <address> Heidelberg, New York. </address>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p pp p p - y r a d n u o b ftp://ftp.erc.msstate.edu Donna Reese ! dreese@erc.msstate.edu 48 PO y t i v i t c a POOL, POOL-T, POOL-I <ref> [8, 9, 10, 11, 215, 236] </ref> y t i v i t c a Presto [33, 34] H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p
Reference: [237] <author> H. </author> <title> Wettstein. The problem of nested monitor calls revisited. </title> <journal> Operating Systems Review, </journal> <volume> 12(1) </volume> <pages> 19-23, </pages> <month> January </month> <year> 1978. </year>
Reference-contexts: Another disadvantage that monitors inherit from the underlying semaphore concept is that careless usage can still result in deadlocks. The problem is often referred to as the nested monitor call problem <ref> [104, 158, 237] </ref>, although not only in our opinion [192] it does not really deserve a new name.
Reference: [238] <author> R. Winder, G. Roberts, and M. Wei. </author> <booktitle> Co-SIDE and parallel object-oriented languages. In Addendum to the Proc. of OOPSLA'92, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 211-213, </pages> <address> Vac-nouver, Canada, </address> <month> October 5-10, </month> <year> 1992. </year>
Reference: [239] <author> Michael Wolfe. </author> <title> Optimizing Supercompilers for Supercomputers. </title> <booktitle> Research Monographs in Parallel and Distributed Computing. </booktitle> <publisher> Pitman, </publisher> <address> Lon-don, </address> <year> 1989. </year>
Reference-contexts: If the tool can prove to itself that there are no data dependences (and of course no control dependences) then the operations can be executed in parallel. Significant progress has been made on well defined sub-problems: Array based data dependence analysis <ref> [29, 239] </ref> and pointer or alias analysis techniques [30, 76, 142, 149] are used in various phases of compiler optimizations and to parallelize sequential code: target architectures are parallel machines, vector computers, and processors with instruction level parallelism. A good survey of the relevant techniques can be found in [23].
Reference: [240] <author> Barbara Wyatt, Krishna Kavi, and Steve Huf-nagel. </author> <title> Parallelism in object-oriented languages: a survey. </title> <journal> IEEE Computer, </journal> <volume> 11(6) </volume> <pages> 56-66, </pages> <month> Novem-ber </month> <year> 1992. </year>
Reference-contexts: However, combining both concepts has proven itself to be a notoriously difficult task. Depending on the approach, often key characteristics of either the object-oriented paradigm or key performance factors of parallelism are sacrificed, often resulting in unsatisfactory languages, as for example discussed in <ref> [240] </ref>. <p> Other collections are due to Turcotte [229] and Philippsen [193]. Gao and Kwong survey parallel and distributed Smalltalks in [241]. Wyatt et al. study several object-oriented languages and discuss whether the parallelism is appropriately integrated into the languages <ref> [240] </ref>. The paper by Karaorman and Bruno [138] elaborates on the design space of parallel object-oriented programming. The thesis of Papathomas [189] and an earlier paper [188] give a first classification of concurrent object-oriented languages. However, Papathomas focussed mainly on the way of combining concurrency with objects.
Reference: [241] <author> Gao Yaoqing and Yuen Chung Kwong. </author> <title> A survey of implementations of concurrent, parallel and distributed Smalltalk. </title> <journal> ACM SIGPLAN Notices, </journal> <volume> 28(9) </volume> <pages> 29-35, </pages> <month> September </month> <year> 1993. </year>
Reference-contexts: Nuttal discusses systems that provide process or object migration in [184]. Cheng's contribution [72] is a collection of parallel programming languages and tools, some of which are object-oriented. Other collections are due to Turcotte [229] and Philippsen [193]. Gao and Kwong survey parallel and distributed Smalltalks in <ref> [241] </ref>. Wyatt et al. study several object-oriented languages and discuss whether the parallelism is appropriately integrated into the languages [240]. The paper by Karaorman and Bruno [138] elaborates on the design space of parallel object-oriented programming.
Reference: [242] <author> Stephen S. Yau, Xiaoping Jia, Doo-Hwan Bae, Madhan Chidambaram, and Gilho Oh. </author> <title> An object-oriented approach to software development for parallel processing systems. </title> <editor> In G. J. Knafl, editor, </editor> <booktitle> Proc. of the 15th Annual Int. Computer Software and Applications Conf., pages 453-5-8, </booktitle> <address> Tokyo, Japan, September 11-13, 1991. </address> <publisher> IEEE Comput. Soc. Press. </publisher>
Reference-contexts: p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H A A y t i v i t c a y r a d n u o b http://www.leidenuniv.nl Proof <ref> [242] </ref> H H A A H H A A y t i v i t c a pSather y t i v i t c a y r a d n u o b http://www.icsi.berkeley.edu news:comp.lang.sather David Stoutamire ! davids@icsi.berkeley.edu PVM++ y t i v i t c a y r
Reference: [243] <author> Yasuhiko Yokote and Mario Tokoro. </author> <title> The design and implementation of ConcurrentSmalltalk. </title> <booktitle> In Proc. of OOPSLA'86, Conf. on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 331-340, </pages> <address> Portland, Oregon, </address> <month> September 29 - October 2 </month> <year> 1986. </year> <journal> ACM SIG-PLAN Notices 21(11). </journal>
Reference-contexts: Chien ! achien@cs.uiuc.edu ConcurrentSmalltalk <ref> [243] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p mhijklm y t i v i t
Reference: [244] <author> Akinori Yonezawa. </author> <title> ABCL: An Object-Oriented Concurrent System theory, language, programming, implementation, and application. Computer System Series. </title> <publisher> MIT Press Cambridge, </publisher> <address> Massachusetts, London, England, </address> <year> 1990. </year>
Reference-contexts: This "optimization" destroys the correctness of the code and make erratic behavior almost impossible to debug. Buhr points out several related problems all of which can be explained by the inawareness of a standard compiler of the additional concurrent semantics. 44 5.2 Language Survey ABCL/1 <ref> [244] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H A <p> p p p p p p p p p p p p p pp p p H H A A H H A A y t i v i t c a y r a d n u o b http://web.yl.is.s.u-tokyo.ac.jp group address ! abcl@is.s.u-tokyo.ac.jp Akinori Yonezawa ! yonezawa@is.s.u-tokyo.ac.jp ABCL/R2 <ref> [168, 244] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H
Reference: [245] <author> Kaoru Yoshida and Takashi Chikayama. A'UM = stream+object+relation. </author> <booktitle> In ACM SIG-PLAN Workshop on Object-Based Concurrent Programming, </booktitle> <pages> pages 55-58, </pages> <address> San Diego, CA, </address> <month> September 26-27, </month> <year> 1988. </year> <journal> ACM SIGPLAN Notices 24(4). </journal>
Reference: [246] <author> Tsutomu Yoshinaga and Takanobu Baba. </author> <title> A parallel object-oriented language A-NETL and its programming environment. </title> <editor> In G. J. Knafl, editor, </editor> <booktitle> Proc. of the 15th Annual Int. Computer 63 Software and Applications Conf., </booktitle> <pages> pages 459-464, </pages> <address> Tokyo, Japan, September 11-13, 1991. </address> <publisher> IEEE Comput. Soc. Press. </publisher> <pages> 64 </pages>
Reference-contexts: A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p hijklm y t i v i t c a A-NETL <ref> [90, 246] </ref> H H A A H H A A p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p p pp p p H H A A H H
References-found: 246

