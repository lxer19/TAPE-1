URL: http://Theory.Stanford.EDU/~freunds/hoots.ps
Refering-URL: http://Theory.Stanford.EDU/~freunds/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: ffreunds, mitchellg@cs.stanford.edu  
Title: A Type System for Object Initialization In the Java Bytecode Language (summary)  
Author: Stephen N. Freund John C. Mitchell 
Address: Stanford, CA 94305-9045  
Affiliation: Department of Computer Science Stanford University  
Web: URL: http://www.elsevier.nl/locate/entcs/volume10.html  
Note: Electronic Notes in Theoretical Computer Science 10 (1998)  4 pages  
Abstract: In the standard Java implementation, a Java language program is compiled to Java bytecode and this bytecode is then interpreted by the Java Virtual Machine. Since bytecode may be written by hand, or corrupted during network transmission, the Java Virtual Machine contains a bytecode verifier that performs a number of consistency checks before code is interpreted. As one-step towards a formal specification of the verifier, we describe a precise specification of a subset of the bytecode language dealing with object creation and initialization. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Tim Lindholm and Frank Yellin. </author> <title> The Java Virtual Machine Specification. </title> <publisher> Addison-Wesley, </publisher> <year> 1996. </year>
Reference-contexts: Since pointers may be duplicated, as above, and there may be more than one uninitialized object present at any time, some form of aliasing analysis must be used. Sun's Java Virtual Machine Specification <ref> [1] </ref> describes the alias analysis used by the Sun's JDK verifier. For each line of the bytecode program, some status information is recorded for every local variable and stack location.
Reference: [2] <author> Raymie Stata and Martn Abadi. </author> <title> A type system for Java bytecode subroutines. </title> <booktitle> In Proc. 25th ACM Symposium on Principles of Programming Languages, </booktitle> <month> January </month> <year> 1998. </year> <month> 4 </month>
Reference-contexts: This work is based on a prior study of the c fl1998 Published by Elsevier Science B. V. Freund and Mitchell bytecodes for local subroutine call and return <ref> [2] </ref>. 2 Object Initialization As in many other object-oriented languages, the Java implementation creates new objects in two steps. The first step is to allocate space for the object. This usually requires some environment specific operation to obtain an appropriate region of memory.
References-found: 2

