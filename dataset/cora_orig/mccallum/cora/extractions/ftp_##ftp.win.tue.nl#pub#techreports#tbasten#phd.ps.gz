URL: ftp://ftp.win.tue.nl/pub/techreports/tbasten/phd.ps.gz
Refering-URL: http://wwwis.win.tue.nl/~tbasten/publications.html
Root-URL: http://www.win.tue.nl
Title: IN TERMS OF NETS SYSTEM DESIGN WITH PETRI NETS AND PROCESS ALGEBRA  
Author: TWAN BASTEN 
Abstract-found: 0
Intro-found: 1
Reference: <author> AALST, W.M.P. </author> <title> VAN DER (1996). Structural Characterizations of Sound Workflow Nets. </title> <institution> Computing Science Report 96/23, Eindhoven University of Technology, Department of Mathematics and Computing Science, Eindhoven, The Netherlands. </institution>
Reference-contexts: Another class of P/T nets that might be an interesting candidate for defining object life cycles is the class of well-handled P/T nets, as defined in <ref> (VAN DER AALST, 1996, 1998) </ref>. For well-handled P/T nets, it is also possible to verify the object-life-cycle properties efficiently. As for free-choice P/T nets, this result is based on Theorem 4.3.7 (Characterization of object life cycles) on Page 163. <p> defined in <ref> (VAN DER AALST, 1996, 1998) </ref>. For well-handled P/T nets, it is also possible to verify the object-life-cycle properties efficiently. As for free-choice P/T nets, this result is based on Theorem 4.3.7 (Characterization of object life cycles) on Page 163. For more details, the interested reader is referred to (VAN DER AALST, 1996, 1998). 4.3.2 Inheritance relations Definition 4.3.2 on Page 161 formalizes the notion of an object life cycle in terms of P/T nets. <p> The class of live and bounded well-handled P/T nets might be a candidate. Well-handled P/T nets and some of their properties are studied in <ref> (VAN DER AALST, 1996, 1998) </ref>.
Reference: <author> AALST, W.M.P. </author> <title> VAN DER (1997). Verification of Workflow Nets. </title> <editor> In: P. Azema and G. Balbo (eds.), </editor> <booktitle> Application and Theory of Petri Nets 1997, 18th. International Conference, ICATPN'97, Proceedings, Vol. 1248 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 407-426, </pages> <address> Toulouse, France, June 1997. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: Third, it is natural to model concur-rency in Petri nets, which is an advantage when modeling distributed systems. Finally, they have a sound theoretical basis and many techniques and tools are available for the analysis of Petri nets. The results presented in this section are based on <ref> (VAN DER AALST AND BASTEN, 1997) </ref>. In the next subsection, the notion of an object life cycle is formalized in the framework of Petri nets. In Section 4.3.2, the four inheritance relations defined in the previous section are translated to this framework. <p> Hence, .N; [i]/ is bounded. 2 This property is one step towards a very interesting result, namely that object life cycles can be characterized in terms of liveness and boundedness. The characterization is taken from <ref> (VAN DER AALST, 1997) </ref>, where it is given for so-called sound workflow nets. Sound workflow nets are almost identical to object life cycles. The following auxiliary definition is needed to formulate the desired theorem. <p> Net .N; s/ is an object life cycle if and only if . N N ; s/ is live and bounded. Proof. The proof is identical to the proof of Theorem 11 in <ref> (VAN DER AALST, 1997) </ref>, which characterizes soundness of workflow nets in terms of liveness and boundedness. There are two small differences between the two theorems. First, object life cycles are labeled nets whereas workflow nets are unlabeled. However, labeling does not play a role in the proof. <p> Starting with an object life cycle, the application of any such transformation rule yields another object life cycle. Using this approach, time-consuming verification of life-cycle properties is not necessary. The literature contains several studies on transformation rules preserving live-ness and boundedness of ordinary P/T nets. In <ref> (VAN DER AALST, 1997) </ref>, a set of transformation rules is given that is designed for the purpose of constructing sound workflow nets. They cover design constructs such as the addition of sequential, alternative, parallel, and iterative behavior to a workflow net. <p> Since these rules preserve liveness and boundedness, they can also be used to construct object life cycles. In (VALETTE, 1979), a very similar set of transformations preserving liveness and boundedness of P/T nets is presented, although the context differs from the context of <ref> (VAN DER AALST, 1997) </ref>. Other liveness-and-boundedness-preserving transformation rules can be found in (BERTHELOT, 1987; DESEL, 1990; DESEL AND ESPARZA, 1995; ESPARZA, 1990; KOVALYOV, 1990; MU-RATA, 1989). However, these rules are developed for the analysis of net models instead of their construction. <p> Proof. Theorem 4.3.7 on Page 163 and the results of (KOVALYOV, 1996). 2 This last theorem is a small improvement of a result in <ref> (VAN DER AALST, 1997) </ref> for free-choice workflow nets. It is possible to relax the free-choice requirement in Theorem 4.3.9 slightly while maintaining the same efficiency in deciding the life-cycle properties (see VAN DER AALST, 1997). <p> It is possible to relax the free-choice requirement in Theorem 4.3.9 slightly while maintaining the same efficiency in deciding the life-cycle properties <ref> (see VAN DER AALST, 1997) </ref>. Another class of P/T nets that might be an interesting candidate for defining object life cycles is the class of well-handled P/T nets, as defined in (VAN DER AALST, 1996, 1998). For well-handled P/T nets, it is also possible to verify the object-life-cycle properties efficiently. <p> An interesting consequence of the observation that the abovementioned transformation rules preserve life-cycle properties is that, based on Theorem 4.3.7 (Characterization of object life cycles) on Page 163, they can be easily transformed into liveness-and-boundedness-preserving transformation rules on ordinary P/T nets. Recall that also <ref> (VAN DER AALST, 1997) </ref> and (VALETTE, 1979) describe a set 4.4 Case Study: A Groupware Editor 197 of liveness-and-boundedness-preserving transformation rules that, similar to the rules of this subsection, correspond to design constructs such as sequential composition, parallel composition, and iteration. <p> However, the rules presented in this subsection are far more general than the rules of <ref> (VAN DER AALST, 1997) </ref> and (VALETTE, 1979). <p> Finally, an interesting topic for further study is the application of the concepts developed in this chapter to workflow management. Petri nets are well suited to define and analyze workflow processes <ref> (see, for example, VAN DER AALST, 1997, 1998) </ref>. Object life cycles and P/T nets modeling workflow processes are essentially the same. The concept of life-cycle inheritance appears to be particularly useful in the area of ad hoc workflow management. <p> An important topic in this area of workflow management is the adaptation of workflow processes in such a way that the new process preserves the behavior of the original process. A small example of the use of life-cycle inheritance in workflow management can be found in <ref> (VAN DER AALST AND BASTEN, 1997) </ref>. Bibliographical remarks. The literature on object-oriented design and its theoretical foundations contains several studies related to the research described in this chapter. In (WIERINGA, 1990), abstraction in a process-algebraic setting is suggested as an inheritance relation for dynamic behavior.
Reference: <author> AALST, W.M.P. </author> <title> VAN DER (1998). The Application of Petri Nets to Workflow Management. </title> <journal> The Journal of Circuits, Systems, and Computers, </journal> <volume> 8(1): </volume> <pages> 21-66. </pages>
Reference-contexts: This means that data types, class attributes, and method implementations are omitted. If necessary, an informal explanation is given. The results in this section will also be published in <ref> (BASTEN AND VAN DER AALST, 1998) </ref>. Informal system requirements. The informal requirements for the groupware editor are as follows. The editor is meant to edit some kind of diagrams. Multiple users, possibly situated at different workstations, may be editing a single diagram in a joint editing session.
Reference: <author> AALST, W.M.P. VAN DER, AND T. </author> <month> BASTEN </month> <year> (1997). </year> <title> Life-Cycle Inheritance: A Petri-Net-Based Approach. </title> <editor> In: P. Azema and G. Balbo (eds.), </editor> <booktitle> Application and Theory of Petri Nets 1997, 18th. International Conference, ICATPN'97, Proceedings, Vol. 1248 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 62-81, </pages> <address> Toulouse, France, June 1997. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: Third, it is natural to model concur-rency in Petri nets, which is an advantage when modeling distributed systems. Finally, they have a sound theoretical basis and many techniques and tools are available for the analysis of Petri nets. The results presented in this section are based on <ref> (VAN DER AALST AND BASTEN, 1997) </ref>. In the next subsection, the notion of an object life cycle is formalized in the framework of Petri nets. In Section 4.3.2, the four inheritance relations defined in the previous section are translated to this framework. <p> Hence, .N; [i]/ is bounded. 2 This property is one step towards a very interesting result, namely that object life cycles can be characterized in terms of liveness and boundedness. The characterization is taken from <ref> (VAN DER AALST, 1997) </ref>, where it is given for so-called sound workflow nets. Sound workflow nets are almost identical to object life cycles. The following auxiliary definition is needed to formulate the desired theorem. <p> Net .N; s/ is an object life cycle if and only if . N N ; s/ is live and bounded. Proof. The proof is identical to the proof of Theorem 11 in <ref> (VAN DER AALST, 1997) </ref>, which characterizes soundness of workflow nets in terms of liveness and boundedness. There are two small differences between the two theorems. First, object life cycles are labeled nets whereas workflow nets are unlabeled. However, labeling does not play a role in the proof. <p> Starting with an object life cycle, the application of any such transformation rule yields another object life cycle. Using this approach, time-consuming verification of life-cycle properties is not necessary. The literature contains several studies on transformation rules preserving live-ness and boundedness of ordinary P/T nets. In <ref> (VAN DER AALST, 1997) </ref>, a set of transformation rules is given that is designed for the purpose of constructing sound workflow nets. They cover design constructs such as the addition of sequential, alternative, parallel, and iterative behavior to a workflow net. <p> Since these rules preserve liveness and boundedness, they can also be used to construct object life cycles. In (VALETTE, 1979), a very similar set of transformations preserving liveness and boundedness of P/T nets is presented, although the context differs from the context of <ref> (VAN DER AALST, 1997) </ref>. Other liveness-and-boundedness-preserving transformation rules can be found in (BERTHELOT, 1987; DESEL, 1990; DESEL AND ESPARZA, 1995; ESPARZA, 1990; KOVALYOV, 1990; MU-RATA, 1989). However, these rules are developed for the analysis of net models instead of their construction. <p> Proof. Theorem 4.3.7 on Page 163 and the results of (KOVALYOV, 1996). 2 This last theorem is a small improvement of a result in <ref> (VAN DER AALST, 1997) </ref> for free-choice workflow nets. It is possible to relax the free-choice requirement in Theorem 4.3.9 slightly while maintaining the same efficiency in deciding the life-cycle properties (see VAN DER AALST, 1997). <p> It is possible to relax the free-choice requirement in Theorem 4.3.9 slightly while maintaining the same efficiency in deciding the life-cycle properties <ref> (see VAN DER AALST, 1997) </ref>. Another class of P/T nets that might be an interesting candidate for defining object life cycles is the class of well-handled P/T nets, as defined in (VAN DER AALST, 1996, 1998). For well-handled P/T nets, it is also possible to verify the object-life-cycle properties efficiently. <p> An interesting consequence of the observation that the abovementioned transformation rules preserve life-cycle properties is that, based on Theorem 4.3.7 (Characterization of object life cycles) on Page 163, they can be easily transformed into liveness-and-boundedness-preserving transformation rules on ordinary P/T nets. Recall that also <ref> (VAN DER AALST, 1997) </ref> and (VALETTE, 1979) describe a set 4.4 Case Study: A Groupware Editor 197 of liveness-and-boundedness-preserving transformation rules that, similar to the rules of this subsection, correspond to design constructs such as sequential composition, parallel composition, and iteration. <p> However, the rules presented in this subsection are far more general than the rules of <ref> (VAN DER AALST, 1997) </ref> and (VALETTE, 1979). <p> Finally, an interesting topic for further study is the application of the concepts developed in this chapter to workflow management. Petri nets are well suited to define and analyze workflow processes <ref> (see, for example, VAN DER AALST, 1997, 1998) </ref>. Object life cycles and P/T nets modeling workflow processes are essentially the same. The concept of life-cycle inheritance appears to be particularly useful in the area of ad hoc workflow management. <p> An important topic in this area of workflow management is the adaptation of workflow processes in such a way that the new process preserves the behavior of the original process. A small example of the use of life-cycle inheritance in workflow management can be found in <ref> (VAN DER AALST AND BASTEN, 1997) </ref>. Bibliographical remarks. The literature on object-oriented design and its theoretical foundations contains several studies related to the research described in this chapter. In (WIERINGA, 1990), abstraction in a process-algebraic setting is suggested as an inheritance relation for dynamic behavior.
Reference: <author> AMERICA, P. </author> <year> (1990). </year> <title> Designing an Object-Oriented Language with Behavioural Subtyp-ing. </title> <editor> In: J.W. de Bakker, W.P. de Roever, and G. Rozenberg (eds.), </editor> <booktitle> Foundations of Object-Oriented Languages, REX School/Workshop, Proceedings, Vol. 489 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 60-90, </pages> <address> Noordwijkerhout, The Netherlands, May/June 1990. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address> <month> ASPT </month> <year> (1994). </year> <title> ExSpect Reference Manual, Release 5.0. </title> <journal> ASPT Foundation/Bakkenist Management Consultants. </journal> <note> Information available at http://www.bakkenist. nl/it/exspect/index.htm. </note>
Reference: <author> BAETEN, J.C.M. AND J.A. </author> <title> BERGSTRA (1993). Non Interleaving Process Algebra. </title> <editor> In: E. Best (ed.), </editor> <booktitle> CONCUR '93, 4th. International Conference on Concurrency Theory, Proceedings, Vol. 715 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 308-323, </pages> <address> Hildesheim, Germany, August 1993. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: For a detailed treatment of the state operator, see (BAETEN AND VERHOEF, 1995; BAETEN AND WEIJLAND, 1990). The state operator used to define an algebraic semantics for P/T-net components is called the causal state operator. A variant of the causal state operator first appeared in <ref> (BAETEN AND BERGSTRA, 1993) </ref>. Table 3.4.1 on the following page presents the theory PA fl ffi which is as always parameterized by a set of actions. It is instantiated with the set of multi-actions A defined in the previous section (Definition 3.3.7 on Page 63). <p> In this chapter, the converse approach is pursued. A translation from Petri nets into algebraic terms is given. Other examples of this approach are <ref> (BAETEN AND BERGSTRA, 1993) </ref>, (BOUDOL, ROUCAIROL, AND DE SIMONE, 1985), and (DIETZ AND SCHREIBER, 1994). The approach followed in each of these three papers is discussed briefly. In (DIETZ AND SCHREIBER, 1994), an algebraic semantics for P/T nets is given which reflects the parallelism in their dynamic behavior. <p> Another difference is that, in this chapter, equational reasoning is emphasized, whereas in (BOUDOL, ROUCAIROL, AND DE SIMONE, 1985) reasoning is mainly model-based. The algebraic semantics of this chapter are most closely related to the semantics given in <ref> (BAETEN AND BERGSTRA, 1993) </ref>. In that paper, the algebraic semantics of P/T nets is also defined in an ACP-like process algebra, emphasizing an equational style of reasoning. As already mentioned in Section 3.4, (BAETEN AND BERGSTRA, 1993) is also the first paper to introduce a variant of the causal state operator. <p> The algebraic semantics of this chapter are most closely related to the semantics given in <ref> (BAETEN AND BERGSTRA, 1993) </ref>. In that paper, the algebraic semantics of P/T nets is also defined in an ACP-like process algebra, emphasizing an equational style of reasoning. As already mentioned in Section 3.4, (BAETEN AND BERGSTRA, 1993) is also the first paper to introduce a variant of the causal state operator. In the semantics of (BAETEN AND BERGSTRA, 1993), atomic actions in the algebra correspond to transitions in P/T nets. <p> As already mentioned in Section 3.4, <ref> (BAETEN AND BERGSTRA, 1993) </ref> is also the first paper to introduce a variant of the causal state operator. In the semantics of (BAETEN AND BERGSTRA, 1993), atomic actions in the algebra correspond to transitions in P/T nets. So-called input and output causes are added to these actions, corresponding to input and output places.
Reference: <author> BAETEN, J.C.M., J.A. BERGSTRA, AND J.W. </author> <title> KLOP (1987). Conditional Axioms and ff/fi-calculus in Process Algebra. </title> <editor> In: M. Wirsing (ed.), </editor> <booktitle> Formal Description of Programming Concepts - III, Proceedings of the IFIP TC2/WG2.2 Working Conference, </booktitle> <pages> pp. 53-75, </pages> <address> Ebberup, Denmark, </address> <month> August </month> <year> 1986. </year> <title> North-Holland, </title> <address> Amsterdam, The Netherlands. </address>
Reference-contexts: It is beyond the scope of this thesis to prove that Definition 4.2.6 is consistent with set theory. A detailed study on the alphabet operator in process algebra can be found in <ref> (BAETEN, BERGSTRA, AND KLOP, 1987) </ref>. The alphabet operator is particularly interesting in combination with encapsulation and abstraction. Most of the auxiliary lemmas on encapsulation, abstraction, and the alphabet operator presented in the remainder of this section also appear in (BAETEN, BERGSTRA, AND KLOP, 1987). defined above. <p> on the alphabet operator in process algebra can be found in <ref> (BAETEN, BERGSTRA, AND KLOP, 1987) </ref>. The alphabet operator is particularly interesting in combination with encapsulation and abstraction. Most of the auxiliary lemmas on encapsulation, abstraction, and the alphabet operator presented in the remainder of this section also appear in (BAETEN, BERGSTRA, AND KLOP, 1987). defined above. The arrows depict strict inclusion relations. The correctness of the inclusion relations between protocol/projection inheritance, on the one hand, and protocol and projection inheritance, on the other hand, follows easily from their definitions.
Reference: <author> BAETEN, J.C.M. AND C. </author> <title> VERHOEF (1995). Concrete Process Algebra. </title> <editor> In: S. Abramsky, Dov M. Gabbay, and T.S.E. Maibaum (eds.), </editor> <booktitle> Handbook of Logic in Computer Sci 211 212 Bibliography ence, </booktitle> <volume> Vol. 4, </volume> <booktitle> Semantic Modelling, </booktitle> <pages> pp. 149-268. </pages> <publisher> Oxford University Press, Oxford, </publisher> <address> UK. </address>
Reference-contexts: The proof and more details about term rewriting in the context of process algebra can be found in <ref> (BAETEN AND VERHOEF, 1995) </ref>. For the purpose of this thesis, it is sufficient to know that the normal forms of closed BPA terms are contained in a very specific class of terms, called basic terms. <p> Proof. It is straightforward to prove the property using Axioms A3, 4, and 5 in Table 2.4.1 on Page 34 as rewrite rules from left to right. For details, see <ref> (BAETEN AND VERHOEF, 1995) </ref>. 2 The above result is called the elimination property, because it shows that the general sequential composition as defined in Table 2.4.1 on Page 34 can be eliminated from any closed term, yielding a term containing only so-called prefix compositions. <p> Since BPA ` p 1 C p 2 D q 1 C q 2 , this clearly contradicts the soundness of BPA for the semantics. Property 2.4.10. (Congruence) Strong bisimilarity, , is a congruence for the operators of BPA. Proof. See <ref> (BAETEN AND VERHOEF, 1995) </ref>. Note that the proof in (BAETEN AND VER HOEF, 1995) uses the fact that the derivation rules used to define the operational semantics 38 Basic Concurrency Theory for BPA are in the so-called path format. <p> Property 2.4.10. (Congruence) Strong bisimilarity, , is a congruence for the operators of BPA. Proof. See (BAETEN AND VERHOEF, 1995). Note that the proof in <ref> (BAETEN AND VER HOEF, 1995) </ref> uses the fact that the derivation rules used to define the operational semantics 38 Basic Concurrency Theory for BPA are in the so-called path format. <p> The following theorem is a standard result in process algebra. Theorem 2.4.11. (Soundness and completeness) For any closed terms p; q 2 C.BPA/, BPA ` p D q , S.BPA/ jD p D q. Proof. <ref> (BAETEN AND VERHOEF, 1995) </ref> 2 This theorem means that the semantics S.BPA/ defined in Definition 2.4.6 on Page 36 captures all the essential aspects of BPA, as far as closed terms are considered. <p> Property 2.4.14. (Elimination) For any closed term p 2 C.BPA ffi /, there is a basic term t 2 B.BPA ffi /, such that BPA ffi ` p D t. Proof. <ref> (BAETEN AND VERHOEF, 1995) </ref> 2 An operational semantics for BPA ffi . The processes in the operational semantics for BPA ffi are the closed BPA ffi terms. As before, a special process p is introduced, which is the only process that can terminate successfully. <p> As before, strong bisimilarity is a congruence for the operators of BPA ffi and the axioms of BPA ffi are sound and complete for the operational semantics. Property 2.4.17. (Congruence) Strong bisimilarity, , is a congruence for the operators of BPA ffi . Proof. <ref> (BAETEN AND VERHOEF, 1995) </ref> 2 Theorem 2.4.18. (Soundness and completeness) For any closed terms p; q 2 C.BPA ffi /, BPA ffi ` p D q , S.BPA ffi / jD p D q. Proof. (BAETEN AND VERHOEF, 1995) 2 40 Basic Concurrency Theory 2.4.3 Process Algebra with inaction and renaming <p> Proof. <ref> (BAETEN AND VERHOEF, 1995) </ref> 2 Theorem 2.4.18. (Soundness and completeness) For any closed terms p; q 2 C.BPA ffi /, BPA ffi ` p D q , S.BPA ffi / jD p D q. Proof. (BAETEN AND VERHOEF, 1995) 2 40 Basic Concurrency Theory 2.4.3 Process Algebra with inaction and renaming One of the main goals of this thesis is to study formalisms for describing concurrent systems. However, the basic process-algebraic theories of the previous two subsections are only suitable for reasoning about sequential processes. <p> Proof. The results for PA and PA ffi appear in <ref> (BAETEN AND VERHOEF, 1995) </ref>. Using the techniques of (BAETEN AND VERHOEF, 1995), the proofs for PACRN and PA ffi CRN are straightforward. 2 The next result states that the new theories are proper extensions of one of the basic theories BPA or BPA ffi . <p> Proof. The results for PA and PA ffi appear in <ref> (BAETEN AND VERHOEF, 1995) </ref>. Using the techniques of (BAETEN AND VERHOEF, 1995), the proofs for PACRN and PA ffi CRN are straightforward. 2 The next result states that the new theories are proper extensions of one of the basic theories BPA or BPA ffi . <p> Proof. The results for PA and PA ffi appear in <ref> (BAETEN AND VERHOEF, 1995) </ref>. Using the techniques of (BAETEN AND VERHOEF, 1995), the proofs for PA C RN and PA ffi C RN are straightforward. Note that the proof techniques for proving conservativity results in (BAETEN AND VERHOEF, 1995) depend on the operational semantics given for the various process algebras. <p> Proof. The results for PA and PA ffi appear in <ref> (BAETEN AND VERHOEF, 1995) </ref>. Using the techniques of (BAETEN AND VERHOEF, 1995), the proofs for PA C RN and PA ffi C RN are straightforward. Note that the proof techniques for proving conservativity results in (BAETEN AND VERHOEF, 1995) depend on the operational semantics given for the various process algebras. <p> Proof. The results for PA and PA ffi appear in <ref> (BAETEN AND VERHOEF, 1995) </ref>. Using the techniques of (BAETEN AND VERHOEF, 1995), the proofs for PA C RN and PA ffi C RN are straightforward. Note that the proof techniques for proving conservativity results in (BAETEN AND VERHOEF, 1995) depend on the operational semantics given for the various process algebras. However, this does not cause problems, because the semantics given below and in the previous subsections are identical to those given in (BAETEN AND VER HOEF, 1995). <p> Note that the proof techniques for proving conservativity results in (BAETEN AND VERHOEF, 1995) depend on the operational semantics given for the various process algebras. However, this does not cause problems, because the semantics given below and in the previous subsections are identical to those given in <ref> (BAETEN AND VER HOEF, 1995) </ref>. The reason for presenting the conservativity result before the operational 42 Basic Concurrency Theory semantics is defined, is that the result itself is independent of the semantics. <p> Property 2.4.26. (Congruence) Strong bisimilarity, , is a congruence for the operators of PA ffi CRN. 44 Basic Concurrency Theory Proof. The property is a straightforward consequence of several results in <ref> (BAETEN AND VERHOEF, 1995) </ref>. 2 Theorem 2.4.27. (Soundness and completeness) For closed terms p; q 2 C.PA ffi CRN/, PA ffi CRN ` p D q , S.PA ffi CRN/ jD p D q. Proof. Using the techniques of (BAETEN AND VERHOEF, 1995), the proof is straightforward. 2 Example 2.4.28. <p> The property is a straightforward consequence of several results in <ref> (BAETEN AND VERHOEF, 1995) </ref>. 2 Theorem 2.4.27. (Soundness and completeness) For closed terms p; q 2 C.PA ffi CRN/, PA ffi CRN ` p D q , S.PA ffi CRN/ jD p D q. Proof. Using the techniques of (BAETEN AND VERHOEF, 1995), the proof is straightforward. 2 Example 2.4.28. Consider again Example 2.2.5 on Page 6. The process depicted in Figure 2.2.4.d/ on Page 7 can be specified in PA ffi CRN as follows: rcmdpmat.omatksprdy/. <p> The theorem is a fairly straightforward result of Property 2.4.42, the completeness of BPA o for rooted branching bisimilarity (see VAN GLABBEEK AND WEIJLAND, 1996) and the proof techniques in <ref> (BAETEN AND VERHOEF, 1995) </ref>. 2 Example 2.4.46. Consider Examples 2.2.12 on Page 10 and 2.2.20 on Page 13. The process in Figure 2.2.11.b/ on Page 9 can be specified in PA o ffi CRN as follows: rcmd.pmat 1 C pmat 2 / omat (see also Example 2.4.8 on Page 37). <p> In case the basic theory does not contain the renaming operator, BKS4 is omitted. The binary Kleene star has the same binding priority as sequential composition. A disadvantage of iteration is that elimination of the binary Kleene star from closed terms is not possible anymore <ref> (see BAETEN AND VERHOEF, 1995) </ref>. As a result, inductive proofs as given in the Section 2.4.3 do not carry over to a theory containing the binary Kleene star. <p> In a process-algebraic theory with general recursion another proof strategy could be followed, namely the one used in (BAETEN AND WEIJLAND, 1990) and <ref> (BAETEN AND VERHOEF, 1995) </ref> to show that an operational semantics satisfies the general Recursive Specification Principle RSP. Any semantics satisfying RSP also satisfies RSP fl . 56 Basic Concurrency Theory An example verification. <p> Proof. It follows from the format of the derivation rules in Tables 2.4.5, 2.4.24, 2.4.48, and 3.4.2 <ref> (see BAETEN AND VERHOEF, 1995) </ref>. 2 Theorem 3.4.5. (Soundness) For any closed terms p; q 2 C.PA fl ffi /, ffi ` p D q ) S.PA fl Proof. <p> The four subclass-equivalence relations indeed all coincide with derivability from the axioms of PA o . The proof of this claim uses the following conservativity result. Property 4.2.17. (Conservative extension) For any closed terms p; q 2 C.PA o /, PA o Proof. Straightforward with the techniques of <ref> (BAETEN AND VERHOEF, 1995) </ref>. 2 Property 4.2.18. For any object life cycles p; q 2 C.PA o / and fl 2 fpp; pt; pj; lcg, p fl q , PA o ` p D q. Proof. The result is only proven for protocol inheritance. The other proofs are similar. <p> Note that since Property 4.2.12 does not have a counterpart for life-cycle inheritance, one has to use the more basic results of the various lemmas given so far to prove the property for life-cycle inheritance. 2 Using the above conservativity result and the techniques of <ref> (BAETEN AND VERHOEF, 1995) </ref>, it is possible to prove that the theory PA o is complete for rooted branching bisim ilarity. As a result, two life cycles are subclass equivalent under any form of inheritance if and only if they are rooted branching bisimilar.
Reference: <author> BAETEN, J.C.M. </author> <title> AND W.P. WEIJLAND (1990). Process Algebra, </title> <booktitle> Vol. 18 of Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, UK. </address>
Reference-contexts: It is not difficult to verify that it is impossible to construct a bisimulation between these two processes. This observation is consistent with the claim made earlier that bisimilarity preserves deadlocks in processes. That is, two processes can only be bisimilar if they have the same deadlocks <ref> (see, for example, BAETEN AND WEIJLAND, 1990, Chapter 7) </ref>. pmat 1 omat # rcmd rcmd ? pmat 1 pmat 2 omat # # # omat pmat 2 pmat 1 rcmd pmat 2 omat ? rcmd 10 Basic Concurrency Theory Example 2.2.12. <p> The goal is to find equational laws that are valid in the semantics. In the former case, the starting point is an equational theory, which may have several operational (or non-operational) semantic interpretations. For a detailed comparison of ACP, CCS, and CSP, the reader is referred to <ref> (BAETEN AND WEIJLAND, 1990, Chapter 8) </ref>. The next subsection introduces the process algebra BPA which can be used to reason about sequential processes only, but which shows the essentials of any process-algebraic theory. <p> The reason for presenting the conservativity result before the operational 42 Basic Concurrency Theory semantics is defined, is that the result itself is independent of the semantics. Furthermore, there are also proof techniques that do not use any specific semantics <ref> (see BAETEN AND WEIJLAND, 1990) </ref>. 2 Renaming and merge. The theory PA ffi CRN as introduced in Table 2.4.19 on Page 40 does not contain any axioms describing the interaction between the renaming operator and the merge. A meaningful and useful axiom would be the distribution of renaming over merge. <p> A slightly different proof of Property 2.4.32, which does not use natural induction but structural induction, can be found in <ref> (BAETEN AND WEIJLAND, 1990) </ref>. 2 For the interested reader, it is a nice exercise to prove by means of strong natural induction that, for closed PA ffi CRN terms, Axiom RNM2 in Table 2.4.22 on Page 42 is derivable from the other axioms of theory PA ffi CRN given in Table <p> Proof. The proof by induction on n is taken from <ref> (BAETEN AND WEIJLAND, 1990) </ref>. The base case, n D 1, is Axiom M1. <p> It simply states that a sequence of silent actions cannot be infinitely long. For a treatment of other, more sophisticated forms of fairness in process algebra, the reader is referred to <ref> (BAETEN AND WEIJLAND, 1990) </ref>. x : PI Table 2.4.54: The Fair Iteration Rule. The Fair Iteration Rule is valid in the operational semantics S.PA ofl ffi CRN/ of Defini tion 2.4.49 on Page 52. Property 2.4.55. <p> In a process-algebraic theory with general recursion another proof strategy could be followed, namely the one used in <ref> (BAETEN AND WEIJLAND, 1990) </ref> and (BAETEN AND VERHOEF, 1995) to show that an operational semantics satisfies the general Recursive Specification Principle RSP. Any semantics satisfying RSP also satisfies RSP fl . 56 Basic Concurrency Theory An example verification.
Reference: <author> BASTEN, T. </author> <year> (1996). </year> <title> Branching Bisimilarity is an Equivalence indeed! Information Processing Letters, </title> <booktitle> 58(3): </booktitle> <pages> 141-147. </pages>
Reference-contexts: The reason for using the alternative definition is that it is more concise and more intuitive than the original definition. It also yields shorter proofs. A comparison of the two definitions can be found in <ref> (BASTEN, 1996) </ref>. 2.2 Process Theory 11 As is the case for strong bisimilarity, branching bisimilarity distinguishes processes with different moments of choice (see VAN GLABBEEK, 1994). It is a slightly finer equivalence than the well-known observation equivalence (MILNER, 1980, 1989). <p> The following lemma is only valid for (rooted) branching bisimulations as defined in Definition 2.2.15 on Page 11. In <ref> (BASTEN, 1996) </ref>, an ex ample is given showing that it does not hold for the original definition in (VAN GLABBEEK AND WEIJLAND, 1989). Lemma 2.2.23. The relation composition of two (rooted) branching bisimulations is a (rooted) branching bisimulation. Proof.
Reference: <author> BASTEN, T. AND W.M.P. VAN DER AALST (1996). </author> <title> A Process-Algebraic Approach to Life-Cycle Inheritance: Inheritance = Encapsulation + Abstraction. </title> <institution> Computing Science Report 96/05, Eindhoven University of Technology, Department of Mathematics and Computing Science, Eindhoven, The Netherlands. </institution>
Reference-contexts: The reason for using the alternative definition is that it is more concise and more intuitive than the original definition. It also yields shorter proofs. A comparison of the two definitions can be found in <ref> (BASTEN, 1996) </ref>. 2.2 Process Theory 11 As is the case for strong bisimilarity, branching bisimilarity distinguishes processes with different moments of choice (see VAN GLABBEEK, 1994). It is a slightly finer equivalence than the well-known observation equivalence (MILNER, 1980, 1989). <p> The following lemma is only valid for (rooted) branching bisimulations as defined in Definition 2.2.15 on Page 11. In <ref> (BASTEN, 1996) </ref>, an ex ample is given showing that it does not hold for the original definition in (VAN GLABBEEK AND WEIJLAND, 1989). Lemma 2.2.23. The relation composition of two (rooted) branching bisimulations is a (rooted) branching bisimulation. Proof.
Reference: <author> BASTEN, T. AND W.M.P. VAN DER AALST (1998). </author> <title> Inheritance of Dynamic Behavior: Development of a Groupware Editor. In: Concurrent Object-Oriented Programming and Petri Nets, </title> <booktitle> Advances in Petri Nets, Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address> <note> To appear. </note>
Reference-contexts: Particularly the possibility of parameterized and inductive verifications would be an advantage over model checking. A preliminary study into the possibilities for tool support for equational reasoning by means of the generic proof system PVS (OWRE ET AL., 1995) can be found in <ref> (BASTEN AND HOOMAN, 1998) </ref>. This study shows that, in principle, it is feasible to develop automated proof support for large equational verifications. However, at the time of doing the research described in (BASTEN AND HOOMAN, 1998), a bug in the type system of PVS prevented extensive experiments with the theory described <p> equational reasoning by means of the generic proof system PVS (OWRE ET AL., 1995) can be found in <ref> (BASTEN AND HOOMAN, 1998) </ref>. This study shows that, in principle, it is feasible to develop automated proof support for large equational verifications. However, at the time of doing the research described in (BASTEN AND HOOMAN, 1998), a bug in the type system of PVS prevented extensive experiments with the theory described in this chapter. The extension of the theory with data remains an open problem. <p> This means that data types, class attributes, and method implementations are omitted. If necessary, an informal explanation is given. The results in this section will also be published in <ref> (BASTEN AND VAN DER AALST, 1998) </ref>. Informal system requirements. The informal requirements for the groupware editor are as follows. The editor is meant to edit some kind of diagrams. Multiple users, possibly situated at different workstations, may be editing a single diagram in a joint editing session.
Reference: <author> BASTEN, T., R.N. BOL, AND M. </author> <title> VOORHOEVE (1995). Simulating and Analyzing Railway Interlockings in ExSpect. </title> <journal> IEEE Parallel & Distributed Technology, Systems & Applications, </journal> <volume> 3(3): </volume> <pages> 50-62. </pages>
Reference-contexts: The brief explanation of a simulation session given in this paragraph shows only a fraction of the possibilities of the tool ExSpect to support the design, simulation, and analysis of (colored) Petri nets. A good introduction to ExSpect showing its application to a nontrivial application can be found in <ref> (BASTEN, BOL, AND VOORHOEVE, 1995) </ref>. The reader interested in more details is referred to (ASPT, 1994). In conclusion, the simulation sessions for the production unit were helpful in optimizing the design and correcting small mistakes in the early design process. <p> ExSpect was first described in (VAN HEE, SOMERS, AND VOORHOEVE, 1989). Its theoretical foundation is described in detail in (VAN HEE, 1994). A good example of the use of ExSpect in practical applications can be found in <ref> (BASTEN, BOL, AND VOORHOEVE, 1995) </ref>. During the development of ExSpect, it became clear that a useful extension of the tool would be the possibility to 140 Algebraic Verification of Modular Nets verify the interface behavior of system components in a compositional way.
Reference: <author> BASTEN, T. AND J. </author> <note> HOOMAN (1998). Process Algebra in PVS. Computing Science Report 98/10, </note> <institution> Eindhoven University of Technology, Department of Mathematics and Computing Science, Eindhoven, The Netherlands. </institution>
Reference-contexts: Particularly the possibility of parameterized and inductive verifications would be an advantage over model checking. A preliminary study into the possibilities for tool support for equational reasoning by means of the generic proof system PVS (OWRE ET AL., 1995) can be found in <ref> (BASTEN AND HOOMAN, 1998) </ref>. This study shows that, in principle, it is feasible to develop automated proof support for large equational verifications. However, at the time of doing the research described in (BASTEN AND HOOMAN, 1998), a bug in the type system of PVS prevented extensive experiments with the theory described <p> equational reasoning by means of the generic proof system PVS (OWRE ET AL., 1995) can be found in <ref> (BASTEN AND HOOMAN, 1998) </ref>. This study shows that, in principle, it is feasible to develop automated proof support for large equational verifications. However, at the time of doing the research described in (BASTEN AND HOOMAN, 1998), a bug in the type system of PVS prevented extensive experiments with the theory described in this chapter. The extension of the theory with data remains an open problem. <p> This means that data types, class attributes, and method implementations are omitted. If necessary, an informal explanation is given. The results in this section will also be published in <ref> (BASTEN AND VAN DER AALST, 1998) </ref>. Informal system requirements. The informal requirements for the groupware editor are as follows. The editor is meant to edit some kind of diagrams. Multiple users, possibly situated at different workstations, may be editing a single diagram in a joint editing session.
Reference: <author> BASTEN, T. AND M. </author> <title> VOORHOEVE (1995a). An Algebraic Semantics for Hierarchical P/T Nets. </title> <institution> Computing Science Report 95/35, Eindhoven University of Technology, Department of Mathematics and Computing Science, Eindhoven, The Netherlands. </institution> <note> An extended abstract appeared as (BASTEN AND VOORHOEVE, </note> <year> 1995b). </year>
Reference-contexts: The class of modular P/T nets is a class of Petri nets especially developed to support modular design. The chapter describes two case studies to evaluate the method in practical design situations. The chapter is based on results published earlier in <ref> (BASTEN AND VOORHOEVE, 1995a, 1995b) </ref>. Chapter 4 is devoted to the second topic of this thesis. It describes an approach to support inheritance of dynamic behavior in object-oriented design methods. In such methods, the so-called class construct is used to structure a system design. <p> fl r/g [ R C [ f.s; q fl r/ j s 2 C.PA ofl p [ f.s; t .q fl r// j s 2 C.PA ofl p ffi CRN/ ^ sR C t pg: An explanation of this relation and the details of the proof can be found in <ref> (BASTEN AND VOORHOEVE, 1995a) </ref>. 2 Note that in the above proof a rooted branching bisimulation is constructed explicitly.
Reference: <author> BASTEN, T. AND M. </author> <title> VOORHOEVE (1995b). An Algebraic Semantics for Hierarchical P/T Nets (extended abstract). </title> <editor> In: G. De Michelis and M. Diaz (eds.), </editor> <booktitle> Application and Theory of Petri Nets 1995, 16th. International Conference, Proceedings, Vol. 935 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 45-65, </pages> <address> Torino, Italy, June 1995. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: The notion of modular P/T nets is introduced. Several algebraic semantics of modular P/T nets are given that allow a system designer to verify their behavior against an algebraic specification. The theory is a revised and improved version of the theory in <ref> (BASTEN AND VOORHOEVE, 1995b) </ref>. To validate the design method and the underlying theory, in Sections 3.7 and 3.8, the results of two case studies are discussed. Finally, Section 3.9 presents some conclusions and open problems.
Reference: <author> BERGSTRA, J.A., I. BETHKE, AND A. </author> <title> PONSE (1994). Process Algebra with Iteration and Nesting. </title> <journal> The Computer Journal, </journal> <volume> 37(4): </volume> <pages> 241-258. </pages>
Reference-contexts: The binary Kleene star fl was introduced in process algebra in <ref> (BERGSTRA, BETHKE, AND PONSE, 1994) </ref>, where also the axioms BKS1 through BKS4 appear. ((BERGSTRA, BETHKE, AND PONSE, 1994) gives variants of BKS4 for the encapsulation and abstraction operators.) Axiom BKS3 is a sophisticated axiom which is needed to get a complete axiomatization of bisimilarity.
Reference: <author> BERGSTRA, J.A. AND J.W. </author> <title> KLOP (1982). Fixed Point Semantics in Process Algebras. Report IW 206/82, </title> <publisher> Mathematical Centre, </publisher> <address> Amsterdam, The Netherlands. </address> <note> A revised version appeared as (BERGSTRA AND KLOP, </note> <year> 1992). </year>
Reference: <author> BERGSTRA, J.A. AND J.W. </author> <title> KLOP (1984). Process Algebra for Synchronous Communication. </title> <journal> Information and Control, </journal> <pages> 60(1-3): 109-137. </pages>
Reference: <author> BERGSTRA, J.A. AND J.W. </author> <title> KLOP (1992). A Convergence Theorem in Process Algebra. </title>
Reference: <editor> In: J.W. de Bakker and J.J.M.M. Rutten (eds.), </editor> <booktitle> Ten Years of Concurrency Semantics, </booktitle> <pages> pp. 164-195. </pages> <publisher> World Scientific, </publisher> <address> Singapore. 213 BERTHELOT, </address> <publisher> G. </publisher> <year> (1987). </year> <title> Transformations and Decompositions of Nets. </title> <editor> In: W. Brauer, W. Reisig, and G. Rozenberg (eds.), </editor> <title> Petri Nets: Central Models and Their Properties, </title> <booktitle> Advances in Petri Nets 1986, Part I, Proceedings of an Advanced Course, Vol. 254 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 359-376, </pages> <address> Bad Honnef, Germany, September 1986. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: The research presented in this chapter is also related to some work in the area of con 206 Inheritance of Dynamic Behavior currency theory, namely conformance testing <ref> (BRINKSMA ET AL., 1987) </ref>. Conformance testing is the problem of verifying by means of testing whether some system implementation satisfies a given specification. In (BRINKSMA ET AL., 1987), a testing relation called extends is described, which is related to protocol inheritance. Contribution. <p> research presented in this chapter is also related to some work in the area of con 206 Inheritance of Dynamic Behavior currency theory, namely conformance testing <ref> (BRINKSMA ET AL., 1987) </ref>. Conformance testing is the problem of verifying by means of testing whether some system implementation satisfies a given specification. In (BRINKSMA ET AL., 1987), a testing relation called extends is described, which is related to protocol inheritance. Contribution. The main contribution of this chapter is the complete formalization of the concept of inheritance of dynamic behavior, starting from the intuitive notions of hiding and blocking method calls.
Reference: <author> BEST, E., R. DEVILLERS, AND J.G. </author> <title> HALL (1992). The Box Calculus: A New Causal Algebra with Multi-label Communication. </title> <editor> In: G. Rozenberg (ed.), </editor> <booktitle> Advances in Petri Nets 1992, Vol. 609 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 21-69. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: One line of research is concerned with the translation of process-algebraic terms into Petri nets. The aim of this approach is to provide the process algebra with a true-concurrency semantics. Examples of this line of research are <ref> (BEST, DE-VILLERS, AND HALL, 1992) </ref>, (DEGANO, DE NICOLA, AND MONTANARI, 1988), (VAN GLABBEEK AND VAANDRAGER, 1987), (GOLTZ, 1988), (MONTANARI AND YANKELE VICH, 1994), (OLDEROG, 1987), and (TAUBNER, 1989). In this chapter, the converse approach is pursued. A translation from Petri nets into algebraic terms is given. <p> Most other results on the integration of Petri nets and process algebra appearing in the literature are mainly theoretical. An exception is the Petri Box Calculus of <ref> (BEST, DEVILLERS, AND HALL, 1992) </ref> which has inspired a whole line of research, including the development of tools and the basics of a design method (GRAHLMANN AND BEST, 1996). However, there are many differences with the approach taken in this chapter.
Reference: <author> BEST, E. AND C. FERN ANDEZ C. </author> <year> (1988). </year> <title> Nonsequential Processes: A Petri Net View, </title> <booktitle> Vol. 13 of EATCS monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference: <author> BEST, E. AND B. </author> <month> GRAHLMANN </month> <year> (1995). </year> <title> PEP: Documentation and User Guide. </title> <institution> Uni-versitat Hildesheim, Institut fur Informatik. </institution> <note> Information available at http:// theoretica.informatik.uni-oldenburg.de/pep. </note>
Reference-contexts: To date, many tools for simulating Petri-net models exist. Three well-known tools are ExSpect (ASPT, 1994), Design/CPN (JENSEN ET AL., 1991), and PEP <ref> (BEST AND GRAHLMANN, 1995) </ref>. All three tools support colored Petri nets. The Petri-net formalism which is the basis for ExSpect is described in (VAN HEE, 1994), whereas the formalism supported by Design/CPN can be found in (JENSEN, 1992). <p> This means that, in general, a colored-Petri-net formalism is used to define the Petri-net model of the system. Simulation. The Petri-net model of a concurrent system can be simulated using tools such as ExSpect (ASPT, 1994), Design/CPN (JENSEN ET AL., 1991), or PEP <ref> (BEST AND GRAHLMANN, 1995) </ref>. The specification and the net model can be validated and corrected, if necessary. Simulation is an excellent means to discover the more obvious mistakes in both the behavioral specification and the Petri-net model.
Reference: <author> BOOCH, G. </author> <year> (1994). </year> <title> Object-Oriented Analysis and Design: With Applications. </title> <address> Ben-jamin/Cummings, Redwood City, California, USA. </address>
Reference-contexts: That is, it specifies the order in which the methods of an object may be executed. Such a specification is called the life cycle of an object. Three object-oriented methods that are in common use are OMT (RUMBAUGH ET AL., 1991), OOD <ref> (BOOCH, 1994) </ref>, and UML (FOWLER AND SCOTT, 1997). The given references are a good starting point for the reader interested in an introduction to object-oriented design including a detailed explanation of all the abovementioned concepts. One of the main goals of object-oriented design is the reuse of system components. <p> The concept of inheritance is one of the key concepts in object-oriented design. However, in most object-oriented methods which are in common use, such as OMT (RUMBAUGH ET AL., 1991), OOD <ref> (BOOCH, 1994) </ref>, and UML (FOWLER AND SCOTT, 1997), inheritance is only well defined for the set of methods of a class and its attributes. It is implicitly assumed that the behavior of an object of a subclass extends the behavior of an object of its superclass.
Reference: <author> BOUDOL, G., G. ROUCAIROL, AND R. </author> <title> DE SIMONE (1985). Petri Nets and Algebraic Calculi of Processes. </title> <editor> In: G. Rozenberg (ed.), </editor> <booktitle> Advances in Petri Nets 1985, Vol. 222 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 41-58. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Ger-many. </address>
Reference-contexts: In this chapter, the converse approach is pursued. A translation from Petri nets into algebraic terms is given. Other examples of this approach are (BAETEN AND BERGSTRA, 1993), <ref> (BOUDOL, ROUCAIROL, AND DE SIMONE, 1985) </ref>, and (DIETZ AND SCHREIBER, 1994). The approach followed in each of these three papers is discussed briefly. In (DIETZ AND SCHREIBER, 1994), an algebraic semantics for P/T nets is given which reflects the parallelism in their dynamic behavior. <p> The parallel components in the algebraic representation of a net do not necessarily correspond to its structural components, as is the case in the semantics given in Section 3.4. A structural relationship between a Petri net and its algebraic semantics also exists in <ref> (BOUDOL, ROUCAIROL, AND DE SIMONE, 1985) </ref>. In that paper, an algebraic term is given for each place and each transition of a P/T net. The complete behavior of the net is the parallel composition of all these terms. The communication between these terms corresponds to the flow of tokens. <p> The semantics of this chapter are also based on the flow of tokens. However, to simulate the token flow, the causal state operator is used instead of a communication mechanism. Another difference is that, in this chapter, equational reasoning is emphasized, whereas in <ref> (BOUDOL, ROUCAIROL, AND DE SIMONE, 1985) </ref> reasoning is mainly model-based. The algebraic semantics of this chapter are most closely related to the semantics given in (BAETEN AND BERGSTRA, 1993).
Reference: <author> BOWEN, J.P. </author> <year> (1998). </year> <note> Oxford Formal-Methods Archive. http://www.comlab.ox. ac.uk/archive/formal-methods.html. </note>
Reference: <author> BRINKSMA, E., G. SCOLLO, AND C. </author> <month> STEENBERGEN </month> <year> (1987). </year> <title> Lotos Specifications, their Implementations, and their Tests. In: Protocol Specification, Testing and Verification, </title> <booktitle> VI, Proceedings of the IFIP WG 6.1 6th. international workshop, </booktitle> <pages> pp. 349-360, </pages> <address> Montreal, Quebec, Canada, June 1986. </address> <publisher> Elsevier, North-Holland. </publisher>
Reference-contexts: The research presented in this chapter is also related to some work in the area of con 206 Inheritance of Dynamic Behavior currency theory, namely conformance testing <ref> (BRINKSMA ET AL., 1987) </ref>. Conformance testing is the problem of verifying by means of testing whether some system implementation satisfies a given specification. In (BRINKSMA ET AL., 1987), a testing relation called extends is described, which is related to protocol inheritance. Contribution. <p> research presented in this chapter is also related to some work in the area of con 206 Inheritance of Dynamic Behavior currency theory, namely conformance testing <ref> (BRINKSMA ET AL., 1987) </ref>. Conformance testing is the problem of verifying by means of testing whether some system implementation satisfies a given specification. In (BRINKSMA ET AL., 1987), a testing relation called extends is described, which is related to protocol inheritance. Contribution. The main contribution of this chapter is the complete formalization of the concept of inheritance of dynamic behavior, starting from the intuitive notions of hiding and blocking method calls.
Reference: <author> COLOM, J.M. AND M. </author> <title> SILVA (1990). Improving the Linearly Based Characterization of P/T Nets. </title> <editor> In: G. Rozenberg (ed.), </editor> <booktitle> Advances in Petri Nets 1990, Vol. 483 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 113-145. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: This hardly compromises the generality of the rule. However, it is possible to verify whether a place is structurally implicit in polynomial time <ref> (COLOM AND SILVA, 1990) </ref>. The requirement that the extension of N 0 with q yields another life cycle is, in general, also hard to verify. However, the input that .N 0 ; [i]/ is a life cycle and that q is implicit in the extension might alleviate this problem.
Reference: <author> DEGANO, P., R. DE NICOLA, AND U. </author> <title> MONTANARI (1988). A Distributed Operational Semantics for CCS Based on Condition/Event Systems. </title> <journal> Acta Informatica, </journal> <volume> 26(1/2): </volume> <pages> 59-91. </pages>
Reference-contexts: One line of research is concerned with the translation of process-algebraic terms into Petri nets. The aim of this approach is to provide the process algebra with a true-concurrency semantics. Examples of this line of research are (BEST, DE-VILLERS, AND HALL, 1992), <ref> (DEGANO, DE NICOLA, AND MONTANARI, 1988) </ref>, (VAN GLABBEEK AND VAANDRAGER, 1987), (GOLTZ, 1988), (MONTANARI AND YANKELE VICH, 1994), (OLDEROG, 1987), and (TAUBNER, 1989). In this chapter, the converse approach is pursued. A translation from Petri nets into algebraic terms is given.
Reference: <author> DESEL, J. </author> <year> (1990). </year> <title> Reduction and Design of Well-behaved Concurrent Systems. </title> <editor> In: J.C.M. Baeten and J.W. Klop (eds.), </editor> <title> CONCUR '90, Theories of Concurrency: Unification and Extension, </title> <booktitle> Proceedings, Vol. 458 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 166-181, </pages> <address> Amsterdam, The Netherlands, August 1990. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference: <author> DESEL, J. AND J. </author> <month> ESPARZA </month> <year> (1995). </year> <title> Free Choice Petri Nets, </title> <booktitle> Vol. 40 of Cambridge Tracts in Theoretical Computer Science. </booktitle> <publisher> Cambridge University Press, </publisher> <address> Cambridge, UK. </address> <note> 214 Bibliography DIETZ, </note> <author> C. AND G. </author> <title> SCHREIBER (1994). A Term Representation of P/T Systems. </title> <editor> In: R. Valette (ed.), </editor> <booktitle> Application and Theory of Petri Nets 1994, 15th. International Conference, Proceedings, Vol. 815 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 239-257, </pages> <address> Zaragoza, Spain, June 1994. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: The class of free-choice P/T nets combines a reasonable expressive power with strong analysis techniques. Consequently, free-choice P/T nets have been extensively studied in the literature. The most important results on free-choice P/T nets have been brought together in <ref> (DESEL AND ESPARZA, 1995) </ref>. Definition 2.3.43. (Free-choice P/T net) A free-choice P/T net is an ordinary P/T net .P; T ; F / as in Definition 2.3.41 such that, for all transitions t; u 2 T , either * t " * u D or * t D * u. <p> This subsection presents some results useful in the analysis of free-choice P/T nets. Except for Property 2.3.66 on Page 32, all results in this subsection appear in <ref> (DESEL AND ESPARZA, 1995) </ref>. The main theorems are given without proof. Some other results are accompanied with proofs, because the proofs illustrate the use of the main theorems. <p> Net .N; s/ is live if and only if every proper siphon X P contains a trap Y X such that s.Y / &gt; 0. Proof. <ref> (DESEL AND ESPARZA, 1995, Section 4.3) </ref> 2 2.3 Petri Nets 29 tprdytcmd rcmd sprdy cmd prdy scmd pmt pmat omat Example 2.3.52. Consider the free-choice P/T net of Figure 2.3.24 on Page 23. It is not difficult to see that this P/T net does not have any siphons. <p> Proof. The implication from left to right follows immediately from Property 2.3.58 on the facing page. The other implication is a consequence of Theorem 2.3.51 (Commoner's theorem) on Page 28 and several results concerning siphons and traps, see <ref> (DESEL AND ESPARZA, 1995, Section 5.2) </ref> for details. 2 An S-cover of an ordinary P/T net is a set of S-components such that each place of the net is contained by at least one S-component. <p> The second important theorem of this subsection is the S-coverability theorem. Theorem 2.3.61. (S-coverability theorem) Let .N; s/ be a live and bounded marked, free-choice P/T net. Net N has an S-cover. Proof. <ref> (DESEL AND ESPARZA, 1995, Section 5.1) </ref> 2 Example 2.3.62. In Example 2.3.30 on Page 24, it was argued that the P/T net of Figure 2.3.29 also on Page 24 is live and bounded. Since this P/T net is free-choice, it must have an S-cover. <p> S-components are defined in terms of state machines, as introduced in the previous subsection. In a similar way, marked graphs form the basis of so-called T-components. Analogously to the S-coverability theorem, it can be shown that live and bounded free-choice P/T nets are covered by T-components. See <ref> (DESEL AND ESPARZA, 1995) </ref> for more details. The third and final theorem of this subsection states that a reachable marking of a live and bounded connected free-choice P/T net is a home marking if and only if it marks every proper trap of the net. <p> A reachable marking s 0 2 [N; s i is a home marking of .N; s/ if and only if, for every proper trap X P, s 0 .X / &gt; 0. Proof. <ref> (DESEL AND ESPARZA, 1995, Section 8.2) </ref> 2 Example 2.3.65. Consider again the P/T net of Figure 2.3.29 on Page 24 and its traps given in Example 2.3.35 on Page 25. <p> None of the results generalizes to ordinary P/T nets, although some of them (partially) generalize to subclasses of ordinary P/T nets that are slightly larger than free-choice P/T nets. The interested reader is referred to <ref> (DESEL AND ESPARZA, 1995, Chapter 10) </ref>. 2.4 Process Algebra This section gives an introduction to process algebra in the style of the Algebra of Communicating Processes, abbreviated ACP, (see BERGSTRA AND KLOP, 1984; BAETEN AND VERHOEF, 1995; BAETEN AND WEIJLAND, 1990).
Reference: <author> DILLON, L.K. AND S. </author> <title> SANKAR (1997). Introduction to the Special Issue. </title> <journal> IEEE Transactions on Software Engineering, Special Issue on Formal Methods in Software Practice, </journal> <volume> 23(5): </volume> <pages> 265-266. </pages>
Reference: <author> EBERT, J. AND G. </author> <title> ENGELS (1994). Structural and Behavioural Views on OMT-Classes. </title>
Reference: <editor> In: E. Bertino and S. Urban (eds.), </editor> <booktitle> Object-Oriented Methodologies and Systems, International Symposium, ISOOMS'94, Proceedings, Vol. 858 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 142-157, </pages> <address> Palermo, Italy, September 1994. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: The only completeness result for the binary Kleene star that to date exists is a result proved in <ref> (FOKKINK AND ZANTEMA, 1994) </ref>. There, it is shown that BPA fl , Basic Process Algebra with the binary Kleene star, is a sound and complete axiomatization for strong bisimilarity on closed terms. <p> Such an extension would not only simplify verifications, but it would also increase the modeling power of the formalism. Another extension could be the incorporation of the weak-sequential-composition operator of <ref> (RENSINK AND WEHRHEIM, 1994) </ref> in the theory. Weak sequential composition is a process-algebraic operator lying in between the sequential-composition operator and the merge operator. It is parameterized with a dependency relation on actions.
Reference: <author> ESPARZA, J. </author> <year> (1990). </year> <title> Synthesis Rules for Petri Nets, and How they Lead to New Results. </title>
Reference: <editor> In: J.C.M. Baeten and J.W. Klop (eds.), </editor> <title> CONCUR '90, Theories of Concurrency: Unification and Extension, </title> <booktitle> Proceedings, Vol. 458 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 182-198, </pages> <address> Amsterdam, The Netherlands, August 1990. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: A small example of the use of life-cycle inheritance in workflow management can be found in (VAN DER AALST AND BASTEN, 1997). Bibliographical remarks. The literature on object-oriented design and its theoretical foundations contains several studies related to the research described in this chapter. In <ref> (WIERINGA, 1990) </ref>, abstraction in a process-algebraic setting is suggested as an inheritance relation for dynamic behavior. However, only a few examples are studied. Based on these examples, the author concludes that abstraction is useful but not always sufficient to capture desirable subclass relationships. <p> Based on these examples, the author concludes that abstraction is useful but not always sufficient to capture desirable subclass relationships. Life-cycle inheritance as introduced in this thesis, which combines abstraction with encapsulation, is sufficiently powerful to prove the desired subclass relationships in the examples of <ref> (WIERINGA, 1990) </ref>. Other research on inheritance of dynamic behavior or related concepts such as sub-typing describes both formal studies, such as (AMERICA, 1990; EBERT AND ENGELS, 1994; KAPPEL AND SCHREFL, 1995; NIERSTRASZ, 1993; PUNTIGAM, 1996), and practical studies, such as (LAKOS, 1995b; MCGREGOR AND DYER, 1993).
Reference: <author> ESPARZA, J. AND M. </author> <title> NIELSEN (1994). Decibility Issues for Petri Nets a survey. </title> <journal> Journal of Information Processing and Cybernetics, </journal> <volume> 30(3): </volume> <pages> 143-160. </pages>
Reference-contexts: However, the algorithms are very complex and inefficient. The reader interested in these algorithms, and in decidability and complexity results for P/T nets in general, is referred to the literature. A good starting point is <ref> (ESPARZA AND NIELSEN, 1994) </ref>. A solution to improve the efficiency of analysis techniques for P/T nets is to consider subclasses of P/T nets. 2.3.4 Other classes of P/T nets In this subsection, several subclasses of labeled P/T nets are defined by imposing restrictions on the net structure. <p> Since the coverability tree of an ordinary P/T net is always finite, it is decidable whether .N; s/ is an object life cycle. 2 The exact complexity of deciding the object-life-cycle properties is still an open question. However, some known complexity results for P/T nets <ref> (see, for example, ESPARZA AND NIELSEN, 1994) </ref> suggest that they cannot be decided efficiently. First, deciding the life-cycle properties by means of the coverability tree, as suggested in the proof of Theorem 4.3.8, requires in the worst case non-primitive recursive space. <p> This space requirement is an immediate 4.3 A Petri-Net-Based Approach 171 consequence of the known lowerbound on the complexity of the reachability problem <ref> (see ESPARZA AND NIELSEN, 1994) </ref>. Hence, deciding any of the inheritance relations on two object life cycles cannot be done efficiently.
Reference: <author> FOKKINK, W.J. AND H. </author> <title> ZANTEMA (1994). Basic Process Algebra with Iteration: Completeness of its Equational Axioms. </title> <journal> The Computer Journal, </journal> <volume> 37(4): </volume> <pages> 259-267. </pages>
Reference-contexts: The only completeness result for the binary Kleene star that to date exists is a result proved in <ref> (FOKKINK AND ZANTEMA, 1994) </ref>. There, it is shown that BPA fl , Basic Process Algebra with the binary Kleene star, is a sound and complete axiomatization for strong bisimilarity on closed terms.
Reference: <author> FOWLER, M. AND K. </author> <title> SCOTT (1997). UML Distilled: Applying the Standard Object Modeling Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, USA. </address>
Reference-contexts: That is, it specifies the order in which the methods of an object may be executed. Such a specification is called the life cycle of an object. Three object-oriented methods that are in common use are OMT (RUMBAUGH ET AL., 1991), OOD (BOOCH, 1994), and UML <ref> (FOWLER AND SCOTT, 1997) </ref>. The given references are a good starting point for the reader interested in an introduction to object-oriented design including a detailed explanation of all the abovementioned concepts. One of the main goals of object-oriented design is the reuse of system components. <p> The concept of inheritance is one of the key concepts in object-oriented design. However, in most object-oriented methods which are in common use, such as OMT (RUMBAUGH ET AL., 1991), OOD (BOOCH, 1994), and UML <ref> (FOWLER AND SCOTT, 1997) </ref>, inheritance is only well defined for the set of methods of a class and its attributes. It is implicitly assumed that the behavior of an object of a subclass extends the behavior of an object of its superclass.
Reference: <author> GLABBEEK, </author> <title> R.J. VAN (1990a). Comparative Concurrency Semantics and Refinement of Actions. </title> <type> Ph.D. thesis, </type> <institution> Free University, </institution> <address> Amsterdam, The Netherlands. </address>
Reference-contexts: When semantic equivalences are used in the design of concurrent systems ( ... ), they should be chosen in such a way that two system descriptions are considered equivalent only if the described behaviours share the properties that are essential in the context in which the system will be embedded. <ref> (VAN GLABBEEK, 1990a, Introduction) </ref> For a detailed study of many different semantics for concurrent systems, the reader is referred to (VAN GLABBEEK, 1990a, 1990b, 1993). Since bisimilar processes are also equivalent in many other semantics, the ideas presented in this thesis carry over to these semantics with only little change. <p> a way that two system descriptions are considered equivalent only if the described behaviours share the properties that are essential in the context in which the system will be embedded. (VAN GLABBEEK, 1990a, Introduction) For a detailed study of many different semantics for concurrent systems, the reader is referred to <ref> (VAN GLABBEEK, 1990a, 1990b, 1993) </ref>. Since bisimilar processes are also equivalent in many other semantics, the ideas presented in this thesis carry over to these semantics with only little change.
Reference: <author> GLABBEEK, </author> <title> R.J. VAN (1990b). The Linear Time Branching Time Spectrum. In: </title> <publisher> J.C.M. </publisher>
Reference: <editor> Baeten and J.W. Klop (eds.), </editor> <title> CONCUR '90, Theories of Concurrency: Unification and Extension, </title> <booktitle> Proceedings, Vol. 458 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 278-297, </pages> <address> Amsterdam, The Netherlands, August 1990. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: It is not difficult to verify that it is impossible to construct a bisimulation between these two processes. This observation is consistent with the claim made earlier that bisimilarity preserves deadlocks in processes. That is, two processes can only be bisimilar if they have the same deadlocks <ref> (see, for example, BAETEN AND WEIJLAND, 1990, Chapter 7) </ref>. pmat 1 omat # rcmd rcmd ? pmat 1 pmat 2 omat # # # omat pmat 2 pmat 1 rcmd pmat 2 omat ? rcmd 10 Basic Concurrency Theory Example 2.2.12. <p> The goal is to find equational laws that are valid in the semantics. In the former case, the starting point is an equational theory, which may have several operational (or non-operational) semantic interpretations. For a detailed comparison of ACP, CCS, and CSP, the reader is referred to <ref> (BAETEN AND WEIJLAND, 1990, Chapter 8) </ref>. The next subsection introduces the process algebra BPA which can be used to reason about sequential processes only, but which shows the essentials of any process-algebraic theory. <p> The reason for presenting the conservativity result before the operational 42 Basic Concurrency Theory semantics is defined, is that the result itself is independent of the semantics. Furthermore, there are also proof techniques that do not use any specific semantics <ref> (see BAETEN AND WEIJLAND, 1990) </ref>. 2 Renaming and merge. The theory PA ffi CRN as introduced in Table 2.4.19 on Page 40 does not contain any axioms describing the interaction between the renaming operator and the merge. A meaningful and useful axiom would be the distribution of renaming over merge. <p> A slightly different proof of Property 2.4.32, which does not use natural induction but structural induction, can be found in <ref> (BAETEN AND WEIJLAND, 1990) </ref>. 2 For the interested reader, it is a nice exercise to prove by means of strong natural induction that, for closed PA ffi CRN terms, Axiom RNM2 in Table 2.4.22 on Page 42 is derivable from the other axioms of theory PA ffi CRN given in Table <p> Proof. The proof by induction on n is taken from <ref> (BAETEN AND WEIJLAND, 1990) </ref>. The base case, n D 1, is Axiom M1. <p> It simply states that a sequence of silent actions cannot be infinitely long. For a treatment of other, more sophisticated forms of fairness in process algebra, the reader is referred to <ref> (BAETEN AND WEIJLAND, 1990) </ref>. x : PI Table 2.4.54: The Fair Iteration Rule. The Fair Iteration Rule is valid in the operational semantics S.PA ofl ffi CRN/ of Defini tion 2.4.49 on Page 52. Property 2.4.55. <p> In a process-algebraic theory with general recursion another proof strategy could be followed, namely the one used in <ref> (BAETEN AND WEIJLAND, 1990) </ref> and (BAETEN AND VERHOEF, 1995) to show that an operational semantics satisfies the general Recursive Specification Principle RSP. Any semantics satisfying RSP also satisfies RSP fl . 56 Basic Concurrency Theory An example verification.
Reference: <author> GLABBEEK, </author> <title> R.J. VAN (1993). The Linear Time Branching Time Spectrum II: The Semantics of Sequential Systems with Silent Moves (extended abstract). </title> <editor> In: E. Best (ed.), </editor> <booktitle> CONCUR '93, 4th. International Conference on Concurrency Theory, Proceedings, Vol. 715 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 66-81, </pages> <address> Hildesheim, Germany, August 1993. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: It is a slightly finer equivalence than the well-known observation equivalence (MILNER, 1980, 1989). That is, it distinguishes more processes than observation equivalence <ref> (see VAN GLABBEEK, 1993) </ref>. A comparison of branching bisimilarity, observation equivalence, and a few other equivalences on processes with silent behavior can be found in (VAN GLABBEEK AND WEIJ LAND, 1996). Let .P; A; ! ; # / be a process space as defined in Definition 2.2.1 on Page 6. <p> The variety in inheritance relations is not very surprising if one considers, for example, the large number of semantics that exist for concurrent systems <ref> (see, for example, VAN GLABBEEK, 1993) </ref>. There simply is no single semantics of concurrent systems that is suitable for all purposes. Similarly, it cannot be expected that there is a single inheritance relation for dynamic behavior that is always useful.
Reference: <author> GLABBEEK, </author> <title> R.J. VAN (1994). What is Branching Time Semantics and Why to Use It? In: </title> <journal> Bulletin of the EATCS, </journal> <volume> No. 53, </volume> <pages> pp. 191-198. </pages> <institution> European Association for Theoretical Computer Science. </institution>
Reference-contexts: It is not difficult to see that it is impossible to construct a bisimulation between the two processes. The reason is that the moments of choice of the two processes are different. In other words, bisimilarity is said to preserve the branching structure of processes <ref> (see, for example, VAN GLABBEEK, 1994) </ref>. It is useful to distinguish the two processes in Figure 2.2.11.a/ and .b/. Consider, for example, a situation where only the first input source is filled with material. If the unit of execute its processing task. <p> It also yields shorter proofs. A comparison of the two definitions can be found in (BASTEN, 1996). 2.2 Process Theory 11 As is the case for strong bisimilarity, branching bisimilarity distinguishes processes with different moments of choice <ref> (see VAN GLABBEEK, 1994) </ref>. It is a slightly finer equivalence than the well-known observation equivalence (MILNER, 1980, 1989). That is, it distinguishes more processes than observation equivalence (see VAN GLABBEEK, 1993).
Reference: <author> GLABBEEK, </author> <title> R.J. VAN (1997). Axiomatizing Flat Iteration. </title> <editor> In: A. Mazurkiewicz and J. Winkowski (eds.), </editor> <booktitle> CONCUR '97: Concurrency Theory, 8th. International Con 215 ference, Proceedings, Vol. 1243 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 228-242, </pages> <address> Warsaw, Poland, July 1997. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: There, it is shown that BPA fl , Basic Process Algebra with the binary Kleene star, is a sound and complete axiomatization for strong bisimilarity on closed terms. In addition, there are several completeness results for restricted forms of the binary Kleene star <ref> (see VAN GLABBEEK, 1997, for an overview) </ref>. Standard concurrency and expansion. Although the axioms of standard concurrency ASC4 and ASC6 are not derivable from the axioms of PA ofl ffi C RN, they are valid in the semantics S.PA ofl ffi CRN/.
Reference: <author> GLABBEEK, R.J. VAN, AND F.W. </author> <title> VAANDRAGER (1987). Petri Net Models for Algebraic Theories of Concurrency. </title> <editor> In: J.W. de Bakker, A.J. Nijman, and P.C. Treleaven (eds.), </editor> <booktitle> PARLE Parallel Architectures and Languages Europe, Vol. I, Parallel Architectures, Vol. 258 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 224-242, </pages> <address> Eindhoven, The Netherlands, June 1987. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: If the marking of a net is not empty and it cannot fire any transitions anymore, the net is said to be in a deadlock. This definition for successful termination of labeled P/T nets was first given in <ref> (VAN GLABBEEK AND VAANDRAGER, 1987) </ref>. Let # be the set of all marked, labeled P/T nets .N; 0/ in N . <p> One line of research is concerned with the translation of process-algebraic terms into Petri nets. The aim of this approach is to provide the process algebra with a true-concurrency semantics. Examples of this line of research are (BEST, DE-VILLERS, AND HALL, 1992), (DEGANO, DE NICOLA, AND MONTANARI, 1988), <ref> (VAN GLABBEEK AND VAANDRAGER, 1987) </ref>, (GOLTZ, 1988), (MONTANARI AND YANKELE VICH, 1994), (OLDEROG, 1987), and (TAUBNER, 1989). In this chapter, the converse approach is pursued. A translation from Petri nets into algebraic terms is given.
Reference: <author> GLABBEEK, R.J. VAN, </author> <title> AND W.P. WEIJLAND (1989). Branching Time and Abstraction in Bisimulation Semantics (extended abstract). </title> <editor> In: G.X. Ritter (ed.), </editor> <booktitle> Information Processing 89: Proceedings of the IFIP 11th. World Computer Congress, </booktitle> <pages> pp. 613-618, </pages> <address> San Francisco, California, USA, August/September 1989. </address> <publisher> Elsevier Science Publishers B.V., </publisher> <address> North-Holland. </address> <note> Full version appeared as (VAN GLABBEEK AND WEIJ-LAND, </note> <year> 1996). </year>
Reference-contexts: In case one is interested in observable behavior only, processes with the same observable behavior, but with different internal behavior should be equal. Branching bisimilarity is an equivalence that satisfies this requirement. Branching bisimilarity was first introduced in <ref> (VAN GLABBEEK AND WEIJLAND, 1989) </ref>. The definition given in this subsection is slightly different from the original definition. In fact, it is the definition of semi-branching bisimilarity, which was first defined in (WEIJLAND, 1989, Chapter 1). <p> The following lemma is only valid for (rooted) branching bisimulations as defined in Definition 2.2.15 on Page 11. In (BASTEN, 1996), an ex ample is given showing that it does not hold for the original definition in <ref> (VAN GLABBEEK AND WEIJLAND, 1989) </ref>. Lemma 2.2.23. The relation composition of two (rooted) branching bisimulations is a (rooted) branching bisimulation. Proof. Let p; q, and r be processes in P; let Q and R be (rooted) branching bisimulations such that pQq and qRr.
Reference: <author> GLABBEEK, R.J. VAN, </author> <title> AND W.P. WEIJLAND (1996). Branching Time and Abstraction in Bisimulation Semantics. </title> <journal> Journal of the ACM, </journal> <volume> 43(3): </volume> <pages> 555-600. </pages>
Reference-contexts: It is a slightly finer equivalence than the well-known observation equivalence (MILNER, 1980, 1989). That is, it distinguishes more processes than observation equivalence (see VAN GLABBEEK, 1993). A comparison of branching bisimilarity, observation equivalence, and a few other equivalences on processes with silent behavior can be found in <ref> (VAN GLABBEEK AND WEIJ LAND, 1996) </ref>. Let .P; A; ! ; # / be a process space as defined in Definition 2.2.1 on Page 6. The set of actions A is defined as A [ fo g, where A is some set of observable actions. <p> Let A be some set of action labels. Table 2.4.37 gives the theory PA o ffi CRN. Note that the second entry of Table 2.4.37 introduces the special action o . Axioms B1 and B2 are the basis for an axiomatization of rooted branching bisimilar-ity <ref> (see VAN GLABBEEK AND WEIJLAND, 1996) </ref>. These axioms are, of course, chosen because rooted branching bisimilarity is the equivalence used in the operational seman tics given below. Together, B1 and B2 state that it is allowed to remove a silent action provided that it does not enforce an internal choice. <p> The theorem is a fairly straightforward result of Property 2.4.42, the completeness of BPA o for rooted branching bisimilarity <ref> (see VAN GLABBEEK AND WEIJLAND, 1996) </ref> and the proof techniques in (BAETEN AND VERHOEF, 1995). 2 Example 2.4.46. Consider Examples 2.2.12 on Page 10 and 2.2.20 on Page 13.
Reference: <author> GOLTZ, U. </author> <year> (1988). </year> <title> On Representing CCS Programs by Finite Petri Nets. In: M.P. </title> <editor> Chytil, L. Janiga, and V. Koubek (eds.), </editor> <booktitle> Mathematical Foundations of Computer Science 1988, Proceedings, Vol. 324 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 339-350, </pages> <address> Carlsbad, Czechoslovakia, August/September, 1988. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Ger-many. </address>
Reference-contexts: The aim of this approach is to provide the process algebra with a true-concurrency semantics. Examples of this line of research are (BEST, DE-VILLERS, AND HALL, 1992), (DEGANO, DE NICOLA, AND MONTANARI, 1988), (VAN GLABBEEK AND VAANDRAGER, 1987), <ref> (GOLTZ, 1988) </ref>, (MONTANARI AND YANKELE VICH, 1994), (OLDEROG, 1987), and (TAUBNER, 1989). In this chapter, the converse approach is pursued. A translation from Petri nets into algebraic terms is given.
Reference: <author> GRAHLMANN, B. </author> <year> (1997). </year> <title> The PEP Tool. </title> <editor> In: O. Grumberg (ed.), </editor> <booktitle> Computer Aided Verification, 9th. International Conference, CAV'97,Proceedings, Vol. 1254 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 440-443, </pages> <address> Haifa, Israel, June 1997. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: All three tools support colored Petri nets. The Petri-net formalism which is the basis for ExSpect is described in (VAN HEE, 1994), whereas the formalism supported by Design/CPN can be found in (JENSEN, 1992). A good starting point for references to the various formalisms underlying PEP is <ref> (GRAHLMANN, 1997) </ref>. In this thesis, simulation does not play an important role. A simple application of simulation techniques for Petri nets appears in Chapter 3. Simulation is not discussed in detail. Other analysis techniques for Petri-net models are focused on properties of such models.
Reference: <author> GRAHLMANN, B. AND E. </author> <title> BEST (1996). PEP: More than a Petri Net Tool. </title> <editor> In: T. Mar-garia and B. Steffen (eds.), </editor> <booktitle> Tools and Algorithms for the Construction and Analysis of Systems, 2nd. International Workshop, TACAS'96, Proceedings, Vol. 1055 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 397-401, </pages> <address> Passau, Germany, March 1996. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: An exception is the Petri Box Calculus of (BEST, DEVILLERS, AND HALL, 1992) which has inspired a whole line of research, including the development of tools and the basics of a design method <ref> (GRAHLMANN AND BEST, 1996) </ref>. However, there are many differences with the approach taken in this chapter. In (BEST, DEVILLERS, AND HALL, 1992; GRAHLMANN AND BEST, 1996), the starting point is a programming language based on process-algebraic principles. Petri nets are used to provide this language with a semantics.
Reference: <author> GROOTE, J.F. AND A. </author> <title> PONSE (1994). Proof Theory for CRL: A Language for Processes with Data. In: D.J. Andrews, </title> <editor> J.F. Groote, and C.A. Middelburg (eds.), </editor> <booktitle> Semantics of Specification Languages, Proceedings of the International Workshop SoSL, Workshops in Computing, </booktitle> <pages> pp. 232-251, </pages> <address> Utrecht, The Netherlands, October 1993. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: However, the current theory is not yet developed far enough to allow parameterized verifications. To allow such verifications, it is necessary to incorporate data in the theory of this chapter. An example of a process algebra with data types is CRL <ref> (GROOTE AND PONSE, 1994) </ref>. The process algebra CRL contains induction principles that would allow us to verify the behavior of a complex unit for arbitrary K . <p> The verifications of the production unit show that, for complex concurrent systems, this is not possible without proper tool support. In addition, the case study shows that it would be useful to integrate data in the theory in the style of the process algebra CRL <ref> (GROOTE AND PONSE, 1994) </ref>. Such an extension allows parameterized and inductive verifications, making it possible to verify properties of many variations of a system in one verification. 3.9 Conclusions 139 Future work.
Reference: <author> GROOTE, J.F. AND F.W. </author> <title> VAANDRAGER (1990). An Efficient Algorithm for Branching and Stuttering Equivalence. In: M.S. </title> <editor> Paterson (ed.), </editor> <booktitle> Automata, Languages and Programming, 17th. International Colloquium, Proceedings, Vol. 443 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 626-638, </pages> <institution> Warwick University, </institution> <address> England, July 1990. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: It is known that deciding whether two finite processes are branching bisimilar can be done in polynomial time, where the size of the problem is defined as the number of states and transitions of the two processes <ref> (GROOTE AND VAANDRAGER, 1990) </ref>. However, constructing the process corresponding to an ordinary P/T net requires in the worst case at least exponential space, where the size of the problem is the number of nodes of the P/T net.
Reference: <author> HEE, K.M. </author> <title> VAN (1994). Information Systems Engineering: A Formal Approach. </title> <publisher> Cam-bridge University Press, </publisher> <address> Cambridge, UK. </address> <note> 216 Bibliography HEE, </note> <author> K.M. VAN, L.J. SOMERS, AND M. </author> <title> VOORHOEVE (1989). Executable Specifications for Distributed Information Systems. </title> <editor> In: E.D. Falkenberg and P. Lindgreen (eds.), </editor> <title> Information System Concepts: An In-depth Analysis, </title> <booktitle> Proceedings of the IFIP TC8/WG8.1 Working Conference, </booktitle> <pages> pp. 139-156, </pages> <address> Namur, Belgium, October 1989. </address> <publisher> North-Holland, </publisher> <address> Amsterdam, The Netherlands. </address>
Reference-contexts: To date, many tools for simulating Petri-net models exist. Three well-known tools are ExSpect (ASPT, 1994), Design/CPN (JENSEN ET AL., 1991), and PEP (BEST AND GRAHLMANN, 1995). All three tools support colored Petri nets. The Petri-net formalism which is the basis for ExSpect is described in <ref> (VAN HEE, 1994) </ref>, whereas the formalism supported by Design/CPN can be found in (JENSEN, 1992). A good starting point for references to the various formalisms underlying PEP is (GRAHLMANN, 1997). In this thesis, simulation does not play an important role. <p> The basic ideas and important results of this chapter, on the other hand, can be easily explained by means of modular P/T nets. The modularity construct of modular P/T nets is essentially the same as the hierarchy construct in the hierarchical Petri nets of <ref> (VAN HEE, 1994) </ref>. It is also one of the constructs used in (JENSEN, 1992). Furthermore, it is supported by tools as Design/CPN and ExSpect. <p> ExSpect supports the construction, simulation, and analysis of colored-Petri-net models of complex concurrent systems. ExSpect was first described in (VAN HEE, SOMERS, AND VOORHOEVE, 1989). Its theoretical foundation is described in detail in <ref> (VAN HEE, 1994) </ref>. A good example of the use of ExSpect in practical applications can be found in (BASTEN, BOL, AND VOORHOEVE, 1995).
Reference: <author> HOARE, </author> <title> C.A.R. (1985). Communicating Sequential Processes. </title> <booktitle> Prentice-Hall International, </booktitle> <address> London, UK. </address>
Reference-contexts: Process algebras are often used for the analysis of concurrent-system behavior, in particular, the comparison of behaviors. There are many different kinds of process algebras. Apart from the already mentioned ACP, the process algebras CCS (MILNER, 1980, 1989) and CSP <ref> (HOARE, 1985) </ref> are the most well-known. Specifications and verifications in ACP are based on an equational style of reasoning, as opposed to CCS and CSP, which are model-based. In the latter case, the starting point of the process algebra is an operational semantics.
Reference: <author> JENSEN, K. </author> <year> (1992). </year> <title> Coloured Petri Nets. Basic Concepts, Analysis Methods and Practical Use, Vol. 1, Basic Concepts. </title> <booktitle> EATCS monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: All three tools support colored Petri nets. The Petri-net formalism which is the basis for ExSpect is described in (VAN HEE, 1994), whereas the formalism supported by Design/CPN can be found in <ref> (JENSEN, 1992) </ref>. A good starting point for references to the various formalisms underlying PEP is (GRAHLMANN, 1997). In this thesis, simulation does not play an important role. A simple application of simulation techniques for Petri nets appears in Chapter 3. Simulation is not discussed in detail. <p> The modularity construct of modular P/T nets is essentially the same as the hierarchy construct in the hierarchical Petri nets of (VAN HEE, 1994). It is also one of the constructs used in <ref> (JENSEN, 1992) </ref>. Furthermore, it is supported by tools as Design/CPN and ExSpect. The interface function ifc on P/T-net components is generalized to sets of components by taking the union of the interfaces of all the components in a set.
Reference: <author> JENSEN, K. </author> <year> (1995). </year> <title> Coloured Petri Nets. Basic Concepts, Analysis Methods and Practical Use, Vol. 2, Analysis Methods. </title> <booktitle> Monographs in Theoretical Computer Science: An EATCS Series. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference: <author> JENSEN, K. </author> <year> (1997). </year> <title> Coloured Petri Nets. Basic Concepts, Analysis Methods and Practical Use, Vol. 3, Practical Use. </title> <booktitle> Monographs in Theoretical Computer Science: An EATCS Series. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference: <author> JENSEN, K., S. CHRISTENSEN, P. HUBER, AND M. </author> <month> HOLLA </month> <year> (1991). </year> <title> Design/CPN: A Reference Manual. Meta Software Corporation. </title> <note> Information available at http:// www.daimi.au.dk/designCPN. </note>
Reference-contexts: P/T nets are well 2.3 Petri Nets 21 suited for simulation techniques because of their intuitive graphical representation in combination with the precise definition of their dynamic behavior. To date, many tools for simulating Petri-net models exist. Three well-known tools are ExSpect (ASPT, 1994), Design/CPN <ref> (JENSEN ET AL., 1991) </ref>, and PEP (BEST AND GRAHLMANN, 1995). All three tools support colored Petri nets. The Petri-net formalism which is the basis for ExSpect is described in (VAN HEE, 1994), whereas the formalism supported by Design/CPN can be found in (JENSEN, 1992). <p> These aspects are usually addressed in this stage of the design process. This means that, in general, a colored-Petri-net formalism is used to define the Petri-net model of the system. Simulation. The Petri-net model of a concurrent system can be simulated using tools such as ExSpect (ASPT, 1994), Design/CPN <ref> (JENSEN ET AL., 1991) </ref>, or PEP (BEST AND GRAHLMANN, 1995). The specification and the net model can be validated and corrected, if necessary. Simulation is an excellent means to discover the more obvious mistakes in both the behavioral specification and the Petri-net model.
Reference: <author> KAPPEL, G. AND M. </author> <title> SCHREFL (1995). Inheritance of Object Behavior Consistent Extension of Object Life Cycles. </title> <editor> In: J. Eder and L.A. Kalinichenko (eds.), </editor> <booktitle> East/ West Database Workshop, Proceedings of the 2nd. International Workshop, Workshops in Computing, </booktitle> <pages> pp. 289-300, </pages> <address> Klagenfurt, Austria, September 1994. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference: <author> KLEENE, S.C. </author> <year> (1956). </year> <title> Representation of Events in Nerve Nets and Finite Automata. </title> <editor> In: C.E. Shannon and J. McCarthy (eds.), </editor> <booktitle> Automata Studies, No. 34 in Annals of Mathematics Studies, </booktitle> <pages> pp. 3-41. </pages> <publisher> Princeton University Press, </publisher> <address> Princeton, New Jersey, USA. </address>
Reference-contexts: The binary Kleene star is the original star operator as introduced in <ref> (KLEENE, 1956) </ref>. The binary Kleene star is much simpler than general recursion (see BAETEN AND VERHOEF, 1995; BAETEN AND WEIJLAND, 1990). 52 Basic Concurrency Theory The equational theory PA ofl ffi C RN.
Reference: <author> KOVALYOV, A.V. </author> <year> (1990). </year> <title> On Complete Reducibility of Some Classes of Petri Nets. In: Application and Theory of Petri Nets 1990, </title> <booktitle> 11th. International Conference, ICATPN'90, Proceedings, </booktitle> <pages> pp. 352-366, </pages> <address> Paris, France, </address> <month> June </month> <year> 1990. </year>
Reference: <author> KOVALYOV, A.V. </author> <year> (1996). </year> <title> An O.jSj fi jT j/-Algorithm to Verify if a Net is Regular. </title> <editor> In: J. Billington and W. Reisig (eds.), </editor> <booktitle> Application and Theory of Petri Nets 1996, 17th. International Conference, ICATPN'96, Proceedings, Vol. 1091 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 366-379, </pages> <address> Osaka, Japan, June 1996. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: Although the complexity of deciding the life-cycle properties is discouraging, it is still possible to verify the properties by means of the coverability tree in a relatively straightforward way for object life cycles that are not too large. In addition, <ref> (KOVALYOV, 1996) </ref> gives conditions for a marked, ordinary P/T net which guarantee that the net is live and bounded. It also presents an algorithm which is linear in the number of nodes of the net 164 Inheritance of Dynamic Behavior to verify these conditions. <p> It also presents an algorithm which is linear in the number of nodes of the net 164 Inheritance of Dynamic Behavior to verify these conditions. Based on Theorem 4.3.7, the algorithm of <ref> (KOVALYOV, 1996) </ref> provides an efficient procedure to prove that a P/T net is an object life cycle, although failure of the algorithm does not mean that the net is not a life cycle. Experience with case studies is needed to find out the practical limitations. <p> Experience with case studies is needed to find out the practical limitations. In case the P/T nets in an object-oriented design become too complex for the automatic verification of life-cycle properties or if the algorithm of <ref> (KOVALYOV, 1996) </ref> fails, there are two solutions. First, it is possible to build life cycles in a constructive way by means of transformation rules preserving the life-cycle properties. <p> In Section 2.3.4, the set of free-choice P/T nets has been introduced as a class of nets that combines expressiveness with strong analysis techniques. It is known that deciding the combination of liveness and boundedness for marked, free-choice P/T nets can be done in linear time <ref> (KOVALYOV, 1996) </ref>. <p> Proof. Theorem 4.3.7 on Page 163 and the results of <ref> (KOVALYOV, 1996) </ref>. 2 This last theorem is a small improvement of a result in (VAN DER AALST, 1997) for free-choice workflow nets. It is possible to relax the free-choice requirement in Theorem 4.3.9 slightly while maintaining the same efficiency in deciding the life-cycle properties (see VAN DER AALST, 1997). <p> As already explained, the alphabet of an object life cycle is simply the set of its visible transition labels. It has also been mentioned that liveness and boundedness of free-choice P/T nets can be verified in linear time <ref> (KOVALYOV, 1996) </ref>. This means that all requirements of rule PP can be verified efficiently. The correctness of transformation rule PP is proven by showing that it is both a special case of transformation rule PT and of transformation rule PJ given further on in this subsection.
Reference: <editor> LAKOS, </editor> <address> C.A. </address> <year> (1995a). </year> <title> From Coloured Petri Nets to Object Petri Nets. </title> <editor> In: G. De Michelis and M. Diaz (eds.), </editor> <booktitle> Application and Theory of Petri Nets 1995, 16th. International Conference, Proceedings, Vol. 935 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 278-297, </pages> <address> Torino, Italy, June 1995. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: It is also possible to integrate life-cycle inheritance in an object-oriented formalism based on Petri nets, such as OPN <ref> (LAKOS, 1995a) </ref>. An advantage of this approach is that it results in an integrated framework with a sound theoretical basis. A disadvantage is that object-oriented languages based on Petri nets are not yet in common use.
Reference: <editor> LAKOS, </editor> <address> C.A. </address> <year> (1995b). </year> <title> Pragmatic Inheritance Issues for Object Petri Nets. </title> <booktitle> In: TOOLS Pacific 1995, Proceedings, </booktitle> <pages> pp. 309-321, </pages> <address> Melbourne, Australia. </address> <publisher> Prentice-Hall. </publisher> <address> 217 MCGREGOR, </address> <month> J.D. </month> <title> AND D.M. DYER (1993). A Note on Inheritance and State Machines. </title> <journal> Software Engineering Notes, </journal> <volume> 18(4): </volume> <pages> 1-15. </pages>
Reference: <author> MILNER, R. </author> <year> (1980). </year> <title> A Calculus of Communicating Systems, </title> <booktitle> Vol. 92 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: A comparison of the two definitions can be found in (BASTEN, 1996). 2.2 Process Theory 11 As is the case for strong bisimilarity, branching bisimilarity distinguishes processes with different moments of choice (see VAN GLABBEEK, 1994). It is a slightly finer equivalence than the well-known observation equivalence <ref> (MILNER, 1980, 1989) </ref>. That is, it distinguishes more processes than observation equivalence (see VAN GLABBEEK, 1993). A comparison of branching bisimilarity, observation equivalence, and a few other equivalences on processes with silent behavior can be found in (VAN GLABBEEK AND WEIJ LAND, 1996). <p> Whereas Petri-net formalisms are graphical by nature, process algebras are symbolic. Process algebras are often used for the analysis of concurrent-system behavior, in particular, the comparison of behaviors. There are many different kinds of process algebras. Apart from the already mentioned ACP, the process algebras CCS <ref> (MILNER, 1980, 1989) </ref> and CSP (HOARE, 1985) are the most well-known. Specifications and verifications in ACP are based on an equational style of reasoning, as opposed to CCS and CSP, which are model-based. In the latter case, the starting point of the process algebra is an operational semantics.
Reference: <author> MILNER, R. </author> <year> (1989). </year> <title> Communication and Concurrency. </title> <booktitle> Prentice-Hall International, </booktitle> <address> Lon-don, UK. </address>
Reference: <author> MONTANARI, U. AND D. </author> <title> YANKELEVICH (1994). Combining CCS and Petri Nets via Structural Axioms. </title> <journal> Fundamenta Informaticae, </journal> <pages> 20(1-3): 193-229. </pages>
Reference-contexts: The aim of this approach is to provide the process algebra with a true-concurrency semantics. Examples of this line of research are (BEST, DE-VILLERS, AND HALL, 1992), (DEGANO, DE NICOLA, AND MONTANARI, 1988), (VAN GLABBEEK AND VAANDRAGER, 1987), (GOLTZ, 1988), <ref> (MONTANARI AND YANKELE VICH, 1994) </ref>, (OLDEROG, 1987), and (TAUBNER, 1989). In this chapter, the converse approach is pursued. A translation from Petri nets into algebraic terms is given. Other examples of this approach are (BAETEN AND BERGSTRA, 1993), (BOUDOL, ROUCAIROL, AND DE SIMONE, 1985), and (DIETZ AND SCHREIBER, 1994).
Reference: <author> MURATA, T. </author> <year> (1989). </year> <title> Petri Nets: Properties, Analysis and Applications. </title> <booktitle> Proceedings of the IEEE, </booktitle> <volume> 77(4): </volume> <pages> 541-580. </pages>
Reference: <author> NIERSTRASZ, O. </author> <year> (1993). </year> <title> Regular Types for Active Objects. </title> <journal> ACM Sigplan Notices, </journal> <volume> 28(10): </volume> <pages> 1-15. </pages> <booktitle> Proceedings of the 8th. annual conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <address> OOPSLA'93, Washington DC, </address> <year> 1993. </year>
Reference: <author> OLDEROG, E.-R. </author> <year> (1987). </year> <title> Petri Nets and Algebraic Calculi of Processes. </title> <editor> In: G. Rozenberg (ed.), </editor> <booktitle> Advances in Petri Nets 1987, Vol. 266 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 196-223. </pages> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: The aim of this approach is to provide the process algebra with a true-concurrency semantics. Examples of this line of research are (BEST, DE-VILLERS, AND HALL, 1992), (DEGANO, DE NICOLA, AND MONTANARI, 1988), (VAN GLABBEEK AND VAANDRAGER, 1987), (GOLTZ, 1988), (MONTANARI AND YANKELE VICH, 1994), <ref> (OLDEROG, 1987) </ref>, and (TAUBNER, 1989). In this chapter, the converse approach is pursued. A translation from Petri nets into algebraic terms is given. Other examples of this approach are (BAETEN AND BERGSTRA, 1993), (BOUDOL, ROUCAIROL, AND DE SIMONE, 1985), and (DIETZ AND SCHREIBER, 1994).
Reference: <author> OWRE, S., J. RUSHBY, N. SHANKAR, AND F. </author> <title> VON HENKE (1995). Formal Verification for Fault-Tolerant Architectures: Prolegomena to the Design of PVS. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> 21(2): </volume> <pages> 107-125. </pages>
Reference-contexts: Particularly the possibility of parameterized and inductive verifications would be an advantage over model checking. A preliminary study into the possibilities for tool support for equational reasoning by means of the generic proof system PVS <ref> (OWRE ET AL., 1995) </ref> can be found in (BASTEN AND HOOMAN, 1998). This study shows that, in principle, it is feasible to develop automated proof support for large equational verifications.
Reference: <author> PARK, D. </author> <year> (1981). </year> <title> Concurrency and Automata on Infinite Sequences. </title> <editor> In: P. Deussen (ed.), </editor> <booktitle> Theoretical Computer Science, 5th. GI-Conference, Vol. 104 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 167-183, </pages> <address> Karlsruhe, Germany, March 1981. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: The basic idea is that two processes are equivalent if and only if they can always copy, or simulate, each others actions. Two processes satisfying this requirement are called bisimilar. Bisimilar-ity was first introduced in <ref> (PARK, 1981) </ref>. Although there are many possible choices for a meaningful equivalence relation on processes, bisimilarity is the basic semantic equivalence used throughout this thesis. There are several reasons for choosing bisimilarity. 8 Basic Concurrency Theory First, it has an easy-to-understand, intuitive definition.
Reference: <author> PETERSON, J.L. </author> <year> (1981). </year> <title> Petri Net Theory and the Modeling of Systems. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, USA. </address>
Reference-contexts: Net .N; s/ is bounded if and only if, for any markings s 0 2 [N; s i and s 00 2 [N; s 0 i, s 00 s 0 implies s 00 D s 0 . Proof. See <ref> (PETERSON, 1981, Section 4.2.1.1) </ref>, where the property is formulated as a property of the coverability tree (called the reachability tree in (PETERSON, 1981)). <p> Proof. See (PETERSON, 1981, Section 4.2.1.1), where the property is formulated as a property of the coverability tree (called the reachability tree in <ref> (PETERSON, 1981) </ref>). The property is a direct result of Property 2.3.21 (Monotonicity of reachable markings) on the facing page and the fact that the coverability tree of a labeled P/T net is always finite. 2 prdy rcmd tcmd pmt tprdy sprdy pmat omat omt imt scmd rmat Example 2.3.25. <p> Proof. Requirements i/ through iv/ of Definition 4.3.2 on Page 161 are simple structural properties that can be checked for any ordinary P/T net in a straightforward way. Requirements v/, vi/, and vii/ can be derived from the coverability tree of .N; s/ <ref> (see PETERSON, 1981, where it is called the reachability tree) </ref>. Since the coverability tree of an ordinary P/T net is always finite, it is decidable whether .N; s/ is an object life cycle. 2 The exact complexity of deciding the object-life-cycle properties is still an open question.
Reference: <author> PETRI, C.A. </author> <year> (1962). </year> <title> Kommunikation mit Automaten. </title> <type> Ph.D. thesis, </type> <institution> Institut fur instru-mentelle Mathematik, Bonn, Germany. </institution> <note> In German. </note>
Reference-contexts: Petri nets were introduced in 1962 by Carl Adam Petri <ref> (PETRI, 1962) </ref>. Since then, Petri-net theory has been extended in many ways and applied to many 16 Basic Concurrency Theory kinds of problems. Its popularity is due to both its easy-to-understand graphical representation of nets and its potential as a technique for formally analyzing concurrent systems.
Reference: <author> PUNTIGAM, F. </author> <year> (1996). </year> <title> Types for Active Objects Based on Trace Semantics. In: Formal Methods for Open Object-based Distributed Systems, </title> <booktitle> 1st. IFIP international workshop, Proceedings, </booktitle> <address> Paris, France, </address> <month> March </month> <year> 1996. </year>
Reference: <author> RAMBAGS, P.M.P. </author> <year> (1994). </year> <title> Decomposition and Protocols in High-level Petri Nets. </title> <type> Ph.D. thesis, </type> <institution> Eindhoven University of Technology, Department of Mathematics and Computing Science, Eindhoven, The Netherlands. </institution>
Reference-contexts: During the development of ExSpect, it became clear that a useful extension of the tool would be the possibility to 140 Algebraic Verification of Modular Nets verify the interface behavior of system components in a compositional way. The theoretical basis for such an extension was first investigated in <ref> (RAMBAGS, 1994) </ref>. The approach taken in (RAMBAGS, 1994) is to find algorithms for deciding in a fully automated way whether a Petri net satisfies a certain prescribed behavior. <p> The theoretical basis for such an extension was first investigated in <ref> (RAMBAGS, 1994) </ref>. The approach taken in (RAMBAGS, 1994) is to find algorithms for deciding in a fully automated way whether a Petri net satisfies a certain prescribed behavior. However, this algorithmic approach proves to have its limitations, because the general problem whether a (colored) Petri net satisfies a certain behavior is undecidable.
Reference: <author> REISIG, W. </author> <year> (1985). </year> <title> Petri Nets: An Introduction, </title> <booktitle> Vol. 4 of EATCS monographs on Theoretical Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference: <author> RENSINK, A. AND H. </author> <title> WEHRHEIM (1994). Weak Sequential Composition in Process Algebras. </title> <editor> In: B. Jonsson and J. Parrow (eds.), </editor> <booktitle> CONCUR '94: Concurrency Theory, 5th. International Conference, Proceedings, Vol. 836 of Lecture Notes in Computer 218 Bibliography Science, </booktitle> <pages> pp. 226-241, </pages> <address> Uppsala, Sweden, August 1994. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: Such an extension would not only simplify verifications, but it would also increase the modeling power of the formalism. Another extension could be the incorporation of the weak-sequential-composition operator of <ref> (RENSINK AND WEHRHEIM, 1994) </ref> in the theory. Weak sequential composition is a process-algebraic operator lying in between the sequential-composition operator and the merge operator. It is parameterized with a dependency relation on actions.
Reference: <author> RUMBAUGH, J., M. BLAHA, W. PREMERLANI, F. EDDY, AND W. </author> <month> LORENSEN </month> <year> (1991). </year> <title> Object-Oriented Modeling and Design. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, USA. </address>
Reference-contexts: Finally, a class contains a definition of the dynamic behavior of objects. That is, it specifies the order in which the methods of an object may be executed. Such a specification is called the life cycle of an object. Three object-oriented methods that are in common use are OMT <ref> (RUMBAUGH ET AL., 1991) </ref>, OOD (BOOCH, 1994), and UML (FOWLER AND SCOTT, 1997). The given references are a good starting point for the reader interested in an introduction to object-oriented design including a detailed explanation of all the abovementioned concepts. <p> For this purpose, it is also necessary to incorporate the results of this chapter in a complete object-oriented formalism. 4.5 Conclusions Concluding remarks. The concept of inheritance is one of the key concepts in object-oriented design. However, in most object-oriented methods which are in common use, such as OMT <ref> (RUMBAUGH ET AL., 1991) </ref>, OOD (BOOCH, 1994), and UML (FOWLER AND SCOTT, 1997), inheritance is only well defined for the set of methods of a class and its attributes.
Reference: <author> SEWELL, P. </author> <year> (1994). </year> <title> Bisimulation is not Finitely (First Order) Equationally Axioma-tisable. </title> <booktitle> In: 1994 IEEE 9th. Annual Symposium on Logic in Computer Science, LICS '94, Proceedings, </booktitle> <pages> pp. 62-70, </pages> <address> Paris, France, July 1994. </address> <publisher> IEEE Computer Society Press, Los Alamitos, </publisher> <address> California, USA. </address>
Reference-contexts: It is not difficult to construct a rooted branching bisimulation for each case. 2 There is no completeness result for PA ofl ffi CRN. On the contrary, the results of <ref> (SEWELL, 1994) </ref> show that in a setting with the binary Kleene star and inaction, no finite complete axiomatization for strong bisimilarity exists. The techniques of (SEWELL, 1994) can also be used to prove that in a context with the binary Kleene star and silent actions no finite complete axiomatization exists for <p> On the contrary, the results of <ref> (SEWELL, 1994) </ref> show that in a setting with the binary Kleene star and inaction, no finite complete axiomatization for strong bisimilarity exists. The techniques of (SEWELL, 1994) can also be used to prove that in a context with the binary Kleene star and silent actions no finite complete axiomatization exists for (rooted) branching bisimilarity.
Reference: <author> TAUBNER, D. </author> <year> (1989). </year> <title> Finite Representations of CCS and TCSP Programs by Automata and Petri Nets, </title> <booktitle> Vol. 369 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: The aim of this approach is to provide the process algebra with a true-concurrency semantics. Examples of this line of research are (BEST, DE-VILLERS, AND HALL, 1992), (DEGANO, DE NICOLA, AND MONTANARI, 1988), (VAN GLABBEEK AND VAANDRAGER, 1987), (GOLTZ, 1988), (MONTANARI AND YANKELE VICH, 1994), (OLDEROG, 1987), and <ref> (TAUBNER, 1989) </ref>. In this chapter, the converse approach is pursued. A translation from Petri nets into algebraic terms is given. Other examples of this approach are (BAETEN AND BERGSTRA, 1993), (BOUDOL, ROUCAIROL, AND DE SIMONE, 1985), and (DIETZ AND SCHREIBER, 1994).
Reference: <author> VALETTE, R. </author> <year> (1979). </year> <title> Analysis of Petri Nets by Stepwise Refinements. </title> <journal> Journal of Computer and System Sciences, </journal> <volume> 18(1): </volume> <pages> 35-46. </pages>
Reference-contexts: They cover design constructs such as the addition of sequential, alternative, parallel, and iterative behavior to a workflow net. Since these rules preserve liveness and boundedness, they can also be used to construct object life cycles. In <ref> (VALETTE, 1979) </ref>, a very similar set of transformations preserving liveness and boundedness of P/T nets is presented, although the context differs from the context of (VAN DER AALST, 1997). <p> An interesting consequence of the observation that the abovementioned transformation rules preserve life-cycle properties is that, based on Theorem 4.3.7 (Characterization of object life cycles) on Page 163, they can be easily transformed into liveness-and-boundedness-preserving transformation rules on ordinary P/T nets. Recall that also (VAN DER AALST, 1997) and <ref> (VALETTE, 1979) </ref> describe a set 4.4 Case Study: A Groupware Editor 197 of liveness-and-boundedness-preserving transformation rules that, similar to the rules of this subsection, correspond to design constructs such as sequential composition, parallel composition, and iteration. <p> However, the rules presented in this subsection are far more general than the rules of (VAN DER AALST, 1997) and <ref> (VALETTE, 1979) </ref>.
Reference: <author> WEGNER, P. </author> <title> AND S.B. ZDONIK (1988). Inheritance as an Incremental Modification Mechanism or What like is and isn't like. </title> <editor> In: S. Gjessing and K. Nygaard (eds.), </editor> <booktitle> ECOOP '88, European Conference on Object-Oriented Programming, Proceedings, Vol. 322 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 55-77, </pages> <address> Oslo, Norway, August 1988. </address> <publisher> Springer-Verlag, </publisher> <address> Berlin, Germany. </address>
Reference-contexts: An aspect that plays an important role in the literature on inheritance is the so-called substitutability principle of <ref> (WEGNER AND ZDONIK, 1988) </ref>. The substitutability principle says that an object of some subclass can always be used in a context where an object of its superclass is expected.
Reference: <author> WEIJLAND, W.P. </author> <year> (1989). </year> <title> Synchrony and Asynchrony in Process Algebra. </title> <type> Ph.D. thesis, </type> <institution> University of Amsterdam, Department of Mathematics and Computer Science, Am-sterdam, The Netherlands. </institution>
Reference-contexts: In case one is interested in observable behavior only, processes with the same observable behavior, but with different internal behavior should be equal. Branching bisimilarity is an equivalence that satisfies this requirement. Branching bisimilarity was first introduced in <ref> (VAN GLABBEEK AND WEIJLAND, 1989) </ref>. The definition given in this subsection is slightly different from the original definition. In fact, it is the definition of semi-branching bisimilarity, which was first defined in (WEIJLAND, 1989, Chapter 1). <p> Branching bisimilarity is an equivalence that satisfies this requirement. Branching bisimilarity was first introduced in (VAN GLABBEEK AND WEIJLAND, 1989). The definition given in this subsection is slightly different from the original definition. In fact, it is the definition of semi-branching bisimilarity, which was first defined in <ref> (WEIJLAND, 1989, Chapter 1) </ref>. It can be shown that the two notions are equivalent in the sense that they define the same equivalence relation on processes (VAN GLABBEEK AND WEIJLAND, 1996; BASTEN, 1996). <p> The following lemma is only valid for (rooted) branching bisimulations as defined in Definition 2.2.15 on Page 11. In (BASTEN, 1996), an ex ample is given showing that it does not hold for the original definition in <ref> (VAN GLABBEEK AND WEIJLAND, 1989) </ref>. Lemma 2.2.23. The relation composition of two (rooted) branching bisimulations is a (rooted) branching bisimulation. Proof. Let p; q, and r be processes in P; let Q and R be (rooted) branching bisimulations such that pQq and qRr.

Reference: <institution> Twee praktijkstudies worden beschreven om de ontwerpmethode en de onderliggende theorie te toetsen. De belangrijkste conclusie is dat Petri netten en procesalgebra elkaar goed aanvullen, maar dat de methode en de theorie nog niet volwassen zijn. Een verdere uitbreiding van de theorie en de ontwikkeling van ondersteunde gereedschappen is een voorwaarde voor succesvolle toepassing in de praktijk. </institution>

Reference: <institution> De belangrijkste conclusie van het derde deel van dit proefschrift is dat het inspire-rend kan zijn om een enkel onderwerp in twee verschillende formalismen te bestuderen. </institution>
Reference: <editor> De formalisering van overerving van dynamisch gedrag in procesalgebra geeft een helder begrip van het concept, terwijl de formalisering in Petri netten een raamwerk oplevert dat dicht bij de praktijk staat. Er blijft echter een belangrijke uitdaging over, namelijk de in-tegratie van de notie van overerving die ontwikkeld is in dit proefschrift, </editor> <booktitle> in een volledige object-georienteerde ontwerpmethode. </booktitle>

References-found: 89

