URL: http://theory.lcs.mit.edu/~katya/toolbox.ps
Refering-URL: http://theory.lcs.mit.edu/~katya/toolbox.html
Root-URL: 
Title: A Toolbox for Proving and Maintaining Hybrid Specifications  
Author: Michael S. Branicky, Ekaterina Dolginova, and Nancy Lynch 
Address: Cambridge, MA 02139-4307 USA  
Affiliation: Dept. of Electrical Engineering and Computer Science Massachusetts Institute of Technology  
Abstract: Formal verification in computer science often takes a worst-case view towards performance and uses induction to prove specification invariants. In control theory, robust control takes a worst-case view towards performance; nominal performance proofs often use derivative information to prove invariance of specification sets. In this note, we explore a toolbox for proving (positive) invariance of state-space sets with respect to the actions of dynamical systems. The focus is on dynamical systems given by differential equations, building up to hybrid systems. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <editor> Panos Anstaklis et al., editors. </editor> <booktitle> Hybrid Systems II. </booktitle> <volume> vol. 999, </volume> <booktitle> Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <address> New York, </address> <year> 1995. </year>
Reference-contexts: 1 Introduction We are interested in the formal verification of safety and performance properties of hybrid systems <ref> [1, 8, 17] </ref>. In computer science, there is large formal verification literature (e.g., [2, 5, 9, 11, 12, 16, 19]) of discrete-dynamic systems, such as automata.
Reference: 2. <author> A. Benveniste and G. Berry, </author> <title> guest editors. </title> <journal> Proc. of the IEEE, </journal> <volume> 79(9), </volume> <year> 1991. </year> <title> Special Issue on The Synchronous Approach to Reactive and Real-Time Systems. </title>
Reference-contexts: 1 Introduction We are interested in the formal verification of safety and performance properties of hybrid systems [1, 8, 17]. In computer science, there is large formal verification literature (e.g., <ref> [2, 5, 9, 11, 12, 16, 19] </ref>) of discrete-dynamic systems, such as automata. Usually, the proofs that verify safety and performance involve the search for certain formulas which are (proven to be) invariant over the actions of the system.
Reference: 3. <author> A. Benveniste and P. Le Guernic. </author> <title> Hybrid dynamical systems theory and the signal language. </title> <journal> IEEE Transactions on Automatic Control, </journal> <volume> 35(5), </volume> <year> 1990. </year>
Reference: 4. <author> N. P. Bhatia and G. P. </author> <title> Szego. Dynamical Systems: Stability Theory and Applications, </title> <booktitle> vol. 35 of Lecture Notes in Mathematics. </booktitle> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1967. </year>
Reference-contexts: In this way, we explicitly demonstrate how our tools mesh with both computer science and control theory flavors of reasoning about hybrid systems. 2 The Basics 2.1 On Being Invariant A formal treatment of positive invariant sets for differential equations appears in Bhatia and Szego's fine book <ref> [4, pp. 306-322] </ref>. Their Corollary 3.4.22 (p. 316) follows some preliminaries. We discuss the autonomous system _x = g (x); (2) where x 2 R n and with solution denoted by .
Reference: 5. <editor> J. W. de Bakker et al., editors. </editor> <booktitle> Real-Time: Theory in Practice, vol. 600 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction We are interested in the formal verification of safety and performance properties of hybrid systems [1, 8, 17]. In computer science, there is large formal verification literature (e.g., <ref> [2, 5, 9, 11, 12, 16, 19] </ref>) of discrete-dynamic systems, such as automata. Usually, the proofs that verify safety and performance involve the search for certain formulas which are (proven to be) invariant over the actions of the system.
Reference: 6. <author> E. Dolginova and N. Lynch. </author> <title> "Safety Verification for Automated Platoon Manuev-ers: A Case Study." </title> <booktitle> In Proc. of the International Workshop on Hybrid and Real-Time Systems (HART '97), </booktitle> <address> Grenoble, France, </address> <month> March </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: Now we consider a trajectory w based on a closed interval [0; t]. Since a trajectory cannot change collided , and S is vacuously true if collided = true, we only need to consider the case where collided = false throughout w. We may 4 It can be shown <ref> [6] </ref> that the region safe-measure = max ( _x 2 ) 2 ( _x 1 ) 2 (v allow ) 2 2a min ; _x 1 + v allow _x 2 corresponds to the biggest possible safe region.
Reference: 7. <author> J. Frankel et al. </author> <title> "Robust Platoon Maneuvers for AVHS," California PATH report, UCB, 1995. </title> <type> Preprint. </type>
Reference-contexts: Then, we have an existence proof that ^s can be kept above zero. However, such a control law might not be implementable only knowing ^s. Again, l and h may be replaced by time-varying functions. 4 Platoon Merge Example-Setup 4.1 Introduction In <ref> [7] </ref>, a "robust merge platoon maneuver" is described and analyzed. There are four high-level specifications the system should meet: 1. Safety|the platoons are not supposed to collide at a relative speed greater than v allow . 2. The merge should succeed, within a particular amount of time. 3. <p> We assume the following constants: 5 - v allow 2 R 0 is the value of the allowable (read also safe or acceptable) collision velocity, a min 2 R 0 is the absolute value of the maximum emergency deceleration. The analysis in Appendix I of <ref> [7] </ref> is done in terms of vehicle velocities.
Reference: 8. <editor> R. L. Grossman et al., editors. </editor> <booktitle> Hybrid Systems, vol. 736 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <address> New York, </address> <year> 1993. </year> . 
Reference-contexts: 1 Introduction We are interested in the formal verification of safety and performance properties of hybrid systems <ref> [1, 8, 17] </ref>. In computer science, there is large formal verification literature (e.g., [2, 5, 9, 11, 12, 16, 19]) of discrete-dynamic systems, such as automata.
Reference: 9. <author> N. Halbwachs. </author> <title> Synchronous Programming of Reactive Systems. </title> <publisher> Kluwer Academic, </publisher> <address> Boston 1993. </address>
Reference-contexts: 1 Introduction We are interested in the formal verification of safety and performance properties of hybrid systems [1, 8, 17]. In computer science, there is large formal verification literature (e.g., <ref> [2, 5, 9, 11, 12, 16, 19] </ref>) of discrete-dynamic systems, such as automata. Usually, the proofs that verify safety and performance involve the search for certain formulas which are (proven to be) invariant over the actions of the system.
Reference: 10. <author> J.H. Hubbard and B.H. West. </author> <title> Differential Equations: A Dynamical Systems Approach. </title> <publisher> Springer, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: Statements for negative invariance hold replacing g by g above; invariance when both hold. 2.2 Fences that Hold Solutions The following is summarized from <ref> [10] </ref>. Consider the first-order ODE _x = f (t; x); (3) where x 2 R and with solutions x = u (t). A "fence" is some other function x = ff (t) that channels the solutions in the direction of the vector field. Definition 6. <p> A lower fence is nonporous if whenever ff (t 0 ) u (t 0 ), then ff (t) u (t) for all t &gt; t 0 ; reversing the inequalities defines nonporous for upper fences. Notes: (a) The definition of nonporous in <ref> [10] </ref> has the second inequality strict. We only require the given, weaker property. (b) Piecewise differentiable fences can be taken care of by checking that the required inequalities hold for both left and right derivatives. Theorem 7. A strong fence is nonporous. Theorem 8.
Reference: 11. <author> M. Joseph, </author> <title> editor. Formal Techniques in Real-Time and Fault-Tolerant Systems, </title> <booktitle> vol. 331 of Lecture Notes in Computer Science. </booktitle> <publisher> Springer, </publisher> <address> New York, </address> <year> 1988. </year>
Reference-contexts: 1 Introduction We are interested in the formal verification of safety and performance properties of hybrid systems [1, 8, 17]. In computer science, there is large formal verification literature (e.g., <ref> [2, 5, 9, 11, 12, 16, 19] </ref>) of discrete-dynamic systems, such as automata. Usually, the proofs that verify safety and performance involve the search for certain formulas which are (proven to be) invariant over the actions of the system.
Reference: 12. <author> N. Lynch. </author> <title> Distributed Algorithms. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Francisco, </address> <year> 1996. </year>
Reference-contexts: 1 Introduction We are interested in the formal verification of safety and performance properties of hybrid systems [1, 8, 17]. In computer science, there is large formal verification literature (e.g., <ref> [2, 5, 9, 11, 12, 16, 19] </ref>) of discrete-dynamic systems, such as automata. Usually, the proofs that verify safety and performance involve the search for certain formulas which are (proven to be) invariant over the actions of the system.
Reference: 13. <author> N. Lynch et al. </author> <title> Hybrid I/O Automata. </title> <editor> In R. Alur, T. Henzinger, and E. Sontag, editors, </editor> <booktitle> Hybrid Systems III, </booktitle> <pages> pp. 496-510, </pages> <booktitle> Lecture Notes in Computer Science, </booktitle> <volume> vol. 1066, </volume> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: Usually, the proofs that verify safety and performance involve the search for certain formulas which are (proven to be) invariant over the actions of the system. This same style can be translated, almost brute force, into dealing with hybrid systems by including both continuous and discrete system actions <ref> [13, 14, 15] </ref>. Conceptually, the solution appears clear. However, in chasing these solutions one can often get stuck by thinking of the "traces" or solutions of differential equations (intermixed with discrete steps, of course) as the entities one is to verify. <p> In the next section we review existing theory in our context. Then we develop more directly applicable tools in Section 3. In Sections 4 and 5 we solve a toy example of platoon merge safety. We first formalize the problem with the computer science model of hybrid I/O automata <ref> [13] </ref> and then prove safety using our system theoretic tools. <p> Suppose that we have verified a control law u (s) such that u (0) results in _s (t) 0. Then, if we use u (0) whenever ^s (t) L 0, we obtain invariance of s (t) 0 via an implementation relation (cf. <ref> [13] </ref>). Note: The constant L can be replaced with a function L (t) with the same effect. Bounding the Perturbed Above. Suppose that in our perturbed system, we can only measure ^s (t), but that ^s (t) 2 [s (t) l; s (t) + h]; where l, h 2 R. <p> In the remainder of this section we give a formal model of the platoon safety problem in terms of hybrid I/O automata <ref> [13] </ref>. In the next section, we prove in-variance of Equation 5, in the presence of an abstract controller, using derivative information only. 4.2 Safety Platoons . We model the system by a hybrid automaton that we call Platoons . <p> We model the system by a hybrid automaton that we call Platoons . Each platoon i has a position x i and a velocity _x i . The hybrid automaton Platoons has the following (non-e <ref> [13] </ref>) discrete actions: Input: none Output: none Internal: collide The variables are: Input: none Output: _x i 2 R 0 , i 2 f1; 2g, initially arbitrary x i 2 R 0 , i 2 f1; 2g; initially x 2 = 0 and x 1 is arbitrary collided, a Boolean, initially <p> A trajectory of the hybrid system over the interval I (or I-trajectory <ref> [13] </ref>) w is included among the set of nontrivial trajectories exactly if: 1. collided is unchanged in w. 2. _x i is an integrable function in w, i 2 f1; 2g. 3.
Reference: 14. <author> O. Maler, Z. Manna, and A. Pnueli. </author> <title> From timed to hybrid systems. </title> <editor> In de Bakker et al. </editor> <volume> [5], </volume> <pages> pp. 447-484. </pages>
Reference-contexts: Usually, the proofs that verify safety and performance involve the search for certain formulas which are (proven to be) invariant over the actions of the system. This same style can be translated, almost brute force, into dealing with hybrid systems by including both continuous and discrete system actions <ref> [13, 14, 15] </ref>. Conceptually, the solution appears clear. However, in chasing these solutions one can often get stuck by thinking of the "traces" or solutions of differential equations (intermixed with discrete steps, of course) as the entities one is to verify.
Reference: 15. <author> Z. Manna and A. Pnueli. </author> <title> Verifying hybrid systems. </title> <editor> In Grossman et al. </editor> <volume> [8], </volume> <pages> pp. 4-35. </pages>
Reference-contexts: Usually, the proofs that verify safety and performance involve the search for certain formulas which are (proven to be) invariant over the actions of the system. This same style can be translated, almost brute force, into dealing with hybrid systems by including both continuous and discrete system actions <ref> [13, 14, 15] </ref>. Conceptually, the solution appears clear. However, in chasing these solutions one can often get stuck by thinking of the "traces" or solutions of differential equations (intermixed with discrete steps, of course) as the entities one is to verify.
Reference: 16. <author> Z. Manna and A. Pnueli. </author> <title> The Temporal Logic of Reactive and Concurrent Systems. </title> <publisher> Springer, </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: 1 Introduction We are interested in the formal verification of safety and performance properties of hybrid systems [1, 8, 17]. In computer science, there is large formal verification literature (e.g., <ref> [2, 5, 9, 11, 12, 16, 19] </ref>) of discrete-dynamic systems, such as automata. Usually, the proofs that verify safety and performance involve the search for certain formulas which are (proven to be) invariant over the actions of the system.
Reference: 17. <editor> A. Pnueli and J. Sifakis, guest editors. </editor> <booktitle> Theoretical Computer Science, </booktitle> <volume> 138(1), </volume> <year> 1995. </year> <note> Special Issue on Hybrid Systems. </note>
Reference-contexts: 1 Introduction We are interested in the formal verification of safety and performance properties of hybrid systems <ref> [1, 8, 17] </ref>. In computer science, there is large formal verification literature (e.g., [2, 5, 9, 11, 12, 16, 19]) of discrete-dynamic systems, such as automata.
Reference: 18. <author> H.L. Smith. </author> <title> Monotone Dynamical Systems: An Introduction to the Theory of Competitive and Cooperative Systems. </title> <journal> Mathematical Surveys and Monographs, </journal> <volume> Vol. 41. </volume> <publisher> American Mathematical Society, </publisher> <address> Providence, RI, </address> <year> 1995. </year>
Reference-contexts: A similar theory exists for a class of ODEs in R n known as monotone systems <ref> [18] </ref>. We outline a more general approach, motivated by the well-known concept of a Lyapunov function, below. The approach is distinct from Lyapunov functions in the usual sense, e.g., the function need not be positive definite.
Reference: 19. <author> Y.-J. Wei and P.E. Caines. </author> <title> Hierarchical COCOLOG for finite machines. </title> <editor> In G. Cohen and J-P. Quadrat, editors, </editor> <booktitle> Proc. 11th INRIA International Conference on the Analysis and Optimization of Systems, vol. 199 of Lecture Notes in Control and Information Sciences, </booktitle> <pages> pp. 29-38, </pages> <address> New York, 1994. </address> <publisher> Springer. </publisher>
Reference-contexts: 1 Introduction We are interested in the formal verification of safety and performance properties of hybrid systems [1, 8, 17]. In computer science, there is large formal verification literature (e.g., <ref> [2, 5, 9, 11, 12, 16, 19] </ref>) of discrete-dynamic systems, such as automata. Usually, the proofs that verify safety and performance involve the search for certain formulas which are (proven to be) invariant over the actions of the system.
Reference: 20. <author> J. Lygeros, D. Godbole, S. Sastry. </author> <title> A verified hybrid control design for automated vehicles. </title> <type> Preprint. </type>
Reference: 21. <author> A. Puri and P. Varaiya. </author> <title> Verification of hybrid systems using abstractions. Preprint. This article was processed using the L a T E X macro package with LLNCS style 13 </title>
References-found: 21

