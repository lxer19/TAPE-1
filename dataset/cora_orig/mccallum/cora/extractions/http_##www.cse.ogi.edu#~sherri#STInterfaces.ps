URL: http://www.cse.ogi.edu/~sherri/STInterfaces.ps
Refering-URL: http://www.cse.ogi.edu/~sherri/Aritcles.html
Root-URL: http://www.cse.ogi.edu
Email: William@AppleLink.Apple.Com  
Title: Interfaces and Specifications for the Smalltalk-80 Collection Classes  
Author: William R. Cook 
Address: 20525 Mariani Avenue Cupertino CA 95014  
Affiliation: Apple Computer  
Abstract: The hierarchy of interfaces implicit in the Smalltalk-80 collection class library is computed and analyzed. The interface hierarchy is in dependent of the inheritance hierarchy because methods are frequently deleted by subclasses, and because unrelated classes sometimes implement the same messages. Specifications of the interfaces are developed, revealing subtle relationships among messages and their methods. The specifications help identify several kinds of problems in the li brary: inherited methods that violate the subclass invariant; methods that have the same name but unrelated behaviors; methods that have the same (or related) behavior but different names. This exercise demonstrates the utility of inter faces and specifications, and suggests improvements to the collection class library structure. 
Abstract-found: 1
Intro-found: 1
Reference: [America91] <author> P. </author> <title> America. A behavioral approach to subtyping objectoriented programming Lan - guages. </title> <booktitle> In Proc. of the REX School/Workshop on the Foundations of ObjectOriented Languages, </booktitle> <publisher> LNCS 489, Springer-Verlag, </publisher> <year> 1991. </year>
Reference-contexts: To address these, the behavior of methods must be analyzed . Behavioral specification tools based on pre and post conditions have also been adapted for use in objectoriented programming <ref> [America91, LW90] </ref>. Specifications have also been used in the design of the Eiffel libraries [Meyer91]. Americas techniques are used to develop specifi cations for the classes in the Smalltalk library. Several interesting issues arise while discussing the specifications. <p> The next section applies specification tools to these problems. 3 Collection Class Specification 3.1 Specification Techniques Specifications are developed for the collection class protocols to investigate further the design of the collection classes. Specification techniques available for analyzing objects include Americas pre/post condition specifications with representa tion transfer functions <ref> [America91] </ref>, Leavens simulation model with traits [LW90], and Meyers use of pre/post conditions and class invariants in Eiffel [Meyer91]. We use an version of Americas formulation, since it is the simple and direct. The specifications for or - dered collection and bag are based on America's.
Reference: [BHJLC86] <author> A. Black, N. Hutchinson, E. Jul, H. Levy and L. Carter. </author> <title> Distribution and abstract types in Emerald. </title> <journal> IEEE Transactions on Soft - ware Engineering SE13:1, </journal> <year> 1987. </year>
Reference-contexts: An interface hierarchy is a logical organization of the interfaces of each class in a library. The in ter-face hierarchy is a partial order that factors out shared interfaces, using the notion of conformance (or subtyping) for interfaces <ref> [Cardelli84, CM89, BHJLC86] </ref>. An algorithm for computing the inter - face hierarchy of a Small talk class library is described. When applied to the Smalltalk-80 Collection classes, the program produces a descrip tive picture of the sharing of messages among classes. <p> Dependencies on unim - plemented methods occur surprisingly often in the Smalltalk collection library and are a significant source of confusion in trying to understand collection behavior. 2.2 The Protocol Hierarchy The protocol hierarchy arises from the partial or - der of protocols by the conformance, or subtype, relationship <ref> [Cardelli84, CM89, BHJLC86] </ref>. Inter - face B conforms to interface A if every object that satisfies B also satisfies A. This means that the set of objects satisfying B is a subset of the set sat isfying A.
Reference: [BI8] <author> A. H. Borning and D. H. Ingalls. </author> <title> A type declaration and inference system for Small talk. </title> <booktitle> In Proc. of the ACM Symp. on Principles of Pro - gramming Languages, </booktitle> <year> 1982, </year> <pages> pp. 133141. </pages>
Reference: [BC90] <author> G. Bracha and W. Cook. </author> <title> Mixin-based inheritance. </title> <booktitle> In Proc. of ACM Conf. on Object - Oriented Programming Systems, Languages and Applications, </booktitle> <year> 1990, </year> <pages> pp. 303311. </pages>
Reference-contexts: A final one (Ordered Collection) is both Extensible and Updatable. The abstract classes in Smalltalk act as mixins for methods that depend upon a key subclass responsibility method; to express this struc ture more directly, Smalltalk would need multiple in-heritance or mixins <ref> [BC90, Moon86, Carnese84] </ref>. 7 Conclusion Interfaces are a useful tool for analyzing class li - braries. These interfaces may range in level of detail from protocols (sets of message names) to behavioral specifications. A detailed analysis of the Smalltalk collection class library demonstrates the usefulness of this approach.
Reference: [CCHO89] <author> P. Canning, W. Cook, W. Hill and W. Olthoff. </author> <title> Interfaces for strongly-typed object - oriented programming. </title> <booktitle> In Proc. of ACM Conf. on ObjectOriented Programming Systems, Languages and Applications, </booktitle> <year> 1989, </year> <pages> pp. 457467. </pages>
Reference-contexts: Yet there is growing consen sus that inheri - tance is a producers mechanism [Meyer91] that has little to do with clients use of classes. An alternative organization of the collection classes is developed by examining the interfaces supported by the collection objects <ref> [CCHO89, JF88] </ref>. A program for extracting protocols, or sets of mes - sage names, di rectly from the Smalltalk system is described.
Reference: [Cardelli84] <author> L. Cardelli. </author> <title> A semantics of multiple inheritance. Semantics of Data Types , LNCS 173, </title> <publisher> Springer-Verlag, </publisher> <year> 1984, </year> <pages> pp. 5168. </pages>
Reference-contexts: An interface hierarchy is a logical organization of the interfaces of each class in a library. The in ter-face hierarchy is a partial order that factors out shared interfaces, using the notion of conformance (or subtyping) for interfaces <ref> [Cardelli84, CM89, BHJLC86] </ref>. An algorithm for computing the inter - face hierarchy of a Small talk class library is described. When applied to the Smalltalk-80 Collection classes, the program produces a descrip tive picture of the sharing of messages among classes. <p> Dependencies on unim - plemented methods occur surprisingly often in the Smalltalk collection library and are a significant source of confusion in trying to understand collection behavior. 2.2 The Protocol Hierarchy The protocol hierarchy arises from the partial or - der of protocols by the conformance, or subtype, relationship <ref> [Cardelli84, CM89, BHJLC86] </ref>. Inter - face B conforms to interface A if every object that satisfies B also satisfies A. This means that the set of objects satisfying B is a subset of the set sat isfying A.
Reference: [Carnese84] <author> D. J. Carnese. </author> <title> Multiple inheritance in contemporary programming languages. </title> <institution> MIT Lab for Computer Science TR328, </institution> <year> 1984. </year>
Reference-contexts: A final one (Ordered Collection) is both Extensible and Updatable. The abstract classes in Smalltalk act as mixins for methods that depend upon a key subclass responsibility method; to express this struc ture more directly, Smalltalk would need multiple in-heritance or mixins <ref> [BC90, Moon86, Carnese84] </ref>. 7 Conclusion Interfaces are a useful tool for analyzing class li - braries. These interfaces may range in level of detail from protocols (sets of message names) to behavioral specifications. A detailed analysis of the Smalltalk collection class library demonstrates the usefulness of this approach.
Reference: [CHC90] <author> W. Cook, W. Hill and P. Canning. </author> <title> Inheritance is not subtyping. </title> <booktitle> In Proc. of the ACM Symp. on Principles of Programming Languages, </booktitle> <year> 1990, </year> <pages> pp. 125135. </pages>
Reference-contexts: This is a con crete illustration of the difference, even at a syn tactic level, between inheritance and conformance <ref> [CHC90, Syn - der86] </ref>. There are two cases where the hierarchy and protocol hierarchies are in direct conflict: Dictionary and SortedCollection. Dictionary inherits from Set but its protocol does not conform to Set s. This is because Dictionary cancels several of Sets methods.
Reference: [LW90] <author> G. T. Leavens and W. E. Weihl. </author> <title> Reasoning about objectoriented programs that use subtypes. </title> <booktitle> In Proc. of ACM Conf. on Object-Oriented Programming Systems, Languages and Applications, </booktitle> <year> 1990, </year> <pages> pp. 212224. </pages>
Reference-contexts: To address these, the behavior of methods must be analyzed . Behavioral specification tools based on pre and post conditions have also been adapted for use in objectoriented programming <ref> [America91, LW90] </ref>. Specifications have also been used in the design of the Eiffel libraries [Meyer91]. Americas techniques are used to develop specifi cations for the classes in the Smalltalk library. Several interesting issues arise while discussing the specifications. <p> Specification techniques available for analyzing objects include Americas pre/post condition specifications with representa tion transfer functions [America91], Leavens simulation model with traits <ref> [LW90] </ref>, and Meyers use of pre/post conditions and class invariants in Eiffel [Meyer91]. We use an version of Americas formulation, since it is the simple and direct. The specifications for or - dered collection and bag are based on America's.
Reference: [CM89] <author> L. Cardelli and J. C. Mitchell. </author> <note> Operations on records. DEC Systems Research Center Technical Note #48, </note> <year> 1989. </year>
Reference-contexts: An interface hierarchy is a logical organization of the interfaces of each class in a library. The in ter-face hierarchy is a partial order that factors out shared interfaces, using the notion of conformance (or subtyping) for interfaces <ref> [Cardelli84, CM89, BHJLC86] </ref>. An algorithm for computing the inter - face hierarchy of a Small talk class library is described. When applied to the Smalltalk-80 Collection classes, the program produces a descrip tive picture of the sharing of messages among classes. <p> Dependencies on unim - plemented methods occur surprisingly often in the Smalltalk collection library and are a significant source of confusion in trying to understand collection behavior. 2.2 The Protocol Hierarchy The protocol hierarchy arises from the partial or - der of protocols by the conformance, or subtype, relationship <ref> [Cardelli84, CM89, BHJLC86] </ref>. Inter - face B conforms to interface A if every object that satisfies B also satisfies A. This means that the set of objects satisfying B is a subset of the set sat isfying A.
Reference: [GR83] <author> A. Goldberg and D. Robson. </author> <title> Smalltalk-80: </title> <booktitle> the language and its implementation . Addi son-Wesley, </booktitle> <year> 1983. </year>
Reference-contexts: 1 Introduction The Smalltalk-80 class library <ref> [GR83] </ref> is a significant example of objectoriented design. The library is the product of at least ten years of development and evolution. It encompasses classes for data structures, graphics and window management, pro - gram development and compilation. <p> An interface is a description of the legal operations on an object. The level of description may vary from names of supported messages to behavioral specifi - cation. For Smalltalk <ref> [GR83] </ref>, a commonly used form of interface is the protocol, a simple set of operation names. The operation names are called selectors, which list the colon-terminated ar gument keyword names of the message. The in stances of a given class share the same protocol [JF88].
Reference: [Graver89] <author> J. Graver. </author> <title> Type-checking and type-inference for objectoriented programming languages. </title> <type> Ph.D. Thesis, </type> <institution> University of Illinois, </institution> <year> 1989. </year>
Reference: [JGZ88] <author> R. Johnson, J. Graver and L. Zurawski. </author> <title> TS: an optimizing compiler for Small talk. </title> <booktitle> In Proc. of ACM Conf. on ObjectOriented Programming Systems, Languages and Applications , 1988. </booktitle>
Reference: [Johnson86] <author> R. Johnson. </author> <title> Type-checking Small - talk. </title> <booktitle> In Proc. of ACM Conf. on ObjectOriented Programming Systems, Languages and Applications, </booktitle> <year> 1986, </year> <pages> pp. 315321. </pages>
Reference: [JF88] <author> R. Johnson and B. Foote. </author> <title> Designing reusable classes. </title> <journal> Journal of ObjectOriented Programming , June/July 1988, </journal> <pages> pp. 2235. </pages>
Reference-contexts: Yet there is growing consen sus that inheri - tance is a producers mechanism [Meyer91] that has little to do with clients use of classes. An alternative organization of the collection classes is developed by examining the interfaces supported by the collection objects <ref> [CCHO89, JF88] </ref>. A program for extracting protocols, or sets of mes - sage names, di rectly from the Smalltalk system is described. <p> For Smalltalk [GR83], a commonly used form of interface is the protocol, a simple set of operation names. The operation names are called selectors, which list the colon-terminated ar gument keyword names of the message. The in stances of a given class share the same protocol <ref> [JF88] </ref>. A rough cut at extracting the protocol of ob jects in a class may be computed by forming the union of all the selectors for methods defined by the class and its superclasses. <p> Some additional checks, like the one for variable classes, may be necessary in different versions of Smalltalk to handle special cases, like primitives, and operations on the class Object. A final complication arises from the conven - tional use of abstract classes <ref> [JF88] </ref>. These classes include methods that return an error indicating they should be implemented by subclasses. These key methods are identified in the same way as the canceling methods discussed above. But other methods typically depend upon the key subclass responsibility methods.
Reference: [LTP86] <author> W. R. LaLonde, D. A. Thomas and J. R. Pugh. </author> <title> An exemplar based Small talk. </title> <booktitle> In Proc. of ACM Conf. on ObjectOriented Programming Systems, Languages and Applications , 1986, </booktitle> <pages> pp. 322330. </pages>
Reference: [Meyer91] <author> B. Meyer. </author> <title> Lessons from the design of the Eiffel libraries CACM 33:9 (September 1991), </title> <journal> pp. </journal> <volume> 6884. </volume>
Reference-contexts: The inheritance structure is used to document the classes and is presented to users as an aid to understanding the li - brary. Yet there is growing consen sus that inheri - tance is a producers mechanism <ref> [Meyer91] </ref> that has little to do with clients use of classes. An alternative organization of the collection classes is developed by examining the interfaces supported by the collection objects [CCHO89, JF88]. <p> To address these, the behavior of methods must be analyzed . Behavioral specification tools based on pre and post conditions have also been adapted for use in objectoriented programming [America91, LW90]. Specifications have also been used in the design of the Eiffel libraries <ref> [Meyer91] </ref>. Americas techniques are used to develop specifi cations for the classes in the Smalltalk library. Several interesting issues arise while discussing the specifications. In some cases, methods are being inherited that should be canceled because they violate sub class invariants. <p> For ex ample, the class Extensible-Collection has only add: (and addAll: which de - pends upon it). The protocols below Extensible-Collection represent those collections that can grow in size. These protocols correspond to the bounded, or resizable, storage forms in the Eiffel data structure library <ref> [Meyer91] </ref>. Abstract protocols also arise from deletion of methods during inheritance. When messages are canceled from the subclass protocol as discussed in section 2.1, the subclass protocol does not conform to its superclasss. <p> Specification techniques available for analyzing objects include Americas pre/post condition specifications with representa tion transfer functions [America91], Leavens simulation model with traits [LW90], and Meyers use of pre/post conditions and class invariants in Eiffel <ref> [Meyer91] </ref>. We use an version of Americas formulation, since it is the simple and direct. The specifications for or - dered collection and bag are based on America's.
Reference: [Meyer87] <author> B. Meyer. </author> <title> ObjectOriented Software Construction. </title> <publisher> Prentice-Hall, </publisher> <year> 1987. </year>
Reference: [Moon86] <author> D. A. Moon. </author> <title> Objectoriented pro - gramming with Flavors. </title> <booktitle> In Proc. of ACM Conf. on ObjectOriented Programming Systems, Languages and Applications, </booktitle> <year> 1986, </year> <pages> pp. 18. </pages>
Reference-contexts: A final one (Ordered Collection) is both Extensible and Updatable. The abstract classes in Smalltalk act as mixins for methods that depend upon a key subclass responsibility method; to express this struc ture more directly, Smalltalk would need multiple in-heritance or mixins <ref> [BC90, Moon86, Carnese84] </ref>. 7 Conclusion Interfaces are a useful tool for analyzing class li - braries. These interfaces may range in level of detail from protocols (sets of message names) to behavioral specifications. A detailed analysis of the Smalltalk collection class library demonstrates the usefulness of this approach.
Reference: [Synder86] <author> A. Snyder. </author> <booktitle> Encapsulation and inheri - tance in objectoriented programming languages. In Proc. of ACM Conf. on ObjectOriented Pro - gramming Systems, Languages and Applications , 1986, </booktitle> <pages> pp. 3845. </pages>

References-found: 20

