URL: http://www.cs.dartmouth.edu/~beej/research/papers/ns_to_ted.ps
Refering-URL: http://www.cs.dartmouth.edu/~beej/research/pubs.html
Root-URL: http://www.cs.dartmouth.edu
Title: PARALLEL SIMULATION OF TCP/IP USING TeD  
Author: Brian J. Premore David M. Nicol 
Address: 6211 Sudikoff Laboratory  Hanover, New Hampshire 03755-3510, U.S.A.  
Affiliation: Department of Computer Science  Dartmouth College  
Abstract: We are developing a parallel simulation framework for large-scale network simulation. An important component of this work is the development of a TCP/IP model library. TCP/IP experts at LBNL have already developed the ns simulator for investigation of protocol variants. ns is a flexible and easy-to-use tool, but its construction thwarts high performance simulation of large scale networks. In order to model TCP/IP as accurately as does ns but still provide high performance, we are transforming ns source code into the Telecommunications Description Language (TeD), a tool that brings automated parallelization to network simulation. This paper describes the issues that arose in the course of this transformation. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Bhasker, J. </author> <year> 1996. </year> <title> A VHDL Primer. </title> <publisher> Prentice Hall. </publisher>
Reference-contexts: These channels are mapped to define the (static) network topology. The object-oriented structure of TeD also allows for entities to contain components which are themselves entities. For example, node entities might have an array of agent sub-entities which do the actual implementation of TCP. TeD follows the VHDL <ref> (Bhasker 1996) </ref> language in that for each entity, at least one architecture must be defined which specifies that entity's behavioral model. The architecture defines the state of the entity (variables to be used during the simulation), and its behavior (which includes how it will respond to events that it receives).
Reference: <author> Das, S., R. Fujimoto, K. Panesar, D. Allison, and M. Hybinette. </author> <year> 1994. </year> <title> GTW: A Time Warp system for shared memory multiprocessors. </title> <booktitle> In Proceedings of the 1994 Winter Simulation Conference, </booktitle> <editor> ed. J. </editor> <address> D. </address>
Reference: <author> Tew, S. Manivannan, D. A. Sadowski, A. F. Seila, </author> <month> 1332-1339. </month>
Reference: <author> Perumalla, K., A. Ogielski, and R. Fujimoto. </author> <year> 1996. </year> <title> MetaTeD|A meta language for modeling telecommunication networks. </title> <institution> GIT-CC-96-32, College of Computing, Georgia Institute of Technology, At-lanta, Georgia. </institution>
Reference: <author> Perumalla, K., and R. Fujimoto. </author> <year> 1996. </year> <title> A C++ instance of TeD. </title> <institution> College of Computing, Georgia Institute of Technology, Atlanta, Georgia. </institution>
Reference: <author> Perumalla, K., and R. Fujimoto. </author> <year> 1996. </year> <title> GTW++| An object-oriented interface in C++ to the Georgia Tech Time Warp system. </title> <institution> GIT-CC-96-09, College of Computing, Georgia Institute of Technology, At-lanta, Georgia. </institution>
Reference: <author> Premore, B., D. Nicol, and X. Liu. </author> <year> 1996. </year> <title> A critique of the Telecommunications Description language (TeD). </title> <institution> PCS-TR96-299, Department of Computer Science, Dartmouth College, Hanover, Hew Hampshire. </institution> <note> AUTHOR BIOGRAPHIES BRIAN J. PREMORE received the B.S. degree in Mathematics and Computer Science from Clarkson University in 1995. Since then he has been a Ph.D. </note> <institution> student in Computer Science at Dartmouth College, </institution> <note> where he is working on parallel simulation. </note>
Reference-contexts: A's call to B is nested inside of an if conditional, switch, or a loop, then A's process will have to be rewritten to hoist the new call to wait out of the condition|TeD permits calls to wait statements only at the lowest level of nesting in a process's code <ref> (Premore, Nicol, and Liu 1996) </ref>. Such a transformation is dependent on the specifics of the process code. The introduction of an acknowledgment channel will not work if method B is called by more than one method, because the recipient of the acknowledgment must be unique.

References-found: 7

