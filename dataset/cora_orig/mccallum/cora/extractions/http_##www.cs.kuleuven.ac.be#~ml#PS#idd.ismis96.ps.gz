URL: http://www.cs.kuleuven.ac.be/~ml/PS/idd.ismis96.ps.gz
Refering-URL: http://www.cs.kuleuven.ac.be/~hendrik/publications.html
Root-URL: 
Email: email fHendrik.Blockeel,Luc.DeRaedtg@cs.kuleuven.ac.be  
Title: Inductive Database Design  
Author: Hendrik Blockeel and Luc De Raedt 
Keyword: Logic for Artificial Intelligence, Learning and Knowledge Dis covery, Database Design, Inductive Logic Programming  
Address: Celestijnenlaan 200A, B-3001 Heverlee, Belgium  
Affiliation: Department of Computer Science, Katholieke Universiteit Leuven  
Abstract: When designing a (deductive) database, the designer has to decide for each predicate (or relation) whether it should be defined extensionally or intensionally, and what the definition should look like. An intelligent system is presented to assist the designer in this task. It starts from an example database in which all predicates are defined extensionally. It then tries to compact the database by transforming extensionally defined predicates into intensionally defined ones. The intelligent system employs techniques from the area of inductive logic programming. 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> L. De Raedt and M. Bruynooghe. </author> <title> A theory of clausal discovery. </title> <booktitle> In Proceedings of the 13th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pages 1058-1063. </pages> <publisher> Morgan Kaufmann, </publisher> <year> 1993. </year>
Reference-contexts: The paper is organised as follows: in Section 2, we review some concepts of deductive databases and logic programming, in Section 3, we review the inductive logic programming system Claudien <ref> [1, 8] </ref>, which will be adapted for use in our inductive database design tool, in Section 4, we address the problem of finding intensional definitions for predicates, in Section 5, we present an experiment, and finally, in Section 6, we conclude and touch upon related work. 2 Logic Programming Concepts and <p> If the query finitely fails, the clause is valid, otherwise it is invalid. 3 Inductive Logic Programming In this section, we give a brief overview of the inductive logic programming system Claudien <ref> [1, 8, 2, 3] </ref>. The Claudien system starts from a definite clause theory T and a language L (which is a set of well-formed clauses) and finds a set of maximally general clauses that are valid in the given theory. Definition 7.
Reference: 2. <author> L. De Raedt and L. Dehaspe. </author> <note> Clausal discovery. Submitted. </note>
Reference-contexts: If the query finitely fails, the clause is valid, otherwise it is invalid. 3 Inductive Logic Programming In this section, we give a brief overview of the inductive logic programming system Claudien <ref> [1, 8, 2, 3] </ref>. The Claudien system starts from a definite clause theory T and a language L (which is a set of well-formed clauses) and finds a set of maximally general clauses that are valid in the given theory. Definition 7. <p> This process continues until Q is empty and all relevant parts of the search-space have been considered. It should be mentioned that Claudien employs several techniques to prune and optimize the search, cf. <ref> [2] </ref>. Q := fmax (L)g H := ; while Q 6= ; do delete c from Q if c is valid in T then add c to H else add (c) to Q Fig. 1. <p> The Claudien algorithm (simplified) To specify the set of clauses to consider, i.e. the language bias, Claudien employs so-called dlab templates (cf. <ref> [2, 4] </ref>). For instance: dlab_template ('Q (X,Y) &lt;-- 1-4:[P (X), P (Y), Q (X,Y), Q (Y,X)]'). dlab_var ('P', 1-1, [male, female]). dlab_var ('Q', 1-1, [parent, father, mother]). specifies that clauses should have one binary predicate in the head, and one to four predicates in the body.
Reference: 3. <author> L. De Raedt and S. Dzeroski. </author> <title> First order jk-clausal theories are PAC-learnable. </title> <journal> Artificial Intelligence, </journal> <volume> 70 </volume> <pages> 375-392, </pages> <year> 1994. </year>
Reference-contexts: If the query finitely fails, the clause is valid, otherwise it is invalid. 3 Inductive Logic Programming In this section, we give a brief overview of the inductive logic programming system Claudien <ref> [1, 8, 2, 3] </ref>. The Claudien system starts from a definite clause theory T and a language L (which is a set of well-formed clauses) and finds a set of maximally general clauses that are valid in the given theory. Definition 7.
Reference: 4. <author> L. Dehaspe and L. De Raedt. DLAB: </author> <title> a declarative language bias formalism. This volume. </title>
Reference-contexts: The Claudien algorithm (simplified) To specify the set of clauses to consider, i.e. the language bias, Claudien employs so-called dlab templates (cf. <ref> [2, 4] </ref>). For instance: dlab_template ('Q (X,Y) &lt;-- 1-4:[P (X), P (Y), Q (X,Y), Q (Y,X)]'). dlab_var ('P', 1-1, [male, female]). dlab_var ('Q', 1-1, [parent, father, mother]). specifies that clauses should have one binary predicate in the head, and one to four predicates in the body.
Reference: 5. <author> S. Muggleton and L. De Raedt. </author> <title> Inductive logic programming : Theory and methods. </title> <journal> Journal of Logic Programming, </journal> <volume> 19,20:629-679, </volume> <year> 1994. </year>
Reference-contexts: We will also say that c 1 -subsumes c 2 (cf. Plotkin [6]). As shown by Plotkin, -subsumption induces a partial order on the set of all possible clauses, which is exploited by many inductive logic programming systems <ref> [5] </ref>. We can now illustrate the Claudien setting.
Reference: 6. <author> G. Plotkin. </author> <title> A note on inductive generalization. </title> <booktitle> In Machine Intelligence, </booktitle> <volume> volume 5, </volume> <pages> pages 153-163. </pages> <publisher> Edinburgh University Press, </publisher> <year> 1970. </year>
Reference-contexts: Definition 7. Clause c 1 is more general than clause c 2 iff there exists a substi-tution such that c 1 c 2 (where clauses are seen as sets of literals). We will also say that c 1 -subsumes c 2 (cf. Plotkin <ref> [6] </ref>). As shown by Plotkin, -subsumption induces a partial order on the set of all possible clauses, which is exploited by many inductive logic programming systems [5]. We can now illustrate the Claudien setting.
Reference: 7. <author> E. Sommer. </author> <title> Rulebase stratification: an approach to theory restructuring. </title> <editor> In S. Wrobel, editor, </editor> <booktitle> Proceedings of the 4th International Workshop on Inductive Logic Programming, volume 237 of GMD-Studien, </booktitle> <pages> pages 377-390, </pages> <address> Sankt Augustin, Ger-many, </address> <year> 1994. </year> <institution> Gesellschaft fur Mathematik und Datenverarbeitung MBH. </institution>
Reference-contexts: There should be more opportunities to interfere with the design process. integrity constraints: we believe that the described techniques can also be used to find semantic integrity constraints for the database Finally, we want to mention the work of Sommer <ref> [7] </ref>, which is related to ours in the sense that both consider the problem of restructuring a knowledge base. The main difference is that in [7], existing rules are restructured, while our system can start from a purely extensional database. <p> that the described techniques can also be used to find semantic integrity constraints for the database Finally, we want to mention the work of Sommer <ref> [7] </ref>, which is related to ours in the sense that both consider the problem of restructuring a knowledge base. The main difference is that in [7], existing rules are restructured, while our system can start from a purely extensional database.
Reference: 8. <author> W. Van Laer, L. Dehaspe, and L. De Raedt. </author> <title> Applications of a logical discovery engine. </title> <booktitle> In Proceedings of the AAAI Workshop on Knowledge Discovery in Databases, </booktitle> <pages> pages 263-274, </pages> <year> 1994. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The paper is organised as follows: in Section 2, we review some concepts of deductive databases and logic programming, in Section 3, we review the inductive logic programming system Claudien <ref> [1, 8] </ref>, which will be adapted for use in our inductive database design tool, in Section 4, we address the problem of finding intensional definitions for predicates, in Section 5, we present an experiment, and finally, in Section 6, we conclude and touch upon related work. 2 Logic Programming Concepts and <p> If the query finitely fails, the clause is valid, otherwise it is invalid. 3 Inductive Logic Programming In this section, we give a brief overview of the inductive logic programming system Claudien <ref> [1, 8, 2, 3] </ref>. The Claudien system starts from a definite clause theory T and a language L (which is a set of well-formed clauses) and finds a set of maximally general clauses that are valid in the given theory. Definition 7.
References-found: 8

