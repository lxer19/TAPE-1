URL: ftp://ftp.cs.virginia.edu/pub/techreports/CS-95-09.ps.Z
Refering-URL: ftp://ftp.cs.virginia.edu/pub/techreports/README.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Isotach Networks  
Author: Paul F. Reynolds, Jr. Craig Williams Raymond R. Wagner, Jr. 
Abstract: We introduce a class of networks called isotach networks designed to reduce the cost of concurrency control in asynchronous computations. Isotach networks support several properties important to the correct execution of parallel and distributed computations: atomi-city, causal message delivery, sequential consistency, and memory coherence in systems in which shared data can replicate and migrate. They allow processes to execute atomic actions without locks and to pipeline memory accesses without sacrificing sequential consistency. Iso-tach networks can be implemented in a wide variety of configurations, including NUMA (nonuniform memory access) multiprocessors and distributed as well as parallel systems. Networks that implement isotach time systems are characterized not by their topology, but by the guarantees they make about the relative order in which messages appear to be delivered. These guarantees are expressed in logical time, not physical time. Physical time guarantees would be prohibitively expensive, whereas logical time guarantees can be enforced cheaply, using purely local knowledge, and yet are powerful enough to support efficient techniques for coordinating asynchronously executing processes. Empirical and analytic studies of isotach systems show that they outperform conventional systems under realistic workloads, in some cases by an order of magnitude or more. hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> B. Awerbuch, </author> <title> ``Complexity of Network Synchronization'', </title> <journal> J. ACM 32, </journal> <month> 4 (October </month> <year> 1985), </year> <pages> 804-823. </pages>
Reference-contexts: Several networks have been pro-posed that can in retrospect be classified as isotach networks. The alpha-synchronizer network proposed by Awerbuch to execute SIMD graph algorithms on asynchronous networks <ref> [1] </ref> and a network proposed to support barrier synchronization [2, 10] can be viewed as isotach networks that maintain a logical time system in which each logical time consists of the pulse component only.
Reference: [2] <author> Y. Birk, P. B. Gibbons, J. L. C. Sanz and D. Soroker, </author> <title> ``A Simple Mechanism for Efficient Barrier Synchronization in MIMD Machines'', </title> <type> Tech. Rep. RJ 7078, </type> <institution> IBM, </institution> <month> October </month> <year> 1989. </year>
Reference-contexts: Several networks have been pro-posed that can in retrospect be classified as isotach networks. The alpha-synchronizer network proposed by Awerbuch to execute SIMD graph algorithms on asynchronous networks [1] and a network proposed to support barrier synchronization <ref> [2, 10] </ref> can be viewed as isotach networks that maintain a logical time system in which each logical time consists of the pulse component only.
Reference: [3] <author> K. P. Birman and T. A. Joseph, </author> <title> ``Reliable Communication in the Presence of Failures'', </title> <journal> ACM Trans. Computer Systems 5, </journal> <volume> 1 (February, </volume> <year> 1987), </year> <pages> 47-76. </pages>
Reference-contexts: Existing causal multicast protocols for non-bus-based systems <ref> [3, 4, 22, 31] </ref> require multiple message rounds. Isotach networks support a single round multicast [34]. g Totally Ordered Multicasts A totally ordered multicast is a multicast that is received in a consistent order at all processes in the system.
Reference: [4] <author> K. P. Birman, A. Schiper and P. Stephenson, </author> <title> ``Lightweight Causal and Atomic Group Multicast'', </title> <journal> ACM TOCS, </journal> <month> August </month> <year> 1991, </year> <pages> 272-314. </pages>
Reference-contexts: A logical time system that extends Lamport's by requiring a fi b t (a) &lt; t (b) has been used as the basis for a package of communication primitives for distributed computation <ref> [4] </ref>. After defining his logical time system, Lamport gives a simple distributed algorithm that implements it. Each process has its own logical clock, a variable that records the time assigned to the last local event. <p> message delivery shared buses and a class of tree-structured networks called race-free networks [18] are not applicable to as wide a range of topologies. 10 The causally ordered multicast is a generalization of causal message delivery to multicasts that has been found to be useful in distributed MBM programming applications <ref> [4, 26] </ref>. Existing causal multicast protocols for non-bus-based systems [3, 4, 22, 31] require multiple message rounds. Isotach networks support a single round multicast [34]. g Totally Ordered Multicasts A totally ordered multicast is a multicast that is received in a consistent order at all processes in the system. <p> Existing causal multicast protocols for non-bus-based systems <ref> [3, 4, 22, 31] </ref> require multiple message rounds. Isotach networks support a single round multicast [34]. g Totally Ordered Multicasts A totally ordered multicast is a multicast that is received in a consistent order at all processes in the system.
Reference: [5] <author> K. Birman, </author> <title> ``A Response to Cheriton and Skeen's Criticism of Causal and Totally Ordered Communication'', OS Review 28, </title> <month> 1 (January </month> <year> 1994), </year> <pages> 11-21. </pages>
Reference: [6] <author> K. Chandy and J. Misra, </author> <title> ``Distributed Simulation: A Case Study in Design and Verification of Distributed Programs'', </title> <journal> IEEE TRANS on Software Engineering 5, </journal> <month> 5 (September </month> <year> 1979), </year> <pages> 440-452. </pages>
Reference-contexts: Latency and Throughput. The principal cost of implementing isotach logical time by means of the model network algorithm is the additional waiting implied by the requirement that switches route messages in route-tag order. One way to reduce this waiting is by using ghosts. A ghost [23] or null message <ref> [6] </ref> is a copy of a message with a control bit set to indicate it is not a real message. When a switch sends an operation on one output it sends a ghost with the same route-tag on each of its other output (s).
Reference: [7] <author> D. R. Cheriton and D. Skeen, </author> <title> ``Understanding the Limitations of Causally and Totally Ordered Communication'', OS Review, </title> <booktitle> 14th ACM Symp. on OS Principles, </booktitle> <month> December </month> <year> 1993, </year> <pages> 44-57. </pages>
Reference: [8] <author> K. P. Eswaran, J. N. Gray, R. A. Lorie and I. L. Traiger, </author> <title> ``The Notions of Consistency and Predicate Locks in a Database System'', </title> <journal> Comm. ACM 19, </journal> <month> 11 (November </month> <year> 1976), </year> <pages> 624-633. </pages>
Reference-contexts: of an isotach network and a conventional network relate? (2) Under what conditions, if any, does an isotach network make up for an expected loss in raw power through more efficient support of synchronization? The simulation compares isotach systems to more conventional systems that enforce atomicity with two-phase locking (2PL) <ref> [8] </ref> and that enforce sequential consistency by restricting pipelin-ing. We ran the simulations under a variety of synthetic workloads to capture different atomicity, sequencing, and data dependence constraints among operations. We simulated four networks: two conventional (C1, C2) and two isotach (I1, I2).
Reference: [9] <author> K. Gharachorloo, et al., </author> <title> ``Performance Evaluation of Memory Consistency Models for Shared-Memory Multiprocessors'', </title> <booktitle> 4th ASPLOS, </booktitle> <month> April, </month> <year> 1991, </year> <pages> 245-257. </pages>
Reference-contexts: Since pipelining is an important way to decrease effective memory latency, this solution is expensive. The high cost of enforcing sequential consistency has led to extensive exploration of weaker memory consistency models, e.g., <ref> [9, 30] </ref>. These weaker models are harder to reason about and still impose significant restrictions on pipe-lining, but make sense given the cost of maintaining sequential consistency in a conventional system. In an isotach system, processes can pipeline memory operations without violating sequential consistency.
Reference: [10] <author> P. B. Gibbons, </author> <title> ``The Asynchronous PRAM: A Semi-Synchronous Model for Shared Memory MIMD Machines'', </title> <type> 89-062, ICSI, </type> <institution> Berkeley, California, </institution> <month> December, </month> <year> 1989. </year>
Reference-contexts: Several networks have been pro-posed that can in retrospect be classified as isotach networks. The alpha-synchronizer network proposed by Awerbuch to execute SIMD graph algorithms on asynchronous networks [1] and a network proposed to support barrier synchronization <ref> [2, 10] </ref> can be viewed as isotach networks that maintain a logical time system in which each logical time consists of the pulse component only.
Reference: [11] <author> Y. Jenq, </author> <title> ``Performance Analysis of a Packet Switch Based on Single-Buffered Banyan Network'', </title> <journal> IEEE Journal on Selected Areas in Communications 1, </journal> <month> 6 (December </month> <year> 1983), </year> <pages> 1014-1021. </pages>
Reference-contexts: That work led to the discovery of novel modelling methods that will be presented in a future paper. We outline the approach and results we obtained here. Interested readers are referred to [32] for a more detailed presentation. We extended a mean value analysis technique first presented by Jenq <ref> [11] </ref> for banyon-like MIN's. Our extensions enabled the modelling of 1) routing dependencies, 2) a measure of bandwidth we have called information flow, and 3) message types.
Reference: [12] <author> M. J. Karol, M. G. Hluchyj and S. P. Morgan, </author> <title> ``Input Versus Output Queueing on a Space-Division Packet Switch'', </title> <journal> IEEE Transactions on Communications 35, </journal> <month> 12 (December </month> <year> 1987), </year> <pages> 1347-1356. </pages>
Reference-contexts: Buffers placed internally, as shown in Fig. 3 (b), reduce HOL blocking <ref> [12, 15] </ref>. Unless the internal buffers are full, a message in a switch with internal buffers blocks other messages only if they are contending for the same output.
Reference: [13] <author> D. E. Knuth, </author> <title> in Fundamental Algorithms, vol. 3, Sorting and Searching , Addison-Wesley, </title> <booktitle> 1973, </booktitle> <pages> 397. </pages>
Reference-contexts: A warm-spot traffic model has several warm variables instead of a single hot variable and is more realistic than either the uniform or hot-spot traffic models. The warm-traffic model we use is based on the standard 80/20 rule (see e.g. <ref> [13] </ref>), modified to lessen contention for the warmest variables [28]. Fig. 8 shows the effect of varying atomic action size under a warm-traffic model. Delay is reported in the same way as in series C. The performance of I1 and I2 is similar to their series C performance.
Reference: [14] <author> C. P. Kruskal, L. Rudolph and M. Snir, </author> <title> ``Efficient Synchronization on Multiprocessors with Shared Memory'', </title> <journal> ACM Trans. Prog. Lang. and Systems 10, </journal> <month> 4 (October </month> <year> 1988), </year> <pages> 579-601. </pages>
Reference-contexts: and allow processes to read and write multiple shared cache blocks atomically without invalidating the copies held by other processes or otherwise obtaining exclusive rights to the accessed blocks. g Combining Combining is a technique for maintaining good performance in the presence of multiple concurrent accesses to the same variable <ref> [14] </ref>.
Reference: [15] <author> M. Kumar and J. R. </author> <title> Jump, ``Performance Enhancement of Buffered Delta Networks Using Crossbar Switches and Multiple Links'', </title> <journal> Journal of Parallel and Distributed Computing 1 (1984), </journal> <pages> 81-103. </pages>
Reference-contexts: Buffers placed internally, as shown in Fig. 3 (b), reduce HOL blocking <ref> [12, 15] </ref>. Unless the internal buffers are full, a message in a switch with internal buffers blocks other messages only if they are contending for the same output.
Reference: [16] <author> L. Lamport, </author> <title> ``Time, Clocks, and the Ordering of Events in a Distributed System'', </title> <journal> Comm. ACM 21, </journal> <month> 7 (July </month> <year> 1978), </year> <pages> 558-565. </pages>
Reference-contexts: Isotach logical time is an extension of the logical time system defined by Lamport in his classic paper on ordering events in distributed systems <ref> [16] </ref>. In Lamport's system, the events of interest are the sending and receiving of messages. <p> Since each variable is accessed by the same operations in the same order in both executions, the executions are equivalent. In discussing a similar pair of diagrams, Lamport provides an alternative way to view the equivalence among the executions in the figure <ref> [16] </ref>: Without introducing the concept of time into the system (which would require introducing physical clocks), there is no way to decide which of these pictures is the better representation.
Reference: [17] <author> L. Lamport, </author> <title> ``How to Make a Multiprocessor Computer That Correctly Executes Multiprocessor Programs'', </title> <journal> IEEE Trans. on Computers 28 (1979), </journal> <pages> 690-691. 31 </pages>
Reference-contexts: An execution is sequentially consistent if operations are executed in an order consistent with the order specified by each individual process's sequential program <ref> [17] </ref>. This property is so basic it is easily taken for granted, but it is expensive to enforce in non-bus-based systems because stochastic delays within the network can cause operations to be received in an order different from the order in which they were sent.
Reference: [18] <author> A. Landin, E. Hagersten and S. Haridi, </author> <title> ``Race-Free Interconnection Networks and Multiprocessor Consistency'', </title> <booktitle> Proc. 18th ISCA, </booktitle> <year> 1991, </year> <pages> 106-115. </pages>
Reference-contexts: Any isotach network in which logical distance is consistent with the triangle inequality implements causal message delivery [34]. The networks previously shown to implement causal message delivery shared buses and a class of tree-structured networks called race-free networks <ref> [18] </ref> are not applicable to as wide a range of topologies. 10 The causally ordered multicast is a generalization of causal message delivery to multicasts that has been found to be useful in distributed MBM programming applications [4, 26].
Reference: [19] <author> D. B. Lomet, </author> <title> ``Process Structuring, Synchronization, and Recovery Using Atomic Actions'', </title> <journal> SIGPLAN Notices 12, </journal> <month> 3 (March </month> <year> 1977), </year> <pages> 128-137. </pages>
Reference-contexts: We end the section with a brief description of other applications of isotach systems. An atomic action is a group of operations on shared variables that appears to be executed indivisibly, i.e., without interleaving with other operations <ref> [19, 20] </ref>. In many contexts the atomic action is also a unit of recovery from hardware failure. We assume a system that is fault-free or that appears at the application level to be fault-free. Conventional systems enforce atomicity with some form of locking.
Reference: [20] <author> S. Owicki and D. Gries, </author> <title> ``An Axiomatic Proof Technique for Parallel Programs I'', </title> <journal> Acta Informatica 6 (1976), </journal> <pages> 319-340. </pages>
Reference-contexts: We end the section with a brief description of other applications of isotach systems. An atomic action is a group of operations on shared variables that appears to be executed indivisibly, i.e., without interleaving with other operations <ref> [19, 20] </ref>. In many contexts the atomic action is also a unit of recovery from hardware failure. We assume a system that is fault-free or that appears at the application level to be fault-free. Conventional systems enforce atomicity with some form of locking.
Reference: [21] <author> C. Papadimitriou, </author> <title> Database Concurrency Control, </title> <publisher> Computer Science Press, </publisher> <year> 1986. </year>
Reference-contexts: As a result, each atomic action will appear to be executed without interleaving with other operations. The correctness proof for the send order rules is similar to serializability proofs of database schedulers, see e.g. <ref> [21] </ref>. We show that for any execution on an isotach system that conforms to the send order rules there is an equivalent serial execution that is atomic and sequentially con sistent. In this context, we say an execution is atomic if every flat atomic action is executed atomically.
Reference: [22] <author> L. L. Peterson, N. C. Bucholz and R. D. Schlichting, </author> <title> ``Preserving and Using Context Information in Interprocess Communication'', </title> <journal> ACM Trans. Computer Systems 7, </journal> <month> 3 (August </month> <year> 1989), </year> <pages> 217-246. </pages>
Reference-contexts: Existing causal multicast protocols for non-bus-based systems <ref> [3, 4, 22, 31] </ref> require multiple message rounds. Isotach networks support a single round multicast [34]. g Totally Ordered Multicasts A totally ordered multicast is a multicast that is received in a consistent order at all processes in the system.
Reference: [23] <author> A. G. Ranade, </author> <title> ``How to Emulate Shared Memory'', </title> <booktitle> IEEE Annual Symp. on Foundations of Computer Science, </booktitle> <address> Los Angeles, </address> <year> 1987, </year> <pages> 185-194. </pages>
Reference-contexts: A network described by Ranade <ref> [23, 24] </ref> as the basis for an efficient concurrent-read, concurrent-write (CRCW) PRAM emulation can be viewed as realizing the more general and powerful n-tuple isotach logical time system. In this section, we give an algorithm for implementing isotach networks on arbitrary topologies. <p> Latency and Throughput. The principal cost of implementing isotach logical time by means of the model network algorithm is the additional waiting implied by the requirement that switches route messages in route-tag order. One way to reduce this waiting is by using ghosts. A ghost <ref> [23] </ref> or null message [6] is a copy of a message with a control bit set to indicate it is not a real message. When a switch sends an operation on one output it sends a ghost with the same route-tag on each of its other output (s).
Reference: [24] <author> A. G. Ranade, S. N. Bhatt and S. L. Johnsson, </author> <title> ``The Fluent Abstract Machine'', </title> <type> Tech. Rep. 573, </type> <institution> Yale University, Dept. of Computer Science, </institution> <month> January, </month> <year> 1988. </year>
Reference-contexts: A network described by Ranade <ref> [23, 24] </ref> as the basis for an efficient concurrent-read, concurrent-write (CRCW) PRAM emulation can be viewed as realizing the more general and powerful n-tuple isotach logical time system. In this section, we give an algorithm for implementing isotach networks on arbitrary topologies.
Reference: [25] <author> D. A. Reed and R. M. Fujimoto, </author> <title> Multicomputer Networks; Message-Based Parallel Processing, </title> <publisher> The MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1987. </year>
Reference-contexts: We simulated four networks: two conventional (C1, C2) and two isotach (I1, I2). Each is composed of 2x2 switches interconnected in a reverse baseline topology. The message transmission protocol is store-and-forward using send-acknowledge <ref> [25] </ref>. We assumed the network switches operated synchronously but our results are applicable to self-timed networks as well. The networks differ only in the design of the individual switches and the algorithms the switches execute.
Reference: [26] <author> R. Renesse, </author> <title> ``Casual Controversy at Le Mont St.-Michel'', </title> <journal> Operations System Review 27, </journal> <month> 2 (April </month> <year> 1993), </year> <pages> 44-53. </pages>
Reference-contexts: message delivery shared buses and a class of tree-structured networks called race-free networks [18] are not applicable to as wide a range of topologies. 10 The causally ordered multicast is a generalization of causal message delivery to multicasts that has been found to be useful in distributed MBM programming applications <ref> [4, 26] </ref>. Existing causal multicast protocols for non-bus-based systems [3, 4, 22, 31] require multiple message rounds. Isotach networks support a single round multicast [34]. g Totally Ordered Multicasts A totally ordered multicast is a multicast that is received in a consistent order at all processes in the system.
Reference: [27] <author> R. Renesse, </author> <title> ``Why Bother With CATOCS?'', OS Review 28, </title> <month> 1 (January </month> <year> 1994), </year> <pages> 22-27. </pages>
Reference: [28] <author> P. F. Reynolds, Jr., C. Williams and R. R. Wagner, Jr., </author> <title> ``Empirical Analysis of Isotach Networks'', </title> <type> Tech. Rep. 92-19, </type> <institution> University of Virginia, Dept. of Computer Science, </institution> <month> June, </month> <year> 1992. </year>
Reference-contexts: Some of these designs push all or most of the work of maintaining isotach logical time onto the SIUs and would allow isotach systems to use off-the-shelf networks. 5. PERFORMANCE We have studied the performance of equidistant isotach networks using both simulation <ref> [28] </ref> and analytic modelling [32]. 18 5.1. Simulation Study Isotach networks do more work than conventional networks they route messages and deliver them in an order consistent with the velocity invariant and the fi relation. Thus isotach networks can be expected to have less raw power than comparable conventional networks. <p> Parameters and their default (base case) values are shown in Table 1. Atomic action sizes are exponentially distributed with mean, aa_mean, truncated at 10 * aa_mean. A more detailed report of the study appears in <ref> [28] </ref>. 5.1.1. Raw Power Series: Series A We measured the raw power of each of the networks, i.e., throughput and delay under a workload of operations with no atomicity (aa_mean = 1) or sequencing constraints. In this series, workload consists of generic operations reads and writes are not distinguished. <p> networks, the synchronization support the isotach networks provide allows the isotach systems to outperform the conventional systems by a wide margin. 26 We also compared the performance of conventional and isotach systems for a workload of structured atomic actions in which data dependences exist both within and among atomic actions <ref> [28] </ref>. The isotach networks continued to outperform C1, though by a smaller margin since the data dependences prevent the isotach networks from taking advantage of their ability to pipeline operations. 5.1.4. <p> A warm-spot traffic model has several warm variables instead of a single hot variable and is more realistic than either the uniform or hot-spot traffic models. The warm-traffic model we use is based on the standard 80/20 rule (see e.g. [13]), modified to lessen contention for the warmest variables <ref> [28] </ref>. Fig. 8 shows the effect of varying atomic action size under a warm-traffic model. Delay is reported in the same way as in series C. The performance of I1 and I2 is similar to their series C performance.
Reference: [29] <author> J. H. Saltzer, D. P. Reed and D. D. Clark, </author> <title> ``End-To-End Arguments in System Design'', </title> <journal> ACM TOCS 2, </journal> <month> 4 (November </month> <year> 1984), </year> <pages> 277-288. </pages>
Reference-contexts: They are suited to both distributed as well as parallel systems and SMM as well as MBM computations. We are well aware of the recent controversy ([5, 7, 27]) over implementing synchronization services at a low level in end-to-end systems <ref> [29] </ref>. We believe isotach networks are justifiable on a cost/benefit basis the guarantee they offer can be implemented cheaply and is useful to a wide class of computations in enforcing basic synchronization constraints.
Reference: [30] <author> C. Scheurich and M. Dubois, </author> <title> ``Correct Memory Operation of Cache-Based Multiprocessors'', </title> <booktitle> Proc. 14th ISCA, </booktitle> <month> June </month> <year> 1987, </year> <pages> 234-243. </pages>
Reference-contexts: Since pipelining is an important way to decrease effective memory latency, this solution is expensive. The high cost of enforcing sequential consistency has led to extensive exploration of weaker memory consistency models, e.g., <ref> [9, 30] </ref>. These weaker models are harder to reason about and still impose significant restrictions on pipe-lining, but make sense given the cost of maintaining sequential consistency in a conventional system. In an isotach system, processes can pipeline memory operations without violating sequential consistency.
Reference: [31] <author> A. Schiper, J. Eggli and A. Sandoz, </author> <title> ``A New Algorithm to Implement Causal Ordering'', </title> <booktitle> in Distributed Computing, </booktitle> <volume> vol. </volume> <publisher> 89 , Springer-Verlag, </publisher> <address> Berlin-Heidelburg-New York, </address> <year> 1989, </year> <pages> 219-232. </pages>
Reference-contexts: Existing causal multicast protocols for non-bus-based systems <ref> [3, 4, 22, 31] </ref> require multiple message rounds. Isotach networks support a single round multicast [34]. g Totally Ordered Multicasts A totally ordered multicast is a multicast that is received in a consistent order at all processes in the system.
Reference: [32] <author> R. R. Wagner, Jr., </author> <title> ``On the Implementation of Local Synchrony'', </title> <institution> CS-93-33, University of Virginia, Dept. of Computer Science, </institution> <month> June 1, </month> <year> 1993. </year>
Reference-contexts: A better approach is to find routing schemes that ensure deadlock freedom. We have proven deadlock free routing schemes for equidistant networks using one buffer per physical channel and for arbitrary topologies using O (d) buffers and virtual channels per physical channel, where d is the network diameter <ref> [32] </ref>. Fault tolerance. One way to tolerate faults in a computer system is to provide extra nodes and connections which may be put to use in the event of a fault. <p> Discussion of other issues relating to fault tolerance in isotach networks can be found in <ref> [32] </ref>. We are currently exploring alternative isotach network algorithms with the goal of finding ways to support gigabit/second data rates. We have identified and are now exploring a number of feasible alternative designs for isotach networks that are consistent with switching techniques such as wormhole routing and virtual channels. <p> Some of these designs push all or most of the work of maintaining isotach logical time onto the SIUs and would allow isotach systems to use off-the-shelf networks. 5. PERFORMANCE We have studied the performance of equidistant isotach networks using both simulation [28] and analytic modelling <ref> [32] </ref>. 18 5.1. Simulation Study Isotach networks do more work than conventional networks they route messages and deliver them in an order consistent with the velocity invariant and the fi relation. Thus isotach networks can be expected to have less raw power than comparable conventional networks. <p> Analytic Model Analytic models were developed for the four simulated networks (C1, C2, I1, I2). That work led to the discovery of novel modelling methods that will be presented in a future paper. We outline the approach and results we obtained here. Interested readers are referred to <ref> [32] </ref> for a more detailed presentation. We extended a mean value analysis technique first presented by Jenq [11] for banyon-like MIN's. Our extensions enabled the modelling of 1) routing dependencies, 2) a measure of bandwidth we have called information flow, and 3) message types.
Reference: [33] <author> C. Williams and P. F. Reynolds, Jr., </author> <title> ``Delta-Cache Protocols: A New Class of Cache Coherence Protocols'', </title> <type> Tech. Rep. 90-34, </type> <institution> University of Virginia, Department of Computer Science, </institution> <month> December, </month> <year> 1990. </year>
Reference-contexts: Other applications for isotach logical time include the following: g Cache Coherence Isotach based techniques for enforcing atomicity and sequential consistency extend to systems with caches. The resulting cache coherence protocols <ref> [33, 34] </ref>, are more concurrent than existing protocols for non-bus-based systems in that they support multiple concurrent reads and writes of the same block; allow processes to pipeline memory accesses without sacrificing sequential consistency; and allow processes to read and write multiple shared cache blocks atomically without invalidating the copies held <p> When the workload has two or more of these characteristics, an isotach network performs markedly better than a conventional network. These results indicate that isotach based synchronization techniques are worthy of further study. We intend to extend our simulation to include isotach based cache coherence protocols <ref> [33] </ref>. 28 5.2. Analytic Model Analytic models were developed for the four simulated networks (C1, C2, I1, I2). That work led to the discovery of novel modelling methods that will be presented in a future paper. We outline the approach and results we obtained here.
Reference: [34] <author> C. C. Williams, </author> <title> ``Concurrency Control in Asynchronous Computations'', </title> <type> Ph.D. Thesis, </type> <institution> University of Virginia, </institution> <year> 1993. </year>
Reference-contexts: Structured atomic actions cannot be executed in the same way as flat atomic actions because data dependences among operations prevent issuing all the operations in a batch, but the techniques for executing flat atomic actions together with a class of operations called split operations support execution of structured atomic actions <ref> [34] </ref>. Isotach based techniques for 9 executing structured atomic actions require synchronization only in the case of a true data dependence, otherwise known as a flow or write/read dependence. <p> Other applications for isotach logical time include the following: g Cache Coherence Isotach based techniques for enforcing atomicity and sequential consistency extend to systems with caches. The resulting cache coherence protocols <ref> [33, 34] </ref>, are more concurrent than existing protocols for non-bus-based systems in that they support multiple concurrent reads and writes of the same block; allow processes to pipeline memory accesses without sacrificing sequential consistency; and allow processes to read and write multiple shared cache blocks atomically without invalidating the copies held <p> A network implements causal message delivery, if for any two messages m and m , s (m) fi s (m ) fi (r (m ) fi r (m)). Any isotach network in which logical distance is consistent with the triangle inequality implements causal message delivery <ref> [34] </ref>. <p> Existing causal multicast protocols for non-bus-based systems [3, 4, 22, 31] require multiple message rounds. Isotach networks support a single round multicast <ref> [34] </ref>. g Totally Ordered Multicasts A totally ordered multicast is a multicast that is received in a consistent order at all processes in the system. Total ordering is useful in MBM computations for a variety of purposes including maintaining consistency of replicated data. <p> Other applications include support for migration mechanisms, checkpointing, wait-free communication primitives, and highly concurrent access to linked data structures. Important special applications include parallel and distributed databases and production systems <ref> [34] </ref>. Whether the applications of isotach logical time described in this section are practical depends, of course, on the efficiency with which isotach logical time can be implemented. We have identified several very different approaches to implementing isotach logical time.
Reference: [35] <author> C. C. Williams and P. F. Reynolds, Jr., </author> <title> ``Combining Atomic Actions'', </title> <note> Journal of Parallel and Distributed Computing (to appear), 1995. 32 </note>
Reference-contexts: An isotach network need not implement combining, but if it does, it can combine operations not combinable in other networks, resulting in improved concurrency in accessing shared memory <ref> [35] </ref>. g Causal Message Delivery Message delivery is causal if messages are delivered in an order consistent with the order in which they were sent. Causal ordering can be obtained by the network or by reordering messages at the destination before delivery to the application process.
References-found: 35

