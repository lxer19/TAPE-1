URL: http://www.win.tue.nl/cs/fm/Herman.Geuvers/BRATurModel.ps.gz
Refering-URL: http://www.win.tue.nl/cs/fm/Herman.Geuvers/
Root-URL: http://www.win.tue.nl
Email: e-mail: milena@cs.kun.nl  e-mail: herman@win.tue.nl  
Phone: 2  
Title: A Simple Model Construction for the Calculus of Constructions  
Author: M. Stefanova and H. Geuvers ? 
Address: Netherlands  Eindhoven, The Netherlands  
Affiliation: 1 Faculty of Mathematics and Informatics University of Nijmegen, The  Faculty of Mathematics and Informatics University of  
Abstract: We present a model construction for the Calculus of Constructions (CC) where all dependencies are carried out in a set-theoretical setting. The Soundness Theorem is proved and as a consequence of it Strong Normalization for CC is obtained. Some other applications of our model constructions are: showing that CC + Classical logic is consistent (by constructing a model for it) and showing that the Axiom of Choice is not derivable in CC (by constructing a model in which the type that represents the Axiom of Choice is empty). 
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> T. Altenkirch. </author> <title> Constructions, Inductive Types and Strong Normalization. </title> <type> PhD thesis, </type> <institution> Laboratory for the Foundations of Computer Science, University of Edin-burgh, </institution> <year> 1993. </year>
Reference-contexts: 1 Introduction In the literature there are many investigations on the semantics of polymorphic -calculus with dependent types (see for example <ref> [12, 11, 10, 1, 5, 13] </ref>). Most of the existing models present a semantics for systems in which the inhabitants of the impredicative universe (types) are "lifted" to inhabitants of the predicative universe (kinds) (see [16]). <p> The approach used here differs from the ones in [10] and <ref> [1] </ref>, where strong normalization is also derived from particular models. Hyland and Ong (see [10]) point out that there are some complications resulting from the fact that hSN ; = fi i is not a conditional partial combinatory algebra (c-pca). <p> This leads to much additional work for studying properties of cw-equality and the c-pca hSN ; = cw i, while the only equality we are really interested in is the fi-equality. Moreover,in [10] models which contain the empty set as a possible interpretation of a type are excluded. Altenkirch <ref> [1] </ref> presents a simpler solution, by taking the intersection of the collection of partial equivalence relations over the pure -terms and the collection of saturated sets (with a modified definition of the notion of `saturated set', slightly different from 3.6) as interpretation of fl. <p> The differences here are conceptual. As has been mentioned before, realizability models are a convenient tool for describing semantics for impredicative systems in which the type-dependency rule (fl; 2) of PTSs is "encoded" by explicit "lifting" of every type to a special small kind (see <ref> [16, 1] </ref>. Such models are usually extensional. A semantics of the PTS CC can be obtained from these models via a syntactic mapping from CC-PTS-style to CC-with-lifting. The model described here is intensional and presents a direct meaning of the Calculus of Construction as a PTS. Abstract non-categorical model-constructions. <p> The model described here is intensional and presents a direct meaning of the Calculus of Construction as a PTS. Abstract non-categorical model-constructions. The only such model-construction we know is the one described in <ref> [1] </ref>. It is a non-trivial presentation of categorical models without using categorical tools. A non-trivial instance of it is the class of standard realizability models. Note, that this abstract notion of model is also for a system with "lifted" types. <p> We present a new class of concrete models, which are intensional. This makes us believe that these models cannot be viewed as a particular instance of the abstract scheme, as for example presented in <ref> [1] </ref>. In fact we have tried to organize these concrete models in a more general scheme to cover the PERs as well, but we have so far not succeeded. However one can use PERs instead of polystructures as interpretations of fl and `redo' the rest of the construction.
Reference: 2. <author> H. P. Barendregt. </author> <title> The Lambda Calculus: Its Syntax and Semantics. </title> <publisher> North--Holland, </publisher> <address> Amsterdam, </address> <note> second, revised edition, </note> <year> 1984. </year>
Reference-contexts: Below we list the definitions of some notions used in the present paper. Most of the definitions in this section are taken from <ref> [2] </ref> and [6]. Definition 2.3 A combinatory algebra (ca) is an applicative structure A = h A ; : ; k ; s ; = A i with distinguished elements k and s satisfying (k:x):y = A x ; ((s:x):y):z = A (x:z):(y:z) The application (:) is usually not written. <p> For example, as explained in <ref> [2] </ref>, one can define as the standard abstraction fl with the help of the combinators k and s. In the sequel we refer to as an arbitrary abstraction operation on A, which exists due to combinatory completeness. <p> Altenkirch, it is not true in general that, if T 1 = fi T 2 , then [T 1 ] ae = A [T 2 ] ae . In <ref> [2] </ref> it is shown that this holds for a special case of combinatory algebras the so called -models where is chosen to be fl and in which additional axioms hold (see [2], page 94-95). <p> In <ref> [2] </ref> it is shown that this holds for a special case of combinatory algebras the so called -models where is chosen to be fl and in which additional axioms hold (see [2], page 94-95). If one considers an arbitrary abstraction (as we do), then it is convenient to take weakly-extensional combinatory algebras to model fl. Let be a binary relation on A. <p> fi T 2 ; then [T 1 ] ae [T 2 ] ae : Examples 2.7 The relation = A fi A is weakly-extensional over = A , be cause it relates all elements of A; Let be the abstraction fl defined with the help of k and s (see <ref> [2] </ref>, page 90). Any congruence relation which contains = A and satisfies the equations A fi and Meyer-Scott axiom (see [2], page 94-95) is weakly-extensional over = A ; In the combinatory algebra fl = h fl ; : ; xy:x ; xyz:xz (yz) ; = fi i, the fi-equality is <p> fi A is weakly-extensional over = A , be cause it relates all elements of A; Let be the abstraction fl defined with the help of k and s (see <ref> [2] </ref>, page 90). Any congruence relation which contains = A and satisfies the equations A fi and Meyer-Scott axiom (see [2], page 94-95) is weakly-extensional over = A ; In the combinatory algebra fl = h fl ; : ; xy:x ; xyz:xz (yz) ; = fi i, the fi-equality is weakly-extensional over itself (if is taken to be ). 3 The Model Construction The notion of CC-structure and the interpretations <p> (jvj) ae := ae (v) if v is a variable (jT 1 T 2 j) ae := (jT 1 j) ae :(jT 2 j) ae (j v : T 1 :T 2 j) ae := ?:(jT 1 j) ae :(v:(jT 2 j) ae [v:=v] ) Remark 3.13 As usual (see <ref> [2] </ref>), (jT j) ae [v:=v] denotes the term over A obtained from T by applying the map (j j) ae 0 to it, where ae 0 : Var ! T (A) is defined as ae 0 (u) = ae (u) if u 6= v; Fact 3.14 Due to the fact that
Reference: 3. <author> H. P. Barendregt. </author> <title> Typed lambda calculi. </title> <editor> In Abramski, editor, </editor> <booktitle> Handbook of Logic in Computer Science. </booktitle> <publisher> Oxford University Press, </publisher> <year> 1992. </year>
Reference-contexts: We adopt the same syntax for CC as in <ref> [8, 3] </ref>. To present the derivation rules for CC we first fix the set of pseudoterms from which the derivation rules select the (typable) terms. <p> 2g ; v:T ` M : U ` v : T:U : s s 2 ffl; 2g ` M : v : T:U ` N : T (conv) ` M : T ` U : s ` M : U For the informal explanation of these rules see, for example, <ref> [8, 3] </ref>. <p> Our approach is based on the fact that the full collection of saturated sets (see 3.6, or <ref> [3] </ref>) is a polystructure over the set of pure -terms fl. v ! following CC-structure is used to prove strong normalization.
Reference: 4. <author> S. Berardi. </author> <title> Encoding of data types in pure construction calculus: a semantic justification. </title> <editor> In G. Plotkin and G. Huet, editors, </editor> <booktitle> Logical Enviroments, </booktitle> <pages> pages 30-60, </pages> <address> Edinburgh, </address> <year> 1992. </year>
Reference-contexts: Lemma 4.4 In CC there is no term M such that ` M : CL. Moreover, there is no term M such that ` M : PI!CL. In <ref> [4] </ref>, it is shown that there is a term M such that x:EXT; ff:fl; c; c 0 :ff; h:c 6= ff c 0 ` M :`every f :ff!ff has a fixed point': The statement that `every f :ff!ff has a fixed point' is written formally as f :oe!oe:9x:oe:fx = oe x. <p> However one can use PERs instead of polystructures as interpretations of fl and `redo' the rest of the construction. Other (partial) models of the PTS CC (see <ref> [8, 4] </ref>). In the literature there are models of CC employed for proving strong normalization, in which CC is interpreted via an explicit or implicit syntactical mapping into Girard's system F ! (see [9, 8]) . <p> In the literature there are models of CC employed for proving strong normalization, in which CC is interpreted via an explicit or implicit syntactical mapping into Girard's system F ! (see [9, 8]) . Furthermore, there are models in which type-dependencies are not fully disregarded as in <ref> [4] </ref> where dependencies are eliminated only in the interpretation of kinds. The interpretations in such models are not straightforwardly extendible to richer systems, for example with inductive types, and our notion of models is more flexible in this sense.
Reference: 5. <author> S. Berardi. </author> <title> An application of per models to program extraction. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 3 </volume> <pages> 309-331, </pages> <year> 1993. </year>
Reference-contexts: 1 Introduction In the literature there are many investigations on the semantics of polymorphic -calculus with dependent types (see for example <ref> [12, 11, 10, 1, 5, 13] </ref>). Most of the existing models present a semantics for systems in which the inhabitants of the impredicative universe (types) are "lifted" to inhabitants of the predicative universe (kinds) (see [16]).
Reference: 6. <author> I. Bethke and J. W Klop. </author> <title> Collapsing partial combinatory algebras. </title> <type> Technical report, </type> <institution> CWI, </institution> <address> The Netherlands, </address> <year> 1995. </year>
Reference-contexts: Below we list the definitions of some notions used in the present paper. Most of the definitions in this section are taken from [2] and <ref> [6] </ref>. Definition 2.3 A combinatory algebra (ca) is an applicative structure A = h A ; : ; k ; s ; = A i with distinguished elements k and s satisfying (k:x):y = A x ; ((s:x):y):z = A (x:z):(y:z) The application (:) is usually not written.
Reference: 7. <author> J. H. </author> <title> Geuvers. Semantics for dependent types (the calculus of constructions) by a `double' model construction. </title> <type> Technical report, </type> <institution> Department of Computer Science, University of Eindhoven, </institution> <year> 1995. </year>
Reference-contexts: Hence (jM j) ae 2 SN , and so M 2 SN . ut For a more detailed presentation of the proof of strong normalization see [15]. 6 Related Research The present paper combines and develops further the ideas in <ref> [7] </ref> and [15]. This results in constructing a relatively simple set-theoretical notion of model of CC being a PTS. It has been shown how syntactical properties of the system can be studied in a semantical way.
Reference: 8. <author> J. H. </author> <title> Geuvers. A short and flexible proof of strong normalization for the calculus of constructions. </title> <editor> In P. Dybjer, B. Nordstrom, and J. Smith, editors, </editor> <title> Types for Proofs and Programs, </title> <booktitle> Int. Workshop TYPES '94, </booktitle> <address> Bastad, Sweden, </address> <publisher> LNCS 996, </publisher> <pages> pages 14-38, </pages> <address> Edinburgh, </address> <year> 1995. </year>
Reference-contexts: We adopt the same syntax for CC as in <ref> [8, 3] </ref>. To present the derivation rules for CC we first fix the set of pseudoterms from which the derivation rules select the (typable) terms. <p> 2g ; v:T ` M : U ` v : T:U : s s 2 ffl; 2g ` M : v : T:U ` N : T (conv) ` M : T ` U : s ` M : U For the informal explanation of these rules see, for example, <ref> [8, 3] </ref>. <p> However one can use PERs instead of polystructures as interpretations of fl and `redo' the rest of the construction. Other (partial) models of the PTS CC (see <ref> [8, 4] </ref>). In the literature there are models of CC employed for proving strong normalization, in which CC is interpreted via an explicit or implicit syntactical mapping into Girard's system F ! (see [9, 8]) . <p> Other (partial) models of the PTS CC (see [8, 4]). In the literature there are models of CC employed for proving strong normalization, in which CC is interpreted via an explicit or implicit syntactical mapping into Girard's system F ! (see <ref> [9, 8] </ref>) . Furthermore, there are models in which type-dependencies are not fully disregarded as in [4] where dependencies are eliminated only in the interpretation of kinds.
Reference: 9. <author> J.H. Geuvers and M.J. Nederhof. </author> <title> A modular proof of strong normalization for the calculus of constructions. </title> <journal> Journal of Functional Programming, </journal> <volume> 1(2) </volume> <pages> 155-189, </pages> <year> 1991. </year>
Reference-contexts: Other (partial) models of the PTS CC (see [8, 4]). In the literature there are models of CC employed for proving strong normalization, in which CC is interpreted via an explicit or implicit syntactical mapping into Girard's system F ! (see <ref> [9, 8] </ref>) . Furthermore, there are models in which type-dependencies are not fully disregarded as in [4] where dependencies are eliminated only in the interpretation of kinds.
Reference: 10. <author> J .M. E. Hyland and C.-H. L. Ong. </author> <title> Modified realizability and strong normalization proofs. </title> <editor> In M. Bezem and J. F. Groote, editors, </editor> <booktitle> Typed Lambda Calculi and Applications, </booktitle> <year> 1993. </year>
Reference-contexts: 1 Introduction In the literature there are many investigations on the semantics of polymorphic -calculus with dependent types (see for example <ref> [12, 11, 10, 1, 5, 13] </ref>). Most of the existing models present a semantics for systems in which the inhabitants of the impredicative universe (types) are "lifted" to inhabitants of the predicative universe (kinds) (see [16]). <p> The approach used here differs from the ones in <ref> [10] </ref> and [1], where strong normalization is also derived from particular models. Hyland and Ong (see [10]) point out that there are some complications resulting from the fact that hSN ; = fi i is not a conditional partial combinatory algebra (c-pca). <p> The approach used here differs from the ones in <ref> [10] </ref> and [1], where strong normalization is also derived from particular models. Hyland and Ong (see [10]) point out that there are some complications resulting from the fact that hSN ; = fi i is not a conditional partial combinatory algebra (c-pca). <p> This leads to much additional work for studying properties of cw-equality and the c-pca hSN ; = cw i, while the only equality we are really interested in is the fi-equality. Moreover,in <ref> [10] </ref> models which contain the empty set as a possible interpretation of a type are excluded.
Reference: 11. <author> J. M. E. Hyland and M. Pitts. </author> <title> The theory of constructions: Categorical semantics and topos-theoretic models. </title> <booktitle> In Boulder, editor, AMS notes, </booktitle> <year> 1987. </year>
Reference-contexts: 1 Introduction In the literature there are many investigations on the semantics of polymorphic -calculus with dependent types (see for example <ref> [12, 11, 10, 1, 5, 13] </ref>). Most of the existing models present a semantics for systems in which the inhabitants of the impredicative universe (types) are "lifted" to inhabitants of the predicative universe (kinds) (see [16]). <p> An interesting question is whether the whole model construction can be extended in a modular way to give semantics of richer systems than CC. We compare our notion of model with the following. Categorical Models (see for example <ref> [11] </ref>). We do not use the abstract machinery of category theory and instead present a simple, intuitively grounded notion of model for CC being a PTS. Standard Realizability Models (see [12, 13]). The differences here are conceptual.
Reference: 12. <author> G. Longo and E. Moggi. </author> <title> Constructive natural deduction and its '!-set` interpretation. </title> <booktitle> Mathematical Structures in Computer Science, </booktitle> <volume> 1 </volume> <pages> 215-254, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction In the literature there are many investigations on the semantics of polymorphic -calculus with dependent types (see for example <ref> [12, 11, 10, 1, 5, 13] </ref>). Most of the existing models present a semantics for systems in which the inhabitants of the impredicative universe (types) are "lifted" to inhabitants of the predicative universe (kinds) (see [16]). <p> A semantics of such a system is usually obtained by implicitly or explicitly encoding the system into the system with "lifted" types, so the types are interpreted in the same way. The resulting semantics, even the one presented by concrete models (see <ref> [12, 13] </ref>) is still complicated as it gives an indirect meaning of PTSs. <p> We compare our notion of model with the following. Categorical Models (see for example [11]). We do not use the abstract machinery of category theory and instead present a simple, intuitively grounded notion of model for CC being a PTS. Standard Realizability Models (see <ref> [12, 13] </ref>). The differences here are conceptual. As has been mentioned before, realizability models are a convenient tool for describing semantics for impredicative systems in which the type-dependency rule (fl; 2) of PTSs is "encoded" by explicit "lifting" of every type to a special small kind (see [16, 1].
Reference: 13. <author> Z. Luo. </author> <title> A higher-order calculus and theory abstraction. </title> <journal> IC, </journal> <volume> 90 </volume> <pages> 107-137, </pages> <year> 1991. </year>
Reference-contexts: 1 Introduction In the literature there are many investigations on the semantics of polymorphic -calculus with dependent types (see for example <ref> [12, 11, 10, 1, 5, 13] </ref>). Most of the existing models present a semantics for systems in which the inhabitants of the impredicative universe (types) are "lifted" to inhabitants of the predicative universe (kinds) (see [16]). <p> A semantics of such a system is usually obtained by implicitly or explicitly encoding the system into the system with "lifted" types, so the types are interpreted in the same way. The resulting semantics, even the one presented by concrete models (see <ref> [12, 13] </ref>) is still complicated as it gives an indirect meaning of PTSs. <p> We compare our notion of model with the following. Categorical Models (see for example [11]). We do not use the abstract machinery of category theory and instead present a simple, intuitively grounded notion of model for CC being a PTS. Standard Realizability Models (see <ref> [12, 13] </ref>). The differences here are conceptual. As has been mentioned before, realizability models are a convenient tool for describing semantics for impredicative systems in which the type-dependency rule (fl; 2) of PTSs is "encoded" by explicit "lifting" of every type to a special small kind (see [16, 1].
Reference: 14. <author> J. C. Reynolds. </author> <title> Polymorphism is not set-theoretic. </title> <editor> In G. Kahn, D. B. McQueen, and G. Plotkin, editors, </editor> <booktitle> Lecture Notes in Computer Science 173, </booktitle> <year> 1984. </year>
Reference-contexts: The poly-functionals are restricted set-theoretical functionals or sets, and the predicative sets are sets having poly-functionals as their elements. The restrictions on poly-functionals are a consequence from the fact that polymorphism is not set-theoretical in the classical sense (see <ref> [14] </ref>). However, two poly-functionals or two predicative sets are equal if they are set-theoretically equal. Two elements are equal if they are equal via the equality of the underlying weakly-extensional combinatory algebra. The three collections of semantical objects are built simultaneously, by induction on the structure of typable terms.
Reference: 15. <author> M.T. Stefanova. </author> <title> Schematic proof of strong normalization for barendregt's-cube, </title> <note> 1995. Submitted, also available at http://www.cs.kun.nl/milena. </note>
Reference-contexts: For more details about the intuition see <ref> [15] </ref>. The typable terms of CC are mapped into a (set-theoretical) hierarchical structure (called CC-structure) according to their classification as objects, constructors or kinds. The predicative universe of CC is interpreted as a collection U 2 of sets (predicative structure) and every kind is mapped to a predicative set. <p> From the Soundness Theorem it follows that (jM j) ae 2 [[T ]] fl ;ae SN . Hence (jM j) ae 2 SN , and so M 2 SN . ut For a more detailed presentation of the proof of strong normalization see <ref> [15] </ref>. 6 Related Research The present paper combines and develops further the ideas in [7] and [15]. This results in constructing a relatively simple set-theoretical notion of model of CC being a PTS. It has been shown how syntactical properties of the system can be studied in a semantical way. <p> Hence (jM j) ae 2 SN , and so M 2 SN . ut For a more detailed presentation of the proof of strong normalization see <ref> [15] </ref>. 6 Related Research The present paper combines and develops further the ideas in [7] and [15]. This results in constructing a relatively simple set-theoretical notion of model of CC being a PTS. It has been shown how syntactical properties of the system can be studied in a semantical way. <p> The resulting proof of SN is very flexible in a sense that it can be adapted in a modular way to various extensions of CC, such as inductive types and kinds (see <ref> [15] </ref>). An interesting question is whether the whole model construction can be extended in a modular way to give semantics of richer systems than CC. We compare our notion of model with the following. Categorical Models (see for example [11]).
Reference: 16. <author> T. Streicher. </author> <title> Semantics of Type Theory. Correctness, Completeness and Independence Results. </title> <booktitle> Progress in Theoretical Computer Science. </booktitle> <publisher> Birkhauser, </publisher> <address> Boston, </address> <year> 1991. </year>
Reference-contexts: Most of the existing models present a semantics for systems in which the inhabitants of the impredicative universe (types) are "lifted" to inhabitants of the predicative universe (kinds) (see <ref> [16] </ref>). Such systems are convenient to be modeled by locally Cartesian-closed categories having small Cartesian-closed subcategories. A well-known instance of these categorical models is the category of !-sets (or D-sets) and its subcategory of modest sets, which is isomorphic to the category of partial equivalence relations (PER). <p> The differences here are conceptual. As has been mentioned before, realizability models are a convenient tool for describing semantics for impredicative systems in which the type-dependency rule (fl; 2) of PTSs is "encoded" by explicit "lifting" of every type to a special small kind (see <ref> [16, 1] </ref>. Such models are usually extensional. A semantics of the PTS CC can be obtained from these models via a syntactic mapping from CC-PTS-style to CC-with-lifting. The model described here is intensional and presents a direct meaning of the Calculus of Construction as a PTS. Abstract non-categorical model-constructions.
Reference: 17. <author> T. Streicher. </author> <title> Independence of the induction principle and the axiom of choice in the pure calculus of constructions. </title> <journal> TCS, </journal> <volume> 103(2) </volume> <pages> 395-409, </pages> <year> 1992. </year> <title> This article was processed using the L A T E X macro package with LLNCS style </title>
Reference-contexts: The examples that we show are in the same realm (and sometimes the same) as the ones in <ref> [17] </ref>. We think (and hope) however that in many cases counterexamples can be constructed more easily using our model construction. Before going into details, we first compute the interpretations of some logical formulas to observe that their interpretation in the model expresses roughly-what the formula states.
References-found: 17

