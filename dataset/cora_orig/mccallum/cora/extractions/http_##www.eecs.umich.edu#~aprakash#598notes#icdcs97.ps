URL: http://www.eecs.umich.edu/~aprakash/598notes/icdcs97.ps
Refering-URL: http://www.eecs.umich.edu/~aprakash/598notes/598-reading.html
Root-URL: http://www.cs.umich.edu
Title: Concurrency Control and View Notification Algorithms for Collaborative Replicated Objects  
Author: Robert Strom Guruduth Banavar Kevan Miller Atul Prakash and Michael Ward 
Abstract: This paper describes algorithms for implementing a high-level programming model for synchronous distributed groupware applications. In this model, several application data objects may be atomically updated, and these objects automatically maintain consistency with their replicas using an optimistic algorithm. Changes to these objects may be optimistically or pessimistically observed by view objects by taking consistent snapshots. The algorithms for both update propagation and view notification are based upon optimistic guess propagation principles, adapted for fast commit by using primary copy replication techniques. The main contribution of the paper is the synthesis of these two algorithmic techniques | guess propagation and primary copy replication | for implementing a framework that is easy to program to and is well suited for the needs of groupware applications. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> H. M. Adbel-Wahab and M. A. Feit. XTV: </author> <title> A framework for sharing X window clients in remote synchronous collaboration. </title> <booktitle> In Proceedings, IEEE Tri-comm '91: Communications for Distributed Applications and Systems, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: Synchronous collaborative applications can be built using either a non-replicated application architecture or a replicated application architecture. In a non-replicated architecture, only one instance of the application executes, and GUI events are multicast to all the clients, via systems such as shared X servers <ref> [1] </ref>.
Reference: [2] <author> David F. Bacon and Robert E. Strom. </author> <title> Optimistic par-allelization of communicating sequential processes. </title> <booktitle> In Proceedings of the Third ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, </booktitle> <month> April </month> <year> 1991. </year>
Reference-contexts: The execution of the transaction takes place optimistically, using strategies derived from the optimistic guess propagation principles defined in Strom and Yemini [15], and applied to a number of distributed systems (e.g. optimistic call streaming <ref> [2] </ref> and HOPE [5]). However, our algorithm makes certain specializations to reduce message traffic. For RC guesses, the originating site simply records the V T of the transaction which wrote the uncommitted value that was read.
Reference: [3] <author> Kenneth Birman, Andre Schiper, and Pat Stephen-son. </author> <title> Lightweight causal and atomic group multicast. </title> <journal> ACM Transactions on Computer Systems, </journal> <volume> 9(3) </volume> <pages> 272-314, </pages> <month> August </month> <year> 1991. </year>
Reference-contexts: This algorithm implements the consistency and mo-notonicity requirements for pessimistic views. 5 Discussion 5.1 Related Work The Decaf framework is designed for collaborative work among a small and possibly widely distributed collection of users. Consistency, responsiveness, and ease of programming are important objectives. ISIS <ref> [3] </ref> provides programming primitives for consistent replication, although its implementation strategies are pessimistic. Interactive groupware systems have different performance requirements and usage characteristics from databases, leading to different choices for concurrency control algorithms.
Reference: [4] <author> Wesley Chu and Joseph Hellerstein. </author> <title> The exclusive-writer approach to updating replicated files in distributed processing systems. </title> <journal> IEEE Transactions on Computer Systems, </journal> <volume> C-34(6):489-500, </volume> <month> June </month> <year> 1985. </year>
Reference-contexts: There is a function which maps replication graphs to a selected node in that graph. The node is called the primary copy and the site of that node is called the primary site, adapting a replication technique used by Chu and Hellerstein <ref> [4] </ref> and others. The correctness of the concurrency control algorithm is based upon the fact that the order of all reads and updates of replicas is guaranteed to match the order of the corresponding reads and updates at the primary copy.
Reference: [5] <author> Crispin Cowan and Hanan L. Lutfiyya. </author> <title> A wait-free algorithm for optimistic programming: Hope realized. </title> <booktitle> In Proceedings International Conference on Distributed Computing Systems, </booktitle> <pages> pages 484-493, </pages> <address> Piscataway, NJ, </address> <year> 1996. </year>
Reference-contexts: The execution of the transaction takes place optimistically, using strategies derived from the optimistic guess propagation principles defined in Strom and Yemini [15], and applied to a number of distributed systems (e.g. optimistic call streaming [2] and HOPE <ref> [5] </ref>). However, our algorithm makes certain specializations to reduce message traffic. For RC guesses, the originating site simply records the V T of the transaction which wrote the uncommitted value that was read. The originating site will not commit its transaction until the transaction at the recorded V T commits. <p> The first has to do with the relative order of list items. A transaction at V T 100 may modify A [103]["John"][12] without having seen that an earlier transaction at V T 80 deleted A <ref> [5] </ref> so that what the originating site thinks of as A [103] may appear to some other sites to be A [102]. This is not a con-currency control conflict | it is simply a consequence of the fact that path names like [103]["John"][12] are fragile.
Reference: [6] <author> C. Ellis, S.J. Gibbs, and G. Rein. </author> <title> Concurrency control in groupware systems. </title> <booktitle> In Proceedings of the ACM SIGMOD '89 Conference on Management of Data, </booktitle> <pages> pages 399-407. </pages> <publisher> ACM Press, </publisher> <year> 1989. </year>
Reference-contexts: In a replicated architecture, each user runs an application; the applications are usually identical, and the state or the GUI is "shared" by synchronously mirroring changes to the state of one copy to each of the others <ref> [6, 13] </ref>. 1 IBM TJ Watson Research Center, 30 Saw Mill River Road, Hawthorne, NY 10532, USA. E-mail: fstrom, banavar, klm, mjwg@watson.ibm.com 2 Department of Electrical Engineering and Computer Science, University of Michigan, Ann Arbor, MI, USA.
Reference: [7] <author> D. Jefferson and A. Motro. </author> <title> The time warp mechanism for database concurrency control. </title> <booktitle> In Proceedings of the International Conference on Data Engineering, </booktitle> <pages> pages 474-481, </pages> <address> Los Angeles, CA, February 1986. </address> <publisher> IEEE Computer Society Press. </publisher>
Reference-contexts: Optimistic protocols based on Jefferson's Time Warp [8] were originally designed for distributed simulation environments. They have been successfully applied in other application areas as well <ref> [7] </ref>. However, one important characteristic of distributed simulation is that there is usually an urgency to compute the final result, but not necessarily to commit the intermediate steps.
Reference: [8] <author> D. R. Jefferson. </author> <title> Virtual time. </title> <journal> ACM Transactions on Programming Languages and Systems, </journal> <volume> 7(3) </volume> <pages> 404-425, </pages> <month> July </month> <year> 1985. </year>
Reference-contexts: Second, possibilities of conflicts among transactions is lower in group-ware systems because people typically use social protocols to avoid most of the conflicts in parallel work. Optimistic protocols based on Jefferson's Time Warp <ref> [8] </ref> were originally designed for distributed simulation environments. They have been successfully applied in other application areas as well [7]. However, one important characteristic of distributed simulation is that there is usually an urgency to compute the final result, but not necessarily to commit the intermediate steps.
Reference: [9] <author> Alain Karsenty and Michel Beaudouin-Lafon. </author> <title> An algorithm for distributed groupware applications. </title> <booktitle> In Proceedings of the International Conference on Distributed Computing Systems, </booktitle> <year> 1993. </year>
Reference-contexts: But in a cooperative work environment such as ours, fast commit is essential. The delay associated with waiting for at most a single primary site per model object in Decaf is typically considerably less than a Time Warp style global sweep of the system would be. The ORESTE <ref> [9] </ref> implementation provides a useful model in which programmers define high-level operations and specify their commutativity and masking relations. One drawback is that there are no high-level operations on multiple objects, nor are there ways of combining multiple high-level operations into transactions.
Reference: [10] <author> G. E. Krasner and S. T. Pope. </author> <title> A Cookbook for Using the Model-View-Controller User Interface Paradigm in Smalltalk-80. </title> <journal> Journal of Object Oriented Programming (JOOP), </journal> <volume> 1(3) </volume> <pages> 26-49, </pages> <month> August </month> <year> 1988. </year>
Reference-contexts: We have implemented a framework called Decaf (Distributed, Extensible Collaborative Application Framework) that meets the above requirements. Our framework extends the well-known Model-View-Controller paradigm of object-based application development <ref> [10] </ref>. In the MVC paradigm, used in GUI-oriented systems such as Smalltalk and InterViews [12], view objects can be attached to model objects in order to track changes to model objects. <p> Then, we present comparison with related work, our experience with using Decaf (Section 5) and finally, some concluding remarks (Section 6). 2 The DECAF Framework As mentioned earlier, Decaf extends the Model-View-Controller paradigm <ref> [10] </ref>. Decaf model object classes are supplied by the framework; the application programmer simply instantiates them (model objects are shown below the horizontal line that separates the framework from the application in Figure 1).
Reference: [11] <author> Leslie Lamport. </author> <title> Time, clocks, and the ordering of events in a distributed system. </title> <journal> Communications of the ACM, </journal> <volume> 21(7) </volume> <pages> 558-565, </pages> <month> July </month> <year> 1978. </year>
Reference-contexts: Each transaction is started at some originating site, where it is assigned a unique virtual time (V T ) prior to execution. The V T is computed as a Lamport time <ref> [11] </ref>, including a site identifier to guarantee uniqueness. When a transaction is initiated, a transaction implementation object is created at the originating site. When updates are propagated to remote replicas, transaction implementation objects are created at those sites.
Reference: [12] <author> Mark A. Linton, Paul R. Calder, and John M. Vlis-sides. InterViews: </author> <title> A C++ graphical interface toolkit. </title> <booktitle> In Proceedings of the USENIX C++ Workshop, </booktitle> <pages> page 11 pp., </pages> <address> Santa Fe, NM, </address> <month> November </month> <year> 1987. </year>
Reference-contexts: We have implemented a framework called Decaf (Distributed, Extensible Collaborative Application Framework) that meets the above requirements. Our framework extends the well-known Model-View-Controller paradigm of object-based application development [10]. In the MVC paradigm, used in GUI-oriented systems such as Smalltalk and InterViews <ref> [12] </ref>, view objects can be attached to model objects in order to track changes to model objects. Views are typically GUI components (e.g., a graph or a window) that display the state of their attached model objects, which contain the actual application data.
Reference: [13] <author> A. Prakash and H. S. Shim. DistView: </author> <title> Support for building efficient collaborative applications using replicated objects. </title> <booktitle> In Proc. Fifth ACM Conference on Computer-Supported Cooperative Work, </booktitle> <pages> pages 153-164. </pages> <publisher> ACM Press, </publisher> <month> October </month> <year> 1994. </year>
Reference-contexts: In a replicated architecture, each user runs an application; the applications are usually identical, and the state or the GUI is "shared" by synchronously mirroring changes to the state of one copy to each of the others <ref> [6, 13] </ref>. 1 IBM TJ Watson Research Center, 30 Saw Mill River Road, Hawthorne, NY 10532, USA. E-mail: fstrom, banavar, klm, mjwg@watson.ibm.com 2 Department of Electrical Engineering and Computer Science, University of Michigan, Ann Arbor, MI, USA.
Reference: [14] <author> Christian Schuckmann, Lutz Kirchner, Jan Schum-mer, and Jorg M. Haake. </author> <title> Designing object-oriented synchronous groupware with COAST. </title> <booktitle> In Proceedings of Computer Supported Collaborative Work CSCW, </booktitle> <address> Boston, MA, </address> <month> November </month> <year> 1996. </year> <note> ACM. </note>
Reference-contexts: A recent system, COAST <ref> [14] </ref>, also attempts to use optimistic execution of transactions with the MVC paradigm for supporting groupware applications. Key differences with our system are the following. First, COAST only supports optimistic views. Second, con-currency algorithms used in COAST assume that all model objects in the application are shared among all participants.
Reference: [15] <author> Robert E. Strom and Shaula Alexander Yemini. </author> <title> Synthesizing distributed and parallel programs through optimistic transformations. </title> <editor> In Yechiam Yemini, editor, </editor> <booktitle> Current Advances in Distributed Computing and Communications, </booktitle> <pages> pages 234-256. </pages> <publisher> Computer Science Press, </publisher> <address> Rockville, MD, </address> <year> 1987. </year>
Reference-contexts: This guess implies that the primary site would not invalidate previous reads by confirming this write. The execution of the transaction takes place optimistically, using strategies derived from the optimistic guess propagation principles defined in Strom and Yemini <ref> [15] </ref>, and applied to a number of distributed systems (e.g. optimistic call streaming [2] and HOPE [5]). However, our algorithm makes certain specializations to reduce message traffic. For RC guesses, the originating site simply records the V T of the transaction which wrote the uncommitted value that was read.
References-found: 15

