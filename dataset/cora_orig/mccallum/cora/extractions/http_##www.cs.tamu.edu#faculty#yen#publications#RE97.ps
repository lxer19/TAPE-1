URL: http://www.cs.tamu.edu/faculty/yen/publications/RE97.ps
Refering-URL: http://www.cs.tamu.edu/faculty/yen/publications/index.html
Root-URL: http://www.cs.tamu.edu
Title: A Systematic Tradeoff Analysis for Conflicting Imprecise Requirements  
Author: John Yen and W. Amos Tiao 
Address: College Station, Texas 77843-3112  
Affiliation: Department of Computer Science Texas A&M University  
Abstract: The need to deal with conflicting system requirements has become increasingly important over the past several years. Often, these requirements are elastic in that they can be satisfied to a degree. The overall goal of this research is to develop a formal framework that facilitates the identification and the tradeoff analysis of conflicting requirements by explicitly capturing their elasticity. Based on a fuzzy set theoretic foundation for representing imprecise requirements, we describe a systematic approach for analyzing the tradeoffs between conflicting requirements using the techniques in decision science. The systematic tradeoff analyses are used for three important tasks in the requirement engineering process: (1) for validating the structure used in aggregating prioritized requirements, (2) for identifying the structures and the parameters of the underlying representation of imprecise requirements, and (3) for assessing the priorities of conflicting requirements. We illustrate these techniques using the requirements of a conference room scheduling system. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> J. Yen, X. Liu, and S. H. Teh, </author> <title> "A fuzzy logic-based methodology for the acquisition and analysis of imprecise requirements," Concurrent Engineering: </title> <journal> Research and Applications, </journal> <volume> no. 2, </volume> <pages> pp. 265-277, </pages> <year> 1994. </year>
Reference-contexts: 1 Introduction There are at least two challenges with requirement engineering <ref> [1, 2] </ref>. First, requirements are usually vague and imprecise in nature. Computer-based analysis, however, requires an explicit formal semantics [3]. Therefore, there is a need to bridge the gap between imprecise requirements and formal specification methods. <p> A requirement is imprecise if it can be satisfied to a degree. More formally, an imprecise requirement is a mapping from a requirement's domain to the range of satisfaction degrees (i.e., the interval <ref> [0; 1] </ref>). We call such a mapping satisfaction function, denoted as Sat R : In essence, the satisfaction function characterizes a fuzzy subset of the domain D that satisfies the imprecise requirement R. <p> In our framework, the canonical form in Zedah's test score semantics is used as a basis for expressing imprecise requirements [11, 12]. The representation of imprecise requirements on a system development process in canonical form is established by the following definition <ref> [2, 1] </ref>. <p> The constant fi could be viewed as the normalization factor that restricts the degree of the satisfaction to <ref> [0; 1] </ref>. Assuming that customers also feel that it is appropriate to use a linear satisfaction function to specify each imprecise requirement, we can obtain the parameters of the linear function using the following theorem.
Reference: [2] <author> X. F. Liu and J. Yen, </author> <title> "An analytic framework for specifying and analyzing imprecise requirements," </title> <booktitle> In Proc. of the 18th International Conference on Software Engineering, </booktitle> <pages> pp. 60-69, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: 1 Introduction There are at least two challenges with requirement engineering <ref> [1, 2] </ref>. First, requirements are usually vague and imprecise in nature. Computer-based analysis, however, requires an explicit formal semantics [3]. Therefore, there is a need to bridge the gap between imprecise requirements and formal specification methods. <p> The conflicting relationships 1 between two imprecise requirements can be inferred based on a reasoning scheme. We have demonstrated elsewhere the application of this inference scheme to the house of quality in concurrent engineering <ref> [2] </ref>. Once the conflicts between requirements are identified, tradeoffs should be made between conflicting requirements. In this paper, we described a systematic approach for analyzing the tradeoffs between conflicting requirements based on the techniques in decision science. <p> In our framework, the canonical form in Zedah's test score semantics is used as a basis for expressing imprecise requirements [11, 12]. The representation of imprecise requirements on a system development process in canonical form is established by the following definition <ref> [2, 1] </ref>. <p> To do this, we have defined four types of significant relationships between requirements: conflicting, cooperative, mutually exclusive, and irrelevant <ref> [2] </ref>. Among these four types of relationships, we are particularly interested in the conflicting relationship. <p> In order to characterize partially conflicting requirements, we introduce the conflicting degree between two requirements. In the definition, we consider not only the number of conflicting cases but also the conflicting extent in each conflicting case. The definition is described below <ref> [13, 2] </ref>. Definition 3 Let R 1 and R 2 be two imprecise requirements of a target system in the domain SP of system development processes. <p> This is one of the main benefits of all fuzzy logic applications. (2) It enables requirement analysts to reason about requirement relationships (e.g., conflicts) using fuzzy logic (more specifically, fuzzy rule-based reasoning). A more detailed discussion on this topic can be found in <ref> [2] </ref>. (3) Finally, it enables complex requirements to be expressed/decomposed using conjunction and disjunction (i.e., fuzzy AND, fuzzy OR) as well as compromise operators in fuzzy decision making. <p> A Conference Room Scheduling System (CRSS) is a software system that generates a conference schedule used by conference room manager <ref> [2] </ref>. <p> Once Theorem 1 holds, the overall satisfaction function can be aggregated by the weighted summation. To illustrate how to use the above theorem in CRSS example, we first identify the relationships between requirements, which were discussed in <ref> [2] </ref>. Among them, we initially identify that R 1 and R 2 are cooperative, and R 2 and R 3 are conflicting. Using the inference mechanism developed in [2], we can infer that R 1 and R 3 have a conflicting relationship. <p> To illustrate how to use the above theorem in CRSS example, we first identify the relationships between requirements, which were discussed in <ref> [2] </ref>. Among them, we initially identify that R 1 and R 2 are cooperative, and R 2 and R 3 are conflicting. Using the inference mechanism developed in [2], we can infer that R 1 and R 3 have a conflicting relationship. This illustrates the second benefits of our approach discussed in Section 2.4. Having detected this conflict, we test the corresponding tradeoff condition to see if these two requirements can be aggregated by the weighted summation.
Reference: [3] <author> C. Heitmeyer, B. Labaw, and D. Kiskis, </author> <title> "Consistency checking of SCR-style requirements specifications," </title> <booktitle> In Proc. of the 2nd IEEE International Symposium on Requirements Engineering, </booktitle> <pages> pp. 56-63, </pages> <year> 1995. </year>
Reference-contexts: 1 Introduction There are at least two challenges with requirement engineering [1, 2]. First, requirements are usually vague and imprecise in nature. Computer-based analysis, however, requires an explicit formal semantics <ref> [3] </ref>. Therefore, there is a need to bridge the gap between imprecise requirements and formal specification methods. Actually, as Balzer et. al. pointed out, informality is an inevitable and ultimately desirable feature of the specification process [4].
Reference: [4] <author> R. Balzer, N. Goldman, and D. Wile, </author> <title> "Informality in program specifications," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 4, no. 2, </volume> <pages> pp. 94-103, </pages> <year> 1978. </year>
Reference-contexts: Computer-based analysis, however, requires an explicit formal semantics [3]. Therefore, there is a need to bridge the gap between imprecise requirements and formal specification methods. Actually, as Balzer et. al. pointed out, informality is an inevitable and ultimately desirable feature of the specification process <ref> [4] </ref>. Second, requirements often conflict with each other, which many conflicts are implicit and difficult to identify [5, 6]. <p> The imprecise nature of requirements leads to a mismatch to the existing formal specification methods. Most existing formal specification methodologies require the requirements to be stated precisely [6] or convert imprecise requirements into precise ones <ref> [4, 7] </ref>. If requirements are specified to be crisp, that is, requirements are either satisfied or not satisfied at all, their capabilities of capturing the semantics of imprecise requirements are limited. The need to deal with conflicting system requirements has become increasingly important over the past several years.
Reference: [5] <author> A. Finkelstein, D. Gabbay, A. Hunter, J. Kramer, and B. Nuseibeh, </author> <title> "Inconsistency handling in mul-tiperspective specifications," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 20, no. 8, </volume> <pages> pp. 569-578, </pages> <month> Aug. </month> <year> 1994. </year>
Reference-contexts: Actually, as Balzer et. al. pointed out, informality is an inevitable and ultimately desirable feature of the specification process [4]. Second, requirements often conflict with each other, which many conflicts are implicit and difficult to identify <ref> [5, 6] </ref>. Assessing the tradeoffs among conflicting requirements is a very challenging issue. fl This article appeared in Proceedings of Third IEEE International Symposium on Requirements Engineering (RE '97), pp. 87-96, January, 1997, Annapolis, Maryland. The imprecise nature of requirements leads to a mismatch to the existing formal specification methods. <p> Viewing conflicts as positive can improve productivity, satisfaction and solution quality. Moreover, handling conflicts in more direct ways actually improves understanding of the requirements and assists with requirement validation [8, 9]. Several works have focused on conflict detection and resolution in requirement engineering <ref> [5, 9, 10] </ref>. They are, however, limited in detecting implicit conflicts and in facilitating a systematic tradeoff analysis. If requirements are crisp, one of the conflicting requirements has to be dropped or modified to resolve the conflict.
Reference: [6] <author> J. Mylopoulos, L. Chung, and B. Nixon, </author> <title> "Representing and using nonfunctional requirements: a process-oriented approach," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 18, no. 6, </volume> <pages> pp. 483-497, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: Actually, as Balzer et. al. pointed out, informality is an inevitable and ultimately desirable feature of the specification process [4]. Second, requirements often conflict with each other, which many conflicts are implicit and difficult to identify <ref> [5, 6] </ref>. Assessing the tradeoffs among conflicting requirements is a very challenging issue. fl This article appeared in Proceedings of Third IEEE International Symposium on Requirements Engineering (RE '97), pp. 87-96, January, 1997, Annapolis, Maryland. The imprecise nature of requirements leads to a mismatch to the existing formal specification methods. <p> The imprecise nature of requirements leads to a mismatch to the existing formal specification methods. Most existing formal specification methodologies require the requirements to be stated precisely <ref> [6] </ref> or convert imprecise requirements into precise ones [4, 7]. If requirements are specified to be crisp, that is, requirements are either satisfied or not satisfied at all, their capabilities of capturing the semantics of imprecise requirements are limited.
Reference: [7] <author> W. L. Johnson, M. S. Feather, and D. R. Har-ris, </author> <title> "The KBSA requirements/specification facet: 11 Aries," </title> <booktitle> In Proc. of the 6th Annual Knowledge--Based Software Engineering Conference, </booktitle> <pages> pp. 156-162, </pages> <year> 1991. </year>
Reference-contexts: The imprecise nature of requirements leads to a mismatch to the existing formal specification methods. Most existing formal specification methodologies require the requirements to be stated precisely [6] or convert imprecise requirements into precise ones <ref> [4, 7] </ref>. If requirements are specified to be crisp, that is, requirements are either satisfied or not satisfied at all, their capabilities of capturing the semantics of imprecise requirements are limited. The need to deal with conflicting system requirements has become increasingly important over the past several years.
Reference: [8] <author> S. Easterbrook, </author> <title> "Resolving requirements conflicts with computer-supported negotiation," In Requirements engineering: social and technical issues, </title> <editor> M. Jirotka and J. Goguen, </editor> <booktitle> editors, </booktitle> <pages> pp. 41-65, </pages> <publisher> Academic press, </publisher> <year> 1994. </year>
Reference-contexts: Conflicts are inevitable part of requirement elicitation process. Viewing conflicts as positive can improve productivity, satisfaction and solution quality. Moreover, handling conflicts in more direct ways actually improves understanding of the requirements and assists with requirement validation <ref> [8, 9] </ref>. Several works have focused on conflict detection and resolution in requirement engineering [5, 9, 10]. They are, however, limited in detecting implicit conflicts and in facilitating a systematic tradeoff analysis.
Reference: [9] <author> W. Robinson and S. Fickas, </author> <title> "Supporting multi-perspective requirements engineering," </title> <booktitle> In Proc. of the 1st International Conference on Requirements Engineering, </booktitle> <pages> pp. 206-215, </pages> <year> 1994. </year>
Reference-contexts: Conflicts are inevitable part of requirement elicitation process. Viewing conflicts as positive can improve productivity, satisfaction and solution quality. Moreover, handling conflicts in more direct ways actually improves understanding of the requirements and assists with requirement validation <ref> [8, 9] </ref>. Several works have focused on conflict detection and resolution in requirement engineering [5, 9, 10]. They are, however, limited in detecting implicit conflicts and in facilitating a systematic tradeoff analysis. <p> Viewing conflicts as positive can improve productivity, satisfaction and solution quality. Moreover, handling conflicts in more direct ways actually improves understanding of the requirements and assists with requirement validation [8, 9]. Several works have focused on conflict detection and resolution in requirement engineering <ref> [5, 9, 10] </ref>. They are, however, limited in detecting implicit conflicts and in facilitating a systematic tradeoff analysis. If requirements are crisp, one of the conflicting requirements has to be dropped or modified to resolve the conflict.
Reference: [10] <author> B. Boehm and H. </author> <title> In, "Identifying quality requirement conflicts," </title> <journal> IEEE software, </journal> <pages> pp. 25-35, </pages> <month> March </month> <year> 1996. </year>
Reference-contexts: Viewing conflicts as positive can improve productivity, satisfaction and solution quality. Moreover, handling conflicts in more direct ways actually improves understanding of the requirements and assists with requirement validation [8, 9]. Several works have focused on conflict detection and resolution in requirement engineering <ref> [5, 9, 10] </ref>. They are, however, limited in detecting implicit conflicts and in facilitating a systematic tradeoff analysis. If requirements are crisp, one of the conflicting requirements has to be dropped or modified to resolve the conflict.
Reference: [11] <author> L. Zadeh, </author> <title> "Test-score semantics as a basis for a computational approach to the representation of meaning," </title> <journal> Literacy Linguistic Computing, </journal> <volume> vol. 5, no. 1, </volume> <pages> pp. 24-35, </pages> <year> 1986. </year>
Reference-contexts: In our framework, the canonical form in Zedah's test score semantics is used as a basis for expressing imprecise requirements <ref> [11, 12] </ref>. The representation of imprecise requirements on a system development process in canonical form is established by the following definition [2, 1].
Reference: [12] <author> L. A. </author> <title> Zadeh, </title> <journal> "Soft computing and fuzzy logic," IEEE software, </journal> <pages> pp. 48-56, </pages> <month> November </month> <year> 1994. </year>
Reference-contexts: In our framework, the canonical form in Zedah's test score semantics is used as a basis for expressing imprecise requirements <ref> [11, 12] </ref>. The representation of imprecise requirements on a system development process in canonical form is established by the following definition [2, 1].
Reference: [13] <author> J. Lee, J. Kuo, and W. Huang, </author> <title> "Classifying, analyzing and representing informal requirements," </title> <booktitle> In Proc. of the sixth international fuzzy systems association world congress (IFSA'95), </booktitle> <pages> pp. 645-648, </pages> <year> 1995. </year>
Reference-contexts: In order to characterize partially conflicting requirements, we introduce the conflicting degree between two requirements. In the definition, we consider not only the number of conflicting cases but also the conflicting extent in each conflicting case. The definition is described below <ref> [13, 2] </ref>. Definition 3 Let R 1 and R 2 be two imprecise requirements of a target system in the domain SP of system development processes.
Reference: [14] <author> R. L. Keeney and H. Raiffa, </author> <title> Decisions with multiple objectives: preferences and value tradeoffs, </title> <publisher> Wiley, </publisher> <address> New York, </address> <year> 1976. </year>
Reference-contexts: That is, we should explore a feasible requirement that maximize the overall degree of satisfaction. Keeney and Raiffa have developed the concepts of utility function, indifference curve and Marginal Rate of Substitution (MRS) for the tradeoff analysis between multiple criteria in decision science <ref> [14] </ref>. A utility function maps each possible decision to the overall satisfaction degree (i.e., the utility) of the decision. An indifference curve represents all the alternative combinations of two decision attributes X and Y for which a customer is equally well off. <p> Sat0 R 1 (x 2 ) 1 C = A c : (3) Thus we have proven the theorem. 2 Based on the works in decision science, the corresponding tradeoff condition provides us with neces sary and sufficient conditions for an important result, which is described in the following theorem <ref> [14] </ref>. Theorem 2 A satisfaction function is additive if and only if the corresponding tradeoff condition is satisfied. From Theorem 1 and Theorem 2, we have developed a procedure to assess the validity of the weighted summation. <p> Based on techniques for assessing utility function in decision science <ref> [14] </ref>, we have developed several techniques that assist requirement engineers to elicit the structures and the parameters of the satisfaction functions from the customer. 5.1 Assessing Satisfaction Function Using MRS Even though the customers usually know the qualitative nature of imprecise requirements, they typically find it difficult to directly specify the <p> In this section, we describe a systematic procedure for eliciting individual satisfaction functions. Our approach is based on the technique for assessing utility function in decision science <ref> [14] </ref>. Let attributes X and Y be two attributes constrained by imprecise requirements R i and R j , respectively, and they satisfy the corresponding tradeoff condition introduced in section 4 (i.e., their satisfaction function is additive). We first define the concept of midvalue as follows.
Reference: [15] <author> H. Zimmermann, </author> <title> Fuzzy set theory and its applications, </title> <publisher> Kluwer Academic Publishers, </publisher> <year> 1991. </year> <month> 12 </month>
Reference-contexts: The satisfaction function of this requirement can be described as Sat R (x) = (Sat R 1 (x) Sat R 2 (x)) Sat R 3 (x); where is a fuzzy AND operator (i.e., t-norm) and is a fuzzy OR operator (i.e., t-conorm) <ref> [15] </ref>. 4 Assessing the Validity of Operator Compromise operators are often used to achieve a tradeoff among conflicting requirements. One of the most widely used compromise operators to aggregate requirements is the weighted summation.
References-found: 15

