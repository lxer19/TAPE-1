URL: http://www.neci.nj.nec.com/homepages/avg/pub/neci-tr-97-103.ps.gz
Refering-URL: http://www.neci.nj.nec.com/homepages/avg/webpub/node5.html
Root-URL: 
Email: [avg,satish]@research.nj.nec.com  
Title: Flows in Undirected Unit Capacity Networks  
Author: Andrew V. Goldberg Satish Rao 
Note: June 1997  
Address: 4 Independence Way Princeton, NJ 08540  
Affiliation: NEC Research Institute  
Abstract: Technical report # 97-103 NEC Research Institute, Inc. Abstract We describe an O(min(m; n 3=2 )m 1=2 )-time algorithm for finding maximum flows in undi-rected networks with unit capacities and no parallel edges. This improves upon the previous bound of Karzanov and Even and Tarjan when m = !(n 3=2 ), and upon a randomized bound of Karger when v = (n 7=4 =m 1=2 ). (Here v is the maximum flow value.) 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> E. A. Dinic. </author> <title> Algorithm for Solution of a Problem of Maximum Flow in Networks with Power Estimation. </title> <journal> Soviet Math. Dokl., </journal> <volume> 11 </volume> <pages> 1277-1280, </pages> <year> 1970. </year>
Reference-contexts: Until recently, the fastest known way to solve this problem was using a reduction to the directed problem with unit capacities and no parallel arcs. Karzanov [7] and Even and Tarjan [2] have shown that Dinitz's blocking flow algorithm <ref> [1] </ref>, applied to the directed problem, runs in O (min (m 1=2 ; n 2=3 )m) time. (Here n and m is the number of input vertices and edges, respectively.) Recently, Karger [6] developed two randomized algorithms for the undirected problem, with running times of O fl (m 5=6 n 1=3 <p> In the unit capacity case, a blocking flow in an acyclic graph H 0 can be found in O (m) time. Dinitz's algorithm <ref> [1] </ref> for finding maximum flows in undirected graphs repeatedly augments the current flow by a blocking flow in the graph induced by the residual arcs on shortest paths from s to t.
Reference: [2] <author> S. Even and R. E. Tarjan. </author> <title> Network Flow and Testing Graph Connectivity. </title> <journal> SIAM J. Comput., </journal> <volume> 4 </volume> <pages> 507-518, </pages> <year> 1975. </year> <month> 5 </month>
Reference-contexts: Until recently, the fastest known way to solve this problem was using a reduction to the directed problem with unit capacities and no parallel arcs. Karzanov [7] and Even and Tarjan <ref> [2] </ref> have shown that Dinitz's blocking flow algorithm [1], applied to the directed problem, runs in O (min (m 1=2 ; n 2=3 )m) time. (Here n and m is the number of input vertices and edges, respectively.) Recently, Karger [6] developed two randomized algorithms for the undirected problem, with running <p> Dinitz's algorithm [1] for finding maximum flows in undirected graphs repeatedly augments the current flow by a blocking flow in the graph induced by the residual arcs on shortest paths from s to t. Based on the following two lemmas, Karzanov [7] and Even and Tarjan <ref> [2] </ref> have shown that Dinitz's algorithm terminates in min (n 2=3 ; m 1=2 ) iterations. Lemma 2.1 [2, 7] Given a network G with no parallel edges and an undirected flow f , the residual flow is at most (2n=D f ) 2 . <p> Based on the following two lemmas, Karzanov [7] and Even and Tarjan [2] have shown that Dinitz's algorithm terminates in min (n 2=3 ; m 1=2 ) iterations. Lemma 2.1 <ref> [2, 7] </ref> Given a network G with no parallel edges and an undirected flow f , the residual flow is at most (2n=D f ) 2 . Lemma 2.2 [2, 7] Given a network G a flow f , the residual flow is at most m=D f . 3 Network Sparsification <p> Lemma 2.1 <ref> [2, 7] </ref> Given a network G with no parallel edges and an undirected flow f , the residual flow is at most (2n=D f ) 2 . Lemma 2.2 [2, 7] Given a network G a flow f , the residual flow is at most m=D f . 3 Network Sparsification We extend the sparsification technique of Nagamochi and Ibaraki [8] to residual graphs as follows. <p> Lemma 4.2 At any point during the algorithm, jE 1 f j 4n 3=2 . Proof. The size of E 1 f is upper bounded by the total length of augmenting paths in a blocking flow algorithm. We proceed by showing, as in <ref> [2] </ref>, that this bound is as stated in the lemma. The algorithm performs at most (n=d) 2 augmentations when 2d D f &lt; 4d. Note that the algorithm always augments flow on shortest paths. <p> Theorem 4.3 The algorithm runs in time O (min (m; n 3=2 )m 1=2 ). Proof. If m = O (n 3=2 ), then by <ref> [2, 7] </ref>, the running time is O (m 3=2 ) which is O (n 3=2 m 1=2 ) for these values of m. <p> Since D f increases at each iteration, these iterations take a total of O (n 3=2 m 1=2 ) time. During the final iterations of the algorithm, when n (2n=D f ) 2 4n 3=2 , we have m = O (n 3=2 ) and, by <ref> [2, 7] </ref>, these iterations take O (n 9=4 ) time. This is O (n 3=2 m 1=2 ) for m = (n 3=2 ). Finally we account for the remaining iterations. Each iteration takes O (m) time.
Reference: [3] <author> L. R. Ford, Jr. and D. R. Fulkerson. </author> <title> Flows in Networks. </title> <publisher> Princeton Univ. Press, </publisher> <address> Princeton, NJ, </address> <year> 1962. </year>
Reference-contexts: We note that the Nagomachi and Ibaraki sparsification technique has previously been used to improve performance of maximum flow algorithms for undirected unit capacity networks when v, the maximum flow value, is small. In combination with the augmenting path algorithm <ref> [3] </ref>, this technique gives an O (nv 2 ) time bound. In combination with Karger's second algorithm, get an O fl (nv 5=3 ) expected time bound.
Reference: [4] <author> H. N. Gabow. </author> <title> A Matroid Approach to Finding Edge Connectivity and Packing Arbores-cences. </title> <booktitle> In Proc. 23rd Annual ACM Symposium on Theory of Computing, </booktitle> <year> 1991. </year>
Reference-contexts: In combination with the augmenting path algorithm [3], this technique gives an O (nv 2 ) time bound. In combination with Karger's second algorithm, get an O fl (nv 5=3 ) expected time bound. See, for example, <ref> [4] </ref>. 2 Preliminaries For this paper, we consider computing a maximum flow in an undirected graph G = (V; E) with two distinguished vertices s and t. We consider only zero-one valued flows. Let jV j = n and jEj = m.
Reference: [5] <author> A. V. Goldberg and R. Kennedy. </author> <title> Global Price Updates Help. </title> <type> Technical Report STAN-CS-94-1509, </type> <institution> Department of Computer Science, Stanford University, </institution> <year> 1994. </year> <note> To appear in SIAM J. on Discrete Math. </note>
Reference-contexts: Because the sparsification is quite efficient, our approach may be practical, especially if a push-relabel algorithm such that of <ref> [5] </ref> is used instead of the blocking flow method. It would be interesting to verify the practicality experimentally.
Reference: [6] <author> D. R. Karger. </author> <title> Using Random Sampling to Find Maximum Flows in Uncapacitated Undi-rected Graphs. </title> <note> In Proc. 29th Annual ACM Symposium on Theory of Computing, page (to appear), </note> <year> 1997. </year>
Reference-contexts: Karzanov [7] and Even and Tarjan [2] have shown that Dinitz's blocking flow algorithm [1], applied to the directed problem, runs in O (min (m 1=2 ; n 2=3 )m) time. (Here n and m is the number of input vertices and edges, respectively.) Recently, Karger <ref> [6] </ref> developed two randomized algorithms for the undirected problem, with running times of O fl (m 5=6 n 1=3 v 2=3 ) and O fl (m 2=3 n 1=3 v). (Here v is the maximum flow value.) We introduce an O (min (m; n 3=2 )m 1=2 ) time algorithm for
Reference: [7] <editor> A. V. Karzanov. O nakhozhdenii maksimal'nogo potoka v setyakh spetsial'nogo vida i nekotorykh prilozheniyakh. In Matematicheskie Voprosy Upravleniya Proizvodstvom, </editor> <volume> volume 5. </volume> <publisher> Moscow State University Press, </publisher> <address> Moscow, </address> <year> 1973. </year> <title> In Russian; title translation: On Finding Maximum Flows in Network with Special Structure and Some Applications. </title>
Reference-contexts: 1 Introduction In this paper we consider the undirected maximum flow problem in a network with unit capacities and no parallel edges. Until recently, the fastest known way to solve this problem was using a reduction to the directed problem with unit capacities and no parallel arcs. Karzanov <ref> [7] </ref> and Even and Tarjan [2] have shown that Dinitz's blocking flow algorithm [1], applied to the directed problem, runs in O (min (m 1=2 ; n 2=3 )m) time. (Here n and m is the number of input vertices and edges, respectively.) Recently, Karger [6] developed two randomized algorithms for <p> Dinitz's algorithm [1] for finding maximum flows in undirected graphs repeatedly augments the current flow by a blocking flow in the graph induced by the residual arcs on shortest paths from s to t. Based on the following two lemmas, Karzanov <ref> [7] </ref> and Even and Tarjan [2] have shown that Dinitz's algorithm terminates in min (n 2=3 ; m 1=2 ) iterations. Lemma 2.1 [2, 7] Given a network G with no parallel edges and an undirected flow f , the residual flow is at most (2n=D f ) 2 . <p> Based on the following two lemmas, Karzanov [7] and Even and Tarjan [2] have shown that Dinitz's algorithm terminates in min (n 2=3 ; m 1=2 ) iterations. Lemma 2.1 <ref> [2, 7] </ref> Given a network G with no parallel edges and an undirected flow f , the residual flow is at most (2n=D f ) 2 . Lemma 2.2 [2, 7] Given a network G a flow f , the residual flow is at most m=D f . 3 Network Sparsification <p> Lemma 2.1 <ref> [2, 7] </ref> Given a network G with no parallel edges and an undirected flow f , the residual flow is at most (2n=D f ) 2 . Lemma 2.2 [2, 7] Given a network G a flow f , the residual flow is at most m=D f . 3 Network Sparsification We extend the sparsification technique of Nagamochi and Ibaraki [8] to residual graphs as follows. <p> Theorem 4.3 The algorithm runs in time O (min (m; n 3=2 )m 1=2 ). Proof. If m = O (n 3=2 ), then by <ref> [2, 7] </ref>, the running time is O (m 3=2 ) which is O (n 3=2 m 1=2 ) for these values of m. <p> Since D f increases at each iteration, these iterations take a total of O (n 3=2 m 1=2 ) time. During the final iterations of the algorithm, when n (2n=D f ) 2 4n 3=2 , we have m = O (n 3=2 ) and, by <ref> [2, 7] </ref>, these iterations take O (n 9=4 ) time. This is O (n 3=2 m 1=2 ) for m = (n 3=2 ). Finally we account for the remaining iterations. Each iteration takes O (m) time.
Reference: [8] <author> H. Nagamochi and T. Ibaraki. </author> <title> A Linear-Time Algorithm for Finding a Sparse k-Connected Spanning Subgraph of a k-Connected Graph. </title> <journal> Algorithmica, </journal> <volume> 7 </volume> <pages> 583-596, </pages> <year> 1992. </year>
Reference-contexts: This improves the previous deterministic bound for m = !(n 3=2 ) and Karger's randomized bound for v = (n 7=4 =m 1=2 ): Our improvements are based on the sparsification technique of Nagamochi and Ibaraki <ref> [8] </ref>. Their technique applies to undirected (e.g. symmetric) graphs. We use their technique in the context of residual graphs of flows in undirected graphs, which are not symmetric. <p> Lemma 2.2 [2, 7] Given a network G a flow f , the residual flow is at most m=D f . 3 Network Sparsification We extend the sparsification technique of Nagamochi and Ibaraki <ref> [8] </ref> to residual graphs as follows. <p> Find E 1 ; E 2 ; :::E v where E i is a maximal spanning forest in (V; E 0 f [ j&lt;i E j ). 2. Output (V; E 1 f + [ jv E j ). The following lemma follows from <ref> [8] </ref>. Lemma 3.1 There is an O (m) implementation of Sparsify. Sparsify is defined so that the following lemma holds. The proof of the lemma is analogous to the proof of Lemma 2.1 in [9].
Reference: [9] <author> H. Nagamochi and T. Ibaraki. </author> <title> Computing Edge-Connectivity in Multigraphs and Capaci-tated Graphs. </title> <journal> SIAM J. Disc. Math., </journal> <volume> 5 </volume> <pages> 54-66, </pages> <year> 1992. </year> <month> 6 </month>
Reference-contexts: The following lemma follows from [8]. Lemma 3.1 There is an O (m) implementation of Sparsify. Sparsify is defined so that the following lemma holds. The proof of the lemma is analogous to the proof of Lemma 2.1 in <ref> [9] </ref>. Lemma 3.2 The residual flow in the network output by Sparsify (v; G; f ) is at least min (v; r), where r is the residual flow value in G f . Proof. We prove a stronger claim by induction.
References-found: 9

