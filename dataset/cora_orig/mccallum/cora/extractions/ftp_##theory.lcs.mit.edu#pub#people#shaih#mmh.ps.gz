URL: ftp://theory.lcs.mit.edu/pub/people/shaih/mmh.ps.gz
Refering-URL: http://theory.lcs.mit.edu/~shaih/mypapers.html
Root-URL: 
Email: Email: shaih@theory.lcs.mit.edu.  Email: hugo@watson.ibm.com  
Title: MMH: Software Message Authentication in the Gbit/second Rates  
Author: Shai Halevi Hugo Krawczyk 
Address: Square, Cambridge, MA 02139, USA.  PO Box 704, Yorktown Heights, New York 10598, USA.  
Affiliation: Lab. of Computer Science, Massachusetts Institute of Technology, 545 Tech  at IBM Watson Research Center. IBM T.J. Watson Research Center,  
Date: December 19, 1996  
Note: Extended Abstract  Work was done while the author was  
Abstract: We describe a construction of almost universal hash functions suitable for very fast software implementation and applicable to the hashing of variable size data and fast cryptographic message authentication. Our construction uses fast single precision arithmetic which is increasingly supported by modern processors due to the growing needs for fast arithmetic posed by multimedia applications. We report on hand-optimized assembly implementations on a 150 MHz PowerPC 604 and a 150 MHz Pentium-Pro, which achieve hashing speeds of 350 to 820 Mbit/sec, depending on the desired level of security (or collision probability), and a rate of more than 1 Gbit/sec on a 200 MHz Pentium-Pro. This represents a significant speed-up over current software implementations of universal hashing and other message authentication techniques (e.g., MD5-based). Moreover, our construction is specifically designed to take advantage of emerging microprocessor technologies (such as Intel's MMX, 64-bit architectures and others) and then best suited to accommodate the growing performance needs of cryptographic (and other universal hashing) applications. The construction is based on techniques due to Carter and Wegman for universal hashing using modular multilinear functions that we carefully modify to allow for fast software implementation. We prove the resultant construction to retain the necessary mathematical properties required for its use in hashing and message authentication. 
Abstract-found: 1
Intro-found: 1
Reference: [AS96] <editor> M. Atici and D. Stinson. </editor> <booktitle> Universal Hashing and Multiple Authentication Advances in Cryptology - CRYPTO '96 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 1109, </volume> <editor> N. Koblitz, ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <pages> pp. 16-30. </pages>
Reference-contexts: The use of universal hashing for authentication (introduced by Wegman and Carter [WC81] as well) received much attention lately. In particular, many recent works deal with efficient implementation of universal hashing as a tool for achieving fast and secure message authentication (e.g., <ref> [St94, Kr94, Kr95, Ro95, AS96, HJ96, Sh96] </ref>). This is also the motivation for our work; however, the construction presented here apply to the other (non-cryptographic) uses of universal hashing as well.
Reference: [BKR] <author> M. Bellare, J. Kilian and P. Rogaway. </author> <title> The security of cipher block chaining. </title> <booktitle> Advances in Cryptology - CRYPTO '94 Proceedings, Lecture Notes in Computer Science Vol. </booktitle> <volume> 839, </volume> <editor> Y. Desmedt, ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <pages> pp. 341-358. </pages>
Reference-contexts: For a MAC function to be "good", any adversary with "reasonable" resources (time, memory, number of queries, etc.) should have only a negligible probability of breaking the MAC. We refer to <ref> [BKR] </ref> for a formal definition of security of MAC functions.
Reference: [BGV96] <author> A. Bosselaers, R. Govaerts, J. Vandewalle. </author> <title> Fast Hashing on the Pentium, </title> <booktitle> Advances in Cryptology - CRYPTO '96 Proceedings Lecture Notes in Computer Science Vol. </booktitle> <volume> 1109, </volume> <editor> N. Koblitz, ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <pages> pp. </pages> <address> 298- 312. </address>
Reference-contexts: An exact comparison is not possible since the data available on the most efficient implementations of other functions are based on different platforms. The reader is referred to [Sh96] for results on the implementation of division hash (or cryptographic CRC [Ra79, Kr94]), and to <ref> [BGV96] </ref> for results on the implementation of MD5 and SHA-1 which are currently the most popular bases for software implementation of message authentication codes. <p> This implementation achieves a rate of about 160 Mbit/second on a 120 MHz Pentium for the 64-bit variant (message in memory). This is somewhat faster than the performance reported in [Sh96] for the polynomial division function and in <ref> [BGV96] </ref> for MD5, but not as impressive as the other speeds reported above. It is important to note that the above results are for bulk data processing.
Reference: [Br82] <author> G. Brassard. </author> <title> On computationally secure authentication tags requiring short secret shared keys, </title> <booktitle> Advances in Cryptology - CRYPTO '82 Proceedings, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1983, </year> <pages> pp. 79-86. </pages>
Reference-contexts: One can also directly apply a pseudorandom function to the output of the hash function concatenated with a counter. The reader is referred to <ref> [WC81, Br82, St94, Kr94, Ro95, Sh96] </ref> for more elaborate discussions of these issues.
Reference: [CW79] <author> L. Carter and M. Wegman. </author> <title> Universal Hash Functions. </title> <editor> J. </editor> <booktitle> of Computer and System Science 18, </booktitle> <year> 1979, </year> <pages> pp. 143-154. </pages>
Reference-contexts: 1 Introduction Universal hash functions, which were first introduced by Carter and Wegman in <ref> [CW79] </ref>, have a wide range of applications in many areas of computer science, including compilers, databases, search engines, parallel architectures, message authentication, complexity theory and many others. The use of universal hashing for authentication (introduced by Wegman and Carter [WC81] as well) received much attention lately. <p> The probabilities below, denoted by Pr h2H [], are taken over the choice of h 2 H according to a given probability distribution on H (usually, the uniform distribution). These definitions and terminology are due to Carter and Wegman <ref> [CW79, WC81] </ref>, Krawczyk [Kr94], Rogaway [Ro95] and Stinson [St95]. Definition 1: 1. <p> In the reminder of this paper we concentrate on the construction of an efficient *-AU-universal family of hash functions for small *. 2.4 A Well-Known Construction The starting point for our construction is a well known construction due to Carter and Wegman <ref> [CW79] </ref>. This construction works in the finite field Z p for some prime integer p. The family of hash functions consists of all the multilinear functions over Z k p for some integer k.
Reference: [CW] <author> L. Carter and M. Wegman. </author> <title> Private Communication. </title>
Reference-contexts: However, there is no (official) syntax in high-level programming language to access these operations, so we write our implementation in assembly language. 3 2 The idea is adopted from a suggestion by Carter and Wegman <ref> [CW] </ref> to use the primes 2 16 + 1 or 2 31 1.
Reference: [GMR88] <author> S. Goldwasser, S. Micali and R. Rivest. </author> <title> A digital signature scheme secure against adaptive chosen-message attacks. </title> <journal> SIAM Journal of Computing, </journal> <volume> vol. 17, no. </volume> <month> 2 (April </month> <year> 1988), </year> <pages> pp. 281-308. </pages>
Reference-contexts: On receipt of (m 0 ; 0 ), the receiver repeats this computation and verifies that 0 = M AC x (m 0 ). We evaluate the security of a MAC function in the usual model which was introduced in <ref> [GMR88] </ref>. The adversary A, which is not given the shared secret key, has as a goal to forge the MAC value for a message not sent between the legitimate parties.
Reference: [HJ96] <author> T. Helleseth and T. Johansson. </author> <title> Universal Hash Functions from Exponential Sums over Finite Fields Advances in Cryptology - CRYPTO '96 Proceedings, </title> <booktitle> Lecture Notes in Computer Science Vol. </booktitle> <volume> 1109, </volume> <editor> N. Koblitz, ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <pages> pp. 31-44. </pages>
Reference-contexts: The use of universal hashing for authentication (introduced by Wegman and Carter [WC81] as well) received much attention lately. In particular, many recent works deal with efficient implementation of universal hashing as a tool for achieving fast and secure message authentication (e.g., <ref> [St94, Kr94, Kr95, Ro95, AS96, HJ96, Sh96] </ref>). This is also the motivation for our work; however, the construction presented here apply to the other (non-cryptographic) uses of universal hashing as well.
Reference: [Kr94] <author> H. Krawczyk. </author> <title> LFSR-based Hashing and Authentication. </title> <booktitle> Proceedings of CRYPTO '94, Lecture Notes in Computer Science, </booktitle> <volume> vol. 839, </volume> <publisher> Springer-Verlag, </publisher> <year> 1994, </year> <pages> pp. 129-139. </pages>
Reference-contexts: The use of universal hashing for authentication (introduced by Wegman and Carter [WC81] as well) received much attention lately. In particular, many recent works deal with efficient implementation of universal hashing as a tool for achieving fast and secure message authentication (e.g., <ref> [St94, Kr94, Kr95, Ro95, AS96, HJ96, Sh96] </ref>). This is also the motivation for our work; however, the construction presented here apply to the other (non-cryptographic) uses of universal hashing as well. <p> In this paper we strongly demonstrate the validity of these properties. We show how to build very fast universal hash families with good (and controllable) levels of security. Our 1 emphasis is on high speed implementation using software only. (For hardware optimized universal hashing see <ref> [Kr94] </ref>.) To this end, we exploit todays' microprocessor technology as well as the current trends in microprocessor design. On a very high level, this construction is obtained by implementing a well-known family of universal hash functions and then modifying the implementation so as to eliminate costly software operations. <p> An exact comparison is not possible since the data available on the most efficient implementations of other functions are based on different platforms. The reader is referred to [Sh96] for results on the implementation of division hash (or cryptographic CRC <ref> [Ra79, Kr94] </ref>), and to [BGV96] for results on the implementation of MD5 and SHA-1 which are currently the most popular bases for software implementation of message authentication codes. <p> The probabilities below, denoted by Pr h2H [], are taken over the choice of h 2 H according to a given probability distribution on H (usually, the uniform distribution). These definitions and terminology are due to Carter and Wegman [CW79, WC81], Krawczyk <ref> [Kr94] </ref>, Rogaway [Ro95] and Stinson [St95]. Definition 1: 1. <p> the sender computes the authentication tag h (m i ) + d i , that is, M AC h;d (m i ) def 4 is drawn from an *-AU-universal family the probability of an adversary (even one with unlimited computational power) to forge a single message is bounded by * <ref> [WC81, Kr94] </ref>. If the attacker is allowed to perform q verification queries then its probability to successfully forge a MAC is at most q* (notice that in this case passive eavesdropping does not buy anything to the attacker, only active and then easier to detect attacks can help him). <p> One can also directly apply a pseudorandom function to the output of the hash function concatenated with a counter. The reader is referred to <ref> [WC81, Br82, St94, Kr94, Ro95, Sh96] </ref> for more elaborate discussions of these issues.
Reference: [Kr95] <author> H. Krawczyk. </author> <title> New Hash Functions for Message Authentication. </title> <booktitle> Proceedings of EUROCRYPT '95, Lecture Notes in Computer Science, </booktitle> <volume> vol. 921, </volume> <publisher> Springer-Verlag, </publisher> <year> 1995, </year> <pages> pp. 301-310. </pages>
Reference-contexts: The use of universal hashing for authentication (introduced by Wegman and Carter [WC81] as well) received much attention lately. In particular, many recent works deal with efficient implementation of universal hashing as a tool for achieving fast and secure message authentication (e.g., <ref> [St94, Kr94, Kr95, Ro95, AS96, HJ96, Sh96] </ref>). This is also the motivation for our work; however, the construction presented here apply to the other (non-cryptographic) uses of universal hashing as well.
Reference: [Ra79] <author> Rabin, M.O., </author> <title> "Fingerprinting by Random Polynomials", </title> <type> Tech. Rep. </type> <institution> TR-15-81, Center for Research in Computing Technology, Harvard Univ., </institution> <address> Cambridge, Mass., </address> <year> 1981. </year>
Reference-contexts: An exact comparison is not possible since the data available on the most efficient implementations of other functions are based on different platforms. The reader is referred to [Sh96] for results on the implementation of division hash (or cryptographic CRC <ref> [Ra79, Kr94] </ref>), and to [BGV96] for results on the implementation of MD5 and SHA-1 which are currently the most popular bases for software implementation of message authentication codes.
Reference: [Ro95] <author> P. Rogaway. </author> <title> Bucket Hashing and its application to Fast Message Authentication. </title> <booktitle> Proceedings of CRYPTO '95, Lecture Notes in Computer Science, </booktitle> <volume> vol. 963, </volume> <publisher> Springer-Verlag, </publisher> <year> 1995, </year> <pages> pp. 15-25. </pages>
Reference-contexts: The use of universal hashing for authentication (introduced by Wegman and Carter [WC81] as well) received much attention lately. In particular, many recent works deal with efficient implementation of universal hashing as a tool for achieving fast and secure message authentication (e.g., <ref> [St94, Kr94, Kr95, Ro95, AS96, HJ96, Sh96] </ref>). This is also the motivation for our work; however, the construction presented here apply to the other (non-cryptographic) uses of universal hashing as well. <p> The probabilities below, denoted by Pr h2H [], are taken over the choice of h 2 H according to a given probability distribution on H (usually, the uniform distribution). These definitions and terminology are due to Carter and Wegman [CW79, WC81], Krawczyk [Kr94], Rogaway <ref> [Ro95] </ref> and Stinson [St95]. Definition 1: 1. <p> One can also directly apply a pseudorandom function to the output of the hash function concatenated with a counter. The reader is referred to <ref> [WC81, Br82, St94, Kr94, Ro95, Sh96] </ref> for more elaborate discussions of these issues. <p> However, we remark that MMH does not need of particularly long messages in order to achieve its superior performance relative to other universal hash functions (this is to be contrasted, for example, with bucket hashing <ref> [Ro95] </ref>). 3.4 Further issues and variants Variants. Some further optimizations to our implementation can be achieved by introducing some changes to the definition of MMH. In particular, by exploiting some architecture-specific optimizations we have achieved performance improvements of about 10% over the above reported figures.
Reference: [Sh96] <author> V. Shoup. </author> <title> On Fast and Provably Secure Message Authentication Based on Universal Hashing Advances in Cryptology - CRYPTO '96 Proceedings, </title> <booktitle> Lecture Notes in Computer Science Vol. </booktitle> <volume> 1109, </volume> <editor> N. Koblitz, ed., </editor> <publisher> Springer-Verlag, </publisher> <year> 1996. </year> <pages> pp. 313-328. </pages>
Reference-contexts: The use of universal hashing for authentication (introduced by Wegman and Carter [WC81] as well) received much attention lately. In particular, many recent works deal with efficient implementation of universal hashing as a tool for achieving fast and secure message authentication (e.g., <ref> [St94, Kr94, Kr95, Ro95, AS96, HJ96, Sh96] </ref>). This is also the motivation for our work; however, the construction presented here apply to the other (non-cryptographic) uses of universal hashing as well. <p> This represents a significant speed-up over current software implementations of universal hashing, or any other secure message authentication technique. An exact comparison is not possible since the data available on the most efficient implementations of other functions are based on different platforms. The reader is referred to <ref> [Sh96] </ref> for results on the implementation of division hash (or cryptographic CRC [Ra79, Kr94]), and to [BGV96] for results on the implementation of MD5 and SHA-1 which are currently the most popular bases for software implementation of message authentication codes. <p> One can also directly apply a pseudorandom function to the output of the hash function concatenated with a counter. The reader is referred to <ref> [WC81, Br82, St94, Kr94, Ro95, Sh96] </ref> for more elaborate discussions of these issues. <p> This implementation achieves a rate of about 160 Mbit/second on a 120 MHz Pentium for the 64-bit variant (message in memory). This is somewhat faster than the performance reported in <ref> [Sh96] </ref> for the polynomial division function and in [BGV96] for MD5, but not as impressive as the other speeds reported above. It is important to note that the above results are for bulk data processing. <p> A reasonable choice for the second hashing scheme can be the polynomial-evaluation-hashing. The reader is referred to <ref> [Sh96] </ref> for a description and implementation details of this scheme. An interesting advantage of composing two hash functions as suggested here is that only the last one needs to be *-AU, the former can be just *-AU [St94]. Hashing short data items.
Reference: [St94] <author> D. Stinson. </author> <title> Universal Hashing and Authentication Codes. Designs, </title> <journal> Codes and Cryptography, </journal> <volume> vol. 4, </volume> <year> 1994, </year> <pages> pp. 369-380. </pages>
Reference-contexts: The use of universal hashing for authentication (introduced by Wegman and Carter [WC81] as well) received much attention lately. In particular, many recent works deal with efficient implementation of universal hashing as a tool for achieving fast and secure message authentication (e.g., <ref> [St94, Kr94, Kr95, Ro95, AS96, HJ96, Sh96] </ref>). This is also the motivation for our work; however, the construction presented here apply to the other (non-cryptographic) uses of universal hashing as well. <p> One can also directly apply a pseudorandom function to the output of the hash function concatenated with a counter. The reader is referred to <ref> [WC81, Br82, St94, Kr94, Ro95, Sh96] </ref> for more elaborate discussions of these issues. <p> The reader is referred to [Sh96] for a description and implementation details of this scheme. An interesting advantage of composing two hash functions as suggested here is that only the last one needs to be *-AU, the former can be just *-AU <ref> [St94] </ref>. Hashing short data items. Our hash functions are particularly flexible as for the way they deal with information of different sizes.
Reference: [St95] <author> D. Stinson. </author> <title> On the Connection Between Universal Hashing, Combinatorial Designs and Error-Correcting Codes. </title> <booktitle> TR95-052, Electronic Colloquium on Computational Complexity, </booktitle> <year> 1995. </year>
Reference-contexts: The probabilities below, denoted by Pr h2H [], are taken over the choice of h 2 H according to a given probability distribution on H (usually, the uniform distribution). These definitions and terminology are due to Carter and Wegman [CW79, WC81], Krawczyk [Kr94], Rogaway [Ro95] and Stinson <ref> [St95] </ref>. Definition 1: 1.
Reference: [WC81] <author> M. Wegman. and L. Carter. </author> <title> New hash functions and their use in authentication and set equality. </title> <journal> J. of Computer and System Sciences, </journal> <volume> vol. 22, </volume> <year> 1981, </year> <pages> pp. 265-279. 17 </pages>
Reference-contexts: The use of universal hashing for authentication (introduced by Wegman and Carter <ref> [WC81] </ref> as well) received much attention lately. In particular, many recent works deal with efficient implementation of universal hashing as a tool for achieving fast and secure message authentication (e.g., [St94, Kr94, Kr95, Ro95, AS96, HJ96, Sh96]). <p> A stronger version of universal hash functions guarantees that elements are mapped into their images in a pairwise independent way. These properties make universal hashing a prime tool for data storage and retrieval. In addition, as originally observed in <ref> [WC81] </ref>, universal hashing can be used for building secure message authentication schemes where the adversary's ability to forge messages is bounded by the collision probability of the hash family. <p> The probabilities below, denoted by Pr h2H [], are taken over the choice of h 2 H according to a given probability distribution on H (usually, the uniform distribution). These definitions and terminology are due to Carter and Wegman <ref> [CW79, WC81] </ref>, Krawczyk [Kr94], Rogaway [Ro95] and Stinson [St95]. Definition 1: 1. <p> For a MAC function to be "good", any adversary with "reasonable" resources (time, memory, number of queries, etc.) should have only a negligible probability of breaking the MAC. We refer to [BKR] for a formal definition of security of MAC functions. In the Wegman-Carter paradigm <ref> [WC81] </ref>, the secret key shared by the communicating parties consists of a hash function h drawn randomly from a family of hash functions H and a sequence of random pads d 1 ; d 2 ; : : :. <p> the sender computes the authentication tag h (m i ) + d i , that is, M AC h;d (m i ) def 4 is drawn from an *-AU-universal family the probability of an adversary (even one with unlimited computational power) to forge a single message is bounded by * <ref> [WC81, Kr94] </ref>. If the attacker is allowed to perform q verification queries then its probability to successfully forge a MAC is at most q* (notice that in this case passive eavesdropping does not buy anything to the attacker, only active and then easier to detect attacks can help him). <p> One can also directly apply a pseudorandom function to the output of the hash function concatenated with a counter. The reader is referred to <ref> [WC81, Br82, St94, Kr94, Ro95, Sh96] </ref> for more elaborate discussions of these issues. <p> Dealing with arbitrary long messages. The above function can only be applied to a fixed-size messages (namely, to vectors in Z p k ). The standard approach for dealing with messages of arbitrary length is to use tree-hashing as already suggested by Carter and Wegman <ref> [WC81] </ref>. That is, we break the message into blocks of k elements (over Z p ) each and hash each block separately (using the same hash function).
References-found: 16

