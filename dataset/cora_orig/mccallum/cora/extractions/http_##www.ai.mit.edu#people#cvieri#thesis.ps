URL: http://www.ai.mit.edu/people/cvieri/thesis.ps
Refering-URL: http://www.ai.mit.edu/people/cvieri/
Root-URL: 
Title: Pendulum: A Reversible Computer Architecture  
Author: by Carlin James Vieri Thomas F. Knight, Jr. 
Degree: Submitted to the Department of Electrical Engineering and Computer Science in Partial Fulfillment of the Requirements for the Degree of Master of Science at the  Author  Certified by  Thesis Supervisor Accepted by Frederic R. Morgenthaler Chairman, Department Committee on Graduate Theses  
Note: c Massachusetts Institute of Technology  
Date: (1993)  June 1995  1995  May 24, 1995  
Address: Berkeley  
Affiliation: B.S., University of California at  MASSACHUSETTS INSTITUTE OF TECHNOLOGY  Department of Electrical Engineering and Computer Science  
Abstract-found: 0
Intro-found: 1
Reference: [Bak92] <author> H. G. Baker. </author> <title> Nreversal of fortune | the thermodynamics of garbage collection. </title> <editor> In Y. Bekkers, editor, </editor> <booktitle> International Workshop on Memory Management, </booktitle> <pages> pages 507-524. </pages> <address> Springer-Verlog, </address> <year> 1992. </year>
Reference-contexts: The programmer concerned with the flow of information in the processor is often better served by simple instructions with no intermediate results computed during the course of the instruction. Also, additional pipelining work and performance enhancements are possible using a RISC foundation. Baker <ref> [Bak92] </ref> covers a wide range of topics related to reversible computing from the thermodynamics of bit erasure to garbage collection and programming subtleties. <p> The memory hierarchy must be adapted to avoid copying information. Cache and file coherency problems do not exist because only one copy of each data word exists. Exchange operations more closely resemble physical storage systems <ref> [Bak92] </ref> such as filing cabinets, in which accessed information is only available to one process (or person) at a time.
Reference: [Ben73] <author> C. H. Bennett. </author> <title> Logical reversibility of computation. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 6 </volume> <pages> 525-532, </pages> <year> 1973. </year>
Reference-contexts: An expanding market for portable devices and increasing device density will continue to encourage low energy design. Computing engines can be designed that do not require energy dissipation <ref> [Ben73, Lan82] </ref>, but only if the computation is logically reversible. This approach is a radical departure from both traditional logic design and traditional low energy design techniques. This thesis presents Pendulum, a logically reversible computer architecture that may operate without dissipating energy. <p> In the 1950s, this connection had been popularly interpreted to mean that computation must dissipate a corresponding minimum amount of energy during every elemental act of computation. Landauer [Lan61] later recognized that energy dissipation is only unavoidable when information is destroyed. Bennett <ref> [Ben73] </ref> and Fredkin [FT78] first realized that a 12 reversible computation 1 , in which no information is destroyed, may dissipate arbitrarily small amounts of energy. Maxwell's Demon The limit of energy dissipation during computation is fundamentally based in the apparent thermodynamic paradox of Maxwell's demon. <p> Various other computing structures have been proposed. Brownian computers allow the trajectory of component particles to follow a random walk through the device, the speed of computation (and dissipation) being proportional to the gradient of an applied force. Genetic material such as DNA and RNA are cited <ref> [Ben73, Ben82] </ref> as "nature's closest ap 16 proach to a Brownian computer" with a dissipation of between 20 and 100 kT per operation (at the cost of computation speed and random access).
Reference: [Ben82] <author> C. H. Bennett. </author> <title> The thermodynamics of computation, a review. </title> <journal> International Journal of Theoretical Physics, </journal> <volume> 21(12) </volume> <pages> 905-940, </pages> <year> 1982. </year>
Reference-contexts: This thesis presents Pendulum, a logically reversible computer architecture that may operate without dissipating energy. For the computation to be physically reversible, and therefore not dissipate any energy, the computing engine must be logically reversible and implemented in a physically reversible technology <ref> [Ben82] </ref>. <p> Various other computing structures have been proposed. Brownian computers allow the trajectory of component particles to follow a random walk through the device, the speed of computation (and dissipation) being proportional to the gradient of an applied force. Genetic material such as DNA and RNA are cited <ref> [Ben73, Ben82] </ref> as "nature's closest ap 16 proach to a Brownian computer" with a dissipation of between 20 and 100 kT per operation (at the cost of computation speed and random access).
Reference: [Ben88] <author> C. H. Bennett. </author> <title> Notes on the history of reversible computation. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 32(1) </volume> <pages> 281-288, </pages> <year> 1988. </year>
Reference-contexts: The theoretical discussions of reversible computation in the literature <ref> [Ben88, Lan86] </ref> leave much work to be done before a reversible computing engine may be built. This section discusses some of the architectural issues which have yet to be resolved.
Reference: [FT78] <author> E. F. Fredkin and T. Toffoli. </author> <title> Design principles for achieving high-performance submicron digitial technologies. DARPA Proposal, </title> <month> November </month> <year> 1978. </year>
Reference-contexts: In the 1950s, this connection had been popularly interpreted to mean that computation must dissipate a corresponding minimum amount of energy during every elemental act of computation. Landauer [Lan61] later recognized that energy dissipation is only unavoidable when information is destroyed. Bennett [Ben73] and Fredkin <ref> [FT78] </ref> first realized that a 12 reversible computation 1 , in which no information is destroyed, may dissipate arbitrarily small amounts of energy. Maxwell's Demon The limit of energy dissipation during computation is fundamentally based in the apparent thermodynamic paradox of Maxwell's demon. <p> Further details concerning SCRL appear in [You94]. Other Energy Recovering Circuits In <ref> [FT78] </ref>, Fredkin and Toffoli describe a circuit implementation of a Fredkin gate. This design requires multiple large inductors per gate, and the authors admit that the concept is not appropriate for VLSI applications. They do, however, suggest that Josephson junction-based systems may provide a better platform.
Reference: [FT82] <author> E. F. Fredkin and T. Toffoli. </author> <title> Conservative logic. </title> <journal> International Journal of Theo retical Physics, </journal> 21(3/4):219-253, 1982. 
Reference-contexts: Ressler's work [Res79, Res81] is significant in that it is the earliest work which is directly relevant to architecting fully reversible computers, but it is flawed in its exclusive use of the Fredkin <ref> [FT82] </ref> gate and its neglect of key control flow issues. Hall's work [Hal94], while correct in many high level issues, is incomplete, suggesting no mapping between instruction set architecture (ISA) and register transfer level (RTL) implementation. <p> The first to be proposed were a series of hypothetical mechanical constructions. Fredkin <ref> [FT82] </ref> proposed the billiard ball model which uses collisions of hard spheres and mirrors to perform reversible computations. Figure 2-2 shows a crossover gate and Feynman's two input, three output universal logic gate. Both gates are reversible and non-dissipative when isolated from imperfections.
Reference: [Hal92] <author> J. Storrs Hall. </author> <title> An electroid switching model for reversible computer architectures. </title> <booktitle> In Physics and Computation, </booktitle> <pages> pages 237-247, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Koller and Athas [KA92], using techniques similar to SCRL, have developed a method of driving highly capacitive wiring and gate loads while recovering the energy. Their work on power supply design is similar to the power supply work needed for SCRL. Hall's <ref> [Hal92] </ref> "retractile cascade" circuits use a series of clocks and inherently pipelined primitives which are very similar in spirit to SCRL gates. 2.3 Architecture This section addresses the previous work in developing computing paradigms that avoid logically irreversible operations. <p> Regardless, 19 his design is remarkable in that he was able to design an entire processor using on the order of 5000 reversible Fredkin gates. More recently, Hall [Hal94], building on his work with retractile cascades <ref> [Hal92] </ref>, discussed a reversible processor architecture and algorithms based on the PDP-10 instruction set. The decision to use a CISC instruction set allows shorter code, but for this thesis, a more straightforward RISC style makes the datapath and controller design simpler.
Reference: [Hal94] <author> J. Storrs Hall. </author> <title> A reversible instruction set architecture and algorithms. </title> <booktitle> In Physics and Computation, </booktitle> <pages> pages 128-134, </pages> <month> November </month> <year> 1994. </year> <month> 76 </month>
Reference-contexts: Ressler's work [Res79, Res81] is significant in that it is the earliest work which is directly relevant to architecting fully reversible computers, but it is flawed in its exclusive use of the Fredkin [FT82] gate and its neglect of key control flow issues. Hall's work <ref> [Hal94] </ref>, while correct in many high level issues, is incomplete, suggesting no mapping between instruction set architecture (ISA) and register transfer level (RTL) implementation. <p> It is difficult to interpret the datapath design decisions that distinguish his processor from a standard accumulator-based processor. Regardless, 19 his design is remarkable in that he was able to design an entire processor using on the order of 5000 reversible Fredkin gates. More recently, Hall <ref> [Hal94] </ref>, building on his work with retractile cascades [Hal92], discussed a reversible processor architecture and algorithms based on the PDP-10 instruction set. The decision to use a CISC instruction set allows shorter code, but for this thesis, a more straightforward RISC style makes the datapath and controller design simpler.
Reference: [KA92] <author> J. G. Koller and W. C. Athas. </author> <title> Adiabatic switching, low energy compputing, and the physics of storing and erasing information. </title> <booktitle> In Physics of Computation Workshop, </booktitle> <year> 1992. </year>
Reference-contexts: They do, however, suggest that Josephson junction-based systems may provide a better platform. Likharev [Lik82] also proposed a superconducting Josephson junction-based computing engine which performed energy recovery. Koller and Athas <ref> [KA92] </ref>, using techniques similar to SCRL, have developed a method of driving highly capacitive wiring and gate loads while recovering the energy. Their work on power supply design is similar to the power supply work needed for SCRL.
Reference: [KH92] <author> Gerry Kane and Joe Heinrich. </author> <title> MIPS RISC Architecture. </title> <publisher> Prentice Hall, </publisher> <year> 1992. </year>
Reference-contexts: The signal may be changed again and the processor will execute the instruction forward. 47 Appendix A The Pendulum Assembly Language Assembly language programming on the Pendulum processor greatly resembles a standard RISC architecture <ref> [KH92] </ref>. The Pendulum instruction set is decidedly "RISC-y". Instructions are not very powerful but are deliberately simple so that the programmer can keep track of the information flow. The programmer is insulated from many aspects of the reversible operation going on inside the processor. <p> Conditional branches which are not taken produce no garbage. Other irreversible instructions which produce datapath garbage are noted below. The format and notation of the instruction set details is taken from <ref> [KH92] </ref>, the MIPS R2000 architecture reference manual. A.1 Instruction Set Encoding Since one of the earliest design decisions was to base Pendulum on a 32 bit RISC machine, the instruction word encoding strongly resembles the MIPS R2000 instruction word encoding.
Reference: [Lan61] <author> R. Landauer. </author> <title> Irreversibility and heat generation in the computing process. </title> <journal> IBM Journal of Research and Development, </journal> <volume> 5 </volume> <pages> 183-191, </pages> <year> 1961. </year>
Reference-contexts: In the 1950s, this connection had been popularly interpreted to mean that computation must dissipate a corresponding minimum amount of energy during every elemental act of computation. Landauer <ref> [Lan61] </ref> later recognized that energy dissipation is only unavoidable when information is destroyed. Bennett [Ben73] and Fredkin [FT78] first realized that a 12 reversible computation 1 , in which no information is destroyed, may dissipate arbitrarily small amounts of energy. <p> Szilard, nearly 55 years after Maxwell first postulated the demon, attempted to resolve the paradox by arguing that the process of measurement required dissipation, although he did notice an entropy generation of k ln 2 when the demon was reset. But it was not until much later <ref> [Lan61] </ref> that researchers firmly placed the source of dissipation in the erasure of information. When the demon measures a particle, he must set a bit indicating the speed of the particle.
Reference: [Lan82] <author> R. Landauer. </author> <title> Uncertainty principle and minimal energy dissipation in the com puter. </title> <journal> International Journal of Theoretical Physics, </journal> 21(3/4):283-297, 1982. 
Reference-contexts: An expanding market for portable devices and increasing device density will continue to encourage low energy design. Computing engines can be designed that do not require energy dissipation <ref> [Ben73, Lan82] </ref>, but only if the computation is logically reversible. This approach is a radical departure from both traditional logic design and traditional low energy design techniques. This thesis presents Pendulum, a logically reversible computer architecture that may operate without dissipating energy.
Reference: [Lan86] <author> R. Landauer. </author> <title> Computation: A fundamental physical view. Found. </title> <journal> Physics, </journal> <volume> 16:260 266, </volume> <year> 1986. </year>
Reference-contexts: A conventional computing engine performs irreversible computations. These computations destroy information, and the second law of thermodynamics requires a minimum energy dissipation when a bit of information is discarded <ref> [Lan86] </ref>. The novel aspect of the Pendulum reversible processor is that all computation is reversible. The processor saves enough information to invert every operation. Programs may be executed in reverse. <p> The theoretical discussions of reversible computation in the literature <ref> [Ben88, Lan86] </ref> leave much work to be done before a reversible computing engine may be built. This section discusses some of the architectural issues which have yet to be resolved.
Reference: [Lik82] <author> K. K. Likharev. </author> <title> Classical and quantum limitations on energy consumption in computation. </title> <journal> Innnnternational Journal of Theoretical Physics, </journal> 21(3/4):311-325, 1982. 
Reference-contexts: This design requires multiple large inductors per gate, and the authors admit that the concept is not appropriate for VLSI applications. They do, however, suggest that Josephson junction-based systems may provide a better platform. Likharev <ref> [Lik82] </ref> also proposed a superconducting Josephson junction-based computing engine which performed energy recovery. Koller and Athas [KA92], using techniques similar to SCRL, have developed a method of driving highly capacitive wiring and gate loads while recovering the energy.
Reference: [Max75] <author> J. C. Maxwell. </author> <title> Theory of Heat. </title> <address> Longmans, Green & Co., London, 4th edition, </address> <month> 1875. </month>
Reference-contexts: Maxwell's Demon The limit of energy dissipation during computation is fundamentally based in the apparent thermodynamic paradox of Maxwell's demon. Maxwell described the system in <ref> [Max75] </ref>: For we have seen that the molecules in a vessel full of air at uniform temperature are moving with velocities by no means uniform, though the mean velocity of any great number of them, arbitrarily selected, is almost exactly uniform.
Reference: [PH90] <author> D. A. Patterson and J. L. Hennessy. </author> <title> Computer Architecture A Quantative Ap proach. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, </address> <year> 1990. </year>
Reference-contexts: The simplicity of the MIPS design allows a 29 greater emphasis to be put on the unique features of a reversible processor. It also lets the mapping between the instruction set architecture (ISA) and the register transfer level functional architecture be simple and straightforward. The literature <ref> [PH90, PH93] </ref> contains substantial research on similar RISC architectures. Also, a RISC architecture provides a suitable starting point for implementation of a reversible pipeline for enhanced performance. signals are not shown. Appendix B is a complete schematic generated by the CAD tool used in the design.
Reference: [PH93] <author> D. A. Patterson and J. L. Hennessy. </author> <title> Computer Organization & Design: The Hardware/Software Interface. </title> <publisher> Morgan Kaufmann, </publisher> <address> San Mateo, beta edition, </address> <year> 1993. </year> <note> From Uncorrected Preliminary Manuscript. </note>
Reference-contexts: The simplicity of the MIPS design allows a 29 greater emphasis to be put on the unique features of a reversible processor. It also lets the mapping between the instruction set architecture (ISA) and the register transfer level functional architecture be simple and straightforward. The literature <ref> [PH90, PH93] </ref> contains substantial research on similar RISC architectures. Also, a RISC architecture provides a suitable starting point for implementation of a reversible pipeline for enhanced performance. signals are not shown. Appendix B is a complete schematic generated by the CAD tool used in the design.
Reference: [Res79] <author> A. L. Ressler. </author> <title> Practical circuits using conservative reversible logic. </title> <type> Bachelor's thesis, </type> <institution> MIT, </institution> <year> 1979. </year>
Reference-contexts: The processor saves enough information to invert every operation. Programs may be executed in reverse. At any point in the computation the processor direction may be reversed and any intermediate results will be "uncomputed." Previous work concerning reversible computer architecture has been either impractical or incomplete. Ressler's work <ref> [Res79, Res81] </ref> is significant in that it is the earliest work which is directly relevant to architecting fully reversible computers, but it is flawed in its exclusive use of the Fredkin [FT82] gate and its neglect of key control flow issues.
Reference: [Res81] <author> A. L. Ressler. </author> <title> The design of a conservative logic computer and a graphical editor simulator. </title> <type> Master's thesis, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <year> 1981. </year>
Reference-contexts: The processor saves enough information to invert every operation. Programs may be executed in reverse. At any point in the computation the processor direction may be reversed and any intermediate results will be "uncomputed." Previous work concerning reversible computer architecture has been either impractical or incomplete. Ressler's work <ref> [Res79, Res81] </ref> is significant in that it is the earliest work which is directly relevant to architecting fully reversible computers, but it is flawed in its exclusive use of the Fredkin [FT82] gate and its neglect of key control flow issues. <p> Hall's [Hal92] "retractile cascade" circuits use a series of clocks and inherently pipelined primitives which are very similar in spirit to SCRL gates. 2.3 Architecture This section addresses the previous work in developing computing paradigms that avoid logically irreversible operations. Ressler <ref> [Res81] </ref> appears to have been the first to investigate the requirements of a reversible computer. Using only Fredkin gates, but suggesting no implementation strategy, he designed a simple accumulator-based machine.
Reference: [Szi29] <author> L. </author> <title> Szilard. On the decrease of entropy in a thermodynamic system by the inter 77 vention of intelligent beings. </title> <journal> Zeitschrift fur Physik, </journal> <volume> 53 </volume> <pages> 840-852, </pages> <year> 1929. </year> <booktitle> English translation in Behavioral Science, </booktitle> 9:301-310, 1964. 
Reference-contexts: This chapter examines reversible computing from the bottom up: first physics and thermodynamics, then reversible circuit and other implementation technologies, and finally, reversible computer architecture. 2.1 Physics Maxwell's demon and Szilard's analysis <ref> [Szi29] </ref> of the demon first suggested the connection between a single degree of freedom (one bit) and a minimum quantity of entropy. In the 1950s, this connection had been popularly interpreted to mean that computation must dissipate a corresponding minimum amount of energy during every elemental act of computation.
Reference: [YK93] <author> S. G. Younis and T. F. Knight, Jr. </author> <title> Practical implementation of charge recover ing asymptotically zero power cmos. </title> <booktitle> In Proceedings of the 1993 Symposium in Integrated Systems, </booktitle> <pages> pages 234-250. </pages> <publisher> MIT Press, </publisher> <year> 1993. </year>
Reference-contexts: The emergence of practical reversible implementation techniques provided much of the motivation for this thesis. Split-level Charge Recovery Logic The most highly developed energy recovering reversible logic family is probably the Split-level Charge Recovery Logic (SCRL) of Younis and Knight <ref> [YK93, YK94] </ref>. Figure 2-3, taken from [You94], shows an SCRL inverter. Instead of constant voltage rails, SCRL uses a series of clock signals which gradually swing from a midpoint voltage to either a high or low voltage.
Reference: [YK94] <author> S. G. Younis and T. F. Knight, Jr. </author> <title> Asymptotically zero energy split-level charge recovery logic. </title> <booktitle> In International Workshop on Low Power Design, </booktitle> <pages> pages 177-182, </pages> <year> 1994. </year>
Reference-contexts: The emergence of practical reversible implementation techniques provided much of the motivation for this thesis. Split-level Charge Recovery Logic The most highly developed energy recovering reversible logic family is probably the Split-level Charge Recovery Logic (SCRL) of Younis and Knight <ref> [YK93, YK94] </ref>. Figure 2-3, taken from [You94], shows an SCRL inverter. Instead of constant voltage rails, SCRL uses a series of clock signals which gradually swing from a midpoint voltage to either a high or low voltage.
Reference: [You94] <author> S. G. Younis. </author> <title> Asymptotically Zero Computing Using Split-Level Charge Recovery Logic. </title> <type> PhD thesis, </type> <institution> MIT Artificial Intelligence Laboratory, </institution> <year> 1994. </year> <month> 78 </month>
Reference-contexts: This thesis discusses a complete instruction set and RTL datapath design for a reversible processor architecture. The ISA is based on a modern RISC processor, the MIPS R2000, and the datapath design is suitable for implementation in a VLSI technology <ref> [You94] </ref>. High level hardware description language simulations have demonstrated the functionality of the design and its ability to execute an instruction stream forward and backward. Chapter 2 briefly describes background and previous work relating to reversible computing. <p> The emergence of practical reversible implementation techniques provided much of the motivation for this thesis. Split-level Charge Recovery Logic The most highly developed energy recovering reversible logic family is probably the Split-level Charge Recovery Logic (SCRL) of Younis and Knight [YK93, YK94]. Figure 2-3, taken from <ref> [You94] </ref>, shows an SCRL inverter. Instead of constant voltage rails, SCRL uses a series of clock signals which gradually swing from a midpoint voltage to either a high or low voltage. <p> Further details concerning SCRL appear in <ref> [You94] </ref>. Other Energy Recovering Circuits In [FT78], Fredkin and Toffoli describe a circuit implementation of a Fredkin gate. This design requires multiple large inductors per gate, and the authors admit that the concept is not appropriate for VLSI applications.
References-found: 23

