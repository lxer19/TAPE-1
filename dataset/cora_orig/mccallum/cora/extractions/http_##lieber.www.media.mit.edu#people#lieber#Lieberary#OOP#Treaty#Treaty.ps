URL: http://lieber.www.media.mit.edu/people/lieber/Lieberary/OOP/Treaty/Treaty.ps
Refering-URL: http://lieber.www.media.mit.edu/people/lieber/Lieberary/OOP/OOP.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Title: Chapter 3 A Shared View of Sharing: The Treaty of Orlando  
Author: Lynn Andrea Stein Henry Lieberman David Ungar 
Abstract-found: 0
Intro-found: 1
Reference: [Agha, 1987] <author> Gul Agha. </author> <title> Actors. </title> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1987. </year>
Reference-contexts: A summary of language features is given in Table 3. 3.4.1 Actors and Lieberman's Delegation The actor systems of Hewitt and his colleagues at MIT represent the most extreme orientation towards dynamic and flexible control. The basic actor model provides only for active objects and parallel message passing <ref> [Agha, 1987] </ref> and so mandates no particular sharing mechanism. However, actual actor implementations [Lieberman, 1987] have found it most natural to use delegation as the sharing mechanism, since the actor philosophy encourages using patterns of message passing to express what in other languages would require special-purpose mechanisms [Hewitt, 1984].
Reference: [Birtwistle et al., 1973] <author> G. Birtwistle, O. Dahl, B. Myhrtag, and K. Nygaard. </author> <title> Simula Begin. </title> <publisher> Auerbach Press, </publisher> <address> Philadelphia, </address> <year> 1973. </year>
Reference: [Bobrow and Stefik, 1981] <author> D. G. Bobrow and M. Stefik. </author> <title> The loops manual. </title> <type> Technical Report KB-VLSI-81-13, </type> <institution> Knowledge Systems Area, Xerox Palo Alto Research Center, </institution> <year> 1981. </year>
Reference: [Bobrow et al., 1986] <author> D. G. Bobrow, K. Kahn, G. Kiczales, L. Masinter, M. Stefik, and F. Zdybel. Commonloops: </author> <title> Merging lisp and object-oriented programming. </title> <journal> In ACM SIGPLAN Notices [SIG, </journal> <year> 1986], </year> <pages> pages 17-29. </pages>
Reference: [Hewitt, 1984] <author> Carl Hewitt. </author> <title> Control structures as patterns of passing messages. </title> <editor> In Patrick Winston, editor, </editor> <booktitle> Artificial Intelligence: </booktitle> <publisher> An MIT Perspective. MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1984. </year> <note> 29 30 BIBLIOGRAPHY </note>
Reference-contexts: However, actual actor implementations [Lieberman, 1987] have found it most natural to use delegation as the sharing mechanism, since the actor philosophy encourages using patterns of message passing to express what in other languages would require special-purpose mechanisms <ref> [Hewitt, 1984] </ref>. Along the three dimensions of our treaty, actor systems can be classified as dynamic, explicit, and per-object. Sharing mechanisms in actors are dynamic, since message passing is a run-time operation, invoked without prior declaration. Delegation requires explicit designation of the recipient.
Reference: [LaLonde, 1986] <author> Wilf LaLonde. </author> <title> An exemplar based smalltalk. </title> <booktitle> In Proceedings of the First ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 322-330, </pages> <address> Portland, Oregon, </address> <month> September </month> <year> 1986. </year>
Reference: [Lieberman, 1986] <author> Henry Lieberman. </author> <title> Using prototypical objects to implement shared behavior in object-oriented systems. </title> <booktitle> In Proceedings of the First ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 214-223, </pages> <address> Portland, Oregon, </address> <month> September </month> <year> 1986. </year>
Reference-contexts: permit dynamic control over the patterns of sharing between objects; which dynamic control is particularly necessary in experimental programming situations, where the evolution of software can be expected to proceed rapidly; and W hereas the signatories to this treaty have independently proposed seemingly disparate solutions to this problem, to wit: <ref> [Lieberman, 1986] </ref> proposed that traditional inheritance be replaced by delegation, which is the idea that sharing between objects can be accomplished through the forwarding of messages, allowing one object to decide at runtime to forward a message to another, more capable object, and giving this new object the ability to answer <p> Delegation, or dynamic inheritance, accomplishes this by allowing new objects to re-use the behavior of existing ones without requiring prior specification of this relationship. The examples in <ref> [Lieberman, 1986] </ref> stress the advantages of delegation in situations where reasonable behavioral extensions to a system are unlikely to be anticipated in the 3.2. ANTICIPATED VS. UNANTICIPATED SHARING 9 stream. original design of a system.
Reference: [Lieberman, 1987] <author> Henry Lieberman. </author> <title> Concurent object-oriented programming in Act 1. </title> <editor> In Akinori Yonezawa and Mario Tokoro, editors, </editor> <booktitle> Object-Oriented Concurrent Programming. </booktitle> <publisher> MIT Press, </publisher> <address> Cambridge, Massachusetts, </address> <year> 1987. </year>
Reference-contexts: The basic actor model provides only for active objects and parallel message passing [Agha, 1987] and so mandates no particular sharing mechanism. However, actual actor implementations <ref> [Lieberman, 1987] </ref> have found it most natural to use delegation as the sharing mechanism, since the actor philosophy encourages using patterns of message passing to express what in other languages would require special-purpose mechanisms [Hewitt, 1984].
Reference: [Mercado, 1988] <author> Antonio Mercado Jr. </author> <title> Hybrid: Implementing classes with prototypes. </title> <type> Master's Thesis Technical Report No. </type> <institution> CS-88-12, Brown University Department of Computer Science, </institution> <address> Providence, Rhode Island, 02912, </address> <month> July </month> <year> 1988. </year>
Reference: [Moon, 1986] <author> D. A. Moon. </author> <title> Object-oriented programming with flavors. </title> <journal> In ACM SIGPLAN Notices [SIG, </journal> <year> 1986], </year> <pages> pages 1-8. </pages>
Reference: [Power and Weiss, 1988] <editor> Leigh Power and Zvi Weiss, editors. </editor> <booktitle> Addendum to theProceedings of the Second ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, volume 23 of Special edition of SIGPLAN Notices, </booktitle> <month> May </month> <year> 1988. </year> <note> BIBLIOGRAPHY 31 </note>
Reference-contexts: new object in terms of an existing one, borrowing implementation as well as behavioral description from the previously defined object; and W hereas many object-oriented languages|beginning with Simula-67, and including Smalltalk, Flavors, and Loops|have implemented this sharing through classes, which allow one group 2 The original treaty text appears in <ref> [Power and Weiss, 1988] </ref>. 4 of objects to be defined in terms of another, and also provide guarantees about group members, or instances; and W hereas these mechanisms|class, subclass, and instance|impose a rigid type hierarchy, needlessly restricting the flexibility of object-oriented systems, and in particular do not easily permit dynamic control
Reference: [SIG, 1986] <editor> ACM SIGPLAN Notices Special Edition on Object-Oriented Programming Languages, </editor> <volume> volume 21, </volume> <month> November </month> <year> 1986. </year>
Reference: [Stein, 1987] <author> Lynn Andrea Stein. </author> <title> Delegation is inheritance. </title> <booktitle> In Proceedings of the Second ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 138-146, </pages> <address> Orlando, Florida, </address> <month> October </month> <year> 1987. </year>
Reference-contexts: THE TREATY 5 istics of allowing dynamic sharing patterns and idiosyncratic behavior of individual objects; <ref> [Stein, 1987] </ref> attempted a rapprochement between the delegation and inheritance views, pointing out that the class/subclass relationship is essentially this "delegation," or "dynamic inheritance," and that these new styles of sharing simply make a shift in representation, using what were previously considered "classes" to represent real-world entities rather than abstract groups; <p> This illustrates the difference between anticipated and unanticipated sharing. It is primarily 10 an issue of software evolution and design aesthetics, and only indirectly a language issue. The main result of <ref> [Stein, 1987] </ref> can be rephrased in these terms: because a subclass is defined by stating the differences, in both procedures and data, between it and its superclass, the relation between subclass and superclass is better suited toward unanticipated sharing than the class-instance relation, which limits the differences between an instance and
Reference: [Stroustrup, 1986] <author> Bjarne Stroustrup. </author> <title> The C++ Programming Language. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, Massachusetts, </address> <year> 1986. </year>
Reference: [Ungar and Smith, 1987] <author> David Ungar and Randall B. Smith. </author> <title> Self: The power of simplicity. </title> <booktitle> In Proceedings of the Second ACM Conference on Object-Oriented Programming Systems, Languages, and Applications, </booktitle> <pages> pages 227-242, </pages> <address> Orlando, Florida, </address> <month> October </month> <year> 1987. </year>
Reference-contexts: object to decide at runtime to forward a message to another, more capable object, and giving this new object the ability to answer this message on the first (delegating) object's behalf; in this scheme, prototypical objects|the "typical elephant," for example|replace abstract classes|e.g. the class elephant|as the repository for shared information; <ref> [Ungar and Smith, 1987] </ref> also proposed a prototype-based approach, using a drastic simplification of the Smalltalk model in which a single type of parent link replaces the more complex class/subclass/instance protocol; while this approach does not propose explicit delegation, through "dynamic inheritance" it shares the essential character 3.1.
References-found: 15

