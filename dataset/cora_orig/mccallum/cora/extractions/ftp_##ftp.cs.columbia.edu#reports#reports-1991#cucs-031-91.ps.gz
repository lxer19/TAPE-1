URL: ftp://ftp.cs.columbia.edu/reports/reports-1991/cucs-031-91.ps.gz
Refering-URL: http://www.cs.columbia.edu/~library/1991.html
Root-URL: http://www.cs.columbia.edu
Title: Navigating the MeldC The MeldC User's Manual  
Author: Howard Gershen Erik Hilsdale fl Howard Gershen, Erik Hilsdale 
Note: Copyright c  
Date: Revised on October 6, 1992  
Address: New York, NY 10027  
Affiliation: Columbia University Department of Computer Science  
Abstract: Technical Report CUCS-031-91 The Programming Systems Laboratory is supported by National Science Foundation grants CCR-9106368 and CCR-8858029, by grants and fellowships from AT&T, BNR, DEC, IBM and SRA, by the New York State Center for Advanced Technology in Computers and Information Systems and by the NSF Engineering Research Center for Telecommunications Research. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Carlo Ghezzi and Mehdi Jazayeri. </author> <title> Programming Language Concepts. </title> <publisher> John Wiley & Sons, Inc., </publisher> <address> New York, New York, </address> <note> second edition, </note> <year> 1987. </year>
Reference-contexts: If we declare int b [13] we can declare the active values (b@), (b [10]), (b [0]@,b <ref> [1] </ref>), et cetera. The active value (b@) will fire whenever any element of the array is changed, and the active value (b [0]@,b [1]) 86 CHAPTER 9. ADVANCED TOPICS will fire whenever the zeroth element of b is changed or the first element is assigned to. <p> If we declare int b [13] we can declare the active values (b@), (b [10]), (b [0]@,b <ref> [1] </ref>), et cetera. The active value (b@) will fire whenever any element of the array is changed, and the active value (b [0]@,b [1]) 86 CHAPTER 9. ADVANCED TOPICS will fire whenever the zeroth element of b is changed or the first element is assigned to.
Reference: [2] <author> Gail E. Kaiser and David Garlan. </author> <title> Composing software systems from reusable building blocks. </title> <booktitle> In Twentieth Hawaii International Conference on System Sciences, </booktitle> <volume> volume II, </volume> <pages> pages 536-545, </pages> <month> January </month> <year> 1987. </year>
Reference: [3] <author> Gail E. Kaiser and David Garlan. Meld: </author> <title> A declarative language for writing methods. </title> <booktitle> In Sixth International Phoenix Conference on Computers and Communications, </booktitle> <pages> pages 280-285, </pages> <month> February </month> <year> 1987. </year>
Reference: [4] <author> Gail E. Kaiser and David Garlan. </author> <title> Melding data flow and object-oriented programming. </title> <booktitle> In Object-Oriented Programming Systems, Languages and Applications Conference, </booktitle> <pages> pages 254-267, </pages> <address> Orlando FL, </address> <month> October </month> <year> 1987. </year> <journal> Special issue of SIGPLAN Notices, </journal> <volume> 22(12), </volume> <month> December </month> <year> 1987. </year>
Reference: [5] <author> Gail E. Kaiser and David Garlan. </author> <title> Melding software systems from reusable building blocks. </title> <journal> IEEE Software, </journal> <volume> 4(4) </volume> <pages> 17-24, </pages> <month> July </month> <year> 1987. </year>
Reference: [6] <author> Gail E. Kaiser and David Garlan. </author> <title> Synthesizing programming environments from reusable features. </title> <editor> In Ted J. Biggerstaff and Alan J. Perlis, editors, </editor> <booktitle> Software Reusability, </booktitle> <volume> volume II, </volume> <pages> pages 35-55, </pages> <address> Reading MA, 1989. </address> <publisher> Addison-Wesley. </publisher>
Reference: [7] <author> Gail E. Kaiser, Wenwey Hseush, Steven S. Popovich, and Shyhtsun F. Wu. </author> <title> Multiple concurrency control policies in an object-oriented programming system. </title> <booktitle> In 2nd IEEE Symposium on Parallel and Distributed Processing, </booktitle> <pages> pages 623-626, </pages> <address> Dallas TX, </address> <month> December </month> <year> 1990. </year>
Reference: [8] <author> Gail E. Kaiser, Steven S. Popovich, Wenwey Hseush, and Shyhtsun Fe-lix Wu. </author> <title> Melding multiple granularities of parallelism. </title> <editor> In Stephen Cook, editor, </editor> <booktitle> 3rd European Conference on Object-Oriented Programming, British Computer Society Workshop Series, </booktitle> <pages> pages 147-166, </pages> <address> Not-tingham, UK, July 1989. </address> <publisher> Cambridge University Press. </publisher>
Reference: [9] <author> Al Kelley and Ira Pohl. </author> <title> A Book on C. </title> <publisher> The Benjamin/Cummings Publishing Company, Inc., </publisher> <address> Redwood City, California, </address> <note> second edition, 1990. 132 BIBLIOGRAPHY </note>
Reference: [10] <author> Brian W. Kernighan and Dennis M. Ritchie. </author> <title> The C Programming Language. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, New Jersey, </address> <note> second edition, </note> <year> 1988. </year>
Reference-contexts: If we declare int b [13] we can declare the active values (b@), (b <ref> [10] </ref>), (b [0]@,b [1]), et cetera. The active value (b@) will fire whenever any element of the array is changed, and the active value (b [0]@,b [1]) 86 CHAPTER 9. ADVANCED TOPICS will fire whenever the zeroth element of b is changed or the first element is assigned to. <p> we've discussed in Chapter 3: delayuntil and respond; atomic blocks, and message passing. extern int printf (); extern int random (); feature Producer_and_Consumer interface: implementation: ProducerConsumer PCobj = ProducerConsumer.Create (); /* * Producer-Consumer program using synchronous delayuntil * 1-to-1 synchronization between message-sending and delayuntil */ class ProducerConsumer ::= int buffer <ref> [10] </ref>; int total_space = 10; int P = 0; methods: void init () /* create 10 "buffers", really respond */ - /* statements ready for delayuntils */ $self.spacing (total_space); send world () to $self; - void spacing (int x) /* the actual "buffer" creator */ - printf ("space (%d)"n", x); if <p> EXAMPLES - end class testing /* * Producer-Consumer program using synchronous delayuntil * 1-to-1 synchronization between message-sending and delayuntil */ class ProducerConsumer ::= int buffer <ref> [10] </ref>; int total_space = 10; int P = 0; methods: void init () - * create 10 buffers. */ $self.spacing (total_space); send world () to $self; - * Creating the buffer spaces. */ void spacing (int x) - * create n spaces */ printf ("space (%d)"n", x); if (x &gt; 0)
Reference: [11] <author> Andrew Koenig. </author> <title> C Traps and Pitfalls. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> Reading, Massachusetts, </address> <year> 1989. </year>
Reference: [12] <author> Steven S. Popovich, Shyhtsun F. Wu, and Gail E. Kaiser. </author> <title> An object-based approach to implementing distributed concurrency control. </title> <booktitle> In 11th International Conference on Distributed Computing Systems, </booktitle> <address> Ar-lington TX, </address> <month> May </month> <year> 1991. </year> <note> To appear. </note>
Reference: [13] <author> Andrew S. Tanenbaum. </author> <title> Operating Systems: Design and Implementation. </title> <publisher> Prentice-Hall, Inc., </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1987. </year>
Reference-contexts: If we declare int b <ref> [13] </ref> we can declare the active values (b@), (b [10]), (b [0]@,b [1]), et cetera. The active value (b@) will fire whenever any element of the array is changed, and the active value (b [0]@,b [1]) 86 CHAPTER 9.
Reference: [14] <author> Shyhtsun F. Wu and Gail E. Kaiser. </author> <title> Network management with consistently managed objects. In IEEE Global Telecommunications Conference, </title> <journal> Communications: Connecting the Future, </journal> <volume> volume 1, </volume> <pages> pages 304.7.1-304.7.6, </pages> <address> San Diego CA, </address> <month> December </month> <year> 1990. </year>
References-found: 14

