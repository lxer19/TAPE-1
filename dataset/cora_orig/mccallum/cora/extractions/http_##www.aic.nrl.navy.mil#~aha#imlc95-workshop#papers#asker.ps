URL: http://www.aic.nrl.navy.mil/~aha/imlc95-workshop/papers/asker.ps
Refering-URL: http://www.aic.nrl.navy.mil/~aha/imlc95-workshop/notes.html
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: asker@dsv.su.se henke@dsv.su.se  
Title: Building the DeNOx System: Experience from a Real-World Application of Machine Learning heat and power
Author: Lars Asker Henrik Bostrom 
Note: den. At Hogdalenverket, waste from Stock-holm households is burned to produce  Hogdalenverket has been instructed by the  has been applied  
Address: Electrum 230, S-164 40 Kista, Sweden  
Affiliation: Department of Computer and Systems Sciences Stockholm University and the Royal Institute of Technology  
Abstract: to produce control rules for the injection of ammonia. In this paper we present the experience gained from developing this control system. We describe and characterize the different steps involved in the development of the system. We also give a characterization of the domain and the learning problem together with a motivation for the choice of learning algorithm. 
Abstract-found: 1
Intro-found: 1
Reference: [Asker and Bostrom 1995] <author> Asker L. and Bostrom H., </author> <title> "The DeNOx System: Machine Learning for Process Control", </title> <booktitle> Proceedings of the IJCAI-95 Workshop on Machine Learning in Engineering, </booktitle> <year> 1995. </year>
Reference-contexts: The resulting system, called DeNOx, deals with the control of emissions of nitrogen oxides from a combined fl Presented at the workshop on Applying Machine Learning in Practice at IMLC-95. heating and power plant <ref> [Asker and Bostrom 1995] </ref>, [Engels 1995]. Figure 1 shows the different steps involved in the process of constructing the system. In a first step, the domain was analyzed and the learning task was identified. <p> Table 1: Accuracy after 3000 training examples. Learning Task Accuracy Increase Ammonia 79.3 % Decrease Ammonia 80.8 % more detailed presentation of the learning results with the complete learning curves, the interested reader is referred to <ref> [Asker and Bostrom 1995] </ref>. increase (oldgas_36_39, A, B, C, temp_690_730, D, E, F, G, H, I, J, K, no_40_60, large_pos_diff, L, M, N, low_inject_35_40, O, P) :- gas (A), diff (B), temp (C), diff (D), o2 (E), o2 (F), diff (G), nh3 (H), nh3 (I), diff (J), no (K), co (L),
Reference: [Bergadano and Giordana 1988] <author> Bergadano F. and Giordana A., </author> <title> "A Knowledge Intensive Approach to Concept Induction", </title> <booktitle> Proceedings of the Fifth International Conference on Machine Learning, </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> CA, </address> <year> 1988, </year> <pages> 305-317. </pages>
Reference-contexts: covering and divide-and-conquer, only the former has been used extensively for top-down induction of logic programs (mis [Shapiro 1983], foil [Quinlan 1990], ana-ebl [Cohen 1991], focl [Pazzani et al 1991], grendel [Cohen 1992]) and focl-frontier [Pazzani and Brunk 1993], while the latter has been used in a few approaches (ml-smart <ref> [Bergadano and Giordana 1988] </ref>, struct [Watanabe and Rendell 1991] and spectre [Bostrom and Idestam-Almquist 1994]). The major advantage of divide-and-conquer over covering is the efficiency, as demonstrated in [Bostrom 1995].
Reference: [Bostrom 1995] <author> Bostrom H., </author> <title> "Covering vs. Divide-and-Conquer for Top-Down Induction of Logic Programs", </title> <booktitle> Proceedings of the Fourteenth International Joint Conference on Artificial Intelligence, </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1995. </year>
Reference-contexts: The major advantage of divide-and-conquer over covering is the efficiency, as demonstrated in <ref> [Bostrom 1995] </ref>. The reason for this is that covering in fact searches a larger hypothesis space than what divide-and-conquer does and that covering considers the same alternatives repeatedly in contrast to divide-and-conquer. <p> Still, the hypotheses produced by divide-and-conquer can be more accurate than the hypothe ses produced by covering, as shown in <ref> [Bostrom 1995] </ref>. The reason for this is that divide-and-conquer does not only look for similarities among positive examples, as covering does, but also looks for similarities among negative examples. <p> Furthermore, since it is likely that additional expert knowledge in the form of useful sub-concepts will be available, an ILP technique is preferred. Initial experiments were conducted with both a covering and a divide-and-conquer technique for top-down induction of logic programs (as formalized in <ref> [Bostrom 1995] </ref>). The divide-and-conquer technique was found to be up to 180 times faster than the covering technique, without being less accurate.
Reference: [Bostrom and Idestam-Almquist 1994] <author> Bostrom H. and Idestam-Almquist P., </author> <title> "Specialization of Logic Programs by Pruning SLD-Trees", </title> <booktitle> Proceedings of the 4th International Workshop on Inductive Logic Programming, volume 237 of GMD-Studien, </booktitle> <institution> Gesellschaft fur Mathematik und Daten-verarbeitung MBH, </institution> <year> 1994, </year> <pages> 31-48. </pages>
Reference-contexts: top-down induction of logic programs (mis [Shapiro 1983], foil [Quinlan 1990], ana-ebl [Cohen 1991], focl [Pazzani et al 1991], grendel [Cohen 1992]) and focl-frontier [Pazzani and Brunk 1993], while the latter has been used in a few approaches (ml-smart [Bergadano and Giordana 1988], struct [Watanabe and Rendell 1991] and spectre <ref> [Bostrom and Idestam-Almquist 1994] </ref>). The major advantage of divide-and-conquer over covering is the efficiency, as demonstrated in [Bostrom 1995]. The reason for this is that covering in fact searches a larger hypothesis space than what divide-and-conquer does and that covering considers the same alternatives repeatedly in contrast to divide-and-conquer. <p> Since the plan was to use even larger data sets for training in repeated experiments, divide-and-conquer was found to be the most appropriate choice (i.e., the algorithm spectre <ref> [Bostrom and Idestam-Almquist 1994] </ref> was chosen). 5 The algorithms were implemented in SICStus Prolog 2.1 on a SUN SparcStation 5. 7 LEARNING CONTROL RULES Experiments have been performed with this domain, in which an example set consisting of 10,000 examples was randomly split into two parts consisting of 80% and 20%
Reference: [Cohen 1991] <author> Cohen W. W., </author> <title> "The Generality of Over-generality", </title> <booktitle> Machine Learning: Proceedings of the Eighth International Workshop, </booktitle> <publisher> Morgan Kauf-mann, </publisher> <year> 1991, </year> <pages> 490-494. </pages>
Reference-contexts: Of the two search techniques for top-down induction of propositional theories, covering and divide-and-conquer, only the former has been used extensively for top-down induction of logic programs (mis [Shapiro 1983], foil [Quinlan 1990], ana-ebl <ref> [Cohen 1991] </ref>, focl [Pazzani et al 1991], grendel [Cohen 1992]) and focl-frontier [Pazzani and Brunk 1993], while the latter has been used in a few approaches (ml-smart [Bergadano and Giordana 1988], struct [Watanabe and Rendell 1991] and spectre [Bostrom and Idestam-Almquist 1994]).
Reference: [Cohen 1992] <author> Cohen W. W., </author> <title> "Compiling Prior Knowledge Into an Explicit Bias", </title> <booktitle> Machine Learning: Proceedings of the Ninth International Conference, </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1992, </year> <pages> 102-110. </pages>
Reference-contexts: Of the two search techniques for top-down induction of propositional theories, covering and divide-and-conquer, only the former has been used extensively for top-down induction of logic programs (mis [Shapiro 1983], foil [Quinlan 1990], ana-ebl [Cohen 1991], focl [Pazzani et al 1991], grendel <ref> [Cohen 1992] </ref>) and focl-frontier [Pazzani and Brunk 1993], while the latter has been used in a few approaches (ml-smart [Bergadano and Giordana 1988], struct [Watanabe and Rendell 1991] and spectre [Bostrom and Idestam-Almquist 1994]). The major advantage of divide-and-conquer over covering is the efficiency, as demonstrated in [Bostrom 1995].
Reference: [Engels 1995] <author> Engels R., "Hogdalenverket: </author> <title> Applying ILP in an Industrial Setting", </title> <booktitle> Workshop on Intelligent Adaptive Systems, </booktitle> <address> Melbourne Beach, </address> <year> 1995. </year>
Reference-contexts: The resulting system, called DeNOx, deals with the control of emissions of nitrogen oxides from a combined fl Presented at the workshop on Applying Machine Learning in Practice at IMLC-95. heating and power plant [Asker and Bostrom 1995], <ref> [Engels 1995] </ref>. Figure 1 shows the different steps involved in the process of constructing the system. In a first step, the domain was analyzed and the learning task was identified. A brief description of the domain is given in Section 2 and the learning task is presented in Section 3. <p> Nevertheless it was not immediately obvious what the learning task was. Although it was clear that the levels of nitrogen oxides had to be reduced, it was not clear what had to be learned to achieve that. Early experiments <ref> [Engels 1995] </ref> aimed to learn rules that would recognize situations with increased levels of nitrogen, based on the measurements of other factors. <p> In addition to that, several features can be derived from the measured values. An example of this is the movement of the roaster 2 , which is triggered by the amount of oxygen in the flue gasses. In an earlier version of the system <ref> [Engels 1995] </ref>, the data were transformed into a symbolic representation by calculating the mean value for the whole data set together with the standard deviation for each attribute. <p> However, experiments showed that the learning process becomes approximately ten times faster if the assignment of a value to an interval is made before learning. 5 CREATING TRAINING EXAMPLES In the earlier approach <ref> [Engels 1995] </ref>, training examples were created by simply taking the mean values over five minutes for each of 27 attributes measured every ten seconds.
Reference: [Michalski 1980] <author> Michalski R. S., </author> <title> "Pattern Recognition as Rule-Guided Inductive Inference", </title> <journal> IEEE Transactions on Pattern Analysis and Machine Intelligence, </journal> <volume> 2, </volume> <year> 1980, </year> <pages> 349-361. </pages>
Reference: [Pazzani and Brunk 1993] <author> Pazzani M. and Brunk C., </author> <title> "Finding Accurate Frontiers: A Knowledge-Intensive Approach to Relational Learning", </title> <booktitle> Proceedings of the Eleventh National Conference on Artificial Intelligence, </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1993, </year> <pages> 328-334. </pages>
Reference-contexts: Of the two search techniques for top-down induction of propositional theories, covering and divide-and-conquer, only the former has been used extensively for top-down induction of logic programs (mis [Shapiro 1983], foil [Quinlan 1990], ana-ebl [Cohen 1991], focl [Pazzani et al 1991], grendel [Cohen 1992]) and focl-frontier <ref> [Pazzani and Brunk 1993] </ref>, while the latter has been used in a few approaches (ml-smart [Bergadano and Giordana 1988], struct [Watanabe and Rendell 1991] and spectre [Bostrom and Idestam-Almquist 1994]). The major advantage of divide-and-conquer over covering is the efficiency, as demonstrated in [Bostrom 1995].
Reference: [Pazzani et al 1991] <author> Pazzani M., Brunk C. and Silver-stein G., </author> <title> "A Knowledge-Intensive Approach to Learning Relational Concepts", </title> <booktitle> Machine Learning: Proceedings of the Eighth International Workshop, </booktitle> <publisher> Morgan Kaufmann, </publisher> <year> 1991, </year> <pages> 432-436. </pages>
Reference-contexts: Of the two search techniques for top-down induction of propositional theories, covering and divide-and-conquer, only the former has been used extensively for top-down induction of logic programs (mis [Shapiro 1983], foil [Quinlan 1990], ana-ebl [Cohen 1991], focl <ref> [Pazzani et al 1991] </ref>, grendel [Cohen 1992]) and focl-frontier [Pazzani and Brunk 1993], while the latter has been used in a few approaches (ml-smart [Bergadano and Giordana 1988], struct [Watanabe and Rendell 1991] and spectre [Bostrom and Idestam-Almquist 1994]).
Reference: [Quinlan 1986] <author> Quinlan J. R., </author> <title> "Induction of Decision Trees", </title> <booktitle> Machine Learning 1, </booktitle> <year> 1986, </year> <pages> 81-106. </pages>
Reference: [Quinlan 1990] <author> Quinlan J. R., </author> <title> "Learning Logical Definitions from Relations", </title> <booktitle> Machine Learning 5, </booktitle> <year> 1990, </year> <pages> 239-266. </pages>
Reference-contexts: Of the two search techniques for top-down induction of propositional theories, covering and divide-and-conquer, only the former has been used extensively for top-down induction of logic programs (mis [Shapiro 1983], foil <ref> [Quinlan 1990] </ref>, ana-ebl [Cohen 1991], focl [Pazzani et al 1991], grendel [Cohen 1992]) and focl-frontier [Pazzani and Brunk 1993], while the latter has been used in a few approaches (ml-smart [Bergadano and Giordana 1988], struct [Watanabe and Rendell 1991] and spectre [Bostrom and Idestam-Almquist 1994]).
Reference: [Shapiro 1983] <author> Shapiro E. Y., </author> <title> Algorithmic Program Debugging, </title> <publisher> MIT Press, </publisher> <year> 1983. </year>
Reference-contexts: Of the two search techniques for top-down induction of propositional theories, covering and divide-and-conquer, only the former has been used extensively for top-down induction of logic programs (mis <ref> [Shapiro 1983] </ref>, foil [Quinlan 1990], ana-ebl [Cohen 1991], focl [Pazzani et al 1991], grendel [Cohen 1992]) and focl-frontier [Pazzani and Brunk 1993], while the latter has been used in a few approaches (ml-smart [Bergadano and Giordana 1988], struct [Watanabe and Rendell 1991] and spectre [Bostrom and Idestam-Almquist 1994]).
Reference: [Watanabe and Rendell 1991] <author> Watanabe L. and Ren-dell L. </author> <title> "Learning Structural Decision Trees from Examples", </title> <booktitle> Proceedings of the Twelfth International Joint Conference on Artificial Intelligence, </booktitle> <publisher> Morgan Kaufmann, </publisher> <address> CA, </address> <year> 1991, </year> <pages> 770-776. </pages>
Reference-contexts: former has been used extensively for top-down induction of logic programs (mis [Shapiro 1983], foil [Quinlan 1990], ana-ebl [Cohen 1991], focl [Pazzani et al 1991], grendel [Cohen 1992]) and focl-frontier [Pazzani and Brunk 1993], while the latter has been used in a few approaches (ml-smart [Bergadano and Giordana 1988], struct <ref> [Watanabe and Rendell 1991] </ref> and spectre [Bostrom and Idestam-Almquist 1994]). The major advantage of divide-and-conquer over covering is the efficiency, as demonstrated in [Bostrom 1995].
References-found: 14

