URL: http://www.ags.uni-sb.de/~melis/Pub/MelisBundy96.ps.gz
Refering-URL: http://jswww.cs.uni-sb.de/~melis/
Root-URL: 
Title: Planning and Proof Planning  
Author: Erica Melis and Alan Bundy 
Abstract: The paper adresses proof planning as a specific AI planning. It describes some peculiarities of proof planning and discusses some possible cross-fertilization of planning and proof planning. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> A. Barrett, K. Golden, J.S. Penberthy, and D. Weld, </author> <note> USPOP User's Manual, Version 2.0, </note> <institution> Dept.of Computer Science and Engineering, University of Washington, </institution> <year> 1993. </year> <note> Technical Report 93-09-06. </note>
Reference-contexts: Usually, these rules refer to local decisions. They can, however, also express control knowledge referring to the global development of a plan. First, in SOAR [14] such a control was explored and in the Prodigy system [18] the ideas were refined. Such a control is also described in <ref> [1] </ref>. Meta-level control-rules can be found in Press [4]. In Prodigy the control-rules contain meta-predicates that refer to the current state, the sequence of operators, etc.
Reference: [2] <author> A. Bundy, </author> <title> `The use of explicit plans to guide inductive proofs', </title> <booktitle> in Proc. 9th International Conference on Automated Deduction (CADE), </booktitle> <editor> eds., E. Lusk and R. Overbeek, </editor> <booktitle> volume 310 of Lecture Notes in Computer Science, </booktitle> <pages> pp. 111120, </pages> <address> Argonne, (1988). </address> <publisher> Springer. </publisher>
Reference-contexts: 1 Introduction Planning is an established area of Artificial Intelligence (AI) whereas proof planning introduced by Bundy in <ref> [2] </ref> still lives in its childhood. This means that the development of proof planning needs maturing impulses and the natural questions arise `What can proof planning learn from its Big Brother planning?' and `What are the specific characteristics of the proof planning domain that determine the answer?'. <p> Bundy <ref> [2] </ref> and his group in Edinburgh pioneered proof planning as a technique that can be considered AI-planning and that employs an intelligent guidance of proofs. This work resulted in the proof planner CL A M [22] that plans proofs by mathematical induction and that performs little average search. <p> Previously, tactics have already been employed in several interactive theorem provers, e.g. Nuprl [6]. In order to enable a combination of tactical theorem proving with meta-level control, Bundy <ref> [2] </ref> introduced methods as (partial) specifications of tactics that specify in a meta-language the preconditions and effects of its application 3 . In Figure 1 the structure of CL A M 's methods is depicted. <p> These differences are represented by annotations, e.g., colours, to the induction conclusion. Axioms and definitions that belong to the initial state and which can be used to reduce the differences are annotated similarly. The abstract search heuristic for proofs by mathematical induction, rippling, was introduced by Bundy <ref> [2] </ref> and Hutter [12]. It describes a systematic way to remove the differences, for example by moving the differences outward until the induction hypothesis can be applied to an inner part of the rewritten induction conclusion.
Reference: [3] <author> A. Bundy, </author> <title> `Proof planning', </title> <booktitle> in Proceedings of the International Conference on Planning 1996 (AIPS-96, </booktitle> <year> (1996). </year>
Reference-contexts: In order to contribute to a cross-fertilization of AI planning and proof planning, we briefly describe lessons that can be learned from planning or proof planning.. This paper extends a description given in <ref> [3] </ref>. 2 Proof Planning While humans can cope with long and complex proofs and have strategies to avoid less promising proof paths, automated theorem proving suffers from exhaustive search in super-exponential search spaces.
Reference: [4] <author> A. Bundy and B. Welham, </author> <title> `Using meta-level inference for selective application of multiple rewrite rules in algebraic manipulation', </title> <journal> Artificial Intelligence, </journal> <volume> 16(2), 189212, </volume> <year> (1981). </year> <note> Also available from Edinburgh as DAI Research Paper 121. </note>
Reference-contexts: They can, however, also express control knowledge referring to the global development of a plan. First, in SOAR [14] such a control was explored and in the Prodigy system [18] the ideas were refined. Such a control is also described in [1]. Meta-level control-rules can be found in Press <ref> [4] </ref>. In Prodigy the control-rules contain meta-predicates that refer to the current state, the sequence of operators, etc.
Reference: [5] <author> J.G. Carbonell, </author> <title> `Derivational analogy: A theory of reconstructive problem solving and expertise acquisition', in Machine Learning: An Artificial Intelligence Approach, </title> <editor> eds., R.S. Michalsky, J.G. Carbonell, and T.M. Mitchell, </editor> <volume> 371392, </volume> <publisher> Morgan Kaufmann Publ., </publisher> <address> Los Altos, </address> <year> (1986). </year>
Reference-contexts: The structure of a proof plan can be exploited when analogically transferring methods and subplans. As opposed to analogy at an abstract level, the analogical transfer often fails if drawn at the low level of logical inference rules. * For derivational analogy <ref> [5, 24, 17] </ref>, proof plans that store control information are needed. * Proof plans that store control information are also well-suited for the explanation of proofs and for user interaction as, e.g., pursued in Barnacle [16], an interactive version of CL A M .
Reference: [6] <author> R.L. Constable, S.F. Allen, H.M. Bromley, W.R. Cleaveland, J.F. Cre-mer, R.W. Harper, D.J. Howe, T.B. Knoblock, N.P. Mendler, P. Pana-gaden, J.T. Sasaki, and S.F. Smith, </author> <title> Implementing Mathematics with the Nuprl Proof Development System, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1986. </year>
Reference-contexts: Tactics are procedures that produce a (not necessarily fixed) sequence of lower level inferences when executed, for instance a sequence of logical inferences at the calculus-level. Previously, tactics have already been employed in several interactive theorem provers, e.g. Nuprl <ref> [6] </ref>. In order to enable a combination of tactical theorem proving with meta-level control, Bundy [2] introduced methods as (partial) specifications of tactics that specify in a meta-language the preconditions and effects of its application 3 . In Figure 1 the structure of CL A M 's methods is depicted.
Reference: [7] <author> R.B. Doorenbos, </author> <title> Production Matching for Large Learning Systems, </title> <type> Ph.D. dissertation, </type> <institution> Computer Science Department, Carnegie Mellon University, </institution> <month> January </month> <year> 1995. </year>
Reference-contexts: In SOAR and Prodigy matching algorithms and data structures have been developed to cope efficiently with many control-rules (see <ref> [7] </ref>). These experiences can help to design proof planning systems that make use of the advantages mentioned. Currently, the most interesting feature of proof planning that could fertilize planning seems to be that abstract goals are pursued by heuristics expressed in a meta-language.
Reference: [8] <author> M. Drummond, </author> <title> `On precondition achievement and the computational economics of automatic planning', </title> <booktitle> in Current Trends in AI Planning, </booktitle> <volume> 613, </volume> <publisher> IOS Press, </publisher> <year> (1994). </year>
Reference-contexts: In turn for planning, the analysis of approaches points to a need of mature techniques for practical planning. Drummond <ref> [8] </ref>, e.g., analyzed approaches with the conclusion that the success of Nonlin, SIPE, and O-Plan in practical planning can be attributed to hierarchical action expansion, the explicit representation of a plan's causal structure, and a very simple form of propositional resource allocation rather than to precondition achievement which is the predominant
Reference: [9] <author> G. Faltings and U. Deker, </author> <title> `Interview: Die Neugier, </title> <editor> etwas ganz genau wissen zu wollen', bild der wissenschaft, </editor> <volume> (10), 169182, </volume> <year> (1983). </year>
Reference-contexts: This paper extends a description given in [3]. 2 Proof Planning While humans can cope with long and complex proofs and have strategies to avoid less promising proof paths, automated theorem proving suffers from exhaustive search in super-exponential search spaces. Some empirical sources <ref> [19, 9] </ref> provide evidence that mathematicians use specific methods (e.g. diagonalization), intelligently guide the search for proofs, and plan a proof during the proof discovery process. <p> Some empirical sources [19, 9] provide evidence that mathematicians use specific methods (e.g. diagonalization), intelligently guide the search for proofs, and plan a proof during the proof discovery process. E.g., the German mathematician Faltings, who proved Mordell's Conjecture, described in <ref> [9] </ref> that We know from experience that certain inferences are usually successful under certain prerequisites. So first we ponder about a reasonable way to proceed to prove the theorem.
Reference: [10] <author> M. Gordon, R. Milner, </author> <title> and C.P. Wadsworth, Edinburgh LCF: A Mechanized Logic of Computation, </title> <booktitle> Lecture Notes in Computer Science 78, </booktitle> <publisher> Springer, </publisher> <address> Berlin, </address> <year> 1979. </year>
Reference-contexts: The global search control is achieved by joining two roads, (1) the use of tactics and (2) meta-level control: 1. As opposed to traditional automated theorem that applies calculus-level inference rules, i.e. low level inferences, proof planning relies on tactics <ref> [10] </ref>. Tactics are procedures that produce a (not necessarily fixed) sequence of lower level inferences when executed, for instance a sequence of logical inferences at the calculus-level. Previously, tactics have already been employed in several interactive theorem provers, e.g. Nuprl [6].
Reference: [11] <author> X. Huang, M. Kerber, M. Kohlhase, E. Melis, D. Nesmith, J. Richts, and J. Siekmann, `Omega-MKRP: </author> <title> A Proof Development Environment', </title> <booktitle> in Proc. 12th International Conference on Automated Deduction (CADE), </booktitle> <address> Nancy, </address> <year> (1994). </year>
Reference-contexts: Due to the urgently needed search control in theorem proving, proof planning became more popular recently. Apart from the system CL A M , other experiments explore different ways to realize proof planning. For instance, the proof planner of Omega <ref> [11] </ref> performs state-space search. As opposed to CL A M , it prefers more declaratively represented methods the output of which is determined by the input. Those methods can be subject to reformulations. The method representation in Omega allows for different level of goals which naturally leads to hierarchical planning.
Reference: [12] <author> D. Hutter, </author> <title> `Guiding inductive proofs', </title> <booktitle> in Proc. of 10th International Conference on Automated Deduction (CADE), </booktitle> <editor> ed., M.E. Stickel, </editor> <booktitle> volume Lecture Notes in Artificial Intelligence 449. </booktitle> <publisher> Springer, </publisher> <year> (1990). </year>
Reference-contexts: Axioms and definitions that belong to the initial state and which can be used to reduce the differences are annotated similarly. The abstract search heuristic for proofs by mathematical induction, rippling, was introduced by Bundy [2] and Hutter <ref> [12] </ref>. It describes a systematic way to remove the differences, for example by moving the differences outward until the induction hypothesis can be applied to an inner part of the rewritten induction conclusion.
Reference: [13] <author> R.E. Korf, `Macro-operators: </author> <title> A weak method for learning', </title> <journal> Artificial Intelligence, </journal> <volume> 26, 3577, </volume> <year> (1985). </year>
Reference-contexts: The design of meta-predicates that capture proof-relevant abstractions, e.g., those involved in rippling, gives an additional means of control and thus, adds to the power of the proof planner. Thereby proof planning becomes more than pure precondition achievement. Macro-operators as investigated in <ref> [13] </ref> are a first step towards plan patterns and therefore of interest for proof planning. They correspond to fixed patterns of (sub)plans. For proof planning, however, we need to find even more flexible patterns in order to structure a proof as the experience with proofs by mathematical induction shows.
Reference: [14] <author> J Laird, A. Newell, and P. Rosenbloom, </author> <title> `SOAR:an architecture for general intelligence', </title> <journal> Artificial Intelligence, </journal> <volume> 33(1), 164, </volume> <year> (1987). </year>
Reference-contexts: Usually, these rules refer to local decisions. They can, however, also express control knowledge referring to the global development of a plan. First, in SOAR <ref> [14] </ref> such a control was explored and in the Prodigy system [18] the ideas were refined. Such a control is also described in [1]. Meta-level control-rules can be found in Press [4]. In Prodigy the control-rules contain meta-predicates that refer to the current state, the sequence of operators, etc.
Reference: [15] <author> U. Leron, </author> <title> `Structuring mathematical proofs', </title> <journal> The American Mathematical Monthly, </journal> <volume> 90, 174185, </volume> <year> (1983). </year>
Reference-contexts: There, explana tions are extracted from the preconditions of CL A M 's methods. * As demonstrated in <ref> [15] </ref>, a structured presentation of a proof has proved very important for the human understanding of proofs and is, therefore, needed for proof presentation and interactive theorem proving. 3 Properties of Proof Planning Proof planning is a specific plan formation in the precondition achievement sense of AI-planning, and as an experiment
Reference: [16] <author> H. Lowe, A. Bundy, and D. McLean, </author> <title> `The use of proof planning for cooperative theorem proving', </title> <note> Research Paper 745, (1995). Submitted to the special issue of the Journal of Symbolic Computation on graphical user interfaces and protocols. </note>
Reference-contexts: fails if drawn at the low level of logical inference rules. * For derivational analogy [5, 24, 17], proof plans that store control information are needed. * Proof plans that store control information are also well-suited for the explanation of proofs and for user interaction as, e.g., pursued in Barnacle <ref> [16] </ref>, an interactive version of CL A M .
Reference: [17] <author> E. Melis, </author> <title> `A model of analogy-driven proof-plan construction', </title> <booktitle> in Proceedings of the 14th International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 182189, </pages> <address> Montreal, </address> <year> (1995). </year>
Reference-contexts: The fact that proof plans are an abstract and structured representation of proofs makes proof planning and, in particular, proof plans attractive for other activities in theorem proving: * The abstract and structured representation is well-suited for theorem proving by analogy, as shown in <ref> [17] </ref>. The structure of a proof plan can be exploited when analogically transferring methods and subplans. <p> The structure of a proof plan can be exploited when analogically transferring methods and subplans. As opposed to analogy at an abstract level, the analogical transfer often fails if drawn at the low level of logical inference rules. * For derivational analogy <ref> [5, 24, 17] </ref>, proof plans that store control information are needed. * Proof plans that store control information are also well-suited for the explanation of proofs and for user interaction as, e.g., pursued in Barnacle [16], an interactive version of CL A M .
Reference: [18] <author> S. Minton, C. Knoblock, D. Koukka, Y. Gil, R. Joseph, and J. Carbonell, </author> <title> PRODIGY 2.0: The Manual and Tutorial, </title> <institution> School of Computer Science, Carnegie Mellon University, Pittsburgh, </institution> <year> 1989. </year> <month> CMU-CS-89-146. </month>
Reference-contexts: Usually, these rules refer to local decisions. They can, however, also express control knowledge referring to the global development of a plan. First, in SOAR [14] such a control was explored and in the Prodigy system <ref> [18] </ref> the ideas were refined. Such a control is also described in [1]. Meta-level control-rules can be found in Press [4]. In Prodigy the control-rules contain meta-predicates that refer to the current state, the sequence of operators, etc.
Reference: [19] <author> G. Polya, </author> <title> How to Solve it, 2nd ed. </title> <publisher> Doubleday, </publisher> <address> New York, </address> <year> 1957. </year>
Reference-contexts: This paper extends a description given in [3]. 2 Proof Planning While humans can cope with long and complex proofs and have strategies to avoid less promising proof paths, automated theorem proving suffers from exhaustive search in super-exponential search spaces. Some empirical sources <ref> [19, 9] </ref> provide evidence that mathematicians use specific methods (e.g. diagonalization), intelligently guide the search for proofs, and plan a proof during the proof discovery process.
Reference: [20] <editor> E.D. Sacerdoti, </editor> <booktitle> `The nonlinear nature of plans', in Proceedings of the Fourth International Joint Conference on Artificial Intelligence (IJCAI-75), </booktitle> <pages> pp. </pages> <address> 206214, </address> <year> (1975). </year>
Reference-contexts: Therefore the need to represent bigger chunks by a planning operator and to understand a proof plan as an abstract representation of a proof. * Goal interaction which is a major issue for plan formation in general and led to the development of partial order planning <ref> [21, 20] </ref>. In proof planning there is no goal interaction in the original object-level sense because the application of a sequence of logical inference rules does not destroy object-level preconditions. * The acquisition of methods and of control knowledge for mathematical domains is difficult.
Reference: [21] <author> A. Tate, </author> <title> `Generating project networks', </title> <booktitle> in Proceedings of the Fifth International Joint Conference on Artificial Intelligence, </booktitle> <pages> pp. 888893. </pages> <publisher> Morgan Kaufmann, </publisher> <year> (1977). </year>
Reference-contexts: Therefore the need to represent bigger chunks by a planning operator and to understand a proof plan as an abstract representation of a proof. * Goal interaction which is a major issue for plan formation in general and led to the development of partial order planning <ref> [21, 20] </ref>. In proof planning there is no goal interaction in the original object-level sense because the application of a sequence of logical inference rules does not destroy object-level preconditions. * The acquisition of methods and of control knowledge for mathematical domains is difficult.
Reference: [22] <author> F. van Harmelen, A. Ireland, S.Negrete, A. Stevens, and A. Smaill, </author> <title> `The CLAM proof planner, user manual and programmers manual', </title> <type> Technical Report version 2.0, </type> <institution> University of Edinburgh, Edinburgh, </institution> <year> (1993). </year>
Reference-contexts: Bundy [2] and his group in Edinburgh pioneered proof planning as a technique that can be considered AI-planning and that employs an intelligent guidance of proofs. This work resulted in the proof planner CL A M <ref> [22] </ref> that plans proofs by mathematical induction and that performs little average search. Proof planning contrast with the more local heuristics which have previously been used for search control (in automated theorem proving).
Reference: [23] <author> Manuela Veloso, Jaime Carbonell, M. Alicia Perez, Daniel Borrajo, Eugene Fink, and Jim Blythe, </author> <title> `Integrating planning and learning: The PRODIGY architecture', </title> <journal> Journal of Experimental and Theoretical Artificial Intelligence, </journal> <volume> 81120, </volume> <year> (1995). </year>
Reference-contexts: Such a control is also described in [1]. Meta-level control-rules can be found in Press [4]. In Prodigy the control-rules contain meta-predicates that refer to the current state, the sequence of operators, etc. The experiences with a separate body of control-rules in Prodigy are summarized in <ref> [23] </ref>: The advantage of the factual-control knowledge distinction are modularity, reification of the control knowledge, selectivity in building learning modules, and compositionality of the acquired control knowledge. In SOAR and Prodigy matching algorithms and data structures have been developed to cope efficiently with many control-rules (see [7]).
Reference: [24] <author> M.M. Veloso, </author> <title> Planning and Learning by Analogical Reasoning, </title> <publisher> Springer, </publisher> <address> Berlin, New York, </address> <year> 1994. </year>
Reference-contexts: The structure of a proof plan can be exploited when analogically transferring methods and subplans. As opposed to analogy at an abstract level, the analogical transfer often fails if drawn at the low level of logical inference rules. * For derivational analogy <ref> [5, 24, 17] </ref>, proof plans that store control information are needed. * Proof plans that store control information are also well-suited for the explanation of proofs and for user interaction as, e.g., pursued in Barnacle [16], an interactive version of CL A M .
Reference: [25] <author> D.S. Weld, </author> <title> `An introduction to least commitment planning', </title> <journal> AI magazine, </journal> <volume> 15(4), 2761, </volume> <year> (1994). </year>
Reference-contexts: of control knowledge and methods to be a major research problem for mathematical domains. * In proof planning, the knowledge about the mathematical world is complete and certain rather than incomplete and uncertain as in many real world applications of planning. 4 Lessons from Planning and Proof Planning As Weld <ref> [25] </ref> summarizes, in planning, knowledge-based search via a miniature production system turned out to be a good idea. Usually, these rules refer to local decisions. They can, however, also express control knowledge referring to the global development of a plan.
References-found: 25

