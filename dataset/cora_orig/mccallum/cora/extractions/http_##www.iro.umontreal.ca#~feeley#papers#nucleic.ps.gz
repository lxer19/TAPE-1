URL: http://www.iro.umontreal.ca/~feeley/papers/nucleic.ps.gz
Refering-URL: http://www.iro.umontreal.ca/~feeley/
Root-URL: http://www.iro.umontreal.ca
Title: Using Multilisp for Solving Constraint Satisfaction Problems: an Application to Nucleic Acid 3D Structure Determination  
Author: MARC FEELEY MARCEL TURCOTTE GUY LAPALME 
Keyword: Parallel Computation, Symbolic Computation, Multilisp, Constraint Satisfaction, Functional Programming, Applications  
Address: Montreal, Montreal (Quebec) Canada, H3C 3J7  
Affiliation: Departement d'informatique et de recherche operationnelle, Universite de  
Note: LISP AND SYMBOLIC COMPUTATION,  c 1994 Kluwer Academic Publishers, Boston. Manufactured in The Netherlands.  
Email: feeley@iro.umontreal.ca  turcotte@iro.umontreal.ca  lapalme@iro.umontreal.ca  
Date: 7, 231-247 (1994)  
Abstract: This paper describes and evaluates a parallel program for determining the three-dimensional structure of nucleic acids. A parallel constraint satisfaction algorithm is used to search a discrete space of shapes. Using two realistic data sets, we compare a previous sequential version of the program written in Miranda to the new sequential and parallel versions written in C, Scheme, and Multilisp, and explain how these new versions were designed to attain good absolute performance. Critical issues were the performance of floating-point operations, garbage collection, load balancing, and contention for shared data. We found that speedup was dependent on the data set. For the first data set, nearly linear speedup was observed for up to 64 processors whereas for the second the speedup was limited to a factor of 16. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <institution> BBN Advanced Computers Inc., </institution> <address> Cambridge, MA. Inside the GP1000, </address> <year> 1989. </year>
Reference-contexts: Gambit uses a simple stop-and-copy garbage collector based on Cheney's algorithm [3]. Consequently, each semispace is 1.5 Mbytes. The Multilisp runs reported in Section 7 were done with Gambit 2.2 on a BBN Butterfly GP1000 shared-memory multiprocessor <ref> [1] </ref> running Mach 1000 release 2.5.2. To avoid page faults, only 1 Mbytes of heap space was allocated per processor. Each of the GP1000's processors is a 16 Mhz 68020 with 4 Mbytes of local memory. Local memory is partitioned through software into private and shared sections.
Reference: [2] <author> R. Bernstein, T. F. Koetzle, G. J. Williams, E. F. Meyer, M. D. Brice, J. R. Rodgers, O. Kennard, T. Shimanouchi, and M. Tasumi. </author> <title> The Protein Data Bank: A computer-based archival file for macromolecular structures. </title> <journal> Eur. Biochem., </journal> <volume> 80 </volume> <pages> 319-324, </pages> <year> 1977. </year>
Reference-contexts: Figure 3 shows the three levels of organization of the yeast Phenylalanine tRNA (entry number 1TRA of the Protein Data Bank <ref> [2] </ref>). Researchers have developed reliable methods for determining the primary structure of proteins and nucleic acids.
Reference: [3] <author> C. J. </author> <title> Cheney. A nonrecursive list compacting algorithm. </title> <journal> Communications of the ACM, </journal> <volume> 13(11) </volume> <pages> 677-678, </pages> <month> November </month> <year> 1970. </year>
Reference-contexts: The Scheme execution was done with Gambit 2.2 and a heap size of 3 Mbytes. This rather small heap size was the largest that avoided page faults on the Apollo. Gambit uses a simple stop-and-copy garbage collector based on Cheney's algorithm <ref> [3] </ref>. Consequently, each semispace is 1.5 Mbytes. The Multilisp runs reported in Section 7 were done with Gambit 2.2 on a BBN Butterfly GP1000 shared-memory multiprocessor [1] running Mach 1000 release 2.5.2. To avoid page faults, only 1 Mbytes of heap space was allocated per processor.
Reference: [4] <author> P. Dumas, D. Moras, C. Florentz, and R. Giege. </author> <title> 3-D Graphics Modelling of the tRNA-like 3'-end of Turnip Yellow Mosaic Virus RNA: Structural and Functional Implications. </title> <journal> J. Biomol. Str. Dynam., </journal> <volume> 4 </volume> <pages> 707-728, </pages> <year> 1987. </year>
Reference-contexts: The different versions of the program were tested on two realistic problems taken from a previous paper [13]. The first problem is the anticodon loop-stem structure from 1TRA. The second is a model proposed by Dumas et al. <ref> [4] </ref> for the pseudo-knot structure. These two problems are relatively small when compared to other structures processed by MC-SYM (some structures take several days to solve on a USING MULTILISP FOR SOLVING CONSTRAINT SATISFACTION PROBLEMS 237 high-performance workstation).
Reference: [5] <author> M. Feeley. </author> <title> An Efficient and General Implementation of Futures on Large Scale Shared-Memory Multiprocessors. </title> <type> PhD thesis, </type> <institution> Brandeis University Department of Computer Science, </institution> <year> 1993. </year> <note> Available as publication #869 from departement d'informatique et recherche operationnelle de l'Universite de Montreal. </note>
Reference-contexts: Thus, when the program is run on a single processor, no tasks are created and the overhead is almost zero. However, an optimized implementation of the more traditional eager task creation would probably give good results due to the moderate task granularity. In <ref> [5] </ref> we found that, on the GP1000, contention for shared data can be a serious bottleneck when the number of processors is large. The GP1000 does not have coherent caches or combining circuitry in the memory interconnect so all accesses to a datum get serialized by the hardware.
Reference: [6] <author> M. Feeley. </author> <title> A message passing implementation of lazy task creation. </title> <booktitle> In Parallel Symbolic Computing: Languages, Systems, and Applications (US/Japan Workshop Proceedings). Springer-Verlag Lecture Notes in Computer Science 748, </booktitle> <month> November </month> <year> 1993. </year>
Reference-contexts: Consequently the overhead of parallelization is small; in fact the run time of the Scheme and Multilisp versions is identical when run on a single processor with the same garbage collection algorithm. Gambit uses lazy task creation (LTC) to implement futures <ref> [6] </ref>. With LTC, future forms compile to a small number of machine instructions and it is only when another processor needs work that a larger price is paid to create and transfer a task.
Reference: [7] <author> M. Feeley and J. S. Miller. </author> <title> A parallel virtual machine for efficient Scheme compilation. </title> <booktitle> In Proceedings of the 1990 ACM Conference on Lisp and Functional Programming Languages and Computer Architecture, </booktitle> <address> Nice, France, </address> <month> June </month> <year> 1990. </year>
Reference-contexts: Program Development and Experiments The project was carried out in three phases. First, the original Miranda implementation of the system was translated into Scheme. The system was then parallelized according to the Multilisp paradigm. Gambit <ref> [7] </ref> was chosen as the host Scheme implementation because it features an optimizing native-code compiler and it efficiently supports the Multilisp language. In the last phase, the Scheme version was translated to C in order to evaluate the costs of using Scheme.
Reference: [8] <author> K. A. Frenkel. </author> <title> The human genome project and informatics. </title> <journal> Communications of the ACM, </journal> <volume> 34(11) </volume> <pages> 41-51, </pages> <month> November </month> <year> 1991. </year>
Reference-contexts: For a very large number of nucleic acids, the sequence of nucleotides (the chemical composition) is known but not the three-dimensional shape. This is due in part to the great progress in sequencing techniques and, in a related way, to mega sequencing projects, such as the Human Genome Project <ref> [8] </ref>. There is thus a great need for sequence analysis tools that infer shape from sequence data. Most successful approaches to the structure determination problem rely on homology and computer graphics modeling.
Reference: [9] <author> D. Gautheret and R. Cedergren. </author> <title> Modeling the three-dimensional structure of RNA. </title> <journal> FASEB Journal, </journal> <volume> 7 </volume> <pages> 97-105, </pages> <month> January </month> <year> 1993. </year>
Reference-contexts: With the help of molecular display programs the global structure is manually constructed from these pieces. However, structure has 232 M. FEELEY, M. TURCOTTE, AND G. LAPALME been determined for few nucleic acids and thus this approach is limited. A review of RNA modeling techniques is presented in <ref> [9] </ref>. Our approach combines symbolic and numerical computation, as depicted in fig. 1. A "symbolic generation" step takes experimental and theoretical data as input and generates a preliminary pool of structures using the Constraint Satisfaction Problem (CSP) algorithm described in this paper.
Reference: [10] <author> Vipin Kumar. </author> <title> Algorithms for constraint-satisfaction problems: A survey. </title> <journal> AI magazine, </journal> <volume> 13(1) </volume> <pages> 32-44, </pages> <year> 1992. </year>
Reference-contexts: As soon as all the variables relevant to a constraint are instantiated, the validity of the constraint is checked. If a partial instantiation violates any of the constraints, backtracking is performed to the most recently instantiated variable that still has alternatives available." <ref> [10] </ref>. The resulting computation is tree-like. Each branch of a node at level i (i = 1 at root) corresponds to an assignment of x i that does not violate the constraints.
Reference: [11] <author> F. Leclerc, R. Cedergren, and A. D. Ellington. </author> <title> A three-dimensional model of the Rev Binding Element of HIV-1 derived from analyses of in vitro selected variants (submitted to Nature Structural Biology). Nature Structural Biology. This paper (in press) describes a protocol to apply energy minimization techniques to MC-SYM models. </title>
Reference-contexts: The precision lost in the symbolic generation model is recovered in the numerical step. In this paper we discuss the symbolic generation step. Details of the numerical step can be found in <ref> [11] </ref>. A sequential version of the system, called MC-SYM for "Macromolecular Conformation by SYMbolic generation" [13], is in use in over 30 sites around the world, including several academic research centers and two pharmaceutical companies.
Reference: [12] <author> F. Major, G. Lapalme, and R. Cedergren. </author> <title> Domain Generating Functions for Solving Constraint Satisfaction Problems. </title> <journal> J. Funct. Prog., </journal> <volume> 1(2) </volume> <pages> 213-227, </pages> <year> 1991. </year>
Reference-contexts: They can be made discrete and finite but they would have to be very large to attain a useful precision. The strategy we have adopted is to introduce problem-specific information to dynamically reduce the degrees of freedom of the domains <ref> [12] </ref>. The motivation is that secondary and tertiary interactions between nucleotides physically restrict their relative placement in space. For instance, the placement of a nucleotide restricts the placement of the next nucleotide in the sequence and any other nucleotide it interacts with.
Reference: [13] <author> F. Major, M. Turcotte, D. Gautheret, G. Lapalme, E. Fillion, and R. Cedergren. </author> <title> The Combination of Symbolic and Numerical Computation for Three-Dimensional Modeling of RNA. </title> <journal> Science, </journal> <volume> 253 </volume> <pages> 1255-1260, </pages> <month> September </month> <year> 1991. </year>
Reference-contexts: The precision lost in the symbolic generation model is recovered in the numerical step. In this paper we discuss the symbolic generation step. Details of the numerical step can be found in [11]. A sequential version of the system, called MC-SYM for "Macromolecular Conformation by SYMbolic generation" <ref> [13] </ref>, is in use in over 30 sites around the world, including several academic research centers and two pharmaceutical companies. The next section introduces some background theory, and following sections explain the details of our method. 2. <p> In the last phase, the Scheme version was translated to C in order to evaluate the costs of using Scheme. The different versions of the program were tested on two realistic problems taken from a previous paper <ref> [13] </ref>. The first problem is the anticodon loop-stem structure from 1TRA. The second is a model proposed by Dumas et al. [4] for the pseudo-knot structure.
Reference: [14] <institution> Research Software Limited, Canterbury, </institution> <address> England. </address> <note> Miranda System Manual, </note> <year> 1989. </year>
Reference-contexts: The C version of the program was compiled with the native C compiler (cc) with optimizations enabled (-O). The Miranda execution was done with Miranda 2.015 <ref> [14] </ref> and a heap size of 3 Mbytes. The Scheme execution was done with Gambit 2.2 and a heap size of 3 Mbytes. This rather small heap size was the largest that avoided page faults on the Apollo. Gambit uses a simple stop-and-copy garbage collector based on Cheney's algorithm [3].
Reference: [15] <author> W. Saenger. </author> <title> Principles of Nucleic Acid Structure. </title> <publisher> Springer-Verlag, </publisher> <address> New-York, </address> <year> 1984. </year>
Reference-contexts: The next section introduces some background theory, and following sections explain the details of our method. 2. Background Theory: Nucleic Acid Structure There are two types of nucleic acids (see <ref> [15] </ref> for a review); one is deoxyribonucleic acid (DNA), which carries the genetic information, and the other is ribonucleic acid (RNA) which serves as an intermediary in the protein synthesis but also may have catalytic properties. The nucleic acids are chains of smaller molecules, the nucleotides (fig. 2).
Reference: [16] <author> J. D. Watson, N. H. Hopkins, J. W. Roberts, J. Steitz Argetsinger, and A. M. Weiner. </author> <title> Molecular Biology of the Gene, Volume I & II. </title> <publisher> Benjamin Cummings, </publisher> <address> Menlo-Park, </address> <year> 1987. </year>
Reference-contexts: Since they contain the sugar deoxyribose, the nucleotides of DNA are called deoxy-ribonucleotides, while those of RNA, which contain the sugar ribose, are known as ribonucleotides" <ref> [16] </ref>. (a) primary structure (b) secondary structure (c) tertiary structure of nucleotides. Figure (b) shows the two-dimensional folding of the molecule: it shows the juxtaposition in space of distant nucleotides in the sequence (solid lines represent regular base-pairings while dotted lines show long-range tertiary interactions).
References-found: 16

