URL: ftp://ftp.cs.colorado.edu/users/alw/papers/tse0495.ps
Refering-URL: http://www.cs.colorado.edu/serl/arch/Papers.html
Root-URL: http://www.cs.colorado.edu
Title: Formal Specification and Analysis of Software Architectures Using the Chemical Abstract Machine Model  
Author: Paola Inverardi and Alexander L. Wolf 
Keyword: Index terms| Software architecture, chemical abstract machine, specification, analysis, formal methods.  
Date: 4, APRIL 1995 373  
Note: IEEE TRANSACTIONS ON SOFTWARE ENGINEERING, VOL. 21, NO.  
Abstract: We are exploring an approach to formally specifying and analyzing software architectures that is based on viewing software systems as chemicals whose reactions are controlled by explicitly stated rules. This powerful metaphor was devised in the domain of theoretical computer science by Ban^atre and Le Metayer and then reformulated as the Chemical Abstract Machine, or CHAM, by Berry and Boudol. The CHAM formalism provides a framework for developing operational specifications that does not bias the described system toward any particular computational model. It also encourages the construction and use of modular specifications at different levels of detail. We illustrate the use of the CHAM for architectural description and analysis by applying it to two different architectures for a simple, but familiar, software system, the multiphase compiler. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Allen and D. Garlan. </author> <title> A Formal Approach to Software Architectures. </title> <booktitle> In Proceedings of the IFIP Congress. </booktitle> <publisher> Elsevier, </publisher> <month> Septem-ber </month> <year> 1992. </year>
Reference-contexts: In particular, we can simply add one law from the concurrent, shared repository CHAM, namely T 10 , and thereby change the behavior into more of a pipeline software architecture <ref> [1] </ref>. Concurrency arises at the granularity of the modules, since the heating rules T 1 and T 10 allow the front end to begin processing a new source text at the same time as the back end is still processing the correlated phrases associated with the previous source text. <p> On the other hand, Z has proven to be quite useful for the description and analysis of certain static properties of software architectures <ref> [1] </ref>, [8]. Another semantic framework that is being used in formal architectural description, one that is better able to describe dynamic properties of architectures, is CSP [9]. In particular, the Wright architectural description language uses a subset of CSP to specify connecting elements [2].
Reference: [2] <author> R. Allen and D. Garlan. </author> <title> Formalizing Architectural Connection. </title> <booktitle> In Proceedings of the 16th International Conference on Software Engineering, </booktitle> <pages> pages 71-80. </pages> <publisher> IEEE Computer Society, </publisher> <month> May </month> <year> 1994. </year>
Reference-contexts: Another semantic framework that is being used in formal architectural description, one that is better able to describe dynamic properties of architectures, is CSP [9]. In particular, the Wright architectural description language uses a subset of CSP to specify connecting elements <ref> [2] </ref>. Given a grounding in CSP, analysis of Wright specifications can reveal certain important correctness properties, such as freedom from deadlock.
Reference: [3] <author> J.-P. Ban^atre and D. Le Metayer. </author> <title> The Gamma Model and its Discipline of Programming. </title> <booktitle> Science of Computer Programming, </booktitle> <volume> 15 </volume> <pages> 55-77, </pages> <year> 1990. </year>
Reference: [4] <author> J.-P. Ban^atre and D. Le Metayer. </author> <title> Programming by Multiset Transformation. </title> <journal> Communications of the ACM, </journal> <volume> 36(1) </volume> <pages> 98-111, </pages> <month> January </month> <year> 1993. </year>
Reference: [5] <author> G. Berry and G. Boudol. </author> <title> The Chemical Abstract Machine. </title> <journal> Theoretical Computer Science, </journal> <volume> 96 </volume> <pages> 217-248, </pages> <year> 1992. </year>
Reference: [6] <author> G. Boudol. </author> <title> Some Chemical Abstract Machines. In A Decade of Concurrency, </title> <booktitle> number 803 in Lecture Notes in Computer Science, </booktitle> <pages> pages 92-123. </pages> <publisher> Springer-Verlag, </publisher> <month> May </month> <year> 1994. </year>
Reference: [7] <author> N. Dershowitz and J.-P. Jouannaud. </author> <title> Rewrite Systems. </title> <editor> In J. van Leeuwen, editor, </editor> <booktitle> Handbook of Theoretical Computer Science, Vol. B: Formal Models and Semantics, </booktitle> <pages> pages 243-320. </pages> <publisher> North Holland, </publisher> <address> Amsterdam, </address> <year> 1990. </year>
Reference-contexts: In particular, molecules are defined in terms of an algebraic initial structure that fosters structural inductive proofs. Furthermore, the transformation rules are defined as standard rewriting rules, thus allowing for the application of well-known results and techniques from the field of term rewriting systems <ref> [7] </ref>, [10]. Below, we illustrate both kinds of analysis applied to the specifications of the multiphase compiler architecture given in the previous section.
Reference: [8] <author> D. Garlan and D. Notkin. </author> <title> Formalizing Design Spaces: Implicit Invocation Mechanisms. </title> <booktitle> In Proceedings of VDM '91: Formal Software Development Methods, </booktitle> <month> October </month> <year> 1991. </year>
Reference-contexts: On the other hand, Z has proven to be quite useful for the description and analysis of certain static properties of software architectures [1], <ref> [8] </ref>. Another semantic framework that is being used in formal architectural description, one that is better able to describe dynamic properties of architectures, is CSP [9]. In particular, the Wright architectural description language uses a subset of CSP to specify connecting elements [2].
Reference: [9] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1985. </year>
Reference-contexts: On the other hand, Z has proven to be quite useful for the description and analysis of certain static properties of software architectures [1], [8]. Another semantic framework that is being used in formal architectural description, one that is better able to describe dynamic properties of architectures, is CSP <ref> [9] </ref>. In particular, the Wright architectural description language uses a subset of CSP to specify connecting elements [2]. Given a grounding in CSP, analysis of Wright specifications can reveal certain important correctness properties, such as freedom from deadlock.
Reference: [10] <author> J.W. Klop and R.C. de Vrijer. </author> <title> Term Rewriting Systems. </title> <note> Cam-bridge University Press. To appear. </note>
Reference-contexts: In particular, molecules are defined in terms of an algebraic initial structure that fosters structural inductive proofs. Furthermore, the transformation rules are defined as standard rewriting rules, thus allowing for the application of well-known results and techniques from the field of term rewriting systems [7], <ref> [10] </ref>. Below, we illustrate both kinds of analysis applied to the specifications of the multiphase compiler architecture given in the previous section.
Reference: [11] <author> P. Landin. </author> <title> The Mechanical Evaluation of Expressions. </title> <journal> Computer Journal, </journal> <volume> 6 </volume> <pages> 308-320, </pages> <year> 1964. </year>
Reference: [12] <author> R. Milner. </author> <title> Communication and Concurrency. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, New Jersey, </address> <year> 1989. </year>
Reference: [13] <author> D.L. Parnas. </author> <title> On the Criteria to be Used in Decomposing Systems into Modules. </title> <journal> Communications of the ACM, </journal> <volume> 15(12) </volume> <pages> 1053-1058, </pages> <month> December </month> <year> 1972. </year>
Reference-contexts: We now demonstrate the power of the CHAM model in describing a modular structure for an architecture. In particular, we make use of the membrane and airlock constructs discussed in Section III to define modules and interfaces <ref> [13] </ref> for the sequential architecture. The use of the membrane construct for this purpose is rather natural, since it is the construct expressly provided by the CHAM to abstractly treat solutions as single molecules.
Reference: [14] <author> D.E. Perry and A.L. Wolf. </author> <title> Foundations for the Study of Software Architecture. </title> <booktitle> SIGSOFT Software Engineering Notes, </booktitle> <volume> 17(4) </volume> <pages> 40-52, </pages> <month> October </month> <year> 1992. </year>
Reference-contexts: Finally, CHAM descriptions are inherently modular, allowing the refinement of a description to proceed by the addition of molecules and transformation rules. Similarly, families of architectures, or architectural styles <ref> [14] </ref> can be handled by simply defining general molecules and rules that get refined by definitions of additional specialized molecules and rules. This is essentially what happens in the multiphase compiler example presented in Section IV.
Reference: [15] <author> G. Plotkin. </author> <title> A Structural Approach to Operational Semantics. </title> <type> Technical Report DAIMI FN-19, </type> <institution> University of Aarhus, </institution> <year> 1981. </year>
Reference: [16] <author> J.M. Spivey. </author> <title> The Z Notation: A Reference Manual. </title> <publisher> Prentice-Hall, </publisher> <year> 1989. </year>
Reference-contexts: In addition to our investigation of the CHAM model, research into formal architectural description is causing an examination of various other semantic models as suitable foundations. A considerable amount of work has involved the Z specification language <ref> [16] </ref>. In contrast to the operational CHAM model, Z is a model-based, set-theoretic formalism.

References-found: 16

