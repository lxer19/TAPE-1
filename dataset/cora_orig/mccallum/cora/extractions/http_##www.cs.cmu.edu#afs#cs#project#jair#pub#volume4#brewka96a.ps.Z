URL: http://www.cs.cmu.edu/afs/cs/project/jair/pub/volume4/brewka96a.ps.Z
Refering-URL: http://www.cs.washington.edu/research/jair/abstracts/brewka96a.html
Root-URL: 
Email: brewka@kr.tuwien.ac.at  
Title: Well-Founded Semantics for Extended Logic Programs with Dynamic Preferences  
Author: Gerhard Brewka 
Address: Treitlstr. 3, 1040 Wien, Austria  
Affiliation: TU Wien, Abteilung fur Wissensbasierte Systeme  
Note: Journal of Artificial Intelligence Research 4 (1996) 19-36 Submitted 7/95; published 2/96  
Abstract: The paper describes an extension of well-founded semantics for logic programs with two types of negation. In this extension information about preferences between rules can be expressed in the logical language and derived dynamically. This is achieved by using a reserved predicate symbol and a naming technique. Conflicts among rules are resolved whenever possible on the basis of derived preference information. The well-founded conclusions of prioritized logic programs can be computed in polynomial time. A legal reasoning example illustrates the usefulness of the approach.
Abstract-found: 1
Intro-found: 1
Reference: <author> Baral, C., & Gelfond, M. </author> <year> (1994). </year> <title> Logic programming and knowledge representation. </title> <journal> Journal of Logic Programming, </journal> <volume> 19,20, </volume> <pages> 73-148. </pages>
Reference-contexts: For convenience we will sometimes use a rule schema to represent a set of propositional rules, namely the set of all ground instances of the schema. Extended logic programs are very useful for knowledge representation purposes, see for instance <ref> (Baral & Gelfond, 1994) </ref> for a number of illustrative examples. Two major semantics for extended logic programs have been defined: (1) answer set semantics (Gelfond & Lifschitz, 1990), an extension of stable model semantics, and (2) a version of well-founded semantics (Przymusinski, 1991). <p> Complexity The time complexity of well-founded semantics for a general logic program P is known to be quadratic in the size of P , a result attributed to folklore in <ref> (Baral & Gelfond, 1994) </ref>. A proof was given by Witteveen (1991). His analysis is based on Dowling and Gallier's result whereby satisfiability of Horn clauses can be tested in linear time (Dowling & Gallier, 1984).
Reference: <author> Baral, C., & Subrahmanian, V. </author> <year> (1991). </year> <title> Duality between alternative semantics of logic programs and nonmonotonic formalisms. </title> <booktitle> In Proc. Intl. Workshop on Logic Programming and Nonmonotonic Reasoning. </booktitle> <publisher> Springer. </publisher>
Reference-contexts: The definition extends Baral and Subrahmanian's formulation of well-founded semantics for normal logic programs <ref> (Baral & Subrahmanian, 1991) </ref> and was used by several authors (Baral & Gelfond, 1994; Lifschitz, 1996). We show that this definition suffers from an unnecessary weakness and present a reformulation that leads to better results.
Reference: <author> Brewka, G. </author> <year> (1994a). </year> <title> Adding priorities and specificity to default logic. </title> <booktitle> In Proc. </booktitle> <address> JELIA-94, York. </address> <publisher> Springer. </publisher>
Reference-contexts: All rights reserved. Brewka The relevance of preferences is well-recognized in nonmonotonic reasoning, and prioritized versions for most of the nonmonotonic logics have been proposed, e.g., prioritized circumscription (Lifschitz, 1985), hierarchic autoepistemic logic (Konolige, 1988), prioritized default logic <ref> (Brewka, 1994a) </ref>. In these approaches preferences are handled in an "external" manner in the following sense: some ordering among defaults is used to control the generation of the nonmonotonic conclusions. For instance, in the case of prioritized default logic this information is used to control the generation of extensions.
Reference: <author> Brewka, G. </author> <year> (1994b). </year> <title> Reasoning about priorities in default logic. </title> <booktitle> In Proc. AAAI-94, </booktitle> <address> Seattle. </address>
Reference-contexts: What we would like to have, therefore, is an approach that allows us to represent preference information in the language and derive such information dynamically. In a recent paper <ref> (Brewka, 1994b) </ref> the author has described a variant of normal default logic in which reasoning about preferences is possible. Although the version of default logic presented in this earlier paper produces reasonable results in most cases, this approach has several drawbacks: 1. <p> S 1 and the empty set of rules. We thus conclude :b as intended. The least fixpoint is S 2 = fn 2 n 1 ; :(n 1 n 2 ); bg In <ref> (Brewka, 1994b) </ref> we used an example to illustrate the possible non-existence of extensions in our earlier approach. This example involved two normal defaults each of which had the conclusion that the other one is to be preferred. <p> We will use an example first discussed by Gordon (1993, p.7). We somewhat simplified it for our purposes. The same example was also used in <ref> (Brewka, 1994b) </ref> to illustrate the approach presented there. Assume a person wants to find out if her security interest in a certain ship is perfected. She currently has possession of the ship.
Reference: <author> Buccafurri, F., Leone, N., & Rullo, P. </author> <year> (1996). </year> <title> Stable models and their computation for logic programming with inheritance and true negation. </title> <note> to appear in Journal of Logic Programming. </note>
Reference-contexts: It is, therefore, more reasonable to view Kowalski and Sadri's approach as a contribution to inconsistency handling rather than preference handling. An approach that is closer in spirit to ours is ordered logic programming <ref> (Buccafurri, Leone, & Rullo, 1996) </ref>. An ordered logic program is a set of components forming an inheritance hierarchy. Each component consists of a set of rules. <p> The inheritance hierarchy is used to settle conflicts among rules: rules lower in the hierarchy have preference over those higher up in the hierarchy since the former are considered more specific. A notion of a stable model for ordered logic programs can be defined <ref> (see Buccafurri et al., 1996, for the details) </ref>.
Reference: <author> Dowling, W., & Gallier, J. </author> <year> (1984). </year> <title> Linear time algorithms for testing the satisfiability of propositional horn formulae. </title> <journal> Journal of Logic Programming, </journal> <volume> 3, </volume> <pages> 267-284. </pages>
Reference-contexts: A proof was given by Witteveen (1991). His analysis is based on Dowling and Gallier's result whereby satisfiability of Horn clauses can be tested in linear time <ref> (Dowling & Gallier, 1984) </ref>. In Dowling and Gallier's approach it is actually a minimal model of a Horn theory that is computed in linear time.
Reference: <author> Dung, P. </author> <year> (1993). </year> <title> The acceptability of arguments and its fundamental role in nonmonotonic reasoning and logic programming. </title> <booktitle> In Proc. 13th Intl. Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: Finally we would like to mention an approach recently presented by Prakken and Sartor (1995). They extend Dung's argument system style reconstruction of logic programming <ref> (Dung, 1993) </ref> with a preference handling method that is very close to ours. This is not astonishing since, as the authors point out, their approach is based on "unpublished ideas of Gerhard Brewka".
Reference: <author> Gelfond, M., & Lifschitz, V. </author> <year> (1990). </year> <title> Logic programs with classical negation. </title> <booktitle> In Proc. 7th Intl. Conference on Logic Programming. </booktitle> <editor> 35 Brewka Gordon, T. F. </editor> <year> (1993). </year> <title> The Pleadings Game: An Artificial Intelligence Model of Procedural Justice. </title> <type> Ph.D. thesis, </type> <institution> TU Darmstadt. </institution>
Reference-contexts: Section 4 illustrates the expressive power of our approach using a more realistic example from legal reasoning. Section 5 shows that the worst case time complexity for generating well-founded conclusions for prioritized programs is polynomial. Section 6 investigates the relationship to Gelfond and Lifschitz's answer set semantics <ref> (Gelfond & Lifschitz, 1990) </ref>. Section 7 discusses related work and concludes. 2. <p> Extended logic programs are very useful for knowledge representation purposes, see for instance (Baral & Gelfond, 1994) for a number of illustrative examples. Two major semantics for extended logic programs have been defined: (1) answer set semantics <ref> (Gelfond & Lifschitz, 1990) </ref>, an extension of stable model semantics, and (2) a version of well-founded semantics (Przymusinski, 1991). The second approach can be viewed as an efficient approximation of the first. Let us first introduce answer sets. <p> Proof: The proposition is trivially satisfied whenever P has no answer set at all, or when Lit is the single answer set of P . So assume P possesses a non-empty set of consistent answer sets, the only remaining possibility according to results in <ref> (Gelfond & Lifschitz, 1990) </ref>. To show that iterating ? P on the empty set cannot produce a literal s 62 Ans (P ) it suffices to show that X Ans (P ) implies ? P (X) Ans (P ). <p> Such techniques are beyond the scope of this paper. 6. Relation to Answer Sets In this section we will investigate the relation of our modification of well-founded semantics to answer set semantics <ref> (Gelfond & Lifschitz, 1990) </ref>. Since our approach handles an extended language in which certain symbols are given a particular pre-defined meaning a thorough investigation of this relationship is only possible after a corresponding extension of answer set semantics to prioritized logic programs has been defined.
Reference: <author> Konolige, K. </author> <year> (1988). </year> <title> Hierarchic autoepistemic theories for nonmonotonic reasoning. </title> <booktitle> In Proc. </booktitle> <publisher> AAAI. </publisher>
Reference-contexts: All rights reserved. Brewka The relevance of preferences is well-recognized in nonmonotonic reasoning, and prioritized versions for most of the nonmonotonic logics have been proposed, e.g., prioritized circumscription (Lifschitz, 1985), hierarchic autoepistemic logic <ref> (Konolige, 1988) </ref>, prioritized default logic (Brewka, 1994a). In these approaches preferences are handled in an "external" manner in the following sense: some ordering among defaults is used to control the generation of the nonmonotonic conclusions.
Reference: <author> Kowalski, R., & Sadri, F. </author> <year> (1991). </year> <title> Logic programs with exceptions. </title> <journal> New Generation Computing, </journal> <volume> 9, </volume> <pages> 387-400. </pages>
Reference: <author> Lifschitz, V. </author> <year> (1985). </year> <title> Computing circumscription. </title> <booktitle> In Proc. 9th Int. Joint Conference on Artificial Intelligence. </booktitle>
Reference-contexts: All rights reserved. Brewka The relevance of preferences is well-recognized in nonmonotonic reasoning, and prioritized versions for most of the nonmonotonic logics have been proposed, e.g., prioritized circumscription <ref> (Lifschitz, 1985) </ref>, hierarchic autoepistemic logic (Konolige, 1988), prioritized default logic (Brewka, 1994a). In these approaches preferences are handled in an "external" manner in the following sense: some ordering among defaults is used to control the generation of the nonmonotonic conclusions.
Reference: <author> Lifschitz, V. </author> <year> (1996). </year> <title> Foundations of declarative logic programming. </title> <editor> In Brewka, G. (Ed.), </editor> <booktitle> Principles of Knowledge Representation. CSLI publishers, Studies in Logic, Language and Information. </booktitle>
Reference: <author> Pereira, L., & Alferes, J. </author> <year> (1992). </year> <title> Well founded semantics for logic programs with explicit negation. </title> <booktitle> In Proc. 10th European Conference on Artificial Intelligence, </booktitle> <address> Vienna. </address>
Reference: <author> Poole, D. </author> <year> (1985). </year> <title> On the comparison of theories: Preferring the most specific explanation. </title> <booktitle> In Proc. IJCAI-85, </booktitle> <address> Los Angeles. </address>
Reference: <author> Prakken, H. </author> <year> (1993). </year> <title> Logical Tools for Modelling Legal Argument. </title> <type> Ph.D. thesis, </type> <institution> VU Ams-terdam. </institution>
Reference-contexts: In the legal domain it may, for instance, be the case that a more general rule is preferred since it represents federal law as opposed to state law <ref> (Prakken, 1993) </ref>. In these cases preferences may be based on some basic principles regulating how conflicts among rules are to be resolved. Also in other application domains, like model based diagnosis or configuration, preferences play a fundamental role.
Reference: <author> Prakken, H., & Sartor, G. </author> <year> (1995). </year> <title> On the relation between legal language and legal argument: Assumptions, applicability and dynamic priorities. </title> <booktitle> In Proc. International Conference in AI and Law, </booktitle> <address> Washington. </address>
Reference: <author> Przymusinski, T. </author> <year> (1990). </year> <title> The well-founded semantics coincides with the three-valued stable semantics. </title> <journal> Fundamenta Informaticae, </journal> <volume> 13(4), </volume> <pages> 445-464. </pages>
Reference-contexts: The original formulation of well-founded semantics for general logic programs by Gelder, Ross and Schlipf (1991) is based on a certain partial model. Przymusinski reconstructed this definition in 3-valued logic <ref> (Przymusinski, 1990) </ref>. The formulation using an anti-monotone operator was first given by Baral and Subrahmanian (1991) for general logic programs together with a corresponding definition for default logic.
Reference: <author> Przymusinski, T. </author> <year> (1991). </year> <title> Stable semantics for disjunctive programs. </title> <journal> New Generation Computing, </journal> <volume> 9, </volume> <pages> 401-424. </pages>
Reference-contexts: Two major semantics for extended logic programs have been defined: (1) answer set semantics (Gelfond & Lifschitz, 1990), an extension of stable model semantics, and (2) a version of well-founded semantics <ref> (Przymusinski, 1991) </ref>. The second approach can be viewed as an efficient approximation of the first. Let us first introduce answer sets.
Reference: <author> Reiter, R. </author> <year> (1980). </year> <title> A logic for default reasoning. </title> <journal> Artificial Intelligence, </journal> <volume> 13, </volume> <pages> 81-132. </pages>
Reference-contexts: Such rules thus correspond to semi-normal or, if m = 0, normal defaults in Reiter's default logic <ref> (Reiter, 1980) </ref>. We use the ground instances of the following named rules to represent the relevant article of the UCC, the SMA, Lex Posterior (LP), and Lex Superior (LS).
Reference: <author> Tarski, A. </author> <year> (1955). </year> <title> A lattice-theoretical fixpoint theorem and its applications. </title> <journal> Pacific Journal of Mathematics, </journal> <volume> 5, </volume> <pages> 285-309. </pages>
Reference-contexts: Like answer set semantics the well-founded semantics for extended logic programs is based on the operator fl P However, the operator is used in a totally different way. Since fl P is anti-monotone the function P = (fl P ) 2 is monotone. According to the famous Knaster-Tarski theorem <ref> (Tarski, 1955) </ref> every monotone operator has a least fixpoint. The set of well-founded conclusions of a program P , denoted W F S (P ), is defined to be this least fixpoint of P . The fixpoint can be approached from below by iterating P on the empty set.
Reference: <author> Touretzky, D. S. </author> <year> (1986). </year> <title> The Mathematics of Inheritance. </title> <booktitle> Pitman Research Notes in Artificial Intelligence, </booktitle> <address> London. </address>
Reference: <author> Touretzky, D. S., Thomason, R. H., & Horty, J. F. </author> <year> (1991). </year> <note> A skeptic's menagerie: Conflictors, preemptors, reinstaters, and zombies in nonmonotonic inheritance. In Proc. 12th IJCAI, Sydney. </note> <author> van Gelder, A., Ross, K., & Schlipf, J. </author> <year> (1991). </year> <title> The well-founded semantics for general logic programs. </title> <journal> Journal of the ACM, </journal> <volume> 38(3), </volume> <pages> 620-650. </pages>
Reference: <author> Witteveen, C. </author> <year> (1991). </year> <title> Partial semantics for truth maintenance. </title> <editor> In van Eijck, J. (Ed.), </editor> <booktitle> Logics in AI, </booktitle> <pages> pp. 544-561. </pages> <publisher> Springer LNAI 478, </publisher> <address> Heidelberg. </address> <month> 36 </month>
References-found: 23

