URL: http://www.cs.utah.edu/~mjones/papers/byu.thesis.ps.gz
Refering-URL: http://www.cs.utah.edu/~mjones/papers/
Root-URL: 
Title: REPRESENTING ABSTRACT THEORIES USING PREDICATE TYPES  
Author: Michael D. Jones Mark Clement, Committee Member Bill Hays, Committee Member Scott Woodfield, 
Degree: COMMITTEE APPROVAL: Phillip Windley, Committee Chairman  
Date: June 1997  
Note: Masters Degree,  
Affiliation: Department of Computer Science  Graduate Coordinator  
Abstract: Representing abstract theories as predicate types marginaly simplifies the creation and instantiation of abstract theories by making better use of the type system to track theory obligations. Two representations of abstract theories as types are compared using two case studies from abstract algebra and hardware verification. The representations are built in the PVS theorem prover and the HOL theorem prover modified to include a limited, extra-logical notion of predicate types. 
Abstract-found: 1
Intro-found: 1
Reference: [BJLW97] <author> Annette Bunker, Michael D. Jones, Trent N. Larson, and Phillip J. Windley. </author> <title> Alexandria: Libraries of abstract, verified hardware modules. </title> <booktitle> In 2nd Workshop on Libraries, Component Modeling, and Quality Assurance, </booktitle> <month> April </month> <year> 1997. </year>
Reference-contexts: The primitive modules are simple and or and xor gates. The use of abstract theories in hardware verification was incorporated in the Alexandria verification tool which uses abstract theories to model modules in a library of verified hardware components <ref> [BJLW97] </ref>. 5.1.2 Representations Three representations are used in the comparison: traditional HOL abstract theories, restricted types abstract theories and PVS types abstract theories. Each implementation used a different type system to represent abstract theories. The original HOL representation is implemented for HOL90 using simple HOL types.
Reference: [BM88] <author> Robert S. Boyer and J. Strother Moore. </author> <title> A Computational Logic Hand book. </title> <publisher> Academic Press, </publisher> <year> 1988. </year>
Reference-contexts: Many theorem provers exist other than PVS and HOL. The Coq theorem prover uses a constructivist approach to higher-order logic and was developed in France [DFH + 93]. The Boyer-Moore theorem prover, called Nqthm, uses binary-decision diagrams to implement proof by model checking in first-order logic <ref> [BM88] </ref>. 9 2.2 Abstract Theories The use of abstract theories in theorem provers has not received wide attention. Windley proposed a representation of abstract theories for the HOL theorem prover [Win92].
Reference: [DFH + 93] <author> Gilles Dowek, Amy Felty, H. Herbelin, Gerard Huet, Chetan Murthy, Catherin Parent, Christine Paulin-Mohring, and Benjamin Warner. </author> <title> The Coq proof assistant user's guide: version 5.8. </title> <type> Technical Report 154, </type> <institution> INRIA, </institution> <month> May </month> <year> 1993. </year>
Reference-contexts: The most recent proceedings is available [vWGH96]. Many theorem provers exist other than PVS and HOL. The Coq theorem prover uses a constructivist approach to higher-order logic and was developed in France <ref> [DFH + 93] </ref>. The Boyer-Moore theorem prover, called Nqthm, uses binary-decision diagrams to implement proof by model checking in first-order logic [BM88]. 9 2.2 Abstract Theories The use of abstract theories in theorem provers has not received wide attention.
Reference: [FKH90] <author> Mark Longley F. Keith Hanna, Neil Daeche. </author> <title> Specification and verifi cation using dependant types. </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> SE-16(9), </volume> <month> September </month> <year> 1990. </year>
Reference: [GM93] <author> Michael J. C. Gordon and Thomas F. Melham. </author> <title> Introduction to HOL. </title> <publisher> Cambridge University Press, </publisher> <year> 1993. </year>
Reference-contexts: The HOL theorem prover was developed at Cambridge University by Gordon and others. The HOL system is freely available and has limited documentation <ref> [GM93] </ref>. The PVS theorem prover was developed at Stanford Research International (SRI) by Shankar and others. The PVS system is also available for free but requires a license for use in research. Documentation for PVS is also available [SRI].
Reference: [GM94] <author> Carl A. Gunter and John C. Mitchell. </author> <title> Theoretical aspects of object oriented programming: types, semantics, </title> <booktitle> and language design. Foundations of Computing. </booktitle> <publisher> MIT Press, </publisher> <year> 1994. </year>
Reference-contexts: Subtyping has received a great deal of attention in relation to object-oriented programing because subtyping correctly models object inheritance and can be used as a mechanism for performing type inference in object oriented languages. See <ref> [GM94] </ref> for several papers on subtypes and object oriented languages. Predicate subtypes use logical 10 predicates rather than object inheritance for form subtype relationships. Depen-dant subtypes are a further specialization of predicate subtypes in which the scope of free variables in type predicates for functions extend to the right.
Reference: [Jac97] <author> Bart Jacobs. </author> <title> Another proof of TRUE = FALSE in PVS. Email to pvs@csl.sri.com., </title> <year> 1997. </year>
Reference-contexts: In PVS, soundness is traded for efficiency and ease of use. Several cases have been found in which PVS proves something true which is actually false. The majority of these cases involve convoluted use of the type system and file management tools <ref> [Jac97] </ref>. The notion of types in PVS simplifies specification development, but some users have found the automated support for PVS type checking to be limiting. Furthermore, because PVS is a closed system, the user is not free to modify automated algorithms 3 which are inappropriate for specific situations.
Reference: [Jon97] <author> Michael D. Jones. </author> <title> Restricted types for HOL. </title> <editor> In Elsa Gunter, edi tor, </editor> <booktitle> Supplementary Proceedings of the 10th International Conference 55 on Theorem Proving in Higher Order Logics: </booktitle> <address> TPHOLS'97, </address> <month> August </month> <year> 1997. </year> <note> To appear. </note>
Reference-contexts: The system is called "restricted types" and is a significant artifact of this thesis. This chapter contains a detailed description of the implementation and use of type restrictions in HOL and is adapted from <ref> [Jon97] </ref>. 3.1 The Problem with HOL Other members of the theorem proving communities have found dependent predicate subtypes useful for organizing theory information. Several papers highlighting the advantages of predicate and dependent types have appeared in the recent literature ([FKH90], [MS95], [LA92]).
Reference: [LA92] <author> Miriam Leeser and Mark Aagard. </author> <title> A methodology for reusable hardware proofs. </title> <editor> In Luc Claeson and Michael J.C. Gordon, editors, </editor> <booktitle> Proceedings of the 1992 International Workshop on the HOL Theorem Prover and its Applications, </booktitle> <month> November </month> <year> 1992. </year>
Reference-contexts: Several papers highlighting the advantages of predicate and dependent types have appeared in the recent literature ([FKH90], [MS95], <ref> [LA92] </ref>). HOL on the other hand uses a simple traditional type system. Despite efforts to approximate predicate subtypes using restricted quantification, the HOL community has not taken full advantage of predicate and dependent types. Incorporating a rich dependant predicate type system into HOL presents 13 an interesting problem.
Reference: [Mel91] <author> T. F. Melham. </author> <title> A package for inductive relation definitions in HOL. </title> <editor> In Karl N. Levitt Myla Archer, Jeffrey J. Joyce and Phillip J. Windley, editors, </editor> <booktitle> Proceedings of the 1991 International Workshop on the HOL Theorem Proving System and its Aplications. </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1991. </year>
Reference-contexts: In this section we use this technique to specify and verify a half-adder. First, we create the full adder type space in HOL using the type definition package created by Melham <ref> [Mel91] </ref>: # val fulladder_ty = define_type type_spec = `fulladder_ty = fulladder_of of (bool # bool # bool) -&gt; (bool # bool) -&gt; bool`, name = "fulladder_ty_DEF", fixities = [Prefix];; At this point, any device with the right combination of boolean inputs and outputs qualifies for inclusion in type full adder.
Reference: [MS95] <author> Steven P. Miller and Mandayam Srivas. </author> <title> Formal verification of the AAMP5 microprocessor: A case study in the industrial use of formal methods. </title> <booktitle> In WIFT '95: Workshop on Industrial-Strength Formal Specification Techniques, </booktitle> <pages> pages 2-16, </pages> <address> Boca Raton, FL, 1995. </address> <publisher> IEEE Computer Society. </publisher>
Reference-contexts: Several papers highlighting the advantages of predicate and dependent types have appeared in the recent literature ([FKH90], <ref> [MS95] </ref>, [LA92]). HOL on the other hand uses a simple traditional type system. Despite efforts to approximate predicate subtypes using restricted quantification, the HOL community has not taken full advantage of predicate and dependent types. Incorporating a rich dependant predicate type system into HOL presents 13 an interesting problem.
Reference: [OS] <author> Sam Owre and Natarajan Shankar. </author> <title> Formal semantics of PVS. </title> <note> Avail able at http://www.csl.sri.com/shankar/PVS-semantics.ps.gz. </note>
Reference-contexts: PVS contains a well-thought out and useful implementation of dependent predicate subtypes. In <ref> [OS] </ref>, the PVS developers give a thorough presentation of the algorithms used to manage PVS types. These algorithms were incorporated into a type restrictions for the HOL theorem prover. 11 12 Chapter 3 Restricted Types Two implementations of abstract theories as types were developed for this thesis.
Reference: [OSR93] <author> S. Owre, N. Shankar, and J. M. Rushby. </author> <title> The PVS Specification Lan guage (Beta Release). </title> <institution> SRI International Copmuter Science Laboratory, </institution> <address> Menlo Park CA 94025, </address> <year> 1993. </year>
Reference-contexts: However, the representation used here will be significantly different than Windley or Shepherd. The PVS theorem prover supports parameterized theories and allows the specification of theory assumptions <ref> [OSR93] </ref>. Theory parameters can express the abstract representation while the theory assumptions capture theory obligations.
Reference: [Pie96] <author> Benjamin Pierce. </author> <title> Types. </title> <note> Course notes, available on the world-wide web at http://www.cl.cam.ac.uk/Teaching/TypesCourse, April 1996. </note>
Reference-contexts: Notes from Pierce's course on types at Cambridge University provide a solid theoretical introduction to typing which concludes with subtypes as commonly used in object-oriented languages <ref> [Pie96] </ref>. While Pierce's notes demonstrate the use of type rules and rule-based type inference (which is very similar to rule based inference in logic), the notion of subtypes used by Pierce is more structural than predicate types as used in this thesis.
Reference: [She93] <author> David Shepherd. </author> <title> Abstract theories for HOL90. </title> <booktitle> Part of HOL90 docu mentation, </booktitle> <month> February </month> <year> 1993. </year>
Reference-contexts: The user must determine and prove the obligation theorems and instantiate each theorem individually using a special function. Shepherd translated and slightly modified Windley's abstract theories for use with the HOL90 version of the HOL theorem prover <ref> [She93] </ref>. Shepherd simplified the functions needed to create and use an abstract theory and updated the documentation. This work relates to Shepherd's and Windley's in that it presents a representation of abstract theories for use in the HOL theorem prover.
Reference: [SRI] <institution> SRI International Copmuter Science Laboratory. PVS Docu mentation Hompage. </institution> <note> available on the World Wide Web at http://www.csl.sri.com/pvs.html. 56 </note>
Reference-contexts: The HOL system is freely available and has limited documentation [GM93]. The PVS theorem prover was developed at Stanford Research International (SRI) by Shankar and others. The PVS system is also available for free but requires a license for use in research. Documentation for PVS is also available <ref> [SRI] </ref>. The annual conference on theorem provers in higher-order logics brings together developers and users of higher-order logic theorem provers. The most recent proceedings is available [vWGH96]. Many theorem provers exist other than PVS and HOL.
Reference: [vWGH96] <editor> J. von Wright, J. Grundy, and J. Harrison, editors. </editor> <booktitle> Thoerem Proving in Higer Order Logics, number 154 in LNCS. </booktitle> <publisher> Springer, </publisher> <year> 1996. </year>
Reference-contexts: The PVS system is also available for free but requires a license for use in research. Documentation for PVS is also available [SRI]. The annual conference on theorem provers in higher-order logics brings together developers and users of higher-order logic theorem provers. The most recent proceedings is available <ref> [vWGH96] </ref>. Many theorem provers exist other than PVS and HOL. The Coq theorem prover uses a constructivist approach to higher-order logic and was developed in France [DFH + 93].
Reference: [Win92] <author> Phillip Windley. </author> <title> Abstract theories in HOL. </title> <editor> In Luc Claeson and Michael J.C. Gordon, editors, </editor> <booktitle> Proceedings of the 1992 International Workshop on the HOL Theorem Prover and its Applications, Novem-ber 1992. </booktitle> <pages> 57 </pages>
Reference-contexts: The Boyer-Moore theorem prover, called Nqthm, uses binary-decision diagrams to implement proof by model checking in first-order logic [BM88]. 9 2.2 Abstract Theories The use of abstract theories in theorem provers has not received wide attention. Windley proposed a representation of abstract theories for the HOL theorem prover <ref> [Win92] </ref>. Windley's representation is based on a suite of functions which model abstract theories by augmenting the notion of an HOL theory. An HOL theory consists of a collection of definitions, types and constants about which theorems are proven. Windley's abstract theories are HOL theories with theory parameters.
References-found: 18

