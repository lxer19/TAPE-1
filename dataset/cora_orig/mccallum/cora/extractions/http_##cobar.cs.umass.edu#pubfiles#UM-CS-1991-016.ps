URL: http://cobar.cs.umass.edu/pubfiles/UM-CS-1991-016.ps
Refering-URL: http://cobar.cs.umass.edu/pubfiles/
Root-URL: 
Title: Experimental Evaluation of Real-Time Optimistic Concurrency Control Schemes  
Author: Jiandong Huang John A. Stankovic Krithi Ramamritham Don Towsley 
Keyword: real-time database systems, real-time transaction processing, deadlines, concurrency control, performance evaluation, system implementation.  
Note: This work was supported by the National Science Foundation under Grant IRI-8908693 and Grant DCR-8500332, and by the U.S. Office of Naval Research under Grant N00014-85-K0398.  
Date: February, 1991  
Address: Amherst, MA 01003  
Affiliation: Department of Electrical and Computer Engineering  Department of Computer and Information Science University of Massachusetts  
Abstract: Owing to its potential for a high degree of parallelism, optimistic concurrency control is expected to perform better than two-phase locking when integrated with priority-driven CPU scheduling in real-time database systems. In this paper, we examine the overall effects and the impact of the overheads involved in implementing real-time optimistic concurrency control. Using a locking mechanism to ensure the correctness of the implementation, we develop a set of optimistic concurrency control protocols which possess the properties of deadlock freedom and a high degree of parallelism. Through experiments, we investigate, in depth, the effect of the locking mechanism on the performance of optimistic concurrency control protocols. We show that due to blocking, the performance of the protocols is sensitive to priority inversions but not to resource utilization. Further, in contrast to recent simulation studies, our experimental results show that with respect to meeting transaction deadlines, the optimistic approach may not always outperform the two-phase locking scheme which aborts the lower priority transaction to resolve a conflict. We also show that integrated with a weighted priority scheduling algorithm, optimistic concurrency control exhibits greater flexibility in coping with the starvation problem (for longer transactions) than two-phase locking. Our performance studies indicate that the physical implementation has a significant impact on the performance of real-time concurrency control protocols and is hence an important aspect in the study of concurrency control. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Agrawal, R., M.J. Carey and M. Livny, </author> <title> "Concurrency Control Performance Modeling: Alternatives and Implications," </title> <booktitle> ACM Transaction on Database Systems, </booktitle> <address> Vol.12, No.4, </address> <month> Dec. </month> <year> 1987. </year>
Reference-contexts: We fix the multi-programming level at 8 with x = 6 and ff = 5. expect, the deadline guarantee ratio drops as data contention increases. The performance of two baselines, 2PL NRT and OCCL NRT, is consistent with the results from previous studies (e.g., <ref> [4, 1] </ref>), i.e., non real-time two-phase locking outperforms non real-time optimistic approach under data and resource contention. Here an interesting observation is that combined with priority-driven preemptive scheduling, the optimistic approach (OCCL CMT) performs better than two-phase locking (2PL WAIT).
Reference: [2] <author> Abbott, R. and H. Garcia-Molina, </author> <title> "Scheduling Real-Time Transactions: A Performance Evaluation," </title> <booktitle> Proceedings of the 14th VLDB Conference, </booktitle> <month> Aug. </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Concurrency control is one of the main issues in the studies of real-time database systems. With a strict consistency requirement defined by serializability, most real-time concurrency control schemes considered in the literature are based on two-phase locking (2PL) <ref> [18, 2, 9, 17] </ref>. This is not surprising since 2PL has been well studied in traditional database systems and is being widely used in commercial databases. But 2PL, on the other hand, has some inherent problems such as the possibility of deadlocks and long and unpredictable blocking times.
Reference: [3] <author> Abbott, R. and H. Garcia-Molina, </author> <title> "Scheduling I/O Requests with Deadlines: A Performance Evaluation," </title> <booktitle> Proceedings of the 11th Real-Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: For example, regarding the locking-based scheme developed in this work, if a disk controller can perform the write operations in transaction validation order and it can also intelligently manage the order of read and write operations <ref> [3] </ref>, the V-lock holding period can be largely reduced. The integration of concurrency control with I/O scheduling is an interesting topic for future work.
Reference: [4] <author> Carey, M.J. </author> <title> and M.R. Stonebraker, "The Performance of Concurrency Control Algorithms for Database Management Systems," </title> <booktitle> Proceedings of the 10th VLDB Conference, </booktitle> <year> 1984. </year>
Reference-contexts: We fix the multi-programming level at 8 with x = 6 and ff = 5. expect, the deadline guarantee ratio drops as data contention increases. The performance of two baselines, 2PL NRT and OCCL NRT, is consistent with the results from previous studies (e.g., <ref> [4, 1] </ref>), i.e., non real-time two-phase locking outperforms non real-time optimistic approach under data and resource contention. Here an interesting observation is that combined with priority-driven preemptive scheduling, the optimistic approach (OCCL CMT) performs better than two-phase locking (2PL WAIT).
Reference: [5] <author> Harder, T. </author> <title> "Observations on Optimistic Concurrency Control Schemes," </title> <journal> Information Systems, </journal> <volume> Vol. 9, </volume> <pages> No.2, </pages> <year> 1984. </year>
Reference-contexts: Let RS (T ) and WS (T ) denote the read set and write set of transaction T , respectively. Then, the validation operation can be described by the following procedure. 1 For detailed discussion, the reader is referred to <ref> [5] </ref>. 2 VALID := true for T i (i = 1,2, ..., n) do then VALID := false if VALID then execute write phase else invoke real-time conflict resolution The condition WS (T j ) " RS (T i ) 6= fg guarantees that data read by the T i 's <p> For example, a broadcast mechanism can be used for the validation, where the validating transaction "notifies" other currently running transactions of data access conflict [6]. In the following, we describe a physical implementation of a set of validation protocols. The proposed protocols are based on a locking mechanism <ref> [5] </ref>, thus being named OCCL 2 . In the system, each transaction T i maintains its own read set, RS (T i ), and write set, WS (T i ). In addition, a systemwide lock table, LT, is shared by all concurrently executing transactions.
Reference: [6] <author> Haritsa, J.R., M.J. Carey and M. Livny, </author> <title> "On Being Optimistic about Real-Time Constraints," </title> <booktitle> PODS, </booktitle> <year> 1990. </year>
Reference-contexts: These appear to be serious problems for real-time transaction processing, since in a real-time environment, transactions need to meet their time constraints as well as consistency requirements. Recently, some alternatives to two-phase locking for real-time systems have been proposed and studied <ref> [16, 8, 6, 10, 7, 13] </ref>. Among them is a class of concurrency control schemes based on the well-know optimistic approach [12]. Ideally, optimistic concurrency control (OCC) has the properties of non-blocking and deadlock freedom. These properties make the scheme especially attractive to real-time transaction processing. <p> Ideally, optimistic concurrency control (OCC) has the properties of non-blocking and deadlock freedom. These properties make the scheme especially attractive to real-time transaction processing. In real-time database systems, OCC may be in a better position to be integrated with priority-driven CPU scheduling. Previous performance studies <ref> [6, 7] </ref> have shown that under a policy that discards transactions which have missed their deadlines, OCC outperforms 2PL over a wide range of system utilizations. The results in [6, 7] are based on simulation, where optimistic concurrency control is carried out at the logical level and detailed implementation issues at <p> Previous performance studies <ref> [6, 7] </ref> have shown that under a policy that discards transactions which have missed their deadlines, OCC outperforms 2PL over a wide range of system utilizations. The results in [6, 7] are based on simulation, where optimistic concurrency control is carried out at the logical level and detailed implementation issues at the physical level are ignored. In this study, we examine the overall effects and the impact of the overheads involved in implementing real-time optimistic concurrency control. <p> For example, a broadcast mechanism can be used for the validation, where the validating transaction "notifies" other currently running transactions of data access conflict <ref> [6] </ref>. In the following, we describe a physical implementation of a set of validation protocols. The proposed protocols are based on a locking mechanism [5], thus being named OCCL 2 . <p> For example, a transaction that fails in its attempt to acquire a V-lock could release all its other V-locks and attempt to reacquire them when the V-lock is released. This allows read transactions to proceed. Our experimental results do not completely agree with the simulation studies reported in <ref> [6, 7] </ref>, where it was shown that the real-time OCC always outperforms the two-phase locking protocol that employs priority abort. <p> This factor was ignored in the simulation studies. (2) Disk scheduling because of physical limitations of our testbed our disk scheduling policy did not account for deadlines, while priority I/O disk scheduling was used in <ref> [6, 7] </ref>. (3) System model our testbed adopts a closed system, while the simulation studies considered an open system. In addition, the testbed is a single-CPU system with two disks.
Reference: [7] <author> Haritsa, J.R., M.J. Carey and M. Livny, </author> <title> "Dynamic Real-Time Optimistic Concurrency Control," </title> <booktitle> Proceedings of the 11th Real-Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: These appear to be serious problems for real-time transaction processing, since in a real-time environment, transactions need to meet their time constraints as well as consistency requirements. Recently, some alternatives to two-phase locking for real-time systems have been proposed and studied <ref> [16, 8, 6, 10, 7, 13] </ref>. Among them is a class of concurrency control schemes based on the well-know optimistic approach [12]. Ideally, optimistic concurrency control (OCC) has the properties of non-blocking and deadlock freedom. These properties make the scheme especially attractive to real-time transaction processing. <p> Ideally, optimistic concurrency control (OCC) has the properties of non-blocking and deadlock freedom. These properties make the scheme especially attractive to real-time transaction processing. In real-time database systems, OCC may be in a better position to be integrated with priority-driven CPU scheduling. Previous performance studies <ref> [6, 7] </ref> have shown that under a policy that discards transactions which have missed their deadlines, OCC outperforms 2PL over a wide range of system utilizations. The results in [6, 7] are based on simulation, where optimistic concurrency control is carried out at the logical level and detailed implementation issues at <p> Previous performance studies <ref> [6, 7] </ref> have shown that under a policy that discards transactions which have missed their deadlines, OCC outperforms 2PL over a wide range of system utilizations. The results in [6, 7] are based on simulation, where optimistic concurrency control is carried out at the logical level and detailed implementation issues at the physical level are ignored. In this study, we examine the overall effects and the impact of the overheads involved in implementing real-time optimistic concurrency control. <p> In other words, this transaction is "preempted" from its validation phase and is placed in a waiting queue to wait until all of the conflicting transactions with higher priority finish their validation. One variation of the priority wait strategy is WAIT-50 proposed in <ref> [7] </ref>, where a validating transaction will wait if at least 50% of the conflicting transactions have a higher priority over the validating transaction. The protocol aims at balancing the wait factor and the priority cognizance. There can be other variations of the conflict resolution strategy. <p> Still, the two schemes do not take transaction timing constraints into account for resolving access conflict. 2PL PA and OCCL PW consider transaction priority for both CPU scheduling and conflict resolution. Note that here the conflict resolution scheme PW refers to WAIT-50 <ref> [7] </ref>. <p> For example, a transaction that fails in its attempt to acquire a V-lock could release all its other V-locks and attempt to reacquire them when the V-lock is released. This allows read transactions to proceed. Our experimental results do not completely agree with the simulation studies reported in <ref> [6, 7] </ref>, where it was shown that the real-time OCC always outperforms the two-phase locking protocol that employs priority abort. <p> This factor was ignored in the simulation studies. (2) Disk scheduling because of physical limitations of our testbed our disk scheduling policy did not account for deadlines, while priority I/O disk scheduling was used in <ref> [6, 7] </ref>. (3) System model our testbed adopts a closed system, while the simulation studies considered an open system. In addition, the testbed is a single-CPU system with two disks.
Reference: [8] <author> Huang, J., </author> <title> "Real-Time Transaction Processing," </title> <type> Ph.D. Dissertation Prospectus, </type> <institution> Dept. of Electrical and Computer Engin., University of Massachusetts, </institution> <month> June </month> <year> 1989. </year>
Reference-contexts: These appear to be serious problems for real-time transaction processing, since in a real-time environment, transactions need to meet their time constraints as well as consistency requirements. Recently, some alternatives to two-phase locking for real-time systems have been proposed and studied <ref> [16, 8, 6, 10, 7, 13] </ref>. Among them is a class of concurrency control schemes based on the well-know optimistic approach [12]. Ideally, optimistic concurrency control (OCC) has the properties of non-blocking and deadlock freedom. These properties make the scheme especially attractive to real-time transaction processing.
Reference: [9] <author> Huang, J., J.A. Stankovic, D. Towsley and K. Ramamritham, </author> <title> "Experimental Evaluation of Real-Time Transaction Processing," </title> <booktitle> Proceedings of the 10th Real-Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1989 </year>
Reference-contexts: 1 Introduction Concurrency control is one of the main issues in the studies of real-time database systems. With a strict consistency requirement defined by serializability, most real-time concurrency control schemes considered in the literature are based on two-phase locking (2PL) <ref> [18, 2, 9, 17] </ref>. This is not surprising since 2PL has been well studied in traditional database systems and is being widely used in commercial databases. But 2PL, on the other hand, has some inherent problems such as the possibility of deadlocks and long and unpredictable blocking times. <p> These schemes basically rely on limiting the number of transaction restarts. Given the timing constraints in real-time database systems, we use CPU scheduling to address the starvation problem. Based on our earlier studies on transactions with different characteristics <ref> [9] </ref>, here we group transactions into classes by transaction length and assign a weight to each class. The weighting factor is incorporated in the CPU scheduling such that long transactions may have higher priority over short transactions. <p> the fundamental analysis of OCC performance with respect to its implementation, we only examine the three simple conflict resolution policies discussed above. 3 Test Environment The proposed locking-based optimistic concurrency control protocol, together with several real-time conflict resolution schemes, have been implemented and evaluated on our real-time database testbed RT-CARAT <ref> [9] </ref>. In this section, we briefly introduce the testbed organization and describe the system and workload parameter settings. 3.1 Testbed organization Currently, RT-CARAT is a centralized, secondary storage real-time database testbed built on top of the VAX/VMS operating system. <p> Both protocols rely on a locking technique for data access control, and they both involve hashing operation and lock table management. Despite the similarities, 2PL employs deadlock detection while OCCL does not. However, our previous studies <ref> [9] </ref> have shown that the deadlock detection on RT-CARAT does not incur significant overhead. On the other hand, the implementation of OCCL costs more to maintain read/write sets for each individual transaction. This may be the reason why OCCL has slightly larger overhead than 2PL.
Reference: [10] <author> Huang, J. and J.A. Stankovic, </author> <title> "Concurrency Control in Real-Time Database Systems: Optimistic Scheme vs. Two-Phase Locking," </title> <type> A Technical Report, COINS 90-66, </type> <institution> University of Massachusetts, </institution> <month> July </month> <year> 1990. </year>
Reference-contexts: These appear to be serious problems for real-time transaction processing, since in a real-time environment, transactions need to meet their time constraints as well as consistency requirements. Recently, some alternatives to two-phase locking for real-time systems have been proposed and studied <ref> [16, 8, 6, 10, 7, 13] </ref>. Among them is a class of concurrency control schemes based on the well-know optimistic approach [12]. Ideally, optimistic concurrency control (OCC) has the properties of non-blocking and deadlock freedom. These properties make the scheme especially attractive to real-time transaction processing. <p> If all the V-locks can be obtained, that means that the write set of 2 It was called pseudo-locking in our earlier work <ref> [10] </ref>. 3 the validating transaction does not intersect with the read set of any other active transac-tions. At this point, the validating transaction deletes its R-locks in LT and proceeds to its write phase.
Reference: [11] <author> Huang, J., J.A. Stankovic, K. Ramamritham and D. Towsley, </author> <title> "On Using Priority Inheritance in Real-Time Databases," </title> <type> A Technical Report, COINS 90-121, </type> <institution> University of Massachusetts, </institution> <month> Nov. </month> <year> 1990. </year>
Reference-contexts: Aborting a transaction near completion may cost more, on average, than blocking a higher priority transaction for a limited period of time. To shorten the blocking period, a priority inheritance scheduling scheme can be applied during the validation phase and write phase <ref> [11] </ref>. For instance, the CPU scheduler may raise the process priority of the validating transaction to the highest among the concurrent transactions, thus reducing the time for validation processing. In addition, we may use transaction priority to manage access to the critical section.
Reference: [12] <author> Kung, H.T. and J.T. Robinson, </author> <title> "On Optimistic Methods for Concurrency Control," </title> <journal> ACM Transactions on Database Systems, Vol.6, No.2, </journal> <month> June </month> <year> 1981. </year>
Reference-contexts: Recently, some alternatives to two-phase locking for real-time systems have been proposed and studied [16, 8, 6, 10, 7, 13]. Among them is a class of concurrency control schemes based on the well-know optimistic approach <ref> [12] </ref>. Ideally, optimistic concurrency control (OCC) has the properties of non-blocking and deadlock freedom. These properties make the scheme especially attractive to real-time transaction processing. In real-time database systems, OCC may be in a better position to be integrated with priority-driven CPU scheduling. <p> Then we propose a set of locking-based optimistic concurrent control protocols and discuss their implications in comparison with a two-phase locking approach. At the end, we present some conflict resolution policies used in conjunction with the proposed protocols. 2.1 Principle of Optimistic Concurrency Control With the original OCC <ref> [12] </ref>, the execution of a transaction consists of three phases: read, validation, and write. The key component in OCC is the validation phase where a transaction's destiny is decided.
Reference: [13] <author> Lin Y. and S.H. Song, </author> <title> "Concurrency Control in Real-Time Databases by Dynamic Adjustment of Serialization Order," </title> <booktitle> Proceedings of the 11th Real-Time Systems Symposium, </booktitle> <month> Dec. </month> <year> 1990. </year>
Reference-contexts: These appear to be serious problems for real-time transaction processing, since in a real-time environment, transactions need to meet their time constraints as well as consistency requirements. Recently, some alternatives to two-phase locking for real-time systems have been proposed and studied <ref> [16, 8, 6, 10, 7, 13] </ref>. Among them is a class of concurrency control schemes based on the well-know optimistic approach [12]. Ideally, optimistic concurrency control (OCC) has the properties of non-blocking and deadlock freedom. These properties make the scheme especially attractive to real-time transaction processing.
Reference: [14] <author> Peinl, P. and A. Reuter, </author> <title> "Empirical Comparison of Database Concurrency Control Schemes," </title> <booktitle> Proceedings of the 9th VLDB Conference, </booktitle> <address> Florence, Italy, </address> <year> 1983. </year>
Reference-contexts: This results in a lower deadline guarantee ratio for long transactions than for short transactions. In traditional database systems, OCCL may result in more severe starvation because of its high degree of parallelism. Many solutions to the starvation problem have been proposed (e.g., <ref> [14, 15, 19] </ref>). These schemes basically rely on limiting the number of transaction restarts. Given the timing constraints in real-time database systems, we use CPU scheduling to address the starvation problem.
Reference: [15] <author> Pradel, U., G. Schlageter and R. Unland, </author> <title> "Redesign of Optimistic Methods: Improving Performance and Applicability," </title> <booktitle> Proc. IEEE 2nd Int. Conf. on Data Engineering, </booktitle> <year> 1986. </year>
Reference-contexts: This results in a lower deadline guarantee ratio for long transactions than for short transactions. In traditional database systems, OCCL may result in more severe starvation because of its high degree of parallelism. Many solutions to the starvation problem have been proposed (e.g., <ref> [14, 15, 19] </ref>). These schemes basically rely on limiting the number of transaction restarts. Given the timing constraints in real-time database systems, we use CPU scheduling to address the starvation problem.
Reference: [16] <author> Sha, L., R. Rajkumar and J.P. Lehoczky, </author> <title> "Concurrency Control for Distributed Real-Time Databases," </title> <booktitle> ACM SIGMOD Record, </booktitle> <month> March </month> <year> 1988. </year>
Reference-contexts: These appear to be serious problems for real-time transaction processing, since in a real-time environment, transactions need to meet their time constraints as well as consistency requirements. Recently, some alternatives to two-phase locking for real-time systems have been proposed and studied <ref> [16, 8, 6, 10, 7, 13] </ref>. Among them is a class of concurrency control schemes based on the well-know optimistic approach [12]. Ideally, optimistic concurrency control (OCC) has the properties of non-blocking and deadlock freedom. These properties make the scheme especially attractive to real-time transaction processing. <p> The weighting factor is incorporated in the CPU scheduling such that long transactions may have higher priority over short transactions. Using transaction deadline information, the weighted transaction priority is calculated by 3 Priority inversion <ref> [16] </ref> refers to the situation where a high priority transaction is blocked by a low priority transaction due to access conflict. 6 p = (d t)=w; d &gt; 0; t &gt; 0; w 1: where d is the transaction deadline, t is the time when CPU scheduling takes place, and w
Reference: [17] <author> Son, S.H. and C. Chang, </author> <title> "Performance Evaluation of Real-Time Locking Protocols using a Distributed Software Prototyping Environment," </title> <booktitle> Proceedings of the 10th International Conference on Distributed Computing Systems, </booktitle> <address> Paris, France, </address> <month> May </month> <year> 1990. </year>
Reference-contexts: 1 Introduction Concurrency control is one of the main issues in the studies of real-time database systems. With a strict consistency requirement defined by serializability, most real-time concurrency control schemes considered in the literature are based on two-phase locking (2PL) <ref> [18, 2, 9, 17] </ref>. This is not surprising since 2PL has been well studied in traditional database systems and is being widely used in commercial databases. But 2PL, on the other hand, has some inherent problems such as the possibility of deadlocks and long and unpredictable blocking times.
Reference: [18] <author> Stankovic, J.A. and Wei Zhao, </author> <title> "On Real-Time Transactions," </title> <booktitle> ACM SIGMOD Record, </booktitle> <month> March </month> <year> 1988. </year>
Reference-contexts: 1 Introduction Concurrency control is one of the main issues in the studies of real-time database systems. With a strict consistency requirement defined by serializability, most real-time concurrency control schemes considered in the literature are based on two-phase locking (2PL) <ref> [18, 2, 9, 17] </ref>. This is not surprising since 2PL has been well studied in traditional database systems and is being widely used in commercial databases. But 2PL, on the other hand, has some inherent problems such as the possibility of deadlocks and long and unpredictable blocking times.
Reference: [19] <author> Thomasian, A. and E. Rahm, </author> <title> "A New Distributed Optimistic Concurrency Control Method and a Comparison of its Performance with Two-Phase Locking," </title> <booktitle> Proceedings of the 10th International Conference on Distributed Computing Systems, </booktitle> <address> Paris, France, </address> <month> May </month> <year> 1990. </year> <month> 19 </month>
Reference-contexts: This results in a lower deadline guarantee ratio for long transactions than for short transactions. In traditional database systems, OCCL may result in more severe starvation because of its high degree of parallelism. Many solutions to the starvation problem have been proposed (e.g., <ref> [14, 15, 19] </ref>). These schemes basically rely on limiting the number of transaction restarts. Given the timing constraints in real-time database systems, we use CPU scheduling to address the starvation problem.
References-found: 19

