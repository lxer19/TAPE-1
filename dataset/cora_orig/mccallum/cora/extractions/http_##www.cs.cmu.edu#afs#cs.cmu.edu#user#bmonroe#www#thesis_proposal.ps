URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/bmonroe/www/thesis_proposal.ps
Refering-URL: http://www.cs.cmu.edu/afs/cs.cmu.edu/user/bmonroe/www/home.html
Root-URL: 
Title: Rapid Development of Custom Software Architecture Design Environments 1 Rapid Development of Custom Software Architecture
Author: Robert T. Monroe David Garlan, Chair Mary Shaw Steve Cross David Notkin, 
Degree: Thesis Proposal  
Affiliation: University of Washington  
Note: Thesis Committee  
Date: November 18, 1996  
Abstract: Software architecture is receiving increasing attention as a powerful way to manage the complexity of large software systems. It has emerged as a distinct form of abstraction for software systems with its own set of design issues, vocabulary, and goals. Like designers in other disciplines, software architects can gain significant leverage by using powerful and appropriate design environments and tools. The cost and difficulty of creating these powerful design tools, however, prohibit their use for many software development projects. One of the primary reasons for the difficulty and cost of building these tools is that tool developers generally need to build a significant amount of supporting infrastructure to make use of the important architectural design expertise that the tools encapsulate. This infrastructure includes both the concepts underlying the tools functionality and the implementation of the tools themselves. In this thesis I will develop a different approach to capturing and using architectural design expertise in software architecture design environments. I will create a language and tools for capturing and encapsulating software architecture design expertise within a conceptual framework of architectural styles and design rules. To support the design expertise thus captured I will build an incrementally configurable software architecture design environment that specialized design environment builders and end-users can easily and quickly customize by specifying the architectural styles and design rules that the environment needs to support. 
Abstract-found: 1
Intro-found: 1
Reference: [Abo+93] <author> Gregory Abowd, Len Bass, Larry Howard, and Linda Northrop, </author> <title> Structural Modeling: An Application Framework and Development Process for Flight Simulators, </title> <type> Technical Report, </type> <institution> Carnegie Mellon Uni-versity/Software Engineering Institute CMU/SEI-93TR-14. </institution> <month> August, </month> <year> 1993. </year>
Reference-contexts: The experimental groups actual use of the environment produced will not, however, be a requirement for successful completion of the thesis. Potential Armani end-users for this experiment include the Structural Modelling group at the SEI <ref> [Abo+93] </ref>, other (non-ABLE) research groups at Carnegie Mellon or the SEI who build complex software systems, or a com-mercial software development organization who is interested in the technology.
Reference: [AG92] <author> Robert Allen and David Garlan, </author> <title> Towards Formalized Software Architecture, </title> <institution> Carnegie Mellon Univer sity Technical Report CMU-CS-TR-92-163, </institution> <month> July </month> <year> 1992. </year>
Reference-contexts: In the current Aesop system, and in the formal work on styles of Allen and Garlan <ref> [AG92] </ref>, a style specification defines invariant aspects of all systems built in the given style. As a result, if a particular piece of a. For a detailed formal description of the Pipe-and-Filter style see [AG92]. b. For a full description of the Real-Time Producer/Consumer style see [Jef93]. <p> In the current Aesop system, and in the formal work on styles of Allen and Garlan <ref> [AG92] </ref>, a style specification defines invariant aspects of all systems built in the given style. As a result, if a particular piece of a. For a detailed formal description of the Pipe-and-Filter style see [AG92]. b. For a full description of the Real-Time Producer/Consumer style see [Jef93].
Reference: [AG96] <author> Robert Allen and David Garlan, </author> <title> The Wright Architectural Description Language, </title> <type> Technical Report, </type> <institution> Carnegie Mellon University. </institution> <note> To be published, Fall 1996. </note>
Reference-contexts: Numerous other architecture description languages (ADLs) have been developed to capture various aspects of architectural design and provide archi-tects with mechanisms for describing and reasoning about their designs. Prominent ADLs include UniCon [Shaw+95], Rapide [Luc+95], Wright <ref> [AG96] </ref>, ACME [GMW95], and Adage [Cog+94]. Each of these ADLs support the description and analysis of some aspects of software architecture designs. These ADLs provide architects with the capability to express the design of a specific software architecture and analyze a set of properties of that architecture.
Reference: [Allen95] <author> Robert Allen, </author> <title> Formalism and Informalism in Software Architectural Style: A Case Study. </title> <booktitle> In Proceed ings of the First International Workshop on Architectures for Software Systems, </booktitle> <editor> David Garlan, ed. </editor> <month> April, </month> <year> 1995. </year>
Reference-contexts: This capability allows the designers to perform an early analy-sis of whether the fielded system will be able to meet its requirements in a cost-effective way. <ref> [Allen95] </ref> System structure visibility. An explicitly defined and documented architecture commu nicates the big picture of how the entire system will fit together to guide system developers in making lower-level design decisions.
Reference: [ATT93] <editor> Best Current Practices: </editor> <booktitle> Software Architecture Validation. </booktitle> <institution> AT&T Corporation, </institution> <year> 1993. </year>
Reference-contexts: Imposed discipline: The process of producing an explicit architectural design requires architects to think about the system as a whole and how its pieces interact. This process will often uncover fuzzy thinking, poorly defined requirements, and important design issues that might otherwise be overlooked. <ref> [ATT93] </ref> Maintaining conceptual integrity: A systems architecture serves as its conscience, guiding maintainers in making appropriate extensions and modifications to the system. In this way, the architectural document exposes the load-bearing walls of the system [SG96, PW92].
Reference: [Autodesk] <institution> Autodesk Corporation Home Page, </institution> <note> http://www.autodesk.com </note>
Reference-contexts: Computer Aided Design (CAD) has proven to be a very effective tool for designers in many disciplines. Architects, mechanical engineers, electrical engineers, and many graphic designers rely heavily on CAD environments to per-form their jobs. Systems such as Cadence [Cadence] for electrical engineering, AutoCad for mechanical engineering <ref> [Autodesk] </ref>, the Integrated Building Design Environment for building architects [Fen+94], and Corel Graphics [Corel] for graphic design capture the important aspects, models, and tools of design in their particular domains.
Reference: [Bat+94] <author> Don Batory et al., </author> <title> The GenVoca Model of Software System Generators. </title> <journal> IEEE Software, </journal> <month> Sept. </month> <year> 1994. </year>
Reference-contexts: Examples of design tools using this approach include DARPAs Domain-Specific Software Architecture (DSSA) environments [MG 92], Gen-Voca <ref> [Bat+94] </ref>, and numerous object-oriented design environments that support the Object Mod-eling Technique, such as OMTool [Rum+91]. Because significant portions of design environments must be developed from scratch, they are expensive, difficult, and time-consuming to build.
Reference: [Bat+96] <author> Don Batory and Bart Geraci, </author> <title> Validating Component Compositions in Software System Generators, </title> <booktitle> In the Proceedings of the Fourth International Conference on Software Reuse, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <year> 1996. </year>
Reference-contexts: Unlike Armani, they did not support significant end-user con-figuration, customization, or expression of design rules. Batory has shown that simple design rules were capable of providing significant design assistance and design checking in his work on Rapid Development of Custom Software Architecture Design Environments 20 database generators <ref> [Bat+96] </ref>. An interesting aspect of Batorys design rule work with GenVoca is that he found that the design rules did not have to be very complex to be effective or to detect subtle errors.
Reference: [Bor79] <author> Alan Borning, </author> <title> Thinglab : Constraint-Oriented Simulation Laboratory, </title> <type> Ph.D. Thesis, </type> <institution> Stanford Univer sity, </institution> <year> 1979. </year>
Reference-contexts: Tools that manage constraints and rules. Constraint-based programming and rule-based pro-gramming have been studied extensively in the AI literature. Bornings Thinglab <ref> [Bor79] </ref> was one of the early constraint-based environments for manipulating models of the physical world. Thinglab simulated physical environments and allowed a user to specify constraints that needed to be maintained between different objects in the simulated world.
Reference: [Cadence] <institution> Cadence Corporation Home Page, </institution> <note> http://www.cadence.com </note>
Reference-contexts: Computer aided design and development environments. Computer Aided Design (CAD) has proven to be a very effective tool for designers in many disciplines. Architects, mechanical engineers, electrical engineers, and many graphic designers rely heavily on CAD environments to per-form their jobs. Systems such as Cadence <ref> [Cadence] </ref> for electrical engineering, AutoCad for mechanical engineering [Autodesk], the Integrated Building Design Environment for building architects [Fen+94], and Corel Graphics [Corel] for graphic design capture the important aspects, models, and tools of design in their particular domains.
Reference: [Cha90] <author> Rich Charles, </author> <title> The Programmers Apprentice, </title> <publisher> ACM Press, </publisher> <address> Reading Mass. </address> <year> 1990. </year>
Reference-contexts: Further, like the design research mentioned previously (except for Winograd), this work does not focuses on the challenges unique to designing software. There are at least two other software development projects that have attempted to provide assistance to software designers. The programmers apprentice <ref> [Cha90] </ref> focused primarily on assisting programmers with good programming style, ignoring many of the more abstract design issues faced by the software architect.
Reference: [Cog+94] <author> Lou Coglianese, Will Tracz, Don Batory, Mark Goodwin, Steve Shafer, Roy Smith, Ray Szymanski, and Patrick Young, </author> <title> Collected Papers of the Domain-Specific Software Architectures (DSSA) Avionics Domain Application Generation Environment (ADAGE) Project. </title> <type> IBM Technical Report ADAGE-IBM-93-09A, </type> <institution> IBM Federal Systems Corporation, </institution> <address> Owego, NY, </address> <month> July 7, </month> <year> 1994. </year>
Reference-contexts: Todays preferred approach to building these environments is to study a domain or style of design very carefully in order to deeply understand it and then to build a large, monolithic environment that is customized to support design in that domain or style <ref> [Cog+94, MG92] </ref>. The environment designers usually encode their expertise throughout the envi-ronment in an idiosyncratic fashion. As custom-built, one-off productions, these environments rarely support end-user extensions and modifications. <p> Numerous other architecture description languages (ADLs) have been developed to capture various aspects of architectural design and provide archi-tects with mechanisms for describing and reasoning about their designs. Prominent ADLs include UniCon [Shaw+95], Rapide [Luc+95], Wright [AG96], ACME [GMW95], and Adage <ref> [Cog+94] </ref>. Each of these ADLs support the description and analysis of some aspects of software architecture designs. These ADLs provide architects with the capability to express the design of a specific software architecture and analyze a set of properties of that architecture.
Reference: [Corel] <institution> Corel Corporation Home Page, </institution> <note> http://www.corel.com </note>
Reference-contexts: Architects, mechanical engineers, electrical engineers, and many graphic designers rely heavily on CAD environments to per-form their jobs. Systems such as Cadence [Cadence] for electrical engineering, AutoCad for mechanical engineering [Autodesk], the Integrated Building Design Environment for building architects [Fen+94], and Corel Graphics <ref> [Corel] </ref> for graphic design capture the important aspects, models, and tools of design in their particular domains.
Reference: [Fen+94] <author> Steven Fenves et al, </author> <title> Concurrent Computer-Integrated Building Design, </title> <publisher> Prentice Hall, </publisher> <address> Englewood Cliffs, N.J., </address> <year> 1994. </year>
Reference-contexts: Architects, mechanical engineers, electrical engineers, and many graphic designers rely heavily on CAD environments to per-form their jobs. Systems such as Cadence [Cadence] for electrical engineering, AutoCad for mechanical engineering [Autodesk], the Integrated Building Design Environment for building architects <ref> [Fen+94] </ref>, and Corel Graphics [Corel] for graphic design capture the important aspects, models, and tools of design in their particular domains.
Reference: [Fis87] <author> Gerhard Fischer, </author> <title> A Critic For Lisp, </title> <institution> University of Colorado Technical Report CS-CU-365-87, </institution> <month> June </month> <year> 1987. </year>
Reference: [Fis+87] <author> Gerhard Fischer and Andreas C. Lemke, </author> <title> Construction and Design Kits: Human Problem-Domain Com Start Date Finish Date Duration Task 11/96 Thesis proposal approved 10/96 2/97 4 mos. Design language for specifying styles and design rules 1/97 12/97 12 mos. Implement Armani and associated tools 10/97 2/98 4 months Perform evaluation experiments 10/97 6/98 9 months Write thesis 6/98 Defend TABLE 2. </title> <booktitle> Thesis timeline Rapid Development of Custom Software Architecture Design Environments 25 munication, </booktitle> <institution> University of Colorado Technical Report CS-CU-366-87, </institution> <month> June </month> <year> 1987. </year>
Reference: [For81] <author> Charles L. Forgy, </author> <title> OPS5 Users Manual, </title> <type> Technical Report CMU-CS-81-135, </type> <institution> Carnegie Mellon Uni versity, School of Computer Science, </institution> <address> Pittsburgh, PA 1981. </address>
Reference-contexts: Unlike Armani, this work focused on database generation with little likelihood of extensibility to other types of software design. Rule-based programming systems such as OPS-5 <ref> [For81] </ref> and CLIPS [Gia93] are generic rule-based systems for capturing expertise, usually in the form of expert systems.
Reference: [GAO94] <author> Garlan, D., Allen, R and Ockerbloom, J. </author> <title> Exploiting Style in Architectural Design Environments. </title> <booktitle> In Proc. of SIGSOFT 94: Foundations of Software Engineering, </booktitle> <month> December </month> <year> 1994, </year> <note> ACM Press. </note>
Reference-contexts: Software Architecture. Within the software architecture realm, the most significant inuence has been the original Aesop system <ref> [GAO94] </ref>. The original Aesop system worked as a generator that allowed a stylized design environment developer to link a style definition (specified as C++ classes) with a generic software architecture design environment infrastructure to produce a style-specific design environment.
Reference: [GAO95] <author> Garlan, D., Allen, R, and Ockerbloom, J. </author> <title> Architectural Mismatch, or, Why it's hard to build systems out of existing parts -- Experience Report. </title> <booktitle> Proc. of the 17th International Conference on Software Engineering. </booktitle> <month> April </month> <year> 1995. </year>
Reference: [Gar95] <institution> Proceedings of the First International Workshop on Architectures for Software Systems, Edited by David Garlan. </institution> <month> April, </month> <year> 1995 </year>
Reference-contexts: There is growing recognition in the software design community that one of the critical steps for the successful completion and fielding of a major software system is the creation of a well defined and documented architecture <ref> [Gar95, Rec91] </ref>. There are (at least) four major benefits to producing and documenting an architectural design: Analysis capabilities. Given an appropriate set of analysis tools, system designers can ag likely problems and estimate global properties and capabilities of the system early in the development lifecycle.
Reference: [Gar+96] <author> David Garlan et al., </author> <title> The Aesop Software Architecture Design Environment, </title> <note> Carnegie Mellon Univer sity Technical Report, in preparation, </note> <year> 1996. </year>
Reference-contexts: their tools to solve the design problems that they face. 3 Capturing and using software architecture design expertise 3.1 Preliminary work the Aesop approach My preliminary work on capturing software architecture design expertise and building cus-tomizable design environments has focused on designing and developing the Aesop software architecture design environment <ref> [Gar+96] </ref>. The Aesop system provides a generic software architecture design environment consisting of a graphical user interface (GUI) for manipulating graphical representations of architectural designs, a database to store and manage designs, and an event system to integrate design tools.
Reference: [Ger90] <author> John S. Gero, </author> <title> Design Prototypes: A Knowledge Representation Schema for Design, </title> <journal> AI Magazine, </journal> <note> Win ter 1990. </note>
Reference-contexts: Rechtin [Rec91] offers a lengthy and compelling list of design heuristics for systems architects. Each of these sources provide significant insight into various aspects of the design process. None of them, however, explore ways to capture or automate the expertise of good designers. Gero <ref> [Ger90] </ref> does attempt to provide a very generic computational schema for capturing the knowledge of expert designers. Though quite broad in its applicability, this schema does not significantly take advan-tage of domain-specific design expertise.
Reference: [Gia93] <author> Joseph C. Giarratano, </author> <title> CLIPS Users Guide, Available from the Software Technology Branch of the NASA Johnson Space Center. </title> <note> 1993. Available over the web at: http://www.cs.cmu.edu/afs/cs/project/ ai-repository/ai/areas/expert/systems/clips/0.html. </note>
Reference-contexts: Unlike Armani, this work focused on database generation with little likelihood of extensibility to other types of software design. Rule-based programming systems such as OPS-5 [For81] and CLIPS <ref> [Gia93] </ref> are generic rule-based systems for capturing expertise, usually in the form of expert systems.
Reference: [GMW95] <author> Garlan, D., Monroe, R., and Wile, D. ACME: </author> <title> An Architectural Interchange Language. </title> <institution> Carnegie Mellon University Technical Report CMU-CS-95-219, </institution> <month> December </month> <year> 1995. </year>
Reference-contexts: Forall sys:System (sys) & (style (sys) = naive-client-server-style), s:server (s), c:client (c), conn:Connector (conn) | Enforce only-rpc-conns (s,c,conn); 1. The Armani language is built as an extension to the ACME architecture description language (ADL) that I have been developing over the past year with David Garlan and Dave Wile <ref> [GMW95] </ref>. One of the goals of the ACME effort has been to provide a simple, extensible ADL with which more sophisticated languages can be easily built. Armani is one of the first such languages. <p> Numerous other architecture description languages (ADLs) have been developed to capture various aspects of architectural design and provide archi-tects with mechanisms for describing and reasoning about their designs. Prominent ADLs include UniCon [Shaw+95], Rapide [Luc+95], Wright [AG96], ACME <ref> [GMW95] </ref>, and Adage [Cog+94]. Each of these ADLs support the description and analysis of some aspects of software architecture designs. These ADLs provide architects with the capability to express the design of a specific software architecture and analyze a set of properties of that architecture.
Reference: [GHW85] <author> John V. Guttag, James J. Horning, and Jeannette Wing, </author> <title> The Larch Family of Specification Languages, </title> <journal> IEEE Software, </journal> <volume> Vol. 2, No. 5, </volume> <month> September </month> <year> 1985. </year>
Reference-contexts: Correspondingly, the more specialized design environments provide the user with more powerful analyses and sometimes design guidance but the tradeoff that the specialized environ-ments make for this power is a much more narrow domain of applicability. Software specification languages. The Larch specification language <ref> [GHW85] </ref> supports the definition and composition of partial algabraic program and abstract data-type (ADT) specifications. This approach allows Larch users to capture important aspects of ADTs in modular, independent units called traits. Complex ADTs can then be specified by composing various traits to capture the necessary semantics for the ADT.
Reference: [Gwydion] <institution> Gwydion Project Home Page, Carnegie Mellon University, </institution> <note> http://legend.gwydion.cs.cmu.edu/gwydion/ </note>
Reference-contexts: In addition to the design environments for non-software domains, there have been many tools and environments built to support software development. Examples include commercial inte-grated development environments such as Microsofts Visual C++ and Visual Basic [MS] and research systems such as the Gandalf system [Hab+91] and Gwydion <ref> [Gwydion] </ref>. Unlike Armani, however, these environments focus on support for the programming stage of software development with little support for the abstract design of software There are also a more limited selection of software develoment environments that focus on the abstract design of software.
Reference: [Hab+91] <author> Nico Habermann, David Garlan, and David Notkin. </author> <title> Generation of Integrated Task-Specific Software Environments, </title> <editor> in Richard Rashid, editor, </editor> <booktitle> CMU Computer Science - A 25th Anniversary Commerorative, </booktitle> <pages> pp. 69-98, </pages> <publisher> ACM Press, </publisher> <year> 1991. </year>
Reference-contexts: In addition to the design environments for non-software domains, there have been many tools and environments built to support software development. Examples include commercial inte-grated development environments such as Microsofts Visual C++ and Visual Basic [MS] and research systems such as the Gandalf system <ref> [Hab+91] </ref> and Gwydion [Gwydion]. Unlike Armani, however, these environments focus on support for the programming stage of software development with little support for the abstract design of software There are also a more limited selection of software develoment environments that focus on the abstract design of software.
Reference: [Hoa85] <author> C.A.R. Hoare. </author> <title> Communicating Sequential Processes. </title> <publisher> Prentice Hall, </publisher> <year> 1985. </year>
Reference-contexts: In addition to the ADLs described above, there has been a significant effort by members of the formal methods community to provide a mathematical foundation for describing software architectures and architectural styles. Formalisms such as Z [Spi89], CSP <ref> [Hoa85] </ref>, and the Chemical Abstract Machine [IW95] have been used to model software architectures.
Reference: [IW95] <author> Paola Inverardi and Alexander Wolf, </author> <title> Formal Specification and Analysis of Software Architectures Using the Chemical Abstract Machine Model. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> April </month> <year> 1995. </year>
Reference-contexts: In addition to the ADLs described above, there has been a significant effort by members of the formal methods community to provide a mathematical foundation for describing software architectures and architectural styles. Formalisms such as Z [Spi89], CSP [Hoa85], and the Chemical Abstract Machine <ref> [IW95] </ref> have been used to model software architectures.
Reference: [Jef93] <author> Jeffay, K. </author> <title> The Real-Time Producer/Consumer Paradigm: A paradigm for the construction of efficient, predictable real-time systems. </title> <booktitle> Proc.of the 1993 ACM/SIGAPP Symposium on Applied Computing, </booktitle> <publisher> ACM Press, </publisher> <month> February </month> <year> 1993, </year> <pages> pp. 796-804. </pages>
Reference-contexts: As a result, if a particular piece of a. For a detailed formal description of the Pipe-and-Filter style see [AG92]. b. For a full description of the Real-Time Producer/Consumer style see <ref> [Jef93] </ref>. Style Selected Design Vocabulary Selected Configuration Constraints Design Analyses Generic (null) generic components and connectors Any (component, component) pair can be attached with any connector. formal specifications consistency check (Wright language) Pipe-and-Filter a filter components and pipe connectors (filter.output to filter.input) is the only valid attachment pair.
Reference: [Luc+95] <author> David Luckham, John Kenney, Larry Augustin, James Vera, Doug Bryan, and Walter Mann. </author> <title> Specifica tion and Analysis of System Architecture Using Rapide. </title> <journal> IEEE Transactions on Software Engineering, </journal> <month> April </month> <year> 1995. </year>
Reference-contexts: Numerous other architecture description languages (ADLs) have been developed to capture various aspects of architectural design and provide archi-tects with mechanisms for describing and reasoning about their designs. Prominent ADLs include UniCon [Shaw+95], Rapide <ref> [Luc+95] </ref>, Wright [AG96], ACME [GMW95], and Adage [Cog+94]. Each of these ADLs support the description and analysis of some aspects of software architecture designs. These ADLs provide architects with the capability to express the design of a specific software architecture and analyze a set of properties of that architecture.
Reference: [MG92] <author> Mettala, E. and Graham, M.. </author> <title> The Domain-Specific Software Architecture Program. </title> <type> Special Report, </type> <institution> Carnegie Mellon University Software Engineering Institute CMU/SEI-92-SR-9. </institution> <year> 1992. </year>
Reference-contexts: Todays preferred approach to building these environments is to study a domain or style of design very carefully in order to deeply understand it and then to build a large, monolithic environment that is customized to support design in that domain or style <ref> [Cog+94, MG92] </ref>. The environment designers usually encode their expertise throughout the envi-ronment in an idiosyncratic fashion. As custom-built, one-off productions, these environments rarely support end-user extensions and modifications. <p> These environments can be divided into general purpose design environments such as OMTool [Rum+91] and Rational Rose [Rational], and focused environ-ments that support specfic aspects or domains of design such as UniCon [Shaw+95], Chiron-2 [Tay+95], various DSSA design environments <ref> [MG92] </ref>, and ROOM [Sel+92]. All of these design environments have limitations that Armani will address. First, they enforce overly rigid concep-tual models and design vocabulary on their users and none of them are sufficiently exible or modifiable by the end user.
Reference: [MS] <institution> Microsoft Corporation Home Page, </institution> <note> http://www.microsoft.com </note>
Reference-contexts: In addition to the design environments for non-software domains, there have been many tools and environments built to support software development. Examples include commercial inte-grated development environments such as Microsofts Visual C++ and Visual Basic <ref> [MS] </ref> and research systems such as the Gandalf system [Hab+91] and Gwydion [Gwydion].
Reference: [Nii86] <author> H.P. Nii, </author> <title> Blackboard Systems, Parts 1 and 2, </title> <journal> AI Magazine, </journal> <volume> volume 7, nos. 3 and 4, </volume> <year> 1986. </year>
Reference: [Nor88] <author> Donald Norman, </author> <title> The Design of Everyday Things, </title> <booktitle> 1st Doubleday, </booktitle> <address> New York, </address> <year> 1990. </year>
Reference-contexts: Specific useful sources include Winograds recent book of essays on the software design process [Win96], Donald Schns work on reection in action [Sch83], Petroskis work on engineering design [Pet85], and Normans discussion of the design of everyday objects <ref> [Nor88] </ref>. Rechtin [Rec91] offers a lengthy and compelling list of design heuristics for systems architects. Each of these sources provide significant insight into various aspects of the design process. None of them, however, explore ways to capture or automate the expertise of good designers.
Reference: [Nye93] <author> Adrian Nye, </author> <title> X Protocol Reference Manual, </title> <publisher> OReilly & Associates, </publisher> <address> Sebastapol, CA, </address> <year> 1993. </year>
Reference: [OMG95] <author> The Object Management Group, </author> <title> The Common Object Request Broker: Architecture and Specification, The Object Management Group, revision 2.0. </title> <month> July </month> <year> 1995. </year> <note> http://www.omg.org/corba2/cover.htm </note>
Reference: [Pet85] <author> Henry Petroski, </author> <title> To Engineer is Human : The Role of Failure in Successful Design, </title> <address> St. </address> <publisher> Martins Press, </publisher> <address> New York, </address> <year> 1985. </year>
Reference-contexts: Specific useful sources include Winograds recent book of essays on the software design process [Win96], Donald Schns work on reection in action [Sch83], Petroskis work on engineering design <ref> [Pet85] </ref>, and Normans discussion of the design of everyday objects [Nor88]. Rechtin [Rec91] offers a lengthy and compelling list of design heuristics for systems architects. Each of these sources provide significant insight into various aspects of the design process.
Reference: [PW92] <author> Dewayne Perry and Alexander Wolf, </author> <title> Foundations for the Study of Software Architecture. </title> <journal> ACM Soft ware Engineering Notes, </journal> <volume> 17(4), </volume> <month> October </month> <year> 1992, </year> <pages> pp. 40-52. </pages>
Reference-contexts: In this way, the architectural document exposes the load-bearing walls of the system <ref> [SG96, PW92] </ref>.
Reference: [Rational] <institution> Rational Corporation Home Page, </institution> <note> http://www.rational.com </note>
Reference-contexts: These environments can be divided into general purpose design environments such as OMTool [Rum+91] and Rational Rose <ref> [Rational] </ref>, and focused environ-ments that support specfic aspects or domains of design such as UniCon [Shaw+95], Chiron-2 [Tay+95], various DSSA design environments [MG92], and ROOM [Sel+92]. All of these design environments have limitations that Armani will address.
Reference: [Rec91] <author> Eberhardt Rechtin, </author> <title> Systems Architecting: Creating and Building Complex Systems, </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: There is growing recognition in the software design community that one of the critical steps for the successful completion and fielding of a major software system is the creation of a well defined and documented architecture <ref> [Gar95, Rec91] </ref>. There are (at least) four major benefits to producing and documenting an architectural design: Analysis capabilities. Given an appropriate set of analysis tools, system designers can ag likely problems and estimate global properties and capabilities of the system early in the development lifecycle. <p> Specific useful sources include Winograds recent book of essays on the software design process [Win96], Donald Schns work on reection in action [Sch83], Petroskis work on engineering design [Pet85], and Normans discussion of the design of everyday objects [Nor88]. Rechtin <ref> [Rec91] </ref> offers a lengthy and compelling list of design heuristics for systems architects. Each of these sources provide significant insight into various aspects of the design process. None of them, however, explore ways to capture or automate the expertise of good designers.
Reference: [Rob+96] <author> Jason Robbins, David Hilbert, and David Redmiles, </author> <title> Using Critics to Analyze Evolving Architectures, </title> <booktitle> In Proceedings of the Second International Software Architecture Workshop, </booktitle> <month> October </month> <year> 1996. </year> <title> Rapid Development of Custom Software Architecture Design Environments 26 </title>
Reference-contexts: The programmers apprentice [Cha90] focused primarily on assisting programmers with good programming style, ignoring many of the more abstract design issues faced by the software architect. Emerging work by Robbins and Redmiles <ref> [Rob+96] </ref> builds on Fischers critics work by applying the ideas underlying critics (daemons that continually mon-itor the state of the world and offer suggestions and guidance) to the software architecting pro-cess. This work is preliminary but interesting in its attempt to provide design guidance with critics.
Reference: [Rum+91] <author> James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy, William Lorensen, </author> <title> Object-ori ented modeling and design, </title> <publisher> Prentice Hall, </publisher> <year> 1991. </year>
Reference-contexts: Examples of design tools using this approach include DARPAs Domain-Specific Software Architecture (DSSA) environments [MG 92], Gen-Voca [Bat+94], and numerous object-oriented design environments that support the Object Mod-eling Technique, such as OMTool <ref> [Rum+91] </ref>. Because significant portions of design environments must be developed from scratch, they are expensive, difficult, and time-consuming to build. <p> These environments can be divided into general purpose design environments such as OMTool <ref> [Rum+91] </ref> and Rational Rose [Rational], and focused environ-ments that support specfic aspects or domains of design such as UniCon [Shaw+95], Chiron-2 [Tay+95], various DSSA design environments [MG92], and ROOM [Sel+92]. All of these design environments have limitations that Armani will address.
Reference: [SC96] <author> Mary Shaw and Paul Clements, </author> <title> A Field Guide to Boxology: Preliminary Classification of Architectural Styles for Software Systems, </title> <type> unpublished, </type> <year> 1996. </year>
Reference: [Sch83] <author> Donald Schn, </author> <title> The Reective Practitioner : How Professionals Think in Action, </title> <address> Aldershot, Avebury, </address> <year> 1983. </year>
Reference-contexts: Specific useful sources include Winograds recent book of essays on the software design process [Win96], Donald Schns work on reection in action <ref> [Sch83] </ref>, Petroskis work on engineering design [Pet85], and Normans discussion of the design of everyday objects [Nor88]. Rechtin [Rec91] offers a lengthy and compelling list of design heuristics for systems architects. Each of these sources provide significant insight into various aspects of the design process.
Reference: [Sel+92] <author> B. Selic, G. Gullekson, J. McGee, and I. Engelberg, </author> <title> ROOM: An Object-Oriented Methodology for Developing Read-Time Systems. </title> <booktitle> In Proceedings of the Fifth International Workshop on Computer-Aided Software Engineering, </booktitle> <publisher> IEEE Computer Society Press, </publisher> <month> July </month> <year> 1992. </year>
Reference-contexts: These environments can be divided into general purpose design environments such as OMTool [Rum+91] and Rational Rose [Rational], and focused environ-ments that support specfic aspects or domains of design such as UniCon [Shaw+95], Chiron-2 [Tay+95], various DSSA design environments [MG92], and ROOM <ref> [Sel+92] </ref>. All of these design environments have limitations that Armani will address. First, they enforce overly rigid concep-tual models and design vocabulary on their users and none of them are sufficiently exible or modifiable by the end user.
Reference: [Shaw+95] <author> Mary Shaw, Robert Deline, Daniel Klein, Theodore Ross, David Young, and Gregory Zelesnik. </author> <title> Abstractions for Software Architecture and Tools to Support Them. </title> <journal> IEEE Trans. on Software Engineering, </journal> <month> April </month> <year> 1995. </year>
Reference-contexts: Numerous other architecture description languages (ADLs) have been developed to capture various aspects of architectural design and provide archi-tects with mechanisms for describing and reasoning about their designs. Prominent ADLs include UniCon <ref> [Shaw+95] </ref>, Rapide [Luc+95], Wright [AG96], ACME [GMW95], and Adage [Cog+94]. Each of these ADLs support the description and analysis of some aspects of software architecture designs. <p> These environments can be divided into general purpose design environments such as OMTool [Rum+91] and Rational Rose [Rational], and focused environ-ments that support specfic aspects or domains of design such as UniCon <ref> [Shaw+95] </ref>, Chiron-2 [Tay+95], various DSSA design environments [MG92], and ROOM [Sel+92]. All of these design environments have limitations that Armani will address. First, they enforce overly rigid concep-tual models and design vocabulary on their users and none of them are sufficiently exible or modifiable by the end user.
Reference: [SG96] <author> Mary Shaw and David Garlan. </author> <title> Software Architecture: Perspectives on an Emerging Discipline. </title> <publisher> Pren tice Hall, </publisher> <year> 1996 </year>
Reference-contexts: In this way, the architectural document exposes the load-bearing walls of the system <ref> [SG96, PW92] </ref>.
Reference: [Spi89] <author> J. M. Spivey, </author> <title> The Z Notation: A Reference Manual. </title> <publisher> Prentice Hall, </publisher> <year> 1989 </year>
Reference-contexts: In addition to the ADLs described above, there has been a significant effort by members of the formal methods community to provide a mathematical foundation for describing software architectures and architectural styles. Formalisms such as Z <ref> [Spi89] </ref>, CSP [Hoa85], and the Chemical Abstract Machine [IW95] have been used to model software architectures.
Reference: [Tay+95] <author> Richard Taylor, Nenad Medvidovic, Kenneth Anderson, E. James Whitehead Jr., and Jason E. </author> <title> Robbins. </title>
Reference-contexts: These environments can be divided into general purpose design environments such as OMTool [Rum+91] and Rational Rose [Rational], and focused environ-ments that support specfic aspects or domains of design such as UniCon [Shaw+95], Chiron-2 <ref> [Tay+95] </ref>, various DSSA design environments [MG92], and ROOM [Sel+92]. All of these design environments have limitations that Armani will address. First, they enforce overly rigid concep-tual models and design vocabulary on their users and none of them are sufficiently exible or modifiable by the end user.
References-found: 50

