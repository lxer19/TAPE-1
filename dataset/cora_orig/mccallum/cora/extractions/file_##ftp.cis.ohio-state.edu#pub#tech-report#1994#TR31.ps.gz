URL: file://ftp.cis.ohio-state.edu/pub/tech-report/1994/TR31.ps.gz
Refering-URL: ftp://ftp.cis.ohio-state.edu/pub/tech-report/TRList.html
Root-URL: 
Email: spiro@cis.ohio-state.edu.  
Phone: Phone: +1 (614) 292 6377 FAX: +1 (614) 292 2911  
Title: Repeated Redundant Inequalities in Constraint Logic Programming  
Author: Spiro Michaylov 
Date: June 30, 1994  
Address: 228 Bolz Hall, 2036 Neil Avenue Mall, Columbus, OH 43210-1277, U.S.A.,  
Affiliation: Department of Computer and Information Science, The Ohio State University,  
Pubnum: Technical Report OSU-CISRC-6/94-TR31  
Abstract: A number of Constraint logic Programming systems, including CLP(R) and Prolog III, decide simultaneous linear inequalities as part of the fundamental operational step of constraint solving. While this can contribute tremendously to the usefulness of the systems, it is computationally quite expensive. Non-ground inequalities must generally be tested for consistency with the collected constraint set and then added to it, increasing its size, and thus making the next such test more expensive. Future redundant inequalities in a program are those that are guaranteed to be subsumed after no more than one subsequent procedure call, usually in the context of a recursive procedure. It has been noted that such inequalities need only be tested for consistency with the current constraint set, thus resulting in dramatic savings in execution speed and space usage. In this paper we generalize the notion of future redundancy in a number of ways and thus broaden its applicability. Thus we show how to dramatically improve the performance of a wider class of programs that rely heavily on linear inequalities. fl This research is supported in part by the National Science Foundation Grant #CCR-9308631. An abridged version of this paper appears in the proceedings of the 1st International Symposium on Constraints in Computational Logics, Munich, September 1994. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> Joxan Jaffar, Spiro Michaylov, Peter J. Stuckey, and Roland H. C. Yap. </author> <title> An abstract machine for CLP(R). </title> <booktitle> In Proceedings of the ACM SIGPLAN Symposium on Programming Language Design and Implementation (PLDI), </booktitle> <address> San Francisco, </address> <pages> pages 128-139, </pages> <month> June </month> <year> 1992. </year>
Reference-contexts: A locally optimizing compiler for CLP (R), utilizing an abstract code interpreter, was described by Jaffar et al , in <ref> [1] </ref>. Global optimization techniques for CLP (R) and related languages have been discussed by Jtrgensen et al [3], Marriott and Stndergaard [4], Marriott and Stuckey [5], and McDonald et al [6]. For an overview, see [7].
Reference: [2] <author> Joxan Jaffar, Spiro Michaylov, Peter J. Stuckey, and Roland H. C. Yap. </author> <title> The CLP(R) language and system. </title> <journal> ACM Transactions on Programming Languages and Systems (TOPLAS), </journal> <volume> 14(3) </volume> <pages> 339-395, </pages> <month> July </month> <year> 1992. </year>
Reference-contexts: Non-ground inequalities must generally be tested for consistency with the collected constraint set and then added to it, increasing its size, and thus making the next such test more expensive. We will discuss this problem in the context of CLP (R) <ref> [2] </ref>, a constraint logic programming language dealing with real arithmetic, although the results translate directly to other languages that decide linear inequalities. A locally optimizing compiler for CLP (R), utilizing an abstract code interpreter, was described by Jaffar et al , in [1].
Reference: [3] <author> Niels Jtrgensen, Kim Marriott, and Spiro Michaylov. </author> <title> Some global compile-time optimizations for CLP(R). </title> <editor> In Vijay Saraswat and Kazunori Ueda, editors, </editor> <booktitle> Logic Programming: Proceedings of the 1991 International Symposium, </booktitle> <pages> pages 420-434, </pages> <address> San Diego, CA, October 1991. </address> <publisher> MIT Press. </publisher>
Reference-contexts: A locally optimizing compiler for CLP (R), utilizing an abstract code interpreter, was described by Jaffar et al , in [1]. Global optimization techniques for CLP (R) and related languages have been discussed by Jtrgensen et al <ref> [3] </ref>, Marriott and Stndergaard [4], Marriott and Stuckey [5], and McDonald et al [6]. For an overview, see [7]. <p> Broadly speaking, these optimizations rely on the use of global analysis techniques such as abstract interpretation to infer information about the state of variables involved in arithmetic constraints, given information about allowed query patterns. Some of the techniques, such as the future redundancy optimization in <ref> [3] </ref>, also rely on analyzing the patterns of constraint invocation for classes of queries, and observing how the constraints interact with each other. <p> The notion of future redundancy for arithmetic inequality constraints was first defined by Jtrgensen et al <ref> [3] </ref>. Future redundant inequalities in a program are those that are guaranteed to be subsumed after no more than one subsequent procedure call, usually in the context of a recursive procedure. Inequalities must generally be tested for consistency with the collected constraint set and then added to it. <p> Thus, we require that each of the other rules for p/3 also has, before the first subsequent call, a conjunction of constraints that subsumes NY &lt; 10000. This was defined as the future redundancy condition by Jtrgensen et al <ref> [3] </ref>. It requires, in particular, that every base case also results in the constraint being subsumed. <p> recursive call to P . 2. a recursive case: Exactly one of the atoms is a recursive call to P but no other atom may result in such a call indirectly. 4 Future Redundancy Here we present the definition of future redundancy in a somewhat different manner from that in <ref> [3] </ref>. It is more general in the sense that the redundant constraint need not appear before the first atom in the body. 5 p (X, Y, Z) :- p (X, Y, Z) :- Y &lt; 500. <p> The result of applying this transformation to the program on the left of Figure 1 is shown on the right of that figure. The correctness of this transformation may then be stated as in <ref> [3] </ref>. Proposition 1 (Correctness of Future Redundancy Optimization) There is a one-to-one correspondence between (possibly partial) derivations for any program and that program after the future redundancy transformation, in which derivation length is preserved. <p> X &lt;= 0, X &lt;= 0, p (X, Y, Z) :- Z = Y. NY = Y + 20, X &gt; 0, p (X - 1, NY, Z). test (NY &lt; 1000), p (X - 1, NY, Z, b). In <ref> [3] </ref>, the notion of future redundancy with respect to a given calling pattern is also defined. The definitions in this paper can be modified similarly. <p> - R, %% ground evaluation & assignment mortgage (P1, T1, I, R, B). mortgage (P, T, I, R, B) :- T = 1, %% subsumes last fr inequality B = P * I - R. %% ground evaluation & assignment 1 This example is actually incorrect in Jtrgensen et al. <ref> [3] </ref>: on page 422, Q 3 needs the additional constraint B 0, which of course will reappear in the answer constraint shown therein. 22
Reference: [4] <author> Kim Marriott and Harald Stndergaard. </author> <title> Analysis of constraint logic programs. </title> <editor> In Saumya Debray and Manuel Hermenegildo, editors, </editor> <booktitle> Proc. of the 1990 North American Conference on Logic Programming, </booktitle> <pages> pages 521-540, </pages> <address> Austin, TX, 1990. </address> <publisher> MIT Press. </publisher>
Reference-contexts: A locally optimizing compiler for CLP (R), utilizing an abstract code interpreter, was described by Jaffar et al , in [1]. Global optimization techniques for CLP (R) and related languages have been discussed by Jtrgensen et al [3], Marriott and Stndergaard <ref> [4] </ref>, Marriott and Stuckey [5], and McDonald et al [6]. For an overview, see [7]. Broadly speaking, these optimizations rely on the use of global analysis techniques such as abstract interpretation to infer information about the state of variables involved in arithmetic constraints, given information about allowed query patterns.
Reference: [5] <author> Kimbal G. Marriott and Peter J. Stuckey. </author> <title> The 3 R's of optimizing constraint logic programs: Refinement, removal and reordering. </title> <booktitle> In Proc. ACM SIGPLAN Symposium on Principles of Programming Languages (POPL), </booktitle> <address> Charleston, NC, </address> <month> January </month> <year> 1993. </year>
Reference-contexts: A locally optimizing compiler for CLP (R), utilizing an abstract code interpreter, was described by Jaffar et al , in [1]. Global optimization techniques for CLP (R) and related languages have been discussed by Jtrgensen et al [3], Marriott and Stndergaard [4], Marriott and Stuckey <ref> [5] </ref>, and McDonald et al [6]. For an overview, see [7]. Broadly speaking, these optimizations rely on the use of global analysis techniques such as abstract interpretation to infer information about the state of variables involved in arithmetic constraints, given information about allowed query patterns. <p> Furthermore, in order to expose opportunities for applying these optimizations, it may be necessary to use multiple specialization, most fully described by Winsborough in [9], and reordering of subgoals, described by Marriott and Stuckey in <ref> [5] </ref>, and studied systematically by Michaylov [8]. The notion of future redundancy for arithmetic inequality constraints was first defined by Jtrgensen et al [3]. <p> However, future redundant inequalities need only be tested for consistency, thus resulting in dramatic savings in execution speed and space usage. This technique is closely related to the constraint removal technique of Marriott and Stuckey <ref> [5] </ref>. It is less frequently applicable, but results in a greater efficiency improvement when it applies because it is static, and avoids adding the constraint to the collected set. In this paper, we consider the essential features of a program that lead to the repeated uniform subsump-tion of linear inequalities.
Reference: [6] <author> Andrew D. McDonald, Peter J. Stuckey, and Roland H. C. Yap. </author> <title> Redundancy of variables in CLP(R). </title> <booktitle> In Logic Programming: Proceedings of the 1993 International Symposium, </booktitle> <address> Vancouver, October 1993. </address> <publisher> MIT Press. </publisher>
Reference-contexts: Global optimization techniques for CLP (R) and related languages have been discussed by Jtrgensen et al [3], Marriott and Stndergaard [4], Marriott and Stuckey [5], and McDonald et al <ref> [6] </ref>. For an overview, see [7]. Broadly speaking, these optimizations rely on the use of global analysis techniques such as abstract interpretation to infer information about the state of variables involved in arithmetic constraints, given information about allowed query patterns.
Reference: [7] <author> Spiro Michaylov. </author> <title> Design and Implementation of Practical Constraint Logic Programming Systems. </title> <type> PhD thesis, </type> <institution> School of Computer Science, Carnegie Mellon University, </institution> <month> August </month> <year> 1992. </year> <note> Available as technical report CMU-CS-92-168. </note>
Reference-contexts: Global optimization techniques for CLP (R) and related languages have been discussed by Jtrgensen et al [3], Marriott and Stndergaard [4], Marriott and Stuckey [5], and McDonald et al [6]. For an overview, see <ref> [7] </ref>. Broadly speaking, these optimizations rely on the use of global analysis techniques such as abstract interpretation to infer information about the state of variables involved in arithmetic constraints, given information about allowed query patterns.
Reference: [8] <author> Spiro Michaylov. </author> <title> Optimizing CLP(R) programs by reordering subgoals. </title> <type> Technical report, </type> <institution> Department of Computer and Information Science, The Ohio State University, </institution> <month> May </month> <year> 1994. </year>
Reference-contexts: Furthermore, in order to expose opportunities for applying these optimizations, it may be necessary to use multiple specialization, most fully described by Winsborough in [9], and reordering of subgoals, described by Marriott and Stuckey in [5], and studied systematically by Michaylov <ref> [8] </ref>. The notion of future redundancy for arithmetic inequality constraints was first defined by Jtrgensen et al [3]. Future redundant inequalities in a program are those that are guaranteed to be subsumed after no more than one subsequent procedure call, usually in the context of a recursive procedure.
Reference: [9] <author> William H. Winsborough. </author> <title> Path-dependent reachability analysis for multiple specialization. </title> <booktitle> In Logic Programming: Proceedings of the North American Conference, </booktitle> <pages> pages 133-153, </pages> <address> Cleveland, OH, USA, November 1989. </address> <publisher> MIT Press. </publisher> <pages> 23 </pages>
Reference-contexts: Furthermore, in order to expose opportunities for applying these optimizations, it may be necessary to use multiple specialization, most fully described by Winsborough in <ref> [9] </ref>, and reordering of subgoals, described by Marriott and Stuckey in [5], and studied systematically by Michaylov [8]. The notion of future redundancy for arithmetic inequality constraints was first defined by Jtrgensen et al [3].
References-found: 9

