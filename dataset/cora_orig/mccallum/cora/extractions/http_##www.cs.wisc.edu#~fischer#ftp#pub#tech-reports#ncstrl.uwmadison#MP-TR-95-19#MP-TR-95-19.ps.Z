URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/MP-TR-95-19/MP-TR-95-19.ps.Z
Refering-URL: http://www.cs.wisc.edu/~fischer/ftp/pub/tech-reports/ncstrl.uwmadison/MP-TR-95-19/
Root-URL: http://www.cs.wisc.edu
Title: Optimal and Asymptotically Optimal Equi-partition of Rectangular Domains via Stripe Decomposition  
Author: Ioannis T. Christou Robert R. Meyer 
Abstract: We present an efficient method for assigning any number of processors to tasks associated with the cells of a rectangular uniform grid. Load balancing equi-partition constraints are observed while approximately minimizing the total perimeter of the partition, which corresponds to the amount of interprocessor communication. This method is based upon decomposition of the grid into stripes of "optimal" height. We prove that under some mild assumptions, as the problem size grows large in all parameters, the error bound associated with this feasible solution approaches zero. We also present computational results from a high level parallel Genetic Algorithm that utilizes this method, and make comparisons with other methods. On a network of workstations, our algorithm solves within minutes instances of the problem that would require one billion binary variables in a Quadratic Assignment formulation.
Abstract-found: 1
Intro-found: 1
Reference: [CM95] <author> I. T. Christou and R. R. Meyer. </author> <title> Optimal equi-partition of rectangular domains for parallel computation. </title> <type> Technical Report MPTR 95-04, </type> <institution> University of Wisconsin - Madison, </institution> <month> February </month> <year> 1995. </year> <note> To appear in the Journal of Global Optimization. </note>
Reference-contexts: P is at least 1 4 of the area of the grid. In the next section we show how to construct asymptotically optimal solutions if P dominates the individual dimensions M; N . 4 Asymptotically Optimal Solutions via Stripe Decomposi tion In <ref> [CM95] </ref>, we proved the following theorem: Theorem 2 The MPE (M,N,P) with P = M N has a feasible solution whose total perimeter possesses a relative distance ffi from the lower bound that satisfies ffi &lt; l p m :(1) The proof of this theorem is an illustration of the stripe-decomposition <p> Each stripe can be filled with optimal and near optimal shapes, using a stripe-filling process ( <ref> [CM95] </ref>) and the perimeter of each non-optimal shape will be at most two more than the optimal. A provably optimal partition of a 200 fi 200 grid among 200 processors that is in stripe-form is shown in figure 2. <p> A provably optimal partition of a 200 fi 200 grid among 200 processors that is in stripe-form is shown in figure 2. The following theorem establishes an error bound for stripe-decomposition that improves on a related result in <ref> [CM95] </ref>: 6 Theorem 3 Assuming P divides M N and that P max (M; N ) the perimeter minimization prob- lem MPE (M,N,P) has a feasible solution whose relative distance ffi from the lower bound satisfies ffi &lt; p + A Thus the error bound ffi converges to zero as A <p> satisfy N P &lt; M and P divides M N , then the minimum perimeter problem MPE (M; N; P ) has a feasible solution whose relative distance ffi from the lower bound satisfies ffi &lt; 1 p + 1 N d 2 A e Proof: It is shown in <ref> [CM95] </ref> that if M k (k 1), then there exist two natural numbers a; b such that M = ak + b (k + 1). Now, let k (as before) be j p k . <p> The communication between workstations used the PVM 3.3.7 message-passing system ( [GBD + 94]) (before that, we had run earlier versions of our algorithm on a CM-5 with 32 nodes using the CMMD message-passing library ( [Thi93]), and we reported the results in <ref> [CM95] </ref>). We run our algorithm for 20 generations except for the last case (1000 fi 1000 grid) which we run for only 10 generations due to time limitations. A metric of the size of the test problems is shown in table 1.
Reference: [CQ95] <author> P. Crandall and M. Quinn. </author> <title> Non-uniform 2-d grid partitioning for heterogeneous parallel architectures. </title> <booktitle> In Proceedings of the 9th International Symposium on Parallel Processing, </booktitle> <pages> pages 428-435, </pages> <year> 1995. </year>
Reference-contexts: Laguna et. al. ( [LFE94]) also developed a GRASP heuristic for partitioning a general graph into two pieces; and in <ref> [CQ95] </ref> Crandall and Quinn presented a heuristic for decomposing non-uniform rectangular grids among a number of heterogeneous processors. Also, Miller et. al. ( [MTTV93]) have designed a domain decomposer for meshes based on geometric ideas.
Reference: [DTR91] <author> R. DeLeone and M. A. Tork-Roth. </author> <title> Massively parallel solution of quadratic programs via succsessive overrelaxation. </title> <type> Technical Report 1041, </type> <institution> University of Wisconsin - Madison, </institution> <month> August </month> <year> 1991. </year>
Reference-contexts: In the 5-point grid scheme, each cell updates its value using the values of its North, East, West and South neighboring cells ( <ref> [DTR91] </ref>). Interprocessor communication occurs when a cell needs the value of another cell that does not belong to the same processor.
Reference: [GBD + 94] <author> A. Geist, A. Beguelin, J. Dongarra, W. Jiang, R. Manchek, and V. Sunderam. </author> <title> PVM 3 User's Guide and Reference Manual. </title> <institution> Oak Ridge National Laboratory, </institution> <year> 1994. </year>
Reference-contexts: Each node maintains 2 individuals, thus the total population size is 64. The communication between workstations used the PVM 3.3.7 message-passing system ( <ref> [GBD + 94] </ref>) (before that, we had run earlier versions of our algorithm on a CM-5 with 32 nodes using the CMMD message-passing library ( [Thi93]), and we reported the results in [CM95]).
Reference: [GMT95] <author> J. R. Gilbert, G. L. Miller, and S. H. Teng. </author> <title> Geometric mesh partitioning: Implementation and experiments. </title> <booktitle> In Proceedings of the 9th International Symposium on Parallel Processing, </booktitle> <pages> pages 418-427, </pages> <year> 1995. </year>
Reference-contexts: We obtained an implementation of the geometric mesh partitioner (in MATLAB) as described in <ref> [GMT95] </ref>, and we used the Chaco package version 2.0 ( [HL95a]) for the spectral bisection (Chaco is entirely written in ANSI C). We ran our experiments on these two graph partitioning methods on a SUN-20 workstation. <p> Pardalos and M. Resende for providing us with a version of their high-quality GRASP heuristic for the QAP. We obtained the MATLAB code for the geometric mesh partitioner from the anonymous ftp site indicated in Gilbert et al. ( <ref> [GMT95] </ref>) to whom we are thankful for the easy access to their code. Finally, our thanks to B. Hendrickson and R. Leland for providing us with version 2.0 of the Chaco package.
Reference: [HL95a] <author> B. Hendrickson and R. Leland. </author> <note> The Chaco User's Guide Version 2.0. </note> <institution> Sandia National Laboratories, </institution> <month> July </month> <year> 1995. </year>
Reference-contexts: It is a standard local refinement routine incorporated in the Chaco package ( <ref> [HL95a] </ref>). Pothen et. al. ( [PSL90]) developed the spectral method in the context of general graph partitioning; discussion of improved spectral partitioning algorithms including spectral quadrisection or octasec-tion can be found in [HL95b]. <p> We obtained an implementation of the geometric mesh partitioner (in MATLAB) as described in [GMT95], and we used the Chaco package version 2.0 ( <ref> [HL95a] </ref>) for the spectral bisection (Chaco is entirely written in ANSI C). We ran our experiments on these two graph partitioning methods on a SUN-20 workstation.
Reference: [HL95b] <author> B. Hendrickson and R. Leland. </author> <title> An improved spectral graph partitioning algorithm for mapping parallel computations. </title> <journal> SIAM J. on Sci. Comput., </journal> <volume> 16 </volume> <pages> 452-469, </pages> <year> 1995. </year>
Reference-contexts: It is a standard local refinement routine incorporated in the Chaco package ( [HL95a]). Pothen et. al. ( [PSL90]) developed the spectral method in the context of general graph partitioning; discussion of improved spectral partitioning algorithms including spectral quadrisection or octasec-tion can be found in <ref> [HL95b] </ref>. Laguna et. al. ( [LFE94]) also developed a GRASP heuristic for partitioning a general graph into two pieces; and in [CQ95] Crandall and Quinn presented a heuristic for decomposing non-uniform rectangular grids among a number of heterogeneous processors.
Reference: [Hol92] <author> John Holland. </author> <title> Adaptation in Natural and Artificial Systems. </title> <publisher> MIT Press, </publisher> <year> 1992. </year>
Reference-contexts: To search the huge search space of input combinations to the PERIX algorithm (in order to find the best partition -not only the best stripe-form-) we have developed PERIX-GA, a high level repair Genetic Algorithm ( <ref> [Hol92, Mic94] </ref>). PERIX-GA works with a population of individuals each of which is an array of shape indices to be tiled together by the PERIX algorithm.
Reference: [KL70] <author> B. W. Kernighan and S. Lin. </author> <title> An effective heuristic procedure for partitioning graphs. </title> <journal> Bell Systems Tech. Journal, </journal> <pages> pages 291-308, </pages> <month> February </month> <year> 1970. </year>
Reference-contexts: By considering the graph of the grid, where for each grid cell, there is a vertex associated with it, and for any two neighboring cells there is an edge joining the associated vertices, one can apply graph partitioning techniques for decomposing the domain. Kernighan and Lin's heuristic ( <ref> [KL70] </ref>) for partitioning a graph into two components is a very well known technique that is still used in many modern codes as a subroutine but has the disadvantage of requiring a relatively good initial partition upon which it attempts to improve.
Reference: [LFE94] <author> M. Laguna, T. A. Feo, and H. C. Elrod. </author> <title> A greedy randomized adaptive search procedure for the two partition problem. </title> <journal> Operations Research, </journal> <month> July August </month> <year> 1994. </year>
Reference-contexts: Pothen et. al. ( [PSL90]) developed the spectral method in the context of general graph partitioning; discussion of improved spectral partitioning algorithms including spectral quadrisection or octasec-tion can be found in [HL95b]. Laguna et. al. ( <ref> [LFE94] </ref>) also developed a GRASP heuristic for partitioning a general graph into two pieces; and in [CQ95] Crandall and Quinn presented a heuristic for decomposing non-uniform rectangular grids among a number of heterogeneous processors.
Reference: [Lin91] <author> K. Y. Lin. </author> <title> Exact solution of the convex polygon perimeter and area generating function. </title> <journal> J. Phys. A. Math Gen., </journal> <volume> 24 </volume> <pages> 2411-2417, </pages> <year> 1991. </year>
Reference-contexts: These shapes play a key role in proving the existence of a stripe-form solution of the MPE (M; N; M ) where M N . Note that in the combinatorics literature ( <ref> [Lin91, Mel94] </ref>), much research has been published on the generating function approach for developing expressions for the exact number of "convex polyominoes" with various properties.
Reference: [LPR94] <author> Y. Li, P. M. Pardalos, and M. G. C. Resende. </author> <title> A grasp for the qap. </title> <editor> In P. M. Pardalos and H. Wolkowicz, editors, </editor> <title> Quadratic Assignment and Related Problems. </title> <journal> DIMACS Series Vol. </journal> <volume> 16, </volume> <publisher> American Mathematical Society, </publisher> <year> 1994. </year>
Reference-contexts: The QAP dimension of each problem is M N , and the GA dimension is the length of the individuals, i.e. the number of processors to be assigned to the domain. In table 2 we have compared our algorithm with a GRASP heuristic for the QAP ( <ref> [LPR94] </ref>), run on one node of the cluster of workstations.
Reference: [Mel94] <author> M. Bousquet Melou. </author> <title> Codage des polyominos convexes et equation pour l'enumeration suivant l'aire. </title> <journal> Discrete Applied Mathematics, </journal> <volume> 48 </volume> <pages> 21-43, </pages> <year> 1994. </year>
Reference-contexts: These shapes play a key role in proving the existence of a stripe-form solution of the MPE (M; N; M ) where M N . Note that in the combinatorics literature ( <ref> [Lin91, Mel94] </ref>), much research has been published on the generating function approach for developing expressions for the exact number of "convex polyominoes" with various properties.
Reference: [Mic94] <author> Zbigniew Michalewicz. </author> <title> Genetic Algorithms + Data Structures = Evolution Programs. </title> <publisher> Springer-Verlag, </publisher> <year> 1994. </year> <month> 14 </month>
Reference-contexts: To search the huge search space of input combinations to the PERIX algorithm (in order to find the best partition -not only the best stripe-form-) we have developed PERIX-GA, a high level repair Genetic Algorithm ( <ref> [Hol92, Mic94] </ref>). PERIX-GA works with a population of individuals each of which is an array of shape indices to be tiled together by the PERIX algorithm.
Reference: [MTTV93] <author> G. L. Miller, S. H. Teng, W. Thurston, and S. A. Vavasis. </author> <title> Automatic mesh partitioning. </title> <editor> In A. George, J. R. Gilbert, and J. W. H. Liu, editors, </editor> <title> Graph Theory and Sparse Matrix Computation. </title> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: Laguna et. al. ( [LFE94]) also developed a GRASP heuristic for partitioning a general graph into two pieces; and in [CQ95] Crandall and Quinn presented a heuristic for decomposing non-uniform rectangular grids among a number of heterogeneous processors. Also, Miller et. al. ( <ref> [MTTV93] </ref>) have designed a domain decomposer for meshes based on geometric ideas. The spectral method and its variations have received considerable attention as they are general methods for splitting a graph into two equally sized pieces while minimizing the sum of weights of the arcs with endpoints in both sub-graphs. <p> 7 261.0 1000 1000 1000 - 0.45 5 1660.5 Table 2: Computational Results: PERIX-GA and GRASP-QAP We also compared our algorithm against two popular graph-partitioning methods, namely the (recursive) spectral bisection method ( [PSL90]) with a Kernighan - Lin local refinement procedure applied, and the geometric mesh partitioning method ( <ref> [MTTV93] </ref>). We obtained an implementation of the geometric mesh partitioner (in MATLAB) as described in [GMT95], and we used the Chaco package version 2.0 ( [HL95a]) for the spectral bisection (Chaco is entirely written in ANSI C).
Reference: [PRW93] <author> P. M. Pardalos, F. Rendl, and H. Wolkowicz. </author> <title> The quadratic assignment problem: A survey and recent developments. </title> <editor> In P. M. Pardalos and H. Wolkowicz, editors, </editor> <title> Quadratic Assignment and Related Problems. </title> <publisher> American Mathematical Society, </publisher> <year> 1993. </year>
Reference-contexts: The problem is a special case of the (NP-complete) Graph Partitioning problem, and as such, it can be formulated as a Quadratic Assignment problem ( <ref> [PRW93] </ref>), with jGjP binary variables and jGj + P constraints.
Reference: [PSL90] <author> A. Pothen, H. D. Simon, and K. P. Liu. </author> <title> Partitioning sparse matrices with eigenvectors of graphs. </title> <journal> SIAM Journal on Matrix Analysis and Applications, </journal> <volume> 11 </volume> <pages> 430-452, </pages> <year> 1990. </year>
Reference-contexts: It is a standard local refinement routine incorporated in the Chaco package ( [HL95a]). Pothen et. al. ( <ref> [PSL90] </ref>) developed the spectral method in the context of general graph partitioning; discussion of improved spectral partitioning algorithms including spectral quadrisection or octasec-tion can be found in [HL95b]. <p> 17 - 0.0 9 268.6 32 31 256 - 0.0 5 230.2 200 200 200 - 0.0 7 261.0 1000 1000 1000 - 0.45 5 1660.5 Table 2: Computational Results: PERIX-GA and GRASP-QAP We also compared our algorithm against two popular graph-partitioning methods, namely the (recursive) spectral bisection method ( <ref> [PSL90] </ref>) with a Kernighan - Lin local refinement procedure applied, and the geometric mesh partitioning method ( [MTTV93]).
Reference: [Sch89] <author> R. J. Schalkoff. </author> <title> Digital Image Processing and Computer Vision. </title> <publisher> John Wiley & Sons, </publisher> <year> 1989. </year>
Reference-contexts: The Minimum Perimeter problem arises also in the context of image processing ( <ref> [Sch89] </ref>) and low-level computer vision, where for edge detection an image (a rectangular grid) has to be split among a number of processors in a parallel machine subject to the same load balancing constraints.
Reference: [Thi93] <institution> Thinking Machines Corporation. </institution> <note> CMMD Reference Manual, </note> <month> May </month> <year> 1993. </year> <title> [vL91] von Laszewski. Intelligent structural operators for the k-way graph partitioning problem. </title> <editor> In R. Belew and L. Booker, editors, </editor> <booktitle> Proceedings of the Fourth Intl. Conference on Genetic Algorithms, </booktitle> <pages> pages 45-52. </pages> <publisher> Morgan Kaufmann Publishers, </publisher> <address> Los Altos, CA, </address> <year> 1991. </year>
Reference-contexts: Each node maintains 2 individuals, thus the total population size is 64. The communication between workstations used the PVM 3.3.7 message-passing system ( [GBD + 94]) (before that, we had run earlier versions of our algorithm on a CM-5 with 32 nodes using the CMMD message-passing library ( <ref> [Thi93] </ref>), and we reported the results in [CM95]). We run our algorithm for 20 generations except for the last case (1000 fi 1000 grid) which we run for only 10 generations due to time limitations. A metric of the size of the test problems is shown in table 1.
Reference: [Yac93] <author> J. Yackel. </author> <title> Minimum Perimeter Tiling in Parallel Computation. </title> <type> PhD thesis, </type> <institution> University of Wisconsin - Madison, </institution> <month> August </month> <year> 1993. </year>
Reference-contexts: The number of such near rectangular shapes is shown in [YMC95] to grow with A as O (A 1=4 ). In our method, we restrict the initial choices of optimal shapes to this latter subset of the collection of optimal shapes. Furthermore, it follows from <ref> [Yac93] </ref>, that given an area A, and letting k = j p k , if k 2 = A then (k; k; 0) is an optimal shape.
Reference: [YM92a] <author> J. Yackel and R. R. Meyer. </author> <title> Minimum perimeter decomposition. </title> <type> Technical Report 1078, </type> <institution> University of Wisconsin - Madison, </institution> <month> February </month> <year> 1992. </year>
Reference-contexts: Finally, Genetic Algorithm approaches to the graph partitioning problem have been proposed ( [vL91]) where the length of each individual in the population is at least as big as the size of the graph. Our GA, in contrast, uses the theory of optimal shapes ( <ref> [YM92a] </ref>) in a high-level approach that reduces the length of the individual to P , the number of processors. Performance comparisons of our GA with many of the above approaches is given in section 5. 3 2 Shapes of Optimal Regions In [YM92a], Yackel & Meyer showed that for any given <p> contrast, uses the theory of optimal shapes ( <ref> [YM92a] </ref>) in a high-level approach that reduces the length of the individual to P , the number of processors. Performance comparisons of our GA with many of the above approaches is given in section 5. 3 2 Shapes of Optimal Regions In [YM92a], Yackel & Meyer showed that for any given area A a processor must occupy, there exists a non-empty collection of configurations of A cells (shapes) with the property that all of the shapes in the collection have minimum perimeter fl (A) = 2 l p m , i.e. there is <p> As M &lt; A (otherwise, there exists an optimal solution of (P rel ) that does not violate the extra constraints of (P) because it is shown in <ref> [YM92a] </ref> that there always exist an optimal solution of (P rel ) that has h fl = j p k .) an optimal solution of (P) is (h fl ; w fl ) = (M; A ) and the optimal objective value of (P) is M + A The above lemma
Reference: [YM92b] <author> J. Yackel and R. R. Meyer. </author> <title> Optimal tilings for parallel database design. </title> <editor> In P. M. Pardalos, editor, </editor> <booktitle> Advances in Optimization and Parallel Computing, </booktitle> <pages> pages 293-309. </pages> <publisher> North - Holland, </publisher> <year> 1992. </year>
Reference-contexts: To 10 achieve this goal, PERIX maintains a list of maximal free rectangles of the grid (a structure used successfully by Yackel in <ref> [YM92b] </ref> for another tiling problem), into which it attempts to place the next optimal shape, one at a time. The optimal shapes in our library are blocks accompanied by a fringe.
Reference: [YMC95] <author> J. Yackel, R. R. Meyer, and I. T. Christou. </author> <title> Minimum-perimeter domain assignment, </title> <month> February </month> <year> 1995. </year> <note> Submitted to the Math. Programming Journal. 15 </note>
Reference-contexts: Many of the shapes in this collection consist of a rectangle of dimensions h fi w plus a fringe of size f, denoted as the tuple (h; w; f ). The number of such near rectangular shapes is shown in <ref> [YMC95] </ref> to grow with A as O (A 1=4 ). In our method, we restrict the initial choices of optimal shapes to this latter subset of the collection of optimal shapes.
References-found: 23

