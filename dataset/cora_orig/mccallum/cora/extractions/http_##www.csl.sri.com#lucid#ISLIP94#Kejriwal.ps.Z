URL: http://www.csl.sri.com/lucid/ISLIP94/Kejriwal.ps.Z
Refering-URL: http://www.csl.sri.com/lucid/ISLIP94/electronic-proceedings.html
Root-URL: 
Title: Standard Cells for Hardware Synthesis of LUCID Programs  
Author: Abhay Kejriwal Ben M. Huey 
Affiliation: Texas Instruments, Inc.  Arizona State University  
Abstract: We describe the design of standard cell libraries in the hardware description language VHDL for Lucid operators using both demand-driven and data-driven dataflow computation. These standard cells are useful for synthesizing a VLSI system from a given design description given in Lucid. Almost all the operators for the Lucid language, and at least one operator from each of the different classes of Lucid operators for the data-driven and demand-driven model was implemented. Interfaces for hybrid models were designed and a few hybrid structures were implemented to verify the functionality and interfacing capabilities of the cells. While the use of Lucid as a hardware synthesis language seems to be promising, much additional work will be required before it becomes an effective tool and can be widely accepted. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> D. L. Perry, </author> <title> VHDL. </title> <address> New York: </address> <publisher> McGraw-Hill, </publisher> <year> 1994. </year>
Reference: [2] <author> Z. Navabi, </author> <title> VHDL: Analysis and Modeling of Digital Systems. </title> <address> New York: </address> <publisher> McGraw-Hill, </publisher> <year> 1993. </year>
Reference: [3] <author> I. P. Radivojevic and J. Herath, </author> <title> "Executing DSP applications in a fine-grained dataflow environment," </title> <journal> IEEE Transactions on Software Engineering, </journal> <volume> vol. 17, </volume> <pages> pp. 1028-41, </pages> <month> October </month> <year> 1991. </year>
Reference: [4] <author> W. W. Wadge and E. A. Ashcroft, </author> <title> Lucid the Dataflow Programming Language. </title> <editor> U. K.: </editor> <publisher> Academic Press, </publisher> <year> 1985. </year>
Reference: [5] <author> R. Jagannathan and E. A. Ashcroft, "Eazyflow: </author> <title> a hybrid model for parallel processing," </title> <booktitle> in Proc. International Conference on Parallel Processing, </booktitle> <pages> pp. 9-15, </pages> <month> August </month> <year> 1984. </year>
Reference: [6] <author> A. A. Faustini, S. G. Mathews and A. G. Yaghi, </author> <title> The pLucid Programmers Manual, </title> <type> Technical Report TR-83-004, </type> <institution> Computer Science Department, Arizona State University, </institution> <month> October </month> <year> 1983. </year>
Reference: [7] <author> W. W. Wadge, </author> <title> "An extensional treatment of dataflow deadlock," </title> <editor> in G. Kahn (editor), </editor> <booktitle> Lecture Notes in Computer Science: Semantics of Concurrent Computation, </booktitle> <publisher> Springer-Verlag, </publisher> <pages> pp. 285-299, </pages> <year> 1979. </year>
Reference: [8] <author> K. V. Berkel, R. Burgess, J. Kessels, M. Roncken, F. Schalij and A. Peeters, </author> <title> "Asynchronous circuits for low power: a DCC error corrector," </title> <journal> IEEE Design and Test of Computers, </journal> <volume> vol. 11, </volume> <pages> pp. 22-32, </pages> <month> Summer </month> <year> 1994. </year>
Reference: [9] <author> A. Marshall, B. Coates, P. Siegel, </author> <title> "Designing an asynchronous communications chip," </title> <journal> IEEE Design and Test of Computers, </journal> <volume> vol. 11, </volume> <pages> pp. 8-21, </pages> <month> Summer </month> <year> 1994. </year>
Reference: [10] <author> T. Nanya, Y. Ueno, H. Kagotani, M. Kuwako and A. Takamura, "TITAC: </author> <title> design of a quasi-delay-insensitive microprocessor," </title> <journal> IEEE Design and Test of Computers, </journal> <volume> vol. 11, </volume> <pages> pp. 50-63, </pages> <month> Summer </month> <year> 1994. </year>
Reference-contexts: An asynchronous pipeline with handshaking signals can have different speeds in case the delays in the stages are different for different cases. Thus, asynchronous designs can provide high-speed operation, depending only on causal relation of signal transitions with an average delay instead of a worst-case delay <ref> [10] </ref>. 5. Asynchronous designs have a better timing fault tolerance, because of insensitivity to delay variance in layout design, fabrication process and operating environment [10]. 6. Asynchronous design can provide design flexibility and cost reduction, with higher level logic design separated from lower level timing design [10]. <p> Thus, asynchronous designs can provide high-speed operation, depending only on causal relation of signal transitions with an average delay instead of a worst-case delay <ref> [10] </ref>. 5. Asynchronous designs have a better timing fault tolerance, because of insensitivity to delay variance in layout design, fabrication process and operating environment [10]. 6. Asynchronous design can provide design flexibility and cost reduction, with higher level logic design separated from lower level timing design [10]. Synchronizing signals offsets the gain to some extent and requires extra hardware. <p> of a worst-case delay <ref> [10] </ref>. 5. Asynchronous designs have a better timing fault tolerance, because of insensitivity to delay variance in layout design, fabrication process and operating environment [10]. 6. Asynchronous design can provide design flexibility and cost reduction, with higher level logic design separated from lower level timing design [10]. Synchronizing signals offsets the gain to some extent and requires extra hardware. A clocked pipeline can be created from our design by simply replacing the synchronizing hardware with a clock input. This can be performed by a synthesis tool in an optimization step.
Reference: [11] <author> A. Kejriwal, </author> <title> Standard Cell Designs for Hardware Synthesis with LUCID Operators, M.S. </title> <type> Thesis, </type> <institution> Arizona State University, </institution> <month> June </month> <year> 1994. </year>
Reference-contexts: Some programs were also created by randomly connecting these operators. The results of all these tests are as per our expectations and are reported in detail in <ref> [11] </ref>. The initial goal was to model one operator from each of the different classes of Lucid operators for the data-driven and demand-driven model. We not only achieved this goal, but also implemented almost all the operators of Lucid and designed interfaces for hybrid models.
References-found: 11

