URL: http://www.wi.leidenuniv.nl/home/joost/coor.ps.gz
Refering-URL: http://www.wi.leidenuniv.nl/home/joost/
Root-URL: http://www.aic.nrl.navy.mil/~aha/people.html
Email: fgoeman,joostg@wi.leidenuniv.nl  Kaisa.Sere@uku.fi  
Phone: 2  3  
Title: Coordination in the ImpUnity Framework  
Author: H.J.M. Goeman J.N. Kok K. Sere R.T. Udink 
Address: P.O.Box 9512, 2300 RA Leiden, The Netherlands  Kuopio, P.O.Box 1627, FIN-70211 Kuopio, Finland  P.O.Box 80089, 3508 TB Leiden, The Netherlands  
Affiliation: 1 Dept. of Computer Science, Leiden University,  Dept. of Computer Science and Applied Mathematics, University of  Dept. of Computer Science, Utrecht University,  
Abstract: The ImpUNITY framework is an extension of the UNITY framework. It contains several program structuring mechanisms and puts special emphasis on compositional refinement of both specifications and programs. It has an associated temporal logic, formal refinement notions, and program transformation rules. In this paper we show how coordination in the form of a shared tuple space between communicating ImpUNITY programs is modelled and used during formal program specification and refinement. We exemplify our formalism by a larger case study on a phone system where communication in the system is partly taken care of via a tuple space.
Abstract-found: 1
Intro-found: 1
Reference: 1. <author> R. J. R. Back and K. Sere. </author> <title> Action systems with synchronous communication. </title> <editor> In E.-R. Olderog, editor, </editor> <title> Programming Concepts, Methods and Calculi, </title> <journal> volume A-56 of IFIP Transactions, </journal> <pages> pages 107-126. </pages> <publisher> Elsevier, </publisher> <month> June </month> <year> 1994. </year>
Reference-contexts: ImpUNITY can be seen as a mixture between UNITY and the language of the action system formalism. It has an associated temporal logic similar to the logic of UNITY [3] and it has formal refinement notions and the structuring mechanisms (procedures, local variables) of the the action system formalism <ref> [1] </ref>. As an example of an ImpUNITY program, consider the program Buf given in by a procedure interface. Messages are put in the buffer by calling the procedure flushin and the buffer outputs messages by calling the procedure flushout.
Reference: 2. <author> D. Le Metayer, C.L. Hankin, and D. Sands. </author> <title> Compositional semantics of a notation for composing parallel programs. </title> <note> Submitted for publication 1995. </note>
Reference-contexts: There are, however, some differences: a Swarm program is based on a dynamic set of nondeterministic transaction statements. The ensures relation and the fixed point property have been reformulated, but most of the UNITY theory can be directly applied to the Swarm-logic. The Gamma language <ref> [2, 5] </ref> is based on a multiset of actions that work on a shared tuple space. Gamma has an associated semantics, and refinement rules. These languages concentrate on the interaction with a shared tuple space.
Reference: 3. <author> K. Chandy and J. Misra. </author> <title> Parallel Program Design: A Foundation. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: 1 Introduction Several examples of action based coordination languages have been presented in the literature. The shared dataspace language Swarm [4] is based on UNITY <ref> [3] </ref>. There are, however, some differences: a Swarm program is based on a dynamic set of nondeterministic transaction statements. The ensures relation and the fixed point property have been reformulated, but most of the UNITY theory can be directly applied to the Swarm-logic. <p> We discuss how the ImpUNITY-framework can be used for this purpose. The ImpUNITY-framework was introduced in the paper [8] and in the thesis [6]. It is an extension of the UNITY-framework of <ref> [3] </ref> with the emphasis on formal refine-ment notions between programs and a collection of program structuring mechanisms. Moreover, the ImpUNITY framework supports compositional refinement of both specifications and programs. <p> ImpUNITY can be seen as a mixture between UNITY and the language of the action system formalism. It has an associated temporal logic similar to the logic of UNITY <ref> [3] </ref> and it has formal refinement notions and the structuring mechanisms (procedures, local variables) of the the action system formalism [1]. As an example of an ImpUNITY program, consider the program Buf given in by a procedure interface. <p> CM q in F i; The properties defined above are UNITY-like properties in the sense that they can be used in a similar way as the standard UNITY properties. All theorems derived in <ref> [3] </ref> for properties of a single program also hold for the ImpUNITY properties. Furthermore, the theorems derived for the ensures CM property also hold for the . CM and . fl properties. And then, the following substitution theorem holds. Theorem 2.
Reference: 4. <author> H.C. Cunningham and G.C. Roman. </author> <title> A UNITY-style programming logic for a shared dataspace language. </title> <type> Technical Report WUCS-89-5, </type> <institution> Dept. of Computer Science, Washington University, </institution> <month> March </month> <year> 1989. </year>
Reference-contexts: 1 Introduction Several examples of action based coordination languages have been presented in the literature. The shared dataspace language Swarm <ref> [4] </ref> is based on UNITY [3]. There are, however, some differences: a Swarm program is based on a dynamic set of nondeterministic transaction statements. The ensures relation and the fixed point property have been reformulated, but most of the UNITY theory can be directly applied to the Swarm-logic.
Reference: 5. <author> D. Le Metayer, C.L. Hankin, and D. Sands. </author> <title> A parallel programming style and its algebra of programs. </title> <booktitle> In PARLE'93, volume 694 of Lecture Notes in Computer Science, </booktitle> <publisher> Springer-Verlag, </publisher> <year> 1993. </year>
Reference-contexts: There are, however, some differences: a Swarm program is based on a dynamic set of nondeterministic transaction statements. The ensures relation and the fixed point property have been reformulated, but most of the UNITY theory can be directly applied to the Swarm-logic. The Gamma language <ref> [2, 5] </ref> is based on a multiset of actions that work on a shared tuple space. Gamma has an associated semantics, and refinement rules. These languages concentrate on the interaction with a shared tuple space.
Reference: 6. <author> R.T. Udink. </author> <title> Program Refinement in UNITY-like Environments. </title> <type> PhD Thesis, </type> <institution> Utrecht University, </institution> <month> September </month> <year> 1995. </year>
Reference-contexts: We discuss how the ImpUNITY-framework can be used for this purpose. The ImpUNITY-framework was introduced in the paper [8] and in the thesis <ref> [6] </ref>. It is an extension of the UNITY-framework of [3] with the emphasis on formal refine-ment notions between programs and a collection of program structuring mechanisms. Moreover, the ImpUNITY framework supports compositional refinement of both specifications and programs. <p> These are different from this refinement notion on statements.) Such a refinement ordering can be formally defined in terms of predicate transformers <ref> [6] </ref>. <p> For practical program refinement it is useful to have a collection of program transformation rules available. We give next some examples of such rules for ImpUNITY programs. For an overview, consult <ref> [6] </ref>. Statements that behave similarly, but differ only in their guards can be combined into one statement that is enabled if one of its components is enabled. Transformation 6 (Combine statements) Let F and G be ImpUNITY programs that only differ in their assign-sections.
Reference: 7. <author> R.T. Udink, T. Herman, and J.N. Kok. </author> <title> Progress for local variables in UNITY. </title> <editor> In E.-R. Olderog, editor, </editor> <title> Programming Concepts, Methods and Calculi, </title> <journal> volume A-56 of IFIP Transactions, </journal> <pages> pages 127-146. </pages> <publisher> Elsevier, </publisher> <month> June </month> <year> 1994. </year>
Reference: 8. <author> R.T. Udink and J.N. Kok. ImpUNITY: </author> <title> UNITY with procedure and local variables. </title> <editor> In B. Moller, editor, </editor> <booktitle> Mathematics of Program Construction, volume 947 of Lecture Notes in Computer Science, </booktitle> <pages> pages 452-472. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year>
Reference-contexts: We discuss how the ImpUNITY-framework can be used for this purpose. The ImpUNITY-framework was introduced in the paper <ref> [8] </ref> and in the thesis [6]. It is an extension of the UNITY-framework of [3] with the emphasis on formal refine-ment notions between programs and a collection of program structuring mechanisms. Moreover, the ImpUNITY framework supports compositional refinement of both specifications and programs.
References-found: 8

