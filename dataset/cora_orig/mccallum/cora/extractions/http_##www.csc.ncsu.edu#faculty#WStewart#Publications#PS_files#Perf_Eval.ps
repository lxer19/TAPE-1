URL: http://www.csc.ncsu.edu/faculty/WStewart/Publications/PS_files/Perf_Eval.ps
Refering-URL: http://www.csc.ncsu.edu/faculty/WStewart/Publications/Publications.html
Root-URL: http://www.csc.ncsu.edu
Title: From Queueing Networks to Markov Chains: The XMARCA Interface.  
Author: Richard L. Klevans and William J. Stewart. 
Address: Raleigh, N.C. 27695-8206, U.S.A.  
Affiliation: Department of Computer Science, North Carolina State University,  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> A.V. Aho, J.E. Hopcroft, and J.D. Ullman. </author> <title> The Design and Analysis of Computer Algorithms. </title> <publisher> Addison-Wesley, </publisher> <address> Reading, MA, </address> <year> 1974. </year>
Reference-contexts: Perhaps the best algorithm to use is that of Tarjan [18]. This is a depth-first search (DFS) algorithm, which searches in the forward (deeper) direction as long as possible. Further details, including coding information, may be found in <ref> [6, 1] </ref>. The complexity of the algorithm is O (jV j + jEj), where jV j is the number of vertices and jEj is the number of edges in the graph.
Reference: [2] <author> R.W. Butler. </author> <title> The SURE-2 Reliability Analysis Program. </title> <type> Technical report, </type> <institution> NASA Langley Research Center, </institution> <month> January </month> <year> 1985. </year>
Reference-contexts: For example, the SAVE (System Availability Estimator) package [4], SHARPE (Symbolic Hierarchical Automated Reliability/Performance Evaluator) [13], and SURE-2 Reliability Analysis Program <ref> [2] </ref> have all been developed for the analysis of reliability-type models. The software package, MACOM [14], was developed for the analysis of telecommunication systems. It is queueing network-based and includes provision for features such as limited capacity service centers, simultaneous arrivals, state-dependent routing, simultaneous resource possession, and phase-type distributions.
Reference: [3] <author> W-L. Cao and W.J. Stewart. </author> <title> Iterative aggregation/disaggregation techniques for nearly-uncoupled Markov chains. </title> <journal> Journal of the ACM, </journal> <volume> 32(3) </volume> <pages> 702-719, </pages> <year> 1985. </year> <month> 22 </month>
Reference-contexts: To our knowledge, XMARCA (and MARCA) are the only packages that incorporate a means of automatically detecting an unstructured NCD matrix and an IAD solution method adapted to large matrices stored in compact (sparse) form. 4.1 The Basic IAD Algorithm We begin by describing the basic IAD algorithm, <ref> [3, 9, 17] </ref>. Algorithm: Iterative Aggregation/Disaggregation 1. Let (0) = ( 1 ; 2 ; : : : ; N ) be a given initial approximation to the solution , and set m = 1. 2.
Reference: [4] <author> A. Goyal, W.C. Carter, E. de Souze e Silva, S.S. Lavenberg, </author> <title> and K.S. Trivedi. The system availability estimator. </title> <booktitle> In Proceedings of the 16th International Symposium on Fault-Tolerant Computing, </booktitle> <pages> pages 84-89, </pages> <address> Vienna, Austria, </address> <year> 1986. </year>
Reference-contexts: For example, the SAVE (System Availability Estimator) package <ref> [4] </ref>, SHARPE (Symbolic Hierarchical Automated Reliability/Performance Evaluator) [13], and SURE-2 Reliability Analysis Program [2] have all been developed for the analysis of reliability-type models. The software package, MACOM [14], was developed for the analysis of telecommunication systems.
Reference: [5] <author> B.R. Haverkort, A.P.A. van Moorsel, and A. Dijkstra. MGMtool: </author> <title> A performance modelling tool based on matrix geometric techniques. </title> <editor> In R. Pooley and J. Hillston, editors, </editor> <booktitle> Computer Performance Evaluation '92, Modelling Techniques and Tools, </booktitle> <pages> pages 397-401. </pages> <publisher> Antony Rowe Ltd., </publisher> <address> Chippenham, England, </address> <year> 1992. </year>
Reference-contexts: It incorporates a mechanism to handle rewards. To place XMARCA in context, we note that there are curently several software packages geared to the solution of queueing networks. These include QNAP2 [20], MGMtool <ref> [5] </ref>, Panacea [12], and Q-lib [19], to name but a few. Most packages for solving queueing networks do not include a Markov chain solver. Rather, they consist of implementations that evaluate analytical expressions for approximate or exact solutions. In some cases they also include simulations. <p> Although it can handle a fairly large range of queueing network models, it is less widely applicable than XMARCA and its numerical solution procedures are much less sophisicated. QNAP2 is currently being upgraded with a graphical interface. MGMtool <ref> [5] </ref> is geared specifically to the solution of P h=P h=c queues. It allows a user to specify interarrival and service time distributions and converts these to a Markov chain whose stationary probability distribution possesses a matrix-geometric structure.
Reference: [6] <author> J.E. Hopcroft and R.J. Tarjan. </author> <title> Efficient algorithms for graph manipulation. </title> <journal> Communications of the ACM, </journal> <volume> 16(6) </volume> <pages> 372-378, </pages> <year> 1973. </year>
Reference-contexts: Perhaps the best algorithm to use is that of Tarjan [18]. This is a depth-first search (DFS) algorithm, which searches in the forward (deeper) direction as long as possible. Further details, including coding information, may be found in <ref> [6, 1] </ref>. The complexity of the algorithm is O (jV j + jEj), where jV j is the number of vertices and jEj is the number of edges in the graph.
Reference: [7] <author> Brian W. Kernighan and Dennis M. </author> <title> Ritchie The C Programming Language. Second Edition. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1988. </year>
Reference: [8] <author> R.L. Klevans and W.J. Stewart. XMARCA: </author> <title> User's Manual. A Graphical Interface for Queueing Network Modelling. </title> <type> Technical Report, </type> <institution> Department of Computer Science, North Carolina State University, </institution> <address> Raleigh, N.C. 27693-8206, </address> <year> 1992. </year>
Reference-contexts: To see how this actually works, let us examine how the basic queueing components are handled. With the exception of the first and simplest station, the exponential station, we shall not provide the actual code which may be found in the XMARCA documentation <ref> [8] </ref>. * Exponential stations require one bucket in the SDV. Its value represents the customer population at the station. Thus, an exponential station is implemented by incorporating the following code into the rate subroutine. <p> XMARCA can really only be appreciated by means of a demonstration. Nevertheless, readers who wish to learn more about XMARCA will find a complete description in the User's Manual <ref> [8] </ref>.
Reference: [9] <author> R. Koury, D.F. McAllister, and W.J. Stewart. </author> <title> Methods for computing stationary distributions of nearly-completely-decomposable Markov chains. </title> <journal> SIAM Journal of Algebraic and Discrete Mathematics, </journal> <volume> 5(2) </volume> <pages> 164-186, </pages> <year> 1984. </year>
Reference-contexts: To our knowledge, XMARCA (and MARCA) are the only packages that incorporate a means of automatically detecting an unstructured NCD matrix and an IAD solution method adapted to large matrices stored in compact (sparse) form. 4.1 The Basic IAD Algorithm We begin by describing the basic IAD algorithm, <ref> [3, 9, 17] </ref>. Algorithm: Iterative Aggregation/Disaggregation 1. Let (0) = ( 1 ; 2 ; : : : ; N ) be a given initial approximation to the solution , and set m = 1. 2.
Reference: [10] <editor> H.G. Perros and T. Altiok, Editors. </editor> <title> Queueing Networks with Blocking. </title> <publisher> North Holand Publishers, </publisher> <address> New York, </address> <year> 1989. </year>
Reference-contexts: Options are provided for either a fixed priority based ordering, or an ordering that is determined probabilistically. 3.2.2 Blocking Mechanisms Three blocking mechanisms are available in XMARCA; viz.; blocking before service, blocking after service and repetitive service <ref> [10] </ref>. For blocking before service, an extra bucket is needed to hold the identity of the station/server's selected destination. This bucket, called the blocking indicator bucket, does not by itself reveal whether or not a station/server is blocked before service.
Reference: [11] <author> B. Plateau. PEPS: </author> <title> A package for solving complex Markov models of parallel systems. </title> <editor> In R. Puigjaner and D. Potier, editors, </editor> <booktitle> Modelling Techniques and Tools for Computer Performance Evaluation, </booktitle> <pages> pages 291-306. </pages> <publisher> Plenum Press, </publisher> <address> New York, </address> <year> 1990. </year>
Reference-contexts: It is queueing network-based and includes provision for features such as limited capacity service centers, simultaneous arrivals, state-dependent routing, simultaneous resource possession, and phase-type distributions. A graphical interface built upon the SunView window system is provided to facilitate the specification of telecommunication models. The software package PEPS <ref> [11] </ref> (Package for the Evaluation of Parallel Systems) was, as its name indicates, designed as an aid in the performance evaluation of parallel systems, but in fact it is applicable to a much larger class of model, since it is based on the concept of networks of stochastic automata.
Reference: [12] <author> K.G. Ramakrishnan and D. Mitra. </author> <title> Panacea: An integrated set of tools for performance analysis. </title> <editor> In R. Puigjaner and D. Potier, editors, </editor> <booktitle> Modelling Techniques and Tools for Computer Performance Evaluation, </booktitle> <pages> pages 25-40, </pages> <year> 1988. </year>
Reference-contexts: It incorporates a mechanism to handle rewards. To place XMARCA in context, we note that there are curently several software packages geared to the solution of queueing networks. These include QNAP2 [20], MGMtool [5], Panacea <ref> [12] </ref>, and Q-lib [19], to name but a few. Most packages for solving queueing networks do not include a Markov chain solver. Rather, they consist of implementations that evaluate analytical expressions for approximate or exact solutions. In some cases they also include simulations.
Reference: [13] <author> R. Sahner and K.S. Trivedi. </author> <title> Reliability modelling using SHARPE. </title> <journal> IEEE Transactions on Reliability, </journal> <volume> R-36(2):186-193, </volume> <year> 1987. </year>
Reference-contexts: For example, the SAVE (System Availability Estimator) package [4], SHARPE (Symbolic Hierarchical Automated Reliability/Performance Evaluator) <ref> [13] </ref>, and SURE-2 Reliability Analysis Program [2] have all been developed for the analysis of reliability-type models. The software package, MACOM [14], was developed for the analysis of telecommunication systems.
Reference: [14] <author> M. Sczittnick and B. Muller-Clostermann. MACOM: </author> <title> A tool for the Markovian analysis of communication systems. </title> <editor> In G. Pujolle and R. Puigjaner, editors, </editor> <booktitle> Proceedings of the Fourth International Conference on Data Communication Systems and their Performance, </booktitle> <pages> pages 485-498. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1991. </year>
Reference-contexts: For example, the SAVE (System Availability Estimator) package [4], SHARPE (Symbolic Hierarchical Automated Reliability/Performance Evaluator) [13], and SURE-2 Reliability Analysis Program [2] have all been developed for the analysis of reliability-type models. The software package, MACOM <ref> [14] </ref>, was developed for the analysis of telecommunication systems. It is queueing network-based and includes provision for features such as limited capacity service centers, simultaneous arrivals, state-dependent routing, simultaneous resource possession, and phase-type distributions.
Reference: [15] <author> W.J. Stewart. MARCA: </author> <title> Markov chain analyzer. A software package for Markov modelling. </title> <editor> In William J. Stewart, editor, </editor> <title> Numerical Solution of Markov Chains, </title> <address> pages 37-62. </address> <publisher> Marcel Dekker Inc., </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: In XMARCA, these are all accomplished through the medium of a graphical interface and requires no programming on the part of the user. In fact XMARCA is an X-windows interface to the software package MARCA: Markov Chain Analyzer <ref> [15] </ref>, and has been designed specificially for the analysis of queueing network models. It is envisaged that later versions will include interfaces that are specially designed for specific applications such as communication modelling, reliability modelling, etc.
Reference: [16] <author> W.J. Stewart. </author> <title> Introduction to the Numerical Solution of Markov Chains Princeton Univeristy Press, </title> <year> 1994. </year>
Reference-contexts: An example is given in Figure 7. In such figures, the black areas show the position of the nonzero elements in the matrix. If the embedded Markov chain is periodic, the user may request that the transition matrix be permuted to normal periodic form <ref> [16] </ref>. <p> A dialog box, in which parameters for the numerical method are specified, appears in the middle of the solve window. Gaussian Elimination does not require any parameters so it suffices to press the `Solve' button to start the solution procedure. More information about these methods may be found in <ref> [16] </ref>.
Reference: [17] <author> W.J. Stewart and W. Wu. </author> <title> Numerical experiments with iteration and aggregation for Markov chains. </title> <journal> ORSA Journal on Computing, </journal> <volume> 4(3) </volume> <pages> 336-350, </pages> <year> 1992. </year>
Reference-contexts: To our knowledge, XMARCA (and MARCA) are the only packages that incorporate a means of automatically detecting an unstructured NCD matrix and an IAD solution method adapted to large matrices stored in compact (sparse) form. 4.1 The Basic IAD Algorithm We begin by describing the basic IAD algorithm, <ref> [3, 9, 17] </ref>. Algorithm: Iterative Aggregation/Disaggregation 1. Let (0) = ( 1 ; 2 ; : : : ; N ) be a given initial approximation to the solution , and set m = 1. 2.
Reference: [18] <author> R.J. Tarjan. </author> <title> Depth first search and linear graph algorithms. </title> <journal> SIAM Journal of Computing, </journal> <volume> 1(2) </volume> <pages> 146-160, </pages> <year> 1972. </year>
Reference-contexts: To determine the strongly connected components of a directed graph efficiently, all the vertices and edges of the graph must be visited in a systematic fashion. Perhaps the best algorithm to use is that of Tarjan <ref> [18] </ref>. This is a depth-first search (DFS) algorithm, which searches in the forward (deeper) direction as long as possible. Further details, including coding information, may be found in [6, 1].
Reference: [19] <author> H.C. Tijms. Q-lib: </author> <title> A software package for queueing models. </title> <editor> In William J. Stewart, editor, </editor> <title> Numerical Solution of Markov Chains, </title> <address> pages 691-692. </address> <publisher> Marcel Dekker Inc., </publisher> <address> New York, </address> <year> 1991. </year>
Reference-contexts: It incorporates a mechanism to handle rewards. To place XMARCA in context, we note that there are curently several software packages geared to the solution of queueing networks. These include QNAP2 [20], MGMtool [5], Panacea [12], and Q-lib <ref> [19] </ref>, to name but a few. Most packages for solving queueing networks do not include a Markov chain solver. Rather, they consist of implementations that evaluate analytical expressions for approximate or exact solutions. In some cases they also include simulations.
Reference: [20] <author> M. Veran and D. Potier. QNAP2: </author> <title> A portable environment for queueing systems modelling. </title> <editor> In D. Potier, editor, </editor> <booktitle> Modelling and Tools for Performance Analysis, </booktitle> <pages> pages 25-63. </pages> <publisher> Elsevier Science Publishers, </publisher> <year> 1985. </year>
Reference-contexts: It incorporates a mechanism to handle rewards. To place XMARCA in context, we note that there are curently several software packages geared to the solution of queueing networks. These include QNAP2 <ref> [20] </ref>, MGMtool [5], Panacea [12], and Q-lib [19], to name but a few. Most packages for solving queueing networks do not include a Markov chain solver. Rather, they consist of implementations that evaluate analytical expressions for approximate or exact solutions. In some cases they also include simulations.
Reference: [21] <author> Douglas A. </author> <title> Young The X Window System Programming and Applications with Xt - OSF/Motif Edition. </title> <publisher> Prentice-Hall, </publisher> <address> Englewood Cliffs, NJ, </address> <year> 1990. </year> <month> 23 </month>
Reference-contexts: We know of no other software package that incorporates these features. 2 System Requirements and Installation XMARCA was written using the Motif Widget Set for the X-Windows Interface, <ref> [21] </ref>. To compile XMARCA's source code, it is necessary to have X11 (revision 3 or higher) running on the target machine and to have the libraries and header files for both Motif and X11, [21]. XMARCA also requires a Fortran and a C compiler. <p> System Requirements and Installation XMARCA was written using the Motif Widget Set for the X-Windows Interface, <ref> [21] </ref>. To compile XMARCA's source code, it is necessary to have X11 (revision 3 or higher) running on the target machine and to have the libraries and header files for both Motif and X11, [21]. XMARCA also requires a Fortran and a C compiler. At North Carolina State University, XMARCA runs on a Sun SPARCstation 2 with 16 MB of RAM. 3 Using XMARCA XMARCA allows a user to build and analyze queueing network models with a user-friendly graphical interface.
References-found: 21

