URL: http://www.cs.utah.edu/~nrahn/thesis/thesis.ps
Refering-URL: http://www.cs.utah.edu/~nrahn/thesis/overview.html
Root-URL: 
Title: BORG: A SYSTEM FOR THE ASSIMILATION OF LEGACY CODE INTO DISTRIBUTED OBJECTS  
Author: by Nicholas Rahn 
Degree: A thesis submitted to the faculty of The University of Utah in partial fulfillment of the requirements for the degree of Master of Science  
Date: March 1997  
Affiliation: Department of Computer Science The University of Utah  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> ANSA. </author> <title> ANSA Reference Manual Release 0.03 (Draft). Alvey Advanced Network Systems Architecture Project, </title> <address> 24 Hills Road, Cambridge CB2 IJP, UK, </address> <year> 1987. </year>
Reference-contexts: The ability of an application to run in multiple processes benefits the user through scalability and composeability <ref> [1] </ref>. The individual processes that constitute a multi-process application can be thought of as objects interacting with one another to form a single application. These objects are a division of the application's work load into smaller, more manageable parts. Individually, the objects provide one particular service. <p> Some of this C++ code converts legacy system services into distributed object models and as such, replicates certain segments of the legacy code. Distributed object computing has many benefits including composeability and scalability <ref> [1] </ref>, collaboration, performance, and reliability [17]. The BORG system attempted to bring these advantages into the Alpha 1 Geometric Modeling and Manufacturing Software System.
Reference: [2] <author> Barr, A., Cohen, P., and Fiegenbaum, E. </author> <booktitle> The Handbook of Artificial Intelligence, </booktitle> <volume> vol. 4. </volume> <publisher> Addison-Wesley, </publisher> <year> 1989. </year>
Reference-contexts: CHAPTER 2 RELATED WORK The BORG System is based on concepts from artificial intelligence and distributed application programming environments. The "bulletin board" concept is similar to the AI HEARSAY-II blackboard system <ref> [2] </ref>, whereas the high-level communication architecture has its roots in distributed programming environments such as ACE [18], OLE [5], CORBA [9] and OpenDoc [11]. 2.1 Blackboard Systems Blackboard systems were first developed for the HEARSAY-II project between 1971 and 1976 at Carnegie-Mellon University [2]. <p> similar to the AI HEARSAY-II blackboard system <ref> [2] </ref>, whereas the high-level communication architecture has its roots in distributed programming environments such as ACE [18], OLE [5], CORBA [9] and OpenDoc [11]. 2.1 Blackboard Systems Blackboard systems were first developed for the HEARSAY-II project between 1971 and 1976 at Carnegie-Mellon University [2]. HEARSAY-II was a speech recognition system that used the blackboard approach to construct the meaning of a spoken sentence and perform the requested action.
Reference: [3] <author> Belisle, D. J. </author> <title> Omg standards for object-oriented programming. </title> <month> AIXpert (August </month> <year> 1993). </year>
Reference: [4] <author> Brando, T. </author> <title> Comparing dce and corba. </title> <type> Tech. Rep. </type> <institution> MP95B-93, The MITRE Corporation, </institution> <month> March </month> <year> 1995. </year>
Reference-contexts: Part of the 2.0 standard was the Internet Inter-ORB Protocol (IIOP) which allows ORBs produced by different vendors to interoperate. IIOP may have the effect of moving CORBA object technology down into the the operating sys 84 tems of workstations <ref> [4] </ref> which would provide worry free CORBA object interaction across all platforms, regardless of the ORB. Such industry support for the CORBA standard ensures the future of distributed object technology. With industry support will come improved CORBA implementations.
Reference: [5] <author> Brockschmidt, K. </author> <title> Inside OLE2. </title> <publisher> Microsoft Press, </publisher> <year> 1994. </year>
Reference-contexts: CHAPTER 2 RELATED WORK The BORG System is based on concepts from artificial intelligence and distributed application programming environments. The "bulletin board" concept is similar to the AI HEARSAY-II blackboard system [2], whereas the high-level communication architecture has its roots in distributed programming environments such as ACE [18], OLE <ref> [5] </ref>, CORBA [9] and OpenDoc [11]. 2.1 Blackboard Systems Blackboard systems were first developed for the HEARSAY-II project between 1971 and 1976 at Carnegie-Mellon University [2]. HEARSAY-II was a speech recognition system that used the blackboard approach to construct the meaning of a spoken sentence and perform the requested action. <p> Additionally, OLE allows programmers to define operations for an application that are accessible to other applications. For instance, a document containing 9 a spreadsheet table can send a macro to a spreadsheet program, requesting that it sort and recalculate the table <ref> [5] </ref>. The BORG System gleans from OLE the concept of separate objects that are combined to construct one document. The BORG System's individual service providers can be combined to form a large application.
Reference: [6] <author> Coulouris, G., and Dollimore, J. </author> <title> Distributed Systems: Concepts and Design. </title> <publisher> Addison-Wesley, </publisher> <year> 1988. </year>
Reference-contexts: With a host of machines at one's disposal, it is advantageous to "farm out" the work load of an application to other available machines, processing in separate parallel processes, parts of the application that can be executed independently <ref> [6] </ref>. The ability of an application to run in multiple processes benefits the user through scalability and composeability [1]. The individual processes that constitute a multi-process application can be thought of as objects interacting with one another to form a single application. <p> All of their actions should flow smoothly from one object to another, never concerning the users with the fact that the objects may be executing in separate processes on machines all over the world rather than contained in one large local process <ref> [6] </ref>. Whereas the user focuses only on the top level seamlessness of a distributed application, the programmer must be concerned with a broad spectrum of issues, ranging from low-level communication aspects such as sockets and marshaling, to the difficulties of high-level transparent interaction.
Reference: [7] <author> Guttman, M., and Matthews, J. R. </author> <title> The Object Technology Revolution. </title> <address> Schowalter, </address> <year> 1995. </year>
Reference-contexts: The Object Management Architecture (OMA)[3] is the central outline of the OMG's work, dividing all object systems into four constituent parts for which the OMG will propose standards. These areas are <ref> [7] </ref>: * Object Request Broker (ORB) * Object Services (OS) * Common Facilities (CF) * Application Objects (AO) The ORB is the central component of any object system, handling the communication between all objects in the system, regardless of their location, platform or implementation.
Reference: [8] <institution> IBM. Overview of som. </institution> <month> AIXpert (August </month> <year> 1995). </year>
Reference: [9] <author> Mowbray, T., and Zahavi, R. </author> <title> The Essential CORBA. </title> <publisher> John Wiley and Object Management Group, </publisher> <year> 1995. </year>
Reference-contexts: The "bulletin board" concept is similar to the AI HEARSAY-II blackboard system [2], whereas the high-level communication architecture has its roots in distributed programming environments such as ACE [18], OLE [5], CORBA <ref> [9] </ref> and OpenDoc [11]. 2.1 Blackboard Systems Blackboard systems were first developed for the HEARSAY-II project between 1971 and 1976 at Carnegie-Mellon University [2]. HEARSAY-II was a speech recognition system that used the blackboard approach to construct the meaning of a spoken sentence and perform the requested action.
Reference: [10] <author> Object Management Group. </author> <title> The common object request broker: Architecture and specification, revision 1.2. </title> <type> Tech. Rep. </type> <institution> OMG TC Document 93-12-43, The Object Management Group, </institution> <address> Framingham, MA, </address> <year> 1993. </year>
Reference-contexts: functionality engine's IDL description and generate a CORBA proxy object that is used for remote communication with the CORBA server containing the FEI. 4.2.1 Describing Functionality Engines in IDL IDL is a purely descriptive language which supports a subset of ANSI C++ with additional keywords introduced to support distribution concepts <ref> [10] </ref>. This section will discuss only selected parts of IDL that are generally relevant to describing functionality engines. Interested readers are referred to [10] for the complete grammar specification of IDL. Object-oriented interfaces are described in IDL using the interface construct. <p> 4.2.1 Describing Functionality Engines in IDL IDL is a purely descriptive language which supports a subset of ANSI C++ with additional keywords introduced to support distribution concepts <ref> [10] </ref>. This section will discuss only selected parts of IDL that are generally relevant to describing functionality engines. Interested readers are referred to [10] for the complete grammar specification of IDL. Object-oriented interfaces are described in IDL using the interface construct. An IDL interface contains the publicly accessible parts of an object-oriented interface. <p> An operation declaration "specifies the operations that the interface exports and the 24 format of each including operation name, the type of data returned, the types of all parameters of an operation, ...and contextual information which may affect method dispatch." <ref> [10, p.62] </ref> Operation declarations of an interface can be thought of as being equivalent to member function declarations of a C++ class with the addition of a few IDL specific keywords such as oneway, which specifies the operation's method of dispatch to be asynchronous (i.e., the operation will not wait for
Reference: [11] <author> Orfali, R., Harkey, D., and Edwards, J. </author> <title> The Essential Distributed Objects Survival Guide. </title> <publisher> John Wiley and Sons, </publisher> <year> 1995. </year>
Reference-contexts: The "bulletin board" concept is similar to the AI HEARSAY-II blackboard system [2], whereas the high-level communication architecture has its roots in distributed programming environments such as ACE [18], OLE [5], CORBA [9] and OpenDoc <ref> [11] </ref>. 2.1 Blackboard Systems Blackboard systems were first developed for the HEARSAY-II project between 1971 and 1976 at Carnegie-Mellon University [2]. HEARSAY-II was a speech recognition system that used the blackboard approach to construct the meaning of a spoken sentence and perform the requested action. <p> CI Labs is the owner and distributor of OpenDoc, a vendor-neutral standard for compound documents <ref> [11] </ref>. Compound documents are those fashioned with distributed, cross-platform component software. The component software are elements of a document such as text, graphics, spreadsheet cells, or buttons. The compound document scheme allows each of the components of the document to be edited "in place," simply by changing the focus.
Reference: [12] <author> Ousterhout, J. K. </author> <title> Tcl and the Tk Toolkit. </title> <publisher> Addison-Wesley, </publisher> <year> 1994. </year>
Reference-contexts: The BORG System uses Tcl/Tk <ref> [12] </ref> to produce graphical interfaces. Tcl/Tk (like any graphical interface system) requires a way to process events generated by the user. Normally this is done in an event loop running in the process's main thread of execution.
Reference: [13] <author> Piersol, K. </author> <title> A close-up of opendoc. </title> <journal> BYTE Magazine 19, </journal> <month> 3 (March </month> <year> 1994), </year> <pages> 183-4+. </pages>
Reference-contexts: OpenDoc supports an efficient compound document storage mechanism. The default storage subsystem is Bento, the standard container for multimedia interchange adopted by the Interactive Multimedia Association, but can be replaced with any other applicable storage system that implements the OpenDoc meta-format <ref> [13] </ref>. Additionally, OpenDoc supports scripting based on the Open Scripting Architecture (OSA) standard that allows application-independent scripting. The scripting feature permits component types to transparently use OSA compliant scripting languages in their user interface design. The Object Management Services of OpenDoc are based on the System Object Model (SOM)[8].
Reference: [14] <author> PostModern Computing. </author> <title> The ORBeline2.0 User's Guide. </title> <address> Mountain View, CA, </address> <year> 1995. </year>
Reference-contexts: The implementation of the internal structure of a CORBA proxy is dependant upon the CORBA implementation being used, but always provides transparent and seamless interaction between the client and the FEI. The BORG System uses ORBeline <ref> [14] </ref>, a CORBA implementation from PostModern Computing. 4.2.3 The Implementation of a Functionality Engine After the IDL interface has been defined for a functionality engine, the implementor of the functionality engine must provide a C++ class that implements the that interface. <p> The parameter, object name, can specify the name of the desired FEI, and the host name parameter can specify the name of the host machine where this FEI is executing. The CORBA::BindOptions parameter is discussed in <ref> [14] </ref>.
Reference: [15] <editor> Rich, E. </editor> <booktitle> Artificial Intelligence. </booktitle> <address> McCraw-Hill, </address> <year> 1983. </year> <month> 87 </month>
Reference-contexts: It consists of multiple levels that express the different stages of hypothesis formation for the given domain. Thus, for the HEARSAY-II project which was designed for speech recognition, the blackboard levels were the wave form 6 of the spoken command, sound segments, syllable classes, words, word sequences and phrases <ref> [15] </ref>. The control structure or scheduler determines when an individual knowledge source should become active, applying its knowledge to the current state of the blackboard.
Reference: [16] <author> Schmidt, D., Harrison, T., and Al-Shaer, E. </author> <title> Object-oriented components for high-speed network programming. </title> <booktitle> In Proceedings of the USENIX Converence on Object-Oriented Technologies (COOTS) (June 1995). </booktitle>
Reference-contexts: Such industry support for the CORBA standard ensures the future of distributed object technology. With industry support will come improved CORBA implementations. Current CORBA implementations are slower on the ttcp [20] protocol benchmarking tool for end-to-end data transfer throughput than are traditional C sockets <ref> [16] </ref>. This is mostly due to the overhead incurred by most CORBA implementations in areas such as fragmentation/reassembly, marshaling, and demarshaling [16]. For large data transfer systems such as those used in multimedia applications, increased overhead can result in diminished performance. <p> Current CORBA implementations are slower on the ttcp [20] protocol benchmarking tool for end-to-end data transfer throughput than are traditional C sockets <ref> [16] </ref>. This is mostly due to the overhead incurred by most CORBA implementations in areas such as fragmentation/reassembly, marshaling, and demarshaling [16]. For large data transfer systems such as those used in multimedia applications, increased overhead can result in diminished performance. Future advancements and enhancements to the CORBA standard and its implementations will certainly make it a viable option for all types of applications.
Reference: [17] <author> Schmidt, D., and Vinoski, S. </author> <note> Object interconnections (column 1). C++ Report (January 1995). </note>
Reference-contexts: Some of this C++ code converts legacy system services into distributed object models and as such, replicates certain segments of the legacy code. Distributed object computing has many benefits including composeability and scalability [1], collaboration, performance, and reliability <ref> [17] </ref>. The BORG system attempted to bring these advantages into the Alpha 1 Geometric Modeling and Manufacturing Software System. By defining legacy services and converting them into BORG functionality engines, Alpha 1 application programmers are able to utilize these services in a "plug and play" fashion.
Reference: [18] <author> Schmidt, D. C. </author> <title> The adaptive communication environment. </title> <booktitle> In 11th and 12th Sun User Group Conference (December and June 1993). </booktitle>
Reference-contexts: CHAPTER 2 RELATED WORK The BORG System is based on concepts from artificial intelligence and distributed application programming environments. The "bulletin board" concept is similar to the AI HEARSAY-II blackboard system [2], whereas the high-level communication architecture has its roots in distributed programming environments such as ACE <ref> [18] </ref>, OLE [5], CORBA [9] and OpenDoc [11]. 2.1 Blackboard Systems Blackboard systems were first developed for the HEARSAY-II project between 1971 and 1976 at Carnegie-Mellon University [2]. <p> General categories of C++ classes abstract the following low-level services <ref> [18] </ref>: * Event demultiplexing and service dispatching; * Local and remote IPC mechanisms; * Memory-mapped files; * System V IPC mechanisms; * Multi-threading and synchronization mechanisms; * Explicit dynamic linking mechanisms. Object classes from these categories may be combined in applications to obtain the required functionality.
Reference: [19] <author> Stroustrup, B. </author> <title> The C++ Programming Language, 2nd ed. </title> <publisher> Addison-Wesley, </publisher> <year> 1991. </year>
Reference: [20] <author> USNA. TTCP: </author> <title> A Test of TCP and UDP Performance, </title> <month> December </month> <year> 1995. </year>
Reference-contexts: Such industry support for the CORBA standard ensures the future of distributed object technology. With industry support will come improved CORBA implementations. Current CORBA implementations are slower on the ttcp <ref> [20] </ref> protocol benchmarking tool for end-to-end data transfer throughput than are traditional C sockets [16]. This is mostly due to the overhead incurred by most CORBA implementations in areas such as fragmentation/reassembly, marshaling, and demarshaling [16].
References-found: 20

