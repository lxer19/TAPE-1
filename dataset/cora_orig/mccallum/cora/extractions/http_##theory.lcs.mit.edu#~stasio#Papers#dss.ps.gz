URL: http://theory.lcs.mit.edu/~stasio/Papers/dss.ps.gz
Refering-URL: http://theory.lcs.mit.edu/~stasio/
Root-URL: 
Title: Robust Threshold DSS Signatures  
Author: Rosario Gennaro Stanisaw Jarecki Hugo Krawczyk and Tal Rabin 
Abstract: We present threshold DSS (Digital Signature Standard) signatures where the power to sign is shared by n players such that for a given parameter t &lt; n=2 any subset of 2t + 1 signers can collaborate to produce a valid DSS signature on any given message, but no subset of t corrupted players can forge a signature (in particular, cannot learn the signature key). In addition, we present a robust threshold DSS scheme that can also tolerate n=3 players who refuse to participate in the signature protocol. We can also endure n=4 maliciously faulty players that generate incorrect partial signatures at the time of signature computation. This results in a highly secure and resilient DSS signature system applicable to the protection of the secret signature key, the prevention of forgery, and increased system availability. Our results significantly improve over a recent result by Langford from CRYPTO'95 that presents threshold DSS signatures which can stand much smaller subsets of corrupted players, namely, t p n, and do not enjoy the robustness property. As in the case of Langford's result, our schemes require no trusted party. Our techniques apply to other threshold ElGamal-like signatures as well. We prove the security of our schemes solely based on the hardness of forging a regular DSS signature. 
Abstract-found: 1
Intro-found: 1
Reference: [AMV88] <editor> G.B. Agnew, R.C. Mullin, and S.A. Vanstone. </editor> <title> A secure public key protocol based on discrete exponentiation. In C.G. </title> <editor> Gunther, editor, </editor> <booktitle> Proc. EUROCRYPT 88, </booktitle> <pages> pages 159-166, </pages> <address> Berlin, 1988. </address> <publisher> Springer-Verlag. </publisher>
Reference-contexts: See [Lan95] for details. for threshold AMV-signature <ref> [AMV88] </ref> does achieve it).
Reference: [BGW88] <author> M. Ben-Or, S. Goldwasser, and A. Wigderson. </author> <title> Completeness Theorems for Noncrypto-graphic Fault-Tolerant Distributed Computations. </title> <booktitle> In Proc. 20th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 1-10, </pages> <year> 1988. </year>
Reference-contexts: In the following we will refer to these protocols as Joint-Shamir-RSS, Joint-Feldman-RSS or Joint-Uncond-Secure-RSS depending which of the secret sharing schemes is used. Joint Zero Secret Sharing. <ref> [BGW88] </ref> The output of this protocol will be used to randomize a polynomial without altering the constant term. Note that in the above Joint Random Secret Sharing protocol if one uses Feldman's VSS as the underlying scheme, it is possible to generate a random sharing of a publicly known value. <p> Problem 2: Multiplication of two secrets. Given two secrets u and v, which are both shared among the players, compute uv, while maintaining both of the original values secret (aside from the obvious information which is revealed from the result). The protocols of <ref> [BGW88, CCD88] </ref> give solutions to this problem, yet these protocols require cumbersome computations and zero-knowledge proofs in order to facilitate repetative multiplication. Even the simplified version of Rabin [Rab95] requires for the multiplication step a zero-knowledge proof of proper conduct. <p> In our solution we take advantage of the fact that in the computation tree of a DSS signature the multiplications are not sequential, namely, that there is never a need to multiply three (or more) numbers. Thus, we can employ a simplified version of <ref> [BGW88] </ref>, which computes the mulitplication of two numbers only. Given that u and v are each shared by a polynomial of degree t, each player can locally multiply his shares of u and v, and the result will be a share of uv on a polynomial of degree 2t.
Reference: [Boy86] <editor> C. Boyd. Digital Multisignatures. In H. Baker and F. Piper, editors, </editor> <booktitle> Cryptography and Coding, </booktitle> <pages> pages 241-246. </pages> <publisher> Claredon Press, </publisher> <year> 1986. </year>
Reference-contexts: In threshold schemes, multiple signatures are produced without an exposure or an explicit reconstruction of the secret key. Threshold signatures are a part of a general approach known as threshold cryptography which was introduced by the works of Boyd <ref> [Boy86] </ref>, Desmedt [Des88], and Desmedt and Frankel [DF90]. This approach has received considerable attention in the literature; we refer the reader to [Des94] for a survey of the work in this area.
Reference: [BW] <author> E. Berlekamp and L. Welch. </author> <title> Error correction of algebraic block codes. </title> <type> US Patent 4,633,470. </type>
Reference-contexts: In addition to these techniques we use many tools from other works, like verifiable secret sharing (both computational and information-theoretic versions), shared generation/distribution of secrets, rerandomization of secret shares, and more. For achieving the robustness of our schemes we apply error correcting techniques due to Berlekamp and Welch <ref> [BW] </ref> that achieve a very high rate of error correction, which in our scenario translates into supporting higher thresholds. We prove the security of our schemes assuming the infeasibility of forging a regular DSS signature. That is, our schemes are secure if and only if DSS is unforgeable. Organization. <p> As before s is computed from the appropriate shares. Whenever we reconstruct a secret, in order to detect bad shares contributed by malicious players we perform error-correcting using the Berlekamp and Welch decoder <ref> [BW] </ref>. As before randomization of polynomials is added in various places in order to hide possible partial information. <p> The polynomail can be computed by using the Berlekamp-Welch decoder <ref> [BW] </ref>. An important technical contribution of our paper is the simulation and the proof of the security of this protocol. We prove the following theorem: Theorem 8.
Reference: [CCD88] <author> D. Chaum, C. Crepeau, and I. Damgard. </author> <title> Multiparty Unconditionally Secure Protocols. </title> <booktitle> In Proc. 20th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 11-19, </pages> <year> 1988. </year>
Reference-contexts: Problem 2: Multiplication of two secrets. Given two secrets u and v, which are both shared among the players, compute uv, while maintaining both of the original values secret (aside from the obvious information which is revealed from the result). The protocols of <ref> [BGW88, CCD88] </ref> give solutions to this problem, yet these protocols require cumbersome computations and zero-knowledge proofs in order to facilitate repetative multiplication. Even the simplified version of Rabin [Rab95] requires for the multiplication step a zero-knowledge proof of proper conduct.
Reference: [Cha90] <author> D. Chaum. </author> <title> Zero-knowledge undeniable signatures. </title> <booktitle> In Proc. EUROCRYPT 90, </booktitle> <pages> pages 458-464. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <note> Lecture Notes in Computer Science No. 473. </note>
Reference-contexts: In order to overcome this difficulty we require the players to perform Chaum's zero-knowledge proof of equality of discrete-logs <ref> [Cha90] </ref> (originally designed in the context of undeniable signatures). The basic idea is that if two secrets a and b are shared with Feldman's VSS, then each player has a share c i = a i b i of c = ab.
Reference: [Des88] <author> Yvo Desmedt. </author> <title> Society and group oriented cryptography: A new concept. </title> <editor> In Carl Pomer-ance, editor, </editor> <booktitle> Proc. CRYPTO 87, </booktitle> <pages> pages 120-127. </pages> <publisher> Springer-Verlag, </publisher> <year> 1988. </year> <note> Lecture Notes in Computer Science No. 293. </note>
Reference-contexts: In threshold schemes, multiple signatures are produced without an exposure or an explicit reconstruction of the secret key. Threshold signatures are a part of a general approach known as threshold cryptography which was introduced by the works of Boyd [Boy86], Desmedt <ref> [Des88] </ref>, and Desmedt and Frankel [DF90]. This approach has received considerable attention in the literature; we refer the reader to [Des94] for a survey of the work in this area.
Reference: [Des94] <author> Yvo G. Desmedt. </author> <title> Threshold cryptography. </title> <journal> European Transactions on Telecommunications, </journal> <volume> 5(4) </volume> <pages> 449-457, </pages> <month> July </month> <year> 1994. </year>
Reference-contexts: Threshold signatures are a part of a general approach known as threshold cryptography which was introduced by the works of Boyd [Boy86], Desmedt [Des88], and Desmedt and Frankel [DF90]. This approach has received considerable attention in the literature; we refer the reader to <ref> [Des94] </ref> for a survey of the work in this area. Particular examples of solutions to threshold signatures can be found in [DF92, SDFY94] for the case of RSA signatures, and [Har94, Lan95] for ElGamal-type of signatures.
Reference: [DF90] <author> Yvo Desmedt and Yair Frankel. </author> <title> Threshold cryptosystems. </title> <editor> In G. Brassard, editor, </editor> <booktitle> Proc. CRYPTO 89, </booktitle> <pages> pages 307-315. </pages> <publisher> Springer-Verlag, </publisher> <year> 1990. </year> <note> Lecture Notes in Computer Science No. 435. </note>
Reference-contexts: In threshold schemes, multiple signatures are produced without an exposure or an explicit reconstruction of the secret key. Threshold signatures are a part of a general approach known as threshold cryptography which was introduced by the works of Boyd [Boy86], Desmedt [Des88], and Desmedt and Frankel <ref> [DF90] </ref>. This approach has received considerable attention in the literature; we refer the reader to [Des94] for a survey of the work in this area.
Reference: [DF92] <author> Y. Desmedt and Y. Frankel. </author> <title> Shared generation of authenticators and signatures. </title> <editor> In J. Feigenbaum, editor, </editor> <booktitle> Proc. CRYPTO 91, </booktitle> <pages> pages 457-469. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <note> Lecture Notes in Computer Science No. 576. </note>
Reference-contexts: This approach has received considerable attention in the literature; we refer the reader to [Des94] for a survey of the work in this area. Particular examples of solutions to threshold signatures can be found in <ref> [DF92, SDFY94] </ref> for the case of RSA signatures, and [Har94, Lan95] for ElGamal-type of signatures. In this work we present a threshold signature system for DSS, the Digital Signature Standard [fST91].
Reference: [ElG85] <author> T. ElGamal. </author> <title> A public key cryptosystem and a signature scheme based on discrete logarithms. </title> <journal> IEEE Trans. Info. Theory, </journal> <volume> IT 31, </volume> <year> 1985. </year>
Reference-contexts: In the final version of the paper we will present some additional results, including the application of our techniques to solving threshold signatures for other discrete-log based signatures <ref> [ElG85, NR94, HPM94] </ref>. We will also show that our solutions for robust threshold DSS signatures can also be easily proactivized by proactive secret sharing of the signature key [HJKY95]. Technical Overview. The threshold DSS signatures schemes need to deal with two technical difficulties. <p> Section 6 introduces the basic building blocks of our solutions. Section 7 presents our secure threshold DSS signatures, and Section 8 the robust version of this solution. 2 The Digital Signature Standard (DSS) The Digital Signature Standard (DSS) [fST91] is a signature scheme based on the El-Gamal <ref> [ElG85] </ref> and Schnorr signature schemes [Sch91], which was adopted as the US standard digital signature algorithm. In our description of the DSS protocol we follow the notation introduced in [Lan95], which differs from the original presentation of [fST91] by switching k and k 1 .
Reference: [Fel87] <author> P. Feldman. </author> <title> A Practical Scheme for Non-Interactive Verifiable Secret Sharing. </title> <booktitle> In Proc. 28th IEEE Symp. on Foundations of Comp. Science, </booktitle> <pages> pages 427-437, </pages> <year> 1987. </year>
Reference-contexts: By using error-correcting techniques (as first suggested in [MS81]) the protocol can also tolerate f malicious faults (among the players, excluding the dealer) if n t + 2f + 1. In the following we will refer to this protocol by Shamir-SS. Feldman's Verifiable Secret Sharing. <ref> [Fel87] </ref>. This protocol can tolerate up to n1 2 malicious faults including the dealer.
Reference: [FM88] <author> P. Feldman and S. Micali. </author> <title> An Optimal Algorithm for Synchronous Byzantine Agreement. </title> <booktitle> In Proc. 20th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 148-161, </pages> <year> 1988. </year>
Reference-contexts: Notice that the value of the secret is only computationally secure, indeed the value g a 0 = g mod p is leaked. In the following we will refer to this protocol by Feldman-VSS. Unconditionally Secure Verifiable Secret Sharing. <ref> [FM88, Ped91b] </ref>. In contrast to Feldman's VSS protocol, this protocol provides information theoretic secrecy for the shared secret. This is later required by some of our techniques in order to achieve provable security. There are two possible implementation of this primitive. <p> In contrast to Feldman's VSS protocol, this protocol provides information theoretic secrecy for the shared secret. This is later required by some of our techniques in order to achieve provable security. There are two possible implementation of this primitive. One is by Feldman and Micali <ref> [FM88] </ref> and is based on a bivariate polynomial sharing. Each player receives a share as in Shamir's case plus some extra information that will allow him to check (by exchanging messages with the other players) that the shares do define a polynomial. This implementation tolerates n1 3 malicious faults.
Reference: [fST91] <institution> National Institute for Standards and Technology. Digital Signature Standard (DSS). </institution> <type> Technical Report 169, </type> <month> August 30 </month> <year> 1991. </year>
Reference-contexts: Particular examples of solutions to threshold signatures can be found in [DF92, SDFY94] for the case of RSA signatures, and [Har94, Lan95] for ElGamal-type of signatures. In this work we present a threshold signature system for DSS, the Digital Signature Standard <ref> [fST91] </ref>. The importance of providing threshold solutions for signatures schemes used in practice, is that those systems are the ones that will be deployed in the real world and hence they are the ones that require the real protection. Threshold DSS signatures schemes were recently studied by Langford [Lan95]. <p> Section 6 introduces the basic building blocks of our solutions. Section 7 presents our secure threshold DSS signatures, and Section 8 the robust version of this solution. 2 The Digital Signature Standard (DSS) The Digital Signature Standard (DSS) <ref> [fST91] </ref> is a signature scheme based on the El-Gamal [ElG85] and Schnorr signature schemes [Sch91], which was adopted as the US standard digital signature algorithm. In our description of the DSS protocol we follow the notation introduced in [Lan95], which differs from the original presentation of [fST91] by switching k and <p> Digital Signature Standard (DSS) <ref> [fST91] </ref> is a signature scheme based on the El-Gamal [ElG85] and Schnorr signature schemes [Sch91], which was adopted as the US standard digital signature algorithm. In our description of the DSS protocol we follow the notation introduced in [Lan95], which differs from the original presentation of [fST91] by switching k and k 1 . This change will allow a clearer presentation of our threshold DSS signature protocols. Key Generation. <p> In the following we will refer to this protocol as Joint-Zero-SS. 5 DSS Threshold Key-generation without Trusted Party An instance (p; q; g) of DSS can be generated using a public procedure (e.g., as specified in <ref> [fST91] </ref>), or using randomness which is jointly provided by the trustees. To generate a pair of public and private keys in a distributed setting without a trusted party, we use a joint verifiable secret sharing protocol, following the protocol of Pedersen [Ped91a].
Reference: [Gen96] <author> Rosario Gennaro. </author> <title> Theory and practice of verifiable secret sharing. </title> <type> Ph.D. thesis, </type> <institution> Mas-sachusetts Institute of Technology, </institution> <note> to appear, </note> <year> 1996. </year>
Reference-contexts: A complete formalization of the definition of secure threshold signature schemes can be found in <ref> [Gen96] </ref>. 4 Existing Tools Here we briefly recall a few known techniques that we use in our solutions. Shamir's Secret Sharing. [Sha79] Given a secret , choose at random a polynomial f (x) of degree t, such that f (0) = .
Reference: [GMR88] <author> Shafi Goldwasser, Silvio Micali, and Ronald L. Rivest. </author> <title> A digital signature scheme secure against adaptive chosen-message attacks. </title> <journal> SIAM J. Computing, </journal> <volume> 17(2) </volume> <pages> 281-308, </pages> <month> April </month> <year> 1988. </year>
Reference-contexts: This is the analogous of existential unforgeability under chosen message attack. Following <ref> [GMR88] </ref> one can also define weaker notions of unforgeability. In order to achieve unforgeability we use the concept of simulatable adversary view [GMR89, MR92]. <p> In other words, we could allow the adversary to gain knowledge provided that such knowledge is useless for forging. However our stronger definition subsumes this specific goal and provides a proof of security for any of the flavors of signature security as listed in <ref> [GMR88] </ref>. Indeed one can prove that if the underlying signature scheme S is unforgeable (in any of the flavors of [GMR88]) and T S is simulatable then T S is unforgeable (with the same flavor of S) Robustness means that the protocol will compute a correct output even in the presence <p> However our stronger definition subsumes this specific goal and provides a proof of security for any of the flavors of signature security as listed in <ref> [GMR88] </ref>. Indeed one can prove that if the underlying signature scheme S is unforgeable (in any of the flavors of [GMR88]) and T S is simulatable then T S is unforgeable (with the same flavor of S) Robustness means that the protocol will compute a correct output even in the presence of halting or malicious faults.
Reference: [GMR89] <author> S. Goldwasser, S. Micali, and C. Rackoff. </author> <title> The knowledge complexity of interactive proof-systems. </title> <journal> SIAM. J. Computing, </journal> <volume> 18(1) </volume> <pages> 186-208, </pages> <month> February </month> <year> 1989. </year>
Reference-contexts: This is the analogous of existential unforgeability under chosen message attack. Following [GMR88] one can also define weaker notions of unforgeability. In order to achieve unforgeability we use the concept of simulatable adversary view <ref> [GMR89, MR92] </ref>. Intuitively, this means that the adversary who sees all the information of the corrupted players and the signature of m, could generate by itself all the other public information produced by the protocol Thresh-Sig.
Reference: [Har94] <author> L. Harn. </author> <title> Group oriented (t,n) digital signature scheme. </title> <journal> IEEE Proc.-Comput.Digit.Tech, </journal> <volume> 141(5), </volume> <month> Sept </month> <year> 1994. </year>
Reference-contexts: This approach has received considerable attention in the literature; we refer the reader to [Des94] for a survey of the work in this area. Particular examples of solutions to threshold signatures can be found in [DF92, SDFY94] for the case of RSA signatures, and <ref> [Har94, Lan95] </ref> for ElGamal-type of signatures. In this work we present a threshold signature system for DSS, the Digital Signature Standard [fST91]. <p> Threshold DSS signatures schemes were recently studied by Langford [Lan95]. DSS signatures turn out to be less amenable to sharing techniques than RSA or even other ElGamal-type of signatures, e.g., see <ref> [Har94] </ref>. <p> Harn's solution <ref> [Har94] </ref> 1 Langford presents some additional schemes but of more limited applicability: a 2-out-of-n scheme that withstands up to one faulty party, and a general t-out-of-n scheme that uses pre-computed tables of one-time shares and that requires a higher level of trust for the generation of these tables.
Reference: [HJKY95] <author> Amir Herzberg, Stanislaw Jarecki, Hugo Krawczyk, and Moti Yung. </author> <title> Proactive secret sharing, or: How to cope with perpetual leakage. </title> <booktitle> In Proc. CRYPTO 95. </booktitle> <publisher> Springer-Verlag, </publisher> <month> August </month> <year> 1995. </year> <note> Lecture Notes in Computer Science No. 963. </note>
Reference-contexts: We will also show that our solutions for robust threshold DSS signatures can also be easily proactivized by proactive secret sharing of the signature key <ref> [HJKY95] </ref>. Technical Overview. The threshold DSS signatures schemes need to deal with two technical difficulties.
Reference: [HPM94] <author> P. Horster, H. Petersen, and M. Michels. </author> <title> Meta-elgamal signatures schemes. </title> <booktitle> In 2nd ACM Conference on Computer and Communications Security, </booktitle> <pages> pages 96-107, </pages> <year> 1994. </year>
Reference-contexts: In the final version of the paper we will present some additional results, including the application of our techniques to solving threshold signatures for other discrete-log based signatures <ref> [ElG85, NR94, HPM94] </ref>. We will also show that our solutions for robust threshold DSS signatures can also be easily proactivized by proactive secret sharing of the signature key [HJKY95]. Technical Overview. The threshold DSS signatures schemes need to deal with two technical difficulties.
Reference: [Lan95] <author> S. Langford. </author> <title> Threshold dss signatures without a trusted party. </title> <booktitle> In Crypto'95, </booktitle> <pages> pages 397-409. </pages> <publisher> Springer-Verlag, </publisher> <year> 1995. </year> <note> Lecture Notes in Computer Science No. 963. </note>
Reference-contexts: This approach has received considerable attention in the literature; we refer the reader to [Des94] for a survey of the work in this area. Particular examples of solutions to threshold signatures can be found in [DF92, SDFY94] for the case of RSA signatures, and <ref> [Har94, Lan95] </ref> for ElGamal-type of signatures. In this work we present a threshold signature system for DSS, the Digital Signature Standard [fST91]. <p> The importance of providing threshold solutions for signatures schemes used in practice, is that those systems are the ones that will be deployed in the real world and hence they are the ones that require the real protection. Threshold DSS signatures schemes were recently studied by Langford <ref> [Lan95] </ref>. DSS signatures turn out to be less amenable to sharing techniques than RSA or even other ElGamal-type of signatures, e.g., see [Har94]. <p> In our work we present threshold DSS signature schemes where in order to achieve a security threshold t we need 2t + 1 active signers during signature computation. In addition, we improve on <ref> [Lan95] </ref>, by providing a robust threshold signature scheme for DSS, which can withstand the participation of dishonest signers during the signature computation operation. Namely, we provide with a mechanism that succeeds in constructing a valid signature even if the partial signatures contributed by some of the signers are incorrect. <p> Namely, we provide with a mechanism that succeeds in constructing a valid signature even if the partial signatures contributed by some of the signers are incorrect. The solution in <ref> [Lan95] </ref> for DSS does not enjoy this property. <p> See <ref> [Lan95] </ref> for details. for threshold AMV-signature [AMV88] does achieve it). <p> This is an important property achieved by some other ElGamal based threshold signature schemes (including the DSS solution in <ref> [Lan95] </ref>), but not known for threshold RSA signatures. In the final version of the paper we will present some additional results, including the application of our techniques to solving threshold signatures for other discrete-log based signatures [ElG85, NR94, HPM94]. <p> Combining shares of two secrets, a and b, into shares of the product of these secrets, ab; and producing shares for a secret a given the shares of its reciprocal a 1 (computations are over a field Z q ). Langford <ref> [Lan95] </ref> solves both problems by presenting a multiplicative version of secret sharing that results in polynomials of degree O (t 2 ); this requires a high number of active signers for signature computation and allows for only a small threshold. <p> In our description of the DSS protocol we follow the notation introduced in <ref> [Lan95] </ref>, which differs from the original presentation of [fST91] by switching k and k 1 . This change will allow a clearer presentation of our threshold DSS signature protocols. Key Generation.
Reference: [MR92] <author> S. Micali and P. Rogaway. </author> <title> Secure computation. </title> <editor> In J. Feigenbaum, editor, </editor> <booktitle> Proc. CRYPTO 91, </booktitle> <pages> pages 392-404. </pages> <publisher> Springer-Verlag, </publisher> <year> 1992. </year> <note> Lecture Notes in Computer Science No. 576. </note>
Reference-contexts: This is the analogous of existential unforgeability under chosen message attack. Following [GMR88] one can also define weaker notions of unforgeability. In order to achieve unforgeability we use the concept of simulatable adversary view <ref> [GMR89, MR92] </ref>. Intuitively, this means that the adversary who sees all the information of the corrupted players and the signature of m, could generate by itself all the other public information produced by the protocol Thresh-Sig.
Reference: [MS81] <author> R. McEliece and D. Sarwate. </author> <title> On sharing secrets and reed-solomon codes. </title> <journal> Communications of the ACM, </journal> <volume> 24(9) </volume> <pages> 583-584, </pages> <month> September </month> <year> 1981. </year>
Reference-contexts: This protocol generates no public output. It can tolerate t eavesdropping faults if n t + 1 and, additionally, t halting faults if n 2t + 1. By using error-correcting techniques (as first suggested in <ref> [MS81] </ref>) the protocol can also tolerate f malicious faults (among the players, excluding the dealer) if n t + 2f + 1. In the following we will refer to this protocol by Shamir-SS. Feldman's Verifiable Secret Sharing. [Fel87].
Reference: [NR94] <author> K. Nyberg and R. Rueppel. </author> <title> Message recovery for signature schemes based on the discrete logarithm problem. </title> <booktitle> In Proc. EUROCRYPT 94, </booktitle> <pages> pages 175-190, </pages> <year> 1994. </year>
Reference-contexts: In the final version of the paper we will present some additional results, including the application of our techniques to solving threshold signatures for other discrete-log based signatures <ref> [ElG85, NR94, HPM94] </ref>. We will also show that our solutions for robust threshold DSS signatures can also be easily proactivized by proactive secret sharing of the signature key [HJKY95]. Technical Overview. The threshold DSS signatures schemes need to deal with two technical difficulties.
Reference: [Ped91a] <author> T. Pedersen. </author> <title> Distributed provers with applications to undeniable signatures. </title> <booktitle> In Proc. EUROCRYPT 91, </booktitle> <year> 1991. </year>
Reference-contexts: The scheme tolerates n1 2 malicious faults. Both implementations can be used in our main protocol. In the following we will refer to this protocol as Uncond-Secure-VSS. Joint Random Secret Sharing. <ref> [Ped91a, Ped91b] </ref>. A Joint Random Secret Sharing scheme is a Secret Sharing scheme which is not carried out by a single dealer, and where the secret is not known to any one player. <p> To generate a pair of public and private keys in a distributed setting without a trusted party, we use a joint verifiable secret sharing protocol, following the protocol of Pedersen <ref> [Ped91a] </ref>. That is the players run an execution of Joint-Feldman-RSS (Section 4).
Reference: [Ped91b] <author> T. Pedersen. </author> <title> Non-interactive and information-theoretic secure verifiable secret sharing. </title> <booktitle> In Proc. CRYPTO 91, </booktitle> <pages> pages 129-140, </pages> <year> 1991. </year>
Reference-contexts: Notice that the value of the secret is only computationally secure, indeed the value g a 0 = g mod p is leaked. In the following we will refer to this protocol by Feldman-VSS. Unconditionally Secure Verifiable Secret Sharing. <ref> [FM88, Ped91b] </ref>. In contrast to Feldman's VSS protocol, this protocol provides information theoretic secrecy for the shared secret. This is later required by some of our techniques in order to achieve provable security. There are two possible implementation of this primitive. <p> Each player receives a share as in Shamir's case plus some extra information that will allow him to check (by exchanging messages with the other players) that the shares do define a polynomial. This implementation tolerates n1 3 malicious faults. Another possible implementation is the one by Pedersen <ref> [Ped91b] </ref>. In this implementaiton the private information of player P i is the value i such that ( 1 ; : : : ; n ) (t;n) ! mod p. <p> The scheme tolerates n1 2 malicious faults. Both implementations can be used in our main protocol. In the following we will refer to this protocol as Uncond-Secure-VSS. Joint Random Secret Sharing. <ref> [Ped91a, Ped91b] </ref>. A Joint Random Secret Sharing scheme is a Secret Sharing scheme which is not carried out by a single dealer, and where the secret is not known to any one player.
Reference: [Rab95] <author> M. Rabin. </author> <title> A Simplification Approach to Distributed Multiparty Computations. </title> <type> personal communication, </type> <year> 1995. </year>
Reference-contexts: The protocols of [BGW88, CCD88] give solutions to this problem, yet these protocols require cumbersome computations and zero-knowledge proofs in order to facilitate repetative multiplication. Even the simplified version of Rabin <ref> [Rab95] </ref> requires for the multiplication step a zero-knowledge proof of proper conduct. In our solution we take advantage of the fact that in the computation tree of a DSS signature the multiplications are not sequential, namely, that there is never a need to multiply three (or more) numbers.
Reference: [Sch91] <author> C. P. Schnorr. </author> <title> Efficient signature generation by smart cards. </title> <journal> Journal of Cryptology, </journal> <volume> 4 </volume> <pages> 161-174, </pages> <year> 1991. </year>
Reference-contexts: Section 7 presents our secure threshold DSS signatures, and Section 8 the robust version of this solution. 2 The Digital Signature Standard (DSS) The Digital Signature Standard (DSS) [fST91] is a signature scheme based on the El-Gamal [ElG85] and Schnorr signature schemes <ref> [Sch91] </ref>, which was adopted as the US standard digital signature algorithm. In our description of the DSS protocol we follow the notation introduced in [Lan95], which differs from the original presentation of [fST91] by switching k and k 1 .
Reference: [SDFY94] <author> Alredo De Santis, Yvo Desmedt, Yair Frankel, and Moti Yung. </author> <title> How to share a function securely. </title> <booktitle> In Proc. 26th ACM Symp. on Theory of Computing, </booktitle> <pages> pages 522-533, </pages> <address> Santa Fe, </address> <year> 1994. </year>
Reference-contexts: This approach has received considerable attention in the literature; we refer the reader to [Des94] for a survey of the work in this area. Particular examples of solutions to threshold signatures can be found in <ref> [DF92, SDFY94] </ref> for the case of RSA signatures, and [Har94, Lan95] for ElGamal-type of signatures. In this work we present a threshold signature system for DSS, the Digital Signature Standard [fST91].

References-found: 29

