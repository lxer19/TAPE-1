URL: ftp://ftp.cse.ogi.edu/pub/esr/reports/hawaii.ps.gz
Refering-URL: http://www.cse.ogi.edu/~calton/publication.html
Root-URL: http://www.cse.ogi.edu
Email: email: pam@cs.ust.hk  email: calton@cse.ogi.edu  
Title: Asynchronous Consistency Restoration under Epsilon Serializability  
Author: Pamela Drew Calton Pu 
Address: Hong Kong  P.O. Box 91000 Portland, OR 97291-1000  
Affiliation: Dept. of Computer Science Hong Kong University of Science and Technology Clear Water Bay, Kowloon,  Dept. of Computer Science and Engineering Oregon Graduate Institute  
Abstract: Many database applications tolerate a certain amount of data inconsistency to gain increased concurrent processing and to accommodate real-world constraints. This paper describes how inconsistency can be modeled in a database and managed with consistency restoration methods. The correctness criterion for the maintenance of inconsistency is epsilon serializability (ESR). An informal notation to characterize inconsistency and several consistency restoration techniques are described. 
Abstract-found: 1
Intro-found: 1
Reference: [1] <author> R. Alonso, D. Barbara, and H. Garcia-Molina. </author> <title> Data caching issues in an information retrieval systems. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 15(3) </volume> <pages> 359-384, </pages> <month> September </month> <year> 1990. </year>
Reference-contexts: Eventual consistency and ESR both provide asynchronous processing with an adjustable inconsistency tolerance. The difference is that ESR is defined for general asynchronous TP with families of ADC and ACR methods. An example of asynchronous replication methods is Quasi-Copies <ref> [1] </ref>. Different inconsistency constraints such as time delay can be specified by the user and the system will propagate updates to maintain copy consistency accordingly. ESR can be used to model ETs read Page 8 ing quasi-copies, since the inconsistency speci-fications are similar.
Reference: [2] <author> P.A. Bernstein, V. Hadzilacos, and N. Good-man. </author> <title> Concurrency Control and Recovery in Database Systems. </title> <publisher> Addison-Wesley Publishing Company, </publisher> <address> first edition, </address> <year> 1987. </year>
Reference-contexts: transaction processing provides the update support in classic databases, but on-line transaction processing does not scale up to multidatabases in terms of performance (increased level of concurrency), availability, and execution autonomy, due to its requirement that all distributed transactions must be atomic [8] according to the serializability (SR) correctness criterion <ref> [2, 16] </ref>. Asynchronous transaction processing [20] alleviates these limitations of serializability. A convenient foundation for asynchronous transaction processing is epsilon serializability (ESR) [22, 18]. <p> Transactions may be updates that contain at least one Write or queries that are read-only. Our terminology follows the standard model of conflict-based serializability <ref> [2] </ref>. Two operations are said to conflict if at least one of them is a Write, so we have read-write (R/W) and write-write (W/W) conflicts. Each pair of conflicting operations establishes a dependency. Concurrency control methods are algorithms that preserve SR (e.g., two-phase locking) in scheduling database operations. <p> Each pair of conflicting operations establishes a dependency. Concurrency control methods are algorithms that preserve SR (e.g., two-phase locking) in scheduling database operations. A well known way to show the correctness of concur-rency control methods uses serialization graph (SG), where each arc represents the precede relation <ref> [2] </ref>.
Reference: [3] <author> A.D. Birrell, R. Levin, R.M. Needham, and M.D. Schroeder. Grapevine: </author> <title> An exercise in distributed computing. </title> <journal> Communications of ACM, </journal> <volume> 25(4) </volume> <pages> 260-274, </pages> <month> April </month> <year> 1982. </year>
Reference-contexts: In these cases, an independent source of consistent data is available. From time to time the consistent data is used to overwrite potentially inconsistent data. The first important example of this method is the propagation of replica updates in primary copy methods, such as Grapevine <ref> [3] </ref>. Since all the updates are performed first in the primary copy, the secondary copies may be allowed to diverge (within bounds specified by each distributed ET). 5 Related Work Besides ESR, notions of correctness weaker than SR have been proposed.
Reference: [4] <author> P. Drew, C. Pu, and S.W. Chen. </author> <title> Asynchronous consistency restoration under epsilon serializ-ability. </title> <type> Technical Report OGI-CSE-93-004, </type> <institution> Department of Computer Science and Engineering, Oregon Graduate Institute, </institution> <year> 1993. </year> <note> Also available as tech. report HKUST-CS93-002, </note> <institution> Department of Computer Science, Hong Kong University of Science and Technology. </institution>
Reference-contexts: In the second approach, semantics-based compensating transactions can be created specifically to reduce inconsistency in the data state. These and the following methods are omitted here due to space constraints and can be found in the full paper <ref> [4] </ref>. In a third ACR method, we can create a hybrid of the method based on classic recovery from Section 4.2 and the method for compensating transactions described in Section 4.3. In this hybrid model, we use compensating transactions as the basic TP paradigm. <p> Starting from the definition of inconsistency (e.g., in terms of database state space geometric properties), through the design of divergence control and consistency restoration, ending with the policies to invoke consistency restoration, we will formalize the notation and describe the algorithms in more detail <ref> [4] </ref>.
Reference: [5] <author> W. Du and A. Elmagarmid. </author> <title> Quasi serializ-ability: a correctness criterion for global con-currency control in InterBase. </title> <booktitle> In Proceedings of the International Conference on Very Large Data Bases, </booktitle> <pages> pages 347-355, </pages> <address> Amsterdam, The Netherlands, </address> <month> August </month> <year> 1989. </year>
Reference-contexts: As an enchancement to ESR algorithms, Escrow methods may be used to sharpen the estimate in the inconsistency counters when appropriate operators are known. Quasi-serializability (QSR) has been proposed <ref> [5] </ref> as an abstract correctness criterion for a multidatabase environment. QSR specifies that local databases and global schedulers should maintain SR, but isolates a global sched-uler from the local schedulers. QSR is well-defined and easy to implement.
Reference: [6] <author> H. Garcia-Molina. </author> <title> Using semantic knowledge for transactions processing in a distributed database. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 8(2) </volume> <pages> 186-213, </pages> <month> June </month> <year> 1983. </year>
Reference-contexts: However, its applicability is limited in the trade-off between consistency and performance its global serial izability requirement. At the same time, unbounded inconsistency may be found when we consider the global history and the local histories together. Garcia-Molina et al. [7] proposed sagas that use semantic atomicity <ref> [6] </ref> which rely on transaction semantics to define correctness. Sagas differ from ESR because an unlimited amount of inconsistency (revealed before a compensation) may propagate and persist in the database. Levy et al [14] defined relaxed atomic-ity to model non-atomic transactions similar to sagas.
Reference: [7] <author> H. Garcia-Molina and K. Salem. Sagas. </author> <booktitle> In Proceedings of ACM SIGMOD Conference on Management of Data, </booktitle> <pages> pages 249-259, </pages> <month> May </month> <year> 1987. </year>
Reference-contexts: T 3 would be aborted or delayed until the ACR had reduced the inconsistency by undoing the effects of T 2 . 4.3 Other CR Methods Semantics-based compensation transaction management has been proposed as a way to reduce the rollback overhead of sophisticated update operations. Sagas <ref> [7] </ref> and Compensating transactions [12] are good examples. There are at least two ways that semantic-based compensation strategies can be extended effectively with ESR to allow more concurrency and reduce rollback costs. In one approach, ESR limits can be used to determine whether a compensation is legal. <p> QSR is well-defined and easy to implement. However, its applicability is limited in the trade-off between consistency and performance its global serial izability requirement. At the same time, unbounded inconsistency may be found when we consider the global history and the local histories together. Garcia-Molina et al. <ref> [7] </ref> proposed sagas that use semantic atomicity [6] which rely on transaction semantics to define correctness. Sagas differ from ESR because an unlimited amount of inconsistency (revealed before a compensation) may propagate and persist in the database.
Reference: [8] <author> J. Gray and A. Reuter. </author> <title> Transaction Processing: Concepts and Techniques. </title> <publisher> Morgan Kaufmann Publishers, </publisher> <year> 1993. </year> <pages> Page 9 </pages>
Reference-contexts: Traditional on-line transaction processing provides the update support in classic databases, but on-line transaction processing does not scale up to multidatabases in terms of performance (increased level of concurrency), availability, and execution autonomy, due to its requirement that all distributed transactions must be atomic <ref> [8] </ref> according to the serializability (SR) correctness criterion [2, 16]. Asynchronous transaction processing [20] alleviates these limitations of serializability. A convenient foundation for asynchronous transaction processing is epsilon serializability (ESR) [22, 18].
Reference: [9] <author> J.N. Gray, R.A. Lorie, </author> <title> G.R. Putzolu, and I.L. Traiger. Granularity of locks and degrees of consistency in a shared data base. </title> <booktitle> In Proceedings of the IFIP Working Conference on Modeling of Data Base Management Systems, </booktitle> <pages> pages 1-29, </pages> <year> 1979. </year>
Reference-contexts: Since all the updates are performed first in the primary copy, the secondary copies may be allowed to diverge (within bounds specified by each distributed ET). 5 Related Work Besides ESR, notions of correctness weaker than SR have been proposed. Gray's different degrees of consistency <ref> [9] </ref>, offers an example of Page 7 a coarse spectrum of consistency. Degree 3 con-sistency is equivalent to SR, but degree 2 consistency offers higher concurrency for queries| at the cost of reduced consistency| since updates are allowed to "dirty" data already read by queries.
Reference: [10] <author> T. Haerder and A. Reuter. </author> <title> Principles of transaction-oriented database recovery. </title> <journal> ACM Computing Surveys, </journal> <volume> 15(4) </volume> <pages> 287-317, </pages> <month> December </month> <year> 1983. </year>
Reference-contexts: a synchronous consistency restoration based on a classical recovery scheme, (2) some alternative asynchronous schemes based on a model of compensating transactions, and, (3) a consistency restoration method based on independent updates. 4.2 CR Based on Classic Recovery A model of inconsistency repair based on Read/Write compensations (REDO and UNDO) <ref> [10] </ref> consists of three steps. First, a specific operation or event is determined to have introduced some inconsistency. In a classic TP environment, these events include site failures and erroneous TP.
Reference: [11] <author> M. Hsu and A. Silberschatz. </author> <title> Unilateral commit: A new paradigm for reliable distributed transaction processing. </title> <booktitle> In Proceedings of the Seventh International Conference on Data Engineering, </booktitle> <address> Kobe, Japan, </address> <month> February </month> <year> 1990. </year>
Reference-contexts: ESR also allows a larger number of execution histories. The Polarized Protocol, for example, does not allow global state from an incomplete transaction to be seen by other transactions. An implementation issue in asynchronous TP is to guarantee uniform outcome of distributed transactions running asynchronously. Unilateral Commit <ref> [11] </ref> is a protocol that uses reliable message transmission to guarantee that a uniform decision is correctly carried out. Optimistic Commit [13] is a protocol that uses Compensating Transactions [12] to undo the effects of partial results to reach a uniform decision.
Reference: [12] <author> H. Korth, E. Levy, and A. Silberschatz. </author> <title> A formal approach to recovery by compensating transactions. </title> <booktitle> In Proceedings of the 16th International Conference on Very Large Data Bases, </booktitle> <address> Brisbane, Australia, </address> <month> August </month> <year> 1990. </year>
Reference-contexts: There is, however, more cost associated with the undoing of T 2 than of T 3 since T 2 's operation compensation does not commute <ref> [12] </ref> with the operations of T 3 . <p> Sagas [7] and Compensating transactions <ref> [12] </ref> are good examples. There are at least two ways that semantic-based compensation strategies can be extended effectively with ESR to allow more concurrency and reduce rollback costs. In one approach, ESR limits can be used to determine whether a compensation is legal. <p> An implementation issue in asynchronous TP is to guarantee uniform outcome of distributed transactions running asynchronously. Unilateral Commit [11] is a protocol that uses reliable message transmission to guarantee that a uniform decision is correctly carried out. Optimistic Commit [13] is a protocol that uses Compensating Transactions <ref> [12] </ref> to undo the effects of partial results to reach a uniform decision. This is but one aspect of the autonomous TP problem. Sheth et al [24] use the notion of eventual consistency to define current copy serializabil-ity (CPSR) for replicated data.
Reference: [13] <author> E. Levy, H. Korth, and A. Silberschatz. </author> <title> An optimistic commit protocol for distributed transaction management. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on Management of Data, </booktitle> <address> Denver, Colorado, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: An implementation issue in asynchronous TP is to guarantee uniform outcome of distributed transactions running asynchronously. Unilateral Commit [11] is a protocol that uses reliable message transmission to guarantee that a uniform decision is correctly carried out. Optimistic Commit <ref> [13] </ref> is a protocol that uses Compensating Transactions [12] to undo the effects of partial results to reach a uniform decision. This is but one aspect of the autonomous TP problem. Sheth et al [24] use the notion of eventual consistency to define current copy serializabil-ity (CPSR) for replicated data.
Reference: [14] <author> E. Levy, H. Korth, and A. Silberschatz. </author> <title> A theory of relaxed atomicity. </title> <booktitle> In Proceedings of the 1991 ACM Symposium on Principles of Distributed Computing, </booktitle> <month> August </month> <year> 1991. </year>
Reference-contexts: Garcia-Molina et al. [7] proposed sagas that use semantic atomicity [6] which rely on transaction semantics to define correctness. Sagas differ from ESR because an unlimited amount of inconsistency (revealed before a compensation) may propagate and persist in the database. Levy et al <ref> [14] </ref> defined relaxed atomic-ity to model non-atomic transactions similar to sagas. Non-atomic transactions are composed of steps, which may be a forward step or a recovery step. They also describe the Polarized Protocol to implement Relaxed Atomicity.
Reference: [15] <author> P. E. O'Neil. </author> <title> The escrow transactional method. </title> <journal> ACM Transactions on Database Systems, </journal> <volume> 11(4) </volume> <pages> 405-430, </pages> <month> December </month> <year> 1986. </year>
Reference-contexts: Finally, ESR offers a much finer granularity control than the degrees of consistency. Another example of optimization to alleviate data contention is the Escrow Method, introduced by Reuter [23] and further described by O'Neil <ref> [15] </ref>. Using commutative, associative, and invertible operators, Escrow Method bounds numerical data uncertainty in an interval, allowing multiple concurrent accesses to the same data object.
Reference: [16] <author> C.H. Papadimitriou. </author> <title> Serializability of concurrent updates. </title> <journal> Journal of ACM, </journal> <volume> 26(4) </volume> <pages> 631-653, </pages> <month> October </month> <year> 1979. </year>
Reference-contexts: transaction processing provides the update support in classic databases, but on-line transaction processing does not scale up to multidatabases in terms of performance (increased level of concurrency), availability, and execution autonomy, due to its requirement that all distributed transactions must be atomic [8] according to the serializability (SR) correctness criterion <ref> [2, 16] </ref>. Asynchronous transaction processing [20] alleviates these limitations of serializability. A convenient foundation for asynchronous transaction processing is epsilon serializability (ESR) [22, 18].
Reference: [17] <author> C. Pu, W.W. Hseush, G.E. Kaiser, P. S. Yu, and K.L. Wu. </author> <title> Distributed divergence control algorithms for epsilon serializability. </title> <booktitle> In Proceedings of the Thirteenth International Conference on Distributed Computing Systems, </booktitle> <address> Pittsburgh, </address> <month> May </month> <year> 1993. </year>
Reference-contexts: ESR allows for limited inconsistency in transaction processing (TP), specified by application designers using epsilon-transactions (ETs). 1 Pamela Drew was supported by the Sino Software Research Center, contract number SSRC92/93.006. 2 Calton Pu was partially supported by National Science Foundation and Oki Electric Ind. Prior work on ESR <ref> [26, 17] </ref> focussed on divergence control (DC) methods to manage inconsistency between ETs that are either read-only (Q ET ) or serializable updates (U ET ). In this case, Q ET s can execute concurrently, within certain limits, with U ET s. <p> In fact, depending on the semantics of inconsistency, different notations may be used. In this paper, we extend and refine the same semantics of previous ESR papers <ref> [26, 18, 17] </ref>. We assume each value in the database state may include an inconsistency bounded by an absolute error bound within which the "correct" value is located. <p> Other types of transaction with more sophisticated operations such as branching, on the other hand, may have an ExpLimit designed very differently from data*-specs. 4 CR Methods 4.1 Summary Once a constraint is defined, an immediate question is what happens when the constraint is violated. Divergence control algorithms <ref> [26, 17] </ref> either block or abort an ET when its trans*-spec is violated. In a DBMS supporting ESR, when data*-spec is violated, we invoke a consistency restoration algorithm to reduce the data object's fuzziness.
Reference: [18] <author> C. Pu and A. Leff. </author> <title> Replica control in distributed systems: An asynchronous approach. </title> <booktitle> In Proceedings of the 1991 ACM SIGMOD International Conference on Management of Data, </booktitle> <pages> pages 377-386, </pages> <address> Denver, </address> <month> May </month> <year> 1991. </year>
Reference-contexts: Asynchronous transaction processing [20] alleviates these limitations of serializability. A convenient foundation for asynchronous transaction processing is epsilon serializability (ESR) <ref> [22, 18] </ref>. ESR allows for limited inconsistency in transaction processing (TP), specified by application designers using epsilon-transactions (ETs). 1 Pamela Drew was supported by the Sino Software Research Center, contract number SSRC92/93.006. 2 Calton Pu was partially supported by National Science Foundation and Oki Electric Ind. <p> In this case, Q ET s can execute concurrently, within certain limits, with U ET s. Inconsistency can be imported into the Q ET s or exported from U ET s. The divergence control methods ensure that inconsistency is not committed into the permanent database state. Other ESR papers <ref> [22, 18, 19, 20] </ref> also make the same assumption. This paper addresses the considerably different case of general ETs (G ET ) that both import and export inconsistency. <p> In fact, depending on the semantics of inconsistency, different notations may be used. In this paper, we extend and refine the same semantics of previous ESR papers <ref> [26, 18, 17] </ref>. We assume each value in the database state may include an inconsistency bounded by an absolute error bound within which the "correct" value is located. <p> Different inconsistency constraints such as time delay can be specified by the user and the system will propagate updates to maintain copy consistency accordingly. ESR can be used to model ETs read Page 8 ing quasi-copies, since the inconsistency speci-fications are similar. Beyond ESR's usefulness in asynchronous replication <ref> [18] </ref>, we can ESR in asynchronous TP. Data-value Partitioning [25] has been proposed as a method for increasing distributed TP system availability and autonomy by explicitly separating parts of the value of a data object into different sites.
Reference: [19] <author> C. Pu and A. Leff. </author> <title> Autonomous transaction execution with epsilon-serializability. </title> <booktitle> In Proceedings of 1992 RIDE Workshop on Transaction and Query Processing, Phoenix, </booktitle> <month> February </month> <year> 1992. </year> <journal> IEEE/Computer Society. </journal>
Reference-contexts: In this case, Q ET s can execute concurrently, within certain limits, with U ET s. Inconsistency can be imported into the Q ET s or exported from U ET s. The divergence control methods ensure that inconsistency is not committed into the permanent database state. Other ESR papers <ref> [22, 18, 19, 20] </ref> also make the same assumption. This paper addresses the considerably different case of general ETs (G ET ) that both import and export inconsistency.
Reference: [20] <author> C. Pu, A. Leff, and S.W. Chen. </author> <title> Heterogeneous and autonomous transaction processing. </title> <journal> IEEE Computer, </journal> <volume> 24(12) </volume> <pages> 64-72, </pages> <month> December </month> <year> 1991. </year> <note> Special issue on heterogeneous databases. </note>
Reference-contexts: Asynchronous transaction processing <ref> [20] </ref> alleviates these limitations of serializability. A convenient foundation for asynchronous transaction processing is epsilon serializability (ESR) [22, 18]. <p> In this case, Q ET s can execute concurrently, within certain limits, with U ET s. Inconsistency can be imported into the Q ET s or exported from U ET s. The divergence control methods ensure that inconsistency is not committed into the permanent database state. Other ESR papers <ref> [22, 18, 19, 20] </ref> also make the same assumption. This paper addresses the considerably different case of general ETs (G ET ) that both import and export inconsistency.
Reference: [21] <author> C. Pu, M.K. Tsang, K.L. Wu, and P.S. Yu. </author> <title> Multiversion divergence control of time fuzzi-ness. </title> <booktitle> In Proceedings of the Third International Conference on Information and Knowledge Management, </booktitle> <address> Gaithersburg, Maryland, </address> <month> November </month> <year> 1994. </year>
Reference-contexts: This per-ET limit of allowed inconsistency is called *- specification, or *-spec for short. Abstractly, *-spec is divided into two parts, imported inconsistency bound and exported inconsistency bound. There are many kinds of inconsistency and consequently *-spec may take several forms, as shown in [26] and <ref> [21] </ref>. In this paper, we use concrete examples for illustration. The methods can be generalized to other inconsistency specifications using techniques described in [26]. For example, in an airline reservation system, the number of seats reserved could be used as a unit of measure.
Reference: [22] <author> K. Ramamrithan and C. Pu. </author> <title> A formal characterization of epsilon serializability. </title> <journal> IEEE Transactions on Knowledge and Data Engineering, </journal> <note> to appear 1994. </note>
Reference-contexts: Asynchronous transaction processing [20] alleviates these limitations of serializability. A convenient foundation for asynchronous transaction processing is epsilon serializability (ESR) <ref> [22, 18] </ref>. ESR allows for limited inconsistency in transaction processing (TP), specified by application designers using epsilon-transactions (ETs). 1 Pamela Drew was supported by the Sino Software Research Center, contract number SSRC92/93.006. 2 Calton Pu was partially supported by National Science Foundation and Oki Electric Ind. <p> In this case, Q ET s can execute concurrently, within certain limits, with U ET s. Inconsistency can be imported into the Q ET s or exported from U ET s. The divergence control methods ensure that inconsistency is not committed into the permanent database state. Other ESR papers <ref> [22, 18, 19, 20] </ref> also make the same assumption. This paper addresses the considerably different case of general ETs (G ET ) that both import and export inconsistency. <p> In this case the inconsistency in the database may grow un-boundedly. The focus of this paper is the management of inconsistency propagation and consistency restoration techniques when G ET is introduced. A formal characterization of ESR in <ref> [22] </ref> specifies the following intuitive properties: * When all import-limit and export-limit are zero, ESR histories are serializable histo ries. * A set of transactions may not have a seri alizable history, but may satisfy ESR. * That is, ESR may allow more operation or derings than serializability. 2.3 Data Epsilon <p> Inconsistency Quantification In this section, we quantify inconsistency between G ET s and estimate the amount of inconsistency passed between them. 3.1 Terminology Inconsistency in a data object being shared by Q ET s and U ET s can be quantified using the notion of write and read lock intervals <ref> [22] </ref>. Consider transactions t 1 : : : t n where each of the t i 's updates x. A transaction's write lock interval is defined to be the time between when t i acquires a write lock on x and when t i releases the write lock on x. <p> A transaction's write lock interval is defined to be the time between when t i acquires a write lock on x and when t i releases the write lock on x. A read lock interval is defined similarly. A previous paper <ref> [22] </ref> shows how the intersection of these intervals from operations of different transactions can be used to put bounds Page 3 on the amount of inconsistency shared between queries and update transactions. <p> In this model, transactions still have a write lock interval on x as defined in <ref> [22] </ref>; previous results regarding the bounds on inconsistency between queries and update transactions remain valid. Consider G ET s named t 1 : : : t n where each of the t i 's can read and write to data object x.
Reference: [23] <author> A. Reuter. </author> <title> Concurrency on high-traffic data elements. </title> <booktitle> In Proceedings of 1982 ACM Principles of Database Systems Symposium, </booktitle> <pages> pages 83-92, </pages> <year> 1982. </year>
Reference-contexts: Finally, ESR offers a much finer granularity control than the degrees of consistency. Another example of optimization to alleviate data contention is the Escrow Method, introduced by Reuter <ref> [23] </ref> and further described by O'Neil [15]. Using commutative, associative, and invertible operators, Escrow Method bounds numerical data uncertainty in an interval, allowing multiple concurrent accesses to the same data object.
Reference: [24] <author> A. Sheth, Yungho Leu, and Ahmed Elma-garmid. </author> <title> Maintaining consistency of interdependent data in multidatabase systems. </title> <type> Technical Report CSD-TR-91-016, </type> <institution> Computer Science Department, Purdue University, </institution> <month> March </month> <year> 1991. </year>
Reference-contexts: Optimistic Commit [13] is a protocol that uses Compensating Transactions [12] to undo the effects of partial results to reach a uniform decision. This is but one aspect of the autonomous TP problem. Sheth et al <ref> [24] </ref> use the notion of eventual consistency to define current copy serializabil-ity (CPSR) for replicated data. Each update is done on a current copy and asynchronously propagated to the other replicas.
Reference: [25] <author> N. Soparkar and A. Silberschatz. </author> <title> Data-value partitioning and virtual messages. </title> <booktitle> In Proceedings of the Ninth ACM Symposium on Principles of Database Systems, </booktitle> <address> Nashville, Tennessee, </address> <month> April </month> <year> 1990. </year>
Reference-contexts: ESR can be used to model ETs read Page 8 ing quasi-copies, since the inconsistency speci-fications are similar. Beyond ESR's usefulness in asynchronous replication [18], we can ESR in asynchronous TP. Data-value Partitioning <ref> [25] </ref> has been proposed as a method for increasing distributed TP system availability and autonomy by explicitly separating parts of the value of a data object into different sites. Since the different parts may operate asynchronously even during network partitions, Data-value Partitioning increases autonomy because of its non-blocking character.
Reference: [26] <author> K.L. Wu, P. S. Yu, and C. Pu. </author> <title> Divergence control for epsilon-serializability. </title> <booktitle> In Proceedings of Eighth International Conference on Data Engineering, </booktitle> <pages> pages 506-515, </pages> <address> Phoenix, </address> <month> February </month> <year> 1992. </year> <journal> IEEE/Computer Society. </journal> <pages> Page 10 </pages>
Reference-contexts: ESR allows for limited inconsistency in transaction processing (TP), specified by application designers using epsilon-transactions (ETs). 1 Pamela Drew was supported by the Sino Software Research Center, contract number SSRC92/93.006. 2 Calton Pu was partially supported by National Science Foundation and Oki Electric Ind. Prior work on ESR <ref> [26, 17] </ref> focussed on divergence control (DC) methods to manage inconsistency between ETs that are either read-only (Q ET ) or serializable updates (U ET ). In this case, Q ET s can execute concurrently, within certain limits, with U ET s. <p> This per-ET limit of allowed inconsistency is called *- specification, or *-spec for short. Abstractly, *-spec is divided into two parts, imported inconsistency bound and exported inconsistency bound. There are many kinds of inconsistency and consequently *-spec may take several forms, as shown in <ref> [26] </ref> and [21]. In this paper, we use concrete examples for illustration. The methods can be generalized to other inconsistency specifications using techniques described in [26]. For example, in an airline reservation system, the number of seats reserved could be used as a unit of measure. <p> There are many kinds of inconsistency and consequently *-spec may take several forms, as shown in <ref> [26] </ref> and [21]. In this paper, we use concrete examples for illustration. The methods can be generalized to other inconsistency specifications using techniques described in [26]. For example, in an airline reservation system, the number of seats reserved could be used as a unit of measure. <p> In fact, depending on the semantics of inconsistency, different notations may be used. In this paper, we extend and refine the same semantics of previous ESR papers <ref> [26, 18, 17] </ref>. We assume each value in the database state may include an inconsistency bounded by an absolute error bound within which the "correct" value is located. <p> Other types of transaction with more sophisticated operations such as branching, on the other hand, may have an ExpLimit designed very differently from data*-specs. 4 CR Methods 4.1 Summary Once a constraint is defined, an immediate question is what happens when the constraint is violated. Divergence control algorithms <ref> [26, 17] </ref> either block or abort an ET when its trans*-spec is violated. In a DBMS supporting ESR, when data*-spec is violated, we invoke a consistency restoration algorithm to reduce the data object's fuzziness.
References-found: 26

