URL: http://www.cl.cam.ac.uk:80/ftp/papers/reports/TR359-jf10008-co-induction-in-isabelle.ps.gz
Refering-URL: http://www.cl.cam.ac.uk:80/ftp/papers/reports/
Root-URL: 
Email: e-mail:Jacob.Frost@cl.cam.ac.uk  
Title: A Case Study of Co-induction in Isabelle  
Author: Jacob Frost 
Note: 1 Supported by ESPRIT Basic Research Project 6453, Types for Proofs and Pro grams and the Danish Natural Science Research Council  
Date: February 1995  
Address: Cambridge  
Affiliation: Computer Laboratory University of  
Abstract-found: 0
Intro-found: 1
Reference: [1] <author> Jacob Frost. </author> <title> A case study of co-induction in Isabelle HOL. </title> <type> Technical Report 308, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <month> August </month> <year> 1993. </year> <note> http://www.cl.cam.ac.uk/Research/Reports/TR308-jf10008-co-induction.dvi.gz. </note>
Reference: [2] <author> Robin Milner and Mads Tofte. </author> <title> Co-induction in relational semantics. </title> <journal> Theoretical Computer Science, </journal> <volume> 87 </volume> <pages> 209-220, </pages> <year> 1991. </year>
Reference-contexts: The package does not merely state axioms, but proves all the necessary rules from definitions. As a consequence, the errors manifested themselves, as the package not being able to prove some of the rules or looping in the attempt. 6 Conclusion The main result of the paper <ref> [2] </ref>, consistency, has been proved formally in Isabelle HOL and Isabelle ZF. The notions of especially inductive definitions and datatypes but also co-inductive definitions and co-datatypes turned out to be central in the formal treatment that leads to the consistency result.
Reference: [3] <author> Lawrence C. Paulson. </author> <title> Co-induction and co-recursion in higher-order logic. </title> <type> Technical Report 304, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <month> July </month> <year> 1993. </year> <note> http://www.cl.cam.ac.uk/Research/Reports/TR304-lcp-coinduction.ps.gz. </note>
Reference: [4] <author> Lawrence C. Paulson. </author> <title> Introduction to Isabelle. </title> <type> Technical Report 280, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <month> January </month> <year> 1993. </year> <note> ftp://ftp. cl.cam.ac.uk/ml/intro.dvi.gz. 47 </note>
Reference: [5] <author> Lawrence C. Paulson. </author> <title> The Isabelle reference manual. </title> <type> Technical Report 283, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <month> February </month> <year> 1993. </year> <note> ftp://ftp. cl.cam.ac.uk/ml/ref.dvi.gz. </note>
Reference: [6] <author> Lawrence C. Paulson. </author> <title> A concrete final coalgebra theorem for ZF set theory. </title> <type> Technical Report 334, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <month> May </month> <year> 1994. </year> <note> http://www.cl.cam.ac.uk/Research/Reports/TR334-lcp-final.coalgebra.dvi.gz. </note>
Reference-contexts: If encoded using ordinary pairs the set of lazy lists would for example be exactly the same as the set of finite lists. Fortunately it is possible to circumvent the problem by defining a new notion of pairs; the variant pair <ref> [6] </ref>. <p> To overcome this problem the notion of variant maps (functions) is introduced. A variant map is a generalisation of a variant pair. A variant pair is a sum (a+b) and a variant map is a general sum ( x2a :b x ) <ref> [6] </ref>. The set of all variant maps can easily be defined directly from the set of standard maps by converting 33 each standard map into a variant map. Unfortunately such a definition makes reasoning hard.
Reference: [7] <author> Lawrence C. Paulson. </author> <title> A fixedpoint approach to implementing (co)inductive definitions. </title> <type> Technical Report 320, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <month> November </month> <year> 1994. </year> <note> http://www.cl.cam.ac.uk/Research/Reports /TR320-lcp-isabelle-ind-defs.dvi.gz. </note>
Reference-contexts: When doing (co)inductive definitions such as co-datatype definitions, it is crucial to use the right representations to avoid forcing sets to be well-founded. The (co)inductive package is therefore based on a theory of variant pairs, and uses them when necessary <ref> [7] </ref>. This does however not free the user of the package from being cautious. In the next section value environments are going to be represented as what is basically functions. The standard representation of functions in ZF is as sets of pairs.
Reference: [8] <author> Lawrence C. Paulson. </author> <title> Isabelle, A Generic Theorem Prover. </title> <booktitle> Number 828 in Lecture Notes in Computer Science. </booktitle> <publisher> Springer-Verlag, </publisher> <address> Berlin, </address> <year> 1994. </year>
Reference: [9] <author> Lawrence C. Paulson. Isabelle's object-logics. </author> <type> Technical Report 286, </type> <institution> University of Cambridge, Computer Laboratory, </institution> <month> October </month> <year> 1994. </year> <note> ftp://ftp. Cl.cam.ac.uk/ml/logics.dvi.gz. </note>
Reference: [10] <author> Tobias Nipkow and Lawrence C. Paulson. </author> <title> Datatypes and (co)inductive definitions in Isabelle/HOL. </title> <address> ftp://ftp.cl.cam.ac.uk/ml/HOL-extensions.dvi.gz, </address> <year> 1994. </year>
Reference-contexts: It would also be useful if the package supported simple classical reasoning about the (co)inductively defined constructs. Although not available at the time of formalisation, a (co)inductive package for Isabelle HOL now exists <ref> [10] </ref>. It is derived from the corresponding package for Isabelle ZF, but does not support co-datatypes.
References-found: 10

