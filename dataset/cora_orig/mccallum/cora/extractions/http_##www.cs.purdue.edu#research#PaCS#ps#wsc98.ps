URL: http://www.cs.purdue.edu/research/PaCS/ps/wsc98.ps
Refering-URL: http://www.cs.purdue.edu/research/PaCS/parasol.html
Root-URL: http://www.cs.purdue.edu
Title: EFFICIENT PROCESS INTERACTION WITH THREADS IN PARALLEL DISCRETE EVENT SIMULATION  
Author: Reuben Pasquini Vernon Rego 
Address: West Lafayette, IN 47907-1398, U.S.A.  
Affiliation: Department of Computer Sciences Purdue University  
Abstract: Parallel discrete event simulation (PDES) decreases a simulation's runtime by splitting the simulation's work between multiple processors. Many users avoid PDES because it is difficult to specify a large and complicated model using existing PDES tools. In this paper we describe how the ParaSol PDES system uses migrating user level threads to support the process interaction world view. The process interaction world view is popular in sequential simulation languages and is a major departure form the logical process view supported by most PDES systems. 
Abstract-found: 1
Intro-found: 1
Reference: <author> Carson, Jim. </author> <year> 1993. </year> <title> Modeling and simulation world-views. </title> <booktitle> Proceedings of the 1993 Winter Simulation Conference, </booktitle> <pages> 18-23. </pages>
Reference-contexts: A world view is simply the programming interface supplied by a language with which a developer must describe his simulation model. Three world views which different simulation languages (both sequential and parallel) support are the event, active server, and active process world views <ref> (Carson 1993) </ref>. The event-scheduling world view allows a simulation developer to describe his model in terms of a set of simulation events which act upon simulation ob jects.
Reference: <author> Jefferson, D. R. </author> <year> 1985. </year> <title> Virtual Time. </title> <journal> ACM Transactions on Programming Languages and System, 7:3:404-425. </journal>
Reference-contexts: A PDES must employ an algorithm which ensures that events execute in a causally consistent way. A simulation is causally consistent if each simulation object is accessed by events in nondecreasing time-stamp order. The time warp algorithm <ref> (Jefferson 1985) </ref> is an example of an optimistic algorithm for PDES. It is optimistic in the sense that each processor executes every event it knows about in time-stamp order under the optimistic assumption that causality is not being violated.
Reference: <author> Fujimoto, R. </author> <year> 1989. </year> <title> Time warp on a shared memory multiprocessor. </title> <journal> Transactions of the Society for Computer Simulation, 6:3:211-239. </journal>
Reference-contexts: Several LP based PDES systems have been implemented. The Georgia Tech Time Warp (GTW) PDES library simulates models described with the event-scheduling world view on shared memory parallel computers <ref> (Fujimoto 1989) </ref>. The WARPED (Martin and McBrayer 1997) PDES system also uses the event-scheduling world view. Maisie is a parallel simulation language that supports the active-server world view. Maisie improves upon GTW by making constructs for parallel execution more transparent to the user (Bagrodia 1991).
Reference: <author> Martin, D. E., and T. J. McBrayer. </author> <year> 1997. </year> <title> Warped - a parallel discrete event simulator (documentation for version 0.8). </title> <institution> Dept. of EECS, University of Cincinnati, OH. </institution>
Reference-contexts: Several LP based PDES systems have been implemented. The Georgia Tech Time Warp (GTW) PDES library simulates models described with the event-scheduling world view on shared memory parallel computers (Fujimoto 1989). The WARPED <ref> (Martin and McBrayer 1997) </ref> PDES system also uses the event-scheduling world view. Maisie is a parallel simulation language that supports the active-server world view. Maisie improves upon GTW by making constructs for parallel execution more transparent to the user (Bagrodia 1991).
Reference: <author> Bagrodia, R. L. </author> <year> 1991. </year> <title> Iterative Design of Efficient Simulators Using Maisie. </title> <booktitle> Proceedings of the 1991 Winter Simulation Conference, </booktitle> <pages> 243-247. </pages>
Reference-contexts: The WARPED (Martin and McBrayer 1997) PDES system also uses the event-scheduling world view. Maisie is a parallel simulation language that supports the active-server world view. Maisie improves upon GTW by making constructs for parallel execution more transparent to the user <ref> (Bagrodia 1991) </ref>. The SIMKIT language is another system that supports an active-server world view (Gomes et al. 1995). To the best of our knowledge, ParaSol and APOSTLE are the only two PDES systems which support the active-process world view.
Reference: <author> Gomes, F., S. Franks, B. Unger, and Z. Xiao. </author> <year> 1995. </year>
Reference-contexts: Maisie is a parallel simulation language that supports the active-server world view. Maisie improves upon GTW by making constructs for parallel execution more transparent to the user (Bagrodia 1991). The SIMKIT language is another system that supports an active-server world view <ref> (Gomes et al. 1995) </ref>. To the best of our knowledge, ParaSol and APOSTLE are the only two PDES systems which support the active-process world view. The APOSTLE system manages simulation process state as continuations constructed with compile time transformation of simulation code.
Reference: <author> Simkit: </author> <title> a high performance logical process simulation class library in C++. </title> <booktitle> Proceedings of the 1995 Winter Simulation Conference, </booktitle> <pages> 706-713. </pages>
Reference: <author> Booth, C. J. M., and D. I. Bruce. </author> <year> 1997. </year> <title> Stack-free process-oriented simulation, </title> <booktitle> Proceedings of the 11th Workshop on Parallel and Distributed Simulation, </booktitle> <pages> 182-185. </pages>
Reference-contexts: The APOSTLE system manages simulation process state as continuations constructed with compile time transformation of simulation code. APOSTLE employs the semi-conservative breathing time-buckets algorithm to enforce the causality constraint on shared memory architectures <ref> (Booth and Bruce 1997) </ref>. ParaSol implements simulation processes as user level threads. ParaSol uses the optimistic time warp synchronization algorithm on distributed memory architectures. 3 PARASOL BACKGROUND ParaSol is a process- and object-oriented parallel simulation language developed for distributed-memory multiprocessors and workstation clusters (Mascarenhas, Knop, and Rego 1995).
Reference: <author> Mascarenhas, E., F. Knop, and V. Rego. </author> <year> 1995. </year> <title> ParaSol: a multi-threaded system for parallel simulation based on mobile threads. </title> <booktitle> Proceedings of the 1995 Winter Simulation Conference, </booktitle> <pages> 690-697. </pages>
Reference-contexts: ParaSol implements simulation processes as user level threads. ParaSol uses the optimistic time warp synchronization algorithm on distributed memory architectures. 3 PARASOL BACKGROUND ParaSol is a process- and object-oriented parallel simulation language developed for distributed-memory multiprocessors and workstation clusters <ref> (Mascarenhas, Knop, and Rego 1995) </ref>. ParaSol's user interface is an object-oriented derivative of the user interface for the popular sequential simulation language CSIM (Schwetman 1986).
Reference: <author> Schwetman, H. D. </author> <year> 1986. </year> <title> CSIM: a C-based process-oriented simulation language. </title> <booktitle> Proceedings of the 1986 Winter Simulation Conference, </booktitle> <pages> 387-396. </pages>
Reference-contexts: ParaSol's user interface is an object-oriented derivative of the user interface for the popular sequential simulation language CSIM <ref> (Schwetman 1986) </ref>. ParaSol's sequential runtime performance is competitive with CSIM's performance on equivalent models; this makes it easy to relate ParaSol's performance with the performance of commercial sequential simulators. ParaSol has a simple layered design (see Figure 1).
Reference: <author> Kleiman, D., D. Shah, and B. Smalders. </author> <year> 1996. </year> <title> Programming with Threads. </title> <address> Englewood Cliffs, NJ: </address> <publisher> Prentice-Hall. </publisher>
Reference-contexts: Since a simulation may involve thousands of concurrently executing threads, ParaSol requires a fast and efficient thread system to achieve good runtime performance. Although user level threads take less time to create and context switch than operating system kernel threads <ref> (Kleiman, Shah, and Smalders 1996) </ref>, user thread manipulation is still expensive when compared to event handling in simulation systems supporting the event-scheduling world view. We have developed a high performance user level thread system for managing simulation process state in parallel and sequential discrete event simulation systems.
Reference: <author> Mascarenhas, E., and V. Rego. </author> <year> 1996. </year> <title> Ariadne: architecture of a portable threads system supporting thread migration. Software Practice and Experience, </title> <institution> 26:3:327-356. AUTHOR BIOGRAPHIES REUBEN PASQUINI is a graduate student in computer science at Purdue University. His research interests include parallel and distributed simulation. VERNON REGO is a Professor of Computer Sciences at Purdue University. </institution> <note> He was awarded the 1992 IEEE/Gordon Bell Prize in parallel processing research, and is an Editor of IEEE Transactions on Computers. His research interests include parallel simulation, parallel processing, modeling and software engineering. </note>
References-found: 12

